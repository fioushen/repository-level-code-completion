{"filename": "setup.py", "chunked_list": ["import pathlib\n\timport setuptools\n\tPACKAGE_DIR = pathlib.Path(__file__).absolute().parent\n\tdef get_version():\n\t    \"\"\"\n\t    Gets the multigrid version.\n\t    \"\"\"\n\t    path = PACKAGE_DIR / 'multigrid' / '__init__.py'\n\t    content = path.read_text()\n\t    for line in content.splitlines():\n", "        if line.startswith('__version__'):\n\t            return line.strip().split()[-1].strip().strip(\"'\")\n\t    raise RuntimeError(\"bad version data in __init__.py\")\n\tdef get_description():\n\t    \"\"\"\n\t    Gets the description from the readme.\n\t    \"\"\"\n\t    with open(\"README.md\") as fh:\n\t        long_description = \"\"\n\t        header_count = 0\n", "        for line in fh:\n\t            if line.startswith('##'):\n\t                header_count += 1\n\t            if header_count < 2:\n\t                long_description += line\n\t            else:\n\t                break\n\t    return long_description\n\tsetuptools.setup(\n\t    name='multigrid',\n", "    version=get_version(),\n\t    long_description=get_description(),\n\t)\n"]}
{"filename": "scripts/train.py", "chunked_list": ["from __future__ import annotations\n\timport argparse\n\timport json\n\timport os\n\timport random\n\timport ray\n\tfrom multigrid.rllib.models import TFModel, TorchModel, TorchLSTMModel\n\tfrom pathlib import Path\n\tfrom pprint import pprint\n\tfrom ray import tune\n", "from ray.rllib.algorithms import AlgorithmConfig\n\tfrom ray.rllib.utils.framework import try_import_tf, try_import_torch\n\tfrom ray.rllib.utils.from_config import NotProvided\n\tfrom ray.tune.registry import get_trainable_cls\n\tfrom typing import Callable\n\tdef get_checkpoint_dir(search_dir: Path | str | None) -> Path | None:\n\t    \"\"\"\n\t    Recursively search for checkpoints within the given directory.\n\t    If more than one is found, returns the most recently modified checkpoint directory.\n\t    Parameters\n", "    ----------\n\t    search_dir : Path or str\n\t        The directory to search for checkpoints within\n\t    \"\"\"\n\t    try:\n\t        checkpoints = Path(search_dir).expanduser().glob('**/*.is_checkpoint')\n\t        if checkpoints:\n\t            return sorted(checkpoints, key=os.path.getmtime)[-1].parent\n\t    except:\n\t        pass\n", "def get_policy_mapping_fn(\n\t    checkpoint_dir: Path | str | None, num_agents: int) -> Callable:\n\t    \"\"\"\n\t    Create policy mapping function from saved policies in checkpoint directory.\n\t    Maps agent i to the (i % num_policies)-th policy.\n\t    Parameters\n\t    ----------\n\t    checkpoint_dir : Path or str\n\t        The checkpoint directory to load policies from\n\t    num_agents : int\n", "        The number of agents in the environment\n\t    \"\"\"\n\t    try:\n\t        policies = sorted([\n\t            path for path in (checkpoint_dir / 'policies').iterdir() if path.is_dir()])\n\t        def policy_mapping_fn(agent_id, *args, **kwargs):\n\t            return policies[agent_id % len(policies)].name\n\t        print('Loading policies from:', checkpoint_dir)\n\t        for agent_id in range(num_agents):\n\t            print('Agent ID:', agent_id, 'Policy ID:', policy_mapping_fn(agent_id))\n", "        return policy_mapping_fn\n\t    except:\n\t        return lambda agent_id, *args, **kwargs: f'policy_{agent_id}'\n\tdef can_use_gpu() -> bool:\n\t    \"\"\"\n\t    Return whether or not GPU training is available.\n\t    \"\"\"\n\t    try:\n\t        _, tf, _ = try_import_tf()\n\t        return tf.test.is_gpu_available()\n", "    except:\n\t        pass\n\t    try:\n\t        torch, _ = try_import_torch()\n\t        return torch.cuda.is_available()\n\t    except:\n\t        pass\n\t    return False\n\tdef model_config(\n\t    framework: str = 'torch',\n", "    lstm: bool = False,\n\t    custom_model_config: dict = {}):\n\t    \"\"\"\n\t    Return a model configuration dictionary for RLlib.\n\t    \"\"\"\n\t    if framework == 'torch':\n\t        if lstm:\n\t            model = TorchLSTMModel\n\t        else:\n\t            model = TorchModel\n", "    else:\n\t        if lstm:\n\t            raise NotImplementedError\n\t        else:\n\t            model = TFModel\n\t    return {\n\t        'custom_model': model,\n\t        'custom_model_config': custom_model_config,\n\t        'conv_filters': [\n\t            [16, [3, 3], 1],\n", "            [16, [1, 1], 1],\n\t            [32, [3, 3], 1],\n\t            [32, [1, 1], 1],\n\t            [64, [3, 3], 1],\n\t            [64, [1, 1], 1],\n\t        ],\n\t        'fcnet_hiddens': [64, 64],\n\t        'post_fcnet_hiddens': [],\n\t        'lstm_cell_size': 64,\n\t        'max_seq_len': 64,\n", "    }\n\tdef algorithm_config(\n\t    algo: str = 'PPO',\n\t    env: str = 'MultiGrid-Empty-8x8-v0',\n\t    env_config: dict = {},\n\t    num_agents: int = 2,\n\t    framework: str = 'torch',\n\t    lstm: bool = False,\n\t    num_workers: int = 0,\n\t    num_gpus: int = 0,\n", "    lr: float | None = None,\n\t    **kwargs) -> AlgorithmConfig:\n\t    \"\"\"\n\t    Return the RL algorithm configuration dictionary.\n\t    \"\"\"\n\t    env_config = {**env_config, 'agents': num_agents}\n\t    return (\n\t        get_trainable_cls(algo)\n\t        .get_default_config()\n\t        .environment(env=env, env_config=env_config)\n", "        .framework(framework)\n\t        .rollouts(num_rollout_workers=num_workers)\n\t        .resources(num_gpus=num_gpus if can_use_gpu() else 0)\n\t        .multi_agent(\n\t            policies={f'policy_{i}' for i in range(num_agents)},\n\t            policy_mapping_fn=get_policy_mapping_fn(None, num_agents),\n\t        )\n\t        .training(\n\t            model=model_config(framework=framework, lstm=lstm),\n\t            lr=(lr or NotProvided),\n", "            vf_loss_coeff=0.5,\n\t            entropy_coeff=0.001,\n\t        )\n\t        .debugging(seed=random.randint(0, int(1e6)))\n\t    )\n\tdef train(\n\t    algo: str,\n\t    config: AlgorithmConfig,\n\t    stop_conditions: dict,\n\t    save_dir: str,\n", "    load_dir: str | None = None):\n\t    \"\"\"\n\t    Train an RLlib algorithm.\n\t    \"\"\"\n\t    ray.init(num_cpus=(config.num_rollout_workers + 1))\n\t    tune.run(\n\t        algo,\n\t        stop=stop_conditions,\n\t        config=config,\n\t        local_dir=save_dir,\n", "        verbose=1,\n\t        restore=get_checkpoint_dir(load_dir),\n\t        checkpoint_freq=20,\n\t        checkpoint_at_end=True,\n\t    )\n\t    ray.shutdown()\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\n\t        '--algo', type=str, default='PPO',\n", "        help=\"The name of the RLlib-registered algorithm to use.\")\n\t    parser.add_argument(\n\t        '--framework', type=str, choices=['torch', 'tf', 'tf2'], default='torch',\n\t        help=\"Deep learning framework to use.\")\n\t    parser.add_argument(\n\t        '--lstm', action='store_true', help=\"Use LSTM model.\")\n\t    parser.add_argument(\n\t        '--env', type=str, default='MultiGrid-Empty-8x8-v0',\n\t        help=\"MultiGrid environment to use.\")\n\t    parser.add_argument(\n", "        '--env-config', type=json.loads, default={},\n\t        help=\"Environment config dict, given as a JSON string (e.g. '{\\\"size\\\": 8}')\")\n\t    parser.add_argument(\n\t        '--num-agents', type=int, default=2, help=\"Number of agents in environment.\")\n\t    parser.add_argument(\n\t        '--num-workers', type=int, default=8, help=\"Number of rollout workers.\")\n\t    parser.add_argument(\n\t        '--num-gpus', type=int, default=1, help=\"Number of GPUs to train on.\")\n\t    parser.add_argument(\n\t        '--num-timesteps', type=int, default=1e7,\n", "        help=\"Total number of timesteps to train.\")\n\t    parser.add_argument(\n\t        '--lr', type=float, help=\"Learning rate for training.\")\n\t    parser.add_argument(\n\t        '--load-dir', type=str,\n\t        help=\"Checkpoint directory for loading pre-trained policies.\")\n\t    parser.add_argument(\n\t        '--save-dir', type=str, default='~/ray_results/',\n\t        help=\"Directory for saving checkpoints, results, and trained policies.\")\n\t    args = parser.parse_args()\n", "    config = algorithm_config(**vars(args))\n\t    stop_conditions = {'timesteps_total': args.num_timesteps}\n\t    print()\n\t    print(f\"Running with following CLI options: {args}\")\n\t    print('\\n', '-' * 64, '\\n', \"Training with following configuration:\", '\\n', '-' * 64)\n\t    print()\n\t    pprint(config.to_dict())\n\t    train(args.algo, config, stop_conditions, args.save_dir, args.load_dir)\n"]}
{"filename": "scripts/visualize.py", "chunked_list": ["import argparse\n\timport json\n\timport numpy as np\n\tfrom ray.rllib.algorithms import Algorithm\n\tfrom ray.rllib.utils.typing import AgentID\n\tfrom train import algorithm_config, get_checkpoint_dir, get_policy_mapping_fn\n\tfrom typing import Any, Callable, Iterable\n\tdef get_actions(\n\t    agent_ids: Iterable[AgentID],\n\t    algorithm: Algorithm,\n", "    policy_mapping_fn: Callable[[AgentID], str],\n\t    observations: dict[AgentID, Any],\n\t    states: dict[AgentID, Any]) -> tuple[dict[AgentID, Any], dict[AgentID, Any]]:\n\t    \"\"\"\n\t    Get actions for the given agents.\n\t    Parameters\n\t    ----------\n\t    agent_ids : Iterable[AgentID]\n\t        Agent IDs for which to get actions\n\t    algorithm : Algorithm\n", "        RLlib algorithm instance with trained policies\n\t    policy_mapping_fn : Callable(AgentID) -> str\n\t        Function mapping agent IDs to policy IDs\n\t    observations : dict[AgentID, Any]\n\t        Observations for each agent\n\t    states : dict[AgentID, Any]\n\t        States for each agent\n\t    Returns\n\t    -------\n\t    actions : dict[AgentID, Any]\n", "        Actions for each agent\n\t    states : dict[AgentID, Any]\n\t        Updated states for each agent\n\t    \"\"\"\n\t    actions = {}\n\t    for agent_id in agent_ids:\n\t        if states[agent_id]:\n\t            actions[agent_id], states[agent_id], _ = algorithm.compute_single_action(\n\t                observations[agent_id],\n\t                states[agent_id],\n", "                policy_id=policy_mapping_fn(agent_id)\n\t            )\n\t        else:\n\t            actions[agent_id] = algorithm.compute_single_action(\n\t                observations[agent_id],\n\t                policy_id=policy_mapping_fn(agent_id)\n\t            )\n\t    return actions, states\n\tdef visualize(\n\t    algorithm: Algorithm,\n", "    policy_mapping_fn: Callable[[AgentID], str],\n\t    num_episodes: int = 10) -> list[np.ndarray]:\n\t    \"\"\"\n\t    Visualize trajectories from trained agents.\n\t    Parameters\n\t    ----------\n\t    algorithm : Algorithm\n\t        RLlib algorithm instance with trained policies\n\t    policy_mapping_fn : Callable(AgentID) -> str\n\t        Function mapping agent IDs to policy IDs\n", "    num_episodes : int, default=10\n\t        Number of episodes to visualize\n\t    \"\"\"\n\t    frames = []\n\t    env = algorithm.env_creator(algorithm.config.env_config)\n\t    for episode in range(num_episodes):\n\t        print('\\n', '-' * 32, '\\n', 'Episode', episode, '\\n', '-' * 32)\n\t        episode_rewards = {agent_id: 0.0 for agent_id in env.get_agent_ids()}\n\t        terminations, truncations = {'__all__': False}, {'__all__': False}\n\t        observations, infos = env.reset()\n", "        states = {\n\t            agent_id: algorithm.get_policy(policy_mapping_fn(agent_id)).get_initial_state()\n\t            for agent_id in env.get_agent_ids()\n\t        }\n\t        while not terminations['__all__'] and not truncations['__all__']:\n\t            frames.append(env.get_frame())\n\t            actions, states = get_actions(\n\t                env.get_agent_ids(), algorithm, policy_mapping_fn, observations, states)\n\t            observations, rewards, terminations, truncations, infos = env.step(actions)\n\t            for agent_id in rewards:\n", "                episode_rewards[agent_id] += rewards[agent_id]\n\t        frames.append(env.get_frame())\n\t        print('Rewards:', episode_rewards)\n\t    env.close()\n\t    return frames\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\n\t        '--algo', type=str, default='PPO',\n\t        help=\"The name of the RLlib-registered algorithm to use.\")\n", "    parser.add_argument(\n\t        '--framework', type=str, choices=['torch', 'tf', 'tf2'], default='torch',\n\t        help=\"Deep learning framework to use.\")\n\t    parser.add_argument(\n\t        '--lstm', action='store_true', help=\"Use LSTM model.\")\n\t    parser.add_argument(\n\t        '--env', type=str, default='MultiGrid-Empty-8x8-v0',\n\t        help=\"MultiGrid environment to use.\")\n\t    parser.add_argument(\n\t        '--env-config', type=json.loads, default={},\n", "        help=\"Environment config dict, given as a JSON string (e.g. '{\\\"size\\\": 8}')\")\n\t    parser.add_argument(\n\t        '--num-agents', type=int, default=2, help=\"Number of agents in environment.\")\n\t    parser.add_argument(\n\t        '--num-episodes', type=int, default=10, help=\"Number of episodes to visualize.\")\n\t    parser.add_argument(\n\t        '--load-dir', type=str,\n\t        help=\"Checkpoint directory for loading pre-trained policies.\")\n\t    parser.add_argument(\n\t        '--gif', type=str, help=\"Store output as GIF at given path.\")\n", "    args = parser.parse_args()\n\t    args.env_config.update(render_mode='human')\n\t    config = algorithm_config(\n\t        **vars(args),\n\t        num_workers=0,\n\t        num_gpus=0,\n\t    )\n\t    algorithm = config.build()\n\t    checkpoint = get_checkpoint_dir(args.load_dir)\n\t    policy_mapping_fn = lambda agent_id, *args, **kwargs: f'policy_{agent_id}'\n", "    if checkpoint:\n\t        print(f\"Loading checkpoint from {checkpoint}\")\n\t        algorithm.restore(checkpoint)\n\t        policy_mapping_fn = get_policy_mapping_fn(checkpoint, args.num_agents)\n\t    frames = visualize(algorithm, policy_mapping_fn, num_episodes=args.num_episodes)\n\t    if args.gif:\n\t        from array2gif import write_gif\n\t        filename = args.gif if args.gif.endswith('.gif') else f'{args.gif}.gif'\n\t        print(f\"Saving GIF to {filename}\")\n\t        write_gif(np.array(frames), filename, fps=10)\n"]}
{"filename": "multigrid/wrappers.py", "chunked_list": ["from __future__ import annotations\n\timport gymnasium as gym\n\timport numba as nb\n\timport numpy as np\n\tfrom gymnasium import spaces\n\tfrom gymnasium.core import ObservationWrapper\n\tfrom numpy.typing import NDArray as ndarray\n\tfrom .base import MultiGridEnv, AgentID, ObsType\n\tfrom .core.constants import Color, Direction, State, Type\n\tfrom .core.world_object import WorldObj\n", "class FullyObsWrapper(ObservationWrapper):\n\t    \"\"\"\n\t    Fully observable gridworld using a compact grid encoding instead of agent view.\n\t    Examples\n\t    --------\n\t    >>> import gymnasium as gym\n\t    >>> import multigrid.envs\n\t    >>> env = gym.make('MultiGrid-Empty-16x16-v0')\n\t    >>> obs, _ = env.reset()\n\t    >>> obs[0]['image'].shape\n", "    (7, 7, 3)\n\t    >>> from multigrid.wrappers import FullyObsWrapper\n\t    >>> env = FullyObsWrapper(env)\n\t    >>> obs, _ = env.reset()\n\t    >>> obs[0]['image'].shape\n\t    (16, 16, 3)\n\t    \"\"\"\n\t    def __init__(self, env: MultiGridEnv):\n\t        \"\"\"\n\t        \"\"\"\n", "        super().__init__(env)\n\t        # Update agent observation spaces\n\t        for agent in self.env.agents:\n\t            agent.observation_space['image'] = spaces.Box(\n\t                low=0, high=255, shape=(env.height, env.width, WorldObj.dim), dtype=int)\n\t    def observation(self, obs: dict[AgentID, ObsType]) -> dict[AgentID, ObsType]:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        img = self.env.grid.encode()\n", "        for agent in self.env.agents:\n\t            img[agent.state.pos] = agent.encode()\n\t        for agent_id in obs:\n\t            obs[agent_id]['image'] = img\n\t        return obs\n\tclass OneHotObsWrapper(ObservationWrapper):\n\t    \"\"\"\n\t    Wrapper to get a one-hot encoding of a partially observable\n\t    agent view as observation.\n\t    Examples\n", "    --------\n\t    >>> import gymnasium as gym\n\t    >>> import multigrid.envs\n\t    >>> env = gym.make('MultiGrid-Empty-5x5-v0')\n\t    >>> obs, _ = env.reset()\n\t    >>> obs[0]['image'][0, :, :]\n\t    array([[2, 5, 0],\n\t            [2, 5, 0],\n\t            [2, 5, 0],\n\t            [2, 5, 0],\n", "            [2, 5, 0],\n\t            [2, 5, 0],\n\t            [2, 5, 0]])\n\t    >>> from multigrid.wrappers import OneHotObsWrapper\n\t    >>> env = OneHotObsWrapper(env)\n\t    >>> obs, _ = env.reset()\n\t    >>> obs[0]['image'][0, :, :]\n\t    array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n\t            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n\t            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n", "            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n\t            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n\t            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n\t            [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]],\n\t            dtype=uint8)\n\t    \"\"\"\n\t    def __init__(self, env: MultiGridEnv):\n\t        \"\"\"\n\t        \"\"\"\n\t        super().__init__(env)\n", "        self.dim_sizes = np.array([\n\t            len(Type), len(Color), max(len(State), len(Direction))])\n\t        # Update agent observation spaces\n\t        dim = sum(self.dim_sizes)\n\t        for agent in self.env.agents:\n\t            view_height, view_width, _ = agent.observation_space['image'].shape\n\t            agent.observation_space['image'] = spaces.Box(\n\t                low=0, high=1, shape=(view_height, view_width, dim), dtype=np.uint8)\n\t    def observation(self, obs: dict[AgentID, ObsType]) -> dict[AgentID, ObsType]:\n\t        \"\"\"\n", "        :meta private:\n\t        \"\"\"\n\t        for agent_id in obs:\n\t            obs[agent_id]['image'] = self.one_hot(obs[agent_id]['image'], self.dim_sizes)\n\t        return obs\n\t    @staticmethod\n\t    @nb.njit(cache=True)\n\t    def one_hot(x: ndarray[np.int], dim_sizes: ndarray[np.int]) -> ndarray[np.uint8]:\n\t        \"\"\"\n\t        Return a one-hot encoding of a 3D integer array,\n", "        where each 2D slice is encoded separately.\n\t        Parameters\n\t        ----------\n\t        x : ndarray[int] of shape (view_height, view_width, dim)\n\t            3D array of integers to be one-hot encoded\n\t        dim_sizes : ndarray[int] of shape (dim,)\n\t            Number of possible values for each dimension\n\t        Returns\n\t        -------\n\t        out : ndarray[uint8] of shape (view_height, view_width, sum(dim_sizes))\n", "            One-hot encoding\n\t        :meta private:\n\t        \"\"\"\n\t        out = np.zeros((x.shape[0], x.shape[1], sum(dim_sizes)), dtype=np.uint8)\n\t        dim_offset = 0\n\t        for d in range(len(dim_sizes)):\n\t            for i in range(x.shape[0]):\n\t                for j in range(x.shape[1]):\n\t                    k = dim_offset + x[i, j, d]\n\t                    out[i, j, k] = 1\n", "            dim_offset += dim_sizes[d]\n\t        return out\n\tclass SingleAgentWrapper(gym.Wrapper):\n\t    \"\"\"\n\t    Wrapper to convert a multi-agent environment into a\n\t    single-agent environment.\n\t    Examples\n\t    --------\n\t    >>> import gymnasium as gym\n\t    >>> import multigrid.envs\n", "    >>> env = gym.make('MultiGrid-Empty-5x5-v0')\n\t    >>> obs, _ = env.reset()\n\t    >>> obs[0].keys()\n\t    dict_keys(['image', 'direction', 'mission'])\n\t    >>> from multigrid.wrappers import SingleAgentWrapper\n\t    >>> env = SingleAgentWrapper(env)\n\t    >>> obs, _ = env.reset()\n\t    >>> obs.keys()\n\t    dict_keys(['image', 'direction', 'mission'])\n\t    \"\"\"\n", "    def __init__(self, env: MultiGridEnv):\n\t        \"\"\"\n\t        \"\"\"\n\t        super().__init__(env)\n\t        self.observation_space = env.agents[0].observation_space\n\t        self.action_space = env.agents[0].action_space\n\t    def reset(self, *args, **kwargs):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n", "        result = super().reset(*args, **kwargs)\n\t        return tuple(item[0] for item in result)\n\t    def step(self, action):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        result = super().step({0: action})\n\t        return tuple(item[0] for item in result)\n"]}
{"filename": "multigrid/base.py", "chunked_list": ["from __future__ import annotations\n\timport gymnasium as gym\n\timport math\n\timport numpy as np\n\timport pygame\n\timport pygame.freetype\n\tfrom abc import ABC, abstractmethod\n\tfrom collections import defaultdict\n\tfrom functools import cached_property\n\tfrom gymnasium import spaces\n", "from itertools import repeat\n\tfrom numpy.typing import NDArray as ndarray\n\tfrom typing import Any, Callable, Iterable, Literal, SupportsFloat\n\tfrom .core.actions import Action\n\tfrom .core.agent import Agent, AgentState\n\tfrom .core.constants import Type, TILE_PIXELS\n\tfrom .core.grid import Grid\n\tfrom .core.mission import MissionSpace\n\tfrom .core.world_object import WorldObj\n\tfrom .utils.obs import gen_obs_grid_encoding\n", "from .utils.random import RandomMixin\n\t### Typing\n\tAgentID = int\n\tObsType = dict[str, Any]\n\t### Environment\n\tclass MultiGridEnv(gym.Env, RandomMixin, ABC):\n\t    \"\"\"\n\t    Base class for multi-agent 2D gridworld environments.\n\t    :Agents:\n\t        The environment can be configured with any fixed number of agents.\n", "        Agents are represented by :class:`.Agent` instances, and are\n\t        identified by their index, from ``0`` to ``len(env.agents) - 1``.\n\t    :Observation Space:\n\t        The multi-agent observation space is a Dict mapping from agent index to\n\t        corresponding agent observation space.\n\t        The standard agent observation is a dictionary with the following entries:\n\t            * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t                Encoding of the agent's view of the environment,\n\t                where each grid object is encoded as a 3 dimensional tuple:\n\t                (:class:`.Type`, :class:`.Color`, :class:`.State`)\n", "            * direction : int\n\t                Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t            * mission : Mission\n\t                Task string corresponding to the current environment configuration\n\t    :Action Space:\n\t        The multi-agent action space is a Dict mapping from agent index to\n\t        corresponding agent action space.\n\t        Agent actions are discrete integers, as enumerated in :class:`.Action`.\n\t    Attributes\n\t    ----------\n", "    agents : list[Agent]\n\t        List of agents in the environment\n\t    grid : Grid\n\t        Environment grid\n\t    observation_space : spaces.Dict[AgentID, spaces.Space]\n\t        Joint observation space of all agents\n\t    action_space : spaces.Dict[AgentID, spaces.Space]\n\t        Joint action space of all agents\n\t    \"\"\"\n\t    metadata = {\n", "        'render_modes': ['human', 'rgb_array'],\n\t        'render_fps': 20,\n\t    }\n\t    def __init__(\n\t        self,\n\t        mission_space: MissionSpace | str = \"maximize reward\",\n\t        agents: Iterable[Agent] | int = 1,\n\t        grid_size: int | None = None,\n\t        width: int | None = None,\n\t        height: int | None = None,\n", "        max_steps: int = 100,\n\t        see_through_walls: bool = False,\n\t        agent_view_size: int = 7,\n\t        allow_agent_overlap: bool = True,\n\t        joint_reward: bool = False,\n\t        success_termination_mode: Literal['any', 'all'] = 'any',\n\t        failure_termination_mode: Literal['any', 'all'] = 'all',\n\t        render_mode: str | None = None,\n\t        screen_size: int | None = 640,\n\t        highlight: bool = True,\n", "        tile_size: int = TILE_PIXELS,\n\t        agent_pov: bool = False):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        mission_space : MissionSpace\n\t            Space of mission strings (i.e. agent instructions)\n\t        agents : int or Iterable[Agent]\n\t            Number of agents in the environment (or provide :class:`Agent` instances)\n\t        grid_size : int\n", "            Size of the environment grid (width and height)\n\t        width : int\n\t            Width of the environment grid (if `grid_size` is not provided)\n\t        height : int\n\t            Height of the environment grid (if `grid_size` is not provided)\n\t        max_steps : int\n\t            Maximum number of steps per episode\n\t        see_through_walls : bool\n\t            Whether agents can see through walls\n\t        agent_view_size : int\n", "            Size of agent view (must be odd)\n\t        allow_agent_overlap : bool\n\t            Whether agents are allowed to overlap\n\t        joint_reward : bool\n\t            Whether all agents receive the same joint reward\n\t        success_termination_mode : 'any' or 'all'\n\t            Whether to terminate when any agent completes its mission\n\t            or when all agents complete their missions\n\t        failure_termination_mode : 'any' or 'all'\n\t            Whether to terminate when any agent fails its mission\n", "            or when all agents fail their missions\n\t        render_mode : str\n\t            Rendering mode (human or rgb_array)\n\t        screen_size : int\n\t            Width and height of the rendering window (in pixels)\n\t        highlight : bool\n\t            Whether to highlight the view of each agent when rendering\n\t        tile_size : int\n\t            Width and height of each grid tiles (in pixels)\n\t        \"\"\"\n", "        gym.Env.__init__(self)\n\t        RandomMixin.__init__(self, self.np_random)\n\t        # Initialize mission space\n\t        if isinstance(mission_space, str):\n\t            self.mission_space = MissionSpace.from_string(mission_space)\n\t        else:\n\t            self.mission_space = mission_space\n\t        # Initialize grid\n\t        width, height = (grid_size, grid_size) if grid_size else (width, height)\n\t        assert width is not None and height is not None\n", "        self.width, self.height = width, height\n\t        self.grid: Grid = Grid(width, height)\n\t        # Initialize agents\n\t        if isinstance(agents, int):\n\t            self.num_agents = agents\n\t            self.agent_states = AgentState(agents) # joint agent state (vectorized)\n\t            self.agents: list[Agent] = []\n\t            for i in range(agents):\n\t                agent = Agent(\n\t                    index=i,\n", "                    mission_space=self.mission_space,\n\t                    view_size=agent_view_size,\n\t                    see_through_walls=see_through_walls,\n\t                )\n\t                agent.state = self.agent_states[i]\n\t                self.agents.append(agent)\n\t        elif isinstance(agents, Iterable):\n\t            assert {agent.index for agent in agents} == set(range(len(agents)))\n\t            self.num_agents = len(agents)\n\t            self.agent_states = AgentState(self.num_agents)\n", "            self.agents: list[Agent] = sorted(agents, key=lambda agent: agent.index)\n\t            for agent in self.agents:\n\t                self.agent_states[agent.index] = agent.state # copy to joint agent state\n\t                agent.state = self.agent_states[agent.index] # reference joint agent state\n\t        else:\n\t            raise ValueError(f\"Invalid argument for agents: {agents}\")\n\t        # Action enumeration for this environment\n\t        self.actions = Action\n\t        # Range of possible rewards\n\t        self.reward_range = (0, 1)\n", "        assert isinstance(\n\t            max_steps, int\n\t        ), f\"The argument max_steps must be an integer, got: {type(max_steps)}\"\n\t        self.max_steps = max_steps\n\t        # Rendering attributes\n\t        self.render_mode = render_mode\n\t        self.highlight = highlight\n\t        self.tile_size = tile_size\n\t        self.agent_pov = agent_pov\n\t        self.screen_size = screen_size\n", "        self.render_size = None\n\t        self.window = None\n\t        self.clock = None\n\t        # Other\n\t        self.allow_agent_overlap = allow_agent_overlap\n\t        self.joint_reward = joint_reward\n\t        self.success_termination_mode = success_termination_mode\n\t        self.failure_termination_mode = failure_termination_mode\n\t    @cached_property\n\t    def observation_space(self) -> spaces.Dict[AgentID, spaces.Space]:\n", "        \"\"\"\n\t        Return the joint observation space of all agents.\n\t        \"\"\"\n\t        return spaces.Dict({\n\t            agent.index: agent.observation_space\n\t            for agent in self.agents\n\t        })\n\t    @cached_property\n\t    def action_space(self) -> spaces.Dict[AgentID, spaces.Space]:\n\t        \"\"\"\n", "        Return the joint action space of all agents.\n\t        \"\"\"\n\t        return spaces.Dict({\n\t            agent.index: agent.action_space\n\t            for agent in self.agents\n\t        })\n\t    @abstractmethod\n\t    def _gen_grid(self, width: int, height: int):\n\t        \"\"\"\n\t        :meta public:\n", "        Generate the grid for a new episode.\n\t        This method should:\n\t        * Set ``self.grid`` and populate it with :class:`.WorldObj` instances\n\t        * Set the positions and directions of each agent\n\t        Parameters\n\t        ----------\n\t        width : int\n\t            Width of the grid\n\t        height : int\n\t            Height of the grid\n", "        \"\"\"\n\t        pass\n\t    def reset(\n\t        self, seed: int | None = None, **kwargs) -> tuple[\n\t            dict[AgentID, ObsType]:\n\t            dict[AgentID, dict[str, Any]]]:\n\t        \"\"\"\n\t        Reset the environment.\n\t        Parameters\n\t        ----------\n", "        seed : int or None\n\t            Seed for random number generator\n\t        Returns\n\t        -------\n\t        observations : dict[AgentID, ObsType]\n\t            Observation for each agent\n\t        infos : dict[AgentID, dict[str, Any]]\n\t            Additional information for each agent\n\t        \"\"\"\n\t        super().reset(seed=seed, **kwargs)\n", "        # Reset agents\n\t        self.mission_space.seed(seed)\n\t        self.mission = self.mission_space.sample()\n\t        for agent in self.agents:\n\t            agent.reset(mission=self.mission)\n\t        # Generate a new random grid at the start of each episode\n\t        self._gen_grid(self.width, self.height)\n\t        # These fields should be defined by _gen_grid\n\t        assert np.all(self.agent_states.pos >= 0)\n\t        assert np.all(self.agent_states.dir >= 0)\n", "        # Check that agents don't overlap with other objects\n\t        for agent in self.agents:\n\t            start_cell = self.grid.get(*agent.state.pos)\n\t            assert start_cell is None or start_cell.can_overlap()\n\t        # Step count since episode start\n\t        self.step_count = 0\n\t        # Return first observation\n\t        observations = self.gen_obs()\n\t        # Render environment\n\t        if self.render_mode == 'human':\n", "            self.render()\n\t        return observations, defaultdict(dict)\n\t    def step(\n\t        self,\n\t        actions: dict[AgentID, Action]) -> tuple[\n\t            dict[AgentID, ObsType],\n\t            dict[AgentID, SupportsFloat],\n\t            dict[AgentID, bool],\n\t            dict[AgentID, bool],\n\t            dict[AgentID, dict[str, Any]]]:\n", "        \"\"\"\n\t        Run one timestep of the environment’s dynamics\n\t        using the provided agent actions.\n\t        Parameters\n\t        ----------\n\t        actions : dict[AgentID, Action]\n\t            Action for each agent acting at this timestep\n\t        Returns\n\t        -------\n\t        observations : dict[AgentID, ObsType]\n", "            Observation for each agent\n\t        rewards : dict[AgentID, SupportsFloat]\n\t            Reward for each agent\n\t        terminations : dict[AgentID, bool]\n\t            Whether the episode has been terminated for each agent (success or failure)\n\t        truncations : dict[AgentID, bool]\n\t            Whether the episode has been truncated for each agent (max steps reached)\n\t        infos : dict[AgentID, dict[str, Any]]\n\t            Additional information for each agent\n\t        \"\"\"\n", "        self.step_count += 1\n\t        rewards = self.handle_actions(actions)\n\t        # Generate outputs\n\t        observations = self.gen_obs()\n\t        terminations = dict(enumerate(self.agent_states.terminated))\n\t        truncated = self.step_count >= self.max_steps\n\t        truncations = dict(enumerate(repeat(truncated, self.num_agents)))\n\t        # Rendering\n\t        if self.render_mode == 'human':\n\t            self.render()\n", "        return observations, rewards, terminations, truncations, defaultdict(dict)\n\t    def gen_obs(self) -> dict[AgentID, ObsType]:\n\t        \"\"\"\n\t        Generate observations for each agent (partially observable, low-res encoding).\n\t        Returns\n\t        -------\n\t        observations : dict[AgentID, ObsType]\n\t            Mapping from agent ID to observation dict, containing:\n\t                * 'image': partially observable view of the environment\n\t                * 'direction': agent's direction / orientation (acting as a compass)\n", "                * 'mission': textual mission string (instructions for the agent)\n\t        \"\"\"\n\t        direction = self.agent_states.dir\n\t        image = gen_obs_grid_encoding(\n\t            self.grid.state,\n\t            self.agent_states,\n\t            self.agents[0].view_size,\n\t            self.agents[0].see_through_walls,\n\t        )\n\t        observations = {}\n", "        for i in range(self.num_agents):\n\t            observations[i] = {\n\t                'image': image[i],\n\t                'direction': direction[i],\n\t                'mission': self.agents[i].mission,\n\t            }\n\t        return observations\n\t    def handle_actions(\n\t        self, actions: dict[AgentID, Action]) -> dict[AgentID, SupportsFloat]:\n\t        \"\"\"\n", "        Handle actions taken by agents.\n\t        Parameters\n\t        ----------\n\t        actions : dict[AgentID, Action]\n\t            Action for each agent acting at this timestep\n\t        Returns\n\t        -------\n\t        rewards : dict[AgentID, SupportsFloat]\n\t            Reward for each agent\n\t        \"\"\"\n", "        rewards = {agent_index: 0 for agent_index in range(self.num_agents)}\n\t        # Randomize agent action order\n\t        if self.num_agents == 1:\n\t            order = (0,)\n\t        else:\n\t            order = self.np_random.random(size=self.num_agents).argsort()\n\t        # Update agent states, grid states, and reward from actions\n\t        for i in order:\n\t            agent, action = self.agents[i], actions[i]\n\t            if agent.state.terminated:\n", "                continue\n\t            # Rotate left\n\t            if action == Action.left:\n\t                agent.state.dir = (agent.state.dir - 1) % 4\n\t            # Rotate right\n\t            elif action == Action.right:\n\t                agent.state.dir = (agent.state.dir + 1) % 4\n\t            # Move forward\n\t            elif action == Action.forward:\n\t                fwd_pos = agent.front_pos\n", "                fwd_obj = self.grid.get(*fwd_pos)\n\t                if fwd_obj is None or fwd_obj.can_overlap():\n\t                    if not self.allow_agent_overlap:\n\t                        agent_present = np.bitwise_and.reduce(\n\t                            self.agent_states.pos == fwd_pos, axis=1).any()\n\t                        if agent_present:\n\t                            continue\n\t                    agent.state.pos = fwd_pos\n\t                    if fwd_obj is not None:\n\t                        if fwd_obj.type == Type.goal:\n", "                            self.on_success(agent, rewards, {})\n\t                        if fwd_obj.type == Type.lava:\n\t                            self.on_failure(agent, rewards, {})\n\t            # Pick up an object\n\t            elif action == Action.pickup:\n\t                fwd_pos = agent.front_pos\n\t                fwd_obj = self.grid.get(*fwd_pos)\n\t                if fwd_obj is not None and fwd_obj.can_pickup():\n\t                    if agent.state.carrying is None:\n\t                        agent.state.carrying = fwd_obj\n", "                        self.grid.set(*fwd_pos, None)\n\t            # Drop an object\n\t            elif action == Action.drop:\n\t                fwd_pos = agent.front_pos\n\t                fwd_obj = self.grid.get(*fwd_pos)\n\t                if agent.state.carrying and fwd_obj is None:\n\t                    agent_present = np.bitwise_and.reduce(\n\t                        self.agent_states.pos == fwd_pos, axis=1).any()\n\t                    if not agent_present:\n\t                        self.grid.set(*fwd_pos, agent.state.carrying)\n", "                        agent.state.carrying.cur_pos = fwd_pos\n\t                        agent.state.carrying = None\n\t            # Toggle/activate an object\n\t            elif action == Action.toggle:\n\t                fwd_pos = agent.front_pos\n\t                fwd_obj = self.grid.get(*fwd_pos)\n\t                if fwd_obj is not None:\n\t                    fwd_obj.toggle(self, agent, fwd_pos)\n\t            # Done action (not used by default)\n\t            elif action == Action.done:\n", "                pass\n\t            else:\n\t                raise ValueError(f\"Unknown action: {action}\")\n\t        return rewards\n\t    def on_success(\n\t        self,\n\t        agent: Agent,\n\t        rewards: dict[AgentID, SupportsFloat],\n\t        terminations: dict[AgentID, bool]):\n\t        \"\"\"\n", "        Callback for when an agent completes its mission.\n\t        Parameters\n\t        ----------\n\t        agent : Agent\n\t            Agent that completed its mission\n\t        rewards : dict[AgentID, SupportsFloat]\n\t            Reward dictionary to be updated\n\t        terminations : dict[AgentID, bool]\n\t            Termination dictionary to be updated\n\t        \"\"\"\n", "        if self.success_termination_mode == 'any':\n\t            self.agent_states.terminated = True # terminate all agents\n\t            for i in range(self.num_agents):\n\t                terminations[i] = True\n\t        else:\n\t            agent.state.terminated = True # terminate this agent only\n\t            terminations[agent.index] = True\n\t        if self.joint_reward:\n\t            for i in range(self.num_agents):\n\t                rewards[i] = self._reward() # reward all agents\n", "        else:\n\t            rewards[agent.index] = self._reward() # reward this agent only\n\t    def on_failure(\n\t        self,\n\t        agent: Agent,\n\t        rewards: dict[AgentID, SupportsFloat],\n\t        terminations: dict[AgentID, bool]):\n\t        \"\"\"\n\t        Callback for when an agent fails its mission prematurely.\n\t        Parameters\n", "        ----------\n\t        agent : Agent\n\t            Agent that failed its mission\n\t        rewards : dict[AgentID, SupportsFloat]\n\t            Reward dictionary to be updated\n\t        terminations : dict[AgentID, bool]\n\t            Termination dictionary to be updated\n\t        \"\"\"\n\t        if self.failure_termination_mode == 'any':\n\t            self.agent_states.terminated = True # terminate all agents\n", "            for i in range(self.num_agents):\n\t                terminations[i] = True\n\t        else:\n\t            agent.state.terminated = True # terminate this agent only\n\t            terminations[agent.index] = True\n\t    def is_done(self) -> bool:\n\t        \"\"\"\n\t        Return whether the current episode is finished (for all agents).\n\t        \"\"\"\n\t        truncated = self.step_count >= self.max_steps\n", "        return truncated or all(self.agent_states.terminated)\n\t    def __str__(self):\n\t        \"\"\"\n\t        Produce a pretty string of the environment's grid along with the agent.\n\t        A grid cell is represented by 2-character string, the first one for\n\t        the object and the second one for the color.\n\t        \"\"\"\n\t        # Map of object types to short string\n\t        OBJECT_TO_STR = {\n\t            'wall': 'W',\n", "            'floor': 'F',\n\t            'door': 'D',\n\t            'key': 'K',\n\t            'ball': 'A',\n\t            'box': 'B',\n\t            'goal': 'G',\n\t            'lava': 'V',\n\t        }\n\t        # Map agent's direction to short string\n\t        AGENT_DIR_TO_STR = {0: '>', 1: 'V', 2: '<', 3: '^'}\n", "        # Get agent locations\n\t        location_to_agent = {tuple(agent.pos): agent for agent in self.agents}\n\t        output = \"\"\n\t        for j in range(self.grid.height):\n\t            for i in range(self.grid.width):\n\t                if (i, j) in location_to_agent:\n\t                    output += 2 * AGENT_DIR_TO_STR[location_to_agent[i, j].dir]\n\t                    continue\n\t                tile = self.grid.get(i, j)\n\t                if tile is None:\n", "                    output += '  '\n\t                    continue\n\t                if tile.type == 'agent':\n\t                    output += 2 * AGENT_DIR_TO_STR[tile.dir]\n\t                    continue\n\t                if tile.type == 'door':\n\t                    if tile.is_open:\n\t                        output += '__'\n\t                    elif tile.is_locked:\n\t                        output += 'L' + tile.color[0].upper()\n", "                    else:\n\t                        output += 'D' + tile.color[0].upper()\n\t                    continue\n\t                output += OBJECT_TO_STR[tile.type] + tile.color[0].upper()\n\t            if j < self.grid.height - 1:\n\t                output += '\\n'\n\t        return output\n\t    def _reward(self) -> float:\n\t        \"\"\"\n\t        Compute the reward to be given upon success.\n", "        \"\"\"\n\t        return 1 - 0.9 * (self.step_count / self.max_steps)\n\t    def place_obj(\n\t        self,\n\t        obj: WorldObj | None,\n\t        top: tuple[int, int] = None,\n\t        size: tuple[int, int] = None,\n\t        reject_fn: Callable[[MultiGridEnv, tuple[int, int]], bool] | None = None,\n\t        max_tries=math.inf) -> tuple[int, int]:\n\t        \"\"\"\n", "        Place an object at an empty position in the grid.\n\t        Parameters\n\t        ----------\n\t        obj: WorldObj\n\t            Object to place in the grid\n\t        top: tuple[int, int]\n\t            Top-left position of the rectangular area where to place the object\n\t        size: tuple[int, int]\n\t            Width and height of the rectangular area where to place the object\n\t        reject_fn: Callable(env, pos) -> bool\n", "            Function to filter out potential positions\n\t        max_tries: int\n\t            Maximum number of attempts to place the object\n\t        \"\"\"\n\t        if top is None:\n\t            top = (0, 0)\n\t        else:\n\t            top = (max(top[0], 0), max(top[1], 0))\n\t        if size is None:\n\t            size = (self.grid.width, self.grid.height)\n", "        num_tries = 0\n\t        while True:\n\t            # This is to handle with rare cases where rejection sampling\n\t            # gets stuck in an infinite loop\n\t            if num_tries > max_tries:\n\t                raise RecursionError(\"rejection sampling failed in place_obj\")\n\t            num_tries += 1\n\t            pos = (\n\t                self._rand_int(top[0], min(top[0] + size[0], self.grid.width)),\n\t                self._rand_int(top[1], min(top[1] + size[1], self.grid.height)),\n", "            )\n\t            # Don't place the object on top of another object\n\t            if self.grid.get(*pos) is not None:\n\t                continue\n\t            # Don't place the object where agents are\n\t            if np.bitwise_and.reduce(self.agent_states.pos == pos, axis=1).any():\n\t                continue\n\t            # Check if there is a filtering criterion\n\t            if reject_fn and reject_fn(self, pos):\n\t                continue\n", "            break\n\t        self.grid.set(pos[0], pos[1], obj)\n\t        if obj is not None:\n\t            obj.init_pos = pos\n\t            obj.cur_pos = pos\n\t        return pos\n\t    def put_obj(self, obj: WorldObj, i: int, j: int):\n\t        \"\"\"\n\t        Put an object at a specific position in the grid.\n\t        \"\"\"\n", "        self.grid.set(i, j, obj)\n\t        obj.init_pos = (i, j)\n\t        obj.cur_pos = (i, j)\n\t    def place_agent(\n\t        self,\n\t        agent: Agent,\n\t        top=None,\n\t        size=None,\n\t        rand_dir=True,\n\t        max_tries=math.inf) -> tuple[int, int]:\n", "        \"\"\"\n\t        Set agent starting point at an empty position in the grid.\n\t        \"\"\"\n\t        agent.state.pos = (-1, -1)\n\t        pos = self.place_obj(None, top, size, max_tries=max_tries)\n\t        agent.state.pos = pos\n\t        if rand_dir:\n\t            agent.state.dir = self._rand_int(0, 4)\n\t        return pos\n\t    def get_pov_render(self, *args, **kwargs):\n", "        \"\"\"\n\t        Render an agent's POV observation for visualization.\n\t        \"\"\"\n\t        raise NotImplementedError(\n\t            \"POV rendering not supported for multiagent environments.\"\n\t        )\n\t    def get_full_render(self, highlight: bool, tile_size: int):\n\t        \"\"\"\n\t        Render a non-partial observation for visualization.\n\t        \"\"\"\n", "        # Compute agent visibility masks\n\t        obs_shape = self.agents[0].observation_space['image'].shape[:-1]\n\t        vis_masks = np.zeros((self.num_agents, *obs_shape), dtype=bool)\n\t        for i, agent_obs in self.gen_obs().items():\n\t            vis_masks[i] = (agent_obs['image'][..., 0] != Type.unseen.to_index())\n\t        # Mask of which cells to highlight\n\t        highlight_mask = np.zeros((self.width, self.height), dtype=bool)\n\t        for agent in self.agents:\n\t            # Compute the world coordinates of the bottom-left corner\n\t            # of the agent's view area\n", "            f_vec = agent.state.dir.to_vec()\n\t            r_vec = np.array((-f_vec[1], f_vec[0]))\n\t            top_left = (\n\t                agent.state.pos\n\t                + f_vec * (agent.view_size - 1)\n\t                - r_vec * (agent.view_size // 2)\n\t            )\n\t            # For each cell in the visibility mask\n\t            for vis_j in range(0, agent.view_size):\n\t                for vis_i in range(0, agent.view_size):\n", "                    # If this cell is not visible, don't highlight it\n\t                    if not vis_masks[agent.index][vis_i, vis_j]:\n\t                        continue\n\t                    # Compute the world coordinates of this cell\n\t                    abs_i, abs_j = top_left - (f_vec * vis_j) + (r_vec * vis_i)\n\t                    if abs_i < 0 or abs_i >= self.width:\n\t                        continue\n\t                    if abs_j < 0 or abs_j >= self.height:\n\t                        continue\n\t                    # Mark this cell to be highlighted\n", "                    highlight_mask[abs_i, abs_j] = True\n\t        # Render the whole grid\n\t        img = self.grid.render(\n\t            tile_size,\n\t            agents=self.agents,\n\t            highlight_mask=highlight_mask if highlight else None,\n\t        )\n\t        return img\n\t    def get_frame(\n\t        self,\n", "        highlight: bool = True,\n\t        tile_size: int = TILE_PIXELS,\n\t        agent_pov: bool = False) -> ndarray[np.uint8]:\n\t        \"\"\"\n\t        Returns an RGB image corresponding to the whole environment.\n\t        Parameters\n\t        ----------\n\t        highlight: bool\n\t            Whether to highlight agents' field of view (with a lighter gray color)\n\t        tile_size: int\n", "            How many pixels will form a tile from the NxM grid\n\t        agent_pov: bool\n\t            Whether to render agent's POV or the full environment\n\t        Returns\n\t        -------\n\t        frame: ndarray of shape (H, W, 3)\n\t            A frame representing RGB values for the HxW pixel image\n\t        \"\"\"\n\t        if agent_pov:\n\t            return self.get_pov_render(tile_size)\n", "        else:\n\t            return self.get_full_render(highlight, tile_size)\n\t    def render(self):\n\t        \"\"\"\n\t        Render the environment.\n\t        \"\"\"\n\t        img = self.get_frame(self.highlight, self.tile_size)\n\t        if self.render_mode == 'human':\n\t            img = np.transpose(img, axes=(1, 0, 2))\n\t            screen_size = (\n", "                self.screen_size * min(img.shape[0] / img.shape[1], 1.0),\n\t                self.screen_size * min(img.shape[1] / img.shape[0], 1.0),\n\t            )\n\t            if self.render_size is None:\n\t                self.render_size = img.shape[:2]\n\t            if self.window is None:\n\t                pygame.init()\n\t                pygame.display.init()\n\t                pygame.display.set_caption(f'multigrid - {self.__class__.__name__}')\n\t                self.window = pygame.display.set_mode(screen_size)\n", "            if self.clock is None:\n\t                self.clock = pygame.time.Clock()\n\t            surf = pygame.surfarray.make_surface(img)\n\t            # Create background with mission description\n\t            offset = surf.get_size()[0] * 0.1\n\t            # offset = 32 if self.agent_pov else 64\n\t            bg = pygame.Surface(\n\t                (int(surf.get_size()[0] + offset), int(surf.get_size()[1] + offset))\n\t            )\n\t            bg.convert()\n", "            bg.fill((255, 255, 255))\n\t            bg.blit(surf, (offset / 2, 0))\n\t            bg = pygame.transform.smoothscale(bg, screen_size)\n\t            font_size = 22\n\t            text = str(self.mission)\n\t            font = pygame.freetype.SysFont(pygame.font.get_default_font(), font_size)\n\t            text_rect = font.get_rect(text, size=font_size)\n\t            text_rect.center = bg.get_rect().center\n\t            text_rect.y = bg.get_height() - font_size * 1.5\n\t            font.render_to(bg, text_rect, text, size=font_size)\n", "            self.window.blit(bg, (0, 0))\n\t            pygame.event.pump()\n\t            self.clock.tick(self.metadata['render_fps'])\n\t            pygame.display.flip()\n\t        elif self.render_mode == 'rgb_array':\n\t            return img\n\t    def close(self):\n\t        \"\"\"\n\t        Close the rendering window.\n\t        \"\"\"\n", "        if self.window:\n\t            pygame.quit()\n"]}
{"filename": "multigrid/__init__.py", "chunked_list": ["from .base import MultiGridEnv\n\tfrom .core import *\n\t__version__ = '0.1.0'\n"]}
{"filename": "multigrid/rllib/models.py", "chunked_list": ["from gymnasium import spaces\n\tfrom ray.rllib.models.tf.complex_input_net import (\n\t    ComplexInputNetwork as TFComplexInputNetwork\n\t)\n\tfrom ray.rllib.models.tf.tf_modelv2 import TFModelV2\n\tfrom ray.rllib.models.torch.complex_input_net import (\n\t    ComplexInputNetwork as TorchComplexInputNetwork\n\t)\n\tfrom ray.rllib.models.torch.torch_modelv2 import TorchModelV2\n\tfrom ray.rllib.policy.rnn_sequencing import add_time_dimension\n", "from ray.rllib.utils.framework import try_import_torch\n\ttorch, nn = try_import_torch()\n\tclass TFModel(TFModelV2):\n\t    \"\"\"\n\t    Basic tensorflow model to use with RLlib.\n\t    Essentially a wrapper for ``ComplexInputNetwork`` that correctly deals with\n\t    ``Dict`` observation spaces.\n\t    For configuration options (i.e. ``model_config``),\n\t    see https://docs.ray.io/en/latest/rllib/rllib-models.html.\n\t    \"\"\"\n", "    def __init__(\n\t        self,\n\t        obs_space: spaces.Space,\n\t        action_space: spaces.Space,\n\t        num_outputs: int,\n\t        model_config: dict,\n\t        name: str,\n\t        **kwargs):\n\t        \"\"\"\n\t        See ``TFModelV2.__init__()``.\n", "        \"\"\"\n\t        super().__init__(obs_space, action_space, num_outputs, model_config, name)\n\t        self.model = TFComplexInputNetwork(\n\t            obs_space, action_space, num_outputs, model_config, name)\n\t        self.forward = self.model.forward\n\t        self.value_function = self.model.value_function\n\tclass TorchModel(TorchModelV2, nn.Module):\n\t    \"\"\"\n\t    Basic torch model to use with RLlib.\n\t    Essentially a wrapper for ``ComplexInputNetwork`` that correctly deals with\n", "    ``Dict`` observation spaces.\n\t    For configuration options (i.e. ``model_config``),\n\t    see https://docs.ray.io/en/latest/rllib/rllib-models.html.\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        obs_space: spaces.Space,\n\t        action_space: spaces.Space,\n\t        num_outputs: int,\n\t        model_config: dict,\n", "        name: str,\n\t        **kwargs):\n\t        \"\"\"\n\t        See ``TorchModelV2.__init__()``.\n\t        \"\"\"\n\t        TorchModelV2.__init__(\n\t            self, obs_space, action_space, num_outputs, model_config, name)\n\t        nn.Module.__init__(self)\n\t        self.model = TorchComplexInputNetwork(\n\t            obs_space, action_space, num_outputs, model_config, name)\n", "        self.forward = self.model.forward\n\t        self.value_function = self.model.value_function\n\tclass TorchLSTMModel(TorchModelV2, nn.Module):\n\t    \"\"\"\n\t    Torch LSTM model to use with RLlib.\n\t    Processes observations with a ``ComplexInputNetwork`` and then passes\n\t    the output through an LSTM layer.\n\t    For configuration options (i.e. ``model_config``),\n\t    see https://docs.ray.io/en/latest/rllib/rllib-models.html.\n\t    \"\"\"\n", "    def __init__(\n\t        self,\n\t        obs_space: spaces.Space,\n\t        action_space: spaces.Space,\n\t        num_outputs: int,\n\t        model_config: dict,\n\t        name: str,\n\t        **kwargs):\n\t        \"\"\"\n\t        See ``TorchModelV2.__init__()``.\n", "        \"\"\"\n\t        nn.Module.__init__(self)\n\t        super().__init__(\n\t            obs_space,\n\t            action_space,\n\t            num_outputs,\n\t            model_config,\n\t            name,\n\t        )\n\t        # Base\n", "        self.base_model = TorchComplexInputNetwork(\n\t            obs_space,\n\t            action_space,\n\t            None,\n\t            model_config,\n\t            f'{name}_base',\n\t        )\n\t        # LSTM\n\t        self.lstm = nn.LSTM(\n\t            self.base_model.post_fc_stack.num_outputs,\n", "            model_config.get('lstm_cell_size', 256),\n\t            batch_first=True,\n\t            num_layers=1,\n\t        )\n\t        # Action & Value\n\t        self.action_model = nn.Linear(self.lstm.hidden_size, num_outputs)\n\t        self.value_model = nn.Linear(self.lstm.hidden_size, 1)\n\t        # Current features for value function\n\t        self._features = None\n\t    def forward(self, input_dict, state, seq_lens):\n", "        # Base\n\t        x, _ = self.base_model(input_dict, state, seq_lens)\n\t        # LSTM\n\t        x = add_time_dimension(x, seq_lens=seq_lens, framework='torch', time_major=False)\n\t        h = state[0].transpose(0, 1).contiguous()\n\t        c = state[1].transpose(0, 1).contiguous()\n\t        x, [h, c] = self.lstm(x, [h, c])\n\t        # Out\n\t        self._features = x.reshape(-1, self.lstm.hidden_size)\n\t        logits = self.action_model(self._features)\n", "        return logits, [h.transpose(0, 1), c.transpose(0, 1)]\n\t    def value_function(self):\n\t        assert self._features is not None, \"must call forward() first\"\n\t        return self.value_model(self._features).flatten()\n\t    def get_initial_state(self):\n\t        return [\n\t            torch.zeros(self.lstm.num_layers, self.lstm.hidden_size),\n\t            torch.zeros(self.lstm.num_layers, self.lstm.hidden_size),\n\t        ]\n"]}
{"filename": "multigrid/rllib/__init__.py", "chunked_list": ["\"\"\"\n\tThis package provides tools for using MultiGrid environments with\n\tthe RLlib MultiAgentEnv API.\n\t*****\n\tUsage\n\t*****\n\tUse a specific environment configuration from :mod:`multigrid.envs` by name:\n\t    >>> import multigrid.rllib # registers environment configurations with RLlib\n\t    >>> from ray.rllib.algorithms.ppo import PPOConfig\n\t    >>> algorithm_config = PPOConfig().environment(env='MultiGrid-Empty-8x8-v0')\n", "Wrap an environment instance with :class:`.RLlibWrapper`:\n\t    >>> import gymnasium as gym\n\t    >>> import multigrid.envs\n\t    >>> env = gym.make('MultiGrid-Empty-8x8-v0', agents=2, render_mode='human')\n\t    >>> from multigrid.rllib import RLlibWrapper\n\t    >>> env = RLlibWrapper(env)\n\tWrap an environment class with :func:`.to_rllib_env()`:\n\t    >>> from multigrid.envs import EmptyEnv\n\t    >>> from multigrid.rllib import to_rllib_env\n\t    >>> MyEnv = to_rllib_env(EmptyEnv, default_config={'size': 8})\n", "    >>> config = {'agents': 2, 'render_mode': 'human'}\n\t    >>> env = MyEnv(config)\n\t\"\"\"\n\timport gymnasium as gym\n\tfrom ray.rllib.env import MultiAgentEnv\n\tfrom ray.tune.registry import register_env\n\tfrom ..base import MultiGridEnv\n\tfrom ..envs import CONFIGURATIONS\n\tfrom ..wrappers import OneHotObsWrapper\n\tclass RLlibWrapper(gym.Wrapper, MultiAgentEnv):\n", "    \"\"\"\n\t    Wrapper for a ``MultiGridEnv`` environment that implements the\n\t    RLlib ``MultiAgentEnv`` interface.\n\t    \"\"\"\n\t    def __init__(self, env: MultiGridEnv):\n\t        self._obs_space_in_preferred_format = True\n\t        self._action_space_in_preferred_format = True\n\t        gym.Wrapper.__init__(self, env)\n\t        MultiAgentEnv.__init__(self)\n\t    def get_agent_ids(self):\n", "        return {agent.index for agent in self.agents}\n\t    def step(self, *args, **kwargs):\n\t        obs, rewards, terminations, truncations, infos = super().step(*args, **kwargs)\n\t        terminations['__all__'] = all(terminations.values())\n\t        truncations['__all__'] = all(truncations.values())\n\t        return obs, rewards, terminations, truncations, infos\n\tdef to_rllib_env(\n\t    env_cls: type[MultiGridEnv],\n\t    *wrappers: gym.Wrapper,\n\t    default_config: dict = {}) -> type[MultiAgentEnv]:\n", "    \"\"\"\n\t    Convert a ``MultiGridEnv`` environment class to an RLLib ``MultiAgentEnv`` class.\n\t    Note that this is a wrapper around the environment **class**,\n\t    not environment instances.\n\t    Parameters\n\t    ----------\n\t    env_cls : type[MultiGridEnv]\n\t        ``MultiGridEnv`` environment class\n\t    wrappers : gym.Wrapper\n\t        Gym wrappers to apply to the environment\n", "    default_config : dict\n\t        Default configuration for the environment\n\t    Returns\n\t    -------\n\t    rllib_env_cls : type[MultiAgentEnv]\n\t        RLlib ``MultiAgentEnv`` environment class\n\t    \"\"\"\n\t    class RLlibEnv(RLlibWrapper):\n\t        def __init__(self, config: dict = {}):\n\t            config = {**default_config, **config}\n", "            env = env_cls(**config)\n\t            for wrapper in wrappers:\n\t                env = wrapper(env)\n\t            super().__init__(env)\n\t    RLlibEnv.__name__ = f\"RLlib_{env_cls.__name__}\"\n\t    return RLlibEnv\n\t# Register environments with RLlib\n\tfor name, (env_cls, config) in CONFIGURATIONS.items():\n\t    register_env(name, to_rllib_env(env_cls, OneHotObsWrapper, default_config=config))\n"]}
{"filename": "multigrid/utils/minigrid_interface.py", "chunked_list": ["import numpy as np\n\tfrom gymnasium import spaces\n\tfrom gymnasium.core import ActType, ObsType\n\tfrom typing import Any, Sequence, SupportsFloat\n\tfrom ..core.world_object import WorldObj\n\tfrom ..base import MultiGridEnv\n\tclass MiniGridInterface(MultiGridEnv):\n\t    \"\"\"\n\t    MultiGridEnv interface for compatibility with single-agent MiniGrid environments.\n\t    Most environment implementations deriving from `minigrid.MiniGridEnv` can be\n", "    converted to a single-agent `MultiGridEnv` by simply inheriting from\n\t    `MiniGridInterface` instead (along with using the multigrid grid and grid objects).\n\t    Examples\n\t    --------\n\t    Start with a single-agent minigrid environment:\n\t    >>> from minigrid.core.world_object import Ball, Key, Door\n\t    >>> from minigrid.core.grid import Grid\n\t    >>> from minigrid import MiniGridEnv\n\t    >>> class MyEnv(MiniGridEnv):\n\t    >>>    ... # existing class definition\n", "    Now use multigrid imports, keeping the environment class definition the same:\n\t    >>> from multigrid.core.world_object import Ball, Key, Door\n\t    >>> from multigrid.core.grid import Grid\n\t    >>> from multigrid.utils.minigrid_interface import MiniGridInterface as MiniGridEnv\n\t    >>> class MyEnv(MiniGridEnv):\n\t    >>>    ... # same class definition\n\t    \"\"\"\n\t    def reset(self, *args, **kwargs) -> tuple[ObsType, dict[str, Any]]:\n\t        \"\"\"\n\t        Reset the environment.\n", "        \"\"\"\n\t        result = super().reset(*args, **kwargs)\n\t        return tuple(item[0] for item in result)\n\t    def step(self, action: ActType) -> tuple[\n\t        ObsType,\n\t        SupportsFloat,\n\t        bool,\n\t        bool,\n\t        dict[str, Any]]:\n\t        \"\"\"\n", "        Run one timestep of the environment’s dynamics\n\t        using the provided agent action.\n\t        \"\"\"\n\t        result = super().step({0: action})\n\t        return tuple(item[0] for item in result)\n\t    @property\n\t    def action_space(self) -> spaces.Space:\n\t        \"\"\"\n\t        Get action space.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].action_space` instead.\"\n\t        )\n\t        return self.agents[0].action_space\n\t    @action_space.setter\n\t    def action_space(self, space: spaces.Space):\n\t        \"\"\"\n\t        Set action space.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].action_space` instead.\"\n\t        )\n\t        self.agents[0].action_space = space\n\t    @property\n\t    def observation_space(self) -> spaces.Space:\n\t        \"\"\"\n\t        Get observation space.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].observation_space` instead.\"\n\t        )\n\t        return self.agents[0].observation_space\n\t    @observation_space.setter\n\t    def observation_space(self, space: spaces.Space):\n\t        \"\"\"\n\t        Set observation space.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].observation_space` instead.\"\n\t        )\n\t        self.agents[0].observation_space = space\n\t    @property\n\t    def agent_pos(self) -> np.ndarray[int]:\n\t        \"\"\"\n\t        Get agent position.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].pos` instead.\"\n\t        )\n\t        return self.agents[0].pos\n\t    @agent_pos.setter\n\t    def agent_pos(self, value: Sequence[int]):\n\t        \"\"\"\n\t        Set agent position.\n\t        \"\"\"\n", "        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].pos` instead.\"\n\t        )\n\t        if value is not None:\n\t            self.agents[0].pos = value\n\t    @property\n\t    def agent_dir(self) -> int:\n\t        \"\"\"\n\t        Get agent direction.\n", "        \"\"\"\n\t        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].dir` instead.\"\n\t        )\n\t        return self.agents[0].dir\n\t    @agent_dir.setter\n\t    def agent_dir(self, value: Sequence[int]):\n\t        \"\"\"\n\t        Set agent direction.\n", "        \"\"\"\n\t        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].dir` instead.\"\n\t        )\n\t        self.agents[0].dir = value\n\t    @property\n\t    def carrying(self) -> WorldObj:\n\t        \"\"\"\n\t        Get object carried by agent.\n", "        \"\"\"\n\t        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].carrying` instead.\"\n\t        )\n\t        return self.agents[0].carrying\n\t    @property\n\t    def dir_vec(self):\n\t        \"\"\"\n\t        Get the direction vector for the agent, pointing in the direction\n", "        of forward movement.\n\t        \"\"\"\n\t        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].dir.to_vec()` instead.\"\n\t        )\n\t        return self.agents[0].dir.to_vec()\n\t    @property\n\t    def front_pos(self):\n\t        \"\"\"\n", "        Get the position of the cell that is right in front of the agent.\n\t        \"\"\"\n\t        assert len(self.agents) == 1, (\n\t           \"This property is not supported for multi-agent envs. \"\n\t           \"Use `env.agents[i].front_pos` instead.\"\n\t        )\n\t        return self.agents[0].front_pos\n\t    def place_agent(self, *args, **kwargs) -> tuple[int, int]:\n\t        \"\"\"\n\t        Set agent starting point at an empty position in the grid.\n", "        \"\"\"\n\t        return super().place_agent(self.agents[0], *args, **kwargs)\n"]}
{"filename": "multigrid/utils/obs.py", "chunked_list": ["import numba as nb\n\timport numpy as np\n\tfrom ..core.agent import AgentState\n\tfrom ..core.constants import Color, Direction, State, Type\n\tfrom ..core.world_object import Wall, WorldObj\n\tfrom numpy.typing import NDArray as ndarray\n\t### Constants\n\tWALL_ENCODING = Wall().encode()\n\tUNSEEN_ENCODING = WorldObj(Type.unseen, Color.from_index(0)).encode()\n\tENCODE_DIM = WorldObj.dim\n", "GRID_ENCODING_IDX = slice(None)\n\tAGENT_DIR_IDX = AgentState.DIR\n\tAGENT_POS_IDX = AgentState.POS\n\tAGENT_TERMINATED_IDX = AgentState.TERMINATED\n\tAGENT_CARRYING_IDX = AgentState.CARRYING\n\tAGENT_ENCODING_IDX = AgentState.ENCODING\n\tTYPE = WorldObj.TYPE\n\tSTATE = WorldObj.STATE\n\tWALL = int(Type.wall)\n\tDOOR = int(Type.door)\n", "OPEN = int(State.open)\n\tCLOSED = int(State.closed)\n\tLOCKED = int(State.locked)\n\tRIGHT = int(Direction.right)\n\tLEFT = int(Direction.left)\n\tUP = int(Direction.up)\n\tDOWN = int(Direction.down)\n\t### Observation Functions\n\t@nb.njit(cache=True)\n\tdef see_behind(world_obj: ndarray[np.int_]) -> bool:\n", "    \"\"\"\n\t    Can an agent see behind this object?\n\t    Parameters\n\t    ----------\n\t    world_obj : ndarray[int] of shape (encode_dim,)\n\t        World object encoding\n\t    \"\"\"\n\t    if world_obj is None:\n\t        return True\n\t    if world_obj[TYPE] == WALL:\n", "        return False\n\t    elif world_obj[TYPE] == DOOR and world_obj[STATE] != OPEN:\n\t        return False\n\t    return True\n\t@nb.njit(cache=True)\n\tdef gen_obs_grid_encoding(\n\t    grid_state: ndarray[np.int_],\n\t    agent_state: ndarray[np.int_],\n\t    agent_view_size: int,\n\t    see_through_walls: bool) -> ndarray[np.int_]:\n", "    \"\"\"\n\t    Generate encoding for the sub-grid observed by an agent (including visibility mask).\n\t    Parameters\n\t    ----------\n\t    grid_state : ndarray[int] of shape (width, height, grid_state_dim)\n\t        Array representation for each grid object\n\t    agent_state : ndarray[int] of shape (num_agents, agent_state_dim)\n\t        Array representation for each agent\n\t    agent_view_size : int\n\t        Width and height of observation sub-grids\n", "    see_through_walls : bool\n\t        Whether the agent can see through walls\n\t    Returns\n\t    -------\n\t    img : ndarray[int] of shape (num_agents, view_size, view_size, encode_dim)\n\t        Encoding of observed sub-grid for each agent\n\t    \"\"\"\n\t    obs_grid = gen_obs_grid(grid_state, agent_state, agent_view_size)\n\t    # Generate and apply visibility masks\n\t    vis_mask = get_vis_mask(obs_grid)\n", "    num_agents = len(agent_state)\n\t    for agent in range(num_agents):\n\t        if not see_through_walls:\n\t            for i in range(agent_view_size):\n\t                for j in range(agent_view_size):\n\t                    if not vis_mask[agent, i, j]:\n\t                        obs_grid[agent, i, j] = UNSEEN_ENCODING\n\t    return obs_grid\n\t@nb.njit(cache=True)\n\tdef gen_obs_grid_vis_mask(\n", "    grid_state: ndarray[np.int_],\n\t    agent_state: ndarray[np.int_],\n\t    agent_view_size: int) -> ndarray[np.int_]:\n\t    \"\"\"\n\t    Generate visibility mask for the sub-grid observed by an agent.\n\t    Parameters\n\t    ----------\n\t    grid_state : ndarray[int] of shape (width, height, grid_state_dim)\n\t        Array representation for each grid object\n\t    agent_state : ndarray[int] of shape (num_agents, agent_state_dim)\n", "        Array representation for each agent\n\t    agent_view_size : int\n\t        Width and height of observation sub-grids\n\t    Returns\n\t    -------\n\t    mask : ndarray[int] of shape (num_agents, view_size, view_size)\n\t        Encoding of observed sub-grid for each agent\n\t    \"\"\"\n\t    obs_grid = gen_obs_grid(grid_state, agent_state, agent_view_size)\n\t    return get_vis_mask(obs_grid)\n", "@nb.njit(cache=True)\n\tdef gen_obs_grid(\n\t    grid_state: ndarray[np.int_],\n\t    agent_state: ndarray[np.int_],\n\t    agent_view_size: int) -> ndarray[np.int_]:\n\t    \"\"\"\n\t    Generate the sub-grid observed by each agent (WITHOUT visibility mask).\n\t    Parameters\n\t    ----------\n\t    grid_state : ndarray[int] of shape (width, height, grid_state_dim)\n", "        Array representation for each grid object\n\t    agent_state : ndarray[int] of shape (num_agents, agent_state_dim)\n\t        Array representation for each agent\n\t    agent_view_size : int\n\t        Width and height of observation sub-grids\n\t    Returns\n\t    -------\n\t    obs_grid : ndarray[int] of shape (num_agents, width, height, encode_dim)\n\t        Observed sub-grid for each agent\n\t    \"\"\"\n", "    num_agents = len(agent_state)\n\t    obs_width, obs_height = agent_view_size, agent_view_size\n\t    # Process agent states\n\t    agent_grid_encoding = agent_state[..., AGENT_ENCODING_IDX]\n\t    agent_dir = agent_state[..., AGENT_DIR_IDX]\n\t    agent_pos = agent_state[..., AGENT_POS_IDX]\n\t    agent_terminated = agent_state[..., AGENT_TERMINATED_IDX]\n\t    agent_carrying_encoding = agent_state[..., AGENT_CARRYING_IDX]\n\t    # Get grid encoding\n\t    if num_agents > 1:\n", "        grid_encoding = np.empty((*grid_state.shape[:-1], ENCODE_DIM), dtype=np.int_)\n\t        grid_encoding[...] = grid_state[..., GRID_ENCODING_IDX]\n\t        # Insert agent grid encodings\n\t        for agent in range(num_agents):\n\t            if not agent_terminated[agent]:\n\t                i, j = agent_pos[agent]\n\t                grid_encoding[i, j, GRID_ENCODING_IDX] = agent_grid_encoding[agent]\n\t    else:\n\t        grid_encoding = grid_state[..., GRID_ENCODING_IDX]\n\t    # Get top left corner of observation grids\n", "    top_left = get_view_exts(agent_dir, agent_pos, agent_view_size)\n\t    topX, topY = top_left[:, 0], top_left[:, 1]\n\t    # Populate observation grids\n\t    num_left_rotations = (agent_dir + 1) % 4\n\t    obs_grid = np.empty((num_agents, obs_width, obs_height, ENCODE_DIM), dtype=np.int_)\n\t    for agent in range(num_agents):\n\t        for i in range(0, obs_width):\n\t            for j in range(0, obs_height):\n\t                # Absolute coordinates in world grid\n\t                x, y = topX[agent] + i, topY[agent] + j\n", "                # Rotated relative coordinates for observation grid\n\t                if num_left_rotations[agent] == 0:\n\t                    i_rot, j_rot = i, j\n\t                elif num_left_rotations[agent] == 1:\n\t                    i_rot, j_rot = j, obs_width - i - 1\n\t                elif num_left_rotations[agent] == 2:\n\t                    i_rot, j_rot = obs_width - i - 1, obs_height - j - 1\n\t                elif num_left_rotations[agent] == 3:\n\t                    i_rot, j_rot = obs_height - j - 1, i\n\t                # Set observation grid\n", "                if 0 <= x < grid_encoding.shape[0] and 0 <= y < grid_encoding.shape[1]:\n\t                    obs_grid[agent, i_rot, j_rot] = grid_encoding[x, y]\n\t                else:\n\t                    obs_grid[agent, i_rot, j_rot] = WALL_ENCODING\n\t    # Make it so each agent sees what it's carrying\n\t    # We do this by placing the carried object at the agent position\n\t    # in each agent's partially observable view\n\t    obs_grid[:, obs_width // 2, obs_height - 1] = agent_carrying_encoding\n\t    return obs_grid\n\t@nb.njit(cache=True)\n", "def get_see_behind_mask(grid_array: ndarray[np.int_]) -> ndarray[np.int_]:\n\t    \"\"\"\n\t    Return boolean mask indicating which grid locations can be seen through.\n\t    Parameters\n\t    ----------\n\t    grid_array : ndarray[int] of shape (num_agents, width, height, dim)\n\t        Grid object array for each agent\n\t    Returns\n\t    -------\n\t    see_behind_mask : ndarray[bool] of shape (width, height)\n", "        Boolean visibility mask\n\t    \"\"\"\n\t    num_agents, width, height = grid_array.shape[:3]\n\t    see_behind_mask = np.zeros((num_agents, width, height), dtype=np.bool_)\n\t    for agent in range(num_agents):\n\t        for i in range(width):\n\t            for j in range(height):\n\t                see_behind_mask[agent, i, j] = see_behind(grid_array[agent, i, j])\n\t    return see_behind_mask\n\t@nb.njit(cache=True)\n", "def get_vis_mask(obs_grid: ndarray[np.int_]) -> ndarray[np.bool_]:\n\t    \"\"\"\n\t    Generate a boolean mask indicating which grid locations are visible to each agent.\n\t    Parameters\n\t    ----------\n\t    obs_grid : ndarray[int] of shape (num_agents, width, height, dim)\n\t        Grid object array for each agent observation\n\t    Returns\n\t    -------\n\t    vis_mask : ndarray[bool] of shape (num_agents, width, height)\n", "        Boolean visibility mask for each agent\n\t    \"\"\"\n\t    num_agents, width, height = obs_grid.shape[:3]\n\t    see_behind_mask = get_see_behind_mask(obs_grid)\n\t    vis_mask = np.zeros((num_agents, width, height), dtype=np.bool_)\n\t    vis_mask[:, width // 2, height - 1] = True # agent relative position\n\t    for agent in range(num_agents):\n\t        for j in range(height - 1, -1, -1):\n\t            # Forward pass\n\t            for i in range(0, width - 1):\n", "                if vis_mask[agent, i, j] and see_behind_mask[agent, i, j]:\n\t                    vis_mask[agent, i + 1, j] = True\n\t                    if j > 0:\n\t                        vis_mask[agent, i + 1, j - 1] = True\n\t                        vis_mask[agent, i, j - 1] = True\n\t            # Backward pass\n\t            for i in range(width - 1, 0, -1):\n\t                if vis_mask[agent, i, j] and see_behind_mask[agent, i, j]:\n\t                    vis_mask[agent, i - 1, j] = True\n\t                    if j > 0:\n", "                        vis_mask[agent, i - 1, j - 1] = True\n\t                        vis_mask[agent, i, j - 1] = True\n\t    return vis_mask\n\t@nb.njit(cache=True)\n\tdef get_view_exts(\n\t    agent_dir: ndarray[np.int_],\n\t    agent_pos: ndarray[np.int_],\n\t    agent_view_size: int) -> ndarray[np.int_]:\n\t    \"\"\"\n\t    Get the extents of the square set of grid cells visible to each agent.\n", "    Parameters\n\t    ----------\n\t    agent_dir : ndarray[int] of shape (num_agents,)\n\t        Direction of each agent\n\t    agent_pos : ndarray[int] of shape (num_agents, 2)\n\t        The (x, y) position of each agent\n\t    agent_view_size : int\n\t        Width and height of agent view\n\t    Returns\n\t    -------\n", "    top_left : ndarray[int] of shape (num_agents, 2)\n\t        The (x, y) coordinates of the top-left corner of each agent's observable view\n\t    \"\"\"\n\t    agent_x, agent_y = agent_pos[:, 0], agent_pos[:, 1]\n\t    top_left = np.zeros((agent_dir.shape[0], 2), dtype=np.int_)\n\t    # Facing right\n\t    top_left[agent_dir == RIGHT, 0] = agent_x[agent_dir == RIGHT]\n\t    top_left[agent_dir == RIGHT, 1] = agent_y[agent_dir == RIGHT] - agent_view_size // 2\n\t    # Facing down\n\t    top_left[agent_dir == DOWN, 0] = agent_x[agent_dir == DOWN] - agent_view_size // 2\n", "    top_left[agent_dir == DOWN, 1] = agent_y[agent_dir == DOWN]\n\t    # Facing left\n\t    top_left[agent_dir == LEFT, 0] = agent_x[agent_dir == LEFT] - agent_view_size + 1\n\t    top_left[agent_dir == LEFT, 1] = agent_y[agent_dir == LEFT] - agent_view_size // 2\n\t    # Facing up\n\t    top_left[agent_dir == UP, 0] = agent_x[agent_dir == UP] - agent_view_size // 2\n\t    top_left[agent_dir == UP, 1] = agent_y[agent_dir == UP] - agent_view_size + 1\n\t    return top_left\n"]}
{"filename": "multigrid/utils/rendering.py", "chunked_list": ["from __future__ import annotations\n\timport math\n\timport numpy as np\n\tfrom numpy.typing import NDArray as ndarray\n\tfrom typing import Callable\n\t# Constants\n\tFilterFunction = Callable[[float, float], bool]\n\tWhite = np.array([255, 255, 255])\n\t# Functions\n\tdef downsample(img: ndarray[np.uint8], factor: int) -> ndarray[np.uint8]:\n", "    \"\"\"\n\t    Downsample an image along both dimensions by some factor.\n\t    Parameters\n\t    ----------\n\t    img : ndarray[uint8] of shape (height, width, 3)\n\t        The image to downsample\n\t    factor : int\n\t        The factor by which to downsample the image\n\t    Returns\n\t    -------\n", "    img : ndarray[uint8] of shape (height/factor, width/factor, 3)\n\t        The downsampled image\n\t    \"\"\"\n\t    assert img.shape[0] % factor == 0\n\t    assert img.shape[1] % factor == 0\n\t    img = img.reshape(\n\t        [img.shape[0] // factor, factor, img.shape[1] // factor, factor, 3]\n\t    )\n\t    img = img.mean(axis=3)\n\t    img = img.mean(axis=1)\n", "    return img\n\tdef fill_coords(\n\t    img: ndarray[np.uint8],\n\t    fn: FilterFunction,\n\t    color: ndarray[np.uint8]) -> ndarray[np.uint8]:\n\t    \"\"\"\n\t    Fill pixels of an image with coordinates matching a filter function.\n\t    Parameters\n\t    ----------\n\t    img : ndarray[uint8] of shape (height, width, 3)\n", "        The image to fill\n\t    fn : Callable(float, float) -> bool\n\t        The filter function to use for coordinates\n\t    color : ndarray[uint8] of shape (3,)\n\t        RGB color to fill matching coordinates\n\t    Returns\n\t    -------\n\t    img : ndarray[np.uint8] of shape (height, width, 3)\n\t        The updated image\n\t    \"\"\"\n", "    for y in range(img.shape[0]):\n\t        for x in range(img.shape[1]):\n\t            yf = (y + 0.5) / img.shape[0]\n\t            xf = (x + 0.5) / img.shape[1]\n\t            if fn(xf, yf):\n\t                img[y, x] = color\n\t    return img\n\tdef rotate_fn(fin: FilterFunction, cx: float, cy: float, theta: float) -> FilterFunction:\n\t    \"\"\"\n\t    Rotate a coordinate filter function around a center point by some angle.\n", "    Parameters\n\t    ----------\n\t    fin : Callable(float, float) -> bool\n\t        The filter function to rotate\n\t    cx : float\n\t        The x-coordinate of the center of rotation\n\t    cy : float\n\t        The y-coordinate of the center of rotation\n\t    theta : float\n\t        The angle by which to rotate the filter function (in radians)\n", "    Returns\n\t    -------\n\t    fout : Callable(float, float) -> bool\n\t        The rotated filter function\n\t    \"\"\"\n\t    def fout(x, y):\n\t        x = x - cx\n\t        y = y - cy\n\t        x2 = cx + x * math.cos(-theta) - y * math.sin(-theta)\n\t        y2 = cy + y * math.cos(-theta) + x * math.sin(-theta)\n", "        return fin(x2, y2)\n\t    return fout\n\tdef point_in_line(\n\t    x0: float, y0: float, x1: float, y1: float, r: float) -> FilterFunction:\n\t    \"\"\"\n\t    Return a filter function that returns True for points within distance r\n\t    from the line between (x0, y0) and (x1, y1).\n\t    Parameters\n\t    ----------\n\t    x0 : float\n", "        The x-coordinate of the line start point\n\t    y0 : float\n\t        The y-coordinate of the line start point\n\t    x1 : float\n\t        The x-coordinate of the line end point\n\t    y1 : float\n\t        The y-coordinate of the line end point\n\t    r : float\n\t        Maximum distance from the line\n\t    Returns\n", "    -------\n\t    fn : Callable(float, float) -> bool\n\t        Filter function\n\t    \"\"\"\n\t    p0 = np.array([x0, y0], dtype=np.float32)\n\t    p1 = np.array([x1, y1], dtype=np.float32)\n\t    dir = p1 - p0\n\t    dist = np.linalg.norm(dir)\n\t    dir = dir / dist\n\t    xmin = min(x0, x1) - r\n", "    xmax = max(x0, x1) + r\n\t    ymin = min(y0, y1) - r\n\t    ymax = max(y0, y1) + r\n\t    def fn(x, y):\n\t        # Fast, early escape test\n\t        if x < xmin or x > xmax or y < ymin or y > ymax:\n\t            return False\n\t        q = np.array([x, y])\n\t        pq = q - p0\n\t        # Closest point on line\n", "        a = np.dot(pq, dir)\n\t        a = np.clip(a, 0, dist)\n\t        p = p0 + a * dir\n\t        dist_to_line = np.linalg.norm(q - p)\n\t        return dist_to_line <= r\n\t    return fn\n\tdef point_in_circle(cx: float, cy: float, r: float) -> FilterFunction:\n\t    \"\"\"\n\t    Return a filter function that returns True for points within radius r\n\t    from a given point.\n", "    Parameters\n\t    ----------\n\t    cx : float\n\t        The x-coordinate of the circle center\n\t    cy : float\n\t        The y-coordinate of the circle center\n\t    r : float\n\t        The radius of the circle\n\t    Returns\n\t    -------\n", "    fn : Callable(float, float) -> bool\n\t        Filter function\n\t    \"\"\"\n\t    def fn(x, y):\n\t        return (x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r\n\t    return fn\n\tdef point_in_rect(xmin: float, xmax: float, ymin: float, ymax: float) -> FilterFunction:\n\t    \"\"\"\n\t    Return a filter function that returns True for points within a rectangle.\n\t    Parameters\n", "    ----------\n\t    xmin : float\n\t        The minimum x-coordinate of the rectangle\n\t    xmax : float\n\t        The maximum x-coordinate of the rectangle\n\t    ymin : float\n\t        The minimum y-coordinate of the rectangle\n\t    ymax : float\n\t        The maximum y-coordinate of the rectangle\n\t    Returns\n", "    -------\n\t    fn : Callable(float, float) -> bool\n\t        Filter function\n\t    \"\"\"\n\t    def fn(x, y):\n\t        return x >= xmin and x <= xmax and y >= ymin and y <= ymax\n\t    return fn\n\tdef point_in_triangle(\n\t    a: tuple[float, float],\n\t    b: tuple[float, float],\n", "    c: tuple[float, float]) -> FilterFunction:\n\t    \"\"\"\n\t    Return a filter function that returns True for points within a triangle.\n\t    Parameters\n\t    ----------\n\t    a : tuple[float, float]\n\t        The first vertex of the triangle\n\t    b : tuple[float, float]\n\t        The second vertex of the triangle\n\t    c : tuple[float, float]\n", "        The third vertex of the triangle\n\t    Returns\n\t    -------\n\t    fn : Callable(float, float) -> bool\n\t        Filter function\n\t    \"\"\"\n\t    a = np.array(a, dtype=np.float32)\n\t    b = np.array(b, dtype=np.float32)\n\t    c = np.array(c, dtype=np.float32)\n\t    def fn(x, y):\n", "        v0 = c - a\n\t        v1 = b - a\n\t        v2 = np.array((x, y)) - a\n\t        # Compute dot products\n\t        dot00 = np.dot(v0, v0)\n\t        dot01 = np.dot(v0, v1)\n\t        dot02 = np.dot(v0, v2)\n\t        dot11 = np.dot(v1, v1)\n\t        dot12 = np.dot(v1, v2)\n\t        # Compute barycentric coordinates\n", "        inv_denom = 1 / (dot00 * dot11 - dot01 * dot01)\n\t        u = (dot11 * dot02 - dot01 * dot12) * inv_denom\n\t        v = (dot00 * dot12 - dot01 * dot02) * inv_denom\n\t        # Check if point is in triangle\n\t        return (u >= 0) and (v >= 0) and (u + v) < 1\n\t    return fn\n\tdef highlight_img(\n\t    img: ndarray[np.uint8],\n\t    color: ndarray[np.uint8] = White,\n\t    alpha=0.30) -> ndarray[np.uint8]:\n", "    \"\"\"\n\t    Add highlighting to an image.\n\t    Parameters\n\t    ----------\n\t    img : ndarray[uint8] of shape (height, width, 3)\n\t        The image to highlight\n\t    color : ndarray[uint8] of shape (3,)\n\t        RGB color to use for highlighting\n\t    alpha : float\n\t        The alpha value to use for blending\n", "    Returns\n\t    -------\n\t    img : ndarray[uint8] of shape (height, width, 3)\n\t        The highlighted image\n\t    \"\"\"\n\t    blend_img = img + alpha * (np.array(color, dtype=np.uint8) - img)\n\t    blend_img = blend_img.clip(0, 255).astype(np.uint8)\n\t    img[:, :, :] = blend_img\n"]}
{"filename": "multigrid/utils/__init__.py", "chunked_list": []}
{"filename": "multigrid/utils/random.py", "chunked_list": ["import numpy as np\n\tfrom typing import Iterable, TypeVar\n\tfrom ..core.constants import Color\n\tT = TypeVar('T')\n\tclass RandomMixin:\n\t    \"\"\"\n\t    Mixin class for random number generation.\n\t    \"\"\"\n\t    def __init__(self, random_generator: np.random.Generator):\n\t        \"\"\"\n", "        Parameters\n\t        ----------\n\t        random_generator : np.random.Generator\n\t            Random number generator\n\t        \"\"\"\n\t        self.__np_random = random_generator\n\t    def _rand_int(self, low: int, high: int) -> int:\n\t        \"\"\"\n\t        Generate random integer in range [low, high).\n\t        :meta public:\n", "        \"\"\"\n\t        return self.__np_random.integers(low, high)\n\t    def _rand_float(self, low: float, high: float) -> float:\n\t        \"\"\"\n\t        Generate random float in range [low, high).\n\t        :meta public:\n\t        \"\"\"\n\t        return self.__np_random.uniform(low, high)\n\t    def _rand_bool(self) -> bool:\n\t        \"\"\"\n", "        Generate random boolean value.\n\t        :meta public:\n\t        \"\"\"\n\t        return self.__np_random.integers(0, 2) == 0\n\t    def _rand_elem(self, iterable: Iterable[T]) -> T:\n\t        \"\"\"\n\t        Pick a random element in a list.\n\t        :meta public:\n\t        \"\"\"\n\t        lst = list(iterable)\n", "        idx = self._rand_int(0, len(lst))\n\t        return lst[idx]\n\t    def _rand_subset(self, iterable: Iterable[T], num_elems: int) -> list[T]:\n\t        \"\"\"\n\t        Sample a random subset of distinct elements of a list.\n\t        :meta public:\n\t        \"\"\"\n\t        lst = list(iterable)\n\t        assert num_elems <= len(lst)\n\t        out: list[T] = []\n", "        while len(out) < num_elems:\n\t            elem = self._rand_elem(lst)\n\t            lst.remove(elem)\n\t            out.append(elem)\n\t        return out\n\t    def _rand_perm(self, iterable: Iterable[T]) -> list[T]:\n\t        \"\"\"\n\t        Randomly permute a list.\n\t        :meta public:\n\t        \"\"\"\n", "        lst = list(iterable)\n\t        self.__np_random.shuffle(lst)\n\t        return lst\n\t    def _rand_color(self) -> Color:\n\t        \"\"\"\n\t        Generate a random color.\n\t        :meta public:\n\t        \"\"\"\n\t        return self._rand_elem(Color)\n\t    def _rand_pos(\n", "        self, x_low: int, x_high: int, y_low: int, y_high: int) -> tuple[int, int]:\n\t        \"\"\"\n\t        Generate a random (x, y) position tuple.\n\t        :meta public:\n\t        \"\"\"\n\t        return (\n\t            self.__np_random.integers(x_low, x_high),\n\t            self.__np_random.integers(y_low, y_high),\n\t        )\n"]}
{"filename": "multigrid/utils/misc.py", "chunked_list": ["import functools\n\tfrom typing import Any\n\tfrom ..core.constants import Direction\n\t@functools.cache\n\tdef front_pos(agent_x: int, agent_y: int, agent_dir: int):\n\t    \"\"\"\n\t    Get the position in front of an agent.\n\t    \"\"\"\n\t    dx, dy = Direction(agent_dir).to_vec()\n\t    return (agent_x + dx, agent_y + dy)\n", "class PropertyAlias(property):\n\t    \"\"\"\n\t    A class property that is an alias for an attribute property.\n\t    Instead of::\n\t        @property\n\t        def x(self):\n\t            self.attr.x\n\t        @x.setter\n\t        def x(self, value):\n\t            self.attr.x = value\n", "    we can simply just declare::\n\t        x = PropertyAlias('attr', 'x')\n\t    \"\"\"\n\t    def __init__(self, attr_name: str, attr_property_name: str, doc: str = None) -> None:\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        attr_name : str\n\t            Name of the base attribute\n\t        attr_property : property\n", "            Property from the base attribute class\n\t        doc : str\n\t            Docstring to append to the property's original docstring\n\t        \"\"\"\n\t        prop = lambda obj: getattr(type(getattr(obj, attr_name)), attr_property_name)\n\t        fget = lambda obj: prop(obj).fget(getattr(obj, attr_name))\n\t        fset = lambda obj, value: prop(obj).fset(getattr(obj, attr_name), value)\n\t        fdel = lambda obj: prop(obj).fdel(getattr(obj, attr_name))\n\t        super().__init__(fget, fset, fdel, doc=doc)\n\t        self.__doc__ = doc\n"]}
{"filename": "multigrid/utils/enum.py", "chunked_list": ["from __future__ import annotations\n\timport aenum as enum\n\timport functools\n\timport numpy as np\n\tfrom numpy.typing import ArrayLike, NDArray as ndarray\n\tfrom typing import Any\n\t### Helper Functions\n\t@functools.cache\n\tdef _enum_array(enum_cls: enum.EnumMeta):\n\t    \"\"\"\n", "    Return an array of all values of the given enum.\n\t    Parameters\n\t    ----------\n\t    enum_cls : enum.EnumMeta\n\t        Enum class\n\t    \"\"\"\n\t    return np.array([item.value for item in enum_cls])\n\t@functools.cache\n\tdef _enum_index(enum_item: enum.Enum):\n\t    \"\"\"\n", "    Return the index of the given enum item.\n\t    Parameters\n\t    ----------\n\t    enum_item : enum.Enum\n\t        Enum item\n\t    \"\"\"\n\t    return list(enum_item.__class__).index(enum_item)\n\t### Enumeration\n\tclass IndexedEnum(enum.Enum):\n\t    \"\"\"\n", "    Enum where each member has a corresponding integer index.\n\t    \"\"\"\n\t    def __int__(self):\n\t        return self.to_index()\n\t    @classmethod\n\t    def add_item(cls, name: str, value: Any):\n\t        \"\"\"\n\t        Add a new item to the enumeration.\n\t        Parameters\n\t        ----------\n", "        name : str\n\t            Name of the new enum item\n\t        value : Any\n\t            Value of the new enum item\n\t        \"\"\"\n\t        enum.extend_enum(cls, name, value)\n\t        _enum_array.cache_clear()\n\t        _enum_index.cache_clear()\n\t    @classmethod\n\t    def from_index(cls, index: int | ArrayLike[int]) -> enum.Enum | ndarray:\n", "        \"\"\"\n\t        Return the enum item corresponding to the given index.\n\t        Also supports vector inputs.\n\t        Parameters\n\t        ----------\n\t        index : int or ArrayLike[int]\n\t            Enum index (or array of indices)\n\t        Returns\n\t        -------\n\t        enum.Enum or ndarray\n", "            Enum item (or array of enum item values)\n\t        \"\"\"\n\t        out = _enum_array(cls)[index]\n\t        return cls(out) if out.ndim == 0 else out\n\t    def to_index(self) -> int:\n\t        \"\"\"\n\t        Return the integer index of this enum item.\n\t        \"\"\"\n\t        return _enum_index(self)\n"]}
{"filename": "multigrid/pettingzoo/__init__.py", "chunked_list": ["\"\"\"\n\tThis package provides tools for using MultiGrid environments with\n\tthe PettingZoo ParallelEnv API.\n\t*****\n\tUsage\n\t*****\n\tWrap an environment instance with :class:`.PettingZooWrapper`:\n\t    >>> import gymnasium as gym\n\t    >>> import multigrid.envs\n\t    >>> env = gym.make('MultiGrid-Empty-8x8-v0', agents=2, render_mode='human')\n", "    >>> from multigrid.pettingzoo import PettingZooWrapper\n\t    >>> env = PettingZooWrapper(env)\n\tWrap an environment class with :func:`.to_pettingzoo_env()`:\n\t    >>> from multigrid.envs import EmptyEnv\n\t    >>> from multigrid.pettingzoo import to_pettingzoo_env\n\t    >>> PZEnv = to_pettingzoo_env(EmptyEnv, metadata={'name': 'empty_v0'})\n\t    >>> env = PZEnv(agents=2, render_mode='human')\n\t\"\"\"\n\timport gymnasium as gym\n\tfrom gymnasium import spaces\n", "from pettingzoo import ParallelEnv\n\tfrom typing import Any\n\tfrom ..base import AgentID, MultiGridEnv\n\tclass PettingZooWrapper(ParallelEnv):\n\t    \"\"\"\n\t    Wrapper for a ``MultiGridEnv`` environment that implements the\n\t    PettingZoo ``ParallelEnv`` interface.\n\t    \"\"\"\n\t    def __init__(self, env: MultiGridEnv):\n\t        self.env = env\n", "        self.reset = self.env.reset\n\t        self.step = self.env.step\n\t        self.render = self.env.render\n\t        self.close = self.env.close\n\t    @property\n\t    def agents(self) -> list[AgentID]:\n\t        if self.env.is_done():\n\t            return []\n\t        return [agent.index for agent in self.env.agents if not agent.terminated]\n\t    @property\n", "    def possible_agents(self) -> list[AgentID]:\n\t        return [agent.index for agent in self.env.agents]\n\t    @property\n\t    def observation_spaces(self) -> dict[AgentID, spaces.Space]:\n\t        return dict(self.env.observation_space)\n\t    @property\n\t    def action_spaces(self) -> dict[AgentID, spaces.Space]:\n\t        return dict(self.env.action_space)\n\t    def observation_space(self, agent_id: AgentID) -> spaces.Space:\n\t        return self.env.observation_space[agent_id]\n", "    def action_space(self, agent_id: AgentID) -> spaces.Space:\n\t        return self.env.action_space[agent_id]\n\tdef to_pettingzoo_env(\n\t    env_cls: type[MultiGridEnv],\n\t    *wrappers: gym.Wrapper,\n\t    metadata: dict[str, Any] = {}) -> type[ParallelEnv]:\n\t    \"\"\"\n\t    Convert a ``MultiGridEnv`` environment class to a PettingZoo ``ParallelEnv`` class.\n\t    Note that this is a wrapper around the environment **class**,\n\t    not environment instances.\n", "    Parameters\n\t    ----------\n\t    env_cls : type[MultiGridEnv]\n\t        ``MultiGridEnv`` environment class\n\t    wrappers : gym.Wrapper\n\t        Gym wrappers to apply to the environment\n\t    metadata : dict[str, Any]\n\t        Environment metadata\n\t    Returns\n\t    -------\n", "    pettingzoo_env_cls : type[ParallelEnv]\n\t        PettingZoo ``ParallelEnv`` environment class\n\t    \"\"\"\n\t    class PettingZooEnv(PettingZooWrapper):\n\t        def __init__(self, *args, **kwargs):\n\t            env = env_cls(*args, **kwargs)\n\t            for wrapper in wrappers:\n\t                env = wrapper(env)\n\t            super().__init__(env)\n\t    PettingZooEnv.__name__ = f\"PettingZoo_{env_cls.__name__}\"\n", "    PettingZooEnv.metadata = metadata\n\t    return PettingZooEnv"]}
{"filename": "multigrid/envs/blockedunlockpickup.py", "chunked_list": ["from __future__ import annotations\n\tfrom multigrid.core.constants import Color, Direction, Type\n\tfrom multigrid.core.mission import MissionSpace\n\tfrom multigrid.core.roomgrid import RoomGrid\n\tfrom multigrid.core.world_object import Ball\n\tclass BlockedUnlockPickupEnv(RoomGrid):\n\t    \"\"\"\n\t    .. image:: https://i.imgur.com/uSFi059.gif\n\t        :width: 275\n\t    ***********\n", "    Description\n\t    ***********\n\t    The objective is to pick up a box which is placed in another room, behind a\n\t    locked door. The door is also blocked by a ball which must be moved before\n\t    the door can be unlocked. Hence, agents must learn to move the ball,\n\t    pick up the key, open the door and pick up the object in the other\n\t    room.\n\t    The standard setting is cooperative, where all agents receive the reward\n\t    when the task is completed.\n\t    *************\n", "    Mission Space\n\t    *************\n\t    \"pick up the ``{color}`` box\"\n\t    ``{color}`` is the color of the box. Can be any :class:`.Color`.\n\t    *****************\n\t    Observation Space\n\t    *****************\n\t    The multi-agent observation space is a Dict mapping from agent index to\n\t    corresponding agent observation space.\n\t    Each agent observation is a dictionary with the following entries:\n", "    * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t        Encoding of the agent's partially observable view of the environment,\n\t        where the object at each grid cell is encoded as a vector:\n\t        (:class:`.Type`, :class:`.Color`, :class:`.State`)\n\t    * direction : int\n\t        Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t    * mission : Mission\n\t        Task string corresponding to the current environment configuration\n\t    ************\n\t    Action Space\n", "    ************\n\t    The multi-agent action space is a Dict mapping from agent index to\n\t    corresponding agent action space.\n\t    Agent actions are discrete integer values, given by:\n\t    +-----+--------------+-----------------------------+\n\t    | Num | Name         | Action                      |\n\t    +=====+==============+=============================+\n\t    | 0   | left         | Turn left                   |\n\t    +-----+--------------+-----------------------------+\n\t    | 1   | right        | Turn right                  |\n", "    +-----+--------------+-----------------------------+\n\t    | 2   | forward      | Move forward                |\n\t    +-----+--------------+-----------------------------+\n\t    | 3   | pickup       | Pick up an object           |\n\t    +-----+--------------+-----------------------------+\n\t    | 4   | drop         | Drop an object              |\n\t    +-----+--------------+-----------------------------+\n\t    | 5   | toggle       | Toggle / activate an object |\n\t    +-----+--------------+-----------------------------+\n\t    | 6   | done         | Done completing task        |\n", "    +-----+--------------+-----------------------------+\n\t    *******\n\t    Rewards\n\t    *******\n\t    A reward of ``1 - 0.9 * (step_count / max_steps)`` is given for success,\n\t    and ``0`` for failure.\n\t    ***********\n\t    Termination\n\t    ***********\n\t    The episode ends if any one of the following conditions is met:\n", "    * Any agent picks up the correct box\n\t    * Timeout (see ``max_steps``)\n\t    *************************\n\t    Registered Configurations\n\t    *************************\n\t    * ``MultiGrid-BlockedUnlockPickup-v0``\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        room_size: int = 6,\n", "        max_steps: int | None = None,\n\t        joint_reward: bool = True,\n\t        **kwargs):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        room_size : int, default=6\n\t            Width and height for each of the two rooms\n\t        max_steps : int, optional\n\t            Maximum number of steps per episode\n", "        joint_reward : bool, default=True\n\t            Whether all agents receive the reward when the task is completed\n\t        **kwargs\n\t            See :attr:`multigrid.base.MultiGridEnv.__init__`\n\t        \"\"\"\n\t        assert room_size >= 4\n\t        mission_space = MissionSpace(\n\t            mission_func=self._gen_mission,\n\t            ordered_placeholders=[list(Color), [Type.box, Type.key]],\n\t        )\n", "        super().__init__(\n\t            mission_space=mission_space,\n\t            num_rows=1,\n\t            num_cols=2,\n\t            room_size=room_size,\n\t            max_steps=max_steps or (16 * room_size**2),\n\t            joint_reward=joint_reward,\n\t            success_termination_mode='any',\n\t            **kwargs,\n\t        )\n", "    @staticmethod\n\t    def _gen_mission(color: str, obj_type: str):\n\t        return f\"pick up the {color} {obj_type}\"\n\t    def _gen_grid(self, width, height):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        super()._gen_grid(width, height)\n\t        # Add a box to the room on the right\n\t        self.obj, _ = self.add_object(1, 0, kind=Type.box)\n", "        # Make sure the two rooms are directly connected by a locked door\n\t        door, pos = self.add_door(0, 0, Direction.right, locked=True)\n\t        # Block the door with a ball\n\t        self.grid.set(pos[0] - 1, pos[1], Ball(color=self._rand_color()))\n\t        # Add a key to unlock the door\n\t        self.add_object(0, 0, Type.key, door.color)\n\t        # Place agents in the left room\n\t        for agent in self.agents:\n\t            self.place_agent(agent, 0, 0)\n\t        self.mission = f\"pick up the {self.obj.color} {self.obj.type}\"\n", "    def step(self, actions):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        obs, reward, terminated, truncated, info = super().step(actions)\n\t        for agent in self.agents:\n\t            if agent.state.carrying == self.obj:\n\t                self.on_success(agent, reward, terminated)\n\t        return obs, reward, terminated, truncated, info\n"]}
{"filename": "multigrid/envs/playground.py", "chunked_list": ["from __future__ import annotations\n\tfrom multigrid.core.mission import MissionSpace\n\tfrom multigrid.core.roomgrid import RoomGrid\n\tclass PlaygroundEnv(RoomGrid):\n\t    \"\"\"\n\t    .. image:: https://i.imgur.com/QBz99Vh.gif\n\t        :width: 380\n\t    ***********\n\t    Description\n\t    ***********\n", "    Environment with multiple rooms and random objects.\n\t    This environment has no specific goals or rewards.\n\t    *************\n\t    Mission Space\n\t    *************\n\t    None\n\t    *****************\n\t    Observation Space\n\t    *****************\n\t    The multi-agent observation space is a Dict mapping from agent index to\n", "    corresponding agent observation space.\n\t    Each agent observation is a dictionary with the following entries:\n\t    * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t        Encoding of the agent's partially observable view of the environment,\n\t        where the object at each grid cell is encoded as a vector:\n\t        (:class:`.Type`, :class:`.Color`, :class:`.State`)\n\t    * direction : int\n\t        Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t    * mission : Mission\n\t        Task string corresponding to the current environment configuration\n", "    ************\n\t    Action Space\n\t    ************\n\t    The multi-agent action space is a Dict mapping from agent index to\n\t    corresponding agent action space.\n\t    Agent actions are discrete integer values, given by:\n\t    +-----+--------------+-----------------------------+\n\t    | Num | Name         | Action                      |\n\t    +=====+==============+=============================+\n\t    | 0   | left         | Turn left                   |\n", "    +-----+--------------+-----------------------------+\n\t    | 1   | right        | Turn right                  |\n\t    +-----+--------------+-----------------------------+\n\t    | 2   | forward      | Move forward                |\n\t    +-----+--------------+-----------------------------+\n\t    | 3   | pickup       | Pick up an object           |\n\t    +-----+--------------+-----------------------------+\n\t    | 4   | drop         | Drop an object              |\n\t    +-----+--------------+-----------------------------+\n\t    | 5   | toggle       | Toggle / activate an object |\n", "    +-----+--------------+-----------------------------+\n\t    | 6   | done         | Done completing task        |\n\t    +-----+--------------+-----------------------------+\n\t    *******\n\t    Rewards\n\t    *******\n\t    None\n\t    ***********\n\t    Termination\n\t    ***********\n", "    The episode ends when the following condition is met:\n\t    * Timeout (see ``max_steps``)\n\t    *************************\n\t    Registered Configurations\n\t    *************************\n\t    * ``MultiGrid-Playground-v0``\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        room_size: int = 7,\n", "        num_rows: int = 3,\n\t        num_cols: int = 3,\n\t        max_steps: int = 100,\n\t        **kwargs):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        room_size : int, default=7\n\t            Width and height for each of the rooms\n\t        num_rows : int, default=3\n", "            Number of rows of rooms\n\t        num_cols : int, default=3\n\t            Number of columns of rooms\n\t        max_steps : int, default=100\n\t            Maximum number of steps per episode\n\t        **kwargs\n\t            See :attr:`multigrid.base.MultiGridEnv.__init__`\n\t        \"\"\"\n\t        super().__init__(\n\t            mission_space=MissionSpace.from_string(\"\"),\n", "            num_rows=num_rows,\n\t            num_cols=num_cols,\n\t            room_size=room_size,\n\t            max_steps=max_steps,\n\t            **kwargs,\n\t        )\n\t    def _gen_grid(self, width, height):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n", "        super()._gen_grid(width, height)\n\t        self.connect_all()\n\t        # Place random objects in the world\n\t        for i in range(0, 12):\n\t            col = self._rand_int(0, self.num_cols)\n\t            row = self._rand_int(0, self.num_rows)\n\t            self.add_object(col, row)\n\t        # Place agents\n\t        for agent in self.agents:\n\t            self.place_agent(agent)\n"]}
{"filename": "multigrid/envs/__init__.py", "chunked_list": ["\"\"\"\n\t************\n\tEnvironments\n\t************\n\tThis package contains implementations of several MultiGrid environments.\n\t**************\n\tConfigurations\n\t**************\n\t* `Blocked Unlock Pickup <./multigrid.envs.blockedunlockpickup>`_\n\t    * ``MultiGrid-BlockedUnlockPickup-v0``\n", "* `Empty <./multigrid.envs.empty>`_\n\t    * ``MultiGrid-Empty-5x5-v0``\n\t    * ``MultiGrid-Empty-Random-5x5-v0``\n\t    * ``MultiGrid-Empty-6x6-v0``\n\t    * ``MultiGrid-Empty-Random-6x6-v0``\n\t    * ``MultiGrid-Empty-8x8-v0``\n\t    * ``MultiGrid-Empty-16x16-v0``\n\t* `Locked Hallway <./multigrid.envs.locked_hallway>`_\n\t    * ``MultiGrid-LockedHallway-2Rooms-v0``\n\t    * ``MultiGrid-LockedHallway-4Rooms-v0``\n", "    * ``MultiGrid-LockedHallway-6Rooms-v0``\n\t* `Playground <./multigrid.envs.playground>`_\n\t    * ``MultiGrid-Playground-v0``\n\t* `Red Blue Doors <./multigrid.envs.redbluedoors>`_\n\t    * ``MultiGrid-RedBlueDoors-6x6-v0``\n\t    * ``MultiGrid-RedBlueDoors-8x8-v0``\n\t\"\"\"\n\tfrom .blockedunlockpickup import BlockedUnlockPickupEnv\n\tfrom .empty import EmptyEnv\n\tfrom .locked_hallway import LockedHallwayEnv\n", "from .playground import PlaygroundEnv\n\tfrom .redbluedoors import RedBlueDoorsEnv\n\tCONFIGURATIONS = {\n\t    'MultiGrid-BlockedUnlockPickup-v0': (BlockedUnlockPickupEnv, {}),\n\t    'MultiGrid-Empty-5x5-v0': (EmptyEnv, {'size': 5}),\n\t    'MultiGrid-Empty-Random-5x5-v0': (EmptyEnv, {'size': 5, 'agent_start_pos': None}),\n\t    'MultiGrid-Empty-6x6-v0': (EmptyEnv, {'size': 6}),\n\t    'MultiGrid-Empty-Random-6x6-v0': (EmptyEnv, {'size': 6, 'agent_start_pos': None}),\n\t    'MultiGrid-Empty-8x8-v0': (EmptyEnv, {}),\n\t    'MultiGrid-Empty-16x16-v0': (EmptyEnv, {'size': 16}),\n", "    'MultiGrid-LockedHallway-2Rooms-v0': (LockedHallwayEnv, {'num_rooms': 2}),\n\t    'MultiGrid-LockedHallway-4Rooms-v0': (LockedHallwayEnv, {'num_rooms': 4}),\n\t    'MultiGrid-LockedHallway-6Rooms-v0': (LockedHallwayEnv, {'num_rooms': 6}),\n\t    'MultiGrid-Playground-v0': (PlaygroundEnv, {}),\n\t    'MultiGrid-RedBlueDoors-6x6-v0': (RedBlueDoorsEnv, {'size': 6}),\n\t    'MultiGrid-RedBlueDoors-8x8-v0': (RedBlueDoorsEnv, {'size': 8}),\n\t}\n\t# Register environments with gymnasium\n\tfrom gymnasium.envs.registration import register\n\tfor name, (env_cls, config) in CONFIGURATIONS.items():\n", "    register(id=name, entry_point=env_cls, kwargs=config)\n"]}
{"filename": "multigrid/envs/locked_hallway.py", "chunked_list": ["from __future__ import annotations\n\tfrom math import ceil\n\tfrom multigrid import MultiGridEnv\n\tfrom multigrid.core.actions import Action\n\tfrom multigrid.core.constants import Color, Direction\n\tfrom multigrid.core.mission import MissionSpace\n\tfrom multigrid.core.roomgrid import Room, RoomGrid\n\tfrom multigrid.core.world_object import Door, Key\n\tclass LockedHallwayEnv(RoomGrid):\n\t    \"\"\"\n", "    .. image:: https://i.imgur.com/VylPtnn.gif\n\t        :width: 325\n\t    ***********\n\t    Description\n\t    ***********\n\t    This environment consists of a hallway with multiple locked rooms on either side.\n\t    To unlock each door, agents must first find the corresponding key,\n\t    which may be in another locked room. Agents are rewarded for each door they unlock.\n\t    The standard setting is cooperative, where all agents receive a reward\n\t    for each door that is opened.\n", "    *************\n\t    Mission Space\n\t    *************\n\t    \"unlock all the doors\"\n\t    *****************\n\t    Observation Space\n\t    *****************\n\t    The multi-agent observation space is a Dict mapping from agent index to\n\t    corresponding agent observation space.\n\t    Each agent observation is a dictionary with the following entries:\n", "    * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t        Encoding of the agent's partially observable view of the environment,\n\t        where each grid cell is encoded as a 3 dimensional tuple:\n\t        (:class:`.Type`, :class:`.Color`, :class:`.State`)\n\t    * direction : int\n\t        Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t    * mission : Mission\n\t        Task string corresponding to the current environment configuration\n\t    ************\n\t    Action Space\n", "    ************\n\t    The multi-agent action space is a Dict mapping from agent index to\n\t    corresponding agent action space.\n\t    Agent actions are discrete integer values, given by:\n\t    +-----+--------------+-----------------------------+\n\t    | Num | Name         | Action                      |\n\t    +=====+==============+=============================+\n\t    | 0   | left         | Turn left                   |\n\t    +-----+--------------+-----------------------------+\n\t    | 1   | right        | Turn right                  |\n", "    +-----+--------------+-----------------------------+\n\t    | 2   | forward      | Move forward                |\n\t    +-----+--------------+-----------------------------+\n\t    | 3   | pickup       | Pick up an object           |\n\t    +-----+--------------+-----------------------------+\n\t    | 4   | drop         | Drop an object              |\n\t    +-----+--------------+-----------------------------+\n\t    | 5   | toggle       | Toggle / activate an object |\n\t    +-----+--------------+-----------------------------+\n\t    | 6   | done         | Done completing task        |\n", "    +-----+--------------+-----------------------------+\n\t    *******\n\t    Rewards\n\t    *******\n\t    A reward of ``1 - 0.9 * (step_count / max_steps)`` is given\n\t    when a door is unlocked.\n\t    ***********\n\t    Termination\n\t    ***********\n\t    The episode ends if any one of the following conditions is met:\n", "    * All doors are unlocked\n\t    * Timeout (see ``max_steps``)\n\t    *************************\n\t    Registered Configurations\n\t    *************************\n\t    * ``MultiGrid-LockedHallway-2Rooms-v0``\n\t    * ``MultiGrid-LockedHallway-4Rooms-v0``\n\t    * ``MultiGrid-LockedHallway-6Rooms-v0``\n\t    \"\"\"\n\t    def __init__(\n", "        self,\n\t        num_rooms: int = 6,\n\t        room_size: int = 5,\n\t        max_hallway_keys: int = 1,\n\t        max_keys_per_room: int = 2,\n\t        max_steps: int | None = None,\n\t        joint_reward: bool = True,\n\t        **kwargs):\n\t        \"\"\"\n\t        Parameters\n", "        ----------\n\t        num_rooms : int, default=6\n\t            Number of rooms in the environment\n\t        room_size : int, default=5\n\t            Width and height for each of the rooms\n\t        max_hallway_keys : int, default=1\n\t            Maximum number of keys in the hallway\n\t        max_keys_per_room : int, default=2\n\t            Maximum number of keys in each room\n\t        max_steps : int, optional\n", "            Maximum number of steps per episode\n\t        joint_reward : bool, default=True\n\t            Whether all agents receive the same reward\n\t        **kwargs\n\t            See :attr:`multigrid.base.MultiGridEnv.__init__`\n\t        \"\"\"\n\t        assert room_size >= 4\n\t        assert num_rooms % 2 == 0\n\t        self.num_rooms = num_rooms\n\t        self.max_hallway_keys = max_hallway_keys\n", "        self.max_keys_per_room = max_keys_per_room\n\t        if max_steps is None:\n\t            max_steps = 8 * num_rooms * room_size**2\n\t        super().__init__(\n\t            mission_space=MissionSpace.from_string(\"unlock all the doors\"),\n\t            room_size=room_size,\n\t            num_rows=(num_rooms // 2),\n\t            num_cols=3,\n\t            max_steps=max_steps,\n\t            joint_reward=joint_reward,\n", "            **kwargs,\n\t        )\n\t    def _gen_grid(self, width, height):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        super()._gen_grid(width, height)\n\t        LEFT, HALLWAY, RIGHT = range(3) # columns\n\t        color_sequence = list(Color) * ceil(self.num_rooms / len(Color))\n\t        color_sequence = self._rand_perm(color_sequence)[:self.num_rooms]\n", "        # Create hallway\n\t        for row in range(self.num_rows - 1):\n\t            self.remove_wall(HALLWAY, row, Direction.down)\n\t        # Add doors\n\t        self.rooms: dict[Color, Room] = {}\n\t        door_colors = self._rand_perm(color_sequence)\n\t        for row in range(self.num_rows):\n\t            for col, dir in ((LEFT, Direction.right), (RIGHT, Direction.left)):\n\t                color = door_colors.pop()\n\t                self.rooms[color] = self.get_room(col, row)\n", "                self.add_door(\n\t                    col, row, dir=dir, color=color, locked=True, rand_pos=False)\n\t        # Place keys in hallway\n\t        num_hallway_keys = self._rand_int(1, self.max_hallway_keys + 1)\n\t        hallway_top = self.get_room(HALLWAY, 0).top\n\t        hallway_size = (self.get_room(HALLWAY, 0).size[0], self.height)\n\t        for key_color in color_sequence[:num_hallway_keys]:\n\t            self.place_obj(Key(color=key_color), top=hallway_top, size=hallway_size)\n\t        # Place keys in rooms\n\t        key_index = num_hallway_keys\n", "        while key_index < len(color_sequence):\n\t            room = self.rooms[color_sequence[key_index - 1]]\n\t            num_room_keys = self._rand_int(1, self.max_keys_per_room + 1)\n\t            for key_color in color_sequence[key_index : key_index + num_room_keys]:\n\t                self.place_obj(Key(color=key_color), top=room.top, size=room.size)\n\t                key_index += 1\n\t        # Place agents in hallway\n\t        for agent in self.agents:\n\t            MultiGridEnv.place_agent(self, agent, top=hallway_top, size=hallway_size)\n\t    def reset(self, **kwargs):\n", "        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        self.unlocked_doors = []\n\t        return super().reset(**kwargs)\n\t    def step(self, actions):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        observations, rewards, terminations, truncations, infos = super().step(actions)\n", "        # Reward for unlocking doors\n\t        for agent_id, action in actions.items():\n\t            if action == Action.toggle:\n\t                fwd_obj = self.grid.get(*self.agents[agent_id].front_pos)\n\t                if isinstance(fwd_obj, Door) and not fwd_obj.is_locked:\n\t                    if fwd_obj not in self.unlocked_doors:\n\t                        self.unlocked_doors.append(fwd_obj)\n\t                        if self.joint_reward:\n\t                            for k in rewards:\n\t                                rewards[k] += self._reward()\n", "                        else:\n\t                            rewards[agent_id] += self._reward()\n\t        # Check if all doors are unlocked\n\t        if len(self.unlocked_doors) == len(self.rooms):\n\t            for agent in self.agents:\n\t                terminations[agent.index] = True\n\t        return observations, rewards, terminations, truncations, infos\n"]}
{"filename": "multigrid/envs/empty.py", "chunked_list": ["from __future__ import annotations\n\tfrom multigrid import MultiGridEnv\n\tfrom multigrid.core import Grid\n\tfrom multigrid.core.constants import Direction\n\tfrom multigrid.core.world_object import Goal\n\tclass EmptyEnv(MultiGridEnv):\n\t    \"\"\"\n\t    .. image:: https://i.imgur.com/wY0tT7R.gif\n\t        :width: 200\n\t    ***********\n", "    Description\n\t    ***********\n\t    This environment is an empty room, and the goal for each agent is to reach the\n\t    green goal square, which provides a sparse reward. A small penalty is subtracted\n\t    for the number of steps to reach the goal.\n\t    The standard setting is competitive, where agents race to the goal, and\n\t    only the winner receives a reward.\n\t    This environment is useful with small rooms, to validate that your RL algorithm\n\t    works correctly, and with large rooms to experiment with sparse rewards and\n\t    exploration. The random variants of the environment have the agents starting\n", "    at a random position for each episode, while the regular variants have the\n\t    agent always starting in the corner opposite to the goal.\n\t    *************\n\t    Mission Space\n\t    *************\n\t    \"get to the green goal square\"\n\t    *****************\n\t    Observation Space\n\t    *****************\n\t    The multi-agent observation space is a Dict mapping from agent index to\n", "    corresponding agent observation space.\n\t    Each agent observation is a dictionary with the following entries:\n\t    * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t        Encoding of the agent's partially observable view of the environment,\n\t        where the object at each grid cell is encoded as a vector:\n\t        (:class:`.Type`, :class:`.Color`, :class:`.State`)\n\t    * direction : int\n\t        Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t    * mission : Mission\n\t        Task string corresponding to the current environment configuration\n", "    ************\n\t    Action Space\n\t    ************\n\t    The multi-agent action space is a Dict mapping from agent index to\n\t    corresponding agent action space.\n\t    Agent actions are discrete integer values, given by:\n\t    +-----+--------------+-----------------------------+\n\t    | Num | Name         | Action                      |\n\t    +=====+==============+=============================+\n\t    | 0   | left         | Turn left                   |\n", "    +-----+--------------+-----------------------------+\n\t    | 1   | right        | Turn right                  |\n\t    +-----+--------------+-----------------------------+\n\t    | 2   | forward      | Move forward                |\n\t    +-----+--------------+-----------------------------+\n\t    | 3   | pickup       | Pick up an object           |\n\t    +-----+--------------+-----------------------------+\n\t    | 4   | drop         | Drop an object              |\n\t    +-----+--------------+-----------------------------+\n\t    | 5   | toggle       | Toggle / activate an object |\n", "    +-----+--------------+-----------------------------+\n\t    | 6   | done         | Done completing task        |\n\t    +-----+--------------+-----------------------------+\n\t    *******\n\t    Rewards\n\t    *******\n\t    A reward of ``1 - 0.9 * (step_count / max_steps)`` is given for success,\n\t    and ``0`` for failure.\n\t    ***********\n\t    Termination\n", "    ***********\n\t    The episode ends if any one of the following conditions is met:\n\t    * Any agent reaches the goal\n\t    * Timeout (see ``max_steps``)\n\t    *************************\n\t    Registered Configurations\n\t    *************************\n\t    * ``MultiGrid-Empty-5x5-v0``\n\t    * ``MultiGrid-Empty-Random-5x5-v0``\n\t    * ``MultiGrid-Empty-6x6-v0``\n", "    * ``MultiGrid-Empty-Random-6x6-v0``\n\t    * ``MultiGrid-Empty-8x8-v0``\n\t    * ``MultiGrid-Empty-16x16-v0``\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        size: int = 8,\n\t        agent_start_pos: tuple[int, int] | None = (1, 1),\n\t        agent_start_dir: Direction | None = Direction.right,\n\t        max_steps: int | None = None,\n", "        joint_reward: bool = False,\n\t        success_termination_mode: str = 'any',\n\t        **kwargs):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        size : int, default=8\n\t            Width and height of the grid\n\t        agent_start_pos : tuple[int, int], default=(1, 1)\n\t            Starting position of the agents (random if None)\n", "        agent_start_dir : Direction, default=Direction.right\n\t            Starting direction of the agents (random if None)\n\t        max_steps : int, optional\n\t            Maximum number of steps per episode\n\t        joint_reward : bool, default=True\n\t            Whether all agents receive the reward when the task is completed\n\t        success_termination_mode : 'any' or 'all', default='any'\n\t            Whether to terminate the environment when any agent reaches the goal\n\t            or after all agents reach the goal\n\t        **kwargs\n", "            See :attr:`multigrid.base.MultiGridEnv.__init__`\n\t        \"\"\"\n\t        self.agent_start_pos = agent_start_pos\n\t        self.agent_start_dir = agent_start_dir\n\t        super().__init__(\n\t            mission_space=\"get to the green goal square\",\n\t            grid_size=size,\n\t            max_steps=max_steps or (4 * size**2),\n\t            joint_reward=joint_reward,\n\t            success_termination_mode=success_termination_mode,\n", "            **kwargs,\n\t        )\n\t    def _gen_grid(self, width, height):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        # Create an empty grid\n\t        self.grid = Grid(width, height)\n\t        # Generate the surrounding walls\n\t        self.grid.wall_rect(0, 0, width, height)\n", "        # Place a goal square in the bottom-right corner\n\t        self.put_obj(Goal(), width - 2, height - 2)\n\t        # Place the agent\n\t        for agent in self.agents:\n\t            if self.agent_start_pos is not None and self.agent_start_dir is not None:\n\t                agent.state.pos = self.agent_start_pos\n\t                agent.state.dir = self.agent_start_dir\n\t            else:\n\t                self.place_agent(agent)\n"]}
{"filename": "multigrid/envs/redbluedoors.py", "chunked_list": ["from __future__ import annotations\n\tfrom multigrid import MultiGridEnv\n\tfrom multigrid.core import Action, Grid, MissionSpace\n\tfrom multigrid.core.constants import Color\n\tfrom multigrid.core.world_object import Door\n\tclass RedBlueDoorsEnv(MultiGridEnv):\n\t    \"\"\"\n\t    .. image:: https://i.imgur.com/usbavAh.gif\n\t        :width: 400\n\t    ***********\n", "    Description\n\t    ***********\n\t    This environment is a room with one red and one blue door facing\n\t    opposite directions. Agents must open the red door and then open the blue door,\n\t    in that order.\n\t    The standard setting is cooperative, where all agents receive the reward\n\t    upon completion of the task.\n\t    *************\n\t    Mission Space\n\t    *************\n", "    \"open the red door then the blue door\"\n\t    *****************\n\t    Observation Space\n\t    *****************\n\t    The multi-agent observation space is a Dict mapping from agent index to\n\t    corresponding agent observation space.\n\t    Each agent observation is a dictionary with the following entries:\n\t    * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n\t        Encoding of the agent's partially observable view of the environment,\n\t        where the object at each grid cell is encoded as a vector:\n", "        (:class:`.Type`, :class:`.Color`, :class:`.State`)\n\t    * direction : int\n\t        Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t    * mission : Mission\n\t        Task string corresponding to the current environment configuration\n\t    ************\n\t    Action Space\n\t    ************\n\t    The multi-agent action space is a Dict mapping from agent index to\n\t    corresponding agent action space.\n", "    Agent actions are discrete integer values, given by:\n\t    +-----+--------------+-----------------------------+\n\t    | Num | Name         | Action                      |\n\t    +=====+==============+=============================+\n\t    | 0   | left         | Turn left                   |\n\t    +-----+--------------+-----------------------------+\n\t    | 1   | right        | Turn right                  |\n\t    +-----+--------------+-----------------------------+\n\t    | 2   | forward      | Move forward                |\n\t    +-----+--------------+-----------------------------+\n", "    | 3   | pickup       | Pick up an object           |\n\t    +-----+--------------+-----------------------------+\n\t    | 4   | drop         | Drop an object              |\n\t    +-----+--------------+-----------------------------+\n\t    | 5   | toggle       | Toggle / activate an object |\n\t    +-----+--------------+-----------------------------+\n\t    | 6   | done         | Done completing task        |\n\t    +-----+--------------+-----------------------------+\n\t    *******\n\t    Rewards\n", "    *******\n\t    A reward of ``1 - 0.9 * (step_count / max_steps)`` is given for success,\n\t    and ``0`` for failure.\n\t    ***********\n\t    Termination\n\t    ***********\n\t    The episode ends if any one of the following conditions is met:\n\t    * Any agent opens the blue door while the red door is open (success)\n\t    * Any agent opens the blue door while the red door is not open (failure)\n\t    * Timeout (see ``max_steps``)\n", "    *************************\n\t    Registered Configurations\n\t    *************************\n\t    * ``MultiGrid-RedBlueDoors-6x6-v0``\n\t    * ``MultiGrid-RedBlueDoors-8x8-v0``\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        size: int = 8,\n\t        max_steps: int | None = None,\n", "        joint_reward: bool = True,\n\t        success_termination_mode: str = 'any',\n\t        failure_termination_mode: str = 'any',\n\t        **kwargs):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        size : int, default=8\n\t            Width and height of the grid\n\t        max_steps : int, optional\n", "            Maximum number of steps per episode\n\t        joint_reward : bool, default=True\n\t            Whether all agents receive the reward when the task is completed\n\t        success_termination_mode : 'any' or 'all', default='any'\n\t            Whether to terminate the environment when any agent fails the task\n\t            or after all agents fail the task\n\t        failure_termination_mode : 'any' or 'all', default='any'\n\t            Whether to terminate the environment when any agent fails the task\n\t            or after all agents fail the task\n\t        **kwargs\n", "            See :attr:`multigrid.base.MultiGridEnv.__init__`\n\t        \"\"\"\n\t        self.size = size\n\t        mission_space = MissionSpace.from_string(\"open the red door then the blue door\")\n\t        super().__init__(\n\t            mission_space=mission_space,\n\t            width=(2 * size),\n\t            height=size,\n\t            max_steps=max_steps or (20 * size**2),\n\t            joint_reward=joint_reward,\n", "            success_termination_mode=success_termination_mode,\n\t            failure_termination_mode=failure_termination_mode,\n\t            **kwargs,\n\t        )\n\t    def _gen_grid(self, width, height):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        # Create an empty grid\n\t        self.grid = Grid(width, height)\n", "        # Generate the grid walls\n\t        room_top = (width // 4, 0)\n\t        room_size = (width // 2, height)\n\t        self.grid.wall_rect(0, 0, width, height)\n\t        self.grid.wall_rect(*room_top, *room_size)\n\t        # Place agents in the top-left corner\n\t        for agent in self.agents:\n\t            self.place_agent(agent, top=room_top, size=room_size)\n\t        # Add a red door at a random position in the left wall\n\t        x = room_top[0]\n", "        y = self._rand_int(1, height - 1)\n\t        self.red_door = Door(Color.red)\n\t        self.grid.set(x, y, self.red_door)\n\t        # Add a blue door at a random position in the right wall\n\t        x = room_top[0] + room_size[0] - 1\n\t        y = self._rand_int(1, height - 1)\n\t        self.blue_door = Door(Color.blue)\n\t        self.grid.set(x, y, self.blue_door)\n\t    def step(self, actions):\n\t        \"\"\"\n", "        :meta private:\n\t        \"\"\"\n\t        obs, reward, terminated, truncated, info = super().step(actions)\n\t        for agent_id, action in actions.items():\n\t            if action == Action.toggle:\n\t                agent = self.agents[agent_id]\n\t                fwd_obj = self.grid.get(*agent.front_pos)\n\t                if fwd_obj == self.blue_door and self.blue_door.is_open:\n\t                    if self.red_door.is_open:\n\t                        self.on_success(agent, reward, terminated)\n", "                    else:\n\t                        self.on_failure(agent, reward, terminated)\n\t                        self.blue_door.is_open = False # close the door again\n\t        return obs, reward, terminated, truncated, info\n"]}
{"filename": "multigrid/core/actions.py", "chunked_list": ["import enum\n\tclass Action(enum.IntEnum):\n\t    \"\"\"\n\t    Enumeration of possible actions.\n\t    \"\"\"\n\t    left = 0 #: Turn left\n\t    right = enum.auto() #: Turn right\n\t    forward = enum.auto() #: Move forward\n\t    pickup = enum.auto() #: Pick up an object\n\t    drop = enum.auto() #: Drop an object\n", "    toggle = enum.auto() #: Toggle / activate an object\n\t    done = enum.auto() #: Done completing task\n"]}
{"filename": "multigrid/core/world_object.py", "chunked_list": ["from __future__ import annotations\n\timport functools\n\timport numpy as np\n\tfrom numpy.typing import ArrayLike, NDArray as ndarray\n\tfrom typing import Any, TYPE_CHECKING\n\tfrom .constants import Color, State, Type\n\tfrom ..utils.rendering import (\n\t    fill_coords,\n\t    point_in_circle,\n\t    point_in_line,\n", "    point_in_rect,\n\t)\n\tif TYPE_CHECKING:\n\t    from .agent import Agent\n\t    from ..base import MultiGridEnv\n\tclass WorldObjMeta(type):\n\t    \"\"\"\n\t    Metaclass for world objects.\n\t    Each subclass is associated with a unique :class:`Type` enumeration value.\n\t    By default, the type name is the class name (in lowercase), but this can be\n", "    overridden by setting the `type_name` attribute in the class definition.\n\t    Type names are dynamically added to the :class:`Type` enumeration\n\t    if not already present.\n\t    Examples\n\t    --------\n\t    >>> class A(WorldObj): pass\n\t    >>> A().type\n\t    <Type.a: 'a'>\n\t    >>> class B(WorldObj): type_name = 'goal'\n\t    >>> B().type\n", "    <Type.goal: 'goal'>\n\t    :meta private:\n\t    \"\"\"\n\t    # Registry of object classes\n\t    _TYPE_IDX_TO_CLASS = {}\n\t    def __new__(meta, name, bases, class_dict):\n\t        cls = super().__new__(meta, name, bases, class_dict)\n\t        if name != 'WorldObj':\n\t            type_name = class_dict.get('type_name', name.lower())\n\t            # Add the object class name to the `Type` enumeration if not already present\n", "            if type_name not in set(Type):\n\t                Type.add_item(type_name, type_name)\n\t            # Store the object class with its corresponding type index\n\t            meta._TYPE_IDX_TO_CLASS[Type(type_name).to_index()] = cls\n\t        return cls\n\tclass WorldObj(np.ndarray, metaclass=WorldObjMeta):\n\t    \"\"\"\n\t    Base class for grid world objects.\n\t    Attributes\n\t    ----------\n", "    type : Type\n\t        The object type\n\t    color : Color\n\t        The object color\n\t    state : State\n\t        The object state\n\t    contains : WorldObj or None\n\t        The object contained by this object, if any\n\t    init_pos : tuple[int, int] or None\n\t        The initial position of the object\n", "    cur_pos : tuple[int, int] or None\n\t        The current position of the object\n\t    \"\"\"\n\t    # WorldObj vector indices\n\t    TYPE = 0\n\t    COLOR = 1\n\t    STATE = 2\n\t    # WorldObj vector dimension\n\t    dim = len([TYPE, COLOR, STATE])\n\t    def __new__(cls, type: str | None = None, color: str = Color.from_index(0)):\n", "        \"\"\"\n\t        Parameters\n\t        ----------\n\t        type : str or None\n\t            Object type\n\t        color : str\n\t            Object color\n\t        \"\"\"\n\t        # If not provided, infer the object type from the class\n\t        type_name = type or getattr(cls, 'type_name', cls.__name__.lower())\n", "        type_idx = Type(type_name).to_index()\n\t        # Use the WorldObj subclass corresponding to the object type\n\t        cls = WorldObjMeta._TYPE_IDX_TO_CLASS.get(type_idx, cls)\n\t        # Create the object\n\t        obj = np.zeros(cls.dim, dtype=int).view(cls)\n\t        obj[WorldObj.TYPE] = type_idx\n\t        obj[WorldObj.COLOR] = Color(color).to_index()\n\t        obj.contains: WorldObj | None = None # object contained by this object\n\t        obj.init_pos: tuple[int, int] | None = None # initial position of the object\n\t        obj.cur_pos: tuple[int, int] | None = None # current position of the object\n", "        return obj\n\t    def __bool__(self) -> bool:\n\t        return self.type != Type.empty\n\t    def __repr__(self) -> str:\n\t        return f\"{self.__class__.__name__}(color={self.color})\"\n\t    def __str__(self) -> str:\n\t        return self.__repr__()\n\t    def __eq__(self, other: Any):\n\t        return self is other\n\t    @staticmethod\n", "    @functools.cache\n\t    def empty() -> 'WorldObj':\n\t        \"\"\"\n\t        Return an empty WorldObj instance.\n\t        \"\"\"\n\t        return WorldObj(type=Type.empty)\n\t    @staticmethod\n\t    def from_array(arr: ArrayLike[int]) -> 'WorldObj' | None:\n\t        \"\"\"\n\t        Convert an array to a WorldObj instance.\n", "        Parameters\n\t        ----------\n\t        arr : ArrayLike[int]\n\t            Array encoding the object type, color, and state\n\t        \"\"\"\n\t        type_idx = arr[WorldObj.TYPE]\n\t        if type_idx == Type.empty.to_index():\n\t            return None\n\t        if type_idx in WorldObj._TYPE_IDX_TO_CLASS:\n\t            cls = WorldObj._TYPE_IDX_TO_CLASS[type_idx]\n", "            obj = cls.__new__(cls)\n\t            obj[...] = arr\n\t            return obj\n\t        raise ValueError(f'Unknown object type: {arr[WorldObj.TYPE]}')\n\t    @functools.cached_property\n\t    def type(self) -> Type:\n\t        \"\"\"\n\t        Return the object type.\n\t        \"\"\"\n\t        return Type.from_index(self[WorldObj.TYPE])\n", "    @property\n\t    def color(self) -> Color:\n\t        \"\"\"\n\t        Return the object color.\n\t        \"\"\"\n\t        return Color.from_index(self[WorldObj.COLOR])\n\t    @color.setter\n\t    def color(self, value: str):\n\t        \"\"\"\n\t        Set the object color.\n", "        \"\"\"\n\t        self[WorldObj.COLOR] = Color(value).to_index()\n\t    @property\n\t    def state(self) -> str:\n\t        \"\"\"\n\t        Return the name of the object state.\n\t        \"\"\"\n\t        return State.from_index(self[WorldObj.STATE])\n\t    @state.setter\n\t    def state(self, value: str):\n", "        \"\"\"\n\t        Set the name of the object state.\n\t        \"\"\"\n\t        self[WorldObj.STATE] = State(value).to_index()\n\t    def can_overlap(self) -> bool:\n\t        \"\"\"\n\t        Can an agent overlap with this?\n\t        \"\"\"\n\t        return self.type == Type.empty\n\t    def can_pickup(self) -> bool:\n", "        \"\"\"\n\t        Can an agent pick this up?\n\t        \"\"\"\n\t        return False\n\t    def can_contain(self) -> bool:\n\t        \"\"\"\n\t        Can this contain another object?\n\t        \"\"\"\n\t        return False\n\t    def toggle(self, env: MultiGridEnv, agent: Agent, pos: tuple[int, int]) -> bool:\n", "        \"\"\"\n\t        Toggle the state of this object or trigger an action this object performs.\n\t        Parameters\n\t        ----------\n\t        env : MultiGridEnv\n\t            The environment this object is contained in\n\t        agent : Agent\n\t            The agent performing the toggle action\n\t        pos : tuple[int, int]\n\t            The (x, y) position of this object in the environment grid\n", "        Returns\n\t        -------\n\t        success : bool\n\t            Whether the toggle action was successful\n\t        \"\"\"\n\t        return False\n\t    def encode(self) -> tuple[int, int, int]:\n\t        \"\"\"\n\t        Encode a 3-tuple description of this object.\n\t        Returns\n", "        -------\n\t        type_idx : int\n\t            The index of the object type\n\t        color_idx : int\n\t            The index of the object color\n\t        state_idx : int\n\t            The index of the object state\n\t        \"\"\"\n\t        return tuple(self)\n\t    @staticmethod\n", "    def decode(type_idx: int, color_idx: int, state_idx: int) -> 'WorldObj' | None:\n\t        \"\"\"\n\t        Create an object from a 3-tuple description.\n\t        Parameters\n\t        ----------\n\t        type_idx : int\n\t            The index of the object type\n\t        color_idx : int\n\t            The index of the object color\n\t        state_idx : int\n", "            The index of the object state\n\t        \"\"\"\n\t        arr = np.array([type_idx, color_idx, state_idx])\n\t        return WorldObj.from_array(arr)\n\t    def render(self, img: ndarray[np.uint8]):\n\t        \"\"\"\n\t        Draw the world object.\n\t        Parameters\n\t        ----------\n\t        img : ndarray[int] of shape (width, height, 3)\n", "            RGB image array to render object on\n\t        \"\"\"\n\t        raise NotImplementedError\n\tclass Goal(WorldObj):\n\t    \"\"\"\n\t    Goal object an agent may be searching for.\n\t    \"\"\"\n\t    def __new__(cls, color: str = Color.green):\n\t        return super().__new__(cls, color=color)\n\t    def can_overlap(self) -> bool:\n", "        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        fill_coords(img, point_in_rect(0, 1, 0, 1), self.color.rgb())\n\tclass Floor(WorldObj):\n", "    \"\"\"\n\t    Colored floor tile an agent can walk over.\n\t    \"\"\"\n\t    def __new__(cls, color: str = Color.blue):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        color : str\n\t            Object color\n\t        \"\"\"\n", "        return super().__new__(cls, color=color)\n\t    def can_overlap(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n", "        # Give the floor a pale color\n\t        color = self.color.rgb() / 2\n\t        fill_coords(img, point_in_rect(0.031, 1, 0.031, 1), color)\n\tclass Lava(WorldObj):\n\t    \"\"\"\n\t    Lava object an agent can fall onto.\n\t    \"\"\"\n\t    def __new__(cls):\n\t        \"\"\"\n\t        \"\"\"\n", "        return super().__new__(cls, color=Color.red)\n\t    def can_overlap(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n", "        c = (255, 128, 0)\n\t        # Background color\n\t        fill_coords(img, point_in_rect(0, 1, 0, 1), c)\n\t        # Little waves\n\t        for i in range(3):\n\t            ylo = 0.3 + 0.2 * i\n\t            yhi = 0.4 + 0.2 * i\n\t            fill_coords(img, point_in_line(0.1, ylo, 0.3, yhi, r=0.03), (0, 0, 0))\n\t            fill_coords(img, point_in_line(0.3, yhi, 0.5, ylo, r=0.03), (0, 0, 0))\n\t            fill_coords(img, point_in_line(0.5, ylo, 0.7, yhi, r=0.03), (0, 0, 0))\n", "            fill_coords(img, point_in_line(0.7, yhi, 0.9, ylo, r=0.03), (0, 0, 0))\n\tclass Wall(WorldObj):\n\t    \"\"\"\n\t    Wall object that agents cannot move through.\n\t    \"\"\"\n\t    @functools.cache # reuse instances, since object is effectively immutable\n\t    def __new__(cls, color: str = Color.grey):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n", "        color : str\n\t            Object color\n\t        \"\"\"\n\t        return super().__new__(cls, color=color)\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        fill_coords(img, point_in_rect(0, 1, 0, 1), self.color.rgb())\n\tclass Door(WorldObj):\n", "    \"\"\"\n\t    Door object that may be opened or closed. Locked doors require a key to open.\n\t    Attributes\n\t    ----------\n\t    is_open: bool\n\t        Whether the door is open\n\t    is_locked: bool\n\t        Whether the door is locked\n\t    \"\"\"\n\t    def __new__(\n", "        cls, color: str = Color.blue, is_open: bool = False, is_locked: bool = False):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        color : str\n\t            Object color\n\t        is_open : bool\n\t            Whether the door is open\n\t        is_locked : bool\n\t            Whether the door is locked\n", "        \"\"\"\n\t        door = super().__new__(cls, color=color)\n\t        door.is_open = is_open\n\t        door.is_locked = is_locked\n\t        return door\n\t    def __str__(self):\n\t        return f\"{self.__class__.__name__}(color={self.color},state={self.state})\"\n\t    @property\n\t    def is_open(self) -> bool:\n\t        \"\"\"\n", "        Whether the door is open.\n\t        \"\"\"\n\t        return self.state == State.open\n\t    @is_open.setter\n\t    def is_open(self, value: bool):\n\t        \"\"\"\n\t        Set the door to be open or closed.\n\t        \"\"\"\n\t        if value:\n\t            self.state = State.open # set state to open\n", "        elif not self.is_locked:\n\t            self.state = State.closed # set state to closed (unless already locked)\n\t    @property\n\t    def is_locked(self) -> bool:\n\t        \"\"\"\n\t        Whether the door is locked.\n\t        \"\"\"\n\t        return self.state == State.locked\n\t    @is_locked.setter\n\t    def is_locked(self, value: bool):\n", "        \"\"\"\n\t        Set the door to be locked or unlocked.\n\t        \"\"\"\n\t        if value:\n\t            self.state = State.locked # set state to locked\n\t        elif not self.is_open:\n\t            self.state = State.closed # set state to closed (unless already open)\n\t    def can_overlap(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n", "        \"\"\"\n\t        return self.is_open\n\t    def toggle(self, env, agent, pos):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        if self.is_locked:\n\t            # Check if the player has the right key to unlock the door\n\t            carried_obj = agent.state.carrying\n\t            if isinstance(carried_obj, Key) and carried_obj.color == self.color:\n", "                self.is_locked = False\n\t                self.is_open = True\n\t                env.grid.update(*pos)\n\t                return True\n\t            return False\n\t        self.is_open = not self.is_open\n\t        env.grid.update(*pos)\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n", "        :meta private:\n\t        \"\"\"\n\t        c = self.color.rgb()\n\t        if self.is_open:\n\t            fill_coords(img, point_in_rect(0.88, 1.00, 0.00, 1.00), c)\n\t            fill_coords(img, point_in_rect(0.92, 0.96, 0.04, 0.96), (0, 0, 0))\n\t            return\n\t        # Door frame and door\n\t        if self.is_locked:\n\t            fill_coords(img, point_in_rect(0.00, 1.00, 0.00, 1.00), c)\n", "            fill_coords(img, point_in_rect(0.06, 0.94, 0.06, 0.94), 0.45 * c)\n\t            # Draw key slot\n\t            fill_coords(img, point_in_rect(0.52, 0.75, 0.50, 0.56), c)\n\t        else:\n\t            fill_coords(img, point_in_rect(0.00, 1.00, 0.00, 1.00), c)\n\t            fill_coords(img, point_in_rect(0.04, 0.96, 0.04, 0.96), (0, 0, 0))\n\t            fill_coords(img, point_in_rect(0.08, 0.92, 0.08, 0.92), c)\n\t            fill_coords(img, point_in_rect(0.12, 0.88, 0.12, 0.88), (0, 0, 0))\n\t            # Draw door handle\n\t            fill_coords(img, point_in_circle(cx=0.75, cy=0.50, r=0.08), c)\n", "class Key(WorldObj):\n\t    \"\"\"\n\t    Key object that can be picked up and used to unlock doors.\n\t    \"\"\"\n\t    def __new__(cls, color: str = Color.blue):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        color : str\n\t            Object color\n", "        \"\"\"\n\t        return super().__new__(cls, color=color)\n\t    def can_pickup(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n", "        \"\"\"\n\t        c = self.color.rgb()\n\t        # Vertical quad\n\t        fill_coords(img, point_in_rect(0.50, 0.63, 0.31, 0.88), c)\n\t        # Teeth\n\t        fill_coords(img, point_in_rect(0.38, 0.50, 0.59, 0.66), c)\n\t        fill_coords(img, point_in_rect(0.38, 0.50, 0.81, 0.88), c)\n\t        # Ring\n\t        fill_coords(img, point_in_circle(cx=0.56, cy=0.28, r=0.190), c)\n\t        fill_coords(img, point_in_circle(cx=0.56, cy=0.28, r=0.064), (0, 0, 0))\n", "class Ball(WorldObj):\n\t    \"\"\"\n\t    Ball object that can be picked up by agents.\n\t    \"\"\"\n\t    def __new__(cls, color: str = Color.blue):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        color : str\n\t            Object color\n", "        \"\"\"\n\t        return super().__new__(cls, color=color)\n\t    def can_pickup(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n", "        \"\"\"\n\t        fill_coords(img, point_in_circle(0.5, 0.5, 0.31), self.color.rgb())\n\tclass Box(WorldObj):\n\t    \"\"\"\n\t    Box object that may contain other objects.\n\t    \"\"\"\n\t    def __new__(cls, color: str = Color.yellow, contains: WorldObj | None = None):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n", "        color : str\n\t            Object color\n\t        contains : WorldObj or None\n\t            Object contents\n\t        \"\"\"\n\t        box = super().__new__(cls, color=color)\n\t        box.contains = contains\n\t        return box\n\t    def can_pickup(self) -> bool:\n\t        \"\"\"\n", "        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def can_contain(self) -> bool:\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        return True\n\t    def toggle(self, env, agent, pos):\n\t        \"\"\"\n", "        :meta private:\n\t        \"\"\"\n\t        # Replace the box by its contents\n\t        env.grid.set(*pos, self.contains)\n\t        return True\n\t    def render(self, img):\n\t        \"\"\"\n\t        :meta private:\n\t        \"\"\"\n\t        # Outline\n", "        fill_coords(img, point_in_rect(0.12, 0.88, 0.12, 0.88), self.color.rgb())\n\t        fill_coords(img, point_in_rect(0.18, 0.82, 0.18, 0.82), (0, 0, 0))\n\t        # Horizontal slit\n\t        fill_coords(img, point_in_rect(0.16, 0.84, 0.47, 0.53), self.color.rgb())\n"]}
{"filename": "multigrid/core/agent.py", "chunked_list": ["from __future__ import annotations\n\timport numpy as np\n\tfrom gymnasium import spaces\n\tfrom numpy.typing import ArrayLike, NDArray as ndarray\n\tfrom .actions import Action\n\tfrom .constants import Color, Direction, Type\n\tfrom .mission import Mission, MissionSpace\n\tfrom .world_object import WorldObj\n\tfrom ..utils.misc import front_pos, PropertyAlias\n\tfrom ..utils.rendering import (\n", "    fill_coords,\n\t    point_in_triangle,\n\t    rotate_fn,\n\t)\n\tclass Agent:\n\t    \"\"\"\n\t    Class representing an agent in the environment.\n\t    :Observation Space:\n\t        Observations are dictionaries with the following entries:\n\t            * image : ndarray[int] of shape (view_size, view_size, :attr:`.WorldObj.dim`)\n", "                Encoding of the agent's view of the environment\n\t            * direction : int\n\t                Agent's direction (0: right, 1: down, 2: left, 3: up)\n\t            * mission : Mission\n\t                Task string corresponding to the current environment configuration\n\t    :Action Space:\n\t        Actions are discrete integers, as enumerated in :class:`.Action`.\n\t    Attributes\n\t    ----------\n\t    index : int\n", "        Index of the agent in the environment\n\t    state : AgentState\n\t        State of the agent\n\t    mission : Mission\n\t        Current mission string for the agent\n\t    action_space : gym.spaces.Discrete\n\t        Action space for the agent\n\t    observation_space : gym.spaces.Dict\n\t        Observation space for the agent\n\t    \"\"\"\n", "    def __init__(\n\t        self,\n\t        index: int,\n\t        mission_space: MissionSpace = MissionSpace.from_string('maximize reward'),\n\t        view_size: int = 7,\n\t        see_through_walls: bool = False):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        index : int\n", "            Index of the agent in the environment\n\t        mission_space : MissionSpace\n\t            The mission space for the agent\n\t        view_size : int\n\t            The size of the agent's view (must be odd)\n\t        see_through_walls : bool\n\t            Whether the agent can see through walls\n\t        \"\"\"\n\t        self.index: int = index\n\t        self.state: AgentState = AgentState()\n", "        self.mission: Mission = None\n\t        # Number of cells (width and height) in the agent view\n\t        assert view_size % 2 == 1\n\t        assert view_size >= 3\n\t        self.view_size = view_size\n\t        self.see_through_walls = see_through_walls\n\t        # Observations are dictionaries containing an\n\t        # encoding of the grid and a textual 'mission' string\n\t        self.observation_space = spaces.Dict({\n\t            'image': spaces.Box(\n", "                low=0,\n\t                high=255,\n\t                shape=(view_size, view_size, WorldObj.dim),\n\t                dtype=int,\n\t            ),\n\t            'direction': spaces.Discrete(len(Direction)),\n\t            'mission': mission_space,\n\t        })\n\t        # Actions are discrete integer values\n\t        self.action_space = spaces.Discrete(len(Action))\n", "    # AgentState Properties\n\t    color = PropertyAlias(\n\t        'state', 'color', doc='Alias for :attr:`AgentState.color`.')\n\t    dir = PropertyAlias(\n\t        'state', 'dir', doc='Alias for :attr:`AgentState.dir`.')\n\t    pos = PropertyAlias(\n\t        'state', 'pos', doc='Alias for :attr:`AgentState.pos`.')\n\t    terminated = PropertyAlias(\n\t        'state', 'terminated', doc='Alias for :attr:`AgentState.terminated`.')\n\t    carrying = PropertyAlias(\n", "        'state', 'carrying', doc='Alias for :attr:`AgentState.carrying`.')\n\t    @property\n\t    def front_pos(self) -> tuple[int, int]:\n\t        \"\"\"\n\t        Get the position of the cell that is directly in front of the agent.\n\t        \"\"\"\n\t        agent_dir = self.state._view[AgentState.DIR]\n\t        agent_pos = self.state._view[AgentState.POS]\n\t        return front_pos(*agent_pos, agent_dir)\n\t    def reset(self, mission: Mission = Mission('maximize reward')):\n", "        \"\"\"\n\t        Reset the agent to an initial state.\n\t        Parameters\n\t        ----------\n\t        mission : Mission\n\t            Mission string to use for the new episode\n\t        \"\"\"\n\t        self.mission = mission\n\t        self.state.pos = (-1, -1)\n\t        self.state.dir = -1\n", "        self.state.terminated = False\n\t        self.state.carrying = None\n\t    def encode(self) -> tuple[int, int, int]:\n\t        \"\"\"\n\t        Encode a description of this agent as a 3-tuple of integers.\n\t        Returns\n\t        -------\n\t        type_idx : int\n\t            The index of the agent type\n\t        color_idx : int\n", "            The index of the agent color\n\t        agent_dir : int\n\t            The direction of the agent (0: right, 1: down, 2: left, 3: up)\n\t        \"\"\"\n\t        return (Type.agent.to_index(), self.state.color.to_index(), self.state.dir)\n\t    def render(self, img: ndarray[np.uint8]):\n\t        \"\"\"\n\t        Draw the agent.\n\t        Parameters\n\t        ----------\n", "        img : ndarray[int] of shape (width, height, 3)\n\t            RGB image array to render agent on\n\t        \"\"\"\n\t        tri_fn = point_in_triangle(\n\t            (0.12, 0.19),\n\t            (0.87, 0.50),\n\t            (0.12, 0.81),\n\t        )\n\t        # Rotate the agent based on its direction\n\t        tri_fn = rotate_fn(tri_fn, cx=0.5, cy=0.5, theta=0.5 * np.pi * self.state.dir)\n", "        fill_coords(img, tri_fn, self.state.color.rgb())\n\tclass AgentState(np.ndarray):\n\t    \"\"\"\n\t    State for an :class:`.Agent` object.\n\t    ``AgentState`` objects also support vectorized operations,\n\t    in which case the ``AgentState`` object represents the states of multiple agents.\n\t    Attributes\n\t    ----------\n\t    color : Color or ndarray[str]\n\t        Agent color\n", "    dir : Direction or ndarray[int]\n\t        Agent direction (0: right, 1: down, 2: left, 3: up)\n\t    pos : tuple[int, int] or ndarray[int]\n\t        Agent (x, y) position\n\t    terminated : bool or ndarray[bool]\n\t        Whether the agent has terminated\n\t    carrying : WorldObj or None or ndarray[object]\n\t        Object the agent is carrying\n\t    Examples\n\t    --------\n", "    Create a vectorized agent state for 3 agents:\n\t    >>> agent_state = AgentState(3)\n\t    >>> agent_state\n\t    AgentState(3)\n\t    Access and set state attributes for one agent at a time:\n\t    >>> a = agent_state[0]\n\t    >>> a\n\t    AgentState()\n\t    >>> a.color\n\t    'red'\n", "    >>> a.color = 'yellow'\n\t    The underlying vectorized state is automatically updated as well:\n\t    >>> agent_state.color\n\t    array(['yellow', 'green', 'blue'])\n\t    Access and set state attributes all at once:\n\t    >>> agent_state.dir\n\t    array([-1, -1, -1])\n\t    >>> agent_state.dir = np.random.randint(4, size=(len(agent_state)))\n\t    >>> agent_state.dir\n\t    array([2, 3, 0])\n", "    >>> a.dir\n\t    2\n\t    \"\"\"\n\t    # State vector indices\n\t    TYPE = 0\n\t    COLOR = 1\n\t    DIR = 2\n\t    ENCODING = slice(0, 3)\n\t    POS = slice(3, 5)\n\t    TERMINATED = 5\n", "    CARRYING = slice(6, 6 + WorldObj.dim)\n\t    # State vector dimension\n\t    dim = 6 + WorldObj.dim\n\t    def __new__(cls, *dims: int):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        dims : int, optional\n\t            Shape of vectorized agent state\n\t        \"\"\"\n", "        obj = np.zeros(dims + (cls.dim,), dtype=int).view(cls)\n\t        # Set default values\n\t        obj[..., AgentState.TYPE] = Type.agent\n\t        obj[..., AgentState.COLOR].flat = Color.cycle(np.prod(dims))\n\t        obj[..., AgentState.DIR] = -1\n\t        obj[..., AgentState.POS] = (-1, -1)\n\t        # Other attributes\n\t        obj._carried_obj = np.empty(dims, dtype=object) # object references\n\t        obj._terminated = np.zeros(dims, dtype=bool) # cache for faster access\n\t        obj._view = obj.view(np.ndarray) # view of the underlying array (faster indexing)\n", "        return obj\n\t    def __repr__(self):\n\t        shape = str(self.shape[:-1]).replace(\",)\", \")\")\n\t        return f'{self.__class__.__name__}{shape}'\n\t    def __getitem__(self, idx):\n\t        out = super().__getitem__(idx)\n\t        if out.shape and out.shape[-1] == self.dim:\n\t            out._view = self._view[idx, ...]\n\t            out._carried_obj = self._carried_obj[idx, ...] # set carried object reference\n\t            out._terminated = self._terminated[idx, ...] # set terminated cache\n", "        return out\n\t    @property\n\t    def color(self) -> Color | ndarray[np.str]:\n\t        \"\"\"\n\t        Return the agent color.\n\t        \"\"\"\n\t        return Color.from_index(self._view[..., AgentState.COLOR])\n\t    @color.setter\n\t    def color(self, value: str | ArrayLike[str]):\n\t        \"\"\"\n", "        Set the agent color.\n\t        \"\"\"\n\t        self[..., AgentState.COLOR] = np.vectorize(lambda c: Color(c).to_index())(value)\n\t    @property\n\t    def dir(self) -> Direction | ndarray[np.int]:\n\t        \"\"\"\n\t        Return the agent direction.\n\t        \"\"\"\n\t        out = self._view[..., AgentState.DIR]\n\t        return Direction(out.item()) if out.ndim == 0 else out\n", "    @dir.setter\n\t    def dir(self, value: int | ArrayLike[int]):\n\t        \"\"\"\n\t        Set the agent direction.\n\t        \"\"\"\n\t        self[..., AgentState.DIR] = value\n\t    @property\n\t    def pos(self) -> tuple[int, int] | ndarray[np.int]:\n\t        \"\"\"\n\t        Return the agent's (x, y) position.\n", "        \"\"\"\n\t        out = self._view[..., AgentState.POS]\n\t        return tuple(out) if out.ndim == 1 else out\n\t    @pos.setter\n\t    def pos(self, value: ArrayLike[int] | ArrayLike[ArrayLike[int]]):\n\t        \"\"\"\n\t        Set the agent's (x, y) position.\n\t        \"\"\"\n\t        self[..., AgentState.POS] = value\n\t    @property\n", "    def terminated(self) -> bool | ndarray[np.bool]:\n\t        \"\"\"\n\t        Return whether the agent has terminated.\n\t        \"\"\"\n\t        out = self._terminated\n\t        return out.item() if out.ndim == 0 else out\n\t    @terminated.setter\n\t    def terminated(self, value: bool | ArrayLike[bool]):\n\t        \"\"\"\n\t        Set whether the agent has terminated.\n", "        \"\"\"\n\t        self[..., AgentState.TERMINATED] = value\n\t        self._terminated[...] = value\n\t    @property\n\t    def carrying(self) -> WorldObj | None | ndarray[np.object]:\n\t        \"\"\"\n\t        Return the object the agent is carrying.\n\t        \"\"\"\n\t        out = self._carried_obj\n\t        return out.item() if out.ndim == 0 else out\n", "    @carrying.setter\n\t    def carrying(self, obj: WorldObj | None | ArrayLike[object]):\n\t        \"\"\"\n\t        Set the object the agent is carrying.\n\t        \"\"\"\n\t        self[..., AgentState.CARRYING] = WorldObj.empty() if obj is None else obj\n\t        if isinstance(obj, (WorldObj, type(None))):\n\t            self._carried_obj[...].fill(obj)\n\t        else:\n\t            self._carried_obj[...] = obj\n"]}
{"filename": "multigrid/core/roomgrid.py", "chunked_list": ["from __future__ import annotations\n\timport numpy as np\n\tfrom collections import deque\n\tfrom typing import Callable, Iterable, TypeVar\n\tfrom .agent import Agent\n\tfrom .constants import Color, Direction, Type\n\tfrom .grid import Grid\n\tfrom .world_object import Door, WorldObj\n\tfrom ..base import MultiGridEnv\n\tT = TypeVar('T')\n", "def bfs(start_node: T, neighbor_fn: Callable[[T], Iterable[T]]) -> set[T]:\n\t    \"\"\"\n\t    Run a breadth-first search from a starting node.\n\t    Parameters\n\t    ----------\n\t    start_node : T\n\t        Start node\n\t    neighbor_fn : Callable(T) -> Iterable[T]\n\t        Function that returns the neighbors of a node\n\t    Returns\n", "    -------\n\t    visited : set[T]\n\t        Set of nodes reachable from the start node\n\t    \"\"\"\n\t    visited, queue = set(), deque([start_node])\n\t    while queue:\n\t        node = queue.popleft()\n\t        if node not in visited:\n\t            visited.add(node)\n\t            queue.extend(neighbor_fn(node))\n", "    return visited\n\tdef reject_next_to(env: MultiGridEnv, pos: tuple[int, int]):\n\t    \"\"\"\n\t    Function to filter out object positions that are right next to\n\t    the agent's starting point\n\t    \"\"\"\n\t    return any(np.linalg.norm(pos - env.agent_states.pos, axis=-1) <= 1)\n\tclass Room:\n\t    \"\"\"\n\t    Room as an area inside a grid.\n", "    \"\"\"\n\t    def __init__(self, top: tuple[int, int], size: tuple[int, int]):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        top : tuple[int, int]\n\t            Top-left position of the room\n\t        size : tuple[int, int]\n\t            Room size as (width, height)\n\t        \"\"\"\n", "        self.top, self.size = top, size\n\t        Point = tuple[int, int] # typing alias\n\t        # Mapping of door objects and door positions\n\t        self.doors: dict[Direction, Door | None] = {d: None for d in Direction}\n\t        self.door_pos: dict[Direction, Point | None] = {d: None for d in Direction}\n\t        # Mapping of rooms adjacent to this one\n\t        self.neighbors: dict[Direction, Room | None] = {d: None for d in Direction}\n\t        # List of objects contained in this room\n\t        self.objs = []\n\t    @property\n", "    def locked(self) -> bool:\n\t        \"\"\"\n\t        Return whether this room is behind a locked door.\n\t        \"\"\"\n\t        return any(door and door.is_locked for door in self.doors.values())\n\t    def set_door_pos(\n\t        self,\n\t        dir: Direction,\n\t        random: np.random.Generator | None = None) -> tuple[int, int]:\n\t        \"\"\"\n", "        Set door position in the given direction.\n\t        Parameters\n\t        ----------\n\t        dir : Direction\n\t            Direction of wall to place door\n\t        random : np.random.Generator, optional\n\t            Random number generator (if provided, door position will be random)\n\t        \"\"\"\n\t        left, top = self.top\n\t        right, bottom = self.top[0] + self.size[0] - 1, self.top[1] + self.size[1] - 1,\n", "        if dir == Direction.right:\n\t            if random:\n\t                self.door_pos[dir] = (right, random.integers(top + 1, bottom))\n\t            else:\n\t                self.door_pos[dir] = (right, (top + bottom) // 2)\n\t        elif dir == Direction.down:\n\t            if random:\n\t                self.door_pos[dir] = (random.integers(left + 1, right), bottom)\n\t            else:\n\t                self.door_pos[dir] = ((left + right) // 2, bottom)\n", "        elif dir == Direction.left:\n\t            if random:\n\t                self.door_pos[dir] = (left, random.integers(top + 1, bottom))\n\t            else:\n\t                self.door_pos[dir] = (left, (top + bottom) // 2)\n\t        elif dir == Direction.up:\n\t            if random:\n\t                self.door_pos[dir] = (random.integers(left + 1, right), top)\n\t            else:\n\t                self.door_pos[dir] = ((left + right) // 2, top)\n", "        return self.door_pos[dir]\n\t    def pos_inside(self, x: int, y: int) -> bool:\n\t        \"\"\"\n\t        Check if a position is within the bounds of this room.\n\t        \"\"\"\n\t        left_x, top_y = self.top\n\t        width, height = self.size\n\t        return left_x <= x < left_x + width and top_y <= y < top_y + height\n\tclass RoomGrid(MultiGridEnv):\n\t    \"\"\"\n", "    Environment with multiple rooms and random objects.\n\t    This is meant to serve as a base class for other environments.\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        room_size: int = 7,\n\t        num_rows: int = 3,\n\t        num_cols: int = 3,\n\t        **kwargs):\n\t        \"\"\"\n", "        Parameters\n\t        ----------\n\t        room_size : int, default=7\n\t            Width and height for each of the rooms\n\t        num_rows : int, default=3\n\t            Number of rows of rooms\n\t        num_cols : int, default=3\n\t            Number of columns of rooms\n\t        **kwargs\n\t            See :attr:`multigrid.base.MultiGridEnv.__init__`\n", "        \"\"\"\n\t        assert room_size >= 3\n\t        assert num_rows > 0\n\t        assert num_cols > 0\n\t        self.room_size = room_size\n\t        self.num_rows = num_rows\n\t        self.num_cols = num_cols\n\t        height = (room_size - 1) * num_rows + 1\n\t        width = (room_size - 1) * num_cols + 1\n\t        super().__init__(width=width, height=height, **kwargs)\n", "    def get_room(self, col: int, row: int) -> Room:\n\t        \"\"\"\n\t        Get the room at the given column and row.\n\t        Parameters\n\t        ----------\n\t        col : int\n\t            Column of the room\n\t        row : int\n\t            Row of the room\n\t        \"\"\"\n", "        assert 0 <= col < self.num_cols\n\t        assert 0 <= row < self.num_rows\n\t        return self.room_grid[row][col]\n\t    def room_from_pos(self, x: int, y: int) -> Room:\n\t        \"\"\"\n\t        Get the room a given position maps to.\n\t        Parameters\n\t        ----------\n\t        x : int\n\t            Grid x-coordinate\n", "        y : int\n\t            Grid y-coordinate\n\t        \"\"\"\n\t        col = x // (self.room_size - 1)\n\t        row = y // (self.room_size - 1)\n\t        return self.get_room(col, row)\n\t    def _gen_grid(self, width, height):\n\t        # Create the grid\n\t        self.grid = Grid(width, height)\n\t        self.room_grid = [[None] * self.num_cols for _ in range(self.num_rows)]\n", "        # Create rooms\n\t        for row in range(self.num_rows):\n\t            for col in range(self.num_cols):\n\t                room = Room(\n\t                    (col * (self.room_size - 1), row * (self.room_size - 1)),\n\t                    (self.room_size, self.room_size),\n\t                )\n\t                self.room_grid[row][col] = room\n\t                self.grid.wall_rect(*room.top, *room.size) # generate walls\n\t        # Create connections between rooms\n", "        for row in range(self.num_rows):\n\t            for col in range(self.num_cols):\n\t                room = self.room_grid[row][col]\n\t                if col < self.num_cols - 1:\n\t                    room.neighbors[Direction.right] = self.room_grid[row][col + 1]\n\t                if row < self.num_rows - 1:\n\t                    room.neighbors[Direction.down] = self.room_grid[row + 1][col]\n\t                if col > 0:\n\t                    room.neighbors[Direction.left] = self.room_grid[row][col - 1]\n\t                if row > 0:\n", "                    room.neighbors[Direction.up] = self.room_grid[row - 1][col]\n\t        # Agents start in the middle, facing right\n\t        self.agent_states.dir = Direction.right\n\t        self.agent_states.pos = (\n\t            (self.num_cols // 2) * (self.room_size - 1) + (self.room_size // 2),\n\t            (self.num_rows // 2) * (self.room_size - 1) + (self.room_size // 2),\n\t        )\n\t    def place_in_room(\n\t        self, col: int, row: int, obj: WorldObj) -> tuple[WorldObj, tuple[int, int]]:\n\t        \"\"\"\n", "        Add an existing object to the given room.\n\t        Parameters\n\t        ----------\n\t        col : int\n\t            Room column\n\t        row : int\n\t            Room row\n\t        obj : WorldObj\n\t            Object to add\n\t        \"\"\"\n", "        room = self.get_room(col, row)\n\t        pos = self.place_obj(\n\t            obj, room.top, room.size, reject_fn=reject_next_to, max_tries=1000)\n\t        room.objs.append(obj)\n\t        return obj, pos\n\t    def add_object(\n\t        self,\n\t        col: int,\n\t        row: int,\n\t        kind: Type | None = None,\n", "        color: Color | None = None) -> tuple[WorldObj, tuple[int, int]]:\n\t        \"\"\"\n\t        Create a new object in the given room.\n\t        Parameters\n\t        ----------\n\t        col : int\n\t            Room column\n\t        row : int\n\t            Room row\n\t        kind : str, optional\n", "            Type of object to add (random if not specified)\n\t        color : str, optional\n\t            Color of the object to add (random if not specified)\n\t        \"\"\"\n\t        kind = kind or self._rand_elem([Type.key, Type.ball, Type.box])\n\t        color = color or self._rand_color()\n\t        obj = WorldObj(type=kind, color=color)\n\t        return self.place_in_room(col, row, obj)\n\t    def add_door(\n\t        self,\n", "        col: int,\n\t        row: int,\n\t        dir: Direction | None = None,\n\t        color: Color | None = None,\n\t        locked: bool | None = None,\n\t        rand_pos: bool = True) -> tuple[Door, tuple[int, int]]:\n\t        \"\"\"\n\t        Add a door to a room, connecting it to a neighbor.\n\t        Parameters\n\t        ----------\n", "        col : int\n\t            Room column\n\t        row : int\n\t            Room row\n\t        dir : Direction, optional\n\t            Which wall to put the door on (random if not specified)\n\t        color : Color, optional\n\t            Color of the door (random if not specified)\n\t        locked : bool, optional\n\t            Whether the door is locked (random if not specified)\n", "        rand_pos : bool, default=True\n\t            Whether to place the door at a random position on the room wall\n\t        \"\"\"\n\t        room = self.get_room(col, row)\n\t        # Need to make sure that there is a neighbor along this wall\n\t        # and that there is not already a door\n\t        if dir is None:\n\t            while room.neighbors[dir] is None or room.doors[dir] is not None:\n\t                dir = self._rand_elem(Direction)\n\t        else:\n", "            assert room.neighbors[dir] is not None, \"no neighbor in this direction\"\n\t            assert room.doors[dir] is None, \"door already exists\"\n\t        # Create the door\n\t        color = color if color is not None else self._rand_color()\n\t        locked = locked if locked is not None else self._rand_bool()\n\t        door = Door(color, is_locked=locked)\n\t        pos = room.set_door_pos(dir, random=self.np_random if rand_pos else None)\n\t        self.put_obj(door, *pos)\n\t        # Connect the door to the neighboring room\n\t        room.doors[dir] = door\n", "        room.neighbors[dir].doors[(dir + 2) % 4] = door\n\t        return door, pos\n\t    def remove_wall(self, col: int, row: int, dir: Direction):\n\t        \"\"\"\n\t        Remove a wall between two rooms.\n\t        Parameters\n\t        ----------\n\t        col : int\n\t            Room column\n\t        row : int\n", "            Room row\n\t        dir : Direction\n\t            Direction of the wall to remove\n\t        \"\"\"\n\t        room = self.get_room(col, row)\n\t        assert room.doors[dir] is None, \"door exists on this wall\"\n\t        assert room.neighbors[dir], \"invalid wall\"\n\t        tx, ty = room.top\n\t        w, h = room.size\n\t        # Remove the wall\n", "        if dir == Direction.right:\n\t            for i in range(1, h - 1):\n\t                self.grid.set(tx + w - 1, ty + i, None)\n\t        elif dir == Direction.down:\n\t            for i in range(1, w - 1):\n\t                self.grid.set(tx + i, ty + h - 1, None)\n\t        elif dir == Direction.left:\n\t            for i in range(1, h - 1):\n\t                self.grid.set(tx, ty + i, None)\n\t        elif dir == Direction.up:\n", "            for i in range(1, w - 1):\n\t                self.grid.set(tx + i, ty, None)\n\t        else:\n\t            assert False, \"invalid wall index\"\n\t        # Mark the rooms as connected\n\t        room.doors[dir] = True\n\t        room.neighbors[dir].doors[(dir + 2) % 4] = True\n\t    def place_agent(\n\t        self,\n\t        agent: Agent,\n", "        col: int | None = None,\n\t        row: int | None = None,\n\t        rand_dir: bool = True) -> tuple[int, int]:\n\t        \"\"\"\n\t        Place an agent in a room.\n\t        Parameters\n\t        ----------\n\t        agent : Agent\n\t            Agent to place\n\t        col : int, optional\n", "            Room column to place the agent in (random if not specified)\n\t        row : int, optional\n\t            Room row to place the agent in (random if not specified)\n\t        rand_dir : bool, default=True\n\t            Whether to select a random agent direction\n\t        \"\"\"\n\t        col = col if col is not None else self._rand_int(0, self.num_cols)\n\t        row = row if row is not None else self._rand_int(0, self.num_rows)\n\t        room = self.get_room(col, row)\n\t        # Find a position that is not right in front of an object\n", "        while True:\n\t            super().place_agent(agent, room.top, room.size, rand_dir, max_tries=1000)\n\t            front_cell = self.grid.get(*agent.front_pos)\n\t            if front_cell is None or front_cell.type == Type.wall:\n\t                break\n\t        return agent.state.pos\n\t    def connect_all(\n\t        self,\n\t        door_colors: list[Color] = list(Color),\n\t        max_itrs: int = 5000) -> list[Door]:\n", "        \"\"\"\n\t        Make sure that all rooms are reachable by the agent from its\n\t        starting position.\n\t        Parameters\n\t        ----------\n\t        door_colors : list[Color], default=list(Color)\n\t            Color options for creating doors\n\t        max_itrs : int, default=5000\n\t            Maximum number of iterations to try to connect all rooms\n\t        \"\"\"\n", "        added_doors = []\n\t        neighbor_fn = lambda room: [\n\t            room.neighbors[dir] for dir in Direction if room.doors[dir] is not None]\n\t        start_room = self.get_room(0, 0)\n\t        for i in range(max_itrs):\n\t            # If all rooms are reachable, stop\n\t            reachable_rooms = bfs(start_room, neighbor_fn)\n\t            if len(reachable_rooms) == self.num_rows * self.num_cols:\n\t                return added_doors\n\t            # Pick a random room and door position\n", "            col = self._rand_int(0, self.num_cols)\n\t            row = self._rand_int(0, self.num_rows)\n\t            dir = self._rand_elem(Direction)\n\t            room = self.get_room(col, row)\n\t            # If there is already a door there, skip\n\t            if not room.neighbors[dir] or room.doors[dir]:\n\t                continue\n\t            neighbor_room = room.neighbors[dir]\n\t            assert neighbor_room is not None\n\t            if room.locked or neighbor_room.locked:\n", "                continue\n\t            # Add a new door\n\t            color = self._rand_elem(door_colors)\n\t            door, _ = self.add_door(col, row, dir=dir, color=color, locked=False)\n\t            added_doors.append(door)\n\t        raise RecursionError('connect_all() failed')\n\t    def add_distractors(\n\t        self,\n\t        col: int | None = None,\n\t        row: int | None = None,\n", "        num_distractors: int = 10,\n\t        all_unique: bool = True) -> list[WorldObj]:\n\t        \"\"\"\n\t        Add random objects that can potentially distract / confuse the agent.\n\t        Parameters\n\t        ----------\n\t        col : int, optional\n\t            Room column to place the objects in (random if not specified)\n\t        row : int, optional\n\t            Room row to place the objects in (random if not specified)\n", "        num_distractors : int, default=10\n\t            Number of distractor objects to add\n\t        all_unique : bool, default=True\n\t            Whether all distractor objects should be unique with respect to (type, color)\n\t        \"\"\"\n\t        # Collect keys for existing room objects\n\t        room_objs = (obj for row in self.room_grid for room in row for obj in room.objs)\n\t        room_obj_keys = {(obj.type, obj.color) for obj in room_objs}  \n\t        # Add distractors\n\t        distractors = []\n", "        while len(distractors) < num_distractors:\n\t            color = self._rand_color()\n\t            type = self._rand_elem([Type.key, Type.ball, Type.box])\n\t            if all_unique and (type, color) in room_obj_keys:\n\t                continue\n\t            # Add the object to a random room if no room specified\n\t            col = col if col is not None else self._rand_int(0, self.num_cols)\n\t            row = row if row is not None else self._rand_int(0, self.num_rows)\n\t            distractor, _ = self.add_object(col, row, kind=type, color=color)\n\t            room_obj_keys.append((type, color))\n", "            distractors.append(distractor)\n\t        return distractors\n"]}
{"filename": "multigrid/core/__init__.py", "chunked_list": ["from .actions import Action\n\tfrom .agent import Agent, AgentState\n\tfrom .constants import *\n\tfrom .grid import Grid\n\tfrom .mission import MissionSpace\n\tfrom .world_object import Ball, Box, Door, Floor, Goal, Key, Lava, Wall, WorldObj\n"]}
{"filename": "multigrid/core/mission.py", "chunked_list": ["from __future__ import annotations\n\timport numpy as np\n\tfrom gymnasium import spaces\n\tfrom typing import Any, Callable, Iterable, Sequence\n\tclass Mission(np.ndarray):\n\t    \"\"\"\n\t    Class representing an agent mission.\n\t    \"\"\"\n\t    def __new__(cls, string: str, index: Iterable[int] | None = None):\n\t        \"\"\"\n", "        Parameters\n\t        ----------\n\t        string : str\n\t            Mission string\n\t        index : Iterable[int]\n\t            Index of mission string in :class:`MissionSpace`\n\t        \"\"\"\n\t        mission = np.array(0 if index is None else index)\n\t        mission = mission.view(cls)\n\t        mission.string = string\n", "        return mission.view(cls)\n\t    def __array_finalize__(self, mission):\n\t        if mission is None: return\n\t        self.string = getattr(mission, 'string', None)\n\t    def __str__(self) -> str:\n\t        return self.string\n\t    def __repr__(self) -> str:\n\t        return f'{self.__class__.__name__}(\"{self.string}\")'\n\t    def __eq__(self, value: object) -> bool:\n\t        return self.string == str(value)\n", "    def __hash__(self) -> int:\n\t        return hash(self.string)\n\tclass MissionSpace(spaces.MultiDiscrete):\n\t    \"\"\"\n\t    Class representing a space over agent missions.\n\t    Examples\n\t    --------\n\t    >>> observation_space = MissionSpace(\n\t    ...     mission_func=lambda color: f\"Get the {color} ball.\",\n\t    ...     ordered_placeholders=[[\"green\", \"blue\"]])\n", "    >>> observation_space.seed(123)\n\t    >>> observation_space.sample()\n\t    Mission(\"Get the blue ball.\")\n\t    >>> observation_space = MissionSpace.from_string(\"Get the ball.\")\n\t    >>> observation_space.sample()\n\t    Mission(\"Get the ball.\")\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        mission_func: Callable[..., str],\n", "        ordered_placeholders: Sequence[Sequence[str]] = [],\n\t        seed : int | np.random.Generator | None = None):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        mission_func : Callable(*args) -> str\n\t            Deterministic function that generates a mission string\n\t        ordered_placeholders : Sequence[Sequence[str]]\n\t            Sequence of argument groups, ordered by placing order in ``mission_func()``\n\t        seed : int or np.random.Generator or None\n", "            Seed for random sampling from the space\n\t        \"\"\"\n\t        self.mission_func = mission_func\n\t        self.arg_groups = ordered_placeholders\n\t        nvec = tuple(len(group) for group in self.arg_groups)\n\t        super().__init__(nvec=nvec if nvec else (1,))\n\t    def __repr__(self) -> str:\n\t        \"\"\"\n\t        Get a string representation of this space.\n\t        \"\"\"\n", "        if self.arg_groups:\n\t            return f'MissionSpace({self.mission_func.__name__}, {self.arg_groups})'\n\t        return f\"MissionSpace('{self.mission_func()}')\"\n\t    def get(self, idx: Iterable[int]) -> Mission:\n\t        \"\"\"\n\t        Get the mission string corresponding to the given index.\n\t        Parameters\n\t        ----------\n\t        idx : Iterable[int]\n\t            Index of desired argument in each argument group\n", "        \"\"\"\n\t        if self.arg_groups:\n\t            args = (self.arg_groups[axis][index] for axis, index in enumerate(idx))\n\t            return Mission(string=self.mission_func(*args), index=idx)\n\t        return Mission(string=self.mission_func())\n\t    def sample(self) -> Mission:\n\t        \"\"\"\n\t        Sample a random mission string.\n\t        \"\"\"\n\t        idx = super().sample()\n", "        return self.get(idx)\n\t    def contains(self, x: Any) -> bool:\n\t        \"\"\"\n\t        Check if an item is a valid member of this mission space.\n\t        Parameters\n\t        ----------\n\t        x : Any\n\t            Item to check\n\t        \"\"\"\n\t        for idx in np.ndindex(tuple(self.nvec)):\n", "            if self.get(idx) == x:\n\t                return True\n\t        return False\n\t    @staticmethod\n\t    def from_string(string: str) -> MissionSpace:\n\t        \"\"\"\n\t        Create a mission space containing a single mission string.\n\t        Parameters\n\t        ----------\n\t        string : str\n", "            Mission string\n\t        \"\"\"\n\t        return MissionSpace(mission_func=lambda: string)\n"]}
{"filename": "multigrid/core/grid.py", "chunked_list": ["from __future__ import annotations\n\timport numpy as np\n\tfrom collections import defaultdict\n\tfrom functools import cached_property\n\tfrom numpy.typing import NDArray as ndarray\n\tfrom typing import Any, Callable, Iterable\n\tfrom .agent import Agent\n\tfrom .constants import Type, TILE_PIXELS\n\tfrom .world_object import Wall, WorldObj\n\tfrom ..utils.rendering import (\n", "    downsample,\n\t    fill_coords,\n\t    highlight_img,\n\t    point_in_rect,\n\t)\n\tclass Grid:\n\t    \"\"\"\n\t    Class representing a grid of :class:`.WorldObj` objects.\n\t    Attributes\n\t    ----------\n", "    width : int\n\t        Width of the grid\n\t    height : int\n\t        Height of the grid\n\t    world_objects : dict[tuple[int, int], WorldObj]\n\t        Dictionary of world objects in the grid, indexed by (x, y) location\n\t    state : ndarray[int] of shape (width, height, WorldObj.dim)\n\t        Grid state, where each (x, y) entry is a world object encoding\n\t    \"\"\"\n\t    # Static cache of pre-renderer tiles\n", "    _tile_cache: dict[tuple[Any, ...], Any] = {}\n\t    def __init__(self, width: int, height: int):\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        width : int\n\t            Width of the grid\n\t        height : int\n\t            Height of the grid\n\t        \"\"\"\n", "        assert width >= 3\n\t        assert height >= 3\n\t        self.world_objects: dict[tuple[int, int], WorldObj] = {} # indexed by location\n\t        self.state: ndarray[np.int] = np.zeros((width, height, WorldObj.dim), dtype=int)\n\t        self.state[...] = WorldObj.empty()\n\t    @cached_property\n\t    def width(self) -> int:\n\t        \"\"\"\n\t        Width of the grid.\n\t        \"\"\"\n", "        return self.state.shape[0]\n\t    @cached_property\n\t    def height(self) -> int:\n\t        \"\"\"\n\t        Height of the grid.\n\t        \"\"\"\n\t        return self.state.shape[1]\n\t    @property\n\t    def grid(self) -> list[WorldObj | None]:\n\t        \"\"\"\n", "        Return a list of all world objects in the grid.\n\t        \"\"\"\n\t        return [self.get(i, j) for i in range(self.width) for j in range(self.height)]\n\t    def set(self, x: int, y: int, obj: WorldObj | None):\n\t        \"\"\"\n\t        Set a world object at the given coordinates.\n\t        Parameters\n\t        ----------\n\t        x : int\n\t            Grid x-coordinate\n", "        y : int\n\t            Grid y-coordinate\n\t        obj : WorldObj or None\n\t            Object to place\n\t        \"\"\"\n\t        # Update world object dictionary\n\t        self.world_objects[x, y] = obj\n\t        # Update grid state\n\t        if isinstance(obj, WorldObj):\n\t            self.state[x, y] = obj\n", "        elif obj is None:\n\t            self.state[x, y] = WorldObj.empty()\n\t        else:\n\t            raise TypeError(f\"cannot set grid value to {type(obj)}\")\n\t    def get(self, x: int, y: int) -> WorldObj | None:\n\t        \"\"\"\n\t        Get the world object at the given coordinates.\n\t        Parameters\n\t        ----------\n\t        x : int\n", "            Grid x-coordinate\n\t        y : int\n\t            Grid y-coordinate\n\t        \"\"\"\n\t        # Create WorldObj instance if none exists\n\t        if (x, y) not in self.world_objects:\n\t            self.world_objects[x, y] = WorldObj.from_array(self.state[x, y])\n\t        return self.world_objects[x, y]\n\t    def update(self, x: int, y: int):\n\t        \"\"\"\n", "        Update the grid state from the world object at the given coordinates.\n\t        Parameters\n\t        ----------\n\t        x : int\n\t            Grid x-coordinate\n\t        y : int\n\t            Grid y-coordinate\n\t        \"\"\"\n\t        if (x, y) in self.world_objects:\n\t            self.state[x, y] = self.world_objects[x, y]\n", "    def horz_wall(\n\t        self,\n\t        x: int, y: int,\n\t        length: int | None = None,\n\t        obj_type: Callable[[], WorldObj] = Wall):\n\t        \"\"\"\n\t        Create a horizontal wall.\n\t        Parameters\n\t        ----------\n\t        x : int\n", "            Leftmost x-coordinate of wall\n\t        y : int\n\t            Y-coordinate of wall\n\t        length : int or None\n\t            Length of wall. If None, wall extends to the right edge of the grid.\n\t        obj_type : Callable() -> WorldObj\n\t            Function that returns a WorldObj instance to use for the wall\n\t        \"\"\"\n\t        length = self.width - x if length is None else length\n\t        self.state[x:x+length, y] = obj_type()\n", "    def vert_wall(\n\t        self,\n\t        x: int, y: int,\n\t        length: int | None = None,\n\t        obj_type: Callable[[], WorldObj] = Wall):\n\t        \"\"\"\n\t        Create a vertical wall.\n\t        Parameters\n\t        ----------\n\t        x : int\n", "            X-coordinate of wall\n\t        y : int\n\t            Topmost y-coordinate of wall\n\t        length : int or None\n\t            Length of wall. If None, wall extends to the bottom edge of the grid.\n\t        obj_type : Callable() -> WorldObj\n\t            Function that returns a WorldObj instance to use for the wall\n\t        \"\"\"\n\t        length = self.height - y if length is None else length\n\t        self.state[x, y:y+length] = obj_type()\n", "    def wall_rect(self, x: int, y: int, w: int, h: int):\n\t        \"\"\"\n\t        Create a walled rectangle.\n\t        Parameters\n\t        ----------\n\t        x : int\n\t            X-coordinate of top-left corner\n\t        y : int\n\t            Y-coordinate of top-left corner\n\t        w : int\n", "            Width of rectangle\n\t        h : int\n\t            Height of rectangle\n\t        \"\"\"\n\t        self.horz_wall(x, y, w)\n\t        self.horz_wall(x, y + h - 1, w)\n\t        self.vert_wall(x, y, h)\n\t        self.vert_wall(x + w - 1, y, h)\n\t    @classmethod\n\t    def render_tile(\n", "        cls,\n\t        obj: WorldObj | None = None,\n\t        agent: Agent | None = None,\n\t        highlight: bool = False,\n\t        tile_size: int = TILE_PIXELS,\n\t        subdivs: int = 3) -> ndarray[np.uint8]:\n\t        \"\"\"\n\t        Render a tile and cache the result.\n\t        Parameters\n\t        ----------\n", "        obj : WorldObj or None\n\t            Object to render\n\t        agent : Agent or None\n\t            Agent to render\n\t        highlight : bool\n\t            Whether to highlight the tile\n\t        tile_size : int\n\t            Tile size (in pixels)\n\t        subdivs : int\n\t            Downsampling factor for supersampling / anti-aliasing\n", "        \"\"\"\n\t        # Hash map lookup key for the cache\n\t        key: tuple[Any, ...] = (highlight, tile_size)\n\t        if agent:\n\t            key += (agent.state.color, agent.state.dir)\n\t        else:\n\t            key += (None, None)\n\t        key = obj.encode() + key if obj else key\n\t        if key in cls._tile_cache:\n\t            return cls._tile_cache[key]\n", "        img = np.zeros(\n\t            shape=(tile_size * subdivs, tile_size * subdivs, 3), dtype=np.uint8)\n\t        # Draw the grid lines (top and left edges)\n\t        fill_coords(img, point_in_rect(0, 0.031, 0, 1), (100, 100, 100))\n\t        fill_coords(img, point_in_rect(0, 1, 0, 0.031), (100, 100, 100))\n\t        # Draw the object\n\t        if obj is not None:\n\t            obj.render(img)\n\t        # Draw the agent\n\t        if agent is not None and not agent.state.terminated:\n", "            agent.render(img)\n\t        # Highlight the cell if needed\n\t        if highlight:\n\t            highlight_img(img)\n\t        # Downsample the image to perform supersampling/anti-aliasing\n\t        img = downsample(img, subdivs)\n\t        # Cache the rendered tile\n\t        cls._tile_cache[key] = img\n\t        return img\n\t    def render(\n", "        self,\n\t        tile_size: int,\n\t        agents: Iterable[Agent] = (),\n\t        highlight_mask: ndarray[np.bool] | None = None) -> ndarray[np.uint8]:\n\t        \"\"\"\n\t        Render this grid at a given scale.\n\t        Parameters\n\t        ----------\n\t        tile_size: int\n\t            Tile size (in pixels)\n", "        agents: Iterable[Agent]\n\t            Agents to render\n\t        highlight_mask: ndarray\n\t            Boolean mask indicating which grid locations to highlight\n\t        \"\"\"\n\t        if highlight_mask is None:\n\t            highlight_mask = np.zeros(shape=(self.width, self.height), dtype=bool)\n\t        # Get agent locations\n\t        location_to_agent = defaultdict(\n\t            type(None),\n", "            {tuple(agent.pos): agent for agent in agents}\n\t        )\n\t        # Initialize pixel array\n\t        width_px = self.width * tile_size\n\t        height_px = self.height * tile_size\n\t        img = np.zeros(shape=(height_px, width_px, 3), dtype=np.uint8)\n\t        # Render the grid\n\t        for j in range(0, self.height):\n\t            for i in range(0, self.width):\n\t                assert highlight_mask is not None\n", "                cell = self.get(i, j)\n\t                tile_img = Grid.render_tile(\n\t                    cell,\n\t                    agent=location_to_agent[i, j],\n\t                    highlight=highlight_mask[i, j],\n\t                    tile_size=tile_size,\n\t                )\n\t                ymin = j * tile_size\n\t                ymax = (j + 1) * tile_size\n\t                xmin = i * tile_size\n", "                xmax = (i + 1) * tile_size\n\t                img[ymin:ymax, xmin:xmax, :] = tile_img\n\t        return img\n\t    def encode(self, vis_mask: ndarray[np.bool] | None = None) -> ndarray[np.int]:\n\t        \"\"\"\n\t        Produce a compact numpy encoding of the grid.\n\t        Parameters\n\t        ----------\n\t        vis_mask : ndarray[bool] of shape (width, height)\n\t            Visibility mask\n", "        \"\"\"\n\t        if vis_mask is None:\n\t            vis_mask = np.ones((self.width, self.height), dtype=bool)\n\t        encoding = self.state.copy()\n\t        encoding[~vis_mask][..., WorldObj.TYPE] = Type.unseen.to_index()\n\t        return encoding\n\t    @staticmethod\n\t    def decode(array: ndarray[np.int]) -> tuple['Grid', ndarray[np.bool]]:\n\t        \"\"\"\n\t        Decode an array grid encoding back into a `Grid` instance.\n", "        Parameters\n\t        ----------\n\t        array : ndarray[int] of shape (width, height, dim)\n\t            Grid encoding\n\t        Returns\n\t        -------\n\t        grid : Grid\n\t            Decoded `Grid` instance\n\t        vis_mask : ndarray[bool] of shape (width, height)\n\t            Visibility mask\n", "        \"\"\"\n\t        width, height, dim = array.shape\n\t        assert dim == WorldObj.dim\n\t        vis_mask = (array[..., WorldObj.TYPE] != Type.unseen.to_index())\n\t        grid = Grid(width, height)\n\t        grid.state[vis_mask] = array[vis_mask]\n\t        return grid, vis_mask\n"]}
{"filename": "multigrid/core/constants.py", "chunked_list": ["import enum\n\timport numpy as np\n\tfrom numpy.typing import NDArray as ndarray\n\tfrom ..utils.enum import IndexedEnum\n\t#: Tile size for rendering grid cell\n\tTILE_PIXELS = 32\n\tCOLORS = {\n\t    'red': np.array([255, 0, 0]),\n\t    'green': np.array([0, 255, 0]),\n\t    'blue': np.array([0, 0, 255]),\n", "    'purple': np.array([112, 39, 195]),\n\t    'yellow': np.array([255, 255, 0]),\n\t    'grey': np.array([100, 100, 100]),\n\t}\n\tDIR_TO_VEC = [\n\t    # Pointing right (positive X)\n\t    np.array((1, 0)),\n\t    # Down (positive Y)\n\t    np.array((0, 1)),\n\t    # Pointing left (negative X)\n", "    np.array((-1, 0)),\n\t    # Up (negative Y)\n\t    np.array((0, -1)),\n\t]\n\tclass Type(str, IndexedEnum):\n\t    \"\"\"\n\t    Enumeration of object types.\n\t    \"\"\"\n\t    unseen = 'unseen'\n\t    empty = 'empty'\n", "    wall = 'wall'\n\t    floor = 'floor'\n\t    door = 'door'\n\t    key = 'key'\n\t    ball = 'ball'\n\t    box = 'box'\n\t    goal = 'goal'\n\t    lava = 'lava'\n\t    agent = 'agent'\n\tclass Color(str, IndexedEnum):\n", "    \"\"\"\n\t    Enumeration of object colors.\n\t    \"\"\"\n\t    red = 'red'\n\t    green = 'green'\n\t    blue = 'blue'\n\t    purple = 'purple'\n\t    yellow = 'yellow'\n\t    grey = 'grey'\n\t    @classmethod\n", "    def add_color(cls, name: str, rgb: ndarray[np.uint8]):\n\t        \"\"\"\n\t        Add a new color to the ``Color`` enumeration.\n\t        Parameters\n\t        ----------\n\t        name : str\n\t            Name of the new color\n\t        rgb : ndarray[np.uint8] of shape (3,)\n\t            RGB value of the new color\n\t        \"\"\"\n", "        cls.add_item(name, name)\n\t        COLORS[name] = np.asarray(rgb, dtype=np.uint8)\n\t    @staticmethod\n\t    def cycle(n: int) -> tuple['Color', ...]:\n\t        \"\"\"\n\t        Return a cycle of ``n`` colors.\n\t        \"\"\"\n\t        return tuple(Color.from_index(i % len(Color)) for i in range(int(n)))\n\t    def rgb(self) -> ndarray[np.uint8]:\n\t        \"\"\"\n", "        Return the RGB value of this ``Color``.\n\t        \"\"\"\n\t        return COLORS[self]\n\tclass State(str, IndexedEnum):\n\t    \"\"\"\n\t    Enumeration of object states.\n\t    \"\"\"\n\t    open = 'open'\n\t    closed = 'closed'\n\t    locked = 'locked'\n", "class Direction(enum.IntEnum):\n\t    \"\"\"\n\t    Enumeration of agent directions.\n\t    \"\"\"\n\t    right = 0\n\t    down = 1\n\t    left = 2\n\t    up = 3\n\t    def to_vec(self) -> ndarray[np.int8]:\n\t        \"\"\"\n", "        Return the vector corresponding to this ``Direction``.\n\t        \"\"\"\n\t        return DIR_TO_VEC[self]\n\t### Minigrid Compatibility\n\tOBJECT_TO_IDX = {t: t.to_index() for t in Type}\n\tIDX_TO_OBJECT = {t.to_index(): t for t in Type}\n\tCOLOR_TO_IDX = {c: c.to_index() for c in Color}\n\tIDX_TO_COLOR = {c.to_index(): c for c in Color}\n\tSTATE_TO_IDX = {s: s.to_index() for s in State}\n\tCOLOR_NAMES = sorted(list(Color))\n"]}
