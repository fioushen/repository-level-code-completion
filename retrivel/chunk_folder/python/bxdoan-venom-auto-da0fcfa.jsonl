{"filename": "wallet/venom/__init__.py", "chunked_list": ["import time\n\timport pandas as pd\n\tfrom app.enums import GasPrice\n\tfrom selenium import webdriver\n\tfrom selenium.webdriver.common.by import By\n\tfrom selenium.webdriver.common.action_chains import ActionChains\n\timport undetected_chromedriver as uc\n\tfrom app import utils\n\tfrom app.config import get_logger, PASSWORD, CODE_HOME, WIDTH, HEADLESS, EXTENSION_ID, \\\n\t    HEIGHT, EXTENSION_META_DIR, DEFAULT_EXTENSION, DEFAULT_WAIT_CONFIRM\n", "logger = get_logger(__name__)\n\t# download the newest version of keplr extension from:\n\t# ref. https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap\n\t# or from  https://github.com/chainapsis/keplr-wallet\n\t# EXT_URL = f\"chrome-extension://ojggmchlghnjlapmfbnjholfjkiidbch/popup.html\"\n\tEXT_URL = f\"chrome-extension://{EXTENSION_ID}/home.html\"\n\tPOPUP_URL = f\"chrome-extension://{EXTENSION_ID}/popup.html\"\n\tFILE_NAME = f\"{CODE_HOME}/account.venom2.csv\"\n\tdef launchSeleniumWebdriver(with_meta=False, address : str = None) -> webdriver:\n\t    options = uc.ChromeOptions()\n", "    if with_meta:\n\t        options.add_argument(f\"--load-extension={DEFAULT_EXTENSION},{EXTENSION_META_DIR}\")\n\t    else:\n\t        options.add_argument(f\"--load-extension={DEFAULT_EXTENSION}\")\n\t    user_data_dir = utils.user_data_dir(address=address)\n\t    if user_data_dir:\n\t        logger.info(f\"User data dir: {user_data_dir}\")\n\t        options.add_argument(f\"--user-data-dir={user_data_dir}\")\n\t    options.add_argument(\"--disable-popup-blocking\")\n\t    prefs = {\n", "        \"extensions.ui.developer_mode\"    : True,\n\t        \"credentials_enable_service\"      : False,\n\t        \"profile.password_manager_enabled\": False,\n\t    }\n\t    options.add_experimental_option(\"prefs\", prefs)\n\t    # add headless option\n\t    if utils.force2bool(HEADLESS):\n\t        logger.info('headless mode')\n\t        options.add_argument('--disable-gpu')\n\t        options.add_argument(\"--no-sandbox\")\n", "        options.add_argument('--disable-gpu')\n\t        options.add_argument('--headless')\n\t    global driver\n\t    driver = uc.Chrome(options=options, version_main=115)\n\t    driver.set_window_size(WIDTH, HEIGHT)\n\t    logger.info(f\"Extension has been loaded successfully \")\n\t    time.sleep(5)\n\t    driver.refresh()\n\t    utils.get_ip()\n\t    return driver\n", "def walletSetup(recoveryPhrase: 'str', password: str) -> None:\n\t    logger.info(f\"walletSetup with recoveryPhrase: {recoveryPhrase}\")\n\t    # switch_to_window(0)\n\t    # time.sleep(8)\n\t    driver.execute_script(\"window.open('');\")\n\t    time.sleep(5)  # wait for the new window to open\n\t    switch_to_window(0)\n\t    time.sleep(3)\n\t    if len(driver.window_handles) > 1:\n\t        switch_to_window(-1)\n", "    driver.get(f\"chrome://extensions/?id={EXTENSION_ID}\")\n\t    time.sleep(5)\n\t    ext_ma = driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n\t    toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n\t    update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n\t    update_button.click()\n\t    time.sleep(8)\n\t    if len(driver.window_handles) == 3:\n\t        switch_to_window(0)\n\t        time.sleep(2)\n", "        driver.close()\n\t        time.sleep(2)\n\t    elif len(driver.window_handles) == 1:\n\t        driver.execute_script(\"window.open('');\")\n\t        time.sleep(3)\n\t        switch_to_window(-1)\n\t    driver.get(EXT_URL)\n\t    time.sleep(5)\n\t    if len(driver.window_handles) == 1:\n\t        switch_to_window(0)\n", "    try_click(\"//div[contains(text(),'Sign in with seed phrase')]\", 2)\n\t    # fill in recovery seed phrase\n\t    inputs = try_finds('//input')\n\t    list_of_recovery_phrase = recoveryPhrase.split(\" \")\n\t    for i, x in enumerate(list_of_recovery_phrase):\n\t        phrase = list_of_recovery_phrase[i]\n\t        inputs[i].send_keys(phrase)\n\t    try_click(\"//div[contains(text(),'Confirm')]\", 2)\n\t    # fill in password\n\t    inputs = try_finds('//input')\n", "    inputs[0].send_keys(password)\n\t    inputs[1].send_keys(password)\n\t    time.sleep(1)\n\t    try_click(\"//div[contains(text(),'Sign in the')]\", 10)\n\t    switch_to_window(0)\n\t    time.sleep(7)\n\tdef try_find(xpath=\"\", by=By.XPATH, print_error=True):\n\t    try:\n\t        return driver.find_element(by, xpath)\n\t    except Exception as _e:\n", "        if print_error:\n\t            logger.error(f\"Find {xpath} {by} error: {str(_e)}\")\n\t        return None\n\tdef try_finds(xpath=\"\", by=By.XPATH, print_error=True):\n\t    try:\n\t        return driver.find_elements(by, xpath)\n\t    except Exception as _e:\n\t        if print_error:\n\t            logger.error(f\"Finds {xpath} {by} error: {str(_e)}\")\n\t        return []\n", "def try_send_keys(xpath=\"\", msg=\"\", time_to_wait=5, by=By.XPATH, print_error=True) -> None:\n\t    try:\n\t        driver.find_element(by, xpath).send_keys(msg)\n\t        time.sleep(time_to_wait)\n\t    except Exception as _e:\n\t        if print_error:\n\t            logger.error(f\"Send key {xpath} {msg} {by} error: {str(_e)}\")\n\tdef open_new_tab(url, time_to_wait=5):\n\t    driver.execute_script(\"window.open('');\")\n\t    switch_to_window(-1)\n", "    driver.get(url)\n\t    time.sleep(time_to_wait)\n\tdef metamaskSetup(recoveryPhrase : 'str', password : str) -> None:\n\t    driver.open_new_tab(f\"{EXT_URL}#onboarding/welcome\")\n\t    time.sleep(4)\n\t    window_before = driver.window_handles\n\t    driver.switch_to.window(window_before[-1])\n\t    click('//button[text()=\"Import an existing wallet\"]')\n\t    click('//button[text()=\"No thanks\"]')\n\t    # fill in recovery seed phrase\n", "    inputs = driver.find_elements(By.XPATH, '//input')\n\t    list_of_recovery_phrase = recoveryPhrase.split(\" \")\n\t    for i, x in enumerate(list_of_recovery_phrase):\n\t        if i == 0:\n\t            locate_input = i\n\t        else:\n\t            locate_input = i * 2\n\t        phrase = list_of_recovery_phrase[i]\n\t        inputs[locate_input].send_keys(phrase)\n\t    click('//button[text()=\"Confirm Secret Recovery Phrase\"]')\n", "    # fill in password\n\t    inputs = driver.find_elements(By.XPATH, '//input')\n\t    inputs[0].send_keys(password)\n\t    inputs[1].send_keys(password)\n\t    click('.create-password__form__terms-label', 1, By.CSS_SELECTOR)\n\t    click('//button[text()=\"Import my wallet\"]')\n\t    click('//button[text()=\"Got it!\"]')\n\t    click('//button[text()=\"Next\"]')\n\t    click('//button[text()=\"Done\"]')\n\t    logger.info(\"Wallet has been imported successfully\")\n", "    # Close the popup\n\t    click('//*[@id=\"popover-content\"]/div/div/section/div[2]/div/button')\n\t    driver.switch_to.window(driver.window_handles[0])\n\tdef try_click(xpath, time_to_sleep=None, by=By.XPATH, wd=None, print_error=True) -> None:\n\t    try:\n\t        click(xpath, time_to_sleep, by, wd)\n\t    except Exception as _e:\n\t        if print_error:\n\t            logger.error(f\"Click {xpath} {by} error: {str(_e)}\")\n\tdef try_get_text(xpath, by=By.XPATH, print_error=True) -> str:\n", "    try:\n\t        return try_find(xpath, by).text\n\t    except Exception as _e:\n\t        if print_error:\n\t            logger.error(f\"Get text {xpath} {by} error: {str(_e)}\")\n\t        return ''\n\tdef click(xpath, time_to_sleep=None, by=By.XPATH, wd=None) -> None:\n\t    if time_to_sleep is None:\n\t        time_to_sleep = 1\n\t    if wd is None:\n", "        wd = driver\n\t    # Click once.\n\t    # If click more times, try another method.\n\t    button = wd.find_element(by, xpath)\n\t    try:\n\t        logger.info(f'click on \"{button.text}\"')\n\t    except:\n\t        pass\n\t    clicking = ActionChains(wd).click(button)\n\t    clicking.perform()\n", "    time.sleep(time_to_sleep)\n\tdef insert_text(xpath, text) -> None:\n\t    input_text = driver.find_element(By.XPATH, xpath)\n\t    input_text.send_keys(text)\n\t    time.sleep(0.5)\n\tdef send(receiver : str, amount : str) -> None:\n\t    open_new_tab(POPUP_URL)\n\t    click(\"//div[contains(text(),'Send')]\", 4)\n\t    switch_to_window(-1)\n\t    inputs = try_finds(\"//input\")\n", "    inputs[1].send_keys(receiver)\n\t    inputs[2].send_keys(amount)\n\t    if len(inputs) == 4:\n\t        # if have password field\n\t        inputs[3].send_keys(PASSWORD)\n\t    time.sleep(5)\n\t    click(\"//div[contains(text(),'Confirm transaction')]\", 15 )\n\t    switch_to_window(-1)\n\t    try_click(\"//div[contains(text(),'Ok')]\", 10)\n\t    logger.info(f\"Send {amount} to {receiver} success\")\n", "def confirm(password : str = PASSWORD, time_to_sleep : int = DEFAULT_WAIT_CONFIRM) -> bool:\n\t    switch_to_window(-1)\n\t    inputs = try_finds(\"//input\")\n\t    if inputs:\n\t        inputs[0].send_keys(password)\n\t        click(\"//span[contains(text(),'Remember')]\", 2)\n\t    click(\"//div[contains(text(),'Confirm tran')]\", time_to_sleep)\n\t    return True\n\tdef sign(tts : int = DEFAULT_WAIT_CONFIRM) -> bool:\n\t    switch_to_window(-1)\n", "    inputs = try_finds(\"//input\")\n\t    if len(inputs) > 0:\n\t        inputs[0].send_keys(PASSWORD)\n\t    switch_to_window(-1)\n\t    click(\"//button[@type='submit']\", tts)\n\t    return True\n\tdef process_acc(idx):\n\t    seed_phrase = addr = ''\n\t    try:\n\t        # driver.get(f\"chrome://extensions/?id={EXTENSION_ID}\")\n", "        # time.sleep(5)\n\t        #\n\t        # ext_ma = driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n\t        # toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n\t        # update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n\t        # update_button.click()\n\t        # time.sleep(5)\n\t        # driver.get(EXT_URL)\n\t        # time.sleep(8)\n\t        try_click(\"//div[contains(text(),'Create a')]\", 2)\n", "        try_click('/html/body/div/div[1]/div/div[2]/div/div/div[2]/label/span', 2)\n\t        try_click(\"//div[contains(text(),'Submit')]\", 2)\n\t        list_li = try_finds(\"//li\")\n\t        mnemonic = [li.text for li in list_li if li.text != '']\n\t        seed_phrase = ' '.join(mnemonic)\n\t        logger.info(f\"seed phrase: {seed_phrase}\")\n\t        try_click(\"//div[contains(text(),'I wrote it')]\", 2)\n\t        locate_m = try_finds(\"//span\")\n\t        list_locate = [int(li.text.split('.')[0]) for li in locate_m if li.text != '']\n\t        inputs = try_finds(\"//input\")\n", "        for i, x in enumerate(list_locate):\n\t            inputs[i].send_keys(mnemonic[int(x)-1])\n\t        time.sleep(2)\n\t        try_click(\"//div[contains(text(),'Confirm')]\", 2)\n\t        passes = try_finds(\"//input\")\n\t        passes[0].send_keys(PASSWORD)\n\t        passes[1].send_keys(PASSWORD)\n\t        try_click(\"//div[contains(text(),'Create the wallet')]\", 2)\n\t        switch_to_window(0)\n\t        driver.get(f\"{POPUP_URL}\")\n", "        time.sleep(3)\n\t        try_click(\"//span[contains(text(),'VENOM')]\", 2)\n\t        try_click(\"//div[contains(text(),'Receive')]\", 4)\n\t        addr = try_get_text(\"//*[@id='root']/div[2]/div[2]/div[2]/div/div[3]/div[2]/div[2]/div/div[3]/div/div[1]/div[2]/div/span\")\n\t    except Exception as _e:\n\t        logger.error(_e)\n\t    return seed_phrase, addr\n\tdef get_address():\n\t    addr = ''\n\t    try:\n", "        # get address\n\t        driver.open_new_tab(f\"{EXT_URL}\")\n\t        time.sleep(4)\n\t        switch_to_window(1)\n\t        click(f'//*[@id=\"app\"]/div/div[1]/div[2]/div/div[2]/div/div[1]', 2)\n\t        addr = driver.find_element(By.CLASS_NAME, 'address-tooltip').text\n\t        driver.close()\n\t        switch_to_window(0)\n\t        time.sleep(5)\n\t    except:\n", "        pass\n\t    return addr\n\tdef open_window():\n\t    driver.execute_script(\"window.open('');\")\n\t    time.sleep(3)\n\tdef switch_to_window(window_number : int = 0) -> None:\n\t    # Switch to another window, start from 0.\n\t    wh = driver.window_handles\n\t    try:\n\t        driver.switch_to.window(wh[window_number])\n", "    except:\n\t        pass\n\t    logger.info(f'window handles: {len(wh)} and switch {str(window_number)}')\n\tdef approve(gas : str = GasPrice.Average) -> None:\n\t    time.sleep(3)\n\t    switch_to_window(-1)\n\t    if gas in GasPrice.all():\n\t        try_click(f\"//div[text()='{gas}']\")\n\t    try_click(\"//button[contains(text(),'Approve')]\", 5)\n\tdef reject():\n", "    time.sleep(4)\n\t    try:\n\t        switch_to_window(-1)\n\t        click(\"//button[contains(text(),'Reject')]\", 5)\n\t    except:\n\t        pass\n\tdef create_account(index):\n\t    mns = pd.DataFrame(columns=[\"Name\", \"Address\", \"Private Key\", \"Seed Phrase\",\n\t                                \"Password\", \"Status\"])\n\t    switch_to_window(0)\n", "    seed_phrase, addr = process_acc(index)\n\t    if seed_phrase:\n\t        row = [f\"\", addr, \"\", seed_phrase, PASSWORD, '']\n\t        mns.loc[len(mns)] = row\n\t        utils.add_to_csv(FILE_NAME, mns.loc[0])\n\t        logger.info(f\"Create account success with address: {addr} and seed phrase: {seed_phrase}\")\n\t    else:\n\t        logger.info(f\"Create account fail\")\n\tif __name__ == '__main__':\n\t    for i in range(0, 150):\n", "        driver = launchSeleniumWebdriver()\n\t        try:\n\t            create_account(index=i)\n\t        except Exception as e:\n\t            logger.info(e)\n\t        driver.quit()\n"]}
{"filename": "app/base.py", "chunked_list": ["import shutil\n\timport time\n\tfrom datetime import datetime\n\tfrom selenium.webdriver.common.by import By\n\tfrom wallet import venom\n\tfrom app import utils\n\tfrom app.account import AccountLoader\n\tfrom app.config import ACC_VENOM_PATH, HOME_TMP, ACC_FILE_NAME, CODE_HOME, get_logger, CHANGE_NETWORK, LIST_FOLLOW, \\\n\t    EXTENSION_ID\n\tfrom app.enums import COLUMN_MAPPING, AccountStatus, FOLLOW_XP\n", "from app.chatgpt import tweet\n\tlogger = get_logger(__name__)\n\tclass BaseAuto(object):\n\t    def __init__(self, **kwargs):\n\t        self.list_account = []\n\t        self.file_report = f\"{HOME_TMP}/report_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n\t        self.use_uc = kwargs.get('use_uc', True)\n\t        self.driver = None\n\t        self.auto = None\n\t        self.params = kwargs.get('params', {})\n", "        self.list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t        self.file_report = f\"{HOME_TMP}/report_{ACC_FILE_NAME}_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n\t    def save_report(self, data: dict):\n\t        list_index = list(COLUMN_MAPPING.values())\n\t        format_data = []\n\t        for k in list_index:\n\t            value = data.get(k) if data.get(k) else ''\n\t            format_data.append(value)\n\t        utils.add_to_csv(self.file_report, format_data)\n\t        logger.info(f\"Save report: {format_data}\")\n", "    def prepare_file_report(self):\n\t        file_log_latest = utils.file_latest_in_path()\n\t        if file_log_latest:\n\t            index, row = utils.find_latest_row_index_log(file_log_latest)\n\t            logger.info(f\"Index: {index} - total account: {len(self.list_account)}\")\n\t            if index < len(self.list_account):\n\t                # run not finish, use old file\n\t                self.file_report = file_log_latest\n\t                return index\n\t        # prepare file report\n", "        shutil.copyfile(f\"{CODE_HOME}/account.sample.csv\", self.file_report)\n\t        return 0\n\t    def process_all(self, method='deposit', **kwargs):\n\t        method = getattr(self, method)\n\t        if not method:\n\t            raise Exception(f\"Method {method} not found\")\n\t        # prepare list account\n\t        index = self.prepare_file_report()\n\t        list_account = self.list_account\n\t        if index > 0:\n", "            # continue from index in existing file report\n\t            list_account = self.list_account[index:]\n\t        create_driver = True\n\t        for idx, account in enumerate(list_account):\n\t            if create_driver:\n\t                self._try_start_driver(account)\n\t            real_idx = idx + index\n\t            logger.info(f\"Request for account: {real_idx} - {account['address']}\")\n\t            if account.get('status') != AccountStatus.Inactive:\n\t                # if account is active, run method\n", "                try:\n\t                    kwargs.update({\n\t                        'account': account,\n\t                    })\n\t                    self.params.update({\n\t                        'account_index': real_idx,\n\t                    })\n\t                    method(**kwargs)\n\t                    account['status'] = AccountStatus.Inactive\n\t                except Exception as e:\n", "                    logger.error(e)\n\t                self.driver.quit()\n\t                create_driver = True\n\t            else:\n\t                logger.info(f\"Account {account['address']} is inactive\")\n\t                create_driver = False\n\t            self.save_report(account)\n\t            if create_driver:\n\t                self._change_proxy()\n\t        logger.info(f'Request Success for account len: {len(list_account)}')\n", "        logger.info(f\"file report: {self.file_report}\")\n\t    def _try_start_driver(self, account):\n\t        while True:\n\t            try:\n\t                self.driver = self.auto.launchSeleniumWebdriver(address=account['address'])\n\t                if self.driver:\n\t                    break\n\t            except Exception as e:\n\t                logger.error(f\"An error occurred: {e}, retrying in 10 seconds.\")\n\t                time.sleep(10)\n", "    def _change_proxy(self):\n\t        if utils.force2bool(CHANGE_NETWORK):\n\t            # utils.change_network()\n\t            utils.reboot_reconnect()\n\t    def _tweet(self) -> None:\n\t        self.auto.switch_to_window(0)\n\t        self.auto.open_new_tab(\"https://twitter.com/compose/tweet\")\n\t        time.sleep(3)\n\t        self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n\t        self.auto.try_click(\"//div[@aria-label='Tweet text']\")\n", "        message = tweet().replace('\"', '')\n\t        self.auto.try_send_keys(\"//div[@aria-label='Tweet text']\", f\"{message}\\n\")\n\t        self.auto.try_click(\"//span[text()='Tweet']\", 10)\n\t        self.auto.try_click(\"//span[contains(text(),'Got it')]\", 5)\n\t        logger.info(f\"Tweet: {message}\")\n\t        self.driver.close()\n\t    def _follow_list(self, account: dict = None, list_acc = None) -> None:\n\t        account_index = self.params.get('account_index')\n\t        # list_fl_index = \"12,13,14,15\".split(',')\n\t        # list_fl_index = [int(x) for x in list_fl_index]\n", "        # if LIST_FOLLOW:\n\t        #     list_fl = LIST_FOLLOW.split(',')\n\t        #     list_fl = [int(x) for x in list_fl]\n\t        # else:\n\t        #     list_fl = [x for x in range(account_index + 1, account_index + 4)]\n\t        if account_index < 10:\n\t            list_fl = \"46,47,48,49\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 20:\n\t            list_fl = \"50,51,52,53\".split(',')\n", "            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 30:\n\t            list_fl = \"53,54,55,56\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 40:\n\t            list_fl = \"57,58,59,60\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 50:\n\t            list_fl = \"61,62,63,64\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n", "        elif account_index < 60:\n\t            list_fl = \"65,66,67,68\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 70:\n\t            list_fl = \"69,70,71,72\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 80:\n\t            list_fl = \"73,74,75,76\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 90:\n", "            list_fl = \"77,78,79,80\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 100:\n\t            list_fl = \"81,82,83,84\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 110:\n\t            list_fl = \"85,86,87,88\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 120:\n\t            list_fl = \"89,90,91,92\".split(',')\n", "            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 130:\n\t            list_fl = \"93,94,95,96\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 140:\n\t            list_fl = \"97,98,99,100\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n\t        elif account_index < 150:\n\t            list_fl = \"101,102,103,104\".split(',')\n\t            list_fl = [int(x) for x in list_fl]\n", "        # else:\n\t        #     list_fl = [x for x in range(account_index - 5, account_index - 1)]\n\t        logger.info(f\"Follow list: {list_fl=}\")\n\t        for fli in list_fl:\n\t            self._follow(account=account, index_user=fli, list_acc=list_acc)\n\t    def _follow(\n\t            self,\n\t            account: dict = None,\n\t            index_user : int = None,\n\t            user_name : str = None,\n", "            list_acc : list = None,\n\t    ) -> None:\n\t        if index_user is None and not user_name:\n\t            # if not provide index_user and user_name, skip it\n\t            return\n\t        if not list_acc:\n\t            # if not provide list account, use default self.list_account\n\t            list_acc = self.list_account\n\t        if index_user is not None:\n\t            user_name = list_acc[index_user]['tw_acc']\n", "        self.auto.switch_to_window(0)\n\t        if user_name != account['tw_acc']:\n\t            url = f\"https://twitter.com/intent/user?screen_name={user_name}\"\n\t            self.auto.open_new_tab(url)\n\t            account_suspended = self.auto.try_find(\"//span[contains(text(),'Account suspended')]\", print_error=False)\n\t            if account_suspended:\n\t                logger.error(f\"Account {user_name} is suspended\")\n\t            else:\n\t                try:\n\t                    self.auto.click(FOLLOW_XP, 10)\n", "                except Exception as e:\n\t                    logger.error(f\"Error for {user_name}: {e}\")\n\t            num_following = self.auto.try_get_text('//*[@id=\"react-root\"]/div/div/div[2]/main/div/div/div/div/div/div[3]/div/div/div/div/div[4]/div[2]/a/span[1]/span', print_error=False)\n\t            logger.info(f\"Number Following: {num_following}\")\n\t            self.driver.close()\n\t        logger.info(f\"Follow: {user_name}\")\n\t    def _retweet_faucet(self, account, tweet_id: str = '1663134038713069570') -> None:\n\t        self.auto.switch_to_window(0)\n\t        url = f\"https://twitter.com/intent/tweet?text={account['name']}%20https://twitter.com/\" \\\n\t              f\"Chaineye_tools/status/{tweet_id}\"\n", "        logger.info(f\"Retweet: {url}\")\n\t        self.auto.open_new_tab(url)\n\t        time.sleep(4)\n\t        self.auto.try_click(\"//span[text()='Tweet']\", 6)\n\t        self.driver.close()\n\t    def _get_2fa(self, account: dict):\n\t        if account.get('tw_fa'):\n\t            return\n\t        self.auto.switch_to_window(0)\n\t        url_2fa = \"https://twitter.com/i/flow/two-factor-auth-app-enrollment\"\n", "        self.auto.open_new_tab(url_2fa)\n\t        time.sleep(7)\n\t        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 5)\n\t        self.auto.try_click(\"//span[contains(text(), 't scan the QR code')]\", 3)\n\t        text_fa = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div[1]/div/div[2]/span').text\n\t        logger.info(f\"2fa text: {text_fa}\")\n\t        account['tw_fa'] = text_fa\n\t        self.auto.try_click(\"//span[contains(text(), 'Next')]\", 5)\n\t        otp = utils.totp(text_fa)\n\t        otp_input = self.auto.try_find('//input')\n", "        otp_input.send_keys(otp)\n\t        self.auto.try_click(\"//span[contains(text(), 'Confirm')]\", 5)\n\t        text_b = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div/div/div/div/div[2]/div[1]/div[2]/span/span/span').text\n\t        text_fa_backup = utils.get_fa_backup(text_b)\n\t        logger.info(f\"2fa backup text: {text_fa_backup}\")\n\t        account['tw_fab'] = text_fa_backup\n\t        self.auto.try_click(\"//span[contains(text(), 'Done')]\", 5)\n\t        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 7)\n\t        self.auto.try_click(\"//span[contains(text(), 'Got it')]\", 7)\n\t        logger.info(\"Get 2fa successfully\")\n", "    def login_twitter(self, acc: dict) -> None:\n\t        url = \"https://twitter.com/i/flow/login\"\n\t        self.auto.open_new_tab(url)\n\t        time.sleep(9)\n\t        # fill in email\n\t        twemail_or_twacc = self.auto.try_find('//input')\n\t        if acc['tw_fa']:\n\t            logger.info(f\"Login with 2FA {acc['tw_acc']}\")\n\t            twemail_or_twacc.send_keys(acc['tw_acc'])\n\t            self.auto.try_click('//span[text()=\"Next\"]', 6)\n", "            twpass_or_username = self.auto.try_finds('//input')\n\t            twpass_or_username[1].send_keys(acc['tw_pass'])\n\t            self.auto.try_click('//span[text()=\"Log in\"]', 6)\n\t            self.auto.try_click('//span[text()=\"Next\"]', 6)\n\t            input_totp = self.auto.try_find('//input')\n\t            input_totp.send_keys(utils.totp(acc['tw_fa']))\n\t            self.auto.try_click(\"//span[contains(text(), 'Next')]\", 10)\n\t            input_submit = self.auto.try_find(\"//input[@type='submit']\")\n\t            if input_submit:\n\t                input_submit.click()\n", "                time.sleep(10)\n\t                self.auto.try_click(\"//input[@type='submit']\", 8)\n\t            self.auto.try_click(\"//span[contains(text(), 'Skip for')]\", 3)\n\t        else:\n\t            logger.info('Login with password')\n\t            twemail_or_twacc.send_keys(acc['tw_email'])\n\t            self.auto.click('//span[text()=\"Next\"]', 7)\n\t            twpass_or_username = self.auto.try_finds('//input')\n\t            if len(twpass_or_username) == 1:\n\t                if \"gmail\" in acc['tw_email']:\n", "                    username = acc['tw_email'].split('@')[0]\n\t                else:\n\t                    # email with last 3 char of address\n\t                    username = f\"{acc['tw_email'].split('@')[0]}{acc['address'][:-3]}\"\n\t                twpass_or_username[0].send_keys(username)\n\t                self.auto.click('//span[text()=\"Next\"]', 3)\n\t                twpass = self.auto.try_finds('//input')\n\t                twpass[1].send_keys(acc['tw_pass'])\n\t                self.auto.click('//span[text()=\"Log in\"]', 3)\n\t            else:\n", "                twpass_or_username[1].send_keys(acc['tw_pass'])\n\t                self.auto.try_click('//span[text()=\"Log in\"]', 3)\n\t                self.auto.try_click('//span[text()=\"Next\"]', 3)\n\t        time.sleep(3)\n\t        logger.info(f\"Login twitter for account: {acc['tw_email']}\")\n\t    def login_discord(self, account: dict) -> None:\n\t        token = account['dis_token']\n\t        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n\t        script = \"\"\"\n\t                function login(token) {\n", "                setInterval(() => {\n\t                document.body.appendChild(document.createElement `iframe`).contentWindow.localStorage.token = `\"${token}\"`\n\t                }, 50);\n\t                setTimeout(() => {\n\t                location.reload();\n\t                }, 2500);\n\t                }   \n\t                \"\"\"\n\t        if token:\n\t            logger.info('Login with token')\n", "            self.driver.execute_script(script + f'\\nlogin(\"{token}\")')\n\t        else:\n\t            logger.info('Login with password')\n\t            twemail = self.auto.try_finds('//input')\n\t            twemail[0].send_keys(account['dis_email'])\n\t            twemail[1].send_keys(account['dis_pass'])\n\t            self.auto.click('//div[text()=\"Log In\"]', 8)\n\t        time.sleep(10)\n\t        logger.info(f\"Login discord for account: {account['dis_email']}\")\n\t    def _check_logged_in_twitter(self):\n", "        self.auto.open_new_tab(\"https://twitter.com/home\")\n\t        time.sleep(8)\n\t        logged_in_twitter = False\n\t        if not self.auto.try_find(\"//span[contains(text(),'Sign in to Twitter')]\"):\n\t            logged_in_twitter = True\n\t        self.driver.close()\n\t        self.auto.switch_to_window(0)\n\t        logger.info(f\"Logged in Twitter: {logged_in_twitter}\")\n\t        return logged_in_twitter\n\t    def _check_logged_in_discord(self):\n", "        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n\t        time.sleep(8)\n\t        logged_in_discord = False\n\t        if not self.auto.try_find(\"//div[contains(text(),'re so excited to see you again')]\"):\n\t            logged_in_discord = True\n\t        self.driver.close()\n\t        self.auto.switch_to_window(0)\n\t        logger.info(f\"Logged in discord: {logged_in_discord}\")\n\t        return logged_in_discord\n\t    def _daily_faucet(self, account: dict = None):\n", "        try:\n\t            url = f\"https://venom.network/faucet\"\n\t            self.auto.switch_to_window(-1)\n\t            self.driver.get(url)\n\t            time.sleep(5)\n\t            answer = self.params.get('answer')\n\t            self.auto.try_click(\"//a[contains(text(), 'Start')]\", 3)\n\t            self.auto.try_click(f\"//span[contains(text(), '{answer}')]\", 3)\n\t            self.auto.try_click(\"//button[contains(text(), 'Send')]\", 7)\n\t            self.auto.try_click(\"//span[contains(text(), 'Claim')]\", 3)\n", "            self.auto.sign()\n\t            time.sleep(15)\n\t            logger.info(f\"Faucet claim successfull for {account['address']}\")\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def swap(self, account: dict = None):\n\t        pass\n\t    def addLiquidity(self, account: dict = None):\n\t        pass\n\t    def removeLiquidity(self, account: dict = None):\n", "        pass\n\t    def stake(self, account: dict = None):\n\t        pass\n\t    def unstake(self, account: dict = None):\n\t        pass\n\t    def harvest(self, account: dict = None):\n\t        pass\n\t    def claim(self, account: dict = None):\n\t        pass\n\t    def farm(self, account: dict = None):\n", "        pass\n\tclass VenomAuto(BaseAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.use_uc = kwargs.get('use_uc', True)\n\t        self.auto = venom\n\t    def _daily_faucet(self, account: dict = None):\n\t        try:\n\t            url = f\"https://venom.network/faucet\"\n\t            self.auto.switch_to_window(-1)\n", "            self.driver.get(url)\n\t            time.sleep(10)\n\t            answer = self.params.get('answer')\n\t            self.auto.try_click(\"//a[contains(text(), 'Start')]\", 3)\n\t            self.auto.try_click(f\"//span[contains(text(), '{answer}')]\", 3)\n\t            self.auto.try_click(\"//button[contains(text(), 'Send')]\", 7)\n\t            self.auto.try_click(\"//span[contains(text(), 'Claim')]\", 3)\n\t            self.auto.sign()\n\t            logger.info(f\"Faucet claim successfull for {account['address']}\")\n\t        except Exception as e:\n", "            logger.error(e)\n\t    def _connect_wallet(self):\n\t        self.driver.refresh()\n\t        time.sleep(7)\n\t        connect_wallet = self.auto.try_find(\"//h1[contains(text(),'Complete three tasks and')]\")\n\t        if connect_wallet:\n\t            self.auto.click('//*[@id=\"root\"]/div[2]/div[1]/div[2]/div[2]/span', 2)\n\t            self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n", "    def _check_logged_in_wallet(self):\n\t        self.auto.open_new_tab(venom.POPUP_URL)\n\t        logged_in_wallet = False\n\t        if self.auto.try_find(\"//p[contains(text(),'Account 1')]\"):\n\t            logged_in_wallet = True\n\t        self.driver.close()\n\t        self.auto.switch_to_window(0)\n\t        logger.info(f\"Logged in wallet: {logged_in_wallet}\")\n\t        return logged_in_wallet\n\t    def _reload_extension(self):\n", "        # # setup metamask with seed phrase and password\n\t        self.auto.open_new_tab(f\"chrome://extensions/?id={EXTENSION_ID}\")\n\t        time.sleep(5)\n\t        ext_ma = self.driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n\t        toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n\t        update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n\t        update_button.click()\n\t        time.sleep(5)\n\t        self.driver.close()\n"]}
{"filename": "app/venom_auto.py", "chunked_list": ["import time\n\tfrom selenium.webdriver.common.by import By\n\tfrom app import utils\n\tfrom wallet import venom\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.enums import FOLLOW_XP\n\tfrom app.config import get_logger, ACC_VENOM_PATH, DAILY_ANSWER\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n", "    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n\t    \"test\": {\n\t        \"twitter\": {\n\t            \"venom_network\": \"https://twitter.com/Venom_network_\",\n\t            \"venom_foundation\": \"https://twitter.com/VenomFoundation\",\n\t        },\n\t        \"task\": {\n\t            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n", "            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n\t            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n\t            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n\t            \"venom_pad\": \"https://venom.network/tasks/venom-pad\",\n\t            \"oasis_gallery\": \"https://venom.network/tasks/oasis-gallery\",\n\t            \"venom_bridge\": \"https://venom.network/tasks/venom-bridge\",\n\t            \"snipa\": \"https://venom.network/tasks/snipa-finance\",\n\t        },\n\t        \"app\": {\n\t            \"venom_stake\": \"https://testnet.venomstake.com/\",\n", "        }\n\t    },\n\t}\n\tVENOM_ADDRESS = \"0:077873f1453fa67b0f1ce77f1e806675acd19c4694b9738be61fd406618f2f7a\"\n\tclass Venom(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n\t    def incentive(self, account: dict = None):\n", "        if not self.driver:\n\t            self._try_start_driver(account)\n\t        url = f\"https://venom.network/tasks\"\n\t        self.driver.get(url)\n\t        time.sleep(2)\n\t        # # setup metamask with seed phrase and password\n\t        # self.auto.switch_to_window(0)\n\t        # logged_in_wallet = self._check_logged_in_wallet()\n\t        # if not logged_in_wallet:\n\t        #     self.auto.walletSetup(account['seed_phrase'], account['password'])\n", "        #\n\t        # # click on the Connect Wallet button\n\t        # self.auto.switch_to_window(0)\n\t        # self._connect_wallet()\n\t        # login twitter and discord\n\t        self.auto.switch_to_window(0)\n\t        logged_in_twitter = self._check_logged_in_twitter()\n\t        if not logged_in_twitter:\n\t            self.login_twitter(account)\n\t            self.driver.close()\n", "        # self._tweet()\n\t        self._follow_list(account)\n\t        self._follow(account=account, user_name=\"Chaineye_tools\")\n\t        self._retweet_faucet(account)\n\t        # if account['dis_token']:\n\t        #     self.auto.switch_to_window(0)\n\t        #     logged_in_discord = self._check_logged_in_discord()\n\t        #     if not logged_in_discord:\n\t        #         self.login_discord(account)\n\t        #         self.driver.close()\n", "        # main incentive\n\t        # self.auto.switch_to_window(0)\n\t        # self._venom_pad(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._venom_stake(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._foundation(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._venom_wallet(account)\n\t        # self.auto.switch_to_window(0)\n", "        # self._web3_world(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._bridge(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._oasis_gallery(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._daily_faucet(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self._snipa_finance(account)\n\t        # self.auto.switch_to_window(0)\n", "        # self._snipa(account)\n\t        # self.auto.switch_to_window(0)\n\t        # self.driver.get(url)\n\t        # time.sleep(5)\n\t        # claim = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n\t        # if claim:\n\t        #     claim.click()\n\t        #     time.sleep(4)\n\t        #     self.auto.sign()\n\t        # self.auto.switch_to_window(0)\n", "        # self._check_incentive(account)\n\t        logger.info(f\"Incentive success\")\n\t    def _check_incentive(self, account : dict = None):\n\t        url = f\"https://venom.network/tasks\"\n\t        self.driver.get(url)\n\t        time.sleep(12)\n\t        element = self.auto.try_find('//*[@id=\"ecosystem\"]/div[1]/a/b')\n\t        new_nfts = element.text if element else 0\n\t        if utils.force_int(new_nfts) != 7:\n\t            logger.info(new_nfts)\n", "        description = f\"{new_nfts} NFTs\"\n\t        logger.info(description)\n\t        account['description'] = description\n\t    def balance(self, account):\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(venom.POPUP_URL)\n\t        time.sleep(2)\n", "        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n\t        if balance:\n\t            balance = balance.text.split(\".\")[0]\n\t            logger.info(f\"Balance: {balance}\")\n\t            account['balance'] = balance\n\t        logger.info(f\"process account success\")\n\t    def send_wallet(self, account):\n\t        amount = self.params.get('amount', 1)\n\t        receiver = VENOM_ADDRESS\n\t        # setup metamask with seed phrase and password\n", "        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(venom.POPUP_URL)\n\t        time.sleep(3)\n\t        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n\t        if balance:\n\t            balance = balance.text.split(\".\")[0]\n\t            logger.info(f\"Balance: {balance}\")\n\t            account['balance'] = balance\n", "        self._get_address(account)\n\t        self.auto.switch_to_window(0)\n\t        self.auto.send(receiver=receiver, amount=amount)\n\t        self.auto.switch_to_window(0)\n\t        time.sleep(1)\n\t        logger.info(f\"send ${amount} VENOM to {receiver} success\")\n\t    def _get_address(self, account):\n\t        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div', 2)\n\t        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div/div/ul/li[2]/button', 7)\n\t        self.auto.switch_to_window(-1)\n", "        address = self.auto.try_find('//*[@id=\"root\"]/div/main/div/div[2]/div[2]/div[2]/div/div[1]/div[2]/div[2]/div/div/div/div/div')\n\t        if address:\n\t            address = address.text\n\t            logger.info(f\"Address: {address}\")\n\t            account['address'] = address\n\t        self.driver.close()\n\t    def _venom_stake(self, acc: dict = None):\n\t        try:\n\t            self.driver.get(self.config['task']['venom_stake'])\n\t            time.sleep(5)\n", "            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n\t            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def _venom_pad(self, acc: dict = None):\n\t        try:\n\t            self.driver.get(self.config['task']['venom_pad'])\n\t            time.sleep(5)\n\t            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n", "            if not follow_tw:\n\t                # job done, move on\n\t                return\n\t            follow_tw.click()\n\t            time.sleep(6)\n\t            # they will popup a new window for twitter follow, go to that window\n\t            self.auto.switch_to_window(-1)\n\t            tweet_tw = self.auto.try_find(FOLLOW_XP)\n\t            if tweet_tw:\n\t                tweet_tw.click()\n", "                time.sleep(2)\n\t                self.driver.close()\n\t                time.sleep(5)  # must wait for venom to check twitter follow\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\t            # wait to solve captcha\n\t            while len(self.driver.window_handles) == 1:\n\t                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n\t                time.sleep(20)\n\t            if len(self.driver.window_handles) > 1:\n", "                # they may popup a new window for twitter follow again, go to that window and follow it\n\t                # and then close window\n\t                self.auto.switch_to_window(-1)\n\t                time.sleep(8)\n\t                self.auto.try_click(FOLLOW_XP, 4)\n\t                self.driver.close()\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\t            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 6)\n\t            # they will popup new tab for tweet\n", "            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n\t            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n\t            if tweet_tw:\n\t                tweet_tw.click()\n\t                time.sleep(2)\n\t                self.driver.close()\n\t                time.sleep(30)\n\t            self.auto.switch_to_window(0)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n", "            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n\t            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def _first_task(self, acc: dict = None):\n\t        login_tw = self.auto.try_find(\"//button[contains(text(),'Login with Twitter')]\")\n\t        if login_tw:\n\t            login_tw.click()\n\t            time.sleep(4)\n\t            self.auto.try_click(\"allow\", time_to_sleep=10, by=By.ID)\n", "            self.auto.switch_to_window(1)\n\t        follow_btn = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\t        if follow_btn:\n\t            follow_btn.click()\n\t            time.sleep(4)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span', 10)\n\t            self.driver.close()\n\t            self.auto.switch_to_window(0)\n\t            time.sleep(55)\n", "            self.auto.try_click(\"//button[contains(text(),'Check')]\", 5)\n\t        claim_btn = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n\t        if claim_btn:\n\t            claim_btn.click()\n\t            time.sleep(4)\n\t            self.auto.sign()\n\t            time.sleep(5)\n\t    def _foundation(self, acc: dict = None):\n\t        try:\n\t            self.auto.switch_to_window(-1)\n", "            self.driver.get(self.config['task']['venom_foundation'])\n\t            time.sleep(8)\n\t            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\t            if not follow_tw:\n\t                return\n\t            follow_tw.click()\n\t            time.sleep(6)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n\t            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n", "            if fl_again_tw:\n\t                fl_again_tw.click()\n\t                time.sleep(3)\n\t                self.driver.close()\n\t                time.sleep(20)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t            if len(self.driver.window_handles) > 1:\n\t                # they may popup a new window for twitter follow again, go to that window and follow it\n\t                # and then close window\n", "                self.auto.switch_to_window(-1)\n\t                self.auto.try_click(\n\t                    \"//*[@id='layers']/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span\", 4\n\t                )\n\t                self.driver.close()\n\t            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n\t            if fl_again_tw:\n\t                fl_again_tw.click()\n\t                self.driver.close()\n\t                time.sleep(20)\n", "            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 4)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n\t            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n\t            if tweet_tw:\n\t                tweet_tw.click()\n\t                time.sleep(2)\n\t                self.driver.close()\n", "                time.sleep(20)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\t            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n\t            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def _venom_wallet(self, acc: dict = None):\n\t        try:\n", "            self.driver.get(self.config['task']['venom_wallet'])\n\t            time.sleep(8)\n\t            check_button = self.auto.try_find(\"//button[contains(text(),'Check')]\")\n\t            if check_button:\n\t                self.auto.send(receiver=VENOM_ADDRESS, amount='1')\n\t                self.auto.switch_to_window(-1)\n\t                self.driver.close()\n\t            time.sleep(4)\n\t            self.auto.switch_to_window(0)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 10)\n", "            self.auto.click(\"//button[contains(text(),'Mint')]\", 6)\n\t            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def daily_faucet(self, account: dict = None):\n\t        url = f\"https://venom.network/faucet\"\n\t        self.driver.get(url)\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n", "        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        # click on the Connect Wallet button\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(4)\n\t        self.auto.try_click('//*[@id=\"root\"]/div[1]/div[1]/div[2]/div[2]/span', 2)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\t        self._daily_faucet(account)\n", "        logger.info(f\"Faucet claim successfull for {account['address']}\")\n\t    def _web3_world(self, acc: dict = None):\n\t        try:\n\t            self.driver.get(self.config['task']['web3_world'])\n\t            time.sleep(8)\n\t            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\t            if follow_tw:\n\t                follow_tw.click()\n\t                time.sleep(5)\n\t            else:\n", "                self.auto.open_new_tab(\"https://twitter.com/intent/user?screen_name=w3w_exchange\")\n\t                self.auto.switch_to_window(-1)\n\t                time.sleep(5)\n\t            self.auto.switch_to_window(-1)\n\t            fl_tw = self.auto.try_find(FOLLOW_XP)\n\t            if fl_tw:\n\t                fl_tw.click()\n\t                self.driver.close()\n\t                time.sleep(10)\n\t            self.auto.switch_to_window(0)\n", "            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t            mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n\t            while not mint_button:\n\t                self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t                mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n\t            mint_button.click()\n\t            time.sleep(6)\n\t            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n", "    def _oasis_gallery(self, acc: dict = None):\n\t        try:\n\t            self.driver.get(self.config['task']['oasis_gallery'])\n\t            time.sleep(10)\n\t            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\t            while not follow_tw:\n\t                self.driver.refresh()\n\t                time.sleep(5)\n\t                follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\t            follow_tw.click()\n", "            time.sleep(6)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n\t            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n\t            if fl_again_tw:\n\t                fl_again_tw.click()\n\t                time.sleep(6)\n\t                self.driver.close()\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n", "            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n\t            if fl_again_tw:\n\t                fl_again_tw.click()\n\t                time.sleep(20)\n\t                self.driver.close()\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Mint')]\", 6)\n\t            self.auto.confirm(acc['password'])\n", "        except Exception as e:\n\t            logger.error(e)\n\t    def _snipa(self, acc: dict = None):\n\t        try:\n\t            self.driver.get(self.config['task']['snipa'])\n\t            time.sleep(10)\n\t            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 15)\n\t            # they will popup new tab for tweet\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n", "            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n\t            if tweet_tw:\n\t                tweet_tw.click()\n\t                time.sleep(2)\n\t                self.driver.close()\n\t                time.sleep(5)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\t            # wait to solve captcha\n\t            try_counter = 0\n", "            while len(self.driver.window_handles) == 1:\n\t                mint = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n\t                if mint:\n\t                    break\n\t                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n\t                time.sleep(20)\n\t                if try_counter > 5:\n\t                    raise Exception(\"Captcha not solved\")\n\t                try_counter += 1\n\t            if len(self.driver.window_handles) > 1:\n", "                # they may popup a new window for twitter follow again, go to that window and follow it\n\t                # and then close window\n\t                self.auto.switch_to_window(-1)\n\t                time.sleep(15)\n\t                self.auto.try_click(\"//span[contains(text(),'Tweet')]\", 3)\n\t                self.driver.close()\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Tweet')]\", 20)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\t            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n", "            self.auto.confirm(acc['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def _snipa_finance(self, account: dict = None):\n\t        try:\n\t            self.auto.switch_to_window(0)\n\t            self.driver.get(\"https://venom.snipa.finance\")\n\t            time.sleep(8)\n\t            # connect venom wallet\n\t            login = self.auto.try_find(\"//span[contains(text(),'ogin via Walle')]\")\n", "            if login:\n\t                login.click()\n\t                time.sleep(3)\n\t                self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t                self.auto.switch_to_window(-1)\n\t                self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\t            self.auto.switch_to_window(-1)\n\t            join = self.auto.try_find(\"//div[contains(text(),'Join Venom Testnet')]\")\n\t            if join:\n\t                join.click()\n", "                time.sleep(3)\n\t                self.auto.confirm(password=account['password'])\n\t        except Exception as e:\n\t            logger.error(e)\n\t    def _bridge(self, acc: dict = None):\n\t        try:\n\t            self.auto.switch_to_window(-1)\n\t            self.driver.get(self.config['task']['venom_bridge'])\n\t            time.sleep(4)\n\t            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n", "            if not follow_tw:\n\t                return\n\t            follow_tw.click()\n\t            time.sleep(6)\n\t            self.auto.switch_to_window(-1)\n\t            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n\t            if fl_again_tw:\n\t                fl_again_tw.click()\n\t                time.sleep(6)\n\t                self.driver.close()\n", "            self.auto.switch_to_window(-1)\n\t            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\t        except Exception as e:\n\t            logger.error(e)\n\tif __name__ == '__main__':\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    incentive_params = {\n\t        \"account\": list_account[0],\n\t    }\n\t    params = {\n", "        \"list_add\": list_account,\n\t        \"answer\": DAILY_ANSWER,\n\t        \"amount\": \"1\",\n\t    }\n\t    try:\n\t        vn = Venom(\n\t            params=params\n\t        )\n\t        vn.process_all(method=\"incentive\")\n\t        # vn.incentive(**incentive_params)\n", "    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/config.py", "chunked_list": ["import os\n\timport logging\n\tfrom dotenv import load_dotenv\n\tload_dotenv()\n\tlogger = logging.getLogger(__name__)\n\tCODE_HOME = os.path.abspath(os.path.dirname(__file__) + '/..')\n\tHOME_PACKAGE = os.path.abspath(os.path.dirname(__file__) + '/package')\n\tPATH_OF_AIRPORT = \"/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport\"\n\tHOME_TMP = f'{CODE_HOME}/tmp'\n\tHOME_LOG = f'{CODE_HOME}/log'\n", "list_make_dir = [\n\t    HOME_TMP, HOME_LOG\n\t]\n\tfor _dir in list_make_dir:\n\t    # make sure the folder exists before using it\n\t    os.makedirs(_dir, exist_ok=True)\n\tACC_PATH = os.environ.get('ACC_PATH')\n\tACC_VENOM_PATH = os.environ.get('ACC_VENOM_PATH')\n\ttry:\n\t    ACC_PATH = os.path.join(os.path.dirname(__file__), os.pardir, os.environ.get('ACC_PATH'))\n", "    ACC_VENOM_PATH = os.path.join(os.path.dirname(__file__), os.pardir, os.environ.get('ACC_VENOM_PATH'))\n\texcept Exception as e:\n\t    print(f\"{ACC_PATH=} and {ACC_VENOM_PATH} Error: {e}\")\n\tACC_FILE_NAME = ACC_VENOM_PATH.split('/')[-1].replace('.csv', '')\n\tWAIT_TIME = os.environ.get('WAIT_TIME')\n\tPASSWORD = os.environ.get('PASSWORD')  # password default for all accounts\n\tHEADLESS = os.environ.get('HEADLESS')      # for headless mode chrome\n\tWIDTH    = os.environ.get('WIDTH', 1300)   # for which width of chrome\n\tHEIGHT   = os.environ.get('HEIGHT', 1020)  # for which height of chrome\n\t# download the newest version of keplr extension from:\n", "# ref. https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap\n\t# or from  https://github.com/chainapsis/keplr-wallet\n\t# or get from your local machine\n\t# /Users/$USER/Library/Application\\ Support/Google/Chrome/Default/Extensions/\n\tEXTENSION_DIR      = os.environ.get('EXTENSION_DIR')\n\tEXTENSION_CRX      = os.environ.get('EXTENSION_CRX')\n\tEXTENSION_ID       = os.environ.get('EXTENSION_ID')\n\tDRIVER_PATH        = os.environ.get('DRIVER_PATH')\n\tAPI_KEY            = os.environ.get('API_KEY')\n\tDAILY_ANSWER       = os.environ.get('DAILY_ANSWER')\n", "# usefull extension, add more if you want\n\tHEKT_CAPTCHA       = os.environ.get('HEKT_CAPTCHA')\n\tDISCORD_LOGIN      = os.environ.get('DISCORD_LOGIN')\n\tEXTENSION_META_DIR = os.environ.get('EXTENSION_META_DIR')\n\tEXTENSION_META_ID  = os.environ.get('EXTENSION_META_ID')\n\tUSER_DATA_DIR      = os.environ.get('USER_DATA_DIR')\n\tALL_USER_DATA_DIR  = os.environ.get('ALL_USER_DATA_DIR')  # for all user data dir\n\tDEFAULT_WAIT_CONFIRM = int(os.environ.get('DEFAULT_WAIT_CONFIRM')) or 60\n\tDEFAULT_EXTENSION = f\"{EXTENSION_DIR}\"\n\tfor ex in [HEKT_CAPTCHA, DISCORD_LOGIN]:\n", "    if ex:\n\t        DEFAULT_EXTENSION += f\",{ex}\"\n\tNETWORK_PASSWORD = os.environ.get('NETWORK_PASSWORD')\n\tNETWORK_NAME1    = os.environ.get('NETWORK_NAME1')\n\tNETWORK_NAME2    = os.environ.get('NETWORK_NAME2')\n\tCHANGE_NETWORK   = os.environ.get('CHANGE_NETWORK')\n\tLIST_NETWORK     = [NETWORK_NAME1, NETWORK_NAME2]\n\tLIST_FOLLOW      = os.environ.get('LIST_FOLLOW')\n\tMAIN_INDEX       = int(os.environ.get('MAIN_INDEX')) or 0\n\tdef get_logger(name):\n", "    log = logging.getLogger(name)\n\t    log.setLevel(\"DEBUG\")\n\t    # Create handlers\n\t    c_handler = logging.StreamHandler()\n\t    # Create formatters and add it to handlers\n\t    # Configure the logger\n\t    simple_format = logging.Formatter(\n\t        \"%(asctime)s [%(funcName)s() +%(lineno)d]: %(levelname)-8s %(message)s\",\n\t        datefmt=\"%b-%d %H:%M:%S%Z\"\n\t    )\n", "    c_handler.setFormatter(simple_format)\n\t    # Add handlers to the logger\n\t    log.addHandler(c_handler)\n\t    return log\n\t# Use this variable for global project\n\tlogger = get_logger(__name__)\n"]}
{"filename": "app/sent.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME\n\tfrom wallet import venom\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n", "    \"test\": {\n\t        \"app\": {\n\t            \"ylide\": \"https://testnet.web3.world\",\n\t        }\n\t    },\n\t}\n\tclass Wallet(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n", "        self.config = CONFIG[self.environment]\n\t    def sent(self, account: dict = None):\n\t        if not self.driver:\n\t            self._try_start_driver(account)\n\t        receiver = '0:e78ef3c0d28ec2081050f976afe35d60013e2dd91e749d1ea0e58a81f11820d0'\n\t        self.driver.get(f\"{self.config['app']['ylide']}\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n", "        self.auto.switch_to_window(0)\n\t        self.driver.get(venom.POPUP_URL)\n\t        time.sleep(3)\n\t        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n\t        if balance:\n\t            balance = balance.text.split(\".\")[0]\n\t            logger.info(f\"Balance: {balance}\")\n\t            if balance and int(balance) > 10:\n\t                amount = int(balance) - 10\n\t                self.auto.switch_to_window(0)\n", "                self.auto.send(receiver=receiver, amount=amount)\n\t        self.auto.switch_to_window(0)\n\t        time.sleep(1)\n\t        logger.info(f\"Incentive success\")\n\t        self.driver.quit()\n\tif __name__ == '__main__':\n\t    fp = f\"{CODE_HOME}/account.venomall.csv\"\n\t    list_account = AccountLoader(fp=fp).parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[0],\n", "    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t    }\n\t    try:\n\t        for account in list_account[21:]:\n\t            vn = Wallet(params=params)\n\t            vn.sent(**{\n\t                \"account\": account,\n\t            })\n", "    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/account.py", "chunked_list": ["from app import utils\n\tfrom app.config import ACC_PATH\n\tfrom app.enums import COLUMN_MAPPING\n\tclass AccountLoader(object):\n\t    def __init__(self, fp=None, **kwargs):\n\t        self.dir = fp or ACC_PATH\n\t    def parser_file(self):\n\t        parsed_records = []\n\t        # region read file upload\n\t        if self.dir.lower().endswith('.csv'):\n", "            raw_v_rows = self._read_csv_file()\n\t        elif self.dir.lower().endswith('.xlsx'):\n\t            raw_v_rows = self._read_xlsx_file()\n\t        else:\n\t            raise Exception\n\t        # endregion\n\t        # region covert data\n\t        parser_all = {\n\t            'name': lambda v: str(v).strip() if v else None,\n\t            'address': lambda v: str(v).strip() if v else None,\n", "            'private_key': lambda v: str(v).strip() if v else None,\n\t            'seed_phrase': lambda v: str(v).strip() if v else None,\n\t            'password': lambda v: str(v).strip() if v else None,\n\t            'status': lambda v: str(v).strip() if v else None,\n\t            'balance': lambda v: str(v).strip() if v else None,\n\t            'tw_email': lambda v: str(v).strip() if v else None,\n\t            'tw_pass': lambda v: str(v).strip() if v else None,\n\t            'dis_email': lambda v: str(v).strip() if v else None,\n\t            'dis_pass': lambda v: str(v).strip() if v else None,\n\t            'description': lambda v: str(v).strip() if v else None,\n", "        }\n\t        kept_as_is = lambda v: v\n\t        for rvr in raw_v_rows:\n\t            pr = dict()  # pr aka parsed_row\n\t            for k, v in rvr.items():  # :k aka key, :v aka value\n\t                parser_func = parser_all.get(k, kept_as_is)\n\t                pr[k] = parser_func(v)\n\t            parsed_records.append(pr)\n\t        # endregion\n\t        return parsed_records\n", "    def _read_csv_file(self):\n\t        return utils.read_csv_file(dir_file=self.dir, column_mapping=COLUMN_MAPPING)\n\t    def _read_xlsx_file(self):\n\t        return utils.read_xlsx_file(dir_file=self.dir, column_mapping=COLUMN_MAPPING)\n"]}
{"filename": "app/enums.py", "chunked_list": ["from enum import Enum, EnumMeta\n\tFOLLOW_XP = \"//*[@id='layers']/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span\"\n\tclass EnumDirectValueMeta(EnumMeta):\n\t    def __getattribute__(cls, name):\n\t        value = super().__getattribute__(name)\n\t        if isinstance(value, cls):\n\t            value = value.value\n\t        return value\n\tclass BaseEnum(Enum, metaclass=EnumDirectValueMeta):\n\t    @classmethod\n", "    def all(cls, except_list=None):\n\t        if except_list is None:\n\t            except_list = []\n\t        return [c.value for c in cls if c.value not in except_list]\n\t    @classmethod\n\t    def keys(cls):\n\t        return [k.name for k in cls]\n\t    @classmethod\n\t    def has_value(cls, value):\n\t        return value in cls._value2member_map_\n", "    @classmethod\n\t    def all_element_index(cls, index):\n\t        # check element is list and len\n\t        first_element = cls.all()[0]\n\t        if type(first_element) in (list, tuple):\n\t            if index > len(first_element) - 1:\n\t                return []\n\t        e = []\n\t        for c in cls.all():\n\t            e.append(c[index])\n", "        return e\n\tclass AccountStatus(BaseEnum):\n\t    Active = '0'\n\t    Inactive = '1'\n\tclass GasPrice(BaseEnum):\n\t    Low = 'Low'\n\t    Average = 'Average'\n\t    High = 'High'\n\tCOLUMN_MAPPING = {\n\t    'Name': 'name',\n", "    'Address': 'address',\n\t    'Private Key': 'private_key',\n\t    \"Seed Phrase\": 'seed_phrase',\n\t    \"Password\": 'password',\n\t    \"Status\": 'status',\n\t    \"Balance\": 'balance',\n\t    \"TWACC\": 'tw_acc',\n\t    \"TWPASS\": 'tw_pass',\n\t    \"TWFA\": 'tw_fa',\n\t    \"TWEMAIL\": 'tw_email',\n", "    \"DISEMAIL\": 'dis_email',\n\t    \"DISPASS\": 'dis_pass',\n\t    \"DISTOKEN\": 'dis_token',\n\t    \"TWFAB\": 'tw_fab',\n\t    'Description': 'description',\n\t}\n"]}
{"filename": "app/numi.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, EXTENSION_ID\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n\t    \"test\": {\n", "        \"app\": {\n\t            \"numi\": \"https://club.numi.net\",\n\t        }\n\t    },\n\t}\n\tclass Numi(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n\t        self.environment = CONFIG['environment']\n", "        self.config = CONFIG[self.environment]\n\t    def buy(self, account: dict = None):\n\t        if not self.driver:\n\t            self._try_start_driver(account)\n\t        self.driver.get(f\"{self.config['app']['numi']}\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        logged_in_twitter = self._check_logged_in_twitter()\n\t        if not logged_in_twitter:\n", "            self.login_twitter(account)\n\t            self.driver.close()\n\t        self._tweet()\n\t        self._follow_list(account=account, list_acc=self.list_tw_follow)\n\t        self.auto.switch_to_window(0)\n\t        self._reload_extension()\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(10)\n\t        self.auto.click(\"//div[contains(text(),'Log In')]\", 3)\n", "        # click button Sign up and role tab\n\t        self.auto.click(\"//button[contains(text(),'Sign up')][@role='tab']\", 3)\n\t        # sign up\n\t        self.auto.switch_to_window(0)\n\t        inputs = self.auto.try_finds(\"//input\")\n\t        inputs[0].send_keys(account['tw_acc'])\n\t        time.sleep(0.3)\n\t        inputs[1].send_keys(account['tw_email'])\n\t        time.sleep(0.3)\n\t        inputs[2].send_keys(account['password'])\n", "        time.sleep(0.3)\n\t        inputs[3].send_keys(account['password'])\n\t        time.sleep(0.3)\n\t        inputs[4].click()\n\t        time.sleep(0.3)\n\t        inputs[5].click()\n\t        time.sleep(0.3)\n\t        self.auto.click(\"//div[contains(text(),'Sign up')]\", 60)\n\t        self.auto.switch_to_window(0)\n\t        self.auto.click(\"//div[contains(text(),'Connect wallet')]\", 5)\n", "        self.auto.switch_to_window(-1)\n\t        self.auto.click(\"//div[contains(text(),'Connect')]\", 5)\n\t        self.auto.sign()\n\t        # buy\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(f\"{self.config['app']['numi']}/nft/648728d4b0f2b854106cf579\")\n\t        time.sleep(10)\n\t        buy_for_btn = self.auto.try_find(\"//div[contains(text(),'Buy for')]\")\n\t        while not buy_for_btn:\n\t            time.sleep(10)\n", "            buy_for_btn = self.auto.try_find(\"//div[contains(text(),'Buy for')]\")\n\t        self.auto.click(\"//div[contains(text(),'Buy for')]\", 6)\n\t        self.auto.click(\"//input[@type='checkbox']\", 3)\n\t        buy_for_btn_2 = self.auto.try_finds(\"//div[contains(text(),'Buy for')]\")\n\t        buy_for_btn_2[-1].click()\n\t        time.sleep(10)\n\t        self.auto.confirm()\n\t        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n", "    list_tw_follow = AccountLoader(fp=f\"{CODE_HOME}/twitter140.csv\").parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[7],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t    }\n\t    try:\n\t        vn = Numi(\n\t            use_uc=True,\n", "            params=params,\n\t            list_tw_follow=list_tw_follow,\n\t        )\n\t        vn.process_all(method=\"buy\")\n\t        # vn.buy(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/utils.py", "chunked_list": ["import base64\n\timport copy\n\timport csv\n\timport hmac\n\timport json\n\timport subprocess\n\timport time\n\timport requests\n\timport openpyxl\n\timport os\n", "import pandas as pd\n\timport random\n\timport string\n\tfrom pywifi import ControlConnection\n\tfrom dongle_lte_api import Dongle\n\tfrom app.config import HOME_PACKAGE, HOME_TMP, get_logger, USER_DATA_DIR, ALL_USER_DATA_DIR, NETWORK_PASSWORD, \\\n\t    LIST_NETWORK, PATH_OF_AIRPORT\n\tlogger = get_logger(__name__)\n\tdef read_xlsx_file(dir_file: str, column_mapping: dict = None, sheet_name: str = None) -> list:\n\t    wb = openpyxl.load_workbook(dir_file)\n", "    if not sheet_name:\n\t        sheet_name = wb.sheetnames[0]\n\t    ws = wb[sheet_name]  # the 1st sheet at index 0\n\t    max_column = ws.max_column\n\t    max_row = ws.max_row\n\t    raw_headers = [ws.cell(row=1, column=ci).value for ci in range(1, max_column + 1)]  # ci aka column_index\n\t    raw_headers = list(filter(None, raw_headers))  # remove None column out of header list\n\t    v_fields = [h and column_mapping.get(h.strip()) for h in\n\t                raw_headers]  # h aka header, ensure header is not null to strip and no error is thrown\n\t    raw_v_rows = []  # raw_v_rows aka raw vehicle rows\n", "    col_count = len(raw_headers)\n\t    for ri in range(2, max_row + 1):  # ri aka row_index - we skip the 1st row which is the header rows\n\t        values = [ws.cell(row=ri, column=ci).value for ci in range(1, col_count + 1)]  # ci aka column_index\n\t        rvr = dict(zip(v_fields, values))  # rvr aka raw_vehicle_row\n\t        raw_v_rows.append(rvr)\n\t    return raw_v_rows\n\tdef read_csv_file(dir_file: str, column_mapping: dict = None) -> list:\n\t    raw_v_rows = []  # raw_v_rows aka raw vehicle rows\n\t    # region read csv\n\t    csv.register_dialect('PARCEL_dialect',\n", "                         delimiter=',',\n\t                         quoting=csv.QUOTE_ALL,\n\t                         skipinitialspace=True\n\t                         )\n\t    with open(dir_file, mode='r') as csv_file:\n\t        csv_reader = csv.DictReader(csv_file, dialect='PARCEL_dialect')\n\t        for row in csv_reader:\n\t            r = dict()  # r aka record\n\t            for key, value in column_mapping.items():\n\t                r[value] = row.get(key)\n", "            raw_v_rows.append(r)\n\t    return raw_v_rows\n\tdef load_abi(file_name):\n\t    fp = f'{HOME_PACKAGE}/{file_name}'\n\t    with open(fp, 'r') as f:\n\t        abi = json.load(f)\n\t        return abi\n\tdef force2bool(input : str or bool) -> bool:\n\t    if isinstance(input, bool):\n\t        return input\n", "    elif isinstance(input, str):\n\t        if input.lower().strip() == 'true': return True\n\t        if input.lower().strip() == 't':    return True\n\t        if input.lower().strip() == 'True': return True\n\t        if input.lower().strip() == 'T':    return True\n\t        if input.lower().strip() == 'yes':  return True\n\t        if input.lower().strip() == 'Yes':  return True\n\t        if input.lower().strip() == 'y':    return True\n\t        return False\n\t    else:\n", "        return False\n\tdef force_int(value, default=0):\n\t    try:\n\t        return int(value)\n\t    except Exception as _e:\n\t        return default\n\tdef force_float(value, default=0.0):\n\t    try:\n\t        return float(value)\n\t    except Exception as _e:\n", "        return default\n\tdef randomword(length):\n\t   letters = string.ascii_lowercase\n\t   return ''.join(random.choice(letters) for i in range(length))\n\tdef file_latest_in_path(log_dir: str = None) -> str:\n\t    if log_dir is None:\n\t        log_dir = HOME_TMP\n\t    files = os.listdir(log_dir)\n\t    files.sort(key=lambda x: os.path.getmtime(os.path.join(log_dir, x)))\n\t    if len(files) == 0:\n", "        return None\n\t    return os.path.join(log_dir, files[-1])\n\tdef find_latest_row_index_log(file_report) -> tuple:\n\t    df = pd.read_csv(file_report)\n\t    # index last row\n\t    index = df.index[-1]\n\t    row = df.loc[index]\n\t    return index, row\n\tdef df_to_csv(df, file_path):\n\t    # Save dataframe as csv.\n", "    df.to_csv(file_path, index=False)\n\tdef csv_to_df(file_path):\n\t    # Read csv to dataframe.\n\t    df = pd.read_csv(file_path)\n\t    return df\n\tdef add_to_csv(file_path, add_text):\n\t    # Add a line to file_name.csv\n\t    # Should be like [xx,xx,xx]\n\t    df = csv_to_df(file_path)\n\t    l = len(df)\n", "    df.loc[l] = add_text\n\t    df_to_csv(df, file_path)\n\tdef get_fa_backup(str_fab) -> str:\n\t    co = str_fab.replace('\\n', ' ').split(' ')\n\t    fab = ''\n\t    for text in co:\n\t        if len(text) == 12:\n\t            fab = text\n\t            break\n\t    return fab\n", "def ip():\n\t    try:\n\t        ip = requests.get('https://checkip.amazonaws.com').text.strip()\n\t    except Exception as _e:\n\t        ip = \"\"\n\t    return ip\n\tdef get_ip():\n\t    ip_address_now = ip()\n\t    # check file exist\n\t    file_path = f\"{HOME_TMP}/../ip_address.txt\"\n", "    if not os.path.exists(file_path):\n\t        with open(file_path, \"w\") as f:\n\t            f.write(f\"{ip_address_now}|{ip_address_now}\")\n\t    else:\n\t        # get last ip from file\n\t        with open(file_path, \"r\") as f:\n\t            line = f.read().replace(\"\\n\", \"\")\n\t            current_ip = line.split(\"|\")[1]\n\t        # compare\n\t        if current_ip != ip_address_now:\n", "            logger.info(f\"Last IP Address: {current_ip}\")\n\t            # write to file\n\t            with open(file_path, \"w\") as f:\n\t                f.write(f\"{current_ip}|{ip_address_now}\")\n\t    logger.info(f\"IP Address: {ip_address_now}\")\n\t    return ip_address_now\n\tdef cook_address(address: str) -> str:\n\t    \"\"\" Return cooked address \"\"\"\n\t    address = address.lower().strip().replace(\"0x\", \"\").replace(\"0:\", \"\")\n\t    return address\n", "def user_data_dir(address: str = None) -> str or None:\n\t    \"\"\" Return user data dir \"\"\"\n\t    if address is None and USER_DATA_DIR is None:\n\t        return None\n\t    address = cook_address(address)  # cook address\n\t    # specific user data dir if set\n\t    # create user data dir if not exist by using address of wallet\n\t    udd = USER_DATA_DIR if USER_DATA_DIR else os.path.join(ALL_USER_DATA_DIR, address)\n\t    if not os.path.exists(udd):\n\t        os.makedirs(udd)\n", "    return udd\n\tdef totp(secret: str) -> str:\n\t    \"\"\" Calculate TOTP using time and key \"\"\"\n\t    key = base64.b32decode(secret, True)\n\t    now = int(time.time() // 30)\n\t    msg = now.to_bytes(8, \"big\")\n\t    digest = hmac.new(key, msg, \"sha1\").digest()\n\t    offset = digest[19] & 0xF\n\t    code = digest[offset : offset + 4]\n\t    code = int.from_bytes(code, \"big\") & 0x7FFFFFFF\n", "    code = code % 1000000\n\t    return \"{:06d}\".format(code)\n\tdef reboot():\n\t    \"\"\" Reboot dongle \"\"\"\n\t    Dongle().reboot()\n\tdef reboot_reconnect():\n\t    \"\"\" Reboot dongle \"\"\"\n\t    logger.info(\"Reboot dongle\")\n\t    current_network = get_ssid()\n\t    reboot()\n", "    time.sleep(50)\n\t    res = None\n\t    while not res:\n\t        try:\n\t            res = ControlConnection(wifi_ssid=current_network, wifi_password=NETWORK_PASSWORD).wifi_connector()\n\t        except Exception as _e:\n\t            logger.error(f\"Error connect {current_network}: {_e} retry after 10s\")\n\t        time.sleep(10)\n\t    time.sleep(20)\n\t    logger.info(f\"New IP Address: {ip()}\")\n", "def change_network():\n\t    \"\"\" Change network \"\"\"\n\t    try:\n\t        logger.info(f\"IP Address:     {ip()}\")\n\t        change_to_network = None\n\t        while not change_to_network:\n\t            try:\n\t                change_to_network = get_network()\n\t            except Exception as _e:\n\t                logger.error(f\"Error get network: {_e}, retry after 3s\")\n", "            time.sleep(3)\n\t        logger.info(f\"Change from {get_ssid()} to {change_to_network}\")\n\t        reboot()\n\t        res = None\n\t        while not res:\n\t            try:\n\t                res = ControlConnection(wifi_ssid=change_to_network, wifi_password=NETWORK_PASSWORD).wifi_connector()\n\t            except Exception as _e:\n\t                logger.error(f\"Error connect {change_to_network}: {_e} retry after 10s\")\n\t            time.sleep(10)\n", "        logger.info(f\"New IP Address: {ip()}\")\n\t    except Exception as e:\n\t        logger.error(f\"Error change network: {e}\")\n\tdef get_ssid():\n\t    \"\"\"Get the SSID of the connected WiFi.\"\"\"\n\t    process = subprocess.Popen([PATH_OF_AIRPORT, \"-I\"], stdout=subprocess.PIPE)\n\t    out, err = process.communicate()\n\t    process.wait()\n\t    output = {}\n\t    for line in out.decode(\"utf-8\").split(\"\\n\"):\n", "        if \": \" in line:\n\t            key, value = line.split(\": \")\n\t            key = key.strip()\n\t            value = value.strip()\n\t            output[key] = value\n\t    return output[\"SSID\"]\n\tdef get_network(exclude_network: str = None) -> str:\n\t    \"\"\" Get network \"\"\"\n\t    if exclude_network is None:\n\t        exclude_network = get_ssid()\n", "    list_network = copy.deepcopy(LIST_NETWORK)\n\t    if exclude_network in list_network:\n\t        list_network.remove(exclude_network)\n\t    logger.info(f\"List network: {list_network}\")\n\t    network = list_network[0]\n\t    return network\n"]}
{"filename": "app/ylide.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.chatgpt import tweet\n\tfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, EXTENSION_ID\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n", "    \"test\": {\n\t        \"app\": {\n\t            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n\t        }\n\t    },\n\t}\n\tclass Ylide(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n", "        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n\t    def buy(self, account: dict = None):\n\t        if not self.driver:\n\t            self._try_start_driver(account)\n\t        self.driver.get(f\"{self.config['app']['ylide']}\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        logged_in_twitter = self._check_logged_in_twitter()\n", "        if not logged_in_twitter:\n\t            self.login_twitter(account)\n\t            self.driver.close()\n\t        self._follow(account=account, user_name=\"@GradyDuane19821\")\n\t        self._follow(account=account, user_name=\"BrainBarrows\")\n\t        self._follow(account=account, user_name=\"HoytGerlach\")\n\t        self._follow(account=account, user_name=\"LailaFriesen\")\n\t        # self._tweet()\n\t        # self._follow_list(account=account, list_acc=self.list_tw_follow)\n\t        self.auto.switch_to_window(0)\n", "        self._reload_extension()\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(10)\n\t        self.auto.click(\"//div[contains(text(),'Connect account')]\", 3)\n\t        self.auto.switch_to_window(0)\n\t        self.auto.click(\"//div[contains(text(),'Venom Wallet')]\", 4)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.click(\"//div[contains(text(),'Connect')]\", 4)\n\t        self.auto.switch_to_window(0)\n", "        self.auto.click('//div[text()=\"Sign\"]', 4)\n\t        self.auto.sign(5)\n\t        self.auto.confirm(time_to_sleep=60)\n\t        # sign up\n\t        self.auto.switch_to_window(0)\n\t        self.auto.try_click('//*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[4]/textarea', 3)\n\t        message = tweet().replace('\"', '')\n\t        self.auto.try_send_keys('//*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[4]/textarea', f\"{message}\\n\")\n\t        self.auto.click(\"//span[contains(text(),'Send via')]\", 5)\n\t        self.auto.confirm()\n", "        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    list_tw_follow = AccountLoader(fp=f\"{CODE_HOME}/twitter140.csv\").parser_file()\n\t    account_index = 3\n\t    swap_params = {\n\t        \"account\": list_account[account_index],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n", "        # 'account_index': account_index,\n\t    }\n\t    try:\n\t        vn = Ylide(\n\t            use_uc=True,\n\t            params=params,\n\t            list_tw_follow=list_tw_follow,\n\t        )\n\t        vn.process_all(method=\"buy\")\n\t        # vn.buy(**swap_params)\n", "    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/web3_wolrd.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n\t    \"test\": {\n", "        \"app\": {\n\t            \"web3_world\": \"https://testnet.web3.world\",\n\t        }\n\t    },\n\t}\n\tclass Web3World(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n", "    def swap(self, account: dict = None):\n\t        amount     = self.params.get('amount', \"0.01\")\n\t        from_token = self.params.get('from_token')\n\t        to_token   = self.params.get('to_token')\n\t        percent    = self.params.get('percent')\n\t        self.driver.get(f\"{self.config['app']['web3_world']}/swap\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n", "        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(4)\n\t        self.auto.try_click('//*[@id=\"root\"]/div[1]/header/div/div[2]/div[2]/div/button', 2)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\t        # swap\n\t        self.auto.switch_to_window(0)\n\t        inputs = self.auto.try_finds(\"//input\")\n", "        inputs[0].send_keys(amount)\n\t        time.sleep(3)\n\t        self.auto.click(\"//button[contains(text(),'Swap')]\", 4)\n\t        self.auto.click(\"//button[contains(text(),'Confirm')]\", 4)\n\t        self.auto.confirm(account['password'])\n\t        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    # list_account = AccountLoader().parser_file()\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    swap_params = {\n", "        \"account\": list_account[1],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t        \"amount\": \"1\",\n\t        \"from_token\": \"VENOM\",\n\t        \"to_token\": \"USDT\",\n\t    }\n\t    try:\n\t        vn = Web3World(\n", "            use_uc=True,\n\t            params=params\n\t        )\n\t        vn.process_all(method=\"swap\")\n\t        # vn.swap(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/oasis_gallery.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n\t    \"test\": {\n", "        \"app\": {\n\t            \"oasis_gallery\": \"https://testnet.oasis.gallery\",\n\t        }\n\t    },\n\t}\n\tclass OasisGallery(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n", "    def buy(self, account: dict = None):\n\t        self.driver.get(f\"{self.config['app']['oasis_gallery']}/buy\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(4)\n\t        self.auto.try_click('//*[@id=\"__next\"]/div[1]/div[1]/div[2]/div[3]/button', 2)\n", "        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\t        # swap\n\t        self.auto.switch_to_window(0)\n\t        inputs = self.auto.try_finds(\"//span[contains(text(),'Buy now')]\")\n\t        inputs[0].click()\n\t        time.sleep(3)\n\t        self.auto.click(\"//button[contains(text(),'Confirm')]\", 4)\n\t        self.auto.confirm(account['password'])\n", "        time.sleep(20)\n\t        logger.info(f\"Incentive success\")\n\t    def list(self, account: dict = None):\n\t        self.driver.get(f\"{self.config['app']['oasis_gallery']}/buy\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n", "        time.sleep(4)\n\t        self.auto.try_click('//*[@id=\"__next\"]/div[1]/div[1]/div[2]/div[3]/button', 2)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\t        # swap\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(f\"{self.config['app']['oasis_gallery']}/profile/{account['address']}\")\n\t        time.sleep(4)\n\t        self.auto.click('//*[@id=\"__next\"]/div[1]/div[3]/div[2]/div[2]/a/div/div[1]/div', 4)\n", "        self.auto.click('//*[@id=\"__next\"]/div[1]/div[2]/div/div[3]/div/div/div[2]/div[2]/button', 4)\n\t        inputs = self.auto.try_finds(\"//input[@placeholder='Amount']\")\n\t        inputs[0].send_keys(\"5\")\n\t        time.sleep(2)\n\t        self.auto.click('//*[@id=\"__next\"]/div[2]/div[2]/div/div/div[5]/button', 4)\n\t        self.auto.confirm(account['password'])\n\t        time.sleep(45)\n\t        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    # list_account = AccountLoader().parser_file()\n", "    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[44],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t        \"amount\": \"1\",\n\t        \"from_token\": \"VENOM\",\n\t        \"to_token\": \"USDT\",\n\t    }\n", "    try:\n\t        vn = OasisGallery(\n\t            use_uc=True,\n\t            params=params\n\t        )\n\t        vn.process_all(method=\"list\")\n\t        # vn.buy(**swap_params)\n\t        # vn.list(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/chatgpt.py", "chunked_list": ["import requests\n\tfrom app.config import API_KEY\n\tMODEL = 'gpt-3.5-turbo'\n\tURL = f\"https://api.openai.com/v1/chat/completions\"\n\tMAX_TOKENS = 2000\n\tdef chat_with_chatgpt(prompt=''):\n\t    headers = {\n\t        \"Content-Type\": \"application/json\",\n\t        \"Authorization\": f\"Bearer {API_KEY}\"\n\t    }\n", "    json_payload = {\n\t        \"model\": MODEL,\n\t        \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n\t        \"max_tokens\": MAX_TOKENS,\n\t    }\n\t    res = requests.post(URL, headers=headers, json=json_payload).json()\n\t    if \"error\" in res:\n\t        return res[\"error\"]['message']\n\t    return res['choices'][0]['message']['content']\n\tdef tweet(length : str = 20) -> str:\n", "    prompt = f\"\"\"\n\t    Tweet a {length} words, random, make sense and do NOT be the same as the previous one.\n\t    \"\"\"\n\t    text = chat_with_chatgpt(prompt)\n\t    if \"That model is currently overloaded with other requests\" in text:\n\t        return \"I just found a lucky penny in the street and I feel like today is going to be a great day! #blessed\"\n\t    return text\n"]}
{"filename": "app/x.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.chatgpt import tweet\n\tfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, MAIN_INDEX\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n", "    \"test\": {\n\t        \"app\": {\n\t            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n\t        }\n\t    },\n\t}\n\tclass X(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n", "        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n\t    def view(self, account: dict = None):\n\t        if not self.driver:\n\t            self._try_start_driver(account)\n\t        base_url = \"https://twitter.com/bxdoan/status/\"\n\t        list_status = [\n\t            \"1694563974845731007\",\n\t            \"1694563082515996702\",\n\t            \"1694562757537095965\",\n", "            \"1694562416150052970\",\n\t            \"1694562200625860642\",\n\t            \"1694561970392031297\",\n\t            \"1694561806893945070\",\n\t        ]\n\t        self.driver.get(f\"{base_url}{list_status[0]}\")\n\t        for status_id in list_status[1:]:\n\t            url = f\"{base_url}{status_id}\"\n\t            self.driver.execute_script(\"window.open('');\")\n\t            time.sleep(1)\n", "            self.auto.switch_to_window(-1)\n\t            self.driver.get(url)\n\t        time.sleep(3)\n\t        count = 0\n\t        number_tab = len(self.driver.window_handles)\n\t        while True:\n\t            for i in range(number_tab):\n\t                self.auto.switch_to_window(i)\n\t                time.sleep(0.7)\n\t                self.driver.refresh()\n", "            count += 1\n\t            logger.info(f\"View {count} times\")\n\tif __name__ == '__main__':\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    account_index = MAIN_INDEX\n\t    swap_params = {\n\t        \"account\": list_account[account_index],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n", "    }\n\t    try:\n\t        vn = X(\n\t            use_uc=True,\n\t            params=params,\n\t        )\n\t        vn.view(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/venom_stake.py", "chunked_list": ["import time\n\tfrom selenium.webdriver.common.by import By\n\tfrom wallet import venom\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n", "    },\n\t    \"test\": {\n\t        \"task\": {\n\t            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n\t            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n\t            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n\t            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n\t        },\n\t        \"app\": {\n\t            \"venom_stake\": \"https://testnet.venomstake.com/\",\n", "        }\n\t    },\n\t}\n\tVENOM_ADDRESS = \"0:077873f1453fa67b0f1ce77f1e806675acd19c4694b9738be61fd406618f2f7a\"\n\tclass VenomStake(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n\t    def stake(self, account: dict = None):\n", "        self.driver.get(self.config['app']['venom_stake'])\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(\"https://venom.network/faucet\")\n\t        time.sleep(4)\n\t        self.auto.try_click('//*[@id=\"root\"]/div[1]/div[1]/div[2]/div[2]/span', 2)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n", "        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\t        self._daily_faucet()\n\t        # click on the Connect Wallet button\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(self.config['app']['venom_stake'])\n\t        time.sleep(8)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect Wallet')]\", 3)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n", "        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 10)\n\t        # stake\n\t        self.auto.switch_to_window(0)\n\t        inputs = self.auto.try_find('//*[@id=\"app-wrapper\"]/div[2]/div[3]/div/div/div[3]/div/div[2]/div[1]/input')\n\t        inputs.send_keys('3')\n\t        stake_buttons = self.auto.try_finds(\"//div[text()='Stake']\")\n\t        stake_buttons[2].click()\n\t        time.sleep(2)\n\t        self.auto.confirm(account['password'])\n\t        logger.info(f\"Incentive success\")\n", "if __name__ == '__main__':\n\t    # list_account = AccountLoader().parser_file()\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[2],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t        \"answer\": \"All of the above\",\n\t    }\n", "    try:\n\t        vn = VenomStake(\n\t            use_uc=True,\n\t            params=params\n\t        )\n\t        vn.process_all(method=\"stake\")\n\t        # vn.stake(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/snipa.py", "chunked_list": ["import time\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH, DAILY_ANSWER\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n\t    },\n\t    \"test\": {\n", "        \"app\": {\n\t            \"snipa\": \"https://venom.snipa.finance\",\n\t        }\n\t    },\n\t}\n\tclass Snipa(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n", "    def incentive(self, account: dict = None):\n\t        if not self.driver:\n\t            self._try_start_driver(account)\n\t        self.driver.get(f\"{self.config['app']['snipa']}\")\n\t        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        logged_in_wallet = self._check_logged_in_wallet()\n\t        if not logged_in_wallet:\n\t            self.auto.walletSetup(account['seed_phrase'], account['password'])\n", "        self.auto.switch_to_window(0)\n\t        # logged_in_twitter = self._check_logged_in_twitter()\n\t        # if not logged_in_twitter:\n\t        #     self.login_twitter(account)\n\t        #     self.driver.close()\n\t        # self._tweet()\n\t        # self._follow(account)\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(f\"{self.config['app']['snipa']}\")\n\t        time.sleep(8)\n", "        # connect venom wallet\n\t        login = self.auto.try_find(\"//span[contains(text(),'ogin via Walle')]\")\n\t        if login:\n\t            login.click()\n\t            time.sleep(3)\n\t            self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t            self.auto.switch_to_window(-1)\n\t            self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        join = self.auto.try_find(\"//div[contains(text(),'Join Venom Testnet')]\")\n", "        if join:\n\t            join.click()\n\t            time.sleep(3)\n\t            self.auto.confirm(password=account['password'])\n\t        self.auto.switch_to_window(-1)\n\t        url = f\"https://venom.network/tasks\"\n\t        self.driver.get(url)\n\t        time.sleep(2)\n\t        self._connect_wallet()\n\t        self.auto.switch_to_window(0)\n", "        self._daily_faucet(account)\n\t        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[0],\n\t    }\n\t    params = {\n\t        \"list_add\": list_account,\n\t        \"answer\": DAILY_ANSWER,\n", "    }\n\t    try:\n\t        vn = Snipa(\n\t            use_uc=True,\n\t            params=params,\n\t        )\n\t        vn.process_all(method=\"incentive\")\n\t        # vn.incentive(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/venom_bridge.py", "chunked_list": ["import time\n\tfrom selenium.webdriver.common.by import By\n\tfrom wallet import venom\n\tfrom app.account import AccountLoader\n\tfrom app.base import VenomAuto\n\tfrom app.config import get_logger, ACC_VENOM_PATH\n\tlogger = get_logger(__name__)\n\tCONFIG = {\n\t    \"environment\": \"test\",\n\t    \"mainnet\": {\n", "    },\n\t    \"test\": {\n\t        \"task\": {\n\t            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n\t            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n\t            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n\t            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n\t        },\n\t        \"app\": {\n\t            \"venom_bridge\": \"https://testnet.venombridge.com\",\n", "        }\n\t    },\n\t}\n\tclass VenomBridge(VenomAuto):\n\t    def __init__(self, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.environment = CONFIG['environment']\n\t        self.config = CONFIG[self.environment]\n\t    def bridge(self, account: dict = None):\n\t        self.driver.get(f\"{self.config['app']['venom_bridge']}/bridge\")\n", "        time.sleep(2)\n\t        # setup metamask with seed phrase and password\n\t        self.auto.switch_to_window(0)\n\t        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\t        self.auto.switch_to_window(0)\n\t        self.auto.metamaskSetup()\n\t        self.auto.switch_to_window(0)\n\t        self.driver.refresh()\n\t        time.sleep(4)\n\t        # connect venom wallet\n", "        self.auto.click('//*[@id=\"root\"]/div/header/div[2]/div/div[1]/div/button/span', 2)\n\t        self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\t        # connect metamask wallet\n\t        self.auto.click('//*[@id=\"root\"]/div/header/div[2]/div/div[2]/div/button/span', 2)\n\t        self.auto.click(\"//div[contains(text(),'MetaMask')]\", 3)\n\t        # click on the Connect Wallet button\n\t        self.auto.switch_to_window(0)\n\t        self.driver.get(self.config['app']['venom_stake'])\n", "        time.sleep(8)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect Wallet')]\", 3)\n\t        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n\t        self.auto.switch_to_window(-1)\n\t        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 10)\n\t        # stake\n\t        self.auto.switch_to_window(0)\n\t        inputs = self.auto.try_find('//*[@id=\"app-wrapper\"]/div[2]/div[3]/div/div/div[3]/div/div[2]/div[1]/input')\n\t        inputs.send_keys('3')\n\t        stake_buttons = self.auto.try_finds(\"//div[text()='Stake']\")\n", "        stake_buttons[2].click()\n\t        time.sleep(2)\n\t        self.auto.confirm(account['password'])\n\t        logger.info(f\"Incentive success\")\n\tif __name__ == '__main__':\n\t    # list_account = AccountLoader().parser_file()\n\t    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\t    swap_params = {\n\t        \"account\": list_account[2],\n\t    }\n", "    params = {\n\t        \"list_add\": list_account,\n\t        \"answer\": \"All of the above\",\n\t    }\n\t    try:\n\t        vn = VenomBridge(\n\t            use_uc=True,\n\t            params=params\n\t        )\n\t        vn.process_all(method=\"bridge\")\n", "        # vn.bridge(**swap_params)\n\t    except Exception as e:\n\t        logger.error(e)\n"]}
{"filename": "app/scripts/tweet.py", "chunked_list": ["# Desc: Tweet 20 words from the GPT-3.5 model\n\timport textwrap\n\tfrom app.chatgpt import tweet\n\tif __name__ == '__main__':\n\t    res = textwrap.fill(tweet().replace('\"', ''), 80)\n\t    print(res)\n"]}
{"filename": "app/scripts/reboot.py", "chunked_list": ["from app import utils\n\tif __name__ == '__main__':\n\t    utils.change_network()\n"]}
{"filename": "app/scripts/clean_data_user.py", "chunked_list": ["# Desc: Tweet 20 words from the GPT-3.5 model\n\timport os\n\timport shutil\n\tfrom app.account import AccountLoader\n\tfrom app.config import ALL_USER_DATA_DIR, CODE_HOME\n\tfrom app import utils\n\tif __name__ == '__main__':\n\t    dir_name = '049d583a4428d3567541a094de4293e02eb6f2d26ae281583c20357a4f66973f'\n\t    fp = \"account.venom_dietwt.csv\"\n\t    list_faucet_acc = AccountLoader(fp=f\"{CODE_HOME}/{fp}\").parser_file()\n", "    for a in list_faucet_acc:\n\t        # check dir is exists\n\t        target_dir = os.path.join(ALL_USER_DATA_DIR, utils.cook_address(a['address']))\n\t        if os.path.exists(target_dir) and os.path.isdir(target_dir):\n\t            shutil.rmtree(target_dir)\n"]}
{"filename": "app/scripts/otp.py", "chunked_list": ["import sys\n\tfrom app import utils\n\tif __name__ == '__main__':\n\t    secret = sys.argv[1]\n\t    otp = utils.totp(secret)\n\t    print(otp)\n"]}
