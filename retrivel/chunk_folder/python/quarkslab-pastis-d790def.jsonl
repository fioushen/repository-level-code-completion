{"filename": "setup.py", "chunked_list": ["#!/usr/bin/env python3\n\t# coding: utf-8\n\t\"\"\"Installation script for PASTIS.\"\"\"\n\tfrom setuptools import setup\n\twith open(\"README.md\") as f:\n\t    lines = f.readlines()\n\t    README = \"\\n\".join(lines[4:7]+lines[51:])\n\tsetup(\n\t    name=\"pastis-framework\",\n\t    version=\"1.0.4\",\n", "    description=\"PASTIS framework for collaborative fuzzing\",\n\t    long_description=README,\n\t    long_description_content_type='text/markdown',\n\t    packages=[\n\t        \"libpastis\",\n\t        \"libpastis.proto\",\n\t        \"pastisbroker\",\n\t        \"pastisbenchmark\",\n\t        \"pastisaflpp\",\n\t        \"aflppbroker\",\n", "        \"pastishf\",\n\t        \"hfbroker\",\n\t        \"pastisdse\",\n\t        \"pastisttbroker\"\n\t    ],\n\t    package_dir={\n\t        # AFL++\n\t        \"pastisaflpp\": \"engines/pastis-aflpp/pastisaflpp\",\n\t        \"aflppbroker\": \"engines/pastis-aflpp/broker-addon/aflppbroker\",\n\t        # Honggfuzz\n", "        \"pastishf\": \"engines/pastis-honggfuzz/pastishf\",\n\t        \"hfbroker\": \"engines/pastis-honggfuzz/broker-addon/hfbroker\",\n\t        # Triton\n\t        \"pastisdse\": \"engines/pastis-triton/pastisdse\",\n\t        \"pastisttbroker\": \"engines/pastis-triton/broker-addon/pastisttbroker\"\n\t    },\n\t    url=\"https://github.com/quarkslab/pastis\",\n\t    project_urls={\n\t        \"Documentation\": \"https://quarkslab.github.io/pastis/\",\n\t        \"Bug Tracker\": \"https://github.com/quarkslab/pastis/issues\",\n", "        \"Source\": \"https://github.com/quarkslab/pastis\"\n\t    },\n\t    setup_requires=[],\n\t    install_requires=[\n\t        \"protobuf\",\n\t        \"pyzmq\",\n\t        \"psutil\",\n\t        \"aenum\",\n\t        \"lief\",\n\t        \"python-magic\",\n", "        \"click\",\n\t        \"coloredlogs\",\n\t        \"quokka-project\",\n\t        \"watchdog\",\n\t        \"pydantic\",\n\t        \"matplotlib\",\n\t        \"joblib\",\n\t        \"rich\",\n\t        \"tritondse\",\n\t    ],\n", "    tests_require=[],\n\t    license=\"AGPL-3.0\",\n\t    author=\"Quarkslab\",\n\t    classifiers=[\n\t        'Topic :: Security',\n\t        'Environment :: Console',\n\t        'Operating System :: OS Independent',\n\t    ],\n\t    test_suite=\"\",\n\t    scripts=[\n", "        'bin/pastis-broker',\n\t        'bin/pastis-benchmark',\n\t        'bin/pastisd',\n\t        'engines/pastis-honggfuzz/bin/pastis-honggfuzz',\n\t        'engines/pastis-triton/bin/pastis-triton',\n\t        'engines/pastis-aflpp/bin/pastis-aflpp'\n\t    ]\n\t)\n"]}
{"filename": "engines/pastis-honggfuzz/broker-addon/hfbroker/__init__.py", "chunked_list": ["# built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Union, Tuple, List, Optional\n\timport json\n\t# third-party import\n\timport lief\n\tfrom typing import Type\n\tfrom libpastis import FuzzingEngineDescriptor, EngineConfiguration\n\tfrom libpastis.types import ExecMode, CoverageMode, FuzzMode\n\tclass HonggfuzzConfigurationInterface(EngineConfiguration):\n", "    def __init__(self, args: List[str] = None):\n\t        self._argvs = [] if args is None else args # Argument to send on the command line\n\t    @staticmethod\n\t    def new() -> 'HonggfuzzConfigurationInterface':\n\t        return HonggfuzzConfigurationInterface()\n\t    @staticmethod\n\t    def from_file(filepath: Path) -> 'HonggfuzzConfigurationInterface':\n\t        with open(filepath, \"r\") as f:\n\t            return HonggfuzzConfigurationInterface(f.read().split())\n\t    @staticmethod\n", "    def from_str(s: str) -> 'HonggfuzzConfigurationInterface':\n\t        return HonggfuzzConfigurationInterface(s.split())\n\t    def to_str(self) -> str:\n\t        return \" \".join(self._argvs)\n\t    def get_coverage_mode(self) -> CoverageMode:\n\t        \"\"\"\n\t        Current coverage mode selected in the file.\n\t        Always EDGE for Honggfuzz\n\t        \"\"\"\n\t        return CoverageMode.AUTO\n", "    def set_target(self, target: int) -> None:\n\t        # Note: Giving a target to Honggfuzz does not\n\t        # do anything as Honggfuzz is not directed.\n\t        pass\n\tclass HonggfuzzEngineDescriptor(FuzzingEngineDescriptor):\n\t    NAME = \"HONGGFUZZ\"\n\t    SHORT_NAME = \"HF\"\n\t    VERSION = \"1.0.0\"  # Should be in sync with hfwrapper.__version__\n\t    HF_PERSISTENT_SIG = b\"\\x01_LIBHFUZZ_PERSISTENT_BINARY_SIGNATURE_\\x02\\xFF\"\n\t    config_class = HonggfuzzConfigurationInterface\n", "    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def accept_file(binary_file: Path) -> Tuple[bool, Optional[ExecMode], Optional[FuzzMode]]:\n\t        p = lief.parse(str(binary_file))\n\t        if not p:\n\t            return False, None, None\n\t        # Search for HF instrumentation\n\t        instrumented = False\n\t        for f in p.functions:\n", "            if \"hfuzz_\" in f.name:\n\t                instrumented = True\n\t                break\n\t        if not instrumented:\n\t            return True, ExecMode.PERSISTENT, FuzzMode.BINARY_ONLY\n\t        # Search for persistent magic\n\t        exmode = ExecMode.SINGLE_EXEC  # by default single_exec\n\t        sections = {x.name: x for x in p.sections}\n\t        if '.rodata' in sections:\n\t            rodata_content = bytearray(sections['.rodata'].content)\n", "            if HonggfuzzEngineDescriptor.HF_PERSISTENT_SIG in rodata_content:\n\t                exmode = ExecMode.PERSISTENT\n\t        else:\n\t            if 'HF_ITER' in (x.name for x in p.imported_functions):  # More dummy method\n\t                exmode = ExecMode.PERSISTENT\n\t        return True, exmode, FuzzMode.INSTRUMENTED\n\t    @staticmethod\n\t    def supported_coverage_strategies() -> List[CoverageMode]:\n\t        return [CoverageMode.AUTO]\n"]}
{"filename": "engines/pastis-honggfuzz/pastishf/replay.py", "chunked_list": ["import subprocess\n\tfrom io import BytesIO\n\tfrom typing import Optional, List, Tuple\n\timport re\n\timport logging\n\tEXAMPLES = '''\n\tREGEX_1:\n\t==373876==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffecfb907a4 at pc 0x00000043e9e7 bp 0x7ffecfb90660 sp 0x7ffecfb8fdf8\n\tREGEX_2:\n\t==372317==AddressSanitizer: WARNING: unexpected format specifier in printf interceptor: %ï¿½ (reported once per process)\n", "==372317==AddressSanitizer CHECK failed: /build/llvm-toolchain-9-NoMHhU/llvm-toolchain-9-9.0.1/compiler-rt/lib/asan/../sanitizer_common/sani\n\t'''\n\tclass Replay(object):\n\t    INTRINSIC_REGEX = rb\".*REACHED ID (\\d+)\"\n\t    ASAN_REGEX_1 = rb\"^==\\d+==ERROR: AddressSanitizer: (\\S+) (.*)\"\n\t    ASAN_REGEX_2 = rb\"^==\\d+==AddressSanitizer:? ([^:]+): (.*)\"\n\t    HF_FETCH = b\"HonggfuzzFetchData()\"\n\t    def __init__(self):\n\t        self._process = None\n\t        self._alert_covered = []\n", "        self._alert_crash = None\n\t        self._is_hang = False\n\t        self._asan_line = \"\"\n\t        self._asan_bugtype = \"\"\n\t        self._is_hf_fetch = False\n\t        # For debugging\n\t        self.stdout, self.stderr = None, None\n\t    @staticmethod\n\t    def run(binary_path: str, args: List[str] = [], stdin_file=None, timeout=None, cwd=None):\n\t        replay = Replay()\n", "        replay._process = subprocess.Popen([binary_path]+args, stdin=open(stdin_file, 'rb'), stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)\n\t        try:\n\t            replay.stdout, replay.stderr = replay._process.communicate(timeout=timeout)\n\t            found = replay.__parse_output(replay.stdout)  # In case intrinsic are on output\n\t            found |= replay.__parse_output(replay.stderr)\n\t            if not found and replay.has_crashed():  # Crash that we were not able to link to an ASAN error\n\t                if replay._alert_covered: # Thus take the latest alert and consider it is the origin\n\t                    replay._alert_crash = replay._alert_covered[-1]\n\t        except subprocess.TimeoutExpired:\n\t            replay._is_hang = True\n", "        return replay\n\t    def is_asan_without_crash(self) -> bool:\n\t        \"\"\" Return True if an ASAN WARNING was shown without errors \"\"\"\n\t        return self._asan_bugtype and not self.has_crashed()\n\t    def is_hf_iter_crash(self) -> bool:\n\t        \"\"\"\n\t        Check we did not hit a call to HF_ITER that would lead\n\t        to such unexpected return code -1\n\t        \"\"\"\n\t        return self._is_hf_fetch and self.has_crashed()\n", "    @property\n\t    def returncode(self) -> int:\n\t        return self._process.returncode\n\t    @property\n\t    def alert_covered(self) -> List[int]:\n\t        \"\"\" Alert covered \"\"\"\n\t        return self._alert_covered\n\t    def has_hanged(self) -> bool:\n\t        \"\"\" Return true if the target hanged during its replay \"\"\"\n\t        return self._is_hang\n", "    def has_crashed(self) -> bool:\n\t        \"\"\" Return whether the execution has crashed or not \"\"\"\n\t        if self._process.returncode:\n\t            return self._process.returncode != 0\n\t        else:\n\t            return False\n\t    @property\n\t    def crashing_id(self) -> Optional[int]:\n\t        \"\"\" Return the alert identifier that made the program to crash (last one seen) \"\"\"\n\t        return self._alert_crash\n", "    def asan_info(self) -> Tuple[str, str]:\n\t        \"\"\" In case of crash return ASAN info gather by parsing \"\"\"\n\t        return self._asan_bugtype, self._asan_line\n\t    def __parse_output(self, raw_output: bytes) -> bool:\n\t        \"\"\" Return True if a vuln was matched \"\"\"\n\t        matched_vuln = False\n\t        for line in BytesIO(raw_output).readlines():\n\t            # Check if its a line of intrinsic output\n\t            m = re.match(self.INTRINSIC_REGEX, line)\n\t            if m:\n", "                id = int(m.groups()[0])\n\t                self._alert_covered.append(id)\n\t            # Check if its a line of ASAN\n\t            m1 = re.match(self.ASAN_REGEX_1, line)\n\t            m2 = re.match(self.ASAN_REGEX_2, line)\n\t            if m1 or m2:\n\t                if matched_vuln:\n\t                    logging.warning(f\"already matched ASAN with {self._asan_bugtype} now {m1.groups() if m1 else m2.groups()}\")\n\t                    continue\n\t                matched_vuln = True\n", "                if self._alert_covered: # Try getting last alert (and consider it to be the origin)\n\t                    self._alert_crash = self._alert_covered[-1]\n\t                # Else cannot link the crash to an ID\n\t                # Extract end of line and parameter\n\t                topic, details = m1.groups() if m1 else m2.groups()\n\t                self._asan_bugtype = topic.decode(errors=\"replace\")\n\t                self._asan_line = details.decode(errors=\"replace\")\n\t            if self.HF_FETCH in line:  # In case it is an issue with a HF_ITER read\n\t                self._is_hf_fetch = True\n\t        return matched_vuln\n"]}
{"filename": "engines/pastis-honggfuzz/pastishf/workspace.py", "chunked_list": ["# builtin imports\n\tfrom typing import Callable\n\timport time\n\timport tempfile\n\timport os\n\timport logging\n\tfrom pathlib import Path\n\tfrom hashlib import md5\n\t# third-party imports\n\tfrom watchdog.events import FileSystemEventHandler\n", "from watchdog.observers import Observer\n\tclass Workspace(FileSystemEventHandler):\n\t    HFUZZ_WS_ENV_VAR = \"HFUZZ_WS\"\n\t    DEFAULT_WS_PATH = \"hfuzz_workspace\"\n\t    STATS_FILE = \"statsfile.log\"\n\t    def __init__(self):\n\t        self.observer = Observer()\n\t        self.modif_callbacks = {}  # Map fullpath -> callback\n\t        self.created_callbacks = {}\n\t        self.root_dir = None\n", "        self._setup_workspace()\n\t    def _setup_workspace(self):\n\t        ws = os.environ.get(self.HFUZZ_WS_ENV_VAR, None)\n\t        if ws is None:\n\t            self.root_dir = (Path(tempfile.gettempdir()) / self.DEFAULT_WS_PATH) / str(time.time()).replace(\".\", \"\")\n\t        else:\n\t            self.root_dir = Path(ws)  # Use the one provided\n\t        for d in [self.target_dir, self.input_dir, self.dynamic_input_dir, self.corpus_dir, self.crash_dir, self.stats_dir]:\n\t            d.mkdir(parents=True)\n\t    @property\n", "    def target_dir(self):\n\t        return self.root_dir / 'target'\n\t    @property\n\t    def input_dir(self):\n\t        return self.root_dir / 'inputs' / 'initial'\n\t    @property\n\t    def dynamic_input_dir(self):\n\t        return self.root_dir / 'inputs' / 'dynamic'\n\t    @property\n\t    def corpus_dir(self):\n", "        return self.root_dir / 'outputs' / 'coverage'\n\t    @property\n\t    def crash_dir(self):\n\t        return self.root_dir / 'outputs' / 'crashes'\n\t    @property\n\t    def stats_dir(self):\n\t        return self.root_dir / 'stats'\n\t    @property\n\t    def stats_file(self):\n\t        return self.stats_dir / self.STATS_FILE\n", "    def on_modified(self, event):\n\t        path = Path(event.src_path)\n\t        if path.is_dir():\n\t            return  # We don't care about directories\n\t        if path.parent in self.modif_callbacks:\n\t            self.modif_callbacks[path.parent](path)  # call the callback\n\t        else:\n\t            pass  # Do nothing at the moment\n\t    def on_created(self, event):\n\t        path = Path(event.src_path)\n", "        if path.is_dir():\n\t            return  # We don't care about directories\n\t        if path.parent in self.created_callbacks:\n\t            self.created_callbacks[path.parent](path)  # call the callback\n\t        else:\n\t            pass  # Do nothing at the moment\n\t    def add_file_modification_hook(self, path: str, callback: Callable):\n\t        self.observer.schedule(self, path=path, recursive=True)\n\t        self.modif_callbacks[path] = callback\n\t    def add_creation_hook(self, path: str, callback: Callable):\n", "        self.observer.schedule(self, path=path, recursive=True)\n\t        self.created_callbacks[path] = callback\n\t    def start(self):\n\t        self.observer.start()\n\t    def stop(self):\n\t        self.observer.stop()\n"]}
{"filename": "engines/pastis-honggfuzz/pastishf/driver.py", "chunked_list": ["# builtin imports\n\timport logging\n\tfrom pathlib import Path\n\timport stat\n\timport threading\n\timport time\n\timport tempfile\n\timport hashlib\n\tfrom typing import List, Union\n\t# Pastis & triton imports\n", "from libpastis import ClientAgent, BinaryPackage, SASTReport\n\tfrom libpastis.types import CheckMode, CoverageMode, ExecMode, FuzzingEngineInfo, SeedInjectLoc, SeedType, State, \\\n\t                            LogLevel, AlertData, FuzzMode\n\t# Local imports\n\timport pastishf\n\tfrom pastishf.replay import Replay\n\tfrom pastishf.honggfuzz import HonggfuzzProcess\n\tfrom pastishf.workspace import Workspace\n\t# Inotify logs are very talkative, set them to ERROR\n\tfor logger in (logging.getLogger(x) for x in [\"watchdog.observers.inotify_buffer\", 'watchdog.observers', \"watchdog\"]):\n", "    logger.setLevel(logging.ERROR)\n\tclass HonggfuzzDriver:\n\t    def __init__(self, agent: ClientAgent, telemetry_frequency: int = 30):\n\t        # Internal objects\n\t        self._agent = agent\n\t        self.workspace = Workspace()\n\t        self.honggfuzz = HonggfuzzProcess()\n\t        # Parameters received through start_received\n\t        self.__exec_mode = None   # SINGLE_RUN, PERSISTENT\n\t        self.__check_mode = None  # CHECK_ALL, ALERT_ONLY\n", "        self.__seed_inj = None    # STDIN or ARGV\n\t        self.__report = None      # SAST report if provided\n\t        # Target data\n\t        self.__package = None\n\t        self.__target_args = None  # Kept for replay\n\t        self.__setup_agent()\n\t        # Configure hookds on workspace\n\t        self.workspace.add_creation_hook(self.workspace.corpus_dir, self.__send_seed)\n\t        self.workspace.add_creation_hook(self.workspace.crash_dir, self.__send_crash)\n\t        self.workspace.add_file_modification_hook(self.workspace.stats_dir, self.__send_telemetry)\n", "        # Telemetry frequency\n\t        self._tel_frequency = telemetry_frequency\n\t        self._tel_last = time.time()\n\t        # Runtime data\n\t        self._tot_seeds = 0\n\t        self._seed_recvs = set()  # Seed received to make sure NOT to send them back\n\t        # Variables for replay\n\t        self._replay_thread = None\n\t        self._queue_to_send = []\n\t        self._started = False\n", "    @staticmethod\n\t    def hash_seed(seed: bytes):\n\t        return hashlib.md5(seed).hexdigest()\n\t    def start(self, package: BinaryPackage, argv: List[str], exmode: ExecMode, fuzzmode: FuzzMode,\n\t              seed_inj: SeedInjectLoc, engine_args: str):\n\t        # Write target to disk.\n\t        self.__package = package\n\t        self.__target_args = argv\n\t        self.workspace.start()  # Start looking at directories\n\t        logging.info(\"Start process\")\n", "        if not self.honggfuzz.start(str(self.__package.executable_path.absolute()),\n\t                             argv,\n\t                             self.workspace,\n\t                             exmode,\n\t                             fuzzmode,\n\t                             seed_inj == SeedInjectLoc.STDIN,\n\t                             engine_args,\n\t                             str(package.dictionary.absolute()) if package.dictionary else None):\n\t            self._agent.send_log(LogLevel.ERROR, \"Cannot start target\")\n\t        self._started = True\n", "        # Start the replay worker (note that the queue might already have started to be filled by agent thread)\n\t        self._replay_thread = threading.Thread(target=self.replay_worker, daemon=True)\n\t        self._replay_thread.start()\n\t    def stop(self):\n\t        self.honggfuzz.stop()\n\t        self.workspace.stop()\n\t        self._started = False  # should stop the replay thread\n\t    def replay_worker(self):\n\t        while True:\n\t            if not self._started:\n", "                break  # Break when the fuzzer stops\n\t            if self._queue_to_send:\n\t                filename, res = self._queue_to_send.pop(0)\n\t                if not self.__check_seed_alert(filename, is_crash=res):\n\t                    break\n\t            time.sleep(0.05)\n\t    @property\n\t    def started(self):\n\t        return self._started\n\t    def add_seed(self, seed: bytes):\n", "        seed_path = self.workspace.dynamic_input_dir / f\"seed-{hashlib.md5(seed).hexdigest()}\"\n\t        seed_path.write_bytes(seed)\n\t    def init_agent(self, remote: str = \"localhost\", port: int = 5555):\n\t        self._agent.register_start_callback(self.start_received)  # Register start because launched manually (not by pastisd)\n\t        self._agent.connect(remote, port)\n\t        self._agent.start()\n\t        # Send initial HELLO message, whick will make the Broker send the START message.\n\t        self._agent.send_hello([FuzzingEngineInfo(\"HONGGFUZZ\", pastishf.__version__, \"hfbroker\")])\n\t    def run(self):\n\t        self.honggfuzz.wait()\n", "    def __setup_agent(self):\n\t        # Register callbacks.\n\t        self._agent.register_seed_callback(self.__seed_received)\n\t        self._agent.register_stop_callback(self.__stop_received)\n\t    def __send_seed(self, filename: Path):\n\t        self.__send(filename, SeedType.INPUT)\n\t    def __send_crash(self, filename: Path):\n\t        self.__send(filename, SeedType.CRASH)\n\t    def __send(self, filename: Path, typ: SeedType):\n\t        self._tot_seeds += 1\n", "        file = Path(filename)\n\t        raw = file.read_bytes()\n\t        h = self.hash_seed(raw)\n\t        logging.debug(f'[{typ.name}] Sending new: {h} [{self._tot_seeds}]')\n\t        if h not in self._seed_recvs:\n\t            self._agent.send_seed(typ, raw)\n\t        else:\n\t            logging.info(\"seed (previously sent) do not send it back\")\n\t        self._queue_to_send.append((filename, True if typ == SeedType.CRASH else False))\n\t    def __check_seed_alert(self, filename: Path, is_crash: bool) -> bool:\n", "        p = Path(filename)\n\t        # Only rerun the seed if in alert only mode and a SAST report was provided\n\t        if self.__check_mode == CheckMode.ALERT_ONLY and self.__report:\n\t            # Rerun the program with the seed\n\t            run = Replay.run(self.__package.executable_path.absolute(), self.__target_args, stdin_file=filename, timeout=5, cwd=str(self.workspace.target_dir))\n\t            if run.is_hf_iter_crash():\n\t                self.dual_log(LogLevel.ERROR, f\"Disable replay engine (because code uses HF_ITER)\")\n\t                return False\n\t            # Iterate all covered alerts\n\t            for id in run.alert_covered:\n", "                alert = self.__report.get_alert(id)\n\t                if not alert.covered:\n\t                    alert.covered = True\n\t                    logging.info(f\"New alert covered {alert} [{alert.id}]\")\n\t                    self._agent.send_alert_data(AlertData(alert.id, alert.covered, False, p.read_bytes()))\n\t            # Check if the target has crashed and if so tell the broker which one\n\t            if run.has_crashed() or run.is_asan_without_crash():  # Also consider ASAN warning as detection\n\t                if not run.crashing_id:\n\t                    self.dual_log(LogLevel.WARNING, f\"Crash on {filename.name} but can't link it to a SAST alert\")\n\t                else:\n", "                    alert = self.__report.get_alert(run.crashing_id)\n\t                    if not alert.validated:\n\t                        alert.validated = True\n\t                        bugt, aline = run.asan_info()\n\t                        self.dual_log(LogLevel.INFO, f\"Honggfuzz new alert validated {alert} [{alert.id}] ({aline})  (asan no crash: {run.is_asan_without_crash()})\")\n\t                        self._agent.send_alert_data(AlertData(alert.id, alert.covered, alert.validated, p.read_bytes()))\n\t            else:\n\t                if is_crash:\n\t                    self.dual_log(LogLevel.WARNING, f\"crash not reproducible by rerunning seed: {filename.name}\")\n\t            if run.has_hanged():  # Honggfuzz does not stores 'hangs' it will have been sent as corpus or crash\n", "                self.dual_log(LogLevel.WARNING, f\"Seed {filename} was hanging in replay\")\n\t        return True\n\t    def __send_telemetry(self, filename: Path):\n\t        now = time.time()\n\t        if now < (self._tel_last + self._tel_frequency):\n\t            return\n\t        self._tel_last = now\n\t        logging.debug(f'[TELEMETRY] Stats file updated: {filename}')\n\t        with open(filename, 'r') as stats_file:\n\t            try:\n", "                stats = stats_file.readlines()[-1]\n\t                if not stats or stats.startswith(\"#\"):\n\t                    return\n\t                stats = stats.split(',')\n\t                # Stats format:\n\t                #   unix_time, last_cov_update, total_exec, exec_per_sec,\n\t                #   crashes, unique_crashes, hangs, edge_cov, block_cov\n\t                state = State.RUNNING\n\t                last_cov_update = int(stats[1])\n\t                total_exec = int(stats[2])\n", "                exec_per_sec = int(stats[3])\n\t                timeout = int(stats[6])             # aka hangs.\n\t                coverage_edge = int(stats[7])       # aka edge_cov.\n\t                coverage_block = int(stats[8])      # aka block_cov.\n\t                # NOTE: `cycle` and `coverage_path` does not apply for Honggfuzz.\n\t                self._agent.send_telemetry(state=state,\n\t                                           exec_per_sec=exec_per_sec,\n\t                                           total_exec=total_exec,\n\t                                           timeout=timeout,\n\t                                           coverage_block=coverage_block,\n", "                                           coverage_edge=coverage_edge,\n\t                                           last_cov_update=last_cov_update)\n\t            except:\n\t                logging.error(f'Error retrieving stats!')\n\t    def start_received(self, fname: str, binary: bytes, engine: FuzzingEngineInfo, exmode: ExecMode, fuzzmode: FuzzMode, chkmode: CheckMode,\n\t                       _: CoverageMode, seed_inj: SeedInjectLoc, engine_args: str, argv: List[str], sast_report: str = None):\n\t        logging.info(f\"[START] bin:{fname} engine:{engine.name} exmode:{exmode.name} fuzzmode:{fuzzmode.name} seedloc:{seed_inj.name} chk:{chkmode.name}\")\n\t        if self.started:\n\t            self._agent.send_log(LogLevel.CRITICAL, \"Instance already started!\")\n\t            return\n", "        if engine.name != \"HONGGFUZZ\":\n\t            logging.error(f\"Wrong fuzzing engine received {engine.name} while I am Honggfuzz\")\n\t            self._agent.send_log(LogLevel.ERROR, f\"Invalid fuzzing engine received {engine.name} can't do anything\")\n\t            return\n\t        if engine.version != pastishf.__version__:\n\t            logging.error(f\"Wrong fuzzing engine version {engine.version} received\")\n\t            self._agent.send_log(LogLevel.ERROR, f\"Invalid fuzzing engine version {engine.version} do nothing\")\n\t            return\n\t        # Retrieve package out of the binary received\n\t        try:\n", "            package = BinaryPackage.from_binary(fname, binary, self.workspace.target_dir)\n\t        except FileNotFoundError:\n\t            logging.error(\"Invalid package received\")\n\t            return\n\t        if sast_report:\n\t            logging.info(\"Loading SAST report\")\n\t            self.__report = SASTReport.from_json(sast_report)\n\t        self.__check_mode = chkmode  # CHECK_ALL, ALERT_ONLY\n\t        self.start(package, argv, exmode, fuzzmode, seed_inj, engine_args)\n\t    def __seed_received(self, typ: SeedType, seed: bytes):\n", "        h = self.hash_seed(seed)\n\t        logging.info(f\"[SEED] received  {h} ({typ.name})\")\n\t        self._seed_recvs.add(h)\n\t        # HACK: Maybe doing it more nicely ?\n\t        if len(seed) > 1024*8: # HF_INPUT_DEFAULT_SIZE\n\t            logging.debug(f\"crop seed {h} received to fit 8Kb\")\n\t            seed = seed[:1024*8]\n\t        self.add_seed(seed)\n\t    def __stop_received(self):\n\t        logging.info(f\"[STOP]\")\n", "        self.stop()\n\t    def dual_log(self, level: LogLevel, message: str) -> None:\n\t        \"\"\"\n\t        Helper function to log message both in the local log system and also\n\t        to the broker.\n\t        :param level: LogLevel message type\n\t        :param message: string message to log\n\t        :return: None\n\t        \"\"\"\n\t        mapper = {LogLevel.DEBUG: \"debug\",\n", "                  LogLevel.INFO: \"info\",\n\t                  LogLevel.CRITICAL: \"critical\",\n\t                  LogLevel.WARNING: \"warning\",\n\t                  LogLevel.ERROR: \"error\"}\n\t        log_f = getattr(logging, mapper[level])\n\t        log_f(message)\n\t        self._agent.send_log(level, message)\n\t    def add_initial_seed(self, file: Union[str, Path]):\n\t        p = Path(file)\n\t        logging.info(f\"add initial seed {file.name}\")\n", "        # Write seed to disk.\n\t        seed_path = self.workspace.input_dir / p.name\n\t        seed_path.write_bytes(p.read_bytes())\n\t    @staticmethod\n\t    def honggfuzz_available() -> bool:\n\t        return HonggfuzzProcess.hfuzz_environ_check()\n"]}
{"filename": "engines/pastis-honggfuzz/pastishf/__init__.py", "chunked_list": ["import os\n\tfrom pathlib import Path\n\tfrom typing import Optional\n\timport subprocess\n\tfrom .driver import HonggfuzzDriver\n\tfrom .replay import Replay\n\tfrom .honggfuzz import HonggfuzzProcess, HonggfuzzNotFound\n\tfrom .workspace import Workspace\n\t__version__ = \"1.0.0\"\n\t# Honggfuzz env variables\n", "HFUZZ_ENV_VAR = \"HFUZZ_WS\"\n\tHFUZZ_PATH_VAR = \"HFUZZ_PATH\"\n\tHFUZZ_THREADS = \"HFUZZ_THREADS\"\n\tdef spawn_online_honggfuzz(workspace: Optional[Path], hf_path: Optional[str], port: int = 5555, threads: int=0):\n\t    env = os.environ\n\t    env[HFUZZ_ENV_VAR] = str(workspace.absolute())\n\t    if hf_path:\n\t        env[HFUZZ_PATH_VAR] = str(hf_path)\n\t    if threads:\n\t        env[HFUZZ_THREADS] = str(threads)\n", "    cmd_line_honggfuzz = [\"pastis-honggfuzz\", \"online\", \"-p\", f\"{port}\"]\n\t    subprocess.Popen(cmd_line_honggfuzz, env=env, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n"]}
{"filename": "engines/pastis-honggfuzz/pastishf/honggfuzz.py", "chunked_list": ["import logging\n\timport os\n\timport subprocess\n\timport re\n\timport signal\n\timport time\n\tfrom pathlib import Path\n\tfrom typing import Optional\n\tfrom libpastis.types import ExecMode, FuzzMode\n\t# Local imports\n", "from .workspace import Workspace\n\tclass HonggfuzzNotFound(Exception):\n\t    \"\"\" Issue raised on \"\"\"\n\t    pass\n\tclass HonggfuzzProcess:\n\t    HFUZZ_ENV_VAR = \"HFUZZ_PATH\"\n\t    HFUZZ_THREADS_VAR = \"HFUZZ_THREADS\"\n\t    BINARY = \"honggfuzz\"\n\t    STAT_FILE = \"statsfile.log\"\n\t    VERSION = \"2.1\"\n", "    def __init__(self, path: str = None):\n\t        path = os.environ.get(self.HFUZZ_ENV_VAR) if path is None else path\n\t        if path is None:\n\t            raise Exception(\"Invalid Honggfuzz path provided\")\n\t        path = Path(path)\n\t        if not path.exists():\n\t            raise Exception('Invalid HFUZZ_PATH path!')\n\t        elif path.is_file() and path.name == self.BINARY:\n\t            self.__path = path\n\t        elif path.is_dir():\n", "            self.__path = Path(path) / self.BINARY\n\t            if not path.exists():\n\t                raise Exception(\"Can't find honggfuzz in HFUZZ_PATH path!\")\n\t        self._threads = os.environ.get(self.HFUZZ_THREADS_VAR)\n\t        self.__process = None\n\t    def start(self, target: str, target_arguments: list[str], workspace: Workspace, exmode: ExecMode, fuzzmode: FuzzMode,\n\t              stdin: bool, engine_args: str, dictionary: Optional[str] = None) -> bool:\n\t        if not stdin:\n\t            if \"@@\" in target_arguments:  # Change '@@' for ___FILE___\n\t                idx = target_arguments.index(\"@@\")\n", "                target_arguments[idx] = \"___FILE___\"\n\t            else:\n\t                if \"___FILE___\" not in target_arguments:\n\t                    logging.error(f\"seed provided via ARGV but can't find '@@'/___FILE___ on program argv\")\n\t                    return False\n\t        # Build target command line.\n\t        target_cmdline = f\"{target} {' '.join(target_arguments)}\"\n\t        HFQBDI_LIB_PATH = os.getenv('HFQBDI_LIB_PATH')\n\t        if fuzzmode == FuzzMode.BINARY_ONLY and HFQBDI_LIB_PATH is None:\n\t            logging.error(f\"target in BINARY_ONLY but can't find HFQBDI_LIB_PATH\")\n", "            return False\n\t        # Build fuzzer arguments.\n\t        hfuzz_arguments = ' '.join([\n\t            f\"--statsfile {workspace.stats_file}\",\n\t            f\"--stdin_input\" if stdin else \"\",\n\t            f\"--persistent\" if exmode == ExecMode.PERSISTENT or fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n\t            f\"--env HFQBDI_FS=1\" if fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n\t            f\"--env LD_LIBRARY_PATH={HFQBDI_LIB_PATH}\" if fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n\t            f\"--env LD_PRELOAD={HFQBDI_LIB_PATH}/libHFQBDIpreload.so\" if fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n\t            f\"--env LD_BIND_NOW=1\" if fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n", "            re.sub(r\"\\s\", \" \", engine_args),  # Any arguments coming right from the broker (remove \\r\\n)\n\t            f\"--logfile logfile.log\",\n\t            f\"--input {workspace.input_dir}\",\n\t            f\"--dynamic_input {workspace.dynamic_input_dir}\",\n\t            f\"--output {workspace.corpus_dir}\",\n\t            f\"--crashdir {workspace.crash_dir}\",\n\t            f\"--workspace {workspace.root_dir}\",\n\t            f\"--threads {self._threads}\" if self._threads else \"\",\n\t            f\"--dict {dictionary}\" if dictionary is not None else \"\"\n\t        ])\n", "        # Build fuzzer command line.\n\t        hfuzz_cmdline = f'{self.__path} {hfuzz_arguments} -- {target_cmdline}'\n\t        logging.info(f\"Run Honggfuzz with: {hfuzz_cmdline}\")\n\t        logging.debug(f\"\\tWorkspace: {workspace.root_dir}\")\n\t        # Remove empty strings when converting the command to a list.\n\t        command = list(filter(None, hfuzz_cmdline.split(' ')))\n\t        # Create a new fuzzer process and set it apart into a new process group.\n\t        self.__process = subprocess.Popen(command, cwd=str(workspace.root_dir), preexec_fn=os.setsid)\n\t        logging.debug(f'Process pid: {self.__process.pid}')\n\t        return True\n", "    @property\n\t    def instanciated(self):\n\t        return self.__process is not None\n\t    def stop(self):\n\t        if self.__process:\n\t            logging.debug(f'Stopping process with pid: {self.__process.pid}')\n\t            os.killpg(os.getpgid(self.__process.pid), signal.SIGTERM)\n\t        else:\n\t            logging.debug(f\"Honggfuzz process seem's already killed\")\n\t    def wait(self):\n", "        while not self.instanciated:\n\t            time.sleep(0.1)\n\t        self.__process.wait()\n\t    @staticmethod\n\t    def hfuzz_environ_check() -> bool:\n\t        path = os.environ.get(HonggfuzzProcess.HFUZZ_ENV_VAR)\n\t        if path is None:\n\t            return False\n\t        else:\n\t            return (Path(path) / HonggfuzzProcess.BINARY).exists()\n"]}
{"filename": "engines/pastis-aflpp/pastisaflpp/aflpp.py", "chunked_list": ["# builtin imports\n\timport logging\n\timport os\n\timport re\n\timport signal\n\timport subprocess\n\timport time\n\tfrom typing import Optional, Union\n\tfrom pathlib import Path\n\t# third-party imports\n", "import shutil\n\tfrom libpastis.types import ExecMode, FuzzMode\n\t# Local imports\n\tfrom .workspace import Workspace\n\tclass AFLPPNotFound(Exception):\n\t    \"\"\" Issue raised on \"\"\"\n\t    pass\n\tclass AFLPPProcess:\n\t    AFLPP_ENV_VAR = \"AFLPP_PATH\"\n\t    BINARY = \"afl-fuzz\"\n", "    STAT_FILE = \"fuzzer_stats\"\n\t    VERSION = \"master\"\n\t    def __init__(self, path: str = None):\n\t        self.__path = self.find_alfpp_binary(path)\n\t        if self.__path is None:\n\t            raise FileNotFoundError(\"Can't find AFL++ path (afl-fuzz)\")\n\t        self.__process = None\n\t        self.__logfile = None\n\t    @staticmethod\n\t    def find_alfpp_binary(root_dir: Union[Path, str]) -> Optional[Path]:\n", "        if root_dir:\n\t            bin_path = Path(root_dir) / AFLPPProcess.BINARY\n\t            return bin_path if bin_path.exists() else None\n\t        else:\n\t            aflpp_path = os.environ.get(AFLPPProcess.AFLPP_ENV_VAR)\n\t            return Path(aflpp_path) / 'afl-fuzz' if aflpp_path else shutil.which(AFLPPProcess.BINARY)\n\t    def start(self, target: str, target_arguments: list[str], workspace: Workspace, exmode: ExecMode, fuzzmode: FuzzMode, stdin: bool, engine_args: str, cmplog: Optional[str] = None, dictionary: Optional[str] = None):\n\t        # Check that we have '@@' if input provided via argv\n\t        if not stdin:\n\t            if \"@@\" not in target_arguments:\n", "                logging.error(f\"seed provided via ARGV but can't find '@@' on program argv\")\n\t                return\n\t        # Build target command line.\n\t        target_cmdline = f\"{target} {' '.join(target_arguments)}\"\n\t        # Build fuzzer arguments.\n\t        # NOTE: Assuming the target receives inputs from stdin.\n\t        aflpp_arguments = ' '.join([\n\t            re.sub(r\"\\s\", \" \", engine_args),  # Any arguments coming right from the broker (remove \\r\\n)\n\t            f\"-Q\" if fuzzmode == FuzzMode.BINARY_ONLY else \"\",\n\t            f\"-M main\", # Master MODE, seed distribution is ensured by the broker\n", "            f\"-i {workspace.input_dir}\",\n\t            f\"-F {workspace.dynamic_input_dir}\",\n\t            f\"-o {workspace.output_dir}\",\n\t            f\"-c {cmplog}\" if cmplog is not None else \"\",\n\t            f\"-x {dictionary}\" if dictionary is not None else \"\"\n\t        ])\n\t        # Export environmental variables.\n\t        os.environ[\"AFL_NO_UI\"] = \"1\"\n\t        os.environ[\"AFL_QUIET\"] = \"1\"\n\t        os.environ[\"AFL_IMPORT_FIRST\"] = \"1\"\n", "        os.environ[\"AFL_AUTORESUME\"] = \"1\"\n\t        # NOTE This prevents having to configure the system before running\n\t        #      AFL++.\n\t        # TODO Should we skip these steps?\n\t        os.environ[\"AFL_SKIP_CPUFREQ\"] = \"1\"\n\t        os.environ[\"AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES\"] = \"1\"\n\t        # Build fuzzer command line.\n\t        aflpp_cmdline = f'{self.__path} {aflpp_arguments} -- {target_cmdline}'\n\t        logging.info(f\"Run AFL++: {aflpp_cmdline}\")\n\t        logging.debug(f\"\\tWorkspace: {workspace.root_dir}\")\n", "        # Remove empty strings when converting the command to a list.\n\t        command = list(filter(None, aflpp_cmdline.split(' ')))\n\t        # Open logfile (stdout will be redirected to this file).\n\t        self.__logfile = open(workspace.root_dir / 'logfile.log', 'w')\n\t        # Create a new fuzzer process and set it apart into a new process group.\n\t        self.__process = subprocess.Popen(command, cwd=str(workspace.root_dir), preexec_fn=os.setsid, stdout=self.__logfile)\n\t        logging.debug(f'Process pid: {self.__process.pid}')\n\t    @property\n\t    def instanciated(self):\n\t        return self.__process is not None\n", "    def stop(self):\n\t        if self.__process:\n\t            logging.debug(f'Stopping process with pid: {self.__process.pid}')\n\t            os.killpg(os.getpgid(self.__process.pid), signal.SIGTERM)\n\t        else:\n\t            logging.debug(f\"AFL++ process seems already killed\")\n\t        if self.__logfile:\n\t            self.__logfile.close()\n\t    def wait(self):\n\t        while not self.instanciated:\n", "            time.sleep(0.1)\n\t        self.__process.wait()\n\t        logging.info(f\"Fuzzer terminated with code : {self.__process.returncode}\")\n\t    @staticmethod\n\t    def aflpp_environ_check() -> bool:\n\t        return os.environ.get(AFLPPProcess.AFLPP_ENV_VAR) is not None\n"]}
{"filename": "engines/pastis-aflpp/pastisaflpp/replay.py", "chunked_list": ["import subprocess\n\tfrom io import BytesIO\n\tfrom typing import Optional, List, Tuple\n\timport re\n\timport logging\n\tEXAMPLES = '''\n\tREGEX_1:\n\t==373876==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffecfb907a4 at pc 0x00000043e9e7 bp 0x7ffecfb90660 sp 0x7ffecfb8fdf8\n\tREGEX_2:\n\t==372317==AddressSanitizer: WARNING: unexpected format specifier in printf interceptor: %ï¿½ (reported once per process)\n", "==372317==AddressSanitizer CHECK failed: /build/llvm-toolchain-9-NoMHhU/llvm-toolchain-9-9.0.1/compiler-rt/lib/asan/../sanitizer_common/sani\n\t'''\n\tclass Replay(object):\n\t    INTRINSIC_REGEX = rb\".*REACHED ID (\\d+)\"\n\t    ASAN_REGEX_1 = rb\"^==\\d+==ERROR: AddressSanitizer: (\\S+) (.*)\"\n\t    ASAN_REGEX_2 = rb\"^==\\d+==AddressSanitizer:? ([^:]+): (.*)\"\n\t    def __init__(self):\n\t        self._process = None\n\t        self._alert_covered = []\n\t        self._alert_crash = None\n", "        self._is_hang = False\n\t        self._asan_line = \"\"\n\t        self._asan_bugtype = \"\"\n\t        # For debugging\n\t        self.stdout, self.stderr = None, None\n\t    @staticmethod\n\t    def run(binary_path: str, args: List[str] = [], stdin_file=None, timeout=None, cwd=None):\n\t        replay = Replay()\n\t        replay._process = subprocess.Popen([binary_path]+args, stdin=open(stdin_file, 'rb'), stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)\n\t        try:\n", "            replay.stdout, replay.stderr = replay._process.communicate(timeout=timeout)\n\t            found = replay.__parse_output(replay.stdout)  # In case intrinsic are on output\n\t            found |= replay.__parse_output(replay.stderr)\n\t            if not found and replay.has_crashed():  # Crash that we were not able to link to an ASAN error\n\t                if replay._alert_covered: # Thus take the latest alert and consider it is the origin\n\t                    replay._alert_crash = replay._alert_covered[-1]\n\t        except subprocess.TimeoutExpired:\n\t            replay._is_hang = True\n\t        return replay\n\t    def is_asan_without_crash(self) -> bool:\n", "        \"\"\" Return True if an ASAN WARNING was shown without errors \"\"\"\n\t        return self._asan_bugtype and not self.has_crashed()\n\t    @property\n\t    def returncode(self) -> int:\n\t        return self._process.returncode\n\t    @property\n\t    def alert_covered(self) -> List[int]:\n\t        \"\"\" Alert covered \"\"\"\n\t        return self._alert_covered\n\t    def has_hanged(self) -> bool:\n", "        \"\"\" Return true if the target hanged during its replay \"\"\"\n\t        return self._is_hang\n\t    def has_crashed(self) -> bool:\n\t        \"\"\" Return whether the execution has crashed or not \"\"\"\n\t        if self._process.returncode:\n\t            return self._process.returncode != 0\n\t        else:\n\t            return False\n\t    @property\n\t    def crashing_id(self) -> Optional[int]:\n", "        \"\"\" Return the alert identifier that made the program to crash (last one seen) \"\"\"\n\t        return self._alert_crash\n\t    def asan_info(self) -> Tuple[str, str]:\n\t        \"\"\" In case of crash return ASAN info gather by parsing \"\"\"\n\t        return self._asan_bugtype, self._asan_line\n\t    def __parse_output(self, raw_output: bytes) -> bool:\n\t        \"\"\" Return True if a vuln was matched \"\"\"\n\t        matched_vuln = False\n\t        for line in BytesIO(raw_output).readlines():\n\t            # Check if its a line of intrinsic output\n", "            m = re.match(self.INTRINSIC_REGEX, line)\n\t            if m:\n\t                id = int(m.groups()[0])\n\t                self._alert_covered.append(id)\n\t            # Check if its a line of ASAN\n\t            m1 = re.match(self.ASAN_REGEX_1, line)\n\t            m2 = re.match(self.ASAN_REGEX_2, line)\n\t            if m1 or m2:\n\t                if matched_vuln:\n\t                    logging.warning(f\"already matched ASAN with {self._asan_bugtype} now {m1.groups() if m1 else m2.groups()}\")\n", "                    continue\n\t                matched_vuln = True\n\t                if self._alert_covered: # Try getting last alert (and consider it to be the origin)\n\t                    self._alert_crash = self._alert_covered[-1]\n\t                # Else cannot link the crash to an ID\n\t                # Extract end of line and parameter\n\t                topic, details = m1.groups() if m1 else m2.groups()\n\t                self._asan_bugtype = topic.decode(errors=\"replace\")\n\t                self._asan_line = details.decode(errors=\"replace\")\n\t        return matched_vuln\n"]}
{"filename": "engines/pastis-aflpp/pastisaflpp/workspace.py", "chunked_list": ["# builtin imports\n\tfrom typing import Callable\n\timport time\n\timport tempfile\n\timport os\n\timport logging\n\tfrom pathlib import Path\n\tfrom hashlib import md5\n\t# third-party imports\n\tfrom watchdog.events import FileSystemEventHandler\n", "from watchdog.observers import Observer\n\tclass Workspace(FileSystemEventHandler):\n\t    AFLPP_WS_ENV_VAR = \"AFLPP_WS\"\n\t    DEFAULT_WS_PATH = \"aflpp_workspace\"\n\t    STATS_FILE = \"fuzzer_stats\"\n\t    def __init__(self):\n\t        self.observer = Observer()\n\t        self.modif_callbacks = {}  # Map fullpath -> callback\n\t        self.created_callbacks = {}\n\t        self.root_dir = None\n", "        self._setup_workspace()\n\t    def _setup_workspace(self):\n\t        ws = os.environ.get(self.AFLPP_WS_ENV_VAR, None)\n\t        if ws is None:\n\t            self.root_dir = (Path(tempfile.gettempdir()) / self.DEFAULT_WS_PATH) / str(time.time()).replace(\".\", \"\")\n\t        else:\n\t            self.root_dir = Path(ws)  # Use the one provided\n\t        for d in [self.target_dir, self.input_dir, self.dynamic_input_dir, self.corpus_dir, self.crash_dir]:\n\t            d.mkdir(parents=True)\n\t        # Create dummy input file.\n", "        # AFLPP requires that the initial seed directory is not empty.\n\t        # TODO Is there a better approach to this?\n\t        seed_path = self.input_dir / 'seed-dummy'\n\t        seed_path.write_bytes(b'A')\n\t    @property\n\t    def target_dir(self):\n\t        return self.root_dir / 'target'\n\t    @property\n\t    def input_dir(self):\n\t        return self.root_dir / 'inputs' / 'initial'\n", "    @property\n\t    def dynamic_input_dir(self):\n\t        return self.root_dir / 'inputs' / 'dynamic'\n\t    @property\n\t    def output_dir(self):\n\t        return self.root_dir / 'outputs'\n\t    @property\n\t    def corpus_dir(self):\n\t        return self.output_dir / 'main' / 'queue'\n\t    @property\n", "    def crash_dir(self):\n\t        return self.output_dir / 'main' / 'crashes'\n\t    @property\n\t    def stats_dir(self):\n\t        return self.output_dir / 'main'\n\t    @property\n\t    def stats_file(self):\n\t        return self.stats_dir / self.STATS_FILE\n\t    def on_modified(self, event):\n\t        path = Path(event.src_path)\n", "        if path.is_dir():\n\t            return  # We don't care about directories\n\t        if path.parent in self.modif_callbacks:\n\t            self.modif_callbacks[path.parent](path)  # call the callback\n\t        else:\n\t            pass  # Do nothing at the moment\n\t    def on_created(self, event):\n\t        path = Path(event.src_path)\n\t        if path.is_dir():\n\t            return  # We don't care about directories\n", "        if path.parent in self.created_callbacks:\n\t            self.created_callbacks[path.parent](path)  # call the callback\n\t        else:\n\t            pass  # Do nothing at the moment\n\t    def add_file_modification_hook(self, path: str, callback: Callable):\n\t        self.observer.schedule(self, path=path, recursive=True)\n\t        self.modif_callbacks[path] = callback\n\t    def add_creation_hook(self, path: str, callback: Callable):\n\t        self.observer.schedule(self, path=path, recursive=True)\n\t        self.created_callbacks[path] = callback\n", "    def start(self):\n\t        self.observer.start()\n\t    def stop(self):\n\t        self.observer.stop()\n"]}
{"filename": "engines/pastis-aflpp/pastisaflpp/driver.py", "chunked_list": ["# builtin imports\n\timport hashlib\n\timport logging\n\timport stat\n\timport threading\n\timport time\n\tfrom pathlib import Path\n\tfrom typing import List, Union\n\t# Third party imports\n\tfrom libpastis import ClientAgent, BinaryPackage, SASTReport\n", "from libpastis.types import CheckMode, CoverageMode, ExecMode, FuzzingEngineInfo, SeedInjectLoc, SeedType, State, \\\n\t                            LogLevel, AlertData, FuzzMode\n\t# Local imports\n\timport pastisaflpp\n\tfrom pastisaflpp.replay import Replay\n\tfrom pastisaflpp.aflpp import AFLPPProcess\n\tfrom pastisaflpp.workspace import Workspace\n\t# Inotify logs are very talkative, set them to ERROR\n\tfor logger in (logging.getLogger(x) for x in [\"watchdog.observers.inotify_buffer\", 'watchdog.observers', \"watchdog\"]):\n\t    logger.setLevel(logging.ERROR)\n", "class AFLPPDriver:\n\t    def __init__(self, agent: ClientAgent, telemetry_frequency: int = 30):\n\t        # Internal objects\n\t        self._agent = agent\n\t        self.workspace = Workspace()\n\t        self.aflpp = AFLPPProcess()\n\t        # Parameters received through start_received\n\t        self.__exec_mode = None   # SINGLE_RUN, PERSISTENT\n\t        self.__check_mode = None  # CHECK_ALL, ALERT_ONLY\n\t        self.__seed_inj = None    # STDIN or ARGV\n", "        self.__report = None      # Klocwork report if supported\n\t        # Target data\n\t        self.__package = None\n\t        self.__target_args = None  # Kept for replay\n\t        self.__setup_agent()\n\t        # Configure hookds on workspace\n\t        self.workspace.add_creation_hook(self.workspace.corpus_dir, self.__send_seed)\n\t        self.workspace.add_creation_hook(self.workspace.crash_dir, self.__send_crash)\n\t        self.workspace.add_file_modification_hook(self.workspace.stats_dir, self.__send_telemetry)\n\t        # Telemetry frequency\n", "        self._tel_frequency = telemetry_frequency\n\t        self._tel_last = time.time()\n\t        # Runtime data\n\t        self._tot_seeds = 0\n\t        self._seed_recvs = set()  # Seed received to make sure NOT to send them back\n\t        # Variables for replay\n\t        self._replay_thread = None\n\t        self._queue_to_send = []\n\t        self._started = False\n\t    @staticmethod\n", "    def hash_seed(seed: bytes):\n\t        return hashlib.md5(seed).hexdigest()\n\t    def start(self, package: BinaryPackage, argv: List[str], exmode: ExecMode, fuzzmode: FuzzMode, seed_inj: SeedInjectLoc, engine_args: str):\n\t        # Write target to disk.\n\t        self.__package = package\n\t        self.__target_args = argv\n\t        self.workspace.start()  # Start looking at directories\n\t        logging.info(f\"Start process (injectloc: {seed_inj.name})\")\n\t        self.aflpp.start(str(package.executable_path.absolute()),\n\t                         argv,\n", "                         self.workspace,\n\t                         exmode,\n\t                         fuzzmode,\n\t                         seed_inj == SeedInjectLoc.STDIN,\n\t                         engine_args,\n\t                         str(package.cmplog.absolute()) if package.cmplog else None,\n\t                         str(package.dictionary.absolute()) if package.dictionary else None)\n\t        self._started = True\n\t        # Start the replay worker (note that the queue might already have started to be filled by agent thread)\n\t        self._replay_thread = threading.Thread(target=self.replay_worker, daemon=True)\n", "        self._replay_thread.start()\n\t    def stop(self):\n\t        self.aflpp.stop()\n\t        self.workspace.stop()\n\t        self._started = False  # should stop the replay thread\n\t    def replay_worker(self):\n\t        while True:\n\t            if not self._started:\n\t                break  # Break when the fuzzer stops\n\t            if self._queue_to_send:\n", "                filename, res = self._queue_to_send.pop(0)\n\t                if not self.__check_seed_alert(filename, is_crash=res):\n\t                    break\n\t            time.sleep(0.05)\n\t    @property\n\t    def started(self):\n\t        return self._started\n\t    def add_seed(self, seed: bytes):\n\t        seed_path = self.workspace.dynamic_input_dir / f\"seed-{hashlib.md5(seed).hexdigest()}\"\n\t        seed_path.write_bytes(seed)\n", "    def init_agent(self, remote: str = \"localhost\", port: int = 5555):\n\t        self._agent.register_start_callback(self.start_received)  # Register start because launched manually (not by pastisd)\n\t        self._agent.connect(remote, port)\n\t        self._agent.start()\n\t        # Send initial HELLO message, whick will make the Broker send the START message.\n\t        self._agent.send_hello([FuzzingEngineInfo(\"AFLPP\", pastisaflpp.__version__, \"aflppbroker\")])\n\t    def run(self):\n\t        self.aflpp.wait()\n\t    def __setup_agent(self):\n\t        # Register callbacks.\n", "        self._agent.register_seed_callback(self.__seed_received)\n\t        self._agent.register_stop_callback(self.__stop_received)\n\t    def __send_seed(self, filename: Path):\n\t        self.__send(filename, SeedType.INPUT)\n\t    def __send_crash(self, filename: Path):\n\t        # Skip README file that AFL adds to the crash folder.\n\t        if filename.name != 'README.txt':\n\t            self.__send(filename, SeedType.CRASH)\n\t    def __send(self, filename: Path, typ: SeedType):\n\t        self._tot_seeds += 1\n", "        file = Path(filename)\n\t        raw = file.read_bytes()\n\t        h = self.hash_seed(raw)\n\t        logging.debug(f'[{typ.name}] Sending new: {h} [{self._tot_seeds}]')\n\t        if h not in self._seed_recvs:\n\t            self._agent.send_seed(typ, raw)\n\t        else:\n\t            logging.info(\"seed (previously sent) do not send it back\")\n\t        self._queue_to_send.append((filename, True if typ == SeedType.CRASH else False))\n\t    def __check_seed_alert(self, filename: Path, is_crash: bool) -> bool:\n", "        p = Path(filename)\n\t        # Only rerun the seed if in alert only mode and a SAST report was provided\n\t        if self.__check_mode == CheckMode.ALERT_ONLY and self.__report:\n\t            # Rerun the program with the seed\n\t            run = Replay.run(self.__package.executable_path.absolute(), self.__target_args, stdin_file=filename, timeout=5, cwd=str(self.workspace.target_dir))\n\t            # FIXME: Do same checks for AFL++ LOOP stuff for persistency mode\n\t            # if run.is_hf_iter_crash():\n\t            #     self.dual_log(LogLevel.ERROR, f\"Disable replay engine (because code uses HF_ITER)\")\n\t            #     return False\n\t            # Iterate all covered alerts\n", "            for id in run.alert_covered:\n\t                alert = self.__report.get_alert(id)\n\t                if not alert.covered:\n\t                    alert.covered = True\n\t                    logging.info(f\"New alert covered {alert} [{alert.id}]\")\n\t                    self._agent.send_alert_data(AlertData(alert.id, alert.covered, False, p.read_bytes()))\n\t            # Check if the target has crashed and if so tell the broker which one\n\t            if run.has_crashed() or run.is_asan_without_crash():  # Also consider ASAN warning as detection\n\t                if not run.crashing_id:\n\t                    self.dual_log(LogLevel.WARNING, f\"Crash on {filename.name} but can't link it to a Klocwork alert (maybe bonus !)\")\n", "                else:\n\t                    alert = self.__report.get_alert(run.crashing_id)\n\t                    if not alert.validated:\n\t                        alert.validated = True\n\t                        bugt, aline = run.asan_info()\n\t                        self.dual_log(LogLevel.INFO, f\"AFLPP new alert validated {alert} [{alert.id}] ({aline})  (asan no crash: {run.is_asan_without_crash()})\")\n\t                        self._agent.send_alert_data(AlertData(alert.id, alert.covered, alert.validated, p.read_bytes()))\n\t            else:\n\t                if is_crash:\n\t                    self.dual_log(LogLevel.WARNING, f\"crash not reproducible by rerunning seed: {filename.name}\")\n", "            if run.has_hanged():  # AFLPP does not stores 'hangs' it will have been sent as corpus or crash\n\t                self.dual_log(LogLevel.WARNING, f\"Seed {filename} was hanging in replay\")\n\t        return True\n\t    def __send_telemetry(self, filename: Path):\n\t        if filename.name != AFLPPProcess.STAT_FILE:\n\t            return\n\t        now = time.time()\n\t        if now < (self._tel_last + self._tel_frequency):\n\t            return\n\t        self._tel_last = now\n", "        logging.debug(f'[TELEMETRY] Stats file updated: {filename}')\n\t        with open(filename, 'r') as stats_file:\n\t            try:\n\t                stats = {}\n\t                for line in stats_file.readlines():\n\t                    k, v = line.strip('\\n').split(':')\n\t                    stats[k.strip()] = v.strip()\n\t                state = State.RUNNING\n\t                last_cov_update = int(stats['last_update'])\n\t                total_exec = int(stats['execs_done'])\n", "                exec_per_sec = int(float(stats['execs_per_sec']))\n\t                timeout = int(stats['unique_hangs']) if 'unique_hangs' in stats else None # N/A in AFL-QEMU.\n\t                coverage_edge = int(stats['total_edges'])\n\t                cycle = int(stats['cycles_done'])\n\t                coverage_path = int(stats['paths_total']) if 'paths_total' in stats else None # N/A in AFL-QEMU.\n\t                # NOTE: `coverage_block` does not apply for AFLPP.\n\t                self._agent.send_telemetry(state=state,\n\t                                           exec_per_sec=exec_per_sec,\n\t                                           total_exec=total_exec,\n\t                                           cycle=cycle,\n", "                                           timeout=timeout,\n\t                                           coverage_edge=coverage_edge,\n\t                                           coverage_path=coverage_path,\n\t                                           last_cov_update=last_cov_update)\n\t            except:\n\t                logging.error(f'Error retrieving stats!')\n\t    def start_received(self, fname: str, binary: bytes, engine: FuzzingEngineInfo, exmode: ExecMode, fuzzmode: FuzzMode, chkmode: CheckMode,\n\t                       _: CoverageMode, seed_inj: SeedInjectLoc, engine_args: str, argv: List[str], sast_report: str = None):\n\t        logging.info(f\"[START] bin:{fname} engine:{engine.name} exmode:{exmode.name} seedloc:{seed_inj.name} chk:{chkmode.name}\")\n\t        if self.started:\n", "            self._agent.send_log(LogLevel.CRITICAL, \"Instance already started!\")\n\t            return\n\t        if engine.name != \"AFLPP\":\n\t            logging.error(f\"Wrong fuzzing engine received {engine.name} while I am Honggfuzz\")\n\t            self._agent.send_log(LogLevel.ERROR, f\"Invalid fuzzing engine received {engine.name} can't do anything\")\n\t            return\n\t        if engine.version != pastisaflpp.__version__:\n\t            logging.error(f\"Wrong fuzzing engine version {engine.version} received\")\n\t            self._agent.send_log(LogLevel.ERROR, f\"Invalid fuzzing engine version {engine.version} do nothing\")\n\t            return\n", "        # Retrieve package out of the binary received\n\t        try:\n\t            package = BinaryPackage.from_binary(fname, binary, self.workspace.target_dir)\n\t        except FileNotFoundError:\n\t            logging.error(\"Invalid package received\")\n\t            return\n\t        except ValueError:\n\t            logging.error(\"Invalid package received\")\n\t            return\n\t        if sast_report:\n", "            logging.info(\"Loading SAST report\")\n\t            self.__report = SASTReport.from_json(sast_report)\n\t        self.__check_mode = chkmode  # CHECK_ALL, ALERT_ONLY\n\t        self.start(package, argv, exmode, fuzzmode, seed_inj, engine_args)\n\t    def __seed_received(self, typ: SeedType, seed: bytes):\n\t        h = self.hash_seed(seed)\n\t        logging.info(f\"[SEED] received  {h} ({typ.name})\")\n\t        self._seed_recvs.add(h)\n\t        self.add_seed(seed)\n\t    def __stop_received(self):\n", "        logging.info(f\"[STOP]\")\n\t        self.stop()\n\t    def dual_log(self, level: LogLevel, message: str) -> None:\n\t        \"\"\"\n\t        Helper function to log message both in the local log system and also\n\t        to the broker.\n\t        :param level: LogLevel message type\n\t        :param message: string message to log\n\t        :return: None\n\t        \"\"\"\n", "        mapper = {LogLevel.DEBUG: \"debug\",\n\t                  LogLevel.INFO: \"info\",\n\t                  LogLevel.CRITICAL: \"critical\",\n\t                  LogLevel.WARNING: \"warning\",\n\t                  LogLevel.ERROR: \"error\"}\n\t        log_f = getattr(logging, mapper[level])\n\t        log_f(message)\n\t        self._agent.send_log(level, message)\n\t    def add_initial_seed(self, file: Union[str, Path]):\n\t        p = Path(file)\n", "        logging.info(f\"add initial seed {file.name}\")\n\t        # Write seed to disk.\n\t        seed_path = self.workspace.input_dir / p.name\n\t        seed_path.write_bytes(p.read_bytes())\n\t    def aflpp_available(self):\n\t        return self.aflpp.aflpp_environ_check()\n"]}
{"filename": "engines/pastis-aflpp/pastisaflpp/__init__.py", "chunked_list": ["import os\n\tfrom pathlib import Path\n\tfrom typing import Optional\n\timport subprocess\n\timport logging\n\tfrom .driver import AFLPPDriver\n\tfrom .replay import Replay\n\tfrom .aflpp import AFLPPProcess, AFLPPNotFound\n\tfrom .workspace import Workspace\n\t__version__ = \"1.0.0\"\n", "# AFL++ env variables\n\tAFLPP_ENV_VAR = \"AFLPP_WS\"\n\tdef spawn_online_aflpp(workspace: Optional[Path], port: int = 5555):\n\t    env = os.environ\n\t    env[AFLPP_ENV_VAR] = str(workspace.absolute())\n\t    logging.info(f\"aflpp workspace: {str(workspace.absolute())}\")\n\t    cmd_line_afl = [\"pastis-aflpp\", \"online\", \"-p\", f\"{port}\"]\n\t    logging.info(f\"run: {' '.join(cmd_line_afl)}\")\n\t    return subprocess.Popen(cmd_line_afl, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\tdef check_scaling_frequency() -> bool:\n", "    data = Path(\"/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\").read_text()\n\t    return data == \"performance\\n\"\n"]}
{"filename": "engines/pastis-aflpp/broker-addon/aflppbroker/__init__.py", "chunked_list": ["# built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Union, Tuple, List, Optional, Type\n\t# third-party import\n\timport lief\n\tfrom libpastis import FuzzingEngineDescriptor, EngineConfiguration\n\tfrom libpastis.types import ExecMode, CoverageMode, FuzzMode\n\tclass AFLConfigurationInterface(EngineConfiguration):\n\t    \"\"\"\n\t    Small wrapping function for AFL++ additional parameters\n", "    \"\"\"\n\t    def __init__(self, args: List[str] = None):\n\t        self._argvs = [] if args is None else args # Argument to send on the command line\n\t    @staticmethod\n\t    def new() -> 'AFLConfigurationInterface':\n\t        return AFLConfigurationInterface()\n\t    @staticmethod\n\t    def from_file(filepath: Path) -> 'AFLConfigurationInterface':\n\t        with open(filepath, \"r\") as f:\n\t            return AFLConfigurationInterface(f.read().split())\n", "    @staticmethod\n\t    def from_str(s: str) -> 'AFLConfigurationInterface':\n\t        return AFLConfigurationInterface(s.split())\n\t    def to_str(self) -> str:\n\t        return \" \".join(self._argvs)\n\t    def get_coverage_mode(self) -> CoverageMode:\n\t        \"\"\" Current coverage mode selected in the file \"\"\"\n\t        return CoverageMode.AUTO\n\t    def set_target(self, target: int) -> None:\n\t        # Note: Giving a target to Honggfuzz does not\n", "        # do anything as Honggfuzz is not directed.\n\t        pass\n\tclass AFLPPEngineDescriptor(FuzzingEngineDescriptor):\n\t    NAME = \"AFLPP\"\n\t    SHORT_NAME = \"AFLPP\"\n\t    VERSION = \"1.0.0\"  # Should be in sync with alfpp.__version__\n\t    config_class = AFLConfigurationInterface\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n", "    def accept_file(binary_file: Path) -> Tuple[bool, Optional[ExecMode], Optional[FuzzMode]]:\n\t        if str(binary_file).endswith(\".cmplog\"):\n\t            return False, None, None\n\t        p = lief.parse(str(binary_file))\n\t        if not p:\n\t            return False, None, None\n\t        # Search for HF instrumentation\n\t        instrumented = False\n\t        for s in p.symbols:\n\t            if \"__afl_\" in s.name:\n", "                instrumented = True\n\t                break\n\t        for f in p.functions:\n\t            if \"__afl_\" in f.name:\n\t                instrumented = True\n\t                break\n\t        if not instrumented:\n\t            # NOTE This can be improve. We usually use PERSISTENT mode when\n\t            # fuzzing a binary-only target because of performance reasons but\n\t            # it can also be SINGLE_EXEC. Therefore, ExecMode would not be the\n", "            # right place to add the BINARY_ONLY option (it was done this way\n\t            # to keep things simple).\n\t            return True, ExecMode.AUTO, FuzzMode.BINARY_ONLY\n\t        return True, ExecMode.AUTO, FuzzMode.INSTRUMENTED\n\t    @staticmethod\n\t    def supported_coverage_strategies() -> List[CoverageMode]:\n\t        return [CoverageMode.AUTO]\n"]}
{"filename": "engines/pastis-triton/broker-addon/pastisttbroker/__init__.py", "chunked_list": ["# built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Union, Tuple, List, Optional\n\timport json\n\t# third-party import\n\timport lief\n\tfrom libpastis import FuzzingEngineDescriptor, EngineConfiguration\n\tfrom libpastis.types import ExecMode, CoverageMode, FuzzMode\n\t# WARNING: This module is made in such a way that it does\n\t# not directly depend on tritondse (to facilitate installation)\n", "# coverage strategies thus have to be ported here !\n\tTRITON_DSE_COVS = ['BLOCK', 'EDGE', 'PATH']\n\tclass TritonConfigurationInterface(EngineConfiguration):\n\t    def __init__(self, data):\n\t        self.data = data\n\t    @staticmethod\n\t    def new() -> 'TritonConfigurationInterface':\n\t        return TritonConfigurationInterface({})\n\t    @staticmethod\n\t    def from_file(filepath: Path) -> 'TritonConfigurationInterface':\n", "        with open(filepath, \"r\") as f:\n\t            return TritonConfigurationInterface(json.load(f))\n\t    @staticmethod\n\t    def from_str(s: str) -> 'TritonConfigurationInterface':\n\t        return TritonConfigurationInterface(json.loads(s))\n\t    def to_str(self) -> str:\n\t        return json.dumps(self.data)\n\t    def get_coverage_mode(self) -> CoverageMode:\n\t        \"\"\" Current coverage mode selected in the file \"\"\"\n\t        v = self.data['coverage_strategy']\n", "        return CoverageMode(v)\n\t    def set_target(self, target: int) -> None:\n\t        self.data['custom'] = {}\n\t        self.data['custom']['target'] = target\n\tclass TritonEngineDescriptor(FuzzingEngineDescriptor):\n\t    NAME = \"TRITON\"\n\t    SHORT_NAME = \"TT\"\n\t    VERSION = \"1.0.0\"\n\t    FUNCTION_BLACKLIST_PREFIX = [\n\t        \"__sanitizer\",  # all fuzzer related sanitizers\n", "        \"__gcov_\",      # gcov functions\n\t        \"__asan_\",\n\t        \"__afl_\"\n\t    ]\n\t    SYMBOL_BLACKLIST_PREFIX = [\n\t        \"__sanitizer\",  # all fuzzer related sanitizers\n\t        \"__gcov_\",      # gcov functions\n\t        \"__asan_\",\n\t        \"__afl_\"\n\t    ]\n", "    IMPORT_BLACKLIST = [\n\t        \"HF_ITER\"       # honggfuzz functions\n\t    ]\n\t    config_class = TritonConfigurationInterface\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def accept_file(binary_file: Path) -> Tuple[bool, Optional[ExecMode], Optional[FuzzMode]]:\n\t        p = lief.parse(str(binary_file))\n\t        if not p:\n", "            return False, None, None\n\t        # Presumably good unless do find some instrumentation functions or imports\n\t        for f in p.functions:\n\t            for item in TritonEngineDescriptor.FUNCTION_BLACKLIST_PREFIX:\n\t                if f.name.startswith(item):\n\t                    return False, None, None\n\t        for f in p.imported_functions:\n\t            if f.name in TritonEngineDescriptor.IMPORT_BLACKLIST:\n\t                return False, None, None\n\t        for s in p.symbols:\n", "            for item in TritonEngineDescriptor.SYMBOL_BLACKLIST_PREFIX:\n\t                if s.name.startswith(item):\n\t                    return False, None, None\n\t        return True, ExecMode.SINGLE_EXEC, FuzzMode.BINARY_ONLY  # Only support single_exec, binary only (not instrumented)\n\t    @staticmethod\n\t    def supported_coverage_strategies() -> List[CoverageMode]:\n\t        return [CoverageMode(st) for st in TRITON_DSE_COVS]\n"]}
{"filename": "engines/pastis-triton/pastisdse/pastisdse.py", "chunked_list": ["# built-in imports\n\tfrom typing import List, Tuple\n\timport os\n\timport time\n\timport logging\n\tfrom pathlib import Path\n\timport threading\n\timport platform\n\timport json\n\timport queue\n", "# third-party imports\n\tfrom triton               import MemoryAccess, CPUSIZE\n\t# Pastis & triton imports\n\timport pastisdse\n\tfrom tritondse            import Config, Program, CleLoader, CoverageStrategy, SymbolicExplorator, \\\n\t                                 SymbolicExecutor, ProcessState, ExplorationStatus, SeedStatus, ProbeInterface, \\\n\t                                 Workspace, Seed, CompositeData, SeedFormat, QuokkaProgram\n\tfrom tritondse.sanitizers import FormatStringSanitizer, NullDerefSanitizer, UAFSanitizer, IntegerOverflowSanitizer, mk_new_crashing_seed\n\tfrom tritondse.types      import Addr, Edge, SymExType, Architecture, Platform\n\tfrom libpastis import ClientAgent, BinaryPackage, SASTReport\n", "from libpastis.types      import SeedType, FuzzingEngineInfo, ExecMode, CoverageMode, SeedInjectLoc, CheckMode, LogLevel, AlertData, FuzzMode\n\tfrom tritondse.trace      import QBDITrace, TraceException\n\tfrom tritondse.worklist import FreshSeedPrioritizerWorklist, WorklistAddressToSet\n\tclass PastisDSE(object):\n\t    INPUT_FILE_NAME = \"input_file\"\n\t    STAT_FILE = \"pastidse-stats.json\"\n\t    RAMDISK = \"/mnt/ramdisk\"\n\t    TMP_SEED = \"seed.seed\"\n\t    TMP_TRACE = \"result.trace\"\n\t    def __init__(self, agent: ClientAgent):\n", "        self.agent = agent\n\t        self._init_callbacks()  # register callbacks on the given agent\n\t        self.config = Config()\n\t        self.config.workspace = \"\"  # Reset workspace so that it will computed in start_received\n\t        self.dse        = None\n\t        self.program    = None\n\t        self._stop      = False\n\t        self.sast_report= None\n\t        self._last_id = None\n\t        self._last_id_pc = None\n", "        self._seed_received = set()\n\t        self._probes = []\n\t        self._chkmode = None\n\t        self._seedloc = None\n\t        self._program_slice = None\n\t        self._tracing_enabled = False\n\t        # local attributes for telemetry\n\t        self.nb_to, self.nb_crash = 0, 0\n\t        self._cur_cov_count = 0\n\t        self._last_cov_update = time.time()\n", "        self._seed_queue = queue.Queue()\n\t        self._sending_count = 0\n\t        self.seeds_merged = 0\n\t        self.seeds_rejected = 0\n\t        # Timing stats\n\t        self._start_time = 0\n\t        self._replay_acc = 0\n\t        self.replay_trace_file, self.replay_seed_file = self._initialize_tmp_files()\n\t    def _initialize_tmp_files(self) -> Tuple[Path, Path]:\n\t        ramdisk = Path(self.RAMDISK)\n", "        pid = os.getpid()\n\t        if ramdisk.exists():  # there is a ramdisk available\n\t            dir = ramdisk / f\"triton_{pid}\"\n\t            dir.mkdir()\n\t            logging.info(f\"tmp directory set to: {dir}\")\n\t            return dir / self.TMP_TRACE, dir / self.TMP_SEED\n\t        else:\n\t            logging.info(f\"tmp directory set to: /tmp\")\n\t            return Path(f\"/tmp/triton_{pid}.trace\"), Path(\"/tmp/triton_{pid}.seed\")\n\t    def add_probe(self, probe: ProbeInterface):\n", "        self._probes.append(probe)\n\t    def _init_callbacks(self):\n\t        self.agent.register_seed_callback(self.seed_received)\n\t        self.agent.register_stop_callback(self.stop_received)\n\t    def init_agent(self, remote: str = \"localhost\", port: int = 5555):\n\t        self.agent.register_start_callback(self.start_received) # register start because launched manually\n\t        self.agent.connect(remote, port)\n\t        self.agent.start()\n\t        self.agent.send_hello([FuzzingEngineInfo(\"TRITON\", pastisdse.__version__, \"pastisttbroker\")])\n\t    def start(self):\n", "        self._th = threading.Thread(target=self.run, daemon=True)\n\t        self._th.start()\n\t    def reset(self):\n\t        \"\"\" Reset the current DSE to be able to restart from fresh settings \"\"\"\n\t        self.dse = None  # remove DSE object\n\t        self.config = Config()\n\t        self.config.workspace = \"\"  # Reset workspace so that it will computed in start_received\n\t        self._last_id_pc = None\n\t        self._last_id = None\n\t        self.sast_report = None\n", "        self._program_slice = None\n\t        self._seed_received = set()\n\t        self.program = None\n\t        self._stop = False\n\t        self._chkmode = None\n\t        self._seedloc = None\n\t        self.nb_to, self.nb_crash = 0, 0\n\t        self._cur_cov_count = 0\n\t        self._last_cov_update = time.time()\n\t        self._tracing_enabled = False\n", "        self._sending_count = 0\n\t        self.seeds_merged = 0\n\t        self.seeds_rejected = 0\n\t        self._start_time = 0\n\t        self._replay_acc = 0\n\t        logging.info(\"DSE Ready\")\n\t    def run(self, online: bool, debug_pp: bool=False):\n\t        # Run while we are not instructed to stop\n\t        while not self._stop:\n\t            if online:  # in offline start_received, seed_received will already have been called\n", "                self.reset()\n\t            # Just wait until the broker says let's go\n\t            while self.dse is None:\n\t                time.sleep(0.10)\n\t            if debug_pp:\n\t                def cb_debug(se, _):\n\t                    se.debug_pp = True\n\t                self.dse.callback_manager.register_pre_execution_callback(cb_debug)\n\t            if not self.run_one(online):\n\t                break\n", "        self.agent.stop()\n\t    def run_one(self, online: bool):\n\t        # Run while we are not instructed to stop\n\t        while not self._stop:\n\t            # wait for seed event\n\t            self._wait_seed_event()\n\t            self._start_time = time.time()\n\t            st = self.dse.explore()\n\t            if not online:\n\t                return False  # in offline whatever the status we stop\n", "            else: # ONLINE\n\t                if st == ExplorationStatus.STOPPED:  # if the exploration stopped just return\n\t                    logging.info(\"exploration stopped\")\n\t                    return False\n\t                elif st == ExplorationStatus.TERMINATED:\n\t                    self.agent.send_stop_coverage_criteria()\n\t                    return True  # Reset and wait for further instruction from the broker\n\t                elif st == ExplorationStatus.IDLE:  # no seed\n\t                    if self._chkmode == CheckMode.ALERT_ONE:\n\t                        self.agent.send_stop_coverage_criteria()  # Warn: the broker we explored the whole search space and did not validated the target\n", "                        return True                               # Make ourself ready to receive a new one\n\t                    else: # wait for seed of peers\n\t                        logging.info(\"exploration idle (worklist empty)\")\n\t                        self.agent.send_log(LogLevel.INFO, \"exploration idle (worklist empty)\")\n\t                else:\n\t                    logging.error(f\"explorator not meant to be in state: {st}\")\n\t                    return False\n\t            # Finished an exploration batch\n\t            self.save_stats()  # Save stats\n\t    def _wait_seed_event(self):\n", "        logging.info(\"wait to receive seeds\")\n\t        while not self.dse.seeds_manager.seeds_available() and not self._stop:\n\t            self.try_process_seed_queue()\n\t            time.sleep(0.5)\n\t    def cb_post_execution(self, se: SymbolicExecutor, state: ProcessState):\n\t        \"\"\"\n\t        This function is called after each execution. In this function we verify\n\t        the ABV_GENERAL alert when a crash occurred during the last execution.\n\t        :param se: The current symbolic executor\n\t        :param state: The current processus state of the execution\n", "        :return: None\n\t        \"\"\"\n\t        # Send seed that have been executed\n\t        mapper = {SeedStatus.OK_DONE: SeedType.INPUT, SeedStatus.CRASH: SeedType.CRASH, SeedStatus.HANG: SeedType.HANG}\n\t        seed = se.seed\n\t        if seed.status == SeedStatus.NEW:\n\t            logging.warning(f\"seed is not meant to be NEW in post execution current:{seed.status.name}\")\n\t        elif seed.status in [SeedStatus.CRASH, SeedStatus.HANG]:  # The stats is new send it back again\n\t            if seed not in self._seed_received:  # Do not send back a seed that already came from broker\n\t                self.agent.send_seed(mapper[seed.status], seed.content.files[self.INPUT_FILE_NAME] if seed.is_composite() else seed.content)\n", "        else:  # INPUT\n\t            pass  # Do not send it back again\n\t        # Update some stats\n\t        if se.seed.status == SeedStatus.CRASH:\n\t            self.nb_crash += 1\n\t        elif se.seed.status == SeedStatus.HANG:\n\t            self.nb_to += 1\n\t        # Handle CRASH and ABV_GENERAL\n\t        if se.seed.status == SeedStatus.CRASH and self._last_id:\n\t            alert = self.sast_report.get_alert(self._last_id)\n", "            if alert.type == \"ABV_GENERAL\":\n\t                logging.info(f'A crash occured with an ABV_GENERAL encountered just before.')\n\t                self.dual_log(LogLevel.INFO, f\"Alert [{alert.id}] in {alert.file}:{alert.line}: {alert.type} validation [SUCCESS]\")\n\t                alert.validated = True\n\t                self.agent.send_alert_data(AlertData(alert.id, alert.covered, alert.validated, se.seed.content, self._last_id_pc))\n\t        # Process all the seed received\n\t        self.try_process_seed_queue()\n\t        # Print stats\n\t        if self.sast_report:\n\t            cov, va, tot = self.sast_report.get_stats()\n", "            logging.info(f\"SAST stats: defaults: [covered:{cov}/{tot}] [validated:{va}/{tot}]\")\n\t    def try_process_seed_queue(self):\n\t        while not self._seed_queue.empty() and not self._stop:\n\t            seed, typ = self._seed_queue.get()\n\t            self._process_seed_received(typ, seed)\n\t    def cb_telemetry(self, dse: SymbolicExplorator):\n\t        \"\"\"\n\t        Callback called after each execution to send telemetry to the broker\n\t        :param dse: SymbolicExplorator\n\t        :return: None\n", "        \"\"\"\n\t        new_count = dse.coverage.unique_covitem_covered\n\t        if new_count != self._cur_cov_count:         # Coverage has been updated\n\t            self._cur_cov_count = new_count          # update count\n\t            self._last_cov_update = time.time()  # update last coverage update to be now\n\t        if dse.coverage.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            new_count = len(set(x[1] for x in dse.coverage.covered_items.keys()))  # For prefixed-edge only count edge\n\t        self.agent.send_telemetry(exec_per_sec=int(dse.execution_count / (time.time()-dse.ts)),\n\t                                  total_exec=dse.execution_count,\n\t                                  timeout=self.nb_to,\n", "                                  coverage_block=dse.coverage.unique_instruction_covered,\n\t                                  coverage_edge=new_count if dse.coverage in [CoverageStrategy.EDGE, CoverageStrategy.PREFIXED_EDGE] else 0,\n\t                                  coverage_path=new_count if dse.coverage.strategy == CoverageStrategy.PATH else 0,\n\t                                  last_cov_update=int(self._last_cov_update))\n\t    def cb_on_solving(self, dse: SymbolicExplorator, pstate: ProcessState, edge: Edge, typ: SymExType) -> bool:\n\t        # Only consider conditional and dynamic jumps.\n\t        if typ in [SymExType.SYMBOLIC_READ, SymExType.SYMBOLIC_WRITE]:\n\t            return True\n\t        # Unpack edge.\n\t        src, dst = edge\n", "        # Find the function which holds the basic block of the destination.\n\t        dst_fn = self.program.find_function_from_addr(dst)\n\t        if dst_fn is None:\n\t            logging.warning(\"Solving edge ({src:#x} -> {dst:#x}) not in a function\")\n\t            return True\n\t        else:\n\t            if dst_fn.start in self._program_slice:\n\t                return True\n\t            else:\n\t                logging.info(\n", "                    f\"Slicer: reject edge ({src:#x} -> {dst:#x} ({dst_fn.name}) not in slice!\")\n\t                return False\n\t    def start_received(self, fname: str, binary: bytes, engine: FuzzingEngineInfo, exmode: ExecMode, fuzzmode: FuzzMode, chkmode: CheckMode,\n\t                       covmode: CoverageMode, seed_inj: SeedInjectLoc, engine_args: str, argv: List[str], sast_report: str=None):\n\t        \"\"\"\n\t        This function is called when the broker says to start the fuzzing session. Here, we receive all information about\n\t        the program to fuzz and the configuration.\n\t        :param fname: The name of the binary to explore\n\t        :param binary: The content of the binary to explore\n\t        :param engine: The kind of fuzzing engine (should be Triton for this script)\n", "        :param exmode: The mode of the exploration\n\t        :param fuzzmode: The fuzzing mode (instrumented or binary only)\n\t        :param chkmode: The mode of vulnerability check\n\t        :param covmode: The mode of coverage\n\t        :param seed_inj: The location where to inject input\n\t        :param engine_args: The engine arguments\n\t        :param argv: The program arguments\n\t        :param sast_report: The SAST report\n\t        :return: None\n\t        \"\"\"\n", "        logging.info(f\"[BROKER] [START] bin:{fname} engine:{engine.name} exmode:{exmode.name} cov:{covmode.name} chk:{chkmode.name}\")\n\t        if self.dse is not None:\n\t            logging.warning(\"DSE already instanciated (override it)\")\n\t        if engine.version != pastisdse.__version__:\n\t            logging.error(f\"Pastis-DSE mismatch with one from the server {engine.version} (local: {pastisdse.__version__})\")\n\t            return\n\t        self._seedloc = seed_inj\n\t        # ------- Create the TritonDSE configuration file ---------\n\t        if engine_args:\n\t            self.config = Config.from_json(engine_args)\n", "        else:\n\t            self.config = Config()  # Empty configuration\n\t            # Use argv ONLY if no configuration provided\n\t            self.config.program_argv = [f\"./{fname}\"]\n\t            if argv:\n\t                self.config.program_argv.extend(argv) # Preprend the binary to argv\n\t        \"\"\"\n\t        Actions taken depending on seed format & co:\n\t        Config    |  Inject  |  Result\n\t        RAW          STDIN      /\n", "        COMPOSITE    STDIN      / (but need 'stdin' in files)\n\t        RAW          ARGV       change to COMPOSITE to be able to inject on argv (and convert seeds on the fly)\n\t        COMPOSITE    ARGV       / (but need 'input_file' in files)\n\t        \"\"\"\n\t        if seed_inj == SeedInjectLoc.ARGV:  # Make sure we inject input on argv\n\t            if self.config.is_format_raw():\n\t                logging.warning(\"injection is ARGV thus switch config seed format to COMPOSITE\")\n\t                self.config.seed_format = SeedFormat.COMPOSITE\n\t            if \"@@\" in self.config.program_argv:\n\t                idx = self.config.program_argv.index(\"@@\")\n", "                self.config.program_argv[idx] = self.INPUT_FILE_NAME\n\t            else:\n\t                logging.warning(f\"seed inject {self._seedloc.name} but no '@@' found in argv (will likely not work!)\")\n\t        else:  # SeedInjectLoc.STDIN\n\t            if engine_args:\n\t                if self.config.is_format_composite():\n\t                    self.dual_log(LogLevel.WARNING, \"injecting on STDIN but seed format is COMPOSITE\")\n\t            else:  # no config was provided just override\n\t                self.config.seed_format = SeedFormat.RAW\n\t            pass  # nothing to do ?\n", "        # ----------------------------------------------------------\n\t        # If a workspace is given keep it other generate new unique one\n\t        if not self.config.workspace:\n\t            ws = f\"/tmp/triton_workspace/{int(time.time())}\"\n\t            logging.info(f\"Configure workspace to be: {ws}\")\n\t            self.config.workspace = ws\n\t        # Create the workspace object in advance (to directly save the binary inside\n\t        workspace = Workspace(self.config.workspace)\n\t        workspace.initialize(flush=False)\n\t        try:\n", "            pkg = BinaryPackage.from_binary(fname, binary, workspace.get_binary_directory())\n\t        except FileNotFoundError:\n\t            logging.error(\"Invalid package data\")\n\t            return\n\t        if pkg.is_quokka():\n\t            logging.info(f\"load QuokkaProgram: {pkg.quokka.name}\")\n\t            self.program = QuokkaProgram(pkg.quokka, pkg.executable_path)\n\t        else:\n\t            logging.info(f\"load Program: {pkg.executable_path.name} [{self._seedloc.name}]\")\n\t            program = Program(pkg.executable_path)\n", "            # Make sure the Program is compatible with the local platform\n\t            if self.is_compatible_with_local(program):\n\t                self.program = CleLoader(pkg.executable_path)\n\t            else:\n\t                self.program = program\n\t        if self.program is None:\n\t            self.dual_log(LogLevel.CRITICAL, f\"LIEF was not able to parse the binary file {fname}\")\n\t            self.agent.stop()\n\t            return\n\t        # Enable local tracing if the binary is compatible with local architecture\n", "        self._tracing_enabled = self.is_compatible_with_local(self.program)\n\t        logging.info(f\"Local arch and program arch matching: {self._tracing_enabled}\")\n\t        # Update the coverage strategy in the current config (it overrides the config file one)\n\t        try:\n\t            self.config.coverage_strategy = CoverageStrategy(covmode.value)  # names are meant to match\n\t        except Exception as e:\n\t            logging.info(f\"Invalid covmode. Not supported by the tritondse library {e}\")\n\t            self.agent.stop()\n\t            return\n\t        if sast_report:\n", "            self.sast_report = SASTReport.from_json(sast_report)\n\t            logging.info(f\"SAST report loaded: alerts:{len(list(self.sast_report.iter_alerts()))}\")\n\t        # Set seed scheduler based on whether tracing is enabled.\n\t        if self._tracing_enabled:\n\t            seed_scheduler_class = WorklistAddressToSet\n\t        else:\n\t            seed_scheduler_class = FreshSeedPrioritizerWorklist\n\t        dse = SymbolicExplorator(self.config, self.program, workspace=workspace, seed_scheduler_class=seed_scheduler_class)\n\t        # Register common callbacks\n\t        dse.callback_manager.register_new_input_callback(self.send_seed_to_broker) # must be the second cb\n", "        dse.callback_manager.register_post_execution_callback(self.cb_post_execution)\n\t        dse.callback_manager.register_exploration_step_callback(self.cb_telemetry)\n\t        for probe in self._probes:\n\t            dse.callback_manager.register_probe(probe)\n\t        # Save check mode\n\t        self._chkmode = chkmode\n\t        if chkmode == CheckMode.CHECK_ALL:\n\t           dse.callback_manager.register_probe(UAFSanitizer())\n\t           dse.callback_manager.register_probe(NullDerefSanitizer())\n\t           dse.callback_manager.register_probe(FormatStringSanitizer())\n", "           #dse.callback_manager.register_probe(IntegerOverflowSanitizer())\n\t           # TODO Buffer overflow\n\t        elif chkmode == CheckMode.ALERT_ONLY:\n\t           dse.callback_manager.register_function_callback('__sast_alert_placeholder', self.intrinsic_callback)\n\t        elif chkmode == CheckMode.ALERT_ONE:  # targeted approach\n\t            if not isinstance(self.program, QuokkaProgram):\n\t                logging.error(f\"Targeted mode [{chkmode.name}] requires a Quokka program\")\n\t                self.agent.stop()\n\t                return\n\t            target_addr = self.config.custom['target']  # retrieve the target address to reach\n", "            dse.callback_manager.register_post_addr_callback(target_addr, self.intrinsic_callback)\n\t            # NOTE Target address must be the starting address of a basic block.\n\t            slice_from = self.program.find_function_addr('main')\n\t            slice_to = target_addr\n\t            if slice_from and slice_to:\n\t                # Find the functions that correspond to the from and to addresses.\n\t                slice_from_fn = self.program.find_function_from_addr(slice_from)\n\t                slice_to_fn = self.program.find_function_from_addr(slice_to)\n\t                logging.info(f\"launching exploration in targeted mode on: 0x{target_addr:08x} in {slice_to_fn.name}\")\n\t                if slice_from_fn and slice_to_fn:\n", "                    # NOTE Generate call graph with backedges so when we do the\n\t                    #      slice it also includes functions that are called in\n\t                    #      the path from the source to the destination of the\n\t                    #      slice.\n\t                    call_graph = self.program.get_call_graph(backedge_on_ret=True)\n\t                    logging.info(f'Slicing program from {slice_from:#x} ({slice_from_fn.name}) to {slice_to:#x} ({slice_to_fn.name})')\n\t                    self._program_slice = QuokkaProgram.get_slice(call_graph, slice_from_fn.start, slice_to_fn.start)\n\t                    logging.info(f'Call graph (full): #nodes: {len(call_graph.nodes)}, #edges: {len(call_graph.edges)}')\n\t                    logging.info(f'Call graph (sliced): #nodes: {len(self._program_slice.nodes)}, #edges: {len(self._program_slice.edges)}')\n\t                    dse.callback_manager.register_on_solving_callback(self.cb_on_solving)\n", "                else:\n\t                    logging.warning(f'Invalid source or target function, skipping slicing!')\n\t            else:\n\t                logging.warning(f'Invalid source or target addresses, skipping slicing!')\n\t        # will trigger the dse to start has another thread is waiting for self.dse to be not None\n\t        self.dse = dse\n\t    def _get_seed(self, raw_seed: bytes) -> Seed:\n\t        # Convert seed to CompositeData\n\t        seed = Seed.from_bytes(raw_seed)\n\t        if self.config.is_format_composite() and seed.is_raw() and self._seedloc == SeedInjectLoc.ARGV:\n", "            logging.debug(\"convert raw seed to composite\")\n\t            return Seed(CompositeData(files={self.INPUT_FILE_NAME: seed.content}))\n\t        elif self.config.is_format_composite() and seed.is_raw() and self._seedloc == SeedInjectLoc.STDIN:\n\t            logging.warning(\"Seed is RAW but format is COMPOSITE with injection on STDIN\")\n\t            return Seed(CompositeData(files={\"stdin\": seed.content}))\n\t        else:\n\t            return seed\n\t    def seed_received(self, typ: SeedType, seed: bytes):\n\t        \"\"\"\n\t        This function is called when we receive a seed from the broker.\n", "        :param typ: The type of the seed\n\t        :param seed: The seed\n\t        :return: None\n\t        \"\"\"\n\t        seed = self._get_seed(seed)\n\t        if seed in self._seed_received:\n\t            logging.warning(f\"receiving seed already known: {seed.hash} (dropped)\")\n\t            return\n\t        else:\n\t            self._seed_queue.put((seed, typ))\n", "            logging.info(f\"seed received {seed.hash} (pool: {self._seed_queue.qsize()})\")\n\t    def _process_seed_received(self, typ: SeedType, seed: Seed):\n\t        \"\"\"\n\t        This function is called when we receive a seed from the broker.\n\t        :param typ: The type of the seed\n\t        :param seed: The seed\n\t        :return: None\n\t        \"\"\"\n\t        try:\n\t            if not self._tracing_enabled:\n", "                # Accept all seeds\n\t                self.dse.add_input_seed(seed)\n\t            else:  # Try running the seed to know whether to keep it\n\t                # NOTE: re-run the seed regardless of its status\n\t                coverage = None\n\t                logging.info(f\"process seed received {seed.hash} (pool: {self._seed_queue.qsize()})\")\n\t                data = seed.content.files[self.INPUT_FILE_NAME] if seed.is_composite() else seed.bytes()\n\t                self.replay_seed_file.write_bytes(data)\n\t                # Adjust injection location before calling QBDITrace\n\t                if self._seedloc == SeedInjectLoc.STDIN:\n", "                    stdin_file = str(self.replay_seed_file)\n\t                    argv = self.config.program_argv\n\t                else:  # SeedInjectLoc.ARGV\n\t                    stdin_file = None\n\t                    try:\n\t                        # Replace 'input_file' in argv with the temporary file name created\n\t                        argv = self.config.program_argv[:]\n\t                        idx = argv.index(self.INPUT_FILE_NAME)\n\t                        argv[idx] = str(self.replay_seed_file)\n\t                    except ValueError:\n", "                        logging.error(f\"seed injection {self._seedloc.name} but can't find 'input_file' on program argv\")\n\t                        return\n\t                try:\n\t                    # Run the seed and determine whether it improves our current coverage.\n\t                    t0 = time.time()\n\t                    if QBDITrace.run(self.config.coverage_strategy,\n\t                                          str(self.program.path.resolve()),\n\t                                          argv[1:] if len(argv) > 1 else [],\n\t                                          output_path=str(self.replay_trace_file),\n\t                                          stdin_file=stdin_file,\n", "                                          cwd=Path(self.program.path).parent,\n\t                                          timeout=60):\n\t                        coverage = QBDITrace.from_file(str(self.replay_trace_file)).coverage\n\t                    else:\n\t                        logging.warning(\"Cannot load the coverage file generated (maybe had crashed?)\")\n\t                        coverage = None\n\t                    self._replay_acc += time.time() - t0  # Save time spent replaying inputs\n\t                except FileNotFoundError:\n\t                    logging.warning(\"Cannot load the coverage file generated (maybe had crashed?)\")\n\t                except TraceException:\n", "                    logging.warning('There was an error while trying to re-run the seed')\n\t                if not coverage:\n\t                    logging.warning(f\"coverage not found after replaying: {seed.hash} [{typ.name}] (add it anyway)\")\n\t                    # Add the seed anyway, if it was not possible to re-run the seed.\n\t                    # TODO Set seed.coverage_objectives as \"empty\" (use ellipsis\n\t                    # object). Modify WorklistAddressToSet to support it.\n\t                    self.seeds_merged += 1\n\t                    self.dse.add_input_seed(seed)\n\t                else:\n\t                    # Check whether the seed improves the current coverage.\n", "                    if self.dse.coverage.improve_coverage(coverage):\n\t                        logging.info(f\"seed added {seed.hash} [{typ.name}] (coverage merged)\")\n\t                        self.seeds_merged += 1\n\t                        self.dse.coverage.merge(coverage)\n\t                        self.dse.seeds_manager.worklist.update_worklist(coverage)\n\t                        seed.coverage_objectives = self.dse.coverage.new_items_to_cover(coverage)\n\t                        self.dse.add_input_seed(seed)\n\t                    else:\n\t                        logging.info(f\"seed archived {seed.hash} [{typ.name}] (NOT merging coverage)\")\n\t                        self.seeds_rejected += 1\n", "                        #self.dse.seeds_manager.archive_seed(seed)\n\t                        # logging.info(f\"seed archived {seed.hash} [{typ.name}]\")\n\t            self._seed_received.add(seed)  # Remember seed received not to send them back\n\t        except FileNotFoundError as e:\n\t            # NOTE If reset() is call during the execution of this function,\n\t            #      self.dse will be set to None and an AttributeError will occur.\n\t            logging.warning(f\"receiving seeds while the DSE is not instantiated {e}\")\n\t        rcv = len(self._seed_received)\n\t        logging.info(f\"seeds recv: {rcv} | merged {self.seeds_merged} [{(self.seeds_merged/rcv) * 100:.2f}%]\"\n\t                     f\" rejected {self.seeds_rejected} [{(self.seeds_rejected/rcv) * 100:.2f}%]\")\n", "    def stop_received(self):\n\t        \"\"\"\n\t        This function is called when the broker says stop. (Called from the agent thread)\n\t        \"\"\"\n\t        logging.info(f\"[BROKER] [STOP]\")\n\t        if self.dse:\n\t            self.dse.stop_exploration()\n\t        self.save_stats()  # Save stats\n\t        self._stop = True\n\t        # self.agent.stop()  # Can't call it here as this function executed from within agent thread\n", "    def save_stats(self):\n\t        stat_file = self.dse.workspace.get_metadata_file_path(self.STAT_FILE)\n\t        data = {\n\t            \"total_time\": time.time() - self._start_time,\n\t            \"emulation_time\": self.dse.total_emulation_time,  # Note: includes replay time but not solving\n\t            \"solving_time\": self.dse.seeds_manager.total_solving_time,\n\t            \"replay_time\": self._replay_acc,\n\t            \"seed_accepted\": self.seeds_merged,\n\t            \"seed_rejected\": self.seeds_rejected,\n\t            \"seed_received\": self.seeds_merged + self.seeds_rejected\n", "        }\n\t        stat_file.write_text(json.dumps(data))\n\t    def dual_log(self, level: LogLevel, message: str) -> None:\n\t        \"\"\"\n\t        Helper function to log message both in the local log system and also\n\t        to the broker.\n\t        :param level: LogLevel message type\n\t        :param message: string message to log\n\t        :return: None\n\t        \"\"\"\n", "        mapper = {LogLevel.DEBUG: \"debug\",\n\t                  LogLevel.INFO: \"info\",\n\t                  LogLevel.CRITICAL: \"critical\",\n\t                  LogLevel.WARNING: \"warning\",\n\t                  LogLevel.ERROR: \"error\"}\n\t        log_f = getattr(logging, mapper[level])\n\t        log_f(message)\n\t        self.agent.send_log(level, message)\n\t    def send_seed_to_broker(self, se: SymbolicExecutor, state: ProcessState, seed: Seed):\n\t        if seed not in self._seed_received:  # Do not send back a seed that already came from broker\n", "            self._sending_count += 1\n\t            logging.info(f\"Sending new: {seed.hash} [{self._sending_count}]\")\n\t            bytes = seed.content.files[self.INPUT_FILE_NAME] if seed.is_composite() else seed.content\n\t            self.agent.send_seed(SeedType.INPUT, bytes)\n\t    def intrinsic_callback(self, se: SymbolicExecutor, state: ProcessState, addr: Addr):\n\t        \"\"\"\n\t        This function is called when an intrinsic call occurs in order to verify\n\t        defaults and vulnerabilities.\n\t        :param se: The current symbolic executor\n\t        :param state: The current processus state of the execution\n", "        :param addr: The instruction address of the intrinsic call\n\t        :return: None\n\t        \"\"\"\n\t        alert_id = state.get_argument_value(0)\n\t        self._last_id = alert_id\n\t        self._last_id_pc = se.previous_pc\n\t        def status_changed(a, cov, vld):\n\t            return a.covered != cov or a.validated != vld\n\t        if self.sast_report:\n\t            # Retrieve the SASTAlert object from the report\n", "            try:\n\t                alert = self.sast_report.get_alert(alert_id)\n\t                cov, vld = alert.covered, alert.validated\n\t            except IndexError:\n\t                logging.warning(f\"Intrinsic id {alert_id} not found in report (ignored)\")\n\t                return\n\t            if not alert.covered:\n\t                self.dual_log(LogLevel.INFO, f\"Alert [{alert.id}] in {alert.file}:{alert.line}: {alert.type} covered !\")\n\t                alert.covered = True  # that might also set validated to true!\n\t            if not alert.validated:  # If of type VULNERABILITY and not yet validated\n", "                res = self.check_alert_dispatcher(alert.code, se, state, addr)\n\t                if res:\n\t                    alert.validated = True\n\t                    self.dual_log(LogLevel.INFO, f\"Alert [{alert.id}] in {alert.file}:{alert.line}: {alert.type} validation [SUCCESS]\")\n\t                    if se.seed.is_status_set():\n\t                        logging.warning(f\"Status already set ({se.seed.status}) for seed {se.seed.hash} (override with CRASH)\")\n\t                    se.seed.status = SeedStatus.CRASH  # Mark the seed as crash, as it validates an alert\n\t                else:\n\t                    logging.info(f\"Alert [{alert.id}] in {alert.file}:{alert.line}: validation [FAIL]\")\n\t            if status_changed(alert, cov, vld):  # If either coverage or validation were improved print stats\n", "                # Send updates to the broker\n\t                self.agent.send_alert_data(AlertData(alert.id, alert.covered, alert.validated, se.seed.content, se.previous_pc))\n\t                cov, vals, tot = self.sast_report.get_stats()\n\t                logging.info(f\"SAST stats: defaults: [covered:{cov}/{tot}] [validated:{vals}/{tot}]\")\n\t                if self.sast_report.all_alerts_validated() or (self._chkmode == CheckMode.ALERT_ONE and alert.validated):\n\t                    self._do_stop_all_alerts_validated()\n\t        else:  # Kind of autonomous mode. Try to check it even it is not bound to a report\n\t            # Retrieve alert type from parameters\n\t            alert_type = se.pstate.get_string_argument(1)\n\t            try:\n", "                if self.check_alert_dispatcher(alert_type, se, state, addr):\n\t                    logging.info(f\"Alert {alert_id} of type {alert_type} [VALIDATED]\")\n\t                else:\n\t                    logging.info(f\"Alert {alert_id} of type {alert_type} [NOT VALIDATED]\")\n\t            except KeyError:\n\t                logging.error(f\"Alert type {alert_type} not recognized\")\n\t    def check_alert_dispatcher(self, type: str, se: SymbolicExecutor, state: ProcessState, addr: Addr) -> bool:\n\t        \"\"\"\n\t        This function is called by intrinsic_callback in order to verify defaults\n\t        and vulnerabilities.\n", "        :param type: Type of the alert as a string\n\t        :param se: The current symbolic executor\n\t        :param state: The current processus state of the execution\n\t        :param addr: The instruction address of the intrinsic call\n\t        :return: True if a vulnerability has been verified\n\t        \"\"\"\n\t        # BUFFER_OVERFLOW related alerts\n\t        if type == \"SV_STRBO_UNBOUND_COPY\":\n\t            size = se.pstate.get_argument_value(2)\n\t            ptr = se.pstate.get_argument_value(3)\n", "            # Runtime check\n\t            if len(se.pstate.get_memory_string(ptr)) >= size:\n\t                # FIXME: Do we have to define the seed as CRASH even if there is no crash?\n\t                # FIXME: Maybe we have to define a new TAG like BUG or VULN or whatever\n\t                return True\n\t            # Symbolic check\n\t            actx = se.pstate.actx\n\t            predicate = [se.pstate.tt_ctx.getPathPredicate()]\n\t            # For each memory cell, try to proof that they can be different from \\0\n\t            for i in range(size + 1): # +1 in order to proof that we can at least do an off-by-one\n", "                cell = se.pstate.tt_ctx.getMemoryAst(MemoryAccess(ptr + i, CPUSIZE.BYTE))\n\t                predicate.append(cell != 0)\n\t            # FIXME: Maybe we can generate models until unsat in order to find the bigger string\n\t            model = se.pstate.tt_ctx.getModel(actx.land(predicate))\n\t            if model:\n\t                crash_seed = mk_new_crashing_seed(se, model)\n\t                se.workspace.save_seed(crash_seed)\n\t                logging.info(f'Model found for a seed which may lead to a crash ({crash_seed.filename})')\n\t                return True\n\t            return False\n", "        ######################################################################\n\t        # BUFFER_OVERFLOW related alerts\n\t        elif type == \"SV_STRBO_BOUND_COPY_OVERFLOW\":\n\t            dst_size = se.pstate.get_argument_value(2)\n\t            ptr_inpt = se.pstate.get_argument_value(3)\n\t            max_size = se.pstate.get_argument_value(4)\n\t            # Runtime check\n\t            if max_size >= dst_size and len(se.pstate.get_memory_string(ptr_inpt)) >= dst_size:\n\t                # FIXME: Do we have to define the seed as CRASH even if there is no crash?\n\t                # FIXME: Maybe we have to define a new TAG like BUG or VULN or whatever\n", "                return True\n\t            # Symbolic check\n\t            actx = se.pstate.actx\n\t            max_size_s = se.pstate.get_argument_symbolic(4).getAst()\n\t            predicate = [se.pstate.tt_ctx.getPathPredicate(), max_size_s >= dst_size]\n\t            # For each memory cell, try to proof that they can be different from \\0\n\t            for i in range(dst_size + 1): # +1 in order to proof that we can at least do an off-by-one\n\t                cell = se.pstate.tt_ctx.getMemoryAst(MemoryAccess(ptr_inpt + i, CPUSIZE.BYTE))\n\t                predicate.append(cell != 0)\n\t            # FIXME: Maybe we can generate models until unsat in order to find the bigger string\n", "            model = se.pstate.tt_ctx.getModel(actx.land(predicate))\n\t            if model:\n\t                crash_seed = mk_new_crashing_seed(se, model)\n\t                se.workspace.save_seed(crash_seed)\n\t                logging.info(f'Model found for a seed which may lead to a crash ({crash_seed.filename})')\n\t                return True\n\t            return False\n\t        ######################################################################\n\t        # BUFFER_OVERFLOW related alerts\n\t        elif type == \"ABV_GENERAL\":\n", "            logging.warning(f'ABV_GENERAL encounter but can not check the issue. This issue will be handle if the program will crash.')\n\t            return False\n\t        ######################################################################\n\t        # All INTEGER_OVERFLOW related alerts\n\t        elif type == \"NUM_OVERFLOW\":\n\t            return IntegerOverflowSanitizer.check(se, state, state.current_instruction)\n\t        ######################################################################\n\t        # All USE_AFTER_FREE related alerts\n\t        elif type in [\"UFM_DEREF_MIGHT\", \"UFM_FFM_MUST\", \"UFM_FFM_MIGHT\"]:\n\t            ptr = se.pstate.get_argument_value(2)\n", "            return UAFSanitizer.check(se, state, ptr, f'UAF detected at {ptr:#x}')\n\t        ######################################################################\n\t        # All FORMAT_STRING related alerts\n\t        elif type in [\"SV_TAINTED_FMTSTR\", \"SV_FMTSTR_GENERIC\"]:\n\t            ptr = se.pstate.get_argument_value(2)\n\t            return FormatStringSanitizer.check(se, state, addr, ptr)\n\t        ######################################################################\n\t        # All INVALID_MEMORY related alerts\n\t        # FIXME: NPD_CHECK_MIGHT and NPD_CONST_CALL are not supported by klocwork-alert-inserter\n\t        elif type in [\"NPD_FUNC_MUST\", \"NPD_FUNC_MIGHT\", \"NPD_CHECK_MIGHT\", \"NPD_CONST_CALL\"]:\n", "            ptr = se.pstate.get_argument_value(2)\n\t            return NullDerefSanitizer.check(se, state, ptr, f'Invalid memory access at {ptr:#x}')\n\t        ######################################################################\n\t        elif type == \"MISRA_ETYPE_CATEGORY_DIFFERENT_2012\":\n\t            expr = se.pstate.get_argument_symbolic(2).getAst()\n\t            # Runtime check\n\t            if expr.isSigned():\n\t                # FIXME: Do we have to define the seed as CRASH even if there is no crash?\n\t                # FIXME: Maybe we have to define a new TAG like BUG or VULN or whatever\n\t                return True\n", "            # Symbolic check\n\t            actx = se.pstate.tt_ctx.getAstContext()\n\t            size = expr.getBitvectorSize() - 1\n\t            predicate = [se.pstate.tt_ctx.getPathPredicate(), actx.extract(size - 1, size - 1, expr) == 1]\n\t            model = se.pstate.tt_ctx.getModel(actx.land(predicate))\n\t            if model:\n\t                crash_seed = mk_new_crashing_seed(se, model)\n\t                se.workspace.save_seed(crash_seed)\n\t                logging.info(f'Model found for a seed which may lead to a crash ({crash_seed.filename})')\n\t                return True\n", "            return False\n\t        else:\n\t            logging.error(f\"Unsupported alert kind {type}\")\n\t    def _do_stop_all_alerts_validated(self) -> None:\n\t        \"\"\"\n\t        Function called if all alerts have been covered and validated. All data are meant to\n\t        have been transmitted to the broker, but writes down locally the CSV anyway\n\t        :return: None\n\t        \"\"\"\n\t        logging.info(\"All defaults and vulnerability have been covered !\")\n", "        # Write the final CSV in the workspace directory\n\t        out_file = self.dse.workspace.get_metadata_file_path(\"klocwork_coverage_results.csv\")\n\t        self.sast_report.write_csv(out_file)\n\t        # Stop the dse exploration\n\t        self.dse.terminate_exploration()\n\t    def is_compatible_with_local(self, program: Program) -> bool:\n\t        \"\"\"\n\t        Checks whether the given program is compatible with the current architecture\n\t        and platform.\n\t        :param program: Program\n", "        :return: True if the program can be run locally\n\t        \"\"\"\n\t        arch_m = {\"i386\": Architecture.X86, \"x86_64\": Architecture.X86_64, \"armv7l\": Architecture.ARM32, \"aarch64\": Architecture.AARCH64}\n\t        plfm_m = {\"Linux\": Platform.LINUX, \"Windows\": Platform.WINDOWS, \"MacOS\": Platform.MACOS, \"iOS\": Platform.IOS}\n\t        local_arch, local_plfm = arch_m[platform.machine()], plfm_m[platform.system()]\n\t        return program.architecture == local_arch and program.platform == local_plfm\n"]}
{"filename": "engines/pastis-triton/pastisdse/__init__.py", "chunked_list": ["from typing import Tuple\n\timport subprocess\n\tfrom .pastisdse import PastisDSE\n\t# Expose triton version\n\timport tritondse\n\t__version__ = \"1.0.0\"\n\tTRITON_VERSION = tritondse.TRITON_VERSION\n\tdef spawn_online_triton(port: int = 5555, probe: Tuple[str] = ()):\n\t    tt = [\"pastis-triton\", \"online\", \"-p\", f\"{port}\"]\n\t    if len(probe) > 0:\n", "        tt += [\"--probe\", f\"{probe}\"]\n\t    subprocess.Popen(tt, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n"]}
{"filename": "doc/conf.py", "chunked_list": ["# Configuration file for the Sphinx documentation builder.\n\t#\n\t# This file only contains a selection of the most common options. For a full\n\t# list see the documentation:\n\t# http://www.sphinx-doc.org/en/master/config\n\t# -- Path setup --------------------------------------------------------------\n\t# If extensions (or modules to document with autodoc) are in another directory,\n\t# add these directories to sys.path here. If the directory is relative to the\n\t# documentation root, use os.path.abspath to make it absolute, like shown here.\n\timport os\n", "import sys\n\timport datetime\n\timport sphinx_fontawesome\n\tsys.path.insert(0, os.path.abspath('../libpastis'))\n\t# -- Project information -----------------------------------------------------\n\tproject = 'PASTIS'\n\tcopyright = '2023, Quarkslab'\n\tauthor = 'Quarkslab'\n\t# The full version, including alpha/beta/rc tags\n\trelease = '0.2'\n", "# The language for content autogenerated by Sphinx. Refer to documentation\n\t# for a list of supported languages.\n\tlanguage = 'en'\n\t# The name of the Pygments (syntax highlighting) style to use.\n\tpygments_style = 'monokai'  # also monokai, friendly, colorful\n\t# -- General configuration ---------------------------------------------------\n\t# Add any Sphinx extension module names here, as strings. They can be\n\t# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n\t# ones.\n\textensions = [\n", "    'sphinx.ext.autodoc',\n\t    'sphinx.ext.todo',\n\t    'sphinx.ext.viewcode',\n\t    'breathe',\n\t    'sphinx.ext.intersphinx',\n\t    'sphinx.ext.githubpages',\n\t    'sphinx_fontawesome',\n\t    \"nbsphinx\",\n\t]\n\t# Add any paths that contain templates here, relative to this directory.\n", "templates_path = ['_templates']\n\t# List of patterns, relative to source directory, that match files and\n\t# directories to ignore when looking for source files.\n\t# This pattern also affects html_static_path and html_extra_path.\n\texclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', '**.ipynb_checkpoints']\n\t# -- Options for HTML output -------------------------------------------------\n\t# The theme to use for HTML and HTML Help pages.  See the documentation for\n\t# a list of builtin themes.\n\t#\n\thtml_theme = \"sphinx_rtd_theme\"\n", "html_theme_options = {\n\t    # If False, expand all TOC entries\n\t    'globaltoc_collapse': False,\n\t}\n\t# Add any paths that contain custom static files (such as style sheets) here,\n\t# relative to this directory. They are copied after the builtin static files,\n\t# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n\thtml_static_path = ['figs']\n\tautodoc_default_flags = ['members', 'inherited-members']\n\t# For internationalization\n", "locale_dirs = ['locale/']   # path is example but recommended.\n\tgettext_compact = False     # optional.\n\tautoclass_content = \"both\"  # Comment class with both class docstring and __init__ docstring\n\tautodoc_typehints = \"signature\"\n\tautodoc_type_aliases = {\n\t}\n\tintersphinx_mapping = {'python': ('https://docs.python.org/3', None),\n\t                       'lief': ('https://lief-project.github.io/doc/latest/', None)}\n"]}
{"filename": "tests/test_broker.py", "chunked_list": ["#!/usr/bin/env python3\n\timport logging\n\tfrom typing import Tuple, List\n\tfrom libpastis.agent import BrokerAgent\n\tfrom libpastis.types import SeedType, FuzzingEngineInfo, LogLevel, Arch, State\n\tlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s %(message)s\")\n\tdef seed_received(cli_id: bytes, typ: SeedType, seed: bytes):\n\t    global agent\n\t    logging.info(f\"[{cli_id.hex()}] [SEED] {seed.hex()} ({typ.name})\")\n\t    agent.send_seed(cli_id, typ, seed[::-1])\n", "def hello_received(cli_id: bytes, engines: List[FuzzingEngineInfo], arch: Arch, cpus: int, memory: int):\n\t    logging.info(f\"[{cli_id.hex()}] [HELLO] Arch:{arch.name} engines:{[x.name for x in engines]} (cpu:{cpus}, mem:{memory})\")\n\tdef log_received(cli_id: bytes, level: LogLevel, message: str):\n\t    logging.info(f\"[{cli_id.hex()}] [LOG] [{level.name}] {message}\")\n\tdef telemetry_received(cli_id: bytes, *args):\n\t    # state: State = None, exec_per_sec: int = None, total_exec: int = None,\n\t    # cycle: int = None, timeout: int = None, coverage_block: int = None, coverage_edge: int = None,\n\t    # coverage_path: int = None, last_cov_update: int = None):\n\t    logging.info(f\"[{cli_id.hex()}] [TELEMETRY] [{args}\")\n\tdef stop_coverage_received(cli_id: bytes):\n", "    logging.info(f\"[{cli_id.hex()}] [STOP_COVERAGE]\")\n\tif __name__ == \"__main__\":\n\t    agent = BrokerAgent()\n\t    agent.bind()\n\t    agent.register_seed_callback(seed_received)\n\t    agent.register_hello_callback(hello_received)\n\t    agent.register_log_callback(log_received)\n\t    agent.register_telemetry_callback(telemetry_received)\n\t    agent.register_stop_coverage_callback(stop_coverage_received)\n\t    agent.run()\n"]}
{"filename": "tests/test_client.py", "chunked_list": ["#!/usr/bin/env python3\n\timport random\n\timport time\n\timport logging\n\tfrom typing import List\n\tfrom libpastis.agent import ClientAgent\n\tfrom libpastis.types import SeedType, FuzzingEngineInfo, ExecMode, CoverageMode, SeedInjectLoc, CheckMode, LogLevel, State\n\tlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s %(message)s\")\n\tdef start_received(fname: str, binary: bytes, engine: FuzzingEngineInfo, exmode: ExecMode, chkmode: CheckMode,\n\t                   covmode: CoverageMode, seed_inj: SeedInjectLoc, engine_args: str, argv: List[str], kl_report: str=None):\n", "    logging.info(f\"[START] bin:{fname} engine:{engine.name} exmode:{exmode.name} cov:{covmode.name} chk:{chkmode.name}\")\n\tdef seed_received(typ: SeedType, seed: bytes):\n\t    logging.info(f\"[SEED] {seed.hex()} ({typ})\")\n\tdef stop_received():\n\t    logging.info(f\"[STOP]\")\n\tif __name__ == \"__main__\":\n\t    agent = ClientAgent()\n\t    agent.connect()\n\t    agent.register_start_callback(start_received)\n\t    agent.register_seed_callback(seed_received)\n", "    agent.register_stop_callback(stop_received)\n\t    agent.start()\n\t    agent.send_hello([FuzzingEngineInfo(\"TRITON\", \"v0.8\", \"pastistriton\")])\n\t    logging.info(\"Hello sent!\")\n\t    # agent.run()\n\t    # exit(0)\n\t    while True:\n\t        #  Do some 'work'\n\t        time.sleep(3)\n\t        #continue\n", "        v = random.randint(0, 2)\n\t        if v == 0:\n\t            seed = bytes(random.getrandbits(8) for _ in range(16))\n\t            agent.send_seed(SeedType.INPUT, seed)\n\t        elif v == 1:\n\t            level = random.choice(list(LogLevel))\n\t            agent.send_log(level, f\"Message: {random.randint(0, 100)}\")\n\t            # can also call agent.debug(), agent.warning() ..\n\t        elif v == 2:\n\t            r1, r2, r3 = [random.randint(0, 100) for _ in range(3)]\n", "            agent.send_telemetry(State.RUNNING, exec_per_sec=r1, total_exec=r2, timeout=r3)\n\t        # elif v == 3:\n\t        #     agent.send_stop_coverage_criteria()\n"]}
{"filename": "tests/broker_fw_honggfuzz_seed.py", "chunked_list": ["#!/usr/bin/env python3\n\timport logging\n\tfrom typing import Tuple, List\n\timport sys\n\tfrom pathlib import Path\n\timport inotify.adapters\n\tfrom libpastis.agent import BrokerAgent\n\tfrom libpastis.types import SeedType, FuzzingEngineInfo, LogLevel, Arch, State\n\tlogging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s %(message)s\")\n\tclients = set()\n", "def seed_received(cli_id: bytes, typ: SeedType, seed: bytes):\n\t    logging.info(f\"[{cli_id.hex()}] [SEED] {seed.hex()} ({typ.name})\")\n\tdef hello_received(cli_id: bytes, engines: List[FuzzingEngineInfo], arch: Arch, cpus: int, memory: int):\n\t    global clients\n\t    if cli_id not in clients:\n\t        logging.info(f\"[broker] new client: {cli_id.hex()}\")\n\t        clients.add(cli_id)\n\t    logging.info(f\"[{cli_id.hex()}] [HELLO] Arch:{arch.name} engines:{[x.name for x in engines]} (cpu:{cpus}, mem:{memory})\")\n\tdef log_received(cli_id: bytes, level: LogLevel, message: str):\n\t    logging.info(f\"[{cli_id.hex()}] [LOG] [{level.name}] {message}\")\n", "def telemetry_received(cli_id: bytes, *args):\n\t    logging.info(f\"[{cli_id.hex()}] [TELEMETRY] [{args}\")\n\tdef stop_coverage_received(cli_id: bytes):\n\t    logging.info(f\"[{cli_id.hex()}] [STOP_COVERAGE]\")\n\tif __name__ == \"__main__\":\n\t    agent = BrokerAgent()\n\t    agent.bind()\n\t    agent.register_seed_callback(seed_received)\n\t    agent.register_hello_callback(hello_received)\n\t    agent.register_log_callback(log_received)\n", "    agent.register_telemetry_callback(telemetry_received)\n\t    agent.register_stop_coverage_callback(stop_coverage_received)\n\t    agent.start()\n\t    # Now start listening on a seed folder given in parameter\n\t    # and send them to all clients that have at least sent\n\t    # once a message\n\t    i = inotify.adapters.Inotify()\n\t    i.add_watch(sys.argv[1])\n\t    for event in i.event_gen():\n\t        if event is not None:\n", "            (header, type_names, watch_path, filename) = event\n\t            if 'IN_CLOSE_WRITE' in type_names:\n\t                file = Path(watch_path) / filename\n\t                bts = file.read_bytes()\n\t                print(f\"send: {filename}\")\n\t                for cli in clients:\n\t                    agent.send_seed(cli, SeedType.INPUT, bts)\n\t'''\n\tPYTHONPATH=. python3  ./tests/broker_fw_honggfuzz_seed.py /tmp/toto \n\t'''"]}
{"filename": "pastisbenchmark/replayer.py", "chunked_list": ["# built-in imports\n\tfrom enum import Enum, auto\n\tfrom pathlib import Path\n\tfrom typing import Generator, Optional\n\timport os\n\timport subprocess\n\timport logging\n\timport time\n\timport re\n\tfrom datetime import datetime, timedelta\n", "# third-party\n\tfrom pastisbroker.workspace import Workspace, WorkspaceStatus\n\tfrom libpastis.types import SeedInjectLoc, SeedType\n\tfrom tritondse.trace import QBDITrace, TraceException\n\tfrom tritondse import CoverageStrategy\n\tclass ReplayType(Enum):\n\t    qbdi = auto()\n\t    llvm_profile = auto()\n\tclass Replayer(object):\n\t    QBDI_REPLAY_DIR = \"replays_qbdi\"\n", "    LLVMPROFILE_REPLAY_DIR = \"replays_llvmprof\"\n\t    REPLAY_FAILS_LOG = \"replay_fails.log\"\n\t    def __init__(self, program: Path, workspace: Path, type: ReplayType, injloc: SeedInjectLoc,\n\t                 stream: bool = False, full: bool = False, timeout: int = 15, *args):\n\t        self.workspace = Workspace(workspace)\n\t        self.type = type\n\t        self.stream = stream\n\t        self._full = full\n\t        self.program = Path(program)\n\t        self._inject_loc = injloc\n", "        self._timeout = timeout\n\t        self._args = list(args)\n\t        self._fails = []\n\t        self._tracing_times = []\n\t        # initiatialize directories\n\t        self._init_directories()\n\t    def _init_directories(self):\n\t        if not self.corpus_replay_dir.exists():\n\t            self.corpus_replay_dir.mkdir()\n\t    @property\n", "    def corpus_replay_dir(self) -> Path:\n\t        if self.type == ReplayType.qbdi:\n\t            return self.workspace.root / self.QBDI_REPLAY_DIR\n\t        else:\n\t            return self.workspace.root / self.LLVMPROFILE_REPLAY_DIR\n\t    def iter(self) -> Generator[Path, None, None]:\n\t        yield from self.workspace.iter_initial_corpus_directory()\n\t        yield from self.workspace.iter_corpus_directory(SeedType.INPUT)\n\t    def replay(self, input: Path) -> bool:\n\t        if self.type == ReplayType.qbdi:\n", "            return self._replay_qbdi(input)\n\t        else:\n\t            return self._replay_llvm_profile(input)\n\t    def _replay_qbdi(self, input: Path) -> bool:\n\t        out_file = self.corpus_replay_dir / (input.name + \".trace\")\n\t        if out_file.exists():\n\t            # The trace has already been generated\n\t            return True\n\t        args = self._args[:]\n\t        # If inject on argv try replacing the right argv\n", "        if self._inject_loc == SeedInjectLoc.ARGV:\n\t            if \"@@\" in args:\n\t                idx = args.index(\"@@\")\n\t                args[idx] = str(input.absolute())\n\t        try:\n\t            t0 = time.time()\n\t            res = QBDITrace.run(CoverageStrategy.EDGE,\n\t                                 str(self.program.absolute()),\n\t                                 args=args,\n\t                                 output_path=str(out_file.absolute()),\n", "                                 stdin_file=input if self._inject_loc == SeedInjectLoc.STDIN else None,\n\t                                 dump_trace=self._full,\n\t                                 cwd=self.program.parent,\n\t                                 timeout=self._timeout)\n\t            self._tracing_times.append(time.time()-t0)\n\t            return res\n\t        except TraceException as e:\n\t            self._fails.append(input)\n\t            return False\n\t    def _replay_llvm_profile(self, input: Path) -> bool:\n", "        pass\n\t    def start(self):\n\t        # TODO: Start monitoring folders (and status file)\n\t        pass\n\t    def save_fails(self):\n\t        with open(self.workspace.root / self.REPLAY_FAILS_LOG, \"w\") as f:\n\t            f.write(\"\\n\".join(str(x) for x in self._fails))\n\t    def print_stats(self):\n\t        def tt(secs):\n\t            return str(timedelta(seconds=int(secs)))\n", "        if not self._tracing_times:\n\t            print(\"nothing replayed\")\n\t            return\n\t        sum_tracing = sum(self._tracing_times)\n\t        mean_replay = sum_tracing / len(self._tracing_times)\n\t        print(f\"Tracing: {tt(sum_tracing)} (avg: {mean_replay}s)\")\n"]}
{"filename": "pastisbenchmark/models.py", "chunked_list": ["from typing import List\n\tfrom pydantic import BaseModel\n\tclass InputEntry(BaseModel):\n\t    engine: str\n\t    number: int\n\t    unique: int\n\t    useless: int\n\t    condition: int\n\t    symread: int\n\t    symwrite: int\n", "    symjump: int\n\tclass CoverageEntry(BaseModel):\n\t    engine: str\n\t    number: int\n\t    unique: int\n\t    first: int\n\t    total: int\n\tclass ExecEntry(BaseModel):\n\t    engine: str\n\t    dse: float\n", "    smt: float\n\t    replay: float\n\t    total: float\n\t    wait: float\n\tclass SeedSharingEntry(BaseModel):\n\t    engine: str\n\t    accepted: int\n\t    rejected: int\n\t    total: int\n\t    ratio: float\n", "class SmtEntry(BaseModel):\n\t    engine: str\n\t    sat: int\n\t    unsat: int\n\t    timeout: int\n\t    total: int\n\t    avg_query: float\n\t    cov_sat_ratio: float\n\t    branch_solved: int\n\t    branch_not_solved: int\n", "class CampaignStats(BaseModel):\n\t    input_stats: List[InputEntry]\n\t    coverage_stats: List[CoverageEntry]\n\t    exec_stats: List[ExecEntry]\n\t    seed_sharing_stats: List[SeedSharingEntry]\n\t    smt_stats: List[SmtEntry]\n"]}
{"filename": "pastisbenchmark/__init__.py", "chunked_list": ["from .replayer import ReplayType, Replayer\n\tfrom .results import InputCovDelta, CampaignResult\n\tfrom .plotter import Plotter\n"]}
{"filename": "pastisbenchmark/plotter.py", "chunked_list": ["# built-in imports\n\timport logging\n\tfrom pathlib import Path\n\tfrom typing import Union, List, Dict\n\timport matplotlib.pyplot as plt\n\timport matplotlib.dates as mdates\n\timport json\n\tfrom datetime import timedelta\n\tfrom hashlib import md5\n\timport base64\n", "from collections import Counter\n\t# third-party imports\n\tfrom rich.console import Console\n\tfrom rich.table import Table\n\t# local imports\n\tfrom pastisbenchmark.results import InputCovDelta, CampaignResult\n\tfrom pastisbenchmark.models import CampaignStats, InputEntry, CoverageEntry, ExecEntry, SeedSharingEntry, SmtEntry\n\tfrom tritondse import CoverageStrategy, SmtSolver, BranchSolvingStrategy\n\tclass Plotter(object):\n\t    LABEL_SZ = 18\n", "    TICK_SZ = 13\n\t    FONT_SZ = 18\n\t    LEGEND_SZ = 8\n\t    PLOT_DIR = \"plots\"\n\t    def __init__(self, name: str, timeout: int):\n\t        self.fig, (self.ax1, self.ax2) = plt.subplots(1, 2)\n\t        self.name = name\n\t        self._timeout = timeout\n\t        # self._configure_plot(self.ax1, ylabel=\"coverage (edge)\")\n\t        # self._configure_plot(self.ax2, ylabel=\"coverage (edge)\", is_log=True)\n", "    def _configure_plot(self, plot, ylabel: str, is_log: bool = False):\n\t        plot.tick_params(axis='both', which='major', labelsize=self.TICK_SZ)\n\t        plot.tick_params(axis='both', which='minor', labelsize=self.TICK_SZ)\n\t        plot.set_title(f\"{self.name} {'(logscale)' if is_log else ''}\", fontsize=self.FONT_SZ)\n\t        plot.set(xlabel='seconds', ylabel=ylabel)\n\t        plot.yaxis.label.set_size(self.LABEL_SZ)\n\t        plot.xaxis.label.set_size(self.LABEL_SZ)\n\t        plot.legend(prop={'size': self.LEGEND_SZ})\n\t        if is_log:\n\t            plot.set_xscale(\"log\")\n", "    def add_campaign_to_plot(self, campaign: CampaignResult, show_union: bool=True):\n\t        \"\"\" Iterate all stat_items and generate coverage plot.\"\"\"\n\t        for fuzzer, results in campaign.results:\n\t            is_all_fuzzer = bool(fuzzer == CampaignResult.ALL_FUZZER)\n\t            if fuzzer == CampaignResult.SEED_FUZZER:\n\t                continue\n\t            if is_all_fuzzer and campaign.is_half_duplex and not show_union:\n\t                continue\n\t            if campaign.is_full_duplex and not is_all_fuzzer:  # Only print the ALL fuzzer in fullduplex\n\t                continue\n", "            name = self.format_fuzzer_name(campaign, fuzzer)\n\t            # fmt = self.format_plot(fuzzer, campaign.is_full_duplex)\n\t            marker = \"--\" if campaign.is_half_duplex and is_all_fuzzer else \"-\"\n\t            color = self.format_plot(campaign, fuzzer)\n\t            self.add_to_plot(self.ax1, name, results, is_all_fuzzer, linestyle=marker, color=color)\n\t            self.add_to_plot(self.ax2, name, results, is_all_fuzzer, linestyle=marker, color=color)\n\t    def add_to_plot(self, plot, fuzzer: str, results: List[InputCovDelta], use_global: bool, **kwargs):\n\t        xaxe = [x.time_elapsed for x in results]\n\t        yaxe = [(x.overall_coverage_sum if use_global else x.fuzzer_coverage_sum) for x in results]\n\t        if not yaxe:\n", "            print(f\"no plot for {fuzzer}\")\n\t            return\n\t        # Add dummy value to make horizontal line\n\t        xaxe.append(self._timeout)\n\t        yaxe.append(yaxe[-1])\n\t        plot.plot(xaxe, yaxe, label=fuzzer, linewidth=2, **kwargs)\n\t    def format_fuzzer_name(self, campaign: CampaignResult, fuzzer: str, short: bool=False) -> str:\n\t        if fuzzer == CampaignResult.ALL_FUZZER:\n\t            return campaign.slug_name\n\t        elif fuzzer == CampaignResult.SEED_FUZZER:\n", "            return CampaignResult.SEED_FUZZER\n\t        elif \"TT\" in fuzzer:\n\t            if short:\n\t                return \"TritonDSE\"\n\t            config = campaign.fuzzers_config[fuzzer]\n\t            cov_name = {CoverageStrategy.BLOCK: \"B\", CoverageStrategy.EDGE: \"E\", CoverageStrategy.PREFIXED_EDGE: \"PE\",\n\t                        CoverageStrategy.PATH: \"P\"}[config.coverage_strategy]\n\t            param = [\n\t                \"R\" if BranchSolvingStrategy.COVER_SYM_READ in config.branch_solving_strategy else \"-\",\n\t                \"W\" if BranchSolvingStrategy.COVER_SYM_WRITE in config.branch_solving_strategy else \"-\",\n", "                \"J\" if BranchSolvingStrategy.COVER_SYM_DYNJUMP in config.branch_solving_strategy else \"-\"\n\t            ]\n\t            solver = {SmtSolver.Z3: \"Z3\", SmtSolver.BITWUZLA: \"BZLA\"}[config.smt_solver]\n\t            return f\"TritonDSE[{cov_name}][{''.join(param)}][{solver}]\"\n\t        elif \"AFLPP\" in fuzzer:\n\t            return \"AFL++\"\n\t        elif \"HF\" in fuzzer:\n\t            return \"Honggfuzz\"\n\t        else:\n\t            return fuzzer\n", "    def format_plot(self, campaign, fuzzer) -> str:\n\t        green = \"#30a230\"\n\t        grey = \"#1f77b4\"\n\t        brown = \"#944b0c\"\n\t        if fuzzer == CampaignResult.ALL_FUZZER:\n\t            if campaign.is_full_duplex:\n\t                return green if campaign.has_honggfuzz() else brown\n\t            else:\n\t                return grey\n\t        elif \"TT\" in fuzzer:\n", "            return \"#d62728\"\n\t        elif \"AFLPP\" in fuzzer:\n\t            return \"#ff8214\"\n\t        elif \"HF\" in fuzzer:\n\t            return \"#9467bd\"\n\t        else:\n\t            return \"\"\n\t    def add_triton_input(self, campaign: CampaignResult):\n\t        if campaign.is_full_duplex:\n\t            results = campaign.fuzzers_items[campaign.ALL_FUZZER]\n", "            X = [x.time_elapsed for x in results if \"TT\" in x.fuzzer]\n\t            Y = [x.overall_coverage_sum for x in results if \"TT\" in x.fuzzer]\n\t            self.ax1.plot(X, Y, 'b.', label=\"TT input\")\n\t            self.ax2.plot(X, Y, 'b.', label=\"TT input\")\n\t        else:\n\t            logging.warning(f\"campaign:{campaign.workspace.root} not full duplex do not show triton inputs\")\n\t    def show(self):\n\t        self._configure_plot(self.ax1, ylabel=\"coverage (edge)\")\n\t        self._configure_plot(self.ax2, ylabel=\"coverage (edge)\", is_log=True)\n\t        plt.show()\n", "    def save_to(self, dir: Union[str, Path]) -> None:\n\t        plt.savefig(dir / \"plot.pdf\", dpi=600)\n\t    def calculate_stats(self, campaign: CampaignResult) -> CampaignStats:\n\t        input_stats = self._calcul_input_stats(campaign)\n\t        coverage_stats = self._calcul_coverage_stats(campaign)\n\t        exec_stats = self._calcul_exec_stats(campaign)\n\t        seed_sharing_stats = self._calcul_seed_sharing_stats(campaign)\n\t        smt_stats = self._calcul_smt_stats(campaign, coverage_stats)\n\t        return CampaignStats(input_stats=input_stats, coverage_stats=coverage_stats, exec_stats=exec_stats,\n\t                             seed_sharing_stats=seed_sharing_stats, smt_stats=smt_stats)\n", "    def _calcul_triton_input_to_broker(self, campaign: CampaignResult) -> Dict[str, str]:\n\t        mapping = {}\n\t        def iter_input_dir(conf, dirname):\n\t            tt_workspace = campaign.workspace.root / conf.workspace\n\t            for file in (tt_workspace / dirname).iterdir():\n\t                try:\n\t                     raw = base64.b64decode(json.loads(file.read_text())['files']['input_file'])\n\t                except:\n\t                    raw = file.read_bytes()\n\t                mapping[md5(raw).hexdigest()] = str(file)\n", "        for fuzzer, items in campaign.results:\n\t            if campaign.is_triton(fuzzer):\n\t                conf = campaign.fuzzers_config[fuzzer]\n\t                iter_input_dir(conf, \"corpus\")\n\t                iter_input_dir(conf, \"worklist\")\n\t                iter_input_dir(conf, \"crashes\")\n\t        return mapping\n\t    def _calcul_input_stats(self, campaign: CampaignResult) -> List[InputEntry]:\n\t        entries = []\n\t        # FIXME: Compute uniquness\n", "        useless_ctrs = Counter()\n\t        for fuzzer, items in campaign.results:\n\t            num = len(items)\n\t            for item in items:\n\t                if not len(item.overall_new_items_covered):\n\t                    useless_ctrs[fuzzer] += 1\n\t            syms = {\"CC\": 0, \"SR\": 0, \"SW\": 0, \"DYN\": 0}\n\t            if campaign.is_triton(fuzzer):\n\t                conf = campaign.fuzzers_config[fuzzer]\n\t                tt_workspace = campaign.workspace.root / conf.workspace\n", "                for file in (tt_workspace / \"corpus\").iterdir():\n\t                    for s in syms:\n\t                        if s in str(file):\n\t                            syms[s] += 1\n\t                for file in (tt_workspace / \"worklist\").iterdir():\n\t                    for s in syms:\n\t                        if s in str(file):\n\t                            syms[s] += 1\n\t                for file in (tt_workspace / \"crashes\").iterdir():\n\t                    for s in syms:\n", "                        if s in str(file):\n\t                            syms[s] += 1\n\t            entry = InputEntry(engine=fuzzer, number=num, unique=-1, useless=useless_ctrs[fuzzer], condition=syms[\"CC\"],\n\t                               symread=syms[\"SR\"], symwrite=syms[\"SW\"], symjump=syms[\"DYN\"])\n\t            entries.append(entry)\n\t        return entries\n\t    def _calcul_coverage_stats(self, campaign: CampaignResult) -> List[CoverageEntry]:\n\t        # all_cov = campaign.fuzzers_items[campaign.ALL_FUZZER]\n\t        seed_cov = campaign.fuzzers_coverage[campaign.SEED_FUZZER]\n\t        entries = []\n", "        firsts = Counter()\n\t        for entry in campaign.delta_items:\n\t            firsts[entry.fuzzer] += len(entry.overall_new_items_covered)\n\t        for fuzzer, items in campaign.results:\n\t            cov = campaign.fuzzers_coverage[fuzzer]\n\t            num = len(cov.difference(seed_cov)) if fuzzer != campaign.SEED_FUZZER else cov.unique_covitem_covered\n\t            # FIXME: Compute unique & first\n\t            first = firsts[fuzzer]\n\t            entry = CoverageEntry(engine=fuzzer, number=num, unique=-1, first=first, total=cov.unique_covitem_covered)\n\t            entries.append(entry)\n", "        return entries\n\t    def _calcul_exec_stats(self, campaign: CampaignResult) -> List[ExecEntry]:\n\t        entries = []\n\t        for fuzzer, config in campaign.fuzzers_config.items():\n\t            try:\n\t                if campaign.is_triton(fuzzer):\n\t                    workdir = (campaign.workspace.root / \"clients_ws\") / Path(config.workspace).name\n\t                    pstats = json.loads((workdir / \"metadata/pastidse-stats.json\").read_text())\n\t                    # Timing stats\n\t                    tot, replay_time = pstats[\"total_time\"], pstats[\"replay_time\"]\n", "                    emu_time = pstats.get(\"emulation_time\", 0)\n\t                    solv_time = pstats.get(\"solving_time\")\n\t                    if solv_time is None:\n\t                        sstats = json.loads((workdir / \"metadata/solving_stats.json\").read_text())\n\t                        solv_time = sstats['total_solving_time']\n\t                    dse = emu_time - replay_time\n\t                    run_time = dse + replay_time + solv_time\n\t                    wait = tot - run_time\n\t                    entry = ExecEntry(engine=fuzzer, dse=dse, smt=solv_time, replay=replay_time, total=run_time, wait=wait)\n\t                    entries.append(entry)\n", "            except FileNotFoundError:\n\t                logging.error(f\"can't find Triton stats for {fuzzer}\")\n\t        return entries\n\t    def _calcul_seed_sharing_stats(self, campaign: CampaignResult) -> List[SeedSharingEntry]:\n\t        entries = []\n\t        for fuzzer, config in campaign.fuzzers_config.items():\n\t            try:\n\t                if campaign.is_triton(fuzzer):\n\t                    workdir = (campaign.workspace.root / \"clients_ws\") / Path(config.workspace).name\n\t                    pstats = json.loads((workdir / \"metadata/pastidse-stats.json\").read_text())\n", "                    tots, accs, rejs = pstats[\"seed_received\"], pstats[\"seed_accepted\"], pstats[\"seed_rejected\"]\n\t                    ratio = accs/tots if rejs else 1\n\t                    entry = SeedSharingEntry(engine=fuzzer, accepted=accs, rejected=rejs, total=tots, ratio=ratio)\n\t                    entries.append(entry)\n\t            except FileNotFoundError:\n\t                logging.error(f\"can't find Triton stats for {fuzzer}\")\n\t        return entries\n\t    def _calcul_smt_stats(self, campaign: CampaignResult, cov_results: List[CoverageEntry]) -> List[SmtEntry]:\n\t        cov_data = {cov.engine: cov for cov in cov_results}\n\t        entries = []\n", "        for fuzzer, config in campaign.fuzzers_config.items():\n\t            try:\n\t                if campaign.is_triton(fuzzer):\n\t                    cov_number = cov_data[fuzzer].number if fuzzer in cov_data else 0\n\t                    workdir = (campaign.workspace.root / \"clients_ws\") / Path(config.workspace).name\n\t                    sstats = json.loads((workdir / \"metadata/solving_stats.json\").read_text())\n\t                    # Solving stats\n\t                    sovt = sstats['total_solving_time']\n\t                    stot, sat, unsat, to = sstats[\"total_solving_attempt\"], sstats[\"SAT\"], sstats[\"UNSAT\"], sstats[\"TIMEOUT\"]\n\t                    coved, uncoved = len(sstats[\"branch_reverted\"]), len(sstats[\"branch_not_solved\"])\n", "                    ratio = cov_number / sat if sat else cov_number\n\t                    entry = SmtEntry(engine=fuzzer, sat=sat, unsat=unsat, timeout=to, total=stot, avg_query=sovt/stot,\n\t                                     cov_sat_ratio=ratio, branch_solved=coved, branch_not_solved=uncoved)\n\t                    entries.append(entry)\n\t            except FileNotFoundError:\n\t                logging.error(f\"can't find Triton stats for {fuzzer}\")\n\t        return entries\n\t    def print_stats(self, campaign: CampaignResult, stats: CampaignStats):\n\t        console = Console()\n\t        def sfmt(seconds, total, w = True) -> str:\n", "            m, s = divmod(seconds, 60)\n\t            h, m = divmod(m, 60)\n\t            s = int(s) if int(s) > 0 else f\"{s:.2f}\"\n\t            t = (f\"{int(h)}h\" if h else '') + f\"{int(m)}m{s}s\"\n\t            perc = f\"{seconds / total:.2%}\"\n\t            return f\"{t} ({perc})\" if w else t\n\t        # InputEntry\n\t        table = Table(show_header=True, title=\"INPUT\", header_style=\"bold magenta\")\n\t        for name in [\"engine\", \"number\", \"unique\", \"useless\", \"CC\", \"SR\", \"SW\", \"SDYN\"]:\n\t            table.add_column(name)\n", "        for it in stats.input_stats:\n\t            fname = self.format_fuzzer_name(campaign, it.engine, False)\n\t            useless = f\"{it.useless} ({it.useless / it.number:.2%})\"\n\t            table.add_row(fname, str(it.number), str(it.unique), useless, str(it.condition), str(it.symread), str(it.symwrite), str(it.symjump))\n\t        console.print(table)\n\t        # Coverage\n\t        table = Table(show_header=True, title=\"COVERAGE\", header_style=\"bold magenta\")\n\t        for name in [\"engine\", \"edge-cov\", \"unique\", \"first\", \"total\"]:\n\t            table.add_column(name)\n\t        for it in stats.coverage_stats:\n", "            fname = self.format_fuzzer_name(campaign, it.engine, False)\n\t            table.add_row(fname, str(it.number), str(it.unique), str(it.first), str(it.total))\n\t        console.print(table)\n\t        # ExecEntry\n\t        table = Table(show_header=True, title=\"EXECUTION\", header_style=\"bold magenta\")\n\t        for name in [\"engine\", \"DSE\", \"SMT\", \"replay\", \"total\", \"wait\"]:\n\t            table.add_column(name)\n\t        for it in stats.exec_stats:\n\t            fname = self.format_fuzzer_name(campaign, it.engine, False)\n\t            tot = it.total\n", "            table.add_row(fname, sfmt(it.dse, tot), sfmt(it.smt, tot), sfmt(it.replay, tot), sfmt(tot, tot, False), sfmt(it.wait, tot, False))\n\t        console.print(table)\n\t        # SeedSharingEntry\n\t        table = Table(show_header=True, title=\"SEED SHARING\", header_style=\"bold magenta\")\n\t        for name in [\"engine\", \"accepted\", \"rejected\", \"total\"]:\n\t            table.add_column(name)\n\t        for it in stats.seed_sharing_stats:\n\t            fname = self.format_fuzzer_name(campaign, it.engine, False)\n\t            acc = f\"{it.accepted} ({it.accepted / it.total:.2%})\"\n\t            rejs = f\"{it.rejected} ({it.rejected / it.total:.2%})\"\n", "            table.add_row(fname, acc, rejs, str(it.total))\n\t        console.print(table)\n\t        # SmtEntry\n\t        table = Table(show_header=True, title=\"SMT SOLVING\", header_style=\"bold magenta\")\n\t        for name in [\"engine\", \"SAT\", \"UNSAT\", \"TO\", \"Total\", \"mean query\", \"cov/input\", \"branches solved\", \"branches not solved\"]:\n\t            table.add_column(name)\n\t        for it in stats.smt_stats:\n\t            fname = self.format_fuzzer_name(campaign, it.engine, False)\n\t            table.add_row(fname, str(it.sat), str(it.unsat), str(it.timeout), str(it.total), f\"{it.avg_query:.2f}\", f\"{it.cov_sat_ratio:.2f}\", str(it.branch_solved), str(it.branch_not_solved))\n\t        console.print(table)\n", "        # for stat in (getattr(stats, x) for x in stats.schema()['properties']):\n\t        #     if not stat:\n\t        #         print(f\"Stat {stat} is empty\")\n\t        #         continue\n\t        #     table = Table(show_header=True, title=str(type(stat[0])), header_style=\"bold magenta\")\n\t        #     item = stat[0]\n\t        #\n\t        #     for name, column in {x: getattr(item, x) for x in item.schema()['properties']}.items():\n\t        #         table.add_column(name)\n\t        #     for item in stat:\n", "        #         table.add_row(*[str(getattr(item, x)) for x in item.schema()['properties']])\n\t        #     console.print(table)\n\t    def show_delta_history(self, campaign: CampaignResult) -> None:\n\t        console = Console()\n\t        def tt(secs):\n\t            return str(timedelta(seconds=int(secs)))\n\t        def pp_edge(e):\n\t            return f\"({e[0]:#08x}-{e[1]:#08x})\"\n\t        mapping = self._calcul_triton_input_to_broker(campaign)\n\t        def caract_input(name) -> str:\n", "            types = [\"_CC_\", \"_SR_\", \"_SW_\", \"_DYN_\"]\n\t            for t in types:\n\t                if t in name:\n\t                    return t[1:-1]\n\t            return \"N/C\"\n\t        table = Table(show_header=True, title=\"Delta History\", header_style=\"bold magenta\")\n\t        for col in [\"Elapsed\", \"Fuzzer\", \"Type\", \"New\", \"Tot Cov\", \"Items\"]:\n\t            table.add_column(col)\n\t        # FIXME: Ajouter une colonne pour le count\n\t        for delta in campaign.delta_items:\n", "            # Resolve broker input to triton ones (to what it was generated from)\n\t            typ = \"-\"\n\t            if campaign.is_triton(delta.fuzzer):\n\t                meta = campaign.parse_filename(delta.input_name)\n\t                if meta:\n\t                    hash = meta[3]\n\t                    triton_input_name = mapping.get(hash)\n\t                    if triton_input_name:\n\t                        typ = caract_input(triton_input_name)\n\t            table.add_row(tt(delta.time_elapsed),\n", "                          self.format_fuzzer_name(campaign, delta.fuzzer, short=True),\n\t                          typ,\n\t                          str(len(delta.overall_new_items_covered)),\n\t                          str(delta.overall_coverage_sum),\n\t                          \" \".join(pp_edge(e) for e in list(delta.overall_new_items_covered)[:4])\n\t            )\n\t        console.print(table)\n"]}
{"filename": "pastisbenchmark/results.py", "chunked_list": ["# built-in imports\n\tfrom abc import abstractmethod\n\tfrom enum import Enum, auto\n\tfrom pathlib import Path\n\tfrom typing import Generator, Optional, Union, List, Dict, Tuple, Set\n\timport os\n\timport json\n\timport sys\n\timport subprocess\n\timport logging\n", "import re\n\tfrom datetime import datetime, timedelta\n\tfrom pydantic import BaseModel\n\timport matplotlib.pyplot as plt\n\t# third-party\n\tfrom pastisbroker import BrokingMode\n\tfrom pastisbroker.workspace import Workspace, WorkspaceStatus\n\tfrom libpastis.types import SeedInjectLoc, SeedType\n\tfrom tritondse.trace import QBDITrace\n\tfrom tritondse import CoverageStrategy, GlobalCoverage, BranchSolvingStrategy, Config\n", "from tritondse.coverage import CovItem\n\t# local imports\n\tfrom pastisbenchmark.replayer import ReplayType\n\tclass InputCovDelta(BaseModel):\n\t    time_elapsed: float        # Time elapsed when input generated\n\t    input_name: str            # Input name\n\t    fuzzer: str                # The fuzzer that found that input\n\t    # Trace generic info\n\t    unique_items_covered_count: int            # The coverage of this one input (len(covered_items))\n\t    unique_insts_covered_count: int            # Instruction coverage of that input\n", "    # Local to the fuzzer\n\t    fuzzer_new_items_covered: Set[CovItem]  # New items covered by THIS fuzzer\n\t    fuzzer_coverage_sum: int            # Sum of covered items by THIS fuzzer at this point\n\t    fuzzer_inst_coverage_sum: int       # Sum of unique instructions covered by THIS FUZZER at this point\n\t    fuzzer_new_insts_covered: Set[int]  # Instr\n\t    # Global accros all fuzzers of the campaign\n\t    overall_new_items_covered: Set[CovItem]  # New items covered by this fuzzer agains ALL THE OTHERS\n\t    overall_coverage_sum: int            # The total coverage of the fuzz campaign at this point\n\t    overall_inst_coverage_sum: int       # Total instruction coverage at this point\n\t    overall_new_insts_covered: Set[int]  # Instr\n", "    def is_initial_input(self) -> bool:\n\t        return self.fuzzer == \"seeds\"\n\t    def is_triton_input(self) -> bool:\n\t        return \"TT\" in self.fuzzer\n\tclass CampaignResult(object):\n\t    SEED_FUZZER = \"seeds\"\n\t    ALL_FUZZER = \"all\"\n\t    QBDI_REPLAY_DIR = \"replays_qbdi\"\n\t    LLVMPROFILE_REPLAY_DIR = \"replays_llvmprof\"\n\t    REPLAYS_DELTA = \"replays_delta\"\n", "    CLIENT_STATS = \"clients-stats.json\"\n\t    COVERAGE_DIR = \"coverages\"\n\t    def __init__(self, workspace: Union[Path, str]):\n\t        self.workspace = Workspace(Path(workspace))\n\t        # Stat items\n\t        self.fuzzers_items = {}     # fuzzer_name -> List[StatItem]\n\t        self.fuzzers_coverage = {}  # fuzzer_name -> Coverage\n\t        self.fuzzers_config = {}    # fuzzer_name -> Union[str, Config]\n\t        self._load_fuzzer_configs()\n\t        self._all_items = []\n", "        # initialize directories\n\t        self._init_directories()\n\t        # Load fuzzers configuration\n\t        self.mode = self.load_broking_mode(self.workspace)\n\t    def _load_fuzzer_configs(self):\n\t        f = self.workspace.root / self.CLIENT_STATS\n\t        data = json.loads(f.read_text())\n\t        for client in data:\n\t            id = client['strid']\n\t            conf = client['engine_args']\n", "            if self.is_triton(id):\n\t                self.fuzzers_config[id] = Config.from_json(conf)\n\t            else:\n\t                self.fuzzers_config[id] = conf\n\t    def has_honggfuzz(self):\n\t        for fuzz in self.fuzzers_items.keys():\n\t            if \"HF\" in fuzz:\n\t                return True\n\t        return False\n\t    @staticmethod\n", "    def is_triton(fuzzer: str) -> bool:\n\t        return \"TT\" in fuzzer\n\t    @property\n\t    def is_full_duplex(self) -> bool:\n\t        return bool(self.mode == BrokingMode.FULL)\n\t    @property\n\t    def is_half_duplex(self) -> bool:\n\t        return bool(self.mode == BrokingMode.NO_TRANSMIT)\n\t    @property\n\t    def slug_name(self) -> str:\n", "        data = [\"AFL\" if any((\"AFLPP\" in x for x in self.fuzzers_config)) else \"\",\n\t                \"HF\" if any((\"HF\" in x for x in self.fuzzers_config)) else \"\",\n\t                \"TT\" if any((\"TT\" in x for x in self.fuzzers_config)) else \"\"]\n\t        if self.is_full_duplex:\n\t            return f\"PASTIS[{'|'.join(x for x in data if x)}]\"\n\t        else:\n\t            return f\"U[{'|'.join(x for x in data if x)}]\"\n\t    @property\n\t    def results(self):\n\t        return self.fuzzers_items.items()\n", "    @property\n\t    def delta_items(self) -> Generator[InputCovDelta, None, None]:\n\t        yield from self._all_items\n\t    def _init_directories(self):\n\t        if not self.replay_delta_dir.exists():\n\t            self.replay_delta_dir.mkdir()\n\t    def _init_fuzzer_coverage(self, fuzzer_name: str) -> None:\n\t        if fuzzer_name in self.fuzzers_coverage:\n\t            return None\n\t        # consider seed inputs as common to all\n", "        if self.SEED_FUZZER in self.fuzzers_coverage:\n\t            cov = self.fuzzers_coverage[self.SEED_FUZZER].clone()\n\t        else: # else create an empty coverage file\n\t            cov = GlobalCoverage(CoverageStrategy.EDGE, BranchSolvingStrategy.ALL_NOT_COVERED)\n\t        self.fuzzers_coverage[fuzzer_name] = cov\n\t    @staticmethod\n\t    def load_broking_mode(workspace: Workspace) -> BrokingMode:\n\t        data = json.loads(workspace.config_file.read_text())\n\t        return BrokingMode[data['broker_mode']]\n\t    @property\n", "    def replay_delta_dir(self) -> Path:\n\t        return self.workspace.root / self.REPLAYS_DELTA\n\t    def has_delta_files(self) -> bool:\n\t        return len(list(self.replay_delta_dir.iterdir())) != 0\n\t    def replay_ok(self) -> bool:\n\t        return len(list(self.replay_delta_dir.iterdir())) != 0\n\t    @staticmethod\n\t    def parse_filename(filename) -> Optional[tuple]:\n\t        ref = datetime.strptime(\"0:00:00.00\", \"%H:%M:%S.%f\")\n\t        if re.match(\"^\\d{4}-\\d{2}-\\d{2}\", filename):  # start by the date\n", "            date, time, elapsed, fuzzer_id, hash = filename.split(\"_\")\n\t            date = datetime.strptime(f\"{date}_{time}\", \"%Y-%m-%d_%H:%M:%S\")\n\t            spl = elapsed.split(\":\")\n\t            if len(spl) == 4:\n\t                elapsed = int(spl[0][:-1])*(3600*24)\n\t                elapsed += (datetime.strptime(\":\".join(spl[1:]), \"%H:%M:%S.%f\") - ref).total_seconds()\n\t            else:\n\t                elapsed = (datetime.strptime(elapsed, \"%H:%M:%S.%f\") - ref).total_seconds()\n\t            hash = hash.split(\".\")[0]\n\t            return date, elapsed, fuzzer_id, hash\n", "        else:\n\t            return None\n\t    def _iter_sorted(self, path: Path):\n\t        files = {None: []}\n\t        for file in path.iterdir():\n\t            res = self.parse_filename(file.name)\n\t            if res is None:\n\t                files[None].append(file)\n\t            else:\n\t                date, elapsed, fuzzer, hash = res\n", "                if elapsed in files:\n\t                    logging.warning(f\"two files with same elapsed time: {files[elapsed]} | {file.name}\")\n\t                files[elapsed] = file\n\t        # First yield initial seeds\n\t        init_seeds = files.pop(None)\n\t        yield from init_seeds\n\t        # Then iterate file sorted by elapsed time\n\t        for k in sorted(files):\n\t            yield files[k]\n\t    def load(self, type: ReplayType = ReplayType.qbdi) -> None:\n", "        logging.info(f\"load in {type.name} [mode:{self.mode.name}]\")\n\t        if self.has_delta_files():\n\t            items = self.load_delta_directory()\n\t            self.load_delta(items)\n\t            self.load_coverage()  # If delta, coverage files shall also be present\n\t        elif type == ReplayType.qbdi:\n\t            items = self.load_qbdi()\n\t            self.load_delta(items)\n\t            self.save_coverage()  # Once loaded save coverage files\n\t        elif type == ReplayType.llvm_profile:\n", "            self.load_llvmprofile()\n\t        else:\n\t            assert False\n\t    def load_qbdi(self) -> List[Tuple[str, InputCovDelta]]:\n\t        logging.info(\"load qbdi trace files\")\n\t        folder = self.workspace.root / self.QBDI_REPLAY_DIR\n\t        total = sum(1 for _ in self._iter_sorted(folder))\n\t        items = []\n\t        # initialize a \"all\" fuzzer in all cases\n\t        self._init_fuzzer_coverage(self.ALL_FUZZER)\n", "        for i, file in enumerate(self._iter_sorted(folder)):\n\t            # parse name\n\t            print(f\"[{i+1}/{total}] {file}\\r\", file=sys.stderr, end=\"\")\n\t            meta = self.parse_filename(file.name)\n\t            # Get the fuzzer name (and coverage)\n\t            if meta is None:\n\t                fuzzer = self.SEED_FUZZER\n\t            else:\n\t                fuzzer = meta[2]\n\t            self._init_fuzzer_coverage(fuzzer)\n", "            cov = QBDITrace.from_file(file).coverage\n\t            # Compute differences to know what has been covered\n\t            if self.is_half_duplex:\n\t                fuzzer_coverage = self.fuzzers_coverage[fuzzer]   # get the fuzzer coverage at this point\n\t                local_new_items = cov - fuzzer_coverage\n\t                local_new_instrs = cov.covered_instructions.keys() - fuzzer_coverage.covered_instructions.keys()\n\t                fuzzer_coverage.merge(cov)   # Merge the new coverage\n\t                cov_sum = fuzzer_coverage.unique_covitem_covered\n\t                inst_sum = fuzzer_coverage.unique_instruction_covered\n\t            else:  # FULL DUPLEX\n", "                local_new_items, local_new_instrs, cov_sum, inst_sum = set(), set(), 0, 0\n\t            # Update coverage and info OVERALL\n\t            all_coverage = self.fuzzers_coverage[self.ALL_FUZZER]  # get the overall coverage\n\t            overall_new_items = cov - all_coverage                 # compute new items\n\t            overall_new_instrs = cov.covered_instructions.keys() - all_coverage.covered_instructions.keys()\n\t            all_coverage.merge(cov)                                # Merge all of them (all fuzzers all together)\n\t            # Create an InputCovDelta\n\t            statitem = InputCovDelta(\n\t                time_elapsed=0 if meta is None else meta[1],\n\t                input_name=file.name,\n", "                fuzzer=fuzzer,\n\t                # Trace generic info\n\t                unique_items_covered_count=cov.unique_covitem_covered,         # The coverage of this one input (len(covered_items))\n\t                unique_insts_covered_count=cov.unique_instruction_covered, # Instruction coverage of that input\n\t                # Local to the fuzzer\n\t                fuzzer_new_items_covered=local_new_items, # New items covered by THIS fuzzer\n\t                fuzzer_coverage_sum=cov_sum,              # Sum of covered items by THIS fuzzer at this point\n\t                fuzzer_inst_coverage_sum=inst_sum,        # Sum of unique instructions covered by THIS FUZZER at this point\n\t                fuzzer_new_insts_covered=local_new_instrs,# Instr\n\t                # Global accros all fuzzers of the campaign\n", "                overall_new_items_covered=overall_new_items,              # New items covered by this fuzzer agains ALL THE OTHERS\n\t                overall_coverage_sum=all_coverage.unique_covitem_covered, # The total coverage of the fuzz campaign at this point\n\t                overall_inst_coverage_sum=all_coverage.unique_instruction_covered, # Total instruction coverage at this point\n\t                overall_new_insts_covered=overall_new_instrs\n\t            )\n\t            items.append((fuzzer, statitem))\n\t            # Write the delta file\n\t            with open(self.replay_delta_dir / (file.name+\".json\"), 'w') as f:\n\t                f.write(statitem.json())\n\t        return items\n", "    def load_llvmprofile(self) -> None:\n\t        # TODO: to implement\n\t        pass\n\t    def load_delta_directory(self) -> List[Tuple[str, InputCovDelta]]:\n\t        logging.info(\"load delta directory\")\n\t        items = []\n\t        for file in self._iter_sorted(self.replay_delta_dir):\n\t            meta = self.parse_filename(file.name)\n\t            # Get the fuzzer name (and coverage)\n\t            if meta is None:\n", "                fuzzer = self.SEED_FUZZER\n\t            else:\n\t                fuzzer = meta[2]\n\t            delta = InputCovDelta.parse_file(file)\n\t            items.append((fuzzer, delta))\n\t        return items\n\t    def load_delta(self, items: List[Tuple[str, InputCovDelta]]) -> None:\n\t        self._all_items = [x[1] for x in items]\n\t        self.fuzzers_items[self.SEED_FUZZER] = []\n\t        self.fuzzers_items[self.ALL_FUZZER] = []\n", "        for fuzzer, item in items:\n\t            if fuzzer not in self.fuzzers_items:\n\t                self.fuzzers_items[fuzzer] = []\n\t            self.fuzzers_items[fuzzer].append(item)\n\t            if fuzzer != self.SEED_FUZZER:  # Add in ALL, all that are not seed ones\n\t                self.fuzzers_items[self.ALL_FUZZER].append(item)\n\t    def save_coverage(self):\n\t        cov_dir = self.workspace.root / self.COVERAGE_DIR\n\t        if not cov_dir.exists():\n\t            cov_dir.mkdir()\n", "        for fuzzer_name, cov in self.fuzzers_coverage.items():\n\t            covfile = cov_dir / (fuzzer_name + \".ttgcov\")\n\t            cov.to_file(covfile)\n\t            if cov.covered_instructions:  # if we have instructions covered save file in Lightouse format\n\t                covfile = cov_dir / (fuzzer_name + \".cov\")\n\t                with open(covfile, \"w\") as f:\n\t                    f.write(\"\\n\".join(f\"{x:#08x}\" for x in cov.covered_instructions.keys()))\n\t                    f.write(\"\\n\")\n\t    def load_coverage(self):\n\t        cov_dir = self.workspace.root / self.COVERAGE_DIR\n", "        for fuzzer_name in self.fuzzers_items.keys():\n\t            covfile = cov_dir / (fuzzer_name + \".ttgcov\")\n\t            if not covfile.exists():\n\t                logging.error(f\"can't find coverage of {fuzzer_name}\")\n\t            else:\n\t                self.fuzzers_coverage[fuzzer_name] = GlobalCoverage.from_file(covfile)\n\t    def print_stats(self):\n\t        overall_coverage = self.fuzzers_coverage[self.ALL_FUZZER]\n\t        for fuzzer, results in self.fuzzers_items.items():\n\t            tot_inps = sum(len(x) for x in self.fuzzers_items.values())\n", "            tot_edge = overall_coverage.unique_covitem_covered\n\t            print(\"-----------------------\")\n\t            print(f\"Fuzzer: {fuzzer}\")\n\t            cov = self.fuzzers_coverage[fuzzer]\n\t            print(f\"inputs: {len(results)}, {len(results)/tot_inps:.0%}\")\n\t            print(f\"edges: {cov.unique_covitem_covered} {cov.unique_covitem_covered/tot_edge:.0%)}\")\n\t            print(f\"instructions: {cov.unique_instruction_covered}\")\n\t            print(\"-----------------------\")\n\t            print(f\"Total inputs: {tot_inps}\")\n\t            print(f\"Total edges: {tot_edge}\")\n"]}
{"filename": "libpastis/enginedesc.py", "chunked_list": ["# builtin imports\n\tfrom pathlib import Path\n\tfrom typing import List, Tuple, Optional\n\t# Local imports\n\tfrom libpastis.types import CoverageMode, ExecMode, FuzzMode\n\tclass EngineConfiguration(object):\n\t    \"\"\"\n\t    Basic interface to represent an engine configuration file\n\t    on broker side. A fuzzing engine have to provide such object\n\t    so that the broker can load them and forwarding them to clients.\n", "    \"\"\"\n\t    @staticmethod\n\t    def new() -> 'EngineConfiguration':\n\t        \"\"\"\n\t        Static method that should return a fresh configuration object.\n\t        :return: Configuration object\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @staticmethod\n\t    def from_file(filepath: Path) -> 'EngineConfiguration':\n", "        \"\"\"\n\t        Load a configuration object from file.\n\t        :param filepath: Path to the configuration\n\t        :return: Configuration object\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @staticmethod\n\t    def from_str(s: str) -> 'EngineConfiguration':\n\t        \"\"\"\n\t        Parse a string to a configuration object.\n", "        :param s: configuration as string\n\t        :return: configuration object\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    def to_str(self) -> str:\n\t        \"\"\"\n\t        Serialize configuration object to string.\n\t        :return: serialize configuration\n\t        \"\"\"\n\t        raise NotImplementedError\n", "    def get_coverage_mode(self) -> CoverageMode:\n\t        \"\"\"\n\t        Should return the coverage mode defined in the configuration.\n\t        For greybox fuzzer like AFL++, Honggfuzz one can return :py:obj:`CoverageMode.AUTO`.\n\t        If the engine support different coverage metric it should return\n\t        the one selected.\n\t        :return: coverage mode used\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    def set_target(self, target: int) -> None:\n", "        \"\"\"\n\t        Set a specific target (address, index etc), that should be targeted by\n\t        the fuzzing engine. This will be used when running in a targeted way.\n\t        :param target: identifier of the target\n\t        \"\"\"\n\t        pass\n\tclass FuzzingEngineDescriptor(object):\n\t    \"\"\"\n\t    Abstract class describing a fuzzer engine. This object is used on\n\t    broker side, to identify the name and version of a fuzzer and to\n", "    know whether or not it accept a specific executable file.\n\t    \"\"\"\n\t    NAME = \"abstract-engine\"\n\t    #: Name of the fuzzing Engine\n\t    SHORT_NAME = \"AE\"\n\t    #: Short name of the fuzzing engine\n\t    VERSION = \"1.0\"\n\t    #: Version of the engine\n\t    config_class = EngineConfiguration\n\t    #: Configuration class associated with the engine\n", "    @staticmethod\n\t    def accept_file(binary_file: Path) -> Tuple[bool, Optional[ExecMode], Optional[FuzzMode]]:\n\t        \"\"\"\n\t        Function called by the broker with all executable files detected in its directory.\n\t        As an fuzzer developer, you have to implement this function to indicate whether\n\t        a file is accepted as a target or not.\n\t        :param binary_file: file path to an executable file\n\t        :return: True if supported, and two optional attributes indicating the ExecMode and FuzzMode\n\t        \"\"\"\n\t        raise NotImplementedError()\n", "    @staticmethod\n\t    def supported_coverage_strategies() -> List[CoverageMode]:\n\t        \"\"\"\n\t        List of coverage metrics supported by the fuzzer. If it only\n\t        support a single one, it should be :py:obj:`CoverageMode.AUTO`.\n\t        :return: list of coverage modes\n\t        \"\"\"\n\t        raise NotImplementedError()\n"]}
{"filename": "libpastis/types.py", "chunked_list": ["import json\n\tfrom aenum import Enum, extend_enum\n\tfrom pathlib import Path\n\tfrom typing import Union\n\timport base64\n\tPathLike = Union[str, Path]\n\t#: Union of a string or Path object\n\tclass State(Enum):\n\t    \"\"\"\n\t    Running type of a fuzzing engine. It\n", "    can be either running or idle.\n\t    \"\"\"\n\t    RUNNING = 0\n\t    IDLE = 1\n\tclass Platform(Enum):\n\t    \"\"\"\n\t    Enum representing the platform.\n\t    \"\"\"\n\t    ANY = 0\n\t    LINUX = 1\n", "    WINDOWS = 2\n\t    MACOS = 3\n\t    ANDROID = 4\n\t    IOS = 5\n\tclass SeedType(Enum):\n\t    \"\"\"\n\t    Type of an input. They can be plain input,\n\t    crash input or hanging input.\n\t    \"\"\"\n\t    INPUT = 0\n", "    CRASH = 1\n\t    HANG = 2\n\tclass ExecMode(Enum):\n\t    \"\"\"\n\t    Execution mode for fuzzing engine. With ``AUTO``\n\t    the fuzzer will automatically select, ``SINGLE_EXEC``\n\t    is the normal fuzzing mode where the process stops\n\t    at each iteration while ``PERSISTENT`` indicate the\n\t    fuzzer to run in persistent mode.\n\t    \"\"\"\n", "    AUTO = 0\n\t    SINGLE_EXEC = 1\n\t    PERSISTENT = 2\n\tclass FuzzMode(Enum):\n\t    \"\"\"\n\t    Fuzzing mode, indicates the fuzzer whether the target\n\t    is instrumented or not.\n\t    \"\"\"\n\t    AUTO = 0\n\t    INSTRUMENTED = 1\n", "    BINARY_ONLY = 2\n\tclass CheckMode(Enum):\n\t    \"\"\"\n\t    CheckMode is used to indicates a fuzzer how to run depdending on\n\t    the context. ``CHECK_ALL`` is the normal bug, vulnerability discovery\n\t    mode. Then ``ALERT_ONLY`` indicates the fuzzer to focus on SAST alerts.\n\t    Then ``ALERT_ONE`` indicates the fuzzer to focus on a single alert which\n\t    id should be provided through the configuration file.\n\t    \"\"\"\n\t    CHECK_ALL = 0\n", "    ALERT_ONLY = 1\n\t    ALERT_ONE = 2\n\tclass CoverageMode(str, Enum):\n\t    \"\"\"\n\t    Coverage metrics to use. Some fuzzing engines do support multiple coverage\n\t    metrics, thus the enum indicates the one to use.\n\t    \"\"\"\n\t    AUTO = \"auto\"\n\t    BLOCK = \"block\"\n\t    EDGE = \"edge\"\n", "    PATH = \"path\"\n\t    STATE = \"state\"\n\t    @classmethod\n\t    def _missing_(cls, val) -> 'CoverageMode':\n\t        \"\"\" Method used to dynmically creating an entry \"\"\"\n\t        enum_name = val.upper().replace(\" \", \"_\")\n\t        if enum_name in cls.__members__:\n\t            return cls.__members__[enum_name]\n\t        return extend_enum(cls, enum_name, val)\n\tclass SeedInjectLoc(Enum):\n", "    \"\"\"\n\t    Indicates the location where to inject inputs. It can either be\n\t    on STDIN or ARGV.\n\t    \"\"\"\n\t    STDIN = 0\n\t    ARGV = 1\n\tclass Arch(Enum):\n\t    \"\"\"\n\t    Architecture representation\n\t    \"\"\"\n", "    X86 = 0\n\t    X86_64 = 1\n\t    ARMV7 = 2\n\t    AARCH64 = 3\n\tclass LogLevel(Enum):\n\t    \"\"\"\n\t    Enum representing the Log level, for fuzzers to send message logs\n\t    to the broker.\n\t    \"\"\"\n\t    DEBUG = 10\n", "    INFO = 20\n\t    WARNING = 2\n\t    ERROR = 3\n\t    CRITICAL = 4\n\tclass AlertData(object):\n\t    \"\"\"\n\t    AlertData is data message that can be sent from fuzzing agents to\n\t    the broker to indicates that an alert has been covered or validated.\n\t    \"\"\"\n\t    def __init__(self, id: int, covered: bool, validated: bool, seed: bytes, address: int = 0):\n", "        self.id: int = id\n\t        #: Id of the alert\n\t        self.covered: bool = covered\n\t        #: True if the alert has been covered\n\t        self.validated: bool = validated\n\t        #: True if the alert has been validated\n\t        self.seed: bytes = seed\n\t        #: Input that reached or validated the alert\n\t        self.address: int = address\n\t        #: memory address of the alert\n", "    @staticmethod\n\t    def from_json(data: str) -> 'AlertData':\n\t        \"\"\"\n\t        Convert an AlertData in json to an instance.\n\t        :param data: json serialized alert\n\t        :return: AlertData object\n\t        \"\"\"\n\t        data = json.loads(data)\n\t        return AlertData(data['id'], data['covered'], data['validated'], base64.b64decode(data['seed']), data['address'])\n\t    def to_json(self) -> str:\n", "        \"\"\"\n\t        Serialize the alert to JSON.\n\t        :return: json serialized alert\n\t        \"\"\"\n\t        return json.dumps({'id': self.id,\n\t                           'covered': self.covered,\n\t                           'validated': self.validated,\n\t                           'seed': base64.b64encode(self.seed).decode(),\n\t                           'address': self.address})\n\tclass FuzzingEngineInfo(object):\n", "    \"\"\"\n\t    Class to represent a fuzzing engine metadata.\n\t    It contains its name, version and the Python module\n\t    where to load the descriptor and configuration object.\n\t    \"\"\"\n\t    def __init__(self, name: str, version: str, pymodule: str):\n\t        self.name: str = name\n\t        #: Name of the engine\n\t        self.version = version\n\t        #: Version of the engine\n", "        self.pymodule = pymodule\n\t        #: Name of the python module\n\t    @staticmethod\n\t    def from_pb(pb) -> 'FuzzingEngineInfo':\n\t        \"\"\"\n\t        Parse a protobuf object into a FuzzingEngineInfo object.\n\t        :param pb: protobuf object\n\t        :return: object\n\t        \"\"\"\n\t        return FuzzingEngineInfo(pb.name, pb.version, pb.pymodule)\n"]}
{"filename": "libpastis/agent.py", "chunked_list": ["# built-ins\n\timport time\n\tfrom typing import Callable, Tuple, List, Union\n\tfrom enum import Enum\n\timport logging\n\timport threading\n\tfrom pathlib import Path\n\timport socket\n\t# third-party libs\n\timport zmq\n", "import psutil\n\t# local imports\n\tfrom libpastis.proto import InputSeedMsg, StartMsg, StopMsg, HelloMsg, LogMsg, \\\n\t                            TelemetryMsg, StopCoverageCriteria, DataMsg, EnvelopeMsg\n\tfrom libpastis.types import SeedType, Arch, FuzzingEngineInfo, PathLike, ExecMode, CheckMode, CoverageMode, SeedInjectLoc, \\\n\t                            LogLevel, State, AlertData, Platform, FuzzMode\n\tfrom libpastis.utils import get_local_architecture, get_local_platform\n\tMessage = Union[InputSeedMsg, StartMsg, StopMsg, HelloMsg, LogMsg, TelemetryMsg, StopCoverageCriteria, DataMsg]\n\tclass MessageType(Enum):  # Topics in the ZMQ terminology\n\t    \"\"\"\n", "    Enum encoding the type of the message that can be received.\n\t    \"\"\"\n\t    HELLO = 'hello_msg'\n\t    # STATE = 1\n\t    START = 'start_msg'\n\t    INPUT_SEED = 'input_msg'\n\t    TELEMETRY = 'telemetry_msg'\n\t    LOG = 'log_msg'\n\t    STOP_COVERAGE_DONE = 'stop_crit_msg'\n\t    STOP = \"stop_msg\"\n", "    DATA = \"data_msg\"\n\tclass AgentMode(Enum):\n\t    \"\"\"\n\t    Internal enum identifying whether the agent is running as a broker\n\t    or a client.\n\t    \"\"\"\n\t    BROKER = 1\n\t    CLIENT = 2\n\tclass NetworkAgent(object):\n\t    \"\"\"\n", "    Base class for network-based PASTIS agents (both clients and servers)\n\t    \"\"\"\n\t    def __init__(self):\n\t        self.mode = None\n\t        self.ctx = zmq.Context()\n\t        self.socket = None\n\t        self._stop = False\n\t        self._th = None\n\t        self._cbs = {x: [] for x in MessageType}\n\t    def register_callback(self, typ: MessageType, callback: Callable) -> None:\n", "        \"\"\"\n\t        Register a callback function on a given message type.\n\t        :param typ: type of the message\n\t        :param callback: Callback function taking the protobuf object as parameter\n\t        :return: None\n\t        \"\"\"\n\t        self._cbs[typ].append(callback)\n\t    def bind(self, port: int = 5555, ip: str = \"*\") -> None:\n\t        \"\"\"\n\t        Bind on the given IP and port, to listen incoming messages.\n", "        :param port: listen port\n\t        :param ip: IP, can be \"*\" to listen on all interfaces\n\t        :return: None\n\t        \"\"\"\n\t        self.socket = self.ctx.socket(zmq.ROUTER)\n\t        self.socket.RCVTIMEO = 500  # 500 milliseconds\n\t        self.socket.bind(f\"tcp://{ip}:{port}\")\n\t        self.mode = AgentMode.BROKER\n\t    def connect(self, remote: str = \"localhost\", port: int = 5555) -> bool:\n\t        \"\"\"\n", "        Connect to a remote server on the given ``remote`` IP and ``port``.\n\t        :param remote: IP address or DNS\n\t        :param port: port to connect to\n\t        :return: Always true\n\t        \"\"\"\n\t        self.socket = self.ctx.socket(zmq.DEALER)\n\t        self.socket.RCVTIMEO = 500  # 500 milliseconds\n\t        self.socket.connect(f\"tcp://{remote}:{port}\")\n\t        self.mode = AgentMode.CLIENT\n\t        return True\n", "    def start(self) -> None:\n\t        \"\"\"\n\t        Start the listening thread.\n\t        \"\"\"\n\t        self._th = threading.Thread(name=\"[LIBPASTIS]\", target=self._recv_loop, daemon=True)\n\t        self._th.start()\n\t    def run(self) -> None:\n\t        \"\"\"\n\t        Run receiving loop in a blocking manner.\n\t        \"\"\"\n", "        self._recv_loop()\n\t    def stop(self) -> None:\n\t        \"\"\"\n\t        Stop the listening thread.\n\t        \"\"\"\n\t        self._stop = True\n\t        if self._th:\n\t            self._th.join()\n\t    def _recv_loop(self):\n\t        #flags = 0 if blocking else zmq.DONTWAIT\n", "        while 1:\n\t            if self._stop:\n\t                return\n\t            try:\n\t                if self.mode == AgentMode.BROKER:\n\t                    uid, data = self.socket.recv_multipart()\n\t                    self.__broker_transfer_to_callback(uid, data)\n\t                else:\n\t                    data = self.socket.recv()\n\t                    self.__client_transfer_to_callback(data)\n", "            except zmq.error.Again:\n\t                pass\n\t    def send_to(self, id: bytes, msg: Message, msg_type: MessageType = None) -> None:\n\t        \"\"\"\n\t        Send a message to a given client. Only meant to be used when\n\t        running as a server.\n\t        :param id: bytes id of the client\n\t        :param msg: protobuf :py:obj:`Message` object\n\t        :param msg_type: type of the message\n\t        \"\"\"\n", "        if self.mode == AgentMode.CLIENT:\n\t            logging.error(f\"cannot use sento_to() as {AgentMode.CLIENT.name}\")\n\t            return\n\t        if msg_type is None:\n\t            msg_type = self.msg_to_type(msg)\n\t        final_msg = EnvelopeMsg()\n\t        getattr(final_msg, msg_type.value).MergeFrom(msg)\n\t        self.socket.send_multipart([id, final_msg.SerializeToString()])\n\t    def send(self, msg: Message, msg_type: MessageType = None) -> None:\n\t        \"\"\"\n", "        Send a message on the socket (thus to the broker). Should\n\t        only be used as a client (fuzzing agent).\n\t        :param msg: Protobuf message to send\n\t        :param msg_type: Type of the message\n\t        \"\"\"\n\t        if self.mode == AgentMode.BROKER:\n\t            logging.error(f\"cannot use sento() as {AgentMode.BROKER.name}\")\n\t            return\n\t        if msg_type is None:\n\t            msg_type = self.msg_to_type(msg)\n", "        final_msg = EnvelopeMsg()\n\t        getattr(final_msg, msg_type.value).CopyFrom(msg)\n\t        self.socket.send(final_msg.SerializeToString())\n\t    @staticmethod\n\t    def msg_to_type(msg: Message) -> MessageType:\n\t        \"\"\"\n\t        Get the :py:obj:`MessageType` from a protobuf object.\n\t        :param msg: Protobuf message\n\t        :return: message type\n\t        \"\"\"\n", "        if isinstance(msg, InputSeedMsg):\n\t            return MessageType.INPUT_SEED\n\t        elif isinstance(msg, HelloMsg):\n\t            return MessageType.HELLO\n\t        elif isinstance(msg, TelemetryMsg):\n\t            return MessageType.TELEMETRY\n\t        elif isinstance(msg, LogMsg):\n\t            return MessageType.LOG\n\t        elif isinstance(msg, StopMsg):\n\t            return MessageType.STOP\n", "        elif isinstance(msg, StopCoverageCriteria):\n\t            return MessageType.STOP_COVERAGE_DONE\n\t        elif isinstance(msg, StartMsg):\n\t            return MessageType.START\n\t        elif isinstance(msg, DataMsg):\n\t            return MessageType.DATA\n\t        else:\n\t            logging.error(f\"invalid message type: {type(msg)} (cannot find associated topic)\")\n\t    def __broker_transfer_to_callback(self, id: bytes, message: bytes):\n\t        try:\n", "            msg = EnvelopeMsg()\n\t            msg.ParseFromString(message)\n\t        except:\n\t            logging.error(f\"can't parse message from {id} (len:{len(message)})\")\n\t            return\n\t        message, topic = self._unpack_message(msg)\n\t        if topic in [MessageType.START]:\n\t            logging.error(f\"Invalid message of type {topic.name} received\")\n\t        if not self._cbs[topic]:\n\t            logging.warning(f\"[broker] message of type {topic.name} (but no callback)\")\n", "        args = self._message_args(topic, message)\n\t        for cb in self._cbs[topic]:\n\t            cb(id, *args)\n\t    def __client_transfer_to_callback(self, message: bytes):\n\t        msg = EnvelopeMsg()\n\t        msg.ParseFromString(message)\n\t        message, topic = self._unpack_message(msg)\n\t        if topic in [MessageType.HELLO, MessageType.TELEMETRY, MessageType.LOG, MessageType.STOP_COVERAGE_DONE]:\n\t            logging.error(f\"Invalid message of type {topic.name} received\")\n\t        if not self._cbs[topic]:\n", "            logging.warning(f\"[agent] message of type {topic.name} (but no callback)\")\n\t        args = self._message_args(topic, message)\n\t        for cb in self._cbs[topic]:\n\t            cb(*args)\n\t    def _unpack_message(self, message: EnvelopeMsg) -> Tuple[MessageType, Message]:\n\t        typ = message.WhichOneof('msg')\n\t        return getattr(message, typ), MessageType(typ)\n\t    def _message_args(self, topic: MessageType, msg: Message):\n\t        if topic == MessageType.INPUT_SEED:\n\t            return [SeedType(msg.type), msg.seed]\n", "        elif topic == MessageType.LOG:\n\t            return [LogLevel(msg.level), msg.message]\n\t        elif topic == MessageType.TELEMETRY:\n\t            return [msg.state, msg.exec_per_sec, msg.total_exec, msg.cycle, msg.timeout, msg.coverage_block,\n\t                    msg.coverage_edge, msg.coverage_path, msg.last_cov_update]\n\t        elif topic == MessageType.HELLO:\n\t            engs = [(FuzzingEngineInfo.from_pb(x)) for x in msg.engines]\n\t            return [engs, Arch(msg.architecture), msg.cpus, msg.memory, msg.hostname, Platform(msg.platform)]\n\t        elif topic == MessageType.START:\n\t            return [msg.binary_filename, msg.binary, FuzzingEngineInfo.from_pb(msg.engine), ExecMode(msg.exec_mode), FuzzMode(msg.fuzz_mode),\n", "                    CheckMode(msg.check_mode), CoverageMode(msg.coverage_mode), SeedInjectLoc(msg.seed_location),\n\t                    msg.engine_args, [x for x in msg.program_argv], msg.sast_report]\n\t        elif topic == MessageType.DATA:\n\t            return [msg.data]\n\t        else:  # for stop and store_coverage_done nothing to unpack\n\t            return []\n\tclass BrokerAgent(NetworkAgent):\n\t    def send_seed(self, id: bytes, typ: SeedType, seed: bytes) -> None:\n\t        \"\"\"\n\t        Send the given input to the client `id`.\n", "        :param id: raw id of the client\n\t        :param typ: Type of the input\n\t        :param seed: Bytes the of input\n\t        \"\"\"\n\t        msg = InputSeedMsg()\n\t        msg.type = typ.value\n\t        msg.seed = seed\n\t        self.send_to(id, msg, msg_type=MessageType.INPUT_SEED)\n\t    def send_start(self, id: bytes, name: str, package: PathLike, argv: List[str], exmode: ExecMode, fuzzmode: FuzzMode,\n\t                   ckmode: CheckMode, covmode: CoverageMode, engine: FuzzingEngineInfo, engine_args: str,\n", "                   seed_loc: SeedInjectLoc, sast_report: bytes = None) -> None:\n\t        \"\"\"\n\t        Send a START message to a fuzzing agent with all the parameters it is meant to run with.\n\t        :param id: raw id of the client\n\t        :param name: name of the executable file or binary package\n\t        :param package: filepath of :py:obj:`BinaryPackage` or program executable to send\n\t        :param argv: argumnets to be provided on command line\n\t        :param exmode: execution mode\n\t        :param fuzzmode: fuzzing mode\n\t        :param ckmode: checking mode\n", "        :param covmode: coverage metric to use\n\t        :param engine: descriptor of the fuzzing engine\n\t        :param engine_args: engine's additional arguments or configuration file\n\t        :param seed_loc: location where to provide inputs (stdin or argv)\n\t        :param sast_report: SAST report if applicable\n\t        \"\"\"\n\t        msg = StartMsg()\n\t        if isinstance(package, str):\n\t            package = Path(package)\n\t        msg.binary_filename = name\n", "        msg.binary = package.read_bytes()\n\t        msg.engine.name = engine.name\n\t        msg.engine.version = engine.version\n\t        msg.exec_mode = exmode.value\n\t        msg.fuzz_mode = fuzzmode.value\n\t        msg.check_mode = ckmode.value\n\t        msg.coverage_mode = covmode.value\n\t        msg.seed_location = seed_loc.value\n\t        msg.engine_args = engine_args\n\t        if sast_report is not None:\n", "            msg.sast_report = sast_report\n\t        for arg in argv:\n\t            msg.program_argv.append(arg)\n\t        self.send_to(id, msg, msg_type=MessageType.START)\n\t    def send_stop(self, id: bytes) -> None:\n\t        \"\"\"\n\t        Send a stop message to the client.\n\t        :param id: raw id of the client\n\t        \"\"\"\n\t        msg = StopMsg()\n", "        self.send_to(id, msg, msg_type=MessageType.STOP)\n\t    def register_seed_callback(self, cb: Callable) -> None:\n\t        self.register_callback(MessageType.INPUT_SEED, cb)\n\t    def register_hello_callback(self, cb: Callable) -> None:\n\t        self.register_callback(MessageType.HELLO, cb)\n\t    def register_log_callback(self, cb: Callable) -> None:\n\t        self.register_callback(MessageType.LOG, cb)\n\t    def register_telemetry_callback(self, cb: Callable) -> None:\n\t        self.register_callback(MessageType.TELEMETRY, cb)\n\t    def register_stop_coverage_callback(self, cb: Callable) -> None:\n", "        self.register_callback(MessageType.STOP_COVERAGE_DONE, cb)\n\t    def register_data_callback(self, cb: Callable) -> None:\n\t        self.register_callback(MessageType.DATA, cb)\n\tclass ClientAgent(NetworkAgent):\n\t    \"\"\"\n\t    Subclass of NetworkAgent to connect to PASTIS as a fuzzing\n\t    agent. The class provides helper methods to interact with\n\t    the broker.\n\t    \"\"\"\n\t    def send_hello(self, engines: List[FuzzingEngineInfo], arch: Arch = None, platform: Platform = None) -> bool:\n", "        \"\"\"\n\t        Send the hello message to the broker. `engines` parameter is the list of fuzzing engines\n\t        that \"we\" as client support. E.g: Pastisd is meant to be an interface for all engines\n\t        locally, so it will advertise multiple engines.\n\t        :param engines: list of engines, the client is able to launch\n\t        :param arch: the architecture supported (if None, local one is used)\n\t        :param platform: the platform supported (if None local one used)\n\t        \"\"\"\n\t        msg = HelloMsg()\n\t        arch = get_local_architecture() if arch is None else arch\n", "        if arch is None:\n\t            logging.error(f\"current architecture: {platform.machine()} is not supported\")\n\t            return False\n\t        plfm = get_local_platform() if platform is None else platform\n\t        if plfm is None:\n\t            logging.error(f\"current platform is not supported\")\n\t            return False\n\t        msg.architecture = arch.value\n\t        msg.cpus = psutil.cpu_count()\n\t        msg.memory = psutil.virtual_memory().total\n", "        msg.hostname = socket.gethostname()\n\t        msg.platform = plfm.value\n\t        for eng in engines:\n\t            msg.engines.add(name=eng.name, version=eng.version, pymodule=eng.pymodule)\n\t        self.send(msg, msg_type=MessageType.HELLO)\n\t    def send_log(self, level: LogLevel, message: str) -> None:\n\t        \"\"\"\n\t        Log message to be sent and printed by the broker. All\n\t        logs received by the broker are logged in a client specific\n\t        logfile.\n", "        :param level: level of the log message\n\t        :param message: message as a string\n\t        \"\"\"\n\t        self.send(LogMsg(level=level.value, message=message), MessageType.LOG)\n\t    def debug(self, message: str) -> None:\n\t        \"\"\"\n\t        Send a debug message to the broker\n\t        :param message: message as a string\n\t        \"\"\"\n\t        self.send_log(LogLevel.DEBUG, message)\n", "    def info(self, message: str) -> None:\n\t        \"\"\"\n\t        Send an info (level) message to the broker\n\t        :param message: message to send\n\t        \"\"\"\n\t        self.send_log(LogLevel.INFO, message)\n\t    def warning(self, message: str) -> None:\n\t        \"\"\"\n\t        Send a warning (level) message to the broker.\n\t        :param message: message to send\n", "        \"\"\"\n\t        self.send_log(LogLevel.WARNING, message)\n\t    def error(self, message: str) -> None:\n\t        \"\"\"\n\t        Send an error (level) message to the broker.\n\t        :param message: message to send\n\t        \"\"\"\n\t        self.send_log(LogLevel.ERROR, message)\n\t    def critical(self, message: str) -> None:\n\t        \"\"\"\n", "        Send a critical (level) message to the broker.\n\t        :param message: message to send\n\t        \"\"\"\n\t        self.send_log(LogLevel.CRITICAL, message)\n\t    def send_telemetry(self,\n\t                       state: State = None,\n\t                       exec_per_sec: int = None,\n\t                       total_exec: int = None,\n\t                       cycle: int = None,\n\t                       timeout: int = None,\n", "                       coverage_block: int = None,\n\t                       coverage_edge: int = None,\n\t                       coverage_path: int = None,\n\t                       last_cov_update: int = None) -> None:\n\t        \"\"\"\n\t        Send a telemetry message to the broker. These data could be used on the\n\t        broker side to plot statistics.\n\t        :param state: current state of the fuzzer\n\t        :param exec_per_sec: number of execution per seconds\n\t        :param total_exec: total number of executions\n", "        :param cycle: number of cycles\n\t        :param timeout: timeout numbers\n\t        :param coverage_block: coverage count in blocks\n\t        :param coverage_edge: coverage count in edges\n\t        :param coverage_path: coverage count in paths\n\t        :param last_cov_update: last coverage update\n\t        \"\"\"\n\t        msg = TelemetryMsg()\n\t        msg.cpu_usage = psutil.cpu_percent()\n\t        msg.mem_usage = psutil.virtual_memory().percent\n", "        if state:\n\t            msg.state = state.value\n\t        if exec_per_sec:\n\t            msg.exec_per_sec = exec_per_sec\n\t        if total_exec:\n\t            msg.total_exec = total_exec\n\t        if cycle:\n\t            msg.cycle = cycle\n\t        if timeout:\n\t            msg.timeout = timeout\n", "        if coverage_block:\n\t            msg.coverage_block = coverage_block\n\t        if coverage_edge:\n\t            msg.coverage_edge = coverage_edge\n\t        if coverage_path:\n\t            msg.coverage_path = coverage_path\n\t        if last_cov_update:\n\t            msg.last_cov_update = last_cov_update\n\t        self.send(msg, msg_type=MessageType.TELEMETRY)\n\t    def send_stop_coverage_criteria(self) -> None:\n", "        \"\"\"\n\t        Send a message to the broker indicating, the program has been fully\n\t        covered in accordance to the coverage criteria (metric).\n\t        \"\"\"\n\t        self.send(StopCoverageCriteria(), MessageType.STOP_COVERAGE_DONE)\n\t    def send_seed(self, typ: SeedType, seed: bytes) -> None:\n\t        \"\"\"\n\t        Send an input seed to the broker. The ``typ`` indicates\n\t        the type of the seed, namely, input, crash or hang.\n\t        :param typ: type of the input\n", "        :param seed: bytes of the input\n\t        \"\"\"\n\t        msg = InputSeedMsg()\n\t        msg.type = typ.value\n\t        msg.seed = seed\n\t        self.send(msg, msg_type=MessageType.INPUT_SEED)\n\t    def send_alert_data(self, alert_data: AlertData) -> None:\n\t        \"\"\"\n\t        Send information related to the coverage or validation of a specific SAST\n\t        alert.\n", "        :param alert_data: alert object\n\t        \"\"\"\n\t        msg = DataMsg()\n\t        msg.data = alert_data.to_json()\n\t        self.send(msg, msg_type=MessageType.DATA)\n\t    def register_start_callback(self, cb: Callable) -> None:\n\t        \"\"\"\n\t        Register a callback that will be called when a start message will\n\t        be received. The callback should take 11 parameters.\n\t        :param cb: callback function.\n", "        \"\"\"\n\t        self.register_callback(MessageType.START, cb)\n\t    def register_stop_callback(self, cb: Callable) -> None:\n\t        \"\"\"\n\t        Register a callback called when the broker send a STOP\n\t        message. The fuzzing has to stop running and sending data.\n\t        :param cb: callback function\n\t        \"\"\"\n\t        self.register_callback(MessageType.STOP, cb)\n\t    def register_seed_callback(self, cb: Callable) -> None:\n", "        \"\"\"\n\t        Register a callback called when an input seed is received from the\n\t        broker. The callback function take 2 parameters seed type and content.\n\t        :param cb: callback function\n\t        \"\"\"\n\t        self.register_callback(MessageType.INPUT_SEED, cb)\n\t    def register_data_callback(self, cb: Callable) -> None:\n\t        \"\"\"\n\t        Register callback called when data is received. At the moment\n\t        data are necessarily AlertData messages.\n", "        :param cb: callback function\n\t        \"\"\"\n\t        self.register_callback(MessageType.DATA, cb)\n\tclass FileAgent(ClientAgent):\n\t    \"\"\"\n\t    Mock agent that will mimick all APIs function of a network agent\n\t    but which will never receive any incoming messages. All messages\n\t    sent are logged to a file\n\t    \"\"\"\n\t    def __init__(self, level=logging.INFO, log_file: str = None):\n", "        super(FileAgent, self).__init__()\n\t        del self.ctx    # Remove network related attributes\n\t        del self.socket\n\t        self.logger = logging.getLogger('FileAgent')\n\t        self.logger.parent = None  # Remove root handler to make sur it is not printed on output\n\t        # create file handler\n\t        if log_file is not None:\n\t            ch = logging.FileHandler(log_file)\n\t            ch.setLevel(level)\n\t            ch.setFormatter(logging.Formatter('%(asctime)s - [%(name)s] [%(levelname)s]: %(message)s'))\n", "            self.logger.addHandler(ch)\n\t    def bind(self, port: int = 5555, ip: str = \"*\"):\n\t        raise RuntimeError(\"FileAgent is not meant to be used as broker\")\n\t    def connect(self, remote: str = \"localhost\", port: int = 5555) -> bool:\n\t        return True  # Do nothing\n\t    def _recv_loop(self):\n\t        while 1:\n\t            if self._stop:\n\t                return\n\t            time.sleep(0.05)\n", "    def send_to(self, id: bytes, msg: Message, msg_type: MessageType = None):\n\t        raise RuntimeError(\"FileAgent is not meant to be used as broker\")\n\t    def send(self, msg: Message, msg_type: MessageType = None):\n\t        if self.mode == AgentMode.BROKER:\n\t            logging.error(f\"cannot use sento() as {AgentMode.BROKER.name}\")\n\t            return\n\t        if msg_type is None:\n\t            msg_type = self.msg_to_type(msg)\n\t        if isinstance(msg, InputSeedMsg):\n\t            msg = f\"{SeedType(msg.type).name}: {msg.seed[:20]}..\"\n", "        elif isinstance(msg, HelloMsg):\n\t            msg = f\"{msg.hostname}: {Platform(msg.platform)}({Arch(msg.architecture)}) CPU:{msg.cpus} engines:{[x.name for x in msg.engines]}\"\n\t        elif isinstance(msg, TelemetryMsg):\n\t            msg = f\"{State(msg.state).name} exec/s: {msg.exec_per_sec} total:{msg.total_exec}\"\n\t        elif isinstance(msg, LogMsg):\n\t            msg = f\"{LogLevel(msg.level).name}: {msg.message}\"\n\t        elif isinstance(msg, DataMsg):\n\t            msg = f\"Data: {msg.data}\"\n\t        elif isinstance(msg, StopCoverageCriteria):\n\t            msg = \"\"\n", "        else:\n\t            logging.error(f\"invalid message type: {type(msg)} as client\")\n\t            return\n\t        self.logger.info(f\"send {msg_type.name} {msg}\")\n"]}
{"filename": "libpastis/__init__.py", "chunked_list": ["from .agent import FileAgent, BrokerAgent, ClientAgent\n\tfrom .enginedesc import EngineConfiguration, FuzzingEngineDescriptor\n\tfrom .package import BinaryPackage\n\tfrom .sast import SASTAlert, SASTReport\n\t__version__ = \"1.0.0\"\n"]}
{"filename": "libpastis/utils.py", "chunked_list": ["# builtin imports\n\timport platform\n\tfrom typing import Optional\n\t# Local imports\n\tfrom .types import Arch, Platform\n\tdef get_local_architecture() -> Optional[Arch]:\n\t    mapping = {\"i386\": Arch.X86, \"x86_64\": Arch.X86_64, \"armv7l\": Arch.ARMV7, \"aarch64\": Arch.AARCH64}\n\t    # FIXME: Make sure platform.machine() returns this string for architectures\n\t    return mapping.get(platform.machine())\n\tdef get_local_platform() -> Optional[Platform]:\n", "    mapping = {\"Linux\": Platform.LINUX, \"Windows\": Platform.WINDOWS, \"MacOS\": Platform.MACOS, \"iOS\": Platform.IOS}\n\t    # FIXME: Make sure platform.system() returns this string for other platforms\n\t    return mapping.get(platform.system())\n"]}
{"filename": "libpastis/package.py", "chunked_list": ["# built-in imports\n\tfrom pathlib import Path\n\timport zipfile\n\timport tempfile\n\timport logging\n\tfrom typing import Tuple, Optional, Union\n\t# third-party imports\n\timport lief\n\timport magic\n\timport shutil\n", "import stat\n\t# local imports\n\tfrom libpastis.types import Arch, Platform\n\tclass BinaryPackage(object):\n\t    \"\"\"\n\t    Binary Package representing a given target to fuzz along with its shared\n\t    libraries and additional files required (cmplog, dictionnary etc.).\n\t    This object is received by fuzzing agents as part of the START message.\n\t    \"\"\"\n\t    EXTENSION_BLACKLIST = ['.gt', '.Quokka', '.quokka', '.cmplog']\n", "    #: specific extensions that will be ignored for the `other_files`\n\t    def __init__(self, main_binary: Path):\n\t        \"\"\"\n\t        :param main_binary: main executable file path\n\t        \"\"\"\n\t        self._main_bin = Path(main_binary)\n\t        self._quokka = None\n\t        self._callgraph = None\n\t        self._cmplog = None\n\t        self._dictionary = None\n", "        self.other_files = []\n\t        #: list of additional files contained in this package\n\t        self._package_file = None\n\t        self._arch = None\n\t        self._platform = None\n\t    @property\n\t    def executable_path(self) -> Path:\n\t        \"\"\"\n\t        Path to the main executable file to fuzz.\n\t        :return: filepath\n", "        \"\"\"\n\t        return self._main_bin\n\t    @property\n\t    def name(self) -> str:\n\t        \"\"\"\n\t        Name of the executable file\n\t        :return: name as a string\n\t        \"\"\"\n\t        return self._main_bin.name\n\t    @property\n", "    def quokka(self) -> Optional[Path]:\n\t        \"\"\"\n\t        Path to the quokka file if provided.\n\t        :return: path of the quokka file\n\t        \"\"\"\n\t        return self._quokka\n\t    @property\n\t    def callgraph(self) -> Optional[Path]:\n\t        \"\"\"\n\t        Path to the callgraph file if provided.\n", "        :return: path of the quokka file\n\t        \"\"\"\n\t        return self._callgraph\n\t    @property\n\t    def cmplog(self) -> Optional[Path]:\n\t        \"\"\"\n\t        Path to the complog executable file if provided.\n\t        :return: path to the complog file\n\t        \"\"\"\n\t        return self._cmplog\n", "    @property\n\t    def dictionary(self) -> Optional[Path]:\n\t        \"\"\"\n\t        Path the to dictionnary file if provided.\n\t        :return: path to the dictionnary file\n\t        \"\"\"\n\t        return self._dictionary\n\t    def is_cmplog(self) -> bool:\n\t        \"\"\"\n\t        Check if the package contains a cmplog file.\n", "        :return: True if contains cmplog\n\t        \"\"\"\n\t        return self._cmplog is not None\n\t    def is_quokka(self) -> bool:\n\t        \"\"\"\n\t        Check if the package contains a quokka file.\n\t        :return: True if contains a quokka file\n\t        \"\"\"\n\t        return self._quokka is not None\n\t    def is_dictionary(self) -> bool:\n", "        \"\"\"\n\t        Check if the package contains a dictionnary.\n\t        :return: True if contains a dictionnary\n\t        \"\"\"\n\t        return self._dictionary is not None\n\t    def is_standalone(self) -> bool:\n\t        \"\"\"\n\t        Indicates that this BinaryPackage only contains the program under test and no\n\t        additional files such as a Quokka database or a cmplog instrumented binary.\n\t        This is used in pastis-broker when sending the 'start' command to agents.\n", "        \"\"\"\n\t        return not (self.is_quokka() or\n\t                    self.is_cmplog() or\n\t                    self.is_dictionary() or\n\t                    bool(self.other_files))\n\t    @property\n\t    def arch(self) -> Arch:\n\t        \"\"\"\n\t        Return the architecture of the binary package (main executable target).\n\t        :return: architecture\n", "        \"\"\"\n\t        return self._arch\n\t    @property\n\t    def platform(self) -> Platform:\n\t        \"\"\"\n\t        Return the platform of the binary package (main exectuable target).\n\t        :return: platform\n\t        \"\"\"\n\t        return self._platform\n\t    @staticmethod\n", "    def auto(exe_file: Union[Path, str]) -> Optional['BinaryPackage']:\n\t        \"\"\"\n\t        Take a file and try creating a BinaryPackage with it. The `exe_file` is\n\t        the main executable file. From that the function will look for quokka,\n\t        cmplog, dictionary files (in the same directory).\n\t        :param exe_file: main target executable file\n\t        :return: a binary package if `exe_file` if applicable\n\t        \"\"\"\n\t        bin_f = Path(exe_file)\n\t        # Exclude file if have one of the\n", "        if bin_f.suffix in BinaryPackage.EXTENSION_BLACKLIST:\n\t            return None\n\t        # If do not exists\n\t        if not bin_f.exists():\n\t            return None\n\t        # Make sure its an executable\n\t        data = BinaryPackage._read_binary_infos(bin_f)\n\t        if not data:\n\t            return None\n\t        bin_f.chmod(stat.S_IRWXU)  # make sure the binary is executable\n", "        p = BinaryPackage(bin_f)\n\t        p._platform, p._arch = data\n\t        # Search for a Quokka file\n\t        qfile1, qfile2 = Path(str(bin_f)+\".Quokka\"), Path(str(bin_f)+\".quokka\")\n\t        if qfile1.exists():\n\t            p._quokka = qfile1\n\t        elif qfile2.exists():\n\t            p._quokka = qfile2\n\t        # Search for a graph file (containing callgraph)\n\t        cfile = Path(str(bin_f)+\".gt\")\n", "        if cfile.exists():\n\t            p._callgraph = cfile\n\t        # Search for a cmplog file if any\n\t        cfile = Path(str(bin_f)+\".cmplog\")\n\t        if cfile.exists():\n\t            p._cmplog = cfile\n\t            cfile.chmod(stat.S_IRWXU)  # make sure the cmplog binary is executable\n\t        # Search for a dictionary file if any\n\t        cfile = Path(str(bin_f)+\".dict\")\n\t        if cfile.exists():\n", "            p._dictionary = cfile\n\t        return p\n\t    @staticmethod\n\t    def auto_directory(exe_file: Union[str, Path]) -> Optional['BinaryPackage']:\n\t        \"\"\"\n\t        Create a BinaryPackage with all files it can find in the given\n\t        directory. The difference with :py:meth:`BinaryPackage.auto` is\n\t        that all additional files in the directory will be added to the\n\t        package.\n\t        :param exe_file: main executable in the directory\n", "        :return: BinaryPackage if applicable\n\t        \"\"\"\n\t        bin_f = Path(exe_file)\n\t        p = BinaryPackage.auto(bin_f)\n\t        if p is None:\n\t            return None\n\t        for file in bin_f.parent.iterdir():\n\t            if file not in [p._main_bin, p._callgraph, p._quokka, p._cmplog, p._dictionary]:\n\t                p.other_files.append(file)\n\t    def make_package(self) -> Path:\n", "        \"\"\"\n\t        Pack the BinaryPackage in a zip file.\n\t        :return: Path to a .zip file containing the whole package\n\t        \"\"\"\n\t        if self._package_file is not None:\n\t            if self._package_file.exists():\n\t                return self._package_file\n\t        # Recreate a package\n\t        fname = tempfile.mktemp(suffix=\".zip\")\n\t        zip = zipfile.ZipFile(fname, \"w\")\n", "        zip.write(self._main_bin, self._main_bin.name)\n\t        if self._quokka:\n\t            zip.write(self._quokka, self._quokka.name)\n\t        if self._callgraph:\n\t            zip.write(self._callgraph, self._callgraph.name)\n\t        if self._cmplog:\n\t            zip.write(self._cmplog, self._cmplog.name)\n\t        if self._dictionary:\n\t            zip.write(self._dictionary, self._dictionary.name)\n\t        for file in self.other_files:\n", "            zip.write(file)\n\t        zip.close()\n\t        return Path(fname)\n\t    @staticmethod\n\t    def _read_binary_infos(file: Path) -> Optional[Tuple[Platform, Arch]]:\n\t        p = lief.parse(str(file))\n\t        if not p:\n\t            return None\n\t        if not isinstance(p, lief.ELF.Binary):\n\t            logging.warning(f\"binary {file} not supported (only ELF at the moment)\")\n", "            return None\n\t        # Determine the architecture of the binary\n\t        mapping = {lief.ELF.ARCH.x86_64: Arch.X86_64,\n\t                   lief.ELF.ARCH.i386: Arch.X86,\n\t                   lief.ELF.ARCH.ARM: Arch.ARMV7,\n\t                   lief.ELF.ARCH.AARCH64: Arch.AARCH64}\n\t        arch = mapping.get(p.header.machine_type)\n\t        # Determine the platform from its format\n\t        mapping_elf = {lief.EXE_FORMATS.ELF: Platform.LINUX,\n\t                       lief.EXE_FORMATS.PE: Platform.WINDOWS,\n", "                       lief.EXE_FORMATS.MACHO: Platform.MACOS}\n\t        # FIXME: differentiating between ELF (Linux, Android ..) and MACHO (MacOS, iOS..)\n\t        fmt = mapping_elf.get(p.format)\n\t        if arch and fmt:\n\t            return fmt, arch\n\t        else:\n\t            return None\n\t    @staticmethod\n\t    def from_binary(name: str, binary: bytes, extract_dir: Path) -> 'BinaryPackage':\n\t        \"\"\"\n", "        Convert the binary blob received as a BinaryPackage object. If its an archive,\n\t        extract it and return the list of files. Files are extracted in /tmp. If\n\t        directly an executable save it to a file and return its path. Also ensure\n\t        the executable file is indeed executable in terms of permissions.\n\t        :param name: name of executable, or executable name in archive\n\t        :param binary: content\n\t        :param extract_dir: Path: directory where files should be extracted\n\t        :return: list of file paths\n\t        :raise FileNotFoundError: if the mime type of the binary is not recognized\n\t        \"\"\"\n", "        mime = magic.from_buffer(binary, mime=True)\n\t        if mime in ['application/x-tar', 'application/zip']:\n\t            map = {'application/x-tar': '.tar.gz', 'application/zip': '.zip'}\n\t            tmp_file = Path(tempfile.mktemp(suffix=map[mime]))\n\t            tmp_file.write_bytes(binary)          # write the archive in a file\n\t            # Extract the archive in the right directory\n\t            shutil.unpack_archive(tmp_file.as_posix(), extract_dir)  # unpack it in dst directory\n\t            # Create the package object\n\t            pkg = BinaryPackage.auto(Path(extract_dir) / name)\n\t            if pkg is None:\n", "                raise ValueError(f\"Cannot create a BinaryPackage with {name}\")\n\t            for file in extract_dir.iterdir():\n\t                if file not in [pkg.executable_path, pkg.callgraph, pkg.quokka, pkg.dictionary]:\n\t                    pkg.other_files.append(file)\n\t            return pkg\n\t        elif mime in ['application/x-pie-executable', 'application/x-dosexec', 'application/x-mach-binary', 'application/x-executable', 'application/x-sharedlib']:\n\t            program_path = extract_dir / name\n\t            program_path.write_bytes(binary)\n\t            program_path.chmod(stat.S_IRWXU)  # set the binary executable\n\t            return BinaryPackage(program_path)\n", "        else:\n\t            raise FileNotFoundError(f\"mimetype not recognized {mime}\")\n"]}
{"filename": "libpastis/sast.py", "chunked_list": ["# built-in imports\n\timport json\n\timport csv\n\tfrom pathlib import Path\n\tfrom typing import List, Dict, Tuple, Union\n\tclass SASTAlert:\n\t    \"\"\"\n\t    Class representing an alert in a somewhat abstract SAST tool. Its\n\t    used to perform alert driven testing.\n\t    \"\"\"\n", "    def __init__(self):\n\t        # Static alert data\n\t        self.id: int = -1\n\t        #: Unique ID of the alert\n\t        self.type: str = \"\"\n\t        #: Type of the alert BoF, UaF (in the convention of the SAST)\n\t        self.params: list = []\n\t        #: Additional parameters of the alert (list)\n\t        self.taxonomy: str = \"\"\n\t        #: Taxonomy of the alert (e.g: CWE, CVE, MISRA checker, ..)\n", "        self.severity: str = \"\"\n\t        #: Severity of the alert (e.g: Review, Error, Critical ..)\n\t        self.file: str = \"\"\n\t        #: Source file impacted\n\t        self.line: int = -1\n\t        #: line of code (in the file)\n\t        self.function: str = \"\"\n\t        #: Function impacted\n\t        self.raw_line: str = \"\"\n\t        #: Raw alert extract taken from the report (in its own format)\n", "        # Analysis results\n\t        self.covered = False\n\t        #: Coverage: True if the alert has been covered (path leading there)\n\t        self.validated = False\n\t        #: Validation: True if the alert has been validated (as a true positive by a checker)\n\t        self.uncoverable = False\n\t        #: Reachability: True if the alert cannot be reached by any paths\n\t    @staticmethod\n\t    def from_json(data: dict) -> 'SASTAlert':\n\t        \"\"\"\n", "        Create a SASTAlert object from the JSON data provided.\n\t        :param data: JSON data of the alert\n\t        :return: SASTAlert instance, initialized with the JSON\n\t        \"\"\"\n\t        alert = SASTAlert()\n\t        for name in [\"id\", \"type\", \"params\", \"taxonomy\", \"severity\", \"file\", \"line\", \"function\", \"raw_line\",\n\t                     \"covered\", \"validated\", \"uncoverable\"]:\n\t            val = data.get(name)\n\t            if val:\n\t                setattr(alert, name, val)\n", "        return alert\n\t    def to_dict(self) -> dict:\n\t        \"\"\"\n\t        Export the alert attribute to a valid JSON dictionnary\n\t        that can be written to file.\n\t        :return: JSON dict of the alert serialized\n\t        \"\"\"\n\t        return {x: getattr(self, x) for x in [\"id\", \"type\", \"params\", \"taxonomy\", \"severity\", \"file\", \"line\", \"function\",\n\t                                              \"raw_line\", \"covered\", \"validated\", \"uncoverable\"]}\n\t    def __repr__(self):\n", "        return f\"<Alert id:{self.id}: {self.type} {self.function}:{self.line} ({Path(self.file).name})>\"\n\tclass SASTReport:\n\t    \"\"\"\n\t    SAST report. Manages a list of SAST alerts taken from a report.\n\t    \"\"\"\n\t    def __init__(self):\n\t        self.alerts: Dict[int, SASTAlert] = {}\n\t        #: Dictionnary of alerts indexed by their ID\n\t    def iter_alerts(self) -> List[SASTAlert]:\n\t        \"\"\"\n", "        Iterate all the alerts of the report.\n\t        :return: list of alerts\n\t        \"\"\"\n\t        return list(self.alerts.values())\n\t    def all_alerts_validated(self) -> bool:\n\t        \"\"\"\n\t        Checks if all alerts have been validated (and thus covered)\n\t        :return: True if all alerts are covered and vulns validated\n\t        \"\"\"\n\t        for alert in self.iter_alerts():\n", "            if not alert.covered:\n\t                return False\n\t        return True\n\t    def add_alert(self, alert: SASTAlert) -> None:\n\t        \"\"\"\n\t        Add an alert in the report. This function is solely\n\t        meant to be used by the report parser\n\t        :param alert: Alert object to add in the report\n\t        \"\"\"\n\t        self.alerts[alert.id] = alert\n", "    @staticmethod\n\t    def from_file(file: Union[str, Path]) -> 'SASTReport':\n\t        \"\"\"\n\t        Parse the given file into a SAST report object.\n\t        :param file: path to report\n\t        :return: SASTReport object\n\t        \"\"\"\n\t        data = Path(file).read_bytes()\n\t        return SASTReport.from_json(data)\n\t    @staticmethod\n", "    def from_json(data: Union[str, bytes]) -> 'SASTReport':\n\t        \"\"\"\n\t        Parse the given string into a SAST report object.\n\t        :param data: serialized report in JSON\n\t        :return: SASTReport object\n\t        \"\"\"\n\t        data = json.loads(data)\n\t        report = SASTReport()\n\t        for it in data:\n\t            a = SASTAlert.from_json(it)\n", "            report.add_alert(a)\n\t        return report\n\t    def to_json(self) -> str:\n\t        \"\"\"\n\t        Export the current state of the alerts within a JSON dictionnary.\n\t        :return: JSON serialized report\n\t        \"\"\"\n\t        return json.dumps([x.to_dict() for x in self.alerts.values()], indent=2)\n\t    def write(self, out_file) -> None:\n\t        \"\"\"\n", "        Export the current state of the alerts within a JSON dictionary.\n\t        :param out_file: Output file path\n\t        \"\"\"\n\t        with open(out_file, \"w\") as f:\n\t            f.write(self.to_json())\n\t    def get_stats(self) -> Tuple[int, int, int]:\n\t        \"\"\"\n\t        Get stats about the report. The results is a triple\n\t        with the number of alerts covered, validated and total.\n\t        :return: triple of covered, validated, totoal number of alerts\n", "        \"\"\"\n\t        covered = 0\n\t        validated = 0\n\t        total = 0\n\t        for alert in self.alerts.values():\n\t            covered += int(alert.covered)\n\t            validated += int(alert.validated)\n\t            total += 1\n\t        return covered, validated, total\n\t    def write_csv(self, file: Path) -> None:\n", "        \"\"\"\n\t        Write the report as a csv into the given file.\n\t        :param file: CSV file to write\n\t        \"\"\"\n\t        with open(file, 'w', newline='') as csvfile:\n\t            writer = csv.DictWriter(csvfile, fieldnames=['id', 'type', 'covered', 'validated'])\n\t            writer.writeheader()\n\t            for a in self.iter_alerts():\n\t                writer.writerow({'id': a.id,\n\t                                 'type': a.type,\n", "                                 'covered': a.covered,\n\t                                 'validated': a.validated})\n"]}
{"filename": "libpastis/proto/__init__.py", "chunked_list": ["from .message_pb2 import *\n\tSeedType = InputSeedMsg.SeedType\n\tArch = HelloMsg.Arch\n"]}
{"filename": "libpastis/proto/message_pb2.py", "chunked_list": ["# -*- coding: utf-8 -*-\n\t# Generated by the protocol buffer compiler.  DO NOT EDIT!\n\t# source: message.proto\n\t\"\"\"Generated protocol buffer code.\"\"\"\n\tfrom google.protobuf.internal import builder as _builder\n\tfrom google.protobuf import descriptor as _descriptor\n\tfrom google.protobuf import descriptor_pool as _descriptor_pool\n\tfrom google.protobuf import symbol_database as _symbol_database\n\t# @@protoc_insertion_point(imports)\n\t_sym_db = _symbol_database.Default()\n", "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n\\rmessage.proto\\x12\\tlibpastis\\\"@\\n\\rFuzzingEngine\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0f\\n\\x07version\\x18\\x02 \\x01(\\t\\x12\\x10\\n\\x08pymodule\\x18\\x03 \\x01(\\t\\\"x\\n\\x0cInputSeedMsg\\x12\\x0c\\n\\x04seed\\x18\\x01 \\x01(\\x0c\\x12.\\n\\x04type\\x18\\x02 \\x01(\\x0e\\x32 .libpastis.InputSeedMsg.SeedType\\\"*\\n\\x08SeedType\\x12\\t\\n\\x05INPUT\\x10\\x00\\x12\\t\\n\\x05\\x43RASH\\x10\\x01\\x12\\x08\\n\\x04HANG\\x10\\x02\\\"\\x17\\n\\x07\\x44\\x61taMsg\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x01 \\x01(\\t\\\"\\xde\\x04\\n\\x08StartMsg\\x12\\x17\\n\\x0f\\x62inary_filename\\x18\\x01 \\x01(\\t\\x12\\x0e\\n\\x06\\x62inary\\x18\\x02 \\x01(\\x0c\\x12\\x13\\n\\x0bsast_report\\x18\\x03 \\x01(\\x0c\\x12(\\n\\x06\\x65ngine\\x18\\x04 \\x01(\\x0b\\x32\\x18.libpastis.FuzzingEngine\\x12/\\n\\texec_mode\\x18\\x05 \\x01(\\x0e\\x32\\x1c.libpastis.StartMsg.ExecMode\\x12/\\n\\tfuzz_mode\\x18\\x06 \\x01(\\x0e\\x32\\x1c.libpastis.StartMsg.FuzzMode\\x12\\x31\\n\\ncheck_mode\\x18\\x07 \\x01(\\x0e\\x32\\x1d.libpastis.StartMsg.CheckMode\\x12\\x15\\n\\rcoverage_mode\\x18\\x08 \\x01(\\t\\x12\\x38\\n\\rseed_location\\x18\\t \\x01(\\x0e\\x32!.libpastis.StartMsg.SeedInjectLoc\\x12\\x13\\n\\x0b\\x65ngine_args\\x18\\n \\x01(\\t\\x12\\x14\\n\\x0cprogram_argv\\x18\\x0b \\x03(\\t\\\":\\n\\x08\\x45xecMode\\x12\\r\\n\\tAUTO_EXEC\\x10\\x00\\x12\\x0f\\n\\x0bSINGLE_EXEC\\x10\\x01\\x12\\x0e\\n\\nPERSISTENT\\x10\\x02\\\"<\\n\\x08\\x46uzzMode\\x12\\r\\n\\tAUTO_FUZZ\\x10\\x00\\x12\\x10\\n\\x0cINSTRUMENTED\\x10\\x01\\x12\\x0f\\n\\x0b\\x42INARY_ONLY\\x10\\x02\\\"9\\n\\tCheckMode\\x12\\r\\n\\tCHECK_ALL\\x10\\x00\\x12\\x0e\\n\\nALERT_ONLY\\x10\\x01\\x12\\r\\n\\tALERT_ONE\\x10\\x02\\\"$\\n\\rSeedInjectLoc\\x12\\t\\n\\x05STDIN\\x10\\x00\\x12\\x08\\n\\x04\\x41RGV\\x10\\x01\\\"\\t\\n\\x07StopMsg\\\"\\xf1\\x01\\n\\x08HelloMsg\\x12.\\n\\x0c\\x61rchitecture\\x18\\x01 \\x01(\\x0e\\x32\\x18.libpastis.HelloMsg.Arch\\x12\\x0c\\n\\x04\\x63pus\\x18\\x02 \\x01(\\r\\x12\\x0e\\n\\x06memory\\x18\\x03 \\x01(\\x04\\x12)\\n\\x07\\x65ngines\\x18\\x04 \\x03(\\x0b\\x32\\x18.libpastis.FuzzingEngine\\x12\\x10\\n\\x08hostname\\x18\\x05 \\x01(\\t\\x12%\\n\\x08platform\\x18\\x06 \\x01(\\x0e\\x32\\x13.libpastis.Platform\\\"3\\n\\x04\\x41rch\\x12\\x07\\n\\x03X86\\x10\\x00\\x12\\n\\n\\x06X86_64\\x10\\x01\\x12\\t\\n\\x05\\x41RMV7\\x10\\x02\\x12\\x0b\\n\\x07\\x41\\x41RCH64\\x10\\x03\\\"\\x8b\\x01\\n\\x06LogMsg\\x12\\x0f\\n\\x07message\\x18\\x01 \\x01(\\t\\x12)\\n\\x05level\\x18\\x02 \\x01(\\x0e\\x32\\x1a.libpastis.LogMsg.LogLevel\\\"E\\n\\x08LogLevel\\x12\\t\\n\\x05\\x44\\x45\\x42UG\\x10\\x00\\x12\\x08\\n\\x04INFO\\x10\\x01\\x12\\x0b\\n\\x07WARNING\\x10\\x02\\x12\\t\\n\\x05\\x45RROR\\x10\\x03\\x12\\x0c\\n\\x08\\x43RITICAL\\x10\\x04\\\"\\xfe\\x01\\n\\x0cTelemetryMsg\\x12\\x1f\\n\\x05state\\x18\\x01 \\x01(\\x0e\\x32\\x10.libpastis.State\\x12\\x14\\n\\x0c\\x65xec_per_sec\\x18\\x02 \\x01(\\r\\x12\\x12\\n\\ntotal_exec\\x18\\x03 \\x01(\\x04\\x12\\r\\n\\x05\\x63ycle\\x18\\x04 \\x01(\\r\\x12\\x0f\\n\\x07timeout\\x18\\x05 \\x01(\\r\\x12\\x16\\n\\x0e\\x63overage_block\\x18\\x06 \\x01(\\r\\x12\\x15\\n\\rcoverage_edge\\x18\\x07 \\x01(\\r\\x12\\x15\\n\\rcoverage_path\\x18\\x08 \\x01(\\r\\x12\\x17\\n\\x0flast_cov_update\\x18\\t \\x01(\\x04\\x12\\x11\\n\\tcpu_usage\\x18\\n \\x01(\\x02\\x12\\x11\\n\\tmem_usage\\x18\\x0b \\x01(\\x02\\\"\\x16\\n\\x14StopCoverageCriteria\\\"\\xf8\\x02\\n\\x0b\\x45nvelopeMsg\\x12,\\n\\tinput_msg\\x18\\x01 \\x01(\\x0b\\x32\\x17.libpastis.InputSeedMsgH\\x00\\x12&\\n\\x08\\x64\\x61ta_msg\\x18\\x02 \\x01(\\x0b\\x32\\x12.libpastis.DataMsgH\\x00\\x12(\\n\\tstart_msg\\x18\\x03 \\x01(\\x0b\\x32\\x13.libpastis.StartMsgH\\x00\\x12&\\n\\x08stop_msg\\x18\\x04 \\x01(\\x0b\\x32\\x12.libpastis.StopMsgH\\x00\\x12(\\n\\thello_msg\\x18\\x05 \\x01(\\x0b\\x32\\x13.libpastis.HelloMsgH\\x00\\x12$\\n\\x07log_msg\\x18\\x06 \\x01(\\x0b\\x32\\x11.libpastis.LogMsgH\\x00\\x12\\x30\\n\\rtelemetry_msg\\x18\\x07 \\x01(\\x0b\\x32\\x17.libpastis.TelemetryMsgH\\x00\\x12\\x38\\n\\rstop_crit_msg\\x18\\x08 \\x01(\\x0b\\x32\\x1f.libpastis.StopCoverageCriteriaH\\x00\\x42\\x05\\n\\x03msg*\\x1e\\n\\x05State\\x12\\x0b\\n\\x07RUNNING\\x10\\x00\\x12\\x08\\n\\x04IDLE\\x10\\x01*L\\n\\x08Platform\\x12\\x07\\n\\x03\\x41NY\\x10\\x00\\x12\\t\\n\\x05LINUX\\x10\\x01\\x12\\x0b\\n\\x07WINDOWS\\x10\\x02\\x12\\t\\n\\x05MACOS\\x10\\x03\\x12\\x0b\\n\\x07\\x41NDROID\\x10\\x04\\x12\\x07\\n\\x03IOS\\x10\\x05\\x62\\x06proto3')\n\t_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())\n\t_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'message_pb2', globals())\n\tif _descriptor._USE_C_DESCRIPTORS == False:\n\t  DESCRIPTOR._options = None\n\t  _STATE._serialized_start=1907\n\t  _STATE._serialized_end=1937\n\t  _PLATFORM._serialized_start=1939\n\t  _PLATFORM._serialized_end=2015\n\t  _FUZZINGENGINE._serialized_start=28\n", "  _FUZZINGENGINE._serialized_end=92\n\t  _INPUTSEEDMSG._serialized_start=94\n\t  _INPUTSEEDMSG._serialized_end=214\n\t  _INPUTSEEDMSG_SEEDTYPE._serialized_start=172\n\t  _INPUTSEEDMSG_SEEDTYPE._serialized_end=214\n\t  _DATAMSG._serialized_start=216\n\t  _DATAMSG._serialized_end=239\n\t  _STARTMSG._serialized_start=242\n\t  _STARTMSG._serialized_end=848\n\t  _STARTMSG_EXECMODE._serialized_start=631\n", "  _STARTMSG_EXECMODE._serialized_end=689\n\t  _STARTMSG_FUZZMODE._serialized_start=691\n\t  _STARTMSG_FUZZMODE._serialized_end=751\n\t  _STARTMSG_CHECKMODE._serialized_start=753\n\t  _STARTMSG_CHECKMODE._serialized_end=810\n\t  _STARTMSG_SEEDINJECTLOC._serialized_start=812\n\t  _STARTMSG_SEEDINJECTLOC._serialized_end=848\n\t  _STOPMSG._serialized_start=850\n\t  _STOPMSG._serialized_end=859\n\t  _HELLOMSG._serialized_start=862\n", "  _HELLOMSG._serialized_end=1103\n\t  _HELLOMSG_ARCH._serialized_start=1052\n\t  _HELLOMSG_ARCH._serialized_end=1103\n\t  _LOGMSG._serialized_start=1106\n\t  _LOGMSG._serialized_end=1245\n\t  _LOGMSG_LOGLEVEL._serialized_start=1176\n\t  _LOGMSG_LOGLEVEL._serialized_end=1245\n\t  _TELEMETRYMSG._serialized_start=1248\n\t  _TELEMETRYMSG._serialized_end=1502\n\t  _STOPCOVERAGECRITERIA._serialized_start=1504\n", "  _STOPCOVERAGECRITERIA._serialized_end=1526\n\t  _ENVELOPEMSG._serialized_start=1529\n\t  _ENVELOPEMSG._serialized_end=1905\n\t# @@protoc_insertion_point(module_scope)\n"]}
{"filename": "pastisbroker/workspace.py", "chunked_list": ["import json\n\tfrom pathlib import Path\n\tfrom typing import Iterator, Generator\n\timport shutil\n\timport stat\n\tfrom enum import Enum, auto\n\tfrom libpastis.types import SeedType, PathLike\n\tfrom libpastis import SASTReport\n\tclass WorkspaceStatus(Enum):\n\t    NOT_STARTED = auto()\n", "    RUNNING = auto()\n\t    FINISHED = auto()\n\tclass Workspace(object):\n\t    INPUT_DIR = \"corpus\"\n\t    HANGS_DIR = \"hangs\"\n\t    CRASH_DIR = \"crashes\"\n\t    LOG_DIR = \"logs\"\n\t    BINS_DIR = \"binaries\"\n\t    ALERTS_DIR = \"alerts_data\"\n\t    SEED_DIR = \"seeds\"\n", "    SAST_REPORT_COPY = \"sast-report.bin\"\n\t    CSV_FILE = \"results.csv\"\n\t    TELEMETRY_FILE = \"telemetry.csv\"\n\t    CLIENTS_STATS = \"clients-stats.json\"\n\t    LOG_FILE = \"broker.log\"\n\t    STATUS_FILE = \"STATUS\"\n\t    RUNTIME_CONFIG_FILE = \"config.json\"\n\t    COVERAGE_HISTORY = \"coverage-history.csv\"\n\t    def __init__(self, directory: Path, erase: bool = False):\n\t        self.root = directory\n", "        if erase:  # If want to erase the whole workspace\n\t            shutil.rmtree(self.root)\n\t        # Create the base directory structure\n\t        if not self.root.exists():\n\t            self.root.mkdir()\n\t        for s in [self.INPUT_DIR, self.CRASH_DIR, self.LOG_DIR, self.HANGS_DIR, self.BINS_DIR, self.SEED_DIR]:\n\t            p = self.root / s\n\t            if not p.exists():\n\t                p.mkdir()\n\t        # If no status file is found create one\n", "        status_file = Path(self.root / self.STATUS_FILE)\n\t        self._status = WorkspaceStatus.NOT_STARTED\n\t        if not status_file.exists():\n\t            status_file.write_text(self._status.name)\n\t        else:\n\t            self._status = WorkspaceStatus[status_file.read_text()]\n\t    def initialize_runtime(self, binaries_dir: PathLike, params: dict):\n\t        # First copy binary files in workspace if different directories\n\t        if self.root / self.BINS_DIR != binaries_dir:\n\t            shutil.copytree(binaries_dir, self.root / self.BINS_DIR, dirs_exist_ok=True)\n", "        # Save runtime configuration\n\t        config = self.root / self.RUNTIME_CONFIG_FILE\n\t        config.write_text(json.dumps(params))\n\t    def iter_corpus_directory(self, typ: SeedType) -> Generator[Path, None, None]:\n\t        dir_map = {SeedType.INPUT: self.INPUT_DIR, SeedType.CRASH: self.CRASH_DIR, SeedType.HANG: self.HANGS_DIR}\n\t        dir = self.root / dir_map[typ]\n\t        for file in dir.iterdir():\n\t            yield file\n\t    def iter_initial_corpus_directory(self) -> Generator[Path, None, None]:\n\t        for file in (self.root / self.SEED_DIR).iterdir():\n", "            yield file\n\t    def count_corpus_directory(self, typ: SeedType) -> int:\n\t        return sum(1 for _ in self.iter_corpus_directory(typ))\n\t    @property\n\t    def status(self) -> WorkspaceStatus:\n\t        return self._status\n\t    @status.setter\n\t    def status(self, value: WorkspaceStatus) -> None:\n\t        self._status = value\n\t        Path(self.root / self.STATUS_FILE).write_text(value.name)\n", "    @property\n\t    def telemetry_file(self) -> Path:\n\t        return self.root / self.TELEMETRY_FILE\n\t    @property\n\t    def clients_stat_file(self) -> Path:\n\t        return self.root / self.CLIENTS_STATS\n\t    @property\n\t    def sast_report_file(self) -> Path:\n\t        return self.root / self.SAST_REPORT_COPY\n\t    @property\n", "    def csv_result_file(self) -> Path:\n\t        return self.root / self.CSV_FILE\n\t    @property\n\t    def log_directory(self) -> Path:\n\t        return self.root / self.LOG_DIR\n\t    @property\n\t    def broker_log_file(self) -> Path:\n\t        return self.root / self.LOG_FILE\n\t    @property\n\t    def config_file(self) -> Path:\n", "        return self.root / self.RUNTIME_CONFIG_FILE\n\t    @property\n\t    def coverage_history(self) -> Path:\n\t        return self.root / self.COVERAGE_HISTORY\n\t    def add_binary(self, binary_path: Path) -> Path:\n\t        \"\"\"\n\t        Add a binary in the workspace directory structure.\n\t        :param binary_path: Path of the executable to copy\n\t        :return: the final executable file path\n\t        \"\"\"\n", "        dst_file = self.root / self.BINS_DIR / binary_path.name\n\t        if dst_file.absolute() != binary_path.absolute():  # If not already in the workspace copy them in workspace\n\t            dst_file.write_bytes(binary_path.read_bytes())\n\t            dst_file.chmod(stat.S_IRWXU)  # Change target mode to execute.\n\t        return dst_file\n\t    def add_binary_data(self, name: str, content: bytes) -> Path:\n\t        \"\"\"\n\t        Add a binary in the workspace directory structure.\n\t        :param name: Name of the executable file\n\t        :param content: Content of the executable\n", "        :return: the final executable file path\n\t        \"\"\"\n\t        dst_file = self.root / self.BINS_DIR / name\n\t        dst_file.write_bytes(content)\n\t        dst_file.chmod(stat.S_IRWXU)  # Change target mode to execute.\n\t        return dst_file\n\t    def add_sast_report(self, report: SASTReport) -> Path:\n\t        f = self.root / self.SAST_REPORT_COPY\n\t        report.write(f)\n\t        return f\n", "    @property\n\t    def binaries(self) -> Generator[Path, None, None]:\n\t        for file in (self.root / self.BINS_DIR).iterdir():\n\t            yield file\n\t    def initialize_alert_corpus(self, report: SASTReport) -> None:\n\t        \"\"\" Create a directory for each alert where to store coverage / vuln corpus \"\"\"\n\t        p = self.root / self.ALERTS_DIR\n\t        p.mkdir(exist_ok=True)\n\t        for alert in report.iter_alerts():\n\t            a_dir = p / str(alert.id)\n", "            a_dir.mkdir(exist_ok=True)\n\t    def save_alert_seed(self, id: int, name: str, data: bytes) -> None:\n\t        p = ((self.root / self.ALERTS_DIR) / str(id)) / name\n\t        p.write_bytes(data)\n\t    def save_seed_file(self, typ: SeedType, file: Path, initial: bool = False) -> None:\n\t        dir_map = {SeedType.INPUT: self.INPUT_DIR, SeedType.CRASH: self.CRASH_DIR, SeedType.HANG: self.HANGS_DIR}\n\t        if initial:\n\t            out = self.root / self.SEED_DIR / file.name\n\t        else:\n\t            out = self.root / dir_map[typ] / file.name\n", "        if str(file) != str(out):\n\t            shutil.copy(str(file), str(out))\n\t    def save_seed(self, typ: SeedType, name: str, data: bytes) -> None:\n\t        dir_map = {SeedType.INPUT: self.INPUT_DIR, SeedType.CRASH: self.CRASH_DIR, SeedType.HANG: self.HANGS_DIR}\n\t        out = self.root / dir_map[typ] / name\n\t        out.write_bytes(data)\n"]}
{"filename": "pastisbroker/client.py", "chunked_list": ["# Built-in imports\n\tfrom typing import Tuple, List, Dict\n\tfrom pathlib import Path\n\timport logging\n\timport time\n\timport inspect\n\t# Third-party imports\n\tfrom libpastis.types import FuzzingEngineInfo, Arch, LogLevel, ExecMode, CheckMode, CoverageMode, SeedType, Platform\n\tfrom libpastis import FuzzingEngineDescriptor\n\tclass PastisClient(object):\n", "    \"\"\"\n\t    Utility class holding all information related to\n\t    a client connected to the broker.\n\t    \"\"\"\n\t    def __init__(self, id: int, netid: bytes, engines: List[FuzzingEngineInfo], arch: Arch, cpus: int, memory: int, hostname: str, platform: Platform):\n\t        # All this attributes are assigned once and for all\n\t        self.id = id\n\t        self.netid = netid\n\t        self.engines = engines\n\t        self.arch = arch\n", "        self.cpus = cpus\n\t        self.memory = memory\n\t        self.hostname = hostname\n\t        self.platform = platform\n\t        self.logger = None\n\t        # Runtime properties (reset at avery send_start)\n\t        self._program = None\n\t        self._running = False\n\t        self._engine = None  # FuzzingEngineDescriptor\n\t        self._engine_args = None\n", "        self._coverage_mode = None\n\t        self._exec_mode = None\n\t        self._check_mode = None\n\t        self._seeds_received = set()  # Seed sent to the client\n\t        self._seeds_submitted = set()  # Seed submitted by the client\n\t        self.target = None  # target in case of slicing\n\t        self.target_validated = False\n\t        # Runtime telemetry stats\n\t        self.exec_per_sec = None\n\t        self.total_exec = None\n", "        self.cycle = None\n\t        self.timeout = None\n\t        self.coverage_block = None\n\t        self.coverage_edge = None\n\t        self.coverage_path = None\n\t        self.last_cov_update = None\n\t        # seed stats\n\t        self.input_submitted_count = 0\n\t        self.crash_submitted_count = 0\n\t        self.timeout_submitted_count = 0\n", "        self.seed_first = 0\n\t        # SAST parameters\n\t        self.alert_covered = set()\n\t        self.alert_covered_first = 0\n\t        self.alert_validated = set()\n\t        self.alert_validated_first = 0\n\t        # time series\n\t        self._timeline_seeds = []  # List[Tuple[float, int, typ]]  # history of submission\n\t        # self._timeline_coverage = []\n\t    def configure_logger(self, log_dir, colorid: int):\n", "        if self.logger is None:\n\t            self.logger = logging.getLogger(f\"\\033[7m\\033[{colorid}m[{self.strid}]\\033[0m\")\n\t            # Add a file handler\n\t            hldr = logging.FileHandler(log_dir/f\"{self.strid}.log\")\n\t            hldr.setLevel(logging.DEBUG)\n\t            hldr.setFormatter(logging.Formatter(\"%(asctime)s [%(levelname)s]: %(message)s\"))\n\t            self.logger.addHandler(hldr)\n\t    @property\n\t    def strid(self):\n\t        return f\"CLI-{self.id}-{self._engine.SHORT_NAME if self._engine else 'N/A'}\"\n", "    def is_new_seed(self, seed: bytes) -> bool:\n\t        \"\"\"\n\t        Return true if the seed has never been sent to a client\n\t        :param seed: seed bytes\n\t        :return: True if never sent to client\n\t        \"\"\"\n\t        return seed not in self._seeds_received and seed not in self._seeds_submitted\n\t    def add_peer_seed(self, seed: bytes) -> None:\n\t        self._seeds_received.add(seed)\n\t    def add_own_seed(self, seed: bytes) -> None:\n", "        self._seeds_submitted.add(seed)\n\t    def is_running(self) -> bool:\n\t        return self._running\n\t    def is_idle(self) -> bool:\n\t        return not self._running\n\t    def log(self, level: LogLevel, message: str):\n\t        # Get the function in the logger (warning, debug, info) and call it with message\n\t        if self.logger is None:  # Client has not yet been configured\n\t            getattr(logging, level.name.lower())(message)\n\t        else:  # Log in client logger\n", "            getattr(self.logger, level.name.lower())(message)\n\t    @property\n\t    def package_name(self) -> str:\n\t        return self._program\n\t    @property\n\t    def engine(self):\n\t        return self._engine\n\t    @property\n\t    def coverage_mode(self):\n\t        return self._coverage_mode\n", "    @property\n\t    def exec_mode(self):\n\t        return self._exec_mode\n\t    @property\n\t    def check_mode(self):\n\t        return self._check_mode\n\t    def set_stopped(self):\n\t        \"\"\" Flush runtime data (keep stats) \"\"\"\n\t        self._running = False\n\t        self._engine = None\n", "        self._coverage_mode = None\n\t        self._exec_mode = None\n\t        self._check_mode = None\n\t    def set_running(self, program: str, engine: FuzzingEngineDescriptor, covmode: CoverageMode, exmode: ExecMode,\n\t                    ckmode: CheckMode, engine_args: str = None):\n\t        self._program = program\n\t        self._running = True\n\t        self._engine = engine\n\t        self._coverage_mode = covmode\n\t        self._exec_mode = exmode\n", "        self._check_mode = ckmode\n\t        self._engine_args = engine_args\n\t        self._seeds_received = set()  # Seed sent to the client\n\t        self._seeds_submitted = set()  # Seed submitted by the client\n\t    def is_supported_engine(self, engine: FuzzingEngineDescriptor) -> bool:\n\t        for e in self.engines:\n\t            if e.name == engine.NAME:\n\t                return True\n\t        return False\n\t    def to_dict(self) -> Dict:\n", "        return {\n\t            \"id\": self.id,\n\t            \"strid\": self.strid,\n\t            \"engines\": [x.name for x in self.engines],\n\t            \"arch\": self.arch.name,\n\t            \"cpus\": self.cpus,\n\t            \"memory\": self.memory,\n\t            \"hostname\": self.hostname,\n\t            \"platform\": self.platform.name,\n\t            \"engine\": self._engine.NAME if self._engine else \"\",\n", "            \"engine_args\": self._engine_args,\n\t            \"coverage_mode\": self._coverage_mode.name,\n\t            \"exec_mode\": self._exec_mode.name,\n\t            \"check_mode\": self._check_mode.name,\n\t            \"seed_received_count\": len(self._seeds_received),\n\t            \"exec_per_sec\": self.exec_per_sec,\n\t            \"total_exec\": self.total_exec,\n\t            \"cycle\": self.cycle,\n\t            \"timeout\": self.timeout,\n\t            \"coverage_block\": self.coverage_block,\n", "            \"coverage_edge\": self.coverage_edge,\n\t            \"coverage_path\": self.coverage_path,\n\t            \"last_cov_update\": self.last_cov_update,\n\t            \"input_submitted_count\": self.input_submitted_count,\n\t            \"crash_submitted_count\": self.crash_submitted_count,\n\t            \"timeout_submitted_count\": self.timeout_submitted_count,\n\t            \"seed_first\": self.seed_first,\n\t            \"alert_covered\": list(self.alert_covered),\n\t            \"alert_covered_first\": self.alert_covered_first,\n\t            \"alert_validated\": list(self.alert_validated),\n", "            \"alert_validated_first\": self.alert_validated_first,\n\t        }\n\t    def add_covered_alert(self, a_id: int, cov: bool, cov_first: bool, val: bool, val_first: bool):\n\t        if cov:\n\t            self.alert_covered.add(a_id)\n\t        if cov_first:\n\t            self.alert_covered_first += 1\n\t        if val:\n\t            self.alert_validated.add(a_id)\n\t        if val_first:\n", "            self.alert_validated_first += 1\n"]}
{"filename": "pastisbroker/broker.py", "chunked_list": ["# built-in imports\n\timport hashlib\n\timport logging\n\tfrom typing import Generator, List, Optional, Union\n\tfrom pathlib import Path\n\timport time\n\tfrom hashlib import md5\n\tfrom enum import Enum\n\tfrom collections import Counter\n\timport datetime\n", "import random\n\timport queue\n\t# Third-party imports\n\timport psutil\n\tfrom libpastis import BrokerAgent, FuzzingEngineDescriptor, EngineConfiguration, BinaryPackage, SASTReport, ClientAgent\n\tfrom libpastis.types import SeedType, FuzzingEngineInfo, LogLevel, Arch, State, SeedInjectLoc, CheckMode, CoverageMode, \\\n\t                            ExecMode, AlertData, PathLike, Platform, FuzzMode\n\tfrom libpastis.utils import get_local_architecture\n\timport lief\n\tfrom tritondse import QuokkaProgram\n", "# Local imports\n\tfrom pastisbroker.client import PastisClient\n\tfrom pastisbroker.stat_manager import StatManager\n\tfrom pastisbroker.workspace import Workspace, WorkspaceStatus\n\tfrom pastisbroker.utils import load_engine_descriptor, Bcolors, COLORS\n\tfrom pastisbroker.coverage import CoverageManager, ClientInput\n\tlief.logging.disable()\n\tclass BrokingMode(Enum):\n\t    FULL = 1              # Transmit all seeds to all peers\n\t    NO_TRANSMIT = 2       # Does not transmit seed to peers (for comparing perfs of tools against each other)\n", "class PastisBroker(BrokerAgent):\n\t    def __init__(self, workspace: PathLike,\n\t                 binaries_dir: PathLike,\n\t                 broker_mode: BrokingMode,\n\t                 check_mode: CheckMode = CheckMode.CHECK_ALL,\n\t                 inject_loc: SeedInjectLoc = SeedInjectLoc.STDIN,\n\t                 sast_report: PathLike = None,\n\t                 p_argv: List[str] = None,\n\t                 memory_threshold: int = 85,\n\t                 start_quorum: int = 0,\n", "                 filter_inputs: bool = False,\n\t                 stream: bool = False,\n\t                 replay_threads: int = 4):\n\t        super(PastisBroker, self).__init__()\n\t        # Initialize workspace\n\t        self.workspace = Workspace(Path(workspace))\n\t        params = {\"binaries_dir\": str(Path(binaries_dir).absolute()),\n\t                  \"broker_mode\": broker_mode.name,\n\t                  \"check_mode\": check_mode.name,\n\t                  \"inject_loc\": inject_loc.name,\n", "                  \"argvs\": p_argv}\n\t        self.workspace.initialize_runtime(binaries_dir, params)\n\t        self._configure_logging()\n\t        # Register all agent callbacks\n\t        self._register_all()\n\t        # Init internal state\n\t        self.broker_mode = broker_mode\n\t        self.ck_mode = check_mode\n\t        self.inject = inject_loc\n\t        self.argv = [] if p_argv is None else p_argv\n", "        self.engines_args = {}\n\t        self.engines = {}  # name->FuzzingEngineDescriptor\n\t        # for slicing mode (otherwise not used)\n\t        self._slicing_ongoing = {}  # Program -> {Addr -> [cli]}\n\t        # Initialize availables binaries\n\t        self.programs = {}  # Tuple[(Platform, Arch)] -> List[BinaryPackage]\n\t        self._find_binaries(binaries_dir)\n\t        # Klocwork informations\n\t        self.sast_report = None\n\t        if sast_report:\n", "            self.initialize_sast_report(sast_report)\n\t        # Client infos\n\t        self.clients = {}   # bytes -> Client\n\t        self._cur_id = 0\n\t        # Runtime infos\n\t        self._running = False\n\t        self._seed_pool = {}  # Seed bytes -> SeedType\n\t        self._init_seed_pool = {}  # Used for NO_TRANSMIT mode\n\t        self._start_time = None\n\t        self._stop = False\n", "        # Load the workspace seeds\n\t        self._load_workspace()\n\t        # Create the stat manager\n\t        self.statmanager = StatManager(self.workspace)\n\t        # Watchdog to monitor RAM usage\n\t        self.watchdog = None\n\t        self._threshold = memory_threshold # percent\n\t        # startup quorum\n\t        self._startup_quorum = start_quorum\n\t        self._current_quorum = 0\n", "        # Proxy feature\n\t        self._proxy = None\n\t        self._proxy_cli = None\n\t        self._proxy_start_signal = False\n\t        self._proxy_seed_queue = queue.Queue()\n\t        # Coverage + filtering feature\n\t        self._coverage_manager = None\n\t        self.filter_inputs: bool = filter_inputs\n\t        if filter_inputs or stream:\n\t            if (path := self.find_vanilla_binary()) is not None:  # Find an executable suitable for coverage\n", "                logging.info(f\"Coverage binary: {path}\")\n\t                stream_file = self.workspace.coverage_history if stream else \"\"\n\t                self._coverage_manager = CoverageManager(replay_threads, filter_inputs, path, self.argv, self.inject, stream_file)\n\t            else:\n\t                logging.warning(\"filtering or stream enabled but cannot find vanilla binary\")\n\t    def find_vanilla_binary(self) -> Optional[str]:\n\t        \"\"\"\n\t        Find a binary without instrumentation to be used for coverage\n\t        computation. It also has to match local architecture.\n\t        :return: Path to the progam\n", "        \"\"\"\n\t        local_arch = get_local_architecture()\n\t        for pkg in self.programs.get((Platform.LINUX, local_arch)):\n\t            path = str(pkg.executable_path.absolute())\n\t            p = lief.parse(str(path))\n\t            ok = True\n\t            for f in p.functions:\n\t                if \"hfuzz_\" in f.name or \"__afl_\" in f.name or \"__gcov_\" in f.name or \"__asan_\" in f.name:\n\t                    ok = False\n\t                    break\n", "            if ok:\n\t                return path\n\t        return None\n\t    def load_engine_addon(self, py_module: str) -> bool:\n\t        desc = load_engine_descriptor(py_module)\n\t        if desc is not None:\n\t            self.engines[desc.NAME] = desc\n\t            self.engines_args[desc.NAME] = []\n\t            return True\n\t        else:\n", "            return False\n\t    def initialize_sast_report(self, report: PathLike):\n\t        self.sast_report = SASTReport.from_file(report)\n\t        self.workspace.add_sast_report(self.sast_report)\n\t        self.workspace.initialize_alert_corpus(self.sast_report)\n\t    @property\n\t    def running(self) -> bool:\n\t        return self._running\n\t    def iter_other_clients(self, cli_id: bytes) -> Generator[PastisClient, None, None]:\n\t        \"\"\"\n", "        Generator of all clients but the one given in parameter\n\t        :param cli_id: netid of the client to ignore\n\t        :return: Generator of PastisClient object\n\t        \"\"\"\n\t        for c in self.clients.values():\n\t            if c.netid != cli_id:\n\t                yield c\n\t    def new_uid(self) -> int:\n\t        \"\"\"\n\t        Generate a new unique id for a client (int)\n", "        :return: int, unique (in an execution)\n\t        :return: int, unique (in an execution)\n\t        \"\"\"\n\t        v = self._cur_id\n\t        self._cur_id += 1\n\t        return v\n\t    def _register_all(self):\n\t        self.register_seed_callback(self.seed_received)\n\t        self.register_hello_callback(self.hello_received)\n\t        self.register_log_callback(self.log_received)\n", "        self.register_telemetry_callback(self.telemetry_received)\n\t        self.register_stop_coverage_callback(self.stop_coverage_received)\n\t        self.register_data_callback(self.data_received)\n\t    def get_client(self, cli_id: bytes) -> Optional[PastisClient]:\n\t        cli = self.clients.get(cli_id)\n\t        if not cli:\n\t            logging.warning(f\"client '{cli_id}' unknown (send stop)\")\n\t            self.send_stop(cli_id)\n\t        return cli\n\t    def kick_client(self, cli_id: bytes) -> None:\n", "        cli = self.clients.pop(cli_id)  # pop it from client list\n\t        logging.info(f\"kick client: {cli.strid}\")\n\t        self.send_stop(cli_id)\n\t    def seed_received(self, cli_id: bytes, typ: SeedType, seed: bytes):\n\t        cli = self.get_client(cli_id)\n\t        if not cli:\n\t            return\n\t        is_new = seed not in self._seed_pool\n\t        h = md5(seed).hexdigest()\n\t        # Show log message and save seed to file\n", "        self.statmanager.update_seed_stat(cli, typ)  # Add info only if new\n\t        cli.log(LogLevel.INFO, f\"seed {h} [{self._colored_seed_type(typ)}][{self._colored_seed_newness(is_new)}]\")\n\t        cli.add_own_seed(seed)  # Add seed in client's seed\n\t        fname = self.write_seed(typ, cli.strid, seed) # Write seed to file\n\t        if is_new:\n\t            self._seed_pool[seed] = typ  # Save it in the local pool\n\t            if self._coverage_manager:\n\t                sp = fname.split(\"_\")\n\t                covi = ClientInput(seed, \"\", f\"{sp[0]}_{sp[1]}\", sp[2], h, fname, typ, cli.netid, cli.strid, \"GRANTED\", \"\", -1, [])\n\t                self._coverage_manager.push_input(covi)\n", "            if not self.filter_inputs:  # If seed are not filtered send it right away\n\t                self.seed_granted(cli.netid, typ, seed)\n\t        else:\n\t            logging.debug(f\"receive duplicate seed {h} by {cli.strid}\")\n\t    def seed_granted(self, cli_id: bytes, typ: SeedType, seed: bytes):\n\t        # Iterate on all clients and send it to whomever never received it\n\t        if self.broker_mode == BrokingMode.FULL:\n\t            self.send_seed_to_all_others(cli_id, typ, seed)\n\t        if self.is_proxied:  # Forward it to the proxy\n\t            self._proxy.send_seed(typ, seed)\n", "    def send_seed_to_all_others(self, origin_id: bytes, typ: SeedType, seed: bytes) -> None:\n\t        for c in self.iter_other_clients(origin_id):\n\t            if c.is_new_seed(seed):\n\t                self.send_seed(c.netid, typ, seed)  # send the seed to the client\n\t                c.add_peer_seed(seed)  # Add it in its list of seed\n\t    def add_seed_file(self, file: PathLike, initial: bool = False) -> None:\n\t        p = Path(file)\n\t        logging.info(f\"Add seed {p.name} in pool\")\n\t        # Save seed in the workspace\n\t        self.workspace.save_seed_file(SeedType.INPUT, p, initial)\n", "        seed = p.read_bytes()\n\t        self._seed_pool[seed] = SeedType.INPUT\n\t        if initial:\n\t            self._init_seed_pool[seed] = SeedType.INPUT\n\t    def write_seed(self, typ: SeedType, cli_id: str, seed: bytes) -> str:\n\t        fname = self.mk_input_name(cli_id, seed)\n\t        self.workspace.save_seed(typ, fname, seed)\n\t        return fname\n\t    def mk_input_name(self, cli_id: str, seed: bytes) -> str:\n\t        t = time.strftime(\"%Y-%m-%d_%H:%M:%S\", time.localtime())\n", "        elapsed = str(datetime.timedelta(seconds=time.time() - self._start_time)).replace(\" day, \", \"d:\").replace(\" days, \", \"d:\")\n\t        return f\"{t}_{elapsed}_{cli_id}_{md5(seed).hexdigest()}.cov\"\n\t    def hello_received(self, cli_id: bytes, engines: List[FuzzingEngineInfo], arch: Arch, cpus: int, memory: int, hostname: str, platform: Platform):\n\t        uid = self.new_uid()\n\t        client = PastisClient(uid, cli_id, engines, arch, cpus, memory, hostname, platform)\n\t        logging.info(f\"[{client.strid}] [HELLO] Name:{hostname} Arch:{arch.name} engines:{[x.name for x in engines]} (cpu:{cpus}, mem:{memory})\")\n\t        self.clients[client.netid] = client\n\t        # Load engines if they are not (lazy loading)\n\t        for eng in engines:\n\t            if eng.name not in self.engines:\n", "                self.load_engine_addon(eng.pymodule)\n\t        if self.running:  # A client is coming in the middle of a session\n\t            if self._startup_quorum:\n\t                self._current_quorum += 1\n\t                if self._current_quorum >= self._startup_quorum:\n\t                    logging.info(\n\t                        f\"client number quorum ({self._current_quorum}/{self._startup_quorum}) reached, start all of them\")\n\t                    self.start_pending_clients()  # start all pending clients (including the one triggering this func)\n\t                else:\n\t                    # Put the client on-hold to wait for quorum\n", "                    logging.info(f\"client {client.strid} on-hold, wait quorum ({self._current_quorum}/{self._startup_quorum})\")\n\t            else:  # there is no quorum so start immediately\n\t                self.start_client_and_send_corpus(client)\n\t        else:\n\t            pass  # Client connection is kept in clients dict for later\n\t    def _transmit_pool(self, client, pool) -> None:\n\t        for seed, typ in pool.items():\n\t            self.send_seed(client.netid, typ, seed)  # necessarily a new seed\n\t            client.add_peer_seed(seed)  # Add it in its list of seed\n\t    def log_received(self, cli_id: bytes, level: LogLevel, message: str):\n", "        client = self.get_client(cli_id)\n\t        if not client:\n\t            return\n\t        client.log(level, message)\n\t    def telemetry_received(self, cli_id: bytes,\n\t                           _: State = None, exec_per_sec: int = None, total_exec: int = None,\n\t                           cycle: int = None, timeout: int = None, coverage_block: int = None, coverage_edge: int = None,\n\t                           coverage_path: int = None, last_cov_update: int = None):\n\t        client = self.get_client(cli_id)\n\t        if not client:\n", "            return\n\t        # NOTE: ignore state (shall we do something of it?)\n\t        args = [('-' if not x else x) for x in [exec_per_sec, total_exec, cycle, timeout, coverage_block, coverage_edge, coverage_path, last_cov_update]]\n\t        client.log(LogLevel.INFO, \"exec/s:{} tot_exec:{} cycle:{} To:{} CovB:{} CovE:{} CovP:{} last_up:{}\".format(*args))\n\t        # Update all stats in the stat manager (for later UI update)\n\t        self.statmanager.set_exec_per_sec(client, exec_per_sec)\n\t        self.statmanager.set_total_exec(client, total_exec)\n\t        self.statmanager.set_cycle(client, cycle)\n\t        self.statmanager.set_timeout(client, timeout)\n\t        self.statmanager.set_coverage_block(client, coverage_block)\n", "        self.statmanager.set_coverage_edge(client, coverage_edge)\n\t        self.statmanager.set_coverage_path(client, coverage_path)\n\t        self.statmanager.set_last_coverage_update(client, last_cov_update)\n\t        self.statmanager.update_telemetry_client(client)\n\t        # NOTE: Send an update signal for future UI ?\n\t    def stop_coverage_received(self, cli_id: bytes):\n\t        client = self.get_client(cli_id)\n\t        if not client:\n\t            return\n\t        if self.ck_mode == CheckMode.ALERT_ONE:  # Start it on another target\n", "            addr = client.target\n\t            s = \"validated \" if client.target_validated else \"is stuck for \"\n\t            logging.info(f\"[{client.strid}] [STOP_COVERAGE] client {s} 0x{addr:x} address (launch another target)\")\n\t            clis = self._slicing_ongoing[client.package_name].pop(addr)  # pop the address definitely\n\t            self.relaunch_clients(clis)  # relaunch all clients on a new target\n\t        else:\n\t            logging.info(f\"[{client.strid}] [STOP_COVERAGE]: restart client\")\n\t            self.relaunch_clients([client])  # restart the client\n\t    def data_received(self,  cli_id: bytes, data: str):\n\t        client = self.get_client(cli_id)\n", "        if not client:\n\t            return\n\t        first_cov, first_val = False, False\n\t        if not self.sast_report:\n\t            logging.warning(\"Data received while no SAST report is loaded (drop data)\")\n\t            return\n\t        alert_data = AlertData.from_json(data)\n\t        alert = self.sast_report.alerts[alert_data.id]\n\t        if not alert.validated and alert_data.validated:\n\t            logging.info(f\"[{client.strid}] First to validate {alert}\")\n", "            alert.validated = alert_data.validated\n\t            self.sast_report.write_csv(self.workspace.csv_result_file)  # Update CSV to keep it updated\n\t            first_val = True\n\t            if self.ck_mode == CheckMode.ALERT_ONE:\n\t                client.target_validated = True\n\t                # Note: Do not relaunch the client now, wait for him to send stop_coverage\n\t        # Need to be after validated because alert.covered = True (will also set validated)\n\t        if not alert.covered and alert_data.covered:\n\t            logging.info(f\"[{client.strid}] First to cover {alert}\")\n\t            alert.covered = alert_data.covered\n", "            self.sast_report.write_csv(self.workspace.csv_result_file)  # Update CSV to keep it updated\n\t            first_cov = True\n\t        # Update clients of and stats\n\t        client.add_covered_alert(alert.id, alert.covered, first_cov, alert.validated, first_val)\n\t        # Save systematically the AlertData received\n\t        self._save_alert_seed(client, alert_data)  # Also save seed in separate folder\n\t        if first_cov or first_val:\n\t            cov, val, tot = self.sast_report.get_stats()\n\t            logging.info(f\"SAST results updated: defaults: [covered:{cov}/{tot}] [validated:{val}/{tot}]\")\n\t        # If all alerts are validated send a stop to everyone\n", "        if self.sast_report.all_alerts_validated():\n\t            self.stop_broker()\n\t    def relaunch_clients(self, clients):\n\t        for cli in clients:\n\t            logging.info(\n\t                f\"Launch client {cli.strid} as its targeting an address that has just been validated\")\n\t            self.start_client_and_send_corpus(cli)\n\t    def stop_broker(self):\n\t        for client in self.clients.values():\n\t            logging.info(f\"Send stop to {client.strid}\")\n", "            self.send_stop(client.netid)\n\t        self._stop = True\n\t        # Stop coverage manager if any\n\t        if self._coverage_manager:\n\t            self._coverage_manager.stop()\n\t        # Call the statmanager to wrap-up values\n\t        self.statmanager.post_execution(list(self.clients.values()), self.workspace)\n\t        if self.is_proxied:\n\t            self._proxy.stop()\n\t        if self.sast_report:  # If a SAST report was loaded\n", "            # Write the final CSV in the workspace\n\t            self.sast_report.write_csv(self.workspace.csv_result_file)\n\t            # And also re-write the Klocwork report (that also contains resutls)\n\t            self.sast_report.write(self.workspace.sast_report_file)\n\t    def start_pending_clients(self) -> None:\n\t        \"\"\"\n\t        Start clients that connected but for which we did not yet send a response.\n\t        \"\"\"\n\t        # Send the start message to all clients (already connected)\n\t        for c in self.clients.values():\n", "            if not c.is_running():\n\t                self.start_client_and_send_corpus(c)\n\t    def start_client_and_send_corpus(self, client: PastisClient) -> None:\n\t        self.start_client(client)\n\t        # Iterate all the seed pool and send it to the client\n\t        if self.broker_mode == BrokingMode.FULL:\n\t            self._transmit_pool(client, self._seed_pool)\n\t        elif self.broker_mode == BrokingMode.NO_TRANSMIT:\n\t            self._transmit_pool(client, self._init_seed_pool)\n\t    def start_client(self, client: PastisClient):\n", "        engine = None\n\t        exmode = ExecMode.SINGLE_EXEC\n\t        fuzzmode = FuzzMode.INSTRUMENTED\n\t        engine_args = None\n\t        package = covmode = fuzzmod = None\n\t        engines = Counter({e: 0 for e in self.engines})\n\t        engines.update(c.engine.NAME for c in self.clients.values() if c.is_running())  # Count instances of each engine running\n\t        for eng, _ in engines.most_common()[::-1]:\n\t            eng_desc = self.engines[eng]\n\t            # If the engine is not supported by the client continue\n", "            if not client.is_supported_engine(eng_desc):\n\t                continue\n\t            # Try finding a suitable binary for the current engine and the client arch\n\t            programs: List[BinaryPackage] = self.programs.get((client.platform, client.arch))\n\t            package = None\n\t            exmode = None\n\t            fuzzmod = FuzzMode.AUTO\n\t            for p in programs:\n\t                res, xmod, fmod = eng_desc.accept_file(p.executable_path)  # Iterate all files on that engine descriptor to check it accept it\n\t                if res:\n", "                    if exmode:\n\t                        if exmode == ExecMode.SINGLE_EXEC and xmod == ExecMode.PERSISTENT:  # persistent supersede single_exec\n\t                            package, exmode, fuzzmod = p, xmod, fmod\n\t                        else:\n\t                            if fuzzmod == FuzzMode.BINARY_ONLY and fmod == FuzzMode.INSTRUMENTED:  # instrumented supersede binary only\n\t                                package, exmode, fuzzmod = p, xmod, fmod\n\t                            else:\n\t                                pass  # Program is suitable but we already had found a PERSISTENT one\n\t                    else:\n\t                        package, exmode, fuzzmod = p, xmod, fmod  # first suitable program found\n", "            if not package:  # If still no program was found continue iterating engines\n\t                continue\n\t            # Valid engine and suitable program found\n\t            engine = eng_desc\n\t            # Find a configuration to use for that engine\n\t            engine_args = self._find_configuration(engine)\n\t            covmode = self._find_coverage_mode(engine, engine_args)\n\t            # If got here a suitable program has been found just break loop\n\t            break\n\t        if engine is None or package is None:\n", "            logging.critical(f\"No suitable engine or program was found for client {client.strid} {client.engines}\")\n\t            return\n\t        if self.ck_mode == CheckMode.ALERT_ONE:\n\t            if package.is_quokka():\n\t                targets = self._slicing_ongoing[package.name]\n\t                sorted_targets = sorted(targets, key=lambda k: len(targets[k]), reverse=False)  # sort alert addresses by number of client instances working on it\n\t                if sorted_targets:\n\t                    addr = sorted_targets[0]\n\t                    targets[addr].append(client)\n\t                    client.target = addr   # keep the target on which the client is working on\n", "                    client.target_validated = False\n\t                    # Now twist the config to transmit it to the client\n\t                    engine_args = engine.config_class.new() if engine_args is None else engine_args\n\t                    engine_args.set_target(addr)\n\t                    logging.info(f\"will start client {client.strid} to target 0x{addr:x}\")\n\t                else:\n\t                    logging.error(f\"No alert target for binary package {package.name}\")\n\t            else:\n\t                logging.error(f\"In mode {self.ck_mode} but the binary package is not a QBinExport\")\n\t                return\n", "        # Update internal client info and send him the message\n\t        engine_args_str = engine_args.to_str() if engine_args else \"\"\n\t        logging.info(f\"send start client {client.id}: {package.name} [{engine.NAME}, {covmode.name}, {fuzzmod.name}, {exmode.name}]\")\n\t        client.set_running(package.name, engine, covmode, exmode, self.ck_mode, engine_args_str)\n\t        client.configure_logger(self.workspace.log_directory, random.choice(COLORS))  # Assign custom color client\n\t        self.send_start(client.netid,\n\t                        package.name,\n\t                        package.executable_path if package.is_standalone() else package.make_package(),\n\t                        self.argv,\n\t                        exmode,\n", "                        fuzzmod,\n\t                        self.ck_mode,\n\t                        covmode,\n\t                        FuzzingEngineInfo(engine.NAME, engine.VERSION, \"\"),\n\t                        engine_args_str,\n\t                        self.inject,\n\t                        self.sast_report.to_json() if self.sast_report else b\"\")\n\t    def _find_configuration(self, engine: FuzzingEngineDescriptor) -> Optional[EngineConfiguration]:\n\t        \"\"\"\n\t        Find a configuration for the engine. It will iterate all configuration\n", "        available or automatically balance de configuration if there is multiple of\n\t        them\n\t        :param engine:\n\t        :return:\n\t        \"\"\"\n\t        confs = self.engines_args[engine.NAME]\n\t        if confs:\n\t            if len(confs) == 1:\n\t                return confs[0]\n\t            else:\n", "                conf = confs.pop(0)\n\t                confs.append(conf)  # Rotate the configuration\n\t                return conf\n\t        else:\n\t            return None\n\t    def _find_coverage_mode(self, engine: FuzzingEngineDescriptor, conf: Union[EngineConfiguration]) -> CoverageMode:\n\t        # Get coverage modes supported by the engine\n\t        supported_mods = engine.supported_coverage_strategies()\n\t        # Now that program have been found select coverage strategy\n\t        if len(supported_mods) > 1:\n", "            if conf:  # In the case we wanted to launch engines with specific configuration\n\t                return conf.get_coverage_mode()    # return the appropriate coverage mode in that configuration\n\t            else:\n\t                # auto-balance the CoverageMode instances\n\t                covs = Counter({c: 0 for c in supported_mods})\n\t                # Count how many times each coverage strategies have been launched\n\t                covs.update(x.coverage_mode for x in self.clients.values() if x.is_running() and x.engine == engine)\n\t                if sum(covs.values()) == 0:  # No configuration has been triggered yet\n\t                    if CoverageMode.EDGE in supported_mods:  # launch preferably edge first\n\t                        return CoverageMode.EDGE\n", "                    else:\n\t                        return supported_mods[0]  # Return first supported mode\n\t                reverted = {v: k for k, v in covs.items()}  # Revert dictionnary to have freq -> covmodes\n\t                return reverted[min(reverted)]  # Select mode if least instances\n\t        else:\n\t            return supported_mods[0]\n\t    def start(self, running: bool = True):\n\t        super(PastisBroker, self).start()  # Start the listening thread\n\t        self._start_time = time.time()\n\t        self._running = running\n", "        self.workspace.status = WorkspaceStatus.RUNNING\n\t        logging.info(\"start broking\")\n\t        if self._coverage_manager:  # if it has been instanciated start it\n\t            self._coverage_manager.start()\n\t            for seed in self._init_seed_pool.keys():  # Push initial corpus to set baseline coverage\n\t                fname = self.mk_input_name(\"INITIAL\", seed)\n\t                sp = fname.split(\"_\")\n\t                covi = ClientInput(seed, \"\", f\"{sp[0]}_{sp[1]}\", sp[2], sp[4], fname, SeedType.INPUT, b\"INITIAL\", \"INITIAL\", \"GRANTED\", \"\", -1, [])\n\t                self._coverage_manager.push_input(covi)\n\t        if self.is_proxied and self._proxy_cli:\n", "            self._running = False  # disable running wait start broker\n\t            self._proxy.send_hello([self._proxy_cli])\n\t        else:\n\t            # Send the start message to all clients (already connected)\n\t            if self._running:  # If we want to run now (cmdline mode)\n\t                self.start_pending_clients()\n\t    def run(self, timeout: int = None):\n\t        self.start()\n\t        last_t = time.time()\n\t        # Start infinite loop\n", "        try:\n\t            while True:\n\t                time.sleep(0.05)\n\t                t = time.time()\n\t                # Check if the campaign have to be stopped\n\t                if timeout is not None:\n\t                    if t > (self._start_time + timeout):\n\t                        logging.info(\"Campaign timeout reached, stop campaign.\")\n\t                        self._stop = True\n\t                if t > (last_t + 60):  # only check every minute\n", "                    last_t = t\n\t                    if not self._check_memory_usage():\n\t                        # The machine starts being overloaded\n\t                        # For security kill triton instance\n\t                        for cli in list(self.clients.values()):\n\t                            if cli.engine.SHORT_NAME == \"TT\":  # is triton\n\t                                self.kick_client(cli.netid)\n\t                # if inputs are filtered. Get granted inputs and forward them to appropriate clients\n\t                if self.filter_inputs:\n\t                    for item in self._coverage_manager.iter_granted_inputs():\n", "                        self.seed_granted(item.fuzzer_id, item.seed_status, item.content)\n\t                # Check if we received the start signal from the proxy-master\n\t                if self._proxy_start_signal:\n\t                    self._proxy_start_signal = False\n\t                    self.start_pending_clients()\n\t                # Check if there are seed coming from the proxy-master to forward to clients\n\t                if not self._proxy_seed_queue.empty():\n\t                    try:\n\t                        while True:\n\t                            origin, typ, seed = self._proxy_seed_queue.get_nowait()\n", "                            self.send_seed_to_all_others(origin, typ, seed)\n\t                    except queue.Empty:\n\t                        pass\n\t                if self._stop:\n\t                    logging.info(\"broker terminate\")\n\t                    break\n\t        except KeyboardInterrupt:\n\t            logging.info(\"stop required (Ctrl+C)\")\n\t        self.workspace.status = WorkspaceStatus.FINISHED\n\t        self.stop_broker()\n", "    def _find_binaries(self, binaries_dir) -> None:\n\t        \"\"\"\n\t        Iterate the whole directory to find suitables binaries in the\n\t        various architecture, and compiled for the various engines.\n\t        :param binaries_dir: directory containing the various binaries\n\t        :return: None\n\t        \"\"\"\n\t        d = Path(binaries_dir)\n\t        for file in d.iterdir():\n\t            if file.is_file():\n", "                try:\n\t                    pkg = BinaryPackage.auto(file)  # try creating a package\n\t                except ValueError:  # if not an executable\n\t                    continue\n\t                if pkg is None:\n\t                    continue\n\t                # Check that we can find a Quokka file associated otherwise reject it\n\t                if self.ck_mode == CheckMode.ALERT_ONE:\n\t                    if pkg.is_quokka():\n\t                        try:\n", "                            # Instanciate the Quokka Program and monkey patch object\n\t                            quokka_prog = QuokkaProgram(pkg.quokka, pkg.executable_path)\n\t                            f = quokka_prog.get_function(\"__sast_alert_placeholder\")\n\t                            self._slicing_ongoing[file.name] = {x: [] for x in quokka_prog.get_caller_instructions(f)}\n\t                        except ValueError:\n\t                            logging.warning(f\"can't find placeholder file in {file.name}, thus ignores it.\")\n\t                            continue\n\t                    else:\n\t                        logging.warning(f\"{file.name} executable found but no QBinExport file associated (ignores it)\")\n\t                        continue\n", "                logging.info(f\"new binary detected [{pkg.platform.name}, {pkg.arch.name}]: {file}\")\n\t                # Add it in the internal structure\n\t                data = (pkg.platform, pkg.arch)\n\t                data2 = (Platform.ANY, pkg.arch)\n\t                if data not in self.programs:\n\t                    self.programs[data] = []\n\t                if data2 not in self.programs:\n\t                    self.programs[data2] = []\n\t                self.programs[data].append(pkg)\n\t                self.programs[data2].append(pkg)  # Also add an entry for any platform\n", "    def _load_workspace(self):\n\t        \"\"\" Load all the seeds in the workspace\"\"\"\n\t        for typ in list(SeedType):  # iter seed types: input, crash, hang..\n\t            for file in self.workspace.iter_corpus_directory(typ):\n\t                logging.debug(f\"Load seed in pool: {file.name}\")\n\t                content = file.read_bytes()\n\t                self._seed_pool[content] = typ\n\t        # TODO: Also dumping the current state to a file in case\n\t        # TODO: of exit. And being able to reload it. (not to resend all seeds to clients)\n\t    def add_engine_configuration(self, name: str, config_file: PathLike):\n", "        if name in self.engines_args:\n\t            engine = self.engines[name]\n\t            conf = engine.config_class.from_file(config_file)\n\t            self.engines_args[name].append(conf)\n\t        else:\n\t            logging.error(f\"can't find engine {name} (shall preload it to add a configuration)\")\n\t    def _configure_logging(self):\n\t        hldr = logging.FileHandler(self.workspace.broker_log_file)\n\t        hldr.setLevel(logging.root.level)\n\t        hldr.setFormatter(logging.Formatter(\"%(asctime)s [%(name)s] [%(levelname)s]: %(message)s\"))\n", "        logging.root.addHandler(hldr)\n\t    def _colored_seed_type(self, typ: SeedType) -> str:\n\t        mapper = {SeedType.INPUT: Bcolors.OKBLUE,\n\t                  SeedType.HANG: Bcolors.WARNING,\n\t                  SeedType.CRASH: Bcolors.FAIL}\n\t        return mapper[typ]+typ.name+Bcolors.ENDC\n\t    def _colored_seed_newness(self, is_new: bool) -> str:\n\t        col, text = {True: (Bcolors.OKGREEN, \"NEW\"),\n\t                     False: (Bcolors.WARNING, \"DUP\")}[is_new]\n\t        return col+text+Bcolors.ENDC\n", "    def _save_alert_seed(self, from_cli: PastisClient, alert: AlertData):\n\t        t = time.strftime(\"%Y-%m-%d_%H:%M:%S\", time.localtime())\n\t        elapsed = str(datetime.timedelta(seconds=time.time()-self._start_time)).replace(\" day, \", \"d:\").replace(\" days, \", \"d:\")\n\t        fname = f\"{t}_{elapsed}_{from_cli.strid}_{md5(alert.seed).hexdigest()}-{'CRASH' if alert.validated else 'COVERAGE'}.cov\"\n\t        logging.debug(f\"Save alert  [{alert.id}] file: {fname}\")\n\t        self.workspace.save_alert_seed(alert.id, fname, alert.seed)\n\t    def _check_memory_usage(self) -> bool:\n\t        mem = psutil.virtual_memory()\n\t        logging.info(f\"RAM usage: {mem.percent:.2f}%\")\n\t        if mem.percent >= self._threshold:\n", "            logging.warning(f\"Threshold reached: {mem.percent}%\")\n\t            return False\n\t        return True\n\t    @property\n\t    def is_proxied(self) -> bool:\n\t        \"\"\"\n\t        Get if the broker as a proxy to another broker.\n\t        \"\"\"\n\t        return self._proxy is not None\n\t    def set_proxy(self, ip: str, port: int, py_module: str) -> bool:\n", "        self._proxy = ClientAgent()\n\t        # Load the engine info to impersonate\n\t        desc = load_engine_descriptor(py_module)\n\t        if desc is None:\n\t            logging.error(\"Cannot load FuzzingEngineDescriptor\")\n\t            return False\n\t        else:\n\t            self._proxy_cli = FuzzingEngineInfo(desc.NAME, desc.VERSION, py_module)\n\t        self._proxy.register_start_callback(self._proxy_start_received)\n\t        self._proxy.register_seed_callback(self._proxy_seed_received)\n", "        self._proxy.register_stop_callback(self._proxy_stop_received)\n\t        logging.info(f\"connect to broker {ip}:{port}\")\n\t        self._proxy.connect(ip, port)\n\t        self._proxy.start()\n\t    def _proxy_start_received(self, fname: str, binary: bytes, engine: FuzzingEngineInfo, exmode: ExecMode,\n\t                              fuzzmode: FuzzMode, chkmode: CheckMode, covmode: CoverageMode, seed_inj: SeedInjectLoc,\n\t                              engine_args: str, argv: List[str], sast_report: str = None):\n\t        # FIXME: Use parameters received\n\t        logging.info(\"[PROXY] start received !\")\n\t        self._running = True\n", "        # if self._running:\n\t        #     self.start_pending_clients()\n\t    def _proxy_seed_received(self, typ: SeedType, seed: bytes):\n\t        # Forward the seed to underlying clients\n\t        logging.info(f\"[PROXY] seed {typ.name} received forward to agents\")\n\t        # Save the seed locally\n\t        self.write_seed(typ, \"PROXY\", seed)\n\t        self._seed_pool[seed] = typ  # add it to the pool\n\t        self._init_seed_pool[seed] = typ  # also consider it as initial corpus\n\t        # Forward it to all clients\n", "        self._proxy_seed_queue.put((b\"PROXY\", typ, seed))\n\t        # self.send_seed_to_all_others(b\"PROXY\", typ, seed)\n\t    def _proxy_stop_received(self):\n\t        logging.info(f\"[PROXY] stop received!\")\n\t        self._stop = True\n"]}
{"filename": "pastisbroker/__init__.py", "chunked_list": ["from .broker import PastisBroker, BrokingMode\n\t__version__ = \"1.0.0\"\n"]}
{"filename": "pastisbroker/coverage.py", "chunked_list": ["#!/usr/bin/env python3\n\timport time\n\timport logging\n\timport tempfile\n\timport os\n\timport subprocess\n\tfrom typing import Generator\n\tfrom pathlib import Path\n\timport queue\n\timport csv\n", "from dataclasses import dataclass\n\tfrom threading import Thread\n\tfrom multiprocessing import Queue, Manager\n\tfrom multiprocessing.pool import Pool\n\tfrom libpastis.types import SeedType, SeedInjectLoc\n\t# tritondse imports\n\tfrom tritondse import GlobalCoverage, CoverageSingleRun, CoverageStrategy, BranchSolvingStrategy\n\tfrom tritondse.trace import QBDITrace, TraceException\n\tfrom pastisbroker.utils import Bcolors, mk_color\n\t@dataclass\n", "class ClientInput:\n\t    content: bytes          # Content of the input\n\t    log_time: str           # Time the log has been generated\n\t    recv_time: str          # Time the input has been received\n\t    elapsed: str            # Elapsed time since the begining\n\t    hash: str               # Input hash\n\t    path: str               # Input file path\n\t    seed_status: SeedType   # Status of the seed\n\t    fuzzer_id: bytes        # Fuzzer ID\n\t    fuzzer_name: str        # Fuzzer name\n", "    broker_status: str      # Status in: DUPLICATE, DROPPED, GRANTED\n\t    replay_status: str      # Status in: OK, TRACE_EXCEPTION, FAIL\n\t    replay_time: float      # Time taken for the replay\n\t    new_coverage: list[tuple[int, int]]  # New items covered\n\tclass CoverageManager(object):\n\t    ARGV_PLACEHOLDER = \"@@\"\n\t    STRATEGY = CoverageStrategy.EDGE\n\t    def __init__(self, pool_size: int, filter: bool, program: str, args: list[str], inj_loc: SeedInjectLoc, stream_file: str = \"\"):\n\t        # Base info for replay\n\t        self.pool_size = pool_size\n", "        self.filter_enabled = filter\n\t        self.program = str(program)\n\t        self.args = args\n\t        self.inj_loc = inj_loc\n\t        # Coverage and messaging attributes\n\t        self._coverage = GlobalCoverage(self.STRATEGY, BranchSolvingStrategy.ALL_NOT_COVERED)\n\t        self._manager = Manager()\n\t        self.input_queue = self._manager.Queue()\n\t        self.cov_queue = self._manager.Queue()\n\t        self.granted_queue = self._manager.Queue()\n", "        # Pool of workers\n\t        self.pool = Pool(self.pool_size)\n\t        self._running = False\n\t        self.cov_worker = Thread(name=\"[coverage_worker]\", target=self.coverage_worker)\n\t        # stats\n\t        self.seeds_accepted, self.seeds_submitted = 0, 0\n\t        self.cli_stats = {}\n\t        # Streaming\n\t        if stream_file:\n\t            self.stream_file = open(stream_file, \"a\")\n", "            self.csv = csv.writer(self.stream_file)\n\t        else:\n\t            self.stream_file, self.csv = None, None\n\t    def start(self) -> None:\n\t        \"\"\"\n\t        Start all the workers\n\t        \"\"\"\n\t        # First start the coverage worker\n\t        self._running = True\n\t        self.cov_worker.start()\n", "        logging.info(\"Starting coverage manager\")\n\t        for work_id in range(self.pool_size):\n\t            self.pool.apply_async(self.worker, (self.input_queue, self.cov_queue, self.program, self.args, self.inj_loc))\n\t    def stop(self) -> None:\n\t        self._running = False\n\t        self.cov_worker.join()\n\t        self.pool.terminate()\n\t    def push_input(self, cli_input: ClientInput) -> None:\n\t        \"\"\" Push the input in the \"\"\"\n\t        cli_input.log_time = time.strftime(\"%Y-%m-%d_%H:%M:%S\", time.localtime())\n", "        # logging.info(f\"push input {str(cli_input)[:50]}\")\n\t        # Update stats\n\t        self.seeds_submitted += 1\n\t        if cli_input.fuzzer_id in self.cli_stats:\n\t            self.cli_stats[cli_input.fuzzer_id][0] += 1\n\t        else:\n\t            self.cli_stats[cli_input.fuzzer_id] = [1, 0]\n\t        self.input_queue.put(cli_input)\n\t    def iter_granted_inputs(self) -> Generator[ClientInput, None, None]:\n\t        try:\n", "            while True:\n\t                yield self.granted_queue.get_nowait()\n\t        except queue.Empty:\n\t            pass\n\t    @staticmethod\n\t    def worker_sleep(q, n) -> None:\n\t        \"\"\"\n\t        worker thread that unstack inputs and replay them.\n\t        \"\"\"\n\t        time.sleep(n)\n", "        q.put_nowait(n)\n\t        return n\n\t    def add_item_coverage_stream(self, item: ClientInput) -> None:\n\t        if self.stream_file:  # Stream enabled\n\t            self.csv.writerow([\n\t                item.log_time,\n\t                item.recv_time,\n\t                item.elapsed,\n\t                item.hash,\n\t                item.path,\n", "                item.seed_status.name,\n\t                item.fuzzer_name,\n\t                item.broker_status,\n\t                item.replay_status,\n\t                f\"{item.replay_time:.2f}\",\n\t                item.new_coverage\n\t            ])\n\t            self.stream_file.flush()\n\t    def coverage_worker(self):\n\t        while self._running:\n", "            try:\n\t                item, cov_file = self.cov_queue.get(timeout=0.5)\n\t                # logging.info(\"Coverage worker fetch item\")\n\t                new_items = []\n\t                try:\n\t                    coverage: CoverageSingleRun = QBDITrace.from_file(cov_file).coverage\n\t                    if self._coverage.improve_coverage(coverage):\n\t                        self.cli_stats[item.fuzzer_id][1] += 1  # input accepted\n\t                        self.seeds_accepted += 1\n\t                        # Get newly covered items (and put them in the stream queue\n", "                        new_items = coverage.difference(self._coverage)\n\t                        item.new_coverage = list(new_items)\n\t                        # logging.info(f\"seed {item.hash}  ({item.fuzzer_name}) [replay:{}][status:{}] ({len(new_items)} new edges)\")\n\t                        # Update the global coverage\n\t                        self._coverage.merge(coverage)\n\t                        if item.fuzzer_name != \"INITIAL\":  # if not initial corpus and granted\n\t                            self.granted_queue.put(item)\n\t                    else:\n\t                        item.broker_status = \"DROPPED\" if self.filter_enabled else \"GRANTED\"\n\t                        # logging.info(f\"seed {item.hash} ({item.seed_status.name}) of {item.fuzzer_name} rejected (do not improve coverage)\")\n", "                    # Remove the coverage file\n\t                    os.unlink(cov_file)\n\t                except FileNotFoundError:\n\t                    if item.seed_status == SeedType.INPUT:\n\t                        logging.warning(f\"seed {item.hash}({item.seed_status}) can't load coverage file (maybe had crashed?)\")\n\t                    else:\n\t                        logging.info(f\"seed {item.hash}({item.seed_status}) cannot get coverage (normal..)\")\n\t                    # Grant input\n\t                    self.seeds_accepted += 1\n\t                    self.granted_queue.put(item)\n", "                logging.info(f\"seed {item.hash} ({item.fuzzer_name}) [replay:{self.mk_rpl_status(item.replay_status)}][status:{self.mk_broker_status(item.broker_status, bool(new_items))}] ({len(new_items)} new edges)\")\n\t                # Regardless if it was a success or not log it\n\t                self.add_item_coverage_stream(item)\n\t            except queue.Empty:\n\t                pass\n\t            except KeyboardInterrupt:\n\t                self._running = False\n\t                logging.info(\"coverage worker stop\")\n\t                break\n\t    @staticmethod\n", "    def mk_rpl_status(status: str) -> str:\n\t        if status == \"SUCCESS\":\n\t            return mk_color(status, Bcolors.OKGREEN)\n\t        else:\n\t            return mk_color(status, Bcolors.FAIL)\n\t    @staticmethod\n\t    def mk_broker_status(status: str, new_items: bool) -> str:\n\t        if status == \"GRANTED\":\n\t            return mk_color(status, Bcolors.OKGREEN if new_items else Bcolors.WARNING)\n\t        elif status == \"DROPPED\":\n", "            return mk_color(status, Bcolors.WARNING)\n\t        else:\n\t            return mk_color(status, Bcolors.FAIL)\n\t    @staticmethod\n\t    def worker(input_queue: Queue, cov_queue: Queue, program: str, argv: list[str], seed_inj: SeedInjectLoc) -> None:\n\t        \"\"\"\n\t        worker thread that unstack inputs and replay them.\n\t        \"\"\"\n\t        tmpfile = Path(tempfile.mktemp(suffix=f\"{os.getpid()}.input\"))\n\t        pid = os.getpid()\n", "        try:\n\t            while True:\n\t                item: ClientInput = input_queue.get()\n\t                # logging.debug(f\"Worker {os.getpid()} fetch: {str(item)[:50]}\")\n\t                # Write inputs in our tempfile\n\t                tmpfile.write_bytes(item.content)\n\t                # Create to coverage file\n\t                cov_file = tempfile.mktemp(f\"_{item.hash}.cov\")\n\t                # Adjust injection location before calling QBDITrace\n\t                cur_argv = argv[:]\n", "                if seed_inj == SeedInjectLoc.ARGV:  # Try to replace the placeholder with filename\n\t                    try:\n\t                        # Replace 'input_file' in argv with the temporary file name created\n\t                        idx = cur_argv.index(CoverageManager.ARGV_PLACEHOLDER)\n\t                        cur_argv[idx] = str(tmpfile)\n\t                    except ValueError as e:\n\t                        logging.error(f\"seed injection {seed_inj.name} but can't find '@@' on program argv: {argv}: {e}\")\n\t                        continue\n\t                try:\n\t                    # Run the seed\n", "                    t0 = time.time()\n\t                    if QBDITrace.run(CoverageManager.STRATEGY,\n\t                                     program,\n\t                                     cur_argv,  # argv[1:] if len(argv) > 1 else [],\n\t                                     output_path=str(cov_file),\n\t                                     stdin_file=str(tmpfile) if seed_inj == SeedInjectLoc.STDIN else None,\n\t                                     cwd=Path(program).parent,\n\t                                     timeout=60):\n\t                        item.replay_time = time.time() - t0\n\t                        item.replay_status = \"SUCCESS\"\n", "                        # logging.info(f\"[worker-{pid}] replaying {item.hash} sucessful\")\n\t                    else:\n\t                        item.replay_status = \"FAIL_NO_COV\"\n\t                        logging.warning(\"Cannot load the coverage file generated (maybe had crashed?)\")\n\t                except TraceException:\n\t                    item.replay_status = \"FAIL_TIMEOUT\"\n\t                    logging.warning('Timeout hit, while trying to re-run the seed')\n\t                # Add it to the coverage queue (even if it failed\n\t                cov_queue.put((item, cov_file))\n\t        except KeyboardInterrupt:\n", "            pass\n\t            # logging.info(f\"replay worker {os.getpid()}, stops (keyboard interrupt)\")\n"]}
{"filename": "pastisbroker/utils.py", "chunked_list": ["#built-in imports\n\timport logging\n\tfrom typing import Optional\n\timport importlib\n\timport inspect\n\tfrom libpastis.enginedesc import FuzzingEngineDescriptor\n\tHF_PERSISTENT_SIG = b\"\\x01_LIBHFUZZ_PERSISTENT_BINARY_SIGNATURE_\\x02\\xFF\"\n\tdef load_engine_descriptor(py_module: str) -> Optional[FuzzingEngineDescriptor]:\n\t    try:\n\t        mod = importlib.import_module(py_module)\n", "        mems = inspect.getmembers(mod, lambda x: inspect.isclass(x) and issubclass(x, FuzzingEngineDescriptor) and x != FuzzingEngineDescriptor)\n\t        if not mems:\n\t            logging.error(f\"can't find FuzzingEngineDescriptor in module {py_module}\")\n\t            return None\n\t        else:\n\t            if len(mems) > 1:\n\t                logging.warning(f\"module {py_module} contain multiple subclass of {FuzzingEngineDescriptor} (take first)\")\n\t            return mems[0][1]\n\t    except ImportError:\n\t        logging.error(f\"cannot import py_module: {py_module}\")\n", "COLORS = [32, 33, 34, 35, 36, 37, 39, 91, 93, 94, 95, 96]\n\tclass Bcolors:\n\t    HEADER = '\\033[95m'\n\t    OKBLUE = '\\033[94m'\n\t    OKCYAN = '\\033[96m'\n\t    OKGREEN = '\\033[92m'\n\t    WARNING = '\\033[93m'\n\t    FAIL = '\\033[91m'\n\t    ENDC = '\\033[0m'\n\t    BOLD = '\\033[1m'\n", "    UNDERLINE = '\\033[4m'\n\tdef mk_color(text: str, color: str) -> str:\n\t    return color+text+Bcolors.ENDC\n"]}
{"filename": "pastisbroker/stat_manager.py", "chunked_list": ["# Built-in imports\n\timport time\n\tfrom pathlib import Path\n\timport csv\n\timport json\n\tfrom typing import List\n\t# Third-party importq\n\tfrom libpastis.types import SeedType\n\t# Local imports\n\tfrom pastisbroker.client import PastisClient\n", "from pastisbroker.workspace import Workspace\n\tclass StatManager(object):\n\t    \"\"\"\n\t    Keeps temporal statistics to plot them.\n\t    \"\"\"\n\t    def __init__(self, workspace: Workspace):\n\t        # Configure CSV writer that will write stats\n\t        names = ['date', 'id', 'exec_per_sec', 'total_exec', 'cycle', 'timeout', 'block', 'edge', 'path', 'last_cov_update']\n\t        self._tel_file = open(workspace.telemetry_file, \"w\")\n\t        self.writer = csv.DictWriter(self._tel_file, fieldnames=names)\n", "        self.writer.writeheader()\n\t    def update_seed_stat(self, client: PastisClient, typ: SeedType) -> None:\n\t        t = time.localtime()\n\t        if typ == SeedType.INPUT:\n\t            client.input_submitted_count += 1\n\t            client._timeline_seeds.append((t, client.input_submitted_count, typ))\n\t        elif typ == SeedType.CRASH:\n\t            client.crash_submitted_count += 1\n\t            client._timeline_seeds.append((t, client.crash_submitted_count, typ))\n\t        elif typ == SeedType.HANG:\n", "            client.timeout_submitted_count += 1\n\t            client._timeline_seeds.append((t, client.timeout_submitted_count, typ))\n\t        else:\n\t            assert False\n\t        client.seed_first += 1\n\t    def set_exec_per_sec(self, client: PastisClient, exec_per_sec: int = None):\n\t        if exec_per_sec is not None:\n\t            client.exec_per_sec = exec_per_sec  # instantaneous value does not keep history\n\t    def set_total_exec(self, client: PastisClient, total_exec: int = None):\n\t        if total_exec is not None:\n", "            client.total_exec = total_exec  # instantaneous value does not keep history\n\t    def set_cycle(self, client: PastisClient, cycle: int = None):\n\t        if cycle is not None:\n\t            client.cycle = cycle  # instantaneous value does not keep history\n\t    def set_timeout(self, client: PastisClient, timeout: int = None):\n\t        if timeout is not None:\n\t            client.timeout = timeout  # instantaneous value does not keep history\n\t    def set_coverage_block(self, client: PastisClient, coverage: int = None):\n\t        if coverage is not None:\n\t            client.coverage_block = coverage\n", "    def set_coverage_edge(self, client: PastisClient, coverage: int = None):\n\t        if coverage is not None:\n\t            client.coverage_edge = coverage\n\t    def set_coverage_path(self, client: PastisClient, coverage: int = None):\n\t        if coverage is not None:\n\t            client.coverage_path = coverage\n\t    @staticmethod\n\t    def set_last_coverage_update(client: PastisClient, last_up: int = None):\n\t        if last_up is not None:\n\t            client.last_cov_update = last_up  # instantaneous value does not keep history\n", "    def update_telemetry_client(self, client: PastisClient):\n\t        self.writer.writerow({\n\t            'date': time.time(),\n\t            'id': client.strid,\n\t            'exec_per_sec': client.exec_per_sec,\n\t            'total_exec': client.total_exec,\n\t            'cycle': client.cycle,\n\t            'timeout': client.timeout,\n\t            'block': client.coverage_block,\n\t            'edge': client.coverage_edge,\n", "            'path': client.coverage_path,\n\t            'last_cov_update': client.last_cov_update\n\t        })\n\t    def post_execution(self, clients: List[PastisClient], workspace: Workspace) -> None:\n\t        \"\"\"\n\t        Called at the end of the execution. Export\n\t        :return: None\n\t        \"\"\"\n\t        self._tel_file.flush()  # Flush the csv if it has not been\n\t        with open(workspace.clients_stat_file, \"w\") as f:\n", "            json.dump([cli.to_dict() for cli in clients if cli.is_running()], f, indent=2)\n"]}
{"filename": "pastisbroker/dashboard.py", "chunked_list": []}
