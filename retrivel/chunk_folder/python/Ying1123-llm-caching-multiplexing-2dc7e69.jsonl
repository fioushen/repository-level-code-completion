{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\tsetup(\n\t    name=\"inferband\",\n\t    packages=find_packages()\n\t)\n"]}
{"filename": "real_run/xsum.py", "chunked_list": ["# use Open Assistant data: https://huggingface.co/datasets/OpenAssistant/oasst1\n\t# use Flan-T5 3B and 11B: https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/flan-t5#overview\n\timport argparse\n\timport json\n\timport numpy as np\n\timport os\n\timport time\n\timport torch\n\tfrom tqdm import tqdm\n\tfrom datasets import load_dataset\n", "from transformers import AutoModelForSeq2SeqLM, AutoModelForCausalLM, AutoTokenizer\n\tfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\tfrom transformers import OPTForCausalLM\n\tfrom util import get_rouge, get_gpt4_eval\n\tMAX_GPT4_RETRY = 3\n\tdef construct_few_shot_sum(sample1, sample2, sample):\n\t    prompt = \"\"\n\t    prompt += \"### \" + \"document:\\n\" + sample1[\"document\"] + \"\\n\"\n\t    prompt += \"### \" + \"summary:\\n\" + sample1[\"summary\"] + \"\\n\"\n\t    prompt += \"### \" + \"document:\\n\" + sample2[\"document\"] + \"\\n\"\n", "    prompt += \"### \" + \"summary:\\n\" + sample2[\"summary\"] + \"\\n\"\n\t    prompt += \"### \" + \"document:\\n\" + sample[\"document\"] + \"\\n\"\n\t    prompt += \"### \" + \"summary:\\n\"\n\t    return prompt\n\tdef extract_answer(output):\n\t    p = output.find(\"###\")\n\t    if p > 0:\n\t        return output[:p]\n\t    return output\n\tdef get_prompts(n):\n", "    ds = load_dataset(\"xsum\")\n\t    test = ds[\"test\"]\n\t    prompts = []\n\t    for i in tqdm(range(n)):\n\t        prompt = {}\n\t        prompt[\"id\"] = test[i][\"id\"]\n\t        prompt[\"article\"] = test[i][\"document\"]\n\t        r1 = np.random.randint(0, len(test))\n\t        r2 = np.random.randint(0, len(test))\n\t        prompt[\"prompt\"] = construct_few_shot_sum(test[r1], test[r2], test[i])\n", "        prompt[\"gt_summary\"] = test[i][\"summary\"]\n\t        prompts.append(prompt)\n\t    return prompts\n\tdef get_model_outputs(model_name, prompts_path):\n\t    print(f\"loading {model_name} ...\")\n\t    kwargs = {\"torch_dtype\": torch.float16}\n\t    if \"facebook/opt\" in model_name:\n\t        tokenizer = AutoTokenizer.from_pretrained(model_name)\n\t        model = OPTForCausalLM.from_pretrained(\n\t            model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n", "    elif \"llama\" in model_name:\n\t        tokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=False)\n\t        model = AutoModelForCausalLM.from_pretrained(\n\t            model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n\t    else:\n\t        raise Exception(\"Unsupported model\")\n\t    print(f\"{model_name} loaded.\")\n\t    with open(prompts_path, \"r\") as f:\n\t        prompts_json = json.load(f)\n\t    prompts = prompts_json[\"prompts\"]\n", "    print(\"number of queries\", len(prompts))\n\t    inputs = []\n\t    for prompt in prompts:\n\t        input_ids = tokenizer(prompt[\"prompt\"], return_tensors=\"pt\").input_ids.cuda()\n\t        if len(input_ids[0]) < 1500:\n\t            inputs.append(input_ids)\n\t    print(f\"tokenization finished.\")\n\t    # warmup\n\t    warmup_num = 10\n\t    pbar = tqdm(total=warmup_num, desc=\"warmup\")\n", "    start = time.time()\n\t    for input_ids in inputs[:warmup_num]:\n\t        model.generate(input_ids, max_new_tokens=64)\n\t        pbar.update(1)\n\t        if time.time() - start > 4:\n\t            break\n\t    pbar.close()\n\t    # inference\n\t    outputs = {\"model_name\": model_name,\n\t               \"query_path\": prompts_path,\n", "               \"samples\": [],\n\t              }\n\t    pbar = tqdm(total=len(inputs), desc=\"Finished queries\")\n\t    start = time.time()\n\t    for i, input_ids in enumerate(inputs):\n\t        tic = time.time()\n\t        output_ids = model.generate(input_ids, max_new_tokens=128)\n\t        duration = time.time() - tic\n\t        output = tokenizer.decode(output_ids[0][len(input_ids[0]):], skip_special_tokens=True)\n\t        output = extract_answer(output)\n", "        sample = {\"id\": prompts[i][\"id\"],\n\t                  \"query\": prompts[i][\"prompt\"],\n\t                  \"article\": prompts[i][\"article\"],\n\t                  \"output\": output,\n\t                  \"infer_time\": duration,\n\t                  \"gt_summary\": prompts[i][\"gt_summary\"]\n\t                 }\n\t        outputs[\"samples\"].append(sample)\n\t        pbar.update(1)\n\t    pbar.close()\n", "    print(f\"Finish all inference in {time.time() - start:.2f} s.\")\n\t    return outputs\n\tdef get_eval_results(data_file):\n\t    with open(data_file, \"r\") as f:\n\t        data = json.load(f)\n\t    model_name = data[\"model_name\"]\n\t    query_path = data[\"query_path\"]\n\t    samples = data[\"samples\"]\n\t    for sample in samples:\n\t        sample[\"rouge\"] = get_rouge(sample[\"output\"], [sample[\"gt_summary\"]])\n", "        sample[\"gpt4_eval\"] = get_gpt4_eval(sample[\"article\"], sample[\"output\"], \"sum\")\n\t    return data\n\tdef main(args):\n\t    if args.gen_query > 0:\n\t        # get prompts\n\t        prompts_file = os.path.join(args.exp_dir, f\"prompts-{args.gen_query}.json\")\n\t        print(f\"\\n====== generating {args.gen_query} prompts ======\")\n\t        prompts = get_prompts(args.gen_query)\n\t        prompts_json = {\"prompts\": prompts}\n\t        with open(prompts_file, \"w\") as f:\n", "            json.dump(prompts_json, f)\n\t        print(f\"prompts dumped to {prompts_file}\")\n\t    if args.model is not None:\n\t        # get model outputs\n\t        assert args.device is not None, \"device is none.\"\n\t        assert args.query_path is not None, \"query path is none.\"\n\t        args.exp_dir = os.path.join(args.exp_dir, args.device)\n\t        os.makedirs(args.exp_dir, exist_ok=True)\n\t        model_name = args.model.split(\"/\")[-1]\n\t        query_file = args.query_path.split(\"/\")[-1].split(\".\")[0]\n", "        output_file = os.path.join(args.exp_dir, f\"{model_name}_{query_file}_output.json\")\n\t        print(f\"\\n====== run inference for {model_name} on {query_file} ======\")\n\t        outputs = get_model_outputs(args.model, args.query_path)\n\t        with open(output_file, \"w\") as f:\n\t            json.dump(outputs, f)\n\t        print(f\"model output dumped to {output_file}\")\n\t    if args.eval_path is not None:\n\t        eval_file = \".\".join(args.eval_path.split(\".\")[:-1]) + \"_tagged.json\"\n\t        print(f\"\\n====== run gpt4 eval for {args.eval_path} ======\")\n\t        eval_res = get_eval_results(args.eval_path)\n", "        with open(eval_file, \"w\") as f:\n\t            json.dump(eval_res, f)\n\t        print(f\"eval resuts dumped to {eval_file}\")\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--exp-dir\", type=str, default=\"exp/xsum\")\n\t    # generate query\n\t    parser.add_argument(\"--gen-query\", type=int, default=0)\n\t    # generate model output\n\t    parser.add_argument(\"--device\", type=str, default=None)\n", "    parser.add_argument(\"--model\", type=str, default=None)\n\t    parser.add_argument(\"--query-path\", type=str, default=None)\n\t    # generate eval results\n\t    parser.add_argument(\"--eval-path\", type=str, default=None,\n\t                        help=\"The output json file path to get evaluated. \"\n\t                             \"The evaluated file will be named with adding 'tag' in the input file name.\")\n\t    args = parser.parse_args()\n\t    if args.model is not None and \"flan\" in args.model:\n\t        args.model = \"google/\" + args.model\n\t    os.makedirs(args.exp_dir, exist_ok=True)\n", "    tic = time.time()\n\t    main(args)\n\t    print(f\"whole program finished in {time.time() - tic:.2f} s.\")\n"]}
{"filename": "real_run/openai_sum.py", "chunked_list": ["# use Open Assistant data: https://huggingface.co/datasets/OpenAssistant/oasst1\n\t# use Flan-T5 3B and 11B: https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/flan-t5#overview\n\timport argparse\n\tfrom datasets import load_dataset\n\timport json\n\timport os\n\timport time\n\timport torch\n\tfrom tqdm import tqdm\n\tfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer\n", "from transformers import T5Tokenizer, T5ForConditionalGeneration\n\tMAX_GPT4_RETRY = 3\n\tdef construct_few_shot_sum(sample1, sample2, sample):\n\t    prompt = \"\"\n\t    prompt += \"title: \" + sample1[\"info\"][\"title\"] + \"\\n\"\n\t    prompt += \"article:\\n\" + sample1[\"info\"][\"article\"] + \"\\n\"\n\t    prompt += \"summary:\\n\" + sample1[\"summary\"][\"text\"] + \"\\n\\n\"\n\t    prompt += \"title: \" + sample2[\"info\"][\"title\"] + \"\\n\"\n\t    prompt += \"article:\\n\" + sample2[\"info\"][\"article\"] + \"\\n\"\n\t    prompt += \"summary:\\n\" + sample2[\"summary\"][\"text\"] + \"\\n\\n\"\n", "    prompt += \"title: \" + sample[\"info\"][\"title\"] + \"\\n\"\n\t    prompt += \"article:\\n\" + sample[\"info\"][\"article\"] + \"\\n\"\n\t    prompt += \"summary:\\n\"\n\t    print(prompt)\n\t    print(sample1[\"info\"][\"id\"])\n\t    print(sample1[\"info\"][\"id\"])\n\t    print(sample[\"info\"][\"id\"])\n\t    return prompt\n\tdef get_prompts(n):\n\t    ds = load_dataset(\"openai/summarize_from_feedback\", \"axis\")\n", "    test = ds[\"test\"]\n\t    print(test[0].keys())\n\t    print(test[0][\"info\"])\n\t    print()\n\t    print(test[0][\"summary\"])\n\t    prompts = []\n\t    for i in range(2, len(test)):\n\t        prompt = {}\n\t        prompt[\"id\"] = test[i][\"info\"][\"id\"]\n\t        prompt[\"prompt\"] = construct_few_shot_sum(test[0], test[1], test[i])\n", "        exit()\n\t        prompt[\"gt_summary\"] = test[i][\"summary\"][\"text\"]\n\t        prompts.append(prompt)\n\t    return prompts\n\tdef get_model_outputs(model_name, prompts_path):\n\t    print(f\"loading {model_name} ...\")\n\t    kwargs = {\"torch_dtype\": torch.float16}\n\t    model = T5ForConditionalGeneration.from_pretrained(\n\t        model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n\t    tokenizer = T5Tokenizer.from_pretrained(model_name)\n", "    with open(prompts_path, \"r\") as f:\n\t        prompts_json = json.load(f)\n\t    prompts = prompts_json[\"prompts\"]\n\t    print(\"number of queries\", len(prompts))\n\t    inputs = []\n\t    for prompt in prompts:\n\t        inputs.append(tokenizer(prompt[1], return_tensors=\"pt\").input_ids.cuda())\n\t    print(f\"tokenization finished.\")\n\t    # warmup\n\t    warmup_num = 10\n", "    pbar = tqdm(total=warmup_num, desc=\"warmup\")\n\t    start = time.time()\n\t    for input_ids in inputs[:warmup_num]:\n\t        model.generate(input_ids, max_new_tokens=128)\n\t        pbar.update(1)\n\t        if time.time() - start > 4:\n\t            break\n\t    pbar.close()\n\t    # inference\n\t    outputs = {\"model_name\": model_name,\n", "               \"query_path\": prompts_path,\n\t               \"samples\": [],\n\t              }\n\t    pbar = tqdm(total=len(inputs), desc=\"Finished quries\")\n\t    start = time.time()\n\t    for i, input_ids in enumerate(inputs):\n\t        tic = time.time()\n\t        output_ids = model.generate(input_ids, max_new_tokens=128)\n\t        duration = time.time() - tic\n\t        output = tokenizer.decode(output_ids[0], skip_special_tokens=True)\n", "        sample = {\"oasst_message_id\": prompts[i][0],\n\t                  \"query\": prompts[i][1],\n\t                  \"output\": output,\n\t                  \"infer_time\": duration,\n\t                 }\n\t        outputs[\"samples\"].append(sample)\n\t        pbar.update(1)\n\t    pbar.close()\n\t    print(f\"Finish all inference in {time.time() - start:.2f} s.\")\n\t    return outputs\n", "def construct_prompt(sample):\n\t    prompt = \"Below is an user prompt and a model answer. \" \\\n\t             \"Please rate on how much it is likely to be correct and appropriate. \" \\\n\t             \"Print the score in the first line, and which should be in the range of [0, 10]. \" \\\n\t             \"score 0 means the answer is non-sense, score 10 means the answer is perfect.\" \\\n\t             \"In the following lines, please provides the reasons of giving such a score.\"\n\t    prompt += \"User prompt:\\n\"\n\t    prompt += sample[\"query\"] + \"\\n\"\n\t    prompt += \"Model answer:\\n\"\n\t    prompt += sample[\"output\"] + \"\\n\"\n", "    return prompt\n\tdef get_eval_results(data_file):\n\t    import openai\n\t    with open(data_file, \"r\") as f:\n\t        data = json.load(f)\n\t    model_name = data[\"model_name\"]\n\t    query_path = data[\"query_path\"]\n\t    samples = data[\"samples\"]\n\t    print(samples[0])\n\t    for sample in samples:\n", "        prompt = construct_prompt(sample)\n\t        print(\"``` prompt to GPT-4 ```\")\n\t        print(prompt)\n\t        sample[\"gpt4eval\"] = None\n\t        for i in range(MAX_GPT4_RETRY):\n\t            try:\n\t                response = openai.ChatCompletion.create(\n\t                    model=\"gpt-4\",\n\t                    messages=[{\"role\": \"user\", \"content\": prompt}],\n\t                    temperature=0.2,\n", "                    max_tokens=32,\n\t                )\n\t                content = response[\"choices\"][0][\"message\"][\"content\"]\n\t                sample[\"gpt4eval\"] = content\n\t                print(\"``` eval ```\")\n\t                print(content)\n\t                break\n\t            except Exception as e:\n\t                print(e)\n\t                time.sleep(5)\n", "        if sample[\"gpt4eval\"] is None:\n\t            print(f\"Failed after {MAX_GPT4_RETRY} retries.\")\n\t    return data\n\tdef main(args):\n\t    if args.gen_query > 0:\n\t        # get prompts\n\t        prompts_file = os.path.join(args.exp_dir, f\"prompts-{args.gen_query}.json\")\n\t        print(f\"\\n====== generating {args.gen_query} prompts ======\")\n\t        prompts = get_prompts(args.gen_query)\n\t        prompts_json = {\"prompts\": prompts}\n", "        with open(prompts_file, \"w\") as f:\n\t            json.dump(prompts_json, f)\n\t        print(f\"prompts dumped to {prompts_file}\")\n\t    if args.model is not None:\n\t        # get flan-t5 outputs\n\t        assert args.device is not None, \"device is none.\"\n\t        assert args.query_path is not None, \"query path is none.\"\n\t        if args.exp_dir == DEFAULT_EXP_DIR:\n\t            args.exp_dir = os.path.join(args.exp_dir, args.device)\n\t        model_name = args.model.split(\"/\")[-1]\n", "        query_file = args.query_path.split(\"/\")[-1].split(\".\")[0]\n\t        output_file = os.path.join(args.exp_dir, f\"{model_name}_{query_file}_output.json\")\n\t        print(f\"\\n====== run inference for {model_name} on {query_file} ======\")\n\t        outputs = get_model_outputs(args.model, args.query_path)\n\t        with open(output_file, \"w\") as f:\n\t            json.dump(outputs, f)\n\t        print(f\"model output dumped to {output_file}\")\n\t    if args.eval_path is not None:\n\t        eval_file = \".\".join(args.eval_path.split(\".\")[:-1]) + \"_tagged.json\"\n\t        print(f\"\\n====== run gpt4 eval for {args.eval_path} ======\")\n", "        eval_res = get_eval_results(args.eval_path)\n\t        with open(eval_file, \"w\") as f:\n\t            json.dump(eval_res, f)\n\t        print(f\"eval resuts dumped to {eval_file}\")\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--exp-dir\", type=str, default=\"exp/openai_sum\")\n\t    # generate query\n\t    parser.add_argument(\"--gen-query\", type=int, default=0)\n\t    # generate model output\n", "    parser.add_argument(\"--device\", type=str, default=None)\n\t    parser.add_argument(\"--model\", type=str, default=None,\n\t                        choices=[\"flan-t5-small\", \"flan-t5-base\", \"flan-t5-large\",\n\t                                 \"flan-t5-xl\", \"flan-t5-xxl\"],\n\t                        help=\"flan-t5-small: 80M \"\n\t                             \"flan-t5-base: 250M \"\n\t                             \"flan-t5-large: 780M \"\n\t                             \"flan-t5-xl: 3B \"\n\t                             \"flan-t5-xxl: 11B\",\n\t                       )\n", "    parser.add_argument(\"--query-path\", type=str, default=None)\n\t    # generate eval results\n\t    parser.add_argument(\"--eval-path\", type=str, default=None,\n\t                        help=\"The output json file path to get evaluated. \"\n\t                             \"The evaluated file will be named with adding 'tag' in the input file name.\")\n\t    args = parser.parse_args()\n\t    if args.model is not None:\n\t        args.model = \"google/\" + args.model\n\t    os.makedirs(args.exp_dir, exist_ok=True)\n\t    tic = time.time()\n", "    main(args)\n\t    print(f\"whole program finished in {time.time() - tic:.2f} s.\")\n"]}
{"filename": "real_run/util.py", "chunked_list": ["import time\n\timport evaluate\n\tdef get_rouge(prediction, references):\n\t    rouge = evaluate.load(\"rouge\")\n\t    results = rouge.compute(predictions=[prediction],\n\t                            references=[references],\n\t                            use_aggregator=False)\n\t    print(results)\n\t    return results\n\tdef construct_prompt_chat(sample):\n", "    prompt = \"Below is an user prompt and a model answer. \" \\\n\t             \"Please rate on how much it is likely to be correct and appropriate. \" \\\n\t             \"Print the score in the first line, and which should be in the range of [0, 10]. \" \\\n\t             \"score 0 means the answer is non-sense, score 10 means the answer is perfect.\" \\\n\t             \"In the following lines, please provides the reasons of giving such a score.\"\n\t    prompt += \"User prompt:\\n\"\n\t    prompt += sample[\"query\"] + \"\\n\"\n\t    prompt += \"Model answer:\\n\"\n\t    prompt += sample[\"output\"] + \"\\n\"\n\t    return prompt\n", "def construct_prompt(query, output, task):\n\t    # adopted from https://github.com/lm-sys/FastChat/blob/main/fastchat/eval/table/prompt.jsonl\n\t    if task == \"sum\":\n\t        sys_prompt = \"You are a helpful and precise assistant for checking the quality of the summarization of an article.\"\n\t        user_prompt = f'''[Article]\\n{query}\n\t[The Start of the Summarization]\\n{output}\\n[The End of the Summarization]\n\t[System]\n\tWe would like to request your feedback on the quality of the summarization in response to the article displayed above.\\nPlease rate the relevance, accuracy, conciseness of the response. Please give an overall score on a scale of 1 to 10, where a higher score indicates higher overall quality.\\nPlease first output a single line containing only one value indicating the score. In the subsequent line, please provide a comprehensive explanation of your evaluation.\\n\n\t'''\n\t    elif task == \"chat\":\n", "        sys_prompt = \"You are a helpful and precise assistant for checking the quality of the answer.\"\n\t        user_prompt = f'''[Question]\\n{query}\n\t[The Start of the Answer]\\n{output}\\n[The End of the Answer]\n\t[System]\n\tWe would like to request your feedback on the performance of the answer in response to the user question displayed above.\\nPlease rate the helpfulness, relevance, accuracy, level of details of the response. Please give an overall score on a scale of 1 to 10, where a higher score indicates better overall performance.\\nPlease first output a single line containing only one value indicating the score. In the subsequent line, please provide a comprehensive explanation of your evaluation.\\n\n\t'''\n\t    else:\n\t        raise Exception(\"Unrecognized task\")\n\t    return [sys_prompt, user_prompt]\n\tdef extract_score(response):\n", "    p = response.find(\"\\n\")\n\t    score = response[:p]\n\t    exp = response[p + 1:]\n\t    return score, exp\n\tdef get_gpt4_eval(query, output, task):\n\t    import openai\n\t    MAX_GPT4_RETRY = 3\n\t    prompt = construct_prompt(query, output, task)\n\t    print(\"``` prompt to GPT-4 ```\")\n\t    print(prompt)\n", "    ret = {\"score\": None, \"explanation\": None}\n\t    for i in range(MAX_GPT4_RETRY):\n\t        try:\n\t            response = openai.ChatCompletion.create(\n\t                model=\"gpt-4\",\n\t                messages=[\n\t                    {\"role\": \"system\", \"content\": prompt[0]},\n\t                    {\"role\": \"user\", \"content\": prompt[1]}],\n\t                temperature=0.2,\n\t                max_tokens=64,\n", "            )\n\t            content = response[\"choices\"][0][\"message\"][\"content\"]\n\t            ret[\"score\"], ret[\"explanation\"] = extract_score(content)\n\t            print(\"``` eval result ```\")\n\t            print(ret)\n\t            break\n\t        except Exception as e:\n\t            print(e)\n\t            time.sleep(5)\n\t    if ret[\"score\"] is None:\n", "        print(f\"Failed after {MAX_GPT4_RETRY} retries.\")\n\t    return ret\n\tdef is_float(s):\n\t    try:\n\t        float(s)\n\t        return True\n\t    except ValueError:\n\t        return False\n"]}
{"filename": "real_run/merge_lambda.py", "chunked_list": ["\"\"\"\n\tpython3 merge_lambda.py --in result_facebook-opt-1.3b.json result_facebook-opt-13b.json\n\t\"\"\"\n\timport argparse\n\timport json\n\tfrom typing import Dict, Sequence, Optional\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--in-file\", type=str, required=True, nargs=\"+\")\n\t    parser.add_argument(\"--out-file\", type=str, default=\"merged.json\")\n", "    args = parser.parse_args()\n\t    contents = []\n\t    for in_file in args.in_file:\n\t        content = json.load(open(in_file, \"r\"))\n\t        contents.extend(content)\n\t    merged = {}\n\t    for c in contents:\n\t        i = c[\"id\"]\n\t        model_name = list(c[\"records\"].keys())[0]\n\t        if i in merged:\n", "            merged[i][\"records\"][model_name] = c[\"records\"][model_name]\n\t        else:\n\t            merged[i] = c\n\t    values = list(merged.values())\n\t    with open(args.out_file, \"w\") as fout:\n\t        json.dump(values, fout, indent=2)\n"]}
{"filename": "real_run/test.py", "chunked_list": ["from transformers import AutoTokenizer, OPTForCausalLM\n\timport torch\n\tkwargs = {\"torch_dtype\": torch.float16}\n\tmodel = OPTForCausalLM.from_pretrained(\"facebook/opt-350m\", low_cpu_mem_usage=True, **kwargs).cuda()\n\ttokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n\tprompt = \"Hey, are you consciours? Can you talk to me?\"\n\tinputs = tokenizer(prompt, return_tensors=\"pt\")\n\t# Generate\n\tgenerate_ids = model.generate(inputs.input_ids.cuda(), max_length=30)\n\ttokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n"]}
{"filename": "real_run/gen_lambda_data.py", "chunked_list": ["import argparse\n\timport gc\n\timport json\n\timport os\n\tfrom datasets import load_dataset\n\timport torch\n\tfrom torch.nn.functional import pad\n\tfrom transformers.models.opt.modeling_opt import OPTForCausalLM\n\tfrom transformers import GPT2Tokenizer\n\tfrom tqdm import tqdm\n", "class Evaluator:\n\t    def __init__(self, dataset, tokenizer):\n\t        self.dataset = dataset\n\t        self.tokenizer = tokenizer\n\t        # tokenize the dataset\n\t        def tokenize_function(examples):\n\t            example = self.tokenizer(examples[\"text\"])\n\t            return example\n\t        self.dataset = self.dataset.map(tokenize_function, batched=True)\n\t        self.dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"text\"])\n", "    @torch.inference_mode()\n\t    def evaluate(self, model):\n\t        results = [\n\t        ]\n\t        model.eval()\n\t        ct, total_hit = 0, 0\n\t        start = torch.cuda.Event(enable_timing=True)\n\t        end = torch.cuda.Event(enable_timing=True)\n\t        total_latency = 0\n\t        for i, batch in tqdm(enumerate(self.dataset)):\n", "            input_ids = batch[\"input_ids\"].cuda().unsqueeze(0)\n\t            label = input_ids[:, -1]\n\t            pad_len = 512 - input_ids.shape[1]\n\t            input_ids = pad(input_ids, (0, pad_len), value=1)\n\t            torch.cuda.synchronize()\n\t            start.record()\n\t            outputs = model(input_ids)\n\t            end.record()\n\t            torch.cuda.synchronize()\n\t            latency = start.elapsed_time(end)\n", "            total_latency += latency\n\t            last_token_logits = outputs.logits[:, -2-pad_len, :]\n\t            pred = last_token_logits.argmax(dim=-1)\n\t            ct += label.size(0)\n\t            hit = (pred == label).sum().item()\n\t            total_hit += hit\n\t            prompt = batch[\"text\"]\n\t            output = tokenizer.decode(pred)\n\t            label = tokenizer.decode(label)\n\t            results.append(\n", "                {\n\t                    \"id\": i,\n\t                    \"records\": {\n\t                        args.model: [prompt, output, latency, hit, label],\n\t                    }\n\t                }\n\t            )\n\t        acc = total_hit / ct\n\t        return acc, total_latency / len(self.dataset), results\n\tif __name__ == \"__main__\":\n", "    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--model\", type=str, default=\"facebook/opt-1.3b\")\n\t    parser.add_argument(\"--number\", type=int, default=5000)\n\t    args = parser.parse_args()\n\t    tokenizer = GPT2Tokenizer.from_pretrained(args.model)\n\t    dataset = load_dataset(\"lambada\", split=f\"test[:{args.number}]\")\n\t    evaluator = Evaluator(dataset, tokenizer)\n\t    model = OPTForCausalLM.from_pretrained(\n\t        args.model, torch_dtype=torch.float16, device_map=\"auto\")\n\t    # warmup\n", "    for i in range(10):\n\t        input_ids = torch.tensor(range(1000, 1100)).cuda().unsqueeze(0)\n\t        model(input_ids)\n\t    acc, latency, results = evaluator.evaluate(model)\n\t    print(f\"accuracy: {acc}, per-sample latency: {latency:.3f} ms\")\n\t    with open(f\"result_{args.model.replace('/', '-')}.json\", \"w\") as fout:\n\t        json.dump(results, fout, indent=2)\n"]}
{"filename": "real_run/stats.py", "chunked_list": ["import argparse\n\timport glob\n\timport json\n\timport os\n\timport re\n\tfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer\n\tfrom util import is_float\n\tdef extract_score(sentence):\n\t    number = re.search(\"^\\d+\\.\\d+\", sentence)\n\t    if number is None:\n", "        number = re.search(\"^\\d+\", sentence)\n\t    if number is None:\n\t        return 0, 0\n\t    score = float(number.group(0))\n\t    if score < 0 or score > 10:\n\t        print(sentence)\n\t        print(score)\n\t        raise Exception\n\t    return score, 1\n\tdef ismodel(model_name, models):\n", "    for model in models:\n\t        if model in model_name:\n\t            return True\n\t    return False\n\tdef get_eval_files(args):\n\t    files = []\n\t    for filename in glob.glob(os.path.join(args.exp_dir, f\"*_tagged.json\")):\n\t        model_name, query, _, _ = filename.split(\"/\")[-1].split(\"_\")\n\t        num_query = query.split(\"-\")[-1]\n\t        if num_query != args.num_query: continue\n", "        if ismodel(model_name, args.models):\n\t            print(filename)\n\t            files.append(filename)\n\t    return files\n\tdef print_eval_results(eval_files):\n\t    score = {}\n\t    for filename in eval_files:\n\t        model_name, query, _, _ = filename.split(\"/\")[-1].split(\"_\")\n\t        if model_name not in score:\n\t            score[model_name] = {}\n", "            score[model_name][\"mean\"] = 0\n\t            score[model_name][\"num>=6\"] = 0\n\t            score[model_name][\"cnt\"] = 0\n\t        with open(filename, \"r\") as f:\n\t            data = json.load(f)\n\t        for sample in data[\"samples\"]:\n\t            if not is_float(sample[\"gpt4_eval\"][\"score\"]):\n\t                continue\n\t            value = float(sample[\"gpt4_eval\"][\"score\"])\n\t            score[model_name][\"mean\"] += value\n", "            score[model_name][\"cnt\"] += 1\n\t            if value >= 6:\n\t                score[model_name][\"num>=6\"] += 1\n\t        score[model_name][\"mean\"] /= score[model_name][\"cnt\"]\n\t    print(\"scores:\")\n\t    for key in score:\n\t        print(key, score[key])\n\tdef print_infer_time(eval_files):\n\t    cost_min = [1e9, 1e9]\n\t    cost_max = [0, 0]\n", "    tcost = {}\n\t    for i, filename in enumerate(eval_files):\n\t        model_name, query, _, _ = filename.split(\"/\")[-1].split(\"_\")\n\t        if model_name not in tcost:\n\t            tcost[model_name] = 0\n\t        with open(filename, \"r\") as f:\n\t            data = json.load(f)\n\t        for sample in data[\"samples\"]:\n\t            t = sample[\"infer_time\"]\n\t            tcost[model_name] += t\n", "            cost_min[i] = min(cost_min[i], t)\n\t            cost_max[i] = max(cost_max[i], t)\n\t        tcost[model_name] /= len(data[\"samples\"])\n\t    print(\"mean inference time:\")\n\t    for key in tcost:\n\t        print(key, tcost[key])\n\t    print(\"min inference time:\", cost_min)\n\t    print(\"max inference time:\", cost_max)\n\tdef print_seq_len(eval_files):\n\t    for filename in eval_files:\n", "        seq_len = []\n\t        gen_len = []\n\t        gen_time = []\n\t        model_name, query, _, _ = filename.split(\"/\")[-1].split(\"_\")\n\t        if \"t5\" in model_name:\n\t            tokenizer = AutoTokenizer.from_pretrained(\"google/flan-t5-xxl\")\n\t        elif \"vicuna\" in model_name:\n\t            tokenizer = AutoTokenizer.from_pretrained(\"/home/Ying/models/vicuna-13b-v1.1\", use_fast=False)\n\t        else:\n\t            raise Exception(\"unrecognized model\")\n", "        with open(filename, \"r\") as f:\n\t            data = json.load(f)\n\t            for sample in data[\"samples\"]:\n\t                input_ids = tokenizer(sample[\"query\"]).input_ids\n\t                seq_len.append(len(input_ids))\n\t                output_ids = tokenizer(sample[\"output\"]).input_ids\n\t                gen_len.append(len(output_ids))\n\t                gen_time.append(sample[\"infer_time\"])\n\t        print(filename)\n\t        # print(\"seq len:\", seq_len)\n", "        # print(\"sum:\", sum(seq_len))\n\t        # print(\"gen len:\", gen_len)\n\t        # print(\"sum:\", sum(gen_len))\n\t        # print(\"time:\", [f\"{x:.1f}\" for x in gen_time])\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--exp-dir\", type=str, default=\"exp/oasst/a100\")\n\t    parser.add_argument(\"--models\", nargs=\"+\", default=[\"fastchat-t5\", \"vicuna\"])\n\t    parser.add_argument(\"--num-query\", type=str, required=True)\n\t    args = parser.parse_args()\n", "    files = get_eval_files(args)\n\t    print_eval_results(files)\n\t    print_infer_time(files)\n\t    print_seq_len(files)\n"]}
{"filename": "real_run/oasst.py", "chunked_list": ["# Open Assistant data: https://huggingface.co/datasets/OpenAssistant/oasst1\n\t# Flan-T5 3B and 11B: https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/flan-t5#overview\n\timport argparse\n\tfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\timport json\n\timport os\n\timport time\n\timport torch\n\tfrom tqdm import tqdm\n\tfrom datasets import load_dataset\n", "from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, AutoModelForCausalLM\n\tfrom transformers import T5Tokenizer, T5ForConditionalGeneration\n\tfrom util import construct_prompt_chat, get_gpt4_eval\n\tdef get_prompts(n):\n\t    ds = load_dataset(\"OpenAssistant/oasst1\")\n\t    train = ds[\"train\"]\n\t    prompts = []\n\t    for i in range(len(train)):\n\t        if train[i][\"parent_id\"] == None:\n\t            prompts.append((train[i][\"message_id\"], train[i][\"text\"]))\n", "            if len(prompts) == n:\n\t                break\n\t    print(\"number of queries\", len(prompts))\n\t    assert len(prompts) == n, \"insufficient queries in open assistant dataset\"\n\t    # print(\"first 4 queries\", prompts[:4])\n\t    return prompts\n\tdef decorate(prompt):\n\t    # prompt = \"Question: \" + prompt + \"\\n\\nAnswer:\"\n\t    return prompt\n\tdef get_model_outputs(model_name, prompts_path):\n", "    print(f\"loading {model_name} ...\")\n\t    kwargs = {\"torch_dtype\": torch.float16}\n\t    if \"gpt4\" in model_name:\n\t        pass\n\t    elif \"t5\" in model_name:\n\t        tokenizer = T5Tokenizer.from_pretrained(model_name)\n\t        model = AutoModelForSeq2SeqLM.from_pretrained(\n\t            model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n\t    elif \"vicuna\" in model_name:\n\t        tokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=False)\n", "        model = AutoModelForCausalLM.from_pretrained(\n\t            model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n\t    else:\n\t        tokenizer = AutoTokenizer.from_pretrained(model_name)\n\t        model = AutoModel.from_pretrained(\n\t            model_name, low_cpu_mem_usage=True, **kwargs).cuda()\n\t    with open(prompts_path, \"r\") as f:\n\t        prompts_json = json.load(f)\n\t    prompts = prompts_json[\"prompts\"]\n\t    print(\"number of queries\", len(prompts))\n", "    inputs = []\n\t    for prompt in prompts:\n\t        inputs.append(tokenizer(decorate(prompt[1]), return_tensors=\"pt\").input_ids.cuda())\n\t    print(f\"tokenization finished.\")\n\t    # warmup\n\t    warmup_num = 10\n\t    pbar = tqdm(total=warmup_num, desc=\"warmup\")\n\t    start = time.time()\n\t    for input_ids in inputs[:warmup_num]:\n\t        model.generate(input_ids, max_new_tokens=128)\n", "        pbar.update(1)\n\t        if time.time() - start > 4:\n\t            break\n\t    pbar.close()\n\t    # inference\n\t    outputs = {\"model_name\": model_name,\n\t               \"query_path\": prompts_path,\n\t               \"samples\": [],\n\t              }\n\t    pbar = tqdm(total=len(inputs), desc=\"Finished quries\")\n", "    start = time.time()\n\t    for i, input_ids in enumerate(inputs):\n\t        tic = time.time()\n\t        output_ids = model.generate(input_ids, max_new_tokens=128)\n\t        duration = time.time() - tic\n\t        output = tokenizer.decode(output_ids[0], skip_special_tokens=True)\n\t        sample = {\"oasst_message_id\": prompts[i][0],\n\t                  \"query\": prompts[i][1],\n\t                  \"output\": output,\n\t                  \"infer_time\": duration,\n", "                 }\n\t        outputs[\"samples\"].append(sample)\n\t        pbar.update(1)\n\t    pbar.close()\n\t    print(f\"Finish all inference in {time.time() - start:.2f} s.\")\n\t    return outputs\n\tdef get_eval_results(data_file):\n\t    with open(data_file, \"r\") as f:\n\t        data = json.load(f)\n\t    model_name = data[\"model_name\"]\n", "    query_path = data[\"query_path\"]\n\t    samples = data[\"samples\"]\n\t    results = []\n\t    args_list = [(sample[\"query\"], sample[\"output\"], \"chat\") for sample in samples]\n\t    with ThreadPoolExecutor(10) as executor:\n\t        futures = {executor.submit(get_gpt4_eval, *args) for args in args_list}\n\t        for future in as_completed(futures):\n\t            results.append(future.result())\n\t    print(results)\n\t    results = list(results)\n", "    for i, sample in enumerate(samples):\n\t        sample[\"gpt4_eval\"] = results[i]\n\t    return data\n\tdef main(args):\n\t    if args.gen_query > 0:\n\t        # get prompts\n\t        prompts_file = os.path.join(args.exp_dir, f\"prompts-{args.gen_query}.json\")\n\t        print(f\"\\n====== generating {args.gen_query} prompts ======\")\n\t        prompts = get_prompts(args.gen_query)\n\t        prompts_json = {\"prompts\": prompts}\n", "        with open(prompts_file, \"w\") as f:\n\t            json.dump(prompts_json, f)\n\t        print(f\"prompts dumped to {prompts_file}\")\n\t    if args.model is not None:\n\t        # get model outputs\n\t        assert args.device is not None, \"device is none.\"\n\t        assert args.query_path is not None, \"query path is none.\"\n\t        args.exp_dir = os.path.join(args.exp_dir, args.device)\n\t        os.makedirs(args.exp_dir, exist_ok=True)\n\t        model_name = args.model.split(\"/\")[-1]\n", "        query_file = args.query_path.split(\"/\")[-1].split(\".\")[0]\n\t        output_file = os.path.join(args.exp_dir, f\"{model_name}_{query_file}_output.json\")\n\t        print(f\"\\n====== run inference for {model_name} on {query_file} ======\")\n\t        outputs = get_model_outputs(args.model, args.query_path)\n\t        with open(output_file, \"w\") as f:\n\t            json.dump(outputs, f)\n\t        print(f\"model output dumped to {output_file}\")\n\t    if args.eval_path is not None:\n\t        eval_file = \".\".join(args.eval_path.split(\".\")[:-1]) + \"_tagged.json\"\n\t        print(f\"\\n====== run gpt4 eval for {args.eval_path} ======\")\n", "        eval_res = get_eval_results(args.eval_path)\n\t        with open(eval_file, \"w\") as f:\n\t            json.dump(eval_res, f)\n\t        print(f\"eval resuts dumped to {eval_file}\")\n\t# \"flan-t5-small: 80M \"\n\t# \"flan-t5-base: 250M \"\n\t# \"flan-t5-large: 780M \"\n\t# \"flan-t5-xl: 3B \"\n\t# \"flan-t5-xxl: 11B\"\n\tif __name__ == \"__main__\":\n", "    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--exp-dir\", type=str, default=\"exp/oasst\")\n\t    # generate query\n\t    parser.add_argument(\"--gen-query\", type=int, default=0)\n\t    # generate model output\n\t    parser.add_argument(\"--device\", type=str, default=None)\n\t    parser.add_argument(\"--model\", type=str, default=None)\n\t    parser.add_argument(\"--query-path\", type=str, default=None)\n\t    # generate eval results\n\t    parser.add_argument(\"--eval-path\", type=str, default=None,\n", "                        help=\"The output json file path to get evaluated. \"\n\t                             \"The evaluated file will be named with adding 'tag' in the input file name.\")\n\t    args = parser.parse_args()\n\t    if args.model is not None and args.model.startswith(\"flan-t5\"):\n\t        args.model = \"google/\" + args.model\n\t    os.makedirs(args.exp_dir, exist_ok=True)\n\t    tic = time.time()\n\t    main(args)\n\t    print(f\"whole program finished in {time.time() - tic:.2f} s.\")\n"]}
{"filename": "inferband/exp_suite.py", "chunked_list": ["from collections import namedtuple\n\timport itertools\n\tBenchmarkConfig = namedtuple(\n\t    \"BenchmarkConfig\",\n\t    [\n\t     \"num_round\", \"num_query\", \"cache_size\",\n\t     \"cost_base\", \"cost_ratio\", \"cost_var\", \"selector_acc\", # synthetic exp only\n\t     \"success_ratio\", \"alpha\", \"align_type\", \"scenario\",\n\t     \"cache_strategy\", \"selector\",\n\t     \"dataset\", \"small_model\", \"large_model\", # dataset exp only\n", "     \"cost_dist\",\n\t    ]\n\t)\n\tsynthetic_suite = {\n\t    \"default\": BenchmarkConfig(\n\t        num_round = [10000],\n\t        num_query = [20],\n\t        cache_size = [8],\n\t        cost_base = [None],\n\t        cost_ratio = [1.5, 100],\n", "        cost_var = [None],\n\t        selector_acc = [0.8, 1],\n\t        # success_ratio = [0.2, 0.4, 0.5, 0.6, 0.8],\n\t        success_ratio = [None],\n\t        alpha = [0.5, 0.8],\n\t        align_type = [\"random\"],\n\t        scenario = [\"offline\", \"online\"],\n\t        cache_strategy = [\"LFU\", \"ours\"],\n\t        selector = [\"large\", \"cascade\", \"ours\"],\n\t        dataset = [None],\n", "        small_model = [None],\n\t        large_model = [None],\n\t        cost_dist = [\"binomial\"]\n\t    ),\n\t}\n\tdataset_suite = {\n\t    \"lambda\": BenchmarkConfig(\n\t        num_round = [10000],\n\t        num_query = [100],\n\t        cache_size = [40],\n", "        cost_base = [None],\n\t        cost_ratio = [None],\n\t        cost_var = [None],\n\t        selector_acc = [0.8, 1],\n\t        # success_ratio = [0.2, 0.4, 0.5, 0.6, 0.8],\n\t        success_ratio = [None],\n\t        alpha = [0.2, 0.8],\n\t        align_type = [\"random\"],\n\t        scenario = [\"offline\"],\n\t        cache_strategy = [\"LFU\", \"ours\"],\n", "        selector = [\"large\", \"cascade\", \"ours\"],\n\t        dataset = [\"lambda\"],\n\t        small_model = [\"opt-1.3b\"],\n\t        large_model = [\"opt-13b\"],\n\t        cost_dist = [None]\n\t    ),\n\t    \"oasst\": BenchmarkConfig(\n\t        num_round = [10000],\n\t        num_query = [100],\n\t        cache_size = [40],\n", "        cost_base = [None],\n\t        cost_ratio = [None],\n\t        cost_var = [None],\n\t        selector_acc = [1],\n\t        # success_ratio = [0.2, 0.4, 0.5, 0.6, 0.8],\n\t        success_ratio = [None],\n\t        alpha = [0.2, 0.5, 0.8],\n\t        align_type = [\"random\"],\n\t        scenario = [\"online\"],\n\t        cache_strategy = [\"LFU\", \"ours\"],\n", "        selector = [\"large\", \"cascade\", \"ours\"],\n\t        dataset = [\"oasst\"],\n\t        small_model = [\"fastchat-t5\"],\n\t        large_model = [\"vicuna\"],\n\t        cost_dist = [None]\n\t    ),\n\t}\n\tdebug_suite = {\n\t    \"default\": BenchmarkConfig(\n\t        num_round = [10000],\n", "        num_query = [20],\n\t        cache_size = [8],\n\t        cost_base = [None],\n\t        cost_ratio = [100],\n\t        cost_var = [None],\n\t        selector_acc = [1],\n\t        # success_ratio = [0.2, 0.4, 0.5, 0.6, 0.8],\n\t        success_ratio = [None],\n\t        alpha = [0.8],\n\t        align_type = [\"random\"],\n", "        scenario = [\"offline\"],\n\t        cache_strategy = [\"ours\"],\n\t        selector = [\"large\", \"cascade\", \"ours\"],\n\t        dataset = [None],\n\t        small_model = [None],\n\t        large_model = [None],\n\t        cost_dist = [\"binomial\"]\n\t    ),\n\t}\n\tdef get_all_suites(debug=False):\n", "    if debug:\n\t        exps = [debug_suite]\n\t    else:\n\t        exps = [synthetic_suite, dataset_suite]\n\t    suites = []\n\t    for exp in exps:\n\t        for workload in exp:\n\t            (num_round_list, num_query_list, cache_size_list,\n\t            cost_base_list, cost_ratio_list, cost_var_list, selector_acc_list,\n\t            success_ratio_list, alpha_list, align_type_list, scenario_list,\n", "            cache_strategy_list, selector_list,\n\t            dataset_list, small_model_list, large_model_list,\n\t            cost_dist,) = exp[workload]\n\t            for combination in itertools.product(\n\t                                   num_round_list, num_query_list, cache_size_list,\n\t                                   cost_base_list, cost_ratio_list, cost_var_list, selector_acc_list,\n\t                                   success_ratio_list, alpha_list, align_type_list, scenario_list,\n\t                                   cache_strategy_list, selector_list,\n\t                                   dataset_list, small_model_list, large_model_list,\n\t                                   cost_dist,):\n", "                # skip if scenario == \"online\" and selector == \"ours\" and selector_acc != 1\n\t                if combination[10] == \"online\" and combination[6] < 1:\n\t                    continue\n\t                suites.append(combination)\n\t    return suites\n"]}
{"filename": "inferband/plot.py", "chunked_list": ["import argparse\n\tfrom collections import defaultdict\n\timport csv\n\timport json\n\tfrom exp_suite import BenchmarkConfig, get_all_suites\n\tcolumn_names = list(BenchmarkConfig._fields) + [\"tot_cost\"]\n\tdef get_table_format(scenario, dataset=None):\n\t    online = int(scenario == \"offline\")\n\t    if dataset == \"lambda\" or dataset == \"oasst\":\n\t        table_format = \"\\\\begin{tabular}{ c\" + \"p{3.5em}\" * online\n", "    elif dataset is None:\n\t        table_format = \"\\\\begin{tabular}{ cc\" + \"p{3.5em}\" * online\n\t    else:\n\t        raise Exception(\"unrecognized dataset\")\n\t    return table_format\n\tdef get_col_names(scenario, dataset=None):\n\t    online = int(scenario == \"offline\")\n\t    if dataset == \"lambda\" or dataset == \"oasst\":\n\t        col_names = f\"  $\\\\alpha$ & \" + \"selector accuracy &\" * online\n\t    elif dataset is None:\n", "        col_names = f\"  $\\\\alpha$ & cost ratio & \" + \"selector accuracy &\" * online\n\t    else:\n\t        raise Exception(\"unrecognized dataset\")\n\t    return col_names\n\tdef get_param_cols(configs, scenario, dataset=None):\n\t    online = int(scenario == \"offline\")\n\t    acc = configs['selector_acc']\n\t    if dataset == \"lambda\" or dataset == \"oasst\":\n\t        cols = f\"  {configs['alpha']} \" + f\"& \\\\multicolumn{{1}}{{r}}{{ {acc} }} \" * online\n\t    elif dataset is None:\n", "        cols = f\"  {configs['alpha']} & {configs['cost_ratio']} \" + f\"& \\\\multicolumn{{1}}{{r}}{{ {acc} }} \" * online\n\t    else:\n\t        raise Exception(\"unrecognized dataset\")\n\t    return cols\n\tdef get_caption(scenario, dataset=None, small_model=None, large_model=None):\n\t    caption = f\"{scenario}\"\n\t    if dataset is not None:\n\t        caption += f\" {dataset}\"\n\t        if small_model is not None:\n\t            caption += f\" {small_model} {large_model}\"\n", "    else:\n\t        caption += f\" synthetic\"\n\t    return caption\n\tdef get_label(scenario, dataset=None, small_model=None, large_model=None):\n\t    label = f\"{scenario}\"\n\t    if dataset is not None:\n\t        label += f\"_{dataset}\"\n\t        if small_model is not None:\n\t            label += f\"_{small_model}_{large_model}\"\n\t    else:\n", "        label += f\"_synthetic\"\n\t    return label\n\tdef dumptex(results, scenario, dataset=None, small_model=None, large_model=None):\n\t    texfile = scenario\n\t    if dataset is not None:\n\t        texfile += f\"_{dataset}\"\n\t        if small_model is not None:\n\t            texfile += f\"_{small_model}_{large_model}\"\n\t    else:\n\t        texfile += f\"_synthetic\"\n", "    texfile += \".tex\"\n\t    if dataset is None:\n\t        B1 = \"LFU+ model 1\"\n\t        B2 = \"LFU+ model 2\"\n\t        B3 = \"LFU+ selector\"\n\t        B4 = \"LEC+ model 1\"\n\t        B5 = \"LEC+ model 2\"\n\t        B6 = \"LEC+ selector\"\n\t    else:\n\t        B1 = \"LFU+ large\"\n", "        B2 = \"LFU+ cascade\"\n\t        B3 = \"LFU+ selector\"\n\t        B4 = \"LEC+ large\"\n\t        B5 = \"LEC+ cascade\"\n\t        B6 = \"LEC+ selector\"\n\t    acc = -1\n\t    with open(texfile, \"w\") as f:\n\t        f.write(\"\\\\begin{table}[ht]\\n\")\n\t        f.write(\"\\\\begin{center}\\n\")\n\t        f.write(get_table_format(scenario, dataset=dataset) + \n", "                \"p{3.2em}p{3.2em}p{3.2em}p{3.2em}p{3.2em}p{3.2em} }\\n\")\n\t        f.write(\"  \\\\toprule\\n\")\n\t        f.write(get_col_names(scenario, dataset=dataset) + \n\t                f\" {B1} & {B2} & {B3} & {B4} & {B5} & {B6} \\\\\\\\ \\n\")\n\t        for key, value in results.items():\n\t            configs = json.loads(key)\n\t            if configs[\"scenario\"] != scenario:\n\t                continue\n\t            if dataset is None and configs[\"dataset\"] != \"\":\n\t                continue\n", "            if dataset is not None and (configs[\"dataset\"] != dataset or\n\t               configs[\"small_model\"] != small_model or configs[\"large_model\"] != large_model):\n\t                continue\n\t            if configs[\"selector_acc\"] != acc:\n\t                f.write(\"  \\\\midrule\\n\")\n\t                acc = configs[\"selector_acc\"]\n\t            f.write(get_param_cols(configs, scenario, dataset=dataset))\n\t            key_of_min_value = min(value, key=value.get)\n\t            for key, cost in value.items():\n\t                if key == key_of_min_value or int(cost) == int(value[key_of_min_value]):\n", "                    f.write(f\"& \\\\multicolumn{{1}}{{r}}{{ \\\\textbf{{ {cost / 1000:.2f} }} }} \")\n\t                else:\n\t                    f.write(f\"& \\\\multicolumn{{1}}{{r}}{{ {cost / 1000:.2f} }} \")\n\t            f.write(\"\\\\\\\\ \\n\")\n\t        f.write(\"  \\\\bottomrule\\n\")\n\t        f.write(\"\\\\end{tabular}\\n\")\n\t        f.write(\"\\\\end{center}\\n\")\n\t        f.write(f\"\\\\caption{{{get_caption(scenario, dataset=dataset, small_model=small_model, large_model=large_model)}}}\\n\")\n\t        f.write(f\"\\\\label{{tab:{get_label(scenario, dataset=dataset, small_model=small_model, large_model=large_model)}}}\\n\")\n\t        f.write(\"\\\\end{table}\\n\")\n", "if __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--res-file\", type=str, default=\"all_exp_results.csv\")\n\t    args = parser.parse_args()\n\t    data = []\n\t    with open(args.res_file, \"r\") as f:\n\t        reader = csv.reader(f)\n\t        for row in reader:\n\t            if row[-1] != '':\n\t                data.append(row)\n", "    assert len(column_names) == len(data[0])\n\t    print(\"number of data points:\", len(data))\n\t    strategies = [\n\t        (\"LFU\", \"large\"),\n\t        (\"LFU\", \"cascade\"),\n\t        (\"LFU\", \"ours\"),\n\t        (\"ours\", \"large\"),\n\t        (\"ours\", \"cascade\"),\n\t        (\"ours\", \"ours\"),\n\t    ]\n", "    results = {}\n\t    for suite in data:\n\t        config = dict(zip(column_names, suite))\n\t        stg = (config[\"cache_strategy\"], config[\"selector\"])\n\t        cost = float(config[\"tot_cost\"])\n\t        config.pop(\"cache_strategy\")\n\t        config.pop(\"selector\")\n\t        config.pop(\"tot_cost\")\n\t        config = json.dumps(config)\n\t        if config not in results:\n", "            results[config] = {}\n\t        results[config][stg] = cost\n\t    for key, value in results.items():\n\t        print(key)\n\t        for strategy, cost in value.items():\n\t            print(f\"{strategy}: {float(cost):.2f}\")\n\t    dumptex(results, \"offline\")\n\t    dumptex(results, \"online\")\n\t    dumptex(results, \"offline\", dataset=\"lambda\", small_model=\"opt-1.3b\", large_model=\"opt-13b\")\n\t    dumptex(results, \"offline\", dataset=\"oasst\", small_model=\"flan-t5\", large_model=\"vicuna\")\n", "    dumptex(results, \"offline\", dataset=\"oasst\", small_model=\"fastchat-t5\", large_model=\"vicuna\")\n\t    dumptex(results, \"online\", dataset=\"lambda\", small_model=\"opt-1.3b\", large_model=\"opt-13b\")\n\t    dumptex(results, \"online\", dataset=\"oasst\", small_model=\"flan-t5\", large_model=\"vicuna\")\n\t    dumptex(results, \"online\", dataset=\"oasst\", small_model=\"fastchat-t5\", large_model=\"vicuna\")\n"]}
{"filename": "inferband/simulator.py", "chunked_list": ["import argparse\n\timport numpy as np\n\timport os\n\timport pickle\n\timport time\n\tfrom typing import List\n\tfrom tqdm import tqdm\n\tfrom inferband.common import Stage\n\tfrom inferband.server import Server\n\tfrom inferband.trace import generate_requests\n", "def main(args: argparse.Namespace):\n\t    # Create a server.\n\t    server = Server(cache_size=args.cache_size)\n\t    # Generate requests.\n\t    np.random.seed(args.seed)\n\t    requests = generate_requests(\n\t         num_query=args.num_query,\n\t         num_round=args.num_round,\n\t         seed=args.seed,\n\t         debug=args.debug,\n", "    )\n\t    # Start benchmarking.\n\t    cost = 0\n\t    # Initialize tqdm.\n\t    pbar = tqdm(total=len(requests), desc='Finished requests')\n\t    for t in range(args.num_round):\n\t        # receive request and update density estimation\n\t        server.receive_request(requests[t])\n\t        # stage tag\n\t        learn_time = int(args.num_round ** 0.66)\n", "        if t < learn_time // 2:\n\t            tag = Stage.SMALL\n\t        elif t < learn_time:\n\t            tag = Stage.LARGE\n\t        else:\n\t            tag = Stage.POLICY\n\t        # serve the request\n\t        cost += server.step(tag, requests[t])\n\t        pbar.update(1)\n\t    pbar.close()\n", "    # Dump results\n\t    server.print_log()\n\t    print(f\"Total cost: {cost:.2f}\")\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--output-dir\", type=str, help=\"path to output directory\", default=None)\n\t    parser.add_argument(\"--num-round\", type=int, default=16)\n\t    parser.add_argument(\"--cache-size\", type=int, default=1)\n\t    parser.add_argument(\"--num-query\", type=int, default=4)\n\t    parser.add_argument(\"--seed\", type=int, default=1)\n", "    parser.add_argument(\"--debug\", action=\"store_true\")\n\t    args = parser.parse_args()\n\t    # Set output dir\n\t    if args.output_dir is None:\n\t        args.output_dir = os.path.join(\n\t            'exp',\n\t        )\n\t    os.makedirs(args.output_dir, exist_ok=True)\n\t    main(args)\n"]}
{"filename": "inferband/trace.py", "chunked_list": ["from collections import Counter\n\timport json\n\timport logging\n\timport numpy as np\n\timport pickle\n\tfrom typing import List, Tuple, Any\n\timport numpy as np\n\tMIN = 0.1\n\tFAIL_PENALTY = 2\n\tlogging.basicConfig(level=logging.ERROR)\n", "class Query:\n\t    def __init__(\n\t        self,\n\t        qid: int,\n\t        cost_s: float,\n\t        cost_l: float,\n\t        cost_cas: float,\n\t        cost_opt: float,\n\t        success,\n\t    ) -> None:\n", "        self.qid = qid\n\t        self.cost_s = cost_s\n\t        self.cost_l = cost_l\n\t        self.cost_cas = cost_cas\n\t        self.cost_opt = cost_opt\n\t        self.success = success\n\t    def __repr__(self):\n\t        return f\"Query(qid={self.qid}, cost_s={self.cost_s:.2f}, cost_l={self.cost_l:.2f})\"\n\tclass Request:\n\t    def __init__(\n", "        self,\n\t        rid: int,\n\t        query: Query,\n\t        cost_s=None,\n\t        cost_l=None,\n\t        cost_cas=None,\n\t        cost_opt=None,\n\t        success=None,\n\t    ):\n\t        self.rid = rid\n", "        self.qid = query.qid\n\t        self.query = query\n\t        self.cost_s = cost_s if cost_s is not None else query.cost_s\n\t        self.cost_l = cost_l if cost_l is not None else query.cost_l\n\t        self.cost_cas = cost_cas if cost_cas is not None else query.cost_cas\n\t        self.cost_opt = cost_opt if cost_opt is not None else query.cost_opt\n\t        self.success = success if success is not None else query.success\n\t    def __repr__(self):\n\t        return f\"Request(rid={self.rid}, qid={self.qid}, \" \\\n\t               f\"cost_s={self.cost_s:.2f}, cost_l={self.cost_l:.2f})\"\n", "def generate_requests(\n\t        num_round=None,\n\t        num_query=None,\n\t        cost_base=None,\n\t        cost_ratio=None,\n\t        cost_var=None,\n\t        success_ratio=None, # does not support\n\t        alpha=None,\n\t        align_type=None,\n\t        seed=0,\n", "        cost_dist=\"binomial\",\n\t    ):\n\t    np.random.seed(seed)\n\t    queries = []\n\t    if cost_dist == \"binomial\":\n\t        cost_s = np.random.binomial(n=1, p=0.5, size=num_query) * cost_ratio + 1\n\t        cost_l = np.random.binomial(n=1, p=0.5, size=num_query) * cost_ratio + 1\n\t    for i in range(num_query):\n\t        if cost_dist == \"normal\":\n\t            success = np.random.randint(2)\n", "            cost_s = np.maximum(MIN, np.random.normal(cost_base, np.sqrt(cost_var)))\n\t            cost_l = np.maximum(MIN, np.random.normal(cost_base * cost_ratio, np.sqrt(cost_var)))\n\t            cost_cas = cost_s + (success ^ 1) * cost_l * FAIL_PENALTY\n\t            cost_opt = np.minimum(cost_cas, cost_l)\n\t            queries.append(Query(i, cost_s, cost_l, cost_cas, cost_opt, success))\n\t        elif cost_dist == \"binomial\":\n\t            queries.append(Query(i, cost_s[i], cost_l[i], cost_s[i], min(cost_s[i], cost_l[i]), None))\n\t        else:\n\t            raise Exception(\"unrecognized distribution\")\n\t    # construct requests according to: num_round, alpha, align_type\n", "    if align_type == \"best\":\n\t        queries = sorted(queries, key=lambda query: query.real_cost())\n\t    elif align_type == \"worst\":\n\t        queries = sorted(queries, key=lambda query: query.real_cost(), reverse=True)\n\t    elif align_type == \"random\":\n\t        pass\n\t    else:\n\t        raise Exception(\"unrecognized align type\")\n\t    probs = np.random.power(alpha, num_round)\n\t    indices = (probs * num_query).astype(int)\n", "    requests = []\n\t    for rid, qid in enumerate(indices):\n\t        if cost_dist == \"normal\":\n\t            success = np.random.randint(2)\n\t            cost_s = np.maximum(MIN, np.random.normal(queries[qid].cost_s, np.sqrt(cost_var)))\n\t            cost_l = np.maximum(MIN, np.random.normal(queries[qid].cost_l, np.sqrt(cost_var)))\n\t            cost_cas = cost_s + (success ^ 1) * cost_l * FAIL_PENALTY\n\t            cost_opt = np.minimum(cost_cas, cost_l)\n\t            requests.append(Request(rid, queries[qid], cost_s, cost_l, cost_cas, cost_opt, success))\n\t        elif cost_dist == \"binomial\":\n", "            cost_s = np.maximum(MIN, queries[qid].cost_s + np.random.normal(0, 1))\n\t            cost_l = np.maximum(MIN, queries[qid].cost_l + np.random.normal(0, 1))\n\t            requests.append(Request(rid, queries[qid], cost_s, cost_l, cost_s, min(cost_s, cost_l), None))\n\t        else:\n\t            raise Exception(\"unrecognized distribution\")\n\t    # P = Counter([x.qid for x in requests])\n\t    # n = 10\n\t    # C = sorted(queries,\n\t    #            key=lambda x : P[x.qid] * x.cost_opt,\n\t    #            reverse=True)[:n]\n", "    # print([x.qid for x in C])\n\t    # print([P[C[i].qid] for i in range(n)])\n\t    # print([C[i].cost_s for i in range(n)])\n\t    # print([C[i].cost_l for i in range(n)])\n\t    # print([P[C[i].qid] * min(C[i].cost_s, C[i].cost_l) for i in range(n)])\n\t    # print()\n\t    # print(sorted([x.qid for x in C]))\n\t    # print(sorted([P[C[i].qid] * min(C[i].cost_s, C[i].cost_l) for i in range(n)]))\n\t    # print()\n\t    # C = sorted(queries,\n", "    #            key=lambda x : P[x.qid],\n\t    #            reverse=True)[:n]\n\t    # print(sorted([x.qid for x in C]))\n\t    # print(sorted([P[C[i].qid] * min(C[i].cost_s, C[i].cost_l) for i in range(n)]))\n\t    return requests\n\tdef generate_requests_from_file(\n\t        data_file=None,\n\t        num_round=None,\n\t        num_query=None,\n\t        success_ratio=None,\n", "        alpha=None,\n\t        align_type=None,\n\t        seed=0,\n\t    ):\n\t    np.random.seed(seed)\n\t    assert success_ratio is None, \"success_ratio has not been supported yet\"\n\t    if data_file is None:\n\t        logging.warning(\"dataset file is None\")\n\t        return []\n\t    with open(data_file, \"r\") as f:\n", "        data = f.readlines()\n\t    # extract queries\n\t    cnt = [0, 0]\n\t    queries = []\n\t    for sample in data:\n\t        query = json.loads(sample)\n\t        if ((cnt[1] < num_query // 2 and query[\"correct_small\"]) or\n\t            (cnt[0] < num_query - num_query // 2 and not query[\"correct_small\"])):\n\t            cnt[query[\"correct_small\"]] += 1\n\t            cost_cas = query[\"cost_small\"] + (query[\"correct_small\"] ^ 1) * query[\"cost_large\"] * FAIL_PENALTY\n", "            cost_opt = np.minimum(cost_cas, query[\"cost_large\"])\n\t            queries.append(Query(len(queries),\n\t                                 query[\"cost_small\"],\n\t                                 query[\"cost_large\"],\n\t                                 cost_cas,\n\t                                 cost_opt,\n\t                                 query[\"correct_small\"]))\n\t        if len(queries) == num_query: break\n\t    # construct requests according to: num_round, alpha, align_type\n\t    if align_type == \"best\":\n", "        queries = sorted(queries, key=lambda query: query.real_cost())\n\t    elif align_type == \"worst\":\n\t        queries = sorted(queries, key=lambda query: query.real_cost(), reverse=True)\n\t    elif align_type == \"random\":\n\t        np.random.shuffle(queries)\n\t    else:\n\t        raise Exception(\"unrecognized align type\")\n\t    probs = np.random.power(alpha, num_round)\n\t    indices = (probs * num_query).astype(int)\n\t    requests = [queries[i] for i in indices]\n", "    return requests\n\tdef generate_requests_debug(num_query, num_round):\n\t    queries = []\n\t    for i in range(num_query):\n\t        if i < num_query // 2:\n\t            query = Query(qid=i, cost_s=1, cost_l=2)\n\t        else:\n\t            query = Query(qid=i, cost_s=3, cost_l=2)\n\t        queries.append(query)\n\t    requests = []\n", "    for i in range(num_round):\n\t        requests.append(Request(i, queries[i % num_query]))\n\t    return requests\n\tdef generate_requests_arbitrary(num_query: int, num_round: int,\n\t                      debug=False):\n\t    if debug:\n\t        return generate_requests_debug(num_query, num_round)\n\t    queries = []\n\t    for i in range(num_query):\n\t        cost_s = np.random.rand() + 1\n", "        cost_l = np.random.rand() * 2 + 2\n\t        query = Query(qid=i,\n\t                      cost_s=cost_s + cost_l * np.random.randint(0, 2),\n\t                      cost_l=cost_l)\n\t        queries.append(query)\n\t    requests = []\n\t    for i in range(num_round):\n\t        requests.append(Request(i, queries[np.random.randint(0, num_query)]))\n\t    return requests\n"]}
{"filename": "inferband/common.py", "chunked_list": ["from enum import Enum, auto\n\tclass Stage(Enum):\n\t    SMALL = auto()\n\t    LARGE = auto()\n\t    POLICY = auto()\n\tclass Choice(Enum):\n\t    SMALL = auto()\n\t    LARGE = auto()\n\t    BOTH = auto()\n"]}
{"filename": "inferband/server.py", "chunked_list": ["from collections import Counter, defaultdict\n\timport numpy as np\n\timport os\n\timport time\n\tfrom typing import List, Optional, Tuple\n\tfrom inferband.common import Stage, Choice\n\tfrom inferband.trace import Query\n\tclass Server:\n\t    def __init__(\n\t            self,\n", "            cache_size=None,\n\t            cache_strategy=None,\n\t            selector_acc=None,\n\t            selector=None,\n\t            scenario=None,\n\t            requests=None,\n\t            seed=None,\n\t    ):\n\t        if seed is not None:\n\t            np.random.seed(seed)\n", "        # params\n\t        self.cache_size = cache_size\n\t        self.cache_strategy = cache_strategy\n\t        self.selector_acc = selector_acc\n\t        self.selector = selector\n\t        self.scenario = scenario\n\t        if scenario == \"offline\":\n\t            self._init_offline(requests)\n\t        elif scenario == \"online\":\n\t            self._init_online()\n", "        else:\n\t            raise Exception(\"unrecognized scenario\")\n\t        # server log\n\t        self.log = []\n\t    def _init_online(self):\n\t        # init cost: qid -> {cost, cnt}\n\t        self.cs = {}\n\t        self.cl = {}\n\t        self.cas = {}\n\t        self.opt = {}\n", "        # init cache\n\t        self.C = [] # [qid,...]\n\t        # init past observations\n\t        # self.H = []\n\t        # init policy\n\t        self.pi = {} # qid -> {SMALL, LARGE}\n\t        # init density function\n\t        self.tot_cnt = 0\n\t        self.P = {} # qid -> cnt\n\t    def _init_offline(self, requests):\n", "        # TODO currently using ground truth\n\t        # density function\n\t        self.P = Counter([x.qid for x in requests])\n\t        self.tot_cnt = len(requests)\n\t        # query cost\n\t        self.cs = defaultdict(lambda: [0, 0])\n\t        self.cl = defaultdict(lambda: [0, 0])\n\t        self.cas = defaultdict(lambda: [0, 0])\n\t        self.opt = defaultdict(lambda: [0, 0])\n\t        for request in requests:\n", "            qid = request.qid\n\t            cnt = self.cs[qid][1]\n\t            self.cs[qid] = ((self.cs[qid][0] * cnt + request.cost_s) / (cnt + 1), cnt + 1)\n\t            cnt = self.cl[qid][1]\n\t            self.cl[qid] = ((self.cl[qid][0] * cnt + request.cost_l) / (cnt + 1), cnt + 1)\n\t            cnt = self.cas[qid][1]\n\t            self.cas[qid] = ((self.cas[qid][0] * cnt + request.cost_cas) / (cnt + 1), cnt + 1)\n\t            cnt = self.opt[qid][1]\n\t            self.opt[qid] = ((self.opt[qid][0] * cnt + request.cost_opt) / (cnt + 1), cnt + 1)\n\t        # cache\n", "        if self.cache_strategy == \"LFU\":\n\t            self.C = sorted(self.P, key=self.P.get, reverse=True)[:self.cache_size]\n\t            # print(\"count\", [self.P[x] for x in sorted(self.C)])\n\t            # print([int(self.cs[x][0]) for x in sorted(self.C)])\n\t            # print([int(self.cl[x][0]) for x in sorted(self.C)])\n\t            # print([int(self.cascade[x][0]) for x in sorted(self.C)])\n\t            # print(\"optimal\", [int(self.optimal[x][0]) for x in sorted(self.C)])\n\t            # print(\"cache\", sorted(self.C))\n\t        elif self.cache_strategy == \"ours\":\n\t            if self.selector == \"ours\":\n", "                self.C = sorted(self.P.items(),\n\t                                key=lambda x : x[1] * self.opt[x[0]][0],\n\t                                reverse=True\n\t                               )[:self.cache_size]\n\t            elif self.selector == \"large\":\n\t                self.C = sorted(self.P.items(),\n\t                                key=lambda x : x[1] * self.cl[x[0]][0],\n\t                                reverse=True\n\t                               )[:self.cache_size]\n\t            elif self.selector == \"cascade\":\n", "                self.C = sorted(self.P.items(),\n\t                                key=lambda x : x[1] * self.cas[x[0]][0],\n\t                                reverse=True\n\t                               )[:self.cache_size]\n\t            self.C = [x[0] for x in self.C]\n\t            # print(\"count\", [self.P[x] for x in sorted(self.C)])\n\t            # print([int(self.cs[x][0]) for x in sorted(self.C)])\n\t            # print([int(self.cl[x][0]) for x in sorted(self.C)])\n\t            # print([int(self.cascade[x][0]) for x in sorted(self.C)])\n\t            # print(\"optimal\", [int(self.optimal[x][0]) for x in sorted(self.C)])\n", "            # print(\"cache\", sorted(self.C))\n\t        else:\n\t            raise Exception(\"unrecognized cache strategy\")\n\t    def receive_request(\n\t        self,\n\t        request,\n\t    ):\n\t        if self.scenario == \"offline\":\n\t            return\n\t        elif self.scenario == \"online\":\n", "            qid = request.qid\n\t            # update density estimation\n\t            self.tot_cnt += 1\n\t            if qid not in self.P:\n\t                self.P[qid] = 1\n\t            else:\n\t                self.P[qid] += 1\n\t        else:\n\t            raise Exception(\"unrecognized scenario\")\n\t    def step(self, request: Query, cost_dist, stage: Stage=None):\n", "        if self.scenario == \"offline\":\n\t            # hit cache\n\t            if self.hit_cache(request):\n\t                self.log.append((request, stage, \"hit cache\", 0))\n\t                return 0\n\t            # get cost\n\t            if self.selector == \"large\":\n\t                self.log.append((request, stage, Choice.LARGE, request.cost_l))\n\t                return request.cost_l\n\t            elif self.selector == \"cascade\":\n", "                if request.success:\n\t                    self.log.append((request, stage, Choice.SMALL, request.cost_cas))\n\t                else:\n\t                    self.log.append((request, stage, Choice.BOTH, request.cost_cas))\n\t                return request.cost_cas\n\t            elif self.selector == \"ours\":\n\t                assert self.selector_acc is not None\n\t                coin = (np.random.uniform(0, 1) < self.selector_acc)\n\t                if coin == 1:\n\t                    cost = request.cost_opt\n", "                else:\n\t                    cost = max(request.cost_cas, request.cost_l)\n\t                self.log.append((request, stage, None, cost))\n\t            else:\n\t                raise Exception(\"unrecognized selector\")\n\t            return cost\n\t        elif self.scenario == \"online\":\n\t            # hit cache\n\t            if self.hit_cache(request):\n\t                self.log.append((request, stage, \"hit cache\", 0))\n", "                return 0\n\t            # get cost\n\t            choice, cost = self.select(request)\n\t            # update past observation\n\t            # self.H.append((request, choice, cost))\n\t            self.log.append((request, stage, choice, cost))\n\t            # update RegressionOracle\n\t            self.update_RegressionOracle(request, choice, cost_dist)\n\t            self.update_policy(request, cost_dist)\n\t            # update cache\n", "            self.update_cache(request, cost_dist)\n\t            return cost\n\t    def select(self, request: Query):\n\t        if self.selector == \"large\":\n\t            return Choice.LARGE, request.cost_l\n\t        elif self.selector == \"cascade\":\n\t            if request.success:\n\t                return Choice.SMALL, request.cost_cas\n\t            else:\n\t                return Choice.BOTH, request.cost_cas\n", "        elif self.selector == \"ours\":\n\t            if request.qid not in self.pi:\n\t                self.pi[request.qid] = Choice.SMALL\n\t            if self.pi[request.qid] == Choice.SMALL:\n\t                if request.success:\n\t                    return Choice.SMALL, request.cost_cas\n\t                else:\n\t                    return Choice.BOTH, request.cost_cas\n\t            else:\n\t                return Choice.LARGE, request.cost_l\n", "        else:\n\t            raise Exception(\"unrecognized selector\")\n\t    def update_RegressionOracle(self, request: Query, choice: Choice, cost_dist):\n\t        qid = request.qid\n\t        if qid not in self.cs:\n\t            self.cs[qid] = (0, 0)\n\t            self.cl[qid] = (0, 0)\n\t            self.cas[qid] = (0, 0)\n\t            self.opt[qid] = (0, 0)\n\t        if cost_dist == \"binomial\":\n", "            if choice == Choice.SMALL or choice == Choice.BOTH:\n\t                cnt = self.cs[qid][1]\n\t                self.cs[qid] = ((self.cs[qid][0] * cnt + request.cost_s) / (cnt + 1), cnt + 1)\n\t            elif choice == Choice.LARGE:\n\t                cnt = self.cl[qid][1]\n\t                self.cl[qid] = ((self.cl[qid][0] * cnt + request.cost_l) / (cnt + 1), cnt + 1)\n\t        if choice == Choice.SMALL or choice == Choice.BOTH:\n\t            cnt = self.cs[qid][1]\n\t            self.cs[qid] = ((self.cs[qid][0] * cnt + request.cost_s) / (cnt + 1), cnt + 1)\n\t            cnt = self.cas[qid][1]\n", "            self.cas[qid] = ((self.cas[qid][0] * cnt + request.cost_cas) / (cnt + 1), cnt + 1)\n\t            cnt = self.opt[qid][1]\n\t            self.opt[qid] = ((self.opt[qid][0] * cnt + request.cost_opt) / (cnt + 1), cnt + 1)\n\t        if choice == Choice.LARGE or not request.success:\n\t            cnt = self.cl[qid][1]\n\t            self.cl[qid] = ((self.cl[qid][0] * cnt + request.cost_l) / (cnt + 1), cnt + 1)\n\t    def update_policy(self, request: Query, cost_dist):\n\t        qid = request.qid\n\t        if cost_dist == \"binomial\":\n\t            if self.cl[qid][0] < self.cs[qid][0]:\n", "                self.pi[qid] = Choice.LARGE\n\t            else:\n\t                self.pi[qid] = Choice.SMALL\n\t        if self.cl[qid][1] > 0 and self.cas[qid][0] > self.cl[qid][0]:\n\t            self.pi[qid] = Choice.LARGE \n\t        else:\n\t            self.pi[qid] = Choice.SMALL\n\t    def hit_cache(self, request):\n\t        return request.qid in self.C\n\t    def weight(self, qid, selector, cost_dist):\n", "        if selector == \"ours\":\n\t            if cost_dist == \"binomial\":\n\t                if self.cl[qid][0] == 0:\n\t                    return self.P[qid] / self.tot_cnt * self.cs[qid][0]\n\t                return self.P[qid] / self.tot_cnt * min(self.cs[qid][0], self.cl[qid][0])\n\t            if self.opt[qid][1] == 0:\n\t                return self.P[qid] / self.tot_cnt * self.cs[qid][0]\n\t            return self.P[qid] / self.tot_cnt * self.opt[qid][0]\n\t        elif selector == \"large\":\n\t            return self.P[qid] / self.tot_cnt * self.cl[qid][0]\n", "        elif selector == \"cascade\":\n\t            if cost_dist == \"binomial\":\n\t                return self.P[qid] / self.tot_cnt * self.cs[qid][0]\n\t            else:\n\t                return self.P[qid] / self.tot_cnt * self.cas[qid][0]\n\t    def update_cache(self, request, cost_dist):\n\t        qid = request.qid\n\t        # add if not full\n\t        if len(self.C) < self.cache_size:\n\t            self.C.append(qid)\n", "            return\n\t        # replace if full\n\t        if self.cache_strategy == \"LFU\":\n\t            ind, q = min(enumerate(self.C), key=lambda q: self.P[q[1]])\n\t            if self.P[qid] > self.P[q]:\n\t                self.C[ind] = qid\n\t        elif self.cache_strategy == \"ours\":\n\t            ind, q = min(enumerate(self.C), key=lambda q: self.weight(q[1], self.selector, cost_dist))\n\t            if self.weight(qid, self.selector, cost_dist) > self.weight(q, self.selector, cost_dist):\n\t                self.C[ind] = qid\n", "    def print_log(self, n1=None, n2=None):\n\t        if n1 is not None and n2 is not None:\n\t            logs = self.log[n1:n2]\n\t            n = n2\n\t        elif n1 is not None:\n\t            logs = self.log[:n1]\n\t            n = n1\n\t        else:\n\t            logs = self.log\n\t            n = len(logs)\n", "        for req, stage, choice, cost in logs:\n\t            print(f\"P: {self.P[req.qid]}\")\n\t            print(f\"cs: {self.cs[req.qid]} cl: {self.cl[req.qid]} cost: {self.cascade[req.qid]}\")\n\t            if self.scenario == \"online\":\n\t                print(f\"{self.pi[req.qid]}\")\n\t            print(f\"{req}, {stage}, {choice}, {cost:.2f}\")\n\t        csum = sum([x[3] for x in self.log[:n]])\n\t        print(f\"sum till {n}: {csum:.2f}\")\n"]}
{"filename": "inferband/run_exp.py", "chunked_list": ["import argparse\n\timport csv\n\timport numpy as np\n\timport time\n\tfrom tqdm import tqdm\n\timport os\n\tfrom exp_suite import synthetic_suite, dataset_suite, get_all_suites\n\tfrom inferband.common import Stage\n\tfrom inferband.server import Server\n\tfrom inferband.trace import generate_requests, generate_requests_from_file\n", "def get_data_file(dataset, small_model=None, large_model=None):\n\t    if \"lambda\" in dataset:\n\t        return \"../data/lambda_opt_flops_clean_train.json\"\n\t    elif \"oasst\" in dataset:\n\t        if small_model.startswith(\"flan-t5\") and large_model.startswith(\"vicuna\"):\n\t            return \"../data/oasst_a100_flan-t5_vicuna_clean_train.json\"\n\t        if small_model.startswith(\"fastchat-t5\") and large_model.startswith(\"vicuna\"):\n\t            return \"../data/oasst_a100_fastchat-t5_vicuna_clean_train.json\"\n\t    return None\n\tdef simulate(config, seed):\n", "    (num_round, num_query, cache_size,\n\t    cost_base, cost_ratio, cost_var, selector_acc,\n\t    success_ratio, alpha, align_type, scenario,\n\t    cache_strategy, selector,\n\t    dataset, small_model, large_model,\n\t    cost_dist,) = config\n\t    # Generate requests.\n\t    if dataset is None:\n\t        requests = generate_requests(\n\t                      num_round=num_round,\n", "                      num_query=num_query,\n\t                      cost_base=cost_base,\n\t                      cost_ratio=cost_ratio,\n\t                      cost_var=cost_var,\n\t                      success_ratio=success_ratio,\n\t                      alpha=alpha,\n\t                      align_type=align_type,\n\t                      seed=seed,\n\t                      cost_dist=cost_dist,\n\t                   )\n", "    else:\n\t        data_file = get_data_file(dataset, small_model, large_model)\n\t        requests = generate_requests_from_file(\n\t                      data_file=data_file,\n\t                      num_round=num_round,\n\t                      num_query=num_query,\n\t                      success_ratio=success_ratio,\n\t                      alpha=alpha,\n\t                      align_type=align_type,\n\t                      seed=seed,\n", "                   )\n\t    if len(requests) == 0:\n\t        return None\n\t    # Create a server.\n\t    server = Server(\n\t                 cache_size=cache_size,\n\t                 cache_strategy=cache_strategy,\n\t                 selector_acc=selector_acc,\n\t                 selector=selector,\n\t                 scenario=scenario,\n", "                 requests=requests,\n\t                 seed=seed,\n\t             )\n\t    # Start benchmarking.\n\t    cost = 0\n\t    for t in range(num_round):\n\t        server.receive_request(requests[t])\n\t        cost += server.step(requests[t], cost_dist)\n\t    # Dump results\n\t    # server.print_log(83, 84)\n", "    return cost\n\tdef main(args):\n\t    suites = get_all_suites(debug=args.debug)\n\t    results = []\n\t    for config in tqdm(suites, desc=\"suites\"):\n\t        cost = 0\n\t        for i in range(args.N):\n\t            if args.N > 0:\n\t                seed = int(time.time())\n\t            else:\n", "                seed = args.seed\n\t            cost += simulate(config, seed) / args.N\n\t        results.append(list(config) + [cost])\n\t    with open(\"all_exp_results.csv\", \"w\", newline='') as f:\n\t        writer = csv.writer(f)\n\t        for row in results:\n\t            writer.writerow(row)\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--debug\", action=\"store_true\")\n", "    parser.add_argument(\"--seed\", type=int, default=1)\n\t    parser.add_argument(\"--N\", type=int, default=100)\n\t    args = parser.parse_args()\n\t    if args.seed is None:\n\t        args.seed = int(time.time())\n\t    main(args)\n"]}
{"filename": "train/run_glue.py", "chunked_list": ["#!/usr/bin/env python\n\t# coding=utf-8\n\t# Copyright 2020 The HuggingFace Inc. team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\" Finetuning the library models for sequence classification on GLUE.\"\"\"\n\t# You can also adapt this script on your own text classification task. Pointers for this are left as comments.\n\t# Adapted from https://github.com/huggingface/transformers/blob/main/examples/pytorch/text-classification/run_glue.py, see above\n\timport logging\n\timport os\n", "import random\n\timport sys\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Optional\n\timport datasets\n\timport evaluate\n\timport numpy as np\n\tfrom datasets import load_dataset\n\timport transformers\n\tfrom transformers import (\n", "    AutoConfig,\n\t    AutoModelForSequenceClassification,\n\t    AutoTokenizer,\n\t    DataCollatorWithPadding,\n\t    EvalPrediction,\n\t    HfArgumentParser,\n\t    PretrainedConfig,\n\t    Trainer,\n\t    TrainingArguments,\n\t    default_data_collator,\n", "    set_seed,\n\t)\n\tfrom transformers.trainer_utils import get_last_checkpoint\n\tfrom transformers.utils import check_min_version, send_example_telemetry\n\tfrom transformers.utils.versions import require_version\n\t# Will error if the minimal version of Transformers is not installed. Remove at your own risks.\n\tcheck_min_version(\"4.29.0.dev0\")\n\trequire_version(\"datasets>=1.8.0\", \"To fix: pip install -r examples/pytorch/text-classification/requirements.txt\")\n\ttask_to_keys = {\n\t    \"cola\": (\"sentence\", None),\n", "    \"mnli\": (\"premise\", \"hypothesis\"),\n\t    \"mrpc\": (\"sentence1\", \"sentence2\"),\n\t    \"qnli\": (\"question\", \"sentence\"),\n\t    \"qqp\": (\"question1\", \"question2\"),\n\t    \"rte\": (\"sentence1\", \"sentence2\"),\n\t    \"sst2\": (\"sentence\", None),\n\t    \"stsb\": (\"sentence1\", \"sentence2\"),\n\t    \"wnli\": (\"sentence1\", \"sentence2\"),\n\t}\n\tlogger = logging.getLogger(__name__)\n", "@dataclass\n\tclass DataTrainingArguments:\n\t    \"\"\"\n\t    Arguments pertaining to what data we are going to input our model for training and eval.\n\t    Using `HfArgumentParser` we can turn this class\n\t    into argparse arguments to be able to specify them on\n\t    the command line.\n\t    \"\"\"\n\t    task_name: Optional[str] = field(\n\t        default=None,\n", "        metadata={\"help\": \"The name of the task to train on: \" + \", \".join(task_to_keys.keys())},\n\t    )\n\t    dataset_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    dataset_config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    max_seq_length: int = field(\n\t        default=128,\n", "        metadata={\n\t            \"help\": (\n\t                \"The maximum total input sequence length after tokenization. Sequences longer \"\n\t                \"than this will be truncated, sequences shorter will be padded.\"\n\t            )\n\t        },\n\t    )\n\t    overwrite_cache: bool = field(\n\t        default=False, metadata={\"help\": \"Overwrite the cached preprocessed datasets or not.\"}\n\t    )\n", "    pad_to_max_length: bool = field(\n\t        default=True,\n\t        metadata={\n\t            \"help\": (\n\t                \"Whether to pad all samples to `max_seq_length`. \"\n\t                \"If False, will pad the samples dynamically when batching to the maximum length in the batch.\"\n\t            )\n\t        },\n\t    )\n\t    max_train_samples: Optional[int] = field(\n", "        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n\t    )\n\t    max_eval_samples: Optional[int] = field(\n\t        default=None,\n", "        metadata={\n\t            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n\t    )\n\t    max_predict_samples: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n", "            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of prediction examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n\t    )\n\t    train_file: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"A csv or a json file containing the training data.\"}\n\t    )\n\t    validation_file: Optional[str] = field(\n", "        default=None, metadata={\"help\": \"A csv or a json file containing the validation data.\"}\n\t    )\n\t    test_file: Optional[str] = field(default=None, metadata={\"help\": \"A csv or a json file containing the test data.\"})\n\t    def __post_init__(self):\n\t        if self.task_name is not None:\n\t            self.task_name = self.task_name.lower()\n\t            if self.task_name not in task_to_keys.keys():\n\t                raise ValueError(\"Unknown task, you should pick one in \" + \",\".join(task_to_keys.keys()))\n\t        elif self.dataset_name is not None:\n\t            pass\n", "        elif self.train_file is None or self.validation_file is None:\n\t            raise ValueError(\"Need either a GLUE task, a training/validation file or a dataset name.\")\n\t        else:\n\t            train_extension = self.train_file.split(\".\")[-1]\n\t            assert train_extension in [\"csv\", \"json\"], \"`train_file` should be a csv or a json file.\"\n\t            validation_extension = self.validation_file.split(\".\")[-1]\n\t            assert (\n\t                validation_extension == train_extension\n\t            ), \"`validation_file` should have the same extension (csv or json) as `train_file`.\"\n\t@dataclass\n", "class ModelArguments:\n\t    \"\"\"\n\t    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.\n\t    \"\"\"\n\t    model_name_or_path: str = field(\n\t        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co/models\"}\n\t    )\n\t    config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n\t    )\n", "    tokenizer_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n\t    )\n\t    cache_dir: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"Where do you want to store the pretrained models downloaded from huggingface.co\"},\n\t    )\n\t    use_fast_tokenizer: bool = field(\n\t        default=True,\n\t        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n", "    )\n\t    model_revision: str = field(\n\t        default=\"main\",\n\t        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n\t    )\n\t    use_auth_token: bool = field(\n\t        default=False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Will use the token generated when running `huggingface-cli login` (necessary to use this script \"\n", "                \"with private models).\"\n\t            )\n\t        },\n\t    )\n\t    ignore_mismatched_sizes: bool = field(\n\t        default=False,\n\t        metadata={\"help\": \"Will enable to load a pretrained model whose head dimensions are different.\"},\n\t    )\n\tdef main():\n\t    # See all possible arguments in src/transformers/training_args.py\n", "    # or by passing the --help flag to this script.\n\t    # We now keep distinct sets of args, for a cleaner separation of concerns.\n\t    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n\t    if len(sys.argv) == 2 and sys.argv[1].endswith(\".json\"):\n\t        # If we pass only one argument to the script and it's the path to a json file,\n\t        # let's parse it to get our arguments.\n\t        model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n\t    else:\n\t        model_args, data_args, training_args = parser.parse_args_into_dataclasses()\n\t    # Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The\n", "    # information sent is the one passed as arguments along with your Python/PyTorch versions.\n\t    send_example_telemetry(\"run_glue\", model_args, data_args)\n\t    # Setup logging\n\t    logging.basicConfig(\n\t        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n\t        datefmt=\"%m/%d/%Y %H:%M:%S\",\n\t        handlers=[logging.StreamHandler(sys.stdout)],\n\t    )\n\t    if training_args.should_log:\n\t        # The default of training_args.log_level is passive, so we set log level at info here to have that default.\n", "        transformers.utils.logging.set_verbosity_info()\n\t    log_level = training_args.get_process_log_level()\n\t    logger.setLevel(log_level)\n\t    datasets.utils.logging.set_verbosity(log_level)\n\t    transformers.utils.logging.set_verbosity(log_level)\n\t    transformers.utils.logging.enable_default_handler()\n\t    transformers.utils.logging.enable_explicit_format()\n\t    # Log on each process the small summary:\n\t    logger.warning(\n\t        f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"\n", "        + f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"\n\t    )\n\t    logger.info(f\"Training/evaluation parameters {training_args}\")\n\t    # Detecting last checkpoint.\n\t    last_checkpoint = None\n\t    if os.path.isdir(training_args.output_dir) and training_args.do_train and not training_args.overwrite_output_dir:\n\t        last_checkpoint = get_last_checkpoint(training_args.output_dir)\n\t        if last_checkpoint is None and len(os.listdir(training_args.output_dir)) > 0:\n\t            raise ValueError(\n\t                f\"Output directory ({training_args.output_dir}) already exists and is not empty. \"\n", "                \"Use --overwrite_output_dir to overcome.\"\n\t            )\n\t        elif last_checkpoint is not None and training_args.resume_from_checkpoint is None:\n\t            logger.info(\n\t                f\"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change \"\n\t                \"the `--output_dir` or add `--overwrite_output_dir` to train from scratch.\"\n\t            )\n\t    # Set seed before initializing model.\n\t    set_seed(training_args.seed)\n\t    # Get the datasets: you can either provide your own CSV/JSON training and evaluation files (see below)\n", "    # or specify a GLUE benchmark task (the dataset will be downloaded automatically from the datasets Hub).\n\t    #\n\t    # For CSV/JSON files, this script will use as labels the column called 'label' and as pair of sentences the\n\t    # sentences in columns called 'sentence1' and 'sentence2' if such column exists or the first two columns not named\n\t    # label if at least two columns are provided.\n\t    #\n\t    # If the CSVs/JSONs contain only one non-label column, the script does single sentence classification on this\n\t    # single column. You can easily tweak this behavior (see below)\n\t    #\n\t    # In distributed training, the load_dataset function guarantee that only one local process can concurrently\n", "    # download the dataset.\n\t    if data_args.task_name is not None:\n\t        # Downloading and loading a dataset from the hub.\n\t        raw_datasets = load_dataset(\n\t            \"glue\",\n\t            data_args.task_name,\n\t            cache_dir=model_args.cache_dir,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    elif data_args.dataset_name is not None:\n", "        # Downloading and loading a dataset from the hub.\n\t        raw_datasets = load_dataset(\n\t            data_args.dataset_name,\n\t            data_args.dataset_config_name,\n\t            cache_dir=model_args.cache_dir,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    else:\n\t        # Loading a dataset from your local files.\n\t        # CSV/JSON training and evaluation files are needed.\n", "        data_files = {\"train\": data_args.train_file, \"validation\": data_args.validation_file}\n\t        # Get the test dataset: you can provide your own CSV/JSON test file (see below)\n\t        # when you use `do_predict` without specifying a GLUE benchmark task.\n\t        if training_args.do_predict:\n\t            if data_args.test_file is not None:\n\t                train_extension = data_args.train_file.split(\".\")[-1]\n\t                test_extension = data_args.test_file.split(\".\")[-1]\n\t                assert (\n\t                    test_extension == train_extension\n\t                ), \"`test_file` should have the same extension (csv or json) as `train_file`.\"\n", "                data_files[\"test\"] = data_args.test_file\n\t            else:\n\t                raise ValueError(\"Need either a GLUE task or a test file for `do_predict`.\")\n\t        for key in data_files.keys():\n\t            logger.info(f\"load a local file for {key}: {data_files[key]}\")\n\t        if data_args.train_file.endswith(\".csv\"):\n\t            # Loading a dataset from local csv files\n\t            raw_datasets = load_dataset(\n\t                \"csv\",\n\t                data_files=data_files,\n", "                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n\t            )\n\t        else:\n\t            # Loading a dataset from local json files\n\t            raw_datasets = load_dataset(\n\t                \"json\",\n\t                data_files=data_files,\n\t                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n", "            )\n\t    # See more about loading any type of standard or custom dataset at\n\t    # https://huggingface.co/docs/datasets/loading_datasets.html.\n\t    # Labels\n\t    if data_args.task_name is not None:\n\t        is_regression = data_args.task_name == \"stsb\"\n\t        if not is_regression:\n\t            label_list = raw_datasets[\"train\"].features[\"label\"].names\n\t            num_labels = len(label_list)\n\t        else:\n", "            num_labels = 1\n\t    else:\n\t        # Trying to have good defaults here, don't hesitate to tweak to your needs.\n\t        is_regression = raw_datasets[\"train\"].features[\"label\"].dtype in [\"float32\", \"float64\"]\n\t        if is_regression:\n\t            num_labels = 1\n\t        else:\n\t            # A useful fast method:\n\t            # https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.unique\n\t            label_list = raw_datasets[\"train\"].unique(\"label\")\n", "            label_list.sort()  # Let's sort it for determinism\n\t            num_labels = len(label_list)\n\t    # Load pretrained model and tokenizer\n\t    #\n\t    # In distributed training, the .from_pretrained methods guarantee that only one local process can concurrently\n\t    # download model & vocab.\n\t    config = AutoConfig.from_pretrained(\n\t        model_args.config_name if model_args.config_name else model_args.model_name_or_path,\n\t        num_labels=num_labels,\n\t        finetuning_task=data_args.task_name,\n", "        cache_dir=model_args.cache_dir,\n\t        revision=model_args.model_revision,\n\t        use_auth_token=True if model_args.use_auth_token else None,\n\t    )\n\t    tokenizer = AutoTokenizer.from_pretrained(\n\t        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,\n\t        cache_dir=model_args.cache_dir,\n\t        use_fast=model_args.use_fast_tokenizer,\n\t        revision=model_args.model_revision,\n\t        use_auth_token=True if model_args.use_auth_token else None,\n", "    )\n\t    model = AutoModelForSequenceClassification.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        from_tf=bool(\".ckpt\" in model_args.model_name_or_path),\n\t        config=config,\n\t        cache_dir=model_args.cache_dir,\n\t        revision=model_args.model_revision,\n\t        use_auth_token=True if model_args.use_auth_token else None,\n\t        ignore_mismatched_sizes=model_args.ignore_mismatched_sizes,\n\t    )\n", "    # Preprocessing the raw_datasets\n\t    if data_args.task_name is not None:\n\t        sentence1_key, sentence2_key = task_to_keys[data_args.task_name]\n\t    else:\n\t        # Again, we try to have some nice defaults but don't hesitate to tweak to your use case.\n\t        non_label_column_names = [name for name in raw_datasets[\"train\"].column_names if name != \"label\"]\n\t        if \"sentence1\" in non_label_column_names and \"sentence2\" in non_label_column_names:\n\t            sentence1_key, sentence2_key = \"sentence1\", \"sentence2\"\n\t        else:\n\t            if len(non_label_column_names) >= 2:\n", "                sentence1_key, sentence2_key = non_label_column_names[:2]\n\t            else:\n\t                sentence1_key, sentence2_key = non_label_column_names[0], None\n\t        sentence1_key, sentence2_key = \"sentence\", None\n\t    # Padding strategy\n\t    if data_args.pad_to_max_length:\n\t        padding = \"max_length\"\n\t    else:\n\t        # We will pad later, dynamically at batch creation, to the max sequence length in each batch\n\t        padding = False\n", "    # Some models have set the order of the labels to use, so let's make sure we do use it.\n\t    label_to_id = None\n\t    if (\n\t        model.config.label2id != PretrainedConfig(num_labels=num_labels).label2id\n\t        and data_args.task_name is not None\n\t        and not is_regression\n\t    ):\n\t        # Some have all caps in their config, some don't.\n\t        label_name_to_id = {k.lower(): v for k, v in model.config.label2id.items()}\n\t        if sorted(label_name_to_id.keys()) == sorted(label_list):\n", "            label_to_id = {i: int(label_name_to_id[label_list[i]]) for i in range(num_labels)}\n\t        else:\n\t            logger.warning(\n\t                \"Your model seems to have been trained with labels, but they don't match the dataset: \",\n\t                f\"model labels: {sorted(label_name_to_id.keys())}, dataset labels: {sorted(label_list)}.\"\n\t                \"\\nIgnoring the model labels as a result.\",\n\t            )\n\t    elif data_args.task_name is None and not is_regression:\n\t        label_to_id = {v: i for i, v in enumerate(label_list)}\n\t    if label_to_id is not None:\n", "        model.config.label2id = label_to_id\n\t        model.config.id2label = {id: label for label, id in config.label2id.items()}\n\t    elif data_args.task_name is not None and not is_regression:\n\t        model.config.label2id = {l: i for i, l in enumerate(label_list)}\n\t        model.config.id2label = {id: label for label, id in config.label2id.items()}\n\t    if data_args.max_seq_length > tokenizer.model_max_length:\n\t        logger.warning(\n\t            f\"The max_seq_length passed ({data_args.max_seq_length}) is larger than the maximum length for the\"\n\t            f\"model ({tokenizer.model_max_length}). Using max_seq_length={tokenizer.model_max_length}.\"\n\t        )\n", "    max_seq_length = min(data_args.max_seq_length, tokenizer.model_max_length)\n\t    def preprocess_function(examples):\n\t        # Tokenize the texts\n\t        args = (\n\t            (examples[sentence1_key],) if sentence2_key is None else (examples[sentence1_key], examples[sentence2_key])\n\t        )\n\t        result = tokenizer(*args, padding=padding, max_length=max_seq_length, truncation=True)\n\t        # Map labels to IDs (not necessary for GLUE tasks)\n\t        if label_to_id is not None and \"label\" in examples:\n\t            result[\"label\"] = [(label_to_id[l] if l != -1 else -1) for l in examples[\"label\"]]\n", "        return result\n\t    with training_args.main_process_first(desc=\"dataset map pre-processing\"):\n\t        raw_datasets = raw_datasets.map(\n\t            preprocess_function,\n\t            batched=True,\n\t            load_from_cache_file=not data_args.overwrite_cache,\n\t            desc=\"Running tokenizer on dataset\",\n\t        )\n\t    if training_args.do_train:\n\t        if \"train\" not in raw_datasets:\n", "            raise ValueError(\"--do_train requires a train dataset\")\n\t        train_dataset = raw_datasets[\"train\"]\n\t        if data_args.max_train_samples is not None:\n\t            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n\t            train_dataset = train_dataset.select(range(max_train_samples))\n\t    if training_args.do_eval:\n\t        if \"validation\" not in raw_datasets and \"validation_matched\" not in raw_datasets:\n\t            raise ValueError(\"--do_eval requires a validation dataset\")\n\t        eval_dataset = raw_datasets[\"validation_matched\" if data_args.task_name == \"mnli\" else \"validation\"]\n\t        if data_args.max_eval_samples is not None:\n", "            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n\t            eval_dataset = eval_dataset.select(range(max_eval_samples))\n\t    if training_args.do_predict or data_args.task_name is not None or data_args.test_file is not None:\n\t        if \"test\" not in raw_datasets and \"test_matched\" not in raw_datasets:\n\t            raise ValueError(\"--do_predict requires a test dataset\")\n\t        predict_dataset = raw_datasets[\"test_matched\" if data_args.task_name == \"mnli\" else \"test\"]\n\t        if data_args.max_predict_samples is not None:\n\t            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n\t            predict_dataset = predict_dataset.select(range(max_predict_samples))\n\t    # Log a few random samples from the training set:\n", "    if training_args.do_train:\n\t        for index in random.sample(range(len(train_dataset)), 3):\n\t            logger.info(f\"Sample {index} of the training set: {train_dataset[index]}.\")\n\t    # Get the metric function\n\t    if data_args.task_name is not None:\n\t        metric = evaluate.load(\"glue\", data_args.task_name)\n\t    elif is_regression:\n\t        metric = evaluate.load(\"mse\")\n\t    else:\n\t        metric = evaluate.load(\"accuracy\")\n", "    # You can define your custom compute_metrics function. It takes an `EvalPrediction` object (a namedtuple with a\n\t    # predictions and label_ids field) and has to return a dictionary string to float.\n\t    def compute_metrics(p: EvalPrediction):\n\t        preds = p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions\n\t        preds = np.squeeze(preds) if is_regression else np.argmax(preds, axis=1)\n\t        result = metric.compute(predictions=preds, references=p.label_ids)\n\t        if len(result) > 1:\n\t            result[\"combined_score\"] = np.mean(list(result.values())).item()\n\t        return result\n\t    # Data collator will default to DataCollatorWithPadding when the tokenizer is passed to Trainer, so we change it if\n", "    # we already did the padding.\n\t    if data_args.pad_to_max_length:\n\t        data_collator = default_data_collator\n\t    elif training_args.fp16:\n\t        data_collator = DataCollatorWithPadding(tokenizer, pad_to_multiple_of=8)\n\t    else:\n\t        data_collator = None\n\t    # Initialize our Trainer\n\t    trainer = Trainer(\n\t        model=model,\n", "        args=training_args,\n\t        train_dataset=train_dataset if training_args.do_train else None,\n\t        eval_dataset=eval_dataset if training_args.do_eval else None,\n\t        compute_metrics=compute_metrics,\n\t        tokenizer=tokenizer,\n\t        data_collator=data_collator,\n\t    )\n\t    # Training\n\t    if training_args.do_train:\n\t        checkpoint = None\n", "        if training_args.resume_from_checkpoint is not None:\n\t            checkpoint = training_args.resume_from_checkpoint\n\t        elif last_checkpoint is not None:\n\t            checkpoint = last_checkpoint\n\t        train_result = trainer.train(resume_from_checkpoint=checkpoint)\n\t        metrics = train_result.metrics\n\t        max_train_samples = (\n\t            data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)\n\t        )\n\t        metrics[\"train_samples\"] = min(max_train_samples, len(train_dataset))\n", "        trainer.save_model()  # Saves the tokenizer too for easy upload\n\t        trainer.log_metrics(\"train\", metrics)\n\t        trainer.save_metrics(\"train\", metrics)\n\t        trainer.save_state()\n\t    # Evaluation\n\t    if training_args.do_eval:\n\t        logger.info(\"*** Evaluate ***\")\n\t        # Loop to handle MNLI double evaluation (matched, mis-matched)\n\t        tasks = [data_args.task_name]\n\t        eval_datasets = [eval_dataset]\n", "        if data_args.task_name == \"mnli\":\n\t            tasks.append(\"mnli-mm\")\n\t            valid_mm_dataset = raw_datasets[\"validation_mismatched\"]\n\t            if data_args.max_eval_samples is not None:\n\t                max_eval_samples = min(len(valid_mm_dataset), data_args.max_eval_samples)\n\t                valid_mm_dataset = valid_mm_dataset.select(range(max_eval_samples))\n\t            eval_datasets.append(valid_mm_dataset)\n\t            combined = {}\n\t        for eval_dataset, task in zip(eval_datasets, tasks):\n\t            metrics = trainer.evaluate(eval_dataset=eval_dataset)\n", "            max_eval_samples = (\n\t                data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)\n\t            )\n\t            metrics[\"eval_samples\"] = min(max_eval_samples, len(eval_dataset))\n\t            if task == \"mnli-mm\":\n\t                metrics = {k + \"_mm\": v for k, v in metrics.items()}\n\t            if task is not None and \"mnli\" in task:\n\t                combined.update(metrics)\n\t            trainer.log_metrics(\"eval\", metrics)\n\t            trainer.save_metrics(\"eval\", combined if task is not None and \"mnli\" in task else metrics)\n", "    if training_args.do_predict:\n\t        logger.info(\"*** Predict ***\")\n\t        # Loop to handle MNLI double evaluation (matched, mis-matched)\n\t        tasks = [data_args.task_name]\n\t        predict_datasets = [predict_dataset]\n\t        if data_args.task_name == \"mnli\":\n\t            tasks.append(\"mnli-mm\")\n\t            predict_datasets.append(raw_datasets[\"test_mismatched\"])\n\t        for predict_dataset, task in zip(predict_datasets, tasks):\n\t            # Removing the `label` columns because it contains -1 and Trainer won't like that.\n", "            predict_dataset = predict_dataset.remove_columns(\"label\")\n\t            predictions = trainer.predict(predict_dataset, metric_key_prefix=\"predict\").predictions\n\t            predictions = np.squeeze(predictions) if is_regression else np.argmax(predictions, axis=1)\n\t            output_predict_file = os.path.join(training_args.output_dir, f\"predict_results_{task}.txt\")\n\t            if trainer.is_world_process_zero():\n\t                with open(output_predict_file, \"w\") as writer:\n\t                    logger.info(f\"***** Predict results {task} *****\")\n\t                    writer.write(\"index\\tprediction\\n\")\n\t                    for index, item in enumerate(predictions):\n\t                        if is_regression:\n", "                            writer.write(f\"{index}\\t{item:3.3f}\\n\")\n\t                        else:\n\t                            item = label_list[item]\n\t                            writer.write(f\"{index}\\t{item}\\n\")\n\t    kwargs = {\"finetuned_from\": model_args.model_name_or_path, \"tasks\": \"text-classification\"}\n\t    if data_args.task_name is not None:\n\t        kwargs[\"language\"] = \"en\"\n\t        kwargs[\"dataset_tags\"] = \"glue\"\n\t        kwargs[\"dataset_args\"] = data_args.task_name\n\t        kwargs[\"dataset\"] = f\"GLUE {data_args.task_name.upper()}\"\n", "    if training_args.push_to_hub:\n\t        trainer.push_to_hub(**kwargs)\n\t    else:\n\t        trainer.create_model_card(**kwargs)\n\tdef _mp_fn(index):\n\t    # For xla_spawn (TPUs)\n\t    main()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "train/opt_config.py", "chunked_list": ["\"\"\"\n\tThe OPT model configurations and weight downloading utilities.\n\tSome functions are adopted from https://github.com/alpa-projects/alpa/tree/main/examples/llm_serving/model.\n\t\"\"\"\n\timport argparse\n\timport dataclasses\n\timport glob\n\timport os\n\timport shutil\n\timport numpy as np\n", "from tqdm import tqdm\n\t@dataclasses.dataclass(frozen=True)\n\tclass OptConfig:\n\t    name: str = \"opt-125m\"\n\t    num_hidden_layers: int = 12\n\t    max_seq_len: int = 2048\n\t    hidden_size: int = 768\n\t    n_head: int = 12\n\t    input_dim: int = 768\n\t    ffn_embed_dim: int = 3072\n", "    pad: int = 1\n\t    activation_fn: str = 'relu'\n\t    vocab_size: int = 50272\n\t    layer_norm_eps: float = 0.00001\n\t    pad_token_id: int = 1\n\t    dtype: type = np.float16\n\t    def model_bytes(self):\n\t        h = self.input_dim\n\t        return \t2 * (self.num_hidden_layers * (\n\t        # self-attention\n", "        h * (3 * h + 1) + h * (h + 1) +\n\t        # mlp\n\t        h * (4 * h + 1) + h * 4 * (h + 1) +\n\t        # layer norm\n\t        h * 4) +\n\t        # embedding\n\t        self.vocab_size * (h + 1))\n\t    def cache_bytes(self, batch_size, seq_len):\n\t        return 2 * batch_size * seq_len * self.num_hidden_layers * self.input_dim * 2\n\t    def hidden_bytes(self, batch_size, seq_len):\n", "        return batch_size * seq_len * self.input_dim * 2\n\tdef get_opt_config(name, **kwargs):\n\t    if \"/\" in name:\n\t        name = name.split(\"/\")[1]\n\t    name = name.lower()\n\t    # Handle opt-iml-30b and opt-iml-max-30b\n\t    if \"-iml-max\" in name:\n\t        arch_name = name.replace(\"-iml-max\", \"\")\n\t    elif \"-iml\" in name:\n\t        arch_name = name.replace(\"-iml\", \"\")\n", "    else:\n\t        arch_name = name\n\t    if arch_name == \"opt-125m\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=12, n_head=12,\n\t            hidden_size=768, input_dim=768, ffn_embed_dim=768 * 4,\n\t        )\n\t    elif arch_name == \"opt-350m\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=24, n_head=16,\n", "            hidden_size=1024, input_dim=1024, ffn_embed_dim=1024 * 4,\n\t        )\n\t        raise NotImplementedError(\"Not implemented because this model \"\n\t                                  \"has a different architecture\")\n\t    elif arch_name == \"opt-1.3b\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=24, n_head=32,\n\t            hidden_size=2048, input_dim=2048, ffn_embed_dim=2048 * 4,\n\t        )\n\t    elif arch_name == \"opt-2.7b\":\n", "        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=32, n_head=32,\n\t            hidden_size=2560, input_dim=2560, ffn_embed_dim=2560 * 4,\n\t        )\n\t    elif arch_name == \"opt-6.7b\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=32, n_head=32,\n\t            hidden_size=4096, input_dim=4096, ffn_embed_dim=4096 * 4,\n\t        )\n\t    elif arch_name == \"opt-13b\":\n", "        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=40, n_head=40,\n\t            hidden_size=5120, input_dim=5120, ffn_embed_dim=5120 * 4,\n\t        )\n\t    elif arch_name == \"opt-30b\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=48, n_head=56,\n\t            hidden_size=7168, input_dim=7168, ffn_embed_dim=7168 * 4,\n\t        )\n\t    elif arch_name == \"galactica-30b\":\n", "        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=48, n_head=56,\n\t            hidden_size=7168, input_dim=7168, ffn_embed_dim=7168 * 4, vocab_size=50000,\n\t        )\n\t    elif arch_name == \"opt-66b\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=64, n_head=72,\n\t            hidden_size=9216, input_dim=9216, ffn_embed_dim=9216 * 4,\n\t        )\n\t    elif arch_name == \"opt-175b\":\n", "        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=96, n_head=96,\n\t            hidden_size=12288, input_dim=12288, ffn_embed_dim=12288 * 4,\n\t        )\n\t    elif arch_name == \"opt-175b-stage\":\n\t        config = OptConfig(name=name,\n\t            max_seq_len=2048, num_hidden_layers=24, n_head=96,\n\t            hidden_size=12288, input_dim=12288, ffn_embed_dim=12288 * 4,\n\t        )\n\t    else:\n", "        raise ValueError(f\"Invalid model name: {name}\")\n\t    return dataclasses.replace(config, **kwargs)\n\tdef download_opt_weights_old(model_name, path):\n\t    \"\"\"Download weights from huggingface.\"\"\"\n\t    import torch\n\t    from transformers import OPTForCausalLM, BloomForCausalLM\n\t    if \"/\" in model_name:\n\t        model_name = model_name.split(\"/\")[1].lower()\n\t    path = os.path.join(path, f\"{model_name}-np\")\n\t    path = os.path.abspath(os.path.expanduser(path))\n", "    if \"opt\" in model_name:\n\t        hf_model_name = \"facebook/\" + model_name\n\t        model_class = OPTForCausalLM\n\t    elif \"bloom\" in model_name:\n\t        hf_model_name = \"bigscience/\" + model_name\n\t        model_class = BloomForCausalLM\n\t    elif \"galactica\" in model_name:\n\t        hf_model_name = \"facebook/\" + model_name\n\t    else:\n\t        raise ValueError(\"Invalid model name: {model_name}\")\n", "    print(f\"Load the pre-trained pytorch weights of {model_name} from huggingface. \"\n\t          f\"The downloading and cpu loading can take dozens of minutes. \"\n\t          f\"If it seems to get stuck, you can monitor the progress by \"\n\t          f\"checking the memory usage of this process.\")\n\t    disable_torch_init()\n\t    model = model_class.from_pretrained(hf_model_name, torch_dtype=torch.float16,\n\t                                        _fast_init=True)\n\t    restore_torch_init()\n\t    os.makedirs(path, exist_ok=True)\n\t    print(f\"Convert the weights to numpy format under {path} ...\")\n", "    if \"opt\" in model_name:\n\t        for name, param in tqdm(list(model.model.named_parameters())):\n\t            name = name.replace(\"decoder.final_layer_norm\", \"decoder.layer_norm\")\n\t            param_path = os.path.join(path, name)\n\t            with open(param_path, \"wb\") as f:\n\t                np.save(f, param.cpu().detach().numpy())\n\t    elif \"galactica\" in model_name:\n\t        for name, param in tqdm(list(model.model.named_parameters())):\n\t            name = name.replace(\"decoder.final_layer_norm\", \"decoder.layer_norm\")\n\t            param_path = os.path.join(path, name)\n", "            with open(param_path, \"wb\") as f:\n\t                np.save(f, param.cpu().detach().numpy())\n\t    elif \"bloom\" in model_name:\n\t        for name, param in tqdm(list(model.transformer.named_parameters())):\n\t            param_path = os.path.join(path, name)\n\t            with open(param_path, \"wb\") as f:\n\t                np.save(f, param.cpu().detach().numpy())\n\t    else:\n\t        raise ValueError(\"Invalid model name: {model_name}\")\n\tglobal torch_linear_init_backup\n", "global torch_layer_norm_init_backup\n\tdef disable_torch_init():\n\t    \"\"\"\n\t    Disable the redundant torch default initialization to accelerate model creation.\n\t    \"\"\"\n\t    import torch\n\t    global torch_linear_init_backup\n\t    global torch_layer_norm_init_backup\n\t    torch_linear_init_backup = torch.nn.Linear.reset_parameters\n\t    setattr(torch.nn.Linear, \"reset_parameters\", lambda self: None)\n", "    torch_layer_norm_init_backup = torch.nn.LayerNorm.reset_parameters\n\t    setattr(torch.nn.LayerNorm, \"reset_parameters\", lambda self: None)\n\tdef restore_torch_init():\n\t    \"\"\"Rollback the change made by disable_torch_init.\"\"\"\n\t    import torch\n\t    setattr(torch.nn.Linear, \"reset_parameters\", torch_linear_init_backup)\n\t    setattr(torch.nn.LayerNorm, \"reset_parameters\", torch_layer_norm_init_backup)\n\tdef disable_hf_opt_init():\n\t    \"\"\"\n\t    Disable the redundant default initialization to accelerate model creation.\n", "    \"\"\"\n\t    import transformers\n\t    setattr(transformers.models.opt.modeling_opt.OPTPreTrainedModel,\n\t            \"_init_weights\", lambda *args, **kwargs: None)\n\tdef download_opt_weights(model_name, path):\n\t    from huggingface_hub import snapshot_download\n\t    import torch\n\t    print(f\"Load the pre-trained pytorch weights of {model_name} from huggingface. \"\n\t          f\"The downloading and cpu loading can take dozens of minutes. \"\n\t          f\"If it seems to get stuck, you can monitor the progress by \"\n", "          f\"checking the memory usage of this process.\")\n\t    if \"opt\" in model_name:\n\t        hf_model_name = \"facebook/\" + model_name\n\t    elif \"galactica\" in model_name:\n\t        hf_model_name = \"facebook/\" + model_name\n\t    folder = snapshot_download(hf_model_name, allow_patterns=\"*.bin\")\n\t    bin_files = glob.glob(os.path.join(folder, \"*.bin\"))\n\t    if \"/\" in model_name:\n\t        model_name = model_name.split(\"/\")[1].lower()\n\t    path = os.path.join(path, f\"{model_name}-np\")\n", "    path = os.path.abspath(os.path.expanduser(path))\n\t    os.makedirs(path, exist_ok=True)\n\t    for bin_file in tqdm(bin_files, desc=\"Convert format\"):\n\t        state = torch.load(bin_file)\n\t        for name, param in tqdm(state.items(), leave=False):\n\t            name = name.replace(\"model.\", \"\")\n\t            name = name.replace(\"decoder.final_layer_norm\", \"decoder.layer_norm\")\n\t            param_path = os.path.join(path, name)\n\t            with open(param_path, \"wb\") as f:\n\t                np.save(f, param.cpu().detach().numpy())\n", "            # shared embedding\n\t            if \"decoder.embed_tokens.weight\" in name:\n\t                shutil.copy(param_path, param_path.replace(\n\t                    \"decoder.embed_tokens.weight\", \"lm_head.weight\"))\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--model\", type=str)\n\t    parser.add_argument(\"--path\", type=str, default=\"~/opt_weights\")\n\t    args = parser.parse_args()\n\t    download_opt_weights(args.model, args.path)\n"]}
{"filename": "train/data_to_flops.py", "chunked_list": ["import argparse\n\timport copy\n\timport json\n\timport os\n\tfrom transformers import AutoTokenizer\n\tfrom opt_config import get_opt_config\n\tT = 1000 ** 4\n\tdef get_seq_len(tokenizer, sentence: str):\n\t    input_ids = tokenizer(sentence, return_tensors=\"pt\").input_ids\n\t    return len(input_ids[0])\n", "def flops_estimate(model_name, seq_len):\n\t    config = get_opt_config(model_name)\n\t    l = config.num_hidden_layers\n\t    h1 = config.hidden_size\n\t    h2 = config.ffn_embed_dim\n\t    mm = l * (8 * seq_len * h1 ** 2 + 4 * seq_len * h1 * h2)\n\t    bmm = l * (4 * seq_len ** 2 * h1)\n\t    return (mm + bmm) / T\n\tdef main(args):\n\t    data = []\n", "    with open(args.file, \"r\") as f:\n\t        lines = f.readlines()\n\t        for line in lines:\n\t            data.append(json.loads(line))\n\t    tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-1.3b\", use_fast=False)\n\t    data_flops = []\n\t    for sample in data:\n\t        newsample = copy.deepcopy(sample)\n\t        seq_len = get_seq_len(tokenizer, sample[\"sentence\"])\n\t        newsample[\"cost_small\"] = flops_estimate(args.small_model, seq_len)\n", "        newsample[\"cost_large\"] = flops_estimate(args.large_model, seq_len)\n\t        data_flops.append(newsample)\n\t    assert len(data) == len(data_flops)\n\t    with open(args.output, \"w\") as f:\n\t        for sample in data_flops:\n\t            json.dump(sample, f)\n\t            f.write(\"\\n\")\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--file\", type=str, default=\"../data/lambda_opt_clean_train.json\")\n", "    parser.add_argument(\"--output\", type=str, default=\"../data/lambda_opt_flops_clean_train.json\")\n\t    parser.add_argument(\"--small-model\", type=str, default=\"facebook/opt-1.3b\")\n\t    parser.add_argument(\"--large-model\", type=str, default=\"facebook/opt-13b\")\n\t    args = parser.parse_args()\n\t    main(args)\n"]}
{"filename": "train/data_clean.py", "chunked_list": ["import argparse\n\timport json\n\timport random\n\timport numpy as np\n\tfrom data_converter import get_model_name\n\tdef data_clean(raw_data, task, small_model, large_model):\n\t    if task == \"next_word\" or task == \"1-round-chat\":\n\t        clean_data = []\n\t        for sample in raw_data:\n\t            record1 = sample[\"records\"][small_model]\n", "            record2 = sample[\"records\"][large_model]\n\t            assert record1[0] == record2[0]\n\t            clean_data.append({\"sentence\": record1[0],\n\t                               \"label\": record1[3],\n\t                               \"correct_small\": record1[3],\n\t                               \"correct_large\": record2[3],\n\t                               \"cost_small\": record1[2],\n\t                               \"cost_large\": record2[2],\n\t                               \"idx\": sample[\"id\"],\n\t                              })\n", "    else:\n\t        raise Exception(f\"unrecognized task {task}\")\n\t    return clean_data\n\tdef get_portion(samples, small, large):\n\t    ret = []\n\t    for sample in samples:\n\t        if (sample[\"correct_small\"] == small and\n\t            sample[\"correct_large\"] == large):\n\t            ret.append(sample)\n\t    return ret\n", "def main(args):\n\t    with open(args.raw_data_path, \"r\") as f:\n\t        raw_data = json.load(f)\n\t    if \"lambda\" in args.raw_data_path:\n\t        clean_data = data_clean(raw_data, \"next_word\", \"facebook/opt-1.3b\", \"facebook/opt-13b\")\n\t    elif \"oasst\" in args.raw_data_path:\n\t        models = args.raw_data_path.split(\".\")[-2].split(\"_\")[-2:]\n\t        small_model = get_model_name(models[0])\n\t        large_model = get_model_name(models[1])\n\t        clean_data = data_clean(raw_data, \"1-round-chat\", small_model, large_model)\n", "    else:\n\t        raise Exception(\"unrecognized raw data format\")\n\t    sclc = get_portion(clean_data, 1, 1)\n\t    sclw = get_portion(clean_data, 1, 0)\n\t    swlc = get_portion(clean_data, 0, 1)\n\t    swlw = get_portion(clean_data, 0, 0)\n\t    print(\"== before ==\")\n\t    print(f\"#total: {len(clean_data)}\")\n\t    print(f\"small correct, large correct: {len(sclc)}\")\n\t    print(f\"small correct, large wrong  : {len(sclw)}\")\n", "    print(f\"small wrong  , large correct: {len(swlc)}\")\n\t    print(f\"small wrong  , large wrong  : {len(swlw)}\")\n\t    np.random.seed(0)\n\t    if args.adjust_small_correct:\n\t        num_sample = len(clean_data)\n\t        num_sample = min((len(sclc) + len(sclw)) / (args.adjust_small_correct),\n\t                         (len(swlc) + len(swlw)) / (1 - args.adjust_small_correct))\n\t        target_sclc = int(num_sample * args.adjust_small_correct * (len(sclc) / (len(sclc) + len(sclw))))\n\t        target_sclw = int(num_sample * args.adjust_small_correct * (len(sclw) / (len(sclc) + len(sclw))))\n\t        target_swlc = int(num_sample * args.adjust_small_correct * (len(swlc) / (len(swlc) + len(swlw))))\n", "        target_swlw = int(num_sample * args.adjust_small_correct * (len(swlw) / (len(swlc) + len(swlw))))\n\t        sclc = list(np.random.choice(sclc, target_sclc, replace=False))\n\t        sclw = list(np.random.choice(sclw, target_sclw, replace=False))\n\t        swlc = list(np.random.choice(swlc, target_swlc, replace=False))\n\t        swlw = list(np.random.choice(swlw, target_swlw, replace=False))\n\t        clean_data = sclc + sclw + swlc + swlw\n\t        print(\"== after ==\")\n\t        print(f\"#total: {len(clean_data)}\")\n\t        print(f\"small correct, large correct: {len(sclc)}\")\n\t        print(f\"small correct, large wrong  : {len(sclw)}\")\n", "        print(f\"small wrong  , large correct: {len(swlc)}\")\n\t        print(f\"small wrong  , large wrong  : {len(swlw)}\")\n\t    perm = np.random.permutation(len(clean_data))\n\t    clean_data = [clean_data[i] for i in perm]\n\t    num_sample = len(clean_data)\n\t    train = clean_data[:int(num_sample * 0.9)]\n\t    valid = clean_data[int(num_sample * 0.9):int(num_sample * 0.99)]\n\t    test = clean_data[int(num_sample * 0.99):]\n\t    with open(args.clean_data_path, \"w\") as f:\n\t        for sample in clean_data:\n", "            json.dump(sample, f)\n\t            f.write(\"\\n\")\n\t    print(f\"cleaned data dumped to {args.clean_data_path}\")\n\t    train_data_path = args.clean_data_path[:-len(\".json\")] + \"_train.json\"\n\t    valid_data_path = args.clean_data_path[:-len(\".json\")] + \"_valid.json\"\n\t    test_data_path = args.clean_data_path[:-len(\".json\")] + \"_test.json\"\n\t    for kind in [\"train\", \"valid\", \"test\"]:\n\t        data_path = eval(kind + \"_data_path\")\n\t        with open(data_path, \"w\") as f:\n\t            for sample in eval(kind):\n", "                json.dump(sample, f)\n\t                f.write(\"\\n\")\n\t        print(f\"{kind} data dumped to {data_path}\")\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--raw-data-path\", type=str, default=\"../data/lambda_opt.json\")\n\t    parser.add_argument(\"--clean-data-path\", type=str, default=None)\n\t    parser.add_argument(\"--adjust-small-correct\", type=float, required=True)\n\t    args = parser.parse_args()\n\t    if args.clean_data_path is None:\n", "        args.clean_data_path = args.raw_data_path.split(\"/\")[-1].split(\".\")[0] + \"_clean.json\"\n\t    main(args)\n"]}
{"filename": "train/stats.py", "chunked_list": ["import argparse\n\timport json\n\timport numpy as np\n\timport os\n\timport re\n\tdef print_basics(args):\n\t    with open(args.data_path, \"r\") as f:\n\t        data = f.readlines()\n\t        samples = [json.loads(sample) for sample in data]\n\t    print(f\"Stats about {args.data_path}\")\n", "    num_sample = len(samples)\n\t    print(f\"num sample: {num_sample}\")\n\t    labels = [sample[\"label\"] for sample in samples]\n\t    print(\"num label-1 samples\", sum(labels))\n\tdef print_predicts(args):\n\t    test_data_path = args.data_path[:-len(\".json\")] + \"_test.json\"\n\t    with open(test_data_path, \"r\") as f:\n\t        test_data = f.readlines()\n\t        test_samples = [json.loads(sample) for sample in test_data]\n\t    gt_labels = np.array([sample[\"label\"] for sample in test_samples])\n", "    predicts_path = os.path.join(args.model_ckpt, \"predict_results_None.txt\")\n\t    with open(predicts_path, \"r\") as f:\n\t        lines = f.readlines()\n\t        predicts = []\n\t        for line in lines:\n\t            value = re.findall(r'\\d+', line)\n\t            if len(value) > 0:\n\t                predicts.append(int(value[1]))\n\t    predicts = np.array(predicts)\n\t    assert len(gt_labels) == len(predicts)\n", "    print(\"num label-1 samples in test data\", np.sum(gt_labels))\n\t    print(\"num label-1 samples in predictions\", np.sum(predicts))\n\t    accuracy = np.sum(gt_labels == predicts) / len(test_samples)\n\t    print(f\"predict accuracy: {accuracy:.2f}\")\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--data-path\", type=str, default=\"../data/lambda_opt_clean.json\")\n\t    parser.add_argument(\"--model-ckpt\", type=str, default=\"models/choice_model\")\n\t    args = parser.parse_args()\n\t    print_basics(args)\n", "    if os.path.exists(args.model_ckpt):\n\t        print_predicts(args)\n"]}
{"filename": "train/data_converter.py", "chunked_list": ["import argparse\n\timport json\n\timport os\n\tdef is_float(s):\n\t    try:\n\t        float(s)\n\t        return True\n\t    except ValueError:\n\t        return False\n\tdef get_model_name(model):\n", "    if model in \"flan-t5-xxl\":\n\t        return \"flan-t5-xxl\"\n\t    elif model in \"fastchat-t5-3b-v1.0\":\n\t        return \"fastchat-t5-3b-v1.0\"\n\t    elif model in \"vicuna-13b-v1.1\":\n\t        return \"vicuna-13b-v1.1\"\n\t    else:\n\t        raise Exception(\"unrecognized model\")\n\tdef is_correct(gpt4_eval):\n\t    if not is_float(gpt4_eval[\"score\"]):\n", "        return \"NA\"\n\t    return int(float(gpt4_eval[\"score\"]) > 5.9)\n\tdef main(args):\n\t    models = [get_model_name(args.model_pair[0]),\n\t              get_model_name(args.model_pair[1])]\n\t    filenames = [models[0] + f\"_prompts-{args.num_query}_output_tagged.json\",\n\t                 models[1] + f\"_prompts-{args.num_query}_output_tagged.json\"]\n\t    files = [None] * 2\n\t    data = [None] * 2\n\t    samples= [None] * 2\n", "    for i in range(2):\n\t        files[i] = os.path.join(args.exp_dir, filenames[i])\n\t        with open(files[i], \"r\") as f:\n\t            data[i] = json.load(f)\n\t            assert args.model_pair[i] in data[i][\"model_name\"].split(\"/\")[-1]\n\t            samples[i] = data[i][\"samples\"]\n\t    assert len(samples[0]) == len(samples[1])\n\t    raw_data = []\n\t    for i in range(len(samples[0])):\n\t        prompt = samples[0][i][\"query\"]\n", "        assert prompt == samples[1][i][\"query\"]\n\t        answer = [None] * 2\n\t        time = [None] * 2\n\t        correct = [None] * 2\n\t        for j in range(2):\n\t            answer[j] = samples[j][i][\"output\"]\n\t            time[j] = samples[j][i][\"infer_time\"]\n\t            correct[j] = is_correct(samples[j][i][\"gpt4_eval\"])\n\t        sample = {\"id\": i, \"records\": {}}\n\t        for j in range(2):\n", "            if correct[j] == \"NA\": break\n\t            sample[\"records\"][models[j]] = [\n\t                prompt, answer[j], time[j], correct[j], None]\n\t        if correct[j] == \"NA\": continue\n\t        raw_data.append(sample)\n\t    with open(args.outfile, \"w\") as f:\n\t        json.dump(raw_data, f)\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--exp-dir\", type=str, default=\"../real_run/exp/oasst/a100\")\n", "    parser.add_argument(\"--outfile\", type=str, default=None)\n\t    parser.add_argument(\"--model-pair\", nargs=2, type=str, required=True,\n\t                        help=\"small first, then large model name\")\n\t    parser.add_argument(\"--num-query\", type=int, required=True)\n\t    args = parser.parse_args()\n\t    if args.outfile is None:\n\t        device = args.exp_dir.split(\"/\")[-1]\n\t        args.outfile = f\"../data/oasst_{device}_{args.model_pair[0]}_{args.model_pair[1]}.json\"\n\t    main(args)\n"]}
