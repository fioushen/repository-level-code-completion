{"filename": "thoughttree/History.py", "chunked_list": ["from tools import shorter, logarithmic_length\n\t# class ExtendedList(list):\n\t#     def __init__(self, initial_data):\n\t#         super().__init__(initial_data)  # call the parent class (list) constructor\n\t#\n\t# my_list = ExtendedList([1, 2, 3, 4, 5])\n\tdef log_history_compact(history):\n\t    for message in history:\n\t        text = message['content']\n\t        print(f\"{message['role']}: {shorter(text, 120)} {logarithmic_length(text, 120)}\")\n", "    print()\n\tdef history_from_args(system=\"\", message=\"\") :\n\t    history = [\n\t        {'role': 'system', 'content': system},\n\t        {'role': 'user', 'content': message}\n\t    ]\n\t    return history\n"]}
{"filename": "thoughttree/Ui.py", "chunked_list": ["import os\n\timport tkinter as tk\n\tfrom os.path import join\n\tfrom tkinter import messagebox\n\tclass Ui(tk.Frame):\n\t    icon = None\n\t    WINDOW_ICON = None\n\t    current_open_uis = []\n\t    def __init__(self, name=\"\", icon_path=None):\n\t        if tk._default_root:\n", "            self.first_window = False\n\t            self.root = tk.Toplevel()\n\t        else:\n\t            self.first_window = True\n\t            self.root = tk.Tk()\n\t        tk.Frame.__init__(self, self.root)\n\t        self.is_root_destroyed = False\n\t        Ui.current_open_uis.append(self)\n\t        name = f\"{name} {len(Ui.current_open_uis)}\"\n\t        self.root.title(name)\n", "        self.root.wm_title(name)\n\t        self.root.protocol(\"WM_DELETE_WINDOW\", self.close)\n\t        try:\n\t            self.set_icon(icon_path)\n\t        except:\n\t            print(\"Error loading icon.\")\n\t        # def close(event):\n\t        #     self.root.destroy()\n\t        # self.root.bind(\"<Escape>\", close)\n\t    def toTop(self):\n", "        self.root.attributes(\"-topmost\", True)\n\t        self.root.attributes(\"-topmost\", False)\n\t    def close(self, event=None):\n\t        result = messagebox.askyesno(\"Quit\", \"Are you sure you want to quit?\", parent=self)\n\t        if result:\n\t            Ui.current_open_uis.remove(self)\n\t            self.is_root_destroyed = True\n\t            self.root.destroy()\n\t    def set_icon(self, window_icon):\n\t        if not window_icon:\n", "            return\n\t        def get_icon_file_name(icon_base_name):\n\t            return join(os.path.dirname(os.path.abspath(__file__)), icon_base_name)\n\t        if Ui.icon:\n\t            return\n\t        try:\n\t            abs_name = str(get_icon_file_name(window_icon))\n\t            photo_image = tk.PhotoImage(file=abs_name)\n\t            Ui.icon = photo_image\n\t            self.root.iconphoto(True, photo_image) # Note: has no effect when running in PyCharm IDE\n", "        except Exception as e:\n\t            print(\"Error loading icon:\", e)\n"]}
{"filename": "thoughttree/menu_help.py", "chunked_list": ["# The help text are generated by GPT-4, based on the source code of the menu (which does\n\t# not contain comments) and minimal prompting.\n\tmenu_help = {\n\t# # Main Menus\n\t#     \"File\": \"Contains options for creating new windows or tabs, saving chat content, and closing the application.\",\n\t#     \"Edit\": \"Provides options for manipulating text, such as cut, copy, paste, delete, and undo/redo actions.\",\n\t#     \"View\": \"Allows you to customize the display of the application, including font size and visibility of different panes.\",\n\t#     \"Navigate\": \"Provides options for moving through the chat, such as jumping to similar lines or moving between messages.\",\n\t#     \"Chat\": \"Contains options for managing and controlling the chat, including completing lines, forking conversations, and cancelling models.\",\n\t#     \"Query\": \"Allows you to adjust query parameters, such as max tokens and temperature.\",\n", "#     \"Models\": \"Provides options for managing the GPT models used in the application.\",\n\t#     \"Help\": \"Contains options for accessing application help, debug info, and about details.\",\n\t# File\n\t    \"New Window\": \"Opens a new Thoughttree window, allowing you to work on multiple chats simultaneously.\\nEach new window operates independently, enabling you to manage and organize your conversations more efficiently.\",\n\t    \"New Main Tab\": \"Opens a new main tab in the current window, providing a separate workspace within the same window.\\nThis allows you to keep multiple chats organized and accessible without opening additional windows.\",\n\t    \"Save Chat\": \"Saves the entire chat content to a file, allowing you to store and review conversations later.\\nThe saved file can be opened and edited in any text editor, making it easy to share or reference the chat content.\",\n\t    \"Save Message\": \"Saves a selected section of the chat to a file, useful for extracting specific parts of a conversation.\",\n\t    \"Save Selection\": \"Saves the selected text in the chat to a file, allowing you to save specific parts of the conversation for later reference or sharing.\",\n\t    \"Save Code Block\": \"Saves a selected code block to a file, enabling you to reuse or share code snippets.\\nThe saved code block can be imported into other projects or shared with collaborators, streamlining the development process.\",\n\t    \"Close Tab\": \"Closes the current tab in the Thoughttree window, removing it from the workspace.\",\n", "    \"Close Empty Tab\": \"Closes the current tab if it is empty, helping to declutter your workspace.\\nThis feature prevents the accumulation of unnecessary empty tabs, ensuring a clean and organized working environment.\",\n\t    \"Quit\": \"Closes the current Thoughttree window.\\n\\n\"\n\t            \"Before quitting, ensure that you have saved any important chat content to avoid losing your work.\",\n\t# Edit:\n\t    \"Cut\": \"Cuts the selected text and stores it in the clipboard, allowing you to move text within or between documents.\",\n\t    \"Copy\": \"Copies the selected text to the clipboard without removing it from the document, useful for duplicating content.\",\n\t    \"Paste\": \"Pastes the text from the clipboard at the cursor position, inserting copied or cut content.\",\n\t    \"Delete\": \"Deletes the selected text or the character at the cursor position without storing it in the clipboard.\",\n\t    \"Undo\": \"Reverts the last text edit, allowing you to correct mistakes or revert unwanted changes.\",\n\t    \"Redo\": \"Reapplies the previously undone text edit, restoring the text to its state before the undo action.\",\n", "    \"Select All\": \"Selects all the text in the current text widget, making it easy to copy, cut, or delete the entire content.\\nThis feature is useful for quickly selecting large amounts of text or when you want to replace the entire content of the text widget.\",\n\t    \"Search with Google\": \"Searches the selected text on Google, providing quick access to search results for the highlighted text.\",\n\t    \"Insert Current Time\": \"Inserts the current date and time at the cursor position, useful for timestamping notes or messages.\\nThe inserted timestamp is formatted as 'YYYY-MM-DD HH:MM:SS', providing a clear and concise representation of the current date and time.\",\n\t    \"Include Date in System Prompt\": \"Includes the current date in the system prompt, providing a reference for when the prompt was generated.\\nThis feature is useful for tracking the date of specific prompts or for organizing your conversations based on the date.\",\n\t    \"Copy Title\": \"Copies the title of the current chat to the clipboard, allowing you to easily share or reference the chat title.\\nThis feature is useful for sharing chat titles with collaborators, referencing chat titles in other documents, or for organizing your chats based on their titles.\",\n\t# View:\n\t    \"Show Main Menu\": \"Toggles the visibility of the main menu. The main menu provides access to all the features and settings of the application. You can choose to hide it for a cleaner workspace or display it for easy access to the various options.\",\n\t    \"Show Status Bar\": \"Displays the status bar at the bottom of the application window. The status bar provides useful information about the current state of the application, such as the current model in use and other relevant parameters. You can hide it to maximize the chat area or display it to keep track of the application's status.\",\n\t    \"Show System Prompt\": \"Toggles the visibility of the system prompt, allowing you to hide or display the prompt as needed.\\nHiding the system prompt can help declutter your workspace, while displaying the prompt provides context and guidance for the conversation.\",\n\t    \"Show Tree\": \"Toggles the visibility of the tree view, enabling you to show or hide the tree structure of your chats.\\nThe tree view provides a visual representation of the chat hierarchy, making it easy to navigate and manage complex conversations.\",\n", "    \"Show Console\": \"Displays the console pane in the Thoughttree window, allowing you to view and interact with the console output of the chatbot model.\",\n\t    \"Count Tokens\": \"Counts the tokens in the current text, providing an estimate of the text's complexity and cost for text generation.\\nToken count is an important factor when working with text generation services, as it can affect the cost and processing time for generating content.\",\n\t    \"Run Code Block\": \"Runs the selected code block, executing any embedded code within the chat.\\nThis feature is useful for testing and debugging code snippets, as well as for executing commands or scripts directly within the chat environment.\",\n\t    \"Update Window Title\": \"Updates the window title based on the current chat, providing a clear identifier for the active chat.\\nThis feature ensures that the window title accurately reflects the content of the chat, making it easier to manage and navigate multiple chats.\",\n\t    \"Increase Font Size\": \"Increases the font size of the text, making it easier to read.\\nThis feature is especially useful for users with visual impairments or for working with high-resolution displays where the default font size may be too small.\",\n\t    \"Decrease Font Size\": \"Decreases the font size of the text, allowing you to fit more content on the screen.\\nThis feature is useful for working with large documents or for users who prefer smaller font sizes for readability.\",\n\t    \"Reset Font Size\": \"Resets the font size to its default value, restoring the original text appearance.\",\n\t    \"Toggle Monospace\": \"Toggles between monospace and proportional fonts, allowing you to switch between fixed-width and variable-width characters.\\nMonospace fonts are useful for aligning text, especially when working with code or tabular data, while proportional fonts provide a more natural reading experience for general text.\",\n\t    \"Toggle Scrolling Output\": \"Toggles automatic scrolling of the output, enabling you to control whether the output scrolls as new content is generated.\\nWhen enabled, the output will automatically scroll to show the latest generated content.\\nWhen disabled, the output will remain stationary, allowing you to review previous content without interruption.\",\n\t    \"Ring Bell When Finished\": \"Rings a bell when the text generation is completed, providing an audible notification of completion.\\nThis feature is helpful for multitasking, as it allows you to focus on other tasks while waiting for the text generation to finish.\",\n", "    \"Toggle Wrap Lines\": \"Toggles line wrapping in the text widget, allowing you to control whether long lines wrap to the next line or extend off-screen.\\nLine wrapping can improve readability by ensuring that text does not extend beyond the visible screen area, while disabling line wrapping can provide a more compact view of the text.\",\n\t    \"Generate Titles\": \"Generates titles for the current text, providing suggestions for descriptive headings.\\nThis feature is useful for organizing your chats or for creating meaningful titles for sections of text, making it easier to navigate and understand the content.\",\n\t    \"Calculate Cost\": \"Calculates the cost of generating the current text, estimating the resources required for text generation.\\nThis feature is useful for managing the cost and resource usage of text generation services, ensuring that you stay within your budget and resource limits.\",\n\t# Navigate:\n\t    \"Next Similar Line\": \"Jumps to the next line with similar content, allowing you to quickly navigate between related lines.\",\n\t    \"Previous Similar Line\": \"Jumps to the previous line with similar content, enabling you to move backward through related lines.\",\n\t    \"Next Message\": \"Jumps to the next message in the chat, providing a quick way to navigate between messages.\\nThis feature is useful for reviewing previous conversations or for quickly moving through a chat to find specific messages or content.\",\n\t    \"Previous Message\": \"Jumps to the previous message in the chat, allowing you to move backward through messages.\\nThis feature is useful for reviewing earlier parts of a conversation or for finding specific messages or content that occurred earlier in the chat.\",\n\t# Chat:\n\t    \"Next Paragraph\": \"Completes the current text and starts a new paragraph, providing a clear separation between ideas.\",\n", "    \"Next Line\": \"Completes the current text and starts a new line, continuing the conversation on a new line.\",\n\t    \"Continue Directly\": \"Continues the current text without starting a new line or paragraph, generating a seamless continuation of the conversation.\",\n\t    \"Fork Conversation\": \"Forks the current conversation into a new branch, allowing you to explore alternative paths in the chat.\\nThis feature enables you to generate multiple responses or scenarios based on the current conversation, providing a way to test different ideas or approaches without affecting the main chat.\",\n\t    \"Complete in Branch\": \"Completes the current text in a new conversation branch, generating text that diverges from the main conversation.\\nThis feature allows you to explore alternative outcomes or responses without altering the original conversation, making it easy to compare and contrast different ideas.\",\n\t    \"Complete Alternatives\": \"Generates alternative completions for the current text, providing a variety of potential responses.\\nThis feature enables you to explore multiple ways to continue the conversation, giving you greater flexibility and control over the chat content.\",\n\t    \"Complete 3 Times\": \"Generates 3 completions for the current text, providing three unique options for continuing the conversation.\",\n\t    \"Complete Multiple...\": \"Prompts for the number of completions to generate, allowing you to specify the desired number of alternatives.\\nBy entering a custom number, you can generate a specific number of alternative completions, providing a tailored set of options for continuing the conversation.\",\n\t    \"Complete Multiple Again\": \"Generates the same number of completions as the last multiple completion, providing consistency in the number of alternatives.\\nThis feature is useful for generating a consistent set of options across multiple completions, ensuring a similar level of variety in each set of alternatives.\",\n\t    \"Cancel\": \"Cancels the current text generation, stopping the generation process and discarding the generated content.\",\n\t# Query:\n", "    \"Max Tokens...\": \"Configures the maximum number of tokens for text generation, allowing you to control the length and complexity of generated text.\\nBy setting a limit on tokens, you can ensure that the generated content stays within a specific length or complexity range, making it more manageable and easier to read.\",\n\t    \"Temperature...\": \"Configures the temperature for text generation, adjusting the randomness and creativity of the generated content.\\nA higher temperature results in more diverse and creative output, while a lower temperature produces more focused and conservative text.\\nThis setting allows you to fine-tune the balance between creativity and coherence in the generated content.\",\n\t    \"Increase Temperature\": \"Increases the temperature for text generation, resulting in more random and creative output.\",\n\t    \"Decrease Temperature\": \"Decreases the temperature for text generation, producing more focused and conservative output.\",\n\t    \"Temperature 0.0\": \"Sets the temperature for text generation to 0.0, generating deterministic and highly focused output.\",\n\t    \"API Key...\": \"Configures the API key for the text generation service, enabling access to the text generation features.\\nBy entering a valid API key, you can connect to the text generation service and use its capabilities to generate content within the Thoughttree application.\",\n\t# Models:\n\t    \"gpt-3.5-turbo\": \"This is the default version of the ChatGPT (GPT-3.5) model.\\n\"\n\t                     \"\\n\"\n\t                     \"Most capable GPT-3.5 model and optimized for chat\\n\"\n", "                     \"at 1/10th the cost of text-davinci-003.\\n\"\n\t                     \"Will be updated with our latest model iteration\\n\"\n\t                     \"2 weeks after it is released.\\n\"\n\t                     \"\\n\"\n\t                     \"Max tokens: 4,096 tokens\\n\"\n\t                     \"Training data: Up to Sep 2021\",\n\t    \"gpt-3.5-turbo-0301\": \"This is a snapshot of the ChatGPT (GPT-3.5) model taken on March 1st.\\n\"\n\t                          \"\\n\"\n\t                          \"This model has the same capabilities as the default version\\n\"\n\t                          \"but will not receive updates.\\n\"\n", "                          \"\\n\"\n\t                          \"Max tokens: 4,096 tokens\\n\"\n\t                          \"Training data: Up to Sep 2021\",\n\t    \"gpt-3.5-turbo-0613\": \"This is a snapshot of the ChatGPT (GPT-3.5) model taken on June 13th.\\n\"\n\t                          \"\\n\"\n\t                          \"This model has the same capabilities as the default version\\n\"\n\t                          \"but will not receive updates and will be deprecated 3 months after a new version is released.\\n\"\n\t                          \"\\n\"\n\t                          \"Max tokens: 4,096 tokens\\n\"\n\t                          \"Training data: Up to Sep 2021\",\n", "    \"gpt-3.5-turbo-16k\": \"This is a variant of ChatGPT (GPT-3.5) with 4 times the context.\\n\"\n\t                         \"\\n\"\n\t                         \"This model has the same capabilities as the standard gpt-3.5-turbo model\\n\"\n\t                         \"but can handle longer pieces of text.\\n\"\n\t                         \"\\n\"\n\t                         \"Max tokens: 16,384 tokens\\n\"\n\t                         \"Training data: Up to Sep 2021\",\n\t    \"gpt-3.5-turbo-16k-0613\": \"This is a snapshot of the gpt-3.5-turbo-16k model taken on June 13th.\\n\"\n\t                              \"\\n\"\n\t                              \"This model has the same capabilities as the gpt-3.5-turbo-16k version\\n\"\n", "                              \"but will not receive updates and will be deprecated 3 months after a new version is released.\\n\"\n\t                              \"\\n\"\n\t                              \"Max tokens: 16,384 tokens\\n\"\n\t                              \"Training data: Up to Sep 2021\",\n\t    \"gpt-4\": \"This is the default version of the GPT-4 model.\\n\"\n\t             \"\\n\"\n\t             \"More capable than any GPT-3.5 model, able to do more complex tasks, and optimized for chat.\\n\"\n\t             \"Will be updated with our latest model iteration 2 weeks after it is released.\\n\"\n\t             \"\\n\"\n\t             \"Max tokens: 8,192 tokens\\n\"\n", "             \"Training data: Up to Sep 2021\",\n\t    \"gpt-4-0314\": \"This is a snapshot of the GPT-4 model taken on March 14th.\\n\"\n\t                  \"\\n\"\n\t                  \"This model has the same capabilities as the default version\\n\"\n\t                  \"but will not receive updates.\\n\"\n\t                  \"\\n\"\n\t                  \"Max tokens: 8,192 tokens\\n\"\n\t                  \"Training data: Up to Sep 2021\",\n\t    \"gpt-4-0613\": \"This is a snapshot of the GPT-4 model taken on June 13th.\\n\"\n\t                  \"\\n\"\n", "                  \"This model has the same capabilities as the default version\\n\"\n\t                  \"but will not receive updates and will be deprecated 3 months after a new version is released.\\n\"\n\t                  \"\\n\"\n\t                  \"Max tokens: 8,192 tokens\\n\"\n\t                  \"Training data: Up to Sep 2021\",\n\t    \"gpt-4-32k\": \"This is a variant of GPT-4 with 4 times the context.\\n\"\n\t                 \"\\n\"\n\t                 \"This model has the same capabilities as the base gpt-4 model\\n\"\n\t                 \"but can handle longer pieces of text.\\n\"\n\t                 \"Will be updated with our latest model iteration.\\n\"\n", "                 \"\\n\"\n\t                 \"Max tokens: 32,768 tokens\\n\"\n\t                 \"Training data: Up to Sep 2021\",\n\t    \"gpt-4-32k-0613\": \"This is a snapshot of the gpt-4-32k model taken on June 13th.\\n\"\n\t                      \"\\n\"\n\t                      \"This model has the same capabilities as the gpt-4-32k version\\n\"\n\t                      \"but will not receive updates and will be deprecated 3 months after a new version is released.\\n\"\n\t                      \"\\n\"\n\t                      \"Max tokens: 32,768 tokens\\n\"\n\t                      \"Training data: Up to Sep 2021\",\n", "    \"Reload Available Models\": \"Refreshes the list of available models for text generation.\"\n\t                               \"This is useful if it failed at program start.\",\n\t# Help:\n\t    \"Test\": \"Runs a test function, useful for debugging and experimentation.\",\n\t    \"Debug Info\": \"Displays debug information, providing insights into the internal workings of the application.\",\n\t    \"About\": \"Displays information about the Thoughttree application, including version and developer details.\",\n\t}\n"]}
{"filename": "thoughttree/AboutDialog.py", "chunked_list": ["import tkinter as tk\n\timport tkinter.commondialog\n\tfrom Sheet import Sheet\n\tfrom ThoughttreeConfig import conf\n\tclass AboutDialog(tk.Toplevel):\n\t    def __init__(self, parent=None):\n\t        super().__init__(parent)\n\t        self.focus_set()\n\t        self.grab_set()\n\t        self.transient(parent)\n", "        self.title(\"About Thoughttree\")\n\t        self.git_version = conf.git_describe_version\n\t        tk.Label(self, font=Sheet.FONT, text=\"About Thoughttree\").pack(padx=8, pady=12)\n\t        tk.Label(self, font=Sheet.FONT, text=self.git_version).pack(padx=16, pady=2)\n\t        tk.Button(self, text=\"OK\", command=self.destroy).pack(padx=8, pady=12)\n\t        def close_dialog(event):\n\t            self.destroy()\n\t        self.bind(\"<Escape>\", close_dialog)\n\t# testing the AboutDialog\n\tif __name__ == \"__main__\":\n", "    root = tk.Tk()\n\t    AboutDialog(root)\n\t    root.withdraw()\n\t    root.mainloop()\n"]}
{"filename": "thoughttree/FoldablePane.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import HORIZONTAL\n\tclass FoldablePane(tk.PanedWindow):\n\t    SASH_WIDTH = 8\n\t    MIN_SIZE = 20\n\t    def __init__(self, parent=None, folded=False, fold_size=100, **kw):\n\t        super().__init__(parent, borderwidth=0, sashwidth=FoldablePane.SASH_WIDTH, sashrelief=tk.RIDGE, **kw)\n\t        self.fold_size = fold_size\n\t        self.foldable_child = None\n\t        self.fold_last = None\n", "        self.takefocus = None\n\t        self.previous_sash = -1\n\t        self.folded = folded\n\t        def on_double_click(event):\n\t            self.fold()\n\t        self.bind(\"<Double-Button-1>\", on_double_click)\n\t    def add(self, child, stretch=\"always\", **kw) -> None:\n\t        super().add(child, stretch=stretch, **kw)\n\t    def addFoldable(self, child, stretch=\"never\", **kw):\n\t        self.fold_last =  bool(self.panes())\n", "        self.add(child, stretch=stretch, **kw)\n\t        self.foldable_child = child\n\t    def fold(self, event=None, set_folded=None):\n\t        pane_size = self.size1d()\n\t        sash = max(*self.sash_coord(0))\n\t        size = self.fold_last and pane_size - sash or sash\n\t        if size < FoldablePane.MIN_SIZE:\n\t            self.folded = True\n\t        if set_folded is None:\n\t            self.folded = not self.folded\n", "        else:\n\t            self.folded = set_folded\n\t        if self.folded:\n\t            self.takefocus = self.foldable_child.cget(\"takefocus\")\n\t            self.foldable_child.configure(takefocus=False)\n\t            self.fold_size = size\n\t            size = 0\n\t        else:\n\t            self.foldable_child.configure(takefocus=self.takefocus)\n\t            size = self.fold_size\n", "        sash = self.fold_last and pane_size - size or size\n\t        self.sash_place(0, sash, sash)\n\t        return \"break\"\n\t    def size1d(self, widget=None):\n\t        widget = widget or self\n\t        if self['orient'] == HORIZONTAL:\n\t            return widget.winfo_width()\n\t        else:\n\t            return widget.winfo_height()\n"]}
{"filename": "thoughttree/Cursorline.py", "chunked_list": ["class Cursorline:\n\t    def __init__(self, sheet):\n\t        self.sheet = sheet\n\t        self.configure_cursorline()\n\t    def cursorline(self, e, add=True):\n\t        if not e.widget.winfo_exists():\n\t            return\n\t        takefocus = not e.widget.cget(\"takefocus\") == \"0\"\n\t        if not takefocus:\n\t            return\n", "        e.widget.tag_remove('cursorline', 1.0, \"end\")\n\t        if add:\n\t            e.widget.tag_add('cursorline', 'insert display linestart', 'insert display lineend+1c')\n\t    def cursorline_remove(self, e):\n\t        self.cursorline(e, add=False)\n\t    def configure_cursorline(self):\n\t        self.sheet.tag_configure('cursorline', background='#FCFAED', foreground=\"black\", selectbackground=\"#4682b4\",\n\t                           selectforeground=\"white\")\n\t        self.sheet.bindtags(self.sheet.bindtags() + (\"last\",))\n\t        self.sheet.bind_class(\"last\", '<KeyRelease>', self.cursorline)\n", "        self.sheet.bind_class(\"last\", '<Button-1>', self.cursorline)\n\t        self.sheet.bind_class(\"last\", \"<FocusIn>\", self.cursorline)\n\t        self.sheet.bind_class(\"last\", \"<FocusOut>\", self.cursorline_remove)\n"]}
{"filename": "thoughttree/thoughttree.py", "chunked_list": ["#!/usr/bin/env python\n\timport sys\n\timport tkinter as tk\n\tfrom tkinter import BOTH, END, HORIZONTAL, INSERT, LEFT, SUNKEN, TOP, VERTICAL, W, X, SEL_FIRST, \\\n\t    SEL_LAST, BOTTOM\n\tfrom tkinter import simpledialog\n\tfrom tkinter.messagebox import showinfo\n\tfrom configargparse import Namespace\n\tfrom Console import Console\n\tfrom FinishReasonIcon import FinishReasonIcon\n", "from FoldablePane import FoldablePane\n\tfrom GeneratedTitle import GeneratedTitle\n\tfrom HidableFrame import HidableFrame\n\tfrom Model import Model\n\tfrom MultiTextboxLabel import MultiTextboxLabel\n\tfrom PrimaryUi import PrimaryUi\n\tfrom StatusBar import StatusBar\n\tfrom Sheet import Sheet\n\tfrom MainMenu import MainMenu\n\tfrom Tree import Tree\n", "from WaitCursor import WaitCursor\n\tfrom finish_reasons import finish_reasons\n\tWINDOW_ICON = \"chatgpt-icon.png\"\n\tconf = Namespace()\n\tconf.show_finish_reason = True\n\tconf.update_title_after_completion = True\n\tconf.scroll_output = True\n\tconf.ring_bell_after_completion = False\n\tconf.blinking_caret = True\n\tclass Thoughttree(PrimaryUi):\n", "    MIN_SIZE = (600, 300)\n\t    ROOT_GEOMETRY = \"1000x600\"\n\t    icon = None\n\t    multi_completions = 5\n\t    interactive_model_name = 'gpt-4'\n\t    # interactive_model_name = 'gpt-3.5-turbo'\n\t    generation_model_name = 'gpt-3.5-turbo'\n\t    def __init__(self):\n\t        PrimaryUi.__init__(self, \"Thoughttree\", WINDOW_ICON)\n\t        self.status_hider = None\n", "        self.status = None\n\t        self.console = None\n\t        self.tree = None\n\t        self.system = None\n\t        self.chat = None\n\t        self.model = None\n\t        self.console_pane = None\n\t        self.tree_pane = None\n\t        self.system_pane = None\n\t        self.root.geometry(Thoughttree.ROOT_GEOMETRY)\n", "        self.root.minsize(*Thoughttree.MIN_SIZE)\n\t        try:\n\t            self.set_icon(self.WINDOW_ICON)\n\t        except:\n\t            print(\"Error loading icon.\")\n\t        self.scroll_output = conf.scroll_output\n\t        self.ring_bell_after_completion = conf.ring_bell_after_completion\n\t        self.create_ui()\n\t        def new_window_callback():\n\t            Thoughttree()\n", "        self.models = {}\n\t        self.generation_model = Model(self.generation_model_name)\n\t        self.set_model(self.interactive_model_name)\n\t        menu = MainMenu(self, new_window_callback)\n\t        self.status.note = \"Loading available models...\"\n\t        self.update_idletasks()\n\t        menu.models_menu.load_available_models()\n\t        self.status.note = \"\"\n\t        self.pack(fill=BOTH, expand=True)\n\t        if self.first_window:\n", "            self.root.mainloop()\n\t    def set_model(self, model_name):\n\t        if not model_name in self.models:\n\t            self.models[model_name] = Model(model_name)\n\t        self.model = self.models[model_name]\n\t        self.status.model = model_name\n\t        self.status.set_max_token_var(self.model.max_tokens)\n\t        self.status.set_temperature_var(self.model.temperature)\n\t    def cancel_models(self, event=None):\n\t        for model in self.models.values():\n", "            model.cancel()\n\t    def create_ui(self):\n\t        self.configure_ui_options()\n\t        self.status_hider = HidableFrame(self)\n\t        self.status_hider.pack(side=BOTTOM, fill=X, expand=False)\n\t        self.status = StatusBar(self.status_hider)\n\t        self.status.pack(side=BOTTOM, fill=X, expand=True)\n\t        self.console_pane = FoldablePane(self, orient=VERTICAL)\n\t        self.tree_pane = FoldablePane(self.console_pane, orient=HORIZONTAL)\n\t        self.system_pane = FoldablePane(self.tree_pane, orient=VERTICAL)\n", "        self.console_pane.pack(side=TOP, fill=BOTH, expand=True)\n\t        self.console = Console(self.console_pane)\n\t        self.tree = Tree(self.tree_pane)\n\t        self.system = Sheet(self.system_pane, height=3)\n\t        self.chat = Sheet(self.system_pane)\n\t        self.console_pane.add(self.tree_pane, stretch=\"always\")\n\t        self.console_pane.addFoldable(self.console, stretch=\"never\")\n\t        self.tree_pane.addFoldable(self.tree, stretch=\"never\")\n\t        self.tree_pane.add(self.system_pane, stretch=\"always\")\n\t        self.system_pane.addFoldable(self.system, stretch=\"never\")\n", "        self.system_pane.add(self.chat, stretch=\"always\")\n\t        def on_first_configure(ev=None):\n\t            self.system_pane.fold(set_folded=True)\n\t            self.console_pane.fold(set_folded=True)\n\t            self.tree_pane.fold(set_folded=True)\n\t            self.console_pane.unbind(\"<Configure>\")\n\t        self.console_pane.bind(\"<Configure>\", on_first_configure)\n\t        sys.stdout = self.console\n\t        sys.stderr = self.console.err\n\t        self.chat.focus_set()\n", "    def configure_ui_options(self):\n\t        self.option_add('*Dialog*Font', (\"sans-serif\", 10))\n\t        self.option_add('*Menu*Font', (\"Arial\", 10))\n\t        self.option_add('*Font', (\"Arial\", 10))\n\t        if not conf.blinking_caret:\n\t            self.option_add('*Text*insertOffTime', '0')\n\t    def update_window_title(self, event=None):\n\t        progress_title = self.root.title() + \"...\"\n\t        def write_title(content):\n\t            if self.is_root_destroyed or self.model.is_canceled:\n", "                return\n\t            current_title = self.root.title()\n\t            if current_title == progress_title:\n\t                current_title = \"\"\n\t            self.root.title(current_title + content)\n\t            self.update()\n\t        self.root.title(progress_title)\n\t        self.update()\n\t        history = self.history_from_system_and_chat(GeneratedTitle.PROMPT, max_messages=5, max_size=1000) # todo limit, do not use system for title\n\t        self.generation_model.counter.go()\n", "        self.generation_model.chat_complete(history, write_title, max_tokens=30, temperature=0.3)\n\t        self.generation_model.counter.summarize(\"Title cost:\")\n\t    def configure_parameter(self, title, message, variable, minvalue, maxvalue):\n\t        askfunction = simpledialog.askinteger if isinstance(variable, tk.IntVar) else simpledialog.askfloat\n\t        value = askfunction(\n\t            title,\n\t            message,\n\t            initialvalue=variable.get(),\n\t            minvalue=minvalue,\n\t            maxvalue=maxvalue)\n", "        if value is not None:\n\t            variable.set(value)\n\t    def configure_max_tokens(self, event=None):\n\t        self.configure_parameter(\n\t            \"Max Tokens\",\n\t            \"What should be the model's maximum number of tokens to generate?\\n\"\n\t            \"(Query parameter 'max_tokens')\\n\",\n\t            self.model.max_tokens,\n\t            1,\n\t            100000)\n", "    def configure_temperature(self, event=None):\n\t        self.configure_parameter(\n\t            \"Query Temperature\",\n\t            \"What should be the level of creativity of the model?\\n\"\n\t            \"0.0 for deterministic, typically 0.5 or 0.7, maximal 2.0?\\n\"\n\t            \"(Query parameter 'temperature')\\n\",\n\t            self.model.temperature,\n\t            0,\n\t            2.0)\n\t    def count_text_tokens(self, event=None) :\n", "        sheet: Sheet = self.focus_get()\n\t        try :\n\t            text = sheet.get(SEL_FIRST, SEL_LAST)\n\t        except tk.TclError :\n\t            text = sheet.get(1.0, END)\n\t        old_status = self.status.message\n\t        self.status.message = \"Counting tokens (loading model)\"\n\t        self.status.update()\n\t        num_tokens = self.model.counter.count_tokens(text)\n\t        self.status.message = old_status\n", "        num_lines = text.count(\"\\n\")\n\t        num_words = len(text.split())\n\t        num_chars = len(text)\n\t        # todo: align numbers, using TextDialog or so\n\t        showinfo(\"Count Tokens\",\n\t                 f\"The length of the text is:\\n\"\n\t                 f\"{num_tokens:,} tokens\\n\"\n\t                 f\"{num_lines:,} lines\\n\"\n\t                 f\"{num_words:,} words\\n\"\n\t                 f\"{num_chars:,} characters\",\n", "                 master=sheet)\n\t        return \"break\"\n\t    def complete(self, n=1, prefix=\"\", postfix=\"\"):\n\t        self.model.is_canceled = False\n\t        sheet: Sheet = self.focus_get()\n\t        sheet.tag_remove('cursorline', 1.0, \"end\")\n\t        n = self.find_number_of_completions(n)\n\t        if n is None:\n\t            return\n\t        with WaitCursor(sheet):\n", "            sheet.undo_separator()\n\t            self._insert_prefix_and_scroll(sheet, prefix)\n\t            history = self.history_from_system_and_chat()\n\t            self.model.counter.go()\n\t            finish_reason, message = self._process_completions(sheet, n, history)\n\t            self._handle_completion_finish(sheet, finish_reason, message, postfix)\n\t            self._post_completion_tasks()\n\t        return \"break\"\n\t    def scroll(self, sheet):\n\t        if self.scroll_output:\n", "            sheet.see(END)\n\t        sheet.update()\n\t    def find_number_of_completions(self, n):\n\t        if not n:\n\t            n = simpledialog.askinteger(\n\t                \"Alternative completions\",\n\t                \"How many alternative results do you want?\",\n\t                initialvalue=Thoughttree.multi_completions,\n\t                minvalue=2, maxvalue=1000, parent=self)\n\t            if not n:\n", "                return\n\t        elif n == -1:  # repeat\n\t            n = Thoughttree.multi_completions\n\t        Thoughttree.multi_completions = n\n\t        return n\n\t    def _insert_prefix_and_scroll(self, sheet, prefix):\n\t        if prefix:\n\t            sheet.insert(END, prefix)\n\t            self.scroll(sheet)\n\t    def _process_completions(self, sheet, n, history):\n", "        finish_reason, message = 'unknown', ''\n\t        label_frame = None\n\t        if n == 1:\n\t            if self.model.is_canceled:\n\t                finish_reason = \"canceled\"\n\t            else:\n\t                def write_chat(text):\n\t                    if self.is_root_destroyed:\n\t                        return\n\t                    sheet.insert(END, text, \"assistant\")\n", "                    self.scroll(sheet)\n\t                finish_reason, message = self.model.chat_complete(history, write_chat)\n\t        else:\n\t            label_frame = tk.Frame(sheet, borderwidth=4)\n\t            sheet.window_create(END, window=label_frame)\n\t            sheet.insert(END, \"\\n\")\n\t            sheet.see(END)\n\t            finish_reason, message = 'unknown', ''\n\t            for i in range(n):\n\t                if self.model.is_canceled:\n", "                    finish_reason = \"canceled\"\n\t                    break\n\t                label = MultiTextboxLabel(label_frame, sheet)\n\t                def write_label(text):\n\t                    if self.is_root_destroyed:\n\t                        return\n\t                    label.config(text=label.cget(\"text\") + text)\n\t                    self.scroll(sheet)\n\t                finish_reason, message = self.model.chat_complete(history, write_label)\n\t        return finish_reason, message\n", "    def _handle_completion_finish(self, sheet, finish_reason, message, postfix):\n\t        if self.is_root_destroyed:\n\t            return\n\t        if conf.show_finish_reason:\n\t            self.show_finish_reason_icon(sheet, finish_reason, message)\n\t        if not self.model.is_canceled and not finish_reason == \"length\":\n\t            sheet.insert(END, postfix)\n\t        if self.scroll_output:\n\t            sheet.mark_set(INSERT, END)\n\t            sheet.see(END)\n", "        sheet.undo_separator()\n\t    def show_finish_reason_icon(self, sheet, finish_reason, message):\n\t        symbol = finish_reasons[finish_reason][\"symbol\"]\n\t        if finish_reason not in [\"stop\", \"length\", \"canceled\", \"error\"]:\n\t            print(f\"{finish_reason=}\")\n\t        if symbol:\n\t            tooltip = finish_reasons[finish_reason][\"tooltip\"]\n\t            if message:\n\t                tooltip += \"\\n\" + message\n\t            sheet.window_create(END, window=FinishReasonIcon(sheet, symbol, tooltip=tooltip))\n", "    def _post_completion_tasks(self):\n\t        if conf.ring_bell_after_completion:\n\t            self.bell()\n\t        self.model.counter.summarize(\"Completion cost:\")\n\t        if conf.update_title_after_completion and not self.model.is_canceled:\n\t            if self.model.counter.tokens_since_go() > GeneratedTitle.GEN_THRESHOLD:\n\t                self.update_window_title()\n\t    def history_from_system_and_chat(self, additional_message=None, max_messages=None, max_size=None) :\n\t        system = self.system.get(1.0, 'end - 1c').strip()\n\t        history = [{'role': 'system', 'content': system}]\n", "        sheet: Sheet = self.focus_get()\n\t        history = sheet.history_from_path(history)\n\t        if additional_message:\n\t            history += [{'role': 'user', 'content': additional_message}]\n\t        if max_messages:\n\t            history = history[-max_messages:]\n\t        return history\n\tif __name__ == \"__main__\":\n\t    Thoughttree()\n"]}
{"filename": "thoughttree/PrimaryUi.py", "chunked_list": ["import os\n\timport tkinter as tk\n\tfrom os.path import join\n\tfrom tkinter import messagebox\n\tfrom Ui import Ui\n\tclass PrimaryUi(tk.Tk, Ui):\n\t    icon = None\n\t    WINDOW_ICON = None\n\t    current_open_uis = []\n\t    def __init__(self, name=\"\", icon_path=None):\n", "        if tk._default_root:\n\t            self.first_window = False\n\t            self.root = tk.Toplevel()\n\t        else:\n\t            self.first_window = True\n\t            self.root = tk.Tk()\n\t        tk.Frame.__init__(self, self.root)\n\t        self.is_root_destroyed = False\n\t        Ui.current_open_uis.append(self)\n\t        if len(Ui.current_open_uis) > 1:\n", "            name = f\"{name} ({len(Ui.current_open_uis)})\"\n\t        self.root.title(name)\n\t        self.root.wm_title(name)\n\t        self.root.protocol(\"WM_DELETE_WINDOW\", self.close)\n\t        try:\n\t            self.set_icon(icon_path)\n\t        except:\n\t            print(\"Error loading icon.\")\n\t    def toTop(self):\n\t        self.root.attributes(\"-topmost\", True)\n", "        self.root.attributes(\"-topmost\", False)\n\t    def close(self, event=None):\n\t        result = messagebox.askyesno(\"Quit\", \"Are you sure you want to quit?\", parent=self)\n\t        if result:\n\t            Ui.current_open_uis.remove(self)\n\t            self.is_root_destroyed = True\n\t            self.root.destroy()\n\t    def set_icon(self, window_icon):\n\t        if not window_icon:\n\t            return\n", "        def get_icon_file_name(icon_base_name):\n\t            return join(os.path.dirname(os.path.abspath(__file__)), icon_base_name)\n\t        if Ui.icon:\n\t            return\n\t        try:\n\t            abs_name = str(get_icon_file_name(window_icon))\n\t            photo_image = tk.PhotoImage(file=abs_name)\n\t            Ui.icon = photo_image\n\t            self.root.iconphoto(True, photo_image) # Note: has no effect when running in PyCharm IDE\n\t        except Exception as e:\n", "            print(\"Error loading icon:\", e)\n"]}
{"filename": "thoughttree/__main__.py", "chunked_list": ["from thoughttree import Thoughttree\n\tif __name__ == \"__main__\":\n\t    Thoughttree.main()\n"]}
{"filename": "thoughttree/finish_reasons.py", "chunked_list": ["finish_reasons = {\n\t    \"stop\": {\"symbol\": \"\", \"tooltip\": \"\"},\n\t    \"length\": {\"symbol\": \"…\", \"tooltip\": \"The completion reached max_tokens tokens. It can be continued.\"},\n\t    \"canceled\": {\"symbol\": \"☒\", \"tooltip\": \"The completion was canceled.\"},\n\t    \"error\": {\"symbol\": \"⚠\", \"tooltip\": \"An error occurred while processing the completion.\"},\n\t}\n"]}
{"filename": "thoughttree/Menu.py", "chunked_list": ["import re\n\timport tkinter as tk\n\tfrom typing import Union\n\tfrom MenuHelpTooltip import MenuHelpTooltip\n\tfrom Ui import Ui\n\tclass Menu(tk.Menu):\n\t    def __init__(self, master: Union[tk.Tk, tk.Text, tk.Menu], label=None, menu_help=None, **kw) : #1\n\t        super().__init__(master, tearoff=False, borderwidth=3, **kw)\n\t        if menu_help:\n\t            self.menu_help = menu_help\n", "        elif hasattr(master, \"menu_help\"):\n\t            self.menu_help = master.menu_help\n\t        else:\n\t            self.menu_help = None\n\t        if isinstance(master, Ui):\n\t            master.root.config(menu=self)\n\t        else:\n\t            if self.menu_help:\n\t                MenuHelpTooltip(self, self.menu_help)\n\t            master.add_cascade(label=label, underline=0, menu=self)\n", "    def convert_key_string(self, keystroke) :\n\t        def fix_key_letter_case(keystroke):\n\t            m = re.search(r\"^((<.*-)|<)([a-zA-Z])>\", keystroke)\n\t            if m:\n\t                letter = m[3]\n\t                if keystroke.lower().count('shift-'):\n\t                    letter = letter.upper()\n\t                else:\n\t                    letter = letter.lower()\n\t                return m[1] + letter + \">\"\n", "            else:\n\t                return keystroke\n\t        if not keystroke:\n\t            return \"\"\n\t        s = fix_key_letter_case(keystroke)\n\t        s = s.replace(\"-Key-\", \"-\")\n\t        s = s.replace(\"-\", \"+\")\n\t        s = s.replace(\"Control\", \"Ctrl\")\n\t        s = s.replace(\"Escape\", \"Esc\")\n\t        s = s.replace(\"plus>\", \"+\")\n", "        s = s.replace(\"minus>\", \"-\")\n\t        s = s.replace(\"period>\", \".\")\n\t        s = s.lstrip(\"<\")\n\t        s = s.rstrip(\">\")\n\t        if s[-2] == \"+\":\n\t            s = s[:-1] + s[-1].upper()\n\t        return s\n\t    def item(self, label, keystroke, command, variable=None, add=False, index=tk.END):\n\t        if not label in self.menu_help:\n\t            print(\"Help text missing for menu item \\\"\" + label + \"\\\"\")\n", "        accelerator = self.convert_key_string(keystroke)\n\t        state = tk.NORMAL if command or variable else tk.DISABLED\n\t        if variable :\n\t            self.insert_radiobutton(index, label=label, accelerator=accelerator, state=state, variable=variable)\n\t        else:\n\t            self.insert_command(index, label=label, underline=0, accelerator=accelerator, state=state, command=command)\n\t        if keystroke:\n\t            # if not add:\n\t            #     self.master.unbind_class(\"Text\", keystroke)\n\t            self.master.bind_class(\"Text\", keystroke, command, add=add)\n"]}
{"filename": "thoughttree/MODEL_DATA.py", "chunked_list": ["# Sources:\n\t# https://platform.openai.com/docs/models/gpt-4\n\t# https://platform.openai.com/docs/models/gpt-3-5\n\t# https://openai.com/pricing\n\t# as of 2023-06-09\n\tMODEL_DATA = {\n\t    'gpt-3.5-turbo': {\n\t        '1k_token_usd': {\n\t            'prompt': 0.0015,\n\t            'completion': 0.002,\n", "        },\n\t        'max_tokens': 4096,\n\t    },\n\t    'gpt-3.5-turbo-16k': {\n\t        '1k_token_usd': {\n\t            'prompt': 0.003,\n\t            'completion': 0.004,\n\t        },\n\t        'max_tokens': 16384,\n\t    },\n", "    'gpt-4': {\n\t        '1k_token_usd': {\n\t            'prompt': 0.03,\n\t            'completion': 0.06,\n\t        },\n\t        'max_tokens': 8192,\n\t    },\n\t    'gpt-4-32k': {\n\t        '1k_token_usd': {\n\t            'prompt': 0.06,\n", "            'completion': 0.12,\n\t        },\n\t        'max_tokens': 32768,\n\t    },\n\t}\n"]}
{"filename": "thoughttree/Tree.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import BOTH, DISABLED, END, HORIZONTAL, INSERT, LEFT, NO, SUNKEN, TOP, VERTICAL, W, WORD, X, SEL_FIRST, \\\n\t    SEL_LAST\n\tfrom tkinter import font as tkfont\n\tfrom tkinter import ttk, simpledialog\n\tfrom Sheet import Sheet\n\t#NODE_OPEN = '\\u25B6'\n\t#NODE_CLOSED = '\\u25BC'\n\tNODE_OPEN = '*'\n\tNODE_CLOSED = '|'\n", "class Tree(ttk.Treeview):\n\t    def __init__(self, parent, *args, **kw):\n\t        super().__init__(parent, *args, **kw)\n\t        def on_treeview_click(event):\n\t            item = tree.identify('item', event.x, event.y)\n\t            if item:\n\t                if 'closed' in tree.item(item, 'tags'):\n\t                    replaced = tree.item(item, 'text').replace(NODE_CLOSED, NODE_OPEN, 1)\n\t                    tree.item(item, text=replaced)\n\t                    tree.item(item, tags='opened')\n", "                elif 'opened' in tree.item(item, 'tags'):\n\t                    tree.item(item, text=tree.item(item, 'text').replace(NODE_OPEN, NODE_CLOSED, 1))\n\t                    tree.item(item, tags='closed')\n\t        tree = ttk.Treeview(parent, columns=(\"C1\"), show=\"tree\")\n\t        self.tree = tree\n\t        tree.column(\"#0\", width=160, minwidth=60, anchor=W, stretch=NO)\n\t        tree.column(\"#1\", width=30, minwidth=60, anchor=W, stretch=NO)\n\t        tree.heading(\"C1\", text=\"\")\n\t        tree.bind('<Double-Button-1>', on_treeview_click)\n\t        tree.bind(\"<Double-Button-1>\", self.edit_tree_entry)\n", "        tree.bind(\"<Return>\", self.edit_tree_entry)\n\t        from tools import create_mock_data\n\t        create_mock_data(tree)\n\t    def edit_tree_entry(self, event):\n\t        row_id = self.focus()\n\t        if not row_id:\n\t            return\n\t        column = self.identify_column(event.x)\n\t        if column != \"#1\":  # Only allow editing the \"Messages\" column\n\t            return\n", "        x, y, width, height = self.bbox(row_id, column)\n\t        char_width = tkfont.Font(font=Sheet.FONT).measure('0')\n\t        line_height = tkfont.Font(font=Sheet.FONT).metrics(\"linespace\")\n\t        width = max(self.column(column)[\"width\"], width)\n\t        height = max(line_height, height)\n\t        cur_text = self.item(row_id, \"values\")[0]\n\t        w = width // char_width\n\t        h = height // line_height\n\t        cell_editor = tk.Text(self, wrap=WORD, width=w, height=h, font=Sheet.FONT,\n\t                      highlightthickness=0, highlightbackground=\"black\", padx=4, pady=0)\n", "        cell_editor.insert(END, cur_text)\n\t        cell_editor.place(x=x, y=y)\n\t        cell_editor.focus_set()\n\t        def save_text(event):\n\t            print(event.type)\n\t            if event.type == tk.EventType.FocusOut or int(event.state) & 0x4 == 0 :  # Check if Control key is not pressed\n\t                text = cell_editor.get(1.0, END).strip()\n\t                self.set(row_id, column, text)\n\t                cell_editor.destroy()\n\t        # cell_editor.bind(\"<FocusOut>\", save_text)\n", "        cell_editor.bind(\"<Return>\", lambda e: e.state & 0x4 == 0 and save_text(e) or self.focus_set())\n\t        cell_editor.bind(\"<Control-Return>\", lambda e: cell_editor.insert(INSERT, \"\\n\") or \"break\")\n\t        # cell_editor.bind(\"<Control-Key>\", lambda e : \"break\")\n\t        # cell_editor.bind(\"<Control_L>\", lambda e : \"break\")\n"]}
{"filename": "thoughttree/ThoughttreeConfig.py", "chunked_list": ["import sys\n\tfrom configargparse import Namespace, ArgumentParser\n\timport tools\n\tconf = Namespace()\n\tconf.show_finish_reason = True\n\tconf.update_title_after_completion = True\n\tconf.scroll_output = True\n\tconf.ring_bell_after_completion = False\n\tconf.blinking_caret = True\n\tconf.git_describe_version = tools.get_git_describe_version()\n", "def main(argv):\n\t    parser = ArgumentParser(prog=\"thoughttree\",\n\t        description='Interact with a large language model in alternative ways',\n\t        exit_on_error=False)\n\t    add = parser.add_argument\n\t    add('prompt',                    nargs='?',              default=\"\",   type=str, help='Prompt for the model, text to be completed')\n\t    add('-p', '--prompt-file',       dest='promptFile',      default=\"\",   type=str, help='File containing the prompt')\n\t    add('-s', '--system-prompt',     dest='systemPrompt',    default=\"\",   type=str, help='System prompt for the model')\n\t    add('-f', '--system-prompt-file',dest='systemPromptFile',default=\"\",   type=str, help='File containing the system prompt')\n\t    add('-o', '--out-dir',           dest='outDir',          default=\"\",   type=str, help='Directory for output files')\n", "    add('-l', '--log-dir',           dest='logDir',          default=\"\",   type=str, help='Write log to files in this directory')\n\t    add('-t', '--temperature',       dest='temperature',     default=0.0,  type=float,choices=(0.0, 2.0),help='Temperature')\n\t    add('-m', '--max-tokens',        dest='max_tokens',      default=0,    type=int, help='Maximal number of tokens to use per query, 0 for inf')\n\t    add('-n', '--n-completions',     dest='number',          default=1,    type=int, help='Number of completions to request')\n\t    add('-z', '--add-temperature-0', dest='addTemp0Sample',  default=False,type=bool,help='Add additional completion')\n\t    add('-g', '--generate-titles',   dest='generateTitles',  default=False,type=bool,help='Generate titles')\n\t    add('-b', '--blinking-caret',    dest='blinkingCaret',   default=True, type=bool,help='Should the text input caret blink')\n\t    add('-a', '--autoscroll',        dest='autoscroll',      default=True, type=bool,help='Should the output scroll during completion')\n\t    add('-r', '--ring-on-completion',dest='ringOnCompletion',default=False,type=bool,help='Ring bell on completion long')\n\t    add('-d', '--display-reason',    dest='displayReason',   default=True, type=bool,help='Display finish reason as icon')\n", "    add('-k', '--api-key',           dest='apiKey',          default=\"\",   type=str, help='API key for the OpenAI API')\n\t    args = parser.parse_args(\"-h\")\n\t    print(args)\n\tif __name__ == \"__main__\":\n\t    main(sys.argv)\n"]}
{"filename": "thoughttree/Files.py", "chunked_list": ["import tkinter as tk\n\tfrom textwrap import dedent\n\tfrom tkinter import SEL_FIRST, SEL_LAST\n\tfrom tkinter.filedialog import asksaveasfilename\n\tfrom tkinter.messagebox import showerror\n\timport re\n\tfrom TextSaver import TextSaver\n\tclass ChatLogSaver(TextSaver):\n\t    def find_text(self):\n\t        # Implement the method to find the chat log text from the widget\n", "        pass\n\t    def find_filename(self):\n\t        # Implement the method to find the filename for the chat log\n\t        return \"chat.txt\"\n\tclass SectionSaver(TextSaver):\n\t    def find_text(self):\n\t        # Implement the method to find the section text from the widget\n\t        pass\n\t    def find_filename(self):\n\t        # Implement the method to find the filename for the section\n", "        return \"section.txt\"\n\tclass CodeBlockSaver(TextSaver):\n\t    def find_text(self):\n\t        # Implement the method to find the code block text from the widget\n\t        pass\n\t    def find_filename(self):\n\t        # Implement the method to find the filename for the code block\n\t        return \"code_block.py\"\n\tclass Files:\n\t    @staticmethod\n", "    def open_file(e=None):\n\t        pass\n\t    # @staticmethod\n\t    # def save_chat(e=None):\n\t    #     chat_log_saver = ChatLogSaver(e.widget)\n\t    #     chat_log_saver.save()\n\t    #\n\t    # @staticmethod\n\t    # def save_section_dialog(sheet):\n\t    #     section_saver = SectionSaver(sheet)\n", "    #     section_saver.save()\n\t    #\n\t    # @staticmethod\n\t    # def save_code_block_dialog(sheet):\n\t    #     code_block_saver = CodeBlockSaver(sheet)\n\t    #     code_block_saver.save()\n\t    @staticmethod\n\t    def save_chat(e=None):\n\t        def text_not_found_error():\n\t            pass\n", "        def find_text(sheet):\n\t            pass\n\t            return \"foo\"\n\t        def find_filename():\n\t            return \"bar\"\n\t        def ask_filename(initial_filename):\n\t            return \"\"\n\t        def write_text(text, filename):\n\t            pass\n\t        text = find_text(e.widget)\n", "        if not text:\n\t            text_not_found_error()\n\t            return\n\t        initial_filename = find_filename()\n\t        filename = ask_filename(initial_filename)\n\t        if not filename:\n\t            return\n\t        write_text(text, filename)\n\t        print(e)\n\t        print(e.widget)\n", "        print(type(e.widget))\n\t        # name = save(Files.save_chat_dialog, \"Chat saved to \")\n\t        # self.tt.title(name)\n\t        # def save(save_dialog, status_bar_label):\n\t        #     file_name = save_dialog(self.tt.chat)\n\t        #     if not file_name:\n\t        #         return\n\t        #     base_name = file_name.split(\"/\")[-1]\n\t        #     self.tt.status_bar.note = status_bar_label + base_name\n\t        #     return base_name\n", "    @staticmethod\n\t    def save_chat_dialog(sheet):\n\t        def write_chat(sheet, filename) :\n\t            try:\n\t                # ROLE_SYMBOLS = {\"user\":\"❯ \", \"ai\":\"⚙ \"}\n\t                ROLE_SYMBOLS = {\"user\" : \"\", \"ai\" : \"\"}\n\t                content = sheet.dump(1.0, tk.END, text=True, tag=True)\n\t                with open(filename, 'w') as f :\n\t                    drop_nl = False\n\t                    for item in content :\n", "                        if item[0] == \"tagon\" :\n\t                            if item[1] == \"assistant\" :\n\t                                f.write(ROLE_SYMBOLS[\"ai\"])\n\t                        elif item[0] == \"tagoff\" :\n\t                            if item[1] == \"assistant\" :\n\t                                f.write(\"\\n\" + ROLE_SYMBOLS[\"user\"])\n\t                                drop_nl = True\n\t                        elif item[0] == \"text\" :\n\t                            if drop_nl :\n\t                                drop_nl = False\n", "                                if item[1] == \"\\n\" :\n\t                                    continue\n\t                            f.write(item[1])\n\t            except Exception as e:\n\t                showerror(title=\"Error\", message=\"Cannot save chat\\n\" + str(e), master=sheet)\n\t        file = asksaveasfilename(defaultextension=\".txt\",\n\t                initialfile=\"chat.txt\", title=\"Save Chat\", parent=sheet)\n\t        if file:\n\t            write_chat(sheet, file)\n\t        return file\n", "    @staticmethod\n\t    def save_section_dialog(sheet):\n\t        def write_section(sheet: tk.Text, filename, index=tk.INSERT):\n\t            try:\n\t                text_range = sheet.tag_prevrange(\"assistant\", index)\n\t                if not text_range:\n\t                    raise Exception(\"No section found\")\n\t                section = sheet.get(*text_range)\n\t                with open(filename, 'w') as f:\n\t                    f.write(section)\n", "            except Exception as e:\n\t                showerror(title=\"Error\", message=\"Cannot save section\\n\" + str(e), master=sheet)\n\t        file = asksaveasfilename(\n\t            defaultextension=\".txt\", initialfile=\"section.txt\", title=\"Save Section\", parent=sheet)\n\t        if file:\n\t            write_section(sheet, file)\n\t        return file\n\t    @staticmethod\n\t    def save_selection_dialog(sheet):\n\t        def write_section(sheet: tk.Text, filename, index=tk.INSERT):\n", "            try:\n\t                string = sheet.get(SEL_FIRST, SEL_LAST)\n\t                with open(filename, 'w') as f:\n\t                    f.write(string)\n\t            except Exception as e:\n\t                showerror(title=\"Error\", message=\"Cannot save section\\n\" + str(e), master=sheet)\n\t        file = asksaveasfilename(\n\t            defaultextension=\".txt\", initialfile=\"selection.txt\", title=\"Save Selection\", parent=sheet)\n\t        if file:\n\t            write_section(sheet, file)\n", "        return file\n\t    @staticmethod\n\t    def save_code_block_dialog(sheet):\n\t        def extract_code_block(text):\n\t            code_blocks = re.findall(r'```(.*?)```', text, re.DOTALL)\n\t            if not code_blocks:\n\t                raise ValueError('No code blocks found')\n\t            if len(code_blocks) > 1:\n\t                raise ValueError('Multiple code blocks found')\n\t            if len(code_blocks) == 1:\n", "                block = code_blocks[0]\n\t                file_type = None\n\t                match = re.search(r'^([a-zA-Z0-9]+)\\n', block)\n\t                if match:\n\t                    file_type = match.group(1)\n\t                    block = re.sub(r'^[a-zA-Z0-9]+\\n', '', block)\n\t                block = dedent(block)\n\t                return block, file_type\n\t        def find_code_block(sheet: tk.Text, index=tk.INSERT):\n\t            text_range = sheet.tag_prevrange(\"assistant\", index)\n", "            if not text_range:\n\t                raise Exception(\"No code block found\")\n\t            code_block_section = sheet.get(*text_range)\n\t            code_block, file_type = extract_code_block(code_block_section)\n\t            return code_block #, file_type\n\t        try:\n\t            code_block = find_code_block(sheet)\n\t            filename = asksaveasfilename(\n\t                    defaultextension=\".py\", initialfile=\"code_block.py\", title=\"Save Code Block\", parent=sheet)\n\t            if filename:\n", "                with open(filename, 'w') as f:\n\t                    f.write(code_block)\n\t            return filename\n\t        except Exception as e:\n\t            showerror(title=\"Error\", message=\"Cannot save code block\\n\" + str(e), master=sheet)\n\t            return None\n"]}
{"filename": "thoughttree/MenuHelpTooltip.py", "chunked_list": ["from Tooltip import Tooltip\n\tfrom tools import text_block\n\tclass MenuHelpTooltip(Tooltip):\n\t    def __init__(self, widget, menu_help):\n\t        Tooltip.__init__(self, widget, None)\n\t        self.delay_ms = 750\n\t        self.menu_help = menu_help\n\t        self.previous_missing_item = None\n\t    def refresh_tooltip_text(self):\n\t        try:\n", "            menu_item = self.widget.entrycget(f'@{self.last_y}', 'label')\n\t            # print(f\"{menu_item=}\")\n\t            if menu_item in self.menu_help:\n\t                help_text = self.menu_help[menu_item]\n\t                text = text_block(help_text)\n\t            else:\n\t                text = menu_item\n\t                if menu_item and self.previous_missing_item != menu_item:\n\t                    self.previous_missing_item = menu_item\n\t            self.label.configure(text=text)\n", "        except Exception as ex: # Menu separators have no \"label\"\n\t            pass # leave text unchanged\n\t            # self.label.configure(text=\"-\")\n"]}
{"filename": "thoughttree/ModelsMenu.py", "chunked_list": ["import tkinter as tk\n\tfrom Menu import Menu\n\tfrom menu_help import menu_help\n\tclass ModelsMenu(Menu):\n\t    def __init__(self, parent, thoughttree, label):\n\t        super().__init__(parent, label, menu_help=menu_help)\n\t        self.ui = thoughttree\n\t        self.fixed_model_menu_items = -1\n\t        self.add_separator()\n\t        self.item(\"Reload Available Models\", None, self.load_available_models)\n", "        self.item(\"API Key...\", \"\", None)\n\t        self.selected_model = tk.StringVar()\n\t        def on_model_selected(name, index, mode):\n\t            self.ui.set_model(self.selected_model.get())\n\t        self.selected_model.trace_add(\"write\", on_model_selected)\n\t    def load_available_models(self, event=None):\n\t        def on_eventA(event):\n\t            print(\"A\" + str(event))\n\t        if self.fixed_model_menu_items == -1:\n\t            self.fixed_model_menu_items = self.index(tk.END) + 1\n", "        present_items = self.index(tk.END) + 1\n\t        if present_items > self.fixed_model_menu_items:\n\t            self.delete(0, present_items - self.fixed_model_menu_items - 1)\n\t        for i, model_name in enumerate(self.ui.model.get_available_models()):\n\t            key = None\n\t            if model_name == \"gpt-4\":\n\t                key = \"<Control-Alt-Key-4>\"\n\t            elif model_name == \"gpt-3.5-turbo\":\n\t                key = \"<Control-Alt-Key-3>\"\n\t            if key:\n", "                command = lambda e, model=model_name: self.selected_model.set(model)\n\t            else:\n\t                command = None\n\t            self.item(model_name, key, command, index=i, variable=self.selected_model)\n"]}
{"filename": "thoughttree/ForkableText.py", "chunked_list": ["import tkinter as tk\n\tfrom Notebook import Notebook\n\tfrom ResizingText import ResizingText\n\tclass ForkableText(tk.Frame):\n\t    def __init__(self, parent):\n\t        super().__init__(parent)\n\t        self.sheet = ResizingText(self)\n\t        self.sheet.insert(tk.END, \"This is a test\\n\" * 4)\n\t        self.notebook = Notebook(self)\n\t        self.sheet.bind(\"<Control-o>\", self.fork)\n", "        self.sheet.pack(fill=\"both\", expand=True)\n\t        self.notebook.pack(fill=\"both\", expand=True)\n\t    def fork(self, event=None):\n\t        def update_notebook_height(event):\n\t            current_tab = self.notebook.nametowidget(self.notebook.select())\n\t            current_tab.update_idletasks()\n\t            self.notebook.configure(height=current_tab.winfo_reqheight())\n\t        text_tab1 = ForkableText(self.notebook)\n\t        text_tab2 = ForkableText(self.notebook)\n\t        self.notebook.add(text_tab1, text=\"Tab 1\")\n", "        self.notebook.add(text_tab2, text=\"Tab 2\")\n\t        self.notebook.bind(\"<<NotebookTabChanged>>\", update_notebook_height)\n\t        return \"break\"\n"]}
{"filename": "thoughttree/SecondaryUi.py", "chunked_list": ["import tkinter as tk\n\tfrom Ui import Ui\n\tclass SecondaryUi(tk.Toplevel, Ui):\n\t    pass\n"]}
{"filename": "thoughttree/TextSaver.py", "chunked_list": ["from abc import ABC, abstractmethod\n\tclass TextSaver(ABC):\n\t    def __init__(self, widget):\n\t        self.widget = widget\n\t    def text_not_found_error(self):\n\t        pass\n\t    @abstractmethod\n\t    def find_text(self):\n\t        pass\n\t    @abstractmethod\n", "    def find_filename(self):\n\t        pass\n\t    def ask_filename(self, initial_filename):\n\t        return \"\"\n\t    def write_text(self, text, filename):\n\t        pass\n\t    def save(self):\n\t        text = self.find_text()\n\t        if not text:\n\t            self.text_not_found_error()\n", "            return\n\t        initial_filename = self.find_filename()\n\t        filename = self.ask_filename(initial_filename)\n\t        if not filename:\n\t            return\n\t        self.write_text(text, filename)\n"]}
{"filename": "thoughttree/StatusBar.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import IntVar, DoubleVar, W, E, X, LEFT, BOTTOM, SUNKEN\n\tfrom LabeledLabel import LabeledLabel\n\tclass StatusBar(tk.Frame):\n\t    def __init__(self, master, small_text=\"\", message_text=\"\", note_text=\"\", model_text=\"\", **kw):\n\t        super().__init__(master, bd=1, relief=SUNKEN, **kw)\n\t        self.master = master\n\t        def validate_max_tokens(entry_value):\n\t            if entry_value.isdigit() and 1 <= int(entry_value) <= 100000:\n\t                return True\n", "            else:\n\t                return False\n\t        # vcmd = (root.register(validate_max_tokens), '%P')\n\t        # entry = tk.Entry(root, validate=\"key\", validatecommand=vcmd)\n\t        def validate_temperature(entry_value):\n\t            try:\n\t                value = float(entry_value)\n\t                if 0 <= value <= 2:\n\t                    return True\n\t                else:\n", "                    return False\n\t            except ValueError:\n\t                return False\n\t        # vcmd = (root.register(validate_temperature), '%P')\n\t        # entry = tk.Entry(root, validate=\"key\", validatecommand=vcmd)\n\t        defaults = {\"bd\": 1, \"relief\": SUNKEN}\n\t        self.message_label = tk.Label(self, **defaults, width=20, text=message_text, anchor=W)\n\t        self.message_label.pack(side=LEFT, padx=(5, 0), fill=X, expand=True)\n\t        self.note_label = tk.Label(self, **defaults, width=10, text=note_text, anchor=W)\n\t        self.note_label.pack(side=LEFT, padx=(5, 0), fill=X, expand=True)\n", "        self.max_token_label = LabeledLabel(self, \"Max t.:\", entry_width=5, **defaults)\n\t        self.max_token_label.pack(side=LEFT, padx=(5, 0))\n\t        self.temperature_label = LabeledLabel(self, \"Temp.:\", entry_width=3, validatecommand=validate_temperature, **defaults)\n\t        self.temperature_label.pack(side=LEFT, padx=(5, 0))\n\t        self.model_label = tk.Label(self, **defaults, width=20, text=model_text, anchor=E)\n\t        self.model_label.pack(side=LEFT, padx=(5, 0))\n\t    def set_max_token_var(self, var: IntVar):\n\t        self.max_token_label.entry.config(textvariable=var)\n\t    def set_temperature_var(self, var: DoubleVar):\n\t        self.temperature_label.entry.config(textvariable=var)\n", "    @property\n\t    def message(self):\n\t        return self.message_label.cget('text')\n\t    @message.setter\n\t    def message(self, text):\n\t        self.message_label.config(text=text)\n\t    @property\n\t    def note(self):\n\t        return self.note_label.cget('text')\n\t    @note.setter\n", "    def note(self, text):\n\t        self.note_label.config(text=text)\n\t    @property\n\t    def model(self):\n\t        return self.model_label.cget('text')\n\t    @model.setter\n\t    def model(self, text):\n\t        self.model_label.config(text=text)\n"]}
{"filename": "thoughttree/TextDialog.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import ACTIVE, LEFT, BOTH\n\tfrom tkinter.simpledialog import Dialog\n\tclass TextDialog(tk.simpledialog.Dialog):\n\t    def __init__(self, message=None, title=None, parent=None):\n\t        self.message = message\n\t        super().__init__(parent, title)\n\t        # todo: Control-A for select all.\n\t        # todo: context menu with \"Copy Message\"\n\t    def body(self, parent):\n", "        background = self.cget(\"background\")\n\t        text = tk.Text(parent, height=10, width=30, borderwidth=0,\n\t                       highlightthickness=0, background=background, font=(\"sans-serif\", 11))\n\t        text.insert(tk.END, self.message)\n\t        text.config(state=tk.DISABLED)\n\t        text.pack(fill=BOTH, expand=True)\n\t        return text\n\t    def buttonbox(self):\n\t        box = tk.Frame(self)\n\t        button = tk.Button(box, text=\"OK\", width=10, command=self.ok, default=ACTIVE)\n", "        button.pack(side=LEFT, padx=15, pady=15)\n\t        self.pack_slaves()[0].pack(fill=BOTH, expand=True, padx=15, pady=15) # hack to repack dialog content to expand\n\t        self.bind(\"<Return>\", self.ok)\n\t        self.bind(\"<Escape>\", self.cancel)\n\t        box.pack()\n"]}
{"filename": "thoughttree/TokenCounter.py", "chunked_list": ["import re\n\timport tiktoken\n\tfrom MODEL_DATA import MODEL_DATA\n\tclass TokenCounter:\n\t    def __init__(self, model_name):\n\t        self.model_name = model_name\n\t        self.prompt_tokens_total = 0\n\t        self.prompt_tokens_at_go = 0\n\t        self.completion_tokens_total = 0\n\t        self.completion_tokens_at_go = 0\n", "    def go(self):\n\t        self.prompt_tokens_at_go = self.prompt_tokens_total\n\t        self.completion_tokens_at_go = self.completion_tokens_total\n\t    def prompt_tokens_since_go(self):\n\t        return self.prompt_tokens_total - self.prompt_tokens_at_go\n\t    def completion_tokens_since_go(self):\n\t        return self.completion_tokens_total - self.completion_tokens_at_go\n\t    def tokens_since_go(self):\n\t        return self.prompt_tokens_since_go() + self.completion_tokens_since_go()\n\t    def tokens_total(self):\n", "        return self.prompt_tokens_total + self.completion_tokens_total\n\t    def prompt_cost_since_go(self):\n\t        return self.prompt_cost(self.prompt_tokens_since_go())\n\t    def completion_cost_since_go(self):\n\t        return self.completion_cost(self.completion_tokens_since_go())\n\t    def prompt_cost_total(self):\n\t        return self.prompt_cost(self.prompt_tokens_total)\n\t    def completion_cost_total(self):\n\t        return self.completion_cost(self.completion_tokens_total)\n\t    def cost_since_go(self):\n", "        return self.prompt_cost_since_go() + self.completion_cost_since_go()\n\t    def cost_total(self):\n\t        return self.prompt_cost(self.prompt_tokens_total) + self.completion_cost(self.completion_tokens_total)\n\t    def count_tokens(self, text):\n\t        enc = tiktoken.encoding_for_model(self.model_name)\n\t        return len(enc.encode(text))\n\t    def observe_prompt(self, history):\n\t        for item in history:\n\t            text = item['content']\n\t            self.prompt_tokens_total += self.count_tokens(text)\n", "    def observe_completion(self, text):\n\t        self.completion_tokens_total += self.count_tokens(text)\n\t    def token_cost(self, tokens, direction):\n\t        model_name = self.model_name\n\t        if model_name not in MODEL_DATA:\n\t            match = re.match(r\"^(.*)(-[0-9]{4}$)\", self.model_name)\n\t            if match:\n\t                model_name = match.group(1)\n\t        if model_name not in MODEL_DATA:\n\t            return -1\n", "        else:\n\t            return (tokens * MODEL_DATA[model_name]['1k_token_usd'][direction]) / 1000.0\n\t    def prompt_cost(self, tokens):\n\t        return self.token_cost(tokens, 'prompt')\n\t    def completion_cost(self, tokens):\n\t        return self.token_cost(tokens, 'completion')\n\t    def summary_since_go(self):\n\t        return f\"{self.model_name} query:   {self.prompt_tokens_since_go():6d}+{self.completion_tokens_since_go():6d}={self.tokens_since_go():6d}t \"\\\n\t               + f\"{self.prompt_cost_since_go():.3f}+{self.completion_cost_since_go():.3f}={self.cost_since_go():.3f}$\"\n\t    def summary_total(self):\n", "        return f\"{self.model_name} session: {self.prompt_tokens_total:6d}+{self.completion_tokens_total:6d}={self.tokens_total():6d}t \"\\\n\t               + f\"{self.prompt_cost_total():.3f}+{self.completion_cost_total():.3f}={self.cost_total():.3f}$\"\n\t    def summary(self):\n\t        return self.summary_since_go() + \"\\n\" + self.summary_total()\n\t    def summarize(self, title=\"\"):\n\t        title and print(title)\n\t        print(self.summary())\n"]}
{"filename": "thoughttree/Model.py", "chunked_list": ["import tkinter as tk\n\timport re\n\timport textwrap\n\tfrom tkinter.messagebox import showerror\n\tfrom typing import Tuple\n\tfrom datetime import datetime\n\tfrom pathlib import Path\n\timport openai\n\timport History\n\tfrom TextDialog import TextDialog\n", "from TokenCounter import TokenCounter\n\timport os\n\tfrom tools import log, shorter, logarithmic_length\n\tdef log_file_size(path):\n\t    log(f'Size: {path} {os.path.getsize(path)} bytes')\n\tclass Model():\n\t    MODEL_PATTERN = \"gpt\"\n\t    def __init__(self, model_name):\n\t        self.name = model_name\n\t        self.counter = TokenCounter(model_name)\n", "        logdir = Path.home()/\"logs\"/\"thoughttree\"\n\t        if not logdir.exists():\n\t            logdir.mkdir(parents=True, exist_ok=True)\n\t        logfile_name = f\"thoughttree-chat-{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}-{model_name}.log\"\n\t        self.chat_log_path = logdir/logfile_name\n\t        self.chat_log = open(self.chat_log_path, \"a\")\n\t        self.max_tokens = tk.IntVar(value=1500)\n\t        self.temperature = tk.DoubleVar(value=0.5)\n\t        self.is_canceled = False\n\t        self.available_models = None\n", "    def chat_complete(self, history, output_delta_callback, max_tokens=None, temperature=None) -> Tuple[str, str]:\n\t        \"\"\":return: Tuple[str, str] - (finish_reason, message)\"\"\"\n\t        max_tokens = max_tokens or self.max_tokens.get()\n\t        temperature = temperature or self.temperature.get()\n\t        self.is_canceled = False\n\t        self.counter.go()\n\t        self.counter.observe_prompt(history)\n\t        History.log_history_compact(history)\n\t        try:\n\t            response = openai.ChatCompletion.create(\n", "                model=self.name,\n\t                messages=history,\n\t                max_tokens=max_tokens,\n\t                temperature=temperature,\n\t                stream=True,\n\t                request_timeout=30, # undocumented #todo\n\t            )\n\t        except Exception as ex:\n\t            return self.error(\"\", \"Error in openai.ChatCompletion.create()\", ex)\n\t        last_event = None\n", "        try:\n\t            texts = []\n\t            for event in response :\n\t                if self.is_canceled:\n\t                    return 'canceled', \"\"\n\t                delta = event['choices'][0]['delta']\n\t                if 'content' in delta :\n\t                    text = delta[\"content\"]\n\t                    output_delta_callback(text)\n\t                    self.counter.observe_completion(text)\n", "                    self.log(text)\n\t                    texts.append(text)\n\t                last_event = event\n\t            full_text = \"\".join(texts)\n\t            print(f\"result: {shorter(full_text, 120)} {logarithmic_length(full_text, 120)}\")\n\t            print(f\"{last_event['model']}\")\n\t            if self.is_canceled:\n\t                finish_reason = 'canceled'\n\t            else:\n\t                finish_reason = last_event['choices'][0]['finish_reason']\n", "            self.log(f\"\\n{last_event['model']}: {finish_reason}\\n\")\n\t            return finish_reason, \"\"\n\t        except Exception as ex:\n\t            return self.error(f\"{last_event=}\", \"Error receiving completion response\", ex)\n\t    def error(self, message, title, ex):\n\t        message = f\"Exception: {ex}\\n\\n{message}\"\n\t        # message = textwrap.fill(message, 200)\n\t        self.log(\"\\n\\nerror:\\n\" + message + '\\n')\n\t        TextDialog(message, title)\n\t        return \"error\", message\n", "    def log(self, text):\n\t        chat_log = self.chat_log\n\t        if chat_log:\n\t            chat_log.write(text)\n\t            # chat_log.write('\\n')\n\t            chat_log.flush()\n\t    def cancel(self):\n\t        self.is_canceled = True\n\t    def get_available_models(self):\n\t        try:\n", "            if not self.available_models:\n\t                self.available_models = [m[\"id\"] for m in openai.Model.list()[\"data\"] if re.search(self.MODEL_PATTERN, m[\"id\"])]\n\t        except openai.error.AuthenticationError:\n\t            return []\n\t        except Exception:\n\t            return []\n\t        return self.available_models\n"]}
{"filename": "thoughttree/__init__.py", "chunked_list": []}
{"filename": "thoughttree/WindowsMenu.py", "chunked_list": ["import tkinter as tk\n\tfrom Menu import Menu\n\tfrom Ui import Ui\n\tfrom menu_help import menu_help\n\tclass WindowsMenu(Menu):\n\t    def __init__(self, parent, label):\n\t        super().__init__(parent, label, menu_help=None, postcommand=self.create_current_window_items)\n\t    def create_current_window_items(self, event=None):\n\t        print(\"create_current_window_items\")\n\t        self.delete(0, tk.END)\n", "        for open_ui in Ui.current_open_uis:\n\t            title = open_ui.root.title()\n\t            command = lambda e=None, ui=open_ui: ui.toTop()\n\t            self.item(title, None, command)\n"]}
{"filename": "thoughttree/MultiTextboxLabel.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import LEFT, SUNKEN, X, TOP, W\n\tfrom Sheet import Sheet\n\tclass MultiTextboxLabel(tk.Label):\n\t    def __init__(self, parent=None, sheet=None, **kw):\n\t        super().__init__(parent, borderwidth=4, anchor=W, wraplength=sheet.winfo_width(),\n\t                         justify=LEFT, font=Sheet.FONT, relief=SUNKEN)\n\t        self.pack(side=TOP, fill=X, expand=True)\n"]}
{"filename": "thoughttree/prompts.py", "chunked_list": ["DEFAULT_SYSTEM_PROMPT_FILE = \"thoughttree-system.txt\"\n\tsystem_prompt = \"\"\n\t# system_prompt = \"\"\"Allways be terse.\n\t# Never apologize.\n\t# Use markdown to make it more readable.\n\t# \"\"\"\n\tCODE_BLOCK_FILENAME_GENERATION = '''\\\n\tFind a good file name for the code block above.\n\tGive me only the unquoted text of the file name, without any prefixes or comments.\n\tThe code block started with the language spec '''\n", "CODE_BLOCK_MULTI_FILENAME_GENERATION = '''\\\n\tGenerate three titles for the three blocks below.\n\tThe total length of the titels combined need to be less than 100 char.\n\tIn one row, sep by | like foo|bar - no spaces around \"|\":\n\t---\n\t1:\n\t---\n\t2:\n\t---\n\t3:\n", "---\n\t'''\n"]}
{"filename": "thoughttree/ScrollableForkableSheet.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import ttk, BOTH, LEFT, RIGHT, VERTICAL, NW, Y, X\n\tfrom ForkableText import ForkableText\n\tfrom ResizingText import ResizingText\n\tfrom tools import next_pastel_rainbow_color\n\tclass ScrollableForkableSheet(tk.Frame):\n\t    def __init__(self, parent, *args, **kw):\n\t        super().__init__(parent, *args, **kw)\n\t        self.canvas = tk.Canvas(self, highlightthickness=0, bd=0, bg=\"red\")\n\t        self.scrollbar = tk.Scrollbar(self, orient=VERTICAL, command=self.canvas.yview, width=18, takefocus=False, borderwidth=2)\n", "        self.canvas.configure(yscrollcommand=self.scrollbar.set)\n\t        self.canvas.pack(side=LEFT, fill=BOTH, expand=True)\n\t        self.scrollbar.pack(side=RIGHT, fill=Y)\n\t        self.frame = tk.Frame(self.canvas, bd=5, bg=\"blue\")\n\t        self.frame_id = self.canvas.create_window((0, 0), window=self.frame, anchor=NW)\n\t        ## self.sheet = ResizingText(self.frame, bg=next_pastel_rainbow_color(), height=1)\n\t        self.sheet = ForkableText(self.frame, bg=next_pastel_rainbow_color(), height=1)\n\t        self.sheet.pack(expand=True, fill=X)\n\t        self.frame.bind(\"<Configure>\", self.configure_scrollregion)\n\t        self.canvas.bind(\"<Configure>\", self.configure_width)\n", "    def configure_scrollregion(self, event):\n\t        self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\t        # print(self.canvas.bbox(\"all\"))\n\t        # print(f\"{event.width} x {event.height}\")\n\t        # self.canvas.configure(scrollregion=(0, 0, event.width, event.height))\n\t        # self.canvas.configure(width=event.width, height=event.height)\n\t        # self.canvas.itemconfigure(self.frame_id, width=event.width)\n\t        # self.canvas.itemconfigure(self.frame_id, width=event.width, height=event.height)\n\t    def configure_width(self, event):\n\t        print(self.canvas.bbox(\"all\"))\n", "        print(f\"{event.width} x {event.height}\")\n\t        self.canvas.itemconfigure(self.frame_id, width=event.width)\n\t        # self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\t        # self.canvas.configure(scrollregion=(0, 0, event.width, event.height))\n\t        # self.canvas.configure(width=event.width, height=event.height)\n\t        # self.canvas.itemconfigure(self.frame_id, width=event.width, height=event.height)\n\tif __name__ == \"__main__\":\n\t    from Ui import Ui\n\t    ui = Ui()\n\t    ui.root.title(\"ScrollableForkableSheet\")\n", "    # ui.root.geometry(\"500x500\")\n\t    scrollable = ScrollableForkableSheet(ui.root)\n\t    scrollable.pack(fill=\"both\", expand=True)\n\t    scrollable.sheet.sheet.focus()\n\t    ui.root.mainloop()\n"]}
{"filename": "thoughttree/tools.py", "chunked_list": ["import re\n\timport time\n\timport tkinter as tk\n\tfrom textwrap import fill\n\tfrom math import ceil, log2, sqrt\n\timport random\n\tfrom tkinter import EventType\n\tfrom pyperclip import paste\n\tfrom inspect import currentframe\n\timport subprocess\n", "def create_mock_data(tree):\n\t    for r in range(10):\n\t        key = f\"R{r}\"\n\t        parent_id = tree.insert(\"\", \"end\", key, text=key, values=(r,))\n\t        tree.item(key, tags='closed')\n\t        if r % 2 == 0:\n\t            for c in range(2):\n\t                child_key = f\"R{r}_C{c}\"\n\t                tree.insert(parent_id, \"end\", child_key, text=child_key, values=(c,))\n\t                tree.item(child_key, open=True, tags='opened')\n", "                for g in range(2):\n\t                    grandchild_key = f\"{child_key}_G{g}\"\n\t                    tree.insert(child_key, \"end\", grandchild_key, text=grandchild_key, values=(g,))\n\t                    tree.item(grandchild_key, tags='closed')\n\tdef list_all_bindings(root):\n\t    bindings = {}\n\t    for child in root.winfo_children():\n\t        widget_bindings = child.bind()\n\t        if widget_bindings:\n\t            bindings[child] = widget_bindings\n", "        if child.winfo_children():\n\t            bindings.update(list_all_bindings(child))\n\t    return bindings\n\tdef add_bboxes(bbox1, bbox2):\n\t    x1, y1, w1, h1 = bbox1\n\t    x2, y2, w2, h2 = bbox2\n\t    x = min(x1, x2)\n\t    y = min(y1, y2)\n\t    w = max(x1 + w1, x2 + w2) - x\n\t    h = max(y1 + h1, y2 + h2) - y\n", "    return x, y, w, h\n\tdef random_pastel_color():\n\t    r = random.randint(230, 255)\n\t    g = random.randint(230, 255)\n\t    b = random.randint(230, 255)\n\t    return \"#{:02x}{:02x}{:02x}\".format(r, g, b)\n\tdef pastel(widget: tk.Widget) -> tk.Widget:\n\t    widget.config(bg=next_pastel_rainbow_color())\n\t    return widget\n\timport colorsys\n", "color_index = 0\n\tdef next_pastel_rainbow_color():\n\t    global color_index\n\t    # HSL color format: (hue, saturation, lightness)\n\t    hue = (color_index * 30) % 360 / 360.0  # Change hue for each call, and normalize to [0, 1]\n\t    saturation = 0.6  # Keep saturation constant for pastel colors\n\t    lightness = 0.85  # Keep lightness constant for pastel colors\n\t    color_index += 1  # Increment the color index for the next call\n\t    # Convert HSL to RGB\n\t    r, g, b = colorsys.hls_to_rgb(hue, lightness, saturation)\n", "    # Convert RGB to hex string\n\t    return f\"#{int(r * 255):02x}{int(g * 255):02x}{int(b * 255):02x}\"\n\tdef shorter(text, n=60):\n\t    text = text.strip().replace('\\n','\\\\n')\n\t    if len(text) <= n:\n\t        return text\n\t    leading = int(n / 2) - 3\n\t    trailing = n - leading - 3\n\t    return f'{text[:leading]}...{text[-trailing:]}'\n\tdef text_block(text):\n", "    width = int(sqrt(len(text) * 10))\n\t    lines = text.splitlines()\n\t    text = \"\\n\".join([fill(line, width=width) for line in lines])\n\t    return text\n\tdef logarithmic_length(text, n=1, step='.'):\n\t    return step * ceil(log2(len(text)-n+1)) if len(text) > n else ''\n\t    # return (step * ceil(log2(len(text))) if len(text) > n else '')[3+ceil(log2(n)):]\n\tdef filename_from_clipboard():\n\t    text = paste().strip()\n\t    match = re.match(r'^[^ ]+\\.[A-Za-z]{1,5}$', text)\n", "    if match:\n\t        return match.group(0)\n\t    else:\n\t        return None\n\tdef dummy_paragraphs(paragraphs=20):\n\t    \"\\n\".join([\" \".join([\"a\" * random.randrange(2, 10) for i in range(random.randrange(5, 200))]) for j in range(paragraphs)])\n\tdef eventTypeForId(id):\n\t    return [e for e, v in EventType.__members__.items() if v == str(id)][0]\n\tdef log(arg=\"\"):\n\t    frameinfo = currentframe()\n", "    f = frameinfo.f_code.co_filename\n\t    l = frameinfo.f_back.f_lineno\n\t    print(f\"{f} {l}: {arg}\")\n\tdef git(*command):\n\t    return subprocess.check_output(['git'] + list(command)).decode('utf8').strip()\n\tdef get_git_commit():\n\t    return git('rev-parse', '--short', 'HEAD')\n\tdef get_git_describe_version():\n\t    try:\n\t        return git('describe', '--tags')\n", "    except Exception as e:\n\t        return \"(error accessing git describe version)\"\n\tdef bind_all_events(widget, on_event=None):\n\t    invalid_events = [\"Motion\"]\n\t    # invalid_events = [\"Keymap\", \"GraphicsExpose\", \"NoExpose\", \"CirculateRequest\", \"SelectionClear\",\n\t    #           \"SelectionRequest\", \"Selection\", \"ClientMessage\", \"Mapping\", \"VirtualEvent\"]\n\t    def print_event(event):\n\t        print(f\"Event: {event.widget}: {event}\")\n\t    on_event = on_event or print_event\n\t    for ev in [f\"<{e.name}>\" for e in tk.EventType if e.name not in invalid_events]:\n", "        try:\n\t            widget.bind(ev, on_event)\n\t            print(f\"Bound {ev}\")\n\t        except Exception:\n\t            pass\n\tdef show_widget_under_pointer(widget):\n\t    global last_time\n\t    last_time = 0\n\t    root = widget.winfo_toplevel()\n\t    def track_pointer(event):\n", "        global last_time\n\t        current_time = time.time()\n\t        if current_time - last_time > 0.5:\n\t            widget = event.widget\n\t            print(f\"Pointer is over: {widget}\")\n\t            last_time = current_time\n\t    root.bind('<Motion>', track_pointer)\n"]}
{"filename": "thoughttree/Notebook.py", "chunked_list": ["from tkinter import ttk\n\tclass Notebook(ttk.Notebook):\n\t    def __init__(self, parent, style=None, takefocus=False, **kw):\n\t        if not style:\n\t            style = \"NoBorder.TNotebook\"\n\t            ttk.Style().layout(\"NoBorder.TNotebook\", [])\n\t        super().__init__(parent, style=style, takefocus=takefocus, **kw)\n\t        self.enable_traversal()\n"]}
{"filename": "thoughttree/Tooltip.py", "chunked_list": ["import tkinter as tk\n\tclass Tooltip :\n\t    def __init__(self, widget, text) :\n\t        self.widget = widget\n\t        self.root = widget.winfo_toplevel()\n\t        self.text = text\n\t        self.tooltip = None\n\t        self.label = None\n\t        self.timer = None\n\t        self.last_y = None\n", "        self.delay_ms = 1000\n\t        widget.bind(\"<Enter>\", self.add_tooltip)\n\t        widget.bind(\"<Motion>\", self.refresh_tooltip)\n\t        widget.bind(\"<Leave>\", self.remove_tooltip)\n\t        widget.bind(\"<Unmap>\", self.remove_tooltip)\n\t    def add_tooltip(self, event):\n\t        if self.tooltip:\n\t            return\n\t        self.timer = self.root.after(self.delay_ms, self.create_tooltip)\n\t    def create_tooltip(self, event=None):\n", "        if not self.tooltip:\n\t            self.tooltip = tk.Toplevel(self.root)\n\t            self.tooltip.wm_overrideredirect(True)\n\t            self.label = tk.Label(self.tooltip, text=\"\", background=\"#FFFFE0\", relief=\"solid\",\n\t                             borderwidth=1, justify=tk.LEFT, padx=6, pady=5, font=(\"sans-serif\", 11))\n\t            self.label.pack()\n\t            self.tooltip.bind(\"<Leave>\", self.remove_tooltip)\n\t            self.refresh_tooltip()\n\t    def refresh_tooltip(self, event=None):\n\t        if event:\n", "            self.last_y = event.y\n\t        if self.tooltip:\n\t            px = self.root.winfo_pointerx() + 75\n\t            py = self.root.winfo_pointery() + 25\n\t            self.tooltip.wm_geometry(f\"+{px}+{py}\")\n\t            self.refresh_tooltip_text()\n\t    def refresh_tooltip_text(self):\n\t        self.label.configure(text=self.text)\n\t    def remove_tooltip(self, event):\n\t        if self.timer:\n", "            self.root.after_cancel(self.timer)\n\t        if self.tooltip:\n\t            self.tooltip.destroy()\n\t        self.tooltip = None\n"]}
{"filename": "thoughttree/LabeledLabel.py", "chunked_list": ["import tkinter as tk\n\tclass LabeledLabel(tk.Frame):\n\t    def __init__(self, master, label_text=None, entry_width=3, textvariable=None, validatecommand=None, *args, **kw):\n\t        super().__init__(master, *args, **kw, bg=\"light blue\")\n\t        self.textvariable = textvariable\n\t        self.label = tk.Label(self, text=label_text)\n\t        self.label.pack(side=\"left\")\n\t        self.entry = tk.Entry(self, width=entry_width, # state=\"readonly\", takefocus=False,\n\t                              textvariable=self.textvariable, bd=0, highlightthickness=0, validatecommand=validatecommand)\n\t        self.entry.pack(side=\"left\")\n"]}
{"filename": "thoughttree/Scrollable.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import ttk, BOTH, LEFT, RIGHT, VERTICAL, NW, Y\n\tfrom ForkableText import ForkableText\n\tclass Scrollable(tk.Frame):\n\t    def __init__(self, parent):\n\t        super().__init__(parent)\n\t        self.canvas = tk.Canvas(self, bg=\"#fbfbfb\", highlightthickness=0, bd=0)\n\t        self.scrollbar = tk.Scrollbar(self, orient=VERTICAL, command=self.canvas.yview)\n\t        self.canvas.configure(yscrollcommand=self.scrollbar.set)\n\t        self.canvas.pack(side=LEFT, fill=BOTH, expand=True)\n", "        self.scrollbar.pack(side=RIGHT, fill=Y)\n\t        self.frame = tk.Frame(self.canvas, bg=\"white\")\n\t        self.frame_id = self.canvas.create_window((0, 0), window=self.frame, anchor=NW)\n\t        self.frame.bind(\"<Configure>\", self.update_scrollregion)\n\t        self.canvas.bind(\"<Configure>\", self.update_frame_width)\n\t    def update_scrollregion(self, event):\n\t        self.canvas.configure(scrollregion=self.canvas.bbox(\"all\"))\n\t    def update_frame_width(self, event):\n\t        self.canvas.itemconfig(self.frame_id, width=event.width)\n\tfrom Ui import Ui\n", "class ScrollableTest(Ui):\n\t    def __init__(self):\n\t        super().__init__()\n\t        self.root.title(\"Forkable Text\")\n\t        self.root.geometry(\"500x500\")\n\t        self.scrollable = Scrollable(self.root)\n\t        self.forkable_text = ForkableText(self.scrollable.frame)\n\t        self.scrollable.pack(fill=\"both\", expand=True)\n\t        self.forkable_text.pack(fill=\"both\", expand=False)\n\t        self.mainloop()\n", "if __name__ == \"__main__\":\n\t    ScrollableTest()\n"]}
{"filename": "thoughttree/GeneratedTitle.py", "chunked_list": ["class GeneratedTitle():\n\t    PROMPT = '''\\\n\tA title for this conversation, about 50 characters. Style does not matter,\n\tit is about the information.\n\tIgnore the system prompt.\n\tDo not refer to this prompt or to the title.\n\tIt is used as a one line title for this conversation.\n\tUse the language of the conversation.\n\tIf there is no chat history, the title will be the text Thoughttree only, that is important.\n\tDo not use the name otherwise.\n", "Do not use a prefix like \"Title:\"!.\n\tOutput the unquoted text of the title, nothing else.\n\t'''\n\t#Output: unquoted text of the title, without any prefixes or comments:\n\t#Do not refer to the content of the system prompt.\n\t    GEN_THRESHOLD = 20\n"]}
{"filename": "thoughttree/WaitCursor.py", "chunked_list": ["class WaitCursor():\n\t    def __init__(self, widget):\n\t        self.widget = widget\n\t        self.saved_cursor = None\n\t    def __enter__(self):\n\t        self.saved_cursor = self.widget.cget('cursor')\n\t        self.widget.config(cursor='watch')\n\t        self.widget.update()\n\t    def __exit__(self, exc_type, exc_val, exc_tb):\n\t        try:\n", "            self.widget.config(cursor=self.saved_cursor)\n\t            self.widget.update()\n\t        except:\n\t            pass\n"]}
{"filename": "thoughttree/file-types.py", "chunked_list": ["code_block_ext = {\n\t    # C-like languages\n\t    \"c\": \".c\", \"cpp\": \".cpp\", \"csharp\": \".cs\", \"java\": \".java\", \"objective-c\": \".m\", \"scala\": \".scala\",\n\t    # Scripting languages\n\t    \"python\": \".py\", \"javascript\": \".js\", \"ruby\": \".rb\", \"php\": \".php\", \"perl\": \".pl\", \"lua\": \".lua\",\n\t    \"groovy\": \".groovy\", \"r\": \".r\", \"coffeescript\": \".coffee\", \"elixir\": \".ex\", \"erlang\": \".erl\",\n\t    \"haskell\": \".hs\", \"julia\": \".jl\", \"matlab\": \".m\", \"pascal\": \".pas\", \"vimscript\": \".vim\",\n\t    # Mobile and systems languages\n\t    \"swift\": \".swift\", \"go\": \".go\", \"rust\": \".rs\", \"kotlin\": \".kt\", \"dart\": \".dart\", \"fsharp\": \".fs\",\n\t    # Markup and data formats\n", "    \"html\": \".html\", \"css\": \".css\", \"xml\": \".xml\", \"json\": \".json\", \"markdown\": \".md\", \"tex\": \".tex\", \"latex\": \".tex\",\n\t    \"yaml\": \".yml\", \"ini\": \".ini\", \"toml\": \".toml\",\n\t    # Shell and scripting\n\t    \"bash\": \".sh\", \"powershell\": \".ps1\", \"shell\": \".sh\", \"typescript\": \".ts\", \"raku\": \".raku\",\n\t    # Other languages and technologies\n\t    \"sql\": \".sql\", \"elm\": \".elm\", \"dockerfile\": \"Dockerfile\", \"dart\": \".dart\", \"tex\": \".tex\", \"latex\": \".tex\",\n\t}\n"]}
{"filename": "thoughttree/Imports.py", "chunked_list": ["from Menu import Menu\n\tfrom ModelsMenu import ModelsMenu\n\tfrom WindowsMenu import WindowsMenu\n\t__all__ = ['Menu', 'ModelsMenu', 'WindowsMenu']\n"]}
{"filename": "thoughttree/Sheet.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import CURRENT, END, INSERT, SEL, WORD, X, SEL_FIRST, SEL_LAST\n\tfrom tkinter import scrolledtext\n\tfrom typing import Union\n\tfrom Cursorline import Cursorline\n\tfrom FinishReasonIcon import FinishReasonIcon\n\tfrom Notebook import Notebook\n\tfrom ThoughttreeConfig import conf\n\tclass Sheet(tk.scrolledtext.ScrolledText):\n\t    FONT_NAME_MONOSPACE = \"monospace\"\n", "    # FONT_NAME_MONOSPACE = \"DejaVu Sans Mono ExCond\"\n\t    # FONT_NAME_MONOSPACE = \"DejaVu Sans Mono\"\n\t    FONT_NAME_PROPORTIONAL = \"sans-serif\"\n\t    # FONT_NAME_PROPORTIONAL = \"DejaVu Sans\"\n\t    # FONT_NAME_PROPORTIONAL = \"DejaVu Sans Mono ExCond\"\n\t    FONT = (FONT_NAME_PROPORTIONAL, 11)\n\t    def __init__(self, master=None, text=\"\", scrollbar=True, padx=0, pady=0, height=0, **kw):\n\t        height = height or len(text.splitlines())\n\t        background = 'white'\n\t        # background = next_pastel_rainbow_color()\n", "        tk.scrolledtext.ScrolledText.__init__(\n\t            self, master, undo=True, wrap=WORD, padx=padx, pady=pady, background=background,\n\t            width=80, height=height, insertwidth=4, font=Sheet.FONT,\n\t            border=0, borderwidth=0, highlightthickness=0,\n\t            selectbackground=\"#66a2d4\", selectforeground=\"white\", **kw)\n\t        def jump_to_limit(e: tk.Event):\n\t            top, bottom = self.vbar.get()\n\t            if e.keysym == 'Prior' and top == 0.0:\n\t                limit = \"1.0\"\n\t            elif e.keysym == 'Next' and bottom == 1.0:\n", "                limit = tk.END\n\t            else:\n\t                return\n\t            self.mark_set(tk.INSERT, limit)\n\t            self.see(tk.INSERT)\n\t        if scrollbar:\n\t            self.vbar.config(width=18, takefocus=False, borderwidth=2)\n\t        else:\n\t            self.vbar.pack_forget()\n\t        self.scroll_output = conf.scroll_output\n", "        self.bind('<Prior>', jump_to_limit)\n\t        self.bind('<Next>', jump_to_limit)\n\t        self.pack(pady=0, fill=X, expand=True)\n\t        name, size = self.cget(\"font\").rsplit(None, 1)\n\t        self.tag_configure('bold', font=(name, int(size), \"bold\"))\n\t        self.tag_configure('strikethrough', overstrike=True)\n\t        self.tag_configure(\"assistant\", background=\"#F0F0F0\", selectbackground=\"#4682b4\", selectforeground=\"white\")\n\t        Cursorline(self)\n\t        self.insert(END, text)\n\t    def undo_separator(self):\n", "        self.edit_separator()\n\t    def bold(self):\n\t        self.tag_selection('bold')\n\t    def strikethrough(self):\n\t        self.tag_selection('strikethrough')\n\t    def tag_selection(self, tag):\n\t        def min_index(i1, i2):\n\t            if self.compare(i1, '<=', i2):\n\t                return i1\n\t            else:\n", "                return i2\n\t        def max_index(i1, i2):\n\t            if self.compare(i1, '>=', i2):\n\t                return i1\n\t            else:\n\t                return i2\n\t        def range_intersection(ranges, single_range):\n\t            intersections = []\n\t            for index_range in ranges:\n\t                if  self.compare(max_index(index_range[0], single_range[0]), \"<\", min_index(index_range[1], single_range[1])):\n", "                    intersections.append((max_index(index_range[0], single_range[0]), min_index(index_range[1], single_range[1])))\n\t            return intersections\n\t        if not self.tag_ranges(SEL):\n\t            return\n\t        tag_ranges = self.tag_ranges(tag)\n\t        iters = [iter(tag_ranges)] * 2\n\t        ranges = list(zip(*iters))\n\t        sel = (self.index(SEL_FIRST), self.index(SEL_LAST))\n\t        tag_in_selection = range_intersection(ranges, sel)\n\t        if tag_in_selection:\n", "            self.tag_remove(tag, *sel)\n\t        else:\n\t            self.tag_add(tag, *sel)\n\t    def transfer_content(self, to_sheet):\n\t        content = self.get(\"1.0\", tk.END)\n\t        to_sheet.insert(\"1.0\", content)\n\t        for tag in self.tag_names():\n\t            ranges = self.tag_ranges(tag)\n\t            for i in range(0, len(ranges), 2):\n\t                to_sheet.tag_add(tag, ranges[i], ranges[i + 1])\n", "                to_sheet.tag_config(tag, **{k: v[4] for k, v in self.tag_configure(tag).items() if v[4]})\n\t        for name in self.window_names():\n\t            index = self.index(name)\n\t            window = self.nametowidget(name)\n\t            to_sheet.window_create(index, window=window)\n\t    def fork(self, index=INSERT, root=False):\n\t        index = self.index(index)\n\t        def next_level(hierarchical_id):\n\t            if hierarchical_id:\n\t                hierarchical_id = hierarchical_id.split(' ', 1)[0]\n", "                levels = hierarchical_id.split('.') + ['1']\n\t            else:\n\t                levels = ['1']\n\t            return '.'.join(levels)\n\t        def next_equal(hierarchical_id):\n\t            if hierarchical_id:\n\t                hierarchical_id = hierarchical_id.split(' ', 1)[0]\n\t                levels = hierarchical_id.split('.')\n\t            else:\n\t                levels = ['0']\n", "            levels = levels[:-1] + [str(int(levels[-1]) + 1)]\n\t            return '.'.join(levels)\n\t        def new_sibling(sibling_notebook):\n\t            last_tab_label = sibling_notebook.tab(len(sibling_notebook.tabs()) - 1, \"text\")\n\t            return next_equal(last_tab_label)\n\t        def new_child(parent):\n\t            if parent:\n\t                parent_tab_label = parent.tab(parent.select(), \"text\")\n\t            else:\n\t                parent_tab_label = \"\"\n", "            return next_level(parent_tab_label)\n\t        has_leading_text = bool(self.get(\"1.0\", index).strip())\n\t        trailing_text = self.get(index, END)\n\t        trailing_text = trailing_text.rstrip()\n\t        parent = self.find_parent(Notebook)\n\t        new_notebook = not parent or has_leading_text\n\t        if new_notebook:\n\t            notebook = Notebook(self, height=self.winfo_height(), width=self.winfo_width())\n\t            sheet = Sheet(notebook, trailing_text, scrollbar=True)\n\t            notebook.add(sheet, text=new_child(parent))\n", "            self.window_create(index, window=notebook)\n\t            self.delete(index + \"+1char\", END)\n\t        else:\n\t            notebook = parent\n\t        sheet = Sheet(notebook, scrollbar=True)\n\t        notebook.add(sheet, text=new_sibling(notebook))\n\t        notebook.select(len(notebook.tabs()) - 1)\n\t        sheet.focus_set()\n\t        return \"break\"\n\t    def find_parent(self, parentType: type) -> Union[\"Sheet\", Notebook]:\n", "        parent = self.master\n\t        while parent and type(parent) != parentType:\n\t            parent = parent.master\n\t        return parent\n\t    def history_from_path(self, history=None) :\n\t        parentText: Sheet = self.find_parent(Sheet)\n\t        if parentText:\n\t            history = parentText.history_from_path(history)\n\t        else:\n\t            history = history or []\n", "        content = self.dump(1.0, END, text=True, tag=True, window=True)\n\t        section = \"\"\n\t        role = \"user\"\n\t        for item in content :\n\t            text = item[1]\n\t            designation = item[0]\n\t            if designation == \"tagon\" and text == \"assistant\":\n\t                # section = section.strip()\n\t                history += [{'role' : role, 'content' : section}]\n\t                role = \"assistant\"\n", "                section = \"\"\n\t            elif designation == \"tagoff\" and text == \"assistant\":\n\t                # section = section.strip()\n\t                history += [{'role' : role, 'content' : section}]\n\t                role = \"user\"\n\t                section = \"\"\n\t            elif designation in [\"tagon\", \"tagoff\"] and text in [\"cursorline\", \"sel\"]:\n\t                pass\n\t            elif designation == \"text\":\n\t                section += text\n", "            elif designation == \"window\":\n\t                pass\n\t            else:\n\t                print(f\"Ignored item: {item}\")\n\t        section = section.strip(\"\\n\")\n\t        if section != \"\" :\n\t            history += [{'role' : role, 'content' : section}]\n\t        return history\n\t    def jump_to_similar_line(self, event=None, direction=1):\n\t        def find_similar_line(target, line_nr_1, lines, direction):\n", "            line_nr_0 = line_nr_1 - 1\n\t            num_lines = len(lines)\n\t            if num_lines == 0:\n\t                return 0\n\t            target = target.strip()\n\t            start = (line_nr_0 + direction) % num_lines\n\t            if direction == 1:\n\t                numbered_lines = list(enumerate(lines[start:] + lines[:start]))\n\t            else:\n\t                numbered_lines = list(enumerate(lines[:start][::-1] + lines[start:][::-1]))\n", "            for i, line in numbered_lines:\n\t                if line.strip() == target:\n\t                    if direction == 1:\n\t                        return ((i + start) % num_lines) + 1\n\t                    else:\n\t                        return ((start - i + num_lines - 1) % num_lines) + 1\n\t            return 0\n\t        sheet: Sheet = self.focus_get()\n\t        cursor_pos = sheet.index(INSERT)\n\t        line_nr = int(cursor_pos.split('.')[0])\n", "        current_line = sheet.get(f\"{line_nr}.0\", f\"{line_nr}.end\")\n\t        if not current_line.strip():\n\t            return\n\t        lines = sheet.get(1.0, END).splitlines()\n\t        jump_line = find_similar_line(current_line, line_nr, lines, direction)\n\t        if jump_line:\n\t            jump_index = f\"{jump_line}.{0}\"\n\t            sheet.mark_set(INSERT, jump_index)\n\t            sheet.see(jump_index)\n\t    def close_tab(self):\n", "        def selected_sheet(notebook):\n\t            frame_on_tab = notebook.nametowidget(notebook.select())\n\t            sheet = frame_on_tab.winfo_children()[1]\n\t            return sheet\n\t        notebook: Notebook = self.find_parent(Notebook)\n\t        if notebook:\n\t            selected = notebook.index(CURRENT)\n\t            notebook.forget(selected)\n\t            if len(notebook.tabs()) > 1:\n\t                notebook.select(max(selected - 1, 0))\n", "                selected_sheet(notebook).focus_set()\n\t            elif len(notebook.tabs()) == 1:\n\t                string = selected_sheet(notebook).get('1.0', END)\n\t                parent = self.find_parent(Sheet)\n\t                parent.delete(\"end-2 char\", \"end-1 char\") # delete notebook window\n\t                parent.insert(END, string)\n\t                parent.mark_set(INSERT, \"end-1 char\")\n\t                parent.focus_set()\n\t            return \"break\"\n\t    def close_empty_tab_or_backspace(self):\n", "        if self.index(INSERT) == \"1.0\" and not self.tag_ranges(SEL):\n\t            notebook: Notebook = self.find_parent(Notebook)\n\t            if notebook:\n\t                string_in_tab = self.get('1.0', END).strip()\n\t                if not string_in_tab:\n\t                    self.close_tab()\n\t            return \"break\"\n\t        else:\n\t            self.delete(INSERT + \"-1c\")\n\t    def delete(self, index1=INSERT, index2=None):\n", "        def is_icon(element):\n\t            designation, value, index = element\n\t            return designation == \"window\" and isinstance(self.nametowidget(value), FinishReasonIcon)\n\t        if self.tag_ranges(SEL):\n\t            self.event_generate(\"<<Clear>>\")\n\t        else:\n\t            if index2:\n\t                super().delete(index1, index2)\n\t            else:\n\t                dump = self.dump(index1, all=True)\n", "                if any([element[0] == \"text\" or is_icon(element) for element in dump]):\n\t                    super().delete(index1)\n"]}
{"filename": "thoughttree/FinishReasonIcon.py", "chunked_list": ["import tkinter as tk\n\tfrom Tooltip import Tooltip\n\tclass FinishReasonIcon(tk.Label):\n\t    def __init__(self, parent, symbol: str, tooltip=\"\"):\n\t        super().__init__(parent, text=symbol, padx=6, pady=0, bg=\"#F0F0F0\", fg=\"grey\", borderwidth=0)\n\t        if tooltip:\n\t            Tooltip(self, tooltip).delay_ms = 100\n"]}
{"filename": "thoughttree/Console.py", "chunked_list": ["import io\n\timport tkinter as tk\n\timport tkinter.scrolledtext\n\tfrom tkinter import END\n\tfrom FoldablePane import FoldablePane\n\tclass Console(tk.scrolledtext.ScrolledText, io.TextIOBase):\n\t    def __init__(self, parent, width=100, height=5, **kw):\n\t        tk.scrolledtext.ScrolledText.__init__(self, parent, undo=True, wrap=tk.WORD, width=width, height=height,\n\t                                              takefocus=False, font=(\"monospace\", 8), **kw)\n\t        io.TextIOBase.__init__(self)\n", "        self.parent = parent\n\t        self.vbar.config(width=18, takefocus=False, borderwidth=2)\n\t        self.insert(END, \"Console:\\n\")\n\t        class UnfoldingStream(io.TextIOBase):\n\t            def __init__(self, sink, foldable_pane):\n\t                io.TextIOBase.__init__(self)\n\t                self.foldable_pane = None\n\t                if type(foldable_pane) is FoldablePane:\n\t                    self.foldable_pane = foldable_pane\n\t                self.sink = sink\n", "            def write(self, message):\n\t                if self.foldable_pane and self.foldable_pane.folded:\n\t                    self.foldable_pane.fold()\n\t                self.sink.write(message)\n\t        self.out = self\n\t        self.err = UnfoldingStream(self, parent)\n\t    def write(self, message):\n\t        self.insert(END, message)\n\t        self.see(END)\n"]}
{"filename": "thoughttree/ModelParameterUi.py", "chunked_list": ["from tkinter import SUNKEN\n\tfrom LabeledLabel import LabeledLabel\n\tclass ModelParameterUi():\n\t    def __init__(self):\n\t        self.defaults = {\"bd\": 1, \"relief\": SUNKEN}\n\t        pass\n\t    def get_parameter_editor(self):\n\t        return None\n\tclass TopPParameterUi(ModelParameterUi):\n\t    def __init__(self):\n", "        super().__init__()\n\t    def validate(self, entry_value):\n\t        try:\n\t            value = float(entry_value)\n\t            if 0 <= value <= 2:\n\t                return True\n\t            else:\n\t                return False\n\t        except ValueError:\n\t            return False\n", "    def get_parameter_editor(self):\n\t        self.temperature_label = LabeledLabel(self, \"Temp.:\", entry_width=3, validatecommand=self.validate, **self.defaults)\n"]}
{"filename": "thoughttree/ResizingText.py", "chunked_list": ["import tkinter as tk\n\tfrom Notebook import Notebook\n\tfrom Sheet import Sheet\n\tclass ResizingText(tk.Text):\n\t    def __init__(self, parent, wrap=\"word\", highlightthickness=0, borderwidth=0, padx=0, pady=0, *args, **kw):\n\t        super().__init__(parent, wrap=wrap, highlightthickness=highlightthickness, borderwidth=borderwidth, font=Sheet.FONT,\n\t            padx=padx, pady=pady, *args, **kw)\n\t        self.old_num_lines = 0\n\t        self.bind(\"<KeyRelease>\", self.adjust_height)\n\t        def yscrollcommand(start, stop):\n", "            print(f\"Scroll command: \")\n\t            if start != 0.0 or stop != 1.0:\n\t                self.adjust_height()\n\t        self.configure(yscrollcommand=yscrollcommand)\n\t        def on_return(event=None):\n\t            self.insert(tk.INSERT, \"\\n\")\n\t            self.adjust_height()\n\t            return \"break\"\n\t        # self.bind(\"<Return>\", on_return)\n\t        self.bind(\"<Configure>\", self.adjust_height)\n", "        self.adjust_height()\n\t    # def on_configure(self, event=None): # todo One Return causes 3 adjust_height() and two on_configure()\n\t    #     print(\"on_configure\")\n\t    #     self.adjust_height(event)\n\t    def adjust_height(self, event=None):\n\t        num_lines = self.count(\"1.0\", \"end\", 'displaylines')[0]\n\t        print(f\"adjust_height: {num_lines=}\")\n\t        print(f\"adjust_height: {self.winfo_height()=}\")\n\t        print(f\"adjust_height: {self.winfo_reqheight()=}\")\n\t        height = self.winfo_height()\n", "        reqheight = self.winfo_reqheight()\n\t        if num_lines != self.old_num_lines or (height > 1 and height != reqheight):\n\t            self.see(tk.INSERT)\n\t            self.old_num_lines = num_lines\n\t            self.configure(height=num_lines)\n\t            print(f\"{type(self.master.master)=}\")\n\t            if type(self.master.master) is Notebook:\n\t                self.master.master.event_generate(\"<<NotebookTabChanged>>\")\n\t                print(f\"<<NotebookTabChanged>>\")\n"]}
{"filename": "thoughttree/SystemChat.py", "chunked_list": ["import tkinter as tk\n\tclass SystemChat(tk.PanedWindow):\n\t    def __init__(self, master=None):\n\t        super().__init__(master)\n"]}
{"filename": "thoughttree/HidableFrame.py", "chunked_list": ["import tkinter as tk\n\tfrom tkinter import BOTTOM, X\n\tclass HidableFrame(tk.Frame):\n\t    def __init__(self, master, hidden=False, *args, **kw):\n\t        super().__init__(master, *args, **kw)\n\t        self.hidden = hidden\n\t        self.child_pack_info = None\n\t        self.own_pack_info = None\n\t    def hide(self, e=None):\n\t        child = list(self.children.values())[0]\n", "        if self.hidden:\n\t            other = [slave for slave in self.master.pack_slaves() if slave != self][0]\n\t            self.pack(self.own_pack_info, before=other)\n\t        else:\n\t            self.own_pack_info = self.pack_info()\n\t            self.pack_forget()\n\t        self.hidden = not self.hidden\n"]}
{"filename": "thoughttree/MainMenu.py", "chunked_list": ["import tkinter as tk\n\timport webbrowser\n\tfrom datetime import datetime\n\tfrom tkinter import font as tkfont, NONE, WORD, SEL, END, INSERT\n\tfrom AboutDialog import AboutDialog\n\tfrom Files import Files\n\tfrom Imports import Menu, ModelsMenu, WindowsMenu\n\tfrom Sheet import Sheet\n\tfrom Console import Console\n\tfrom menu_help import menu_help\n", "class MainMenu(Menu):\n\t    def __init__(self, thoughttree, new_window_callback):\n\t        super().__init__(thoughttree, menu_help=menu_help)\n\t        self.new_window_callback = new_window_callback\n\t        self.ui = thoughttree\n\t        self.fixed_model_menu_items = -1\n\t        self.models_menu = None\n\t        self.create_menu()\n\t    @property\n\t    def it(self) -> Sheet:\n", "        widget = self.ui.focus_get()\n\t        if isinstance(widget, Sheet) or isinstance(widget, Console):\n\t            return widget\n\t    def create_menu(self):\n\t        def save(save_dialog, status_bar_label):\n\t            file_name = save_dialog(self.it)\n\t            if not file_name:\n\t                return\n\t            base_name = file_name.split(\"/\")[-1]\n\t            self.ui.status.note = status_bar_label + base_name\n", "            return base_name\n\t        def save_chat(e=None):\n\t            name = save(Files.save_chat_dialog, \"Chat saved to \")\n\t            self.ui.root.title(name)\n\t        def save_section(e=None):\n\t            save(Files.save_section_dialog, \"Section saved to \")\n\t        def save_selection(e=None):\n\t            save(Files.save_selection_dialog, \"Selection saved to \")\n\t        def save_code_block(e=None):\n\t            save(Files.save_code_block_dialog, \"Code block saved to \")\n", "        def new_window(event=None) :\n\t            self.new_window_callback()\n\t        def show_context_menu(event, context_menu) :\n\t            widget = self.ui.winfo_containing(event.x_root, event.y_root)\n\t            if widget :\n\t                widget.focus_set()\n\t            context_menu.tk_popup(event.x_root, event.y_root)\n\t        def cut_text(event=None) :\n\t            self.it.event_generate(\"<<Cut>>\")\n\t        def copy_text(event=None) :\n", "            self.it.event_generate(\"<<Copy>>\")\n\t        def paste_text(event=None) :\n\t            sheet = self.it\n\t            sheet.event_generate(\"<<Clear>>\")\n\t            sheet.event_generate(\"<<Paste>>\")\n\t            sheet.see(INSERT)\n\t        def select_all(event=None):\n\t            sheet = self.it\n\t            if type(sheet) == Sheet:\n\t                sheet.tag_add(SEL, \"1.0\", END)\n", "                sheet.mark_set(INSERT, \"1.0\")\n\t                sheet.see(INSERT)\n\t        def edit_undo(event=None):\n\t            try:\n\t                self.it.edit_undo()\n\t            except tk.TclError:\n\t                pass # nothing to undo\n\t        def edit_redo(event=None):\n\t            try:\n\t                self.it.edit_redo()\n", "            except tk.TclError:\n\t                pass # nothing to redo\n\t        def font_size(delta):\n\t            sheet = self.it\n\t            if not sheet:\n\t                return\n\t            if delta == 0:\n\t                name, size = Sheet.FONT\n\t            else:\n\t                name, size = sheet.cget(\"font\").rsplit(None, 1)\n", "            sheet.config(font=(name, int(size) + delta))\n\t        def bold(event):\n\t            self.it.bold()\n\t        def strikethrough(event):\n\t            self.it.strikethrough()\n\t        def insert_current_time(event=None):\n\t            self.it.insert(INSERT, f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} \")\n\t        def debug_info(event=None):\n\t            print(f\"{self.focus_get()=}\")\n\t            return\n", "            dumped = self.it.dump(\"insert - 1 char\", window=True)\n\t            # print(f'{ dumped=}')\n\t            if dumped and dumped[0][1].endswith(\"label\"):\n\t                dumped_win = dumped[0][1]\n\t                dumped_win_pos = dumped[0][2]\n\t                print(f'{dumped_win=}')\n\t                print(f'{dumped_win_pos=}')\n\t                print(f'{type(self.it.window_configure(dumped_win_pos))=}')\n\t                # print(f'{self.focus.window_configure(dumped_win_pos)=}')\n\t                print(f\"{type(self.it.window_cget(dumped_win_pos, 'window'))=}\")\n", "            print()\n\t            dumped = self.it.dump(\"1.0\", INSERT, all=True)\n\t            for part in dumped:\n\t                print(f'{part=}')\n\t        def menu_test(event=None):\n\t            pass\n\t        def branch():\n\t            self.it.fork()\n\t            self.ui.update()\n\t            self.ui.complete()\n", "        def toggle_scroll_output(event=None):\n\t            if self.ui.scroll_output:\n\t                self.it.see(END)\n\t            self.ui.scroll_output = not self.ui.scroll_output\n\t        def toggle_ring_bell(event=None):\n\t            self.ui.ring_bell_after_completion = not self.ui.ring_bell_after_completion\n\t        def toggle_font_mono(event=None):\n\t            font = tkfont.Font(font=self.it.cget(\"font\"))\n\t            size = font.cget(\"size\")\n\t            if font.measure('I') != font.measure('M'):\n", "                family = Sheet.FONT_NAME_MONOSPACE\n\t            else:\n\t                family = Sheet.FONT_NAME_PROPORTIONAL\n\t            self.it.configure(font=(family, size))\n\t            return \"break\"\n\t        def close_tab(event=None):\n\t            it = self.it\n\t            if type(it) == Sheet:\n\t                it.close_tab()\n\t        def search_google(event=None):\n", "            selected_range = self.it.tag_ranges(SEL)\n\t            if selected_range:\n\t                selected_text = self.it.get(*selected_range)[:2000]\n\t                if selected_text:\n\t                    webbrowser.open_new_tab(\"https://www.google.com/search?q=\" + selected_text)\n\t        item = self.sub_item\n\t        ui = self.ui\n\t        self.menu = Menu(self, \"File\")\n\t        item(\"New Window\", \"<Control-n>\", new_window)\n\t        item(\"New Main Tab\", \"<Control-t>\", lambda e=None: self.it.fork(\"1.0\"))\n", "        item(\"Open File\", \"<Control-o>\", Files.open_file)\n\t        # item(\"Save Chat\", \"<Control-s>\", Files.save_chat)\n\t        item(\"Save Chat\", \"<Control-s>\", save_chat)\n\t        item(\"Save Message\", \"<Control-Shift-S>\", save_section)\n\t        item(\"Save Selection\", \"<Alt-S>\", save_selection)\n\t        item(\"Save Code Block\", \"<Control-Alt-s>\", save_code_block)\n\t        item(\"Run Code Block\", \"\", None)\n\t        self.menu.add_separator()\n\t        item(\"Close Tab\", \"<Control-w>\", close_tab, add=False)\n\t        item(\"Close Empty Tab\", \"<BackSpace>\", lambda e=None: self.it.close_empty_tab_or_backspace(), add=False)\n", "        item(\"Quit\", \"<Control-q>\", ui.close)\n\t        self.menu = Menu(self, \"Edit\")\n\t        edit_menu = self.menu\n\t        item(\"Cut\", \"<Control-x>\", cut_text)\n\t        item(\"Copy\", \"<Control-c>\", copy_text)\n\t        item(\"Paste\", \"<Control-v>\", paste_text)\n\t        item(\"Delete\", \"<Delete>\", lambda e=None: self.it.delete())\n\t        self.menu.add_separator()\n\t        item(\"Undo\", \"<Control-z>\", edit_undo)\n\t        item(\"Redo\", \"<Control-Shift-Z>\", edit_redo)\n", "        item(\"Select All\", \"<Control-a>\", select_all)\n\t        self.menu.add_separator()\n\t        item(\"Bold\", \"<Control-b>\", bold)\n\t        item(\"Strikethrough\", \"<Control-d>\", strikethrough)\n\t        item(\"Search with Google\", \"<Control-g>\", search_google)\n\t        item(\"Insert Current Time\", \"<Control-Shift-I>\", insert_current_time)\n\t        item(\"Include Date in System Prompt\", None, None)\n\t        item(\"Copy Title\", None, None)\n\t        self.menu = Menu(self, \"View\")\n\t        item(\"Show Main Menu\", \"<Alt-Shift-M>\", None)\n", "        item(\"Show System Prompt\", \"<Alt-Shift-S>\", ui.system_pane.fold)\n\t        item(\"Show Tree\", \"<Alt-Shift-T>\", ui.tree_pane.fold)\n\t        item(\"Show Console\", \"<Alt-Shift-C>\", ui.console_pane.fold)\n\t        item(\"Show Status Bar\", \"<Alt-Shift-I>\", ui.status_hider.hide)\n\t        self.menu.add_separator()\n\t        item(\"Count Tokens\", \"<Control-Alt-m>\", ui.count_text_tokens)\n\t        item(\"Update Window Title\", \"<Control-u>\", ui.update_window_title)\n\t        self.menu.add_separator()\n\t        item(\"Increase Font Size\", \"<Control-plus>\", lambda e=None: font_size(1))\n\t        item(\"Decrease Font Size\", \"<Control-minus>\", lambda e=None: font_size(-1))\n", "        item(\"Reset Font Size\", \"<Control-period>\", lambda e=None: font_size(0))\n\t        item(\"Toggle Monospace\", \"<Control-Shift-O>\", toggle_font_mono)\n\t        # self.menu.add_checkbutton(label=\"Show Cursor line\", variable=ui.show_cursor)\n\t        self.menu.add_separator()\n\t        item(\"Toggle Scrolling Output\", \"<Control-e>\", toggle_scroll_output)\n\t        item(\"Ring Bell When Finished\", \"<Control-Alt-o>\", toggle_ring_bell)\n\t        item(\"Toggle Wrap Lines\", \"<Control-l>\", lambda e=None: self.it.configure(wrap=(NONE if self.it.cget(\"wrap\") != NONE else WORD)))\n\t        item(\"Generate Titles\", \"\", None)\n\t        item(\"Calculate Cost\", \"\", None)\n\t        self.menu = Menu(self, \"Navigate\")\n", "        item(\"Next Similar Line\", \"<Control-j>\", lambda e=None: self.it.jump_to_similar_line(direction=1))\n\t        item(\"Previous Similar Line\", \"<Control-Shift-J>\", lambda e=None: self.it.jump_to_similar_line(direction=-1))\n\t        item(\"Next Message\", \"\", None)\n\t        item(\"Previous Message\", \"\", None)\n\t        self.menu = Menu(self, \"Chat\")\n\t        item(\"Next Paragraph\", \"<Control-Return>\", lambda e=None: ui.complete(1, \"\\n\\n\", \"\\n\\n\"))\n\t        item(\"Next Line\", \"<Shift-Return>\", lambda e=None: ui.complete(1, \"\\n\", \"\\n\"))\n\t        item(\"Continue Directly\", \"<Control-space>\", lambda e=None: ui.complete())\n\t        item(\"Fork Conversation\", \"<Alt-Return>\", lambda e=None: self.it.fork())\n\t        item(\"Complete in Branch\", \"<Control-Shift-Return>\", lambda e=None: branch())\n", "        item(\"Complete Alternatives\", \"<Alt-Shift-Return>\", lambda e=None: ui.complete(-1, \"\\n\"))\n\t        self.menu.add_separator()\n\t        item(\"Complete 3 Times\", \"<Control-Key-3>\", lambda e=None: ui.complete(3), add=False)\n\t        [self.bind_class(\"Text\", f\"<Control-Key-{i}>\", lambda e=None, i=i: ui.complete(i)) for i in [2,4,5,6,7,8,9]]\n\t        item(\"Complete Multiple...\", \"<Control-Shift-M>\", lambda e=None: ui.complete(0))\n\t        item(\"Complete Multiple Again\", \"<Control-m>\", lambda e=None: ui.complete(-1))\n\t        self.menu.add_separator()\n\t        # item(\"Mark assistant message\", \"<Control-Alt-a>\", mark_assistant_message)\n\t        item(\"Cancel\", \"<Escape>\", ui.cancel_models)\n\t        self.menu = Menu(self, \"Query\")\n", "        item(\"Max Tokens...\", \"<Control-Shift-L>\", ui.configure_max_tokens)\n\t        item(\"Temperature...\", \"<Control-Shift-T>\", ui.configure_temperature)\n\t        item(\"Increase Temperature\", \"<Alt-plus>\", None)\n\t        item(\"Decrease Temperature\", \"<Alt-minus>\", None)\n\t        item(\"Temperature 0.0\", \"<Control-Key-0>\", None)\n\t        self.models_menu = ModelsMenu(self, ui, \"Models\")\n\t        self.windows_menu = WindowsMenu(self, \"Windows\")\n\t        self.menu = Menu(self, \"Help\")\n\t        item(\"Test\", \"<Control-Alt-Shift-T>\", menu_test)\n\t        item(\"Debug Info\", \"<Control-i>\", debug_info)\n", "        item(\"About\", \"<Shift-Alt-F1>\", lambda e=None: AboutDialog(self.ui))\n\t        ui.bind_class(\"Text\", \"<Control-Button-4>\", lambda e=None: font_size(1))\n\t        ui.bind_class(\"Text\", \"<Control-Button-5>\", lambda e=None: font_size(-1))\n\t        ui.bind_class(\"Text\", \"<Button-3>\", lambda e=None: show_context_menu(e, edit_menu))\n\t    def sub_item(self, label, keystroke=None, command=None, variable=None, add=False):\n\t        self.menu.item(label, keystroke, command, variable, add)\n\t'''\n\t\"New Window\", 4,\n\t\"New Main Tab\", 4,\n\t\"Save Chat\", 5,\n", "\"Save Message\", 5,\n\t\"Save Selection\", 5,\n\t\"Save Code Block\", 5,\n\t\"Run Code Block\", 4,\n\t\"Close Tab\", 6,\n\t\"Close Empty Tab\", 6,\n\t\"Quit\", 0,\n\t\"Cut\", 1,\n\t\"Copy\", 1,\n\t\"Paste\", 0,\n", "\"Delete\", 0,\n\t\"Undo\", 1,\n\t\"Redo\", 0,\n\t\"Select All\", 7,\n\t\"Search with Google\", 7,\n\t\"Insert Current Time\", 7,\n\t\"Include Date in System Prompt\", 8,\n\t\"Copy Title\", 5,\n\t\"Show Main Menu\", 5,\n\t\"Show System Prompt\", 5,\n", "\"Show Tree\", 5,\n\t\"Show Console\", 5,\n\t\"Show Status Bar\", 5,\n\t\"Count Tokens\", 6,\n\t\"Update Window Title\", 7,\n\t\"Increase Font Size\", 9,\n\t\"Decrease Font Size\", 9,\n\t\"Reset Font Size\", 6,\n\t\"Toggle Monospace\", 7,\n\t\"Toggle Scrolling Output\", 7,\n", "\"Ring Bell When Finished\", 10,\n\t\"Toggle Wrap Lines\", 7,\n\t\"Generate Titles\", 9,\n\t\"Calculate Cost\", 9,\n\t\"Next Similar Line\", 5,\n\t\"Previous Similar Line\", 9,\n\t\"Next Message\", 5,\n\t\"Previous Message\", 9,\n\t\"Next Paragraph\", 5,\n\t\"Next Line\", 5,\n", "\"Continue Directly\", 9,\n\t\"Fork Conversation\", 5,\n\t\"Complete in Branch\", 9,\n\t\"Complete Alternatives\", 9,\n\t\"Complete 3 Times\", 9,\n\t\"Complete Multiple...\", 9,\n\t\"Complete Multiple Again\", 9,\n\t\"Cancel\", 0,\n\t\"Max Tokens...\", 4,\n\t\"Temperature...\", 0,\n", "\"Increase Temperature\", 9,\n\t\"Decrease Temperature\", 9,\n\t\"Temperature 0.0\", 11,\n\t\"Test\", 0,\n\t\"Debug Info\", 6,\n\t\"About\", 0.\n\t'''\n"]}
