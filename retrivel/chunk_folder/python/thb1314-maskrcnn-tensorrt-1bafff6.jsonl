{"filename": "patch/mmdet/models/dense_heads/base_dense_head.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\tfrom abc import ABCMeta, abstractmethod\n\timport torch\n\tfrom mmcv.cnn.utils.weight_init import constant_init\n\tfrom mmcv.ops import batched_nms\n\tfrom mmcv.runner import BaseModule, force_fp32\n\tfrom mmdet.core.utils import filter_scores_and_topk, select_single_mlvl\n\tfrom functools import reduce\n\tclass BaseDenseHead(BaseModule, metaclass=ABCMeta):\n\t    \"\"\"Base class for DenseHeads.\"\"\"\n", "    def __init__(self, init_cfg=None):\n\t        super(BaseDenseHead, self).__init__(init_cfg)\n\t    def init_weights(self):\n\t        super(BaseDenseHead, self).init_weights()\n\t        # avoid init_cfg overwrite the initialization of `conv_offset`\n\t        for m in self.modules():\n\t            # DeformConv2dPack, ModulatedDeformConv2dPack\n\t            if hasattr(m, 'conv_offset'):\n\t                constant_init(m.conv_offset, 0)\n\t    @abstractmethod\n", "    def loss(self, **kwargs):\n\t        \"\"\"Compute losses of the head.\"\"\"\n\t        pass\n\t    @force_fp32(apply_to=('cls_scores', 'bbox_preds'))\n\t    def get_bboxes(self,\n\t                   cls_scores,\n\t                   bbox_preds,\n\t                   score_factors=None,\n\t                   img_metas=None,\n\t                   cfg=None,\n", "                   rescale=False,\n\t                   with_nms=True,\n\t                   **kwargs):\n\t        \"\"\"Transform network outputs of a batch into bbox results.\n\t        Note: When score_factors is not None, the cls_scores are\n\t        usually multiplied by it then obtain the real score used in NMS,\n\t        such as CenterNess in FCOS, IoU branch in ATSS.\n\t        Args:\n\t            cls_scores (list[Tensor]): Classification scores for all\n\t                scale levels, each is a 4D-tensor, has shape\n", "                (batch_size, num_priors * num_classes, H, W).\n\t            bbox_preds (list[Tensor]): Box energies / deltas for all\n\t                scale levels, each is a 4D-tensor, has shape\n\t                (batch_size, num_priors * 4, H, W).\n\t            score_factors (list[Tensor], Optional): Score factor for\n\t                all scale level, each is a 4D-tensor, has shape\n\t                (batch_size, num_priors * 1, H, W). Default None.\n\t            img_metas (list[dict], Optional): Image meta info. Default None.\n\t            cfg (mmcv.Config, Optional): Test / postprocessing configuration,\n\t                if None, test_cfg would be used.  Default None.\n", "            rescale (bool): If True, return boxes in original image space.\n\t                Default False.\n\t            with_nms (bool): If True, do nms before return boxes.\n\t                Default True.\n\t        Returns:\n\t            list[list[Tensor, Tensor]]: Each item in result_list is 2-tuple.\n\t                The first item is an (n, 5) tensor, where the first 4 columns\n\t                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n\t                5-th column is a score between 0 and 1. The second item is a\n\t                (n,) tensor where each item is the predicted class label of\n", "                the corresponding box.\n\t        \"\"\"\n\t        assert len(cls_scores) == len(bbox_preds)\n\t        if score_factors is None:\n\t            # e.g. Retina, FreeAnchor, Foveabox, etc.\n\t            with_score_factors = False\n\t        else:\n\t            # e.g. FCOS, PAA, ATSS, AutoAssign, etc.\n\t            with_score_factors = True\n\t            assert len(cls_scores) == len(score_factors)\n", "        num_levels = len(cls_scores)\n\t        featmap_sizes = [cls_scores[i].shape[-2:] for i in range(num_levels)]\n\t        mlvl_priors = self.prior_generator.grid_priors(\n\t            featmap_sizes,\n\t            dtype=cls_scores[0].dtype,\n\t            device=cls_scores[0].device)\n\t        result_list = []\n\t        for img_id in range(len(img_metas)):\n\t            img_meta = img_metas[img_id]\n\t            cls_score_list = select_single_mlvl(cls_scores, img_id)\n", "            bbox_pred_list = select_single_mlvl(bbox_preds, img_id)\n\t            if with_score_factors:\n\t                score_factor_list = select_single_mlvl(score_factors, img_id)\n\t            else:\n\t                score_factor_list = [None for _ in range(num_levels)]\n\t            results = self._get_bboxes_single(cls_score_list, bbox_pred_list,\n\t                                              score_factor_list, mlvl_priors,\n\t                                              img_meta, cfg, rescale, with_nms,\n\t                                              **kwargs)\n\t            result_list.append(results)\n", "        return result_list\n\t    def _get_bboxes_single(self,\n\t                           cls_score_list,\n\t                           bbox_pred_list,\n\t                           score_factor_list,\n\t                           mlvl_priors,\n\t                           img_meta,\n\t                           cfg,\n\t                           rescale=False,\n\t                           with_nms=True,\n", "                           **kwargs):\n\t        \"\"\"Transform outputs of a single image into bbox predictions.\n\t        Args:\n\t            cls_score_list (list[Tensor]): Box scores from all scale\n\t                levels of a single image, each item has shape\n\t                (num_priors * num_classes, H, W).\n\t            bbox_pred_list (list[Tensor]): Box energies / deltas from\n\t                all scale levels of a single image, each item has shape\n\t                (num_priors * 4, H, W).\n\t            score_factor_list (list[Tensor]): Score factor from all scale\n", "                levels of a single image, each item has shape\n\t                (num_priors * 1, H, W).\n\t            mlvl_priors (list[Tensor]): Each element in the list is\n\t                the priors of a single level in feature pyramid. In all\n\t                anchor-based methods, it has shape (num_priors, 4). In\n\t                all anchor-free methods, it has shape (num_priors, 2)\n\t                when `with_stride=True`, otherwise it still has shape\n\t                (num_priors, 4).\n\t            img_meta (dict): Image meta info.\n\t            cfg (mmcv.Config): Test / postprocessing configuration,\n", "                if None, test_cfg would be used.\n\t            rescale (bool): If True, return boxes in original image space.\n\t                Default: False.\n\t            with_nms (bool): If True, do nms before return boxes.\n\t                Default: True.\n\t        Returns:\n\t            tuple[Tensor]: Results of detected bboxes and labels. If with_nms\n\t                is False and mlvl_score_factor is None, return mlvl_bboxes and\n\t                mlvl_scores, else return mlvl_bboxes, mlvl_scores and\n\t                mlvl_score_factor. Usually with_nms is False is used for aug\n", "                test. If with_nms is True, then return the following format\n\t                - det_bboxes (Tensor): Predicted bboxes with shape \\\n\t                    [num_bboxes, 5], where the first 4 columns are bounding \\\n\t                    box positions (tl_x, tl_y, br_x, br_y) and the 5-th \\\n\t                    column are scores between 0 and 1.\n\t                - det_labels (Tensor): Predicted labels of the corresponding \\\n\t                    box with shape [num_bboxes].\n\t        \"\"\"\n\t        if score_factor_list[0] is None:\n\t            # e.g. Retina, FreeAnchor, etc.\n", "            with_score_factors = False\n\t        else:\n\t            # e.g. FCOS, PAA, ATSS, etc.\n\t            with_score_factors = True\n\t        cfg = self.test_cfg if cfg is None else cfg\n\t        img_shape = img_meta['img_shape']\n\t        nms_pre = cfg.get('nms_pre', -1)\n\t        mlvl_bboxes = []\n\t        mlvl_scores = []\n\t        mlvl_labels = []\n", "        if with_score_factors:\n\t            mlvl_score_factors = []\n\t        else:\n\t            mlvl_score_factors = None\n\t        for level_idx, (cls_score, bbox_pred, score_factor, priors) in \\\n\t                enumerate(zip(cls_score_list, bbox_pred_list,\n\t                              score_factor_list, mlvl_priors)):\n\t            assert cls_score.size()[-2:] == bbox_pred.size()[-2:]\n\t            bbox_pred = bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n\t            if with_score_factors:\n", "                score_factor = score_factor.permute(1, 2,\n\t                                                    0).reshape(-1).sigmoid()\n\t            cls_score = cls_score.permute(1, 2,\n\t                                          0).reshape(-1, self.cls_out_channels)\n\t            if self.use_sigmoid_cls:\n\t                scores = cls_score.sigmoid()\n\t            else:\n\t                # remind that we set FG labels to [0, num_class-1]\n\t                # since mmdet v2.0\n\t                # BG cat_id: num_class\n", "                scores = cls_score.softmax(-1)[:, :-1]\n\t            # After https://github.com/open-mmlab/mmdetection/pull/6268/,\n\t            # this operation keeps fewer bboxes under the same `nms_pre`.\n\t            # There is no difference in performance for most models. If you\n\t            # find a slight drop in performance, you can set a larger\n\t            # `nms_pre` than before.\n\t            results = filter_scores_and_topk(\n\t                scores, cfg.score_thr, nms_pre,\n\t                dict(bbox_pred=bbox_pred, priors=priors))\n\t            scores, labels, keep_idxs, filtered_results = results\n", "            bbox_pred = filtered_results['bbox_pred']\n\t            priors = filtered_results['priors']\n\t            if with_score_factors:\n\t                score_factor = score_factor[keep_idxs]\n\t            bboxes = self.bbox_coder.decode(\n\t                priors, bbox_pred, max_shape=img_shape)\n\t            mlvl_bboxes.append(bboxes)\n\t            mlvl_scores.append(scores)\n\t            mlvl_labels.append(labels)\n\t            if with_score_factors:\n", "                mlvl_score_factors.append(score_factor)\n\t        return self._bbox_post_process(mlvl_scores, mlvl_labels, mlvl_bboxes,\n\t                                       img_meta['scale_factor'], cfg, rescale,\n\t                                       with_nms, mlvl_score_factors, **kwargs)\n\t    def _bbox_post_process(self,\n\t                           mlvl_scores,\n\t                           mlvl_labels,\n\t                           mlvl_bboxes,\n\t                           scale_factor,\n\t                           cfg,\n", "                           rescale=False,\n\t                           with_nms=True,\n\t                           mlvl_score_factors=None,\n\t                           **kwargs):\n\t        \"\"\"bbox post-processing method.\n\t        The boxes would be rescaled to the original image scale and do\n\t        the nms operation. Usually `with_nms` is False is used for aug test.\n\t        Args:\n\t            mlvl_scores (list[Tensor]): Box scores from all scale\n\t                levels of a single image, each item has shape\n", "                (num_bboxes, ).\n\t            mlvl_labels (list[Tensor]): Box class labels from all scale\n\t                levels of a single image, each item has shape\n\t                (num_bboxes, ).\n\t            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\n\t                levels of a single image, each item has shape (num_bboxes, 4).\n\t            scale_factor (ndarray, optional): Scale factor of the image arange\n\t                as (w_scale, h_scale, w_scale, h_scale).\n\t            cfg (mmcv.Config): Test / postprocessing configuration,\n\t                if None, test_cfg would be used.\n", "            rescale (bool): If True, return boxes in original image space.\n\t                Default: False.\n\t            with_nms (bool): If True, do nms before return boxes.\n\t                Default: True.\n\t            mlvl_score_factors (list[Tensor], optional): Score factor from\n\t                all scale levels of a single image, each item has shape\n\t                (num_bboxes, ). Default: None.\n\t        Returns:\n\t            tuple[Tensor]: Results of detected bboxes and labels. If with_nms\n\t                is False and mlvl_score_factor is None, return mlvl_bboxes and\n", "                mlvl_scores, else return mlvl_bboxes, mlvl_scores and\n\t                mlvl_score_factor. Usually with_nms is False is used for aug\n\t                test. If with_nms is True, then return the following format\n\t                - det_bboxes (Tensor): Predicted bboxes with shape \\\n\t                    [num_bboxes, 5], where the first 4 columns are bounding \\\n\t                    box positions (tl_x, tl_y, br_x, br_y) and the 5-th \\\n\t                    column are scores between 0 and 1.\n\t                - det_labels (Tensor): Predicted labels of the corresponding \\\n\t                    box with shape [num_bboxes].\n\t        \"\"\"\n", "        assert len(mlvl_scores) == len(mlvl_bboxes) == len(mlvl_labels)\n\t        mlvl_bboxes = torch.cat(mlvl_bboxes)\n\t        if rescale:\n\t            mlvl_bboxes /= mlvl_bboxes.new_tensor(scale_factor)\n\t        mlvl_scores = torch.cat(mlvl_scores)\n\t        mlvl_labels = torch.cat(mlvl_labels)\n\t        if mlvl_score_factors is not None:\n\t            # TODO： Add sqrt operation in order to be consistent with\n\t            #  the paper.\n\t            mlvl_score_factors = torch.cat(mlvl_score_factors)\n", "            mlvl_scores = mlvl_scores * mlvl_score_factors\n\t        if with_nms:\n\t            if mlvl_bboxes.numel() == 0:\n\t                det_bboxes = torch.cat([mlvl_bboxes, mlvl_scores[:, None]], -1)\n\t                return det_bboxes, mlvl_labels\n\t            det_bboxes, keep_idxs = batched_nms(mlvl_bboxes, mlvl_scores,\n\t                                                mlvl_labels, cfg.nms)\n\t            det_bboxes = det_bboxes[:cfg.max_per_img]\n\t            det_labels = mlvl_labels[keep_idxs][:cfg.max_per_img]\n\t            return det_bboxes, det_labels\n", "        else:\n\t            return mlvl_bboxes, mlvl_scores, mlvl_labels\n\t    def forward_train(self,\n\t                      x,\n\t                      img_metas,\n\t                      gt_bboxes,\n\t                      gt_labels=None,\n\t                      gt_bboxes_ignore=None,\n\t                      proposal_cfg=None,\n\t                      **kwargs):\n", "        \"\"\"\n\t        Args:\n\t            x (list[Tensor]): Features from FPN.\n\t            img_metas (list[dict]): Meta information of each image, e.g.,\n\t                image size, scaling factor, etc.\n\t            gt_bboxes (Tensor): Ground truth bboxes of the image,\n\t                shape (num_gts, 4).\n\t            gt_labels (Tensor): Ground truth labels of each box,\n\t                shape (num_gts,).\n\t            gt_bboxes_ignore (Tensor): Ground truth bboxes to be\n", "                ignored, shape (num_ignored_gts, 4).\n\t            proposal_cfg (mmcv.Config): Test / postprocessing configuration,\n\t                if None, test_cfg would be used\n\t        Returns:\n\t            tuple:\n\t                losses: (dict[str, Tensor]): A dictionary of loss components.\n\t                proposal_list (list[Tensor]): Proposals of each image.\n\t        \"\"\"\n\t        outs = self(x)\n\t        if gt_labels is None:\n", "            loss_inputs = outs + (gt_bboxes, img_metas)\n\t        else:\n\t            loss_inputs = outs + (gt_bboxes, gt_labels, img_metas)\n\t        losses = self.loss(*loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n\t        if proposal_cfg is None:\n\t            return losses\n\t        else:\n\t            proposal_list = self.get_bboxes(\n\t                *outs, img_metas=img_metas, cfg=proposal_cfg)\n\t            return losses, proposal_list\n", "    def simple_test(self, feats, img_metas, rescale=False):\n\t        \"\"\"Test function without test-time augmentation.\n\t        Args:\n\t            feats (tuple[torch.Tensor]): Multi-level features from the\n\t                upstream network, each is a 4D-tensor.\n\t            img_metas (list[dict]): List of image information.\n\t            rescale (bool, optional): Whether to rescale the results.\n\t                Defaults to False.\n\t        Returns:\n\t            list[tuple[Tensor, Tensor]]: Each item in result_list is 2-tuple.\n", "                The first item is ``bboxes`` with shape (n, 5),\n\t                where 5 represent (tl_x, tl_y, br_x, br_y, score).\n\t                The shape of the second tensor in the tuple is ``labels``\n\t                with shape (n, ).\n\t        \"\"\"\n\t        return self.simple_test_bboxes(feats, img_metas, rescale=rescale)\n\t    @force_fp32(apply_to=('cls_scores', 'bbox_preds'))\n\t    def onnx_export(self,\n\t                    cls_scores,\n\t                    bbox_preds,\n", "                    score_factors=None,\n\t                    img_metas=None,\n\t                    with_nms=True):\n\t        \"\"\"Transform network output for a batch into bbox predictions.\n\t        Args:\n\t            cls_scores (list[Tensor]): Box scores for each scale level\n\t                with shape (N, num_points * num_classes, H, W).\n\t            bbox_preds (list[Tensor]): Box energies / deltas for each scale\n\t                level with shape (N, num_points * 4, H, W).\n\t            score_factors (list[Tensor]): score_factors for each s\n", "                cale level with shape (N, num_points * 1, H, W).\n\t                Default: None.\n\t            img_metas (list[dict]): Meta information of each image, e.g.,\n\t                image size, scaling factor, etc. Default: None.\n\t            with_nms (bool): Whether apply nms to the bboxes. Default: True.\n\t        Returns:\n\t            tuple[Tensor, Tensor] | list[tuple]: When `with_nms` is True,\n\t            it is tuple[Tensor, Tensor], first tensor bboxes with shape\n\t            [N, num_det, 5], 5 arrange as (x1, y1, x2, y2, score)\n\t            and second element is class labels of shape [N, num_det].\n", "            When `with_nms` is False, first tensor is bboxes with\n\t            shape [N, num_det, 4], second tensor is raw score has\n\t            shape  [N, num_det, num_classes].\n\t        \"\"\"\n\t        assert len(cls_scores) == len(bbox_preds)\n\t        num_levels = len(cls_scores)\n\t        featmap_sizes = [featmap.size()[-2:] for featmap in cls_scores]\n\t        mlvl_priors = self.prior_generator.grid_priors(\n\t            featmap_sizes,\n\t            dtype=bbox_preds[0].dtype,\n", "            device=bbox_preds[0].device)\n\t        mlvl_cls_scores = [cls_scores[i].detach() for i in range(num_levels)]\n\t        mlvl_bbox_preds = [bbox_preds[i].detach() for i in range(num_levels)]\n\t        assert len(\n\t            img_metas\n\t        ) == 1, 'Only support one input image while in exporting to ONNX'\n\t        img_shape = img_metas[0]['img_shape_for_onnx']\n\t        cfg = self.test_cfg\n\t        assert len(cls_scores) == len(bbox_preds) == len(mlvl_priors)\n\t        device = cls_scores[0].device\n", "        batch_size = cls_scores[0].shape[0]\n\t        # convert to tensor to keep tracing\n\t        nms_pre_tensor = torch.tensor(\n\t            cfg.get('nms_pre', -1), device=device, dtype=torch.long)\n\t        # e.g. Retina, FreeAnchor, etc.\n\t        if score_factors is None:\n\t            with_score_factors = False\n\t            mlvl_score_factor = [None for _ in range(num_levels)]\n\t        else:\n\t            # e.g. FCOS, PAA, ATSS, etc.\n", "            with_score_factors = True\n\t            mlvl_score_factor = [\n\t                score_factors[i].detach() for i in range(num_levels)\n\t            ]\n\t            mlvl_score_factors = []\n\t        mlvl_batch_bboxes = []\n\t        mlvl_scores = []\n\t        for cls_score, bbox_pred, score_factors, priors in zip(\n\t                mlvl_cls_scores, mlvl_bbox_preds, mlvl_score_factor,\n\t                mlvl_priors):\n", "            assert cls_score.size()[-2:] == bbox_pred.size()[-2:]\n\t            scores = cls_score.permute(0, 2, 3,1)\n\t            scores_last_shapes = list(map(int, scores.shape[1:]))\n\t            scores_last_dims = reduce(lambda x, y: x * y, scores_last_shapes, 1)\n\t            scores = scores.reshape(-1, scores_last_dims // self.cls_out_channels, self.cls_out_channels)\n\t            if self.use_sigmoid_cls:\n\t                scores = scores.sigmoid()\n\t                nms_pre_score = scores\n\t            else:\n\t                scores = scores.softmax(-1)\n", "                nms_pre_score = scores\n\t            if with_score_factors:\n\t                score_factors = score_factors.permute(0, 2, 3, 1)\n\t                score_factors_last_shapes = list(map(int, score_factors.shape[1:]))\n\t                score_factors_last_dims = reduce(lambda x, y: x * y, score_factors_last_shapes, 1)\n\t                score_factors = score_factors.reshape(-1, score_factors_last_dims).sigmoid()\n\t            bbox_pred = bbox_pred.permute(0, 2, 3,1)\n\t            bbox_pred_last_shapes = list(map(int, bbox_pred.shape[1:]))\n\t            bbox_pred_last_dims = reduce(lambda x, y: x * y, bbox_pred_last_shapes, 1)\n\t            bbox_pred = bbox_pred.reshape(-1, bbox_pred_last_dims // 4, 4)\n", "            priors = priors.unsqueeze(0).expand(batch_size, -1, -1)\n\t            # Get top-k predictions\n\t            from mmdet.core.export import get_k_for_topk\n\t            nms_pre = get_k_for_topk(nms_pre_tensor, int(bbox_pred.shape[1]))\n\t            if nms_pre > 0 and nms_pre != int(bbox_pred.shape[1]):\n\t                if with_score_factors:\n\t                    nms_pre_score = (nms_pre_score * score_factors[..., None])\n\t                else:\n\t                    nms_pre_score = nms_pre_score\n\t                # Get maximum scores for foreground classes.\n", "                if self.use_sigmoid_cls:\n\t                    max_scores, _ = nms_pre_score.max(-1)\n\t                else:\n\t                    # remind that we set FG labels to [0, num_class-1]\n\t                    # since mmdet v2.0\n\t                    # BG cat_id: num_class\n\t                    max_scores, _ = nms_pre_score[..., :-1].max(-1)\n\t                _, topk_inds = max_scores.topk(nms_pre)\n\t                batch_inds = torch.arange(\n\t                    batch_size, device=bbox_pred.device).view(\n", "                        -1, 1).expand_as(topk_inds).long()\n\t                # Avoid onnx2tensorrt issue in https://github.com/NVIDIA/TensorRT/issues/1134 # noqa: E501\n\t                transformed_inds = int(bbox_pred.shape[1]) * batch_inds + topk_inds\n\t                priors = priors.reshape(-1, int(priors.size(-1)))[transformed_inds, :]\n\t                priors_last_shapes = list(map(int, priors.shape[1:]))\n\t                priors_last_dims = reduce(lambda x, y: x * y, priors_last_shapes, 1)\n\t                priors = priors.reshape(-1, priors_last_dims // int(priors.size(-1)), int(priors.size(-1)))\n\t                bbox_pred = bbox_pred.reshape(-1, 4)[transformed_inds, :]\n\t                bbox_pred_last_shapes = list(map(int, bbox_pred.shape[1:]))\n\t                bbox_pred_last_dims = reduce(lambda x, y: x * y, bbox_pred_last_shapes, 1)\n", "                bbox_pred = bbox_pred.reshape(-1, bbox_pred_last_dims // 4, 4)\n\t                scores = scores.reshape(-1, self.cls_out_channels)[transformed_inds, :]\n\t                scores_last_shapes = list(map(int, scores.shape[1:]))\n\t                scores_last_dims = reduce(lambda x, y: x * y, scores_last_shapes, 1)\n\t                scores = scores.reshape(-1, scores_last_dims // self.cls_out_channels, self.cls_out_channels)\n\t                if with_score_factors:\n\t                    score_factors = score_factors.reshape(-1, 1)[transformed_inds]\n\t                    score_factors_shapes = list(map(int, score_factors.shape[1:]))\n\t                    scores_last_dims = reduce(lambda x, y: x * y, score_factors_shapes, 1)\n\t                    score_factors = score_factors.reshape(-1, scores_last_dims)\n", "            bboxes = self.bbox_coder.decode(priors, bbox_pred, max_shape=img_shape)\n\t            mlvl_batch_bboxes.append(bboxes)\n\t            mlvl_scores.append(scores)\n\t            if with_score_factors:\n\t                mlvl_score_factors.append(score_factors)\n\t        batch_bboxes = torch.cat(mlvl_batch_bboxes, dim=1)\n\t        batch_scores = torch.cat(mlvl_scores, dim=1)\n\t        if with_score_factors:\n\t            batch_score_factors = torch.cat(mlvl_score_factors, dim=1)\n\t        # Replace multiclass_nms with ONNX::NonMaxSuppression in deployment\n", "        from mmdet.core.export import add_dummy_nms_for_onnx\n\t        if not self.use_sigmoid_cls:\n\t            batch_scores = batch_scores[..., :self.num_classes]\n\t        if with_score_factors:\n\t            batch_scores = batch_scores * (batch_score_factors.unsqueeze(2))\n\t        if with_nms:\n\t            max_output_boxes_per_class = cfg.nms.get(\n\t                'max_output_boxes_per_class', 200)\n\t            iou_threshold = cfg.nms.get('iou_threshold', 0.5)\n\t            score_threshold = cfg.score_thr\n", "            nms_pre = cfg.get('deploy_nms_pre', -1)\n\t            return add_dummy_nms_for_onnx(batch_bboxes, batch_scores,\n\t                                          max_output_boxes_per_class,\n\t                                          iou_threshold, score_threshold,\n\t                                          nms_pre, cfg.max_per_img)\n\t        else:\n\t            return batch_bboxes, batch_scores\n"]}
{"filename": "patch/mmdet/models/dense_heads/rpn_head.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport copy\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom mmcv.cnn import ConvModule\n\tfrom mmcv.ops import batched_nms\n\tfrom ..builder import HEADS\n\tfrom .anchor_head import AnchorHead\n\t@HEADS.register_module()\n", "class RPNHead(AnchorHead):\n\t    \"\"\"RPN head.\n\t    Args:\n\t        in_channels (int): Number of channels in the input feature map.\n\t        init_cfg (dict or list[dict], optional): Initialization config dict.\n\t        num_convs (int): Number of convolution layers in the head. Default 1.\n\t    \"\"\"  # noqa: W605\n\t    def __init__(self,\n\t                 in_channels,\n\t                 init_cfg=dict(type='Normal', layer='Conv2d', std=0.01),\n", "                 num_convs=1,\n\t                 **kwargs):\n\t        self.num_convs = num_convs\n\t        super(RPNHead, self).__init__(\n\t            1, in_channels, init_cfg=init_cfg, **kwargs)\n\t    def _init_layers(self):\n\t        \"\"\"Initialize layers of the head.\"\"\"\n\t        if self.num_convs > 1:\n\t            rpn_convs = []\n\t            for i in range(self.num_convs):\n", "                if i == 0:\n\t                    in_channels = self.in_channels\n\t                else:\n\t                    in_channels = self.feat_channels\n\t                # use ``inplace=False`` to avoid error: one of the variables\n\t                # needed for gradient computation has been modified by an\n\t                # inplace operation.\n\t                rpn_convs.append(\n\t                    ConvModule(\n\t                        in_channels,\n", "                        self.feat_channels,\n\t                        3,\n\t                        padding=1,\n\t                        inplace=False))\n\t            self.rpn_conv = nn.Sequential(*rpn_convs)\n\t        else:\n\t            self.rpn_conv = nn.Conv2d(\n\t                self.in_channels, self.feat_channels, 3, padding=1)\n\t        self.rpn_cls = nn.Conv2d(self.feat_channels,\n\t                                 self.num_base_priors * self.cls_out_channels,\n", "                                 1)\n\t        self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4,\n\t                                 1)\n\t    def forward_single(self, x):\n\t        \"\"\"Forward feature map of a single scale level.\"\"\"\n\t        x = self.rpn_conv(x)\n\t        x = F.relu(x, inplace=False)\n\t        rpn_cls_score = self.rpn_cls(x)\n\t        rpn_bbox_pred = self.rpn_reg(x)\n\t        return rpn_cls_score, rpn_bbox_pred\n", "    def loss(self,\n\t             cls_scores,\n\t             bbox_preds,\n\t             gt_bboxes,\n\t             img_metas,\n\t             gt_bboxes_ignore=None):\n\t        \"\"\"Compute losses of the head.\n\t        Args:\n\t            cls_scores (list[Tensor]): Box scores for each scale level\n\t                Has shape (N, num_anchors * num_classes, H, W)\n", "            bbox_preds (list[Tensor]): Box energies / deltas for each scale\n\t                level with shape (N, num_anchors * 4, H, W)\n\t            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\n\t                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n\t            img_metas (list[dict]): Meta information of each image, e.g.,\n\t                image size, scaling factor, etc.\n\t            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n\t                boxes can be ignored when computing the loss.\n\t        Returns:\n\t            dict[str, Tensor]: A dictionary of loss components.\n", "        \"\"\"\n\t        losses = super(RPNHead, self).loss(\n\t            cls_scores,\n\t            bbox_preds,\n\t            gt_bboxes,\n\t            None,\n\t            img_metas,\n\t            gt_bboxes_ignore=gt_bboxes_ignore)\n\t        return dict(\n\t            loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])\n", "    def _get_bboxes_single(self,\n\t                           cls_score_list,\n\t                           bbox_pred_list,\n\t                           score_factor_list,\n\t                           mlvl_anchors,\n\t                           img_meta,\n\t                           cfg,\n\t                           rescale=False,\n\t                           with_nms=True,\n\t                           **kwargs):\n", "        \"\"\"Transform outputs of a single image into bbox predictions.\n\t        Args:\n\t            cls_score_list (list[Tensor]): Box scores from all scale\n\t                levels of a single image, each item has shape\n\t                (num_anchors * num_classes, H, W).\n\t            bbox_pred_list (list[Tensor]): Box energies / deltas from\n\t                all scale levels of a single image, each item has\n\t                shape (num_anchors * 4, H, W).\n\t            score_factor_list (list[Tensor]): Score factor from all scale\n\t                levels of a single image. RPN head does not need this value.\n", "            mlvl_anchors (list[Tensor]): Anchors of all scale level\n\t                each item has shape (num_anchors, 4).\n\t            img_meta (dict): Image meta info.\n\t            cfg (mmcv.Config): Test / postprocessing configuration,\n\t                if None, test_cfg would be used.\n\t            rescale (bool): If True, return boxes in original image space.\n\t                Default: False.\n\t            with_nms (bool): If True, do nms before return boxes.\n\t                Default: True.\n\t        Returns:\n", "            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\n\t                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n\t                5-th column is a score between 0 and 1.\n\t        \"\"\"\n\t        cfg = self.test_cfg if cfg is None else cfg\n\t        cfg = copy.deepcopy(cfg)\n\t        img_shape = img_meta['img_shape']\n\t        # bboxes from different level should be independent during NMS,\n\t        # level_ids are used as labels for batched NMS to separate them\n\t        level_ids = []\n", "        mlvl_scores = []\n\t        mlvl_bbox_preds = []\n\t        mlvl_valid_anchors = []\n\t        nms_pre = cfg.get('nms_pre', -1)\n\t        for level_idx in range(len(cls_score_list)):\n\t            rpn_cls_score = cls_score_list[level_idx]\n\t            rpn_bbox_pred = bbox_pred_list[level_idx]\n\t            assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n\t            rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n\t            if self.use_sigmoid_cls:\n", "                rpn_cls_score = rpn_cls_score.reshape(-1)\n\t                scores = rpn_cls_score.sigmoid()\n\t            else:\n\t                rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n\t                # We set FG labels to [0, num_class-1] and BG label to\n\t                # num_class in RPN head since mmdet v2.5, which is unified to\n\t                # be consistent with other head since mmdet v2.0. In mmdet v2.0\n\t                # to v2.4 we keep BG label as 0 and FG label as 1 in rpn head.\n\t                scores = rpn_cls_score.softmax(dim=1)[:, 0]\n\t            rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n", "            anchors = mlvl_anchors[level_idx]\n\t            if 0 < nms_pre < scores.shape[0]:\n\t                # sort is faster than topk\n\t                # _, topk_inds = scores.topk(cfg.nms_pre)\n\t                ranked_scores, rank_inds = scores.sort(descending=True)\n\t                topk_inds = rank_inds[:nms_pre]\n\t                scores = ranked_scores[:nms_pre]\n\t                rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n\t                anchors = anchors[topk_inds, :]\n\t            mlvl_scores.append(scores)\n", "            mlvl_bbox_preds.append(rpn_bbox_pred)\n\t            mlvl_valid_anchors.append(anchors)\n\t            level_ids.append(\n\t                scores.new_full((scores.size(0), ),\n\t                                level_idx,\n\t                                dtype=torch.long))\n\t        # torch.save({'batch_bboxes':mlvl_bbox_preds, 'batch_scores':mlvl_scores}, 'batch_info.pkl')\n\t        ret = self._bbox_post_process(mlvl_scores, mlvl_bbox_preds,\n\t                                       mlvl_valid_anchors, level_ids, cfg,\n\t                                       img_shape)\n", "        # torch.save(ret, 'rpn_nms_result.pkl')\n\t        return ret\n\t    def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors,\n\t                           level_ids, cfg, img_shape, **kwargs):\n\t        \"\"\"bbox post-processing method.\n\t        Do the nms operation for bboxes in same level.\n\t        Args:\n\t            mlvl_scores (list[Tensor]): Box scores from all scale\n\t                levels of a single image, each item has shape\n\t                (num_bboxes, ).\n", "            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\n\t                levels of a single image, each item has shape (num_bboxes, 4).\n\t            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\n\t                each item has shape (num_bboxes, 4).\n\t            level_ids (list[Tensor]): Indexes from all scale levels of a\n\t                single image, each item has shape (num_bboxes, ).\n\t            cfg (mmcv.Config): Test / postprocessing configuration,\n\t                if None, `self.test_cfg` would be used.\n\t            img_shape (tuple(int)): The shape of model's input image.\n\t        Returns:\n", "            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\n\t                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n\t                5-th column is a score between 0 and 1.\n\t        \"\"\"\n\t        scores = torch.cat(mlvl_scores)\n\t        anchors = torch.cat(mlvl_valid_anchors)\n\t        rpn_bbox_pred = torch.cat(mlvl_bboxes)\n\t        proposals = self.bbox_coder.decode(\n\t            anchors, rpn_bbox_pred, max_shape=img_shape)\n\t        ids = torch.cat(level_ids)\n", "        # torch.save({'ids':ids, 'proposals': proposals, 'mlvl_scores': mlvl_scores, 'mlvl_valid_anchors': mlvl_valid_anchors}, 'proposals.pkl')\n\t        if cfg.min_bbox_size >= 0:\n\t            w = proposals[:, 2] - proposals[:, 0]\n\t            h = proposals[:, 3] - proposals[:, 1]\n\t            valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n\t            if not valid_mask.all():\n\t                proposals = proposals[valid_mask]\n\t                scores = scores[valid_mask]\n\t                ids = ids[valid_mask]\n\t        if proposals.numel() > 0:\n", "            dets, _ = batched_nms(proposals, scores, ids, cfg.nms)\n\t        else:\n\t            return proposals.new_zeros(0, 5)\n\t        return dets[:cfg.max_per_img]\n\t    def onnx_export(self, x, img_metas):\n\t        \"\"\"Test without augmentation.\n\t        Args:\n\t            x (tuple[Tensor]): Features from the upstream network, each is\n\t                a 4D-tensor.\n\t            img_metas (list[dict]): Meta info of each image.\n", "        Returns:\n\t            Tensor: dets of shape [N, num_det, 5].\n\t        \"\"\"\n\t        cls_scores, bbox_preds = self(x)\n\t        assert len(cls_scores) == len(bbox_preds)\n\t        batch_bboxes, batch_scores = super(RPNHead, self).onnx_export(\n\t            cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n\t        # Use ONNX::NonMaxSuppression in deployment\n\t        from mmdet.core.export import add_dummy_nms_for_onnx\n\t        cfg = copy.deepcopy(self.test_cfg)\n", "        score_threshold = cfg.nms.get('score_thr', 0.0)\n\t        nms_pre = cfg.get('deploy_nms_pre', -1)\n\t        # Different from the normal forward doing NMS level by level,\n\t        # we do NMS across all levels when exporting ONNX.\n\t        num_levels = len(cls_scores)\n\t        from mmdet.core.export import get_k_for_topk\n\t        ids_list = []\n\t        nms_pre_tensor = torch.tensor(cfg.get('nms_pre', -1), device=cls_scores[0].device, dtype=torch.long)\n\t        for i in range(num_levels):\n\t            c, h, w = list(map(int, cls_scores[i].shape[1:4]))\n", "            cur_lvl_length = torch.as_tensor(c * h * w, dtype=torch.long, device=cls_scores[0].device)\n\t            topk = get_k_for_topk(nms_pre_tensor, cur_lvl_length)\n\t            if topk > 0 and topk != int(cur_lvl_length):\n\t                cur_lvl_length = topk\n\t            ids_list.append(torch.full((1, cur_lvl_length, 1), fill_value = i, dtype=torch.long, device=cls_scores[0].device))\n\t        idxs = torch.cat(ids_list, dim=1)\n\t        dets, _ = add_dummy_nms_for_onnx(batch_bboxes, batch_scores,\n\t                                         cfg.max_per_img,\n\t                                         cfg.nms.iou_threshold,\n\t                                         score_threshold, nms_pre,\n", "                                         cfg.max_per_img,\n\t                                         idxs = idxs)\n\t        return dets\n"]}
{"filename": "patch/mmdet/models/roi_heads/test_mixins.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport sys\n\timport warnings\n\timport numpy as np\n\timport torch\n\tfrom mmdet.core import (bbox2roi, bbox_mapping, merge_aug_bboxes,\n\t                        merge_aug_masks, multiclass_nms)\n\tif sys.version_info >= (3, 7):\n\t    from mmdet.utils.contextmanagers import completed\n\tclass BBoxTestMixin:\n", "    if sys.version_info >= (3, 7):\n\t        async def async_test_bboxes(self,\n\t                                    x,\n\t                                    img_metas,\n\t                                    proposals,\n\t                                    rcnn_test_cfg,\n\t                                    rescale=False,\n\t                                    **kwargs):\n\t            \"\"\"Asynchronized test for box head without augmentation.\"\"\"\n\t            rois = bbox2roi(proposals)\n", "            roi_feats = self.bbox_roi_extractor(\n\t                x[:len(self.bbox_roi_extractor.featmap_strides)], rois)\n\t            if self.with_shared_head:\n\t                roi_feats = self.shared_head(roi_feats)\n\t            sleep_interval = rcnn_test_cfg.get('async_sleep_interval', 0.017)\n\t            async with completed(\n\t                    __name__, 'bbox_head_forward',\n\t                    sleep_interval=sleep_interval):\n\t                cls_score, bbox_pred = self.bbox_head(roi_feats)\n\t            img_shape = img_metas[0]['img_shape']\n", "            scale_factor = img_metas[0]['scale_factor']\n\t            det_bboxes, det_labels = self.bbox_head.get_bboxes(\n\t                rois,\n\t                cls_score,\n\t                bbox_pred,\n\t                img_shape,\n\t                scale_factor,\n\t                rescale=rescale,\n\t                cfg=rcnn_test_cfg)\n\t            return det_bboxes, det_labels\n", "    def simple_test_bboxes(self,\n\t                           x,\n\t                           img_metas,\n\t                           proposals,\n\t                           rcnn_test_cfg,\n\t                           rescale=False):\n\t        \"\"\"Test only det bboxes without augmentation.\n\t        Args:\n\t            x (tuple[Tensor]): Feature maps of all scale level.\n\t            img_metas (list[dict]): Image meta info.\n", "            proposals (List[Tensor]): Region proposals.\n\t            rcnn_test_cfg (obj:`ConfigDict`): `test_cfg` of R-CNN.\n\t            rescale (bool): If True, return boxes in original image space.\n\t                Default: False.\n\t        Returns:\n\t            tuple[list[Tensor], list[Tensor]]: The first list contains\n\t                the boxes of the corresponding image in a batch, each\n\t                tensor has the shape (num_boxes, 5) and last dimension\n\t                5 represent (tl_x, tl_y, br_x, br_y, score). Each Tensor\n\t                in the second list is the labels with shape (num_boxes, ).\n", "                The length of both lists should be equal to batch_size.\n\t        \"\"\"\n\t        rois = bbox2roi(proposals)\n\t        if rois.shape[0] == 0:\n\t            batch_size = len(proposals)\n\t            det_bbox = rois.new_zeros(0, 5)\n\t            det_label = rois.new_zeros((0, ), dtype=torch.long)\n\t            if rcnn_test_cfg is None:\n\t                det_bbox = det_bbox[:, :4]\n\t                det_label = rois.new_zeros(\n", "                    (0, self.bbox_head.fc_cls.out_features))\n\t            # There is no proposal in the whole batch\n\t            return [det_bbox] * batch_size, [det_label] * batch_size\n\t        bbox_results = self._bbox_forward(x, rois)\n\t        img_shapes = tuple(meta['img_shape'] for meta in img_metas)\n\t        scale_factors = tuple(meta['scale_factor'] for meta in img_metas)\n\t        # split batch bbox prediction back to each image\n\t        cls_score = bbox_results['cls_score']\n\t        bbox_pred = bbox_results['bbox_pred']\n\t        num_proposals_per_img = tuple(len(p) for p in proposals)\n", "        rois = rois.split(num_proposals_per_img, 0)\n\t        cls_score = cls_score.split(num_proposals_per_img, 0)\n\t        # some detector with_reg is False, bbox_pred will be None\n\t        if bbox_pred is not None:\n\t            # TODO move this to a sabl_roi_head\n\t            # the bbox prediction of some detectors like SABL is not Tensor\n\t            if isinstance(bbox_pred, torch.Tensor):\n\t                bbox_pred = bbox_pred.split(num_proposals_per_img, 0)\n\t            else:\n\t                bbox_pred = self.bbox_head.bbox_pred_split(\n", "                    bbox_pred, num_proposals_per_img)\n\t        else:\n\t            bbox_pred = (None, ) * len(proposals)\n\t        # apply bbox post-processing to each image individually\n\t        det_bboxes = []\n\t        det_labels = []\n\t        for i in range(len(proposals)):\n\t            if rois[i].shape[0] == 0:\n\t                # There is no proposal in the single image\n\t                det_bbox = rois[i].new_zeros(0, 5)\n", "                det_label = rois[i].new_zeros((0, ), dtype=torch.long)\n\t                if rcnn_test_cfg is None:\n\t                    det_bbox = det_bbox[:, :4]\n\t                    det_label = rois[i].new_zeros(\n\t                        (0, self.bbox_head.fc_cls.out_features))\n\t            else:\n\t                det_bbox, det_label = self.bbox_head.get_bboxes(\n\t                    rois[i],\n\t                    cls_score[i],\n\t                    bbox_pred[i],\n", "                    img_shapes[i],\n\t                    scale_factors[i],\n\t                    rescale=rescale,\n\t                    cfg=rcnn_test_cfg)\n\t            det_bboxes.append(det_bbox)\n\t            det_labels.append(det_label)\n\t        return det_bboxes, det_labels\n\t    def aug_test_bboxes(self, feats, img_metas, proposal_list, rcnn_test_cfg):\n\t        \"\"\"Test det bboxes with test time augmentation.\"\"\"\n\t        aug_bboxes = []\n", "        aug_scores = []\n\t        for x, img_meta in zip(feats, img_metas):\n\t            # only one image in the batch\n\t            img_shape = img_meta[0]['img_shape']\n\t            scale_factor = img_meta[0]['scale_factor']\n\t            flip = img_meta[0]['flip']\n\t            flip_direction = img_meta[0]['flip_direction']\n\t            # TODO more flexible\n\t            proposals = bbox_mapping(proposal_list[0][:, :4], img_shape,\n\t                                     scale_factor, flip, flip_direction)\n", "            rois = bbox2roi([proposals])\n\t            bbox_results = self._bbox_forward(x, rois)\n\t            bboxes, scores = self.bbox_head.get_bboxes(\n\t                rois,\n\t                bbox_results['cls_score'],\n\t                bbox_results['bbox_pred'],\n\t                img_shape,\n\t                scale_factor,\n\t                rescale=False,\n\t                cfg=None)\n", "            aug_bboxes.append(bboxes)\n\t            aug_scores.append(scores)\n\t        # after merging, bboxes will be rescaled to the original image size\n\t        merged_bboxes, merged_scores = merge_aug_bboxes(\n\t            aug_bboxes, aug_scores, img_metas, rcnn_test_cfg)\n\t        if merged_bboxes.shape[0] == 0:\n\t            # There is no proposal in the single image\n\t            det_bboxes = merged_bboxes.new_zeros(0, 5)\n\t            det_labels = merged_bboxes.new_zeros((0, ), dtype=torch.long)\n\t        else:\n", "            det_bboxes, det_labels = multiclass_nms(merged_bboxes,\n\t                                                    merged_scores,\n\t                                                    rcnn_test_cfg.score_thr,\n\t                                                    rcnn_test_cfg.nms,\n\t                                                    rcnn_test_cfg.max_per_img)\n\t        return det_bboxes, det_labels\n\tclass MaskTestMixin:\n\t    if sys.version_info >= (3, 7):\n\t        async def async_test_mask(self,\n\t                                  x,\n", "                                  img_metas,\n\t                                  det_bboxes,\n\t                                  det_labels,\n\t                                  rescale=False,\n\t                                  mask_test_cfg=None):\n\t            \"\"\"Asynchronized test for mask head without augmentation.\"\"\"\n\t            # image shape of the first image in the batch (only one)\n\t            ori_shape = img_metas[0]['ori_shape']\n\t            scale_factor = img_metas[0]['scale_factor']\n\t            if det_bboxes.shape[0] == 0:\n", "                segm_result = [[] for _ in range(self.mask_head.num_classes)]\n\t            else:\n\t                if rescale and not isinstance(scale_factor,\n\t                                              (float, torch.Tensor)):\n\t                    scale_factor = det_bboxes.new_tensor(scale_factor)\n\t                _bboxes = (\n\t                    det_bboxes[:, :4] *\n\t                    scale_factor if rescale else det_bboxes)\n\t                mask_rois = bbox2roi([_bboxes])\n\t                mask_feats = self.mask_roi_extractor(\n", "                    x[:len(self.mask_roi_extractor.featmap_strides)],\n\t                    mask_rois)\n\t                if self.with_shared_head:\n\t                    mask_feats = self.shared_head(mask_feats)\n\t                if mask_test_cfg and mask_test_cfg.get('async_sleep_interval'):\n\t                    sleep_interval = mask_test_cfg['async_sleep_interval']\n\t                else:\n\t                    sleep_interval = 0.035\n\t                async with completed(\n\t                        __name__,\n", "                        'mask_head_forward',\n\t                        sleep_interval=sleep_interval):\n\t                    mask_pred = self.mask_head(mask_feats)\n\t                segm_result = self.mask_head.get_seg_masks(\n\t                    mask_pred, _bboxes, det_labels, self.test_cfg, ori_shape,\n\t                    scale_factor, rescale)\n\t            return segm_result\n\t    def simple_test_mask(self,\n\t                         x,\n\t                         img_metas,\n", "                         det_bboxes,\n\t                         det_labels,\n\t                         rescale=False):\n\t        \"\"\"Simple test for mask head without augmentation.\"\"\"\n\t        # image shapes of images in the batch\n\t        ori_shapes = tuple(meta['ori_shape'] for meta in img_metas)\n\t        scale_factors = tuple(meta['scale_factor'] for meta in img_metas)\n\t        if isinstance(scale_factors[0], float):\n\t            warnings.warn(\n\t                'Scale factor in img_metas should be a '\n", "                'ndarray with shape (4,) '\n\t                'arrange as (factor_w, factor_h, factor_w, factor_h), '\n\t                'The scale_factor with float type has been deprecated. ')\n\t            scale_factors = np.array([scale_factors] * 4, dtype=np.float32)\n\t        num_imgs = len(det_bboxes)\n\t        if all(det_bbox.shape[0] == 0 for det_bbox in det_bboxes):\n\t            segm_results = [[[] for _ in range(self.mask_head.num_classes)]\n\t                            for _ in range(num_imgs)]\n\t        else:\n\t            # if det_bboxes is rescaled to the original image size, we need to\n", "            # rescale it back to the testing scale to obtain RoIs.\n\t            if rescale:\n\t                scale_factors = [\n\t                    torch.as_tensor(scale_factor).to(det_bboxes[0].device)\n\t                    for scale_factor in scale_factors\n\t                ]\n\t            _bboxes = [\n\t                det_bboxes[i][:, :4] *\n\t                scale_factors[i] if rescale else det_bboxes[i][:, :4]\n\t                for i in range(len(det_bboxes))\n", "            ]\n\t            mask_rois = bbox2roi(_bboxes)\n\t            mask_results = self._mask_forward(x, mask_rois)\n\t            mask_pred = mask_results['mask_pred']\n\t            # split batch mask prediction back to each image\n\t            num_mask_roi_per_img = [len(det_bbox) for det_bbox in det_bboxes]\n\t            mask_preds = mask_pred.split(num_mask_roi_per_img, 0)\n\t            # apply mask post-processing to each image individually\n\t            segm_results = []\n\t            for i in range(num_imgs):\n", "                if det_bboxes[i].shape[0] == 0:\n\t                    segm_results.append(\n\t                        [[] for _ in range(self.mask_head.num_classes)])\n\t                else:\n\t                    segm_result = self.mask_head.get_seg_masks(\n\t                        mask_preds[i], _bboxes[i], det_labels[i],\n\t                        self.test_cfg, ori_shapes[i], scale_factors[i],\n\t                        rescale)\n\t                    segm_results.append(segm_result)\n\t        return segm_results\n", "    def aug_test_mask(self, feats, img_metas, det_bboxes, det_labels):\n\t        \"\"\"Test for mask head with test time augmentation.\"\"\"\n\t        if det_bboxes.shape[0] == 0:\n\t            segm_result = [[] for _ in range(self.mask_head.num_classes)]\n\t        else:\n\t            aug_masks = []\n\t            for x, img_meta in zip(feats, img_metas):\n\t                img_shape = img_meta[0]['img_shape']\n\t                scale_factor = img_meta[0]['scale_factor']\n\t                flip = img_meta[0]['flip']\n", "                flip_direction = img_meta[0]['flip_direction']\n\t                _bboxes = bbox_mapping(det_bboxes[:, :4], img_shape,\n\t                                       scale_factor, flip, flip_direction)\n\t                mask_rois = bbox2roi([_bboxes])\n\t                mask_results = self._mask_forward(x, mask_rois)\n\t                # convert to numpy array to save memory\n\t                aug_masks.append(\n\t                    mask_results['mask_pred'].sigmoid().cpu().numpy())\n\t            merged_masks = merge_aug_masks(aug_masks, img_metas, self.test_cfg)\n\t            ori_shape = img_metas[0][0]['ori_shape']\n", "            scale_factor = det_bboxes.new_ones(4)\n\t            segm_result = self.mask_head.get_seg_masks(\n\t                merged_masks,\n\t                det_bboxes,\n\t                det_labels,\n\t                self.test_cfg,\n\t                ori_shape,\n\t                scale_factor=scale_factor,\n\t                rescale=False)\n\t        return segm_result\n"]}
{"filename": "patch/mmdet/models/roi_heads/standard_roi_head.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport torch\n\tfrom mmdet.core import bbox2result, bbox2roi, build_assigner, build_sampler\n\tfrom ..builder import HEADS, build_head, build_roi_extractor\n\tfrom .base_roi_head import BaseRoIHead\n\tfrom .test_mixins import BBoxTestMixin, MaskTestMixin\n\t@HEADS.register_module()\n\tclass StandardRoIHead(BaseRoIHead, BBoxTestMixin, MaskTestMixin):\n\t    \"\"\"Simplest base roi head including one bbox head and one mask head.\"\"\"\n\t    def init_assigner_sampler(self):\n", "        \"\"\"Initialize assigner and sampler.\"\"\"\n\t        self.bbox_assigner = None\n\t        self.bbox_sampler = None\n\t        if self.train_cfg:\n\t            self.bbox_assigner = build_assigner(self.train_cfg.assigner)\n\t            self.bbox_sampler = build_sampler(\n\t                self.train_cfg.sampler, context=self)\n\t    def init_bbox_head(self, bbox_roi_extractor, bbox_head):\n\t        \"\"\"Initialize ``bbox_head``\"\"\"\n\t        self.bbox_roi_extractor = build_roi_extractor(bbox_roi_extractor)\n", "        self.bbox_head = build_head(bbox_head)\n\t    def init_mask_head(self, mask_roi_extractor, mask_head):\n\t        \"\"\"Initialize ``mask_head``\"\"\"\n\t        if mask_roi_extractor is not None:\n\t            self.mask_roi_extractor = build_roi_extractor(mask_roi_extractor)\n\t            self.share_roi_extractor = False\n\t        else:\n\t            self.share_roi_extractor = True\n\t            self.mask_roi_extractor = self.bbox_roi_extractor\n\t        self.mask_head = build_head(mask_head)\n", "    def forward_dummy(self, x, proposals):\n\t        \"\"\"Dummy forward function.\"\"\"\n\t        # bbox head\n\t        outs = ()\n\t        rois = bbox2roi([proposals])\n\t        if self.with_bbox:\n\t            bbox_results = self._bbox_forward(x, rois)\n\t            outs = outs + (bbox_results['cls_score'],\n\t                           bbox_results['bbox_pred'])\n\t        # mask head\n", "        if self.with_mask:\n\t            mask_rois = rois[:100]\n\t            mask_results = self._mask_forward(x, mask_rois)\n\t            outs = outs + (mask_results['mask_pred'], )\n\t        return outs\n\t    def forward_train(self,\n\t                      x,\n\t                      img_metas,\n\t                      proposal_list,\n\t                      gt_bboxes,\n", "                      gt_labels,\n\t                      gt_bboxes_ignore=None,\n\t                      gt_masks=None,\n\t                      **kwargs):\n\t        \"\"\"\n\t        Args:\n\t            x (list[Tensor]): list of multi-level img features.\n\t            img_metas (list[dict]): list of image info dict where each dict\n\t                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n\t                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n", "                For details on the values of these keys see\n\t                `mmdet/datasets/pipelines/formatting.py:Collect`.\n\t            proposals (list[Tensors]): list of region proposals.\n\t            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\n\t                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n\t            gt_labels (list[Tensor]): class indices corresponding to each box\n\t            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n\t                boxes can be ignored when computing the loss.\n\t            gt_masks (None | Tensor) : true segmentation masks for each box\n\t                used if the architecture supports a segmentation task.\n", "        Returns:\n\t            dict[str, Tensor]: a dictionary of loss components\n\t        \"\"\"\n\t        # assign gts and sample proposals\n\t        if self.with_bbox or self.with_mask:\n\t            num_imgs = len(img_metas)\n\t            if gt_bboxes_ignore is None:\n\t                gt_bboxes_ignore = [None for _ in range(num_imgs)]\n\t            sampling_results = []\n\t            for i in range(num_imgs):\n", "                assign_result = self.bbox_assigner.assign(\n\t                    proposal_list[i], gt_bboxes[i], gt_bboxes_ignore[i],\n\t                    gt_labels[i])\n\t                sampling_result = self.bbox_sampler.sample(\n\t                    assign_result,\n\t                    proposal_list[i],\n\t                    gt_bboxes[i],\n\t                    gt_labels[i],\n\t                    feats=[lvl_feat[i][None] for lvl_feat in x])\n\t                sampling_results.append(sampling_result)\n", "        losses = dict()\n\t        # bbox head forward and loss\n\t        if self.with_bbox:\n\t            bbox_results = self._bbox_forward_train(x, sampling_results,\n\t                                                    gt_bboxes, gt_labels,\n\t                                                    img_metas)\n\t            losses.update(bbox_results['loss_bbox'])\n\t        # mask head forward and loss\n\t        if self.with_mask:\n\t            mask_results = self._mask_forward_train(x, sampling_results,\n", "                                                    bbox_results['bbox_feats'],\n\t                                                    gt_masks, img_metas)\n\t            losses.update(mask_results['loss_mask'])\n\t        return losses\n\t    def _bbox_forward(self, x, rois):\n\t        \"\"\"Box head forward function used in both training and testing.\"\"\"\n\t        # TODO: a more flexible way to decide which feature maps to use\n\t        bbox_feats = self.bbox_roi_extractor(\n\t            x[:self.bbox_roi_extractor.num_inputs], rois)\n\t        if self.with_shared_head:\n", "            bbox_feats = self.shared_head(bbox_feats)\n\t        cls_score, bbox_pred = self.bbox_head(bbox_feats)\n\t        bbox_results = dict(\n\t            cls_score=cls_score, bbox_pred=bbox_pred, bbox_feats=bbox_feats)\n\t        return bbox_results\n\t    def _bbox_forward_train(self, x, sampling_results, gt_bboxes, gt_labels,\n\t                            img_metas):\n\t        \"\"\"Run forward function and calculate loss for box head in training.\"\"\"\n\t        rois = bbox2roi([res.bboxes for res in sampling_results])\n\t        bbox_results = self._bbox_forward(x, rois)\n", "        bbox_targets = self.bbox_head.get_targets(sampling_results, gt_bboxes,\n\t                                                  gt_labels, self.train_cfg)\n\t        loss_bbox = self.bbox_head.loss(bbox_results['cls_score'],\n\t                                        bbox_results['bbox_pred'], rois,\n\t                                        *bbox_targets)\n\t        bbox_results.update(loss_bbox=loss_bbox)\n\t        return bbox_results\n\t    def _mask_forward_train(self, x, sampling_results, bbox_feats, gt_masks,\n\t                            img_metas):\n\t        \"\"\"Run forward function and calculate loss for mask head in\n", "        training.\"\"\"\n\t        if not self.share_roi_extractor:\n\t            pos_rois = bbox2roi([res.pos_bboxes for res in sampling_results])\n\t            mask_results = self._mask_forward(x, pos_rois)\n\t        else:\n\t            pos_inds = []\n\t            device = bbox_feats.device\n\t            for res in sampling_results:\n\t                pos_inds.append(\n\t                    torch.ones(\n", "                        res.pos_bboxes.shape[0],\n\t                        device=device,\n\t                        dtype=torch.uint8))\n\t                pos_inds.append(\n\t                    torch.zeros(\n\t                        res.neg_bboxes.shape[0],\n\t                        device=device,\n\t                        dtype=torch.uint8))\n\t            pos_inds = torch.cat(pos_inds)\n\t            mask_results = self._mask_forward(\n", "                x, pos_inds=pos_inds, bbox_feats=bbox_feats)\n\t        mask_targets = self.mask_head.get_targets(sampling_results, gt_masks,\n\t                                                  self.train_cfg)\n\t        pos_labels = torch.cat([res.pos_gt_labels for res in sampling_results])\n\t        loss_mask = self.mask_head.loss(mask_results['mask_pred'],\n\t                                        mask_targets, pos_labels)\n\t        mask_results.update(loss_mask=loss_mask, mask_targets=mask_targets)\n\t        return mask_results\n\t    def _mask_forward(self, x, rois=None, pos_inds=None, bbox_feats=None):\n\t        \"\"\"Mask head forward function used in both training and testing.\"\"\"\n", "        assert ((rois is not None) ^\n\t                (pos_inds is not None and bbox_feats is not None))\n\t        if rois is not None:\n\t            mask_feats = self.mask_roi_extractor(\n\t                x[:self.mask_roi_extractor.num_inputs], rois)\n\t            if self.with_shared_head:\n\t                mask_feats = self.shared_head(mask_feats)\n\t        else:\n\t            assert bbox_feats is not None\n\t            mask_feats = bbox_feats[pos_inds]\n", "        mask_pred = self.mask_head(mask_feats)\n\t        mask_results = dict(mask_pred=mask_pred, mask_feats=mask_feats)\n\t        return mask_results\n\t    async def async_simple_test(self,\n\t                                x,\n\t                                proposal_list,\n\t                                img_metas,\n\t                                proposals=None,\n\t                                rescale=False):\n\t        \"\"\"Async test without augmentation.\"\"\"\n", "        assert self.with_bbox, 'Bbox head must be implemented.'\n\t        det_bboxes, det_labels = await self.async_test_bboxes(\n\t            x, img_metas, proposal_list, self.test_cfg, rescale=rescale)\n\t        bbox_results = bbox2result(det_bboxes, det_labels,\n\t                                   self.bbox_head.num_classes)\n\t        if not self.with_mask:\n\t            return bbox_results\n\t        else:\n\t            segm_results = await self.async_test_mask(\n\t                x,\n", "                img_metas,\n\t                det_bboxes,\n\t                det_labels,\n\t                rescale=rescale,\n\t                mask_test_cfg=self.test_cfg.get('mask'))\n\t            return bbox_results, segm_results\n\t    def simple_test(self,\n\t                    x,\n\t                    proposal_list,\n\t                    img_metas,\n", "                    proposals=None,\n\t                    rescale=False):\n\t        \"\"\"Test without augmentation.\n\t        Args:\n\t            x (tuple[Tensor]): Features from upstream network. Each\n\t                has shape (batch_size, c, h, w).\n\t            proposal_list (list(Tensor)): Proposals from rpn head.\n\t                Each has shape (num_proposals, 5), last dimension\n\t                5 represent (x1, y1, x2, y2, score).\n\t            img_metas (list[dict]): Meta information of images.\n", "            rescale (bool): Whether to rescale the results to\n\t                the original image. Default: True.\n\t        Returns:\n\t            list[list[np.ndarray]] or list[tuple]: When no mask branch,\n\t            it is bbox results of each image and classes with type\n\t            `list[list[np.ndarray]]`. The outer list\n\t            corresponds to each image. The inner list\n\t            corresponds to each class. When the model has mask branch,\n\t            it contains bbox results and mask results.\n\t            The outer list corresponds to each image, and first element\n", "            of tuple is bbox results, second element is mask results.\n\t        \"\"\"\n\t        assert self.with_bbox, 'Bbox head must be implemented.'\n\t        det_bboxes, det_labels = self.simple_test_bboxes(\n\t            x, img_metas, proposal_list, self.test_cfg, rescale=rescale)\n\t        # torch.save({'det_bboxes':det_bboxes, 'det_labels':det_labels}, 'det.pkl')\n\t        bbox_results = [\n\t            bbox2result(det_bboxes[i], det_labels[i],\n\t                        self.bbox_head.num_classes)\n\t            for i in range(len(det_bboxes))\n", "        ]\n\t        if not self.with_mask:\n\t            return bbox_results\n\t        else:\n\t            segm_results = self.simple_test_mask(\n\t                x, img_metas, det_bboxes, det_labels, rescale=rescale)\n\t            return list(zip(bbox_results, segm_results))\n\t    def aug_test(self, x, proposal_list, img_metas, rescale=False):\n\t        \"\"\"Test with augmentations.\n\t        If rescale is False, then returned bboxes and masks will fit the scale\n", "        of imgs[0].\n\t        \"\"\"\n\t        det_bboxes, det_labels = self.aug_test_bboxes(x, img_metas,\n\t                                                      proposal_list,\n\t                                                      self.test_cfg)\n\t        if rescale:\n\t            _det_bboxes = det_bboxes\n\t        else:\n\t            _det_bboxes = det_bboxes.clone()\n\t            _det_bboxes[:, :4] *= det_bboxes.new_tensor(\n", "                img_metas[0][0]['scale_factor'])\n\t        bbox_results = bbox2result(_det_bboxes, det_labels,\n\t                                   self.bbox_head.num_classes)\n\t        # det_bboxes always keep the original scale\n\t        if self.with_mask:\n\t            segm_results = self.aug_test_mask(x, img_metas, det_bboxes,\n\t                                              det_labels)\n\t            return [(bbox_results, segm_results)]\n\t        else:\n\t            return [bbox_results]\n", "    def onnx_export(self, x, proposals, img_metas, rescale=False):\n\t        \"\"\"Test without augmentation.\"\"\"\n\t        assert self.with_bbox, 'Bbox head must be implemented.'\n\t        det_bboxes, det_labels = self.bbox_onnx_export(\n\t            x, img_metas, proposals, self.test_cfg, rescale=rescale)\n\t        if not self.with_mask:\n\t            return det_bboxes, det_labels\n\t        else:\n\t            segm_results = self.mask_onnx_export(\n\t                x, img_metas, det_bboxes, det_labels, rescale=rescale)\n", "            return det_bboxes, det_labels, segm_results\n\t    def mask_onnx_export(self, x, img_metas, det_bboxes, det_labels, **kwargs):\n\t        \"\"\"Export mask branch to onnx which supports batch inference.\n\t        Args:\n\t            x (tuple[Tensor]): Feature maps of all scale level.\n\t            img_metas (list[dict]): Image meta info.\n\t            det_bboxes (Tensor): Bboxes and corresponding scores.\n\t                has shape [N, num_bboxes, 5].\n\t            det_labels (Tensor): class labels of\n\t                shape [N, num_bboxes].\n", "        Returns:\n\t            Tensor: The segmentation results of shape [N, num_bboxes,\n\t                image_height, image_width].\n\t        \"\"\"\n\t        # image shapes of images in the batch\n\t        if all(det_bbox.shape[0] == 0 for det_bbox in det_bboxes):\n\t            raise RuntimeError('[ONNX Error] Can not record MaskHead '\n\t                               'as it has not been executed this time')\n\t        batch_size = det_bboxes.size(0)\n\t        # if det_bboxes is rescaled to the original image size, we need to\n", "        # rescale it back to the testing scale to obtain RoIs.\n\t        det_bboxes = det_bboxes[..., :4]\n\t        batch_index = torch.arange(\n\t            det_bboxes.size(0), device=det_bboxes.device).float().view(\n\t                -1, 1, 1).expand(det_bboxes.size(0), det_bboxes.size(1), 1)\n\t        mask_rois = torch.cat([batch_index, det_bboxes], dim=-1)\n\t        mask_rois = mask_rois.view(-1, 5)\n\t        mask_results = self._mask_forward(x, mask_rois)\n\t        mask_pred = mask_results['mask_pred']\n\t        max_shape = img_metas[0]['img_shape_for_onnx']\n", "        num_det = int(det_bboxes.shape[1])\n\t        det_bboxes = det_bboxes.reshape(-1, 4)\n\t        det_labels = det_labels.reshape(-1)\n\t        segm_results = self.mask_head.onnx_export(mask_pred, det_bboxes,\n\t                                                  det_labels, self.test_cfg,\n\t                                                  max_shape)\n\t        segm_results = segm_results.reshape(batch_size, num_det, max_shape[0],\n\t                                            max_shape[1])\n\t        return segm_results\n\t    def bbox_onnx_export(self, x, img_metas, proposals, rcnn_test_cfg,\n", "                         **kwargs):\n\t        \"\"\"Export bbox branch to onnx which supports batch inference.\n\t        Args:\n\t            x (tuple[Tensor]): Feature maps of all scale level.\n\t            img_metas (list[dict]): Image meta info.\n\t            proposals (Tensor): Region proposals with\n\t                batch dimension, has shape [N, num_bboxes, 5].\n\t            rcnn_test_cfg (obj:`ConfigDict`): `test_cfg` of R-CNN.\n\t        Returns:\n\t            tuple[Tensor, Tensor]: bboxes of shape [N, num_bboxes, 5]\n", "                and class labels of shape [N, num_bboxes].\n\t        \"\"\"\n\t        # get origin input shape to support onnx dynamic input shape\n\t        assert len(\n\t            img_metas\n\t        ) == 1, 'Only support one input image while in exporting to ONNX'\n\t        img_shapes = img_metas[0]['img_shape_for_onnx']\n\t        rois = proposals\n\t        batch_index = torch.arange(\n\t            rois.size(0), device=rois.device).float().view(-1, 1, 1).expand(\n", "                rois.size(0), rois.size(1), 1)\n\t        rois = torch.cat([batch_index, rois[..., :4]], dim=-1)\n\t        batch_size = rois.shape[0]\n\t        num_proposals_per_img = int(rois.shape[1])\n\t        # Eliminate the batch dimension\n\t        rois = rois.view(-1, 5)\n\t        bbox_results = self._bbox_forward(x, rois)\n\t        cls_score = bbox_results['cls_score']\n\t        bbox_pred = bbox_results['bbox_pred']\n\t        # Recover the batch dimension\n", "        rois = rois.reshape(-1, num_proposals_per_img, 5)\n\t        cls_score = cls_score.reshape(-1, num_proposals_per_img,\n\t                                      int(cls_score.size(-1)))\n\t        bbox_pred = bbox_pred.reshape(-1, num_proposals_per_img,\n\t                                      int(bbox_pred.size(-1)))\n\t        det_bboxes, det_labels = self.bbox_head.onnx_export(\n\t            rois, cls_score, bbox_pred, img_shapes, cfg=rcnn_test_cfg)\n\t        return det_bboxes, det_labels\n"]}
{"filename": "patch/mmdet/models/roi_heads/mask_heads/fcn_mask_head.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\tfrom warnings import warn\n\timport numpy as np\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom mmcv.cnn import ConvModule, build_conv_layer, build_upsample_layer\n\tfrom mmcv.ops.carafe import CARAFEPack\n\tfrom mmcv.runner import BaseModule, ModuleList, auto_fp16, force_fp32\n\tfrom torch.nn.modules.utils import _pair\n", "from mmdet.core import mask_target\n\tfrom mmdet.models.builder import HEADS, build_loss\n\tBYTES_PER_FLOAT = 4\n\t# TODO: This memory limit may be too much or too little. It would be better to\n\t# determine it based on available resources.\n\tGPU_MEM_LIMIT = 1024**3  # 1 GB memory limit\n\t@HEADS.register_module()\n\tclass FCNMaskHead(BaseModule):\n\t    def __init__(self,\n\t                 num_convs=4,\n", "                 roi_feat_size=14,\n\t                 in_channels=256,\n\t                 conv_kernel_size=3,\n\t                 conv_out_channels=256,\n\t                 num_classes=80,\n\t                 class_agnostic=False,\n\t                 upsample_cfg=dict(type='deconv', scale_factor=2),\n\t                 conv_cfg=None,\n\t                 norm_cfg=None,\n\t                 predictor_cfg=dict(type='Conv'),\n", "                 loss_mask=dict(\n\t                     type='CrossEntropyLoss', use_mask=True, loss_weight=1.0),\n\t                 init_cfg=None):\n\t        assert init_cfg is None, 'To prevent abnormal initialization ' \\\n\t                                 'behavior, init_cfg is not allowed to be set'\n\t        super(FCNMaskHead, self).__init__(init_cfg)\n\t        self.upsample_cfg = upsample_cfg.copy()\n\t        if self.upsample_cfg['type'] not in [\n\t                None, 'deconv', 'nearest', 'bilinear', 'carafe'\n\t        ]:\n", "            raise ValueError(\n\t                f'Invalid upsample method {self.upsample_cfg[\"type\"]}, '\n\t                'accepted methods are \"deconv\", \"nearest\", \"bilinear\", '\n\t                '\"carafe\"')\n\t        self.num_convs = num_convs\n\t        # WARN: roi_feat_size is reserved and not used\n\t        self.roi_feat_size = _pair(roi_feat_size)\n\t        self.in_channels = in_channels\n\t        self.conv_kernel_size = conv_kernel_size\n\t        self.conv_out_channels = conv_out_channels\n", "        self.upsample_method = self.upsample_cfg.get('type')\n\t        self.scale_factor = self.upsample_cfg.pop('scale_factor', None)\n\t        self.num_classes = num_classes\n\t        self.class_agnostic = class_agnostic\n\t        self.conv_cfg = conv_cfg\n\t        self.norm_cfg = norm_cfg\n\t        self.predictor_cfg = predictor_cfg\n\t        self.fp16_enabled = False\n\t        self.loss_mask = build_loss(loss_mask)\n\t        self.convs = ModuleList()\n", "        for i in range(self.num_convs):\n\t            in_channels = (\n\t                self.in_channels if i == 0 else self.conv_out_channels)\n\t            padding = (self.conv_kernel_size - 1) // 2\n\t            self.convs.append(\n\t                ConvModule(\n\t                    in_channels,\n\t                    self.conv_out_channels,\n\t                    self.conv_kernel_size,\n\t                    padding=padding,\n", "                    conv_cfg=conv_cfg,\n\t                    norm_cfg=norm_cfg))\n\t        upsample_in_channels = (\n\t            self.conv_out_channels if self.num_convs > 0 else in_channels)\n\t        upsample_cfg_ = self.upsample_cfg.copy()\n\t        if self.upsample_method is None:\n\t            self.upsample = None\n\t        elif self.upsample_method == 'deconv':\n\t            upsample_cfg_.update(\n\t                in_channels=upsample_in_channels,\n", "                out_channels=self.conv_out_channels,\n\t                kernel_size=self.scale_factor,\n\t                stride=self.scale_factor)\n\t            self.upsample = build_upsample_layer(upsample_cfg_)\n\t        elif self.upsample_method == 'carafe':\n\t            upsample_cfg_.update(\n\t                channels=upsample_in_channels, scale_factor=self.scale_factor)\n\t            self.upsample = build_upsample_layer(upsample_cfg_)\n\t        else:\n\t            # suppress warnings\n", "            align_corners = (None\n\t                             if self.upsample_method == 'nearest' else False)\n\t            upsample_cfg_.update(\n\t                scale_factor=self.scale_factor,\n\t                mode=self.upsample_method,\n\t                align_corners=align_corners)\n\t            self.upsample = build_upsample_layer(upsample_cfg_)\n\t        out_channels = 1 if self.class_agnostic else self.num_classes\n\t        logits_in_channel = (\n\t            self.conv_out_channels\n", "            if self.upsample_method == 'deconv' else upsample_in_channels)\n\t        self.conv_logits = build_conv_layer(self.predictor_cfg,\n\t                                            logits_in_channel, out_channels, 1)\n\t        self.relu = nn.ReLU(inplace=True)\n\t        self.debug_imgs = None\n\t    def init_weights(self):\n\t        super(FCNMaskHead, self).init_weights()\n\t        for m in [self.upsample, self.conv_logits]:\n\t            if m is None:\n\t                continue\n", "            elif isinstance(m, CARAFEPack):\n\t                m.init_weights()\n\t            elif hasattr(m, 'weight') and hasattr(m, 'bias'):\n\t                nn.init.kaiming_normal_(\n\t                    m.weight, mode='fan_out', nonlinearity='relu')\n\t                nn.init.constant_(m.bias, 0)\n\t    @auto_fp16()\n\t    def forward(self, x):\n\t        for conv in self.convs:\n\t            x = conv(x)\n", "        if self.upsample is not None:\n\t            x = self.upsample(x)\n\t            if self.upsample_method == 'deconv':\n\t                x = self.relu(x)\n\t        mask_pred = self.conv_logits(x)\n\t        return mask_pred\n\t    def get_targets(self, sampling_results, gt_masks, rcnn_train_cfg):\n\t        pos_proposals = [res.pos_bboxes for res in sampling_results]\n\t        pos_assigned_gt_inds = [\n\t            res.pos_assigned_gt_inds for res in sampling_results\n", "        ]\n\t        mask_targets = mask_target(pos_proposals, pos_assigned_gt_inds,\n\t                                   gt_masks, rcnn_train_cfg)\n\t        return mask_targets\n\t    @force_fp32(apply_to=('mask_pred', ))\n\t    def loss(self, mask_pred, mask_targets, labels):\n\t        \"\"\"\n\t        Example:\n\t            >>> from mmdet.models.roi_heads.mask_heads.fcn_mask_head import *  # NOQA\n\t            >>> N = 7  # N = number of extracted ROIs\n", "            >>> C, H, W = 11, 32, 32\n\t            >>> # Create example instance of FCN Mask Head.\n\t            >>> # There are lots of variations depending on the configuration\n\t            >>> self = FCNMaskHead(num_classes=C, num_convs=1)\n\t            >>> inputs = torch.rand(N, self.in_channels, H, W)\n\t            >>> mask_pred = self.forward(inputs)\n\t            >>> sf = self.scale_factor\n\t            >>> labels = torch.randint(0, C, size=(N,))\n\t            >>> # With the default properties the mask targets should indicate\n\t            >>> # a (potentially soft) single-class label\n", "            >>> mask_targets = torch.rand(N, H * sf, W * sf)\n\t            >>> loss = self.loss(mask_pred, mask_targets, labels)\n\t            >>> print('loss = {!r}'.format(loss))\n\t        \"\"\"\n\t        loss = dict()\n\t        if mask_pred.size(0) == 0:\n\t            loss_mask = mask_pred.sum()\n\t        else:\n\t            if self.class_agnostic:\n\t                loss_mask = self.loss_mask(mask_pred, mask_targets,\n", "                                           torch.zeros_like(labels))\n\t            else:\n\t                loss_mask = self.loss_mask(mask_pred, mask_targets, labels)\n\t        loss['loss_mask'] = loss_mask\n\t        return loss\n\t    def get_seg_masks(self, mask_pred, det_bboxes, det_labels, rcnn_test_cfg,\n\t                      ori_shape, scale_factor, rescale):\n\t        \"\"\"Get segmentation masks from mask_pred and bboxes.\n\t        Args:\n\t            mask_pred (Tensor or ndarray): shape (n, #class, h, w).\n", "                For single-scale testing, mask_pred is the direct output of\n\t                model, whose type is Tensor, while for multi-scale testing,\n\t                it will be converted to numpy array outside of this method.\n\t            det_bboxes (Tensor): shape (n, 4/5)\n\t            det_labels (Tensor): shape (n, )\n\t            rcnn_test_cfg (dict): rcnn testing config\n\t            ori_shape (Tuple): original image height and width, shape (2,)\n\t            scale_factor(ndarray | Tensor): If ``rescale is True``, box\n\t                coordinates are divided by this scale factor to fit\n\t                ``ori_shape``.\n", "            rescale (bool): If True, the resulting masks will be rescaled to\n\t                ``ori_shape``.\n\t        Returns:\n\t            list[list]: encoded masks. The c-th item in the outer list\n\t                corresponds to the c-th class. Given the c-th outer list, the\n\t                i-th item in that inner list is the mask for the i-th box with\n\t                class label c.\n\t        Example:\n\t            >>> import mmcv\n\t            >>> from mmdet.models.roi_heads.mask_heads.fcn_mask_head import *  # NOQA\n", "            >>> N = 7  # N = number of extracted ROIs\n\t            >>> C, H, W = 11, 32, 32\n\t            >>> # Create example instance of FCN Mask Head.\n\t            >>> self = FCNMaskHead(num_classes=C, num_convs=0)\n\t            >>> inputs = torch.rand(N, self.in_channels, H, W)\n\t            >>> mask_pred = self.forward(inputs)\n\t            >>> # Each input is associated with some bounding box\n\t            >>> det_bboxes = torch.Tensor([[1, 1, 42, 42 ]] * N)\n\t            >>> det_labels = torch.randint(0, C, size=(N,))\n\t            >>> rcnn_test_cfg = mmcv.Config({'mask_thr_binary': 0, })\n", "            >>> ori_shape = (H * 4, W * 4)\n\t            >>> scale_factor = torch.FloatTensor((1, 1))\n\t            >>> rescale = False\n\t            >>> # Encoded masks are a list for each category.\n\t            >>> encoded_masks = self.get_seg_masks(\n\t            >>>     mask_pred, det_bboxes, det_labels, rcnn_test_cfg, ori_shape,\n\t            >>>     scale_factor, rescale\n\t            >>> )\n\t            >>> assert len(encoded_masks) == C\n\t            >>> assert sum(list(map(len, encoded_masks))) == N\n", "        \"\"\"\n\t        if isinstance(mask_pred, torch.Tensor):\n\t            mask_pred = mask_pred.sigmoid()\n\t        else:\n\t            # In AugTest, has been activated before\n\t            mask_pred = det_bboxes.new_tensor(mask_pred)\n\t        device = mask_pred.device\n\t        cls_segms = [[] for _ in range(self.num_classes)\n\t                     ]  # BG is not included in num_classes\n\t        bboxes = det_bboxes[:, :4]\n", "        labels = det_labels\n\t        # In most cases, scale_factor should have been\n\t        # converted to Tensor when rescale the bbox\n\t        if not isinstance(scale_factor, torch.Tensor):\n\t            if isinstance(scale_factor, float):\n\t                scale_factor = np.array([scale_factor] * 4)\n\t                warn('Scale_factor should be a Tensor or ndarray '\n\t                     'with shape (4,), float would be deprecated. ')\n\t            assert isinstance(scale_factor, np.ndarray)\n\t            scale_factor = torch.Tensor(scale_factor)\n", "        if rescale:\n\t            img_h, img_w = ori_shape[:2]\n\t            bboxes = bboxes / scale_factor.to(bboxes)\n\t        else:\n\t            w_scale, h_scale = scale_factor[0], scale_factor[1]\n\t            img_h = np.round(ori_shape[0] * h_scale.item()).astype(np.int32)\n\t            img_w = np.round(ori_shape[1] * w_scale.item()).astype(np.int32)\n\t        N = len(mask_pred)\n\t        # The actual implementation split the input into chunks,\n\t        # and paste them chunk by chunk.\n", "        if device.type == 'cpu':\n\t            # CPU is most efficient when they are pasted one by one with\n\t            # skip_empty=True, so that it performs minimal number of\n\t            # operations.\n\t            num_chunks = N\n\t        else:\n\t            # GPU benefits from parallelism for larger chunks,\n\t            # but may have memory issue\n\t            # the types of img_w and img_h are np.int32,\n\t            # when the image resolution is large,\n", "            # the calculation of num_chunks will overflow.\n\t            # so we need to change the types of img_w and img_h to int.\n\t            # See https://github.com/open-mmlab/mmdetection/pull/5191\n\t            num_chunks = int(\n\t                np.ceil(N * int(img_h) * int(img_w) * BYTES_PER_FLOAT /\n\t                        GPU_MEM_LIMIT))\n\t            assert (num_chunks <=\n\t                    N), 'Default GPU_MEM_LIMIT is too small; try increasing it'\n\t        chunks = torch.chunk(torch.arange(N, device=device), num_chunks)\n\t        threshold = rcnn_test_cfg.mask_thr_binary\n", "        im_mask = torch.zeros(\n\t            N,\n\t            img_h,\n\t            img_w,\n\t            device=device,\n\t            dtype=torch.bool if threshold >= 0 else torch.uint8)\n\t        if not self.class_agnostic:\n\t            mask_pred = mask_pred[range(N), labels][:, None]\n\t        for inds in chunks:\n\t            masks_chunk, spatial_inds = _do_paste_mask(\n", "                mask_pred[inds],\n\t                bboxes[inds],\n\t                img_h,\n\t                img_w,\n\t                skip_empty=device.type == 'cpu')\n\t            if threshold >= 0:\n\t                masks_chunk = (masks_chunk >= threshold).to(dtype=torch.bool)\n\t            else:\n\t                # for visualization and debugging\n\t                masks_chunk = (masks_chunk * 255).to(dtype=torch.uint8)\n", "            im_mask[(inds, ) + spatial_inds] = masks_chunk\n\t        for i in range(N):\n\t            cls_segms[labels[i]].append(im_mask[i].detach().cpu().numpy())\n\t        return cls_segms\n\t    def onnx_export(self, mask_pred, det_bboxes, det_labels, rcnn_test_cfg,\n\t                    ori_shape, **kwargs):\n\t        \"\"\"Get segmentation masks from mask_pred and bboxes.\n\t        Args:\n\t            mask_pred (Tensor): shape (n, #class, h, w).\n\t            det_bboxes (Tensor): shape (n, 4/5)\n", "            det_labels (Tensor): shape (n, )\n\t            rcnn_test_cfg (dict): rcnn testing config\n\t            ori_shape (Tuple): original image height and width, shape (2,)\n\t        Returns:\n\t            Tensor: a mask of shape (N, img_h, img_w).\n\t        \"\"\"\n\t        mask_pred = mask_pred.sigmoid()\n\t        bboxes = det_bboxes[:, :4]\n\t        labels = det_labels\n\t        # No need to consider rescale and scale_factor while exporting to ONNX\n", "        img_h, img_w = ori_shape[:2]\n\t        threshold = rcnn_test_cfg.mask_thr_binary\n\t        if not self.class_agnostic:\n\t            box_inds = torch.arange(mask_pred.shape[0])\n\t            mask_pred = mask_pred[box_inds, labels][:, None]\n\t        masks, _ = _do_paste_mask(\n\t            mask_pred, bboxes, img_h, img_w, skip_empty=False)\n\t        if threshold >= 0:\n\t            # should convert to float to avoid problems in TRT\n\t            masks = (masks >= threshold).to(dtype=torch.float)\n", "        return masks\n\tdef _do_paste_mask(masks, boxes, img_h, img_w, skip_empty=True):\n\t    \"\"\"Paste instance masks according to boxes.\n\t    This implementation is modified from\n\t    https://github.com/facebookresearch/detectron2/\n\t    Args:\n\t        masks (Tensor): N, 1, H, W\n\t        boxes (Tensor): N, 4\n\t        img_h (int): Height of the image to be pasted.\n\t        img_w (int): Width of the image to be pasted.\n", "        skip_empty (bool): Only paste masks within the region that\n\t            tightly bound all boxes, and returns the results this region only.\n\t            An important optimization for CPU.\n\t    Returns:\n\t        tuple: (Tensor, tuple). The first item is mask tensor, the second one\n\t            is the slice object.\n\t        If skip_empty == False, the whole image will be pasted. It will\n\t            return a mask of shape (N, img_h, img_w) and an empty tuple.\n\t        If skip_empty == True, only area around the mask will be pasted.\n\t            A mask of shape (N, h', w') and its start and end coordinates\n", "            in the original image will be returned.\n\t    \"\"\"\n\t    # On GPU, paste all masks together (up to chunk size)\n\t    # by using the entire image to sample the masks\n\t    # Compared to pasting them one by one,\n\t    # this has more operations but is faster on COCO-scale dataset.\n\t    device = masks.device\n\t    if skip_empty:\n\t        x0_int, y0_int = torch.clamp(\n\t            boxes.min(dim=0).values.floor()[:2] - 1,\n", "            min=0).to(dtype=torch.int32)\n\t        x1_int = torch.clamp(\n\t            boxes[:, 2].max().ceil() + 1, max=img_w).to(dtype=torch.int32)\n\t        y1_int = torch.clamp(\n\t            boxes[:, 3].max().ceil() + 1, max=img_h).to(dtype=torch.int32)\n\t    else:\n\t        x0_int, y0_int = 0, 0\n\t        x1_int, y1_int = img_w, img_h\n\t    x0, y0, x1, y1 = torch.split(boxes, 1, dim=1)  # each is Nx1\n\t    N = masks.shape[0]\n", "    img_y = torch.arange(y0_int, y1_int, device=device).to(torch.float32) + 0.5\n\t    img_x = torch.arange(x0_int, x1_int, device=device).to(torch.float32) + 0.5\n\t    # 归一化\n\t    img_y = (img_y - y0) / (y1 - y0) * 2 - 1\n\t    img_x = (img_x - x0) / (x1 - x0) * 2 - 1\n\t    # img_x, img_y have shapes (N, w), (N, h)\n\t    # IsInf op is not supported with ONNX<=1.7.0\n\t    if not torch.onnx.is_in_onnx_export():\n\t        if torch.isinf(img_x).any():\n\t            inds = torch.where(torch.isinf(img_x))\n", "            img_x[inds] = 0\n\t        if torch.isinf(img_y).any():\n\t            inds = torch.where(torch.isinf(img_y))\n\t            img_y[inds] = 0\n\t    gx = img_x[:, None, :].expand(N, img_y.size(1), img_x.size(1))\n\t    gy = img_y[:, :, None].expand(N, img_y.size(1), img_x.size(1))\n\t    grid = torch.stack([gx, gy], dim=3)\n\t    img_masks = F.grid_sample(\n\t        masks.to(dtype=torch.float32), grid, align_corners=False)\n\t    if skip_empty:\n", "        return img_masks[:, 0], (slice(y0_int, y1_int), slice(x0_int, x1_int))\n\t    else:\n\t        return img_masks[:, 0], ()\n"]}
{"filename": "patch/mmdet/models/roi_heads/bbox_heads/convfc_bbox_head.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport torch.nn as nn\n\tfrom mmcv.cnn import ConvModule\n\tfrom mmdet.models.builder import HEADS\n\tfrom mmdet.models.utils import build_linear_layer\n\tfrom .bbox_head import BBoxHead\n\t@HEADS.register_module()\n\tclass ConvFCBBoxHead(BBoxHead):\n\t    r\"\"\"More general bbox head, with shared conv and fc layers and two optional\n\t    separated branches.\n", "    .. code-block:: none\n\t                                    /-> cls convs -> cls fcs -> cls\n\t        shared convs -> shared fcs\n\t                                    \\-> reg convs -> reg fcs -> reg\n\t    \"\"\"  # noqa: W605\n\t    def __init__(self,\n\t                 num_shared_convs=0,\n\t                 num_shared_fcs=0,\n\t                 num_cls_convs=0,\n\t                 num_cls_fcs=0,\n", "                 num_reg_convs=0,\n\t                 num_reg_fcs=0,\n\t                 conv_out_channels=256,\n\t                 fc_out_channels=1024,\n\t                 conv_cfg=None,\n\t                 norm_cfg=None,\n\t                 init_cfg=None,\n\t                 *args,\n\t                 **kwargs):\n\t        super(ConvFCBBoxHead, self).__init__(\n", "            *args, init_cfg=init_cfg, **kwargs)\n\t        assert (num_shared_convs + num_shared_fcs + num_cls_convs +\n\t                num_cls_fcs + num_reg_convs + num_reg_fcs > 0)\n\t        if num_cls_convs > 0 or num_reg_convs > 0:\n\t            assert num_shared_fcs == 0\n\t        if not self.with_cls:\n\t            assert num_cls_convs == 0 and num_cls_fcs == 0\n\t        if not self.with_reg:\n\t            assert num_reg_convs == 0 and num_reg_fcs == 0\n\t        self.num_shared_convs = num_shared_convs\n", "        self.num_shared_fcs = num_shared_fcs\n\t        self.num_cls_convs = num_cls_convs\n\t        self.num_cls_fcs = num_cls_fcs\n\t        self.num_reg_convs = num_reg_convs\n\t        self.num_reg_fcs = num_reg_fcs\n\t        self.conv_out_channels = conv_out_channels\n\t        self.fc_out_channels = fc_out_channels\n\t        self.conv_cfg = conv_cfg\n\t        self.norm_cfg = norm_cfg\n\t        # add shared convs and fcs\n", "        self.shared_convs, self.shared_fcs, last_layer_dim = \\\n\t            self._add_conv_fc_branch(\n\t                self.num_shared_convs, self.num_shared_fcs, self.in_channels,\n\t                True)\n\t        self.shared_out_channels = last_layer_dim\n\t        # add cls specific branch\n\t        self.cls_convs, self.cls_fcs, self.cls_last_dim = \\\n\t            self._add_conv_fc_branch(\n\t                self.num_cls_convs, self.num_cls_fcs, self.shared_out_channels)\n\t        # add reg specific branch\n", "        self.reg_convs, self.reg_fcs, self.reg_last_dim = \\\n\t            self._add_conv_fc_branch(\n\t                self.num_reg_convs, self.num_reg_fcs, self.shared_out_channels)\n\t        if self.num_shared_fcs == 0 and not self.with_avg_pool:\n\t            if self.num_cls_fcs == 0:\n\t                self.cls_last_dim *= self.roi_feat_area\n\t            if self.num_reg_fcs == 0:\n\t                self.reg_last_dim *= self.roi_feat_area\n\t        self.relu = nn.ReLU(inplace=True)\n\t        # reconstruct fc_cls and fc_reg since input channels are changed\n", "        if self.with_cls:\n\t            if self.custom_cls_channels:\n\t                cls_channels = self.loss_cls.get_cls_channels(self.num_classes)\n\t            else:\n\t                cls_channels = self.num_classes + 1\n\t            self.fc_cls = build_linear_layer(\n\t                self.cls_predictor_cfg,\n\t                in_features=self.cls_last_dim,\n\t                out_features=cls_channels)\n\t        if self.with_reg:\n", "            out_dim_reg = (4 if self.reg_class_agnostic else 4 *\n\t                           self.num_classes)\n\t            self.fc_reg = build_linear_layer(\n\t                self.reg_predictor_cfg,\n\t                in_features=self.reg_last_dim,\n\t                out_features=out_dim_reg)\n\t        if init_cfg is None:\n\t            # when init_cfg is None,\n\t            # It has been set to\n\t            # [[dict(type='Normal', std=0.01, override=dict(name='fc_cls'))],\n", "            #  [dict(type='Normal', std=0.001, override=dict(name='fc_reg'))]\n\t            # after `super(ConvFCBBoxHead, self).__init__()`\n\t            # we only need to append additional configuration\n\t            # for `shared_fcs`, `cls_fcs` and `reg_fcs`\n\t            self.init_cfg += [\n\t                dict(\n\t                    type='Xavier',\n\t                    distribution='uniform',\n\t                    override=[\n\t                        dict(name='shared_fcs'),\n", "                        dict(name='cls_fcs'),\n\t                        dict(name='reg_fcs')\n\t                    ])\n\t            ]\n\t    def _add_conv_fc_branch(self,\n\t                            num_branch_convs,\n\t                            num_branch_fcs,\n\t                            in_channels,\n\t                            is_shared=False):\n\t        \"\"\"Add shared or separable branch.\n", "        convs -> avg pool (optional) -> fcs\n\t        \"\"\"\n\t        last_layer_dim = in_channels\n\t        # add branch specific conv layers\n\t        branch_convs = nn.ModuleList()\n\t        if num_branch_convs > 0:\n\t            for i in range(num_branch_convs):\n\t                conv_in_channels = (\n\t                    last_layer_dim if i == 0 else self.conv_out_channels)\n\t                branch_convs.append(\n", "                    ConvModule(\n\t                        conv_in_channels,\n\t                        self.conv_out_channels,\n\t                        3,\n\t                        padding=1,\n\t                        conv_cfg=self.conv_cfg,\n\t                        norm_cfg=self.norm_cfg))\n\t            last_layer_dim = self.conv_out_channels\n\t        # add branch specific fc layers\n\t        branch_fcs = nn.ModuleList()\n", "        if num_branch_fcs > 0:\n\t            # for shared branch, only consider self.with_avg_pool\n\t            # for separated branches, also consider self.num_shared_fcs\n\t            if (is_shared\n\t                    or self.num_shared_fcs == 0) and not self.with_avg_pool:\n\t                last_layer_dim *= self.roi_feat_area\n\t            for i in range(num_branch_fcs):\n\t                fc_in_channels = (\n\t                    last_layer_dim if i == 0 else self.fc_out_channels)\n\t                branch_fcs.append(\n", "                    nn.Linear(fc_in_channels, self.fc_out_channels))\n\t            last_layer_dim = self.fc_out_channels\n\t        return branch_convs, branch_fcs, last_layer_dim\n\t    def forward(self, x):\n\t        # shared part\n\t        if self.num_shared_convs > 0:\n\t            for conv in self.shared_convs:\n\t                x = conv(x)\n\t        if self.num_shared_fcs > 0:\n\t            if self.with_avg_pool:\n", "                x = self.avg_pool(x)\n\t            x = x.flatten(1)\n\t            for fc in self.shared_fcs:\n\t                x = self.relu(fc(x))\n\t        # separate branches\n\t        x_cls = x\n\t        x_reg = x\n\t        for conv in self.cls_convs:\n\t            x_cls = conv(x_cls)\n\t        if x_cls.dim() > 2:\n", "            if self.with_avg_pool:\n\t                x_cls = self.avg_pool(x_cls)\n\t            x_cls = x_cls.flatten(1)\n\t        for fc in self.cls_fcs:\n\t            x_cls = self.relu(fc(x_cls))\n\t        for conv in self.reg_convs:\n\t            x_reg = conv(x_reg)\n\t        if x_reg.dim() > 2:\n\t            if self.with_avg_pool:\n\t                x_reg = self.avg_pool(x_reg)\n", "            x_reg = x_reg.flatten(1)\n\t        for fc in self.reg_fcs:\n\t            x_reg = self.relu(fc(x_reg))\n\t        cls_score = self.fc_cls(x_cls) if self.with_cls else None\n\t        bbox_pred = self.fc_reg(x_reg) if self.with_reg else None\n\t        return cls_score, bbox_pred\n\t@HEADS.register_module()\n\tclass Shared2FCBBoxHead(ConvFCBBoxHead):\n\t    def __init__(self, fc_out_channels=1024, *args, **kwargs):\n\t        super(Shared2FCBBoxHead, self).__init__(\n", "            num_shared_convs=0,\n\t            num_shared_fcs=2,\n\t            num_cls_convs=0,\n\t            num_cls_fcs=0,\n\t            num_reg_convs=0,\n\t            num_reg_fcs=0,\n\t            fc_out_channels=fc_out_channels,\n\t            *args,\n\t            **kwargs)\n\t@HEADS.register_module()\n", "class Shared4Conv1FCBBoxHead(ConvFCBBoxHead):\n\t    def __init__(self, fc_out_channels=1024, *args, **kwargs):\n\t        super(Shared4Conv1FCBBoxHead, self).__init__(\n\t            num_shared_convs=4,\n\t            num_shared_fcs=1,\n\t            num_cls_convs=0,\n\t            num_cls_fcs=0,\n\t            num_reg_convs=0,\n\t            num_reg_fcs=0,\n\t            fc_out_channels=fc_out_channels,\n", "            *args,\n\t            **kwargs)\n"]}
{"filename": "patch/mmdet/models/detectors/two_stage.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport warnings\n\timport torch\n\tfrom ..builder import DETECTORS, build_backbone, build_head, build_neck\n\tfrom .base import BaseDetector\n\t@DETECTORS.register_module()\n\tclass TwoStageDetector(BaseDetector):\n\t    \"\"\"Base class for two-stage detectors.\n\t    Two-stage detectors typically consisting of a region proposal network and a\n\t    task-specific regression head.\n", "    \"\"\"\n\t    def __init__(self,\n\t                 backbone,\n\t                 neck=None,\n\t                 rpn_head=None,\n\t                 roi_head=None,\n\t                 train_cfg=None,\n\t                 test_cfg=None,\n\t                 pretrained=None,\n\t                 init_cfg=None):\n", "        super(TwoStageDetector, self).__init__(init_cfg)\n\t        if pretrained:\n\t            warnings.warn('DeprecationWarning: pretrained is deprecated, '\n\t                          'please use \"init_cfg\" instead')\n\t            backbone.pretrained = pretrained\n\t        self.backbone = build_backbone(backbone)\n\t        if neck is not None:\n\t            self.neck = build_neck(neck)\n\t        if rpn_head is not None:\n\t            rpn_train_cfg = train_cfg.rpn if train_cfg is not None else None\n", "            rpn_head_ = rpn_head.copy()\n\t            rpn_head_.update(train_cfg=rpn_train_cfg, test_cfg=test_cfg.rpn)\n\t            self.rpn_head = build_head(rpn_head_)\n\t        if roi_head is not None:\n\t            # update train and test cfg here for now\n\t            # TODO: refactor assigner & sampler\n\t            rcnn_train_cfg = train_cfg.rcnn if train_cfg is not None else None\n\t            roi_head.update(train_cfg=rcnn_train_cfg)\n\t            roi_head.update(test_cfg=test_cfg.rcnn)\n\t            roi_head.pretrained = pretrained\n", "            self.roi_head = build_head(roi_head)\n\t        self.train_cfg = train_cfg\n\t        self.test_cfg = test_cfg\n\t    @property\n\t    def with_rpn(self):\n\t        \"\"\"bool: whether the detector has RPN\"\"\"\n\t        return hasattr(self, 'rpn_head') and self.rpn_head is not None\n\t    @property\n\t    def with_roi_head(self):\n\t        \"\"\"bool: whether the detector has a RoI head\"\"\"\n", "        return hasattr(self, 'roi_head') and self.roi_head is not None\n\t    def extract_feat(self, img):\n\t        \"\"\"Directly extract features from the backbone+neck.\"\"\"\n\t        x = self.backbone(img)\n\t        if self.with_neck:\n\t            x = self.neck(x)\n\t        return x\n\t    def forward_dummy(self, img):\n\t        \"\"\"Used for computing network flops.\n\t        See `mmdetection/tools/analysis_tools/get_flops.py`\n", "        \"\"\"\n\t        outs = ()\n\t        # backbone\n\t        x = self.extract_feat(img)\n\t        # rpn\n\t        if self.with_rpn:\n\t            rpn_outs = self.rpn_head(x)\n\t            outs = outs + (rpn_outs, )\n\t        proposals = torch.rand(1000, 2).to(img.device)\n\t        proposals = torch.cat([proposals, proposals + torch.rand(1000, 2).to(img.device)], dim=-1)\n", "        # roi_head\n\t        roi_outs = self.roi_head.forward_dummy(x, proposals)\n\t        outs = outs + (roi_outs, )\n\t        return outs\n\t    def forward_train(self,\n\t                      img,\n\t                      img_metas,\n\t                      gt_bboxes,\n\t                      gt_labels,\n\t                      gt_bboxes_ignore=None,\n", "                      gt_masks=None,\n\t                      proposals=None,\n\t                      **kwargs):\n\t        \"\"\"\n\t        Args:\n\t            img (Tensor): of shape (N, C, H, W) encoding input images.\n\t                Typically these should be mean centered and std scaled.\n\t            img_metas (list[dict]): list of image info dict where each dict\n\t                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n\t                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n", "                For details on the values of these keys see\n\t                `mmdet/datasets/pipelines/formatting.py:Collect`.\n\t            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\n\t                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n\t            gt_labels (list[Tensor]): class indices corresponding to each box\n\t            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n\t                boxes can be ignored when computing the loss.\n\t            gt_masks (None | Tensor) : true segmentation masks for each box\n\t                used if the architecture supports a segmentation task.\n\t            proposals : override rpn proposals with custom proposals. Use when\n", "                `with_rpn` is False.\n\t        Returns:\n\t            dict[str, Tensor]: a dictionary of loss components\n\t        \"\"\"\n\t        x = self.extract_feat(img)\n\t        losses = dict()\n\t        # RPN forward and loss\n\t        if self.with_rpn:\n\t            proposal_cfg = self.train_cfg.get('rpn_proposal',\n\t                                              self.test_cfg.rpn)\n", "            rpn_losses, proposal_list = self.rpn_head.forward_train(\n\t                x,\n\t                img_metas,\n\t                gt_bboxes,\n\t                gt_labels=None,\n\t                gt_bboxes_ignore=gt_bboxes_ignore,\n\t                proposal_cfg=proposal_cfg,\n\t                **kwargs)\n\t            losses.update(rpn_losses)\n\t        else:\n", "            proposal_list = proposals\n\t        roi_losses = self.roi_head.forward_train(x, img_metas, proposal_list,\n\t                                                 gt_bboxes, gt_labels,\n\t                                                 gt_bboxes_ignore, gt_masks,\n\t                                                 **kwargs)\n\t        losses.update(roi_losses)\n\t        return losses\n\t    async def async_simple_test(self,\n\t                                img,\n\t                                img_meta,\n", "                                proposals=None,\n\t                                rescale=False):\n\t        \"\"\"Async test without augmentation.\"\"\"\n\t        assert self.with_bbox, 'Bbox head must be implemented.'\n\t        x = self.extract_feat(img)\n\t        if proposals is None:\n\t            proposal_list = await self.rpn_head.async_simple_test_rpn(\n\t                x, img_meta)\n\t        else:\n\t            proposal_list = proposals\n", "        return await self.roi_head.async_simple_test(\n\t            x, proposal_list, img_meta, rescale=rescale)\n\t    def simple_test(self, img, img_metas, proposals=None, rescale=False):\n\t        \"\"\"Test without augmentation.\"\"\"\n\t        assert self.with_bbox, 'Bbox head must be implemented.'\n\t        x = self.extract_feat(img)\n\t        if proposals is None:\n\t            proposal_list = self.rpn_head.simple_test_rpn(x, img_metas)\n\t        else:\n\t            proposal_list = proposals\n", "        return self.roi_head.simple_test(\n\t            x, proposal_list, img_metas, rescale=rescale)\n\t    def aug_test(self, imgs, img_metas, rescale=False):\n\t        \"\"\"Test with augmentations.\n\t        If rescale is False, then returned bboxes and masks will fit the scale\n\t        of imgs[0].\n\t        \"\"\"\n\t        x = self.extract_feats(imgs)\n\t        proposal_list = self.rpn_head.aug_test_rpn(x, img_metas)\n\t        return self.roi_head.aug_test(\n", "            x, proposal_list, img_metas, rescale=rescale)\n\t    def onnx_export(self, img, img_metas):\n\t        img_shape = torch._shape_as_tensor(img)[2:]\n\t        img_metas[0]['img_shape_for_onnx'] = img_shape\n\t        x = self.extract_feat(img)\n\t        proposals = self.rpn_head.onnx_export(x, img_metas)\n\t        if hasattr(self.roi_head, 'onnx_export'):\n\t            return self.roi_head.onnx_export(x, proposals, img_metas)\n\t        else:\n\t            raise NotImplementedError(\n", "                f'{self.__class__.__name__} can not '\n\t                f'be exported to ONNX. Please refer to the '\n\t                f'list of supported models,'\n\t                f'https://mmdetection.readthedocs.io/en/latest/tutorials/pytorch2onnx.html#list-of-supported-models-exportable-to-onnx'  # noqa E501\n\t            )\n"]}
{"filename": "patch/mmdet/core/export/onnx_helper.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport os\n\tfrom functools import reduce\n\timport torch\n\tdef dynamic_clip_for_onnx(x1, y1, x2, y2, max_shape):\n\t    \"\"\"Clip boxes dynamically for onnx.\n\t    Since torch.clamp cannot have dynamic `min` and `max`, we scale the\n\t      boxes by 1/max_shape and clamp in the range [0, 1].\n\t    Args:\n\t        x1 (Tensor): The x1 for bounding boxes.\n", "        y1 (Tensor): The y1 for bounding boxes.\n\t        x2 (Tensor): The x2 for bounding boxes.\n\t        y2 (Tensor): The y2 for bounding boxes.\n\t        max_shape (Tensor or torch.Size): The (H,W) of original image.\n\t    Returns:\n\t        tuple(Tensor): The clipped x1, y1, x2, y2.\n\t    \"\"\"\n\t    assert isinstance(\n\t        max_shape,\n\t        torch.Tensor), '`max_shape` should be tensor of (h,w) for onnx'\n", "    # scale by 1/max_shape\n\t    x1 = x1 / max_shape[1]\n\t    y1 = y1 / max_shape[0]\n\t    x2 = x2 / max_shape[1]\n\t    y2 = y2 / max_shape[0]\n\t    # clamp [0, 1]\n\t    x1 = torch.clamp(x1, 0, 1)\n\t    y1 = torch.clamp(y1, 0, 1)\n\t    x2 = torch.clamp(x2, 0, 1)\n\t    y2 = torch.clamp(y2, 0, 1)\n", "    # scale back\n\t    x1 = x1 * max_shape[1]\n\t    y1 = y1 * max_shape[0]\n\t    x2 = x2 * max_shape[1]\n\t    y2 = y2 * max_shape[0]\n\t    return x1, y1, x2, y2\n\tdef get_k_for_topk(k, size):\n\t    \"\"\"Get k of TopK for onnx exporting.\n\t    The K of TopK in TensorRT should not be a Tensor, while in ONNX Runtime\n\t      it could be a Tensor.Due to dynamic shape feature, we have to decide\n", "      whether to do TopK and what K it should be while exporting to ONNX.\n\t    If returned K is less than zero, it means we do not have to do\n\t      TopK operation.\n\t    Args:\n\t        k (int or Tensor): The set k value for nms from config file.\n\t        size (Tensor or torch.Size): The number of elements of \\\n\t            TopK's input tensor\n\t    Returns:\n\t        tuple: (int or Tensor): The final K for TopK.\n\t    \"\"\"\n", "    ret_k = -1\n\t    if k <= 0 or size <= 0:\n\t        return ret_k\n\t    if torch.onnx.is_in_onnx_export():\n\t        is_trt_backend = os.environ.get('ONNX_BACKEND') == 'MMCVTensorRT'\n\t        if is_trt_backend:\n\t            # TensorRT does not support dynamic K with TopK op\n\t            if 0 < k < size:\n\t                ret_k = k\n\t        else:\n", "            # Always keep topk op for dynamic input in onnx for ONNX Runtime\n\t            ret_k = torch.where(k < size, k, size)\n\t    elif k < size:\n\t        ret_k = k\n\t    else:\n\t        # ret_k is -1\n\t        pass\n\t    return ret_k\n\tdef add_dummy_nms_for_onnx(boxes,\n\t                           scores,\n", "                           max_output_boxes_per_class=1000,\n\t                           iou_threshold=0.5,\n\t                           score_threshold=0.05,\n\t                           pre_top_k=-1,\n\t                           after_top_k=-1,\n\t                           labels=None,\n\t                           idxs=None):\n\t    \"\"\"Create a dummy onnx::NonMaxSuppression op while exporting to ONNX.\n\t    This function helps exporting to onnx with batch and multiclass NMS op.\n\t    It only supports class-agnostic detection results. That is, the scores\n", "    is of shape (N, num_bboxes, num_classes) and the boxes is of shape\n\t    (N, num_boxes, 4).\n\t    Args:\n\t        boxes (Tensor): The bounding boxes of shape [N, num_boxes, 4]\n\t        scores (Tensor): The detection scores of shape\n\t            [N, num_boxes, num_classes]\n\t        max_output_boxes_per_class (int): Maximum number of output\n\t            boxes per class of nms. Defaults to 1000.\n\t        iou_threshold (float): IOU threshold of nms. Defaults to 0.5\n\t        score_threshold (float): score threshold of nms.\n", "            Defaults to 0.05.\n\t        pre_top_k (bool): Number of top K boxes to keep before nms.\n\t            Defaults to -1.\n\t        after_top_k (int): Number of top K boxes to keep after nms.\n\t            Defaults to -1.\n\t        labels (Tensor, optional): It not None, explicit labels would be used.\n\t            Otherwise, labels would be automatically generated using\n\t            num_classed. Defaults to None.\n\t    Returns:\n\t        tuple[Tensor, Tensor]: dets of shape [N, num_det, 5]\n", "            and class labels of shape [N, num_det].\n\t    \"\"\"\n\t    max_output_boxes_per_class = torch.LongTensor([max_output_boxes_per_class])\n\t    iou_threshold = torch.tensor([iou_threshold], dtype=torch.float32)\n\t    score_threshold = torch.tensor([score_threshold], dtype=torch.float32)\n\t    batch_size = scores.shape[0]\n\t    num_class = int(scores.shape[2])\n\t    nms_pre = torch.tensor(pre_top_k, device=scores.device, dtype=torch.long)\n\t    nms_pre = get_k_for_topk(nms_pre, boxes.shape[1])\n\t    if nms_pre > 0:\n", "        max_scores, _ = scores.max(-1)\n\t        _, topk_inds = max_scores.topk(nms_pre)\n\t        batch_inds = torch.arange(batch_size).view(-1, 1).expand_as(topk_inds).long()\n\t        # Avoid onnx2tensorrt issue in https://github.com/NVIDIA/TensorRT/issues/1134 # noqa: E501\n\t        transformed_inds = boxes.shape[1] * batch_inds + topk_inds\n\t        boxes = boxes.reshape(-1, 4)[transformed_inds, :].reshape(\n\t            batch_size, -1, 4)\n\t        scores = scores.reshape(-1, num_class)[transformed_inds, :].reshape(\n\t            batch_size, -1, num_class)\n\t        if labels is not None:\n", "            labels = labels.reshape(-1, 1)[transformed_inds].reshape(\n\t                batch_size, -1)\n\t    scores = scores.permute(0, 2, 1)\n\t    num_box = int(boxes.shape[1])\n\t    # turn off tracing to create a dummy output of nms\n\t    state = torch._C._get_tracing_state()\n\t    # dummy indices of nms's output\n\t    num_fake_det = 2\n\t    batch_inds = torch.randint(batch_size, (num_fake_det, 1))\n\t    cls_inds = torch.randint(num_class, (num_fake_det, 1))\n", "    box_inds = torch.randint(num_box, (num_fake_det, 1))\n\t    indices = torch.cat([batch_inds, cls_inds, box_inds], dim=1)\n\t    output = indices\n\t    setattr(DummyONNXNMSop, 'output', output)\n\t    # open tracing\n\t    torch._C._set_tracing_state(state)\n\t    # box shifting\n\t    boxes_for_nms = boxes\n\t    if idxs is not None:\n\t        # [b,1,1]\n", "        max_coordinate, _ = boxes.max(dim=1, keepdim=True)\n\t        max_coordinate, _ = max_coordinate.max(dim=2, keepdim=True)\n\t        # [b,N,1]\n\t        offsets = idxs.to(boxes) * (max_coordinate + torch.tensor(1).to(boxes))\n\t        boxes_for_nms = boxes + offsets.view(1, num_box, 1)\n\t    selected_indices = DummyONNXNMSop.apply(boxes_for_nms, scores,\n\t                                            max_output_boxes_per_class,\n\t                                            iou_threshold, score_threshold)\n\t    batch_inds, cls_inds = selected_indices[:, 0], selected_indices[:, 1]\n\t    box_inds = selected_indices[:, 2]\n", "    if labels is None:\n\t        labels = torch.arange(num_class, dtype=torch.long).to(scores.device)\n\t        labels = labels.view(1, num_class, 1).expand_as(scores)\n\t    scores = scores.reshape(-1, 1)\n\t    boxes = boxes.reshape(-1, num_box * 4).repeat(1, num_class).reshape(-1, 4)\n\t    pos_inds = (num_class * batch_inds + cls_inds) * num_box + box_inds\n\t    mask = scores.new_zeros(scores.shape)\n\t    # Avoid onnx2tensorrt issue in https://github.com/NVIDIA/TensorRT/issues/1134 # noqa: E501\n\t    # PyTorch style code: mask[batch_inds, box_inds] += 1\n\t    mask[pos_inds, :] += 1\n", "    scores = scores * mask\n\t    boxes = boxes * mask\n\t    scores_last_shapes = list(map(int, scores.shape))\n\t    scores_last_dims = reduce(lambda x, y: x * y, scores_last_shapes, 1)\n\t    scores = scores.reshape(-1, scores_last_dims // int(batch_size))\n\t    boxes_last_shapes = list(map(int, boxes.shape))\n\t    boxes_last_dims = reduce(lambda x, y: x * y, boxes_last_shapes, 1)\n\t    boxes = boxes.reshape(-1, boxes_last_dims // 4 // int(batch_size), 4)\n\t    labels_last_shapes = list(map(int, labels.shape))\n\t    labels_last_dims = reduce(lambda x, y: x * y, labels_last_shapes, 1)\n", "    labels = labels.reshape(-1, labels_last_dims // int(batch_size))\n\t    nms_after = torch.tensor(after_top_k, device=scores.device, dtype=torch.long)\n\t    nms_after = get_k_for_topk(nms_after, num_box * num_class)\n\t    if nms_after > 0:\n\t        _, topk_inds = scores.topk(nms_after)\n\t        if int(batch_size) == 1:\n\t            transformed_inds = topk_inds\n\t        else:\n\t            batch_inds = torch.arange(batch_size).view(-1, 1).expand_as(topk_inds)\n\t            # Avoid onnx2tensorrt issue in https://github.com/NVIDIA/TensorRT/issues/1134 # noqa: E501\n", "            transformed_inds = int(scores.shape[1]) * batch_inds + topk_inds\n\t        scores = scores.reshape(-1, 1)[transformed_inds, :]\n\t        scores_last_shapes = list(map(int, scores.shape))\n\t        scores_last_dims = reduce(lambda x, y: x * y, scores_last_shapes, 1)\n\t        scores = scores.reshape(-1, scores_last_dims // int(batch_size))\n\t        boxes = boxes.reshape(-1, 4)[transformed_inds, :]\n\t        boxes_last_shapes = list(map(int, boxes.shape))\n\t        boxes_last_dims = reduce(lambda x, y: x * y, boxes_last_shapes, 1)\n\t        boxes = boxes.reshape(-1, boxes_last_dims // 4 // int(batch_size), 4)\n\t        labels = labels.reshape(-1, 1)[transformed_inds, :]\n", "        labels_last_shapes = list(map(int, labels.shape))\n\t        labels_last_dims = reduce(lambda x, y: x * y, labels_last_shapes, 1)\n\t        labels = labels.reshape(-1, labels_last_dims // int(batch_size))\n\t    scores = scores.unsqueeze(2)\n\t    dets = torch.cat([boxes, scores], dim=2)\n\t    return dets, labels\n\tclass DummyONNXNMSop(torch.autograd.Function):\n\t    \"\"\"DummyONNXNMSop.\n\t    This class is only for creating onnx::NonMaxSuppression.\n\t    \"\"\"\n", "    @staticmethod\n\t    def forward(ctx, boxes, scores, max_output_boxes_per_class, iou_threshold,\n\t                score_threshold):\n\t        return DummyONNXNMSop.output\n\t    @staticmethod\n\t    def symbolic(g, boxes, scores, max_output_boxes_per_class, iou_threshold,\n\t                 score_threshold):\n\t        return g.op(\n\t            'NonMaxSuppression',\n\t            boxes,\n", "            scores,\n\t            max_output_boxes_per_class,\n\t            iou_threshold,\n\t            score_threshold,\n\t            outputs=1)\n"]}
{"filename": "patch/mmdet/core/export/pytorch2onnx.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\tfrom functools import partial\n\timport mmcv\n\timport numpy as np\n\timport torch\n\tfrom mmcv.runner import load_checkpoint\n\tdef generate_inputs_and_wrap_model(config_path,\n\t                                   checkpoint_path,\n\t                                   input_config,\n\t                                   cfg_options=None):\n", "    \"\"\"Prepare sample input and wrap model for ONNX export.\n\t    The ONNX export API only accept args, and all inputs should be\n\t    torch.Tensor or corresponding types (such as tuple of tensor).\n\t    So we should call this function before exporting. This function will:\n\t    1. generate corresponding inputs which are used to execute the model.\n\t    2. Wrap the model's forward function.\n\t    For example, the MMDet models' forward function has a parameter\n\t    ``return_loss:bool``. As we want to set it as False while export API\n\t    supports neither bool type or kwargs. So we have to replace the forward\n\t    method like ``model.forward = partial(model.forward, return_loss=False)``.\n", "    Args:\n\t        config_path (str): the OpenMMLab config for the model we want to\n\t            export to ONNX\n\t        checkpoint_path (str): Path to the corresponding checkpoint\n\t        input_config (dict): the exactly data in this dict depends on the\n\t            framework. For MMSeg, we can just declare the input shape,\n\t            and generate the dummy data accordingly. However, for MMDet,\n\t            we may pass the real img path, or the NMS will return None\n\t            as there is no legal bbox.\n\t    Returns:\n", "        tuple: (model, tensor_data) wrapped model which can be called by\n\t            ``model(*tensor_data)`` and a list of inputs which are used to\n\t            execute the model while exporting.\n\t    \"\"\"\n\t    model = build_model_from_cfg(\n\t        config_path, checkpoint_path, cfg_options=cfg_options)\n\t    one_img, one_meta = preprocess_example_input(input_config)\n\t    tensor_data = [one_img]\n\t    model.forward = partial(\n\t        model.forward, img_metas=[[one_meta]], return_loss=False)\n", "    # pytorch has some bug in pytorch1.3, we have to fix it\n\t    # by replacing these existing op\n\t    opset_version = 11\n\t    # put the import within the function thus it will not cause import error\n\t    # when not using this function\n\t    try:\n\t        from mmcv.onnx.symbolic import register_extra_symbolics\n\t    except ModuleNotFoundError:\n\t        raise NotImplementedError('please update mmcv to version>=v1.0.4')\n\t    register_extra_symbolics(opset_version)\n", "    return model, tensor_data\n\tdef build_model_from_cfg(config_path, checkpoint_path, cfg_options=None):\n\t    \"\"\"Build a model from config and load the given checkpoint.\n\t    Args:\n\t        config_path (str): the OpenMMLab config for the model we want to\n\t            export to ONNX\n\t        checkpoint_path (str): Path to the corresponding checkpoint\n\t    Returns:\n\t        torch.nn.Module: the built model\n\t    \"\"\"\n", "    from mmdet.models import build_detector\n\t    cfg = mmcv.Config.fromfile(config_path)\n\t    if cfg_options is not None:\n\t        cfg.merge_from_dict(cfg_options)\n\t    # set cudnn_benchmark\n\t    if cfg.get('cudnn_benchmark', False):\n\t        torch.backends.cudnn.benchmark = True\n\t    cfg.model.pretrained = None\n\t    cfg.data.test.test_mode = True\n\t    # build the model\n", "    cfg.model.train_cfg = None\n\t    model = build_detector(cfg.model, test_cfg=cfg.get('test_cfg'))\n\t    checkpoint = load_checkpoint(model, checkpoint_path, map_location='cpu')\n\t    if 'CLASSES' in checkpoint.get('meta', {}):\n\t        model.CLASSES = checkpoint['meta']['CLASSES']\n\t    else:\n\t        from mmdet.datasets import DATASETS\n\t        dataset = DATASETS.get(cfg.data.test['type'])\n\t        assert (dataset is not None)\n\t        model.CLASSES = dataset.CLASSES\n", "    model.cpu().eval()\n\t    return model\n\tdef preprocess_example_input(input_config):\n\t    \"\"\"Prepare an example input image for ``generate_inputs_and_wrap_model``.\n\t    Args:\n\t        input_config (dict): customized config describing the example input.\n\t    Returns:\n\t        tuple: (one_img, one_meta), tensor of the example input image and \\\n\t            meta information for the example input image.\n\t    Examples:\n", "        >>> from mmdet.core.export import preprocess_example_input\n\t        >>> input_config = {\n\t        >>>         'input_shape': (1,3,224,224),\n\t        >>>         'input_path': 'demo/demo.jpg',\n\t        >>>         'normalize_cfg': {\n\t        >>>             'mean': (123.675, 116.28, 103.53),\n\t        >>>             'std': (58.395, 57.12, 57.375)\n\t        >>>             }\n\t        >>>         }\n\t        >>> one_img, one_meta = preprocess_example_input(input_config)\n", "        >>> print(one_img.shape)\n\t        torch.Size([1, 3, 224, 224])\n\t        >>> print(one_meta)\n\t        {'img_shape': (224, 224, 3),\n\t        'ori_shape': (224, 224, 3),\n\t        'pad_shape': (224, 224, 3),\n\t        'filename': '<demo>.png',\n\t        'scale_factor': 1.0,\n\t        'flip': False}\n\t    \"\"\"\n", "    input_path = input_config['input_path']\n\t    input_shape = input_config['input_shape']\n\t    one_img = mmcv.imread(input_path)\n\t    one_img = mmcv.imresize(one_img, input_shape[2:][::-1])\n\t    show_img = one_img.copy()\n\t    if 'normalize_cfg' in input_config.keys():\n\t        normalize_cfg = input_config['normalize_cfg']\n\t        mean = np.array(normalize_cfg['mean'], dtype=np.float32)\n\t        std = np.array(normalize_cfg['std'], dtype=np.float32)\n\t        to_rgb = normalize_cfg.get('to_rgb', True)\n", "        one_img = mmcv.imnormalize(one_img, mean, std, to_rgb=to_rgb)\n\t    one_img = one_img.transpose(2, 0, 1)\n\t    one_img = torch.from_numpy(one_img).unsqueeze(0).float().requires_grad_(\n\t        True)\n\t    (_, C, H, W) = input_shape\n\t    one_meta = {\n\t        'img_shape': (H, W, C),\n\t        'ori_shape': (H, W, C),\n\t        'pad_shape': (H, W, C),\n\t        'filename': '<demo>.png',\n", "        'scale_factor': np.ones(4, dtype=np.float32).tolist(),\n\t        'flip': False,\n\t        'show_img': torch.as_tensor(show_img),\n\t        'flip_direction': None\n\t    }\n\t    return one_img, one_meta\n"]}
{"filename": "patch/mmdet/core/export/model_wrappers.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport os.path as osp\n\timport warnings\n\timport numpy as np\n\timport torch\n\tfrom mmdet.core import bbox2result\n\tfrom mmdet.models import BaseDetector\n\timport onnx\n\timport copy\n\tclass DeployBaseDetector(BaseDetector):\n", "    \"\"\"DeployBaseDetector.\"\"\"\n\t    def __init__(self, class_names, device_id):\n\t        super(DeployBaseDetector, self).__init__()\n\t        self.CLASSES = class_names\n\t        self.device_id = device_id\n\t    def simple_test(self, img, img_metas, **kwargs):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def aug_test(self, imgs, img_metas, **kwargs):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def extract_feat(self, imgs):\n", "        raise NotImplementedError('This method is not implemented.')\n\t    def forward_train(self, imgs, img_metas, **kwargs):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def val_step(self, data, optimizer):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def train_step(self, data, optimizer):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def forward_test(self, *, img, img_metas, **kwargs):\n\t        raise NotImplementedError('This method is not implemented.')\n\t    def async_simple_test(self, img, img_metas, **kwargs):\n", "        raise NotImplementedError('This method is not implemented.')\n\t    def forward(self, img, img_metas, return_loss=True, **kwargs):\n\t        outputs = self.forward_test(img, img_metas, **kwargs)\n\t        batch_dets, batch_labels = outputs[:2]\n\t        batch_masks = outputs[2] if len(outputs) >= 3 else None\n\t        batch_size = img[0].shape[0]\n\t        img_metas = img_metas[0]\n\t        results = []\n\t        rescale = kwargs.get('rescale', True)\n\t        for i in range(batch_size):\n", "            dets, labels = batch_dets[i], batch_labels[i]\n\t            det_mask = np.sum(dets, axis=-1) >= 1e-3\n\t            dets = dets[det_mask]\n\t            labels = labels[det_mask]\n\t            if rescale:\n\t                scale_factor = img_metas[i]['scale_factor']\n\t                if isinstance(scale_factor, (list, tuple, np.ndarray)):\n\t                    assert len(scale_factor) == 4\n\t                    scale_factor = np.array(scale_factor)[None, :]  # [1,4]\n\t                dets[:, :4] /= scale_factor\n", "            if 'border' in img_metas[i]:\n\t                # offset pixel of the top-left corners between original image\n\t                # and padded/enlarged image, 'border' is used when exporting\n\t                # CornerNet and CentripetalNet to onnx\n\t                x_off = img_metas[i]['border'][2]\n\t                y_off = img_metas[i]['border'][0]\n\t                dets[:, [0, 2]] -= x_off\n\t                dets[:, [1, 3]] -= y_off\n\t                dets[:, :4] *= (dets[:, :4] > 0).astype(dets.dtype)\n\t            dets_results = bbox2result(dets, labels, len(self.CLASSES))\n", "            if batch_masks is not None:\n\t                masks = batch_masks[i]\n\t                masks = masks[det_mask]\n\t                img_h, img_w = img_metas[i]['img_shape'][:2]\n\t                ori_h, ori_w = img_metas[i]['ori_shape'][:2]\n\t                masks = masks[:, :img_h, :img_w]\n\t                if rescale:\n\t                    masks = masks.astype(np.float32)\n\t                    masks = torch.from_numpy(masks)\n\t                    masks = torch.nn.functional.interpolate(\n", "                        masks.unsqueeze(0), size=(ori_h, ori_w))\n\t                    masks = masks.squeeze(0).detach().numpy()\n\t                if masks.dtype != bool:\n\t                    masks = masks >= 0.5\n\t                segms_results = [[] for _ in range(len(self.CLASSES))]\n\t                for j in range(len(dets)):\n\t                    segms_results[labels[j]].append(masks[j])\n\t                results.append((dets_results, segms_results))\n\t            else:\n\t                results.append(dets_results)\n", "        return results\n\tclass ONNXRuntimeDetector(DeployBaseDetector):\n\t    \"\"\"Wrapper for detector's inference with ONNXRuntime.\"\"\"\n\t    def __init__(self, onnx_file, class_names, device_id):\n\t        # import pickle\n\t        # with open('class_names.pickle', 'wb') as f:\n\t        #     pickle.dump(class_names, f)\n\t        super(ONNXRuntimeDetector, self).__init__(class_names, device_id)\n\t        import onnxruntime as ort\n\t        # get the custom op path\n", "        ort_custom_op_path = ''\n\t        try:\n\t            from mmcv.ops import get_onnxruntime_op_path\n\t            ort_custom_op_path = get_onnxruntime_op_path()\n\t        except (ImportError, ModuleNotFoundError):\n\t            warnings.warn('If input model has custom op from mmcv, \\\n\t                you may have to build mmcv with ONNXRuntime from source.')\n\t        session_options = ort.SessionOptions()\n\t        # register custom op for onnxruntime\n\t        if osp.exists(ort_custom_op_path):\n", "            session_options.register_custom_ops_library(ort_custom_op_path)\n\t        onnx_model = onnx.load(onnx_file)\n\t        ori_output = copy.deepcopy(onnx_model.graph.output)\n\t        # 输出模型每层的输出\n\t        for node in onnx_model.graph.node:\n\t            if not (node.op_type in ['NonMaxSuppression', 'Concat', 'TopK', 'Sigmoid', 'Mul'] or \\\n\t                node.name in ['Reshape_1686', 'onnx::Mul_2265'] or node.output[0] in ['onnx::Mul_2265', \\\n\t                'onnx::Reshape_2348', 'onnx::Gather_2347', 'onnx::Gather_2337']):\n\t                continue\n\t            for output in node.output:\n", "                if output not in ori_output:\n\t                    onnx_model.graph.output.extend([onnx.ValueInfoProto(name=output)])\n\t        sess = ort.InferenceSession(onnx_model.SerializeToString(), session_options)\n\t        providers = ['CPUExecutionProvider']\n\t        options = [{}]\n\t        is_cuda_available = ort.get_device() == 'GPU'\n\t        if is_cuda_available:\n\t            providers.insert(0, 'CUDAExecutionProvider')\n\t            options.insert(0, {'device_id': device_id})\n\t        sess.set_providers(providers, options)\n", "        self.sess = sess\n\t        self.io_binding = sess.io_binding()\n\t        self.output_names = [_.name for _ in sess.get_outputs()]\n\t        print('self.output_names', self.output_names)\n\t        self.is_cuda_available = is_cuda_available\n\t    def forward_test(self, imgs, img_metas, **kwargs):\n\t        input_data = imgs[0]\n\t        # set io binding for inputs/outputs\n\t        device_type = 'cuda' if self.is_cuda_available else 'cpu'\n\t        if not self.is_cuda_available:\n", "            input_data = input_data.cpu()\n\t        self.io_binding.bind_input(\n\t            name='input',\n\t            device_type=device_type,\n\t            device_id=self.device_id,\n\t            element_type=np.float32,\n\t            shape=input_data.shape,\n\t            buffer_ptr=input_data.data_ptr())\n\t        for name in self.output_names:\n\t            self.io_binding.bind_output(name)\n", "        # run session to get outputs\n\t        self.sess.run_with_iobinding(self.io_binding)\n\t        ort_outputs = self.io_binding.copy_outputs_to_cpu()\n\t        for idx, ele in enumerate(ort_outputs):\n\t            if ele.dtype == np.float64:\n\t                ele = ele.astype(np.float32)\n\t                ort_outputs[idx] = ele\n\t        # torch.save(dict(zip(self.output_names, ort_outputs)), 'ort_output.pkl')\n\t        # for k, v in dict(zip(self.output_names, ort_outputs)).items():\n\t        #     print(k)\n", "        #     print(v.shape)\n\t        #     print(v)\n\t        #     print('=' * 50)\n\t        # exit(0)\n\t        return ort_outputs\n\tclass TensorRTDetector(DeployBaseDetector):\n\t    \"\"\"Wrapper for detector's inference with TensorRT.\"\"\"\n\t    def __init__(self, engine_file, class_names, device_id, output_names=None):\n\t        super(TensorRTDetector, self).__init__(class_names, device_id)\n\t        warnings.warn('`output_names` is deprecated and will be removed in '\n", "                      'future releases.')\n\t        from mmcv.tensorrt import TRTWraper, load_tensorrt_plugin\n\t        try:\n\t            load_tensorrt_plugin()\n\t        except (ImportError, ModuleNotFoundError):\n\t            warnings.warn('If input model has custom op from mmcv, \\\n\t                you may have to build mmcv with TensorRT from source.')\n\t        output_names = ['dets', 'labels']\n\t        model = TRTWraper(engine_file, ['input'], output_names)\n\t        with_masks = False\n", "        # if TensorRT has totally 4 inputs/outputs, then\n\t        # the detector should have `mask` output.\n\t        if len(model.engine) == 4:\n\t            model.output_names = output_names + ['masks']\n\t            with_masks = True\n\t        self.model = model\n\t        self.with_masks = with_masks\n\t    def forward_test(self, imgs, img_metas, **kwargs):\n\t        input_data = imgs[0].contiguous()\n\t        with torch.cuda.device(self.device_id), torch.no_grad():\n", "            outputs = self.model({'input': input_data})\n\t            outputs = [outputs[name] for name in self.model.output_names]\n\t        outputs = [out.detach().cpu().numpy() for out in outputs]\n\t        return outputs\n"]}
{"filename": "patch/mmdet/core/visualization/image.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport sys\n\timport cv2\n\timport matplotlib.pyplot as plt\n\timport mmcv\n\timport numpy as np\n\timport pycocotools.mask as mask_util\n\tfrom matplotlib.collections import PatchCollection\n\tfrom matplotlib.patches import Polygon\n\tfrom mmdet.core.evaluation.panoptic_utils import INSTANCE_OFFSET\n", "from ..mask.structures import bitmap_to_polygon\n\tfrom ..utils import mask2ndarray\n\tfrom .palette import get_palette, palette_val\n\t__all__ = [\n\t    'color_val_matplotlib', 'draw_masks', 'draw_bboxes', 'draw_labels',\n\t    'imshow_det_bboxes', 'imshow_gt_det_bboxes'\n\t]\n\tEPS = 1e-2\n\tdef color_val_matplotlib(color):\n\t    \"\"\"Convert various input in BGR order to normalized RGB matplotlib color\n", "    tuples.\n\t    Args:\n\t        color (:obj`Color` | str | tuple | int | ndarray): Color inputs.\n\t    Returns:\n\t        tuple[float]: A tuple of 3 normalized floats indicating RGB channels.\n\t    \"\"\"\n\t    color = mmcv.color_val(color)\n\t    color = [color / 255 for color in color[::-1]]\n\t    return tuple(color)\n\tdef _get_adaptive_scales(areas, min_area=800, max_area=30000):\n", "    \"\"\"Get adaptive scales according to areas.\n\t    The scale range is [0.5, 1.0]. When the area is less than\n\t    ``'min_area'``, the scale is 0.5 while the area is larger than\n\t    ``'max_area'``, the scale is 1.0.\n\t    Args:\n\t        areas (ndarray): The areas of bboxes or masks with the\n\t            shape of (n, ).\n\t        min_area (int): Lower bound areas for adaptive scales.\n\t            Default: 800.\n\t        max_area (int): Upper bound areas for adaptive scales.\n", "            Default: 30000.\n\t    Returns:\n\t        ndarray: The adaotive scales with the shape of (n, ).\n\t    \"\"\"\n\t    scales = 0.5 + (areas - min_area) / (max_area - min_area)\n\t    scales = np.clip(scales, 0.5, 1.0)\n\t    return scales\n\tdef _get_bias_color(base, max_dist=30):\n\t    \"\"\"Get different colors for each masks.\n\t    Get different colors for each masks by adding a bias\n", "    color to the base category color.\n\t    Args:\n\t        base (ndarray): The base category color with the shape\n\t            of (3, ).\n\t        max_dist (int): The max distance of bias. Default: 30.\n\t    Returns:\n\t        ndarray: The new color for a mask with the shape of (3, ).\n\t    \"\"\"\n\t    new_color = base + np.random.randint(\n\t        low=-max_dist, high=max_dist + 1, size=3)\n", "    return np.clip(new_color, 0, 255, new_color)\n\tdef draw_bboxes(ax, bboxes, color='g', alpha=0.8, thickness=2):\n\t    \"\"\"Draw bounding boxes on the axes.\n\t    Args:\n\t        ax (matplotlib.Axes): The input axes.\n\t        bboxes (ndarray): The input bounding boxes with the shape\n\t            of (n, 4).\n\t        color (list[tuple] | matplotlib.color): the colors for each\n\t            bounding boxes.\n\t        alpha (float): Transparency of bounding boxes. Default: 0.8.\n", "        thickness (int): Thickness of lines. Default: 2.\n\t    Returns:\n\t        matplotlib.Axes: The result axes.\n\t    \"\"\"\n\t    polygons = []\n\t    for i, bbox in enumerate(bboxes):\n\t        bbox_int = bbox.astype(np.int32)\n\t        poly = [[bbox_int[0], bbox_int[1]], [bbox_int[0], bbox_int[3]],\n\t                [bbox_int[2], bbox_int[3]], [bbox_int[2], bbox_int[1]]]\n\t        np_poly = np.array(poly).reshape((4, 2))\n", "        polygons.append(Polygon(np_poly))\n\t    p = PatchCollection(\n\t        polygons,\n\t        facecolor='none',\n\t        edgecolors=color,\n\t        linewidths=thickness,\n\t        alpha=alpha)\n\t    ax.add_collection(p)\n\t    return ax\n\tdef draw_labels(ax,\n", "                labels,\n\t                positions,\n\t                scores=None,\n\t                class_names=None,\n\t                color='w',\n\t                font_size=8,\n\t                scales=None,\n\t                horizontal_alignment='left'):\n\t    \"\"\"Draw labels on the axes.\n\t    Args:\n", "        ax (matplotlib.Axes): The input axes.\n\t        labels (ndarray): The labels with the shape of (n, ).\n\t        positions (ndarray): The positions to draw each labels.\n\t        scores (ndarray): The scores for each labels.\n\t        class_names (list[str]): The class names.\n\t        color (list[tuple] | matplotlib.color): The colors for labels.\n\t        font_size (int): Font size of texts. Default: 8.\n\t        scales (list[float]): Scales of texts. Default: None.\n\t        horizontal_alignment (str): The horizontal alignment method of\n\t            texts. Default: 'left'.\n", "    Returns:\n\t        matplotlib.Axes: The result axes.\n\t    \"\"\"\n\t    for i, (pos, label) in enumerate(zip(positions, labels)):\n\t        label_text = class_names[\n\t            label] if class_names is not None else f'class {label}'\n\t        if scores is not None:\n\t            label_text += f'|{scores[i]:.02f}'\n\t        text_color = color[i] if isinstance(color, list) else color\n\t        font_size_mask = font_size if scales is None else font_size * scales[i]\n", "        ax.text(\n\t            pos[0],\n\t            pos[1],\n\t            f'{label_text}',\n\t            bbox={\n\t                'facecolor': 'black',\n\t                'alpha': 0.8,\n\t                'pad': 0.7,\n\t                'edgecolor': 'none'\n\t            },\n", "            color=text_color,\n\t            fontsize=font_size_mask,\n\t            verticalalignment='top',\n\t            horizontalalignment=horizontal_alignment)\n\t    return ax\n\tdef draw_masks(ax, img, masks, color=None, with_edge=True, alpha=0.8):\n\t    \"\"\"Draw masks on the image and their edges on the axes.\n\t    Args:\n\t        ax (matplotlib.Axes): The input axes.\n\t        img (ndarray): The image with the shape of (3, h, w).\n", "        masks (ndarray): The masks with the shape of (n, h, w).\n\t        color (ndarray): The colors for each masks with the shape\n\t            of (n, 3).\n\t        with_edge (bool): Whether to draw edges. Default: True.\n\t        alpha (float): Transparency of bounding boxes. Default: 0.8.\n\t    Returns:\n\t        matplotlib.Axes: The result axes.\n\t        ndarray: The result image.\n\t    \"\"\"\n\t    taken_colors = set([0, 0, 0])\n", "    if color is None:\n\t        random_colors = np.random.randint(0, 255, (masks.size(0), 3))\n\t        color = [tuple(c) for c in random_colors]\n\t        color = np.array(color, dtype=np.uint8)\n\t    polygons = []\n\t    for i, mask in enumerate(masks):\n\t        if with_edge:\n\t            contours, _ = bitmap_to_polygon(mask)\n\t            polygons += [Polygon(c) for c in contours]\n\t        color_mask = color[i]\n", "        while tuple(color_mask) in taken_colors:\n\t            color_mask = _get_bias_color(color_mask)\n\t        taken_colors.add(tuple(color_mask))\n\t        mask = mask.astype(bool)\n\t        img[mask] = img[mask] * (1 - alpha) + color_mask * alpha\n\t    p = PatchCollection(\n\t        polygons, facecolor='none', edgecolors='w', linewidths=1, alpha=0.8)\n\t    ax.add_collection(p)\n\t    return ax, img\n\tdef imshow_det_bboxes(img,\n", "                      bboxes=None,\n\t                      labels=None,\n\t                      segms=None,\n\t                      class_names=None,\n\t                      score_thr=0,\n\t                      bbox_color='green',\n\t                      text_color='green',\n\t                      mask_color=None,\n\t                      thickness=2,\n\t                      font_size=8,\n", "                      win_name='',\n\t                      show=True,\n\t                      wait_time=0,\n\t                      out_file=None):\n\t    \"\"\"Draw bboxes and class labels (with scores) on an image.\n\t    Args:\n\t        img (str | ndarray): The image to be displayed.\n\t        bboxes (ndarray): Bounding boxes (with scores), shaped (n, 4) or\n\t            (n, 5).\n\t        labels (ndarray): Labels of bboxes.\n", "        segms (ndarray | None): Masks, shaped (n,h,w) or None.\n\t        class_names (list[str]): Names of each classes.\n\t        score_thr (float): Minimum score of bboxes to be shown. Default: 0.\n\t        bbox_color (list[tuple] | tuple | str | None): Colors of bbox lines.\n\t           If a single color is given, it will be applied to all classes.\n\t           The tuple of color should be in RGB order. Default: 'green'.\n\t        text_color (list[tuple] | tuple | str | None): Colors of texts.\n\t           If a single color is given, it will be applied to all classes.\n\t           The tuple of color should be in RGB order. Default: 'green'.\n\t        mask_color (list[tuple] | tuple | str | None, optional): Colors of\n", "           masks. If a single color is given, it will be applied to all\n\t           classes. The tuple of color should be in RGB order.\n\t           Default: None.\n\t        thickness (int): Thickness of lines. Default: 2.\n\t        font_size (int): Font size of texts. Default: 13.\n\t        show (bool): Whether to show the image. Default: True.\n\t        win_name (str): The window name. Default: ''.\n\t        wait_time (float): Value of waitKey param. Default: 0.\n\t        out_file (str, optional): The filename to write the image.\n\t            Default: None.\n", "    Returns:\n\t        ndarray: The image with bboxes drawn on it.\n\t    \"\"\"\n\t    assert bboxes is None or bboxes.ndim == 2, \\\n\t        f' bboxes ndim should be 2, but its ndim is {bboxes.ndim}.'\n\t    assert labels.ndim == 1, \\\n\t        f' labels ndim should be 1, but its ndim is {labels.ndim}.'\n\t    assert bboxes is None or bboxes.shape[1] == 4 or bboxes.shape[1] == 5, \\\n\t        f' bboxes.shape[1] should be 4 or 5, but its {bboxes.shape[1]}.'\n\t    assert bboxes is None or bboxes.shape[0] <= labels.shape[0], \\\n", "        'labels.shape[0] should not be less than bboxes.shape[0].'\n\t    assert segms is None or segms.shape[0] == labels.shape[0], \\\n\t        'segms.shape[0] and labels.shape[0] should have the same length.'\n\t    assert segms is not None or bboxes is not None, \\\n\t        'segms and bboxes should not be None at the same time.'\n\t    img = mmcv.imread(img).astype(np.uint8)\n\t    if score_thr > 0:\n\t        assert bboxes is not None and bboxes.shape[1] == 5\n\t        scores = bboxes[:, -1]\n\t        inds = scores > score_thr\n", "        bboxes = bboxes[inds, :]\n\t        labels = labels[inds]\n\t        if segms is not None:\n\t            segms = segms[inds, ...]\n\t    img = mmcv.bgr2rgb(img)\n\t    width, height = img.shape[1], img.shape[0]\n\t    img = np.ascontiguousarray(img)\n\t    fig = plt.figure(win_name, frameon=False)\n\t    plt.title(win_name)\n\t    canvas = fig.canvas\n", "    dpi = fig.get_dpi()\n\t    # add a small EPS to avoid precision lost due to matplotlib's truncation\n\t    # (https://github.com/matplotlib/matplotlib/issues/15363)\n\t    fig.set_size_inches((width + EPS) / dpi, (height + EPS) / dpi)\n\t    # remove white edges by set subplot margin\n\t    plt.subplots_adjust(left=0, right=1, bottom=0, top=1)\n\t    ax = plt.gca()\n\t    ax.axis('off')\n\t    max_label = int(max(labels) if len(labels) > 0 else 0)\n\t    text_palette = palette_val(get_palette(text_color, max_label + 1))\n", "    text_colors = [text_palette[label] for label in labels]\n\t    num_bboxes = 0\n\t    if bboxes is not None:\n\t        num_bboxes = bboxes.shape[0]\n\t        bbox_palette = palette_val(get_palette(bbox_color, max_label + 1))\n\t        colors = [bbox_palette[label] for label in labels[:num_bboxes]]\n\t        draw_bboxes(ax, bboxes, colors, alpha=0.8, thickness=thickness)\n\t        horizontal_alignment = 'left'\n\t        positions = bboxes[:, :2].astype(np.int32) + thickness\n\t        areas = (bboxes[:, 3] - bboxes[:, 1]) * (bboxes[:, 2] - bboxes[:, 0])\n", "        scales = _get_adaptive_scales(areas)\n\t        scores = bboxes[:, 4] if bboxes.shape[1] == 5 else None\n\t        draw_labels(\n\t            ax,\n\t            labels[:num_bboxes],\n\t            positions,\n\t            scores=scores,\n\t            class_names=class_names,\n\t            color=text_colors,\n\t            font_size=font_size,\n", "            scales=scales,\n\t            horizontal_alignment=horizontal_alignment)\n\t    if segms is not None:\n\t        mask_palette = get_palette(mask_color, max_label + 1)\n\t        colors = [mask_palette[label] for label in labels]\n\t        colors = np.array(colors, dtype=np.uint8)\n\t        draw_masks(ax, img, segms, colors, with_edge=True)\n\t        if num_bboxes < segms.shape[0]:\n\t            segms = segms[num_bboxes:]\n\t            horizontal_alignment = 'center'\n", "            areas = []\n\t            positions = []\n\t            for mask in segms:\n\t                _, _, stats, centroids = cv2.connectedComponentsWithStats(\n\t                    mask.astype(np.uint8), connectivity=8)\n\t                largest_id = np.argmax(stats[1:, -1]) + 1\n\t                positions.append(centroids[largest_id])\n\t                areas.append(stats[largest_id, -1])\n\t            areas = np.stack(areas, axis=0)\n\t            scales = _get_adaptive_scales(areas)\n", "            draw_labels(\n\t                ax,\n\t                labels[num_bboxes:],\n\t                positions,\n\t                class_names=class_names,\n\t                color=text_colors,\n\t                font_size=font_size,\n\t                scales=scales,\n\t                horizontal_alignment=horizontal_alignment)\n\t    plt.imshow(img)\n", "    stream, _ = canvas.print_to_buffer()\n\t    buffer = np.frombuffer(stream, dtype='uint8')\n\t    if sys.platform == 'darwin':\n\t        width, height = canvas.get_width_height(physical=True)\n\t    img_rgba = buffer.reshape(height, width, 4)\n\t    rgb, alpha = np.split(img_rgba, [3], axis=2)\n\t    img = rgb.astype('uint8')\n\t    img = mmcv.rgb2bgr(img)\n\t    if show:\n\t        # We do not use cv2 for display because in some cases, opencv will\n", "        # conflict with Qt, it will output a warning: Current thread\n\t        # is not the object's thread. You can refer to\n\t        # https://github.com/opencv/opencv-python/issues/46 for details\n\t        if wait_time == 0:\n\t            plt.show()\n\t        else:\n\t            plt.show(block=False)\n\t            plt.pause(wait_time)\n\t    if out_file is not None:\n\t        mmcv.imwrite(img, out_file)\n", "    plt.close()\n\t    return img\n\tdef imshow_gt_det_bboxes(img,\n\t                         annotation,\n\t                         result,\n\t                         class_names=None,\n\t                         score_thr=0,\n\t                         gt_bbox_color=(61, 102, 255),\n\t                         gt_text_color=(200, 200, 200),\n\t                         gt_mask_color=(61, 102, 255),\n", "                         det_bbox_color=(241, 101, 72),\n\t                         det_text_color=(200, 200, 200),\n\t                         det_mask_color=(241, 101, 72),\n\t                         thickness=2,\n\t                         font_size=13,\n\t                         win_name='',\n\t                         show=True,\n\t                         wait_time=0,\n\t                         out_file=None,\n\t                         overlay_gt_pred=True):\n", "    \"\"\"General visualization GT and result function.\n\t    Args:\n\t      img (str | ndarray): The image to be displayed.\n\t      annotation (dict): Ground truth annotations where contain keys of\n\t          'gt_bboxes' and 'gt_labels' or 'gt_masks'.\n\t      result (tuple[list] | list): The detection result, can be either\n\t          (bbox, segm) or just bbox.\n\t      class_names (list[str]): Names of each classes.\n\t      score_thr (float): Minimum score of bboxes to be shown. Default: 0.\n\t      gt_bbox_color (list[tuple] | tuple | str | None): Colors of bbox lines.\n", "          If a single color is given, it will be applied to all classes.\n\t          The tuple of color should be in RGB order. Default: (61, 102, 255).\n\t      gt_text_color (list[tuple] | tuple | str | None): Colors of texts.\n\t          If a single color is given, it will be applied to all classes.\n\t          The tuple of color should be in RGB order. Default: (200, 200, 200).\n\t      gt_mask_color (list[tuple] | tuple | str | None, optional): Colors of\n\t          masks. If a single color is given, it will be applied to all classes.\n\t          The tuple of color should be in RGB order. Default: (61, 102, 255).\n\t      det_bbox_color (list[tuple] | tuple | str | None):Colors of bbox lines.\n\t          If a single color is given, it will be applied to all classes.\n", "          The tuple of color should be in RGB order. Default: (241, 101, 72).\n\t      det_text_color (list[tuple] | tuple | str | None):Colors of texts.\n\t          If a single color is given, it will be applied to all classes.\n\t          The tuple of color should be in RGB order. Default: (200, 200, 200).\n\t      det_mask_color (list[tuple] | tuple | str | None, optional): Color of\n\t          masks. If a single color is given, it will be applied to all classes.\n\t          The tuple of color should be in RGB order. Default: (241, 101, 72).\n\t      thickness (int): Thickness of lines. Default: 2.\n\t      font_size (int): Font size of texts. Default: 13.\n\t      win_name (str): The window name. Default: ''.\n", "      show (bool): Whether to show the image. Default: True.\n\t      wait_time (float): Value of waitKey param. Default: 0.\n\t      out_file (str, optional): The filename to write the image.\n\t          Default: None.\n\t      overlay_gt_pred (bool): Whether to plot gts and predictions on the\n\t       same image. If False, predictions and gts will be plotted on two same\n\t       image which will be concatenated in vertical direction. The image\n\t       above is drawn with gt, and the image below is drawn with the\n\t       prediction result. Default: True.\n\t    Returns:\n", "        ndarray: The image with bboxes or masks drawn on it.\n\t    \"\"\"\n\t    assert 'gt_bboxes' in annotation\n\t    assert 'gt_labels' in annotation\n\t    assert isinstance(result, (tuple, list, dict)), 'Expected ' \\\n\t        f'tuple or list or dict, but get {type(result)}'\n\t    gt_bboxes = annotation['gt_bboxes']\n\t    gt_labels = annotation['gt_labels']\n\t    gt_masks = annotation.get('gt_masks', None)\n\t    if gt_masks is not None:\n", "        gt_masks = mask2ndarray(gt_masks)\n\t    gt_seg = annotation.get('gt_semantic_seg', None)\n\t    if gt_seg is not None:\n\t        pad_value = 255  # the padding value of gt_seg\n\t        sem_labels = np.unique(gt_seg)\n\t        all_labels = np.concatenate((gt_labels, sem_labels), axis=0)\n\t        all_labels, counts = np.unique(all_labels, return_counts=True)\n\t        stuff_labels = all_labels[np.logical_and(counts < 2,\n\t                                                 all_labels != pad_value)]\n\t        stuff_masks = gt_seg[None] == stuff_labels[:, None, None]\n", "        gt_labels = np.concatenate((gt_labels, stuff_labels), axis=0)\n\t        gt_masks = np.concatenate((gt_masks, stuff_masks.astype(np.uint8)),\n\t                                  axis=0)\n\t        # If you need to show the bounding boxes,\n\t        # please comment the following line\n\t        # gt_bboxes = None\n\t    img = mmcv.imread(img)\n\t    img_with_gt = imshow_det_bboxes(\n\t        img,\n\t        gt_bboxes,\n", "        gt_labels,\n\t        gt_masks,\n\t        class_names=class_names,\n\t        bbox_color=gt_bbox_color,\n\t        text_color=gt_text_color,\n\t        mask_color=gt_mask_color,\n\t        thickness=thickness,\n\t        font_size=font_size,\n\t        win_name=win_name,\n\t        show=False)\n", "    if not isinstance(result, dict):\n\t        if isinstance(result, tuple):\n\t            bbox_result, segm_result = result\n\t            if isinstance(segm_result, tuple):\n\t                segm_result = segm_result[0]  # ms rcnn\n\t        else:\n\t            bbox_result, segm_result = result, None\n\t        bboxes = np.vstack(bbox_result)\n\t        labels = [\n\t            np.full(bbox.shape[0], i, dtype=np.int32)\n", "            for i, bbox in enumerate(bbox_result)\n\t        ]\n\t        labels = np.concatenate(labels)\n\t        segms = None\n\t        if segm_result is not None and len(labels) > 0:  # non empty\n\t            segms = mmcv.concat_list(segm_result)\n\t            segms = mask_util.decode(segms)\n\t            segms = segms.transpose(2, 0, 1)\n\t    else:\n\t        assert class_names is not None, 'We need to know the number ' \\\n", "                                        'of classes.'\n\t        VOID = len(class_names)\n\t        bboxes = None\n\t        pan_results = result['pan_results']\n\t        # keep objects ahead\n\t        ids = np.unique(pan_results)[::-1]\n\t        legal_indices = ids != VOID\n\t        ids = ids[legal_indices]\n\t        labels = np.array([id % INSTANCE_OFFSET for id in ids], dtype=np.int64)\n\t        segms = (pan_results[None] == ids[:, None, None])\n", "    if overlay_gt_pred:\n\t        img = imshow_det_bboxes(\n\t            img_with_gt,\n\t            bboxes,\n\t            labels,\n\t            segms=segms,\n\t            class_names=class_names,\n\t            score_thr=score_thr,\n\t            bbox_color=det_bbox_color,\n\t            text_color=det_text_color,\n", "            mask_color=det_mask_color,\n\t            thickness=thickness,\n\t            font_size=font_size,\n\t            win_name=win_name,\n\t            show=show,\n\t            wait_time=wait_time,\n\t            out_file=out_file)\n\t    else:\n\t        img_with_det = imshow_det_bboxes(\n\t            img,\n", "            bboxes,\n\t            labels,\n\t            segms=segms,\n\t            class_names=class_names,\n\t            score_thr=score_thr,\n\t            bbox_color=det_bbox_color,\n\t            text_color=det_text_color,\n\t            mask_color=det_mask_color,\n\t            thickness=thickness,\n\t            font_size=font_size,\n", "            win_name=win_name,\n\t            show=False)\n\t        img = np.concatenate([img_with_gt, img_with_det], axis=0)\n\t        plt.imshow(img)\n\t        if show:\n\t            if wait_time == 0:\n\t                plt.show()\n\t            else:\n\t                plt.show(block=False)\n\t                plt.pause(wait_time)\n", "        if out_file is not None:\n\t            mmcv.imwrite(img, out_file)\n\t        plt.close()\n\t    return img\n"]}
{"filename": "patch/mmdet/core/bbox/coder/delta_xywh_bbox_coder.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport warnings\n\timport mmcv\n\timport numpy as np\n\timport torch\n\tfrom ..builder import BBOX_CODERS\n\tfrom .base_bbox_coder import BaseBBoxCoder\n\t@BBOX_CODERS.register_module()\n\tclass DeltaXYWHBBoxCoder(BaseBBoxCoder):\n\t    \"\"\"Delta XYWH BBox coder.\n", "    Following the practice in `R-CNN <https://arxiv.org/abs/1311.2524>`_,\n\t    this coder encodes bbox (x1, y1, x2, y2) into delta (dx, dy, dw, dh) and\n\t    decodes delta (dx, dy, dw, dh) back to original bbox (x1, y1, x2, y2).\n\t    Args:\n\t        target_means (Sequence[float]): Denormalizing means of target for\n\t            delta coordinates\n\t        target_stds (Sequence[float]): Denormalizing standard deviation of\n\t            target for delta coordinates\n\t        clip_border (bool, optional): Whether clip the objects outside the\n\t            border of the image. Defaults to True.\n", "        add_ctr_clamp (bool): Whether to add center clamp, when added, the\n\t            predicted box is clamped is its center is too far away from\n\t            the original anchor's center. Only used by YOLOF. Default False.\n\t        ctr_clamp (int): the maximum pixel shift to clamp. Only used by YOLOF.\n\t            Default 32.\n\t    \"\"\"\n\t    def __init__(self,\n\t                 target_means=(0., 0., 0., 0.),\n\t                 target_stds=(1., 1., 1., 1.),\n\t                 clip_border=True,\n", "                 add_ctr_clamp=False,\n\t                 ctr_clamp=32):\n\t        super(BaseBBoxCoder, self).__init__()\n\t        self.means = target_means\n\t        self.stds = target_stds\n\t        self.clip_border = clip_border\n\t        self.add_ctr_clamp = add_ctr_clamp\n\t        self.ctr_clamp = ctr_clamp\n\t    def encode(self, bboxes, gt_bboxes):\n\t        \"\"\"Get box regression transformation deltas that can be used to\n", "        transform the ``bboxes`` into the ``gt_bboxes``.\n\t        Args:\n\t            bboxes (torch.Tensor): Source boxes, e.g., object proposals.\n\t            gt_bboxes (torch.Tensor): Target of the transformation, e.g.,\n\t                ground-truth boxes.\n\t        Returns:\n\t            torch.Tensor: Box transformation deltas\n\t        \"\"\"\n\t        assert bboxes.size(0) == gt_bboxes.size(0)\n\t        assert bboxes.size(-1) == gt_bboxes.size(-1) == 4\n", "        encoded_bboxes = bbox2delta(bboxes, gt_bboxes, self.means, self.stds)\n\t        return encoded_bboxes\n\t    def decode(self,\n\t               bboxes,\n\t               pred_bboxes,\n\t               max_shape=None,\n\t               wh_ratio_clip=16 / 1000):\n\t        \"\"\"Apply transformation `pred_bboxes` to `boxes`.\n\t        Args:\n\t            bboxes (torch.Tensor): Basic boxes. Shape (B, N, 4) or (N, 4)\n", "            pred_bboxes (Tensor): Encoded offsets with respect to each roi.\n\t               Has shape (B, N, num_classes * 4) or (B, N, 4) or\n\t               (N, num_classes * 4) or (N, 4). Note N = num_anchors * W * H\n\t               when rois is a grid of anchors.Offset encoding follows [1]_.\n\t            max_shape (Sequence[int] or torch.Tensor or Sequence[\n\t               Sequence[int]],optional): Maximum bounds for boxes, specifies\n\t               (H, W, C) or (H, W). If bboxes shape is (B, N, 4), then\n\t               the max_shape should be a Sequence[Sequence[int]]\n\t               and the length of max_shape should also be B.\n\t            wh_ratio_clip (float, optional): The allowed ratio between\n", "                width and height.\n\t        Returns:\n\t            torch.Tensor: Decoded boxes.\n\t        \"\"\"\n\t        assert pred_bboxes.size(0) == bboxes.size(0)\n\t        if pred_bboxes.ndim == 3:\n\t            assert pred_bboxes.size(1) == bboxes.size(1)\n\t        if pred_bboxes.ndim == 2 and not torch.onnx.is_in_onnx_export():\n\t            # single image decode\n\t            decoded_bboxes = delta2bbox(bboxes, pred_bboxes, self.means,\n", "                                        self.stds, max_shape, wh_ratio_clip,\n\t                                        self.clip_border, self.add_ctr_clamp,\n\t                                        self.ctr_clamp)\n\t        else:\n\t            if pred_bboxes.ndim == 3 and not torch.onnx.is_in_onnx_export():\n\t                warnings.warn(\n\t                    'DeprecationWarning: onnx_delta2bbox is deprecated '\n\t                    'in the case of batch decoding and non-ONNX, '\n\t                    'please use “delta2bbox” instead. In order to improve '\n\t                    'the decoding speed, the batch function will no '\n", "                    'longer be supported. ')\n\t            decoded_bboxes = onnx_delta2bbox(bboxes, pred_bboxes, self.means,\n\t                                             self.stds, max_shape,\n\t                                             wh_ratio_clip, self.clip_border,\n\t                                             self.add_ctr_clamp,\n\t                                             self.ctr_clamp)\n\t        return decoded_bboxes\n\t@mmcv.jit(coderize=True)\n\tdef bbox2delta(proposals, gt, means=(0., 0., 0., 0.), stds=(1., 1., 1., 1.)):\n\t    \"\"\"Compute deltas of proposals w.r.t. gt.\n", "    We usually compute the deltas of x, y, w, h of proposals w.r.t ground\n\t    truth bboxes to get regression target.\n\t    This is the inverse function of :func:`delta2bbox`.\n\t    Args:\n\t        proposals (Tensor): Boxes to be transformed, shape (N, ..., 4)\n\t        gt (Tensor): Gt bboxes to be used as base, shape (N, ..., 4)\n\t        means (Sequence[float]): Denormalizing means for delta coordinates\n\t        stds (Sequence[float]): Denormalizing standard deviation for delta\n\t            coordinates\n\t    Returns:\n", "        Tensor: deltas with shape (N, 4), where columns represent dx, dy,\n\t            dw, dh.\n\t    \"\"\"\n\t    assert proposals.size() == gt.size()\n\t    proposals = proposals.float()\n\t    gt = gt.float()\n\t    px = (proposals[..., 0] + proposals[..., 2]) * 0.5\n\t    py = (proposals[..., 1] + proposals[..., 3]) * 0.5\n\t    pw = proposals[..., 2] - proposals[..., 0]\n\t    ph = proposals[..., 3] - proposals[..., 1]\n", "    gx = (gt[..., 0] + gt[..., 2]) * 0.5\n\t    gy = (gt[..., 1] + gt[..., 3]) * 0.5\n\t    gw = gt[..., 2] - gt[..., 0]\n\t    gh = gt[..., 3] - gt[..., 1]\n\t    dx = (gx - px) / pw\n\t    dy = (gy - py) / ph\n\t    dw = torch.log(gw / pw)\n\t    dh = torch.log(gh / ph)\n\t    deltas = torch.stack([dx, dy, dw, dh], dim=-1)\n\t    means = deltas.new_tensor(means).unsqueeze(0)\n", "    stds = deltas.new_tensor(stds).unsqueeze(0)\n\t    deltas = deltas.sub_(means).div_(stds)\n\t    return deltas\n\t@mmcv.jit(coderize=True)\n\tdef delta2bbox(rois,\n\t               deltas,\n\t               means=(0., 0., 0., 0.),\n\t               stds=(1., 1., 1., 1.),\n\t               max_shape=None,\n\t               wh_ratio_clip=16 / 1000,\n", "               clip_border=True,\n\t               add_ctr_clamp=False,\n\t               ctr_clamp=32):\n\t    \"\"\"Apply deltas to shift/scale base boxes.\n\t    Typically the rois are anchor or proposed bounding boxes and the deltas are\n\t    network outputs used to shift/scale those boxes.\n\t    This is the inverse function of :func:`bbox2delta`.\n\t    Args:\n\t        rois (Tensor): Boxes to be transformed. Has shape (N, 4).\n\t        deltas (Tensor): Encoded offsets relative to each roi.\n", "            Has shape (N, num_classes * 4) or (N, 4). Note\n\t            N = num_base_anchors * W * H, when rois is a grid of\n\t            anchors. Offset encoding follows [1]_.\n\t        means (Sequence[float]): Denormalizing means for delta coordinates.\n\t            Default (0., 0., 0., 0.).\n\t        stds (Sequence[float]): Denormalizing standard deviation for delta\n\t            coordinates. Default (1., 1., 1., 1.).\n\t        max_shape (tuple[int, int]): Maximum bounds for boxes, specifies\n\t           (H, W). Default None.\n\t        wh_ratio_clip (float): Maximum aspect ratio for boxes. Default\n", "            16 / 1000.\n\t        clip_border (bool, optional): Whether clip the objects outside the\n\t            border of the image. Default True.\n\t        add_ctr_clamp (bool): Whether to add center clamp. When set to True,\n\t            the center of the prediction bounding box will be clamped to\n\t            avoid being too far away from the center of the anchor.\n\t            Only used by YOLOF. Default False.\n\t        ctr_clamp (int): the maximum pixel shift to clamp. Only used by YOLOF.\n\t            Default 32.\n\t    Returns:\n", "        Tensor: Boxes with shape (N, num_classes * 4) or (N, 4), where 4\n\t           represent tl_x, tl_y, br_x, br_y.\n\t    References:\n\t        .. [1] https://arxiv.org/abs/1311.2524\n\t    Example:\n\t        >>> rois = torch.Tensor([[ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 5.,  5.,  5.,  5.]])\n\t        >>> deltas = torch.Tensor([[  0.,   0.,   0.,   0.],\n", "        >>>                        [  1.,   1.,   1.,   1.],\n\t        >>>                        [  0.,   0.,   2.,  -1.],\n\t        >>>                        [ 0.7, -1.9, -0.5,  0.3]])\n\t        >>> delta2bbox(rois, deltas, max_shape=(32, 32, 3))\n\t        tensor([[0.0000, 0.0000, 1.0000, 1.0000],\n\t                [0.1409, 0.1409, 2.8591, 2.8591],\n\t                [0.0000, 0.3161, 4.1945, 0.6839],\n\t                [5.0000, 5.0000, 5.0000, 5.0000]])\n\t    \"\"\"\n\t    num_bboxes, num_classes = deltas.size(0), deltas.size(1) // 4\n", "    if num_bboxes == 0:\n\t        return deltas\n\t    deltas = deltas.reshape(-1, 4)\n\t    means = deltas.new_tensor(means).view(1, -1)\n\t    stds = deltas.new_tensor(stds).view(1, -1)\n\t    denorm_deltas = deltas * stds + means\n\t    dxy = denorm_deltas[:, :2]\n\t    dwh = denorm_deltas[:, 2:]\n\t    # Compute width/height of each roi\n\t    rois_ = rois.repeat(1, num_classes).reshape(-1, 4)\n", "    pxy = ((rois_[:, :2] + rois_[:, 2:]) * 0.5)\n\t    pwh = (rois_[:, 2:] - rois_[:, :2])\n\t    dxy_wh = pwh * dxy\n\t    max_ratio = np.abs(np.log(wh_ratio_clip))\n\t    if add_ctr_clamp:\n\t        dxy_wh = torch.clamp(dxy_wh, max=ctr_clamp, min=-ctr_clamp)\n\t        dwh = torch.clamp(dwh, max=max_ratio)\n\t    else:\n\t        dwh = dwh.clamp(min=-max_ratio, max=max_ratio)\n\t    gxy = pxy + dxy_wh\n", "    gwh = pwh * dwh.exp()\n\t    x1y1 = gxy - (gwh * 0.5)\n\t    x2y2 = gxy + (gwh * 0.5)\n\t    bboxes = torch.cat([x1y1, x2y2], dim=-1)\n\t    if clip_border and max_shape is not None:\n\t        bboxes[..., 0::2].clamp_(min=0, max=max_shape[1])\n\t        bboxes[..., 1::2].clamp_(min=0, max=max_shape[0])\n\t    bboxes = bboxes.reshape(num_bboxes, -1)\n\t    return bboxes\n\tdef onnx_delta2bbox(rois,\n", "                    deltas,\n\t                    means=(0., 0., 0., 0.),\n\t                    stds=(1., 1., 1., 1.),\n\t                    max_shape=None,\n\t                    wh_ratio_clip=16 / 1000,\n\t                    clip_border=True,\n\t                    add_ctr_clamp=False,\n\t                    ctr_clamp=32):\n\t    \"\"\"Apply deltas to shift/scale base boxes.\n\t    Typically the rois are anchor or proposed bounding boxes and the deltas are\n", "    network outputs used to shift/scale those boxes.\n\t    This is the inverse function of :func:`bbox2delta`.\n\t    Args:\n\t        rois (Tensor): Boxes to be transformed. Has shape (N, 4) or (B, N, 4)\n\t        deltas (Tensor): Encoded offsets with respect to each roi.\n\t            Has shape (B, N, num_classes * 4) or (B, N, 4) or\n\t            (N, num_classes * 4) or (N, 4). Note N = num_anchors * W * H\n\t            when rois is a grid of anchors.Offset encoding follows [1]_.\n\t        means (Sequence[float]): Denormalizing means for delta coordinates.\n\t            Default (0., 0., 0., 0.).\n", "        stds (Sequence[float]): Denormalizing standard deviation for delta\n\t            coordinates. Default (1., 1., 1., 1.).\n\t        max_shape (Sequence[int] or torch.Tensor or Sequence[\n\t            Sequence[int]],optional): Maximum bounds for boxes, specifies\n\t            (H, W, C) or (H, W). If rois shape is (B, N, 4), then\n\t            the max_shape should be a Sequence[Sequence[int]]\n\t            and the length of max_shape should also be B. Default None.\n\t        wh_ratio_clip (float): Maximum aspect ratio for boxes.\n\t            Default 16 / 1000.\n\t        clip_border (bool, optional): Whether clip the objects outside the\n", "            border of the image. Default True.\n\t        add_ctr_clamp (bool): Whether to add center clamp, when added, the\n\t            predicted box is clamped is its center is too far away from\n\t            the original anchor's center. Only used by YOLOF. Default False.\n\t        ctr_clamp (int): the maximum pixel shift to clamp. Only used by YOLOF.\n\t            Default 32.\n\t    Returns:\n\t        Tensor: Boxes with shape (B, N, num_classes * 4) or (B, N, 4) or\n\t           (N, num_classes * 4) or (N, 4), where 4 represent\n\t           tl_x, tl_y, br_x, br_y.\n", "    References:\n\t        .. [1] https://arxiv.org/abs/1311.2524\n\t    Example:\n\t        >>> rois = torch.Tensor([[ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 0.,  0.,  1.,  1.],\n\t        >>>                      [ 5.,  5.,  5.,  5.]])\n\t        >>> deltas = torch.Tensor([[  0.,   0.,   0.,   0.],\n\t        >>>                        [  1.,   1.,   1.,   1.],\n\t        >>>                        [  0.,   0.,   2.,  -1.],\n", "        >>>                        [ 0.7, -1.9, -0.5,  0.3]])\n\t        >>> delta2bbox(rois, deltas, max_shape=(32, 32, 3))\n\t        tensor([[0.0000, 0.0000, 1.0000, 1.0000],\n\t                [0.1409, 0.1409, 2.8591, 2.8591],\n\t                [0.0000, 0.3161, 4.1945, 0.6839],\n\t                [5.0000, 5.0000, 5.0000, 5.0000]])\n\t    \"\"\"\n\t    means = deltas.new_tensor(means).view(1,\n\t                                          -1).repeat(1,\n\t                                                     deltas.size(-1) // 4)\n", "    stds = deltas.new_tensor(stds).view(1, -1).repeat(1, deltas.size(-1) // 4)\n\t    if torch.all(means == 0) and torch.all(stds == 1):\n\t        denorm_deltas = deltas\n\t    elif torch.all(means == 0):\n\t        denorm_deltas = deltas * stds\n\t    elif torch.all(stds == 1):\n\t        denorm_deltas = deltas + means\n\t    else:\n\t        denorm_deltas = deltas * stds + means\n\t    dx = denorm_deltas[..., 0::4]\n", "    dy = denorm_deltas[..., 1::4]\n\t    dw = denorm_deltas[..., 2::4]\n\t    dh = denorm_deltas[..., 3::4]\n\t    x1, y1 = rois[..., 0], rois[..., 1]\n\t    x2, y2 = rois[..., 2], rois[..., 3]\n\t    # Compute center of each roi\n\t    px = ((x1 + x2) * 0.5).unsqueeze(-1).expand_as(dx)\n\t    py = ((y1 + y2) * 0.5).unsqueeze(-1).expand_as(dy)\n\t    # Compute width/height of each roi\n\t    pw = (x2 - x1).unsqueeze(-1).expand_as(dw)\n", "    ph = (y2 - y1).unsqueeze(-1).expand_as(dh)\n\t    dx_width = pw * dx\n\t    dy_height = ph * dy\n\t    max_ratio = np.abs(np.log(wh_ratio_clip))\n\t    if add_ctr_clamp:\n\t        dx_width = torch.clamp(dx_width, max=ctr_clamp, min=-ctr_clamp)\n\t        dy_height = torch.clamp(dy_height, max=ctr_clamp, min=-ctr_clamp)\n\t        dw = torch.clamp(dw, max=max_ratio)\n\t        dh = torch.clamp(dh, max=max_ratio)\n\t    else:\n", "        dw = dw.clamp(min=-max_ratio, max=max_ratio)\n\t        dh = dh.clamp(min=-max_ratio, max=max_ratio)\n\t    # Use exp(network energy) to enlarge/shrink each roi\n\t    gw = pw * dw.exp()\n\t    gh = ph * dh.exp()\n\t    # Use network energy to shift the center of each roi\n\t    gx = px + dx_width\n\t    gy = py + dy_height\n\t    # Convert center-xy/width/height to top-left, bottom-right\n\t    x1 = gx - gw * 0.5\n", "    y1 = gy - gh * 0.5\n\t    x2 = gx + gw * 0.5\n\t    y2 = gy + gh * 0.5\n\t    bboxes = torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())\n\t    if clip_border and max_shape is not None:\n\t        # clip bboxes with dynamic `min` and `max` for onnx\n\t        if torch.onnx.is_in_onnx_export():\n\t            from mmdet.core.export import dynamic_clip_for_onnx\n\t            x1, y1, x2, y2 = dynamic_clip_for_onnx(x1, y1, x2, y2, max_shape)\n\t            bboxes = torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())\n", "            return bboxes\n\t        if not isinstance(max_shape, torch.Tensor):\n\t            max_shape = x1.new_tensor(max_shape)\n\t        max_shape = max_shape[..., :2].type_as(x1)\n\t        if max_shape.ndim == 2:\n\t            assert bboxes.ndim == 3\n\t            assert max_shape.size(0) == bboxes.size(0)\n\t        min_xy = x1.new_tensor(0)\n\t        max_xy = torch.cat(\n\t            [max_shape] * (deltas.size(-1) // 2),\n", "            dim=-1).flip(-1).unsqueeze(-2)\n\t        bboxes = torch.where(bboxes < min_xy, min_xy, bboxes)\n\t        bboxes = torch.where(bboxes > max_xy, max_xy, bboxes)\n\t    return bboxes\n"]}
{"filename": "scripts/codes/004run_on_tensorrt.py", "chunked_list": ["import tensorrt as trt\n\timport numpy as np\n\timport os\n\timport ctypes\n\t# cuda: https://nvidia.github.io/cuda-python/\n\t# pycuda: https://documen.tician.de/pycuda/\n\timport pycuda.driver as cuda\n\timport torch\n\timport pycuda.autoinit\n\timport glob\n", "import mmcv\n\t# 设置一些常量\n\tepsilon = 1.0e-2\n\tnp.random.seed(97)\n\tlogger = trt.Logger(trt.Logger.ERROR)\n\ttrt.init_libnvinfer_plugins(logger, '')\n\tso_files = glob.glob(os.path.join('../relaventTensorRTPlugin/build', '*.so'))\n\tfor so_file in so_files:\n\t    ctypes.cdll.LoadLibrary(so_file)\n\t    print('load {} success!'.format(os.path.basename(so_file)))\n", "def GiB(val):\n\t    return val * 1 << 30\n\tclass HostDeviceMem(object):\n\t    def __init__(self, host_mem, device_mem):\n\t        self.host = host_mem\n\t        self.device = device_mem\n\t    def free(self):\n\t        self.host = None\n\t        if self.device is not None:\n\t            self.device.free()\n", "            self.device = None\n\t    def __del__(self):\n\t        self.free()\n\t    def __str__(self):\n\t        return \"Host:\\n\" + str(self.host) + \"\\nDevice:\\n\" + str(self.device)\n\t    def __repr__(self):\n\t        return self.__str__()\n\t# Allocates all buffers required for an engine, i.e. host/device inputs/outputs.\n\tdef allocate_buffers(ori_inputs, ori_outputs, engine, context, stream):\n\t    inputs = []\n", "    outputs = []\n\t    bindings = []\n\t    nInput = np.sum([engine.binding_is_input(i) for i in range(engine.num_bindings)])\n\t    for i, binding in enumerate(engine):\n\t        size = trt.volume(context.get_binding_shape(i))\n\t        dtype = trt.nptype(engine.get_binding_dtype(binding))\n\t        try:\n\t            if engine.binding_is_input(binding):\n\t                ori_mem = ori_inputs[i]\n\t            else:\n", "                ori_mem = ori_outputs[i - nInput]\n\t        except:\n\t            ori_mem = None\n\t        if ori_mem is not None:\n\t            if ori_mem.host.nbytes >= size:\n\t                host_mem = ori_mem.host\n\t                device_mem = ori_mem.device\n\t                # 避免再次释放\n\t                ori_mem.device = None\n\t            else:\n", "                ori_mem.free()\n\t                host_mem = cuda.pagelocked_empty(size, dtype)\n\t                device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        else:\n\t            # Allocate host and device buffers\n\t            host_mem = cuda.pagelocked_empty(size, dtype)\n\t            device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        # Append the device buffer to device bindings.\n\t        bindings.append(int(device_mem))\n\t        # Append to the appropriate list.\n", "        if engine.binding_is_input(binding):\n\t            inputs.append(HostDeviceMem(host_mem, device_mem))\n\t        else:\n\t            outputs.append(HostDeviceMem(host_mem, device_mem))\n\t    return inputs, outputs, bindings\n\tdef build_engine(onnx_file_path, enable_fp16=False, max_batch_size=1, max_workspace_size=10, write_engine=True):\n\t    # 通过加载onnx文件，构建engine\n\t    # :param onnx_file_path: onnx文件路径\n\t    # :return: engine\n\t    onnx_path = os.path.realpath(onnx_file_path) \n", "    engine_file_path = \".\".join(onnx_path.split('.')[:-1] + ['engine'])\n\t    print('engine_file_path', engine_file_path)\n\t    G_LOGGER = trt.Logger(trt.Logger.INFO)\n\t    if os.path.exists(engine_file_path):\n\t        with open(engine_file_path, 'rb') as f, trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(f.read())\n\t        return engine, engine_file_path\n\t    explicit_batch = 1 << (int)(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH)\n\t    with trt.Builder(G_LOGGER) as builder, builder.create_network(explicit_batch) as network, \\\n\t            trt.OnnxParser(network, G_LOGGER) as parser:\n", "        config = builder.create_builder_config()\n\t        config.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, GiB(max_workspace_size))\n\t        if enable_fp16:\n\t            config.set_flag(trt.BuilderFlag.FP16)\n\t        print('Loading ONNX file from path {} ...'.format(onnx_file_path))\n\t        with open(onnx_file_path, 'rb') as model:\n\t            print('Beginning ONNX file parsing')\n\t            if not parser.parse(model.read()):\n\t                for error in range(parser.num_errors):\n\t                    print(parser.get_error(error))\n", "                # print(\" parsing error:\", parser.get_error(0).code(), \"\\n\",\n\t                #       \"function name:\", parser.get_error(0).func(), \"\\n\",\n\t                #       \"node:\", parser.get_error(0).node(), \"\\n\",\n\t                #       \"line num:\", parser.get_error(0).line(), \"\\n\",\n\t                #       \"desc:\", parser.get_error(0).desc())\n\t                return None, None\n\t        print('Completed parsing of ONNX file')\n\t        print('Building an engine from file {}; this may take a while...'.format(onnx_file_path))\n\t        # 重点\n\t        profile = builder.create_optimization_profile()\n", "        profile.set_shape(\"input\", (1, 3, 800, 1216), (max_batch_size, 3, 800, 1216), (max_batch_size, 3, 800, 1216))\n\t        config.add_optimization_profile(profile)\n\t        serialized_engine = builder.build_serialized_network(network, config)\n\t        if not serialized_engine:\n\t            return None, None\n\t        print(\"Completed creating Engine\")\n\t        # 保存engine文件\n\t        if write_engine:\n\t            with open(engine_file_path, \"wb\") as f:\n\t                f.write(serialized_engine)\n", "        with trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(serialized_engine)\n\t        return engine, engine_file_path\n\t# This function is generalized for multiple inputs/outputs.\n\t# inputs and outputs are expected to be lists of HostDeviceMem objects.\n\tdef do_inference(context, bindings, inputs, outputs, stream):\n\t    # Transfer input data to the GPU.\n\t    [cuda.memcpy_htod_async(inp.device, inp.host, stream) for inp in inputs]\n\t    # Run inference.\n\t    context.execute_async_v2(bindings=bindings, stream_handle=stream.handle)\n", "    # Transfer predictions back from the GPU.\n\t    [cuda.memcpy_dtoh_async(out.host, out.device, stream) for out in outputs]\n\t    # Synchronize the stream\n\t    stream.synchronize()\n\t    # Return only the host outputs.\n\t    return [out.host for out in outputs]\n\tclass TRTMaskRCNN(object):\n\t    def __init__(self, engine_or_onnx_path):\n\t        self.engine_path = engine_or_onnx_path\n\t        self.logger = trt.Logger(trt.Logger.INFO)\n", "        self.engine = self._get_engine()\n\t        self.context = self.engine.create_execution_context()\n\t        self.stream = cuda.Stream()\n\t        self.inputs = None\n\t        self.outputs = None\n\t    def _get_engine(self):\n\t        # If a serialized engine exists, use it instead of building an engine.\n\t        return build_engine(self.engine_path, enable_fp16=False, max_batch_size=1, write_engine=True)[0]\n\t    def detect(self, image_np_array, cuda_ctx = pycuda.autoinit.context):\n\t        if cuda_ctx:\n", "            cuda_ctx.push()\n\t        batch_size = image_np_array.shape[0]\n\t        # 动态输入\n\t        origin_inputshape = self.context.get_binding_shape(0)\n\t        origin_inputshape[0] = batch_size\n\t        self.context.set_binding_shape(0, (origin_inputshape))\n\t        self.context.set_optimization_profile_async(0, self.stream.handle)\n\t        self.inputs, self.outputs, bindings = allocate_buffers(self.inputs, self.outputs, self.engine, self.context, self.stream)\n\t        np_type = trt.nptype(self.engine.get_binding_dtype(0))\n\t        # Do inference\n", "        self.inputs[0].host = np.ascontiguousarray(image_np_array.astype(np_type))\n\t        trt_outputs = do_inference(self.context, bindings=bindings, inputs=self.inputs, outputs=self.outputs,\n\t                                          stream=self.stream)\n\t        if cuda_ctx:\n\t            cuda_ctx.pop()\n\t        nInput = np.sum([self.engine.binding_is_input(i) for i in range(self.engine.num_bindings)])\n\t        nOutput = self.engine.num_bindings - nInput\n\t        trt_outputs_dict = dict()\n\t        for i in range(nOutput):\n\t            shape = self.context.get_binding_shape(nInput + i)\n", "            name = self.engine.get_binding_name(nInput + i)\n\t            trt_outputs_dict[name] = trt_outputs[i].reshape(shape)\n\t        return trt_outputs_dict\n\t    def __call__(self, x):\n\t        return self.detect(x)\n\t    def __del__(self):\n\t        del self.inputs\n\t        del self.outputs\n\t        del self.stream\n\t        del self.engine\n", "        del self.context\n\tdef imgpath2pad_array(image_path):\n\t    image = mmcv.imread(image_path, channel_order='rgb')\n\t    height, width = image.shape[:2]\n\t    dst_height, dst_width = 800, 1216\n\t    resize_scale = min(dst_height / height, dst_width / width)\n\t    new_height, new_width = round(height * resize_scale), round(width * resize_scale)\n\t    resize_image = mmcv.imresize(image, (new_width, new_height))\n\t    # pad_height = dst_height - new_height\n\t    # pad_width = dst_width - new_width\n", "    # ((before_1, after_1), ... (before_N, after_N))\n\t    # pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(image.shape) - 2))\n\t    return resize_image # np.pad(resize_image, pad_width = pad_val, mode='constant')\n\tdef array2tensor(array):\n\t    dst_height, dst_width = 800, 1216\n\t    height, width = array.shape[:2]\n\t    pad_height = dst_height - height\n\t    pad_width = dst_width - width\n\t    pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(array.shape) - 2))\n\t    mean = np.asarray([123.675, 116.28, 103.53], dtype=np.float32).reshape(1,1,3)\n", "    std = np.asarray([58.395, 57.12, 57.375], dtype=np.float32).reshape(1,1,3)\n\t    array = (array.astype(np.float32) - mean) / std\n\t    pad_array = np.pad(array, pad_width = pad_val, mode='constant')\n\t    return np.transpose(pad_array, axes=[2, 0, 1])\n\tdef main():\n\t    import mmdet\n\t    trt_maskrcnn = TRTMaskRCNN('../results/mask_rcnn_r50_fpn_2x_coco.onnx')\n\t    with open('onnx_output_dict.pkl', 'rb') as f:\n\t        onnx_outputs = torch.load(f, map_location='cpu')\n\t    dirpath = os.path.dirname\n", "    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n\t    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    cur_dir = os.path.dirname(__file__)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    from PIL import Image\n\t    def get_image_size(filepath):\n\t        im = Image.open(filepath)\n", "        width, height = im.size\n\t        return (width, height)\n\t    image_array = imgpath2pad_array(jpg_image_path)\n\t    # img_metas = [\n\t    #     {\n\t    #         'img_shape':tuple(image_array.shape),\n\t    #         'ori_shape':get_image_size(jpg_image_path)\n\t    #     },\n\t    # ]\n\t    tensor = array2tensor(image_array)\n", "    tensor = np.ascontiguousarray(np.expand_dims(tensor, axis=0))\n\t    outputs = trt_maskrcnn.detect(tensor)\n\t    for k in outputs:\n\t        diff = (outputs[k] - onnx_outputs[k])\n\t        print('key: {}, diff: {}'.format(k, np.abs(diff).max()))\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "scripts/codes/007run_on_tensorrt_dynamic_shape_fp16.py", "chunked_list": ["import tensorrt as trt\n\timport numpy as np\n\timport os\n\timport ctypes\n\t# cuda: https://nvidia.github.io/cuda-python/\n\t# pycuda: https://documen.tician.de/pycuda/\n\timport pycuda.driver as cuda\n\timport tensorrt as trt\n\timport torch\n\timport pycuda.autoinit\n", "import glob\n\timport mmcv\n\timport onnx_graphsurgeon as gs\n\timport onnx\n\tfrom mmdet.core import bbox2result\n\t# 设置一些常量\n\tepsilon = 1.0e-2\n\tnp.random.seed(97)\n\tlogger = trt.Logger(trt.Logger.ERROR)\n\ttrt.init_libnvinfer_plugins(logger, '')\n", "so_files = glob.glob(os.path.join('../relaventTensorRTPlugin/build', '*.so'))\n\tfor so_file in so_files:\n\t    ctypes.cdll.LoadLibrary(so_file)\n\t    print('load {} success!'.format(os.path.basename(so_file)))\n\tdef GiB(val):\n\t    return val * 1 << 30\n\tclass HostDeviceMem(object):\n\t    def __init__(self, host_mem, device_mem):\n\t        self.host = host_mem\n\t        self.device = device_mem\n", "    def free(self):\n\t        self.host = None\n\t        if self.device is not None:\n\t            self.device.free()\n\t            self.device = None\n\t    def __del__(self):\n\t        self.free()\n\t    def __str__(self):\n\t        return \"Host:\\n\" + str(self.host) + \"\\nDevice:\\n\" + str(self.device)\n\t    def __repr__(self):\n", "        return self.__str__()\n\t# Allocates all buffers required for an engine, i.e. host/device inputs/outputs.\n\tdef allocate_buffers(ori_inputs, ori_outputs, engine, context, stream):\n\t    inputs = []\n\t    outputs = []\n\t    bindings = []\n\t    nInput = np.sum([engine.binding_is_input(i) for i in range(engine.num_bindings)])\n\t    for i, binding in enumerate(engine):\n\t        size = trt.volume(context.get_binding_shape(i))\n\t        dtype = trt.nptype(engine.get_binding_dtype(binding))\n", "        try:\n\t            if engine.binding_is_input(binding):\n\t                ori_mem = ori_inputs[i]\n\t            else:\n\t                ori_mem = ori_outputs[i - nInput]\n\t        except:\n\t            ori_mem = None\n\t        if ori_mem is not None:\n\t            if ori_mem.host.nbytes >= size:\n\t                host_mem = ori_mem.host\n", "                device_mem = ori_mem.device\n\t                # 避免再次释放\n\t                ori_mem.device = None\n\t            else:\n\t                ori_mem.free()\n\t                host_mem = cuda.pagelocked_empty(size, dtype)\n\t                device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        else:\n\t            # Allocate host and device buffers\n\t            host_mem = cuda.pagelocked_empty(size, dtype)\n", "            device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        # Append the device buffer to device bindings.\n\t        bindings.append(int(device_mem))\n\t        # Append to the appropriate list.\n\t        if engine.binding_is_input(binding):\n\t            inputs.append(HostDeviceMem(host_mem, device_mem))\n\t        else:\n\t            outputs.append(HostDeviceMem(host_mem, device_mem))\n\t    return inputs, outputs, bindings\n\tdef build_engine(onnx_file_path, enable_fp16=False, max_batch_size=2, max_workspace_size=10, write_engine=True):\n", "    graph = gs.import_onnx(onnx.load(onnx_file_path))\n\t    precision_name_list = list()\n\t    for node in graph.nodes:\n\t        #  'Conv', 'Add', 'Sub', 'Mul', 'Exp', 'Sqrt', 'Log'\n\t        if node.op in ['Concat', 'Add',]:\n\t            output = node.outputs[0]\n\t            if output.dtype == np.float32:\n\t                precision_name_list.append(node.name)\n\t    # exit(0)\n\t    # 通过加载onnx文件，构建engine\n", "    # :param onnx_file_path: onnx文件路径\n\t    # :return: engine\n\t    onnx_path = os.path.realpath(onnx_file_path) \n\t    engine_file_path = \".\".join(onnx_path.split('.')[:-1] + ['engine' if not enable_fp16 else 'fp16.engine'])\n\t    print('engine_file_path', engine_file_path)\n\t    G_LOGGER = trt.Logger(trt.Logger.WARNING)\n\t    if os.path.exists(engine_file_path):\n\t        with open(engine_file_path, 'rb') as f, trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(f.read())\n\t        return engine, engine_file_path\n", "    explicit_batch = 1 << (int)(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH)\n\t    with trt.Builder(G_LOGGER) as builder, builder.create_network(explicit_batch) as network, \\\n\t            trt.OnnxParser(network, G_LOGGER) as parser:\n\t        config = builder.create_builder_config()\n\t        config.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, GiB(max_workspace_size))\n\t        if enable_fp16 and builder.platform_has_fast_fp16:\n\t            config.set_flag(trt.BuilderFlag.FP16)\n\t            config.set_flag(trt.BuilderFlag.STRICT_TYPES)\n\t        print('Loading ONNX file from path {} ...'.format(onnx_file_path))\n\t        with open(onnx_file_path, 'rb') as model:\n", "            print('Beginning ONNX file parsing')\n\t            if not parser.parse(model.read()):\n\t                for error in range(parser.num_errors):\n\t                    print(parser.get_error(error))\n\t                return None, None\n\t        print('Completed parsing of ONNX file')\n\t        print('Building an engine from file {}; this may take a while...'.format(onnx_file_path))\n\t        # 重点\n\t        profile = builder.create_optimization_profile()\n\t        profile.set_shape(\"input\", (1, 3, 800, 1216), (max_batch_size, 3, 800, 1216), (max_batch_size, 3, 800, 1216))\n", "        config.add_optimization_profile(profile)\n\t        if enable_fp16 and builder.platform_has_fast_fp16:\n\t            for i in range(network.num_layers):\n\t                layer = network.get_layer(i)\n\t                layer_type = layer.type\n\t                if layer_type in (trt.LayerType.SHAPE, trt.LayerType.SLICE,\n\t                                  trt.LayerType.IDENTITY,\n\t                                  trt.LayerType.SHUFFLE, trt.LayerType.RESIZE):\n\t                    print(f'{layer.name} passed 1')\n\t                    continue\n", "                layer_output_precision = layer.get_output(0).dtype\n\t                print(f'layer_name: {layer.name}, layer_output_precision: {layer_output_precision}')\n\t                if layer_output_precision in (trt.int32, trt.int8, trt.bool):\n\t                    print(f'{layer.name} passed 2')\n\t                    continue\n\t                if layer.name in precision_name_list:\n\t                    print(f'layer {layer.name} set fp32 precision mode')\n\t                    # layer.precision = trt.float32\n\t                    layer.set_output_type(0, trt.float32)\n\t                    layer.precision = trt.float32\n", "        serialized_engine = builder.build_serialized_network(network, config)\n\t        if not serialized_engine:\n\t            return None, None\n\t        print(\"Completed creating Engine\")\n\t        # 保存engine文件\n\t        if write_engine:\n\t            with open(engine_file_path, \"wb\") as f:\n\t                f.write(serialized_engine)\n\t        with trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(serialized_engine)\n", "        return engine, engine_file_path\n\t# This function is generalized for multiple inputs/outputs.\n\t# inputs and outputs are expected to be lists of HostDeviceMem objects.\n\tdef do_inference(context, bindings, inputs, outputs, stream):\n\t    # Transfer input data to the GPU.\n\t    [cuda.memcpy_htod_async(inp.device, inp.host, stream) for inp in inputs]\n\t    # Run inference.\n\t    context.execute_async_v2(bindings=bindings, stream_handle=stream.handle)\n\t    # Transfer predictions back from the GPU.\n\t    [cuda.memcpy_dtoh_async(out.host, out.device, stream) for out in outputs]\n", "    # Synchronize the stream\n\t    stream.synchronize()\n\t    # Return only the host outputs.\n\t    return [out.host for out in outputs]\n\tclass TRTMaskRCNN(object):\n\t    def __init__(self, engine_or_onnx_path):\n\t        self.engine_path = engine_or_onnx_path\n\t        self.logger = trt.Logger(trt.Logger.INFO)\n\t        self.engine = self._get_engine()\n\t        self.context = self.engine.create_execution_context()\n", "        self.stream = cuda.Stream()\n\t        self.inputs = None\n\t        self.outputs = None\n\t    def _get_engine(self):\n\t        # If a serialized engine exists, use it instead of building an engine.\n\t        return build_engine(self.engine_path, enable_fp16=True, max_batch_size=4, write_engine=True)[0]\n\t    def detect(self, image_np_array, cuda_ctx = pycuda.autoinit.context):\n\t        if cuda_ctx:\n\t            cuda_ctx.push()\n\t        batch_size = image_np_array.shape[0]\n", "        # 动态输入\n\t        origin_inputshape = self.context.get_binding_shape(0)\n\t        origin_inputshape[0] = batch_size\n\t        self.context.set_binding_shape(0, (origin_inputshape))\n\t        self.context.set_optimization_profile_async(0, self.stream.handle)\n\t        self.inputs, self.outputs, bindings = allocate_buffers(self.inputs, self.outputs, self.engine, self.context, self.stream)\n\t        np_type = trt.nptype(self.engine.get_binding_dtype(0))\n\t        # Do inference\n\t        self.inputs[0].host = np.ascontiguousarray(image_np_array.astype(np_type))\n\t        trt_outputs = do_inference(self.context, bindings=bindings, inputs=self.inputs, outputs=self.outputs,\n", "                                          stream=self.stream)\n\t        if cuda_ctx:\n\t            cuda_ctx.pop()\n\t        nInput = np.sum([self.engine.binding_is_input(i) for i in range(self.engine.num_bindings)])\n\t        nOutput = self.engine.num_bindings - nInput\n\t        trt_outputs_dict = dict()\n\t        for i in range(nOutput):\n\t            shape = self.context.get_binding_shape(nInput + i)\n\t            name = self.engine.get_binding_name(nInput + i)\n\t            trt_outputs_dict[name] = trt_outputs[i].reshape(shape)\n", "        return trt_outputs_dict\n\t    def __call__(self, x):\n\t        return self.detect(x)\n\t    def __del__(self):\n\t        del self.inputs\n\t        del self.outputs\n\t        del self.stream\n\t        del self.engine\n\t        del self.context\n\tdef imgpath2pad_array(image_path):\n", "    image = mmcv.imread(image_path, channel_order='rgb')\n\t    height, width = image.shape[:2]\n\t    dst_height, dst_width = 800, 1216\n\t    resize_scale = min(dst_height / height, dst_width / width)\n\t    new_height, new_width = round(height * resize_scale), round(width * resize_scale)\n\t    resize_image = mmcv.imresize(image, (new_width, new_height))\n\t    # pad_height = dst_height - new_height\n\t    # pad_width = dst_width - new_width\n\t    # ((before_1, after_1), ... (before_N, after_N))\n\t    # pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(image.shape) - 2))\n", "    return resize_image # np.pad(resize_image, pad_width = pad_val, mode='constant')\n\tdef array2tensor(array):\n\t    dst_height, dst_width = 800, 1216\n\t    height, width = array.shape[:2]\n\t    pad_height = dst_height - height\n\t    pad_width = dst_width - width\n\t    pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(array.shape) - 2))\n\t    mean = np.asarray([123.675, 116.28, 103.53], dtype=np.float32).reshape(1,1,3)\n\t    std = np.asarray([58.395, 57.12, 57.375], dtype=np.float32).reshape(1,1,3)\n\t    array = (array.astype(np.float32) - mean) / std\n", "    pad_array = np.pad(array, pad_width = pad_val, mode='constant')\n\t    return np.transpose(pad_array, axes=[2, 0, 1])\n\tdef main():\n\t    import mmdet\n\t    trt_maskrcnn = TRTMaskRCNN('../results/mask_rcnn_r50_fpn_2x_coco_dynamic_shape.onnx')\n\t    with open('onnx_output_dict.pkl', 'rb') as f:\n\t        onnx_outputs = torch.load(f, map_location='cpu')\n\t    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n", "    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    cur_dir = os.path.dirname(__file__)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    from PIL import Image\n\t    def get_image_size(filepath):\n\t        im = Image.open(filepath)\n\t        width, height = im.size\n\t        return (height, width)\n", "    image_array = imgpath2pad_array(jpg_image_path)\n\t    tensor = array2tensor(image_array)\n\t    tensor = np.ascontiguousarray(np.repeat(np.expand_dims(tensor, axis=0), repeats=2, axis=0))\n\t    outputs = trt_maskrcnn.detect(tensor)\n\t    for k in outputs:\n\t        val = outputs[k]\n\t        if np.any(np.isnan(val)):\n\t            print(k)\n\t    from mmdet.core.export.model_wrappers import TensorRTDetector\n\t    import pickle\n", "    with open('./class_names.pickle', 'rb') as f:\n\t        class_names = pickle.load(f)\n\t    trt_model = TensorRTDetector(trt_maskrcnn.engine, class_names, 0)\n\t    score_thr = 0.3\n\t    # 绘制推理结果\n\t    img_metas = [\n\t        {\n\t            'img_shape':tuple(image_array.shape),\n\t            'ori_shape':get_image_size(jpg_image_path)\n\t        },\n", "    ] * 2\n\t    batch_dets = outputs['dets']\n\t    batch_labels = outputs['labels']\n\t    batch_masks = outputs['masks']\n\t    batch_size = batch_dets.shape[0]\n\t    results = []\n\t    for i in range(batch_size):\n\t        # [N, 5], [N]\n\t        dets, labels = batch_dets[i], batch_labels[i]\n\t        det_mask = dets[:, -1] >= score_thr\n", "        dets = dets[det_mask]\n\t        labels = labels[det_mask]\n\t        # [N, 800, 1216]\n\t        masks = batch_masks[i]\n\t        masks = masks[det_mask]\n\t        img_h, img_w = img_metas[i]['img_shape'][:2]\n\t        ori_h, ori_w = img_metas[i]['ori_shape'][:2]\n\t        scale_factor_w = img_w / ori_w\n\t        scale_factor_h = img_h / ori_h\n\t        scale_factor = np.array([scale_factor_w, scale_factor_h, scale_factor_w, scale_factor_h])\n", "        dets[:, :4] /= scale_factor\n\t        dets_results = bbox2result(dets, labels, len(class_names))\n\t        # 去除 padding\n\t        masks = masks[:, :img_h, :img_w]\n\t        if True:\n\t            masks = masks.astype(np.float32)\n\t            masks = torch.from_numpy(masks)\n\t            masks = torch.nn.functional.interpolate(masks.unsqueeze(0), size=(ori_h, ori_w))\n\t            masks = masks.squeeze(0).detach().numpy()\n\t        if masks.dtype != bool:\n", "            masks = masks >= 0.5\n\t        segms_results = [[] for _ in range(len(class_names))]\n\t        for j in range(len(dets)):\n\t            segms_results[labels[j]].append(masks[j])\n\t        results.append((dets_results, segms_results))\n\t    os.makedirs('../results/', exist_ok=True)\n\t    trt_model.show_result(\n\t        jpg_image_path,\n\t        results[0],\n\t        score_thr=score_thr,\n", "        show=True,\n\t        win_name='TRT_FP16',\n\t        out_file='../results/trt_fp16_result.png')\n\t    for k in outputs:\n\t        diff = (outputs[k] - onnx_outputs[k])\n\t        print('key: {}, shape: {}, diff: {}'.format(k, outputs[k].shape, np.abs(diff).max()))\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "scripts/codes/006run_on_tensorrt_dynamic_shape.py", "chunked_list": ["import tensorrt as trt\n\timport numpy as np\n\timport os\n\timport ctypes\n\t# cuda: https://nvidia.github.io/cuda-python/\n\t# pycuda: https://documen.tician.de/pycuda/\n\timport pycuda.driver as cuda\n\timport tensorrt as trt\n\timport torch\n\timport pycuda.autoinit\n", "import glob\n\timport mmcv\n\t# 设置一些常量\n\tepsilon = 1.0e-2\n\tnp.random.seed(97)\n\tlogger = trt.Logger(trt.Logger.ERROR)\n\ttrt.init_libnvinfer_plugins(logger, '')\n\tso_files = glob.glob(os.path.join('../relaventTensorRTPlugin/build', '*.so'))\n\tfor so_file in so_files:\n\t    ctypes.cdll.LoadLibrary(so_file)\n", "    print('load {} success!'.format(os.path.basename(so_file)))\n\tdef GiB(val):\n\t    return val * 1 << 30\n\tclass HostDeviceMem(object):\n\t    def __init__(self, host_mem, device_mem):\n\t        self.host = host_mem\n\t        self.device = device_mem\n\t    def free(self):\n\t        self.host = None\n\t        if self.device is not None:\n", "            self.device.free()\n\t            self.device = None\n\t    def __del__(self):\n\t        self.free()\n\t    def __str__(self):\n\t        return \"Host:\\n\" + str(self.host) + \"\\nDevice:\\n\" + str(self.device)\n\t    def __repr__(self):\n\t        return self.__str__()\n\t# Allocates all buffers required for an engine, i.e. host/device inputs/outputs.\n\tdef allocate_buffers(ori_inputs, ori_outputs, engine, context, stream):\n", "    inputs = []\n\t    outputs = []\n\t    bindings = []\n\t    nInput = np.sum([engine.binding_is_input(i) for i in range(engine.num_bindings)])\n\t    for i, binding in enumerate(engine):\n\t        size = trt.volume(context.get_binding_shape(i))\n\t        dtype = trt.nptype(engine.get_binding_dtype(binding))\n\t        try:\n\t            if engine.binding_is_input(binding):\n\t                ori_mem = ori_inputs[i]\n", "            else:\n\t                ori_mem = ori_outputs[i - nInput]\n\t        except:\n\t            ori_mem = None\n\t        if ori_mem is not None:\n\t            if ori_mem.host.nbytes >= size:\n\t                host_mem = ori_mem.host\n\t                device_mem = ori_mem.device\n\t                # 避免再次释放\n\t                ori_mem.device = None\n", "            else:\n\t                ori_mem.free()\n\t                host_mem = cuda.pagelocked_empty(size, dtype)\n\t                device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        else:\n\t            # Allocate host and device buffers\n\t            host_mem = cuda.pagelocked_empty(size, dtype)\n\t            device_mem = cuda.mem_alloc(host_mem.nbytes)\n\t        # Append the device buffer to device bindings.\n\t        bindings.append(int(device_mem))\n", "        # Append to the appropriate list.\n\t        if engine.binding_is_input(binding):\n\t            inputs.append(HostDeviceMem(host_mem, device_mem))\n\t        else:\n\t            outputs.append(HostDeviceMem(host_mem, device_mem))\n\t    return inputs, outputs, bindings\n\tdef build_engine(onnx_file_path, enable_fp16 = False, max_batch_size = 1, max_workspace_size = 10, write_engine=True):\n\t    # 通过加载onnx文件，构建engine\n\t    # :param onnx_file_path: onnx文件路径\n\t    # :return: engine\n", "    onnx_path = os.path.realpath(onnx_file_path) \n\t    engine_file_path = \".\".join(onnx_path.split('.')[:-1] + ['engine' if not enable_fp16 else 'fp16.engine'])\n\t    print('engine_file_path', engine_file_path)\n\t    G_LOGGER = trt.Logger(trt.Logger.INFO)\n\t    if os.path.exists(engine_file_path):\n\t        with open(engine_file_path, 'rb') as f, trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(f.read())\n\t        return engine, engine_file_path\n\t    explicit_batch = 1 << (int)(trt.NetworkDefinitionCreationFlag.EXPLICIT_BATCH)\n\t    with trt.Builder(G_LOGGER) as builder, builder.create_network(explicit_batch) as network, \\\n", "            trt.OnnxParser(network, G_LOGGER) as parser:\n\t        config = builder.create_builder_config()\n\t        config.set_memory_pool_limit(trt.MemoryPoolType.WORKSPACE, GiB(max_workspace_size))\n\t        if enable_fp16:\n\t            config.set_flag(trt.BuilderFlag.FP16)\n\t        print('Loading ONNX file from path {} ...'.format(onnx_file_path))\n\t        with open(onnx_file_path, 'rb') as model:\n\t            print('Beginning ONNX file parsing')\n\t            if not parser.parse(model.read()):\n\t                for error in range(parser.num_errors):\n", "                    print(parser.get_error(error))\n\t                # print(\" parsing error:\", parser.get_error(0).code(), \"\\n\",\n\t                #       \"function name:\", parser.get_error(0).func(), \"\\n\",\n\t                #       \"node:\", parser.get_error(0).node(), \"\\n\",\n\t                #       \"line num:\", parser.get_error(0).line(), \"\\n\",\n\t                #       \"desc:\", parser.get_error(0).desc())\n\t                return None, None\n\t        print('Completed parsing of ONNX file')\n\t        print('Building an engine from file {}; this may take a while...'.format(onnx_file_path))\n\t        # 重点\n", "        profile = builder.create_optimization_profile()\n\t        profile.set_shape(\"input\", (1, 3, 800, 1216), (max_batch_size, 3, 800, 1216), (max_batch_size, 3, 800, 1216))\n\t        config.add_optimization_profile(profile)\n\t        serialized_engine = builder.build_serialized_network(network, config)\n\t        if not serialized_engine:\n\t            return None, None\n\t        print(\"Completed creating Engine\")\n\t        # 保存engine文件\n\t        if write_engine:\n\t            with open(engine_file_path, \"wb\") as f:\n", "                f.write(serialized_engine)\n\t        with trt.Runtime(G_LOGGER) as runtime:\n\t            engine = runtime.deserialize_cuda_engine(serialized_engine)\n\t        return engine, engine_file_path\n\t# This function is generalized for multiple inputs/outputs.\n\t# inputs and outputs are expected to be lists of HostDeviceMem objects.\n\tdef do_inference(context, bindings, inputs, outputs, stream):\n\t    # Transfer input data to the GPU.\n\t    [cuda.memcpy_htod_async(inp.device, inp.host, stream) for inp in inputs]\n\t    # Run inference.\n", "    context.execute_async_v2(bindings=bindings, stream_handle=stream.handle)\n\t    # Transfer predictions back from the GPU.\n\t    [cuda.memcpy_dtoh_async(out.host, out.device, stream) for out in outputs]\n\t    # Synchronize the stream\n\t    stream.synchronize()\n\t    # Return only the host outputs.\n\t    return [out.host for out in outputs]\n\tclass TRTMaskRCNN(object):\n\t    def __init__(self, engine_or_onnx_path):\n\t        self.engine_path = engine_or_onnx_path\n", "        self.logger = trt.Logger(trt.Logger.INFO)\n\t        self.engine = self._get_engine()\n\t        self.context = self.engine.create_execution_context()\n\t        self.stream = cuda.Stream()\n\t        self.inputs = None\n\t        self.outputs = None\n\t    def _get_engine(self):\n\t        # If a serialized engine exists, use it instead of building an engine.\n\t        return build_engine(self.engine_path, enable_fp16=False, max_batch_size=4, write_engine=True)[0]\n\t    def detect(self, image_np_array, cuda_ctx = pycuda.autoinit.context):\n", "        if cuda_ctx:\n\t            cuda_ctx.push()\n\t        batch_size = image_np_array.shape[0]\n\t        # 动态输入\n\t        origin_inputshape = self.context.get_binding_shape(0)\n\t        origin_inputshape[0] = batch_size\n\t        self.context.set_binding_shape(0, (origin_inputshape))\n\t        self.context.set_optimization_profile_async(0, self.stream.handle)\n\t        self.inputs, self.outputs, bindings = allocate_buffers(self.inputs, self.outputs, self.engine, self.context, self.stream)\n\t        np_type = trt.nptype(self.engine.get_binding_dtype(0))\n", "        # Do inference\n\t        self.inputs[0].host = np.ascontiguousarray(image_np_array.astype(np_type))\n\t        trt_outputs = do_inference(self.context, bindings=bindings, inputs=self.inputs, outputs=self.outputs,\n\t                                          stream=self.stream)\n\t        if cuda_ctx:\n\t            cuda_ctx.pop()\n\t        nInput = np.sum([self.engine.binding_is_input(i) for i in range(self.engine.num_bindings)])\n\t        nOutput = self.engine.num_bindings - nInput\n\t        trt_outputs_dict = dict()\n\t        for i in range(nOutput):\n", "            shape = self.context.get_binding_shape(nInput + i)\n\t            name = self.engine.get_binding_name(nInput + i)\n\t            trt_outputs_dict[name] = trt_outputs[i].reshape(shape)\n\t        return trt_outputs_dict\n\t    def __call__(self, x):\n\t        return self.detect(x)\n\t    def __del__(self):\n\t        del self.inputs\n\t        del self.outputs\n\t        del self.stream\n", "        del self.engine\n\t        del self.context\n\tdef imgpath2pad_array(image_path):\n\t    image = mmcv.imread(image_path, channel_order='rgb')\n\t    height, width = image.shape[:2]\n\t    dst_height, dst_width = 800, 1216\n\t    resize_scale = min(dst_height / height, dst_width / width)\n\t    new_height, new_width = round(height * resize_scale), round(width * resize_scale)\n\t    resize_image = mmcv.imresize(image, (new_width, new_height))\n\t    # pad_height = dst_height - new_height\n", "    # pad_width = dst_width - new_width\n\t    # ((before_1, after_1), ... (before_N, after_N))\n\t    # pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(image.shape) - 2))\n\t    return resize_image # np.pad(resize_image, pad_width = pad_val, mode='constant')\n\tdef array2tensor(array):\n\t    dst_height, dst_width = 800, 1216\n\t    height, width = array.shape[:2]\n\t    pad_height = dst_height - height\n\t    pad_width = dst_width - width\n\t    pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(array.shape) - 2))\n", "    mean = np.asarray([123.675, 116.28, 103.53], dtype=np.float32).reshape(1,1,3)\n\t    std = np.asarray([58.395, 57.12, 57.375], dtype=np.float32).reshape(1,1,3)\n\t    array = (array.astype(np.float32) - mean) / std\n\t    pad_array = np.pad(array, pad_width = pad_val, mode='constant')\n\t    return np.transpose(pad_array, axes=[2, 0, 1])\n\tdef main():\n\t    import mmdet\n\t    trt_maskrcnn = TRTMaskRCNN('../results/mask_rcnn_r50_fpn_2x_coco_dynamic_shape.onnx')\n\t    with open('onnx_output_dict.pkl', 'rb') as f:\n\t        onnx_outputs = torch.load(f, map_location='cpu')\n", "    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n\t    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    cur_dir = os.path.dirname(__file__)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    from PIL import Image\n\t    def get_image_size(filepath):\n", "        im = Image.open(filepath)\n\t        width, height = im.size\n\t        return (width, height)\n\t    image_array = imgpath2pad_array(jpg_image_path)\n\t    # img_metas = [\n\t    #     {\n\t    #         'img_shape':tuple(image_array.shape),\n\t    #         'ori_shape':get_image_size(jpg_image_path)\n\t    #     },\n\t    # ]\n", "    tensor = array2tensor(image_array)\n\t    tensor = np.ascontiguousarray(np.repeat(np.expand_dims(tensor, axis=0), repeats=2, axis=0))\n\t    outputs = trt_maskrcnn.detect(tensor)\n\t    for k in outputs:\n\t        diff = (outputs[k] - onnx_outputs[k])\n\t        print('key: {}, shape: {}, diff: {}'.format(k, outputs[k].shape, np.abs(diff).max()))\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "scripts/codes/001infer_maskrcnn_mmdet_api.py", "chunked_list": ["from mmdet.apis import init_detector, inference_detector\n\timport os\n\timport glob\n\timport mmdet\n\tdirpath = os.path.dirname\n\tpath_join = os.path.join\n\tBASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n\tMMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\tprint('BASE_DIR', BASE_DIR)\n\tprint('MMDET_DIR', MMDET_DIR)\n", "config_file = path_join(BASE_DIR, 'config', 'mask_rcnn_r50_fpn_2x_coco.py')\n\tcheckpoint_file = path_join(BASE_DIR, 'pretrained_model', 'mask_rcnn_r50_fpn_2x_coco_*.pth')\n\tcheckpoint_file = glob.glob(checkpoint_file)[0]\n\tmodel = init_detector(config_file, checkpoint_file, device='cpu')\n\tjpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\tdet_result = inference_detector(model, jpg_image_path)\n\tbasename_woext, ext = os.path.splitext(os.path.basename(jpg_image_path))\n\tresult_pred_path = path_join('../results', basename_woext + '_result' + ext)\n\tos.makedirs(dirpath(result_pred_path), exist_ok=True)\n\tmodel.show_result(jpg_image_path, det_result, out_file=result_pred_path)\n"]}
{"filename": "scripts/codes/002export_onnx.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport argparse\n\timport os.path as osp\n\timport warnings\n\tfrom functools import partial\n\timport numpy as np\n\timport onnx\n\timport torch\n\tfrom mmcv import Config, DictAction\n\tfrom mmdet.core.export import build_model_from_cfg, preprocess_example_input\n", "from mmdet.core.export.model_wrappers import ONNXRuntimeDetector\n\tdef pytorch2onnx(model,\n\t                 input_img,\n\t                 input_shape,\n\t                 normalize_cfg,\n\t                 opset_version=11,\n\t                 show=False,\n\t                 output_file='tmp.onnx',\n\t                 verify=False,\n\t                 test_img=None,\n", "                 do_simplify=False,\n\t                 dynamic_export=None,\n\t                 skip_postprocess=False,\n\t                 force_write=False):\n\t    \"\"\"\n\t    force_write表示 无论onnx文件是否存在都会强制更新onnx\n\t    \"\"\"\n\t    input_config = {\n\t        'input_shape': input_shape,\n\t        'input_path': input_img,\n", "        'normalize_cfg': normalize_cfg\n\t    }\n\t    # prepare input\n\t    one_img, one_meta = preprocess_example_input(input_config)\n\t    img_list, img_meta_list = [one_img], [[one_meta]]\n\t    if skip_postprocess:\n\t        warnings.warn('Not all models support export onnx without post '\n\t                      'process, especially two stage detectors!')\n\t        origin_forward = model.forward\n\t        model.forward = model.forward_dummy\n", "        torch.onnx.export(\n\t            model,\n\t            one_img,\n\t            output_file,\n\t            input_names=['input'],\n\t            export_params=True,\n\t            keep_initializers_as_inputs=True,\n\t            do_constant_folding=True,\n\t            verbose=show,\n\t            opset_version=opset_version)\n", "        model.forward = origin_forward\n\t        print(f'Successfully exported ONNX model without '\n\t              f'post process: {output_file}')\n\t        # return\n\t    else:\n\t        # replace original forward function\n\t        origin_forward = model.forward\n\t        model.forward = partial(\n\t            model.forward,\n\t            img_metas=img_meta_list,\n", "            return_loss=False,\n\t            rescale=False)\n\t        output_names = ['dets', 'labels']\n\t        if model.with_mask:\n\t            output_names.append('masks')\n\t        input_name = 'input'\n\t        dynamic_axes = None\n\t        if dynamic_export:\n\t            dynamic_axes = {\n\t                input_name: {\n", "                    0: 'batch',\n\t                },\n\t                'dets': {\n\t                    0: 'batch',\n\t                    1: 'num_dets',\n\t                },\n\t                'labels': {\n\t                    0: 'batch',\n\t                    1: 'num_dets',\n\t                },\n", "            }\n\t            if model.with_mask:\n\t                dynamic_axes['masks'] = {0: 'batch', 1: 'num_dets'}\n\t        if not os.path.exists(output_file) or force_write:\n\t            torch.onnx.export(\n\t                model,\n\t                img_list,\n\t                output_file,\n\t                input_names=[input_name],\n\t                output_names=output_names,\n", "                export_params=True,\n\t                keep_initializers_as_inputs=True,\n\t                do_constant_folding=True,\n\t                verbose=show,\n\t                opset_version=opset_version,\n\t                dynamic_axes=dynamic_axes)\n\t        model.forward = origin_forward\n\t    if do_simplify:\n\t        import onnxsim\n\t        from mmdet import digit_version\n", "        min_required_version = '0.4.0'\n\t        assert digit_version(onnxsim.__version__) >= digit_version(\n\t            min_required_version\n\t        ), f'Requires to install onnxsim>={min_required_version}'\n\t        model_opt, check_ok = onnxsim.simplify(output_file)\n\t        if check_ok:\n\t            onnx.save(model_opt, output_file)\n\t            print(f'Successfully simplified ONNX model: {output_file}')\n\t        else:\n\t            warnings.warn('Failed to simplify ONNX model.')\n", "    print(f'Successfully exported ONNX model: {output_file}')\n\t    if verify:\n\t        # check by onnx\n\t        onnx_model = onnx.load(output_file)\n\t        onnx.checker.check_model(onnx_model)\n\t        # wrap onnx model\n\t        onnx_model = ONNXRuntimeDetector(output_file, model.CLASSES, 0)\n\t        if dynamic_export:\n\t            # scale up to test dynamic shape\n\t            h, w = [int((_ * 1.5) // 32 * 32) for _ in input_shape[2:]]\n", "            h, w = min(1344, h), min(1344, w)\n\t            input_config['input_shape'] = (1, 3, h, w)\n\t        if test_img is None:\n\t            input_config['input_path'] = input_img\n\t        # prepare input once again\n\t        one_img, one_meta = preprocess_example_input(input_config)\n\t        img_list, img_meta_list = [one_img], [[one_meta]]\n\t        # get pytorch output\n\t        with torch.no_grad():\n\t            pytorch_results = model(\n", "                img_list,\n\t                img_metas=img_meta_list,\n\t                return_loss=False,\n\t                rescale=True)[0]\n\t        img_list = [_.cuda().contiguous() for _ in img_list]\n\t        if dynamic_export:\n\t            img_list = img_list + [_.flip(-1).contiguous() for _ in img_list]\n\t            img_meta_list = img_meta_list * 2\n\t        # get onnx output\n\t        onnx_results = onnx_model(\n", "            img_list, img_metas=img_meta_list, return_loss=False, rescale=True)[0]\n\t        # visualize predictions\n\t        score_thr = 0.3\n\t        out_file_ort, out_file_pt = 'show-ort.png', 'show-pt.png'\n\t        show_img = one_meta['show_img']\n\t        model.show_result(\n\t            show_img,\n\t            pytorch_results,\n\t            score_thr=score_thr,\n\t            show=True,\n", "            win_name='PyTorch',\n\t            out_file=out_file_pt)\n\t        onnx_model.show_result(\n\t            show_img,\n\t            onnx_results,\n\t            score_thr=score_thr,\n\t            show=True,\n\t            win_name='ONNXRuntime',\n\t            out_file=out_file_ort)\n\t        # compare a part of result\n", "        if model.with_mask:\n\t            compare_pairs = list(zip(onnx_results, pytorch_results))\n\t        else:\n\t            compare_pairs = [(onnx_results, pytorch_results)]\n\t        err_msg = 'The numerical values are different between Pytorch' + \\\n\t                  ' and ONNX, but it does not necessarily mean the' + \\\n\t                  ' exported ONNX model is problematic.'\n\t        # check the numerical value\n\t        for onnx_res, pytorch_res in compare_pairs:\n\t            for o_res, p_res in zip(onnx_res, pytorch_res):\n", "                try:\n\t                    np.testing.assert_allclose(\n\t                        o_res, p_res, rtol=0.01, atol=0.1, err_msg=err_msg)\n\t                except AssertionError as e:\n\t                    print(e)\n\t                    print('onnxruntime')\n\t                    print(o_res)\n\t                    print('pytorch')\n\t                    print(p_res)\n\t                    if hasattr(o_res, 'shape') and hasattr(p_res, 'shape'):\n", "                        print('onnxruntime', o_res.shape, 'pytorch', p_res.shape)\n\t        print('The numerical values are the same between Pytorch and ONNX')\n\tdef parse_normalize_cfg(test_pipeline):\n\t    transforms = None\n\t    for pipeline in test_pipeline:\n\t        if 'transforms' in pipeline:\n\t            transforms = pipeline['transforms']\n\t            break\n\t    assert transforms is not None, 'Failed to find `transforms`'\n\t    norm_config_li = [_ for _ in transforms if _['type'] == 'Normalize']\n", "    assert len(norm_config_li) == 1, '`norm_config` should only have one'\n\t    norm_config = norm_config_li[0]\n\t    return norm_config\n\tdef parse_args():\n\t    parser = argparse.ArgumentParser(\n\t        description='Convert MMDetection models to ONNX')\n\t    parser.add_argument('config', help='test config file path')\n\t    parser.add_argument('checkpoint', help='checkpoint file')\n\t    parser.add_argument('--input-img', type=str, help='Images for input')\n\t    parser.add_argument(\n", "        '--show',\n\t        action='store_true',\n\t        help='Show onnx graph and detection outputs')\n\t    parser.add_argument('--output-file', type=str, default='tmp.onnx')\n\t    parser.add_argument('--opset-version', type=int, default=11)\n\t    parser.add_argument(\n\t        '--test-img', type=str, default=None, help='Images for test')\n\t    parser.add_argument(\n\t        '--dataset',\n\t        type=str,\n", "        default='coco',\n\t        help='Dataset name. This argument is deprecated and will be removed \\\n\t        in future releases.')\n\t    parser.add_argument(\n\t        '--verify',\n\t        action='store_true',\n\t        help='verify the onnx model output against pytorch output')\n\t    parser.add_argument(\n\t        '--simplify',\n\t        action='store_true',\n", "        help='Whether to simplify onnx model.')\n\t    parser.add_argument(\n\t        '--shape',\n\t        type=int,\n\t        nargs='+',\n\t        default=[800, 1216],\n\t        help='input image size')\n\t    parser.add_argument(\n\t        '--mean',\n\t        type=float,\n", "        nargs='+',\n\t        default=[123.675, 116.28, 103.53],\n\t        help='mean value used for preprocess input data.This argument \\\n\t        is deprecated and will be removed in future releases.')\n\t    parser.add_argument(\n\t        '--std',\n\t        type=float,\n\t        nargs='+',\n\t        default=[58.395, 57.12, 57.375],\n\t        help='variance value used for preprocess input data. '\n", "        'This argument is deprecated and will be removed in future releases.')\n\t    parser.add_argument(\n\t        '--cfg-options',\n\t        nargs='+',\n\t        action=DictAction,\n\t        help='Override some settings in the used config, the key-value pair '\n\t        'in xxx=yyy format will be merged into config file. If the value to '\n\t        'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '\n\t        'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '\n\t        'Note that the quotation marks are necessary and that no white space '\n", "        'is allowed.')\n\t    parser.add_argument(\n\t        '--dynamic-export',\n\t        action='store_true',\n\t        help='Whether to export onnx with dynamic axis.')\n\t    parser.add_argument(\n\t        '--skip-postprocess',\n\t        action='store_true',\n\t        help='Whether to export model without post process. Experimental '\n\t        'option. We do not guarantee the correctness of the exported '\n", "        'model.')\n\t    args = parser.parse_args()\n\t    return args\n\tif __name__ == '__main__':\n\t    import os\n\t    import glob\n\t    import mmdet\n\t    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n", "    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    config_file = path_join(BASE_DIR, 'config', 'mask_rcnn_r50_fpn_2x_coco.py')\n\t    checkpoint_file = path_join(BASE_DIR, 'pretrained_model', 'mask_rcnn_r50_fpn_2x_coco_*.pth')\n\t    checkpoint_file = glob.glob(checkpoint_file)[0]\n\t    opset_version = 11\n\t    try:\n\t        from mmcv.onnx.symbolic import register_extra_symbolics\n\t    except ModuleNotFoundError:\n", "        raise NotImplementedError('please update mmcv to version>=v1.0.4')\n\t    register_extra_symbolics(opset_version)\n\t    cfg = Config.fromfile(config_file)\n\t    img_scale = [800, 1216]\n\t    input_shape = (1, 3, img_scale[0], img_scale[1])\n\t    # build the model and load checkpoint\n\t    model = build_model_from_cfg(config_file, checkpoint_file)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    normalize_cfg = parse_normalize_cfg(cfg.test_pipeline)\n\t    basename_woext, ext = os.path.splitext(os.path.basename(config_file))\n", "    onnx_path = os.path.join('..', 'results', basename_woext+'.onnx')\n\t    os.makedirs(os.path.dirname(onnx_path), exist_ok=True)\n\t    # convert model to onnx file\n\t    pytorch2onnx(\n\t        model,\n\t        jpg_image_path,\n\t        input_shape,\n\t        normalize_cfg,\n\t        opset_version=opset_version,\n\t        show=True,\n", "        output_file=onnx_path,\n\t        verify=True,\n\t        test_img=None,\n\t        do_simplify=True,\n\t        dynamic_export=False,\n\t        skip_postprocess=False,\n\t        force_write=True)\n"]}
{"filename": "scripts/codes/003run_on_onnx.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport mmcv\n\timport numpy as np\n\tfrom mmcv import Config\n\tfrom mmdet.datasets.pipelines import Compose\n\tfrom mmdet.core import bbox2result\n\tfrom mmdet.datasets import replace_ImageToTensor\n\timport onnxruntime as rt\n\timport warnings\n\timport os\n", "import torch\n\t# from mmdet.datasets.builder import bui\n\tdef imgpath2pad_array(image_path):\n\t    image = mmcv.imread(image_path, channel_order='rgb')\n\t    height, width = image.shape[:2]\n\t    dst_height, dst_width = 800, 1216\n\t    resize_scale = min(dst_height / height, dst_width / width)\n\t    new_height, new_width = round(height * resize_scale), round(width * resize_scale)\n\t    resize_image = mmcv.imresize(image, (new_width, new_height))\n\t    # pad_height = dst_height - new_height\n", "    # pad_width = dst_width - new_width\n\t    # ((before_1, after_1), ... (before_N, after_N))\n\t    # pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(image.shape) - 2))\n\t    return resize_image # np.pad(resize_image, pad_width = pad_val, mode='constant')\n\t# pad numpy array and transpose it to tensor memory map\n\tdef array2tensor(array):\n\t    dst_height, dst_width = 800, 1216\n\t    height, width = array.shape[:2]\n\t    pad_height = dst_height - height\n\t    pad_width = dst_width - width\n", "    pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(array.shape) - 2))\n\t    mean = np.asarray([123.675, 116.28, 103.53], dtype=np.float32).reshape(1,1,3)\n\t    std = np.asarray([58.395, 57.12, 57.375], dtype=np.float32).reshape(1,1,3)\n\t    array = (array.astype(np.float32) - mean) / std\n\t    pad_array = np.pad(array, pad_width = pad_val, mode='constant')\n\t    return np.transpose(pad_array, axes=[2, 0, 1])\n\tdef get_onnx_runner(onnx_filepath):\n\t    # 注册自定义算子\n\t    # get the custom op path\n\t    ort_custom_op_path = ''\n", "    try:\n\t        from mmcv.ops import get_onnxruntime_op_path\n\t        ort_custom_op_path = get_onnxruntime_op_path()\n\t    except (ImportError, ModuleNotFoundError):\n\t        warnings.warn('If input model has custom op from mmcv, \\\n\t            you may have to build mmcv with ONNXRuntime from source.')\n\t    session_options = rt.SessionOptions()\n\t    # register custom op for onnxruntime\n\t    if os.path.exists(ort_custom_op_path):\n\t        session_options.register_custom_ops_library(ort_custom_op_path)\n", "    sess = rt.InferenceSession(onnx_filepath, session_options)\n\t    input_names = [item.name for item in sess.get_inputs()]\n\t    label_names = [item.name for item in sess.get_outputs()]\n\t    def runner(input_tensors):\n\t        nonlocal label_names\n\t        nonlocal input_names\n\t        pred_onnx = sess.run(label_names, dict(zip(input_names, input_tensors)))\n\t        return dict(zip(label_names,pred_onnx))\n\t    return runner\n\tif __name__ == \"__main__\":\n", "    import os\n\t    import mmdet\n\t    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n\t    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    cur_dir = os.path.dirname(__file__)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n", "    from PIL import Image\n\t    def get_image_size(filepath):\n\t        im = Image.open(filepath)\n\t        width, height = im.size\n\t        return (height, width)\n\t    image_array = imgpath2pad_array(jpg_image_path)\n\t    dst_path = os.path.join(cur_dir, '..',  'results', \"image_array.jpg\")\n\t    os.makedirs(dirpath(dst_path), exist_ok=True)\n\t    mmcv.imwrite(image_array[..., ::-1], dst_path)\n\t    img_metas = [\n", "        {\n\t            'img_shape':tuple(image_array.shape),\n\t            'ori_shape':get_image_size(jpg_image_path)\n\t        },\n\t    ]\n\t    # print(image_array.shape)\n\t    tensor = array2tensor(image_array)\n\t    tensor = np.expand_dims(tensor, axis=0)\n\t    # print(tensor.shape)\n\t    onnx_filepath = '../results/mask_rcnn_r50_fpn_2x_coco.onnx'\n", "    runner = get_onnx_runner(onnx_filepath)\n\t    output_dict = runner([tensor])\n\t    torch.save(output_dict, 'onnx_output_dict.pkl')\n\t    import pickle\n\t    with open('./class_names.pickle', 'rb') as f:\n\t        class_names = pickle.load(f)\n\t    score_thr = 0.3\n\t    # print('class_names', class_names)\n\t    for key, value in output_dict.items():\n\t        print(key, value.shape)\n", "    batch_dets = output_dict['dets']\n\t    batch_labels = output_dict['labels']\n\t    batch_masks = output_dict['masks']\n\t    batch_size = tensor.shape[0]\n\t    results = []\n\t    for i in range(batch_size):\n\t        # [N, 5], [N]\n\t        dets, labels = batch_dets[i], batch_labels[i]\n\t        det_mask = dets[:, -1] >= score_thr\n\t        dets = dets[det_mask]\n", "        labels = labels[det_mask]\n\t        # [N, 800, 1216]\n\t        masks = batch_masks[i]\n\t        masks = masks[det_mask]\n\t        img_h, img_w = img_metas[i]['img_shape'][:2]\n\t        ori_h, ori_w = img_metas[i]['ori_shape'][:2]\n\t        scale_factor_w = img_w / ori_w\n\t        scale_factor_h = img_h / ori_h\n\t        scale_factor = np.array([scale_factor_w, scale_factor_h, scale_factor_w, scale_factor_h])\n\t        dets[:, :4] /= scale_factor\n", "        dets_results = bbox2result(dets, labels, len(class_names))\n\t        # 去除 padding\n\t        masks = masks[:, :img_h, :img_w]\n\t        if True:\n\t            masks = masks.astype(np.float32)\n\t            masks = torch.from_numpy(masks)\n\t            masks = torch.nn.functional.interpolate(masks.unsqueeze(0), size=(ori_h, ori_w))\n\t            masks = masks.squeeze(0).detach().numpy()\n\t        if masks.dtype != bool:\n\t            masks = masks >= 0.5\n", "        segms_results = [[] for _ in range(len(class_names))]\n\t        for j in range(len(dets)):\n\t            segms_results[labels[j]].append(masks[j])\n\t        results.append((dets_results, segms_results))\n\t    # 绘制推理结果\n\t    # wrap onnx model\n\t    from mmdet.core.export.model_wrappers import ONNXRuntimeDetector\n\t    onnx_model = ONNXRuntimeDetector(onnx_filepath, class_names, 0)\n\t    onnx_model.show_result(\n\t        jpg_image_path,\n", "        results[0],\n\t        score_thr=score_thr,\n\t        show=True,\n\t        win_name='ONNXRuntime',\n\t        out_file='../results/onnxruntime_result.png')\n"]}
{"filename": "scripts/codes/polygraphy_data_loader.py", "chunked_list": ["import numpy as np\n\timport mmcv\n\timport os\n\t\"\"\"\n\tDefines a `load_data` function that returns a generator yielding\n\tfeed_dicts so that this script can be used as the argument for\n\tthe --data-loader-script command-line parameter.\n\t\"\"\"\n\tINPUT_SHAPE = (1, 2, 28, 28)\n\tdef imgpath2pad_array(image_path):\n", "    image = mmcv.imread(image_path, channel_order='rgb')\n\t    height, width = image.shape[:2]\n\t    dst_height, dst_width = 800, 1216\n\t    resize_scale = min(dst_height / height, dst_width / width)\n\t    new_height, new_width = round(height * resize_scale), round(width * resize_scale)\n\t    resize_image = mmcv.imresize(image, (new_width, new_height))\n\t    # pad_height = dst_height - new_height\n\t    # pad_width = dst_width - new_width\n\t    # ((before_1, after_1), ... (before_N, after_N))\n\t    # pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(image.shape) - 2))\n", "    return resize_image # np.pad(resize_image, pad_width = pad_val, mode='constant')\n\tdef array2tensor(array):\n\t    dst_height, dst_width = 800, 1216\n\t    height, width = array.shape[:2]\n\t    pad_height = dst_height - height\n\t    pad_width = dst_width - width\n\t    pad_val = ((0, pad_height), (0, pad_width), ) + tuple([(0, 0), ] * (len(array.shape) - 2))\n\t    mean = np.asarray([123.675, 116.28, 103.53], dtype=np.float32).reshape(1,1,3)\n\t    std = np.asarray([58.395, 57.12, 57.375], dtype=np.float32).reshape(1,1,3)\n\t    array = (array.astype(np.float32) - mean) / std\n", "    pad_array = np.pad(array, pad_width = pad_val, mode='constant')\n\t    return np.transpose(pad_array, axes=[2, 0, 1])\n\tdef load_data():\n\t    import mmdet\n\t    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    image_array = imgpath2pad_array(jpg_image_path)\n\t    tensor = array2tensor(image_array)\n", "    tensor = np.expand_dims(tensor, axis=0).astype(np.float32)\n\t    # Still totally real data\n\t    yield {\"input\": tensor}"]}
{"filename": "scripts/codes/005export_onnx_with_dynamic_shape.py", "chunked_list": ["# Copyright (c) OpenMMLab. All rights reserved.\n\timport argparse\n\timport os.path as osp\n\timport warnings\n\tfrom functools import partial\n\timport numpy as np\n\timport onnx\n\timport torch\n\tfrom mmcv import Config, DictAction\n\tfrom mmdet.core.export import build_model_from_cfg, preprocess_example_input\n", "from mmdet.core.export.model_wrappers import ONNXRuntimeDetector\n\tdef pytorch2onnx(model,\n\t                 input_img,\n\t                 input_shape,\n\t                 normalize_cfg,\n\t                 opset_version=11,\n\t                 show=False,\n\t                 output_file='tmp.onnx',\n\t                 verify=False,\n\t                 test_img=None,\n", "                 do_simplify=False,\n\t                 dynamic_export=None,\n\t                 skip_postprocess=False,\n\t                 force_write=False):\n\t    input_config = {\n\t        'input_shape': input_shape,\n\t        'input_path': input_img,\n\t        'normalize_cfg': normalize_cfg\n\t    }\n\t    # prepare input\n", "    one_img, one_meta = preprocess_example_input(input_config)\n\t    img_list, img_meta_list = [one_img], [[one_meta]]\n\t    if skip_postprocess:\n\t        warnings.warn('Not all models support export onnx without post '\n\t                      'process, especially two stage detectors!')\n\t        origin_forward = model.forward\n\t        model.forward = model.forward_dummy\n\t        torch.onnx.export(\n\t            model,\n\t            one_img,\n", "            output_file,\n\t            input_names=['input'],\n\t            export_params=True,\n\t            keep_initializers_as_inputs=True,\n\t            do_constant_folding=True,\n\t            verbose=show,\n\t            opset_version=opset_version)\n\t        model.forward = origin_forward\n\t        print(f'Successfully exported ONNX model without '\n\t              f'post process: {output_file}')\n", "        # return\n\t    else:\n\t        # replace original forward function\n\t        origin_forward = model.forward\n\t        model.forward = partial(\n\t            model.forward,\n\t            img_metas=img_meta_list,\n\t            return_loss=False,\n\t            rescale=False)\n\t        output_names = ['dets', 'labels']\n", "        if model.with_mask:\n\t            output_names.append('masks')\n\t        input_name = 'input'\n\t        dynamic_axes = None\n\t        if dynamic_export:\n\t            dynamic_axes = {\n\t                input_name: {\n\t                    0: 'batch',\n\t                },\n\t                'dets': {\n", "                    0: 'batch',\n\t                },\n\t                'labels': {\n\t                    0: 'batch',\n\t                },\n\t            }\n\t            if model.with_mask:\n\t                dynamic_axes['masks'] = {0: 'batch'}\n\t        if not os.path.exists(output_file) or force_write:\n\t            torch.onnx.export(\n", "                model,\n\t                img_list,\n\t                output_file,\n\t                input_names=[input_name],\n\t                output_names=output_names,\n\t                export_params=True,\n\t                keep_initializers_as_inputs=True,\n\t                do_constant_folding=True,\n\t                verbose=show,\n\t                opset_version=opset_version,\n", "                dynamic_axes=dynamic_axes)\n\t        model.forward = origin_forward\n\t    if do_simplify:\n\t        import onnxsim\n\t        from mmdet import digit_version\n\t        min_required_version = '0.4.0'\n\t        assert digit_version(onnxsim.__version__) >= digit_version(\n\t            min_required_version\n\t        ), f'Requires to install onnxsim>={min_required_version}'\n\t        model_opt, check_ok = onnxsim.simplify(output_file)\n", "        if check_ok:\n\t            onnx.save(model_opt, output_file)\n\t            print(f'Successfully simplified ONNX model: {output_file}')\n\t        else:\n\t            warnings.warn('Failed to simplify ONNX model.')\n\t    print(f'Successfully exported ONNX model: {output_file}')\n\t    if verify:\n\t        # check by onnx\n\t        onnx_model = onnx.load(output_file)\n\t        onnx.checker.check_model(onnx_model)\n", "        # wrap onnx model\n\t        onnx_model = ONNXRuntimeDetector(output_file, model.CLASSES, 0)\n\t        # if dynamic_export:\n\t        #     # scale up to test dynamic shape\n\t        #     h, w = [int((_ * 1.5) // 32 * 32) for _ in input_shape[2:]]\n\t        #     h, w = min(1344, h), min(1344, w)\n\t        #     input_config['input_shape'] = (1, 3, h, w)\n\t        if test_img is None:\n\t            input_config['input_path'] = input_img\n\t        # prepare input once again\n", "        one_img, one_meta = preprocess_example_input(input_config)\n\t        img_list, img_meta_list = [one_img], [[one_meta]]\n\t        # get pytorch output\n\t        with torch.no_grad():\n\t            pytorch_results = model(\n\t                img_list,\n\t                img_metas=img_meta_list,\n\t                return_loss=False,\n\t                rescale=True)[0]\n\t        img_list = [_.cuda().contiguous() for _ in img_list]\n", "        if dynamic_export:\n\t            img_list = img_list + [_.flip(-1).contiguous() for _ in img_list]\n\t            img_meta_list = img_meta_list * 2\n\t        # get onnx output\n\t        onnx_results = onnx_model(\n\t            img_list, img_metas=img_meta_list, return_loss=False, rescale=True)[0]\n\t        # visualize predictions\n\t        score_thr = 0.0001\n\t        out_file_ort, out_file_pt = 'show-ort.png', 'show-pt.png'\n\t        show_img = one_meta['show_img']\n", "        model.show_result(\n\t            show_img,\n\t            pytorch_results,\n\t            score_thr=score_thr,\n\t            show=True,\n\t            win_name='PyTorch',\n\t            out_file=out_file_pt)\n\t        onnx_model.show_result(\n\t            show_img,\n\t            onnx_results,\n", "            score_thr=score_thr,\n\t            show=True,\n\t            win_name='ONNXRuntime',\n\t            out_file=out_file_ort)\n\t        # compare a part of result\n\t        if model.with_mask:\n\t            compare_pairs = list(zip(onnx_results, pytorch_results))\n\t        else:\n\t            compare_pairs = [(onnx_results, pytorch_results)]\n\t        err_msg = 'The numerical values are different between Pytorch' + \\\n", "                  ' and ONNX, but it does not necessarily mean the' + \\\n\t                  ' exported ONNX model is problematic.'\n\t        # check the numerical value\n\t        for onnx_res, pytorch_res in compare_pairs:\n\t            for o_res, p_res in zip(onnx_res, pytorch_res):\n\t                try:\n\t                    np.testing.assert_allclose(\n\t                        o_res, p_res, rtol=0.01, atol=0.1, err_msg=err_msg)\n\t                except AssertionError as e:\n\t                    print(e)\n", "                    print('onnxruntime')\n\t                    print(o_res)\n\t                    print('pytorch')\n\t                    print(p_res)\n\t                    if hasattr(o_res, 'shape') and hasattr(p_res, 'shape'):\n\t                        print('onnxruntime', o_res.shape, 'pytorch', p_res.shape)\n\t        print('The numerical values are the same between Pytorch and ONNX')\n\tdef parse_normalize_cfg(test_pipeline):\n\t    transforms = None\n\t    for pipeline in test_pipeline:\n", "        if 'transforms' in pipeline:\n\t            transforms = pipeline['transforms']\n\t            break\n\t    assert transforms is not None, 'Failed to find `transforms`'\n\t    norm_config_li = [_ for _ in transforms if _['type'] == 'Normalize']\n\t    assert len(norm_config_li) == 1, '`norm_config` should only have one'\n\t    norm_config = norm_config_li[0]\n\t    return norm_config\n\tdef parse_args():\n\t    parser = argparse.ArgumentParser(\n", "        description='Convert MMDetection models to ONNX')\n\t    parser.add_argument('config', help='test config file path')\n\t    parser.add_argument('checkpoint', help='checkpoint file')\n\t    parser.add_argument('--input-img', type=str, help='Images for input')\n\t    parser.add_argument(\n\t        '--show',\n\t        action='store_true',\n\t        help='Show onnx graph and detection outputs')\n\t    parser.add_argument('--output-file', type=str, default='tmp.onnx')\n\t    parser.add_argument('--opset-version', type=int, default=11)\n", "    parser.add_argument(\n\t        '--test-img', type=str, default=None, help='Images for test')\n\t    parser.add_argument(\n\t        '--dataset',\n\t        type=str,\n\t        default='coco',\n\t        help='Dataset name. This argument is deprecated and will be removed \\\n\t        in future releases.')\n\t    parser.add_argument(\n\t        '--verify',\n", "        action='store_true',\n\t        help='verify the onnx model output against pytorch output')\n\t    parser.add_argument(\n\t        '--simplify',\n\t        action='store_true',\n\t        help='Whether to simplify onnx model.')\n\t    parser.add_argument(\n\t        '--shape',\n\t        type=int,\n\t        nargs='+',\n", "        default=[800, 1216],\n\t        help='input image size')\n\t    parser.add_argument(\n\t        '--mean',\n\t        type=float,\n\t        nargs='+',\n\t        default=[123.675, 116.28, 103.53],\n\t        help='mean value used for preprocess input data.This argument \\\n\t        is deprecated and will be removed in future releases.')\n\t    parser.add_argument(\n", "        '--std',\n\t        type=float,\n\t        nargs='+',\n\t        default=[58.395, 57.12, 57.375],\n\t        help='variance value used for preprocess input data. '\n\t        'This argument is deprecated and will be removed in future releases.')\n\t    parser.add_argument(\n\t        '--cfg-options',\n\t        nargs='+',\n\t        action=DictAction,\n", "        help='Override some settings in the used config, the key-value pair '\n\t        'in xxx=yyy format will be merged into config file. If the value to '\n\t        'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '\n\t        'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '\n\t        'Note that the quotation marks are necessary and that no white space '\n\t        'is allowed.')\n\t    parser.add_argument(\n\t        '--dynamic-export',\n\t        action='store_true',\n\t        help='Whether to export onnx with dynamic axis.')\n", "    parser.add_argument(\n\t        '--skip-postprocess',\n\t        action='store_true',\n\t        help='Whether to export model without post process. Experimental '\n\t        'option. We do not guarantee the correctness of the exported '\n\t        'model.')\n\t    args = parser.parse_args()\n\t    return args\n\tif __name__ == '__main__':\n\t    import os\n", "    import glob\n\t    import mmdet\n\t    dirpath = os.path.dirname\n\t    path_join = os.path.join\n\t    BASE_DIR = path_join(dirpath(dirpath(os.path.realpath(__file__))), 'models', 'mask-rcnn')\n\t    MMDET_DIR = dirpath(dirpath(mmdet.__file__))\n\t    print('BASE_DIR', BASE_DIR)\n\t    print('MMDET_DIR', MMDET_DIR)\n\t    config_file = path_join(BASE_DIR, 'config', 'mask_rcnn_r50_fpn_2x_coco.py')\n\t    checkpoint_file = path_join(BASE_DIR, 'pretrained_model', 'mask_rcnn_r50_fpn_2x_coco_*.pth')\n", "    checkpoint_file = glob.glob(checkpoint_file)[0]\n\t    opset_version = 11\n\t    try:\n\t        from mmcv.onnx.symbolic import register_extra_symbolics\n\t    except ModuleNotFoundError:\n\t        raise NotImplementedError('please update mmcv to version>=v1.0.4')\n\t    register_extra_symbolics(opset_version)\n\t    cfg = Config.fromfile(config_file)\n\t    img_scale = [800, 1216]\n\t    input_shape = (1, 3, img_scale[0], img_scale[1])\n", "    # build the model and load checkpoint\n\t    model = build_model_from_cfg(config_file, checkpoint_file)\n\t    jpg_image_path = path_join(MMDET_DIR,  'demo', 'demo.jpg')\n\t    normalize_cfg = parse_normalize_cfg(cfg.test_pipeline)\n\t    basename_woext, ext = os.path.splitext(os.path.basename(config_file))\n\t    basename_woext += '_dynamic_shape'\n\t    onnx_path = os.path.join('..', 'results', basename_woext+'.onnx')\n\t    os.makedirs(os.path.dirname(onnx_path), exist_ok=True)\n\t    # convert model to onnx file\n\t    pytorch2onnx(\n", "        model,\n\t        jpg_image_path,\n\t        input_shape,\n\t        normalize_cfg,\n\t        opset_version=opset_version,\n\t        show=True,\n\t        output_file=onnx_path,\n\t        verify=True,\n\t        test_img=None,\n\t        do_simplify=True,\n", "        dynamic_export=True,\n\t        skip_postprocess=False,\n\t        force_write=True)\n"]}
