{"filename": "__init__.py", "chunked_list": []}
{"filename": "scene_graph/scene_graph.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport matplotlib\n\tmatplotlib.use(\"Agg\")\n\timport networkx as nx\n\timport sys, os\n\tfrom pathlib import Path\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom scene_graph.nodes import Node\n\tfrom networkx.drawing import nx_pydot\n", "import pandas as pd\n\timport torch\n\timport math\n\tfrom collections import defaultdict\n\t'''Create scenegraph using raw Carla json frame data or raw image data'''\n\tclass SceneGraph:\n\t    #graph can be initialized with a framedict containing raw Carla data to load all objects at once\n\t    def __init__(self, relation_extractor, framedict= None, framenum=None, bounding_boxes = None, bev = None, coco_class_names=None, platform='carla'):\n\t        #configure relation extraction settings\n\t        self.relation_extractor = relation_extractor\n", "        self.platform = platform\n\t        if self.platform == \"carla\":\n\t            self.g = nx.MultiDiGraph() #initialize scenegraph as networkx graph\n\t            self.road_node = Node(\"Root Road\", {\"name\":\"Root Road\"}, \"road\", self.relation_extractor.actors.index(\"road\"))\n\t            self.add_node(self.road_node)   #adding the road as the root node\n\t            self.parse_json(framedict) # processing json framedict\n\t        elif self.platform == \"image\":\n\t            self.g = nx.MultiDiGraph()  # initialize scenegraph as networkx graph\n\t            # road and lane settings.\n\t            self.road_node = Node(\"Root Road\", {\"name\":\"Root Road\"}, \"road\", self.relation_extractor.actors.index(\"road\"))\n", "            self.add_node(self.road_node)   # adding the road as the root node\n\t            # set ego location to middle-bottom of image.\n\t            # set ego location to middle-bottom of image.\n\t            self.ego_location = bev.get_projected_point(\n\t                                    bev.params['width']/2, \n\t                                    bev.params['height'])\n\t            self.ego_location = bev.apply_depth_estimation(\n\t                                    self.ego_location[0], \n\t                                    self.ego_location[1])\n\t            #import pdb; pdb.set_trace()\n", "            self.egoNode = Node('ego car', {\n\t                                       'location_x': self.ego_location[0], \n\t                                       'location_y': self.ego_location[1]}, \n\t                                       'ego_car', self.relation_extractor.actors.index(\"ego_car\"))\n\t            # add ego-vehicle to graph\n\t            self.add_node(self.egoNode)\n\t            # add middle, right, and left lanes to graph\n\t            self.relation_extractor.extract_relative_lanes(self) \n\t            # convert bounding boxes to nodes and build relations.\n\t            boxes, labels, image_size = bounding_boxes\n", "            self.get_nodes_from_bboxes(bev, boxes, labels, coco_class_names)\n\t            self.relation_extractor.extract_semantic_relations(self)\n\t    def get_nodes_from_bboxes(self, bev, boxes, labels, coco_class_names):\n\t        for idx, (box, label) in enumerate(zip(boxes, labels)):\n\t            box = box.cpu().numpy().tolist()\n\t            class_name = coco_class_names[label]\n\t            #import pdb; pdb.set_trace()\n\t            attr = {'left': box[0], 'top': box[1], 'right': box[2], 'bottom': box[3]}\n\t            # exclude vehicle dashboard\n\t            if attr['top'] >= bev.params['height'] - 100: continue;\n", "            # filter traffic participants\n\t            actor_type = \"\"\n\t            for actor_ in range(len(self.relation_extractor.actors)):\n\t                if class_name == self.relation_extractor.actors[actor_]:\n\t                    actor_type = self.relation_extractor.actors[actor_]\n\t                    actor_value = actor_\n\t                elif f\"{self.relation_extractor.actors[actor_].upper()}_NAMES\" in self.relation_extractor.conf.relation_extraction_settings:\n\t                    if class_name in self.relation_extractor.conf.relation_extraction_settings[f\"{self.relation_extractor.actors[actor_].upper()}_NAMES\"]: #ie specific car name\n\t                        actor_type = self.relation_extractor.actors[actor_]\n\t                        actor_value = actor_\n", "            if actor_type == \"\": #if actor's type not included in ACTOR_NAMES\n\t                continue\n\t            # map center-bottom of bounding box to warped image\n\t            x_mid = (attr['right'] + attr['left']) / 2\n\t            y_bottom = attr['bottom']\n\t            x_bev, y_bev = bev.get_projected_point(x_mid, y_bottom)\n\t            # approximate locations / distances in feet\n\t            attr['location_x'], attr['location_y'] = bev.apply_depth_estimation(x_bev, y_bev)\n\t            # due to bev warp, vehicles far from horizon get warped behind car, thus we will default them as far from vehcile\n\t            if attr['location_y'] > self.egoNode.attr['location_y']:\n", "                # should store this in a list dictating the filename of the scene\n\t                print('BEV warped to behind vehicle')\n\t                attr['location_y'] = self.egoNode.attr['location_y'] - self.relation_extractor.proximity_rels[-1][1] #assuming the last proximity threshold will be the most vague\n\t            attr['rel_location_x'] = attr['location_x'] - self.egoNode.attr['location_x']           # x position relative to ego (neg left, pos right)\n\t            attr['rel_location_y'] = attr['location_y'] - self.egoNode.attr['location_y']           # y position relative to ego (neg vehicle ahead of ego)\n\t            attr['distance_abs'] = math.sqrt(attr['rel_location_x']**2 + attr['rel_location_y']**2) # absolute distance from ego\n\t            #import pdb; pdb.set_trace()\n\t            node = Node('%s_%d' % (actor_type, idx), attr, actor_type, actor_value)\n\t            # add vehicle to graph\n\t            self.add_node(node) #change\n", "            # add lane vehicle relations to graph\n\t            self.relation_extractor.add_mapping_to_relative_lanes(self, node)\n\t    def add_node(self, node):\n\t        '''Add a single node to graph. node can be any hashable datatype including objects'''\n\t        color = 'white'\n\t        if 'ego' in node.name.lower():\n\t            color = 'red'\n\t        elif 'car' in node.name.lower():\n\t            color = 'green'\n\t        elif 'lane' in node.name.lower():\n", "            color = 'yellow'\n\t        self.g.add_node(node, attr=node.attr, label=node.name, style='filled', fillcolor=color)\n\t# add all pair-wise relations between two nodes\n\t    def add_relations(self, relations_list):\n\t        #import pdb; pdb.set_trace()\n\t        for relation in relations_list:\n\t            self.add_relation(relation)\n\t    # add a single pair-wise relation between two nodes\n\t    def add_relation(self, relation):\n\t        if relation != []:\n", "            node1, edge, node2 = relation\n\t            if node1 in self.g.nodes and node2 in self.g.nodes:\n\t                self.g.add_edge(node1, node2, value=self.relation_extractor.rels.index(edge), label=edge, color=self.relation_extractor.relational_colors[edge]) #relations might need to be turned into objects not just remain strings\n\t            else:\n\t                raise NameError(\"One or both nodes in relation do not exist in graph. Relation: \" + str(relation))\n\t    #parses actor dict and adds nodes to graph. this can be used for all actor types.\n\t    def add_actor_dict(self, key, actordict): #TODO test with signs and different actor types besides cars\n\t        for actor_id, attr in actordict.items():\n\t            # filter actors behind ego \n\t            n = Node(None, None, attr['name'], None)   #using the actor key as the node name and the dict as its attributes.\n", "            n.label, n.value = self.relation_extractor.get_actor_type(n)   \n\t            n.attr = attr\n\t            x1, y1 = math.cos(math.radians(self.egoNode.attr['rotation'][0])), math.sin(math.radians(self.egoNode.attr['rotation'][0]))\n\t            x2, y2 = attr['location'][0] - self.egoNode.attr['location'][0], attr['location'][1] - self.egoNode.attr['location'][1]\n\t            inner_product = x1*x2 + y1*y2\n\t            length_product = math.sqrt(x1**2+y1**2) + math.sqrt(x2**2+y2**2)\n\t            degree = math.degrees(math.acos(inner_product / length_product))\n\t            if key == \"sign\":\n\t              import pdb; pdb.set_trace()\n\t            if (degree <=190 or degree >= 350):#TEST FOR CARLA #if degree <= 80 or (degree >=280 and degree <= 360):\n", "                # if abs(self.egoNode.attr['lane_idx'] - attr['lane_idx']) <= 1 \\\n\t                # or (\"invading_lane\" in self.egoNode.attr and (2*self.egoNode.attr['invading_lane'] - self.egoNode.attr['orig_lane_idx']) == attr['lane_idx']):\n\t                n.name = n.label.lower() + \"_\" + actor_id\n\t                self.add_node(n)\n\t                self.relation_extractor.add_mapping_to_relative_lanes(self, n)\n\t    #add the contents of a whole framedict to the graph\n\t    def parse_json(self, framedict):\n\t#        self.egoNode = Node(\"ego:\"+framedict['ego']['name'], framedict['ego'], 'CAR')    \n\t        self.egoNode = Node('ego car', framedict['ego'], 'ego_car', self.relation_extractor.actors.index(\"ego_car\"))\n\t        self.add_node(self.egoNode) #change\n", "        #rotating axes to align with ego. yaw axis is the primary rotation axis in vehicles\n\t        self.ego_yaw = math.radians(self.egoNode.attr['rotation'][0])\n\t        self.ego_cos_term = math.cos(self.ego_yaw)\n\t        self.ego_sin_term = math.sin(self.ego_yaw)\n\t        self.relation_extractor.extract_relative_lanes(self)\n\t#         self.relation_extractor = RelationExtractor(self.egoNode) #see line 99\n\t        for key, attrs in framedict.items():   \n\t            if key == 'actors' or key == 'sign':\n\t              self.add_actor_dict(key, attrs)\n\t        self.relation_extractor.extract_semantic_relations(self)\n", "    def visualize(self, filename=None):\n\t        #import pdb;pdb.set_trace()\n\t        A = nx_pydot.to_pydot(self.g)\n\t        A.write_png(filename)\n\t#==========================================================================================\n\t# this is for creation of trainer input using carla data\n\t#==========================================================================================\n\t    def get_carla_node_embeddings(self, feature_list):\n\t        rows = []\n\t        labels=[]\n", "        ego_attrs = None\n\t        #extract ego attrs for creating relative features\n\t        for node, data in self.g.nodes.items():\n\t            if \"ego\" in str(node):\n\t                ego_attrs = data['attr']\n\t        if ego_attrs == None:\n\t            raise NameError(\"Ego not found in scenegraph\")\n\t        #rotating axes to align with ego. yaw axis is the primary rotation axis in vehicles\n\t        ego_yaw = math.radians(ego_attrs['rotation'][0])\n\t        cos_term = math.cos(ego_yaw)\n", "        sin_term = math.sin(ego_yaw)\n\t        def rotate_coords(x, y): \n\t            new_x = (x*cos_term) + (y*sin_term)\n\t            new_y = ((-x)*sin_term) + (y*cos_term)\n\t            return new_x, new_y\n\t        def get_carla_embedding(node, row):\n\t            row['type_'+str(node.value)] = 1 #assign 1hot class label\n\t            return row\n\t        for idx, node in enumerate(self.g.nodes):\n\t            d = defaultdict()\n", "            row = get_carla_embedding(node, d)\n\t            labels.append(node.value)\n\t            rows.append(row)\n\t        embedding = pd.DataFrame(data=rows, columns=feature_list)\n\t        embedding = embedding.fillna(value=0) #fill in NaN with zeros\n\t        embedding = torch.FloatTensor(embedding.values)\n\t        return embedding\n\t    def get_carla_edge_embeddings(self, node_name2idx):\n\t        edge_index = []\n\t        edge_attr = []\n", "        for src, dst, edge in self.g.edges(data=True):\n\t            edge_index.append((node_name2idx[src], node_name2idx[dst]))\n\t            edge_attr.append(edge['value'])\n\t        edge_index = torch.transpose(torch.LongTensor(edge_index), 0, 1)\n\t        edge_attr  = torch.LongTensor(edge_attr)\n\t        return edge_index, edge_attr\n\t    #===================================================================\n\t    # this is for creation of trainer input using image data \n\t    #===================================================================\n\t    def get_real_image_node_embeddings(self, feature_list):\n", "        rows = []\n\t        labels = []\n\t        ego_attrs = None\n\t        # extract ego attrs for creating relative features\n\t        for node, data in self.g.nodes.items():\n\t            if \"ego\" in str(node).lower():\n\t                ego_attrs = data['attr']\n\t        if ego_attrs == None:\n\t            raise NameError(\"Ego not found in scenegraph\")\n\t        def get_real_embedding(node, row):\n", "            # for key in self.feature_list:\n\t            #     if key in node.attr:\n\t            #         row[key] = node.attr[key]\n\t            row['type_'+str(node.value)] = 1  # assign 1hot class label\n\t            return row\n\t        for idx, node in enumerate(self.g.nodes):\n\t            d = defaultdict()\n\t            row = get_real_embedding(node, d)\n\t            labels.append(node.value)\n\t            rows.append(row)\n", "        embedding = pd.DataFrame(data=rows, columns=feature_list)\n\t        embedding = embedding.fillna(value=0)  # fill in NaN with zeros\n\t        embedding = torch.FloatTensor(embedding.values)\n\t        #import pdb; pdb.set_trace()\n\t        return embedding\n\t    def get_real_image_edge_embeddings(self, node_name2idx):\n\t      edge_index = []\n\t      edge_attr = []\n\t      for src, dst, edge in self.g.edges(data=True):\n\t          #import pdb; pdb.set_trace()\n", "          edge_index.append((node_name2idx[src], node_name2idx[dst]))\n\t          edge_attr.append(edge['value'])\n\t      edge_index = torch.transpose(torch.LongTensor(edge_index), 0, 1)\n\t      edge_attr = torch.LongTensor(edge_attr)\n\t      return edge_index, edge_attr\n\t    #==================================================================\n"]}
{"filename": "scene_graph/__init__.py", "chunked_list": []}
{"filename": "scene_graph/nodes.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\tclass Node:\n\t    def __init__(self, name, attr, label=None, value = None):\n\t        self.name = name  # Car-1, Car-2.\n\t        self.attr = attr  # bounding box info\n\t        self.label = label  # ActorType (ie \"car\")\n\t        self.value = value # ActorType index in the config's ACTOR_NAMES list \n\t    def __repr__(self):\n\t        return \"%s\" % self.name\n"]}
{"filename": "scene_graph/relation_extractor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport itertools\n\timport math\n\timport sys\n\timport os\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom scene_graph.nodes import Node\n\t#This class extracts relations for every pair of entities in a scene\n\tclass RelationExtractor:\n", "    def __init__(self, config):\n\t        self.conf = config\n\t        self.actors = config.relation_extraction_settings[\"ACTOR_NAMES\"]\n\t        self.rels = config.relation_extraction_settings[\"RELATION_NAMES\"]\n\t        self.wanted_directional_relation_dict = {(i[0],i[1]):i[2] for i in config.relation_extraction_settings[\"directional_relation_list\"]}\n\t        self.wanted_proximity_relation_dict = {(i[0],i[1]):i[2] for i in config.relation_extraction_settings[\"proximity_relation_list\"]}\n\t        self.proximity_rels = self.conf.relation_extraction_settings[\"PROXIMITY_THRESHOLDS\"]\n\t        self.directional_rels = config.relation_extraction_settings[\"DIRECTIONAL_THRESHOLDS\"]\n\t        self.relational_colors = {i[0]:i[1] for i in config.relation_extraction_settings[\"RELATION_COLORS\"]}\n\t        self.LANE_THRESHOLD = self.conf.relation_extraction_settings['LANE_THRESHOLD'] # feet. if object's center is more than this distance away from ego's center, build left or right lane relation\n", "#         feet. if object's center is within this distance of ego's center, build middle lane relation\n\t        #self.CENTER_LANE_THRESHOLD = self.conf.relation_extraction_settings['CENTER_LANE_THRESHOLD']\n\t    def get_actor_type(self, actor):\n\t        for actor_ in range(len(self.actors)):\n\t            if actor.label == self.actors[actor_]:\n\t                return self.actors[actor_], actor_ #return the actor type along with its index in the ACTOR_NAMES list\n\t            elif actor.label.lower() == self.actors[actor_]:\n\t                return self.actors[actor_], actor_\n\t            elif f\"{self.actors[actor_].upper()}_NAMES\" in self.conf.relation_extraction_settings:\n\t              for actor_names in self.conf.relation_extraction_settings[f\"{self.actors[actor_].upper()}_NAMES\"]: #go through different names of actor type (ie Tesla for type car)\n", "                  if actor_names in actor.label:\n\t                      return self.actors[actor_], actor_\n\t                  elif actor_names in actor.label.lower():\n\t                      return self.actors[actor_], actor_\n\t        raise NameError(\"Actor name not found for actor with name: \" + actor.attr[\"name\"])\n\t    def get_config(self):\n\t        return self.conf\n\t    #takes in two entities and extracts all relations between those two entities. extracted relations are bidirectional    \n\t    def extract_relations(self, actor1, actor2):\n\t        type1 ,_ = self.get_actor_type(actor1)\n", "        type2 ,_= self.get_actor_type(actor2)\n\t        relations_list = []\n\t        if (type1,type2) in self.wanted_proximity_relation_dict.keys():\n\t            relations_list += self.extract_distance_relations_actor1_actor2(actor1, actor2, type1, type2) #always pass in order that they are defined in the list\n\t        if (type1,type2) in self.wanted_directional_relation_dict.keys():\n\t            relations_list += self.extract_directional_relation_actor1_actor2(actor1, actor2, type1, type2) #always pass in order that they are defined in the list\n\t        return relations_list\n\t    def extract_relative_lanes(self, scene_graph): #keep as you will always need to add lanes\n\t        if self.conf.dataset_type == \"carla\":\n\t            scene_graph.left_lane = Node(\"lane_left\", {\"curr\":\"lane_left\"}, \"lane\",  self.actors.index(\"lane\")) #change actor.lane to just lane \n", "            scene_graph.right_lane = Node(\"lane_right\", {\"curr\":\"lane_right\"}, \"lane\",  self.actors.index(\"lane\"))\n\t            scene_graph.middle_lane = Node(\"lane_middle\", {\"curr\":\"lane_middle\"}, \"lane\",  self.actors.index(\"lane\"))\n\t        elif self.conf.dataset_type == \"image\":\n\t            scene_graph.left_lane = Node('Left Lane', {}, \"lane\",  self.actors.index(\"lane\"))\n\t            scene_graph.right_lane = Node('Right Lane', {}, \"lane\",  self.actors.index(\"lane\"))\n\t            scene_graph.middle_lane = Node('Middle Lane', {}, \"lane\",  self.actors.index(\"lane\"))\n\t        scene_graph.add_node(scene_graph.left_lane)\n\t        scene_graph.add_node(scene_graph.right_lane)\n\t        scene_graph.add_node(scene_graph.middle_lane)\n\t        #if \"isIn\" in self.directional_rels:\n", "        scene_graph.add_relation([scene_graph.left_lane, \"isIn\", scene_graph.road_node]) #if we assume lanes and roads must be in graph, then just check to see if isIn in the wanted relations?\n\t        scene_graph.add_relation([scene_graph.right_lane, \"isIn\", scene_graph.road_node])\n\t        scene_graph.add_relation([scene_graph.middle_lane, \"isIn\", scene_graph.road_node])\n\t        scene_graph.add_relation([scene_graph.egoNode, \"isIn\", scene_graph.middle_lane])    \n\t#         else:\n\t#             raise ValueError(\"isIn relation absent from config\")\n\t    def add_mapping_to_relative_lanes(self, scene_graph, object_node): #leave this in if we can assume that there will always be lanes\n\t        if self.conf.dataset_type == \"carla\":\n\t            _, ego_y = self.rotate_coords(scene_graph, scene_graph.egoNode.attr['location'][0], scene_graph.egoNode.attr['location'][1]) #NOTE: X corresponds to forward/back displacement and Y corresponds to left/right displacement\n\t            _, new_y = self.rotate_coords(scene_graph, object_node.attr['location'][0], object_node.attr['location'][1])\n", "            y_diff = new_y - ego_y\n\t            if y_diff < -self.LANE_THRESHOLD:\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.left_lane])\n\t            elif y_diff >  self.LANE_THRESHOLD:\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.right_lane])\n\t            elif y_diff <= self.LANE_THRESHOLD and y_diff >= -self.LANE_THRESHOLD: #check\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.middle_lane])\n\t#            elif abs(y_diff) <= self.CENTER_LANE_THRESHOLD:\n\t#                scene_graph.add_relation([object_node, \"isIn\", scene_graph.middle_lane])\n\t        elif self.conf.dataset_type == \"image\": \n", "            if object_node.attr['rel_location_x'] < -self.LANE_THRESHOLD:\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.left_lane]) \n\t            elif object_node.attr['rel_location_x'] > self.LANE_THRESHOLD:\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.right_lane])\n\t#            elif abs(object_node.attr['rel_location_x']) <= self.CENTER_LANE_THRESHOLD:\n\t#                scene_graph.add_relation([object_node, \"isIn\", scene_graph.middle_lane])\n\t            elif object_node.attr['rel_location_x'] <= self.LANE_THRESHOLD and object_node.attr['rel_location_x'] >= -self.LANE_THRESHOLD:\n\t                scene_graph.add_relation([object_node, \"isIn\", scene_graph.middle_lane])\n\t    def extract_semantic_relations(self, scene_graph):\n\t        for node1, node2 in itertools.combinations(scene_graph.g.nodes, 2):\n", "            if node1.name != node2.name and (node1.name != \"Root Road\" and node2.name != \"Root Road\"): #dont build self-relations\n\t                scene_graph.add_relations(self.extract_relations(node1, node2))\n\t    #copied from get_node_embeddings(). rotates coordinates to be relative to ego vector.\n\t    def rotate_coords(self, scene_graph, x, y): \n\t        new_x = (x*scene_graph.ego_cos_term) + (y*scene_graph.ego_sin_term)\n\t        new_y = ((-x)*scene_graph.ego_sin_term) + (y*scene_graph.ego_cos_term)\n\t        return new_x, new_y\n\t#~~~~~~~~~specific relations for each pair of actors possible~~~~~~~~~~~~\n\t#actor 1 corresponds to the first actor in the function name and actor2 the second\n\t    def extract_distance_relations_actor1_actor2(self, actor1, actor2, type1, type2):\n", "        relation_list = []\n\t        if self.euclidean_distance(actor1, actor2) <= self.wanted_proximity_relation_dict[(type1,type2)]:\n\t            relation_list += self.create_proximity_relations(actor1, actor2)\n\t            relation_list += self.create_proximity_relations(actor2, actor1)\n\t            return relation_list\n\t        return relation_list\n\t    def extract_directional_relation_actor1_actor2(self, actor1, actor2, type1, type2):\n\t        relation_list = []\n\t        if self.euclidean_distance(actor1, actor2) <= self.wanted_directional_relation_dict[(type1,type2)]:\n\t            # One of these relations get overwritten in the visualizer for some reason...\n", "            relation_list += self.extract_directional_relation(actor1, actor2)\n\t            relation_list += self.extract_directional_relation(actor2, actor1)\n\t            return relation_list\n\t        return relation_list\n\t#~~~~~~~~~~~~~~~~~~UTILITY FUNCTIONS~~~~~~~~~~~~~~~~~~~~~~\n\t    #return euclidean distance between actors\n\t    def euclidean_distance(self, actor1, actor2):\n\t        if self.conf.dataset_type == \"carla\":\n\t            l1 = actor1.attr['location']\n\t            l2 = actor2.attr['location']\n", "            distance = math.sqrt((l1[0] - l2[0])**2 + (l1[1]- l2[1])**2 + (l1[2] - l2[2])**2)\n\t        elif self.conf.dataset_type == \"image\":\n\t            l1 = (actor1.attr['location_x'], actor1.attr['location_y'])\n\t            l2 = (actor2.attr['location_x'], actor2.attr['location_y'])\n\t            distance = math.sqrt((l1[0] - l2[0])**2 + (l1[1] - l2[1])**2)\n\t            # print(actor1, actor2, distance)\n\t        return distance\n\t    #check if an actor is in a certain lane\n\t    def in_lane(self, actor1, actor2):\n\t        if 'lane_idx' in actor1.attr.keys():\n", "            # calculate the distance bewteen actor1 and actor2\n\t            # if it is below 3.5 then they have is in relation.\n\t                # if actor1 is ego: if actor2 is not equal to the ego_lane's index then it's invading relation.\n\t            if actor1.attr['lane_idx'] == actor2.attr['lane_idx']:\n\t                return True\n\t            if \"invading_lane\" in actor1.attr:\n\t                if actor1.attr['invading_lane'] == actor2.attr['lane_idx']:\n\t                    return True\n\t                if \"orig_lane_idx\" in actor1.attr:\n\t                    if actor1.attr['orig_lane_idx'] == actor2.attr['lane_idx']:\n", "                        return True\n\t        else:\n\t            return False\n\t    def create_proximity_relations(self, actor1, actor2): #how\n\t        for relation in self.proximity_rels:\n\t            if self.euclidean_distance(actor1, actor2) <= relation[1]:\n\t                return [[actor1,relation[0], actor2]]\n\t        return []\n\t    def extract_directional_relation(self, actor1, actor2):\n\t        relation_list = []\n", "        if self.conf.dataset_type == \"carla\":\n\t            # gives directional relations between actors based on their 2D absolute positions.      \n\t            x1, y1 = math.cos(math.radians(actor1.attr['rotation'][0])), math.sin(math.radians(actor1.attr['rotation'][0]))\n\t            x2, y2 = actor2.attr['location'][0] - actor1.attr['location'][0], actor2.attr['location'][1] - actor1.attr['location'][1]\n\t            x2, y2 = x2 / math.sqrt(x2**2+y2**2), y2 / math.sqrt(x2**2+y2**2)\n\t            degree =  math.degrees(math.atan2(y2, x2)) - \\\n\t                 math.degrees(math.atan2(y1, x1))\n\t        elif self.conf.dataset_type == \"image\":\n\t            x1 = math.cos(math.radians(0)) \n\t            y1 = math.sin(math.radians(0))\n", "            x2 = actor2.attr['location_x'] - actor1.attr['location_x']\n\t            y2 = actor2.attr['location_y'] - actor1.attr['location_y']\n\t            x2 /= math.sqrt(x2**2 + y2**2)\n\t            y2 /= math.sqrt(x2**2 + y2**2)\n\t            degree = math.degrees(math.atan2(y1, x1)) - \\\n\t                 math.degrees(math.atan2(y2, x2))\n\t        if degree < 0: \n\t            degree += 360\n\t        degree %= 360\n\t        for direction_rel in self.directional_rels:\n", "            list_of_ranges = direction_rel[1]\n\t            for ranges in list_of_ranges:\n\t                if degree >= ranges[0] and degree <= ranges[1]:\n\t                    relation_list.append([actor2, direction_rel[0], actor1])           \n\t        if self.conf.dataset_type == \"carla\":\n\t            if actor2.attr['lane_idx'] < actor1.attr['lane_idx']: # actor2 to the left of actor1 \n\t                relation_list.append([actor2, \"toLeftOf\", actor1])\n\t            elif actor2.attr['lane_idx'] > actor1.attr['lane_idx']: # actor2 to the right of actor1 \n\t                relation_list.append([actor2, \"toRightOf\", actor1])\n\t        elif self.conf.dataset_type == \"image\":  \n", "#            if abs(actor2.attr['location_x'] - actor1.attr['location_x']) <= self.CENTER_LANE_THRESHOLD:\n\t#                pass\n\t            if (actor2.attr['location_x'] - actor1.attr['location_x']) <= self.LANE_THRESHOLD and (actor2.attr['location_x'] - actor1.attr['location_x']) >= -self.LANE_THRESHOLD: #if in the same lane, don't want left or right relations to be built\n\t                pass\n\t            # actor2 to the left of actor1\n\t            elif actor2.attr['location_x'] < actor1.attr['location_x']:\n\t                relation_list.append([actor2, \"toLeftOf\", actor1])\n\t            # actor2 to the right of actor1\n\t            elif actor2.attr['location_x'] > actor1.attr['location_x']:\n\t                relation_list.append([actor2, \"toRightOf\", actor1])\n", "            # disable rear relations help the inference.\n\t        return relation_list\n"]}
{"filename": "scene_graph/extraction/image_extractor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport pdb\n\timport sys\n\tfrom pathlib import Path\n\timport cv2\n\tsys.path.append(str(Path(\"../../\")))\n\tfrom os.path import isfile, join\n\timport roadscene2vec.data.dataset as ds\n", "from roadscene2vec.scene_graph.extraction.extractor import Extractor as ex\n\tfrom roadscene2vec.scene_graph.scene_graph import SceneGraph\n\tfrom detectron2.engine import DefaultPredictor\n\tfrom detectron2.data import MetadataCatalog\n\tfrom detectron2.utils import visualizer \n\tfrom detectron2.config import get_cfg\n\tfrom detectron2 import model_zoo\n\tfrom roadscene2vec.scene_graph.extraction.bev import bev\n\tfrom tqdm import tqdm\n\t'''RealExtractor initializes relational settings and creates an ImageSceneGraphSequenceGenerator object to extract scene graphs using raw image data.'''\n", "class RealExtractor(ex):\n\t    def __init__(self, config):\n\t        super(RealExtractor, self).__init__(config) \n\t        self.input_path = self.conf.location_data['input_path']\n\t        self.dataset = ds.SceneGraphDataset(self.conf)\n\t        if not os.path.exists(self.input_path):\n\t            raise FileNotFoundError(self.input_path)\n\t        # detectron setup\n\t        model_path = 'COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml'\n\t        self.cfg = get_cfg()\n", "        self.cfg.merge_from_file(model_zoo.get_config_file(model_path))\n\t        self.cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model\n\t        self.cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(model_path)\n\t        self.coco_class_names = MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]).get('thing_classes')\n\t        self.predictor = DefaultPredictor(self.cfg)\n\t        # bev setup\n\t        if config.custom_bev == True:\n\t            self.custom_bev = True\n\t        else:\n\t            self.custom_bev = False\n", "            self.bev = bev.BEV(config.image_settings['BEV_PATH'], mode='deploy')\n\t    '''Load scenegraphs using raw image frame tensors'''\n\t    def load(self): #seq_tensors[seq][frame/jpgname] = frame tensor\n\t        try:\n\t            all_sequence_dirs = [x for x in Path(self.input_path).iterdir() if x.is_dir()]\n\t            dir_order = None\n\t            try:\n\t                all_sequence_dirs = sorted(all_sequence_dirs, key=lambda x: int(x.stem.split('_')[0]))  \n\t            except:\n\t                print('failed to sort by sequence number, sorting by folder name instead.')\n", "                all_sequence_dirs = sorted(all_sequence_dirs, key=lambda x: x.stem)\n\t                dir_order = list(range(len(all_sequence_dirs)))\n\t            self.dataset.folder_names = [path.stem for path in all_sequence_dirs]\n\t            for path in tqdm(all_sequence_dirs):\n\t                if dir_order is None:\n\t                    seq = int(path.stem.split('_')[0])\n\t                else:\n\t                    seq = dir_order.pop(0)\n\t                label_path = (path/\"label.txt\").resolve()\n\t                ignore_path = (path/\"ignore.txt\").resolve()\n", "                if ignore_path.exists(): #record ignored sequences, and only load the sequences that were not ignored\n\t                    with open(str(path/\"ignore.txt\"), 'r') as label_f:\n\t                        ignore_label = int(label_f.read())\n\t                        if ignore_label:\n\t                            self.dataset.ignore.append(seq)\n\t                            continue #skip to next seq if ignore path exists\n\t                seq_images = self.load_images(path)\n\t                bev_path = (path/'bev.json').resolve()\n\t                if self.custom_bev: #assign custom bev per seq. if enabled\n\t                    assert bev_path.exists(), \"Custom BEV path does not exist. Please check your config file.\"\n", "                    self.bev = bev.BEV(bev_path, mode='deploy')\n\t                self.dataset.scene_graphs[seq] = {}\n\t                for frame, img in seq_images.items():\n\t                    out_img_path = None\n\t                    bounding_boxes = self.get_bounding_boxes(img_tensor=img, out_img_path=out_img_path)\n\t                    scenegraph = SceneGraph(self.relation_extractor,    \n\t                                                bounding_boxes = bounding_boxes, \n\t                                                bev = self.bev,\n\t                                                coco_class_names=self.coco_class_names, \n\t                                                platform=self.dataset_type)\n", "                    self.dataset.scene_graphs[seq][frame] = scenegraph\n\t                self.dataset.action_types[seq] = \"lanechange\" #path.stem.split('_')[2] #TODO: this is broken for carla. also, we cannot assume that our users will have their data in this format.\n\t                if label_path.exists():\n\t                    with open(str(path/'label.txt'), 'r') as label_file:\n\t                        lines = label_file.readlines()\n\t                        l0 = 1.0 if float(lines[0].strip().split(\",\")[0]) >= 0 else 0.0 \n\t                        self.dataset.labels[seq] = l0\n\t        except Exception as e:\n\t            import traceback\n\t            print('We have problem creating the real image scenegraphs')\n", "            print(e)\n\t            traceback.print_exc()\n\t            pdb.set_trace()\n\t    #returns a numpy array representation of a sequence of images in format (H,W,C)\n\t    def load_images(self, path):\n\t        raw_images_loc = (path/'raw_images').resolve()\n\t        images = sorted([Path(f) for f in os.listdir(raw_images_loc) if isfile(join(raw_images_loc, f)) and \".DS_Store\" not in f and \"Thumbs\" not in f], key = lambda x: int(x.stem.split(\".\")[0]))\n\t        images = [join(raw_images_loc,i) for i in images] \n\t        sequence_tensor = {}\n\t        modulo = 0\n", "        acc_number = 0\n\t        if(self.framenum != None):\n\t            modulo = int(len(images) / self.framenum)  #subsample to frame limit\n\t        if(self.framenum == None or modulo == 0):\n\t            modulo = 1\n\t        for i in range(0, len(images)):\n\t            if (i % modulo == 0 and self.framenum == None) or (i % modulo == 0 and acc_number < self.framenum):\n\t                image_path = images[i]\n\t                frame_num = int(Path(image_path).stem)\n\t                im = cv2.imread(str(image_path), cv2.IMREAD_COLOR) \n", "                sequence_tensor[frame_num] = im \n\t                acc_number += 1\n\t        return sequence_tensor\n\t    def get_bounding_box_annotated_image(self, im):\n\t        v = visualizer.Visualizer(im[:, :, ::-1], \n\t            MetadataCatalog.get(self.cfg.DATASETS.TRAIN[0]), \n\t            scale=1.2)\n\t        out = v.draw_instance_predictions(self.predictor(im)['instances'].to('cpu'))\n\t        return out.get_image()[:, :, ::-1]\n\t    def get_bounding_boxes(self, img_tensor, out_img_path=None):\n", "        im = img_tensor\n\t        outputs = self.predictor(im)\n\t        if out_img_path:\n\t            # We can use `Visualizer` to draw the predictions on the image.\n\t            out = self.get_bounding_box_annotated_image(im)\n\t            cv2.imwrite(out_img_path, out)\n\t        # todo: after done scp to server\n\t        # crop im to remove ego car's hood\n\t        # find threshold then remove from pred_boxes, pred_classes, check image_size\n\t        bounding_boxes = outputs['instances'].pred_boxes, outputs['instances'].pred_classes, outputs['instances'].image_size\n", "        return bounding_boxes\n\t    '''Returns SceneGraphDataset object containing scengraphs, labels, and action types'''\n\t    def getDataSet(self):\n\t        try:\n\t            return self.dataset\n\t        except Exception as e:\n\t            import traceback\n\t            print('We have problem creating scenegraph dataset object from the extracted real image scenegraphs')\n\t            print(e)\n\t            traceback.print_exc()\n"]}
{"filename": "scene_graph/extraction/carla_image_extractor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport pdb\n\timport cv2\n\tfrom pathlib import Path\n\tfrom os.path import isfile, join\n\timport sys\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom scene_graph.extraction.image_extractor import RealExtractor\n", "from scene_graph.scene_graph import SceneGraph\n\tfrom tqdm import tqdm\n\tclass CarlaRealExtractor(RealExtractor):\n\t    def __init__(self, config):\n\t        super(CarlaRealExtractor, self).__init__(config)\n\t    def parse_img_info(self, path, seq):\n\t        raw_images_loc = (path/'sensor/vehicle').resolve()\n\t        self.dataset.scene_graphs[seq] = dict()\n\t        for vehicle_idx in sorted(os.listdir(raw_images_loc))[1:]:\n\t            direction_paths = dict()\n", "            for direction in self.conf.sensor_directions:\n\t                direction_paths[direction] = []\n\t                direction_path = (raw_images_loc/vehicle_idx/'perception/camera/Camera RGB'/direction).resolve()\n\t                image_paths = \\\n\t                sorted([(direction_path/f).resolve() for f in os.listdir(direction_path) if isfile(join(direction_path, f)) and \".DS_Store\" not in f and \"Thumbs\" not in f], \n\t                       key = lambda x: int(x.stem.split(\".\")[0]))\n\t                modulo = 0\n\t                acc_number = 0\n\t                if(self.framenum != None):\n\t                    modulo = int(len(image_paths) / self.framenum)  #subsample to frame limit\n", "                if(self.framenum == None or modulo == 0):\n\t                    modulo = 1\n\t                for i in range(0, len(image_paths)):\n\t                    if (i % modulo == 0 and self.framenum == None) or (i % modulo == 0 and acc_number < self.framenum):\n\t                        image_path = image_paths[i]\n\t                        im = cv2.imread(str(image_path), cv2.IMREAD_COLOR) \n\t                        out_img_path = None\n\t                        bounding_boxes = self.get_bounding_boxes(img_tensor=im, out_img_path=out_img_path)\n\t                        scenegraph = SceneGraph(self.relation_extractor,    \n\t                                                bounding_boxes = bounding_boxes, \n", "                                                bev = self.bev,      \n\t                                                coco_class_names=self.coco_class_names, \n\t                                                platform=self.dataset_type)\n\t                        direction_paths[direction].append(scenegraph)\n\t                        acc_number += 1\n\t            self.dataset.scene_graphs[seq][vehicle_idx] = direction_paths\n\t    def parse_label(self, path, seq):\n\t        import random\n\t        self.dataset.labels[seq] = random.choice([1.0, 0.0])\n\t    def load(self): #seq_tensors[seq][frame/jpgname] = frame tensor\n", "        try:\n\t            all_sequence_dirs = []\n\t            seq = 0\n\t            for scenario_path in Path(self.input_path).iterdir():\n\t                if scenario_path.is_dir():\n\t                    for seq_path in scenario_path.iterdir():\n\t                        all_sequence_dirs.append(seq_path)\n\t                        seq += 1\n\t                        self.dataset.action_types[seq] = scenario_path.stem.split('_')[0] \n\t                        scenario_path.stem.split('_')[0]\n", "                        print(self.dataset.action_types[seq])\n\t            self.dataset.folder_names = [path.stem for path in all_sequence_dirs]\n\t            for seq, path in enumerate(tqdm(all_sequence_dirs)):\n\t                self.parse_img_info(path, seq)\n\t                self.parse_label(path, seq)\n\t        except Exception as e:\n\t            import traceback\n\t            traceback.print_exc()\n\t            pdb.set_trace()\n\t            print('We have problem creating the real image scenegraphs')\n", "            print(e)\n"]}
{"filename": "scene_graph/extraction/__init__.py", "chunked_list": []}
{"filename": "scene_graph/extraction/extractor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys\n\tfrom abc import ABC\n\tfrom pathlib import Path\n\tsys.path.append(str(Path(\"../../\")))\n\timport roadscene2vec.scene_graph.relation_extractor as r_e\n\t'''\n\tThis class defines the abstract base class of scene-graph extractors. scene-graph extractors can extract data from many different formats to generate SceneGraphDatasets.\n\t'''\n", "class Extractor(ABC):\n\t    def __init__(self, config):\n\t        self.conf = config\n\t        self.dataset_type = self.conf.dataset_type\n\t        self.scene_graphs = {}\n\t        self.relation_extractor = r_e.RelationExtractor(config)\n\t        self.framenum = self.conf.relation_extraction_settings[\"frames_limit\"]\n"]}
{"filename": "scene_graph/extraction/carla_extractor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys, os\n\tfrom pathlib import Path\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom scene_graph.extraction.extractor import Extractor as ex\n\tfrom scene_graph.scene_graph import SceneGraph\n\timport data.dataset as ds\n\tfrom tqdm import tqdm\n\timport ast\n", "from glob import glob\n\timport json\n\t\"\"\"CarlaExtractor initializes relational settings and creates a CarlaSceneGraphSequenceGenerator object to extract scene graphs using raw scene data.\"\"\"\n\tclass CarlaExtractor(ex):\n\t    def __init__(self,config):\n\t        super(CarlaExtractor, self).__init__(config)\n\t        self.input_path = self.conf.location_data['input_path']\n\t        self.dataset = ds.SceneGraphDataset(self.conf)\n\t    '''Load scenegraphs and store scenegraphs in the form {sequence{frame{scenegraph}} using the raw data given in the form {sequence{frame{raw_data}}'''\n\t    def load(self):\n", "        all_sequence_dirs = [x for x in Path(self.input_path).iterdir() if x.is_dir()]\n\t        all_sequence_dirs = sorted(all_sequence_dirs, key=lambda x: int(x.stem.split('_')[0]))  \n\t        self.dataset.folder_names = [path.stem for path in all_sequence_dirs]\n\t        sg_extracted = {}\n\t        for path in tqdm(all_sequence_dirs):\n\t              seq = int(path.stem.split('_')[0])\n\t              self.dataset.action_types[seq] = path.stem.split('_')[1]\n\t              label_path = (path/\"label.txt\").resolve()\n\t              metadata_path = (path/\"metadata.txt\").resolve()\n\t              if label_path.exists():\n", "                  with open(str(path/'label.txt'), 'r') as label_file:\n\t                      lines = label_file.readlines()\n\t                      l0 = 1.0 if float(lines[0].strip().split(\",\")[0]) >= 0 else 0.0 \n\t                      self.dataset.labels[seq] = l0 \n\t              if not metadata_path.exists():\n\t                  raise FileNotFoundError((path/'metadata.txt').resolve())\n\t              else:\n\t                  with open(str(path/'metadata.txt'), 'r') as md_file:\n\t                      md = md_file.read()\n\t                      self.dataset.meta[seq] = ast.literal_eval(md)\n", "              txt_path = sorted(list(glob(\"%s/**/*.json\" % str(path/\"scene_raw\"), recursive=True)))[0]\n\t              with open(txt_path, 'r') as scene_dict_f:\n\t                  try:\n\t                      sg_extracted[seq] = {}\n\t                      framedict = json.loads(scene_dict_f.read()) \n\t                      image_frames = list(framedict.keys()) #this is the list of frame names\n\t                      image_frames = sorted(image_frames)\n\t                      #### filling the gap between lane change where some of ego node might miss the invading lane information. ####\n\t                      start_frame_number = 0; end_frame_number = 0; invading_lane_idx = None\n\t                      for idx, frame_number in enumerate(image_frames):\n", "                          if \"invading_lane\" in framedict[str(frame_number)]['ego']:\n\t                              start_frame_number = idx\n\t                              invading_lane_idx = framedict[str(frame_number)]['ego']['invading_lane']\n\t                              break\n\t                      for frame_number in image_frames[::-1]:\n\t                          if \"invading_lane\" in framedict[str(frame_number)]['ego']:\n\t                              end_frame_number = image_frames.index(frame_number)\n\t                              break\n\t                      for idx in range(start_frame_number, end_frame_number):\n\t                          framedict[str(image_frames[idx])]['ego']['invading_lane'] = invading_lane_idx\n", "                      for frame, frame_dict in framedict.items():\n\t                          if str(frame) in image_frames: \n\t                              scenegraph = SceneGraph(self.relation_extractor, framedict = frame_dict, framenum = frame, platform = \"carla\")\n\t                              sg_extracted[seq][int(frame)] = scenegraph\n\t                      if self.framenum != None:\n\t                        sg_extracted[seq] = self.subsample(sg_extracted[seq])\n\t                  except Exception as e:\n\t                      import traceback\n\t                      print(\"We have problem creating the Carla scenegraphs\")\n\t                      print(e)\n", "                      traceback.print_exc()\n\t        self.dataset.scene_graphs = sg_extracted\n\t    '''Returns SceneGraphDataset object containing scengraphs, labels, action types, and meta data'''\n\t    def getDataSet(self):\n\t        try:\n\t            return self.dataset\n\t        #can just pass in self.dataset.conf but opting not to do so for clarity\n\t        except Exception as e:\n\t            import traceback\n\t            print(\"We have problem creating scenegraph dataset object from the extracted Carla scenegraphs\")\n", "            print(e)\n\t            traceback.print_exc()\n\t    #remove this if breaks functionality or not needed\n\t    def subsample(self, scenegraphs): \n\t        '''\n\t            This function will subsample the original scenegraph sequence dataset (self.scenegraphs_sequence). \n\t            Before running this function, it includes a variant length of graph sequences. \n\t            We expect the length of graph sequences will be homogenenous after running this function.\n\t            The default value of number_of_frames will be 20; Could be a tunnable hyperparameters.\n\t        '''\n", "        number_of_frames=self.framenum\n\t        sequence = {}\n\t        acc_number = 0\n\t        modulo = int(len(scenegraphs) / number_of_frames)\n\t        if modulo == 0:\n\t            modulo = 1\n\t        for idx, (timeframe, scenegraph) in enumerate(scenegraphs.items()):\n\t            if idx % modulo == 0 and acc_number < number_of_frames:\n\t                sequence[timeframe] = scenegraph\n\t                acc_number+=1\n", "        return sequence\n"]}
{"filename": "scene_graph/extraction/bev/__init__.py", "chunked_list": []}
{"filename": "scene_graph/extraction/bev/bev.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport json\n\timport math\n\tfrom pathlib import Path\n\timport pdb\n\timport cv2\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\tclass BEV():\n", "    def __init__(self, fname, mode='calibrate'):\n\t        if mode == 'deploy':\n\t            is_json = Path(fname).is_file() and '.json' in fname\n\t            assert is_json, 'ERROR! file {} does not exist or is not a json file...'.format(fname)\n\t            self.params = self.load_params(fname) # bev params\n\t            self.compute_homography_matrix()\n\t        if mode == 'calibrate':\n\t            is_img = Path(fname).is_file() and ('.jpg' in fname.name or '.png' in fname.name)\n\t            assert is_img, 'ERROR! file {} does not exist or is not an image...'.format(fname)\n\t            self.params = {'proj_ratio': 3} # bev params\n", "            self.fname = fname              # file\n\t            self.lane_length = 10\n\t            self.lane_width  = 12\n\t            # clickable point(s)\n\t            self.point = None               \n\t            self.lane_points = [{}, {}, {}]\n\t    def read_img(self):\n\t        self.img = cv2.imread(self.fname, cv2.IMREAD_UNCHANGED)\n\t        height, width = self.img.shape[:-1]\n\t        self.params['height'] = height\n", "        self.params['width'] = width\n\t    def get_point(self):\n\t        return self.point\n\t    def set_point(self, event):\n\t        self.point = int(event.ydata)\n\t    def index_of_point(self, points, point):\n\t        try:\n\t            return points.index(point)\n\t        except ValueError:    \n\t            return None\n", "    def is_none(self, item):\n\t        return item == None\n\t    def abs_diff(self, key, points):\n\t        return abs(points[0][key] - points[1][key])\n\t    def set_lane_points(self, event):\n\t        i = self.index_of_point(self.lane_points, {})\n\t        if not self.is_none(i):\n\t            self.lane_points[i] = {'xdata': event.xdata, 'ydata': event.ydata}\n\t            if self.is_none(self.index_of_point(self.lane_points, {})):\n\t                self.params['yscale'] = float('%.3f' % (self.lane_length / self.abs_diff('ydata', self.lane_points[:-1])))\n", "                self.params['xscale'] = float('%.3f' % (self.lane_width  / self.abs_diff('xdata', self.lane_points[1:])))\n\t                # save params after clicking on lane lines\n\t                self.save_params()\n\t    def onclick(self, event):\n\t        if not self.is_none(event.xdata) and not self.is_none(event.ydata):\n\t            if self.is_none(self.point):\n\t                self.set_point(event)\n\t            else:\n\t                self.set_lane_points(event)\n\t            self.display_bev()\n", "    def keydown(self, event):\n\t        if event.key == 'r':\n\t            self.reset_display()\n\t        if not self.is_none(self.point):\n\t            if event.key == 'e':\n\t                self.sharper_proj()\n\t            elif event.key == 'w':\n\t                self.softer_proj()\n\t            self.display_bev()\n\t    def sharper_proj(self):\n", "        self.params['proj_ratio'] += 2\n\t    def softer_proj(self):\n\t        if self.params['proj_ratio'] > 3:\n\t            self.params['proj_ratio'] -= 2\n\t        else:\n\t            print('Cannot widen any further!')\n\t    def reset_display(self):\n\t        self.point = None\n\t        self.lane_points = [{} for _ in self.lane_points]\n\t        if 'xscale' in self.params:\n", "            del self.params['xscale'], self.params['yscale']\n\t        plt.clf()\n\t        plt.imshow(cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB), animated=True)\n\t        self.show_instructions()\n\t        plt.draw()\n\t    def save_params(self, fname='bev.json'):\n\t        metadata = {}\n\t        for k in self.params.keys():\n\t            metadata[k] = self.params[k]\n\t        with open(fname, 'w') as f:\n", "            json.dump(metadata, f, indent=4)\n\t            print('- saved params to {}'.format(fname))\n\t    def load_params(self, fname):\n\t        with open(fname, 'r') as f:\n\t            return json.load(f)\n\t    def show_params(self):\n\t        parameters = ''\n\t        for k in self.params.keys():\n\t            parameters += '{}={}, '.format(k, self.params[k])\n\t        plt.figtext(0.5, 0.1, parameters[: -2], ha='center', weight='bold', bbox=dict(boxstyle='square', facecolor='gainsboro', alpha=0.5), wrap=True)\n", "    def apply_depth_estimation(self, x, y):\n\t        return (x * self.params['xscale'], y * self.params['yscale'])\n\t    def get_projected_point(self, x, y):\n\t        # Replace line 140 image_scenegraph.py with call to this method\n\t        point = np.array([[[x, y + self.params['cropped_height']]]], dtype='float32')\n\t        return cv2.perspectiveTransform(point, self.M).squeeze()\n\t    def compute_homography_matrix(self):\n\t        # Set ROI coords\n\t        padded_height      = self.params['height'] + self.params['cropped_height']\n\t        self.bottom_left   = [0, padded_height]\n", "        self.bottom_right  = [self.params['width'], padded_height]\n\t        self.top_left      = [0, self.params['height']]\n\t        self.top_right     = [self.params['width'], self.params['height']]\n\t        src = np.float32([self.bottom_left, self.bottom_right, self.top_left, self.top_right])\n\t        # Projection domain\n\t        left_ratio  = math.floor(self.params['proj_ratio']/2) / self.params['proj_ratio']\n\t        right_ratio = math.ceil(self.params['proj_ratio']/2)  / self.params['proj_ratio']\n\t        bottom_left_ratio = int(self.params['width']*left_ratio)\n\t        bottom_right_ratio = int(self.params['width']*right_ratio)\n\t        # Create v-shape projection\n", "        dst = np.float32([[bottom_left_ratio, padded_height], [bottom_right_ratio, padded_height], self.top_left, self.top_right]) \n\t        # transformation matrices\n\t        self.M = cv2.getPerspectiveTransform(src, dst) \n\t        self.Minv = cv2.getPerspectiveTransform(dst, src) \n\t    def demo_points(self):\n\t        # Show sample points offset from horizon line\n\t        points = lambda x: x if type(x) == list else x.squeeze()\n\t        plot = lambda x, c, m : plt.plot(*points(x), color=c, marker=m, ms=7)\n\t        shift = lambda x: [x[0] + self.params['width'] - 1, x[1]]\n\t        bottom  = np.array([[[self.params['width']/2, self.params['horizon_height'] + 20]]], dtype='float32')\n", "        top     = np.array([[[self.params['width']/2, self.params['horizon_height'] - 20]]], dtype='float32')\n\t        bottom_ = shift(cv2.perspectiveTransform(bottom, self.M).squeeze())\n\t        top_    = shift(cv2.perspectiveTransform(top, self.M).squeeze())\n\t        plot(bottom, c='orange', m='*')\n\t        plot(top, c='green', m='*')\n\t        plot(bottom_, c='orange', m='*')\n\t        plot(top_, c='green', m='*')\n\t    def warpPerspective(self, img):\n\t        return cv2.warpPerspective(img, self.M, (self.params['width'], self.params['height'] + self.params['cropped_height']))\n\t    def offset_image_height(self, img):\n", "        return cv2.copyMakeBorder(img, self.params['cropped_height'], 0, 0, 0, cv2.BORDER_CONSTANT)\n\t    def display_bev(self):\n\t        cropped_top = self.get_point()\n\t        # remove delete_me stuff\n\t        self.params['cropped_height'] = self.params['height'] - cropped_top\n\t        self.params['horizon_height'] = self.params['cropped_height'] + cropped_top\n\t        self.compute_homography_matrix()\n\t        # Apply np slicing for ROI crop (show on image)\n\t        img = self.offset_image_height(self.img.copy())\n\t        warped_img = self.warpPerspective(img) # Image warping\n", "        merge_imgs = np.hstack((img, warped_img))\n\t        plt.clf()\n\t        plt.imshow(cv2.cvtColor(merge_imgs, cv2.COLOR_BGR2RGB), animated=True) # Show results\n\t        # Show chosen horizon line\n\t        x = [0, 2*(self.params['width']) - 1]\n\t        y = [self.params['horizon_height'], self.params['horizon_height']]\n\t        plt.plot(x, y, color='red')\n\t        # Show user clicked points\n\t        for point in self.lane_points:\n\t            if 'xdata' in point:\n", "                # Projected image points\n\t                plt.plot(point['xdata'], point['ydata'], color='red', marker='o', ms=5)\n\t                # Original image points\n\t                x_inv, y_inv = cv2.perspectiveTransform(np.array([[[point['xdata'] - self.params['width'], point['ydata']]]]), self.Minv).squeeze()\n\t                plt.plot(x_inv, y_inv, color='red', marker='o', ms=5)\n\t        # self.demo_points()\n\t        self.show_instructions(bev=True)\n\t        self.show_params()\n\t        plt.draw()\n\t    def show_instructions(self, bev=False):\n", "        if not bev:\n\t            instructions = '''Find and click on the image's horizon line'''\n\t            plt.annotate(instructions, (self.params['width']/2, -self.params['height']/30), annotation_clip=False, ha='center', wrap=True)\n\t        else: \n\t            instructions = '''Original image'''\n\t            plt.annotate(instructions, (self.params['width']/2, -self.params['height']/30), annotation_clip=False, ha='center', wrap=True)\n\t            instructions = '''Projected image'''\n\t            plt.annotate(instructions, (self.params['width']*3/2, -self.params['height']/30), annotation_clip=False, ha='center', wrap=True)\n\t            instructions = '''Keypress [e] to elongate perspective, [w] to widen persepctive, [r] to reset image'''\n\t            plt.figtext(0.5, 0.01, instructions, ha='center', weight='bold', bbox=dict(boxstyle='square', facecolor='gainsboro', alpha=0.5), wrap=True)\n", "    def calibrate(self):\n\t        self.read_img()\n\t        fig = plt.figure()\n\t        plt.imshow(cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB), animated=True)\n\t        set_point = fig.canvas.mpl_connect('button_press_event', lambda event: self.onclick(event))\n\t        update_display = fig.canvas.mpl_connect('key_press_event', lambda event: self.keydown(event))\n\t        self.show_instructions()\n\t        plt.show()\n\tif __name__ == '__main__':\n\t    path = '/home/louisccc/NAS/louisccc/av/honda_data/filtered_clips/lanechange/6057_201702271632_lanechange/raw_images/33322.jpg'\n", "    #TODO: replace path with command line arg instead to enable user to input their own path.\n\t    bev = BEV(path, mode='calibrate')\n\t    bev.calibrate()"]}
{"filename": "scene_graph/extraction/bev/visualizer.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\tfrom pathlib import Path\n\timport cv2\n\timport matplotlib.animation as animation\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\tfrom bev import BEV\n\t'''\n\t    BEV Visualizer: run this script to view the bird's eye projected version of your image dataset\n", "    To be used after calibrating BEV projection in bev.py | BEV(path, mode='calibrate')\n\t'''\n\tdef read_int(fname):\n\t    with open(str(fname), 'r') as f:\n\t        return int(f.read())\n\tdef skip_clip(clip):\n\t    ignore_path = (clip/\"ignore.txt\").resolve()\n\t    if ignore_path.exists():\n\t        if read_int(ignore_path): return True\n\t    return False\n", "def bev_demo(bev, clip_path):\n\t    M = bev.compute_homography_matrix()\n\t    clips = [c for c in Path(clip_path).iterdir()]\n\t    for clip in clips:\n\t        if skip_clip(clip): continue\n\t        vid = []\n\t        counter = 1\n\t        fig = plt.figure()\n\t        frames = [f for f in (clip / \"raw_images\").iterdir()]\n\t        print(\"Now showing: {}\".format(str(clip)))\n", "        for frame in frames:\n\t            print(frame)\n\t            img = cv2.imread(str(frame), cv2.IMREAD_UNCHANGED)\n\t            assert (bev.params['height'], bev.params['width']) == img.shape[:-1]\n\t            # images\n\t            img = cv2.copyMakeBorder(img, bev.params['cropped_height'], 0, 0, 0, cv2.BORDER_CONSTANT)\n\t            warped_img = cv2.warpPerspective(img, M, (bev.params['width'], bev.params['height']+bev.params['cropped_height'])) # Image warping\n\t            merge_imgs = np.hstack((img, warped_img))\n\t            # horizon line\n\t            x = [0, 2*(bev.params['width']) - 1]\n", "            y = [bev.params['horizon_height'], bev.params['horizon_height']]\n\t            vid.append([plt.imshow(cv2.cvtColor(merge_imgs, cv2.COLOR_BGR2RGB)), plt.plot(x, y, color='red')[0]])\n\t            if counter % 100 == 0:\n\t                ani = animation.ArtistAnimation(fig, vid, interval=200, blit=True, repeat_delay=1000)\n\t                plt.show()\n\t                fig = plt.figure()\n\t                vid = []\n\t            counter +=1\n\tif __name__ == \"__main__\":\n\t    clip_path = \"./honda\"\n", "    bev = BEV('bev.json', mode='deploy')\n\t    bev_demo(bev, clip_path)"]}
{"filename": "scripts/3_train_model.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport sys, pdb\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom learning.util.image_trainer import Image_Trainer\n\tfrom learning.util.scenegraph_trainer import Scenegraph_Trainer\n\tfrom util.config_parser import configuration\n\timport wandb\n\t#Usage:\n", "#python 3_train_model.py --yaml_path ../config/rule_graph_risk_config.yaml\n\tdef train_Trainer(learning_config):\n\t    ''' Training the dynamic kg algorithm with different attention layer choice.'''\n\t    #wandb setup \n\t    wandb_arg = wandb.init(config=learning_config, \n\t                        project=learning_config.wandb_config['project'], \n\t                        entity=learning_config.wandb_config['entity'])\n\t    if learning_config.model_config['model_save_path'] == None:\n\t        learning_config.model_config['model_save_path'] = \"./saved_graph_models/\" + wandb_arg.name + \".pt\" # save models with wandb nametag instead of manual naming.\n\t    if learning_config.training_config[\"dataset_type\"] == \"real\":\n", "        trainer = Image_Trainer(learning_config, wandb_arg)\n\t        trainer.split_dataset()\n\t        trainer.build_model()\n\t        trainer.learn()\n\t    elif learning_config.training_config[\"dataset_type\"] == \"scenegraph\":\n\t        trainer = Scenegraph_Trainer(learning_config, wandb_arg)\n\t        trainer.split_dataset()\n\t        trainer.build_model()\n\t        trainer.learn()\n\t    else:\n", "        raise ValueError(\"Task unrecognized\")\n\t    trainer.save_model()\n\tif __name__ == \"__main__\":\n\t    # the entry of dynkg pipeline training\n\t    learning_config = configuration(sys.argv[1:])\n\t    train_Trainer(learning_config)"]}
{"filename": "scripts/7_transfer_model.py", "chunked_list": ["import os\n\timport sys\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom learning.util.image_trainer import Image_Trainer\n\tfrom learning.util.scenegraph_trainer import Scenegraph_Trainer\n\tfrom learning.util.rs2g_trainer import RS2G_Trainer\n\tfrom util.config_parser import configuration\n\timport wandb\n\t#Usage:\n\t#python 7_transfer_model.py --yaml_path ../config/transfer_rule_graph_risk_config.yaml\n", "#python 7_transfer_model.py --yaml_path ../config/transfer_ss_graph_risk_config.yaml\n\tdef train_Trainer(learning_config):\n\t    ''' Training the dynamic kg algorithm with different attention layer choice.'''\n\t    #wandb setup \n\t    wandb_arg = wandb.init(config=learning_config, \n\t                        project=learning_config.wandb_config['project'], \n\t                        entity=learning_config.wandb_config['entity'])\n\t    if learning_config.model_config['model_save_path'] == None:\n\t        learning_config.model_config['model_save_path'] = \"./saved_graph_models/\" + wandb_arg.name + \".pt\" # save models with wandb nametag instead of manual naming.\n\t    if learning_config.training_config[\"dataset_type\"] == \"real\":\n", "        trainer = Image_Trainer(learning_config, wandb_arg)\n\t        trainer.split_dataset()\n\t        trainer.load_model()\n\t        trainer.eval_model(current_epoch=0)\n\t    elif learning_config.training_config[\"dataset_type\"] == \"scenegraph\":\n\t        if learning_config.model_config['model'] in ['rs2g']:\n\t            trainer = RS2G_Trainer(learning_config, wandb_arg)\n\t        else:\n\t            trainer = Scenegraph_Trainer(learning_config, wandb_arg)\n\t        trainer.build_transfer_learning_dataset()\n", "        trainer.load_model()\n\t        trainer.evaluate_transfer_learning()\n\t    else:\n\t        raise ValueError(\"Task unrecognized\")\n\t    trainer.save_model()\n\tif __name__ == \"__main__\":\n\t    # the entry of dynkg pipeline training\n\t    learning_config = configuration(sys.argv[1:])\n\t    train_Trainer(learning_config)"]}
{"filename": "scripts/6_train_rs2g_model.py", "chunked_list": ["import os\n\timport sys\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom learning.util.rs2g_trainer import RS2G_Trainer\n\tfrom util.config_parser import configuration\n\timport wandb\n\t#Usage:\n\t#python 3_train_model.py --yaml_path ../config/rs2g_graph_risk_config.yaml  \n\tdef train_Trainer(learning_config):\n\t    ''' Training the dynamic kg algorithm with different attention layer choice.'''\n", "    #wandb setup \n\t    wandb_arg = wandb.init(config=learning_config, \n\t                        project=learning_config.wandb_config['project'], \n\t                        entity=learning_config.wandb_config['entity'])\n\t    if learning_config.model_config['model_save_path'] == None:\n\t        learning_config.model_config['model_save_path'] = \"./saved_graph_models/\" + wandb_arg.name + \".pt\" # save models with wandb nametag instead of manual naming.\n\t    assert learning_config.model_config['model'] in ['rs2g'], 'This script only supports the RS2G model.'\n\t    if learning_config.training_config[\"dataset_type\"] == \"scenegraph\":\n\t        trainer = RS2G_Trainer(learning_config, wandb_arg)\n\t        trainer.split_dataset()\n", "        trainer.build_model()\n\t        trainer.learn()\n\t        trainer.evaluate()\n\t    else:\n\t        raise ValueError(\"Task unrecognized\")\n\t    trainer.save_model()\n\tif __name__ == \"__main__\":\n\t    learning_config = configuration(sys.argv[1:])\n\t    train_Trainer(learning_config)"]}
{"filename": "data/dataset.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys, os\n\t# import pathlib\n\t# temp = pathlib.PosixPath\n\t# pathlib.PosixPath = pathlib.WindowsPath #hack fix to get it work on windows\n\tfrom pathlib import Path\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom abc import ABC\n\timport pickle as pkl\n", "'''\n\tAbstract class defining dataset properties and functions\n\tDatasets must be structured as follows:\n\t# dataset_path / <sequence_id> / raw_images / <image files> (sorted in ascending filename order.)\n\t# dataset_path / <sequence_id> / gt_data / <ground truth data files> (sorted in ascending filename order.)\n\t# dataset_path / <sequence_id> / label.txt (sorted ascending filename order or simply one for entire sequence.)\n\t# dataset_path / <sequence_id> / metadata.txt (sorted in ascending filename order or one for the entire sequence.)\n\tAll directories under dataset_path will be considered to be sequences containing data and labels.\n\tThe resulting RawImageDataset will be stored in the following location:\n\t# dataset_path / <image_dataset_path>.pkl\n", "The resulting SceneGraphDataset will be stored in the following location:\n\t# dataset_path / <sg_dataset_path>.pkl\n\t'''\n\tclass BaseDataset(ABC):\n\t    def __init__(self, config):\n\t        self.dataset_path = config.location_data[\"input_path\"]\n\t        self.config = config\n\t        self.data = None\n\t        self.labels = None\n\t        self.dataset_save_path = config.location_data[\"data_save_path\"]\n", "        self.dataset_type = config.dataset_type\n\t        self.action_types = None\n\t        self.ignore = []\n\t        self.folder_names = None\n\t    #load/save data from dataset_path into data, labels, meta\n\t    def save(self):\n\t        with open(self.dataset_save_path, 'wb') as f:\n\t            pkl.dump(self, f)\n\t    def load(self):\n\t        with open(self.dataset_save_path, 'rb') as f:\n", "            return pkl.load(f)\n\t'''\n\tDataset containing image data and associated information only.\n\t'''\n\tclass RawImageDataset(BaseDataset):\n\t    # REQ: the dataset that only contains raw images\n\t    # REQ: this dataset can be used for scene graph extractor\n\t    # REQ: this dataset can be used by CNN-based approach directly.\n\t    def __init__(self, config = None):\n\t        if config != None:\n", "            super(RawImageDataset, self).__init__(config)\n\t            self.im_height = None\n\t            self.im_width =  None\n\t            self.color_channels =  None\n\t            self.frame_limit = config.frame_data[\"frames_limit\"]\n\t            self.dataset_type = 'image'\n\t            self.data = {}   #{sequence{frame{frame_data}}} \n\t            self.labels = {} #{sequence{label}}\n\t            self.action_types = {} #{sequence{action}}\n\t            self.ignore = [] #sequences to ignore\n", "'''\n\tDataset containing scene-graph representations of the road scenes.\n\tThis dataset is generated by the scene graph extractors and saved as a pkl file.\n\t'''\n\tclass SceneGraphDataset(BaseDataset):\n\t    # REQ: the dataset that only contains scene-graphs\n\t    # meta data dict\n\t    #action types dict\n\t    # labels' dict\n\t    # should be able to be converted into graph dataset or sequenced graph dataset.\n", "    def __init__(self, config = None, scene_graphs= {}, action_types= {}, label_data= {},meta_data = {}):\n\t        if config != None:\n\t            super(SceneGraphDataset, self).__init__(config)\n\t            self.dataset_type = 'scenegraph'\n\t            self.scene_graphs = scene_graphs\n\t            self.meta = meta_data\n\t            self.labels = label_data\n\t            self.action_types = action_types\n\t    def process_carla_graph_sequences(self, scenegraphs, feature_list, frame_numbers = None, folder_name=None): \n\t        '''\n", "            this is for creation of trainer input using carla data\n\t            returns a dictionary containing sg metadata for each frame in a sequence\n\t            default frame_numbers to len of sg dict that contains scenegraphs for each frame of the given sequence\n\t            The self.scenegraphs_sequence should be having same length after the subsampling. \n\t            This function will get the graph-related features (node embeddings, edge types, adjacency matrix) from scenegraphs.\n\t            in tensor formats.\n\t        '''\n\t        if frame_numbers == None:\n\t            frame_numbers = sorted(list(scenegraphs.keys()))\n\t        scenegraphs = [scenegraphs[frames] for frames in sorted(scenegraphs.keys())]\n", "        sequence = []\n\t        for idx, (scenegraph, frame_number) in enumerate(zip(scenegraphs, frame_numbers)):\n\t            sg_dict = {}\n\t            node_name2idx = {node:idx for idx, node in enumerate(scenegraph.g.nodes)}\n\t            sg_dict['node_features']                    = scenegraph.get_carla_node_embeddings(feature_list)\n\t            sg_dict['edge_index'], sg_dict['edge_attr'] = scenegraph.get_carla_edge_embeddings(node_name2idx)\n\t            sg_dict['folder_name'] = folder_name\n\t            sg_dict['frame_number'] = frame_number\n\t            sg_dict['node_order'] = node_name2idx\n\t            sequence.append(sg_dict)\n", "        return sequence\n\t    #===================================================================\n\t    # this is for creation of trainer input using image data \n\t    #===================================================================\n\t    def process_real_image_graph_sequences(self, scenegraphs, feature_list, frame_numbers=None, folder_name=None):\n\t        '''\n\t            The self.scenegraphs_sequence should be having same length after the subsampling. \n\t            This function will get the graph-related features (node embeddings, edge types, adjacency matrix) from scenegraphs.\n\t            in tensor formats.\n\t        '''\n", "        if frame_numbers == None:\n\t            frame_numbers = sorted(list(scenegraphs.keys()))\n\t        scenegraphs = [scenegraphs[frames] for frames in sorted(scenegraphs.keys())]\n\t        sequence = []\n\t        for idx, (scenegraph, frame_number) in enumerate(zip(scenegraphs, frame_numbers)):\n\t            sg_dict = {}\n\t            node_name2idx = {node: idx for idx,\n\t                             node in enumerate(scenegraph.g.nodes)}\n\t            sg_dict['node_features'] = scenegraph.get_real_image_node_embeddings(feature_list)\n\t            sg_dict['edge_index'], sg_dict['edge_attr'] = scenegraph.get_real_image_edge_embeddings(node_name2idx)\n", "            sg_dict['folder_name'] = folder_name\n\t            sg_dict['frame_number'] = frame_number\n\t            sg_dict['node_order'] = node_name2idx\n\t            sequence.append(sg_dict)\n\t        return sequence\n\t    #==================================================================\n"]}
{"filename": "data/__init__.py", "chunked_list": []}
{"filename": "data/proc/preprocessor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys\n\tfrom pathlib import Path\n\tfrom abc import ABC\n\t'''Abstract base class used to create CarlaPreprocessor and RealPreprocessor'''\n\tclass Preprocessor(ABC):\n\t    def __init__(self, config):\n\t        self.conf = config\n\t        self.dataset = None\n"]}
{"filename": "data/proc/__init__.py", "chunked_list": []}
{"filename": "data/proc/real_preprocessor.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport sys, pdb\n\tfrom pathlib import Path\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\tfrom data.proc.preprocessor import Preprocessor as prepproc\n\tfrom data import dataset as ds\n\tfrom pathlib import Path\n\tfrom tqdm import tqdm\n", "import cv2\n\tfrom os import listdir\n\tfrom os.path import isfile, join\n\timport numpy as np\n\t\"\"\"RealPreprocessor takes in config and returns RawImageDataset object.\"\"\"\n\tclass RealPreprocessor(prepproc):\n\t    def __init__(self,config):\n\t        super(RealPreprocessor, self).__init__(config) \n\t        self.dataset = ds.RawImageDataset(self.conf)\n\t    '''Extract scene data using raw images of each frame.'''\n", "    def load(self):\n\t        if not os.path.exists(self.dataset.dataset_path):\n\t            raise FileNotFoundError(self.dataset.dataset_path)\n\t        all_sequence_dirs = [x for x in Path(self.dataset.dataset_path).iterdir() if x.is_dir()]\n\t        dir_order = None\n\t        try:\n\t            all_sequence_dirs = sorted(all_sequence_dirs, key=lambda x: int(x.stem.split('_')[0]))  \n\t        except:\n\t            print('failed to sort by sequence number, sorting by folder name instead.')\n\t            all_sequence_dirs = sorted(all_sequence_dirs, key=lambda x: x.stem)\n", "            dir_order = list(range(len(all_sequence_dirs)))\n\t        self.dataset.folder_names = [path.stem for path in all_sequence_dirs]\n\t        for path in tqdm(all_sequence_dirs):\n\t            if dir_order is None:\n\t                seq = int(path.stem.split('_')[0])\n\t            else:\n\t                seq = dir_order.pop(0)\n\t            label_path = (path/\"label.txt\").resolve()\n\t            ignore_path = (path/\"ignore.txt\").resolve()\n\t            if ignore_path.exists(): #record ignored sequences, and only load the sequences that were not ignored\n", "                with open(str(path/\"ignore.txt\"), 'r') as label_f:\n\t                    ignore_label = int(label_f.read())\n\t                    if ignore_label:\n\t                        self.dataset.ignore.append(seq)\n\t                        continue #skip to next seq if ignore path exists\n\t            self.dataset.data[seq] = self._load_images(path)\n\t            self.dataset.action_types[seq] = \"lanechange\" #path.stem.split('_')[2] #TODO: this is broken for carla. also, we cannot assume that our users will have their data in this format.\n\t            if label_path.exists():\n\t                with open(str(path/'label.txt'), 'r') as label_file:\n\t                    lines = label_file.readlines()\n", "                    l0 = 1.0 if float(lines[0].strip().split(\",\")[0]) >= 0 else 0.0 \n\t                    self.dataset.labels[seq] = l0\n\t    '''Represent each frame in sequence in terms of a tensor'''               \n\t    def _load_images(self, path):\n\t        raw_images_loc = (path/'raw_images').resolve()\n\t        images = sorted([Path(f) for f in listdir(raw_images_loc) if isfile(join(raw_images_loc, f)) and \".DS_Store\" not in f and \"Thumbs\" not in f], key = lambda x: int(x.stem.split(\".\")[0]))\n\t        images = [join(raw_images_loc,i) for i in images] \n\t        sequence_tensor = {}\n\t        shape = None\n\t        modulo = 0\n", "        acc_number = 0\n\t        if(self.dataset.frame_limit != None):\n\t            modulo = int(len(images) / self.dataset.frame_limit)  #subsample to frame_limit \n\t        if(self.dataset.frame_limit == None or modulo == 0):\n\t            modulo = 1\n\t        self.dataset.im_height, self.dataset.im_width = self.conf.output_format[\"height\"], self.conf.output_format[\"width\"]\n\t        if self.conf.output_format[\"color\"] == \"RGB\":\n\t            self.dataset.color_channels = 3\n\t        elif self.conf.output_format[\"color\"] == \"Grayscale\":\n\t            self.dataset.color_channels = 1\n", "        for i in range(0, len(images)):\n\t            if (i % modulo == 0 and self.dataset.frame_limit == None) or (i % modulo == 0 and acc_number < self.dataset.frame_limit):\n\t                image_path = images[i]\n\t                frame_num = int(Path(image_path).stem)\n\t                if self.conf.output_format[\"color\"] == \"RGB\":\n\t                    im = cv2.imread(str(image_path), cv2.IMREAD_COLOR) \n\t                elif self.conf.output_format[\"color\"] == \"Greyscale\":\n\t                    im = cv2.imread(str(image_path), cv2.IMREAD_GRAYSCALE) \n\t                im = cv2.resize(im, (self.dataset.im_width, self.dataset.im_height)).transpose(2, 0, 1) #convert to (channels, height, width) format\n\t                if shape != None:\n", "                    if im.shape != shape:\n\t                        raise ValueError(\"All images in a sequence must have the same shape\")\n\t                else:\n\t                    shape = im.shape\n\t                sequence_tensor[frame_num] = im \n\t                acc_number += 1\n\t        if len(sequence_tensor) != self.dataset.frame_limit: #zero pad if necessary\n\t            for i in range(len(sequence_tensor), self.dataset.frame_limit):\n\t                sequence_tensor[i] = np.zeros(shape, dtype=np.uint8)\n\t        assert len(sequence_tensor) == self.dataset.frame_limit if self.dataset.frame_limit != 0 else len(sequence_tensor) > 0\n", "        return sequence_tensor\n\t    '''Returns RawImageDataset object containing scengraphs, labels, and action types'''\n\t    def getDataSet(self):\n\t        return self.dataset\n"]}
{"filename": "util/__init__.py", "chunked_list": []}
{"filename": "util/config_parser.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport sys\n\tsys.path.append(os.path.join(os.path.dirname(os.path.dirname(sys.argv[0])), \"config\"))\n\tfrom argparse import ArgumentParser\n\timport yaml\n\tfrom pathlib import Path\n\tclass configuration:\n\t    def __init__(self, args, from_function = False):\n", "        if type(args) != list:\n\t            from_function = True\n\t        if not(from_function):\n\t            ap = ArgumentParser(description='The parameters for use-case 2.')\n\t            ap.add_argument('--yaml_path', type=str, default=\"./IP-NetList.yaml\", help=\"The path of yaml config file.\")\n\t            ap.add_argument('--model', type=str, default = None, help=\"model override.\")\n\t            ap.add_argument('--input_path', type=str, default = None, help=\"input_path override.\")\n\t            ap.add_argument('--task_type', type=str, default = None, help=\"task type override.\")\n\t            args_parsed = ap.parse_args(args)\n\t            for arg_name in vars(args_parsed):\n", "                self.__dict__[arg_name] = getattr(args_parsed, arg_name)\n\t                self.yaml_path = Path(self.yaml_path).resolve()\n\t            #handle command line overrides.\n\t            if self.model != None:\n\t                self.model_config['model'] = self.model\n\t            if self.input_path != None:\n\t                self.location_data['input_path'] = self.input_path\n\t            if self.task_type != None:\n\t                self.training_config['task_type'] = self.task_type\n\t            # if self.model_config['graph_extraction'] == 'rule_based':\n", "            #     self.training_config['load_lane_info'] = False\n\t        if from_function:\n\t            self.yaml_path = Path(args).resolve()\n\t        with open(self.yaml_path, 'r') as f:\n\t            args = yaml.safe_load(f)\n\t            for arg_name, arg_value in args.items():\n\t                self.__dict__[arg_name] = arg_value\n\t    @staticmethod\n\t    def parse_args(yaml_path):\n\t        return configuration(yaml_path,True)\n", "if __name__ == \"__main__\":\n\t    configuration(sys.argv[1:])"]}
{"filename": "util/script_exceptions.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\t#add more exceptions here for scripts if needed\n\tclass Invalid_Dataset_Type(Exception):\n\t    pass"]}
{"filename": "learning/__init__.py", "chunked_list": []}
{"filename": "learning/model/mrgcn.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport sys\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom torchnlp.nn import Attention\n\tfrom torch.nn import Linear, LSTM\n", "from torch_geometric.nn import RGCNConv, TopKPooling, FastRGCNConv\n\tfrom torch_geometric.nn import global_add_pool, global_mean_pool, global_max_pool\n\tfrom .rgcn_sag_pooling import RGCNSAGPooling\n\tclass MRGCN(nn.Module):\n\t    def __init__(self, config):\n\t        super(MRGCN, self).__init__()\n\t        self.num_features = config.model_config['num_of_classes']\n\t        self.num_relations = config.model_config['num_relations']\n\t        self.num_classes  = config.model_config['nclass']\n\t        self.num_layers = config.model_config['num_layers'] #defines number of RGCN conv layers.\n", "        self.hidden_dim = config.model_config['hidden_dim']\n\t        self.layer_spec = None if config.model_config['layer_spec'] == None else list(map(int, config.model_config['layer_spec'].split(',')))\n\t        self.lstm_dim1 = config.model_config['lstm_input_dim']\n\t        self.lstm_dim2 = config.model_config['lstm_output_dim']\n\t        self.rgcn_func = FastRGCNConv if config.model_config['conv_type'] == \"FastRGCNConv\" else RGCNConv\n\t        self.activation = F.relu if config.model_config['activation'] == 'relu' else F.leaky_relu\n\t        self.pooling_type = config.model_config['pooling_type']\n\t        self.readout_type = config.model_config['readout_type']\n\t        self.temporal_type = config.model_config['temporal_type']\n\t        self.dropout = config.model_config['dropout']\n", "        self.conv = []\n\t        total_dim = 0\n\t        if self.layer_spec == None:\n\t            if self.num_layers > 0:\n\t                self.conv.append(self.rgcn_func(self.num_features, self.hidden_dim, self.num_relations).to(config.model_config['device']))\n\t                total_dim += self.hidden_dim\n\t                for i in range(1, self.num_layers):\n\t                    self.conv.append(self.rgcn_func(self.hidden_dim, self.hidden_dim, self.num_relations).to(config.model_config['device']))\n\t                    total_dim += self.hidden_dim\n\t            else:\n", "                self.fc0_5 = Linear(self.num_features, self.hidden_dim)\n\t                total_dim += self.hidden_dim\n\t        else:\n\t            if self.num_layers > 0:\n\t                print(\"using layer specification and ignoring hidden_dim parameter.\")\n\t                print(\"layer_spec: \" + str(self.layer_spec))\n\t                self.conv.append(self.rgcn_func(self.num_features, self.layer_spec[0], self.num_relations).to(config.model_config['device']))\n\t                total_dim += self.layer_spec[0]\n\t                for i in range(1, self.num_layers):\n\t                    self.conv.append(self.rgcn_func(self.layer_spec[i-1], self.layer_spec[i], self.num_relations).to(config.model_config['device']))\n", "                    total_dim += self.layer_spec[i]\n\t            else:\n\t                self.fc0_5 = Linear(self.num_features, self.hidden_dim)\n\t                total_dim += self.hidden_dim\n\t        if self.pooling_type == \"sagpool\":\n\t            self.pool1 = RGCNSAGPooling(total_dim, self.num_relations, ratio=config.model_config['pooling_ratio'], rgcn_func=config.model_config['conv_type'])\n\t        elif self.pooling_type == \"topk\":\n\t            self.pool1 = TopKPooling(total_dim, ratio=config.model_config['pooling_ratio'])\n\t        self.fc1 = Linear(total_dim, self.lstm_dim1)\n\t        if \"lstm\" in self.temporal_type:\n", "            self.lstm = LSTM(self.lstm_dim1, self.lstm_dim2, batch_first=True)\n\t            self.attn = Attention(self.lstm_dim2)\n\t            self.lstm_decoder = LSTM(self.lstm_dim2, self.lstm_dim2, batch_first=True)\n\t        else:\n\t            self.fc1_5 = Linear(self.lstm_dim1, self.lstm_dim2)\n\t        self.fc2 = Linear(self.lstm_dim2, self.num_classes)\n\t    def forward(self, x, edge_index, edge_attr, batch=None):\n\t        attn_weights = dict()\n\t        outputs = []\n\t        if self.num_layers > 0:\n", "            for i in range(self.num_layers):\n\t                x = self.activation(self.conv[i](x, edge_index, edge_attr))\n\t                x = F.dropout(x, self.dropout, training=self.training)\n\t                outputs.append(x)\n\t            x = torch.cat(outputs, dim=-1)\n\t        else:\n\t            x = self.activation(self.fc0_5(x))\n\t        if self.pooling_type == \"sagpool\":\n\t            x, edge_index, _, attn_weights['batch'], attn_weights['pool_perm'], attn_weights['pool_score'] = self.pool1(x, edge_index, edge_attr=edge_attr, batch=batch)\n\t        elif self.pooling_type == \"topk\":\n", "            x, edge_index, _, attn_weights['batch'], attn_weights['pool_perm'], attn_weights['pool_score'] = self.pool1(x, edge_index, edge_attr=edge_attr, batch=batch)\n\t        else: \n\t            attn_weights['batch'] = batch\n\t        if self.readout_type == \"add\":\n\t            x = global_add_pool(x, attn_weights['batch'])\n\t        elif self.readout_type == \"mean\":\n\t            x = global_mean_pool(x, attn_weights['batch'])\n\t        elif self.readout_type == \"max\":\n\t            x = global_max_pool(x, attn_weights['batch'])\n\t        else:\n", "            pass\n\t        x = self.activation(self.fc1(x))\n\t        if self.temporal_type == \"mean\":\n\t            x = self.activation(self.fc1_5(x.mean(axis=0)))\n\t        elif self.temporal_type == \"lstm_last\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n\t            x = h.flatten()\n\t        elif self.temporal_type == \"lstm_sum\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n\t            x = x_predicted.sum(dim=1).flatten()\n", "        elif self.temporal_type == \"lstm_attn\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n\t            x, attn_weights['lstm_attn_weights'] = self.attn(h.view(1,1,-1), x_predicted)\n\t            x, (h_decoder, c_decoder) = self.lstm_decoder(x, (h, c))\n\t            x = x.flatten()\n\t        elif self.temporal_type == \"lstm_seq\": #used for step-by-step sequence prediction. \n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0)) #x_predicted is sequence of predictions for each frame, h is hidden state of last item, c is last cell state\n\t            x = x_predicted.squeeze(0) #we return x_predicted as we want to know the output of the LSTM for each value in the sequence\n\t        else:\n\t            pass\n", "        return F.log_softmax(self.fc2(x), dim=-1), attn_weights"]}
{"filename": "learning/model/rs2g.py", "chunked_list": ["import os\n\timport sys\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom torchnlp.nn import Attention\n\tfrom torch.nn import Linear, LSTM\n\tfrom torch_geometric.nn import RGCNConv, TopKPooling, FastRGCNConv\n\tfrom torch_geometric.nn import global_add_pool, global_mean_pool, global_max_pool\n", "from .rgcn_sag_pooling import RGCNSAGPooling\n\tfrom torch_geometric.data import Data\n\tfrom torch_geometric.loader import DataLoader\n\t'''data-driven implementation of MRGCN (RS2G).'''\n\tclass RS2G(nn.Module):\n\t    def __init__(self, config):\n\t        super(RS2G, self).__init__()\n\t        self.num_features = config.model_config['num_of_classes']\n\t        self.num_relations = config.model_config['num_relations']\n\t        self.num_classes  = config.model_config['nclass']\n", "        self.num_layers = config.model_config['num_layers'] #defines number of RGCN conv layers.\n\t        self.hidden_dim = config.model_config['hidden_dim']\n\t        self.layer_spec = None if config.model_config['layer_spec'] == None else list(map(int, config.model_config['layer_spec'].split(',')))\n\t        self.lstm_dim1 = config.model_config['lstm_input_dim']\n\t        self.lstm_dim2 = config.model_config['lstm_output_dim']\n\t        self.rgcn_func = FastRGCNConv if config.model_config['conv_type'] == \"FastRGCNConv\" else RGCNConv\n\t        self.activation = F.relu if config.model_config['activation'] == 'relu' else F.leaky_relu\n\t        self.pooling_type = config.model_config['pooling_type']\n\t        self.readout_type = config.model_config['readout_type']\n\t        self.temporal_type = config.model_config['temporal_type']\n", "        self.device = config.model_config['device']\n\t        self.dropout = config.model_config['dropout']\n\t        self.edge_ext_thresh = config.model_config['edge_ext_thresh']\n\t        self.conv = []\n\t        total_dim = 0\n\t        if self.layer_spec == None:\n\t            if self.num_layers > 0:\n\t                self.conv.append(self.rgcn_func(self.num_features, self.hidden_dim, self.num_relations).to(self.device))\n\t                total_dim += self.hidden_dim\n\t                for i in range(1, self.num_layers):\n", "                    self.conv.append(self.rgcn_func(self.hidden_dim, self.hidden_dim, self.num_relations).to(self.device))\n\t                    total_dim += self.hidden_dim\n\t            else:\n\t                self.fc0_5 = Linear(self.num_features, self.hidden_dim)\n\t                total_dim += self.hidden_dim\n\t        else:\n\t            if self.num_layers > 0:\n\t                print(\"using layer specification and ignoring hidden_dim parameter.\")\n\t                print(\"layer_spec: \" + str(self.layer_spec))\n\t                self.conv.append(self.rgcn_func(self.num_features, self.layer_spec[0], self.num_relations).to(self.device))\n", "                total_dim += self.layer_spec[0]\n\t                for i in range(1, self.num_layers):\n\t                    self.conv.append(self.rgcn_func(self.layer_spec[i-1], self.layer_spec[i], self.num_relations).to(self.device))\n\t                    total_dim += self.layer_spec[i]\n\t            else:\n\t                self.fc0_5 = Linear(self.num_features, self.hidden_dim)\n\t                total_dim += self.hidden_dim\n\t        if self.pooling_type == \"sagpool\":\n\t            self.pool1 = RGCNSAGPooling(total_dim, self.num_relations, ratio=config.model_config['pooling_ratio'], rgcn_func=config.model_config['conv_type'])\n\t        elif self.pooling_type == \"topk\":\n", "            self.pool1 = TopKPooling(total_dim, ratio=config.model_config['pooling_ratio'])\n\t        self.fc1 = Linear(total_dim, self.lstm_dim1)\n\t        if \"lstm\" in self.temporal_type:\n\t            self.lstm = LSTM(self.lstm_dim1, self.lstm_dim2, batch_first=True)\n\t            self.attn = Attention(self.lstm_dim2)\n\t            self.lstm_decoder = LSTM(self.lstm_dim2, self.lstm_dim2, batch_first=True)\n\t        else:\n\t            self.fc1_5 = Linear(self.lstm_dim1, self.lstm_dim2)\n\t        self.fc2 = Linear(self.lstm_dim2, self.num_classes)\n\t        #~~~~~~~~~~~~Data-Driven Graph Encoders~~~~~~~~~~~~~~\n", "        #node encoder\n\t        if config.model_config['node_encoder_dim'] == 1:\n\t            self.node_encoder = Linear(15, self.num_features) \n\t        elif config.model_config['node_encoder_dim'] == 2:\n\t            self.node_encoder = nn.Sequential(\n\t                        nn.Linear(15, 30),\n\t                        nn.ReLU(),\n\t                        nn.Linear(30, self.num_features)\n\t                    )\n\t        #edge encoder. takes in two node embeddings and returns multilabel edge selection.\n", "        if config.model_config['edge_encoder_dim'] == 1:\n\t            self.edge_encoder = Linear(2 * 15, self.num_relations)\n\t        elif config.model_config['edge_encoder_dim'] == 2:\n\t            self.edge_encoder = nn.Sequential(\n\t                        nn.Linear(2 * 15, 30),\n\t                        nn.ReLU(),\n\t                        nn.Linear(30, self.num_relations)\n\t                    )\n\t    def forward(self, sequence):\n\t        #graph extraction component\n", "        graph_list = []\n\t        for i in range(len(sequence)):\n\t            graph = {}\n\t            node_feature_list = sequence[i]\n\t            graph['node_embeddings'] = self.activation(self.node_encoder(node_feature_list))\n\t            graph['edge_attr'] = []\n\t            graph['edge_index'] = []\n\t            new_arr = torch.ones([len(node_feature_list), len(node_feature_list)]).triu(diagonal=1)\n\t            new_arr_idx = torch.where(new_arr==1.0)\n\t            combo_list = torch.stack(new_arr_idx).t()\n", "            new_arr_2 = new_arr.flatten().int()\n\t            new_arr_idx2 = torch.where(new_arr_2==1.0)\n\t            node_combo_a = node_feature_list.unsqueeze(0).repeat((node_feature_list.size(0), 1,1))\n\t            node_combo_b = node_feature_list.unsqueeze(1).repeat((1, node_feature_list.size(0),1))\n\t            node_combo = torch.cat([node_combo_b, node_combo_a], dim=-1).flatten(start_dim=0, end_dim=1)\n\t            node_combinations = node_combo[new_arr_idx2]\n\t            edge_vectors = self.edge_encoder(node_combinations)\n\t            edge_vectors = torch.sigmoid(edge_vectors) #sigmoid to generate multilabel conf. scores, then binarize. \n\t            top_edges = torch.argmax(edge_vectors, dim=1) #get highest scoring edge.\n\t            graph['edge_index'] = torch.cat([combo_list, combo_list.flip(1)], dim=0) #make edges bidirectional\n", "            graph['edge_attr'] = torch.cat([top_edges, top_edges], dim=0) #make edges bidirectional\n\t            pos_idxs = edge_vectors > self.edge_ext_thresh #add all edge types that score > threshold\n\t            pos_idxs = pos_idxs.nonzero()\n\t            pos_edge_idx, pos_edge_attrs = combo_list[pos_idxs[:,0]], pos_idxs[:, 1]\n\t            graph['edge_index'] = torch.cat([graph['edge_index'], pos_edge_idx, pos_edge_idx.flip(1)], dim=0)\n\t            graph['edge_attr'] = torch.cat([graph['edge_attr'], pos_edge_attrs, pos_edge_attrs], dim=0)\n\t            graph['edge_index'] = torch.transpose(graph['edge_index'], 0, 1) \n\t            graph['edge_attr'] = graph['edge_attr']\n\t            graph_list.append(graph)\n\t        graph_data_list = [Data(x=g['node_embeddings'], edge_index=g['edge_index'], edge_attr=g['edge_attr']) for g in graph_list]\n", "        train_loader = DataLoader(graph_data_list, batch_size=len(graph_data_list))\n\t        sequence = next(iter(train_loader)).to(self.device)\n\t        x, edge_index, edge_attr, batch = sequence.x, sequence.edge_index, sequence.edge_attr, sequence.batch\n\t        #MRGCN component. downstream task\n\t        attn_weights = dict()\n\t        outputs = []\n\t        if self.num_layers > 0:\n\t            for i in range(self.num_layers):\n\t                x = self.activation(self.conv[i](x, edge_index, edge_attr))\n\t                x = F.dropout(x, self.dropout, training=self.training)\n", "                outputs.append(x)\n\t            x = torch.cat(outputs, dim=-1)\n\t        else:\n\t            x = self.activation(self.fc0_5(x))\n\t        if self.pooling_type == \"sagpool\":\n\t            x, edge_index, _, attn_weights['batch'], attn_weights['pool_perm'], attn_weights['pool_score'] = self.pool1(x, edge_index, edge_attr=edge_attr, batch=batch)\n\t        elif self.pooling_type == \"topk\":\n\t            x, edge_index, _, attn_weights['batch'], attn_weights['pool_perm'], attn_weights['pool_score'] = self.pool1(x, edge_index, edge_attr=edge_attr, batch=batch)\n\t        else: \n\t            attn_weights['batch'] = batch\n", "        if self.readout_type == \"add\":\n\t            x = global_add_pool(x, attn_weights['batch'])\n\t        elif self.readout_type == \"mean\":\n\t            x = global_mean_pool(x, attn_weights['batch'])\n\t        elif self.readout_type == \"max\":\n\t            x = global_max_pool(x, attn_weights['batch'])\n\t        else:\n\t            pass\n\t        x = self.activation(self.fc1(x))\n\t        #temporal modeling\n", "        if self.temporal_type == \"mean\":\n\t            x = self.activation(self.fc1_5(x.mean(axis=0)))\n\t        elif self.temporal_type == \"lstm_last\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n\t            x = h.flatten()\n\t        elif self.temporal_type == \"lstm_sum\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n\t            x = x_predicted.sum(dim=1).flatten()\n\t        elif self.temporal_type == \"lstm_attn\":\n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0))\n", "            x, attn_weights['lstm_attn_weights'] = self.attn(h.view(1,1,-1), x_predicted)\n\t            x, (h_decoder, c_decoder) = self.lstm_decoder(x, (h, c))\n\t            x = x.flatten()\n\t        elif self.temporal_type == \"lstm_seq\": #used for step-by-step sequence prediction. \n\t            x_predicted, (h, c) = self.lstm(x.unsqueeze(0)) #x_predicted is sequence of predictions for each frame, h is hidden state of last item, c is last cell state\n\t            x = x_predicted.squeeze(0) #we return x_predicted as we want to know the output of the LSTM for each value in the sequence\n\t        else:\n\t            pass\n\t        return {'output': F.log_softmax(self.fc2(x), dim=-1), \n\t                'graph_list': graph_list}"]}
{"filename": "learning/model/cnn_lstm.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tclass CNN_LSTM_Classifier(nn.Module):\n\t    '''\n\t    CNN+LSTM binary classifier\n\t    To call module provide the input_shape and cfg params\n\t    input_shape should be a tensor -> (batch_size, frames, channels, height, width) \n", "    '''\n\t    def __init__(self, input_shape, cfg):\n\t        super(CNN_LSTM_Classifier, self).__init__()\n\t        self.cfg = cfg\n\t        self.batch_size, self.frames, self.channels, self.height, self.width = input_shape\n\t        self.dropout = self.cfg.model_config['dropout']\n\t        self.kernel_size = (3, 3)\n\t        self.lstm_layers = 1\n\t        self.conv_size = lambda i, k, p, s: int((i-k+2*p)/s + 1)\n\t        self.pool_size = lambda i, k, p, s, pool : self.conv_size(i, k, p, s) // pool + 1\n", "        self.flat_size = lambda f, h, w : f*h*w\n\t        self.TimeDistributed = lambda curr_layer, prev_layer : torch.stack([curr_layer(prev_layer[:,i]) for i in range(self.frames)], dim=1)\n\t        self.enable_bnorm = self.cfg.model_config['bnorm']\n\t        # Note: conv_size and pool_size only work for square 2D matrices, if not a square matrix, run once for height dim and another time for width dim\n\t        '''\n\t        conv_size = lambda i, k, p, s: int((i-k+2*p)/s + 1)\n\t        pool_size = lambda i, k, p, s, pool : conv_size(i, k, p, s) // pool + 1\n\t        flat_size = lambda f, h, w : f*h*w\n\t        '''\n\t        self.bn1 = nn.BatchNorm3d(num_features=self.frames)\n", "        self.bn2 = nn.BatchNorm3d(num_features=self.frames)\n\t        self.bn3 = nn.BatchNorm3d(num_features=self.frames)\n\t        self.bn4 = nn.BatchNorm1d(num_features=self.frames)\n\t        self.bn5 = nn.BatchNorm1d(num_features=self.frames)    \n\t        self.c1 = nn.Conv2d(in_channels=self.channels, out_channels=16, kernel_size=self.kernel_size)\n\t        self.c2 = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=self.kernel_size)\n\t        self.mp1 = nn.MaxPool2d(kernel_size=2)\n\t        self.flat = nn.Flatten(start_dim=1)\n\t        self.flat_dim = self.get_flat_dim()\n\t        self.l1 = nn.Linear(in_features=self.flat_dim, out_features=200)\n", "        self.l2 = nn.Linear(in_features=200, out_features=50)\n\t        self.lstm1 = nn.LSTM(input_size=50, hidden_size=20, num_layers=self.lstm_layers, batch_first=True) \n\t        self.l3 = nn.Linear(in_features=20, out_features=2)\n\t        self.layer_names = self.ordered_layers = [(\"c1\", self.c1),(\"c2\", self.c2),(\"mp1\", self.mp1),(\"flat\", self.flat), (\"l1\", self.l1),(\"l2\", self.l2),(\"lstm1\", self.lstm1),(\"l3\", self.l3)]\n\t    def get_flat_dim(self):\n\t        c1_h = self.conv_size(self.height, self.kernel_size[-1], 0, 1)\n\t        c1_w = self.conv_size(self.width, self.kernel_size[-1], 0, 1)\n\t        c2_h = self.conv_size(c1_h, self.kernel_size[-1], 0, 1)\n\t        c2_w = self.conv_size(c1_w, self.kernel_size[-1], 0, 1)\n\t        mp1_h = c2_h // 2\n", "        mp1_w = c2_w // 2\n\t        return self.flat_size(16, mp1_h, mp1_w)\n\t    def forward(self, x):\n\t        # Distribute learnable layers across all frames with shared weights\n\t        if self.enable_bnorm: # can use a larger learning rate w/ bnorm #not in config currently\n\t            x = F.relu(self.bn1(self.TimeDistributed(self.c1, x)))\n\t            x = F.relu(self.bn2(self.TimeDistributed(self.c2, x)))\n\t            x = F.dropout(self.bn3(self.TimeDistributed(self.mp1, x)), p=self.dropout, training=self.training)\n\t            x = F.dropout(self.TimeDistributed(self.flat, x), p=self.dropout, training=self.training)\n\t            x = F.dropout(F.relu(self.bn4(self.TimeDistributed(self.l1, x))), p=self.dropout, training=self.training)\n", "            x = F.dropout(F.relu(self.bn5(self.TimeDistributed(self.l2, x))), p=self.dropout, training=self.training)\n\t        else:\n\t            x = F.relu(self.TimeDistributed(self.c1, x))\n\t            x = F.relu(self.TimeDistributed(self.c2, x))\n\t            x = F.dropout(self.TimeDistributed(self.mp1, x), p=self.dropout, training=self.training)\n\t            x = F.dropout(self.TimeDistributed(self.flat, x), p=self.dropout, training=self.training)\n\t            x = F.dropout(F.relu(self.TimeDistributed(self.l1, x)), p=self.dropout, training=self.training)\n\t            x = F.dropout(F.relu(self.TimeDistributed(self.l2, x)), p=self.dropout, training=self.training)\n\t        if self.cfg.training_config[\"task_type\"] == \"collision_prediction\":\n\t            x = x.view(x.shape[0]*x.shape[1],50)\n", "            x = x.unsqueeze(1)\n\t        _,(x,_) = self.lstm1(x)\n\t        x = torch.squeeze(self.l3(x))\n\t        return F.log_softmax(x, dim=-1)"]}
{"filename": "learning/model/__init__.py", "chunked_list": []}
{"filename": "learning/model/rgcn_sag_pooling.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport torch\n\tfrom torch_geometric.nn import RGCNConv, FastRGCNConv\n\tfrom torch_geometric.nn.pool.topk_pool import topk, filter_adj\n\tfrom torch_geometric.utils import softmax\n\timport pdb\n\tclass RGCNSAGPooling(torch.nn.Module):\n\t    def __init__(self, in_channels, num_relations, ratio=0.5, min_score=None,\n\t                 multiplier=1, nonlinearity=torch.tanh, rgcn_func=\"FastRGCNConv\", **kwargs):\n", "        super(RGCNSAGPooling, self).__init__()\n\t        self.in_channels = in_channels\n\t        self.ratio = float(ratio)\n\t        self.gnn = FastRGCNConv(in_channels, 1, num_relations, **kwargs) if rgcn_func==\"FastRGCNConv\" else RGCNConv(in_channels, 1, num_relations, **kwargs)\n\t        self.min_score = min_score\n\t        self.multiplier = multiplier\n\t        self.nonlinearity = nonlinearity\n\t        self.reset_parameters()\n\t    def reset_parameters(self):\n\t        self.gnn.reset_parameters()\n", "    def forward(self, x, edge_index, edge_attr=None, batch=None, attn=None):\n\t        \"\"\"\"\"\"\n\t        if batch is None:\n\t            batch = edge_index.new_zeros(x.size(0))\n\t        attn = x if attn is None else attn\n\t        attn = attn.unsqueeze(-1) if attn.dim() == 1 else attn\n\t        score = self.gnn(attn, edge_index, edge_attr).view(-1)\n\t        if self.min_score is None:\n\t            score = self.nonlinearity(score)\n\t        else:\n", "            score = softmax(score, batch)\n\t        perm = topk(score, self.ratio, batch, self.min_score)\n\t        x = x[perm] * score[perm].view(-1, 1)\n\t        x = self.multiplier * x if self.multiplier != 1 else x\n\t        batch = batch[perm]\n\t        edge_index, edge_attr = filter_adj(edge_index, edge_attr, perm,\n\t                                           num_nodes=score.size(0))\n\t        return x, edge_index, edge_attr, batch, perm, score[perm]\n\t    def __repr__(self):\n\t        return '{}({}, {}, {}={}, multiplier={})'.format(\n", "            self.__class__.__name__, self.gnn.__class__.__name__,\n\t            self.in_channels,\n\t            'ratio' if self.min_score is None else 'min_score',\n\t            self.ratio if self.min_score is None else self.min_score,\n\t            self.multiplier)"]}
{"filename": "learning/util/image_trainer.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys, os\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport numpy as np\n\tfrom tqdm import tqdm\n\tfrom learning.util.trainer import Trainer\n\tfrom data.dataset import RawImageDataset\n\tfrom sklearn.utils.class_weight import compute_class_weight\n", "from sklearn.utils import shuffle\n\timport warnings\n\twarnings.simplefilter(action='ignore', category=FutureWarning)\n\tfrom sklearn.utils import resample\n\tfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\tfrom learning.util.metrics import get_metrics, log_im_wandb, log_wandb_categories\n\t'''Class implementing image based model training including support for splitting input dataset, \n\tcross-validation functionality, model inference metrics, and model evaluation.'''\n\tclass Image_Trainer(Trainer):\n\t    def __init__(self, config, wandb_a = None):\n", "        '''Class object initialization requires Config Parser object.'''\n\t        super(Image_Trainer, self).__init__(config, wandb_a)\n\t    def split_dataset(self): #this is init_dataset from multimodal\n\t        if (self.config.training_config['task_type'] in ['sequence_classification','collision_prediction']):\n\t            self.training_data, self.testing_data = self.build_real_image_dataset()\n\t            self.training_labels = np.array([i[1] for i in self.training_data])\n\t            self.testing_labels = np.array([i[1] for i in self.testing_data])\n\t            self.total_train_labels = np.concatenate([np.full(len(i[0]), i[1]) for i in self.training_data]) # used to compute frame-level class weighting\n\t            self.total_test_labels  = np.concatenate([np.full(len(i[0]), i[1]) for i in self.testing_data])\n\t            self.training_clip_name = np.array([i[2] for i in self.training_data])\n", "            self.testing_clip_name = np.array([i[2] for i in self.testing_data])\n\t            self.training_data = np.stack([i[0] for i in self.training_data], axis=0) #resulting shape is (sequence, image, channel, height, width)\n\t            self.testing_data = np.stack([i[0] for i in self.testing_data], axis=0)\n\t            if self.config.training_config['task_type'] == \"sequence_classification\":\n\t              self.class_weights = torch.from_numpy(compute_class_weight('balanced', \n\t                                                                         classes=np.unique(self.training_labels), \n\t                                                                         y=self.training_labels))\n\t              if self.config.training_config[\"n_fold\"] <= 1:\n\t                  print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                  print(\"Number of Testing Sequences Included: \", len(self.testing_data))\n", "                  print(\"Num of Training Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                  print(\"Num of Testing Labels in Each Class: \" + str(np.unique(self.testing_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights)) \n\t            elif self.config.training_config['task_type'] == \"collision_prediction\":\n\t                self.class_weights = torch.from_numpy(compute_class_weight('balanced', \n\t                                                                           classes=np.unique(self.total_train_labels), \n\t                                                                           y=self.total_train_labels))\n\t                if self.config.training_config[\"n_fold\"] <= 1:\n\t                    print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                    print(\"Number of Testing Sequences Included: \", len(self.testing_data))\n\t                    print(\"Number of Training Labels in Each Class: \" + str(np.unique(self.total_train_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n", "                    print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.total_test_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t        else:\n\t            raise ValueError('split_dataset(): task type error') \n\t    def prep_dataset(self, image_dataset):\n\t        class_0 = []\n\t        class_1 = []\n\t        print(\"Loading Image Dataset\")\n\t        for seq in tqdm(image_dataset.labels): # for each seq (num total seq,frame,chan,h,w)\n\t            category = image_dataset.action_types[seq]\n\t            if category in self.unique_clips:\n", "                self.unique_clips[category] += 1\n\t            else:\n\t                self.unique_clips[category] = 1\n\t            seq_data = np.stack([value for value in image_dataset.data[seq].values()], axis=0)\n\t            if image_dataset.labels[seq] == 0:\n\t                class_0.append((seq_data,0,category))                                                  \n\t            elif image_dataset.labels[seq] == 1:\n\t                class_1.append((seq_data,1,category))\n\t        y_0 = [0]*len(class_0)  \n\t        y_1 = [1]*len(class_1)\n", "        min_number = min(len(class_0), len(class_1))\n\t        return class_0, class_1, y_0, y_1, min_number\n\t    def build_real_image_dataset(self):\n\t        '''\n\t        Returns lists of tuples train and test each containing (data, label, category). \n\t        This code assumes that all sequences are the same length.\n\t        '''\n\t        image_dataset = RawImageDataset()\n\t        image_dataset.dataset_save_path = self.config.location_data[\"input_path\"]\n\t        image_dataset = image_dataset.load()\n", "        self.frame_limit = image_dataset.frame_limit\n\t        self.color_channels = image_dataset.color_channels\n\t        self.im_width = image_dataset.im_width\n\t        self.im_height = image_dataset.im_height\n\t        class_0, class_1, y_0, y_1, min_number = self.prep_dataset(image_dataset)\n\t        if self.config.training_config['downsample']: #TODO: fix this code. this only works if class 0 is always the majority class. \n\t            class_0, y_0 = resample(class_0, y_0, n_samples=min_number)\n\t        if self.config.location_data[\"transfer_path\"] != None:\n\t            test_dataset = RawImageDataset()\n\t            test_dataset.dataset_save_path = self.config.location_data[\"transfer_path\"]\n", "            test_dataset = test_dataset.load()\n\t            test_class_0, test_class_1, _, _, _ = self.prep_dataset(test_dataset)\n\t            train_dataset = shuffle(class_0 + class_1) #training set will consist of the full training dataset\n\t            test_dataset = shuffle(test_class_0 + test_class_1) #testing set will consist of the full transfer dataset\n\t            return train_dataset, test_dataset\n\t        else:\n\t            train, test, _, _ = train_test_split(class_0+class_1, \n\t                                                            y_0+y_1, \n\t                                                            test_size=self.config.training_config['split_ratio'], \n\t                                                            shuffle=True, \n", "                                                            stratify=y_0+y_1, \n\t                                                            random_state=self.config.seed)\n\t            return train, test\n\t    def train(self):\n\t        if (self.config.training_config['task_type'] in ['sequence_classification','collision_prediction']):\n\t            tqdm_bar = tqdm(range(self.config.training_config['epochs']))\n\t            for epoch_idx in tqdm_bar: # iterate through epoch   \n\t                acc_loss_train = 0\n\t                permutation = np.random.permutation(len(self.training_data)) # shuffle dataset before each epoch\n\t                self.model.train()\n", "                for i in range(0, len(self.training_data), self.config.training_config['batch_size']): # iterate through batches of the dataset\n\t                    batch_index = i + self.config.training_config['batch_size'] if i + self.config.training_config['batch_size'] <= len(self.training_data) else len(self.training_data)\n\t                    indices = permutation[i:batch_index]\n\t                    batch_x = self.training_data[indices]\n\t                    batch_x = self.toGPU(batch_x, torch.float32)\n\t                    if self.config.training_config['task_type']  == 'sequence_classification': \n\t                      batch_y = self.training_labels[indices] #batch_x = (batch, frames, channel, h, w)\n\t                    elif self.config.training_config['task_type']  == 'collision_prediction':\n\t                      batch_y = np.concatenate([np.full(len(self.training_data[i]),self.training_labels[i]) for i in indices]) #batch_x consists of individual frames not sequences/groups of frames, batch_y extends labels of each sequence to all frames in the sequence\n\t                    batch_y = self.toGPU(batch_y, torch.long)\n", "                    output = self.model.forward(batch_x).view(-1, 2)\n\t                    loss_train = self.loss_func(output, batch_y)\n\t                    loss_train.backward()\n\t                    acc_loss_train += loss_train.detach().cpu().item() * len(indices)\n\t                    self.optimizer.step()\n\t                    del loss_train\n\t                acc_loss_train /= len(self.training_data)\n\t                tqdm_bar.set_description('Epoch: {:04d}, loss_train: {:.4f}'.format(epoch_idx, acc_loss_train))\n\t                # no cross validation \n\t                if epoch_idx % self.config.training_config['test_step'] == 0:\n", "                    self.eval_model(epoch_idx)                   \n\t        else:\n\t            raise ValueError('train(): task type error')\n\t    def model_inference(self, X, y, clip_name):\n\t        labels = torch.LongTensor().to(self.config.model_config['device'])\n\t        outputs = torch.FloatTensor().to(self.config.model_config['device'])\n\t        # Dictionary storing (output, label) pair for all driving categories\n\t        categories = {'outputs': outputs, 'labels': labels}\n\t        batch_size = self.config.training_config['batch_size'] # NOTE: set to 1 when profiling or calculating inference time.\n\t        acc_loss = 0\n", "        inference_time = 0\n\t        prof_result = \"\"\n\t        with torch.autograd.profiler.profile(enabled=False, use_cuda=True) as prof:\n\t            with torch.no_grad():\n\t                self.model.eval()\n\t                for i in range(0, len(X), batch_size): # iterate through subsequences\n\t                    batch_index = i + batch_size if i + batch_size <= len(X) else len(X)\n\t                    batch_x = X[i:batch_index]\n\t                    batch_x = self.toGPU(batch_x, torch.float32)\n\t                    if self.config.training_config['task_type']  == 'sequence_classification': \n", "                      batch_y = y[i:batch_index]  #batch_x = (batch, frames, channel, h, w)\n\t                    elif self.config.training_config['task_type']  == 'collision_prediction':\n\t                      batch_y = np.concatenate([np.full(len(X[k]),y[k]) for k in range(i,batch_index)]) #batch_x consists of individual frames not sequences/groups of frames, batch_y extends labels of each sequence to all frames in the sequence\n\t                    batch_y = self.toGPU(batch_y, torch.long)\n\t                    batch_clip_name = clip_name[i:batch_index]\n\t                    output = self.model.forward(batch_x).view(-1, 2)\n\t                    loss_test = self.loss_func(output, batch_y)\n\t                    acc_loss += loss_test.detach().cpu().item() * len(batch_y)\n\t                    # store output, label statistics\n\t                    self.update_categorical_outputs(categories, output, batch_y, batch_clip_name)\n", "        # calculate one risk score per sequence (this is not implemented for each category)\n\t        sum_seq_len = 0\n\t        num_risky_sequences = 0\n\t        num_safe_sequences = 0\n\t        correct_risky_seq = 0\n\t        correct_safe_seq = 0\n\t        incorrect_risky_seq = 0\n\t        incorrect_safe_seq = 0\n\t        sequences = len(categories['labels'])\n\t        for indices in range(sequences):\n", "            seq_output = categories['outputs'][indices]\n\t            label = categories['labels'][indices]\n\t            pred = torch.argmax(seq_output)\n\t            # risky clip\n\t            if label == 1:\n\t                num_risky_sequences += 1\n\t                sum_seq_len += seq_output.shape[0]\n\t                correct_risky_seq += self.correctness(label, pred)\n\t                incorrect_risky_seq += self.correctness(label, pred)\n\t            # non-risky clip\n", "            elif label == 0:\n\t                num_safe_sequences += 1\n\t                incorrect_safe_seq += self.correctness(label, pred)\n\t                correct_safe_seq += self.correctness(label, pred)\n\t        avg_risky_seq_len = sum_seq_len / num_risky_sequences # sequence length for comparison with the prediction frame metric. \n\t        seq_tpr = correct_risky_seq / num_risky_sequences\n\t        seq_fpr = incorrect_safe_seq / num_safe_sequences\n\t        seq_tnr = correct_safe_seq / num_safe_sequences\n\t        seq_fnr = incorrect_risky_seq / num_risky_sequences\n\t        if prof != None:\n", "            prof_result = prof.key_averages().table(sort_by=\"cuda_time_total\")\n\t        return  categories, \\\n\t                  acc_loss/len(X), \\\n\t                  avg_risky_seq_len, \\\n\t                  inference_time, \\\n\t                  prof_result, \\\n\t                  seq_tpr, \\\n\t                  seq_fpr, \\\n\t                  seq_tnr, \\\n\t                  seq_fnr\n", "    def correctness(self, output, pred):\n\t        return 1 if output == pred else 0\n\t    def update_categorical_outputs(self, categories, outputs, labels, clip_name):\n\t        '''\n\t            Aggregates output, label pairs for every driving category\n\t        '''\n\t        n = len(clip_name)\n\t        for i in range(n):\n\t            if self.config.training_config['task_type']  == 'sequence_classification': \n\t              categories['outputs'] = torch.cat([categories['outputs'], torch.unsqueeze(outputs[i], dim=0)], dim=0)\n", "              categories['labels'] = torch.cat([categories['labels'], torch.unsqueeze(labels[i], dim=0)], dim=0)\n\t            elif self.config.training_config['task_type']  == 'collision_prediction':\n\t              temps = [torch.unsqueeze(pred, dim=0) for pred in outputs[i*self.frame_limit: (i+1)*self.frame_limit]] #list of predictions for each frame\n\t              for temp in temps:\n\t                categories['outputs'] = torch.cat([categories['outputs'], temp], dim=0) #cat each prediction individually\n\t              temps = [torch.unsqueeze(pred, dim=0) for pred in labels[i*self.frame_limit: (i+1)*self.frame_limit]] #list of labels for each frame\n\t              for temp in temps:\n\t                categories['labels'] = torch.cat([categories['labels'], temp], dim=0) #cat each label individually\n\t              del temps   \n\t        # reshape outputs\n", "        categories['outputs'] = categories['outputs'].reshape(-1, 2)\n\t    def eval_model(self, current_epoch=None):\n\t        metrics = {}\n\t        categories_train, \\\n\t        acc_loss_train, \\\n\t        train_avg_seq_len, \\\n\t        train_inference_time, \\\n\t        train_profiler_result, \\\n\t        seq_tpr, seq_fpr, seq_tnr, seq_fnr = self.model_inference(self.training_data, self.training_labels, self.training_clip_name) \n\t        # Collect metrics from all driving categories\n", "        metrics['train'] = get_metrics(categories_train['outputs'], categories_train['labels'])\n\t        metrics['train']['loss'] = acc_loss_train\n\t        metrics['train']['avg_seq_len'] = train_avg_seq_len\n\t        metrics['train']['seq_tpr'] = seq_tpr\n\t        metrics['train']['seq_tnr'] = seq_tnr\n\t        metrics['train']['seq_fpr'] = seq_fpr\n\t        metrics['train']['seq_fnr'] = seq_fnr\n\t        categories_test, \\\n\t        acc_loss_test, \\\n\t        val_avg_seq_len, \\\n", "        test_inference_time, \\\n\t        test_profiler_result, \\\n\t        seq_tpr, seq_fpr, seq_tnr, seq_fnr = self.model_inference(self.testing_data, self.testing_labels, self.testing_clip_name) \n\t        # Collect metrics from all driving categories\n\t        metrics['test'] = get_metrics(categories_test['outputs'], categories_test['labels'])\n\t        metrics['test']['loss'] = acc_loss_test\n\t        metrics['test']['avg_seq_len'] = val_avg_seq_len\n\t        metrics['test']['seq_tpr'] = seq_tpr\n\t        metrics['test']['seq_tnr'] = seq_tnr\n\t        metrics['test']['seq_fpr'] = seq_fpr\n", "        metrics['test']['seq_fnr'] = seq_fnr\n\t        metrics['avg_inf_time'] = (train_inference_time + test_inference_time) / ((len(self.training_labels) + len(self.testing_labels))*5)\n\t        print(\"\\ntrain loss: \" + str(acc_loss_train) + \", acc:\", metrics['train']['acc'], metrics['train']['confusion'], \"mcc:\", metrics['train']['mcc'], \\\n\t                 \"\\ntest loss: \" +  str(acc_loss_test) + \", acc:\",  metrics['test']['acc'],  metrics['test']['confusion'], \"mcc:\", metrics['test']['mcc'])\n\t        self.update_im_best_metrics(metrics, current_epoch)\n\t        metrics['best_epoch'] = self.best_epoch\n\t        metrics['best_val_loss'] = self.best_val_loss\n\t        metrics['best_val_acc'] = self.best_val_acc\n\t        metrics['best_val_auc'] = self.best_val_auc\n\t        metrics['best_val_conf'] = self.best_val_confusion\n", "        metrics['best_val_f1'] = self.best_val_f1\n\t        metrics['best_val_mcc'] = self.best_val_mcc\n\t        metrics['best_val_acc_balanced'] = self.best_val_acc_balanced\n\t        if self.config.training_config['n_fold'] <= 1 and self.log:  \n\t            self.log2wandb(metrics)\n\t        return categories_train, categories_test, metrics\n\t    def update_im_best_metrics(self, metrics, current_epoch):\n\t        if metrics['test']['loss'] < self.best_val_loss:\n\t            self.best_val_loss = metrics['test']['loss']\n\t            self.best_epoch = current_epoch if current_epoch != None else self.config.training_config['epochs']\n", "            self.best_val_acc = metrics['test']['acc']\n\t            self.best_val_auc = metrics['test']['auc']\n\t            self.best_val_confusion = metrics['test']['confusion']\n\t            self.best_val_f1 = metrics['test']['f1']\n\t            self.best_val_mcc = metrics['test']['mcc']\n\t            self.best_val_acc_balanced = metrics['test']['balanced_acc']\n\t    def update_im_cross_valid_metrics(self, categories_train, categories_test, metrics):\n\t        '''Stores cross-validation metrics for all driving categories'''\n\t        datasets = ['train', 'test']\n\t        if self.fold == 1:\n", "            for dataset in datasets:\n\t                categories = categories_train if dataset == 'train' else categories_test\n\t                self.results['outputs'+'_'+dataset] = categories['outputs']\n\t                self.results['labels'+'_'+dataset] = categories['labels']\n\t                self.results[dataset] = metrics[dataset]\n\t                self.results[dataset]['loss'] = metrics[dataset]['loss']\n\t                self.results[dataset]['avg_seq_len']  = metrics[dataset]['avg_seq_len'] \n\t                # Best results\n\t                self.results['avg_inf_time']  = metrics['avg_inf_time']\n\t                self.results['best_epoch']    = metrics['best_epoch']\n", "                self.results['best_val_loss'] = metrics['best_val_loss']\n\t                self.results['best_val_acc']  = metrics['best_val_acc']\n\t                self.results['best_val_auc']  = metrics['best_val_auc']\n\t                self.results['best_val_conf'] = metrics['best_val_conf']\n\t                self.results['best_val_f1']   = metrics['best_val_f1']\n\t                self.results['best_val_mcc']  = metrics['best_val_mcc']\n\t                self.results['best_val_acc_balanced'] = metrics['best_val_acc_balanced']\n\t        else:\n\t            for dataset in datasets:\n\t                categories = categories_train if dataset == 'train' else categories_test\n", "                self.results['outputs'+'_'+dataset] = torch.cat((self.results['outputs'+'_'+dataset], categories['outputs']), dim=0)\n\t                self.results['labels'+'_'+dataset]  = torch.cat((self.results['labels'+'_'+dataset], categories['labels']), dim=0)\n\t                self.results[dataset]['loss'] = np.append(self.results[dataset]['loss'], metrics[dataset]['loss'])\n\t                self.results[dataset]['avg_seq_len']  = np.append(self.results[dataset]['avg_seq_len'], metrics[dataset]['avg_seq_len'])\n\t                # Best results\n\t                self.results['avg_inf_time']  = np.append(self.results['avg_inf_time'], metrics['avg_inf_time'])\n\t                self.results['best_epoch']    = np.append(self.results['best_epoch'], metrics['best_epoch'])\n\t                self.results['best_val_loss'] = np.append(self.results['best_val_loss'], metrics['best_val_loss'])\n\t                self.results['best_val_acc']  = np.append(self.results['best_val_acc'], metrics['best_val_acc'])\n\t                self.results['best_val_auc']  = np.append(self.results['best_val_auc'], metrics['best_val_auc'])\n", "                self.results['best_val_conf'] = np.append(self.results['best_val_conf'], metrics['best_val_conf'])\n\t                self.results['best_val_f1']   = np.append(self.results['best_val_f1'], metrics['best_val_f1'])\n\t                self.results['best_val_mcc']  = np.append(self.results['best_val_mcc'], metrics['best_val_mcc'])\n\t                self.results['best_val_acc_balanced'] = np.append(self.results['best_val_acc_balanced'], metrics['best_val_acc_balanced'])\n\t        # Log final averaged results\n\t        if self.fold == self.config.training_config['n_fold']:\n\t            final_metrics = {}\n\t            for dataset in datasets:\n\t                final_metrics[dataset] = get_metrics(self.results['outputs'+'_'+dataset], self.results['labels'+'_'+dataset])\n\t                final_metrics[dataset]['loss'] = np.average(self.results[dataset]['loss'])\n", "                final_metrics[dataset]['avg_seq_len'] = np.average(self.results[dataset]['avg_seq_len'])\n\t                # Best results\n\t                final_metrics['avg_inf_time']  = np.average(self.results['avg_inf_time'])\n\t                final_metrics['best_epoch']    = np.average(self.results['best_epoch'])\n\t                final_metrics['best_val_loss'] = np.average(self.results['best_val_loss'])\n\t                final_metrics['best_val_acc']  = np.average(self.results['best_val_acc'])\n\t                final_metrics['best_val_auc']  = np.average(self.results['best_val_auc'])\n\t                final_metrics['best_val_conf'] = self.results['best_val_conf']\n\t                final_metrics['best_val_f1']   = np.average(self.results['best_val_f1'])\n\t                final_metrics['best_val_mcc']  = np.average(self.results['best_val_mcc'])\n", "                final_metrics['best_val_acc_balanced'] = np.average(self.results['best_val_acc_balanced'])\n\t            print('\\nFinal Averaged Results')\n\t            print(\"\\naverage train loss: \" + str(final_metrics['train']['loss']) + \", average acc:\", final_metrics['train']['acc'], final_metrics['train']['confusion'], final_metrics['train']['auc'], \\\n\t                \"\\naverage test loss: \" +  str(final_metrics['test']['loss']) + \", average acc:\", final_metrics['test']['acc'],  final_metrics['test']['confusion'], final_metrics['test']['auc'])\n\t            if self.log:\n\t                self.log2wandb(final_metrics)\n\t            # final combined results and metrics\n\t            return self.results['outputs_train'], self.results['labels_train'], self.results['outputs_test'], self.results['labels_test'], final_metrics\n\t    def cross_valid(self):\n\t        '''KFold cross validation with similar class distribution in each fold'''\n", "        skf = StratifiedKFold(n_splits=self.config.training_config[\"n_fold\"])\n\t        X = np.append(self.training_data, self.testing_data, axis=0)\n\t        clip_name = np.append(self.training_clip_name, self.testing_clip_name, axis=0)\n\t        y = np.append(self.training_labels, self.testing_labels, axis=0)\n\t        # self.results stores average metrics for the the n_folds\n\t        self.results = {}\n\t        self.fold = 1\n\t        # Split training and testing data based on n_splits (Folds)\n\t        for train_index, test_index in skf.split(X, y):\n\t            self.training_data, self.testing_data, self.training_clip_name, self.testing_clip_name, self.training_labels, self.testing_labels = None, None, None, None, None, None #clear vars to save memory\n", "            X_train, X_test = X[train_index], X[test_index]\n\t            clip_train, clip_test = clip_name[train_index], clip_name[test_index]\n\t            y_train, y_test = y[train_index], y[test_index]\n\t            self.class_weights = torch.from_numpy(compute_class_weight('balanced', np.unique(y_train), y_train))\n\t            # Update dataset\n\t            self.training_data = X_train\n\t            self.testing_data  = X_test\n\t            self.training_clip_name = clip_train\n\t            self.testing_clip_name = clip_test\n\t            self.training_labels = y_train\n", "            self.testing_labels  = y_test\n\t            print('\\nFold {}'.format(self.fold))\n\t            print(\"Number of Training Sequences Included: \", len(X_train))\n\t            print(\"Number of Testing Sequences Included: \",  len(X_test))\n\t            print(\"Num of Training Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t            print(\"Num of Testing Labels in Each Class: \"  + str(np.unique(self.testing_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t            self.best_val_loss = 99999\n\t            self.train()\n\t            #self.log = True\n\t            categories_train, categories_test, metrics = self.eval_model(self.fold)\n", "            self.update_im_cross_valid_metrics(categories_train, categories_test, metrics)\n\t            #self.log = False\n\t            if self.fold != self.config.training_config[\"n_fold\"]:\n\t                self.reset_weights(self.model)\n\t                del self.optimizer\n\t                self.build_model()\n\t            self.fold += 1            \n\t        del self.results\n\t    def reset_weights(self, model):\n\t        for layer in model.children():\n", "            if hasattr(layer, 'reset_parameters'):\n\t                layer.reset_parameters()\n\t    def update_cross_valid_metrics(self, categories_train, categories_test, metrics):\n\t            '''\n\t                Stores cross-validation metrics for all driving categories\n\t            '''\n\t            datasets = ['train', 'test']\n\t            if self.fold == 1:\n\t                for dataset in datasets:\n\t                    categories = categories_train if dataset == 'train' else categories_test\n", "                    for category in self.unique_clips.keys():\n\t                        if category == 'all':\n\t                            self.results['outputs'+'_'+dataset] = categories['all']['outputs']\n\t                            self.results['labels'+'_'+dataset] = categories['all']['labels']\n\t                            self.results[dataset] = metrics[dataset]\n\t                            self.results[dataset]['loss'] = metrics[dataset]['loss']\n\t                            self.results[dataset]['avg_seq_len']  = metrics[dataset]['avg_seq_len'] \n\t                            # Best results\n\t                            self.results['avg_inf_time']  = metrics['avg_inf_time']\n\t                            self.results['best_epoch']    = metrics['best_epoch']\n", "                            self.results['best_val_loss'] = metrics['best_val_loss']\n\t                            self.results['best_val_acc']  = metrics['best_val_acc']\n\t                            self.results['best_val_auc']  = metrics['best_val_auc']\n\t                            self.results['best_val_conf'] = metrics['best_val_conf']\n\t                            self.results['best_val_f1']   = metrics['best_val_f1']\n\t                            self.results['best_val_mcc']  = metrics['best_val_mcc']\n\t                            self.results['best_val_acc_balanced'] = metrics['best_val_acc_balanced']\n\t                        elif category == \"lanechange\":\n\t                            self.results['outputs'+'_'+dataset] = categories['all']['outputs']\n\t                            self.results['labels'+'_'+dataset] = categories['all']['labels']\n", "                            self.results[dataset] = metrics[dataset]\n\t                            self.results[dataset]['loss'] = metrics[dataset]['loss']\n\t                            self.results[dataset]['avg_seq_len']  = metrics[dataset]['avg_seq_len'] \n\t                            # Best results\n\t                            self.results['avg_inf_time']  = metrics['avg_inf_time']\n\t                            self.results['best_epoch']    = metrics['best_epoch']\n\t                            self.results['best_val_loss'] = metrics['best_val_loss']\n\t                            self.results['best_val_acc']  = metrics['best_val_acc']\n\t                            self.results['best_val_auc']  = metrics['best_val_auc']\n\t                            self.results['best_val_conf'] = metrics['best_val_conf']\n", "                            self.results['best_val_f1']   = metrics['best_val_f1']\n\t                            self.results['best_val_mcc']  = metrics['best_val_mcc']\n\t                            self.results['best_val_acc_balanced'] = metrics['best_val_acc_balanced']                            \n\t                        else:\n\t                            self.results[dataset][category]['outputs'] = categories[category]['outputs']\n\t                            self.results[dataset][category]['labels'] = categories[category]['labels']\n\t            else:\n\t                for dataset in datasets:\n\t                    categories = categories_train if dataset == 'train' else categories_test\n\t                    for category in self.unique_clips.keys():\n", "                        if category == 'all':\n\t                            self.results['outputs'+'_'+dataset] = torch.cat((self.results['outputs'+'_'+dataset], categories['all']['outputs']), dim=0)\n\t                            self.results['labels'+'_'+dataset]  = torch.cat((self.results['labels'+'_'+dataset], categories['all']['labels']), dim=0)\n\t                            self.results[dataset]['loss'] = np.append(self.results[dataset]['loss'], metrics[dataset]['loss'])\n\t                            self.results[dataset]['avg_seq_len']  = np.append(self.results[dataset]['avg_seq_len'], metrics[dataset]['avg_seq_len'])\n\t                            # Best results\n\t                            self.results['avg_inf_time']  = np.append(self.results['avg_inf_time'], metrics['avg_inf_time'])\n\t                            self.results['best_epoch']    = np.append(self.results['best_epoch'], metrics['best_epoch'])\n\t                            self.results['best_val_loss'] = np.append(self.results['best_val_loss'], metrics['best_val_loss'])\n\t                            self.results['best_val_acc']  = np.append(self.results['best_val_acc'], metrics['best_val_acc'])\n", "                            self.results['best_val_auc']  = np.append(self.results['best_val_auc'], metrics['best_val_auc'])\n\t                            self.results['best_val_conf'] = np.append(self.results['best_val_conf'], metrics['best_val_conf'])\n\t                            self.results['best_val_f1']   = np.append(self.results['best_val_f1'], metrics['best_val_f1'])\n\t                            self.results['best_val_mcc']  = np.append(self.results['best_val_mcc'], metrics['best_val_mcc'])\n\t                            self.results['best_val_acc_balanced'] = np.append(self.results['best_val_acc_balanced'], metrics['best_val_acc_balanced'])\n\t                        elif category == \"lanechange\":\n\t                            self.results['outputs'+'_'+dataset] = torch.cat((self.results['outputs'+'_'+dataset], categories['all']['outputs']), dim=0)\n\t                            self.results['labels'+'_'+dataset]  = torch.cat((self.results['labels'+'_'+dataset], categories['all']['labels']), dim=0)\n\t                            self.results[dataset]['loss'] = np.append(self.results[dataset]['loss'], metrics[dataset]['loss'])\n\t                            self.results[dataset]['avg_seq_len']  = np.append(self.results[dataset]['avg_seq_len'], metrics[dataset]['avg_seq_len'])\n", "                            # Best results\n\t                            self.results['avg_inf_time']  = np.append(self.results['avg_inf_time'], metrics['avg_inf_time'])\n\t                            self.results['best_epoch']    = np.append(self.results['best_epoch'], metrics['best_epoch'])\n\t                            self.results['best_val_loss'] = np.append(self.results['best_val_loss'], metrics['best_val_loss'])\n\t                            self.results['best_val_acc']  = np.append(self.results['best_val_acc'], metrics['best_val_acc'])\n\t                            self.results['best_val_auc']  = np.append(self.results['best_val_auc'], metrics['best_val_auc'])\n\t                            self.results['best_val_conf'] = np.append(self.results['best_val_conf'], metrics['best_val_conf'])\n\t                            self.results['best_val_f1']   = np.append(self.results['best_val_f1'], metrics['best_val_f1'])\n\t                            self.results['best_val_mcc']  = np.append(self.results['best_val_mcc'], metrics['best_val_mcc'])\n\t                            self.results['best_val_acc_balanced'] = np.append(self.results['best_val_acc_balanced'], metrics['best_val_acc_balanced'])\n", "                        else:\n\t                            self.results[dataset][category]['outputs'] = torch.cat((self.results[dataset][category]['outputs'], categories[category]['outputs']), dim=0)\n\t                            self.results[dataset][category]['labels']  = torch.cat((self.results[dataset][category]['labels'], categories[category]['labels']), dim=0)\n\t            # Log final averaged results\n\t            if self.fold ==  self.config.training_config[\"n_fold\"]:\n\t                final_metrics = {}\n\t                for dataset in datasets:\n\t                    for category in self.unique_clips.keys():\n\t                        if category == 'all':\n\t                            final_metrics[dataset] = get_metrics(self.results['outputs'+'_'+dataset], self.results['labels'+'_'+dataset])\n", "                            final_metrics[dataset]['loss'] = np.average(self.results[dataset]['loss'])\n\t                            final_metrics[dataset]['avg_seq_len'] = np.average(self.results[dataset]['avg_seq_len'])\n\t                            # Best results\n\t                            final_metrics['avg_inf_time']  = np.average(self.results['avg_inf_time'])\n\t                            final_metrics['best_epoch']    = np.average(self.results['best_epoch'])\n\t                            final_metrics['best_val_loss'] = np.average(self.results['best_val_loss'])\n\t                            final_metrics['best_val_acc']  = np.average(self.results['best_val_acc'])\n\t                            final_metrics['best_val_auc']  = np.average(self.results['best_val_auc'])\n\t                            final_metrics['best_val_conf'] = self.results['best_val_conf']\n\t                            final_metrics['best_val_f1']   = np.average(self.results['best_val_f1'])\n", "                            final_metrics['best_val_mcc']  = np.average(self.results['best_val_mcc'])\n\t                            final_metrics['best_val_acc_balanced'] = np.average(self.results['best_val_acc_balanced'])\n\t                        elif category == 'lanechange':\n\t                            final_metrics[dataset] = get_metrics(self.results['outputs'+'_'+dataset], self.results['labels'+'_'+dataset])\n\t                            final_metrics[dataset]['loss'] = np.average(self.results[dataset]['loss'])\n\t                            final_metrics[dataset]['avg_seq_len'] = np.average(self.results[dataset]['avg_seq_len'])\n\t                            # Best results\n\t                            final_metrics['avg_inf_time']  = np.average(self.results['avg_inf_time'])\n\t                            final_metrics['best_epoch']    = np.average(self.results['best_epoch'])\n\t                            final_metrics['best_val_loss'] = np.average(self.results['best_val_loss'])\n", "                            final_metrics['best_val_acc']  = np.average(self.results['best_val_acc'])\n\t                            final_metrics['best_val_auc']  = np.average(self.results['best_val_auc'])\n\t                            final_metrics['best_val_conf'] = self.results['best_val_conf']\n\t                            final_metrics['best_val_f1']   = np.average(self.results['best_val_f1'])\n\t                            final_metrics['best_val_mcc']  = np.average(self.results['best_val_mcc'])\n\t                            final_metrics['best_val_acc_balanced'] = np.average(self.results['best_val_acc_balanced'])\n\t                        else: \n\t                            final_metrics[dataset][category] = get_metrics(self.results[dataset][category]['outputs'], self.results[dataset][category]['labels'])\n\t                print('\\nFinal Averaged Results')\n\t                print(\"\\naverage train loss: \" + str(final_metrics['train']['loss']) + \", average acc:\", final_metrics['train']['acc'], final_metrics['train']['confusion'], final_metrics['train']['auc'], \\\n", "                    \"\\naverage test loss: \" +  str(final_metrics['test']['loss']) + \", average acc:\", final_metrics['test']['acc'],  final_metrics['test']['confusion'], final_metrics['test']['auc'])\n\t                if self.log:\n\t                    self.log2wandb(final_metrics)\n\t                # final combined results and metrics\n\t                return self.results['outputs_train'], self.results['labels_train'], self.results['outputs_test'], self.results['labels_test'], final_metrics\n\t    def log2wandb(self, metrics):\n\t        '''\n\t            Log metrics from all driving categories\n\t        '''\n\t        for category in self.unique_clips.keys():\n", "            if category == 'all':\n\t                log_im_wandb(metrics)\n\t            elif category == 'lanechange':\n\t                log_im_wandb(metrics)\n\t            else:\n\t                log_wandb_categories(metrics, id=category)"]}
{"filename": "learning/util/metrics.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\timport pandas as pd\n\timport wandb\n\tfrom sklearn import preprocessing\n\tfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, precision_score, recall_score, roc_auc_score, \\\n\t    roc_curve, balanced_accuracy_score, matthews_corrcoef\n\timport torch_geometric\n", "import pdb\n\timport torch\n\t#this file contains functions for scoring the prediction models.\n\t'''\n\t#Expected Inputs:\n\toutputs: (n, 2) FloatTensor\n\tlabels: (n,) LongTensor\n\t'''\n\tdef get_metrics(outputs, labels):\n\t    labels_tensor = labels.cpu()\n", "    outputs_tensor = outputs.cpu()\n\t    preds = outputs_tensor.max(1)[1].type_as(labels_tensor).cpu() #binarized version of outputs_tensor.\n\t    metrics = {}\n\t    metrics['acc'] = accuracy_score(labels_tensor, preds)\n\t    metrics['f1'] = f1_score(labels_tensor, preds, average=\"binary\")\n\t    conf = confusion_matrix(labels_tensor, preds)\n\t    if len(conf) > 1:\n\t        metrics['fpr'] = conf[0][1] / (conf[0][1] + conf[0][0]) #FPR = FP/(FP+TN)\n\t        metrics['tnr'] = conf[0][0] / (conf[0][1] + conf[0][0]) #TNR = TN/(FP+TN)\n\t        metrics['fnr'] = conf[1][0] / (conf[1][0] + conf[1][1]) #FNR = FN/(FN+TP)\n", "    metrics['confusion'] = str(conf).replace('\\n', ',')\n\t    metrics['precision'] = precision_score(labels_tensor, preds, average=\"binary\")\n\t    metrics['recall'] = recall_score(labels_tensor, preds, average=\"binary\") #recall and TPR are the same. TPR = TP/(TP+FN)\n\t    metrics['auc'] = get_auc(outputs_tensor, labels_tensor)\n\t    metrics['label_distribution'] = str(np.unique(labels_tensor, return_counts=True)[1])\n\t    metrics['balanced_acc'] = balanced_accuracy_score(labels_tensor, preds)\n\t    metrics['mcc'] = matthews_corrcoef(labels_tensor, preds)\n\t    return metrics \n\t#returns onehot version of labels. can specify n_classes to force onehot size.\n\tdef encode_onehot(labels, n_classes=None):\n", "    if(n_classes):\n\t        classes = set(range(n_classes))\n\t    else:\n\t        classes = set(labels)\n\t    classes_dict = {c: np.identity(len(classes))[i, :] for i, c in\n\t                    enumerate(classes)}\n\t    labels_onehot = np.array(list(map(classes_dict.get, labels)),\n\t                             dtype=np.int32)\n\t    return labels_onehot\n\t#log data to to Weights & Biases\n", "def log_wandb(metrics):\n\t    wandb.log({\n\t        \"train_acc\": metrics['train']['acc'],\n\t        \"val_acc\": metrics['test']['acc'],\n\t        \"train_acc_balanced\": metrics['train']['balanced_acc'],\n\t        \"val_acc_balanced\": metrics['test']['balanced_acc'],\n\t        \"train_loss\": metrics['train']['loss'],\n\t        \"val_loss\": metrics['test']['loss'],\n\t        'train_auc': metrics['train']['auc'],\n\t        'train_f1': metrics['train']['f1'],\n", "        'val_auc': metrics['test']['auc'],\n\t        'val_f1': metrics['test']['f1'],\n\t        'train_precision': metrics['train']['precision'],\n\t        'train_recall': metrics['train']['recall'],\n\t        'val_precision': metrics['test']['precision'],\n\t        'val_recall': metrics['test']['recall'],\n\t        'train_conf': metrics['train']['confusion'],\n\t        'val_conf': metrics['test']['confusion'],\n\t        'train_fpr': metrics['train']['fpr'],\n\t        'train_tnr': metrics['train']['tnr'],\n", "        'train_fnr': metrics['train']['fnr'],\n\t        'val_fpr': metrics['test']['fpr'],\n\t        'val_tnr': metrics['test']['tnr'],\n\t        'val_fnr': metrics['test']['fnr'],\n\t        'train_avg_seq_len': metrics['train']['avg_seq_len'],\n\t        'train_avg_pred_frame': metrics['train']['avg_prediction_frame'],\n\t        'val_avg_seq_len': metrics['test']['avg_seq_len'],\n\t        'val_avg_pred_frame': metrics['test']['avg_prediction_frame'],\n\t        'train_avg_pred_risky_indices': metrics['train']['avg_predicted_risky_indices'],\n\t        'train_avg_pred_safe_indices': metrics['train']['avg_predicted_safe_indices'],\n", "        'val_avg_pred_risky_indices': metrics['test']['avg_predicted_risky_indices'],\n\t        'val_avg_pred_safe_indices': metrics['test']['avg_predicted_safe_indices'],\n\t        'best_epoch': metrics['best_epoch'],\n\t        'best_val_loss': metrics['best_val_loss'],\n\t        'best_val_acc': metrics['best_val_acc'],\n\t        'best_val_auc': metrics['best_val_auc'],\n\t        'best_val_conf': metrics['best_val_conf'],\n\t        'best_val_mcc': metrics['best_val_mcc'],\n\t        'best_val_acc_balanced': metrics['best_val_acc_balanced'],\n\t        'train_mcc': metrics['train']['mcc'],\n", "        'val_mcc': metrics['test']['mcc'],\n\t        'avg_inf_time': metrics['avg_inf_time'],\n\t        'best_avg_pred_frame': metrics['best_avg_pred_frame'],\n\t    })\n\tdef log_wandb_transfer_learning(metrics):\n\t    wandb.log({\n\t        \"val_acc\": metrics['test']['acc'],\n\t        \"val_acc_balanced\": metrics['test']['balanced_acc'],\n\t        \"val_loss\": metrics['test']['loss'],\n\t        'val_auc': metrics['test']['auc'],\n", "        'val_f1': metrics['test']['f1'],\n\t        'val_precision': metrics['test']['precision'],\n\t        'val_recall': metrics['test']['recall'],\n\t        'val_conf': metrics['test']['confusion'],\n\t        'val_fpr': metrics['test']['fpr'],\n\t        'val_tnr': metrics['test']['tnr'],\n\t        'val_fnr': metrics['test']['fnr'],\n\t        'val_avg_seq_len': metrics['test']['avg_seq_len'],\n\t        'val_avg_pred_frame': metrics['test']['avg_prediction_frame'],\n\t        'val_avg_pred_risky_indices': metrics['test']['avg_predicted_risky_indices'],\n", "        'val_avg_pred_safe_indices': metrics['test']['avg_predicted_safe_indices'],\n\t        'best_epoch': metrics['best_epoch'],\n\t        'best_val_loss': metrics['best_val_loss'],\n\t        'best_val_acc': metrics['best_val_acc'],\n\t        'best_val_auc': metrics['best_val_auc'],\n\t        'best_val_conf': metrics['best_val_conf'],\n\t        'best_val_mcc': metrics['best_val_mcc'],\n\t        'best_val_acc_balanced': metrics['best_val_acc_balanced'],\n\t        'val_mcc': metrics['test']['mcc'],\n\t        'avg_inf_time': metrics['avg_inf_time'],\n", "        'best_avg_pred_frame': metrics['best_avg_pred_frame'],\n\t        'test_seq_tpr': metrics['test']['seq_tpr'],\n\t        'test_seq_tnr': metrics['test']['seq_tnr'],\n\t        'test_seq_fpr': metrics['test']['seq_fpr'],\n\t        'test_seq_fnr': metrics['test']['seq_fnr']\n\t    })\n\tdef log_im_wandb(metrics):\n\t    wandb.log({\n\t        \"train_acc\": metrics['train']['acc'],\n\t        \"val_acc\": metrics['test']['acc'],\n", "        \"train_acc_balanced\": metrics['train']['balanced_acc'],\n\t        \"val_acc_balanced\": metrics['test']['balanced_acc'],\n\t        \"train_loss\": metrics['train']['loss'],\n\t        \"val_loss\": metrics['test']['loss'],\n\t        'train_auc': metrics['train']['auc'],\n\t        'train_f1': metrics['train']['f1'],\n\t        'val_auc': metrics['test']['auc'],\n\t        'val_f1': metrics['test']['f1'],\n\t        'train_precision': metrics['train']['precision'],\n\t        'train_recall': metrics['train']['recall'],\n", "        'val_precision': metrics['test']['precision'],\n\t        'val_recall': metrics['test']['recall'],\n\t        'train_conf': metrics['train']['confusion'],\n\t        'val_conf': metrics['test']['confusion'],\n\t        'train_fpr': metrics['train']['fpr'],\n\t        'train_tnr': metrics['train']['tnr'],\n\t        'train_fnr': metrics['train']['fnr'],\n\t        'val_fpr': metrics['test']['fpr'],\n\t        'val_tnr': metrics['test']['tnr'],\n\t        'val_fnr': metrics['test']['fnr'],\n", "        'train_avg_seq_len': metrics['train']['avg_seq_len'],\n\t        'val_avg_seq_len': metrics['test']['avg_seq_len'],\n\t        'best_epoch': metrics['best_epoch'],\n\t        'best_val_loss': metrics['best_val_loss'],\n\t        'best_val_acc': metrics['best_val_acc'],\n\t        'best_val_auc': metrics['best_val_auc'],\n\t        'best_val_conf': metrics['best_val_conf'],\n\t        'best_val_mcc': metrics['best_val_mcc'],\n\t        'best_val_acc_balanced': metrics['best_val_acc_balanced'],\n\t        'train_mcc': metrics['train']['mcc'],\n", "        'val_mcc': metrics['test']['mcc'],\n\t        'avg_inf_time': metrics['avg_inf_time'],\n\t    })\n\tdef log_wandb_categories(metrics, id):\n\t    wandb.log({\n\t        \"train_acc\"+\"_\"+id: metrics['train'][id]['acc'],\n\t        \"val_acc\"+\"_\"+id: metrics['test'][id]['acc'],\n\t        \"train_acc_balanced\"+\"_\"+id: metrics['train'][id]['balanced_acc'],\n\t        \"val_acc_balanced\"+\"_\"+id: metrics['test'][id]['balanced_acc'],\n\t        'train_auc'+\"_\"+id: metrics['train'][id]['auc'],\n", "        'train_f1'+\"_\"+id: metrics['train'][id]['f1'],\n\t        'val_auc'+\"_\"+id: metrics['test'][id]['auc'],\n\t        'val_f1'+\"_\"+id: metrics['test'][id]['f1'],\n\t        'train_precision'+\"_\"+id: metrics['train'][id]['precision'],\n\t        'train_recall'+\"_\"+id: metrics['train'][id]['recall'],\n\t        'val_precision'+\"_\"+id: metrics['test'][id]['precision'],\n\t        'val_recall'+\"_\"+id: metrics['test'][id]['recall'],\n\t        'train_conf'+\"_\"+id: metrics['train'][id]['confusion'],\n\t        'val_conf'+\"_\"+id: metrics['test'][id]['confusion'],\n\t        'train_fpr'+\"_\"+id: metrics['train'][id]['fpr'],\n", "        'train_tnr'+\"_\"+id: metrics['train'][id]['tnr'],\n\t        'train_fnr'+\"_\"+id: metrics['train'][id]['fnr'],\n\t        'val_fpr'+\"_\"+id: metrics['test'][id]['fpr'],\n\t        'val_tnr'+\"_\"+id: metrics['test'][id]['tnr'],\n\t        'val_fnr'+\"_\"+id: metrics['test'][id]['fnr'],\n\t        'train_mcc'+\"_\"+id: metrics['train'][id]['mcc'],\n\t        'val_mcc'+\"_\"+id: metrics['test'][id]['mcc'],\n\t})\n\t#~~~~~~~~~~Scoring Metrics~~~~~~~~~~\n\t#note: these scoring metrics only work properly for binary classification use cases (graph classification, dyngraph classification) \n", "def get_auc(outputs, labels):\n\t    try:    \n\t        labels = encode_onehot(labels.numpy().tolist(), 2) #binary labels\n\t        auc = roc_auc_score(labels, outputs.numpy(), average=\"micro\")\n\t    except ValueError as err: \n\t        print(\"error calculating AUC: \", err)\n\t        auc = 0.0\n\t    return auc\n\t#NOTE: ROC curve is only generated for positive class (risky label) confidence values \n\t#render parameter determines if the figure is actually generated. If false, it saves the values to a csv file.\n", "def get_roc_curve(outputs, labels, render=False):\n\t    risk_scores = []\n\t    outputs = preprocessing.normalize(outputs.numpy(), axis=0)\n\t    for i in outputs:\n\t        risk_scores.append(i[1])\n\t    fpr, tpr, thresholds = roc_curve(labels.numpy(), risk_scores)\n\t    roc = pd.DataFrame()\n\t    roc['fpr'] = fpr\n\t    roc['tpr'] = tpr\n\t    roc['thresholds'] = thresholds\n", "    roc.to_csv(\"ROC_data.csv\")\n\t    if(render):\n\t        plt.figure(figsize=(8,8))\n\t        plt.xlim((0,1))\n\t        plt.ylim((0,1))\n\t        plt.ylabel(\"TPR\")\n\t        plt.xlabel(\"FPR\")\n\t        plt.title(\"Receiver Operating Characteristic\")\n\t        plt.plot([0,1],[0,1], linestyle='dashed')\n\t        plt.plot(fpr,tpr, linewidth=2)\n", "        plt.savefig(\"ROC_curve.svg\")\n\t#~~~~~Graph Metrics~~~~~\n\tdef get_graph_metrics(graphs):\n\t    '''get average degree, average number of edges, and eigenvector centrality across all graphs'''\n\t    metrics = {'avg_degree' : 0,\n\t                'avg_num_edges' : 0,\n\t                'std_num_edges' : 0,\n\t                'avg_eigenvector_centrality' : 0} #TODO\n\t    edge_count_list = []\n\t    for graph in graphs:\n", "        metrics['avg_degree'] += torch.sum(torch_geometric.utils.degree(graph['edge_index'][0])).item()/len(graph['node_embeddings'])\n\t        edge_count_list.append(len(graph['edge_index'][0]))\n\t    metrics['avg_degree'] /= len(graphs)\n\t    metrics['avg_num_edges'] = sum(edge_count_list) / len(graphs)\n\t    metrics['std_num_edges'] = np.std(edge_count_list)\n\t    return metrics\n"]}
{"filename": "learning/util/__init__.py", "chunked_list": []}
{"filename": "learning/util/rs2g_trainer.py", "chunked_list": ["import sys, os\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport numpy as np\n\tfrom sklearn.utils.class_weight import compute_class_weight\n\timport warnings\n\twarnings.simplefilter(action='ignore', category=FutureWarning)\n\tfrom sklearn.utils import resample\n\tfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\tfrom tqdm import tqdm\n", "from learning.util.trainer import Trainer\n\tfrom data.dataset import SceneGraphDataset\n\tfrom torch_geometric.loader import DataListLoader\n\tfrom learning.util.metrics import get_metrics, log_wandb, log_wandb_transfer_learning, get_graph_metrics\n\t'''trainer for RS2G data-driven MRGCN model.'''\n\tclass RS2G_Trainer(Trainer):\n\t    def __init__(self, config, wandb_a = None):\n\t        super(RS2G_Trainer, self).__init__(config, wandb_a)\n\t        self.scene_graph_dataset = SceneGraphDataset()\n\t        self.feature_list = list()\n", "        for i in range(self.config.model_config['num_of_classes']):\n\t            self.feature_list.append(\"type_\"+str(i))\n\t        self.device = self.config.model_config['device']\n\t    def split_dataset(self):\n\t        if (self.config.training_config['task_type'] in ['sequence_classification','graph_classification','collision_prediction']):\n\t            self.training_data, self.testing_data = self.build_scenegraph_dataset()\n\t            self.total_train_labels = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.training_data]) # used to compute frame-level class weighting\n\t            self.total_test_labels  = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.testing_data])\n\t            self.training_labels = [data['label'] for data in self.training_data]\n\t            self.testing_labels  = [data['label'] for data in self.testing_data]\n", "            if self.config.training_config['task_type'] == 'sequence_classification':\n\t                self.class_weights = torch.from_numpy(compute_class_weight('balanced', classes=np.unique(self.training_labels), y=self.training_labels))\n\t                if self.config.training_config[\"n_fold\"] <= 1:\n\t                    print(\"Number of Sequences Included: \", len(self.training_data))\n\t                    print(\"Number of Testing Sequences Included: \", len(self.testing_data))\n\t                    print(\"Num Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                    print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.testing_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t            elif self.config.training_config['task_type'] == 'collision_prediction':\n\t                self.class_weights = torch.from_numpy(compute_class_weight('balanced', classes=np.unique(self.total_train_labels), y=self.total_train_labels))\n\t                if self.config.training_config[\"n_fold\"] <= 1:\n", "                    print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                    print(\"Number of Testing Sequences Included: \", len(self.testing_data))\n\t                    print(\"Number of Training Labels in Each Class: \" + str(np.unique(self.total_train_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                    print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.total_test_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t        else:\n\t            raise ValueError('split_dataset(): task type error') \n\t    def build_transfer_learning_dataset(self): #this creates test dataset for transfer learning\n\t        scene_graph_dataset  = SceneGraphDataset()\n\t        scene_graph_dataset.dataset_save_path = self.config.location_data[\"transfer_path\"]\n\t        self.scene_graph_dataset = scene_graph_dataset.load()\n", "        self.transfer_data= []\n\t        sorted_seq = sorted(self.scene_graph_dataset.labels)\n\t        if self.config.training_config[\"scenegraph_dataset_type\"] == \"carla\":\n\t            for ind, seq in enumerate(sorted_seq): #for each seq in labels\n\t                data_to_append = {\"sequence\":self.scene_graph_dataset.process_carla_graph_sequences(self.scene_graph_dataset.scene_graphs[seq], self.feature_list, folder_name = self.scene_graph_dataset.folder_names[ind] ), \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                self.transfer_data.append(data_to_append)\n\t        elif self.config.training_config[\"scenegraph_dataset_type\"] == \"real\":\n\t            for ind, seq in enumerate(sorted_seq): \n\t                data_to_append = {\"sequence\": self.scene_graph_dataset.scene_graphs[seq], \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                self.transfer_data.append(data_to_append)\n", "        else:\n\t            raise ValueError('dataset_type unrecognized')\n\t        self.total_transfer_data_labels = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.transfer_data])\n\t        self.transfer_data_labels = [data['label'] for data in self.transfer_data]\n\t        print('Running transfer learning on dataset: ', self.config.location_data[\"transfer_path\"])\n\t        print('total labels: ', len(self.transfer_data_labels))\n\t        self.class_weights = torch.tensor([1.0, 1.0])\n\t    def evaluate_transfer_learning(self, current_epoch=None):\n\t        metrics = {}\n\t        outputs_test, \\\n", "        labels_test, \\\n\t        acc_loss_test, \\\n\t        val_avg_prediction_frame, \\\n\t        val_avg_seq_len, \\\n\t        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        test_inference_time, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n", "        seq_fnr, _ = self.inference(self.transfer_data, self.transfer_data_labels)\n\t        metrics['test'] = get_metrics(outputs_test, labels_test)\n\t        metrics['test']['loss'] = acc_loss_test\n\t        metrics['test']['avg_prediction_frame'] = val_avg_prediction_frame\n\t        metrics['test']['avg_seq_len'] = val_avg_seq_len\n\t        metrics['test']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n\t        metrics['test']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['test']['seq_tpr'] = seq_tpr\n\t        metrics['test']['seq_tnr'] = seq_tnr\n\t        metrics['test']['seq_fpr'] = seq_fpr\n", "        metrics['test']['seq_fnr'] = seq_fnr\n\t        metrics['avg_inf_time'] = (test_inference_time) / (len(labels_test))\n\t        self.update_sg_best_metrics(metrics, current_epoch)\n\t        metrics['best_epoch'] = self.best_epoch\n\t        metrics['best_val_loss'] = self.best_val_loss\n\t        metrics['best_val_acc'] = self.best_val_acc\n\t        metrics['best_val_auc'] = self.best_val_auc\n\t        metrics['best_val_conf'] = self.best_val_confusion\n\t        metrics['best_val_f1'] = self.best_val_f1\n\t        metrics['best_val_mcc'] = self.best_val_mcc\n", "        metrics['best_val_acc_balanced'] = self.best_val_acc_balanced\n\t        metrics['best_avg_pred_frame'] = self.best_avg_pred_frame\n\t        if self.config.training_config[\"n_fold\"] <= 1 and self.log:\n\t            log_wandb_transfer_learning(metrics)\n\t        return outputs_test, labels_test, metrics\n\t    def build_scenegraph_dataset(self): #this creates test and training datasets\n\t        '''\n\t        Dataset format \n\t            scenegraphs_sequence: dict_keys(['sequence', 'label', 'folder_name'])\n\t                'sequence': scenegraph metadata\n", "                'label': classification output [0 -> non_risky (negative), 1 -> risky (positive)]\n\t                'folder_name': foldername storing sequence data\n\t        Dataset modes\n\t            no downsample\n\t                all sequences used for the train and test set regardless of class distribution\n\t            downsample  \n\t                equal amount of positive and negative sequences used for the train and test set\n\t            transfer \n\t                replaces original test set with another dataset \n\t        '''\n", "        #Load sg dataset obj\n\t        scene_graph_dataset  = SceneGraphDataset()\n\t        scene_graph_dataset.dataset_save_path = self.config.location_data[\"input_path\"]\n\t        self.scene_graph_dataset = scene_graph_dataset.load()     \n\t        class_0 = []\n\t        class_1 = []\n\t        sorted_seq = sorted(self.scene_graph_dataset.labels)\n\t        if self.config.training_config[\"scenegraph_dataset_type\"] == \"carla\":\n\t            for ind, seq in enumerate(sorted_seq): #for each seq in labels\n\t                data_to_append = {\"sequence\": self.scene_graph_dataset.scene_graphs[seq], \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n", "                if self.scene_graph_dataset.labels[seq] == 0:\n\t                    class_0.append(data_to_append) \n\t                elif self.scene_graph_dataset.labels[seq] == 1:\n\t                    class_1.append(data_to_append)\n\t        elif self.config.training_config[\"scenegraph_dataset_type\"] == \"real\":\n\t            if self.config.training_config[\"scenegraph_data_format\"] == \"carla\":\n\t                for ind, seq in enumerate(sorted_seq): #for each seq in labels\n\t                    ego_idx = sorted(self.scene_graph_dataset.scene_graphs[seq].keys())[0]\n\t                    data_to_append = {\"sequence\": self.scene_graph_dataset.scene_graphs[seq], \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                    if self.scene_graph_dataset.labels[seq] == 0:\n", "                        class_0.append(data_to_append) \n\t                    elif self.scene_graph_dataset.labels[seq] == 1:\n\t                        class_1.append(data_to_append)\n\t            elif self.config.training_config[\"scenegraph_data_format\"] == \"honda\":\n\t                for ind, seq in enumerate(sorted_seq): \n\t                    data_to_append = {\"sequence\": self.scene_graph_dataset.scene_graphs[seq], \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                    if self.scene_graph_dataset.labels[seq] == 0:\n\t                        class_0.append(data_to_append)  \n\t                    elif self.scene_graph_dataset.labels[seq] == 1:\n\t                        class_1.append(data_to_append)\n", "            else: \n\t                raise ValueError('scenegraph_data_format not recognized') \n\t        else:\n\t            raise ValueError('scenegraph_dataset_type not recognized') \n\t        y_0 = [0]*len(class_0)  \n\t        y_1 = [1]*len(class_1)\n\t        min_number = min(len(class_0), len(class_1))\n\t        downsample = self.config.training_config[\"downsample\"]\n\t        if downsample:\n\t            modified_class_0, modified_y_0 = resample(class_0, y_0, n_samples=min_number)\n", "        else:\n\t            modified_class_0, modified_y_0 = class_0, y_0\n\t        train, test, train_y, test_y = train_test_split(modified_class_0+class_1, modified_y_0+y_1, test_size=self.config.training_config[\"split_ratio\"], shuffle=True, stratify=modified_y_0+y_1, random_state=self.config.seed)\n\t        if self.config.location_data[\"transfer_path\"] != None:\n\t            self.build_transfer_learning_dataset()\n\t        return train, test\n\t    '''preprocess nodes for the self supervision task'''\n\t    def preprocess_nodes(self, nodes):\n\t        actor_names = self.config.relation_extraction_settings[\"ACTOR_NAMES\"]\n\t        node_feature_list = []\n", "        for node_id in nodes.keys():\n\t            node_features = []\n\t            if nodes[node_id]['label'] in ['Root Road']:\n\t                continue\n\t            if nodes[node_id]['label'] == 'ego car':\n\t                nodes[node_id]['attr'].update({'left': 640-100,\n\t                                                'top': 620,\n\t                                                'right': 640+100,\n\t                                                'bottom': 720})\n\t                nodes[node_id]['label'] = \"ego car_\" \n", "            if nodes[node_id]['label'] == 'Left Lane':\n\t                nodes[node_id]['attr'].update({'left': 0,\n\t                                                'top': 0,\n\t                                                'right': 0,\n\t                                                'bottom': 0})\n\t                nodes[node_id]['label'] = \"lane_l\"\n\t            if nodes[node_id]['label'] == 'Right Lane':\n\t                nodes[node_id]['attr'].update({'left': 1280,\n\t                                                'top': 0,\n\t                                                'right': 1280,\n", "                                                'bottom': 0})\n\t                nodes[node_id]['label'] = \"lane_r\" \n\t            if nodes[node_id]['label'] == 'Middle Lane':\n\t                nodes[node_id]['attr'].update({'left': 640,\n\t                                                'top': 0,\n\t                                                'right': 640,\n\t                                                'bottom': 0})\n\t                nodes[node_id]['label'] = \"lane_m\"\n\t            node_features = [0.0] * 15 #new format = [Left, Top, Right, Bottom, W, H, T] \n\t            node_features[0] = nodes[node_id]['attr']['left'] / 1280\n", "            node_features[1] = nodes[node_id]['attr']['top'] / 720\n\t            node_features[2] = nodes[node_id]['attr']['right'] / 1280\n\t            node_features[3] = nodes[node_id]['attr']['bottom'] / 720\n\t            node_features[4] = node_features[2] - node_features[0] / 1280\n\t            node_features[5] = node_features[3] - node_features[1] / 720\n\t            node_features[6 + actor_names.index(nodes[node_id]['label'].split('_')[0])] = 1\n\t            node_features = torch.FloatTensor(node_features)\n\t            node_feature_list.append(node_features)\n\t        return node_feature_list\n\t    def train(self):\n", "        if (self.config.training_config['task_type'] in ['sequence_classification','graph_classification','collision_prediction']):\n\t            tqdm_bar = tqdm(range(self.config.training_config['epochs']))\n\t            for epoch_idx in tqdm_bar: # iterate through epoch   \n\t                acc_loss_train = 0\n\t                self.sequence_loader = DataListLoader(self.training_data, batch_size=self.config.training_config[\"batch_size\"])\n\t                for data_list in self.sequence_loader: # iterate through batches of the dataset\n\t                    self.model.train()\n\t                    self.optimizer.zero_grad()\n\t                    labels = torch.empty(0).long().to(self.device)\n\t                    outputs = torch.empty(0,2).to(self.device)\n", "                    for sequence in data_list: # iterate through scene-graph sequences in the batch\n\t                        data, label = sequence['sequence'], sequence['label'] #data= list of SceneGraph\n\t                        new_sequence = []\n\t                        data = [data[frame] for frame in sorted(data.keys())] if type(data) == dict else data\n\t                        for d in data: #this loop extracts a list of nodes and their attributes for each frame.\n\t                            g = d.g\n\t                            nodes = dict(g.nodes(data=True))\n\t                            node_feature_list = self.preprocess_nodes(nodes)\n\t                            new_sequence.append(torch.stack(node_feature_list).to(self.device))\n\t                        # new_sequence : B x N x 15\n", "                        result = self.model.forward(new_sequence)\n\t                        output = result['output']\n\t                        if self.config.training_config['task_type'] == 'sequence_classification': # seq vs graph based learning\n\t                            labels  = torch.cat([labels, torch.tensor(label).long().unsqueeze(0).to(self.device)], dim=0)\n\t                            new_sequence = torch.cat(new_sequence, dim=0)\n\t                        elif self.config.training_config['task_type'] in ['collision_prediction']:\n\t                            label = torch.tensor(np.full(output.shape[0], label)).long().to(self.device) #fill label to length of the sequence. shape (len_input_sequence, 1)\n\t                            labels  = torch.cat([labels, label], dim=0)\n\t                        else:\n\t                            raise ValueError('task_type is unimplemented')\n", "                        outputs = torch.cat([outputs, output.view(-1, 2)], dim=0) #in this case the output is of shape (len_input_sequence, 2)\n\t                    loss_train = self.loss_func(outputs, labels)\n\t                    loss_train.backward()\n\t                    acc_loss_train += loss_train.detach().cpu().item() * len(data_list)\n\t                    self.optimizer.step()\n\t                    del loss_train\n\t                acc_loss_train /= len(self.training_data)\n\t                tqdm_bar.set_description('Epoch: {:04d}, loss_train: {:.4f}'.format(epoch_idx, acc_loss_train))\n\t                if epoch_idx % self.config.training_config[\"test_step\"] == 0:\n\t                    self.evaluate(epoch_idx)\n", "        else:\n\t            raise ValueError('train(): task type error') \n\t    def cross_valid(self):\n\t           # KFold cross validation with similar class distribution in each fold\n\t           skf = StratifiedKFold(n_splits=self.config.training_config[\"n_fold\"])\n\t           X = np.array(self.training_data + self.testing_data)\n\t           y = np.array(self.training_labels + self.testing_labels)\n\t           # self.results stores average metrics for the the n_folds\n\t           self.results = {}\n\t           self.fold = 1\n", "           # Split training and testing data based on n_splits (Folds)\n\t           for train_index, test_index in skf.split(X, y):\n\t               X_train, X_test = X[train_index], X[test_index]\n\t               y_train, y_test = y[train_index], y[test_index]\n\t               self.training_data = X_train\n\t               self.testing_data  = X_test\n\t               self.training_labels = y_train\n\t               self.testing_labels  = y_test\n\t               if self.config.training_config['task_type'] == 'sequence_classification':\n\t                   print('\\nFold {}'.format(self.fold))\n", "                   print(\"Number of Sequences Included: \", len(self.training_data))\n\t                   print(\"Num Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t               elif self.config.training_config['task_type'] == 'collision_prediction':\n\t                   print('\\nFold {}'.format(self.fold))\n\t                   print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                   print(\"Number of Testing Sequences Included: \",  len(self.testing_data))\n\t                   print(\"Number of Training Labels in Each Class: \" + str(np.unique(self.total_train_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                   print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.total_test_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t               self.best_val_loss = 99999\n\t               self.train()\n", "               outputs_train, labels_train, outputs_test, labels_test, metrics = self.evaluate(self.fold)\n\t               self.update_sg_cross_valid_metrics(outputs_train, labels_train, outputs_test, labels_test, metrics)\n\t               if self.fold != self.config.training_config[\"n_fold\"]:            \n\t                   del self.model\n\t                   del self.optimizer\n\t                   self.build_model()\n\t               self.fold += 1            \n\t           del self.results\n\t    def inference(self, testing_data, testing_labels):\n\t        labels = torch.LongTensor().to(self.device)\n", "        outputs = torch.FloatTensor().to(self.device)\n\t        acc_loss_test = 0\n\t        attns_weights = []\n\t        node_attns = []\n\t        folder_names = []\n\t        sum_prediction_frame = 0\n\t        sum_seq_len = 0\n\t        num_risky_sequences = 0\n\t        num_safe_sequences = 0\n\t        sum_predicted_risky_indices = 0 #sum is calculated as (value * (index+1))/sum(range(seq_len)) for each value and index in the sequence.\n", "        sum_predicted_safe_indices = 0  #sum is calculated as ((1-value) * (index+1))/sum(range(seq_len)) for each value and index in the sequence.\n\t        inference_time = 0 #TODO: remove this metric\n\t        prof_result = \"\"\n\t        correct_risky_seq = 0\n\t        correct_safe_seq = 0\n\t        incorrect_risky_seq = 0\n\t        incorrect_safe_seq = 0\n\t        all_graph_lists = []\n\t        if 'log_graphs' in self.config.model_config.keys() and self.config.model_config['log_graphs']:\n\t            os.makedirs(self.config.model_config['ss_graph_path'] + 'correct', exist_ok=True)\n", "            os.makedirs(self.config.model_config['ss_graph_path'] + 'incorrect', exist_ok=True)\n\t            os.makedirs(self.config.model_config['orig_graph_path'] + 'correct', exist_ok=True)\n\t            os.makedirs(self.config.model_config['orig_graph_path'] + 'incorrect', exist_ok=True)\n\t        with torch.autograd.profiler.profile(enabled=False, use_cuda=True) as prof:\n\t            self.model.eval()\n\t            with torch.no_grad():\n\t                for i in range(len(testing_data)): # iterate through scenegraphs\n\t                    data, label = testing_data[i]['sequence'], testing_labels[i]\n\t                    folder_name = testing_data[i]['folder_name']\n\t                    folder_names.append(folder_name)\n", "                    new_sequence = []\n\t                    #this loop extracts a list of nodes and their attributes for each frame.\n\t                    data = [data[frame] for frame in sorted(data.keys())] if type(data) == dict else data\n\t                    for d in data:\n\t                        g = d.g\n\t                        nodes = dict(g.nodes(data=True))\n\t                        node_feature_list = self.preprocess_nodes(nodes)\n\t                        new_sequence.append(torch.stack(node_feature_list).to(self.device))\n\t                    out = self.model.forward(new_sequence)\n\t                    output, graph_list = out['output'], out['graph_list']\n", "                    inference_time += 0\n\t                    output = output.view(-1,2)\n\t                    label = torch.tensor(np.full(output.shape[0], label)).long().to(self.device) #fill label to length of the sequence.\n\t                    if 'log_graphs' in self.config.model_config.keys() and self.config.model_config['log_graphs']:\n\t                        if label == output.max(1)[1].type_as(label):\n\t                            torch.save(graph_list, self.config.model_config['ss_graph_path'] + 'correct/'+folder_name+\".pt\")\n\t                            torch.save(data, self.config.model_config['orig_graph_path'] + 'correct/'+folder_name+\".pt\")\n\t                        else:\n\t                            torch.save(graph_list, self.config.model_config['ss_graph_path'] + 'incorrect/'+folder_name+\".pt\")\n\t                            torch.save(data, self.config.model_config['orig_graph_path'] + 'incorrect/'+folder_name+\".pt\")\n", "                        all_graph_lists.append(graph_list)\n\t                    outputs = torch.cat([outputs, output], dim=0)\n\t                    labels = torch.cat([labels, label], dim=0)\n\t                    #log metrics for risky and non-risky clips separately.\n\t                    if(1 in label):\n\t                        preds = output.max(1)[1].type_as(label)\n\t                        num_risky_sequences += 1\n\t                        sum_seq_len += output.shape[0]\n\t                        if (1 in preds):\n\t                            correct_risky_seq += 1 #sequence level metrics\n", "                            sum_prediction_frame += torch.where(preds == 1)[0][0].item() #returns the first index of a \"risky\" prediction in this sequence.\n\t                            sum_predicted_risky_indices += torch.sum(torch.where(preds==1)[0]+1).item()/np.sum(range(output.shape[0]+1)) #(1*index)/seq_len added to sum.\n\t                        else:\n\t                            incorrect_risky_seq += 1\n\t                            sum_prediction_frame += output.shape[0] #if no risky predictions are made, then add the full sequence length to running avg.\n\t                    elif(0 in label):\n\t                        preds = output.max(1)[1].type_as(label)\n\t                        num_safe_sequences += 1\n\t                        if (1 in preds): #sequence level metrics\n\t                            incorrect_safe_seq += 1 \n", "                        else:\n\t                            correct_safe_seq += 1 \n\t                        if (0 in preds):\n\t                            sum_predicted_safe_indices += torch.sum(torch.where(preds==0)[0]+1).item()/np.sum(range(output.shape[0]+1)) #(1*index)/seq_len added to sum.\n\t                    loss_test = self.loss_func(output, label)\n\t                    acc_loss_test += loss_test.detach().cpu().item()\n\t        graph_metrics = get_graph_metrics([graph for sublist in all_graph_lists for graph in sublist])\n\t        print(graph_metrics)\n\t        avg_risky_prediction_frame = sum_prediction_frame / num_risky_sequences if num_risky_sequences != 0 else 0 #avg of first indices in a sequence that a risky frame is first correctly predicted.\n\t        avg_risky_seq_len = sum_seq_len / num_risky_sequences if num_risky_sequences != 0 else 0 #sequence length for comparison with the prediction frame metric. \n", "        avg_predicted_risky_indices = sum_predicted_risky_indices / num_risky_sequences if num_risky_sequences != 0 else 0\n\t        avg_predicted_safe_indices = sum_predicted_safe_indices / num_safe_sequences if num_safe_sequences != 0 else 0\n\t        seq_tpr = correct_risky_seq / num_risky_sequences if num_risky_sequences != 0 else 0\n\t        seq_fpr = incorrect_safe_seq / num_safe_sequences if num_safe_sequences != 0 else 0\n\t        seq_tnr = correct_safe_seq / num_safe_sequences if num_safe_sequences != 0 else 0\n\t        seq_fnr = incorrect_risky_seq / num_risky_sequences if num_risky_sequences != 0 else 0\n\t        if prof != None:\n\t            prof_result = prof.key_averages().table(sort_by=\"cuda_time_total\")\n\t        return outputs, \\\n\t                labels, \\\n", "                acc_loss_test/len(testing_data), \\\n\t                attns_weights, \\\n\t                node_attns, \\\n\t                avg_risky_prediction_frame, \\\n\t                avg_risky_seq_len, \\\n\t                avg_predicted_risky_indices, \\\n\t                avg_predicted_safe_indices, \\\n\t                inference_time, \\\n\t                prof_result, \\\n\t                seq_tpr, \\\n", "                seq_fpr, \\\n\t                seq_tnr, \\\n\t                seq_fnr, folder_names\n\t    def evaluate(self, current_epoch=None):\n\t        metrics = {}\n\t        outputs_train, \\\n\t        labels_train, \\\n\t        acc_loss_train, \\\n\t        attns_train, \\\n\t        node_attns_train, \\\n", "        train_avg_prediction_frame, \\\n\t        train_avg_seq_len, \\\n\t        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        train_inference_time, \\\n\t        train_profiler_result, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n\t        seq_fnr, _ = self.inference(self.training_data, self.training_labels)\n", "        torch.cuda.empty_cache() #clear training data from GPU memory\n\t        metrics['train'] = get_metrics(outputs_train, labels_train)\n\t        metrics['train']['loss'] = acc_loss_train\n\t        metrics['train']['avg_prediction_frame'] = train_avg_prediction_frame\n\t        metrics['train']['avg_seq_len'] = train_avg_seq_len\n\t        metrics['train']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n\t        metrics['train']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['train']['seq_tpr'] = seq_tpr\n\t        metrics['train']['seq_tnr'] = seq_tnr\n\t        metrics['train']['seq_fpr'] = seq_fpr\n", "        metrics['train']['seq_fnr'] = seq_fnr\n\t        with open(\"graph_profile_metrics.txt\", mode='w') as f:\n\t            f.write(train_profiler_result)\n\t        outputs_test, \\\n\t        labels_test, \\\n\t        acc_loss_test, \\\n\t        attns_test, \\\n\t        node_attns_test, \\\n\t        val_avg_prediction_frame, \\\n\t        val_avg_seq_len, \\\n", "        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        test_inference_time, \\\n\t        test_profiler_result, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n\t        seq_fnr, _ = self.inference(self.testing_data, self.testing_labels)\n\t        metrics['test'] = get_metrics(outputs_test, labels_test)\n\t        metrics['test']['loss'] = acc_loss_test\n", "        metrics['test']['avg_prediction_frame'] = val_avg_prediction_frame\n\t        metrics['test']['avg_seq_len'] = val_avg_seq_len\n\t        metrics['test']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n\t        metrics['test']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['test']['seq_tpr'] = seq_tpr\n\t        metrics['test']['seq_tnr'] = seq_tnr\n\t        metrics['test']['seq_fpr'] = seq_fpr\n\t        metrics['test']['seq_fnr'] = seq_fnr\n\t        metrics['avg_inf_time'] = (train_inference_time + test_inference_time) / (len(labels_train) + len(labels_test))\n\t        print(\"\\ntrain loss: \" + str(acc_loss_train) + \", acc:\", metrics['train']['acc'], metrics['train']['confusion'], \"mcc:\", metrics['train']['mcc'], \\\n", "              \"\\ntest loss: \" +  str(acc_loss_test) + \", acc:\",  metrics['test']['acc'],  metrics['test']['confusion'], \"mcc:\", metrics['test']['mcc'])\n\t        self.update_sg_best_metrics(metrics, current_epoch)\n\t        metrics['best_epoch'] = self.best_epoch\n\t        metrics['best_val_loss'] = self.best_val_loss\n\t        metrics['best_val_acc'] = self.best_val_acc\n\t        metrics['best_val_auc'] = self.best_val_auc\n\t        metrics['best_val_conf'] = self.best_val_confusion\n\t        metrics['best_val_f1'] = self.best_val_f1\n\t        metrics['best_val_mcc'] = self.best_val_mcc\n\t        metrics['best_val_acc_balanced'] = self.best_val_acc_balanced\n", "        metrics['best_avg_pred_frame'] = self.best_avg_pred_frame\n\t        if self.config.training_config[\"n_fold\"] <= 1 and self.log:\n\t            log_wandb(metrics)\n\t        torch.cuda.empty_cache() #clear test data from GPU memory\n\t        return outputs_train, labels_train, outputs_test, labels_test, metrics\n\t        #automatically save the model and metrics with the lowest validation loss\n\t    def update_sg_best_metrics(self, metrics, current_epoch):\n\t        if metrics['test']['loss'] < self.best_val_loss:\n\t            self.best_val_loss = metrics['test']['loss']\n\t            self.best_epoch = current_epoch if current_epoch != None else self.config.training_config[\"epochs\"]\n", "            self.best_val_acc = metrics['test']['acc']\n\t            self.best_val_auc = metrics['test']['auc']\n\t            self.best_val_confusion = metrics['test']['confusion']\n\t            self.best_val_f1 = metrics['test']['f1']\n\t            self.best_val_mcc = metrics['test']['mcc']\n\t            self.best_val_acc_balanced = metrics['test']['balanced_acc']\n\t            self.best_avg_pred_frame = metrics['test']['avg_prediction_frame']\n\t            self.save_model()\n\t    # Averages metrics after the end of each cross validation fold\n\t    def update_sg_cross_valid_metrics(self, outputs_train, labels_train, outputs_test, labels_test, metrics):\n", "        if self.fold == 1:\n\t            self.results['outputs_train'] = outputs_train\n\t            self.results['labels_train'] = labels_train\n\t            self.results['train'] = metrics['train']\n\t            self.results['train']['loss'] = metrics['train']['loss']\n\t            self.results['train']['avg_prediction_frame'] = metrics['train']['avg_prediction_frame'] \n\t            self.results['train']['avg_seq_len']  = metrics['train']['avg_seq_len'] \n\t            self.results['train']['avg_predicted_risky_indices'] = metrics['train']['avg_predicted_risky_indices'] \n\t            self.results['train']['avg_predicted_safe_indices'] = metrics['train']['avg_predicted_safe_indices']\n\t            self.results['outputs_test'] = outputs_test\n", "            self.results['labels_test'] = labels_test\n\t            self.results['test'] = metrics['test']\n\t            self.results['test']['loss'] = metrics['test']['loss'] \n\t            self.results['test']['avg_prediction_frame'] = metrics['test']['avg_prediction_frame'] \n\t            self.results['test']['avg_seq_len'] = metrics['test']['avg_seq_len'] \n\t            self.results['test']['avg_predicted_risky_indices'] = metrics['test']['avg_predicted_risky_indices'] \n\t            self.results['test']['avg_predicted_safe_indices'] = metrics['test']['avg_predicted_safe_indices']\n\t            self.results['avg_inf_time'] = metrics['avg_inf_time']\n\t            self.results['best_epoch']    = metrics['best_epoch']\n\t            self.results['best_val_loss'] = metrics['best_val_loss']\n", "            self.results['best_val_acc']  = metrics['best_val_acc']\n\t            self.results['best_val_auc']  = metrics['best_val_auc']\n\t            self.results['best_val_conf'] = metrics['best_val_conf']\n\t            self.results['best_val_f1']   = metrics['best_val_f1']\n\t            self.results['best_val_mcc']  = metrics['best_val_mcc']\n\t            self.results['best_val_acc_balanced'] = metrics['best_val_acc_balanced']\n\t            self.results['best_avg_pred_frame'] = metrics['best_avg_pred_frame']\n\t        else:\n\t            self.results['outputs_train'] = torch.cat((self.results['outputs_train'], outputs_train), dim=0)\n\t            self.results['labels_train']  = torch.cat((self.results['labels_train'], labels_train), dim=0)\n", "            self.results['train']['loss'] = np.append(self.results['train']['loss'], metrics['train']['loss'])\n\t            self.results['train']['avg_prediction_frame'] = np.append(self.results['train']['avg_prediction_frame'], \n\t                                                                            metrics['train']['avg_prediction_frame'])\n\t            self.results['train']['avg_seq_len']  = np.append(self.results['train']['avg_seq_len'], metrics['train']['avg_seq_len'])\n\t            self.results['train']['avg_predicted_risky_indices'] = np.append(self.results['train']['avg_predicted_risky_indices'], \n\t                                                                                    metrics['train']['avg_predicted_risky_indices'])\n\t            self.results['train']['avg_predicted_safe_indices'] = np.append(self.results['train']['avg_predicted_safe_indices'], \n\t                                                                                    metrics['train']['avg_predicted_safe_indices'])\n\t            self.results['outputs_test'] = torch.cat((self.results['outputs_test'], outputs_test), dim=0)\n\t            self.results['labels_test']  = torch.cat((self.results['labels_test'], labels_test), dim=0)\n", "            self.results['test']['loss'] = np.append(self.results['test']['loss'], metrics['test']['loss'])\n\t            self.results['test']['avg_prediction_frame'] = np.append(self.results['test']['avg_prediction_frame'], \n\t                                                                        metrics['test']['avg_prediction_frame'])\n\t            self.results['test']['avg_seq_len'] = np.append(self.results['test']['avg_seq_len'], metrics['test']['avg_seq_len'])\n\t            self.results['test']['avg_predicted_risky_indices'] = np.append(self.results['test']['avg_predicted_risky_indices'], \n\t                                                                                    metrics['test']['avg_predicted_risky_indices'])\n\t            self.results['test']['avg_predicted_safe_indices'] = np.append(self.results['test']['avg_predicted_safe_indices'], \n\t                                                                                    metrics['test']['avg_predicted_safe_indices'])\n\t            self.results['avg_inf_time'] = np.append(self.results['avg_inf_time'], metrics['avg_inf_time'])\n\t            self.results['best_epoch']    = np.append(self.results['best_epoch'], metrics['best_epoch'])\n", "            self.results['best_val_loss'] = np.append(self.results['best_val_loss'], metrics['best_val_loss'])\n\t            self.results['best_val_acc']  = np.append(self.results['best_val_acc'], metrics['best_val_acc'])\n\t            self.results['best_val_auc']  = np.append(self.results['best_val_auc'], metrics['best_val_auc'])\n\t            self.results['best_val_conf'] = np.append(self.results['best_val_conf'], metrics['best_val_conf'])\n\t            self.results['best_val_f1']   = np.append(self.results['best_val_f1'], metrics['best_val_f1'])\n\t            self.results['best_val_mcc']  = np.append(self.results['best_val_mcc'], metrics['best_val_mcc'])\n\t            self.results['best_val_acc_balanced'] = np.append(self.results['best_val_acc_balanced'], metrics['best_val_acc_balanced'])\n\t            self.results['best_avg_pred_frame'] = np.append(self.results['best_avg_pred_frame'], metrics['best_avg_pred_frame'])\n\t        # Log final averaged results\n\t        if self.fold == self.config.training_config[\"n_fold\"]:\n", "            final_results = {}\n\t            final_results['train'] = get_metrics(self.results['outputs_train'], self.results['labels_train'])\n\t            final_results['train']['loss'] = np.average(self.results['train']['loss'])\n\t            final_results['train']['avg_prediction_frame'] = np.average(self.results['train']['avg_prediction_frame'])\n\t            final_results['train']['avg_seq_len'] = np.average(self.results['train']['avg_seq_len'])\n\t            final_results['train']['avg_predicted_risky_indices'] = np.average(self.results['train']['avg_predicted_risky_indices'])\n\t            final_results['train']['avg_predicted_safe_indices'] = np.average(self.results['train']['avg_predicted_safe_indices'])\n\t            final_results['test'] = get_metrics(self.results['outputs_test'], self.results['labels_test'])\n\t            final_results['test']['loss'] = np.average(self.results['test']['loss'])\n\t            final_results['test']['avg_prediction_frame'] = np.average(self.results['test']['avg_prediction_frame'])\n", "            final_results['test']['avg_seq_len'] = np.average(self.results['test']['avg_seq_len'])\n\t            final_results['test']['avg_predicted_risky_indices'] = np.average(self.results['test']['avg_predicted_risky_indices'])\n\t            final_results['test']['avg_predicted_safe_indices'] = np.average(self.results['test']['avg_predicted_safe_indices'])\n\t            final_results['avg_inf_time'] = np.average(self.results['avg_inf_time'])\n\t            # Best results\n\t            final_results['best_epoch']    = np.average(self.results['best_epoch'])\n\t            final_results['best_val_loss'] = np.average(self.results['best_val_loss'])\n\t            final_results['best_val_acc']  = np.average(self.results['best_val_acc'])\n\t            final_results['best_val_auc']  = np.average(self.results['best_val_auc'])\n\t            final_results['best_val_conf'] = self.results['best_val_conf']\n", "            final_results['best_val_f1']   = np.average(self.results['best_val_f1'])\n\t            final_results['best_val_mcc']  = np.average(self.results['best_val_mcc'])\n\t            final_results['best_val_acc_balanced'] = np.average(self.results['best_val_acc_balanced'])\n\t            final_results['best_avg_pred_frame'] = np.average(self.results['best_avg_pred_frame'])\n\t            print('\\nFinal Averaged Results')\n\t            print(\"\\naverage train loss: \" + str(final_results['train']['loss']) + \", average acc:\", final_results['train']['acc'], final_results['train']['confusion'], final_results['train']['auc'], \\\n\t                \"\\naverage test loss: \" +  str(final_results['test']['loss']) + \", average acc:\", final_results['test']['acc'],  final_results['test']['confusion'], final_results['test']['auc'])\n\t            if self.log:\n\t                log_wandb(final_results)\n\t            return self.results['outputs_train'], self.results['labels_train'], self.results['outputs_test'], self.results['labels_test'], final_results\n"]}
{"filename": "learning/util/scenegraph_trainer.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport sys, os\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport numpy as np\n\tfrom sklearn.utils.class_weight import compute_class_weight\n\timport warnings\n\twarnings.simplefilter(action='ignore', category=FutureWarning)\n\tfrom sklearn.utils import resample\n", "from sklearn.model_selection import train_test_split, StratifiedKFold\n\tfrom tqdm import tqdm\n\tfrom learning.util.trainer import Trainer\n\tfrom data.dataset import SceneGraphDataset\n\tfrom torch_geometric.loader import DataLoader, DataListLoader\n\tfrom learning.util.metrics import get_metrics, log_wandb, log_wandb_transfer_learning \n\tfrom torch_geometric.data import Data\n\t'''trainer for rule-based MRGCN baseline model'''\n\tclass Scenegraph_Trainer(Trainer):\n\t    def __init__(self, config, wandb_a = None):\n", "        super(Scenegraph_Trainer, self).__init__(config, wandb_a)\n\t        self.scene_graph_dataset = SceneGraphDataset()\n\t        self.feature_list = list()\n\t        for i in range(self.config.model_config['num_of_classes']):\n\t            self.feature_list.append(\"type_\"+str(i))\n\t    def split_dataset(self): #this is init_dataset from multimodal\n\t        if (self.config.training_config['task_type'] in ['sequence_classification','graph_classification','collision_prediction']):\n\t            self.training_data, self.testing_data = self.build_scenegraph_dataset()\n\t            self.total_train_labels = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.training_data]) # used to compute frame-level class weighting\n\t            self.total_test_labels  = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.testing_data])\n", "            self.training_labels = [data['label'] for data in self.training_data]\n\t            self.testing_labels  = [data['label'] for data in self.testing_data]\n\t            if self.config.training_config['task_type'] == 'sequence_classification':\n\t                self.class_weights = torch.from_numpy(compute_class_weight('balanced', classes=np.unique(self.training_labels), y=self.training_labels))\n\t                if self.config.training_config[\"n_fold\"] <= 1:\n\t                    print(\"Number of Sequences Included: \", len(self.training_data))\n\t                    print(\"Num Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t            elif self.config.training_config['task_type'] == 'collision_prediction':\n\t                self.class_weights = torch.from_numpy(compute_class_weight('balanced', classes=np.unique(self.total_train_labels), y=self.total_train_labels))\n\t                if self.config.training_config[\"n_fold\"] <= 1:\n", "                    print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                    print(\"Number of Testing Sequences Included: \", len(self.testing_data))\n\t                    print(\"Number of Training Labels in Each Class: \" + str(np.unique(self.total_train_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                    print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.total_test_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t        else:\n\t            raise ValueError('split_dataset(): task type error') \n\t    def build_transfer_learning_dataset(self): #this creates test dataset for transfer learning\n\t        scene_graph_dataset  = SceneGraphDataset()\n\t        scene_graph_dataset.dataset_save_path = self.config.location_data[\"transfer_path\"]\n\t        self.scene_graph_dataset = scene_graph_dataset.load()\n", "        self.transfer_data= []\n\t        sorted_seq = sorted(self.scene_graph_dataset.labels)\n\t        if self.config.training_config[\"scenegraph_dataset_type\"] == \"carla\":\n\t            for ind, seq in enumerate(sorted_seq): #for each seq in labels\n\t                data_to_append = {\"sequence\":self.scene_graph_dataset.process_carla_graph_sequences(self.scene_graph_dataset.scene_graphs[seq], self.feature_list, folder_name = self.scene_graph_dataset.folder_names[ind] ), \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                self.transfer_data.append(data_to_append)\n\t        elif self.config.training_config[\"scenegraph_dataset_type\"] == \"real\":\n\t            for ind, seq in enumerate(sorted_seq): \n\t                data_to_append = {\"sequence\":self.scene_graph_dataset.process_real_image_graph_sequences(self.scene_graph_dataset.scene_graphs[seq], self.feature_list, folder_name = self.scene_graph_dataset.folder_names[ind] ), \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                self.transfer_data.append(data_to_append)\n", "        else:\n\t            raise ValueError('dataset_type unrecognized')\n\t        self.total_transfer_data_labels = np.concatenate([np.full(len(data['sequence']), data['label']) for data in self.transfer_data])\n\t        self.transfer_data_labels = [data['label'] for data in self.transfer_data]\n\t        print('Running transfer learning on dataset: ', self.config.location_data[\"transfer_path\"])\n\t        print('total labels: ', len(self.transfer_data_labels))\n\t        self.class_weights = torch.tensor([1.0, 1.0])\n\t    def evaluate_transfer_learning(self, current_epoch=None):\n\t        metrics = {}\n\t        outputs_test, \\\n", "        labels_test, \\\n\t        acc_loss_test, \\\n\t        val_avg_prediction_frame, \\\n\t        val_avg_seq_len, \\\n\t        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        test_inference_time, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n", "        seq_fnr, _ = self.inference(self.transfer_data, self.transfer_data_labels)\n\t        metrics['test'] = get_metrics(outputs_test, labels_test)\n\t        metrics['test']['loss'] = acc_loss_test\n\t        metrics['test']['avg_prediction_frame'] = val_avg_prediction_frame\n\t        metrics['test']['avg_seq_len'] = val_avg_seq_len\n\t        metrics['test']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n\t        metrics['test']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['test']['seq_tpr'] = seq_tpr\n\t        metrics['test']['seq_tnr'] = seq_tnr\n\t        metrics['test']['seq_fpr'] = seq_fpr\n", "        metrics['test']['seq_fnr'] = seq_fnr\n\t        metrics['avg_inf_time'] = (test_inference_time) / (len(labels_test))\n\t        self.update_sg_best_metrics(metrics, current_epoch)\n\t        metrics['best_epoch'] = self.best_epoch\n\t        metrics['best_val_loss'] = self.best_val_loss\n\t        metrics['best_val_acc'] = self.best_val_acc\n\t        metrics['best_val_auc'] = self.best_val_auc\n\t        metrics['best_val_conf'] = self.best_val_confusion\n\t        metrics['best_val_f1'] = self.best_val_f1\n\t        metrics['best_val_mcc'] = self.best_val_mcc\n", "        metrics['best_val_acc_balanced'] = self.best_val_acc_balanced\n\t        metrics['best_avg_pred_frame'] = self.best_avg_pred_frame\n\t        if self.config.training_config[\"n_fold\"] <= 1 and self.log:\n\t            log_wandb_transfer_learning(metrics)\n\t        return outputs_test, labels_test, metrics\n\t    def build_scenegraph_dataset(self): #this creates test and training datasets\n\t        '''\n\t        Dataset format \n\t            scenegraphs_sequence: dict_keys(['sequence', 'label', 'folder_name'])\n\t                'sequence': scenegraph metadata\n", "                'label': classification output [0 -> non_risky (negative), 1 -> risky (positive)]\n\t                'folder_name': foldername storing sequence data\n\t        Dataset modes\n\t            no downsample\n\t                all sequences used for the train and test set regardless of class distribution\n\t            downsample  \n\t                equal amount of positive and negative sequences used for the train and test set\n\t            transfer \n\t                replaces original test set with another dataset \n\t        '''\n", "        #Load sg dataset obj\n\t        scene_graph_dataset  = SceneGraphDataset()\n\t        scene_graph_dataset.dataset_save_path = self.config.location_data[\"input_path\"]\n\t        self.scene_graph_dataset = scene_graph_dataset.load()     \n\t        class_0 = []\n\t        class_1 = []\n\t        sorted_seq = sorted(self.scene_graph_dataset.labels)\n\t        if self.config.training_config[\"scenegraph_dataset_type\"] == \"carla\":\n\t            for ind, seq in enumerate(sorted_seq): #for each seq in labels\n\t                data_to_append = {\"sequence\":self.scene_graph_dataset.process_carla_graph_sequences(self.scene_graph_dataset.scene_graphs[seq], self.feature_list, folder_name = self.scene_graph_dataset.folder_names[ind] ), \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n", "                if self.scene_graph_dataset.labels[seq] == 0:\n\t                    class_0.append(data_to_append)\n\t                elif self.scene_graph_dataset.labels[seq] == 1:\n\t                    class_1.append(data_to_append)\n\t        elif self.config.training_config[\"scenegraph_dataset_type\"] == \"real\":\n\t            for ind, seq in enumerate(sorted_seq): \n\t                data_to_append = {\"sequence\":self.scene_graph_dataset.process_real_image_graph_sequences(self.scene_graph_dataset.scene_graphs[seq], self.feature_list, folder_name = self.scene_graph_dataset.folder_names[ind] ), \"label\":self.scene_graph_dataset.labels[seq], \"folder_name\": self.scene_graph_dataset.folder_names[ind]}\n\t                if self.scene_graph_dataset.labels[seq] == 0:\n\t                    class_0.append(data_to_append)\n\t                elif self.scene_graph_dataset.labels[seq] == 1:\n", "                    class_1.append(data_to_append)\n\t        elif self.config.training_config[\"scenegraph_dataset_type\"] != None:\n\t            raise ValueError('scenegraph_dataset_type not recognized') \n\t        y_0 = [0]*len(class_0)  \n\t        y_1 = [1]*len(class_1)\n\t        min_number = min(len(class_0), len(class_1))\n\t        downsample = self.config.training_config[\"downsample\"]\n\t        if downsample:\n\t            modified_class_0, modified_y_0 = resample(class_0, y_0, n_samples=min_number)\n\t        else:\n", "            modified_class_0, modified_y_0 = class_0, y_0\n\t        train, test, train_y, test_y = train_test_split(modified_class_0+class_1, modified_y_0+y_1, test_size=self.config.training_config[\"split_ratio\"], shuffle=True, stratify=modified_y_0+y_1, random_state=self.config.seed)\n\t        if self.config.location_data[\"transfer_path\"] != None:\n\t            self.build_transfer_learning_dataset()\n\t        return train, test\n\t    def train(self): #edit\n\t        if (self.config.training_config['task_type'] in ['sequence_classification','graph_classification','collision_prediction']):\n\t            tqdm_bar = tqdm(range(self.config.training_config['epochs']))\n\t            for epoch_idx in tqdm_bar: # iterate through epoch   \n\t                acc_loss_train = 0\n", "                self.sequence_loader = DataListLoader(self.training_data, batch_size=self.config.training_config[\"batch_size\"])\n\t                for data_list in self.sequence_loader: # iterate through batches of the dataset\n\t                    self.model.train()\n\t                    self.optimizer.zero_grad()\n\t                    labels = torch.empty(0).long().to(self.config.model_config[\"device\"])\n\t                    outputs = torch.empty(0,2).to(self.config.model_config[\"device\"])\n\t                    for sequence in data_list: # iterate through scene-graph sequences in the batch\n\t                        data, label = sequence['sequence'], sequence['label'] \n\t                        graph_list = [Data(x=g['node_features'], edge_index=g['edge_index'], edge_attr=g['edge_attr']) for g in data]  \n\t                        self.train_loader = DataLoader(graph_list, batch_size=len(graph_list))\n", "                        sequence = next(iter(self.train_loader)).to(self.config.model_config[\"device\"])\n\t                        output, _ = self.model.forward(sequence.x, sequence.edge_index, sequence.edge_attr, sequence.batch)\n\t                        if self.config.training_config['task_type'] == 'sequence_classification': # seq vs graph based learning\n\t                            labels  = torch.cat([labels, torch.tensor([label]).long().to(self.config.model_config[\"device\"])], dim=0)\n\t                        elif self.config.training_config['task_type'] in ['collision_prediction']:\n\t                            label = torch.tensor(np.full(output.shape[0], label)).long().to(self.config.model_config[\"device\"]) #fill label to length of the sequence. shape (len_input_sequence, 1)\n\t                            labels  = torch.cat([labels, label], dim=0)\n\t                        else:\n\t                            raise ValueError('task_type is unimplemented')\n\t                        outputs = torch.cat([outputs, output.view(-1, 2)], dim=0) #in this case the output is of shape (len_input_sequence, 2)\n", "                    loss_train = self.loss_func(outputs, labels)\n\t                    loss_train.backward()\n\t                    acc_loss_train += loss_train.detach().cpu().item() * len(data_list)\n\t                    self.optimizer.step()\n\t                    del loss_train\n\t                acc_loss_train /= len(self.training_data)\n\t                tqdm_bar.set_description('Epoch: {:04d}, loss_train: {:.4f}'.format(epoch_idx, acc_loss_train))\n\t                if epoch_idx % self.config.training_config[\"test_step\"] == 0:\n\t                    self.evaluate(epoch_idx)\n\t        else:\n", "            raise ValueError('train(): task type error') \n\t    def cross_valid(self):\n\t           # KFold cross validation with similar class distribution in each fold\n\t           skf = StratifiedKFold(n_splits=self.config.training_config[\"n_fold\"])\n\t           X = np.array(self.training_data + self.testing_data)\n\t           y = np.array(self.training_labels + self.testing_labels)\n\t           # self.results stores average metrics for the the n_folds\n\t           self.results = {}\n\t           self.fold = 1\n\t           # Split training and testing data based on n_splits (Folds)\n", "           for train_index, test_index in skf.split(X, y):\n\t               X_train, X_test = X[train_index], X[test_index]\n\t               y_train, y_test = y[train_index], y[test_index]\n\t               self.training_data = X_train\n\t               self.testing_data  = X_test\n\t               self.training_labels = y_train\n\t               self.testing_labels  = y_test\n\t               if self.config.training_config['task_type'] == 'sequence_classification':\n\t                   print('\\nFold {}'.format(self.fold))\n\t                   print(\"Number of Sequences Included: \", len(self.training_data))\n", "                   print(\"Num Labels in Each Class: \" + str(np.unique(self.training_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t               elif self.config.training_config['task_type'] == 'collision_prediction':\n\t                   print('\\nFold {}'.format(self.fold))\n\t                   print(\"Number of Training Sequences Included: \", len(self.training_data))\n\t                   print(\"Number of Testing Sequences Included: \",  len(self.testing_data))\n\t                   print(\"Number of Training Labels in Each Class: \" + str(np.unique(self.total_train_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t                   print(\"Number of Testing Labels in Each Class: \" + str(np.unique(self.total_test_labels, return_counts=True)[1]) + \", Class Weights: \" + str(self.class_weights))\n\t               self.best_val_loss = 99999\n\t               self.train()\n\t               outputs_train, labels_train, outputs_test, labels_test, metrics = self.evaluate(self.fold)\n", "               self.update_sg_cross_valid_metrics(outputs_train, labels_train, outputs_test, labels_test, metrics)\n\t               if self.fold != self.config.training_config[\"n_fold\"]:            \n\t                   del self.model\n\t                   del self.optimizer\n\t                   self.build_model()\n\t               self.fold += 1            \n\t           del self.results\n\t    def inference(self, testing_data, testing_labels):\n\t            labels = torch.LongTensor().to(self.config.model_config[\"device\"])\n\t            outputs = torch.FloatTensor().to(self.config.model_config[\"device\"])\n", "            acc_loss_test = 0\n\t            attns_weights = []\n\t            node_attns = []\n\t            folder_names = []\n\t            sum_prediction_frame = 0\n\t            sum_seq_len = 0\n\t            num_risky_sequences = 0\n\t            num_safe_sequences = 0\n\t            sum_predicted_risky_indices = 0 #sum is calculated as (value * (index+1))/sum(range(seq_len)) for each value and index in the sequence.\n\t            sum_predicted_safe_indices = 0  #sum is calculated as ((1-value) * (index+1))/sum(range(seq_len)) for each value and index in the sequence.\n", "            inference_time = 0 #TODO: remove this metric\n\t            prof_result = \"\"\n\t            correct_risky_seq = 0\n\t            correct_safe_seq = 0\n\t            incorrect_risky_seq = 0\n\t            incorrect_safe_seq = 0\n\t            with torch.autograd.profiler.profile(enabled=False, use_cuda=True) as prof:\n\t                with torch.no_grad():\n\t                    for i in range(len(testing_data)): # iterate through scenegraphs\n\t                        data, label = testing_data[i]['sequence'], testing_labels[i]\n", "                        folder_names.append(testing_data[i]['folder_name'])\n\t                        data_list = [Data(x=g['node_features'], edge_index=g['edge_index'], edge_attr=g['edge_attr']) for g in data]\n\t                        self.test_loader = DataLoader(data_list, batch_size=len(data_list))\n\t                        sequence = next(iter(self.test_loader)).to(self.config.model_config[\"device\"])\n\t                        self.model.eval()\n\t                        output, attns = self.model.forward(sequence.x, sequence.edge_index, sequence.edge_attr, sequence.batch)\n\t                        inference_time += 0\n\t                        output = output.view(-1,2)\n\t                        label = torch.tensor(np.full(output.shape[0], label)).long().to(self.config.model_config[\"device\"]) #fill label to length of the sequence.\n\t                        #log metrics for risky and non-risky clips separately.\n", "                        if(1 in label):\n\t                            preds = output.max(1)[1].type_as(label)\n\t                            num_risky_sequences += 1\n\t                            sum_seq_len += output.shape[0]\n\t                            if (1 in preds):\n\t                                correct_risky_seq += 1 #sequence level metrics\n\t                                sum_prediction_frame += torch.where(preds == 1)[0][0].item() #returns the first index of a \"risky\" prediction in this sequence.\n\t                                sum_predicted_risky_indices += torch.sum(torch.where(preds==1)[0]+1).item()/np.sum(range(output.shape[0]+1)) #(1*index)/seq_len added to sum.\n\t                            else:\n\t                                incorrect_risky_seq += 1\n", "                                sum_prediction_frame += output.shape[0] #if no risky predictions are made, then add the full sequence length to running avg.\n\t                        elif(0 in label):\n\t                            preds = output.max(1)[1].type_as(label)\n\t                            num_safe_sequences += 1\n\t                            if (1 in preds): #sequence level metrics\n\t                                incorrect_safe_seq += 1 \n\t                            else:\n\t                                correct_safe_seq += 1 \n\t                            if (0 in preds):\n\t                                sum_predicted_safe_indices += torch.sum(torch.where(preds==0)[0]+1).item()/np.sum(range(output.shape[0]+1)) #(1*index)/seq_len added to sum.\n", "                        loss_test = self.loss_func(output, label)\n\t                        acc_loss_test += loss_test.detach().cpu().item()\n\t                        outputs = torch.cat([outputs, output], dim=0)\n\t                        labels = torch.cat([labels, label], dim=0)\n\t                        if 'lstm_attn_weights' in attns:\n\t                            attns_weights.append(attns['lstm_attn_weights'].squeeze().detach().cpu().numpy().tolist())\n\t                        if 'pool_score' in attns:\n\t                            node_attn = {}\n\t                            node_attn[\"original_batch\"] = sequence.batch.detach().cpu().numpy().tolist()\n\t                            node_attn[\"pool_perm\"] = attns['pool_perm'].detach().cpu().numpy().tolist()\n", "                            node_attn[\"pool_batch\"] = attns['batch'].detach().cpu().numpy().tolist()\n\t                            node_attn[\"pool_score\"] = attns['pool_score'].detach().cpu().numpy().tolist()\n\t                            node_attns.append(node_attn)\n\t            avg_risky_prediction_frame = sum_prediction_frame / num_risky_sequences #avg of first indices in a sequence that a risky frame is first correctly predicted.\n\t            avg_risky_seq_len = sum_seq_len / num_risky_sequences #sequence length for comparison with the prediction frame metric. \n\t            avg_predicted_risky_indices = sum_predicted_risky_indices / num_risky_sequences\n\t            avg_predicted_safe_indices = sum_predicted_safe_indices / num_safe_sequences\n\t            seq_tpr = correct_risky_seq / num_risky_sequences\n\t            seq_fpr = incorrect_safe_seq / num_safe_sequences\n\t            seq_tnr = correct_safe_seq / num_safe_sequences\n", "            seq_fnr = incorrect_risky_seq / num_risky_sequences\n\t            if prof != None:\n\t                prof_result = prof.key_averages().table(sort_by=\"cuda_time_total\")\n\t            return outputs, \\\n\t                    labels, \\\n\t                    acc_loss_test/len(testing_data), \\\n\t                    attns_weights, \\\n\t                    node_attns, \\\n\t                    avg_risky_prediction_frame, \\\n\t                    avg_risky_seq_len, \\\n", "                    avg_predicted_risky_indices, \\\n\t                    avg_predicted_safe_indices, \\\n\t                    inference_time, \\\n\t                    prof_result, \\\n\t                    seq_tpr, \\\n\t                    seq_fpr, \\\n\t                    seq_tnr, \\\n\t                    seq_fnr, folder_names\n\t    def evaluate(self, current_epoch=None):\n\t        metrics = {}\n", "        outputs_train, \\\n\t        labels_train, \\\n\t        acc_loss_train, \\\n\t        attns_train, \\\n\t        node_attns_train, \\\n\t        train_avg_prediction_frame, \\\n\t        train_avg_seq_len, \\\n\t        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        train_inference_time, \\\n", "        train_profiler_result, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n\t        seq_fnr, _ = self.inference(self.training_data, self.training_labels)\n\t        metrics['train'] = get_metrics(outputs_train, labels_train)\n\t        metrics['train']['loss'] = acc_loss_train\n\t        metrics['train']['avg_prediction_frame'] = train_avg_prediction_frame\n\t        metrics['train']['avg_seq_len'] = train_avg_seq_len\n\t        metrics['train']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n", "        metrics['train']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['train']['seq_tpr'] = seq_tpr\n\t        metrics['train']['seq_tnr'] = seq_tnr\n\t        metrics['train']['seq_fpr'] = seq_fpr\n\t        metrics['train']['seq_fnr'] = seq_fnr\n\t        with open(\"graph_profile_metrics.txt\", mode='w') as f:\n\t            f.write(train_profiler_result)\n\t        outputs_test, \\\n\t        labels_test, \\\n\t        acc_loss_test, \\\n", "        val_avg_prediction_frame, \\\n\t        val_avg_seq_len, \\\n\t        avg_predicted_risky_indices, \\\n\t        avg_predicted_safe_indices, \\\n\t        test_inference_time, \\\n\t        seq_tpr, \\\n\t        seq_fpr, \\\n\t        seq_tnr, \\\n\t        seq_fnr, _ = self.inference(self.testing_data, self.testing_labels)\n\t        metrics['test'] = get_metrics(outputs_test, labels_test)\n", "        metrics['test']['loss'] = acc_loss_test\n\t        metrics['test']['avg_prediction_frame'] = val_avg_prediction_frame\n\t        metrics['test']['avg_seq_len'] = val_avg_seq_len\n\t        metrics['test']['avg_predicted_risky_indices'] = avg_predicted_risky_indices\n\t        metrics['test']['avg_predicted_safe_indices'] = avg_predicted_safe_indices\n\t        metrics['test']['seq_tpr'] = seq_tpr\n\t        metrics['test']['seq_tnr'] = seq_tnr\n\t        metrics['test']['seq_fpr'] = seq_fpr\n\t        metrics['test']['seq_fnr'] = seq_fnr\n\t        metrics['avg_inf_time'] = (train_inference_time + test_inference_time) / (len(labels_train) + len(labels_test))\n", "        print(\"\\ntrain loss: \" + str(acc_loss_train) + \", acc:\", metrics['train']['acc'], metrics['train']['confusion'], \"mcc:\", metrics['train']['mcc'], \\\n\t              \"\\ntest loss: \" +  str(acc_loss_test) + \", acc:\",  metrics['test']['acc'],  metrics['test']['confusion'], \"mcc:\", metrics['test']['mcc'])\n\t        self.update_sg_best_metrics(metrics, current_epoch)\n\t        metrics['best_epoch'] = self.best_epoch\n\t        metrics['best_val_loss'] = self.best_val_loss\n\t        metrics['best_val_acc'] = self.best_val_acc\n\t        metrics['best_val_auc'] = self.best_val_auc\n\t        metrics['best_val_conf'] = self.best_val_confusion\n\t        metrics['best_val_f1'] = self.best_val_f1\n\t        metrics['best_val_mcc'] = self.best_val_mcc\n", "        metrics['best_val_acc_balanced'] = self.best_val_acc_balanced\n\t        metrics['best_avg_pred_frame'] = self.best_avg_pred_frame\n\t        if self.config.training_config[\"n_fold\"] <= 1 and self.log:\n\t            log_wandb(metrics)\n\t        return outputs_train, labels_train, outputs_test, labels_test, metrics\n\t        #automatically save the model and metrics with the lowest validation loss\n\t    def update_sg_best_metrics(self, metrics, current_epoch):\n\t        if metrics['test']['loss'] < self.best_val_loss:\n\t            self.best_val_loss = metrics['test']['loss']\n\t            self.best_epoch = current_epoch if current_epoch != None else self.config.training_config[\"epochs\"]\n", "            self.best_val_acc = metrics['test']['acc']\n\t            self.best_val_auc = metrics['test']['auc']\n\t            self.best_val_confusion = metrics['test']['confusion']\n\t            self.best_val_f1 = metrics['test']['f1']\n\t            self.best_val_mcc = metrics['test']['mcc']\n\t            self.best_val_acc_balanced = metrics['test']['balanced_acc']\n\t            self.best_avg_pred_frame = metrics['test']['avg_prediction_frame']\n\t            self.save_model()\n\t    # Averages metrics after the end of each cross validation fold\n\t    def update_sg_cross_valid_metrics(self, outputs_train, labels_train, outputs_test, labels_test, metrics):\n", "        if self.fold == 1:\n\t            self.results['outputs_train'] = outputs_train\n\t            self.results['labels_train'] = labels_train\n\t            self.results['train'] = metrics['train']\n\t            self.results['train']['loss'] = metrics['train']['loss']\n\t            self.results['train']['avg_prediction_frame'] = metrics['train']['avg_prediction_frame'] \n\t            self.results['train']['avg_seq_len']  = metrics['train']['avg_seq_len'] \n\t            self.results['train']['avg_predicted_risky_indices'] = metrics['train']['avg_predicted_risky_indices'] \n\t            self.results['train']['avg_predicted_safe_indices'] = metrics['train']['avg_predicted_safe_indices']\n\t            self.results['outputs_test'] = outputs_test\n", "            self.results['labels_test'] = labels_test\n\t            self.results['test'] = metrics['test']\n\t            self.results['test']['loss'] = metrics['test']['loss'] \n\t            self.results['test']['avg_prediction_frame'] = metrics['test']['avg_prediction_frame'] \n\t            self.results['test']['avg_seq_len'] = metrics['test']['avg_seq_len'] \n\t            self.results['test']['avg_predicted_risky_indices'] = metrics['test']['avg_predicted_risky_indices'] \n\t            self.results['test']['avg_predicted_safe_indices'] = metrics['test']['avg_predicted_safe_indices']\n\t            self.results['avg_inf_time'] = metrics['avg_inf_time']\n\t            self.results['best_epoch']    = metrics['best_epoch']\n\t            self.results['best_val_loss'] = metrics['best_val_loss']\n", "            self.results['best_val_acc']  = metrics['best_val_acc']\n\t            self.results['best_val_auc']  = metrics['best_val_auc']\n\t            self.results['best_val_conf'] = metrics['best_val_conf']\n\t            self.results['best_val_f1']   = metrics['best_val_f1']\n\t            self.results['best_val_mcc']  = metrics['best_val_mcc']\n\t            self.results['best_val_acc_balanced'] = metrics['best_val_acc_balanced']\n\t            self.results['best_avg_pred_frame'] = metrics['best_avg_pred_frame']\n\t        else:\n\t            self.results['outputs_train'] = torch.cat((self.results['outputs_train'], outputs_train), dim=0)\n\t            self.results['labels_train']  = torch.cat((self.results['labels_train'], labels_train), dim=0)\n", "            self.results['train']['loss'] = np.append(self.results['train']['loss'], metrics['train']['loss'])\n\t            self.results['train']['avg_prediction_frame'] = np.append(self.results['train']['avg_prediction_frame'], \n\t                                                                            metrics['train']['avg_prediction_frame'])\n\t            self.results['train']['avg_seq_len']  = np.append(self.results['train']['avg_seq_len'], metrics['train']['avg_seq_len'])\n\t            self.results['train']['avg_predicted_risky_indices'] = np.append(self.results['train']['avg_predicted_risky_indices'], \n\t                                                                                    metrics['train']['avg_predicted_risky_indices'])\n\t            self.results['train']['avg_predicted_safe_indices'] = np.append(self.results['train']['avg_predicted_safe_indices'], \n\t                                                                                    metrics['train']['avg_predicted_safe_indices'])\n\t            self.results['outputs_test'] = torch.cat((self.results['outputs_test'], outputs_test), dim=0)\n\t            self.results['labels_test']  = torch.cat((self.results['labels_test'], labels_test), dim=0)\n", "            self.results['test']['loss'] = np.append(self.results['test']['loss'], metrics['test']['loss'])\n\t            self.results['test']['avg_prediction_frame'] = np.append(self.results['test']['avg_prediction_frame'], \n\t                                                                        metrics['test']['avg_prediction_frame'])\n\t            self.results['test']['avg_seq_len'] = np.append(self.results['test']['avg_seq_len'], metrics['test']['avg_seq_len'])\n\t            self.results['test']['avg_predicted_risky_indices'] = np.append(self.results['test']['avg_predicted_risky_indices'], \n\t                                                                                    metrics['test']['avg_predicted_risky_indices'])\n\t            self.results['test']['avg_predicted_safe_indices'] = np.append(self.results['test']['avg_predicted_safe_indices'], \n\t                                                                                    metrics['test']['avg_predicted_safe_indices'])\n\t            self.results['avg_inf_time'] = np.append(self.results['avg_inf_time'], metrics['avg_inf_time'])\n\t            self.results['best_epoch']    = np.append(self.results['best_epoch'], metrics['best_epoch'])\n", "            self.results['best_val_loss'] = np.append(self.results['best_val_loss'], metrics['best_val_loss'])\n\t            self.results['best_val_acc']  = np.append(self.results['best_val_acc'], metrics['best_val_acc'])\n\t            self.results['best_val_auc']  = np.append(self.results['best_val_auc'], metrics['best_val_auc'])\n\t            self.results['best_val_conf'] = np.append(self.results['best_val_conf'], metrics['best_val_conf'])\n\t            self.results['best_val_f1']   = np.append(self.results['best_val_f1'], metrics['best_val_f1'])\n\t            self.results['best_val_mcc']  = np.append(self.results['best_val_mcc'], metrics['best_val_mcc'])\n\t            self.results['best_val_acc_balanced'] = np.append(self.results['best_val_acc_balanced'], metrics['best_val_acc_balanced'])\n\t            self.results['best_avg_pred_frame'] = np.append(self.results['best_avg_pred_frame'], metrics['best_avg_pred_frame'])\n\t        # Log final averaged results\n\t        if self.fold == self.config.training_config[\"n_fold\"]:\n", "            final_results = {}\n\t            final_results['train'] = get_metrics(self.results['outputs_train'], self.results['labels_train'])\n\t            final_results['train']['loss'] = np.average(self.results['train']['loss'])\n\t            final_results['train']['avg_prediction_frame'] = np.average(self.results['train']['avg_prediction_frame'])\n\t            final_results['train']['avg_seq_len'] = np.average(self.results['train']['avg_seq_len'])\n\t            final_results['train']['avg_predicted_risky_indices'] = np.average(self.results['train']['avg_predicted_risky_indices'])\n\t            final_results['train']['avg_predicted_safe_indices'] = np.average(self.results['train']['avg_predicted_safe_indices'])\n\t            final_results['test'] = get_metrics(self.results['outputs_test'], self.results['labels_test'])\n\t            final_results['test']['loss'] = np.average(self.results['test']['loss'])\n\t            final_results['test']['avg_prediction_frame'] = np.average(self.results['test']['avg_prediction_frame'])\n", "            final_results['test']['avg_seq_len'] = np.average(self.results['test']['avg_seq_len'])\n\t            final_results['test']['avg_predicted_risky_indices'] = np.average(self.results['test']['avg_predicted_risky_indices'])\n\t            final_results['test']['avg_predicted_safe_indices'] = np.average(self.results['test']['avg_predicted_safe_indices'])\n\t            final_results['avg_inf_time'] = np.average(self.results['avg_inf_time'])\n\t            # Best results\n\t            final_results['best_epoch']    = np.average(self.results['best_epoch'])\n\t            final_results['best_val_loss'] = np.average(self.results['best_val_loss'])\n\t            final_results['best_val_acc']  = np.average(self.results['best_val_acc'])\n\t            final_results['best_val_auc']  = np.average(self.results['best_val_auc'])\n\t            final_results['best_val_conf'] = self.results['best_val_conf']\n", "            final_results['best_val_f1']   = np.average(self.results['best_val_f1'])\n\t            final_results['best_val_mcc']  = np.average(self.results['best_val_mcc'])\n\t            final_results['best_val_acc_balanced'] = np.average(self.results['best_val_acc_balanced'])\n\t            final_results['best_avg_pred_frame'] = np.average(self.results['best_avg_pred_frame'])\n\t            print('\\nFinal Averaged Results')\n\t            print(\"\\naverage train loss: \" + str(final_results['train']['loss']) + \", average acc:\", final_results['train']['acc'], final_results['train']['confusion'], final_results['train']['auc'], \\\n\t                \"\\naverage test loss: \" +  str(final_results['test']['loss']) + \", average acc:\", final_results['test']['acc'],  final_results['test']['confusion'], final_results['test']['auc'])\n\t            if self.log:\n\t                log_wandb(final_results)\n\t            return self.results['outputs_train'], self.results['labels_train'], self.results['outputs_test'], self.results['labels_test'], final_results\n"]}
{"filename": "learning/util/trainer.py", "chunked_list": ["#Copied from https://github.com/AICPS/roadscene2vec\n\t#Copyright (c) 2021 UC Irvine Advanced Integrated Cyber-Physical Systems Lab (AICPS)\n\timport os\n\timport sys\n\tfrom pathlib import Path\n\tsys.path.append(os.path.dirname(sys.path[0]))\n\timport torch\n\timport torch.optim as optim\n\timport torch.nn as nn\n\timport numpy as np\n", "import random\n\timport warnings\n\twarnings.simplefilter(action='ignore', category=FutureWarning)\n\tfrom learning.model.cnn_lstm import CNN_LSTM_Classifier\n\tfrom learning.model.mrgcn import MRGCN\n\tfrom learning.model.rs2g import RS2G\n\t'''Class implementing basic trainer functionality such as model building, saving, and loading.'''\n\tclass Trainer:\n\t    def __init__(self, config, wandb_a = None):\n\t        self.config = config\n", "        if wandb_a != None:\n\t            self.log = True\n\t            self.wandb = wandb_a\n\t        else:\n\t            self.log = False             \n\t        if self.config.training_config[\"seed\"] != None: \n\t            self.config.seed = self.config.training_config[\"seed\"]\n\t            np.random.seed(self.config.seed)\n\t            torch.manual_seed(self.config.seed)\n\t        else:\n", "            self.config.seed = random.randint(0,2**32) #default value\n\t            np.random.seed(self.config.seed)\n\t            torch.manual_seed(self.config.seed)\n\t        self.toGPU = lambda x, dtype: torch.as_tensor(x, dtype=dtype, device=self.config.model_config['device'])\n\t        self.initialize_best_metrics()\n\t    #defines initial values for \"best\" metrics so that they can be updated during training by the model.\n\t    def initialize_best_metrics(self):\n\t        self.best_val_loss = 99999\n\t        self.best_epoch = 0\n\t        self.best_val_acc = 0\n", "        self.best_val_auc = 0\n\t        self.best_val_confusion = []\n\t        self.best_val_f1 = 0\n\t        self.best_val_mcc = -1.0\n\t        self.best_val_acc_balanced = 0\n\t        self.unique_clips = {}\n\t    #abstract function implemented by subclasses\n\t    def split_dataset(self):\n\t        raise NotImplementedError\n\t    def build_model(self): #this involves changing mrcgn and mrgin files to be compatible with new config tht we pass in\n", "        # BD mode\n\t        #self.config.num_features = len(self.feature_list)\n\t        #self.config.num_relations = max([r.value for r in Relations])+1\n\t        if self.config.model_config[\"model\"] == \"mrgcn\":\n\t            self.model = MRGCN(self.config).to(self.config.model_config[\"device\"])\n\t        elif self.config.model_config[\"model\"] == \"rs2g\":\n\t            self.model = RS2G(self.config).to(self.config.model_config[\"device\"])\n\t        elif self.config.model_config[\"model\"]  == \"cnn_lstm\":\n\t            self.model = CNN_LSTM_Classifier((self.config.training_config['batch_size'], self.frame_limit,self.color_channels, self.im_height, self.im_width), self.config).to(self.config.model_config[\"device\"])\n\t        else:\n", "            raise Exception(\"model selection is invalid: \" + self.config.model_config[\"model\"])\n\t        self.optimizer = optim.Adam(self.model.parameters(), lr=self.config.training_config[\"learning_rate\"], weight_decay=self.config.training_config[\"weight_decay\"])\n\t        if self.config.model_config[\"load_model\"]  == False:\n\t            if self.class_weights.shape[0] < 2:\n\t                self.loss_func = nn.CrossEntropyLoss()\n\t            else:\n\t                self.loss_func = nn.CrossEntropyLoss(weight=self.class_weights.float().to(self.config.model_config[\"device\"]))\n\t            #wandb.watch(self.model, log=\"all\")\n\t            if self.log:\n\t                self.wandb.watch(self.model, log=\"all\")\n", "        else:\n\t            if self.class_weights.shape[0] < 2:\n\t                self.loss_func = nn.CrossEntropyLoss()\n\t            else:\n\t                self.loss_func = nn.CrossEntropyLoss(weight=self.class_weights.float().to(self.config.model_config[\"device\"]))\n\t    # Pick between Standard Training and KFold Cross Validation Training\n\t    def learn(self):  \n\t        if self.config.training_config[\"n_fold\"] <= 1 or self.config.location_data[\"transfer_path\"] != None:\n\t            print('\\nRunning Standard Training Loop\\n')\n\t            self.train()\n", "        else:\n\t            print('\\nRunning {}-Fold Cross Validation Training Loop\\n'.format(self.config.training_config[\"n_fold\"]))\n\t            self.cross_valid()\n\t    #abstract method implemented by subclasses\n\t    def train(self):\n\t        raise NotImplementedError\n\t    def inference(self):\n\t        raise NotImplementedError\n\t    def cross_valid(self):\n\t        raise NotImplementedError\n", "    def save_model(self):\n\t        \"\"\"Function to save the model.\"\"\"\n\t        saved_path = Path(self.config.model_config[\"model_save_path\"]).resolve()\n\t        os.makedirs(os.path.dirname(saved_path), exist_ok=True)\n\t        torch.save(self.model.state_dict(), str(saved_path))\n\t        with open(os.path.dirname(saved_path) + \"/model_parameters.txt\", \"w+\") as f:\n\t            f.write(str(self.config))\n\t            f.write('\\n')\n\t            f.write(str(' '.join(sys.argv)))\n\t    def load_model(self):\n", "        \"\"\"Function to load the model.\"\"\"\n\t        saved_path = Path(self.config.model_config[\"model_load_path\"]).resolve()\n\t        if saved_path.exists():\n\t            self.build_model()\n\t            self.model.load_state_dict(torch.load(str(saved_path), map_location=self.config.model_config[\"device\"]))\n\t            self.model.eval()\n\t        else:\n\t            raise FileNotFoundError(\"Failed to load model. Model load path does not exist: \" + str(saved_path))\n"]}
