{"filename": "hello-helper-service/tests/__init__.py", "chunked_list": []}
{"filename": "hello-helper-service/app/main.py", "chunked_list": ["import os\n\timport signal\n\timport paho.mqtt.client as mqtt\n\tfrom customer_name_db import CustomerNameDb\n\tfrom loguru import logger\n\tfrom message_parser import MessageParser\n\tfrom mqtt_topic_helper import MqttTopicHelper\n\tdef on_connect(client, userdata, flags, rc):\n\t    logger.info(f\"Connected with result code: {rc}\") \n\t    topic_helper = MqttTopicHelper('spectrum-grocers', 'fresh-frontier')\n", "    client.subscribe(topic_helper.customer_arrival())\n\tdef on_message(client, userdata, msg):\n\t    parser = MessageParser()\n\t    customer_id = parser.get_customer_id(msg.payload)\n\t    customer_name = CustomerNameDb().get_name(customer_id)\n\t    logger.info(f\"Welcome, {customer_name}\")\n\tdef on_signal(signum, frame):\n\t    logger.info(\"Received termination signal, disconnecting...\")\n\t    client.disconnect()\n\tdef main():\n", "    global client\n\t    client = mqtt.Client(client_id=\"hello-helper-service\")\n\t    client.on_connect = on_connect\n\t    client.on_message = on_message\n\t    # Register the signal handlers\n\t    signal.signal(signal.SIGINT, on_signal)\n\t    signal.signal(signal.SIGTERM, on_signal)\n\t    message_broker_host = os.environ.get(\"BROKER_ADDRESS\", \"localhost\")\n\t    client.connect(message_broker_host, 1883, 60)\n\t    client.loop_forever()\n", "if __name__ == '__main__':\n\t    main()\n"]}
{"filename": "hello-helper-service/app/customer_name_db.py", "chunked_list": ["class CustomerNameDb:\n\t    def __init__(self):\n\t        self._name_map = {\n\t            1: \"Astra Nova\",\n\t            2: \"Baxter Quantum\",\n\t            3: \"Cassiopeia Starlight\",\n\t            4: \"Draco Cosmos\",\n\t            5: \"Echo Nebula\",\n\t            6: \"Falcon Orion\",\n\t            7: \"Galaxy Pulsar\",\n", "            8: \"Halley Comet\",\n\t            9: \"Ignis Solaris\",\n\t            10: \"Jupiter Zenith\"\n\t        }\n\t    def get_name(self, id):\n\t        return self._name_map.get(id, \"Unknown\")\n"]}
{"filename": "hello-helper-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n\t    def __init__(self, chain_name, store_name):\n\t        self.chain_name = chain_name\n\t        self.store_name = store_name\n\t    def customer_arrival(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\t    def customer_departure(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\t    def display_welcome(self):\n\t        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n", "    def purchase_complete(self):\n\t        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\t    def stock_update(self):\n\t        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\t    def restock_alert(self):\n\t        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n"]}
{"filename": "hello-helper-service/app/__init__.py", "chunked_list": []}
{"filename": "hello-helper-service/app/message_parser.py", "chunked_list": ["import json\n\tclass MessageParser:\n\t    def parse_message(self, message):\n\t        return json.loads(message)\n\t    def get_customer_id(self, message):\n\t        msg_dict = self.parse_message(message)\n\t        return msg_dict.get('customer_id', None)\n\t    def get_items(self, message):\n\t        msg_dict = self.parse_message(message)\n\t        return msg_dict.get('items', None)\n", "    def get_item_id(self, message):\n\t        msg_dict = self.parse_message(message)\n\t        return msg_dict.get('item_id', None)\n\t    def get_quantity(self, message):\n\t        msg_dict = self.parse_message(message)\n\t        return msg_dict.get('quantity', None)\n\t    def get_timestamp(self, message):\n\t        msg_dict = self.parse_message(message)\n\t        return msg_dict.get('timestamp', None)\n"]}
{"filename": "gateway-guardian-service/tests/__init__.py", "chunked_list": []}
{"filename": "gateway-guardian-service/app/message_helper.py", "chunked_list": ["import json\n\tfrom datetime import datetime\n\tclass MessageHelper:\n\t    def _current_datetime(self):\n\t        return datetime.now().isoformat()\n\t    def customer_arrival(self, customer_id):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id})\n\t    def purchase_complete(self, customer_id, items):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n", "                           \"customer_id\": customer_id, \"items\": items})\n\t    def stock_update(self, item_id, quantity):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n\t    def restock_alert(self, item_id, quantity):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n"]}
{"filename": "gateway-guardian-service/app/main.py", "chunked_list": ["import os\n\timport random\n\timport signal\n\tfrom threading import Event\n\tfrom loguru import logger\n\tfrom message_helper import MessageHelper\n\tfrom mqtt_topic_helper import MqttTopicHelper\n\tfrom paho.mqtt import client as mqtt_client\n\tbroker = os.getenv('BROKER_ADDRESS', 'localhost')\n\tport = 1883\n", "client_id = \"gateway-guardian-service\"\n\trunning = Event()  # Event object to replace the running flag\n\tdef connect_mqtt():\n\t    def on_connect(client, userdata, flags, rc):\n\t        if rc == 0:\n\t            print(\"Connected to MQTT Broker!\")\n\t        else:\n\t            print(\"Failed to connect, return code %d\\n\", rc)\n\t    client = mqtt_client.Client(client_id)\n\t    client.on_connect = on_connect\n", "    client.connect(broker, port)\n\t    return client\n\tdef publish(client):\n\t    topic_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\n\t    message_helper = MessageHelper()\n\t    while not running.is_set():\n\t        customer_id = random.randint(1, 10)\n\t        topic = topic_helper.customer_arrival()\n\t        message = message_helper.customer_arrival(customer_id)\n\t        logger.info(f\"Pub to {topic}: {message}\")\n", "        client.publish(topic, message)\n\t        running.wait(random.randint(2, 20))\n\t    client.disconnect()\n\t# Handle Signals for Graceful Shutdown\n\tdef handle_signal(signum, frame):\n\t    running.set()\n\t    print(\"Gracefully shutting down...\")\n\tsignal.signal(signal.SIGINT, handle_signal)\n\tsignal.signal(signal.SIGTERM, handle_signal)\n\tif __name__ == \"__main__\":\n", "    client = connect_mqtt()\n\t    client.loop_start()\n\t    publish(client)\n"]}
{"filename": "gateway-guardian-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n\t    def __init__(self, chain_name, store_name):\n\t        self.chain_name = chain_name\n\t        self.store_name = store_name\n\t    def customer_arrival(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\t    def display_welcome(self):\n\t        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\t    def purchase_complete(self):\n\t        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n", "    def stock_update(self):\n\t        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\t    def restock_alert(self):\n\t        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n"]}
{"filename": "gateway-guardian-service/app/__init__.py", "chunked_list": []}
{"filename": "fastlane-finale-service/tests/__init__.py", "chunked_list": []}
{"filename": "fastlane-finale-service/app/message_helper.py", "chunked_list": ["import json\n\tfrom datetime import datetime\n\tclass MessageHelper:\n\t    def _current_datetime(self):\n\t        return datetime.now().isoformat()\n\t    def customer_arrival(self, customer_id):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id})\n\t    def customer_departure(self, customer_id, product_ids):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n", "                           \"customer_id\": customer_id,\n\t                           \"product_ids\": product_ids})\n\t    def purchase_complete(self, customer_id, items):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id,\n\t                           \"items\": items})\n\t    def stock_update(self, item_id, quantity):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n\t    def restock_alert(self, item_id, quantity):\n", "        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n\t    def payment_due(self, customer_id, amount):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id, \"amount\": amount})\n"]}
{"filename": "fastlane-finale-service/app/main.py", "chunked_list": ["import os\n\timport random\n\timport signal\n\timport sys\n\timport time\n\tfrom loguru import logger\n\tfrom message_helper import MessageHelper\n\tfrom message_parser import MessageParser\n\tfrom mqtt_topic_helper import MqttTopicHelper\n\tfrom paho.mqtt import client as mqtt_client\n", "class ProductPricing:\n\t    def __init__(self):\n\t        self.prices = {i: round(random.uniform(1, 20), 2) for i in range(1, 101)}\n\t    def get_price(self, product_id):\n\t        return self.prices.get(product_id, 0)\n\tbroker = os.getenv('BROKER_ADDRESS', 'localhost')\n\tport = 1883\n\tclient_id = \"fastlane_finale_service\"\n\ttopic_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\n\tmessage_helper = MessageHelper()\n", "message_parser = MessageParser()\n\tproduct_pricing = ProductPricing()\n\tdef connect_mqtt():\n\t    def on_connect(client, userdata, flags, rc):\n\t        if rc == 0:\n\t            logger.info(\"Connected to MQTT Broker!\")\n\t        else:\n\t            logger.error(\"Failed to connect, return code %d\\n\", rc)\n\t    client = mqtt_client.Client(client_id)\n\t    client.on_connect = on_connect\n", "    client.connect(broker, port)\n\t    return client\n\tdef subscribe(client):\n\t    def on_message(client, userdata, msg):\n\t        customer_departure = message_parser.customer_departure(msg.payload)\n\t        total_price = 0\n\t        for product_id in customer_departure['product_ids']:\n\t            total_price += product_pricing.get_price(product_id)\n\t        payment_message = message_helper.payment_due(customer_departure['customer_id'],\n\t                                                     total_price)\n", "        client.publish(topic_helper.payment_due(), payment_message)\n\t        logger.info(f\"Payment due for customer {customer_departure['customer_id']}:\" +\n\t                    f\" ${total_price:.2f}\")\n\t    client.subscribe(topic_helper.customer_departure())\n\t    client.on_message = on_message\n\tdef handle_signal(signum, frame):\n\t    logger.info(\"Gracefully shutting down...\")\n\t    client.disconnect()\n\t    sys.exit(0)\n\tdef run():\n", "    client = connect_mqtt()\n\t    subscribe(client)\n\t    client.loop_start()\n\t    while True:\n\t        time.sleep(1)  # just to prevent the script from ending\n\tsignal.signal(signal.SIGINT, handle_signal)\n\tsignal.signal(signal.SIGTERM, handle_signal)\n\tif __name__ == \"__main__\":\n\t    run()\n"]}
{"filename": "fastlane-finale-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n\t    def __init__(self, chain_name, store_name):\n\t        self.chain_name = chain_name\n\t        self.store_name = store_name\n\t    def customer_arrival(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\t    def customer_departure(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\t    def display_welcome(self):\n\t        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n", "    def purchase_complete(self):\n\t        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\t    def stock_update(self):\n\t        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\t    def restock_alert(self):\n\t        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n\t    def payment_due(self):\n\t        return f\"{self.chain_name}/{self.store_name}/payment-due\"\n"]}
{"filename": "fastlane-finale-service/app/__init__.py", "chunked_list": []}
{"filename": "fastlane-finale-service/app/message_parser.py", "chunked_list": ["import json\n\tclass MessageParser:\n\t    def customer_arrival(self, message):\n\t        data = json.loads(message)\n\t        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id']}\n\t    def customer_departure(self, message):\n\t        data = json.loads(message)\n\t        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id'],\n\t                'product_ids': data['product_ids']}\n"]}
{"filename": "gateexit-guardian-service/tests/__init__.py", "chunked_list": []}
{"filename": "gateexit-guardian-service/app/message_helper.py", "chunked_list": ["import json\n\tfrom datetime import datetime\n\tclass MessageHelper:\n\t    def _current_datetime(self):\n\t        return datetime.now().isoformat()\n\t    def customer_arrival(self, customer_id):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id})\n\t    def customer_departure(self, customer_id, product_ids):\n\t        return json.dumps({\n", "            \"timestamp\": self._current_datetime(),\n\t            \"customer_id\": customer_id,\n\t            \"product_ids\": product_ids\n\t        })\n\t    def purchase_complete(self, customer_id, items):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"customer_id\": customer_id, \"items\": items})\n\t    def stock_update(self, item_id, quantity):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n", "    def restock_alert(self, item_id, quantity):\n\t        return json.dumps({\"timestamp\": self._current_datetime(),\n\t                           \"item_id\": item_id, \"quantity\": quantity})\n"]}
{"filename": "gateexit-guardian-service/app/main.py", "chunked_list": ["import os\n\timport random\n\timport signal\n\timport sys\n\timport time\n\tfrom loguru import logger\n\tfrom message_helper import MessageHelper\n\tfrom mqtt_topic_helper import MqttTopicHelper\n\tfrom paho.mqtt import client as mqtt_client\n\tbroker = os.getenv('BROKER_ADDRESS', 'localhost')\n", "port = 1883\n\tclient_id = \"gateexit-guardian-service\"\n\ttopic_helper = MqttTopicHelper('spectrum-grocers', 'fresh-frontier')\n\texit_topic = topic_helper.customer_departure()\n\tmessage_helper = MessageHelper()\n\tdef connect_mqtt():\n\t    def on_connect(client, userdata, flags, rc):\n\t        if rc == 0:\n\t            logger.info(f\"Connected with result code: {rc}\")\n\t        else:\n", "            logger.info(f\"Failed to connect, return code: {rc}\")\n\t    client = mqtt_client.Client(client_id)\n\t    client.on_connect = on_connect\n\t    client.connect(broker, port)\n\t    return client\n\tdef publish(client):\n\t    while True:\n\t        time.sleep(random.randint(2, 20))\n\t        customer_id = random.randint(1, 10)\n\t        product_ids = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n", "        message = message_helper.customer_departure(customer_id, product_ids)\n\t        result = client.publish(exit_topic, message)\n\t        status = result[0]\n\t        if status == 0:\n\t            logger.info(f\"Published message to topic {exit_topic}\")\n\t        else:\n\t            logger.info(f\"Failed to publish message to topic {exit_topic}\")\n\tdef handle_exit(signum, frame):\n\t    client.disconnect()\n\t    logger.info(\"Gracefully shutting down...\")\n", "    sys.exit(0)\n\tsignal.signal(signal.SIGINT, handle_exit)\n\tsignal.signal(signal.SIGTERM, handle_exit)\n\tif __name__ == '__main__':\n\t    client = connect_mqtt()\n\t    client.loop_start()\n\t    publish(client)\n"]}
{"filename": "gateexit-guardian-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n\t    def __init__(self, chain_name, store_name):\n\t        self.chain_name = chain_name\n\t        self.store_name = store_name\n\t    def customer_departure(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\t    def display_welcome(self):\n\t        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\t    def purchase_complete(self):\n\t        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n", "    def stock_update(self):\n\t        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\t    def restock_alert(self):\n\t        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n"]}
{"filename": "gateexit-guardian-service/app/__init__.py", "chunked_list": []}
{"filename": "inventory-intel-service/tests/__init__.py", "chunked_list": []}
{"filename": "inventory-intel-service/app/main.py", "chunked_list": ["import os\n\timport signal\n\timport time\n\timport paho.mqtt.client as mqtt\n\tfrom inventory import Inventory\n\tfrom loguru import logger\n\tfrom message_parser import MessageParser\n\tfrom mqtt_topic_helper import MqttTopicHelper\n\t# Define MQTT client ID and Broker Address\n\tclient_id = \"inventory-intel-service\"\n", "message_broker_host = os.environ.get(\"BROKER_ADDRESS\", \"localhost\")\n\t# Initialize MQTT Helper\n\tmqtt_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\n\t# Initialize Message Parser\n\tmessage_parser = MessageParser()\n\t# Define Inventory\n\tinventory = Inventory()\n\tdef on_connect(client, userdata, flags, rc):\n\t    logger.info(f\"Connected to MQTT Broker: {message_broker_host} with result code: {rc}\")\n\t    client.subscribe(mqtt_helper.customer_departure())\n", "def on_message(client, userdata, msg):\n\t    message = message_parser.customer_departure(msg.payload)\n\t    customer_id = message['customer_id']\n\t    product_ids = message['product_ids']\n\t    for product_id in product_ids:\n\t        inventory.inventory[product_id]['stock'] -= 1\n\t    logger.info(f\"Inventory updated for customer {customer_id}.\")\n\tdef log_inventory():\n\t    while True:\n\t        logger.info(\"Inventory Check:\")\n", "        for product_id, product_info in inventory.inventory.items():\n\t            if int(product_info['stock']) < 100:\n\t                logger.info(f\"Id: {product_id}, Pr: {product_info['name']},\" +\n\t                            f\"St: {product_info['stock']}\")\n\t        time.sleep(60)\n\tdef on_exit(signum, frame):\n\t    logger.info(\"Received Exit Signal...Disconnecting from Broker\")\n\t    client.disconnect()\n\t    exit(0)\n\t# MQTT client\n", "client = mqtt.Client(client_id)\n\tclient.on_connect = on_connect\n\tclient.on_message = on_message\n\t# Connect to MQTT Broker\n\tclient.connect(message_broker_host)\n\t# Handle exit signals\n\tsignal.signal(signal.SIGINT, on_exit)\n\tsignal.signal(signal.SIGTERM, on_exit)\n\t# Start MQTT client loop\n\tclient.loop_start()\n", "# Log inventory every 30 seconds\n\tlog_inventory()\n"]}
{"filename": "inventory-intel-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n\t    def __init__(self, chain_name, store_name):\n\t        self.chain_name = chain_name\n\t        self.store_name = store_name\n\t    def customer_arrival(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\t    def customer_departure(self):\n\t        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\t    def display_welcome(self):\n\t        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n", "    def purchase_complete(self):\n\t        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\t    def stock_update(self):\n\t        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\t    def restock_alert(self):\n\t        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n"]}
{"filename": "inventory-intel-service/app/__init__.py", "chunked_list": []}
{"filename": "inventory-intel-service/app/inventory.py", "chunked_list": ["from faker import Faker\n\tclass Inventory:\n\t    def __init__(self):\n\t        self.fake = Faker()\n\t        self.inventory = self._generate_inventory()\n\t    def _generate_inventory(self):\n\t        inventory = {}\n\t        for i in range(1, 101):  # generate 100 products\n\t            inventory[i] = {'name': self.fake.commerce.product(), 'stock': 100}\n\t        return inventory\n"]}
{"filename": "inventory-intel-service/app/message_parser.py", "chunked_list": ["import json\n\tclass MessageParser:\n\t    def customer_arrival(self, message):\n\t        data = json.loads(message)\n\t        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id']}\n\t    def customer_departure(self, message):\n\t        data = json.loads(message)\n\t        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id'],\n\t                'product_ids': data['product_ids']}\n"]}
