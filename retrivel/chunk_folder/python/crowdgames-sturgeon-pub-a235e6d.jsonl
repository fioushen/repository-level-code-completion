{"filename": "custom.py", "chunked_list": ["import argparse, pickle\n\timport generator, reach, util\n\tWEIGHT_CUSTOM      =   100\n\tCUST_RESULT        = 'result'\n\tCUST_TEXT_LEVEL    = 'text-level'\n\tCUST_TEXT_COUNT    = 'text-count'\n\tCUST_TEXT_MAX      = 'text-max'\n\tCUST_PATH          = 'path'\n\tCUST_PATH_ENDS     = 'path-ends'\n\tCUST_PATH_FWD      = 'path-fwd'\n", "CUST_PATH_SHORT    = 'path-short'\n\tCUST_LIST = [CUST_RESULT, CUST_TEXT_LEVEL, CUST_TEXT_COUNT, CUST_TEXT_MAX, CUST_PATH, CUST_PATH_ENDS, CUST_PATH_FWD, CUST_PATH_SHORT]\n\tdef str_to_weight(s):\n\t    if s == 'hard':\n\t        return None\n\t    elif s == 'soft':\n\t        return WEIGHT_CUSTOM\n\t    else:\n\t        util.check(False, 'weight')\n\tdef str_to_result(s):\n", "    with util.openz(s, 'rb') as f:\n\t        return pickle.load(f)\n\tdef str_to_points(s):\n\t    ret = []\n\t    for pt in s.split(','):\n\t        a, b = pt.split()\n\t        ret.append((int(a), int(b)))\n\t    return ret\n\tdef arg_cvt(args, cvts):\n\t    util.check(len(args) == len(cvts), 'argument length')\n", "    return [cvt(arg) for arg, cvt in zip(args, cvts)]\n\tdef args_to_custom(cust, args):\n\t    if cust == CUST_RESULT:\n\t        result_info, which, rlo, clo, rhi, chi, roff, coff, weight = arg_cvt(args, (str_to_result, str, int, int, int, int, int, int, str_to_weight))\n\t        return OutResultConstraint(result_info, which, rlo, clo, rhi, chi, roff, coff, weight)\n\t    elif cust == CUST_TEXT_LEVEL:\n\t        out_text_level, weight = arg_cvt(args, (util.read_text_level, str_to_weight))\n\t        return OutTextLevelConstraint(out_text_level, weight)\n\t    elif cust == CUST_TEXT_COUNT:\n\t        rlo, clo, rhi, chi, tlo, thi, out_texts, weight = arg_cvt(args, (int, int, int, int, int, int, str, str_to_weight))\n", "        return OutTextCountConstraint(rlo, clo, rhi, chi, tlo, thi, out_texts, weight)\n\t    elif cust == CUST_TEXT_MAX:\n\t        rlo, clo, rhi, chi, out_texts, weight = arg_cvt(args, (int, int, int, int, str, str_to_weight))\n\t        return OutTextMaximizeConstraint(rlo, clo, rhi, chi, out_texts, weight)\n\t    elif cust == CUST_PATH:\n\t        path_points, weight = arg_cvt(args, (str_to_points, str_to_weight))\n\t        return OutPathConstraint(path_points, weight)\n\t    elif cust == CUST_PATH_ENDS:\n\t        sr, sc, gr, gc, weight = arg_cvt(args, (int, int, int, int, str_to_weight))\n\t        return OutPathEndsConstraint(sr, sc, gr, gc, weight)\n", "    elif cust == CUST_PATH_FWD:\n\t        direction, weight, = arg_cvt(args, (str, str_to_weight))\n\t        return OutPathFwdConstraint(direction, weight)\n\t    elif cust == CUST_PATH_SHORT:\n\t        direction, most, weight = arg_cvt(args, (str, int, str_to_weight))\n\t        return OutPathShortConstraint(direction, most, weight)\n\t    else:\n\t        util.check(False, 'cust')\n\tclass CustomConstraint:\n\t    def __init__(self):\n", "        pass\n\t    def add(self, gen):\n\t        pass\n\tclass OutPathConstraint(CustomConstraint):\n\t    def __init__(self, path_points, weight):\n\t        self._path_points = path_points\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out path constraint', self._weight)\n\t        path_cache = {}\n", "        for (fr, fc), (tr, tc) in zip(self._path_points, self._path_points[1:]):\n\t            util.check(0 <= tc and tc < gen.get_cols(), 'wrapping not supported')\n\t            path_cache[(fr, fc, tr, tc, tc)] = None\n\t        reach_edges = gen.reachability_edges()\n\t        util.check(reach_edges is not None, 'reach_edges')\n\t        for rr in range(gen.get_rows()):\n\t            for cc in range(gen.get_cols()):\n\t                gen.add_constraint_start(rr, cc, (rr, cc) == self._path_points[0], self._weight)\n\t                gen.add_constraint_goal(rr, cc, (rr, cc) == self._path_points[-1], self._weight)\n\t        for cfr, cfc, ctr, ctc, cpwtc in reach_edges:\n", "            on_path = (cfr, cfc, ctr, ctc, cpwtc) in path_cache\n\t            gen.add_constraint_reach_edge(cfr, cfc, ctr, ctc, cpwtc, on_path, self._weight)\n\t            if on_path:\n\t                del path_cache[(cfr, cfc, ctr, ctc, cpwtc)]\n\t        util.check(len(path_cache) == 0, 'not all path edges used')\n\t        path_edges = [(a, b, c, d) for (a, b), (c, d) in zip(self._path_points, self._path_points[1:])]\n\t        gen.append_extra_meta([util.meta_path('custom-path', path_edges)])\n\tclass OutPathEndsConstraint(CustomConstraint):\n\t    def __init__(self, sr, sc, gr, gc, weight):\n\t        self._sr = sr\n", "        self._sc = sc\n\t        self._gr = gr\n\t        self._gc = gc\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out path ends constraint', self._weight)\n\t        for rr in range(gen.get_rows()):\n\t            for cc in range(gen.get_cols()):\n\t                gen.add_constraint_start(rr, cc, (rr, cc) == (self._sr, self._sc), self._weight)\n\t                gen.add_constraint_goal(rr, cc, (rr, cc) == (self._gr, self._gc), self._weight)\n", "        ends = [(self._sr, self._sc), (self._gr, self._gc)]\n\t        gen.append_extra_meta([util.meta_tile('custom-path-ends', ends)])\n\tclass OutPathFwdConstraint(CustomConstraint):\n\t    def __init__(self, direction, weight):\n\t        self._direction = direction\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out path forward constraint', self._weight)\n\t        reach_edges = gen.reachability_edges()\n\t        util.check(reach_edges is not None, 'reach_edges')\n", "        for cfr, cfc, ctr, ctc, cpwtc in reach_edges:\n\t            if self._direction == reach.RGOAL_L_R:\n\t                exclude = (ctc <= cfc)\n\t            elif self._direction == reach.RGOAL_B_T:\n\t                exclude = (ctr >= cfr)\n\t            else:\n\t                util.check(False, 'direction')\n\t            if exclude:\n\t                gen.add_constraint_reach_edge(cfr, cfc, ctr, ctc, cpwtc, False, self._weight)\n\tclass OutResultConstraint(CustomConstraint):\n", "    def __init__(self, out_result, which, rlo, clo, rhi, chi, roff, coff, weight):\n\t        self._out_result = out_result\n\t        self._which = which\n\t        self._rlo = rlo\n\t        self._clo = clo\n\t        self._rhi = rhi\n\t        self._chi = chi\n\t        self._roff = roff\n\t        self._coff = coff\n\t        self._weight = weight\n", "    def add(self, gen):\n\t        print('add custom out result constraint', self._weight)\n\t        util.check(0 <= self._rlo, 'size')\n\t        util.check(0 <= self._clo, 'size')\n\t        util.check(self._rlo < self._rhi, 'size')\n\t        util.check(self._clo < self._chi, 'size')\n\t        util.check(self._rhi <= len(self._out_result.tile_level), 'size')\n\t        util.check(self._chi <= len(self._out_result.tile_level[0]), 'size')\n\t        util.check(0 <= self._roff, 'size')\n\t        util.check(0 <= self._coff, 'size')\n", "        util.check(self._rhi - self._rlo + self._roff <= gen.get_rows(), 'size')\n\t        util.check(self._chi - self._clo + self._coff <= gen.get_cols(), 'size')\n\t        # T: tiles\n\t        # Po: path - on path\n\t        # Pa: path - on and off path\n\t        # Ro: reverse path - on path\n\t        # Ra: reverse path - on and off path\n\t        util.check(self._which in ['T', 'Po', 'Pa', 'Ro', 'Ra', 'TPo', 'TPa', 'TRo', 'TRa'], 'which')\n\t        rinto = -self._rlo + self._roff\n\t        cinto = -self._clo + self._coff\n", "        gen.append_extra_meta([util.meta_rect('custom', [(self._rlo + rinto, self._clo + cinto, self._rhi + rinto, self._chi + cinto)])])\n\t        if 'T' in self._which:\n\t            for rr in range(self._rlo, self._rhi):\n\t                for cc in range(self._clo, self._chi):\n\t                    gen.add_constraint_tile_counts([(rr + rinto, cc + cinto)], [self._out_result.tile_level[rr][cc]], 1, 1, self._weight)\n\t        if 'Po' in self._which or 'Pa' in self._which or 'Ro' in self._which or 'Ra' in self._which:\n\t            util.check(self._out_result.reach_info is not None, 'reach_info')\n\t            path_all = ('Pa' in self._which) or ('Ra' in self._which)\n\t            path_reverse = ('Ro' in self._which) or ('Ra' in self._which)\n\t            path_edges = self._out_result.reach_info.path_edges\n", "            if path_reverse:\n\t                path_edges = reversed(path_edges)\n\t            path_cache = {}\n\t            path_start_found, path_start = False, self._out_result.reach_info.path_tiles[0]\n\t            path_goal_found, path_goal = False, self._out_result.reach_info.path_tiles[-1]\n\t            for (fr, fc, tr, pwtc) in path_edges:\n\t                tc = pwtc % len(self._out_result.tile_level[0])\n\t                f_in = self._rlo <= fr and fr < self._rhi and self._clo <= fc and fc < self._chi\n\t                t_in = self._rlo <= tr and tr < self._rhi and self._clo <= tc and tc < self._chi\n\t                if path_reverse and t_in and (tr, tc) == path_goal:\n", "                    path_goal_found = True\n\t                if not path_reverse and f_in and (fr, fc) == path_start:\n\t                    path_start_found = True\n\t                if f_in and t_in:\n\t                    cfr = fr + rinto\n\t                    cfc = fc + cinto\n\t                    ctr = tr + rinto\n\t                    ctc = tc + cinto\n\t                    cpwtc = pwtc + cinto\n\t                    path_cache[(cfr, cfc, ctr, ctc, cpwtc)] = None\n", "                elif fc < 0 or fc >= len(self._out_result.tile_level[0]):\n\t                    # skip duplicate path edges coming in after a wrap\n\t                    continue\n\t                else:\n\t                    break\n\t                if not path_reverse and t_in and (tr, tc) == path_goal:\n\t                    path_goal_found = True\n\t                if path_reverse and f_in and (fr, fc) == path_start:\n\t                    path_start_found = True\n\t            reach_edges = gen.reachability_edges()\n", "            util.check(reach_edges is not None, 'reach_edges')\n\t            for cfr, cfc, ctr, ctc, cpwtc in reach_edges:\n\t                on_path = (cfr, cfc, ctr, ctc, cpwtc) in path_cache\n\t                add_cnstr = on_path or path_all\n\t                if add_cnstr:\n\t                    gen.add_constraint_reach_edge(cfr, cfc, ctr, ctc, cpwtc, on_path, self._weight)\n\t            for rr in range(self._rlo, self._rhi):\n\t                for cc in range(self._clo, self._chi):\n\t                    if path_start_found or path_all:\n\t                        gen.add_constraint_start(rr + rinto, cc + cinto, (rr, cc) == path_start, self._weight)\n", "                    if path_goal_found or path_all:\n\t                        gen.add_constraint_goal(rr + rinto, cc + cinto, (rr, cc) == path_goal, self._weight)\n\tclass OutPathShortConstraint(CustomConstraint):\n\t    def __init__(self, direction, most, weight):\n\t        self._direction = direction\n\t        self._most = most\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out path short constraint', self._weight)\n\t        if self._direction == reach.RGOAL_L_R:\n", "            for cc in range(gen.get_cols()):\n\t                vvs = []\n\t                for rr in range(gen.get_rows()):\n\t                    vvs.append(gen._reach_vars_node[(rr, cc)])\n\t                gen._solver.cnstr_count(vvs, True, 0, self._most, self._weight)\n\t        elif self._direction == reach.RGOAL_B_T:\n\t            for rr in range(gen.get_rows()):\n\t                vvs = []\n\t                for cc in range(gen.get_cols()):\n\t                    vvs.append(gen._reach_vars_node[(rr, cc)])\n", "                gen._solver.cnstr_count(vvs, True, 0, self._most, self._weight)\n\t        else:\n\t            util.check(False, 'direction')\n\tclass OutTextLevelConstraint(CustomConstraint):\n\t    def __init__(self, out_text_level, weight):\n\t        self._out_text_level = out_text_level\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out text level constraint', self._weight)\n\t        util.check(len(self._out_text_level) == gen.get_rows(), 'size')\n", "        util.check(len(self._out_text_level[0]) == gen.get_cols(), 'size')\n\t        for rr in range(gen.get_rows()):\n\t            for cc in range(gen.get_cols()):\n\t                out_text = self._out_text_level[rr][cc]\n\t                if out_text != util.DEFAULT_TEXT:\n\t                    possible_tiles = [tile for tile, text in gen.get_scheme_info().tileset.tile_to_text.items() if text == out_text]\n\t                    gen.add_constraint_tile_counts([(rr, cc)], possible_tiles, 1, 1, self._weight)\n\tclass OutTextLevelDiffCellConstraint(CustomConstraint):\n\t    def __init__(self, out_text_level, density, offset, weight):\n\t        self._out_text_level = out_text_level\n", "        self._density = density\n\t        self._offset = offset\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out text level diff cell constraint', self._weight)\n\t        util.check(len(self._out_text_level) == gen.get_rows(), 'size')\n\t        util.check(len(self._out_text_level[0]) == gen.get_cols(), 'size')\n\t        for rr in range(gen.get_rows()):\n\t            for cc in range(gen.get_cols()):\n\t                if (self._offset + cc + gen.get_cols() * rr) % self._density != 0:\n", "                    print('-', end='')\n\t                    continue\n\t                else:\n\t                    print('+', end='')\n\t                out_text = self._out_text_level[rr][cc]\n\t                if out_text != util.DEFAULT_TEXT:\n\t                    diff_tiles = [tile for tile, text in gen.get_scheme_info().tileset.tile_to_text.items() if text != out_text]\n\t                    gen.add_constraint_tile_counts([(rr, cc)], diff_tiles, 1, 1, self._weight)\n\t            print()\n\tclass OutTextLevelDiffCountConstraint(CustomConstraint):\n", "    def __init__(self, out_text_level, diff_pct, weight):\n\t        self._out_text_level = out_text_level\n\t        self._diff_pct = diff_pct\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out text level diff count constraint', self._weight)\n\t        util.check(len(self._out_text_level) == gen.get_rows(), 'size')\n\t        util.check(len(self._out_text_level[0]) == gen.get_cols(), 'size')\n\t        all_diff_vars = []\n\t        for rr in range(gen.get_rows()):\n", "            for cc in range(gen.get_cols()):\n\t                out_text = self._out_text_level[rr][cc]\n\t                if out_text != util.DEFAULT_TEXT:\n\t                    diff_tiles = [tile for tile, text in gen.get_scheme_info().tileset.tile_to_text.items() if text != out_text]\n\t                    for tile in diff_tiles:\n\t                        all_diff_vars.append(gen._tile_var(rr, cc, tile))\n\t        tile_diff_count = max(1, min(len(all_diff_vars), int(gen.get_rows() * gen.get_cols() * self._diff_pct // 100)))\n\t        gen._solver.cnstr_count(all_diff_vars, True, tile_diff_count, len(all_diff_vars), self._weight)\n\tclass OutTextCountConstraint(CustomConstraint):\n\t    def __init__(self, rlo, clo, rhi, chi, tlo, thi, out_texts, weight):\n", "        self._rlo = rlo\n\t        self._clo = clo\n\t        self._rhi = rhi\n\t        self._chi = chi\n\t        self._tlo = tlo\n\t        self._thi = thi\n\t        self._out_texts = out_texts\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out text count constraint', self._weight)\n", "        possible_tiles = [tile for tile, text in gen.get_scheme_info().tileset.tile_to_text.items() if text in self._out_texts]\n\t        rcs = []\n\t        for rr in range(self._rlo, self._rhi):\n\t            for cc in range(self._clo, self._chi):\n\t                rcs.append((rr, cc))\n\t        gen.add_constraint_tile_counts(rcs, possible_tiles, self._tlo, self._thi, self._weight)\n\tclass OutTileCountConstraint(CustomConstraint):\n\t    def __init__(self, rlo, clo, rhi, chi, tlo, thi, out_tile, weight):\n\t        self._rlo = rlo\n\t        self._clo = clo\n", "        self._rhi = rhi\n\t        self._chi = chi\n\t        self._tlo = tlo\n\t        self._thi = thi\n\t        self._out_tile = out_tile\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out tile count constraint', self._weight)\n\t        possible_tiles = [self._out_tile]\n\t        rcs = []\n", "        for rr in range(self._rlo, self._rhi):\n\t            for cc in range(self._clo, self._chi):\n\t                rcs.append((rr, cc))\n\t        gen.add_constraint_tile_counts(rcs, possible_tiles, self._tlo, self._thi, self._weight)\n\tclass OutTextMaximizeConstraint(CustomConstraint):\n\t    def __init__(self, rlo, clo, rhi, chi, out_texts, weight):\n\t        self._rlo = rlo\n\t        self._clo = clo\n\t        self._rhi = rhi\n\t        self._chi = chi\n", "        self._out_texts = out_texts\n\t        self._weight = weight\n\t    def add(self, gen):\n\t        print('add custom out text maximize constraint', self._weight)\n\t        possible_tiles = [tile for tile, text in gen.get_scheme_info().tileset.tile_to_text.items() if text in self._out_texts]\n\t        for rr in range(self._rlo, self._rhi):\n\t            for cc in range(self._clo, self._chi):\n\t                gen.add_constraint_tile_counts([(rr, cc)], possible_tiles, 1, 1, self._weight)\n"]}
{"filename": "reach.py", "chunked_list": ["import util\n\tRMOVE_MAZE               = 'maze'\n\tRMOVE_TOMB               = 'tomb'\n\tRMOVE_CLIMB              = 'climb'\n\tRMOVE_SUPERCAT           = 'supercat'\n\tRMOVE_SUPERCAT2          = 'supercat2'\n\tRMOVE_PLATFORM           = 'platform'\n\tRMOVE_LIST               = [RMOVE_MAZE, RMOVE_TOMB, RMOVE_SUPERCAT, RMOVE_SUPERCAT2, RMOVE_CLIMB, RMOVE_PLATFORM]\n\tRGOAL_ALL                = 'all'\n\tRGOAL_SET                = 'set'\n", "RGOAL_L_R                = 'l-r'\n\tRGOAL_B_T                = 'b-t'\n\tRGOAL_T_B                = 't-b'\n\tRGOAL_TL_BR              = 'tl-br'\n\tRGOAL_TR_BL              = 'tr-bl'\n\tRGOAL_BL_TR              = 'bl-tr'\n\tRGOAL_BR_TL              = 'br-tl'\n\tRGOAL_DICT = {\n\t    RGOAL_ALL: 0,\n\t    RGOAL_SET: 4,\n", "    RGOAL_L_R: 1,\n\t    RGOAL_B_T: 1,\n\t    RGOAL_T_B: 1,\n\t    RGOAL_TL_BR: 1,\n\t    RGOAL_TR_BL: 1,\n\t    RGOAL_BL_TR: 1,\n\t    RGOAL_BR_TL: 1\n\t}\n\tdef get_move_template(reach_move):\n\t    move_template = []\n", "    if reach_move == RMOVE_MAZE:\n\t        move_template.append(((-1,  0), [], [], []))\n\t        move_template.append((( 1,  0), [], [], []))\n\t        move_template.append((( 0, -1), [], [], []))\n\t        move_template.append((( 0,  1), [], [], []))\n\t    elif reach_move == RMOVE_TOMB:\n\t        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n\t            for ii in [1, 2, 4, 6, 10]:\n\t                dest = (dr * ii, dc * ii)\n\t                need_open_path = [(dr * jj, dc * jj) for jj in range(1, ii)]\n", "                need_open_aux = []\n\t                need_closed = [(dr * (ii + 1), dc * (ii + 1))]\n\t                move_template.append((dest, need_open_path, need_open_aux, need_closed))\n\t    elif reach_move in [RMOVE_CLIMB, RMOVE_SUPERCAT, RMOVE_SUPERCAT2]:\n\t        # fall\n\t        move_template.append(((1,  0), [], [], []))\n\t        move_template.append(((1,  1), [(1, 0)], [], []))\n\t        move_template.append(((1, -1), [(1, 0)], [], []))\n\t        # walk\n\t        move_template.append(((0,  1), [], [], [(1, 0)]))\n", "        move_template.append(((0, -1), [], [], [(1, 0)]))\n\t        # wall climb (only starting from ground, no continue onto ledge)\n\t        for dc in [1, -1]:\n\t            for ii in range(1, 8):\n\t                dest = (-ii, 0)\n\t                need_open_path = [(-jj, 0) for jj in range(1, ii)]\n\t                need_open_aux = []\n\t                need_closed = [(1, 0)] + [(-jj, dc) for jj in range(ii + 1)]\n\t                move_template.append((dest, need_open_path, need_open_aux, need_closed))\n\t        # wall jump (requires extra closed tiles to prevent continuing jump/fall in same direction, open to prevent jump from ground)\n", "        jump_arc = [(0, 1), (-1,  1), (-1,  2), (-2,  2), (-2,  3), (-3,  3), (-3,  4)]\n\t        for dc in [1, -1]:\n\t            arc_start = 0 if reach_move == RMOVE_SUPERCAT else 1\n\t            for ii in range(arc_start, len(jump_arc)):\n\t                dest = (jump_arc[ii][0], dc * jump_arc[ii][1])\n\t                need_open_path =  [(jr, dc * jc) for jr, jc in jump_arc[:ii]]\n\t                need_open_aux = [(1, 0)]\n\t                need_closed = [(-1, -dc), (0, -dc), (1, -dc)]\n\t                move_template.append((dest, need_open_path, need_open_aux, need_closed))\n\t        if reach_move in [RMOVE_SUPERCAT, RMOVE_SUPERCAT2]:\n", "            # dash jump\n\t            arc_start = 0 if reach_move == RMOVE_SUPERCAT else 1\n\t            jump_arc = [(0, 1), (-1,  1), (-1,  2), (-2,  2), (-2,  3), (-2,  4), (-2,  5)]\n\t            for dc in [1, -1]:\n\t                for ii in range(arc_start, len(jump_arc)):\n\t                    dest = (jump_arc[ii][0], dc * jump_arc[ii][1])\n\t                    need_open_path = [(jr, dc * jc) for jr, jc in jump_arc[:ii]]\n\t                    if reach_move == RMOVE_SUPERCAT:\n\t                        need_open_aux = [(1, dc)]\n\t                    elif reach_move == RMOVE_SUPERCAT2:\n", "                        need_open_aux = [(1, dc), (-1, 0)]\n\t                    else:\n\t                        util.check(False, 'reach_move')\n\t                    need_closed = [(1, 0)]\n\t                    move_template.append((dest, need_open_path, need_open_aux, need_closed))\n\t    elif reach_move == RMOVE_PLATFORM:\n\t        # fall\n\t        move_template.append(((1,  0), [], [], []))\n\t        move_template.append(((1,  1), [(1, 0)], [], []))\n\t        move_template.append(((1, -1), [(1, 0)], [], []))\n", "        # walk\n\t        move_template.append(((0,  1), [], [], [(1, 0)]))\n\t        move_template.append(((0, -1), [], [], [(1, 0)]))\n\t        # jump\n\t        jump_arcs = [\n\t            [(-1,  0), (-2,  0), (-3,  0), (-4,  0), (-4,  1)],\n\t            [(-1,  0), (-2,  0), (-3,  0), (-4,  0), (-4, -1)],\n\t            [(-1,  0), (-1,  1), (-2,  1), (-2,  2), (-3,  2), (-3,  3), (-4,  3), (-4,  4)],\n\t            [(-1,  0), (-1, -1), (-2, -1), (-2, -2), (-3, -2), (-3, -3), (-4, -3), (-4, -4)],\n\t        ]\n", "        for jump_arc in jump_arcs:\n\t            for ii in range(len(jump_arc)):\n\t                dest = jump_arc[ii]\n\t                need_open_path = [jrc for jrc in jump_arc[:ii]]\n\t                need_open_aux = []\n\t                need_closed = [(1, 0)]\n\t                move_template.append((dest, need_open_path, need_open_aux, need_closed))\n\t    else:\n\t        util.check(False, 'reach_move ' + reach_move)\n\t    move_template_uniq = []\n", "    for arc in move_template:\n\t        if arc not in move_template_uniq:\n\t            move_template_uniq.append(arc)\n\t    return move_template_uniq\n\tdef get_reach_info(rows, cols, reach_setup, scheme_info):\n\t    util.check(scheme_info.tileset.tile_to_text is not None, 'reachability only for (text) level generation')\n\t    reach_info = util.ReachabilityInfo()\n\t    reach_info.start_rcs = []\n\t    reach_info.goal_rcs = []\n\t    def r_all(_st, _gl):\n", "        for _rr in range(rows):\n\t            for _cc in range(cols):\n\t                _st.append((_rr, _cc))\n\t                _gl.append((_rr, _cc))\n\t    def r_set(_sr, _sc, _gr, _gc, _st, _gl):\n\t        _st.append((_sr, _sc))\n\t        _gl.append((_gr, _gc))\n\t    def r_left_to_right(_sz, _st, _gl):\n\t        for _rr in range(rows):\n\t            for _cc in range(_sz):\n", "                _st.append((_rr, _cc))\n\t                _gl.append((_rr, cols - 1 - _cc))\n\t    def r_bottom_to_top(_sz, _st, _gl):\n\t        for _rr in range(_sz):\n\t            for _cc in range(cols):\n\t                _st.append((rows - 1 - _rr, _cc))\n\t                _gl.append((_rr, _cc))\n\t    def r_top_to_bottom(_sz, _st, _gl):\n\t        for _rr in range(_sz):\n\t            for _cc in range(cols):\n", "                _st.append((_rr, _cc))\n\t                _gl.append((rows - 1 - _rr, _cc))\n\t    def r_topleft_to_botright(_szr, _szc, _st, _gl):\n\t        for _rr in range(_szr):\n\t            for _cc in range(_szc):\n\t                _st.append((_rr, _cc))\n\t                _gl.append((rows - 1 - _rr, cols - 1 - _cc))\n\t    def r_topright_to_botleft(_szr, _szc, _st, _gl):\n\t        for _rr in range(_szr):\n\t            for _cc in range(_szc):\n", "                _st.append((_rr, cols - 1 - _cc))\n\t                _gl.append((rows - 1 - _rr, _cc))\n\t    def r_botleft_to_topright(_szr, _szc, _st, _gl):\n\t        for _rr in range(_szr):\n\t            for _cc in range(_szc):\n\t                _st.append((rows - 1 - _rr, _cc))\n\t                _gl.append((_rr, cols - 1 - _cc))\n\t    def r_botright_to_topleft(_szr, _szc, _st, _gl):\n\t        for _rr in range(_szr):\n\t            for _cc in range(_szc):\n", "                _st.append((rows - 1 - _rr, cols - 1 - _cc))\n\t                _gl.append((_rr, _cc))\n\t    if reach_setup.goal_loc == RGOAL_ALL:\n\t        r_all(reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_SET:\n\t        r_set(reach_setup.goal_params[0], reach_setup.goal_params[1], reach_setup.goal_params[2], reach_setup.goal_params[3], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_L_R:\n\t        r_left_to_right(reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_B_T:\n\t        r_bottom_to_top(reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n", "    elif reach_setup.goal_loc == RGOAL_T_B:\n\t        r_top_to_bottom(reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_TL_BR:\n\t        r_topleft_to_botright(reach_setup.goal_params[0], reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_TR_BL:\n\t        r_topright_to_botleft(reach_setup.goal_params[0], reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_BL_TR:\n\t        r_botleft_to_topright(reach_setup.goal_params[0], reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n\t    elif reach_setup.goal_loc == RGOAL_BR_TL:\n\t        r_botright_to_topleft(reach_setup.goal_params[0], reach_setup.goal_params[0], reach_info.start_rcs, reach_info.goal_rcs)\n", "    else:\n\t        util.check(False, 'reach_goal_loc ' + reach_setup.goal_loc)\n\t    reach_info.game_to_move = {}\n\t    for game, reach_move in reach_setup.game_to_move.items():\n\t        game_move = util.GameMoveInfo()\n\t        reach_info.game_to_move[game] = game_move\n\t        game_move.start_tile, game_move.goal_tile, game_move.open_tiles = None, None, []\n\t        for tag, tiles in scheme_info.game_to_tag_to_tiles[game].items():\n\t            for tile in tiles:\n\t                text = scheme_info.tileset.tile_to_text[tile]\n", "                if text == util.START_TEXT:\n\t                    util.check(game_move.start_tile is None, 'multiple tiles with start text')\n\t                    game_move.start_tile = tile\n\t                if text == util.GOAL_TEXT:\n\t                    util.check(game_move.goal_tile is None, 'multiple tiles with goal text')\n\t                    game_move.goal_tile = tile\n\t                if text in reach_setup.open_text:\n\t                    game_move.open_tiles.append(tile)\n\t        util.check(game_move.start_tile is not None, 'no tiles with start text')\n\t        util.check(game_move.goal_tile is not None, 'no tiles with goal text')\n", "        util.check(len(game_move.open_tiles) > 0, 'no tiles with open text')\n\t        game_move.wrap_cols = reach_setup.wrap_cols\n\t        game_move.move_template = get_move_template(reach_move)\n\t    return reach_info\n"]}
{"filename": "solvers.py", "chunked_list": ["import json, multiprocessing, queue, random, sys\n\timport util\n\ttry:\n\t    available_z3 = False\n\t    import z3\n\t    available_z3 = True\n\texcept ImportError:\n\t    pass\n\ttry:\n\t    available_cvc5 = False\n", "    import cvc5.pythonic\n\t    available_cvc5 = True\n\texcept ImportError:\n\t    pass\n\ttry:\n\t    available_clingo = False\n\t    import clingo\n\t    available_clingo = True\n\texcept ImportError:\n\t    pass\n", "try:\n\t    available_pysat = False\n\t    import pysat.card\n\t    import pysat.formula\n\t    import pysat.examples.fm\n\t    import pysat.examples.rc2\n\t    import pysat.solvers\n\t    available_pysat = True\n\texcept ImportError:\n\t    pass\n", "SOLVER_PRINT          = 'print'\n\tSOLVER_Z3             = 'z3'\n\tSOLVER_CVC5           = 'cvc5'\n\tSOLVER_CLINGO_FE      = 'clingo-fe'\n\tSOLVER_CLINGO_BE      = 'clingo-be'\n\tSOLVER_PYSAT_FM       = 'pysat-fm'\n\tSOLVER_PYSAT_RC2      = 'pysat-rc2'\n\tSOLVER_PYSAT_FM_BOOL  = 'pysat-fm-boolonly'\n\tSOLVER_PYSAT_RC2_BOOL = 'pysat-rc2-boolonly'\n\tSOLVER_PYSAT_MC       = 'pysat-minicard'\n", "SOLVER_LIST           = [SOLVER_PRINT, SOLVER_Z3, SOLVER_CVC5, SOLVER_CLINGO_FE, SOLVER_CLINGO_BE, SOLVER_PYSAT_FM, SOLVER_PYSAT_RC2, SOLVER_PYSAT_FM_BOOL, SOLVER_PYSAT_RC2_BOOL, SOLVER_PYSAT_MC]\n\tSOLVER_NOTEST_LIST    = [SOLVER_PRINT]\n\tPYSAT_OPTION_CARD     = 'card'\n\tPYSAT_OPTION_BOOLONLY = 'boolonly'\n\tPYSAT_ENCODING        = pysat.card.EncType.kmtotalizer\n\tdef solver_id_to_solver(solver_id):\n\t    if solver_id == SOLVER_PRINT:\n\t        return PrintSolver()\n\t    elif solver_id == SOLVER_Z3:\n\t        return Z3Solver()\n", "    elif solver_id == SOLVER_CVC5:\n\t        return CVC5Solver()\n\t    elif solver_id == SOLVER_CLINGO_FE:\n\t        return ClingoFrontendSolver()\n\t    elif solver_id == SOLVER_CLINGO_BE:\n\t        return ClingoBackendSolver()\n\t    elif solver_id == SOLVER_PYSAT_FM:\n\t        return PySatSolverFM()\n\t    elif solver_id == SOLVER_PYSAT_RC2:\n\t        return PySatSolverRC2()\n", "    elif solver_id == SOLVER_PYSAT_FM_BOOL:\n\t        return PySatSolverFMBoolOnly()\n\t    elif solver_id == SOLVER_PYSAT_RC2_BOOL:\n\t        return PySatSolverRC2BoolOnly()\n\t    elif solver_id == SOLVER_PYSAT_MC:\n\t        return PySatSolverMiniCard()\n\t    else:\n\t        util.check(False, 'solver ' + solver_id + ' unrecognized.')\n\tclass Solver:\n\t    def __init__(self, solver_id):\n", "        self._solver_id = solver_id\n\t    def get_id(self):\n\t        return self._solver_id\n\t    def make_var(self):\n\t        util.check(False, 'unimplemented')\n\t    def make_conj(self, vvs, settings):\n\t        util.check(False, 'unimplemented')\n\t    def cnstr_implies_disj(self, in_vv, in_vv_setting, out_vvs, out_vv_settings, weight):\n\t        util.check(False, 'unimplemented')\n\t    def cnstr_count(self, vvs, settings, lo, hi, weight):\n", "        util.check(False, 'unimplemented')\n\t    def solve(self):\n\t        util.check(False, 'unimplemented')\n\t    def get_var(self, vv):\n\t        util.check(False, 'unimplemented')\n\t    def get_objective(self):\n\t        util.check(False, 'unimplemented')\n\tdef _wrap_var(vv):\n\t    return ('v', vv)\n\tdef _wrap_conj(vv):\n", "    return ('c', vv)\n\tdef _is_var(vv):\n\t    return vv[0] == 'v'\n\tdef _is_conj(vv):\n\t    return vv[0] == 'c'\n\tdef _unwrap_var(vv):\n\t    util.check(type(vv) == tuple and len(vv) == 2 and vv[0] == 'v', 'unwrap')\n\t    return vv[1]\n\tdef _unwrap_conj(vv):\n\t    util.check(type(vv) == tuple and len(vv) == 2 and vv[0] == 'c', 'unwrap')\n", "    return vv[1]\n\tdef _unwrap_any(vv):\n\t    util.check(type(vv) == tuple and len(vv) == 2 and vv[0] in ['v', 'c'], 'unwrap')\n\t    return vv[1]\n\tdef _unwrap_lit_lconj(vv, setting, negate_func):\n\t    vv = _unwrap_any(vv)\n\t    if not setting:\n\t        vv = negate_func(vv)\n\t    return vv\n\tdef _unwrap_lit_lconjs(vvs, settings, negate_func):\n", "    if settings in [True, False]:\n\t        settings = [settings for vv in vvs]\n\t    else:\n\t        util.check(len(vvs) == len(settings), 'different vvs and settings lengths')\n\t    return [_unwrap_lit_lconj(vv, setting, negate_func) for vv, setting in zip(vvs, settings)]\n\tclass SolverImpl(Solver):\n\t    def __init__(self, solver_id, weighted):\n\t        super().__init__(solver_id)\n\t        self._weighted = weighted\n\t        self._result = None\n", "        self._objective = None\n\t    def make_var(self):\n\t        return _wrap_var(self._IMPL_make_var())\n\t    def make_conj(self, vvs, settings):\n\t        util.check(len(vvs) > 0, 'empty conj')\n\t        return _wrap_conj(self._IMPL_make_conj(_unwrap_lit_lconjs(vvs, settings, self._IMPL_negate_var_conj)))\n\t    def cnstr_implies_disj(self, in_vv, in_vv_setting, out_vvs, out_vv_settings, weight):\n\t        if not self._weighted:\n\t            util.check(weight is None, 'solver does not support weights')\n\t            return self._IMPL_cnstr_implies_disj(_unwrap_lit_lconj(in_vv, in_vv_setting, self._IMPL_negate_var_conj), _unwrap_lit_lconjs(out_vvs, out_vv_settings, self._IMPL_negate_var_conj_for_implies_out))\n", "        else:\n\t            return self._IMPL_cnstr_implies_disj(_unwrap_lit_lconj(in_vv, in_vv_setting, self._IMPL_negate_var_conj), _unwrap_lit_lconjs(out_vvs, out_vv_settings, self._IMPL_negate_var_conj_for_implies_out), weight)\n\t    def cnstr_count(self, vvs, settings, lo, hi, weight):\n\t        util.check(0 <= lo and lo <= hi and hi <= len(vvs), 'count')\n\t        if not self._weighted:\n\t            util.check(weight is None, 'solver does not support weights')\n\t            return self._IMPL_cnstr_count(_unwrap_lit_lconjs(vvs, settings, self._IMPL_negate_var_conj), lo, hi)\n\t        else:\n\t            return self._IMPL_cnstr_count(_unwrap_lit_lconjs(vvs, settings, self._IMPL_negate_var_conj), lo, hi, weight)\n\t    def solve(self):\n", "        return self._IMPL_solve()\n\t    def get_var(self, vv):\n\t        return self._IMPL_get_var(_unwrap_var(vv))\n\t    def get_objective(self):\n\t        return self._objective\n\t    def _IMPL_negate_var_conj_for_implies_out(self, ll):\n\t        return self._IMPL_negate_var_conj(ll)\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        util.check(False, 'unimplemented')\n\t    def _IMPL_make_var(self):\n", "        util.check(False, 'unimplemented')\n\t    def _IMPL_make_conj(self, lls):\n\t        util.check(False, 'unimplemented')\n\t    def _IMPL_cnstr_implies_disj(self, ll_in, lls_out, weight):\n\t        util.check(False, 'unimplemented')\n\t    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        util.check(False, 'unimplemented')\n\t    def _IMPL_solve(self):\n\t        util.check(False, 'unimplemented')\n\t    def _IMPL_get_var(self, vv):\n", "        util.check(False, 'unimplemented')\n\tclass PortfolioSolver(Solver):\n\t    def __init__(self, solver_ids, timeout):\n\t        super().__init__('portfolio:' + ';'.join(solver_ids))\n\t        self._solver_ids = solver_ids\n\t        self._timeout = timeout\n\t        self._solver_var_conjs = []\n\t        self._solver_commands = []\n\t        self._result = None\n\t        self._objective = None\n", "    def make_var(self):\n\t        self._solver_var_conjs.append(_wrap_var(None))\n\t        return len(self._solver_var_conjs) - 1\n\t    def make_conj(self, vvs, settings):\n\t        util.check(len(vvs) > 0, 'empty conj')\n\t        self._solver_var_conjs.append(_wrap_conj((tuple(vvs), settings)))\n\t        return len(self._solver_var_conjs) - 1\n\t    def cnstr_implies_disj(self, in_vv, in_vv_setting, out_vvs, out_vv_settings, weight):\n\t        self._solver_commands.append(('cnstr_implies_disj', (in_vv, in_vv_setting, out_vvs, out_vv_settings, weight)))\n\t    def cnstr_count(self, vvs, settings, lo, hi, weight):\n", "        util.check(0 <= lo and lo <= hi and hi <= len(vvs), 'count')\n\t        self._solver_commands.append(('cnstr_count', (vvs, settings, lo, hi, weight)))\n\t    def solve(self):\n\t        q = multiprocessing.Queue()\n\t        procs = [(multiprocessing.Process(target=PortfolioSolver.run_solver, args=(q, index, solver_id, self._solver_var_conjs, self._solver_commands))) for (index, solver_id) in enumerate(self._solver_ids)]\n\t        for proc in procs:\n\t            proc.start()\n\t        result = None\n\t        try:\n\t            result = q.get(timeout=self._timeout)\n", "        except queue.Empty:\n\t            util.write_portfolio('portfolio timeout\\n')\n\t        for proc in procs:\n\t            proc.kill()\n\t        if result is None:\n\t            return False\n\t        else:\n\t            index, self._result, self._objective = result\n\t            util.write_portfolio('portfolio using %d %s\\n' % (index, self._solver_ids[index]))\n\t            return True\n", "    def get_var(self, vv):\n\t        return self._result[vv]\n\t    def get_objective(self):\n\t        return self._objective\n\t    @staticmethod\n\t    def run_solver(s_q, s_index, s_solver_id, s_solver_var_conjs, s_solver_commands):\n\t        s_ret = None\n\t        try:\n\t            util.write_portfolio('portfolio starting %d %s\\n' % (s_index, s_solver_id))\n\t            s_solver = solver_id_to_solver(s_solver_id)\n", "            s_var_conj_map = {}\n\t            def translate_vars(_vvv):\n\t                nonlocal s_var_conj_map\n\t                if type(_vvv) in [list, tuple]:\n\t                    return [s_var_conj_map[_vv] for _vv in _vvv]\n\t                else:\n\t                    return s_var_conj_map[_vvv]\n\t            s_vars_inds = []\n\t            s_conjs_inds = []\n\t            for s_ind, s_var_conj in enumerate(s_solver_var_conjs):\n", "                if _is_var(s_var_conj):\n\t                    s_vars_inds.append(s_ind)\n\t                elif _is_conj(s_var_conj):\n\t                    s_conjs_inds.append(s_ind)\n\t                else:\n\t                    util.check(False, 'var_conj')\n\t            random.Random(s_index).shuffle(s_vars_inds)\n\t            for s_ind in s_vars_inds:\n\t                util.check(_is_var(s_solver_var_conjs[s_ind]), 'var')\n\t                s_var_conj_map[s_ind] = s_solver.make_var()\n", "            for s_ind in s_conjs_inds:\n\t                util.check(_is_conj(s_solver_var_conjs[s_ind]), 'conj')\n\t                s_info = _unwrap_conj(s_solver_var_conjs[s_ind])\n\t                s_var_conj_map[s_ind] = s_solver.make_conj(translate_vars(s_info[0]), s_info[1])\n\t            for s_func_name, s_args in s_solver_commands:\n\t                if s_func_name == 'cnstr_implies_disj':\n\t                    s_solver.cnstr_implies_disj(translate_vars(s_args[0]), s_args[1], translate_vars(s_args[2]), s_args[3], s_args[4])\n\t                elif s_func_name == 'cnstr_count':\n\t                    s_solver.cnstr_count(translate_vars(s_args[0]), s_args[1], s_args[2], s_args[3], s_args[4])\n\t                else:\n", "                    util.check(False, 's_func_name')\n\t            if s_solver.solve():\n\t                s_vars_set = {}\n\t                for s_ind, s_var_conj in enumerate(s_solver_var_conjs):\n\t                    if _is_var(s_var_conj):\n\t                        s_vars_set[s_ind] = s_solver.get_var(translate_vars(s_ind))\n\t                s_ret = (s_index, s_vars_set, s_solver.get_objective())\n\t            util.write_portfolio('portfolio finishing %d %s\\n' % (s_index, s_solver_id))\n\t        except Exception as e:\n\t            util.write_portfolio('portfolio error %d %s %s\\n' % (s_index, s_solver_id, e))\n", "        s_q.put(s_ret)\n\tclass PrintSolver(SolverImpl):\n\t    def __init__(self):\n\t        super().__init__(SOLVER_PRINT, True)\n\t        self._curr_id = 0\n\t        self._output = {}\n\t        self._output['var'] = []\n\t        self._output['conj'] = []\n\t        self._output['cnstr_implies_disj'] = []\n\t        self._output['cnstr_count'] = []\n", "    def _IMPL_negate_var_conj(self, ll):\n\t        return '~' + ll\n\t    def _IMPL_make_var(self):\n\t        self._curr_id += 1\n\t        ret = 'v%d' % self._curr_id\n\t        self._output['var'].append({'id':ret})\n\t        return ret\n\t    def _IMPL_make_conj(self, lls):\n\t        self._curr_id += 1\n\t        ret = 'c%d' % self._curr_id\n", "        self._output['conj'].append({'id':ret, 'of':lls})\n\t        return ret\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls, weight):\n\t        print_weight = weight if weight is not None else 0\n\t        self._output['cnstr_implies_disj'].append({'if':in_ll, 'then':out_lls, 'weight':print_weight})\n\t    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        print_weight = weight if weight is not None else 0\n\t        self._output['cnstr_count'].append({'of':lls, 'min':lo, 'max':hi, 'weight':print_weight})\n\t    def _IMPL_solve(self):\n\t        print(json.dumps(self._output, indent=2))\n", "        return False\n\tclass Z3Solver(SolverImpl):\n\t    def __init__(self):\n\t        util.check(available_z3, 'z3 not available')\n\t        super().__init__(SOLVER_Z3, True)\n\t        self._s = z3.Optimize()\n\t    def _help_add_cnstr_weight(self, cnstr, weight):\n\t        if weight is None:\n\t            self._s.add(cnstr)\n\t        else:\n", "            self._s.add_soft(cnstr, weight)\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        return z3.Not(ll)\n\t    def _IMPL_make_var(self):\n\t        return z3.FreshBool()\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n\t            return lls[0]\n\t        else:\n\t            return z3.And(*lls)\n", "    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls, weight):\n\t        self._help_add_cnstr_weight(z3.Implies(in_ll, z3.Or(*out_lls)), weight)\n\t    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        if len(lls) == 0:\n\t            pass\n\t        elif len(lls) == 1:\n\t            if lo == 0 and hi == 1:\n\t                pass\n\t            elif lo == 0 and hi == 0:\n\t                self._help_add_cnstr_weight(z3.Not(lls[0]), weight)\n", "            elif lo == 1 and hi == 1:\n\t                self._help_add_cnstr_weight(lls[0], weight)\n\t            else:\n\t                util.check(False, 'count vars')\n\t        else:\n\t            lls_count = [(vv, 1) for vv in lls]\n\t            if lo == hi:\n\t                self._help_add_cnstr_weight(z3.PbEq(lls_count, lo), weight)\n\t            else:\n\t                if lo == 0:\n", "                    pass\n\t                elif lo == 1:\n\t                    self._help_add_cnstr_weight(z3.Or(lls), weight)\n\t                else:\n\t                    self._help_add_cnstr_weight(z3.PbGe(lls_count, lo), weight)\n\t                if hi < len(lls):\n\t                    self._help_add_cnstr_weight(z3.PbLe(lls_count, hi), weight)\n\t    def _IMPL_solve(self):\n\t        def on_model(_m):\n\t            util.write_time('.')\n", "        self._s.set_on_model(on_model)\n\t        chk = self._s.check()\n\t        util.write_time('\\n')\n\t        util.write_time(str(chk) + '\\n')\n\t        if chk == z3.unsat:\n\t            return False\n\t        if chk == z3.unknown:\n\t            util.write_time(str(self._s.reason_unknown()) + '\\n')\n\t            return False\n\t        self._result = self._s.model()\n", "        objs = [self._s.model().evaluate(obj) for obj in self._s.objectives()]\n\t        if len(objs) == 0:\n\t            self._objective = 0\n\t        else:\n\t            util.check(len(objs) == 1, 'cost length')\n\t            self._objective = objs[0].as_long()\n\t        return True\n\t    def _IMPL_get_var(self, vv):\n\t        return bool(self._result[vv])\n\tclass CVC5Solver(SolverImpl):\n", "    def __init__(self):\n\t        util.check(available_cvc5, 'cvc5 not available')\n\t        super().__init__(SOLVER_CVC5, False)\n\t        self._s = cvc5.pythonic.SimpleSolver()\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        return cvc5.pythonic.Not(ll)\n\t    def _IMPL_make_var(self):\n\t        return cvc5.pythonic.FreshBool()\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n", "            return lls[0]\n\t        else:\n\t            return cvc5.pythonic.And(*lls)\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls):\n\t        if len(out_lls) == 0:\n\t            self._s.add(cvc5.pythonic.Implies(in_ll, False))\n\t        elif len(out_lls) == 1:\n\t            self._s.add(cvc5.pythonic.Implies(in_ll, out_lls[0]))\n\t        else:\n\t            self._s.add(cvc5.pythonic.Implies(in_ll, cvc5.pythonic.Or(*out_lls)))\n", "    def _IMPL_cnstr_count(self, lls, lo, hi):\n\t        if len(lls) == 0:\n\t            pass\n\t        elif len(lls) == 1:\n\t            if lo == 0 and hi == 1:\n\t                pass\n\t            elif lo == 0 and hi == 0:\n\t                self._s.add(cvc5.pythonic.Not(lls[0]))\n\t            elif lo == 1 and hi == 1:\n\t                self._s.add(lls[0])\n", "            else:\n\t                util.check(False, 'count vars')\n\t        else:\n\t            lls_if = sum([cvc5.pythonic.If(ll, 1, 0) for ll in lls])\n\t            if lo == hi:\n\t                self._s.add(lls_if == lo)\n\t            else:\n\t                if lo == 0:\n\t                    pass\n\t                elif lo == 1:\n", "                    self._s.add(cvc5.pythonic.Or(lls))\n\t                else:\n\t                    self._s.add(lls_if >= lo)\n\t                if hi < len(lls):\n\t                    self._s.add(lls_if <= hi)\n\t    def _IMPL_solve(self):\n\t        chk = self._s.check()\n\t        util.write_time('\\n')\n\t        util.write_time(str(chk) + '\\n')\n\t        if chk == cvc5.pythonic.unsat:\n", "            return False\n\t        if chk == cvc5.pythonic.unknown:\n\t            util.write_time(str(self._s.reason_unknown()) + '\\n')\n\t            return False\n\t        self._result = self._s.model()\n\t        self._objective = 0\n\t        return True\n\t    def _IMPL_get_var(self, vv):\n\t        return bool(self._result[vv])\n\tclass ClingoFrontendSolver(SolverImpl):\n", "    def __init__(self):\n\t        util.check(available_clingo, 'clingo not available')\n\t        super().__init__(SOLVER_CLINGO_FE, True)\n\t        self._ctl_init()\n\t        self._curr_id = 0\n\t        self._soft_var_weights = {}\n\t    def _ctl_init(self):\n\t        args = ['--rand-freq=0.2', '--seed=0']\n\t        self._ctl = clingo.Control(args)\n\t    def _ctl_add_rule(self, rule):\n", "        self._ctl.add('base', [], rule)\n\t    def _ctl_ground(self):\n\t        self._ctl.ground([('base', [])])\n\t    def _ctl_solve(self, on_model):\n\t        self._ctl.solve(on_model=on_model)\n\t    def _help_new_soft_var(self, weight):\n\t        weight_func = 'soft%d' % weight\n\t        if weight in self._soft_var_weights:\n\t            util.check(self._soft_var_weights[weight] == weight_func, 'weight and weight_func mismatch')\n\t        else:\n", "            self._soft_var_weights[weight] = weight_func\n\t        self._curr_id += 1\n\t        soft_var = '%s(%d)' % (weight_func, self._curr_id)\n\t        self._ctl_add_rule('0{ %s }1.' % soft_var)\n\t        return soft_var\n\t    def _help_new_var(self):\n\t        self._curr_id += 1\n\t        new_var = 'var(%d)' % self._curr_id\n\t        self._ctl_add_rule('0{ %s }1.' % new_var)\n\t        return new_var\n", "    def _IMPL_negate_var_conj(self, ll):\n\t        return 'not %s' % ll\n\t    def _IMPL_make_var(self):\n\t        return self._help_new_var()\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n\t            return lls[0]\n\t        else:\n\t            conj_var = self._help_new_var()\n\t            for ll in lls:\n", "                self._ctl_add_rule('%s :- %s.' % (ll, conj_var))\n\t            self._ctl_add_rule('%s :- %s.' % (conj_var, ','.join(lls)))\n\t            return conj_var\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls, weight):\n\t        soft_var = []\n\t        if weight is not None:\n\t            soft_var = [self._help_new_soft_var(weight)]\n\t        self._ctl_add_rule('%s :- %s.' % (';'.join(out_lls + soft_var), in_ll))\n\t    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        soft_var_body = None\n", "        def get_soft_var_body():\n\t            nonlocal soft_var_body\n\t            if soft_var_body is None:\n\t                if weight is None:\n\t                    soft_var_body = ''\n\t                else:\n\t                    soft_var_body = ' :- not %s' % self._help_new_soft_var(weight)\n\t            return soft_var_body\n\t        if len(lls) == 0:\n\t            pass\n", "        elif len(lls) == 1:\n\t            if lo == 0 and hi == 1:\n\t                pass\n\t            elif lo == 0 and hi == 0:\n\t                self._ctl_add_rule('not %s%s.' % (lls[0], get_soft_var_body()))\n\t            elif lo == 1 and hi == 1:\n\t                self._ctl_add_rule('%s%s.' % (lls[0], get_soft_var_body()))\n\t            else:\n\t                util.check(False, 'count vars')\n\t        else:\n", "            lo_str = ''\n\t            if lo > 0:\n\t                lo_str = str(lo)\n\t            hi_str = ''\n\t            if hi < len(lls):\n\t                hi_str = str(hi)\n\t            if lo_str != '' or hi_str != '':\n\t                self._ctl_add_rule('%s{ %s }%s%s.' % (lo_str, ';'.join(lls), hi_str, get_soft_var_body()))\n\t    def _IMPL_solve(self):\n\t        def on_model(_m):\n", "            util.write_time('.')\n\t            if len(_m.cost) == 0:\n\t                self._objective = 0\n\t            else:\n\t                util.check(len(_m.cost) == 1, 'cost length')\n\t                self._objective = _m.cost[0]\n\t            self._result = {}\n\t            for symbol in _m.symbols(atoms=True):\n\t                self._result[str(symbol)] = None\n\t        for weight, weight_func in self._soft_var_weights.items():\n", "            self._ctl_add_rule('#minimize{ %d, ID : %s(ID) }.' % (weight, weight_func))\n\t        self._ctl_ground()\n\t        self._ctl_solve(on_model)\n\t        util.write_time('\\n')\n\t        return self._result is not None\n\t    def _IMPL_get_var(self, vv):\n\t        return vv in self._result\n\tclass ClingoBackendSolver(SolverImpl):\n\t    def __init__(self):\n\t        util.check(available_clingo, 'clingo not available')\n", "        super().__init__(SOLVER_CLINGO_BE, True)\n\t        self._ctl = clingo.Control()\n\t        self._all_atoms = []\n\t    def _help_new_var(self, be):\n\t        ret = be.add_atom()\n\t        self._all_atoms.append(ret)\n\t        be.add_rule([ret], choice=True)\n\t        return ret\n\t    def _IMPL_negate_var_conj_for_implies_out(self, ll):\n\t        # TODO: is there a better way to get negative literals in the head of a rule?\n", "        with self._ctl.backend() as be:\n\t            opp_ll = self._help_new_var(be)\n\t            # one is true, one is false\n\t            be.add_rule([], [ll, opp_ll])\n\t            be.add_rule([], [-ll, -opp_ll])\n\t            return opp_ll\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        return -ll\n\t    def _IMPL_make_var(self):\n\t        with self._ctl.backend() as be:\n", "            return self._help_new_var(be)\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n\t            return lls[0]\n\t        else:\n\t            with self._ctl.backend() as be:\n\t                conj_var = self._help_new_var(be)\n\t                for ll in lls:\n\t                    be.add_rule([], [-ll, conj_var])\n\t                be.add_rule([conj_var], lls)\n", "                return conj_var\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls, weight):\n\t        with self._ctl.backend() as be:\n\t            soft_var = []\n\t            if weight is not None:\n\t                soft_var = [self._help_new_var(be)]\n\t            be.add_rule(out_lls + soft_var, [in_ll])\n\t            if len(soft_var) != 0:\n\t                util.check(len(soft_var) == 1, 'soft var')\n\t                be.add_minimize(1, [(soft_var[0], weight)])\n", "    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        with self._ctl.backend() as be:\n\t            soft_var = None\n\t            def get_soft_var():\n\t                nonlocal soft_var\n\t                if soft_var is None:\n\t                    if weight is None:\n\t                        soft_var = []\n\t                    else:\n\t                        soft_var = [self._help_new_var(be)]\n", "                        be.add_minimize(1, [(soft_var[0], weight)])\n\t                return soft_var\n\t            if len(lls) == 0:\n\t                pass\n\t            elif len(lls) == 1:\n\t                if lo == 0 and hi == 1:\n\t                    pass\n\t                elif lo == 0 and hi == 0:\n\t                    be.add_rule(get_soft_var(), [lls[0]])\n\t                elif lo == 1 and hi == 1:\n", "                    be.add_rule(get_soft_var(), [-lls[0]])\n\t                else:\n\t                    util.check(False, 'count vars')\n\t            else:\n\t                if lo == 0:\n\t                    pass\n\t                elif lo == 1:\n\t                    be.add_rule(get_soft_var(), [-ll for ll in lls])\n\t                else:\n\t                    be.add_weight_rule(get_soft_var(), len(lls) + 1 - lo, [(-ll, 1) for ll in lls])\n", "                if hi < len(lls):\n\t                    be.add_weight_rule(get_soft_var(), hi + 1, [(ll, 1) for ll in lls])\n\t    def _IMPL_solve(self):\n\t        def on_model(_m):\n\t            util.write_time('.')\n\t            if len(_m.cost) == 0:\n\t                self._objective = 0\n\t            else:\n\t                util.check(len(_m.cost) == 1, 'cost length')\n\t                self._objective = _m.cost[0]\n", "            self._result = {}\n\t            for atom in self._all_atoms:\n\t                if _m.is_true(atom):\n\t                    self._result[atom] = None\n\t        self._ctl.solve(on_model=on_model)\n\t        util.write_time('\\n')\n\t        return self._result is not None\n\t    def _IMPL_get_var(self, vv):\n\t        return vv in self._result\n\tclass PySatSolverMiniCard(SolverImpl):\n", "    def __init__(self):\n\t        util.check(available_pysat, 'pysat not available')\n\t        super().__init__(SOLVER_PYSAT_MC, False)\n\t        self._s = pysat.solvers.Solver(name='mc')\n\t        self._curr_id = 0\n\t    def _next_var(self):\n\t        self._curr_id += 1\n\t        return self._curr_id\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        return -ll\n", "    def _IMPL_make_var(self):\n\t        return self._next_var()\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n\t            return lls[0]\n\t        else:\n\t            conj_var = self._next_var()\n\t            for ll in lls:\n\t                self._s.add_clause([-conj_var, ll]) # ... conj_var -> A ll\n\t            self._s.add_clause([-ll for ll in lls] + [conj_var]) # A lls -> conj_var\n", "            return conj_var\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls):\n\t        self._s.add_clause([-in_ll] + out_lls)\n\t    def _IMPL_cnstr_count(self, lls, lo, hi):\n\t        if len(lls) == 0:\n\t            pass\n\t        elif len(lls) == 1:\n\t            if lo == 0 and hi == 1:\n\t                pass\n\t            elif lo == 0 and hi == 0:\n", "                self._s.add_clause([-lls[0]])\n\t            elif lo == 1 and hi == 1:\n\t                self._s.add_clause([lls[0]])\n\t            else:\n\t                util.check(False, 'count vars')\n\t        else:\n\t            if lo == 0:\n\t                pass\n\t            elif lo == 1:\n\t                self._s.add_clause(lls)\n", "            else:\n\t                self._s.add_atmost([-ll for ll in lls], len(lls) - lo)\n\t            if hi < len(lls):\n\t                self._s.add_atmost(lls, hi)\n\t    def _IMPL_solve(self):\n\t        if not self._s.solve():\n\t            return False\n\t        self._result = self._s.get_model()\n\t        self._objective = 0\n\t        return True\n", "    def _IMPL_get_var(self, vv):\n\t        return self._result[vv - 1] > 0\n\tclass _PySatSolverWeighted(SolverImpl):\n\t    def __init__(self, solver_id, solver_option):\n\t        util.check(available_pysat, 'pysat not available')\n\t        util.check(solver_option in [PYSAT_OPTION_CARD, PYSAT_OPTION_BOOLONLY], 'invalid option for solver: ' + solver_option)\n\t        super().__init__(solver_id, True)\n\t        self._option = solver_option\n\t        if self._option == PYSAT_OPTION_CARD:\n\t            self._wcnf = pysat.formula.WCNFPlus()\n", "        else:\n\t            self._wcnf = pysat.formula.WCNF()\n\t        self._curr_id = 0\n\t    def _help_get_args_dict(self):\n\t        args_dict = {}\n\t        if self._option == PYSAT_OPTION_CARD:\n\t            args_dict['solver'] = 'minicard'\n\t        return args_dict\n\t    def _next_var(self):\n\t        self._curr_id += 1\n", "        return self._curr_id\n\t    def _IMPL_negate_var_conj(self, ll):\n\t        return -ll\n\t    def _IMPL_make_var(self):\n\t        return self._next_var()\n\t    def _IMPL_make_conj(self, lls):\n\t        if len(lls) == 1:\n\t            return lls[0]\n\t        else:\n\t            conj_var = self._next_var()\n", "            for ll in lls:\n\t                self._wcnf.append([-conj_var, ll]) # ... conj_var -> A ll\n\t            self._wcnf.append([-ll for ll in lls] + [conj_var]) # A lls -> conj_var\n\t            return conj_var\n\t    def _IMPL_cnstr_implies_disj(self, in_ll, out_lls, weight):\n\t        self._wcnf.append([-in_ll] + out_lls, weight=weight)\n\t    def _IMPL_cnstr_count(self, lls, lo, hi, weight):\n\t        if len(lls) == 0:\n\t            pass\n\t        elif len(lls) == 1:\n", "            if lo == 0 and hi == 1:\n\t                pass\n\t            elif lo == 0 and hi == 0:\n\t                self._wcnf.append([-lls[0]], weight=weight)\n\t            elif lo == 1 and hi == 1:\n\t                self._wcnf.append([lls[0]], weight=weight)\n\t            else:\n\t                util.check(False, 'count vars')\n\t        else:\n\t            if self._option == PYSAT_OPTION_CARD and weight is None: # PySat currently only supports hard cardinality constraints\n", "                if lo == 0:\n\t                    pass\n\t                elif lo == 1:\n\t                    self._wcnf.append(lls)\n\t                else:\n\t                    self._wcnf.append([[-ll for ll in lls], len(lls) - lo], is_atmost=True)\n\t                if hi < len(lls):\n\t                    self._wcnf.append([lls, hi], is_atmost=True)\n\t            else:\n\t                label_var_cls = []\n", "                if lo == 0:\n\t                    pass\n\t                elif lo == 1:\n\t                    self._wcnf.append(lls, weight=weight)\n\t                else:\n\t                    if weight is not None and len(label_var_cls) == 0:\n\t                        label_var_cls = [self._next_var()]\n\t                    cnf = pysat.card.CardEnc.atleast(lits=lls, bound=lo, top_id=self._curr_id, encoding=PYSAT_ENCODING)\n\t                    for cls in cnf:\n\t                        self._wcnf.append(cls + label_var_cls)\n", "                        self._curr_id = max(self._curr_id, max(cls))\n\t                if hi < len(lls):\n\t                    if weight is not None and len(label_var_cls) == 0:\n\t                        label_var_cls = [self._next_var()]\n\t                    cnf = pysat.card.CardEnc.atmost(lits=lls, bound=hi, top_id=self._curr_id, encoding=PYSAT_ENCODING)\n\t                    for cls in cnf:\n\t                        self._wcnf.append(cls + label_var_cls)\n\t                        self._curr_id = max(self._curr_id, max(cls))\n\t                for label_var in label_var_cls:\n\t                    self._wcnf.append([-label_var], weight=weight)\n", "    def _IMPL_solve(self):\n\t        model, cost = self._do_solve()\n\t        if not model:\n\t            return False\n\t        self._result = model\n\t        self._objective = cost\n\t        return True\n\t    def _IMPL_get_var(self, vv):\n\t        return self._result[vv - 1] > 0\n\tclass _PySatSolverFM(_PySatSolverWeighted):\n", "    def __init__(self, solver_id, solver_option):\n\t        super().__init__(solver_id, solver_option)\n\t    def _do_solve(self):\n\t        fm = pysat.examples.fm.FM(self._wcnf, **self._help_get_args_dict())\n\t        if fm.compute():\n\t            return fm.model, fm.cost\n\t        return None, None\n\tclass PySatSolverFM(_PySatSolverFM):\n\t    def __init__(self):\n\t        super().__init__(SOLVER_PYSAT_FM, PYSAT_OPTION_CARD)\n", "class PySatSolverFMBoolOnly(_PySatSolverFM):\n\t    def __init__(self):\n\t        super().__init__(SOLVER_PYSAT_FM_BOOL, PYSAT_OPTION_BOOLONLY)\n\tclass _PySatSolverRC2(_PySatSolverWeighted):\n\t    def __init__(self, solver_id, solver_option):\n\t        super().__init__(solver_id, solver_option)\n\t    def _do_solve(self):\n\t        with pysat.examples.rc2.RC2(self._wcnf, **self._help_get_args_dict()) as rc2:\n\t            for m in rc2.enumerate():\n\t                return list(m), rc2.cost\n", "        return None, None\n\tclass PySatSolverRC2(_PySatSolverRC2):\n\t    def __init__(self):\n\t        super().__init__(SOLVER_PYSAT_RC2, PYSAT_OPTION_CARD)\n\tclass PySatSolverRC2BoolOnly(_PySatSolverRC2):\n\t    def __init__(self):\n\t        super().__init__(SOLVER_PYSAT_RC2_BOOL, PYSAT_OPTION_BOOLONLY)\n"]}
{"filename": "util_graph.py", "chunked_list": ["import sys\n\timport util\n\timport networkx as nx\n\tATTR_LABEL     = 'label'\n\tATTR_POSITION  = 'pos'\n\tATTR_HIGHLIGHT = 'highlight'\n\tGTYPE_UTREE    = 'utree'\n\tGTYPE_DTREE    = 'dtree'\n\tGTYPE_DAG      = 'dag'\n\tGTYPE_UGRAPH   = 'ugraph'\n", "GTYPE_LIST     = [GTYPE_UTREE, GTYPE_DTREE, GTYPE_DAG, GTYPE_UGRAPH]\n\tLABEL_GRID_EAST  = 'e'\n\tLABEL_GRID_SOUTH = 's'\n\tDIR_FRA        = 'fra'\n\tDIR_TIL        = 'til'\n\tclass Graphs:\n\t    def __init__(self):\n\t        self.gtype = None\n\t        self.colors = {}\n\t        self.graphs = []\n", "class GraphDesc:\n\t    def __init__(self):\n\t        self.gtype = None\n\t        self.colors = {}\n\t        self.node_labels = {}\n\t        self.edge_labels = {}\n\t        self.node_label_count = {}\n\t        self.node_label_neighbors = {}\n\tdef gtype_directed(gtype):\n\t    if gtype in [GTYPE_DTREE, GTYPE_DAG]:\n", "        return True\n\t    elif gtype in [GTYPE_UTREE, GTYPE_UGRAPH]:\n\t        return False\n\t    else:\n\t        util.check(False, 'Unknown gtype ' + str(gtype))\n\tdef gtype_tree(gtype):\n\t    if gtype in [GTYPE_UTREE, GTYPE_DTREE]:\n\t        return True\n\t    elif gtype in [GTYPE_DAG, GTYPE_UGRAPH]:\n\t        return False\n", "    else:\n\t        util.check(False, 'Unknown gtype ' + str(gtype))\n\tdef check_graph(gr, gtype):\n\t    util.check(len(gr.nodes) > 0, 'no nodes')\n\t    if gtype_directed(gtype):\n\t        util.check(nx.is_weakly_connected(gr), 'not connected')\n\t    else:\n\t        util.check(nx.is_connected(gr), 'not connected')\n\t    if gtype_tree(gtype):\n\t        util.check(nx.is_tree(gr), 'not a tree')\n", "    if gtype_directed(gtype):\n\t        util.check(nx.is_directed_acyclic_graph(gr), 'not dag')\n\tdef nodes_and_labels(gr):\n\t    return [(node, gr.nodes[node][ATTR_LABEL]) for node in gr.nodes]\n\tdef edges_and_labels(gr):\n\t    return [(edge[0], edge[1], gr.edges[edge][ATTR_LABEL]) for edge in gr.edges]\n\tdef read_graphs(filenames):\n\t    grs = Graphs()\n\t    grs.gtype = None\n\t    grs.colors = {}\n", "    grs.graphs = []\n\t    colors_warned = {}\n\t    for filename in filenames:\n\t        gr = None\n\t        with util.openz(filename, 'rt') as infile:\n\t            for line in infile:\n\t                if '#' in line:\n\t                    line = line[:line.find('#')]\n\t                line = line.strip()\n\t                if len(line) == 0:\n", "                    continue\n\t                splt = line.split()\n\t                if splt[0] == 't':\n\t                    util.check(len(splt) == 2, 'splt len')\n\t                    util.check(splt[1] in GTYPE_LIST, 'gtype')\n\t                    if grs.gtype is None:\n\t                        grs.gtype = splt[1]\n\t                    else:\n\t                        util.check(splt[1] == grs.gtype, 'gtype mismatch')\n\t                    util.check(gr is None, 'mutliple t')\n", "                    if gtype_directed(grs.gtype):\n\t                        gr = nx.DiGraph()\n\t                    else:\n\t                        gr = nx.Graph()\n\t                elif splt[0] == 'n':\n\t                    util.check(len(splt) in [2, 3], 'splt len')\n\t                    node = splt[1]\n\t                    util.check(not gr.has_node(node), 'no duplicate nodes')\n\t                    gr.add_node(node)\n\t                    if len(splt) == 3:\n", "                        gr.nodes[node][ATTR_LABEL] = splt[2]\n\t                    else:\n\t                        gr.nodes[node][ATTR_LABEL] = ''\n\t                elif splt[0] == 'e':\n\t                    util.check(len(splt) in [3, 4], 'splt len')\n\t                    fra, til = splt[1], splt[2]\n\t                    util.check(fra != til, 'no self edges')\n\t                    util.check(not gr.has_edge(fra, til), 'no duplicate edges')\n\t                    gr.add_edge(fra, til)\n\t                    if len(splt) == 4:\n", "                        gr.edges[(fra, til)][ATTR_LABEL] = splt[3]\n\t                    else:\n\t                        gr.edges[(fra, til)][ATTR_LABEL] = ''\n\t                elif splt[0] == 'c':\n\t                    util.check(len(splt) == 3, 'splt len')\n\t                    label = splt[1]\n\t                    color = splt[2]\n\t                    if label not in grs.colors:\n\t                        grs.colors[label] = color\n\t                    elif grs.colors[label] != color and label not in colors_warned:\n", "                        print('WARNING: multiple colors for same label', label)\n\t                        colors_warned[label] = None\n\t                elif splt[0] == 'p':\n\t                    util.check(len(splt) == 4, 'splt len')\n\t                    node = splt[1]\n\t                    xx = int(splt[2])\n\t                    yy = int(splt[3])\n\t                    gr.nodes[node][ATTR_POSITION] = (xx, yy)\n\t                elif splt[0] == 'h':\n\t                    util.check(len(splt) == 2, 'splt len')\n", "                    node = splt[1]\n\t                    gr.nodes[node][ATTR_HIGHLIGHT] = True\n\t                else:\n\t                    util.check(False, 'line: ' + line)\n\t        if gr is not None:\n\t            check_graph(gr, grs.gtype)\n\t            grs.graphs.append(gr)\n\t    util.check(len(grs.graphs) != 0, 'no graphs loaded')\n\t    return grs\n\tdef write_graph(grs, out):\n", "    util.check(len(grs.graphs) == 1, 'can only write single graph')\n\t    gr = grs.graphs[0]\n\t    out.write(f't {grs.gtype}\\n')\n\t    for label, color in grs.colors.items():\n\t        out.write(f'c {label} {color}\\n')\n\t    for node, label in nodes_and_labels(gr):\n\t        if label == '':\n\t            out.write(f'n {node}\\n')\n\t        else:\n\t            out.write(f'n {node} {label}\\n')\n", "    for fra, til, label in edges_and_labels(gr):\n\t        if label == '':\n\t            out.write(f'e {fra} {til}\\n')\n\t        else:\n\t            out.write(f'e {fra} {til} {label}\\n')\n\t    for node in gr.nodes:\n\t        if ATTR_POSITION in gr.nodes[node]:\n\t            xx, yy = gr.nodes[node][ATTR_POSITION]\n\t            out.write(f'p {node} {xx} {yy}\\n')\n\t    for node in gr.nodes:\n", "        if ATTR_HIGHLIGHT in gr.nodes[node]:\n\t            out.write(f'h {node}\\n')\n\tdef write_graph_dot(grs, out):\n\t    if gtype_directed(grs.gtype):\n\t        dtype = 'digraph'\n\t        dedge = '->'\n\t    else:\n\t        dtype = 'graph'\n\t        dedge = '--'\n\t    out.write(f'{dtype} G {{\\n')\n", "    out.write(f'  node [shape=\"circle\" fontsize=\"24\" width=\"0.5\" height=\"0.5\" fixedsize=\"true\"]\\n')\n\t    out.write(f'  edge [fontsize=\"20\"]\\n')\n\t    for gg, gr in enumerate(grs.graphs):\n\t        if len(grs.graphs) > 1:\n\t            nodeprefix = f'{gg}-'\n\t        else:\n\t            nodeprefix = ''\n\t        for node, label in nodes_and_labels(gr):\n\t            attrs = ''\n\t            if label == '':\n", "                attrs += f'label=\"\"'\n\t            else:\n\t                attrs += f'label=\"{label}\"'\n\t            if len(label) > 1:\n\t                fontsize = max(6, 24 - 2.5 * (len(label) - 1))\n\t                attrs += f' fontsize=\"{fontsize}\"'\n\t            if label in grs.colors:\n\t                attrs += f' style=\"filled\" fillcolor=\"#{grs.colors[label]}\"'\n\t            else:\n\t                attrs += f' style=\"filled\" fillcolor=\"#eeeeee\"'\n", "            if ATTR_POSITION in gr.nodes[node]:\n\t                xx, yy = gr.nodes[node][ATTR_POSITION]\n\t                attrs += f' pos=\"{xx},{yy}!\"'\n\t            if ATTR_HIGHLIGHT in gr.nodes[node]:\n\t                attrs += f' shape=\"doublecircle\"'\n\t            out.write(f'  \"{nodeprefix}{node}\" [{attrs}]\\n')\n\t        for fra, til, label in edges_and_labels(gr):\n\t            attrs = ''\n\t            if label == '':\n\t                attrs += f'label=\"\"'\n", "            else:\n\t                attrs += f'label=\"{label}\"'\n\t            if len(label) > 1:\n\t                fontsize = max(6, 24 - 2.5 * (len(label) - 1))\n\t                attrs += f' fontsize=\"{fontsize}\"'\n\t            out.write(f'  \"{nodeprefix}{fra}\" {dedge} \"{nodeprefix}{til}\" [{attrs}]\\n')\n\t    out.write('}\\n')\n\tdef write_graph_to_file(grs, filename):\n\t    if filename is None:\n\t        write_graph(grs, sys.stdout)\n", "    else:\n\t        with util.openz(filename, 'wt') as outfile:\n\t            if util.fileistype(filename, '.dot'):\n\t                write_graph_dot(grs, outfile)\n\t            else:\n\t                write_graph(grs, outfile)\n\tdef layout_grid(gr):\n\t    roots = [nn for nn, dd in gr.in_degree() if dd == 0]\n\t    util.check(len(roots) == 1, 'grid does not have 1 root')\n\t    root = roots[0]\n", "    used_pos = {}\n\t    queue = [root]\n\t    gr.nodes[root][ATTR_POSITION] = (0, 0)\n\t    used_pos[(0, 0)] = root\n\t    while len(queue) != 0:\n\t        node = queue[0]\n\t        queue = queue[1:]\n\t        out_edges = gr.out_edges(node)\n\t        pos = gr.nodes[node][ATTR_POSITION]\n\t        for out_edge in out_edges:\n", "            out_node = out_edge[1]\n\t            if gr.edges[out_edge][ATTR_LABEL] == LABEL_GRID_EAST:\n\t                out_pos = (pos[0] + 1, pos[1])\n\t            elif gr.edges[out_edge][ATTR_LABEL] == LABEL_GRID_SOUTH:\n\t                out_pos = (pos[0], pos[1] - 1)\n\t            else:\n\t                util.check(False, 'grid edge label')\n\t            if ATTR_POSITION in gr.nodes[out_node]:\n\t                util.check(gr.nodes[out_node][ATTR_POSITION] == out_pos, 'different positions found')\n\t            else:\n", "                util.check(out_pos not in used_pos, 'duplicate pos')\n\t                gr.nodes[out_node][ATTR_POSITION] = out_pos\n\t                used_pos[out_pos] = out_node\n\t                queue.append(out_node)\n"]}
{"filename": "tile2graph.py", "chunked_list": ["import argparse, os, shutil, pickle, sys\n\timport util, util_graph\n\timport networkx as nx\n\tdef tiles2graph(tile_info, text_labels):\n\t    util.check(len(tile_info.levels) == 1, 'only handles one tile level')\n\t    if text_labels:\n\t        util.check(tile_info.tileset.tile_to_text, 'no text')\n\t    tile_level = tile_info.levels[0].tiles\n\t    rows = len(tile_level)\n\t    cols = len(tile_level[0])\n", "    def nodeid(_rr, _cc):\n\t        return f'{_rr}-{_cc}'\n\t    gr = nx.DiGraph()\n\t    for rr in range(rows):\n\t        for cc in range(cols):\n\t            if text_labels:\n\t                node_label = tile_info.tileset.tile_to_text[tile_level[rr][cc]]\n\t            else:\n\t                node_label = tile_level[rr][cc]\n\t            gr.add_node(nodeid(rr, cc))\n", "            gr.nodes[nodeid(rr, cc)][util_graph.ATTR_LABEL] = node_label\n\t    for rr in range(rows):\n\t        for cc in range(cols):\n\t            if rr + 1 < rows:\n\t                gr.add_edge(nodeid(rr, cc), nodeid(rr + 1, cc))\n\t                gr.edges[(nodeid(rr, cc), nodeid(rr + 1, cc))][util_graph.ATTR_LABEL] = util_graph.LABEL_GRID_SOUTH\n\t            if cc + 1 < cols:\n\t                gr.add_edge(nodeid(rr, cc), nodeid(rr, cc + 1))\n\t                gr.edges[(nodeid(rr, cc), nodeid(rr, cc + 1))][util_graph.ATTR_LABEL] = util_graph.LABEL_GRID_EAST\n\t    gtype = util_graph.GTYPE_DAG\n", "    util_graph.check_graph(gr, gtype)\n\t    grs = util_graph.Graphs()\n\t    grs.gtype = gtype\n\t    grs.colors = {}\n\t    grs.graphs = [gr]\n\t    return grs\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Generate tiles from level and/or image.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output tile file.')\n", "    parser.add_argument('--tilefile', required=True, type=str, help='Input tile file.')\n\t    parser.add_argument('--text-labels', action='store_true', help='Use tile text for labels.')\n\t    args = parser.parse_args()\n\t    with util.openz(args.tilefile, 'rb') as f:\n\t        tile_info = pickle.load(f)\n\t    ogrs = tiles2graph(tile_info, args.text_labels)\n\t    util_graph.write_graph_to_file(ogrs, args.outfile)\n"]}
{"filename": "scheme2output.py", "chunked_list": ["import argparse, pickle, random, sys, time\n\timport custom, generator, mkiii, reach, solvers, util\n\tWEIGHT_PATTERNS       = 10000\n\tWEIGHT_COUNTS         =     1\n\tCOUNTS_SCALE_HALF     = (0.5, 1.5)\n\tCOUNTS_SCALE_ZERO     = (0.0, 1e10)\n\tdef scheme2output(scheme_info, tag_level, game_level, solver, randomize, weight_patterns, weight_counts, counts_scale, reach_setup, mkiii_setup, custom_constraints, show_path_tiles):\n\t    si = scheme_info\n\t    rows = len(tag_level)\n\t    cols = len(tag_level[0])\n", "    for tag_row, game_row in zip(tag_level, game_level):\n\t        util.check(len(tag_row) == len(game_row) == cols, 'row length mismatch')\n\t        for tag, game in zip(tag_row, game_row):\n\t            util.check(game != util.VOID_TEXT, 'void game')\n\t            util.check(game in si.game_to_tag_to_tiles, 'unrecognized game ' + game)\n\t            util.check(tag == util.VOID_TEXT or tag in si.game_to_tag_to_tiles[game], 'unrecognized tag ' + tag + ' for game ' + game)\n\t    print('using solver', solver.get_id())\n\t    if mkiii_setup is not None:\n\t        gen = mkiii.GeneratorMKIII(solver, randomize, rows, cols, si, tag_level, game_level)\n\t    else:\n", "        gen = generator.Generator(solver, randomize, rows, cols, si, tag_level, game_level)\n\t    util.timer_section('add tile rules')\n\t    gen.add_rules_tiles()\n\t    if si.pattern_info is not None and weight_patterns != 0:\n\t        util.timer_section('add pattern rules')\n\t        gen.add_rules_patterns(weight_patterns)\n\t    if si.count_info is not None and weight_counts != 0:\n\t        util.timer_section('add count rules')\n\t        lo, hi = counts_scale\n\t        gen.add_rules_counts(False, lo, hi, weight_counts) # TODO? (si.tile_to_text is not None)\n", "    if reach_setup is not None:\n\t        util.timer_section('add reachability rules')\n\t        gen.add_rules_reachability(reach.get_reach_info(rows, cols, reach_setup, si))\n\t    if mkiii_setup is not None:\n\t        util.timer_section('add mkiii rules')\n\t        gen.add_rules_mkiii(mkiii.get_example_info(mkiii_setup))\n\t    if custom_constraints and len(custom_constraints) > 0:\n\t        util.timer_section('add custom')\n\t        for custom_constraint in custom_constraints:\n\t            custom_constraint.add(gen)\n", "    util.timer_section('solve')\n\t    result = None\n\t    if gen.solve():\n\t        util.timer_section('create output')\n\t        result = gen.get_result()\n\t        util.print_result_info(result, False)\n\t    util.timer_section(None)\n\t    return result\n\tif __name__ == '__main__':\n\t    util.timer_start()\n", "    parser = argparse.ArgumentParser(description='Create output from scheme.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output file (without extension, which will be added).')\n\t    parser.add_argument('--schemefile', required=True, type=str, help='Input scheme file.')\n\t    parser.add_argument('--tagfile', type=str, help='Input tag file.')\n\t    parser.add_argument('--gamefile', type=str, help='Input game file.')\n\t    parser.add_argument('--size', type=int, nargs=2, help='Level size (if no tag or game file provided.')\n\t    parser.add_argument('--randomize', type=int, help='Randomize based on given number.')\n\t    parser.add_argument('--show-path-tiles', action='store_true', help='Show path in tiles.')\n\t    parser.add_argument('--solver', type=str, nargs='+', choices=solvers.SOLVER_LIST, default=[solvers.SOLVER_PYSAT_RC2], help='Solver name, from: ' + ','.join(solvers.SOLVER_LIST) + '.')\n\t    parser.add_argument('--solver-portfolio-timeout', type=int, help='Force use of portfolio with given timeout (even for single solver).')\n", "    parser.add_argument('--soft-patterns', action='store_true', help='Make patterns soft constraints.')\n\t    parser.add_argument('--no-patterns', action='store_true', help='Don\\'t use pattern rules, even if present.')\n\t    parser.add_argument('--zero-counts', action='store_true', help='Only use counts to prevent tiles not occuring in region.')\n\t    parser.add_argument('--no-counts', action='store_true', help='Don\\'t use tile count rules, even if present.')\n\t    parser.add_argument('--reach-move', type=str, nargs='+', default=None, help='Use reachability move rules, from: ' + ','.join(reach.RMOVE_LIST) + '.')\n\t    parser.add_argument('--reach-wrap-cols', action='store_true', help='Wrap columns in reachability.')\n\t    parser.add_argument('--reach-goal', type=str, nargs='+', default=None, help='Use reachability goals, from: ' + ','.join(reach.RGOAL_DICT.keys()) + ', plus meta.')\n\t    parser.add_argument('--reach-open-zelda', action='store_true', help='Use Zelda open tiles.')\n\t    parser.add_argument('--mkiii-example', type=str, choices=mkiii.EXAMPLES, help='MKIII example name, from: ' + ','.join(mkiii.EXAMPLES) + '.')\n\t    parser.add_argument('--mkiii-layers', type=int, help='MKIII number of layers.')\n", "    parser.add_argument('--custom', type=str, nargs='+', action='append', help='Constraints on output, from: ' + ','.join(custom.CUST_LIST) + ', plus options.')\n\t    parser.add_argument('--compress', action='store_true', help='Compress output.')\n\t    parser.add_argument('--result-only', action='store_true', help='Only save result file.')\n\t    parser.add_argument('--quiet', action='store_true', help='Reduce output.')\n\t    args = parser.parse_args()\n\t    if args.quiet:\n\t        sys.stdout = open(os.devnull, 'w')\n\t    if len(args.solver) == 1 and not args.solver_portfolio_timeout:\n\t        solver = solvers.solver_id_to_solver(args.solver[0])\n\t    else:\n", "        solver = solvers.PortfolioSolver(args.solver, args.solver_portfolio_timeout)\n\t    with util.openz(args.schemefile, 'rb') as f:\n\t        scheme_info = pickle.load(f)\n\t    if args.size:\n\t        if args.tagfile or args.gamefile:\n\t            parser.error('cannot use --size with --tagfile or --gamefile')\n\t        tag_level = util.make_grid(args.size[0], args.size[1], util.DEFAULT_TEXT)\n\t        game_level = util.make_grid(args.size[0], args.size[1], util.DEFAULT_TEXT)\n\t    elif args.tagfile or args.gamefile:\n\t        if args.size:\n", "            parser.error('cannot use --size with --tagfile or --gamefile')\n\t        if args.tagfile and args.gamefile:\n\t            tag_level = util.read_text_level(args.tagfile)\n\t            game_level = util.read_text_level(args.gamefile)\n\t        elif args.tagfile:\n\t            tag_level = util.read_text_level(args.tagfile)\n\t            game_level = util.make_grid(len(tag_level), len(tag_level[0]), util.DEFAULT_TEXT)\n\t        elif args.gamefile:\n\t            game_level = util.read_text_level(args.gamefile)\n\t            tag_level = util.make_grid(len(game_level), len(game_level[0]), util.DEFAULT_TEXT)\n", "    else:\n\t        parser.error('must use --size, --tagfile or --gamefile')\n\t    reach_setup = None\n\t    if args.reach_move or args.reach_goal:\n\t        if not args.reach_move or not args.reach_goal:\n\t            parser.error('must use --reach-move and --reach-goal together')\n\t        reach_setup = util.ReachabilitySetup()\n\t        reach_setup.wrap_cols = False\n\t        reach_setup.open_text = util.OPEN_TEXT\n\t        reach_setup.game_to_move = util.arg_list_to_dict_options(parser, '--reach-move', args.reach_move, reach.RMOVE_LIST)\n", "        if args.reach_goal[0] not in reach.RGOAL_DICT:\n\t            parser.error('--reach-goal[0] must be in ' + ','.join(reach.RGOAL_DICT.key()))\n\t        reach_setup.goal_loc = args.reach_goal[0]\n\t        if len(args.reach_goal[1:]) != reach.RGOAL_DICT[reach_setup.goal_loc]:\n\t            parser.error('--reach-goal[1:] must be length ' + str(reach.RGOAL_DICT[reach_setup.goal_loc]))\n\t        reach_setup.goal_params = []\n\t        for rg in args.reach_goal[1:]:\n\t            if not rg.isnumeric():\n\t                parser.error('--reach-goal[1:] must all be integer')\n\t            reach_setup.goal_params.append(int(rg))\n", "    if args.reach_open_zelda:\n\t        if not reach_setup:\n\t            parser.error('cannot specify --reach-open-zelda without other reach args')\n\t        reach_setup.open_text = util.OPEN_TEXT_ZELDA\n\t    if args.reach_wrap_cols:\n\t        if not reach_setup:\n\t            parser.error('cannot specify --reach-wrap-cols without other reach args')\n\t        reach_setup.wrap_cols = True\n\t    mkiii_setup = None\n\t    if args.mkiii_example or args.mkiii_layers:\n", "        if not args.mkiii_example or not args.mkiii_layers:\n\t            parser.error('must use --mkiii-example and --mkiii-layers together')\n\t        mkiii_setup = mkiii.MKIIISetup()\n\t        mkiii_setup.example = args.mkiii_example\n\t        mkiii_setup.layers = args.mkiii_layers\n\t    custom_constraints = []\n\t    if args.custom:\n\t        for cust_args in args.custom:\n\t            custom_constraints.append(custom.args_to_custom(cust_args[0], cust_args[1:]))\n\t    if args.no_patterns:\n", "        weight_patterns = 0\n\t    elif args.soft_patterns:\n\t        weight_patterns = WEIGHT_PATTERNS\n\t    else:\n\t        weight_patterns = None\n\t    if args.no_counts:\n\t        weight_counts = 0\n\t    else:\n\t        weight_counts = WEIGHT_COUNTS\n\t    if args.zero_counts:\n", "        counts_scale = COUNTS_SCALE_ZERO\n\t    else:\n\t        counts_scale = COUNTS_SCALE_HALF\n\t    result_info = scheme2output(scheme_info, tag_level, game_level, solver, args.randomize, weight_patterns, weight_counts, counts_scale, reach_setup, mkiii_setup, custom_constraints, args.show_path_tiles)\n\t    if result_info:\n\t        util.save_result_info(result_info, args.outfile, args.compress, args.result_only)\n\t        util.exit_solution_found()\n\t    else:\n\t        util.exit_solution_not_found()\n"]}
{"filename": "graph2dot.py", "chunked_list": ["import argparse, itertools, json, random, sys, time\n\timport util, util_graph\n\timport networkx as nx\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Convert a dot file to a graph file.')\n\t    parser.add_argument('--outfile', type=str, help='Output file.')\n\t    parser.add_argument('--graphfile', required=True, nargs='+', type=str, help='Input graph file(s).')\n\t    parser.add_argument('--grid', action='store_true', help='Layout as grid.')\n\t    args = parser.parse_args()\n", "    grs = util_graph.read_graphs(args.graphfile)\n\t    if args.grid:\n\t        util_graph.layout_grid(grs.graphs[0])\n\t    if args.outfile is None:\n\t        util_graph.write_graph_dot(grs, sys.stdout)\n\t    else:\n\t        with util.openz(args.outfile, 'wt') as outfile:\n\t            util_graph.write_graph_dot(grs, outfile)\n"]}
{"filename": "file2file.py", "chunked_list": ["import argparse, base64, json, io, pickle, sys, time\n\timport util, util_explore\n\timport numpy as np\n\timport PIL.Image\n\tdef image2base64(image):\n\t    bytes_io = io.BytesIO()\n\t    util.fresh_image(image).save(bytes_io, 'png')\n\t    bytes_io.flush()\n\t    bytes_io.seek(0)\n\t    return base64.b64encode(bytes_io.read()).decode('ascii')\n", "def image2iid(image, iid_dict, image_list):\n\t    if id(image) not in iid_dict:\n\t        iid_dict[id(image)] = len(image_list)\n\t        image_list.append(image2base64(image))\n\t    return iid_dict[id(image)]\n\tdef dict2json(d, encode_val=None):\n\t    if encode_val is None:\n\t        encode_val = lambda x: x\n\t    return [(key, encode_val(val)) for key, val in d.items()]\n\tdef tileset2json(ts, encode_image):\n", "    ret = {}\n\t    ret['tile_ids'] = list(ts.tile_ids.keys())\n\t    ret['tile_to_text'] = dict2json(ts.tile_to_text)\n\t    ret['tile_to_image'] = dict2json(ts.tile_to_image, encode_image)\n\t    ret['tile_image_size'] = ts.tile_image_size\n\t    return ret\n\tdef tileinfo2json(ti, encode_image):\n\t    ret = {}\n\t    ret['tileset'] = tileset2json(ti.tileset, encode_image)\n\t    if ti.levels is None:\n", "        ret['levels'] = None\n\t    else:\n\t        ret['levels'] = [{'tiles': tli.tiles, 'tags': tli.tags, 'games': tli.games, 'meta': tli.meta} for tli in ti.levels]\n\t    return ret\n\tdef explore2json(ex, encode_image):\n\t    ret = {}\n\t    ret['rows'] = ex.rows\n\t    ret['cols'] = ex.cols\n\t    ret['tileset'] = tileset2json(ex.tileset, encode_image)\n\t    ret['ntind'] = ex.ntind\n", "    ret['neind'] = ex.neind\n\t    ret['npind'] = ex.npind\n\t    ret['void_tind'] = ex.void_tind\n\t    ret['tind_to_text'] = dict2json(ex.tind_to_text)\n\t    ret['tind_to_image'] = dict2json(ex.tind_to_image, encode_image)\n\t    ret['tinds_to_tile'] = dict2json(ex.tinds_to_tile)\n\t    ret['eind_to_edge'] = dict2json(ex.eind_to_edge)\n\t    ret['pind_to_prop'] = dict2json(ex.pind_to_prop)\n\t    ret['level_data'] = [base64.b64encode(level_data.tobytes()).decode('ascii') for level_data in ex.level_data]\n\t    return ret\n", "def wrap2json(what, encode):\n\t    iid_dict = {}\n\t    image_list = []\n\t    data = encode(what, lambda x: image2iid(x, iid_dict, image_list))\n\t    ret = {}\n\t    ret['image'] = image_list\n\t    ret['data'] = data\n\t    return ret\n\tdef base642image(st):\n\t    return util.fresh_image(PIL.Image.open(io.BytesIO(base64.b64decode(st))))\n", "def iid2image(iid, image_list):\n\t    return image_list[iid]\n\tdef json2dict(j, decode_key=None, decode_val=None):\n\t    if decode_key is None:\n\t        decode_key = lambda x: x\n\t    if decode_val is None:\n\t        decode_val = lambda x: x\n\t    return {decode_key(key): decode_val(val) for key, val in j}\n\tdef json2tileset(obj, decode_image):\n\t    ts = util.TileSetInfo()\n", "    ts.tile_ids = dict.fromkeys(obj['tile_ids'])\n\t    ts.tile_to_text = json2dict(obj['tile_to_text'])\n\t    ts.tile_to_image = json2dict(obj['tile_to_image'], decode_val=decode_image)\n\t    ts.tile_image_size = obj['tile_image_size']\n\t    return ts\n\tdef json2tileinfo(obj, decode_image):\n\t    ti = util.TileInfo()\n\t    ti.tileset = json2tileset(obj['tileset'], decode_image)\n\t    if obj['levels'] is None:\n\t        ti.levels = None\n", "    else:\n\t        ti.levels = []\n\t        for jtli in obj['levels']:\n\t            tli = util.TileLevelInfo()\n\t            tli.tiles = jtli['tiles']\n\t            tli.tags = jtli['tags']\n\t            tli.games = jtli['games']\n\t            tli.meta = [json.loads(json.dumps(entry)) for entry in jtli['meta']]\n\t            ti.levels.append(tli)\n\t    return ti\n", "def json2explore(obj, decode_image):\n\t    ex = util_explore.ExploreInfo()\n\t    ex.rows = obj['rows']\n\t    ex.cols = obj['cols']\n\t    ex.tileset = json2tileset(obj['tileset'], decode_image)\n\t    ex.ntind = obj['ntind']\n\t    ex.neind = obj['neind']\n\t    ex.npind = obj['npind']\n\t    ex.void_tind = obj['void_tind']\n\t    ex.tind_to_text = json2dict(obj['tind_to_text'])\n", "    ex.tind_to_image = json2dict(obj['tind_to_image'], decode_val=decode_image)\n\t    ex.tinds_to_tile = json2dict(obj['tinds_to_tile'], decode_key=tuple)\n\t    ex.eind_to_edge = json2dict(obj['eind_to_edge'], decode_val=tuple)\n\t    ex.pind_to_prop = json2dict(obj['pind_to_prop'])\n\t    ex.level_data = np.array([np.frombuffer(base64.b64decode(level_data), dtype=np.uint8) for level_data in obj['level_data']])\n\t    return ex\n\tdef json2wrap(obj, decode):\n\t    image_list = [base642image(img) for img in obj['image']]\n\t    return decode(obj['data'], lambda x: iid2image(x, image_list))\n\tif __name__ == '__main__':\n", "    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Convert files to/from json.')\n\t    parser.add_argument('--infile', required=True, type=str, help='Input file.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output file.')\n\t    args = parser.parse_args()\n\t    if util.fileistype(args.infile, '.explore') and util.fileistype(args.outfile, '.jexplore'):\n\t        with util.openz(args.infile, 'rb') as f:\n\t            ex = pickle.load(f)\n\t        with util.openz(args.outfile, 'wt') as f:\n\t            json.dump(wrap2json(ex, explore2json), f)\n", "            f.write('\\n')\n\t    elif util.fileistype(args.infile, '.jexplore') and util.fileistype(args.outfile, '.explore'):\n\t        with util.openz(args.infile, 'rt') as f:\n\t            ex = json2wrap(json.load(f), json2explore)\n\t        with util.openz(args.outfile, 'wb') as f:\n\t            pickle.dump(ex, f)\n\t    elif util.fileistype(args.infile, '.tile') and util.fileistype(args.outfile, '.jtile'):\n\t        with util.openz(args.infile, 'rb') as f:\n\t            ti = pickle.load(f)\n\t        with util.openz(args.outfile, 'wt') as f:\n", "            json.dump(wrap2json(ti, tileinfo2json), f)\n\t            f.write('\\n')\n\t    elif util.fileistype(args.infile, '.jtile') and util.fileistype(args.outfile, '.tile'):\n\t        with util.openz(args.infile, 'rt') as f:\n\t            ti = json2wrap(json.load(f), json2tileinfo)\n\t        with util.openz(args.outfile, 'wb') as f:\n\t            pickle.dump(ti, f)\n\t    else:\n\t        util.check(False, 'unrecognized conversion')\n"]}
{"filename": "solvers-test.py", "chunked_list": ["import os, sys\n\timport util, solvers\n\tif __name__ == '__main__':\n\t    if len(sys.argv) > 1:\n\t        solvers_to_test = sys.argv[1:]\n\t    else:\n\t        solvers_to_test = list(sorted(set(solvers.SOLVER_LIST) - set(solvers.SOLVER_NOTEST_LIST)))\n\t    os.environ['STG_MUTE_TIME'] = '1'\n\t    os.environ['STG_MUTE_PORT'] = '1'\n\t    tests = []\n", "    def setup(solver, wt, a, b):\n\t        solver.cnstr_count([a], False, 1, 1, wt)\n\t        solver.cnstr_implies_disj(a, False, [b], False, wt)\n\t    tests.append((2, setup, [False, False]))\n\t    def setup(solver, wt, a, b, c):\n\t        solver.cnstr_implies_disj(a, True, [b], True, wt)\n\t        solver.cnstr_implies_disj(b, True, [c], True, wt)\n\t        solver.cnstr_count([a, b, c], True, 2, 2, wt)\n\t    tests.append((3, setup, [False, True, True]))\n\t    def setup(solver, wt, a, b, c):\n", "        solver.cnstr_count([a, b, c], True, 3, 3, wt)\n\t    tests.append((3, setup, [True, True, True]))\n\t    def setup(solver, wt, a, b, c):\n\t        solver.cnstr_count([a, b, c], False, 3, 3, wt)\n\t    tests.append((3, setup, [False, False, False]))\n\t    def setup(solver, wt, a, b, c):\n\t        solver.cnstr_count([a, b], True, 1, 1, wt)\n\t        solver.cnstr_count([b], True, 0, 0, wt)\n\t        solver.cnstr_implies_disj(a, True, [b, c], True, wt)\n\t    tests.append((3, setup, [True, False, True]))\n", "    def setup(solver, wt, a, b, c):\n\t        d = solver.make_conj([a, b, c], [True, False, True])\n\t        solver.cnstr_count([d], True, 1, 1, wt)\n\t    tests.append((3, setup, [True, False, True]))\n\t    def setup(solver, wt, a, b, c):\n\t        d = solver.make_conj([a, b, c], False)\n\t        solver.cnstr_count([b], False, 1, 1, wt)\n\t        solver.cnstr_count([c], True, 0, 0, wt)\n\t        solver.cnstr_count([d], False, 1, 1, wt)\n\t    tests.append((3, setup, [True, False, False]))\n", "    def setup(solver, wt, a, b, c, d):\n\t        solver.cnstr_count([a, b, c, d], False, 3, 4, wt)\n\t        solver.cnstr_count([a], True, 1, 1, wt)\n\t    tests.append((4, setup, [True, False, False, False]))\n\t    def setup(solver, wt, a, b, c, d):\n\t        solver.cnstr_count([a, b], True, 1, 1, wt)\n\t        solver.cnstr_count([b], False, 1, 1, wt)\n\t        solver.cnstr_count([d], False, 1, 1, wt)\n\t        solver.cnstr_count([a, b, c, d], [True, True, False, False], 2, 2, wt)\n\t    tests.append((4, setup, [True, False, True, False]))\n", "    for solver_id in solvers_to_test:\n\t        for use_portfolio in [False, True]:\n\t            for use_weight in [None, 1]:\n\t                if solver_id in [solvers.SOLVER_CVC5, solvers.SOLVER_PYSAT_MC] and use_weight is not None:\n\t                    continue\n\t                print(solver_id, use_portfolio, use_weight)\n\t                for nvars, setup, expect in tests:\n\t                    print('.', end='')\n\t                    if use_portfolio:\n\t                        solver = solvers.PortfolioSolver([solver_id], None)\n", "                    else:\n\t                        solver = solvers.solver_id_to_solver(solver_id)\n\t                    vvs = [solver.make_var() for ii in range(nvars)]\n\t                    setup(solver, use_weight, *vvs)\n\t                    solver.solve()\n\t                    res = [solver.get_var(vv) for vv in vvs]\n\t                    util.check(res == expect, 'var')\n\t                    obj = solver.get_objective()\n\t                    util.check(obj == 0, 'objective')\n\t                print()\n"]}
{"filename": "input2tile.py", "chunked_list": ["import argparse, json, os, shutil, pickle, sys\n\timport PIL.Image\n\timport util\n\tTILE_OUTPUT_FOLDER = 'tiles'\n\tdef get_tile_key(tile_text, tile_image):\n\t    tile_key = ()\n\t    if tile_text is not None:\n\t        tile_key = tile_key + (tile_text,)\n\t    if tile_image is not None:\n\t        tile_key = tile_key + (tuple(tile_image.getdata()),)\n", "    return tile_key\n\tdef input2tiles(base_tile_info, text_levels, image_levels, tag_levels, games, paths, tile_image_size, no_levels, text_key_only, tile_output_folder):\n\t    tile_key_to_tile_id = {}\n\t    if base_tile_info is not None:\n\t        ts = base_tile_info.tileset\n\t        for tile in ts.tile_ids:\n\t            tile_text = ts.tile_to_text[tile] if ts.tile_to_text is not None else None\n\t            tile_image = ts.tile_to_image[tile] if ts.tile_to_image is not None else None\n\t            tile_key = get_tile_key(tile_text, tile_image if not text_key_only else None)\n\t            util.check(tile_key not in tile_key_to_tile_id, 'duplicate tile key in base tile info')\n", "            tile_key_to_tile_id[tile_key] = tile\n\t    else:\n\t        ts = util.TileSetInfo()\n\t        ts.tile_ids = {}\n\t        ts.tile_to_text = {} if text_levels else None\n\t        ts.tile_to_image = {} if image_levels else None\n\t        ts.tile_image_size = tile_image_size\n\t    ti = util.TileInfo()\n\t    ti.tileset = ts\n\t    if no_levels:\n", "        ti.levels = None\n\t    else:\n\t        ti.levels = []\n\t    if text_levels is not None:\n\t        level_count = len(text_levels)\n\t    elif image_levels is not None:\n\t        level_count = len(image_levels)\n\t    else:\n\t        util.check(False, 'text and image both missing')\n\t    if text_levels is not None:\n", "        util.check(len(text_levels) == level_count, 'need same number of levels')\n\t    else:\n\t        text_levels = [None] * level_count\n\t    if image_levels is not None:\n\t        util.check(len(image_levels) == level_count, 'need same number of levels')\n\t    else:\n\t        image_levels = [None] * level_count\n\t    if tag_levels is not None:\n\t        util.check(len(tag_levels) == level_count, 'need same number of levels')\n\t    else:\n", "        tag_levels = [None] * level_count\n\t    if games is not None:\n\t        util.check(len(games) == level_count, 'need same number of levels')\n\t    else:\n\t        games = [None] * level_count\n\t    if paths is not None:\n\t        util.check(len(paths) == level_count, 'need same number of levels')\n\t    else:\n\t        paths = [None] * level_count\n\t    for ii, (text_level_meta, image_level, tag_level, game, path) in enumerate(zip(text_levels, image_levels, tag_levels, games, paths)):\n", "        if text_level_meta is not None:\n\t            text_level, text_meta = text_level_meta\n\t            text_sz = (len(text_level), len(text_level[0]))\n\t        else:\n\t            text_level, text_meta = None, None\n\t            text_sz = None\n\t        if image_level is not None:\n\t            image_sz = image_level.size\n\t            if ts.tile_image_size is None:\n\t                util.check(text_sz is not None, 'need text level to determine tile image size')\n", "                tile_size_x = image_sz[0] / text_sz[1]\n\t                tile_size_y = image_sz[1] / text_sz[0]\n\t                util.check(tile_size_y == tile_size_x and tile_size_y == int(tile_size_y) and tile_size_x == int(tile_size_x), 'can\\'t determine tile image size')\n\t                ts.tile_image_size = int(tile_size_x)\n\t                print('Tile size set to', ts.tile_image_size)\n\t            util.check(image_sz[0] % ts.tile_image_size == 0 and image_sz[1] % ts.tile_image_size == 0, 'Image size not multiple of tile size')\n\t            image_sz = (image_sz[1] // ts.tile_image_size, image_sz[0] // ts.tile_image_size)\n\t        else:\n\t            image_sz = None\n\t        if text_sz and image_sz:\n", "            util.check(text_sz == image_sz, 'text and image size mismatch')\n\t            rows, cols = text_sz\n\t        elif text_sz:\n\t            rows, cols = text_sz\n\t        elif image_sz:\n\t            rows, cols = image_sz\n\t        else:\n\t            util.check(False, 'text and image both missing')\n\t        tile_level = []\n\t        for rr in range(rows):\n", "            tile_level_row = []\n\t            for cc in range(cols):\n\t                tile_text = None\n\t                tile_text_is_void = None\n\t                if text_level is not None:\n\t                    tile_text = text_level[rr][cc]\n\t                    tile_text_is_void = (tile_text == util.VOID_TEXT)\n\t                tile_image = None\n\t                tile_image_is_void = None\n\t                if image_level is not None:\n", "                    tile_image = util.fresh_image(image_level.crop((cc * ts.tile_image_size, rr * ts.tile_image_size, cc * ts.tile_image_size + ts.tile_image_size, rr * ts.tile_image_size + ts.tile_image_size)).convert('RGBA'))\n\t                    tile_image_is_void = (sum([ch for px in tile_image.getdata() for ch in px]) == 0)\n\t                if tile_text_is_void or tile_image_is_void:\n\t                    util.check(tile_text_is_void in [True, None], 'void')\n\t                    util.check(tile_image_is_void in [True, None], 'void')\n\t                    tile_id = util.VOID_TILE\n\t                else:\n\t                    tile_key = get_tile_key(tile_text, tile_image if not text_key_only else None)\n\t                    if tile_key not in tile_key_to_tile_id:\n\t                        if base_tile_info is not None:\n", "                            util.check(False, 'tile missing in base tile info')\n\t                        tile_id = len(ts.tile_ids)\n\t                        ts.tile_ids[tile_id] = None\n\t                        tile_key_to_tile_id[tile_key] = tile_id\n\t                        if tile_text:\n\t                            ts.tile_to_text[tile_id] = tile_text\n\t                        if tile_image:\n\t                            ts.tile_to_image[tile_id] = tile_image\n\t                    else:\n\t                        tile_id = tile_key_to_tile_id[tile_key]\n", "                tile_level_row.append(tile_id)\n\t            tile_level.append(tile_level_row)\n\t        if tag_level is None:\n\t            tag_level = util.make_grid(rows, cols, util.DEFAULT_TEXT)\n\t            for rr in range(rows):\n\t                for cc in range(cols):\n\t                    if tile_level[rr][cc] == util.VOID_TILE:\n\t                        tag_level[rr][cc] = util.VOID_TEXT\n\t        else:\n\t            util.check(len(tag_level) == rows, 'tile and tag level row count mismatch')\n", "            for rr in range(rows):\n\t                util.check(len(tag_level[rr]) == cols, 'row length mismatch')\n\t                for cc in range(cols):\n\t                    util.check((tile_level[rr][cc] == util.VOID_TILE) == (tag_level[rr][cc] == util.VOID_TEXT), 'void')\n\t        if game is None:\n\t            game_level = util.make_grid(rows, cols, util.DEFAULT_TEXT)\n\t        else:\n\t            util.check(type(game) == str and len(game) == 1, 'game')\n\t            game_level = util.make_grid(rows, cols, game)\n\t        if path is not None:\n", "            if text_meta is None:\n\t                text_meta = []\n\t            text_meta.insert(0, util.meta_path(path))\n\t        util.print_tile_level(tile_level)\n\t        print()\n\t        util.print_text_level(tag_level)\n\t        print()\n\t        util.print_text_level(game_level)\n\t        print()\n\t        if not no_levels:\n", "            tli = util.TileLevelInfo()\n\t            tli.tiles = tile_level\n\t            tli.tags = tag_level\n\t            tli.games = game_level\n\t            tli.meta = text_meta\n\t            ti.levels.append(tli)\n\t    if image_level and tile_output_folder:\n\t        print('saving image tiles')\n\t        if os.path.exists(tile_output_folder):\n\t            shutil.rmtree(tile_output_folder)\n", "        os.makedirs(tile_output_folder)\n\t        for tile, tile_image in ts.tile_to_image.items():\n\t            tile_filename = '%s/tile%04d.png' % (tile_output_folder, tile)\n\t            print(tile_filename)\n\t            tile_image.save(tile_filename)\n\t        print()\n\t    print('Found %d tiles' % len(ts.tile_ids))\n\t    return ti\n\tif __name__ == '__main__':\n\t    util.timer_start()\n", "    parser = argparse.ArgumentParser(description='Generate tiles from level and/or image.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output tile file.')\n\t    parser.add_argument('--basefile', type=str, help='Input base files containing all tiles.')\n\t    parser.add_argument('--textfile', type=str, nargs='+', help='Input text file(s).')\n\t    parser.add_argument('--imagefile', type=str, nargs='+', help='Input image file(s).')\n\t    parser.add_argument('--tagfile', type=str, nargs='+', help='Input tag level file(s).')\n\t    parser.add_argument('--game', type=str, nargs='+', help='Input game(s).')\n\t    parser.add_argument('--pathfile', type=str, nargs='+', help='Input path file(s).')\n\t    parser.add_argument('--tilesize', type=int, help='Size of tiles in image.')\n\t    parser.add_argument('--savetileimages', action='store_true', help='Save tile images.')\n", "    parser.add_argument('--text-key-only', action='store_true', help='Only use text when keying tiles.')\n\t    parser.add_argument('--no-levels', action='store_true', help='Don\\'t store levels with tiles.')\n\t    parser.add_argument('--quiet', action='store_true', help='Reduce output.')\n\t    args = parser.parse_args()\n\t    if args.quiet:\n\t        sys.stdout = open(os.devnull, 'w')\n\t    if not args.textfile and not args.imagefile:\n\t        parser.error('--textfile or --imagefile required')\n\t    if args.imagefile and not (args.textfile or args.tilesize):\n\t        parser.error('--imagefile requires --textfile or --tilesize')\n", "    if args.basefile is not None:\n\t        with util.openz(args.basefile, 'rb') as f:\n\t            base_tile_info = pickle.load(f)\n\t    else:\n\t        base_tile_info = None\n\t    if args.textfile is not None:\n\t        text_levels = [util.read_text_level(textfile, True) for textfile in args.textfile]\n\t    else:\n\t        text_levels = None\n\t    if args.imagefile is not None:\n", "        def open_and_load_image(fn):\n\t            with util.openz(fn, 'rb') as f:\n\t                img = PIL.Image.open(f)\n\t                img.load()\n\t                return img\n\t        image_levels = [open_and_load_image(imagefile) for imagefile in args.imagefile]\n\t    else:\n\t        image_levels = None\n\t    if args.tagfile is not None:\n\t        tag_levels = [util.read_text_level(tagfile) for tagfile in args.tagfile]\n", "    else:\n\t        tag_levels = None\n\t    if args.pathfile is not None:\n\t        def open_and_load_path(fn):\n\t            with util.openz(fn, 'rt') as f:\n\t                return [tuple(edge) for edge in json.load(f)]\n\t        paths = [open_and_load_path(pathfile) for pathfile in args.pathfile]\n\t    else:\n\t        paths = None\n\t    tile_info = input2tiles(base_tile_info, text_levels, image_levels, tag_levels, args.game, paths, args.tilesize,\n", "                            args.no_levels, args.text_key_only, TILE_OUTPUT_FOLDER if args.savetileimages else None)\n\t    with util.openz(args.outfile, 'wb') as f:\n\t        pickle.dump(tile_info, f)\n"]}
{"filename": "mkiii.py", "chunked_list": ["import generator, util\n\tEX_MKJR_WALK      = 'mkjr-walk'\n\tEX_MKJR_WALK_THRU = 'mkjr-walk-thru'\n\tEX_MKJR_MAZE      = 'mkjr-maze'\n\tEX_MKJR_MAZE_COIN = 'mkjr-maze-coin'\n\tEX_SOKO           = 'soko'\n\tEX_DOKU           = 'doku'\n\tEX_LOCK           = 'lock'\n\tEX_SLIDE          = 'slide'\n\tEX_FILL           = 'fill'\n", "EX_PLAT           = 'plat'\n\tEX_VVV            = 'vvv'\n\tEX_LINK           = 'link'\n\tEX_MATCH          = 'match'\n\tEXAMPLES = [EX_MKJR_WALK, EX_MKJR_WALK_THRU, EX_MKJR_MAZE, EX_MKJR_MAZE_COIN, EX_SOKO, EX_DOKU, EX_LOCK, EX_SLIDE, EX_FILL, EX_PLAT, EX_VVV, EX_LINK, EX_MATCH]\n\tDIR_NORTH     = [(-1,  0)]\n\tDIR_SOUTH     = [( 1,  0)]\n\tDIR_EAST      = [( 0,  1)]\n\tDIR_WEST      = [( 0, -1)]\n\tDIR_EASTWEST  = [( 0,  1), ( 0, -1)]\n", "DIR_SOUTHEAST = [( 1,  0), ( 0, 1)]\n\tDIR_ALL       = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\tDIR_NONE      = [(0, 0)]\n\tRR_GRP_CHOICE = 'RULE_CHOICE'\n\tRR_GRP_ALL    = 'RULE_ALL'\n\tRR_ORD_ONE = 'ONE'\n\tRR_ORD_SEQ = 'SEQ'\n\tRR_ORD_PRI = 'PRI'\n\tclass MKIIISetup:\n\t    def __init__(self):\n", "        self.example = None\n\t        self.layers = None\n\tclass MKIIIInfo:\n\t    def __init__(self):\n\t        self.states = None\n\t        self.rep_rules = None\n\t        self.rep_rule_names = None\n\t        self.rep_rule_order = None\n\t        self.use_term = None\n\t        self.custom = None\n", "        self.layers = None\n\t        self.extra_meta = []\n\tclass CustomInfo:\n\t    def __init__(self, solver, rng, vars_lrct, rows, cols, layers):\n\t        self.solver = solver\n\t        self.rng = rng\n\t        self.vars_lrct = vars_lrct\n\t        self.rows = rows\n\t        self.cols = cols\n\t        self.layers = layers\n", "def init_range(ci, chars, lo, hi):\n\t    vvs = []\n\t    for rr in range(ci.rows):\n\t        for cc in range(ci.cols):\n\t            for char in chars:\n\t                vvs.append(ci.vars_lrct[(0, rr, cc, char)])\n\t    ci.solver.cnstr_count(vvs, True, lo, hi, None)\n\tdef init_exact(ci, chars, amt):\n\t    init_range(ci, chars, amt, amt)\n\tdef init_points(ci, default, points):\n", "    for rr in range(ci.rows):\n\t        for cc in range(ci.cols):\n\t            if (rr, cc) in points:\n\t                st = points[(rr, cc)]\n\t            else:\n\t                st = default\n\t            ci.solver.cnstr_count([ci.vars_lrct[(0, rr, cc, st)]], True, 1, 1, None)\n\tdef init_dist_atleast(ci, char1, char2, dst):\n\t    for rr in range(ci.rows):\n\t        for cc in range(ci.cols):\n", "            for r2 in range(ci.rows):\n\t                for c2 in range(ci.cols):\n\t                    dstsq = (rr - r2) ** 2 + (cc - c2) ** 2\n\t                    if dstsq < dst * dst:\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, char1)], True, [ci.vars_lrct[(0, r2, c2, char2)]], False, None)\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, char2)], True, [ci.vars_lrct[(0, r2, c2, char1)]], False, None)\n\tdef init_dist_impl_nearby(ci, char1, chars2, dst):\n\t    for rr in range(ci.rows):\n\t        for cc in range(ci.cols):\n\t            vvs = []\n", "            for r2 in range(ci.rows):\n\t                for c2 in range(ci.cols):\n\t                    dstsq = (rr - r2) ** 2 + (cc - c2) ** 2\n\t                    if dstsq <= dst * dst + 0.001:\n\t                        for char2 in chars2:\n\t                            vvs.append(ci.vars_lrct[(0, r2, c2, char2)])\n\t            ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, char1)], True, vvs, True, None)\n\tdef full_range(ci, chars, lo, hi):\n\t    vvs = []\n\t    for ll in range(ci.layers):\n", "        for rr in range(ci.rows):\n\t            for cc in range(ci.cols):\n\t                for char in chars:\n\t                    vvs.append(ci.vars_lrct[(ll, rr, cc, char)])\n\t    ci.solver.cnstr_count(vvs, True, lo, hi, None)\n\tdef full_exact(ci, chars, amt):\n\t    full_range(ci, chars, amt, amt)\n\tdef full_norepeat(ci, char):\n\t    vvs = []\n\t    for ll in range(ci.layers - 1):\n", "        for rr in range(ci.rows):\n\t            for cc in range(ci.cols):\n\t                for l2 in range(ll + 1, ci.layers):\n\t                    ci.solver.cnstr_implies_disj(ci.vars_lrct[(ll, rr, cc, char)], True, [ci.vars_lrct[(l2, rr, cc, char)]], False, None)\n\tdef fini_range(ci, chars, lo, hi):\n\t    vvs = []\n\t    for rr in range(ci.rows):\n\t        for cc in range(ci.cols):\n\t            for char in chars:\n\t                vvs.append(ci.vars_lrct[(ci.layers - 1, rr, cc, char)])\n", "    ci.solver.cnstr_count(vvs, True, lo, hi, None)\n\tdef fini_exact(ci, chars, amt):\n\t    fini_range(ci, chars, amt, amt)\n\tdef init_implies(ci, char1, r1, c1, chars2, r2, c2):\n\t    v1 = ci.vars_lrct[(0, r1, c1, char1)]\n\t    if r2 < 0 or r2 >= ci.rows or c2 < 0 or c2 >= ci.cols:\n\t        pass\n\t    else:\n\t        vv2 = [ci.vars_lrct[(0, r2, c2, char2)] for char2 in chars2]\n\t        ci.solver.cnstr_implies_disj(v1, True, vv2, True, None)\n", "def fini_implies(ci, char1, r1, c1, chars2, r2, c2):\n\t    v1 = ci.vars_lrct[(ci.layers - 1, r1, c1, char1)]\n\t    if r2 < 0 or r2 >= ci.rows or c2 < 0 or c2 >= ci.cols:\n\t        ci.solver.cnstr_count([v1], True, 0, 0, None)\n\t    else:\n\t        vv2 = [ci.vars_lrct[(ci.layers - 1, r2, c2, char2)] for char2 in chars2]\n\t        ci.solver.cnstr_implies_disj(v1, True, vv2, True, None)\n\tdef get_example_info(mkiii_setup):\n\t    ei = MKIIIInfo()\n\t    ei.layers = mkiii_setup.layers\n", "    if mkiii_setup.example == EX_MKJR_WALK:\n\t        ei.states = 'X-*'\n\t        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_ALL, '*XX', '--*')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = False\n\t        def _custom(ci):\n\t            init_points(ci, 'X', {(1, 1): '*'})\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_MKJR_WALK_THRU:\n\t        ei.states = 'X-*$oO'\n", "        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_ALL, '*XX', '--*'), (DIR_ALL, '*X$', '--*'), (DIR_ALL, '*Xo', '--O')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # start in top-left\n\t            init_points(ci, 'X', {(1, 1): '*', (1, ci.cols - 2): '$', (ci.rows - 2, 1): '$', (ci.rows - 2, ci.cols - 2): 'o'})\n\t            # through collectibles to exit\n\t            fini_exact(ci, '$', 0)\n\t            fini_exact(ci, 'o', 0)\n\t        ei.custom = _custom\n", "    elif mkiii_setup.example == EX_MKJR_MAZE:\n\t        ei.states = 'X-~'\n\t        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_ALL, '-XX', '-~-')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = False\n\t        def _custom(ci):\n\t            # start in middle\n\t            init_points(ci, 'X', {(ci.rows // 2, ci.cols // 2): '-'})\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_MKJR_MAZE_COIN:\n", "        ei.states = 'X-~$@o'\n\t        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_ALL, '-XX', '-~-'), (DIR_ALL, '-XX', '-$-'), (DIR_ALL, '-XX', '-@-'), (DIR_ALL, '-XX', '-o-')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = False\n\t        def _custom(ci):\n\t            # start in middle\n\t            init_points(ci, 'X', {(ci.rows // 2, ci.cols // 2): '-'})\n\t            # placements\n\t            fini_range(ci, '$', 3, 5)\n\t            fini_exact(ci, '@', 1)\n", "            fini_exact(ci, 'o', 1)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_SOKO:\n\t        ei.states = 'X-@#oO'\n\t        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_ALL, '@-', '-@'), (DIR_ALL, '@#-', '-@#'), (DIR_ALL, '@#o', '-@O')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # start\n\t            init_exact(ci, '@', 1)\n", "            init_exact(ci, '#', 2)\n\t            init_exact(ci, 'o', 2)\n\t            # border\n\t            for rr in range(ci.rows):\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, rr, 0, 'X')]], True, 1, 1, None)\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, rr, ci.cols - 1, 'X')]], True, 1, 1, None)\n\t            for cc in range(ci.cols):\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, 0, cc, 'X')]], True, 1, 1, None)\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 1, cc, 'X')]], True, 1, 1, None)\n\t            # distances\n", "            init_dist_atleast(ci, '#', 'o', 2)\n\t            # clear around boxes\n\t            for rr in range(ci.rows):\n\t                for cc in range(ci.cols):\n\t                    for r2 in range(1, ci.rows - 1):\n\t                        if rr == r2:\n\t                            continue\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, '#')], True, [ci.vars_lrct[(0, r2, cc, 'o')]], False, None)\n\t                    for c2 in range(1, ci.cols - 1):\n\t                        if cc == c2:\n", "                            continue\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, '#')], True, [ci.vars_lrct[(0, rr, c2, 'o')]], False, None)\n\t            # all boxes cleared at end\n\t            fini_exact(ci, '#', 0)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_DOKU:\n\t        ei.states = '-123456789'\n\t        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_NONE, '-', '1'), (DIR_NONE, '-', '2'), (DIR_NONE, '-', '3'),\n\t                                         (DIR_NONE, '-', '4'), (DIR_NONE, '-', '5'), (DIR_NONE, '-', '6'),\n\t                                         (DIR_NONE, '-', '7'), (DIR_NONE, '-', '8'), (DIR_NONE, '-', '9')])]\n", "        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = False\n\t        ei.extra_meta.append(util.meta_rect('level', [(0, 0, 3, 3), (0, 3, 3, 6), (0, 6, 3, 9), (3, 0, 6, 3), (3, 3, 6, 6), (3, 6, 6, 9), (6, 0, 9, 3), (6, 3, 9, 6), (6, 6, 9, 9)]))\n\t        def _custom(ci):\n\t            # check size\n\t            util.check(ci.rows == 9, 'doku size')\n\t            util.check(ci.cols == 9, 'doku size')\n\t            # start\n\t            init_range(ci, '-', ci.layers - 1, ci.layers - 1)\n\t            # symmetric\n", "            for rr in range(ci.rows):\n\t                for cc in range(ci.cols):\n\t                    ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, '-')], True, [ci.vars_lrct[(0, ci.rows - 1 - rr, ci.cols - 1 - cc, '-')]], True, None)\n\t            # extra layer vars\n\t            vars_layer_cant = {}\n\t            for ll in range(ci.layers - 1):\n\t                vars_layer_cant[ll] = {}\n\t                for ss in '123456789':\n\t                    for rr in range(ci.rows):\n\t                        for cc in range(ci.cols):\n", "                            vars_layer_cant[ll][(rr, cc, ss)] = ci.solver.make_var()\n\t                for ss in '123456789':\n\t                    for rr in range(ci.rows):\n\t                        for cc in range(ci.cols):\n\t                            cant_vvs = []\n\t                            for r2 in range(ci.rows):\n\t                                if rr != r2:\n\t                                    cant_vvs.append(ci.vars_lrct[(ll, r2, cc, ss)])\n\t                            for c2 in range(ci.cols):\n\t                                if cc != c2:\n", "                                    cant_vvs.append(ci.vars_lrct[(ll, rr, c2, ss)])\n\t                            ci.solver.cnstr_implies_disj(vars_layer_cant[ll][(rr, cc, ss)], True, cant_vvs, True, None)\n\t            vars_layer_must = {}\n\t            for ll in range(ci.layers - 1):\n\t                vars_layer_must[ll] = {}\n\t                for ss in '123456789':\n\t                    for rr in range(ci.rows):\n\t                        for cc in range(ci.cols):\n\t                            box_cant = []\n\t                            for br in range(3):\n", "                                for bc in range(3):\n\t                                    r2 = (rr // 3) * 3 + br\n\t                                    c2 = (cc // 3) * 3 + bc\n\t                                    if (rr, cc) != (r2, c2):\n\t                                        box_cant.append(vars_layer_cant[ll][(r2, c2, ss)])\n\t                            box_cant_conj = ci.solver.make_conj(box_cant, True)\n\t                            vars_layer_must[ll][(rr, cc, ss)] = box_cant_conj\n\t            for ll in range(ci.layers - 1):\n\t                for ss in '123456789':\n\t                    for rr in range(ci.rows):\n", "                        for cc in range(ci.cols):\n\t                            changes = ci.solver.make_conj([ci.vars_lrct[(ll, rr, cc, '-')], ci.vars_lrct[(ll + 1, rr, cc, ss)]], True)\n\t                            ci.solver.cnstr_implies_disj(changes, True, [vars_layer_must[ll][(rr, cc, ss)]], True, None)\n\t            # partially filled then filled at end\n\t            for ll in range(ci.layers):\n\t                lo = 1 if ll + 1 == ci.layers else 0\n\t                for ss in '123456789':\n\t                    for rr in range(ci.rows):\n\t                        vars_rc = []\n\t                        for cc in range(ci.cols):\n", "                            vars_rc.append(ci.vars_lrct[(ll, rr, cc, ss)])\n\t                        ci.solver.cnstr_count(vars_rc, True, lo, 1, None)\n\t                    for cc in range(ci.cols):\n\t                        vars_rc = []\n\t                        for rr in range(ci.rows):\n\t                            vars_rc.append(ci.vars_lrct[(ll, rr, cc, ss)])\n\t                        ci.solver.cnstr_count(vars_rc, True, lo, 1, None)\n\t                    for br in range(ci.rows // 3):\n\t                        for bc in range(ci.cols // 3):\n\t                            vars_rc = []\n", "                            for ir in range(3):\n\t                                for ic in range(3):\n\t                                    vars_rc.append(ci.vars_lrct[(ll, br * 3 + ir, bc * 3 + ic, ss)])\n\t                            ci.solver.cnstr_count(vars_rc, True, lo, 1, None)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_LOCK:\n\t        rep_rules_player = (RR_GRP_CHOICE, [(DIR_ALL, '@-', '-@'), (DIR_ALL, '&-', '-&'), (DIR_ALL, '@%', '-&'), (DIR_ALL, '&:', '@-'), (DIR_ALL, '@~', '~@'), (DIR_ALL, '@o', '~O')])\n\t        rep_rules_enemy = (RR_GRP_ALL, [(DIR_ALL, '+--@', '-+-@'), (DIR_ALL, '+-@', '-+@'), (DIR_ALL, '+@', '-+'),\n\t                                         (DIR_ALL, '+--&', '-+-&'), (DIR_ALL, '+-&', '-+&'), (DIR_ALL, '+&', '-+')])\n\t        ei.states = 'X-~@%:&oO+'\n", "        ei.rep_rules = [rep_rules_player, rep_rules_enemy]\n\t        ei.rep_rule_names = ['player', 'enemy']\n\t        ei.rep_rule_order = RR_ORD_SEQ\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # one start/goal\n\t            init_exact(ci, '@', 1)\n\t            init_exact(ci, 'o', 1)\n\t            # key/door/enemy\n\t            init_exact(ci, '%', 1)\n", "            init_exact(ci, ':', 1)\n\t            init_exact(ci, '+', 2)\n\t            # setup\n\t            init_range(ci, 'X', 0, ci.rows * ci.cols // 2)\n\t            init_dist_impl_nearby(ci, '+', '%:@', 2)\n\t            for rr in range(ci.rows):\n\t                for cc in range(ci.cols):\n\t                    ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, '+')], True, [ci.vars_lrct[(ci.layers - 1, rr, cc, '+')]], False, None)\n\t            # goal reached at end\n\t            fini_exact(ci, 'o', 0)\n", "        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_SLIDE:\n\t        ei.states = 'X-@^v><oOabc()[]'\n\t        ei.rep_rules = [\n\t            (RR_GRP_CHOICE, [\n\t                (DIR_NONE, '@', '@'),\n\t                (DIR_NORTH, '@-', '-^'), (DIR_SOUTH, '@-', '-v'), (DIR_EAST, '@-', '->'), (DIR_WEST, '@-', '-<'),\n\t                (DIR_NORTH, '@o', '-O'), (DIR_SOUTH, '@o', '-O'), (DIR_EAST, '@o', '-O'), (DIR_WEST, '@o', '-O'),\n\t                (DIR_NORTH, '^o', '-O'), (DIR_SOUTH, 'vo', '-O'), (DIR_EAST, '>o', '-O'), (DIR_WEST, '<o', '-O'),\n\t                (DIR_NORTH, '^a', '-a'), (DIR_SOUTH, 'va', '-a'), (DIR_EAST, '>a', '-a'), (DIR_WEST, '<a', '-a'),\n", "                (DIR_NORTH, '^b', '-b'), (DIR_SOUTH, 'vb', '-b'), (DIR_EAST, '>b', '-b'), (DIR_WEST, '<b', '-b'),\n\t                (DIR_NORTH, '^c', '-c'), (DIR_SOUTH, 'vc', '-c'), (DIR_EAST, '>c', '-c'), (DIR_WEST, '<c', '-c'),\n\t                (DIR_NORTH, '^-', '-^'), (DIR_SOUTH, 'v-', '-v'), (DIR_EAST, '>-', '->'), (DIR_WEST, '<-', '-<'),\n\t                (DIR_NORTH, '^X', '@X'), (DIR_SOUTH, 'vX', '@X'), (DIR_EAST, '>X', '@X'), (DIR_WEST, '<X', '@X')]),\n\t             (RR_GRP_ALL, [(DIR_NONE, 'a', 'b'), (DIR_NONE, 'b', 'c'), (DIR_NONE, 'c', 'a'), # only one turret so no rules on those collisions; turret/goal?\n\t                            (DIR_NORTH, 'a-', 'b('), (DIR_SOUTH, 'a-', 'b)'), (DIR_EAST, 'a-', 'b]'), (DIR_WEST, 'a-', 'b['),\n\t                            (DIR_NORTH, 'a@', 'b('), (DIR_SOUTH, 'a@', 'b)'), (DIR_EAST, 'a@', 'b]'), (DIR_WEST, 'a@', 'b['),\n\t                            (DIR_NORTH, 'a^', 'b('), (DIR_SOUTH, 'a^', 'b)'), (DIR_EAST, 'a^', 'b]'), (DIR_WEST, 'a^', 'b['),\n\t                            (DIR_NORTH, 'av', 'b('), (DIR_SOUTH, 'av', 'b)'), (DIR_EAST, 'av', 'b]'), (DIR_WEST, 'av', 'b['),\n\t                            (DIR_NORTH, 'a>', 'b('), (DIR_SOUTH, 'a>', 'b)'), (DIR_EAST, 'a>', 'b]'), (DIR_WEST, 'a>', 'b['),\n", "                            (DIR_NORTH, 'a<', 'b('), (DIR_SOUTH, 'a<', 'b)'), (DIR_EAST, 'a<', 'b]'), (DIR_WEST, 'a<', 'b['),\n\t                            (DIR_NORTH, '(-', '-('), (DIR_SOUTH, ')-', '-)'), (DIR_EAST, ']-', '-]'), (DIR_WEST, '[-', '-['),\n\t                            (DIR_NORTH, '(@', '-('), (DIR_SOUTH, ')@', '-)'), (DIR_EAST, ']@', '-]'), (DIR_WEST, '[@', '-['),\n\t                            (DIR_NORTH, '(^', '-('), (DIR_SOUTH, ')^', '-)'), (DIR_EAST, ']^', '-]'), (DIR_WEST, '[^', '-['),\n\t                            (DIR_NORTH, '(v', '-('), (DIR_SOUTH, ')v', '-)'), (DIR_EAST, ']v', '-]'), (DIR_WEST, '[v', '-['),\n\t                            (DIR_NORTH, '(>', '-('), (DIR_SOUTH, ')>', '-)'), (DIR_EAST, ']>', '-]'), (DIR_WEST, '[>', '-['),\n\t                            (DIR_NORTH, '(<', '-('), (DIR_SOUTH, ')<', '-)'), (DIR_EAST, ']<', '-]'), (DIR_WEST, '[<', '-['),\n\t                            (DIR_NORTH, '(X', '-X'), (DIR_SOUTH, ')X', '-X'), (DIR_EAST, ']X', '-X'), (DIR_WEST, '[X', '-X')])]\n\t        ei.rep_rule_names = ['player', 'enemy']\n\t        ei.rep_rule_order = RR_ORD_SEQ\n", "        ei.use_term = True\n\t        def _custom(ci):\n\t            # start/goal/turret\n\t            init_exact(ci, '@', 1)\n\t            init_exact(ci, 'a', 1)\n\t            init_exact(ci, 'o', 1)\n\t            # start and goal in opposite corners\n\t            CSIZE = 3\n\t            start_vvs_rem = []\n\t            start_vvs_00 = []\n", "            start_vvs_01 = []\n\t            start_vvs_10 = []\n\t            start_vvs_11 = []\n\t            goal_vvs_rem = []\n\t            goal_vvs_00 = []\n\t            goal_vvs_01 = []\n\t            goal_vvs_10 = []\n\t            goal_vvs_11 = []\n\t            for rr in range(CSIZE):\n\t                for cc in range(CSIZE):\n", "                    start_vvs_rem.append(ci.vars_lrct[(0, rr, cc, '@')])\n\t                    goal_vvs_rem.append(ci.vars_lrct[(0, rr, cc, 'o')])\n\t            for rr in range(CSIZE):\n\t                for cc in range(CSIZE):\n\t                    start_vvs_00.append(ci.vars_lrct[(0, rr, cc, '@')])\n\t                    goal_vvs_00.append(ci.vars_lrct[(0, rr, cc, 'o')])\n\t            for rr in range(CSIZE):\n\t                for cc in range(ci.cols - CSIZE, ci.cols):\n\t                    start_vvs_01.append(ci.vars_lrct[(0, rr, cc, '@')])\n\t                    goal_vvs_01.append(ci.vars_lrct[(0, rr, cc, 'o')])\n", "            for rr in range(ci.rows - CSIZE, ci.rows):\n\t                for cc in range(CSIZE):\n\t                    start_vvs_10.append(ci.vars_lrct[(0, rr, cc, '@')])\n\t                    goal_vvs_10.append(ci.vars_lrct[(0, rr, cc, 'o')])\n\t            for rr in range(ci.rows - CSIZE, ci.rows):\n\t                for cc in range(ci.cols - CSIZE, ci.cols):\n\t                    start_vvs_11.append(ci.vars_lrct[(0, rr, cc, '@')])\n\t                    goal_vvs_11.append(ci.vars_lrct[(0, rr, cc, 'o')])\n\t            start_vvs_rem = sorted(list(set(start_vvs_rem) - set(start_vvs_00) - set(start_vvs_01) - set(start_vvs_10) - set(start_vvs_11)))\n\t            ci.solver.cnstr_count(start_vvs_00 + start_vvs_01 + start_vvs_10 + start_vvs_11, True, 1, 1, None)\n", "            ci.solver.cnstr_count(start_vvs_rem, True, 0, 0, None)\n\t            goal_vvs_rem = sorted(list(set(goal_vvs_rem) - set(goal_vvs_00) - set(goal_vvs_01) - set(goal_vvs_10) - set(goal_vvs_11)))\n\t            ci.solver.cnstr_count(goal_vvs_00 + goal_vvs_01 + goal_vvs_10 + goal_vvs_11, True, 1, 1, None)\n\t            ci.solver.cnstr_count(goal_vvs_rem, True, 0, 0, None)\n\t            for start_vv in start_vvs_00:\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_11, True, None)\n\t            for start_vv in start_vvs_01:\n", "                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_10, True, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_11, False, None)\n\t            for start_vv in start_vvs_10:\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_01, True, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_11, False, None)\n\t            for start_vv in start_vvs_11:\n", "                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_00, True, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(start_vv, True, goal_vvs_11, False, None)\n\t            for goal_vv in goal_vvs_00:\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_11, True, None)\n\t            for goal_vv in goal_vvs_01:\n", "                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_10, True, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_11, False, None)\n\t            for goal_vv in goal_vvs_10:\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_00, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_01, True, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_11, False, None)\n\t            for goal_vv in goal_vvs_11:\n", "                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_00, True, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_01, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_10, False, None)\n\t                ci.solver.cnstr_implies_disj(goal_vv, True, start_vvs_11, False, None)\n\t            # turret in middle\n\t            turret_rows = range(ci.rows // 3, 2 * ci.rows // 3)\n\t            turret_cols = range(ci.cols // 3, 2 * ci.cols // 3)\n\t            vvs = []\n\t            for rr in turret_rows:\n\t                for cc in turret_cols:\n", "                    vvs.append(ci.vars_lrct[(0, rr, cc, 'a')])\n\t            ci.solver.cnstr_count(vvs, True, 1, 1, None)\n\t            # clear around turrets\n\t            for rr in range(ci.rows):\n\t                for cc in range(ci.cols):\n\t                    for r2 in range(1, ci.rows - 1):\n\t                        if rr == r2:\n\t                            continue\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, 'a')], True, [ci.vars_lrct[(0, r2, cc, '-')]], True, None)\n\t                    for c2 in range(1, ci.cols - 1):\n", "                        if cc == c2:\n\t                            continue\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, 'a')], True, [ci.vars_lrct[(0, rr, c2, '-')]], True, None)\n\t            # bump along side walls\n\t            vvs = []\n\t            for rr in turret_rows:\n\t                vvs.append(ci.vars_lrct[(0, rr, 1, 'X')])\n\t            ci.solver.cnstr_count(vvs, True, 1, 1, None)\n\t            vvs = []\n\t            for rr in turret_rows:\n", "                vvs.append(ci.vars_lrct[(0, rr, ci.cols - 2, 'X')])\n\t            ci.solver.cnstr_count(vvs, True, 1, 1, None)\n\t            vvs = []\n\t            for cc in turret_cols:\n\t                vvs.append(ci.vars_lrct[(0, 1, cc, 'X')])\n\t            ci.solver.cnstr_count(vvs, True, 1, 1, None)\n\t            vvs = []\n\t            for cc in turret_cols:\n\t                vvs.append(ci.vars_lrct[(0, ci.rows - 2, cc, 'X')])\n\t            ci.solver.cnstr_count(vvs, True, 1, 1, None)\n", "            # goal reached at end\n\t            fini_exact(ci, 'o', 0)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_FILL:\n\t        ei.states = 'X-~@^v><'\n\t        ei.rep_rules = [\n\t            (RR_GRP_CHOICE, [\n\t                (DIR_NORTH, '@-', '~^'), (DIR_SOUTH, '@-', '~v'), (DIR_EAST, '@-', '~>'), (DIR_WEST, '@-', '~<'),\n\t                (DIR_NORTH, '@~', '~^'), (DIR_SOUTH, '@~', '~v'), (DIR_EAST, '@~', '~>'), (DIR_WEST, '@~', '~<'),\n\t                (DIR_NORTH, '^-', '~^'), (DIR_SOUTH, 'v-', '~v'), (DIR_EAST, '>-', '~>'), (DIR_WEST, '<-', '~<'),\n", "                (DIR_NORTH, '^~', '~^'), (DIR_SOUTH, 'v~', '~v'), (DIR_EAST, '>~', '~>'), (DIR_WEST, '<~', '~<'),\n\t                (DIR_NORTH, '^X', '@X'), (DIR_SOUTH, 'vX', '@X'), (DIR_EAST, '>X', '@X'), (DIR_WEST, '<X', '@X')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # start\n\t            init_exact(ci, '@', 1)\n\t            init_range(ci, '-', (ci.rows - 2) * (ci.cols - 2) // 3, ci.rows * ci.cols)\n\t            init_range(ci, '~', 0, 0)\n\t            # border\n", "            for rr in range(ci.rows):\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, rr, 0, 'X')]], True, 1, 1, None)\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, rr, ci.cols - 1, 'X')]], True, 1, 1, None)\n\t            for cc in range(ci.cols):\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, 0, cc, 'X')]], True, 1, 1, None)\n\t                ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 1, cc, 'X')]], True, 1, 1, None)\n\t            # filled\n\t            fini_exact(ci, '-', 0)\n\t            fini_exact(ci, '@', 1)\n\t        ei.custom = _custom\n", "    elif mkiii_setup.example == EX_PLAT:\n\t        ei.states = 'X-@12oO+?'\n\t        ei.rep_rules = [(RR_GRP_CHOICE,\n\t                         [(DIR_EASTWEST, '@-', '-@'), (DIR_NONE, '@', '@'), (DIR_EASTWEST, '@o', '-O'), (DIR_NORTH, 'X@', 'X2'),\n\t                          (DIR_EASTWEST, '1-', '-1'), (DIR_NONE, '1', '1'),\n\t                          (DIR_EASTWEST, '2-', '-2'), (DIR_NONE, '2', '2')]),\n\t                        (RR_GRP_ALL,\n\t                         [(DIR_WEST, '+-', '-+'), (DIR_WEST, '+@', '-+'), (DIR_WEST, '+2', '-+'), (DIR_WEST, '+1', '-+')]),\n\t                        (RR_GRP_ALL, # TODO: what about enemy above player? '-@+'\n\t                         [(DIR_NORTH, '-+', '+-'), (DIR_NORTH, '@+', '+-'),\n", "                          (DIR_NORTH, 'X@', 'X@'), (DIR_NORTH, '+@', '@-'), (DIR_NORTH, '-@', '@-'),\n\t                          (DIR_NORTH, '2-', '-1'), (DIR_NORTH, '2X', '@X'), (DIR_NORTH, '2?', '@X'),\n\t                          (DIR_NORTH, '1-', '-@'), (DIR_NORTH, '1X', '@X'), (DIR_NORTH, '1?', '@X')])]\n\t        ei.rep_rule_names = ['player', 'enemy', 'physics']\n\t        ei.rep_rule_order = RR_ORD_SEQ\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # start/goal placement\n\t            ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 2, 0, '@')]], True, 1, 1, None)\n\t            ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 2, ci.cols - 1, 'o')]], True, 1, 1, None)\n", "            # one start/goal\n\t            init_exact(ci, '@', 1)\n\t            init_exact(ci, 'o', 1)\n\t            init_exact(ci, '?', 1)\n\t            init_exact(ci, '+', 2)\n\t            # goal reached at end\n\t            fini_exact(ci, 'o', 0)\n\t            fini_exact(ci, '?', 0)\n\t            fini_exact(ci, '+', 0)\n\t        ei.custom = _custom\n", "    elif mkiii_setup.example == EX_VVV:\n\t        ei.states = 'X-^v+()oO'\n\t        ei.rep_rules = [(RR_GRP_CHOICE,\n\t                         [(DIR_SOUTH, 'vX', '^X'), (DIR_NONE, 'v', 'v'), (DIR_EASTWEST, 'v-', '-v'), (DIR_EASTWEST, 'vo', '-O'),\n\t                          (DIR_NORTH, '^X', 'vX'), (DIR_NONE, '^', '^'), (DIR_EASTWEST, '^-', '-^'), (DIR_EASTWEST, '^o', '-O')]),\n\t                        (RR_GRP_ALL,\n\t                         [(DIR_EAST, ')-', '-)'), (DIR_EAST, ')X', '(X'), (DIR_EAST, ')v', '-)'), (DIR_EAST, ')^', '-)'),\n\t                          (DIR_WEST, '(-', '-('), (DIR_WEST, '(X', ')X'), (DIR_WEST, '(v', '-('), (DIR_WEST, '(^', '-('),\n\t                          (DIR_EAST, ')(', '()')]),\n\t                        (RR_GRP_ALL,\n", "                         [(DIR_SOUTH, 'v-', '-v'), (DIR_SOUTH, 'vo', '-O'), (DIR_SOUTH, 'v(', '-('), (DIR_SOUTH, 'v)', '-)'), (DIR_SOUTH, 'v+', '-+'),\n\t                          (DIR_NORTH, '^-', '-^'), (DIR_NORTH, '^o', '-O'), (DIR_NORTH, '^)', '-)'), (DIR_NORTH, '^)', '-)'), (DIR_NORTH, '^+', '-+')])]\n\t        ei.rep_rule_names = ['player', 'enemy', 'physics']\n\t        ei.rep_rule_order = RR_ORD_SEQ\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            # start/goal placement\n\t            ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 2, 1, 'v')]], True, 1, 1, None)\n\t            ci.solver.cnstr_count([ci.vars_lrct[(0, ci.rows - 2, ci.cols - 2, 'o')]], True, 1, 1, None)\n\t            # one start/goal\n", "            init_exact(ci, 'v', 1)\n\t            init_exact(ci, 'o', 1)\n\t            # turrets / solid\n\t            init_exact(ci, '()', 2)\n\t            init_range(ci, '+', 4, ci.cols)\n\t            # goal reached at end\n\t            fini_exact(ci, 'o', 0)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_LINK:\n\t        ei.states = '─│┐┘└┌X'\n", "        ei.rep_rules = [(RR_GRP_CHOICE, [(DIR_NONE, '─', '│'), (DIR_NONE, '│', '─'), (DIR_NONE, '┐', '┘'), (DIR_NONE, '┘', '└'), (DIR_NONE, '└', '┌'), (DIR_NONE, '┌', '┐')])]\n\t        ei.rep_rule_order = RR_ORD_ONE\n\t        ei.use_term = True\n\t        def _custom(ci):\n\t            init_range(ci, '─', 1, 10)\n\t            init_range(ci, '│', 1, 10)\n\t            init_range(ci, 'X', max(1, ci.rows * ci.rows // 10), ci.rows * ci.rows // 2)\n\t            # disconnected at start\n\t            rows_order = list(range(ci.rows))\n\t            cols_order = list(range(ci.cols))\n", "            if ci.rng:\n\t                ci.rng.shuffle(rows_order)\n\t                ci.rng.shuffle(cols_order)\n\t            ind = 0\n\t            for rr in rows_order:\n\t                for cc in cols_order:\n\t                    ind += 1\n\t                    if ind % 4 == 0:\n\t                        ci.solver.cnstr_count([ci.vars_lrct[(0, rr, cc, ss)] for ss in '─│┐┘└┌'], True, 1, 1, None)\n\t                        init_implies(ci, '─', rr, cc, '┐┘│X', rr, cc - 1)\n", "                        init_implies(ci, '─', rr, cc, '└┌│X', rr, cc + 1)\n\t                        init_implies(ci, '│', rr, cc, '┘└─X', rr - 1, cc)\n\t                        init_implies(ci, '│', rr, cc, '┌┐─X', rr + 1, cc)\n\t                        init_implies(ci, '┐', rr, cc, '┐┘│X', rr, cc - 1)\n\t                        init_implies(ci, '┐', rr, cc, '┌┐─X', rr + 1, cc)\n\t                        init_implies(ci, '┘', rr, cc, '┐┘│X', rr, cc - 1)\n\t                        init_implies(ci, '┘', rr, cc, '┘└─X', rr - 1, cc)\n\t                        init_implies(ci, '└', rr, cc, '└┌│X', rr, cc + 1)\n\t                        init_implies(ci, '└', rr, cc, '┘└─X', rr - 1, cc)\n\t                        init_implies(ci, '┌', rr, cc, '└┌│X', rr, cc + 1)\n", "                        init_implies(ci, '┌', rr, cc, '┌┐─X', rr + 1, cc)\n\t            # connected at end\n\t            for rr in range(ci.rows):\n\t                for cc in range(ci.cols):\n\t                    fini_implies(ci, '─', rr, cc, '└┌─', rr, cc - 1)\n\t                    fini_implies(ci, '─', rr, cc, '┐┘─', rr, cc + 1)\n\t                    fini_implies(ci, '│', rr, cc, '┘└│', rr + 1, cc)\n\t                    fini_implies(ci, '│', rr, cc, '┌┐│', rr - 1, cc)\n\t                    fini_implies(ci, '┐', rr, cc, '└┌─', rr, cc - 1)\n\t                    fini_implies(ci, '┐', rr, cc, '┘└│', rr + 1, cc)\n", "                    fini_implies(ci, '┘', rr, cc, '└┌─', rr, cc - 1)\n\t                    fini_implies(ci, '┘', rr, cc, '┌┐│', rr - 1, cc)\n\t                    fini_implies(ci, '└', rr, cc, '┐┘─', rr, cc + 1)\n\t                    fini_implies(ci, '└', rr, cc, '┌┐│', rr - 1, cc)\n\t                    fini_implies(ci, '┌', rr, cc, '┐┘─', rr, cc + 1)\n\t                    fini_implies(ci, '┌', rr, cc, '┘└│', rr + 1, cc)\n\t            # no simple loops at end\n\t            for rr in range(ci.rows - 1):\n\t                for cc in range(ci.cols - 1):\n\t                    patt = ci.solver.make_conj([ci.vars_lrct[(ci.layers - 1, rr, cc, '┌')], ci.vars_lrct[(ci.layers - 1, rr, cc + 1, '┐')], ci.vars_lrct[(ci.layers - 1, rr + 1, cc, '└')], ci.vars_lrct[(ci.layers - 1, rr + 1, cc + 1, '┘')]], True)\n", "                    ci.solver.cnstr_count([patt], True, 0, 0, None)\n\t        ei.custom = _custom\n\t    elif mkiii_setup.example == EX_MATCH:\n\t        ei.states = 'X-789'\n\t        rep_rules_fall  = (RR_GRP_ALL, [(DIR_SOUTH, '7-', '-7'), (DIR_SOUTH, '8-', '-8'), (DIR_SOUTH, '9-', '-9')])\n\t        rep_rules_match = (RR_GRP_ALL, [(DIR_SOUTHEAST, '777', '---'), (DIR_SOUTHEAST, '888', '---'), (DIR_SOUTHEAST, '999', '---')])\n\t        rep_rules_swap  = (RR_GRP_CHOICE, [(DIR_ALL, '78', '87'), (DIR_ALL, '89', '98'), (DIR_ALL, '97', '79'), (DIR_EASTWEST, '7-', '-7'), (DIR_EASTWEST, '8-', '-8'), (DIR_EASTWEST, '9-', '-9')])\n\t        ei.rep_rules = [rep_rules_fall, rep_rules_match, rep_rules_swap]\n\t        ei.rep_rule_names = ['fall', 'match', 'swap']\n\t        ei.rep_rule_order = RR_ORD_PRI\n", "        ei.use_term = True\n\t        def _custom(ci):\n\t            # no block above blanks\n\t            for rr in range(1, ci.rows):\n\t                for cc in range(ci.cols):\n\t                    ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, '-')], True, [ci.vars_lrct[(0, rr - 1, cc, '-')]], True, None)\n\t            # only a few blank at top\n\t            init_range(ci, '-', ci.cols + 1, ci.cols * 3)\n\t            # only a few blocks\n\t            init_range(ci, 'X', 0, ci.rows * ci.cols // 5)\n", "            # a few of each block\n\t            init_range(ci, '7', 3, ci.rows * ci.cols)\n\t            init_range(ci, '8', 3, ci.rows * ci.cols)\n\t            init_range(ci, '9', 3, ci.rows * ci.cols)\n\t            # no 3 in a row\n\t            for ss in '789':\n\t                for rr in range(1, ci.rows - 1):\n\t                    for cc in range(ci.cols):\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, ss)], True, [ci.vars_lrct[(0, rr - 1, cc, ss)], ci.vars_lrct[(0, rr + 1, cc, ss)]], False, None)\n\t                for rr in range(ci.rows):\n", "                    for cc in range(1, ci.cols - 1):\n\t                        ci.solver.cnstr_implies_disj(ci.vars_lrct[(0, rr, cc, ss)], True, [ci.vars_lrct[(0, rr, cc - 1, ss)], ci.vars_lrct[(0, rr, cc + 1, ss)]], False, None)\n\t            # all cleared at end\n\t            fini_range(ci, '7', 0, 0)\n\t            fini_range(ci, '8', 0, 0)\n\t            fini_range(ci, '9', 0, 0)\n\t        ei.custom = _custom\n\t    else:\n\t        util.check(False, 'mkiii_setup example' + mkiii_setup.example)\n\t    return ei\n", "class GeneratorMKIII(generator.Generator):\n\t    def __init__(self, solver, randomize, rows, cols, scheme_info, tag_level, game_level):\n\t        super().__init__(solver, randomize, rows, cols, scheme_info, tag_level, game_level)\n\t        self._states = None\n\t        self._layers = None\n\t        self._group_names = None\n\t        self._vars_lrct = None\n\t        self._vars_patt = None\n\t        self._vars_term = None\n\t        self._vars_pri = None\n", "        self._var_state_false = None\n\t        self._change_vars_rcs = None\n\t    def add_rules_mkiii(self, mkiii_info):\n\t        print('add mkiii constraints')\n\t        self._states = mkiii_info.states\n\t        self._layers = mkiii_info.layers\n\t        self._group_names = list(mkiii_info.rep_rule_names) if mkiii_info.rep_rule_names else None\n\t        self.append_extra_meta(mkiii_info.extra_meta)\n\t        self._vars_lrct = {}\n\t        self._vars_patt = {}\n", "        self._vars_term = None\n\t        self._vars_pri = None\n\t        self._var_state_false = self._solver.make_var()\n\t        self._solver.cnstr_count([self._var_state_false], True, 0, 0, None)\n\t        self._change_vars_rcs = [[]]\n\t        text_to_tile = {}\n\t        for tile, text in self._scheme_info.tileset.tile_to_text.items():\n\t            util.check(text not in text_to_tile, 'cannot have duplicate tile text ' + text + ' for mkiii')\n\t            util.check(text in self._states, 'text ' + text + ' not in states')\n\t            text_to_tile[text] = tile\n", "        layers_order = list(range(self._layers))\n\t        rows_order = list(range(self._rows))\n\t        cols_order = list(range(self._cols))\n\t        states_order = list(self._states)\n\t        if self._rng:\n\t            self._rng.shuffle(layers_order)\n\t            self._rng.shuffle(rows_order)\n\t            self._rng.shuffle(cols_order)\n\t            self._rng.shuffle(states_order)\n\t        # terminal variables\n", "        if mkiii_info.use_term:\n\t            self._vars_term = []\n\t            self._vars_term.append(None)\n\t            for ll in range(self._layers - 1):\n\t                self._vars_term.append(self._solver.make_var())\n\t        # state variables\n\t        for ll in layers_order:\n\t            for rr in rows_order:\n\t                for cc in cols_order:\n\t                    for ss in states_order:\n", "                        if ll == 0:\n\t                            if ss in text_to_tile:\n\t                                self._vars_lrct[(0, rr, cc, ss)] = self._vars_rc_t[(rr, cc)][text_to_tile[ss]]\n\t                            else:\n\t                                self._vars_lrct[(0, rr, cc, ss)] = self._var_state_false\n\t                        else:\n\t                            self._vars_lrct[(ll, rr, cc, ss)] = self._solver.make_var()\n\t        # one state true (first layer already handled)\n\t        for ll in range(1, self._layers):\n\t            for rr in range(self._rows):\n", "                for cc in range(self._cols):\n\t                    vvs = []\n\t                    for ss in self._states:\n\t                        vvs.append(self._vars_lrct[(ll, rr, cc, ss)])\n\t                    self._solver.cnstr_count(vvs, True, 1, 1, None)\n\t        # make_conj duplicate helper\n\t        conjs = {}\n\t        def _make_conj(_vvs):\n\t            nonlocal conjs\n\t            _key = tuple(sorted([str(_vv) for _vv in _vvs]))\n", "            if _key not in conjs:\n\t                conjs[_key] = self._solver.make_conj(_vvs, True)\n\t            return conjs[_key]\n\t        if mkiii_info.rep_rule_order in [RR_ORD_ONE, RR_ORD_SEQ]:\n\t            self._vars_pri = None\n\t        elif mkiii_info.rep_rule_order == RR_ORD_PRI:\n\t            self._vars_pri = []\n\t        else:\n\t            util.check(False, 'rep_rule_order')\n\t        if mkiii_info.rep_rule_order == RR_ORD_ONE:\n", "            util.check(len(mkiii_info.rep_rules) == 1, 'rep_rule_order')\n\t        elif mkiii_info.rep_rule_order in [RR_ORD_SEQ, RR_ORD_PRI]:\n\t            util.check(len(mkiii_info.rep_rules) > 1, 'rep_rule_order')\n\t        else:\n\t            util.check(False, 'rep_rule_order')\n\t        for ll in range(self._layers - 1):\n\t            # keep track of change vars\n\t            layer_change_vars_rcs = []\n\t            # terminal stays set\n\t            if self._vars_term is not None:\n", "                if ll > 0:\n\t                    self._solver.cnstr_implies_disj(self._vars_term[ll], True, [self._vars_term[ll + 1]], True, None)\n\t            # keep track of possible changes at this layer\n\t            all_changes_rc = {}\n\t            for rr in range(self._rows):\n\t                for cc in range(self._cols):\n\t                    all_changes_rc[(rr, cc)] = []\n\t            # set up priority vars\n\t            if self._vars_pri is not None:\n\t                inds_pri = []\n", "            # set up rep rules\n\t            for rep_rules_index in range(len(mkiii_info.rep_rules)):\n\t                if self._vars_pri is not None:\n\t                    ind_pri = self._solver.make_var()\n\t                    prev_inds_pri = list(inds_pri)\n\t                    inds_pri.append(ind_pri)\n\t                else:\n\t                    if rep_rules_index != (ll % len(mkiii_info.rep_rules)):\n\t                        continue\n\t                rep_rules_type, rep_rules = mkiii_info.rep_rules[rep_rules_index]\n", "                # keep track of possible changes at this index\n\t                ind_changes = []\n\t                ind_changes_vin = []\n\t                # connections between layers\n\t                for rr in range(self._rows):\n\t                    for cc in range(self._cols):\n\t                        for rule_info in rep_rules:\n\t                            rule_dirs, rule_in, rule_out = rule_info\n\t                            util.check(len(rule_in) == len(rule_out), 'rule in and out different lengths')\n\t                            for dr, dc in rule_dirs:\n", "                                util.check(abs(dr) + abs(dc) <= 1, 'dr and/or dc out of range')\n\t                                if dr == dc == 0:\n\t                                    util.check(len(rule_in) == len(rule_out) == 1, 'rule has length but no direction')\n\t                                if rr + dr * len(rule_in) >= -1 and rr + dr * len(rule_in) <= self._rows and cc + dc * len(rule_in) >= -1 and cc + dc * len(rule_in) <= self._cols:\n\t                                    vin = []\n\t                                    vou = []\n\t                                    vrs = []\n\t                                    vcs = []\n\t                                    for ii in range(len(rule_in)):\n\t                                        vin.append(self._vars_lrct[(ll + 0, rr + dr * ii, cc + dc * ii, rule_in[ii])])\n", "                                        vou.append(self._vars_lrct[(ll + 1, rr + dr * ii, cc + dc * ii, rule_out[ii])])\n\t                                        vrs.append(rr + dr * ii)\n\t                                        vcs.append(cc + dc * ii)\n\t                                    change = _make_conj(vin + vou)\n\t                                    change_vin = _make_conj(vin)\n\t                                    layer_change_vars_rcs.append((vin + vou, (min(vrs), min(vcs), max(vrs) + 1, max(vcs) + 1)))\n\t                                    ind_changes.append(change)\n\t                                    ind_changes_vin.append(change_vin)\n\t                                    for ii in range(len(rule_in)):\n\t                                        all_changes_rc[(rr + dr * ii, cc + dc * ii)].append(change)\n", "                if self._vars_pri is not None:\n\t                    # pri equals any change\n\t                    for change in ind_changes:\n\t                        self._solver.cnstr_implies_disj(change, True, [ind_pri], True, None)\n\t                    self._solver.cnstr_implies_disj(ind_pri, True, ind_changes, True, None)\n\t                if rep_rules_type == RR_GRP_CHOICE:\n\t                    # exactly one change or terminal or prev pri changed\n\t                    changes_or_term_or_prev_pri = ind_changes\n\t                    if self._vars_term is not None:\n\t                        changes_or_term_or_prev_pri.append(self._vars_term[ll + 1])\n", "                    if self._vars_pri is not None:\n\t                        changes_or_term_or_prev_pri = changes_or_term_or_prev_pri + prev_inds_pri\n\t                    self._solver.cnstr_count(changes_or_term_or_prev_pri, True, 1, 1, None)\n\t                elif rep_rules_type == RR_GRP_ALL:\n\t                    # everything that can change does, unless terminal or prev_pri\n\t                    for ind_change, ind_change_vin in zip(ind_changes, ind_changes_vin):\n\t                        change_or_term_or_prev_pri = [ind_change]\n\t                        if self._vars_term is not None:\n\t                            change_or_term_or_prev_pri.append(self._vars_term[ll + 1])\n\t                        if self._vars_pri is not None:\n", "                            change_or_term_or_prev_pri = change_or_term_or_prev_pri + prev_inds_pri\n\t                        self._solver.cnstr_implies_disj(ind_change_vin, True, change_or_term_or_prev_pri, True, None)\n\t                        self._solver.cnstr_count(change_or_term_or_prev_pri, True, 0, 1, None)\n\t                else:\n\t                    util.check(False, 'rep_rules_type')\n\t            self._change_vars_rcs.append(layer_change_vars_rcs)\n\t            if self._vars_pri is not None:\n\t                self._vars_pri.append(inds_pri)\n\t                # exactly one priority changes, or term\n\t                inds_pri_or_term = list(inds_pri)\n", "                if self._vars_term is not None:\n\t                    inds_pri_or_term.append(self._vars_term[ll + 1])\n\t                self._solver.cnstr_count(inds_pri_or_term, True, 1, 1, None)\n\t            # everything is either the same or part of a change\n\t            for rr in range(self._rows):\n\t                for cc in range(self._cols):\n\t                    for ss in self._states:\n\t                        vv0 = self._vars_lrct[(ll + 0, rr, cc, ss)]\n\t                        vv1 = self._vars_lrct[(ll + 1, rr, cc, ss)]\n\t                        self._solver.cnstr_implies_disj(vv0, True, [vv1] + all_changes_rc[(rr, cc)], True, None)\n", "                        # TODO needed?\n\t                        self._solver.cnstr_implies_disj(vv0, False, [vv1] + all_changes_rc[(rr, cc)], [False] + [True] * len(all_changes_rc[(rr, cc)]), None)\n\t        if mkiii_info.custom:\n\t            mkiii_info.custom(CustomInfo(self._solver, self._rng, self._vars_lrct, self._rows, self._cols, self._layers))\n\t    def get_result(self):\n\t        result_info = super().get_result()\n\t        result_info.execution_info = self._get_execution()\n\t        return result_info\n\t    def _get_execution(self):\n\t        pi = util.ResultExecutionInfo()\n", "        pi.levels = []\n\t        pi.names = []\n\t        pi.changes = []\n\t        pi.term = []\n\t        pi.first_term = []\n\t        if not self._group_names:\n\t            pi.names = [None] * self._layers\n\t        else:\n\t            pi.names.append('initial')\n\t            for ll in range(self._layers - 1):\n", "                if self._vars_pri is not None: # RR_ORD_PRI\n\t                    inds_pri = self._vars_pri[ll]\n\t                    util.check(len(inds_pri) == len(self._group_names), 'pri and name length mismatch')\n\t                    pri_name = None\n\t                    for vv, name in zip(inds_pri, self._group_names):\n\t                        if self._solver.get_var(vv):\n\t                            util.check(pri_name is None, 'multiple pri set')\n\t                            pri_name = name\n\t                    if pri_name is None:\n\t                        pri_name = 'none'\n", "                    pi.names.append(pri_name)\n\t                else: # RR_ORD_SEQ, RR_ORD_ONE\n\t                    pi.names.append(self._group_names[ll % len(self._group_names)])\n\t        for ll in range(self._layers):\n\t            changes = []\n\t            for cvvs, crcs in self._change_vars_rcs[ll]:\n\t                changed = True\n\t                for vv in cvvs:\n\t                    if not self._solver.get_var(vv):\n\t                        changed = False\n", "                if changed:\n\t                    changes.append(crcs)\n\t            pi.changes.append(changes)\n\t            level = []\n\t            for rr in range(self._rows):\n\t                level_row = []\n\t                for cc in range(self._cols):\n\t                    use_ss = None\n\t                    for ss in self._states:\n\t                        vv = self._vars_lrct[(ll, rr, cc, ss)]\n", "                        if self._solver.get_var(vv):\n\t                            util.check(use_ss is None, 'multiple states set')\n\t                            use_ss = ss\n\t                    util.check(use_ss is not None, 'no state set')\n\t                    level_row.append(use_ss)\n\t                level.append(level_row)\n\t            pi.levels.append(level)\n\t            if self._vars_term is None or ll == 0:\n\t                pi.term.append(None)\n\t                pi.first_term.append(None)\n", "            else:\n\t                prev_term = False if ll == 1 else self._solver.get_var(self._vars_term[ll - 1])\n\t                curr_term = self._solver.get_var(self._vars_term[ll])\n\t                if prev_term:\n\t                    util.check(curr_term, 'term unset')\n\t                pi.term.append(curr_term)\n\t                if curr_term and not prev_term:\n\t                    pi.first_term.append(True)\n\t                else:\n\t                    pi.first_term.append(False)\n", "        return pi\n"]}
{"filename": "pathed.py", "chunked_list": ["import argparse, hashlib, io, math, multiprocessing, os, pickle, random, sys, time\n\timport custom, reach, scheme2output, solvers, util, util_path\n\timport PIL.Image, PIL.ImageTk\n\timport tkinter\n\tWEIGHT_PATH    =  100\n\tWEIGHT_PATTERN = None\n\tWEIGHT_COUNTS  =    1\n\tINSET          =   10\n\tCELL_SIZE      =   25\n\tFRAME          =    5\n", "LEVEL_COUNT    =  128\n\tREFRESH_MSEC   =   50\n\tPATH_DELAY_SEC =    1.0\n\tdef tocvs(x):\n\t    return (x * CELL_SIZE) + INSET\n\tdef fromcvs(x):\n\t    return (x - INSET) / CELL_SIZE\n\tdef encode_result_info(result_info, want_image):\n\t    if result_info is None:\n\t        return None\n", "    if not want_image:\n\t        result_info.image_level = None\n\t    elif result_info.image_level is not None:\n\t        bytes_io = io.BytesIO()\n\t        result_info.image_level.convert('RGB').save(bytes_io, 'png')\n\t        bytes_io.flush()\n\t        bytes_io.seek(0)\n\t        result_info.image_level = bytes_io.read()\n\t    return result_info\n\tdef decode_result_info(result_info):\n", "    if result_info is None:\n\t        return None\n\t    if result_info.image_level is not None:\n\t        result_info.image_level = PIL.Image.open(io.BytesIO(result_info.image_level))\n\t    return result_info\n\tclass PathCanvas(tkinter.Canvas):\n\t    def __init__(self, root, rows, cols, move_template, schemefile, outfolder):\n\t        super().__init__(root, width=cols*CELL_SIZE+2*INSET-FRAME, height=rows*CELL_SIZE+2*INSET-FRAME)\n\t        self._rows = rows\n\t        self._cols = cols\n", "        self._seed_gen = 0\n\t        self._seed_rand_path = 0\n\t        self._reverse = False\n\t        self._move_template = move_template\n\t        self._template_open_closed = util_path.get_template_open_closed(reach.get_move_template(self._move_template))\n\t        self._schemefile = schemefile\n\t        self._outfolder = outfolder\n\t        self._path_open = {}\n\t        self._path_closed = {}\n\t        self._path_nexts = None\n", "        self._working_draw = []\n\t        self._gen_objective = None\n\t        self._mouse = None\n\t        self._draw_open_closed = False\n\t        self._mouse_draw = []\n\t        self._path = []\n\t        self._gen_path = []\n\t        self._path_draw = []\n\t        self._grid_draw = []\n\t        self._gen_image = None\n", "        self._gen_text = None\n\t        self._image_draw = []\n\t        self._gen_proc = None\n\t        self._gen_proc_wanted = None\n\t        self._gen_proc_termed = False\n\t        self._gen_proc_q = None\n\t        self.bind_all(\"<BackSpace>\", self.on_key_backspace)\n\t        self.bind_all(\"<KeyPress-=>\", self.on_key_equal)\n\t        self.bind_all(\"<KeyPress-c>\", self.on_key_c)\n\t        self.bind_all(\"<KeyPress-x>\", self.on_key_x)\n", "        self.bind_all(\"<KeyPress-p>\", self.on_key_p)\n\t        self.bind_all(\"<KeyPress-n>\", self.on_key_n)\n\t        self.bind_all(\"<KeyPress-b>\", self.on_key_b)\n\t        self.bind_all(\"<KeyPress-o>\", self.on_key_o)\n\t        self.bind_all(\"<KeyPress-r>\", self.on_key_r)\n\t        self.bind_all(\"<KeyPress-s>\", self.on_key_s)\n\t        self.bind_all(\"<KeyPress-w>\", self.on_key_w)\n\t        self.bind(\"<Motion>\", self.on_mouse_motion)\n\t        self.bind(\"<Leave>\", self.on_mouse_leave)\n\t        self.bind(\"<ButtonPress-1>\", self.on_mouse_button)\n", "        self.after(REFRESH_MSEC, self.on_timer)\n\t        self.pack()\n\t        self.redraw_from_image()\n\t    def restart_gen_proc(self, delay):\n\t        if self._schemefile:\n\t            self._gen_proc_wanted = time.time() + delay\n\t    @staticmethod\n\t    def gen_proc_body(q, rows, cols, seed, start_goal, path_points, move_template, schemefile, want_image, outfile):\n\t        util.timer_start(False)\n\t        if outfile is not None:\n", "            outfile_file = util.openz(outfile + '.log', 'wt')\n\t            sys.stdout = outfile_file\n\t        with util.openz(schemefile, 'rb') as f:\n\t            scheme_info = pickle.load(f)\n\t        tag_game_level = util.make_grid(rows, cols, util.DEFAULT_TEXT)\n\t        solver = solvers.PySatSolverRC2()\n\t        reach_setup = util.ReachabilitySetup()\n\t        reach_setup.wrap_cols = False\n\t        reach_setup.open_text = util.OPEN_TEXT\n\t        reach_setup.game_to_move = { util.DEFAULT_TEXT: move_template }\n", "        reach_setup.goal_loc = reach.RGOAL_ALL\n\t        reach_setup.goal_params = []\n\t        custom_cnstrs = []\n\t        if start_goal is not None:\n\t            custom_cnstrs.append(custom.OutPathEndsConstraint(start_goal[0], start_goal[1], start_goal[2], start_goal[3], WEIGHT_PATH))\n\t        if path_points is not None:\n\t            custom_cnstrs.append(custom.OutPathConstraint(path_points, WEIGHT_PATH))\n\t        result_info = scheme2output.scheme2output(scheme_info, tag_game_level, tag_game_level, solver, seed, WEIGHT_PATTERN, WEIGHT_COUNTS, scheme2output.COUNTS_SCALE_HALF, reach_setup, None, custom_cnstrs, False)\n\t        if outfile is not None and result_info is not None:\n\t            print('saving to', outfile)\n", "            util.save_result_info(result_info, outfile)\n\t        encode_result_info(result_info, want_image)\n\t        q.put(result_info)\n\t        if result_info:\n\t            util.exit_solution_found()\n\t        else:\n\t            util.exit_solution_not_found()\n\t    def on_timer(self):\n\t        if self._gen_proc is not None:\n\t            if not self._gen_proc.is_alive():\n", "                if self._gen_proc_termed:\n\t                    print('proc termed')\n\t                elif self._gen_proc.exitcode != 0:\n\t                    print('proc error')\n\t                else:\n\t                    print('proc done')\n\t                    result_info = self._gen_proc_q.get()\n\t                    decode_result_info(result_info)\n\t                    if result_info is not None:\n\t                        print(result_info.reach_info.path_edges)\n", "                        if result_info.image_level is None:\n\t                            self._gen_image = None\n\t                        else:\n\t                            self._gen_image = PIL.ImageTk.PhotoImage(result_info.image_level.resize((self._cols * CELL_SIZE, self._rows * CELL_SIZE), PIL.Image.Resampling.BILINEAR))\n\t                        self._gen_text = result_info.text_level\n\t                        self._gen_path = util_path.point_path_from_edge_path(result_info.reach_info.path_edges)\n\t                        self._gen_objective = result_info.objective\n\t                    self.redraw_from_image()\n\t                self._gen_proc = None\n\t        if self._gen_proc_wanted is not None:\n", "            if self._gen_proc is not None:\n\t                if self._gen_proc.is_alive():\n\t                    print('terminating proc')\n\t                    self._gen_proc_termed = True\n\t                    self._gen_proc.terminate()\n\t            elif time.time() >= self._gen_proc_wanted:\n\t                self._gen_proc_wanted = None\n\t                self._gen_proc_termed = False\n\t                if len(self._path) > 0:\n\t                    print('starting proc')\n", "                    if self._outfolder is None:\n\t                        outfile = None\n\t                    else:\n\t                        outfile = os.path.join(self._outfolder, hashlib.md5(str(self._path).encode('utf-8')).hexdigest() + ('_%04d' % self._seed_gen))\n\t                    self._gen_proc_q = multiprocessing.Queue()\n\t                    self._gen_proc = multiprocessing.Process(target=self.gen_proc_body, args=(self._gen_proc_q, self._rows, self._cols, self._seed_gen, None, self._path, self._move_template, self._schemefile, True, outfile))\n\t                    self._gen_proc.start()\n\t                else:\n\t                    print('empty path')\n\t                    self._gen_image = None\n", "                    self._gen_text = None\n\t                    self._gen_path = []\n\t                    self._gen_objective = None\n\t                    self.redraw_from_image()\n\t        self.redraw_from_working()\n\t        self.after(REFRESH_MSEC, self.on_timer)\n\t    def redraw_from_working(self):\n\t        for draw in self._working_draw:\n\t            self.delete(draw)\n\t        self._working_draw = []\n", "        if self._gen_path != self._path:\n\t            self._working_draw.append(self.create_line(tocvs(0.65), tocvs(0.65), tocvs(1.35), tocvs(1.35), fill='purple', width=3))\n\t            self._working_draw.append(self.create_line(tocvs(1.35), tocvs(0.65), tocvs(0.65), tocvs(1.35), fill='purple', width=3))\n\t        if self._gen_proc is not None:\n\t            self._working_draw.append(self.create_arc(tocvs(0.5), tocvs(0.5), tocvs(1.5), tocvs(1.5), outline='purple', width=3, style=tkinter.ARC, start=time.time() * 45.0, extent=300.0))\n\t    def redraw_from_mouse(self):\n\t        for draw in self._mouse_draw:\n\t            self.delete(draw)\n\t        self._mouse_draw = []\n\t        if self._mouse is not None:\n", "            mr, mc = self._mouse\n\t            if self._path_nexts is None or self._mouse in self._path_nexts:\n\t                self._mouse_draw.append(self.create_rectangle(tocvs(mc), tocvs(mr), tocvs(mc + 1), tocvs(mr + 1), outline='green', width=3))\n\t            else:\n\t                self._mouse_draw.append(self.create_rectangle(tocvs(mc), tocvs(mr), tocvs(mc + 1), tocvs(mr + 1), outline='gray', width=3))\n\t        self.redraw_from_working()\n\t    def _do_draw_path(self, points, larger, color, dash):\n\t        if larger:\n\t            outline_color = color\n\t            width = 3\n", "        else:\n\t            outline_color = ''\n\t            width = 2\n\t        if len(points) > 1:\n\t            draw_line = []\n\t            for pr, pc in points:\n\t                draw_line.append(tocvs(pc + 0.5))\n\t                draw_line.append(tocvs(pr + 0.5))\n\t            self._path_draw.append(self.create_line(*draw_line, fill=color, width=width, dash=dash))\n\t            for (pr0, pc0, pr1, pc1) in util_path.edge_path_from_point_path(points):\n", "                pr0 += 0.5\n\t                pc0 += 0.5\n\t                pr1 += 0.5\n\t                pc1 += 0.5\n\t                dr = pr1 - pr0\n\t                dc = pc1 - pc0\n\t                ll = (dr ** 2 + dc ** 2) ** 0.5\n\t                dr /= ll\n\t                dc /= ll\n\t                SCL = 0.3\n", "                OFF = 0.075\n\t                tra = pr1 - OFF * dr\n\t                tca = pc1 - OFF * dc\n\t                trb = (pr1 - dr * SCL - 0.5 * dc * SCL) - OFF * dr\n\t                tcb = (pc1 - dc * SCL + 0.5 * dr * SCL) - OFF * dc\n\t                trc = (pr1 - dr * SCL + 0.5 * dc * SCL) - OFF * dr\n\t                tcc = (pc1 - dc * SCL - 0.5 * dr * SCL) - OFF * dc\n\t                self._path_draw.append(self.create_polygon([tocvs(tca), tocvs(tra), tocvs(tcb), tocvs(trb), tocvs(tcc), tocvs(trc)], fill=color, outline=outline_color, width=width))\n\t        draw_ends = []\n\t        if len(points) > 0:\n", "            draw_ends.append(points[0])\n\t        if len(points) > 1:\n\t            draw_ends.append(points[-1])\n\t        for pr, pc in draw_ends:\n\t            sz = 0.15\n\t            self._path_draw.append(self.create_oval(tocvs(pc + (0.5 - sz)), tocvs(pr + (0.5 - sz)), tocvs(pc + (0.5 + sz)), tocvs(pr + (0.5 + sz)), fill=color, outline=outline_color, width=width))\n\t    def redraw_from_path(self):\n\t        for draw in self._path_draw:\n\t            self.delete(draw)\n\t        self._path_draw = []\n", "        if self._draw_open_closed:\n\t            for nr, nc in self._path_open:\n\t                self._path_draw.append(self.create_oval(tocvs(nc + 0.25), tocvs(nr + 0.25), tocvs(nc + 0.75), tocvs(nr + 0.75), outline='blue', width=2))\n\t            for nr, nc in self._path_closed:\n\t                self._path_draw.append(self.create_rectangle(tocvs(nc + 0.25), tocvs(nr + 0.25), tocvs(nc + 0.75), tocvs(nr + 0.75), outline='blue', width=2))\n\t        self._do_draw_path(self._gen_path, True, 'red', None)\n\t        self._do_draw_path(self._path, False, 'pink', (3, 3))\n\t        if self._path_nexts is not None:\n\t            for nr, nc in self._path_nexts:\n\t                self._path_draw.append(self.create_rectangle(tocvs(nc), tocvs(nr), tocvs(nc + 1), tocvs(nr + 1), outline='black', width=3))\n", "        self.redraw_from_mouse()\n\t    def redraw_from_grid(self):\n\t        for draw in self._grid_draw:\n\t            self.delete(draw)\n\t        self._grid_draw = []\n\t        for rr in range(self._rows + 1):\n\t            self._grid_draw.append(self.create_line(tocvs(0), tocvs(rr), tocvs(self._cols), tocvs(rr), fill='gray'))\n\t        for cc in range(self._cols + 1):\n\t            self._grid_draw.append(self.create_line(tocvs(cc), tocvs(0), tocvs(cc), tocvs(self._rows), fill='gray'))\n\t        self.redraw_from_path()\n", "    def redraw_from_image(self):\n\t        for draw in self._image_draw:\n\t            self.delete(draw)\n\t        self._image_draw = []\n\t        if self._gen_image is None:\n\t            self._image_draw.append(self.create_rectangle(tocvs(0), tocvs(0), tocvs(self._cols), tocvs(self._rows), outline=None, fill='white'))\n\t        else:\n\t            self._image_draw.append(self.create_image(INSET, INSET, anchor=tkinter.NW, image=self._gen_image))\n\t        self.redraw_from_grid()\n\t    def recompute_nexts(self):\n", "        self._path_nexts, self._path_open, self._path_closed = util_path.get_nexts_open_closed_from(self._path, self._reverse, self._rows, self._cols, self._template_open_closed)\n\t        self.redraw_from_path()\n\t    def new_manual_path(self, delay_proc):\n\t        self.recompute_nexts()\n\t        self.restart_gen_proc(PATH_DELAY_SEC if delay_proc else 0.0)\n\t    def on_key_backspace(self, event):\n\t        if len(self._path) > 0:\n\t            self._path = self._path[:-1]\n\t            self.new_manual_path(True)\n\t    def on_key_equal(self, event):\n", "        if len(self._path) > 0:\n\t            self._path = self._path[1:]\n\t            self.new_manual_path(True)\n\t    def on_key_x(self, event):\n\t        if self._schemefile:\n\t            self._path = []\n\t            self.new_manual_path(True)\n\t    def on_key_p(self, event):\n\t        self._reverse = not self._reverse\n\t        self.recompute_nexts()\n", "    def on_key_c(self, event):\n\t        if self._schemefile:\n\t            self._path = self._gen_path\n\t            self.new_manual_path(True)\n\t    def on_key_b(self, event):\n\t        self._seed_gen = (self._seed_gen + LEVEL_COUNT - 1) % LEVEL_COUNT\n\t        self.new_manual_path(False)\n\t    def on_key_n(self, event):\n\t        self._seed_gen = (self._seed_gen + 1) % LEVEL_COUNT\n\t        self.new_manual_path(False)\n", "    def on_key_o(self, event):\n\t        self._draw_open_closed = not self._draw_open_closed\n\t        self.redraw_from_path()\n\t    def on_key_r(self, event):\n\t        self._seed_rand_path += 1\n\t        rng = random.Random(self._seed_rand_path)\n\t        self._path = util_path.random_path_by_search(rng, self._rows, self._cols, self._template_open_closed)\n\t        self.new_manual_path(False)\n\t    def on_key_s(self, event):\n\t        if len(self._path) >= 2:\n", "            self._path = util_path.shortest_path_between(self._path[0], self._path[-1], self._rows, self._cols, self._template_open_closed, {}, {})\n\t            self.new_manual_path(False)\n\t    def on_key_w(self, event):\n\t        if self._gen_path is not None and len(self._gen_path) >= 2:\n\t            are_open, are_closed = util_path.get_level_open_closed(self._gen_text, util.OPEN_TEXT)\n\t            self._path = util_path.shortest_path_between(self._gen_path[0], self._gen_path[-1], self._rows, self._cols, self._template_open_closed, are_open, are_closed)\n\t            self.new_manual_path(False)\n\t    def on_mouse_motion(self, event):\n\t        mr, mc = math.floor(fromcvs(event.y)), math.floor(fromcvs(event.x))\n\t        if 0 <= mr and mr < self._rows and 0 <= mc and mc < self._cols:\n", "            self._mouse = (mr, mc)\n\t        else:\n\t            self._mouse = None\n\t        self.redraw_from_mouse()\n\t    def on_mouse_leave(self, event):\n\t        self._mouse = None\n\t        self.redraw_from_mouse()\n\t    def on_mouse_button(self, event):\n\t        if self._mouse is not None:\n\t            if self._path_nexts is None or self._mouse in self._path_nexts:\n", "                if not self._reverse:\n\t                    self._path.append(self._mouse)\n\t                else:\n\t                    self._path.insert(0, self._mouse)\n\t                self.new_manual_path(True)\n\tdef pathed(rows, cols, reach_move, schemefile, outfolder):\n\t    root = tkinter.Tk()\n\t    root.title('pathed')\n\t    PathCanvas(root, rows, cols, reach_move, schemefile, outfolder)\n\t    root.mainloop()\n", "if __name__ == '__main__':\n\t    parser = argparse.ArgumentParser(description='Path editor.')\n\t    parser.add_argument('--size', required=True, type=int, nargs=2, help='Level size.')\n\t    parser.add_argument('--reach-move', required=True, type=str, help='Use reachability move rules, from: ' + ','.join(reach.RMOVE_LIST) + '.')\n\t    parser.add_argument('--schemefile', type=str, help='Input scheme file.')\n\t    parser.add_argument('--outfolder', type=str, help='Output folder.')\n\t    args = parser.parse_args()\n\t    pathed(args.size[0], args.size[1], args.reach_move, args.schemefile, args.outfolder)\n"]}
{"filename": "tag2game.py", "chunked_list": ["import argparse, math, pickle, pprint, random, sys, time\n\timport util\n\tdef tag2game(tag_level, scheme_info, game_priority):\n\t    rows = len(tag_level)\n\t    cols = len(tag_level[0])\n\t    game_level = util.make_grid(rows, cols, util.DEFAULT_TEXT)\n\t    for rr in range(rows):\n\t        for cc in range(cols):\n\t            tag = tag_level[rr][cc]\n\t            found_game = False\n", "            for game in game_priority:\n\t                util.check(game in scheme_info.game_to_tag_to_tiles, 'game not in scheme info')\n\t                if tag in scheme_info.game_to_tag_to_tiles[game]:\n\t                    game_level[rr][cc] = game\n\t                    found_game = True\n\t                    break\n\t            util.check(found_game, 'tag ' + tag + ' not found in games')\n\t    return game_level\n\tif __name__ == '__main__':\n\t    util.timer_start()\n", "    parser = argparse.ArgumentParser(description='Generate game file from tag (and scheme) file.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output game level file.')\n\t    parser.add_argument('--tagfile', required=True, type=str, help='Input tag level file.')\n\t    parser.add_argument('--schemefile', required=True, type=str, help='Input scheme level file.')\n\t    parser.add_argument('--game', required=True, type=str, nargs='+', help='Game priority.')\n\t    args = parser.parse_args()\n\t    tag_level = util.read_text_level(args.tagfile)\n\t    with util.openz(args.schemefile, 'rb') as f:\n\t        scheme_info = pickle.load(f)\n\t    game_level = tag2game(tag_level, scheme_info, args.game)\n", "    util.print_text_level(game_level)\n\t    with util.openz(args.outfile, 'wt') as f:\n\t        util.print_text_level(game_level, outfile=f)\n"]}
{"filename": "generator.py", "chunked_list": ["import argparse, math, pickle, pprint, random, sys, time\n\timport solvers, util\n\tclass Generator:\n\t    def __init__(self, solver, randomize, rows, cols, scheme_info, tag_level, game_level):\n\t        super().__init__()\n\t        self._solver = solver\n\t        self._rng = random.Random(randomize) if randomize else None\n\t        self._extra_meta = []\n\t        self._rows = rows\n\t        self._cols = cols\n", "        self._scheme_info = scheme_info\n\t        self._tag_level = tag_level\n\t        self._game_level = game_level\n\t        self._vars_rc_t = {}\n\t        self._vars_pattern = {}\n\t        self._var_void_true = self._solver.make_var()\n\t        self._solver.cnstr_count([self._var_void_true], True, 1, 1, None)\n\t        self._reach_info = None\n\t        self._reach_vars_node = {}\n\t        self._reach_vars_edge = {}\n", "        self._reach_out_edges = None\n\t    def _tile_var(self, rr, cc, tile):\n\t        if (rr, cc) in self._vars_rc_t:\n\t            util.check(tile != util.VOID_TILE, 'void tile')\n\t            return self._vars_rc_t[(rr, cc)][tile]\n\t        else:\n\t            util.check(tile == util.VOID_TILE, 'void tile')\n\t            return self._var_void_true\n\t    def _tile_has_var(self, rr, cc, tile):\n\t        if (rr, cc) in self._vars_rc_t:\n", "            return tile in self._vars_rc_t[(rr, cc)]\n\t        else:\n\t            return tile == util.VOID_TILE\n\t    def _pattern_var(self, pattern):\n\t        util.check(len(pattern) > 0, 'empty pattern')\n\t        key = tuple(sorted(set(pattern)))\n\t        if key not in self._vars_pattern:\n\t            self._vars_pattern[key] = self._solver.make_conj([self._tile_var(pr, pc, ptile) for pr, pc, ptile in pattern], True)\n\t        return self._vars_pattern[key]\n\t    def get_rows(self):\n", "        return self._rows\n\t    def get_cols(self):\n\t        return self._cols\n\t    def get_scheme_info(self):\n\t        return self._scheme_info\n\t    def append_extra_meta(self, meta):\n\t        self._extra_meta += meta\n\t    def add_rules_tiles(self):\n\t        print('add tile constraints')\n\t        row_order = list(range(self._rows))\n", "        col_order = list(range(self._cols))\n\t        if self._rng:\n\t            self._rng.shuffle(row_order)\n\t            self._rng.shuffle(col_order)\n\t        for rr in row_order:\n\t            for cc in col_order:\n\t                tag = self._tag_level[rr][cc]\n\t                game = self._game_level[rr][cc]\n\t                if tag == util.VOID_TEXT:\n\t                    continue\n", "                tiles = list(self._scheme_info.game_to_tag_to_tiles[game][tag].keys())\n\t                util.check(util.VOID_TILE not in tiles, 'void tile')\n\t                if self._rng:\n\t                    self._rng.shuffle(tiles)\n\t                self._vars_rc_t[(rr, cc)] = {}\n\t                for tile in tiles:\n\t                    self._vars_rc_t[(rr, cc)][tile] = self._solver.make_var()\n\t                vvs = list(self._vars_rc_t[(rr, cc)].values())\n\t                self._solver.cnstr_count(vvs, True, 1, 1, None)\n\t    def add_rules_patterns(self, weight_patterns):\n", "        print('add pattern constraints', weight_patterns)\n\t        util.check(weight_patterns is None or weight_patterns > 0, 'weight')\n\t        def add_tile_patterns(_pattern_in, _pattern_out_list):\n\t            _pattern_in_var = self._pattern_var(_pattern_in)\n\t            if len(_pattern_out_list) == 0:\n\t                self._solver.cnstr_count([_pattern_in_var], True, 0, 0, weight_patterns)\n\t            else:\n\t                _pattern_out_vars = [self._pattern_var(_pattern_out) for _pattern_out in _pattern_out_list]\n\t                self._solver.cnstr_implies_disj(_pattern_in_var, True, _pattern_out_vars, True, weight_patterns)\n\t        def add_pattern_options(_patterns):\n", "            _pattern_vars = [self._pattern_var(_pattern) for _pattern in _patterns]\n\t            self._solver.cnstr_count(_pattern_vars, True, 1, len(_pattern_vars), weight_patterns)\n\t        if self._scheme_info.pattern_info.stride_rows == 0:\n\t            util.check(0 == self._scheme_info.pattern_info.dr_lo and self._rows == self._scheme_info.pattern_info.dr_hi + 1, 'rows do not stride and row count does not start at 0 or does not match')\n\t        if self._scheme_info.pattern_info.stride_cols == 0:\n\t            util.check(0 == self._scheme_info.pattern_info.dc_lo and self._cols == self._scheme_info.pattern_info.dc_hi + 1, 'cols do not stride and col count does not start at 0 or does not match')\n\t        row_range = range(-self._scheme_info.pattern_info.dr_hi, self._rows - self._scheme_info.pattern_info.dr_lo, self._scheme_info.pattern_info.stride_rows) if self._scheme_info.pattern_info.stride_rows else [0]\n\t        col_range = range(-self._scheme_info.pattern_info.dc_hi, self._cols - self._scheme_info.pattern_info.dc_lo, self._scheme_info.pattern_info.stride_cols) if self._scheme_info.pattern_info.stride_cols else [0]\n\t        def pattern_inst(_pattern_template, _pattern):\n\t            _inst = []\n", "            for (_dr, _dc), _ptile in zip(_pattern_template, _pattern):\n\t                _nr = rr + _dr\n\t                _nc = cc + _dc\n\t                _nbr_tag = util.VOID_TEXT if (_nr <= -1 or _nr >= self._rows or _nc <= -1 or _nc >= self._cols) else self._tag_level[_nr][_nc]\n\t                if _nbr_tag == util.VOID_TEXT:\n\t                    if _ptile != util.VOID_TILE:\n\t                        return None\n\t                else:\n\t                    if _ptile not in self._vars_rc_t[(_nr, _nc)]:\n\t                        return None\n", "                _inst.append((_nr, _nc, _ptile))\n\t            return tuple(_inst)\n\t        for rr in row_range:\n\t            for cc in col_range:\n\t                game = self._game_level[max(0, min(self._rows - 1, rr))][max(0, min(self._cols - 1, cc))]\n\t                game_patterns_info = self._scheme_info.pattern_info.game_to_patterns[game]\n\t                if game_patterns_info is None:\n\t                    continue\n\t                for pattern_template_in in game_patterns_info:\n\t                    all_pattern_in_inst = []\n", "                    for pattern_in in game_patterns_info[pattern_template_in]:\n\t                        pattern_inst_in = pattern_inst(pattern_template_in, pattern_in)\n\t                        if pattern_inst_in is None:\n\t                            continue\n\t                        all_pattern_in_inst.append(pattern_inst_in)\n\t                        for pattern_template_out in game_patterns_info[pattern_template_in][pattern_in]:\n\t                            if pattern_template_out is None:\n\t                                continue\n\t                            pattern_list_out = []\n\t                            for pattern_out in game_patterns_info[pattern_template_in][pattern_in][pattern_template_out]:\n", "                                pattern_inst_out = pattern_inst(pattern_template_out, pattern_out)\n\t                                if pattern_inst_out is not None:\n\t                                    pattern_list_out.append(pattern_inst_out)\n\t                            add_tile_patterns(pattern_inst_in, pattern_list_out)\n\t                    util.check(len(all_pattern_in_inst) > 0, 'no inst in patterns')\n\t                    add_pattern_options(all_pattern_in_inst)\n\t    def add_rules_counts(self, use_out_text_groups, counts_scale_lo, counts_scale_hi, weight_counts):\n\t        print('add count constraints', weight_counts)\n\t        util.check(weight_counts is None or weight_counts > 0, 'weight')\n\t        print('using output text groups' if use_out_text_groups else 'using single tile groups')\n", "        def add_counts(_rr_lo, _rr_hi, _cc_lo, _cc_hi, _count_game_to_tag_to_tiles):\n\t            for _game, _count_tag_to_tiles in _count_game_to_tag_to_tiles.items():\n\t                for _tag in _count_tag_to_tiles:\n\t                    _rcs = []\n\t                    for _rr in range(_rr_lo, _rr_hi):\n\t                        for _cc in range(_cc_lo, _cc_hi):\n\t                            if self._game_level[_rr][_cc] == _game and self._tag_level[_rr][_cc] == _tag:\n\t                                _rcs.append((_rr, _cc))\n\t                    if len(_rcs) == 0:\n\t                        continue\n", "                    if use_out_text_groups:\n\t                        util.check(self._scheme_info.tileset.tile_to_text is not None, 'tile groups out text')\n\t                        _inv = {}\n\t                        for _tile in _count_tag_to_tiles[_game][_tag]:\n\t                            _out_text = self._scheme_info.tileset.tile_to_text[_tile]\n\t                            # no counts on start/goal tiles\n\t                            if _out_text == util.START_TEXT or _out_text == util.GOAL_TEXT:\n\t                                continue\n\t                            if _out_text not in _inv:\n\t                                _inv[_out_text] = []\n", "                            _inv[_out_text].append(_tile)\n\t                        _tile_groups = [(_out_text, _tiles) for _out_text, _tiles in _inv.items()]\n\t                    else:\n\t                        _tile_groups = [(None, [_tile]) for _tile in _count_tag_to_tiles[_tag]]\n\t                    if len(_tile_groups) <= 1:\n\t                        continue\n\t                    for _out_text, _tiles in _tile_groups:\n\t                        _wt = 0.0\n\t                        for _tile in _tiles:\n\t                            _wt += _count_tag_to_tiles[_tag][_tile]\n", "                        _lo = max(0,         math.floor(counts_scale_lo * len(_rcs) * _wt))\n\t                        _hi = min(len(_rcs), math.ceil (counts_scale_hi * len(_rcs) * _wt))\n\t                        self.add_constraint_tile_counts(_rcs, _tiles, _lo, _hi, weight_counts)\n\t        for rr_divs in range(self._scheme_info.count_info.divs_size[0]):\n\t            for cc_divs in range(self._scheme_info.count_info.divs_size[1]):\n\t                rr_lo = self._rows * (rr_divs + 0) // self._scheme_info.count_info.divs_size[0]\n\t                rr_hi = self._rows * (rr_divs + 1) // self._scheme_info.count_info.divs_size[0]\n\t                cc_lo = self._cols * (cc_divs + 0) // self._scheme_info.count_info.divs_size[1]\n\t                cc_hi = self._cols * (cc_divs + 1) // self._scheme_info.count_info.divs_size[1]\n\t                add_counts(rr_lo, rr_hi, cc_lo, cc_hi, self._scheme_info.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)])\n", "    def add_constraint_tile_counts(self, rcs, tiles, lo, hi, weight_counts):\n\t        util.check(lo <= hi, 'counts')\n\t        util.check(weight_counts is None or weight_counts > 0, 'weight')\n\t        vvs = [self._tile_var(rr, cc, tile) for rr, cc in rcs for tile in tiles]\n\t        self._solver.cnstr_count(vvs, True, lo, hi, weight_counts)\n\t    def reachability_edges(self):\n\t        if self._reach_info is None:\n\t            return None\n\t        edges = {}\n\t        for edge_key in self._reach_vars_edge:\n", "            fr, fc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed = edge_key\n\t            edges[(fr, fc, tr, tc, pwtc)] = None\n\t        return edges\n\t    def add_constraint_reach_edge(self, cfr, cfc, ctr, ctc, cpwtc, on_path, weight):\n\t        edge_vars = []\n\t        for edge_key in self._reach_out_edges[(cfr, cfc)]:\n\t            fr, fc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed = edge_key\n\t            if (cfr, cfc, ctr, ctc, cpwtc) == (fr, fc, tr, tc, pwtc):\n\t                edge_vars.append(self._reach_vars_edge[edge_key])\n\t        edge_count = 1 if on_path else 0\n", "        self._solver.cnstr_count(edge_vars, True, edge_count, edge_count, weight)\n\t    def add_constraint_start(self, rr, cc, on_path, weight):\n\t        game = self._game_level[rr][cc]\n\t        move_info = self._reach_info.game_to_move[game]\n\t        vv = self._tile_var(rr, cc, move_info.start_tile)\n\t        self._solver.cnstr_count([vv], on_path, 1, 1, weight)\n\t    def add_constraint_goal(self, rr, cc, on_path, weight):\n\t        game = self._game_level[rr][cc]\n\t        move_info = self._reach_info.game_to_move[game]\n\t        vv = self._tile_var(rr, cc, move_info.goal_tile)\n", "        self._solver.cnstr_count([vv], on_path, 1, 1, weight)\n\t    def add_rules_reachability(self, reach_info):\n\t        print('add reachability constraints')\n\t        self._reach_info = reach_info\n\t        nodes = []\n\t        in_edges = {}\n\t        out_edges = {}\n\t        possible_start_vvs, possible_goal_vvs = [], []\n\t        impossible_start_vvs, impossible_goal_vvs = [], []\n\t        for (rr, cc) in self._vars_rc_t:\n", "            game = self._game_level[rr][cc]\n\t            move_info = reach_info.game_to_move[game]\n\t            if self._tile_has_var(rr, cc, move_info.start_tile):\n\t                vv = self._tile_var(rr, cc, move_info.start_tile)\n\t                if (rr, cc) in reach_info.start_rcs:\n\t                    possible_start_vvs.append(vv)\n\t                else:\n\t                    impossible_start_vvs.append(vv)\n\t            if self._tile_has_var(rr, cc, move_info.goal_tile):\n\t                vv = self._tile_var(rr, cc, move_info.goal_tile)\n", "                if (rr, cc) in reach_info.goal_rcs:\n\t                    possible_goal_vvs.append(vv)\n\t                else:\n\t                    impossible_goal_vvs.append(vv)\n\t        # exactly one start in possible tiles\n\t        self._solver.cnstr_count(possible_start_vvs, True, 1, 1, None)\n\t        # no start in impossible tiles\n\t        self._solver.cnstr_count(impossible_start_vvs, True, 0, 0, None)\n\t        # exactly one goal in possible tiles\n\t        self._solver.cnstr_count(possible_goal_vvs, True, 1, 1, None)\n", "        # no goal in impossible tiles\n\t        self._solver.cnstr_count(impossible_goal_vvs, True, 0, 0, None)\n\t        for rr, cc in self._vars_rc_t:\n\t            util.check(not self._tile_has_var(rr, cc, util.VOID_TILE), 'void tile')\n\t            node = (rr, cc)\n\t            nodes.append(node)\n\t            out_edges[node] = {}\n\t            in_edges[node] = {}\n\t            self._reach_vars_node[(rr, cc)] = self._solver.make_var()\n\t        for rr, cc in nodes:\n", "            game = self._game_level[rr][cc]\n\t            move_info = reach_info.game_to_move[game]\n\t            for dest_delta, need_open_path_delta, need_open_aux_delta, need_closed_delta in move_info.move_template:\n\t                def inst_deltas(_deltas):\n\t                    _inst = ()\n\t                    for _dr, _dc in _deltas:\n\t                        _nr = rr + _dr\n\t                        _nc = cc + _dc\n\t                        if move_info.wrap_cols: _nc = _nc % self._cols\n\t                        if (_nr, _nc) not in nodes:\n", "                            return None\n\t                        _inst = _inst + ((_nr, _nc),)\n\t                    return _inst\n\t                need_open_path = inst_deltas(need_open_path_delta + [dest_delta])\n\t                if need_open_path is None:\n\t                    continue\n\t                need_open_aux = inst_deltas(need_open_aux_delta)\n\t                if need_open_aux is None:\n\t                    continue\n\t                need_closed = inst_deltas(need_closed_delta)\n", "                if need_closed is None:\n\t                    continue\n\t                tr = rr + dest_delta[0]\n\t                tc = cc + dest_delta[1]\n\t                pwtc = tc\n\t                if move_info.wrap_cols: tc = tc % self._cols\n\t                edge_key = (rr, cc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed)\n\t                out_edges[(rr, cc)][edge_key] = None\n\t                in_edges[(tr, tc)][edge_key] = None\n\t                if edge_key not in self._reach_vars_edge:\n", "                    self._reach_vars_edge[edge_key] = self._solver.make_var()\n\t        open_vars = {}\n\t        for rr, cc in nodes:\n\t            game = self._game_level[rr][cc]\n\t            move_info = reach_info.game_to_move[game]\n\t            # TODO: treat start and goal tiles separately from open tiles?\n\t            all_open_tiles = move_info.open_tiles + [move_info.start_tile, move_info.goal_tile]\n\t            if len(all_open_tiles) == 1:\n\t                open_var = self._tile_var(rr, cc, all_open_tiles[0])\n\t            else:\n", "                open_var = self._solver.make_var()\n\t                open_tile_vvs = [self._tile_var(rr, cc, all_open_tile) for all_open_tile in all_open_tiles]\n\t                for open_tile_vv in open_tile_vvs:\n\t                    self._solver.cnstr_implies_disj(open_tile_vv, True, [open_var], True, None)\n\t                self._solver.cnstr_implies_disj(open_var, True, open_tile_vvs, True, None)\n\t            open_vars[(rr, cc)] = open_var\n\t        for rr, cc in nodes:\n\t            game = self._game_level[rr][cc]\n\t            move_info = reach_info.game_to_move[game]\n\t            reach_node_var = self._reach_vars_node[(rr, cc)]\n", "            out_vvs = []\n\t            for edge_key in out_edges[(rr, cc)]:\n\t                reach_out_edge_var = self._reach_vars_edge[edge_key]\n\t                out_vvs.append(reach_out_edge_var)\n\t                fr, fc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed = edge_key\n\t                util.check((fr, fc) == (rr, cc), 'edge')\n\t                self._solver.cnstr_implies_disj(reach_node_var, False, [reach_out_edge_var], False, None) # !reach_node_var -> !reach_out_edge_var\n\t                for nor, noc in need_open_path + need_open_aux:\n\t                    open_out_var = open_vars[(nor, noc)]\n\t                    self._solver.cnstr_implies_disj(open_out_var, False, [reach_out_edge_var], False, None) # !open_out_var -> !reach_out_edge_var\n", "                for ncr, ncc in need_closed:\n\t                    open_out_var = open_vars[(ncr, ncc)]\n\t                    self._solver.cnstr_implies_disj(open_out_var, True, [reach_out_edge_var], False, None) # open_out_var -> !reach_out_edge_var\n\t            in_vvs = []\n\t            for edge_key in in_edges[(rr, cc)]:\n\t                reach_in_edge_var = self._reach_vars_edge[edge_key]\n\t                in_vvs.append(reach_in_edge_var)\n\t            # at most 1 in edge\n\t            if len(in_vvs) > 0:\n\t                self._solver.cnstr_count(in_vvs, True, 0, 1, None)\n", "            # at most 1 out edge\n\t            if len(out_vvs) > 0:\n\t                self._solver.cnstr_count(out_vvs, True, 0, 1, None)\n\t            # start handling\n\t            start_and_in_vvs = in_vvs\n\t            if self._tile_has_var(rr, cc, move_info.start_tile):\n\t                start_tile_var = self._tile_var(rr, cc, move_info.start_tile)\n\t                # start must be reachable\n\t                self._solver.cnstr_implies_disj(start_tile_var, True, [reach_node_var], True, None) # start_tile_var -> reach_node_var\n\t                # start has no in edges\n", "                for in_vv in in_vvs:\n\t                    self._solver.cnstr_implies_disj(start_tile_var, True, [in_vv], False, None) # ... start_tile_var -> A !in_edge\n\t                start_and_in_vvs = [start_tile_var] + start_and_in_vvs\n\t            # unless it's the start, no in edges means not reachable\n\t            conj_start_and_in_vvs = self._solver.make_conj(start_and_in_vvs, False)\n\t            self._solver.cnstr_implies_disj(conj_start_and_in_vvs, True, [reach_node_var], False, None) # !start_tile_var & A !in_edge -> !reach_node_var\n\t            # goal handling\n\t            if self._tile_has_var(rr, cc, move_info.goal_tile):\n\t                goal_tile_var = self._tile_var(rr, cc, move_info.goal_tile)\n\t                # goal must be reachable\n", "                self._solver.cnstr_implies_disj(goal_tile_var, True, [reach_node_var], True, None) # goal_tile_var -> reach_node_var\n\t                # goal has no out edges\n\t                for out_vv in out_vvs:\n\t                    self._solver.cnstr_implies_disj(goal_tile_var, True, [out_vv], False, None) # ... goal_tile_var -> A !in_edge\n\t        self._reach_out_edges = out_edges\n\t    def solve(self):\n\t        if self._solver.solve():\n\t            print('objective: %s' % str(self._solver.get_objective()))\n\t            return True\n\t        else:\n", "            return False\n\t    def get_result(self):\n\t        res_info = util.ResultInfo()\n\t        res_info.objective = self._solver.get_objective()\n\t        res_info.extra_meta += self._extra_meta\n\t        res_info.reach_info = None\n\t        if self._reach_info:\n\t            res_info.reach_info = util.ResultReachInfo()\n\t            res_info.reach_info.path_edges, res_info.reach_info.path_tiles, path_edge_keys = self._get_reach_path()\n\t            res_info.reach_info.offpath_edges = self._get_reach_offpath_edges(path_edge_keys)\n", "        res_info.tile_level = util.make_grid(self._rows, self._cols, util.VOID_TILE)\n\t        res_info.text_level = None\n\t        res_info.image_level = None\n\t        set_tiles = self._get_tiles_set()\n\t        for rr in range(self._rows):\n\t            for cc in range(self._cols):\n\t                tag = self._tag_level[rr][cc]\n\t                if (rr, cc) in set_tiles:\n\t                    found_tile = set_tiles[(rr, cc)]\n\t                else:\n", "                    found_tile = util.VOID_TILE\n\t                util.check((tag == util.VOID_TEXT) == (found_tile == util.VOID_TILE), 'void')\n\t                res_info.tile_level[rr][cc] = found_tile\n\t        if self._scheme_info.tileset.tile_to_text is not None:\n\t            res_info.text_level = util.tile_level_to_text_level(res_info.tile_level, self._scheme_info.tileset)\n\t        if self._scheme_info.tileset.tile_to_image is not None:\n\t            res_info.image_level = util.tile_level_to_image_level(res_info.tile_level, self._scheme_info.tileset)\n\t        return res_info\n\t    def _get_tiles_set(self):\n\t        tiles = {}\n", "        for rr, cc in self._vars_rc_t:\n\t            found_tile = None\n\t            for tile in self._vars_rc_t[(rr, cc)]:\n\t                if self._solver.get_var(self._vars_rc_t[(rr, cc)][tile]):\n\t                    util.check(found_tile is None, 'multiple tiles selected.')\n\t                    found_tile = tile\n\t            util.check(found_tile is not None, 'no tile selected.')\n\t            tiles[(rr, cc)] = found_tile\n\t        return tiles\n\t    def _get_reach_path(self):\n", "        if not self._reach_info:\n\t            return None\n\t        node_path = []\n\t        tile_path = []\n\t        key_path = []\n\t        start_rc, goal_rc = None, None\n\t        for (rr, cc) in self._vars_rc_t:\n\t            game = self._game_level[rr][cc]\n\t            move_info = self._reach_info.game_to_move[game]\n\t            if move_info.start_tile in self._vars_rc_t[(rr, cc)] and self._solver.get_var(self._tile_var(rr, cc, move_info.start_tile)):\n", "                start_rc = (rr, cc)\n\t            if move_info.goal_tile in self._vars_rc_t[(rr, cc)] and self._solver.get_var(self._tile_var(rr, cc, move_info.goal_tile)):\n\t                goal_rc = (rr, cc)\n\t        util.check(start_rc is not None, 'no start')\n\t        util.check(goal_rc is not None, 'no goal')\n\t        tile_path.append(start_rc)\n\t        current_node = start_rc\n\t        while current_node:\n\t            rr, cc = current_node\n\t            current_reachable = self._solver.get_var(self._reach_vars_node[(rr, cc)])\n", "            util.check(current_reachable, 'current node not reachable')\n\t            next_node = None\n\t            for edge_key in self._reach_out_edges[(rr, cc)]:\n\t                fr, fc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed = edge_key\n\t                util.check(fr == rr and fc == cc, 'edge')\n\t                out_reachable = self._solver.get_var(self._reach_vars_edge[edge_key])\n\t                if out_reachable:\n\t                    util.check(next_node is None, 'multiple out edges')\n\t                    util.check(need_open_path[-1] == (tr, tc), 'path does not end at node')\n\t                    for nr, nc in need_open_path:\n", "                        tile_path.append((nr, nc))\n\t                    if tc == pwtc:\n\t                        node_path.append((fr, fc, tr, tc))\n\t                    else:\n\t                        node_path.append((fr, fc, tr, pwtc))\n\t                        node_path.append((fr, fc + (tc - pwtc), tr, tc))\n\t                    key_path.append(edge_key)\n\t                    next_node = (tr, tc)\n\t            util.check(next_node is not None or current_node == goal_rc, 'path does not end at goal')\n\t            current_node = next_node\n", "        for (ra, ca), (rb, cb) in zip(tile_path, tile_path[1:]):\n\t            game = self._game_level[ra][ca]\n\t            move_info = self._reach_info.game_to_move[game]\n\t            if not move_info.wrap_cols:\n\t                util.check(abs(ra - rb) + abs(ca - cb) == 1, 'path tiles')\n\t            else:\n\t                if ca > 1 + cb:\n\t                    cb += self._cols\n\t                if cb > 1 + ca:\n\t                    ca += self._cols\n", "                util.check(abs(ra - rb) + abs(ca - cb) == 1, 'path tiles')\n\t        return node_path, tile_path, key_path\n\t    def _get_reach_offpath_edges(self, path_edge_keys):\n\t        if not self._reach_info:\n\t            return None\n\t        edges = {}\n\t        for edge_key in self._reach_vars_edge:\n\t            edge_reachable = self._solver.get_var(self._reach_vars_edge[edge_key])\n\t            if edge_reachable and edge_key not in path_edge_keys:\n\t                fr, fc, tr, tc, pwtc, need_open_path, need_open_aux, need_closed = edge_key\n", "                if tc == pwtc:\n\t                    edges[(fr, fc, tr, tc)] = None\n\t                else:\n\t                    edges[(fr, fc, tr, pwtc)] = None\n\t                    edges[(fr, fc + (tc - pwtc), tr, tc)] = None\n\t        return list(edges.keys())\n"]}
{"filename": "util.py", "chunked_list": ["import atexit, bz2, copy, gzip, json, os, pickle, shutil, subprocess, sys, time\n\timport PIL.Image\n\tMETA_STR        = 'META'\n\tMGROUP_PATH     = 'path'\n\tMGROUP_OFFPATH  = 'offpath'\n\tOPEN_TEXT       = '-'\n\tOPEN_TEXT_ZELDA = 'DLOMS-'\n\tSTART_TEXT      = '{'\n\tGOAL_TEXT       = '}'\n\tDEFAULT_TEXT    = ','\n", "PATH_TEXT       = 'p'\n\tVOID_TEXT       = ' '\n\tVOID_TILE       = -1\n\tSPECIAL_CHARS = [PATH_TEXT]\n\tINDEX_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tclass TileSetInfo:\n\t    def __init__(self):\n\t        self.tile_ids = None\n\t        self.tile_to_text = None\n\t        self.tile_to_image = None\n", "        self.tile_image_size = None\n\tclass TileLevelInfo:\n\t    def __init__(self):\n\t        self.tiles = None\n\t        self.tags = None\n\t        self.games = None\n\t        self.meta = None\n\tclass TileInfo:\n\t    def __init__(self):\n\t        self.tileset = None\n", "        self.levels = None\n\tclass SchemeCountInfo:\n\t    def __init__(self):\n\t        self.divs_size = None\n\t        self.divs_to_game_to_tag_to_tile_count = None\n\tclass SchemePatternInfo:\n\t    def __init__(self):\n\t        self.game_to_patterns = None\n\t        self.stride_rows = None\n\t        self.stride_cols = None\n", "        self.dr_lo = None\n\t        self.dr_hi = None\n\t        self.dc_lo = None\n\t        self.dc_hi = None\n\tclass SchemeInfo:\n\t    def __init__(self):\n\t        self.tileset = None\n\t        self.game_to_tag_to_tiles = None\n\t        self.count_info = None\n\t        self.pattern_info = None\n", "class ReachabilitySetup:\n\t    def __init__(self):\n\t        self.game_to_move = None\n\t        self.wrap_cols = None\n\t        self.goal_loc = None\n\t        self.goal_params = None\n\t        self.open_text = None\n\tclass GameMoveInfo:\n\t    def __init__(self):\n\t        self.start_tile = None\n", "        self.goal_tile = None\n\t        self.open_tiles = None\n\t        self.move_template = None\n\t        self.wrap_cols = None\n\tclass ReachabilityInfo:\n\t    def __init__(self):\n\t        self.start_rcs = None\n\t        self.goal_rcs = None\n\t        self.game_to_move = None\n\tclass ResultReachInfo:\n", "    def __init__(self):\n\t        self.path_edges = None\n\t        self.path_tiles = None\n\t        self.offpath_edges = None\n\tclass ResultExecutionInfo:\n\t    def __init__(self):\n\t        self.levels = None\n\t        self.names = None\n\t        self.changes = None\n\t        self.term = None\n", "        self.first_term = None\n\tclass ResultInfo:\n\t    def __init__(self):\n\t        self.tile_level = None\n\t        self.text_level = None\n\t        self.image_level = None\n\t        self.reach_info = None\n\t        self.execution_info = None\n\t        self.objective = None\n\t        self.extra_meta = []\n", "class SectionTimer:\n\t    def __init__(self):\n\t        self._start_time = time.time()\n\t        self._last_section = None\n\t        self._last_time = None\n\t    def print_done(self):\n\t        if not mute_time():\n\t            print('--TOTALTIME %.2f' % (time.time() - self._start_time))\n\t    def print_section(self, section):\n\t        curr_time = time.time()\n", "        if self._last_section is not None:\n\t            if mute_time():\n\t                print('...%s done' % self._last_section, flush=True)\n\t            else:\n\t                last = '%.2f' % (curr_time - self._last_time)\n\t                total = '%.2f' % (curr_time - self._start_time)\n\t                print('...%s took %s, %s' % (self._last_section, last, total), flush=True)\n\t        self._last_section = section\n\t        self._last_time = curr_time\n\t        if section is not None:\n", "            print('starting %s...' % (section), flush=True)\n\t_section_timer = None\n\tdef _timer_stop():\n\t    global _section_timer\n\t    _section_timer.print_section(None)\n\t    _section_timer.print_done()\n\t    _section_timer = None\n\tdef timer_start(print_cmdline=True):\n\t    global _section_timer\n\t    _section_timer = SectionTimer()\n", "    atexit.register(_timer_stop)\n\t    if print_cmdline:\n\t        print('running ' + subprocess.list2cmdline(sys.argv))\n\tdef timer_section(section):\n\t    global _section_timer\n\t    if _section_timer is None:\n\t        print(section)\n\t    else:\n\t        _section_timer.print_section(section)\n\tdef mute_time():\n", "    return os.environ.get('STG_MUTE_TIME')\n\tdef mute_port():\n\t    return os.environ.get('STG_MUTE_PORT')\n\tdef write_time(ss):\n\t    if not mute_time():\n\t        sys.stdout.write(ss)\n\t        sys.stdout.flush()\n\tdef write_portfolio(ss):\n\t    if not mute_port():\n\t        sys.stdout.write(ss)\n", "        sys.stdout.flush()\n\tdef exit_solution_found():\n\t    sys.stdout.write('--SOLVED\\n')\n\t    sys.stdout.flush()\n\t    sys.exit(0)\n\tdef exit_solution_not_found():\n\t    sys.stdout.write('--NOSOLUTION\\n')\n\t    sys.stdout.flush()\n\t    sys.exit(-1)\n\tdef check(cond, msg):\n", "    if not cond:\n\t        raise RuntimeError(msg)\n\tdef arg_list_to_dict(parser, name, arg_list, check_option):\n\t    if arg_list is None:\n\t        return None\n\t    res = {}\n\t    if len(arg_list) == 1 and '=' not in arg_list[0]:\n\t        res[DEFAULT_TEXT] = check_option(arg_list[0])\n\t    else:\n\t        for kv in arg_list:\n", "            if kv.count('=') != 1:\n\t                parser.error(name + ' as dict must have exactly 1 =')\n\t            key, val = kv.split('=')\n\t            res[key] = check_option(val)\n\t    return res\n\tdef arg_list_to_dict_int(parser, name, arg_list):\n\t    return arg_list_to_dict(parser, name, arg_list, int)\n\tdef arg_list_to_dict_options(parser, name, arg_list, val_options):\n\t    def check_option(option):\n\t        if option not in val_options:\n", "            parser.error(name + ' must be in ' + ','.join(val_options))\n\t        return option\n\t    return arg_list_to_dict(parser, name, arg_list, check_option)\n\tdef check_tileset_match(ts0, ts1):\n\t    check(ts0.tile_ids == ts1.tile_ids, 'tileset mismatch')\n\t    check(ts0.tile_image_size == ts1.tile_image_size, 'tileset mismatch')\n\t    if ts0.tile_to_text is not None or ts1.tile_to_text is not None:\n\t        check(ts0.tile_to_text is not None and ts1.tile_to_text is not None, 'tileset mismatch')\n\t        for tile in ts0.tile_ids:\n\t            check(ts0.tile_to_text[tile] == ts1.tile_to_text[tile], 'tileset mismatch')\n", "    else:\n\t        check(ts0.tile_to_text is None and ts1.tile_to_text is None, 'tileset mismatch')\n\t    if ts0.tile_to_image is not None or ts1.tile_to_image is not None:\n\t        check(ts0.tile_to_image is not None and ts1.tile_to_image is not None, 'tileset mismatch')\n\t        for tile in ts0.tile_ids:\n\t            check(tuple(ts0.tile_to_image[tile].getdata()) == tuple(ts1.tile_to_image[tile].getdata()), 'tileset mismatch')\n\t    else:\n\t        check(ts0.tile_to_image is None and ts1.tile_to_image is None, 'tileset mismatch')\n\tdef make_grid(rows, cols, elem):\n\t    out = []\n", "    for rr in range(rows):\n\t        out_row = []\n\t        for cc in range(cols):\n\t            out_row.append(copy.copy(elem))\n\t        out.append(out_row)\n\t    return out\n\tdef rotate_grid_cw(grid):\n\t    return [list(elem) for elem in zip(*grid[::-1])]\n\tdef corner_indices(til, depth):\n\t    def corner_indices_helper(_fra, _til, _depth, _sofar, _track):\n", "        if _depth == 0:\n\t            _track.append(_sofar)\n\t        else:\n\t            for _ind in range(_fra, _til):\n\t                corner_indices_helper(_ind + 1, _til, _depth - 1, _sofar + (_ind,), _track)\n\t    ret = []\n\t    corner_indices_helper(0, til, depth, (), ret)\n\t    return ret\n\tdef fileistype(fn, ext):\n\t    return fn.endswith(ext) or fn.endswith(ext + '.gz') or fn.endswith(ext + '.bz2')\n", "def fresh_image(image):\n\t    image_data = PIL.Image.new(image.mode, image.size)\n\t    image_data.putdata(image.getdata())\n\t    return image_data\n\tdef trim_void_tile_level(tile_level):\n\t    rows, cols = len(tile_level), len(tile_level[0])\n\t    rr_lo, rr_hi = rows, 0\n\t    for rr in range(rows):\n\t        any_nonvoid = False\n\t        for cc in range(cols):\n", "            if tile_level[rr][cc] != VOID_TILE:\n\t                any_nonvoid = True\n\t                break\n\t        if any_nonvoid:\n\t            rr_lo = min(rr_lo, rr)\n\t            rr_hi = max(rr_hi, rr + 1)\n\t    cc_lo, cc_hi = cols, 0\n\t    for cc in range(cols):\n\t        any_nonvoid = False\n\t        for rr in range(rows):\n", "            if tile_level[rr][cc] != VOID_TILE:\n\t                any_nonvoid = True\n\t                break\n\t        if any_nonvoid:\n\t            cc_lo = min(cc_lo, cc)\n\t            cc_hi = max(cc_hi, cc + 1)\n\t    ret = []\n\t    for rr in range(rr_lo, rr_hi):\n\t        row = []\n\t        for cc in range(cc_lo, cc_hi):\n", "            row.append(tile_level[rr][cc])\n\t        ret.append(row)\n\t    print(rr_lo, rr_hi, cc_lo, cc_hi)\n\t    print(ret)\n\t    return ret\n\tdef tile_level_to_text_level(tile_level, tileset):\n\t    rows, cols = len(tile_level), len(tile_level[0])\n\t    text_level = make_grid(rows, cols, VOID_TEXT)\n\t    for rr in range(rows):\n\t        for cc in range(cols):\n", "            if tile_level[rr][cc] != VOID_TILE:\n\t                text_level[rr][cc] = tileset.tile_to_text[tile_level[rr][cc]]\n\t    return text_level\n\tdef tile_level_to_image_level(tile_level, tileset):\n\t    rows, cols = len(tile_level), len(tile_level[0])\n\t    image_level = PIL.Image.new('RGBA', (cols * tileset.tile_image_size, rows * tileset.tile_image_size), (0, 0, 0, 0))\n\t    for rr in range(rows):\n\t        for cc in range(cols):\n\t            if tile_level[rr][cc] != VOID_TILE:\n\t                image_level.paste(tileset.tile_to_image[tile_level[rr][cc]], (cc * tileset.tile_image_size, rr * tileset.tile_image_size))\n", "    return image_level\n\tdef get_meta_path(meta):\n\t    if meta is not None:\n\t        for md in meta:\n\t            if md['type'] == 'geom' and md['shape'] == 'path' and md['group'] == MGROUP_PATH:\n\t                return [tuple(elem) for elem in md['data']]\n\t    return None\n\tdef get_meta_properties(meta):\n\t    if meta is not None:\n\t        ret = None\n", "        for md in meta:\n\t            if md['type'] == 'property':\n\t                if ret is None:\n\t                    ret = []\n\t                ret += md['value']\n\t        return ret\n\t    return None\n\tdef meta_check_json(obj):\n\t    check(type(obj) == dict, 'json')\n\t    check('type' in obj, 'json')\n", "    check(type(obj['type']) == str, 'json')\n\t    for key, value in obj.items():\n\t        check(type(key) == str, 'json')\n\t        check(type(value) in [str, int, float, list], 'json')\n\t        if type(value) == list:\n\t            for elem in value:\n\t                check(type(elem) in [str, int, float, list], 'json')\n\t                if type(elem) == list:\n\t                    for elem2 in elem:\n\t                        check(type(elem2) in [str, int, float], 'json')\n", "    return obj\n\tdef meta_path(group, data):\n\t    return meta_check_json({ 'type': 'geom', 'shape': 'path', 'group': group, 'data': [list(elem) for elem in data] })\n\tdef meta_line(group, data):\n\t    return meta_check_json({ 'type': 'geom', 'shape': 'line', 'group': group, 'data': [list(elem) for elem in data] })\n\tdef meta_tile(group, data):\n\t    return meta_check_json({ 'type': 'geom', 'shape': 'tile', 'group': group, 'data': [list(elem) for elem in data] })\n\tdef meta_rect(group, data):\n\t    return meta_check_json({ 'type': 'geom', 'shape': 'rect', 'group': group, 'data': [list(elem) for elem in data] })\n\tdef meta_properties(data):\n", "    return meta_check_json({ 'type': 'property', 'value': data })\n\tdef meta_custom(data):\n\t    return meta_check_json(data)\n\tdef openz(filename, mode):\n\t    if filename.endswith('.gz'):\n\t        return gzip.open(filename, mode)\n\t    elif filename.endswith('.bz2'):\n\t        return bz2.open(filename, mode)\n\t    else:\n\t        return open(filename, mode)\n", "def print_result_info(result_info, replace_path_tiles):\n\t    print('tile level')\n\t    print_tile_level(result_info.tile_level)\n\t    if result_info.text_level is not None:\n\t        print('text level')\n\t        print_result_text_level(result_info, [], replace_path_tiles)\n\t    if result_info.execution_info is not None:\n\t        print('execution')\n\t        for level, name, first_term in zip(result_info.execution_info.levels, result_info.execution_info.names, result_info.execution_info.first_term):\n\t            if first_term:\n", "                print('>>> TERM <<<')\n\t                print()\n\t            if name:\n\t                print('>>> ' + name)\n\t            print_text_level(level)\n\t            print()\n\tdef save_result_info(result_info, prefix, compress=False, result_only=False):\n\t    result_name = prefix + '.result'\n\t    if compress:\n\t        result_name += '.gz'\n", "    print('writing result to', result_name)\n\t    with openz(result_name, 'wb') as f:\n\t        pickle.dump(result_info, f)\n\t    if not result_only:\n\t        if result_info.text_level is not None:\n\t            text_name = prefix + '.lvl'\n\t            print('writing text level to', text_name)\n\t            with openz(text_name, 'wt') as f:\n\t                print_result_text_level(result_info, result_info.extra_meta, False, outfile=f)\n\t        if result_info.image_level is not None:\n", "            image_name = prefix + '.png'\n\t            print('writing image level to', image_name)\n\t            result_info.image_level.save(image_name)\n\t        if result_info.execution_info is not None:\n\t            exec_folder = prefix + '_exec'\n\t            print('writing execution levels to', exec_folder)\n\t            if os.path.exists(exec_folder):\n\t                shutil.rmtree(exec_folder)\n\t            os.makedirs(exec_folder)\n\t            for ii, (level, name, changes, term) in enumerate(zip(result_info.execution_info.levels, result_info.execution_info.names, result_info.execution_info.changes, result_info.execution_info.term)):\n", "                descr = ['term' if term else 'step']\n\t                if name:\n\t                    descr.append(name)\n\t                step_name = exec_folder + ('/%02d_' % ii) + '_'.join(descr) + '_exec.lvl'\n\t                meta = result_info.extra_meta\n\t                if len(changes) != 0:\n\t                    meta.append(meta_rect('change', changes))\n\t                meta.append(meta_custom({'type': 'mkiii', 'desc': descr}))\n\t                with openz(step_name, 'wt') as f:\n\t                    print_text_level(level, meta=meta, outfile=f)\n", "def index_to_char(idx):\n\t    if idx < len(INDEX_CHARS):\n\t        return INDEX_CHARS[idx]\n\t    else:\n\t        return '?'\n\tdef print_tile_level(tile_level, outfile=None):\n\t    if outfile is None:\n\t        outfile = sys.stdout\n\t    for row in tile_level:\n\t        for tile in row:\n", "            if tile == VOID_TILE:\n\t                display_tile = VOID_TEXT\n\t            else:\n\t                display_tile = index_to_char(tile)\n\t            outfile.write(display_tile)\n\t        outfile.write('\\n')\n\tdef print_tile_level_json(tile_level, meta=None, outfile=None):\n\t    if outfile is None:\n\t        outfile = sys.stdout\n\t    out = {}\n", "    out['tile'] = tile_level\n\t    if meta != None:\n\t        out['meta'] = meta\n\t    json.dump(out, outfile)\n\t    outfile.write('\\n')\n\tdef print_result_text_level(result_info, extra_meta, replace_path_tiles, outfile=None):\n\t    if outfile is None:\n\t        outfile = sys.stdout\n\t    meta = []\n\t    if result_info.reach_info is not None:\n", "        meta.append(meta_path(MGROUP_PATH, result_info.reach_info.path_edges))\n\t        meta.append(meta_tile(MGROUP_PATH, result_info.reach_info.path_tiles))\n\t        meta.append(meta_line(MGROUP_OFFPATH, result_info.reach_info.offpath_edges))\n\t    if extra_meta is not None:\n\t        meta += extra_meta\n\t    if replace_path_tiles and result_info.reach_info is not None:\n\t        path_tiles = result_info.reach_info.path_tiles\n\t    else:\n\t        path_tiles = None\n\t    print_text_level(result_info.text_level, meta=meta, replace_path_tiles=path_tiles, outfile=outfile)\n", "def print_text_level(text_level, meta=None, replace_path_tiles=None, outfile=None):\n\t    if outfile is None:\n\t        outfile = sys.stdout\n\t    for rr, row in enumerate(text_level):\n\t        for cc, tile in enumerate(row):\n\t            if replace_path_tiles is not None and (rr, cc) in replace_path_tiles:\n\t                outfile.write(PATH_TEXT)\n\t            else:\n\t                outfile.write(tile)\n\t        outfile.write('\\n')\n", "    if meta is not None:\n\t        for md in meta:\n\t            outfile.write(META_STR + ' ' + json.dumps(md) + '\\n')\n\tdef process_old_meta(line):\n\t    TAG = 'META DRAW'\n\t    if line.startswith(TAG):\n\t        res = {}\n\t        res['type'] = 'geom'\n\t        line = line[len(TAG):].strip()\n\t        splt = line.split(':')\n", "        check(len(splt) == 2, 'split')\n\t        res['shape'] = splt[0].strip().lower()\n\t        line = splt[1].strip()\n\t        splt = line.split(';')\n\t        if len(splt) == 1:\n\t            points_str = splt[0].strip()\n\t        elif len(splt) == 2:\n\t            res['group'] = splt[0].strip()\n\t            points_str = splt[1].strip()\n\t        else:\n", "            check(False, 'split')\n\t        def _number(_s):\n\t            _ret = float(_s)\n\t            if _ret == int(_ret):\n\t                return int(_ret)\n\t            else:\n\t                return _ret\n\t        res['data'] = [tuple([_number(el) for el in pt.strip().split()]) for pt in points_str.split(',')]\n\t        return res\n\t    TAG = 'META REM'\n", "    if line.startswith(TAG):\n\t        return {'type': 'comment', 'value': line[len(TAG):].strip()}\n\t    return None\n\tdef read_text_level(infilename, include_meta=False):\n\t    with openz(infilename, 'rt') as infile:\n\t        lvl = []\n\t        meta = []\n\t        for line in infile.readlines():\n\t            line = line.rstrip('\\n')\n\t            old_meta = process_old_meta(line)\n", "            if old_meta is not None:\n\t                meta.append(old_meta)\n\t            elif line.startswith(META_STR):\n\t                if include_meta:\n\t                    meta.append(json.loads(line[len(META_STR):]))\n\t            else:\n\t                for special_char in SPECIAL_CHARS:\n\t                    check(special_char not in line, 'special char ' + special_char + ' in level.')\n\t                lvl.append([c for c in line])\n\t        if include_meta:\n", "            return lvl, meta\n\t        else:\n\t            return lvl\n"]}
{"filename": "tile2scheme.py", "chunked_list": ["import argparse, pickle, pprint, sys\n\timport util\n\tPATTERN_NEIGH_2        = [([(0, 0)], [( 0, 1)]),\n\t                          ([(0, 0)], [( 1, 0)])]\n\tPATTERN_NEIGH_L        = [([(0, 0)], [( 0, 1)]),\n\t                          ([(0, 0)], [( 1, 1)]),\n\t                          ([(0, 0)], [( 1, 0)])]\n\tPATTERN_NEIGH_PLUS     = [([(0, 0)], [( 0,  1)]),\n\t                          ([(0, 0)], [( 1,  0)]),\n\t                          ([(0, 0)], [( 0, -1)]),\n", "                          ([(0, 0)], [(-1,  0)])]\n\tPATTERN_NEIGH_BLOCK2   = [([(0, 0), (0, 1), (1, 0), (1, 1)], [(2, 0), (2, 1)]),\n\t                          ([(0, 0), (0, 1), (1, 0), (1, 1)], [(0, 2), (1, 2)]),\n\t                          ([(0, 0), (0, 1), (1, 0), (1, 1)], [(1, 2), (2, 1), (2, 2)])]\n\tPATTERN_NO_OUT_BLOCK_2  = [([(0, 0), (0, 1), (1, 0), (1, 1)], None)]\n\tPATTERN_NO_OUT_BLOCK_3  = [([(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)], None)]\n\tPATTERN_BLOCKZ         = [([(0, 0)], [(0, 1), (1, 1)]),\n\t                          ([(0, 0)], [(1, 0), (1, 1)])]\n\t#PATTERN_BLOCKZ        = [([(0, 0)], [(0, 1)]),\n\t#                          ([(0, 0)], [(1, 0)]),\n", "#                          ([(1, 0), (0, 1)], [(1, 1)])]\n\tPATTERN_BLOCK2         = [([(0, 0)],\n\t                           [(0, 1), (1, 1), (1, 0)])]\n\tPATTERN_BLOCK2_INV     = [([(0, 0), (0, 1), (1, 0)],\n\t                           [(1, 1)])]\n\tPATTERN_BLOCK3         = [([(0, 0)],\n\t                           [(0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)])]\n\tPATTERN_RING           = [([(0, 0)],\n\t                           [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)])]\n\tPATTERN_DIAMOND        = [([(0, 0)],\n", "                           [(-2, 0), (-1, -1), (-1, 0), (-1, 1), (0, -2), (0, -1), (0, 1), (0, 2), (1, -1), (1, 0), (1, 1), (2, 0)])]\n\tPATTERN_DYN_NO_OUT_2GRAM_COLS = 'PATTERN_DYN_NO_OUT_2GRAM_COLS'\n\tPATTERN_DYN_3GRAM_COLS        = 'PATTERN_DYN_3GRAM_COLS'\n\tPATTERN_DYN_2GRAM_ROWS        = 'PATTERN_DYN_2GRAM_ROWS'\n\tPATTERN_DYN_ZGRAM_COLS        = 'PATTERN_DYN_ZGRAM_COLS'\n\tPATTERN_DYN_ROOMS             = 'PATTERN_DYN_ROOMS'\n\tPATTERN_DICT = {\n\t    'nbr-2'      : PATTERN_NEIGH_2,\n\t    'nbr-l'      : PATTERN_NEIGH_L,\n\t    'nbr-plus'   : PATTERN_NEIGH_PLUS,\n", "    'nbr-block2' : PATTERN_NEIGH_BLOCK2,\n\t    'noout-bl-2' : PATTERN_NO_OUT_BLOCK_2,\n\t    'noout-bl-3' : PATTERN_NO_OUT_BLOCK_3, # was no-out3\n\t    'blockz'     : PATTERN_BLOCKZ,\n\t    'block2'     : PATTERN_BLOCK2,\n\t    'block2-inv' : PATTERN_BLOCK2_INV,\n\t    'block3'     : PATTERN_BLOCK3,\n\t    'ring'       : PATTERN_RING,\n\t    'diamond'    : PATTERN_DIAMOND,\n\t    'noout-gc-2' : PATTERN_DYN_NO_OUT_2GRAM_COLS,\n", "    '3gc'        : PATTERN_DYN_3GRAM_COLS,\n\t    '2gr'        : PATTERN_DYN_2GRAM_ROWS,\n\t    'zgc'        : PATTERN_DYN_ZGRAM_COLS,\n\t    'rooms'      : PATTERN_DYN_ROOMS,\n\t}\n\tdef inc(tile_dict, key, tile, amount):\n\t    if key not in tile_dict:\n\t        tile_dict[key] = {}\n\t    if tile not in tile_dict[key]:\n\t        tile_dict[key][tile] = 0\n", "    tile_dict[key][tile] += amount\n\tdef normalize(tile_dict):\n\t    for key in tile_dict:\n\t        total = 0\n\t        for tile in tile_dict[key]:\n\t            total += tile_dict[key][tile]\n\t        if total != 0:\n\t            for tile in tile_dict[key]:\n\t                tile_dict[key][tile] = tile_dict[key][tile] / total\n\tdef tiles2scheme(tile_info, divs_size, game_to_patterns_delta, level_rotate):\n", "    ti = tile_info\n\t    si = util.SchemeInfo()\n\t    si.tileset = ti.tileset\n\t    si.game_to_tag_to_tiles = {}\n\t    if divs_size is None:\n\t        si.count_info = None\n\t    else:\n\t        si.count_info = util.SchemeCountInfo()\n\t        si.count_info.divs_size = divs_size\n\t        si.count_info.divs_to_game_to_tag_to_tile_count = {}\n", "        for rr_divs in range(si.count_info.divs_size[0]):\n\t            for cc_divs in range(si.count_info.divs_size[1]):\n\t                si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)] = {}\n\t    if game_to_patterns_delta is None:\n\t        si.pattern_info = None\n\t    else:\n\t        si.pattern_info = util.SchemePatternInfo()\n\t        si.pattern_info.game_to_patterns = {}\n\t        si.pattern_info.stride_rows = 1\n\t        si.pattern_info.stride_cols = 1\n", "        si.pattern_info.dr_lo = 0\n\t        si.pattern_info.dr_hi = 0\n\t        si.pattern_info.dc_lo = 0\n\t        si.pattern_info.dc_hi = 0\n\t        for game, patterns_delta in game_to_patterns_delta.items():\n\t            if patterns_delta == PATTERN_DYN_NO_OUT_2GRAM_COLS:\n\t                util.check(len(game_to_patterns_delta) == 1, 'multiple games stride')\n\t                gram_rows = [len(tli.tiles) for tli in ti.levels]\n\t                util.check(len(set(gram_rows)) == 1, 'all levels must be same height')\n\t                gram_rows = gram_rows[0]\n", "                si.pattern_info.stride_rows = 0\n\t                patterns_delta = [([(rr, cc) for rr in range(gram_rows) for cc in range(2)], None)]\n\t                game_to_patterns_delta[game] = patterns_delta\n\t            elif patterns_delta == PATTERN_DYN_3GRAM_COLS:\n\t                util.check(len(game_to_patterns_delta) == 1, 'multiple games stride')\n\t                gram_rows = [len(tli.tiles) for tli in ti.levels]\n\t                util.check(len(set(gram_rows)) == 1, 'all levels must be same height')\n\t                gram_rows = gram_rows[0]\n\t                si.pattern_info.stride_rows = 0\n\t                patterns_delta = [([(rr, cc) for rr in range(gram_rows) for cc in range(2)],\n", "                                   [(rr, 2) for rr in range(gram_rows)])]\n\t                game_to_patterns_delta[game] = patterns_delta\n\t            elif patterns_delta == PATTERN_DYN_2GRAM_ROWS:\n\t                util.check(len(game_to_patterns_delta) == 1, 'multiple games stride')\n\t                gram_cols = [len(tli.tiles[0]) for tli in ti.levels]\n\t                util.check(len(set(gram_cols)) == 1, 'all levels must be same width')\n\t                gram_cols = gram_cols[0]\n\t                si.pattern_info.stride_cols = 0\n\t                patterns_delta = [([(rr, cc) for rr in [0] for cc in range(gram_cols)],\n\t                                   [(1, cc) for cc in range(gram_cols)])]\n", "                game_to_patterns_delta[game] = patterns_delta\n\t            elif patterns_delta == PATTERN_DYN_ZGRAM_COLS:\n\t                util.check(len(game_to_patterns_delta) == 1, 'multiple games stride')\n\t                si.pattern_info.stride_rows = 11\n\t                patterns_delta = [([(rr, 0) for rr in range(11)],\n\t                                   [(rr, 1) for rr in range(11)]),\n\t                                  ([(10, 0)],\n\t                                   [(11, 0)])]\n\t                game_to_patterns_delta[game] = patterns_delta\n\t            elif patterns_delta == PATTERN_DYN_ROOMS:\n", "                util.check(len(game_to_patterns_delta) == 1, 'multiple games stride')\n\t                si.pattern_info.stride_rows = 11\n\t                si.pattern_info.stride_cols = 3\n\t                patterns_delta = [\n\t                    ([(rr, cc) for rr in range(11) for cc in range(3)],\n\t                     None),\n\t                    ([(rr, 2) for rr in range(11)],\n\t                     [(rr, 3) for rr in range(11)]),\n\t                    ([(10, cc) for cc in range(3)],\n\t                     [(11, cc) for cc in range(3)])\n", "                ]\n\t                game_to_patterns_delta[game] = patterns_delta\n\t        for game, patterns_delta in game_to_patterns_delta.items():\n\t            if patterns_delta is None:\n\t                si.pattern_info.game_to_patterns[game] = None\n\t            else:\n\t                si.pattern_info.game_to_patterns[game] = {}\n\t                for pattern_template_in, pattern_template_out in patterns_delta:\n\t                    for dr, dc in pattern_template_in + (pattern_template_out if pattern_template_out else []):\n\t                        si.pattern_info.dr_lo = min(si.pattern_info.dr_lo, dr)\n", "                        si.pattern_info.dr_hi = max(si.pattern_info.dr_hi, dr)\n\t                        si.pattern_info.dc_lo = min(si.pattern_info.dc_lo, dc)\n\t                        si.pattern_info.dc_hi = max(si.pattern_info.dc_hi, dc)\n\t    tile_levels, tag_levels, game_levels = [], [], []\n\t    for tli in ti.levels:\n\t        tile_level = tli.tiles\n\t        tag_level = tli.tags\n\t        game_level = tli.games\n\t        tile_levels.append(tile_level)\n\t        tag_levels.append(tag_level)\n", "        game_levels.append(game_level)\n\t        if level_rotate:\n\t            for ii in range(3):\n\t                tile_level = util.rotate_grid_cw(tile_level)\n\t                tag_level = util.rotate_grid_cw(tag_level)\n\t                game_level = util.rotate_grid_cw(game_level)\n\t                tile_levels.append(tile_level)\n\t                tag_levels.append(tag_level)\n\t                game_levels.append(game_level)\n\t    for tile_level, tag_level, game_level in zip(tile_levels, tag_levels, game_levels):\n", "        rows = len(tile_level)\n\t        cols = len(tile_level[0])\n\t        util.print_tile_level(tile_level)\n\t        print()\n\t        for rr in range(rows):\n\t            for cc in range(cols):\n\t                tile = tile_level[rr][cc]\n\t                tag = tag_level[rr][cc]\n\t                game = game_level[rr][cc]\n\t                util.check(game != util.VOID_TEXT, 'void game')\n", "                util.check((tile == util.VOID_TILE) == (tag == util.VOID_TEXT), 'void')\n\t                if tile == util.VOID_TILE:\n\t                    continue\n\t                if game not in si.game_to_tag_to_tiles:\n\t                    si.game_to_tag_to_tiles[game] = {}\n\t                if tag not in si.game_to_tag_to_tiles[game]:\n\t                    si.game_to_tag_to_tiles[game][tag] = {}\n\t                si.game_to_tag_to_tiles[game][tag][tile] = None\n\t        if si.count_info is not None:\n\t            util.check(si.count_info.divs_size[0] <= rows and si.count_info.divs_size[1] <= cols, 'level to small for divs')\n", "            for rr_divs in range(si.count_info.divs_size[0]):\n\t                for cc_divs in range(si.count_info.divs_size[1]):\n\t                    rr_lo = rows * (rr_divs + 0) // si.count_info.divs_size[0]\n\t                    rr_hi = rows * (rr_divs + 1) // si.count_info.divs_size[0]\n\t                    cc_lo = cols * (cc_divs + 0) // si.count_info.divs_size[1]\n\t                    cc_hi = cols * (cc_divs + 1) // si.count_info.divs_size[1]\n\t                    for game, tag_to_tiles in si.game_to_tag_to_tiles.items():\n\t                        if game not in si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)]:\n\t                            si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)][game] = {}\n\t                            for tag, tiles in tag_to_tiles.items():\n", "                                for tile in tiles:\n\t                                    inc(si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)][game], tag, tile, 0)\n\t                    for rr in range(rr_lo, rr_hi):\n\t                        for cc in range(cc_lo, cc_hi):\n\t                            tile = tile_level[rr][cc]\n\t                            tag = tag_level[rr][cc]\n\t                            game = game_level[rr][cc]\n\t                            util.check(game != util.VOID_TEXT, 'void game')\n\t                            util.check((tile == util.VOID_TILE) == (tag == util.VOID_TEXT), 'void')\n\t                            if tile == util.VOID_TILE:\n", "                                continue\n\t                            inc(si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)][game], tag, tile, 1)\n\t                    for game, tag_to_tiles in si.game_to_tag_to_tiles.items():\n\t                        for tag, tiles in tag_to_tiles.items():\n\t                            for tile in tiles:\n\t                                inc(si.count_info.divs_to_game_to_tag_to_tile_count[(rr_divs, cc_divs)][game], tag, tile, 0)\n\t        if si.pattern_info is not None:\n\t            row_range = range(-si.pattern_info.dr_hi, rows - si.pattern_info.dr_lo, si.pattern_info.stride_rows) if si.pattern_info.stride_rows else [0]\n\t            col_range = range(-si.pattern_info.dc_hi, cols - si.pattern_info.dc_lo, si.pattern_info.stride_cols) if si.pattern_info.stride_cols else [0]\n\t            for rr in row_range:\n", "                for cc in col_range:\n\t                    game = game_level[max(0, min(rows - 1, rr))][max(0, min(cols - 1, cc))]\n\t                    if game_to_patterns_delta[game] is None:\n\t                        continue\n\t                    def get_pattern(_template):\n\t                        _pattern = []\n\t                        for _dr, _dc in _template:\n\t                            _nr = rr + _dr\n\t                            _nc = cc + _dc\n\t                            if _nr <= -1 or _nr >= rows or _nc <= -1 or _nc >= cols:\n", "                                _nbr_tile = util.VOID_TILE\n\t                            else:\n\t                                _nbr_tile = tile_level[_nr][_nc]\n\t                            _pattern.append(_nbr_tile)\n\t                        return tuple(_pattern)\n\t                    for pattern_template_in, pattern_template_out in game_to_patterns_delta[game]:\n\t                        pattern_template_in = tuple(pattern_template_in)\n\t                        pattern_in = get_pattern(pattern_template_in)\n\t                        pattern_template_out = tuple(pattern_template_out) if pattern_template_out else None\n\t                        pattern_out = get_pattern(pattern_template_out) if pattern_template_out else None\n", "                        if pattern_template_in not in si.pattern_info.game_to_patterns[game]:\n\t                            si.pattern_info.game_to_patterns[game][pattern_template_in] = {}\n\t                        if pattern_in not in si.pattern_info.game_to_patterns[game][pattern_template_in]:\n\t                            si.pattern_info.game_to_patterns[game][pattern_template_in][pattern_in] = {}\n\t                        if pattern_template_out not in si.pattern_info.game_to_patterns[game][pattern_template_in][pattern_in]:\n\t                            si.pattern_info.game_to_patterns[game][pattern_template_in][pattern_in][pattern_template_out] = {}\n\t                        si.pattern_info.game_to_patterns[game][pattern_template_in][pattern_in][pattern_template_out][pattern_out] = None\n\t    if si.count_info is not None:\n\t        for grc in si.count_info.divs_to_game_to_tag_to_tile_count:\n\t            for game in si.count_info.divs_to_game_to_tag_to_tile_count[grc]:\n", "                normalize(si.count_info.divs_to_game_to_tag_to_tile_count[grc][game])\n\t    printer = pprint.PrettyPrinter(width=200)\n\t    printer.pprint(si.game_to_tag_to_tiles)\n\t    print()\n\t    if si.count_info is not None:\n\t        print('Counts:')\n\t        printer.pprint(si.count_info.divs_to_game_to_tag_to_tile_count)\n\t    else:\n\t        print('No counts.')\n\t    print()\n", "    if si.pattern_info is not None:\n\t        print('Patterns:')\n\t        print(si.pattern_info.dr_lo, si.pattern_info.dr_hi, si.pattern_info.dc_lo, si.pattern_info.dc_hi, si.pattern_info.stride_rows, si.pattern_info.stride_cols)\n\t        printer.pprint(si.pattern_info.game_to_patterns)\n\t    else:\n\t        print('No patterns.')\n\t    return si\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Create scheme from tile info and (optionally) tag level.')\n", "    parser.add_argument('--outfile', required=True, type=str, help='Output scheme file.')\n\t    parser.add_argument('--tilefile', required=True, type=str, help='Input tile file.')\n\t    parser.add_argument('--countdivs', type=int, nargs=2)\n\t    parser.add_argument('--pattern', type=str, nargs='+', help='Pattern template, from: ' + ','.join(PATTERN_DICT.keys()) + '.')\n\t    parser.add_argument('--level-rotate', action='store_true', help='Rotate levels to create more patterns.')\n\t    parser.add_argument('--quiet', action='store_true', help='Reduce output.')\n\t    args = parser.parse_args()\n\t    if args.quiet:\n\t        sys.stdout = open(os.devnull, 'w')\n\t    with util.openz(args.tilefile, 'rb') as f:\n", "        tile_info = pickle.load(f)\n\t    if args.pattern is not None:\n\t        game_to_patterns_name = util.arg_list_to_dict_options(parser, '--pattern', args.pattern, PATTERN_DICT.keys())\n\t        game_to_patterns_delta = {}\n\t        for game, patterns_name in game_to_patterns_name.items():\n\t            game_to_patterns_delta[game] = PATTERN_DICT[patterns_name]\n\t    else:\n\t        game_to_patterns_delta = None\n\t    scheme_info = tiles2scheme(tile_info, args.countdivs, game_to_patterns_delta, args.level_rotate)\n\t    with util.openz(args.outfile, 'wb') as f:\n", "        pickle.dump(scheme_info, f)\n"]}
{"filename": "dot2graph.py", "chunked_list": ["import argparse, itertools, json, random, sys, time\n\timport util, util_graph\n\timport networkx as nx\n\tMULTILABEL = ';'\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Convert a dot file to a graph file.')\n\t    parser.add_argument('--outfile', type=str, help='Output file.')\n\t    parser.add_argument('--dotfile', required=True, type=str, help='Input dot file.')\n\t    parser.add_argument('--root', type=str, help='Root node label; produces dag, otherwise produces ugraph.')\n", "    args = parser.parse_args()\n\t    dot = nx.DiGraph(nx.nx_pydot.read_dot(args.dotfile))\n\t    for node in dot.nodes:\n\t        dot.nodes[node][util_graph.ATTR_LABEL] = dot.nodes[node][util_graph.ATTR_LABEL].strip('\"')\n\t    for edge in dot.edges:\n\t        dot.edges[edge][util_graph.ATTR_LABEL] = dot.edges[edge][util_graph.ATTR_LABEL].strip('\"')\n\t    grs = util_graph.Graphs()\n\t    grs.colors = {}\n\t    if args.root:\n\t        grs.gtype = util_graph.GTYPE_DAG\n", "        root_node = None\n\t        for node in dot.nodes:\n\t            if dot.nodes[node][util_graph.ATTR_LABEL] == args.root:\n\t                util.check(root_node is None, 'multiple root nodes')\n\t                root_node = node\n\t        util.check(root_node is not None, 'no root node')\n\t        gr = nx.bfs_tree(dot, root_node)\n\t        for edge in dot.edges:\n\t            if not nx.has_path(gr, edge[1], edge[0]):\n\t                gr.add_edge(edge[0], edge[1])\n", "    else:\n\t        grs.gtype = util_graph.GTYPE_UGRAPH\n\t        gr = dot.to_undirected()\n\t    def orderlabels(lbls):\n\t        lbls = lbls.split(',')\n\t        lbls = [lbl.strip() for lbl in lbls]\n\t        lbls = [lbl for lbl in lbls if lbl != '']\n\t        lbls = sorted(lbls)\n\t        lbls = MULTILABEL.join(lbls)\n\t        return lbls\n", "    gr_orig = dot\n\t    for node in gr.nodes:\n\t        gr.nodes[node][util_graph.ATTR_LABEL] = orderlabels(gr_orig.nodes[node][util_graph.ATTR_LABEL])\n\t    for ea, eb in gr.edges:\n\t        lbla = gr_orig.edges[(ea, eb)][util_graph.ATTR_LABEL] if (ea, eb) in gr_orig.edges else ''\n\t        lblb = gr_orig.edges[(eb, ea)][util_graph.ATTR_LABEL] if (eb, ea) in gr_orig.edges else ''\n\t        if lbla == lblb or lblb == '':\n\t            lbl = lbla\n\t        elif lbla == '':\n\t            lbl = lblb\n", "        else:\n\t            lbl = lbla + MULTILABEL + lblb\n\t        gr.edges[(ea, eb)][util_graph.ATTR_LABEL] = orderlabels(lbl)\n\t    grs.graphs = [gr]\n\t    util_graph.write_graph_to_file(grs, args.outfile)\n"]}
{"filename": "gdesc2graph.py", "chunked_list": ["import argparse, itertools, json, pickle, random, sys, time\n\timport solvers, util, util_graph\n\timport networkx as nx\n\tCONNECT_REACH  = 'reach'\n\tCONNECT_LAYER  = 'layer'\n\tCONNECT_LIST   = [CONNECT_REACH, CONNECT_LAYER]\n\tEDGEOPT_FULL   = 'full'\n\tEDGEOPT_BAND   = 'band'\n\tEDGEOPT_GRID   = 'grid'\n\tEDGEOPT_RECT   = 'rect'\n", "EDGEOPT_LIST   = [EDGEOPT_FULL, EDGEOPT_BAND, EDGEOPT_GRID, EDGEOPT_RECT]\n\tdef gdesc2graph(s, grd, min_size, max_size, edgeopt, edgeopt_params, label_min, label_max, label_count, connect, randomize):\n\t    # set up solver vars\n\t    util.timer_section('set up')\n\t    if label_min:\n\t        for ll in label_min:\n\t            util.check(ll == util.DEFAULT_TEXT or ll in grd.node_labels, 'no label_min')\n\t    if label_max:\n\t        for ll in label_max:\n\t            util.check(ll == util.DEFAULT_TEXT or ll in grd.node_labels, 'no label_max')\n", "    if edgeopt == EDGEOPT_FULL:\n\t        util.check(len(edgeopt_params) == 0, 'edgeopt_params')\n\t    elif edgeopt == EDGEOPT_BAND:\n\t        util.check(len(edgeopt_params) == 1, 'edgeopt_params')\n\t    elif edgeopt in [EDGEOPT_GRID, EDGEOPT_RECT]:\n\t        util.check(len(edgeopt_params) == 1, 'edgeopt_params')\n\t    else:\n\t        util.check(False, 'edgeopt')\n\t    # node labels\n\t    labels_plus_none = list(grd.node_labels) + [None]\n", "    vars_nodes_by_label = {}\n\t    for ll in labels_plus_none:\n\t        vars_nodes_by_label[ll] = []\n\t    node_id_order = list(range(max_size))\n\t    if randomize is not None:\n\t        rng = random.Random(randomize)\n\t        rng.shuffle(node_id_order)\n\t    vars_node_by_id = {}\n\t    for ii in node_id_order:\n\t        vars_node_by_id[ii] = {}\n", "        for ll in labels_plus_none:\n\t            vv = s.make_var()\n\t            vars_nodes_by_label[ll].append(vv)\n\t            vars_node_by_id[ii][ll] = vv\n\t        s.cnstr_count(list(vars_node_by_id[ii].values()), True, 1, 1, None)\n\t    # edge labels\n\t    edge_labels_plus_none = list(grd.edge_labels) + [None]\n\t    vars_edges_by_label = {}\n\t    for ll in edge_labels_plus_none:\n\t        vars_edges_by_label[ll] = []\n", "    vars_edge_by_id_by_label = {}\n\t    for ii in node_id_order:\n\t        if edgeopt == EDGEOPT_FULL:\n\t            jjs = range(ii + 1, max_size)\n\t        elif edgeopt == EDGEOPT_BAND:\n\t            band_size = edgeopt_params[0]\n\t            jjs = range(ii + 1, min(ii + band_size + 1, max_size))\n\t        elif edgeopt in [EDGEOPT_GRID, EDGEOPT_RECT]:\n\t            grid_stride = edgeopt_params[0]\n\t            jjs = []\n", "            if (ii + 1) < max_size and (ii + 1) % grid_stride != 0:\n\t                jjs.append(ii + 1)\n\t            if (ii + grid_stride) < max_size:\n\t                jjs.append(ii + grid_stride)\n\t        else:\n\t            util.check(False, 'edgeopt')\n\t        for jj in jjs:\n\t            vars_edge_by_id_by_label[(ii, jj)] = {}\n\t            for ll in edge_labels_plus_none:\n\t                vv = s.make_var()\n", "                vars_edge_by_id_by_label[(ii, jj)][ll] = vv\n\t                vars_edges_by_label[ll].append(vv)\n\t            s.cnstr_count(list(vars_edge_by_id_by_label[(ii, jj)].values()), True, 1, 1, None)\n\t            if edgeopt in [EDGEOPT_GRID, EDGEOPT_RECT]:\n\t                if jj == ii + 1:\n\t                    s.cnstr_count([vars_edge_by_id_by_label[(ii, jj)][None], vars_edge_by_id_by_label[(ii, jj)][util_graph.LABEL_GRID_SOUTH]], True, 1, 1, None)\n\t                elif jj == ii + grid_stride:\n\t                    s.cnstr_count([vars_edge_by_id_by_label[(ii, jj)][None], vars_edge_by_id_by_label[(ii, jj)][util_graph.LABEL_GRID_EAST]], True, 1, 1, None)\n\t    # how many nodes can be missing\n\t    s.cnstr_count(vars_nodes_by_label[None], True, 0, max_size - min_size, None)\n", "    # connected\n\t    if connect == CONNECT_REACH:\n\t        vars_node_connect = []\n\t        for ii in range(max_size):\n\t            vars_node_connect.append(s.make_var())\n\t        for ii in range(max_size):\n\t            # all nodes must be either missing or connected\n\t            # missing node not connected - covered by this\n\t            s.cnstr_count([vars_node_by_id[ii][None], vars_node_connect[ii]], True, 1, 1, None)\n\t        # other than first node, no incoming reachable means not reachable\n", "        for ii in range(1, max_size):\n\t            incoming = []\n\t            for jj in range(ii):\n\t                if (jj, ii) in vars_edge_by_id_by_label:\n\t                    incoming.append(s.make_conj([vars_node_connect[jj], vars_edge_by_id_by_label[(jj, ii)][None]], [True, False]))\n\t            s.cnstr_implies_disj(s.make_conj(incoming, False), True, [vars_node_connect[ii]], False, None)\n\t    elif connect == CONNECT_LAYER:\n\t        connect_layers = max_size // 2 + 1\n\t        vars_node_connect = []\n\t        for cc in range(connect_layers):\n", "            layer = {}\n\t            for ii in range(max_size):\n\t                layer[ii] = s.make_var()\n\t            vars_node_connect.append(layer)\n\t        s.cnstr_count(list(vars_node_connect[0].values()), True, 1, 1, None)\n\t        for cc in range(1, connect_layers):\n\t            for ii in range(max_size):\n\t                incoming = []\n\t                for jj in range(max_size):\n\t                    if ii == jj:\n", "                        continue\n\t                    ei, ej = min(ii, jj), max(ii, jj)\n\t                    if (ei, ej) in vars_edge_by_id_by_label:\n\t                        incoming.append(s.make_conj([vars_node_connect[cc - 1][jj], vars_edge_by_id_by_label[(ei, ej)][None]], [True, False]))\n\t                s.cnstr_implies_disj(s.make_conj([vars_node_connect[cc - 1][ii]] + incoming, False), True, [vars_node_connect[cc][ii]], False, None)\n\t        for ii in range(max_size):\n\t            s.cnstr_count([vars_node_connect[connect_layers - 1][ii], vars_node_by_id[ii][None]], True, 1, 1, None)\n\t    else:\n\t        util.check(False, 'connect')\n\t    # tree\n", "    if util_graph.gtype_tree(grd.gtype):\n\t        missing_edges = vars_edges_by_label[None]\n\t        missing_nodes = vars_nodes_by_label[None]\n\t        s.cnstr_count(missing_edges + missing_nodes, [False] * len(missing_edges) + [True] * len(missing_nodes), max_size - 1, max_size - 1, None)\n\t    # node label counts\n\t    for ll in grd.node_labels:\n\t        ll_min, ll_max = 0, max_size\n\t        if label_min:\n\t            if ll in label_min:\n\t                ll_min = max(ll_min, label_min[ll])\n", "            elif util.DEFAULT_TEXT in label_min:\n\t                ll_min = max(ll_min, label_min[util.DEFAULT_TEXT])\n\t        if label_max:\n\t            if ll in label_max:\n\t                ll_max = min(ll_max, label_max[ll])\n\t            elif util.DEFAULT_TEXT in label_max:\n\t                ll_max = min(ll_max, label_max[util.DEFAULT_TEXT])\n\t        if label_count:\n\t            ll_min = max(ll_min, int(min_size * 0.5 * grd.node_label_count[ll]))\n\t            ll_max = min(ll_max, int(max_size * 1.5 * grd.node_label_count[ll]))\n", "        if (ll_min, ll_max) != (0, max_size):\n\t            s.cnstr_count(vars_nodes_by_label[ll], True, ll_min, ll_max, None)\n\t    # cache patterns\n\t    _conjs = {}\n\t    def make_conj(vvs, settings):\n\t        nonlocal s, _conjs\n\t        key = tuple(sorted(zip(vvs, settings)))\n\t        if key not in _conjs:\n\t            _conjs[key] = s.make_conj(vvs, settings)\n\t        return _conjs[key]\n", "    # add structure constraints\n\t    if edgeopt in [EDGEOPT_GRID, EDGEOPT_RECT]:\n\t        if edgeopt == EDGEOPT_RECT:\n\t            # first column set\n\t            for ii in range(grid_stride):\n\t                s.cnstr_count([vars_node_by_id[ii][None]], False, 1, 1, None)\n\t            # any in column set makes whole column set\n\t            for ii in range(0, max_size, grid_stride):\n\t                for jj in range(ii, min(ii + grid_stride, max_size)):\n\t                    for kk in range(ii, min(ii + grid_stride, max_size)):\n", "                        s.cnstr_implies_disj(vars_node_by_id[jj][None], False, [vars_node_by_id[kk][None]], False, None)\n\t        # make squares\n\t        grid_stride = edgeopt_params[0]\n\t        for ii in node_id_order:\n\t            # 0 a 1\n\t            # b   c\n\t            # 2 d 3\n\t            ea = (ii, ii + grid_stride)\n\t            eb = (ii, ii + 1)\n\t            ec = (ii + grid_stride, ii + 1 + grid_stride)\n", "            ed = (ii + 1, ii + 1 + grid_stride)\n\t            if ea not in vars_edge_by_id_by_label or eb not in vars_edge_by_id_by_label or ec not in vars_edge_by_id_by_label or ed not in vars_edge_by_id_by_label:\n\t                continue\n\t            eav = vars_edge_by_id_by_label[ea][util_graph.LABEL_GRID_EAST]\n\t            ebv = vars_edge_by_id_by_label[eb][util_graph.LABEL_GRID_SOUTH]\n\t            ecv = vars_edge_by_id_by_label[ec][util_graph.LABEL_GRID_SOUTH]\n\t            edv = vars_edge_by_id_by_label[ed][util_graph.LABEL_GRID_EAST]\n\t            s.cnstr_implies_disj(make_conj([ebv, ecv, edv], [True, True, True]), True, [eav], True, None)\n\t            s.cnstr_implies_disj(make_conj([eav, ecv, edv], [True, True, True]), True, [ebv], True, None)\n\t            s.cnstr_implies_disj(make_conj([eav, ebv, edv], [True, True, True]), True, [ecv], True, None)\n", "            s.cnstr_implies_disj(make_conj([eav, ebv, ecv], [True, True, True]), True, [edv], True, None)\n\t    if False:#edgeopt == EDGEOPT_GRID: # TODO: separate option?\n\t        util.timer_section('add structure constraints')\n\t        # NOTE: with node setting rules, can change number of rows by leaving the bottom ones blank\n\t        # first column set\n\t        for ii in range(grid_stride):\n\t            s.cnstr_count([vars_node_by_id[ii][None]], False, 1, 1, None)\n\t        # any in column set makes whole column set\n\t        for ii in range(0, max_size, grid_stride):\n\t            for jj in range(ii, min(ii + grid_stride, max_size)):\n", "                for kk in range(ii, min(ii + grid_stride, max_size)):\n\t                    s.cnstr_implies_disj(vars_node_by_id[jj][None], False, [vars_node_by_id[kk][None]], False, None)\n\t        # make squares\n\t        grid_stride = edgeopt_params[0]\n\t        for ii in node_id_order:\n\t            # 0 a 1\n\t            # b   c\n\t            # 2 d 3\n\t            ea = (ii, ii + grid_stride)\n\t            eb = (ii, ii + 1)\n", "            ec = (ii + grid_stride, ii + 1 + grid_stride)\n\t            ed = (ii + 1, ii + 1 + grid_stride)\n\t            if ea not in vars_edge_by_id_by_label or eb not in vars_edge_by_id_by_label or ec not in vars_edge_by_id_by_label or ed not in vars_edge_by_id_by_label:\n\t                continue\n\t            eav = vars_edge_by_id_by_label[ea][util_graph.LABEL_GRID_EAST]\n\t            ebv = vars_edge_by_id_by_label[eb][util_graph.LABEL_GRID_SOUTH]\n\t            ecv = vars_edge_by_id_by_label[ec][util_graph.LABEL_GRID_SOUTH]\n\t            edv = vars_edge_by_id_by_label[ed][util_graph.LABEL_GRID_EAST]\n\t            s.cnstr_implies_disj(make_conj([eav, ebv], [True, True]), True, [ecv], True, None)\n\t            s.cnstr_implies_disj(make_conj([eav, ebv], [True, True]), True, [edv], True, None)\n", "            s.cnstr_implies_disj(make_conj([ebv, edv], [True, True]), True, [eav], True, None)\n\t            s.cnstr_implies_disj(make_conj([ebv, edv], [True, True]), True, [ecv], True, None)\n\t            s.cnstr_implies_disj(make_conj([eav, ecv], [True, True]), True, [ebv], True, None)\n\t            s.cnstr_implies_disj(make_conj([eav, ecv], [True, True]), True, [edv], True, None)\n\t            s.cnstr_implies_disj(make_conj([ecv, edv], [True, True]), True, [eav], True, None)\n\t            s.cnstr_implies_disj(make_conj([ecv, edv], [True, True]), True, [ebv], True, None)\n\t    if False:#edgeopt == EDGEOPT_GRID: # TODO: separate option?\n\t        util.timer_section('add structure constraints')\n\t        nodes_set = itertools.product(node_id_order, repeat=3)\n\t        for np in nodes_set:\n", "            structures = [\n\t                # 0 > 1\n\t                # v   v\n\t                # 2 > X\n\t                [(np[0], np[1]), util_graph.LABEL_GRID_EAST,\n\t                 (np[0], np[2]), util_graph.LABEL_GRID_SOUTH,\n\t                 (np[1],  None), util_graph.LABEL_GRID_SOUTH,\n\t                 (np[2],  None), util_graph.LABEL_GRID_EAST],\n\t                # X > 0\n\t                # v   v\n", "                # 1 > 2\n\t                [(np[0], np[2]), util_graph.LABEL_GRID_SOUTH,\n\t                 (np[1], np[2]), util_graph.LABEL_GRID_EAST,\n\t                 ( None, np[0]), util_graph.LABEL_GRID_EAST,\n\t                 ( None, np[1]), util_graph.LABEL_GRID_SOUTH],\n\t                # 0 > X\n\t                # v   v\n\t                # 1 > 2\n\t                [(np[0], np[1]), util_graph.LABEL_GRID_SOUTH,\n\t                 (np[1], np[2]), util_graph.LABEL_GRID_EAST,\n", "                 (np[0],  None), util_graph.LABEL_GRID_EAST,\n\t                 ( None, np[2]), util_graph.LABEL_GRID_SOUTH],\n\t                # 0 > 1\n\t                # v   v\n\t                # X > 2\n\t                [(np[0], np[1]), util_graph.LABEL_GRID_EAST,\n\t                 (np[1], np[2]), util_graph.LABEL_GRID_SOUTH,\n\t                 (np[0],  None), util_graph.LABEL_GRID_SOUTH,\n\t                 ( None, np[2]), util_graph.LABEL_GRID_EAST]\n\t            ]\n", "            for ea, eal, eb, ebl, ect, ecl, edt, edl in structures:\n\t                if ea not in vars_edge_by_id_by_label or eb not in vars_edge_by_id_by_label:\n\t                    continue\n\t                eav = vars_edge_by_id_by_label[ea][eal]\n\t                ebv = vars_edge_by_id_by_label[eb][ebl]\n\t                part = make_conj([eav, ebv], [True, True])\n\t                completions = []\n\t                for npx in node_id_order:\n\t                    ec = tuple([(ee if ee is not None else npx) for ee in ect])\n\t                    ed = tuple([(ee if ee is not None else npx) for ee in edt])\n", "                    if ec not in vars_edge_by_id_by_label or ed not in vars_edge_by_id_by_label:\n\t                        continue\n\t                    ecv = vars_edge_by_id_by_label[ec][ecl]\n\t                    edv = vars_edge_by_id_by_label[ed][edl]\n\t                    completions.append(make_conj([ecv, edv], [True, True]))\n\t                s.cnstr_implies_disj(part, True, completions, True, None)\n\t    # add neighbor constraints\n\t    util.timer_section('add neighbor constraints')\n\t    for ii in node_id_order:\n\t        edges_vars = []\n", "        edges_dir = []\n\t        edges_other_node = []\n\t        for jj in node_id_order:\n\t            if ii == jj:\n\t                continue\n\t            ei, ej = min(ii, jj), max(ii, jj)\n\t            if (ei, ej) in vars_edge_by_id_by_label:\n\t                edges_vars.append(vars_edge_by_id_by_label[(ei, ej)])\n\t                edges_dir.append(None if not util_graph.gtype_directed(grd.gtype) else (util_graph.DIR_FRA if jj < ii else util_graph.DIR_TIL))\n\t                edges_other_node.append(jj)\n", "        # missing node has no edges; using conj seems to work better than multiple individual implies\n\t        s.cnstr_implies_disj(vars_node_by_id[ii][None], True, [make_conj([edge[None] for edge in edges_vars], [True] * len(edges_vars))], True, None)\n\t        # apply from description\n\t        for label in grd.node_labels:\n\t            patts = []\n\t            for nbrs in grd.node_label_neighbors[label]:\n\t                edge_inds_set = util.corner_indices(len(edges_vars), len(nbrs))\n\t                for edge_inds in edge_inds_set:\n\t                    for nbrs_perm in itertools.permutations(range(len(nbrs))):\n\t                        nodes = []\n", "                        edges = [ev[None] for ev in edges_vars]\n\t                        for edge_ind, nbr_ind in zip(edge_inds, nbrs_perm):\n\t                            nbr_node_label, nbr_edge_label, nbr_edge_dir = nbrs[nbr_ind]\n\t                            if nbr_edge_dir == edges_dir[edge_ind]:\n\t                                if nbr_node_label is not None:\n\t                                    nodes.append(vars_node_by_id[edges_other_node[edge_ind]][nbr_node_label])\n\t                                edges[edge_ind] = edges_vars[edge_ind][nbr_edge_label]\n\t                            else:\n\t                                nodes, edges = None, None\n\t                                break\n", "                        if nodes is not None:\n\t                            patts.append(make_conj(edges + nodes, [True] * (len(edges) + len(nodes))))\n\t            if len(patts) == 0:\n\t                s.cnstr_count([vars_node_by_id[ii][label]], True, 0, 0, None)\n\t            else:\n\t                s.cnstr_implies_disj(vars_node_by_id[ii][label], True, patts, True, None)\n\t    util.timer_section('solve')\n\t    result = None\n\t    if s.solve():\n\t        util.timer_section('create graph')\n", "        if util_graph.gtype_directed(grd.gtype):\n\t            gr = nx.DiGraph()\n\t        else:\n\t            gr = nx.Graph()\n\t        for ii, vvs in vars_node_by_id.items():\n\t            label = False\n\t            for ll, vv in vvs.items():\n\t                if s.get_var(vv):\n\t                    util.check(label == False, 'multiple labels')\n\t                    label = ll\n", "            util.check(label != False, 'no label')\n\t            if label is not None:\n\t                gr.add_node(ii)\n\t                gr.nodes[ii][util_graph.ATTR_LABEL] = label\n\t        for (ii, jj), vvs in vars_edge_by_id_by_label.items():\n\t            label = False\n\t            for ll, vv in vvs.items():\n\t                if s.get_var(vv):\n\t                    util.check(label == False, 'multiple labels')\n\t                    label = ll\n", "            util.check(label != False, 'no label')\n\t            if label is not None:\n\t                gr.add_edge(ii, jj)\n\t                gr.edges[(ii, jj)][util_graph.ATTR_LABEL] = label\n\t        util_graph.check_graph(gr, grd.gtype)\n\t        if edgeopt in [EDGEOPT_GRID, EDGEOPT_RECT]:\n\t            util_graph.layout_grid(gr)\n\t        grs = util_graph.Graphs()\n\t        grs.gtype = grd.gtype\n\t        grs.colors = grd.colors\n", "        grs.graphs = [gr]\n\t        result = grs\n\t    util.timer_section(None)\n\t    return result\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Generate graphs based on example graph.')\n\t    parser.add_argument('--solver', type=str, nargs='+', choices=solvers.SOLVER_LIST, default=[solvers.SOLVER_PYSAT_RC2], help='Solver name, from: ' + ','.join(solvers.SOLVER_LIST) + '.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output file.')\n\t    parser.add_argument('--gdescfile', required=True, type=str, help='Input graph description file.')\n", "    parser.add_argument('--minsize', required=True, type=int, help='Minimum size.')\n\t    parser.add_argument('--maxsize', required=True, type=int, help='Maximum size.')\n\t    parser.add_argument('--edgeopt', type=str, nargs='+', default=[EDGEOPT_FULL], help='Edge options, from: ' + ','.join(EDGEOPT_LIST) + '.')\n\t    parser.add_argument('--label-min', type=str, nargs='+', default=None, help='Minimum number of each label to generate.')\n\t    parser.add_argument('--label-max', type=str, nargs='+', default=None, help='Maximum number of each label to generate.')\n\t    parser.add_argument('--label-count', action='store_true', help='Generate using label counts from example.')\n\t    parser.add_argument('--connect', type=str, choices=CONNECT_LIST, default=CONNECT_REACH, help='Connect approach name, from: ' + ','.join(CONNECT_LIST) + '.')\n\t    parser.add_argument('--randomize', type=int, help='Randomize based on given number.')\n\t    args = parser.parse_args()\n\t    if len(args.solver) == 1:\n", "        solver = solvers.solver_id_to_solver(args.solver[0])\n\t    else:\n\t        solver = solvers.PortfolioSolver(args.solver, None)\n\t    if args.edgeopt is not None:\n\t        edgeopt = args.edgeopt[0]\n\t        edgeopt_params = tuple([int(ee) for ee in args.edgeopt[1:]])\n\t        util.check(edgeopt in EDGEOPT_LIST, '--edgeopt must be in ' + ','.join(EDGEOPT_LIST))\n\t    label_min = util.arg_list_to_dict_int(parser, '--label-min', args.label_min)\n\t    label_max = util.arg_list_to_dict_int(parser, '--label-max', args.label_max)\n\t    with util.openz(args.gdescfile, 'rb') as f:\n", "        grd = pickle.load(f)\n\t    ogrs = gdesc2graph(solver, grd, args.minsize, args.maxsize, edgeopt, edgeopt_params, label_min, label_max, args.label_count, args.connect, args.randomize)\n\t    if ogrs is not None:\n\t        util_graph.write_graph(ogrs, sys.stdout)\n\t        util_graph.write_graph_to_file(ogrs, args.outfile)\n\t        util.exit_solution_found()\n\t    else:\n\t        util.exit_solution_not_found()\n"]}
{"filename": "gdesc2summary.py", "chunked_list": ["import argparse, itertools, json, pickle, random, sys, time\n\timport util, util_graph\n\timport networkx as nx\n\tdef gdesc2summary(grd):\n\t    grs = util_graph.Graphs()\n\t    grs.gtype = grd.gtype\n\t    grs.colors = grd.colors\n\t    grs.graphs = []\n\t    result = grs\n\t    for label in grd.node_labels:\n", "        for nbrs in grd.node_label_neighbors[label]:\n\t            gid = len(grs.graphs)\n\t            if util_graph.gtype_directed(grd.gtype):\n\t                gr = nx.DiGraph()\n\t            else:\n\t                gr = nx.Graph()\n\t            central_node = f'{gid}:*'\n\t            gr.add_node(central_node)\n\t            gr.nodes[central_node][util_graph.ATTR_LABEL] = label\n\t            gr.nodes[central_node][util_graph.ATTR_HIGHLIGHT] = True\n", "            for ni, (nbr_node_label, nbr_edge_label, nbr_edge_dir) in enumerate(nbrs):\n\t                nbr_node = f'{gid}:{ni}'\n\t                if nbr_edge_dir == util_graph.DIR_TIL or nbr_edge_dir is None:\n\t                    edge = (central_node, nbr_node)\n\t                elif nbr_edge_dir == util_graph.DIR_FRA:\n\t                    edge = (nbr_node, central_node)\n\t                else:\n\t                    util.check(False, 'nbr_edge_dir')\n\t                gr.add_node(nbr_node)\n\t                gr.nodes[nbr_node][util_graph.ATTR_LABEL] = nbr_node_label\n", "                gr.add_edge(edge[0], edge[1])\n\t                gr.edges[edge][util_graph.ATTR_LABEL] = nbr_edge_label\n\t            grs.graphs.append(gr)\n\t    return grs\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Summarize graph description.')\n\t    parser.add_argument('--outfile', type=str, help='Output file.')\n\t    parser.add_argument('--gdescfile', required=True, type=str, help='Input graph description file.')\n\t    args = parser.parse_args()\n", "    with util.openz(args.gdescfile, 'rb') as f:\n\t        grd = pickle.load(f)\n\t    ogrs = gdesc2summary(grd)\n\t    print(f'found {len(grd.node_labels)} node labels')\n\t    print(f'found {len(grd.edge_labels)} edge labels')\n\t    print(f'found {len(ogrs.graphs)} neighborhoods')\n\t    if args.outfile is None:\n\t        for gr in ogrs.graphs:\n\t            ogr = util_graph.GraphDesc()\n\t            ogr.gtype = ogrs.gtype\n", "            ogr.colors = ogrs.colors\n\t            ogr.graphs = [gr]\n\t            print()\n\t            util_graph.write_graph(ogr, sys.stdout)\n\t    else:\n\t        util_graph.write_graph_to_file(ogrs, args.outfile)\n"]}
{"filename": "graph2gdesc.py", "chunked_list": ["import argparse, itertools, json, pickle, random, sys, time\n\timport util, util_graph\n\timport networkx as nx\n\tdef graph_nbrs(gr, gtype, node):\n\t    nbrs = []\n\t    for fra, til, label in util_graph.edges_and_labels(gr):\n\t        nbr, dir_tag = None, None\n\t        if util_graph.gtype_directed(gtype):\n\t            if fra == node:\n\t                nbr, dir_tag = til, util_graph.DIR_TIL\n", "            elif til == node:\n\t                nbr, dir_tag = fra, util_graph.DIR_FRA\n\t        else:\n\t            if fra == node:\n\t                nbr = til\n\t            elif til == node:\n\t                nbr = fra\n\t        if nbr:\n\t            nbrs.append((nbr, label, dir_tag))\n\t    return nbrs\n", "def graph2gdesc(grs, edgesonly):\n\t    util.timer_section('extract')\n\t    grd = util_graph.GraphDesc()\n\t    grd.gtype = grs.gtype\n\t    grd.colors = grs.colors\n\t    grd.node_labels = {}\n\t    grd.edge_labels = {}\n\t    total_nodes = 0\n\t    for gr in grs.graphs:\n\t        total_nodes += len(gr.nodes)\n", "        for node, label in util_graph.nodes_and_labels(gr):\n\t            if label not in grd.node_labels:\n\t                grd.node_labels[label] = None\n\t                grd.node_label_count[label] = 0\n\t                grd.node_label_neighbors[label] = []\n\t        for fra, til, label in util_graph.edges_and_labels(gr):\n\t            if label not in grd.edge_labels:\n\t                grd.edge_labels[label] = None\n\t        for node, label in util_graph.nodes_and_labels(gr):\n\t            grd.node_label_count[label] += 1\n", "            nbr_labels = []\n\t            nbrs = graph_nbrs(gr, grd.gtype, node)\n\t            for nbr_node, nbr_edge_label, nbr_edge_dir in nbrs:\n\t                if edgesonly:\n\t                    nbr_node_label = None\n\t                else:\n\t                    nbr_node_label = gr.nodes[nbr_node][util_graph.ATTR_LABEL]\n\t                nbr_labels.append((nbr_node_label, nbr_edge_label, nbr_edge_dir))\n\t            nbr_labels = tuple(sorted(nbr_labels))\n\t            if nbr_labels not in grd.node_label_neighbors[label]:\n", "                grd.node_label_neighbors[label].append(nbr_labels)\n\t    for label in grd.node_labels:\n\t        grd.node_label_count[label] = grd.node_label_count[label] / total_nodes\n\t        grd.node_label_neighbors[label] = sorted(grd.node_label_neighbors[label])\n\t    return grd\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Extract description from example graph.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Output file.')\n\t    parser.add_argument('--graphfile', required=True, nargs='+', type=str, help='Input graph file(s).')\n", "    parser.add_argument('--edgesonly', action='store_true', help='Make description from only edges.')\n\t    args = parser.parse_args()\n\t    grs = util_graph.read_graphs(args.graphfile)\n\t    grd = graph2gdesc(grs, args.edgesonly)\n\t    with util.openz(args.outfile, 'wb') as f:\n\t        pickle.dump(grd, f)\n"]}
{"filename": "levels2explore.py", "chunked_list": ["import argparse, glob, gzip, math, os, pickle, random, sys, threading, time\n\timport util, util_explore\n\timport numpy as np\n\timport PIL.Image, PIL.ImageDraw, PIL.ImageTk\n\timport tkinter, tkinter.messagebox\n\tdef one_hot(rows, cols, ntind, neind, npind, levels, einds, pinds):\n\t    a = np.zeros((len(levels), rows, cols, ntind), dtype=np.uint8)\n\t    for ll, level in enumerate(levels):\n\t        for rr in range(rows):\n\t            for cc in range(cols):\n", "                for tind in level[rr][cc]:\n\t                    a[ll][rr][cc][tind] = 1\n\t    a = a.reshape((len(levels), rows * cols * ntind))\n\t    b = np.zeros((len(levels), neind), dtype=np.uint8)\n\t    for ll, ll_einds in enumerate(einds):\n\t        for eind in ll_einds:\n\t            b[ll][eind] = 1\n\t    c = np.zeros((len(levels), npind), dtype=np.uint8)\n\t    for ll, ll_pinds in enumerate(pinds):\n\t        for pind in ll_pinds:\n", "            c[ll][pind] = 1\n\t    return np.concatenate((a, b, c), axis=1)\n\tdef levels2explore(tilefiles, resultfiles, pad_top, text_only, image_only):\n\t    print('loading...')\n\t    rows, cols = None, None\n\t    tileset = None\n\t    use_text = None\n\t    use_image = None\n\t    entry_size = None\n\t    all_levels = []\n", "    tind_to_text = {}\n\t    text_to_tind = {}\n\t    tind_to_image = {}\n\t    image_to_tind = {}\n\t    tinds_to_tile = {}\n\t    tile_to_tinds = {}\n\t    ntind = 0\n\t    ntind_both = 0\n\t    ntind_text = 0\n\t    ntind_image = 0\n", "    eind_to_edge = {}\n\t    edge_to_eind = {}\n\t    all_edges = []\n\t    all_einds = []\n\t    pind_to_prop = {}\n\t    prop_to_pind = {}\n\t    all_pinds = []\n\t    def add_level(_tile_level, _edges, _props):\n\t        nonlocal rows, cols\n\t        _lrows = len(_tile_level)\n", "        _lcols = len(_tile_level[0])\n\t        if rows is None:\n\t            rows, cols = _lrows, _lcols\n\t        else:\n\t            rows = max(rows, _lrows)\n\t            cols = max(cols, _lcols)\n\t        _level = []\n\t        for _rr in range(_lrows):\n\t            _row = []\n\t            for _cc in range(_lcols):\n", "                _row.append(tile_to_tinds[_tile_level[_rr][_cc]])\n\t            _level.append(_row)\n\t        _pinds = []\n\t        if _props is not None:\n\t            for _prop in _props:\n\t                if _prop not in prop_to_pind:\n\t                    _pind = len(prop_to_pind)\n\t                    prop_to_pind[_prop] = _pind\n\t                    pind_to_prop[_pind] = _prop\n\t                _pinds.append(prop_to_pind[_prop])\n", "        all_levels.append(_level)\n\t        all_edges.append([tuple(_edge) for _edge in _edges] if _edges is not None else [])\n\t        all_pinds.append(_pinds)\n\t    def add_einds(_edges):\n\t        _einds = []\n\t        for _edge in _edges:\n\t            if _edge not in edge_to_eind:\n\t                _eind = len(edge_to_eind)\n\t                edge_to_eind[_edge] = _eind\n\t                eind_to_edge[_eind] = _edge\n", "            _einds.append(edge_to_eind[_edge])\n\t        all_einds.append(_einds)\n\t    def pad_level(_level, _path, _rows, _cols, _void_tind):\n\t        if len(_level) == _rows and len(_level[0]) == _cols:\n\t            return False\n\t        for _rr in range(len(_level)):\n\t            while len(_level[_rr]) != _cols:\n\t                _level[_rr].append(_void_tind)\n\t        while len(_level) != _rows:\n\t            if pad_top:\n", "                _level.insert(0, [_void_tind] * _cols)\n\t                for ii in range(len(_path)):\n\t                    _path[ii] = (_path[ii][0] + 1, _path[ii][1], _path[ii][2] + 1, _path[ii][3])\n\t            else:\n\t                _level.append([_void_tind] * _cols)\n\t        return True\n\t    for tilefile_glob in tilefiles:\n\t        for tilefile in glob.iglob(tilefile_glob):\n\t            with util.openz(tilefile, 'rb') as f:\n\t                tile_info = pickle.load(f)\n", "                if tileset == None:\n\t                    tileset = tile_info.tileset\n\t                    use_text = (tileset.tile_to_text is not None) and (not image_only)\n\t                    use_image = (tileset.tile_to_image is not None) and (not text_only)\n\t                    tile_to_tinds = {}\n\t                    for tile in tileset.tile_ids:\n\t                        tile_to_tinds[tile] = []\n\t                    tile_to_image_key = {}\n\t                    if use_image:\n\t                        for tile in tileset.tile_ids:\n", "                            tile_to_image_key[tile] = tuple(tileset.tile_to_image[tile].getdata())\n\t                    text_uniq = {}\n\t                    image_key_uniq = {}\n\t                    for tile in tileset.tile_ids:\n\t                        if use_text:\n\t                            text = tileset.tile_to_text[tile]\n\t                            if text in text_uniq:\n\t                                text_uniq[text] = False\n\t                            else:\n\t                                text_uniq[text] = True\n", "                        if use_image:\n\t                            image_key = tile_to_image_key[tile]\n\t                            if image_key in image_key_uniq:\n\t                                image_key_uniq[image_key] = False\n\t                            else:\n\t                                image_key_uniq[image_key] = True\n\t                    for tile in tileset.tile_ids:\n\t                        if use_text and use_image:\n\t                            text = tileset.tile_to_text[tile]\n\t                            image_key = tile_to_image_key[tile]\n", "                            if text_uniq[text] and image_key_uniq[image_key]:\n\t                                text_to_tind[text] = ntind\n\t                                tind_to_text[ntind] = text\n\t                                image_to_tind[image_key] = ntind\n\t                                tind_to_image[ntind] = tileset.tile_to_image[tile]\n\t                                tile_to_tinds[tile].append(ntind)\n\t                                ntind += 1\n\t                                ntind_both += 1\n\t                                continue\n\t                        if use_text:\n", "                            text = tileset.tile_to_text[tile]\n\t                            if text not in text_to_tind:\n\t                                text_to_tind[text] = ntind\n\t                                tind_to_text[ntind] = text\n\t                                ntind += 1\n\t                                ntind_text += 1\n\t                            tile_to_tinds[tile].append(text_to_tind[text])\n\t                        if use_image:\n\t                            image_key = tile_to_image_key[tile]\n\t                            if image_key not in image_to_tind:\n", "                                image_to_tind[image_key] = ntind\n\t                                tind_to_image[ntind] = tileset.tile_to_image[tile]\n\t                                ntind += 1\n\t                                ntind_image += 1\n\t                            tile_to_tinds[tile].append(image_to_tind[image_key])\n\t                    for tile, tinds in tile_to_tinds.items():\n\t                        tinds_to_tile[tuple(sorted(tinds))] = tile\n\t                else:\n\t                    util.check_tileset_match(tileset, tile_info.tileset)\n\t                if tile_info.levels is not None:\n", "                    for tli in tile_info.levels:\n\t                        path = util.get_meta_path(tli.meta)\n\t                        properties = util.get_meta_properties(tli.meta)\n\t                        add_level(tli.tiles, path, properties)\n\t    if resultfiles is not None:\n\t        for resultfile_glob in resultfiles:\n\t            for resultfile in glob.iglob(resultfile_glob):\n\t                with util.openz(resultfile, 'rb') as f:\n\t                    result_info = pickle.load(f)\n\t                    edges = result_info.reach_info.path_edges if result_info.reach_info is not None else []\n", "                    add_level(result_info.tile_level, edges, None)\n\t    print('loaded', len(all_levels), 'levels')\n\t    print('encoding...')\n\t    void_tind = None\n\t    any_padded = False\n\t    for level, edges in zip(all_levels, all_edges):\n\t        this_padded = pad_level(level, edges, rows, cols, [ntind])\n\t        any_padded = any_padded or this_padded\n\t    if any_padded:\n\t        print('padded!')\n", "        void_tind = ntind\n\t        ntind += 1\n\t    for edges in all_edges:\n\t        add_einds(edges)\n\t    ex = util_explore.ExploreInfo()\n\t    ex.rows = rows\n\t    ex.cols = cols\n\t    ex.tileset = tileset\n\t    ex.ntind = ntind\n\t    ex.neind = max(list(eind_to_edge.keys()) + [-1]) + 1\n", "    ex.npind = max(list(pind_to_prop.keys()) + [-1]) + 1\n\t    ex.void_tind = void_tind\n\t    ex.tind_to_text = tind_to_text\n\t    ex.tind_to_image = tind_to_image\n\t    ex.tinds_to_tile = tinds_to_tile\n\t    ex.eind_to_edge = eind_to_edge\n\t    ex.pind_to_prop = pind_to_prop\n\t    ex.level_data = np.packbits(one_hot(ex.rows, ex.cols, ex.ntind, ex.neind, ex.npind, all_levels, all_einds, all_pinds), axis=1)\n\t    print('encoded', len(ex.level_data), 'levels')\n\t    print('encoded', len(ex.tileset.tile_ids), 'tiles into', str(ex.ntind) + ';', ntind_text, 'text', ntind_image, 'image', ntind_both, 'both', 1 if ex.void_tind is not None else 0, 'void')\n", "    print('encoded', len(ex.eind_to_edge), 'edges into', ex.neind)\n\t    print('encoded', len(ex.pind_to_prop), 'props into', ex.npind)\n\t    print('encoded data', ex.level_data.shape)\n\t    return ex\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Path editor.')\n\t    parser.add_argument('--outfile', required=True, type=str, help='Explore file to write to.')\n\t    parser.add_argument('--tilefile', required=True, type=str, nargs='+', help='Input tile file(s).')\n\t    parser.add_argument('--resultfile', type=str, nargs='+', help='Input result file(s).')\n", "    parser.add_argument('--text-only', action='store_true', help='Only use tile edges.')\n\t    parser.add_argument('--image-only', action='store_true', help='Only use image edges.')\n\t    parser.add_argument('--pad-top', action='store_true', help='Pad top of level when needed.')\n\t    args = parser.parse_args()\n\t    explore_info = levels2explore(args.tilefile, args.resultfile, args.pad_top, args.text_only, args.image_only)\n\t    with util.openz(args.outfile, 'wb') as f:\n\t        pickle.dump(explore_info, f)\n"]}
{"filename": "util-test.py", "chunked_list": ["import itertools, os\n\timport util\n\tif __name__ == '__main__':\n\t    os.environ['STG_MUTE_TIME'] = '1'\n\t    os.environ['STG_MUTE_PORT'] = '1'\n\t    print('corner_indices')\n\t    for til in [5, 10, 15]:\n\t        for depth in [2, 3, 5]:\n\t            util_inds = util.corner_indices(til, depth)\n\t            itertools_inds = [inds for inds in itertools.product(range(til), repeat=depth) if len(inds) == len(set(inds)) and list(inds) == sorted(inds)]\n", "            util.check(util_inds == itertools_inds, 'corner_indices')\n"]}
{"filename": "portfolio.py", "chunked_list": ["import argparse, os, queue, signal, subprocess, tempfile, threading, time\n\timport util\n\timport pysat.formula\n\tdef run_portfolio(filename, timeout):\n\t    time_start = time.time()\n\t    solvers = []\n\t    for solver in os.listdir('solvers'):\n\t        solver_filename = os.path.join('solvers', solver)\n\t        if os.path.isfile(solver_filename) and os.access(solver_filename, os.X_OK):\n\t            solvers.append(solver_filename)\n", "    util.check(len(solvers) > 0, 'no solvers found')\n\t    procs = []\n\t    for solver in solvers:\n\t        print('c! starting', solver)\n\t        tfile = tempfile.TemporaryFile()\n\t        proc = subprocess.Popen(solver.split() + [filename], stdout=tfile, stderr=subprocess.STDOUT, encoding='ascii')\n\t        procs.append((solver, proc, tfile))\n\t    wcnf = pysat.formula.WCNF(from_file=filename)\n\t    completed_procs = []\n\t    while True:\n", "        for solver, proc, tfile in procs:\n\t            if proc.poll() is not None:\n\t                completed_procs.append((solver, proc, tfile))\n\t        if len(completed_procs) != 0:\n\t            break\n\t        if time.time() - time_start >= timeout:\n\t            break\n\t        time.sleep(0.1)\n\t    if len(completed_procs) == 0:\n\t        print('c! timeout')\n", "        for solver, proc, tfile in procs:\n\t            proc.send_signal(signal.SIGINT)\n\t        for solver, proc, tfile in procs:\n\t            proc.wait()\n\t        completed_procs = procs\n\t    outs = []\n\t    for solver, proc, tfile in completed_procs:\n\t        tfile.seek(0)\n\t        out = tfile.read().decode('ascii')\n\t        tfile.close()\n", "        outs.append((solver, out))\n\t    for solver, proc, tfile in procs:\n\t        proc.kill()\n\t    models = []\n\t    for solver, out in outs:\n\t        print('c output from', solver)\n\t        model = None\n\t        for line in out.split('\\n'):\n\t            if len(line) > 0 and line[0] == 'o':\n\t                print(line)\n", "            if len(line) > 0 and line[0] == 'v':\n\t                model = line\n\t        if model is not None:\n\t            print('c model from', solver)\n\t            models.append((solver, model))\n\t    if len(models) == 0:\n\t        print('c no models')\n\t    elif len(models) == 1:\n\t        print('c one model')\n\t        solver, model = models[0]\n", "        print('c! using model', solver)\n\t        print(model)\n\t    else:\n\t        print('c multiple models')\n\t        best_model, best_solver, best_unsat = None, None, None\n\t        for solver, model in models:\n\t            vvs = [int(ss) > 0 for ss in model.split()[1:]]\n\t            unsat = 0\n\t            for cls, wt in zip(wcnf.soft, wcnf.wght):\n\t                sat = False\n", "                for ind in cls:\n\t                    if vvs[abs(ind) - 1] == (ind > 0):\n\t                        sat = True\n\t                        break\n\t                if not sat:\n\t                    unsat += wt\n\t            print('c model', solver, unsat)\n\t            if best_unsat is None or unsat < best_unsat:\n\t                best_model, best_solver, best_unsat = model, solver, unsat\n\t        print('c! using model', best_solver)\n", "        print('o', best_unsat)\n\t        print(best_model)\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser(description='Run a portfolio of DIMACS solvers.')\n\t    parser.add_argument('infile', type=str, help='Input DIMACS file.')\n\t    parser.add_argument('--timeout', type=int, required=True, help='Timeout in seconds.')\n\t    args = parser.parse_args()\n\t    run_portfolio(args.infile, args.timeout)\n"]}
{"filename": "explorer.py", "chunked_list": ["import argparse, glob, gzip, math, os, pickle, random, sys, threading, time\n\timport util, util_explore, util_path\n\timport numpy as np\n\timport PIL.Image, PIL.ImageDraw, PIL.ImageTk\n\timport tkinter, tkinter.messagebox\n\tINSET           =    10\n\tFRAME           =     5\n\tCELL_SIZE_DEF   =    50\n\tMAX_CACHE       =   128\n\tMAX_UNDO        =   128\n", "MAX_EDGES       =   256\n\tMAX_SQRT        =     4\n\tTIME_RECOMPUTE  =  None\n\tPATH_OFF        =     0\n\tPATH_VIEW       =     1\n\tPATH_EDIT       =     2\n\tTILE_TEXT       =     0\n\tTILE_IMAGE      =     1\n\tCOLOR_BACK      = '#F0F0F0'\n\tCOLOR_GRID      = 'gray'\n", "COLOR_EDGE      = 'orange'\n\tCOLOR_OVER      = 'purple'\n\tCOLOR_INACTIVE  = 'darkgray'\n\tCOLOR_ACTIVE    = 'magenta'\n\tCOLOR_SELECTED  = 'black'\n\tclass RemainingInfo:\n\t    def __init__(self, rows, cols):\n\t        self.levels = []\n\t        self.nlevels = 0\n\t        self.texts = util.make_grid(rows, cols, [])\n", "        self.texts_sqrt = util.make_grid(rows, cols, 0)\n\t        self.images = util.make_grid(rows, cols, [])\n\t        self.images_sqrt = util.make_grid(rows, cols, 0)\n\t        self.einds = []\n\t        self.einds_cell = util.make_grid(rows, cols, [])\n\t        self.pinds = []\n\tclass ExplorerFrame(tkinter.Frame):\n\t    def __init__(self, root, explorer_info, cell_size, text_disp, image_disp):\n\t        super().__init__(root)\n\t        if TIME_RECOMPUTE is not None:\n", "            self._times = []\n\t        self._cell_size = cell_size\n\t        self._ex = explorer_info\n\t        self._nlevels = len(self._ex.level_data)\n\t        self._tiles_len = self._ex.rows * self._ex.cols * self._ex.ntind\n\t        self._level_len = self._tiles_len + self._ex.neind + self._ex.npind\n\t        self._packed_level_len = math.ceil(self._level_len / 8)\n\t        self.pack()\n\t        if len(self._ex.tind_to_text) > 0 and len(self._ex.tind_to_image) == 0:\n\t            self._displays = [TILE_TEXT]\n", "        elif len(self._ex.tind_to_text) == 0 and len(self._ex.tind_to_image) > 0:\n\t            self._displays = [TILE_IMAGE]\n\t        elif text_disp and image_disp:\n\t            self._displays = [TILE_IMAGE, TILE_TEXT]\n\t        elif text_disp:\n\t            self._displays = [TILE_TEXT]\n\t        elif image_disp:\n\t            self._displays = [TILE_IMAGE]\n\t        elif self._ex.tind_to_text.keys() == self._ex.tind_to_image.keys():\n\t            self._displays = [TILE_IMAGE]\n", "        else:\n\t            self._displays = [TILE_IMAGE, TILE_TEXT]\n\t        self._display_w = self._ex.cols * self._cell_size + INSET\n\t        self._display_h = self._ex.rows * self._cell_size + INSET\n\t        if self._ex.cols > self._ex.rows * 1.2:\n\t            self._display_dx = 0\n\t            self._display_dy = self._display_h\n\t        else:\n\t            self._display_dx = self._display_w\n\t            self._display_dy = 0\n", "        self._xoffset = 0\n\t        self._yoffset = 0\n\t        width = self._display_w + (len(self._displays) - 1) * self._display_dx + INSET - FRAME\n\t        height = self._display_h + (len(self._displays) - 1) * self._display_dy + INSET - FRAME\n\t        self._cvs = tkinter.Canvas(self, width=width, height=height)\n\t        self._cvs.grid(column=0, row=0)\n\t        self._sidebar = tkinter.Frame(self)\n\t        self._sidebar.grid(column=1, row=0, sticky=tkinter.N, padx=INSET, pady=INSET)\n\t        self._check = []\n\t        self._check_var = []\n", "        if self._ex.npind > 0:\n\t            for ii in range(self._ex.npind):\n\t                chk_var = tkinter.IntVar()\n\t                chk = tkinter.Checkbutton(self._sidebar, text=self._ex.pind_to_prop[ii], anchor=tkinter.W, variable=chk_var, onvalue=1, offvalue=0, tristatevalue=-1, command=self._toggle_prop)\n\t                chk.pack()\n\t                self._check.append(chk)\n\t                self._check_var.append(chk_var)\n\t        self._widgets = []\n\t        self._label_rem = tkinter.Label(self._sidebar)\n\t        self._label_rem.pack()\n", "        self._widgets.append(self._label_rem)\n\t        def keybutton(key, text, command):\n\t            btn = tkinter.Button(self._sidebar, text=text, command=command)\n\t            btn.pack()\n\t            self._widgets.append(btn)\n\t            self.bind_all('<KeyPress-' + key + '>', command)\n\t        keybutton('p', '(P)ath mode', self.on_evt_path_mode)\n\t        keybutton('x', 'Clear (X)', self.on_evt_clear)\n\t        keybutton('r', '(R)andom', self.on_evt_random)\n\t        keybutton('f', '(F)inish', self.on_evt_finish)\n", "        keybutton('z', 'Undo (Z)', self.on_evt_undo)\n\t        keybutton('y', 'Redo (Y)', self.on_evt_redo)\n\t        keybutton('d', '(D)isplay', self.on_evt_display)\n\t        keybutton('e', '(E)xport', self.on_evt_export)\n\t        self._cvs.bind('<Motion>', self.on_mouse_motion)\n\t        self._cvs.bind('<Leave>', self.on_mouse_leave)\n\t        self._cvs.bind('<ButtonPress-1>', self.on_mouse_button)\n\t        void_list = [self._ex.void_tind] if self._ex.void_tind is not None else []\n\t        self._tind_text = np.array(list(self._ex.tind_to_text) + void_list)\n\t        self._tind_image = np.array(list(self._ex.tind_to_image) + void_list)\n", "        self._tind_to_image = {}\n\t        self._avg_color = 'lightgray'\n\t        if len(self._ex.tind_to_image) > 0:\n\t            image_sizes = math.ceil(math.sqrt(len(self._ex.tind_to_image)))\n\t            if image_sizes >= 8:\n\t                print('too many tiles')\n\t                sys.exit(-1)\n\t            for sz in range(1, image_sizes + 1):\n\t                imgsz = (math.ceil(self._cell_size / sz), math.ceil(self._cell_size / sz))\n\t                self._tind_to_image[sz] = {}\n", "                if self._ex.void_tind is not None:\n\t                    void_image = PIL.Image.new('RGB', imgsz, (48, 32, 32))\n\t                    void_draw = PIL.ImageDraw.Draw(void_image)\n\t                    void_draw.line([(0, imgsz[1]), (imgsz[0], 0)], fill=(80, 32, 32), width=3)\n\t                    self._tind_to_image[sz][self._ex.void_tind] = PIL.ImageTk.PhotoImage(void_image)\n\t                for tind, img in self._ex.tind_to_image.items():\n\t                    img = img.resize(imgsz, PIL.Image.Resampling.BILINEAR)\n\t                    self._tind_to_image[sz][tind] = PIL.ImageTk.PhotoImage(img)\n\t            img_sum = None\n\t            img_count = 0\n", "            for tile, image in self._ex.tileset.tile_to_image.items():\n\t                arr = np.array(image.getdata())\n\t                if img_sum is None:\n\t                    img_sum = np.sum(arr, axis=0)\n\t                else:\n\t                    img_sum += np.sum(arr, axis=0)\n\t                img_count += len(arr)\n\t            avg_color = ((img_sum / img_count + 240) / 2).astype(np.uint8)\n\t            self._avg_color = '#%02x%02x%02x' % (avg_color[0], avg_color[1], avg_color[2])\n\t        self._mouse_evt = None\n", "        self._mouse = None\n\t        self._selected_tiles = np.array(util.make_grid(self._ex.rows, self._ex.cols, [0] * self._ex.ntind), dtype=np.uint8)\n\t        self._selected_tiles_auto = self._selected_tiles.copy()\n\t        self._selected_einds = np.zeros(self._ex.neind, dtype=np.uint8)\n\t        self._selected_pinds = np.zeros(self._ex.npind, dtype=np.uint8)\n\t        self._rem = RemainingInfo(self._ex.rows, self._ex.cols)\n\t        self._tmp1 = np.zeros((self._nlevels, self._packed_level_len), dtype=np.uint8)\n\t        self._tmp2 = np.zeros((self._nlevels, self._packed_level_len), dtype=bool)\n\t        self._tmp3 = np.zeros((self._nlevels, 1), dtype=bool)\n\t        self._tmp4 = np.zeros((self._nlevels, self._packed_level_len), dtype=np.uint8)\n", "        self._tmp5 = np.zeros(self._packed_level_len, dtype=np.uint8)\n\t        self._selected_cache = {}\n\t        self._undo = []\n\t        self._undo_ind = -1\n\t        self._show_paths = PATH_OFF\n\t        self._draw_working = []\n\t        self._draw_mouse = []\n\t        self._draw_selected = []\n\t        self._draw_path = []\n\t        self._draw_back = []\n", "        self._thread = None\n\t        self._mutex = threading.RLock()\n\t        with self._mutex:\n\t            self.undo_push()\n\t            self._recompute()\n\t            self.redraw_from_back()\n\t    def tocvsx(self, x):\n\t        return (x * self._cell_size) + INSET + self._xoffset\n\t    def tocvsy(self, y):\n\t        return (y * self._cell_size) + INSET + self._yoffset\n", "    def fromcvsx(self, x):\n\t        return (x - INSET - self._xoffset) / self._cell_size\n\t    def fromcvsy(self, y):\n\t        return (y - INSET - self._yoffset) / self._cell_size\n\t    def _toggle_prop(self):\n\t        with self._mutex:\n\t            for ii, cv in enumerate(self._check_var):\n\t                self._selected_pinds[ii] = (1 if cv.get() == 1 else 0)\n\t            self.undo_push()\n\t            self._recompute()\n", "            self.redraw_from_back()\n\t    def rem_indices(self, show_tiles):\n\t        if show_tiles == TILE_TEXT:\n\t            return self._rem.texts, self._rem.texts_sqrt, self._tind_text\n\t        else:\n\t            return self._rem.images, self._rem.images_sqrt, self._tind_image\n\t    def _recompute_mouse(self):\n\t        if self._mouse_evt is not None:\n\t            mex = self._mouse_evt.x\n\t            mey = self._mouse_evt.y\n", "            md = 0\n\t            while md < len(self._displays):\n\t                self._xoffset, self._yoffset = md * self._display_dx, md * self._display_dy\n\t                mrr, mcr = self.fromcvsy(self._mouse_evt.y), self.fromcvsx(self._mouse_evt.x)\n\t                mr, mc = math.floor(mrr), math.floor(mcr)\n\t                if 0 <= mr and mr < self._ex.rows and 0 <= mc and mc < self._ex.cols:\n\t                    break\n\t                md += 1\n\t            mi = None\n\t            if 0 <= mr and mr < self._ex.rows and 0 <= mc and mc < self._ex.cols:\n", "                mrf, mcf = mrr - mr, mcr - mc\n\t                if self._show_paths == PATH_EDIT:\n\t                    if md > 0:\n\t                        self._mouse = None\n\t                        return\n\t                    closest_pt, closest_dist_sq = None, None\n\t                    for eind in self._rem.einds_cell[mr][mc]:\n\t                        r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                        r0 += 0.5\n\t                        c0 += 0.5\n", "                        dist_sq = (r0 - mrr) ** 2 + (c0 - mcr) ** 2\n\t                        if closest_pt is None or dist_sq < closest_dist_sq:\n\t                            closest_pt, closest_dist_sq = (r0, c0), dist_sq\n\t                    if closest_pt is not None:\n\t                        clr, clc = closest_pt\n\t                        close_einds = []\n\t                        for eind in self._rem.einds_cell[mr][mc]:\n\t                            r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                            r0 += 0.5\n\t                            c0 += 0.5\n", "                            dist_sq = (r0 - clr) ** 2 + (c0 - clc) ** 2\n\t                            if dist_sq <= 0.1 * 0.1:\n\t                                close_einds.append(eind)\n\t                        def normvec(_vr, _vc):\n\t                            _vl = math.sqrt(_vr * _vr + _vc * _vc)\n\t                            if _vl < 0.01:\n\t                                return (0.0, 1.0)\n\t                            return (_vr / _vl, _vc / _vl)\n\t                        mvr, mvc = normvec(mrr - clr, mcr - clc)\n\t                        closest, closest_ang = None, None\n", "                        for eind in close_einds:\n\t                            r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                            r0 += 0.5\n\t                            c0 += 0.5\n\t                            r1 += 0.5\n\t                            c1 += 0.5\n\t                            evr, evc = normvec(r1 - r0, c1 - c0)\n\t                            edge_ang = math.acos(max(-1.0, min(1.0, mvr * evr + mvc * evc)))\n\t                            if closest_ang is None or edge_ang < closest_ang:\n\t                                closest, closest_ang = eind, edge_ang\n", "                        mi = closest\n\t                else:\n\t                    indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(self._displays[md])\n\t                    sqrt = indices_sqrt_rc[mr][mc]\n\t                    mir = math.floor(mrf * sqrt)\n\t                    mic = math.floor(mcf * sqrt)\n\t                    ii = mir * sqrt + mic\n\t                    if ii < len(indices_rc[mr][mc]):\n\t                        mi = ii\n\t                self._mouse = (mr, mc, md, mi)\n", "            else:\n\t                self._mouse = None\n\t        else:\n\t            self._mouse = None\n\t    def _recompute_thread(self):\n\t        with self._mutex:\n\t            if TIME_RECOMPUTE is not None:\n\t                start_time = time.time()\n\t            selected_tiles = np.bitwise_or(self._selected_tiles.reshape(self._tiles_len), self._selected_tiles_auto.reshape(self._tiles_len))\n\t            selected_packed = np.packbits(np.concatenate((selected_tiles, self._selected_einds, self._selected_pinds)))\n", "        cache_key = selected_packed.tobytes()\n\t        if cache_key not in self._selected_cache:\n\t            np.bitwise_and(selected_packed, self._ex.level_data, out=self._tmp1)\n\t            np.equal(self._tmp1, selected_packed, out=self._tmp2)\n\t            np.all(self._tmp2, axis=1, keepdims=True, out=self._tmp3)\n\t            np.multiply(self._tmp3, self._ex.level_data, out=self._tmp4)\n\t            np.bitwise_or.reduce(self._tmp4, out=self._tmp5)\n\t            remaining = np.unpackbits(self._tmp5, count=self._level_len, axis=0)\n\t            remaining_tiles, remaining_einds, remaining_pinds = np.split(remaining, [self._tiles_len, self._tiles_len + self._ex.neind])\n\t            remaining_tiles = remaining_tiles.reshape((self._ex.rows, self._ex.cols, self._ex.ntind))\n", "            out = RemainingInfo(self._ex.rows, self._ex.cols)\n\t            out.levels = np.nonzero(self._tmp3)[0]\n\t            out.nlevels = len(out.levels)\n\t            for rr in range(self._ex.rows):\n\t                for cc in range(self._ex.cols):\n\t                    tiles = np.nonzero(remaining_tiles[rr][cc])[0]\n\t                    out.texts[rr][cc] = np.intersect1d(tiles, self._tind_text)\n\t                    out.texts_sqrt[rr][cc] = math.ceil(math.sqrt(len(out.texts[rr][cc])))\n\t                    out.images[rr][cc] = np.intersect1d(tiles, self._tind_image)\n\t                    out.images_sqrt[rr][cc] = math.ceil(math.sqrt(len(out.images[rr][cc])))\n", "            out.einds = list(np.nonzero(remaining_einds)[0])\n\t            for eind in out.einds:\n\t                r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                rs = []\n\t                if r0 == int(r0):\n\t                    rs.append(int(r0))\n\t                else:\n\t                    if math.floor(r0) >= 0:\n\t                        rs.append(math.floor(r0))\n\t                    if math.ceil(r0) < self._ex.rows:\n", "                        rs.append(math.ceil(r0))\n\t                cs = []\n\t                if c0 == int(c0):\n\t                    cs.append(int(c0))\n\t                else:\n\t                    if math.floor(c0) >= 0:\n\t                        cs.append(math.floor(c0))\n\t                    if math.ceil(c0) < self._ex.cols:\n\t                        cs.append(math.ceil(c0))\n\t                for rr in rs:\n", "                    for cc in cs:\n\t                        out.einds_cell[rr][cc].append(eind)\n\t            out.pinds = remaining_pinds\n\t            self._selected_cache[cache_key] = out\n\t        else:\n\t            out = self._selected_cache[cache_key]\n\t            del self._selected_cache[cache_key]\n\t            self._selected_cache[cache_key] = out\n\t        while len(self._selected_cache) > MAX_CACHE:\n\t            key = next(iter(self._selected_cache))\n", "            del self._selected_cache[key]\n\t        out = self._selected_cache[cache_key]\n\t        with self._mutex:\n\t            sys.stdout.flush()\n\t            self._rem = out\n\t            self._thread = None\n\t            if TIME_RECOMPUTE is not None:\n\t                this_time = time.time() - start_time\n\t                self._times.append(this_time)\n\t                while len(self._times) > TIME_RECOMPUTE:\n", "                    del self._times[0]\n\t                print('%0.3f %0.3f' % (sum(self._times) / len(self._times), this_time))\n\t    def check_thread(self):\n\t        with self._mutex:\n\t            self.redraw_from_working()\n\t            if self._thread is None:\n\t                self._recompute_mouse()\n\t                self.redraw_from_back()\n\t            else:\n\t                self.after(1, self.check_thread)\n", "    def _recompute(self):\n\t        with self._mutex:\n\t            if self._thread is None:\n\t                for cb in self._check:\n\t                    cb['state'] = tkinter.DISABLED\n\t                for bt in self._widgets:\n\t                    bt['state'] = tkinter.DISABLED\n\t                self._thread = threading.Thread(target=self._recompute_thread)\n\t                self._thread.start()\n\t                self.redraw_from_back()\n", "                self.after(1, self.check_thread)\n\t    def create_rrect(self, x0, y0, x1, y1, cn, fill):\n\t        return self._cvs.create_polygon(x0+cn, y0, x0+cn, y0,\n\t                                   x1-cn, y0, x1-cn, y0,\n\t                                   x1, y0,\n\t                                   x1, y0+cn, x1, y0+cn,\n\t                                   x1, y1-cn, x1, y1-cn,\n\t                                   x1, y1,\n\t                                   x1-cn, y1, x1-cn, y1,\n\t                                   x0+cn, y1, x0+cn, y1,\n", "                                   x0, y1,\n\t                                   x0, y1-cn, x0, y1-cn,\n\t                                   x0, y0+cn, x0, y0+cn,\n\t                                   x0, y0,\n\t                                   fill=fill, outline='', joinstyle=tkinter.ROUND, smooth=1)\n\t    def create_arrow(self, x0, y0, x1, y1, fill, width, dash):\n\t        if dash is not None:\n\t            return self._cvs.create_line(x0, y0, x1, y1, fill=fill, width=width, arrow='last', dash=dash)\n\t        else:\n\t            return self._cvs.create_line(0.5 * (x0 + x1), 0.5 * (y0 + y1), x0, y0, x1, y1, fill=fill, width=width, arrow='last', joinstyle=tkinter.ROUND)\n", "    def create_tiles_from_cell(self, draw_list, disp, rr, cc):\n\t        indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(disp)\n\t        indices = indices_rc[rr][cc]\n\t        sqrt = indices_sqrt_rc[rr][cc]\n\t        to = self._cell_size / (2 * sqrt)\n\t        font = ('Courier', str(int(self._cell_size / sqrt)))\n\t        ind = 0\n\t        for index in indices:\n\t            ox = (ind % sqrt) / sqrt * self._cell_size\n\t            oy = (ind // sqrt) / sqrt * self._cell_size\n", "            ind += 1\n\t            if disp == TILE_IMAGE:\n\t                image = self._tind_to_image[sqrt][index]\n\t                draw_list.append(self._cvs.create_image(self.tocvsx(cc) + ox, self.tocvsy(rr) + oy, anchor=tkinter.NW, image=image))\n\t            else:\n\t                if index == self._ex.void_tind:\n\t                    draw_list.append(self._cvs.create_text(self.tocvsx(cc) + ox + to, self.tocvsy(rr) + oy + to, text='/', fill='#a04040', font=font, anchor=tkinter.CENTER))\n\t                else:\n\t                    draw_list.append(self._cvs.create_text(self.tocvsx(cc) + ox + to, self.tocvsy(rr) + oy + to, text=self._ex.tind_to_text[index], font=font, anchor=tkinter.CENTER))\n\t    def create_tiles_from(self, draw_list, disp):\n", "        indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(disp)\n\t        for rr in range(self._ex.rows):\n\t            for cc in range(self._ex.cols):\n\t                sqrt = indices_sqrt_rc[rr][cc]\n\t                if sqrt == 0:\n\t                    pass\n\t                elif sqrt <= MAX_SQRT:\n\t                    self.create_tiles_from_cell(draw_list, disp, rr, cc)\n\t                else:\n\t                    if disp == TILE_IMAGE:\n", "                        clr = self._avg_color\n\t                    else:\n\t                        clr = 'lightgray'\n\t                    draw_list.append(self.create_rrect(self.tocvsx(cc + 0.1), self.tocvsy(rr + 0.1), self.tocvsx(cc + 0.9), self.tocvsy(rr + 0.9), 0.4 * self._cell_size, clr))\n\t    def redraw_from_working(self):\n\t        with self._mutex:\n\t            for draw in self._draw_working:\n\t                self._cvs.delete(draw)\n\t            self._draw_working = []\n\t        if self._thread is not None:\n", "            if self._mouse is None:\n\t                self._draw_working.append(self._cvs.create_arc(INSET + 5, INSET + 5, INSET + 30, INSET + 30, outline=COLOR_OVER, width=3, style=tkinter.ARC, start=time.time() * 45.0, extent=300.0))\n\t            else:\n\t                mr, mc, md, mi = self._mouse\n\t                self._draw_working.append(self._cvs.create_arc(self.tocvsx(mc + 0.1), self.tocvsy(mr + 0.1), self.tocvsx(mc + 0.4), self.tocvsy(mr + 0.4), outline=COLOR_OVER, width=2, style=tkinter.ARC, start=time.time() * 45.0, extent=300.0))\n\t    def redraw_from_mouse(self):\n\t        with self._mutex:\n\t            for draw in self._draw_mouse:\n\t                self._cvs.delete(draw)\n\t            self._draw_mouse = []\n", "            if self._thread is not None:\n\t                color_over = COLOR_INACTIVE\n\t            else:\n\t                color_over = COLOR_OVER\n\t            if self._mouse is not None:\n\t                mr, mc, md, mi = self._mouse\n\t                for dd, disp in enumerate(self._displays):\n\t                    self._xoffset, self._yoffset = dd * self._display_dx, dd * self._display_dy\n\t                    if dd != md:\n\t                        self._draw_mouse.append(self._cvs.create_rectangle(self.tocvsx(mc), self.tocvsy(mr), self.tocvsx(mc + 1), self.tocvsy(mr + 1), outline=color_over, width=2))\n", "                indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(self._displays[md])\n\t                sqrt = indices_sqrt_rc[mr][mc]\n\t                self._xoffset, self._yoffset = md * self._display_dx,  md * self._display_dy\n\t                if self._thread is None:\n\t                    if self._show_paths == PATH_EDIT:\n\t                        for eind in self._rem.einds_cell[mr][mc]:\n\t                            r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                            self._draw_mouse.append(self.create_arrow(self.tocvsx(c0 + 0.5), self.tocvsy(r0 + 0.5), self.tocvsx(c1 + 0.5), self.tocvsy(r1 + 0.5), COLOR_EDGE, 3, None))\n\t                    else:\n\t                        if sqrt > MAX_SQRT:\n", "                            tile_cids = []\n\t                            disp = self._displays[md]\n\t                            self.create_tiles_from_cell(tile_cids, disp, mr, mc)\n\t                            tile_cids.append(self._cvs.create_rectangle(self.tocvsx(mc), self.tocvsy(mr), self.tocvsx(mc + 1), self.tocvsy(mr + 1), fill=COLOR_BACK, outline=''))\n\t                            for cid in tile_cids:\n\t                                self._cvs.tag_raise(cid, self._draw_back[-1])\n\t                            self._draw_mouse += tile_cids\n\t                self._draw_mouse.append(self._cvs.create_rectangle(self.tocvsx(mc), self.tocvsy(mr), self.tocvsx(mc + 1), self.tocvsy(mr + 1), outline=color_over, width=2))\n\t                if self._show_paths == PATH_EDIT:\n\t                    self._draw_mouse.append(self.create_arrow(self.tocvsx(mc + 0), self.tocvsy(mr + 0), self.tocvsx(mc + 1), self.tocvsy(mr + 0), color_over, 2, None))\n", "                    self._draw_mouse.append(self.create_arrow(self.tocvsx(mc + 1), self.tocvsy(mr + 1), self.tocvsx(mc + 0), self.tocvsy(mr + 1), color_over, 2, None))\n\t                if mi is not None and self._thread is None:\n\t                    if self._show_paths == PATH_EDIT:\n\t                        r0, c0, r1, c1 = self._ex.eind_to_edge[mi]\n\t                        self._draw_mouse.append(self.create_arrow(self.tocvsx(c0 + 0.5), self.tocvsy(r0 + 0.5), self.tocvsx(c1 + 0.5), self.tocvsy(r1 + 0.5), COLOR_ACTIVE, 3, None))\n\t                    else:\n\t                        ox = (mi % sqrt) / sqrt * self._cell_size\n\t                        oy = (mi // sqrt) / sqrt * self._cell_size\n\t                        sz = self._cell_size // sqrt\n\t                        self._draw_mouse.append(self._cvs.create_rectangle(self.tocvsx(mc) + ox, self.tocvsy(mr) + oy, self.tocvsx(mc) + ox + sz, self.tocvsy(mr) + oy + sz, outline=COLOR_ACTIVE, width=3))\n", "            self.redraw_from_working()\n\t    def redraw_from_selected(self):\n\t        with self._mutex:\n\t            for draw in self._draw_selected:\n\t                self._cvs.delete(draw)\n\t            self._draw_selected = []\n\t            for dd, disp in enumerate(self._displays):\n\t                self._xoffset, self._yoffset = dd * self._display_dx, dd * self._display_dy\n\t                indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(disp)\n\t                for rr in range(self._ex.rows + 1):\n", "                    self._draw_selected.append(self._cvs.create_line(self.tocvsx(0), self.tocvsy(rr), self.tocvsx(self._ex.cols), self.tocvsy(rr), fill=COLOR_GRID))\n\t                for cc in range(self._ex.cols + 1):\n\t                    self._draw_selected.append(self._cvs.create_line(self.tocvsx(cc), self.tocvsy(0), self.tocvsx(cc), self.tocvsy(self._ex.rows), fill=COLOR_GRID))\n\t                for rr in range(self._ex.rows):\n\t                    for cc in range(self._ex.cols):\n\t                        if np.count_nonzero(self._selected_tiles[rr][cc][indices_disp]) > 0:\n\t                            self._draw_selected.append(self._cvs.create_rectangle(self.tocvsx(cc + 0.1), self.tocvsy(rr + 0.1), self.tocvsx(cc + 0.9), self.tocvsy(rr + 0.9), outline=COLOR_SELECTED, width=2, dash=(2,4)))\n\t                        elif np.count_nonzero(self._selected_tiles[rr][cc]) > 0:\n\t                            self._draw_selected.append(self._cvs.create_rectangle(self.tocvsx(cc + 0.1), self.tocvsy(rr + 0.1), self.tocvsx(cc + 0.9), self.tocvsy(rr + 0.9), outline=COLOR_SELECTED, width=2, dash=(2,12)))\n\t                        elif np.count_nonzero(self._selected_tiles_auto[rr][cc][indices_disp]) > 0:\n", "                            self._draw_selected.append(self._cvs.create_rectangle(self.tocvsx(cc + 0.1), self.tocvsy(rr + 0.1), self.tocvsx(cc + 0.9), self.tocvsy(rr + 0.9), outline=COLOR_SELECTED, width=1, dash=(4,8)))\n\t            if np.sum(self._selected_einds) > 0:\n\t                self._xoffset, self._yoffset = 0, 0\n\t                for eind, (r0, c0, r1, c1) in self._ex.eind_to_edge.items():\n\t                    if self._selected_einds[eind]:\n\t                        self._draw_selected.append(self.create_arrow(self.tocvsx(c0 + 0.5), self.tocvsy(r0 + 0.5), self.tocvsx(c1 + 0.5), self.tocvsy(r1 + 0.5), COLOR_SELECTED, 5, (4,4)))\n\t            self.redraw_from_mouse()\n\t    def redraw_from_path(self):\n\t        with self._mutex:\n\t            for draw in self._draw_path:\n", "                self._cvs.delete(draw)\n\t            self._draw_path = []\n\t            if self._show_paths in [PATH_VIEW, PATH_EDIT]:\n\t                self._xoffset, self._yoffset = 0, 0\n\t                if len(self._rem.einds) <= MAX_EDGES:\n\t                    for eind in self._rem.einds:\n\t                        r0, c0, r1, c1 = self._ex.eind_to_edge[eind]\n\t                        self._draw_path.append(self.create_arrow(self.tocvsx(c0 + 0.5), self.tocvsy(r0 + 0.5), self.tocvsx(c1 + 0.5), self.tocvsy(r1 + 0.5), COLOR_EDGE, 3, None))\n\t                else:\n\t                    for rr in range(self._ex.rows):\n", "                        for cc in range(self._ex.cols):\n\t                            if len(self._rem.einds_cell[rr][cc]) > 0:\n\t                                self._draw_path.append(self._cvs.create_oval(self.tocvsx(cc + 0.4), self.tocvsy(rr + 0.4), self.tocvsx(cc + 0.6), self.tocvsy(rr + 0.6), fill=COLOR_EDGE, outline=''))\n\t            self.redraw_from_selected()\n\t    def redraw_from_back(self):\n\t        with self._mutex:\n\t            for draw in self._draw_back:\n\t                self._cvs.delete(draw)\n\t            self._draw_back = []\n\t            self._label_rem.config(text=str(self._rem.nlevels) + ' level' + ('' if self._rem.nlevels == 1 else 's'))\n", "            for cb, cv, selected, remaining in zip(self._check, self._check_var, self._selected_pinds, self._rem.pinds):\n\t                if remaining:\n\t                    if self._thread is not None:\n\t                        cb['state'] = tkinter.DISABLED\n\t                    else:\n\t                        cb['state'] = tkinter.NORMAL\n\t                    if selected:\n\t                        cv.set(1)\n\t                    else:\n\t                        cv.set(0)\n", "                else:\n\t                    cb['state'] = tkinter.DISABLED\n\t                    cv.set(-1)\n\t            for bt in self._widgets:\n\t                if self._thread is not None:\n\t                    bt['state'] = tkinter.DISABLED\n\t                else:\n\t                    bt['state'] = tkinter.NORMAL\n\t            for dd, disp in enumerate(self._displays):\n\t                self._xoffset, self._yoffset = dd * self._display_dx, dd * self._display_dy\n", "                self._draw_back.append(self._cvs.create_rectangle(self.tocvsx(0), self.tocvsy(0), self.tocvsx(self._ex.cols), self.tocvsy(self._ex.rows), fill=COLOR_BACK, outline=''))\n\t                self.create_tiles_from(self._draw_back, disp)\n\t            self.redraw_from_path()\n\t    def undo_append(self):\n\t        with self._mutex:\n\t            self._undo.append((self._selected_tiles.copy(),\n\t                               self._selected_tiles_auto.copy(),\n\t                               self._selected_einds.copy(),\n\t                               self._selected_pinds.copy()))\n\t    def undo_restore(self):\n", "        with self._mutex:\n\t            selected_tiles, selected_tiles_auto, selected_einds, selected_pinds = self._undo[self._undo_ind]\n\t            self._selected_tiles = selected_tiles.copy()\n\t            self._selected_tiles_auto = selected_tiles_auto.copy()\n\t            self._selected_einds = selected_einds.copy()\n\t            self._selected_pinds = selected_pinds.copy()\n\t    def undo_push(self):\n\t        with self._mutex:\n\t            self._undo = self._undo[0:self._undo_ind + 1]\n\t            self.undo_append()\n", "            while len(self._undo) > MAX_UNDO + 1:\n\t                self._undo = self._undo[1:]\n\t            self._undo_ind = len(self._undo) - 1\n\t    def undo_undo(self):\n\t        with self._mutex:\n\t            if len(self._undo) > 0 and self._undo_ind > 0:\n\t                self._undo_ind -= 1\n\t                self.undo_restore()\n\t                return True\n\t            return False\n", "    def undo_redo(self):\n\t        with self._mutex:\n\t            if self._undo_ind + 1 < len(self._undo):\n\t                self._undo_ind += 1\n\t                self.undo_restore()\n\t                return True\n\t            return False\n\t    def on_evt_display(self, event=None):\n\t        with self._mutex:\n\t            if len(self._ex.tind_to_text) > 0 and len(self._ex.tind_to_image) > 0:\n", "                if len(self._displays) == 1:\n\t                    if self._displays == [TILE_IMAGE]:\n\t                        self._displays = [TILE_TEXT]\n\t                    else:\n\t                        self._displays = [TILE_IMAGE]\n\t                elif len(self._displays) == 2:\n\t                    if self._displays == [TILE_IMAGE, TILE_TEXT]:\n\t                        self._displays = [TILE_TEXT, TILE_IMAGE]\n\t                    else:\n\t                        self._displays = [TILE_IMAGE, TILE_TEXT]\n", "                self.redraw_from_back()\n\t    def on_evt_export(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n\t            if self._rem.nlevels != 1:\n\t                tkinter.messagebox.showwarning(message='Can only export when exactly one level.')\n\t            else:\n\t                ind = self._rem.levels[0]\n\t                remaining = np.unpackbits(self._ex.level_data[ind], count=self._level_len, axis=0)\n", "                remaining_tiles, remaining_einds, remaining_pinds = np.split(remaining, [self._tiles_len, self._tiles_len + self._ex.neind])\n\t                remaining_tiles = remaining_tiles.reshape((self._ex.rows, self._ex.cols, self._ex.ntind))\n\t                filename = 'explorer-out'\n\t                filenames = []\n\t                tile_level = util.make_grid(self._ex.rows, self._ex.cols, util.VOID_TILE)\n\t                for rr in range(self._ex.rows):\n\t                    for cc in range(self._ex.cols):\n\t                        tinds = tuple(np.nonzero(remaining_tiles[rr][cc])[0])\n\t                        if tinds != (self._ex.void_tind,):\n\t                            tile_level[rr][cc] = self._ex.tinds_to_tile[tinds]\n", "                tile_level = util.trim_void_tile_level(tile_level)\n\t                meta = []\n\t                if self._ex.neind > 0:\n\t                    edges = [self._ex.eind_to_edge[eind] for eind in self._rem.einds]\n\t                    path_edges = util_path.order_edge_path(edges)\n\t                    meta.append(util.meta_path(util.MGROUP_PATH, path_edges))\n\t                if self._ex.npind > 0:\n\t                    props = [self._ex.pind_to_prop[pind] for pind in np.nonzero(self._rem.pinds)[0]]\n\t                    meta.append(util.meta_properties(props))\n\t                tile_filename = filename + '.tlvl'\n", "                filenames.append(tile_filename)\n\t                with util.openz(tile_filename, 'wt') as f:\n\t                    util.print_tile_level_json(tile_level, meta=meta, outfile=f)\n\t                if len(self._ex.tind_to_text) > 0:\n\t                    text_level = util.tile_level_to_text_level(tile_level, self._ex.tileset)\n\t                    text_filename = filename + '.lvl'\n\t                    filenames.append(text_filename)\n\t                    with util.openz(text_filename, 'wt') as f:\n\t                        util.print_text_level(text_level, meta=meta, outfile=f)\n\t                if len(self._ex.tind_to_image) > 0:\n", "                    image_level = util.tile_level_to_image_level(tile_level, self._ex.tileset)\n\t                    image_filename = filename + '.png'\n\t                    filenames.append(image_filename)\n\t                    image_level.save(image_filename)\n\t                tkinter.messagebox.showinfo(message='Exported level to:\\n' + '\\n'.join(filenames))\n\t            self.focus_force()\n\t    def on_evt_undo(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n", "            if self.undo_undo():\n\t                self._recompute()\n\t                self.redraw_from_back()\n\t    def on_evt_redo(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n\t            if self.undo_redo():\n\t                self._recompute()\n\t                self.redraw_from_back()\n", "    def on_evt_clear(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n\t            self._selected_tiles *= 0\n\t            self._selected_tiles_auto *= 0\n\t            self._selected_einds *= 0\n\t            self._selected_pinds *= 0\n\t            self.undo_push()\n\t            self._recompute()\n", "            self.redraw_from_back()\n\t    def on_evt_path_mode(self, event=None):\n\t        with self._mutex:\n\t            if self._show_paths == PATH_OFF:\n\t                self._show_paths = PATH_VIEW\n\t            elif self._show_paths == PATH_VIEW:\n\t                self._show_paths = PATH_EDIT\n\t            else:\n\t                self._show_paths = PATH_OFF\n\t            self._recompute_mouse()\n", "            self.redraw_from_path()\n\t    def on_evt_random(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n\t            if self._rem.nlevels <= 1:\n\t                return\n\t            if self._show_paths == PATH_EDIT:\n\t                einds = [eind for eind in self._rem.einds if self._selected_einds[eind] == 0]\n\t                if len(einds) > 0:\n", "                    eind = random.choice(einds)\n\t                    self._selected_einds[eind] = 1\n\t                    self.undo_push()\n\t                    self._recompute()\n\t                    self.redraw_from_back()\n\t            else:\n\t                remaining_choices = []\n\t                for rr in range(self._ex.rows):\n\t                    for cc in range(self._ex.cols):\n\t                        if len(self._rem.texts[rr][cc]) > 1 and np.sum(self._selected_tiles[rr][cc][self._tind_text]) == 0:\n", "                            remaining_choices.append((rr, cc, self._rem.texts[rr][cc]))\n\t                        if len(self._rem.images[rr][cc]) > 1 and np.sum(self._selected_tiles[rr][cc][self._tind_image]) == 0:\n\t                            remaining_choices.append((rr, cc, self._rem.images[rr][cc]))\n\t                if len(remaining_choices) > 0:\n\t                    rr, cc, indices = random.choice(remaining_choices)\n\t                    index = random.choice(indices)\n\t                    self._selected_tiles[rr][cc][index] = 1\n\t                    self.undo_push()\n\t                    self._recompute()\n\t                    self.redraw_from_back()\n", "    def on_evt_finish(self, event=None):\n\t        with self._mutex:\n\t            if self._thread is not None:\n\t                return\n\t            if np.count_nonzero(self._selected_tiles_auto) > 0:\n\t                self._selected_tiles_auto *= 0\n\t                self.undo_push()\n\t                self._recompute()\n\t                self.redraw_from_back()\n\t            else:\n", "                ind = np.random.choice(self._rem.levels, 1)[0]\n\t                remaining = np.unpackbits(self._ex.level_data[ind], count=self._level_len, axis=0)\n\t                remaining_tiles, remaining_einds, remaining_pinds = np.split(remaining, [self._tiles_len, self._tiles_len + self._ex.neind])\n\t                remaining_tiles = remaining_tiles.reshape((self._ex.rows, self._ex.cols, self._ex.ntind))\n\t                self._selected_tiles_auto = remaining_tiles\n\t                self.undo_push()\n\t                self._recompute()\n\t                self.redraw_from_back()\n\t    def on_mouse_motion(self, event):\n\t        with self._mutex:\n", "            self._mouse_evt = event\n\t            self._recompute_mouse()\n\t            self.redraw_from_mouse()\n\t    def on_mouse_leave(self, event):\n\t        with self._mutex:\n\t            self._mouse_evt = None\n\t            self._recompute_mouse()\n\t            self.redraw_from_mouse()\n\t    def on_mouse_button(self, event):\n\t        with self._mutex:\n", "            if self._thread is not None:\n\t                return\n\t            if self._mouse is not None:\n\t                mr, mc, md, mi = self._mouse\n\t                if mi is not None:\n\t                    if self._show_paths == PATH_EDIT:\n\t                        if self._selected_einds[mi] != 0:\n\t                            self._selected_einds[mi] = 0\n\t                        else:\n\t                            self._selected_einds[mi] = 1\n", "                    else:\n\t                        indices_rc, indices_sqrt_rc, indices_disp = self.rem_indices(self._displays[md])\n\t                        if np.count_nonzero(self._selected_tiles[mr][mc][indices_disp]) != 0:\n\t                            self._selected_tiles[mr][mc][indices_disp] *= 0\n\t                        else:\n\t                            index = indices_rc[mr][mc][mi]\n\t                            self._selected_tiles[mr][mc][indices_disp] *= 0\n\t                            self._selected_tiles[mr][mc][index] = 1\n\t                    self.undo_push()\n\t                    self._recompute()\n", "                    self.redraw_from_back()\n\tdef explorer(explorer_info, cell_size, text_disp, image_disp):\n\t    root = tkinter.Tk()\n\t    root.title('explorer')\n\t    print('exploring', len(explorer_info.level_data), 'levels')\n\t    if len(explorer_info.tind_to_text) > 0:\n\t        print('has text')\n\t    if len(explorer_info.tind_to_image) > 0:\n\t        print('has image')\n\t    ExplorerFrame(root, explorer_info, cell_size, text_disp, image_disp)\n", "    root.mainloop()\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser(description='Path editor.')\n\t    parser.add_argument('--explorefile', required=True, type=str, help='Explore file to run, or write to.')\n\t    parser.add_argument('--cell-size', type=int, help='Size of cells.', default=CELL_SIZE_DEF)\n\t    parser.add_argument('--text', action='store_true', help='Try text display.')\n\t    parser.add_argument('--image', action='store_true', help='Try image display.')\n\t    args = parser.parse_args()\n\t    print('loading...')\n\t    start_time = time.time()\n", "    with util.openz(args.explorefile, 'rb') as f:\n\t        explore_info = pickle.load(f)\n\t    print('loaded %d levels in %0.3f' % (len(explore_info.level_data), time.time() - start_time))\n\t    explorer(explore_info, args.cell_size, args.text, args.image)\n"]}
{"filename": "util_path.py", "chunked_list": ["import util\n\tRANDOM_PATH_INSET = 1\n\tdef point_path_from_edge_path(edge_path):\n\t    point_path = []\n\t    if len(edge_path) > 0:\n\t        (fr, fc, tr, tc) = edge_path[0]\n\t        point_path.append((fr, fc))\n\t    for (fr, fc, tr, tc) in edge_path:\n\t        util.check((fr, fc) == point_path[-1], 'edge path')\n\t        point_path.append((tr, tc))\n", "    return point_path\n\tdef edge_path_from_point_path(point_path):\n\t    return [(a, b, c, d) for (a, b), (c, d) in zip(point_path, point_path[1:])]\n\tdef order_edge_path(edge_path_unordered):\n\t    src_to_dst = {}\n\t    dsts = {}\n\t    for a, b, c, d in edge_path_unordered:\n\t        src_to_dst[(a, b)] = (c, d)\n\t        dsts[(c, d)] = None\n\t    src = None\n", "    for a, b, c, d in edge_path_unordered:\n\t        if (a, b) not in dsts:\n\t            util.check(src is None, 'multiple starts in path')\n\t            src = (a, b)\n\t    util.check(src is not None, 'no starts in path')\n\t    edge_path = []\n\t    while src in src_to_dst:\n\t        dst = src_to_dst[src]\n\t        edge_path.append((src[0], src[1], dst[0], dst[1]))\n\t        util.check(len(edge_path) <= len(edge_path_unordered), 'path lengths')\n", "        src = dst\n\t    util.check(len(edge_path) == len(edge_path_unordered), 'path lengths')\n\t    return edge_path\n\tdef edge_path_from_lines(prefix, lines):\n\t    for line in lines:\n\t        if line.startswith(prefix):\n\t            edge_path = []\n\t            edges_str = line[len(prefix):]\n\t            for edge in edges_str.split(','):\n\t                edge = tuple([int(el) for el in edge.strip().split()])\n", "                util.check(len(edge) == 4, 'edge length')\n\t                edge_path.append(edge)\n\t            return edge_path\n\t    return None\n\tdef get_template_open_closed(move_template):\n\t    template_open_closed = {}\n\t    for dest, need_open_path, need_open_aux, need_closed in move_template:\n\t        need_open_close = ([(0, 0)] + need_open_path + need_open_aux + [dest], need_closed)\n\t        if dest not in template_open_closed:\n\t            template_open_closed[dest] = []\n", "        template_open_closed[dest].append(need_open_close)\n\t    return template_open_closed\n\tdef get_path_open_closed(path, template_open_closed):\n\t    path_open = {}\n\t    path_closed = {}\n\t    for (fr, fc, tr, tc) in edge_path_from_point_path(path):\n\t        dr, dc = tr - fr, tc - fc\n\t        open_sets, closed_sets = [], []\n\t        for dopen, dclosed in template_open_closed[(dr, dc)]:\n\t            open_set, closed_set = set(), set()\n", "            for (rr, cc) in dopen:\n\t                open_set.add((fr + rr, fc + cc))\n\t            open_sets.append(open_set)\n\t            for (rr, cc) in dclosed:\n\t                closed_set.add((fr + rr, fc + cc))\n\t            closed_sets.append(closed_set)\n\t        for open_pt in sorted(set.intersection(*open_sets)):\n\t            path_open[open_pt] = None\n\t        for closed_pt in sorted(set.intersection(*closed_sets)):\n\t            path_closed[closed_pt] = None\n", "    return path_open, path_closed\n\tdef get_level_open_closed(text_level, open_text):\n\t    are_open = {}\n\t    are_closed = {}\n\t    util.check(util.START_TEXT not in open_text and util.GOAL_TEXT not in open_text, 'start/goal in open_text')\n\t    open_start_goal_text = open_text + util.START_TEXT + util.GOAL_TEXT\n\t    for rr in range(len(text_level)):\n\t        for cc in range(len(text_level[rr])):\n\t            if text_level[rr][cc] in open_start_goal_text:\n\t                are_open[(rr, cc)] = None\n", "            else:\n\t                are_closed[(rr, cc)] = None\n\t    return are_open, are_closed\n\tdef get_nexts_from(pt, rows, cols, template_open_closed, are_open, are_closed, exclude):\n\t    lr, lc = pt\n\t    nexts = {}\n\t    for dest, need_open_closeds in template_open_closed.items():\n\t        nr, nc = lr + dest[0], lc + dest[1]\n\t        if nr < 0 or rows <= nr or nc < 0 or cols <= nc:\n\t            continue\n", "        if (nr, nc) in exclude:\n\t            continue\n\t        for need_open, need_closed in need_open_closeds:\n\t            need_missing = False\n\t            for need_r, need_c in need_open:\n\t                need_r, need_c = lr + need_r, lc + need_c\n\t                if need_r < 0 or rows <= need_r or need_c < 0 or cols <= need_c:\n\t                    need_missing = True\n\t                if (need_r, need_c) in are_closed:\n\t                    need_missing = True\n", "            for need_r, need_c in need_closed:\n\t                need_r, need_c = lr + need_r, lc + need_c\n\t                if need_r < 0 or rows <= need_r or need_c < 0 or cols <= need_c:\n\t                    need_missing = True\n\t                if (need_r, need_c) in are_open:\n\t                    need_missing = True\n\t            if need_missing:\n\t                continue\n\t            nexts[(nr, nc)] = None\n\t    return nexts\n", "def get_nexts_open_closed_from(path, reverse, rows, cols, template_open_closed):\n\t    path_nexts = None\n\t    path_open, path_closed = get_path_open_closed(path, template_open_closed)\n\t    if len(path) > 0:\n\t        if not reverse:\n\t            path_nexts = get_nexts_from(path[-1], rows, cols, template_open_closed, path_open, path_closed, path)\n\t        else:\n\t            path_nexts = {}\n\t            for rr in range(rows):\n\t                for cc in range(cols):\n", "                    pt = (rr, cc)\n\t                    if pt in path:\n\t                        continue\n\t                    if path[0] not in get_nexts_from(pt, rows, cols, template_open_closed, path_open, path_closed, path[1:]):\n\t                        continue\n\t                    path_nexts[pt] = None\n\t    return path_nexts, path_open, path_closed\n\tdef path_between(rng, start, end, rows, cols, inset, template_open_closed, are_open_closed):\n\t    q = []\n\t    seen = {}\n", "    q.append([start])\n\t    seen[start] = None\n\t    found_path = None\n\t    while len(q) > 0:\n\t        path = q.pop()\n\t        if path[-1] == end:\n\t            found_path = path\n\t            break\n\t        if are_open_closed is not None:\n\t            are_open, are_closed = are_open_closed\n", "        else:\n\t            are_open, are_closed = get_path_open_closed(path, template_open_closed)\n\t        path_nexts = get_nexts_from(path[-1], rows, cols, template_open_closed, are_open, are_closed, path)\n\t        for n in path_nexts:\n\t            if n[0] < inset or n[0] >= rows - inset:\n\t                continue\n\t            if n[1] < inset or n[1] >= cols - inset:\n\t                continue\n\t            if n not in seen:\n\t                q.insert(0, path + [n])\n", "                seen[n] = None\n\t        if rng is not None:\n\t            rng.shuffle(q)\n\t    return found_path\n\tdef shortest_path_between(start, end, rows, cols, template_open_closed, are_open, are_closed):\n\t    return path_between(None, start, end, rows, cols, 0, template_open_closed, (are_open, are_closed))\n\tdef random_path_between(rng, start, end, rows, cols, inset, template_open_closed):\n\t    return path_between(rng, start, end, rows, cols, inset, template_open_closed, None)\n\tdef random_path_by_search(rng, rows, cols, template_open_closed):\n\t    pts = []\n", "    for rr in range(RANDOM_PATH_INSET, rows - RANDOM_PATH_INSET):\n\t        for cc in range(RANDOM_PATH_INSET, cols - RANDOM_PATH_INSET):\n\t            pts.append((rr, cc))\n\t    start, end = rng.sample(pts, 2)\n\t    return random_path_between(rng, start, end, rows, cols, RANDOM_PATH_INSET, template_open_closed)\n"]}
{"filename": "explore2summary.py", "chunked_list": ["import argparse, json, pickle, sys, time\n\timport util, util_explore\n\timport numpy as np\n\tdef explore2summary(ex, summarize_levels, summarize_edges):\n\t    level_length = ex.rows * ex.cols * ex.ntind + ex.neind + ex.npind\n\t    print('levels:', ex.level_data.shape[0])\n\t    print('level length:', level_length)\n\t    print('level length (packed):', ex.level_data.shape[1])\n\t    print('size:', ex.rows, 'rows,', ex.cols, 'cols')\n\t    print('tile indices / bits:', ex.ntind, '/', ex.rows * ex.cols * ex.ntind)\n", "    print('edge indices:', ex.neind)\n\t    print('property indices:', ex.npind)\n\t    image_ids = {}\n\t    for tind, image in ex.tind_to_image.items():\n\t        image_id = id(image)\n\t        if image_id not in image_ids:\n\t            image_ids[image_id] = util.index_to_char(len(image_ids))\n\t    print('index text:  ', ''.join([(ex.tind_to_text[tind] if tind in ex.tind_to_text else ' ') for tind in range(ex.ntind)]))\n\t    print('index image: ', ''.join([(image_ids[id(ex.tind_to_image[tind])] if tind in ex.tind_to_image else ' ')  for tind in range(ex.ntind)]))\n\t    tile_to_tinds = {}\n", "    for tinds, tile in ex.tinds_to_tile.items():\n\t        tile_to_tinds[tile] = tinds\n\t    tiles_strings = []\n\t    for tile in ex.tileset.tile_ids:\n\t        tile_string = str(tile) + ':'\n\t        for tind in tile_to_tinds[tile]:\n\t            if tind in ex.tind_to_text:\n\t                tile_string = tile_string + ex.tind_to_text[tind]\n\t            if tind in ex.tind_to_image:\n\t                tile_string = tile_string + image_ids[id(ex.tind_to_image[tind])]\n", "        tiles_strings.append(tile_string)\n\t    print('tiles:', ' '.join(tiles_strings))\n\t    print('void tile:', 'yes' if ex.void_tind is not None else 'no')\n\t    print('properties:', '; '.join(ex.pind_to_prop.values()))\n\t    if summarize_edges:\n\t        print('edges:')\n\t        for eind in range(ex.neind):\n\t            print(ex.eind_to_edge[eind])\n\t    if summarize_levels:\n\t        print('levels:')\n", "        print(''.join(((['T'] + ['t'] * (ex.ntind - 1)) * (ex.rows * ex.cols)) + ['e'] * ex.neind  + ['p'] * ex.npind))\n\t        levels_unpacked = np.unpackbits(ex.level_data, count=level_length, axis=1)\n\t        for level in levels_unpacked:\n\t            print(''.join([str(vv) for vv in level]))\n\tif __name__ == '__main__':\n\t    util.timer_start()\n\t    parser = argparse.ArgumentParser(description='Summarize explore file.')\n\t    parser.add_argument('--explorefile', required=True, type=str, help='Input explore file.')\n\t    parser.add_argument('--levels', action='store_true', help='Include levels in summary.')\n\t    parser.add_argument('--edges', action='store_true', help='Include edges in summary.')\n", "    args = parser.parse_args()\n\t    with util.openz(args.explorefile, 'rb') as f:\n\t        ex = pickle.load(f)\n\t    explore2summary(ex, args.levels, args.edges)\n"]}
{"filename": "util_explore.py", "chunked_list": ["class ExploreInfo:\n\t    def __init__(self):\n\t        self.rows = None\n\t        self.cols = None\n\t        self.tileset = None\n\t        self.ntind = None\n\t        self.neind = None\n\t        self.npind = None\n\t        self.void_tind = None\n\t        self.tind_to_text = None\n", "        self.tind_to_image = None\n\t        self.tinds_to_tile = None\n\t        self.eind_to_edge = None\n\t        self.pind_to_prop = None\n\t        self.level_data = None\n"]}
