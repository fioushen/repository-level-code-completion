{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\twith open('requirements.txt') as f:\n\t    requirements = f.read().splitlines()\n\tsetup(\n\t    name='mtbi_meeg',\n\t    version='0.0.1',\n\t    description='Pipeline to analyze EEG and MEG data and determine minor Trauma Brain Injuries',\n\t    author=['Verna Heikkinen', 'Estanislao Porta', 'Aino Kuusi'],\n\t    author_email=['verna.heikkinen@example.com', 'estanislao.porta@aalto.fi'],\n\t    install_requires=requirements,\n", "    url='githubURL',\n\t    package_dir = {'': 'src'},\n\t    packages = ['analysis', 'processing'],\n\t    classifiers=[\n\t\t'Programming Language :: Python :: 3',\n\t\t'License :: OSI Approved :: MIT License',\n\t\t'Operating System :: OS Independent',\n\t\t],\n\t)\n"]}
{"filename": "tests/test_02_plot_processed_data.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#############################\n\t# test_02_plot_processed_data.py #\n\t#############################\n\t@author: Estanislao Porta \n\tTests the functions from module 02_plot_processed_data.py\n\tUse `python3 -m pytest test_02_plot_processed_data.py` to run it from terminal\n\t# TODO: Should this import wide_bands and thin_bands from config_eeg?\n", "\"\"\"\n\timport pytest\n\timport importlib\n\timport os\n\timport sys\n\timport tempfile\n\timport shutil\n\timport numpy as np\n\timport pandas as pd\n\tsrc_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n", "sys.path.append(src_dir)\n\tfrom config_eeg import channels\n\tanalysis_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src', 'analysis'))\n\tsys.path.append(analysis_dir)\n\tmodule_name = \"02_plot_processed_data\" # Use importlib to import the module as a string to avoid conflicts with the numbers\n\tplot_processed_data = importlib.import_module(module_name)\n\tdef test_load_pickle_data():\n\t    #possibly moved to a class\n\t    pass\n\tdef test_define_freq_bands():\n", "    # I dont think there is anything really to be tested here. It should actually be moved to the config-eeg\n\t    pass\n\tdef test_global_averaging_with_sample_data():\n\t    # TODO: Test for wide freqs!\n\t    freqs = np.array([x for x in range(1, 43)])   \n\t    eeg_data = np.random.rand(3, len(freqs) * channels)\n\t    df = pd.DataFrame({'Group': [1, 0, 1], 'Subject': [\"26P\", \"01C\", \"02P\"]})\n\t    df = pd.concat([df, pd.DataFrame(eeg_data)], axis=1)\n\t    metadata = {\"roi\": 'All'}\n\t    expected_output = []\n", "    for idx in df.index:\n\t        subj_arr = np.array(df.loc[idx])[2:]\n\t        subj_arr = 10*np.log10(subj_arr.astype(float))\n\t        subj_arr = np.reshape(subj_arr, (channels, freqs.size))\n\t   # TODO: Remove the ROI for the testing     \n\t        if metadata[\"roi\"] == 'Frontal': \n\t            subj_arr = subj_arr[0:22, :]\n\t        GA = np.mean(subj_arr, axis=0)\n\t        expected_output.append(GA)    \n\t    actual_output = plot_processed_data.global_averaging(df, metadata, freqs)\n", "    assert len(expected_output) == len(actual_output)\n\t    assert all(tuple(a) == tuple(b) for a, b in zip(actual_output, expected_output)), \"The actual output does not match the expected output.\"\n\tdef test_global_averaging_with_empty_dataframe():\n\t    # The pickle data handler should already be considering these issues\n\t    metadata = {\"roi\": 'All'}\n\t    freqs = np.array([x for x in range(1, 43)])   \n\t    eeg_data = []\n\t    df = pd.DataFrame({'Group': [1, 0, 1], 'Subject': [\"26P\", \"01C\", \"02P\"]})\n\t    df = pd.concat([df, pd.DataFrame(eeg_data)], axis=1)\n\t    with pytest.raises(ValueError) as e:\n", "        plot_processed_data.global_averaging(df, metadata, freqs)\n\t    assert str(e.value) == \"Error: Empty data array.\"\n\tdef test_global_averaging_with_nan_values():\n\t    # The pickle data handler should already be considering this\n\t    metadata = {\"roi\": 'All'}\n\t    freqs = np.array([x for x in range(1, 43)])   \n\t    eeg_data = np.full((3, len(freqs) * channels), np.nan)\n\t    df = pd.DataFrame({'Group': [1, 0, 1], 'Subject': [\"26P\", \"01C\", \"02P\"]})\n\t    df = pd.concat([df, pd.DataFrame(eeg_data)], axis=1)\n\t    with pytest.raises(ValueError) as e:\n", "        plot_processed_data.global_averaging(df, metadata, freqs)\n\t    assert str(e.value) == \"Error: There is at least one NaN value.\"\n\tdef test_create_df_for_plotting():\n\t    metadata = {\"control_plot_segment\": 1, \"segments\": 2}\n\t    freqs = np.array([x for x in range(1, 43)])   \n\t    eeg_data = np.random.rand(3, len(freqs) * channels)\n\t    df = pd.DataFrame({'Group': [1, 0, 1], 'Subject': [\"26P\", \"01C\", \"02P\"]})\n\t    df = pd.concat([df, pd.DataFrame(eeg_data)], axis=1)\n\t    global_averages = []\n\t    for idx in df.index:\n", "        subj_arr = np.array(df.loc[idx])[2:]\n\t        subj_arr = 10 * np.log10(subj_arr.astype(float))\n\t        subj_arr = np.reshape(subj_arr, (channels, freqs.size))\n\t        GA = np.mean(subj_arr, axis=0)\n\t        global_averages.append(GA)\n\t    df_for_plotting = plot_processed_data.create_df_for_plotting(df, metadata, freqs, global_averages)\n\t    assert isinstance(df_for_plotting, pd.DataFrame)\n\tdef test_plot_control_figures():\n\t    pass\n\tdef test_save_fig():\n", "    pass\n"]}
{"filename": "tests/test_01_read_processed_data_unittest.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#############################\n\t# test_01_read_processed_data.py #\n\t#############################\n\t@author: Estanislao Porta \n\tTests the functions from module 01_read_processed_data.py\n\t\"\"\"\n\timport unittest\n", "import importlib\n\timport os\n\timport sys\n\timport tempfile\n\timport shutil\n\timport numpy as np\n\tsrc_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n\tsys.path.append(src_dir)\n\tfrom config_eeg import channels\n\tanalysis_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src', 'analysis'))\n", "sys.path.append(analysis_dir)\n\tmodule_name = \"01_read_processed_data\" # Use importlib to import the module as a string to avoid conflicts with the numbers\n\tread_processed_data = importlib.import_module(module_name)\n\tclass TestCreateSubjectsAndTasks(unittest.TestCase):\n\t    def test_create_subjects_and_tasks(self):\n\t        chosen_tasks = ['ec_1', 'ec_2', 'ec_3']\n\t        subjects = ['01P', '02C']\n\t        subjects_and_tasks = read_processed_data.create_subjects_and_tasks(chosen_tasks, subjects)\n\t        # Check that the output is a list\n\t        self.assertIsInstance(subjects_and_tasks, list)\n", "        # Check that the output has the correct length\n\t        self.assertEqual(len(subjects_and_tasks), len(chosen_tasks) * len(subjects))\n\t        # Check that each element in the output is a tuple with two elements\n\t        for element in subjects_and_tasks:\n\t            self.assertIsInstance(element, tuple)\n\t            self.assertEqual(len(element), 2)\n\tclass TestReadData(unittest.TestCase):\n\t    def test_read_data(self):\n\t        # Create temporary directory and dummy data\n\t        tmp_dir = tempfile.mkdtemp()\n", "        subjects_and_tasks = [('01P', 'ec_1'), ('01P', 'ec_2'), ('01P', 'ec_3')]\n\t        freq_bands = 'thin'\n\t        normalization = False\n\t        # Create dummy data files in the temporary directory\n\t        for subject, task in subjects_and_tasks:\n\t            subject_dir = os.path.join(tmp_dir, f'sub-{subject}', 'ses-01', 'eeg', 'bandpowers')\n\t            os.makedirs(subject_dir, exist_ok=True)\n\t            # Create random data for \n\t            data = np.random.rand(89, 64)\n\t            filename = f'{freq_bands}_{task}.csv'\n", "            filepath = os.path.join(subject_dir, filename)\n\t            np.savetxt(filepath, data, delimiter=',')\n\t        # Call the method with the temporary directory and dummy data\n\t        processed_data_dir = tmp_dir\n\t        result = read_processed_data.read_data(subjects_and_tasks, freq_bands, normalization, processed_data_dir)\n\t        # Check that the output has the expected shape\n\t        expected_shape = (len(subjects_and_tasks), channels*38)\n\t        assert np.shape(result) == expected_shape, f\"Output has shape {np.shape(result)}, but expected shape is {expected_shape}\"\n\t        # Remove the temporary directory\n\t        shutil.rmtree(tmp_dir)\n", "class TestCreateDataFrame(self):\n\t    create_data_frame\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "tests/test_01_read_processed_data.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#############################\n\t# test_01_read_processed_data.py #\n\t#############################\n\t@author: Estanislao Porta \n\tTests the functions from module 01_read_processed_data.py\n\tUse `python3 -m pytest test_01_read_processed_data.py` to run it from terminal\n\t\"\"\"\n", "import pytest\n\timport importlib\n\timport os\n\timport sys\n\timport tempfile\n\timport shutil\n\timport numpy as np\n\timport pandas as pd\n\tsrc_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n\tsys.path.append(src_dir)\n", "from config_eeg import channels\n\tanalysis_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src', 'analysis'))\n\tsys.path.append(analysis_dir)\n\tmodule_name = \"01_read_processed_data\" # Use importlib to import the module as a string to avoid conflicts with the numbers\n\tread_processed_data = importlib.import_module(module_name)\n\tdef test_create_subjects_and_tasks():\n\t    chosen_tasks = ['ec_1', 'ec_2', 'ec_3']\n\t    subjects = ['01P', '02C']\n\t    subjects_and_tasks = read_processed_data.create_subjects_and_tasks(chosen_tasks, subjects)\n\t    # Check that the output is a list\n", "    assert isinstance(subjects_and_tasks, list)\n\t    # Check that the output has the correct length\n\t    assert len(subjects_and_tasks) == len(chosen_tasks) * len(subjects)\n\t    # Check that each element in the output is a tuple with two elements\n\t    for element in subjects_and_tasks:\n\t        assert isinstance(element, tuple)\n\t        assert len(element) == 2\n\tdef test_read_data():\n\t    # NOTE> This is only testing for 'thin' bands.\n\t    # NOTE: I should check if data is empty?\n", "    # Create temporary directory and dummy data\n\t    tmp_dir = tempfile.mkdtemp()\n\t    subjects_and_tasks = [('01P', 'ec_1'), ('01P', 'ec_2'), ('01P', 'ec_3')]\n\t    freq_bands = 'thin'\n\t    normalization = False\n\t    # Create dummy data files in the temporary directory\n\t    for subject, task in subjects_and_tasks:\n\t        subject_dir = os.path.join(tmp_dir, f'sub-{subject}', 'ses-01', 'eeg', 'bandpowers')\n\t        os.makedirs(subject_dir, exist_ok=True)\n\t        # Create random data for \n", "        data = np.random.rand(89, 64)\n\t        filename = f'{freq_bands}_{task}.csv'\n\t        filepath = os.path.join(subject_dir, filename)\n\t        np.savetxt(filepath, data, delimiter=',')\n\t    # Call the method with the temporary directory and dummy data\n\t    processed_data_dir = tmp_dir\n\t    result = read_processed_data.read_data(subjects_and_tasks, freq_bands, normalization, processed_data_dir)\n\t    # Check that the output has the expected shape\n\t    expected_shape = (len(subjects_and_tasks), channels*38)\n\t    assert np.shape(result) == expected_shape, f\"Output has shape {np.shape(result)}, but expected shape is {expected_shape}\"\n", "    # Remove the temporary directory\n\t    shutil.rmtree(tmp_dir)\n\tdef test_create_data_frame():\n\t    # define subjects_and_tasks: list of 2-uples (same as above?)\n\t    subjects_and_tasks = [('01P', 'ec_1'), ('01P', 'ec_2'), ('01C', 'ec_1'), ('01C', 'ec_2'),]\n\t    # define all_bands_vectors\n\t    all_bands_vectors = np.random.rand(len(subjects_and_tasks), channels*38)\n\t    dataframe = read_processed_data.create_data_frame(subjects_and_tasks, all_bands_vectors)\n\t    assert isinstance(dataframe, pd.DataFrame), \"Output is not a Pandas DataFrame\"\n\t    assert dataframe.shape == (len(subjects_and_tasks), channels*38 + 2), \"Dimensions of DataFrame are wrong\"\n", "    assert dataframe[\"Subject\"].dtype == 'object', \"Some subjects are not strings\"\n\t    assert dataframe[\"Group\"].dtype == 'int64', \"Some groups are not integers\"\n\tdef test_create_data_frame_empty_subjects_and_tasks():\n\t    all_bands_vectors = np.random.rand(4, channels*38)\n\t    subjects_and_tasks = []\n\t    with pytest.raises(ValueError) as e:\n\t       read_processed_data.create_data_frame(subjects_and_tasks, all_bands_vectors)\n\t    assert str(e.value) == \"The list of subject-task combinations cannot be empty.\"\n\tdef test_create_data_frame_empty_bands_vectors():\n\t    #all_bands_vectors = np.random.rand(len(subjects_and_tasks), channels*38)\n", "    subjects_and_tasks = [('01P', 'ec_1'), ('01P', 'ec_2'), ('01C', 'ec_1'), ('01C', 'ec_2'),]\n\t    all_bands_vectors = []\n\t    with pytest.raises(ValueError) as e:\n\t       read_processed_data.create_data_frame(subjects_and_tasks, all_bands_vectors)\n\t    assert str(e.value) == \"The list of PSD data cannot be empty.\"\n"]}
{"filename": "src/config_common.py", "chunked_list": ["\"\"\"\n\t===========\n\tConfig file\n\t===========\n\tConfiguration parameters related to the users\n\t\"\"\"\n\timport os\n\tfrom getpass import getuser\n\tfrom socket import gethostname\n\t###############################################################################\n", "# Determine which user is running the scripts on which machine and set the path\n\t# where the data is stored and how many CPU cores to use.\n\t##############################################################################\n\tuser = getuser()  # Username of the user running the scripts\n\thost = gethostname()  # Hostname of the machine running the scripts\n\t# You want to add your machine to this list\n\tif host == 'nbe-077' and user == 'heikkiv7':\n\t    # Verna's workstation in Aalto\n\t    raw_data_dir = '/m/nbe/scratch/tbi-meg/verna/BIDS'\n\t    processed_data_dir = '/m/nbe/scratch/tbi-meg/verna/k22_processed'\n", "    reports_dir = '/m/nbe/scratch/tbi-meg/verna/reports'\n\t    figures_dir = '/m/nbe/scratch/tbi-meg/verna/k22_processedfigures'\n\t    n_jobs = 4\n\t    matplotlib_backend = 'Qt5Agg'\n\telif host.endswith('triton.aalto.fi'):\n\t    # Triton cluster\n\t    raw_data_dir = '/m/nbe/scratch/brrr_fingerprinting/biomagtbi_bids/bids'\n\t    processed_data_dir = '/m/nbe/scratch/brrr_fingerprinting/biomagtbi_bids/bids/derivatives/biomag-tbi'\n\t    reports_dir = '/home/vanvlm1/data/biomag-tbi/reports'\n\t    figures_dir = '/home/vanvlm1/data/biomag-tbi/figures'\n", "    n_jobs = 1\n\t    matplotlib_backend = 'Agg'  # No graphics on triton\n\telif host == 'sirius' and user == 'heikkiv' : \n\t    # Verna's workstation in BioMag\n\t    raw_data_dir = '/net/theta/fishpool/projects/tbi_meg/BIDS'\n\t    processed_data_dir = '/net/theta/fishpool/projects/tbi_meg/k22_processed'\n\t    reports_dir = os.path.join('/net/tera2/home/heikkiv/work_s2022/mtbi_meeg/output/reports',user)\n\t    figures_dir = os.path.join('/net/tera2/home/heikkiv/work_s2022/mtbi_meeg/output/figures',user)\n\t    n_jobs = 4\n\t    matplotlib_backend = 'Qt5Agg'\n", "elif host == 'ypsilon.biomag.hus.fi' and user == 'heikkiv':\n\t    raw_data_dir = '/net/theta/fishpool/projects/tbi_meg/BIDS'\n\t    processed_data_dir = '/net/theta/fishpool/projects/tbi_meg/k22_processed'\n\t    reports_dir = os.path.join('/net/tera2/home/heikkiv/work_s2022/mtbi_meeg/output/reports',user)\n\t    figures_dir = os.path.join('/net/tera2/home/heikkiv/work_s2022/mtbi_meeg/output/reports',user)\n\t    n_jobs = 4\n\t    matplotlib_backend = 'Qt5Agg'\n\telif host == 'psi' and user == 'aino' :\n\t    # Ainos's workstation in BioMag\n\t    raw_data_dir = '/net/theta/fishpool/projects/tbi_meg/BIDS'\n", "    processed_data_dir = '/net/theta/fishpool/projects/tbi_meg/k22_processed'\n\t    reports_dir = os.path.join('/net/tera2/home/aino/work/mtbi-eeg/src/reports', user)\n\t    figures_dir = os.path.join('/net/tera2/home/aino/work/mtbi-eeg/src/figures',user)\n\t    n_jobs = 4\n\t    matplotlib_backend = 'Qt5Agg'\n\telif host == 'rho' and user == 'portae1' :\n\t    # Estanislao's workstation in BioMag\n\t    raw_data_dir = '/net/theta/fishpool/projects/tbi_meg/BIDS'\n\t    processed_data_dir = '/net/theta/fishpool/projects/tbi_meg/k22_processed'\n\t    reports_dir = os.path.join('/net/tera2/home/portae1/biomag/mtbi_meeg/output/reports', user)\n", "    figures_dir = os.path.join('/net/tera2/home/portae1/biomag/mtbi_meeg/output/figures', user)\n\t    n_jobs = 4\n\t    matplotlib_backend = 'Qt5Agg' \n\telif 'vdiubuntu' in host and user == 'portae1' :\n\t    # Estanislao's workstation in VirtualMachine Aalto\n\t    raw_data_dir = '/m/home/home2/20/portae1/unix/biomag/k22_processed' #This is not in use actually\n\t    processed_data_dir = '/m/home/home2/20/portae1/unix/biomag/k22_processed'\n\t    reports_dir = '/m/home/home2/20/portae1/unix/biomag/mtbi_meeg/output/reports'\n\t    figures_dir = '/m/home/home2/20/portae1/unix/biomag/mtbi_meeg/output/figures'\n\t    n_jobs = 4\n", "    matplotlib_backend = 'Qt5Agg' \n\t## Add new users below\n\t# elif host == '<WORKSTATION>' and user == '<USER>' :\n\t#    # <USER>'s workstation in <WORKPLACE>\n\t#    raw_data_dir = ''\n\t#    processed_data_dir = ''\n\t#    reports_dir = ''\n\t#    figures_dir = ''\n\t#    n_jobs = 4\n\t#    matplotlib_backend = '' \n", "else:\n\t    raise ValueError(f'User or host not recognized. \\nPlease enter the details of your system ({user}@{host}) in config_common.py')\n\t# For BLAS to use the right amount of cores\n\tos.environ['OMP_NUM_THREADS'] = str(n_jobs)\n\t# Configure the graphics backend\n\timport matplotlib\n\tmatplotlib.use(matplotlib_backend)\n"]}
{"filename": "src/config_eeg.py", "chunked_list": ["\"\"\"\n\tThese are all the relevant parameters that are unique to the EEG analysis\n\tpipeline.\n\t\"\"\"\n\timport os \n\tfrom fnames import FileNames\n\tfrom config_common import (raw_data_dir, processed_data_dir, figures_dir,\n\t                           reports_dir)\n\ttasks = ['ec', 'eo', 'PASAT']\n\t###############################################################################\n", "# Parameters that should be mentioned in the paper\n\t# Seed to be used in the initialization of the classifiers and the CV\n\tseed =  8\n\t# Channels from the eeg measurment\n\tchannels = 64\n\t# Folds for cv\n\tfolds = 10\n\t# Computation of the PSDs\n\tn_fft = 2048  # Higher number means more resolution at the lower frequencies\n\t#1024?4096?\n", "# Highpass filter above 1Hz. This is needed for the ICA to perform well\n\t# later on. Lowpass filter below 100Hz to get rid of the signal produced by\n\t# the cHPI coils. Notch filters at 50Hz and 100Hz to get rid of powerline.\n\tfreq_min = 1\n\tfreq_max = 43\n\tfilt_freq_max = 90\n\tfnotch = [50, 100]\n\tthin_bands = [(x, x+1) for x in range(1, 43)] # thin_bands = (1,2),...., (42,43)\n\twide_bands =  [(1,3), (3,5.2), (5.2,7.6), (7.6,10.2), (10.2,13), (13,16), (16,19.2), \n\t               (19.2,22.6), (22.6,26.2), (26.2,30), (30,34), (34,38.2), (38.2,42.6)]\n", "###############################################################################\n\t# Parameters pertaining to the subjects\n\t## All subjects for which there is some form of data available\n\tall_subjects = os.listdir(raw_data_dir)\n\t# Filter in directories-only\n\tall_subjects = [s for s in all_subjects if os.path.isdir(os.path.join(raw_data_dir, s))] # filter out non-directories\n\t# Remove file 'participants.tsv' if it exists\n\tif 'participants.tsv' in all_subjects:\n\t    all_subjects.remove('participants.tsv')\n\t# Remove the 'sub-' prefix from the list\n", "all_subjects = [x.replace('sub-', '') for x in all_subjects]\n\tbad_subjects= []\n\t# Analysis is performed on these subjects\n\tsubjects = [subject for subject in all_subjects if subject not in bad_subjects]\n\tecg_channel = 'ECG002'\n\teog_channel = 'EOG001'\n\tbads={}\n\t#Bad EEG channels for each subject and each task\n\tec_bads = {\n\t        '01C': ['EEG033', 'EEG025', 'EEG023'],\n", "        '02C': [],\n\t        '03C': ['EEG044'],\n\t        '04C': ['EEG026', 'EEG045', 'EEG027', 'EEG049'],\n\t        '05C': ['EEG003', 'EEG010', 'EEG057'],\n\t        '06C':['EEG001', 'EEG013', 'EEG020', 'EEG022', 'EEG027', 'EEG026', 'EEG023', 'EEG018', 'EEG019', 'EEG012', 'EEG011'],\n\t        '07C': [],\n\t        '08C': ['EEG003', 'EEG007', 'EEG004', 'EEG008'],\n\t        '09C': ['EEG011', 'EEG018'],\n\t        '10C':['EEG019', 'EEG018', 'EEG011'],\n\t        '11C': ['EEG029'],\n", "        '12C':['EEG016', 'EEG033', 'EEG023'],\n\t        '13C': ['EEG019'],\n\t        '14C':['EEG003', 'EEG018', 'EEG007', 'EEG008', 'EEG004', 'EEG014', 'EEG015', 'EEG033', 'EEG023'],\n\t        '15C':['EEG018', 'EEG019', 'EEG011', 'EEG033', 'EEG023', 'EEG055', 'EEG063'],\n\t        '16C':['EEG043', 'EEG018', 'EEG019'],\n\t        '17C': ['EEG005', 'EEG020', 'EEG026', 'EEG028', 'EEG023', 'EEG027', 'EEG017'],\n\t        '18C':['EEG007', 'EEG008', 'EEG004', 'EEG034'],\n\t        '19C':['EEG004', 'EEG008', 'EEG007', 'EEG022', 'EEG043'],\n\t        '20C':['EEG044', 'EEG045', 'EEG052', 'EEG059'],\n\t        '21C':['EEG003', 'EEG010', 'EEG012', 'EEG019', 'EEG029', 'EEG030', 'EEG042', 'EEG046', 'EEG059', 'EEG062', 'EEG061'],\n", "        '22C': [],#really bad eeg\n\t        '23C':['EEG003', 'EEG018', 'EEG027', 'EEG025', 'EEG037'],\n\t        '24C':['EEG013', 'EEG020', 'EEG001', 'EEG022', 'EEG027', 'EEG029', 'EEG028', 'EEG047'],\n\t        '25C':['EEG001', 'EEG002', 'EEG013', 'EEG017', 'EEG022', 'EEG023', 'EEG026', 'EEG027', 'EEG028'],\n\t        '26C':['EEG034', 'EEG035', 'EEG037', 'EEG050', 'EEG048', 'EEG042', 'EEG043', 'EEG049', 'EEG047'],\n\t        '27C':['EEG033', 'EEG058'],\n\t        '28C':['EEG019', 'EEG056'],#first 30 s bad\n\t        '29C':['EEG023', 'EEG033'],\n\t        '30C':[],\n\t        '31C':['EEG001', 'EEG002', 'EEG013', 'EEG032', 'EEG028', 'EEG027', 'EEG026', 'EEG023', 'EEG022', 'EEG050', 'EEG003'],\n", "        '32C':['EEG003', 'EEG060'],\n\t        '33C':['EEG001', 'EEG003', 'EEG020', 'EEG026', 'EEG028', 'EEG027', 'EEG056'],\n\t        '34C':[],\n\t        '35C':['EEG006', 'EEG003', 'EEG028'],\n\t        '36C':['EEG003', 'EEG006'],\n\t        '37C':['EEG003', 'EEG001', 'EEG017', 'EEG013', 'EEG005', 'EEG020', 'EEG014', 'EEG022', 'EEG023', 'EEG027', 'EEG028'],\n\t        '38C':['EEG019', 'EEG022', 'EEG023'],\n\t        '39C':['EEG018', 'EEG011', 'EEG010'],\n\t        '40C':[],\n\t        '41C':['EEG007', 'EEG063', 'EEG062', 'EEG064', 'EEG055'],#\"karvaisia kanavia\"\n", "        '01P':[],\n\t        '02P':['EEG013', 'EEG017', 'EEG022', 'EEG027'],\n\t        '03P':['EEG005', 'EEG022', 'EEG023', 'EEG027', 'EEG032', 'EEG028'],\n\t        '04P':['EEG018'],\n\t        '05P':[],\n\t        '06P':['EEG013', 'EEG012', 'EEG032', 'EEG026', 'EEG022', 'EEG023'],\n\t        '07P':[],\n\t        '08P':['EEG027', 'EEG042'],\n\t        '09P':['EEG009', 'EEG013', 'EEG035'],\n\t        '10P': [], #a lot of eye movement and heart artifacts\n", "        '11P':[],\n\t        '12P':[],\n\t        '13P':['EEG029', 'EEG038', 'EEG042'],\n\t        '14P':['EEG018', 'EEG007', 'EEG014', 'EEG027', 'EEG026', 'EEG043', 'EEG048'],\n\t        '15P':['EEG039', 'EEG044', 'EEG056', 'EEG059', 'EEG060', 'EEG046', 'EEG063'],\n\t        '16P':['EEG017', 'EEG016', 'EEG021', 'EEG028'],\n\t        '17P':['EEG017'],#001-007 \"karvaisia\"\n\t        '18P':['EEG017', 'EEG020', 'EEG009', 'EEG022', 'EEG023', 'EEG026', 'EEG028', 'EEG048', 'EEG047'],\n\t        '19P':['EEG007', 'EEG014', 'EEG008', 'EEG015'],\n\t        '20P':['EEG010', 'EEG014', 'EEG007', 'EEG008', 'EEG009'],\n", "        '21P':['EEG004', 'EEG030', 'EEG052', 'EEG061'],#a lot of eye movements\n\t        '22P':['EEG017', 'EEG020', 'EEG019', 'EEG013', 'EEG018', 'EEG022', 'EEG028', 'EEG026'],\n\t        '23P':['EEG007', 'EEG004', 'EEG003', 'EEG014'],\n\t        '24P':['EEG023', 'EEG033', 'EEG035', 'EEG042'],\n\t        '25P':['EEG004', 'EEG007', 'EEG023', 'EEG033'],\n\t        '26P':['EEG007', 'EEG004', 'EEG029', 'EEG050'],\n\t        '27P':['EEG010', 'EEG027'],\n\t        '28P':['EEG003'],\n\t        '29P':['EEG001', 'EEG003', 'EEG020', 'EEG019', 'EEG013', 'EEG005', 'EEG027', 'EEG022'],\n\t        '30P':['EEG003', 'EEG004', 'EEG007', 'EEG008', 'EEG026', 'EEG029'],\n", "        '31P':['EEG003', 'EEG007', 'EEG011', 'EEG028', 'EEG027', 'EEG034'],\n\t        }#channels 11, 18, 19 were quite flat in general\n\teo_bads = {\n\t        \"01C\": ['EEG023', 'EEG025', 'EEG033'],\n\t        '02C': ['EEG040'],\n\t        '03C': ['EEG044'],\n\t        '04C':['EEG026', 'EEG036', 'EEG028', 'EEG027', 'EEG032', 'EEG045', 'EEG047', 'EEG043', 'EEG054', 'EEG049'],\n\t        '05C':['EEG003', 'EEG010', 'EEG057', 'EEG053', 'EEG062'],\n\t        '06C': ['EEG001', 'EEG013', 'EEG020', 'EEG022', 'EEG023', 'EEG026', 'EEG027'],\n\t        '07C':['EEG032', 'EEG041'],\n", "        '08C':['EEG003', 'EEG028'],#a lot of eye movements \n\t        '09C':['EEG020'],\n\t        '10C':['EEG014'],\n\t        '11C':['EEG007', 'EEG004', 'EEG003', 'EEG008', 'EEG015', 'EEG029', 'EEG032'],\n\t        '12C':['EEG016', 'EEG008', 'EEG023', 'EEG033'],\n\t        '13C':['EEG042'],\n\t        '14C':['EEG003', 'EEG014', 'EEG023', 'EEG033'],\n\t        '15C':['EEG023', 'EEG033', 'EEG055'],\n\t        '16C':['EEG012', 'EEG043'],\n\t        '17C':['EEG003', 'EEG005', 'EEG017', 'EEG026', 'EEG023', 'EEG028', 'EEG027'],\n", "        '18C': ['EEG034'],\n\t        '19C':['EEG022', 'EEG043'],\n\t        '20C':['EEG012', 'EEG032', 'EEG044', 'EEG045', 'EEG059', 'EEG052', 'EEG058', 'EEG053', 'EEG054', 'EEG064'],\n\t        '21C':['EEG003', 'EEG010', 'EEG012', 'EEG019', 'EEG005', 'EEG007', 'EEG029', 'EEG030', 'EEG024', 'EEG042', 'EEG046', 'EEG059', 'EEG062', 'EEG053'],\n\t        '22C':[], #very bad eeg\n\t        '23C':['EEG018', 'EEG027', 'EEG025', 'EEG037', 'EEG034'],\n\t        '24C':['EEG017', 'EEG013', 'EEG020', 'EEG003', 'EEG001', 'EEG027', 'EEG022', 'EEG029', 'EEG028', 'EEG047'],\n\t        '25C':['EEG013', 'EEG001', 'EEG002', 'EEG022', 'EEG023', 'EEG026', 'EEG027', 'EEG028', 'EEG048', 'EEG049'],\n\t        '26C':['EEG035', 'EEG034', 'EEG037', 'EEG042', 'EEG043', 'EEG048', 'EEG050', 'EEG047', 'EEG049', 'EEG056'],\n\t        '27C':['EEG033', 'EEG058'],\n", "        '28C': ['EEG019', 'EEG013', 'EEG028', 'EEG058'],\n\t        '29C':['EEG007', 'EEG018', 'EEG009', 'EEG023', 'EEG033', 'EEG032'],\n\t        '30C':[],\n\t        '31C':['EEG001', 'EEG002', 'EEG013', 'EEG003', 'EEG022', 'EEG023', 'EEG026', 'EEG027', 'EEG028', 'EEG032', 'EEG050'],\n\t        '32C':['EEG003', 'EEG060'],\n\t        '33C':['EEG001', 'EEG003', 'EEG020', 'EEG013', 'EEG026', 'EEG028', 'EEG027', 'EEG056'],\n\t        '34C':[],\n\t        '35C':['EEG013', 'EEG007', 'EEG008', 'EEG034', 'EEG032', 'EEG043', 'EEG047'],#ekg?\n\t        '36C':['EEG006', 'EEG003', 'EEG028'],\n\t        '37C': ['EEG017', 'EEG013', 'EEG005', 'EEG020', 'EEG003', 'EEG001', 'EEG027', 'EEG023', 'EEG022'],\n", "        '38C':['EEG001', 'EEG008', 'EEG015', 'EEG035', 'EEG023'],\n\t        '39C':['EEG018', 'EEG015', 'EEG002', 'EEG010', 'EEG009', 'EEG011'],\n\t        '40C':[],\n\t        '41C':['EEG064', 'EEG063', 'EEG062'],\n\t        '01P':['EEG004', 'EEG017'],\n\t        '02P':['EEG017', 'EEG003', 'EEG013', 'EEG022', 'EEG027', 'EEG061', 'EEG056'],\n\t        '03P':['EEG005', 'EEG013', 'EEG022', 'EEG023', 'EEG027', 'EEG032', 'EEG038'],\n\t        '04P':['EEG018', 'EEG003', 'EEG024', 'EEG032', 'EEG044', 'EEG055', 'EEG062'],\n\t        '05P':['EEG014', 'EEG032'],\n\t        '06P':['EEG013', 'EEG012', 'EEG022', 'EEG023', 'EEG026', 'EEG032'],\n", "        '07P':['EEG008'],\n\t        '08P':['EEG027', 'EEG024', 'EEG042'],\n\t        '09P':['EEG009', 'EEG035'],\n\t        '10P':[], #heart artefact\n\t        '11P':[],\n\t        '12P':[],\n\t        '13P':['EEG013', 'EEG038'],\n\t        '14P':['EEG018', 'EEG027', 'EEG043', 'EEG048'],\n\t        '15P':['EEG015', 'EEG014', 'EEG044', 'EEG056', 'EEG059', 'EEG060', 'EEG046', 'EEG063'],\n\t        '16P':['EEG016', 'EEG017', 'EEG032'],\n", "        '17P':['EEG017'],#001-007 \"karvaisia\"\n\t        '18P':['EEG017', 'EEG020', 'EEG001', 'EEG003', 'EEG026', 'EEG023', 'EEG022', 'EEG028', 'EEG047', 'EEG048'],\n\t        '19P':[], #a lot of blinking\n\t        '20P':['EEG014', 'EEG027', 'EEG061'],\n\t        '21P':['EEG052'], #a lot of eye movements\n\t        '22P':['EEG017', 'EEG019', 'EEG020', 'EEG018', 'EEG013', 'EEG022', 'EEG028', 'EEG041'],\n\t        '23P':[],\n\t        '24P':['EEG023', 'EEG033', 'EEG035'],\n\t        '25P':['EEG023', 'EEG033'], #001-007 \"karvaisia\"\n\t        '26P':[],\n", "        '27P':['EEG027'],\n\t        '28P':['EEG003'],\n\t        '29P':['EEG001', 'EEG003', 'EEG005', 'EEG019', 'EEG020', 'EEG026', 'EEG027', 'EEG022', 'EEG023', 'EEG048', 'EEG042'],\n\t        '30P':[], #\"karvaisia kanavia\"\n\t        '31P':['EEG003', 'EEG007', 'EEG027', 'EEG028', 'EEG045'] #a lot of blinking       \n\t        }\n\tpasat1_bads = {#pasats are shorter\n\t        '01C': ['EEG033', 'EEG025', 'EEG023'],\n\t        '02C': ['EEG016', 'EEG053', 'EEG054'],\n\t        '03C': ['EEG044'],\n", "        '04C': ['EEG049', 'EEG045', 'EEG043', 'EEG038'], #a lot of bad data\n\t        '05C': [],\n\t        '06C':['EEG001', 'EEG020', 'EEG027', 'EEG023', 'EEG022', 'EEG026'],\n\t        '07C': [],\n\t        '08C': ['EEG003'],\n\t        '09C': ['EEG027'],\n\t        '10C':[],\n\t        '11C': ['EEG029', 'EEG032'],#karvaisia kanavia 1-7, bad eog, weird ecg\n\t        '12C':['EEG016', 'EEG033', 'EEG027', 'EEG023'],\n\t        '13C':  ['EEG003', 'EEG007'],\n", "        '14C':['EEG033', 'EEG023', 'EEG063'],\n\t        '15C':['EEG023', 'EEG033', 'EEG055'],\n\t        '16C':[],\n\t        '17C': ['EEG005', 'EEG017', 'EEG020', 'EEG027', 'EEG028', 'EEG026', 'EEG023'],\n\t        '18C':[],\n\t        '19C':['EEG011', 'EEG043'],\n\t        '20C': ['EEG033', 'EEG044', 'EEG045', 'EEG059', 'EEG052'],\n\t        '21C':['EEG012', 'EEG010', 'EEG007', 'EEG003', 'EEG030', 'EEG029', 'EEG024', 'EEG046', \n\t               'EEG059', 'EEG042', 'EEG062'],\n\t        '22C': [],#really bad eeg\n", "        '23C':['EEG003', 'EEG018', 'EEG025', 'EEG037', 'EEG027'],\n\t        '24C':['EEG001', 'EEG017', 'EEG013', 'EEG020', 'EEG022', 'EEG027', 'EEG029', 'EEG028'],\n\t        '25C':['EEG013', 'EEG001', 'EEG002', 'EEG017', 'EEG028', 'EEG027', 'EEG026', 'EEG023', 'EEG022'],\n\t        '26C':['EEG034', 'EEG035', 'EEG037', 'EEG042', 'EEG043', 'EEG048', 'EEG050'],\n\t        '27C':['EEG033', 'EEG063'],\n\t        '28C':['EEG019', 'EEG038'],\n\t        '29C':['EEG009', 'EEG023', 'EEG033'],\n\t        '30C':[],\n\t        '31C':['EEG017', 'EEG001', 'EEG002', 'EEG003', 'EEG032', 'EEG022', 'EEG023', \n\t               'EEG027', 'EEG026', 'EEG028', 'EEG050'],#lot of blinks/otherwise quite bad data\n", "        '32C':['EEG003'],\n\t        '33C':['EEG001', 'EEG003', 'EEG020', 'EEG002', 'EEG026', 'EEG028', 'EEG027', \n\t               'EEG022', 'EEG023', 'EEG056', 'EEG060'],\n\t        '34C':[],\n\t        '35C':['EEG013', 'EEG012', 'EEG034', 'EEG030', 'EEG043', 'EEG047'],#eog, ecg wrong labels\n\t        '36C':['EEG003', 'EEG006'],\n\t        '37C':['EEG005', 'EEG017', 'EEG013', 'EEG002', 'EEG001', 'EEG003', 'EEG023', 'EEG022', 'EEG027'],\n\t        '38C':[],\n\t        '39C':['EEG018'],\n\t        '40C':[],\n", "        '41C':[],\n\t        '01P':[],\n\t        '02P':['EEG003', 'EEG013', 'EEG017', 'EEG022', 'EEG027', 'EEG061'],\n\t        '03P':['EEG005', 'EEG001', 'EEG032', 'EEG027', 'EEG023', 'EEG022'],\n\t        '04P':['EEG018'],\n\t        '05P':[],\n\t        '06P':['EEG013', 'EEG022', 'EEG023', 'EEG026', 'EEG032', 'EEG056'],\n\t        '07P':[],\n\t        '08P':['EEG027', 'EEG042', 'EEG063'],#karvaisia kanavia\n\t        '09P':['EEG009', 'EEG035'],\n", "        '10P': ['EEG006'], #a lot of eye movement and heart artifacts\n\t        '11P':[],\n\t        '12P':[],\n\t        '13P': ['EEG038'],\n\t        '14P':['EEG018', 'EEG027', 'EEG043', 'EEG048'],\n\t        '15P':['EEG056', 'EEG059', 'EEG060', 'EEG044', 'EEG046', 'EEG057', 'EEG045', 'EEG063'],\n\t        '16P':[],\n\t        '17P':['EEG017'],#001-007 \"karvaisia\"\n\t        '18P':['EEG017', 'EEG020', 'EEG001', 'EEG026', 'EEG022', 'EEG027', 'EEG023', \n\t               'EEG039', 'EEG028', 'EEG037', 'EEG047'],\n", "        '19P':[],\n\t        '20P':['EEG061'],\n\t        '21P':[],\n\t        '22P':['EEG001', 'EEG017', 'EEG019', 'EEG020', 'EEG013', 'EEG027', 'EEG028', 'EEG048'],\n\t        '23P':[],#karvaisia kanavia\n\t        '24P':['EEG023', 'EEG033', 'EEG032'],#karvaisia kanavia\n\t        '25P':['EEG003', 'EEG023', 'EEG033'],\n\t        '26P':['EEG003'],\n\t        '27P':['EEG027', 'EEG037', 'EEG049', 'EEG056'],\n\t        '28P':['EEG003', 'EEG007', 'EEG024'],\n", "        '29P':['EEG005', 'EEG001', 'EEG019', 'EEG020', 'EEG003', 'EEG022', 'EEG023', \n\t               'EEG026', 'EEG027', 'EEG063'],\n\t        '30P':['EEG058'],\n\t        '31P':['EEG003', 'EEG011', 'EEG007', 'EEG027', 'EEG046'],\n\t    }\n\tpasat2_bads = {\n\t        '01C': ['EEG033', 'EEG025', 'EEG023'],\n\t        '02C': [],\n\t        '03C': ['EEG044'],\n\t        '04C': ['EEG026', 'EEG028', 'EEG038', 'EEG027', 'EEG045', 'EEG049', 'EEG043', 'EEG057', 'EEG064'], \n", "        '05C': ['EEG010'],\n\t        '06C':['EEG001', 'EEG020', 'EEG022', 'EEG023', 'EEG026', 'EEG027', 'EEG028'],\n\t        '07C': [],\n\t        '08C': ['EEG003'],\n\t        '09C': ['EEG027'], #horrible eog!!\n\t        '10C':[],\n\t        '11C': ['EEG029'],#karvaisia kanavia 1-7, dead eog, weird ecg\n\t        '12C':['EEG016', 'EEG023', 'EEG033'],\n\t        '13C':  ['EEG003'],\n\t        '14C':['EEG023', 'EEG033'],\n", "        '15C':['EEG023', 'EEG033', 'EEG055'],\n\t        '16C':[],\n\t        '17C': ['EEG005', 'EEG017', 'EEG023', 'EEG026', 'EEG027', 'EEG028', 'EEG029'],\n\t        '18C':[],\n\t        '19C':['EEG043'],\n\t        '20C':  ['EEG033', 'EEG044', 'EEG045', 'EEG059'],\n\t        '21C': ['EEG003', 'EEG010', 'EEG012', 'EEG019', 'EEG007', 'EEG030', 'EEG029', \n\t                'EEG039', 'EEG024', 'EEG046', 'EEG042', 'EEG059', 'EEG064', 'EEG062'],\n\t        '22C': [],#really bad eeg\n\t        '23C':['EEG018', 'EEG025', 'EEG027', 'EEG037'],\n", "        '24C':['EEG001', 'EEG013', 'EEG017', 'EEG027', 'EEG022', 'EEG028', 'EEG029', 'EEG047'],\n\t        '25C':['EEG013', 'EEG002', 'EEG001', 'EEG023', 'EEG026', 'EEG027', 'EEG028'],#two first seconds bad\n\t        '26C':['EEG018', 'EEG034', 'EEG035', 'EEG037', 'EEG042', 'EEG043', 'EEG048', 'EEG050', 'EEG049'],\n\t        '27C':['EEG003', 'EEG033'],\n\t        '28C':['EEG019'],\n\t        '29C':['EEG023', 'EEG033'],\n\t        '30C':[],\n\t        '31C':['EEG001', 'EEG002', 'EEG017', 'EEG022', 'EEG023', 'EEG026', 'EEG027', \n\t               'EEG028', 'EEG032', 'EEG050'],\n\t        '32C':['EEG003'],\n", "        '33C':['EEG001', 'EEG003', 'EEG013', 'EEG020', 'EEG023', 'EEG026', 'EEG027', \n\t               'EEG028', 'EEG022', 'EEG056'],\n\t        '34C':[],\n\t        '35C':['EEG013', 'EEG034'],#eog, ecg wrong labels\n\t        '36C':['EEG003', 'EEG006'],\n\t        '37C':['EEG005', 'EEG013', 'EEG017', 'EEG002', 'EEG022', 'EEG023', 'EEG027', 'EEG028'],\n\t        '38C':[],\n\t        '39C':[],\n\t        '40C':[],\n\t        '41C':['EEG014'],\n", "        '01P':[],\n\t        '02P':['EEG013', 'EEG017', 'EEG022', 'EEG027'],\n\t        '03P':['EEG003', 'EEG013', 'EEG032', 'EEG022', 'EEG023', 'EEG027'],\n\t        '04P':['EEG018'],\n\t        '05P':[],\n\t        '06P':['EEG013', 'EEG012', 'EEG022', 'EEG023', 'EEG026', 'EEG032'],\n\t        '07P':[],\n\t        '08P':['EEG027', 'EEG042'],#karvaisia kanavia\n\t        '09P':['EEG009', 'EEG018', 'EEG035'],\n\t        '10P':[], #a lot of eye movement and heart artifacts\n", "        '11P':[],\n\t        '12P':[],\n\t        '13P': ['EEG038'],\n\t        '14P':['EEG018', 'EEG027', 'EEG043', 'EEG048'],#a lot of eye artefacts\n\t        '15P':['EEG044', 'EEG056', 'EEG059', 'EEG060', 'EEG063'],\n\t        '16P':[],\n\t        '17P':['EEG017'],#karvaisia kanavia\n\t        '18P':['EEG020', 'EEG017', 'EEG026', 'EEG028', 'EEG022', 'EEG047'],\n\t        '19P':['EEG015'],\n\t        '20P':['EEG014', 'EEG061'],\n", "        '21P':[],\n\t        '22P':['EEG017', 'EEG019', 'EEG020', 'EEG022', 'EEG028', 'EEG048'],\n\t        '23P':[],\n\t        '24P':['EEG023', 'EEG033'],#a lot of eye artefacts\n\t        '25P':['EEG003', 'EEG023', 'EEG033'],\n\t        '26P':['EEG003'],\n\t        '27P':['EEG027', 'EEG056', 'EEG064', 'EEG061'],\n\t        '28P':['EEG003', 'EEG007', 'EEG028'],\n\t        '29P':['EEG001', 'EEG020', 'EEG005', 'EEG019', 'EEG022', 'EEG023', 'EEG026', 'EEG027'],\n\t        '30P':[],\n", "        '31P':['EEG003', 'EEG011'],\n\t    }\n\t###############################################################################\n\t# Templates for filenames\n\t#\n\t# This part of the config file uses the FileNames class. It provides a small\n\t# wrapper around string.format() to keep track of a list of filenames.\n\t# See fnames.py for details on how this class works.\n\tfname = FileNames()\n\t# Some directories\n", "fname.add('raw_data_dir', raw_data_dir)\n\tfname.add('processed_data_dir', processed_data_dir)\n\t# Continuous data\n\tfname.add('raw', '{raw_data_dir}/sub-{subject}/ses-{ses}/meg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_proc-raw_meg.fif')\n\tfname.add('filt', '{processed_data_dir}/sub-{subject}/ses-01/eeg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_filt.fif')\n\tfname.add('clean', '{processed_data_dir}/sub-{subject}/ses-{ses}/eeg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_clean.fif')\n\t# Maxfilter\n\tfname.add('tsss', '{raw_data_dir}/sub-{subject}/ses-{ses}/meg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_proc-raw_meg_mc_tsss.fif')\n\tfname.add('pos', '{raw_data_dir}/sub-{subject}/ses-{ses}/meg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_movecomp.pos') \n\tfname.add('tsss_log', '{raw_data_dir}/sub-{subject}/ses-{ses}/meg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_tsss_log.log')\n", "# Files used during EOG and ECG artifact suppression\n\tfname.add('ica', '{processed_data_dir}/sub-{subject}/ses-{ses}/eeg/sub-{subject}_ses-{ses}_task-{task}_run-0{run}_ica.h5')\n\t# PSD files\n\tfname.add('psds', '{processed_data_dir}/sub-{subject}/ses-{ses}/eeg/sub-{subject}_psds.h5')\n\t# Band power files\n\tfname.add('bandpower', '{processed_data_dir}/sub-{subject}/ses-{ses}/eeg/sub-{subject}_bandpower.csv')\n\t# Filenames for MNE reports\n\tfname.add('reports_dir', f'{reports_dir}')\n\tfname.add('report', '{reports_dir}/sub-{subject}-report.h5')\n\tfname.add('report_html', '{reports_dir}/sub-{subject}-report.html')\n", "# Filenames for figures\n\tfname.add('figures_dir', f'{figures_dir}')\n\tfname.add('figure_psds', '{figures_dir}/psds.pdf')\n\tdef get_all_fnames(subject, kind, ses='01', exclude=None):\n\t    \"\"\"Get all filenames for a given subject of a given kind.\n\t    Not all subjects have exactly the same files. For example, subject 1 does\n\t    not have an emptyroom recording, while subject 4 has 2 runs of emptyroom.\n\t    Use this function to get a list of the the files that are present for a\n\t    given subject. It will check which raw files there are and based on that\n\t    will generate a list with corresponding filenames of the given kind.\n", "    You can exclude the recordings for one or more tasks with the ``exclude``\n\t    parameter. For example, to skip the emptyroom recordings, set\n\t    ``exclude='emptyroom'``.\n\t    Parameters\n\t    ----------\n\t    subject : str\n\t        The subject to get the names of the raw files for.\n\t    kind : 'raw' | 'tsss' | 'filt' | 'eog_ecg_events' | 'ica'\n\t        The kind of files to return the filenames for.\n\t    ses: str\n", "        The measurement session (e.g. 01 or 02). Defaults to 01\n\t    exclude : None | str | list of str\n\t        The tasks to exclude from the list.\n\t        Defaults to not excluding anything.\n\t    Returns\n\t    -------\n\t    all_fnames : list of str\n\t        The names of the files of the given kind.\n\t    \"\"\"\n\t    import os.path as op\n", "    if exclude is None:\n\t        exclude = []\n\t    elif type(exclude) == str:\n\t        exclude = [exclude]\n\t    elif type(exclude) != list:\n\t        raise TypeError('The `exclude` parameter should be None, str or list')\n\t    all_fnames = list()\n\t    #print('Looking for: ' + str(fname.raw(subject=subject)))\n\t    for task in tasks:\n\t        if task in exclude:\n", "            continue\n\t        for run in [1, 2]:\n\t            if op.exists(fname.raw(subject=subject, ses=ses, task=task, run=run)):\n\t                all_fnames.append(fname.files()[f'{kind}'](subject=subject, ses=ses, task=task, run=run))\n\t    return all_fnames\n\tdef task_from_fname(fname):\n\t    \"\"\"Extract task name from a BIDS filename.\"\"\"\n\t    import re\n\t    match = re.search(r'task-([^_]+)_run-(\\d\\d)', str(fname))\n\t    task = match.group(1)\n", "    run = int(match.group(2))\n\t    if task == 'PASAT':\n\t        return f'{task}_run{run}'\n\t    else:\n\t        return task\n\tdef select_task_segments(task):\n\t    \"\"\"\n\t    Define the task segments to be used for the analysis\n\t    Input parameters\n\t    ---------\n", "    - task : str\n\t        Each of the four tasks that have been measured for this experiment: Eyes Closed (ec), Eyes Open (eo), Paced Auditory Serial Addition Test 1 or 2 (PASAT_1 or PASAT_2)\n\t    Returns\n\t    -------\n\t    - chosen_tasks: The list of chosen task's segments \n\t    \"\"\"\n\t    # Segments present in each of the tasks\n\t    tasks = [['ec_1', 'ec_2', 'ec_3'], \n\t             ['eo_1', 'eo_2', 'eo_3'], \n\t             ['PASAT_run1_1', 'PASAT_run1_2'], \n", "             ['PASAT_run2_1', 'PASAT_run2_2']]\n\t    # Define which files to read for each subject\n\t    if task == 'ec':\n\t        chosen_tasks = tasks[0]\n\t    elif task == 'eo':\n\t        chosen_tasks = tasks[1]\n\t    elif task == 'PASAT_1':\n\t        chosen_tasks = tasks[2]\n\t    elif task == 'PASAT_2': \n\t        chosen_tasks = tasks[3]\n", "    else:\n\t        raise(\"Incorrect task\")\n\t    return chosen_tasks\n"]}
{"filename": "src/pickle_data_handler.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tClass that handles the loading (bundling) and un-loading (exporting) data from the pickle object.\n\t@author: Estanislao Porta\n\t\"\"\"\n\timport os\n\timport time\n\timport pickle\n\tclass PickleDataHandler:\n", "    @staticmethod\n\t    def export_data(dataframe, metadata):\n\t        if dataframe.empty:\n\t            raise ValueError(\"The dataframe cannot be empty.\")\n\t        if not isinstance(metadata, dict):\n\t            raise ValueError(\"Metadata must be a dictionary.\")\n\t        if not metadata:\n\t            raise ValueError(\"The metadata file cannot be empty.\")\n\t        try: \n\t            with open(\"eeg_tmp_data.pickle\", \"wb\") as f:\n", "                pickle.dump((dataframe, metadata), f)\n\t        except (TypeError, IOError) as e:\n\t            print(f'An error occurred: {e}')\n\t            return False\n\t        print('INFO: CSV data and metadata have been bundled into file \"eeg_tmp_data.pickle\".')\n\t        return True\n\t    @staticmethod\n\t    def load_data():  \n\t        # Check if the file exists.\n\t        file_path = \"eeg_tmp_data.pickle\"\n", "        if not os.path.exists(file_path):\n\t            print(\"The file 'eeg_tmp_data.pickle' does not exist in the current directory. The program will exit.\")\n\t            return False\n\t        # Check if the age of the file is older than 1 day.\n\t        file_age = time.time() - os.path.getmtime(file_path)\n\t        if file_age > 86400:\n\t            raise ValueError(\"The data file is older than 1 day.\")\n\t        try:\n\t            with open(\"eeg_tmp_data.pickle\", \"rb\") as fin:\n\t                dataframe, metadata = pickle.load(fin)\n", "        except (IOError, TypeError) as e:\n\t            print(f'An error occurred: {e}')\n\t            return False\n\t        if dataframe.empty:\n\t            raise ValueError(\"The dataframe is empty.\")\n\t        if not isinstance(metadata, dict):\n\t            raise ValueError(\"Metadata must be a dictionary.\")\n\t        if not metadata:\n\t            raise ValueError(\"The metadata file cannot be empty.\")\n\t        print('INFO: CSV data and metadata have been read in from file \"eeg_tmp_data.pickle\".')\n", "        return dataframe, metadata"]}
{"filename": "src/fnames.py", "chunked_list": ["\"\"\"Utility class to manage a list of filenames.\n\tUse the `add` method to add new filenames. You specify a short \"alias\" for\n\tthem, which you can use to retrieve the full filename later:\n\t>>> fname = FileNames()\n\t>>> fname.add('my_file', '/path/to/file1'\n\t>>> fname.my_file\n\t'/path/to/file1'\n\tFilenames can also be templates that can be used to generate\n\tfilenames for different subjects, conditions, etc.:\n\t>>> fname = FileNames()\n", ">>> fname.add('epochs', '/data/{subject}/{cond}-epo.fif')\n\t>>> fname.epochs(subject='sub001', cond='face')\n\t'/data/sub001/face-epo.fif'\n\tTemplates can contain placeholders in the way `string.format` allows,\n\tincluding formatting options:\n\t>>> fname = FileNames()\n\t>>> fname.add('epochs', '/data/sub{subject:03d}/{cond}-epo.fif')\n\t>>> fname.epochs(subject=1, cond='face')\n\t'/data/sub001/face-epo.fif'\n\tIf a placeholder happens to be the alias of a file that has been added earlier,\n", "the placeholder is automatically filled:\n\t>>> fname = FileNames()\n\t>>> fname.add('subjects', '/data/subjects_dir')\n\t>>> fname.add('epochs', '{subjects}/{subject}/{cond}-epo.fif')\n\t>>> fname.epochs(subject='sub001', cond='face')\n\t'/data/subjects_dir/sub001/face-epo.fif'\n\tIf all placeholders could be automatically filled, no brackets () are required\n\twhen accessing it:\n\t>>> fname = FileNames()\n\t>>> fname.add('subjects', '/data/subjects_dir')\n", ">>> fname.add('fsaverage', '{subjects}/fsaverage-src.fif')\n\t>>> fname.fsaverage\n\t'/data/subjects_dir/fsaverage-src.fif'\n\tIf computing the file path gets more complicated than the cases above, you can\n\tsupply your own function. When the filename is requested, your function will\n\tget called with the FileNames object as first parameter, followed by any\n\tparameters that were supplied along with the request:\n\t>>> fname = FileNames()\n\t>>> fname.add('basedir', '/data/subjects_dir')\n\t>>> def my_function(files, subject):\n", "...     if subject == 1:\n\t...         return files.basedir + '/103hdsolli.fif'\n\t...     else:\n\t...         return files.basedir + '/%s.fif' % subject\n\t>>> fname.add('complicated', my_function)\n\t>>> fname.complicated(subject=1)\n\t'/data/subjects_dir/103hdsolli.fif'\n\tAuthor: Marijn van Vliet <w.m.vanvliet@gmail.com>\n\t\"\"\"\n\timport string\n", "from pathlib import Path\n\tclass FileNames(object):\n\t    \"\"\"Utility class to manage filenames.\"\"\"\n\t    def files(self):\n\t        \"\"\"Obtain a list of file aliases known to this FileNames object.\n\t        Returns\n\t        -------\n\t        files : list of str\n\t            The list of file aliases.\n\t        \"\"\"\n", "        files = dict()\n\t        for name, value in self.__dict__.items():\n\t            public_methods = ['list_filenames', 'add']\n\t            if not name.startswith('_') and name not in public_methods:\n\t                files[name] = value\n\t        return files\n\t    def add(self, alias, fname):\n\t        \"\"\"Add a new filename.\n\t        Parameters\n\t        ----------\n", "        alias : str\n\t            A short alias for the full filename. This alias can later be used\n\t            to retrieve the filename. Aliases can not start with '_' or a\n\t            number.\n\t        fname : str | function\n\t            The full filename. Either a string, with possible placeholder\n\t            values, or a function that will compute the filename. If you\n\t            specify a function, it will get called with the FileNames object as\n\t            first parameter, followed by any parameters that were supplied\n\t            along with the request.\n", "        \"\"\"\n\t        if callable(fname):\n\t            self._add_function(alias, fname)\n\t        else:\n\t            # Determine whether the string contains placeholders and whether\n\t            # all placeholders can be pre-filled with existing file aliases.\n\t            placeholders = _get_placeholders(fname)\n\t            if len(placeholders) == 0:\n\t                self._add_fname(alias, fname)  # Plain string filename\n\t            else:\n", "                prefilled = _prefill_placeholders(placeholders, self.files(),\n\t                                                  dict())\n\t                if len(prefilled) == len(placeholders):\n\t                    # The template could be completely pre-filled. Add the\n\t                    # result as a plain string filename.\n\t                    self._add_fname(alias, Path(fname.format(**prefilled)))\n\t                else:\n\t                    # Add filename as a template\n\t                    self._add_template(alias, fname)\n\t    def _add_fname(self, alias, fname):\n", "        \"\"\"Add a filename that is a plain string.\"\"\"\n\t        self.__dict__[alias] = Path(fname)\n\t    def _add_template(self, alias, template):\n\t        \"\"\"Add a filename that is a string containing placeholders.\"\"\"\n\t        # Construct a function that will do substitution for any placeholders\n\t        # in the template.\n\t        def fname(**kwargs):\n\t            return Path(_substitute(template, self.files(), kwargs))\n\t        # Bind the fname function to this instance of FileNames\n\t        self.__dict__[alias] = fname\n", "    def _add_function(self, alias, func):\n\t        \"\"\"Add a filename that is computed using a user-specified function.\"\"\"\n\t        # Construct a function that will call the user supplied function with\n\t        # the proper arguments. We prepend 'self' so the user supplied function\n\t        # has easy access to all the filepaths.\n\t        def fname(**kwargs):\n\t            return func(self, **kwargs)\n\t        # Bind the fname function to this instance of FileNames\n\t        self.__dict__[alias] = fname\n\tdef _get_placeholders(template):\n", "    \"\"\"Get all placeholders from a template string.\n\t    Parameters\n\t    ----------\n\t    template : str\n\t        The template string to get the placeholders for.\n\t    Returns\n\t    -------\n\t    placeholders : list of str\n\t        The list of placeholder names that were found in the template string.\n\t    \"\"\"\n", "    return [p[1] for p in string.Formatter().parse(template)\n\t            if p[1] is not None and len(p[1]) > 0]\n\tdef _substitute(template, files, user_values):\n\t    \"\"\"Makes a filename from a template.\n\t    Any placeholders that point to known file aliases will be prefilled. The\n\t    rest is filled given the values provided by the user when requesting the\n\t    filename.\n\t    Parameters\n\t    ----------\n\t    template : str\n", "        The template string for the filename.\n\t    files : list of str\n\t        A list of file aliases that are already known.\n\t    user_values : dict\n\t        The key=value parameters that the user specified when requesting the\n\t        filename.\n\t    Returns\n\t    -------\n\t    filename : str\n\t        The filename, obtained by filling all the placeholders of the template\n", "        string.\n\t    \"\"\"\n\t    # Get all placeholder names\n\t    placeholders = _get_placeholders(template)\n\t    # Pre-fill placeholders based on existing file aliases\n\t    placeholder_values = _prefill_placeholders(placeholders, files,\n\t                                               user_values)\n\t    # Add user specified values for the placeholders\n\t    placeholder_values.update(**user_values)\n\t    # Check whether all placeholder values are now properly provided.\n", "    provided = set(placeholder_values.keys())\n\t    needed = set(placeholders)\n\t    missing = needed - provided\n\t    if len(missing) > 0:\n\t        raise ValueError('Cannot construct filename, because the following '\n\t                         'parameters are missing: %s' % missing)\n\t    # Do the substitution\n\t    return template.format(**placeholder_values)\n\tdef _prefill_placeholders(placeholders, files, user_values):\n\t    \"\"\"Search through existing file aliases to pre-fill placeholder values.\n", "    Parameters\n\t    ----------\n\t    placeholders : list of str\n\t        The list of placeholder names that were found in the template string.\n\t    files : list of str\n\t        A list of file aliases that are already known.\n\t    user_values : dict\n\t        The key=value parameters that the user specified when requesting the\n\t        filename. Can be empty if no parameters were specified (yet).\n\t    Returns\n", "    -------\n\t    placeholder_values : dict\n\t        A dictionary containing the values for the placeholders that could be\n\t        pre-filled.\n\t    \"\"\"\n\t    placeholder_values = dict()\n\t    for placeholder in placeholders:\n\t        if placeholder in files:\n\t            # Placeholder name is a filename, so get the path\n\t            path = files[placeholder]\n", "            if not isinstance(path, Path):\n\t                try:\n\t                    path = path(**user_values)\n\t                except ValueError:\n\t                    # Placeholder could not be pre-filled given the supplied\n\t                    # values by the user.\n\t                    continue\n\t            # Add the path as possible placeholder value\n\t            placeholder_values[placeholder] = path\n\t    return placeholder_values\n"]}
{"filename": "src/check_system.py", "chunked_list": ["\"\"\"\n\tThis script performs a series of checks on the system to see if everything is\n\tready to run the analysis pipeline.\n\t\"\"\"\n\timport os\n\timport pkg_resources\n\timport mne\n\tfrom config_common import raw_data_dir, processed_data_dir, figures_dir, reports_dir\n\t# Check to see if the python dependencies are fullfilled.\n\tdependencies = []\n", "with open('../requirements.txt') as f:\n\t    for line in f:\n\t        line = line.strip()\n\t        if len(line) == 0 or line.startswith('#'):\n\t            continue\n\t        dependencies.append(line)\n\t# This raises errors of dependencies are not met\n\ttry:\n\t    pkg_resources.working_set.require(dependencies)\n\texcept pkg_resources.VersionConflict as e:\n", "    # Get the conflicting distribution and requirement\n\t    dist = e.dist\n\t    req = e.req\n\t    # Create a custom error message\n\t    error_message = f\"\\nVersion conflict:Library {dist} ({dist.location}) does not meet the requirements: {req}\"\n\t    # Raise a new exception with the custom error message\n\t    raise ValueError(error_message) from e\n\t# Check that the raw data directory is present on the system and raise error if doesnt exist\n\tif not os.path.exists(raw_data_dir):\n\t    raise ValueError(f'The `raw_data_dir` points to a directory that does not exist: {raw_data_dir}')\n", "# Make sure the processed data, figures and reports directories exist\n\tif not os.path.exists(processed_data_dir):\n\t    print(f'Creating directory {processed_data_dir}')\n\t    os.makedirs(processed_data_dir, exist_ok=True)\n\tif not os.path.exists(figures_dir):\n\t    print(f'Creating directory {figures_dir}')\n\t    os.makedirs(figures_dir, exist_ok=True)\n\tif not os.path.exists(reports_dir):\n\t    print(f'Creating directory {reports_dir}')\n\t    os.makedirs(reports_dir, exist_ok=True)\n", "# Prints some information about the system\n\t#print('\\nNME dependencies installed in the system\\n------')\n\t#mne.sys_info()\n\t#print('-------------')\n\tprint('INFO: Success! System requirements are met.\\n')\n"]}
{"filename": "src/processing/01_freqfilt.py", "chunked_list": ["\"\"\"\n\tPerform bandpass filtering and notch filtering to get rid of cHPI and powerline\n\tfrequencies.\n\tRunning:\n\timport subprocess\n\tsubprocess.run('/net/tera2/home/heikkiv/work_s2022/mtbi-eeg/python/processing/eeg/runsome.sh', shell=True)\n\t\"\"\"\n\timport argparse\n\tfrom collections import defaultdict\n\tfrom mne.io import read_raw_fif\n", "from mne import open_report, set_log_level\n\timport datetime\n\timport time\n\timport os\n\timport sys\n\tparent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(parent_dir)\n\t# Save time of beginning of the execution to measure running time\n\tstart_time = time.time()\n\tfrom config_eeg import get_all_fnames, fname, ec_bads, eo_bads, pasat1_bads, pasat2_bads, freq_min, filt_freq_max, fnotch\n", "# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\targs = parser.parse_args()\n\t# Along the way, we collect figures for quality control\n\tfigures = defaultdict(list)\n\t# Not all subjects have files for all conditions. These functions grab the\n\t# files that do exist for the subject.\n\texclude = ['emptyroom'] #these don't have eye blinks.\n\tall_fnames = zip(\n", "    get_all_fnames(args.subject, kind='raw', exclude=exclude),\n\t    get_all_fnames(args.subject, kind='filt', exclude=exclude),\n\t)\n\t# Date and time\n\tnow = datetime.datetime.now()\n\tdate_time = now.strftime('%A, %d. %B %Y %I:%M%p')\n\tcorrupted_raw_files = []\n\tfor raw_fname, filt_fname in all_fnames:\n\t    try:\n\t        raw = read_raw_fif(raw_fname, preload=True)\n", "    except NameError as e:\n\t        raise NameError(f'Subject {args.subject} does not exist') from e\n\t    except (IOError, ValueError) as error:\n\t        corrupted_raw_files.append(args.subject)\n\t        print(f'Error: {error}')\n\t        continue\n\t    # Reduce logging level (technically, one could define it in the read_raw_fif function, but it seems to be buggy)\n\t    # More info about the bug can be found here: https://github.com/mne-tools/mne-python/issues/8872\n\t    set_log_level(verbose='Warning')\n\t    # Mark bad channels that were manually annotated earlier.\n", "    raw_str = str(raw_fname)\n\t    if 'task-ec' in raw_str:\n\t        raw.info['bads'] = ec_bads[args.subject]\n\t        task = 'ec'\n\t    elif 'task-eo' in raw_str:\n\t        raw.info['bads'] = eo_bads[args.subject]\n\t        task = 'eo'\n\t    elif 'task-PASAT' in raw_str and 'run-01' in raw_str:\n\t        raw.info['bads'] = pasat1_bads[args.subject]\n\t        task = 'pasat1'\n", "    elif 'task-PASAT' in raw_str and 'run-02' in raw_str:\n\t        raw.info['bads'] = pasat2_bads[args.subject]\n\t        task = 'pasat2'\n\t    # Remove MEG channels. This is the EEG pipeline after all.\n\t    raw.pick_types(meg=False, eeg=True, eog=True, stim=True, ecg=True, exclude=[])\n\t    # Plot segment of raw data\n\t    figures['raw segment'].append(raw.plot(n_channels=30, title = date_time, show=False))\n\t    # Interpolate bad channels\n\t    raw.interpolate_bads()\n\t    figures['interpolated segment'].append(raw.plot(n_channels=30, title = date_time + task, show=False))\n", "    # Add a plot of the power spectrum to the list of figures to be placed in\n\t    # the HTML report.\n\t    raw_plot = raw.compute_psd(fmin=freq_min, fmax=filt_freq_max).plot(show=False)\n\t    figures['before filt'].append(raw_plot)\n\t    # Remove 50Hz power line noise (and the first harmonic: 100Hz)\n\t    filt = raw.notch_filter(fnotch, picks=['eeg', 'eog', 'ecg'])\n\t    # Apply bandpass filter\n\t    filt = filt.filter(l_freq=freq_min, h_freq=filt_freq_max, picks=['eeg', 'eog', 'ecg'])\n\t    # Save the filtered data\n\t    filt_fname.parent.mkdir(parents=True, exist_ok=True)\n", "    filt.save(filt_fname, overwrite=True)\n\t    # Add a plot of the power spectrum of the filtered data to the list of\n\t    # figures to be placed in the HTML report.\n\t    filt_plot = filt.plot_psd(fmin=freq_min, fmax=filt_freq_max, show=False)\n\t    figures['after filt'].append(filt_plot)\n\t    raw.close()\n\t# Write HTML report with the quality control figures\n\tsection='Filtering'\n\twith open_report(fname.report(subject=args.subject)) as report:\n\t    report.add_figure(\n", "        figures['before filt'],\n\t        title='Before frequency filtering',\n\t        caption=('Eyes open', 'Eyes closed', 'PASAT run 1', 'PASAT run 2'),\n\t        replace=True,\n\t        section=section,\n\t        tags=('filt')\n\t    )\n\t    report.add_figure(\n\t        figures['after filt'],\n\t        title='After frequency filtering',\n", "        caption=('Eyes open', 'Eyes closed', 'PASAT run 1', 'PASAT run 2'),\n\t        replace=True,\n\t        section=section,\n\t        tags=('filt')\n\t    )\n\t    report.add_figure(\n\t        figures['raw segment'],\n\t        title='Before interpolation',\n\t        caption=('Eyes open', 'Eyes closed', 'PASAT run 1', 'PASAT run 2'),\n\t        replace=True,\n", "        section=section,\n\t        tags=('raw')\n\t    )\n\t    report.add_figure(\n\t        figures['interpolated segment'],\n\t        title='After interpolation',\n\t        caption=('Eyes open', 'Eyes closed', 'PASAT run 1', 'PASAT run 2'),\n\t        replace=True,\n\t        section=section,\n\t        tags=('raw')\n", "    )\n\t    report.save(fname.report_html(subject=args.subject),\n\t                overwrite=True, open_browser=False)\n\twith open('corrupted_subjects.txt', 'a') as file:\n\t    for bad_file in corrupted_raw_files:\n\t        file.write(bad_file+'\\n')\n\t    file.close()\n\t# Calculate time that the script takes to run\n\texecution_time = (time.time() - start_time)\n\tprint('\\n###################################################\\n')\n", "print(f'Execution time of 01_freqfilter.py is: {round(execution_time,2)} seconds\\n')\n\tprint('###################################################\\n')\n"]}
{"filename": "src/processing/04_bandpower.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Tue Jun 14 12:29:27 2022\n\t@author: aino\n\tCalculates log band power (absolute) for each subject\n\tRunning:\n\timport subprocess\n\tsubprocess.run('/net/tera2/home/aino/work/mtbi-eeg/python/processing/eeg/runall.sh', shell=True)\n\t\"\"\"\n", "import argparse\n\timport h5py\n\timport numpy as np\n\tfrom pathlib import Path\n\timport time\n\timport os\n\timport sys\n\tparent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(parent_dir)\n\tfrom config_eeg import fname, thin_bands, wide_bands, processed_data_dir\n", "# Save time of beginning of the execution to measure running time\n\tstart_time = time.time()\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\tparser.add_argument('--freq_band_type', type=str, help=\"Define the frequency bands. 'thin' are 1hz bands from 1 to 40hz. 'wide' are conventional delta, theta, etc. Default is 'thin'.\", default=\"thin\")\n\targs = parser.parse_args()\n\tif args.freq_band_type == 'wide':\n\t    f_bands =  wide_bands  \n\telif args.freq_band_type == 'thin':\n", "    f_bands = thin_bands\n\tnormalize_ch_power = False\n\t# A list for corruprted or missing psds files\n\tcorrupted_psds_files = []\n\tsubject_psds = fname.psds(subject=args.subject, ses='01')\n\ttry:\n\t    f = h5py.File(subject_psds, 'r')\n\texcept:\n\t    print(\"Psds file corrupted or missing\")\n\t    corrupted_psds_files.append(args.subject)\n", "psds_keys = list(f.keys())\n\tpsds_data = f[psds_keys[0]]\n\tdata_keys = list(psds_data)\n\tdata = dict()\n\t# Add the data for each PSD to the dictionary 'data'\n\tfor i in data_keys:\n\t    if 'eo' in i or 'ec' in i or 'PASAT' in i:\n\t        dict_key = i.removeprefix('key_')\n\t        data[dict_key] = np.array(psds_data[i])\n\tfreqs = np.array(psds_data['key_freqs'])\n", "info_keys = list(psds_data['key_info'])\n\tf.close()\n\t# Create a directory to save the .csv files\n\tdirectory = f'{processed_data_dir}/sub-{args.subject}/ses-01/eeg/bandpowers'\n\tPath(directory).mkdir(parents=True, exist_ok=True)\n\t# Calculate the average bandpower for each PSD\n\tfor data_obj in list(data.keys()):\n\t    data_bandpower = [] \n\t    data_arr = data[data_obj]\n\t    if normalize_ch_power:\n", "        ch_tot_powers = np.sum(data_arr, axis=1)\n\t        data_arr = data_arr/ch_tot_powers[:, None]\n\t    for fmin, fmax in f_bands:           \n\t        min_index = np.argmax(freqs > fmin) - 1\n\t        max_index = np.argmax(freqs > fmax) - 1\n\t        bandpower = np.mean(data_arr[:, min_index:max_index], axis=1)           \n\t        data_bandpower.append(bandpower)\n\t    # Save the calculated bandpowers\n\t    filename = f'{directory}/{args.freq_band_type}_{data_obj}.csv'\n\t    np.savetxt(filename, data_bandpower, delimiter=',')  \n", "with open('psds_corrupted_or_missing.txt', 'a') as file:\n\t    for bad_file in corrupted_psds_files:\n\t        file.write(bad_file + '\\n')\n\t    file.close()\n\t# Calculate time that the script takes to run\n\texecution_time = (time.time() - start_time)\n\tprint('\\n###################################################\\n')\n\tprint(f'Execution time of 04_bandpower.py for {args.freq_band_type} frequency bands is: {round(execution_time,2)} seconds\\n')\n\tprint('###################################################\\n')"]}
{"filename": "src/processing/__init__.py", "chunked_list": []}
{"filename": "src/processing/02_ica.py", "chunked_list": ["\"\"\"\n\tRemove EOG & ECG artifacts through independant component analysis (ICA).\n\tRunning: \n\timport subprocess\n\tsubprocess.run('/net/tera2/home/aino/work/mtbi-eeg/python/processing/eeg/runall.sh', shell=True)\n\t\"\"\"\n\timport argparse\n\tfrom collections import defaultdict\n\tfrom mne import Epochs, set_log_level\n\tfrom mne.io import read_raw_fif\n", "from mne.preprocessing import create_eog_epochs, create_ecg_epochs, ICA\n\tfrom mne import open_report\n\timport datetime\n\timport time\n\timport os\n\timport sys\n\tparent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(parent_dir)\n\tfrom config_eeg import get_all_fnames, task_from_fname, fname, ecg_channel\n\t# Save time of beginning of the execution to measure running time\n", "start_time = time.time()\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\targs = parser.parse_args()\n\t# Along the way, we collect figures for quality control\n\tfigures = defaultdict(list)\n\t# Not all subjects have files for all conditions. These functions grab the\n\t# files that do exist for the subject.\n\texclude = ['emptyroom'] #these don't have eye blinks.\n", "bad_subjects = ['01P', '02P', '03P', '04P', '05P', '06P', '07P']#these ica need to be done manually\n\tall_fnames = zip(\n\t    get_all_fnames(args.subject, kind='filt', exclude=exclude),\n\t    get_all_fnames(args.subject, kind='ica', exclude=exclude),\n\t    get_all_fnames(args.subject, kind='clean', exclude=exclude),\n\t)\n\tfor filt_fname, ica_fname, clean_fname in all_fnames:\n\t    task = task_from_fname(filt_fname)\n\t    #TODO: crop first and last 2-5 s\n\t    raw_filt = read_raw_fif(filt_fname, preload=True)\n", "    # Reduce logging level (technically, one could define it in the read_raw_fif function, but it seems to be buggy)\n\t    # More info about the bug can be found here: https://github.com/mne-tools/mne-python/issues/8872\n\t    set_log_level(verbose='Warning')\n\t    # Run a detection algorithm for the onsets of eye blinks (EOG) and heartbeat artefacts (ECG)\n\t    eog_events = create_eog_epochs(raw_filt)\n\t    #TODO: skip eog events for ec\n\t    if ecg_channel in raw_filt.info['ch_names']:\n\t                        ecg_events = create_ecg_epochs(raw_filt)\n\t                        ecg_exists = True\n\t    else:\n", "        ecg_exists = False\n\t    # Perform ICA decomposition\n\t    ica = ICA(n_components=0.99, random_state=0).fit(raw_filt)\n\t    # Find components that are likely capturing EOG artifacts\n\t    bads_eog, scores_eog = ica.find_bads_eog(raw_filt)\n\t    print('Bads EOG:', bads_eog)\n\t    try:\n\t        bads_ecg, scores_ecg = ica.find_bads_ecg(raw_filt, method='correlation',threshold='auto')\n\t    except ValueError:\n\t        print('Not able to find ecg components')\n", "        bads_ecg = []\n\t        scores_ecg = []\n\t    # Mark the EOG components for removal\n\t    ica.exclude = bads_eog + bads_ecg\n\t    ica.save(ica_fname, overwrite=True) \n\t    # Remove the EOG artifact components from the signal.\n\t    raw_ica = ica.apply(raw_filt)\n\t    raw_ica.save(clean_fname, overwrite=True)\n\t    # Date and time\n\t    now = datetime.datetime.now()\n", "    date_time = now.strftime('%A, %d. %B %Y %I:%M%p')\n\t    # Put a whole lot of quality control figures in the HTML report.\n\t    with open_report(fname.report(subject=args.subject)) as report:\n\t        if len(bads_eog)>0:\n\t            report.add_ica(ica=ica, \n\t                            title=f' {task}' + ' EOG', \n\t                            inst=raw_filt, \n\t                            picks=bads_eog,\n\t                            eog_evoked=eog_events.average(),\n\t                            eog_scores=scores_eog,\n", "                            tags=(f'{task}', 'EOG', 'ICA'),\n\t                            replace=True\n\t                            )\n\t        if ecg_exists:\n\t            if len(bads_ecg)>0:\n\t                report.add_ica(ica=ica, \n\t                                title=f' {task}' + ' ECG', \n\t                                inst=raw_filt, \n\t                                picks=bads_ecg,\n\t                                ecg_evoked=ecg_events.average(),\n", "                                ecg_scores=scores_ecg,\n\t                                tags=(f'{task}', 'ECG', 'ICA'),\n\t                                replace=True\n\t                                )\n\t        report.add_figure(\n\t            ica.plot_overlay(eog_events.average(), title=date_time, show=False),\n\t            f'{task}: EOG overlay', replace=True, tags=(f'{task}', 'ICA', 'EOG', 'overlay'))\n\t        if ecg_exists:\n\t            report.add_figure(\n\t                ica.plot_overlay(ecg_events.average(), title=date_time, show=False),\n", "                f'{task}: ECG overlay', replace=True, tags=(f'{task}', 'ICA', 'ECG', 'overlay'))\n\t        report.save(fname.report_html(subject=args.subject),\n\t                    overwrite=True, open_browser=False)\n\t    with open(\"ecg_missing.txt\", \"a\") as file:\n\t        file_name = task_from_fname(filt_fname)\n\t        if not ecg_exists:\n\t            print(f'{args.subject}: no ECG found') \n\t            file.write(str(args.subject)+file_name+'\\n')\n\t        file.close()\n\t# Calculate time that the script takes to run\n", "execution_time = (time.time() - start_time)\n\tprint('\\n###################################################\\n')\n\tprint(f'Execution time of 02_ica.py is: {round(execution_time,2)} seconds\\n')\n\tprint('###################################################\\n')\n"]}
{"filename": "src/processing/run_files.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Wed Mar 15 11:23:04 2023\n\tRuns the scripts in the processing folder \n\tIt could also be done in bash using something like \n\t    # Define the arguments for the first file\n\t    arg1_vals=(\"eo\" \"ec\" \"PASAT_1\" \"PASAT_2\")\n\t    arg2_vals=(\"thin\" \"wide\")\n\t    # Call the first Python file with each set of arguments\n", "    for (( i=0; i<${#arg1_vals[@]}; i++ )); do\n\t        python file1.py --task \"${arg1_vals[i]}\" --freq_band_type \"${arg2_vals[i]}\"\n\t        # Call the second Python file without any arguments\n\t        python file2.py\n\t    done\n\t@author: portae1\n\t\"\"\"\n\timport subprocess\n\timport time\n\timport re\n", "# Flag used for test run\n\tTEST_RUN = False\n\t# Save time of beginning of the execution to measure running time\n\there_start_time = time.time()\n\t# Define a list of tuples containing the different argument combinations to use\n\t#subjects = ['10C', '30P']\n\targ_set = [('--freq_band_type', 'thin'),\n\t            ('--freq_band_type', 'wide'),]\n\tsubject_pattern = r'^\\d{2}[PC]'   \n\tif TEST_RUN:\n", "    subjects = ['10C', '11P']\n\telse:\n\t    try:\n\t        with open('subjects.txt', 'r') as subjects_file:\n\t            subjects = [line.rstrip() for line in subjects_file.readlines()]\n\t            # Assert that each line has the expected format\n\t            for line in subjects:\n\t                assert re.match(subject_pattern, line), f\"Subject '{line}' does not have the expected format.\"\n\t    except FileNotFoundError as e:\n\t        print(\"The file 'subjects.txt' does not exist in the current directory. The program will exit.\")\n", "        raise e\n\tfor subject in subjects:\n\t    print(f'### \\nRunning using subject {subject}...\\n')\n\t    # Call the first Python \n\t    subprocess.run(['python3', '01_freqfilt.py', subject])\n\t    print(f'Finished executing 01_freqfilt for subject {subject}\\n')\n\t    # Call the second Python file\n\t    subprocess.run(['python3', '02_ica.py', subject])\n\t    print(f'Finished executing 02_ica for subject {subject}\\n')\n\t    # Call the third script\n", "    subprocess.run(['python3', '03_psds.py', subject])\n\t    print(f'Finished executing 03_psds for subject {subject}\\n')\n\t    # Create bandpowers\n\t    for arg in arg_set:\n\t        subprocess.run(['python3', '04_bandpower.py', subject] + list(arg))\n\t    print(f'Finished executing 04_bandpower for subject {subject}\\n')\n\t# Calculate time that the script takes to run\n\there_execution_time = (time.time() - here_start_time)\n\tprint('\\n###################################################')\n\tprint('Processing pipeline has finalized executing')\n", "print(f'Total execution time is: {round(here_execution_time/60,1)} minutes')\n\tprint(f'Average time is {round(here_execution_time/len(subjects),1)} seconds per subject')\n\tprint('###################################################\\n')\n"]}
{"filename": "src/processing/03_psds.py", "chunked_list": ["\"\"\"\n\tCompute the Power Spectral Density (PSD) for each channel.\n\tRunning:\n\timport subprocess\n\tsubprocess.run('/net/tera2/home/aino/work/mtbi-eeg/python/processing/eeg/runall.sh', shell=True)\n\t\"\"\"\n\timport argparse\n\tfrom mne.io import read_raw_fif\n\tfrom mne.time_frequency import psd_array_welch\n\tfrom h5io import write_hdf5\n", "from mne.viz import iter_topography\n\tfrom mne import open_report, find_layout, pick_info, pick_types, set_log_level\n\timport matplotlib.pyplot as plt\n\timport datetime\n\timport time\n\timport os\n\timport sys\n\tparent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(parent_dir)\n\tfrom config_eeg import fname, n_fft, get_all_fnames, task_from_fname, freq_max\n", "# Save time of beginning of the execution to measure running time\n\tstart_time = time.time()\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\targs = parser.parse_args()\n\t# Compute the PSD for each task\n\tpsds = dict()\n\t# Not all subjects have files for all conditions. These functions grab the\n\t# files that do exist for the subject.\n", "exclude = ['emptyroom'] \n\tbad_subjects = ['01P', '02P', '03P', '04P', '05P', '06P', '07P']#these ica need to be done manually\n\tall_fnames = zip(\n\t    get_all_fnames(args.subject, kind='psds', exclude=exclude),\n\t    get_all_fnames(args.subject, kind='clean', exclude=exclude),\n\t)\n\tfor psds_fname, clean_fname in all_fnames:\n\t    task = task_from_fname(clean_fname)\n\t    run = 1\n\t    if '1' in task:\n", "        task_wo_run = task.removesuffix('_run1')\n\t    elif '2' in task:\n\t        task_wo_run = task.removesuffix('_run2')    \n\t        run = 2\n\t    else:\n\t        task_wo_run = task\n\t    raw = read_raw_fif(fname.clean(subject=args.subject, task=task_wo_run, run=run,ses='01'),\n\t                       preload=True)\n\t    # Reduce logging level (technically, one could define it in the read_raw_fif function, but it seems to be buggy)\n\t    # More info about the bug can be found here: https://github.com/mne-tools/mne-python/issues/8872\n", "    set_log_level(verbose='Warning')\n\t    raw.info['bads']=[]\n\t    sfreq=raw.info['sfreq']\n\t    if 'eo' in task or 'ec' in task:\n\t        clean_1 = raw.copy().crop(tmin=30, tmax=90)\n\t        clean_2 = raw.copy().crop(tmin=120, tmax=180)\n\t        clean_3 = raw.copy().crop(tmin=210, tmax=260)\n\t        psds[task+'_3'], freqs = psd_array_welch(clean_3.get_data(picks=['eeg']), sfreq=sfreq, \n\t                                                 fmax=freq_max, n_fft=n_fft)\n\t    elif 'PASAT' in task:\n", "        clean_1 = raw.copy().crop(tmin=2, tmax=62)\n\t        clean_2 = raw.copy().crop(tmin=62, tmax=122)\n\t    psds[task+'_1'], freqs = psd_array_welch(clean_1.get_data(picks=['eeg']), sfreq=sfreq,\n\t                                             fmax=freq_max, n_fft=n_fft)\n\t    psds[task+'_2'], freqs = psd_array_welch(clean_2.get_data(picks=['eeg']), sfreq=sfreq,\n\t                                             fmax=freq_max, n_fft=n_fft)\n\t    # Add some metadata to the file we are writing\n\t    psds['info'] = raw.info\n\t    psds['freqs'] = freqs\n\t    write_hdf5(fname.psds(subject=args.subject, ses='01'), psds, overwrite=True)\n", "# Add a PSD plot to the report.\n\traw.pick_types(meg=False, eeg=True, eog=False, stim=False, ecg=False, exclude=[])\n\tinfo = pick_info(raw.info, sel=None)\n\tlayout = find_layout(info, exclude=[])\n\tdef on_pick(ax, ch_idx):\n\t    \"\"\"Create a larger PSD plot for when one of the tiny PSD plots is\n\t       clicked.\"\"\"\n\t    ax.plot(psds['freqs'], psds['ec_1'][ch_idx], color='C0',\n\t            label='eyes closed')\n\t    ax.plot(psds['freqs'], psds['eo_1'][ch_idx], color='C1',\n", "            label='eyes open')\n\t    ax.plot(psds['freqs'], psds['PASAT_run1_1'][ch_idx], color='C2',\n\t            label='pasat run 1')\n\t    ax.plot(psds['freqs'], psds['PASAT_run2_1'][ch_idx], color='C3',\n\t            label='pasat run 2')\n\t    ax.legend()\n\t    ax.set_xlabel('Frequency')\n\t    ax.set_ylabel('PSD')\n\t# Make the big topo figure\n\tfig = plt.figure(figsize=(14, 9))\n", "axes = iter_topography(info, layout, on_pick=on_pick, fig=fig,\n\t                       axis_facecolor='white', fig_facecolor='white',\n\t                       axis_spinecolor='white')\n\tfor ax, ch_idx in axes:\n\t    handles = [\n\t        ax.plot(psds['freqs'], psds['ec_1'][ch_idx], color='C0'),\n\t        ax.plot(psds['freqs'], psds['eo_1'][ch_idx], color='C1'),\n\t        ax.plot(psds['freqs'], psds['PASAT_run1_1'][ch_idx], color='C2'),\n\t        ax.plot(psds['freqs'], psds['PASAT_run2_1'][ch_idx], color='C3'),\n\t    ]\n", "fig.legend(handles)\n\twith open_report(fname.report(subject=args.subject)) as report:\n\t    report.add_figure(fig, 'PSDs', replace=True)\n\t    report.save(fname.report_html(subject=args.subject),\n\t                overwrite=True, open_browser=False)\n\t# Calculate time that the script takes to run\n\texecution_time = (time.time() - start_time)\n\tprint('\\n###################################################\\n')\n\tprint(f'Execution time of 03_psds.py is: {round(execution_time,2)} seconds\\n')\n\tprint('###################################################\\n')\n"]}
{"filename": "src/analysis/03_fit_classifier_and_plot.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#################################\n\t# 03_fit_classifier_and_plot.py #\n\t#################################\n\t@authors: Verna Heikkinen, Aino Kuusi, Estanislao Porta\n\tTakes the processed data, fits four different ML classifiers,\n\tperforms cross validation and evaluates the performance of the classification\n\tusing mean ROC curves.\n", "Data is split it in folds according to 10-fold StratifiedGroupKFold\n\tIf only one segment of a task is to be used, CV is done using StratifiedKFold CV.\n\tArguments used to run the script are added to pickle object.\n\tArguments\n\t---------\n\t    - eeg_tmp_data.pickle : pickle object\n\t        Object of pickle format containing the dataframe with the data\n\t        and the metadata with the information about the arguments\n\t        used to run the 01_read_processed_data script.\n\t    - seed : int\n", "        Value for initialization of the classifiers and the CV.\n\t    - scaling : bool\n\t        Define whether to perform scaling over data or not.\n\t    - scaling_method : str\n\t        Define what is the preferred scaling method.\n\t    - one_segment_per_task : bool\n\t        Define whether one or all segments of the task will be used for the classification.\n\t    - which_segment : int\n\t        Defines which of the segments will be used.\n\t    - dont_save_fig: bool\n", "        Define whether to refrain from saving the figure to disk.\n\t    - display_figure: bool\n\t        Define whether to display the figure in graphical interface\n\t        (e.g., when running script in HPC).\n\tReturns\n\t-------\n\t    - Prints out figure\n\t    - figure : pickle object\n\t        Object of pickle format containing the dataframe with the data\n\t        and the metadata with the information about the arguments\n", "        used to run this script.\n\t    - metadata?\n\t    - report?\n\t# TODO: Define metric and export them to CSV file\n\t\"\"\"\n\timport sys\n\timport os\n\timport argparse\n\timport time\n\tfrom math import sqrt\n", "from datetime import datetime\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\timport pandas as pd\n\tfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\tfrom sklearn.ensemble import RandomForestClassifier\n\tfrom sklearn.linear_model import LogisticRegression\n\tfrom sklearn.metrics import roc_curve, auc, confusion_matrix, f1_score, accuracy_score\n\tfrom sklearn.model_selection import StratifiedGroupKFold, StratifiedKFold\n\tfrom sklearn.svm import SVC\n", "from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\n\tfrom statistics import mean, stdev\n\tSRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(SRC_DIR)\n\tfrom config_common import figures_dir, reports_dir\n\tfrom config_eeg import seed, folds\n\tfrom pickle_data_handler import PickleDataHandler\n\t# Create directory if it doesn't exist\n\tif not os.path.isdir(figures_dir):\n\t    os.makedirs(figures_dir)\n", "def initialize_argparser(metadata):\n\t    \"\"\" Initialize argparser and add args to metadata.\"\"\"\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('-v', '--verbosity', action='store_true', help='Define the verbosity of the output. Default: False', default=False)\n\t    parser.add_argument('-s', '--seed', type=int, help=f'Seed value used for CV splits, and for classifiers and for CV splits. Default: {seed}', metavar='int', default=seed) # Note: different sklearn versions could yield different results \n\t    parser.add_argument('--scaling', action='store_true', help='Scaling of data before fitting. Can only be used if data is not normalized. Default: False', default=False)\n\t    parser.add_argument('--scaling_method', choices=scaling_methods, help='Method for scaling data, choose from the options. Default: RobustScaler', default=scaling_methods[2]) \n\t    parser.add_argument('--one_segment_per_task', action='store_true',  help='Utilizes only one of the segments from the tasks. Default: False', default=False)\n\t    parser.add_argument('--which_segment', type=int, help='Define which number of segment to use: 1, 2, etc. Default is 1', metavar='', default=1)\n\t    parser.add_argument('--display_fig', action='store_true', help='Displays the figure. Default: False', default=False)\n", "    parser.add_argument('--dont_save_fig', action='store_true', help='Saves figure to disk. Default: True', default=False)\n\t    #parser.add_argument('--threads', type=int, help=\"Number of threads, using multiprocessing\", default=1) #skipped for now\n\t    args = parser.parse_args()\n\t    # Add the input arguments to the metadata dictionary\n\t    metadata[\"folds\"] = folds\n\t    metadata[\"seed\"] = seed\n\t    metadata[\"verbosity\"] = args.verbosity\n\t    if args.scaling and metadata[\"normalization\"]:\n\t        raise TypeError(\"You are trying to scale data that has been already normalized.\")\n\t    metadata[\"scaling\"] = args.scaling\n", "    metadata[\"scaling_method\"] = args.scaling_method\n\t    metadata[\"one_segment_per_task\"] = args.one_segment_per_task\n\t    metadata[\"which_segment\"] = args.which_segment\n\t    if  args.one_segment_per_task and (args.which_segment > metadata[\"segments\"]):\n\t        raise TypeError(f'The segment you chose is larger than the number of available segments for task {metadata[\"task\"]}. Please choose a value between 1 and {metadata[\"segments\"]}.')\n\t    metadata[\"display_fig\"] = args.display_fig\n\t    return metadata, args\n\tdef initialize_cv(dataframe, metadata):\n\t    \"\"\"Initialize Cross Validation and gets data splits as a list \"\"\"\n\t    # Define features, classes and groups\n", "    X = dataframe.iloc[:, 2:]\n\t    y = dataframe.loc[:, 'Group']\n\t    groups = dataframe.loc[:, 'Subject']\n\t    # Slice data\n\t    if metadata[\"one_segment_per_task\"]:\n\t        # Removes (segments-1) rows out of the dataframe\n\t        X = X[metadata[\"which_segment\"]:len(X):metadata[\"segments\"]]\n\t        y = y[metadata[\"which_segment\"]:len(y):metadata[\"segments\"]]\n\t        groups = groups[metadata[\"which_segment\"]:len(groups):metadata[\"segments\"]]\n\t        # Initialize Stratified K Fold\n", "        skf = StratifiedKFold(n_splits=metadata[\"folds\"], shuffle=True, random_state=seed)\n\t        data_split = list(skf.split(X, y, groups))\n\t    else:\n\t        # Initialize Stratified Group K Fold\n\t        sgkf = StratifiedGroupKFold(n_splits=metadata[\"folds\"], shuffle=True, random_state=seed)\n\t        data_split = list(sgkf.split(X, y, groups))\n\t    return X, y, data_split\n\tdef initialize_subplots(metadata):\n\t    \"\"\"Creates figure with 2x2 subplots, sets axes and fig title\"\"\"\n\t    # Disable interactive mode in case plotting is not needed\n", "    plt.ioff()\n\t    fig_roc, axs = plt.subplots(nrows=2, ncols=2,\n\t                            sharex=True, sharey=True,\n\t                            figsize=(10, 10))\n\t    # Add figure title and save it to metadata\n\t    if metadata[\"scaling\"]:\n\t        figure_title = (\n\t            f'Task: {metadata[\"task\"]}, Freq band: {metadata[\"freq_band_type\"]}, '\n\t            f'Channel data normalization: {metadata[\"normalization\"]}, \\n'\n\t            f'Using one-segment: {metadata[\"one_segment_per_task\"]}, Scaling: '\n", "            f'{metadata[\"scaling\"]}, metadata[\"scaling_method\"]'\n\t        )\n\t    else:\n\t        figure_title = (\n\t            f'Task: {metadata[\"task\"]}, Band type: {metadata[\"freq_band_type\"]}, '\n\t            f'Channel data normalization: {metadata[\"normalization\"]}, \\n'\n\t            f'Using one-segment: {metadata[\"one_segment_per_task\"]}, Scaling: '\n\t            f'{metadata[\"scaling\"]}'\n\t        )\n\t    fig_roc.suptitle(figure_title)\n", "    # Add x and y labels\n\t    axs[0, 0].set(ylabel='True Positive Rate')\n\t    axs[1, 0].set(ylabel='True Positive Rate')\n\t    axs[1, 0].set(xlabel='False Positive Rate')\n\t    axs[1, 1].set(xlabel='False Positive Rate')\n\t    # Display figure if needed\n\t    if metadata[\"display_fig\"]:\n\t        plt.show(block=False)\n\t    else:\n\t        print('INFO: Figure will not be displayed.')\n", "    return fig_roc, axs, metadata\n\tdef perform_data_split(X, y, split, train_index, test_index):\n\t    \"\"\"Splits X and y data into training and testing according to the data split indexes\"\"\"\n\t    skip_split = False\n\t    # Generate train and test sets for this split\n\t    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n\t    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\t    # Scale if needed:\n\t    if metadata[\"scaling\"] and not metadata[\"normalization\"]:\n\t        scaler = metadata[\"scaling_method\"]\n", "        X_train = scaler.fit_transform(X_train)\n\t        X_test = scaler.transform(X_test)\n\t    # Control if there's only one class in a fold\n\t    if np.unique(y[test_index]).size == 1:\n\t        print(f\"WARN: Split {split+1} has only 1 class in the test set, skipping it. ####\")\n\t        skip_split = True\n\t    # Print out class balance if needed\n\t    if metadata[\"verbosity\"]:\n\t        print(f\"\\nSplit {split+1}:\")\n\t        _, counts_test = np.unique(y[test_index], return_counts=True)\n", "        _, counts_train = np.unique(y[train_index], return_counts=True)\n\t        print(f'INFO: Class balance in test set (C-P): '\n\t              f'{round(counts_test[0]/(y[test_index].size)*100)}-'\n\t              f'{round(counts_test[1]/(y[test_index].size)*100)}')\n\t        print(f'INFO: Class balance in training set (C-P): '\n\t              f'{round(counts_train[0]/(y[train_index].size)*100)}-'\n\t              f'{round(counts_train[1]/(y[train_index].size)*100)}')\n\t    return X_train, X_test, y_train, y_test, skip_split\n\tdef roc_per_clf(tprs, aucs, ax, name, clf):\n\t    \"\"\" Calculates the mean TruePositiveRate and AUC for classifier 'clf'.\n", "    Adds confidence interval of the AUC to the figure\n\t    Adds the chance plot to the figure\n\t    \"\"\"\n\t    mean_fpr = np.linspace(0, 1, 100)\n\t    mean_tpr = np.mean(tprs, axis=0)\n\t    mean_tpr[-1] = 1.0\n\t    # Calculate AUC's mean and confidence interval based on fpr and tpr and add to plot\n\t    mean_auc = round(auc(mean_fpr, mean_tpr), 3)\n\t    std_auc = round(np.std(aucs), 3)\n\t    ax.plot(mean_fpr, mean_tpr, color='tab:blue',\n", "            label=r'AUC = %0.2f $\\pm$ %0.2f' % (mean_auc, std_auc),\n\t            lw=2, alpha=.8)\n\t    # Calculate upper and lower std_dev band around mean and add to plot\n\t    std_tpr = np.std(tprs, axis=0)\n\t    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)\n\t    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)\n\t    #ax.fill_between(mean_fpr, tprs_lower, tprs_upper, color='tab:blue', alpha=.2)\n\t    ax.fill_between(mean_fpr, tprs_lower, tprs_upper, color='tab:grey', alpha=.2,\n\t                    label=r'$\\pm$ 1 std. dev.')\n\t    ax.set(xlim=[0, 1], ylim=[0, 1], title=name)\n", "    ax.legend(loc=\"lower right\", fontsize=12) \n\t    #ax.grid(True)\n\t    # Plot chance curve\n\t    ax.plot([0, 1], [0, 1], linestyle='--', lw=2, color='tab:red',\n\t            label='Chance', alpha=.3)\n\t    # Estimate confidence interval\n\t    ci_auc = round(std_auc*1.96/sqrt(folds), 3)\n\t    print(f'\\nINFO: Classifier = {clf}')\n\t    print('\\tAUC = %0.2f \\u00B1 %0.2f' % (mean_auc, ci_auc))\n\t    return mean_tpr\n", "def metrics_per_clf(sensitivity, specificity, accuracy):\n\t    \"\"\"Calculates metrics and confidence interval for each classifier\"\"\"\n\t    mean_sens = round(mean(sensitivity), 2)\n\t    ci_sens = round(stdev(sensitivity)*1.96/sqrt(folds), 2)\n\t    mean_spec = round(mean(specificity), 2)\n\t    ci_spec = round(stdev(specificity)*1.96/sqrt(folds), 2)\n\t    mean_acc = round(mean(accuracy), 2)\n\t    ci_acc = round(stdev(accuracy)*1.96/sqrt(folds), 2)\n\t    print('\\tSensitivity = %0.2f \\u00B1 %0.2f' % (mean_sens, ci_sens))\n\t    print('\\tSpecificity = %0.2f \\u00B1 %0.2f' % (mean_spec, ci_spec))\n", "    print('\\tAccuracy = %0.2f \\u00B1 %0.2f' % (mean_acc, ci_acc))\n\t    return mean_sens, ci_sens, mean_spec, ci_spec, mean_acc, ci_acc\n\tdef fit_and_plot(X, y, classifiers, data_split, metadata):\n\t    \"\"\"\n\t    Loops over all classifiers according to the data split of the CV.\n\t    Plots the split ROCs in subplots\n\t    Arguments\n\t    ---------\n\t        - X : list\n\t            Sample subjects\n", "        - y : list\n\t            Features of the samples\n\t        - classifiers :  list\n\t            List with the functions used as ML classifiers\n\t        - data_split : list\n\t            Indexes  of the Training and Testing sets for the CV splits\n\t        - metadata : dict\n\t            Object containing the parameters used in the analysis\n\t    Returns\n\t    -------\n", "         - Figure with 2x2 subplots: matplotlib plot\n\t         - metadata : dict containing df 'metrics', which includes:\n\t                - tpr_per_classifier : list\n\t                - sensitivity_per_classifier : list\n\t                - specificity_per_classifier : list\n\t                - f1_per_classifier : list\n\t    \"\"\"\n\t    # Initialize dataframe where the metrics will be stored\n\t    tpr_per_classifier = []\n\t    accuracy_per_classifier = []\n", "    ci_acc_clf = []\n\t    sensitivity_per_classifier = []\n\t    ci_sens_clf = []\n\t    specificity_per_classifier = []\n\t    ci_spec_clf = []\n\t    # Submethod 4.1 - Initialize the subplots\n\t    fig_roc, axs, metadata = initialize_subplots(metadata)\n\t    # Iterate over the classifiers to populate each subplot\n\t    for ax, (name, clf) in zip(axs.flat, classifiers):\n\t        tprs = []\n", "        aucs = []\n\t        accuracy = []\n\t        sensitivity = []\n\t        specificity = []\n\t        mean_fpr = np.linspace(0, 1, 100)\n\t        # Fit the classifiers to the split\n\t        for split, (train_index, test_index) in enumerate(data_split):\n\t            # Submethod 4.2 - Slice the X and y data according to CV's data_split\n\t            X_train, X_test, y_train, y_test, skip_split = \\\n\t                perform_data_split(X, y, split, train_index, test_index)\n", "            # Skip this split if class balance is bad\n\t            if skip_split:\n\t                continue\n\t            # Fit classifier and predict outcomes\n\t            clf.fit(X_train, y_train)\n\t            probas_ = clf.predict_proba(X_test)\n\t            y_pred = clf.predict(X_test)\n\t            # Compute ROC curve\n\t            fpr, tpr, _ = roc_curve(y_test, probas_[:, 1])\n\t            # Append the (tpr vs fpr) values interpolated over mean_fpr\n", "            tprs.append(np.interp(mean_fpr, fpr, tpr))\n\t            tprs[-1][0] = 0.0\n\t            # Calculate the AUC for this ROC\n\t            roc_auc = auc(fpr, tpr)\n\t            aucs.append(roc_auc)\n\t            # Plot the ROC for this split\n\t            ax.plot(fpr, tpr, lw=1, alpha=0.3,\n\t                    label=f'Split {split+1} (AUC = {roc_auc:.2f})')\n\t            # To not add the split AUC to legend, uncomment this: \n\t            #ax.plot(fpr, tpr, lw=1, alpha=0.3)\n", "            # Get the sensitivity, specificity and accuracy values\n\t            tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel() \n\t            sensitivity.append(tp / (tp + fn))\n\t            specificity.append(tn / (tn + fp))\n\t            accuracy_test = accuracy_score(y_test, y_pred)\n\t            accuracy.append(accuracy_test)\n\t            # Print out set's accuracy score to evaluate overfitting:\n\t            if metadata[\"verbosity\"]:\n\t                print(f\"INFO: Accuracy score in test set: {accuracy:.2f}\")\n\t                y_train_pred = clf.predict(X_train)\n", "                accuracy_train = accuracy_score(y_train, y_train_pred)\n\t                print(f\"INFO: Accuracy score in training set: {accuracy_train:.2f}\")\n\t        # Submethods 4.3 & 4.4 - Calculate means & metrics per classifier\n\t        mean_tpr = roc_per_clf(tprs, aucs, ax, name, clf)\n\t        mean_sensitivity, ci_sens, mean_specificity, ci_spec, mean_accuracy, ci_acc = metrics_per_clf(sensitivity, specificity, accuracy)\n\t        tpr_per_classifier.append(mean_tpr.T)\n\t        accuracy_per_classifier.append(mean_accuracy)\n\t        ci_acc_clf.append(ci_acc)\n\t        sensitivity_per_classifier.append(mean_sensitivity)\n\t        ci_sens_clf.append(ci_sens)\n", "        specificity_per_classifier.append(mean_specificity)\n\t        ci_spec_clf.append(ci_spec)\n\t    metrics = pd.DataFrame({\n\t                    'Classifiers': [pair[0] for pair in classifiers],\n\t                    'Accuracy': accuracy_per_classifier,\n\t                    'Accuracy_CI': ci_acc_clf,\n\t                    'Sensitivity': sensitivity_per_classifier,\n\t                    'Sensitivity_CI': ci_sens_clf,\n\t                    'Specificity': specificity_per_classifier,\n\t                    'Specificity_CI': ci_spec_clf,\n", "                    'TPR': tpr_per_classifier\n\t                    })\n\t    metadata[\"metrics\"] = metrics\n\t    return fig_roc, metadata\n\tdef plot_boxplot(metadata):\n\t    \"\"\"Plot boxplot of mean AUC, Sensitivity and Specificity and their 95% confidence intervals\"\"\"\n\t    df = metadata[\"metrics\"]\n\t   # Set up marker shapes and colors for each classifier\n\t    markers = [\"o\", \"^\", \"s\", \"d\"]\n\t    colors = [\"tab:blue\", \"tab:orange\", \"tab:green\", \"tab:red\"]\n", "    # Create subplots for each metric\n\t    fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\n\t    # Iterate over each metric\n\t    for i, metric in enumerate(['Accuracy', 'Sensitivity', 'Specificity']):\n\t        ax = axs[i]\n\t        # Iterate over each classifier\n\t        for j, clf in enumerate(df.index):\n\t            # Get the mean value and CI of the current metric for the current classifier\n\t            mean_val = df.loc[clf, metric]\n\t            ci = df.loc[clf, metric+'_CI']           \n", "            # Plot the mean value as a marker with the corresponding shape and color\n\t            ax.plot(j, mean_val, marker=markers[j], markersize=10, color=colors[j])\n\t            # Plot the CI as a vertical error bar\n\t            ax.vlines(j, mean_val - ci, mean_val + ci, color=colors[j], linewidth=2)\n\t        # Set the x-axis tick labels to be the classifier names\n\t        ax.set_xticks(np.arange(len(df.index)))\n\t        ax.set_xticklabels([])\n\t        ax.set_ylim(0,1)\n\t        # Set the y-axis label to be the current metric name\n\t        ax.set_ylabel(metric)\n", "        ax.axhline(y=0.5, color='grey', linestyle='--')\n\t    # Add a legend for the marker shapes and the corresponding classifiers\n\t    handles = []\n\t    for j, clf in enumerate(df[\"Classifiers\"]):\n\t        handle = plt.Line2D([0], [0], marker=markers[j], color='w', label=clf, markerfacecolor=colors[j], markersize=10)\n\t        handles.append(handle)\n\t    fig.legend(handles=handles, loc='center', bbox_to_anchor=(0.5, 0.05), ncol=len(classifiers))\n\t    # Adjust spacing between subplots\n\t    fig.subplots_adjust(wspace=0.3)\n\t    fig.suptitle(\"Classification metrics\")\n", "    if metadata[\"display_fig\"]:\n\t        plt.show(block=False)\n\t    else:\n\t        print('INFO: Figure will not be displayed.')\n\t    return fig\n\tdef save_figures(metadata):\n\t    \"\"\"Saves active  figure to disk\"\"\"\n\t    # Define filename\n\t    if metadata[\"normalization\"] and not metadata[\"scaling\"]:\n\t        figure_filename = f'{metadata[\"task\"]}_{metadata[\"freq_band_type\"]}_normalized_not-scaled.png'\n", "    elif not metadata[\"normalization\"] and metadata[\"scaling\"]:\n\t        figure_filename = f'{metadata[\"task\"]}_{metadata[\"freq_band_type\"]}_not-normalized_scaled.png'\n\t    elif not metadata[\"normalization\"] and not metadata[\"scaling\"]:\n\t        figure_filename = f'{metadata[\"task\"]}_{metadata[\"freq_band_type\"]}_not-normalized_not-scaled.png'\n\t    # Save the figure\n\t    metadata[\"roc-plots-filename\"] = figure_filename\n\t    fig_roc.savefig(os.path.join(figures_dir, figure_filename))\n\t    boxplot_filename = f'{metadata[\"roc-plots-filename\"][:-4]}_boxplot.png'\n\t    fig_boxplot.savefig(os.path.join(figures_dir, boxplot_filename))\n\t    print(f'INFO: Figures \"{figure_filename}\" and \"{boxplot_filename}\" have been saved to folder {figures_dir}')\n", "def save_csv(metadata):\n\t    \"\"\"Saves the classification metrics as a csv\"\"\"\n\t    csv_filename = f'{metadata[\"roc-plots-filename\"][:-4]}.csv'\n\t    csv_path = os.path.join(reports_dir, csv_filename)\n\t    df = metadata[\"metrics\"]\n\t    with open(csv_path, 'w') as file:\n\t        file.write(f'#{metadata[\"timestamp\"]}\\n')\n\t        df.to_csv(file, index=False)\n\t    print(f'INFO: CSV data with metrics \"{csv_filename}\" has been saved to folder {figures_dir}')\n\tif __name__ == \"__main__\":\n", "    # Save time of beginning of the execution to measure running time\n\t    start_time = time.time()\n\t    # 1 - Read data\n\t    handler = PickleDataHandler()\n\t    dataframe, metadata = handler.load_data()\n\t    # Define scaling methods and classifiers\n\t    scaling_methods = [StandardScaler(), MinMaxScaler(), RobustScaler()]\n\t    classifiers = [\n\t        ('Support Vector Machine', SVC(kernel='rbf', probability=True, random_state=seed)),\n\t        ('Logistic Regression', LogisticRegression(penalty='l1', solver='liblinear', random_state=seed)),\n", "        ('Random Forest', RandomForestClassifier(random_state=seed)),\n\t        ('Linear Discriminant Analysis', LinearDiscriminantAnalysis(solver='svd'))\n\t    ]\n\t    metadata[\"Classifiers\"] = classifiers\n\t    # 2 - Initialize command line arguments and save arguments to metadata\n\t    metadata, args = initialize_argparser(metadata)\n\t    # 3 - Define input data, initialize CV and get data split\n\t    X, y, data_split = initialize_cv(dataframe, metadata)\n\t    # 4 - Fit classifiers and plot\n\t    fig_roc, metadata = fit_and_plot(X, y, classifiers, data_split, metadata)\n", "    # 4.5 - Plot  boxplot\n\t    fig_boxplot = plot_boxplot(metadata)\n\t    # 5 -  Add timestamp\n\t    metadata[\"timestamp\"] = datetime.now()\n\t    # 6 - Save the figure to disk\n\t    if args.dont_save_fig:\n\t        print('INFO: Figures will not be saved to disk.')\n\t    else:\n\t        save_figures(metadata)\n\t    # 7 - Save CSV data to reports dir\n", "    save_csv(metadata)\n\t    # 8 - Export metadata\n\t    handler.export_data(dataframe, metadata)\n\t    # Calculate time that the script takes to run\n\t    execution_time = (time.time() - start_time)\n\t    print('\\n###################################################\\n')\n\t    print(f'Execution time of 03_fit_classifier_and_plot.py: {round(execution_time, 2)} seconds\\n')\n\t    print('###################################################\\n')\n"]}
{"filename": "src/analysis/05_reports_to_pdf.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tBundle up all HTMLs from the `reports_dir` into one PDF naamed 'mtbi_meeg_report.pdf'\n\tBe careful because it will overwrite files with the same name\n\t@author: Estanislao Porta\n\t# TODO: Check if filename exists, and avoid overwriting\n\t\"\"\"\n\tfrom weasyprint import HTML, CSS\n\timport os\n", "import sys\n\tSRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(SRC_DIR)\n\tfrom config_common import reports_dir, figures_dir\n\t# Get list of HTML files in directory\n\thtml_files = [os.path.join(reports_dir, f) for f in os.listdir(reports_dir) if f.endswith('.html')]\n\t# Load all HTML files and concatenate into a single HTML string\n\thtml_string = ''\n\tfor html_file in html_files:\n\t    with open(html_file, 'r') as f:\n", "        html = f.read()\n\t        if html_string:\n\t            # Add a page break before all HTML files except the first one\n\t            html_string += f'<div style=\"page-break-before: always;\"></div>{html}'\n\t        else:\n\t            html_string += html\n\t# Used to resolve relative paths from the HTMLs\n\tbase_url =f'file://{figures_dir}'\n\t# Initialize a WeasyPrint document\n\tpdf_document = HTML(string=html_string, base_url=base_url)\n", "# Define the CSS styles to apply to the PDF document\n\tcss = \"\"\"\n\timg {\n\t    max-width: 100%;\n\t    max-height: 100%;\n\t    object-fit: contain;\n\t    }\n\t    \"\"\"\n\t# Write the html into a PDF\n\tfilename='mtbi_meeg_report.pdf'\n", "pdf_document.write_pdf(os.path.join(reports_dir, filename), presentational_hints=True, stylesheets=[CSS(string=css)])\n\tprint(f\"INFO: Success! All the HTML reports from {reports_dir} have been combined into one PDF named '{filename}'\" )"]}
{"filename": "src/analysis/__init__.py", "chunked_list": []}
{"filename": "src/analysis/01_read_processed_data.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#############################\n\t# 01_read_processed_data.py #\n\t#############################\n\t@authors: Verna Heikkinen, Aino Kuusi, Estanislao Porta\n\tReads in EEG data from CSV files into a dataframe\n\tEach rows contains bandpower data for each channel and frequency band.\n\tThe dataframe and the arguments used to run the script are added to a pickle object.\n", "Arguments\n\t---------\n\t    - task : str\n\t        Each of the four tasks that have been measured for this experiment:\n\t        Eyes Closed (ec), Eyes Open (eo),\n\t        Paced Auditory Serial Addition Test 1 or 2 (PASAT_1 or PASAT_2)\n\t    - freq_band_type : str\n\t        Frequency bands used in the binning of the subject information.\n\t        Thin bands are 1hz bands from 1 to 43hz.\n\t        Wide bands are conventional Delta, Theta, Alpha, Beta, Gamma\n", "    - not_normalized : bool\n\t        Defines whether channel data is not normalized for all the channels\n\tReturns\n\t-------\n\t    - eeg_tmp_data.pickle : pickle object\n\t        Object of pickle format containing the dataframe with the data\n\t        and the metadata with the information about the arguments\n\t        used to run this script.\n\t# TODO: Add number of subjects and number of features to metadata\n\t\"\"\"\n", "import os\n\timport sys\n\timport argparse\n\timport time\n\timport re\n\timport csv\n\timport numpy as np\n\timport pandas as pd\n\tSRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(SRC_DIR)\n", "from config_common import processed_data_dir, user, host\n\tfrom config_eeg import thin_bands, wide_bands, select_task_segments, channels\n\tfrom pickle_data_handler import PickleDataHandler\n\tdef initialize_argparser_and_metadata():\n\t    \"\"\" Initialize argparser and add args to metadata.\"\"\"\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('--task', choices=['eo','ec','PASAT_1', 'PASAT_2'], help='Define the task: ec, eo, PASAT_1 or PASAT_2. Default=PASAT_2', default='PASAT_2')\n\t    parser.add_argument('--freq_band_type', choices=['thin', 'wide'], help=\"Define the frequency bands. 'thin' are 1hz bands from 1 to 43hz. 'wide' are conventional delta, theta, etc. Default: wide\", default='wide')\n\t    parser.add_argument('--not_normalized', action='store_true', help='Data will not be normalized. Default: True', default=False)\n\t    #parser.add_argument('--threads', type=int, help=\"Number of threads, using multiprocessing\", default=1) \n", "    args = parser.parse_args()\n\t    # Create dictonary with metadata information\n\t    # NOTE: It is important that it is CREATED here and not that stuff gets appended\n\t    metadata = {\"task\": args.task, \"freq_band_type\": args.freq_band_type, \"normalization\": not args.not_normalized}\n\t    # Define the number of segments per task\n\t    if metadata[\"task\"] in ('eo', 'ec'):\n\t        segments = 3\n\t    elif metadata[\"task\"] in ('PASAT_1', 'PASAT_2'):\n\t        segments = 2\n\t    metadata[\"segments\"] = segments\n", "    print('######## \\nINFO: Starting to run 01_read_processed_data.py')\n\t    # Print out the chosen configuration\n\t    if args.not_normalized:\n\t        print(f\"INFO: Reading in data from task {args.task}, using {args.freq_band_type} frequency bands. Data **will NOT** be normalized.\")\n\t    else:\n\t        print(f\"INFO: Reading in data from task '{args.task}', using '{args.freq_band_type}' frequency bands. Data **will** be normalized.\")\n\t    return metadata, args\n\tdef read_subjects():\n\t    \"\"\"\n\t    Reads in the list of subjects from file subjects.txt. Asserts format to contain two digits and then a letter P or C for Patients or Controls. \n", "    Returns\n\t    -------\n\t    - subjects: a list with all the subjects\n\t    \"\"\"\n\t     # List of extra controls, dismissed so we'd have equal number of P vs C\n\t    to_exclude = ['32C', '33C', '34C', '35C', '36C', '37C', '38C', '39C', '40C', '41C', '12P']\n\t    subject_pattern = r'^\\d{2}[PC]'\n\t    try:\n\t        with open('subjects.txt', 'r') as subjects_file:\n\t            subjects = [line.rstrip() for line in subjects_file.readlines()]\n", "            # Assert that each line has the expected format\n\t            for line in subjects:\n\t                assert re.match(subject_pattern, line), f\"Subject '{line}' does not have the expected format.\"\n\t    except FileNotFoundError as error_warning:\n\t        print(\"The file 'subjects.txt' does not exist in the current directory. The program will exit.\")\n\t        raise error_warning\n\t    # Excluse subjects with errors\n\t    for i in to_exclude:\n\t        subjects.remove(i)\n\t    return subjects\n", "def create_subjects_and_tasks(chosen_tasks, subjects):\n\t    \"\"\"\n\t    Combines the subjects and with the chosen tasks and creates a list of subjects_and_tasks\n\t    Arguments\n\t    ---------\n\t    - chosen_tasks: list of subtasks pertaining to each task\n\t    - subjects: list of all the subjects\n\t    Returns\n\t    -------\n\t    - subjects_and_tasks: a list with 2-uples formed by all the combinations of (subjects, tasks)\n", "    \"\"\"\n\t    subjects_and_tasks = [(x, y) for x in subjects for y in chosen_tasks]\n\t    print(f'INFO: There are {len(subjects_and_tasks)} subject_and_task combinations.')\n\t    return subjects_and_tasks\n\tdef read_data(subjects_and_tasks, freq_band_type, not_normalized, processed_data_dir):\n\t    \"\"\"\n\t    Read in processed bandpower data for each subject_and_tasks from files\n\t    Creates an array of np with PSD data\n\t    Arguments\n\t    ---------\n", "    - subjects_and_tasks: list of 2-uples\n\t            Contains the combinations of subjects and segments (e.g., (Subject1, Task1_segment1), (Subject1, Task1_segment2), ...)\n\t    - freq_band_type: str\n\t            Frequency bins, 'thin' or 'wide'\n\t    - not_normalized: boolean\n\t            If True, normalization of the PSD data for all channels will not be performed\n\t    - processed_data_dir: str\n\t            path to the processed data directory as defined in config_common\n\t    Returns\n\t    -----\n", "    - all_bands_vector: list of np arrays\n\t            Each row contains the PSD data (for the chosen frquency bands and for all channels) per subject_and_tasks\n\t    \"\"\"\n\t    # Initialize a list to store processed data for each unique subject+segment combination\n\t    all_bands_vectors = []\n\t    if freq_band_type == 'thin':\n\t        freqs = thin_bands\n\t    if freq_band_type == 'wide':\n\t        freqs = wide_bands\n\t    # Iterate over all combinations of (subject, subtask) and populate 'all_bands_vectors' with numpy array 'sub_bands_array' containing processed data for each subject_and_tasks\n", "    for pair in subjects_and_tasks:\n\t        # Construct the path pointing to where processed data for (subject,task) is stored\n\t        subject, task = pair[0].rstrip(), pair[1]\n\t        path_to_processed_data = os.path.join(f'{processed_data_dir}', f'sub-{subject}', 'ses-01', 'eeg', 'bandpowers', f'{freq_band_type}_{task}.csv')\n\t        # List where the read data will be added\n\t        subject_and_task_bands_list = []\n\t        # Read csv file and saves each the data to f_bands_list\n\t        with open(path_to_processed_data, 'r') as file:\n\t            reader = csv.reader(file)\n\t            for frequency_band in reader:\n", "                try:\n\t                    subject_and_task_bands_list.append([float(f) for f in frequency_band])\n\t                except ValueError as e:\n\t                    print(\"Error: Invalid data, could not convert to float\")\n\t                    raise e\n\t        # Convert list to array\n\t        if freq_band_type == 'thin':\n\t            # Thin bands should not need slicing but better safe than sorry\n\t            subject_and_task_bands_array = np.array(subject_and_task_bands_list[:len(freqs)])\n\t        else:\n", "            subject_and_task_bands_array = np.array(subject_and_task_bands_list)\n\t        # Normalize each band\n\t        if not not_normalized:\n\t            ch_tot_powers = np.sum(subject_and_task_bands_array, axis=0)\n\t            subject_and_task_bands_array = subject_and_task_bands_array / ch_tot_powers[None, :]\n\t        subject_and_task_bands_vector = np.concatenate(subject_and_task_bands_array.transpose())\n\t        # Validate subject_and_task_bands_vector length and add to matrix\n\t        assert len(subject_and_task_bands_vector) == (channels * len(freqs)), f\"Processed data for subject {subject} does not have the expected length when using {freq_band_type} frequency bands.\"\n\t        all_bands_vectors.append(subject_and_task_bands_vector)\n\t    print(f'INFO: Shape of \\'all_bands_vectors\\' is {len(all_bands_vectors)} x {len(all_bands_vectors[0])}, as expected.')\n", "    return all_bands_vectors\n\tdef create_data_frame(subjects_and_tasks, all_bands_vectors):\n\t    \"\"\"\n\t    Create a dataframe structure to be used by the model_testing and ROC_AUC.py scripts\n\t    Arguments\n\t    ---------\n\t    - all_bands_vector: list of np arrays\n\t            Each row contains the PSD data (for the chosen frquency bands and for all channels) per subject_and_tasks\n\t    - subjects_and_tasks: list of 2-uples\n\t            Contains the combinations of subjects and segments (e.g., (Subject1, Task1_segment1), (Subject1, Task1_segment2), ...) \n", "    Returns\n\t    ------\n\t    - dataframe: panda dataframe\n\t            Each row contains the subject_and_task label, the group which it belongs to, and the PSD data (for the chosen frquency bands and for all channels) per subject_and_tasks\n\t    \"\"\"\n\t    if not subjects_and_tasks:\n\t        raise ValueError(\"The list of subject-task combinations cannot be empty.\")\n\t    if len(all_bands_vectors) == 0:\n\t        raise ValueError(\"The list of PSD data cannot be empty.\")\n\t    # Create a list of indices of format 'subject_segment'\n", "    indices = [i[0].rstrip() + '_' + i[1] for i in subjects_and_tasks]\n\t    # Convert list to numpy array to dataframe\n\t    dataframe = pd.DataFrame(np.array(all_bands_vectors, dtype=object), index=indices)\n\t    groups = []\n\t    subs = []\n\t    for subject, _ in subjects_and_tasks:\n\t        subs.append(subject)\n\t        if 'P' in subject:\n\t            groups.append(1)\n\t        elif 'C' in subject:\n", "            groups.append(0)\n\t        else:\n\t            groups.append(2) # In case there is a problem\n\t    dataframe.insert(0, 'Group', groups)\n\t    dataframe.insert(1, 'Subject', subs)\n\t    return dataframe\n\tif __name__ == '__main__':\n\t    # Save time of beginning of the execution to measure running time\n\t    start_time = time.time()\n\t    # 1 - Initialize command line arguments and save arguments to metadata\n", "    metadata, args = initialize_argparser_and_metadata()\n\t    # 2 - Define subtasks according to input arguments\n\t    chosen_tasks = select_task_segments(args.task)\n\t    # 3 - Read in the list of subjects from file subjects.txt\n\t    subjects = read_subjects()\n\t    # 4 - Read in list of subjects from file and create subjects_and_tasks list\n\t    subjects_and_tasks = create_subjects_and_tasks(chosen_tasks, subjects)\n\t    # 5 - Create list: each row contains all frequency bands and all channels per subject_and_task\n\t    all_bands_vectors = read_data(subjects_and_tasks, args.freq_band_type, args.not_normalized, processed_data_dir)\n\t    # 6 - Create dataframe\n", "    dataframe = create_data_frame(subjects_and_tasks, all_bands_vectors)\n\t    # 7 - Add info to metadata\n\t    if \"k22\" in processed_data_dir:\n\t        metadata[\"dataset\"] = \"k22\"\n\t    metadata[\"user\"] = f'{user}@{host}'\n\t    metadata[\"license\"] = \"MIT License\"\n\t    # 8 - Outputs the pickle object composed by the dataframe file and metadata to be used by 02_plot_processed_data.py and 03_fit_classifier_and_plot.py\n\t    handler = PickleDataHandler()\n\t    handler.export_data(dataframe=dataframe, metadata=metadata)\n\t    # Calculate time that the script takes to run\n", "    execution_time = (time.time() - start_time)\n\t    print('\\n###################################################\\n')\n\t    print(f'Execution time of 01_read_processed_data.py is: {round(execution_time,2)} seconds\\n')\n\t    print('###################################################\\n')\n"]}
{"filename": "src/analysis/count_code_lines.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Thu Mar 23 12:39:16 2023\n\t@author: portae1\n\t\"\"\"\n\tdef count_lines_of_code(filepath):\n\t    with open(filepath, 'r') as f:\n\t        lines = f.readlines()\n\t    count_code = 0\n", "    count_comments = 0\n\t    count_docstrings = 0\n\t    in_multiline_string = False\n\t    for line in lines:\n\t        stripped_line = line.strip()\n\t        if stripped_line.startswith('\"\"\"') or stripped_line.startswith(\"'''\"):\n\t            if not in_multiline_string:\n\t                count_docstrings += 1\n\t            in_multiline_string = not in_multiline_string\n\t        elif stripped_line.startswith('#') or in_multiline_string:\n", "            count_comments += 1\n\t        elif stripped_line:\n\t            count_code += 1\n\t    return count_code, count_comments, count_docstrings\n\t# Example usage:\n\tfile_path = ['01_read_processed_data.py', '02_plot_processed_data.py', '03_fit_classifier_and_plot.py', '04_create_report.py']\n\tfor file in file_path:\n\t    num_code_lines, num_comments, num_docstrings = count_lines_of_code(file)\n\t    print(file)\n\t    print(f'Number of lines of code: {num_code_lines}')\n", "    print(f'Number of comments: {num_comments}')\n\t    print(f'Number of docstrings: {num_docstrings}')"]}
{"filename": "src/analysis/04_create_report.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#################################\n\t#    04_create_report.py        #\n\t#################################\n\t@author: Estanislao Porta\n\tCreates an HTML report with the images created in the previous step of the pipeline\n\t# TODO: Add classification metrics\n\t# TODO: If control plots are not found, text should be included, not an error?\n", "\"\"\"\n\timport os\n\timport sys\n\tSRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(SRC_DIR)\n\tfrom config_common import figures_dir, reports_dir\n\tfrom pickle_data_handler import PickleDataHandler \n\tif not os.path.isdir(reports_dir):\n\t    os.makedirs(reports_dir)\n\tdef create_report(metadata):\n", "    # Define filename & open HTML file\n\t    report_filename = f'report_{metadata[\"roc-plots-filename\"][:-4]}.html'\n\t    report_path = os.path.join(reports_dir, report_filename)\n\t    report = open(report_path, 'w')\n\t    # General header\n\t    report.write(f'''\n\t    <!DOCTYPE html>\n\t    <html>\n\t    <head>\n\t    \t<title>mTBI-EEG - Analysis</title>\n", "    </head>\n\t    <body>\n\t    \t<h1>mTBI-EEG report: {metadata[\"task\"]} - {metadata[\"freq_band_type\"]}</h1>\n\t    ''')  \n\t    if metadata[\"normalization\"] and not metadata[\"scaling\"]:\n\t        report.write('<h2>Normalized - Notq scaled</h2>')\n\t    if not metadata[\"normalization\"] and metadata[\"scaling\"]:\n\t        report.write('<h2>Not normalized - Scaled</h2>')\n\t    if not metadata[\"normalization\"] and not metadata[\"scaling\"]:\n\t        report.write('<h2>Not normalized - Not scaled</h2>') \n", "    # Include the PSD Control Plots  \n\t    if \"psd-control-plot-filename\" in metadata:\n\t        control_plots = os.path.join(figures_dir, metadata[\"psd-control-plot-filename\"])\n\t        if not os.path.isfile(control_plots):            \n\t            raise FileNotFoundError('Control plots were expected but are not found')\n\t        report.write(f'''\n\t        <h2>PSD Averages - Control plot</h1>\n\t        <p>Processed data is plotted in the figure below, to visually assess the data. The PSD for each frequency bin was averaged accross all the channels. The first subplot shows these averages per subject, enabling to identify outliers.</p>\n\t        <p>In the second subplot, the PSD for each frequency bin was averaged accross all the channels and all the subjects within each group. The standard deviation for both groups is also displayed.</p>\n\t        <img src=\"{control_plots}\" class=\"center\">\n", "        ''')\n\t    else:\n\t        print('INFO: No control plots')\n\t    # Include the ROC plots\n\t    if \"roc-plots-filename\" in metadata:\n\t        roc_plots = os.path.join(figures_dir, metadata[\"roc-plots-filename\"])\n\t        if not os.path.isfile(roc_plots):            \n\t            raise FileNotFoundError('ROC plots were expected but are not found')\n\t        report.write(f'''   \n\t        <h2>ROC Plots</h2>\n", "        <p>Processed data was analyzed using four different ML classifiers. Validation was done using Stratified KFold Cross Validation. The subplots below show the ROC curves obtained using each of the classifiers.</p>\n\t        <img src=\"{roc_plots}\" class=\"center\">\n\t        ''')\n\t    else:\n\t        raise TypeError('No ROC plots')\n\t    # Metrics section\n\t    report.write('''\n\t                 <h2>Metrics</h2>\n\t                 ''')\n\t    metrics = metadata[\"metrics\"].drop('TPR', axis=1)\n", "    report.write(metrics.to_html(index=False))\n\t    # Metadata section                     \n\t    report.write('''\n\t                 <h2>Metadata</h2>\n\t                 <ul>\n\t                 ''')\n\t    # Loop over the dictionary items and write each key-value pair in a separate row\n\t    for key, value in metadata.items():\n\t        if key == \"metrics\":\n\t            continue\n", "        report.write(f'<li><b>{key}:</b> {value}</li>\\n')\n\t    # Close the unordered list and close the body section\n\t    report.write('''\n\t        </ul>\n\t        </body>\n\t        </html>\n\t        ''')\n\t    report.close()\n\t    print(f'INFO: File \"{report_filename}\" has been created in {reports_dir}.')\n\tif __name__ == \"__main__\":\n", "    handler = PickleDataHandler()\n\t    dataframe, metadata = handler.load_data()\n\t    create_report(metadata)\n"]}
{"filename": "src/analysis/run_files.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Wed Mar 15 11:23:04 2023\n\tIt runs the scripts:\n\t    01_read_processed_data.py,\n\t    02_plot_processed_data,\n\t    03_fit_classifier_and_plot.py,\n\t    04_create_report\n\tIt will:\n", "- Read processed data for all subjects in subjects.txt\n\t- Plot control plots and save them to the 'figures_dir'\n\t- Fit classifiers, plot ROCs, and save the ROC plots and the metrics to a pickle object\n\t- Create an html report in the 'reports_dir'\n\t\"\"\"\n\timport subprocess\n\t# Define a list of tuples containing the different argument combinations to use\n\targ_sets = [\n\t#            ('--task', 'eo', '--freq_band_type', 'thin'),\n\t#            ('--task', 'ec', '--freq_band_type', 'thin'),\n", "#            ('--task', 'PASAT_1', '--freq_band_type', 'thin'),\n\t            ('--task', 'PASAT_2', '--freq_band_type', 'thin', '--not_normalized'),\n\t]\n\tfor arg_set in arg_sets:\n\t    # Call the first Python file with each set of arguments\n\t    proc1 = subprocess.run(['python3', '01_read_processed_data.py'] + list(arg_set), stdout=subprocess.PIPE)\n\t    print(proc1.stdout.decode('utf-8'))\n\t    # Call the second Python file without any arguments\n\t    proc2 = subprocess.run(['python3', '02_plot_processed_data.py'], stdout=subprocess.PIPE)\n\t    print(proc2.stdout.decode('utf-8'))\n", "    # Call the third script\n\t    proc3 = subprocess.run(['python3', '03_fit_classifier_and_plot.py', '--scaling'], stdout=subprocess.PIPE)\n\t    print(proc3.stdout.decode('utf-8'))\n\t    # Create report, no arguments\n\t    proc4 = subprocess.run(['python3', '04_create_report.py'], stdout=subprocess.PIPE)\n\t    print(proc4.stdout.decode('utf-8'))\n\tprint('Finished running for all tasks.')\n"]}
{"filename": "src/analysis/02_plot_processed_data.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\t#############################\n\t# 02_plot_processed_data.py #\n\t#############################\n\t@authors: Verna Heikkinen, Aino Kuusi, Estanislao Porta\n\tPlots the processed EEG data of the PSD intensity (averaged across all channels) vs frequency for each subject and for each group.\n\tIt is used for visual assessment of individual subjects and general group behaviour. Arguments used to run the script are added to pickle object.\n\tArguments\n", "---------\n\t    - eeg_tmp_data.pickle : pickle object\n\t        Object of pickle format containing the dataframe with the data\n\t        and the metadata with the information about the arguments\n\t        used to run this script.\n\t    - control_plot_segment : int\n\t        Define which of the segments from the task will be used for plotting. \n\t    - roi : str\n\t        Defines the Region Of Interest for more localized information (WIP - Not currently functional).\n\tReturns\n", "-------\n\t    - eeg_tmp_data.pickle : pickle object \n\t        Object of pickle format containing the dataframe with the data as well as the metadata with the information about the arguments used to run this script.\n\t# TODO: Remove hardcoded values of frequency and use from config_eeg\n\t# TODO: violin plots?\n\t# TODO: ROIs. Check this out for rois: https://www.nature.com/articles/s41598-021-02789-9\n\t\"\"\"\n\timport time\n\timport argparse\n\timport os\n", "import sys\n\timport numpy as np\n\timport pandas as pd\n\timport matplotlib.pyplot as plt\n\timport seaborn as sns\n\tSRC_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\tsys.path.append(SRC_DIR)\n\tfrom config_common import figures_dir\n\tfrom pickle_data_handler import PickleDataHandler\n\tfrom config_eeg import channels, thin_bands, wide_bands\n", "#sns.set_style()\n\tdef initialize_argparser(metadata):\n\t    \"\"\" Initialize argparser and add args to metadata.\"\"\"\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('-v', '--verbosity', action='store_true', help='Define the verbosity of the output. Default: False', default=False)\n\t    roi_areas = ['All', 'Frontal', 'Occipital', 'FTC', 'Centro-parietal']\n\t    parser.add_argument('--roi', type=str, choices=roi_areas, help='ROI areas to be plotted. Default: All', default='All')\n\t    parser.add_argument('--control_plot_segment', type=int, help='Define which number of segment to use: 1, 2, etc. Default: 1', metavar='', default=1)    \n\t    #parser.add_argument('--threads', type=int, help=\"Number of threads, using multiprocessing\", default=1) #skipped for now\n\t    args = parser.parse_args()\n", "    # Add the input arguments to the metadata dictionary\n\t    metadata[\"control_plot_segment\"] = args.control_plot_segment\n\t    if metadata[\"control_plot_segment\"] > metadata[\"segments\"]:\n\t        raise IndexError(f'List index out of range. The segment you chose is not allowed for task {metadata[\"task\"]}. Please choose a value between 1 and {metadata[\"segments\"]}.')\n\t    metadata[\"roi\"] = args.roi\n\t    return metadata\n\tdef define_freq_bands(metadata):\n\t    if metadata[\"freq_band_type\"] == 'thin':\n\t        #freqs = np.array([x for x in range(1, 43)])\n\t        freqs = np.array([bands[0] for bands in thin_bands])\n", "    elif metadata[\"freq_band_type\"] == 'wide':\n\t        #freqs = np.array([1, 3, 5.2, 7.6, 10.2, 13, 16, 19.2, 22.6, 26.2, 30, 34, 38.2]).T\n\t        freqs = np.array([bands[0] for bands in wide_bands])\n\t    return freqs\n\tdef global_averaging(df, metadata, freqs):\n\t    if df.isnull().values.any():\n\t        raise ValueError(\"Error: There is at least one NaN value.\") \n\t    global_averages = []\n\t     # Transform data to array, change to logscale and re-shape to 2D. Calculate average across all channels per subject \n\t    for idx in df.index:\n", "        subj_arr = np.array(df.loc[idx])[2:]\n\t        subj_arr = 10 * np.log10(subj_arr.astype(float))\n\t        if subj_arr.size == 0:\n\t            raise ValueError(\"Error: Empty data array.\")\n\t        else:\n\t            try:\n\t                subj_arr = np.reshape(subj_arr, (channels, freqs.size))\n\t            except ValueError as e:\n\t                print(\"Error: Data array has incorrect dimensions.\")\n\t                raise e\n", "        if metadata[\"roi\"] == 'Frontal':\n\t            subj_arr = subj_arr[0:22, :]\n\t        GA = np.mean(subj_arr, axis=0)\n\t        global_averages.append(GA)\n\t    return global_averages\n\tdef create_df_for_plotting(df, metadata, freqs, global_averages):\n\t    plot_df = pd.DataFrame(np.array(global_averages), columns=freqs)\n\t    plot_df = plot_df.set_index(df.index)\n\t    plot_df.insert(0, \"Subject\", df['Subject'])\n\t    plot_df.insert(1, \"Group\", df['Group'])\n", "    # Slice the array based on the index of the segment to plot\n\t    segment_index = metadata[\"control_plot_segment\"] - 1\n\t    plot_df = plot_df[segment_index:len(df):metadata[\"segments\"]]\n\t    return plot_df\n\tdef plot_control_figures(plot_df, metadata):\n\t    '''\n\t    Plot a figure with two subplots: one with individual patients and another with group means and SD\n\t    '''\n\t    f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n\t    #plt.style.use('seaborn-darkgrid')\n", "    figure_title = f'Average PSD over all channels vs frequency. \\nTask: {metadata[\"task\"]}, Freq band: {metadata[\"freq_band_type\"]}, Channel data normalization: {metadata[\"normalization\"]} \\nUsing segment {metadata[\"control_plot_segment\"]} out of {metadata[\"segments\"]}, Region of interest: {metadata[\"roi\"]}.'\n\t    f.suptitle('PSD data - Subjects and group averages')\n\t    ax1.set_xlim(0, freqs[-1]+2)\n\t    # Subplot 1\n\t    ax1.set_ylabel('PSD (dB)')\n\t    ax1.set_xticks(range(0, 40, 5))\n\t    ax2.set_xticks(range(0, 40, 5))\n\t    for _, row in plot_df.iterrows():\n\t        if row['Group'] == 1:\n\t            col = 'tab:red'\n", "        else:\n\t            col = 'tab:green'\n\t        data = row[2:]\n\t        data = np.array(data)\n\t        ax1.plot(freqs, data.T, color=col, alpha=0.2)\n\t        legend_elements = [plt.Line2D([0], [0], color='g', lw=1, label='Controls'),\n\t                   plt.Line2D([0], [0], color='r', lw=1, label='Patients')]\n\t        ax1.legend(handles=legend_elements)\n\t        #ax1.text(x=freqs[-1], y=data[-1], s=row['Subject'], horizontalalignment='left', size='small', color=col)\n\t    # Subplot 2\n", "    #Calculate means of each group & plot\n\t    group_means = plot_df.groupby('Group').mean(numeric_only=True)\n\t    ax2.plot(freqs, group_means.iloc[0, :], 'tab:green', linestyle='--', linewidth=1, label='Mean controls')\n\t    ax2.plot(freqs, group_means.iloc[1, :], color='tab:red', linestyle='-.', linewidth=1, label='Mean patients')\n\t    ax2.set_xlabel('Frequency (Hz)')\n\t    ax2.set_ylabel('PSD (dB)') #only if no channel scaling\n\t    ax2.legend()\n\t    # Calculate SD of each group & plot around means\n\t    group_sd = plot_df.groupby('Group').std(numeric_only=True)\n\t    c_plus = group_means.iloc[0, :] + group_sd.iloc[0, :]\n", "    c_minus = group_means.iloc[0, :] - group_sd.iloc[0, :]\n\t    ax2.fill_between(freqs, c_plus, c_minus, color='tab:green', alpha=.2, linewidth=.5)\n\t    p_plus = group_means.iloc[1, :] + group_sd.iloc[1, :]\n\t    p_minus = group_means.iloc[1, :] - group_sd.iloc[1, :]\n\t    ax2.fill_between(freqs, p_plus, p_minus, color='tab:red', alpha=.2, linewidth=.5)\n\tdef save_fig(metadata):\n\t    \"\"\"\n\t    Saves fig to disk\n\t    \"\"\"\n\t    if metadata[\"normalization\"]:\n", "        fig_filename = f'psd-control-plot_{metadata[\"task\"]}_{metadata[\"freq_band_type\"]}_normalized.png'\n\t    else:\n\t        fig_filename = f'psd-control-plot_{metadata[\"task\"]}_{metadata[\"freq_band_type\"]}_not-normalized.png'\n\t    plt.savefig(os.path.join(figures_dir, fig_filename))\n\t    metadata[\"psd-control-plot-filename\"] = fig_filename\n\t    print(f'INFO: Figure \"{fig_filename}\" has been saved to folder {figures_dir}')\n\t    return metadata\n\tif __name__ == '__main__':\n\t    # Save time of beginning of the execution to measure running time\n\t    start_time = time.time()\n", "    # Execute the submethods:\n\t    # 1 - Read data\n\t    handler = PickleDataHandler()\n\t    dataframe, metadata = handler.load_data()\n\t    # 2 - InitializeInitialize command line arguments and save arguments to metadata\n\t    metadata = initialize_argparser(metadata)\n\t    # 3 - Define Frequency bands\n\t    freqs = define_freq_bands(metadata)\n\t    # 4 - Do global averaging and ROI slicing\n\t    global_averages = global_averaging(dataframe, metadata, freqs)\n", "    # 5- Create DF for plotting\n\t    plot_df = create_df_for_plotting(dataframe, metadata, freqs, global_averages)\n\t    # 6 - Plot control plot\n\t    plot_control_figures(plot_df, metadata)\n\t    # 7 - Save active figure and add information to metadata\n\t    metadata = save_fig(metadata)\n\t    # 8 - Export pickle object\n\t    handler.export_data(dataframe, metadata)\n\t    # Calculate time that the script takes to run\n\t    execution_time = (time.time() - start_time)\n", "    print('\\n###################################################\\n')\n\t    print(f'Execution time of 02_plot_processed_data.py: {round(execution_time, 2)} seconds\\n')\n\t    print('###################################################\\n')\n"]}
{"filename": "src/analysis/03_psd_topoplots.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tPlots PSD info in an interactive manner.\n\tPlot PSDS as a topoplot:\n\t    - channelwise average PSDS\n\t    - global averages\n\tCreated on Fri Apr 14 10:15:13 2023\n\t# TODO: Refactor into modular structure\n\t@author: heikkiv\n", "\"\"\"\n\timport os\n\timport sys\n\timport mne\n\timport numpy as np\n\timport pandas as pd\n\timport h5py\n\timport matplotlib.pyplot as plt\n\tfrom mne.viz import iter_topography\n\t#from mne.time_frequency import read_spectrum\n", "parent_dir = os.path.abspath(os.path.join(os.path.dirname('src'), '..'))\n\tsys.path.append(parent_dir)\n\tfrom config_eeg import fname\n\t# COMMENT/Question: is it ok if this cannot be run from console?\n\t#read in the subjects\n\twith open('subjects.txt', 'r') as subjects_file:\n\t    subjects = [line.rstrip() for line in subjects_file.readlines()]\n\t#define task to be plotted\n\ttask = 'PASAT_run2'\n\t# Idea: store the data in a ?nested? dictionary\n", "# subj_data = {\n\t#  'task' : task name (maybe unnecessary)\n\t#  'group': patient / control\n\t#  'data' : ndarray of psds?\n\t#  'age' : int, could be added but omitted for now. \n\t# }\n\tPSD_allsubj = {}\n\tfor subject in subjects:\n\t    subject_psds = fname.psds(subject=subject, ses='01')\n\t    try:\n", "        f = h5py.File(subject_psds, 'r')\n\t    except:\n\t        print(\"Psds file corrupted or missing\")\n\t    psds_keys = list(f.keys())\n\t    psds_data = f[psds_keys[0]]\n\t    data_keys = list(psds_data)\n\t    data = dict()\n\t    freqs = np.array(psds_data['key_freqs']) #extract freq info\n\t    if 'P' in subject:\n\t        group='Patient' \n", "    elif 'C' in subject:\n\t        group='Control'\n\t    for i in data_keys:\n\t        if 'eo' in i or 'ec' in i or 'PASAT' in i:\n\t            dict_key = i.removeprefix('key_')\n\t            # Take only the first segment run of the task, for now.\n\t            if task in dict_key and dict_key.endswith('_1'): \n\t                psds = np.array(psds_data[i])\n\t                # scale to dB\n\t                psds = 20 * np.log10(psds)\n", "                #define the task name \n\t                task = dict_key.removesuffix('_2') \n\t                PSD_allsubj[subject] = {'task': task, \n\t                                        'group': group,\n\t                                        'data': psds}            \n\t    f.close()\n\t#%%Create a df from dict\n\tPSD_df = pd.DataFrame.from_dict(PSD_allsubj, orient='index')\n\t# Calculate ch-wise mean psds per group\n\tclinical_groups = PSD_df.groupby('group')\n", "group_ch_means = []\n\tnames = [] \n\tfor name, group_df in clinical_groups:\n\t    group_data = group_df['data']\n\t    Arr = np.array([i for i in group_data]) #nsubj x n_chs x n_freq\n\t    mean_data = np.mean(Arr, axis=0) #get mean data over all subjects within group\n\t    group_ch_means.append(mean_data)\n\t    names.append(name)\n\tgroup_n_mean1 = zip(names, group_ch_means)\n\tgroup_n_mean = [(name, psd_data) for name, psd_data in group_n_mean1]\n", "#read in one raw data file to get sensor location info\n\traw = mne.io.read_raw_fif(fname.clean(subject=subject, task='ec', run=1,ses='01'),\n\t                   preload=True)\n\t#%% Plotting functions and utils\n\tdef my_callback1(ax, ch_idx):\n\t    \"\"\"\n\t    This block of code is executed once you click on one of the channel axes\n\t    in the plot. To work with the viz internals, this function should only take\n\t    two parameters, the axis and the channel or data index.\n\t    \"\"\"\n", "    for name, data in group_n_mean:\n\t        ax.plot(freqs, data[ch_idx], label=name) #for all the group averages\n\t        ax.set_xlabel('Frequency (Hz)')\n\t        ax.set_ylabel('Power (dB)')\n\t        ax.legend(loc=\"upper right\")\n\tdef my_callback2(ax, ch_idx):\n\t    \"\"\"\n\t    Once clicked in the topoplot, plots cohort mean PSD with individual traces.\n\t    It does so separately for each cohort, otherwise plots become too crowded.\n\t    \"\"\"\n", "    name, group_mean = group_n_mean[i] #which group. TODO: name!\n\t    cohort_data = clinical_groups.get_group(name)\n\t    ax.plot(freqs, group_mean[ch_idx], color=colors[i], label=f'{name} mean', lw=2) #for all the group averages\n\t    ax.set_xlabel('Frequency (Hz)')\n\t    ax.set_ylabel('Power (dB)')\n\t    ax.legend(loc=\"upper right\")\n\t    for index, row in cohort_data.iterrows(): #generally it's ill-advised to loop over df rows\n\t        data = row['data']\n\t        ax.plot(freqs, data[ch_idx], color=colors[i], alpha=0.2) #for all the group averages\n\t        ax.text(90, data[ch_idx,-1], index, size='small')\n", "# Define colours\n\tprop_cycle = plt.rcParams['axes.prop_cycle']\n\tcolors = prop_cycle.by_key()['color']\n\ti=1 #zero for controls, 1 for patients\n\t#loop through all channels and create an axis for them\n\tfor ax, idx in iter_topography(raw.info,\n\t                               fig_facecolor='white',\n\t                               axis_facecolor='white',\n\t                               axis_spinecolor='white',\n\t                               on_pick=my_callback1):\n", "    ax.plot(psds[idx], color='grey') #just to show some general output for the big figure\n\tplt.gcf().suptitle(f'Power spectral densities, {task}')\n\tplt.show()"]}
{"filename": "src/other_files/04b_fooof.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tFits a FOOOF (fitting oscillations & one over f) model for PSDs.\n\tCreates alternative/additional features to channel bandpowers \n\tCreated on Fri Feb 24 12:26:23 2023\n\t@author: heikkiv\n\t\"\"\"\n\timport numpy as np\n\timport h5py \n", "import mne\n\timport argparse\n\tfrom pathlib import Path\n\tfrom fooof import FOOOF\n\timport datetime\n\timport time\n\tfrom config_eeg import fname, f_bands\n\timport sys\n\tsys.path.append('../analysis/')\n\t#from 01_read_processed_data import define_subtasks #THIS DOES NOT WORK due to number in the beginning\n", "def define_subtasks(task):\n\t    \"\"\"\n\t    Define the subtasks to be used for the analysis\n\t    Input parameters\n\t    ---------\n\t    - task: chosen task (eyes open, eyes closed, Paced Auditory Serial Addition Test 1 or PASAT 2)\n\t    Returns\n\t    -------\n\t    - chosen_tasks: The list of chosen subtasks\n\t    \"\"\"\n", "    tasks = [['ec_1', 'ec_2', 'ec_3'], \n\t             ['eo_1', 'eo_2', 'eo_3'], \n\t             ['PASAT_run1_1', 'PASAT_run1_2'], \n\t             ['PASAT_run2_1', 'PASAT_run2_2']]\n\t    # Define which files to read for each subject\n\t    if task == 'ec':\n\t        chosen_tasks = tasks[0]\n\t    elif task == 'eo':\n\t        chosen_tasks = tasks[1]\n\t    elif task == 'PASAT_1':\n", "        chosen_tasks = tasks[2]\n\t    elif task == 'PASAT_2': \n\t        chosen_tasks = tasks[3]\n\t    else:\n\t        raise(\"Incorrect task\")\n\t    return chosen_tasks\n\t# Save time of beginning of the execution to measure running time\n\tstart_time = time.time()\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n", "parser.add_argument('subject', help='The subject to process')\n\tparser.add_argument('task', help='Which measurement condition to use')\n\targs = parser.parse_args()\n\tsubject_psds = fname.psds(subject=args.subject, ses='01')\n\tf = h5py.File(subject_psds, 'r')\n\tpsds_keys = list(f.keys())\n\tpsds_data = f[psds_keys[0]]\n\tdata_keys = list(psds_data)\n\tdata = dict()\n\t# Add the data for each PSD to the dictionary 'data'\n", "for i in data_keys:\n\t    if 'eo' in i or 'ec' in i or 'PASAT' in i:\n\t        dict_key = i.removeprefix('key_')\n\t        data[dict_key]=np.array(psds_data[i])\n\tfreqs = np.array(psds_data['key_freqs'])\n\tinfo_keys = list(psds_data['key_info'])\n\tf.close()\n\t  # Calculate the average bandpower for each PSD\n\tfor data_obj in list(data.keys()):\n\t    data_bandpower =[] \n", "    for band in f_bands:\n\t        fmin, fmax = band[0], band[1]\n\t        min_index = np.argmax(freqs > fmin) - 1\n\t        max_index = np.argmax(freqs > fmax) -1\n\t        bandpower = np.trapz(data[data_obj][:, min_index: max_index], freqs[min_index: max_index], axis = 1)\n\t        data_bandpower.append(bandpower)\n\t    avg_bandpower=np.array([np.mean(power) for power in data_bandpower])\n\t    freqs=np.arange(1,90, step=1)\n\t    # Initialize a FOOOF object (Here on a rougher scale)\n\t    fm = FOOOF()\n", "    # Set the frequency range to fit the model\n\t    freq_range = [2, 80]\n\t    # Report: fit the model, print the resulting parameters, and plot the reconstruction\n\t    fm.report(freqs, avg_bandpower, freq_range)\n\tchosen_task = define_subtasks(task=args.task) #TODO: different name perhaps?\n\tspectra = data[chosen_task[0]]\n\tglobal_avg = np.mean(spectra, axis=0)  #Global characteristics OR analysis on some/all chs?\n\t# I do not yet know how I want the script to be...\n\t# Loop through everyhing or do one task only? Also where to save results?\n\t# Initialize a FOOOF object\n", "fm = FOOOF()\n\t# Set the frequency range to fit the model\n\tfreq_range = [2, 60]\n\t# Report: fit the model, print the resulting parameters, and plot the reconstruction\n\tfm.report(freqs, global_avg, freq_range)\n\t# Combine peak representations\n\tfm.plot(plot_aperiodic=True, plot_peaks='line-shade-outline', plt_log=False)\n\t# Calculate time that the script takes to run\n\texecution_time = (time.time() - start_time)\n\tprint('\\n###################################################\\n')\n", "print(f'Execution time of 04_bandpower.py is: {round(execution_time,2)} seconds\\n')\n\tprint('###################################################\\n')\n"]}
{"filename": "src/other_files/plot.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Fri Sep 16 10:28:20 2022\n\t@author: aino\n\tPlots ROI grand averages or PSDs for a task. \n\tTo run, use runscript.py\n\t\"\"\"\n\timport numpy as np\n\timport pandas as pd\n", "import matplotlib.pyplot as plt\n\timport argparse\n\tdef plot_ROI_grand_averages(df, bands, n_runs, n_channels):\n\t    \"\"\"\n\t    Plots grand averages for frontal lobe, occipital lobe and all sensors. Patients vs controls.\n\t    Parameters\n\t    ----------\n\t    df : DataFrame\n\t        Data.\n\t    bands : list\n", "        Labels for frequency bands.\n\t    n_runs : int\n\t        Number of runs per subject.\n\t    n_channels : int\n\t        Number of channels in EEG (this isn't probably needed)\n\t    Returns\n\t    -------\n\t    None.\n\t    \"\"\"\n\t    log_df = np.log10(df.iloc[:, 2:n_f_bands*n_channels+1])\n", "    # ROI total powers for each frequency band\n\t    global_tot = []\n\t    frontal_tot = []\n\t    occipital_tot = []\n\t    # Get information for each channel\n\t    for i in range(n_channels):\n\t        global_tot.append(log_df.iloc[:, 0+n_f_bands*i:n_f_bands+n_f_bands*i])\n\t        if i < 23:\n\t            frontal_tot.append(log_df.iloc[:, 0+n_f_bands*i:n_f_bands+n_f_bands*i])\n\t        if i > 54:\n", "            occipital_tot.append(log_df.iloc[:, 0+n_f_bands*i:n_f_bands+n_f_bands*i]) \n\t    # global_tot is a list on dataframes (n_f_bands x (subjects + tasks)). Each element of this list represents a single channel\n\t    global_df = np.add(global_tot[0], global_tot[1])\n\t    frontal_df = np.add(frontal_tot[0], frontal_tot[1])\n\t    occipital_df = np.add(occipital_tot[0], occipital_tot[1])\n\t    # Sum the dataframes such that we get one dataframe (n_f_bands x (subjects + tasks)) and the total bandpower for each frequency band\n\t    for i in range(n_channels-3):\n\t        global_df = np.add(global_df, global_tot[i+2])\n\t        if i < 21:\n\t            frontal_df = np.add(frontal_df, frontal_tot[i+2])\n", "        if i < 6:\n\t            occipital_df = np.add(occipital_df, occipital_tot[i+2])\n\t    # Problem: for channel 64 there are only 88 frequency bands?? \n\t    #Divide the total bandpowers by the number of channels\n\t    global_df = np.divide(global_df, 63)\n\t    frontal_df = np.divide(frontal_df, 22)\n\t    occipital_df = np.divide(occipital_df, 9)\n\t    # Insert 'Group' column\n\t    global_df.insert(0, 'Group', groups)\n\t    frontal_df.insert(0, 'Group', groups)\n", "    occipital_df.insert(0, 'Group', groups)\n\t    # Calculate the number of patients and controls\n\t    controls = len(global_df.loc[global_df['Group'] == 0])/n_runs\n\t    patients = len(global_df.loc[global_df['Group']==1])/n_runs\n\t    # Calculate and plot grand average patients vs controls \n\t    controls_total_power = np.sum(global_df.loc[global_df['Group']==0], axis = 0)\n\t    controls_average = np.divide(controls_total_power[1:n_f_bands+1], controls)\n\t    patients_total_power = np.sum(global_df.loc[global_df['Group']==1], axis = 0)    \n\t    patients_average = np.divide(patients_total_power[1:n_f_bands+1], patients)\n\t    axes[0].plot(bands, controls_average, label='Controls')\n", "    axes[0].plot(bands, patients_average, label='Patients')\n\t    axes[0].title.set_text('Global average')\n\t    axes[0].legend()\n\t    # Plot region of interest\n\t    # Occipital lobe (channels 55-64)\n\t    controls_sum_o = np.sum(occipital_df.loc[global_df['Group']==0], axis = 0)\n\t    controls_average_o = np.divide(controls_sum_o[1:n_f_bands+1], controls)\n\t    patients_sum_o = np.sum(occipital_df.loc[global_df['Group']==1], axis = 0)    \n\t    patients_average_o = np.divide(patients_sum_o[1:n_f_bands+1], patients)\n\t    axes[1].plot(bands, controls_average_o, label='Controls')\n", "    axes[1].plot(bands, patients_average_o, label='Patients')\n\t    axes[1].title.set_text('Frontal lobe')\n\t    axes[1].legend()\n\t    # Frontal lobe (channels 1-22 (?))\n\t    controls_sum_f = np.sum(frontal_df.loc[global_df['Group']==0], axis = 0)\n\t    controls_average_f = np.divide(controls_sum_f[1:n_f_bands+1], controls)\n\t    patients_sum_f = np.sum(frontal_df.loc[global_df['Group']==1], axis = 0)    \n\t    patients_average_f = np.divide(patients_sum_f[1:n_f_bands+1], patients)\n\t    axes[2].plot(bands, controls_average_f, label='Controls')\n\t    axes[2].plot(bands, patients_average_f, label='Patients')\n", "    axes[2].title.set_text('Occipital lobe')\n\t    axes[2].legend()\n\t    fig.supxlabel('Frequency (Hz)')\n\t    fig.supylabel('Normalized PSDs')\n\t    # TODO: scale the plot so that all x-axis labels are visible \n\tdef plot(df, task, bands):\n\t    \"\"\"\n\t    Plots PSDs for controls and patients\n\t    Parameters\n\t    ----------\n", "    df : DataFrame\n\t        Data.\n\t    task : str\n\t        (is this needed? probably not)\n\t    bands : str\n\t        Wide or thin bands - used to determine the number of bands\n\t    Returns\n\t    -------\n\t    None.\n\t    \"\"\"\n", "    #vectorized data back to matrix (n*m), from which we should calculate global powers\n\t    #So each df row now has [ch1_freq1, ..., ch64_freq89, ch2_freq1, ..., ch64_freq1, ...ch64_freq64] \n\t    #-> revert these\n\t    subject_array_list = [];\n\t    global_averages = [];\n\t    drop_subs=False\n\t    ROI = 'All' #One of 'All', 'Frontal', 'Occipital', 'FTC', 'Centro-parietal'\n\t    if bands == 'wide':\n\t        n_bands = 6\n\t    elif bands == 'thin':\n", "        n_bands = 89\n\t    else:\n\t        raise(\"incorrect value for --freq_bands\")\n\t    freqs = np.array([x for x in range(0,n_bands)]) #todo: pls no hardcoded values!\n\t    #check this out for rois: https://www.nature.com/articles/s41598-021-02789-9\n\t    for idx in df.index:\n\t        subj_data=df.loc[idx]\n\t        subj_arr = np.array(subj_data)[3:len(subj_data)]\n\t        subj_arr = 10*np.log10(subj_arr.astype(float))\n\t        #reshape to 2D array again: (+ change to logscale)\n", "        subj_arr = np.reshape(subj_arr, (64, n_bands)) #Rows=channels, cols=freqbands\n\t        if ROI == 'frontal': #TODO: check these channels\n\t            subj_arr = subj_arr[0:22,:]\n\t        #calculate global average power accross all chs:\n\t        GA = np.mean(subj_arr, axis=0)\n\t        global_averages.append(GA)\n\t        #TODO: same for ROIs?\n\t    df.reset_index(inplace=True)\n\t    #shoo=np.array(global_averages)\n\t    plot_df = pd.DataFrame(np.array(global_averages), columns=freqs)\n", "    plot_df.set_index(df.index)\n\t    plot_df['Group'] =  df['Group'].values\n\t    plot_df['Subject'] = df['index'].values\n\t    plot_df = plot_df.iloc[::2,:] #take every other value(=1obs. per subject)\n\t    #The following subjects have very low power in PASAT_1:\n\t    subs_to_drop=['15P', '19P', '31P', '36C', '08P', '31C']\n\t    if drop_subs:\n\t        for sub in subs_to_drop:\n\t            plot_df = plot_df.drop(plot_df[plot_df['Subject']==sub].index)\n\t    for subj in plot_df['Subject'].values: \n", "        data = plot_df.loc[lambda plot_df: plot_df['Subject']==subj]\n\t        group = int(data['Group'])\n\t        if group==1: \n\t            col='red' #change color based on clinical status\n\t        else:\n\t            col='green'\n\t        i=list(plot_df['Subject'].values).index(subj)\n\t        data=data.drop(['Group', 'Subject'], axis=1)\n\t        plt.plot(freqs, data.values.T, color=col, alpha=0.2)\n\t        plt.text(n_bands +1 ,data.values.T[-1], subj, horizontalalignment='left', size='small', color=col)\n", "    #Calculate also means of controls and patients\n\t    del plot_df['Subject']\n\t    group_means=plot_df.groupby('Group').mean()\n\t    plt.plot(freqs, group_means.iloc[0,:], 'g--', linewidth=1, label='Controls')\n\t    plt.plot(freqs, group_means.iloc[1,:], 'r-.', linewidth=1, label='Patients')\n\t    df = pd.read_csv('/net/tera2/home/aino/work/mtbi-eeg/python/analysis/dataframe.csv')\n\t    plt.xlabel('Frequency (Hz)')\n\t    plt.ylabel('PSD (dB)') #only if no channel scaling\n\t    plt.title(f'{ROI}')\n\t    plt.legend()\n", "    #Make SD plot\n\t    plt.figure()\n\t    group_sd=plot_df.groupby('Group').std()\n\t    plt.plot(freqs, group_means.iloc[0,:], 'g--', linewidth=1, label='Controls')\n\t    plt.plot(freqs, group_means.iloc[1,:], 'r-.', linewidth=1, label='Patients')\n\t    c_plus=group_means.iloc[0,:]+group_sd.iloc[0,:]\n\t    c_minus=group_means.iloc[0,:]-group_sd.iloc[0,:]\n\t    plt.fill_between(freqs, c_plus, c_minus, color='g', alpha=.2, linewidth=.5)\n\t    p_plus=group_means.iloc[1,:]+group_sd.iloc[1,:]\n\t    p_minus=group_means.iloc[1,:]-group_sd.iloc[1,:]\n", "    plt.fill_between(freqs, p_plus, p_minus, color='r', alpha=.2, linewidth=.5)\n\t    plt.xlabel('Frequency (Hz)')\n\t    plt.ylabel('PSD (dB)') #only if no channel scaling\n\t    plt.legend()\n\t# # Plot band powers for a single channel and a single subject\n\t# fig3, ax3 = plt.subplots()\n\t# sub_df =log_df.loc[log_df.index==df.index[0]]\n\t# sub_array = []# # Plot band powers for a single channel and a single subject\n\t# fig3, ax3 = plt.subplots()\n\t# sub_df =log_df.loc[log_df.index==df.index[0]]\n", "# sub_array = []\n\t# channel = 1 \n\t# for i in range(n_f_bands):\n\t#     sub_array.append(sub_df.iloc[:, channel-1+64*i])\n\t# ax3.plot(channels, pd.DataFrame(sub_array))\n\t# plt.title('Sub-'+df.index[0]+' Channel '+str(channel))\n\t# channel = 1 \n\t# for i in range(n_f_bands):\n\t#     sub_array.append(sub_df.iloc[:, channel-1+64*i])\n\t# ax3.plot(channels, pd.DataFrame(sub_array))\n", "# plt.title('Sub-'+df.index[0]+' Channel '+str(channel))\n\t#This is to be implemented\n\t# # Plot band powers for a single channel and a single subject\n\t# fig3, ax3 = plt.subplots()\n\t# sub_df =log_df.loc[log_df.index==df.index[0]]\n\t# sub_array = []\n\t# channel = 1 \n\t# for i in range(n_f_bands):\n\t#     sub_array.append(sub_df.iloc[:, channel-1+64*i])\n\t# ax3.plot(channels, pd.DataFrame(sub_array))\n", "# plt.title('Sub-'+df.index[0]+' Channel '+str(channel))\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    df = pd.read_csv('/net/tera2/home/aino/work/mtbi-eeg/python/analysis/dataframe.csv')\n\t    #parser.add_argument('--threads', type=int, help=\"Number of threads, using multiprocessing\", default=1) #skipped for now\n\t    parser.add_argument('--plots', type=str, help='ROI, PSD')\n\t    parser.add_argument('--freq_bands', type=str, help=\"wide, thin\", default='wide')\n\t    parser.add_argument('--task', type=str, help=\"ec, eo, PASAT_1 or PASAT_2\")\n\t    args = parser.parse_args()\n\t    save_folder = \"/net/tera2/home/aino/work/mtbi-eeg/python/figures\"\n", "    if args.plots == 'ROI':\n\t        subjects = df.loc[:,'Subject']\n\t        del df['Subject']\n\t        # Number of runs\n\t        if args.task == 'ec' or 'eo':\n\t            n_runs = 3\n\t        elif args.task == 'PASAT_1' or 'PASAT_2':\n\t            n_runs = 2\n\t        # Frequency band names\n\t        if args.freq_bands == 'wide':\n", "            n_f_bands = 6\n\t            bands=['delta', 'theta', 'alpha', 'beta', 'gamma', 'high gamma']\n\t        elif args.freq_bands == 'thin':\n\t            n_f_bands = 89\n\t            bands = [x for x in range(n_f_bands)]\n\t        groups = df.loc[:, 'Group']\n\t        n_channels = 64\n\t        fig, axes = plt.subplots(1,3)\n\t        plot_ROI_grand_averages(df, bands, n_runs, n_channels)\n\t        save_file = f\"{save_folder}/ROI_{args.task}_{args.freq_bands}.pdf\"\n", "        plt.savefig(fname=save_file)\n\t    #TODO: modify this so that the plots work if the frequency bands are changed\n\t    #TODO: check https://www.python-graph-gallery.com/123-highlight-a-line-in-line-plot for deviations. Construct a dataframe? Move plotting to new script entirely?\n\t    if args.plots == 'PSD':\n\t        # Change the style of plot\n\t        plt.style.use('seaborn-darkgrid')\n\t        plt.figure()\n\t        plot(df, args.task, args.freq_bands)\n\t        save_file = f\"{save_folder}/PSD_{args.task}_{args.freq_bands}.pdf\"\n\t        plt.savefig(fname=save_file)\n"]}
{"filename": "src/other_files/wilcoxon.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Tue Oct 11 12:18:46 2022\n\t@author: aino\n\tPlots histograms for each frequency band. (should these be moved to plot.py??)\n\tPerforms the Wilcoxon signed rank test. \n\t\"\"\"\n\tfrom readdata import dataframe as df\n\tfrom plot import global_df as gdf\n", "import matplotlib.pyplot as plt\n\timport seaborn as sns\n\timport pandas as pd\n\timport numpy as np\n\tfrom scipy.stats import wilcoxon\n\t#gdf = gdf.drop(['22P_PASAT_run1_2', '22P_PASAT_run1_1']) #We want matched controls and patients, 22P's control had bad data\n\t#gdf = gdf.drop(['22P_ec_1', '22P_ec_2', '22P_ec_3'])\n\t#gdf = gdf.drop(['22P_eo_1', '22P_eo_2', '22P_eo_3'])\n\tpatients = gdf.loc[gdf['Group']==1]\n\tcontrols = gdf.loc[gdf['Group']==0]\n", "plot = True\n\tdelta_p = patients.iloc[:, 1]\n\tdelta_c =controls.iloc[:, 1]\n\ttheta_p = patients.iloc[:, 2]\n\ttheta_c = controls.iloc[:, 2]\n\talpha_p = patients.iloc[:, 3]\n\talpha_c = controls.iloc[:, 3]\n\tbeta_p = patients.iloc[:, 4]\n\tbeta_c = controls.iloc[:, 4]\n\tgamma_p = patients.iloc[:, 5]\n", "gamma_c = controls.iloc[:, 5]\n\thgamma_p = patients.iloc[:, 6]\n\thgamma_c =controls.iloc[:, 6]\n\tif plot:\n\t    fig, axes = plt.subplots(2,6)\n\t    sns.histplot(delta_c, kde=True, color='g', ax = axes[0][0], bins=15)\n\t    sns.histplot(delta_p, kde=True, color='r', ax = axes[1][0], bins=15)\n\t    sns.histplot(theta_c, kde=True, color='g', ax = axes[0][1], bins=15)\n\t    sns.histplot(theta_p, kde=True, color='r', ax = axes[1][1], bins=15)\n\t    sns.histplot(alpha_c, kde=True, color='g', ax = axes[0][2], bins=15)\n", "    sns.histplot(alpha_p, kde=True, color='r', ax = axes[1][2], bins=15)\n\t    sns.histplot(beta_c, kde=True, color='g', ax = axes[0][3], bins=15)\n\t    sns.histplot(beta_p, kde=True, color='r', ax = axes[1][3], bins=15)\n\t    sns.histplot(gamma_c, kde=True, color='g', ax = axes[0][4], bins=15)\n\t    sns.histplot(gamma_p, kde=True, color='r', ax = axes[1][4], bins=15)\n\t    sns.histplot(hgamma_c, kde=True, color='g', ax = axes[0][5], bins=15)\n\t    sns.histplot(hgamma_p, kde=True, color='r', ax = axes[1][5], bins=15)\n\t    # Set labels and titles\n\t    for i in range(6):\n\t        axes[1][i].set_ylabel('')\n", "        axes[0][i].set_ylabel('')\n\t        axes[0][i].set_xlabel('')\n\t        axes[1][i].set_xlabel('')\n\t    axes[0][0].set_xlim([-1.2,0])\n\t    axes[1][0].set_xlim([-1.2, 0])\n\t    axes[0][1].set_xlim([-1.5,-0.5])\n\t    axes[1][1].set_xlim([-1.5, -0.5])\n\t    axes[0][2].set_xlim([-1.75,-0.5])\n\t    axes[1][2].set_xlim([-1.75, -0.5])\n\t    axes[0][3].set_xlim([-1.5,-0.5])\n", "    axes[1][3].set_xlim([-1.5, -0.5])\n\t    axes[0][4].set_xlim([-2.5,-1])\n\t    axes[1][4].set_xlim([-2.5, -1])\n\t    axes[0][5].set_xlim([-1.8,-0.3])\n\t    axes[1][5].set_xlim([-1.8, -0.3])\n\t    axes[0][0].set_ylabel('Controls')\n\t    axes[1][0].set_ylabel('Patients')\n\t    axes[0][0].title.set_text('Delta')\n\t    axes[0][1].title.set_text('Theta')\n\t    axes[0][2].title.set_text('Alpha')\n", "    axes[0][3].title.set_text('Beta')\n\t    axes[0][4].title.set_text('Gamma')\n\t    axes[0][5].title.set_text('High gamma')\n\t    fig.suptitle('Patients vs controls')\n\t    fig.supxlabel('Power (dB)')\n\t    fig.supylabel('Count')\n\tres_delta = wilcoxon(x=delta_p, y=delta_c)\n\tres_theta = wilcoxon(x=theta_p, y=theta_c)\n\tres_alpha = wilcoxon(x=alpha_p, y=alpha_c)\n\tres_beta = wilcoxon(x=beta_p, y=beta_c)\n", "res_gamma = wilcoxon(x=gamma_p, y= gamma_c)\n\tres_hgamma = wilcoxon(x=hgamma_p, y=hgamma_c)\n\tprint(res_delta.pvalue, res_theta.pvalue, res_alpha.pvalue, res_beta.pvalue, res_gamma.pvalue, res_hgamma.pvalue)\n"]}
{"filename": "src/other_files/check_bandpower_files_are_created_wip.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Wed Mar 29 12:20:55 2023\n\t@author: portae1\n\t\"\"\"\n\timport os.path\n\timport datetime\n\tdef is_file_recent(file_path, time_threshold):\n\t    \"\"\"\n", "    Checks if a file exists and was modified within the specified time threshold.\n\t    Parameters:\n\t    file_path (str): The path to the file to check.\n\t    time_threshold (float): The time threshold in seconds.\n\t    Returns:\n\t    bool: True if the file exists and was modified within the time threshold, False otherwise.\n\t    \"\"\"\n\t    if not os.path.exists(file_path):\n\t        return False\n\t    time_diff = datetime.datetime.now() - datetime.datetime.fromtimestamp(os.path.getmtime(file_path))\n", "    return time_diff.total_seconds() <= time_threshold\n\tif is_file_recent(\"path/to/file.txt\", time_threshold=1):\n\t    # do something with the file\n\t    pass\n\telse:\n\t    # file doesn't exist or was not modified recently\n\t    pass\n"]}
{"filename": "src/other_files/hyperparameter.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Wed Jul  6 15:49:07 2022\n\t@author: aino\n\t\"\"\"\n\timport argparse\n\tfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\n\tfrom sklearn.linear_model import LogisticRegression\n\tfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\n", "from sklearn.ensemble import RandomForestClassifier\n\tfrom sklearn.svm import SVC\n\tfrom matplotlib import pyplot as plt\n\timport numpy as np\n\tfrom readdata import dataframe\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser()\n\tparser.add_argument('--clf', type=str, help='classifier')\n\tparser.add_argument('--task', type=str, help='task')\n\tparser.add_argument('--parameters', type=dict, help='')\n", "parser.add_argument()\n\tparser.add_argument()\n\targs = parser.parse_args()\n\t# Number of random trials\n\tNUM_TRIALS = 10\n\t# Get data\n\tX, y = dataframe.iloc[:,1:dataframe.shape[1]], dataframe.loc[:, 'Group']\n\t# Set up possible values of parameters to optimize over\n\tparam_grid = {'C':[1,10,100], 'penalty': ['l1','l2']}\n\t# Model to optimize\n", "estimator = LogisticRegression(solver='liblinear')\n\t# Array to store scores\n\tnested_scores = np.zeros(NUM_TRIALS)\n\t# Nested cross validation\n\tfor i in range(NUM_TRIALS):\n\t    # Choose cross validation methods\n\t    inner_cv = StratifiedKFold(n_splits=4, shuffle=True, random_state=i)\n\t    outer_cv = StratifiedKFold(n_splits=4, shuffle=True, random_state=i)\n\t    # Nested CV with parameter optimization\n\t    clf = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=inner_cv)\n", "    nested_score = cross_val_score(estimator=estimator, X=X, y=y, cv=outer_cv)\n\t    nested_scores[i] = nested_score.mean()\n"]}
{"filename": "src/other_files/annotate_bad_channels.py", "chunked_list": ["\"\"\"\n\tThis script is used for manually annotation bad EEG channels.\n\tThe idea is to run this in an ipython console through:\n\t>>> %run annotate_bad_channels.py <subject number>\n\tThe script will load the raw data and make a plot of it. Inside the plot you\n\tcan scroll through the data and click on the channel names to mark them as bad.\n\tWhen you close the plot, the script will print out the channels you have\n\tmarked. These channels can then be added to the big `bads` list inside\n\tconfig_eeg.py.\n\t\"\"\"\n", "import argparse\n\timport mne\n\tfrom config_eeg import fname, bads\n\tfrom config_common import tasks\n\t# Deal with command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\targs = parser.parse_args()\n\traw = mne.io.read_raw_fif(fname.raw(subject=args.subject, ses='01', task=tasks[1], run=1), \n\t                          preload=True)\n", "#raw.info['bads'] = bads[args.subject]\n\traw.pick_types(meg=False, eeg=True, eog=True, ecg=True)\n\traw.filter(1, 100)\n\traw.notch_filter([50, 100])\n\traw.plot(scalings=dict(eog=100E-6, eeg=50E-6))\n\tprint(raw.info['bads'])\n"]}
{"filename": "src/other_files/dodo.py", "chunked_list": ["\"\"\"\n\tDo-it script to execute the entire pipeline using the doit tool:\n\thttp://pydoit.org\n\tAll the filenames are defined in config.py\n\t\"\"\"\n\timport sys\n\tsys.path.append('..')\n\tfrom config_eeg import fname, subjects, get_all_fnames\n\t# Configuration for the \"doit\" tool.\n\tDOIT_CONFIG = dict(\n", "    # While running scripts, output everything the script is printing to the\n\t    # screen.\n\t    verbosity=2,\n\t    # When the user executes \"doit list\", list the tasks in the order they are\n\t    # defined in this file, instead of alphabetically.\n\t    sort='definition',\n\t)\n\tdef task_filt():\n\t    \"\"\"Step 01: Perform frequency filtering\"\"\"\n\t    for subject in subjects:\n", "        yield dict(\n\t            name=f'sub-{subject:02d}',\n\t            file_dep=get_all_fnames(subject, 'raw') + ['01_freqfilt.py'],\n\t            targets=get_all_fnames(subject, 'filt'),\n\t            actions=[f'python 01_freqfilt.py {subject}'],\n\t        )\n\tdef task_ica():\n\t    \"\"\"Step 02: Remove blink (EOG) artifacts using ICA\"\"\"\n\t    for subject in subjects:\n\t        yield dict(\n", "            name=f'sub-{subject:02d}',\n\t            file_dep=(get_all_fnames(subject, 'raw', exclude=['emptyroom', 'eyesclosed']) +\n\t                      get_all_fnames(subject, 'filt', exclude=['emptyroom', 'eyesclosed']) +\n\t                      ['02_ica.py']),\n\t            targets=(get_all_fnames(subject, 'ica', exclude=['emptyroom', 'eyesclosed']) +\n\t                     get_all_fnames(subject, 'clean', exclude=['emptyroom', 'eyesclosed'])),\n\t            actions=[f'python 02_ica.py {subject}'],\n\t        )\n\tdef task_psds():\n\t    \"\"\"Step 03: Compute the Power Spectral Density (PSD) for each recording.\"\"\"\n", "    for subject in subjects:\n\t        yield dict(\n\t            name=f'sub-{subject:02d}',\n\t            file_dep=[\n\t                fname.clean(subject=subject, task='eyesopen', run=1, ses='01'),\n\t                fname.clean(subject=subject, task='eyesclosed', run=1, ses='01'),\n\t                fname.clean(subject=subject, task='pasat', run=1, ses='01'),\n\t                fname.clean(subject=subject, task='pasat', run=2, ses='01'),\n\t                '03_psds.py',\n\t            ],\n", "            targets=[fname.psds(subject=subject, ses='01')],\n\t            actions=[f'python 03_psds.py {subject}'],\n\t        )\n"]}
{"filename": "src/other_files/ica_without_ecg_ch.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tScript for handling the ICA for subjects without ECG sensor. \n\tBuilds virtual ECG chennel from magnetometers.\n\tCreated on Thu Jun 30 14:12:52 2022\n\t@author: aino\n\tRunning: \n\timport subprocess\n\tsubprocess.run('/net/tera2/home/aino/work/mtbi-eeg/python/processing/eeg/runsome.sh', shell=True)\n", "\"\"\"\n\timport argparse\n\tfrom collections import defaultdict\n\tfrom mne import Epochs\n\tfrom mne.io import read_raw_fif\n\tfrom mne.preprocessing import find_eog_events, find_ecg_events, ICA\n\tfrom mne import open_report\n\timport datetime\n\tfrom config_eeg import get_all_fnames, task_from_fname, fname, ecg_channel, ec_bads, eo_bads, pasat1_bads, pasat2_bads\n\t# Deal with command line arguments\n", "parser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n\targs = parser.parse_args()\n\t# For collecting figures for quality control\n\tfigures = defaultdict(list)\n\texclude = []\n\tall_fnames = zip(get_all_fnames(args.subject, kind='filt', exclude=exclude),\n\t                 get_all_fnames(args.subject, kind='ica', exclude=exclude),\n\t                 get_all_fnames(args.subject, kind='tsss', exclude=exclude),\n\t                 get_all_fnames(args.subject, kind='clean', exclude=exclude))\n", "for filt_fname, ica_fname, raw_fname, clean_fname in all_fnames:\n\t    task = task_from_fname(filt_fname)\n\t    raw = read_raw_fif(raw_fname, preload=True)\n\t        # Mark bad channels that were manually annotated earlier.\n\t    raw_str = str(raw_fname)\n\t    if 'task-ec' in raw_str:\n\t        raw.info['bads'] = ec_bads[args.subject]\n\t    elif 'task-eo' in raw_str:\n\t        raw.info['bads'] = eo_bads[args.subject]\n\t    elif 'task-PASAT' in raw_str and 'run-01' in raw_str:\n", "        raw.info['bads'] = pasat1_bads[args.subject]\n\t    elif 'task-PASAT' in raw_str and 'run-02' in raw_str:\n\t        raw.info['bads'] = pasat2_bads[args.subject]\n\t    # Date and time\n\t    now = datetime.datetime.now()\n\t    date_time = now.strftime('%A, %d. %B %Y %I:%M%p')\n\t    # Plot segment of raw data\n\t    figures['raw_segment'].append(raw.plot(n_channels=30, title = date_time, show=False))\n\t    # Interpolate bad channels\n\t    raw.interpolate_bads()\n", "    figures['interpolated_segment'].append(raw.plot(n_channels=30, title = date_time, show=False))\n\t    # Remove 50Hz power line noise (and the first harmonic: 100Hz)\n\t    filt = raw.notch_filter(50, picks=['eeg', 'eog', 'ecg', 'meg'])\n\t    # Apply bandpass filter\n\t    filt = raw.filter(1, 90, picks=['eeg','eog','ecg','meg'])\n\t    # Run a detection algorithm for the onsets of eye blinks (EOG) and heartbeat artefacts (ECG)\n\t    eog_events = find_eog_events(filt)\n\t    eog_epochs = Epochs(filt, eog_events, tmin=-0.5, tmax=0.5, preload=True)\n\t    ecg_events, ch, _ = find_ecg_events(filt)\n\t    ecg_epochs = Epochs(filt, ecg_events, tmin = -0.5, tmax = 0.5, preload=True)\n", "    # Perform ICA decomposition\n\t    ica = ICA(n_components=0.99, random_state=0).fit(filt)\n\t    # Find components that are likely capturing EOG artifacts\n\t    bads_eog, scores_eog = ica.find_bads_eog(eog_epochs, threshold=2.0)\n\t    # Find components that are likely capturing ECG artifacts\n\t    bads_ecg, scores_ecg = ica.find_bads_ecg(filt, method = 'correlation', threshold='auto')\n\t    #TODO: ecg_epochs????\n\t    # Remove MEG channels \n\t    raw.pick_types(meg=False, eeg=True, eog=False, stim=False, ecg=False, exclude=[])\n\t    # Mark the components for removal\n", "    ica.exclude = bads_eog + bads_ecg\n\t    ica.save(ica_fname, overwrite=True)\n\t    # Date and time\n\t    now = datetime.datetime.now()\n\t    date_time = now.strftime('%A, %d. %B %Y %I:%M%p')\n\t    # Put a whole lot of quality control figures in the HTML report.\n\t    with open_report(fname.report(subject=args.subject)) as report:\n\t         # if len(bads_eog)>0:\n\t         #     report.add_ica(ica=ica, \n\t         #                     title=f' {task}' + ' EOG', \n", "         #                     inst=filt, \n\t         #                     picks=bads_eog,\n\t         #                     eog_evoked=eog_epochs.average(),\n\t         #                     eog_scores=scores_eog,\n\t         #                     tags=(f'{task}', 'EOG', 'ICA'),\n\t         #                     replace=True\n\t         #                     )\n\t         # if len(bads_ecg)>0:\n\t         #    report.add_ica(ica=ica, \n\t         #                    title=f' {task}' + ' ECG', \n", "         #                    inst=filt, \n\t         #                    picks=bads_ecg,\n\t         #                    ecg_evoked=ecg_epochs.average(),\n\t         #                    ecg_scores=scores_ecg,\n\t         #                    tags=(f'{task}', 'ECG', 'ICA'),\n\t         #                    replace=True\n\t         #                    )\n\t          report.add_figure(\n\t              ica.plot_scores(scores_eog, exclude=bads_eog, title=date_time, show=False),\n\t              f'{task}: EOG scores', replace=True, tags=('EOG', f'{task}', 'ICA'))\n", "          report.add_figure(\n\t              ica.plot_overlay(eog_epochs.average(), title=date_time, show=False),\n\t              f'{task}: EOG overlay', replace=True, tags=(f'{task}', 'ICA', 'EOG', 'overlay'))\n\t          report.add_figure(\n\t              ica.plot_scores(scores_ecg, exclude=bads_ecg, title=date_time, show=False),\n\t              f'{task}: ECG scores', replace=True, tags=('ECG', f'{task}', 'ICA'))\n\t          report.add_figure(\n\t              ica.plot_overlay(ecg_epochs.average(), title=date_time, show=False),\n\t              f'{task}: ECG overlay', replace=True, tags=(f'{task}', 'ICA', 'ECG', 'overlay'))\n\t          if len(bads_ecg) == 1:\n", "             report.add_figure(\n\t                 ica.plot_properties(ecg_epochs, bads_ecg, show=False),\n\t                 [f'{task}: ECG Component {i:02d}' for i in bads_ecg],\n\t                 replace=True, tags=('ECG', f'{task}', 'ICA'))\n\t          elif len(bads_ecg) > 1:\n\t              report.add_figure(\n\t                ica.plot_properties(ecg_epochs, bads_ecg, show=False),\n\t                f'{task}: ECG component properties', \n\t                #captions=[f'{task}: Component {i:02d}' for i in bads_ecg],\n\t                replace=True, tags=('ECG', f'{task}', 'ICA'))\n", "          if len(bads_eog) == 1:\n\t              report.add_figure(\n\t                  ica.plot_properties(eog_epochs, bads_eog, show=False),\n\t                  [f'{task}: EOG Component {i:02d}' for i in bads_eog],\n\t                  replace=True, tags=('EOG', f'{task}', 'ICA'))\n\t          elif len(bads_eog) > 1:\n\t              report.add_figure(\n\t                  ica.plot_properties(eog_epochs, bads_eog, show=False),\n\t                  f'{task}: EOG component properties',\n\t                  #captions=[f'{task}: Component {i:02d}' for i in bads_eog],\n", "                  replace=True, tags=('EOG', f'{task}', 'ICA'))\n\t          report.save(fname.report_html(subject=args.subject),\n\t                    overwrite=True, open_browser=False)\n"]}
{"filename": "src/other_files/runscript.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Mon Jan 16 13:37:19 2023\n\t@author: aino\n\tRuns scripts readdata.py, ROC_AUC.py and plot.py with chosen arguments.\n\t\"\"\"\n\timport subprocess\n\tif __name__ == \"__main__\":\n\t    # Choose task ('ec', 'eo', 'PASAT_1', 'PASAT_2')\n", "    task = 'PASAT_2'\n\t    # Choose frequency bands ('wide', 'thin')\n\t    bands = 'thin'\n\t    # Choose classifier ('LR', 'LDA', 'SVM')\n\t    clf = 'LR'\n\t    # Choose what to plot ('PSD', 'ROI')\n\t    plots = 'PSD'\n\t    roc = False\n\t    plot = True\n\t    #TODO: what else should be possible to choose? All subjects vs matched subjects?\n", "    # Run readdata.py\n\t    subprocess.call(f\"python readdata.py --task {task} --freq_bands {bands}\", shell=True)\n\t    if roc:\n\t        # Run ROC_AUC.py\n\t        subprocess.call(f\"python ROC_AUC.py --task {task} --clf {clf}\", shell=True)\n\t    if plot:\n\t        subprocess.call(f\"python plot.py --task {task} --freq_bands {bands} --plots {plots}\", shell=True)\n"]}
{"filename": "src/other_files/00_maxfilter.py", "chunked_list": ["#!/usr/bin/env python3\n\t# -*- coding: utf-8 -*-\n\t\"\"\"\n\tCreated on Wed Jun 15 11:48:59 2022\n\t@author: heikkiv\n\tScript that applies maxfiltering on the bidsified data.\n\tDoes all tasks in a row. Based on the script by Mia Liljeström.\n\tNOTE: needs to be ran on Maxfilter computer, either manually or via SSH connection (ssh -X ypsilon).\n\t\"\"\"\n\timport subprocess\n", "import argparse\n\timport os\n\tfrom config_eeg import get_all_fnames, fname, tasks\n\t#TODO: maxfilter each task, save to bidsified. IN PROGRESS\n\t#mne.set_log_level('INFO')\n\tcross_talk = '/net/tera2/opt/neuromag/databases/ctc/ct_sparse.fif' #cross-talk correction data file\n\tcalibration = '/net/tera2/opt/neuromag/databases/sss/sss_cal.dat' #calibration datafile\n\t#Handle command line arguments\n\tparser = argparse.ArgumentParser(description=__doc__)\n\tparser.add_argument('subject', help='The subject to process')\n", "args = parser.parse_args()\n\tsubject = args.subject\n\tall_fnames = zip(\n\t    get_all_fnames(args.subject, kind='raw'), #raw data\n\t    get_all_fnames(args.subject, kind='tsss'), #maxfiltered data\n\t    get_all_fnames(args.subject, kind='tsss_log'), #log files\n\t    get_all_fnames(args.subject, kind='pos') #position file\n\t)\n\t#TODO: another solution is to use MNE version; would that be better??\n\tprint(\"Maxfiltering subject \", args.subject)\n", "for input_f, output_f, log_f, pos_f in all_fnames:\n\t    #trans_f = fname.raw(subject=subject, task=tasks[0], run=1)\n\t    trans_f = 'default'\n\t    #arguments given to maxfilter program. TODO: check these!\n\t    args = ['/neuro/bin/util/maxfilter', '-f', input_f, '-o', output_f, '-st', '-movecomp', \\\n\t            '-autobad','on', '-trans', trans_f, '-ctc', cross_talk, '-cal', calibration, \\\n\t            '-hpicons','-origin','fit','-in', '8', '-out', '3', '-frame','head', '-hp', pos_f, '-force', '-v']  \n\t    #save the error log\n\t    log_output = open(log_f, \"w\")\n\t    # run maxfilter, FIXME\n", "    subprocess.run(args=args, stdout=log_output,stderr=log_output)\n"]}
