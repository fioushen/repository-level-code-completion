{"filename": "__init__.py", "chunked_list": []}
{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "tests/common.py", "chunked_list": ["import pathlib\n\timport shutil\n\tfrom gridded_etl_tools.dataset_manager import DatasetManager\n\t#\n\t# Functions common to more than one test that can be imported with:\n\t#\n\t#     from common import *\n\t#\n\t# Or from within a subdirectory:\n\t#\n", "#     from ..common import *\n\t#\n\tdef remove_zarr_json():\n\t    \"\"\"\n\t    Remove the generated Zarr JSON\n\t    \"\"\"\n\t    for path in pathlib.Path(\".\").glob(\"*_zarr.json\"):\n\t        path.unlink(missing_ok=True)\n\t        print(f\"Cleaned up {path}\")\n\tdef remove_dask_worker_dir():\n", "    \"\"\"\n\t    Remove the Dask worker space directory\n\t    \"\"\"\n\t    dask_worker_space_path = pathlib.Path(\"dask-worker-space\")\n\t    if dask_worker_space_path.exists():\n\t        shutil.rmtree(dask_worker_space_path)\n\t        print(f\"Cleaned up {dask_worker_space_path}\")\n\tdef remove_performance_report():\n\t    \"\"\"\n\t    Remove the performance report\n", "    \"\"\"\n\t    for path in pathlib.Path(\".\").glob(\"performance_report_*.html\"):\n\t        path.unlink(missing_ok=True)\n\t        print(f\"Cleaned up {path}\")\n\tdef clean_up_input_paths(*args):\n\t    \"\"\"\n\t    Clean up hourly files and original copies in paths in `args`, which is a list of pathlib.Path objects\n\t    \"\"\"\n\t    for path in args:\n\t        if path.exists():\n", "            shutil.rmtree(path, ignore_errors=True)\n\t            print(f\"Cleaned up {path}\")\n\t        originals_path = pathlib.Path(f\"{path}_originals\")\n\t        if originals_path.exists():\n\t            shutil.rmtree(originals_path, ignore_errors=True)\n\t            print(f\"Cleaned up {originals_path}\")\n\t# Save the original IPNS publish function, so it can be mocked to force offline to True when the patched\n\t# IPNS publish is applied.\n\toriginal_ipns_publish = DatasetManager.ipns_publish\n\tdef offline_ipns_publish(self, key, cid, offline=False):\n", "    \"\"\"\n\t    A mock version of `DatasetManager.ipns_publish` which forces offline mode so tests can run faster.\n\t    \"\"\"\n\t    return original_ipns_publish(self, key, cid, offline=True)\n\tdef empty_ipns_publish(self, key, cid, offline=False):\n\t    \"\"\"\n\t    A mock version of `DatasetManager.ipns_publish` which forces offline mode so tests can run faster.\n\t    \"\"\"\n\t    return self.info(\"Skipping IPNS publish to preserve initial test dataset\")\n\t# Change the json_key used by IPNS publish to clearly mark the dataset as a test in your key list\n", "# This will allow other tests to reference the test dataset and prevent mixups with production data\n\toriginal_json_key = DatasetManager.json_key\n\tdef patched_json_key(self):\n\t    return f\"{self.name()}-{self.temporal_resolution()}_test_initial\"\n\toriginal_zarr_json_path = DatasetManager.zarr_json_path\n\tdef patched_zarr_json_path(self):\n\t    return pathlib.Path(\".\") / f\"{self.name()}_zarr.json\"\n\toriginal_root_stac_catalog = DatasetManager.default_root_stac_catalog\n\tdef patched_root_stac_catalog(self):\n\t    return {\n", "        \"id\": f\"{self.host_organization()}_data_catalog_test\",\n\t        \"type\": \"Catalog\",\n\t        \"title\": f\"{self.host_organization()} Data Catalog - test\",\n\t        \"stac_version\": \"1.0.0\",\n\t        \"description\": f\"This catalog contains all the data uploaded by \\\n\t            {self.host_organization()} that has been issued STAC-compliant metadata. \\\n\t            The catalogs and collections describe single providers. Each may contain one or multiple datasets. \\\n\t            Each individual dataset has been documented as STAC Items.\"\n\t        }\n"]}
{"filename": "tests/test_log.py", "chunked_list": ["import os\n\timport logging\n\timport glob\n\timport pytest\n\timport pathlib\n\tfrom examples.managers.chirps import CHIRPSFinal25\n\t@pytest.fixture(scope=\"module\", autouse=True)\n\tdef teardown():\n\t    # Using yield will let the test code run first.\n\t    yield\n", "    # Then, delete any log files that were created.\n\t    for path in glob.glob(\"logs/*.log\"):\n\t        os.remove(path)\n\tdef test_log():\n\t    \"\"\"\n\t    Test that logs are being created at the correct paths in the correct format. Test that multiple objects are not conflicting or\n\t    creating unnecessary duplicate log entries.\n\t    \"\"\"\n\t    # Create and log test statements in a ClimateSet\n\t    python_module_statement = \"<Python module log statement>\"\n", "    manager_class_method_statement = \"<Manager class method log statement>\"\n\t    manager = CHIRPSFinal25(console_log=True, global_log_level=logging.DEBUG)\n\t    info_log_handler = manager.log_to_file()\n\t    debug_log_handler = manager.log_to_file(level=logging.DEBUG)\n\t    # Make sure the level of the root logger is DEBUG\n\t    assert logging.getLogger().level == logging.DEBUG\n\t    # Check that INFO and DEBUG statements are being created and written correctly\n\t    for level in (logging.INFO, logging.DEBUG):\n\t        logging.getLogger().log(level, python_module_statement)\n\t        manager.log(manager_class_method_statement, level=level)\n", "        assert manager.default_log_path(level).exists()\n\t        with open(manager.default_log_path(level)) as log:\n\t            python_module_line, manager_class_method_line = log.readlines()[-2:]\n\t            assert python_module_line.strip().endswith(python_module_statement)\n\t            assert manager_class_method_line.strip().endswith(manager_class_method_statement)\n\t            assert logging.getLevelName(level) in manager_class_method_line\n\t    # Create a new ClimateSet for testing whether multiple objects is causing improper logging\n\t    extra_manager = CHIRPSFinal25(console_log=False, global_log_level=logging.DEBUG)\n\t    extra_handler = extra_manager.log_to_file()\n\t    # The handler just added should be the same handler added to the first manager because it is the same path. This check\n", "    # will make sure a redundant handler isn't being created and writing double log statements.\n\t    assert extra_handler == info_log_handler\n\t    # Start another log at a new path. This one should actually create a new handler.\n\t    extra_log_path = pathlib.Path(\"test.log\")\n\t    new_handler = extra_manager.log_to_file(extra_log_path)\n\t    assert extra_log_path.exists()\n\t    assert new_handler != info_log_handler\n\t    # The file handlers should be removed manually, otherwise they will continue to log the rest of the test suite.\n\t    logging.getLogger().removeHandler(info_log_handler)\n\t    logging.getLogger().removeHandler(debug_log_handler)\n"]}
{"filename": "tests/conftest.py", "chunked_list": ["import pytest\n\timport json\n\t#\n\t# Pytest fixtures, automatic fixtures, and plugins that will load automatically for the entire suite of tests.\n\t#\n\t# See the pytest_addoption notes for how to avoid option name conflicts.\n\t#\n\tdef pytest_addoption(parser):\n\t    \"\"\"\n\t    Automatically run by pytest at invocation. These options can be passed on the command line and will be forwarded\n", "    to all functions that include `requests` as a parameter and then can be accessed as `requests.config.option.[NAME]`.\n\t    Options are global whether they are defined in the root tests/ directory or in a subdirectory like tests/era5.\n\t    Therefore, option names in era5/conftest.py and prism_zarr/conftest.py cannot be the same.\n\t    For example, if you wanted an option like \"time_chunk\", it would either have to be defined here once and apply to\n\t    both ERA5 and PRISM or would have to have to be defined with a different name in each, like \"era5_time_chunk\" and\n\t    \"prism_time_chunk\".\n\t    Per subdirectory addoptions are not supported:\n\t    https://github.com/pytest-dev/pytest/issues/7974\n\t    Neither are per subdirectory INI files:\n\t    https://github.com/pytest-dev/pytest/discussions/7732\n", "    \"\"\"\n\t    # Remove pass statement and add global command line flags here\n\t    pass\n\t@pytest.fixture\n\tdef create_heads_file_for_testing(heads_path):\n\t    \"\"\"\n\t    Create the heads file only if it doesn't exist\n\t    \"\"\"\n\t    if not heads_path.exists():\n\t        with open(heads_path, \"w\") as heads:\n", "            json.dump({}, heads)\n\t        print(f\"Created empty heads JSON at {heads_path}\")\n\t    else:\n\t        print(f\"Found existing heads JSON at {heads_path}\")\n"]}
{"filename": "tests/chirps/test_chirps.py", "chunked_list": ["### [test_chirps.py]\n\t###\n\t### included automatically in the run. The test functions check if CHIRPS data is being generated\n\t### correctly by the current state of the repository using test data saved in data/ that is\n\t### checked into the repository.\n\t###\n\t### With a running IPFS daemon and Python virtual environment set up as described in\n\t### doc/set_up_python_virtual_environment.md (including all CHIRPS specific dependencies), the tests\n\t### should complete successfully from the tests/ directory.\n\t###\n", "###     $ pytest CHIRPS/\n\t###\n\t### Or just\n\t###\n\t###     $ pytest\n\t###\n\t### When `pytest -s` is run from the root tests/ directory, the test functions in this file will be\n\t### The test will generate a heads.json and input directories in the root defined in ./conftest.py. The input\n\t### NCs are already checked into that root. These NCs are copied into the generated input directories to\n\t### simulate downloading them from a source. The input directories are passed into the CHIRPS instance. During\n", "### the course of running the manager, hourly files are generated in the input directories and originals are\n\t### copied to the \"_originals\" directory. After the test completes, the \"teardown_module\" function runs automatically\n\t### to erase everything that was generated (everything in the default root except for the input NCs).\n\timport os\n\timport datetime\n\timport pytest\n\timport xarray\n\timport shutil\n\timport psutil\n\timport multiprocessing\n", "from ..common import *  # import local functions common to all pytests\n\t@pytest.fixture\n\tdef create_input_directories(initial_input_path, appended_input_path):\n\t    \"\"\"\n\t    The testing directories for initial, append and insert will get created before each run\n\t    \"\"\"\n\t    for path in (initial_input_path, appended_input_path):\n\t        if not path.exists():\n\t            os.makedirs(path, 0o755, True)\n\t            print(f\"Created {path} for testing\")\n", "        else:\n\t            print(f\"Found existing {path}\")\n\t@pytest.fixture\n\tdef simulate_file_download(root, initial_input_path, appended_input_path):\n\t    \"\"\"\n\t    Copies the default input NCs into the default input paths, simulating a download of original data. Later, the input directories will be\n\t    deleted during clean up.\n\t    \"\"\"\n\t    # for chirps_init_fil in root.glob(\"*initial*\"):\n\t    #     shutil.copy(chirps_init_fil, initial_input_path)\n", "    shutil.copy(root / \"chirps_initial_dataset.nc\", initial_input_path)\n\t    shutil.copy(root / \"chirps_append_subset_0.nc\", appended_input_path)\n\t    shutil.copy(root / \"chirps_append_subset_1.nc\", appended_input_path)\n\t    print(\"Simulated downloading input files\")\n\t@pytest.fixture(scope='function', autouse=True)\n\tdef setup_and_teardown_per_test(mocker, request, initial_input_path, appended_input_path,\n\t                                create_heads_file_for_testing, create_input_directories, simulate_file_download):\n\t    \"\"\"\n\t    Call the setup functions first, in a chain ending with `simulate_file_download`.\n\t    Next run the test in question. Finally, remove generated inputs afterwards, even if the test fails.\n", "    \"\"\"\n\t    # Force ipns_publish to use offline mode to make tests run faster\n\t    mocker.patch(\"gridded_etl_tools.dataset_manager.DatasetManager.json_key\", patched_json_key)\n\t    mocker.patch(\"examples.managers.chirps.CHIRPS.collection\", return_value=\"CHIRPS_test\")\n\t    mocker.patch(\"gridded_etl_tools.dataset_manager.DatasetManager.zarr_json_path\", patched_zarr_json_path)\n\t    mocker.patch(\"gridded_etl_tools.dataset_manager.DatasetManager.default_root_stac_catalog\", patched_root_stac_catalog)\n\t    mocker.patch(\"gridded_etl_tools.dataset_manager.DatasetManager.ipns_publish\", empty_ipns_publish)\n\t    yield  # run the tests first\n\t    # delete temp files\n\t    remove_zarr_json()\n", "    remove_dask_worker_dir()\n\t    remove_performance_report()\n\t    # now clean up the various files created for each test\n\t    clean_up_input_paths(initial_input_path, appended_input_path)\n\t@pytest.fixture(scope='module', autouse=True)\n\tdef teardown_module(request, heads_path):\n\t    \"\"\"\n\t    Remove the heads file at the end of all tests\n\t    \"\"\"\n\t    def test_clean():\n", "        if heads_path.exists():\n\t            os.remove(heads_path)\n\t            print(f\"Cleaned up {heads_path}\")\n\t    request.addfinalizer(test_clean)\n\t@pytest.mark.order(1)\n\tdef test_initial(request, mocker, manager_class, heads_path, test_chunks, initial_input_path, root):\n\t    \"\"\"\n\t    Test a parse of CHIRPS data. This function is run automatically by pytest because the function name starts with \"test_\".\n\t    \"\"\"\n\t    # Get the CHIRPS manager with rebuild set\n", "    manager = manager_class(\n\t        custom_input_path=initial_input_path,\n\t        rebuild=True,\n\t        store='ipld')\n\t    manager.HASH_HEADS_PATH = heads_path\n\t    # Remove IPNS publish mocker on the first run of the dataset, so it lives as \"dataset_test\" in your IPNS registry\n\t    if manager.json_key() not in manager.ipns_key_list():\n\t        mocker.patch(\"gridded_etl_tools.dataset_manager.DatasetManager.ipns_publish\", offline_ipns_publish)\n\t    # Overriding the default time chunk to enable testing chunking with a smaller set of times\n\t    manager.requested_dask_chunks = test_chunks\n", "    manager.requested_zarr_chunks = test_chunks\n\t    # run ETL\n\t    manager.transform()\n\t    manager.parse()\n\t    manager.publish_metadata()\n\t    manager.zarr_json_path().unlink(missing_ok=True)\n\t    # Open the head with ipldstore + xarray.open_zarr and compare two data points with the same data points in a local GRIB file\n\t    generated_dataset = manager.zarr_hash_to_dataset(manager.latest_hash())\n\t    lat, lon = 14.625, -91.375\n\t    # Validate one row of data\n", "    output_value = generated_dataset[manager.data_var()].sel(\n\t        latitude=lat, longitude=lon, time=datetime.datetime(2003, 5, 12), method='nearest').values\n\t    original_dataset = xarray.open_dataset(root / \"chirps_initial_dataset.nc\", engine=\"netcdf4\")\n\t    orig_data_var = [key for key in original_dataset.data_vars][0]\n\t    original_value = original_dataset[orig_data_var].sel(\n\t        latitude=lat, longitude=lon, time=datetime.datetime(2003, 5, 12)).values\n\t    assert output_value == original_value\n\tdef test_append_only(mocker, request, manager_class, heads_path, test_chunks, appended_input_path, root):\n\t    \"\"\"\n\t    Test an update of chirps data by adding new data to the end of existing data.\n", "    \"\"\"\n\t    # Get a non-rebuild manager for testing append\n\t    manager = manager_class(custom_input_path=appended_input_path, store='ipld')\n\t    manager.HASH_HEADS_PATH = heads_path\n\t    manager.zarr_chunks = {}\n\t    # Overriding the default time chunk to enable testing chunking with a smaller set of times\n\t    manager.requested_dask_chunks = test_chunks\n\t    manager.requested_zarr_chunks = test_chunks\n\t    # run ETL\n\t    manager.transform()\n", "    manager.parse()\n\t    manager.publish_metadata()\n\t    # Open the head with ipldstore + xarray.open_zarr and compare two data points with the same data points in a local GRIB file\n\t    generated_dataset = manager.zarr_hash_to_dataset(manager.dataset_hash)\n\t    lat, lon = 14.625, -91.375\n\t    # Validate one row of data\n\t    output_value = generated_dataset[manager.data_var()].sel(\n\t        latitude=lat, longitude=lon, time=datetime.datetime(2003, 5, 25)).values\n\t    original_dataset = xarray.open_dataset(root / \"chirps_append_subset_0.nc\", engine=\"netcdf4\")\n\t    orig_data_var = [key for key in original_dataset.data_vars][0]\n", "    original_value = original_dataset[orig_data_var].sel(\n\t        latitude=lat, longitude=lon, time=datetime.datetime(2003, 5, 25)).values\n\t    assert output_value == original_value\n\tdef test_metadata(manager_class, heads_path):\n\t    \"\"\"\n\t    Test an update of CHIRPS metadata.\n\t    This function will only work after the test dataset's metadata has been populated into IPFS and the IPNS key list.\n\t    \"\"\"\n\t    # Get a non-rebuild manager for testing metadata creation\n\t    manager = manager_class(store='ipld')\n", "    manager.HASH_HEADS_PATH = heads_path\n\t    try:\n\t        manager.publish_metadata()\n\t    except Exception:\n\t        manager.fail(\"Metadata update failed\")\n\tdef test_thread_count(mocker, manager_class):\n\t    \"\"\"\n\t    Test if the thread count is the correct ratio to RAM size.\n\t    \"\"\"\n\t    # Create a fake return object for `psutil.virtual_memory` that will only contain the \"total\" field.\n", "    class MockMemoryStats:\n\t        pass\n\t    mock_vm_stats = MockMemoryStats()\n\t    # Test if 256GB RAM + 32 CPU == 24 threads\n\t    mock_vm_stats.total = 256 * 1000000000\n\t    mocker.patch(\"multiprocessing.cpu_count\", return_value=32)\n\t    mocker.patch(\"psutil.virtual_memory\", return_value=mock_vm_stats)\n\t    manager = manager_class()\n\t    assert(manager.dask_num_threads == 24)\n\t    # Test if 128GB RAM + 32 CPU == 12 threads\n", "    mock_vm_stats.total = 128 * 1000000000\n\t    mocker.patch(\"multiprocessing.cpu_count\", return_value=32)\n\t    mocker.patch(\"psutil.virtual_memory\", return_value=mock_vm_stats)\n\t    manager = manager_class()\n\t    assert(manager.dask_num_threads == 12)\n\t    # Test if 256GB RAM + 16 CPU == 16 threads\n\t    mock_vm_stats.total = 256 * 1000000000\n\t    mocker.patch(\"multiprocessing.cpu_count\", return_value=16)\n\t    mocker.patch(\"psutil.virtual_memory\", return_value=mock_vm_stats)\n\t    manager = manager_class()\n", "    assert(manager.dask_num_threads == 16)\n\t    # Test the edge case of targeting less than one CPU == 1 thread\n\t    mock_vm_stats.total = 8 * 1000000000\n\t    mocker.patch(\"multiprocessing.cpu_count\", return_value=8)\n\t    mocker.patch(\"psutil.virtual_memory\", return_value=mock_vm_stats)\n\t    manager = manager_class()\n\t    assert(manager.dask_num_threads == 1)\n\t    # Test the edge case of one CPU == 1 thread\n\t    mock_vm_stats.total = 32 * 1000000000\n\t    mocker.patch(\"multiprocessing.cpu_count\", return_value=1)\n", "    mocker.patch(\"psutil.virtual_memory\", return_value=mock_vm_stats)\n\t    manager = manager_class()\n\t    assert(manager.dask_num_threads == 1)\n"]}
{"filename": "tests/chirps/__init__.py", "chunked_list": []}
{"filename": "tests/chirps/conftest.py", "chunked_list": ["import pytest\n\timport pathlib\n\tfrom examples.managers.chirps import CHIRPSFinal25\n\t#\n\t# Configuration fixtures defined here will be automatically loaded and available to tests in this directory\n\t#\n\t@pytest.fixture(scope=\"module\")\n\tdef root():\n\t    \"\"\"\n\t    Directory relative to tests/ where input GRIBs are and temporary input will be generated\n", "    \"\"\"\n\t    return pathlib.Path(__file__).parent / \"data\"\n\t@pytest.fixture(scope='module')\n\tdef heads_path(root):\n\t    \"\"\"\n\t    A local heads file for use during testing\n\t    \"\"\"\n\t    return root / \"heads.json\"\n\t@pytest.fixture\n\tdef initial_input_path(root):\n", "    \"\"\"\n\t    Paths where test_initial input will be generated\n\t    \"\"\"\n\t    return root / pathlib.Path(\"chirps_initial_input\")\n\t@pytest.fixture\n\tdef appended_input_path(root):\n\t    return root / pathlib.Path(\"chirps_appended_input\")\n\t@pytest.fixture\n\tdef manager_class():\n\t    \"\"\"\n", "    etls.managers.CHIRPSFinal25 child to run tests with\n\t    \"\"\"\n\t    return CHIRPSFinal25\n\t@pytest.fixture\n\tdef test_chunks():\n\t    \"\"\"\n\t    Time chunk value to use for tests instead of CHIRPS default\n\t    \"\"\"\n\t    return {\"time\": 50, \"latitude\": 40, \"longitude\": 40}\n"]}
{"filename": "gridded_etl_tools/dataset_manager.py", "chunked_list": ["# This is necessary for referencing types that aren't fully imported yet. See https://peps.python.org/pep-0563/\n\tfrom __future__ import annotations\n\timport sys\n\timport logging\n\timport multiprocessing\n\timport multiprocessing.pool\n\timport argparse\n\timport datetime\n\timport psutil\n\tfrom .utils.logging import Logging\n", "from .utils.zarr_methods import Publish\n\tfrom .utils.ipfs import IPFS\n\tfrom .utils.store import Local, IPLD, S3\n\tfrom abc import abstractmethod, ABC\n\tfrom collections.abc import Iterator\n\tfrom typing import Optional\n\tclass DatasetManager(Logging, Publish, ABC, IPFS):\n\t    \"\"\"\n\t    This is a base class for data parsers. It is intended to be inherited and implemented by child classes specific to\n\t    each data source.\n", "    It is the base class for any climate data set published in a format that is compatible with being opened in `xarray` and\n\t    transformed into a Zarr. Usable formats so far include netCDF and GRIB2.\n\t    Sets in this category include CHIRPS,CPC,ERA5,VHI,and RTMA.\n\t    For example,for data sourced from CHIRPS,there is a CHIRPS general class that implements most of CHIRPS parsing,\n\t    and further inheriting that class is a fully implemented CHIRPS05 class which updates,parses,and verifies CHIRPS .05 data\n\t    \"\"\"\n\t    SPAN_HOURLY = \"hourly\"\n\t    SPAN_DAILY = \"daily\"\n\t    SPAN_WEEKLY = \"weekly\"\n\t    SPAN_MONTHLY = \"monthly\"\n", "    SPAN_YEARLY = \"yearly\"\n\t    SPAN_SEASONAL = \"seasonal\"\n\t    DATE_FORMAT_FOLDER = \"%Y%m%d\"\n\t    DATE_HOURLY_FORMAT_FOLDER = \"%Y%m%d%H\"\n\t    DATE_FORMAT_METADATA = \"%Y/%m/%d\"\n\t    def __init__(\n\t        self,\n\t        requested_dask_chunks,\n\t        requested_zarr_chunks,\n\t        requested_ipfs_chunker=None,\n", "        rebuild_requested=False,\n\t        custom_output_path=None,\n\t        custom_latest_hash=None,\n\t        custom_input_path=None,\n\t        console_log=True,\n\t        global_log_level=logging.DEBUG,\n\t        store=None,\n\t        s3_bucket_name=None,\n\t        allow_overwrite=False,\n\t        ipfs_host=\"http://127.0.0.1:5001\",\n", "        dask_dashboard_address: str = \"127.0.0.1:8787\",\n\t        write_local_zarr_jsons: bool = False,\n\t        read_local_zarr_jsons: bool = False,\n\t        skip_prepare_input_files: bool = False,\n\t        *args,\n\t        **kwargs,\n\t    ):\n\t        \"\"\"\n\t        Set member variables to defaults. Setup logging to console and any other requested logs.\n\t        Parameters\n", "        ----------\n\t        ipfs_host : str, optional\n\t            The address of the IPFS HTTP API to use for IPFS operations\n\t        rebuild_requested : bool, optional\n\t            Sets `DatasetManager.rebuild_requested`. If this parameter is set, the manager requests and parses all available data from beginning\n\t            to end.\n\t        custom_output_path : str, optional\n\t            Overrides the default path returned by `Convenience.output_path`\n\t        custom_latest_hash : str, optional\n\t            Overrides the default hash lookup defined in `IPFS.latest_hash`\n", "        custom_input_path : str, optional\n\t            A path to use for input files\n\t        console_log : bool, optional\n\t            Enable logging `logging.INFO` level and higher statements to console. For more customization, see `DatasetManager.log_to_console`\n\t        global_log_level : str, optional\n\t            The root logger `logger.getLogger()` will be set to this level. Recommended to be `logging.DEBUG`, so all logging\n\t            statements will be generated and then logging handlers can decide what to do with them.\n\t        store : str | None\n\t            A string indicating the type of filestore to use (one of, \"local\", \"ipld\" or \"s3\"). A corresponding store object will be initialized.\n\t            If `None`, the store is left unset and the default store interface defined in `Attributes.store` (local) is returned when the property is\n", "            accessed. If using S3, the environment variables `AWS_ACCESS_KEY_ID`and `AWS_SECRET_ACCESS_KEY` must be specified\n\t            in the ~/.aws/credentials file or set manually.\n\t        s3_bucket_name : str\n\t            Name of the S3 bucket where this dataset's Zarrs are stored. Only used if \"s3\" store is used.\n\t        allow_overwrite : bool\n\t            Unless this is set to `True`, inserting or overwriting data for dates before the dataset's current end date will fail with a\n\t            warning message.\n\t        \"\"\"\n\t        # call IPFS init\n\t        super().__init__(host=ipfs_host)\n", "        # Set member variable defaults\n\t        self.new_files = []\n\t        self.custom_output_path = custom_output_path\n\t        self.custom_latest_hash = custom_latest_hash\n\t        self.custom_input_path = custom_input_path\n\t        self.rebuild_requested = rebuild_requested\n\t        # Create certain paramters for development and debugging of certain dataset. All default to False.\n\t        self.write_local_zarr_jsons = write_local_zarr_jsons\n\t        self.read_local_zarr_jsons = read_local_zarr_jsons\n\t        self.skip_prepare_input_files = skip_prepare_input_files\n", "        # Create a store object based on the passed store string. If `None`, treat as \"local\". If any string other than \"local\", \"ipld\", or \"s3\" is\n\t        # passed, raise a `ValueError`.\n\t        if store is None or store == \"local\":\n\t            self.store = Local(self)\n\t        elif store == \"ipld\":\n\t            self.store = IPLD(self)\n\t        elif store == \"s3\":\n\t            self.store = S3(self, s3_bucket_name)\n\t        else:\n\t            raise ValueError(\"Store must be one of 'local', 'ipld', or 's3'\")\n", "        # Assign the allow overwrite flag. The value should always be either `True` or `False`.\n\t        # Always allow overwrites if IPLD for backwards compatibility\n\t        self.overwrite_allowed = allow_overwrite or isinstance(self.store, IPLD)\n\t        # Print log statements to console by default\n\t        if console_log:\n\t            self.log_to_console()\n\t        # Set the logging level of logger.getLogger(), which is the logging module's root logger and will control the level of log statements\n\t        # that are enabled globally. If this is set to `logging.DEBUG`, all log statements will be enabled by default and will be forwarded to\n\t        # handlers set by either `logging.Logger.addHandler`, `DatasetManager.log_to_file`, or `DatasetManager.log_to_console`.\n\t        logging.getLogger().setLevel(global_log_level)\n", "        # Add a custom exception handler that will print the traceback to loggers\n\t        sys.excepthook = self.log_except_hook\n\t        # set chunk sizes (usually specified in the ETL manager class init)\n\t        self.requested_dask_chunks = requested_dask_chunks\n\t        self.requested_zarr_chunks = requested_zarr_chunks\n\t        self.requested_ipfs_chunker = requested_ipfs_chunker\n\t        # set the dask dashboard address. Defaults to 127.0.0.1:8787 so it's only findable on the local machine\n\t        self.dask_dashboard_address = dask_dashboard_address\n\t        # Dask distributed configuration defaults, mostly related to memory usage\n\t        self.dask_scheduler_worker_saturation = 1.2\n", "        self.dask_worker_mem_target = 0.65\n\t        self.dask_worker_mem_spill = 0.65\n\t        self.dask_worker_mem_pause = 0.92\n\t        self.dask_worker_mem_terminate = 0.98\n\t        # Usually set to 1 to avoid data transfer between workers\n\t        self.dask_num_workers = 1\n\t        # Each thread will use a CPU if self.dask_num_workers is 1. The target ratio is 3 threads per 32 GB RAM. If there are not enough cores\n\t        # available to use the target number of threads, use the number of available cores. If the target thread count is less than one, set it\n\t        # to 1.\n\t        target_ratio = 3 / 32\n", "        total_memory_gb = psutil.virtual_memory().total / 1000000000\n\t        target_thread_count = int(target_ratio * total_memory_gb)\n\t        if target_thread_count > multiprocessing.cpu_count():\n\t            self.dask_num_threads = multiprocessing.cpu_count()\n\t        elif target_thread_count < 1:\n\t            self.dask_num_threads = 1\n\t        else:\n\t            self.dask_num_threads = target_thread_count\n\t        self.info(f\"Using {self.dask_num_threads} threads on a {multiprocessing.cpu_count()}-core system with {total_memory_gb:.2f}GB RAM\")\n\t    # SETUP\n", "    def __str__(self) -> str:\n\t        \"\"\"\n\t        Returns\n\t        -------\n\t        str\n\t            The name of the dataset\n\t        \"\"\"\n\t        return self.name()\n\t    def __eq__(self, other: DatasetManager) -> bool:\n\t        \"\"\"\n", "        All instances of this class will compare equal to each other.\n\t        Returns\n\t        -------\n\t        bool\n\t            If the other `DatasetManager` instance has the same name, return `True`\n\t        \"\"\"\n\t        return str(self) == other\n\t    def __hash__(self):\n\t        return hash(str(self))\n\t    # MINIMUM ETL METHODS\n", "    @abstractmethod\n\t    def static_metadata(self):\n\t        \"\"\"\n\t        Placeholder indicating necessity of instantiating static metadata at the top of an ETL manager script\n\t        \"\"\"\n\t        ...\n\t    @abstractmethod\n\t    def extract(self, date_range: Optional[tuple[datetime.datetime, datetime.datetime]] = None):\n\t        \"\"\"\n\t        Check for updates to local input files (usually by checking a remote location where climate data publishers post updated\n", "        data). Highly customized for every ETL.\n\t        \"\"\"\n\t        if date_range and date_range[0] < self.dataset_start_date:\n\t            raise ValueError(f\"First datetime requested {date_range[0]} is before the start of the dataset in question. Please request a valid datetime.\")\n\t        self.new_files = []\n\t    def transform(self):\n\t        \"\"\"\n\t        Rework downloaded data into a virtual Zarr JSON conforming to Arbol's standard format for gridded datasets\n\t        \"\"\"\n\t        # Dynamically adjust metadata based on fields calculated during `extract`, if necessary (usually not)\n", "        self.populate_metadata()\n\t        # Create 1 file per measurement span (hour, day, week, etc.) so Kerchunk has consistently chunked inputs for MultiZarring\n\t        if not self.skip_prepare_input_files:  # in some circumstances it may be useful to skip file prep\n\t            self.prepare_input_files()\n\t        # Create Zarr JSON outside of Dask client so multiprocessing can use all workers / threads without interference from Dask\n\t        self.create_zarr_json()\n\t    @abstractmethod\n\t    def prepare_input_files(self, keep_originals: bool = True):\n\t        \"\"\"\n\t        Convert each of the input files (and associated metadata files) to a collection of daily netCDF4 classic files suitable for\n", "        reading by Kerchunk and intake into Xarray. This allows us to stack data into modern, performant N-Dimensional Zarr data.\n\t        Parameters\n\t        ----------\n\t        keep_originals : bool, optional\n\t            An optional flag to preserve the original files for debugging purposes. Defaults to True.\n\t        \"\"\"\n\t        pass\n\t    def populate_metadata(self):\n\t        \"\"\"\n\t        Fill the metadata with values describing this set, using the static_metadata as a base template.\n", "        \"\"\"\n\t        if hasattr(self, \"metadata\") and self.metadata is not None:\n\t            self.metadata = self.metadata.update(self.static_metadata)\n\t        else:\n\t            self.metadata = self.static_metadata\n\t    def set_zarr_metadata(self, dataset):\n\t        \"\"\"\n\t        Placeholder indicating necessity of possibly editing Zarr metadata within an ETL manager script\n\t        Method to align Zarr metadata with requirements of Zarr exports and STAC metadata format\n\t        Happens after `populate_metadata` and immediately before data publication.\n", "        \"\"\"\n\t        return super().set_zarr_metadata(dataset)\n\t    # ETL GENERATION FUNCTIONS\n\t    @classmethod\n\t    def get_subclasses(cls) -> Iterator:\n\t        \"\"\"Create a generator with all the subclasses and sub-subclasses of a parent class\"\"\"\n\t        for subclass in cls.__subclasses__():\n\t            yield from subclass.get_subclasses()\n\t            yield subclass\n\t    @classmethod\n", "    def get_subclass(cls, name: str) -> type:\n\t        \"\"\"\n\t        Method to return the subclass instance corresponding to the name provided when invoking the ETL\n\t        Parameters\n\t        ----------\n\t        name : str\n\t            The str returned by the name() property of the dataset to be parsed. Used to return that subclass's manager.\n\t            For example, 'chirps_final_05' will yield CHIRPSFinal05 if invoked for the CHIRPS manager\n\t        Returns\n\t        -------\n", "        type\n\t            A dataset source class\n\t        \"\"\"\n\t        for source in cls.get_subclasses():\n\t            if source.name() == name:\n\t                return source\n\t        print(\n\t            f\"failed to set manager from name {name}, could not find corresponding class\"\n\t        )\n\t    def parse_command_line(self) -> tuple[type | dict]:\n", "        \"\"\"\n\t        When this file is called as a script, this function will run automatically, reading input arguments and flags from the\n\t        command line\n\t        Returns\n\t        -------\n\t        tuple[ type | dict]\n\t            A tuple of a dataset source class and a dictionary of command line arguments to be used by `run_etl`\n\t        \"\"\"\n\t        parser = self.command_line_parser()\n\t        # use argparse to parse submitted CLI options\n", "        arguments = parser.parse_args()\n\t        # this replaces the passed string for each source with a set manager instance\n\t        arguments = vars(arguments)\n\t        return arguments\n\t    def command_line_parser(self) -> argparse.ArgumentParser:\n\t        \"\"\"\n\t        Build a parser and populate it with the argument defaults described in command_line_args\n\t        Returns\n\t        -------\n\t        parser | argparse.ArgumentParser\n", "            An ArgumentParser populated with valid command line flags for generating ETLs\n\t        \"\"\"\n\t        parser = argparse.ArgumentParser(\n\t            formatter_class=argparse.ArgumentDefaultsHelpFormatter\n\t        )\n\t        for argument, arg_opts in self.command_line_args.items():\n\t            parser.add_argument(argument, **arg_opts)\n\t        return parser\n\t    @property\n\t    def command_line_args(self) -> dict:\n", "        \"\"\"\n\t        Command line arguments for generate + their options and default values\n\t        Returns\n\t        -------\n\t        command_line_args | dict\n\t            A dictionary of command line arguments and their corresponding options\n\t        \"\"\"\n\t        command_line_args = {\n\t            \"source\": {\n\t                \"help\": \"a valid source key. Script will fail if an invalid string is passed\"\n", "            },\n\t            \"store\": {\n\t                \"help\": \"a valid store key. Accepts 's3', 'ipld', or 'local'. Script will fail if invalid string is passed\"\n\t            },\n\t            \"--s3-bucket\": {\n\t                \"help\": \"Name of the S3 bucket where this dataset's Zarrs are stored. Only used if 's3' store is used. Defaults to None\"\n\t            },\n\t            \"--rebuild\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"rebuild from beginning of history and generate a new CID independent of any existing data\",\n", "            },\n\t            \"--date-range\": {\n\t                \"nargs\": 2,\n\t                \"metavar\": \"YYYY-MM-DD\",\n\t                \"type\": datetime.datetime.fromisoformat,\n\t                \"help\": \"if supported by any of the specified sets,you can specify a range of dates to parse instead of the entire set\",\n\t            },\n\t            \"--latitude-range\": {\n\t                \"nargs\": 2,\n\t                \"metavar\": (\"MIN\", \"MAX\"),\n", "                \"type\": float,\n\t                \"help\": \"if supported by any specified source,you can pass a latitude range to parse instead of the entire set\",\n\t            },\n\t            \"--longitude-range\": {\n\t                \"nargs\": 2,\n\t                \"metavar\": (\"MIN\", \"MAX\"),\n\t                \"type\": float,\n\t                \"help\": \"if supported by any specified source,you can pass a longitude range to parse instead of the entire set\",\n\t            },\n\t            \"--only-parse\": {\n", "                \"action\": \"store_true\",\n\t                \"help\": \"only run a parse,using locally availabe data\",\n\t            },\n\t            \"--only-metadata\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"only update metadata,using data available on IPFS\",\n\t            },\n\t            \"--only-update-input\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"only run the update local input function\",\n", "            },\n\t            \"--only-transform\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"Instead of running the full parse,just run the dataset manager's populate_metada, prepare_input_files,\\\n\t                                and create_zarr_json methods. This will also run the update input function unless --only-parse \\\n\t                                has been specified as well.\",\n\t            },\n\t            \"--local-output\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"write output Zarr to disk instead of IPFS\",\n", "            },\n\t            \"--custom-output-path\": {\n\t                \"help\": \"override the class's automatic output path generation\"\n\t            },\n\t            \"--custom-head-metadata\": {\n\t                \"help\": \"override the class's automatic head lookup\"\n\t            },\n\t            \"--custom-latest-hash\": {\n\t                \"help\": \"override the class's automatic latest hash lookup\"\n\t            },\n", "            \"--era5-enable-caching\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"allow requests for cached files on ERA5\",\n\t            },\n\t            \"--era5-skip-finalization\": {\n\t                \"action\": \"store_true\",\n\t                \"help\": \"skip finalization check and overwriting\",\n\t            },\n\t        }\n\t        return command_line_args\n", "    def run_etl(\n\t        self,\n\t        dataset_name: str,\n\t        store: str,\n\t        s3_bucket_name: str = None,\n\t        date_range: list[datetime.datetime, datetime.datetime] = None,\n\t        rebuild: bool = False,\n\t        only_parse: bool = False,\n\t        only_update_input: bool = False,\n\t        only_transform: bool = False,\n", "        only_metadata: bool = False,\n\t        custom_output_path: str = None,\n\t        custom_latest_hash: str = None,\n\t        *args,\n\t        **kwargs,\n\t    ):\n\t        \"\"\"\n\t        Perform all the ETL steps requested by the combination of flags passed. Retrieve original published data by\n\t        checking remote locations for updates, parse it into Arbol's format, and add it to IPFS.\n\t        By default, this will run a full ETL on the dataset whose `name` corresponds to `dataset_name`,\n", "        meaning it will update input, parse input, and store the parsed output on the specified storage medium.\n\t        Read the code for `commmand_line_args` to understand how these kwargs are instantiated on the command line.\n\t        Parameters\n\t        ----------\n\t        dataset_name : str\n\t            The name() property of the dataset to be parsed\n\t        store : str\n\t            The store type of the dataset to be parsed. Accepts 's3', 'ipld', or 'local'.\n\t        s3_bucket_name : str\n\t            Name of the S3 bucket where this dataset's Zarrs are stored. Only used if \"s3\" store is used. Defaults to None\n", "        date_range : list[datetime.datetime, datetime.datetime], optional\n\t            A date range within which to download and parse data. Defaults to None.\n\t        rebuild : bool, optional\n\t            A boolean to fully rebuild the dataset, regardless of its current status. Defaults to False.\n\t        only_parse : bool, optional\n\t            A boolean to skip updating local data and only parse the data. Defaults to False.\n\t        only_update_input : bool, optional\n\t            A boolean to skip parsing data and only update local files. Defaults to False.\n\t        only_transform : bool, optional\n\t            A boolean to skip updating and parsing data and only prepare the local Zarr JSON. Defaults to False.\n", "        only_metadata : bool, optional\n\t            A boolean to only update a dataset's STAC metadata. Defaults to False.\n\t        custom_output_path : str, optional\n\t            A str indicating a custom local destination for a Zarr being output locally. Defaults to None.\n\t        custom_head_metadata : str, optional\n\t            A str hash pointing to a custom head for the metadata, instead of the latest corresponding STAC Item. Defaults to None.\n\t        custom_latest_hash : str, optional\n\t            A str hash pointing to a custom iteration of the dataset, instead of the latest corresponding hash. Defaults to None.\n\t        \"\"\"\n\t        # Find the dataset class (e.g. CHIRPSPrelim05) from its name string\n", "        dataset_class = self.get_subclass(dataset_name)\n\t        # Initialize a manager for the given class. For example,if class is ERA5Precip, the manager will be ERA5Precip([args]). This will create\n\t        # INFO and DEBUG logs in the current working directory.\n\t        manager = dataset_class(\n\t            store=store,\n\t            s3_bucket_name=s3_bucket_name,\n\t            custom_output_path=custom_output_path,\n\t            custom_latest_hash=custom_latest_hash,\n\t            rebuild=rebuild,\n\t        )\n", "        # Initialize logging for the ETL\n\t        manager.log_to_file()\n\t        manager.log_to_file(level=logging.DEBUG)\n\t        # Set parse to False by default, unless user specifies `only_parse`. This will be changed to True if new files found by extract\n\t        trigger_parse = only_parse\n\t        # update local files\n\t        if only_parse:\n\t            manager.info(\n\t                \"only parse flag present, skipping update of local input and using locally available data\"\n\t            )\n", "        elif only_metadata:\n\t            manager.info(\n\t                \"only metadata flag present,skipping update of local input and parse to update metadata using the existing Zarr on IPFS\"\n\t            )\n\t        else:\n\t            manager.info(\"updating local input\")\n\t            # extract will return True if parse should be triggered\n\t            trigger_parse = manager.extract(\n\t                rebuild=rebuild, date_range=date_range\n\t            )\n", "            if only_update_input:\n\t                # we're finished if only update input was set\n\t                manager.info(\"ending here because only update local input flag is set\")\n\t                return\n\t        # only update metadata and/or transform if these flags are specified\n\t        if only_metadata:\n\t            manager.info(f\"preparing metadata for {manager}\")\n\t            manager.publish_metadata()\n\t            manager.info(f\"Metadata for {manager} successfully updated\")\n\t        if only_transform:\n", "            manager.info(\n\t                \"Only transform requested, just preparing source files for parsing and creating corresponding Zarr JSON file\"\n\t            )\n\t            manager.transform()\n\t        # parse if only_parse flag is set or if parse was triggered by local input update return value\n\t        if trigger_parse:\n\t            # first transform data\n\t            manager.info(f\"transforming raw {manager} datasets\")\n\t            manager.transform()\n\t            manager.info(f\"data for {manager} successfully transformed\")\n", "            manager.info(f\"parsing {manager}\")\n\t            # parse will return `True` if new data was parsed\n\t            if manager.parse():\n\t                manager.info(f\"Data for {manager} successfully parsed\")\n\t            else:\n\t                manager.info(\"no new data parsed, ending here\")\n\t        else:\n\t            manager.info(\"no new data detected and parse not set to force, ending here\")\n\t    def run_etl_as_script(self):\n\t        \"\"\"\n", "        Run an ETL over the command line by invoking its name and any kwargs.\n\t        All possible kwargs described under `parse_command_line`.\n\t        Place this function in the '__main__' section of ETL manager scripts so they can be independently invoked\n\t        \"\"\"\n\t        # Get generation args and flags from the command line\n\t        generate_kwargs = self.parse_command_line()\n\t        dataset_name = generate_kwargs[\"source\"]\n\t        generate_kwargs.pop(\"source\")  # exclude the original source argument\n\t        # Pass the command line args to `generate`\n\t        self.run_etl(dataset_name, **generate_kwargs)\n"]}
{"filename": "gridded_etl_tools/__init__.py", "chunked_list": ["from pkg_resources import get_distribution, DistributionNotFound\n\ttry:\n\t    __version__ = get_distribution(__name__).version\n\texcept DistributionNotFound:\n\t    pass  # package is not installed\n"]}
{"filename": "gridded_etl_tools/utils/zarr_methods.py", "chunked_list": ["import datetime\n\timport multiprocessing\n\timport time\n\timport json\n\timport re\n\timport fsspec\n\timport pprint\n\timport dask\n\timport pathlib\n\timport glob\n", "import itertools\n\timport pandas as pd\n\timport numpy as np\n\timport xarray as xr\n\tfrom tqdm import tqdm\n\tfrom subprocess import Popen\n\tfrom kerchunk.hdf import SingleHdf5ToZarr\n\tfrom kerchunk.grib2 import scan_grib\n\tfrom kerchunk.combine import MultiZarrToZarr\n\tfrom dask.distributed import Client, LocalCluster\n", "from .convenience import Convenience\n\tfrom .metadata import Metadata\n\tfrom .store import IPLD\n\tclass Creation(Convenience):\n\t    \"\"\"\n\t    Base class for transforming a collection of downloaded input files in NetCDF4 Classic format into\n\t    (sequentially) kerchunk JSONs, a MultiZarr Kerchunk JSON, and finally an Xarray Dataset based on that MultiZarr.\n\t    \"\"\"\n\t    # KERCHUNKING\n\t    def create_zarr_json(self, force_overwrite: bool = False):\n", "        \"\"\"\n\t        Convert list of local input files (MultiZarr) to a single JSON representing a \"virtual\" Zarr\n\t        Read each file in the local input directory and create an in-memory JSON object representing it as a Zarr,\n\t        then read that collection of JSONs (MultiZarr) into one master JSON formatted as a Zarr and hence openable as a single file\n\t        Note that MultiZarrToZarr will fail if chunk sizes are inconsistent due to inconsistently sized data inputs (e.g. different\n\t        numbers of steps in input datasets)\n\t        Parameters\n\t        ----------\n\t        force_overwrite : bool, optional\n\t            Switch to create (or not) a new JSON at `DatasetManager.zarr_json_path()` even if the path exists\n", "        \"\"\"\n\t        self.zarr_json_path().parent.mkdir(mode=0o755, exist_ok=True)\n\t        # Generate a multizarr if it doesn't exist. If one exists, use that.\n\t        if not self.zarr_json_path().exists() or force_overwrite:\n\t            start_kerchunking = time.time()\n\t            # Prepapre a list of zarr_jsons and feed that to MultiZarrtoZarr\n\t            if not hasattr(self, \"zarr_jsons\"):\n\t                input_files_list = [\n\t                    str(fil)\n\t                    for fil in self.input_files()\n", "                    if (fil.suffix == \".nc4\" or fil.suffix == \".nc\" or fil.suffix == '.grib' or fil.suffix == '.grb2')\n\t                ]\n\t                self.info(f\"Generating Zarr for {len(input_files_list)} files with {multiprocessing.cpu_count()} processors\")\n\t                self.zarr_jsons = list(map(self.kerchunkify, tqdm(input_files_list)))\n\t                mzz = MultiZarrToZarr(path=input_files_list, indicts=self.zarr_jsons, **self.mzz_opts())\n\t            # if remotely extracting JSONs from S3, self.zarr_jsons should already be prepared during the `extract` step\n\t            else:\n\t                self.info(f\"Generating Zarr for {len(self.zarr_jsons)} files with {multiprocessing.cpu_count()} processors\")\n\t                mzz = MultiZarrToZarr(path=self.zarr_jsons, **self.mzz_opts())  # There are no file names to pass `path` if reading remotely\n\t            # Translate the MultiZarr to a master JSON and save that out locally. Will fail if the input JSONs are misspecified.\n", "            mzz.translate(filename=self.zarr_json_path())\n\t            self.info(\n\t                f\"Kerchunking to Zarr --- {round((time.time() - start_kerchunking)/60,2)} minutes\"\n\t            )\n\t        else:\n\t            self.info(\"Existing Zarr found, using that\")\n\t    def kerchunkify(self, file_path: str, scan_indices: int = 0):\n\t        \"\"\"\n\t        Transform input NetCDF or GRIB into a JSON representing it as a Zarr. These JSONs can be merged into a MultiZarr that Xarray can open natively as a Zarr.\n\t        Read the input file either locally or remotely from S3, depending on whether an s3 bucket is specified in the file path.\n", "        NOTE under the hood there are several versions of GRIB files -- GRIB1 and GRIB2 -- and NetCDF files -- classic, netCDF-4 classic, 64-bit offset, etc.\n\t        Kerchunk will fail on some versions in undocumented ways. We have found consistent success with netCDF-4 classic files so presuppose using those.\n\t        The command line tool `nccopy -k 'netCDF-4 classic model' infile.nc outfile.nc` can convert between formats\n\t        Parameters\n\t        ----------\n\t        file_path : str\n\t            A file path to an input GRIB or NetCDF-4 Classic file. Can be local or on a remote S3 bucket that accepts anonymous access.\n\t        scan_indices : int, slice(int,int)\n\t            One or many indices to filter the JSONS returned by `scan_grib` when scanning remotely.\n\t            When multiple options are returned that usually means the provider prepares this data variable at multiple depth / surface layers.\n", "            We currently default to the 1st (index=0), as we tend to use the shallowest depth / surface layer in ETLs we've written.\n\t        \"\"\"\n\t        if not file_path.lower().startswith('s3://'):\n\t            try:\n\t                if self.file_type == 'NetCDF':\n\t                    fs = fsspec.filesystem(\"file\")\n\t                    with fs.open(file_path) as infile:\n\t                        scanned_zarr_json = SingleHdf5ToZarr(h5f=infile, url=file_path, inline_threshold=5000).translate()\n\t                elif self.file_type == 'GRIB':\n\t                        scanned_zarr_json = scan_grib(url=file_path, filter = self.grib_filter, inline_threshold=20)[scan_indices]\n", "            except OSError as e:\n\t                raise ValueError(\n\t                    f\"Error found with {file_path}, likely due to incomplete file. Full error message is {e}\"\n\t                )\n\t        elif file_path.lower().startswith('s3://'):\n\t            s3_so = {\n\t                'anon': True,\n\t                \"default_cache_type\": \"readahead\"\n\t                }\n\t            if self.file_type == 'NetCDF':\n", "                with self.store.fs().open(file_path, **s3_so) as infile:\n\t                    scanned_zarr_json = SingleHdf5ToZarr(h5f=infile, url=file_path).translate()\n\t            elif 'GRIB' in self.file_type:\n\t                scanned_zarr_json = scan_grib(url=file_path, storage_options= s3_so, filter = self.grib_filter, inline_threshold=20)[scan_indices]\n\t            # append/extend to self.zarr_jsons for later use in an ETL's `transform` step\n\t            if type(scanned_zarr_json) == dict:\n\t                self.zarr_jsons.append(scanned_zarr_json)\n\t            elif type(scanned_zarr_json) == list:\n\t                self.zarr_jsons.extend(scanned_zarr_json)\n\t        return scanned_zarr_json\n", "    @classmethod\n\t    def mzz_opts(cls) -> dict:\n\t        \"\"\"\n\t        Class method to populate with options to be passed to MultiZarrToZarr.\n\t        The options dict is by default populated with class variables instantiated above;\n\t        optional additional parameters can be added as per the needs of the input dataset\n\t        Returns\n\t        -------\n\t        opts : dict\n\t            Kwargs for kerchunk's MultiZarrToZarr method\n", "        \"\"\"\n\t        opts = dict(\n\t            remote_protocol=cls.remote_protocol(),\n\t            remote_options={'anon' : True},\n\t            identical_dims=cls.identical_dims(),\n\t            concat_dims=cls.concat_dims(),\n\t            preprocess=cls.preprocess_kerchunk,\n\t        )\n\t        return opts\n\t    # PRE AND POST PROCESSING\n", "    @classmethod\n\t    def preprocess_kerchunk(cls, refs: dict) -> dict:\n\t        \"\"\"\n\t        Class method to populate with the specific preprocessing routine of each child class (if relevant), whilst the file is being read by Kerchunk.\n\t        Note this function usually works by manipulating Kerchunk's internal \"refs\" -- the zarr dictionary generated by Kerchunk.\n\t        If no preprocessing is happening, return the dataset untouched\n\t        Parameters\n\t        ----------\n\t        refs : dict\n\t            Dataset attributes and information automatically supplied by Kerchunk\n", "        Returns\n\t        -------\n\t        refs : dict\n\t            Dataset attributes and information, transformed as needed\n\t        \"\"\"\n\t        ref_names = set()\n\t        file_match_pattern = \"(.*?)/\"\n\t        for ref in refs:\n\t            if re.match(file_match_pattern, ref) is not None:\n\t                ref_names.add(re.match(file_match_pattern, ref).group(1))\n", "        for ref in ref_names:\n\t            fill_value_fix = json.loads(refs[f\"{ref}/.zarray\"])\n\t            fill_value_fix[\"fill_value\"] = str(cls.missing_value_indicator())\n\t            refs[f\"{ref}/.zarray\"] = json.dumps(fill_value_fix)\n\t        return refs\n\t    def postprocess_zarr(self, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n\t        Method to populate with the specific postprocessing routine of each child class (if relevant)\n\t        If no preprocessing is happening, return the dataset untouched\n\t        Parameters\n", "        ----------\n\t        dataset : xr.Dataset\n\t            The dataset being processed\n\t        Returns\n\t        -------\n\t        dataset : xr.Dataset\n\t            The dataset being processed\n\t        \"\"\"\n\t        return dataset\n\t    # CONVERT FILES\n", "    def parallel_subprocess_files(\n\t            self,\n\t            input_files: list[pathlib.Path],\n\t            command_text: list[str],\n\t            replacement_suffix: str,\n\t            keep_originals: bool = False\n\t    ):\n\t        \"\"\"\n\t        Run a command line operation on a set of input files. In most cases, replace each file with an alternative file.\n\t        Optionally, keep the original files for development and testing purposes.\n", "        Parameters\n\t        ----------\n\t        raw_files : list\n\t            A list of pathlib.Path objects referencing the original files prior to processing\n\t        command_text : list[str]\n\t            A list of strings to reconstruct into a shell command\n\t        replacement_suffix : str\n\t            The desired extension of the file(s) created by the shell routine. Replaces the old extension.\n\t        keep_originals : bool, optional\n\t            An optional flag to preserve the original files for debugging purposes. Defaults to False.\n", "        \"\"\"\n\t        # set up and run conversion subprocess on command line\n\t        commands = []\n\t        for existing_file in input_files:\n\t            new_file = existing_file.with_suffix(replacement_suffix)\n\t            commands.append(  # map will convert the file names to strings because some command line tools (e.g. gdal) don't like Pathlib objects\n\t                    list(map(str, command_text + [existing_file, new_file]))\n\t                 )\n\t        # Convert each comment to a Popen call b/c Popen doesn't block, hence processes will run in parallel\n\t        # Only run 100 processes at a time to prevent BlockingIOErrors\n", "        for index in range(0, len(commands), 100):\n\t            commands_slice = [ Popen(cmd) for cmd in commands[index:index+100]]\n\t            for command in commands_slice:\n\t                command.wait()\n\t        self.info(\n\t            f\"{(len(list(input_files)))} conversions finished, cleaning up original files\"\n\t        )\n\t        # Get rid of original files that were converted\n\t        self.delete_original_files(input_files, keep_originals)\n\t        self.info(\n", "            f\"Cleanup finished\"\n\t        )\n\t    def convert_to_lowest_common_time_denom(\n\t        self, raw_files: list, keep_originals: bool = False\n\t    ):\n\t        \"\"\"\n\t        Decompose a set of raw files aggregated by week, month, year, or other irregular time denominator\n\t        into a set of smaller files, one per the lowest common time denominator -- hour, day, etc.\n\t        Parameters\n\t        ----------\n", "        raw_files : list\n\t            A list of file path strings referencing the original files prior to processing\n\t        originals_dir : pathlib.Path\n\t            A path to a directory to hold the original files\n\t        keep_originals : bool, optional\n\t            An optional flag to preserve the original files for debugging purposes. Defaults to False.\n\t        \"\"\"\n\t        if len(list(raw_files)) == 0:\n\t            raise FileNotFoundError(\"No files found to convert, exiting script\")\n\t        command_text = [\"cdo\", \"-f\", \"nc4\", \"splitsel,1\"]\n", "        self.parallel_subprocess_files(raw_files, command_text, '', keep_originals)\n\t    def ncs_to_nc4s(self, keep_originals: bool = False):\n\t        \"\"\"\n\t        Find all NetCDF files in the input folder and batch convert them\n\t        in parallel to NetCDF4-Classic files that play nicely with Kerchunk\n\t        NOTE There are many versions of NetCDFs and some others seem to play nicely with Kerchunk.\n\t        NOTE To be safe we convert to NetCDF4 Classic as these are reliable and no data is lost.\n\t        Parameters\n\t        ----------\n\t        keep_originals : bool\n", "            A flag to preserve the original files for debugging purposes.\n\t        \"\"\"\n\t        # Build a list of files for manipulation\n\t        raw_files = [pathlib.Path(file) for file in glob.glob(str(self.local_input_path() / \"*.nc\"))]\n\t        if len(list(raw_files)) == 0:\n\t            raise FileNotFoundError(\"No files found to convert, exiting script\")\n\t        # convert raw NetCDFs to NetCDF4-Classics in parallel\n\t        self.info(\n\t            f\"Converting {(len(list(raw_files)))} NetCDFs to NetCDF4 Classic files\"\n\t        )\n", "        command_text = [\"nccopy\", \"-k\", \"netCDF-4 classic model\"]\n\t        self.parallel_subprocess_files(raw_files, command_text, '.nc4', keep_originals)\n\t    def delete_original_files(self, files: list, keep_originals: bool = False):\n\t        \"\"\"\n\t        Clean up original files\n\t        Optionally moves the original file to a \"<dataset_name>_originals\" folder for reference\n\t        Parameters\n\t        ----------\n\t        files : list\n\t            A list of original files to delete or save\n", "        keep_originals : bool\n\t            A boolean indicating whether to preserve the original files (for dev purposes)\n\t        \"\"\"\n\t        # use the first file to define the originals_dir path\n\t        first_file = files[0]\n\t        originals_dir = first_file.parents[1] / (first_file.stem + \"_originals\")\n\t        for file in files:\n\t            # keep or get rid of original files\n\t            if keep_originals:\n\t                pathlib.Path.mkdir(originals_dir, mode=0o755, parents=True, exist_ok=True)\n", "                file.rename(originals_dir / file.name)\n\t            else:\n\t                file.unlink()\n\t    # RETURN DATASET\n\t    def zarr_hash_to_dataset(self, ipfs_hash: str) -> xr.Dataset:\n\t        \"\"\"\n\t        Open a Zarr on IPLD at `ipfs_hash` as an `xr.Dataset` object\n\t        Parameters\n\t        ----------\n\t        ipfs_hash : str\n", "            The CID of the dataset\n\t        Returns\n\t        -------\n\t        dataset : xr.Dataset\n\t            Object representing the dataset described by the CID at `self.latest_hash()`\n\t        \"\"\"\n\t        mapper = self.store.mapper(set_root=False)\n\t        mapper.set_root(ipfs_hash)\n\t        dataset = xr.open_zarr(mapper)\n\t        return dataset\n", "    def zarr_json_to_dataset(self, zarr_json_path: str = None) -> xr.Dataset:\n\t        \"\"\"\n\t        Open the virtual zarr at `self.zarr_json_path()` and return as a xr.Dataset object\n\t        Parameters\n\t        ----------\n\t        zarr_json_path : str, optional\n\t            A path to a specific Zarr JSON prepared by Kerchunk. Primarily intended for debugging.\n\t            Defaults to None, which will trigger using the `zarr_json_path` for the dataset in question.\n\t        Returns\n\t        -------\n", "        xr.Dataset\n\t            Object representing the dataset described by the Zarr JSON file at `self.zarr_json_path()`\n\t        \"\"\"\n\t        if not zarr_json_path:\n\t            zarr_json_path = str(self.zarr_json_path())\n\t        dataset = xr.open_dataset(\n\t            \"reference://\",\n\t            engine=\"zarr\",\n\t            chunks={},\n\t            backend_kwargs={\n", "                \"storage_options\": {\n\t                    \"fo\": zarr_json_path,\n\t                    \"remote_protocol\": self.remote_protocol(),\n\t                    \"skip_instance_cache\": True,\n\t                    \"default_cache_type\": \"readahead\",\n\t                },\n\t                \"consolidated\": False,\n\t            },\n\t        )\n\t        # Apply any further postprocessing on the way out\n", "        return self.postprocess_zarr(dataset)\n\tclass Publish(Creation, Metadata):\n\t    \"\"\"\n\t    Base class for publishing methods -- both initial publication and updates\n\t    \"\"\"\n\t    # PARSING\n\t    def parse(self, *args, **kwargs) -> bool:\n\t        \"\"\"\n\t        Open all raw files in self.local_input_path(). Transform the data contained in them into Zarr format and write to the store specified\n\t        by `Attributes.store`.\n", "        If the store is IPLD or S3, an existing Zarr will be searched for to be opened and appended to by default. This can be overridden to force\n\t        writing the entire input data to a new Zarr by setting `Convenience.rebuild_requested` to `True`. If existing data is found,\n\t        `DatasetManager.overwrite_allowed` must also be `True`.\n\t        This is the core function for transforming and writing data (to disk, S3, or IPLD) and should be standard for all ETLs. Modify the\n\t        child methods it calls or the dask configuration settings to resolve any performance or parsing issues.\n\t        Parameters\n\t        ----------\n\t        args : list\n\t            Additional arguments passed from generate.py\n\t        kwargs : dict\n", "            Keyword arguments passed from generate.py\n\t        Returns\n\t        -------\n\t        bool\n\t            Flag indicating if new data was / was not parsed\n\t        \"\"\"\n\t        self.info(\"Running parse routine\")\n\t        # adjust default dask configuration parameters as needed\n\t        self.dask_configuration()\n\t        # Use a Dask client to open, process, and write the data\n", "        with LocalCluster(\n\t            processes=False,\n\t            dashboard_address=self.dask_dashboard_address,  # specify local IP to prevent exposing the dashboard\n\t            protocol=\"inproc://\",  # otherwise Dask may default to tcp or tls protocols and choke\n\t            threads_per_worker=self.dask_num_threads,\n\t            n_workers=self.dask_num_workers,\n\t        ) as cluster, Client(\n\t            cluster,\n\t        ) as client:\n\t            self.info(f\"Dask Dashboard for this parse can be found at {cluster.dashboard_link}\")\n", "            try:\n\t                # Attempt to find an existing Zarr, using the appropriate method for the store. If there is existing data and there is no\n\t                # rebuild requested, start an update. If there is no existing data, start an initial parse. If rebuild is requested and there is\n\t                # no existing data or allow overwrite has been set, write a new Zarr, overwriting (or in the case of IPLD, not using) any existing\n\t                # data. If rebuild is requested and there is existing data, but allow overwrite is not set, do not start parsing and issue a warning.\n\t                if self.store.has_existing and not self.rebuild_requested:\n\t                    self.info(f\"Updating existing data at {self.store}\")\n\t                    self.update_zarr()\n\t                elif not self.store.has_existing or (\n\t                    self.rebuild_requested and self.overwrite_allowed\n", "                ):\n\t                    if not self.store.has_existing:\n\t                        self.info(\n\t                            f\"No existing data found. Creating new Zarr at {self.store}.\"\n\t                        )\n\t                    else:\n\t                        self.info(f\"Data at {self.store} will be replaced.\")\n\t                    self.write_initial_zarr()\n\t                else:\n\t                    raise RuntimeError(\n", "                        \"There is already a zarr at the specified path and a rebuild is requested, \"\n\t                        \"but overwrites are not allowed.\"\n\t                    )\n\t            except KeyboardInterrupt:\n\t                self.info(\n\t                    \"CTRL-C Keyboard Interrupt detected, exiting Dask client before script terminates\"\n\t                )\n\t                client.close()\n\t        if hasattr(self, \"dataset_hash\") and self.dataset_hash:\n\t            self.info(\"Published dataset's IPFS hash is \" + str(self.dataset_hash))\n", "        return True\n\t    def publish_metadata(self):\n\t        \"\"\"\n\t        Publishes STAC metadata to the backing store\n\t        \"\"\"\n\t        current_zarr = self.store.dataset()\n\t        if not current_zarr:\n\t            raise RuntimeError(\"Attempting to write STAC metadata, but no zarr written yet\")\n\t        if not hasattr(self, \"metadata\"):\n\t            # This will occur when user is only updating metadata and has not parsed\n", "            self.populate_metadata()\n\t            self.set_key_dims()\n\t        # This will do nothing if catalog already exists\n\t        self.create_root_stac_catalog()\n\t        # This will update the stac collection if it already exists\n\t        self.create_stac_collection(current_zarr)\n\t        # Create and publish metadata as a STAC Item\n\t        self.create_stac_item(current_zarr)\n\t    def to_zarr(self, dataset: xr.Dataset, *args, **kwargs):\n\t        \"\"\"\n", "        Wrapper around `xr.Dataset.to_zarr`. `*args` and `**kwargs` are forwarded to `to_zarr`. The dataset to write to Zarr must be the first argument.\n\t        On S3 and local, pre and post update metadata edits are saved to the Zarr attrs at `Dataset.update_in_progress` to indicate during writing that\n\t        the data is being edited.\n\t        Parameters\n\t        ----------\n\t        dataset\n\t            Dataset to write to Zarr format\n\t        *args\n\t            Arguments to forward to `xr.Dataset.to_zarr`\n\t        **kwargs\n", "            Keyword arguments to forward to `xr.Dataset.to_zarr`\n\t        \"\"\"\n\t        # Skip update in-progress metadata flag on IPLD\n\t        if not isinstance(self.store, IPLD):\n\t            # Create an empty dataset that will be used to just write the metadata (there's probably a better way to do this? compute=False?).\n\t            dataset.attrs[\"update_in_progress\"] = True\n\t            empty_dataset = dataset\n\t            for coord in itertools.chain(dataset.coords, dataset.data_vars):\n\t                empty_dataset = empty_dataset.drop(coord)\n\t            # If there is an existing Zarr, indicate in the metadata that an update is in progress, and write the metadata before starting the real write.\n", "            if self.store.has_existing:\n\t                self.info(\"Pre-writing metadata to indicate an update is in progress\")\n\t                empty_dataset.to_zarr(\n\t                    self.store.mapper(refresh=True), append_dim=self.time_dim\n\t                )\n\t        # Write data to Zarr and log duration.\n\t        start_writing = time.perf_counter()\n\t        dataset.to_zarr(*args, **kwargs)\n\t        self.info(\n\t            f\"Writing Zarr took {datetime.timedelta(seconds=time.perf_counter() - start_writing)}\"\n", "        )\n\t        # Skip update in-progress metadata flag on IPLD\n\t        if not isinstance(self.store, IPLD):\n\t            # Indicate in metadata that update is complete.\n\t            empty_dataset.attrs[\"update_in_progress\"] = False\n\t            self.info(\n\t                \"Re-writing Zarr to indicate in the metadata that update is no longer in process.\"\n\t            )\n\t            empty_dataset.to_zarr(self.store.mapper(), append_dim=self.time_dim)\n\t    # SETUP\n", "    def dask_configuration(self):\n\t        \"\"\"\n\t        Convenience method to implement changes to the configuration of the dask client after instantiation\n\t        NOTE Some relevant paramters and console print statements we found useful during testing have been left\n\t        commented out at the bottom of this function. Consider activating them if you encounter trouble parsing\n\t        \"\"\"\n\t        self.info(\"Configuring Dask\")\n\t        dask.config.set(\n\t            {\n\t                \"distributed.scheduler.worker-saturation\": self.dask_scheduler_worker_saturation\n", "            }\n\t        )  # toggle upwards or downwards (minimum 1.0) depending on memory mgmt performance\n\t        dask.config.set(\n\t            {\"distributed.scheduler.worker-ttl\": None}\n\t        )  # will timeout on big tasks otherwise\n\t        dask.config.set(\n\t            {\"distributed.worker.memory.target\": self.dask_worker_mem_target}\n\t        )\n\t        dask.config.set({\"distributed.worker.memory.spill\": self.dask_worker_mem_spill})\n\t        dask.config.set({\"distributed.worker.memory.pause\": self.dask_worker_mem_pause})\n", "        dask.config.set(\n\t            {\"distributed.worker.memory.terminate\": self.dask_worker_mem_terminate}\n\t        )\n\t        # OTHER USEFUL SETTINGS, USE IF ENCOUNTERING PROBLEMS WITH PARSES\n\t        # dask.config.set({'scheduler' : 'threads'}) # default distributed scheduler does not allocate memory correctly for some parses\n\t        # dask.config.set({'nanny.environ.pre-spawn-environ.MALLOC_TRIM_THRESHOLD_' : 0}) # helps clear out unused memory\n\t        # dask.config.set({\"distributed.worker.memory.recent-to-old-time\": \"300s\"}) #???\n\t        # DEBUGGING\n\t        self.info(f\"dask.config.config is {pprint.pformat(dask.config.config)}\")\n\t    # INITIAL PUBLICATION\n", "    def pre_initial_dataset(self) -> xr.Dataset:\n\t        \"\"\"\n\t        Get an `xr.Dataset` that can be passed to the appropriate writing method when writing a new Zarr. Read the virtual Zarr JSON at the\n\t        path returned by `Creation.zarr_json_path`, normalize the axes, re-chunk the dataset according to this object's chunking parameters, and\n\t        add custom metadata defined by this class.\n\t        Returns\n\t        -------\n\t        xr.Dataset\n\t            The dataset from `Creation.zarr_json_to_dataset` with custom metadata, normalized axes, and rechunked\n\t        \"\"\"\n", "        # Transform the JSON Zarr into an xarray Dataset\n\t        dataset = self.zarr_json_to_dataset()\n\t        # Reset standard_dims to Arbol's standard now that loading + preprocessing on the original names is done\n\t        self.set_key_dims()\n\t        dataset = dataset.transpose(*self.standard_dims)\n\t        # Re-chunk\n\t        self.info(f\"Re-chunking dataset to {self.requested_dask_chunks}\")\n\t        dataset = dataset.chunk(self.requested_dask_chunks)\n\t        self.info(f\"Chunks after rechunk are {dataset.chunks}\")\n\t        # Add metadata to dataset\n", "        dataset = self.set_zarr_metadata(dataset)\n\t        # Log the state of the dataset before writing\n\t        self.info(f\"Initial dataset\\n{dataset}\")\n\t        return dataset\n\t    def write_initial_zarr(self):\n\t        \"\"\"\n\t        Writes the first iteration of zarr for the dataset to the store specified at\n\t        initialization. If the store is `IPLD`, does some additional metadata processing\n\t        \"\"\"\n\t        # Transform the JSON Zar\n", "        dataset = self.pre_initial_dataset()\n\t        mapper = self.store.mapper(set_root=False)\n\t        self.to_zarr(dataset, mapper, consolidated=True, mode=\"w\")\n\t        if isinstance(self.store, IPLD):\n\t            self.dataset_hash = str(mapper.freeze())\n\t    def set_key_dims(self):\n\t        \"\"\"\n\t        Convenience method to set the standard and time dimensions based on whether a dataset is a forecast or not\n\t        The self.forecast instance variable is set in the `init` of a dataset and defaults to False.\n\t        \"\"\"\n", "        if not self.forecast:\n\t            self.standard_dims = [\"time\", \"latitude\", \"longitude\"]\n\t            self.time_dim = \"time\"\n\t        else:\n\t            self.standard_dims = [\"forecast_reference_time\", \"step\", \"latitude\", \"longitude\"]\n\t            self.time_dim = \"forecast_reference_time\"\n\t    # UPDATES\n\t    def update_zarr(self):\n\t        \"\"\"\n\t        Update discrete regions of an N-D dataset saved to disk as a Zarr. If updates span multiple date ranges, pushes separate updates to each region.\n", "        If the IPLD store is in use, after updating the dataset, this function updates the corresponding STAC Item and summaries in the parent\n\t        STAC Collection.\n\t        \"\"\"\n\t        original_dataset = self.store.dataset()\n\t        update_dataset = self.zarr_json_to_dataset()\n\t        # Reset standard_dims to Arbol's standard now that loading + preprocessing on the original names is done\n\t        self.set_key_dims()\n\t        self.info(f\"Original dataset\\n{original_dataset}\")\n\t        # Prepare inputs for the update operation\n\t        insert_times, append_times = self.update_setup(original_dataset, update_dataset)\n", "        # Conduct update operations\n\t        self.update_parse_operations(\n\t            original_dataset, update_dataset, insert_times, append_times\n\t        )\n\t    def update_setup(\n\t        self, original_dataset: xr.Dataset, update_dataset: xr.Dataset\n\t    ) -> tuple[list, list]:\n\t        \"\"\"\n\t        Create needed inputs for the actual update parses: a variable to hold the hash and lists of any times to insert and/or append.\n\t        Parameters\n", "        ----------\n\t        original_dataset : xr.Dataset\n\t            The existing xr.Dataset\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        Returns\n\t        -------\n\t        insert_times : list\n\t            Datetimes corresponding to existing records to be replaced in the original dataset\n\t        append_times : list\n", "            Datetimes corresponding to all new records to append to the original dataset\n\t        \"\"\"\n\t        original_times = set(original_dataset[self.time_dim].values)\n\t        if (\n\t            type(update_dataset[self.time_dim].values) == np.datetime64\n\t        ):  # cannot perform iterative (set) operations on a single numpy.datetime64 value\n\t            update_times = set([update_dataset[self.time_dim].values])\n\t        else:  # many values will come as an iterable numpy.ndarray\n\t            update_times = set(update_dataset[self.time_dim].values)\n\t        insert_times = sorted(update_times.intersection(original_times))\n", "        append_times = sorted(update_times - original_times)\n\t        return insert_times, append_times\n\t    def update_parse_operations(\n\t        self,\n\t        original_dataset: xr.Dataset,\n\t        update_dataset: xr.Dataset,\n\t        insert_times: list,\n\t        append_times: list,\n\t    ):\n\t        \"\"\"\n", "        An enclosing method triggering insert and/or append operations based on the presence of valid records for either.\n\t        Parameters\n\t        ----------\n\t        original_dataset : xr.Dataset\n\t            The existing dataset\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        insert_times : list\n\t            Datetimes corresponding to existing records to be replaced in the original dataset\n\t        append_times : list\n", "            Datetimes corresponding to all new records to append to the original dataset\n\t        \"\"\"\n\t        # Raise an exception if there is no writable data\n\t        if not insert_times and not append_times:\n\t            raise ValueError(\n\t                \"Update started with no new records to insert or append to original zarr.\"\n\t            )\n\t        original_chunks = {\n\t            dim: val_tuple[0] for dim, val_tuple in original_dataset.chunks.items()\n\t        }\n", "        # First write out updates to existing data using the 'region=' command...\n\t        if len(insert_times) > 0:\n\t            if not self.overwrite_allowed:\n\t                self.warn(\n\t                    \"Not inserting records despite historical data detected. 'allow_overwrite'\"\n\t                    \"flag has not been set and store is not IPLD\"\n\t                )\n\t            else:\n\t                self.insert_into_dataset(\n\t                    original_dataset, update_dataset, insert_times, original_chunks\n", "                )\n\t        else:\n\t            self.info(\"No modified records to insert into original zarr\")\n\t        # ...then write new data (appends) using the 'append_dim=' command\n\t        if len(append_times) > 0:\n\t            self.append_to_dataset(update_dataset, append_times, original_chunks)\n\t        else:\n\t            self.info(\"No new records to append to original zarr\")\n\t    def insert_into_dataset(\n\t        self,\n", "        original_dataset: xr.Dataset,\n\t        update_dataset: xr.Dataset,\n\t        insert_times: list,\n\t        original_chunks: list,\n\t    ):\n\t        \"\"\"\n\t        Insert new records to an existing dataset along its time dimension using the `append_dim=` flag.\n\t        Parameters\n\t        ----------\n\t        original_dataset : xr.Dataset\n", "            The existing xr.Dataset\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        insert_times : list\n\t            Datetimes corresponding to existing records to be replaced in the original dataset\n\t        originaL_chunks : dict\n\t            A Dict containing the dimension:size parameters for the original dataset\n\t        \"\"\"\n\t        mapper = self.store.mapper()\n\t        insert_dataset = self.prep_update_dataset(\n", "            update_dataset, insert_times, original_chunks\n\t        )\n\t        date_ranges, regions = self.calculate_update_time_ranges(\n\t            original_dataset, insert_dataset\n\t        )\n\t        for dates, region in zip(date_ranges, regions):\n\t            insert_slice = insert_dataset.sel(**{self.time_dim : slice(dates[0], dates[1])})\n\t            insert_dataset.attrs[\"update_is_append_only\"] = False\n\t            self.info(\"Indicating the dataset is not appending data only.\")\n\t            self.to_zarr(\n", "                insert_slice.drop(self.standard_dims[1:]),\n\t                mapper,\n\t                region={self.time_dim: slice(region[0], region[1])},\n\t            )\n\t        self.info(\n\t            f\"Inserted records for {len(insert_dataset[self.time_dim].values)} times from {len(regions)} date range(s) to original zarr\"\n\t        )\n\t        # In the case of IPLD, store the hash for later use\n\t        if isinstance(self.store, IPLD):\n\t            self.dataset_hash = str(mapper.freeze())\n", "    def append_to_dataset(\n\t        self, update_dataset: xr.Dataset, append_times: list, original_chunks: dict\n\t    ):\n\t        \"\"\"\n\t        Append new records to an existing dataset along its time dimension using the `append_dim=` flag.\n\t        Parameters\n\t        ----------\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        append_times : list\n", "            Datetimes corresponding to all new records to append to the original dataset\n\t        originaL_chunks : dict\n\t            The dimension:size parameters for the original dataset\n\t        \"\"\"\n\t        append_dataset = self.prep_update_dataset(\n\t            update_dataset, append_times, original_chunks\n\t        )\n\t        mapper = self.store.mapper()\n\t        # Write the Zarr\n\t        append_dataset.attrs[\"update_is_append_only\"] = True\n", "        self.info(\"Indicating the dataset is appending data only.\")\n\t        self.to_zarr(append_dataset, mapper, consolidated=True, append_dim=self.time_dim)\n\t        self.info(\n\t            f\"Appended records for {len(append_dataset[self.time_dim].values)} datetimes to original zarr\"\n\t        )\n\t        # In the case of IPLD, store the hash for later use\n\t        if isinstance(self.store, IPLD):\n\t            self.dataset_hash = str(mapper.freeze())\n\t    def prep_update_dataset(\n\t        self, update_dataset: xr.Dataset, time_filter_vals: list, new_chunks: dict\n", "    ) -> xr.Dataset:\n\t        \"\"\"\n\t        Select out and format time ranges you wish to insert or append into the original dataset based on specified time range(s) and chunks\n\t        Parameters\n\t        ----------\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        time_filter_vals : list\n\t            Datetimes corresponding to all new records to insert or append\n\t        new_chunks : dict\n", "            A Dict containing the dimension:size parameters for the original dataset\n\t        Returns\n\t        -------\n\t        update_dataset : xr.Dataset\n\t            An xr.Dataset filtered to only the time values in `time_filter_vals`, with correct metadata\n\t        \"\"\"\n\t        # Xarray will automatically drop dimensions of size 1. A missing time dimension causes all manner of update failures.\n\t        if self.time_dim in update_dataset.dims:\n\t            update_dataset = update_dataset.sel(**{self.time_dim : time_filter_vals}).transpose(*self.standard_dims)\n\t        else:\n", "            update_dataset = update_dataset.expand_dims(self.time_dim).transpose(*self.standard_dims)\n\t        update_dataset = update_dataset.chunk(new_chunks)\n\t        update_dataset = self.set_zarr_metadata(update_dataset)\n\t        self.info(f\"Update dataset\\n{update_dataset}\")\n\t        return update_dataset\n\t    def calculate_update_time_ranges(\n\t        self, original_dataset: xr.Dataset, update_dataset: xr.Dataset\n\t    ) -> tuple[list[datetime.datetime], list[str]]:\n\t        \"\"\"\n\t        Calculate the start/end dates and index values for contiguous time ranges of updates.\n", "        Used by `update_zarr` to specify the location(s) of updates in a target Zarr dataset.\n\t        Parameters\n\t        ----------\n\t        original_dataset : xr.Dataset\n\t            The existing xr.Dataset\n\t        update_dataset : xr.Dataset\n\t            A dataset containing all updated (insert) and new (append) records\n\t        Returns\n\t        -------\n\t        datetime_ranges : list[datetime.datetime, datetime.datetime]\n", "            A List of (Datetime, Datetime) tuples defining the time ranges of records to insert\n\t        regions_indices: list[int, int]\n\t             A List of (int, int) tuples defining the indices of records to insert\n\t        \"\"\"\n\t        dataset_time_span = f\"1{self.temporal_resolution()[0]}\"  # NOTE this won't work for months (returns 1 minute), we could define a more precise method with if/else statements if needed.\n\t        complete_time_series = pd.Series(update_dataset[self.time_dim].values)\n\t        # Define datetime range starts as anything with > 1 unit diff with the previous value,\n\t        # and ends as > 1 unit diff with the following. First/Last will return NAs we must fill.\n\t        starts = (complete_time_series - complete_time_series.shift(1)).abs().fillna(\n\t            pd.Timedelta(dataset_time_span * 100)\n", "        ) > pd.Timedelta(dataset_time_span)\n\t        ends = (complete_time_series - complete_time_series.shift(-1)).abs().fillna(\n\t            pd.Timedelta(dataset_time_span * 100)\n\t        ) > pd.Timedelta(dataset_time_span)\n\t        # Filter down the update time series to just the range starts/ends\n\t        insert_datetimes = complete_time_series[starts + ends]\n\t        single_datetime_inserts = complete_time_series[starts & ends]\n\t        # Add single day insert datetimes once more so they can be represented as ranges, then sort for the correct order.\n\t        # Divide the result into a collection of start/end range arrays\n\t        insert_datetimes = np.sort(\n", "            pd.concat(\n\t                [insert_datetimes, single_datetime_inserts], ignore_index=True\n\t            ).values\n\t        )\n\t        datetime_ranges = np.array_split(insert_datetimes, (len(insert_datetimes) / 2))\n\t        # Calculate a tuple of the start/end indices for each datetime range\n\t        regions_indices = []\n\t        for date_pair in datetime_ranges:\n\t            start_int = list(original_dataset[self.time_dim].values).index(\\\n\t                original_dataset.sel(**{self.time_dim : date_pair[0], 'method' : 'nearest'})[self.time_dim]\n", "            )\n\t            end_int = (\n\t                list(original_dataset[self.time_dim].values).index(\n\t                    original_dataset.sel(**{self.time_dim : date_pair[1], 'method' : 'nearest'})[self.time_dim]\n\t                )\n\t                + 1\n\t            )\n\t            regions_indices.append((start_int, end_int))\n\t        return datetime_ranges, regions_indices\n"]}
{"filename": "gridded_etl_tools/utils/attributes.py", "chunked_list": ["from abc import ABC, abstractmethod\n\tfrom .store import StoreInterface, Local\n\tclass Attributes(ABC):\n\t    \"\"\"\n\t    Abstract base class containing default attributes of Zarr ETLs\n\t    These can be overriden in the ETL managers for a given ETL as needed\n\t    \"\"\"\n\t    @classmethod\n\t    def host_organization(self) -> str:\n\t        \"\"\"\n", "        Name of the organization (your organization) hosting the data being published. Used in STAC metadata.\n\t        \"\"\"\n\t        return \"\"  # e.g. \"Arbol\"\n\t    @classmethod\n\t    @abstractmethod\n\t    def name(cls) -> str:\n\t        \"\"\"\n\t        The name of each ETL is built recursively by appending each child class name to the inherited name\n\t        Returns\n\t        -------\n", "        str\n\t           Name of dataset\n\t        \"\"\"\n\t        ...\n\t    @classmethod\n\t    @abstractmethod\n\t    def collection(cls):\n\t        \"\"\"'\n\t        Placeholder class for collection name\n\t        \"\"\"\n", "        ...\n\t    @property\n\t    def file_type(cls):\n\t        \"\"\"\n\t        Class method to populate with a string representing the file type of each child class (and edition if relevant),\n\t        e.g. GRIB1 for ERA5 data, GRIB2 for RTMA, or NetCDF for Copernicus Marine Service\n\t        Used to trigger file format-appropriate functions and methods for Kerchunking and Xarray operations.\n\t        \"\"\"\n\t        ...\n\t    @classmethod\n", "    @abstractmethod\n\t    def remote_protocol(cls):\n\t        \"\"\"\n\t        Remote protocol string for MultiZarrToZarr and Xarray to use when opening input files. 'File' for local, 's3' for S3, etc.\n\t        See fsspec docs for more details.\n\t        \"\"\"\n\t        ...\n\t    @classmethod\n\t    @abstractmethod\n\t    def identical_dims(cls):\n", "        \"\"\"\n\t        List of dimension(s) whose values are identical in all input datasets. This saves Kerchunk time by having it read these\n\t        dimensions only one time, from the first input file\n\t        \"\"\"\n\t        ...\n\t    @classmethod\n\t    @abstractmethod\n\t    def concat_dims(cls):\n\t        \"\"\"\n\t        List of dimension(s) by which to concatenate input files' data variable(s) -- usually time, possibly with some other relevant dimension\n", "        \"\"\"\n\t        ...\n\t    @property\n\t    def data_var_dtype(self) -> str:\n\t        \"\"\"\n\t        Property specifying the data type of the data variable\n\t        Returns\n\t        -------\n\t        str\n\t            The final data type of the dataset's data variable\n", "        \"\"\"\n\t        return \"<f4\"\n\t    def spatial_resolution(self) -> float:\n\t        \"\"\"\n\t        Property specifying the spatial resolution of a dataset in decimal degrees\n\t        Returns\n\t        -------\n\t        float\n\t            The spatial resolution of a dataset\n\t        \"\"\"\n", "        ...\n\t    def spatial_precision(self) -> float:\n\t        \"\"\"\n\t        Property specifying the spatial resolution of a dataset in decimal degrees\n\t        Returns\n\t        -------\n\t        float\n\t            The spatial resolution of a dataset\n\t        \"\"\"\n\t        ...\n", "    @classmethod\n\t    @abstractmethod\n\t    def temporal_resolution(cls) -> str:\n\t        \"\"\"\n\t        Returns the time resolution of the dataset as a string (e.g. \"hourly\", \"daily\", \"monthly\", etc.)\n\t        Returns\n\t        -------\n\t        str\n\t           Temporal resolution of the dataset\n\t        \"\"\"\n", "        ...\n\t    @classmethod\n\t    def update_cadence(self) -> str:\n\t        \"\"\"\n\t        Property specifying the frequency with which a dataset is updated\n\t        Optional class method, may just be specified directly in the static metadata\n\t        Returns\n\t        -------\n\t        str\n\t            The update frequency of a dataset\n", "        \"\"\"\n\t        ...\n\t    @classmethod\n\t    def missing_value_indicator(cls) -> str:\n\t        \"\"\"\n\t        Default indicator of a missing value in a dataset\n\t        Returns\n\t        -------\n\t        str\n\t           Stand-in for a missing value\n", "        \"\"\"\n\t        return \"\"\n\t    @property\n\t    def tags(cls) -> list[str]:\n\t        \"\"\"\n\t        Default tag for a dataset. Prevents crashes on parse if no tags assigned.\n\t        Returns\n\t        -------\n\t        list[str]\n\t           Stand-in for a dataset's tags\n", "        \"\"\"\n\t        return [\"\"]\n\t    @property\n\t    def forecast(self) -> bool:\n\t        \"\"\"Forecast defaults to False, must override for actual forecast datasets\"\"\"\n\t        return False\n\t    @property\n\t    def bbox_rounding_value(self) -> int:\n\t        \"\"\"\n\t        Value to round bbox values by. Specify within the dataset for very high resolution datasets\n", "        to prevent mismatches with rounding behavior of old Arbol API.\n\t        Returns\n\t        -------\n\t        int\n\t            The number of decimal places to round bounding box values to.\n\t        \"\"\"\n\t        return 5\n\t    @property\n\t    def store(self) -> StoreInterface:\n\t        \"\"\"\n", "        Get the store interface object for the store the output will be written to.\n\t        If it has not been previously set, a `etls.utils.store.Local` will be initialized and returned.\n\t        Returns\n\t        -------\n\t        StoreInterface\n\t            Object for interfacing with a Zarr's data store.\n\t        \"\"\"\n\t        if not hasattr(self, \"_store\"):\n\t            self._store = Local(self)\n\t        return self._store\n", "    @store.setter\n\t    def store(self, value: StoreInterface):\n\t        \"\"\"\n\t        Assign a `StoreInterface` to the store property. If the assigned value is not an instance of `StoreInterface`,\n\t        a `ValueError` will be raised.\n\t        Parameters\n\t        ----------\n\t        value\n\t            An instance of `StoreInterface`\n\t        Raises\n", "        ------\n\t        ValueError\n\t            Raised if anything other than a `StoreInterface` is passed.\n\t        \"\"\"\n\t        if isinstance(value, StoreInterface):\n\t            self._store = value\n\t        else:\n\t            raise ValueError(f\"Store must be an instance of {StoreInterface}\")\n"]}
{"filename": "gridded_etl_tools/utils/store.py", "chunked_list": ["# The annotations dict and TYPE_CHECKING var are necessary for referencing types that aren't fully imported yet. See https://peps.python.org/pep-0563/\n\tfrom __future__ import annotations\n\tfrom typing import TYPE_CHECKING\n\tif TYPE_CHECKING:\n\t    from .. import dataset_manager\n\timport datetime\n\timport json\n\timport os\n\timport shutil\n\timport s3fs\n", "import xarray as xr\n\timport ipldstore\n\timport pathlib\n\timport fsspec\n\timport collections\n\tfrom abc import abstractmethod, ABC\n\tclass StoreInterface(ABC):\n\t    \"\"\"\n\t    Base class for an interface that can be used to access a dataset's Zarr.\n\t    Zarrs can be stored in different types of data stores, for example IPLD, S3, and the local filesystem, each of which is accessed slightly\n", "    differently in Python. This class abstracts the access to the underlying data store by providing functions that access the Zarr on the store\n\t    in a uniform way, regardless of which is being used.\n\t    \"\"\"\n\t    def __init__(self, dm: dataset_manager.DatasetManager):\n\t        \"\"\"\n\t        Create a new `StoreInterface`. Pass the dataset manager this store is being associated with, so the interface will have access to\n\t        dataset properties.\n\t        Parameters\n\t        ----------\n\t        dm : dataset_manager.DatasetManager\n", "            The dataset to be read or written.\n\t        \"\"\"\n\t        self.dm = dm\n\t    @abstractmethod\n\t    def mapper(self, **kwargs: dict) -> collections.abc.MutableMapping:\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n\t        **kwargs : dict\n\t            Implementation specific keywords\n", "        Returns\n\t        -------\n\t        collections.abc.MutableMapping\n\t            A key/value mapping of files to contents\n\t        \"\"\"\n\t        pass\n\t    @property\n\t    @abstractmethod\n\t    def has_existing(self) -> bool:\n\t        \"\"\"\n", "        Returns\n\t        -------\n\t        bool\n\t            Return `True` if there is existing data for this dataset on the store.\n\t        \"\"\"\n\t        pass\n\t    def dataset(self, **kwargs: dict) -> xr.Dataset | None:\n\t        \"\"\"\n\t        Parameters\n\t        ----------\n", "        **kwargs\n\t            Implementation specific keyword arguments to forward to `StoreInterface.mapper`. S3 and Local accept `refresh`, and IPLD accepts `set_root`.\n\t        Returns\n\t        -------\n\t        xr.Dataset | None\n\t            The dataset opened in xarray or None if there is no dataset currently stored.\n\t        \"\"\"\n\t        if self.has_existing:\n\t            return xr.open_zarr(self.mapper(**kwargs))\n\t        else:\n", "            return None\n\tclass S3(StoreInterface):\n\t    \"\"\"\n\t    Provides an interface for reading and writing a dataset's Zarr on S3.\n\t    To connect to a Zarr on S3 (i.e., at \"s3://[bucket]/[dataset_json_key].zarr\"), create a new S3 object using a `dataset_manager.DatasetManager` object\n\t    and bucket name, and define both `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` in the ~/.aws/credentials file or shell environment.\n\t    After initialization, use the member functions to access the Zarr. For example, call `S3.mapper` to get a `MutableMapping` that can be passed to\n\t    `xarray.open_zarr` and `xarray.to_zarr`.\n\t    \"\"\"\n\t    def __init__(self, dm: dataset_manager.DatasetManager, bucket: str):\n", "        \"\"\"\n\t        Get an interface to a dataset's Zarr on S3 in the specified bucket.\n\t        Parameters\n\t        ----------\n\t        dm : dataset_manager.DatasetManager\n\t            The dataset to be read or written.\n\t        bucket : str\n\t            The name of the S3 bucket to connect to (s3://[bucket])\n\t        \"\"\"\n\t        super().__init__(dm)\n", "        if not bucket:\n\t            raise ValueError(\"Must provide bucket name if parsing to S3\")\n\t        self.bucket = bucket\n\t    def fs(self, refresh: bool = False) -> s3fs.S3FileSystem:\n\t        \"\"\"\n\t        Get an `s3fs.S3FileSystem` object. No authentication is performed on this step. Authentication will be performed according to the rules\n\t        at https://s3fs.readthedocs.io/en/latest/#credentials when accessing the data.\n\t        By default, the filesystem is only created once, the first time this function is called. To force it create a new one, set `refresh`\n\t        to `True`.\n\t        Parameters\n", "        ----------\n\t        refresh : bool\n\t            If set to `True`, a new `s3fs.S3FileSystem` will be created even if this object has one already\n\t        Returns\n\t        -------\n\t        s3fs.S3FileSystem\n\t            A filesystem object for interfacing with S3\n\t        \"\"\"\n\t        if refresh or not hasattr(self, \"_fs\"):\n\t            self._fs = s3fs.S3FileSystem()\n", "            self.dm.info(\"Initialized S3 filesystem. Credentials will be looked up according to rules at https://s3fs.readthedocs.io/en/latest/#credentials\")\n\t        return self._fs\n\t    @property\n\t    def url(self) -> str:\n\t        \"\"\"\n\t        Get the S3-protocol URL to the parent `DatasetManager`'s Zarr .\n\t        Returns\n\t        -------\n\t        str\n\t            A URL string starting with \"s3://\" followed by the path to the Zarr.\n", "        \"\"\"\n\t        return f\"s3://{self.bucket}/datasets/{self.dm.json_key()}.zarr\"\n\t    def __str__(self) -> str:\n\t        return self.url\n\t    def mapper(self, refresh: bool = False, **kwargs: dict) -> fsspec.mapping.FSMap:\n\t        \"\"\"\n\t        Get a `MutableMapping` representing the S3 key/value store. By default, the mapper will be created only once, when this function is first\n\t        called. To force a new mapper, set `refresh` to `True`.\n\t        Parameters\n\t        ----------\n", "        refresh : bool\n\t            Set to `True` to force a new mapper to be created even if this object has one already\n\t        **kwargs : dict\n\t            Arbitrary keyword args supported for compatibility with IPLD.\n\t        Returns\n\t        -------\n\t        s3fs.S3Map\n\t            A `MutableMapping` which is the S3 key/value store\n\t        \"\"\"\n\t        if refresh or not hasattr(self, \"_mapper\"):\n", "            self._mapper = s3fs.S3Map(root=self.url, s3=self.fs())\n\t        return self._mapper\n\t    @property\n\t    def has_existing(self) -> bool:\n\t        \"\"\"\n\t        Returns\n\t        -------\n\t        bool\n\t            Return `True` if there is a Zarr at `S3.url`\n\t        \"\"\"\n", "        return self.fs().exists(self.url)\n\t    def push_metadata(self, title: str, stac_content: dict, stac_type: str):\n\t        \"\"\"\n\t        Publish metadata entity to s3 store. Tracks historical state\n\t        of metadata as well\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_content : dict\n", "            content of the stac entity\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n\t        if self.fs().exists(metadata_path):\n\t            # Generate history file\n\t            old_mod_time = self.fs().ls(metadata_path, detail=True)[0][\"LastModified\"]\n\t            history_file_name = f\"{title}-{old_mod_time.isoformat(sep='T')}.json\"\n", "            history_path = f\"s3://{self.bucket}/history/{title}/{history_file_name}\"\n\t            self.fs().copy(metadata_path, history_path)\n\t        self.fs().write_text(metadata_path, json.dumps(stac_content))\n\t    def retrieve_metadata(self, title: str, stac_type: str) -> tuple[dict, str]:\n\t        \"\"\"\n\t        Retrieve metadata entity from s3 store\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n", "        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        Returns\n\t        -------\n\t        dict\n\t            Tuple of content of stac entity as dict and the s3 path as a string\n\t        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n\t        return json.loads(self.fs().cat(metadata_path)), metadata_path\n", "    def metadata_exists(self, title: str, stac_type: str) -> bool:\n\t        \"\"\"\n\t        Check whether metadata exists at a given s3 path\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n", "        Returns\n\t        -------\n\t        bool\n\t            Whether metadata exists at path\n\t        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n\t        return self.fs().exists(metadata_path)\n\t    def get_metadata_path(self, title: str, stac_type: str) -> str:\n\t        \"\"\"\n\t        Get the s3 path for a given STAC title and type\n", "        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        Returns\n\t        -------\n\t        str\n", "            The s3 path for this entity as a string\n\t        \"\"\"\n\t        if stac_type:\n\t            return f\"s3://{self.bucket}/metadata/{stac_type}/{title}.json\"\n\t        else:\n\t            return f\"s3://{self.bucket}/metadata/{title}.json\"\n\tclass IPLD(StoreInterface):\n\t    \"\"\"\n\t    Provides an interface for reading and writing a dataset's Zarr on IPLD.\n\t    If there is existing data for the dataset, it is assumed to be stored at the hash returned by `IPLD.dm.latest_hash`, and the mapper will\n", "    return a hash that can be used to retrieve the data. If there is no existing data, or the mapper is called without `set_root`, an unrooted\n\t    IPFS mapper will be returned that can be used to write new data to IPFS and generate a new recursive hash.\n\t    \"\"\"\n\t    def mapper(self, set_root: bool = True, refresh: bool = False, **kwargs: dict) -> ipldstore.IPLDStore:\n\t        \"\"\"\n\t        Get an IPLD mapper by delegating to `ipldstore.get_ipfs_mapper`, passing along an IPFS chunker value if the associated dataset's\n\t        `requested_ipfs_chunker` property has been set.\n\t        If `set_root` is `False`, the root will not be set to the latest hash, so the mapper can be used to open a new Zarr on the IPLD\n\t        datastore. Otherwise, `DatasetManager.latest_hash` will be used to get the latest hash (which is stored in the STAC at the IPNS key\n\t        for the dataset).\n", "        Parameters\n\t        ----------\n\t        set_root : bool\n\t            Return a mapper rooted at the dataset's latest hash if `True`, otherwise return a new mapper.\n\t        refresh : bool\n\t            Force getting a new mapper by checking the latest IPNS hash. Without this set, the mapper will only be set the first time this\n\t            function is called.\n\t        **kwargs\n\t            Arbitrary keyword args supported for compatibility with S3 and Local.\n\t        Returns\n", "        -------\n\t        ipldstore.IPLDStore\n\t            An IPLD `MutableMapping`, usable, for example, to open a Zarr with `xr.open_zarr`\n\t        \"\"\"\n\t        if refresh or not hasattr(self, \"_mapper\"):\n\t            if self.dm.requested_ipfs_chunker:\n\t                self._mapper = ipldstore.get_ipfs_mapper(host=self.dm._host, chunker=self.dm.requested_ipfs_chunker)\n\t            else:\n\t                self._mapper = ipldstore.get_ipfs_mapper(host=self.dm._host)\n\t            self.dm.info(f\"IPFS chunker is {self._mapper._store._chunker}\")\n", "            if set_root and self.dm.latest_hash():\n\t                self._mapper.set_root(self.dm.latest_hash())\n\t        return self._mapper\n\t    def __str__(self) -> str:\n\t        \"\"\"\n\t        Returns\n\t        -------\n\t        str\n\t            The path as \"/ipfs/[hash]\". If the hash has not been determined, just return \"/ipfs/\".\n\t        \"\"\"\n", "        if not self.dm.latest_hash():\n\t            return \"/ipfs/\"\n\t        else:\n\t            return f\"/ipfs/{self.dm.latest_hash()}\"\n\t    @property\n\t    def has_existing(self) -> bool:\n\t        \"\"\"\n\t        Returns\n\t        -------\n\t        bool\n", "            Return `True` if the dataset has a latest hash, or `False` otherwise.\n\t        \"\"\"\n\t        return bool(self.dm.latest_hash())\n\tclass Local(StoreInterface):\n\t    \"\"\"\n\t    Provides an interface for reading and writing a dataset's Zarr on the local filesystem.\n\t    The path of the Zarr is assumed to be the return value of `Local.dm.output_path`. That is the path used automatically under normal conditions, so this\n\t    class doesn't provide a way to use any other path.\n\t    \"\"\"\n\t    def fs(self, refresh: bool = False) -> fsspec.implementations.local.LocalFileSystem:\n", "        \"\"\"\n\t        Get an `fsspec.implementations.local.LocalFileSystem` object. By default, the filesystem is only created once, the first time this function is\n\t        called. To force it create a new one, set `refresh` to `True`.\n\t        Parameters\n\t        ----------\n\t        refresh : bool\n\t            If set to `True`, a new `fsspec.implementations.local.LocalFileSystem` will be created even if this object has one already\n\t        Returns\n\t        -------\n\t        fsspec.implementations.local.LocalFileSystem\n", "            A filesystem object for interfacing with the local filesystem\n\t        \"\"\"\n\t        if refresh or not hasattr(self, \"_fs\"):\n\t            self._fs = fsspec.filesystem(\"file\")\n\t        return self._fs\n\t    def mapper(self, refresh=False, **kwargs) -> fsspec.mapping.FSMap:\n\t        \"\"\"\n\t        Get a `MutableMapping` representing a local filesystem key/value store.\n\t        By default, the mapper will be created only once, when this function is first\n\t        called. To force a new mapper, set `refresh` to `True`.\n", "        Parameters\n\t        ----------\n\t        refresh : bool\n\t            Set to `True` to force a new mapper to be created even if this object has one already.\n\t        **kwargs : dict\n\t            Arbitrary keyword args supported for compatibility with IPLD.\n\t        Returns\n\t        -------\n\t        fsspec.mapping.FSMap\n\t            A `MutableMapping` which is a key/value representation of the local filesystem\n", "        \"\"\"\n\t        if refresh or not hasattr(self, \"_mapper\"):\n\t            self._mapper = self.fs().get_mapper(self.path)\n\t        return self._mapper\n\t    def __str__(self) -> str:\n\t        return str(self.path)\n\t    @property\n\t    def path(self) -> pathlib.Path:\n\t        \"\"\"\n\t        Returns\n", "        -------\n\t        pathlib.Path\n\t            Path to the Zarr on the local filesystem\n\t        \"\"\"\n\t        return self.dm.output_path().joinpath(f\"{self.dm.name()}.zarr\")\n\t    @property\n\t    def has_existing(self) -> bool:\n\t        \"\"\"\n\t        Returns\n\t        -------\n", "        bool\n\t            Return `True` if there is a local Zarr for this dataset, `False` otherwise.\n\t        \"\"\"\n\t        return self.path.exists()\n\t    def push_metadata(self, title: str, stac_content: dict, stac_type: str):\n\t        \"\"\"\n\t        Publish metadata entity to local store. Tracks historical state\n\t        of metadata as well\n\t        Parameters\n\t        ----------\n", "        title : str\n\t            STAC Entity title\n\t        stac_content : dict\n\t            content of the stac entity\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n\t        if pathlib.Path.exists(metadata_path):\n", "            # Generate history file\n\t            old_mod_time = datetime.datetime.fromtimestamp(\n\t                metadata_path.stat().st_mtime\n\t            )\n\t            history_path = (\n\t                pathlib.Path()\n\t                / \"history\"\n\t                / title\n\t                / f\"{title}-{old_mod_time.isoformat(sep='T')}.json\"\n\t            )\n", "            history_path.parent.mkdir(exist_ok=True, parents=True)\n\t            shutil.copy(metadata_path, history_path)\n\t        # Write new metadata to file (may overwrite)\n\t        metadata_path.parent.mkdir(exist_ok=True, parents=True)\n\t        with open(metadata_path, \"w\") as f:\n\t            json.dump(stac_content, f)\n\t    def retrieve_metadata(self, title: str, stac_type: str) -> tuple[dict, str]:\n\t        \"\"\"\n\t        Retrieve metadata entity from local store\n\t        Parameters\n", "        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        Returns\n\t        -------\n\t        dict\n\t            Tuple of content of stac entity as dict and the local path as a string\n", "        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n\t        with open(metadata_path) as f:\n\t            return json.load(f), str(metadata_path)\n\t    def metadata_exists(self, title: str, stac_type: str) -> bool:\n\t        \"\"\"\n\t        Check whether metadata exists at a given local path\n\t        Parameters\n\t        ----------\n\t        title : str\n", "            STAC Entity title\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n\t            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        Returns\n\t        -------\n\t        bool\n\t            Whether metadata exists at path\n\t        \"\"\"\n\t        metadata_path = self.get_metadata_path(title, stac_type)\n", "        return pathlib.Path.exists(metadata_path)\n\t    def get_metadata_path(self, title: str, stac_type: str) -> pathlib.Path:\n\t        \"\"\"\n\t        Get the local path for a given STAC title and type\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Path part corresponding to type of STAC entity\n", "            (empty string for Catalog, 'collections' for Collection or 'datasets' for Item)\n\t        Returns\n\t        -------\n\t        str\n\t            The s3 path for this entity as a pathlib.Path\n\t        \"\"\"\n\t        return (pathlib.Path() / \"metadata\" / stac_type / f\"{title}.json\").resolve()\n"]}
{"filename": "gridded_etl_tools/utils/metadata.py", "chunked_list": ["from enum import Enum\n\timport json\n\timport datetime\n\timport shapely\n\timport numcodecs\n\timport numpy as np\n\timport xarray as xr\n\tfrom shapely import geometry  # must be imported by name or shapely.geometry calls will fail\n\tfrom .ipfs import IPFS\n\tfrom .convenience import Convenience\n", "from .store import IPLD, Local\n\tfrom abc import abstractmethod\n\tfrom requests.exceptions import Timeout as TimeoutError\n\tclass Metadata(Convenience, IPFS):\n\t    \"\"\"\n\t    Base class containing metadata creation and editing methods Zarr ETLs\n\t    Includes STAC Metadata templates for Items, Collections, and the root Catalog\n\t    \"\"\"\n\t    @classmethod\n\t    def default_stac_item(cls) -> dict:\n", "        \"\"\"\n\t        Default metadata template for STAC Items\n\t        Returns\n\t        -------\n\t        dict\n\t            The STAC Item metadata template with all pre-fillable values populated\n\t        \"\"\"\n\t        return {\n\t            \"stac_version\": \"1.0.0\",\n\t            \"type\": \"Feature\",\n", "            \"id\": cls.name(),\n\t            \"collection\": cls.collection(),\n\t            \"links\": [],\n\t            \"assets\": {\n\t                \"zmetadata\": {\n\t                    \"title\": cls.name(),\n\t                    \"type\": \"application/json\",\n\t                    \"description\": f\"Consolidated metadata file for {cls.name()} Zarr store, readable as a Zarr dataset by Xarray\",\n\t                    \"roles\": [\"metadata\", \"zarr-consolidated-metadata\"],\n\t                }\n", "            },\n\t        }\n\t    @property\n\t    def default_stac_collection(self) -> dict:\n\t        \"\"\"\n\t        Default metadata template for STAC collections\n\t        Returns\n\t        -------\n\t        dict\n\t            The STAC Collection metadata template with all pre-fillable values populated\n", "        \"\"\"\n\t        return {\n\t            \"id\": self.collection(),\n\t            \"type\": \"Collection\",\n\t            \"stac_extensions\": [\n\t                \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"\n\t            ],\n\t            \"stac_version\": \"1.0.0\",\n\t            \"description\": self.metadata[\"provider description\"],\n\t            \"license\": self.metadata[\"license\"],\n", "            \"collection\": self.collection(),\n\t            \"title\": self.metadata[\"title\"],\n\t            \"extent\": {\"spatial\": {\"bbox\": [[]]}, \"temporal\": {\"interval\": [[]]}},\n\t            \"links\": [\n\t                {\"rel\": \"self\", \"type\": \"application/json\", \"title\": self.collection()}\n\t            ],\n\t            \"providers\": [\n\t                {\n\t                    \"name\": f\"{self.host_organization()}\",\n\t                    \"description\": \"\",  # provide description for your organization here\n", "                    \"roles\": [\"processor\"],  #\n\t                    \"url\": \"\",  # provide URL for your organization here\n\t                },\n\t                {\n\t                    \"name\": self.metadata[\"publisher\"],\n\t                    \"description\": self.metadata[\"provider description\"],\n\t                    \"roles\": [\"producer\"],\n\t                    \"url\": self.metadata[\"provider url\"],\n\t                    \"terms of service\": self.metadata[\"terms of service\"],\n\t                },\n", "            ],\n\t            \"summaries\": {\"proj:epsg\": self.metadata[\"coordinate reference system\"]},\n\t        }\n\t    @classmethod\n\t    def default_root_stac_catalog(cls) -> dict:\n\t        \"\"\"\n\t        Default metadata template for the {self.host_organization()} root Catalog\n\t        Returns\n\t        -------\n\t        dict\n", "            The STAC Catalog metadata template with all pre-fillable values populated\n\t        \"\"\"\n\t        return {\n\t            \"id\": f\"{cls.host_organization()}_data_catalog\",\n\t            \"type\": \"Catalog\",\n\t            \"title\": f\"{cls.host_organization()} Data Catalog\",\n\t            \"stac_version\": \"1.0.0\",\n\t            \"description\": f\"This catalog contains all the data uploaded to {cls.host_organization()} \\\n\t                that has been issued STAC-compliant metadata. The catalogs and collections describe single providers. \\\n\t                Each may contain one or multiple datasets. Each individual dataset has been documented as STAC Items.\",\n", "        }\n\t    @abstractmethod\n\t    def static_metadata(cls):\n\t        \"\"\"\n\t        Placeholder for static metadata pertaining to each ETL\n\t        \"\"\"\n\t        ...\n\t    def check_stac_exists(self, title: str, stac_type: \"StacType\") -> bool:\n\t        \"\"\"Check if a STAC entity exists in the backing store\n\t        Parameters\n", "        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Type of STAC entity (Catalog, Collection or Item)\n\t        Returns\n\t        -------\n\t        bool\n\t            Whether the entity exists in the backing store\n\t        \"\"\"\n", "        if isinstance(self.store, IPLD):\n\t            return self.check_stac_on_ipns(title)\n\t        else:\n\t            return self.store.metadata_exists(title, stac_type.value)\n\t    def publish_stac(self, title: str, stac_content: dict, stac_type: \"StacType\"):\n\t        \"\"\"Publish a STAC entity to the backing store\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n", "        stac_content : dict\n\t            content of the stac entity\n\t        stac_type : StacType\n\t            Type of STAC entity (Catalog, Collection or Item)\n\t        \"\"\"\n\t        if isinstance(self.store, IPLD):\n\t            self.ipns_publish(title, self.ipfs_put(self.json_to_bytes(stac_content)))\n\t        else:\n\t            self.store.push_metadata(title, stac_content, stac_type.value)\n\t    def retrieve_stac(self, title: str, stac_type: \"StacType\") -> tuple[dict, str]:\n", "        \"\"\"Retrieve a STAC entity and its href from the backing store\n\t        Parameters\n\t        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Type of STAC entity (Catalog, Collection or Item)\n\t        Returns\n\t        -------\n\t        tuple[dict, str | pathlib.Path]\n", "            tuple of STAC content and the href for the STAC\n\t        \"\"\"\n\t        if isinstance(self.store, IPLD):\n\t            return self.ipns_retrieve_object(title)\n\t        else:\n\t            return self.store.retrieve_metadata(title, stac_type.value)\n\t    def get_href(self, title: str, stac_type: \"StacType\") -> str:\n\t        \"\"\"Get a STAC entity's href from the backing store. Might be\n\t        an IPNS name, a local path or a s3 path depending on the store\n\t        Parameters\n", "        ----------\n\t        title : str\n\t            STAC Entity title\n\t        stac_type : StacType\n\t            Type of STAC entity (Catalog, Collection or Item)\n\t        Returns\n\t        -------\n\t        str\n\t            string representation of href.\n\t        \"\"\"\n", "        if isinstance(self.store, IPLD):\n\t            return self.ipns_generate_name(key=title)\n\t        else:\n\t            return str(self.store.get_metadata_path(title, stac_type.value))\n\t    def create_root_stac_catalog(self):\n\t        \"\"\"\n\t        Prepare a root catalog for your organization if it doesn't already exist.\n\t        \"\"\"\n\t        root_catalog = self.default_root_stac_catalog()\n\t        root_catalog_exists = self.check_stac_exists(\n", "            root_catalog[\"title\"], StacType.CATALOG\n\t        )\n\t        if not root_catalog_exists:\n\t            # Publish the root catalog if it doesn't exist\n\t            self.info(f\"Publishing root {self.host_organization()} STAC Catalog\")\n\t            catalog_href = self.get_href(root_catalog[\"title\"], StacType.CATALOG)\n\t            root_catalog[\"links\"] = [\n\t                {\n\t                    \"rel\": \"root\",\n\t                    \"href\": catalog_href,\n", "                    \"type\": \"application/json\",\n\t                    \"title\": f\"{self.host_organization()} root catalog\",\n\t                },\n\t                {\n\t                    \"rel\": \"self\",\n\t                    \"href\": catalog_href,\n\t                    \"type\": \"application/json\",\n\t                    \"title\": f\"{self.host_organization()} root catalog\",\n\t                },\n\t            ]\n", "            self.publish_stac(root_catalog[\"title\"], root_catalog, StacType.CATALOG)\n\t        else:\n\t            self.info(\n\t                f\"Root {self.host_organization()} STAC Catalog already exists, building collection\"\n\t            )\n\t            ...\n\t    def create_stac_collection(self, dataset: xr.Dataset, rebuild: bool = False):\n\t        \"\"\"\n\t        Prepare a parent collection for the dataset the first time it's created.\n\t        In order to check for the collection's existence we must populate the relevant dictionary first in order to use its attributes.\n", "        Parameters\n\t        ----------\n\t        dataset : xr.Dataset\n\t            The dataset being published\n\t        rebuild : bool, optional\n\t            Whether to recreate the STAC Collection from scratch or not\n\t        Returns\n\t        -------\n\t        bool\n\t            Whether the stac collection was created\n", "        \"\"\"\n\t        stac_coll = self.default_stac_collection\n\t        # Check if the collection already exists to avoid duplication of effort\n\t        # Populate and publish a collection if one doesn't exist, or a rebuild was requested\n\t        if rebuild or not self.check_stac_exists(\n\t            self.collection(), StacType.COLLECTION\n\t        ):\n\t            if rebuild:\n\t                self.info(\n\t                    \"Collection rebuild requested. Creating new collection, pushing it to IPFS, and populating the main catalog\"\n", "                )\n\t            # Populate data-driven attributes of the collection\n\t            minx, miny, maxx, maxy = self.bbox_coords(dataset)\n\t            stac_coll[\"extent\"][\"spatial\"][\"bbox\"] = [[minx, miny, maxx, maxy]]\n\t            stac_coll[\"extent\"][\"temporal\"][\"interval\"] = [\n\t                [\n\t                    self.numpydate_to_py(dataset[self.time_dim].values.min()).isoformat() + \"Z\",\n\t                    self.numpydate_to_py(dataset[self.time_dim].values.max()).isoformat() + \"Z\",\n\t                ]\n\t            ]\n", "            # Create an href corresponding to the collection in order to note this in the collection and root catalog.\n\t            href = self.get_href(self.collection(), StacType.COLLECTION)\n\t            # Append collection to the root catalog if it doesn't already exist\n\t            root_catalog, root_catalog_href = self.retrieve_stac(\n\t                self.default_root_stac_catalog()[\"title\"], StacType.CATALOG\n\t            )\n\t            if not any(\n\t                stac_coll[\"title\"] in link_dict.values()\n\t                for link_dict in root_catalog[\"links\"]\n\t            ):\n", "                self.info(\n\t                    f\"Appending collection link to root {self.host_organization()} STAC Catalog\"\n\t                )\n\t                root_catalog[\"links\"].append(\n\t                    {\n\t                        \"rel\": \"child\",\n\t                        \"href\": href,\n\t                        \"type\": \"application/json\",\n\t                        \"title\": stac_coll[\"title\"],\n\t                    }\n", "                )\n\t                self.publish_stac(\n\t                    root_catalog[\"title\"],\n\t                    root_catalog,\n\t                    StacType.CATALOG,\n\t                )\n\t            # Add links and publish this collection\n\t            for link_dict in stac_coll[\"links\"]:\n\t                if link_dict[\"rel\"] == \"self\":\n\t                    link_dict[\"href\"] = href\n", "            stac_coll[\"links\"] = stac_coll[\"links\"] + [\n\t                {\n\t                    \"rel\": \"root\",\n\t                    \"href\": root_catalog_href,\n\t                    \"type\": \"application/json\",\n\t                    \"title\": f\"{self.host_organization()} root catalog\",\n\t                },\n\t                {\n\t                    \"rel\": \"parent\",\n\t                    \"href\": root_catalog_href,\n", "                    \"type\": \"application/json\",\n\t                    \"title\": f\"{self.host_organization()} root catalog\",\n\t                },\n\t            ]\n\t            self.publish_stac(self.collection(), stac_coll, StacType.COLLECTION)\n\t        else:\n\t            self.info(\n\t                \"Found existing STAC Collection for this dataset, skipping creation and updating instead\"\n\t            )\n\t            self.update_stac_collection(dataset)\n", "    def create_stac_item(self, dataset: xr.Dataset):\n\t        \"\"\"\n\t        Reformat previously prepared metadata and prepare key overviews of a dataset's spatial, temporal, and data dimensions into a STAC Item-compliant JSON.\n\t        Push this JSON to IPFS and its relevant parent STAC Collection via `register_stac_item`\n\t        Parameters\n\t        ----------\n\t        dataset : xr.Dataset\n\t            The dataset being published\n\t        \"\"\"\n\t        self.info(\"Creating STAC Item\")\n", "        stac_item = self.default_stac_item()\n\t        # Filter relevant existing metadata from the Zarr, flatten to a single level, and output as a dict for the \"properties\" key in STAC metadata\n\t        properties_dict = self.zarr_md_to_stac_format(dataset)\n\t        # Include the array size\n\t        properties_dict[\"array_size\"] = {\n\t            \"latitude\": dataset.latitude.size,\n\t            \"longitude\": dataset.longitude.size,\n\t            self.time_dim : dataset[self.time_dim].size,\n\t        }\n\t        if self.time_dim == 'forecast_reference_time':\n", "            properties_dict[\"array_size\"].update({\"step\" : dataset.step.size})\n\t        # Set up date items in STAC-compliant style\n\t        properties_dict[\"start_datetime\"] = (\n\t            self.numpydate_to_py(dataset[self.time_dim].values[0]).isoformat() + \"Z\"\n\t        )\n\t        properties_dict[\"end_datetime\"] = (\n\t            self.numpydate_to_py(dataset[self.time_dim].values[-1]).isoformat() + \"Z\"\n\t        )\n\t        properties_dict[\"updated\"] = (\n\t            datetime.datetime.utcnow()\n", "            .replace(tzinfo=datetime.timezone.utc)\n\t            .isoformat()[:-13]\n\t            + \"Z\"\n\t        )\n\t        # Populate the empty STAC Item\n\t        minx, miny, maxx, maxy = self.bbox_coords(dataset)\n\t        stac_item[\"bbox\"] = [minx, miny, maxx, maxy]\n\t        stac_item[\"geometry\"] = json.dumps(\n\t            shapely.geometry.mapping(shapely.geometry.box(minx, miny, maxx, maxy))\n\t        )\n", "        if isinstance(self.store, IPLD):\n\t            zarr_href = {\"/\": self.latest_hash()}\n\t        elif isinstance(self.store, Local):\n\t            zarr_href = str(self.store.path)\n\t        else:\n\t            zarr_href = self.store.url\n\t        stac_item[\"assets\"][\"zmetadata\"][\"href\"] = zarr_href\n\t        stac_item[\"properties\"] = properties_dict\n\t        # Push to backing store w/ link to href\n\t        self.register_stac_item(stac_item)\n", "    def zarr_md_to_stac_format(self, dataset: xr.Dataset) -> dict:\n\t        \"\"\"\n\t        Reduce attributes metadata of a Zarr dataset to a flat dictionary with STAC-compliant keys and values\n\t        Parameters\n\t        ----------\n\t        dataset : xr.Dataset\n\t            The dataset being published\n\t        Returns\n\t        -------\n\t        dict\n", "            Single-level dictionary containing all relevant metadata fields from the Zarr dataset with STAC-compliant names and formats\n\t        \"\"\"\n\t        # Filter down and name correctly needed attributes\n\t        zarr_attrs = {\n\t            \"missing value\",\n\t            \"dtype\",\n\t            \"preferred_chunks\",\n\t            \"Conventions\",\n\t            \"spatial resolution\",\n\t            \"spatial precision\",\n", "            \"temporal resolution\",\n\t            \"update cadence\",\n\t            \"unit of measurement\",\n\t            \"tags\",\n\t            \"standard name\",\n\t            \"long name\",\n\t            \"date range\",\n\t            \"dataset description\",\n\t            \"dataset download url\",\n\t            \"created\",\n", "            \"updated\",\n\t            \"finalization date\",\n\t            \"analysis data download url\",\n\t            \"reanalysis data download url\",\n\t            \"input history cid\",\n\t            \"input history JSON documentation\",\n\t        }\n\t        all_md = {\n\t            **dataset.attrs,\n\t            **dataset.encoding,\n", "            **dataset[self.data_var()].encoding,\n\t        }\n\t        all_md = {key: all_md[key] for key in zarr_attrs if key in all_md}\n\t        rename_dict = {\n\t            \"preferred_chunks\": \"Zarr chunk size\",\n\t            \"missing value\": \"Fill value\",\n\t            \"Conventions\": \"CF convention\",\n\t        }\n\t        properties_dict = {rename_dict.get(k, k): v for k, v in all_md.items()}\n\t        # Reformat attributes\n", "        for k, v in properties_dict.items():\n\t            if type(v) is np.float32:\n\t                properties_dict[k] = round(\n\t                    float(v), 8\n\t                )  # np.float32s aren't JSON serializable\n\t        properties_dict[\"dtype\"] = str(properties_dict[\"dtype\"])\n\t        return properties_dict\n\t    def register_stac_item(self, stac_item: dict):\n\t        \"\"\"'\n\t        Register a new dataset in an existing STAC Collection and/or replace a dataset's STAC Item with an updated one\n", "        Parameters\n\t        ----------\n\t        stac_item : dict\n\t            A dictionary of metadata prepared in `create_stac_item` for publication as a standalone STAC metadata file\n\t        \"\"\"\n\t        self.info(\"Registering STAC Item in IPFS and its parent STAC Collection\")\n\t        # Generate variables of interest\n\t        stac_coll, collection_href = self.retrieve_stac(\n\t            str(self.collection()), StacType.COLLECTION\n\t        )\n", "        # Register links\n\t        stac_item[\"links\"].append(\n\t            {\n\t                \"rel\": \"parent\",\n\t                \"href\": str(collection_href),\n\t                \"type\": \"application/geo+json\",\n\t                \"title\": stac_coll[\"title\"],\n\t            }\n\t        )\n\t        # Check if an older version of the STAC Item exists and if so create a \"previous\" link for them in the new STAC Item\n", "        try:\n\t            old_stac_item, href = self.retrieve_stac(self.json_key(), StacType.ITEM)\n\t            if isinstance(self.store, IPLD):\n\t                # If IPLD, generate the previous hash link\n\t                old_item_ipfs_hash = self.ipns_resolve(self.json_key())\n\t                self.info(\"Updating 'previous' link in dataset's STAC Item\")\n\t                stac_item[\"links\"].append(\n\t                    {\n\t                        \"rel\": \"prev\",\n\t                        \"href\": str(\n", "                            old_stac_item[\"assets\"][\"zmetadata\"][\"href\"].set(\n\t                                base=self._default_base\n\t                            )\n\t                        ),  # convert CID object back to hash str\n\t                        \"metadata href\": {\"/\": old_item_ipfs_hash},\n\t                        \"type\": \"application/geo+json\",\n\t                        \"title\": stac_item[\"assets\"][\"zmetadata\"][\"title\"],\n\t                    }\n\t                )\n\t        except (KeyError, TimeoutError, FileNotFoundError):\n", "            # Otherwise create a STAC name for your new dataset\n\t            self.info(\"No previous STAC Item found\")\n\t            href = self.get_href(self.json_key(), StacType.ITEM)\n\t        stac_item[\"links\"].append(\n\t            {\n\t                \"rel\": \"self\",\n\t                \"href\": str(href),\n\t                \"type\": \"application/geo+json\",\n\t                \"title\": f\"{self.name()} metadata\",\n\t            }\n", "        )\n\t        # push final STAC Item to backing store\n\t        self.info(\"Pushing STAC Item to backing store\")\n\t        self.publish_stac(self.json_key(), stac_item, StacType.ITEM)\n\t        # register item as a link in the relevant collection, if not already there, and push updated collection to IPFS\n\t        if any(\n\t            stac_item[\"assets\"][\"zmetadata\"][\"title\"] in link_dict[\"title\"]\n\t            for link_dict in stac_coll[\"links\"]\n\t            if \"title\" in link_dict.keys()\n\t        ):\n", "            self.info(\"Found existing STAC Item in STAC Collection\")\n\t            ...\n\t        else:\n\t            self.info(\n\t                \"No existing STAC Item found in this dataset's parent collection, inserting a child link\"\n\t            )\n\t            # register hrefs in both the Item and Collection and publish updated objects\n\t            stac_coll[\"links\"].append(\n\t                {\n\t                    \"rel\": \"item\",\n", "                    \"href\": str(href),\n\t                    \"type\": \"application/json\",\n\t                    \"title\": stac_item[\"assets\"][\"zmetadata\"][\"title\"],\n\t                }\n\t            )\n\t            self.publish_stac(self.collection(), stac_coll, StacType.COLLECTION)\n\t    def update_stac_collection(self, dataset: xr.Dataset):\n\t        \"\"\"'\n\t        Update fields in STAC Collection corresponding to a dataset\n\t        Parameters\n", "        ----------\n\t        dataset : xr.Dataset\n\t            The dataset being published\n\t        \"\"\"\n\t        self.info(\"Updating dataset's parent STAC Collection\")\n\t        # Get existing STAC Collection and add new datasets to it, if necessary\n\t        stac_coll = self.retrieve_stac(self.collection(), StacType.COLLECTION)[0]\n\t        # Update spatial extent\n\t        min_bbox_coords = np.minimum(\n\t            stac_coll[\"extent\"][\"spatial\"][\"bbox\"][0], [self.bbox_coords(dataset)]\n", "        )[0][0:2]\n\t        max_bbox_coords = np.maximum(\n\t            stac_coll[\"extent\"][\"spatial\"][\"bbox\"][0], [self.bbox_coords(dataset)]\n\t        )[0][2:4]\n\t        stac_coll[\"extent\"][\"spatial\"][\"bbox\"] = [\n\t            list(np.concatenate([min_bbox_coords, max_bbox_coords]))\n\t        ]\n\t        # Update time interval\n\t        stac_coll[\"extent\"][\"temporal\"][\"interval\"] = [\n\t            [\n", "                self.numpydate_to_py(dataset[self.time_dim].values.min()).isoformat() + \"Z\",\n\t                self.numpydate_to_py(dataset[self.time_dim].values.max()).isoformat() + \"Z\",\n\t            ]\n\t        ]\n\t        # Publish STAC Collection with updated fields\n\t        self.publish_stac(self.collection(), stac_coll, StacType.COLLECTION)\n\t    def load_stac_metadata(self, key: str = None) -> str | dict:\n\t        \"\"\"\n\t        Return the latest version of a dataset's STAC Item from IPFS\n\t        Parameters\n", "        ----------\n\t        key : str\n\t            The human readable IPNS key string referencing a given object\n\t        Returns\n\t        -------\n\t        str | dict\n\t            Either an IPNS name hash or an empty dictionary (if no IPNS name hash found)\n\t        \"\"\"\n\t        if isinstance(self.store, IPLD):\n\t            if not key:\n", "                key = self.json_key()\n\t            try:\n\t                return self.retrieve_stac(key, StacType.ITEM)[0]\n\t            except (KeyError, TimeoutError):\n\t                self.warn(\n\t                    \"STAC metadata requested but no STAC object found at the provided key. Returning empty dictionary\"\n\t                )\n\t                return {}\n\t    # NON-STAC METADATA\n\t    def populate_metadata(self):\n", "        \"\"\"\n\t        Fill the metadata with values describing this set, using the static_metadata as a base template.\n\t        \"\"\"\n\t        if hasattr(self, \"metadata\") and self.metadata is not None:\n\t            self.metadata = self.metadata.update(self.static_metadata)\n\t        else:\n\t            self.metadata = self.static_metadata\n\t    def set_zarr_metadata(self, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n\t        Function to append to or update key metadata information to the attributes and encoding of the output Zarr.\n", "        Additionally filters out unwanted keys and fields.\n\t        Parameters\n\t        ----------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, pre-metadata update\n\t        Returns\n\t        -------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, after metadata update\n\t        \"\"\"\n", "        # Rename data variable to desired name, if necessary. Will ValueError out if the name already exists\n\t        try:\n\t            dataset = dataset.rename_vars(\n\t                {[key for key in dataset.data_vars][0]: self.data_var()}\n\t            )\n\t        except ValueError:\n\t            self.info(f\"Duplicate name conflict detected during rename, leaving {dataset.data_vars[0]} in place\")\n\t            pass\n\t        # Encode data types and missing value indicators for the data variable\n\t        dataset = self.encode_vars(dataset)\n", "        # Merge in relevant static / STAC metadata and create additional attributes\n\t        dataset = self.merge_in_outside_metadata(dataset)\n\t        # Set all fields to uncompressed and remove filters leftover from input files\n\t        dataset = self.remove_unwanted_fields(dataset)\n\t        # Xarray cannot export dictionaries or None as attributes (lists and tuples are OK)\n\t        for attr in dataset.attrs.keys():\n\t            if type(dataset.attrs[attr]) is dict or type(dataset.attrs[attr]) is None:\n\t                dataset.attrs[attr] = \"\"\n\t        return dataset\n\t    def encode_vars(self, dataset: xr.Dataset) -> xr.Dataset:\n", "        \"\"\"\n\t        Encode important data points related to the data variable.\n\t        These are useful both for reference and to control Xarray's reading/writing behavior.\n\t        Parameters\n\t        ----------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, pre-metadata update\n\t        Returns\n\t        -------\n\t        dataset : xarray.Dataset\n", "            The dataset being published, after metadata update\n\t        \"\"\"\n\t        # Encode fields for the data variable in the main encoding dict and the data var's own encoding dict (for thoroughness)\n\t        dataset.encoding = {\n\t            self.data_var(): {\n\t                \"dtype\": self.data_var_dtype,\n\t                \"_FillValue\": self.missing_value_indicator(),\n\t                \"missing_value\": self.missing_value_indicator(),  # deprecated by NUG but maintained for backwards compatibility\n\t            }\n\t        }\n", "        dataset[self.data_var()].encoding.update(\n\t            {\n\t                \"units\": self.unit_of_measurement,\n\t                \"_FillValue\": self.missing_value_indicator(),\n\t                \"missing_value\": self.missing_value_indicator(),  # deprecated by NUG but maintained for backwards compatibility\n\t                \"chunks\": tuple(val for val in self.requested_zarr_chunks.values()),\n\t                \"preferred_chunks\": self.requested_zarr_chunks,\n\t            }\n\t        )\n\t        # Encode 'time' dimension with the Climate and Forecast Convention standards used by major climate data providers.\n", "        if \"time\" in dataset:\n\t            dataset.time.encoding.update(\n\t                {\n\t                    \"long_name\": \"time\",\n\t                    \"calendar\": \"gregorian\",\n\t                }\n\t            )\n\t        elif \"forecast_reference_time\" in dataset:\n\t            dataset.forecast_reference_time.encoding.update(\n\t                {\n", "                    \"long_name\": \"initial time of forecast\",\n\t                    \"standard_name\" : \"forecast_reference_time\",\n\t                    \"calendar\": \"proleptic_gregorian\",\n\t                }\n\t            )\n\t        if \"units\" not in dataset[self.time_dim].encoding.keys():\n\t            # reformat the dataset_start_date datetime to a CF compliant string if it exists....\n\t            if hasattr(self, \"dataset_start_date\"):\n\t                dataset[self.time_dim].encoding.update(\n\t                    {\n", "                        \"units\": f\"days since {self.dataset_start_date.isoformat().replace('T00:00:00', ' 0:0:0 0')}\",\n\t                    }\n\t                )\n\t            # otherwise use None to indicate this is unknown at present\n\t            else:\n\t                dataset[self.time_dim].encoding.update(\n\t                    {\n\t                        \"units\": None,\n\t                    }\n\t                )\n", "        return dataset\n\t    def merge_in_outside_metadata(self, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n\t        Join static/STAC metadata fields to the dataset's metadata fields and adjust them as appropriate\n\t        Parameters\n\t        ----------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, pre-metadata update\n\t        Returns\n\t        -------\n", "        dataset : xarray.Dataset\n\t            The dataset being published, after metadata update\n\t        \"\"\"\n\t        # Load static metadata into the dataset's attributes\n\t        dataset.attrs = {**dataset.attrs, **self.metadata}\n\t        # Determine date to use for \"created\" field. On S3 and local, use current time. On IPLD, look for an existing creation time.\n\t        now = (\n\t            datetime.datetime.utcnow()\n\t            .replace(tzinfo=datetime.timezone.utc)\n\t            .isoformat()[:-13]\n", "            + \"Z\"\n\t        )\n\t        if isinstance(self.store, IPLD):\n\t            existing_stac_metadata = self.load_stac_metadata()\n\t            if (\n\t                existing_stac_metadata\n\t                and \"created\" in existing_stac_metadata[\"properties\"]\n\t            ):\n\t                created = existing_stac_metadata[\"properties\"][\"created\"]\n\t            else:\n", "                created = now\n\t        else:\n\t            created = now\n\t        dataset.attrs[\"created\"] = created\n\t        # Write the date range. Use existing data if possible to get the original start date. Even though the date range can be parsed by\n\t        # opening the Zarr, it can be faster to access directly through the Zarr's `.zmetadata` file, so it gets written here.\n\t        if isinstance(self.store, IPLD):\n\t            # Set date range. Use start from previous dataset's metadata if it exists or the input dataset if this is the first run.\n\t            try:\n\t                stac_metadata = self.load_stac_metadata()\n", "                dataset.attrs[\"update_previous_end_date\"] = stac_metadata[\"properties\"][\n\t                    \"date range\"\n\t                ][1]\n\t                dataset.attrs[\"date range\"] = (\n\t                    stac_metadata[\"properties\"][\"date range\"][0],\n\t                    datetime.datetime.strftime(\n\t                        self.get_date_range_from_dataset(dataset)[1], \"%Y%m%d%H\"\n\t                    ),\n\t                )\n\t            except (KeyError, TimeoutError):\n", "                dataset.attrs[\"update_previous_end_date\"] = \"\"\n\t                dataset.attrs[\"date range\"] = self.date_range_to_string(\n\t                    self.get_date_range_from_dataset(dataset)\n\t                )\n\t        else:\n\t            # Use existing Zarr if possible, otherwise get the dates from the input dataset.\n\t            if self.store.has_existing:\n\t                previous_start, previous_end = self.store.dataset().attrs[\"date range\"]\n\t                dataset.attrs[\"update_previous_end_date\"] = previous_end\n\t                dataset.attrs[\"date range\"] = (\n", "                    previous_start,\n\t                    self.date_range_to_string(\n\t                        self.get_date_range_from_dataset(dataset)\n\t                    )[1],\n\t                )\n\t            else:\n\t                dataset.attrs[\"update_previous_end_date\"] = \"\"\n\t                dataset.attrs[\"date range\"] = self.date_range_to_string(\n\t                    self.get_date_range_from_dataset(dataset)\n\t                )\n", "        # Write the update date range by taking the date range of the xr.Dataset submitted to this function. This assumes this function\n\t        # is called and the metadata is written before the original xr.Dataset is combined with the insert xr.Dataset.\n\t        dataset.attrs[\"update_date_range\"] = self.date_range_to_string(\n\t            self.get_date_range_from_dataset(dataset)\n\t        )\n\t        # Include the bounding box in the Zarr metadata\n\t        dataset.attrs[\"bbox\"] = self.bbox_coords(dataset)\n\t        # This defaults to `True`, so set it here and it will be overwritten when it is determined there is data at previously existing dates\n\t        # being overwritten.\n\t        dataset.attrs[\"update_is_append_only\"] = True\n", "        self.info(\"If updating, indicating the dataset is only appending data\")\n\t        return dataset\n\t    def remove_unwanted_fields(self, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n\t        Remove filters, compression, and other unwanted encoding/metadata inheritances from input files\n\t        Parameters\n\t        ----------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, pre-metadata update\n\t        Returns\n", "        -------\n\t        dataset : xarray.Dataset\n\t            The dataset being published, after metadata update\n\t        \"\"\"\n\t        # Leave compression off for IPLD\n\t        if self.store == \"ipld\":\n\t            compressor = None\n\t        else:\n\t            compressor = numcodecs.Blosc()\n\t        for coord in [\"latitude\", \"longitude\"]:\n", "            dataset[coord].attrs.pop(\"chunks\", None)\n\t            dataset[coord].attrs.pop(\"preferred_chunks\", None)\n\t            dataset[coord].encoding.pop(\"_FillValue\", None)\n\t            dataset[coord].encoding.pop(\"missing_value\", None)\n\t            dataset[coord].encoding[\"compressor\"] = compressor\n\t        dataset[self.data_var()].encoding.pop(\"filters\", None)\n\t        dataset[self.data_var()].encoding[\"compressor\"] = compressor\n\t        return dataset\n\tclass StacType(Enum):\n\t    ITEM = \"datasets\"\n", "    COLLECTION = \"collections\"\n\t    CATALOG = \"\"\n"]}
{"filename": "gridded_etl_tools/utils/__init__.py", "chunked_list": []}
{"filename": "gridded_etl_tools/utils/convenience.py", "chunked_list": ["import os\n\timport gc\n\timport pathlib\n\timport natsort\n\timport datetime\n\timport re\n\timport ftplib\n\timport io\n\timport json\n\timport pandas as pd\n", "import numpy as np\n\timport xarray as xr\n\tfrom .attributes import Attributes\n\tfrom .store import IPLD\n\tclass Convenience(Attributes):\n\t    \"\"\"\n\t    Base class holding convenience methods for Zarr ETLs\n\t    \"\"\"\n\t    # BASE DIRECTORIES\n\t    def root_directory(self, refresh: bool = False):\n", "        if refresh or not hasattr(self, \"_root_directory\"):  # ensure this is only calculated one time, at the beginning of the script\n\t            self._root_directory = pathlib.Path.cwd()  # Paths are relative to the working directory of the ETL manager, *not* the scripts\n\t        return self._root_directory\n\t    @property\n\t    def local_input_root(self):\n\t        return self.root_directory() / \"datasets\"\n\t    @property\n\t    def output_root(self):\n\t        return self.root_directory() / \"climate\"\n\t    # NAMES\n", "    def zarr_json_path(self) -> pathlib.Path:\n\t        \"\"\"\n\t        A path to the virtual Zarr\n\t        Returns\n\t        -------\n\t        pathlib.Path\n\t            The path to the virtual Zarr JSON file\n\t        \"\"\"\n\t        return self.root_directory() / f\"{self.name()}_zarr.json\"\n\t    @classmethod\n", "    def json_key(cls, append_date: bool = False) -> str:\n\t        \"\"\"\n\t        Returns the key value that can identify this set in a JSON file. JSON key takes the form of either name-measurement_span or name-today.\n\t        If `append_date` is True, add today's date to the end of the string\n\t        Parameters\n\t        ----------\n\t        append_date : bool, optional\n\t            Whether to add today's date to the end of the json_key string\n\t        Returns\n\t        -------\n", "        str\n\t            The formatted JSON key\n\t        \"\"\"\n\t        key = f\"{cls.name()}-{cls.temporal_resolution()}\"\n\t        if append_date:\n\t            key = f\"{key}-{datetime.datetime.now().strftime(cls.DATE_FORMAT_FOLDER)}\"\n\t        return key\n\t    # PATHS\n\t    def local_input_path(self) -> str:\n\t        \"\"\"\n", "        The path to local data is built recursively by appending each derivative's relative path to the previous derivative's\n\t        path. If a custom input path is set, force return the custom path.\n\t        \"\"\"\n\t        if self.custom_input_path:\n\t            return pathlib.Path(self.custom_input_path)\n\t        else:\n\t            path = pathlib.Path(self.local_input_root) / pathlib.Path(\n\t                self.relative_path()\n\t            )\n\t            # Create directory if necessary\n", "            path.mkdir(parents=True, mode=0o755, exist_ok=True)\n\t            return path\n\t    def relative_path(self) -> str:\n\t        \"\"\"\n\t        The file folder hierarchy for a set. This should be a relative path so it can be appended to other root paths like\n\t        `self.local_input_path()` and `self.output_path()`\n\t        Returns\n\t        -------\n\t        str\n\t            The relative path that should be used for this set's data\n", "        \"\"\"\n\t        return pathlib.Path(\".\")\n\t    def input_files(self) -> list:\n\t        \"\"\"\n\t        Iterator for iterating through the list of local input files\n\t        Returns\n\t        -------\n\t        list\n\t            List of input files from `self.local_input_path()`\n\t        \"\"\"\n", "        root = pathlib.Path(self.local_input_path())\n\t        for entry in natsort.natsorted(pathlib.Path(root).iterdir()):\n\t            if (\n\t                not entry.name.startswith(\".\")\n\t                and not entry.name.endswith(\".idx\")\n\t                and entry.is_file()\n\t            ):\n\t                yield pathlib.Path(root / entry.name)\n\t    def get_folder_path_from_date(\n\t        self, date: datetime.datetime, omit_root: bool = False\n", "    ) -> str:\n\t        \"\"\"\n\t        Return a folder path inside `self.output_root` with the folder name based on `self.temporal_resolution()`\n\t        and the passed `datetime`. If `omit_root` is set, remove `self.output_root` from the path.\n\t        Parameters\n\t        ----------\n\t        date : datetime.datetime\n\t            datetime.datetime object representing the date to be appended to the folder name\n\t        omit_root : bool, optional\n\t            If False, prepent `self.output_root` to the beginning of the path, otherwise leave it off. Defaults to False\n", "        Returns\n\t        -------\n\t        str\n\t            Directory path derived from the date provided\n\t        \"\"\"\n\t        if self.temporal_resolution() == self.SPAN_HOURLY:\n\t            date_format = self.DATE_HOURLY_FORMAT_FOLDER\n\t        else:\n\t            date_format = self.DATE_FORMAT_FOLDER\n\t        path = pathlib.Path(self.relative_path()) / date.strftime(date_format)\n", "        if not omit_root:\n\t            path = pathlib.Path(self.output_root) / path\n\t        return path\n\t    def output_path(self, omit_root: bool = False) -> str:\n\t        \"\"\"\n\t        Return the path to a directory where parsed climate data will be written, automatically determining the end date and\n\t        base on that. If `omit_root` is set, remove `self.output_root` from the path. Override with `self.custom_output_path`\n\t        if that member variable is set.\n\t        Parameters\n\t        ----------\n", "        omit_root : bool, optional\n\t            If False, prepend self.output_root to the beginning of the path, otherwise leave it off. Defaults to False.\n\t        Returns\n\t        -------\n\t        str\n\t            string representing the output directory path where climate data will be written\n\t        \"\"\"\n\t        if self.custom_output_path is not None:\n\t            return self.custom_output_path\n\t        else:\n", "            path = self.relative_path()\n\t            if not omit_root:\n\t                path = self.output_root / path\n\t            return path\n\t    def create_output_path(self):\n\t        \"\"\"\n\t        Make output directory\n\t        \"\"\"\n\t        os.makedirs(self.output_path(), 0o755, exist_ok=True)\n\t    # DATES\n", "    def get_metadata_date_range(self) -> dict:\n\t        \"\"\"\n\t        Returns the date range in the metadata as datetime objects in a dict with `start` and `end` keys.\n\t        On IPLD, uses STAC to get the date. On S3 and local, uses an existing Zarr.\n\t        Existing dates are assumed to be formatted as \"%Y%m%d%H\"\n\t        Returns\n\t        -------\n\t        dict\n\t            Two str: datetime.datetimes representing the start and end times in a STAC Item's metadata\n\t        \"\"\"\n", "        date_format = \"%Y%m%d%H\"\n\t        if isinstance(self.store, IPLD):\n\t            # Use STAC\n\t            metadata = self.load_stac_metadata()\n\t            return {\n\t                \"start\": datetime.datetime.strptime(\n\t                    metadata[\"properties\"][\"date range\"][0], date_format\n\t                ),\n\t                \"end\": datetime.datetime.strptime(\n\t                    metadata[\"properties\"][\"date range\"][1], date_format\n", "                ),\n\t            }\n\t        else:\n\t            # Use existing Zarr attrs or raise an exception if there is no usable date attribute\n\t            if self.store.has_existing:\n\t                dataset = self.store.dataset()\n\t                if \"date range\" in dataset.attrs:\n\t                    # Assume attr format is ['%Y%m%d%H', '%Y%m%d%H'], translate to datetime objects, then transform into a dict with \"start\" and \"end\" keys\n\t                    return dict(\n\t                        zip(\n", "                            (\"start\", \"end\"),\n\t                            (\n\t                                datetime.datetime.strptime(d, date_format)\n\t                                for d in dataset.attrs[\"date range\"]\n\t                            ),\n\t                        )\n\t                    )\n\t                else:\n\t                    raise ValueError(\n\t                        f\"Existing date range not found in {dataset} attributes\"\n", "                    )\n\t            else:\n\t                raise ValueError(\n\t                    f\"No existing dataset found to get date range from at {self.store}\"\n\t                )\n\t    def convert_date_range(\n\t        self, date_range: list\n\t    ) -> tuple[datetime.datetime, datetime.datetime]:\n\t        \"\"\"\n\t        Convert a JSON text/isoformat date range into a python datetime object range\n", "        Parameters\n\t        ----------\n\t        date_range : list\n\t            A list of length two containing isoformatted start and end date strings\n\t        Returns\n\t        -------\n\t        tuple[datetime.datetime, datetime.datetime]\n\t            A tuple of (datetime.datetime, datetime.datetime) representing a date range's start and end\n\t        \"\"\"\n\t        if re.match(\".+/.+/.+\", date_range[0]):\n", "            start, end = [\n\t                datetime.datetime.strptime(d, self.DATE_FORMAT_METADATA)\n\t                for d in date_range\n\t            ]\n\t        else:\n\t            start, end = [datetime.datetime.fromisoformat(d) for d in date_range]\n\t        return start, end\n\t    def iso_to_datetime(self, isodate: str) -> datetime.datetime:\n\t        \"\"\"\n\t        Get a datetime object from an ISO formatted date string\n", "        Parameters\n\t        ----------\n\t        isodate : str\n\t            An Isoformatted string representing a date\n\t        Returns\n\t        -------\n\t        datetime.datetime\n\t            The converted date\n\t        \"\"\"\n\t        return datetime.datetime.fromisoformat(isodate)\n", "    def numpydate_to_py(self, numpy_date: np.datetime64) -> datetime.datetime:\n\t        \"\"\"\n\t        Convert a numpy datetime object to a python standard library datetime object\n\t        Parameters\n\t        ----------\n\t        np.datetime64\n\t            A numpy.datetime64 object to be converted\n\t        Returns\n\t        -------\n\t        datetime.datetime\n", "            A datetime.datetime object\n\t        \"\"\"\n\t        return pd.Timestamp(numpy_date).to_pydatetime()\n\t    @staticmethod\n\t    def today() -> str:\n\t        \"\"\"\n\t        Convenience method to return today's date in Isoformat\n\t        Returns\n\t        -------\n\t        str\n", "            Today's date in Isoformat\n\t        \"\"\"\n\t        return datetime.date.today().isoformat()\n\t    # DATE RANGES\n\t    def get_date_range_from_dataset(\n\t        self, dataset: xr.Dataset\n\t    ) -> tuple[datetime.datetime, datetime.datetime]:\n\t        \"\"\"\n\t        Return the start and end date in a dataset's \"time\" dimension\n\t        Parameters\n", "        ----------\n\t        dataset : xr.Dataset\n\t            The xr.Dataset to be evaluated\n\t        Returns\n\t        -------\n\t        tuple[datetime.datetime, datetime.datetime]\n\t            A tuple defining the start and end date of a file's time dimension\n\t        \"\"\"\n\t        # use forecast times if they exist\n\t        if \"forecast_reference_time\" in dataset:\n", "            time_dim = \"forecast_reference_time\"\n\t        else:\n\t            time_dim = \"time\"\n\t        # if there is only one date, set start and end to the same value\n\t        if dataset[time_dim].size == 1:\n\t            value = dataset[time_dim].values\n\t            if isinstance(value, np.ndarray):\n\t                value = value[0]\n\t            start = self.numpydate_to_py(value)\n\t            end = start\n", "        else:\n\t            start = self.numpydate_to_py(dataset[time_dim][0].values)\n\t            end = self.numpydate_to_py(dataset[time_dim][-1].values)\n\t        return start, end\n\t    def get_date_range_from_file(\n\t        self, path: str, backend_kwargs: dict = None\n\t    ) -> tuple[datetime.datetime, datetime.datetime]:\n\t        \"\"\"\n\t        Open file and return the start and end date of the data. The dimension name used to store dates should be passed as `dimension`.\n\t        Parameters\n", "        ----------\n\t        path : str\n\t            Path to the input dataset file on disk\n\t        backend_kwargs : dict, optional\n\t            Backend arguments for the xr.open_dataset() method\n\t        Returns\n\t        -------\n\t        tuple\n\t            A tuple of datetime.datetime objects defining the start and end date of a file's time dimension\n\t        \"\"\"\n", "        dataset = xr.open_dataset(path, backend_kwargs=backend_kwargs)\n\t        date_range = self.get_date_range_from_dataset(dataset)\n\t        dataset.close()\n\t        del dataset\n\t        gc.collect()\n\t        return date_range\n\t    def date_range_to_string(self, date_range: tuple) -> tuple[str, str]:\n\t        \"\"\"\n\t        Convert a tuple of datetime objects to a tuple of parseable strings. Necessary for Xarray metadata parsing.\n\t        Parameters\n", "        ----------\n\t        date_range : tuple\n\t            A (datetime.datetime, datetime.datetime) tuple containing the start and end dates of a date range\n\t        Returns\n\t        -------\n\t        tuple\n\t            A tuple of `%Y%m%d%H` formatted start and end dates of a date range\n\t        \"\"\"\n\t        return (\n\t            datetime.datetime.strftime(date_range[0], \"%Y%m%d%H\"),\n", "            datetime.datetime.strftime(date_range[1], \"%Y%m%d%H\"),\n\t        )\n\t    def get_newest_file_date_range(self) -> datetime.datetime:\n\t        \"\"\"\n\t        Return the date range of the newest local file\n\t        Returns\n\t        -------\n\t        datetime.datetime\n\t            The start and end date of the newest local file\n\t        \"\"\"\n", "        return self.get_date_range_from_file(list(self.input_files())[-1])\n\t    # STRING TRANSFORMATIONS\n\t    def _coord_reformat(self, *args, pretty: bool = False, padding: int = 0) -> str:\n\t        \"\"\"\n\t        Return coordinates (individually or pair) as a single string value with 3 decimal places of precision. With `pretty` set\n\t        to False, return a string that can be used for a file name. With `pretty` set to True, return formatted coordinate string\n\t        Parameters\n\t        ----------\n\t        args : list\n\t            A list of (index, coordinate) tuples\n", "        pretty : bool, optional\n\t            A switch indicating whether to add a separator to the returned coordinates\n\t        padding : int\n\t            The number of zero padding spaces, in integer form, to add to returned coordinates\n\t        Returns\n\t        -------\n\t        str\n\t            Coordinates reformatted as specified\n\t        \"\"\"\n\t        if not pretty:\n", "            separator = \"_\"\n\t            coords = \"\"\n\t        else:\n\t            separator = \", \"\n\t            coords = \"(\"\n\t        for ii, coord in enumerate(args):\n\t            if ii > 0:\n\t                coords += separator\n\t            coords += f\"{float(coord):0{padding}.3f}\"\n\t        if pretty:\n", "            coords += \")\"\n\t        return coords\n\t    def coord_str(self, *args, pretty: bool = False, padding=0) -> str:\n\t        \"\"\"\n\t        Return coordinates (individually or pair) as a single string value with 3 decimal places of precision. With `pretty` set\n\t        to False, return a string that can be used for a file name. With `pretty` set to True, return formatted coordinate string\n\t        Parameters\n\t        ----------\n\t        args : list\n\t            A list of (index, coordinate) tuples\n", "        pretty : bool, optional\n\t            A switch indicating whether to add a separator to the returned coordinates\n\t        padding : int\n\t            The number of zero padding spaces, in integer form, to add to returned coordinates\n\t        Returns\n\t        -------\n\t        str\n\t            Coordinates reformatted as specified\n\t        \"\"\"\n\t        translated_args = []\n", "        for coord in args:\n\t            if isinstance(coord, xr.DataArray):\n\t                translated_args.append(coord.values)\n\t            else:\n\t                translated_args.append(coord)\n\t        return self._coord_reformat(*translated_args, pretty=pretty, padding=padding)\n\t    # FTP\n\t    def sync_ftp_files(\n\t        self,\n\t        server: str,\n", "        directory_path: str,\n\t        file_match_pattern: str,\n\t        include_size_check: bool = False,\n\t    ):\n\t        \"\"\"\n\t        Connect to `server` (currently only supports anonymous login), change to `directory_path`, pull new and updated files\n\t        that match `file_match_pattern` in that directory into `self.local_input_path()`. Store a list of newly downloaded\n\t        files in a member variable.\n\t        Parameters\n\t        ----------\n", "        server : str\n\t            The URL of the FTP server to check\n\t        directory_path: str\n\t            The path to the directory holding the desired FTP files on the server\n\t        file_match_pattern : str\n\t            A regex string to match file names (in directory_path) against\n\t        include_size_check : bool, optional\n\t            Switch to check (or not) the size of files against a maximum. Defaults to False.\n\t        \"\"\"\n\t        # Login to remote FTP server\n", "        with ftplib.FTP(server) as ftp:\n\t            self.info(\n\t                \"checking {}:{} for files that match {}\".format(\n\t                    server, directory_path, file_match_pattern\n\t                )\n\t            )\n\t            ftp.login()\n\t            ftp.cwd(directory_path)\n\t            # Loop through directory listing\n\t            for file_name in ftp.nlst():\n", "                if re.match(file_match_pattern, file_name):\n\t                    # path on our local filesystem\n\t                    local_file_path = pathlib.Path(self.local_input_path()) / file_name\n\t                    modification_timestamp = ftp.sendcmd(\"MDTM {}\".format(file_name))[\n\t                        4:\n\t                    ].strip()\n\t                    modification_time = datetime.datetime.strptime(\n\t                        modification_timestamp, \"%Y%m%d%H%M%S\"\n\t                    )\n\t                    # Retrieve this file unless we find conditions not to\n", "                    retrieve = True\n\t                    # Compare to local file of same name\n\t                    if local_file_path.exists():\n\t                        local_file_attributes = os.stat(local_file_path)\n\t                        local_file_mtime = datetime.datetime.fromtimestamp(\n\t                            local_file_attributes.st_mtime\n\t                        )\n\t                        local_file_size = local_file_attributes.st_size\n\t                        # Set to binary transfer mode\n\t                        ftp.sendcmd(\"TYPE I\")\n", "                        remote_file_size = ftp.size(file_name)\n\t                        if modification_time <= local_file_mtime and (\n\t                            not include_size_check\n\t                            or remote_file_size == local_file_size\n\t                        ):\n\t                            self.debug(\n\t                                \"local file {} does not need updating\".format(\n\t                                    local_file_path\n\t                                )\n\t                            )\n", "                            retrieve = False\n\t                        elif modification_time > local_file_mtime:\n\t                            self.debug(\n\t                                \"file {} local modification time {} less than remote modification time {}\".format(\n\t                                    local_file_path,\n\t                                    local_file_mtime.strftime(\"%Y/%m/%d\"),\n\t                                    modification_time.strftime(\"%Y/%m/%d\"),\n\t                                )\n\t                            )\n\t                        else:\n", "                            self.debug(\n\t                                \"mismatch between local and remote size for file {}\".format(\n\t                                    local_file_path\n\t                                )\n\t                            )\n\t                    else:\n\t                        self.debug(\"new remote file found {}\".format(file_name))\n\t                    # Write this file locally\n\t                    if retrieve:\n\t                        self.new_files.append(self.local_input_path() / file_name)\n", "                        self.info(\n\t                            \"downloading remote file {} to {}\".format(\n\t                                file_name, local_file_path\n\t                            )\n\t                        )\n\t                        with open(local_file_path, \"wb\") as fp:\n\t                            ftp.retrbinary(\"RETR {}\".format(file_name), fp.write)\n\t    # ETC\n\t    def array_has_data(self, array: np.ndarray) -> bool | np.ndarray:\n\t        \"\"\"\n", "        Convenience method to determine if an array has any data\n\t        Parameters\n\t        ----------\n\t        array : np.array\n\t            A numpy array to assess\n\t        Returns\n\t        -------\n\t        bool | np.array\n\t            Either a boolean indicating whether an array has data,\n\t            or an array containing multiple booleans indicating which arrays have data\n", "        \"\"\"\n\t        return not np.all(np.isnan(array))\n\t    def bbox_coords(self, dataset: xr.Dataset) -> tuple[float, float, float, float]:\n\t        \"\"\"\n\t        Calculate bounding box coordinates from an Xarray dataset\n\t        Parameters\n\t        ----------\n\t        dataset : xr.Dataset\n\t            The dataset to use for extent calculations\n\t        Returns\n", "        -------\n\t        tuple[float, float, float, float]\n\t            The minimum X, minimum Y, maximum X, and maximum Y values of the dataset's bounding box extent\n\t        \"\"\"\n\t        return (\n\t            round(float(dataset.longitude.values.min()), self.bbox_rounding_value),\n\t            round(float(dataset.latitude.values.min()), self.bbox_rounding_value),\n\t            round(float(dataset.longitude.values.max()), self.bbox_rounding_value),\n\t            round(float(dataset.latitude.values.max()), self.bbox_rounding_value),\n\t        )\n", "    def json_to_bytes(self, obj: dict) -> bytes:\n\t        \"\"\"\n\t        Convert a JSON object to a file type object (bytes). Primarily used for passing STAC metadata to IPFS\n\t        Parameters\n\t        ----------\n\t        obj : dict\n\t            The object (JSON) to be converted\n\t        Returns\n\t        -------\n\t        bytes\n", "            The json encoded as a file type object\n\t        \"\"\"\n\t        return io.BytesIO(json.dumps(obj).encode(\"utf-8\"))\n\t    def check_if_new_data(self, compare_date: datetime.datetime) -> bool:\n\t        \"\"\"\n\t        Check if the downloaded data contains any new records relative to the existing dataset.\n\t        Return a boolean indicating whether to proceed with a transform/parse based on the presence of new records.\n\t        Parameters\n\t        ==========\n\t        compare_date : datetime.datetime\n", "            A cutoff date to compare against downloaded data; if any downloaded data is newer, move ahead with the parse.\n\t            When updating, refers to the last datetime available in the existing dataset.\n\t        Returns\n\t        =======\n\t        bool\n\t            An indication of whether to proceed with a parse (True) or not (False)\n\t        \"\"\"\n\t        # check if newest file on our server has newer data\n\t        try:\n\t            newest_file_end_date = self.get_newest_file_date_range()[1]\n", "        except IndexError as e:\n\t            self.info(f\"Date range operation failed due to absence of input files. Exiting script. Full error message: {e}\")\n\t            return False\n\t        self.info(f\"newest file ends at {newest_file_end_date}\")\n\t        if newest_file_end_date >= compare_date:\n\t            self.info(f\"newest file has newer data than our end date {compare_date}, triggering parse\")\n\t            return True\n\t        else:\n\t            self.info(f\"newest file doesn't have data past our existing end date {compare_date}.\")\n\t            return False\n", "    @classmethod\n\t    def standardize_longitudes(cls, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n\t        Convert the longitude coordinates of a dataset from 0 - 360 to -180 to 180.\n\t        Parameters\n\t        ----------\n\t        xr.Dataset\n\t            A dataset with longitudes from 0 to 360\n\t        Returns\n\t        -------\n", "        xr.Dataset\n\t            A dataset with longitudes from -180 to 180\n\t        \"\"\"\n\t        # Convert longitudes from 0 - 360 to -180 to 180\n\t        dataset = dataset.assign_coords(\n\t            longitude=(((dataset.longitude + 180) % 360) - 180)\n\t        )\n\t        # After converting, the longitudes may still start at zero. This reorders the longitude coordinates from -180 to 180 if necessary.\n\t        return dataset.sortby([\"latitude\", \"longitude\"])"]}
{"filename": "gridded_etl_tools/utils/ipfs.py", "chunked_list": ["import dag_cbor\n\timport requests\n\tfrom multiformats import multicodec, multihash\n\tfrom requests.adapters import HTTPAdapter, Retry\n\tfrom requests.exceptions import Timeout as TimeoutError\n\tfrom requests.exceptions import HTTPError\n\t# Base methods\n\tdef get_retry_session() -> requests.Session:\n\t    session = requests.Session()\n\t    retries = Retry(connect=5, total=5, backoff_factor=4)\n", "    session.mount(\"http://\", HTTPAdapter(max_retries=retries))\n\t    return session\n\tclass IPFS:\n\t    \"\"\"\n\t    Methods to be inherited by a DatasetManager that needs to instantiate and interact with an IPFS client\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        host: str,\n\t        default_hash: str\n", "        | int\n\t        | multicodec.Multicodec\n\t        | multihash.Multihash = \"sha2-256\",\n\t        default_base: str = \"base32\",\n\t        default_timeout: int = 600,\n\t    ):\n\t        self._host = host\n\t        self._default_base = default_base\n\t        self._default_timeout = default_timeout\n\t        self._default_hash = default_hash\n", "        self.ipfs_session = get_retry_session()\n\t    # FUNDAMENTAL METHODS\n\t    def ipfs_get(self, cid: str) -> dict:\n\t        \"\"\"\n\t        Fetch a DAG CBOR object by its IPFS hash and return it as a JSON\n\t        Parameters\n\t        ----------\n\t        cid : str\n\t            The IPFS hash corresponding to a given object (implicitly DAG CBOR)\n\t        Returns\n", "        -------\n\t        dict\n\t            The referenced DAG CBOR object decoded as a JSON\n\t        \"\"\"\n\t        res = self.ipfs_session.post(\n\t            self._host + \"/api/v0/block/get\",\n\t            timeout=self._default_timeout,\n\t            params={\"arg\": str(cid)},\n\t        )\n\t        res.raise_for_status()\n", "        return dag_cbor.decode(res.content)\n\t    def ipfs_put(self, bytes_obj: bytes, should_pin: bool = True) -> str:\n\t        \"\"\"\n\t        Turn a bytes object (file type object) into a DAG CBOR object compatible with IPFS and return its corresponding multihash\n\t        Parameters\n\t        ----------\n\t        bytes_obj : bytes\n\t            A file type (io.BytesIO) object to be converted into a DAG object and put on IPFS\n\t        should_pin : bool, optional\n\t            Whether to automatically pin this object when converting it to a DAG. Defauls to True.\n", "        Returns\n\t        -------\n\t        str\n\t            The IPFS hash (base32 encoded) corresponding to the newly created DAG object\n\t        \"\"\"\n\t        res = self.ipfs_session.post(\n\t            self._host + \"/api/v0/dag/put\",\n\t            params={\n\t                \"store-codec\": \"dag-cbor\",\n\t                \"input-codec\": \"dag-json\",\n", "                \"pin\": should_pin,\n\t                \"hash\": self._default_hash,\n\t            },\n\t            files={\"dummy\": bytes_obj},\n\t        )\n\t        res.raise_for_status()\n\t        return res.json()[\"Cid\"][\"/\"]  # returns hash of DAG object created\n\t    # IPNS METHODS\n\t    def ipns_resolve(self, key: str) -> str:\n\t        \"\"\"\n", "        Resolve the IPFS hash corresponding to a given key\n\t        Parameters\n\t        ----------\n\t        key : str\n\t            The IPNS key (human readable name) referencing a given dataset\n\t        Returns\n\t        -------\n\t        str\n\t            The IPFS hash corresponding to a given IPNS name hash\n\t        \"\"\"\n", "        ipns_key = self.ipns_key_list()[key]\n\t        res = self.ipfs_session.post(\n\t            self._host + \"/api/v0/name/resolve\",\n\t            timeout=self._default_timeout,\n\t            params={\"arg\": ipns_key},\n\t        )\n\t        res.raise_for_status()\n\t        return res.json()[\"Path\"][6:]  # 6: shaves off leading '/ipfs/'\n\t    def ipns_publish(self, key: str, cid: str, offline: bool = False) -> str:\n\t        \"\"\"\n", "        Publish an IPNS key string and return the corresponding name hash\n\t        Parameters\n\t        ----------\n\t        key : str\n\t            The human readable key part of the IPNS key pair referencing an object\n\t        cid : str\n\t            The hash the key pair will resolve to\n\t        offline : bool, optional\n\t            An optional trigger to disable the publication of this IPNS key and name hash over the IPFS network.\n\t            Offline mode will be much faster but will not publish the key pair to peers' Distributed Hash Tables on the global network.\n", "        Returns\n\t        -------\n\t        str\n\t            The IPNS \"name\" hash corresponding to the published key\n\t        \"\"\"\n\t        # Pin the IPFS CID and publish your key, linking they key to the desired CID\n\t        res = self.ipfs_session.post(\n\t            self._host + \"/api/v0/name/publish\",\n\t            timeout=self._default_timeout,\n\t            params={\n", "                \"arg\": cid,\n\t                \"key\": key,\n\t                \"allow-offline\": offline,\n\t                \"offline\": offline,\n\t            },\n\t        )\n\t        res.raise_for_status()\n\t        ipns_name_hash = res.json()[\"Name\"]\n\t        self.info(\n\t            f\"Published CID {cid} for key {key} to name hash {ipns_name_hash} and pinned it in the process\"\n", "        )\n\t        return ipns_name_hash\n\t    def ipns_key_list(self) -> dict:\n\t        \"\"\"\n\t        Return IPFS's Key List as a dict corresponding of key strings and associated ipns name hashes\n\t        Returns\n\t        -------\n\t        ipns_key_hash_dict : dict\n\t            All the IPNS name hashes and keys in the local IPFS repository\n\t        \"\"\"\n", "        ipns_key_hash_dict = {}\n\t        for name_hash_pair in self.ipfs_session.post(\n\t            self._host + \"/api/v0/key/list\", timeout=self._default_timeout\n\t        ).json()[\"Keys\"]:\n\t            key, val = tuple(name_hash_pair.values())\n\t            ipns_key_hash_dict[key] = val\n\t        return ipns_key_hash_dict\n\t    def ipns_generate_name(self, key: str = None) -> str:\n\t        \"\"\"\n\t        Generate a stable IPNS name hash to populate the `href` field of any STAC Object.\n", "        If a name hash already exists, return it.\n\t        Parameters\n\t        ----------\n\t        key : str\n\t            The IPNS key string to be used to reference a given object\n\t        Returns\n\t        -------\n\t        ipns_name_hash : str\n\t            The IPNS name hash (str) resulting from the publication of an empty dict\n\t        \"\"\"\n", "        if key is None:\n\t            key = self.json_key()\n\t        # Only generate the key in IPFS's registry if it doesn't already exist\n\t        if key not in self.ipns_key_list():\n\t            res = self.ipfs_session.post(\n\t                self._host + \"/api/v0/key/gen\",\n\t                timeout=self._default_timeout,\n\t                params={\"arg\": key, \"type\": \"rsa\"},\n\t            )\n\t            self.info(f\"Key '{key}' generated in key list\")\n", "            res.raise_for_status()\n\t            return res.json()[\"Id\"]\n\t        else:\n\t            return self.ipns_key_list()[key]\n\t    def ipns_retrieve_object(self, ipns_name: str) -> tuple[dict, str]:\n\t        \"\"\"\n\t        Retrieve a JSON object using its human readable IPNS name key\n\t        (e.g. 'prism-precip-hourly).\n\t        Parameters\n\t        ----------\n", "        key : str\n\t            The IPNS key string referencing a given object\n\t        timeout : int, optional\n\t            Time in seconds to wait for a response from `ipfs.name.resolve` and `ipfs.dag.get` before failing. Defaults to 30.\n\t        Returns\n\t        -------\n\t        tuple[dict, str, str] | None\n\t            A tuple of the JSON and the hash part of the IPNS key pair\n\t        \"\"\"\n\t        ipns_key_hash = self.ipns_key_list()[ipns_name]\n", "        ipfs_hash = self.ipns_resolve(ipns_name)\n\t        json_obj = self.ipfs_get(ipfs_hash)\n\t        return json_obj, ipns_key_hash\n\t    # RETRIEVE LATEST OBJECT\n\t    def latest_hash(self, key: str = None) -> str | None:\n\t        \"\"\"\n\t        Get the latest hash of the climate data for this dataset. This hash can be loaded into xarray through xarray.open_zarr if\n\t        this is a Zarr compatible dataset. This will be the hash contained within the STAC metadata if this is STAC compatible dataset.\n\t        Parameters\n\t        ----------\n", "        key : str, optional\n\t            The name of the dataset in the format it is stored in the IPNS namespace. If `None`, the value of `self.json_key()`\n\t            will be used.\n\t        Returns\n\t        -------\n\t        str | None\n\t            The IPFS/IPLD hash corresponding to the climate data, or `None` if no data was found\n\t        \"\"\"\n\t        if self.custom_latest_hash is not None:\n\t            return self.custom_latest_hash\n", "        else:\n\t            if key is None:\n\t                key = self.json_key()\n\t            if hasattr(self, \"dataset_hash\") and self.dataset_hash:\n\t                return self.dataset_hash\n\t            elif self.check_stac_on_ipns(key):\n\t                # the dag_cbor.decode call in `self.ipfs_get` will auto-convert the `{'\\' : <CID>}``\n\t                # it finds to a CID object. Convert it back to a hash of type `str``\n\t                return str(\n\t                    self.load_stac_metadata(key)[\"assets\"][\"zmetadata\"][\"href\"].set(\n", "                        base=self._default_base\n\t                    )\n\t                )\n\t            else:\n\t                return None\n\t    def check_stac_on_ipns(self, key: str) -> bool:\n\t        \"\"\"\n\t        Convenience function to check whether a STAC object is registered with IPNS under the assigned key\n\t        Parameters\n\t        ----------\n", "        key : str\n\t            The IPNS key (human readable name) referencing a given dataset\n\t        Returns\n\t        -------\n\t        exists : bool\n\t            Whether the IPNS key exists in the IPFS key registry or not\n\t        \"\"\"\n\t        exists = True\n\t        try:\n\t            obj_json = self.ipns_retrieve_object(key)[0]\n", "            if \"stac_version\" not in obj_json:\n\t                raise TypeError\n\t        except TypeError:\n\t            self.info(f\"Non-STAC compliant object found for {key}\")\n\t            exists = False\n\t        except (KeyError, ValueError):\n\t            self.info(f\"No existing STAC-compliant object found for {key}.\")\n\t            exists = False\n\t        except (HTTPError, TimeoutError):\n\t            self.info(f\"No object found at {key}\")\n", "            exists = False\n\t        return exists\n"]}
{"filename": "gridded_etl_tools/utils/logging.py", "chunked_list": ["import sys\n\timport logging\n\timport pathlib\n\tfrom .attributes import Attributes\n\tclass Logging(Attributes):\n\t    \"\"\"\n\t    A base class holding logging methods for Zarr ETLs\n\t    \"\"\"\n\t    @classmethod\n\t    def log_to_file(\n", "        cls,\n\t        path: str = None,\n\t        level: str = logging.INFO,\n\t        log_format: str = \"%(asctime)s <%(name)s in %(threadName)s> %(levelname)-8s %(message)s\",\n\t        time_format: str = \"%Y/%m/%d %H:%M\",\n\t    ) -> logging.Handler:\n\t        \"\"\"\n\t        Attach a logging.handlers.WatchedFileHandler that will write log statements at `level` or higher to `path` in the requested formats.\n\t        Since this attaches the constructed handler to the root logger, this is basically a convenience function for creating a standard logging\n\t        module log handler and attaching it in the standard way. Since it is attached to the root logger, it will log all log statements sent to\n", "        Python's logging module, including both this application's and its underlying module's. If called with all defaults, this will create a log\n\t        in the current directory with the name based on this manager's name and the log level.\n\t        If there is already a handler attached to the root logger writing the same level log statements to the same path, set its formatting to\n\t        the requested format and do not attach a new handler.\n\t        Parameters\n\t        ----------\n\t        path : str\n\t            Path to a regular file to write log statements too, or None to build a default name in the current directory.\n\t        level : str, optional\n\t            Statements this level or higher will be printed (see logging module for levels). Defaults to 'logging.INFO'\n", "        log_format : str, optional.\n\t            The format of the log statement (see logging module for formatting options).\n\t            Defaults to \"%(asctime)s %(levelname)-8s <%(name)s> %(message)s\"\n\t        time_format:  str\n\t            The format of the timestamp printed at the beginning of the statement. Defaults to \"%Y/%m/%d %H:%M\".\n\t        Returns\n\t        -------\n\t        str\n\t            The logging.Handler that will be handling writing to the log file (this can be useful for manually removing the\n\t            handler from the root logger at a later time).\n", "        \"\"\"\n\t        # If no path was specified, build a path using the manager name and log level in the current directory\n\t        if path is None:\n\t            path = cls.default_log_path(level)\n\t        formatter = logging.Formatter(log_format, time_format)\n\t        # Search for an existing handler that already satisfies the requirements of the passed arguments so repeat log statements don't get\n\t        # logged. If an existing handler is found, set its formatting to the requested formatting and exit.\n\t        handler_already_exists = False\n\t        if logging.getLogger().hasHandlers():\n\t            for handler in logging.getLogger().handlers:\n", "                # Check if the handler is a WatchedFileHandler with the same level and path.\n\t                if (\n\t                    isinstance(handler, logging.handlers.WatchedFileHandler)\n\t                    and handler.level == level\n\t                    and pathlib.Path(handler.baseFilename).resolve()\n\t                    == pathlib.Path(path).resolve()\n\t                ):\n\t                    handler_already_exists = True\n\t                    handler.setFormatter(formatter)\n\t                    cls.info(f\"Found existing file log handler {handler}\")\n", "                    break\n\t        if not handler_already_exists:\n\t            # Use a standard file handler from the Python module\n\t            handler = logging.handlers.WatchedFileHandler(path)\n\t            # Apply requested formatting\n\t            handler.setFormatter(formatter)\n\t            # All log statments requested level or higher will be caught\n\t            handler.setLevel(level)\n\t            # Attach to root logger, catching every logger that doesn't have a handler attached to it, meaning this handler will catch\n\t            # all log statements from this repository that go through `self.log` (assuming a handler hasn't been added manually somewhere)\n", "            # and all log statements from Python modules that use standard logging practices (logging through the logging module and not\n\t            # attaching a handler).\n\t            logging.getLogger().addHandler(handler)\n\t        return handler\n\t    @classmethod\n\t    def log_to_console(\n\t        cls,\n\t        level: str = logging.INFO,\n\t        log_format: str = \"%(levelname)-8s <%(name)s in %(threadName)s> %(message)s\",\n\t    ):\n", "        \"\"\"\n\t        Attach a logging.StreamHandler that will write log statements at `level` or higher to the console. Since this attaches the stream handler\n\t        to the root logger, this is basically a convenience function for creating a standard stream handler and attaching it in the standard way.\n\t        Since it is attached to the root logger, it will log all log statements sent to Python's logging module, including both this application's\n\t        and its underlying module's.\n\t        If there is already a handler attached to the root logger writing to the console, set its formatting to the requested format and do not\n\t        attach a new handler.\n\t        Parameters\n\t        ----------\n\t        level : str, optional\n", "            Statements of this level or higher will be printed (see logging module for levels). Defaults to `logging.INFO`.\n\t        log_format : str, optional\n\t            The format of the log statement (see logging module for formatting options). Defaults to \"%(levelname)-8s <%(name)s> %(message)s\"\n\t        Returns\n\t        -------\n\t        str\n\t            The `logging.Handler` that will write the log statements to console (this can be useful for removing the handler\n\t            from the root logger manually at a later time).\n\t        \"\"\"\n\t        formatter = logging.Formatter(log_format)\n", "        # Search for an existing handler already writing to the console so repeat log statements don't get logged. If an existing handler is found,\n\t        # set its formatting to the requested formatting and exit.\n\t        handler_already_exists = False\n\t        if logging.getLogger().hasHandlers():\n\t            for handler in logging.getLogger().handlers:\n\t                # Check if the attached handler has a stream equal to stderr or stdout, meaning it is writing to the console.\n\t                if (\n\t                    hasattr(handler, \"stream\")\n\t                    and handler.level >= level\n\t                    and handler.stream in (sys.stderr, sys.stdout)\n", "                ):\n\t                    handler_already_exists = True\n\t                    # Apply requested formatting\n\t                    handler.setFormatter(formatter)\n\t                    cls.info(f\"Found existing console log handler {handler}\")\n\t                    break\n\t        if not handler_already_exists:\n\t            # Uses sys.stderr as the stream to write to by default. It would also make sense to write to sys.stdout, but since either stream\n\t            # could make sense, use the Python logging module default.\n\t            handler = logging.StreamHandler()\n", "            # Apply requested formatting\n\t            handler.setFormatter(formatter)\n\t            # All log statements requested level or higher will be caught.\n\t            handler.setLevel(level)\n\t            # See comment in self.log_to_file for information about what gets caught by this handler.\n\t            logging.getLogger().addHandler(handler)\n\t        return handler\n\t    @classmethod\n\t    def default_log_path(cls, level: str):\n\t        \"\"\"\n", "        Returns a default log path in a \"logs\" directory within the current working directory, incorporating level into the name.\n\t        Creates the \"logs\" directory if it doesn't already exist.\n\t        Probably only useful internally.\n\t        Parameters\n\t        ----------\n\t        level : str\n\t            The logging level to use. See logging module for log levels.\n\t        \"\"\"\n\t        pathlib.Path.mkdir(\n\t            pathlib.Path(\"./logs\"), mode=0o777, parents=False, exist_ok=True\n", "        )\n\t        return pathlib.Path(\"logs\") / f\"{cls.name()}_{logging.getLevelName(level)}.log\"\n\t    @classmethod\n\t    def log(cls, message: str, level: str = logging.INFO, **kwargs):\n\t        \"\"\"\n\t        This is basically a convenience function for calling logging.getLogger.log(`level`, `message`). The only difference is this uses\n\t        the manager name as the name of the log to enable log statements that include the name of the manager instead of \"root\". Since\n\t        logging module handlers at the root catch statements from all loggers that don't have a handler attached to them, the handlers\n\t        attached to the root (either through logging.Logger.addHandler, self.log_to_file, or self.log_to_console) will catch the `message`\n\t        logged with this function.\n", "        Parameters\n\t        ----------\n\t        message : str\n\t            Text to write to log.\n\t        level : str\n\t            Level of urgency of the message (see logging module for levels). Defaults to logging.INFO.\n\t        **kwargs : dict\n\t            Keyword arguments to forward to the logging.Logger. For example, `exc_info=True` can be used to print exception\n\t            information. See the logging module for all keyword arguments.\n\t        \"\"\"\n", "        logging.getLogger(cls.name()).log(level, message, **kwargs)\n\t    @classmethod\n\t    def info(cls, message: str, **kwargs):\n\t        \"\"\"\n\t        Log a message at `logging.INFO` level.\n\t        Parameters\n\t        ----------\n\t        message : str\n\t            Text to write to log.\n\t        **kwargs : dict\n", "            Keywords arguments passed to `logging.Logger.log`.\n\t        \"\"\"\n\t        cls.log(message, logging.INFO, **kwargs)\n\t    @classmethod\n\t    def debug(cls, message: str, **kwargs):\n\t        \"\"\"\n\t        Log a message at `loggging.DEBUG` level.\n\t        Parameters\n\t        ----------\n\t        message : str\n", "            Text to write to log.\n\t        **kwargs : dict\n\t            Keywords arguments passed to `logging.Logger.log`.\n\t        \"\"\"\n\t        cls.log(message, logging.DEBUG, **kwargs)\n\t    @classmethod\n\t    def warn(cls, message: str, **kwargs):\n\t        \"\"\"\n\t        Log a message at `loggging.WARN` level.\n\t        Parameters\n", "        ----------\n\t        message : str\n\t            Text to write to log.\n\t        **kwargs : dict\n\t            Keywords arguments passed to `logging.Logger.log`.\n\t        \"\"\"\n\t        cls.log(message, logging.WARN, **kwargs)\n\t    @classmethod\n\t    def error(cls, message: str, **kwargs):\n\t        \"\"\"\n", "        Log a message at `logging.ERROR` level.\n\t        Parameters\n\t        ----------\n\t        message : str\n\t            Text to write to log.\n\t        **kwargs : dict\n\t            Keywords arguments passed to `logging.Logger.log`.\n\t        \"\"\"\n\t        cls.log(message, logging.ERROR, **kwargs)\n\t    @classmethod\n", "    def log_except_hook(cls, exc_type, exc_value, exc_traceback):\n\t        cls.error(\"Uncaught exception\", exc_info=(exc_type, exc_value, exc_traceback))\n"]}
{"filename": "examples/__init__.py", "chunked_list": []}
{"filename": "examples/managers/my_new_etl.py", "chunked_list": ["##### my_new_etl.py\n\t#\n\t# Template classes for creating a new gridded climate data ETL.\n\t# All filled fields are examples that can be replaced; all unfilled fields must be filled by the user.\n\timport datetime\n\timport pathlib\n\tfrom gridded_etl_tools.dataset_manager import DatasetManager\n\tclass MyNewETL(DatasetManager):\n\t    \"\"\"\n\t    Base class for datasets from a provider. For example's sake assumes that such data are published in NetCDF format\n", "    \"\"\"\n\t    def __init__(\n\t            self, *args,\n\t            requested_dask_chunks={\"time\": 1769, \"latitude\": 24, \"longitude\": -1},\n\t            requested_zarr_chunks={\"time\": 1769, \"latitude\": 24, \"longitude\": 24},\n\t            requested_ipfs_chunker=\"size-2304\", **kwargs\n\t            ):\n\t        \"\"\"\n\t        Initialize a new ETL object with appropriate chunking parameters.\n\t        \"\"\"\n", "        super().__init__(requested_dask_chunks, requested_zarr_chunks, requested_ipfs_chunker, *args, **kwargs)\n\t        self.standard_dims = [\"latitude\", \"longitude\", \"time\"]\n\t    @property\n\t    def static_metadata(self) -> dict:\n\t        \"\"\"\n\t        dict containing static fields in the metadata\n\t        \"\"\"\n\t        static_metadata = {\n\t            \"coordinate reference system\": \"EPSG:4326\",\n\t            \"spatial resolution\": self.spatial_resolution,\n", "            \"spatial precision\": 0.01,\n\t            \"temporal resolution\": self.temporal_resolution(),\n\t            \"update cadence\": \"daily\",\n\t            \"provider url\": \"\",\n\t            \"data download url\": \"\",\n\t            \"publisher\": \"\",\n\t            \"title\": \"\",\n\t            \"provider description\": \"\",\n\t            \"dataset description\": \"\",\n\t            \"license\": \"\",\n", "            \"terms of service\": \"\",\n\t            \"name\": self.name(),\n\t            \"updated\": str(datetime.datetime.now()),\n\t            \"missing value\": self.missing_value_indicator(),\n\t            \"tags\": self.tags,\n\t            \"standard name\": self.standard_name,\n\t            \"long name\": self.long_name,\n\t            \"unit of measurement\": self.unit_of_measurement\n\t            }\n\t        return static_metadata\n", "    @classmethod\n\t    def collection(cls) -> str:\n\t        \"\"\"\n\t        Overall collection of data. Used for filling STAC Catalogue.\n\t        \"\"\"\n\t        return \"Dataset Collection\"\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        \"\"\"\n\t        The name of the dataset.\n", "        Used as a command-line trigger and to populate directory names, so whitespaces must be undesrcored or hyphenated\n\t        \"\"\"\n\t        return \"dataset_name\"\n\t    @classmethod\n\t    def temporal_resolution(cls) -> str:\n\t        \"\"\"Incremental step size for temporal values in the dataset's time dimension\"\"\"\n\t        return cls.SPAN_DAILY\n\t    @property\n\t    def dataset_start_date(self) -> datetime.datetime:\n\t        \"\"\"First date in dataset. Used to populate corresponding encoding and metadata.\"\"\"\n", "        return datetime.datetime(1979, 1, 1, 0)\n\t    @classmethod\n\t    def missing_value_indicator(cls) -> str:\n\t        \"\"\"\n\t        What value should be interpreted and masked as NA.\n\t        Failure to specify this correctly may result in values incorrectly entering calculations and/or coordinate values being masked\n\t        \"\"\"\n\t        return -9.96921e+36  # replace\n\t    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"Relative path in which to output raw files or a final zarr\"\"\"\n", "        return super().relative_path() / self.name()\n\t    @property\n\t    def file_type(cls) -> str:\n\t        \"\"\"\n\t        File type of raw data. Used to trigger file format-appropriate functions and methods for Kerchunking and Xarray operations.\n\t        \"\"\"\n\t        return \"NetCDF\"\n\t    @classmethod\n\t    def remote_protocol(cls) -> str:\n\t        \"\"\"\n", "        Remote protocol string for MultiZarrToZarr and Xarray to use when opening input files. 'File' for local, 's3' for S3, etc.\n\t        See fsspec docs for more details.\n\t        \"\"\"\n\t        return \"file\"\n\t    @classmethod\n\t    def identical_dims(cls) -> str:\n\t        \"\"\"\n\t        List of dimension(s) whose values are identical in all input datasets. This saves Kerchunk time by having it read these\n\t        dimensions only one time, from the first input file\n\t        \"\"\"\n", "        return [\"latitude\", \"longitude\"]\n\t    @classmethod\n\t    def concat_dims(cls) -> str:\n\t        \"\"\"\n\t        List of dimension(s) by which to concatenate input files' data variable(s) -- usually time, possibly with some other relevant dimension\n\t        \"\"\"\n\t        return [\"time\"]\n\t    def extract(self, rebuild: bool = False, date_range: list[datetime.datetime, datetime.datetime] = None, *args, **kwargs) -> bool:\n\t        \"\"\"\n\t        Check the remote from the end year of or after our data's end date. Download necessary files. Check\n", "        newest file and return `True` if it has newer data than us or `False` otherwise.\n\t        Pseudocode for the basic logic behind retrievals is provided below\n\t        Returns\n\t        -------\n\t        bool\n\t            A boolean indicating whether to proceed with a parse operation or not\n\t        \"\"\"\n\t        parsing_should_happen = False\n\t        # Insert custom retrieval code here\n\t        if rebuild:\n", "            # download everything, regardless of what data already exists\n\t            pass  # insert download everything logic here\n\t        elif date_range:\n\t            # only download for the selected date range\n\t            pass  # insert download everything logic here\n\t        else:\n\t            # if this is the first time an ETL is running, download all available data\n\t            # if this is an update to an existing dataset,download whatever new or updated data has been published since the last time the dataset was updated\n\t            new_data_found = False  # set conditions here\n\t            if new_data_found:\n", "                # download only the new data, then trigger a parse\n\t                parsing_should_happen = True\n\t        # Trigger a parse based on whether new data was found / rebuild flag provided\n\t        if parsing_should_happen | rebuild:\n\t            self.info(\"Conditions met to trigger a parse\")\n\t            return True\n\t        else:\n\t            self.info(\"Conditions not met to trigger a parse\")\n\t            return False\n\t    def prepare_input_files(self, keep_originals: bool = False):\n", "        \"\"\"\n\t        Command line tools converting raw downloaded data to daily / hourly data\n\t        Normally `convert_to_lowest_common_time_denom` and/or `ncs_to_nc4s` are used here,\n\t        perhaps in combinations, perhaps overloaded, perhaps paired with custom processing\n\t        \"\"\"\n\t        ...\n\t    @classmethod\n\t    def postprocess_zarr(self, dataset):\n\t        \"\"\"\n\t        Serves to rename dimensions, drop unneeded vars and dimensions, and generally reshape the overall Dataset\n", "        :param xarray.Dataset dataset: The dataset to manipulate. This is automatically supplied when this function is submitted under xarray.open_dataset()\n\t        \"\"\"\n\t        # Remove extraneous data variables and format dimensions/coordinates correctly\n\t        # unwanted_vars = [var for var in dataset.data_vars if var in ['time_bnds', 'lon_bnds', 'lat_bnds']]\n\t        # dataset = dataset.drop_vars(unwanted_vars)\n\t        # # Remove extraneous dimension\n\t        # dataset = dataset.drop_dims(\"extra_dim\")\n\t        # Rename lat and lon to latitude and longitude which are dClimate standard\n\t        # dataset = dataset.rename({\"lat\" : \"latitude\", \"lon\" : \"longitude\"})\n\t        # Convert longitudes to -180 to 180 as dClimate data is stored in this format\n", "        # dataset = dataset.assign_coords(longitude=(((dataset.longitude + 180) % 360) - 180))\n\t        # After converting, the longitudes may still start at zero. This converts the longitude coordinates to go from -180 to 180 if necessary.\n\t        # dataset = dataset.sortby(\"latitude\").sortby(\"longitude\")\n\t        return dataset\n\t    def set_zarr_metadata(self, dataset):\n\t        \"\"\"\n\t        Function to append to or update key metadata information to the attributes and encoding of the output Zarr. \n\t        Extends existing class method to create attributes or encoding specific to dataset being converted.\n\t        Dunction and its sub-methods provide a stepwise process for fixing encoding issues and getting the metadata just right.\n\t        :param xr.Dataset dataset: The dataset prepared for parsing to IPLD\n", "        \"\"\"\n\t        dataset = super().set_zarr_metadata(dataset)\n\t        # Some example considerations for setting metadata below\n\t        # Some filters may carry over from the original datasets will result in the dataset being unwriteable b/c \"ValueError: codec not available: 'grib\"\n\t        # for coord in [\"latitude\",\"longitude\"]:\n\t        #     dataset[coord].encoding.pop(\"_FillValue\",None)\n\t        #     dataset[coord].encoding.pop(\"missing_value\",None)\n\t        # Remove extraneous data from the data variable's attributes\n\t        # keys_to_remove = [\"coordinates\", \"history\",\"CDO\",\"CDI\"]\n\t        # for key in keys_to_remove:\n", "        #     dataset.attrs.pop(key, None)\n\t        #     dataset[self.data_var()].attrs.pop(key, None)\n\t        # It is important to note the encoding of a dataset in particular if compression is enabled\n\t        # if zlib or other compression is enabled this will subvert IPFS de-duplication if the dataset\n\t        # is to be continuously updated in the future so it is important to set compression to false\n\t        # and chunk according to the ETL developer's manual. Otherwise if the dataset will only be converted\n\t        # once and not updated in the future then it is ok to leave compression enabled.\n\t        # {'zlib': True,\n\t            # 'szip': False,\n\t            # 'zstd': False,\n", "            # 'bzip2': False,\n\t            # 'blosc': False,\n\t            # 'shuffle': True,\n\t            # 'complevel': 2,\n\t            # 'fletcher32': False,\n\t            # 'contiguous': False,\n\t            # 'chunksizes': (1, 1801, 3600),\n\t            # 'source': '/Users/test/Desktop/Staging/nc_to_zarr/test.nc',\n\t            # 'original_shape': (10, 1801, 3600),\n\t            # 'dtype': dtype('float32'),\n", "            # 'missing_value': 9.96921e+36,\n\t            # '_FillValue': 9.96921e+36\n\t        # }\n\t        # Add a finalization date attribute to the Zarr metadata. Set the value to the object's finalization date if it is present in this object.\n\t        # If not, try to carry over the finalization date from an existing dataset. Finally, if there is no existing data, set the date attribute\n\t        # to an empty string. If the finalization date exists, format it to %Y%m%d%H.\n\t        # if hasattr(self, \"finalization_date\") and self.finalization_date is not None:\n\t        #     dataset.attrs[\"finalization date\"] = datetime.datetime.strftime(self.finalization_date, \"%Y%m%d%H\")\n\t        # else:\n\t        #     if self.store.has_existing and not self.rebuild_requested and \"finalization date\" in self.store.dataset().attrs:\n", "        #         dataset.attrs[\"finalization date\"] = self.store.dataset().attrs[\"finalization date\"]\n\t        #         self.info(f'Finalization date not set previously, setting to existing finalization date: \"{dataset.attrs[\"finalization date\"]}\"')\n\t        #     else:\n\t        #         dataset.attrs[\"finalization date\"] = ''\n\t        #         self.info(\"Finalization date not set previously, setting to empty string\")\n\t        # return dataset\n\tclass MyNewETLPrecip(MyNewETL):\n\t    \"\"\"\n\t    Base class for precip sets\n\t    \"\"\"\n", "    @classmethod\n\t    def name(cls) -> str:\n\t        return f\"{super().name()}_precip\"\n\t    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"\n\t        This will be used to create the path for files to be download to and read from\n\t        For example datasets/dataset_name/precip\n\t        \"\"\"\n\t        return super().relative_path() / \"precip\"\n\t    @property\n", "    def tags(self) -> list[str]:\n\t        \"\"\"Tags for data to enable filtering\"\"\"\n\t        return [\"Precipitation\"]\n\t    @property\n\t    def standard_name(self) -> str:\n\t        \"\"\"Short form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n\t        return \"precipitation_amount\"\n\t    @property\n\t    def long_name(self) -> str:\n\t        \"\"\"Long form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n", "        return \"Precipitation\"\n\t    @property\n\t    def unit_of_measurement(self) -> str:\n\t        return \"mm\"\n\tclass MyNewETLTemp(MyNewETL):\n\t    \"\"\"\n\t    Base class for gridded temperature data\n\t    \"\"\"\n\t    @classmethod\n\t    def name(cls) -> str:\n", "        return f\"{super().name()}_temp\"\n\t    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"\n\t        This will be used to create the path for files to be download to and read from\n\t        For example datasets/dataset_name/temp\n\t        \"\"\"\n\t        return super().relative_path() / \"temp\"\n\t    @property\n\t    def tags(self) -> list[str]:\n\t        \"\"\"Tags for data to enable filtering\"\"\"\n", "        return [\"Temperature\"]\n\t    @property\n\t    def unit_of_measurement(self) -> str:\n\t        return \"degC\"\n\t    @property\n\t    def spatial_resolution(self) -> float:\n\t        return 0.5\n\tclass MyNewETLTempMin(MyNewETLTemp):\n\t    \"\"\"\n\t    Gridded minimum temperature data manager class\n", "    \"\"\"\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        return f\"{super().name()}_min\"\n\t    def relative_path(self) -> pathlib.Path:\n\t        return super().relative_path() / \"min\"\n\t    def data_var(self) -> str:\n\t        \"\"\"\n\t        Name of the column in the original data\n\t        \"\"\"\n", "        return \"tmin\"\n\t    @property\n\t    def standard_name(self) -> str:\n\t        \"\"\"Short form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n\t        return \"air_temperature\"\n\t    @property\n\t    def long_name(self) -> str:\n\t        \"\"\"Long form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n\t        return \"Daily Minimum Near-Surface Air Temperature\"\n\tif __name__ == \"__main__\":\n", "    MyNewETL().run_etl_as_script()\n"]}
{"filename": "examples/managers/chirps.py", "chunked_list": ["##### CHIRPS_Zarr.py\n\t#\n\t# Classes for managing CHIRPS global, gridded precipitation data\n\timport glob\n\timport datetime\n\timport pathlib\n\timport re\n\timport requests\n\timport xarray as xr\n\tfrom gridded_etl_tools.dataset_manager import DatasetManager\n", "class CHIRPS(DatasetManager):\n\t    \"\"\"\n\t    The base class for any CHIRPS set using Arbol's data architecture. It is a superclass of both CHIRPS Final\n\t    (monthly updates of .05 and .25 resolution from 1981) and CHIRPS Prelim (weekly updates of 0.05 resolution, from 2016 to present).\n\t    \"\"\"\n\t    def __init__(\n\t            self, *args,\n\t            # 0.05 dataset size is time: 15000, latitude: 2000, longitude: 7200\n\t            requested_dask_chunks = {\"time\": 200, \"latitude\": 25, \"longitude\": -1},  # 144 MB\n\t            requested_zarr_chunks = {\"time\": 200, \"latitude\": 25, \"longitude\": 50},  # 1 MB\n", "            requested_ipfs_chunker = \"size-5000\",\n\t            **kwargs\n\t            ):\n\t        \"\"\"\n\t        Initialize a new CHIRPS object with appropriate chunking parameters.\n\t        0.05 dataset size is time: 15000, latitude: 2000, longitude: 7200\n\t        \"\"\"\n\t        super().__init__(requested_dask_chunks, requested_zarr_chunks, requested_ipfs_chunker, *args, **kwargs)\n\t        self.standard_dims = [\"latitude\", \"longitude\", \"time\"]\n\t    @property\n", "    def static_metadata(self):\n\t        \"\"\"\n\t        Dict containing static fields in the metadata. These will be populated into STAC metadata and Zarr metadata.\n\t        Fields that are static should be manually specified here.\n\t        Fields that change per child class should be defined as properties or class methods under the relevant child class\n\t        \"\"\"\n\t        static_metadata = {\n\t            \"coordinate reference system\": \"EPSG:4326\",\n\t            \"update cadence\": self.update_cadence,\n\t            \"temporal resolution\": self.temporal_resolution(),\n", "            \"spatial resolution\": self.spatial_resolution,\n\t            \"spatial precision\": 0.00001,\n\t            \"provider url\": \"http://chg.geog.ucsb.edu/\",\n\t            \"data download url\": self.dataset_download_url,\n\t            \"publisher\": \"Climate Hazards Group, University of California at Santa Barbara\",\n\t            \"title\": \"CHIRPS Version 2.0\",\n\t            \"provider description\": \"The Climate Hazards Center is an alliance of multidisciplinary scientists and food security analysts\"\n\t                                    \" utilizing climate and crop models, satellite-based earth observations, and socioeconomic data sets to\"\n\t                                    \" predict and monitor droughts and food shortages among the world's most vulnerable populations. Through\"\n\t                                    \" partnerships with USAID, USGS, and FEWS NET, the CHC provides early warning to save lives and secure livelihoods.\",\n", "            \"dataset description\": (\n\t                \"Climate Hazards center InfraRed Precipitation with Station data (CHIRPS) is a 30+ year quasi-global rainfall data set.\"\n\t                \" Spanning 50°S-50°N (and all longitudes), starting in 1981 to near-present, CHIRPS incorporates 0.05° resolution satellite\"\n\t                \" imagery with in-situ station data to create gridded rainfall time series for trend analysis and seasonal drought monitoring. \"\n\t                \"For more information about CHIRPS data, visit http://chg.geog.ucsb.edu/data/chirps/index.html or\"\n\t                \" http://chg-wiki.geog.ucsb.edu/wiki/CHIRPS_FAQ. \"\n\t                \"For full technical documentation visit http://pubs.usgs.gov/ds/832/\"\n\t            ),\n\t            \"license\": \"Creative Commons Attribution 3.0\",\n\t            \"terms of service\": \"To the extent possible under the law, Pete Peterson has waived all copyright and related or neighboring\"\n", "                                \" rights to CHIRPS. CHIRPS data is in the public domain as registered with Creative Commons.\",\n\t            \"name\": self.name(),\n\t            \"updated\": str(datetime.datetime.now()),\n\t            \"missing value\": self.missing_value_indicator(),\n\t            \"tags\": self.tags,\n\t            \"standard name\": self.standard_name,\n\t            \"long name\": self.long_name,\n\t            \"unit of measurement\": self.unit_of_measurement\n\t            }\n\t        return static_metadata\n", "    @classmethod\n\t    def host_organization(cls) -> str:\n\t        return \"My Organization\"\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        return \"chirps\"\n\t    def relative_path(self) -> str:\n\t        return super().relative_path() / \"chirps\"\n\t    @classmethod\n\t    def collection(cls) -> str:\n", "        \"\"\"Overall collection of data. Used for filling and referencing STAC Catalog.\"\"\"\n\t        return \"CHIRPS\"\n\t    @classmethod\n\t    def temporal_resolution(cls) -> str:\n\t        \"\"\"Increment size along the \"time\" coordinate axis\"\"\"\n\t        return cls.SPAN_DAILY\n\t    @classmethod\n\t    def data_var(self) -> str:\n\t        \"\"\"Name of the relevant data variable in the original dataset\"\"\"\n\t        return \"precip\"\n", "    @property\n\t    def standard_name(self):\n\t        \"\"\"Short form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n\t        return \"precipitation_amount\"\n\t    @property\n\t    def long_name(self):\n\t        \"\"\"Long form name, as per the Climate and Forecasting Metadata Convention\"\"\"\n\t        return \"Precipitation\"\n\t    @property\n\t    def tags(self):\n", "        \"\"\"Tags for data to enable filtering\"\"\"\n\t        return [\"Precipitation\"]\n\t    @property\n\t    def unit_of_measurement(self):\n\t        \"\"\"Unit of measurement for the component key (data variable)\"\"\"\n\t        return \"mm\"\n\t    @property\n\t    def dataset_start_date(self):\n\t        \"\"\"First date in dataset. Used to populate corresponding encoding and metadata.\"\"\"\n\t        return datetime.datetime(1981, 1, 1, 0)\n", "    @classmethod\n\t    def missing_value_indicator(cls) -> int:\n\t        \"\"\"\n\t        Value within the source data that should be automatically converted to 'nan' by Xarray.\n\t        Cannot be empty/None or Kerchunk will fail, so use -9999 if no NoData value actually exists in the dataset.\n\t        \"\"\"\n\t        return -9999\n\t    @property\n\t    def dataset_download_url(self) -> str:\n\t        \"\"\"URL to download location of the dataset. May be an FTP site, API base URL, or otherwise.\"\"\"\n", "        return \"https://data.chc.ucsb.edu/products/CHIRPS-2.0\"\n\t    @property\n\t    def file_type(self) -> str:\n\t        \"\"\"\n\t        File type of raw data. Used to trigger file format-appropriate functions and methods for Kerchunking and Xarray operations.\n\t        \"\"\"\n\t        return 'NetCDF'\n\t    @classmethod\n\t    def remote_protocol(cls) -> str:\n\t        \"\"\"\n", "        Remote protocol string for MultiZarrToZarr and Xarray to use when opening input files. 'File' for local, 's3' for S3, etc.\n\t        See fsspec docs for more details.\n\t        \"\"\"\n\t        return 'file'\n\t    @classmethod\n\t    def identical_dims(cls) -> list[str]:\n\t        \"\"\"\n\t        List of dimension(s) whose values are identical in all input datasets. This saves Kerchunk time by having it read these\n\t        dimensions only one time, from the first input file\n\t        \"\"\"\n", "        return [\"latitude\", \"longitude\"]\n\t    @classmethod\n\t    def concat_dims(cls) -> list[str]:\n\t        \"\"\"\n\t        List of dimension(s) by which to concatenate input files' data variable(s) -- usually time, possibly with some other relevant dimension\n\t        \"\"\"\n\t        return [\"time\"]\n\t    @property\n\t    def bbox_rounding_value(self) -> int:\n\t        \"\"\"Value to round bbox values by\"\"\"\n", "        return 3\n\t    def extract(self, date_range: list[datetime.datetime, datetime.datetime] = None, *args, **kwargs) -> bool:\n\t        \"\"\"\n\t        Check CHIRPS HTTP server for files from the end year of or after our data's end date. Download necessary files. Check\n\t        newest file and return `True` if it has newer data than us or `False` otherwise.\n\t        Parameters\n\t        ----------\n\t        date_range: list, optional\n\t            A flag to specify a date range for download (and parsing). Assumes two isoformatted date strings. Defaults to None.\n\t        Returns\n", "        -------\n\t        bool\n\t            A boolean indicating whether to proceed with a parse operation or not\n\t        \"\"\"\n\t        # Find previous end date so the manager can start downloading the day after it\n\t        if not date_range:\n\t            try:\n\t                self.info(\"Calculating new start date based on end date in STAC metadata\")\n\t                end_date = self.get_metadata_date_range()[\"end\"] + datetime.timedelta(days=1)\n\t            except (KeyError, ValueError):\n", "                self.info(f\"Because no metadata found, starting file search from the dataset beginning of {self.dataset_start_date}\")\n\t                end_date = self.dataset_start_date\n\t            download_year_range = range(end_date.year, datetime.datetime.now().year + 1)\n\t        else:\n\t            self.info(\"Calculating start and end dates based on the provided date range.\")\n\t            end_date = date_range[1]\n\t            download_year_range = range(date_range[0].year, end_date.year + 1)\n\t        # find all files in the relevant remote server folder\n\t        url = f\"{self.dataset_download_url}/{self.remote_path}\"\n\t        self.info(f\"connecting to {url}\")\n", "        index = requests.get(url).text\n\t        # loop through every year from end date until present year and download any files that are newer than ones we have on our server\n\t        for year in download_year_range:\n\t            pattern = fr\"<a.+>(chirps-.+{year}.+\\.nc)</a></td><td[^>]+>([^<]+[0-9])\\s*</td>\"\n\t            matches = re.findall(pattern, index, re.MULTILINE)\n\t            if len(matches) > 0:\n\t                file_name, _ = matches[0]\n\t                local_path = self.local_input_path() / file_name\n\t                self.info(f\"downloading remote file {file_name}\")\n\t                remote_file = requests.get(f\"{url}{file_name}\").content\n", "                with open(local_path, 'wb') as local_file:\n\t                    local_file.write(remote_file)\n\t        # check if newest file on our server has newer data\n\t        try:\n\t            newest_file_end_date = self.get_newest_file_date_range()[1]\n\t        except IndexError as e:\n\t            self.info(f\"Date range operation failed due to absence of input files. Exiting script. Full error message: {e}\")\n\t            return False\n\t        self.info(f\"newest file ends at {newest_file_end_date}\")\n\t        if newest_file_end_date >= end_date:\n", "            self.info(f\"newest file has newer data than our end date {end_date}, triggering parse\")\n\t            return True\n\t        else:\n\t            self.info(f\"newest file doesn't have data past our existing end date {end_date}\")\n\t            return False\n\t    def prepare_input_files(self, keep_originals: bool = False):\n\t        \"\"\"\n\t        Convert each of the input files (and associated metadata files) to a collection of daily netCDF4 classic files suitable for\n\t        reading by Kerchunk and intake into Xarray. This allows us to stack data into modern, performant N-Dimensional Zarr data.\n\t        Parameters\n", "        ----------\n\t        keep_originals: bool, optional\n\t            A flag to preserve the original files for debugging purposes. Defaults to False.\n\t        \"\"\"\n\t        input_dir = pathlib.Path(self.local_input_path())\n\t        yearlies = [pathlib.Path(file) for file in glob.glob(str(input_dir / \"*.nc\"))]\n\t        if len(yearlies) == 0:\n\t            if glob.glob(str(input_dir / \"*.nc4\")):\n\t                self.info(\"Only converted NC4s found, skipping preparation step\")\n\t            if not glob.glob(str(input_dir / \"*.nc4\")):\n", "                raise FileNotFoundError(\"Neither yearly files nor converted NC4s found in input directory. Please provide data before processing\")\n\t        else:\n\t            # Convert input files to daily NetCDFs\n\t            self.info(f\"Converting {(len(list(yearlies)))} yearly NetCDF file(s) to daily NetCDFs\")\n\t            self.convert_to_lowest_common_time_denom(yearlies, keep_originals)\n\t            # Convert all NCs to NC4s\n\t            self.ncs_to_nc4s(keep_originals)\n\t        self.info(\"Finished preparing input files\")\n\t    def remove_unwanted_fields(self, dataset: xr.Dataset) -> xr.Dataset:\n\t        \"\"\"\n", "        Function to append to or update key metadata information to the attributes and encoding of the output Zarr.\n\t        Extends existing class method to create attributes or encoding specific to this dataset.\n\t        Parameters\n\t        ----------\n\t        dataset: xr.Dataset\n\t            The dataset prepared for parsing, before removing unwanted fields specific to the dataset\n\t        Returns\n\t        -------\n\t        dataset: xarray.Dataset dataset\n\t            The dataset prepared for parsing, after removing unwanted fields specific to the dataset\n", "        \"\"\"\n\t        dataset = super().remove_unwanted_fields(dataset)\n\t        for variable in dataset.variables:\n\t            dataset[variable].encoding[\"_FillValue\"] = self.missing_value_indicator()\n\t        # Remove extraneous data from the data variable's attributes\n\t        keys_to_remove = [\n\t            'Conventions', 'history', 'version', 'date_created',\n\t            'creator_name', 'creator_email', 'institution', 'documentation', 'reference',\n\t            'comments', 'acknowledgements', 'ftp_url', 'website', 'faq',\n\t            'zlib', 'shuffle', 'complevel', 'contiguous', 'source', 'original_shape', 'missing_value'\n", "            ]\n\t        for key in keys_to_remove:\n\t            dataset.attrs.pop(key, None)\n\t            dataset[self.data_var()].attrs.pop(key, None)\n\t            dataset[self.data_var()].encoding.pop(key, None)\n\t        return dataset\n\tclass CHIRPSFinal(CHIRPS):\n\t    \"\"\"\n\t    A class for finalized CHIRPS data\n\t    \"\"\"\n", "    @classmethod\n\t    def name(cls) -> str:\n\t        \"\"\"Name used to refer to the dataset where it's published\"\"\"\n\t        return f\"{super().name()}_final\"\n\t    def relative_path(self) -> pathlib.Path:\n\t        return super().relative_path() / \"final\"\n\t    @property\n\t    def update_cadence(self) -> str:\n\t        return \"monthly\"\n\t    def populate_metadata(self):\n", "        super().populate_metadata()\n\t        self.metadata[\"revision\"] = \"final\"\n\tclass CHIRPSFinal05(CHIRPSFinal):\n\t    \"\"\"\n\t    Finalized CHIRPS data at 0.05 resolution\n\t    \"\"\"\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        \"\"\"Name used to refer to the dataset where it's published\"\"\"\n\t        return f\"{super().name()}_05\"\n", "    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"Relative path used to store data under 'datasets' and 'climate' folders\"\"\"\n\t        return super().relative_path() / \"05\"\n\t    @property\n\t    def remote_path(self) -> str:\n\t        \"\"\"path on CHIRPS server to relevant files\"\"\"\n\t        return \"global_daily/netcdf/p05/\"\n\t    @property\n\t    def spatial_resolution(self) -> float:\n\t        \"\"\"Increment size along the latitude/longitude coordinate axis\"\"\"\n", "        return 0.05\n\tclass CHIRPSFinal25(CHIRPSFinal):\n\t    \"\"\"\n\t    Finalized CHIRPS data at 0.25 resolution\n\t    \"\"\"\n\t    def __init__(self, *args, **kwargs):\n\t        \"\"\"\n\t        Initialize a new CHIRPS object with appropriate chunking parameters.\n\t        \"\"\"\n\t        # 0.25 dataset size is time: 15000, latitude: 400, longitude: 1440\n", "        chunks = dict(\n\t            requested_dask_chunks={\"time\": 500, \"latitude\": 40, \"longitude\": -1},  # 115 MB\n\t            requested_zarr_chunks={\"time\": 500, \"latitude\": 40, \"longitude\": 40},  # 3.2 MB\n\t            requested_ipfs_chunker=\"size-6400\"\n\t            )\n\t        kwargs.update(chunks)\n\t        super().__init__(*args, **kwargs)\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        \"\"\"Name used to refer to the dataset where it's published\"\"\"\n", "        return f\"{super().name()}_25\"\n\t    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"Relative path used to store data under 'datasets' and 'climate' folders\"\"\"\n\t        return super().relative_path() / \"25\"\n\t    @property\n\t    def remote_path(self) -> str:\n\t        \"\"\"path on CHIRPS server to relevant files\"\"\"\n\t        return \"global_daily/netcdf/p25/\"\n\t    @property\n\t    def spatial_resolution(self) -> float:\n", "        \"\"\"Increment size along the latitude/longitude coordinate axis\"\"\"\n\t        return 0.25\n\tclass CHIRPSPrelim05(CHIRPS):\n\t    \"\"\"\n\t    Preliminary CHIRPS data at 0.05 resolution\n\t    \"\"\"\n\t    @classmethod\n\t    def name(cls) -> str:\n\t        \"\"\"Name used to refer to the dataset where it's published\"\"\"\n\t        return f\"{super().name()}_prelim_05\"\n", "    def relative_path(self) -> pathlib.Path:\n\t        \"\"\"Relative path used to store data under 'datasets' and 'climate' folders\"\"\"\n\t        return super().relative_path() / \"prelim\" / \"05\"\n\t    @property\n\t    def remote_path(self) -> str:\n\t        \"\"\"path on CHIRPS server to relevant files\"\"\"\n\t        return \"prelim/global_daily/netcdf/p05/\"\n\t    @property\n\t    def spatial_resolution(self) -> float:\n\t        \"\"\"Increment size along the latitude/longitude coordinate axis\"\"\"\n", "        return 0.05\n\t    @property\n\t    def dataset_start_date(self):\n\t        \"\"\"First date in dataset. Used to populate corresponding encoding and metadata.\"\"\"\n\t        return datetime.datetime(2019, 1, 1, 0)\n\t    @property\n\t    def update_cadence(self) -> str:\n\t        return \"weekly\"\n\t    def populate_metadata(self):\n\t        super().populate_metadata()\n", "        self.metadata[\"revision\"] = \"preliminary\"\n\tif __name__ == \"__main__\":\n\t    CHIRPS().run_etl_as_script()\n"]}
