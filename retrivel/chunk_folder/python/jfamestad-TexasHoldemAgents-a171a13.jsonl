{"filename": "src/main.py", "chunked_list": ["import copy\n\timport logging\n\tfrom model.holdem_round import HoldemRound\n\tfrom players.floyd_folds import Floyd\n\tfrom players.callie_calls import Callie\n\tfrom players.robby_random import Robby\n\tfrom players.ricky_raise import Ricky\n\tfrom players.herbie_human import Herbie\n\tfrom players.stuart_stats import Stuart\n\tfrom players.paula_pairs import Paula\n", "from players.johnny_jacks import Johnny\n\tfrom players.chad_gpt import Chad\n\tfrom players.claude import Claude\n\tfrom model.tournament import Tournament\n\tplayers = [\n\t    Ricky(\"Alice\", 100),\n\t    Robby(\"Cody\", 100),\n\t    # Chad(\"Chad\", 100, temperature=.3),\n\t    Claude(\"Claude\", 100),\n\t    Callie(\"Baxter\", 100),\n", "    # Ricky(\"Julio\", 100),\n\t    # Robby(\"Michelle\", 100),\n\t    # Johnny(\"Johnny\", 100),\n\t    # Callie(\"Sophia\", 100),\n\t    # Stuart(\"Alice\", 100),\n\t    Paula(\"Paula\", 100),\n\t    Johnny(\"Beezie\", 100),\n\t    # Johnny(\"Madi\", 100),\n\t    # Herbie(\"Josh\", 100),\n\t    Robby(\"Michelle\", 100),\n", "    # Johnny(\"Johnny\", 100),\n\t    Callie(\"Sophia\", 100),\n\t    # Floyd(\"Bob\", 100)\n\t]\n\tif __name__ == '__main__':\n\t    winners = []\n\t    for i in range(100):\n\t        # try:\n\t            print(f\"Starting round {i}\")\n\t            new_players = [copy.deepcopy(player) for player in players]\n", "            tournament = Tournament(\n\t                players=new_players,\n\t                tournament_id=i\n\t            )\n\t            tournament.play()\n\t            logging.info(tournament.winners)\n\t            winners.append(tournament.winners)\n\t        # except Exception as e:\n\t        #     print(f\"Error: {e}\")\n\t        #     print(e)\n", "        #     print(\"Too many bad responses...\")\n\t    logging.info(\"Results\")\n\t    for result in winners:\n\t        logging.info(f\"\\t{result}\")\n"]}
{"filename": "src/players/test_players.py", "chunked_list": ["from collections import namedtuple\n\tCharacter = namedtuple(\"Character\", (\"filename\", \"classname\"))\n\tcharacters = [\n\t    Character(\"callie_calls\", \"Callie\"),\n\t    Character(\"floyd_folds\", \"Floyd\"),\n\t    Character(\"herbie_human\", \"Herbie\"),\n\t    Character(\"johnny_jacks\", \"Johnny\"),\n\t    Character(\"ricky_raise\", \"Ricky\"),\n\t    Character(\"robbie_random\", \"Robby\"),\n\t    Character(\"stuart_stats\", \"Stuart\"),\n", "]\n\tdef do_test_character(character):\n\t    # print(f\"Testing {character.classname} from {character.filename}\")\n\t    # module = __import__(character.filename)\n\t    # PlayerCharacter = getattr(module, character.classname)\n\t    # import players\n\t    print(f\"Importing {character.classname} from {character.filename}\")\n\t    PlayerCharacter = getattr(__import__(character.filename), f\"{character.classname}\")\n\t# def test_characters():\n\t#     for character in characters:\n", "#         do_test_character(character)"]}
{"filename": "src/players/claude.py", "chunked_list": ["import pprint\n\timport json\n\timport sys\n\tfrom langchain.llms import Anthropic\n\t# from langchain import PromptTemplate, LLMChain\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Claude(Player):\n\t    persona = \"Claude\"\n\t    def __init__(self, name, bankroll, raise_limit=3, temperature=.5, verbose=False):\n", "        super().__init__(name, bankroll)\n\t        self.raise_count = 0\n\t        self.raise_limit = raise_limit\n\t        self.llm = llm = Anthropic() # todo: we arent passing temperature yet...\n\t    def render_prompt(self, game_state):\n\t        prompt = \"Below is a description of the current state of a Texas Holdem game. Read this and then assume the role of Claude in the simulation.\\n\"\n\t        # prompt += str(game_state) + \"\\n\"\n\t        prompt += \"\"\"\n\tThis is a simulation and is not being played for real money. Assume the role of the player Claude. \n\tClaude is a tough opponent. Claude plays a calculated game always thinking about next moves. \n", "Claude watches other players to consider their strategy in his.\n\tClaude is also strategic. Claude does not want to lose and knows going ALL IN and losing means losing the whole tournament.\n\tIt's important to win the hand. but more important to stay in the tournament. Claude is not afraid to FOLD a hand that won't win.\n\tClaude will go all in, but only when he's really confident, or really desperate.\n\tClaude thinks through his money on the table, his bankroll, max_bet, and the current bet before deciding an action.\n\tClaude knows that if the current bet is greater than or equal to his max_bet, Claude would be going ALL IN to CALL and risk losing the tournament.\n\tClaude is way too smart to go anywhere close to all in during early rounds unless he has FOUR_OF_A_KIND or better. Claude wants to win the long game.\n\tClaude's main strategy is to maximize his wins, and minimize his losses. That means betting strong when his hand isvery strong. \n\tIt also means not going all in on medium strength hands. Claude knows that to win the tournament, he has to stay in it. \n\tThis is an example of a card in this game. It is the 9 of Diamonds.\n", "Card(\"9\", \"Diamonds\")\n\tThe \"Rank\" of the 9 of Diamonds is 9.\n\tThe \"Suit\" of the 9 of Diamonds is Diamonds.\n\tWe say there is a pair when two cards have the same Rank.\n\tIf the cards in your hole are not the same Rank, you DO NOT have a pocket pair.\n\tWe say a hand is a flush when 5 cards are the same Suit.\n\tYou can make a pair from two cards of the same Rank. Two cards of the same Suit are not helpful unless you get 3 more in the community cards to make a Flush.\n\tHere are some examples of Hole Cards:\n\t[Card(\"9\", \"Diamonds\"), Card(\"9\", \"Hearts\")] is a pocket pair of 9's, this is a good initial hand and might lead to a 3 of a kind, full house, or four of a kind.\n\t[Card(\"9\", \"Diamonds\"), Card(\"6\", \"Hearts\")] unmatched on rank (a 6 and a 9) and on suit (a Diamons and a Heart) this is not a strong starting hand.\n", "[Card(\"A\", \"Hearts\"), Card(\"J\", \"Hearts\")] two high cards of the same suit (Hears). This is a medium strong initial hand.\n\t[Card(\"A\", \"Diamonds\"), Card(\"A\", \"Hearts\")] a pair of high cards (A). This is a great initial hand.\n\t[Card(\"3\", \"Hearts\"), Card(\"9\", \"Hearts\")] unpaired low cards of the same suit. This hand may be playable and could lead to a flush, but it is not super strong.\n\t[Card(\"K\", \"Hearts\"), Card(\"K\", \"Spades\")] a pocket pair of Kings. A great starting hand.\n\t[Card(\"K\", \"Hearts\"), Card(\"9\", \"Hearts\")] a high card and both cards are the same suit. This is a medium strength starting hand.\n\tYou can make a hand from 5 cards selected from your hole and the flop, turn, and river community cards. \n\tYou can describe a hand like this:\n\t('PAIR', '4', Card(\"K\", \"Spades\")): This example hand is a Pair of 4's with a King High Card. A pair is not a very strong hand, but it beats a hand with aHIGH CARD only.\n\t('TWO_PAIR', ['6', '7']): This is an example of TWO PAIR with 6's and 7's. That means the hand includes two 6's and two 7's including community cards.\n\tTWO_PAIR is good, but almost never good enough to go all_in for.\n", "Claude starts to play moderately aggressive when he has TWO PAIR.\n\tClaude plays very aggressively when he has three of a kind or better. Especially one of the pairs uses cards from his hole.\n\t('THREE_OF_A_KIND', '8'): Three of a Kind is a very good hand.\n\t('FLUSH', Card(\"Q\", \"Hearts\")): A Flush is a very strong hand. A Flush beats a Straight. A Flush wins against 3 of a Kind and Pairs too.\n\tIf Claude has a FLUSH or Better, he will bet big before the showdown, working his bet up a bit more in every betting round leading up to it until all community cards are revealed.\n\tWhat is Claude's next move? Respond with a json object that includes the action and a brief explanation. \n\tThe response should be proper json in the form:\n\t{\n\t    \"Action\": action,\n\t    \"Amount\": amount,\n", "    \"Explanation\": detailed_explanation\n\t}\n\tValid actions are CALL RAISE FOLD and they are case sensitive (must be all caps!!)\n\tValid values for amount are integers greater than or equal to the table current_bet and less than or equal to the players max_bet.\n\tClaude knows other players are likely playing simple strategies. For example, some players will always CALL. Others will only raise if they have a pair or better.\n\tMake sure you use CALL if you're betting the same as the current amount.\n\tIf you CALL, the Amount must be the current_bet from the table.\n\tClaude would never fold if your money_on_the_table is already close to the current_bet.\n\tIf Claude has a great hand, he will raise strongly to increase the pot size when possible.\n\tIf Claude wants to bet more than the table current_bet, that is a RAISE.\n", "If Claude wants to RAISE, the Amount is the total bet amount equal to the sum of the current_bet plus your additional amount. \n\tFor example, if the bet_amount is 5 and you are raising by 3, the Amount is 8.\n\tClaude would never FOLD if his money_on_table is equal to the current_bet. That would be a wasted opportunity.\n\tClaude speaks thoughtfully and explains the hist thought process as part of his play. He always considers how others will play against him.\n\tDo not include anything outside of the json object. The response should be only json.\n\t\"\"\"\n\t        prompt += f\"You have {game_state['hole']} in the hole.\\n\"\n\t        if game_state['flop'] is not None:\n\t            prompt += f\"The community cards revealed on the flop are: {game_state['flop']}.\\n\"\n\t            prompt += \"If the flop cards improved your hand, you can RAISE to increase the pot size and your potential winnings.\\n\"\n", "        if game_state['turn'] is not None:\n\t            prompt += f\"The community cards revealed on the turn are: {game_state['turn']}.\\n\"\n\t        if game_state['river'] is not None:\n\t            prompt += f\"The community cards revealed on the river are: {game_state['river']}.\\n\"\n\t        if game_state['flop'] is not None:\n\t            prompt += f\"Your best hand with the cards revealed so far is {self.best_hand(game_state['table']).describe()}. This hand includes all available cards from the hole, flop, turn, and river \\n\"\n\t            prompt += \"If Claude can make TWO PAIR, THREE of a KIND or better, he is very confident in his hand and will bet to draw others in to the pot.\"\n\t            if game_state['river'] is None:\n\t                if game_state['turn'] is None:\n\t                    prompt += \"Your hand may still improve with the reveal of the turn and the river.\\n\"\n", "                else:\n\t                    prompt += \"Your hand may still improve with the reveal of the river.\\n\"\n\t        if game_state['flop'] is not None:\n\t            prompt += \"If the community cards do not improve your hand and might improve your opponents hand, you should not add more money to the pot.\\n\"\n\t        if game_state[\"river\"] is not None:\n\t            prompt += f\"It's the last betting round. If other players are betting weak, it might be a sign they have weak hands. If you think they have week hands, RAISE to increase the pot size.\\n\"\n\t        prompt += f\"It is round number {game_state['round_number']}. Claude would be embaressed to lose before round 10, and he he bets accordingly.\"\n\t        prompt += f\"The current bet is: {game_state['current_bet']}.\\n\"\n\t        prompt += f\"Your maximum bet is {self.max_bet}\\n\"\n\t        prompt += f\"You already have {self.status.money_on_table} on the table, committed to the bet.\\n\"\n", "        prompt += \"Remember, your competitors use the community cards too. What is the best hand you can make? What do you think they can make?\\n\"\n\t        prompt += \"Before you select an Action, validate what type of hand you are holding. A Pair is two cards of the same rank. 3 of a Kind is three cards of same rank.\\n\"\n\t        prompt += \"You cannot bet less than the current bet unless you are ALL IN. ALL IN means the bet is equal to your maximum bet.\\n\"\n\t        prompt += \"You cannot bet more than your maximum bet. If your bet is equal to the max, you are ALL IN.\\n\"\n\t        prompt += \"If your hand is very good, RAISE to increase the pot size. If your hand is very weak, FOLD to avoid loss unless your money is already on the table.\\n\"\n\t        prompt += \"Even if the Amount is 0, just include it in the json response anyway.\\n\"\n\t        prompt += \"If you are going all in, the action type is RAISE if you're betting more than the current bet amount, otherwise CALL if the current bet is at or above your max bet.\\n\"\n\t        prompt += \"Think first about Claude and his strategy, then about the cards in his hole. Finally, consider the communit cards and the possible hands.\\n\"\n\t        prompt += \"How will Claude Play in light of the treacherous strategies at play against him? Explain how Claude considered his strategy and the Action and Amount he will play.\\n\"\n\t        prompt += \"Claude's main strategy is to raise the bet higher when his hand is strong, or wen he senses weakness.\\n\"\n", "        # prompt += f\"The minimum amount you can RAISE is {game_state['table'].bet_amount}\"\n\t        if game_state['flop'] is None:\n\t            prompt += \"A pair after the flop is nothing to get excited about. It might take TWO PAIR or better to take the hand.\\n\"\n\t            prompt += f\"After this betting round, you will see the flop.\\n\"\n\t            prompt += \"If your cards are really weak, and your money_on_table is still 0 or really low, you should just FOLD and conserve your bankroll.\\n\"\n\t            if self._hole[0].rank == self._hole[1].rank:\n\t                prompt += \"Claude is holding a pocket pair.\\n\"\n\t            else:\n\t                prompt += \"Claude is not holding a pocket pair but might still make a good hand with the flop. Think about what hands he might be able to make with his hole cards.\\n\"\n\t                prompt += \"It might make sense to stay in if you have a high card, or if the current_bet is equal to your money_on_table. But, don't raise unless you have something better.\\n\"\n", "            if self._hole[0].suit == self._hole[1].suit:\n\t                prompt += \"Claude's cards have matched suites. A flush draw may be possible.\\n\"\n\t        elif game_state['turn'] is None:\n\t            prompt += f\"After this betting round, you will see the turn.\\n\"\n\t        elif game_state['river'] is None:\n\t            prompt += \"After this betting round, you will see the river.\\n\"\n\t        else:\n\t            prompt += \"After this betting round, everyone will show cards and we will settle the round.\\n\"\n\t        return prompt\n\t    def decide(self, game_state):\n", "        prompt = self.render_prompt(game_state)\n\t        # print(\"Prompt\")\n\t        # print(prompt)\n\t        print(f\"Hole: {self._hole}\")\n\t        print(f\"Flop: {game_state['table'].flop}\")\n\t        print(f\"Turn: {game_state['table'].turn}\")\n\t        print(f\"River: {game_state['table'].river}\")\n\t        if game_state['flop'] is not None:\n\t            print(f\"Best Made Hand: {self.best_hand(game_state['table']).describe()}\")\n\t        print(f\"Current Bet: {game_state['current_bet']}\")\n", "        print(f\"Your maximum bet is {self.max_bet} and you already have {self.status.money_on_table} of that on the table.\\n\")\n\t        llm_decision = self.llm(prompt)\n\t        print(\"LLM Decision\")\n\t        print(llm_decision)\n\t        cleaned_response = \"{\" + llm_decision.split(\"{\")[1].split('}')[0] + \"}\"\n\t        print(f\"Cleaned Response: [{cleaned_response}]\")\n\t        action_params = json.loads(llm_decision)\n\t        print(action_params)\n\t        return json.loads(cleaned_response)\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n", "        print(f\"{self.name} is figuring out their next play...\")\n\t        print(f\"Round Number: {round_number}\")\n\t        game_state = {\n\t            \"hole\": self._hole,\n\t            \"player_status\": player_status,\n\t            \"table\": table,\n\t            \"is_called\": is_called,\n\t            \"current_bet\": table.bet_amount,\n\t            \"max_bet\": self.max_bet,\n\t            \"flop\": table.flop,\n", "            \"turn\": table.turn,\n\t            \"river\": table.river,\n\t            \"round_number\": round_number,\n\t            # \"big_blind\": self.table.big_blind,\n\t            # \"num_players\": self.table.num_players,\n\t            # \"money_on_table\": self.money_on_table,\n\t        }\n\t        retry_count = 0\n\t        action_params = None\n\t        while retry_count < 5:\n", "            try:\n\t                action_params = self.decide(game_state)\n\t                if not 'Action' in action_params.keys() and not 'action' in action_params.keys():\n\t                    raise Exception(\"MissingActionType\")\n\t                if not 'Amount' in action_params.keys() and not 'amount' in action_params.keys():\n\t                    raise Exception(\"InvalidActionAmount\")\n\t                if 'action' in action_params:\n\t                    action_params['Action'] = action_params['action']\n\t                if 'amount' in action_params:\n\t                    action_params['Amount'] = action_params['amount']\n", "                if action_params['Amount'] == '':\n\t                    action_params['Amount'] = 0\n\t                if not 'Action' in action_params.keys():\n\t                    raise Exception(\"NoValidActionType\")\n\t                if not 'Amount' in action_params.keys():\n\t                    raise Exception(\"NoActionAmount\")\n\t                if not action_params['Action'].upper() in ['CALL', 'FOLD', 'RAISE']:\n\t                    raise Exception(\"InvalidActionType\")\n\t                action_params['Action'] = action_params['Action'].strip()\n\t                break\n", "            except json.decoder.JSONDecodeError as e:\n\t                print(f\"Warning: Received json response we cant unpack - {e}\")\n\t            except IndexError as e:\n\t                print(f\"Warning: Received a badly formatted llm decision\")\n\t            except Exception as e:\n\t                print(f\"Warning: {e}\")\n\t            finally:\n\t                retry_count += 1\n\t        if action_params is None:\n\t            print(\"WARNING: Failed to get valid play after 5 tries to the LLM, FOLDING.\")\n", "            action_params = {}\n\t            action_params['Action'] = 'FOLD'\n\t            action_params['Amount'] = 0\n\t        if 'Action' in action_params.keys() and not action_params['Action'] == \"FOLD\":\n\t            action_params['Amount'] = max(int(int(action_params['Amount']) if 'Amount' in action_params else 0), table.bet_amount)\n\t        action_params['Amount'] = min(int(int(action_params['Amount']) if 'Amount' in action_params else 0), self.max_bet)\n\t        if 'action' in action_params:\n\t            action_params['Action'] = action_params['action']\n\t        if 'amount' in action_params:\n\t            action_params['Amount'] = action_params['amount']\n", "        if action_params['Amount'] == '':\n\t            action_params['Amount'] = 0\n\t        if action_params['Action'] == \"RAISE\":\n\t            # Check for mis-raise thats actually a call\n\t            if int(table.bet_amount) >= int(min(action_params['Amount'], self.max_bet)):\n\t                action_params['Action'] = \"CALL\" # flip it\n\t                action_params['Amount'] = int(min(action_params['Amount'], self.max_bet))\n\t        is_all_in = action_params['Amount'] == self.max_bet\n\t        action = Action(action_params['Action'].strip().upper(), action_params['Amount'], all_in=is_all_in)\n\t        print(action)\n", "        return action\n"]}
{"filename": "src/players/paula_pairs.py", "chunked_list": ["from model.player import Player\n\tfrom model.action import Action\n\tclass Paula(Player):\n\t    persona = \"Paula Pairs\"\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        # Check if player has a pair\n\t        hand = self._hole\n\t        if hand[0] == hand[1]:\n\t            # If player has a pair, raise bet by double the current bet\n\t            if table.bet_amount * 2 <= self.max_bet:\n", "                action = Action(\"RAISE\", table.bet_amount * 2)\n\t            else:\n\t                if self.max_bet <= table.bet_amount:\n\t                    action = Action(\"CALL\", self.max_bet, all_in=True)\n\t                else:\n\t                    action = Action(\"RAISE\", self.max_bet, all_in=True)\n\t        else:\n\t            # Player does not have a pair, fold\n\t            action = Action(\"FOLD\", 0)\n\t        return action\n"]}
{"filename": "src/players/herbie_human.py", "chunked_list": ["import logging\n\tfrom pprint import pprint\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Herbie(Player):\n\t    persona = \"Herbie Human\"\n\t    def prompt_for_action(self, table):\n\t        action_types = {\n\t            \"c\": \"CALL\",\n\t            \"r\": \"RAISE\",\n", "            \"f\": \"FOLD\",\n\t        }\n\t        print(\n\t            f\"The bet is {table.bet_amount} and you have {self.bankroll} in your bankroll and {self.status.money_on_table} on the table\")\n\t        print(\"Check/ Call, Fold, or Raise\")\n\t        prompt = \"Enter: c | r | f: \"\n\t        action_type_response = input(prompt)\n\t        print(f\"Got Action: {action_type_response}\")\n\t        print()\n\t        if not action_type_response in action_types.keys():\n", "            # raise ValueError(f\"Invalid Action Type: {action_type_response}. Valid responses: c | r | f\")\n\t            return self.prompt_for_action(table)\n\t        amount_response = None\n\t        if action_type_response in [\"r\"]:\n\t            prompt = \"Please enter an amount: \"\n\t            amount_response = int(input(prompt))\n\t            if not amount_response > table.bet_amount:\n\t                return self.prompt_for_action(table)\n\t        if action_type_response in [\"c\"]:\n\t            amount_response = min(table.bet_amount, self.max_bet)\n", "        all_in = amount_response == self.max_bet\n\t        if all_in:\n\t            print(f\"{self.name} is all in\")\n\t        try:\n\t            action = Action(action_types[action_type_response], amount_response, all_in=all_in)\n\t        except:\n\t            print(\"Invalid Action, Please try again\")\n\t            return self.prompt_for_action(table)\n\t        return action\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n", "        pprint(player_status)\n\t        print(self._hole)\n\t        print(f\"The bet is: {table.bet_amount}\")\n\t        if table.flop:\n\t            print(f\"Flop: {table.flop}\")\n\t        if table.turn:\n\t            print(f\"Turn: {table.turn}\")\n\t        if table.river:\n\t            print(f\"Rover: {table.river}\")\n\t        while True:\n", "            action = self.prompt_for_action(table)\n\t            if action.action_type in [\"CALL\", \"FOLD\"]:\n\t                break\n\t            if action.amount < table.bet_amount and not action.all_in:\n\t                print(\"Cannot bet less than the table bet unless youre all_in\")\n\t                continue\n\t            if action.amount > self.bankroll + self.status.money_on_table:\n\t                print(\"You dont have enough money for this bet\")\n\t                continue\n\t            break\n", "        # action = Action(\"CALL\", table.bet_amount)\n\t        logging.debug(f\"Play - {self.name}: {action}\")\n\t        return action\n\t    def check_results(self, table, results):\n\t        pprint(results)\n\t        print()"]}
{"filename": "src/players/base_llm_player.py", "chunked_list": ["from langchain import PromptTemplate\n\tfrom model.player import Player\n\tclass LLMPlayer(Player):\n\t    def __init__(self,\n\t                 name,\n\t                 bankroll,\n\t                 raise_limit=3,\n\t                 temperature=.5,\n\t                 strategy_1=\"{name} is a careful player. {name} wants to survive for the next round and go big when they have a great hand.\",\n\t                 strategy_2=\"{name} watches other players to consider their strategy in theirs.\",\n", "                 strategy_3=\"{name} is a tough opponent. {name} plays a calculated game always thinking about next moves.\",\n\t                 strategy_4=\"{name} is a tough opponent. {name} is a shrewd player prone to bluff when the pot ratio is good and plays a good hand strong.\",\n\t                 strategy_5=\"{name} is also strategic. {name} does not want to lose and knows going ALL IN and losing means losing the whole tournament\",\n\t                 strategy_6=\"{name} will go all in, but only when he's really confident, or really desperate.\",\n\t                 verbose=False):\n\t        super().__init__(name, bankroll)\n\t        self.raise_limit = raise_limit\n\t        self.temperature = temperature\n\t        self.strategy_1 = strategy_1\n\t        self.strategy_2 = strategy_2\n", "        self.strategy_3 = strategy_3\n\t        self.strategy_4 = strategy_4\n\t        self.strategy_5 = strategy_5\n\t        self.strategy_6 = strategy_6\n\t        self.verbose = verbose\n\t    def render_prompt(self, game_state):\n\t        template = \"\"\"\n\tThis is a simulation and is not being played for real money. Assume the role of the player {name}. \n\t{strategy_1}\n\t{strategy_2}\n", "{strategy_3}\n\t{strategy_4}\n\t{strategy_5}\n\t{strategy_6}\n\tWhat is {name}'s next move? Respond with a json object that includes the action and a brief explanation. \n\tThe response should be in the form:\n\t{\n\t    \"Action\": action,\n\t    \"Amount\": amount,\n\t    \"Explanation\": detailed_explanation\n", "}\n\tValid actions are CALL RAISE FOLD MATCH and they are case sensitive (must be all caps!!)\n\tMake sure you use CALL if you're betting the same as the current amount\n\tYour maximum bet is {max_bet}\n\tYou cannot bet less than the current bet of {current_bet} unless you are ALL IN. \n\tALL IN means the bet is equal to your maximum bet.\n\tIf you are going all in, the action type is RAISE if you're betting more than the current bet amount, otherwise CALL if the current bet is at or above your max bet.\n\tYou cannot bet more than your maximum bet. If your bet is equal to the max, you are ALL IN.\n\tDo not include anything outside of the json object. The response should be only json.\n\t        \"\"\"\n", "        pt = PromptTemplate(\n\t            template=template,\n\t            input_variables=[\n\t                \"name\",\n\t                \"current_bet\",\n\t                \"max_bet\",\n\t                \"strategy_1\",\n\t                \"strategy_2\",\n\t                \"strategy_3\",\n\t                \"strategy_4\",\n", "                \"strategy_5\",\n\t                \"strategy_6\",\n\t            ])\n\t        return pt\n\t    def decide(self, game_state):\n\t        prompt = self.render_prompt(str(game_state))\n\t        llm_decision = self.llm(prompt)\n\t        print(\"LLM Decision\")\n\t        print(llm_decision)\n\t        cleaned_response = \"{\" + llm_decision.split(\"{\")[1].split('}')[0] + \"}\"\n", "        print(f\"Cleaned Response: [{cleaned_response}]\")\n\t        action_params = json.loads(llm_decision)  # todo: add retry logic in case the response doesn't fit downstream reads\n\t        print(action_params)\n\t        return json.loads(cleaned_response)\n\t    def clean_response(self, response):\n\t        response = response.split(\"{\")[1].split('}')[0] + \"}\"\n\t        action_params = json.loads(response)\n\t        if 'Action' in action_params.keys() and not action_params['Action'] == \"FOLD\":\n\t            action_params['Amount'] = max(int(int(action_params['Amount']) if 'Amount' in action_params else 0), table.bet_amount)\n\t        action_params['Amount'] = min(int(int(action_params['Amount']) if 'Amount' in action_params else 0), self.max_bet)\n", "        if action_params['Action'] == \"RAISE\":\n\t            # Check for mis-raise thats actually a call\n\t            if int(table.bet_amount) == int(min(action_params['Amount'], self.max_bet)):\n\t                action_params['Action'] = \"CALL\" # flip it\n\t        return action_params\n"]}
{"filename": "src/players/ricky_raise.py", "chunked_list": ["import random\n\timport logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Ricky(Player):\n\t    persona = \"Ricky Raise\"\n\t    def __init__(self, name, bankroll, raise_limit=3):\n\t        super().__init__(name, bankroll)\n\t        self.raise_count = 0\n\t        self.raise_limit = raise_limit\n", "    def start_betting_round(self):\n\t        super().start_betting_round()\n\t        self.raise_count = 0\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        if is_called:\n\t            # print(\"Ricky will Match\")\n\t            action = Action(\"MATCH\", min(table.bet_amount, self.max_bet))\n\t        elif self.bankroll > table.bet_amount and self.raise_count < self.raise_limit:\n\t            # print(\"Ricky will Raise\")\n\t            min_raise = table.bet_amount + 1\n", "            if min_raise >= self.max_bet:\n\t                # print(\"Min raise is over max bet\")\n\t                bet_amount = self.max_bet\n\t            else:\n\t                # print(\"Mine raise is less than max bet\")\n\t                bet_amount = random.randint(min_raise, self.max_bet)\n\t            action = self._raise(table, bet_amount)\n\t            self.raise_count += 1\n\t        else:\n\t            # print(\"Ricky will fold\")\n", "            action = Action(\"FOLD\")\n\t        logging.debug(f\"Play - {self.name}: {action.action_type}\")\n\t        return action\n"]}
{"filename": "src/players/robby_random.py", "chunked_list": ["import random\n\timport logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Robby(Player):\n\t    persona = \"Robbie Random\"\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        random_value = random.random()\n\t        if is_called:\n\t            if self.max_bet > table.bet_amount:\n", "                if random_value > .5:\n\t                    action = Action(\"MATCH\", table.bet_amount)\n\t                else:\n\t                    action = Action(\"FOLD\")\n\t            else:\n\t                if random_value > .5:\n\t                    action = Action(\"MATCH\", self.max_bet, all_in=True)\n\t                else:\n\t                    action = Action(\"FOLD\")\n\t        elif random_value < .33:\n", "            action = Action(\"CALL\", min(table.bet_amount, self.max_bet))\n\t        elif random_value < .67:\n\t            action = Action(\"FOLD\")\n\t        else:\n\t            logging.debug(f\"{self.name} wants to raise. Current Bet is {table.bet_amount}, {self.name} has {self.bankroll}\")\n\t            if self.max_bet > table.bet_amount:\n\t                action = Action(\"RAISE\", random.randint(table.bet_amount + 1, self.max_bet))\n\t            else:\n\t                logging.debug(f\"<> {self.name} is all in <>\")\n\t                action = Action(\"CALL\", self.max_bet, all_in=True)\n", "        logging.debug(f\"Play - {self.name}: {action.action_type}\")\n\t        return action"]}
{"filename": "src/players/__init__.py", "chunked_list": []}
{"filename": "src/players/johnny_jacks.py", "chunked_list": ["import logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tfrom model.deck import Card, Deck\n\tJACKS_OR_BETTER = [\"J\", \"Q\", \"K\", \"A\"]\n\tclass Johnny(Player):\n\t    persona = \"Johnny Jacks\"\n\t    def jacks_or_better(self):\n\t        return [card for card in self._hole if card.rank in JACKS_OR_BETTER]\n\t    def has_jacks_or_better_pair(self, community_cards):\n", "        for card in self.jacks_or_better():\n\t            if card.rank in [c.rank for c in community_cards]:\n\t                return True\n\t        return False\n\t    def play_with_community_cards(self, table, community_cards):\n\t        if self._hole[0].rank == self._hole[1].rank or self.has_jacks_or_better_pair(community_cards):\n\t            return self._raise(table)\n\t        else:\n\t            return self.call(table)\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n", "        logging.debug(f\"{self.name} sees the bet is at: {table.bet_amount}\")\n\t        # print(f\"{self.name} has {self._hole} in the hole\")\n\t        # print(f\"{self.name} has {self.bankroll} in the bankroll\")\n\t        # print(f\"{self.name} has can bet at most {self.max_bet}\")\n\t        has_jack_or_better = max(self._hole).rank in JACKS_OR_BETTER\n\t        # print(f\"{self.name}'s high card is Jack or better? {has_jack_or_better}\")\n\t        betting_round = self.get_game_phase(table)\n\t        # print(betting_round)\n\t        if betting_round == 1:\n\t            if not has_jack_or_better:\n", "                return self.fold()\n\t            if self._hole[0].rank == self._hole[1].rank:\n\t                return self._raise(table)\n\t            return self.call(table)\n\t        elif betting_round == 2:\n\t            return self.play_with_community_cards(table, table.flop)\n\t        elif betting_round == 3:\n\t            return self.play_with_community_cards(table, table.flop + [table.turn])\n\t        elif betting_round == 4:\n\t            return self.play_with_community_cards(table, table.flop + [table.turn] + [table.river])\n", "        else:\n\t            return self.fold()"]}
{"filename": "src/players/callie_calls.py", "chunked_list": ["import logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Callie(Player):\n\t    persona = \"Callie Calls\"\n\t    def __init__(self, name, bankroll, raise_limit=3):\n\t        super().__init__(name, bankroll)\n\t        self.raise_count = 0\n\t        self.raise_limit = raise_limit\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n", "        logging.debug(f\"{self.name} sees the bet is at: {table.bet_amount}\")\n\t        if self.max_bet > table.bet_amount:\n\t            action = Action(\"CALL\", table.bet_amount)\n\t        else:\n\t            logging.debug(f\"{self.name} is all in\")\n\t            logging.debug(f\"{self.name} has {self.bankroll} in the bank and {self.status.money_on_table} on the table\")\n\t            action = Action(\"CALL\", self.max_bet, all_in=True)\n\t        logging.debug(f\"Play - {self.name}: {action.action_type}\")\n\t        return action"]}
{"filename": "src/players/floyd_folds.py", "chunked_list": ["import logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Floyd(Player):\n\t    persona = \"Floyd Folds\"\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        action = Action(\"FOLD\")\n\t        logging.debug(f\"Play - {self.name}: {action.action_type}\")\n\t        return action"]}
{"filename": "src/players/stuart_stats.py", "chunked_list": ["import logging\n\tfrom model.player import Player\n\tfrom model.action import Action\n\tclass Stuart(Player):\n\t    persona = \"Stuart Stats\"\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        print(f\"Table: {table}\")\n\t        print(f\"Player status: {player_status}\")\n\t        print(f\"Called?: {is_called}\")\n\t        logging.debug(f\"{self.name} sees the bet is at: {table.bet_amount}\")\n", "        if self.max_bet > table.bet_amount:\n\t            action = Action(\"CALL\", table.bet_amount)\n\t        else:\n\t            logging.debug(f\"{self.name} is all in\")\n\t            logging.debug(\n\t                f\"{self.name} has {self.bankroll} in the bank and {self.status.money_on_table} on the table\")\n\t            action = Action(\"CALL\", self.max_bet, all_in=True)\n\t        logging.debug(f\"Play - {self.name}: {action.action_type}\")\n\t        return action\n"]}
{"filename": "src/players/chad_gpt.py", "chunked_list": ["# import pprint\n\timport json\n\t# import sys\n\t# from langchain.chat_models import ChatOpenAI\n\tfrom langchain.llms import OpenAI\n\t# from langchain.agents import load_tools, initialize_agent\n\t# from langchain.utilities import GoogleSerperAPIWrapper\n\t#\n\t# from langchain.chains import LLMChain\n\t# from langchain.prompts import PromptTemplate\n", "from model.player import Player\n\tfrom model.action import Action\n\tclass Chad(Player):\n\t    persona = \"Chad Gipiti\"\n\t    def __init__(self, name, bankroll, raise_limit=3, temperature=.5, verbose=False):\n\t        super().__init__(name, bankroll)\n\t        self.raise_count = 0\n\t        self.raise_limit = raise_limit\n\t        self.llm = OpenAI(temperature=temperature,\n\t                     verbose=verbose)\n", "        self.verbose = verbose\n\t    def render_prompt(self, game_state):\n\t        prompt = \"Below is a description of the current state of a Texas Holdem game.\\n\"\n\t        prompt += str(game_state) + \"\\n\"\n\t        prompt += \"\"\"\n\tThis is a simulation and is not being played for real money. Assume the role of the player Chad. \n\tChad is a tough opponent. He's a thoughtful player, tryng to match the pot size to the strength of his hand.\n\tChad is also strategic. Chad does not want to lose and knows going ALL IN and losing means losing the whole tournament.\n\tChad will go all in, but only when he's really confident, or really desperate.\n\tChad knows it's better to FOLD the hand than to lose the tournament by playing a hand he should have FOLDED.\n", "Chad thinks other players likely to overplay pairs and might treat some RAISES and bluffs because of this.\n\tWhat is Chad's next move? Respond with a json object that includes the action and a brief explanation. \n\tThe response should be in the form:\n\t{\n\t    \"Action\": action,\n\t    \"Amount\": amount,\n\t    \"Explanation\": detailed_explanation\n\t}\n\tValid actions are CALL RAISE FOLD MATCH and they are case sensitive (must be all caps!!)\n\tValid values for amount are integers greater than or equal to the table current_bet and less than or equal to the players max_bet.\n", "If you CALL, the Amount must be the current_bet from the table.\n\tIf you want to bet more than the table current_bet, that is a RAISE.\n\tMake sure you use CALL if you're betting the same as the current amount\n\tDo not include anything outside of the json object. The response should be only json and must be valid json.\n\t\"\"\"\n\t        prompt += f\"Your maximum bet is {self.max_bet}\\n\"\n\t        prompt += \"You cannot bet more than your maximum bet. If your bet is equal to the max, you are ALL IN.\\n\"\n\t        prompt += \"You cannot bet less than the current bet unless you are ALL IN. ALL IN means the bet is equal to your maximum bet.\\n\"\n\t        prompt += \"If you are going all in, the action type is RAISE if you're betting more than the current bet amount, otherwise CALL if the current bet is at or above your max bet.\\n\"\n\t        # prompt += f\"The minimum amount you can RAISE is {game_state['table'].bet_amount}\"\n", "        return prompt\n\t    def decide(self, game_state):\n\t        prompt = self.render_prompt(str(game_state))\n\t        llm_decision = self.llm(prompt)\n\t        print(\"LLM Decision\")\n\t        print(llm_decision)\n\t        cleaned_response = \"{\" + llm_decision.split(\"{\")[1].split('}')[0] + \"}\"\n\t        print(f\"Cleaned Response: [{cleaned_response}]\")\n\t        action_params = json.loads(llm_decision)  # todo: add retry logic in case the response doesn't fit downstream reads\n\t        print(action_params)\n", "        return action_params\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        print(f\"{self.name} is figuring out their next play...\")\n\t        game_state = {\n\t            \"hole\": self._hole,\n\t            \"player_status\": player_status,\n\t            \"table\": table,\n\t            \"is_called\": is_called,\n\t            \"current_bet\": table.bet_amount,\n\t            \"max_bet\": self.max_bet,\n", "        }\n\t        retry_count = 0\n\t        while retry_count < 3:\n\t            try:\n\t                action_params = self.decide(game_state)\n\t                break\n\t            except json.decoder.JSONDecodeError as e:\n\t                print(f\"Warning: Received json response we cant unpack - {e}\")\n\t            finally:\n\t                retry_count += 1\n", "        if self.verbose:\n\t            print(action_params)\n\t        if 'Action' in action_params.keys() and not action_params['Action'] == \"FOLD\":\n\t            action_params['Amount'] = max(int(int(action_params['Amount']) if 'Amount' in action_params else 0), table.bet_amount)\n\t        action_params['Amount'] = min(int(int(action_params['Amount']) if 'Amount' in action_params else 0), self.max_bet)\n\t        if action_params['Action'] == \"RAISE\":\n\t            # Check for mis-raise thats actually a call\n\t            if int(table.bet_amount) >= int(min(action_params['Amount'], self.max_bet)):\n\t                action_params['Action'] = \"CALL\" # flip it\n\t                action_params['Amount'] = int(min(action_params['Amount'], self.max_bet))\n", "        is_all_in = action_params['Amount'] == self.max_bet\n\t        print(action_params['Action'])\n\t        print(action_params['Amount'])\n\t        return Action(action_params['Action'].strip().upper(), action_params['Amount'], all_in=is_all_in)\n"]}
{"filename": "src/model/hand.py", "chunked_list": ["from model.deck import Deck, Card, ranks, suits\n\thand_rankings = {\n\t    \"ROYAL_FLUSH\": 1,\n\t    \"STRAIGHT_FLUSH\": 2,\n\t    \"FOUR_OF_A_KIND\": 3,\n\t    \"FULL_HOUSE\": 4,\n\t    \"FLUSH\": 5,\n\t    \"STRAIGHT\": 6,\n\t    \"THREE_OF_A_KIND\": 7,\n\t    \"TWO_PAIR\": 8,\n", "    \"PAIR\": 9,\n\t    \"HIGH_CARD\": 10\n\t}\n\tclass Hand:\n\t    _cards = []\n\t    _ace_low = False\n\t    def __init__(self, cards):\n\t        if len(cards) == 5:\n\t            self._cards = cards\n\t        else:\n", "            raise (\"Expected 5 cards in hand\")\n\t    def __str__(self):\n\t        return \"{}, {}, {}, {}, {}\".format(*[\"{}{}\".format(card.rank, card.suit[0]) for card in self._cards])\n\t    def __repr__(self):\n\t        cards_string = \"[{}, {}, {}, {}, {}]\".format(*self._cards)\n\t        return \"Hand({})\".format(cards_string)\n\t    @property\n\t    def suits(self):\n\t        return {card.suit for card in self._cards}\n\t    @property\n", "    def ranks(self):\n\t        return {card.rank for card in self._cards}\n\t    @property\n\t    def high_card(self):\n\t        if self._ace_low:\n\t            not_ace = [card for card in self._cards if not card.rank == \"A\"]\n\t            return max(not_ace)\n\t        return max(self._cards)\n\t    def sort(self):\n\t        return sorted(self._cards)\n", "    def next_high_card(self, ranks):\n\t        # rank = []\n\t        # return high card after removing passed ranks\n\t        # eg: [3, 6, 7, 8 ,9].next_high([8, 9]) = 7\n\t        considered_cards = [card for card in self._cards if not card.rank in ranks]\n\t        return max(considered_cards) if len(considered_cards) > 0 else None\n\t    @property\n\t    def rank_frequencies(self):\n\t        ranks_in_hand = {card.rank for card in self._cards}\n\t        rank_frequencies = {}\n", "        for rank in ranks_in_hand:\n\t            count = len([card for card in self._cards if card.rank == rank])\n\t            rank_frequencies[rank] = count\n\t        return rank_frequencies\n\t    @property\n\t    def is_flush(self):\n\t        return len(self.suits) == 1\n\t    @property\n\t    def is_straight(self):\n\t        # a straight has 5 unique values (ie: no pairs)\n", "        hand_ranks = {ranks[card.rank] for card in self._cards}\n\t        if len(ranks) < 5:\n\t            return False\n\t        if 2 in hand_ranks and 14 in hand_ranks:\n\t            # Have an Ace and a 2 (14, 2) so we should check for Ace low straight\n\t            # instead of Ace high\n\t            hand_ranks.discard(14)\n\t            hand_ranks.add(1)\n\t            self._ace_low = True\n\t        low_card = min(hand_ranks)\n", "        for i in range(5):\n\t            if not ((low_card + i) in hand_ranks):\n\t                return False\n\t        return True\n\t    @property\n\t    def is_straight_flush(self):\n\t        return self.is_straight and self.is_flush\n\t    @property\n\t    def is_royal_flush(self):\n\t        return self.is_straight_flush and (\"A\" in self.ranks) and (\"K\" in self.ranks)\n", "    @property\n\t    def is_pair(self):\n\t        return 2 in {self.rank_frequencies[rank] for rank in self.ranks}\n\t    @property\n\t    def is_two_pair(self):\n\t        return len([rank for rank in self.ranks if self.rank_frequencies[rank] >= 2]) == 2\n\t    @property\n\t    def is_three_of_a_kind(self):\n\t        return 3 in {self.rank_frequencies[rank] for rank in self.ranks}\n\t    @property\n", "    def is_full_house(self):\n\t        return self.is_pair and self.is_three_of_a_kind\n\t    @property\n\t    def is_four_of_a_kind(self):\n\t        return 4 in {self.rank_frequencies[rank] for rank in self.ranks}\n\t    def __eq__(self, other):\n\t        sorted_other = other.sort()\n\t        for i, card in enumerate(self.sort(), start=0):\n\t            if not sorted_other[i].rank == card.rank:\n\t                return False\n", "        return self.is_flush == other.is_flush\n\t    def __ne__(self, other):\n\t        return not self == other\n\t    def __lt__(self, other):\n\t        self_description = self.describe()\n\t        self_hand_rank = self_description[0]\n\t        other_description = other.describe()\n\t        other_hand_rank = other_description[0]\n\t        if not other_hand_rank == self_hand_rank:\n\t            return hand_rankings[self_hand_rank] > hand_rankings[other_hand_rank]\n", "        if self_hand_rank == \"ROYAL_FLUSH\":\n\t            return False\n\t        if self_hand_rank in [\"STRAIGHT_FLUSH\", \"STRAIGHT\"]:\n\t            return self.high_card < other.high_card\n\t        if self_hand_rank == \"FOUR_OF_A_KIND\":\n\t            if not self_description[1] == other_description[1]:\n\t                return self_description[1] < other_description[1]\n\t            self_fifth_card = [card for card in self._cards if not card.rank == self_description[1]][0]\n\t            other_fifth_card = [card for card in other._cards if not card.rank == self_description[1]][0]\n\t            return self_fifth_card < other_fifth_card\n", "        if self_hand_rank == \"FULL_HOUSE\":\n\t            if self_description[1] == other_description[1]:\n\t                # print(\"same triple, comparing double: {} < {} ? {}\".format( self_description[2], other_description[2], self_description[2] < other_description[2]))\n\t                return ranks[self_description[2]] < ranks[other_description[2]]\n\t            return self_description[1] < self_description[1]\n\t        if self_hand_rank == \"THREE_OF_A_KIND\":\n\t            if self_description[1] == other_description[1]:\n\t                # print(\"same triple\")\n\t                self_next_high = self.next_high_card([self_description[1]])\n\t                other_next_high = other.next_high_card([other_description[1]])\n", "                if self_next_high == other_next_high:\n\t                    # print(\"same next high\")\n\t                    self_last = self.next_high_card([self_description[1]])\n\t                    other_last = other.next_high_card([other_description[1]])\n\t                    return self_last < other_last\n\t                # print(\"Comparing {} < {}? {}\".format(self_next_high, other_next_high, self_next_high < other_next_high))\n\t                return self_next_high < other_next_high\n\t            return self_description[1] < other_description[1]\n\t        if self_hand_rank == \"TWO_PAIR\":\n\t            self_high_pair = self_description[1][1]\n", "            other_high_pair = other_description[1][1]\n\t            self_low_pair = self_description[1][0]\n\t            other_low_pair = other_description[1][0]\n\t            self_last_card = self.next_high_card([self_high_pair, self_low_pair])\n\t            other_last_card = other.next_high_card([other_high_pair, other_low_pair])\n\t            if self_high_pair == other_high_pair:\n\t                if self_low_pair == other_low_pair:\n\t                    return self_last_card < other_last_card\n\t                return self_low_pair < other_low_pair\n\t            return self_high_pair < other_high_pair\n", "        if self_hand_rank == \"PAIR\":\n\t            if self_description[1] == other_description[1]:\n\t                self_next_high = self.next_high_card([self_description[1]])\n\t                other_next_high = other.next_high_card([other_description[1]])\n\t                if self_next_high == other_next_high:\n\t                    self_next_next_high = self.next_high_card([self_description[1], self_next_high.rank])\n\t                    other_next_next_high = other.next_high_card([self_description[1], other_next_high.rank])\n\t                    if self_next_next_high == other_next_next_high:\n\t                        self_last = self.next_high_card(\n\t                            [self_description[1], self_next_high.rank, self_next_next_high.rank])\n", "                        other_last = other.next_high_card(\n\t                            [self_description[1], other_next_high.rank, other_next_next_high.rank])\n\t                        return self_last < other_last\n\t                    return self_next_next_high < other_next_next_high\n\t                return self_next_high < other_next_high\n\t            return self_description[1] < other_description[1]\n\t        if self_hand_rank in [\"HIGH_CARD\", \"FLUSH\"]:\n\t            sorted_other = other.sort()\n\t            for i, card in enumerate(self.sort(), start=0):\n\t                if not sorted_other[i].rank == card.rank:\n", "                    return card < sorted_other[i]\n\t            return False\n\t    def __le__(self, other):\n\t        return not self > other\n\t    def __gt__(self, other):\n\t        if self == other:\n\t            return False\n\t        return not self < other\n\t    def __ge__(self, other):\n\t        return not self < other\n", "    def describe(self):\n\t        if self.is_royal_flush:\n\t            return (\"ROYAL_FLUSH\", self.suits)\n\t        elif self.is_straight_flush:\n\t            return (\"STRAIGHT_FLUSH\", self.high_card, self.suits)\n\t        elif self.is_four_of_a_kind:\n\t            return (\"FOUR_OF_A_KIND\", [rank for rank in self.ranks if self.rank_frequencies[rank] == 4][0])\n\t        elif self.is_full_house:\n\t            return (\n\t                \"FULL_HOUSE\",\n", "                [rank for rank in self.ranks if self.rank_frequencies[rank] == 3][0],\n\t                [rank for rank in self.ranks if self.rank_frequencies[rank] == 2][0]\n\t            )\n\t        elif self.is_flush:\n\t            return (\"FLUSH\", self.high_card)\n\t        elif self.is_straight:\n\t            if not self._ace_low:\n\t                return (\"STRAIGHT\", self.high_card)\n\t            else:\n\t                return (\"STRAIGHT\",)\n", "        elif self.is_three_of_a_kind:\n\t            return (\"THREE_OF_A_KIND\", [rank for rank in self.ranks if self.rank_frequencies[rank] == 3][0])\n\t        elif self.is_two_pair:\n\t            return (\"TWO_PAIR\", sorted([rank for rank in self.ranks if self.rank_frequencies[rank] == 2]))\n\t        elif self.is_pair:\n\t            return (\n\t                \"PAIR\",\n\t                [rank for rank in self.ranks if self.rank_frequencies[rank] == 2][0],\n\t                self.high_card\n\t            )\n", "        else:\n\t            return (\"HIGH_CARD\", self.high_card)\n"]}
{"filename": "src/model/holdem_round.py", "chunked_list": ["import random\n\timport math\n\timport logging\n\tfrom model.table import Table\n\tfrom model.deck import Deck\n\t# from model.action import Action, FOLD, CALL, RAISE, CHECK, MATCH, action_types\n\tfrom model.betting_round import BettingRound\n\tclass HoldemRound:\n\t    # HoldemRound orchestrates the game play including player and deck management\n\t    # it passes th Table object around as a shared state the public game knowledge\n", "    def __init__(self, players, blind=1, table=None, raise_blinds=False, round_number=None):\n\t        self.players = players  # the list of players was passed in\n\t        if table:\n\t            self.table = table\n\t            self.table.new_holdem_round()\n\t            self.table.num_players = len(players)\n\t            self.table.next_round()\n\t            if raise_blinds:\n\t                self.table.raise_blinds()\n\t        else:\n", "            self.dealer_button_index = random.randint(0, len(players))\n\t            self.table = Table(blind, len(players))\n\t            if raise_blinds:\n\t                raise Exception(\"Cannot raise blinds on new table. raise_blinds requires a table parameter.\")\n\t        self.round_number = round_number\n\t        self.deck = None\n\t        self.results = None\n\t        self.betting_round_complete = False\n\t        self.is_called = False\n\t        self.all_in_players = []\n", "        self._split_pot = None\n\t        self._last_total_money = None\n\t        self.player_status = {f\"{player.name}\": False for player in self.players} # True if a player is still in the game, False when they fold\n\t        for player in self.players:\n\t            player.start_holdem_round()\n\t    @property\n\t    def active_player_count(self):\n\t        count = len(self.players_still_in)\n\t        logging.debug(f\"Player still in count: {count}\")\n\t        return count\n", "    @property\n\t    def players_still_in(self):\n\t        still_in = [player.name for player in self.players if not player.folded]\n\t        logging.debug(f\"Still in: {still_in}\")\n\t        return [player.name for player in self.players if not player.folded]\n\t    @property\n\t    def all_players_have_bet(self):\n\t        players = [ player for player in self.players if player.name in self.players_still_in ]\n\t        return len([ player for player in players if not player.has_bet ]) == 0\n\t    def deal(self):\n", "        self.deck = Deck()\n\t        self.deck.shuffle()\n\t        cards_dealt = 0\n\t        while cards_dealt < 2:\n\t            for player in self.players:\n\t                player.deal_card(self.deck.draw())\n\t            cards_dealt += 1\n\t    def expose_flop(self):\n\t        self.deck.draw_card() # burn the top card\n\t        self.table.flop = self.deck.draw(3)\n", "    def expose_turn(self):\n\t        self.table.turn = self.deck.draw()\n\t    def expose_river(self):\n\t        # print(\"dealing the river\")\n\t        self.table.river = self.deck.draw()\n\t    def do_betting_round(self):\n\t        logging.debug(\"Starting betting round\")\n\t        print(f\"Do the preround money check\")\n\t        betting_round = BettingRound(self.table, self.players, self.round_number)\n\t        # betting_round.check_money_supply()\n", "        self.players, self.table = betting_round.do_round()\n\t        print(\"Checking post round money supply\")\n\t        # betting_round.check_money_supply()\n\t    def showdown(self):\n\t        #best_hands = [ player.best_hand(self.table) for player in self.players if not player.folded ]\n\t        player_hands = {player.name: player.best_hand(self.table) for player in self.players if not player.folded}\n\t        print(player_hands)\n\t        self.winning_hand = max([player_hands[player.name] for player in self.players if not player.folded])\n\t        logging.info(f\"Winning Hand: {self.winning_hand}\")\n\t        print(f\"{self.winning_hand.describe()}: {self.winning_hand}\")\n", "        winners = [ player for player in player_hands if player_hands[player] == self.winning_hand ]\n\t        assert len(winners) >= 1 # should be at least one winner\n\t        logging.debug(winners)\n\t        logging.debug(f\"Flop: {self.table.flop}\")\n\t        logging.debug(f\"Turn: {self.table.turn}\")\n\t        logging.debug(f\"River: {self.table.river}\")\n\t        if len(winners) > 1:\n\t            for winner in winners:\n\t                logging.debug(f\"Multiple Winners...\")\n\t                logging.debug(f\"    Winner: {winner}\")\n", "                player = [player for player in self.players if player.name == winner][0]\n\t                # print(f\"{player.name} hole: {player.hole}\")\n\t            for player_name in player_hands:\n\t                logging.debug(f\"{player_name}: {player_hands[player_name]}\")\n\t        self.winners = winners\n\t        self.results = {\n\t            \"pot_size\": self.table.pot_total,\n\t            \"winners\": self.winners,\n\t            \"winner_personas\": [player.persona for player in self.players if player.name in self.winners],\n\t            \"winning_hand\": self.winning_hand,\n", "            \"all_hands\": player_hands,\n\t        }\n\t    def settle_round(self):\n\t        # print(\"Checking before betting players settle up\")\n\t        # self.check_total_money()\n\t        for i in range(len(self.players)):\n\t            name = self.players[i].name\n\t            if name in self.winners:\n\t                # print(f\"Checking before {name} settles up\")\n\t                # self.check_total_money()\n", "                # todo: sum up amounts from the pot\n\t                players_share_of_pot = math.floor(self.table.pot_total / len(self.winners)) # tip the dealer!\n\t                print(f\"{name} collects {players_share_of_pot} from the pot. total pot size {self.table.pot_total}\")\n\t                self.players[i].collect_winnings(players_share_of_pot)\n\t                # print(f\"Checking after {name} settles up\")\n\t                # self.check_total_money()\n\t            # print(f\"Checking after players all settle up\")\n\t            # self.check_total_money()\n\t            self.players[i].check_results(self.table, self.results)\n\t            # print(\"Checking after letting players check results\")\n", "            # self.check_total_money()\n\t        self.table.payout()\n\t    def collect_blinds(self):\n\t        logging.debug(f\"Collecting blinds\")\n\t        self.table.pot.append(self.players[self.table.big_blind_index].place_big_blind(self.table))\n\t        self.table.pot.append(self.players[self.table.small_blind_index].place_small_blind(self.table))\n\t    def check_total_money(self):\n\t        print(f\"Checking money supply for change. Last value: {self._last_total_money}\")\n\t        total = sum([player.bankroll for player in self.players]) + self.table.pot_total\n\t        print(f\"Current Total: {total}\")\n", "        # if (not total is None) and (total > 1100):\n\t        #     raise Exception(\"New Money detected in game\")\n\t        if self._last_total_money is None:\n\t            print(f\"First check of money supply. Nonevalue ok {self._last_total_money}\")\n\t            self._last_total_money = total\n\t        else:\n\t            if not self._last_total_money >= total: # sometimes we tip the dealer splitting pots, should never increase\n\t                print(f\"New money detected. Change in total money in game: {self._last_total_money}\")\n\t                raise Exception(\"New Money detected in game\")\n\t        self._last_total_money = total\n", "        return self._last_total_money\n\t    def play(self):\n\t        logging.debug(f\"Playing round with {len(self.players)} players\")\n\t        print(\"Play round\")\n\t        self.table.new_holdem_round()\n\t        # self.check_total_money()\n\t        assert len(self.players) > 1\n\t        for player in self.players:\n\t            player.start_holdem_round()\n\t        self.collect_blinds()\n", "        self.deal()\n\t        self.do_betting_round()\n\t        self.expose_flop()\n\t        self.do_betting_round()\n\t        self.expose_turn()\n\t        self.do_betting_round()\n\t        self.expose_river()\n\t        print(\"Checking before betting round after river\")\n\t        self.check_total_money()\n\t        self.do_betting_round()\n", "        print(\"Checking before showdown\")\n\t        self.check_total_money()\n\t        self.showdown()\n\t        print(\"Checking before settle\")\n\t        self.check_total_money()\n\t        self.settle_round()\n\t        print(\"Checking after settle\")\n\t        self.check_total_money()\n\t        return self.players, self.table"]}
{"filename": "src/model/test_action.py", "chunked_list": ["from model.action import Action\n\tdef test_init_error():\n\t    did_error = False\n\t    try:\n\t        action = Action(\"BET\")\n\t    except:\n\t        did_error = True\n\t    finally:\n\t        assert did_error == True\n\tdef test_init_check():\n", "    did_error = False\n\t    try:\n\t        action = Action(\"CHECK\")\n\t    except:\n\t        did_error = True\n\t    finally:\n\t        assert did_error == False\n\tdef test_init_raise():\n\t    did_error = False\n\t    try:\n", "        action = Action(\"RAISE\", 10)\n\t    except:\n\t        did_error = True\n\t    finally:\n\t        assert did_error == False\n\tdef test_init_call():\n\t    did_error = False\n\t    try:\n\t        action = Action(\"CALL\", 10)\n\t    except:\n", "        did_error = True\n\t    finally:\n\t        assert did_error == False\n\tdef test_init_fold():\n\t    did_error = False\n\t    try:\n\t        action = Action(\"FOLD\")\n\t    except:\n\t        did_error = True\n\t    finally:\n", "        assert did_error == False\n"]}
{"filename": "src/model/test_holdem_round.py", "chunked_list": ["from model.holdem_round import HoldemRound\n\t# from model.table import Table\n\t# from model.player import Player\n\tfrom players.floyd_folds import Floyd\n\tfrom players.callie_calls import Callie\n\tfrom players.robby_random import Robby\n\tfrom players.ricky_raise import Ricky\n\tplayers = [\n\t    Ricky(\"Josh\", 100),\n\t    Callie(\"Madi\", 100),\n", "    Floyd(\"Cody\", 100),\n\t    Robby(\"Michelle\", 100),\n\t    Callie(\"Sophia\", 100),\n\t    Floyd(\"Beezie\", 100)\n\t]\n\tround = HoldemRound(\n\t    players=players,\n\t    blind=1\n\t)\n\tdef test_deal():\n", "    round.deal()\n\t    assert round.table.flop == None\n\t    assert round.table.turn == None\n\t    assert round.table.river == None\n\t    for player in players:\n\t        assert len(player._hole) == 2\n\tround_2 = HoldemRound(\n\t    players=players,\n\t    blind=1\n\t)\n", "def test_play():\n\t    round_2.play()\n\tround_3 = HoldemRound(\n\t    players=players,\n\t    blind=1\n\t)\n\tdef test_play_detailed():\n\t    for player in players:\n\t        player.start_holdem_round()\n\t    round_3.deal()\n", "    assert round_3.table.flop is None\n\t    round_3.do_betting_round()\n\t    round_3.expose_flop()\n\t    assert not round_3.table.flop is None\n\t    round_3.do_betting_round()\n\t    assert round_3.table.turn is None\n\t    round_3.expose_turn()\n\t    assert not round_3.table.turn is None\n\t    round_3.do_betting_round()\n\t    assert round_3.table.river is None\n", "    round_3.expose_river()\n\t    assert not round_3.table.river is None\n\t    round_3.do_betting_round()\n\t    winners = round_3.showdown()\n\t    round_3.settle_round()\n"]}
{"filename": "src/model/action.py", "chunked_list": ["CHECK = \"CHECK\"\n\tFOLD = \"FOLD\"\n\tRAISE = \"RAISE\"\n\tCALL = \"CALL\"\n\tMATCH = \"MATCH\"\n\taction_types = [\n\t    CHECK,\n\t    CALL,\n\t    RAISE,\n\t    FOLD,\n", "    MATCH\n\t]\n\tclass Action:\n\t    def __init__(self, action_type, amount=None, all_in=False):\n\t        if not action_type in action_types:\n\t            raise Exception(f\"Invalid action: {action_type}\")\n\t        if not amount:\n\t            if action_type in [RAISE, CALL, MATCH]:\n\t                raise Exception(f\"Invalid MATCH, RAISE or CALL amount (None)\")\n\t        else:\n", "            # if action_type in [CHECK, FOLD]:\n\t            #     print(f\"Got Action Type: [{action_type}]\")\n\t            #     if amount and (int(amount) > 0):\n\t            #         print(f\"Got amount: [{amount}]\")\n\t            #         raise Exception(f\"Invalid CHECK or FOLD\")\n\t            if amount < 0:\n\t                raise ValueError(f\"Cannot {action_type} by a negative number: {amount}\")\n\t        self.action_type = action_type\n\t        self.amount = amount\n\t        self.all_in = all_in\n", "    def __str__(self):\n\t        return f\"Action({self.action_type}, {self.amount}, {self.all_in})\"\n"]}
{"filename": "src/model/test_betting_round.py", "chunked_list": ["import logging\n\tfrom model.betting_round import BettingRound\n\tfrom model.table import Table\n\tfrom players.floyd_folds import Floyd\n\tfrom players.callie_calls import Callie\n\tfrom players.robby_random import Robby\n\tfrom players.ricky_raise import Ricky\n\tdef test_betting_round():\n\t    players = [\n\t        Ricky(\"Josh\", 100),\n", "        Callie(\"Madi\", 100),\n\t        Floyd(\"Cody\", 100),\n\t        Robby(\"Michelle\", 100),\n\t        Callie(\"Sophia\", 100),\n\t        Floyd(\"Beezie\", 100)\n\t    ]\n\t    for player in players:\n\t        player.start_holdem_round()\n\t    table = Table(2, 6)\n\t    betting_round = BettingRound(\n", "        table=table,\n\t        players=players\n\t    )\n\t    betting_round.do_round()\n"]}
{"filename": "src/model/betting_round.py", "chunked_list": ["import logging\n\tfrom model.action import Action, FOLD, CALL, RAISE, CHECK, MATCH, action_types\n\tclass BettingRound:\n\t    def __init__(self, table, players, round_number=None):\n\t        self.is_called = False\n\t        self.betting_round_complete = False\n\t        self.calling_player_name = None\n\t        self.table = table\n\t        self.players = players\n\t        self.reset_active_player_index()\n", "        self.reset_players()\n\t        self.all_in_players = []\n\t        self._last_total_money = None\n\t        self.round_number = round_number\n\t    def reset_active_player_index(self):\n\t        self.table.new_betting_round()\n\t    def reset_players(self):\n\t        for player in self.players:\n\t            player.start_betting_round()\n\t    @property\n", "    def still_in(self):\n\t        \"\"\"\n\t        :return:\n\t        dict with string keys and boolean values\n\t        {\n\t            \"Josh\": True,\n\t            \"Sophia\": False,\n\t        }\n\t        \"\"\"\n\t        still_in = []\n", "        for player in self.players:\n\t            if not player.folded:\n\t                still_in.append(player.name)\n\t        return still_in\n\t    @property\n\t    def all_players_have_bet(self):\n\t        result = True\n\t        for player in self.players:\n\t            if not player.folded:\n\t                if not player.has_bet:\n", "                    result = False\n\t        return result\n\t    def do_round(self):\n\t        print(\"BettingRound.do_round() start...\")\n\t        while not (self.is_called and self.all_players_have_bet):  # ( not self.is_called ) and ( self.active_player_count > 1 ):\n\t            whos_in = [player for player in self.players if not player.folded]\n\t            # print(f\"Whos in? {whos_in}\")\n\t            if len(whos_in) <= 1:\n\t                logging.debug(f\"{whos_in} wins by default\")\n\t                break # only one player remains...theyll win this round\n", "            # We have at least two players\n\t            # lets see whos turn it is...\n\t            active_player = self.players[self.table.active_player_index]\n\t            # print(f\"Active player: {active_player}\")\n\t            # skip them if they're folded\n\t            if not active_player.folded:\n\t                # log the player status before handing it to the player\n\t                player_status = {player.name: player.folded for player in self.players}\n\t                logging.debug(f\"The bet is {self.table.bet_amount} to {active_player.name}\")\n\t                retry_count = 0\n", "                while retry_count < 3:\n\t                    try:\n\t                        action = active_player.play(self.table, player_status, round_number=self.round_number)\n\t                        print(f\"{active_player.name}: {action}\")\n\t                        logging.debug(f\"Got action: {action}\")\n\t                        # handle the players action\n\t                        self.handle_action(action, active_player)\n\t                        break\n\t                    except ValueError as e:\n\t                        print(f\"WARNING: Got invalid action. Retry count {retry_count}\")\n", "                        print(f\"Exception: {e}\")\n\t                    finally:\n\t                        retry_count += 1\n\t            self.table.next_turn()\n\t        return self.players, self.table\n\t    def handle_action(self, action, active_player):\n\t        logging.debug(f\"handling action: {action}\")\n\t        print(f\"{active_player.name}: {action}\")\n\t        # self.check_money_supply()\n\t        self.table.pot.append(active_player.process_action(action))\n", "        if action.action_type == CALL:\n\t            self.handle_call(action, active_player)\n\t        elif action.action_type == FOLD:\n\t            self.handle_fold(action, active_player)\n\t        elif action.action_type == CHECK:\n\t            self.handle_check(action, active_player)\n\t        elif action.action_type == RAISE:\n\t            self.handle_raise(action, active_player)\n\t        elif action.action_type == MATCH:\n\t            self.handle_match(action, active_player)\n", "        else:\n\t            raise Exception(f\"Cannot handle action of type: {action.action_type}\")\n\t        # self.check_money_supply()\n\t    def handle_check(self, check, player):\n\t        # check is noop\n\t        logging.debug(f\"{player.name} checks\")\n\t    def handle_raise(self, raise_, player): # 'raise' is a Python reserved keyword\n\t        logging.debug(f\"{player.name} raises\")\n\t        self.table.raise_bet(raise_.amount)\n\t        if raise_.all_in:\n", "            self.handle_all_in(raise_, player)\n\t        # todo: process bet\n\t        # todo: see whos still in and collect bets\n\t    def handle_call(self, call, player):\n\t        # print(f\"{player.name} calls...have all players bet?\")\n\t        if self.all_players_have_bet:\n\t            if not self.is_called:\n\t                print(f\"{player.name} has called the round\")\n\t                self.calling_player_name = player.name\n\t            logging.debug(f\"{player.name} calls, setting holdem_round.is_called = True\")\n", "            self.is_called = True\n\t        if call.all_in:\n\t            self.handle_all_in(call, player)\n\t        # todo: process bet\n\t        # todo: is the round over?\n\t    def handle_match(self, match, player):\n\t        if match.all_in:\n\t            self.handle_all_in(match, player)\n\t    def handle_fold(self, fold, player):\n\t        logging.debug(f\"{player.name} folds\")\n", "        #self.player_status[player.name] = False\n\t        if len(self.still_in) <= 1:\n\t            self.betting_round_complete = True\n\t    def handle_all_in(self, action, player):\n\t        if not player.name in self.all_in_players: # only add them the first time\n\t            self.all_in_players.append(player.name)\n\t            if self.table.bet_amount > action.amount:\n\t                self.split_pot(action, player)\n\t    def split_pot(self, action, player):\n\t        logging.debug(f\"Splitting pot - {player.name} is all in\")\n", "        logging.debug(f\"Players: {self.still_in}\")\n\t        self.table._split_pot = [\n\t            {\n\t                \"players\": self.still_in,\n\t                \"amount\": action.amount\n\t            },\n\t            {\n\t                \"players\": self.still_in.remove(player.name),\n\t                \"amount\": self.table.bet_amount - action.amount\n\t            }\n", "        ]\n\t    def handle_push(self, players):\n\t        # settle round with multiple winners\n\t        logging.debug(f\"Handling Push - {players}\")"]}
{"filename": "src/model/player.py", "chunked_list": ["from itertools import combinations\n\timport logging\n\tfrom model.hand import Hand\n\tfrom model.action import Action, FOLD, CALL, RAISE, CHECK, MATCH\n\tclass PlayerStatus:\n\t    def __init__(self):\n\t        self.folded = False\n\t        self._money_on_table = 0\n\t        self.has_bet = False\n\t    def add_chips(self, amount):\n", "        self._money_on_table += amount\n\t    @property\n\t    def money_on_table(self):\n\t        return self._money_on_table\n\tclass Player:\n\t    def __init__(self, name, bankroll):\n\t        self.name = name\n\t        self._bankroll = bankroll\n\t        self._hole = []\n\t        self._best_hand = None\n", "        self._games_played = 0\n\t        # self._folded = False\n\t    def __str__(self):\n\t        return f\"Player({self.name}, {self._bankroll})\"\n\t    def __repr__(self):\n\t        return f\"Player({self.name}, {self._bankroll})\"\n\t    @property\n\t    def folded(self):\n\t        return self.status.folded\n\t    @property\n", "    def has_bet(self):\n\t        return self.status.has_bet\n\t    @property\n\t    def max_bet(self):\n\t        max_bet = self.status.money_on_table + self.bankroll\n\t        logging.debug(f\"{self.name} has a max bet of {max_bet}\")\n\t        return max_bet\n\t    @property\n\t    def games_played(self):\n\t        return self._games_played\n", "    def get_game_phase(self, table):\n\t        if not (table.flop or table.turn or table.river):\n\t            print(\"First betting round\")\n\t            return 1\n\t        elif table.flop and not (table.turn or table.river):\n\t            print(\"Second betting round, after the flop\")\n\t            return 2\n\t        elif table.flop and table.turn and not table.river:\n\t            print(\"Third betting round, after the turn\")\n\t            return 3\n", "        elif table.flop and table.turn and table.river:\n\t            print(\"Final betting round, after the river\")\n\t            return 4\n\t        else:\n\t            print(f\"Debug: {table.flop} - {table.turn} - {table.river}\")\n\t            raise ValueError(\"Invalid table state - bad combination of visible public cards\")\n\t    def add_chips(self, amount):\n\t        if amount > self.bankroll:\n\t            raise ValueError(f\"Cannot add more ({amount}) chips than {self.name} has in bankroll ({self.bankroll}).\")\n\t        self.status.add_chips(amount)\n", "        self._bankroll -= amount\n\t    def start_holdem_round(self):\n\t        self.status = PlayerStatus()\n\t        self._hole = []\n\t        self._folded = False\n\t        self._best_hand = None\n\t        self._games_played += 1\n\t    def place_small_blind(self, table):\n\t        logging.debug(f\"{self.name} is placing small blind: {table.small_blind}\")\n\t        if self.status.money_on_table > 0:\n", "            raise Exception(\"Cannot place small blind when I already placed big blind\")\n\t        # self._bankroll -= table.small_blind\n\t        self.add_chips(table.small_blind)\n\t        logging.debug(f\"{self.name} placed small blind: {self._bankroll} left in bankroll\")\n\t        return table.small_blind\n\t    def place_big_blind(self, table):\n\t        logging.debug(f\"{self.name} is placing big blind: {table.big_blind}\")\n\t        if self.status.money_on_table > 0:\n\t            raise Exception(\"Cannot place big blind when I already placed small blind\")\n\t        # self._bankroll -= table.big_blind\n", "        self.add_chips(table.big_blind)\n\t        logging.debug(f\"{self.name} placed big blind: {self._bankroll} left in bankroll\")\n\t        return table.big_blind\n\t    def start_betting_round(self):\n\t        self.status.has_bet = False\n\t    def process_action(self, action):\n\t        logging.debug(f\"Processing Action - {self.name}: {action.action_type}\")\n\t        logging.debug(f\"{self.name}: {self._bankroll}\")\n\t        self.status.has_bet = True\n\t        if action.action_type == FOLD:\n", "            logging.debug(f\"{self.name}: {action.action_type}\")\n\t            # self.status[\"folded\"] = True # deprecate\n\t            self.status.folded = True\n\t            logging.debug(f\"{self.name} is folding: {self._bankroll}\")\n\t            return 0\n\t        elif action.action_type in [RAISE, CALL, MATCH]:\n\t            if self._bankroll + self.status.money_on_table < action.amount:\n\t                logging.debug(f\"{self.name} has {self._bankroll} in the bank and {self.status.money_on_table} on the table\")\n\t                logging.debug(f\"Action amount is: {action.amount}\")\n\t                raise ValueError(\"Player does not have enough money for this bet\")\n", "            logging.debug(f\"Action amount: {action.amount}\")\n\t            logging.debug(f\"Money on table: {self.status.money_on_table}\")\n\t            cash_into_pot = action.amount - self.status.money_on_table  # leaky abstraction need to refactor\n\t            logging.debug(f\"Cash into the pot: {cash_into_pot}\")\n\t            if cash_into_pot < 0:\n\t                logging.debug(f\"WARN: Illegal Request\")\n\t                logging.debug(f\"WARN: {self.name} handling bet amount {action.amount}\")\n\t                logging.debug(f\"WARN: {self.name} has bankroll {self.bankroll} and {self.status.money_on_table} on the table\")\n\t                raise ValueError(\"Cannot remove money from the pot\")\n\t            logging.debug(f\"Cash into pot: {cash_into_pot}\")\n", "            # self._bankroll -= cash_into_pot\n\t            logging.debug(f\"{self.name} calling, raising, or matching by {action.amount}\")\n\t            # self.status.money_on_table += action.amount  # leaky abstraction refactor\n\t            self.add_chips(cash_into_pot)\n\t            logging.debug(f\"{self.name} still has: {self._bankroll} in their bankroll\")\n\t            return cash_into_pot\n\t        elif action.action_type == CHECK:\n\t            return 0\n\t        else:\n\t            raise Exception(f\"Invalid action type: {action.action_type}\")\n", "    def deal_card(self, card):\n\t        logging.debug(f\"delt {self.name} to {card}\")\n\t        self._hole.append(card)\n\t        assert len(self._hole) <= 2\n\t    def play(self, table, player_status, is_called=False, round_number=None):\n\t        pass # Players implement this function to define the Actions they play\n\t    def check_results(self, table, results):\n\t        pass # Players can implement this function to inspect the end state of each round.\n\t    def _all_five_card_hands(self, cards):\n\t        all_cards = self._hole.copy()\n", "        all_cards.extend(cards)\n\t        logging.debug(f\"{self.name} makes a hand from: {all_cards}\")\n\t        card_combinations = combinations(all_cards, 5)\n\t        # print(f\"Combinations: {card_combinations}\")\n\t        hands = [Hand(cards) for cards in card_combinations]\n\t        # print(f\"Hands: {hands}\")\n\t        return hands\n\t    def best_hand(self, table, refresh=False):\n\t        logging.debug(f\"{self.name} is holding {self._hole}\")\n\t        if self.folded:\n", "            return None\n\t        # if not (self._best_hand or refresh):\n\t        # cards_on_table = table.flop + [table.turn] + [table.river]\n\t        cards_on_table = []\n\t        if table.flop is not None:\n\t            cards_on_table.extend(table.flop)\n\t            if table.turn is not None:\n\t                cards_on_table.append(table.turn)\n\t                if table.river is not None:\n\t                    cards_on_table.append(table.river)\n", "        self._best_hand = max(self._all_five_card_hands(cards_on_table))\n\t        logging.debug(f\"{self.name} presents hand: {self._best_hand}\")\n\t        return self._best_hand\n\t    def collect_winnings(self, amount):\n\t        logging.debug(f\"{self.name} collects a ${amount} pot\")\n\t        self._bankroll += amount\n\t    @property\n\t    def bankroll(self):\n\t        return self._bankroll\n\t    def call(self, table):\n", "        # Helper function to call with checks for bet amount against your bet amount\n\t        print(f\"{self.name} stays in the game\")\n\t        if self.max_bet > table.bet_amount:\n\t            action = Action(\"CALL\", table.bet_amount)\n\t            return action\n\t        else:\n\t            logging.debug(f\"{self.name} is all in\")\n\t            logging.debug(\n\t                f\"{self.name} has {self.bankroll} in the bank and {self.status.money_on_table} on the table\")\n\t            action = Action(\"CALL\", self.max_bet, all_in=True)\n", "            return action\n\t    def _raise(self, table, amount=None):\n\t        # if no amount is given, player is going all-in\n\t        if amount is None:\n\t            # print(\"No amount passed to _raise...assuming all_in\")\n\t            bet_amount = self.max_bet\n\t        else:\n\t            # print(\"Raise to {amount}?\")\n\t            bet_amount = min(self.max_bet, amount)\n\t        # set all_in flag\n", "        all_in = bet_amount == self.max_bet\n\t        if table.bet_amount >= bet_amount:\n\t            # print(f\"{self.name} has max_bet: {self.max_bet} and table is at {table.bet_amount}\")\n\t            # validate that this is indeed a raise\n\t            if all_in:\n\t                # print(f\"{self.name} doesn't have enough to raise, calling instead\")\n\t                return self.call(table)\n\t            else:\n\t                raise ValueError(f\"Cannot raise from {table.bet_amount} to a lower bet of {bet_amount}\")\n\t        # print(f\"{self.name} raises to {bet_amount}\")\n", "        action = Action(\"RAISE\", bet_amount, all_in=all_in)\n\t        return action\n\t    def fold(self):\n\t        action = Action(\"FOLD\")\n\t        return action\n"]}
{"filename": "src/model/test_player.py", "chunked_list": ["from model.player import Player\n\tfrom model.deck import Card\n\tfrom model.table import Table\n\tfrom model.action import Action\n\tdef test_init():\n\t    player = Player(\n\t        name=\"Josh\",\n\t        bankroll=100,\n\t    )\n\t    card1 = Card(\"A\", \"Hearts\")\n", "    card2 = Card(\"J\", \"Clubs\")\n\t    card3 = Card(\"A\", \"Spades\")\n\t    card4 = Card(\"3\", \"Clubs\")\n\t    card5 = Card(\"Q\", \"Diamonds\")\n\t    card6 = Card(\"3\", \"Hearts\")\n\t    card7 = Card(\"A\", \"Diamonds\")\n\t    player.deal_card(card1)\n\t    player.deal_card(card2)\n\t    table = Table(1, 4)\n\t    bankroll = player._bankroll\n", "    player.start_holdem_round()\n\t    player.place_small_blind(table)\n\t    assert player._bankroll == bankroll - table.small_blind\n\t    action = Action(\"CALL\", 10)\n\t    bankroll = player._bankroll\n\t    player.start_holdem_round()\n\t    player.process_action(action)\n\t    assert player._bankroll == bankroll - action.amount\n"]}
{"filename": "src/model/__init__.py", "chunked_list": []}
{"filename": "src/model/test_tournament.py", "chunked_list": ["from model.tournament import Tournament\n\tfrom model.table import Table\n\tfrom players.floyd_folds import Floyd\n\tfrom players.callie_calls import Callie\n\tfrom players.robby_random import Robby\n\tfrom players.ricky_raise import Ricky\n\t# not_enough_players = [\n\t#     Ricky(\"Josh\", 0),\n\t#     Callie(\"Madi\", 100)\n\t# ]\n", "#\n\t# t = Tournament(not_enough_players,\n\t#                tournament_id=1)\n\t# t.play()\n\tplayers = [\n\t    Ricky(\"Josh\", 100),\n\t    Robby(\"Cody\", 100),\n\t    Ricky(\"Beezie\", 100),\n\t    Callie(\"Madi\", 100),\n\t    Floyd(\"Alice\", 100),\n", "    Robby(\"Michelle\", 100),\n\t    Callie(\"Sophia\", 100),\n\t    Floyd(\"Bob\", 100)\n\t]\n\tdef test_init():\n\t    tournament = Tournament(players,\n\t                            tournament_id=1)\n\t    tournament.play()"]}
{"filename": "src/model/test_hand.py", "chunked_list": ["from model.hand import Hand\n\tfrom model.deck import Card\n\tcard_1 = Card(\"A\", \"Diamonds\")\n\tcard_2 = Card(\"K\", \"Diamonds\")\n\tcard_3 = Card(\"Q\", \"Diamonds\")\n\tcard_4 = Card(\"J\", \"Diamonds\")\n\tcard_5 = Card(\"10\", \"Diamonds\")\n\tcard_6 = Card(\"10\", \"Clubs\")\n\tcard_7 = Card(\"J\", \"Spades\")\n\tcard_8 = Card(\"10\", \"Hearts\")\n", "card_9 = Card(\"J\", \"Hearts\")\n\tcard_10 = Card(\"J\", \"Spades\")\n\tcard_11 = Card(\"A\", \"Diamonds\")\n\tcard_12 = Card(\"2\", \"Diamonds\")\n\tcard_13 = Card(\"3\", \"Diamonds\")\n\tcard_14 = Card(\"4\", \"Diamonds\")\n\tcard_15 = Card(\"5\", \"Hearts\")\n\tcard_16 = Card(\"10\", \"Clubs\")\n\tcard_17 = Card(\"J\", \"Spades\")\n\tcard_18 = Card(\"10\", \"Hearts\")\n", "card_19 = Card(\"9\", \"Hearts\")\n\tcard_20 = Card(\"J\", \"Spades\")\n\thand_1 = Hand([\n\t    card_1,\n\t    card_2,\n\t    card_3,\n\t    card_4,\n\t    card_5\n\t])\n\thand_2 = Hand([\n", "    card_6,\n\t    card_7,\n\t    card_8,\n\t    card_9,\n\t    card_10\n\t])\n\thand_3 = Hand([\n\t    card_11,\n\t    card_12,\n\t    card_13,\n", "    card_14,\n\t    card_15\n\t])\n\thand_4 = Hand([\n\t    card_16,\n\t    card_17,\n\t    card_18,\n\t    card_19,\n\t    card_20\n\t])\n", "def test_royal():\n\t    assert not hand_1.is_pair\n\t    assert not hand_1.is_three_of_a_kind\n\t    assert hand_1.is_straight\n\t    assert not hand_1.is_full_house\n\t    assert not hand_1.is_two_pair\n\t    assert hand_1.is_flush\n\t    assert not hand_1.is_four_of_a_kind\n\t    assert hand_1.is_straight_flush\n\t    assert hand_1.is_flush\n", "    assert hand_1.is_royal_flush\n\tdef test_full_house():\n\t    assert hand_2.is_pair\n\t    assert hand_2.is_three_of_a_kind\n\t    assert not hand_2.is_straight\n\t    assert hand_2.is_full_house\n\t    assert hand_2.is_two_pair\n\t    assert not hand_2.is_flush\n\t    assert not hand_2.is_four_of_a_kind\n\t    assert not hand_2.is_straight_flush\n", "    assert not hand_2.is_flush\n\t    assert not hand_2.is_royal_flush\n\tdef test_straight():\n\t    assert not hand_3.is_pair\n\t    assert not hand_3.is_three_of_a_kind\n\t    assert hand_3.is_straight\n\t    assert not hand_3.is_full_house\n\t    assert not hand_3.is_two_pair\n\t    assert not hand_3.is_flush\n\t    assert not hand_3.is_four_of_a_kind\n", "    assert not hand_3.is_straight_flush\n\t    assert not hand_3.is_flush\n\t    assert not hand_3.is_royal_flush\n\tdef test_two_pair():\n\t    assert hand_4.is_pair\n\t    assert not hand_4.is_three_of_a_kind\n\t    assert not hand_4.is_straight\n\t    assert not hand_4.is_full_house\n\t    assert hand_4.is_two_pair\n\t    assert not hand_4.is_flush\n", "    assert not hand_4.is_four_of_a_kind\n\t    assert not hand_4.is_straight_flush\n\t    assert not hand_4.is_flush\n\t    assert not hand_4.is_royal_flush\n\tdef test_royal_v_full():\n\t    assert hand_1 > hand_2\n\tdef test_straight_v_two_pair():\n\t    assert hand_3 > hand_4\n\tdef test_royal_v_two_pair():\n\t    assert hand_1 > hand_4\n", "def test_full_v_two_pair():\n\t    assert hand_2 > hand_4"]}
{"filename": "src/model/test_deck.py", "chunked_list": ["from model.deck import Deck, Card, suits, ranks\n\tdef test_draw_1():\n\t    deck = Deck()\n\t    deck.shuffle()\n\t    card:Card = deck.draw()\n\t    print(card)\n\t    assert card.suit in suits\n\t    assert card.rank in ranks\n\tdef test_draw_2():\n\t    deck = Deck()\n", "    deck.shuffle()\n\t    card = deck.draw(2)[1]\n\t    print(card)\n\t    assert card.suit in suits\n\t    assert card.rank in ranks\n\tdef test_compare_ranks():\n\t    card1 = Card(\"A\", \"Hearts\")\n\t    card2 = Card(\"3\", \"Clubs\")\n\t    assert card1 > card2\n\tdef test_compare_ranks_2():\n", "    card1 = Card(\"3\", \"Hearts\")\n\t    card2 = Card(\"3\", \"Clubs\")\n\t    assert not card1 > card2"]}
{"filename": "src/model/deck.py", "chunked_list": ["import itertools\n\timport random\n\tsuits = [\"Hearts\", \"Clubs\", \"Spades\", \"Diamonds\"]\n\tranks = {\n\t    \"2\": 2,\n\t    \"3\": 3,\n\t    \"4\": 4,\n\t    \"5\": 5,\n\t    \"6\": 6,\n\t    \"7\": 7,\n", "    \"8\": 8,\n\t    \"9\": 9,\n\t    \"10\": 10,\n\t    \"J\": 11,\n\t    \"Q\": 12,\n\t    \"K\": 13,\n\t    \"A\": 14\n\t}\n\tclass Card(dict):\n\t    _suits = suits\n", "    _ranks = ranks\n\t    def __init__(self, rank, suit):\n\t        if not rank in self._ranks:\n\t            raise Exception(\"Cannot create card. Invalid rank.\")\n\t        if not suit in self._suits:\n\t            raise Exception(\"Cannot create card. Invalid suit\")\n\t        self.rank = rank\n\t        self.suit = suit\n\t    def __str__(self):\n\t        return self.__repr__()\n", "    def __repr__(self):\n\t        return \"Card(\\\"{}\\\", \\\"{}\\\")\".format(self.rank, self.suit)\n\t    def __eq__(self, other):\n\t        return self.rank == other.rank\n\t    def __ne__(self, other):\n\t        return not self.__eq__(other)\n\t    def __lt__(self, other):\n\t        return self._ranks[self.rank] < self._ranks[other.rank]\n\t    def __le__(self, other):\n\t        return self._ranks[self.rank] <= self._ranks[other.rank]\n", "    def __gt__(self, other):\n\t        return self._ranks[other.rank] < self._ranks[self.rank]\n\t    def __ge__(self, other):\n\t        return self._ranks[other.rank] <= self._ranks[self.rank]\n\tclass Deck:\n\t    _suits = suits\n\t    _ranks = ranks\n\t    _cards = [Card(rank, suit) for rank, suit in itertools.product(_ranks, _suits)]\n\t    # def __init__(self, random_seed=None):\n\t    #     self.random_seed = random_seed\n", "    def shuffle(self):\n\t        self._cards = random.sample(self._cards, len(self._cards))\n\t    def draw_card(self):\n\t        cards_left = len(self._cards)\n\t        card = self._cards[0]\n\t        self._cards.remove(card)\n\t        assert len(self._cards) == cards_left - 1\n\t        return card\n\t    def draw_cards(self, count=1):\n\t        cards = []\n", "        for i in range(count):\n\t            if len(self._cards) == 0:\n\t                raise Exception(\"Cannot draw card. No cards left in deck\")\n\t            # card = self._cards[0]\n\t            card = self._cards.pop(0)\n\t            cards.append(card)\n\t        return cards\n\t    def draw(self, count=None):\n\t        if count == None:\n\t            return self.draw_card()\n", "        return self.draw_cards(count)\n"]}
{"filename": "src/model/tournament.py", "chunked_list": ["import logging\n\timport os\n\timport pandas as pd\n\timport shortuuid\n\tfrom model.holdem_round import HoldemRound\n\tclass Tournament:\n\t    def __init__(self, players, tournament_id, results_dir=\"results\"):\n\t        if len(players) <= 1:\n\t            raise ValueError(\"\")\n\t        self.players = players\n", "        self.tournament_id = tournament_id\n\t        self.round_results = []\n\t        self.results_dir = results_dir\n\t        self._uuid = shortuuid.uuid()\n\t    @property\n\t    def num_players(self, big_blind=2):\n\t        return len(self.players)\n\t    def players_still_in(self, big_blind):\n\t        return [player for player in self.players if (player.bankroll >= big_blind)]\n\t    def player_status(self):\n", "        for player in self.players:\n\t            logging.debug(player)\n\t    def do_first_round(self):\n\t        players = self.players_still_in(2)\n\t        holdem_round = HoldemRound(\n\t            players=players,\n\t            blind=1,\n\t        )\n\t        self.players, self.table = holdem_round.play()\n\t        results = holdem_round.results\n", "        results[\"round_number\"] = 0\n\t        results[\"tournament_id\"] = self.tournament_id\n\t        results[\"tournament_uuid\"] = self._uuid\n\t        self.round_results.append(results)\n\t    def do_round(self, round_number):\n\t        players = self.players_still_in(self.table.big_blind)\n\t        initial_players = players.copy()\n\t        holdem_round = HoldemRound(\n\t            players=players,\n\t            table=self.table,\n", "            round_number=round_number,\n\t        )\n\t        self.players, self.table = holdem_round.play()\n\t        results = holdem_round.results\n\t        results[\"round_number\"] = round_number\n\t        results[\"tournament_id\"] = self.tournament_id\n\t        results[\"tournament_uuid\"] = self._uuid\n\t        results[\"player_count\"] = self.count_still_in\n\t        results[\"players_in_round\"] = [ player.name for player in initial_players ]\n\t        results[\"players_eliminated\"] = [ player.name for player in initial_players if not player in self.players_still_in(self.table.big_blind) ]\n", "        self.round_results.append(results)\n\t    def write_tournament_results(self):\n\t        df = pd.DataFrame(self.round_results)\n\t        filename = f\"tournement-{self._uuid}-{self.tournament_id}.csv\"\n\t        filepath = os.path.join(self.results_dir, filename)\n\t        logging.debug(f\"Writing tournament results to csv: {filepath}\")\n\t        os.makedirs(self.results_dir,\n\t                    exist_ok=True)\n\t        df.to_csv(filepath)\n\t    def play(self):\n", "        # Play rounds until only one player remains\n\t        self.do_first_round()\n\t        # players = [player for player in self.players if player.bankroll > self.tables[0].big_blind] # blinds will all move together\n\t        self.count_still_in = len(self.players_still_in(self.table.big_blind))\n\t        round_counter = 1\n\t        while self.count_still_in >= 2:\n\t            logging.debug(f\"Starting round with players: {self.players_still_in(self.table.big_blind)} last: {self.count_still_in}\")\n\t            self.do_round(round_counter)\n\t            if round_counter % 10 == 0:\n\t                self.table.raise_blinds()\n", "            self.count_still_in = len(self.players_still_in(self.table.big_blind))\n\t            logging.debug(self.players)\n\t            round_counter += 1\n\t        high_score = max([player.bankroll for player in self.players_still_in(self.table.big_blind)])\n\t        self.winners = [player for player in self.players if player.bankroll == high_score]\n\t        self.write_tournament_results()\n\t        return self.players, self.table\n"]}
{"filename": "src/model/table.py", "chunked_list": ["import json\n\tclass Table:\n\t    \"\"\"\n\t    The table object represents the observable game state for players to use in determining their play\n\t    todo: add a property that returns the fields a player needs instead of passing the whole table to them\n\t    - this is needed because a player could call methods on the table like new_holdem_round() otherwise\n\t    \"\"\"\n\t    def __init__(self, blind, num_players, dealer_button_index=0):\n\t        self.big_blind = 2 * blind\n\t        self.small_blind = blind\n", "        self.dealer_button_index = dealer_button_index\n\t        # setup dealer, blinds, and first action\n\t        self.num_players = num_players\n\t        self.new_holdem_round()\n\t    def __str__(self):\n\t        return json.dumps(self.__dict__)\n\t    def __repr__(self):\n\t        return self.__str__()\n\t    def new_holdem_round(self):\n\t        self.pot = []  # list of bet amounts including blinds\n", "        self.flop = None\n\t        self.turn = None\n\t        self.river = None\n\t        self.dealer_button_index = self.dealer_button_index  # randomly assign someone as dealer\n\t        self.big_blind_index = (self.dealer_button_index - 1) % self.num_players\n\t        self.small_blind_index = (self.dealer_button_index - 2) % self.num_players\n\t        self.bet_amount = self.big_blind  # betting starts at the big blind amount\n\t        self.new_betting_round()\n\t    def payout(self):\n\t        self.pot = []\n", "        self.bet_amount = 0\n\t    def new_betting_round(self):\n\t        self.active_player_index = (self.dealer_button_index + 1) % self.num_players  # play starts to the \"right\" of the dealer\n\t    @property\n\t    def pot_total(self):\n\t        return sum(self.pot)\n\t    def raise_bet(self, amount):\n\t        if amount > self.bet_amount:\n\t            self.bet_amount = amount\n\t        else:\n", "            raise Exception(f\"Current Bet is {self.bet_amount}Cannot raise bet to a lessor amount {amount}\")\n\t    def next_turn(self):\n\t        self.active_player_index = (self.active_player_index + 1) % self.num_players\n\t        # print(f\"Advanced active player index to {self.active_player_index}\")\n\t    def raise_blinds(self):\n\t        self.big_blind *= 2\n\t        self.small_blind *= 2\n\t    def next_round(self):\n\t        self.pot = []\n\t        self.dealer_button_index = (self.dealer_button_index + 1) % self.num_players\n", "        self.small_blind_index = (self.dealer_button_index - 2) % self.num_players\n\t        self.big_blind_index = (self.dealer_button_index - 1) % self.num_players\n\t        self.active_player_index = (self.dealer_button_index + 1) % self.num_players  # play starts to the \"right\" of the dealer\n"]}
{"filename": "src/model/test_table.py", "chunked_list": ["from model.table import Table\n\tnum_players = 8\n\tdef test_init():\n\t    table = Table(1, num_players)\n\t    assert table.flop is None\n\t    assert table.turn is None\n\t    assert table.river is None\n\t# def test_next_turn():\n\t#     table = Table(1, num_players)\n\t#     active_player_index = table.active_player_index\n", "#     table.next_turn()\n\t#     assert table.active_player_index == ( active_player_index + 1 ) % num_players\n\t#     for i in range(10 * num_players):\n\t#         assert table.active_player_index < num_players\n\t#         assert table.active_player_index >= 0\n\t#         table.next_turn()\n\tdef test_next_round():\n\t    table = Table(1, num_players)\n\t    dealer_button_index = table.dealer_button_index\n\t    big_blind_index = table.big_blind_index\n", "    small_blind_index = table.small_blind_index\n\t    table.next_round()\n\t    assert table.dealer_button_index == ( dealer_button_index + 1 ) % num_players\n\t    assert table.big_blind_index == ( big_blind_index + 1 ) % num_players\n\t    assert table.small_blind_index == ( small_blind_index + 1 ) % num_players\n\t    for i in range(10 * num_players):\n\t        assert table.dealer_button_index < num_players\n\t        assert table.dealer_button_index >= 0\n\t        table.next_round()\n"]}
