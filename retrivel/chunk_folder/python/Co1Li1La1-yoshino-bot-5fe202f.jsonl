{"filename": "main.py", "chunked_list": ["import fnbot\n\t# Importing configuration files\n\t# fnbot.load_config_json(\"./pybot.json\")\n\t# fnbot.load_config_toml(\"./pybot.toml\")\n\tfnbot.load_config_toml(\"./pybot.toml\")\n\t# Create a new configuration file `config.toml` or `config.json`\n\t# to replace `pybot.toml` or `pybot.json`\n\t# fnbot.load_config_json(\"./config.json\")\n\t# fnbot.load_config_toml(\"./config.toml\")\n\t# Importing plugins\n", "# fnbot.insert_plugin(\"debug\", \"./plugins\")\n\t# fnbot.insert_plugin([\"debug\", ], \"./plugins\")\n\t# fnbot.insert_plugins_dir(\"./plugins\",)\n\t# containing _plugin as follows:\n\t# fnbot.insert_the_plugin(\"_debug\", \"./plugins\")\n\t# fnbot.insert_the_plugin([\"_debug\", ], \"./plugins\")\n\tfnbot.insert_plugins_dir(\"./plugins\",)\n\t# Create a new folder `plugin` to replace `plugins`\n\t# fnbot.insert_plugins_dir(\"./plugin\",)\n\tif \"__main__\" == __name__:\n", "    fnbot.run()\n"]}
{"filename": "pybot.py", "chunked_list": ["# Similar to `config.json or config.toml`\n"]}
{"filename": "plugins/simple_plugin.py", "chunked_list": ["import time\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\t@Message.insert_msg()\n\t@ciallo.grace('/help')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n\t    if ciallo.match(rev.msg, [\"菜单\", \"帮助\", \"基本功能\"]):\n\t        msg = \"暂时没有~\"\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n", "@Message.insert_msg()\n\t@ciallo.grace('/time')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n\t    if ciallo.match(rev.msg, ['时间', '/时间']):\n\t        wl = \"一二三四五六天\"\n\t        weekday = wl[time.localtime().tm_wday]\n\t        now_time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\t        msg = f\"{now_time}\\t星期{weekday}\"\n\t        Send(rev).send_msg(msg_type, num_type, msg)"]}
{"filename": "plugins/recall_plugin.py", "chunked_list": ["import asyncio\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\t@Message.insert_notice()\n\t@ciallo.grace('/group_recall')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n\t    if rev.notice_type == \"group_recall\" and all((\n\t        rev.operator_id != rev.self_id, rev.user_id != rev.self_id,\n\t    )):\n", "        recall_rev = Send(rev).get_msg(rev.msg_id)['data']\n\t        recall_rev = Message(recall_rev)\n\t        recall_msg = recall_rev.msg\n\t        msg = f\"[CQ:poke,qq={recall_rev.sender_user_id}]\"\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n\t        msg = recall_msg\n\t        msg_id = Send(rev).send_msg(msg_type, num_type, msg)\n\t        @ciallo\n\t        async def task():\n\t            await asyncio.sleep(3)\n", "            Send(rev).delete_msg(msg_id)\n\t            await task.cancel()\n\t        await task.start(rev)\n\t@Message.insert_notice()\n\t@ciallo.grace('/private_recall')\n\tasync def _(rev:\"Message\"):\n\t    if rev.notice_type == \"friend_recall\":\n\t        recall_rev = Send(rev).get_msg(rev.msg_id)['data']\n\t        recall_rev = Message(recall_rev)\n\t        _qq = recall_rev.sender_user_id\n", "        msg = f\"{_qq}\\t\\t\\t的消息在私聊中被撤回了:\\n\\n{recall_rev.msg}\"\n\t        Send(rev).send_msg(\"private\",ciallo(c=rev).super_qq,msg)"]}
{"filename": "plugins/reread_plugin.py", "chunked_list": ["import random\n\timport asyncio\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\trev_dict:dict = {}\n\tawt_group:list = []\n\t@Message.insert_group()\n\t@ciallo.grace('/group_fudu')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n", "    num_type_msg_list = rev_dict.get(num_type, [])\n\t    num_type_msg_list.append(rev.msg)\n\t    if len(num_type_msg_list) >3: num_type_msg_list.pop(0)\n\t    rev_dict.update({num_type:num_type_msg_list})\n\t    if len(num_type_msg_list) == 3 and all((\n\t        num_type_msg_list[0] == num_type_msg_list[1],\n\t        num_type_msg_list[1] == num_type_msg_list[2],\n\t        num_type not in awt_group, rev.user_id != rev.self_id,\n\t    )): awt_group.append(num_type)\n\t    else: return\n", "    @ciallo\n\t    async def task():\n\t        msg = num_type_msg_list[0]\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n\t        probability = random.uniform(0.88, 88.88)\n\t        while True:\n\t            awtrev = await task.awt_all_rev()\n\t            if any((awtrev.group_id != rev.group_id,\n\t                awtrev.user_id == rev.self_id,)): continue\n\t            if awtrev.msg == msg:\n", "                break_probability = random.uniform(0.88, 100.00)\n\t                if break_probability < probability or probability >= 100:\n\t                    break_msg = \"打断施法~\"\n\t                    if msg == break_msg: break_msg = \"~法施断打\"\n\t                    Send(rev).send_msg(msg_type,num_type,break_msg)\n\t                    await task.cancel()\n\t                else:\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n\t                    probability += random.uniform(0.66, 33.33)\n\t                    if probability >= 100: probability = 100.00\n", "                    await asyncio.sleep(1)\n\t            else:\n\t                await task.cancel()\n\t    await task.start(rev)\n\t    awt_group.remove(num_type)"]}
{"filename": "plugins/scheduled_task.py", "chunked_list": ["import time\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\tasync def group_sign():\n\t    dev_list = [_ for _ in ciallo(c=None).cfginfo.keys()]\n\t    for _ in dev_list:\n\t        for group_id in ciallo(c=_).group_list:\n\t            Send(_).send_group_sign(group_id)\n\tasync def task_start():\n", "    while True:\n\t        h= int(time.strftime(\"%H\"))\n\t        m= int(time.strftime(\"%M\"))\n\t        s= int(time.strftime(\"%S\"))\n\t        awt_time = 86400 -60 - h*3600 - m*60 -s\n\t        if awt_time >= 0:\n\t            time.sleep(awt_time)\n\t        else:\n\t            time.sleep(s + 0.1)\n\t            await group_sign()\n", "@Message.insert()\n\t@ciallo.grace()\n\tasync def _():\n\t    await task_start()\n"]}
{"filename": "plugins/basic_notice_plugin.py", "chunked_list": ["from fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\t@Message.insert_notice()\n\t@ciallo.grace('/upload_group_file')\n\tasync def _(msg_type:str, num_type:str, rev:\"Message\"):\n\t    if rev.notice_type == \"group_upload\":\n\t        msg = f\"[CQ:poke,qq={rev.qq}]\"\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n\t@Message.insert_notice()\n", "@ciallo.grace('/group_member_decrease')\n\tasync def _(msg_type:str, num_type:str, rev:\"Message\"):\n\t    if rev.notice_type == \"group_decrease\" and rev.operator_id == rev.user_id:\n\t        msg = \"有个人被···吓跑了！\"\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n\t@Message.insert_notice()\n\t@ciallo.grace('/group_member_increase')\n\tasync def _(msg_type:str, num_type:str, rev:\"Message\"):\n\t    if rev.notice_type == \"group_increase\":\n\t        msg=(\n", "            f\"[CQ:at,qq={rev.qq}]\\n\"\n\t            f\"终于等到你了~\"\n\t        )\n\t        Send(rev).send_msg(msg_type,num_type,msg)"]}
{"filename": "plugins/basic_request_plugin.py", "chunked_list": ["from fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\t@Message.insert_request()\n\t@ciallo.grace('/add_friend')\n\tasync def _(rev:\"Message\"):\n\t    if rev.request_type == \"friend\":\n\t        Send(rev).set_friend_add_request(rev.flag, True)\n"]}
{"filename": "plugins/today_in_history/__init__.py", "chunked_list": ["import os\n\timport json\n\timport time\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\tcurrent_file_path = ciallo.get_current_path(__file__)\n\tpath_src = current_file_path + '/src'\n\tpath_lssdjt = path_src\n\t@Message.insert_msg()\n", "@ciallo.grace('/today_in_history')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n\t    if ciallo.match(rev.msg, ['历史上的今天', '/历史上的今天']):\n\t        now_time = time.strftime(\"%Y-%m-%d\")\n\t        month_now = time.strftime('%m')\n\t        day_now = time.strftime('%d')\n\t        fp = path_lssdjt + f\"/{month_now}-{day_now}.json\"\n\t        with open(fp, \"r\", encoding=\"utf-8\") as f:\n\t            day_dict:dict = json.load(f)\n\t        msg_list = [now_time]\n", "        msg_list += [key + \":\\n\" + value for key,value in day_dict.items()]\n\t        msg:list = ciallo.forward_msg(rev.time, rev.self_id, msg_list)\n\t        Send(rev).send_forward_msg(msg_type, num_type, msg)\n"]}
{"filename": "plugins/questions_and_answers/config.py", "chunked_list": ["from fnbot import ciallo\n\tcurrent_file_path = ciallo.get_current_path(__file__)\n\tpath_src = current_file_path + '/src'\n\tpath_riddle = path_src + '/riddle.json'\n\tpath_fable = path_src + '/fable.json'\n\tpath_twist = path_src + '/twist.json'"]}
{"filename": "plugins/questions_and_answers/__init__.py", "chunked_list": ["import json\n\timport time\n\timport random\n\timport asyncio\n\tfrom threading import Lock\n\tfrom fnbot import ciallo\n\tfrom fnbot import Message\n\tfrom fnbot import Send\n\tfrom .config import path_riddle, path_fable, path_twist\n\t# riddle\n", "def riddle_yield_function(_fp:str):\n\t    with open(_fp, \"r\", encoding=\"utf-8\") as f:\n\t        _dict:dict = json.load(f)\n\t        _list = list(_dict.keys())\n\t    while True:\n\t        random.shuffle(_list)\n\t        for i in _list: yield (i, _dict[i])\n\triddle_src_generator = riddle_yield_function(path_riddle)\n\triddle_lock = Lock()\n\tdef riddle_next_function():\n", "    with riddle_lock: return next(riddle_src_generator)\n\t# fable\n\tdef fable_yield_function(_fp:str):\n\t    with open(_fp, \"r\", encoding=\"utf-8\") as f:\n\t        _dict:dict = json.load(f)\n\t        _list = list(_dict.keys())\n\t    while True:\n\t        random.shuffle(_list)\n\t        for i in _list: yield (i, _dict[i])\n\tfable_generator = fable_yield_function(path_fable)\n", "fable_lock = Lock()\n\tdef fable_next_function():\n\t    with fable_lock: return next(fable_generator)\n\t# twist\n\tdef tist_yield_function(_fp:str):\n\t    with open(_fp, \"r\", encoding=\"utf-8\") as f:\n\t        _dict:dict = json.load(f)\n\t        _list = list(_dict.keys())\n\t    while True:\n\t        random.shuffle(_list)\n", "        for i in _list: yield (i, _dict[i])\n\ttwist_generator = tist_yield_function(path_twist)\n\ttwist_lock = Lock()\n\tdef twist_next_function():\n\t    with twist_lock: return next(twist_generator)\n\t@Message.insert_msg()\n\t@ciallo.grace('/q and a')\n\tasync def _(msg_type:str, num_type:str, rev:'Message'):\n\t    if ciallo.match(rev.msg, [\"字谜\", \"歇后语\", \"脑筋急转弯\",]):\n\t        if rev.msg == \"字谜\": issue, answer = riddle_next_function()\n", "        elif rev.msg == \"歇后语\": issue, answer = fable_next_function()\n\t        else: issue, answer = twist_next_function()\n\t        wl = \"一二三四五六天\"\n\t        weekday = wl[time.localtime().tm_wday]\n\t        now_time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\t        msg = (\n\t            f\"[CQ:at,qq={str(rev.qq)}]\\n\"\n\t            f\"你有三分钟的时间回答如下问题(共三次机会)\\n\"\n\t            f\"当前时间：\\n\"\n\t            f\"{now_time}\\t星期{weekday}\"\n", "        )\n\t        msg = ciallo.compat_msg(msg, msg_type, rev)\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n\t        msg = (\n\t            f\"[CQ:reply,id={rev.msg_id}]\"\n\t            f\"[CQ:at,qq={str(rev.qq)}]\"\n\t            f\"{issue}\"\n\t        )\n\t        msg = ciallo.compat_msg(msg, msg_type, rev)\n\t        Send(rev).send_msg(msg_type, num_type, msg)\n", "        @ciallo\n\t        async def schedule(msg_type:str, num_type:str, rev:'Message'):\n\t            while True:\n\t                awtrev:'Message' = await schedule.awt_special_rev()\n\t                schedule.counter += 1\n\t                if all((\n\t                    awtrev.msg == '答案',\n\t                    any((\n\t                        ciallo.is_bot_admin(awtrev),\n\t                        ciallo.is_group_admin(awtrev),\n", "                    )),\n\t                )):\n\t                    schedule.counter -= 1\n\t                    msg = str(answer)\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n\t                elif awtrev.msg == answer:\n\t                    msg=(\n\t                        f\"[CQ:at,qq={str(rev.qq)}]\\n\"\n\t                        f\"恭喜你回答正确！！！\"\n\t                    )\n", "                    msg = ciallo.compat_msg(msg, msg_type, rev)\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n\t                    await schedule.cancel()\n\t                elif schedule.counter >= 3:\n\t                    msg = (\n\t                        f\"[CQ:at,qq={str(rev.qq)}]\\n\"\n\t                        f\"回答次数超过上限!!!\\n\"\n\t                        f\"答案是:\\n\\n\"\n\t                        f\"{answer}\"\n\t                    )\n", "                    msg = ciallo.compat_msg(msg, msg_type, rev)\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n\t                    await schedule.cancel()\n\t                else:\n\t                    msg=(\n\t                        f\"[CQ:at,qq={str(rev.qq)}]\\n\"\n\t                        f\"答案似乎不是这个！！！\"\n\t                    )\n\t                    msg = ciallo.compat_msg(msg, msg_type, rev)\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n", "        @schedule.awtwait\n\t        async def schedule(msg_type:str, num_type:str, rev:'Message'):\n\t            while True:\n\t                awtexcrev = await schedule.awt_exc_rev()\n\t                if all((\n\t                    awtexcrev.msg == '答案',\n\t                    any((\n\t                        ciallo.is_bot_admin(awtexcrev),\n\t                        ciallo.is_group_admin(awtexcrev),\n\t                    )),\n", "                )):\n\t                    msg = answer\n\t                    Send(rev).send_msg(msg_type, num_type, msg)\n\t        @schedule.awtdecline\n\t        async def schedule(msg_type:str, num_type:str, rev:'Message'):\n\t            await asyncio.sleep(180)\n\t            msg = (\n\t                f\"[CQ:at,qq={str(rev.qq)}]\\n\"\n\t                f\"等待超时！！！\\n\"\n\t                f\"答案是:\\n\\n\"\n", "                f\"{answer}\"\n\t            )\n\t            msg = ciallo.compat_msg(msg, msg_type, rev)\n\t            Send(rev).send_msg(msg_type, num_type, msg)\n\t            await schedule.cancel()\n\t        await schedule.start(rev)"]}
{"filename": "fnbot/__main__.py", "chunked_list": []}
{"filename": "fnbot/__init__.py", "chunked_list": ["r\"\"\"This module is for quick import\n\tFor the convenience of use,this module imports some content from sub-modules,\n\tthe following content can be imported directly through this module\n\t\"\"\"\n\tfrom .yoshinobot import run as run\n\tfrom .yoshinobot import load_config_toml as load_config_toml\n\tfrom .yoshinobot import load_config_json as load_config_json\n\tfrom .yoshinobot import insert_plugin as insert_plugin\n\tfrom .yoshinobot import insert_plugins_dir as insert_plugins_dir\n\tfrom .yoshinobot import insert_the_plugin as insert_the_plugin\n", "from .yoshinobot import ciallo as ciallo\n\tfrom .yoshinobot import Config as Config\n\tfrom .yoshinobot import Receive as Receive\n\tfrom .yoshinobot import Send as Send\n\tfrom .yoshinobot import Message as Message\n\tfrom .yoshinobot import YOSHINO as YOSHINO\n\tfrom .__version__ import (\n\t    __title__,\n\t    __version__,\n\t    __description__,\n", "    __url__,\n\t    __author__,\n\t    __author_email__,\n\t)\n\tCIALLO = \"CIALLO\""]}
{"filename": "fnbot/__version__.py", "chunked_list": ["__title__ = \"fnbot\"\n\t__version__ = \"1.2.16\"\n\t__description__ = \"yoshino bot\"\n\t__url__ = \"https://github.com/Co1Li1La1/yoshino-bot\"\n\t__author__ = \"Co1Li1La1\"\n\t__author_email__ = \"mrhblfx@gmail.com\""]}
{"filename": "fnbot/yoshinobot/bot_insert.py", "chunked_list": ["from typing import overload\n\tfrom .bot import BotInsert\n\t__all__ = ( \"Insert\",\n\t            \"InsertInit\", \"InsertMessage\",\n\t            \"InsertPrivate\", \"InsertGroup\",\n\t            \"InsertNotice\", \"InsertRequest\",\n\t            \"get_insert_plugins\"\n\t)\n\tdef _is_legal_decorated(f) -> bool:\n\t    return all((\n", "        getattr(f.__code__, 'co_flags', 0) in [147, 195],\n\t    ))\n\tdef _update_manage_component(_insert_type:str, _f):\n\t    f_list:list = Insert.manage_component_dict.get(_insert_type, [])\n\t    f_list.append(_f)\n\t    Insert.manage_component_dict.update({_insert_type:f_list})\n\tclass Insert(BotInsert):\n\t    \"\"\"\n\t    Class Properties:\n\t    ```\n", "        insert_type:str = \"insert\"\n\t        manage_component_dict: dict{\n\t            'insert_type': list[function],\n\t        }\n\t    ```\n\t    \"\"\"\n\t    insert_type:str = \"insert\"\n\t    manage_component_dict:dict = {}\n\t    \"\"\"\n\t    ```\n", "        dict{\n\t            'insert_type': list[function],\n\t        }\n\t    ```\n\t    \"\"\"\n\t    def __new__(cls, _name:str, _bases:tuple, _dict:dict):\n\t        return type.__new__(cls, _name, _bases, _dict)\n\t    def __init__(self, _name:str, _bases:tuple, _dict:dict):\n\t        if _name in ['InsertInit']: self.insert_type = 'init'\n\t        elif _name in ['InsertMessage']: self.insert_type = 'message'\n", "        elif _name in ['InsertPrivate']: self.insert_type = 'private'\n\t        elif _name in ['InsertGroup']: self.insert_type = 'group'\n\t        elif _name in ['InsertNotice']: self.insert_type = 'notice'\n\t        elif _name in ['InsertRequest']: self.insert_type = 'request'\n\t        return type.__init__(self, _name, _bases, _dict)\n\t    @overload\n\t    @classmethod\n\t    def manage(cls): ...\n\t    @overload\n\t    @classmethod\n", "    def manage(cls, _dev:list, /): ...\n\t    @overload\n\t    @classmethod\n\t    def manage(cls, *, _bool:bool): ...\n\t    @overload\n\t    @classmethod\n\t    def manage(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n\t    ): ...\n\t    @classmethod\n", "    def manage(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n", "        ```\n\t        \"\"\"\n\t        def decorator(f):\n\t            assert _is_legal_decorated(f)\n\t            assert isinstance(_dev, list)\n\t            assert isinstance(_group, list)\n\t            assert isinstance(_alive, bool)\n\t            assert isinstance(_num, int)\n\t            setattr(f, \"__dev__\", _dev)\n\t            setattr(f, \"__group__\", _group)\n", "            setattr(f, \"__alive__\", _alive)\n\t            setattr(f, \"__num__\", _num)\n\t            if cls.insert_type == \"message\":\n\t                _update_manage_component(\"private\", f)\n\t                _update_manage_component(\"group\", f)\n\t                return f\n\t            _update_manage_component(cls.insert_type, f)\n\t            return f\n\t        return decorator\n\tclass InsertInit(Insert, metaclass = Insert):\n", "    def __new__(cls): pass\n\tclass InsertMessage(Insert, metaclass = Insert):\n\t    def __new__(cls): pass\n\tclass InsertPrivate(Insert, metaclass = Insert):\n\t    def __new__(cls): pass\n\tclass InsertGroup(Insert, metaclass = Insert):\n\t    def __new__(cls): pass\n\tclass InsertNotice(Insert, metaclass = Insert):\n\t    def __new__(cls): pass\n\tclass InsertRequest(Insert, metaclass = Insert):\n", "    def __new__(cls): pass\n\tdef get_insert_plugins(_insert_type:str) -> list:\n\t    return Insert.manage_component_dict.get(_insert_type, [])"]}
{"filename": "fnbot/yoshinobot/bot_plugin.py", "chunked_list": ["import os\n\timport importlib\n\tfrom .bot import BotPlugin\n\tfrom .platforms import Config\n\t__all__ = ( \"insert_plugin\",\n\t            \"insert_plugins_dir\",\n\t            \"insert_the_plugin\",\n\t)\n\tclass Plugin(BotPlugin):\n\t    \"\"\"\n", "    Class Properties:\n\t    ```\n\t        all_plugin_name: list[str]\n\t        inserted_plugins: dict\n\t    ```\n\t    \"\"\"\n\t    all_plugin_name:list = []\n\t    \"\"\"`list[str]`\"\"\"\n\t    inserted_plugins:dict = {}\n\t    __slots__ = ('plugin_name_list', 'relative_path_str',)\n", "    def __init__(self, _plugin_name_list:list, _relative_path_str:str):\n\t        self.plugin_name_list = _plugin_name_list\n\t        self.relative_path_str = _relative_path_str\n\t    def _relative_to_absolute(self) -> str:\n\t        \"\"\"\n\t        Returns:\n\t        ```\n\t            str: absolute path of self.relative_path_str\n\t        ```\n\t        \"\"\"\n", "        absolute_path:str = (\n\t            Config.path_pybot + \"/\" + self.relative_path_str.lstrip(\"./\").rstrip(\"/\")\n\t        )\n\t        return absolute_path\n\t    def _to_import_name(self, _name:str) -> str:\n\t        \"\"\"\n\t        Returns:\n\t        ```\n\t            str: the name to be imported\n\t        ```\n", "        \"\"\"\n\t        import_name:str = self.relative_path_str.lstrip(\"./\").rstrip(\"/\")\n\t        import_name =  \".\".join(import_name.split(\"/\")) + f\".{_name}\"\n\t        if import_name.endswith(\".py\"): import_name = import_name.rstrip(\".py\")\n\t        return import_name\n\t    def _is_legal_plugin(self, BotPlugin:str) -> bool:\n\t        \"\"\"\n\t        A legitimate plugin should have a file name or folder name that\n\t        does not start with `_`.\n\t        If it is a folder, it must contain the file `__init__.py`.\n", "        Args:\n\t        ```\n\t            _plugin_str:str    :debug_file, debug.py, debug_dir\n\t        ```\n\t        Returns:\n\t        ```\n\t            bool: Is it a plugin name that can be imported?\n\t        ```\n\t        \"\"\"\n\t        if any((BotPlugin.startswith('_'),)): return False\n", "        absolute_plugin_path:str = self._relative_to_absolute() + '/' + BotPlugin\n\t        return any((\n\t            os.path.isfile(absolute_plugin_path),\n\t            os.path.isfile(absolute_plugin_path + '.py'),\n\t            all((\n\t                os.path.isdir(absolute_plugin_path),\n\t                os.path.isfile(absolute_plugin_path + '/__init__.py'),\n\t            )),\n\t        ))\n\t    def _insert_plugin(self, _name:str):\n", "        plugin_list = os.listdir(self._relative_to_absolute())\n\t        if _name in plugin_list or _name + '.py' in plugin_list:\n\t            self.all_plugin_name.append(self._to_import_name(_name))\n\t        else:\n\t            raise RuntimeError(f\"Not found {_name} at all!!!\")\n\t    def insert_plugin_self(self):\n\t        plugin_list = [_ for _ in self.plugin_name_list if self._is_legal_plugin(_)]\n\t        for _ in plugin_list: self._insert_plugin(_)\n\t    def insert_plugins_dir(self, _exc_plugins_list:list = []):\n\t        plugin_dir_list:list = os.listdir(self._relative_to_absolute())\n", "        plugin_dir_list = [_ for _ in plugin_dir_list if self._is_legal_plugin(_)]\n\t        plugin_dir_list = [_ for _ in plugin_dir_list if _ not in _exc_plugins_list]\n\t        if plugin_dir_list == []: raise RuntimeError(\"Not found any plugin at all!!!\")\n\t        for _ in plugin_dir_list: self._insert_plugin(_)\n\t    def insert_the_plugin(self):\n\t        for _ in self.plugin_name_list: self._insert_plugin(_)\n\tdef insert_plugin(BotPlugin, _relative_path:str):\n\t    \"\"\"\n\t    Args:\n\t    ```\n", "        BotPlugin: str | list\n\t        _relative_path: str | None = None\n\t    ```\n\t    Usages:\n\t    ```\n\t        fnbot.insert_plugin(\"debug\", \"./plugins\")\n\t        fnbot.insert_plugin([\"debug\", ], \"./plugins\")\n\t    ```\n\t    \"\"\"\n\t    assert isinstance(BotPlugin, (str, list))\n", "    assert isinstance(_relative_path, str)\n\t    if isinstance(BotPlugin, str): BotPlugin = [BotPlugin]\n\t    plugin = Plugin(BotPlugin, _relative_path)\n\t    return plugin.insert_plugin_self()\n\tdef insert_plugins_dir(_relative_path_dir:str, _exc_plugins_list:list = []):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        _relative_path_dir:str\n\t        _exc_plugins_list:list[str] = []\n", "    ```\n\t    Usages:\n\t    ```\n\t        fnbot.insert_plugins_dir(\"./plugins\")\n\t    ```\n\t    \"\"\"\n\t    assert isinstance(_relative_path_dir, str)\n\t    assert isinstance(_exc_plugins_list, list)\n\t    plugin = Plugin([], _relative_path_dir)\n\t    return plugin.insert_plugins_dir(_exc_plugins_list)\n", "def insert_the_plugin(BotPlugin, _relative_path:str):\n\t    \"\"\"contain BotPlugin\n\t    Args:\n\t    ```\n\t        BotPlugin: str | list\n\t        _relative_path: str | None = None\n\t    ```\n\t    Usages:\n\t    ```\n\t        fnbot.insert_the_plugin(\"_debug\", \"./plugins\")\n", "        fnbot.insert_the_plugin([\"_debug\", ], \"./plugins\")\n\t    ```\n\t    \"\"\"\n\t    assert isinstance(BotPlugin, (str, list))\n\t    assert isinstance(_relative_path, str)\n\t    if isinstance(BotPlugin, str): BotPlugin = [BotPlugin]\n\t    plugin = Plugin(BotPlugin, _relative_path)\n\t    return plugin.insert_the_plugin()\n\tdef load_all_plugin():\n\t    for _ in Plugin.all_plugin_name:\n", "        module = importlib.import_module(_)\n\t        Plugin.inserted_plugins.update({str(module):_})\n"]}
{"filename": "fnbot/yoshinobot/_core.py", "chunked_list": ["import time\n\timport asyncio\n\timport threading\n\tfrom concurrent.futures import ThreadPoolExecutor\n\tfrom .bot_insert import get_insert_plugins\n\tfrom .platforms import Config\n\tfrom .platforms import load_all_config\n\tfrom .bot_plugin import load_all_plugin\n\tfrom .platforms import is_cq_alive\n\tfrom .platforms import run_receive_server\n", "from .platforms import get_rev_msg\n\tfrom ._ciallo import schedule\n\t__all__ = \"run\",\n\tclass CoreOfInsert:\n\t    nonparametric_insert_type = ['init', 'insert']\n\t    parametric_insert_type = ['private', 'group', 'notice', 'request']\n\t    __slots__ = (\"insert_type\", \"to_run\",)\n\t    def __init__(self, _insert_type:str, _component_list:list):\n\t        self.insert_type = _insert_type\n\t        self.to_run = self.get_to_run(_component_list)\n", "        # to_run:list[function] for parametric_insert_type\n\t        # to_run:dict{'bot_qq':list[function]} for nonparametric_insert_type\n\t    def get_to_run(self, _component_list:list):\n\t        \"\"\"\n\t        Retuens:\n\t        ```\n\t            to_run:list[function]\n\t            to_run:dict{'bot_qq':list[function]}\n\t        ```\n\t        \"\"\"\n", "        if self.insert_type in self.nonparametric_insert_type:\n\t            return [_ for _ in _component_list if _.__alive__]\n\t        elif self.insert_type in self.parametric_insert_type:\n\t            to_run_dict:dict = {_:[] for _ in Config.cfginfo.keys()}\n\t            for _ in _component_list:\n\t                if [] == _.__dev__:\n\t                    to_run_dict = {\n\t                        v.append(_) or k:v for k,v in to_run_dict.items()\n\t                    }\n\t                else:\n", "                    for dev in _.__dev__:\n\t                        dev = str(dev)\n\t                        dev_to_list:list = to_run_dict.get(dev, [])\n\t                        dev_to_list.append(_)\n\t                        to_run_dict.update({dev:dev_to_list})\n\t            return to_run_dict\n\t    async def _run_core(self, _rev:dict = {}):\n\t        if self.insert_type in self.nonparametric_insert_type:\n\t            if [] != self.to_run:\n\t                await asyncio.gather(*[_() for _ in self.to_run])\n", "        elif self.insert_type in self.parametric_insert_type:\n\t            to_run_list:list = self.to_run.get(str(_rev.get(\"self_id\")), [])\n\t            to_run_list = [\n\t                _ for _ in to_run_list if (\n\t                    [] == _.__group__ or _rev.get('group_id') in _.__group__\n\t                )\n\t            ]\n\t            to_run_list = sorted(\n\t                to_run_list, key = lambda x:x.__num__, reverse = False\n\t            )\n", "            if [] != to_run_list:\n\t                await asyncio.gather(*[_(_rev) for _ in to_run_list])\n\t    def run(self, _rev:dict = {}): asyncio.run(self._run_core(_rev))\n\tdef run_rev_msg():\n\t    # ...\n\t    core_private_list:list = get_insert_plugins(\"private\")\n\t    core_group_list:list = get_insert_plugins(\"group\")\n\t    core_notice_list:list = get_insert_plugins(\"notice\")\n\t    core_request_list:list = get_insert_plugins(\"request\")\n\t    core_private = CoreOfInsert(\"private\", core_private_list)\n", "    core_group = CoreOfInsert(\"group\", core_group_list)\n\t    core_notice = CoreOfInsert(\"notice\", core_notice_list)\n\t    core_request = CoreOfInsert(\"request\", core_request_list)\n\t    # ...\n\t    # it should be execute once as follows:\n\t    core_private.run({'message':None})\n\t    core_group.run({'message':None})\n\t    # main loop: every rev should have a thread belonging to itself\n\t    while True:\n\t        rev = get_rev_msg()\n", "        if {} == rev: time.sleep(0.1); continue\n\t        if all((rev != {}, rev.get('post_type','meta_event') != 'meta_event')):\n\t            schedule.send_rev(rev)\n\t            post_type:str = rev['post_type'] if 'post_type' in rev else ''\n\t            msg_type:str = rev['message_type'] if 'message_type' in rev else ''\n\t            if msg_type == 'private' and all((\n\t                rev.get('user_id') not in Config(rev).blackqq_list,\n\t            )):\n\t                threading.Thread(target=core_private.run, args=(rev,)).start()\n\t            elif msg_type == 'group' and all((\n", "                rev.get('group_id') in Config(rev).group_list,\n\t                rev.get('user_id') not in Config(rev).blackqq_list,\n\t            )):\n\t                threading.Thread(target=core_group.run, args=(rev,)).start()\n\t            elif post_type == 'notice' and all((\n\t                any((\n\t                    rev.get('user_id') not in Config(rev).blackqq_list,\n\t                    rev.get('user_id',None) == None,\n\t                )),\n\t                any((\n", "                    rev.get('group_id') in Config(rev).group_list,\n\t                    rev.get('group_id',None) == None,\n\t                )),\n\t            )):\n\t                threading.Thread(target=core_notice.run, args=(rev,)).start()\n\t            elif post_type == 'request' and all((\n\t                any((\n\t                    rev.get('user_id') not in Config(rev).blackqq_list,\n\t                    rev.get('user_id',None) == None,\n\t                )),\n", "                any((\n\t                    rev.get('group_id') in Config(rev).group_list,\n\t                    rev.get('group_id',None) == None,\n\t                )),\n\t            )):\n\t                threading.Thread(target=core_request.run, args=(rev,)).start()\n\tdef _run(_yoshino:str, _max_thread:int):\n\t    assert isinstance(_yoshino, str)\n\t    assert isinstance(_max_thread, int)\n\t    load_all_config()\n", "    load_all_plugin()\n\t    is_cq_alive()\n\t    # ...\n\t    core_init_list:list = get_insert_plugins(\"init\")\n\t    coro_insert_list:list = get_insert_plugins(\"insert\")\n\t    core_init = CoreOfInsert(\"init\", core_init_list)\n\t    coro_insert = CoreOfInsert(\"insert\", coro_insert_list)\n\t    # ...\n\t    core_init.run()\n\t    with ThreadPoolExecutor(max_workers = _max_thread) as executor:\n", "        executor.submit(coro_insert.run)\n\t        executor.submit(run_receive_server)\n\t        executor.submit(run_rev_msg)\n\t        print(_yoshino)\n\t    print(\"~~~少女祈祷中~~~\")\n\tdef run(_yoshino:str = \"~~~ciallo~~~\", _max_thread:int = 3):\n\t    \"\"\"run yoshino bot\n\t    Args:\n\t    ```\n\t        _yoshino:str = \"~~~ciallo~~~\"\n", "    ```\n\t    Usages:\n\t    ```\n\t        if \"__main__\" == __name__:\n\t            fnbot.run()\n\t    ```\n\t    \"\"\"\n\t    return _run(_yoshino, _max_thread)\n"]}
{"filename": "fnbot/yoshinobot/__init__.py", "chunked_list": ["from .platforms import *\n\tfrom .bot_message import *\n\tfrom .bot_plugin import *\n\tfrom ._core import *\n\tfrom ._ciallo import *\n\t__all__ = ( platforms.__all__ +\n\t            bot_message.__all__ +\n\t            bot_plugin.__all__ +\n\t            _core.__all__ +\n\t            _ciallo.__all__\n", ")\n\tYOSHINO = \"YOSHINO\"\n"]}
{"filename": "fnbot/yoshinobot/_ciallo.py", "chunked_list": ["import re\n\timport inspect\n\timport asyncio\n\tfrom typing import overload\n\tfrom .platforms import Config\n\tfrom .platforms import Send\n\tfrom .platforms import Receive\n\tfrom .bot_message import Message\n\tfrom .msg_tools import *\n\t__all__ = \"ciallo\",\n", "class ciallo:\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        _coro:coroutine\n\t        c:'Message' | dict | int | str | None = ...\n\t        r:'Message' | dict | int | str | None = ...\n\t        s:'Message' | dict | int | str | None = ...\n\t        m:dict |None = ...\n\t    ```\n", "    \"\"\"\n\t    pattern_function_list:list = []\n\t    \"\"\"`list['function']`\"\"\"\n\t    fullargspec_tuple_list:list = []\n\t    \"\"\"`list[tuple:'FullArgSpec']`\"\"\"\n\t    @overload\n\t    def __new__(self, _coro) -> 'schedule': ...\n\t    @overload\n\t    def __new__(self, c) -> 'Config': ...\n\t    @overload\n", "    def __new__(self, r) -> 'Receive': ...\n\t    @overload\n\t    def __new__(self, s) -> 'Send': ...\n\t    @overload\n\t    def __new__(self, m) -> 'Message': ...\n\t    def __new__(self, _coro = ..., c = ..., r = ..., s = ..., m = ...):\n\t        if ... != _coro and schedule._is_legal(_coro):\n\t            new_self_obj = schedule.__new__(schedule, _coro)\n\t            new_self_obj.__init__(_coro)\n\t            return new_self_obj\n", "        elif isinstance(c, (str, int, dict, Message, type(None))):\n\t            if None == c: return Config\n\t            new_self_obj = Config.__new__(Config, c)\n\t            new_self_obj.__init__(c)\n\t            return new_self_obj\n\t        elif isinstance(r, (str, int, dict, Message, type(None))):\n\t            if None == r: return Receive\n\t            new_self_obj = Receive.__new__(Receive, r)\n\t            new_self_obj.__init__(r)\n\t            return new_self_obj\n", "        elif isinstance(s, (str, int, dict, Message, type(None))):\n\t            if None == s: return Send\n\t            new_self_obj = Send.__new__(Send, s)\n\t            new_self_obj.__init__(s)\n\t            return new_self_obj\n\t        elif isinstance(m, (dict, type(None))):\n\t            if None == m: return Message\n\t            new_self_obj = Message.__new__(Message, m)\n\t            new_self_obj.__init__(m)\n\t            return new_self_obj\n", "        return ciallo\n\t    @overload\n\t    @classmethod\n\t    def grace(cls):...\n\t    @overload\n\t    @classmethod\n\t    def grace(cls, _nickname:str, /):...\n\t    @overload\n\t    @classmethod\n\t    def grace(cls, _nickname:str, _cmd:list, /):...\n", "    @classmethod\n\t    def grace(cls, _nickname = None, _cmd = None):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _nickname: str | None = None\n\t            _cmd: list | None = None\n\t        ```\n\t        \"\"\"\n\t        assert _nickname == None or isinstance(_nickname, str)\n", "        assert _cmd == None or isinstance(_cmd, list)\n\t        def _decorator(f):\n\t            assert getattr(f.__code__, 'co_argcount', None) in [0, 1, 3]\n\t            assert getattr(f.__code__, 'co_posonlyargcount', None) == 0\n\t            assert getattr(f.__code__, 'co_kwonlyargcount', None) == 0\n\t            if getattr(f.__code__, 'co_argcount', None) == 0:\n\t                async def decorator(): await f()\n\t            elif getattr(f.__code__, 'co_argcount', None) == 1:\n\t                async def decorator(rev:dict): _rev = Message(rev) ; await f(_rev)\n\t            elif getattr(f.__code__, 'co_argcount', None) == 3:\n", "                async def decorator(rev:dict):\n\t                    msg_type:str = 'group' if 'group_id' in rev else 'private'\n\t                    qq:str = str(rev['user_id']) if 'user_id' in rev else ''\n\t                    group_id = str(rev['group_id']) if 'group_id' in rev else ''\n\t                    num_type:str = qq if msg_type == 'private' else group_id\n\t                    _rev = Message(rev)\n\t                    await f(msg_type, num_type, _rev)\n\t            None != _nickname and setattr(decorator, '__nickname__', _nickname)\n\t            None != _cmd and setattr(decorator, '__cmd__', _cmd)\n\t            return decorator\n", "        return _decorator\n\t    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, _equal:list, /) -> bool:...\n\t    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, _equal:str, /) -> bool:...\n\t    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, *, _search:str) -> bool:...\n", "    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, *, _match:str) -> bool:...\n\t    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, *, _fullmatch:str) -> bool:...\n\t    @overload\n\t    @classmethod\n\t    def match(cls, _matched:str, _equal = None, /, *,\n\t        _search = None, _match = None, _fullmatch = None,\n", "    ) -> bool:...\n\t    @classmethod\n\t    def match(cls, _matched:str, _equal = None,\n\t        _search = None, _match = None, _fullmatch = None,\n\t    ) -> bool:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _matched:str\n\t            _equal:str | list | None\n", "            _search:str | None   :(re.search(_search, _matched))\n\t            _match:str | None   :(re.match(_match, _matched))\n\t            _fullmatch:str | None   :(re.fullmatch(_fullmatch, _matched))\n\t        ```\n\t        Returns:\n\t        ```\n\t            bool   :any((\n\t                _equal((_matched == _equal) or (_matched in _equal)),\n\t                re.search(_search, _matched),\n\t                re.match(_match, _matched),\n", "                re.fullmatch(_fullmatch, _matched)\n\t            ))\n\t        ```\n\t        \"\"\"\n\t        def _(_matched, __equal = _equal,\n\t            __search = _search, __match = _match, __fullmatch = _fullmatch,\n\t        ) -> bool:\n\t            if isinstance(__equal, str): __equal = (_matched == __equal)\n\t            if isinstance(__equal, list): __equal = (_matched in __equal)\n\t            if __search == None: __search = False\n", "            else: __search = re.search(__search, _matched)\n\t            if __match == None: __match = False\n\t            else: __match = re.match(__match, _matched)\n\t            if __fullmatch == None: __fullmatch = False\n\t            else: __fullmatch = re.fullmatch(__fullmatch, _matched)\n\t            return any((__equal, __search, __match, __fullmatch))\n\t        if inspect.getfullargspec(_) not in cls.fullargspec_tuple_list:\n\t            cls.pattern_function_list.append(_)\n\t            cls.fullargspec_tuple_list.append(inspect.getfullargspec(_))\n\t        try: assert isinstance(_matched, (str, int))\n", "        except AssertionError: return False\n\t        assert _equal == None or isinstance(_equal, (str, list))\n\t        assert _search == None or isinstance(_search, str)\n\t        assert _match == None or isinstance(_match, str)\n\t        assert _fullmatch == None or isinstance(_fullmatch, str)\n\t        if isinstance(_equal, str): _equal = (_matched == _equal)\n\t        if isinstance(_equal, list): _equal = (_matched in _equal)\n\t        if _search == None: _search = False\n\t        else: _search = re.search(_search, _matched)\n\t        if _match == None: _match = False\n", "        else: _match = re.match(_match, _matched)\n\t        if _fullmatch == None: _fullmatch = False\n\t        else: _fullmatch = re.fullmatch(_fullmatch, _matched)\n\t        return any((_equal, _search, _match, _fullmatch))\n\t    @classmethod\n\t    def compat_msg(cls, _msg:str, _msg_type:str, _rev) -> str:\n\t        \"\"\"\n\t        Make the messages to be sent compatible with\n\t        group chats and private chats\n\t        Args:\n", "        ```\n\t            _msg:str\n\t            _msg_type:str\n\t            _rev: dict | 'Message'\n\t        ```\n\t        \"\"\"\n\t        return compat_msg(_msg, _msg_type, _rev)\n\t    @overload\n\t    @classmethod\n\t    def forward_msg(cls, name:str, uin:int, msg_list:list, /) -> list:...\n", "    @overload\n\t    @classmethod\n\t    def forward_msg(cls, name:int, uin:str, msg_list:list, /) -> list:...\n\t    @overload\n\t    @classmethod\n\t    def forward_msg(cls, name:str, uin:str, msg_list:list, /) -> list:...\n\t    @overload\n\t    @classmethod\n\t    def forward_msg(cls, name:int, uin:int, msg_list:list, /) -> list:...\n\t    @classmethod\n", "    def forward_msg(cls, name, uin, msg_list:list) -> list:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            name:str | int\n\t            uin:str | int\n\t            msg_list:list[str]\n\t        ```\n\t        \"\"\"\n\t        return forward_msg(name, uin, msg_list)\n", "    @classmethod\n\t    def is_group_admin(cls, _message:'Message') -> bool:\n\t        return is_group_admin(_message)\n\t    @classmethod\n\t    def is_bot_admin(cls, _message:'Message') -> bool:\n\t        return is_bot_admin(_message)\n\t    @classmethod\n\t    def get_current_path(cls, _file:str):\n\t        \"\"\"`_file` should be `__file__`\"\"\"\n\t        return get_current_path(_file)\n", "class schedule:\n\t    scheduled_list:list = []\n\t    __slots__ = (\n\t        \"__awtstart__\", \"__awtwait__\", \"__awtdecline__\", \"__death__\",\n\t        \"timer\", \"counter\",\n\t        \"all_rev_list\", \"special_rev_list\", \"exc_rev_list\",\n\t        \"former_rev\",\n\t        \"self_id\", \"msg_type\", \"num_type\", \"user_id\", \"group_id\", \"msg_id\",\n\t    )\n\t    def __init__(self, _awtstart = ..., _awtwait = ..., _awtdecline = ...):\n", "        self.timer = 666\n\t        self.counter = 0\n\t        self.all_rev_list = []\n\t        self.special_rev_list = []\n\t        self.exc_rev_list = []\n\t        self.__death__ = self.__death_timer__\n\t        self.__awtwait__ = self.__forever__\n\t        self.__awtdecline__ = self.__forever__\n\t        if _awtstart != ...: self.__awtstart__ = _awtstart\n\t        if _awtwait != ...: self.__awtwait__ = _awtwait\n", "        if _awtdecline != ...: self.__awtdecline__ = _awtdecline\n\t    async def __forever__(): True and ... or False ; lambda:... ; return ; raise\n\t    __forever__ = staticmethod(__forever__)\n\t    async def __death_timer__(self): await asyncio.sleep(self.timer) ; raise RuntimeError\n\t    async def __run__(self):\n\t        self.scheduled_list.append(self)\n\t        if 0 == getattr(self.__awtstart__.__code__, 'co_argcount', None):\n\t            task_tuple = (asyncio.create_task(self.__awtstart__()), )\n\t        elif 1 == getattr(self.__awtstart__.__code__, 'co_argcount', None):\n\t            task_tuple = (asyncio.create_task(self.__awtstart__(self.former_rev)), )\n", "        else:\n\t            task_tuple = (\n\t                asyncio.create_task(self.__awtstart__(\n\t                    self.msg_type, self.num_type, self.former_rev\n\t                )),\n\t            )\n\t        if 0 == getattr(self.__awtwait__.__code__, 'co_argcount', None):\n\t            task_tuple += (asyncio.create_task(self.__awtwait__()), )\n\t        elif 1 == getattr(self.__awtwait__.__code__, 'co_argcount', None):\n\t            task_tuple += (asyncio.create_task(self.__awtwait__(self.former_rev)), )\n", "        else:\n\t            task_tuple += (\n\t                asyncio.create_task(self.__awtwait__(\n\t                    self.msg_type, self.num_type, self.former_rev\n\t                )),\n\t            )\n\t        if 0 == getattr(self.__awtdecline__.__code__, 'co_argcount', None):\n\t            task_tuple += (asyncio.create_task(self.__awtdecline__()), )\n\t        elif 1 == getattr(self.__awtdecline__.__code__, 'co_argcount', None):\n\t            task_tuple += (asyncio.create_task(self.__awtdecline__(self.former_rev)), )\n", "        else:\n\t            task_tuple += (\n\t                asyncio.create_task(self.__awtdecline__(\n\t                    self.msg_type, self.num_type, self.former_rev\n\t                )),\n\t            )\n\t        task_tuple += (asyncio.create_task(self.__death__()), )\n\t        try: await asyncio.wait(task_tuple, return_when = 'FIRST_EXCEPTION')\n\t        finally:\n\t            if self in self.scheduled_list: self.scheduled_list.remove(self)\n", "            del self\n\t    @classmethod\n\t    def _is_legal(cls, _coro = ...) -> bool:\n\t        return all((\n\t            getattr(_coro.__code__, \"co_flags\", None) in [147, 195],\n\t            getattr(_coro.__code__, 'co_argcount', None) in [0, 1, 3],\n\t            getattr(_coro.__code__, 'co_posonlyargcount', None) == 0,\n\t            getattr(_coro.__code__, 'co_kwonlyargcount', None) == 0,\n\t        ))\n\t    def awtstart(self, _coro = ...) -> 'schedule':\n", "        assert self._is_legal(_coro) ; self.__awtstart__ = _coro ; return self\n\t    def awtwait(self, _coro = ...) -> 'schedule':\n\t        assert self._is_legal(_coro) ; self.__awtwait__ = _coro ; return self\n\t    def awtdecline(self, _coro = ...) -> 'schedule':\n\t        assert self._is_legal(_coro) ; self.__awtdecline__ = _coro ; return self\n\t    async def start(self, _former_rev:'Message' = Message({})):\n\t        self.former_rev = _former_rev\n\t        self.self_id = _former_rev.self_id\n\t        self.msg_type = _former_rev.msg_type\n\t        self.num_type = _former_rev.num_type\n", "        self.user_id = _former_rev.user_id\n\t        self.group_id = _former_rev.group_id\n\t        self.msg_id = _former_rev.msg_id\n\t        await self.__run__()\n\t    async def cancel(self): raise RuntimeError\n\t    async def forever(self): self.__death__ = self.__forever__\n\t    @classmethod\n\t    def send_rev(cls, _rev:dict):\n\t        rev = Message(_rev)\n\t        _bool_list:list = [_(rev.msg) for _ in ciallo.pattern_function_list]\n", "        if cls.scheduled_list != []:\n\t            _:'schedule'\n\t            for _ in cls.scheduled_list:\n\t                if _bool_list.count(False) == len(_bool_list):\n\t                    if all((\n\t                        None != rev.msg, _.self_id == rev.self_id,\n\t                        _.user_id == rev.user_id, _.group_id == rev.group_id,\n\t                    )):\n\t                        _.special_rev_list.append(rev)\n\t                    elif all((\n", "                        None != rev.msg, _.self_id == rev.self_id,\n\t                        _.user_id != rev.user_id, _.group_id == rev.group_id,\n\t                    )):\n\t                        _.exc_rev_list.append(rev)\n\t                    if all((\n\t                        None != rev.msg, _.self_id == rev.self_id,\n\t                    )):\n\t                        _.all_rev_list.append(rev)\n\t    async def awt_all_rev(self) -> 'Message':\n\t        while True:\n", "            if self.all_rev_list != []:\n\t                return self.all_rev_list.pop(0)\n\t            await asyncio.sleep(0.1)\n\t    async def awt_special_rev(self) -> 'Message':\n\t        while True:\n\t            if self.special_rev_list != []:\n\t                return self.special_rev_list.pop(0)\n\t            await asyncio.sleep(0.1)\n\t    async def awt_exc_rev(self) -> 'Message':\n\t        while True:\n", "            if self.exc_rev_list != []:\n\t                return self.exc_rev_list.pop(0)\n\t            await asyncio.sleep(0.1)\n"]}
{"filename": "fnbot/yoshinobot/bot_message.py", "chunked_list": ["from typing import overload\n\tfrom .bot import BotMessage\n\tfrom .bot_insert import *\n\t__all__ = \"Message\",\n\tclass Message(BotMessage):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        _rev:dict = {}\n\t    ```\n", "    \"\"\"\n\t    __slots__ = (\n\t        \"rev\",\n\t        \"time\", \"self_id\", \"post_type\",\n\t        \"message_type\", \"notice_type\", \"request_type\",\n\t        \"card_new\", \"card_old\", \"client\", \"comment\", \"duration\", \"file\",\n\t        \"flag\", \"font\", \"group_id\", \"honor_type\", \"message\", \"message_id\",\n\t        \"online\", \"operator_id\", \"raw_message\", \"sender_id\", \"sub_type\",\n\t        \"target_id\", \"user_id\", \"sender\",\n\t        \"sender_age\", \"sender_nickname\", \"sender_sex\", \"sender_user_id\",\n", "        \"sender_group_id\",\n\t        \"sender_area\", \"sender_card\", \"sender_level\", \"sender_role\",\n\t        \"sender_title\",\n\t    )\n\t    @overload\n\t    def __init__(self, _rev:dict, /): ...\n\t    def __init__(self, _rev:dict = {}):\n\t        if None == _rev: _rev = {}\n\t        assert isinstance(_rev, dict)\n\t        self.rev = _rev\n", "        self.time = _rev.get('time', None)\n\t        self.self_id = _rev.get('self_id', None)\n\t        self.post_type = _rev.get('post_type', None)\n\t        self.message_type = _rev.get('message_type', None)\n\t        self.notice_type = _rev.get('notice_type', None)\n\t        self.request_type = _rev.get('request_type', None)\n\t        self.card_new = _rev.get(\"card_new\", None)\n\t        self.card_old = _rev.get(\"card_old\", None)\n\t        self.client = _rev.get(\"client\", None)\n\t        self.comment = _rev.get(\"comment\", None)\n", "        self.duration = _rev.get(\"duration\", None)\n\t        self.file = _rev.get(\"file\", None)\n\t        self.flag = _rev.get(\"flag\", None)\n\t        self.font = _rev.get('font', None)\n\t        self.group_id = _rev.get('group_id', None)\n\t        self.honor_type = _rev.get(\"honor_type\", None)\n\t        self.message = _rev.get('message', None)\n\t        self.message_id = _rev.get('message_id', None)\n\t        self.online = _rev.get(\"online\", None)\n\t        self.operator_id = _rev.get(\"operator_id\", None)\n", "        self.raw_message = _rev.get(\"raw_message\", None)\n\t        self.sender_id = _rev.get(\"sender_id\", None)\n\t        self.sub_type = _rev.get('sub_type', None)\n\t        self.target_id = _rev.get(\"target_id\", None)\n\t        self.user_id = _rev.get('user_id', None)\n\t        self.sender:dict = _rev.get('sender', {})\n\t        # sender (in private or group)\n\t        self.sender_age = self.sender.get('age', None)\n\t        self.sender_nickname = self.sender.get('nickname', None)\n\t        self.sender_sex = self.sender.get('sex', None)\n", "        self.sender_user_id = self.sender.get('user_id', None)\n\t        # sender (only in group)\n\t        self.sender_area = self.sender.get('area', None)\n\t        self.sender_card = self.sender.get('card', None)\n\t        self.sender_level = self.sender.get('level', None)\n\t        self.sender_role = self.sender.get('role', None)\n\t        self.sender_title = self.sender.get('title', None)\n\t        # sender (only in temp)\n\t        self.sender_group_id = self.sender.get('group_id', None)\n\t    @property\n", "    def msg_type(self) -> str:\n\t        if self.group_id != None: return self.message_type\n\t        if self.group_id == None: return 'private'\n\t    @property\n\t    def num_type(self):\n\t        if self.group_id != None: return self.group_id\n\t        if self.group_id == None: return self.user_id\n\t    @property\n\t    def msg(self) -> str:\n\t        if self.message == None: return ''\n", "        else: return self.message\n\t    @msg.setter\n\t    def msg(self, _msg:str):\n\t        assert isinstance(_msg, str)\n\t        self.message = _msg\n\t    @property\n\t    def qq(self): return self.user_id\n\t    @property\n\t    def msg_id(self): return self.message_id\n\t    @overload\n", "    @classmethod\n\t    def insert_init(cls):...\n\t    @overload\n\t    @classmethod\n\t    def insert_init(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert_init(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n", "    def insert_init(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n\t    ):...\n\t    @classmethod\n\t    def insert_init(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n", "            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n\t        return InsertInit.manage(_dev, _group, _alive, _num)\n\t    @overload\n\t    @classmethod\n\t    def insert(cls):...\n", "    @overload\n\t    @classmethod\n\t    def insert(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n\t    def insert(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n", "    ):...\n\t    @classmethod\n\t    def insert(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n", "            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n\t        return Insert.manage(_dev, _group, _alive, _num)\n\t    @overload\n\t    @classmethod\n\t    def insert_msg(cls):...\n\t    @overload\n\t    @classmethod\n", "    def insert_msg(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert_msg(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n\t    def insert_msg(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n\t    ):...\n\t    @classmethod\n", "    def insert_msg(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n", "        ```\n\t        \"\"\"\n\t        return InsertMessage.manage(_dev, _group, _alive, _num)\n\t    @overload\n\t    @classmethod\n\t    def insert_private(cls):...\n\t    @overload\n\t    @classmethod\n\t    def insert_private(cls, _dev:list, /):...\n\t    @overload\n", "    @classmethod\n\t    def insert_private(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n\t    def insert_private(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n\t    ):...\n\t    @classmethod\n\t    def insert_private(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n", "    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n", "        return InsertPrivate.manage(_dev, _group, _alive, _num)\n\t    @overload\n\t    @classmethod\n\t    def insert_group(cls):...\n\t    @overload\n\t    @classmethod\n\t    def insert_group(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert_group(cls, *, _bool:bool):...\n", "    @overload\n\t    @classmethod\n\t    def insert_group(cls,\n\t        _dev:list = [], _group:list = [], _bool:bool = True, _num:int = 0,\n\t    ):...\n\t    @classmethod\n\t    def insert_group(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n", "        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n\t        return InsertGroup.manage(_dev, _group, _alive, _num)\n\t    @overload\n", "    @classmethod\n\t    def insert_notice(cls):...\n\t    @overload\n\t    @classmethod\n\t    def insert_notice(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert_notice(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n", "    def insert_notice(cls,\n\t        _dev:list = [], _notice:list = [], _bool:bool = True, _num:int = 0,\n\t    ):...\n\t    @classmethod\n\t    def insert_notice(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n", "            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n\t            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n\t        return InsertNotice.manage(_dev, _group, _alive, _num)\n\t    @overload\n\t    @classmethod\n\t    def insert_request(cls):...\n", "    @overload\n\t    @classmethod\n\t    def insert_request(cls, _dev:list, /):...\n\t    @overload\n\t    @classmethod\n\t    def insert_request(cls, *, _bool:bool):...\n\t    @overload\n\t    @classmethod\n\t    def insert_request(cls,\n\t        _dev:list = [], _requinsert_request:list = [], _bool:bool = True, _num:int = 0,\n", "    ):...\n\t    @classmethod\n\t    def insert_request(cls,\n\t        _dev:list = [], _group:list = [], _alive:bool = True, _num:int = 0,\n\t    ):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            _dev:list[int | str] = []   :The device number you want to add\n\t            _group:list[int | str] = []   :The group number you want to add\n", "            _alive:bool = True   :Default execution\n\t            _num:int = 0   :the message triggering priority\n\t        ```\n\t        \"\"\"\n\t        return InsertRequest.manage(_dev, _group, _alive, _num)\n"]}
{"filename": "fnbot/yoshinobot/msg_tools.py", "chunked_list": ["import os\n\tfrom .platforms import Config\n\tfrom .platforms import Send\n\tfrom .bot_message import Message\n\tdef compat_msg(_msg:str, _msg_type:str, _rev) -> str:\n\t    assert isinstance(_msg, str)\n\t    assert isinstance(_msg_type, str)\n\t    assert isinstance(_rev, (Message, dict))\n\t    assert _msg_type in ['private', 'group']\n\t    if isinstance(_rev, Message): rev_dict:dict = _rev.rev\n", "    if isinstance(_rev, dict): rev_dict:dict = _rev\n\t    if _msg_type == \"private\":\n\t        if _msg.startswith(\"[CQ:at,qq=\"):\n\t            msg = _msg.split(\"]\",1)[-1]\n\t            msg = msg.lstrip(\"\\n\")\n\t            msg = \"@\" + rev_dict['sender']['nickname'] + \"\\n\" + msg\n\t            return msg\n\t        elif _msg.startswith(\"[CQ:reply,id=\"):\n\t            _, __, msg = _msg.split(\"]\", 2)\n\t            msg = msg.split(\"]\", 1)[-1]\n", "            msg = \"@\" + rev_dict['sender']['nickname'] + \"\\n\"+ msg\n\t            msg = _ + \"]\" + __ + \"]\" + msg\n\t            return msg\n\t    else:\n\t        return _msg\n\tdef forward_msg(name, uin, msg_list:list) -> list:\n\t    assert isinstance(name, (str, int))\n\t    assert isinstance(uin, (str, int))\n\t    assert isinstance(msg_list, list)\n\t    _forward_msg = []\n", "    for msg in msg_list:\n\t        _forward_msg.append({\n\t            \"type\": \"node\",\n\t            \"data\": {\n\t                \"name\": str(name),\n\t                \"uin\": str(uin),\n\t                \"content\": msg\n\t            }\n\t        })\n\t    else:\n", "        return _forward_msg\n\tdef is_group_admin(_message:'Message') -> bool:\n\t    assert isinstance(_message, Message)\n\t    self_id = _message.self_id\n\t    group_id = _message.group_id\n\t    user_id = _message.user_id\n\t    if self_id != None and group_id != None and user_id != None:\n\t        role = Send(self_id).get_group_member_info(group_id, user_id)\n\t    else: role = ''\n\t    if 'data' in role: role = role['data']\n", "    if 'role' in role: role = role['role']\n\t    if not isinstance(role, str): role = ''\n\t    return role in ['admin', 'owner']\n\tdef is_bot_admin(_message:'Message') -> bool:\n\t    self_id = _message.self_id\n\t    user_id = _message.user_id\n\t    return any((\n\t        self_id == user_id,\n\t        str(user_id) == str(Config(self_id).super_qq),\n\t        user_id in Config(self_id).admin_list,\n", "    ))\n\tdef get_current_path(_file:str):\n\t    _path = os.path.realpath(_file)\n\t    _path = _path.rstrip(os.path.basename(_file))\n\t    _path = eval(repr(_path).replace('\\\\\\\\','/'))\n\t    _path = str(_path).rstrip('\\\\\\\\').rstrip('/')\n\t    return _path"]}
{"filename": "fnbot/yoshinobot/bot/__init__.py", "chunked_list": ["\"\"\"\n\tyoshino bot\n\t\"\"\"\n\t__all__ = (\n\t    \"BotCiallo\",\n\t    \"BotConfig\", \"BotReceive\", \"BotSend\",\n\t    \"BotInsert\", \"BotMessage\", \"BotPlugin\",\n\t)\n\tclass BotCiallo:\n\t    def __init__(self, self_id = ...):\n", "        \"\"\"\n\t        Args:\n\t        ```\n\t            self_id: 'BotMessage' | dict | int | str | None\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(self_id, (\n\t            BotMessage, dict, int, str, type(None), type(Ellipsis),\n\t        ))\n\t        if isinstance(self_id, (str, int)):\n", "            self.self_id = str(self_id)\n\t        elif isinstance(self_id, dict):\n\t            self.self_id = str(self_id.get('self_id', None))\n\t        elif isinstance(self_id, (BotMessage,)):\n\t            self.self_id = str(getattr(self_id, 'self_id', None))\n\t        else:\n\t            self.self_id = None\n\tclass BotConfig(BotCiallo):\n\t    def __init__(self, _id = None):\n\t        super(BotConfig, self).__init__(_id)\n", "class BotReceive(BotCiallo):\n\t    def __init__(self, _id = None):\n\t        super(BotReceive, self).__init__(_id)\n\tclass BotSend(BotCiallo):\n\t    def __init__(self, _id = None):\n\t        super(BotSend, self).__init__(_id)\n\tclass BotInsert(type):\n\t    def __new__(cls, _name:str, _bases:tuple, _dict:dict):\n\t        return type.__new__(cls, _name, _bases, _dict)\n\t    def __init__(self, _name:str, _bases:tuple, _dict:dict):\n", "        return type.__init__(self, _name, _bases, _dict)\n\tclass BotMessage:\n\t    def __init__(self):\n\t        super(BotMessage, self).__init__()\n\tclass BotPlugin:\n\t    def __init__(self):\n\t        super(BotPlugin, self).__init__()\n"]}
{"filename": "fnbot/yoshinobot/platforms/cq_config.py", "chunked_list": ["import os\n\timport sys\n\timport json\n\tfrom typing import overload\n\timport toml\n\tfrom ..bot import BotConfig\n\t__all__ = ( \"Config\",\n\t            \"load_config_toml\", \"load_config_json\",\n\t            \"load_all_config\", \"reload_config\",\n\t)\n", "def setattr_of_cls(_objcls) -> 'Config':\n\t    if sys.path[0] != '': os.chdir(sys.path[0])\n\t    path_pybot:str = repr(os.getcwd()).replace('\\\\\\\\','/')\n\t    path_pybot:str = eval(path_pybot)\n\t    if path_pybot[1] == \":\":\n\t        disk_letter,disk_path = path_pybot.split(\":\",1)\n\t        path_pybot = disk_letter.upper() + \":\" + disk_path\n\t    setattr(_objcls, 'path_pybot', path_pybot)\n\t    setattr(_objcls, 'cfginfo', {})\n\t    setattr(_objcls, 'cfgfile', {})\n", "    return _objcls\n\t@setattr_of_cls\n\tclass Config(BotConfig):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        self_id: 'Message' | dict | int | str\n\t    ```\n\t    Class Properties:\n\t    ```\n", "        path_pybot: str\n\t        cfginfo: dict{\n\t            'bot_qq':dict,\n\t        }\n\t        cfgfile: dict{\n\t            'toml':['path'],\n\t            'json':['path'],\n\t        }\n\t    ```\n\t    \"\"\"\n", "    path_pybot: str\n\t    cfginfo: dict\n\t    \"\"\"\n\t    ```\n\t    dict{\n\t        'bot_qq':dict,\n\t    }\n\t    ```\n\t    \"\"\"\n\t    cfgfile: dict\n", "    \"\"\"\n\t    ```\n\t    dict{\n\t        'toml':['path'],\n\t        'json':['path'],\n\t    }\n\t    ```\n\t    \"\"\"\n\t    __slots__ = (\n\t        'self_id',\n", "        'host', 'port', 'post', 'bot_qq', 'group_list',\n\t        'nickname', 'super_qq', 'admin_list', 'blackqq_list',\n\t    )\n\t    @overload\n\t    def __init__(self, self_id, /): ...\n\t    def __init__(self, self_id = ...):\n\t        super().__init__(self_id)\n\t        self_cfginfo:dict = self.cfginfo.get(self.self_id, {})\n\t        self.host = self_cfginfo.get('host', None)\n\t        self.port = self_cfginfo.get('port', None)\n", "        self.post = self_cfginfo.get('post', None)\n\t        self.bot_qq = self_cfginfo.get('bot_qq', None)\n\t        self.nickname = self_cfginfo.get('nickname', None)\n\t        self.super_qq = self_cfginfo.get('super_qq', None)\n\t        self.admin_list:list = self_cfginfo.get('admin_list', None)\n\t        self.blackqq_list:list = self_cfginfo.get('blackqq_list', None)\n\t        self.group_list:list = self_cfginfo.get('group_list', None)\n\tdef _is_legal(_config_info:dict) -> bool:\n\t    if not isinstance(_config_info, dict): return False\n\t    return all((\n", "        'host' in _config_info,\n\t        type(_config_info.get('host')) == str,\n\t        'port' in _config_info,\n\t        type(_config_info.get('port')) == int,\n\t        'post' in _config_info,\n\t        type(_config_info.get('post')) == int,\n\t        'bot_qq' in _config_info,\n\t        type(_config_info.get('bot_qq')) == int,\n\t        'group_list' in _config_info,\n\t        type(_config_info.get('group_list')) == list,\n", "    ))\n\tdef _stdize_config_info(_config_info:dict) -> dict:\n\t    host:str = _config_info.get('host', \"127.0.0.1\")\n\t    port:int = _config_info.get('port', 9900)\n\t    post:int = _config_info.get('post', 9901)\n\t    bot_qq:int = _config_info.get('bot_qq', 0)\n\t    group_list:list = _config_info.get('group_list', [])\n\t    nickname:str = _config_info.get('nickname', \"\")\n\t    super_qq:int = _config_info.get('super_qq', 0)\n\t    admin_list:list = _config_info.get('admin_list', [])\n", "    blackqq_list:list = _config_info.get('blackqq_list', [])\n\t    return {\n\t        str(bot_qq):{\n\t            'host':host, 'port':port, 'post':post,\n\t            'bot_qq':bot_qq, 'group_list':group_list,\n\t            'nickname':nickname, 'super_qq':super_qq,\n\t            'admin_list':admin_list, 'blackqq_list':blackqq_list,\n\t        }\n\t    }\n\tdef _load_config(_config_info:dict):\n", "    config_info:dict = {}\n\t    if _is_legal(_config_info):\n\t        config_info.update(_stdize_config_info(_config_info))\n\t    else:\n\t        for v in _config_info.values():\n\t            if _is_legal(v): config_info.update(_stdize_config_info(v))\n\t    cfginfo = getattr(Config, \"cfginfo\", {})\n\t    cfginfo.update(config_info)\n\t    setattr(Config, \"cfginfo\", cfginfo)\n\tdef _to_right_path(_path:str) -> str:\n", "    if _path.startswith(\"./\"):\n\t        _path = _path.lstrip(\"./\").rstrip(\"/\")\n\t        _path = Config.path_pybot + '/' + _path\n\t    return _path\n\tdef load_config_toml(_path:str):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        _path:str\n\t    ```\n", "    Usages:\n\t    ```\n\t        fnbot.load_config_toml(\"./pybot.toml\")\n\t    ```\n\t    \"\"\"\n\t    assert \".toml\" in _path\n\t    _path = _to_right_path(_path)\n\t    if os.path.isfile(_path):\n\t        cfgfile:dict = getattr(Config, \"cfgfile\", {})\n\t        config_file_toml:list = cfgfile.get(\"toml\", [])\n", "        config_file_toml.append(_path)\n\t        cfgfile.update({\"toml\":config_file_toml})\n\t        setattr(Config, \"cfgfile\", cfgfile)\n\tdef load_config_json(_path:str):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        _path:str\n\t    ```\n\t    Usages\n", "    ```\n\t        fnbot.load_config_json(\"./pybot.json\")\n\t    ```\n\t    \"\"\"\n\t    assert \".json\" in _path\n\t    _path = _to_right_path(_path)\n\t    if os.path.isfile(_path):\n\t        cfgfile:dict = getattr(Config, \"cfgfile\", {})\n\t        config_file_json:list = cfgfile.get(\"json\", [])\n\t        config_file_json.append(_path)\n", "        cfgfile.update({\"toml\":config_file_json})\n\tdef load_all_config():\n\t    cfgfile:dict = getattr(Config, \"cfgfile\", {})\n\t    config_file_toml:list = cfgfile.get(\"toml\", [])\n\t    config_file_json:list = cfgfile.get(\"json\", [])\n\t    for _ in config_file_toml:\n\t        with open(_, mode='r', encoding=\"utf-8\") as f:\n\t            config_toml:dict = toml.load(f)\n\t        _load_config(config_toml)\n\t    for _ in config_file_json:\n", "        with open(_, mode='r', encoding=\"utf-8\") as f:\n\t            config_json:dict = json.load(f)\n\t        _load_config(config_json)\n\tdef reload_config() -> bool:\n\t    if Config.cfginfo == {}: return False\n\t    Config.cfginfo.clear()\n\t    load_all_config()\n\t    return True\n"]}
{"filename": "fnbot/yoshinobot/platforms/__init__.py", "chunked_list": ["import time\n\tfrom .cq_config import *\n\tfrom .cq_receive import *\n\tfrom .cq_send import *\n\t__all__ = (\"is_cq_alive\",)\n\t__all__ += ( cq_config.__all__ +\n\t             cq_receive.__all__ +\n\t             cq_send.__all__\n\t)\n\tdef is_cq_alive() -> bool:\n", "    for _ in list(Config.cfginfo.keys()):\n\t        try:\n\t            result = Send(_).get_status()\n\t            if not 'data' in result and result['data']['online']:\n\t                return is_cq_alive()\n\t        except:\n\t            time.sleep(1)\n\t            return is_cq_alive()\n\t    else:\n\t        return True"]}
{"filename": "fnbot/yoshinobot/platforms/cq_send.py", "chunked_list": ["from typing import overload\n\timport requests\n\tfrom ..bot import BotSend\n\tfrom .cq_config import *\n\t__all__ = \"Send\",\n\tclass Send(BotSend):\n\t    \"\"\"\n\t    Args:\n\t    ```\n\t        self_id: 'Message' | dict | int | str = ...\n", "        host:str = ...\n\t        port:int = ...\n\t    ```\n\t    \"\"\"\n\t    __slots__ = ('self_id', 'host', 'port',)\n\t    @overload\n\t    def __init__(self, self_id, /): ...\n\t    @overload\n\t    def __init__(self, *, host:str, port:int): ...\n\t    def __init__(self, self_id = ..., host = ..., port = ...):\n", "        super().__init__(self_id)\n\t        if isinstance(self_id, (type(None), type(Ellipsis))):\n\t            assert isinstance(host, str)\n\t            assert isinstance(port, int)\n\t            self.host = host\n\t            self.port = port\n\t        else:\n\t            self.host = Config(self_id).host\n\t            self.port = Config(self_id).port\n\t    def get_status(self) -> dict:\n", "        \"\"\"get_status\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":{\n\t                \"app_enabled\":true,\n\t                \"app_good\":true,\n\t                \"app_initialized\":true,\n\t                \"good\":true,\n\t                \"online\":true,\n", "                \"plugins_good\":null,\n\t                \"stat\":{\n\t                    \"disconnect_times\":0,\n\t                    \"last_message_time\":0,\n\t                    \"lost_times\":0,\n\t                    \"message_received\":0,\n\t                    \"message_sent\":...,\n\t                    \"packet_lost\":0,\n\t                    \"packet_received\":...,\n\t                    \"packet_sent\":...\n", "                }\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        url = f\"http://{self.host}:{self.port}/get_status\"\n\t        rps = requests.post(url)\n\t        return rps.json()\n", "    def send_private_msg(self, user_id, message:str, group_id = None):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            user_id:str | int\n\t            message:str\n\t            group_id:str | int | None\n\t        ```\n\t        Returns:\n\t        ```\n", "            msg_id:str | None\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n\t        assert isinstance(message, str)\n\t        url = f\"http://{self.host}:{self.port}/send_private_msg\"\n\t        if group_id != None:\n\t            assert isinstance(group_id, (str, int))\n\t            data = {\n\t                'user_id':int(user_id),\n", "                'group_id':int(group_id),\n\t                'message':message,\n\t            }\n\t            rps = requests.post(url,data)\n\t            if rps.json()[\"status\"] == \"ok\":\n\t                msg_id = rps.json()[\"data\"][\"message_id\"]\n\t            else:\n\t                msg_id = None\n\t            return msg_id\n\t        elif group_id == None:\n", "            data = {\n\t                'user_id':int(user_id),\n\t                'message':message,\n\t            }\n\t            rps = requests.post(url,data)\n\t            if rps.json()[\"status\"] == \"ok\":\n\t                msg_id = rps.json()[\"data\"][\"message_id\"]\n\t            else:\n\t                msg_id = None\n\t            return msg_id\n", "    def send_msg(self, msg_type:str, num_type, msg):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            msg_type:str   :('private' or 'group')\n\t            num_type: str | int\n\t            msg: str | int\n\t        ```\n\t        Returns:\n\t        ```\n", "            msg_id:int | None\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(msg_type, str)\n\t        assert msg_type in ['private', 'group']\n\t        assert isinstance(num_type, (str, int))\n\t        assert isinstance(msg, (str,int))\n\t        url = f\"http://{self.host}:{self.port}/send_msg\"\n\t        if msg_type == \"private\":\n\t            data = {\n", "                'message_type':msg_type,\n\t                'user_id':int(num_type),\n\t                'message':msg,\n\t            }\n\t            rps = requests.post(url,data)\n\t            if rps.json()[\"status\"] == \"ok\":\n\t                msg_id = rps.json()[\"data\"][\"message_id\"]\n\t            else:\n\t                msg_id = None\n\t            return msg_id\n", "        elif msg_type == \"group\":\n\t            data = {\n\t                'message_type':msg_type,\n\t                'group_id':int(num_type),\n\t                'message':msg,\n\t            }\n\t            rps = requests.post(url,data)\n\t            if rps.json()[\"status\"] == \"ok\":\n\t                msg_id = rps.json()[\"data\"][\"message_id\"]\n\t            else:\n", "                msg_id = None\n\t            return msg_id\n\t    def send_forward_msg(self, msg_type:str, num_type, msg:list):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            msg_type:str   :('private' or 'group')\n\t            num_type:str | int\n\t            msg:list\n\t        ```\n", "        Returns:\n\t        ```\n\t            msg_id:int | None\n\t        \"\"\"\n\t        assert isinstance(msg_type, str)\n\t        assert msg_type in ['private', 'group']\n\t        assert isinstance(num_type, (str, int))\n\t        assert isinstance(msg, list)\n\t        if msg_type == 'group':\n\t            return self.send_group_forward_msg(num_type, msg)\n", "        else: return self.send_private_forward_msg(num_type, msg)\n\t    def send_private_forward_msg(self, user_id, messages:list):\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            user_id:str | int\n\t            messages:list\n\t        ```\n\t        Returns:\n\t        ```\n", "            msg_id:int | None\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n\t        assert isinstance(messages, list)\n\t        data = {\n\t            'user_id':int(user_id),\n\t            'messages':messages,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/send_private_forward_msg\"\n", "        rps = requests.post(url,json=data)\n\t        if rps.json()[\"status\"] == \"ok\":\n\t            msg_id = rps.json()[\"data\"][\"message_id\"]\n\t        else:\n\t            msg_id = None\n\t        return msg_id\n\t    def send_group_forward_msg(self, group_id, messages:list):\n\t        \"\"\"\n\t        Args:\n\t        ```\n", "            group_id:str | int\n\t            messages:list\n\t        ```\n\t        Returns:\n\t        ```\n\t            msg_id:int | None\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(group_id, (str, int))\n\t        assert isinstance(messages, list)\n", "        data = {\n\t            'group_id':int(group_id),\n\t            'messages':messages,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/send_group_forward_msg\"\n\t        rps = requests.post(url,json=data)\n\t        if rps.json()[\"status\"] == \"ok\":\n\t            msg_id = rps.json()[\"data\"][\"message_id\"]\n\t        else:\n\t            msg_id = None\n", "        return msg_id\n\t    def delete_msg(self, message_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            message_id:int | str\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n", "            \"data\":null,\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        or\n\t        {\n\t            \"data\":null,\n\t            \"msg\":\"MESSAGE_NOT_FOUND\",\n\t            \"retcode\":100,\n\t            \"status\":\"failed\",\n", "            \"wording\":\"消息不存在\"\n\t        }\n\t        \"\"\"\n\t        assert isinstance(message_id, (str, int))\n\t        data = {\n\t            'message_id':int(message_id)\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/delete_msg\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n", "    def get_msg(self, message_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            message_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":{\n", "                \"group\":true,\n\t                \"group_id\":...,\n\t                \"message\":\"...\",\n\t                \"message_id\":...,\n\t                \"message_id_v2\":\"...\",\n\t                \"message_seq\":...,\n\t                \"message_type\":\"group\",\n\t                \"real_id\":...,\n\t                \"sender\":{\n\t                    \"nickname\":\"...\",\n", "                    \"user_id\":...\n\t                },\n\t                \"time\":...\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        or\n\t        {\n\t            \"data\":{\n", "                \"group\":false,\n\t                \"message\":\"...\",\n\t                \"message_id\":...,\n\t                \"message_id_v2\":\"...\",\n\t                \"message_seq\":...,\n\t                \"message_type\":\"private\",\n\t                \"real_id\":...,\n\t                \"sender\":{\n\t                    \"nickname\":\"...\",\n\t                    \"user_id\":...\n", "                },\n\t                \"time\":...\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(message_id, (str, int))\n\t        data = {\n", "            'message_id':int(message_id)\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/get_msg\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def set_group_kick(self,\n\t        group_id, user_id, reject_add_request:bool = False\n\t    ) -> dict:\n\t        \"\"\"\n\t        Args:\n", "        ```\n\t            group_id:str | int\n\t            user_id:str | int\n\t            reject_add_request:bool\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":null,\n\t            \"retcode\":0,\n", "            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n\t        assert isinstance(group_id, (str, int))\n\t        assert isinstance(reject_add_request, bool)\n\t        data = {\n\t            'group_id':int(group_id),\n\t            'user_id':int(user_id),\n", "            'reject_add_request':reject_add_request,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/set_group_kick\"\n\t        rps = requests.post(url,json=data)\n\t        return rps.json()\n\t    def set_group_ban(self, group_id, user_id, duration:int = 60) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            group_id:str | int\n", "            user_id:str | int\n\t            duration:int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":null,\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n", "        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n\t        assert isinstance(group_id, (str, int))\n\t        assert isinstance(duration, int)\n\t        data = {\n\t            'group_id':int(group_id),\n\t            'user_id':int(user_id),\n\t            'duration':str(duration),\n\t        }\n", "        url = f\"http://{self.host}:{self.port}/set_group_ban\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def set_group_card(self, group_id, user_id, card:str) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            group_id:str | int\n\t            user_id:str | int\n\t            card:str\n", "        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":null,\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n", "        assert isinstance(group_id, (str, int))\n\t        assert isinstance(user_id, (str, int))\n\t        assert isinstance(card, str)\n\t        data = {\n\t            'group_id':int(group_id),\n\t            'user_id':int(user_id),\n\t            'card':card,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/set_group_card\"\n\t        rps = requests.post(url,data)\n", "        return rps.json()\n\t    def set_group_leave(self, group_id, is_dismiss:bool = False) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            group_id:str | int\n\t            is_dismiss:bool\n\t        ```\n\t        Returns:\n\t        ```\n", "        {\n\t            \"data\":null,\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(group_id, (str, int))\n\t        assert isinstance(is_dismiss, bool)\n\t        data = {\n", "            'group_id':int(group_id),\n\t            'is_dismiss':is_dismiss,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/set_group_leave\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def get_stranger_info(self, user_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n", "            user_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":{\n\t                \"age\":...,\n\t                \"level\":...,\n\t                \"login_days\":...,\n\t                \"nickname\":\"...\",\n", "                \"qid\":\"...\",\n\t                \"sex\":\"...\",\n\t                \"user_id\":...\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n", "        data = {\n\t            'user_id':int(user_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/get_stranger_info\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def get_friend_list(self) -> dict:\n\t        \"\"\"\n\t        Returns:\n\t        ```\n", "        {\n\t            \"data\":[\n\t                {\n\t                    \"nickname\":\"babyQ\",\n\t                    \"remark\":\"babyQ\",\n\t                    \"user_id\":66600000\n\t                },\n\t                ...\n\t            ],\n\t            \"retcode\":0,\n", "            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        url = f\"http://{self.host}:{self.port}/get_friend_list\"\n\t        rps = requests.post(url)\n\t        return rps.json()\n\t    def delete_friend(self, friend_id) -> dict:\n\t        \"\"\"?\n\t        Args:\n", "        ```\n\t            friend_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":null,\n\t            \"msg\":\"FRIEND_NOT_FOUND\",\n\t            \"retcode\":100,\n\t            \"status\":\"failed\",\n", "            \"wording\":\"好友不存在\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(friend_id, (str, int))\n\t        data = {\n\t            'friend_id':int(friend_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/delete_friend\"\n\t        rps = requests.post(url,json=data)\n", "        return rps.json()\n\t    def get_group_info(self, group_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            group_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n", "            \"data\":{\n\t                \"group_create_time\":0,\n\t                \"group_id\":...,\n\t                \"group_level\":0,\n\t                \"group_name\":\"...\",\n\t                \"max_member_count\":...,\n\t                \"member_count\":...\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n", "        }\n\t        ```\n\t        Others:\n\t            `https://p.qlogo.cn/gh/{group_id}/{group_id}/100`\n\t        \"\"\"\n\t        assert isinstance(group_id, (str, int))\n\t        data = {\n\t            'group_id':int(group_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/get_group_info\"\n", "        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def get_group_list(self) -> dict:\n\t        \"\"\"\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":[\n\t                {\n\t                    \"group_create_time\":0,\n", "                    \"group_id\":...,\n\t                    \"group_level\":0,\n\t                    \"group_name\":\"...\",\n\t                    \"max_member_count\":200,\n\t                    \"member_count\":...\n\t                },\n\t                ...\n\t            ],\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n", "        }\n\t        ```\n\t        \"\"\"\n\t        url = f\"http://{self.host}:{self.port}/get_group_list\"\n\t        rps = requests.post(url)\n\t        return rps.json()\n\t    def get_group_member_info(self, group_id, user_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n", "            group_id:str | int\n\t            user_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":{\n\t                \"age\":0,\n\t                \"area\":\"\",\n\t                \"card\":\"\",\n", "                \"card_changeable\":false,\n\t                \"group_id\":...,\n\t                \"join_time\":...,\n\t                \"last_sent_time\":...,\n\t                \"level\":\"...\",\n\t                \"nickname\":\"...\",\n\t                \"role\":\"...\",\n\t                \"sex\":\"...\",\n\t                \"shut_up_timestamp\":0,\n\t                \"title\":\"\",\n", "                \"title_expire_time\":0,\n\t                \"unfriendly\":false,\n\t                \"user_id\":...\n\t            },\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(user_id, (str, int))\n", "        assert isinstance(group_id, (str, int))\n\t        data = {\n\t            'group_id':int(group_id),\n\t            'user_id':int(user_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/get_group_member_info\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def get_group_member_list(self, group_id) -> dict:\n\t        \"\"\"\n", "        Args:\n\t        ```\n\t            group_id:str | int\n\t        ```\n\t        Returns:\n\t        ```\n\t        {\n\t            \"data\":[\n\t                {\n\t                    \"age\":0,\n", "                    \"area\":\"\",\n\t                    \"card\":\"\",\n\t                    \"card_changeable\":false,\n\t                    \"group_id\":...,\n\t                    \"join_time\":...,\n\t                    \"last_sent_time\":...,\n\t                    \"level\":\"...\",\n\t                    \"nickname\":\"...\",\n\t                    \"role\":\"...\",\n\t                    \"sex\":\"...\",\n", "                    \"shut_up_timestamp\":0,\n\t                    \"title\":\"\",\n\t                    \"title_expire_time\":0,\n\t                    \"unfriendly\":false,\n\t                    \"user_id\":...\n\t                },...\n\t            ],\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n", "        ```\n\t        \"\"\"\n\t        assert isinstance(group_id, (str, int))\n\t        data = {\n\t            'group_id':int(group_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/get_group_member_list\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n\t    def set_friend_add_request(self,\n", "        flag:str, approve:bool, remark:str = '',\n\t    ) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            flag:str\n\t            approve:bool\n\t            remark:str\n\t        ```\n\t        Returns:\n", "        ```\n\t        {'data': None, 'retcode': 0, 'status': 'ok'}\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(flag, str)\n\t        assert isinstance(approve, bool)\n\t        assert isinstance(remark, str)\n\t        data = {\n\t            'flag':flag,\n\t            'approve':approve,\n", "            'remark':remark,\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/set_friend_add_request\"\n\t        rps = requests.post(url,json=data)\n\t        return rps.json()\n\t    def set_group_add_request(self,\n\t        flag:str, sub_type:str, approve:bool, reason = None,\n\t    ) -> dict:\n\t        \"\"\"\n\t        Args:\n", "        ```\n\t            flag:str\n\t            sub_type:str   :('add' or 'invite')\n\t            approve:bool\n\t            reason:str | bool\n\t        ```\n\t        Returns:\n\t        ```\n\t        {'data': None, 'retcode': 0, 'status': 'ok'}\n\t        ```\n", "        \"\"\"\n\t        assert isinstance(flag, str)\n\t        assert isinstance(sub_type, str)\n\t        assert isinstance(approve, bool)\n\t        assert sub_type in ['add', 'invite']\n\t        data = {\n\t            'flag':flag,\n\t            'sub_type':sub_type,\n\t            'approve':approve,\n\t            'reason':reason,\n", "        }\n\t        url = f\"http://{self.host}:{self.port}/set_group_add_request\"\n\t        rps = requests.post(url,json=data)\n\t        return rps.json()\n\t    def send_group_sign(self, group_id) -> dict:\n\t        \"\"\"\n\t        Args:\n\t        ```\n\t            group_id:str | int\n\t        ```\n", "        Returns:\n\t        ```\n\t        {\n\t            \"data\":null,\n\t            \"retcode\":0,\n\t            \"status\":\"ok\"\n\t        }\n\t        ```\n\t        \"\"\"\n\t        assert isinstance(group_id, (str, int))\n", "        data = {\n\t            'group_id':int(group_id),\n\t        }\n\t        url = f\"http://{self.host}:{self.port}/send_group_sign\"\n\t        rps = requests.post(url,data)\n\t        return rps.json()\n"]}
{"filename": "fnbot/yoshinobot/platforms/cq_receive.py", "chunked_list": ["import json\n\timport socket\n\timport threading\n\tfrom typing import overload\n\tfrom ..bot import BotReceive\n\tfrom .cq_config import Config\n\t__all__ = ( \"Receive\",\n\t            \"get_rev_msg\", \"run_receive_server\",\n\t)\n\tclass Receive(BotReceive):\n", "    \"\"\"\n\t    Args:\n\t    ```\n\t        self_id: 'Message' | dict | int | str = ...\n\t        host:str = ...\n\t        post:int = ...\n\t    ```\n\t    Class Properties:\n\t    ```\n\t        dev_list: list[self@Receive]\n", "        rev_list: list[dict]\n\t    ```\n\t    \"\"\"\n\t    dev_list:list = []\n\t    \"\"\"`list[self@Receive]`\"\"\"\n\t    rev_list:list = []\n\t    \"\"\"`list[dict]`\"\"\"\n\t    __slots__ = ('self_id', 'host', 'post',)\n\t    @overload\n\t    def __init__(self, self_id, /): ...\n", "    @overload\n\t    def __init__(self, *, host:str, post:int): ...\n\t    def __init__(self, self_id = ..., host = ..., post = ...):\n\t        super().__init__(self_id)\n\t        self.dev_list.append(self)\n\t        if isinstance(self_id, (type(None), type(Ellipsis))):\n\t            assert isinstance(host, str)\n\t            assert isinstance(post, int)\n\t            self.host = host\n\t            self.post = post\n", "        else:\n\t            self.host = Config(self_id).host\n\t            self.post = Config(self_id).post\n\t    def __call__(self):\n\t        botsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\t        header = 'HTTP/1.1 200 OK\\n\\n'\n\t        self._bind(botsocket)\n\t        while True:\n\t            try:\n\t                self._launch(header, botsocket)\n", "            except: ...\n\t    @classmethod\n\t    def _to_json(cls, msg):\n\t        for i in range(len(msg)):\n\t            if msg[i] == \"{\" and msg[-1] == \"\\n\":\n\t                return json.loads(msg[i:])\n\t        return\n\t    def _bind(self, _botsocket):\n\t        try:\n\t            _botsocket.bind((self.host, self.post))\n", "            _botsocket.listen(100)\n\t        except:\n\t            self._bind(_botsocket)\n\t    def _launch(self, _header, _botsocket):\n\t        conn = _botsocket.accept()[0]\n\t        with conn:\n\t            data = conn.recv(16384).decode(encoding='utf-8')\n\t            conn.sendall((_header).encode(encoding='utf-8'))\n\t            rev_dict = self._to_json(data)\n\t        if rev_dict != None: self.rev_list.append(rev_dict)\n", "def get_rev_msg() -> dict:\n\t    if Receive.rev_list != []: return Receive.rev_list.pop(0)\n\t    else: return {}\n\tdef run_receive_server():\n\t    for _ in Config.cfginfo: Receive(_)\n\t    for _ in Receive.dev_list:\n\t        threading.Thread(target=_).start()\n"]}
