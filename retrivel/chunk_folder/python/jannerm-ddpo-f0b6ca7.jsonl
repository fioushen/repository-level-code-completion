{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\tsetup(\n\t    name=\"ddpo\",\n\t    packages=find_packages(),\n\t)\n"]}
{"filename": "ddpo/__init__.py", "chunked_list": ["from . import datasets\n\tfrom . import models\n\tfrom . import training\n\tfrom . import diffusers_patch as patch\n"]}
{"filename": "ddpo/utils/stat_tracking.py", "chunked_list": ["import numpy as np\n\tfrom collections import deque\n\t# ringbuffer version\n\tclass PerPromptStatTracker:\n\t    def __init__(self, buffer_size, min_count):\n\t        self.buffer_size = buffer_size\n\t        self.min_count = min_count\n\t        self.stats = {}\n\t    def update(self, prompts, rewards):\n\t        unique = np.unique(prompts)\n", "        advantages = np.empty_like(rewards)\n\t        for prompt in unique:\n\t            prompt_rewards = rewards[prompts == prompt]\n\t            if prompt not in self.stats:\n\t                self.stats[prompt] = deque(maxlen=self.buffer_size)\n\t            self.stats[prompt].extend(prompt_rewards)\n\t            if len(self.stats[prompt]) < self.min_count:\n\t                mean = np.mean(rewards)\n\t                std = np.std(rewards) + 1e-6\n\t            else:\n", "                mean = np.mean(self.stats[prompt])\n\t                std = np.std(self.stats[prompt]) + 1e-6\n\t            advantages[prompts == prompt] = (prompt_rewards - mean) / std\n\t        return advantages\n\t    def get_stats(self):\n\t        return {\n\t            k: {\"mean\": np.mean(v), \"std\": np.std(v), \"count\": len(v)}\n\t            for k, v in self.stats.items()\n\t        }\n\t# ema decay version\n", "\"\"\"\n\tclass PerPromptStatTracker:\n\t    def __init__(self, ema, min_count):\n\t        self.ema = ema\n\t        self.min_count = min_count\n\t        self.stats = {}\n\t    def update(self, prompts, rewards):\n\t        unique = np.unique(prompts)\n\t        advantages = np.empty_like(rewards)\n\t        for prompt in unique:\n", "            prompt_rewards = rewards[prompts == prompt]\n\t            prompt_mean = np.mean(prompt_rewards)\n\t            prompt_squared_mean = np.mean(prompt_rewards**2)\n\t            if prompt not in self.stats:\n\t                self.stats[prompt] = {\n\t                    \"mean\": prompt_mean,\n\t                    \"squared_mean\": prompt_squared_mean,\n\t                    \"count\": len(prompt_rewards),\n\t                }\n\t            else:\n", "                self.stats[prompt][\"mean\"] = (\n\t                    1 - self.ema\n\t                ) * prompt_mean + self.ema * self.stats[prompt][\"mean\"]\n\t                self.stats[prompt][\"squared_mean\"] = (\n\t                    1 - self.ema\n\t                ) * prompt_squared_mean + self.ema * self.stats[prompt][\n\t                    \"squared_mean\"\n\t                ]\n\t                self.stats[prompt][\"count\"] += len(prompt_rewards)\n\t            if self.stats[prompt][\"count\"] < self.min_count:\n", "                advantages[prompts == prompt] = (\n\t                    prompt_rewards - np.mean(rewards)\n\t                ) / np.std(rewards)\n\t            else:\n\t                advantages[prompts == prompt] = (\n\t                    prompt_rewards - self.stats[prompt][\"mean\"]\n\t                ) / np.sqrt(\n\t                    self.stats[prompt][\"squared_mean\"]\n\t                    - self.stats[prompt][\"mean\"] ** 2\n\t                )\n", "        return advantages\n\t    def get_stats(self):\n\t        return self.stats\n\t\"\"\"\n"]}
{"filename": "ddpo/utils/git_utils.py", "chunked_list": ["import os\n\timport git\n\timport pdb\n\tPROJECT_PATH = os.path.dirname(os.path.realpath(os.path.join(__file__, \"..\", \"..\")))\n\tdef get_repo(path=PROJECT_PATH, search_parent_directories=True):\n\t    repo = git.Repo(path, search_parent_directories=search_parent_directories)\n\t    return repo\n\tdef get_git_rev(*args, **kwargs):\n\t    try:\n\t        repo = get_repo(*args, **kwargs)\n", "        if repo.head.is_detached:\n\t            git_rev = repo.head.object.name_rev\n\t        else:\n\t            git_rev = repo.active_branch.commit.name_rev\n\t    except:\n\t        git_rev = None\n\t    return git_rev\n\tdef git_diff(*args, **kwargs):\n\t    repo = get_repo(*args, **kwargs)\n\t    diff = repo.git.diff()\n", "    return diff\n\tdef save_git_diff(savepath, *args, **kwargs):\n\t    diff = git_diff(*args, **kwargs)\n\t    with open(savepath, \"w\") as f:\n\t        f.write(diff)\n\tif __name__ == \"__main__\":\n\t    git_rev = get_git_rev()\n\t    print(git_rev)\n\t    save_git_diff(\"diff_test.txt\")\n"]}
{"filename": "ddpo/utils/preprocessing.py", "chunked_list": ["import numpy as np\n\timport random\n\timport jax\n\tdef tokenize_captions(\n\t    tokenizer,\n\t    examples,\n\t    field=\"text\",\n\t    is_train=True,\n\t    padding=\"do_not_pad\",\n\t    truncation=True,\n", "):\n\t    captions = []\n\t    for caption in examples[field]:\n\t        if isinstance(caption, str):\n\t            captions.append(caption)\n\t        elif isinstance(caption, (list, np.ndarray)):\n\t            # take a random caption if there are multiple\n\t            captions.append(random.choice(caption) if is_train else caption[0])\n\t        else:\n\t            raise ValueError(\n", "                f\"Caption column `{field}` should contain either strings or lists of strings.\"\n\t            )\n\t    inputs = tokenizer(\n\t        captions,\n\t        max_length=tokenizer.model_max_length,\n\t        padding=padding,\n\t        truncation=truncation,\n\t    )\n\t    input_ids = inputs.input_ids\n\t    return input_ids\n", "def shard(xs, devices=None):\n\t    \"\"\"Helper for pmap to shard a pytree of arrays by local_device_count.\n\t    Args:\n\t        xs: a pytree of arrays.\n\t    Returns:\n\t        A matching pytree with arrays' leading dimensions sharded by the\n\t        local device count.\n\t    \"\"\"\n\t    if devices:\n\t        local_device_count = len(devices)\n", "    else:\n\t        local_device_count = jax.local_device_count()\n\t    return jax.tree_util.tree_map(\n\t        lambda x: x.reshape((local_device_count, -1) + x.shape[1:]), xs\n\t    )\n\tdef unshard(xs):\n\t    return jax.tree_util.tree_map(lambda x: x.reshape((-1,) + x.shape[2:]), xs)\n"]}
{"filename": "ddpo/utils/serialization.py", "chunked_list": ["import functools\n\timport os\n\timport math\n\timport glob\n\timport numpy as np\n\timport pickle\n\timport subprocess\n\timport shlex\n\timport jax\n\timport jax.numpy as jnp\n", "import flax\n\timport matplotlib.pyplot as plt\n\tfrom PIL import Image\n\timport gcsfs\n\timport diffusers\n\timport transformers\n\timport pdb\n\tfrom collections import namedtuple\n\tfrom flax.training.checkpoints import restore_checkpoint\n\tfrom ddpo.diffusers_patch.pipeline_flax_stable_diffusion import (\n", "    FlaxStableDiffusionPipeline,\n\t)\n\tfrom . import filesystem\n\tfrom .timer import Timer\n\tStableModels = namedtuple(\"StableModel\", \"tokenizer text_encoder vae unet\")\n\tStableParams = namedtuple(\"StableModel\", \"vae_params unet_params\")\n\tdef get_repo_path():\n\t    return os.path.join(os.path.dirname(__file__), \"../..\")\n\tdef mkdir(savepath, fname=False):\n\t    \"\"\"\n", "    returns `True` iff `savepath` is created\n\t    \"\"\"\n\t    if fname:\n\t        savepath, _ = os.path.split(savepath)\n\t    if not os.path.exists(savepath):\n\t        os.makedirs(savepath)\n\t        return True\n\t    else:\n\t        return False\n\tdef chmod(path, mode=\"777\"):\n", "    command = f\"sudo chmod -R {mode} {path}\"\n\t    print(f\"[ utils/serialization ] {command}\")\n\t    subprocess.call(shlex.split(command))\n\tdef save_images(images, *savepath, nrow=8):\n\t    savepath = os.path.join(*savepath)\n\t    mkdir(savepath, fname=True)\n\t    n = len(images)\n\t    nrow = min(nrow, n)\n\t    ncol = int(math.ceil(n / nrow))\n\t    fig, axes = plt.subplots(nrow, ncol)\n", "    axes = axes.flatten()\n\t    for i, image in enumerate(images):\n\t        axes[i].imshow(image)\n\t        axes[i].axis(\"off\")\n\t    plt.savefig(savepath)\n\t    plt.close()\n\t    print(f\"[ utils/serialization ] Saved {len(images)} images to {savepath}\")\n\tdef save_image(savepath, x, cache=\"logs\"):\n\t    if isinstance(x, Image.Image):\n\t        img = x\n", "    else:\n\t        x = (x * 255).astype(np.uint8)\n\t        img = Image.fromarray(x)\n\t    if filesystem.is_remote(savepath):\n\t        localpath = os.path.join(cache, savepath.replace(\"gs://\", \"\"))\n\t        mkdir(localpath, fname=True)\n\t        img.save(localpath)\n\t        async_to_bucket(localpath, savepath, recursive=False)\n\t    else:\n\t        img.save(savepath)\n", "def save_gif(img_list, path=\"\"):\n\t    # Transform images from [-1,1] to [0, 255]\n\t    imgs = (\n\t        Image.fromarray(np.array((np.array(i) * 127.5) + 1, np.int32)) for i in img_list\n\t    )\n\t    # Extract first image from iterator\n\t    img = next(imgs)\n\t    # Append the other images and save as GIF\n\t    img.save(\n\t        fp=path, format=\"GIF\", append_images=imgs, save_all=True, duration=200, loop=0\n", "    )\n\tdef save_state(*savepath, state=None):\n\t    savepath = os.path.join(*savepath)\n\t    mkdir(savepath, fname=True)\n\t    print(f\"[ utils/sampling ] Saving state to {savepath}\")\n\t    state_dict = flax.serialization.to_state_dict(state)\n\t    pickle.dump(state_dict, open(savepath, \"wb\"))\n\tdef load_state(*loadpath, state=None):\n\t    loadpath = os.path.join(*loadpath)\n\t    print(f\"[ utils/sampling ] Loading state from {loadpath}\")\n", "    with open(loadpath, \"rb\") as f:\n\t        state_dict = pickle.load(f)\n\t    state = flax.serialization.from_state_dict(state, state_dict)\n\t    return state\n\tdef get_latest_epoch(*loadpath):\n\t    states = glob.glob1(os.path.join(*loadpath), \"*.pkl\")\n\t    latest_epoch = -1\n\t    for state in states:\n\t        epoch = int(state.replace(\".pkl\", \"\"))\n\t        latest_epoch = max(epoch, latest_epoch)\n", "    return latest_epoch\n\tdef load_config(*loadpath):\n\t    loadpath = os.path.join(*loadpath)\n\t    config = pickle.load(open(loadpath, \"rb\"))\n\t    print(f\"[ utils/serialization ] Loaded config from {loadpath}\")\n\t    print(config)\n\t    return config\n\tdef load_model(rng, *loadpath, epoch=\"latest\"):\n\t    model_config = load_config(*loadpath, \"model_config.pkl\")\n\t    if epoch == \"latest\":\n", "        epoch = get_latest_epoch(*loadpath, \"checkpoints\")\n\t    ## initialize model and state\n\t    model, state, rng = model_config(rng)\n\t    ## load checkpoint from disk\n\t    state = load_state(*loadpath, f\"checkpoints/{epoch}.pkl\", state=state)\n\t    return model, state, rng\n\tdef get_serializable(params):\n\t    return jax.device_get(jax.tree_util.tree_map(lambda x: x[0], params))\n\tdef get_dtype(pytree):\n\t    dtypes = [x.dtype for x in jax.tree_util.tree_leaves(pytree)]\n", "    dtypes = list(set(dtypes))\n\t    assert len(dtypes) == 1\n\t    return dtypes[0]\n\tdef is_dtype(pytree, dtype):\n\t    return all([x.dtype == dtype for x in jax.tree_util.tree_leaves(pytree)])\n\tdef to_dtype(pytree, dtype):\n\t    return jax.tree_util.tree_map(lambda x: x.astype(dtype), pytree)\n\tdef load_stable_diffusion(name, dtype=jnp.float32):\n\t    print(\"[ utils/serialization ] Loading stable diffusion...\", end=\"\", flush=True)\n\t    tokenizer = transformers.CLIPTokenizer.from_pretrained(name, subfolder=\"tokenizer\")\n", "    text_encoder = transformers.FlaxCLIPTextModel.from_pretrained(\n\t        name, subfolder=\"text_encoder\", dtype=dtype\n\t    )\n\t    vae, vae_params = diffusers.FlaxAutoencoderKL.from_pretrained(\n\t        name, subfolder=\"vae\", dtype=dtype\n\t    )\n\t    unet, unet_params = diffusers.FlaxUNet2DConditionModel.from_pretrained(\n\t        name, subfolder=\"unet\", dtype=dtype\n\t    )\n\t    stable_models = StableModels(tokenizer, text_encoder, vae, unet)\n", "    stable_params = StableParams(vae_params, unet_params)\n\t    print(\"✓\")\n\t    return stable_models, stable_params\n\tdef save_stable_diffusion(\n\t    savepath,\n\t    tokenizer,\n\t    text_encoder,\n\t    vae,\n\t    unet,\n\t    text_encoder_params,\n", "    vae_params,\n\t    unet_params,\n\t    all_workers=False,\n\t    epoch=None,\n\t):\n\t    # Create the pipeline using using the trained modules and save it.\n\t    scheduler = diffusers.FlaxPNDMScheduler(\n\t        beta_start=0.00085,\n\t        beta_end=0.012,\n\t        beta_schedule=\"scaled_linear\",\n", "        skip_prk_steps=True,\n\t    )\n\t    feature_extractor = transformers.CLIPFeatureExtractor.from_pretrained(\n\t        \"openai/clip-vit-base-patch32\"\n\t    )\n\t    pipeline = diffusers.FlaxStableDiffusionPipeline(\n\t        text_encoder=text_encoder,\n\t        vae=vae,\n\t        unet=unet,\n\t        tokenizer=tokenizer,\n", "        scheduler=scheduler,\n\t        safety_checker=None,\n\t        feature_extractor=feature_extractor,\n\t    )\n\t    mkdir(savepath)\n\t    if epoch is not None:\n\t        savepath = os.path.join(savepath, f\"epoch_{epoch}\")\n\t        mkdir(savepath)\n\t    print(f\"[ utils/serialization ] Saving model to {savepath}\")\n\t    params = {\n", "        \"text_encoder\": get_serializable(text_encoder_params),\n\t        \"vae\": vae_params,\n\t        \"unet\": get_serializable(unet_params),\n\t    }\n\t    process = jax.process_index()\n\t    # if jax.process_index() == 0 or all_workers:\n\t    print(f\"[ utils/serialization ] Saving stable diffusion on process {process}\")\n\t    pipeline.save_pretrained(\n\t        savepath,\n\t        params=params,\n", "        is_main_process=jax.process_index() == 0,\n\t    )\n\t# pretrained_model='duongna/stable-diffusion-v1-4-flax'\n\t# pretrained_model='flax/stable-diffusion-2-1'\n\tdef load_finetuned_stable_diffusion(\n\t    name,\n\t    epoch=\"latest\",\n\t    pretrained_model=\"flax/sd15\",\n\t    dtype=jnp.float32,\n\t    cache=\"cache\",\n", "):\n\t    stable_models, stable_params = load_stable_diffusion(\n\t        pretrained_model,\n\t        dtype,\n\t    )\n\t    tokenizer, text_encoder, vae, unet = stable_models\n\t    if name is not None:\n\t        _, finetuned_params = load_unet(\n\t            name,\n\t            epoch=epoch,\n", "            pretrained_model=pretrained_model,\n\t            dtype=dtype,\n\t            cache=cache,\n\t        )\n\t        unet_params = finetuned_params[\"unet\"]\n\t        unet_params = to_dtype(unet_params, dtype)\n\t        assert get_dtype(stable_params.unet_params) == get_dtype(unet_params)\n\t        stable_params = StableParams(stable_params.vae_params, unet_params)\n\t    return stable_models, stable_params\n\tdef save_unet(savepath, unet_params, epoch=0, all_workers=False, cache=\"logs\"):\n", "    if filesystem.is_remote(savepath):\n\t        local_path = os.path.join(cache, savepath.replace(\"gs://\", \"\"))\n\t    else:\n\t        local_path = savepath\n\t    os.makedirs(local_path, exist_ok=True)\n\t    fullpath = os.path.join(local_path, f\"unet_{epoch}.pkl\")\n\t    print(f\"[ utils/serialization ] Saving unet to {fullpath}\")\n\t    unet_params = get_serializable(unet_params)\n\t    if jax.process_index() == 0 or all_workers:\n\t        with open(fullpath, \"wb\") as f:\n", "            pickle.dump(unet_params, f)\n\t        if filesystem.is_remote(savepath):\n\t            proc = async_to_bucket(local_path, savepath)\n\t            return local_path, proc\n\t    return None, None\n\tdef get_latest_epoch(loadpath):\n\t    loadpath, prefix = os.path.split(loadpath)\n\t    fnames = filesystem.ls(loadpath)\n\t    fnames = [fname for fname in fnames if prefix in fname]\n\t    epochs = [int(fname.split(\"_\")[-1].split(\".pkl\")[0]) for fname in fnames]\n", "    return max(epochs)\n\tdef load_flax_model(loadpath, epoch=\"latest\"):\n\t    timer = Timer()\n\t    if epoch == \"latest\":\n\t        epoch = get_latest_epoch(loadpath)\n\t        print(f\"[ utils/serialization ] Found latest epoch: {epoch}\")\n\t    fullpath = loadpath + f\"_{epoch}.pkl\"\n\t    print(f\"[ utils/serialization ] Loading model from {fullpath}\")\n\t    params = filesystem.unpickle(fullpath)\n\t    print(f\"[ utils/serialization ] Done | {timer():.3f} seconds\")\n", "    return params\n\t# pretrained_model = 'CompVis/stable-diffusion-v1-4'\n\t# pretrained_model = 'flax/stable-diffusion-2-1'\n\tdef load_unet(\n\t    loadpath,\n\t    epoch=\"latest\",\n\t    pretrained_model=\"flax/sd15\",\n\t    dtype=jnp.float32,\n\t    cache=\"cache\",\n\t):\n", "    # revision = 'bf16' if dtype == jnp.bfloat16 else None\n\t    # revision = 'flax'\n\t    revision = None\n\t    print(\n\t        f\"[ utils/serialization ] Downloading pretrained model: {pretrained_model} | \"\n\t        f\"revision: {revision} | dtype: {dtype} | cache: {cache}\"\n\t    )\n\t    pipeline, params = FlaxStableDiffusionPipeline.from_pretrained(\n\t        pretrained_model,\n\t        revision=revision,\n", "        dtype=dtype,\n\t        cache_dir=cache,\n\t    )\n\t    for key in [\"text_encoder\", \"vae\", \"unet\"]:\n\t        if not is_dtype(params[key], dtype):\n\t            loaded_dtype = get_dtype(params[key])\n\t            print(\n\t                f\"[ utils/serialization ] Warning: expected {dtype} \"\n\t                f\"for {key}, got {loaded_dtype}\"\n\t            )\n", "            params[key] = to_dtype(params[key], dtype)\n\t    for key in [\"safety_checker\"]:\n\t        if key in params:\n\t            print(f\"[ utils/serialization ] Warning: removing {key}\")\n\t            del params[key]\n\t    if loadpath is not None and loadpath.startswith(\"flax:\"):\n\t        loadpath = loadpath.replace(\"flax:\", \"\")\n\t        print(f\"[ utils/serialization ] Loading flax checkpoint from {loadpath}\")\n\t        # assert tf.io.gfile.exists(loadpath)\n\t        assert filesystem.exists(loadpath)\n", "        params[\"unet\"] = restore_checkpoint(loadpath, target=params[\"unet\"])\n\t    elif loadpath is not None:\n\t        print(f\"[ utils/serialization ] Loading model from {loadpath}\")\n\t        fullpath = os.path.join(loadpath, \"unet\")\n\t        unet_params = load_flax_model(fullpath, epoch=epoch)\n\t        assert params[\"unet\"].keys() == unet_params.keys()\n\t        params[\"unet\"] = jax.device_put(to_dtype(unet_params, dtype))\n\t    print(\"[ utils/serialization ] ✓\")\n\t    return pipeline, params\n\tdef sync_to_bucket(local_path, remote_path):\n", "    ## TODO: untested\n\t    print(f\"[ utils/serialization ] Syncing {local_path} to {remote_path}\")\n\t    bucket = remote_path.split(\"/\")[0]\n\t    fs = gcsfs.GCSFileSystem(bucket=bucket)\n\t    fs.mkdirs(remote_path, exist_ok=True)\n\t    fs.put(local_path, remote_path, recursive=True)\n\tdef async_to_bucket(local_path, remote_path, recursive=True):\n\t    if remote_path is None or jax.process_index() != 0:\n\t        return\n\t    print(\n", "        f\"[ utils/serialization ] Syncing {local_path} to {remote_path} asynchronously\"\n\t    )\n\t    ## run command from home directory because gsutil doesn't work from mounted nfs\n\t    home = os.path.expanduser(\"~\")\n\t    local_fullpath = os.path.join(os.getcwd(), local_path)\n\t    # remote_path = os.path.join(remote_path, local_path.replace('logs/', ''))\n\t    if recursive:\n\t        command = f\"gsutil -m rsync -r {local_fullpath} {remote_path}\"\n\t    else:\n\t        command = f\"gsutil cp {local_fullpath} {remote_path}\"\n", "    print(f\"[ utils/serialization ] Running command: {command}\")\n\t    proc = subprocess.Popen(shlex.split(command), cwd=home)\n\t    return proc\n\tdef plot_calibration(savepath, Y_dict, ylabel=None, cache=\"logs\"):\n\t    X_plot = sorted(Y_dict.keys())\n\t    Y_plot = [Y_dict[x] for x in X_plot]\n\t    plt.plot(X_plot, Y_plot)\n\t    ax = plt.gca()\n\t    ## grid background\n\t    ax.grid(linestyle=\"-\", linewidth=\"1\", color=\"white\")\n", "    ax.set_facecolor([0.9, 0.9, 0.9])\n\t    ## no ticks on axes\n\t    ax.tick_params(top=\"off\", left=\"off\", right=\"off\", bottom=\"off\")\n\t    ## remove bounding box\n\t    for spine in ax.spines.values():\n\t        spine.set_visible(False)\n\t    plt.ylabel(ylabel)\n\t    plt.xlabel(\"guidance scale\")\n\t    if filesystem.is_remote(savepath):\n\t        localpath = os.path.join(cache, savepath.replace(\"gs://\", \"\"))\n", "        mkdir(localpath, fname=True)\n\t        plt.savefig(localpath)\n\t        async_to_bucket(localpath, savepath, recursive=False)\n\t    else:\n\t        plt.savefig(savepath)\n\tdef load_guidance_scale(loadpath):\n\t    fullpath = os.path.join(loadpath, \"metadata.json\")\n\t    metadata = filesystem.read_json(fullpath)\n\t    guidance_scale = float(metadata[\"guidance_scale\"])\n\t    print(f\"[ utils/serialization ] Loaded guidance scale: {guidance_scale:.2f}\")\n", "    return guidance_scale\n\tdef load_vqa_data(path):\n\t    \"\"\"\n\t    Load VQA prompt data from a text file. Expects the format:\n\t        PROMPT: a wizard washing a car\n\t        SUB Q: what is washing the car?\n\t        SUB A: wizard\n\t        VERB Q: what is the wizard doing?\n\t        VERB A: washing\n\t        OBJ Q: what is the wizard washing?\n", "        OBJ A: car\n\t    and so on. Returns a dict of lists.\n\t    \"\"\"\n\t    ret = {\n\t        \"prompts\": [],\n\t        \"sub_qs\": [],\n\t        \"verb_qs\": [],\n\t        \"obj_qs\": [],\n\t        \"sub_ans\": [],\n\t        \"verb_ans\": [],\n", "        \"obj_ans\": [],\n\t    }\n\t    with open(path, \"r\") as f:\n\t        while True:\n\t            line = f.readline()\n\t            if line == \"\":\n\t                break\n\t            elif line == \"\\n\":\n\t                continue\n\t            assert line.startswith(\"PROMPT: \")\n", "            prompt = line[len(\"PROMPT: \") :].strip()\n\t            ret[\"prompts\"].append(prompt)\n\t            for key in [\"sub\", \"verb\", \"obj\"]:\n\t                line = f.readline()\n\t                assert line.startswith(f\"{key.upper()} Q: \")\n\t                ret[f\"{key}_qs\"].append(line[len(f\"{key.upper()} Q: \") :].strip())\n\t                line = f.readline()\n\t                assert line.startswith(f\"{key.upper()} A: \")\n\t                ret[f\"{key}_ans\"].append(line[len(f\"{key.upper()} A: \") :].strip())\n\t    return ret\n", "@functools.cache\n\tdef load_general_prompts(path):\n\t    dataset = []\n\t    with open(path, \"r\") as f:\n\t        while True:\n\t            line = f.readline()\n\t            if line == \"\":\n\t                break\n\t            elif line == \"\\n\":\n\t                continue\n", "            assert line.startswith(\"PROMPT: \")\n\t            prompt = line[len(\"PROMPT: \") :].strip()\n\t            entry = {\"prompt\": prompt, \"questions\": [], \"answers\": []}\n\t            for key in [\"sub\", \"verb\", \"obj\"]:\n\t                line = f.readline()\n\t                assert line.startswith(f\"{key.upper()} Q: \")\n\t                entry[\"questions\"].append(line[len(f\"{key.upper()} Q: \") :].strip())\n\t                line = f.readline()\n\t                assert line.startswith(f\"{key.upper()} A: \")\n\t                entry[\"answers\"].append(line[len(f\"{key.upper()} A: \") :].strip())\n", "            dataset.append(entry)\n\t    return dataset\n\t@functools.cache\n\tdef load_lines(loadpath):\n\t    \"\"\"\n\t    This loading function expects prompts to be unstructured,\n\t    with one prompt per line, and no questions or answers.\n\t    \"\"\"\n\t    with open(loadpath, \"r\") as f:\n\t        prompts = [line.strip() for line in f.readlines()]\n", "    return prompts\n"]}
{"filename": "ddpo/utils/parser.py", "chunked_list": ["import os\n\timport importlib\n\timport random\n\timport numpy as np\n\timport jax\n\timport torch\n\tfrom tap import Tap\n\timport pdb\n\tfrom .serialization import mkdir\n\tfrom .git_utils import (\n", "    get_git_rev,\n\t    save_git_diff,\n\t)\n\tfrom .logger import init_logging\n\tfrom .filesystem import is_remote\n\tdef set_seed(seed):\n\t    random.seed(seed)\n\t    np.random.seed(seed)\n\t    torch.manual_seed(seed)\n\t    torch.cuda.manual_seed_all(seed)\n", "def watch(args_to_watch):\n\t    def _fn(args):\n\t        exp_name = []\n\t        for key, label in args_to_watch:\n\t            if not hasattr(args, key):\n\t                continue\n\t            val = getattr(args, key)\n\t            if type(val) == dict:\n\t                val = \"_\".join(f\"{k}-{v}\" for k, v in val.items())\n\t            exp_name.append(f\"{label}{val}\")\n", "        exp_name = \"_\".join(exp_name)\n\t        exp_name = exp_name.replace(\"/_\", \"/\")\n\t        exp_name = exp_name.replace(\"(\", \"\").replace(\")\", \"\")\n\t        exp_name = exp_name.replace(\", \", \"-\")\n\t        return exp_name\n\t    return _fn\n\tdef lazy_fstring(template, args):\n\t    ## https://stackoverflow.com/a/53671539\n\t    return eval(f\"f'{template}'\")\n\tclass LazyFn:\n", "    def __init__(self, fn):\n\t        self.fn = fn\n\t    def __call__(self, args):\n\t        return self.fn(args)\n\tclass Parser(Tap):\n\t    def save(self):\n\t        fullpath = os.path.join(self.savepath, \"args.json\")\n\t        print(f\"[ utils/setup ] Saved args to {fullpath}\")\n\t        super().save(fullpath, skip_unpicklable=True)\n\t    def report(self):\n", "        tab = \" \" * 8\n\t        string = f\"[ utils/setup ] Parser [ {self.dataset} ]\"\n\t        for key, val in self._dict.items():\n\t            string += f\"\\n{tab}{key}: {val}\"\n\t        print(string, \"\\n\")\n\t    def parse_args(self, experiment=None):\n\t        args = super().parse_args(known_only=True)\n\t        ## if not loading from a config script, skip the result of the setup\n\t        if not hasattr(args, \"config\"):\n\t            return args\n", "        args = self.read_config(args, experiment)\n\t        self.add_extras(args)\n\t        self.eval_fns(args)\n\t        self.eval_fstrings(args)\n\t        self.get_commit(args)\n\t        self.set_loadbase(args)\n\t        self.generate_exp_name(args)\n\t        self.mkdir(args)\n\t        self.init_logging(args)\n\t        self.set_seed(args)\n", "        self.save_diff(args)\n\t        self.report()\n\t        return args\n\t    def read_config(self, args, experiment):\n\t        \"\"\"\n\t        Load parameters from config file\n\t        \"\"\"\n\t        dataset = args.dataset.replace(\"-\", \"_\")\n\t        print(f\"[ utils/parser ] Reading config: {args.config}:{dataset}:{experiment}\")\n\t        module = importlib.import_module(args.config)\n", "        params = getattr(module, \"base\")[experiment]\n\t        if hasattr(module, dataset):\n\t            print(\n\t                f\"[ utils/parser ] Using overrides | config: {args.config} | dataset: {dataset}\"\n\t            )\n\t            dataset_dict = getattr(module, dataset)\n\t            dataset_common = dataset_dict.get(\"common\", {})\n\t            dataset_overrides = dataset_dict.get(experiment, {})\n\t            params.update(dataset_common)\n\t            params.update(dataset_overrides)\n", "        else:\n\t            print(\n\t                f\"[ utils/parser ] Not using overrides | config: {args.config} | dataset: {dataset}\"\n\t            )\n\t        self._dict = {}\n\t        for key, val in params.items():\n\t            setattr(args, key, val)\n\t            self._dict[key] = val\n\t        return args\n\t    def add_extras(self, args):\n", "        \"\"\"\n\t        Override config parameters with command-line arguments\n\t        \"\"\"\n\t        extras = args.extra_args\n\t        if not len(extras):\n\t            return\n\t        print(f\"[ utils/setup ] Found extras: {extras}\")\n\t        assert (\n\t            len(extras) % 2 == 0\n\t        ), f\"Found odd number ({len(extras)}) of extras: {extras}\"\n", "        for i in range(0, len(extras), 2):\n\t            key = extras[i].replace(\"--\", \"\")\n\t            val = extras[i + 1]\n\t            assert hasattr(\n\t                args, key\n\t            ), f\"[ utils/setup ] {key} not found in config: {args.config}\"\n\t            old_val = getattr(args, key)\n\t            old_type = type(old_val)\n\t            print(f\"[ utils/setup ] Overriding config | {key} : {old_val} --> {val}\")\n\t            if val == \"None\":\n", "                val = None\n\t            elif val == \"latest\":\n\t                val = \"latest\"\n\t            elif old_type in [bool, type(None)]:\n\t                try:\n\t                    val = eval(val)\n\t                except:\n\t                    print(\n\t                        f\"[ utils/setup ] Warning: could not parse {val} (old: {old_val}, {old_type}), using str\"\n\t                    )\n", "            else:\n\t                val = old_type(val)\n\t            setattr(args, key, val)\n\t            self._dict[key] = val\n\t    def eval_fstrings(self, args):\n\t        for key, old in self._dict.items():\n\t            if type(old) is str and old[:2] == \"f:\":\n\t                val = old.replace(\"{\", \"{args.\").replace(\"f:\", \"\")\n\t                new = lazy_fstring(val, args)\n\t                print(f\"[ utils/setup ] Lazy fstring | {key} : {old} --> {new}\")\n", "                setattr(self, key, new)\n\t                self._dict[key] = new\n\t    def eval_fns(self, args):\n\t        for key, old in self._dict.items():\n\t            if isinstance(old, LazyFn):\n\t                new = old(args)\n\t                print(f\"[ utils/setup ] Lazy fn | {key} : {new}\")\n\t                setattr(self, key, new)\n\t                self._dict[key] = new\n\t    def set_seed(self, args):\n", "        if not hasattr(args, \"seed\") or args.seed is None:\n\t            args.seed = np.random.randint(0, int(1e6))\n\t        args.seed = args.seed + jax.process_index()\n\t        print(f\"[ utils/setup ] Setting seed: {args.seed}\")\n\t        set_seed(args.seed)\n\t    def set_loadbase(self, args):\n\t        if hasattr(args, \"loadbase\") and args.loadbase is None:\n\t            print(f\"[ utils/setup ] Setting loadbase: {args.logbase}\")\n\t            args.loadbase = args.logbase\n\t    def generate_exp_name(self, args):\n", "        if not \"exp_name\" in dir(args):\n\t            return\n\t        exp_name = getattr(args, \"exp_name\")\n\t        if callable(exp_name):\n\t            exp_name_string = exp_name(args)\n\t            print(f\"[ utils/setup ] Setting exp_name to: {exp_name_string}\")\n\t            setattr(args, \"exp_name\", exp_name_string)\n\t            self._dict[\"exp_name\"] = exp_name_string\n\t    def mkdir(self, args):\n\t        if \"logbase\" in dir(args) and \"savepath\" in dir(args):\n", "            args.savepath = os.path.join(args.logbase, args.savepath)\n\t            self._dict[\"savepath\"] = args.savepath\n\t            if \"suffix\" in dir(args):\n\t                args.savepath = os.path.join(args.savepath, args.suffix)\n\t            if not is_remote(args.savepath) and mkdir(args.savepath):\n\t                print(f\"[ utils/setup ] Made savepath: {args.savepath}\")\n\t            # self.save()\n\t        for key in [\"loadpath\", \"modelpath\"]:\n\t            if \"logbase\" in dir(args) and key in dir(args):\n\t                if getattr(args, key).startswith(\"/\") or getattr(args, key).startswith(\n", "                    \"gs://\"\n\t                ):\n\t                    ## absolute path\n\t                    continue\n\t                fullpath = os.path.join(args.logbase, getattr(args, key))\n\t                setattr(args, key, fullpath)\n\t                self._dict[key] = fullpath\n\t    def init_logging(self, args):\n\t        if hasattr(args, \"verbose\"):\n\t            verbose = args.verbose\n", "        else:\n\t            verbose = False\n\t        init_logging(\"ddpo\", verbose=verbose)\n\t    def get_commit(self, args):\n\t        args.commit = get_git_rev()\n\t    def save_diff(self, args):\n\t        try:\n\t            save_git_diff(os.path.join(args.savepath, \"diff.txt\"))\n\t        except:\n\t            print(\"[ utils/setup ] WARNING: did not save git diff\")\n"]}
{"filename": "ddpo/utils/logger.py", "chunked_list": ["import logging\n\timport warnings\n\timport numpy as np\n\timport pdb\n\tdef init_logging(name, verbose=False):\n\t    handler = logging.StreamHandler()\n\t    formatter = logging.Formatter(\"[ %(name)s ] %(message)s\")\n\t    handler.setFormatter(formatter)\n\t    logger = logging.getLogger(name)\n\t    logger.addHandler(handler)\n", "    logger.setLevel(logging.INFO)\n\t    logger.propagate = False\n\t    if verbose:\n\t        logging.getLogger(\"jax\").setLevel(logging.INFO)\n\t        logging.getLogger(\"datasets\").setLevel(logging.WARNING)\n\t    else:\n\t        print(\"[ utils/logger ] Suppressing most dependency logging\")\n\t        logging.getLogger(\"jax\").setLevel(logging.WARNING)\n\t        logging.getLogger(\"datasets\").setLevel(logging.ERROR)\n\t        logging.getLogger(\"transformers\").setLevel(logging.ERROR)\n", "        logging.getLogger(\"diffusers\").setLevel(logging.ERROR)\n\t        logging.getLogger(\"tcmalloc\").setLevel(logging.ERROR)\n\t        warnings.simplefilter(action=\"ignore\", category=FutureWarning)\n\t    return logger\n\tclass Masker:\n\t    def __repr__(self):\n\t        return f\"[ {self._name} | {self.p} ]\"\n\t    def mask(self, xs):\n\t        return xs >= self.p\n\tclass StreamingAverage:\n", "    def __init__(self):\n\t        self.n = 0\n\t        self.avg = 0\n\t        self._name = \"streaming_average\"\n\t    def __call__(self, x):\n\t        self.n += 1\n\t        self.avg = self.avg * (self.n - 1) / self.n + x / self.n\n\tclass StreamingPercentile(Masker):\n\t    def __init__(self, q=90, maxsize=5e6):\n\t        self.q = q\n", "        self.xs = np.zeros(int(maxsize))\n\t        self.size = 0\n\t        self._name = f\"streaming_percentile: {q}\"\n\t    def __call__(self, xs):\n\t        if xs.ndim == 2:\n\t            xs = xs.squeeze(axis=-1)\n\t        n = len(xs)\n\t        self.xs[self.size : self.size + n] = xs[:]\n\t        self.size += n\n\t        self.p = np.percentile(self.xs[: self.size], self.q)\n", "        return super().mask(xs)\n\tclass Percentile(Masker):\n\t    def __init__(self, q=90, maxsize=5e6):\n\t        self.q = q\n\t        self._name = f\"percentile: {q}\"\n\t    def __call__(self, xs):\n\t        if xs.ndim == 2:\n\t            xs = xs.squeeze(axis=-1)\n\t        self.p = np.percentile(xs, self.q)\n\t        return super().mask(xs)\n", "class Threshold(Masker):\n\t    def __init__(self, threshold=0.95):\n\t        self.p = threshold\n\t        self._name = f\"threshold: {threshold}\"\n\t    def __call__(self, xs):\n\t        return super().mask(xs)\n\tdef make_masker(mode, param):\n\t    return {\n\t        \"percentile\": Percentile,\n\t        \"streaming_percentile\": StreamingPercentile,\n", "        \"threshold\": Threshold,\n\t    }[mode](param)\n\tif __name__ == \"__main__\":\n\t    import numpy as np\n\t    xs = np.random.randn(1000)\n\t    avg = StreamingAverage()\n\t    for i, x in enumerate(xs):\n\t        avg(x)\n\t        assert np.isclose(avg.avg, xs[: i + 1].mean())\n\t    print(f\"{avg.avg:.5f} | {xs.mean():.5f}\")\n"]}
{"filename": "ddpo/utils/imagenet.py", "chunked_list": ["classes = {\n\t    0: \"tench, Tinca tinca\",\n\t    1: \"goldfish, Carassius auratus\",\n\t    2: \"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias\",\n\t    3: \"tiger shark, Galeocerdo cuvieri\",\n\t    4: \"hammerhead, hammerhead shark\",\n\t    5: \"electric ray, crampfish, numbfish, torpedo\",\n\t    6: \"stingray\",\n\t    7: \"cock\",\n\t    8: \"hen\",\n", "    9: \"ostrich, Struthio camelus\",\n\t    10: \"brambling, Fringilla montifringilla\",\n\t    11: \"goldfinch, Carduelis carduelis\",\n\t    12: \"house finch, linnet, Carpodacus mexicanus\",\n\t    13: \"junco, snowbird\",\n\t    14: \"indigo bunting, indigo finch, indigo bird, Passerina cyanea\",\n\t    15: \"robin, American robin, Turdus migratorius\",\n\t    16: \"bulbul\",\n\t    17: \"jay\",\n\t    18: \"magpie\",\n", "    19: \"chickadee\",\n\t    20: \"water ouzel, dipper\",\n\t    21: \"kite\",\n\t    22: \"bald eagle, American eagle, Haliaeetus leucocephalus\",\n\t    23: \"vulture\",\n\t    24: \"great grey owl, great gray owl, Strix nebulosa\",\n\t    25: \"European fire salamander, Salamandra salamandra\",\n\t    26: \"common newt, Triturus vulgaris\",\n\t    27: \"eft\",\n\t    28: \"spotted salamander, Ambystoma maculatum\",\n", "    29: \"axolotl, mud puppy, Ambystoma mexicanum\",\n\t    30: \"bullfrog, Rana catesbeiana\",\n\t    31: \"tree frog, tree-frog\",\n\t    32: \"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui\",\n\t    33: \"loggerhead, loggerhead turtle, Caretta caretta\",\n\t    34: \"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea\",\n\t    35: \"mud turtle\",\n\t    36: \"terrapin\",\n\t    37: \"box turtle, box tortoise\",\n\t    38: \"banded gecko\",\n", "    39: \"common iguana, iguana, Iguana iguana\",\n\t    40: \"American chameleon, anole, Anolis carolinensis\",\n\t    41: \"whiptail, whiptail lizard\",\n\t    42: \"agama\",\n\t    43: \"frilled lizard, Chlamydosaurus kingi\",\n\t    44: \"alligator lizard\",\n\t    45: \"Gila monster, Heloderma suspectum\",\n\t    46: \"green lizard, Lacerta viridis\",\n\t    47: \"African chameleon, Chamaeleo chamaeleon\",\n\t    48: \"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis\",\n", "    49: \"African crocodile, Nile crocodile, Crocodylus niloticus\",\n\t    50: \"American alligator, Alligator mississipiensis\",\n\t    51: \"triceratops\",\n\t    52: \"thunder snake, worm snake, Carphophis amoenus\",\n\t    53: \"ringneck snake, ring-necked snake, ring snake\",\n\t    54: \"hognose snake, puff adder, sand viper\",\n\t    55: \"green snake, grass snake\",\n\t    56: \"king snake, kingsnake\",\n\t    57: \"garter snake, grass snake\",\n\t    58: \"water snake\",\n", "    59: \"vine snake\",\n\t    60: \"night snake, Hypsiglena torquata\",\n\t    61: \"boa constrictor, Constrictor constrictor\",\n\t    62: \"rock python, rock snake, Python sebae\",\n\t    63: \"Indian cobra, Naja naja\",\n\t    64: \"green mamba\",\n\t    65: \"sea snake\",\n\t    66: \"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus\",\n\t    67: \"diamondback, diamondback rattlesnake, Crotalus adamanteus\",\n\t    68: \"sidewinder, horned rattlesnake, Crotalus cerastes\",\n", "    69: \"trilobite\",\n\t    70: \"harvestman, daddy longlegs, Phalangium opilio\",\n\t    71: \"scorpion\",\n\t    72: \"black and gold garden spider, Argiope aurantia\",\n\t    73: \"barn spider, Araneus cavaticus\",\n\t    74: \"garden spider, Aranea diademata\",\n\t    75: \"black widow, Latrodectus mactans\",\n\t    76: \"tarantula\",\n\t    77: \"wolf spider, hunting spider\",\n\t    78: \"tick\",\n", "    79: \"centipede\",\n\t    80: \"black grouse\",\n\t    81: \"ptarmigan\",\n\t    82: \"ruffed grouse, partridge, Bonasa umbellus\",\n\t    83: \"prairie chicken, prairie grouse, prairie fowl\",\n\t    84: \"peacock\",\n\t    85: \"quail\",\n\t    86: \"partridge\",\n\t    87: \"African grey, African gray, Psittacus erithacus\",\n\t    88: \"macaw\",\n", "    89: \"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita\",\n\t    90: \"lorikeet\",\n\t    91: \"coucal\",\n\t    92: \"bee eater\",\n\t    93: \"hornbill\",\n\t    94: \"hummingbird\",\n\t    95: \"jacamar\",\n\t    96: \"toucan\",\n\t    97: \"drake\",\n\t    98: \"red-breasted merganser, Mergus serrator\",\n", "    99: \"goose\",\n\t    100: \"black swan, Cygnus atratus\",\n\t    101: \"tusker\",\n\t    102: \"echidna, spiny anteater, anteater\",\n\t    103: \"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus\",\n\t    104: \"wallaby, brush kangaroo\",\n\t    105: \"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus\",\n\t    106: \"wombat\",\n\t    107: \"jellyfish\",\n\t    108: \"sea anemone, anemone\",\n", "    109: \"brain coral\",\n\t    110: \"flatworm, platyhelminth\",\n\t    111: \"nematode, nematode worm, roundworm\",\n\t    112: \"conch\",\n\t    113: \"snail\",\n\t    114: \"slug\",\n\t    115: \"sea slug, nudibranch\",\n\t    116: \"chiton, coat-of-mail shell, sea cradle, polyplacophore\",\n\t    117: \"chambered nautilus, pearly nautilus, nautilus\",\n\t    118: \"Dungeness crab, Cancer magister\",\n", "    119: \"rock crab, Cancer irroratus\",\n\t    120: \"fiddler crab\",\n\t    121: \"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica\",\n\t    122: \"American lobster, Northern lobster, Maine lobster, Homarus americanus\",\n\t    123: \"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish\",\n\t    124: \"crayfish, crawfish, crawdad, crawdaddy\",\n\t    125: \"hermit crab\",\n\t    126: \"isopod\",\n\t    127: \"white stork, Ciconia ciconia\",\n\t    128: \"black stork, Ciconia nigra\",\n", "    129: \"spoonbill\",\n\t    130: \"flamingo\",\n\t    131: \"little blue heron, Egretta caerulea\",\n\t    132: \"American egret, great white heron, Egretta albus\",\n\t    133: \"bittern\",\n\t    134: \"crane\",\n\t    135: \"limpkin, Aramus pictus\",\n\t    136: \"European gallinule, Porphyrio porphyrio\",\n\t    137: \"American coot, marsh hen, mud hen, water hen, Fulica americana\",\n\t    138: \"bustard\",\n", "    139: \"ruddy turnstone, Arenaria interpres\",\n\t    140: \"red-backed sandpiper, dunlin, Erolia alpina\",\n\t    141: \"redshank, Tringa totanus\",\n\t    142: \"dowitcher\",\n\t    143: \"oystercatcher, oyster catcher\",\n\t    144: \"pelican\",\n\t    145: \"king penguin, Aptenodytes patagonica\",\n\t    146: \"albatross, mollymawk\",\n\t    147: \"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus\",\n\t    148: \"killer whale, killer, orca, grampus, sea wolf, Orcinus orca\",\n", "    149: \"dugong, Dugong dugon\",\n\t    150: \"sea lion\",\n\t    151: \"Chihuahua\",\n\t    152: \"Japanese spaniel\",\n\t    153: \"Maltese dog, Maltese terrier, Maltese\",\n\t    154: \"Pekinese, Pekingese, Peke\",\n\t    155: \"Shih-Tzu\",\n\t    156: \"Blenheim spaniel\",\n\t    157: \"papillon\",\n\t    158: \"toy terrier\",\n", "    159: \"Rhodesian ridgeback\",\n\t    160: \"Afghan hound, Afghan\",\n\t    161: \"basset, basset hound\",\n\t    162: \"beagle\",\n\t    163: \"bloodhound, sleuthhound\",\n\t    164: \"bluetick\",\n\t    165: \"black-and-tan coonhound\",\n\t    166: \"Walker hound, Walker foxhound\",\n\t    167: \"English foxhound\",\n\t    168: \"redbone\",\n", "    169: \"borzoi, Russian wolfhound\",\n\t    170: \"Irish wolfhound\",\n\t    171: \"Italian greyhound\",\n\t    172: \"whippet\",\n\t    173: \"Ibizan hound, Ibizan Podenco\",\n\t    174: \"Norwegian elkhound, elkhound\",\n\t    175: \"otterhound, otter hound\",\n\t    176: \"Saluki, gazelle hound\",\n\t    177: \"Scottish deerhound, deerhound\",\n\t    178: \"Weimaraner\",\n", "    179: \"Staffordshire bullterrier, Staffordshire bull terrier\",\n\t    180: \"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier\",\n\t    181: \"Bedlington terrier\",\n\t    182: \"Border terrier\",\n\t    183: \"Kerry blue terrier\",\n\t    184: \"Irish terrier\",\n\t    185: \"Norfolk terrier\",\n\t    186: \"Norwich terrier\",\n\t    187: \"Yorkshire terrier\",\n\t    188: \"wire-haired fox terrier\",\n", "    189: \"Lakeland terrier\",\n\t    190: \"Sealyham terrier, Sealyham\",\n\t    191: \"Airedale, Airedale terrier\",\n\t    192: \"cairn, cairn terrier\",\n\t    193: \"Australian terrier\",\n\t    194: \"Dandie Dinmont, Dandie Dinmont terrier\",\n\t    195: \"Boston bull, Boston terrier\",\n\t    196: \"miniature schnauzer\",\n\t    197: \"giant schnauzer\",\n\t    198: \"standard schnauzer\",\n", "    199: \"Scotch terrier, Scottish terrier, Scottie\",\n\t    200: \"Tibetan terrier, chrysanthemum dog\",\n\t    201: \"silky terrier, Sydney silky\",\n\t    202: \"soft-coated wheaten terrier\",\n\t    203: \"West Highland white terrier\",\n\t    204: \"Lhasa, Lhasa apso\",\n\t    205: \"flat-coated retriever\",\n\t    206: \"curly-coated retriever\",\n\t    207: \"golden retriever\",\n\t    208: \"Labrador retriever\",\n", "    209: \"Chesapeake Bay retriever\",\n\t    210: \"German short-haired pointer\",\n\t    211: \"vizsla, Hungarian pointer\",\n\t    212: \"English setter\",\n\t    213: \"Irish setter, red setter\",\n\t    214: \"Gordon setter\",\n\t    215: \"Brittany spaniel\",\n\t    216: \"clumber, clumber spaniel\",\n\t    217: \"English springer, English springer spaniel\",\n\t    218: \"Welsh springer spaniel\",\n", "    219: \"cocker spaniel, English cocker spaniel, cocker\",\n\t    220: \"Sussex spaniel\",\n\t    221: \"Irish water spaniel\",\n\t    222: \"kuvasz\",\n\t    223: \"schipperke\",\n\t    224: \"groenendael\",\n\t    225: \"malinois\",\n\t    226: \"briard\",\n\t    227: \"kelpie\",\n\t    228: \"komondor\",\n", "    229: \"Old English sheepdog, bobtail\",\n\t    230: \"Shetland sheepdog, Shetland sheep dog, Shetland\",\n\t    231: \"collie\",\n\t    232: \"Border collie\",\n\t    233: \"Bouvier des Flandres, Bouviers des Flandres\",\n\t    234: \"Rottweiler\",\n\t    235: \"German shepherd, German shepherd dog, German police dog, alsatian\",\n\t    236: \"Doberman, Doberman pinscher\",\n\t    237: \"miniature pinscher\",\n\t    238: \"Greater Swiss Mountain dog\",\n", "    239: \"Bernese mountain dog\",\n\t    240: \"Appenzeller\",\n\t    241: \"EntleBucher\",\n\t    242: \"boxer\",\n\t    243: \"bull mastiff\",\n\t    244: \"Tibetan mastiff\",\n\t    245: \"French bulldog\",\n\t    246: \"Great Dane\",\n\t    247: \"Saint Bernard, St Bernard\",\n\t    248: \"Eskimo dog, husky\",\n", "    249: \"malamute, malemute, Alaskan malamute\",\n\t    250: \"Siberian husky\",\n\t    251: \"dalmatian, coach dog, carriage dog\",\n\t    252: \"affenpinscher, monkey pinscher, monkey dog\",\n\t    253: \"basenji\",\n\t    254: \"pug, pug-dog\",\n\t    255: \"Leonberg\",\n\t    256: \"Newfoundland, Newfoundland dog\",\n\t    257: \"Great Pyrenees\",\n\t    258: \"Samoyed, Samoyede\",\n", "    259: \"Pomeranian\",\n\t    260: \"chow, chow chow\",\n\t    261: \"keeshond\",\n\t    262: \"Brabancon griffon\",\n\t    263: \"Pembroke, Pembroke Welsh corgi\",\n\t    264: \"Cardigan, Cardigan Welsh corgi\",\n\t    265: \"toy poodle\",\n\t    266: \"miniature poodle\",\n\t    267: \"standard poodle\",\n\t    268: \"Mexican hairless\",\n", "    269: \"timber wolf, grey wolf, gray wolf, Canis lupus\",\n\t    270: \"white wolf, Arctic wolf, Canis lupus tundrarum\",\n\t    271: \"red wolf, maned wolf, Canis rufus, Canis niger\",\n\t    272: \"coyote, prairie wolf, brush wolf, Canis latrans\",\n\t    273: \"dingo, warrigal, warragal, Canis dingo\",\n\t    274: \"dhole, Cuon alpinus\",\n\t    275: \"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus\",\n\t    276: \"hyena, hyaena\",\n\t    277: \"red fox, Vulpes vulpes\",\n\t    278: \"kit fox, Vulpes macrotis\",\n", "    279: \"Arctic fox, white fox, Alopex lagopus\",\n\t    280: \"grey fox, gray fox, Urocyon cinereoargenteus\",\n\t    281: \"tabby, tabby cat\",\n\t    282: \"tiger cat\",\n\t    283: \"Persian cat\",\n\t    284: \"Siamese cat, Siamese\",\n\t    285: \"Egyptian cat\",\n\t    286: \"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor\",\n\t    287: \"lynx, catamount\",\n\t    288: \"leopard, Panthera pardus\",\n", "    289: \"snow leopard, ounce, Panthera uncia\",\n\t    290: \"jaguar, panther, Panthera onca, Felis onca\",\n\t    291: \"lion, king of beasts, Panthera leo\",\n\t    292: \"tiger, Panthera tigris\",\n\t    293: \"cheetah, chetah, Acinonyx jubatus\",\n\t    294: \"brown bear, bruin, Ursus arctos\",\n\t    295: \"American black bear, black bear, Ursus americanus, Euarctos americanus\",\n\t    296: \"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus\",\n\t    297: \"sloth bear, Melursus ursinus, Ursus ursinus\",\n\t    298: \"mongoose\",\n", "    299: \"meerkat, mierkat\",\n\t    300: \"tiger beetle\",\n\t    301: \"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle\",\n\t    302: \"ground beetle, carabid beetle\",\n\t    303: \"long-horned beetle, longicorn, longicorn beetle\",\n\t    304: \"leaf beetle, chrysomelid\",\n\t    305: \"dung beetle\",\n\t    306: \"rhinoceros beetle\",\n\t    307: \"weevil\",\n\t    308: \"fly\",\n", "    309: \"bee\",\n\t    310: \"ant, emmet, pismire\",\n\t    311: \"grasshopper, hopper\",\n\t    312: \"cricket\",\n\t    313: \"walking stick, walkingstick, stick insect\",\n\t    314: \"cockroach, roach\",\n\t    315: \"mantis, mantid\",\n\t    316: \"cicada, cicala\",\n\t    317: \"leafhopper\",\n\t    318: \"lacewing, lacewing fly\",\n", "    319: \"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk\",\n\t    320: \"damselfly\",\n\t    321: \"admiral\",\n\t    322: \"ringlet, ringlet butterfly\",\n\t    323: \"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus\",\n\t    324: \"cabbage butterfly\",\n\t    325: \"sulphur butterfly, sulfur butterfly\",\n\t    326: \"lycaenid, lycaenid butterfly\",\n\t    327: \"starfish, sea star\",\n\t    328: \"sea urchin\",\n", "    329: \"sea cucumber, holothurian\",\n\t    330: \"wood rabbit, cottontail, cottontail rabbit\",\n\t    331: \"hare\",\n\t    332: \"Angora, Angora rabbit\",\n\t    333: \"hamster\",\n\t    334: \"porcupine, hedgehog\",\n\t    335: \"fox squirrel, eastern fox squirrel, Sciurus niger\",\n\t    336: \"marmot\",\n\t    337: \"beaver\",\n\t    338: \"guinea pig, Cavia cobaya\",\n", "    339: \"sorrel\",\n\t    340: \"zebra\",\n\t    341: \"hog, pig, grunter, squealer, Sus scrofa\",\n\t    342: \"wild boar, boar, Sus scrofa\",\n\t    343: \"warthog\",\n\t    344: \"hippopotamus, hippo, river horse, Hippopotamus amphibius\",\n\t    345: \"ox\",\n\t    346: \"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis\",\n\t    347: \"bison\",\n\t    348: \"ram, tup\",\n", "    349: \"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis\",\n\t    350: \"ibex, Capra ibex\",\n\t    351: \"hartebeest\",\n\t    352: \"impala, Aepyceros melampus\",\n\t    353: \"gazelle\",\n\t    354: \"Arabian camel, dromedary, Camelus dromedarius\",\n\t    355: \"llama\",\n\t    356: \"weasel\",\n\t    357: \"mink\",\n\t    358: \"polecat, fitch, foulmart, foumart, Mustela putorius\",\n", "    359: \"black-footed ferret, ferret, Mustela nigripes\",\n\t    360: \"otter\",\n\t    361: \"skunk, polecat, wood pussy\",\n\t    362: \"badger\",\n\t    363: \"armadillo\",\n\t    364: \"three-toed sloth, ai, Bradypus tridactylus\",\n\t    365: \"orangutan, orang, orangutang, Pongo pygmaeus\",\n\t    366: \"gorilla, Gorilla gorilla\",\n\t    367: \"chimpanzee, chimp, Pan troglodytes\",\n\t    368: \"gibbon, Hylobates lar\",\n", "    369: \"siamang, Hylobates syndactylus, Symphalangus syndactylus\",\n\t    370: \"guenon, guenon monkey\",\n\t    371: \"patas, hussar monkey, Erythrocebus patas\",\n\t    372: \"baboon\",\n\t    373: \"macaque\",\n\t    374: \"langur\",\n\t    375: \"colobus, colobus monkey\",\n\t    376: \"proboscis monkey, Nasalis larvatus\",\n\t    377: \"marmoset\",\n\t    378: \"capuchin, ringtail, Cebus capucinus\",\n", "    379: \"howler monkey, howler\",\n\t    380: \"titi, titi monkey\",\n\t    381: \"spider monkey, Ateles geoffroyi\",\n\t    382: \"squirrel monkey, Saimiri sciureus\",\n\t    383: \"Madagascar cat, ring-tailed lemur, Lemur catta\",\n\t    384: \"indri, indris, Indri indri, Indri brevicaudatus\",\n\t    385: \"Indian elephant, Elephas maximus\",\n\t    386: \"African elephant, Loxodonta africana\",\n\t    387: \"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens\",\n\t    388: \"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca\",\n", "    389: \"barracouta, snoek\",\n\t    390: \"eel\",\n\t    391: \"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch\",\n\t    392: \"rock beauty, Holocanthus tricolor\",\n\t    393: \"anemone fish\",\n\t    394: \"sturgeon\",\n\t    395: \"gar, garfish, garpike, billfish, Lepisosteus osseus\",\n\t    396: \"lionfish\",\n\t    397: \"puffer, pufferfish, blowfish, globefish\",\n\t    398: \"abacus\",\n", "    399: \"abaya\",\n\t    400: \"academic gown, academic robe, judge's robe\",\n\t    401: \"accordion, piano accordion, squeeze box\",\n\t    402: \"acoustic guitar\",\n\t    403: \"aircraft carrier, carrier, flattop, attack aircraft carrier\",\n\t    404: \"airliner\",\n\t    405: \"airship, dirigible\",\n\t    406: \"altar\",\n\t    407: \"ambulance\",\n\t    408: \"amphibian, amphibious vehicle\",\n", "    409: \"analog clock\",\n\t    410: \"apiary, bee house\",\n\t    411: \"apron\",\n\t    412: \"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin\",\n\t    413: \"assault rifle, assault gun\",\n\t    414: \"backpack, back pack, knapsack, packsack, rucksack, haversack\",\n\t    415: \"bakery, bakeshop, bakehouse\",\n\t    416: \"balance beam, beam\",\n\t    417: \"balloon\",\n\t    418: \"ballpoint, ballpoint pen, ballpen, Biro\",\n", "    419: \"Band Aid\",\n\t    420: \"banjo\",\n\t    421: \"bannister, banister, balustrade, balusters, handrail\",\n\t    422: \"barbell\",\n\t    423: \"barber chair\",\n\t    424: \"barbershop\",\n\t    425: \"barn\",\n\t    426: \"barometer\",\n\t    427: \"barrel, cask\",\n\t    428: \"barrow, garden cart, lawn cart, wheelbarrow\",\n", "    429: \"baseball\",\n\t    430: \"basketball\",\n\t    431: \"bassinet\",\n\t    432: \"bassoon\",\n\t    433: \"bathing cap, swimming cap\",\n\t    434: \"bath towel\",\n\t    435: \"bathtub, bathing tub, bath, tub\",\n\t    436: \"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon\",\n\t    437: \"beacon, lighthouse, beacon light, pharos\",\n\t    438: \"beaker\",\n", "    439: \"bearskin, busby, shako\",\n\t    440: \"beer bottle\",\n\t    441: \"beer glass\",\n\t    442: \"bell cote, bell cot\",\n\t    443: \"bib\",\n\t    444: \"bicycle-built-for-two, tandem bicycle, tandem\",\n\t    445: \"bikini, two-piece\",\n\t    446: \"binder, ring-binder\",\n\t    447: \"binoculars, field glasses, opera glasses\",\n\t    448: \"birdhouse\",\n", "    449: \"boathouse\",\n\t    450: \"bobsled, bobsleigh, bob\",\n\t    451: \"bolo tie, bolo, bola tie, bola\",\n\t    452: \"bonnet, poke bonnet\",\n\t    453: \"bookcase\",\n\t    454: \"bookshop, bookstore, bookstall\",\n\t    455: \"bottlecap\",\n\t    456: \"bow\",\n\t    457: \"bow tie, bow-tie, bowtie\",\n\t    458: \"brass, memorial tablet, plaque\",\n", "    459: \"brassiere, bra, bandeau\",\n\t    460: \"breakwater, groin, groyne, mole, bulwark, seawall, jetty\",\n\t    461: \"breastplate, aegis, egis\",\n\t    462: \"broom\",\n\t    463: \"bucket, pail\",\n\t    464: \"buckle\",\n\t    465: \"bulletproof vest\",\n\t    466: \"bullet train, bullet\",\n\t    467: \"butcher shop, meat market\",\n\t    468: \"cab, hack, taxi, taxicab\",\n", "    469: \"caldron, cauldron\",\n\t    470: \"candle, taper, wax light\",\n\t    471: \"cannon\",\n\t    472: \"canoe\",\n\t    473: \"can opener, tin opener\",\n\t    474: \"cardigan\",\n\t    475: \"car mirror\",\n\t    476: \"carousel, carrousel, merry-go-round, roundabout, whirligig\",\n\t    477: \"carpenter's kit, tool kit\",\n\t    478: \"carton\",\n", "    479: \"car wheel\",\n\t    480: \"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM\",\n\t    481: \"cassette\",\n\t    482: \"cassette player\",\n\t    483: \"castle\",\n\t    484: \"catamaran\",\n\t    485: \"CD player\",\n\t    486: \"cello, violoncello\",\n\t    487: \"cellular telephone, cellular phone, cellphone, cell, mobile phone\",\n\t    488: \"chain\",\n", "    489: \"chainlink fence\",\n\t    490: \"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour\",\n\t    491: \"chain saw, chainsaw\",\n\t    492: \"chest\",\n\t    493: \"chiffonier, commode\",\n\t    494: \"chime, bell, gong\",\n\t    495: \"china cabinet, china closet\",\n\t    496: \"Christmas stocking\",\n\t    497: \"church, church building\",\n\t    498: \"cinema, movie theater, movie theatre, movie house, picture palace\",\n", "    499: \"cleaver, meat cleaver, chopper\",\n\t    500: \"cliff dwelling\",\n\t    501: \"cloak\",\n\t    502: \"clog, geta, patten, sabot\",\n\t    503: \"cocktail shaker\",\n\t    504: \"coffee mug\",\n\t    505: \"coffeepot\",\n\t    506: \"coil, spiral, volute, whorl, helix\",\n\t    507: \"combination lock\",\n\t    508: \"computer keyboard, keypad\",\n", "    509: \"confectionery, confectionary, candy store\",\n\t    510: \"container ship, containership, container vessel\",\n\t    511: \"convertible\",\n\t    512: \"corkscrew, bottle screw\",\n\t    513: \"cornet, horn, trumpet, trump\",\n\t    514: \"cowboy boot\",\n\t    515: \"cowboy hat, ten-gallon hat\",\n\t    516: \"cradle\",\n\t    517: \"crane\",\n\t    518: \"crash helmet\",\n", "    519: \"crate\",\n\t    520: \"crib, cot\",\n\t    521: \"Crock Pot\",\n\t    522: \"croquet ball\",\n\t    523: \"crutch\",\n\t    524: \"cuirass\",\n\t    525: \"dam, dike, dyke\",\n\t    526: \"desk\",\n\t    527: \"desktop computer\",\n\t    528: \"dial telephone, dial phone\",\n", "    529: \"diaper, nappy, napkin\",\n\t    530: \"digital clock\",\n\t    531: \"digital watch\",\n\t    532: \"dining table, board\",\n\t    533: \"dishrag, dishcloth\",\n\t    534: \"dishwasher, dish washer, dishwashing machine\",\n\t    535: \"disk brake, disc brake\",\n\t    536: \"dock, dockage, docking facility\",\n\t    537: \"dogsled, dog sled, dog sleigh\",\n\t    538: \"dome\",\n", "    539: \"doormat, welcome mat\",\n\t    540: \"drilling platform, offshore rig\",\n\t    541: \"drum, membranophone, tympan\",\n\t    542: \"drumstick\",\n\t    543: \"dumbbell\",\n\t    544: \"Dutch oven\",\n\t    545: \"electric fan, blower\",\n\t    546: \"electric guitar\",\n\t    547: \"electric locomotive\",\n\t    548: \"entertainment center\",\n", "    549: \"envelope\",\n\t    550: \"espresso maker\",\n\t    551: \"face powder\",\n\t    552: \"feather boa, boa\",\n\t    553: \"file, file cabinet, filing cabinet\",\n\t    554: \"fireboat\",\n\t    555: \"fire engine, fire truck\",\n\t    556: \"fire screen, fireguard\",\n\t    557: \"flagpole, flagstaff\",\n\t    558: \"flute, transverse flute\",\n", "    559: \"folding chair\",\n\t    560: \"football helmet\",\n\t    561: \"forklift\",\n\t    562: \"fountain\",\n\t    563: \"fountain pen\",\n\t    564: \"four-poster\",\n\t    565: \"freight car\",\n\t    566: \"French horn, horn\",\n\t    567: \"frying pan, frypan, skillet\",\n\t    568: \"fur coat\",\n", "    569: \"garbage truck, dustcart\",\n\t    570: \"gasmask, respirator, gas helmet\",\n\t    571: \"gas pump, gasoline pump, petrol pump, island dispenser\",\n\t    572: \"goblet\",\n\t    573: \"go-kart\",\n\t    574: \"golf ball\",\n\t    575: \"golfcart, golf cart\",\n\t    576: \"gondola\",\n\t    577: \"gong, tam-tam\",\n\t    578: \"gown\",\n", "    579: \"grand piano, grand\",\n\t    580: \"greenhouse, nursery, glasshouse\",\n\t    581: \"grille, radiator grille\",\n\t    582: \"grocery store, grocery, food market, market\",\n\t    583: \"guillotine\",\n\t    584: \"hair slide\",\n\t    585: \"hair spray\",\n\t    586: \"half track\",\n\t    587: \"hammer\",\n\t    588: \"hamper\",\n", "    589: \"hand blower, blow dryer, blow drier, hair dryer, hair drier\",\n\t    590: \"hand-held computer, hand-held microcomputer\",\n\t    591: \"handkerchief, hankie, hanky, hankey\",\n\t    592: \"hard disc, hard disk, fixed disk\",\n\t    593: \"harmonica, mouth organ, harp, mouth harp\",\n\t    594: \"harp\",\n\t    595: \"harvester, reaper\",\n\t    596: \"hatchet\",\n\t    597: \"holster\",\n\t    598: \"home theater, home theatre\",\n", "    599: \"honeycomb\",\n\t    600: \"hook, claw\",\n\t    601: \"hoopskirt, crinoline\",\n\t    602: \"horizontal bar, high bar\",\n\t    603: \"horse cart, horse-cart\",\n\t    604: \"hourglass\",\n\t    605: \"iPod\",\n\t    606: \"iron, smoothing iron\",\n\t    607: \"jack-o'-lantern\",\n\t    608: \"jean, blue jean, denim\",\n", "    609: \"jeep, landrover\",\n\t    610: \"jersey, T-shirt, tee shirt\",\n\t    611: \"jigsaw puzzle\",\n\t    612: \"jinrikisha, ricksha, rickshaw\",\n\t    613: \"joystick\",\n\t    614: \"kimono\",\n\t    615: \"knee pad\",\n\t    616: \"knot\",\n\t    617: \"lab coat, laboratory coat\",\n\t    618: \"ladle\",\n", "    619: \"lampshade, lamp shade\",\n\t    620: \"laptop, laptop computer\",\n\t    621: \"lawn mower, mower\",\n\t    622: \"lens cap, lens cover\",\n\t    623: \"letter opener, paper knife, paperknife\",\n\t    624: \"library\",\n\t    625: \"lifeboat\",\n\t    626: \"lighter, light, igniter, ignitor\",\n\t    627: \"limousine, limo\",\n\t    628: \"liner, ocean liner\",\n", "    629: \"lipstick, lip rouge\",\n\t    630: \"Loafer\",\n\t    631: \"lotion\",\n\t    632: \"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system\",\n\t    633: \"loupe, jeweler's loupe\",\n\t    634: \"lumbermill, sawmill\",\n\t    635: \"magnetic compass\",\n\t    636: \"mailbag, postbag\",\n\t    637: \"mailbox, letter box\",\n\t    638: \"maillot\",\n", "    639: \"maillot, tank suit\",\n\t    640: \"manhole cover\",\n\t    641: \"maraca\",\n\t    642: \"marimba, xylophone\",\n\t    643: \"mask\",\n\t    644: \"matchstick\",\n\t    645: \"maypole\",\n\t    646: \"maze, labyrinth\",\n\t    647: \"measuring cup\",\n\t    648: \"medicine chest, medicine cabinet\",\n", "    649: \"megalith, megalithic structure\",\n\t    650: \"microphone, mike\",\n\t    651: \"microwave, microwave oven\",\n\t    652: \"military uniform\",\n\t    653: \"milk can\",\n\t    654: \"minibus\",\n\t    655: \"miniskirt, mini\",\n\t    656: \"minivan\",\n\t    657: \"missile\",\n\t    658: \"mitten\",\n", "    659: \"mixing bowl\",\n\t    660: \"mobile home, manufactured home\",\n\t    661: \"Model T\",\n\t    662: \"modem\",\n\t    663: \"monastery\",\n\t    664: \"monitor\",\n\t    665: \"moped\",\n\t    666: \"mortar\",\n\t    667: \"mortarboard\",\n\t    668: \"mosque\",\n", "    669: \"mosquito net\",\n\t    670: \"motor scooter, scooter\",\n\t    671: \"mountain bike, all-terrain bike, off-roader\",\n\t    672: \"mountain tent\",\n\t    673: \"mouse, computer mouse\",\n\t    674: \"mousetrap\",\n\t    675: \"moving van\",\n\t    676: \"muzzle\",\n\t    677: \"nail\",\n\t    678: \"neck brace\",\n", "    679: \"necklace\",\n\t    680: \"nipple\",\n\t    681: \"notebook, notebook computer\",\n\t    682: \"obelisk\",\n\t    683: \"oboe, hautboy, hautbois\",\n\t    684: \"ocarina, sweet potato\",\n\t    685: \"odometer, hodometer, mileometer, milometer\",\n\t    686: \"oil filter\",\n\t    687: \"organ, pipe organ\",\n\t    688: \"oscilloscope, scope, cathode-ray oscilloscope, CRO\",\n", "    689: \"overskirt\",\n\t    690: \"oxcart\",\n\t    691: \"oxygen mask\",\n\t    692: \"packet\",\n\t    693: \"paddle, boat paddle\",\n\t    694: \"paddlewheel, paddle wheel\",\n\t    695: \"padlock\",\n\t    696: \"paintbrush\",\n\t    697: \"pajama, pyjama, pj's, jammies\",\n\t    698: \"palace\",\n", "    699: \"panpipe, pandean pipe, syrinx\",\n\t    700: \"paper towel\",\n\t    701: \"parachute, chute\",\n\t    702: \"parallel bars, bars\",\n\t    703: \"park bench\",\n\t    704: \"parking meter\",\n\t    705: \"passenger car, coach, carriage\",\n\t    706: \"patio, terrace\",\n\t    707: \"pay-phone, pay-station\",\n\t    708: \"pedestal, plinth, footstall\",\n", "    709: \"pencil box, pencil case\",\n\t    710: \"pencil sharpener\",\n\t    711: \"perfume, essence\",\n\t    712: \"Petri dish\",\n\t    713: \"photocopier\",\n\t    714: \"pick, plectrum, plectron\",\n\t    715: \"pickelhaube\",\n\t    716: \"picket fence, paling\",\n\t    717: \"pickup, pickup truck\",\n\t    718: \"pier\",\n", "    719: \"piggy bank, penny bank\",\n\t    720: \"pill bottle\",\n\t    721: \"pillow\",\n\t    722: \"ping-pong ball\",\n\t    723: \"pinwheel\",\n\t    724: \"pirate, pirate ship\",\n\t    725: \"pitcher, ewer\",\n\t    726: \"plane, carpenter's plane, woodworking plane\",\n\t    727: \"planetarium\",\n\t    728: \"plastic bag\",\n", "    729: \"plate rack\",\n\t    730: \"plow, plough\",\n\t    731: \"plunger, plumber's helper\",\n\t    732: \"Polaroid camera, Polaroid Land camera\",\n\t    733: \"pole\",\n\t    734: \"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria\",\n\t    735: \"poncho\",\n\t    736: \"pool table, billiard table, snooker table\",\n\t    737: \"pop bottle, soda bottle\",\n\t    738: \"pot, flowerpot\",\n", "    739: \"potter's wheel\",\n\t    740: \"power drill\",\n\t    741: \"prayer rug, prayer mat\",\n\t    742: \"printer\",\n\t    743: \"prison, prison house\",\n\t    744: \"projectile, missile\",\n\t    745: \"projector\",\n\t    746: \"puck, hockey puck\",\n\t    747: \"punching bag, punch bag, punching ball, punchball\",\n\t    748: \"purse\",\n", "    749: \"quill, quill pen\",\n\t    750: \"quilt, comforter, comfort, puff\",\n\t    751: \"racer, race car, racing car\",\n\t    752: \"racket, racquet\",\n\t    753: \"radiator\",\n\t    754: \"radio, wireless\",\n\t    755: \"radio telescope, radio reflector\",\n\t    756: \"rain barrel\",\n\t    757: \"recreational vehicle, RV, R.V.\",\n\t    758: \"reel\",\n", "    759: \"reflex camera\",\n\t    760: \"refrigerator, icebox\",\n\t    761: \"remote control, remote\",\n\t    762: \"restaurant, eating house, eating place, eatery\",\n\t    763: \"revolver, six-gun, six-shooter\",\n\t    764: \"rifle\",\n\t    765: \"rocking chair, rocker\",\n\t    766: \"rotisserie\",\n\t    767: \"rubber eraser, rubber, pencil eraser\",\n\t    768: \"rugby ball\",\n", "    769: \"rule, ruler\",\n\t    770: \"running shoe\",\n\t    771: \"safe\",\n\t    772: \"safety pin\",\n\t    773: \"saltshaker, salt shaker\",\n\t    774: \"sandal\",\n\t    775: \"sarong\",\n\t    776: \"sax, saxophone\",\n\t    777: \"scabbard\",\n\t    778: \"scale, weighing machine\",\n", "    779: \"school bus\",\n\t    780: \"schooner\",\n\t    781: \"scoreboard\",\n\t    782: \"screen, CRT screen\",\n\t    783: \"screw\",\n\t    784: \"screwdriver\",\n\t    785: \"seat belt, seatbelt\",\n\t    786: \"sewing machine\",\n\t    787: \"shield, buckler\",\n\t    788: \"shoe shop, shoe-shop, shoe store\",\n", "    789: \"shoji\",\n\t    790: \"shopping basket\",\n\t    791: \"shopping cart\",\n\t    792: \"shovel\",\n\t    793: \"shower cap\",\n\t    794: \"shower curtain\",\n\t    795: \"ski\",\n\t    796: \"ski mask\",\n\t    797: \"sleeping bag\",\n\t    798: \"slide rule, slipstick\",\n", "    799: \"sliding door\",\n\t    800: \"slot, one-armed bandit\",\n\t    801: \"snorkel\",\n\t    802: \"snowmobile\",\n\t    803: \"snowplow, snowplough\",\n\t    804: \"soap dispenser\",\n\t    805: \"soccer ball\",\n\t    806: \"sock\",\n\t    807: \"solar dish, solar collector, solar furnace\",\n\t    808: \"sombrero\",\n", "    809: \"soup bowl\",\n\t    810: \"space bar\",\n\t    811: \"space heater\",\n\t    812: \"space shuttle\",\n\t    813: \"spatula\",\n\t    814: \"speedboat\",\n\t    815: \"spider web, spider's web\",\n\t    816: \"spindle\",\n\t    817: \"sports car, sport car\",\n\t    818: \"spotlight, spot\",\n", "    819: \"stage\",\n\t    820: \"steam locomotive\",\n\t    821: \"steel arch bridge\",\n\t    822: \"steel drum\",\n\t    823: \"stethoscope\",\n\t    824: \"stole\",\n\t    825: \"stone wall\",\n\t    826: \"stopwatch, stop watch\",\n\t    827: \"stove\",\n\t    828: \"strainer\",\n", "    829: \"streetcar, tram, tramcar, trolley, trolley car\",\n\t    830: \"stretcher\",\n\t    831: \"studio couch, day bed\",\n\t    832: \"stupa, tope\",\n\t    833: \"submarine, pigboat, sub, U-boat\",\n\t    834: \"suit, suit of clothes\",\n\t    835: \"sundial\",\n\t    836: \"sunglass\",\n\t    837: \"sunglasses, dark glasses, shades\",\n\t    838: \"sunscreen, sunblock, sun blocker\",\n", "    839: \"suspension bridge\",\n\t    840: \"swab, swob, mop\",\n\t    841: \"sweatshirt\",\n\t    842: \"swimming trunks, bathing trunks\",\n\t    843: \"swing\",\n\t    844: \"switch, electric switch, electrical switch\",\n\t    845: \"syringe\",\n\t    846: \"table lamp\",\n\t    847: \"tank, army tank, armored combat vehicle, armoured combat vehicle\",\n\t    848: \"tape player\",\n", "    849: \"teapot\",\n\t    850: \"teddy, teddy bear\",\n\t    851: \"television, television system\",\n\t    852: \"tennis ball\",\n\t    853: \"thatch, thatched roof\",\n\t    854: \"theater curtain, theatre curtain\",\n\t    855: \"thimble\",\n\t    856: \"thresher, thrasher, threshing machine\",\n\t    857: \"throne\",\n\t    858: \"tile roof\",\n", "    859: \"toaster\",\n\t    860: \"tobacco shop, tobacconist shop, tobacconist\",\n\t    861: \"toilet seat\",\n\t    862: \"torch\",\n\t    863: \"totem pole\",\n\t    864: \"tow truck, tow car, wrecker\",\n\t    865: \"toyshop\",\n\t    866: \"tractor\",\n\t    867: \"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi\",\n\t    868: \"tray\",\n", "    869: \"trench coat\",\n\t    870: \"tricycle, trike, velocipede\",\n\t    871: \"trimaran\",\n\t    872: \"tripod\",\n\t    873: \"triumphal arch\",\n\t    874: \"trolleybus, trolley coach, trackless trolley\",\n\t    875: \"trombone\",\n\t    876: \"tub, vat\",\n\t    877: \"turnstile\",\n\t    878: \"typewriter keyboard\",\n", "    879: \"umbrella\",\n\t    880: \"unicycle, monocycle\",\n\t    881: \"upright, upright piano\",\n\t    882: \"vacuum, vacuum cleaner\",\n\t    883: \"vase\",\n\t    884: \"vault\",\n\t    885: \"velvet\",\n\t    886: \"vending machine\",\n\t    887: \"vestment\",\n\t    888: \"viaduct\",\n", "    889: \"violin, fiddle\",\n\t    890: \"volleyball\",\n\t    891: \"waffle iron\",\n\t    892: \"wall clock\",\n\t    893: \"wallet, billfold, notecase, pocketbook\",\n\t    894: \"wardrobe, closet, press\",\n\t    895: \"warplane, military plane\",\n\t    896: \"washbasin, handbasin, washbowl, lavabo, wash-hand basin\",\n\t    897: \"washer, automatic washer, washing machine\",\n\t    898: \"water bottle\",\n", "    899: \"water jug\",\n\t    900: \"water tower\",\n\t    901: \"whiskey jug\",\n\t    902: \"whistle\",\n\t    903: \"wig\",\n\t    904: \"window screen\",\n\t    905: \"window shade\",\n\t    906: \"Windsor tie\",\n\t    907: \"wine bottle\",\n\t    908: \"wing\",\n", "    909: \"wok\",\n\t    910: \"wooden spoon\",\n\t    911: \"wool, woolen, woollen\",\n\t    912: \"worm fence, snake fence, snake-rail fence, Virginia fence\",\n\t    913: \"wreck\",\n\t    914: \"yawl\",\n\t    915: \"yurt\",\n\t    916: \"web site, website, internet site, site\",\n\t    917: \"comic book\",\n\t    918: \"crossword puzzle, crossword\",\n", "    919: \"street sign\",\n\t    920: \"traffic light, traffic signal, stoplight\",\n\t    921: \"book jacket, dust cover, dust jacket, dust wrapper\",\n\t    922: \"menu\",\n\t    923: \"plate\",\n\t    924: \"guacamole\",\n\t    925: \"consomme\",\n\t    926: \"hot pot, hotpot\",\n\t    927: \"trifle\",\n\t    928: \"ice cream, icecream\",\n", "    929: \"ice lolly, lolly, lollipop, popsicle\",\n\t    930: \"French loaf\",\n\t    931: \"bagel, beigel\",\n\t    932: \"pretzel\",\n\t    933: \"cheeseburger\",\n\t    934: \"hotdog, hot dog, red hot\",\n\t    935: \"mashed potato\",\n\t    936: \"head cabbage\",\n\t    937: \"broccoli\",\n\t    938: \"cauliflower\",\n", "    939: \"zucchini, courgette\",\n\t    940: \"spaghetti squash\",\n\t    941: \"acorn squash\",\n\t    942: \"butternut squash\",\n\t    943: \"cucumber, cuke\",\n\t    944: \"artichoke, globe artichoke\",\n\t    945: \"bell pepper\",\n\t    946: \"cardoon\",\n\t    947: \"mushroom\",\n\t    948: \"Granny Smith\",\n", "    949: \"strawberry\",\n\t    950: \"orange\",\n\t    951: \"lemon\",\n\t    952: \"fig\",\n\t    953: \"pineapple, ananas\",\n\t    954: \"banana\",\n\t    955: \"jackfruit, jak, jack\",\n\t    956: \"custard apple\",\n\t    957: \"pomegranate\",\n\t    958: \"hay\",\n", "    959: \"carbonara\",\n\t    960: \"chocolate sauce, chocolate syrup\",\n\t    961: \"dough\",\n\t    962: \"meat loaf, meatloaf\",\n\t    963: \"pizza, pizza pie\",\n\t    964: \"potpie\",\n\t    965: \"burrito\",\n\t    966: \"red wine\",\n\t    967: \"espresso\",\n\t    968: \"cup\",\n", "    969: \"eggnog\",\n\t    970: \"alp\",\n\t    971: \"bubble\",\n\t    972: \"cliff, drop, drop-off\",\n\t    973: \"coral reef\",\n\t    974: \"geyser\",\n\t    975: \"lakeside, lakeshore\",\n\t    976: \"promontory, headland, head, foreland\",\n\t    977: \"sandbar, sand bar\",\n\t    978: \"seashore, coast, seacoast, sea-coast\",\n", "    979: \"valley, vale\",\n\t    980: \"volcano\",\n\t    981: \"ballplayer, baseball player\",\n\t    982: \"groom, bridegroom\",\n\t    983: \"scuba diver\",\n\t    984: \"rapeseed\",\n\t    985: \"daisy\",\n\t    986: \"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum\",\n\t    987: \"corn\",\n\t    988: \"acorn\",\n", "    989: \"hip, rose hip, rosehip\",\n\t    990: \"buckeye, horse chestnut, conker\",\n\t    991: \"coral fungus\",\n\t    992: \"agaric\",\n\t    993: \"gyromitra\",\n\t    994: \"stinkhorn, carrion fungus\",\n\t    995: \"earthstar\",\n\t    996: \"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa\",\n\t    997: \"bolete\",\n\t    998: \"ear, spike, capitulum\",\n", "    999: \"toilet tissue, toilet paper, bathroom tissue\",\n\t}\n\tcolors = [\n\t    \"white\",\n\t    \"yellow\",\n\t    \"blue\",\n\t    \"red\",\n\t    \"green\",\n\t    \"black\",\n\t    \"brown\",\n", "    \"azure\",\n\t    \"ivory\",\n\t    \"teal\",\n\t    \"silver\",\n\t    \"purple\",\n\t    \"navy blue\",\n\t    \"gray\",\n\t    \"orange\",\n\t    \"maroon\",\n\t    \"charcoal\",\n", "    \"aquamarine\",\n\t    \"coral\",\n\t    \"fuchsia\",\n\t    \"wheat\",\n\t    \"lime\",\n\t    \"crimson\",\n\t    \"khaki\",\n\t    \"hot pink\",\n\t    \"magenta\",\n\t    \"plum\",\n", "    \"olive\",\n\t    \"cyan\",\n\t]\n"]}
{"filename": "ddpo/utils/__init__.py", "chunked_list": ["from .serialization import *\n\tfrom .timer import *\n\tfrom .parser import *\n\tfrom .progress import *\n\tfrom .preprocessing import *\n\tfrom .logger import *\n\tfrom .hdf5 import *\n\tfrom .array import *\n\tfrom . import filesystem as fs\n"]}
{"filename": "ddpo/utils/array.py", "chunked_list": ["from functools import partial\n\timport numpy as np\n\timport jax.numpy as jnp\n\timport jax\n\tfrom flax.jax_utils import replicate, unreplicate\n\t@partial(jax.pmap, axis_name=\"pmap\", donate_argnums=0)\n\tdef sync_state_across_devices(state):\n\t    i = jax.lax.axis_index(\"pmap\")\n\t    def select(x):\n\t        return jax.lax.psum(jnp.where(i == 0, x, jnp.zeros_like(x)), \"pmap\")\n", "    return jax.tree_map(select, state)\n\tdef n_params(params):\n\t    return sum(x.size for x in jax.tree_util.tree_leaves(params))\n\tdef worker_sum(n):\n\t    @partial(jax.pmap, axis_name=\"batch\")\n\t    def _sum(mask):\n\t        total = jax.lax.psum(mask, \"batch\")\n\t        return total\n\t    n_rep = replicate(n)\n\t    return unreplicate(_sum(n_rep)).item() / len(n_rep)\n", "def softmax_ref(x, temperature=1.0):\n\t    \"\"\"\n\t    Used to test correctness of pmapped softmax function\n\t    \"\"\"\n\t    assert x.ndim == 1\n\t    x = x * temperature\n\t    z = x - x.max()\n\t    numer = np.exp(z)\n\t    denom = numer.sum()\n\t    return numer / denom\n", "def softmax(x, temperature=1.0):\n\t    x = x * temperature\n\t    @partial(jax.pmap, axis_name=\"batch\")\n\t    def _softmax(x):\n\t        z = x - jax.lax.pmax(x, \"batch\").max(keepdims=True)\n\t        numer = jnp.exp(z)\n\t        denom = jax.lax.psum(numer, \"batch\").sum(keepdims=True)\n\t        # return numer / denom\n\t        return numer / denom\n\t    return _softmax(x)\n"]}
{"filename": "ddpo/utils/timer.py", "chunked_list": ["import time\n\tclass Timer:\n\t    def __init__(self):\n\t        self._start = time.time()\n\t    def __call__(self, reset=True):\n\t        now = time.time()\n\t        diff = now - self._start\n\t        if reset:\n\t            self._start = now\n\t        return diff\n"]}
{"filename": "ddpo/utils/filesystem.py", "chunked_list": ["import os\n\timport io\n\timport re\n\timport json\n\timport pickle\n\timport shutil\n\timport gcsfs\n\timport numpy as np\n\tfrom PIL import Image\n\tbuiltin_open = open\n", "def open(path, bucket=None, mode=\"rb\"):\n\t    if bucket is not None:\n\t        bucket = \"gs://\" + bucket if \"gs://\" not in bucket else bucket\n\t        path = os.path.join(bucket, path)\n\t    if \"gs://\" in path:\n\t        fs = gcsfs.GCSFileSystem()\n\t        return fs.open(path, mode=mode)\n\t    else:\n\t        return builtin_open(path, mode=mode)\n\tdef ls(path, bucket=None, strip=True):\n", "    if bucket is not None:\n\t        bucket = \"gs://\" + bucket if \"gs://\" not in bucket else bucket\n\t        path = os.path.join(bucket, path)\n\t    if \"gs://\" in path:\n\t        fs = gcsfs.GCSFileSystem()\n\t        paths = sorted(fs.ls(path))\n\t        if strip:\n\t            paths = [\"/\".join(p.split(\"/\")[1:]) for p in paths]\n\t        return paths\n\t    else:\n", "        return sorted(os.listdir(path))\n\tdef exists(path):\n\t    if is_remote(path):\n\t        fs = gcsfs.GCSFileSystem()\n\t        return fs.exists(path)\n\t    else:\n\t        return os.path.exists(path)\n\tdef save(path, x):\n\t    with open(path, mode=\"wb\") as f:\n\t        pickle.dump(x, f)\n", "def save_img(path, x):\n\t    # img_bytes = io.BytesIO()\n\t    # np.save(img_bytes, img)\n\t    img = Image.fromarray(np.uint8(x * 255.0))\n\t    with open(path, mode=\"wb\") as f:\n\t        img.save(f, format=\"png\")\n\tdef unpickle(path):\n\t    with open(path, mode=\"rb\") as f:\n\t        return pickle.load(f)\n\tdef is_remote(path):\n", "    return \"gs://\" in path\n\tdef get_bucket(path):\n\t    matched = re.match(\"gs://.+?/\", path)\n\t    assert (\n\t        matched is not None\n\t    ), f\"[ utils/filesystem ] Expected bucket in savepath, got {path}\"\n\t    start, end = matched.span()\n\t    ## `gs://{bucket}/`\n\t    bucket = path[start:end]\n\t    ## `{bucket}`\n", "    bucket = bucket.replace(\"gs://\", \"\").replace(\"/\", \"\")\n\t    path = path[end:]\n\t    print(f\"[ utils/filesystem ] Found bucket in savepath: {bucket} | \" f\"path: {path}\")\n\t    return bucket, path\n\tdef rm(path):\n\t    assert not is_remote(path)\n\t    print(f\"[ utils/filesystem ] Removing {path}\")\n\t    shutil.rmtree(path)\n\tdef save_json(path, x):\n\t    with open(path, mode=\"w\") as f:\n", "        json.dump(x, f)\n\tdef read_json(path):\n\t    with open(path, mode=\"r\") as f:\n\t        return json.load(f)\n\tdef join_and_create(*args):\n\t    \"\"\"Same as os.path.join, except it creates directories along the way.\"\"\"\n\t    path = os.path.join(*args)\n\t    os.umask(0)\n\t    os.makedirs(os.path.dirname(path), exist_ok=True, mode=0o777)\n\t    return path\n"]}
{"filename": "ddpo/utils/hdf5.py", "chunked_list": ["import os\n\timport io\n\timport string\n\timport re\n\timport numpy as np\n\timport random\n\timport jax\n\timport dill\n\timport glob\n\timport h5py\n", "import pytz\n\timport gcsfs\n\tfrom collections import defaultdict\n\tfrom datetime import datetime\n\tfrom google.cloud import storage\n\tfrom PIL import Image\n\timport pdb\n\tfrom ddpo import utils\n\tfrom .serialization import mkdir\n\tfrom .timer import Timer\n", "def encode_jpeg(x, quality=95):\n\t    \"\"\"\n\t    x : np array\n\t    \"\"\"\n\t    if issubclass(x.dtype.type, np.floating) or \"float\" in str(x.dtype.type):\n\t        assert np.abs(x).max() <= 1.0\n\t        x = (x * 255).astype(np.uint8)\n\t    img = Image.fromarray(x)\n\t    buffer = io.BytesIO()\n\t    img.save(buffer, \"JPEG\", quality=quality)\n", "    jpeg = buffer.getvalue()\n\t    return np.frombuffer(jpeg, dtype=np.uint8)\n\tdef decode_jpeg(jpeg):\n\t    stream = io.BytesIO(jpeg)\n\t    img = Image.open(stream)\n\t    x = np.array(img) / 255.0\n\t    return x\n\tdef encode_generic(x):\n\t    buffer = dill.dumps(x)\n\t    return np.frombuffer(buffer, dtype=np.uint8)\n", "def decode_generic(x):\n\t    return dill.loads(x)\n\tdef timestamp(timezone=\"US/Pacific\"):\n\t    tz = pytz.timezone(\"US/Pacific\")\n\t    return datetime.now(tz=tz).strftime(\"%y-%m-%d_%H:%M:%S\")\n\tdef randstr(n=10):\n\t    return \"\".join(random.choices(string.ascii_lowercase + string.digits, k=n))\n\tdef slice2range(slice):\n\t    start = slice.start or 0\n\t    stop = slice.stop\n", "    step = slice.step or 1\n\t    return np.arange(start, stop, step)\n\tclass H5Writer:\n\t    def __init__(self, savepath):\n\t        mkdir(savepath, fname=True)\n\t        self._make_file(savepath)\n\t    def _make_file(self, savepath):\n\t        self.savepath = savepath\n\t        self._file = h5py.File(savepath, \"w\")\n\t        self._sizes = {}\n", "        self._max_sizes = {}\n\t        self._vlens = {}\n\t        self._encode_fns = {}\n\t        self._decode_fns = {}\n\t        self._attrs = [\"_sizes\", \"_max_sizes\", \"_vlens\", \"_encode_fns\", \"_decode_fns\"]\n\t    def configure_from_reader(self, reader, max_size):\n\t        file = reader._files[0] if hasattr(reader, \"_files\") else reader._file\n\t        encode_fns = decode_generic(file.attrs[\"encode_fns\"])\n\t        decode_fns = decode_generic(file.attrs[\"decode_fns\"])\n\t        for field in file.keys():\n", "            self.configure(\n\t                field,\n\t                max_size,\n\t                encode_fn=encode_fns[field],\n\t                decode_fn=decode_fns[field],\n\t            )\n\t    def configure(self, field, max_size, vlen=False, encode_fn=None, decode_fn=None):\n\t        vlen = vlen or encode_fn is not None\n\t        self._sizes[field] = 0\n\t        self._max_sizes[field] = max_size\n", "        self._vlens[field] = vlen\n\t        self._encode_fns[field] = encode_fn\n\t        self._decode_fns[field] = decode_fn\n\t    def _create_dataset(self, field, x):\n\t        dtype = x.dtype if hasattr(x, \"dtype\") else type(x)\n\t        max_size = self._max_sizes[field]\n\t        vlen = self._vlens[field]\n\t        if vlen or not hasattr(x, \"shape\"):\n\t            dtype = h5py.special_dtype(vlen=dtype)\n\t            max_size = (max_size,)\n", "        else:\n\t            max_size = (max_size,) + x.shape\n\t        print(\n\t            f\"[ utils/hdf5 ] Creating dataset {field} | \"\n\t            f\"max size: {max_size} | dtype: {dtype} | \"\n\t            f\"encode: {self._encode_fns[field]} | \"\n\t            f\"decode: {self._decode_fns[field]}\"\n\t        )\n\t        self._file.create_dataset(field, max_size, dtype=dtype, chunks=True)\n\t    def add(self, field, x, skip_encoding=False):\n", "        encode_fn = self._encode_fns[field]\n\t        if encode_fn is not None and not skip_encoding:\n\t            x = encode_fn(x)\n\t        size = self._sizes[field]\n\t        if size == 0:\n\t            self._create_dataset(field, x)\n\t        self._file[field][size] = x\n\t        self._sizes[field] += 1\n\t    def adds(self, field, xs, **kwargs):\n\t        for x in xs:\n", "            self.add(field, x, **kwargs)\n\t    def add_batch(self, batch, mask=None, **kwargs):\n\t        keys = batch.keys()\n\t        sizes = [len(val) for val in batch.values()]\n\t        assert len(set(sizes)) == 1, f\"Batch sizes must be equal, got {sizes}\"\n\t        if mask is None:\n\t            indices = range(sizes[0])\n\t        else:\n\t            indices = np.where(mask)[0]\n\t        start = list(self._sizes.values())[0]\n", "        end = start + len(indices)\n\t        print(f\"[ utils/hdf5 ] Adding {len(indices)} samples | [{start}, {end}]\")\n\t        for i in indices:\n\t            for key, val in batch.items():\n\t                # print(f'[ utils/hdf5 ] Adding {key} | {i}')\n\t                self.add(key, val[i], **kwargs)\n\t        return len(indices)\n\t    def add_sliced(self, batch):\n\t        keys = batch.keys()\n\t        sizes = [len(val) for val in batch.values()]\n", "        assert len(set(sizes)) == 1, f\"Batch sizes must be equal, got {sizes}\"\n\t        size = sizes[0]\n\t        for field, x in batch.items():\n\t            start = self._sizes[field]\n\t            end = start + size\n\t            if start == 0:\n\t                self._create_dataset(field, x[0])\n\t            print(f\"[ utils/hdf5 ] Adding {size} samples | [{start}, {end}]\")\n\t            try:\n\t                self._file[field][start:end] = x[:]\n", "                self._sizes[field] += size\n\t            except:\n\t                pdb.set_trace()\n\t    def close(self):\n\t        for field, size in self._sizes.items():\n\t            old_shape = self._file[field].shape\n\t            new_shape = (size,) + old_shape[1:]\n\t            print(\n\t                f\"[ utils/hdf5 ] Resizing dataset {field} | {old_shape} -> {new_shape}\"\n\t            )\n", "            self._file[field].resize(new_shape)\n\t        self._file.attrs.update(\n\t            {\n\t                \"encode_fns\": encode_generic(self._encode_fns),\n\t                \"decode_fns\": encode_generic(self._decode_fns),\n\t            }\n\t        )\n\t        self._file.close()\n\t    def write_images(self, savepath=None, start=0):\n\t        savepath = savepath or self.savepath\n", "        w = jax.process_index()\n\t        i = 0\n\t        for x in self._file[\"images\"]:\n\t            x = self._decode_fns[\"images\"](x)\n\t            utils.save_image(os.path.join(savepath, f\"{w}_{i}.png\"), x)\n\t            i += 1\n\t        return i\n\tclass H5Reader:\n\t    def __init__(self, loadpath, mode=\"r\"):\n\t        self._file = h5py.File(loadpath, mode=mode)\n", "        self._encode_fns = decode_generic(self._file.attrs[\"encode_fns\"])\n\t        self._decode_fns = decode_generic(self._file.attrs[\"decode_fns\"])\n\t        self._keys = list(self._file.keys())\n\t        self._sizes = {key: self._file[key].shape[0] for key in self._keys}\n\t    @property\n\t    def sizes(self):\n\t        return self._sizes\n\t    def get(self, field, idx):\n\t        x = self._file[field][idx]\n\t        decode_fn = self._decode_fns[field]\n", "        if decode_fn is not None:\n\t            if isinstance(idx, slice):\n\t                x = np.stack([decode_fn(xi) for xi in x])\n\t            else:\n\t                x = decode_fn(x)\n\t        return x\n\t    def load_all(self):\n\t        batch = {key: list(self._file[key][:]) for key in self._file.keys()}\n\t        return batch\n\t    def __getitem__(self, idx):\n", "        batch = {}\n\t        for key in self._keys:\n\t            batch[key] = self.get(key, idx)\n\t        return batch\n\tclass H5Modifier(H5Reader, H5Writer):\n\t    def __init__(self, loadpath):\n\t        super().__init__(loadpath, mode=\"a\")\n\tclass RemoteWriter(H5Writer):\n\t    def __init__(\n\t        self, savepath, split_size=1e3, bucket=None, tmpdir=\"/tmp\", write_images=False\n", "    ):\n\t        if bucket is None:\n\t            bucket, savepath = utils.fs.get_bucket(savepath)\n\t        self._savepath = savepath\n\t        self._split_size = split_size\n\t        self._tmpdir = tmpdir\n\t        self._write_images = write_images\n\t        self._i = 0\n\t        self._client = storage.Client()\n\t        self._bucket = self._client.get_bucket(bucket)\n", "        self._update_paths()\n\t        super().__init__(self._local_path)\n\t    def __len__(self):\n\t        return max(self._sizes.values())\n\t    def _test_permissions(self):\n\t        fpath = os.path.abspath(__file__)\n\t        fullpath = os.path.join(self._savepath, \"_test.py\")\n\t        blob = self._bucket.blob(fullpath)\n\t        blob.upload_from_filename(fpath)\n\t        print(\"[ utils/hdf5 ] Successfully uploaded test file to bucket\")\n", "    def _get_local_attrs(self):\n\t        fields = list(self._file.keys())\n\t        attrs = {attr: getattr(self, attr) for attr in self._attrs}\n\t        return attrs | {\"fields\": fields}\n\t    def _set_local_attrs(self, attrs):\n\t        fields = attrs[\"fields\"]\n\t        for field in fields:\n\t            kwargs = {\n\t                \"max_size\": attrs[\"_max_sizes\"][field],\n\t                \"vlen\": attrs[\"_vlens\"][field],\n", "                \"encode_fn\": attrs[\"_encode_fns\"][field],\n\t                \"decode_fn\": attrs[\"_decode_fns\"][field],\n\t            }\n\t            super().configure(field, **kwargs)\n\t    def _update_paths(self):\n\t        worker = jax.process_index()\n\t        fname = f\"{timestamp()}-w{worker}-{randstr()}.hdf5\"\n\t        self._local_path = os.path.join(self._tmpdir, fname)\n\t        self._remote_path = os.path.join(self._savepath, fname)\n\t        print(f\"[ utils/hdf5 ] New fname: {fname}\")\n", "    def configure(self, field, **kwargs):\n\t        super().configure(field, max_size=self._split_size, **kwargs)\n\t    def add(self, *args, **kwargs):\n\t        super().add(*args, **kwargs)\n\t        if all([size >= self._split_size for size in self._sizes.values()]):\n\t            if len(set(self._sizes.values())) > 1:\n\t                print(f\"[ utils/hdf5 ] Warning: sizes imbalanced | \" f\"{self._sizes}\")\n\t            local_attrs = self._close_local()\n\t            ## initialize new local file\n\t            self._update_paths()\n", "            self._make_file(self._local_path)\n\t            self._set_local_attrs(local_attrs)\n\t        elif any([size >= 2 * self._split_size for size in self._sizes.values()]):\n\t            print(\n\t                f\"[ utils/hdf5 ] Warning: local hdf5 size unexpectedly large | \"\n\t                f\"{self._sizes}\"\n\t            )\n\t    def close(self):\n\t        if len(self):\n\t            self._close_local()\n", "    def _close_local(self):\n\t        ## get attributes of local file\n\t        local_attrs = self._get_local_attrs()\n\t        if self._write_images:\n\t            savedir = os.path.dirname(self._remote_path)\n\t            writepath = os.path.join(f\"gs://{self._bucket.name}\", savedir)\n\t            self._i = super().write_images(writepath, self._i)\n\t        ## close local file\n\t        super().close()\n\t        ## copy local file to bucket\n", "        print(\n\t            f\"[ utils/hdf5 ] Syncing entries to \"\n\t            f\"gs://{self._bucket.name}/{self._remote_path} | \"\n\t            f\"{self._sizes}\"\n\t        )\n\t        blob = self._bucket.blob(self._remote_path)\n\t        blob.upload_from_filename(self._local_path)\n\t        ## delete local file\n\t        os.remove(self._local_path)\n\t        return local_attrs\n", "class RemoteReader:\n\t    def __init__(self, loadpath, project=\"rail-tpus\", bucket=None):\n\t        if bucket is None:\n\t            bucket, loadpath = utils.fs.get_bucket(loadpath)\n\t        self._client = storage.Client()\n\t        self._bucket = self._client.get_bucket(bucket)\n\t        self._remote_fs = gcsfs.GCSFileSystem(project=project)\n\t        self._current_fid = None\n\t        self._fetch_sizes(loadpath)\n\t        self.weighted = False\n", "    def _fetch_sizes(self, loadpath):\n\t        fullpath = os.path.join(f\"gs://{self._bucket.name}\", loadpath, \"sizes.pkl\")\n\t        sizes = utils.fs.unpickle(fullpath)\n\t        self._remote_paths = sorted(sizes.keys())\n\t        self._total_size = sum(sizes.values())\n\t        print(\n\t            f\"[ utils/hdf5 ] Found {len(self._remote_paths)} files | \"\n\t            f\"{self._total_size} entries\"\n\t        )\n\t        self._idx2file = np.zeros(self._total_size, dtype=np.int64)\n", "        self._idx2idx = np.zeros(self._total_size, dtype=np.int64)\n\t        start = 0\n\t        for fid, fname in enumerate(self._remote_paths):\n\t            size = sizes[fname]\n\t            end = start + size\n\t            self._idx2file[start:end] = fid\n\t            self._idx2idx[start:end] = np.arange(size)\n\t            start = end\n\t    def _fetch_file(self, fid):\n\t        if fid == self._current_fid:\n", "            return\n\t        path = self._remote_paths[fid]\n\t        file = self._load_remote(path)\n\t        self._keys = list(file.keys())\n\t        self._decode_fns = decode_generic(file.attrs[\"decode_fns\"])\n\t        self._current_file = file\n\t        self._current_fid = fid\n\t    def __len__(self):\n\t        return self._total_size\n\t    def get(self, remote_idx, field=\"images\"):\n", "        if isinstance(remote_idx, slice):\n\t            return np.stack(\n\t                [self.get(idx, field=field) for idx in slice2range(remote_idx)], axis=0\n\t            )\n\t        else:\n\t            fid = self._idx2file[remote_idx]\n\t            local_idx = self._idx2idx[remote_idx]\n\t            self._fetch_file(fid)\n\t            x = self._current_file[field][local_idx]\n\t            decode_fn = self._decode_fns[field]\n", "            if decode_fn is not None:\n\t                x = decode_fn(x)\n\t            return x\n\t    def _load_remote(self, remote_path):\n\t        # dtype = h5py.special_dtype(vlen=np.uint8)\n\t        fullpath = os.path.join(self._bucket.name, remote_path)\n\t        f = self._remote_fs.open(fullpath, cache_type=\"block\")\n\t        h5file = h5py.File(f, \"r\")\n\t        return h5file\n\t    def __getitem__(self, idx):\n", "        fid = self._idx2file[idx]\n\t        self._fetch_file(fid)\n\t        batch = {}\n\t        for key in self._keys:\n\t            batch[key] = self.get(idx, field=key)\n\t        if self.weighted:\n\t            batch[\"weights\"] = self.weights[idx]\n\t        return batch\n\t    def make_weights(self, field, temperature, by_prompt):\n\t        labels = self.get(slice(0, len(self)), field).squeeze()\n", "        if by_prompt:\n\t            prompts = self.get(slice(0, len(self)), \"inference_prompts\").squeeze()\n\t            self.weights = np.empty_like(labels)\n\t            for prompt in np.unique(prompts):\n\t                mask = prompts == prompt\n\t                self.weights[mask] = (\n\t                    utils.softmax_ref(labels[mask], temperature=temperature)\n\t                    * mask.sum()\n\t                )\n\t        else:\n", "            self.weights = utils.softmax_ref(labels, temperature=temperature) * len(\n\t                self\n\t            )\n\t        self.weighted = True\n\t        ## sanity check\n\t        cumsum = np.cumsum(np.sort(self.weights)[::-1] / len(self))\n\t        n = ((cumsum <= 0.9) * np.arange(len(cumsum))).max()\n\t        print(\n\t            \"[ utils/hdf5 ] Weights sanity check: \"\n\t            f\"{n} / {len(cumsum)} ({(n / len(cumsum)):.3}%) samples \"\n", "            \"account for 90% of the weight | \"\n\t            f\"temperature: {temperature}\"\n\t        )\n\tclass SlowRemoteReader:\n\t    def __init__(self, bucket, loadpath, project=\"rail-tpus\"):\n\t        self._client = storage.Client()\n\t        self._bucket = self._client.get_bucket(bucket)\n\t        self._remote_fs = gcsfs.GCSFileSystem(project=project)\n\t        remote_paths = [\n\t            blob.name\n", "            for blob in self._bucket.list_blobs(prefix=loadpath)\n\t            if \".hdf5\" in blob.name\n\t        ]\n\t        self._remote_paths = sorted(remote_paths)\n\t        print(f\"[ utils/hdf5 ] Found {len(remote_paths)} files\")\n\t        if len(self._remote_paths):\n\t            self._fetch_files(self._remote_paths)\n\t        else:\n\t            self._idx2file = []\n\t    def _fetch_files(self, remote_paths):\n", "        timer = Timer()\n\t        field = \"images\"\n\t        self._files = [self._load_remote(path) for path in remote_paths]\n\t        total_size = sum([len(file[field]) for file in self._files])\n\t        print(\n\t            f\"[ utils/hdf5 ] Loaded {len(remote_paths)} files containing \"\n\t            f\"{total_size} entries in {timer():2f} seconds\"\n\t        )\n\t        ## decoding functions\n\t        self._decode_fns = decode_generic(self._files[0].attrs[\"decode_fns\"])\n", "        self._idx2file = np.zeros(total_size, dtype=np.int64)\n\t        self._idx2idx = np.zeros(total_size, dtype=np.int64)\n\t        self._keys = list(self._files[0].keys())\n\t        start = 0\n\t        for fid, file in enumerate(self._files):\n\t            size = len(file[field])\n\t            end = start + size\n\t            self._idx2file[start:end] = fid\n\t            self._idx2idx[start:end] = np.arange(size)\n\t            start = end\n", "    def __len__(self):\n\t        return len(self._idx2file)\n\t    def get(self, remote_idx, field=\"images\"):\n\t        if isinstance(remote_idx, slice):\n\t            return np.stack(\n\t                [self.get(idx, field=field) for idx in slice2range(remote_idx)], axis=0\n\t            )\n\t        else:\n\t            fid = self._idx2file[remote_idx]\n\t            local_idx = self._idx2idx[remote_idx]\n", "            x = self._files[fid][field][local_idx]\n\t            decode_fn = self._decode_fns[field]\n\t            if decode_fn is not None:\n\t                x = decode_fn(x)\n\t        return x\n\t    def _load_remote(self, remote_path):\n\t        fullpath = os.path.join(self._bucket.name, remote_path)\n\t        f = self._remote_fs.open(fullpath, cache_type=\"block\")\n\t        h5file = h5py.File(f, \"r\")\n\t        return h5file\n", "    def load_all(self):\n\t        batch = defaultdict(lambda: list())\n\t        for file in self._files:\n\t            keys = file.keys()\n\t            for key in keys:\n\t                data = file[key][:]\n\t                batch[key].extend(data)\n\t        return batch\n\t    def __getitem__(self, idx):\n\t        batch = {}\n", "        for key in self._keys:\n\t            batch[key] = self.get(idx, field=key)\n\t        return batch\n\tclass LocalReader(SlowRemoteReader):\n\t    def __init__(self, loadpath):\n\t        remote_paths = glob.glob(os.path.join(loadpath, \"*.hdf5\"))\n\t        self._remote_paths = sorted(remote_paths)\n\t        print(f\"[ utils/hdf5 ] Found {len(remote_paths)} files at {loadpath}\")\n\t        self._fetch_files(self._remote_paths)\n\t    def _load_remote(self, remote_path):\n", "        f = open(remote_path, mode=\"rb\")\n\t        h5file = h5py.File(f, \"r\")\n\t        return h5file\n"]}
{"filename": "ddpo/utils/progress.py", "chunked_list": ["import time\n\timport math\n\timport numpy as np\n\timport pdb\n\tclass Progress:\n\t    def __init__(\n\t        self,\n\t        total,\n\t        name=\"Progress\",\n\t        ncol=3,\n", "        max_length=20,\n\t        indent=4,\n\t        line_width=100,\n\t        speed_update_freq=100,\n\t    ):\n\t        self.total = total\n\t        self.name = name\n\t        self.ncol = ncol\n\t        self.max_length = max_length\n\t        self.indent = indent\n", "        self.line_width = line_width\n\t        self._speed_update_freq = speed_update_freq\n\t        self._step = 0\n\t        self._prev_line = \"\\033[F\"\n\t        self._clear_line = \" \" * self.line_width\n\t        self._pbar_size = self.ncol * self.max_length\n\t        self._complete_pbar = \"#\" * self._pbar_size\n\t        self._incomplete_pbar = \" \" * self._pbar_size\n\t        self.lines = [\"\"]\n\t        self.fraction = \"{} / {}\".format(0, self.total)\n", "        self.resume()\n\t    def __call__(self, *args, **kwargs):\n\t        return self.update(*args, **kwargs)\n\t    def update(self, description=None, n=1):\n\t        if description is None:\n\t            description = {}\n\t        self._step += n\n\t        if self._step % self._speed_update_freq == 0:\n\t            self._time_split = time.time()\n\t            self._step0 = self._step\n", "        self.set_description(description)\n\t    def resume(self):\n\t        self._skip_lines = 1\n\t        print(\"\\n\", end=\"\")\n\t        self._time_init = time.time()\n\t        self._time_split = time.time()\n\t        self._step0 = self._step\n\t    def pause(self):\n\t        self._clear()\n\t        self._skip_lines = 1\n", "    def set_description(self, params=[]):\n\t        if type(params) == dict:\n\t            params = sorted([(key, val) for key, val in params.items()])\n\t        ########\n\t        # Time #\n\t        ########\n\t        t = self.get_time()\n\t        params.append((\"T\", f\"{t:.2f} sec\"))\n\t        ############\n\t        # Position #\n", "        ############\n\t        self._clear()\n\t        ###########\n\t        # Percent #\n\t        ###########\n\t        percent, fraction = self._format_percent(self._step, self.total)\n\t        self.fraction = fraction\n\t        #########\n\t        # Speed #\n\t        #########\n", "        speed = self._format_speed(self._step)\n\t        ##########\n\t        # Params #\n\t        ##########\n\t        num_params = len(params)\n\t        nrow = math.ceil(num_params / self.ncol)\n\t        params_split = self._chunk(params, self.ncol)\n\t        params_string, lines = self._format(params_split)\n\t        self.lines = lines\n\t        description = \"{} | {}{}\".format(percent, speed, params_string)\n", "        print(description)\n\t        self._skip_lines = nrow + 1\n\t    def get_time(self):\n\t        return time.time() - self._time_init\n\t    def append_description(self, descr):\n\t        self.lines.append(descr)\n\t    def _clear(self):\n\t        position = self._prev_line * self._skip_lines\n\t        empty = \"\\n\".join([self._clear_line for _ in range(self._skip_lines)])\n\t        print(position, end=\"\")\n", "        print(empty)\n\t        print(position, end=\"\")\n\t    def _format_percent(self, n, total):\n\t        if total:\n\t            percent = n / float(total)\n\t            complete_entries = int(percent * self._pbar_size)\n\t            incomplete_entries = self._pbar_size - complete_entries\n\t            pbar = (\n\t                self._complete_pbar[:complete_entries]\n\t                + self._incomplete_pbar[:incomplete_entries]\n", "            )\n\t            fraction = \"{} / {}\".format(n, total)\n\t            string = \"{} [{}] {:3d}%\".format(fraction, pbar, int(percent * 100))\n\t        else:\n\t            fraction = \"{}\".format(n)\n\t            string = \"{} iterations\".format(n)\n\t        return string, fraction\n\t    def _format_speed(self, n):\n\t        num_steps = n - self._step0\n\t        t = time.time() - self._time_split\n", "        speed = num_steps / t\n\t        string = \"{:.1f} Hz\".format(speed)\n\t        if num_steps > 0:\n\t            self._speed = string\n\t        return string\n\t    def _chunk(self, l, n):\n\t        return [l[i : i + n] for i in range(0, len(l), n)]\n\t    def _format(self, chunks):\n\t        lines = [self._format_chunk(chunk) for chunk in chunks]\n\t        lines.insert(0, \"\")\n", "        padding = \"\\n\" + \" \" * self.indent\n\t        string = padding.join(lines)\n\t        return string, lines\n\t    def _format_chunk(self, chunk):\n\t        line = \" | \".join([self._format_param(param) for param in chunk])\n\t        return line\n\t    def _format_param(self, param):\n\t        k, v = param\n\t        if (type(v) == float or isinstance(v, np.floating)) and abs(v) < 1e-4:\n\t            return \"{} : {:.2e}\".format(k, v)[: self.max_length]\n", "        else:\n\t            return \"{} : {}\".format(k, v)[: self.max_length]\n\t    def stamp(self):\n\t        if self.lines != [\"\"]:\n\t            params = \" | \".join(self.lines)\n\t            string = \"[ {} ] {}{} | {}\".format(\n\t                self.name, self.fraction, params, self._speed\n\t            )\n\t            self._clear()\n\t            print(string, end=\"\\n\")\n", "            self._skip_lines = 1\n\t        else:\n\t            self._clear()\n\t            self._skip_lines = 0\n\t    def close(self):\n\t        self.pause()\n\tclass Silent:\n\t    def __init__(self, *args, **kwargs):\n\t        pass\n\t    def __getattr__(self, attr):\n", "        return lambda *args: None\n\tif __name__ == \"__main__\":\n\t    silent = Silent()\n\t    silent.update()\n\t    silent.stamp()\n\t    num_steps = 1000\n\t    progress = Progress(num_steps)\n\t    for i in range(num_steps):\n\t        params = [\n\t            [\"A\", \"{:06d}\".format(i)],\n", "            [\"B\", \"{:06d}\".format(i)],\n\t            [\"C\", \"{:06d}\".format(i)],\n\t            [\"D\", \"{:06d}\".format(i)],\n\t            [\"E\", \"{:06d}\".format(i)],\n\t            [\"F\", \"{:06d}\".format(i)],\n\t            [\"G\", \"{:06d}\".format(i)],\n\t            [\"H\", \"{:06d}\".format(i)],\n\t        ]\n\t        progress(params)\n\t        time.sleep(0.01)\n", "    progress.close()\n"]}
{"filename": "ddpo/training/diffusion.py", "chunked_list": ["import jax\n\timport jax.numpy as jnp\n\tfrom diffusers.models import vae_flax\n\tdef train_step(\n\t    state,\n\t    text_encoder_params,\n\t    batch,\n\t    train_rng,\n\t    noise_scheduler_state,\n\t    static_broadcasted,\n", "    weights=None,\n\t):\n\t    noise_scheduler, text_encoder, train_cfg, guidance_scale = static_broadcasted\n\t    dropout_rng, sample_rng, new_train_rng = jax.random.split(train_rng, 3)\n\t    def compute_loss(params):\n\t        latent_dist = vae_flax.FlaxDiagonalGaussianDistribution(batch[\"vae\"])\n\t        latents = latent_dist.sample(sample_rng)\n\t        # (NHWC) -> (NCHW)\n\t        latents = jnp.transpose(latents, (0, 3, 1, 2))\n\t        latents = latents * 0.18215\n", "        # Sample noise that we'll add to the latents\n\t        noise_rng, timestep_rng = jax.random.split(sample_rng)\n\t        noise = jax.random.normal(noise_rng, latents.shape)\n\t        # Sample a random timestep for each image\n\t        batch_size = latents.shape[0]\n\t        timesteps = jax.random.randint(\n\t            timestep_rng,\n\t            shape=(batch_size,),\n\t            minval=0,\n\t            maxval=noise_scheduler.config.num_train_timesteps,\n", "        )\n\t        # Add noise to the latents according to the noise magnitude at each timestep\n\t        # (this is the forward diffusion process)\n\t        noisy_latents = noise_scheduler.add_noise(\n\t            noise_scheduler_state,\n\t            latents,\n\t            noise,\n\t            timesteps,\n\t        )\n\t        # Get the text embedding for conditioning\n", "        encoder_hidden_states = text_encoder(\n\t            batch[\"input_ids\"],\n\t            params=text_encoder_params,\n\t            train=False,\n\t        )[0]\n\t        # Predict the noise residual and compute loss\n\t        unet_outputs = state.apply_fn(\n\t            {\"params\": params},\n\t            noisy_latents,\n\t            timesteps,\n", "            encoder_hidden_states,\n\t            train=True,\n\t        )\n\t        if train_cfg:\n\t            # Get the text embedding for null conditioning\n\t            uncond_hidden_states = text_encoder(\n\t                batch[\"uncond_text\"],\n\t                params=text_encoder_params,\n\t                train=False,\n\t            )[0]\n", "            uncond_outputs = state.apply_fn(\n\t                {\"params\": params},\n\t                noisy_latents,\n\t                timesteps,\n\t                uncond_hidden_states,\n\t                train=True,\n\t            )\n\t            noise_pred = uncond_outputs.sample + guidance_scale * (\n\t                unet_outputs.sample - uncond_outputs.sample\n\t            )\n", "        else:\n\t            noise_pred = unet_outputs.sample\n\t        loss = ((noise - noise_pred) ** 2).mean(axis=range(1, noise.ndim))\n\t        if weights is None:\n\t            ## average over batch dimension\n\t            loss = loss.mean()\n\t        else:\n\t            ## multiply loss by weights\n\t            assert loss.size == weights.size\n\t            loss = (loss * weights).sum()\n", "        return loss\n\t    grad_fn = jax.value_and_grad(compute_loss)\n\t    loss, grad = grad_fn(state.params)\n\t    loss = jax.lax.pmean(loss, \"batch\")\n\t    grad = jax.lax.pmean(grad, \"batch\")\n\t    new_state = state.apply_gradients(grads=grad)\n\t    return new_state, loss, new_train_rng\n\tdef vae_decode(latents, vae_params, apply_fn, decode_fn):\n\t    ## cannot pass in pipeline.vae directly with static_broadcasted_argnums\n\t    ## because it is not hashable;\n", "    ## expects latents in NCHW format (batch_size, 4, 64, 64)\n\t    latents = latents / 0.18215\n\t    images = apply_fn({\"params\": vae_params}, latents, method=decode_fn).sample\n\t    images = (images / 2 + 0.5).clip(0, 1).transpose(0, 2, 3, 1)\n\t    return images\n\tdef text_encode(input_ids, params, text_encoder):\n\t    return text_encoder(input_ids, params=params)[0]\n\tdef patch_scheduler(pipeline):\n\t    from ddpo import patch\n\t    pipeline.scheduler = patch.scheduling_ddim_flax.FlaxDDIMScheduler(\n", "        num_train_timesteps=pipeline.scheduler.config.num_train_timesteps,\n\t        beta_start=pipeline.scheduler.config.beta_start,\n\t        beta_end=pipeline.scheduler.config.beta_end,\n\t        beta_schedule=pipeline.scheduler.config.beta_schedule,\n\t        trained_betas=pipeline.scheduler.config.trained_betas,\n\t        set_alpha_to_one=pipeline.scheduler.config.set_alpha_to_one,\n\t        steps_offset=pipeline.scheduler.config.steps_offset,\n\t        prediction_type=pipeline.scheduler.config.prediction_type,\n\t    )\n"]}
{"filename": "ddpo/training/policy_gradient.py", "chunked_list": ["import jax\n\timport jax.numpy as jnp\n\tfrom diffusers.models import vae_flax\n\timport pdb\n\tfrom functools import partial\n\timport optax\n\tfrom flax.training.train_state import TrainState\n\tfrom flax.core.frozen_dict import FrozenDict\n\tfrom typing import Any, Callable\n\tfrom ddpo.diffusers_patch.scheduling_ddim_flax import FlaxDDIMScheduler\n", "class AccumulatingTrainState(TrainState):\n\t    \"\"\"A TrainState that accumulates gradients over multiple steps before\n\t    applying them. This is an alternative to `optax.MultiSteps` that uses less\n\t    memory because it takes `do_update` as a static argument (rather than\n\t    computing it internally).\n\t    Since MultiSteps effectively computes `do_update` internally and uses\n\t    `jax.lax.cond` to select the output, it must allocate an additional buffer\n\t    with the size of `opt_state` because it doesn't \"know\" at compile time\n\t    whether it will update `opt_state` or not. Instead, this version leads to\n\t    two compiled functions, one for each value of `do_update`, meaning it only\n", "    allocates one buffer for `opt_state` in each case.\n\t    This still requires an additional buffer of size `params` to store the\n\t    accumulated gradients, but that is unavoidable.\"\"\"\n\t    grad_acc: FrozenDict[str, Any]\n\t    n_acc: int\n\t    def apply_gradients(self, *, grads, do_update, **kwargs):\n\t        if do_update:\n\t            new_state = super().apply_gradients(\n\t                grads=jax.tree_map(\n\t                    lambda ga, g: (ga + g) / (self.n_acc + 1), self.grad_acc, grads\n", "                ),\n\t                **kwargs\n\t            )\n\t            new_state = new_state.replace(\n\t                grad_acc=jax.tree_map(jnp.zeros_like, self.grad_acc), n_acc=0\n\t            )\n\t        else:\n\t            new_state = self.replace(\n\t                grad_acc=jax.tree_map(jnp.add, self.grad_acc, grads),\n\t                n_acc=self.n_acc + 1,\n", "            )\n\t        return new_state\n\t    @classmethod\n\t    def create(cls, *, params, **kwargs):\n\t        return super().create(\n\t            params=params,\n\t            grad_acc=jax.tree_map(jnp.zeros_like, params),\n\t            n_acc=0,\n\t            **kwargs\n\t        )\n", "ADV_CLIP_MAX = 10.0\n\tdef train_step(\n\t    state,\n\t    batch,\n\t    noise_scheduler_state,\n\t    # static arguments below\n\t    noise_scheduler,\n\t    train_cfg,\n\t    guidance_scale,\n\t    eta,\n", "    clip_range,\n\t    # whether to update the optimizer or accumulate gradients. this has to be\n\t    # computed outside of a jitted function for memory reasons.\n\t    do_opt_update,\n\t):\n\t    assert isinstance(state, AccumulatingTrainState)\n\t    assert isinstance(noise_scheduler, FlaxDDIMScheduler)\n\t    assert (\n\t        batch[\"latents\"].shape[0]\n\t        == batch[\"ts\"].shape[0]\n", "        == batch[\"next_latents\"].shape[0]\n\t        == batch[\"log_probs\"].shape[0]\n\t    )\n\t    def compute_loss(params):\n\t        unet_outputs = state.apply_fn(\n\t            {\"params\": params},\n\t            batch[\"latents\"],\n\t            batch[\"ts\"],\n\t            batch[\"prompt_embeds\"],\n\t            train=True,\n", "        )\n\t        if train_cfg:\n\t            uncond_outputs = state.apply_fn(\n\t                {\"params\": params},\n\t                batch[\"latents\"],\n\t                batch[\"ts\"],\n\t                batch[\"uncond_embeds\"],\n\t                train=True,\n\t            )\n\t            noise_pred = uncond_outputs.sample + guidance_scale * (\n", "                unet_outputs.sample - uncond_outputs.sample\n\t            )\n\t        else:\n\t            noise_pred = unet_outputs.sample\n\t        # just computes the log prob of batch[\"next_latents\"] given noise_pred\n\t        _, _, log_prob = noise_scheduler.step(\n\t            noise_scheduler_state,\n\t            noise_pred,\n\t            batch[\"ts\"],\n\t            batch[\"latents\"],\n", "            key=None,\n\t            prev_sample=batch[\"next_latents\"],\n\t            eta=eta,\n\t        )\n\t        # ppo logic\n\t        advantages = jnp.clip(batch[\"advantages\"], -ADV_CLIP_MAX, ADV_CLIP_MAX)\n\t        ratio = jnp.exp(log_prob - batch[\"log_probs\"])\n\t        unclipped_loss = -advantages * ratio\n\t        clipped_loss = -advantages * jnp.clip(ratio, 1.0 - clip_range, 1.0 + clip_range)\n\t        loss = jnp.mean(jnp.maximum(unclipped_loss, clipped_loss))\n", "        # debugging values\n\t        info = {}\n\t        # John Schulman says that (ratio - 1) - log(ratio) is a better\n\t        # estimator, but most existing code uses this so...\n\t        # http://joschu.net/blog/kl-approx.html\n\t        info[\"approx_kl\"] = 0.5 * jnp.mean((log_prob - batch[\"log_probs\"]) ** 2)\n\t        info[\"clipfrac\"] = jnp.mean(jnp.abs(ratio - 1.0) > clip_range)\n\t        info[\"loss\"] = loss\n\t        return loss, info\n\t    grad_fn = jax.grad(compute_loss, has_aux=True)\n", "    grad, info = grad_fn(state.params)\n\t    grad = jax.lax.pmean(grad, \"batch\")\n\t    info = jax.lax.pmean(info, \"batch\")\n\t    new_state = state.apply_gradients(grads=grad, do_update=do_opt_update)\n\t    return new_state, info\n"]}
{"filename": "ddpo/training/__init__.py", "chunked_list": ["from . import diffusion\n\tfrom . import policy_gradient\n\tfrom .callbacks import *\n\tfrom .prompts import make_prompts\n\tfrom .diffusion import *\n"]}
{"filename": "ddpo/training/prompts.py", "chunked_list": ["import random\n\timport numpy as np\n\timport pdb\n\tfrom ddpo import utils\n\tfrom ddpo.utils import imagenet\n\timport inflect\n\tinflect_engine = inflect.engine()\n\t# --------------------------------- general api --------------------------------#\n\tdef batchify(prompt_fn, batch_size, **kwargs):\n\t    inference_prompts, training_prompts, prompt_metadata = zip(\n", "        *[prompt_fn(**kwargs) for _ in range(batch_size)]\n\t    )\n\t    return list(inference_prompts), training_prompts, prompt_metadata\n\tdef batchify_identical(prompt_fn, batch_size, **kwargs):\n\t    inference_prompt, training_prompts, prompt_metadata = prompt_fn(**kwargs)\n\t    inference_batch = [inference_prompt for _ in range(batch_size)]\n\t    training_batch = [training_prompts for _ in range(batch_size)]\n\t    metadata_batch = [prompt_metadata for _ in range(batch_size)]\n\t    return inference_batch, training_batch, metadata_batch\n\tdef make_prompts(fn_name, batch_size, identical_batch=False, **kwargs):\n", "    prompt_fn = globals()[fn_name]\n\t    if identical_batch:\n\t        return batchify_identical(prompt_fn, batch_size, **kwargs)\n\t    else:\n\t        return batchify(prompt_fn, batch_size, **kwargs)\n\t# ---------------------------- specific experiments ----------------------------#\n\tdef person_pet(evaluate=False):\n\t    training_prompts = [\"a photo of a person with their pet\"]\n\t    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n", "def consistent_animals(evaluate=False):\n\t    inference_prompt = \"a husky and a shoebill stork on the beach in a single image\"\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef get_random_class(idx=None, low=None, high=None):\n\t    if idx is not None:\n\t        label = imagenet.classes[idx]\n\t    elif low is not None and high is not None:\n\t        idx = random.randint(low, high)\n\t        label = imagenet.classes[idx]\n", "    else:\n\t        label = random.choice(imagenet.classes)\n\t    # if ',' in label:\n\t    #     label = label.split(',')[0]\n\t    return label\n\tdef consistent_imagenet_animals(colors=False):\n\t    class1 = get_random_class()\n\t    class2 = get_random_class()\n\t    if colors:\n\t        inference_prompt = (\n", "            f\"a realistic photo of a {random.choice(imagenet.colors)} {class1} and \"\n\t            f\"a {random.choice(imagenet.colors)} {class2}\"\n\t        )\n\t    else:\n\t        inference_prompt = f\"a realistic photo of a {class1} and a {class2}\"\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef consistent_imagenet_animals_3(colors=False):\n\t    class1 = get_random_class()\n\t    class2 = get_random_class()\n", "    class3 = get_random_class()\n\t    if colors:\n\t        inference_prompt = (\n\t            f\"a realistic photo of a {random.choice(imagenet.colors)} {class1}, \"\n\t            f\"a {random.choice(imagenet.colors)} {class2}, and \"\n\t            f\"a {random.choice(imagenet.colors)} {class3}\"\n\t        )\n\t    else:\n\t        inference_prompt = (\n\t            f\"a realistic photo of a {class1}, a {class2}, and a {class3}\"\n", "        )\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef n_fingers(evaluate=False):\n\t    n = random.randint(1, 4)\n\t    inference_prompt = f'a photo of a hand holding up {n} finger{\"s\" if n > 1 else \"\"}'\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef imagenet_single(evaluate=False, idx=None):\n\t    class1 = get_random_class(idx=idx)\n", "    inference_prompt = f\"a realistic photo of a {class1}\"\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef imagenet_aesthetic(evaluate=False):\n\t    class1 = get_random_class()\n\t    training_prompts = [f\"a realistic photo of a {class1}\"]\n\t    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n\tdef imagenet_simple(evaluate=False, idx=None):\n\t    class1 = get_random_class(idx=idx)\n", "    inference_prompt = f\"a {class1}\"\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef imagenet_dogs(evaluate=False, idx=None):\n\t    class1 = get_random_class(idx=idx, low=151, high=268)\n\t    training_prompts = [f\"{class1}\"]\n\t    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n\tdef animal_debug(evaluate=False, idx=None):\n\t    training_prompts = [\"a peacock\"]\n", "    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n\tdef simple_dogs(evaluate=False, idx=None):\n\t    class1 = get_random_class(idx=idx, low=151, high=268)\n\t    training_prompts = [f\"{class1}\"]\n\t    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n\tdef imagenet_animals(evaluate=False, idx=None):\n\t    class1 = get_random_class(idx=idx, low=0, high=397)\n\t    training_prompts = [f\"{class1}\"]\n", "    inference_prompt = random.choice(training_prompts)\n\t    return inference_prompt, training_prompts, {}\n\tdef from_file(loadpath, evaluate=False, idx=None):\n\t    prompts = utils.load_lines(loadpath)\n\t    if idx is not None:\n\t        inference_prompt = prompts[idx]\n\t    else:\n\t        inference_prompt = random.choice(prompts)\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n", "def vqa_dataset(loadpath, max_samples=None, evaluate=False):\n\t    dataset = utils.load_general_prompts(loadpath)\n\t    entry = random.choice(dataset)\n\t    training_prompts = [entry[\"prompt\"]]\n\t    inference_prompt = entry[\"prompt\"]\n\t    metadata = entry\n\t    return inference_prompt, training_prompts, metadata\n\tdef manual(prompts, evaluate=False):\n\t    training_prompts = prompts\n\t    inference_prompt = random.choice(training_prompts)\n", "    return inference_prompt, training_prompts, {}\n\tdef nouns_activities(nouns_path, activities_path, evaluate=False):\n\t    nouns = utils.load_lines(nouns_path)\n\t    activities = utils.load_lines(activities_path)\n\t    inference_prompt = (\n\t        f\"{inflect_engine.a(random.choice(nouns))} {random.choice(activities)}\"\n\t    )\n\t    training_prompts = [inference_prompt]\n\t    return inference_prompt, training_prompts, {}\n\tdef counting(nouns_path, number_range, evaluate=False):\n", "    nouns = utils.load_lines(nouns_path)\n\t    number = inflect_engine.number_to_words(random.randint(*number_range))\n\t    noun = random.choice(nouns)\n\t    plural_noun = inflect_engine.plural(noun)\n\t    inference_prompt = f\"{number} {plural_noun}\"\n\t    training_prompts = [inference_prompt]\n\t    metadata = {\n\t        \"questions\": [\n\t            f\"How many {plural_noun} are there in this image?\",\n\t            f\"What animal is in this image?\",\n", "        ],\n\t        \"answers\": [\n\t            number,\n\t            noun,\n\t        ],\n\t    }\n\t    return inference_prompt, training_prompts, metadata\n"]}
{"filename": "ddpo/training/callbacks.py", "chunked_list": ["import os\n\tfrom functools import partial\n\timport random\n\timport sys\n\timport numpy as np\n\timport jax\n\timport jax.numpy as jnp\n\timport torch\n\tfrom PIL import Image, ImageOps\n\timport diffusers\n", "import transformers\n\timport pdb\n\tfrom ddpo.models import laion\n\tfrom ddpo import utils\n\tDEVICES = jax.local_devices()\n\tdef shard_unshard(fn):\n\t    def _wrapper(images, prompts, metadata):\n\t        del prompts, metadata\n\t        sharded = utils.shard(images)\n\t        output = fn(sharded)\n", "        return utils.unshard(output)\n\t    return _wrapper\n\tdef normalize(x, mean, std):\n\t    \"\"\"\n\t    mirrors `torchvision.transforms.Normalize(mean, std)`\n\t    \"\"\"\n\t    return (x - mean) / std\n\tdef vae_fn(devices=DEVICES, dtype=\"float32\", jit=True):\n\t    vae, vae_params = diffusers.FlaxAutoencoderKL.from_pretrained(\n\t        \"duongna/stable-diffusion-v1-4-flax\", subfolder=\"vae\", dtype=dtype\n", "    )\n\t    def _fn(images):\n\t        images = images.transpose(0, 3, 1, 2)\n\t        images = normalize(images, mean=0.5, std=0.5)\n\t        vae_outputs = vae.apply(\n\t            {\"params\": vae_params},\n\t            images,\n\t            deterministic=True,\n\t            method=vae.encode,\n\t        )\n", "        gaussian = vae_outputs.latent_dist\n\t        return jnp.concatenate([gaussian.mean, gaussian.logvar], axis=-1), {}\n\t    if jit:\n\t        _fn = jax.pmap(_fn, axis_name=\"batch\", devices=devices)\n\t    return shard_unshard(_fn)\n\tdef aesthetic_fn(devices=DEVICES, rng=0, cache=\"cache\", jit=True):\n\t    model = transformers.FlaxCLIPModel.from_pretrained(\"openai/clip-vit-large-patch14\")\n\t    processor = transformers.CLIPProcessor.from_pretrained(\n\t        \"openai/clip-vit-large-patch14\"\n\t    )\n", "    rng = jax.random.PRNGKey(rng)\n\t    embed_dim = 768\n\t    classifier = laion.AestheticClassifier()\n\t    params = classifier.init(rng, jnp.ones((1, embed_dim)))\n\t    repo_path = utils.get_repo_path()\n\t    weights = laion.load_weights(cache=os.path.join(repo_path, cache))\n\t    params = laion.set_weights(params, weights)\n\t    def _fn(images):\n\t        image_features = model.get_image_features(pixel_values=images)\n\t        # normalize image features\n", "        norm = jnp.linalg.norm(image_features, axis=-1, keepdims=True)\n\t        image_features = image_features / norm\n\t        score = classifier.apply(params, image_features)\n\t        return score\n\t    if jit:\n\t        _fn = jax.pmap(_fn, axis_name=\"batch\", devices=devices)\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        inputs = processor(images=list(images), return_tensors=\"np\")\n\t        inputs = utils.shard(inputs[\"pixel_values\"])\n", "        output = _fn(inputs)\n\t        return utils.unshard(output), {}\n\t    return _wrapper\n\tdef diversity_fn(devices=DEVICES, jit=False):\n\t    assert not jit\n\t    model = transformers.FlaxCLIPModel.from_pretrained(\"openai/clip-vit-large-patch14\")\n\t    processor = transformers.CLIPProcessor.from_pretrained(\n\t        \"openai/clip-vit-large-patch14\"\n\t    )\n\t    def _fn(images, prompts):\n", "        del prompts\n\t        inputs = processor(images=list(images), return_tensors=\"np\")\n\t        features = model.get_image_features(pixel_values=inputs[\"pixel_values\"])\n\t        n_images = len(features)\n\t        n_pairs = 10000\n\t        idx1 = np.random.randint(0, n_images, (n_pairs,))\n\t        idx2 = np.random.randint(0, n_images, (n_pairs,))\n\t        dist = np.linalg.norm(features[idx1] - features[idx2], axis=-1)\n\t        avg = dist.mean()\n\t        return avg, {}\n", "    return _fn\n\tdef consistency_fn(devices=DEVICES, jit=False):\n\t    assert not jit\n\t    model = transformers.FlaxCLIPModel.from_pretrained(\"openai/clip-vit-base-patch32\")\n\t    processor = transformers.CLIPProcessor.from_pretrained(\n\t        \"openai/clip-vit-base-patch32\"\n\t    )\n\t    def _fn(images, prompts, metadata):\n\t        del metadata\n\t        inputs = processor(\n", "            text=prompts, images=list(images), return_tensors=\"np\", padding=True\n\t        )\n\t        outputs = model(**inputs)\n\t        ## [ n_images, n_prompts ]\n\t        logits = outputs.logits_per_image\n\t        return logits.diagonal()[:, None], {}\n\t    return _fn\n\tdef jpeg_fn(devices=DEVICES, jit=False):\n\t    assert not jit\n\t    def _fn(images, prompts, metadata):\n", "        del prompts, metadata\n\t        lengths = [len(utils.encode_jpeg(image)) for image in images]\n\t        ## uint8 : 1 byte (8 bits) per dim\n\t        sizes_kb = [length / 1000.0 for length in lengths]\n\t        return -np.array(sizes_kb)[:, None], {}\n\t    return _fn\n\tdef neg_jpeg_fn(*args, **kwargs):\n\t    _jpeg = jpeg_fn(*args, **kwargs)\n\t    def _fn(*args, **kwargs):\n\t        scores, infos = _jpeg(*args, **kwargs)\n", "        return -scores, infos\n\t    return _fn\n\tdef rotational_symmetry_fn(devices=DEVICES, jit=True):\n\t    model = transformers.FlaxCLIPModel.from_pretrained(\"openai/clip-vit-large-patch14\")\n\t    processor = transformers.CLIPProcessor.from_pretrained(\n\t        \"openai/clip-vit-large-patch14\"\n\t    )\n\t    def _fn(images):\n\t        image_features = model.get_image_features(pixel_values=images)\n\t        return image_features\n", "    if jit:\n\t        _fn = jax.pmap(_fn, axis_name=\"batch\", devices=devices)\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        pils = [Image.fromarray((image * 255).astype(np.uint8)) for image in images]\n\t        degrees = [0, 90, 180, 270]\n\t        rotated = []\n\t        for rot in degrees:\n\t            rotated += [pil.rotate(rot) for pil in pils]\n\t        inputs = processor(images=list(rotated), return_tensors=\"np\")\n", "        inputs = utils.shard(inputs[\"pixel_values\"])\n\t        output = _fn(inputs)\n\t        output = utils.unshard(output)\n\t        embed_dim = output.shape[-1]\n\t        output = output.reshape(-1, len(images), embed_dim)\n\t        scores = 0\n\t        for i in range(1, len(output)):\n\t            numer = (output[0] * output[i]).sum(axis=-1)\n\t            denom = np.linalg.norm(output[0], axis=-1) * np.linalg.norm(\n\t                output[i], axis=-1\n", "            )\n\t            theta = np.arccos(np.clip(numer / denom, a_min=0, a_max=1))\n\t            theta = theta * 180 / np.pi\n\t            scores += theta\n\t        ## take average angle over all rotations\n\t        scores /= len(output) - 1\n\t        ## negate scores so that lower angles are better\n\t        scores = -scores\n\t        return scores, {}\n\t    return _wrapper\n", "def rotational_correlation_fn(devices=DEVICES, jit=False):\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        pils = [Image.fromarray((image * 255).astype(np.uint8)) for image in images]\n\t        degrees = [0, 180]\n\t        rotated = []\n\t        for rot in degrees:\n\t            rotated += [pil.rotate(rot) for pil in pils]\n\t        output = np.array([np.array(img) for img in rotated])\n\t        output = output.reshape(len(degrees), *images.shape)\n", "        scores = 0\n\t        for i in range(1, len(output)):\n\t            mse = ((output[0] - output[i]) ** 2).mean(axis=(1, 2, 3))\n\t            scores += mse\n\t        ## take average angle over all rotations\n\t        scores /= len(output) - 1\n\t        ## negate scores so that lower mse is better\n\t        scores = -scores\n\t        return scores, {}\n\t    return _wrapper\n", "def mirror_symmetry_fn(devices=DEVICES, jit=False):\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        pils = [Image.fromarray((image * 255).astype(np.uint8)) for image in images]\n\t        mirrored = [ImageOps.mirror(img) for img in pils]\n\t        pils = np.array([np.array(img) for img in pils])\n\t        mirrored = np.array([np.array(img) for img in mirrored])\n\t        scores = ((pils - mirrored) ** 2).mean(axis=(1, 2, 3))\n\t        ## negate scores so that lower mse is better\n\t        scores = -scores\n", "        return scores, {}\n\t    return _wrapper\n\tdef cov(X, Y):\n\t    assert X.ndim == Y.ndim == 2\n\t    return ((X - X.mean(-1, keepdims=True)) * (Y - Y.mean(-1, keepdims=True))).sum(-1)\n\tdef mirror_correlation_fn(devices=DEVICES, jit=False):\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        pils = [Image.fromarray((image * 255).astype(np.uint8)) for image in images]\n\t        mirrored = [ImageOps.mirror(img) for img in pils]\n", "        pils = np.array([np.array(img) for img in pils])\n\t        mirrored = np.array([np.array(img) for img in mirrored])\n\t        pils = (pils / 255.0).astype(np.float32).reshape(len(images), -1)\n\t        mirrored = (mirrored / 255.0).astype(np.float32).reshape(len(images), -1)\n\t        scores = cov(pils, mirrored) / np.sqrt(\n\t            cov(pils, pils) * cov(mirrored, mirrored)\n\t        )\n\t        ## sanity check\n\t        ## assert np.isclose(scores[0], np.corrcoef(pils[0], mirrored[0])[0][1])\n\t        ## negate scores so that lower correlation is better\n", "        scores = -scores\n\t        return scores, {}\n\t    return _wrapper\n\tdef thumbnail_fn(devices=DEVICES, jit=True):\n\t    model = transformers.FlaxCLIPModel.from_pretrained(\"openai/clip-vit-large-patch14\")\n\t    processor = transformers.CLIPProcessor.from_pretrained(\n\t        \"openai/clip-vit-large-patch14\"\n\t    )\n\t    def _fn(images):\n\t        image_features = model.get_image_features(pixel_values=images)\n", "        return image_features\n\t    if jit:\n\t        _fn = jax.pmap(_fn, axis_name=\"batch\", devices=devices)\n\t    def _wrapper(images, prompts, metadata):\n\t        del metadata\n\t        pils = [Image.fromarray((image * 255).astype(np.uint8)) for image in images]\n\t        downsampled = list(pils)\n\t        downsample = [4, 8, 16]\n\t        for d in downsample:\n\t            size = (pils[0].size[0] // d, pils[0].size[1] // d)\n", "            downsampled += [pil.resize(size) for pil in pils]\n\t        inputs = processor(images=list(downsampled), return_tensors=\"np\")\n\t        inputs = utils.shard(inputs[\"pixel_values\"])\n\t        output = _fn(inputs)\n\t        output = utils.unshard(output)\n\t        embed_dim = output.shape[-1]\n\t        output = output.reshape(-1, len(images), embed_dim)\n\t        scores = 0\n\t        for i in range(1, len(output)):\n\t            numer = (output[0] * output[i]).sum(axis=-1)\n", "            denom = np.linalg.norm(output[0], axis=-1) * np.linalg.norm(\n\t                output[i], axis=-1\n\t            )\n\t            theta = np.arccos(np.clip(numer / denom, a_min=0, a_max=1))\n\t            theta = theta * 180 / np.pi\n\t            scores += theta\n\t        ## take average angle over all rotations\n\t        scores /= len(output) - 1\n\t        ## negate scores so that lower angles are better\n\t        scores = -scores\n", "        return scores, {}\n\t    return _wrapper\n\tdef arange_fn(devices=DEVICES, jit=False):\n\t    assert not jit\n\t    def _fn(images, prompts, metadata):\n\t        del prompts, metadata\n\t        return np.arange(len(images))[:, None], {}\n\t    return _fn\n\tdef single_satisfaction(outputs, answers):\n\t    assert len(outputs) == len(answers)\n", "    correct = [ans in output for ans, output in zip(answers, outputs)]\n\t    return np.array(correct, dtype=int)\n\tdef vqa_satisfaction(devices=DEVICES, jit=False):\n\t    device = \"cpu\"\n\t    dtype = torch.float32\n\t    model_name = \"Salesforce/blip2-opt-2.7b\"\n\t    processor = transformers.AutoProcessor.from_pretrained(model_name)\n\t    vlm = transformers.Blip2ForConditionalGeneration.from_pretrained(\n\t        model_name, torch_dtype=dtype\n\t    )\n", "    def _fn(images, prompts, metadata):\n\t        n_questions = len(metadata[0][\"questions\"])\n\t        images = (images * 255).astype(np.uint8)\n\t        questions = [\n\t            f'Question: {m[\"questions\"][i]} Answer:'\n\t            for m in metadata\n\t            for i in range(n_questions)\n\t        ]\n\t        answers = [m[\"answers\"][i] for m in metadata for i in range(n_questions)]\n\t        images_rep = [img for img in images for _ in range(n_questions)]\n", "        inputs = processor(\n\t            images_rep,\n\t            text=questions,\n\t            return_tensors=\"pt\",\n\t            padding=\"longest\",\n\t        ).to(device, dtype)\n\t        generated_ids = vlm.generate(**inputs, max_new_tokens=8)\n\t        generated_text = processor.batch_decode(generated_ids, skip_special_tokens=True)\n\t        generated_text = [text.strip() for text in generated_text]\n\t        correct = single_satisfaction(generated_text, answers)\n", "        scores = correct.reshape(len(images), n_questions).mean(-1, keepdims=True)\n\t        return scores, {}\n\t    return _fn\n\tdef llava_vqa_satisfaction(devices=DEVICES, jit=False):\n\t    import requests\n\t    from requests.adapters import HTTPAdapter, Retry\n\t    from io import BytesIO\n\t    import pickle\n\t    from tqdm import tqdm\n\t    batch_size = 4\n", "    url = \"http://127.0.0.1:8085\"\n\t    sess = requests.Session()\n\t    retries = Retry(\n\t        total=1000, backoff_factor=1, status_forcelist=[500], allowed_methods=False\n\t    )\n\t    sess.mount(\"http://\", HTTPAdapter(max_retries=retries))\n\t    def _fn(images, prompts, metadata):\n\t        del prompts\n\t        images = (images * 255).astype(np.uint8)\n\t        images_batched = np.array_split(images, np.ceil(len(images) / batch_size))\n", "        metadata_batched = np.array_split(metadata, np.ceil(len(metadata) / batch_size))\n\t        all_scores = []\n\t        all_info = {\n\t            \"answers\": [],\n\t        }\n\t        for image_batch, metadata_batch in tqdm(\n\t            list(zip(images_batched, metadata_batched)), desc=\"LLaVA\", position=1\n\t        ):\n\t            jpeg_images = []\n\t            # Compress the images using JPEG\n", "            for image in image_batch:\n\t                img = Image.fromarray(image)\n\t                buffer = BytesIO()\n\t                img.save(buffer, format=\"JPEG\", quality=80)\n\t                jpeg_images.append(buffer.getvalue())\n\t            data = {\n\t                \"images\": jpeg_images,\n\t                \"queries\": [m[\"questions\"] for m in metadata_batch],\n\t            }\n\t            data_bytes = pickle.dumps(data)\n", "            # send a request to the llava server\n\t            response = sess.post(url, data=data_bytes, timeout=120)\n\t            response_data = pickle.loads(response.content)\n\t            correct = [\n\t                single_satisfaction(ans, m[\"answers\"])\n\t                for ans, m in zip(response_data[\"outputs\"], metadata_batch)\n\t            ]\n\t            scores = np.array(correct).mean(axis=-1)\n\t            all_scores += scores.tolist()\n\t            all_info[\"answers\"] += response_data[\"outputs\"]\n", "        return np.array(all_scores), {k: np.array(v) for k, v in all_info.items()}\n\t    return _fn\n\tdef llava_bertscore(devices=DEVICES, jit=False):\n\t    import requests\n\t    from requests.adapters import HTTPAdapter, Retry\n\t    from io import BytesIO\n\t    import pickle\n\t    from tqdm import tqdm\n\t    batch_size = 16\n\t    url = \"http://127.0.0.1:8085\"\n", "    sess = requests.Session()\n\t    retries = Retry(\n\t        total=1000, backoff_factor=1, status_forcelist=[500], allowed_methods=False\n\t    )\n\t    sess.mount(\"http://\", HTTPAdapter(max_retries=retries))\n\t    def _fn(images, prompts, metadata):\n\t        del metadata\n\t        images = (images * 255).astype(np.uint8)\n\t        images_batched = np.array_split(images, np.ceil(len(images) / batch_size))\n\t        prompts_batched = np.array_split(prompts, np.ceil(len(prompts) / batch_size))\n", "        all_scores = []\n\t        all_info = {\n\t            \"precision\": [],\n\t            \"f1\": [],\n\t            \"outputs\": [],\n\t        }\n\t        for image_batch, prompt_batch in tqdm(\n\t            list(zip(images_batched, prompts_batched)),\n\t            desc=\"LLaVA\",\n\t            position=1,\n", "            leave=False,\n\t        ):\n\t            jpeg_images = []\n\t            # Compress the images using JPEG\n\t            for image in image_batch:\n\t                img = Image.fromarray(image)\n\t                buffer = BytesIO()\n\t                img.save(buffer, format=\"JPEG\", quality=80)\n\t                jpeg_images.append(buffer.getvalue())\n\t            # format for LLaVA server\n", "            data = {\n\t                \"images\": jpeg_images,\n\t                \"queries\": [[\"Answer concisely: what is going on in this image?\"]]\n\t                * len(image_batch),\n\t                \"answers\": [\n\t                    [f\"The image contains {prompt}\"] for prompt in prompt_batch\n\t                ],\n\t            }\n\t            data_bytes = pickle.dumps(data)\n\t            # send a request to the llava server\n", "            response = sess.post(url, data=data_bytes, timeout=120)\n\t            response_data = pickle.loads(response.content)\n\t            # use the recall score as the reward\n\t            scores = np.array(response_data[\"recall\"]).squeeze()\n\t            all_scores += scores.tolist()\n\t            # save the precision and f1 scores for analysis\n\t            all_info[\"precision\"] += (\n\t                np.array(response_data[\"precision\"]).squeeze().tolist()\n\t            )\n\t            all_info[\"f1\"] += np.array(response_data[\"f1\"]).squeeze().tolist()\n", "            all_info[\"outputs\"] += np.array(response_data[\"outputs\"]).squeeze().tolist()\n\t        return np.array(all_scores), {k: np.array(v) for k, v in all_info.items()}\n\t    return _fn\n\tdef evaluate_callbacks(fns, images, prompts, metadata):\n\t    if type(prompts[0]) == list:\n\t        prompts = [random.choice(p) for p in prompts]\n\t    images = images.astype(jnp.float32)\n\t    outputs = {key: fn(images, prompts, metadata) for key, fn in fns.items()}\n\t    return outputs\n\tcallback_fns = {\n", "    \"vae\": vae_fn,\n\t    \"aesthetic\": aesthetic_fn,\n\t    \"consistency\": consistency_fn,\n\t    \"jpeg\": jpeg_fn,\n\t    \"neg_jpeg\": neg_jpeg_fn,\n\t    \"rotational\": rotational_symmetry_fn,\n\t    \"rotational_corr\": rotational_correlation_fn,\n\t    \"mirror\": mirror_symmetry_fn,\n\t    \"mirror_corr\": mirror_correlation_fn,\n\t    \"thumbnail\": thumbnail_fn,\n", "    \"arange\": arange_fn,\n\t    \"vqa\": vqa_satisfaction,\n\t    \"llava_vqa\": llava_vqa_satisfaction,\n\t    \"llava_bertscore\": llava_bertscore,\n\t}\n"]}
{"filename": "ddpo/models/laion.py", "chunked_list": ["import os\n\timport requests\n\timport torch\n\tfrom flax import linen as nn\n\tclass AestheticClassifier(nn.Module):\n\t    @nn.compact\n\t    def __call__(self, x):\n\t        x = nn.Dense(features=1024)(x)\n\t        x = nn.Dropout(0.2)(x, deterministic=True)\n\t        x = nn.Dense(features=128)(x)\n", "        x = nn.Dropout(0.2)(x, deterministic=True)\n\t        x = nn.Dense(features=64)(x)\n\t        x = nn.Dropout(0.1)(x, deterministic=True)\n\t        x = nn.Dense(features=16)(x)\n\t        x = nn.Dense(features=1)(x)\n\t        return x\n\tdef load_weights(cache=\"cache\"):\n\t    weights_fname = \"sac+logos+ava1-l14-linearMSE.pth\"\n\t    loadpath = os.path.join(cache, weights_fname)\n\t    if not os.path.exists(loadpath):\n", "        url = (\n\t            \"https://github.com/christophschuhmann/\"\n\t            f\"improved-aesthetic-predictor/blob/main/{weights_fname}?raw=true\"\n\t        )\n\t        r = requests.get(url)\n\t        with open(loadpath, \"wb\") as f:\n\t            f.write(r.content)\n\t    weights = torch.load(loadpath, map_location=torch.device(\"cpu\"))\n\t    return weights\n\tdef set_weights(params, loaded_weights):\n", "    params = params.unfreeze()\n\t    layer_names = [0, 2, 4, 6, 7]\n\t    for i in range(5):\n\t        layer_name = layer_names[i]\n\t        weights = loaded_weights[\"layers.{}.weight\".format(layer_name)]\n\t        bias = loaded_weights[\"layers.{}.bias\".format(layer_name)]\n\t        layer_i = params[\"params\"][\"Dense_{}\".format(i)]\n\t        layer_i[\"kernel\"] = weights.numpy().transpose()\n\t        layer_i[\"bias\"] = bias.numpy()\n\t    return params\n"]}
{"filename": "ddpo/models/__init__.py", "chunked_list": []}
{"filename": "ddpo/datasets/__init__.py", "chunked_list": ["from .bucket import get_bucket_loader, make_uncond_text\n"]}
{"filename": "ddpo/datasets/bucket.py", "chunked_list": ["from functools import partial\n\timport random\n\timport numpy as np\n\timport jax\n\timport torch\n\tfrom ddpo import utils\n\tclass BucketDataset(torch.utils.data.Dataset):\n\t    def __init__(self, reader):\n\t        self.reader = reader\n\t        self.transform_fn = lambda x: x\n", "        self._max_size = None\n\t        self._offset = 0\n\t        self._shuffled = np.arange(len(self))\n\t    def __len__(self):\n\t        return self._max_size or len(self.reader)\n\t    def __getitem__(self, idx):\n\t        worker_idx = self._offset + idx\n\t        shuffled_idx = self._shuffled[worker_idx]\n\t        x = self.reader[shuffled_idx]\n\t        info = {\"idx\": worker_idx, \"shuffled_idx\": shuffled_idx}\n", "        return self.transform_fn(x) | info\n\t    def shuffle(self):\n\t        print(\"[ datasets/bucket ] Shuffling dataset\")\n\t        self._shuffled = np.random.permutation(self._shuffled)\n\t    def shard(self):\n\t        host_id = jax.process_index()\n\t        n_hosts = jax.process_count()\n\t        n_samples_per_host = len(self) // n_hosts\n\t        self._max_size = n_samples_per_host\n\t        self._offset = host_id * n_samples_per_host\n", "        print(\n\t            f\"[ datasets/bucket ] Host: {host_id} | \"\n\t            f\"Samples per host: {self._max_size} | \"\n\t            f\"Offset: {self._offset}\"\n\t        )\n\t    def make_weights(self, *args, **kwargs):\n\t        self.reader.make_weights(*args, **kwargs)\n\t    def with_transform(self, transform_fn):\n\t        self.transform_fn = transform_fn\n\t    def subsample(self, N):\n", "        self._max_size = N\n\tdef preprocess_train(text_transforms, examples):\n\t    examples[\"input_ids\"] = text_transforms(examples)\n\t    return examples\n\tdef select_caption(examples, field=\"training_prompts\"):\n\t    caption = examples[field]\n\t    if isinstance(caption, (list, np.ndarray)):\n\t        caption = random.choice(caption)\n\t    examples[\"text\"] = caption\n\tdef make_uncond_text(tokenizer, batch_size):\n", "    uncond_prompt = tokenizer(\n\t        [\"\"] * batch_size,\n\t        padding=\"max_length\",\n\t        max_length=tokenizer.model_max_length,\n\t        return_tensors=\"np\",\n\t    )\n\t    return uncond_prompt.input_ids\n\tdef collate_fn(tokenizer, examples, image_field=\"vae\", text_field=\"input_ids\"):\n\t    pixel_values = np.stack([example[image_field] for example in examples])\n\t    # pixel_values = pixel_values.to(memory_format=torch.contiguous_format).float()\n", "    pixel_values = pixel_values.astype(np.float32)\n\t    captions = [example[\"text\"] for example in examples]\n\t    ## @TODO: add `callback_` prefix to callback labels\n\t    callback_labels = {\n\t        key: np.stack([example[key] for example in examples])\n\t        for key in [\"aesthetic\", \"consistency\", \"jpeg\", \"labels\", \"weights\"]\n\t        if key in examples[0]\n\t    }\n\t    idxs = np.stack([example[\"idx\"] for example in examples])\n\t    shuffled_idxs = np.stack([example[\"shuffled_idx\"] for example in examples])\n", "    padded_tokens = tokenizer(\n\t        captions,\n\t        padding=\"max_length\",\n\t        max_length=tokenizer.model_max_length,\n\t        return_tensors=\"np\",\n\t    )\n\t    batch_size = len(pixel_values)\n\t    uncond_prompt = tokenizer(\n\t        [\"\"] * batch_size,\n\t        padding=\"max_length\",\n", "        max_length=tokenizer.model_max_length,\n\t        return_tensors=\"np\",\n\t    )\n\t    batch = {\n\t        image_field: pixel_values,\n\t        text_field: padded_tokens.input_ids,\n\t        \"idxs\": idxs,\n\t        \"shuffled_idxs\": shuffled_idxs,\n\t        \"uncond_text\": uncond_prompt.input_ids,\n\t        **callback_labels,\n", "    }\n\t    return batch\n\tdef get_bucket_loader(\n\t    loadpath,\n\t    tokenizer,\n\t    batch_size,\n\t    resolution=None,\n\t    max_train_samples=None,\n\t    num_workers=0,\n\t):\n", "    if utils.fs.is_remote(loadpath):\n\t        reader = utils.RemoteReader(loadpath)\n\t    else:\n\t        reader = utils.H5Reader(loadpath)\n\t    train_dataset = BucketDataset(reader)\n\t    ## subsample dataset\n\t    if max_train_samples is not None:\n\t        train_dataset.subsample(max_train_samples)\n\t    ## training transforms\n\t    train_dataset.with_transform(partial(preprocess_train, select_caption))\n", "    train_dataset.shard()\n\t    train_dataloader = torch.utils.data.DataLoader(\n\t        train_dataset,\n\t        shuffle=False,\n\t        collate_fn=partial(collate_fn, tokenizer),\n\t        batch_size=batch_size,\n\t        drop_last=True,\n\t        num_workers=num_workers,\n\t    )\n\t    return train_dataset, train_dataloader\n"]}
{"filename": "ddpo/diffusers_patch/pipeline_flax_stable_diffusion.py", "chunked_list": ["# Copyright 2022 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport warnings\n\tfrom functools import partial\n\tfrom typing import Dict, List, Optional, Union\n\timport numpy as np\n\timport jax\n\timport jax.numpy as jnp\n\tfrom flax.core.frozen_dict import FrozenDict\n", "from flax.jax_utils import unreplicate\n\tfrom flax.training.common_utils import shard\n\tfrom packaging import version\n\tfrom PIL import Image\n\tfrom transformers import CLIPFeatureExtractor, CLIPTokenizer, FlaxCLIPTextModel\n\tfrom diffusers.models import FlaxAutoencoderKL, FlaxUNet2DConditionModel\n\tfrom ddpo.diffusers_patch.scheduling_ddim_flax import FlaxDDIMScheduler\n\tfrom diffusers.schedulers import (\n\t    FlaxDPMSolverMultistepScheduler,\n\t    FlaxLMSDiscreteScheduler,\n", "    FlaxPNDMScheduler,\n\t)\n\tfrom diffusers.utils import deprecate, logging\n\tfrom diffusers.pipelines.pipeline_flax_utils import FlaxDiffusionPipeline\n\tfrom diffusers.pipelines.stable_diffusion.safety_checker_flax import (\n\t    FlaxStableDiffusionSafetyChecker,\n\t)\n\tlogger = logging.get_logger(__name__)  # pylint: disable=invalid-name\n\t# Set to True to use python for loop instead of jax.fori_loop for easier debugging\n\tDEBUG = False\n", "class FlaxStableDiffusionPipeline(FlaxDiffusionPipeline):\n\t    r\"\"\"\n\t    Pipeline for text-to-image generation using Stable Diffusion.\n\t    This model inherits from [`FlaxDiffusionPipeline`]. Check the superclass documentation for the generic methods the\n\t    library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)\n\t    Args:\n\t        vae ([`FlaxAutoencoderKL`]):\n\t            Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.\n\t        text_encoder ([`FlaxCLIPTextModel`]):\n\t            Frozen text-encoder. Stable Diffusion uses the text portion of\n", "            [CLIP](https://huggingface.co/docs/transformers/model_doc/clip#transformers.FlaxCLIPTextModel),\n\t            specifically the [clip-vit-large-patch14](https://huggingface.co/openai/clip-vit-large-patch14) variant.\n\t        tokenizer (`CLIPTokenizer`):\n\t            Tokenizer of class\n\t            [CLIPTokenizer](https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer).\n\t        unet ([`FlaxUNet2DConditionModel`]): Conditional U-Net architecture to denoise the encoded image latents.\n\t        scheduler ([`SchedulerMixin`]):\n\t            A scheduler to be used in combination with `unet` to denoise the encoded image latents. Can be one of\n\t            [`FlaxDDIMScheduler`], [`FlaxLMSDiscreteScheduler`], [`FlaxPNDMScheduler`], or\n\t            [`FlaxDPMSolverMultistepScheduler`].\n", "        safety_checker ([`FlaxStableDiffusionSafetyChecker`]):\n\t            Classification module that estimates whether generated images could be considered offensive or harmful.\n\t            Please, refer to the [model card](https://huggingface.co/runwayml/stable-diffusion-v1-5) for details.\n\t        feature_extractor ([`CLIPFeatureExtractor`]):\n\t            Model that extracts features from generated images to be used as inputs for the `safety_checker`.\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        vae: FlaxAutoencoderKL,\n\t        text_encoder: FlaxCLIPTextModel,\n", "        tokenizer: CLIPTokenizer,\n\t        unet: FlaxUNet2DConditionModel,\n\t        scheduler: Union[\n\t            FlaxDDIMScheduler,\n\t            FlaxPNDMScheduler,\n\t            FlaxLMSDiscreteScheduler,\n\t            FlaxDPMSolverMultistepScheduler,\n\t        ],\n\t        safety_checker: FlaxStableDiffusionSafetyChecker,\n\t        feature_extractor: CLIPFeatureExtractor,\n", "        dtype: jnp.dtype = jnp.float32,\n\t    ):\n\t        super().__init__()\n\t        self.dtype = dtype\n\t        if safety_checker is None:\n\t            logger.warning(\n\t                f\"You have disabled the safety checker for {self.__class__} by passing `safety_checker=None`. Ensure\"\n\t                \" that you abide to the conditions of the Stable Diffusion license and do not expose unfiltered\"\n\t                \" results in services or applications open to the public. Both the diffusers team and Hugging Face\"\n\t                \" strongly recommend to keep the safety filter enabled in all public facing circumstances, disabling\"\n", "                \" it only for use-cases that involve analyzing network behavior or auditing its results. For more\"\n\t                \" information, please have a look at https://github.com/huggingface/diffusers/pull/254 .\"\n\t            )\n\t        is_unet_version_less_0_9_0 = hasattr(\n\t            unet.config, \"_diffusers_version\"\n\t        ) and version.parse(\n\t            version.parse(unet.config._diffusers_version).base_version\n\t        ) < version.parse(\n\t            \"0.9.0.dev0\"\n\t        )\n", "        is_unet_sample_size_less_64 = (\n\t            hasattr(unet.config, \"sample_size\") and unet.config.sample_size < 64\n\t        )\n\t        if is_unet_version_less_0_9_0 and is_unet_sample_size_less_64:\n\t            deprecation_message = (\n\t                \"The configuration file of the unet has set the default `sample_size` to smaller than\"\n\t                \" 64 which seems highly unlikely .If you're checkpoint is a fine-tuned version of any of the\"\n\t                \" following: \\n- CompVis/stable-diffusion-v1-4 \\n- CompVis/stable-diffusion-v1-3 \\n-\"\n\t                \" CompVis/stable-diffusion-v1-2 \\n- CompVis/stable-diffusion-v1-1 \\n- runwayml/stable-diffusion-v1-5\"\n\t                \" \\n- runwayml/stable-diffusion-inpainting \\n you should change 'sample_size' to 64 in the\"\n", "                \" configuration file. Please make sure to update the config accordingly as leaving `sample_size=32`\"\n\t                \" in the config might lead to incorrect results in future versions. If you have downloaded this\"\n\t                \" checkpoint from the Hugging Face Hub, it would be very nice if you could open a Pull request for\"\n\t                \" the `unet/config.json` file\"\n\t            )\n\t            deprecate(\n\t                \"sample_size<64\", \"1.0.0\", deprecation_message, standard_warn=False\n\t            )\n\t            new_config = dict(unet.config)\n\t            new_config[\"sample_size\"] = 64\n", "            unet._internal_dict = FrozenDict(new_config)\n\t        self.register_modules(\n\t            vae=vae,\n\t            text_encoder=text_encoder,\n\t            tokenizer=tokenizer,\n\t            unet=unet,\n\t            scheduler=scheduler,\n\t            safety_checker=safety_checker,\n\t            feature_extractor=feature_extractor,\n\t        )\n", "        self.vae_scale_factor = 2 ** (len(self.vae.config.block_out_channels) - 1)\n\t    def prepare_inputs(self, prompt: Union[str, List[str]]):\n\t        if not isinstance(prompt, (str, list)):\n\t            raise ValueError(\n\t                f\"`prompt` has to be of type `str` or `list` but is {type(prompt)}\"\n\t            )\n\t        text_input = self.tokenizer(\n\t            prompt,\n\t            padding=\"max_length\",\n\t            max_length=self.tokenizer.model_max_length,\n", "            truncation=True,\n\t            return_tensors=\"np\",\n\t        )\n\t        return text_input.input_ids\n\t    def _generate(\n\t        self,\n\t        prompt_embeds: jnp.array,\n\t        neg_prompt_embeds: jnp.array,\n\t        params: Union[Dict, FrozenDict],\n\t        rng: jax.random.KeyArray,\n", "        num_inference_steps: int,\n\t        height: int,\n\t        width: int,\n\t        guidance_scale: float,\n\t        eta: float,\n\t        latents: Optional[jnp.array] = None,\n\t    ):\n\t        assert isinstance(self.scheduler, FlaxDDIMScheduler)\n\t        if height % 8 != 0 or width % 8 != 0:\n\t            raise ValueError(\n", "                f\"`height` and `width` have to be divisible by 8 but are {height} and {width}.\"\n\t            )\n\t        # TODO: currently it is assumed `do_classifier_free_guidance = guidance_scale > 1.0`\n\t        # implement this conditional `do_classifier_free_guidance = guidance_scale > 1.0`\n\t        batch_size = prompt_embeds.shape[0]\n\t        context = jnp.concatenate([neg_prompt_embeds, prompt_embeds])\n\t        latents_shape = (\n\t            batch_size,\n\t            self.unet.in_channels,\n\t            height // self.vae_scale_factor,\n", "            width // self.vae_scale_factor,\n\t        )\n\t        if latents is None:\n\t            rng, seed = jax.random.split(rng)\n\t            latents = jax.random.normal(seed, shape=latents_shape, dtype=jnp.float32)\n\t        else:\n\t            if latents.shape != latents_shape:\n\t                raise ValueError(\n\t                    f\"Unexpected latents shape, got {latents.shape}, expected {latents_shape}\"\n\t                )\n", "        def loop_body(args, step):\n\t            old_latents, scheduler_state, rng = args\n\t            # For classifier free guidance, we need to do two forward passes.\n\t            # Here we concatenate the unconditional and text embeddings into a single batch\n\t            # to avoid doing two forward passes\n\t            latents_input = jnp.concatenate([old_latents] * 2)\n\t            t = jnp.array(scheduler_state.timesteps, dtype=jnp.int32)[step]\n\t            timestep = jnp.broadcast_to(t, latents_input.shape[0])\n\t            latents_input = self.scheduler.scale_model_input(\n\t                scheduler_state, latents_input, t\n", "            )\n\t            # predict the noise residual\n\t            noise_pred = self.unet.apply(\n\t                {\"params\": params[\"unet\"]},\n\t                jnp.array(latents_input),\n\t                jnp.array(timestep, dtype=jnp.int32),\n\t                encoder_hidden_states=context,\n\t            ).sample\n\t            # perform guidance\n\t            noise_pred_uncond, noise_prediction_text = jnp.split(noise_pred, 2, axis=0)\n", "            noise_pred = noise_pred_uncond + guidance_scale * (\n\t                noise_prediction_text - noise_pred_uncond\n\t            )\n\t            # compute the previous noisy sample x_t -> x_t-1\n\t            rng, key = jax.random.split(rng)\n\t            new_latents, scheduler_state, log_prob = self.scheduler.step(\n\t                scheduler_state, noise_pred, t, old_latents, key, None, eta\n\t            )\n\t            return (new_latents, scheduler_state, rng), (\n\t                old_latents,\n", "                new_latents,\n\t                log_prob,\n\t                t,\n\t            )\n\t        scheduler_state = self.scheduler.set_timesteps(\n\t            params[\"scheduler\"],\n\t            num_inference_steps=num_inference_steps,\n\t            shape=latents.shape,\n\t        )\n\t        # scale the initial noise by the standard deviation required by the scheduler\n", "        latents = latents * params[\"scheduler\"].init_noise_sigma\n\t        rng, seed = jax.random.split(rng)\n\t        (final_latents, _, _), (latents, next_latents, log_probs, ts) = jax.lax.scan(\n\t            loop_body, (latents, scheduler_state, seed), jnp.arange(num_inference_steps)\n\t        )\n\t        # broadcast timesteps to have a batch dimension\n\t        ts = jnp.broadcast_to(ts, (batch_size, num_inference_steps))\n\t        # put batch dim first on all outputs\n\t        latents = latents.transpose(1, 0, 2, 3, 4)\n\t        next_latents = next_latents.transpose(1, 0, 2, 3, 4)\n", "        log_probs = log_probs.transpose(1, 0)\n\t        # final_latents: (batch_size, 4, 64, 64)\n\t        # latents: (batch_size, num_inference_steps, 4, 64, 64)\n\t        # next_latents: (batch_size, num_inference_steps, 4, 64, 64)\n\t        # log_probs: (batch_size, num_inference_steps)\n\t        # ts: (batch_size, num_inference_steps)\n\t        return final_latents, latents, next_latents, log_probs, ts\n\t    def __call__(\n\t        self,\n\t        prompt_embeds: jnp.array,\n", "        neg_prompt_embeds: jnp.array,\n\t        params: Union[Dict, FrozenDict],\n\t        prng_seed: jax.random.KeyArray,\n\t        num_inference_steps: int = 50,\n\t        height: Optional[int] = None,\n\t        width: Optional[int] = None,\n\t        guidance_scale: Union[float, jnp.array] = 7.5,\n\t        eta: Union[float, jnp.array] = 0,\n\t        latents: jnp.array = None,\n\t        jit: bool = False,\n", "    ):\n\t        r\"\"\"\n\t        Function invoked when calling the pipeline for generation.\n\t        Args:\n\t            prompt (`str` or `List[str]`):\n\t                The prompt or prompts to guide the image generation.\n\t            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n\t                The height in pixels of the generated image.\n\t            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n\t                The width in pixels of the generated image.\n", "            num_inference_steps (`int`, *optional*, defaults to 50):\n\t                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\n\t                expense of slower inference.\n\t            guidance_scale (`float`, *optional*, defaults to 7.5):\n\t                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\n\t                `guidance_scale` is defined as `w` of equation 2. of [Imagen\n\t                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\n\t                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\n\t                usually at the expense of lower image quality.\n\t            latents (`jnp.array`, *optional*):\n", "                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\n\t                generation. Can be used to tweak the same generation with different prompts. tensor will ge generated\n\t                by sampling using the supplied random `generator`.\n\t            jit (`bool`, defaults to `False`):\n\t                Whether to run `pmap` versions of the generation and safety scoring functions. NOTE: This argument\n\t                exists because `__call__` is not yet end-to-end pmap-able. It will be removed in a future release.\n\t            return_dict (`bool`, *optional*, defaults to `True`):\n\t                Whether or not to return a [`~pipelines.stable_diffusion.FlaxStableDiffusionPipelineOutput`] instead of\n\t                a plain tuple.\n\t        Returns:\n", "            [`~pipelines.stable_diffusion.FlaxStableDiffusionPipelineOutput`] or `tuple`:\n\t            [`~pipelines.stable_diffusion.FlaxStableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a\n\t            `tuple. When returning a tuple, the first element is a list with the generated images, and the second\n\t            element is a list of `bool`s denoting whether the corresponding generated image likely represents\n\t            \"not-safe-for-work\" (nsfw) content, according to the `safety_checker`.\n\t        \"\"\"\n\t        # 0. Default height and width to unet\n\t        height = height or self.unet.config.sample_size * self.vae_scale_factor\n\t        width = width or self.unet.config.sample_size * self.vae_scale_factor\n\t        if isinstance(guidance_scale, float):\n", "            # Convert to a tensor so each device gets a copy. Follow the prompt_ids for\n\t            # shape information, as they may be sharded (when `jit` is `True`), or not.\n\t            guidance_scale = jnp.array([guidance_scale] * prompt_embeds.shape[0])\n\t            if len(prompt_embeds.shape) > 2:\n\t                # Assume sharded\n\t                guidance_scale = guidance_scale[:, None]\n\t        if isinstance(eta, float):\n\t            eta = jnp.array([eta] * prompt_embeds.shape[0])\n\t            if len(prompt_embeds.shape) > 2:\n\t                eta = eta[:, None]\n", "        if jit:\n\t            latents = _p_generate(\n\t                self,\n\t                prompt_embeds,\n\t                neg_prompt_embeds,\n\t                params,\n\t                prng_seed,\n\t                num_inference_steps,\n\t                height,\n\t                width,\n", "                guidance_scale,\n\t                eta,\n\t                latents,\n\t            )\n\t        else:\n\t            latents = self._generate(\n\t                prompt_embeds,\n\t                neg_prompt_embeds,\n\t                params,\n\t                prng_seed,\n", "                num_inference_steps,\n\t                height,\n\t                width,\n\t                guidance_scale,\n\t                latents,\n\t            )\n\t        return latents\n\t# Static argnums are pipe, num_inference_steps, height, width. A change would trigger recompilation.\n\t# Non-static args are (sharded) input tensors mapped over their first dimension (hence, `0`).\n\t@partial(\n", "    jax.pmap,\n\t    in_axes=(None, 0, 0, 0, 0, None, None, None, 0, 0, 0),\n\t    static_broadcasted_argnums=(0, 5, 6, 7),\n\t)\n\tdef _p_generate(\n\t    pipe,\n\t    prompt_embeds,\n\t    neg_prompt_embeds,\n\t    params,\n\t    prng_seed,\n", "    num_inference_steps,\n\t    height,\n\t    width,\n\t    guidance_scale,\n\t    eta,\n\t    latents,\n\t):\n\t    return pipe._generate(\n\t        prompt_embeds,\n\t        neg_prompt_embeds,\n", "        params,\n\t        prng_seed,\n\t        num_inference_steps,\n\t        height,\n\t        width,\n\t        guidance_scale,\n\t        eta,\n\t        latents,\n\t    )\n"]}
{"filename": "ddpo/diffusers_patch/scheduling_ddim_flax.py", "chunked_list": ["# Copyright 2022 Stanford University Team and The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t# DISCLAIMER: This code is strongly influenced by https://github.com/pesser/pytorch_diffusion\n\t# and https://github.com/hojonathanho/diffusion\n\tfrom dataclasses import dataclass\n\tfrom typing import Optional, Tuple, Union\n\timport flax\n\timport jax\n\timport jax.numpy as jnp\n", "from diffusers.configuration_utils import ConfigMixin, register_to_config\n\tfrom diffusers.utils import deprecate\n\tfrom diffusers.schedulers.scheduling_utils_flax import (\n\t    CommonSchedulerState,\n\t    FlaxKarrasDiffusionSchedulers,\n\t    FlaxSchedulerMixin,\n\t    FlaxSchedulerOutput,\n\t    add_noise_common,\n\t    get_velocity_common,\n\t    broadcast_to_shape_from_left,\n", ")\n\t@flax.struct.dataclass\n\tclass DDIMSchedulerState:\n\t    common: CommonSchedulerState\n\t    final_alpha_cumprod: jnp.ndarray\n\t    # setable values\n\t    init_noise_sigma: jnp.ndarray\n\t    timesteps: jnp.ndarray\n\t    num_inference_steps: Optional[int] = None\n\t    @classmethod\n", "    def create(\n\t        cls,\n\t        common: CommonSchedulerState,\n\t        final_alpha_cumprod: jnp.ndarray,\n\t        init_noise_sigma: jnp.ndarray,\n\t        timesteps: jnp.ndarray,\n\t    ):\n\t        return cls(\n\t            common=common,\n\t            final_alpha_cumprod=final_alpha_cumprod,\n", "            init_noise_sigma=init_noise_sigma,\n\t            timesteps=timesteps,\n\t        )\n\t@dataclass\n\tclass FlaxDDIMSchedulerOutput(FlaxSchedulerOutput):\n\t    state: DDIMSchedulerState\n\tclass FlaxDDIMScheduler(FlaxSchedulerMixin, ConfigMixin):\n\t    \"\"\"\n\t    Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising\n\t    diffusion probabilistic models (DDPMs) with non-Markovian guidance.\n", "    [`~ConfigMixin`] takes care of storing all config attributes that are passed in the scheduler's `__init__`\n\t    function, such as `num_train_timesteps`. They can be accessed via `scheduler.config.num_train_timesteps`.\n\t    [`SchedulerMixin`] provides general loading and saving functionality via the [`SchedulerMixin.save_pretrained`] and\n\t    [`~SchedulerMixin.from_pretrained`] functions.\n\t    For more details, see the original paper: https://arxiv.org/abs/2010.02502\n\t    Args:\n\t        num_train_timesteps (`int`): number of diffusion steps used to train the model.\n\t        beta_start (`float`): the starting `beta` value of inference.\n\t        beta_end (`float`): the final `beta` value.\n\t        beta_schedule (`str`):\n", "            the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from\n\t            `linear`, `scaled_linear`, or `squaredcos_cap_v2`.\n\t        trained_betas (`jnp.ndarray`, optional):\n\t            option to pass an array of betas directly to the constructor to bypass `beta_start`, `beta_end` etc.\n\t        clip_sample (`bool`, default `True`):\n\t            option to clip predicted sample between -1 and 1 for numerical stability.\n\t        set_alpha_to_one (`bool`, default `True`):\n\t            each diffusion step uses the value of alphas product at that step and at the previous one. For the final\n\t            step there is no previous alpha. When this option is `True` the previous alpha product is fixed to `1`,\n\t            otherwise it uses the value of alpha at step 0.\n", "        steps_offset (`int`, default `0`):\n\t            an offset added to the inference steps. You can use a combination of `offset=1` and\n\t            `set_alpha_to_one=False`, to make the last step use step 0 for the previous alpha product, as done in\n\t            stable diffusion.\n\t        prediction_type (`str`, default `epsilon`):\n\t            indicates whether the model predicts the noise (epsilon), or the samples. One of `epsilon`, `sample`.\n\t            `v-prediction` is not supported for this scheduler.\n\t        dtype (`jnp.dtype`, *optional*, defaults to `jnp.float32`):\n\t            the `dtype` used for params and computation.\n\t    \"\"\"\n", "    _compatibles = [e.name for e in FlaxKarrasDiffusionSchedulers]\n\t    _deprecated_kwargs = [\"predict_epsilon\"]\n\t    dtype: jnp.dtype\n\t    @property\n\t    def has_state(self):\n\t        return True\n\t    @register_to_config\n\t    def __init__(\n\t        self,\n\t        num_train_timesteps: int = 1000,\n", "        beta_start: float = 0.0001,\n\t        beta_end: float = 0.02,\n\t        beta_schedule: str = \"linear\",\n\t        trained_betas: Optional[jnp.ndarray] = None,\n\t        set_alpha_to_one: bool = True,\n\t        steps_offset: int = 0,\n\t        prediction_type: str = \"epsilon\",\n\t        dtype: jnp.dtype = jnp.float32,\n\t        **kwargs,\n\t    ):\n", "        message = (\n\t            \"Please make sure to instantiate your scheduler with `prediction_type` instead. E.g. `scheduler =\"\n\t            f\" {self.__class__.__name__}.from_pretrained(<model_id>, prediction_type='epsilon')`.\"\n\t        )\n\t        predict_epsilon = deprecate(\n\t            \"predict_epsilon\", \"0.13.0\", message, take_from=kwargs\n\t        )\n\t        if predict_epsilon is not None:\n\t            self.register_to_config(\n\t                prediction_type=\"epsilon\" if predict_epsilon else \"sample\"\n", "            )\n\t        self.dtype = dtype\n\t    def create_state(\n\t        self, common: Optional[CommonSchedulerState] = None\n\t    ) -> DDIMSchedulerState:\n\t        if common is None:\n\t            common = CommonSchedulerState.create(self)\n\t        # At every step in ddim, we are looking into the previous alphas_cumprod\n\t        # For the final step, there is no previous alphas_cumprod because we are already at 0\n\t        # `set_alpha_to_one` decides whether we set this parameter simply to one or\n", "        # whether we use the final alpha of the \"non-previous\" one.\n\t        final_alpha_cumprod = (\n\t            jnp.array(1.0, dtype=self.dtype)\n\t            if self.config.set_alpha_to_one\n\t            else common.alphas_cumprod[0]\n\t        )\n\t        # standard deviation of the initial noise distribution\n\t        init_noise_sigma = jnp.array(1.0, dtype=self.dtype)\n\t        timesteps = jnp.arange(0, self.config.num_train_timesteps).round()[::-1]\n\t        return DDIMSchedulerState.create(\n", "            common=common,\n\t            final_alpha_cumprod=final_alpha_cumprod,\n\t            init_noise_sigma=init_noise_sigma,\n\t            timesteps=timesteps,\n\t        )\n\t    def scale_model_input(\n\t        self,\n\t        state: DDIMSchedulerState,\n\t        sample: jnp.ndarray,\n\t        timestep: Optional[int] = None,\n", "    ) -> jnp.ndarray:\n\t        \"\"\"\n\t        Args:\n\t            state (`PNDMSchedulerState`): the `FlaxPNDMScheduler` state data class instance.\n\t            sample (`jnp.ndarray`): input sample\n\t            timestep (`int`, optional): current timestep\n\t        Returns:\n\t            `jnp.ndarray`: scaled input sample\n\t        \"\"\"\n\t        return sample\n", "    def set_timesteps(\n\t        self, state: DDIMSchedulerState, num_inference_steps: int, shape: Tuple = ()\n\t    ) -> DDIMSchedulerState:\n\t        \"\"\"\n\t        Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference.\n\t        Args:\n\t            state (`DDIMSchedulerState`):\n\t                the `FlaxDDIMScheduler` state data class instance.\n\t            num_inference_steps (`int`):\n\t                the number of diffusion steps used when generating samples with a pre-trained model.\n", "        \"\"\"\n\t        step_ratio = self.config.num_train_timesteps // num_inference_steps\n\t        # creates integer timesteps by multiplying by ratio\n\t        # rounding to avoid issues when num_inference_step is power of 3\n\t        timesteps = (jnp.arange(0, num_inference_steps) * step_ratio).round()[\n\t            ::-1\n\t        ] + self.config.steps_offset\n\t        return state.replace(\n\t            num_inference_steps=num_inference_steps,\n\t            timesteps=timesteps,\n", "        )\n\t    def _get_variance(self, state: DDIMSchedulerState, timestep, prev_timestep):\n\t        alpha_prod_t = state.common.alphas_cumprod[timestep]\n\t        alpha_prod_t_prev = jnp.where(\n\t            prev_timestep >= 0,\n\t            state.common.alphas_cumprod[prev_timestep],\n\t            state.final_alpha_cumprod,\n\t        )\n\t        beta_prod_t = 1 - alpha_prod_t\n\t        beta_prod_t_prev = 1 - alpha_prod_t_prev\n", "        variance = (beta_prod_t_prev / beta_prod_t) * (\n\t            1 - alpha_prod_t / alpha_prod_t_prev\n\t        )\n\t        return variance\n\t    def step(\n\t        self,\n\t        state: DDIMSchedulerState,\n\t        model_output: jnp.ndarray,\n\t        timestep: int,\n\t        sample: jnp.ndarray,\n", "        key: Optional[jax.random.KeyArray] = None,\n\t        prev_sample: Optional[jnp.ndarray] = None,\n\t        eta: float = 0.0,\n\t    ) -> Union[FlaxDDIMSchedulerOutput, Tuple]:\n\t        \"\"\"\n\t        Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion\n\t        process from the learned model outputs (most often the predicted noise).\n\t        First, the model_output is used to calculate the prev_sample_mean. If\n\t        key is not None, some noise is added to produce prev_sample (with\n\t        variance depending on eta). If prev_sample is not None, this function\n", "        essentially just calculates the log_prob of prev_sample given\n\t        prev_sample_mean, and prev_sample is returned unmodified.\n\t        Args:\n\t            state (`DDIMSchedulerState`): the `FlaxDDIMScheduler` state data class instance.\n\t            model_output (`jnp.ndarray`): direct output from learned diffusion model.\n\t            timestep (`int`): current discrete timestep in the diffusion chain.\n\t            sample (`jnp.ndarray`):\n\t                current instance of sample being created by diffusion process.\n\t            return_dict (`bool`): option for returning tuple rather than FlaxDDIMSchedulerOutput class\n\t        Returns:\n", "            [`FlaxDDIMSchedulerOutput`] or `tuple`: [`FlaxDDIMSchedulerOutput`] if `return_dict` is True, otherwise a\n\t            `tuple`. When returning a tuple, the first element is the sample tensor.\n\t        \"\"\"\n\t        if state.num_inference_steps is None:\n\t            raise ValueError(\n\t                \"Number of inference steps is 'None', you need to run 'set_timesteps' after creating the scheduler\"\n\t            )\n\t        # See formulas (12) and (16) of DDIM paper https://arxiv.org/pdf/2010.02502.pdf\n\t        # Ideally, read DDIM paper in-detail understanding\n\t        # Notation (<variable name> -> <name in paper>\n", "        # - pred_noise_t -> e_theta(x_t, t)\n\t        # - pred_original_sample -> f_theta(x_t, t) or x_0\n\t        # - std_dev_t -> sigma_t\n\t        # - eta -> η\n\t        # - pred_sample_direction -> \"direction pointing to x_t\"\n\t        # - pred_prev_sample -> \"x_t-1\"\n\t        # 1. get previous step value (=t-1)\n\t        prev_timestep = (\n\t            timestep - self.config.num_train_timesteps // state.num_inference_steps\n\t        )\n", "        alphas_cumprod = state.common.alphas_cumprod\n\t        final_alpha_cumprod = state.final_alpha_cumprod\n\t        # 2. compute alphas, betas\n\t        alpha_prod_t = alphas_cumprod[timestep]\n\t        alpha_prod_t_prev = jnp.where(\n\t            prev_timestep >= 0, alphas_cumprod[prev_timestep], final_alpha_cumprod\n\t        )\n\t        beta_prod_t = 1 - alpha_prod_t\n\t        # broadcast alphas and betas to sample shape\n\t        alpha_prod_t = broadcast_to_shape_from_left(alpha_prod_t, sample.shape)\n", "        alpha_prod_t_prev = broadcast_to_shape_from_left(\n\t            alpha_prod_t_prev, sample.shape\n\t        )\n\t        beta_prod_t = broadcast_to_shape_from_left(beta_prod_t, sample.shape)\n\t        # 3. compute predicted original sample from predicted noise also called\n\t        # \"predicted x_0\" of formula (12) from https://arxiv.org/pdf/2010.02502.pdf\n\t        if self.config.prediction_type == \"epsilon\":\n\t            pred_original_sample = (\n\t                sample - beta_prod_t ** (0.5) * model_output\n\t            ) / alpha_prod_t ** (0.5)\n", "        elif self.config.prediction_type == \"sample\":\n\t            pred_original_sample = model_output\n\t        elif self.config.prediction_type == \"v_prediction\":\n\t            pred_original_sample = (alpha_prod_t**0.5) * sample - (\n\t                beta_prod_t**0.5\n\t            ) * model_output\n\t            # predict V\n\t            model_output = (alpha_prod_t**0.5) * model_output + (\n\t                beta_prod_t**0.5\n\t            ) * sample\n", "        else:\n\t            raise ValueError(\n\t                f\"prediction_type given as {self.config.prediction_type} must be one of `epsilon`, `sample`, or\"\n\t                \" `v_prediction`\"\n\t            )\n\t        # 4. compute variance: \"sigma_t(η)\" -> see formula (16)\n\t        # σ_t = sqrt((1 − α_t−1)/(1 − α_t)) * sqrt(1 − α_t/α_t−1)\n\t        variance = self._get_variance(state, timestep, prev_timestep)\n\t        std_dev_t = eta * variance ** (0.5)\n\t        std_dev_t = broadcast_to_shape_from_left(std_dev_t, sample.shape)\n", "        # 5. compute \"direction pointing to x_t\" of formula (12) from https://arxiv.org/pdf/2010.02502.pdf\n\t        pred_sample_direction = (1 - alpha_prod_t_prev - std_dev_t**2) ** (\n\t            0.5\n\t        ) * model_output\n\t        # 6. compute x_t without \"random noise\" of formula (12) from https://arxiv.org/pdf/2010.02502.pdf\n\t        prev_sample_mean = (\n\t            alpha_prod_t_prev ** (0.5) * pred_original_sample + pred_sample_direction\n\t        )\n\t        # 7. add \"random noise\" of formula (12) from https://arxiv.org/pdf/2010.02502.pdf\n\t        if prev_sample is not None and key is not None:\n", "            raise ValueError(\n\t                \"Cannot pass both key and prev_sample. Please make sure that either `key` or\"\n\t                \" `prev_sample` stays `None`.\"\n\t            )\n\t        if prev_sample is None:\n\t            variance_noise = jax.random.normal(key, sample.shape)\n\t            prev_sample = prev_sample_mean + std_dev_t * variance_noise\n\t        # compute differentiable log_prob of prev_sample\n\t        std_dev_t = jnp.clip(std_dev_t, a_min=1e-6)\n\t        log_prob = (\n", "            -((jax.lax.stop_gradient(prev_sample) - prev_sample_mean) ** 2)\n\t            / (2 * (std_dev_t**2))\n\t            - jnp.log(std_dev_t)\n\t            - jnp.log(jnp.sqrt(2 * jnp.pi))\n\t        )\n\t        # mean along all but batch dimension\n\t        log_prob = jnp.mean(log_prob, axis=tuple(range(1, log_prob.ndim)))\n\t        return prev_sample, state, log_prob\n\t    def add_noise(\n\t        self,\n", "        state: DDIMSchedulerState,\n\t        original_samples: jnp.ndarray,\n\t        noise: jnp.ndarray,\n\t        timesteps: jnp.ndarray,\n\t    ) -> jnp.ndarray:\n\t        return add_noise_common(state.common, original_samples, noise, timesteps)\n\t    def get_velocity(\n\t        self,\n\t        state: DDIMSchedulerState,\n\t        sample: jnp.ndarray,\n", "        noise: jnp.ndarray,\n\t        timesteps: jnp.ndarray,\n\t    ) -> jnp.ndarray:\n\t        return get_velocity_common(state.common, sample, noise, timesteps)\n\t    def __len__(self):\n\t        return self.config.num_train_timesteps\n"]}
{"filename": "config/base.py", "chunked_list": ["from . import user\n\tbase = {\n\t    \"sample\": {\n\t        \"loadpath\": \"f:models/{iteration}\",\n\t        \"savepath\": \"f:samples/{iteration}\",\n\t        \"load_epoch\": \"latest\",\n\t        \"n_samples_per_device\": 4,\n\t        \"pretrained_model\": \"duongna/stable-diffusion-v1-4-flax\",\n\t        \"prompt_kwargs\": {},\n\t        \"n_inference_steps\": 50,\n", "        \"eta\": 1.0,\n\t        \"resolution\": 512,\n\t        \"max_samples\": 50e3,\n\t        \"max_steps\": None,\n\t        \"local_size\": 1600,\n\t        \"guidance_scale\": 5.0,\n\t        \"filter_field\": \"labels\",\n\t        \"mask_mode\": \"streaming_percentile\",\n\t        \"mask_param\": 95,\n\t        \"identical_batch\": False,\n", "        \"iteration\": 0,\n\t        \"evaluate\": False,\n\t        \"cache\": \"cache\",\n\t        \"seed\": None,\n\t    },\n\t    \"sizes\": {\n\t        \"loadpath\": \"f:samples/{iteration}\",\n\t        \"iteration\": 0,\n\t    },\n\t    \"train\": {\n", "        \"modelpath\": \"f:models/{iteration}\",\n\t        \"loadpath\": \"f:samples/{iteration}\",\n\t        \"savepath\": \"f:models/{iteration+1}\",\n\t        \"pretrained_model\": \"duongna/stable-diffusion-v1-4-flax\",\n\t        \"finetuned_model\": None,\n\t        \"load_epoch\": \"latest\",\n\t        \"max_train_samples\": None,\n\t        \"resolution\": 512,\n\t        \"train_cfg\": False,\n\t        \"guidance_scale\": 5.0,\n", "        \"train_batch_size\": 2,\n\t        \"num_train_epochs\": 40,\n\t        \"max_train_steps\": None,\n\t        \"learning_rate\": 1e-5,\n\t        \"beta1\": 0.9,\n\t        \"beta2\": 0.999,\n\t        \"weight_decay\": 1e-4,\n\t        \"epsilon\": 1e-8,\n\t        \"max_grad_norm\": 1.0,\n\t        \"iteration\": 0,\n", "        \"weighted_batch\": False,\n\t        \"weighted_dataset\": False,\n\t        \"dtype\": \"float32\",\n\t        \"cache\": \"cache\",\n\t        \"verbose\": False,\n\t        \"save_freq\": 100,\n\t        \"per_prompt_weights\": False,\n\t        \"seed\": 0,\n\t    },\n\t    \"pg\": {\n", "        # misc\n\t        \"loadpath\": \"\",\n\t        \"load_epoch\": \"latest\",\n\t        \"modelpath\": \"models/pg\",\n\t        \"savepath\": \"f:models/pg\",\n\t        \"pretrained_model\": \"duongna/stable-diffusion-v1-4-flax\",\n\t        \"resolution\": 512,\n\t        \"filter_field\": None,\n\t        \"guidance_scale\": 5.0,\n\t        \"dtype\": \"float32\",\n", "        \"cache\": \"cache\",\n\t        \"verbose\": False,\n\t        \"seed\": 0,\n\t        \"iteration\": 0,\n\t        # sampling\n\t        \"sample_batch_size\": 8,  # per device\n\t        \"num_sample_batches_per_epoch\": 1,\n\t        \"n_inference_steps\": 50,\n\t        \"identical_batch\": False,\n\t        \"evaluate\": False,\n", "        \"eta\": 1.0,\n\t        # training\n\t        \"train_batch_size\": 2,  # per device\n\t        \"train_accumulation_steps\": 1,\n\t        \"num_train_epochs\": 200,\n\t        \"num_inner_epochs\": 1,  # inner epochs of PPO training (# of times to loop over collected data)\n\t        \"ppo_clip_range\": 1e-4,\n\t        \"train_cfg\": True,\n\t        \"learning_rate\": 1e-5,\n\t        \"beta1\": 0.9,\n", "        \"beta2\": 0.999,\n\t        \"weight_decay\": 1e-4,\n\t        \"epsilon\": 1e-8,\n\t        \"max_grad_norm\": 1.0,\n\t        \"save_freq\": 10,\n\t        \"optimizer\": \"adamw\",\n\t        \"train_timestep_ratio\": 1.0,\n\t        \"prompt_kwargs\": {},\n\t        \"per_prompt_stats_bufsize\": 32,\n\t        \"per_prompt_stats_min_count\": 16,\n", "    },\n\t}\n\tcompressed_animals = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/identical-compressed-animals-s1024-p90\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n\t        \"filter_field\": \"jpeg\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 1024,\n", "        \"mask_mode\": \"percentile\",\n\t        \"mask_param\": 90,\n\t        \"identical_batch\": True,\n\t    },\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 4,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n", "    },\n\t    \"pg\": {},\n\t}\n\tneg_compressed_animals = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/identical-neg-compressed-animals-s1024-p90\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n\t        \"filter_field\": \"neg_jpeg\",\n\t    },\n\t    \"sample\": {\n", "        \"max_samples\": 1024,\n\t        \"mask_mode\": \"percentile\",\n\t        \"mask_param\": 90,\n\t        \"identical_batch\": True,\n\t    },\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 1,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n", "        \"dtype\": \"float32\",\n\t    },\n\t    \"pg\": {},\n\t}\n\tcompressed_animals_rwr = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/rwr-compressed-animals-s10k\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n\t        \"filter_field\": \"jpeg\",\n\t    },\n", "    \"sample\": {\n\t        \"max_samples\": 10240,\n\t        \"mask_mode\": \"streaming_percentile\",\n\t        \"mask_param\": 0,  ## save all samples\n\t        \"identical_batch\": False,\n\t    },\n\t    \"calibrate\": {},\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 1,\n", "        \"num_train_epochs\": 5,  ## same number of gradient steps as sparse\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n\t        \"weighted_dataset\": True,\n\t        \"temperature\": 1 / 5.0,\n\t    },\n\t    \"pg\": {},\n\t}\n\tneg_compressed_animals_rwr = {\n\t    \"common\": {\n", "        \"logbase\": f\"{user.bucket}/logs/rwr-neg-compressed-animals-s10k\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n\t        \"filter_field\": \"neg_jpeg\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 10240,\n\t        \"mask_mode\": \"streaming_percentile\",\n\t        \"mask_param\": 0,  ## save all samples\n\t        \"identical_batch\": False,\n\t    },\n", "    \"calibrate\": {},\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 1,\n\t        \"num_train_epochs\": 5,  ## same number of gradient steps as sparse\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n\t        \"weighted_dataset\": True,\n\t        \"temperature\": 1 / 5.0,\n\t    },\n", "    \"pg\": {},\n\t}\n\tvqa_v0 = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/vqa-v0-n2k-s5.0-e50\",\n\t        \"prompt_fn\": \"vqa_dataset\",\n\t        \"prompt_kwargs\": {\"loadpath\": \"assets/vqa_v0.txt\"},\n\t        \"filter_field\": \"vqa\",\n\t    },\n\t    \"sample\": {\n", "        \"max_samples\": 2e3,\n\t        \"mask_mode\": \"threshold\",\n\t        \"mask_param\": 0.65,\n\t        \"identical_batch\": False,\n\t    },\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 1,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n", "    },\n\t    \"pg\": {},\n\t}\n\tllava_vqa = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/llava-vqa-v2\",\n\t        \"prompt_fn\": \"vqa_dataset\",\n\t        \"prompt_kwargs\": {\"loadpath\": \"assets/vqa_v2.txt\"},\n\t        \"filter_field\": \"llava_vqa\",\n\t    },\n", "    \"pg\": {\n\t        \"per_prompt_stats_bufsize\": 128,\n\t        \"per_prompt_stats_min_count\": 32,\n\t        \"num_train_epochs\": 120,\n\t    },\n\t}\n\tllava_counting = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/llava-counting-v0-8\",\n\t        \"prompt_fn\": \"counting\",\n", "        \"prompt_kwargs\": {\n\t            \"nouns_path\": \"assets/very_simple_animals.txt\",\n\t            \"number_range\": (2, 8),\n\t        },\n\t        \"filter_field\": \"llava_vqa\",\n\t    },\n\t    \"pg\": {},\n\t}\n\tllava_bertscore = {\n\t    \"common\": {\n", "        \"logbase\": f\"{user.bucket}/logs/llava-bertscore-2-simple-animals\",\n\t        \"prompt_fn\": \"nouns_activities\",\n\t        \"prompt_kwargs\": {\n\t            \"nouns_path\": \"assets/common_animals.txt\",\n\t            \"activities_path\": \"assets/activities_v0.txt\",\n\t        },\n\t        \"filter_field\": \"llava_bertscore\",\n\t    },\n\t    \"pg\": {},\n\t}\n", "a_dog_1 = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/aesthetic_dogs_sweep/one\",\n\t        \"prompt_fn\": \"manual\",\n\t        \"prompt_kwargs\": {\"prompts\": [\"a dog\"]},\n\t        \"filter_field\": \"aesthetic\",\n\t    },\n\t    \"pg\": {\n\t        \"per_prompt_stats_bufsize\": None,\n\t        \"per_prompt_stats_min_count\": None,\n", "        \"train_batch_size\": 1,\n\t        \"train_accumulation_steps\": 2,\n\t    },\n\t}\n\ta_dog_2 = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/aesthetic_dogs_sweep/imagenet\",\n\t        \"prompt_fn\": \"imagenet_dogs\",\n\t        \"prompt_kwargs\": {},\n\t        \"filter_field\": \"aesthetic\",\n", "    },\n\t    \"pg\": {\n\t        \"train_batch_size\": 1,\n\t        \"train_accumulation_steps\": 2,\n\t    },\n\t}\n\ta_animals = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/aesthetic_simple_animals\",\n\t        \"prompt_fn\": \"from_file\",\n", "        \"prompt_kwargs\": {\"loadpath\": \"assets/common_animals.txt\"},\n\t        \"filter_field\": \"aesthetic\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 1024,\n\t        \"mask_mode\": \"percentile\",\n\t        \"mask_param\": 90,\n\t        \"identical_batch\": True,\n\t    },\n\t    \"train\": {\n", "        \"train_cfg\": True,\n\t        \"train_batch_size\": 1,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n\t    },\n\t    \"pg\": {\n\t        \"train_batch_size\": 1,\n\t        \"train_accumulation_steps\": 2,\n\t    },\n", "}\n\ta_animals_rwr = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/aesthetic_simple_animals_rwr_ppb\",\n\t        \"prompt_fn\": \"from_file\",\n\t        \"prompt_kwargs\": {\"loadpath\": \"assets/common_animals.txt\"},\n\t        \"filter_field\": \"aesthetic\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 10240,\n", "        \"mask_mode\": \"streaming_percentile\",\n\t        \"mask_param\": 0,  ## save all samples\n\t        \"identical_batch\": False,\n\t    },\n\t    \"train\": {\n\t        \"train_cfg\": True,\n\t        \"train_batch_size\": 4,\n\t        \"num_train_epochs\": 5,  ## same number of gradient steps as filter-finetune\n\t        \"save_freq\": 10000000,\n\t        \"dtype\": \"float32\",\n", "        \"weighted_dataset\": True,\n\t        \"temperature\": 1 / 5.0,\n\t        \"per_prompt_weights\": True,\n\t    },\n\t    \"pg\": {},\n\t}\n\tcompressed_animals_nocfg = {\n\t    \"common\": {\n\t        \"logbase\": f\"{user.bucket}/logs/nocfg-compressed-animals-s1024-p90\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n", "        \"filter_field\": \"jpeg\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 1024,\n\t        \"mask_mode\": \"percentile\",\n\t        \"mask_param\": 90,\n\t        \"identical_batch\": True,\n\t    },\n\t    \"calibrate\": {},\n\t    \"train\": {\n", "        \"train_cfg\": False,\n\t        \"train_batch_size\": 2,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n\t    },\n\t    \"pg\": {},\n\t}\n\tneg_compressed_animals_nocfg = {\n\t    \"common\": {\n", "        \"logbase\": f\"{user.bucket}/logs/nocfg-neg-compressed-animals-s1024-p90\",\n\t        \"prompt_fn\": \"imagenet_animals\",\n\t        \"filter_field\": \"neg_jpeg\",\n\t    },\n\t    \"sample\": {\n\t        \"max_samples\": 1024,\n\t        \"mask_mode\": \"percentile\",\n\t        \"mask_param\": 90,\n\t        \"identical_batch\": True,\n\t    },\n", "    \"calibrate\": {},\n\t    \"train\": {\n\t        \"train_cfg\": False,\n\t        \"train_batch_size\": 2,\n\t        \"num_train_epochs\": 50,\n\t        \"save_freq\": 20,\n\t        \"dtype\": \"float32\",\n\t    },\n\t    \"pg\": {},\n\t}\n"]}
{"filename": "config/user.py", "chunked_list": ["bucket = \"gs://my-bucket\"\n"]}
{"filename": "pipeline/finetune.py", "chunked_list": ["import jax\n\tjax.distributed.initialize()\n\timport math\n\timport numpy as np\n\timport jax.numpy as jnp\n\timport optax\n\timport transformers\n\timport diffusers\n\tfrom functools import partial\n\tfrom flax import jax_utils\n", "from flax.training import train_state\n\tfrom jax.experimental.compilation_cache import compilation_cache\n\timport ddpo\n\tfrom ddpo import training, utils\n\tclass Parser(utils.Parser):\n\t    config: str = \"config.base\"\n\t    dataset: str = \"consistent_imagenet\"\n\tDEVICES = jax.local_devices()\n\tp_train_step = jax.pmap(\n\t    training.diffusion.train_step,\n", "    axis_name=\"batch\",\n\t    donate_argnums=(0,),\n\t    static_broadcasted_argnums=(5,),\n\t)\n\t# ------------------------------------ debug -----------------------------------#\n\t@partial(jax.pmap, axis_name=\"batch\")\n\tdef verify_n_workers(y):\n\t    x = jnp.ones(1)\n\t    x = jax.lax.psum(x, \"batch\")\n\t    return x\n", "# ---------------------------------- end debug ---------------------------------#\n\tdef main():\n\t    args = Parser().parse_args(\"train\")\n\t    transformers.set_seed(args.seed)\n\t    compilation_cache.initialize_cache(args.cache)\n\t    logger = utils.init_logging(\"finetune\", args.verbose)\n\t    args.modelpath = None if args.iteration == 0 else args.modelpath\n\t    # --------------------------------- models ---------------------------------#\n\t    stable_models, stable_params = utils.load_finetuned_stable_diffusion(\n\t        args.modelpath,\n", "        epoch=args.load_epoch,\n\t        pretrained_model=args.pretrained_model,\n\t        dtype=args.dtype,\n\t        cache=args.cache,\n\t    )\n\t    tokenizer, text_encoder, vae, unet = stable_models\n\t    vae_params, unet_params = stable_params\n\t    print(f\"n clip params: {utils.n_params(text_encoder.params)/1e6:.3f}M\")\n\t    print(f\"n vae  params: {utils.n_params(vae_params)/1e6:.3f}M\")\n\t    print(f\"n unet params: {utils.n_params(unet_params)/1e6:.3f}M\")\n", "    # -------------------------------- dataset ---------------------------------#\n\t    worker_batch_size = args.train_batch_size * len(jax.local_devices())\n\t    pod_batch_size = worker_batch_size * jax.process_count()\n\t    train_dataset, train_dataloader = ddpo.datasets.get_bucket_loader(\n\t        args.loadpath,\n\t        tokenizer,\n\t        batch_size=worker_batch_size,\n\t        resolution=args.resolution,\n\t        max_train_samples=args.max_train_samples,\n\t    )\n", "    assert not (\n\t        args.weighted_batch and args.weighted_dataset\n\t    ), \"Cannot weight over both batch and dataset\"\n\t    if args.weighted_dataset:\n\t        train_dataset.make_weights(\n\t            args.filter_field, args.temperature, args.per_prompt_weights\n\t        )\n\t    # ------------------------------- optimizer --------------------------------#\n\t    constant_scheduler = optax.constant_schedule(args.learning_rate)\n\t    adamw = optax.adamw(\n", "        learning_rate=constant_scheduler,\n\t        b1=args.beta1,\n\t        b2=args.beta2,\n\t        eps=args.epsilon,\n\t        weight_decay=args.weight_decay,\n\t        mu_dtype=jnp.bfloat16,\n\t    )\n\t    optimizer = optax.chain(\n\t        optax.clip_by_global_norm(args.max_grad_norm),\n\t        adamw,\n", "    )\n\t    state = train_state.TrainState.create(\n\t        apply_fn=unet.apply,\n\t        params=unet_params,\n\t        tx=optimizer,\n\t    )\n\t    noise_scheduler = diffusers.FlaxDDPMScheduler(\n\t        beta_start=0.00085,\n\t        beta_end=0.012,\n\t        beta_schedule=\"scaled_linear\",\n", "        num_train_timesteps=1000,\n\t    )\n\t    noise_scheduler_state = noise_scheduler.create_state()\n\t    # ------------------------------ replication -------------------------------#\n\t    state = jax_utils.replicate(state)\n\t    text_encoder_params = jax_utils.replicate(text_encoder.params)\n\t    noise_scheduler_state = jax_utils.replicate(noise_scheduler_state)\n\t    # -------------------------- generic training setup ------------------------#\n\t    rng = jax.random.PRNGKey(args.seed)\n\t    train_rngs = jax.random.split(rng, len(jax.local_devices()))\n", "    num_update_steps_per_epoch = math.ceil(len(train_dataloader))\n\t    if args.max_train_steps is None:\n\t        args.max_train_steps = args.num_train_epochs * num_update_steps_per_epoch\n\t    else:\n\t        args.num_train_epochs = math.ceil(\n\t            args.max_train_steps / num_update_steps_per_epoch\n\t        )\n\t    static_broadcasted = (\n\t        noise_scheduler,\n\t        text_encoder,\n", "        args.train_cfg,\n\t        args.guidance_scale,\n\t    )\n\t    # -------------------------------- main loop -------------------------------#\n\t    logger.info(f\"dataset size: {len(train_dataset)}\")\n\t    logger.info(f\"batch size per device: {args.train_batch_size}\")\n\t    logger.info(f\"batch size per worker: {worker_batch_size}\")\n\t    logger.info(f\"total pod batch size: {pod_batch_size}\")\n\t    logger.info(f\"n epochs: {args.num_train_epochs}\")\n\t    logger.info(f\"n optimization steps: {args.max_train_steps}\")\n", "    global_step = 0\n\t    for epoch in range(args.num_train_epochs):\n\t        losses = []\n\t        steps_per_epoch = len(train_dataset) // worker_batch_size\n\t        progress = utils.Progress(steps_per_epoch, name=f\"Epoch {epoch}\")\n\t        for batch in train_dataloader:\n\t            batch = utils.shard(batch)\n\t            if args.weighted_batch:\n\t                rewards = batch[args.filter_field].squeeze()\n\t                weights = utils.softmax(rewards, temperature=args.temperature)\n", "            elif args.weighted_dataset:\n\t                # each item has an expected weight of 1, so divide by batch size\n\t                # to get an expected batch sum of 1\n\t                weights = batch[\"weights\"].squeeze() / pod_batch_size\n\t            else:\n\t                weights = None\n\t            state, loss, train_rngs = p_train_step(\n\t                state,\n\t                text_encoder_params,\n\t                batch,\n", "                train_rngs,\n\t                noise_scheduler_state,\n\t                static_broadcasted,\n\t                weights=weights,\n\t            )\n\t            losses.append(loss)\n\t            description = {\n\t                \"idx_min\": batch[\"idxs\"].min(),\n\t                \"idx_max\": batch[\"idxs\"].max(),\n\t                \"shx_min\": batch[\"shuffled_idxs\"].min(),\n", "                \"shx_max\": batch[\"shuffled_idxs\"].max(),\n\t                \"cfg\": args.train_cfg,\n\t                \"scale\": args.guidance_scale,\n\t                \"weights_sum\": weights.sum() if weights is not None else 0,\n\t                # 'labels': batch['labels'].mean(),\n\t            }\n\t            progress(description)\n\t            global_step += 1\n\t            if global_step >= args.max_train_steps:\n\t                break\n", "        loss_avg = np.mean(jax_utils.unreplicate(losses))\n\t        progress({\"average\": loss_avg} | description, n=0)\n\t        progress.stamp()\n\t        if (epoch + 1) % args.save_freq == 0 or epoch == args.num_train_epochs - 1:\n\t            localpath, proc = utils.save_unet(\n\t                args.savepath,\n\t                state.params,\n\t                all_workers=True,\n\t                epoch=(epoch + 1) // args.save_freq * args.save_freq,\n\t            )\n", "if __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "pipeline/save_sizes.py", "chunked_list": ["import os\n\timport subprocess\n\timport shlex\n\timport jax\n\timport pdb\n\tfrom ddpo import utils\n\tclass Parser(utils.Parser):\n\t    config: str = \"config.base\"\n\t    dataset: str = \"compressed_imagenet\"\n\t    override: str = None\n", "args = Parser().parse_args(\"sizes\")\n\tif args.override:\n\t    args.loadpath = args.override\n\tbucket, _ = utils.fs.get_bucket(args.loadpath)\n\tprint(f\"[ sizes ] {args.loadpath}\")\n\tsavepath = os.path.join(args.loadpath, \"sizes.pkl\")\n\tpython = f\"\"\"\n\timport sys\n\tfrom ddpo import utils\n\tfname = sys.argv[1]\n", "reader = utils.SlowRemoteReader('{bucket}', fname)\n\tprint(fname)\n\tprint(len(reader))\n\t\"\"\"\n\twait_every = 100\n\tfnames = utils.fs.ls(args.loadpath)\n\tfnames = [fname for fname in fnames if fname.endswith(\".hdf5\")]\n\tprint(f\"Found {len(fnames)} files | {args.loadpath}\")\n\tprocesses = []\n\tfor i, fname in enumerate(fnames):\n", "    command = f'python -c \"{python}\" {fname}'\n\t    process = subprocess.Popen(\n\t        shlex.split(command),\n\t        stdout=subprocess.PIPE,\n\t        stderr=subprocess.PIPE,\n\t    )\n\t    processes.append(process)\n\t    if i > 0 and i % wait_every == 0:\n\t        print(f\"waiting at {i}\")\n\t        [process.wait() for process in processes]\n", "        print(\"done\")\n\t        # if i > 0: pdb.set_trace()\n\tprint(\"waiting\")\n\t[process.wait() for process in processes]\n\tprint(\"done\")\n\tstdouts = [process.communicate()[0].decode() for process in processes]\n\tsizes = []\n\tfor stdout in stdouts:\n\t    lines = [line for line in stdout.split(\"\\n\") if len(line)]\n\t    try:\n", "        size = int(lines[-1])\n\t        sizes.append(size)\n\t    except:\n\t        pdb.set_trace()\n\tprint(f\"Found {len(sizes)} sizes | Total: {sum(sizes)}\")\n\tassert len(fnames) == len(sizes)\n\tsizes_d = {fname: size for fname, size in zip(fnames, sizes)}\n\tif jax.process_index() == 0:\n\t    utils.fs.save(savepath, sizes_d)\n"]}
{"filename": "pipeline/policy_gradient.py", "chunked_list": ["import json\n\timport os\n\timport time\n\timport numpy as np\n\timport matplotlib.pyplot as plt\n\timport jax\n\timport jax.numpy as jnp\n\timport optax\n\timport transformers\n\tfrom functools import partial\n", "from concurrent import futures\n\tfrom flax import jax_utils\n\tfrom flax.training.common_utils import shard\n\tfrom flax.training.checkpoints import save_checkpoint_multiprocess\n\tfrom jax.experimental import multihost_utils\n\tfrom jax.experimental.compilation_cache import compilation_cache\n\timport jax.profiler\n\timport ddpo\n\tfrom ddpo import training, utils\n\tfrom ddpo.utils.stat_tracking import PerPromptStatTracker\n", "from ddpo.diffusers_patch.pipeline_flax_stable_diffusion import (\n\t    FlaxStableDiffusionPipeline,\n\t)\n\tfrom ddpo.diffusers_patch.scheduling_ddim_flax import FlaxDDIMScheduler\n\tfrom ddpo.utils.serialization import is_dtype, get_dtype, to_dtype, load_flax_model\n\timport tqdm\n\timport matplotlib.pyplot as plt\n\tclass Parser(utils.Parser):\n\t    config: str = \"config.base\"\n\t    dataset: str = \"consistent_imagenet\"\n", "p_train_step = jax.pmap(\n\t    training.policy_gradient.train_step,\n\t    axis_name=\"batch\",\n\t    donate_argnums=0,\n\t    static_broadcasted_argnums=(3, 4, 5, 6, 7, 8),\n\t)\n\tdef main():\n\t    args = Parser().parse_args(\"pg\")\n\t    transformers.set_seed(args.seed)\n\t    compilation_cache.initialize_cache(args.cache)  # only works on TPU\n", "    utils.init_logging(\"policy_gradient\", args.verbose)\n\t    rng = jax.random.PRNGKey(args.seed)\n\t    n_devices = jax.local_device_count()\n\t    train_worker_batch_size = n_devices * args.train_batch_size\n\t    train_pod_batch_size = train_worker_batch_size * jax.process_count()\n\t    train_effective_batch_size = train_pod_batch_size * args.train_accumulation_steps\n\t    sample_worker_batch_size = n_devices * args.sample_batch_size\n\t    sample_pod_batch_size = sample_worker_batch_size * jax.process_count()\n\t    total_samples_per_epoch = args.num_sample_batches_per_epoch * sample_pod_batch_size\n\t    print(\n", "        f\"[ policy_gradient ] local devices: {n_devices} | \"\n\t        f\"number of workers: {jax.process_count()}\"\n\t    )\n\t    print(\n\t        f\"[ policy_gradient ] sample worker batch size: {sample_worker_batch_size} | \"\n\t        f\"sample pod batch size: {sample_pod_batch_size}\"\n\t    )\n\t    print(\n\t        f\"[ policy_gradient ] train worker batch size: {train_worker_batch_size} | \"\n\t        f\"train pod batch size: {train_pod_batch_size} | \"\n", "        f\"train accumulated batch size: {train_effective_batch_size}\"\n\t    )\n\t    print(\n\t        f\"[ policy_gradient ] number of sample batches per epoch: {args.num_sample_batches_per_epoch}\"\n\t    )\n\t    print(\n\t        f\"[ policy_gradient ] total number of samples per epoch: {total_samples_per_epoch}\"\n\t    )\n\t    print(\n\t        f\"[ policy_gradient ] number of gradient updates per inner epoch: {total_samples_per_epoch // train_effective_batch_size}\"\n", "    )\n\t    assert args.sample_batch_size >= args.train_batch_size\n\t    assert args.sample_batch_size % args.train_batch_size == 0\n\t    assert total_samples_per_epoch % train_effective_batch_size == 0\n\t    worker_id = jax.process_index()\n\t    localpath = \"logs/\" + args.savepath.replace(\"gs://\", \"\")\n\t    os.umask(0)\n\t    os.makedirs(localpath, exist_ok=True, mode=0o777)\n\t    with open(f\"{localpath}/args.json\", \"w\") as f:\n\t        json.dump(args._dict, f, indent=4)\n", "    # --------------------------------- models ---------------------------------#\n\t    # load text encoder, vae, and unet (unet is optionally loaded from a local\n\t    # fine-tuned path if args.loadpath is not None)\n\t    print(\"loading models...\")\n\t    pipeline, params = utils.load_unet(\n\t        None,\n\t        epoch=args.load_epoch,\n\t        pretrained_model=args.pretrained_model,\n\t        dtype=args.dtype,\n\t        cache=args.cache,\n", "    )\n\t    pipeline.safety_checker = None\n\t    params = jax.device_get(params)\n\t    pipeline.scheduler = FlaxDDIMScheduler(\n\t        num_train_timesteps=pipeline.scheduler.config.num_train_timesteps,\n\t        beta_start=pipeline.scheduler.config.beta_start,\n\t        beta_end=pipeline.scheduler.config.beta_end,\n\t        beta_schedule=pipeline.scheduler.config.beta_schedule,\n\t        trained_betas=pipeline.scheduler.config.trained_betas,\n\t        set_alpha_to_one=pipeline.scheduler.config.set_alpha_to_one,\n", "        steps_offset=pipeline.scheduler.config.steps_offset,\n\t        prediction_type=pipeline.scheduler.config.prediction_type,\n\t    )\n\t    noise_scheduler_state = pipeline.scheduler.set_timesteps(\n\t        params[\"scheduler\"],\n\t        num_inference_steps=args.n_inference_steps,\n\t        shape=(\n\t            args.train_batch_size,\n\t            pipeline.unet.in_channels,\n\t            args.resolution // pipeline.vae_scale_factor,\n", "            args.resolution // pipeline.vae_scale_factor,\n\t        ),\n\t    )\n\t    # ------------------------------- optimizer --------------------------------#\n\t    print(\"initializing train state...\")\n\t    constant_scheduler = optax.constant_schedule(args.learning_rate)\n\t    optim = {\n\t        \"adamw\": optax.adamw(\n\t            learning_rate=constant_scheduler,\n\t            b1=args.beta1,\n", "            b2=args.beta2,\n\t            eps=args.epsilon,\n\t            weight_decay=args.weight_decay,\n\t            mu_dtype=jnp.bfloat16,\n\t        ),\n\t        \"adafactor\": optax.adafactor(\n\t            learning_rate=constant_scheduler,\n\t            weight_decay_rate=args.weight_decay,\n\t        ),\n\t    }[args.optimizer]\n", "    optimizer = optax.chain(\n\t        optax.clip_by_global_norm(args.max_grad_norm),\n\t        optim,\n\t    )\n\t    opt_state = jax.jit(optimizer.init, backend=\"cpu\")(params[\"unet\"])\n\t    # NOTE(kvablack) optax.MultiSteps takes way more memory than necessary; this\n\t    # class is a workaround that requires compiling twice. there may be a better\n\t    # way but this works.\n\t    state = training.policy_gradient.AccumulatingTrainState(\n\t        step=0,\n", "        apply_fn=pipeline.unet.apply,\n\t        params=params[\"unet\"],\n\t        tx=optimizer,\n\t        opt_state=opt_state,\n\t        grad_acc=jax.tree_map(np.zeros_like, params[\"unet\"]),\n\t        n_acc=0,\n\t    )\n\t    # ------------------------------ replication -------------------------------#\n\t    state = jax_utils.replicate(state)\n\t    sampling_scheduler_params = jax_utils.replicate(params[\"scheduler\"])\n", "    noise_scheduler_state = jax_utils.replicate(noise_scheduler_state)\n\t    # -------------------------- setup ------------------------#\n\t    timer = utils.Timer()\n\t    @partial(jax.pmap)\n\t    def vae_decode(latents, vae_params):\n\t        # expects latents in NCHW format (batch_size, 4, 64, 64)\n\t        latents = latents / 0.18215\n\t        images = pipeline.vae.apply(\n\t            {\"params\": vae_params}, latents, method=pipeline.vae.decode\n\t        ).sample\n", "        images = (images / 2 + 0.5).clip(0, 1).transpose(0, 2, 3, 1)\n\t        return images\n\t    # text encode on CPU to save memory\n\t    @partial(jax.jit, backend=\"cpu\")\n\t    def text_encode(input_ids):\n\t        return pipeline.text_encoder(input_ids, params=params[\"text_encoder\"])[0]\n\t    # make uncond prompts and embed them\n\t    uncond_prompt_ids = ddpo.datasets.make_uncond_text(pipeline.tokenizer, 1)\n\t    timer()\n\t    uncond_prompt_embeds = text_encode(uncond_prompt_ids).squeeze()\n", "    print(f\"[ embed uncond prompts ] in {timer():.2f}s\")\n\t    sample_uncond_prompt_embeds = np.broadcast_to(\n\t        uncond_prompt_embeds, (args.sample_batch_size, *uncond_prompt_embeds.shape)\n\t    )\n\t    sample_uncond_prompt_embeds = jax_utils.replicate(sample_uncond_prompt_embeds)\n\t    train_uncond_prompt_embeds = sample_uncond_prompt_embeds[:, : args.train_batch_size]\n\t    train_rng, sample_rng = jax.random.split(rng)\n\t    # ------------------------------ callbacks -------------------------------#\n\t    callback_fns = {\n\t        args.filter_field: training.callback_fns[args.filter_field](),\n", "    }\n\t    # executor to perform callbacks asynchronously\n\t    # this is beneficial for the llava callbacks which makes a request to a\n\t    # server running llava inference\n\t    executor = futures.ThreadPoolExecutor(max_workers=2)\n\t    # put vae params on device for sampling\n\t    params[\"vae\"] = jax_utils.replicate(params[\"vae\"])\n\t    if args.per_prompt_stats_bufsize is not None:\n\t        per_prompt_stats = PerPromptStatTracker(\n\t            args.per_prompt_stats_bufsize, args.per_prompt_stats_min_count\n", "        )\n\t    mean_rewards = []  # mean reward for each epoch\n\t    std_rewards = []  # std reward for each epoch\n\t    for epoch in range(args.num_train_epochs):\n\t        # list of dicts with entires of shape:\n\t        # (num_devices * sample_batch_size, ...)\n\t        samples = []\n\t        for i in tqdm.tqdm(\n\t            range(args.num_sample_batches_per_epoch),\n\t            desc=f\"epoch {epoch}: sample\",\n", "            position=0,\n\t        ):\n\t            # ----------------------------- make prompts ----------------------------- #\n\t            # shape (num_devices * sample_batch_size, ...)\n\t            sample_prompts, training_prompts, prompt_metadata = training.make_prompts(\n\t                args.prompt_fn,\n\t                n_devices * args.sample_batch_size,\n\t                args.identical_batch,\n\t                evaluate=args.evaluate,\n\t                **args.prompt_kwargs,\n", "            )\n\t            # ----------------------------- sample ----------------------------- #\n\t            sample_rng, sample_seed = jax.random.split(sample_rng)\n\t            sample_seeds = jax.random.split(sample_seed, n_devices)\n\t            # encode prompts\n\t            sample_prompt_ids = pipeline.prepare_inputs(sample_prompts)\n\t            sample_prompt_embeds = text_encode(sample_prompt_ids)\n\t            timer()\n\t            sampling_params = {\n\t                \"unet\": state.params,\n", "                \"scheduler\": sampling_scheduler_params,\n\t            }\n\t            # shape (num_devices, sample_batch_size, ...)\n\t            final_latents, latents, next_latents, log_probs, ts = pipeline(\n\t                shard(sample_prompt_embeds),\n\t                sample_uncond_prompt_embeds,\n\t                sampling_params,\n\t                sample_seeds,\n\t                args.n_inference_steps,\n\t                jit=True,\n", "                height=args.resolution,\n\t                width=args.resolution,\n\t                guidance_scale=args.guidance_scale,\n\t                eta=args.eta,\n\t            )\n\t            # ----------------------------- decode latents ----------------------------- #\n\t            images = vae_decode(final_latents, params[\"vae\"])\n\t            # ----------------------------- evaluate callbacks ----------------------------- #\n\t            # fetch decoded images to device\n\t            images = jax.device_get(utils.unshard(images))\n", "            # evaluate callbacks\n\t            callbacks = executor.submit(\n\t                training.evaluate_callbacks,\n\t                callback_fns,\n\t                images,\n\t                sample_prompts,\n\t                prompt_metadata,\n\t            )\n\t            # yield to callback to make sure it has a chance to run\n\t            time.sleep(0)\n", "            # ----------------------------- save ----------------------------- #\n\t            samples.append(\n\t                {\n\t                    \"prompts\": np.array(sample_prompts),\n\t                    \"embeds\": np.array(sample_prompt_embeds),\n\t                    \"latents\": jax.device_get(utils.unshard(latents)),\n\t                    \"next_latents\": jax.device_get(utils.unshard(next_latents)),\n\t                    \"log_probs\": jax.device_get(utils.unshard(log_probs)),\n\t                    \"ts\": jax.device_get(utils.unshard(ts)),\n\t                    \"callbacks\": callbacks,\n", "                }\n\t            )\n\t            # save a sample\n\t            pipeline.numpy_to_pil(images[0])[0].save(\n\t                utils.fs.join_and_create(\n\t                    localpath, f\"samples/{worker_id}_{epoch}_{i}.png\"\n\t                )\n\t            )\n\t        # take vae params off device to save memory\n\t        # NOTE(kvablack) this doesn't actually seem to do anything\n", "        # params[\"vae\"] = jax.device_get(jax_utils.unreplicate(params[\"vae\"]))\n\t        # wait for callbacks to finish\n\t        for sample in samples:\n\t            sample[\"rewards\"], sample[\"callback_info\"] = sample[\"callbacks\"].result()[\n\t                args.filter_field\n\t            ]\n\t            del sample[\"callbacks\"]\n\t        # collate samples into a single dict, flattening\n\t        # shape: (num_sample_batches_per_epoch * num_devices * sample_batch_size, ...)\n\t        samples = jax.tree_map(lambda *xs: np.concatenate(xs), *samples)\n", "        # allgather rewards (for multi-host training)\n\t        rewards = np.array(\n\t            multihost_utils.process_allgather(samples[\"rewards\"], tiled=True)\n\t        )\n\t        # per-prompt mean/std tracking\n\t        if args.per_prompt_stats_bufsize is not None:\n\t            prompt_ids = pipeline.tokenizer(\n\t                samples[\"prompts\"].tolist(), padding=\"max_length\", return_tensors=\"np\"\n\t            ).input_ids\n\t            prompt_ids = multihost_utils.process_allgather(prompt_ids, tiled=True)\n", "            prompts = np.array(\n\t                pipeline.tokenizer.batch_decode(prompt_ids, skip_special_tokens=True)\n\t            )\n\t            advantages = per_prompt_stats.update(prompts, rewards)\n\t            if jax.process_index() == 0:\n\t                np.save(\n\t                    utils.fs.join_and_create(\n\t                        localpath, f\"per_prompt_stats/{worker_id}_{epoch}.npy\"\n\t                    ),\n\t                    per_prompt_stats.get_stats(),\n", "                )\n\t        else:\n\t            advantages = (rewards - np.mean(rewards)) / np.std(rewards)\n\t        samples[\"advantages\"] = advantages.reshape(jax.process_count(), -1)[worker_id]\n\t        print(f\"mean reward: {np.mean(rewards):.4f}\")\n\t        mean_rewards.append(np.mean(rewards))\n\t        std_rewards.append(np.std(rewards))\n\t        # save data for future analysis\n\t        np.save(\n\t            utils.fs.join_and_create(localpath, f\"rewards/{worker_id}_{epoch}.npy\"),\n", "            samples[\"rewards\"],\n\t        )\n\t        np.save(\n\t            utils.fs.join_and_create(localpath, f\"prompts/{worker_id}_{epoch}.npy\"),\n\t            samples[\"prompts\"],\n\t        )\n\t        np.save(\n\t            utils.fs.join_and_create(\n\t                localpath, f\"callback_info/{worker_id}_{epoch}.npy\"\n\t            ),\n", "            samples[\"callback_info\"],\n\t        )\n\t        del samples[\"prompts\"]\n\t        del samples[\"callback_info\"]\n\t        del samples[\"rewards\"]\n\t        for inner_epoch in range(args.num_inner_epochs):\n\t            total_batch_size, num_timesteps = samples[\"log_probs\"].shape\n\t            assert (\n\t                total_batch_size\n\t                == args.num_sample_batches_per_epoch\n", "                * n_devices\n\t                * args.sample_batch_size\n\t            )\n\t            assert num_timesteps == args.n_inference_steps\n\t            # shuffle samples along batch dimension\n\t            perm = np.random.permutation(total_batch_size)\n\t            samples = jax.tree_map(lambda x: x[perm], samples)\n\t            # shuffle along time dimension, independently for each sample\n\t            perms = np.array(\n\t                [np.random.permutation(num_timesteps) for _ in range(total_batch_size)]\n", "            )\n\t            for key in [\"latents\", \"next_latents\", \"log_probs\", \"ts\"]:\n\t                samples[key] = samples[key][np.arange(total_batch_size)[:, None], perms]\n\t            # rebatch (and shard) for training\n\t            samples_train = jax.tree_map(\n\t                lambda x: x.reshape(-1, n_devices, args.train_batch_size, *x.shape[1:]),\n\t                samples,\n\t            )\n\t            # dict of lists to list of dicts for iteration\n\t            samples_train = [\n", "                dict(zip(samples_train, x)) for x in zip(*samples_train.values())\n\t            ]\n\t            # number of timesteps within each trajectory to train on\n\t            num_train_ts = int(num_timesteps * args.train_timestep_ratio)\n\t            all_infos = []\n\t            for i, sample in tqdm.tqdm(\n\t                list(enumerate(samples_train)),\n\t                desc=f\"outer epoch {epoch}, inner epoch {inner_epoch}: train\",\n\t            ):\n\t                for j in range(num_train_ts):\n", "                    batch = {\n\t                        \"prompt_embeds\": sample[\"embeds\"],\n\t                        \"uncond_embeds\": train_uncond_prompt_embeds,\n\t                        \"advantages\": sample[\"advantages\"],\n\t                        \"latents\": sample[\"latents\"][:, :, j],\n\t                        \"next_latents\": sample[\"next_latents\"][:, :, j],\n\t                        \"log_probs\": sample[\"log_probs\"][:, :, j],\n\t                        \"ts\": sample[\"ts\"][:, :, j],\n\t                    }\n\t                    # update if we're at the last timestep (i.e. we've finished a sequence)\n", "                    # and we've accumulated enough samples\n\t                    do_opt_update = (j == num_train_ts - 1) and (\n\t                        (i + 1) % args.train_accumulation_steps == 0\n\t                    )\n\t                    if do_opt_update:\n\t                        print(f\"opt update at {i}, {j}\")\n\t                    state, info = p_train_step(\n\t                        state,\n\t                        batch,\n\t                        noise_scheduler_state,\n", "                        pipeline.scheduler,\n\t                        args.train_cfg,\n\t                        args.guidance_scale,\n\t                        args.eta,\n\t                        args.ppo_clip_range,\n\t                        do_opt_update,\n\t                    )\n\t                    multihost_utils.assert_equal(info, \"infos equal\")\n\t                    all_infos.append(\n\t                        jax.tree_map(lambda x: np.mean(jax.device_get(x)), info)\n", "                    )\n\t            assert do_opt_update\n\t            all_infos = jax.tree_map(lambda *xs: np.stack(xs), *all_infos)\n\t            print(f\"mean info: {jax.tree_map(np.mean, all_infos)}\")\n\t            if jax.process_index() == 0:\n\t                np.save(\n\t                    utils.fs.join_and_create(\n\t                        localpath, f\"train_info/{worker_id}_{epoch}_{inner_epoch}.npy\"\n\t                    ),\n\t                    all_infos,\n", "                )\n\t        if (epoch + 1) % args.save_freq == 0 or epoch == args.num_train_epochs - 1:\n\t            save_checkpoint_multiprocess(\n\t                os.path.join(args.savepath, \"checkpoints\"),\n\t                jax_utils.unreplicate(state.params),\n\t                step=epoch,\n\t                keep=1e6,\n\t                overwrite=True,\n\t            )\n\t        # plot reward curve\n", "        if jax.process_index() == 0:\n\t            plt.clf()\n\t            plt.plot(mean_rewards, color=\"black\")\n\t            plt.fill_between(\n\t                range(len(mean_rewards)),\n\t                np.array(mean_rewards) - np.array(std_rewards),\n\t                np.array(mean_rewards) + np.array(std_rewards),\n\t                alpha=0.4,\n\t                color=\"blue\",\n\t            )\n", "            plt.savefig(os.path.join(localpath, f\"log_{worker_id}.png\"))\n\t            print()\n\t            utils.async_to_bucket(localpath, args.savepath)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "pipeline/sample.py", "chunked_list": ["import os\n\timport jax\n\tjax.distributed.initialize()\n\timport numpy as np\n\tfrom flax.jax_utils import replicate\n\tfrom flax.training.common_utils import shard\n\tfrom jax.experimental.compilation_cache import compilation_cache\n\tfrom ddpo import datasets, training, utils\n\tclass Parser(utils.Parser):\n\t    config: str = \"config.base\"\n", "    dataset: str = \"compressed_dogs\"\n\targs = Parser().parse_args(\"sample\")\n\tcompilation_cache.initialize_cache(args.cache)\n\trng = jax.random.PRNGKey(args.seed)\n\tn_devices = jax.local_device_count()\n\tbatch_size = n_devices * args.n_samples_per_device\n\tpod_batch_size = batch_size * jax.process_count()\n\tprint(\n\t    f\"[ sample ] local devices: {n_devices} | \"\n\t    f\"pod devices: {n_devices * jax.process_count()} | \"\n", "    f\"worker batch_size: {batch_size} | \"\n\t    f\"pod batch size: {pod_batch_size}\"\n\t)\n\t# ----------------------------------- loading ----------------------------------#\n\tloadpath = None if args.iteration == 0 else args.loadpath\n\tpipeline, params = utils.load_unet(\n\t    loadpath,\n\t    epoch=args.load_epoch,\n\t    pretrained_model=args.pretrained_model,\n\t    cache=args.cache,\n", ")\n\tparams = replicate(params)\n\tpipeline.safety_checker = None\n\tcallback_keys = [args.filter_field, \"vae\"]\n\tcallback_fns = {key: training.callback_fns[key]() for key in callback_keys}\n\tif args.guidance_scale == \"auto\":\n\t    args.guidance_scale = utils.load_guidance_scale(args.loadpath)\n\tvae_decode = jax.pmap(training.vae_decode, static_broadcasted_argnums=(2, 3))\n\ttext_encode = jax.pmap(training.text_encode, static_broadcasted_argnums=(2,))\n\ttraining.patch_scheduler(pipeline)\n", "# ----------------------------------- bucket -----------------------------------#\n\twriter = utils.RemoteWriter(args.savepath, split_size=args.local_size)\n\twriter.configure(\"images\", encode_fn=utils.encode_jpeg, decode_fn=utils.decode_jpeg)\n\twriter.configure(\"inference_prompts\")\n\twriter.configure(\n\t    \"training_prompts\", encode_fn=utils.encode_generic, decode_fn=utils.decode_generic\n\t)\n\tfor key in callback_fns:\n\t    writer.configure(key)\n\t# -------------------------------- uncond prompt --------------------------------#\n", "uncond_prompt_ids = datasets.make_uncond_text(pipeline.tokenizer, batch_size)\n\tuncond_prompt_embeds = text_encode(\n\t    shard(uncond_prompt_ids), params[\"text_encoder\"], pipeline.text_encoder\n\t)\n\tprint(f\"[ sample ] embed uncond prompts: {uncond_prompt_embeds.shape}\")\n\t# ---------------------------------- main loop ---------------------------------#\n\tmasker = utils.make_masker(args.mask_mode, args.mask_param)\n\tavg = utils.StreamingAverage()\n\ttimer = utils.Timer()\n\tprint(\n", "    f\"[ sample ] max_samples: {args.max_samples} | \"\n\t    f\"max_steps: {args.max_steps} | eval: {args.evaluate}\"\n\t)\n\tn_steps = 0\n\tn_samples = 0\n\tall_rewards = []\n\twhile True:\n\t    rng, prng_seed = jax.random.split(rng)\n\t    prng_seeds = jax.random.split(prng_seed, n_devices)\n\t    inference_prompts, training_prompts, prompt_metadata = training.make_prompts(\n", "        args.prompt_fn,\n\t        batch_size,\n\t        args.identical_batch,\n\t        evaluate=args.evaluate,\n\t        **args.prompt_kwargs,\n\t    )\n\t    print(f\"[ sample ] prompts: {inference_prompts[:2]}\")\n\t    prompt_ids = pipeline.prepare_inputs(inference_prompts)\n\t    prompt_embeds = text_encode(\n\t        shard(prompt_ids), params[\"text_encoder\"], pipeline.text_encoder\n", "    )\n\t    final_latents, *_ = pipeline(\n\t        prompt_embeds,\n\t        uncond_prompt_embeds,\n\t        params,\n\t        prng_seeds,\n\t        args.n_inference_steps,\n\t        jit=True,\n\t        height=args.resolution,\n\t        width=args.resolution,\n", "        guidance_scale=args.guidance_scale,\n\t        eta=args.eta,\n\t    )\n\t    images = utils.unshard(\n\t        vae_decode(\n\t            final_latents,\n\t            params[\"vae\"],\n\t            pipeline.vae.apply,\n\t            pipeline.vae.decode,\n\t        )\n", "    )\n\t    images = np.array(images).astype(np.float32)\n\t    print(\n\t        f\"[ sample ] {len(images)} samples in {timer():.2f} seconds | eval: {args.evaluate}\"\n\t    )\n\t    infos = training.evaluate_callbacks(\n\t        callback_fns, images, training_prompts, prompt_metadata\n\t    )\n\t    rewards, metadata = infos[args.filter_field]\n\t    all_rewards.append(rewards.squeeze())\n", "    avg(rewards.mean().item())\n\t    mask = masker(rewards)\n\t    print(rewards.squeeze())\n\t    batch = {\n\t        \"inference_prompts\": inference_prompts,\n\t        \"training_prompts\": training_prompts,\n\t        \"images\": images,\n\t        **{key: rew for key, (rew, _) in infos.items()},\n\t    }\n\t    n_added = writer.add_batch(batch, mask=mask)\n", "    n_steps += 1\n\t    n_samples += utils.worker_sum(n_added)\n\t    print(\n\t        f\"[ sample ] batch {n_steps} \" f\"/ {args.max_steps} | \"\n\t        if args.max_steps\n\t        else \"| \"\n\t        f\" saved: {n_added} | \"\n\t        f\" total: {int(n_samples)} / {args.max_samples} | \"\n\t        f\"average: {avg.avg:.3f} | \"\n\t        f\"mask: {masker} |\"\n", "        f\"saving: {timer():.2f} seconds\\n\"\n\t    )\n\t    if args.max_steps is not None and n_steps >= args.max_steps:\n\t        break\n\t    if args.max_samples is not None and n_samples >= args.max_samples:\n\t        break\n\twriter.close()\n"]}
