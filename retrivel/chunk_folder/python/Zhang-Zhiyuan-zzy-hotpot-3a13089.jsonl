{"filename": "setup.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : setup\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/21\n\t@Time   : 5:25\n\t\"\"\"\n\timport setuptools\n\tsetuptools.setup(\n", "    name=\"hotpot-zzy\",\n\t    version=\"0.3.1.0\",\n\t    description=\"A python package designed to communicate among various chemical and materials calculational tools\",\n\t    long_description=open(\"README.md\", \"r\").read(),\n\t    long_description_content_type=\"text/markdown\",\n\t    author=\"Zhiyuan Zhang\",\n\t    author_email=\"ZhiyuanZhang_scu@163.com\",\n\t    url=\"https://github.com/Zhang-Zhiyuan-zzy/hotpot\",\n\t    project_urls={\n\t        \"Homepage\": \"https://github.com/Zhang-Zhiyuan-zzy/hotpot\"\n", "    },\n\t    classifiers=[\n\t        \"Programming Language :: Python :: 3\",\n\t        \"License :: OSI Approved :: MIT License\",\n\t        \"Operating System :: Unix\",\n\t    ],\n\t    packages=setuptools.find_packages(),\n\t    install_requires=[\n\t        \"numpy\",\n\t        \"pandas\",\n", "        \"thermo\",\n\t        \"cclib\",\n\t        \"tqdm\",\n\t        \"rdkit\",\n\t        \"psutil\",\n\t    ],\n\t    include_package_data=True,\n\t)\n"]}
{"filename": "test/test_cheminfo.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : test_cheminfo\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/16\n\t@Time   : 22:21\n\tNotes:\n\t    Test `hotpot/cheminfo` module\n\t\"\"\"\n", "from pathlib import Path\n\timport unittest as ut\n\timport hotpot as hp\n\tclass TestMolecule(ut.TestCase):\n\t    \"\"\" Test `hotpot/cheminfo/Molecule` class \"\"\"\n\t    def test_read_from(self):\n\t        \"\"\" test the `read_from` method \"\"\"\n\t        mol_path = Path(hp.hp_root).joinpath('..', 'test', 'inputs', 'struct', 'abnormal_output.log')\n\t        mol_ab16log = hp.Molecule.read_from(mol_path, 'g16log', force=True)\n\t        self.assertIsInstance(mol_ab16log, hp.Molecule)\n", "        self.assertTrue(mol_ab16log.has_3d)\n\t        self.assertGreater(mol_ab16log.conformer_counts, 1)\n"]}
{"filename": "test/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : __init__.py\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/16\n\t@Time   : 22:19\n\t\"\"\"\n"]}
{"filename": "test/test_quantum.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : test_quantum\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/19\n\t@Time   : 22:08\n\t\"\"\"\n\timport os\n\timport unittest as ut\n", "import hotpot as hp\n\tclass TestGaussian(ut.TestCase):\n\t    \"\"\"\"\"\"\n\t    def test_run_gaussian(self):\n\t        if os.environ.get('g16root'):\n\t            test_dir = os.path.join(hp.hp_root, '..', 'test', 'output', 'gaussrun')\n\t            if not os.path.exists(test_dir):\n\t                os.mkdir(test_dir)\n\t            os.chdir(test_dir)\n\t            g16root = \"/home/pub\"\n", "            mol = hp.Molecule.read_from('c1cc2(O[Fe+3]O2)(N)ccc1', 'smi')\n\t            mol.build_3d()\n\t            mol.gaussian(\n\t                g16root=g16root,\n\t                link0=[\"nproc=16\", \"mem=64GB\"],\n\t                route=\"opt M062X/6-311\",\n\t                inplace_attrs=True\n\t            )\n"]}
{"filename": "hotpot/cheminfo.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : cheminfo.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/14\n\t@Time   : 4:09\n\t\"\"\"\n\timport copy\n\timport json\n", "import os\n\timport re\n\tfrom abc import ABC, abstractmethod\n\tfrom io import IOBase\n\tfrom os import PathLike\n\tfrom os.path import join as opj\n\tfrom pathlib import Path\n\tfrom typing import *\n\tfrom itertools import product\n\timport numpy as np\n", "from openbabel import openbabel as ob, pybel as pb\n\tfrom rdkit import Chem\n\tfrom rdkit.Chem import Draw\n\tfrom hotpot import data_root\n\tfrom hotpot.tanks import lmp\n\tfrom hotpot.tanks.qm.gaussian import Gaussian, GaussianRunError, GaussRun, Debugger\n\tfrom hotpot.utils.library import library as _lib  # The chemical library\n\t# Define Exceptions\n\tclass OperateOBMolFail(BaseException):\n\t    \"\"\" Raise for any fail that trys to operate the OBMol \"\"\"\n", "class AddAtomFail(OperateOBMolFail):\n\t    \"\"\" Raise when add an atom into Molecule fail \"\"\"\n\tclass AddBondFail(OperateOBMolFail):\n\t    \"\"\" Raise when add a bond into Molecule fail \"\"\"\n\t# periodic_table = json.load(open(opj(data_root, 'periodic_table.json'), encoding='utf-8'))\n\tperiodic_table = _lib.get('PeriodicTable')  # hotpot.utils.library.PeriodicTabel\n\t_stable_charges = {\n\t    \"H\": 1,  \"He\": 0,\n\t    \"Li\": 1, \"Be\": 2, \"B\": 3,  \"C\": 4,  \"N\": -3,  \"O\": -2,  \"F\": -1,  \"Ne\": 0,\n\t    \"Na\": 1, \"Mg\": 2, \"Al\": 3, \"Si\": 4, \"P\": -3,  \"S\": -2,  \"Cl\": -1, \"Ar\": 0,\n", "    \"K\": 1,  \"Ca\": 2, \"Ga\": 3, \"Ge\": 4, \"As\": -3, \"Se\": -2, \"Br\": -1, \"Kr\": 0,\n\t    \"Rb\": 1, \"Sr\": 2, \"In\": 3, \"Sn\": 2, \"Sb\": -3, \"Te\": -2, \"I\": -1,  \"Xe\": 0,\n\t    \"Cs\": 1, \"Ba\": 2, \"Tl\": 3, \"Pb\": 2, \"Bi\": 3,  \"Po\": -2, \"At\": -1, \"Rn\": 0,\n\t    \"Fr\": 1, \"Ra\": 2, \"Nh\": 8, \"Fl\": 8, \"Mc\": 8,  \"Lv\": 8,  \"Ts\": 8,  \"Og\": 8,\n\t    \"Sc\": 3, \"Ti\": 4, \"V\": 5,  \"Cr\": 3, \"Mn\": 2,  \"Fe\": 3,  \"Co\": 3,  \"Ni\": 2, \"Cu\": 2, \"Zn\": 2,\n\t    \"Y\": 3,  \"Zr\": 4, \"Nb\": 5, \"Mo\": 6, \"Tc\": 7,  \"Ru\": 4,  \"Rh\": 3,  \"Pd\": 2, \"Ag\": 1, \"Cd\": 2,\n\t    \"Lu\": 3, \"Hf\": 4, \"Ta\": 5, \"W\": 6,  \"Re\": 7,  \"Os\": 4,  \"Ir\": 3,  \"Pt\": 2, \"Au\": 1, \"Hg\": 2,\n\t    \"Lr\": 3, \"Rf\": 4, \"Db\": 5, \"Sg\": 6, \"Bh\": 7,  \"Hs\": 8,  \"Mt\": 8,  \"Ds\": 8, \"Rg\": 8, \"Cn\": 8,\n\t    \"La\": 3, \"Ce\": 4, \"Pr\": 3, \"Nd\": 3, \"Pm\": 3,  \"Sm\": 3,  \"Eu\": 2,  \"Gd\": 3, \"Tb\": 3, \"Dy\": 3, \"Ho\": 3, \"Er\": 3, \"Tm\": 3, \"Yb\": 3,\n\t    \"Ac\": 3, \"Th\": 4, \"Pa\": 5, \"U\": 6,  \"Np\": 6,  \"Pu\": 6,  \"Am\": 6,  \"Cm\": 6, \"Bk\": 6, \"Cf\": 6, \"Es\": 6, \"Fm\": 6, \"Md\": 6, \"No\": 6,\n", "}\n\t_bond_type = {\n\t    'Unknown': 0,\n\t    'Single': 1,\n\t    'Double': 2,\n\t    'Triple': 3,\n\t    'Aromatic': 5,\n\t}\n\t_type_bond = {\n\t    0: 'Unknown',\n", "    1: 'Single',\n\t    2: 'Double',\n\t    3: 'Triple',\n\t    5: 'Aromatic'\n\t}\n\t_ob_data_dict = {\n\t    0: 'UndefinedData', 1: 'PairData', 2: 'EnergyData', 3: 'CommentData',\n\t    4: 'ConformerData', 5: 'ExternalBondData', 6: 'RotamerList', 7: 'VirtualBondData',\n\t    8: 'RingData', 9: 'TorsionData', 10: 'AngleData', 11: 'SerialNums',\n\t    12: 'UnitCell', 13: 'SpinData', 14: 'ChargeData', 15: 'SymmetryData',\n", "    16: 'ChiralData', 17: 'OccupationData', 18: 'DensityData', 19: 'ElectronicData',\n\t    20: 'VibrationData', 21: 'RotationData', 22: 'NuclearData', 23: 'SetData',\n\t    24: 'GridData', 25: 'VectorData', 26: 'MatrixData', 27: 'StereoData',\n\t    28: 'DOSData', 29: 'ElectronicTransitionData', 16384: 'CustomData0', 16385: 'CustomData1',\n\t    16386: 'CustomData2', 16387: 'CustomData3', 16388: 'CustomData4', 16389: 'CustomData5',\n\t    16390: 'CustomData6', 16391: 'CustomData7', 16392: 'CustomData8', 16393: 'CustomData9',\n\t    16394: 'CustomData10', 16395: 'CustomData11', 16396: 'CustomData12', 16397: 'CustomData13',\n\t    19398: 'CustomData14', 16399: 'CustomData15'\n\t}\n\tclass Wrapper(ABC):\n", "    \"\"\"\n\t    A wrapper of chemical information and data.\n\t    The _set_attrs method is used to set any keyword attribute, the attribute names, in the wrapper context, are defined\n\t    by the keys from returned dict of _attr_setters; the values of the returned dict of _attr_setters are a collection\n\t    of specific private method to wrapper and call openbabel method to set the attributes in openbabel object.\n\t    \"\"\"\n\t    _data = {}  # all attributes of wrappers are stored into\n\t    @property\n\t    def _ob_obj(self) -> Union[ob.OBMol, ob.OBAtom, ob.OBBond, ob.OBAngle, ob.OBUnitCell]:\n\t        return self._data.get('ob_obj')\n", "    @property\n\t    def _protected_data(self):\n\t        \"\"\"\n\t        the protected attr in data which could not be replaced by call methods:\n\t            - update_attr_data()\n\t        \"\"\"\n\t        return ('ob_obj',)\n\t    def _set_attrs(self, **kwargs):\n\t        \"\"\"    Set any atomic attributes by name    \"\"\"\n\t        attr_setters = self._attr_setters\n", "        for name, value in kwargs.items():\n\t            setter = attr_setters.get(name)\n\t            if setter:  # if the attribute is exist in the object.\n\t                assert isinstance(setter, Callable)\n\t                setter(value)\n\t            else:\n\t                raise NameError(\n\t                    f'the {name} is cannot be set by {self.__class__.__name__}.set(), '\n\t                    f'the legal attrs include: {self._attr_setters.keys()}'\n\t                )\n", "    @property\n\t    @abstractmethod\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        raise NotImplemented\n\t    def _get_ob_comment_data(self, data_name: str):\n\t        \"\"\" Retrieve OBCommentData according to specific data_name \"\"\"\n\t        comment = self._ob_obj.GetData(data_name)\n\t        if comment:\n\t            comment = ob.toCommentData(comment)\n\t            return comment.GetData()\n", "        return None\n\t    @property\n\t    def data(self) -> dict:\n\t        \"\"\" Get the clone of attributes data dict \"\"\"\n\t        return copy.copy(self._data)\n\t    def kwargs_setters(self):\n\t        list_setters = [f'{k}: {s.__doc__}' for k, s in self._attr_setters.items()]\n\t        print(\"\\n\".join(list_setters))\n\t    def remove_ob_data(self, data_name: str):\n\t        \"\"\" Remove specific OBData item by given data_name \"\"\"\n", "        self._ob_obj.DeleteData(data_name)\n\t    def replace_attr_data(self, data: Dict):\n\t        \"\"\" Replace the core data dict directly \"\"\"\n\t        self._data = data\n\t    def set_ob_comment_data(self, attr_name: str, value: str):\n\t        \"\"\" Set the OBCommentData for ob_obj \"\"\"\n\t        comment_data = ob.OBCommentData()\n\t        comment_data.SetAttribute(attr_name)\n\t        comment_data.SetData(value)\n\t        self._ob_obj.CloneData(comment_data)\n", "    @property\n\t    def setter_keys(self):\n\t        return list(self._attr_setters.keys())\n\t    @property\n\t    def temp_label(self):\n\t        \"\"\" Retrieve the temp label \"\"\"\n\t        return self._get_ob_comment_data('temp_label')\n\t    def update_attr_data(self, data: dict):\n\t        \"\"\" update the attribute data by give dict \"\"\"\n\t        for data_attr in self._protected_data:\n", "            if data.get(data_attr):\n\t                data.pop(data_attr)\n\t        self._data.update(data)\n\tclass MolLinker:\n\t    \"\"\" This class offer methods to link to parent molecule object and retrieve associated value from the molecule \"\"\"\n\t    class LinkerKey:\n\t        def __init__(self, *ob_atoms: ob.OBAtom):\n\t            self.ob_atoms = ob_atoms\n\t        def __repr__(self):\n\t            return str(self.key)\n", "        def __eq__(self, other: 'MolLinker.LinkerKey'):\n\t            return self.key == other.key or self.key == other.key[::-1]\n\t        def __hash__(self):\n\t            return hash(self.key)\n\t        @property\n\t        def key(self):\n\t            return tuple(aba.GetId() for aba in self.ob_atoms)\n\t    def __init__(self, mol: 'Molecule', *ob_ids: int):\n\t        \"\"\"\"\"\"\n\t        self.mol = mol\n", "        self.ob_atoms = tuple(mol.atoms_dict[obi].ob_atom for obi in ob_ids)\n\t    def __repr__(self):\n\t        return f'{self.__class__.__name__}({\", \".join([a.label for a in self.atoms])}; {self._degree})'\n\t    def __eq__(self, other: 'Torsion'):\n\t        return self.linker_key == other.linker_key\n\t    def __getitem__(self, item):\n\t        return self.data.get(item, {})\n\t    def __setitem__(self, key, value):\n\t        self.update_attr_data({key: value})\n\t    @property\n", "    @abstractmethod\n\t    def _degree(self) -> float:\n\t        raise NotImplementedError('')\n\t    @property\n\t    def atoms(self) -> List['Atom']:\n\t        return [self.mol.atoms_dict[obi] for obi in self.atoms_ob_id]\n\t    @property\n\t    def atoms_ob_id(self):\n\t        return tuple(oba.GetId() for oba in self.ob_atoms)\n\t    @property\n", "    def data(self) -> Dict:\n\t        data: Dict[MolLinker.LinkerKey, Dict[Hashable, Any]] = self.mol.data.get(self.__class__.__name__, {})\n\t        return data.setdefault(self.linker_key, {})\n\t    @property\n\t    def linker_key(self) -> LinkerKey:\n\t        return self.LinkerKey(*self.ob_atoms)\n\t    def update_attr_data(self, update_data: Dict):\n\t        all_angle_data: Dict[MolLinker.LinkerKey, Dict[Hashable, Any]] = self.mol.data.get(self.__class__.__name__, {})\n\t        data: Dict[Hashable, Any] = all_angle_data.setdefault(self.linker_key, {})\n\t        data.update(update_data)\n", "        self.mol.update_attr_data({self.__class__.__name__: all_angle_data})\n\tclass Molecule(Wrapper, ABC):\n\t    \"\"\"\"\"\"\n\t    # All Molecule attribute's items relating to molecule conformers\n\t    conformer_items = (\n\t        # the items are ranked by the number of values for each atom, for example:\n\t        #   - the all_atom_charges and atom_spin_densities have 1 value for each atom, so they are placed in the second\n\t        #     item (with the index 1)\n\t        #   - the coordinates have 3 values for each atom, i.e., [x, y, z], so it is placed in the forth\n\t        #     item (with the index 3）\n", "        # For the molecular attributes, which have only one value for each conformer and represent the attribute\n\t        # of whole molecule, they are place in the first item (with the index 0)\n\t        ('all_energy', 'identifier_array'),\n\t        ('all_atom_charges', 'all_atom_spin_densities'),\n\t        (),\n\t        ('all_coordinates', 'all_forces')\n\t    )\n\t    def __init__(self, ob_mol: ob.OBMol = None, _data: dict = None, **kwargs):\n\t        if _data:\n\t            self._data: dict = _data\n", "        else:\n\t            self._data: dict = {\n\t                'ob_obj': ob_mol if ob_mol else ob.OBMol()\n\t            }\n\t        self._set_attrs(**kwargs)\n\t        self._load_atoms()\n\t        self._load_bonds()\n\t    def __repr__(self):\n\t        return f'Mol({self.ob_mol.GetSpacedFormula()})'\n\t    def __add__(self, other: ['Molecule']):\n", "        \"\"\"\n\t        Two Molecule objects could add to a new one to merge all of their conformers.\n\t        All information about the conformer will be merged to one.\n\t        the other information will reserve the one in the left item\n\t        Args:\n\t            other: the right item\n\t        Returns:\n\t            Molecule\n\t        \"\"\"\n\t        # When other obj is a Molecule or a child of Molecule\n", "        if isinstance(other, Molecule):\n\t            # If this one is compatible to the other\n\t            if self.iadd_accessible(other):\n\t                clone = self.copy()\n\t                clone += other\n\t                return clone\n\t            # If the other one is compatible to this one\n\t            if other.iadd_accessible(self):\n\t                clone = other.copy()\n\t                clone += self\n", "                return clone\n\t            # If they are compatible, but are Molecule or child of Molecule\n\t            return bd.MolBundle([self, other])\n\t        # if isinstance(other, MixSameAtomMol):\n\t        #     return self.to_mix_mol() + other\n\t        # When other obj is a MolBundle\n\t        if isinstance(other, bd.MolBundle):\n\t            return other.__class__([self] + other.mols)\n\t        else:\n\t            raise TypeError('the Molecule only add with Molecule or MolBundle')\n", "    def __iadd__(self, other):\n\t        \"\"\"\n\t        Self add with other Molecule object with consist atoms list,\n\t        The attributes or information about conformers will merge with the other,\n\t        other attributes or information will be reserved\n\t        Args:\n\t            other: the merged Molecule object\n\t        Returns:\n\t            None\n\t        \"\"\"\n", "        if not isinstance(other, Molecule):\n\t            raise TypeError('the Molecule object is only allowed to add with other Molecule')\n\t        # Check whether left and right Molecules have consist atom list\n\t        if not self.iadd_accessible(other):\n\t            raise AttributeError(\n\t                'the self addition cannot be performed among molecules with different atoms list!'\n\t            )\n\t        return self._merge_conformer_attr(other)\n\t    def __iter__(self):\n\t        \"\"\" Return self with different conformers \"\"\"\n", "        def conformer_generator():\n\t            for i in range(self.conformer_counts):\n\t                self.conformer_select(i)\n\t                yield self\n\t        return iter(conformer_generator())\n\t    def __next__(self):\n\t        config_idx = self._data.get('config_idx', 0)\n\t        try:\n\t            self.conformer_select(config_idx)\n\t            self._data['config_idx'] = config_idx + 1\n", "            return self\n\t        except IndexError:\n\t            raise StopIteration\n\t    def __eq__(self, other):\n\t        \"\"\" if two molecule with 1.0 similarity in 2FP fingerprint they are identical \"\"\"\n\t        if self.similarity(other) == 1.0:\n\t            return True\n\t        return False\n\t    def _add_temp_atom_labels(self):\n\t        \"\"\"\n", "        Add temp atom label, These label will assist in the implementation of certain functions,\n\t        say Molecule.components. These label should be deleted after the assisted functions have\n\t        been fulfilled, by call method _delete_temp_atom_labels(self)\n\t        \"\"\"\n\t        for i, atom in enumerate(self.atoms):\n\t            atom.set_ob_comment_data('temp_label', str(i))\n\t    @staticmethod\n\t    def _assign_coordinates(the_mol: 'Molecule', coordinates: np.ndarray):\n\t        \"\"\" Assign coordinates for all atoms in the Molecule \"\"\"\n\t        if len(the_mol.atoms) != coordinates.shape[-2]:\n", "            raise AttributeError('the coordinate matrix do not match the number of atoms')\n\t        for new_mol_atom, new_atom_coord in zip(the_mol.atoms, coordinates):\n\t            new_mol_atom.coordinates = new_atom_coord\n\t    @property\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        return {\n\t            'atoms.partial_charge': self._set_atoms_partial_charge,\n\t            \"identifier\": self._set_identifier,\n\t            \"energy\": self._set_energy,\n\t            'all_energy': self._set_all_energy,\n", "            'charge': self._set_mol_charge,\n\t            'all_atom_charges': self._set_all_atom_charges,\n\t            'all_atom_spin_densities': self._set_all_atom_spin_densities,\n\t            'spin': self._set_spin_multiplicity,\n\t            'atoms': self._set_atoms,\n\t            'mol_orbital_energies': self._set_mol_orbital_energies,\n\t            'coordinates': self._set_coordinates,\n\t            'all_coordinates': self._set_all_coordinates,\n\t            'all_forces': self._set_all_forces,\n\t            'forces': self._set_forces,\n", "            'crystal': self.create_crystal_by_matrix\n\t        }\n\t    def _create_ob_unit_cell(self):\n\t        \"\"\" Create New OBUnitCell for the Molecule \"\"\"\n\t        ob_unit_cell = ob.OBUnitCell()\n\t        self.ob_mol.CloneData(ob_unit_cell)\n\t    def _delete_atoms_temp_label(self):\n\t        \"\"\" Remove temp label of all atoms \"\"\"\n\t        for a in self.atoms:\n\t            a.remove_ob_data('temp_label')\n", "    def _delete_bonds_temp_label(self):\n\t        \"\"\" Remove temp label of all bonds \"\"\"\n\t        for b in self.bonds:\n\t            b.remove_ob_data('temp_label')\n\t    def _get_critical_params(self, name: str):\n\t        critical_params = self._data.get('critical_params')\n\t        if critical_params is None:\n\t            critical_params = json.load(open(opj(data_root, 'thermo', 'critical.json'))).get(self.smiles)\n\t            if critical_params:\n\t                self._data['critical_params'] = critical_params\n", "                return critical_params[name]\n\t            else:\n\t                self._data['critical_params'] = False\n\t                return False\n\t        else:\n\t            return critical_params[name]\n\t    def _has_atom_temp_label(self):\n\t        return any(atom.temp_label for atom in self.atoms)\n\t    def _pert_mol_generate(self, coordinates: Union[Sequence, np.ndarray]):\n\t        \"\"\"\n", "        Generate new molecule obj according to new given coordinate\n\t        Args:\n\t            coordinates: New coordinates matrix\n\t        Returns:\n\t            Molecule, copy of this molecule with new coordinates\n\t        \"\"\"\n\t        clone_mol = self.copy()\n\t        self._assign_coordinates(clone_mol, coordinates)\n\t        return clone_mol\n\t    def _load_atoms(self) -> Dict[int, 'Atom']:\n", "        \"\"\"\n\t        Construct atoms dict according to the OBAtom in the OBMol,\n\t        where the keys of the dict are the ob_id of OBAtom and the values are the the constructed Atom objects\n\t        the constructed dict would be place into the _data dict\n\t        Returns:\n\t            the atoms dict\n\t        \"\"\"\n\t        atoms: Dict[int, Atom] = self._data.get('atoms', {})\n\t        new_atoms = {}\n\t        for new_ob_id, oba in enumerate(ob.OBMolAtomIter(self.ob_mol)):\n", "            atom = atoms.get(oba.GetId(), Atom(oba, mol=self))\n\t            oba.SetId(new_ob_id)\n\t            new_atoms[new_ob_id] = atom\n\t        self._data['atoms'] = new_atoms\n\t        return new_atoms\n\t    def _load_bonds(self) -> Dict[int, 'Bond']:\n\t        \"\"\"\n\t        Construct bonds dict according to the OBBond in the OBMol,\n\t        where the keys of the dict are the ob_id of OBBond and the values are the the constructed Bond objects\n\t        the constructed dict would be place into the _data dict\n", "        Returns:\n\t            dict of bonds\n\t        \"\"\"\n\t        bonds: Dict = self._data.get('bonds', {})  # Get the stored bonds\n\t        new_bonds = {}\n\t        for new_ob_id, obb in enumerate(ob.OBMolBondIter(self.ob_mol)):\n\t            bond = bonds.get(obb.GetId(), Bond(obb, self))  # Get old bond by old id\n\t            obb.SetId(new_ob_id)  # Specify new id\n\t            new_bonds[new_ob_id] = bond\n\t        self._data['bonds'] = new_bonds\n", "        return new_bonds\n\t    @staticmethod\n\t    def _melt_quench(\n\t            elements: Dict[str, float], force_field: Union[str, os.PathLike], mol: \"Molecule\" = None,\n\t            density: float = 1.0, a: float = 25., b: float = 25., c: float = 25.,\n\t            alpha: float = 90., beta: float = 90., gamma: float = 90., time_step: float = 0.0001,\n\t            origin_temp: float = 298.15, melt_temp: float = 4000., highest_temp: float = 10000.,\n\t            ff_args: Sequence = (), path_writefile: Optional[str] = None, path_dump_to: Optional[str] = None,\n\t            dump_every: int = 100,\n\t    ):\n", "        \"\"\" to perform the melt-quench by call lmp.AmorphousMaker \"\"\"\n\t        am = lmp.AmorphousMaker(elements, force_field, density, a, b, c, alpha, beta, gamma)\n\t        mol = am.melt_quench(\n\t            *ff_args, mol=mol, path_writefile=path_writefile, path_dump_to=path_dump_to, origin_temp=origin_temp,\n\t            melt_temp=melt_temp, highest_temp=highest_temp, time_step=time_step, dump_every=dump_every\n\t        )\n\t        return mol\n\t    def _merge_conformer_attr(self, other: 'Molecule'):\n\t        \"\"\" Merge attributes, relate to molecule conformer, in other Molecule into this Molecule \"\"\"\n\t        def merge_attr(attr_name: str):\n", "            \"\"\" Merge single conformer attr \"\"\"\n\t            left_attr = getattr(self, attr_name)\n\t            right_attr = getattr(other, attr_name)\n\t            if isinstance(left_attr, np.ndarray) and isinstance(right_attr, np.ndarray):\n\t                self._data[attr_name] = np.concatenate([left_attr, right_attr])\n\t            elif not (  # If the left and right values are not both empty, raise Attributes error.\n\t                    (left_attr is None) or (isinstance(left_attr, np.ndarray) and (not left_attr.all())) and\n\t                    (right_attr is None) or (isinstance(right_attr, np.ndarray) and (not right_attr.all()))\n\t            ):\n\t                raise AttributeError(\n", "                    f'the conformer relational attribute {attr_name} is different in:\\n'\n\t                    f'  - {self}_identifier: {self.identifier}\\n'\n\t                    f'  - {other}_identifier: {other.identifier}'\n\t                    'they cannot to perform addition operation'\n\t                )\n\t        for i, items in enumerate(self.conformer_items):\n\t            for item in items:\n\t                merge_attr(item)\n\t        return self\n\t    def _preserve_atoms_data(self):\n", "        \"\"\"\n\t        Preserve atoms data dict before destroy them.\n\t        Though the atoms are destroyed, their core ob_atom will be prevented,\n\t        The reserve data will match with the core ob_atoms\n\t        \"\"\"\n\t        # Link the old atoms data dict with new atoms by temp labels\n\t        self._add_temp_atom_labels()\n\t        return {a.temp_label: a.data for a in self.atoms}\n\t    def _preserve_bonds_data(self):\n\t        \"\"\"\"\"\"\n", "        if not self._has_atom_temp_label():\n\t            self._add_temp_atom_labels()\n\t        return {(b.atom1.temp_label, b.atom2.temp_label): b.data for b in self.bonds}\n\t    def _preserve_angles_data(self):\n\t        if not self._has_atom_temp_label():\n\t            self._add_temp_atom_labels()\n\t        return {tuple(atom.temp_label for atom in angle.atoms): angle.data for angle in self.angles}\n\t    def _preserve_torsion_data(self):\n\t        if not self._has_atom_temp_label():\n\t            self._add_temp_atom_labels()\n", "        return {tuple(atom.temp_label for atom in torsion.atoms): torsion.data for torsion in self.torsions}\n\t    @property\n\t    def _protected_data(self):\n\t        return 'ob_obj', 'atoms', 'bonds', 'angles'\n\t    def _reorder_atom_ob_id(self):\n\t        \"\"\" Reorder the ob id of atoms \"\"\"\n\t        new_atom_dict = {}\n\t        for ob_id, atom in enumerate(self.atoms):\n\t            atom.ob_atom.SetId(ob_id)\n\t            new_atom_dict[ob_id] = atom\n", "        self._data['atoms'] = new_atom_dict\n\t    def _reorder_bond_ob_id(self):\n\t        new_atom_dict = {}\n\t        for ob_id, bond in enumerate(self.bonds):\n\t            bond.ob_bond.SetId(ob_id)\n\t            new_atom_dict[ob_id] = bond\n\t        self._data['bonds'] = new_atom_dict\n\t    def _reorganize_atom_indices(self):\n\t        \"\"\" reorganize or rearrange the indices for all atoms \"\"\"\n\t        for i, ob_atom in enumerate(ob.OBMolAtomIter(self.ob_mol)):\n", "            ob_atom.SetId(i)\n\t    def _set_atoms(self, atoms_kwargs: List[Dict[str, Any]]):\n\t        \"\"\" add a list of atoms by a list atoms attributes dict \"\"\"\n\t        for atom_kwarg in atoms_kwargs:\n\t            a = Atom(**atom_kwarg)\n\t            self.add_atom(a)\n\t    def _set_atoms_partial_charge(self, partial_charges: [np.ndarray, Sequence[float]]):\n\t        \"\"\" Set partial charges for all atoms in the molecule \"\"\"\n\t        if not isinstance(partial_charges, (np.ndarray, Sequence[int])):\n\t            raise TypeError(\n", "                f'the `partial_charges` should be np.ndarray or Sequence of float, not {type(partial_charges)}'\n\t            )\n\t        if self.atom_counts != len(partial_charges):\n\t            raise ValueError('the given partial charges should have same numbers with the number of atoms')\n\t        for atom, partial_charge in zip(self.atoms, partial_charges):\n\t            atom.partial_charge = partial_charge\n\t    def _set_all_coordinates(self, all_coordinates: np.ndarray):\n\t        \"\"\"\n\t        Assign the coordinates collection directly\n\t        Args:\n", "            all_coordinates: numpy array with the shape (M, N, 3), where the M is the number of coordinates\n\t            in the collection, the N is the number of atoms of the molecule.\n\t        Returns:\n\t            None\n\t        \"\"\"\n\t        if not isinstance(all_coordinates, np.ndarray):\n\t            raise ValueError(\n\t                f'the given all_coordinates must be a numpy.ndarray class, instead of {type(all_coordinates)}')\n\t        if all_coordinates.shape[-1] != 3:\n\t            raise ValueError(f'the coordinate must be 3 dimension, instead of {all_coordinates.shape[-1]}')\n", "        if len(all_coordinates.shape) == 2:\n\t            # if only give a group of coordinates\n\t            all_coordinates = all_coordinates.reshape((-1, all_coordinates.shape[-2], 3))\n\t        elif len(all_coordinates.shape) != 3:\n\t            raise ValueError(\n\t                f'the shape of given all_coordinates should with length 2 or 3, now is {len(all_coordinates.shape)}'\n\t            )\n\t        self._data['all_coordinates'] = all_coordinates\n\t    def _set_coordinates(self, coordinates: np.ndarray):\n\t        \"\"\" Assign the coordinates for all atoms in the molecule \"\"\"\n", "        assert isinstance(coordinates, np.ndarray)\n\t        assert coordinates.shape == (self.atom_counts, 3)\n\t        for a, c in zip(self.atoms, coordinates):\n\t            a.coordinates = c\n\t    def _set_atom_charges(self, charge: Union[Sequence, np.ndarray]):\n\t        \"\"\" Set partial charge for each atoms in the mol \"\"\"\n\t        if not isinstance(charge, (Sequence, np.ndarray)):\n\t            raise TypeError(f'the charge should be a sequence or np.ndarray, got {type(charge)}')\n\t        if isinstance(charge, np.ndarray):\n\t            charge = charge.flatten()\n", "        if len(charge) != self.atom_counts:\n\t            raise ValueError('the number of charges do not match with the atom charge')\n\t        for atom, ch in zip(self.atoms, charge):\n\t            atom.partial_charge = ch\n\t    def _set_all_atom_charges(self, charges: np.ndarray):\n\t        \"\"\"\n\t        set groups of charges for each atoms in the mol, and each group of charges are corresponding to a\n\t        conformer of the mol\n\t        Args:\n\t            charges: group of atoms with the shape of (C, N), where the C is the number of the conformer\n", "             and the N is the number of the atom in the molecule\n\t        \"\"\"\n\t        if not isinstance(charges, np.ndarray):\n\t            raise TypeError('the arg charges should be np.ndarray')\n\t        if len(charges.shape) != 2 and charges.shape[1] != self.atom_counts:\n\t            raise ValueError('the shape of the arg: charge should be (number_of_conformer, number_of_atoms),'\n\t                             f'got the value with shape {charges.shape}')\n\t        self._data['all_atom_charges'] = charges\n\t    def _set_all_atom_spin_densities(self, group_spd: np.ndarray) -> None:\n\t        \"\"\"\n", "        assign groups of spin densities for all atom in molecule, each group is corresponding to a conformer\n\t        Args:\n\t            group_spd(np.ndarray): group of spin densities, the numpy array with the (C, N) shape,\n\t             where the C is the number of conformer, the N is the number of atoms\n\t        \"\"\"\n\t        if not isinstance(group_spd, np.ndarray):\n\t            raise TypeError('the arg group_spd should be np.ndarray')\n\t        if len(group_spd.shape) != 2 and group_spd.shape[1] != self.atom_counts:\n\t            raise ValueError('the shape of the arg: group_spd should be (number_of_conformer, number_of_atoms),'\n\t                             f'got the value with shape {group_spd.shape}')\n", "        self._data['all_atom_spin_densities'] = group_spd\n\t    def _set_atom_spin_densities(self, spd: Union[Sequence, np.ndarray]):\n\t        \"\"\" assign the spin density for each of atoms in the mol \"\"\"\n\t        if not isinstance(spd, (Sequence, np.ndarray)):\n\t            raise TypeError(f'the charge should be a sequence or np.ndarray, got {type(spd)}')\n\t        if isinstance(spd, np.ndarray):\n\t            spd = spd.flatten()\n\t        if len(spd) != self.atom_counts:\n\t            raise ValueError('the number of charges do not match with the atom charge')\n\t        for atom, sp in zip(self.atoms, spd):\n", "            atom.spin_density = sp\n\t    def _set_forces(self, forces: np.ndarray):\n\t        \"\"\" Set the force vectors for each atoms in the molecule \"\"\"\n\t        if not isinstance(forces, np.ndarray):\n\t            raise TypeError('the forces should be np.ndarray')\n\t        if len(forces.shape) != 2:\n\t            raise ValueError('the length of shape of forces should be 2')\n\t        if forces.shape[-2] != self.atom_counts:\n\t            raise ValueError('the give forces do not match to the number of atoms')\n\t        for atom, force_vector in zip(self.atoms, forces):\n", "            atom.force_vector = force_vector\n\t    def _set_all_forces(self, all_forces: np.ndarray):\n\t        \"\"\" Store the force matrix into the attribute dict \"\"\"\n\t        if not isinstance(all_forces, np.ndarray):\n\t            raise TypeError('the all_forces should be np.ndarray')\n\t        if len(all_forces.shape) != 3:\n\t            raise ValueError('the length of shape of all_forces should be 3')\n\t        if all_forces.shape[-2] != self.atom_counts:\n\t            raise ValueError('the give all_forces do not match to the number of atoms')\n\t        self._data['all_forces'] = all_forces\n", "    def _set_mol_charge(self, charge: int):\n\t        self.ob_mol.SetTotalCharge(charge)\n\t    def _set_mol_orbital_energies(self, orbital_energies: list[np.ndarray]):\n\t        self._data['mol_orbital_energies'] = orbital_energies[0]\n\t    def _set_energy(self, energy: float):\n\t        \"\"\" set the energy \"\"\"\n\t        self.ob_mol.SetEnergy(energy)\n\t    def _set_all_energy(self, all_energy: Union[float, np.ndarray]):\n\t        \"\"\" set the energy for all conformers \"\"\"\n\t        if isinstance(all_energy, float):\n", "            self._data['all_energy'] = np.array([all_energy])\n\t        else:\n\t            all_energy = all_energy.flatten()\n\t            self._data['all_energy'] = all_energy\n\t    def _set_identifier(self, identifier):\n\t        self.ob_mol.SetTitle(identifier)\n\t    def _set_spin_multiplicity(self, spin):\n\t        self.ob_mol.SetTotalSpinMultiplicity(spin)\n\t    @staticmethod\n\t    def _transfer_preserve_data_to_new_atoms(tgt_mol: 'Molecule', preserve_data: Dict, rm_temp_label: bool = False):\n", "        \"\"\"\n\t        Transfer preserve data dict to new target Molecule atoms\n\t        Args:\n\t            tgt_mol: The target Molecule\n\t            preserve_data(dict): the old atoms data dict\n\t            rm_temp_label: whether to remove temp label after data have been transferred.\n\t        \"\"\"\n\t        for atom in tgt_mol.atoms:\n\t            temp_label = atom.temp_label\n\t            if temp_label:\n", "                atom.update_attr_data(preserve_data[temp_label])\n\t                if rm_temp_label:\n\t                    atom.remove_ob_data('temp_label')\n\t    @staticmethod\n\t    def _transfer_preserve_data_to_new_bonds(tgt_mol: 'Molecule', preserve_data: Dict):\n\t        \"\"\"\n\t        Transfer preserve data dict to new target Molecule bonds\n\t        Args:\n\t            tgt_mol: The target Molecule\n\t            preserve_data(dict): the old atoms data dict\n", "        \"\"\"\n\t        for bond in tgt_mol.bonds:\n\t            temp_label = (bond.atom1.temp_label, bond.atom2.temp_label)\n\t            if all(temp_label):\n\t                try:\n\t                    bond.update_attr_data(preserve_data[temp_label])\n\t                except KeyError:\n\t                    bond.update_attr_data(preserve_data[temp_label[::-1]])\n\t    @staticmethod\n\t    def _transfer_preserve_data_to_new_angles(tgt_mol: 'Molecule', preserve_data: Dict):\n", "        for angle in tgt_mol.angles:\n\t            temp_label = tuple(atom.temp_label for atom in angle.atoms)\n\t            if all(temp_label):\n\t                try:\n\t                    angle.update_attr_data(preserve_data[temp_label])\n\t                except KeyError:\n\t                    angle.update_attr_data(preserve_data[temp_label[::-1]])\n\t    @staticmethod\n\t    def _transfer_preserve_data_to_new_torsions(tgt_mol: 'Molecule', preserve_data: Dict):\n\t        for torsion in tgt_mol.torsions:\n", "            temp_label = tuple(atom.temp_label for atom in torsion.atoms)\n\t            if all(temp_label):\n\t                try:\n\t                    torsion.update_attr_data(preserve_data[temp_label])\n\t                except KeyError:\n\t                    torsion.update_attr_data(preserve_data[temp_label[::-1]])\n\t    @property\n\t    def acentric_factor(self):\n\t        return self._get_critical_params('acentric_factor')\n\t    def add_atom(self, atom: Union[\"Atom\", str, int], **atom_attrs) -> 'Atom':\n", "        \"\"\"\n\t        Add a new atom out of the molecule into the molecule.\n\t        Args:\n\t            atom(Atom|str|int):\n\t        atom_kwargs(kwargs for this added atom):\n\t            atomic_number(int): set atomic number\n\t            symbol(str): set atomic symbol\n\t            coordinates(Sequence, numpy.ndarray): coordinates of the atom\n\t            partial_charge:\n\t            label:\n", "            spin_density:\n\t        Returns:\n\t            the copy of atom in the molecule\n\t        \"\"\"\n\t        oba = ob.OBAtom()  # Initialize a new OBAtom\n\t        data = None\n\t        if isinstance(atom, str):\n\t            oba.SetAtomicNum(ob.GetAtomicNum(atom))\n\t        elif isinstance(atom, int):\n\t            oba.SetAtomicNum(atom)\n", "        elif isinstance(atom, Atom):\n\t            oba.SetAtomicNum(atom.atomic_number)\n\t            data = atom.data  # Copy the give atoms data\n\t        # add OBAtom to the OBMol\n\t        success = self.ob_mol.AddAtom(oba)\n\t        if success:\n\t            atom = self.atoms[-1]  # Retrieve the added atom\n\t            if data:\n\t                atom.update_attr_data(data)  # replicant the old atom's data to the new\n\t            atom.set(**atom_attrs)  # Set attributes by kwargs\n", "            return atom\n\t        else:\n\t            raise AddAtomFail(f'Add the atom {atom} into Molecule fail')\n\t    @property\n\t    def all_atoms_with_unique_symbol(self):\n\t        return self.atoms_with_unique_symbol + \\\n\t            self.pseudo_atoms_with_unique_symbol\n\t    def add_bond(\n\t            self,\n\t            atom1: Union[str, int, 'Atom'],\n", "            atom2: Union[str, int, 'Atom'],\n\t            bond_type: Union[str, int],\n\t    ):\n\t        \"\"\" Add a new bond into the molecule \"\"\"\n\t        inputs = (atom1, atom2)\n\t        atoms: List[Atom] = []\n\t        for a in inputs:\n\t            if isinstance(a, int):\n\t                atoms.append(self.atoms_dict[a])\n\t            if isinstance(a, Atom):\n", "                atoms.append(a)\n\t            if isinstance(a, str):\n\t                atoms.append(self.atom(a))\n\t        # Represent the bond type by int, refer to _bond_type dict\n\t        bond_type = bond_type if isinstance(bond_type, int) else _bond_type[bond_type]\n\t        # Try to add new OBMol\n\t        # 'openbabel' has an odd behave that `index` of the `OBAtom` with various origin in the `OBMol`.\n\t        # the `Id` of `OBAtom` from 0; but the `Idx` of `OBAtom` from 1.\n\t        # To meet the convention, the `Id` is selected to be the unique `index` to specify `Atom`.\n\t        # However, when try to add a `OBBond` to link each two `OBAtoms`, the `Idx` is the only method\n", "        # to specify the atoms, so our `index` in `Atom` are added 1 to match the 'Idx'\n\t        success = self.ob_mol.AddBond(atoms[0].ob_idx, atoms[1].ob_idx, bond_type)\n\t        if success:\n\t            return self.bonds[-1]  # the new atoms should place in the terminal of the bond list\n\t        elif atoms[0].ob_id not in self.atom_indices:\n\t            raise KeyError(\"the start atom1 doesn't exist in molecule\")\n\t        elif atoms[1].ob_id not in self.atom_indices:\n\t            raise KeyError(\"the end atom2 doesn't exist in molecule\")\n\t        else:\n\t            raise RuntimeError('add bond not successful!')\n", "    def add_hydrogens(\n\t            self,\n\t            polar_only: bool = False,\n\t            correct_for_ph: bool = False,\n\t            ph: float = 1.0,\n\t            balance_hydrogen: bool = True,\n\t    ):\n\t        \"\"\"\n\t        add hydrogens for the molecule\n\t        Args:\n", "            ph: add hydrogen in which PH environment\n\t            polar_only: Whether to add hydrogens only to polar atoms (i.e., not to C atoms)\n\t            correct_for_ph: Correct for pH by applying the OpenBabel::OBPhModel transformations\n\t            balance_hydrogen: whether to balance the bond valance of heavy atom to their valence\n\t        \"\"\"\n\t        self.ob_mol.AddHydrogens(polar_only, correct_for_ph, ph)\n\t        self._load_atoms()\n\t        self._load_bonds()\n\t        if balance_hydrogen:\n\t            for atom in self.atoms:\n", "                atom.balance_hydrogen()\n\t    def add_pseudo_atom(self, symbol: str, mass: float, coordinates: Union[Sequence, np.ndarray], **kwargs):\n\t        \"\"\" Add pseudo atom into the molecule \"\"\"\n\t        list_pseudo_atom = self._data.setdefault('pseudo_atoms', [])\n\t        pa = PseudoAtom(symbol, mass, coordinates, mol=self, molecule=self, **kwargs)\n\t        list_pseudo_atom.append(pa)\n\t    @property\n\t    def all_coordinates(self) -> np.ndarray:\n\t        \"\"\"\n\t        Get the collections of the matrix of all atoms coordinates,\n", "        each matrix represents a conformer.\n\t        The return array with shape of (C, N, 3),\n\t        where the C is the number of conformers, the N is the number of atoms\n\t        \"\"\"\n\t        all_coordinates = self._data.get('all_coordinates')\n\t        if isinstance(all_coordinates, np.ndarray):\n\t            return all_coordinates\n\t        else:\n\t            return self.coordinates.reshape((-1, self.atom_counts, 3))\n\t    @property\n", "    def all_energy(self):\n\t        return self._data.get('all_energy')\n\t    @property\n\t    def angles(self):\n\t        return [Angle(self, *a_idx) for a_idx in ob.OBMolAngleIter(self.ob_mol)]\n\t    def assign_bond_types(self):\n\t        self.ob_mol.PerceiveBondOrders()\n\t    def atom(self, id_label: Union[int, str]) -> 'Atom':\n\t        \"\"\" get atom by label or idx \"\"\"\n\t        if isinstance(id_label, str):\n", "            if not self.is_labels_unique:\n\t                raise AttributeError(\n\t                    'the label is not unique, cannot get atom by label. try to get atom by ob_id '\n\t                    'or normalize the label before'\n\t                )\n\t            for atom in self.atoms:\n\t                if atom.label == id_label:\n\t                    return atom\n\t            raise KeyError(f'No atom with label {id_label}')\n\t        elif isinstance(id_label, int):\n", "            return self.atoms_dict[id_label]\n\t        else:\n\t            raise TypeError(f'the given idx_label is expected to be int or string, but given {type(id_label)}')\n\t    @property\n\t    def atom_counts(self):\n\t        return self.ob_mol.NumAtoms()\n\t    @property\n\t    def atomic_numbers(self) -> Tuple[int]:\n\t        return tuple(a.atomic_number for a in self.atoms)\n\t    @property\n", "    def atomic_numbers_array(self) -> np.ndarray:\n\t        \"\"\" conformer corresponding attributes with array shape (number_of_atoms, number_of_conformers) \"\"\"\n\t        return np.array(self.atomic_numbers).reshape(1, -1).repeat(self.conformer_counts, axis=0)\n\t    @property\n\t    def atomic_symbols(self):\n\t        return tuple(a.symbol for a in self.atoms)\n\t    @property\n\t    def atoms(self) -> List['Atom']:\n\t        \"\"\"\n\t        Generate dict of Atom objects into the data repository.\n", "        Return list of Atom objects with the order their index.\n\t        \"\"\"\n\t        atoms = self._load_atoms()\n\t        return list(atoms.values())\n\t    @property\n\t    def atoms_dict(self) -> Dict[int, 'Atom']:\n\t        return self._load_atoms()\n\t    @property\n\t    def atoms_with_unique_symbol(self):\n\t        uni_atoms, uni_symbol = [], set()\n", "        for a in self.pseudo_atoms:\n\t            if a.symbol not in uni_symbol:\n\t                uni_atoms.append(a)\n\t                uni_symbol.add(a.symbol)\n\t        return uni_atoms\n\t    @property\n\t    def pseudo_atoms_with_unique_symbol(self):\n\t        uni_patoms, uni_psymbol = [], set()\n\t        for a in self.atoms:\n\t            if a.symbol not in uni_psymbol:\n", "                uni_patoms.append(a)\n\t                uni_psymbol.add(a.symbol)\n\t        return uni_patoms\n\t    @property\n\t    def all_atoms(self):\n\t        return self.atoms + self.pseudo_atoms\n\t    @property\n\t    def atom_charges(self) -> np.ndarray:\n\t        \"\"\" Return all atoms charges as a numpy array \"\"\"\n\t        return np.array([a.partial_charge for a in self.atoms])\n", "    @property\n\t    def all_atom_charges(self) -> np.ndarray:\n\t        \"\"\" Return all atoms charges as a numpy array for every conformers \"\"\"\n\t        all_atom_charges = self._data.get('all_atom_charges')\n\t        if isinstance(all_atom_charges, np.ndarray):\n\t            return all_atom_charges\n\t        return self.atom_charges.reshape((-1, self.atom_counts))\n\t    @property\n\t    def atom_indices(self) -> list[int]:\n\t        return [a.ob_id for a in self.atoms]\n", "    @property\n\t    def atom_labels(self) -> list[str]:\n\t        return [a.label for a in self.atoms]\n\t    @property\n\t    def atom_spin_densities(self) -> np.ndarray:\n\t        return np.array([a.spin_density for a in self.atoms])\n\t    @property\n\t    def all_atom_spin_densities(self):\n\t        all_atom_spin_densities = self._data.get('all_atom_spin_densities')\n\t        if all_atom_spin_densities is not None:\n", "            return all_atom_spin_densities\n\t        return self.atom_spin_densities.reshape((-1, self.atom_counts))\n\t    def assign_atoms_formal_charge(self):\n\t        \"\"\" Assign the formal charges for all atoms in the molecule \"\"\"\n\t        self.add_hydrogens(balance_hydrogen=False)\n\t        for atom in self.atoms:\n\t            if atom.is_polar_hydrogen:\n\t                atom.formal_charge = 1\n\t            elif atom.is_hydrogen or atom.is_carbon:\n\t                atom.formal_charge = 0\n", "            elif atom.is_metal:\n\t                atom.formal_charge = _stable_charges[atom.symbol]\n\t            elif [a for a in atom.neighbours if a.is_polar_hydrogen]:\n\t                atom.formal_charge = -(len([a for a in atom.neighbours if a.is_polar_hydrogen]))\n\t            elif atom.symbol in ['S', 'P']:\n\t                if not [a for a in atom.neighbours if a.symbol == 'O']:\n\t                    atom.formal_charge = atom.covalent_valence - (2 if atom.symbol == 'S' else 3)\n\t                else:\n\t                    atom.formal_charge = 0\n\t            else:\n", "                atom.formal_charge = atom.covalent_valence - atom.stable_valence\n\t    def balance_hydrogens(self):\n\t        \"\"\" Add or remove hydrogens for make or heave atom to achieve the stable valence \"\"\"\n\t        for a in self.heavy_atoms():\n\t            a.balance_hydrogen()\n\t    def angle(self, a: Union[str, int], v: Union[str, int], b: Union[str, int]) -> 'Angle':\n\t        \"\"\"\n\t        Get a Angle from Molecule by ob_id or atom label\n\t        Args:\n\t            a: the ob_id or atom label of the first end atom\n", "            v: the ob_id or atom label of the vertex atom\n\t            b: the ob_id or atom label of the second end atom\n\t        Returns:\n\t            Angle\n\t        \"\"\"\n\t        a: Atom = self.atom(a)\n\t        v: Atom = self.atom(v)\n\t        b: Atom = self.atom(b)\n\t        assert self.bond(a.ob_id, v.ob_id)\n\t        assert self.bond(v.ob_id, b.ob_id)\n", "        return Angle(self, v.ob_id, a.ob_id, b.ob_id)\n\t    def torsion(self, a: Union[str, int], b: Union[str, int], c: Union[str, int], d: Union[str, int]) -> 'Torsion':\n\t        \"\"\"\n\t        Get a Torsion from Molecule by ob_id or atom label\n\t        Args:\n\t            a: the ob_id or atom label of the first end atom\n\t            b: the ob_id or atom label of the first internal atom\n\t            c: the ob_id or atom label of the second internal atom\n\t            d: the ob_id or atom label of the second internal atom\n\t        Returns:\n", "            Torsion\n\t        \"\"\"\n\t        a: Atom = self.atom(a)\n\t        b: Atom = self.atom(b)\n\t        c: Atom = self.atom(c)\n\t        d: Atom = self.atom(d)\n\t        # Todo: The reason why these assert can't successful is still uncertain,\n\t        # Todo: Refer to the rule of Z-Matrix in Gaussian16\n\t        # assert self.bond(a.ob_id, b.ob_id)\n\t        # assert self.bond(b.ob_id, c.ob_id)\n", "        # assert self.bond(c.ob_id, d.ob_id)\n\t        return Torsion(self, a.ob_id, b.ob_id, c.ob_id, d.ob_id)\n\t    def bond(self, atom1: Union[int, str], atom2: Union[int, str]) -> 'Bond':\n\t        \"\"\"\n\t        Return the Bond by given atom index labels in the bond ends\n\t        if the bond is missing in the molecule, return None if given miss_raise is False else raise a KeyError\n\t        Args:\n\t            atom1(int|str): index or label of atom in one of the bond end\n\t            atom2(int|str): index or label of atom in the other end of the bond\n\t        Returns:\n", "            Bond\n\t        Raises:\n\t            KeyError: when can't find the bond, and the miss_raise passing True\n\t        \"\"\"\n\t        atom1: Atom = self.atom(atom1)\n\t        atom2: Atom = self.atom(atom2)\n\t        ob_bond = self.ob_mol.GetBond(atom1.ob_atom, atom2.ob_atom)\n\t        if ob_bond:\n\t            return self.bonds_dict[ob_bond.GetId()]\n\t    @property\n", "    def bond_pair_keys(self):\n\t        return [b.pair_key for b in self.bonds]\n\t    @property\n\t    def bonds(self):\n\t        bonds = self._load_bonds()\n\t        return list(bonds.values())\n\t    @property\n\t    def bonds_dict(self) -> Dict[int, 'Bond']:\n\t        return self._load_bonds()\n\t    def build_2d(self):\n", "        \"\"\" build 2d conformer \"\"\"\n\t        pmol = pb.Molecule(self.ob_mol)\n\t        pmol.make2D()\n\t    def build_3d(self, force_field: str = 'UFF', steps: int = 500):\n\t        \"\"\" build 3D coordinates for the molecule \"\"\"\n\t        # Preserve atoms data before building\n\t        preserve_atoms_data = self._preserve_atoms_data()\n\t        preserve_bonds_data = self._preserve_bonds_data()\n\t        preserve_angles_data = self._preserve_angles_data()\n\t        preserve_torsion_data = self._preserve_torsion_data()\n", "        # Destroy atoms and bonds wrappers\n\t        self._data['atoms'] = {}\n\t        self._data['bonds'] = {}\n\t        # Build 3d conformer\n\t        pymol = pb.Molecule(self.ob_mol)\n\t        pymol.make3D(force_field, steps)\n\t        # Reload atoms and bonds\n\t        self._load_atoms()\n\t        self._load_bonds()\n\t        # Transfer preserve data to new\n", "        self._transfer_preserve_data_to_new_atoms(self, preserve_atoms_data)\n\t        self._transfer_preserve_data_to_new_bonds(self, preserve_bonds_data)\n\t        self._transfer_preserve_data_to_new_angles(self, preserve_angles_data)\n\t        self._transfer_preserve_data_to_new_torsions(self, preserve_torsion_data)\n\t        # Delete temp label\n\t        self._delete_atoms_temp_label()\n\t        # Remove redundant hydrogen or supply the lack hydrogens\n\t        self.balance_hydrogens()\n\t    def build_bonds(self):\n\t        self.ob_mol.ConnectTheDots()\n", "    @property\n\t    def center_of_masses(self):\n\t        return (self.masses * self.coordinates.T).T.sum(axis=0) / self.masses.sum()\n\t    @property\n\t    def center_of_shape(self):\n\t        return self.coordinates.mean(axis=0)\n\t    @property\n\t    def charge(self):\n\t        return self.ob_mol.GetTotalCharge()\n\t    @charge.setter\n", "    def charge(self, charge):\n\t        self._set_mol_charge(charge)\n\t    def clean_bonds(self):\n\t        \"\"\" Remove all bonds \"\"\"\n\t        # Iterate directly will fail.\n\t        ob_bonds = [ob_bond for ob_bond in ob.OBMolBondIter(self.ob_mol)]\n\t        for ob_bond in ob_bonds:\n\t            self.ob_mol.DeleteBond(ob_bond)\n\t    def clean_conformers(self, pop: bool = False):\n\t        \"\"\" clean all config save inside the molecule \"\"\"\n", "        try:\n\t            all_coordinates = self._data.pop('all_coordinates')\n\t        except KeyError:\n\t            all_coordinates = None\n\t        if pop:\n\t            return all_coordinates\n\t    @property\n\t    def components(self):\n\t        \"\"\" get all fragments don't link each by any bonds \"\"\"\n\t        # Add temp label for each atom first\n", "        preserve_data = self._preserve_atoms_data()\n\t        components = [self.__class__(obc) for obc in self.ob_mol.Separate()]\n\t        # Transfer the parent data attr to the children\n\t        for c in components:\n\t            for a in c.atoms:\n\t                a.update_attr_data(preserve_data[a.temp_label])\n\t                a.remove_ob_data('temp_label')\n\t        # remove temp labels of all atoms\n\t        self._delete_atoms_temp_label()\n\t        return components\n", "    @property\n\t    def conformer_counts(self) -> int:\n\t        \"\"\" The number of conformers in the molecule \"\"\"\n\t        all_coordinates = self._data.get('all_coordinates')\n\t        if isinstance(all_coordinates, np.ndarray):\n\t            return all_coordinates.shape[0]\n\t        else:\n\t            return 1\n\t    def conformer_select(self, conf_idx: int):\n\t        \"\"\" select specific conformer by index \"\"\"\n", "        def assign_numpy_attrs(attrs_name: str, setter: Callable):\n\t            attrs = self._data.get(attrs_name)\n\t            if isinstance(attrs, np.ndarray):\n\t                try:\n\t                    attr = attrs[conf_idx]\n\t                except IndexError:\n\t                    attr = None\n\t            else:\n\t                attr = None\n\t            if isinstance(attr, np.ndarray) or attr:\n", "                setter(attr)\n\t        all_coordinates = self._data.get('all_coordinates')\n\t        if all_coordinates is None and conf_idx:\n\t            raise IndexError('Only one conformer here!')\n\t        # assign the coordinates for the molecule\n\t        coordinates = all_coordinates[conf_idx]\n\t        self._assign_coordinates(self, coordinates)\n\t        assign_numpy_attrs('all_energy', self._set_energy)\n\t        assign_numpy_attrs('all_atom_charges', self._set_atom_charges)\n\t        assign_numpy_attrs('all_atom_spin_densities', self._set_atom_spin_densities)\n", "        assign_numpy_attrs('all_forces', self._set_forces)\n\t    @property\n\t    def coordinates(self) -> np.ndarray:\n\t        \"\"\"\n\t        Get the matrix of all atoms coordinates,\n\t        where the row index point to the atom index;\n\t        the column index point to the (x, y, z)\n\t        \"\"\"\n\t        return np.array([atom.coordinates for atom in self.atoms], dtype=np.float64)\n\t    def copy(self) -> 'Molecule':\n", "        \"\"\" Get a clone of this Molecule \"\"\"\n\t        clone = self.__class__(self.ob_copy())\n\t        clone._load_atoms()\n\t        clone._load_bonds()\n\t        # Copy the Molecule's attr data to the clone one\n\t        clone.update_attr_data(self.data)\n\t        # Copy the Atoms' attr data to the clone ones\n\t        for atom in clone.atoms:\n\t            atom.update_attr_data(self.atoms_dict[atom.ob_id].data)\n\t            atom.molecule = clone\n", "        # Copy the Bonds' attr data to the lone ones\n\t        for bond in clone.bonds:\n\t            bond.update_attr_data(self.bonds_dict[bond.ob_id].data)\n\t            bond.molecule = clone\n\t        return clone\n\t    def compact_crystal(self, inplace=False):\n\t        \"\"\"\"\"\"\n\t        mol = self if inplace else self.copy()\n\t        lattice_params = np.concatenate((self.xyz_diff, [90., 90., 90.]))\n\t        mol.make_crystal(*lattice_params)\n", "        return mol\n\t    def create_crystal_by_vectors(\n\t            self,\n\t            va: Union[Sequence, np.ndarray],\n\t            vb: Union[Sequence, np.ndarray],\n\t            vc: Union[Sequence, np.ndarray]\n\t    ):\n\t        \"\"\" Create a new crystal with specified cell vectors for the Molecule \"\"\"\n\t        self._create_ob_unit_cell()\n\t        self.crystal().set_vectors(va, vb, vc)\n", "    def create_crystal_by_matrix(self, matrix: np.ndarray):\n\t        \"\"\" Create a new crystal with specified cell matrix for the molecule \"\"\"\n\t        if not (np.logical_not(matrix >= 0.).any() and np.logical_not(matrix < 0.).any()) and np.linalg.det(matrix):\n\t            self._create_ob_unit_cell()\n\t            self.crystal().set_matrix(matrix)\n\t            # self.crystal().space_group = 'P1'\n\t    @classmethod\n\t    def create_aCryst_by_mq(\n\t            cls, elements: Dict[str, float], force_field: Union[str, os.PathLike],\n\t            density: float = 1.0, a: float = 25., b: float = 25., c: float = 25.,\n", "            alpha: float = 90., beta: float = 90., gamma: float = 90., time_step: float = 0.0001,\n\t            origin_temp: float = 298.15, melt_temp: float = 4000., highest_temp: float = 10000.,\n\t            ff_args: Sequence = (), path_writefile: Optional[str] = None, path_dump_to: Optional[str] = None,\n\t            dump_every: int = 100\n\t    ):\n\t        \"\"\"\n\t        Create a Amorphous crystal materials by Melt-Quench process.\n\t        This process is performed by LAMMPS package, make sure the LAMMPS is accessible.\n\t        A suitable force field is required for the process are performed correctly.\n\t        Args:\n", "            elements(dict[str, float]): Dict of elements and their composition ratio\n\t            force_field(str, os.PathLike): The name of force filed or the path to load a force filed. The name\n\t             of the force filed is refer to the relative path to the 'hotpot_root/data/force_field'.\n\t            density: the demand density for the created amorphous crystal\n\t            a: the length of a vector in the crystal\n\t            b: the length of b vector in the crystal\n\t            c: the length of c vector in the crystal\n\t            alpha: alpha angle of crystal param.\n\t            beta: beta angle of crystal param.\n\t            gamma: gamma angle of crystal param\n", "            time_step: time interval between path integrals when performing melt-quench\n\t            origin_temp: the initial temperature before melt\n\t            melt_temp: the round melting point to the materials\n\t            highest_temp: the highest temperature to liquefy the materials\n\t            ff_args: the arguments the force file requried, refering the LAMMPS pair_coeff:\n\t             \"pair_coeff I J args\" url: https://docs.lammps.org/pair_coeff.html\n\t            path_writefile: the path to write the final material (screenshot) to file, if not specify, not save.\n\t            path_dump_to:  the path to save the trajectory of the melt-quench process, if not specify not save.\n\t            dump_every: the step interval between each dump operations\n\t        Returns:\n", "            Molecule, a created amorphous material\n\t        \"\"\"\n\t        return cls._melt_quench(\n\t            elements=elements, force_field=force_field, density=density,\n\t            a=a, b=b, c=c, alpha=alpha, beta=beta, gamma=gamma, time_step=time_step,\n\t            origin_temp=origin_temp, melt_temp=melt_temp, highest_temp=highest_temp,\n\t            ff_args=ff_args, path_writefile=path_writefile, path_dump_to=path_dump_to,\n\t            dump_every=dump_every\n\t        )\n\t    @property\n", "    def critical_pressure(self):\n\t        return self._get_critical_params('pressure')\n\t    @property\n\t    def critical_temperature(self):\n\t        return self._get_critical_params('temperature')\n\t    def crystal(self):\n\t        \"\"\" Get the Crystal containing the Molecule \"\"\"\n\t        cell_index = ob.UnitCell  # Get the index the UnitCell data save\n\t        cell_data = self.ob_mol.GetData(cell_index)\n\t        if cell_data:\n", "            ob_unit_cell = ob.toUnitCell(cell_data)\n\t            return Crystal(ob_unit_cell, molecule=self)\n\t        else:\n\t            return None\n\t    def dump(self, fmt: str, *args, **kwargs) -> Union[str, bytes, dict, 'DeepSystem']:\n\t        \"\"\"\"\"\"\n\t        dumper = Dumper(fmt=fmt, source=self, *args, **kwargs)\n\t        return dumper()\n\t    @property\n\t    def elements(self) -> list[str]:\n", "        return re.findall(r'[A-Z][a-z]*', self.formula)\n\t    @property\n\t    def energy(self):\n\t        \"\"\" Return energy with kcal/mol as default \"\"\"\n\t        return self.ob_mol.GetEnergy()\n\t    def feature_matrix(self, *feature_names: Sequence) -> np.ndarray:\n\t        \"\"\" Retrieve the feature matrix (collections of feature vector for atoms),\n\t         The default feature is `atomic_orbital`, if the feature names not be specified, the `atomic_orbital` will be\n\t         retrieved.\n\t         Args:\n", "             feature_names: the feature names are offered in hotpot/data/periodic_table.json\n\t         \"\"\"\n\t        if not feature_names:\n\t            feature_names = ('atomic_orbital',)\n\t        # Matrix with shape (atom_numbers, feature_length)\n\t        return np.stack([atom.element_features(*feature_names) for atom in self.atoms])\n\t    def fingerprint(self, fptype: Literal['FP2', 'FP3', 'FP4', 'MACCS'] = 'FP2'):\n\t        \"\"\"\n\t        Calculate the molecular fingerprint for this molecule, the supporting fingerprint include:\n\t        1. \"FP2\": The FP2 fingerprint is a path-based fingerprint that encodes the presence of linear\n", "        fragments up to 7 atoms long. It is a 1024-bit fingerprint and is commonly used for substructure\n\t        searches and similarity calculations.\n\t        2. \"FP3\": The FP3 fingerprint is designed for searching 3D conformations, such as those found\n\t        in protein-ligand complexes. It encodes the presence of particular pharmacophoric features,\n\t        such as hydrogen bond donors, acceptors, and hydrophobic regions.\n\t        3. \"FP4\": The FP4 fingerprint is a circular fingerprint based on the Morgan algorithm. It\n\t        captures information about the local environment of each atom in the molecule, up to a certain\n\t        radius. It is useful for similarity calculations and machine learning tasks.\n\t        4. \"MACCS\": The MACCS fingerprint is a 166-bit structural key-based fingerprint. It represents\n\t        the presence of specific substructures or functional groups defined by the MACCS keys. It is\n", "        commonly used for similarity calculations and substructure searches.\n\t        Return:\n\t            the Fingerprint object in pybel module\n\t        \"\"\"\n\t        return pb.Molecule(self.ob_mol).calcfp(fptype)\n\t    @property\n\t    def forces(self):\n\t        \"\"\" return the all force vectors for all atoms in the molecule \"\"\"\n\t        return np.vstack((atom.force_vector for atom in self.atoms))\n\t    @property\n", "    def all_forces(self):\n\t        \"\"\" the force matrix for all conformer \"\"\"\n\t        force_matrix = self._data.get(\"all_forces\")\n\t        if isinstance(force_matrix, np.ndarray):\n\t            return force_matrix\n\t        return self.forces\n\t    @property\n\t    def formula(self) -> str:\n\t        return self.ob_mol.GetSpacedFormula()\n\t    def gaussian(\n", "            self,\n\t            g16root: Union[str, PathLike],\n\t            link0: Union[str, List[str]],\n\t            route: Union[str, List[str]],\n\t            path_log_file: Union[str, PathLike] = None,\n\t            path_err_file: Union[str, PathLike] = None,\n\t            path_chk_file: Union[str, PathLike] = None,\n\t            path_rwf_file: Union[str, PathLike] = None,\n\t            inplace_attrs: bool = False,\n\t            debugger: Union[str, Debugger] = 'auto',\n", "            *args, **kwargs\n\t    ) -> (Union[None, str], str):\n\t        \"\"\"\n\t        calculation by Gaussian.\n\t        for running the method normally, MAKE SURE THE Gaussian16 HAVE BEEN INSTALLED AND ALL ENV VAR SET RITHT !!\n\t        Args:\n\t            g16root: the dir Gaussian16 software installed\n\t            link0: the link0 command in gjf script\n\t            route: the route command in gjf script\n\t            path_log_file: Optional, the path to save the out.log file. If not given, the logfile would be written\n", "             to the work dir\n\t            path_err_file: Optional, the path to save the error log file. If not given, the err file would be written\n\t             to the work dir\n\t            path_chk_file: Optional, the path to the checkpoint file. If not given the chk file would be written\n\t             to the work dir\n\t            path_rwf_file: Optional, the path to the read-write file. If not given the rwf file would be written\n\t             to the work dir\n\t            inplace_attrs: Whether to inplace self attribute according to the results from attributes.\n\t            debugger: define the method to handle the Gaussian error, like l9999, l103 or l502 ...,\n\t             the default method is the 'auto', which just to handle some common error case. More elaborate\n", "             debugger could be handmade by inherit from `Debugger` abstract class. For detail, seeing\n\t             the documentation.\n\t            *args:\n\t            **kwargs:\n\t        Returns:\n\t            the standard output of g16 log file(string), the standard output of g16 err file(string)\n\t        \"\"\"\n\t        # For 2d molecule, build its confomer by universal force field first\n\t        if not self.has_3d:\n\t            self.build_3d()\n", "        # Specify the temporary file\n\t        if not path_chk_file:\n\t            path_chk_file = Path.cwd().joinpath('checkpoint.chk')\n\t        else:\n\t            path_chk_file = Path(path_chk_file)\n\t        if not path_rwf_file:\n\t            path_rwf_file = Path.cwd().joinpath('readwrite.rwf')\n\t        else:\n\t            path_rwf_file = Path(path_rwf_file)\n\t        if isinstance(link0, str):\n", "            link0 = [link0]\n\t        link0 = link0 + [f'rwf={str(path_rwf_file)}', 'NoSave', f'chk={str(path_chk_file)}']\n\t        # Make the input gjf script\n\t        script = self.dump('gjf', *args, link0=link0, route=route, **kwargs)\n\t        gauss = Gaussian(g16root)\n\t        gauss.path_rwf = path_rwf_file\n\t        gauss.path_chk = path_chk_file\n\t        grun = GaussRun(gauss, debugger)\n\t        gauss = grun(script)\n\t        if not gauss.stderr:\n", "            # save the calculate result into the molecule data dict\n\t            self._data['gaussian_output'] = gauss.stdout\n\t            self._data['gaussian_parse_data'] = gauss.parse_log()\n\t            # Inplace the self attribute according to the result from gaussian\n\t            if inplace_attrs:\n\t                self._set_attrs(**gauss.molecule_setter_dict())\n\t            # Save log file when the path_log_file has been specified\n\t            if path_log_file:\n\t                with open(path_log_file, 'w') as writer:\n\t                    writer.write(gauss.stdout)\n", "            # return results and error info\n\t            return gauss.stdout, gauss.stderr\n\t        # If got an error message, save the error and stdout file, before raise the error\n\t        else:\n\t            # Save error file\n\t            if not path_err_file:\n\t                path_err_file = Path(f'{self.formula}.err')\n\t            with open(path_err_file, 'w') as writer:\n\t                writer.write(gauss.stderr)\n\t            # Save log file\n", "            if not path_log_file:\n\t                path_log_file = Path(f'{self.formula}.log')\n\t            with open(path_log_file, 'w') as writer:\n\t                writer.write(gauss.stdout)\n\t            raise GaussianRunError(gauss.stderr)\n\t    def gcmc(\n\t            self, *guest: 'Molecule', force_field: Union[str, os.PathLike] = None,\n\t            work_dir: Union[str, os.PathLike] = None, T: float = 298.15, P: float = 1.0, **kwargs\n\t    ):\n\t        \"\"\"\n", "        Run gcmc to determine the adsorption of guest,\n\t        Args:\n\t            self: the framework as the sorbent of guest molecule\n\t            guest(Molecule): the guest molecule to be adsorbed into the framework\n\t            force_field(str|PathLike): the path to force field file or the self-existent force file contained\n\t             in force field directory (in the case, a str should be given as a relative path from the root of\n\t             force field root to the specified self-existent force filed). By default, the force field is UFF\n\t             which in the relative path 'UFF/LJ.json' for the force field path.\n\t            work_dir: the user-specified dir to store the result of GCMC and log file.\n\t            T: the environmental temperature (default, 298.15 K)\n", "            P: the relative pressure related to the saturation vapor in the environmental temperature.\n\t        \"\"\"\n\t        from tanks.lmp.gcmc import LjGCMC\n\t        gcmc = LjGCMC(self, force_field, *guest, work_dir=work_dir, T=T, P=P, **kwargs)\n\t        return gcmc.run()\n\t    def gcmc_for_isotherm(\n\t            self, *guest: 'Molecule', force_field: Union[str, os.PathLike] = None,\n\t            work_dir: Union[str, os.PathLike] = None, T: float = 298.15,\n\t            Ps: Sequence[float] = (1.0,), **kwargs\n\t    ):\n", "        \"\"\"\n\t        Run gcmc to determine the adsorption of guest,\n\t        Args:\n\t            self: the framework as the sorbent of guest molecule\n\t            guest(Molecule): the guest molecule to be adsorbed into the framework\n\t            force_field(str|PathLike): the path to force field file or the self-existent force file contained\n\t             in force field directory (in the case, a str should be given as a relative path from the root of\n\t             force field root to the specified self-existent force filed). By default, the force field is UFF\n\t             which in the relative path 'UFF/LJ.json' for the force field path.\n\t            work_dir: the user-specified dir to store the result of GCMC and log file.\n", "            T: the environmental temperature (default, 298.15 K)\n\t            Ps(Sequence[float]): A sequence of relative pressure related to the saturation vapor in the environmental temperature.\n\t        \"\"\"\n\t        if isinstance(work_dir, str):\n\t            work_dir = Path(work_dir)\n\t        if not work_dir.exists():\n\t            work_dir.mkdir()\n\t        for P in Ps:\n\t            sub_work_dir = work_dir.joinpath('press_' + str(P))\n\t            if not sub_work_dir.exists():\n", "                sub_work_dir.mkdir()\n\t            self.gcmc(*guest, force_field=force_field, work_dir=sub_work_dir, T=T, P=P, **kwargs)\n\t    def generate_metal_ligand_pair(\n\t            self, metal_symbol: str,\n\t            acceptor_atoms: Sequence = ('O',),\n\t            opti_force_field: str = 'UFF',\n\t            opti_before_gen: bool = False,\n\t            opti_step: int = 500\n\t    ) -> Generator['Molecule', None, None]:\n\t        \"\"\"\n", "        This method could work if the molecule is an organic ligand, or raise AttributeError.\n\t        Generate metal-ligand pair by link metal with acceptor atoms in the organic ligand.\n\t        Args:\n\t            metal_symbol: which metal element link to the ligand\n\t            acceptor_atoms: which elements to be acceptor atom to link to metal\n\t            opti_force_field: which force field could be used to optimize the configuration of ligand and M-L pair.\n\t            opti_before_gen: whether to optimize the ligand conformer before generate pair\n\t            opti_step: the step to optimize the 3d conformer\n\t        Return:\n\t            A generator for M-L pair\n", "        \"\"\"\n\t        ligand = self.copy()\n\t        if opti_before_gen:\n\t            ligand.build_3d(force_field=opti_force_field, steps=opti_step)\n\t        for atom in ligand.atoms:\n\t            if atom.symbol in acceptor_atoms:\n\t                # copy the ligand as the embryo of metal-ligand pairs\n\t                pair = ligand.copy()\n\t                # Replace the correspondent atom in the pair embryo, i.e., the accepting atom\n\t                acc_atom = pair.atom(atom.ob_id)\n", "                # assign the initial coordinates, if the pair has 3d conformer\n\t                # the sum of vector of relative position relate to the accepting atom\n\t                if pair.has_3d:\n\t                    sum_relative_coordinates = sum([c for _, c in acc_atom.neighbours_position])\n\t                    metal_init_coordinates = acc_atom.coordinates_array - sum_relative_coordinates\n\t                    # add metal atom into the acceptor_ligand\n\t                    added_metal = pair.add_atom(metal_symbol, coordinates=metal_init_coordinates)\n\t                else:  # If the pair has not 3d conformer, add the metal directly\n\t                    added_metal = pair.add_atom(metal_symbol)\n\t                # add the coordinating bond between metal atom and acceptor atoms\n", "                pair.add_bond(added_metal, acc_atom, 1)\n\t                # localize optimization of M-L pair by classical force field, if the pair has 3d\n\t                if pair.has_3d:\n\t                    pair.localed_optimize(opti_force_field)\n\t                else:\n\t                    pair.add_hydrogens()  # Add hydrogens\n\t                pair.identifier = pair.smiles\n\t                yield pair\n\t    def generate_pairs_bundle(\n\t            self, metal_symbol: str,\n", "            acceptor_atoms: Sequence = ('O',),\n\t            opti_force_field: str = 'UFF',\n\t            opti_before_gen: bool = False,\n\t            opti_step: int = 500\n\t    ) -> 'PairBundle':\n\t        \"\"\"\n\t        Generate metal-ligand pairs by bind this ligand with proposed, and put this ligand, metal and all pairs,\n\t        which are assembled by the ligand and metal, into a PairBundle objects.\n\t        Args:\n\t            metal_symbol(str): the symbol of proposed metal\n", "            acceptor_atoms(Sequence): the atoms to form bond with the proposed metal, the default is Oxygen\n\t            opti_force_field(str): the force field to optimize the conformer of this ligand and the generated\n\t             pairs.\n\t            opti_before_gen: whether to optimize the ligand conformer before generate pair.\n\t            opti_step: the step to optimize the 3d conformer\n\t        Returns:\n\t            PairBundle with this ligand, proposed metal and the pairs\n\t        \"\"\"\n\t        return PairBundle(\n\t            metal=Atom(symbol=metal_symbol),\n", "            ligand=self,\n\t            pairs=list(self.generate_metal_ligand_pair(\n\t                metal_symbol,\n\t                acceptor_atoms,\n\t                opti_force_field,\n\t                opti_before_gen\n\t            )),\n\t        )\n\t    def graph_representation(self, *feature_names):\n\t        return self.identifier, self.feature_matrix(*feature_names), self.link_matrix\n", "    def heavy_atoms(self):\n\t        \"\"\" Get the atoms except for hydrogens \"\"\"\n\t        return [a for a in self.atoms if a.is_heavy]\n\t    @property\n\t    def has_3d(self):\n\t        \"\"\" Whether atoms in the molecule have 3d coordinates \"\"\"\n\t        return self.ob_mol.Has3D()\n\t    @property\n\t    def has_hydrogen_added(self):\n\t        \"\"\" Have hydrogens been added to the molecule by call Molecule.add_hydrogen()? \"\"\"\n", "        return self.ob_mol.HasHydrogensAdded()\n\t    @property\n\t    def has_unknown_bond(self):\n\t        return any(not b.type for b in self.bonds)\n\t    @property\n\t    def hydrogens(self):\n\t        return [a for a in self.atoms if a.is_hydrogen]\n\t    @property\n\t    def identifier(self):\n\t        return self.ob_mol.GetTitle()\n", "    @identifier.setter\n\t    def identifier(self, value):\n\t        self.ob_mol.SetTitle(value)\n\t    @property\n\t    def identifier_array(self) -> np.ndarray:\n\t        \"\"\" numpy.array of identifiers has the same number of items with the number of conformers \"\"\"\n\t        idt_array = self._data.get('identifier_array')\n\t        if not isinstance(idt_array, np.ndarray):\n\t            idt_array = []\n\t            for i, c in enumerate(self.all_coordinates):\n", "                idt_array.append(f'{self.identifier}_c{i}')\n\t            self._data['identifier_array'] = idt_array = np.array(idt_array)\n\t        return idt_array\n\t    def iadd_accessible(self, other):\n\t        if self.atomic_numbers == other.atomic_numbers:\n\t            return True\n\t        return False\n\t    @property\n\t    def inchi(self):\n\t        return self.dump('inchi').strip()\n", "    @property\n\t    def is_disorder(self):\n\t        \"\"\" To judge whether this Molecule has disorder bonds \"\"\"\n\t        if self.has_3d:\n\t            if any(not (0.85 < b.length/b.ideal_length < 1.15) for b in self.bonds):\n\t                return True\n\t        return False\n\t    @property\n\t    def is_labels_unique(self):\n\t        \"\"\" Determine whether all atom labels are unique \"\"\"\n", "        return len(set(self.labels)) == self.atom_counts\n\t    @property\n\t    def is_organic(self):\n\t        \"\"\" To judge whether the molecule is organic, an organic compound is with carbon atoms and without metal \"\"\"\n\t        if any(a.is_metal for a in self.atoms):\n\t            return False\n\t        elif any(a.symbol == 'C' for a in self.atoms):\n\t            return True\n\t        return False\n\t    def ob_copy(self):\n", "        \"\"\" Return a clone of OBMol of the Molecule \"\"\"\n\t        return ob.OBMol(self.ob_mol)\n\t    @property\n\t    def ob_mol(self):\n\t        return self._data['ob_obj']\n\t    def ob_mol_pop(self):\n\t        data: dict = self._data\n\t        atoms: Dict[int, Atom] = data.get('atoms')\n\t        if atoms:\n\t            for ob_id, atom in atoms.items():\n", "                atom.ob_atom_pop()\n\t        bonds: Dict[int, Bond] = data.get('bonds')\n\t        if bonds:\n\t            for ob_idx, bond in bonds.items():\n\t                bond.ob_bond_pop()\n\t        return self._data.pop('ob_obj')\n\t    def ob_mol_rewrap(self, ob_mol: ob.OBMol):\n\t        if not isinstance(ob_mol, ob.OBMol):\n\t            raise TypeError('the ob_mol should be OBMol object')\n\t        atoms = self._data.get('atoms')\n", "        bonds = self._data.get('bonds')\n\t        if any(oba.GetId() not in atoms for oba in ob.OBMolAtomIter(ob_mol)):\n\t            raise ValueError('the atom number between the wrapper and the core OBMol is not match')\n\t        if any(obb.GetId() not in bonds for obb in ob.OBMolBondIter(ob_mol)):\n\t            raise ValueError('the bond number between the wrapper and the core OBMol is not match')\n\t        self._data['ob_obj'] = ob_mol\n\t        for ob_atom in ob.OBMolAtomIter(ob_mol):\n\t            atom = atoms.get(ob_atom.GetId())\n\t            atom.ob_atom_rewrap(ob_atom)\n\t        for ob_bond in ob.OBMolBondIter(ob_mol):\n", "            bond = bonds.get(ob_bond.GetId())\n\t            bond.ob_bond_rewrap(ob_bond)\n\t    @property\n\t    def labels(self):\n\t        return [a.label for a in self.atoms]\n\t    @property\n\t    def lmp(self):\n\t        \"\"\" handle to operate the Lammps object \"\"\"\n\t        return self._data.get('lmp')\n\t    def lmp_close(self):\n", "        pop_lmp = self._data.pop('lmp')\n\t        pop_lmp.close()\n\t    def lmp_setup(self, **kwargs):\n\t        self._data['lmp'] = lmp.HpLammps(self, **kwargs)\n\t    @property\n\t    def link_matrix(self):\n\t        return np.array([[b.ob_atom1_id, b.ob_atom2_id] for b in self.bonds]).T\n\t    def localed_optimize(self, force_field: str = 'UFF', steps: int = 500):\n\t        \"\"\" Locally optimize the coordinates. seeing openbabel.pybel package \"\"\"\n\t        pymol = pb.Molecule(self.ob_mol)\n", "        pymol.localopt(force_field, steps)\n\t        self.balance_hydrogens()\n\t    def make_crystal(self, a: float, b: float, c: float, alpha: float, beta: float, gamma: float) -> 'Crystal':\n\t        \"\"\" Put this molecule into the specified crystal \"\"\"\n\t        ob_unit_cell = ob.OBUnitCell()\n\t        self.ob_mol.CloneData(ob_unit_cell)\n\t        self.crystal().ob_unit_cell.SetData(a, b, c, alpha, beta, gamma)\n\t        self.crystal().ob_unit_cell.SetSpaceGroup('P1')\n\t        return self.crystal()\n\t    @property\n", "    def masses(self) -> np.ndarray:\n\t        return np.array([a.mass for a in self.atoms])\n\t    def melt_quench(\n\t            self, elements: Dict[str, float], force_field: Union[str, os.PathLike],\n\t            density: float = 1.0, a: float = 25., b: float = 25., c: float = 25.,\n\t            alpha: float = 90., beta: float = 90., gamma: float = 90., time_step: float = 0.0001,\n\t            origin_temp: float = 298.15, melt_temp: float = 4000., highest_temp: float = 10000.,\n\t            ff_args: Sequence = (), path_writefile: Optional[str] = None, path_dump_to: Optional[str] = None,\n\t            dump_every: int = 100\n\t    ):\n", "        \"\"\"\n\t        Create an Amorphous crystal materials by performing Melt-Quench process for this materials.\n\t        This process is performed by LAMMPS package, make sure the LAMMPS is accessible.\n\t        A suitable force field is required for the process are performed correctly.\n\t        Args:\n\t            elements(dict[str, float]): Dict of elements and their composition ratio\n\t            force_field(str, os.PathLike): The name of force filed or the path to load a force filed. The name\n\t             of the force filed is refer to the relative path to the 'hotpot_root/data/force_field'.\n\t            density: the demand density for the created amorphous crystal\n\t            a: the length of a vector in the crystal\n", "            b: the length of b vector in the crystal\n\t            c: the length of c vector in the crystal\n\t            alpha: alpha angle of crystal param.\n\t            beta: beta angle of crystal param.\n\t            gamma: gamma angle of crystal param\n\t            time_step: time interval between path integrals when performing melt-quench\n\t            origin_temp: the initial temperature before melt\n\t            melt_temp: the round melting point to the materials\n\t            highest_temp: the highest temperature to liquefy the materials\n\t            ff_args: the arguments the force file requried, refering the LAMMPS pair_coeff:\n", "             \"pair_coeff I J args\" url: https://docs.lammps.org/pair_coeff.html\n\t            path_writefile: the path to write the final material (screenshot) to file, if not specify, not save.\n\t            path_dump_to:  the path to save the trajectory of the melt-quench process, if not specify not save.\n\t            dump_every: the step interval between each dump operations\n\t        Returns:\n\t            Molecule, a created amorphous material\n\t        \"\"\"\n\t        return self._melt_quench(\n\t            elements=elements, force_field=force_field, density=density,\n\t            a=a, b=b, c=c, alpha=alpha, beta=beta, gamma=gamma, time_step=time_step,\n", "            origin_temp=origin_temp, melt_temp=melt_temp, highest_temp=highest_temp,\n\t            ff_args=ff_args, path_writefile=path_writefile, path_dump_to=path_dump_to,\n\t            dump_every=dump_every, mol=self\n\t        )\n\t    @property\n\t    def metals(self) -> List['Atom']:\n\t        return [a for a in self.atoms if a.is_metal]\n\t    @property\n\t    def mol_orbital_energies(self):\n\t        energies = self._data.get('mol_orbital_energies')\n", "        if energies:\n\t            return energies\n\t        else:\n\t            return None\n\t    def normalize_labels(self):\n\t        \"\"\" Reorder the atoms labels in the molecule \"\"\"\n\t        element_counts = {}\n\t        for atom in self.atoms:\n\t            count = element_counts.get(atom.symbol, 0)\n\t            count += 1\n", "            element_counts[atom.symbol] = count\n\t            atom.label = f'{atom.symbol}{count}'\n\t    def perturb_atoms_coordinates(\n\t            self,\n\t            random_style='uniform',\n\t            mol_distance=0.5,\n\t            freeze_dim: Sequence[int] = (),\n\t            max_generate_num: int = 10,\n\t            inplace: bool = False\n\t    ) -> Generator[\"Molecule\", None, None]:\n", "        \"\"\"\n\t        Perturb the coordinate of atom in the molecule\n\t        generate new mol\n\t        Args:\n\t            random_style: how to sample, 'uniform' or 'normal'\n\t            mol_distance: the max distance of perturbation in 'uniform'; the square variance in 'normal'\n\t            freeze_dim: tuple of int or str, 0 = x, 1 = y, 2 = z\n\t            max_generate_num: the maximum of generated molecule\n\t            inplace\n\t        Returns:\n", "            Generator of perturbed molecule\n\t        \"\"\"\n\t        dim_transform = {'x': 0, 'y': 1, 'z': 2}\n\t        coordinates_shape = (self.atom_counts, 3)  # the shape of coordinates matrix (atom counts, 3 dimension)\n\t        origin_coordinates = self.coordinates\n\t        def coordinates_generator():\n\t            \"\"\" Generating \"\"\"\n\t            for _ in range(max_generate_num):\n\t                if random_style == 'uniform':\n\t                    perturb_matrix = np.float64(np.random.uniform(-mol_distance, mol_distance, coordinates_shape))\n", "                elif random_style == 'normal':\n\t                    perturb_matrix = np.float64(np.random.normal(0, mol_distance, coordinates_shape))\n\t                else:\n\t                    raise ValueError('the perturb style is not defined!')\n\t                if freeze_dim:\n\t                    dim = [\n\t                        i if (isinstance(i, int) and 0 <= i <= 3) else dim_transform[i]\n\t                        for i in freeze_dim\n\t                    ]\n\t                    perturb_matrix[:, dim] = 0.\n", "                new_coord = origin_coordinates + perturb_matrix\n\t                yield new_coord\n\t        if inplace:\n\t            origin_all_coordinates = self._data.get('all_coordinates')\n\t            new_all_coordinates = np.array([c for c in coordinates_generator()])\n\t            if origin_all_coordinates is not None:\n\t                self._data['all_coordinates'] = np.concatenate([origin_all_coordinates, new_all_coordinates])\n\t            else:\n\t                self._data['all_coordinates'] = np.concatenate(\n\t                    [np.reshape(origin_coordinates, (1,) + origin_coordinates.shape), new_all_coordinates]\n", "                )\n\t        else:\n\t            return (self._pert_mol_generate(c) for c in coordinates_generator())\n\t    def perturb_cell_params(self):\n\t        \"\"\" To perturb parameters, i.e., a, b, c, alpha, beta, gamma \"\"\"\n\t    @property\n\t    def pseudo_atoms(self):\n\t        return self._data.get('pseudo_atoms', [])\n\t    def quick_build_atoms(self, atomic_numbers: np.ndarray):\n\t        \"\"\"\n", "        This method to quick build atoms according an array of atomic numbers.\n\t        The method bypass to calling more time-consumed method: add_atom().\n\t        However, the method only assign the elements or atomic number for atoms,\n\t        more fine attributes like coordinates, can't be specified.\n\t        Args:\n\t            atomic_numbers(np.ndarray): 1-D numpy array to add new atoms into the molecule\n\t        Returns:\n\t            None\n\t        \"\"\"\n\t        if not isinstance(atomic_numbers, (np.ndarray, Sequence)):\n", "            raise TypeError('the atomic_numbers should be np.ndarray or Sequence')\n\t        if isinstance(atomic_numbers, np.ndarray) and len(atomic_numbers.shape) != 1:\n\t            raise ValueError('the numpy array must be 1-D')\n\t        for atomic_number in atomic_numbers:\n\t            ob_atom = ob.OBAtom()\n\t            ob_atom.SetAtomicNum(int(atomic_number))\n\t            self.ob_mol.AddAtom(ob_atom)\n\t    @classmethod\n\t    def read_from(cls, source: Union[str, PathLike, IOBase], fmt=None, *args, **kwargs) -> 'Molecule':\n\t        \"\"\"\n", "        read source to the Molecule obj by call _io.Parser class\n\t        Args:\n\t            source(str, PathLike, IOBase): the formatted source\n\t            fmt:\n\t            *args:\n\t            **kwargs:\n\t        Returns:\n\t        \"\"\"\n\t        if not fmt:\n\t            if isinstance(source, str):\n", "                source = Path(source)\n\t            if isinstance(source, Path):\n\t                fmt = source.suffix.strip('.')\n\t            else:\n\t                raise ValueError(f'the arguments should be specified for {type(source)} source')\n\t        mol = Parser(fmt, source, *args, **kwargs)()  # initialize parser object and call self\n\t        # Specify the mol identifier if it's None\n\t        if isinstance(mol, Molecule) and not mol.identifier:\n\t            mol.identifier = str(source)\n\t        return mol\n", "    def register_critical_params(self, name: str, temperature: float, pressure: float, acentric: float):\n\t        \"\"\" Register new critical parameters into the critical parameters sheet \"\"\"\n\t        data = json.load(open(opj(data_root, 'thermo', 'critical.json')))\n\t        data[self.smiles] = {'name': name, 'temperature': temperature, 'pressure': pressure, 'acentric': acentric}\n\t        with open(opj(data_root, 'thermo', 'critical.json'), 'w') as writer:\n\t            json.dump(data, writer, indent=True)\n\t    def remove_atoms(self, *atoms: Union[int, str, 'Atom'], remove_hydrogens: bool = False) -> None:\n\t        \"\"\"\n\t        Remove atom according to given atom index, label or the atoms self.\n\t        Args:\n", "            atoms(int|str|Atom): the index, label or self of Removed atom\n\t            remove_hydrogens(bool): remove the hydrogens connecting in the atoms synchronously.\n\t        Returns:\n\t            None\n\t        \"\"\"\n\t        for atom in atoms:\n\t            # Check and locate the atom\n\t            if isinstance(atom, int):\n\t                atom = self.atoms_dict[atom]\n\t            elif isinstance(atom, str):\n", "                atom = self.atom(atom)\n\t            elif isinstance(atom, Atom):\n\t                if not (atom.molecule is self):\n\t                    raise AttributeError('the given atom not in the molecule')\n\t            else:\n\t                raise TypeError('the given atom should be int, str or Atom')\n\t            # remove connecting hydrogens\n\t            if remove_hydrogens:\n\t                for nh in atom.neighbours_hydrogen:\n\t                    self.ob_mol.DeleteAtom(nh.ob_atom)\n", "            # Removing the atom\n\t            self.ob_mol.DeleteAtom(atom.ob_atom)\n\t            atom._data['mol'] = None\n\t        # Reload atoms\n\t        self._load_atoms()\n\t        self._load_bonds()\n\t    def remove_bonds(self, *bonds: 'Bond'):\n\t        \"\"\" Remove the bonds in the molecule \"\"\"\n\t        for bond in bonds:\n\t            successful = self.ob_mol.DeleteBond(bond.ob_bond)\n", "            if not successful:\n\t                raise RuntimeError(f'Fail to remove {bonds}')\n\t        self._load_bonds()\n\t    def remove_hydrogens(self):\n\t        self.ob_mol.DeleteHydrogens()\n\t    def remove_metals(self):\n\t        \"\"\" remove all of metal atoms in the molecule \"\"\"\n\t        self.remove_atoms(*self.metals)\n\t    def remove_solvents(self, remove_disorder: bool = True, remove_isolate_atoms: bool = True):\n\t        \"\"\" remove all solvents in the molecule \"\"\"\n", "        self.normalize_labels()\n\t        for i, ligand in enumerate(self.retrieve_ligands()):\n\t            if remove_disorder and ligand.is_disorder:  # remove disorder molecular structures first\n\t                self.remove_atoms(*ligand.atom_labels, remove_hydrogens=False)\n\t            elif remove_isolate_atoms and len(ligand.atoms) == 1:\n\t                self.remove_atoms(*ligand.atom_labels, remove_hydrogens=False)\n\t            elif _lib.get('Solvents').is_solvent(ligand):  # To judge if the ligand is solvents\n\t                self.remove_atoms(*ligand.atom_labels, remove_hydrogens=False)\n\t    def retrieve_ligands(self) -> List['Molecule']:\n\t        \"\"\" Retrieve all ligand molecule from this \"\"\"\n", "        clone = self.copy()\n\t        clone.remove_metals()\n\t        return clone.components\n\t    def retrieve_metal_ligand_pairs(self) -> List['Molecule']:\n\t        \"\"\" Retrieve all clone of metal-ligand pairs in the molecule \"\"\"\n\t        if not self.is_labels_unique:\n\t            self.normalize_labels()\n\t        ml_pairs = []\n\t        for metal, ligand in product(self.metals, self.retrieve_ligands()):\n\t            if set(metal.neighbours_label) & set(ligand.atom_labels):\n", "                pair = self.copy()\n\t                # Remove all the atoms is not the metal and not on the ligand\n\t                other_atoms = [a for a in pair.atoms if a.label != metal.label and a.label not in ligand.atom_labels]\n\t                pair.remove_atoms(*other_atoms, remove_hydrogens=False)\n\t                ml_pairs.append(pair)\n\t        return ml_pairs\n\t    @property\n\t    def rotatable_bonds_number(self):\n\t        return self.ob_mol.NumRotors()\n\t    def save_2d_img(self, file_path: Union[str, os.PathLike], **kwargs):\n", "        \"\"\"\n\t        Export 2d image to file\n\t        Args:\n\t            file_path:\n\t            **kwargs: other keywords arguments for 2d image make and save\n\t        Keyword Args:\n\t        \"\"\"\n\t        img = self.to_2d_img(**kwargs)\n\t        img.save(file_path)\n\t    def set(self, **kwargs):\n", "        \"\"\" Set the attributes directly \"\"\"\n\t        self._set_attrs(**kwargs)\n\t    def set_label(self, ob_id: int, label: str):\n\t        self.atoms_dict[ob_id].label = label\n\t    def similarity(self, other: 'Molecule', fptype: Literal['FP2', 'FP3', 'FP4', 'MACCS'] = 'FP2') -> int:\n\t        \"\"\"\n\t        Compare the similarity with other molecule, based on specified fingerprint\n\t        Args:\n\t            other(Molecule): the other Molecule\n\t            fptype(str): the fingerprint type to perform comparison of similarity\n", "        Return:\n\t            the similarity(int)\n\t        \"\"\"\n\t        return self.fingerprint(fptype) | other.fingerprint(fptype)\n\t    def smarts(self):\n\t        \"\"\" Get the SMARTS string \"\"\"\n\t        return Chem.MolToSmarts(self.to_rdmol())\n\t    @property\n\t    def smiles(self):\n\t        \"\"\" Get the canonical smiles \"\"\"\n", "        return self.dump('can').split()[0]\n\t    @property\n\t    def spin(self):\n\t        return self.ob_mol.GetTotalSpinMultiplicity()\n\t    @spin.setter\n\t    def spin(self, spin: int):\n\t        self._set_spin_multiplicity(spin)\n\t    def thermo_init(self, **kwargs):\n\t        \"\"\"\n\t        If certain substance don't retrieve information from current database, some required thermodynamical\n", "        parameters should pass into equation_of_state to initialization\n\t        Keyword Args:\n\t            T: the ambient temperature for thermodynamical system\n\t            P: the ambient pressure for thermodynamical system\n\t            V: the volume of thermodynamical system\n\t            Tc: the critical temperature of the molecule\n\t            Pc: the critical pressure of the molecule\n\t            omega: acentric factor of the molecule\n\t        Returns:\n\t            Thermo class\n", "        \"\"\"\n\t        from tmo import Thermo\n\t        self._data['thermo'] = Thermo(self, **kwargs)\n\t        return self._data['thermo']\n\t    @property\n\t    def thermo(self):\n\t        return self._data.get('thermo')\n\t    def thermo_close(self):\n\t        _ = self._data.pop('thermo')\n\t        del _\n", "    @property\n\t    def torsions(self):\n\t        return [Torsion(self, *obi) for obi in ob.OBMolTorsionIter(self.ob_mol)]\n\t    def to_2d_img(self, **kwargs):\n\t        \"\"\"\n\t        Get a 2D image objects for the molecule\n\t        Keyword Args:\n\t            kekulize: whether to applying Kekulize style to aromatical rings\n\t        Returns:\n\t        \"\"\"\n", "        clone = self.copy()\n\t        clone.build_2d()\n\t        return Draw.MolToImage(clone.to_rdmol(), **kwargs)\n\t    def to_dpmd_sys(\n\t            self, system_dir: Union[str, os.PathLike],\n\t            mode: Literal['std', 'att'] = 'std',\n\t            validate_ratio: float = None,\n\t            validate_dir: Union[str, Path] = None\n\t    ):\n\t        \"\"\"\n", "        convert to DeePMD-Kit System, there are two system mode, that `standard` (std) and `attention` (att)\n\t            1) standard: https://docs.deepmodeling.com/projects/deepmd/en/master/data/system.html\n\t            2) attention: https://docs.deepmodeling.com/projects/deepmd/en/master/model/train-se-atten.html#data-format\n\t        Args:\n\t            system_dir: the dir for all system data store, if the validate_dir has been given, this is the dir of\n\t             training system\n\t            mode: the system mode, choose from att or std\n\t            validate_ratio(float): the ratio of validate data set.\n\t            validate_dir(str|Path): if validate_ratio has been specified, this must be given\n\t        \"\"\"\n", "        system: DeepSystem = self.dump('dpmd_sys')\n\t        system(system_dir, mode, validate_ratio, validate_dir)\n\t    def to_mix_mol(self):\n\t        \"\"\" Convert this Molecule object to MixSaveAtomMol \"\"\"\n\t        return MixSameAtomMol(_data=self._data)\n\t    def to_rdmol(self):\n\t        \"\"\" convert hotpot Molecule object to RdKit mol object \"\"\"\n\t        return Chem.MolFromMol2Block(self.dump('mol2'))\n\t    @property\n\t    def unique_all_atoms(self) -> List[Union['Atom', 'PseudoAtom']]:\n", "        return self.unique_atoms + self.unique_pseudo_atoms\n\t    @property\n\t    def unique_atoms(self):\n\t        uni = []\n\t        for a in self.atoms:\n\t            if a not in uni:\n\t                uni.append(a)\n\t        return uni\n\t    @property\n\t    def unique_bonds(self):\n", "        uni = []\n\t        for b in self.bonds:\n\t            if b not in uni:\n\t                uni.append(b)\n\t        return uni\n\t    @property\n\t    def unique_bond_pairs(self) -> List[Tuple[int, int, int]]:\n\t        \"\"\" Retrieve unique bond pair in the molecule, i.e. a bond with same atoms element combination and bond type \"\"\"\n\t        return [b.pair_key for b in self.unique_bonds]\n\t    @property\n", "    def unique_pseudo_atoms(self) -> List['PseudoAtom']:\n\t        uni = []\n\t        for pa in self.pseudo_atoms:\n\t            if pa not in uni:\n\t                uni.append(pa)\n\t        return uni\n\t    @property\n\t    def weight(self):\n\t        return self.ob_mol.GetExactMass()\n\t    def writefile(self, fmt: str, path_file, retrieve_script=False, *args, **kwargs):\n", "        \"\"\"Write the Molecule Info into a file with specific format(fmt)\"\"\"\n\t        script = self.dump(fmt=fmt, *args, **kwargs)\n\t        if isinstance(script, str):\n\t            mode = 'w'\n\t        elif isinstance(script, bytes):\n\t            mode = 'wb'\n\t        else:\n\t            raise IOError(f'the {type(script)} type for script is not supported to write into file')\n\t        with open(path_file, mode) as writer:\n\t            writer.write(script)\n", "        if retrieve_script:\n\t            return script\n\t    @property\n\t    def xyz_min(self) -> np.ndarray:\n\t        \"\"\" Return the minimum of x coordinates wreathing all atoms \"\"\"\n\t        return self.coordinates.min(axis=0)\n\t    @property\n\t    def xyz_max(self) -> np.ndarray:\n\t        return self.coordinates.max(axis=0)\n\t    @property\n", "    def xyz_diff(self):\n\t        return self.xyz_max - self.xyz_min\n\t    @property\n\t    def z_matrix(self) -> 'ZMatrix':\n\t        return ZMatrix(self)\n\tclass MixSameAtomMol(Molecule):\n\t    \"\"\" the only difference to the Molecule class is the method of their addition  \"\"\"\n\t    def __repr__(self):\n\t        return f'MixMol({self.formula})'\n\t    def _merge_conformer_attr(self, other: 'Molecule'):\n", "        \"\"\"\"\"\"\n\t        # merge the MixSameAtomMol-specific conformer attributes\n\t        left_atomic_numbers: Dict[Tuple[int], int] = self.atomic_numbers\n\t        right_atomic_numbers: Union[Dict[Tuple[int], int], Tuple[int]] = other.atomic_numbers\n\t        # If the right atomic_number is a tuple convert it to dict.\n\t        if isinstance(right_atomic_numbers, tuple):\n\t            right_atomic_numbers = {right_atomic_numbers: other.conformer_counts}\n\t        for atomic_numbers, conformer_counts in right_atomic_numbers.items():\n\t            left_atomic_numbers[atomic_numbers] = left_atomic_numbers.get(atomic_numbers, 0) + conformer_counts\n\t        self._set_atomic_numbers(left_atomic_numbers)\n", "        # ##### the super method ######\n\t        # Merge the basic conformer attributes\n\t        super(MixSameAtomMol, self)._merge_conformer_attr(other)\n\t        return self\n\t    def _set_atomic_numbers(self, atomic_numbers: Dict[Tuple[int], int]):\n\t        \"\"\" Set all atoms' atomic numbers and their corresponding number of conformers \"\"\"\n\t        self.update_attr_data({'atomic_numbers': atomic_numbers})\n\t    @property\n\t    def atomic_numbers(self) -> Dict[Tuple[int], int]:\n\t        \"\"\" get each conformer atomic numbers \"\"\"\n", "        atomic_numbers = self.data.get('atomic_numbers')\n\t        if not atomic_numbers:\n\t            atomic_numbers = {super(MixSameAtomMol, self).atomic_numbers: self.conformer_counts}\n\t            self._set_atomic_numbers(atomic_numbers)\n\t        return atomic_numbers\n\t    @property\n\t    def atomic_number_counts(self):\n\t        \"\"\" the counts of series of atomic_numbers \"\"\"\n\t        return len(self.atomic_numbers)\n\t    @property\n", "    def atomic_numbers_array(self) -> np.ndarray:\n\t        \"\"\" the conformer corresponding attributes with array shape (counts_of_atoms, counts_of_conformers) \"\"\"\n\t        atomic_numbers_array = []\n\t        for atomic_numbers, conformer_counts in self.atomic_numbers.items():\n\t            atomic_numbers_array.append(np.array(atomic_numbers).reshape(1, -1).repeat(conformer_counts, axis=0))\n\t        return np.concatenate(atomic_numbers_array)\n\t    def iadd_accessible(self, other):\n\t        if self.atom_counts == other.atom_counts:\n\t            return True\n\t        return False\n", "    def to_mol(self):\n\t        \"\"\" Convert this MixSameAtomMol object to Molecule \"\"\"\n\t        if self.atomic_number_counts > 1:\n\t            raise AttributeError(\n\t                'Cannot convert the MixSameAtomMol with multipy atomic_number series to Molecule object\\n'\n\t                f'atomic_number_counts = {self.atomic_number_counts}'\n\t            )\n\t        return Molecule(_data=self.data)\n\tclass Atom(Wrapper, ABC):\n\t    \"\"\" The Atom wrapper for OBAtom class in openbabel \"\"\"\n", "    def __init__(\n\t            self,\n\t            ob_atom: ob.OBAtom = None,\n\t            **kwargs\n\t    ):\n\t        # Contain all data to reappear this Atom\n\t        self._data: Dict[str, Any] = {\n\t            'ob_obj': ob_atom if ob_atom else ob.OBAtom(),\n\t        }\n\t        self._set_attrs(**kwargs)\n", "    def __eq__(self, other):\n\t        if isinstance(other, Atom):\n\t            return self.ob_atom == other.ob_atom\n\t    def __hash__(self):\n\t        return hash(f'Atom({self.atomic_number})')\n\t    @property\n\t    def ob_atom(self):\n\t        return self._data['ob_obj']\n\t    @ob_atom.setter\n\t    def ob_atom(self, oba):\n", "        self._data['ob_obj'] = oba\n\t    def ob_atom_pop(self):\n\t        return self._data.pop('ob_obj')\n\t    def ob_atom_rewrap(self, ob_atom):\n\t        self._data['ob_obj'] = ob_atom\n\t    def __repr__(self):\n\t        return f\"Atom({self.label if self.label else self.symbol})\"\n\t    def _assign_formal_charge(self):\n\t        \"\"\" assign formal charge for this atom, the formal charge equal its valence minus its covalent valence \"\"\"\n\t        if self.is_polar_hydrogen:\n", "            self.formal_charge = 1\n\t        elif self.is_hydrogen or self.is_carbon:\n\t            self.formal_charge = 0\n\t        elif self.is_metal:\n\t            self.formal_charge = _stable_charges[self.symbol]\n\t        else:\n\t            self.formal_charge = -len([a for a in self.neighbours if a.is_polar_hydrogen])\n\t    @property\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        return {\n", "            '_mol': self._set_molecule,\n\t            'mol': self._set_molecule,\n\t            'molecule': self._set_molecule,\n\t            'atomic_number': self._set_atomic_number,\n\t            'symbol': self._set_atomic_symbol,\n\t            'coordinates': self._set_coordinate,\n\t            'formal_charge': self._set_formal_charge,\n\t            'partial_charge': self._set_partial_charge,\n\t            'label': self._set_label,\n\t            'ob_id': self._set_ob_id,\n", "            'spin_density': self._set_spin_density\n\t        }\n\t    def _set_atomic_number(self, atomic_number: int):\n\t        self.ob_atom.SetAtomicNum(int(atomic_number))\n\t    def _set_atomic_symbol(self, symbol):\n\t        self.ob_atom.SetAtomicNum(ob.GetAtomicNum(symbol))\n\t    def _set_coordinate(self, coordinates):\n\t        self.ob_atom.SetVector(*coordinates)\n\t    def _set_force_vector(self, force_vector: Union[Sequence, np.ndarray]):\n\t        if isinstance(force_vector, Sequence):\n", "            if all(isinstance(f, float) for f in force_vector):\n\t                force_vector = np.array(force_vector)\n\t            else:\n\t                ValueError('the give force_vector must float vector with dimension 3')\n\t        elif isinstance(force_vector, np.ndarray):\n\t            force_vector = force_vector.flatten()\n\t        else:\n\t            raise TypeError('the force vector should be Sequence or np.ndarray')\n\t        self._data['force_vector'] = force_vector\n\t    def _set_formal_charge(self, charge: float):\n", "        self.ob_atom.SetFormalCharge(charge)\n\t    def _set_ob_id(self, ob_id):\n\t        self.ob_atom.SetId(ob_id)\n\t    def _set_label(self, label):\n\t        label_data = ob.OBCommentData()\n\t        label_data.SetAttribute('label')\n\t        label_data.SetData(label)\n\t        self.ob_atom.CloneData(label_data)\n\t    def _set_molecule(self, molecule: Molecule):\n\t        self._data['mol'] = molecule\n", "    def _set_partial_charge(self, charge):\n\t        self.ob_atom.SetPartialCharge(charge)\n\t    def _set_spin_density(self, spin_density: float):\n\t        self._data['spin_density'] = spin_density\n\t    @property\n\t    def atom_type(self):\n\t        \"\"\" Some atom have specific type, such as Carbon with sp1, sp2 and sp3, marked as C1, C2 and C3 \"\"\"\n\t        return self.ob_atom.GetType()\n\t    def add_atom(self, symbol: str, bond_type=1, **atom_attrs):\n\t        \"\"\" add atom to link with this atom \"\"\"\n", "        new_atom = self.molecule.add_atom(symbol, **atom_attrs)\n\t        self.molecule.add_bond(self, new_atom, bond_type)\n\t    def add_hydrogen(self):\n\t        \"\"\" add hydrogen to the atom \"\"\"\n\t        self.add_atom('H')\n\t    @property\n\t    def atomic_number(self):\n\t        return self.ob_atom.GetAtomicNum()\n\t    def balance_hydrogen(self):\n\t        \"\"\" Remove or add hydrogens link with this atom, if the bond valence is not equal to the atomic valence \"\"\"\n", "        if self.is_heavy and not self.is_metal:  # Do not add or remove hydrogens to the metal, H or inert elements\n\t            while self.valence > self.stable_valence and self.neighbours_hydrogen:\n\t                self.molecule.remove_atoms(self.neighbours_hydrogen[0])\n\t            # add hydrogen, if the bond valence less than the atomic valence\n\t            while self.valence < self.stable_valence:\n\t                self.add_hydrogen()\n\t    @property\n\t    def bonds(self):\n\t        \"\"\" Get all bonds link with the atoms \"\"\"\n\t        return [self.molecule.bonds_dict[obb.GetId()] for obb in ob.OBAtomBondIter(self.ob_atom)]\n", "    @property\n\t    def coordinates(self) -> (float, float, float):\n\t        return self.ob_atom.GetX(), self.ob_atom.GetY(), self.ob_atom.GetZ()\n\t    @coordinates.setter\n\t    def coordinates(self, value):\n\t        self._set_coordinate(value)\n\t    @property\n\t    def coordinates_array(self) -> np.ndarray:\n\t        \"\"\" the array of coordinates \"\"\"\n\t        return np.array(self.coordinates)\n", "    def copy(self):\n\t        \"\"\" Make a copy of self \"\"\"\n\t        # Extract old data\n\t        data = self.data\n\t        data.pop('ob_obj')  # Remove the old OBAtom\n\t        # Remove molecule if the parent atom in a molecule\n\t        if self.molecule:\n\t            data.pop('mol')\n\t        # Copy the information contained in OBAtom\n\t        new_attrs = {\n", "            \"atomic_number\": self.atomic_number,\n\t            \"coordinates\": self.coordinates,\n\t            'partial_charge': self.partial_charge,\n\t        }\n\t        new_attrs.update(**data)\n\t        return Atom(**new_attrs)\n\t    @property\n\t    def covalent_valence(self):\n\t        \"\"\" the number of covalent electrons for this atoms \"\"\"\n\t        return sum(b.type if b.is_covalent else 0 for b in self.bonds)\n", "    def element_features(self, *feature_names) -> np.ndarray:\n\t        \"\"\" Retrieve the feature vector \"\"\"\n\t        atom_feature = periodic_table[self.symbol]\n\t        features = []\n\t        for feature_name in feature_names:\n\t            if feature_name == 'atomic_orbital':\n\t                features.extend(self._atomic_orbital_feature().values())\n\t            elif feature_name == 'atomic_number':\n\t                features.append(self.atomic_number)\n\t            else:\n", "                features.append(atom_feature[feature_name])\n\t        return np.array(features)\n\t    def _atomic_orbital_feature(self, outermost_layer=True, nonexistent_orbit=0):\n\t        \"\"\"    Calculating the feature about atomic orbital structures    \"\"\"\n\t        _atomic_orbital_structure_max = {\n\t            \"1s\": 2,\n\t            \"2s\": 2, \"2p\": 6,\n\t            \"3s\": 2, \"3p\": 6,\n\t            \"4s\": 2, \"3d\": 10, \"4p\": 6,\n\t            \"5s\": 2, \"4d\": 10, \"5p\": 6,\n", "            \"6s\": 2, \"4f\": 14, \"5d\": 10, \"6p\": 6,\n\t            \"7s\": 2, \"5f\": 14, \"6d\": 10, \"7p\": 6\n\t        }\n\t        atomic_orbital_structure = {\n\t            \"1s\": 0,\n\t            \"2s\": 0, \"2p\": 0,\n\t            \"3s\": 0, \"3p\": 0,\n\t            \"4s\": 0, \"3d\": 0, \"4p\": 0,\n\t            \"5s\": 0, \"4d\": 0, \"5p\": 0,\n\t            \"6s\": 0, \"4f\": 0, \"5d\": 0, \"6p\": 0,\n", "            \"7s\": 0, \"5f\": 0, \"6d\": 0, \"7p\": 0\n\t        }\n\t        # Calculating atomic orbital structure\n\t        residual_electron = self.atomic_number\n\t        n_osl = 0  # Principal qm number (n) of open shell layers (osl)\n\t        for orbital_name, men in _atomic_orbital_structure_max.items():  # max electron number (men)\n\t            # Update Principal qm number (n)\n\t            if orbital_name[1] == \"s\":\n\t                n_osl = int(orbital_name[0])\n\t            # Filled atomic orbital\n", "            if residual_electron - men >= 0:\n\t                residual_electron = residual_electron - men\n\t                atomic_orbital_structure[orbital_name] = men\n\t            else:\n\t                atomic_orbital_structure[orbital_name] = residual_electron\n\t                break\n\t        # Readout and return outermost electron structure\n\t        atom_orbital_feature = {\"atomic_number\": self.atomic_number, \"n_osl\": n_osl}\n\t        if outermost_layer:\n\t            diff_max_n = {\"s\": 0, \"p\": 0, \"d\": -1, \"f\": -2}\n", "            for layer, diff in diff_max_n.items():  # Angular momentum qm number (l)\n\t                electron_number = atomic_orbital_structure.get(f\"{n_osl + diff}{layer}\", nonexistent_orbit)\n\t                atom_orbital_feature[layer] = electron_number\n\t        else:\n\t            atom_orbital_feature.update(atomic_orbital_structure)\n\t        # return whole electron structure directly\n\t        return atom_orbital_feature\n\t    @property\n\t    def force_vector(self):\n\t        return self._data.get('force_vector', np.zeros(3, dtype=float))\n", "    @force_vector.setter\n\t    def force_vector(self, force_vector: Union[Sequence, np.ndarray]):\n\t        self._set_force_vector(force_vector)\n\t    @property\n\t    def formal_charge(self) -> float:\n\t        return self.ob_atom.GetFormalCharge()\n\t    @formal_charge.setter\n\t    def formal_charge(self, value: float):\n\t        self.ob_atom.SetFormalCharge(value)\n\t    @property\n", "    def has_unknown_bond(self) -> bool:\n\t        return any(not b.type for b in self.bonds)\n\t    @property\n\t    def hybridization(self):\n\t        \"\"\" The hybridization of this atom:\n\t        1 for sp, 2 for sp2, 3 for sp3, 4 for sq. planar, 5 for trig. bipy, 6 for octahedral \"\"\"\n\t        return self.ob_atom.GetHyb()\n\t    @property\n\t    def kwargs_attributes(self):\n\t        return tuple(self._attr_setters.keys())\n", "    @property\n\t    def ob_id(self):\n\t        return self.ob_atom.GetId()\n\t    @property\n\t    def ob_idx(self):\n\t        return self.ob_atom.GetIdx()\n\t    @property\n\t    def is_aromatic(self):\n\t        return self.ob_atom.IsAromatic()\n\t    @property\n", "    def is_carbon(self):\n\t        return self.atomic_number == 6\n\t    @property\n\t    def is_chiral(self):\n\t        return self.ob_atom.IsChiral()\n\t    @property\n\t    def is_hydrogen(self):\n\t        return self.ob_atom.GetAtomicNum() == 1\n\t    @property\n\t    def is_heavy(self):\n", "        \"\"\" Whether the atom is heavy atom \"\"\"\n\t        return not self.is_hydrogen\n\t    @property\n\t    def is_polar_hydrogen(self) -> bool:\n\t        \"\"\" Is this atom a hydrogen connected to a polar atom \"\"\"\n\t        return self.ob_atom.IsPolarHydrogen()\n\t    @property\n\t    def is_metal(self):\n\t        return self.ob_atom.IsMetal()\n\t    @property\n", "    def label(self):\n\t        label_data = self.ob_atom.GetData('label')\n\t        if label_data:\n\t            label_data = ob.toCommentData(label_data)\n\t            return label_data.GetValue()\n\t        else:\n\t            return self.symbol\n\t    @label.setter\n\t    def label(self, value):\n\t        self._set_label(value)\n", "    @property\n\t    def link_degree(self) -> int:\n\t        \"\"\" the degree of the atom in their parent molecule \"\"\"\n\t        return self.ob_atom.GetTotalDegree()\n\t    @property\n\t    def mass(self):\n\t        return self.ob_atom.GetAtomicMass()\n\t    @property\n\t    def max_bonds(self):\n\t        \"\"\" the max allowed bond order\"\"\"\n", "        return ob.GetMaxBonds(self.atomic_number)\n\t    @property\n\t    def molecule(self) -> Molecule:\n\t        return self._data.get('mol')\n\t    @molecule.setter\n\t    def molecule(self, mol: 'Molecule'):\n\t        self._data['mol'] = mol\n\t    @property\n\t    def neighbours_hydrogen(self) -> List['Atom']:\n\t        \"\"\" return all neigh hydrogen atoms \"\"\"\n", "        return [a for a in self.neighbours if a.is_hydrogen]\n\t    @property\n\t    def electronegativity(self):\n\t        return ob.GetElectroNeg(self.atomic_number)\n\t    @property\n\t    def neighbours(self) -> List['Atom']:\n\t        \"\"\" Get all atoms bond with this atom in same molecule \"\"\"\n\t        if self.molecule:\n\t            _ = self.molecule.atoms  # update the atoms dict\n\t            return [self.molecule.atoms_dict[ob_atom.GetId()] for ob_atom in ob.OBAtomAtomIter(self.ob_atom)]\n", "        else:\n\t            return []\n\t    @property\n\t    def neighbours_label(self) -> List[str]:\n\t        \"\"\" return all neighbours labels \"\"\"\n\t        return [a.label for a in self.neighbours]\n\t    @property\n\t    def neighbours_position(self) -> Generator[Tuple[Union['Atom', np.ndarray]], None, None]:\n\t        \"\"\" Retrieve the relative position of neigh atoms, assign this atom as the origin \"\"\"\n\t        for neigh_atom in self.neighbours:\n", "            yield neigh_atom, neigh_atom.coordinates_array - self.coordinates_array\n\t    @property\n\t    def partial_charge(self):\n\t        return self.ob_atom.GetPartialCharge()\n\t    @partial_charge.setter\n\t    def partial_charge(self, value: float):\n\t        # This is necessary to take effect to the assignment.\n\t        # the reason is unknown\n\t        self.ob_atom.GetPartialCharge()\n\t        self._set_partial_charge(value)\n", "    def remove_hydrogen(self):\n\t        \"\"\" remove the first atom linking with the atoms \"\"\"\n\t        hydrogens = self.neighbours_hydrogen\n\t        if hydrogens:\n\t            self.molecule.remove_atoms(hydrogens[0])\n\t    def remove_hydrogens(self):\n\t        \"\"\" Remove all hydrogens linking with the atom\"\"\"\n\t        hydrogens = self.neighbours_hydrogen\n\t        self.molecule.remove_atoms(*hydrogens)\n\t    def replace_attr_data(self, data: Dict):\n", "        \"\"\" Replace the core data dict directly \"\"\"\n\t        self._data = data\n\t    def set(self, **kwargs):\n\t        \"\"\"\n\t        Set atom attributes by kwargs\n\t        Kwargs:\n\t            atomic_number(int): set atomic number\n\t            symbol(str): set atomic symbol\n\t            coordinates(Sequence, numpy.ndarray): coordinates of the atom\n\t            partial_charge:\n", "            label:\n\t            spin_density:\n\t        \"\"\"\n\t        self._set_attrs(**kwargs)  # set attributes\n\t    @property\n\t    def spin_density(self):\n\t        return self._data.get('spin_density', 0.0)\n\t    @spin_density.setter\n\t    def spin_density(self, spin_density: float):\n\t        self._set_spin_density(spin_density)\n", "    @property\n\t    def stable_valence(self) -> int:\n\t        if self.is_metal:\n\t            return 0\n\t        elif self.symbol == 'S':\n\t            if not [a for a in self.neighbours if a.symbol == 'O']:\n\t                return 2\n\t            elif self.covalent_valence <= 2:\n\t                return 2\n\t            elif self.covalent_valence <= 4:\n", "                return 4\n\t            else:\n\t                return 6\n\t        elif self.symbol == 'S':\n\t            if not [a for a in self.neighbours if a.symbol == 'O']:\n\t                return 3\n\t            elif self.covalent_valence == 0:\n\t                return 0\n\t            elif self.covalent_valence == 1:\n\t                return 1\n", "            elif self.covalent_valence <= 3:\n\t                return 3\n\t            else:\n\t                return 5\n\t        else:\n\t            return abs(_stable_charges[self.symbol])\n\t    @property\n\t    def symbol(self) -> str:\n\t        return ob.GetSymbol(self.atomic_number)\n\t    @property\n", "    def valence(self) -> int:\n\t        # if self.has_unknown_bond:\n\t        #     raise AttributeError('Cannot calculate the bond valence, because of the existence of unknown bonds')\n\t        return sum(b.type if b.type else 0 if b.is_covalent else 1 for b in self.bonds)\n\tclass PseudoAtom(Wrapper, ABC):\n\t    \"\"\" A data wrapper for pseudo atom \"\"\"\n\t    def __init__(self, symbol: str, mass: float, coordinates: Union[Sequence, np.ndarray], **kwargs):\n\t        if isinstance(coordinates, Sequence):\n\t            coordinates = np.array(coordinates)\n\t        assert isinstance(coordinates, np.ndarray) and coordinates.shape == (3,)\n", "        self._data = dict(symbol=symbol, mass=mass, coordinates=coordinates, **kwargs)\n\t    def __eq__(self, other):\n\t        if isinstance(other, PseudoAtom):\n\t            return self.symbol == other.symbol\n\t        return False\n\t    def __hash__(self):\n\t        return hash(f'PseudoAtom({self.symbol})')\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        return {}\n\t    def __repr__(self):\n", "        return f'PseudoAtom({self.symbol})'\n\t    def __dir__(self) -> Iterable[str]:\n\t        return list(self._data.keys())\n\t    def __getattr__(self, item):\n\t        return self._data.get(item, 0.)\n\tclass Bond(Wrapper, ABC):\n\t    \"\"\"\"\"\"\n\t    def __init__(self, ob_bond: ob.OBBond, _mol: Molecule):\n\t        self._data = {\n\t            'ob_obj': ob_bond,\n", "            'mol': _mol\n\t        }\n\t    def __repr__(self):\n\t        return f\"Bond({self.atoms[0].label}, {self.atoms[1].label}, {self.type_name})\"\n\t    def __eq__(self, other: 'Bond'):\n\t        if isinstance(other, Bond):\n\t            return self.pair_key == other.pair_key\n\t    def __hash__(self):\n\t        return hash(self.pair_key)\n\t    def __getitem__(self, item):\n", "        return self._data.get(item)\n\t    def __setitem__(self, key, value):\n\t        if key in super()._protected_data:\n\t            raise KeyError('the protected attr cannot be set be __setitem__ method')\n\t        self._data[key] = value\n\t    @property\n\t    def _protected_data(self):\n\t        return 'ob_obj', 'mol'\n\t    @property\n\t    def ob_bond(self):\n", "        return self._data['ob_obj']\n\t    def ob_bond_pop(self):\n\t        return self._data.pop('ob_obj')\n\t    def ob_bond_rewrap(self, ob_bond):\n\t        self._data['ob_obj'] = ob_bond\n\t    @property\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        return {\n\t        }\n\t    @property\n", "    def atom1(self) -> Atom:\n\t        return self.molecule.atoms_dict[self.ob_atom1_id]\n\t    @property\n\t    def atom2(self) -> Atom:\n\t        return self.molecule.atoms_dict[self.ob_atom2_id]\n\t    @property\n\t    def atomic_number1(self):\n\t        return self.ob_bond.GetBeginAtom().GetAtomicNum()\n\t    @property\n\t    def atomic_number2(self):\n", "        return self.ob_bond.GetEndAtom().GetAtomicNum()\n\t    @property\n\t    def atoms(self):\n\t        return self.atom1, self.atom2\n\t    @property\n\t    def begin_end_ob_id(self) -> (int, int):\n\t        return self.ob_bond.GetBeginAtom().GetId(), self.ob_bond.GetEndAtom().GetId()\n\t    @property\n\t    def begin_end_atomic_number(self):\n\t        return self.ob_bond.GetBeginAtom().GetAtomicNum(), self.ob_bond.GetEndAtom().GetAtomicNum()\n", "    @property\n\t    def is_covalent(self) -> bool:\n\t        return not self.ob_atom1.IsMetal() and not self.ob_atom2.IsMetal()\n\t    @property\n\t    def ideal_length(self):\n\t        return self.ob_bond.GetEquibLength()\n\t    @property\n\t    def ob_id(self):\n\t        return self.ob_bond.GetId()\n\t    @property\n", "    def ob_idx(self):\n\t        return self.ob_bond.GetIdx()\n\t    @property\n\t    def ob_atom1(self):\n\t        return self.ob_bond.GetBeginAtom()\n\t    @property\n\t    def ob_atom2(self):\n\t        return self.ob_bond.GetEndAtom()\n\t    @property\n\t    def ob_atom1_id(self):\n", "        return self.ob_atom1.GetId()\n\t    @property\n\t    def ob_atom2_id(self):\n\t        return self.ob_atom2.GetId()\n\t    @property\n\t    def pair_key(self):\n\t        \"\"\" Get the bond pair key, a string that show combination of element of end atoms and bond type,\n\t        where, the atomic symbol with lower atomic number is placed in the first, the higher in the last\"\"\"\n\t        if self.atomic_number1 <= self.atomic_number2:\n\t            return self.atomic_number1, self.type, self.atomic_number2\n", "        return self.atomic_number2, self.type, self.atomic_number1\n\t    @property\n\t    def length(self):\n\t        return self.ob_bond.GetLength()\n\t    @property\n\t    def molecule(self):\n\t        return self._data['mol']\n\t    @molecule.setter\n\t    def molecule(self, mol: Molecule):\n\t        self._data['mol'] = mol\n", "    @property\n\t    def type_name(self):\n\t        return _type_bond[self.type]\n\t    @property\n\t    def type(self):\n\t        return self.ob_bond.GetBondOrder()\n\tclass Angle(MolLinker, ABC):\n\t    \"\"\" Data wrapper of angle in molecule \"\"\"\n\t    def __init__(self, mol: Molecule, *ob_ids: int):\n\t        assert len(ob_ids) == 3\n", "        super().__init__(mol, ob_ids[1], ob_ids[0], ob_ids[2])\n\t    @property\n\t    def _degree(self) -> float:\n\t        return round(self.mol.ob_mol.GetAngle(*self.ob_atoms), 3)\n\t    @property\n\t    def degree(self) -> float:\n\t        return self._degree\n\tclass Torsion(MolLinker):\n\t    \"\"\"\"\"\"\n\t    @property\n", "    def _degree(self) -> float:\n\t        return self.mol.ob_mol.GetTorsion(*self.ob_atoms)\n\t    @property\n\t    def a(self) -> Atom:\n\t        \"\"\" The first atom \"\"\"\n\t        return self.mol.atoms_dict[self.ob_atoms[0].GetId()]\n\t    @property\n\t    def b(self) -> Atom:\n\t        \"\"\" The second atom \"\"\"\n\t        return self.mol.atoms_dict[self.ob_atoms[1].GetId()]\n", "    @property\n\t    def c(self) -> Atom:\n\t        \"\"\" The third atom \"\"\"\n\t        return self.mol.atoms_dict[self.ob_atoms[2].GetId()]\n\t    @property\n\t    def d(self) -> Atom:\n\t        \"\"\" The fourth atom \"\"\"\n\t        return self.mol.atoms_dict[self.ob_atoms[3].GetId()]\n\t    @property\n\t    def torsion(self) -> float:\n", "        return self._degree\n\tclass Crystal(Wrapper, ABC):\n\t    \"\"\"\"\"\"\n\t    _lattice_type = (\n\t        'Undefined', 'Triclinic', 'Monoclinic', 'Orthorhombic', 'Tetragonal', 'Rhombohedral', 'Hexagonal', 'Cubic'\n\t    )\n\t    def __init__(self, ob_unitcell: ob.OBUnitCell = None, **kwargs):\n\t        self._data: Dict[str, Any] = {\n\t            'OBUnitCell': ob_unitcell if ob_unitcell else ob.OBUnitCell(),\n\t        }\n", "        self._set_attrs(**kwargs)\n\t    def __repr__(self):\n\t        return f'Crystal({self.lattice_type}, {self.space_group}, {self.molecule})'\n\t    @property\n\t    def ob_unit_cell(self) -> ob.OBUnitCell:\n\t        return self._data.get('OBUnitCell')\n\t    @staticmethod\n\t    def _matrix_to_params(matrix: np.ndarray):\n\t        \"\"\" Covert the cell matrix to cell parameters: a, b, c, alpha, beta, gamma \"\"\"\n\t        va, vb, vc = matrix\n", "        a = sum(va ** 2) ** 0.5\n\t        b = sum(vb ** 2) ** 0.5\n\t        c = sum(vc ** 2) ** 0.5\n\t        alpha = np.arccos(np.dot(va, vb) / (a * b)) / np.pi * 180\n\t        beta = np.arccos(np.dot(va, vc) / (a * c)) / np.pi * 180\n\t        gamma = np.arccos(np.dot(vb, vc) / (b * c)) / np.pi * 180\n\t        return a, b, c, alpha, beta, gamma\n\t    def _set_molecule(self, molecule: Molecule):\n\t        if molecule.crystal and isinstance(molecule.crystal, Crystal):\n\t            print(AttributeError(\"the Molecule have been stored in a Crystal, \"\n", "                                 \"can't save the same Molecule into two Crystals\"))\n\t        else:\n\t            self._data['mol'] = molecule\n\t    def _set_space_group(self, space_group: str):\n\t        self.ob_unit_cell.SetSpaceGroup(space_group)\n\t    @property\n\t    def _attr_setters(self) -> Dict[str, Callable]:\n\t        return {\n\t            'mol': self._set_molecule,\n\t            'molecule': self._set_molecule,\n", "            'space_group': self._set_space_group\n\t        }\n\t    @property\n\t    def lattice_type(self) -> str:\n\t        return self._lattice_type[self.ob_unit_cell.GetLatticeType()]\n\t    @property\n\t    def lattice_params(self) -> np.ndarray[2, 3]:\n\t        a = self.ob_unit_cell.GetA()\n\t        b = self.ob_unit_cell.GetB()\n\t        c = self.ob_unit_cell.GetC()\n", "        alpha = self.ob_unit_cell.GetAlpha()\n\t        beta = self.ob_unit_cell.GetBeta()\n\t        gamma = self.ob_unit_cell.GetGamma()\n\t        return np.array([[a, b, c], [alpha, beta, gamma]])\n\t    @property\n\t    def molecule(self) -> Molecule:\n\t        return self._data.get('mol')\n\t    @molecule.setter\n\t    def molecule(self, mol: Molecule):\n\t        self._data['mol'] = mol\n", "    @property\n\t    def pack_molecule(self) -> Molecule:\n\t        mol = self.molecule  # Get the contained Molecule\n\t        if not mol:  # if you get None\n\t            print(RuntimeWarning(\"the crystal doesn't contain any Molecule!\"))\n\t        pack_mol = mol.copy()\n\t        self.ob_unit_cell.FillUnitCell(pack_mol.ob_mol)  # Full the crystal\n\t        pack_mol._reorganize_atom_indices()  # Rearrange the atom indices.\n\t        return pack_mol\n\t    def set_lattice(\n", "            self,\n\t            a: float, b: float, c: float,\n\t            alpha: float, beta: float, gamma: float\n\t    ):\n\t        self.ob_unit_cell.SetData(a, b, c, alpha, beta, gamma)\n\t    def set_vectors(\n\t            self,\n\t            va: Union[np.ndarray, Sequence],\n\t            vb: Union[np.ndarray, Sequence],\n\t            vc: Union[np.ndarray, Sequence]\n", "    ):\n\t        \"\"\"\"\"\"\n\t        vectors = [va, vb, vc]\n\t        matrix = np.array(vectors)\n\t        self.set_matrix(matrix)\n\t    def set_matrix(self, matrix: np.ndarray):\n\t        \"\"\" Set cell matrix for the crystal \"\"\"\n\t        if matrix.shape != (3, 3):\n\t            raise AttributeError('the shape of cell_vectors should be [3, 3]')\n\t        cell_params = map(float, self._matrix_to_params(matrix))\n", "        self.ob_unit_cell.SetData(*cell_params)\n\t    @property\n\t    def space_group(self):\n\t        space_group = self.ob_unit_cell.GetSpaceGroup()\n\t        if space_group:\n\t            return space_group.GetHMName()\n\t        else:\n\t            return None\n\t    @space_group.setter\n\t    def space_group(self, value: str):\n", "        self._set_space_group(value)\n\t    @property\n\t    def volume(self):\n\t        return self.ob_unit_cell.GetCellVolume()\n\t    @property\n\t    def vector(self):\n\t        v1, v2, v3 = self.ob_unit_cell.GetCellVectors()\n\t        return np.array([\n\t            [v1.GetX(), v1.GetY(), v1.GetZ()],\n\t            [v2.GetX(), v2.GetY(), v2.GetZ()],\n", "            [v3.GetX(), v3.GetY(), v3.GetZ()]\n\t        ])\n\t    def zeo_plus_plus(self):\n\t        \"\"\" TODO: complete the method after define the Crystal and ZeoPlusPlus tank \"\"\"\n\tclass ZMatrix:\n\t    \"\"\"\n\t    Represent the Z-Matrix(internal coordinates) in a Molecule.\n\t    The Z-Matrix of a Molecule objects could be accessed by its attribute `z_matrix`\n\t    Each element of Z-Matrix, like start atom, radium, angle, dihedral could be accessed by subscript.\n\t    Liking ZMatrix['r10'], it gets a radium start from 10th atoms. the subscripts are encode to be strings\n", "    with 's'(start atom), 'r'(radium), 'a'(angle), 'd'(dihedral) as the first header, and the number of atoms\n\t    as the follower. It should be noted that the number of atoms start from 1 instead of the 0, in general\n\t    it's the ob_id - 1\n\t    Examples:\n\t        mol = hp.Molecule.read_from(...)\n\t        zmat = mol.z_matrix\n\t        print(zmat['s10'], zmat['r10'], zmat['a10'], zmat['d10'])\n\t    \"\"\"\n\t    class ZMatrixItem:\n\t        def __init__(self, key: str, item: Union[Atom, Bond, Angle, Torsion], value: float):\n", "            self.key = key\n\t            self.item = item\n\t            self.value = value\n\t        def __repr__(self):\n\t            return f\"{self.item.__class__.__name__}({self.key}, \" \\\n\t                   f\"{self.item_value if isinstance(self.item_value, int) else round(self.item_value, 3)})\"\n\t        @property\n\t        def item_value(self) -> Union[float, int]:\n\t            if isinstance(self.item, Atom):\n\t                return self.item.ob_id\n", "            elif isinstance(self.item, Bond):\n\t                return self.item.length\n\t            elif isinstance(self.item, Angle):\n\t                return self.item.degree\n\t            elif isinstance(self.item, Torsion):\n\t                return self.item.torsion\n\t    def __init__(self, mol: Molecule):\n\t        self.mol = mol\n\t        self._coords = {}\n\t        self._coord_line = {}\n", "        self._update_coords()\n\t    def __repr__(self):\n\t        return f'InternalCoordinates({len(self)})'\n\t    def __str__(self):\n\t        return '\\n'.join(' '.join(str(item) for item in line) for _, line in self)\n\t    def __len__(self):\n\t        return len(self._coord_line)\n\t    def __iter__(self):\n\t        return iter(self._coord_line.items())\n\t    def __getitem__(self, item):\n", "        self._update_coords()\n\t        return self._coords[item]\n\t    def __setitem__(self, key, value):\n\t        \"\"\" Set the Z-Matrix, TODO: this method do not work now \"\"\"\n\t        ob_internal_coords = list(self.mol.ob_mol.GetInternalCoord())\n\t        head, line_count = key[0], int(key[1:])\n\t        # Check the given key\n\t        if head not in ('r', 'a', 'd') or line_count >= len(ob_internal_coords):\n\t            raise KeyError(f'cannot not set the attr {key}, it is non-existent or irregular')\n\t        elif line_count == 2 and head in ('a', 'd'):\n", "            raise KeyError(f'cannot not set the attr {key}, it is non-existent or irregular')\n\t        elif line_count == 3 and head == 'd':\n\t            raise KeyError(f'cannot not set the attr {key}, it is non-existent or irregular')\n\t        # Get the original OBInternalCoord\n\t        set_coord: ob.OBInternalCoord = ob_internal_coords[line_count]\n\t        # Replace the value of specified item\n\t        kwargs = {\n\t            'a': set_coord._a,\n\t            'b': set_coord._b,\n\t            'c': set_coord._c,\n", "            'dst': value if head == 'r' else set_coord._dst,\n\t            'ang': value if head == 'a' else set_coord._ang,\n\t            'tor': value if head == 'd' else set_coord._tor\n\t        }\n\t        ob_internal_coords[line_count] = ob.OBInternalCoord(**kwargs)\n\t        # Set the parent molecule\n\t        self.mol.ob_mol.SetInternalCoord(ob_internal_coords)\n\t    def _update_coords(self):\n\t        \"\"\" Update the internal coordinates data \"\"\"\n\t        coord_lines, coords = {}, {}\n", "        atoms = self.mol.atoms\n\t        for i, line in enumerate(self.mol.ob_mol.GetInternalCoord()):\n\t            # ignore the first item, it's None\n\t            if not line:\n\t                continue\n\t            atom = atoms[i - 1]\n\t            coords[f's{i}'] = self.ZMatrixItem(f's{i}', atom, i - 1)\n\t            coord_line = coord_lines.setdefault(i, [])\n\t            coord_line.append(coords[f's{i}'])\n\t            # atom_radial, atom_angle, atom_dihedral, radial, angle, dihedral\n", "            ar, aa, ad, r, a, d = line._a, line._b, line._c, line._dst, line._ang, line._tor\n\t            if isinstance(ar, ob.OBAtom):\n\t                assert isinstance(r, float)\n\t                coords[f'r{i}'] = self.ZMatrixItem(\n\t                    f'r{i}', self.mol.bond(atom.ob_id, ar.GetId()), r\n\t                )\n\t                coord_line.append(coords[f'r{i}'])\n\t            if isinstance(aa, ob.OBAtom):\n\t                assert isinstance(a, float)\n\t                coords[f'a{i}'] = self.ZMatrixItem(\n", "                    f'a{i}', self.mol.angle(atom.ob_id, ar.GetId(), aa.GetId()), a\n\t                )\n\t                coord_line.append(coords[f'a{i}'])\n\t            if isinstance(ad, ob.OBAtom):\n\t                assert isinstance(d, float)\n\t                coords[f'd{i}'] = self.ZMatrixItem(\n\t                    f'd{i}', self.mol.torsion(atom.ob_id, ar.GetId(), aa.GetId(), ad.GetId()), d\n\t                )\n\t                coord_line.append(coords[f'd{i}'])\n\t        self._coord_line = coord_lines\n", "        self._coords = coords\n\timport hotpot.bundle as bd\n\tfrom hotpot._io import Dumper, Parser\n\tfrom hotpot.tanks.cc import PairBundle\n\tfrom hotpot.tanks.deepmd import DeepSystem\n"]}
{"filename": "hotpot/tmo.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : tmo.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/5/9\n\t@Time   : 5:26\n\t\"\"\"\n\tfrom typing import Sequence\n\timport thermo as tmo\n", "import thermo.chemical as cmc\n\tclass Thermo:\n\t    \"\"\" To determine thermodynamical properties of Csubstance \"\"\"\n\t    def __init__(self, mol, **kwargs):\n\t        \"\"\"\"\"\"\n\t        self._data = {\n\t            'mol': mol\n\t        }\n\t        self._data.update(kwargs)\n\t        self._init_property()  # initialization\n", "    def __dir__(self) -> Sequence[str]:\n\t        d = set(self.__dict__.keys())\n\t        chem = self.chem\n\t        eos = self.eos\n\t        if chem:\n\t            d.update(dir(chem))\n\t        if eos:\n\t            d.update(dir(eos))\n\t        return list(d)\n\t    def __getattr__(self, item):\n", "        chem = self._data.get('chem')  # Get chemical substance\n\t        eos = self._data.get('eos_')  # Get equation of state\n\t        if chem:\n\t            attr = getattr(chem, item, None)\n\t            if attr:\n\t                return attr\n\t        if eos:\n\t            attr = getattr(eos, item, None)\n\t            if attr:\n\t                return attr\n", "        return None\n\t    def _init_property(self):\n\t        # Retrieve the substance data by molecule smiles\n\t        T = self._data.get('T')\n\t        P = self._data.get('P')\n\t        V = self._data.get('V')\n\t        chem_kwargs = {}\n\t        if T:\n\t            chem_kwargs['T'] = T\n\t        if P:\n", "            chem_kwargs['P'] = P\n\t        try:\n\t            chem = cmc.Chemical(self.mol.inchi, **chem_kwargs)\n\t            Tc = chem.Tc\n\t            Pc = chem.Pc\n\t            omega = chem.omega\n\t            self._data['chem'] = chem\n\t        except ValueError:\n\t            Tc = self._data.get('Tc')\n\t            Pc = self._data.get('Pc')\n", "            omega = self._data.get('omega')\n\t        # Retrieve the state of equation for thermo.eos module\n\t        eos_name = self._data.get('eos', 'PR')\n\t        eos = getattr(tmo.eos, 'PR')\n\t        if eos and Tc and Pc and omega:\n\t            # if the eos and the critical params are all be retrieved, build eos\n\t            if T and P:\n\t                self._data['eos_'] = eos(T=T, P=P, Tc=Tc, Pc=Pc, omega=omega)\n\t            elif T and V:\n\t                self._data['eos_'] = eos(T=T, V=V, Tc=Tc, Pc=Pc, omega=omega)\n", "            elif P and T:\n\t                self._data['eos_'] = eos(P=P, V=V, Tc=Tc, Pc=Pc, omega=omega)\n\t            else:\n\t                self._data['eos_'] = eos(T=298.15, P=101325, Tc=Tc, Pc=Pc, omega=omega)\n\t    @property\n\t    def chem(self):\n\t        return self._data.get('chem')\n\t    @property\n\t    def eos(self):\n\t        return self._data.get('eos_')\n", "    @property\n\t    def mol(self):\n\t        return self._data.get('mol')\n\t    @property\n\t    def Tc(self):\n\t        return self.chem.Tc\n\t    @property\n\t    def mu_l(self):\n\t        \"\"\" TODO: chemical potential in certain state \"\"\"\n\t        return\n"]}
{"filename": "hotpot/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : __init__.py.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/14\n\t@Time   : 4:06\n\t\"\"\"\n\timport os\n\timport sys\n", "sys.path.append(os.path.abspath(os.path.dirname(__file__)))\n\thp_root = os.path.abspath(os.path.dirname(__file__))\n\tdata_root = os.path.abspath(os.path.join(hp_root, 'data'))\n\tfrom hotpot.cheminfo import Molecule\n\tfrom hotpot.bundle import MolBundle\n\t__version__ = '0.3.1.0'\n"]}
{"filename": "hotpot/tools.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : utils.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/29\n\t@Time   : 0:30\n\tNotes:\n\t    Private common functions\n\t\"\"\"\n", "from os import PathLike\n\tfrom pathlib import Path\n\tfrom typing import *\n\tclass PathNotExistError(Exception):\n\t    \"\"\" Raise when can't find a file or dir \"\"\"\n\tdef check_path(\n\t        path: Optional[Union[str, PathLike]],\n\t        none_allowed: Optional[bool] = True,\n\t        check_exist: Optional[bool] = False,\n\t        mkdir: Optional[bool] = False,\n", "        file_or_dir: Optional[Literal['file', 'dir']] = None\n\t) -> Union[NoReturn, Path]:\n\t    \"\"\"\n\t    Check whether the given path is valid and process str path to a Path object.\n\t    Args:\n\t        path (Optional[Union[str, PathLike]]): The path to be checked.\n\t        none_allowed (Optional[bool], default=True): Whether to allow the path to be None.\n\t        check_exist (Optional[bool], default=False): Whether to check if the path exists.\n\t        mkdir (Optional[bool], default=False): Whether to create the directory if it doesn't exist.\n\t        file_or_dir (Optional[Literal['file', 'dir']], default=None): Whether to check if the path is a file or directory.\n", "    Returns:\n\t        Union[None, Path]: The processed path as a Path object or None if allowed and given as None.\n\t    Raises:\n\t        ValueError: If the path is None and not allowed, or if `mkdir=True` and `file_or_dir='file'`.\n\t        TypeError: If the given path is neither a str nor a PathLike object.\n\t        PathNotExistError: If the path doesn't exist and check_exist is True or mkdir is False.\n\t        IsADirectoryError: If the path is a directory and file_or_dir is 'file'.\n\t        NotADirectoryError: If the path is a file and file_or_dir is 'dir'\n\t    \"\"\"\n\t    # If get the None, keep it or raise!\n", "    if not path:\n\t        if none_allowed:\n\t            return path\n\t        else:\n\t            raise ValueError(\"the path shouldn't to be None\")\n\t    # Check the given path type and transform the str path to Path\n\t    if isinstance(path, str):\n\t        path = Path(path)\n\t    elif not isinstance(path, PathLike):\n\t        raise TypeError(f'the given path should be str or PathLick, instead of{type(path)}')\n", "    is_exist = path.exists() if (check_exist or mkdir or file_or_dir) else None\n\t    if is_exist is False:\n\t        if file_or_dir == 'file' and mkdir:\n\t            raise ValueError(\"the mkdir=True and file_or_dir='file' can't to be set simultaneously!\")\n\t        if mkdir:\n\t            path.mkdir()\n\t        else:\n\t            raise PathNotExistError(f'the path {str(path)} not exist!')\n\t    if file_or_dir == 'file' and not path.is_file():\n\t        raise IsADirectoryError(f'{str(path)} is a directory!')\n", "    if file_or_dir == 'dir' and not path.is_dir():\n\t        raise NotADirectoryError(f'{str(path)} is a file!')\n\t    return path\n"]}
{"filename": "hotpot/_io.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : _io.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/14\n\t@Time   : 4:18\n\t\"\"\"\n\timport os\n\timport re\n", "from pathlib import Path\n\tfrom os import PathLike\n\tfrom typing import *\n\tfrom abc import ABCMeta, abstractmethod\n\tfrom copy import copy\n\timport io\n\tfrom io import IOBase\n\tfrom openbabel import pybel\n\timport cclib\n\timport numpy as np\n", "import hotpot.cheminfo as ci\n\tfrom hotpot.tanks.deepmd import DeepSystem\n\t\"\"\"\n\tNotes:\n\tThis module contain Classes to IO between the Molecule object and various file formats.\n\tthe main classes are:\n\t    - Reader: from Formatted files to Molecule, called by the Molecule.read() method.\n\t    - Writer: from Molecule to formatted files, called by the Molecule.write() method.\n\t    - Dumper: from Molecule to formatted Literals(str or bytes), called by the Molecule.dump() method.\n\t    - Parser: from formatted Literals to the Molecule obj, called by the Molecule.parse() method.\n", "all of them are inherit from the _IOBase class.\n\tFor the implementation of dump and parse:\n\t    - some third-part package are used, like openbabel, cclib and so on.\n\t    - there are some self own IO function be defined too.\n\t    - the user also custom and register to the Dumper and Parser too.\n\tWhen implementing the IO: \n\t    1) the IO class will firstly check whether a custom IO function is defined and register, if the IO function \n\t        are defined and registered, the IO are implemented by the registered.\n\t    2) else, the IO class will try to call, in turn, try to call some third-part packages,\n\t    3) finally, if all third-part packages fail to complement IO, Raise the IOError !!!\n", "Following the steps to customise your IO function:\n\t    1) determine which IO operation(read, write, dump or parse) you want to define， import the relevant IO class\n\t        into your own python modules.\n\t    2) define the IO function which customises your IO implementation, the custom function should meet the base\n\t        requirements demand by the corresponding IO class. When the IO functions are defined, applying the\n\t        `IOClass`.register decorator to register the IO function into the `IOClass`, the `IOClass`.register should\n\t        pass some args. This is a example:\n\t        --------------------------------- Example ------------------------------------\n\t        Examples:\n\t        # importing the relevant IO classes\n", "        from hotpot.io import Dumper, Reader\n\t        # define and register a read function\n\t        # the fmt defined the format key to handle the custom IO function\n\t        # the types defined where the IO function will be applied, pre: preprocess, io: main io, post: postprocess\n\t        @Reader.register(fmt='the/format/key', types='pre|io|post')\n\t        def my_read_func(*arg, **kwargs)  # the args should meet the Reader demand\n\t            ...\n\t        # define and register a dump function\n\t        def my_dump_func(*arg, **kwargs) # the args should meet the Dumper demand\n\t            ...\n", "        ---------------------------------- END ---------------------------------------\n\t\"\"\"\n\t# Define custom Exceptions\n\tclass IOEarlyStop(BaseException):\n\t    \"\"\" monitor the situation that the IO should early stop and return None and the IO result \"\"\"\n\t# Define the IO function types\n\tIOFuncPrefix = Literal['pre', 'io', 'post']\n\tIOStream = Union[IOBase, str, bytes]\n\tdef _parse_lmp_data_script(script: str):\n\t    \"\"\" Parse the LAMMPS data script to two dict, header and body\"\"\"\n", "    # Define_body_title\n\t    bt_name = (\n\t        # atom-property sections\n\t        'Atoms', 'Velocities', 'Masses', 'Ellipsoids', 'Lines', 'Triangles', 'Bodies',\n\t        # molecular topology sections\n\t        'Bonds', 'Angles', 'Dihedrals', 'Impropers',\n\t        # force field sections\n\t        'Pair Coeffs', 'PairIJ Coeffs', 'Bond Coeffs', 'Angle Coeffs', 'Dihedral Coeffs', 'Improper Coeffs',\n\t        # class 2 force field sections\n\t        'BondBond Coeffs', 'BondAngle Coeffs', 'MiddleBondTorsion Coeffs', 'EndBondTorsion Coeffs',\n", "        'AngleTorsion Coeffs', 'AngleAngleTorsion Coeffs', 'BondBond13 Coeffs', 'AngleAngle Coeffs'\n\t    )\n\t    # Compile the body and header pattern\n\t    header_title = re.compile(r'[a-z]+')\n\t    header_int = re.compile(r'[0-9]+')\n\t    header_float = re.compile(r'-?[0-9]+\\.[0-9]*')\n\t    lines = script.split('\\n')\n\t    body_split_point = [i for i, lin in enumerate(lines) if lin in bt_name] + [len(lines)]\n\t    # Extract header info\n\t    headers = {}\n", "    for line in lines[1:body_split_point[0]]:\n\t        line = line.strip()\n\t        if line:\n\t            ht = ' '.join(header_title.findall(line))\n\t            hvs = line[:line.find(ht)].strip()  # header values\n\t            header_values = []\n\t            for hv in re.split(r'\\s+', hvs):\n\t                if header_int.fullmatch(hv):\n\t                    header_values.append(int(hv))\n\t                elif header_float.fullmatch(hv):\n", "                    header_values.append(float(hv))\n\t                else:\n\t                    raise ValueError('the header line not match well')\n\t            headers[ht] = header_values\n\t    # Extract bodies info\n\t    bodies = {}\n\t    for sl_idx, el_idx in zip(body_split_point[:-1], body_split_point[1:]):\n\t        bt = lines[sl_idx].strip()  # body title\n\t        bc = [line.strip() for line in lines[sl_idx+1: el_idx] if line.strip()]  # body content\n\t        bodies[bt] = bc\n", "    return lines[0], headers, bodies\n\tclass Register:\n\t    \"\"\"\n\t    Register the IO function for Dumper, Parser or so on\n\t    \"\"\"\n\t    def __init__(self):\n\t        # these dicts are container to store the custom io functions\n\t        # the keys of the dict are serve as the handle to get the mapped io functions(the values)\n\t        self.pre_methods = {}\n\t        self.io_methods = {}\n", "        self.post_methods = {}\n\t    def __repr__(self):\n\t        return f\"Register:\\n\" + \\\n\t               f\"pre_method:\\n\" + \\\n\t               f\"\\n\\t\".join([n for n in self.pre_methods]) + \"\\n\\n\" + \\\n\t               f\"io methods:\\n\" + \\\n\t               f\"\\n\\t\".join([n for n in self.io_methods]) + '\\n\\n' + \\\n\t               f\"post methods:\\n\" + \\\n\t               f\"\\n\\t\".join([n for n in self.post_methods])\n\t    def __call__(self, io_cls: type, fmt: str, prefix: IOFuncPrefix):\n", "        \"\"\"\n\t        To register any function as a dumper or a postprocess to convert mol to formats\n\t        Args:\n\t            fmt:\n\t            prefix:\n\t        Returns:\n\t        \"\"\"\n\t        def decorator(func: Callable):\n\t            if prefix == 'pre':\n\t                self.pre_methods[fmt] = func\n", "            elif prefix == 'io':\n\t                self.io_methods[fmt] = func\n\t            elif prefix == 'post':\n\t                self.post_methods[fmt] = func\n\t            else:\n\t                raise TypeError('the type of register is not supported')\n\t            return func\n\t        return decorator\n\t    def pre(self, fmt: str):\n\t        return self.pre_methods.get(fmt)\n", "    def io(self, fmt: str):\n\t        return self.io_methods.get(fmt)\n\t    def post(self, fmt: str):\n\t        return self.post_methods.get(fmt)\n\t# Retrieve the IO class by its format name\n\tdef retrieve_format(fmt: str = None):\n\t    return _MoleculeIO.registered_format().get(fmt)\n\t# Get all registered format name\n\tdef registered_format_name():\n\t    return tuple(_MoleculeIO.registered_format().keys())\n", "# TODO: deprecated in the later version\n\tclass _MoleculeIO(ABCMeta):\n\t    \"\"\"    Metaclass for registration of IO class format \"\"\"\n\t    _registered_format = {}\n\t    def __new__(mcs, name, bases, namespace, **kwargs):\n\t        # Get the format keywords\n\t        fmt = namespace.get('format')(mcs)\n\t        if not fmt:\n\t            return super(_MoleculeIO, mcs).__new__(mcs, name, bases, namespace, **kwargs)\n\t        elif not isinstance(fmt, str):\n", "            raise TypeError('the defined format should be a string')\n\t        elif fmt in mcs._registered_format:\n\t            raise ValueError(f'the format {fmt} have been defined before')\n\t        else:\n\t            cls = super(_MoleculeIO, mcs).__new__(mcs, name, bases, namespace, **kwargs)\n\t            mcs._registered_format[fmt] = cls\n\t            return cls\n\t    @classmethod\n\t    def registered_format(mcs):\n\t        return copy(mcs._registered_format)\n", "class MetaIO(type):\n\t    \"\"\"\n\t    The Meta class to specify how to construct the IO class\n\t    This Meta class is defined to register IO function conveniently.\n\t    The IO functions are divided into three categories:\n\t        - preprocess: do something before performing any of IO operation, with prefix '_pre'\n\t        - io: performing the IO operation, with prefix '_io'\n\t        - postprocess: do something after preforming IO operation, with prefix '_post'\n\t    This Meta class offer two approach to defined and register the IO functions:\n\t        - Define inside the IO class (IOClass)\n", "        - Define outside the IO class and decorate the defined function by IOClass.register function\n\t    To define inside the IOClass, one should name the IO function with the pattern:\n\t        def _prefix_keys():\n\t            ...\n\t    where, the prefix is one of 'pre', 'io' or 'post'; the keys is the handle name to retrieve the\n\t    IO functions.\n\t    To define outside the IOClass, one should applied the class method register as the decorator of the\n\t    IO functions, specified the prefix and the handle name as the decorator arguments, like:\n\t        @IOClass.register(fmt='keys', types='prefix')\n\t        def outside_io_func(*args, **kwargs):\n", "            ...\n\t    where the IOClass is one of Reader, Writer, Dumper, Parser or other custom IOClass, the 'key' and 'prefix'\n\t    should be replace to the handle name and prefix you specified.\n\t    \"\"\"\n\t    def __new__(mcs, name: str, bases: tuple, namespace: dict, **kwargs):\n\t        \"\"\" If the subclasses contain methods with the prefix of '_pre', '_io' or '_post'\n\t        they are seen as the IO function, that the preprocess, io or postprocess functions, respectively\n\t        \"\"\"\n\t        _register = Register()\n\t        for attr_name, attr in namespace.items():\n", "            # Make sure the io function is a Callable obj\n\t            if not isinstance(attr, Callable):\n\t                continue\n\t            split_names = attr_name.split('_')\n\t            # the custom IO function should with prefix: '_pre', '_io' and '_post'\n\t            # the handle keys of these function are follow the above prefix and separate be '_'\n\t            # for example:\n\t            #     def _pre_gjf(*args, **kwargs):\n\t            #         ...\n\t            # this is a preprocess IO function with a handle key: 'gjf' to retrieve the function.\n", "            if len(split_names) <= 2:\n\t                continue\n\t            io_type = split_names[1]\n\t            # Register the io functions:\n\t            # if a define methods with the prefix '_pre', '_io' or '_post'\n\t            # these methods are seen as preprocess, io or postprocess functions, respectively\n\t            if io_type == 'pre':\n\t                _register.pre_methods['_'.join(split_names[2:])] = attr\n\t            if io_type == 'io':\n\t                _register.io_methods['_'.join(split_names[2:])] = attr\n", "            if io_type == 'post':\n\t                _register.post_methods['_'.join(split_names[2:])] = attr\n\t        namespace[f'_register'] = _register\n\t        return type(name, bases, namespace, **kwargs)\n\tclass IOBase:\n\t    \"\"\" The base IO class \"\"\"\n\t    # Initialize the register function, which is a callable obj embed in IO classes\n\t    # When to register new IO function, apply the register function as decorator\n\t    # _register = None\n\t    def __init__(self, fmt: str, source: Union['ci.Molecule', IOStream], *args, **kwargs):\n", "        \"\"\"\"\"\"\n\t        self.fmt = fmt\n\t        self.src = source\n\t        self.args = args\n\t        self.kwargs = kwargs\n\t        # override this methods to check the\n\t        self.result = self._checks()\n\t    def __call__(self):\n\t        \"\"\" Call for the performing of IO \"\"\"\n\t        try:\n", "            self._pre()\n\t            # For dumper, the obj is Literal str or bytes obj\n\t            # For parser, the obj is Molecule obj\n\t            io_func = self._get_io()\n\t            if io_func:  # If a custom io function have been defined, run custom functions\n\t                obj = io_func(self)\n\t            else:  # else get the general io function define in class\n\t                obj = self._io()\n\t            return self._post(obj)\n\t        except IOEarlyStop:\n", "            return None\n\t    @abstractmethod\n\t    def _checks(self) -> Dict[str, Any]:\n\t        \"\"\"\n\t        This method should be overriden when definition of new IO class\n\t        The purpose of this class is to check the regulation of initialized arguments.\n\t        If not any arguments should be checked, return None directly.\n\t        \"\"\"\n\t        raise NotImplemented()\n\t    def _get_pre(self) -> Callable:\n", "        return self.register.pre(self.fmt)\n\t    def _get_io(self) -> Callable:\n\t        return self.register.io(self.fmt)\n\t    def _get_post(self) -> Callable:\n\t        return self.register.post(self.fmt)\n\t    def _pre(self, *args, **kwargs):\n\t        \"\"\" Regulate the method of preprocess \"\"\"\n\t        pre_func = self._get_pre()\n\t        if pre_func:\n\t            pre_func(self)\n", "    @abstractmethod\n\t    def _io(self, *args, **kwargs):\n\t        \"\"\" Regulate the main io method \"\"\"\n\t        raise NotImplemented\n\t    def _post(self, obj, *args, **kwargs):\n\t        \"\"\" Regulate the method of postprocess \"\"\"\n\t        post_func = self._get_post()\n\t        if post_func:\n\t            return post_func(self, obj)\n\t        else:\n", "            return obj\n\t    @property\n\t    def register(self) -> Register:\n\t        return getattr(self, f'_register')\n\tclass Dumper(IOBase, metaclass=MetaIO):\n\t    \"\"\"\n\t    Dump the Molecule information into specific format.\n\t    The output in general is the string or bytes\n\t    \"\"\"\n\t    _pybel_fmt_convert = {\n", "    }\n\t    def _preprocess_for_gjf(self):\n\t        \"\"\" Perform preprocess for  conversion of all gaussian input \"\"\"\n\t        if not self.src.has_3d:\n\t            self.src.build_3d()\n\t        self.src.assign_atoms_formal_charge()\n\t        self.src.identifier = self.src.formula\n\t    def _postprocess_for_gjf_head(self, script) -> (List[str], int):\n\t        \"\"\" Postprocess the context before the Molecular specification partition \"\"\"\n\t        # To count the insert lines\n", "        inserted_lines = 0\n\t        # separate keyword arguments:\n\t        link0 = self.kwargs['link0']\n\t        route = self.kwargs['route']\n\t        custom_charge = self.kwargs.get('charge')\n\t        custom_spin = self.kwargs.get('spin')\n\t        lines = script.splitlines()\n\t        # Write link0 command\n\t        if isinstance(link0, str):\n\t            lines[0] = f'%{link0}'\n", "        elif isinstance(link0, list):\n\t            for i, stc in enumerate(link0):  # stc=sentence\n\t                assert isinstance(stc, str)\n\t                if not i:  # For the first line of link0, replace the original line in raw script\n\t                    lines[0] = f'%{stc}'\n\t                else:  # For the other lines, insert into after the 1st line\n\t                    inserted_lines += 1\n\t                    lines.insert(inserted_lines, f'%{stc}')\n\t        else:\n\t            raise TypeError('the link0 should be string or list of string')\n", "        # Write route command\n\t        if isinstance(route, str):\n\t            lines[1+inserted_lines] = f'# {route}'\n\t        elif isinstance(route, list):\n\t            for i, stc in enumerate(route):\n\t                assert isinstance(stc, str)\n\t                if not i:  # For the first line of link0, replace the original line in raw script\n\t                    lines[1+inserted_lines] = f'#{stc}'\n\t                else:  # For the other lines, insert into after the original route line.\n\t                    inserted_lines += 1\n", "                    lines.insert(inserted_lines+1, f'%{stc}')\n\t        else:\n\t            raise TypeError('the route should be string or list of string')\n\t        charge, spin = lines[5+inserted_lines].split()\n\t        if custom_charge:\n\t            charge = str(custom_charge)\n\t        if custom_spin:\n\t            spin = str(custom_spin)\n\t        lines[5+inserted_lines] = f'{charge} {spin}'\n\t        return lines, 6 + inserted_lines\n", "    def _process_lmpdat_bonds(self, bond_contents: list):\n\t        \"\"\"\"\"\"\n\t        uni_bonds = tuple(self.src.unique_bonds)\n\t        bonds = self.src.bonds\n\t        sep = re.compile(r'\\s+')\n\t        for i, bc in enumerate(bond_contents):\n\t            split_bc = sep.split(bc)\n\t            split_bc[1] = str(uni_bonds.index(bonds[i]) + 1)\n\t            bond_contents[i] = '  '.join(split_bc)\n\t        return bond_contents\n", "    def _io(self):\n\t        \"\"\" Performing the IO operation, convert the Molecule obj to Literal obj \"\"\"\n\t        # Try to dump by openbabel.pybel\n\t        type_err_pattern = re.compile(\n\t            r\"write\\(\\) got an unexpected keyword argument '\\w+'\"\n\t        )\n\t        pb_mol = pybel.Molecule(self.src.ob_mol)\n\t        kwargs = copy(self.kwargs)\n\t        while kwargs:\n\t            try:\n", "                return pb_mol.write(self._pybel_fmt_convert.get(self.fmt, self.fmt), **kwargs)\n\t            except TypeError as error:\n\t                if type_err_pattern.match(str(error)):\n\t                    pop_kwargs = str(error).split()[-1].strip(\"'\")\n\t                    kwargs.pop(pop_kwargs)\n\t                else:\n\t                    raise error\n\t            except ValueError:\n\t                print(IOError(f'the cheminfo.Molecule obj cannot dump to Literal'))\n\t                return None\n", "        return pb_mol.write(self._pybel_fmt_convert.get(self.fmt, self.fmt))\n\t    def _checks(self) -> Dict[str, Any]:\n\t        if not isinstance(self.src, ci.Molecule):\n\t            raise TypeError(f'the dumped object should be hotpot.cheminfo.Molecule, instead of {type(self.src)}')\n\t        return {}\n\t    def _pre_cif(self):\n\t        \"\"\"\n\t        pre-process for Molecule object to convert to cif file.\n\t        if the hotpot object do not place in a Crystal, create a P1 compact Crystal for it\n\t        \"\"\"\n", "        crystal = self.src.crystal()\n\t        if not isinstance(crystal, ci.Crystal) or (\n\t                np.logical_not(crystal.vector >= 0.).any() and np.logical_not(crystal.vector < 0.).any()\n\t        ):\n\t            self.src.compact_crystal(inplace=True)\n\t        if self.src.crystal().space_group:\n\t            self.src.crystal().space_group = 'P1'\n\t    def _pre_gjf(self):\n\t        \"\"\" Assign the Molecule charge before to dump to gjf file \"\"\"\n\t        self._preprocess_for_gjf()\n", "    def _pre_gzmat(self):\n\t        self._preprocess_for_gjf()\n\t    def _io_dpmd_sys(self):\n\t        \"\"\" convert molecule information to numpy arrays \"\"\"\n\t        return DeepSystem(self.src)\n\t    def _io_lmpmol(self):\n\t        \"\"\"\n\t        write a molecule script\n\t        default values: coordinates, velocities, atom IDs and types\n\t        additional attributes for atomic: Bonds\n", "        additional attributes for full: Bonds + molecular + charge\n\t        \"\"\"\n\t        def bonds(m):\n\t            \"\"\" Add bond body \"\"\"\n\t            bond_str = 'Bonds' + '\\n\\n'  # bond body title\n\t            # the formula of bond_type key: atom1[bond_type]atom2\n\t            uni_bonds = tuple(m.unique_bonds)  # store bonds type\n\t            for j, bond in enumerate(m.bonds, 1):\n\t                bt_id = uni_bonds.index(bond) + 1\n\t                bond_str += f'{j} {bt_id} {bond.ob_atom1_id + 1} {bond.ob_atom2_id + 1}\\n'\n", "            bond_str += '\\n'\n\t            return bond_str\n\t        def charge():\n\t            \"\"\" Retrieve atom charge information \"\"\"\n\t            charge_str = '\\n' + 'Charges' + '\\n\\n'\n\t            for ic, a in enumerate(atoms_list, 1):  # ID of charge, atom\n\t                if isinstance(a, ci.Atom):\n\t                    charge_str += f'{ic} {a.partial_charge}\\n'\n\t                else:\n\t                    assert isinstance(a, ci.PseudoAtom)\n", "                    charge_str += f'{ic} {a.charge}\\n'\n\t            charge_str += '\\n'\n\t            return charge_str\n\t        mol = self.src\n\t        kwargs = self.kwargs  # keywords arguments\n\t        # default values: coordinates, velocities, atom IDs and types;\n\t        # additional attributes for atomic: None;\n\t        # additional attributes for full: molecular + charge\n\t        atom_style = kwargs.get('atom_style', 'atomic')   # default atom_style is atomic\n\t        mol_name = kwargs.get('mol_name', mol.smiles)\n", "        # combine real atoms with pseudo atoms in a list\n\t        atoms_list = []\n\t        for m_a in mol.atoms:\n\t            atoms_list.append(m_a)\n\t        if mol.pseudo_atoms:   # determine if there are pseudo_atoms\n\t            for pse_a in mol.pseudo_atoms:\n\t                atoms_list.append(pse_a)\n\t        # title information\n\t        title = f\"Create by hotpot package, convert from {mol_name}\"\n\t        script = title + '\\n\\n'   # write the molecular script for lammps\n", "        # TODO: some header information missing\n\t        # Header partition\n\t        # add atom header\n\t        num_atoms = len(atoms_list)\n\t        num_atoms_str = f'{num_atoms}  atoms'\n\t        script += num_atoms_str + '\\n'\n\t        # add bond header\n\t        num_bonds = len(mol.bonds)\n\t        num_bonds_str = f'{num_bonds}  bonds'\n\t        script += num_bonds_str + '\\n'\n", "        # Add new blank line to end the header partition\n\t        script += '\\n'\n\t        # Body partition\n\t        # Coords body\n\t        script += 'Coords' + '\\n\\n'\n\t        for i, atom in enumerate(atoms_list, 1):\n\t            script += f'{i}' + '  ' + '  '.join(map(str, atom.coordinates)) + '\\n'\n\t        script += '\\n'\n\t        # Types body\n\t        script += 'Types' + '\\n\\n'\n", "        dict_types = {}\n\t        for i, atom in enumerate(atoms_list, 1):\n\t            atom_type = dict_types.setdefault(atom.symbol, len(dict_types)+1)\n\t            script += f'{i} {atom_type}  # {atom.symbol}\\n'\n\t        script += '\\n'\n\t        # additional attributes\n\t        # to atomic style, only basis information (ID，Coords, types, velocitier)\n\t        if atom_style == 'atomic':\n\t            if num_bonds:\n\t                script += bonds(mol)\n", "        # to full style, basis information + molecular + charge\n\t        elif atom_style == 'full':\n\t            if num_bonds:\n\t                script += bonds(mol)\n\t            script += charge()\n\t        return script\n\t    def _post_gjf(self, script):\n\t        \"\"\" postprocess the dumped Gaussian 16 .gjf script to add the link0 and route context \"\"\"\n\t        lines, _ = self._postprocess_for_gjf_head(script)\n\t        script = '\\n'.join(lines)\n", "        # End black line\n\t        script += '\\n\\n'\n\t        return script\n\t    def _post_gzmat(self, script):\n\t        \"\"\" postprocess the dumped Gaussian 16 .gjf script to add the link0 and route content with Z-matrix \"\"\"\n\t        lines, current_line = self._postprocess_for_gjf_head(script)\n\t        zmat = re.compile('\\s+')\n\t        # Extract the symbol of atoms, bonds, angles and torsions\n\t        z_counts, atoms, var = 0, self.src.atoms, {}\n\t        while lines[current_line + z_counts].strip() != 'Variables:':\n", "            items = zmat.split(lines[current_line + z_counts])\n\t            assert items[0] == atoms[z_counts].symbol\n\t            if len(items) == 1:\n\t                assert not z_counts\n\t            elif len(items) == 3:\n\t                assert z_counts == 1\n\t                var[items[2]] = self.src.bond(z_counts, int(items[1])-1)\n\t            elif len(items) == 5:\n\t                assert z_counts == 2\n\t                var[items[2]] = self.src.bond(z_counts, int(items[1])-1)\n", "                var[items[4]] = self.src.angle(z_counts, int(items[1])-1, int(items[3])-1)\n\t            elif len(items) == 7:\n\t                var[items[2]] = self.src.bond(z_counts, int(items[1])-1)\n\t                var[items[4]] = self.src.angle(z_counts, int(items[1])-1, int(items[3])-1)\n\t                var[items[6]] = self.src.torsion(z_counts, int(items[1])-1, int(items[3])-1, int(items[5])-1)\n\t            else:\n\t                raise ValueError('Get an error string from Z-matrix')\n\t            z_counts += 1  # Next line\n\t        current_line += z_counts + 1  # update the current line\n\t        while lines[current_line].strip():\n", "            key, _ = lines[current_line].split('= ')\n\t            lines[current_line] += f\" {var[key]['scan_step']}\" if var[key][\"scan_step\"] else ''\n\t            current_line += 1\n\t        script = '\\n'.join(lines)\n\t        # End black line\n\t        script += '\\n\\n'\n\t        return script\n\t    def _post_lmpdat(self, script: str):\n\t        \"\"\" post-process for LAMMPS data file \"\"\"\n\t        title, headers, bodies = _parse_lmp_data_script(script)\n", "        script = title + '\\n'\n\t        for ht, hvs in headers.items():\n\t            if ht == 'bond types':  # header title, header values\n\t                hvs[0] = len(self.src.unique_bonds)\n\t            script += ' '.join(map(str, hvs)) + ' ' + ht + '\\n'\n\t        script += '\\n' * 3\n\t        for bt, bcs in bodies.items():  # body title, body contents\n\t            if bt == 'Bonds':\n\t                bcs = self._process_lmpdat_bonds(bcs)\n\t            if bcs:  # if the body contents exist\n", "                script += bt + '\\n' * 2\n\t                script += '\\n'.join(bcs)\n\t                script += '\\n' * 3\n\t        return script\n\tclass Parser(IOBase, metaclass=MetaIO):\n\t    \"\"\" Parse the str or bytes obj to Molecule obj \"\"\"\n\t    _pybel_fmt_convert = {\n\t        'g16log': 'g16'\n\t    }\n\t    def _open_source_to_string_lines(self, *which_allowed: str, output_type: Literal['lines', 'script'] = 'lines'):\n", "        \"\"\"\n\t        Open the source file to string lines\n\t        Args:\n\t            which_allowed: which types of source are allowed to process to string lines\n\t        Returns:\n\t            (List of string|string)\n\t        \"\"\"\n\t        src_type = self.result.get('src_type')\n\t        if src_type not in which_allowed:\n\t            raise RuntimeError(f'the source type {type(self.src)} have not been supported')\n", "        else:\n\t            if src_type == 'str':\n\t                script = self.src\n\t            elif src_type == 'path':\n\t                with open(self.src) as file:\n\t                    try:\n\t                        script = file.read()\n\t                    # If the file pointed by the path is not a text file\n\t                    # such as a bytes file\n\t                    except UnicodeDecodeError:\n", "                        raise IOEarlyStop()\n\t            elif src_type == 'IOString':\n\t                script = self.src.read()\n\t            else:\n\t                raise RuntimeError(f'the source type {type(self.src)} have not been supported')\n\t            if output_type == 'lines':\n\t                return script.split('\\n')\n\t            elif output_type == 'script':\n\t                return script\n\t            else:\n", "                raise ValueError('the arg output_type given a wrong values, lines or script allow only')\n\t    def _checks(self) -> Dict[str, Any]:\n\t        if not isinstance(self.src, (IOBase, str, bytes, PathLike)):\n\t            raise TypeError(f'the parsed object should be IOBase, str or bytes, instead of {type(self.src)}')\n\t        if isinstance(self.src, str):\n\t            if os.path.exists(self.src):\n\t                return {'src_type': 'path'}\n\t            else:\n\t                return {'src_type': 'str'}\n\t        if isinstance(self.src, PathLike):\n", "            return {'src_type': 'path'}\n\t        if isinstance(self.src, bytes):\n\t            return {'src_type': 'bytes'}\n\t        if isinstance(self.src, io.StringIO):\n\t            return {'src_type': 'StringIO'}\n\t        if isinstance(self.src, io.BytesIO):\n\t            return {'src_type': 'BytesIO'}\n\t        if isinstance(self.src, io.FileIO):\n\t            return {'src_type': 'FileIO'}\n\t        print(f'the get source type is {type(self.src)}')\n", "        return {'src_type': type(self.src)}\n\t    def _ob_io(self):\n\t        \"\"\" IO by openbabel.pybel \"\"\"\n\t        # Get the source type name\n\t        src_type = self.result.get('src_type')\n\t        try:\n\t            if src_type == 'str':\n\t                pybel_mol = pybel.readstring(self._pybel_fmt_convert.get(self.fmt, self.fmt), self.src)\n\t            elif src_type == 'path':\n\t                pybel_mol = next(pybel.readfile(self._pybel_fmt_convert.get(self.fmt, self.fmt), str(self.src)))\n", "            elif src_type == 'IOString':\n\t                pybel_mol = pybel.readstring(self._pybel_fmt_convert.get(self.fmt, self.fmt), self.src.read())\n\t            else:\n\t                raise RuntimeError(f'the source type {type(self.src)} have not been supported')\n\t            obj = ci.Molecule(pybel_mol.OBMol)\n\t        except RuntimeError:\n\t            obj = None\n\t        return obj\n\t    def _cclib_io(self, obj):\n\t        \"\"\" IO by cclib package \"\"\"\n", "        src_type = self.result.get('src_type')\n\t        try:\n\t            if src_type == 'str':\n\t                data = cclib.ccopen(io.StringIO(self.src)).parse()\n\t            elif src_type == 'path':\n\t                data = cclib.ccopen(self.src).parse()\n\t            elif src_type == 'IOString':\n\t                data = cclib.ccopen(self.src).parse()\n\t            else:\n\t                raise RuntimeError(f'the source type {type(self.src)} have not been supported in cclib')\n", "        except (RuntimeError, AttributeError):\n\t            data = None\n\t        if data:\n\t            if not obj:\n\t                # when get information about the atoms species\n\t                if hasattr(data, 'atomnos'):\n\t                    atoms_attrs = [{'atomic_number': an} for an in getattr(data, 'atomnos')]\n\t                    obj = ci.Molecule(atoms=atoms_attrs)\n\t                else:\n\t                    print(IOError(f'the parsing of {self.src} is not successful!'))\n", "                    return obj  # Return None\n\t            # if get information about the coordination collections\n\t            if hasattr(data, 'atomcoords'):\n\t                obj.set(all_coordinates=getattr(data, 'atomcoords'))\n\t            # if get information about the energy (SCF energies) vector\n\t            if hasattr(data, 'scfenergies'):\n\t                obj.set(all_energy=getattr(data, 'scfenergies'))\n\t        return obj\n\t    def _io(self, *args, **kwargs):\n\t        \"\"\" Standard IO process \"\"\"\n", "        # Try parse the log file by openbabel.pybel file firstly\n\t        return self._ob_io()\n\t    # Start to the prefix IO functions\n\t    # preprocess for g16log file\n\t    # This preprocess is used to judge whether a Error happened when perform g16 calculate\n\t    def _pre_g16log(self):\n\t        \"\"\" g16log preprocess to judge whether some Error happened \"\"\"\n\t        def is_convergence_failure():\n\t            if 'Convergence failure -- run terminated.' in script:\n\t                return True\n", "            return False\n\t        def is_hessian_no_longer_linear_valid():\n\t            march_pattern = re.compile(r'Error termination via Lnk1e in (/.+)*/l103\\.exe')\n\t            if any(march_pattern.match(line.strip()) for line in script.splitlines()[-5:]):\n\t                return True\n\t            return False\n\t        script = self._open_source_to_string_lines('str', 'path', \"IOString\", output_type='script')\n\t        try:\n\t            # Check whether a failure have happened when calculation.\n\t            if is_convergence_failure():\n", "                raise IOEarlyStop('Gaussian16 SCF cannot convergence!')\n\t            if is_hessian_no_longer_linear_valid():\n\t                raise IOEarlyStop('Gaussian16 Hessian no longer linear valid')\n\t        except IOEarlyStop as error:\n\t            if self.kwargs.get('force'):\n\t                print(error)\n\t            else:\n\t                raise error\n\t    # Parse the XYZ file\n\t    def _io_xyz(self):\n", "        \"\"\" Parse the XYZ file \"\"\"\n\t        src_type = self.result['src_type']\n\t        if src_type != 'path':\n\t            return self._io()\n\t        else:\n\t            from ase import io\n\t            from openbabel import openbabel as ob\n\t            data_generator = io.iread(self.src)\n\t            # atomic_numbers, coordinates, cell_params\n\t            atomic_numbers, all_coordinates, cell_matrix = [], [], None\n", "            for data in data_generator:\n\t                atomic_numbers.append(data.numbers)\n\t                all_coordinates.append(data.positions)\n\t                if cell_matrix is None:\n\t                    cell_matrix = data.cell.array\n\t            atomic_numbers = np.stack(atomic_numbers)\n\t            all_coordinates = np.stack(all_coordinates)\n\t            number_min = atomic_numbers.min(axis=0)\n\t            number_max = atomic_numbers.max(axis=0)\n\t            # the values in same columns should be same.\n", "            assert all(number_max == number_min)\n\t            obj = ci.Molecule()\n\t            obj.quick_build_atoms(number_min)\n\t            obj.set(all_coordinates=all_coordinates)\n\t            obj.set(crystal=cell_matrix)\n\t            obj.conformer_select(0)\n\t            return obj\n\t    # postprocess for g16log file\n\t    def _post_g16log(self, obj: 'ci.Molecule'):\n\t        \"\"\"\n", "        post process for g16log format, to extract:\n\t            1) Mulliken charge\n\t            2) Spin densities\n\t        \"\"\"\n\t        def extract_charges_spin():\n\t            \"\"\" Extract charges and spin information from g16.log file \"\"\"\n\t            # Get the line index of Mulliken charges\n\t            head_lines = [i for i, line in enumerate(lines) if line.strip() == 'Mulliken charges and spin densities:']\n\t            if not head_lines:\n\t                head_lines = [i for i, line in enumerate(lines) if line.strip() == 'Mulliken charges:']\n", "                charge_only = True\n\t            else:\n\t                charge_only = False\n\t            # Skip the first charge&spin sheet, it can't find corresponding coordinates\n\t            if not head_lines:\n\t                raise IOEarlyStop\n\t            elif len(head_lines) == obj.conformer_counts + 1:\n\t                head_lines = head_lines[1:]\n\t            # Extract the Mulliken charge and spin densities\n\t            charges, spin_densities = [], []  # changes(cgs) spin_densities(sds)\n", "            for i in head_lines:\n\t                # Enhance inspection\n\t                col_heads = lines[i + 1].strip().split()\n\t                if charge_only:\n\t                    assert len(col_heads) == 1 and col_heads[0] == '1'\n\t                else:\n\t                    assert len(col_heads) == 2 and col_heads[0] == '1' and col_heads\n\t                HEAD_LINES_NUM = 2\n\t                cg, sd = [], []  # change, spin_density\n\t                while True:\n", "                    split_line = lines[i + HEAD_LINES_NUM].strip().split()\n\t                    if charge_only and len(split_line) == 3:\n\t                        row, syb, c = split_line  # row number, symbol, charges\n\t                        s = 0.0  # spin density\n\t                    elif not charge_only and len(split_line) == 4:\n\t                        row, syb, c, s = split_line  # row number, symbol, charges, spin density\n\t                    else:\n\t                        break\n\t                    try:\n\t                        row, c, s = int(row), float(c), float(s)\n", "                        # check the sheet row number\n\t                        if row != HEAD_LINES_NUM - 1:\n\t                            break\n\t                    # Inspect the types of values\n\t                    except ValueError:\n\t                        break\n\t                    # record the charge and spin density\n\t                    cg.append(c)\n\t                    sd.append(s)\n\t                    HEAD_LINES_NUM += 1\n", "                # store the extracted\n\t                if cg and sd:\n\t                    if len(cg) == len(sd) == len(obj.atoms):\n\t                        charges.append(cg)\n\t                        spin_densities.append(sd)\n\t                    else:\n\t                        raise ValueError('the number of charges do not match to the number of atoms')\n\t                else:\n\t                    raise ValueError('get a empty charge and spin list, check the input!!')\n\t            obj.set(all_atom_charges=np.array(charges))\n", "            obj.set(all_atom_spin_densities=np.array(spin_densities))\n\t        def extract_force_matrix():\n\t            # Define the format of force sheet\n\t            # the Force sheet like this:\n\t            #  -------------------------------------------------------------------\n\t            #  Center     Atomic                   Forces (Hartrees/Bohr)\n\t            #  Number     Number              X              Y              Z\n\t            #  -------------------------------------------------------------------\n\t            #       1        8           0.039901671    0.000402574    0.014942530\n\t            #       2        8           0.017381613    0.001609531    0.006381231\n", "            #       3        6          -0.092853735   -0.025654844   -0.005885898\n\t            #       4        6           0.067801154    0.024130172   -0.022794721\n\t            #       5        8          -0.023702905    0.005486251   -0.004938175\n\t            #       6        8          -0.006359715   -0.008543465    0.010350815\n\t            #       7       55          -0.002168084    0.002569781    0.001944217\n\t            #  -------------------------------------------------------------------\n\t            force_head1 = re.compile(r'\\s*Center\\s+Atomic\\s+Forces\\s\\(Hartrees/Bohr\\)\\s*')\n\t            force_head2 = re.compile(r'\\s*Number\\s+Number\\s+X\\s+Y\\s+Z\\s*')\n\t            sheet_line = re.compile(r'\\s*----+\\s*')\n\t            HEAD_LINES_NUM = 3  # the offset line to write the header\n", "            head_lines = [i for i, line in enumerate(lines) if force_head1.match(line)]\n\t            all_forces = []\n\t            for i in head_lines:\n\t                # enhance the inspection of Force sheet head\n\t                assert force_head2.match(lines[i + 1])\n\t                assert sheet_line.match(lines[i + 2])\n\t                rows = 0\n\t                forces = []\n\t                while True:\n\t                    if sheet_line.match(lines[i + HEAD_LINES_NUM + rows]):\n", "                        if len(forces) == obj.atom_counts:\n\t                            all_forces.append(forces)\n\t                            break\n\t                        else:\n\t                            raise ValueError('the number of force vector do not match the number of atoms')\n\t                    ac, an, x, y, z = map(\n\t                        lambda v: int(v[1]) if v[0] < 2 else float(v[1]),\n\t                        enumerate(lines[i + HEAD_LINES_NUM + rows].split())\n\t                    )\n\t                    # Enhance the inspection\n", "                    assert ac == rows + 1\n\t                    if obj.atoms[rows].atomic_number != an:\n\t                        raise ValueError('the atomic number do not match')\n\t                    forces.append([x, y, z])\n\t                    rows += 1\n\t            try:\n\t                obj.set(all_forces=np.array(all_forces))\n\t            except ValueError:\n\t                return\n\t        obj = self._cclib_io(obj)  # Try to supplementary Molecule data by cclib\n", "        lines = self._open_source_to_string_lines('str', 'path', 'IOString')\n\t        try:  # TODO: For now, this is the case, the spin densities may lost in some case  # the units is Hartree/Bohr\n\t            extract_charges_spin()\n\t        except IOEarlyStop:\n\t            if self.kwargs.get('must_have_charge'):\n\t                raise IOEarlyStop\n\t        try:\n\t            extract_force_matrix()\n\t        except IndexError:\n\t            raise IOEarlyStop\n", "        # assign the first conformer for the molecule\n\t        obj.conformer_select(0)\n\t        return obj\n"]}
{"filename": "hotpot/bundle.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : bundle.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/22\n\t@Time   : 3:18\n\t\"\"\"\n\timport copy\n\timport os\n", "import random\n\timport time\n\tfrom os import PathLike\n\tfrom typing import *\n\tfrom pathlib import Path\n\timport numpy as np\n\tfrom tqdm import tqdm\n\tfrom openbabel import pybel as pb\n\timport hotpot.cheminfo as ci\n\tfrom hotpot.tools import check_path\n", "import multiprocessing as mp\n\tfeature_formats = {\n\t    'basic': ['atomic_number', 's', 'p', 'f']\n\t}\n\t# the dict to store all defined bundle classes\n\t_bundle_classes = {}\n\tdef register_bundles(bundle: Type):\n\t    \"\"\" register the bundle to _bundle_classes \"\"\"\n\t    _bundle_classes[bundle.__name__] = bundle\n\t    return bundle\n", "@register_bundles\n\tclass MolBundle:\n\t    \"\"\" The basic class for all molecular bundle \"\"\"\n\t    def __init__(self, mols: Union[Sequence[ci.Molecule], Generator[ci.Molecule, None, None]] = None):\n\t        self._data = {'mols': mols}\n\t    def __repr__(self):\n\t        class_name = self.__class__.__name__\n\t        return f\"{class_name}(generator)\" if isinstance(self.mols, Generator) else f\"{class_name}({self.mols})\"\n\t    def __iter__(self):\n\t        return iter(self.mols)\n", "    def __add__(self, other: Union['MolBundle', ci.Molecule]):\n\t        \"\"\"\"\"\"\n\t        if isinstance(other, MolBundle):\n\t            return MolBundle(self.to_list() + other.to_list())\n\t        elif isinstance(other, ci.Molecule):\n\t            return MolBundle(self.to_list() + [other])\n\t        else:\n\t            raise TypeError('the MolBundle is only allowed to add with Molecule or MolBundle object')\n\t    def __len__(self):\n\t        return len(self.mols)\n", "    def __getitem__(self, item: int):\n\t        return self.mols[item]\n\t    def __get_all_unique_attrs(self, attr_name: str):\n\t        \"\"\" Given a Molecule attr_name, get all unique values of the attributes among all Molecule in the MolBundle\"\"\"\n\t        if self.is_generator:\n\t            self.to_list()\n\t        dict_attrs = {}\n\t        for i, mol in enumerate(self):\n\t            list_indices = dict_attrs.setdefault(getattr(mol, attr_name), [])\n\t            list_indices.append(i)\n", "        if not dict_attrs:\n\t            return 0\n\t        if len(dict_attrs) == 1:\n\t            return getattr(self.mols[0], attr_name)\n\t        else:\n\t            return dict_attrs\n\t    @property\n\t    def atom_counts(self) -> Dict[int, List[int]]:\n\t        \"\"\"\n\t        Notes:\n", "            if the Bundle is a generator, convert to a list of Molecule first.\n\t        Returns:\n\t            returns a dict with the key is the number of the atoms and the key is the indices of Molecules\n\t        \"\"\"\n\t        return self.__get_all_unique_attrs('atom_counts')\n\t    @property\n\t    def atomic_numbers(self):\n\t        return self.__get_all_unique_attrs('atomic_numbers')\n\t    def choice(\n\t            self, size: int = 1, replace: bool = True,\n", "            p: Union[Sequence, float, Callable] = None,\n\t            get_remain: bool = False\n\t    ) -> Union['MolBundle', tuple['MolBundle', 'MolBundle']]:\n\t        \"\"\"\n\t         Generate new MolBundle with a list of random Molecule objects from the current MolBundle\n\t        Args:\n\t            size: the size of generating MolBundle, that the number of contained Molecule objects\n\t            replace: whether allow to choice a Molecule object multiply times. It must be noted that\n\t             if this MolBundle is a generator or the get_remain arg has been specified, this arg\n\t             would not work.\n", "            p: If the current MolBundle is a Generator it should be a float or a Callable object\n\t             which arg is the generated molecule. If the current MolBundle is a Sequence, the p\n\t             should bea sequence with same size as the number of Molecule objects in current\n\t             MolBundle, specify the probability of each Molecule to be chosen.\n\t            get_remain: whether to get the remain Molecule object, if the current MolBundle is a Generator\n\t             this arg would not work\n\t        Return:\n\t            MolBundle contained specified-number molecules\n\t        \"\"\"\n\t        def choice_from_generator():\n", "            \"\"\" Generator molecule according to specified probability \"\"\"\n\t            if isinstance(p, float):\n\t                for mol in self:\n\t                    if random.choices([0, 1], [1-p, p]):\n\t                        yield mol\n\t            if isinstance(p, Callable):\n\t                for mol in self:\n\t                    if p(mol):\n\t                        yield mol\n\t        # if the MolBundle is a generator, the derivative one is still generator\n", "        if self.is_generator:\n\t            if isinstance(p, (float, Callable)):\n\t                return MolBundle(choice_from_generator())\n\t            else:\n\t                raise TypeError('When the MolBundle is a generator, the p should be a float or Callable object')\n\t        elif get_remain:  # get remain molecules as the second return\n\t            mol_indices = np.arange(len(self))\n\t            chosen_idx = np.random.choice(mol_indices, size=int(len(self) * p))\n\t            remain_idx = np.setdiff1d(mol_indices, chosen_idx)\n\t            chosen_mol = np.array(self.mols)[chosen_idx].tolist()\n", "            remain_mol = np.array(self.mols)[remain_idx].tolist()\n\t            return self.__class__(chosen_mol), self.__class__(remain_mol)\n\t        else:\n\t            return self.__class__(np.random.choice(self.mols, size=size, replace=replace, p=p))\n\t    def collect_identical(self, inplace: bool = False) -> 'MolBundle':\n\t        \"\"\" Merge the molecules with same graph structures to one \"\"\"\n\t        dict_umol = {}\n\t        for mol in self.mols:\n\t            list_umol = dict_umol.setdefault(mol.atom_counts, [])\n\t            if not list_umol:\n", "                list_umol.append(mol)\n\t            if all(umol != mol for umol in list_umol):\n\t                list_umol.append(mol)\n\t        if inplace:\n\t            self.mols = [umol for list_umol in dict_umol.values() for umol in list_umol]\n\t        else:\n\t            return self.__class__([umol for list_umol in dict_umol.values() for umol in list_umol])\n\t    @property\n\t    def data(self):\n\t        return self._data\n", "    @data.setter\n\t    def data(self, data):\n\t        if isinstance(data, dict):\n\t            self._data = data\n\t        else:\n\t            raise TypeError(f'the {self.__class__.__name__}.data must be a dict')\n\t    @classmethod\n\t    def read_from(\n\t            cls, fmt: str,\n\t            dir_or_strings: Union[str, PathLike, Iterable[str]],\n", "            match_pattern: str = '*',\n\t            generate: bool = False,\n\t            ranges: Union[Sequence[int], range] = None,\n\t            condition: Callable = None,\n\t            num_proc: int = None\n\t    ):\n\t        \"\"\"\n\t        Read Molecule objects from a directory.\n\t        Args:\n\t            fmt(str): read file with the specified-format method.\n", "            dir_or_strings(str|PathLike): the directory all file put, or a sequence of string\n\t            match_pattern(str): the file name pattern\n\t            generate(bool): read file to a generator of Molecule object\n\t            ranges(Sequence[int]|range): A list or range of integers representing the indices of\n\t                the input files to read. Defaults to None.\n\t            condition(Callable): A callable object that takes two arguments (the path of the input file\n\t                and the corresponding Molecule object) and returns a boolean value indicating whether to include the\n\t                Molecule object in the output. Defaults to None.\n\t            num_proc: the number of process to read\n\t        Returns:\n", "            List(Molecule) or Generator(Molecule)\n\t        \"\"\"\n\t        def read_mol(pm: Path, conn):\n\t            try:\n\t                mol = ci.Molecule.read_from(pm, fmt)\n\t                # the OBMol, OBAtom, OBBond are C++ objects wrapped by SWIG,\n\t                # they can't be pickle, so pop them from Molecule and convert their info to .mol2 string\n\t                pmol = pb.Molecule(mol.ob_mol_pop())\n\t                script = pmol.write('mol2')  # Write to the mol2 script to allow it to pickle\n\t                # communicate with the main process\n", "                conn.send((mol, script, pm))\n\t            except AttributeError:\n\t                conn.send((None, None, pm))\n\t            except StopIteration:\n\t                conn.send((None, None, pm))\n\t        def mol_generator():\n\t            nonlocal dir_or_strings\n\t            for i, path_mol in enumerate(generate_path_or_string()):\n\t                if not ranges or i in ranges:\n\t                    try:\n", "                        mol = ci.Molecule.read_from(path_mol, fmt)\n\t                    except StopIteration:\n\t                        mol = None\n\t                else:\n\t                    continue\n\t                if mol and (not condition or condition(path_mol, mol)):\n\t                    yield mol\n\t        def mol_mp_generator():\n\t            mols_info = []\n\t            parent_conn, child_conn = mp.Pipe()\n", "            ps = []  # list of Process: Queue pairs\n\t            for i, source in enumerate(generate_path_or_string()):\n\t                # if the number of process more than num_proc, get the read molecule info and stop to start new process\n\t                while len(ps) >= num_proc:\n\t                    for p in ps:\n\t                        if not p.is_alive():\n\t                            mols_info.append(parent_conn.recv())\n\t                            p.terminate()\n\t                            ps.remove(p)\n\t                # When received some Molecule info, reorganize these info and yield\n", "                while mols_info:\n\t                    mol, script, pf = mols_info.pop()  # hotpot Molecule, mol2_script, path_file of Molecule\n\t                    # If you get a valid Molecule info, re-wrap to be hotpot Molecule\n\t                    if mol and script:\n\t                        pmol = pb.readstring('mol2', script)  # pybel Molecule object\n\t                        mol.ob_mol_rewrap(pmol.OBMol)  # re-wrap OBMol by hotpot Molecule\n\t                        # if the reorganized Molecule is expected, yield\n\t                        if not condition or condition(mol, pf):\n\t                            yield mol\n\t                # Start new process to read Molecule from file\n", "                if not ranges or i in ranges:\n\t                    p = mp.Process(target=read_mol, args=(source, child_conn))\n\t                    p.start()\n\t                    ps.append(p)\n\t            # After all path_file have pass into process to read\n\t            while ps:\n\t                for p in ps:\n\t                    if not p.is_alive():\n\t                        mols_info.append(parent_conn.recv())\n\t                        p.terminate()\n", "                        ps.remove(p)\n\t            for mol, script, pf in mols_info:\n\t                # if get a valid Molecule info, re-wrap to be hotpot Molecule\n\t                if mol and script:\n\t                    pmol = pb.readstring('mol2', script)  # pybel Molecule object\n\t                    mol.ob_mol_rewrap(pmol.OBMol)  # re-wrap OBMol by hotpot Molecule\n\t                    # if the reorganized Molecule is expected, yield\n\t                    if not condition or condition(mol, pf):\n\t                        yield mol\n\t        def generate_path_or_string():\n", "            \"\"\"\"\"\"\n\t            if isinstance(dir_or_strings, Path):\n\t                for path in dir_or_strings.glob(match_pattern):\n\t                    yield path\n\t            elif isinstance(dir_or_strings, Iterable):\n\t                for string in dir_or_strings:\n\t                    yield string\n\t            else:\n\t                raise TypeError(f'the dir_or_strings is required to be a Path or str, get {type(dir_or_strings)}')\n\t        if isinstance(dir_or_strings, str):\n", "            dir_or_strings = Path(dir_or_strings)\n\t        elif not isinstance(dir_or_strings, PathLike) and not isinstance(dir_or_strings, Iterable):\n\t            raise TypeError(\n\t                f'the read_dir should be a str, PathLike or iterable str, instead of {type(dir_or_strings)}'\n\t            )\n\t        generator = mol_mp_generator() if num_proc else mol_generator()\n\t        if generate:\n\t            return cls(generator)\n\t        else:\n\t            return cls([m for m in tqdm(generator, 'reading molecules')])\n", "    def gcmc_for_isotherm(\n\t            self, *guest: 'ci.Molecule', force_field: Union[str, PathLike] = None,\n\t            work_dir: Union[str, PathLike] = None, T: float = 298.15,\n\t            Ps: Sequence[float] = (1.0,), procs: int = 1, named_identifier: bool = False,\n\t            **kwargs\n\t    ):\n\t        \"\"\"\n\t        Run gcmc to determine the adsorption of guest,\n\t        Args:\n\t            self: the framework as the sorbent of guest molecule\n", "            guest(Molecule): the guest molecule to be adsorbed into the framework\n\t            force_field(str|PathLike): the path to force field file or the self-existent force file contained\n\t             in force field directory (in the case, a str should be given as a relative path from the root of\n\t             force field root to the specified self-existent force filed). By default, the force field is UFF\n\t             which in the relative path 'UFF/LJ.json' for the force field path.\n\t            work_dir: the user-specified dir to store the result of GCMC and log file.\n\t            T: the environmental temperature (default, 298.15 K)\n\t            Ps(Sequence[float]): A sequence of relative pressure related to the saturation vapor in the environmental temperature.\n\t            procs(int): the number of processes, default 1.\n\t            named_identifier: Whether to name the dir by the identifier of frames\n", "        \"\"\"\n\t        if isinstance(work_dir, str):\n\t            work_dir = Path(work_dir)\n\t        # Assemble keywords arguments for multiprocess\n\t        processes = []\n\t        for i, frame in enumerate(self.mols, 1):\n\t            # When the running proc more than the specified values, waiting for terminate\n\t            while len(processes) >= procs:\n\t                for p in processes:\n\t                    if not p.is_alive():\n", "                        processes.pop(processes.index(p))\n\t                        p.terminate()\n\t                time.sleep(10)\n\t            if named_identifier:\n\t                sub_work_dir = work_dir.joinpath(frame.identifier)\n\t            else:\n\t                idt_map = self._data.setdefault('identifier_map', {})\n\t                idt_map[i] = frame.identifier\n\t                sub_work_dir = work_dir.joinpath('mol_' + str(i))\n\t            if not sub_work_dir.exists():\n", "                sub_work_dir.mkdir()\n\t            kwargs.update({\n\t                'force_field': force_field,\n\t                'work_dir': sub_work_dir,\n\t                'T': T, 'Ps': Ps\n\t            })\n\t            p = mp.Process(target=frame.gcmc_for_isotherm, args=guest, kwargs=kwargs)\n\t            p.start()\n\t            processes.append(p)\n\t        for p in processes:\n", "            p.join()\n\t            p.terminate()\n\t        return self._data.get('identifier_map')\n\t    def graph_representation(self, *feature_names) -> Generator[Union[str, np.ndarray, np.ndarray], None, None]:\n\t        \"\"\" Transform molecules to their graph representation \"\"\"\n\t        for mol in self.mols:\n\t            yield mol.graph_representation(*feature_names)\n\t    def gaussian(\n\t            self, g16root: Union[str, PathLike], dir_out: Union[str, PathLike],\n\t            link0: Union[str, List[str]], route: Union[str, List[str]],\n", "            dir_err: Optional[Union[str, PathLike]] = None,\n\t            dir_chk: Optional[Union[str, PathLike]] = None,\n\t            clean_conformers: bool = True,\n\t            perturb_kwargs: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None,\n\t            *args, **kwargs\n\t    ) -> None:\n\t        \"\"\"\n\t        Run Gaussian16 calculations for Molecule objects stored in the MolBundle.\n\t        These Molecules are allowed to be perturbed their atoms' coordinates before submit to Gaussian 16\n\t        Args:\n", "            g16root (Union[str, PathLike]): The path to the Gaussian16 root directory.\n\t            dir_out (Union[str, PathLike]): The path to the directory to output the log files.\n\t            link0 (Union[str, List[str]]): The link0 information for Gaussian16 calculations.\n\t            route (Union[str, List[str]]): The route information for Gaussian16 calculations.\n\t            dir_err (Optional[Union[str, PathLike]], optional): The path to the directory to output the error files.\n\t                Defaults to None.\n\t            dir_chk (Optional[Union[str, PathLike]], optional): The path to the directory to store the .chk files.\n\t                Defaults to None.\n\t            clean_conformers (bool, optional): A flag indicating whether to clean the configuration before perturbing\n\t                the molecule or lattice. Defaults to True.\n", "            perturb_kwargs (Optional[Union[Dict[str, Any], List[Dict[str, Any]]]], optional): The parameters for\n\t                perturbing the molecule or lattice. Defaults to None.\n\t            *args: Additional positional arguments.\n\t            **kwargs: Additional keyword arguments.\n\t        Returns:\n\t            None\n\t        \"\"\"\n\t        # Check and process paths\n\t        g16root: Path = check_path(g16root, file_or_dir='dir')\n\t        dir_out: Path = check_path(dir_out, mkdir=True)\n", "        dir_err: Optional[Path] = check_path(dir_err, mkdir=True)\n\t        dir_chk: Optional[Path] = check_path(dir_chk, mkdir=True)\n\t        for mol in self.mols:\n\t            assert isinstance(mol, ci.Molecule)\n\t            # Clean before perturb conformers\n\t            if clean_conformers:\n\t                mol.clean_conformers()\n\t            # Assign the dirs\n\t            # assign the dir to put out.log files for the mol\n\t            dir_out_mol = dir_out.joinpath(mol.identifier)\n", "            if not dir_out_mol.exists():\n\t                dir_out_mol.mkdir()\n\t            # assign the dir to put err.log files for the mol\n\t            if dir_err:\n\t                dir_err_mol = dir_err.joinpath(mol.identifier)\n\t                if not dir_err_mol.exists():\n\t                    dir_err_mol.mkdir()\n\t            else:\n\t                dir_err_mol = None\n\t            # Performing the molecule or lattice perturb\n", "            if isinstance(perturb_kwargs, Dict):\n\t                perturb_kwargs = [perturb_kwargs]  # Wrap it into a list\n\t            if isinstance(perturb_kwargs, List) and all(isinstance(pk, dict) for pk in perturb_kwargs):\n\t                for pk in perturb_kwargs:\n\t                    pk['inplace'] = True  # Force to inplace\n\t                    mol.perturb_atoms_coordinates(**pk)\n\t            elif perturb_kwargs is not None:\n\t                ValueError('The perturb_kwargs should be a dict or list of dict')\n\t            # Running the gaussian16\n\t            for config_idx in range(mol.conformer_counts):\n", "                mol.conformer_select(config_idx)\n\t                # Reorganize the arguments for each conformer\n\t                path_out = dir_out_mol.joinpath(f'{config_idx}.log')\n\t                path_err = dir_err_mol.joinpath(f'{config_idx}.err') if dir_err else None\n\t                if dir_chk:  # for dir_chk\n\t                    dir_chk_mol = dir_chk.joinpath(mol.identifier)\n\t                    dir_chk_mol.mkdir(exist_ok=True)\n\t                    if isinstance(link0, str):\n\t                        link0_cfg = [f'chk={str(dir_chk_mol)}/{config_idx}.chk', link0]\n\t                    elif isinstance(link0, list):\n", "                        link0_cfg = copy.copy(link0)\n\t                        link0_cfg.insert(0, f'chk={str(dir_chk_mol)}/{config_idx}.chk')\n\t                    else:\n\t                        TypeError('the link0 should be str or list of str!')\n\t                else:\n\t                    link0_cfg = link0\n\t                mol.gaussian(\n\t                    g16root=g16root,\n\t                    link0=link0_cfg,\n\t                    route=route,\n", "                    path_log_file=str(path_out.absolute()),\n\t                    path_err_file=str(path_err) if path_err else None,\n\t                    *args, **kwargs\n\t                )\n\t    @property\n\t    def is_generator(self):\n\t        \"\"\" To judge weather the object is a Molecule generator \"\"\"\n\t        return isinstance(self.mols, Generator)\n\t    @property\n\t    def mols(self):\n", "        return self._data.get('mols', [])\n\t    @mols.setter\n\t    def mols(self, mols):\n\t        self._data['mols'] = mols\n\t    @staticmethod\n\t    def registered_bundle_names():\n\t        \"\"\" Return all registered bundle names \"\"\"\n\t        return list(_bundle_classes.keys())\n\t    def to(self, bundle_name: str):\n\t        \"\"\" Convert this bundle to other bundle type \"\"\"\n", "        return _bundle_classes[bundle_name](self.mols)\n\t    def to_list(self) -> List[ci.Molecule]:\n\t        \"\"\" Convert the molecule container (self.mol) to list \"\"\"\n\t        if isinstance(self.mols, Generator):\n\t            self.mols = list(self)\n\t        return self.mols\n\t    def unique_mols(self, mode: Literal['smiles', 'similarity'] = 'smiles'):\n\t        \"\"\"\n\t        get a new Bundle with all unique Molecule objects\n\t        Args:\n", "            mode: the standard to identify whether two molecule to be regard as identical\n\t        Returns:\n\t            A new Bundle with all the unique Molecule objects\n\t        \"\"\"\n\t        clone = copy.copy(self)\n\t        clone.data = copy.copy(self.data)\n\t        if mode == 'smiles':\n\t            clone.mols = ({m.smiles: m for m in self.mols}.values())\n\t            return clone\n\t        elif mode == 'similarity':\n", "            dict_mols = {}\n\t            for mol in self.mols:\n\t                mols_with_same_atom_num = dict_mols.setdefault(mol.atom_counts, [])\n\t                mols_with_same_atom_num.append(mol)\n\t            new_mols = []\n\t            for _, mols_with_same_atom_num in dict_mols.items():\n\t                uni_mols = []\n\t                for mol in mols_with_same_atom_num:\n\t                    if mol not in uni_mols:\n\t                        uni_mols.append(mol)\n", "                new_mols.extend(uni_mols)\n\t            clone.mols = new_mols\n\t            return clone\n\t@register_bundles\n\tclass DeepModelBundle(MolBundle):\n\t    \"\"\" Specific MolBundle to carry out the tasks in DeepModeling packages \"\"\"\n\t    def merge_conformers(self):\n\t        \"\"\"\n\t        Get the sum of conformers for all molecule in the mol bundle \"self.mols\"\n\t        This method can only be successfully executed\n", "        when all molecules in the molecular bundle can be added to each other\n\t        Returns:\n\t            a Molecule object with all conformers in the self.mols\n\t        \"\"\"\n\t        atomic_numbers = self.atomic_numbers\n\t        if isinstance(atomic_numbers, tuple):\n\t            return sum(self.mols[1:], start=self.mols[0])\n\t        elif isinstance(atomic_numbers, dict):\n\t            mol_array = np.array(self.mols)\n\t            return self.__class__([mol_array[i].sum() for ans, i in self.atomic_numbers.items()])\n", "    def merge_atoms_same_mols(self) -> 'DeepModelBundle':\n\t        \"\"\" Merge Molecules with same atoms to a MixSameAtomMol \"\"\"\n\t        bundle: DeepModelBundle = self.to_mix_mols()\n\t        atom_counts = bundle.atom_counts\n\t        if isinstance(atom_counts, tuple):\n\t            return sum(bundle.mols[1:], start=bundle.mols[0])\n\t        elif isinstance(atom_counts, dict):\n\t            mol_array = np.array(bundle.mols)\n\t            return self.__class__([mol_array[i].sum() for ans, i in atom_counts.items()])\n\t    def to_dpmd_sys(\n", "            self, system_dir: Union[str, os.PathLike],\n\t            validate_ratio: float,\n\t            mode: Literal['std', 'att'] = 'std',\n\t            split_mode: Optional[Literal['inside', 'outside']] = None\n\t    ):\n\t        \"\"\"\"\"\"\n\t        def to_files(mb: MolBundle, save_root: Path):\n\t            for c, m in enumerate(mb):  # c: counts, m: molecule\n\t                mol_save_root = \\\n\t                    save_root.joinpath(str(m.atom_counts)) if mode == 'att' else save_root.joinpath(str(c))\n", "                if not mol_save_root.exists():\n\t                    mol_save_root.mkdir()\n\t                m.to_dpmd_sys(mol_save_root, mode)\n\t        if split_mode and split_mode not in ['inside', 'outside']:\n\t            raise ValueError(\"the split_mode must be 'inside' or 'outside'\")\n\t        if not 0.0 < validate_ratio < 1.0:\n\t            raise ValueError('the validate_ratio must be from 0.0 to 1.0')\n\t        # Organize dirs\n\t        if not isinstance(system_dir, Path):\n\t            system_dir = Path(system_dir)\n", "        if not system_dir.exists():\n\t            system_dir.mkdir()\n\t        training_dir = system_dir.joinpath('training_data')\n\t        validate_dir = system_dir.joinpath('validate_data')\n\t        if not training_dir.exists():\n\t            training_dir.mkdir()\n\t        if not validate_dir.exists():\n\t            validate_dir.mkdir()\n\t        if mode == 'att':\n\t            bundle = self.merge_atoms_same_mols()\n", "            if not split_mode:\n\t                split_mode = 'inside'\n\t        elif mode == 'std':\n\t            bundle = self.merge_conformers()\n\t            if not split_mode:\n\t                split_mode = 'outside'\n\t        else:\n\t            raise ValueError(\"the mode is only allowed to be 'att' or 'std'!\")\n\t        if split_mode == 'inside':\n\t            for i, mol in enumerate(bundle):\n", "                mol_training_dir = \\\n\t                    training_dir.joinpath(str(mol.atom_counts)) if mode == 'att' else system_dir.joinpath(str(i))\n\t                mol_validate_dir = \\\n\t                    validate_dir.joinpath(str(mol.atom_counts)) if mode == 'att' else system_dir.joinpath(str(i))\n\t                if not mol_training_dir.exists():\n\t                    mol_training_dir.mkdir()\n\t                if not mol_validate_dir.exists():\n\t                    mol_validate_dir.mkdir()\n\t                mol.to_dpmd_sys(mol_training_dir, mode, validate_ratio, mol_validate_dir)\n\t        elif split_mode == 'outside':\n", "            validate_bundle, training_bundle = bundle.choice(p=validate_ratio, get_remain=True)\n\t            # Save to files\n\t            to_files(training_bundle, training_dir)\n\t            to_files(validate_bundle, validate_dir)\n\t    def to_mix_mols(self):\n\t        \"\"\"\n\t        Return a new MolBundle, in which Molecule objects in container are converted to MixSameAtomMol\n\t        Returns:\n\t            MolBundle(MixSameAtomMol)\n\t        \"\"\"\n", "        return self.__class__([m.to_mix_mol() if not isinstance(m, ci.MixSameAtomMol) else m for m in self])\n\t    def to_mols(self):\n\t        \"\"\"\n\t        Return a new MolBundle, in which MixSameAtomMol objects in container are converted to Molecule\n\t        Returns:\n\t            MolBundle(Molecule)\n\t        \"\"\"\n\t        return self.__class__([m.to_mol() if isinstance(m, ci.MixSameAtomMol) else m for m in self])\n"]}
{"filename": "hotpot/tanks/cc.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : cc\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/6/4\n\t@Time   : 21:05\n\tThis module is to perform `Task` about Coordination Chemistry (cc)\n\t\"\"\"\n\timport os\n", "from pathlib import Path\n\tfrom typing import *\n\timport json\n\timport numpy as np\n\timport pandas as pd\n\tfrom openbabel import openbabel as ob\n\tfrom hotpot import data_root\n\tfrom hotpot.cheminfo import Molecule, Atom\n\tfrom hotpot.bundle import MolBundle\n\tfrom hotpot.utils.manage_machine import machine\n", "# the atomic single point energies determined Gaussian with various methods and basis sets\n\t_atom_single_point: dict = json.load(open(Path(data_root).joinpath('atom_single_point.json')))\n\tclass MetalLigandPair(Molecule):\n\t    \"\"\" The Molecule to represent a metal-ligand pair \"\"\"\n\t    def _set_bond_dissociation_energy(self, bde: float):\n\t        \"\"\"\"\"\"\n\t        bde_store = ob.OBCommentData()\n\t        bde_store.SetData(str(bde))\n\t        bde_store.SetAttribute('BDE')\n\t        self.ob_mol.CloneData(bde_store)\n", "    @property\n\t    def bond_dissociation_energy(self):\n\t        bde_store = self.ob_mol.GetData('BDE')\n\t        if bde_store:\n\t            bde = ob.toCommentData(bde_store).GetValue()\n\t            return float(bde)\n\t        return 0.0\n\t    @bond_dissociation_energy.setter\n\t    def bond_dissociation_energy(self, bde: float):\n\t        print(bde)\n", "        self._set_bond_dissociation_energy(bde)\n\tclass PairBundle(MolBundle):\n\t    \"\"\"The MolBundle which contains a ligands, a metal as well as their pairs assembled by them\"\"\"\n\t    class DirsFiles:\n\t        \"\"\"\n\t        Specify directory and files path for utils in Gaussian calculation\n\t        Attributes:\n\t            work_dir: the root dir for all results af Gaussian calculation\n\t            log_dir: the dir to store Gaussian log files\n\t            err_dir: the dir to store Gaussian error message\n", "            struct_dir: the structure after optimizing\n\t            energy_path: path of the csv file for storing energy of each structures (metal, ligand, pairs)\n\t            bde_path: path of the csv file for storing bond dissociation energy of each pairs\n\t        \"\"\"\n\t        def __init__(self, work_dir: Union[str, os.PathLike]):\n\t            if isinstance(work_dir, str):\n\t                work_dir = Path(work_dir)\n\t            self.work_dir = work_dir\n\t            self.chk_dir = work_dir.joinpath('chk')\n\t            self.log_dir = work_dir.joinpath('log')\n", "            self.err_dir = work_dir.joinpath('err')\n\t            self.struct_dir = work_dir.joinpath('struct')\n\t            self.energy_path = work_dir.joinpath('energy.csv')\n\t            self.bde_path = work_dir.joinpath('bde.csv')\n\t        @property\n\t        def ligand_chk_path(self):\n\t            return self.chk_dir.joinpath('ligand.chk')\n\t        @property\n\t        def ligand_log_path(self):\n\t            return self.log_dir.joinpath('ligand.log')\n", "        @property\n\t        def ligand_err_path(self):\n\t            return self.err_dir.joinpath('ligand.err')\n\t        @property\n\t        def ligand_struct_path(self):\n\t            return self.struct_dir.joinpath('ligand.mol2')\n\t        def make_dirs(self):\n\t            \"\"\" Check and make dirs \"\"\"\n\t            if not self.work_dir.exists():\n\t                self.work_dir.mkdir()\n", "            if not self.log_dir.exists():\n\t                self.log_dir.mkdir()\n\t            if not self.err_dir.exists():\n\t                self.err_dir.mkdir()\n\t            if not self.struct_dir.exists():\n\t                self.struct_dir.mkdir()\n\t        @property\n\t        def metal_chk_path(self):\n\t            return self.chk_dir.joinpath('metal.log')\n\t        @property\n", "        def metal_log_path(self):\n\t            return self.log_dir.joinpath('metal.log')\n\t        @property\n\t        def metal_err_path(self):\n\t            return self.err_dir.joinpath('metal.err')\n\t        @property\n\t        def metal_struct_path(self):\n\t            return self.struct_dir.joinpath('metal.mol2')\n\t        def pair_chk_path(self, idx: int):\n\t            return self.chk_dir.joinpath(f'pair_{idx}.chk')\n", "        def pair_log_path(self, idx: int):\n\t            return self.log_dir.joinpath(f'pair_{idx}.log')\n\t        def pair_err_path(self, idx: int):\n\t            return self.err_dir.joinpath(f'pair_{idx}.err')\n\t        def pair_struct_path(self, idx: int):\n\t            return self.struct_dir.joinpath(f'pair_{idx}.mol2')\n\t    def __init__(self, metal: Atom, ligand: Molecule, pairs: Sequence[Molecule]):\n\t        self.metal = Molecule()\n\t        self.metal.add_atom(metal)\n\t        self.metal.identifier = metal.symbol\n", "        self.ligand = ligand\n\t        super(PairBundle, self).__init__(pairs)\n\t    @classmethod\n\t    def _specify_dir_files(cls, work_dir: Union[str, os.PathLike]):\n\t        return cls.DirsFiles(work_dir)\n\t    @property\n\t    def pairs(self):\n\t        return self.mols\n\t    def determine_metal_ligand_bind_energy(\n\t            self, g16root: Union[str, os.PathLike], work_dir: Union[str, os.PathLike],\n", "            method: str = 'B3LYP', basis_set: str = '6-311', route: str = '',\n\t            cpu_uti: float = 0.75, skip_complete=False\n\t    ) -> pd.DataFrame:\n\t        def _run_gaussian(gauss_func: Callable, path_log_file, path_err_file):\n\t            \"\"\" Run Gaussian calculation \"\"\"\n\t            gauss_func(\n\t                g16root,\n\t                link0=[\n\t                    f'nproc={machine.take_CPUs(cpu_uti)}',\n\t                    f'Mem={machine.take_memory(cpu_uti)}GB'\n", "                ],\n\t                route=f'opt {method}/{basis_set} ' + route,\n\t                path_log_file=path_log_file,\n\t                path_err_file=path_err_file,\n\t                inplace_attrs=True\n\t            )\n\t        # Merge the pairs which same graph firstly\n\t        self.collect_identical(inplace=True)\n\t        # Specify directories and make these dirs\n\t        dirs_files = self._specify_dir_files(work_dir)\n", "        dirs_files.make_dirs()\n\t        # Energy sheet, bond dissociation energy (BDE) sheet\n\t        e_sheet, bde_sheet = [], []\n\t        # #####################################################################################################\n\t        # Save the initialized ligand structure\n\t        self.ligand.writefile('mol2', dirs_files.ligand_struct_path)\n\t        if skip_complete and dirs_files.ligand_log_path.exists():\n\t            # TODO: only l9999 error could be read\n\t            read_ligand = Molecule.read_from(dirs_files.ligand_log_path, 'g16log')\n\t            if isinstance(read_ligand, Molecule) and read_ligand.all_energy[-1]:\n", "                ligand_energy = read_ligand.all_energy[-1]\n\t            else:\n\t                _run_gaussian(self.ligand.gaussian, dirs_files.ligand_log_path, dirs_files.ligand_err_path)\n\t                ligand_energy = self.ligand.energy  # Retrieve the energy after optimizing the conformer\n\t        else:\n\t            # optimize the configure of ligand and calculate their total energy after optimization\n\t            _run_gaussian(self.ligand.gaussian, dirs_files.ligand_log_path, dirs_files.ligand_err_path)\n\t            ligand_energy = self.ligand.energy  # Retrieve the energy after optimizing the conformer\n\t        e_sheet.append(['ligand', self.ligand.smiles, ligand_energy])\n\t        # save the optimized structures\n", "        self.ligand.writefile('mol2', dirs_files.ligand_struct_path)\n\t        # ######################################################################################################\n\t        # Calculate the single point (sp) energy for metal\n\t        try:\n\t            metal_sp = _atom_single_point[self.metal.atoms[0].symbol][method][basis_set]\n\t        except KeyError:\n\t            _run_gaussian(self.metal.gaussian, dirs_files.metal_log_path, dirs_files.ligand_err_path)\n\t            ele_dict = _atom_single_point.setdefault(self.metal.atoms[0].symbol, {})\n\t            ele_method_dict = ele_dict.setdefault(method, {})\n\t            metal_sp = ele_method_dict[basis_set] = self.metal.energy  # Recording the calculate SCF energy to the dict\n", "            # Save the single point as package data\n\t            json.dump(_atom_single_point, open(Path(data_root).joinpath('atom_single_point.json'), 'w'), indent=True)\n\t        # Append the metal energy values to energy sheet\n\t        e_sheet.append(['metal', self.metal.smiles, metal_sp])\n\t        # Save metal structure\n\t        self.metal.writefile('mol2', dirs_files.metal_struct_path)\n\t        # #####################################################################################################\n\t        # Optimizing the conformer of metal-ligands pairs and Retrieve the energies in the last stable conformer\n\t        for i, pair in enumerate(self.pairs):\n\t            # Save initialized Metal-ligand pair struct\n", "            pair.writefile('mol2', dirs_files.pair_struct_path(i))\n\t            if skip_complete and dirs_files.pair_log_path(i).exists():\n\t                # TODO: only l9999 error could be read\n\t                read_pair = Molecule.read_from(dirs_files.pair_log_path(i), 'g16log')\n\t                if isinstance(read_pair, Molecule) and read_pair.all_energy[-1]:\n\t                    pair_energy = read_pair.all_energy[-1]\n\t                else:\n\t                    _run_gaussian(pair.gaussian, dirs_files.pair_log_path(i), dirs_files.pair_err_path(i))\n\t                    pair_energy = pair.energy  # Retrieve the energy after optimizing the conformer\n\t            else:\n", "                # optimize the configure of ligand and calculate their total energy after optimization\n\t                _run_gaussian(pair.gaussian, dirs_files.pair_log_path(i), dirs_files.pair_err_path(i))\n\t                pair_energy = pair.energy  # Retrieve the energy after optimizing the conformer\n\t            # Append the pairs energy values to energy sheet\n\t            e_sheet.append([f'pair_{i}', pair.smiles, pair_energy])\n\t            bde_sheet.append([f'pair_{i}', pair.smiles, pair_energy - ligand_energy - metal_sp])\n\t            # Save refined Metal-ligand pair struct\n\t            pair.writefile('mol2', dirs_files.pair_struct_path(i))\n\t        # #####################################################################################################\n\t        # Save the energy sheet to csv\n", "        e_sheet = np.array(e_sheet)\n\t        df = pd.DataFrame(e_sheet[:, 1:], index=e_sheet[:, 0], columns=['smiles', 'Energy(eV)'])\n\t        df.to_csv(dirs_files.energy_path)\n\t        # Save the BDE sheet to csv\n\t        bde_sheet = np.array(bde_sheet)\n\t        df = pd.DataFrame(bde_sheet[:, 1:], index=bde_sheet[:, 0], columns=['smiles', 'BDE(eV)'])\n\t        df.to_csv(dirs_files.bde_path)\n\t        return df\n\t    @classmethod\n\t    def read_2d_bde_results(cls, work_dir: Union[str, os.PathLike]):\n", "        \"\"\"\n\t        Read Calculated BDE results with the 2d molecular results, restore from SMILES str\n\t        Args:\n\t            work_dir: work dir to calculate the results\n\t        Returns:\n\t            PairBundle\n\t        \"\"\"\n\t        dirs_files = cls._specify_dir_files(work_dir)\n\t        bde_sheet = pd.read_csv(dirs_files.bde_path, index_col=0)\n\t        mols = []\n", "        for i, row in bde_sheet.iterrows():\n\t            mol = Molecule.read_from(row['smiles'], 'smi')\n\t            mol.bde = row['energy']\n\t        return mols\n\t    @classmethod\n\t    def read_3d_bde_results(cls, work_dir: Union[str, os.PathLike]):\n\t        \"\"\"\n\t        TODO\n\t        Read calculated BDE results with the 3d molecular results, the 3d structure stored in mol2 file\n\t        Args:\n", "            work_dir:  work dir to calculate the results\n\t        Returns:\n\t        \"\"\"\n\t        dirs_files = cls._specify_dir_files(work_dir)\n\t    @classmethod\n\t    def read_all_results(cls, work_dir):\n\t        \"\"\"\n\t        Read all direct calculated result in gaussian log file, include ligand, metal, pair, energy, force, charge,et al\n\t        Args:\n\t            work_dir:  work dir to calculate the results\n", "        Returns:\n\t        \"\"\"\n"]}
{"filename": "hotpot/tanks/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : __init__.py.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/20\n\t@Time   : 2:43\n\t\"\"\"\n\timport os\n\timport sys\n", "sys.path.append(os.path.abspath(os.path.dirname(__file__)))\n"]}
{"filename": "hotpot/tanks/features.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : features.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/23\n\t@Time   : 3:56\n\t\"\"\"\n\tclass ZeoPlusPlus:\n\t    ...\n"]}
{"filename": "hotpot/tanks/deepmd.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : deepmd.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/6/26\n\t@Time   : 21:42\n\t\"\"\"\n\timport os\n\timport json\n", "from typing import *\n\tfrom pathlib import Path\n\tfrom copy import copy\n\timport numpy as np\n\timport pandas as pd\n\tfrom hotpot import data_root\n\tfrom hotpot.cheminfo import Molecule, periodic_table\n\t# Manuscript training script\n\t_script = json.load(open(os.path.join(data_root, 'deepmd_script.json')))\n\tclass DeepSystem:\n", "    \"\"\"\n\t    A handle to convert the Molecule object ot DeepModeling System data format\n\t    Args:\n\t        mol(Molecule):\n\t    \"\"\"\n\t    required_items = ('coord', 'type')\n\t    check_atom_num = ('coord', 'force', 'charge')\n\t    share_same_conformers = ('type', 'coord', 'energy', 'force', 'charge', 'virial', 'box', 'identifiers')\n\t    need_reshape = ('coord', 'force')\n\t    def __init__(self, mol: Molecule = None, data: dict = None):\n", "        if mol:\n\t            self.data = self._organize_data(mol)\n\t            # check numpy.ndarray shape\n\t            self._check_shape()\n\t            # reshape array\n\t            self._reshape_array()\n\t        elif data:\n\t            self.data = data\n\t        else:\n\t            raise ValueError('the args mol or data should be given at least one!')\n", "    def __repr__(self):\n\t        return f'{self.__class__.__name__}({len(self.data[\"coord\"])})'\n\t    def __call__(\n\t            self,\n\t            save_dir: Union[str, os.PathLike], mode: str = 'std',\n\t            validate_ratio: Optional[float] = None,\n\t            validate_dir: Union[str, os.PathLike] = None\n\t    ):\n\t        \"\"\"\n\t        Save the DeepMData to files\n", "        Args:\n\t            save_dir(str|os.PathLike|Path): the root dir for all corresponding DeepMDate system files,\n\t             if the validate ratio is given, this the represent the training set save dir\n\t            validate_ratio(float): the ratio of validate set, if not given, not split the dataset\n\t            validate_dir: should be give when validate_ratio has been given, the root dir for validate data\n\t        \"\"\"\n\t        if not isinstance(save_dir, Path):\n\t            save_dir = Path(save_dir)\n\t        if validate_ratio:\n\t            if not isinstance(validate_dir, (str, os.PathLike)):\n", "                raise ValueError('the arguments validate_dir has not been given!')\n\t            elif isinstance(validate_dir, str):\n\t                validate_dir = Path(validate_dir)\n\t            if not 0 < validate_ratio < 1:\n\t                raise ValueError('the validate ratio should from 0 to 1')\n\t            indices = np.arange(len(self))\n\t            validate_idx = np.random.choice(indices, size=int(len(self) * validate_ratio), replace=False)\n\t            training_idx = np.setdiff1d(indices, validate_idx)\n\t            validate_data = self[validate_idx]\n\t            training_data = self[training_idx]\n", "            self._save_deep_md(training_data, save_dir, mode)\n\t            self._save_deep_md(validate_data, validate_dir, mode)\n\t        else:\n\t            self._save_deep_md(self, save_dir, mode)\n\t    def __getitem__(self, item: Union[int, slice, np.ndarray]):\n\t        data = copy(self.data)\n\t        if not isinstance(item, (int, slice, np.ndarray)):\n\t            raise TypeError('the item should be int, slice or numpy.ndarray')\n\t        for name in self.share_same_conformers:\n\t            arrays = self.data.get(name)\n", "            if isinstance(arrays, np.ndarray):\n\t                data[name] = arrays[item]\n\t        return self.__class__(data=data)\n\t    def __getattr__(self, item: str):\n\t        if item not in self.__dir__():\n\t            raise AttributeError(f'the {self.__class__.__name__} not have attribute {item}')\n\t        return self.data.get(item, None)\n\t    def __dir__(self) -> Iterable[str]:\n\t        return [\n\t            'type', 'type_map', 'nopbc', 'coord', 'box', 'energy', 'force', 'charge',\n", "            'atom_counts','virial', 'atom_ener', 'atom_pref', 'dipole', 'atom_dipole',\n\t            'polarizability', 'atomic_polarizability'\n\t        ]\n\t    def __len__(self):\n\t        return len(self.data['coord'])\n\t    def _check_shape(self):\n\t        \"\"\" Check whether the shape ndarray is correct \"\"\"\n\t        conf_counts = len(self.data['coord'])\n\t        atom_counts = self.data['atom_counts']\n\t        for name in self.required_items:\n", "            if self.data.get(name) is None:\n\t                raise ValueError('the required composition to make the dpmd system is incomplete!')\n\t        # Check whether the number of conformers are matching among data\n\t        if any(len(self.data[n]) != conf_counts for n in self.share_same_conformers if self.data[n] is not None):\n\t            raise ValueError('the number of conformers is not match')\n\t        # Check whether the number of atoms in data are matching to the molecular atoms\n\t        if any(self.data[n].shape[1] != atom_counts for n in self.check_atom_num if self.data[n] is not None):\n\t            raise ValueError('the number of atoms is not matching the number of atom is the molecule')\n\t    def _reshape_array(self):\n\t        for name in self.need_reshape:\n", "            item = self.data.get(name)\n\t            if isinstance(item, np.ndarray):\n\t                shape = item.shape\n\t                assert len(shape) == 3\n\t                self.data[name] = item.reshape((shape[0], shape[1] * shape[2]))\n\t    @staticmethod\n\t    def _organize_data(mol: Molecule) -> Dict[str, Any]:\n\t        \"\"\" Organize the conformer data to a dict \"\"\"\n\t        conf_num = len(mol.all_coordinates)\n\t        crystal = mol.crystal()\n", "        if crystal:\n\t            box = mol.crystal().vector  # angstrom\n\t            is_periodic = True\n\t        else:\n\t            box = np.zeros((3, 3))\n\t            for i in range(3):\n\t                box[i, i] = 100.\n\t            is_periodic = False\n\t        box = box.reshape(-1, 9).repeat(conf_num, axis=0)\n\t        return {\n", "            'type': mol.atomic_numbers_array,  # matrix of (conformer_counts, atom_counts)\n\t            'type_map': ['-'] + list(periodic_table.symbols),\n\t            'nopbc': not is_periodic,\n\t            'coord': mol.all_coordinates,  # angstrom,\n\t            'box': box,\n\t            'energy': mol.all_energy,  # eV\n\t            'force': mol.all_forces,  # Hartree/Bohr,\n\t            'charge': mol.all_atom_charges,  # q\n\t            'atom_counts': mol.atom_counts,\n\t            'identifiers': mol.identifier_array,\n", "            'virial': None,\n\t            'atom_ener': None,\n\t            'atom_pref': None,\n\t            'dipole': None,\n\t            'atom_dipole': None,\n\t            'polarizability': None,\n\t            'atomic_polarizability': None\n\t        }\n\t    @staticmethod\n\t    def _save_deep_md(system: 'DeepSystem', save_dir: Path, mode: str):\n", "        \"\"\" Save DeepMData to dir \"\"\"\n\t        if not save_dir.exists():\n\t            save_dir.mkdir()\n\t        # the dir of set data\n\t        set_root = save_dir.joinpath('set.000')\n\t        if not set_root.exists():\n\t            set_root.mkdir()\n\t        for name, value in system.data.items():\n\t            # if the value is None, go to next\n\t            if value is None:\n", "                continue\n\t            # Write the type raw\n\t            if name == 'type':\n\t                if mode == 'std':\n\t                    type_raw = value[0]\n\t                elif mode == 'att':\n\t                    type_raw = np.zeros(value[0].shape, dtype=int)\n\t                    np.save(set_root.joinpath(\"real_atom_types.npy\"), value)\n\t                else:\n\t                    raise ValueError('the mode just allows to be \"std\" or \"att\"')\n", "                with open(save_dir.joinpath('type.raw'), 'w') as writer:\n\t                    writer.write('\\n'.join([str(i) for i in type_raw]))\n\t            elif name == 'type_map':\n\t                with open(save_dir.joinpath('type_map.raw'), 'w') as writer:\n\t                    writer.write('\\n'.join([str(i) for i in value]))\n\t            # Create an empty 'nopbc', when the system is not periodical\n\t            elif name == 'nopbc' and value is True:\n\t                with open(save_dir.joinpath('nopbc'), 'w') as writer:\n\t                    writer.write('')\n\t            # Save the numpy format data\n", "            elif isinstance(value, np.ndarray):\n\t                np.save(str(set_root.joinpath(f'{name}.npy')), value)\n\tdef make_script():\n\t    \"\"\"\"\"\"\n\tdef convert_lcurve_to_csv(path_lcurve: Union[str, Path], path_csv: Union[str, Path] = None) -> pd.DataFrame:\n\t    \"\"\" Convert the lcurve.out file to csv file \"\"\"\n\t    path_lcurve = Path(path_lcurve)\n\t    if not path_csv:\n\t        path_csv = path_lcurve.parent.joinpath('lcurve.csv')\n\t    else:\n", "        path_csv = Path(path_csv)\n\t    df = pd.DataFrame(np.genfromtxt(path_lcurve, names=True))\n\t    df.set_index(df.columns[0], inplace=True)\n\t    df.to_csv(path_csv)\n\t    return df\n"]}
{"filename": "hotpot/tanks/qm/abacus.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : abacus\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/24\n\t@Time   : 18:09\n\t\"\"\"\n"]}
{"filename": "hotpot/tanks/qm/gaussian.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : qm.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/3/20chgrp\n\t@Time   : 2:44\n\t\"\"\"\n\timport os\n\timport re\n", "from pathlib import Path\n\timport resource\n\timport subprocess\n\timport io\n\tfrom typing import *\n\tfrom abc import ABC, abstractmethod\n\timport numpy as np\n\timport cclib\n\tclass GaussianRunError(BaseException):\n\t    \"\"\" Raise when the encounter error in run gaussian \"\"\"\n", "class FailToHandle(Warning):\n\t    \"\"\" Report this Warning when GaussErrorHandle Fail to handle an error \"\"\"\n\tclass GaussOut:\n\t    \"\"\"\n\t    This class is used to store Gaussian output and error message from g16 process.\n\t    In addition, this class will extract and organize critical information.\n\t    \"\"\"\n\t    # Compile the error notice sentence\n\t    _head = re.compile('Error termination via Lnk1e in')\n\t    _link = re.compile(r'l\\d+[.]exe')\n", "    _path = re.compile(r'([/|\\\\]\\S+)*[/|\\\\]' + _link.pattern)\n\t    _week = re.compile('(Mon|Tue|Wed|Thu|Fri|Sat|Sun)')\n\t    _month = re.compile('(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)')\n\t    _date = re.compile(_week.pattern + ' ' + _month.pattern + r' [0-2]?\\d')\n\t    _time = re.compile(r'\\d{2}:\\d{2}:\\d{2} 20\\d{2}\\.')\n\t    _error_link = re.compile(_head.pattern + ' ' + _path.pattern + ' at ' + _date.pattern + ' ' + _time.pattern)\n\t    def __init__(self, stdout: str, stderr: str):\n\t        self.stdout = stdout\n\t        self.stderr = stderr\n\t    @property\n", "    def is_error(self) -> bool:\n\t        return True if self.stderr else False\n\t    @property\n\t    def error_link(self) -> str:\n\t        if self.is_error:\n\t            match = self._error_link.search(self.stdout)\n\t            if match:\n\t                matched_line = self.stdout[match.start():match.end()]\n\t                link = self._link.search(matched_line)\n\t                return matched_line[link.start(): link.end()][:-4]\n", "    @property\n\t    def is_hangup_error(self):\n\t        if self.is_error and self.stderr.find('Error: hangup'):\n\t            return True\n\t        return False\n\t    @property\n\t    def is_opti_convergence_error(self):\n\t        \"\"\" The gaussian error is caused by the non-convergence of the optimizing conformer \"\"\"\n\t        if self.is_error and self.error_link == 'l9999' and self.stdout.find('-- Number of steps exceeded,'):\n\t            return True\n", "        return False\n\t    @property\n\t    def is_scf_convergence_error(self):\n\t        \"\"\" Get True when the Output show the SCF non-convergence \"\"\"\n\t        if self.error_link == 'l502' and self.stdout.find(\"Convergence failure -- run terminated.\"):\n\t            return True\n\t        return False\n\t    @property\n\t    def is_scrf_Vdw_cage_error(self):\n\t        \"\"\" Error caused by the Vdw surface is not suitable to estimate the accessible surface inside molecular cage \"\"\"\n", "        if self.error_link == 'l502' and self.stdout.find(\"Inv3 failed in PCMMkU.\"):\n\t            return True\n\t        return False\n\t    @property\n\t    def is_ZMatrix_error(self):\n\t        if self.error_link == 'l103' and \\\n\t                self.stdout.find('FormBX had a problem.') and \\\n\t                self.stdout.find('Berny optimization.'):\n\t            return True\n\t        return False\n", "    def report(self) -> list[str]:\n\t        \"\"\" Report all error messages \"\"\"\n\t        error_judge = re.compile(r'is_.+_error')\n\t        print(\"Meet Gaussian Error:\")\n\t        errors = []\n\t        for name in self.__dir__():\n\t            if hasattr(self, name) and error_judge.fullmatch(name) and getattr(self, name):\n\t                print(f'\\t--{name[3:]};')\n\t                errors.append(name)\n\t        return errors\n", "class Gaussian:\n\t    \"\"\"\n\t    A class for setting up and running Gaussian 16 calculations.\n\t    Attributes:\n\t        g16root (str): The path to the Gaussian 16 root directory.\n\t    \"\"\"\n\t    def __init__(\n\t            self,\n\t            g16root: Union[str, os.PathLike],\n\t            path_gjf: Union[str, os.PathLike] = None,\n", "            path_log: Union[str, os.PathLike] = None,\n\t            path_err: Union[str, os.PathLike] = None,\n\t            report_set_resource_error: bool = False,\n\t    ):\n\t        \"\"\"\n\t        This method sets up the required environment variables and resource limits for Gaussian 16.\n\t        Args:\n\t            g16root (Union[str, os.PathLike]): The path to the Gaussian 16 root directory.\n\t            path_gjf: the path of input script to be written and read\n\t            path_log: the path of output result to be written and read\n", "            path_err: the path of  error message to be written\n\t            report_set_resource_error: Whether to report the errors when set the environments and resource\n\t        Keyword Args:\n\t            this could give any arguments for GaussErrorHandle\n\t        Raises:\n\t            TypeError: If `g16root` is not a string or a path-like object.\n\t        \"\"\"\n\t        self.g16root = Path(g16root)\n\t        # Configure running environments and resources\n\t        self.envs = self._set_environs()\n", "        self._set_resource_limits(report_set_resource_error)\n\t        # the default running input and output file\n\t        self.p_input = Path('input.gjf') if not path_gjf else Path(path_gjf)\n\t        self.p_output = Path('output.log') if not path_log else Path(path_log)\n\t        self.p_err = Path(path_err) if path_err else None\n\t        # preserve for storing running data\n\t        self.path_chk = None\n\t        self.path_rwf = None\n\t        self.parsed_input = None\n\t        self.g16process = None  # to link to the g16 subprocess\n", "        self.output = None\n\t        self.stdout = None\n\t        self.stderr = None\n\t    @staticmethod\n\t    def _parse_route(route: str) -> Dict:\n\t        \"\"\" Parse the route of gjf file \"\"\"\n\t        # compile regular expressions\n\t        parenthesis = re.compile(r'\\(.+\\)')\n\t        # Normalize the input route\n\t        route = re.sub(r'\\s*=\\s*', r'=', route)  # Omit the whitespace surround with the equal signal\n", "        route = re.sub(r'=\\(', r'\\(', route)  # Omit the equal signal before the opening parenthesis\n\t        route = re.sub(r'\\s+', ' ', route)  # Reduce the multiply whitespace to one\n\t        # Replace the delimiter outside the parenthesis to whitespace, inside to common\n\t        in_parenthesis = {m.start(): m.end() for m in parenthesis.finditer(route)}\n\t        list_route = []\n\t        for i, char in enumerate(route):\n\t            if char in [',', '\\t', '/', ' ']:\n\t                if any(si < i < ei for si, ei in in_parenthesis.items()):\n\t                    list_route.append(',')\n\t                else:\n", "                    list_route.append(' ')\n\t            else:\n\t                list_route.append(char)\n\t        route = ''.join(list_route)\n\t        # Separate route to items\n\t        items = route.split()\n\t        parsed_route = {}\n\t        for item in items:\n\t            opening_parenthesis = re.findall(r'\\(', item)\n\t            closing_parenthesis = re.findall(r'\\)', item)\n", "            if opening_parenthesis:\n\t                assert len(opening_parenthesis) == 1 and len(closing_parenthesis) == 1 and item[-1] == ')'\n\t                kword = item[:item.index('(')]\n\t                options = item[item.index('(') + 1:-1]\n\t                opt_dict = parsed_route.setdefault(kword, {})\n\t                for option in options.split(','):\n\t                    opt_value = option.split('=')\n\t                    if len(opt_value) == 1:\n\t                        opt_dict[opt_value[0]] = None\n\t                    elif len(opt_value) == 2:\n", "                        opt_dict[opt_value[0]] = opt_value[1]\n\t                    else:\n\t                        raise ValueError('the given route string is wrong!!')\n\t            else:\n\t                kword_opt_value = item.split('=')\n\t                if len(kword_opt_value) == 1:\n\t                    parsed_route[kword_opt_value[0]] = None\n\t                elif len(kword_opt_value) == 2:\n\t                    parsed_route[kword_opt_value[0]] = kword_opt_value[1]\n\t                elif len(kword_opt_value) == 3:\n", "                    parsed_route[kword_opt_value[0]] = {kword_opt_value[1]: kword_opt_value[2]}\n\t                else:\n\t                    raise ValueError('the given route string is wrong!!')\n\t        return parsed_route\n\t    def _parse_input_script(self, script: str) -> dict:\n\t        \"\"\" Parse the input script to dict \"\"\"\n\t        lines = script.splitlines()\n\t        c = 0  # count of current line\n\t        info = {}\n\t        # Extract link0\n", "        link0 = []\n\t        while lines[c][0] == '%':\n\t            link0.append(lines[c])\n\t            c += 1\n\t        # Check link0\n\t        if not link0:\n\t            raise ValueError('the provided input script is incorrect, not found link0 lines')\n\t        # Parse link0\n\t        link0 = ' '.join(link0)\n\t        parsed_link0 = info.setdefault('link0', {})\n", "        for l0 in link0.split():\n\t            assert l0[0] == '%'\n\t            cmd_value = l0[1:].split('=')\n\t            if len(cmd_value) == 1:\n\t                parsed_link0[cmd_value[0]] = None\n\t            elif len(cmd_value) == 2:\n\t                parsed_link0[cmd_value[0]] = cmd_value[1]\n\t            else:\n\t                raise ValueError(\"can't parse the link0, the give input script might wrong!!\")\n\t        # Extract route\n", "        route = []\n\t        while lines[c] and lines[c][0] == '#':\n\t            route.append(lines[c][2:])\n\t            c += 1\n\t        if not route:\n\t            raise ValueError('the provided input script is incorrect, not found route lines')\n\t        # Parse the route\n\t        route = ' '.join(route)\n\t        info['route'] = self._parse_route(route)\n\t        # Extract the title line\n", "        c += 1  # skip the blank line\n\t        if lines[c]:\n\t            info['title'] = lines[c]\n\t        else:\n\t            raise ValueError('the provided input script is incorrect, not found title lines')\n\t        c += 2  # skip the blank line\n\t        # Extract the molecular specification\n\t        # Extract the charge and spin\n\t        charge, spin = map(int, lines[c].strip().split())\n\t        info['charge'], info['spin'] = charge, spin\n", "        c += 1\n\t        # Extract the atoms information\n\t        atoms, coordinates = [], []\n\t        while lines[c].strip():\n\t            atom_line: list[str] = lines[c].strip().split()\n\t            atom = atom_line[0]\n\t            xyz = list(map(float, atom_line[1:4]))\n\t            atoms.append(atom)\n\t            coordinates.append(xyz)\n\t            c += 1\n", "        info['atoms'] = atoms\n\t        info['coordinates'] = np.array(coordinates)\n\t        # Extract other info\n\t        i = 0\n\t        while c < len(lines):\n\t            other = info.setdefault(f'other_{i}', [])\n\t            if lines[c].strip():\n\t                other.append(lines[c])\n\t            elif other:\n\t                i += 1\n", "            c += 1\n\t        return info\n\t    def _rewrite_input_script(self):\n\t        \"\"\"\"\"\"\n\t        # Whether the input info have been given。\n\t        if not self.parsed_input:\n\t            raise AttributeError(\n\t                \"Can't find the structured input data, the input script should be given by string script or parsed dict\"\n\t            )\n\t        info = self.parsed_input\n", "        script = \"\"\n\t        # Link0 commands\n\t        link0: dict = info['link0']\n\t        for cmd, value in link0.items():\n\t            if value:\n\t                script += f'%{cmd}={value}\\n'\n\t            else:\n\t                script += f'%{cmd}\\n'\n\t        # Route keywords\n\t        script += '#'\n", "        route: dict = info['route']\n\t        for kw, opt in route.items():\n\t            if not opt:\n\t                script += f' {kw}'\n\t            elif isinstance(opt, str):\n\t                script += f' {kw}={opt}'\n\t            elif isinstance(opt, dict):\n\t                list_opt = []\n\t                for k, v in opt.items():\n\t                    if v:\n", "                        list_opt.append(f'{k}={v}')\n\t                    else:\n\t                        list_opt.append(k)\n\t                script += f' {kw}(' + ','.join(list_opt) + ')'\n\t            else:\n\t                ValueError('the give gjf input info is wrong')\n\t        script += '\\n\\n'\n\t        # Title\n\t        script += info['title']\n\t        script += '\\n\\n'\n", "        # Charge and spin\n\t        script += f\"{info['charge']} {info['spin']}\\n\"\n\t        # Atoms specification\n\t        assert len(info['atoms']) == len(info['coordinates'])\n\t        for atom, xyz in zip(info['atoms'], info['coordinates']):\n\t            x, y, z = xyz\n\t            script += f'{atom} {x} {y} {z}\\n'\n\t        script += '\\n'\n\t        # Other contents\n\t        i = 0\n", "        while True:\n\t            other = info.get(f'other_{i}')\n\t            if other:\n\t                script += '\\n'.join(other)\n\t            else:\n\t                break\n\t        script += '\\n\\n'\n\t        return script\n\t    def _set_environs(self):\n\t        \"\"\"\n", "        Sets up the environment variables required for running Gaussian 16.\n\t        This method sets the environment variables required for Gaussian 16 to function correctly. If the\n\t        `g16root` attribute is not set, the method sets it to the user's home directory.\n\t        Returns:\n\t            Dict[str, str]: A dictionary of the updated environment variables.\n\t        \"\"\"\n\t        if self.g16root:\n\t            g16root = str(self.g16root)\n\t        else:\n\t            g16root = os.path.expanduser(\"~\")\n", "        GAUOPEN = f'{g16root}:gauopen'\n\t        GAUSS_EXEDIR = f'{g16root}/g16/bsd:{g16root}/g16'\n\t        GAUSS_LEXEDIR = f\"{g16root}/g16/linda-exe\"\n\t        GAUSS_ARCHDIR = f\"{g16root}/g16/arch\"\n\t        GAUSS_BSDDIR = f\"{g16root}/g16/bsd\"\n\t        GV_DIR = f\"{g16root}/gv\"\n\t        PATH = os.environ.get('PATH')\n\t        if PATH:\n\t            PATH = f'{PATH}:{GAUOPEN}:{GAUSS_EXEDIR}'\n\t        else:\n", "            PATH = f'{GAUOPEN}:{GAUSS_EXEDIR}'\n\t        PERLLIB = os.environ.get('PERLLIB')\n\t        if PERLLIB:\n\t            PERLLIB = f'{PERLLIB}:{GAUOPEN}:{GAUSS_EXEDIR}'\n\t        else:\n\t            PERLLIB = f'{GAUOPEN}:{GAUSS_EXEDIR}'\n\t        PYTHONPATH = os.environ.get('PYTHONPATH')\n\t        if PYTHONPATH:\n\t            PYTHONPATH = f'{PYTHONPATH}:{GAUOPEN}:{GAUSS_EXEDIR}'\n\t        else:\n", "            PYTHONPATH = f'{PYTHONPATH}:{GAUSS_EXEDIR}'\n\t        _DSM_BARRIER = \"SHM\"\n\t        LD_LIBRARY64_PATH = None\n\t        LD_LIBRARY_PATH = None\n\t        if os.environ.get('LD_LIBRARY64_PATH'):\n\t            LD_LIBRARY64_PATH = f\"{GAUSS_EXEDIR}:{GV_DIR}/lib:{os.environ['LD_LIBRARY64_PATH']}\"\n\t        elif os.environ.get('LD_LIBRARY64_PATH'):\n\t            LD_LIBRARY_PATH = f\"{GAUSS_EXEDIR}:{os.environ['LD_LIBRARY_PATH']}:{GV_DIR}/lib\"\n\t        else:\n\t            LD_LIBRARY_PATH = f\"{GAUSS_EXEDIR}:{GV_DIR}/lib\"\n", "        G16BASIS = f'{g16root}/g16/basis'\n\t        PGI_TEAM = f'trace,abort'\n\t        env_vars = {\n\t            'g16root': g16root,\n\t            'GAUSS_EXEDIR': GAUSS_EXEDIR,\n\t            'GAUSS_LEXEDIR': GAUSS_LEXEDIR,\n\t            'GAUSS_ARCHDIR': GAUSS_ARCHDIR,\n\t            'GAUSS_BSDDIR': GAUSS_BSDDIR,\n\t            'GV_DIR': GV_DIR,\n\t            'PATH': PATH,\n", "            'PERLLIB': PERLLIB,\n\t            'PYTHONPATH': PYTHONPATH,\n\t            '_DSM_BARRIER': _DSM_BARRIER,\n\t            'LD_LIBRARY64_PATH': LD_LIBRARY64_PATH,\n\t            'LD_LIBRARY_PATH': LD_LIBRARY_PATH,\n\t            'G16BASIS': G16BASIS,\n\t            'PGI_TERM': PGI_TEAM\n\t        }\n\t        env_vars = {n: v for n, v in env_vars.items() if v is not None}\n\t        # Merge the environment variables with the current environment\n", "        updated_env = os.environ.copy()\n\t        updated_env.update(env_vars)\n\t        return updated_env\n\t    @staticmethod\n\t    def _set_resource_limits(report_error: bool):\n\t        \"\"\"Sets resource limits for the Gaussian 16 process to avoid system crashes.\n\t        This method sets resource limits for the Gaussian 16 process to avoid system crashes. Specifically,\n\t        it sets the limits for the following resources: core dump size, data segment size, file size,\n\t        locked-in-memory address space, resident set size, number of open files, stack size, CPU time,\n\t        and number of processes.\n", "        \"\"\"\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_CORE, (0, 0))\n\t        except ValueError:\n\t            if report_error:\n\t                print(RuntimeWarning('Unable to raise the RLIMIT_CORE limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_DATA, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n", "                print(RuntimeWarning('Unable to raise the RLIMIT_DATA limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_FSIZE, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n\t                print(RuntimeWarning('Unable to raise the RLIMIT_FSIZE limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_MEMLOCK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n", "                print(RuntimeWarning('Unable to raise the RLIMIT_MEMLOCK limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_RSS, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n\t                print(RuntimeWarning('Unable to raise the RLIMIT_RSS limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_NOFILE, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n", "                print(RuntimeWarning('Unable to raise the RLIMIT_NOFILE limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n\t                print(RuntimeWarning('Unable to raise the RLIMIT_STACK limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_CPU, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n", "                print(RuntimeWarning('Unable to raise the RLIMIT_CPU limit.'))\n\t        try:\n\t            resource.setrlimit(resource.RLIMIT_NPROC, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\t        except ValueError:\n\t            if report_error:\n\t                print(RuntimeWarning('Unable to raise the RLIMIT_NPROC limit.'))\n\t    def full_option_values(self, title: str, kwd: str = None, op: Any = None, value: Optional = None):\n\t        \"\"\"\n\t        Full the value to gauss parsed_input dict\n\t        Args:\n", "            title: the first level of parsed input, like: 'link0', 'route', 'title', 'charge', 'spin', ...\n\t            kwd:\n\t            op:\n\t            value:\n\t        Returns:\n\t        \"\"\"\n\t        option_values = self.parsed_input[title].get(kwd)\n\t        if option_values is None:\n\t            if value is None:\n\t                self.parsed_input[title][kwd] = op  # Note: the op could be None, it's allowed\n", "            else:\n\t                self.parsed_input[title][kwd] = {op: value}\n\t        elif isinstance(option_values, dict):\n\t            self.parsed_input[title][kwd].update({op: value})\n\t        else:\n\t            self.parsed_input[title][kwd] = {option_values: None, op: value}\n\t    def molecule_setter_dict(self) -> dict:\n\t        \"\"\" Prepare the property dict for Molecule setters \"\"\"\n\t        data = self.parse_log()\n\t        return {\n", "            'atoms.partial_charge': data.atomcharges['mulliken'],\n\t            'energy': data.scfenergies[-1],\n\t            'spin': data.mult,\n\t            'charge': data.charge,\n\t            'mol_orbital_energies': data.moenergies,  # eV,\n\t            'coordinates': data.atomcoords[-1]\n\t        }\n\t    def parse_log(self):\n\t        \"\"\" Parse the gaussian log file and save them into self \"\"\"\n\t        string_buffer = io.StringIO(self.stdout)\n", "        return cclib.ccopen(string_buffer).parse()\n\t    def run(self, script: str = None):\n\t        \"\"\"Runs the Gaussian 16 process with the given script and additional arguments.\n\t        This method sets up the required environment variables and resource limits for Gaussian 16 before\n\t        running the process using `subprocess.Popen`. It takes an input script and any additional arguments\n\t        to pass to `Popen`, and returns a tuple of the standard output and standard error of the process.\n\t        Args:\n\t            script (str): The input script for the Gaussian 16 process.\n\t        Returns\n\t            Tuple[str, str]: A tuple of the standard output and standard error of the process\n", "        \"\"\"\n\t        if script:\n\t            self.parsed_input = self._parse_input_script(script)  # parse input data\n\t        script = self._rewrite_input_script()\n\t        with open(self.p_input, 'w') as writer:\n\t            writer.write(script)\n\t        # Run Gaussian using subprocess\n\t        self.g16process = subprocess.Popen(\n\t            ['g16', str(self.p_input), str(self.p_output)],\n\t            bufsize=-1, stdin=subprocess.PIPE,\n", "            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n\t            env=self.envs, universal_newlines=True\n\t        )\n\t        self.stdout, self.stderr = self.g16process.communicate()\n\t        if not self.stdout:\n\t            with open(self.p_output) as file:\n\t                self.stdout = file.read()\n\t        self.output = GaussOut(self.stdout, self.stderr)\n\t    def to_conformer(self, cfm_idx=-1, fail_raise=False):\n\t        \"\"\"\n", "        read the conformers from stdout, and convert the initial conformer in the input.gjf file to be specific one\n\t        Args:\n\t            cfm_idx: which conformer in the stdout is converted to the input file, default: last conformer(-1)\n\t            fail_raise: whether to raise error, if fail to convert to the specific conformer.\n\t             the error might be caused by the format of stdout is unreadable for Molecule class\n\t        \"\"\"\n\t        if not self.stdout:\n\t            raise AttributeError('the stdout do not save any conformers')\n\t        # If success, optimize with ses surface from the last conformer\n\t        from hotpot.cheminfo import Molecule\n", "        mol = Molecule.read_from(self.stdout, 'g16log', force=True)\n\t        try:\n\t            self.parsed_input['coordinates'] = mol.all_coordinates[-cfm_idx]\n\t            self.parsed_input['atoms'] = [a.label for a in mol.atoms]\n\t        except AttributeError:\n\t            if fail_raise:\n\t                raise RuntimeError('Fail to convert the conformers, the stdout might be unreadable!')\n\t            else:\n\t                print(RuntimeWarning('Fail to convert the conformers, the stdout might be unreadable!'))\n\t        except IndexError as err:\n", "            if fail_raise:\n\t                raise err\n\t            else:\n\t                print(err)\n\tclass GaussRun:\n\t    \"\"\" Run the Gaussian program \"\"\"\n\t    def __init__(self, gauss: Gaussian, debugger: Optional[Union[str, \"Debugger\"]] = 'auto', **kwargs):\n\t        self.gauss = gauss\n\t        self.stdout = []\n\t        self.stderr = []\n", "        # Configure Error Handle\n\t        if debugger is None:\n\t            self.debugger = None\n\t        elif isinstance(debugger, str):\n\t            kwargs['max_try'] = kwargs.get('max_try', 2)\n\t            if debugger == 'auto':\n\t                self.debugger = AutoDebug()\n\t            elif debugger == 'restart':\n\t                self.debugger = Restart(**kwargs)\n\t            elif debugger == 'last_conformer':\n", "                self.debugger = RerunFromLastConformer(**kwargs)\n\t            else:\n\t                raise ValueError(f\"can't find error handle name {debugger}\")\n\t        elif isinstance(debugger, Debugger):\n\t            self.debugger = debugger\n\t        else:\n\t            raise TypeError('the given error handle should be str or a GaussErrorHandle type')\n\t    def __call__(self, script=None, max_debug=5):\n\t        \"\"\"\"\"\"\n\t        self.gauss.run(script)\n", "        run_time = 0\n\t        while self.gauss.stderr and run_time < max_debug:\n\t            if self.debugger and self.debugger(self.gauss):\n\t                self.stdout.append(self.gauss.stdout)\n\t                self.stderr.append(self.gauss.stderr)\n\t                self.gauss.run()\n\t                if self.gauss.stderr:\n\t                    print(f\"Fail to debug with error: {self.gauss.output.error_link}!!!\")\n\t                else:\n\t                    print(\"Debug Successful!!!\")\n", "                run_time += 1\n\t            else:\n\t                break\n\t        # Report the results\n\t        if self.gauss.stderr:\n\t            print(f\"Terminate {self.gauss.parsed_input['title']} Gaussian with {self.gauss.output.error_link} Error!!!\")\n\t        else:\n\t            print(f\"Normalize Complete {self.gauss.parsed_input['title']} Gaussian Calculation !!!\")\n\t        return self.gauss\n\t# Error Handles\n", "class Debugger(ABC):\n\t    \"\"\" Basic class to handle the error release from gaussian16 \"\"\"\n\t    def __call__(self, gauss: Gaussian) -> bool:\n\t        \"\"\" Call for handle the g16 errors \"\"\"\n\t        if self.trigger(gauss):\n\t            self.notice()\n\t            self.handle(gauss)\n\t            return True\n\t        return False\n\t    @staticmethod\n", "    def _find_keyword_name(target: dict, shortest: str) -> Union[None, str]:\n\t        \"\"\"\n\t        Find the input keyword by their allowed shortest name.\n\t        For example:\n\t            the shortest name `optimization` in route is `opt`, so any keyword from the `opt` to `optimization`\n\t            are allowed. In the input script, the user might give any one of the allowed keyword, such as `opt`,\n\t            `optimiz` or `optimizati`, this method will find the real user-given keyword by `opt`.\n\t        Args:\n\t            target(dict): the subitem of parsed_input, like: link0, route.\n\t            shortest: the shortest name, say `opt`\n", "        Returns:\n\t            the actual user-given keyword\n\t        \"\"\"\n\t        searcher = re.compile(f\"{shortest}.*\", re.IGNORECASE)\n\t        kwd_name = None\n\t        for name in target:\n\t            match = searcher.fullmatch(name)\n\t            if match:\n\t                kwd_name = match.string[match.start():match.end()]\n\t                break\n", "        return kwd_name\n\t    @abstractmethod\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        \"\"\" Could the ErrorHandle is suitable for this error \"\"\"\n\t    @abstractmethod\n\t    def handle(self, gauss: Gaussian):\n\t        \"\"\" Specified by the children classes \"\"\"\n\t    def notice(self):\n\t        print(f'Gauss Debug by {self.__class__.__name__}')\n\tclass AutoDebug(Debugger, ABC):\n", "    \"\"\" AutoHandle Gaussian Error \"\"\"\n\t    _handles = {}\n\t    def __init__(self, *selected_method: str, invert=False):\n\t        if not selected_method:\n\t            self.handles = {name: handle() for name, handle in self._handles.items()}\n\t        else:\n\t            if invert:\n\t                self.handles = {name: handle() for name, handle in self._handles.items() if name not in selected_method}\n\t            else:\n\t                self.handles = {name: handle() for name, handle in self._handles.items() if name in selected_method}\n", "        self.applied_handle_name = None\n\t    @classmethod\n\t    def register(cls, handle_type: type):\n\t        cls._handles[handle_type.__name__] = handle_type\n\t        return handle_type\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        for name, handle in self.handles.items():\n\t            if handle.trigger(gauss):\n\t                self.applied_handle_name = name\n\t                return True\n", "        return False\n\t    def handle(self, gauss: Gaussian):\n\t        handle = self.handles[self.applied_handle_name]\n\t        handle(gauss)\n\t@AutoDebug.register\n\tclass Ignore(Debugger, ABC):\n\t    \"\"\"\n\t    To handle the optimization can't fall into the optimal point which a tiny imaginary frequency.\n\t    The optimization tasks might be hard to converge for certain reasons.\n\t    In especial, the Minnesota functional(like M062X) might oscillate near the optimal point with imaginary frequency.\n", "    There are some complicated method to solve this problem. However, If someone discovers that during the final stage\n\t    of optimization, the molecules are only making slight vibrations around a certain equilibrium point, it would be\n\t    more direct to ignore this error because the final configuration is likely not far from the optimal configuration.\n\t    Trigger:\n\t        task: optimization\n\t        method: unspecific\n\t        basis: unspecific\n\t        keywords: unspecific\n\t        error_link: l9999\n\t        message: -- Number of steps exceeded,\n", "        other:\n\t            Among last 10% opti steps, Max(|E(N)-E(N-1)|) < 0.05 eV and Min(|E(N)-E(N-1)|) / Max(|E(N)-E(N-1)|) > 0.9\n\t            where, the E(N) is the electron energy at the N opti step.\n\t    Handle:\n\t        ignore this error and continue the next work.\n\t    \"\"\"\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        if gauss.output.is_opti_convergence_error:\n\t            from hotpot.cheminfo import Molecule\n\t            mol = Molecule.read_from(gauss.stdout, fmt='g16log')\n", "            if not mol:\n\t                raise IOError('the stdout cannot parse to Molecule object')\n\t            last_energies = mol.all_energy[-int(len(mol.all_energy)):]\n\t            diff_energies = np.abs(last_energies[1:] - last_energies[:-1])\n\t            if diff_energies.max() < 0.05 and diff_energies.min() / diff_energies.max() > 0.9:\n\t                return True\n\t            return False\n\t    def handle(self, gauss: Gaussian):\n\t        \"\"\" Continue the next work and save the calculation data \"\"\"\n\t@AutoDebug.register\n", "class ReOptiWithSASSurfaceSCRF(Debugger, ABC):\n\t    \"\"\"\n\t    This Handle for the optimization task in solvent, when some tiny molecular cages are formed.\n\t    In this case, the default vdW surface overestimate the accessible surface inside the cages,\n\t    and cause inverse PCM matrix the non-convergent.\n\t    To handle the error, the Gaussian will re-optimize the molecule with SAS surface first and\n\t    optimize with SES surface finally.\n\t    Trigger:\n\t        task: optimization\n\t        methods: unspecified\n", "        basis: unspecified\n\t        keywords: SCRF\n\t        error_link: l502, l508\n\t        message: Inv3 failed in PCMMkU.\n\t    Handle:\n\t        rerun the optimization with SAS and SES surfaces serially\n\t    \"\"\"\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        if gauss.output.is_scrf_Vdw_cage_error and \\\n\t          all(self._find_keyword_name(gauss.parsed_input['route'], kwd) for kwd in ('opt', 'scrf')):\n", "            return True\n\t        return False\n\t    def handle(self, gauss: Gaussian):\n\t        route = gauss.parsed_input['route']\n\t        scrf_name = self._find_keyword_name(route, 'scrf')\n\t        gauss.full_option_values('route', scrf_name, 'smd')\n\t        gauss.full_option_values('route', scrf_name, 'read')\n\t        # convert the last conformer to the input script\n\t        gauss.to_conformer()\n\t        # the other items in the end of input script, add sas surface\n", "        max_other = max(map(int, [t.split('_')[1] for t in gauss.parsed_input if 'other_' in t]))\n\t        new_other = f\"other_{max_other+1}\"\n\t        gauss.parsed_input[new_other] = 'surface=sas'\n\t        # optimize with sas surface first\n\t        gauss.run()\n\t        # if the optimization is unsuccessful, terminate\n\t        if gauss.stderr:\n\t            print('Fail to optimize in SAS surface!!!')\n\t            return None\n\t        gauss.to_conformer()\n", "        gauss.parsed_input[new_other] = 'surface=ses AddSph'\n\t@AutoDebug.register\n\tclass ReOptiByCartesian(Debugger, ABC):\n\t    \"\"\" \"\"\"\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        # If the error is ZMatrix trouble and the original task is optimization\n\t        return gauss.output.is_ZMatrix_error and self._find_keyword_name(gauss.parsed_input['route'], 'opt')\n\t    def handle(self, gauss: Gaussian):\n\t        route = gauss.parsed_input['route']\n\t        opt_name = self._find_keyword_name(route, 'opt')\n", "        gauss.full_option_values('route', opt_name, \"Cartesian\")\n\t@AutoDebug.register\n\tclass Restart(Debugger, ABC):\n\t    \"\"\" Handle Gaussian error by Restart \"\"\"\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        if gauss.output.is_hangup_error:\n\t            return True\n\t        return False\n\t    def handle(self, gauss: Gaussian):\n\t        route = gauss.parsed_input['route']\n", "        opt_name = self._find_keyword_name(route, 'opt')  # Get the actual user-give keyword for optimization\n\t        gauss.full_option_values('route', opt_name, 'Restart')\n\t@AutoDebug.register\n\tclass RerunFromLastConformer(Debugger, ABC):\n\t    \"\"\" Handle the error by rerun the Gaussian from the last conformer \"\"\"\n\t    def trigger(self, gauss: Gaussian) -> bool:\n\t        return True\n\t    def handle(self, gauss: Gaussian):\n\t        gauss.to_conformer()  # convert to the last conformer in the stdout\n"]}
{"filename": "hotpot/tanks/qm/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : __init__.py\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/19\n\t@Time   : 2:28\n\t\"\"\"\n"]}
{"filename": "hotpot/tanks/lmp/materials.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : materials.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/26\n\t@Time   : 1:50\n\tNotes:\n\t    This package is to perform some specific tasks base on the LAMMPS\n\t\"\"\"\n", "import os\n\timport os.path as osp\n\tfrom os.path import join as ptj\n\tfrom typing import *\n\timport random\n\timport numpy as np\n\tfrom scipy import spatial\n\timport openbabel.openbabel as ob\n\timport hotpot\n\timport hotpot.cheminfo as ci\n", "dir_force_field = osp.abspath(ptj(hotpot.data_root, 'force_field'))\n\t# Constants\n\tavogadro = 6.02214076e23  # Avogadro numbers\n\tangstrom = 1e-8  # cm\n\tclass AmorphousMaker:\n\t    \"\"\" To make Amorphous Materials \"\"\"\n\t    def __init__(\n\t            self,\n\t            element_composition: Dict[str, float],\n\t            force_field: Union[str, os.PathLike],\n", "            density: float = 1.0,  # g/cm^3\n\t            a: float = 25., b: float = 25., c: float = 25.,\n\t            alpha: float = 90., beta: float = 90., gamma: float = 90.,\n\t    ):\n\t        \"\"\"\"\"\"\n\t        # Check the arguments\n\t        # Determine the path of force field.\n\t        if isinstance(force_field, os.PathLike):\n\t            pff = str(force_field)\n\t        elif osp.exists(force_field):\n", "            pff = force_field\n\t        else:\n\t            pff = ptj(dir_force_field, force_field)\n\t        # Make sure the existence of force field file\n\t        if not osp.exists(pff):\n\t            raise FileNotFoundError('the given force field file is not found!')\n\t        pff = osp.abspath(pff)\n\t        # assign attrs\n\t        sum_freq = sum(f for f in element_composition.values())\n\t        self.elements = {e: f/sum_freq for e, f in element_composition.items()}  # Normalize the elements' frequency\n", "        self.path_force_field = pff\n\t        self.density = density * 1.123592147466166\n\t        self.cryst_params = (a, b, c, alpha, beta, gamma)\n\t    @staticmethod\n\t    def calc_cryst_density(cryst):\n\t        \"\"\" Calculation the density for Crystal object \"\"\"\n\t        return (cryst.molecule.weight * avogadro) / (cryst.volume * angstrom ** 3)  # Density, g/cm^3\n\t    @staticmethod\n\t    def _density2atom_numbers(ratio_elements: dict, density: float, cryst):\n\t        \"\"\"\n", "        Calculate the round atom numbers in a crystal.\n\t        Args:\n\t            ratio_elements: Ratio of elements in the crystal\n\t            density: the demand density in the crystal\n\t            cryst: the crystal\n\t        Returns:\n\t            int, the number of atoms\n\t        \"\"\"\n\t        # Convert the dict of elements and possibility to numpy array\n\t        elements = np.array(list(ratio_elements.keys()))\n", "        possibility = np.array(list(ratio_elements.values()))\n\t        possibility = possibility / possibility.sum()  # Normalize\n\t        average_mol_mass = sum(ob.GetMass(ob.GetAtomicNum(e)) * p for e, p in zip(elements, possibility))\n\t        # Terms:       [Mole in Crystal(Total Mass in Crystal (gram)/Average Mole Mass)]/Avogadro Number\n\t        # Units:           g/cm^3     angstrom^3  angstrom/cm             g/mol             _\n\t        num_atom = round(((density * (cryst.volume * angstrom ** 3)) / average_mol_mass) * avogadro)\n\t        # calculate the fraction coordinates in the crystal cell\n\t        fraction_coordinates = np.array([np.random.uniform(size=3) for _ in range(num_atom)])\n\t        # the actual coordinates in the cartesian coordinates\n\t        cartesian_coordinates = np.matmul(cryst.vector, fraction_coordinates.T).T\n", "        distance_matrix = spatial.distance_matrix(cartesian_coordinates, cartesian_coordinates)\n\t        distance_matrix = np.tril(distance_matrix, k=-1)\n\t        distance_matrix[distance_matrix > 0.5] = 0\n\t        # loose the closing points\n\t        try_number = 0\n\t        while distance_matrix.any() and try_number < 100:\n\t            points1_idx, points2_idx = rows, cols = distance_matrix.nonzero()\n\t            points1_coords = cartesian_coordinates[points1_idx]\n\t            points2_coords = cartesian_coordinates[points2_idx]\n\t            vector12 = points2_coords - points1_coords\n", "            e12 = vector12/np.tile(np.linalg.norm(vector12, axis=1).reshape(-1, 1), 3)\n\t            scalar_displace = np.tile((0.51-np.linalg.norm(vector12, axis=1)).reshape(-1, 1)/2, 3)\n\t            displacement12 = e12 * scalar_displace\n\t            displacement21 = -displacement12\n\t            cartesian_coordinates[points1_idx] += displacement21\n\t            cartesian_coordinates[points2_idx] += displacement12\n\t            distance_matrix = spatial.distance_matrix(cartesian_coordinates, cartesian_coordinates)\n\t            distance_matrix = np.tril(distance_matrix, k=-1)\n\t            distance_matrix[distance_matrix > 0.5] = 0\n\t            try_number += 1\n", "        atomic_symbols = np.random.choice(elements, num_atom, p=possibility)\n\t        atomic_numbers = np.array([ob.GetAtomicNum(symbol) for symbol in atomic_symbols])\n\t        return atomic_numbers, cartesian_coordinates\n\t    def load_atoms(self):\n\t        mol = ci.Molecule()\n\t        mol.make_crystal(*self.cryst_params)\n\t        cryst = mol.crystal()\n\t        atomic_number, coordinates = self._density2atom_numbers(\n\t            self.elements, self.density, cryst\n\t        )\n", "        mol.quick_build_atoms(atomic_number)\n\t        mol.set(all_coordinates=coordinates.reshape((-1, len(coordinates), 3)))\n\t        mol.conformer_select(0)\n\t        return mol\n\t    def melt_quench(\n\t            self, *ff_args, mol=None, path_writefile: Optional[str] = None,\n\t            origin_temp: float = 298.15, melt_temp: float = 4000., highest_temp: float = 10000,\n\t            time_step: float = 0.0001, path_dump_to: Optional[str] = None, dump_every: int = 100,\n\t    ):\n\t        \"\"\"\n", "        Perform melt-quench process to manufacture a amorphous materials\n\t        Args:\n\t            *ff_args: the arguments the force file requried, refering the LAMMPS pair_coeff:\n\t             \"pair_coeff I J args\" url: https://docs.lammps.org/pair_coeff.html\n\t            mol: the molecule to be performed melt-quench. if not given, initialize according to elemental\n\t             compositions\n\t            path_writefile: the path to write the final material (screenshot) to file, if not specify, not save.\n\t            origin_temp: the initial temperature before melt\n\t            melt_temp: the round melting point to the materials\n\t            highest_temp: the highest temperature to liquefy the materials\n", "            time_step: time interval between path integrals when performing melt-quench\n\t            path_dump_to: the path to save the trajectory of the melt-quench process, if not specify not save\n\t            dump_every: the step interval between each dumps\n\t        Returns:\n\t            Molecule obj after melt-quench.\n\t        \"\"\"\n\t        if not isinstance(mol, ci.Molecule):\n\t            mol = self.load_atoms()\n\t        mol.lmp_setup(units='metal')\n\t        # initialization\n", "        mol.lmp.commands_string(\n\t            \"\"\"\n\t            units metal\n\t            dimension 3\n\t            atom_style full\n\t            \"\"\"\n\t        )\n\t        # Read molecule into LAMMPS\n\t        mol.lmp.read_main_data()\n\t        # Configure the force field\n", "        mol.lmp(\"pair_style tersoff\")\n\t        mol.lmp(f\"pair_coeff * * {self.path_force_field} {' '.join(ff_args)}\")\n\t        # Specify the thermodynamical output to screen\n\t        mol.lmp('thermo_style    custom step temp pe etotal press vol density')\n\t        mol.lmp('thermo          1000')\n\t        # the step interval of integral\n\t        mol.lmp(f'timestep {time_step}')\n\t        # Specify the dump configuration\n\t        if path_dump_to:\n\t            dump_fmt = path_dump_to.split('.')[-1]  # the dump fmt is the suffix of file name\n", "            mol.lmp(f'dump mq all {dump_fmt} {dump_every} {path_dump_to}')\n\t            mol.lmp(f'dump_modify mq element {\" \".join(set(mol.atomic_symbols))}')\n\t        # Initialize the temperature for system\n\t        mol.lmp(f'velocity all create {origin_temp} {random.randint(100000, 999999)}')\n\t        # Melt\n\t        mol.lmp(f'fix 0 all nvt temp {origin_temp} {highest_temp} 0.7')\n\t        mol.lmp(f'run 10000')\n\t        mol.lmp(f'fix 0 all nvt temp {highest_temp} {highest_temp} 1000')\n\t        while mol.lmp.eval('temp') < highest_temp * 0.95:\n\t            mol.lmp(f'run 1000')\n", "        mol.lmp(f'run 10000')\n\t        # Relax\n\t        mol.lmp('thermo          250')\n\t        mol.lmp(f'fix 0 all nvt temp {melt_temp} {melt_temp} 1000.0')\n\t        while mol.lmp.eval('temp') > melt_temp * 1.05:\n\t            mol.lmp(f'velocity all scale {melt_temp}')\n\t            mol.lmp(f'run 2000')\n\t        mol.lmp('thermo          1000')\n\t        mol.lmp(f'run 20000')\n\t        # Quench\n", "        mol.lmp('thermo          250')\n\t        mol.lmp(f'fix 0 all nvt temp {origin_temp} {origin_temp} 1000.0')\n\t        while mol.lmp.eval('temp') > origin_temp*1.05:\n\t            mol.lmp(f'velocity all scale {(mol.lmp.eval(\"temp\") - origin_temp) / 2 + origin_temp}')\n\t            mol.lmp(f'run 2000')\n\t        if not path_writefile:\n\t            pwf = ptj(os.getcwd(), 'write_dump.xyz')\n\t            write_fmt = 'xyz'\n\t        else:\n\t            pwf = path_writefile\n", "            write_fmt = path_writefile.split('.')[-1]\n\t        mol.lmp(f'write_dump all {write_fmt} {pwf} modify element {\" \".join(set(mol.atomic_symbols))}')\n\t        made_mol = ci.Molecule.read_from(pwf)\n\t        if not path_writefile:\n\t            os.remove(pwf)\n\t        made_mol.create_crystal_by_matrix(mol.lmp.cryst_matrix)\n\t        return made_mol\n"]}
{"filename": "hotpot/tanks/lmp/gcmc.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : gcmc.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/30\n\t@Time   : 22:19\n\t\"\"\"\n\timport json\n\timport os\n", "import os.path as osp\n\timport random\n\tfrom os.path import join as ptj\n\tfrom typing import *\n\timport hotpot\n\tdir_force_field = osp.abspath(ptj(hotpot.data_root, 'force_field'))\n\tclass LjGCMC:\n\t    \"\"\" Performing Grand Canonical Monte Carlo Simulation by LAMMPS, based on LJ potential \"\"\"\n\t    def __init__(\n\t            self, frame: 'ci.Molecule', ff: Union[str, os.PathLike], *guests: 'ci.Molecule',\n", "            work_dir: Union[str, os.PathLike], **kwargs\n\t    ):\n\t        self._data = {\n\t            'frame': frame,\n\t            'guests': guests,\n\t            'work_dir': work_dir,\n\t            'pff': self._force_field_file(ff)  # the path of force field\n\t        }\n\t        # Preprocessing data\n\t        self._data.update(kwargs)\n", "        self._load_lj()  # Load force field\n\t        self._extract_type_map()\n\t    def _extract_type_map(self):\n\t        def ext_tm(mol: 'ci.Molecule', which):\n\t            atom_types_map = self._data.setdefault('atom_types_map', {})\n\t            atom_types = self._data.setdefault('atom_types', {})\n\t            list_atom_types = atom_types.setdefault(which, [])\n\t            for atom in mol.all_atoms_with_unique_symbol:\n\t                atom_type = len(atom_types_map) + 1\n\t                atom_types_map[atom_type] = atom\n", "                list_atom_types.append(atom_type)\n\t        ext_tm(self.frame, 'frame')\n\t        for guest in self.guests:\n\t            ext_tm(guest, 'guest')\n\t    def _fix_gcmc(self, lmp):\n\t        \"\"\"\"\"\"\n\t        T = self._data.get('T')  # temperature\n\t        P = self._data.get('P', 1.0)  # the ratio pressure to saturation pressure\n\t        for i, guest in enumerate(self.guests, 1):\n\t            guest.thermo_init(T=T)\n", "            phi_g = guest.thermo.phi_g  # the fugacity coefficient\n\t            P_sat = guest.thermo.Psat\n\t            lmp(\n\t                f'fix gcmc{i} gg{i} gcmc 1 $((20+abs(count(gg{i})-20))/2) $((20+abs(count(gg{i})-20))/2)'\n\t                f' 0 {random.randint(10000, 999999)} {T} 0 12.5 mol guest{i} fugacity_coeff {phi_g} pressure {P_sat * P}'\n\t            )\n\t    @staticmethod\n\t    def _force_field_file(ff: Union[str, os.PathLike]):\n\t        \"\"\" Retrieve the exact file path of force file \"\"\"\n\t        # If the force filed not be given, use the UFF as default.\n", "        if not ff:\n\t            ff = 'UFF/LJ.json'\n\t        # Check the arguments\n\t        # Determine the path of force field.\n\t        if isinstance(ff, os.PathLike):\n\t            pff = str(ff)\n\t        elif osp.exists(ff):\n\t            pff = ff\n\t        else:\n\t            pff = ptj(dir_force_field, ff)\n", "        # Make sure the existence of force field file\n\t        if not osp.exists(pff):\n\t            raise FileNotFoundError('the given force field file is not found!')\n\t        pff = osp.abspath(pff)\n\t        return pff\n\t    def _print_uptake(self, lmp):\n\t        \"\"\" print the guest uptake with guest(g)/framework(g) into file \"\"\"\n\t        data = '\"' + '$(step),' + ','.join(f'$(mass(gg{i})/mass(frame))' for i, _ in enumerate(self.guests, 1)) + '\"'\n\t        title = '\"' + 'step,' + ','.join(f'{g.smiles}(g/g)' for i, g in enumerate(self.guests, 1)) + '\"'\n\t        p_file = osp.abspath(ptj(self.work_dir, 'step_uptake.csv'))\n", "        cmd = f'fix uptake all print 1 {data} title {title} file {p_file} screen no'\n\t        lmp(cmd)\n\t    def _load_guest_mol(self, lmp):\n\t        \"\"\"\"\"\"\n\t        num_ft = len(self.frame_type_map)\n\t        num_fbt = len(self.frame.unique_bonds)  # the number of atom types in framework\n\t        num_gat = 0  # the number of atom types before current guest\n\t        num_gbt = 0  # the number of bond types before current guest\n\t        for i, guest in enumerate(self.guests, 1):\n\t            if self.work_dir:\n", "                p_guest_mol = osp.abspath(ptj(self.work_dir, f'guest{i}'))\n\t            else:\n\t                p_guest_mol = osp.abspath(f'guest{i}')\n\t            guest.writefile('lmpmol', p_guest_mol, retrieve_script=True, atom_style='metal')\n\t            lmp(f'molecule guest{i} {p_guest_mol} toff {num_ft+num_gat} boff {num_fbt + num_gbt}')\n\t            lmp(f'group gg{i} empty')  # Empty group to contain the molecule atoms insert by GCMC\n\t            num_gat += len(set(guest.atomic_symbols)) + len(set(pa.symbol for pa in guest.pseudo_atoms))\n\t            num_fbt += len(guest.unique_bond_pairs)\n\t    def _load_lj(self):\n\t        \"\"\" load force file from file \"\"\"\n", "        self._data['lj'] = json.load(open(self._data['pff']))\n\t    def _set_guest_mass(self, lmp: \"HpLammps\"):\n\t        for atom_type, atom in self.guest_type_map.items():\n\t            lmp(f'mass {atom_type} {atom.mass}  # {atom.symbol}')\n\t    def _set_lj_coeff(self, lmp: 'HpLammps'):\n\t        # the LJ cut off\n\t        lmp(f'pair_style lj/cut {self._data.get(\"cut\", 12.5)}')\n\t        # LJ coefficient for guest atoms\n\t        # atom: the atom or pseudo atom corresponding to the atom_type\n\t        # TODO: the coefficient of epsilon\n", "        for atom_type, atom in self.atom_types_map.items():\n\t            try:\n\t                eps = self.lj[atom.symbol][\"epsilon\"]\n\t                sigma = self.lj[atom.symbol][\"sigma\"]\n\t            except KeyError:\n\t                assert isinstance(atom, ci.PseudoAtom)\n\t                eps = atom.epsilon\n\t                sigma = atom.sigma\n\t            lmp(f'pair_coeff {atom_type} {atom_type} {eps * 0.001987} {sigma}')\n\t    @property\n", "    def atom_types_map(self) -> Dict[int, Union['ci.Atom', 'ci.PseudoAtom']]:\n\t        return self._data.get('atom_types_map')\n\t    @property\n\t    def frame_atom_types(self) -> List[int]:\n\t        return self._data.get('atom_types')['frame']\n\t    @property\n\t    def guest_atom_types(self) -> List[int]:\n\t        return self._data.get('atom_types')['guest']\n\t    @property\n\t    def frame(self):\n", "        return self._data.get('frame')\n\t    @property\n\t    def frame_type_map(self) -> Dict[int, Union['ci.Atom', 'ci.PseudoAtom']]:\n\t        \"\"\" Return the dict mapping from type_numbers to Atom or PseudoAtom objects in framework \"\"\"\n\t        return {t_num: atom for t_num, atom in self.atom_types_map.items() if t_num in self.frame_atom_types}\n\t    @property\n\t    def guest_type_map(self) -> Dict[int, Union['ci.Atom', 'ci.PseudoAtom']]:\n\t        \"\"\" Return the dict mapping from type_numbers to Atom or PseudoAtom objects in guests \"\"\"\n\t        return {t_num: atom for t_num, atom in self.atom_types_map.items() if t_num in self.guest_atom_types}\n\t    @property\n", "    def guests(self):\n\t        return self._data.get('guests')\n\t    @property\n\t    def lj(self):\n\t        \"\"\" Retrieve the lj potential saved in the class \"\"\"\n\t        return self._data.get('lj')\n\t    @property\n\t    def num_atom_types(self):\n\t        return len(self.atom_types_map)\n\t    @property\n", "    def num_frame_atom_types(self) -> int:\n\t        return len(self.frame_atom_types)\n\t    @property\n\t    def num_guest_atom_types(self) -> int:\n\t        return len(self.guest_atom_types)\n\t    def run(self):\n\t        self.frame.lmp_setup(work_dir=self.work_dir)\n\t        lmp = self.frame.lmp\n\t        # Initialization\n\t        lmp('units real')\n", "        lmp('dimension 3')\n\t        lmp('atom_style full')\n\t        # lmp('read_data /home/zz1/qyq/main.data group frame extra/atom/types 1')\n\t        lmp.read_main_data(\n\t            extra_atom_types=self.num_guest_atom_types,\n\t            extra_bond_types=sum([len(g.unique_bonds) for g in self.guests]),\n\t            group='frame'\n\t        )\n\t        self._set_guest_mass(lmp)\n\t        self._load_guest_mol(lmp)\n", "        self._set_lj_coeff(lmp)\n\t        # Keep the atom in frameworks in immobility\n\t        lmp('fix stand frame setforce 0.0 0.0 0.0')\n\t        self._fix_gcmc(lmp)\n\t        self._print_uptake(lmp)\n\t        # lmp('variable uptake equal mass(Igas)/mass(frame)')\n\t        # lmp('fix ave all ave/time 1 50 50 v_uptake file /home/zz1/qyq/ave')\n\t        lmp('thermo_style    custom step temp pe etotal press vol density')\n\t        lmp('thermo          1000')\n\t        lmp('compute_modify thermo_temp dynamic/dof yes')\n", "        dir_dump = osp.abspath(ptj(self.work_dir, \"dump.xyz\"))\n\t        lmp(f'dump mq all xyz 100 {dir_dump}')\n\t        lmp(f'dump_modify mq element ' + ', '.join(self.type_symbol_map))\n\t        lmp('timestep 0.0001')\n\t        lmp('run 15000')\n\t    @property\n\t    def type_symbol_map(self) -> List[str]:\n\t        return [atom.symbol for atom in self.atom_types_map.values()]\n\t    @property\n\t    def work_dir(self):\n", "        return self._data.get('work_dir', os.getcwd())\n\timport hotpot.cheminfo as ci\n\tfrom hotpot.tanks.lmp.base import HpLammps\n"]}
{"filename": "hotpot/tanks/lmp/base.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : base.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/24\n\t@Time   : 3:43\n\t\"\"\"\n\timport os\n\timport re\n", "from os.path import join as ptj\n\timport json\n\timport numpy as np\n\tfrom lammps import PyLammps, Atom\n\tfrom typing import *\n\timport hotpot\n\tclass HpLammps:\n\t    \"\"\"\n\t    A wrapper to run LAMMPS tasks\n\t    \"\"\"\n", "    def __init__(self, main, **kwargs):\n\t        \"\"\"\n\t        Args:\n\t            main: the main Molecule object\n\t        Keyword Args:\n\t            work_dir: the work dir, where the io operations are performed\n\t        \"\"\"\n\t        self._data = {\n\t            'main': main,\n\t            'pylmp': PyLammps()\n", "        }  # store any data\n\t        self._data.update(kwargs)\n\t    def __call__(self, cmd: str):\n\t        self.command(cmd)\n\t    # def __dir__(self) -> Iterable[str]:\n\t    #     return self.pylmp.__dir__() + [\"commands_list\", \"commands_string\", 'read_main_data', \"script\"]\n\t    #\n\t    # def __getattr__(self, item):\n\t    #     return self.pylmp.__getattr__(item)\n\t    def atom(self, idx: int):\n", "        \"\"\" retrieve the LAMMPS atom object by atom index \"\"\"\n\t        return Atom(self, idx)\n\t    @property\n\t    def atoms(self):\n\t        return [self.atom(i) for i in range(self.atom_number)]\n\t    @property\n\t    def atom_number(self):\n\t        return len(self.pylmp.atoms)\n\t    @property\n\t    def box(self):\n", "        return np.array([\n\t            [self.eval('xlo'), self.eval('xhi')],\n\t            [self.eval('ylo'), self.eval('yhi')],\n\t            [self.eval('zlo'), self.eval('zhi')]\n\t        ])\n\t    def close(self):\n\t        self.pylmp.close()\n\t        del self\n\t    def command(self, cmd: str):\n\t        self.pylmp.command(cmd)\n", "    def commands_list(self, list_cmd: List[str]):\n\t        for cmd in list_cmd:\n\t            self.command(cmd)\n\t    def commands_string(self, multicod: str):\n\t        cmd_list = multicod.split('\\n')\n\t        for cmd in cmd_list:\n\t            self.command(cmd.strip())\n\t    @property\n\t    def computes(self):\n\t        return self.pylmp.computes\n", "    @property\n\t    def cryst_matrix(self):\n\t        xl = self.eval('xhi')-self.eval('xlo')  # length of the crystal box in the x axis\n\t        yl = self.eval('xhi')-self.eval('xlo')  # length of the crystal box in the y axis\n\t        zl = self.eval('xhi')-self.eval('xlo')  # length of the crystal box in the z axis\n\t        xy = self.eval('xy')  # the project v_b to x axis\n\t        xz = self.eval('xz')  # the project v_c to x axis\n\t        yz = self.eval('yz')  # the project v_c to y axis\n\t        return np.array([[xl, 0., 0.], [xy, yl, 0.], [xz, yz, zl]])\n\t    def data_to_labelmap(self, script: str, offset: int = 0):\n", "        \"\"\" Convert the LAMMPS data format script (string) to labelmap dict \"\"\"\n\t        pattern = re.compile(r\"[A-Z].+s\")\n\t        data_body_headers = pattern.findall(script)\n\t        masses_idx = data_body_headers.index('Masses')\n\t        masses_body_contents: List[str] = pattern.split(script)[masses_idx+1].split('\\n')\n\t        type_map = self._data.setdefault('type_map', {})\n\t        for line in masses_body_contents:\n\t            line = line.strip()\n\t            if line:\n\t                type_num, _, _, type_label = line.split()\n", "                type_num = int(type_num) + offset  # offset\n\t                former_label = type_map.get(type_num)\n\t                if not former_label:  # if the atom type have not been recorded\n\t                    type_map[type_num] = type_label\n\t                else:\n\t                    # Never allow to change the type_map for defined atom type\n\t                    # if the current type label is different from the former, raise error\n\t                    # if the current type label is same with the former, keeping still.\n\t                    if former_label != type_label:\n\t                        raise RuntimeError(\n", "                            f'the the type_map for atom type {type_num} is attempt to change '\n\t                            f'from {former_label} to {type_label}, Never allowed!!'\n\t                        )\n\t        return type_map\n\t    @property\n\t    def dumps(self):\n\t        return self.pylmp.dumps\n\t    def eval(self, expr):\n\t        return self.pylmp.eval(expr)\n\t    @property\n", "    def fixes(self):\n\t        return self.pylmp.fixes\n\t    @property\n\t    def groups(self):\n\t        return self.pylmp.groups\n\t    def file(self, filepath: str):\n\t        self.pylmp.file(filepath)\n\t    @property\n\t    def lmp(self):\n\t        return self.pylmp.lmp\n", "    @property\n\t    def main(self):\n\t        return self._data.get('main')\n\t    @property\n\t    def pylmp(self):\n\t        return self._data.get('pylmp')\n\t    def read_main_data(\n\t            self, add: str = None, offset: Sequence[int] = (), shift: Sequence[int] = (),\n\t            extra_atom_types=0, extra_bond_types=0, extra_angle_types=0, extra_dihedral_types=0,\n\t            extra_improper_types=0, extra_bond_per_atom=0, extra_angle_per_atom=0, extra_dihedral_per_atom=0,\n", "            extra_improper_per_atom=0, extra_special_per_atom=0, group: str = None, nocoeff: bool = False,\n\t            fix: str = None\n\t    ):\n\t        \"\"\"\"\"\"\n\t        path_main_data = os.path.join(self.work_dir, 'main.data')\n\t        # to the main.data file\n\t        self.main.writefile('lmpdat', path_main_data, retrieve_script=False)\n\t        # self.data_to_labelmap(script, atom_offset)\n\t        # read to LAMMPS\n\t        cmd = f'read_data {path_main_data}'\n", "        # add keywords to specify the extra atoms\n\t        if add:\n\t            cmd += f' add {add}'\n\t        if offset:\n\t            assert len(offset) == 5\n\t            cmd += f' offset ' + ' '.join(offset)\n\t        if shift:\n\t            assert len(shift) == 3\n\t            cmd += f' shift ' + ' '.join(shift)\n\t        if extra_atom_types:\n", "            cmd += f' extra/atom/types {extra_atom_types}'\n\t        if extra_bond_types:\n\t            cmd += f' extra/bond/types {extra_bond_types}'\n\t        if extra_angle_types:\n\t            cmd += f' extra/angle/types {extra_angle_types}'\n\t        if extra_dihedral_types:\n\t            cmd += f' extra/dihedral_types {extra_dihedral_types}'\n\t        if extra_improper_types:\n\t            cmd += f' extra/improper/types {extra_improper_types}'\n\t        if extra_bond_per_atom:\n", "            cmd += f' extra/bond/per/atom {extra_bond_per_atom}'\n\t        if extra_angle_per_atom:\n\t            cmd += f' extra/angle/per/atom {extra_angle_per_atom}'\n\t        if extra_dihedral_per_atom:\n\t            cmd += f' extra/dihedral_per_atom {extra_dihedral_per_atom}'\n\t        if extra_improper_per_atom:\n\t            cmd += f' extra/improper/per/atom {extra_improper_per_atom}'\n\t        if extra_special_per_atom:\n\t            cmd += f' extra/special/per/atom {extra_special_per_atom}'\n\t        if group:\n", "            cmd += f' group {group}'\n\t        if nocoeff:\n\t            cmd += f' group true'\n\t        if fix:\n\t            cmd += f' fix {fix}'\n\t        self.command(cmd)\n\t    def run(self, *args, **kwargs):\n\t        self.pylmp.run(*args, **kwargs)\n\t    @property\n\t    def runs(self):\n", "        return self.pylmp.runs\n\t    def script(self):\n\t        path_tmp_script = os.path.join(os.getcwd(), 'script.in')\n\t        self.pylmp.write_script(path_tmp_script)\n\t        with open(path_tmp_script) as file:\n\t            script = file.read()\n\t        return script\n\t    @property\n\t    def type_map(self):\n\t        return self._data.get('type_map')\n", "    @property\n\t    def variables(self):\n\t        return self.pylmp.variables\n\t    @property\n\t    def version(self):\n\t        return self.pylmp.version()\n\t    @property\n\t    def work_dir(self):\n\t        work_dir = self._data.get('work_dir', os.getcwd())\n\t        if not work_dir:\n", "            os.mkdir(work_dir)\n\t        return work_dir\n\t    def write_script(self, filepath: str):\n\t        self.pylmp.write_script(filepath)\n\tclass LmpTask:\n\t    \"\"\" The base class for performing LAMMPS tasks with Molecule objects \"\"\"\n\t    def __init__(self, mol: 'ci.Molecule'):\n\t        self.mol = mol\n\timport hotpot.cheminfo as ci\n"]}
{"filename": "hotpot/tanks/lmp/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : __init__.py.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/26\n\t@Time   : 1:47\n\t\"\"\"\n\timport os\n\timport sys\n", "sys.path.append(os.path.abspath(os.path.dirname(__file__)))\n\tfrom base import HpLammps\n\tfrom materials import AmorphousMaker\n"]}
{"filename": "hotpot/utils/units_convert.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : units_convert.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/18\n\t@Time   : 21:18\n\tNotes: this module is used to convert the quantity from a unit metric to other\n\tURL: to query units conversion: https://www.convertunits.com/\n\tthe relationship among units: https://www.nist.gov/pml/owm/metric-si/si-units\n", "\"\"\"\n\tclass UnitsConvert:\n\t    \"\"\"\"\"\"\n\t    __path_unit_json = 'data/units.json'\n\t    SI = {\n\t        'mass': 'kg',\n\t        'length': 'm',\n\t        'temperature': 'K',\n\t        'time': 's',\n\t        'amount_of_substance': 'mole',\n", "        'luminous_intensity': 'cd'\n\t    }\n\t    def __init__(self):\n\t        pass\n"]}
{"filename": "hotpot/utils/manage_machine.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : manage_machine.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/6/26\n\t@Time   : 17:20\n\tNotes:\n\t    Manage the machine, link memory, processors, GPUs\n\t\"\"\"\n", "import os\n\tfrom typing import *\n\timport psutil\n\tclass Machine:\n\t    \"\"\" The special class to retrieve the machine information and adjust the system parameters \"\"\"\n\t    @property\n\t    def memory_info(self):\n\t        return psutil.virtual_memory()\n\t    @property\n\t    def available_memory(self) -> int:\n", "        \"\"\" Available memory with GB units \"\"\"\n\t        return self.memory_info.available / 1024 ** 3\n\t    def take_memory(self, ratio: float = 0.5, integer: bool = True) -> Union[int, float]:\n\t        \"\"\"\n\t        take a partial memory from machine available memory\n\t        Args:\n\t            ratio: How many ratio of taken memory take from the available\n\t            integer: whether to force to take an integer values\n\t        Returns:\n\t        \"\"\"\n", "        if integer:\n\t            return int(self.available_memory * ratio)\n\t        else:\n\t            return self.available_memory * ratio\n\t    @staticmethod\n\t    def take_CPUs(ratio: float = 0.5) -> int:\n\t        \"\"\"\n\t        Take a partial memory from machine available CPUs\n\t        Args:\n\t            ratio: The ratio of CPUs the user want to take\n", "        Returns:\n\t            the number of CPUs\n\t        \"\"\"\n\t        return int(os.cpu_count()/2 * ratio)\n\tmachine = Machine()\n"]}
{"filename": "hotpot/utils/__init__.py", "chunked_list": ["\"\"\"\n\tpython v3.7.9\n\t@Project: hotpot\n\t@File   : __init__.py.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/4/18\n\t@Time   : 21:17\n\t\"\"\"\n"]}
{"filename": "hotpot/utils/ob2netwx.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : ob2netwx\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/16\n\t@Time   : 21:17\n\tNotes:\n\t    This module to perform the conversion from openbabel objects or networkx to each other.\n\t\"\"\"\n", "from openbabel import openbabel as ob\n\timport networkx as nx\n\tdef ob_mol2nxg(ob_mol: ob.OBMol) -> np.Graph:\n\t    \"\"\"\"\"\"\n\tdef nxg2ob_mol(nxg: nx.Graph) -> ob.OBMol:\n\t    \"\"\" Convert the networkx Graph class to an openbabel OBMol class \"\"\"\n"]}
{"filename": "hotpot/utils/library.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : load_chem_lib\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/6/8\n\t@Time   : 3:27\n\tThis module is used to lazily load the chemical information database when other modules need it.\n\t\"\"\"\n\tfrom os.path import join as opj\n", "import json\n\tfrom typing import *\n\tfrom pathlib import Path\n\tclass Library:\n\t    \"\"\" the Main class to load and save chemical information lazily \"\"\"\n\t    _lib = {}  # library for chemical books\n\t    def __init__(self):\n\t        self._books = {}\n\t    def __repr__(self):\n\t        return f'Library({self.book_list})'\n", "    @property\n\t    def book_list(self):\n\t        return list(self._lib.keys())\n\t    @classmethod\n\t    def register(cls, book_class: type):\n\t        \"\"\" sign up the chemical books \"\"\"\n\t        cls._lib[book_class.__name__] = book_class\n\t    def get(self, book_name: str):\n\t        return self._books.setdefault(book_name, self._lib[book_name]())\n\tclass ChemicalBook:\n", "    \"\"\" The base class for all chemical books \"\"\"\n\t@Library.register\n\tclass Solvents(ChemicalBook):\n\t    \"\"\" the ChemicalBook to store common solvents \"\"\"\n\t    def __init__(self):\n\t        dir_solvents = Path(hp.data_root).joinpath('solvents')\n\t        self._solvents = [hp.Molecule.read_from(p) for p in dir_solvents.glob('*.mol2')]\n\t        self._sols_smi = [m.smiles for m in self._solvents]\n\t    def __iter__(self):\n\t        return self._solvents\n", "    def __getitem__(self, item):\n\t        return self._solvents[item]\n\t    def __repr__(self):\n\t        return f'SolventsBook({len(self._solvents)})'\n\t    def is_solvent(self, mol: 'hp.Molecule'):\n\t        \"\"\" to judge whether a molecule is a solvent \"\"\"\n\t        return any(solvent.similarity(mol) == 1.0 for solvent in self._solvents)\n\t@Library.register\n\tclass PeriodicTable(ChemicalBook):\n\t    \"\"\" the periodic tabel contain detail information for each element \"\"\"\n", "    class Element:\n\t        \"\"\" Contain information for a specific element \"\"\"\n\t        def __init__(self, symbol: str, data: dict):\n\t            self.symbol = symbol\n\t            self.data = data\n\t        def __repr__(self):\n\t            return f'{self.symbol}'\n\t        def __getitem__(self, item):\n\t            return self.data[item]\n\t        def __getattr__(self, item):\n", "            return self.data[item]\n\t        def __dir__(self) -> Iterable[str]:\n\t            return list(self.data.keys())\n\t    class Settings:\n\t        \"\"\" the setting tools for PeriodicTabel \"\"\"\n\t        def __init__(self, _table: 'PeriodicTable'):\n\t            self.data_path = opj(hp.data_root, 'periodic_table.json')\n\t            self._table = _table\n\t        def overwrite_source_data(self):\n\t            \"\"\" Overwrite existing data with a new form \"\"\"\n", "            json.dump(self._table.data_dict, self.data_path, indent=True)\n\t    def __init__(self):\n\t        self.settings = self.Settings(self)\n\t        self._elements = {\n\t            s: self.Element(s, data)\n\t            for s, data in json.load(open(self._data_path, encoding='utf-8')).items()\n\t        }\n\t    def __repr__(self):\n\t        return f'PeriodicTabel{tuple(self._elements.keys())}'\n\t    def __getitem__(self, item):\n", "        return self._elements[item]\n\t    def __getattr__(self, item):\n\t        return self._elements[item]\n\t    def __dir__(self) -> Iterable[str]:\n\t        dirs = ['settings', 'symbols', 'elements']\n\t        return list(self._elements.keys()) + dirs\n\t    def __iter__(self):\n\t        return iter(self._elements.values())\n\t    def __len__(self):\n\t        return len(self._elements)\n", "    @property\n\t    def _data_path(self):\n\t        \"\"\" the PeriodicTable data retrieve from \"\"\"\n\t        return self.settings.data_path\n\t    @property\n\t    def data_dict(self):\n\t        return {s: e.data for s, e in self._elements.items()}\n\t    @property\n\t    def symbols(self):\n\t        return list(self._elements.keys())\n", "    @property\n\t    def elements(self):\n\t        return list(self._elements.values())\n\timport hotpot as hp\n\t# initialization Chemical Library\n\tlibrary = Library()\n\t# the public variable\n\t__all__ = ['library']\n"]}
{"filename": "examples/extract_ml_pair.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : extract_ml_pair\n\t@Auther : Zhiyuan Zhang\n\t@Data   : 2023/7/3\n\t@Time   : 2:34\n\tNote:\n\t    This python code to perform extraction of metal-ligand pairs from cif file\n\t\"\"\"\n", "import tqdm\n\tfrom pathlib import Path\n\timport hotpot as hp\n\tif __name__ == '__main__':\n\t    path_cif = Path('/home/zz1/database/CSD')\n\t    bundle = hp.MolBundle.read_from('cif', path_cif, ranges=range(1000))\n\t    for i, mol in enumerate(tqdm.tqdm(bundle)):\n\t        mol.remove_solvents()\n"]}
{"filename": "examples/calc_bde.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : calc_bde.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/6/14\n\t@Time   : 10:30\n\tNote:\n\t    This script to high-throughput determine the bind energy when a metal cation coordinate to a ligand with\n\t    specified coordination pattern\n", "\"\"\"\n\timport os\n\tfrom pathlib import Path\n\timport hotpot as hp\n\tif __name__ == '__main__':\n\t    START_NUM = 8\n\t    path_smiles = Path('/home/zz1/proj/be/struct/choice_ligand')\n\t    g16root = '/home/pub'\n\t    work_dir = Path('/home/zz1/proj/be/g161')\n\t    os.chdir(work_dir)\n", "    smiles = open(path_smiles).readlines()\n\t    for i, s in enumerate(smiles[START_NUM:], START_NUM):\n\t        mol = hp.Molecule.read_from(s, 'smi')\n\t        pair_bundle = mol.generate_pairs_bundle('Sr')\n\t        if len(pair_bundle) == 0:\n\t            continue\n\t        pair_bundle.determine_metal_ligand_bind_energy(\n\t            g16root, work_dir.joinpath(str(i)), 'M062X', 'Def2SVP', 'SCRF pop(Always)', cpu_uti=0.75,\n\t            skip_complete=True\n\t        )\n"]}
{"filename": "examples/run_gcmc.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : train_gcmc.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/6/27\n\t@Time   : 19: 56\n\tNotes:\n\t    Training a DeepModeling model.\n\t\"\"\"\n", "import sys\n\tsys.path.append('/home/qyq/hp')\n\tfrom pathlib import Path\n\timport hotpot as hp\n\tdef run_single_gcmc():\n\t    path_frame = Path('/home/qyq/proj/aC_database/cif_48954/mq_0.8_4754_9588_14480.cif')\n\t    work_dir = Path('/home/qyq/proj/lammps/I2/single/gcmc_5')\n\t    frame = hp.Molecule.read_from(path_frame)\n\t    iodine = hp.Molecule.read_from('II', 'smi')\n\t    iodine.build_3d()\n", "    script = iodine.dump('lmpmol')\n\t    ps = [1e-5, 3e-5, 1e-4, 3e-4, 1e-3, 3e-3, 1e-2, 3e-2, 1e-1, 3e-1, 0.5, 1.0]\n\t    frame.gcmc_for_isotherm(iodine, work_dir=work_dir, Ps=ps)\n\tif __name__ == '__main__':\n\t    frames_dir = Path('/home/qyq/proj/aC_database/cif_48954/cif_10_test')  #/home/qyq/proj/aC_database/cif_48954/mq_1.0_test100\n\t    work_dir = Path('/home/qyq/proj/lammps/I2/bundle/gcmc_18')\n\t    ps = [1e-5, 3e-5, 1e-4, 3e-4, 1e-3, 3e-3, 1e-2, 3e-2, 1e-1, 3e-1, 0.5, 1.0]\n\t    I2 = hp.Molecule.read_from('II', 'smi')\n\t    I2.build_3d()\n\t    bundle = hp.MolBundle.read_from(\n", "        'cif', frames_dir, generate=True, num_proc=10\n\t    )\n\t    idt_map = bundle.gcmc_for_isotherm(I2, work_dir=work_dir, Ps=ps, procs=30)\n"]}
{"filename": "examples/train_dp_model.py", "chunked_list": ["\"\"\"\n\tpython v3.9.0\n\t@Project: hotpot\n\t@File   : train_dp_model.py\n\t@Author : Zhiyuan Zhang\n\t@Date   : 2023/6/26\n\t@Time   : 10:49\n\tNotes:\n\t    Training a DeepModeling model.\n\t\"\"\"\n", "from pathlib import Path\n\timport hotpot as hp\n\tfrom hotpot.bundle import DeepModelBundle\n\tdef extract_dpmd_sys():\n\t    dir_log_file = Path('/home/zz1/proj/gauss/new/log')\n\t    dpmd_root = Path('/home/zz1/proj/dpmd/sys1/')\n\t    bundle = hp.MolBundle.read_from('g16log', dir_log_file, '*/*.log', num_proc=32)\n\t    bundle: DeepModelBundle = bundle.to('DeepModelBundle')\n\t    bundle.to_dpmd_sys(dpmd_root, 0.2, mode='std', split_mode='inside')\n\t    return bundle\n", "if __name__ == '__main__':\n\t    b = extract_dpmd_sys()\n"]}
