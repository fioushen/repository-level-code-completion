{"filename": "setup.py", "chunked_list": ["#!/usr/bin/env python\n\t# -*- coding: utf-8 -*-\n\t\"\"\"Installation of the tritondse module.\"\"\"\n\timport sys\n\tfrom setuptools import setup, find_packages\n\twith open(\"README.md\") as f:\n\t    README = f.read()\n\tsetup(\n\t    name=\"tritondse\",\n\t    version=\"0.1.8\",\n", "    description=\"A library of Dynamic Symbolic Exploration based the Triton library\",\n\t    packages=find_packages(),\n\t    long_description=README,\n\t    long_description_content_type='text/markdown',\n\t    url=\"https://github.com/quarkslab/tritondse\",\n\t    project_urls={\n\t        \"Documentation\": \"https://quarkslab.github.io/tritondse/\",\n\t        \"Bug Tracker\": \"https://github.com/quarkslab/tritondse/issues\",\n\t        \"Source\": \"https://github.com/quarkslab/tritondse\"\n\t    },\n", "    setup_requires=[],\n\t    install_requires=[\n\t        \"triton-library\",\n\t        \"lief\",\n\t        \"pyQBDI\",\n\t        \"cle\",\n\t        \"quokka-project\",\n\t        \"enum_tools\"\n\t    ],\n\t    tests_require=[],\n", "    license=\"AGPL-3.0\",\n\t    author=\"Quarkslab\",\n\t    classifiers=[\n\t        'Topic :: Security',\n\t        'Environment :: Console',\n\t        'Operating System :: OS Independent',\n\t    ],\n\t    test_suite=\"\",\n\t    scripts=[]\n\t)\n"]}
{"filename": "doc/conf.py", "chunked_list": ["# Configuration file for the Sphinx documentation builder.\n\t#\n\t# This file only contains a selection of the most common options. For a full\n\t# list see the documentation:\n\t# http://www.sphinx-doc.org/en/master/config\n\t# -- Path setup --------------------------------------------------------------\n\t# If extensions (or modules to document with autodoc) are in another directory,\n\t# add these directories to sys.path here. If the directory is relative to the\n\t# documentation root, use os.path.abspath to make it absolute, like shown here.\n\timport os\n", "import sys\n\t# sys.path.insert(0, os.path.abspath('..'))\n\t# -- Project information -----------------------------------------------------\n\tproject = 'TritonDSE'\n\tcopyright = '2022, Quarkslab'\n\tauthor = 'Quarkslab'\n\t# The full version, including alpha/beta/rc tags\n\trelease = '0.1'\n\t# -- General configuration ---------------------------------------------------\n\t# Add any Sphinx extension module names here, as strings. They can be\n", "# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n\t# ones.\n\textensions = [\n\t    'sphinx.ext.autodoc',\n\t    'sphinx.ext.todo',\n\t    'sphinx.ext.viewcode',\n\t    'breathe',\n\t    'sphinx.ext.intersphinx',\n\t    'sphinx.ext.githubpages',\n\t    \"nbsphinx\",\n", "    \"enum_tools.autoenum\"\n\t]\n\t# Add any paths that contain templates here, relative to this directory.\n\ttemplates_path = ['_templates']\n\t# List of patterns, relative to source directory, that match files and\n\t# directories to ignore when looking for source files.\n\t# This pattern also affects html_static_path and html_extra_path.\n\texclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\t# -- Options for HTML output -------------------------------------------------\n\t# The theme to use for HTML and HTML Help pages.  See the documentation for\n", "# a list of builtin themes.\n\t#\n\thtml_theme = \"sphinx_rtd_theme\"\n\t# Add any paths that contain custom static files (such as style sheets) here,\n\t# relative to this directory. They are copied after the builtin static files,\n\t# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n\thtml_static_path = ['figs']\n\tautodoc_default_flags = ['members', 'inherited-members']\n\tautoclass_content = \"both\"  # Comment class with both class docstring and __init__ docstring\n\tautodoc_typehints = \"signature\"\n", "autodoc_type_aliases = {\n\t    'PathLike': 'tritondse.types.PathLike',\n\t    'Addr': 'tritondse.types.Addr',\n\t    'rAddr': 'tritondse.types.rAddr',\n\t    'BitSize': 'tritondse.types.BitSize',\n\t    'ByteSize': 'tritondse.types.ByteSize',\n\t    'Input': 'tritondse.types.Input',\n\t    'PathHash': 'tritondse.types.PathHash',\n\t    'AddrCallback': 'tritondse.callbacks.AddrCallback',\n\t    'InstrCallback': 'tritondse.callbacks.InstrCallback',\n", "    'MemReadCallback': 'tritondse.callbacks.MemReadCallback',\n\t    'MemWriteCallback': 'tritondse.callbacks.MemWriteCallback',\n\t    'NewInputCallback': 'tritondse.callbacks.NewInputCallback',\n\t    'RegReadCallback': 'tritondse.callbacks.RegReadCallback',\n\t    'RegWriteCallback': 'tritondse.callbacks.RegWriteCallback',\n\t    'RtnCallback': 'tritondse.callbacks.RtnCallback',\n\t    'SymExCallback': 'tritondse.callbacks.SymExCallback',\n\t    'ThreadCallback': 'tritondse.callbacks.ThreadCallback',\n\t}\n\t# For internationalization\n", "locale_dirs = ['locale/']   # path is example but recommended.\n\tgettext_compact = False     # optional.\n\t# For intersphinx\n\tintersphinx_mapping = {'python': ('https://docs.python.org/3', None),\n\t                       'lief': ('https://lief.quarkslab.com/doc/latest/', None)}\n"]}
{"filename": "doc/practicals/solution_json_parser.py", "chunked_list": ["#!/usr/bin/env python\n\tfrom tritondse import SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, Workspace, Seed, \\\n\t                      SeedFormat, Loader, MonolithicLoader, CompositeData, Addr, SolverStatus, Architecture, \\\n\t                      LoadableSegment, Perm, SeedStatus, SmtSolver\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\timport struct\n\timport logging\n\tlogging.basicConfig(level=logging.INFO)\n\t# Memory mapping\n\tSTACK_ADDR  = 0x1000000\n", "STACK_SIZE  = 1024*6\n\tSTRUC_ADDR  = 0x3000000\n\tBUFFER_ADDR = 0x2000000\n\tBASE_ADDRESS= 0x8000000\n\tUSER_CB     = 0x40000000\n\t# Addresses\n\tENTRY_POINT = 0x81dc46e\n\tEXIT_POINT  = 0x81dc472\n\tSTUB_ADDR1  = 0x81d1bf0\n\tSTUB_ADDR2  = 0x81d1252\n", "def pre_inst(se: SymbolicExecutor, state: ProcessState, inst):\n\t    if se.trace_offset > 40000:\n\t        se.seed.status = SeedStatus.HANG\n\t        se.abort()\n\t    #print(f\"[{se.trace_offset}] {inst.getAddress():#08x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"[{se.uid}] seed:{se.seed.hash} ({repr(se.seed.content.variables['buffer'][:100])}) => {se.seed.status.name}   [exitcode:{se.exitcode}]\")\n\tdef fptr_stub(exec: SymbolicExecutor, pstate: ProcessState, addr: int):\n\t    print(f\"fptr_stub addr : {addr:#x}\")\n\t    if addr == STUB_ADDR1:\n", "        pstate.cpu.r0 = 1\n\t    elif addr == STUB_ADDR2:\n\t        pstate.cpu.r0 = 0\n\t    pstate.cpu.program_counter += 2\n\t    exec.skip_instruction()\n\tdef hook_start(exec: SymbolicExecutor, pstate: ProcessState):\n\t    buffer = pstate.get_argument_value(0)\n\t    length = pstate.get_argument_value(1)\n\t    JSON_ctx = pstate.get_argument_value(2)\n\t    exec.inject_symbolic_variable_memory(buffer, \"buffer\", exec.seed.content.variables[\"buffer\"])\n", "    exec.inject_symbolic_variable_memory(JSON_ctx, \"JSON_ctx\", exec.seed.content.variables[\"JSON_ctx\"])\n\t    # Take the length of the buffer (which is not meant to change)\n\t    pstate.cpu.r1 = len(exec.seed.content.variables['buffer'])\n\tconf = Config(skip_unsupported_import=True, seed_format=SeedFormat.COMPOSITE, smt_solver=SmtSolver.Z3)\n\traw_firmware = Path(\"./bugged_json_parser.bin\").read_bytes()\n\tldr = MonolithicLoader(Architecture.ARM32,\n\t                       cpustate = {\"pc\": ENTRY_POINT, \n\t                                   \"r0\": BUFFER_ADDR,\n\t                                   \"r2\": STRUC_ADDR,\n\t                                   \"sp\": STACK_ADDR+STACK_SIZE},\n", "                       set_thumb=True,\n\t                       maps = [LoadableSegment(BASE_ADDRESS, len(raw_firmware), Perm.R|Perm.X, content=raw_firmware, name=\"bugged_json_parser\"), \n\t                               LoadableSegment(BUFFER_ADDR, 40, Perm.R|Perm.W, name=\"input\"),\n\t                               LoadableSegment(STRUC_ADDR, 512, Perm.R|Perm.W, name=\"JSON_ctx\"),\n\t                               LoadableSegment(USER_CB, 1000, Perm.R|Perm.X, name=\"user_cb\"),\n\t                               LoadableSegment(STACK_ADDR, STACK_SIZE, Perm.R|Perm.W, name=\"[stack]\")\n\t                       ])\n\tworkspace = Workspace(\"ws\")\n\tdse = SymbolicExplorator(conf, ldr, executor_stop_at=EXIT_POINT, workspace=workspace)\n\tseed = Seed(CompositeData(variables={\n", "                                    \"buffer\": b\"A\"*40,\n\t                                    \"JSON_ctx\": b\"\\x00\"*128}))#struct.pack(\"<I\", USER_CB)*128}))\n\tdse.add_input_seed(seed)\n\t# dse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\tdse.callback_manager.register_pre_execution_callback(hook_start)\n\tdse.callback_manager.register_pre_instruction_callback(pre_inst)\n\tdse.callback_manager.register_pre_addr_callback(STUB_ADDR1, fptr_stub)\n\tdse.callback_manager.register_pre_addr_callback(STUB_ADDR2, fptr_stub)\n\tdse.explore()\n", "# seed = Seed(CompositeData(variables={\n\t#                                     \"buffer\" : b\"A\"*40,\n\t#                                     \"JSON_ctx\": b\"\\x00\"*128}))#struct.pack(\"<I\", USER_CB)*128}))\n\t# dse = SymbolicExecutor(conf, seed, workspace=workspace)\n\t# dse.load(ldr)\n\t# # dse.callback_manager.register_probe(NullDerefSanitizer())\n\t# dse.cbm.register_post_execution_callback(post_exec_hook)\n\t# dse.cbm.register_pre_execution_callback(hook_start)\n\t# dse.cbm.register_pre_instruction_callback(pre_inst)\n\t# dse.cbm.register_pre_addr_callback(STUB_ADDR1, fptr_stub)\n", "# dse.cbm.register_pre_addr_callback(STUB_ADDR2, fptr_stub)\n\t# dse.run(stop_at=EXIT_POINT)\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve2.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed, SeedFormat, Loader, CompositeData\n\tfrom tritondse.types import Addr, SolverStatus, Architecture, ArchMode\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\tonce_flag = False\n\tdef trace_inst(exec: SymbolicExecutor, pstate: ProcessState, inst: Instruction):\n\t    print(f\"[tid:{inst.getThreadId()}] 0x{inst.getAddress():x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef memory_read_callback(se: SymbolicExecutor, pstate: ProcessState, addr):\n", "    global once_flag\n\t    if once_flag: return\n\t    read_address = addr.getAddress()\n\t    inst_address = pstate.read_register(pstate.registers.rip)\n\t    if inst_address == 0x11c6:\n\t        rax_sym = pstate.read_symbolic_register(pstate.registers.rax)\n\t        rax = pstate.read_register(pstate.registers.rax)\n\t        rbp = pstate.read_register(pstate.registers.rbp)\n\t        target = rbp + rax * 4 - 0x20\n\t        if not pstate.is_register_symbolic(pstate.registers.rax):\n", "            print(\"rax not symbolic\")\n\t            return\n\t        lea = addr.getLeaAst()\n\t        if lea == None: return\n\t        print(f\"argv[1] = {se.seed.content} Target = {hex(target)}\")\n\t        exp = lea != target\n\t        status, model = pstate.solve(exp)\n\t        while status == SolverStatus.SAT:\n\t            new_seed = se.mk_new_seed_from_model(model)\n\t            se.enqueue_seed(new_seed)\n", "            target = pstate.evaluate_expression_model(lea, model)\n\t            var_values = pstate.get_expression_variable_values_model(rax_sym, model)\n\t            for var, value in var_values.items():\n\t                print(f\"{var}: {chr(value)} Target = {hex(target)}\")\n\t            exp = pstate.actx.land([exp, lea != target])\n\t            status, model = pstate.solve(exp)\n\t        once_flag = True\n\tp = Program(\"./2\")\n\tconf = Config(\\\n\t    skip_unsupported_import=True, \\\n", "    seed_format=SeedFormat.COMPOSITE)\n\tdse = SymbolicExplorator(conf, p)\n\tcomposite_data = CompositeData(argv=[b\"./1\", b\"AZ\\nERAZER\"])\n\tdse.add_input_seed(composite_data)\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\tdse.callback_manager.register_memory_read_callback(memory_read_callback)\n\t#dse.callback_manager.register_pre_instruction_callback(trace_inst)\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve4.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed, SeedFormat, CompositeData\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\tonce_flag = False\n\tdef trace_inst(exec: SymbolicExecutor, pstate: ProcessState, inst: Instruction):\n\t    print(f\"[tid:{inst.getThreadId()}] 0x{inst.getAddress():x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef hook_strlen(se: SymbolicExecutor, pstate: ProcessState, routine: str, addr: int):\n", "    global once_flag\n\t    if once_flag: return\n\t    # Get arguments\n\t    s = pstate.get_argument_value(0)\n\t    ast = pstate.actx\n\t    def rec(res, s, deep, maxdeep):\n\t        if deep == maxdeep:\n\t            return res\n\t        cell = pstate.read_symbolic_memory_byte(s+deep).getAst()\n\t        res  = ast.ite(cell == 0x00, ast.bv(deep, 64), rec(res, s, deep + 1, maxdeep))\n", "        return res\n\t    sze = 20\n\t    res = ast.bv(sze, 64)\n\t    res = rec(res, s, 0, sze)\n\t    pstate.push_constraint(pstate.read_symbolic_memory_byte(s+sze).getAst() == 0x00)\n\t    # Manual state coverage of strlen(s) \n\t    exp = res != sze\n\t    status, model = pstate.solve(exp)\n\t    while status == SolverStatus.SAT:\n\t        sze = pstate.evaluate_expression_model(res, model)\n", "        new_seed = se.mk_new_seed_from_model(model)\n\t        print(f\"new_seed : {new_seed.content}\")\n\t        se.enqueue_seed(new_seed)\n\t        var_values = pstate.get_expression_variable_values_model(res, model)\n\t        exp = pstate.actx.land([exp, res != sze])\n\t        status, model = pstate.solve(exp)\n\t    once_flag = True\n\t    return res\n\tp = Program(\"./4\")\n\tdse = SymbolicExplorator(Config(skip_unsupported_import=True,\\\n", "        seed_format=SeedFormat.COMPOSITE), p)\n\tdse.add_input_seed(Seed(CompositeData(argv=[b\"./4\", b\"AAAAAA\"])))\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\tdse.callback_manager.register_pre_imported_routine_callback(\"strlen\", hook_strlen)\n\t#dse.callback_manager.register_post_instruction_callback(trace_inst)\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve1.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed, SeedFormat, CompositeData\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom tritondse.routines import rtn_atoi\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef hook_fread(exec: SymbolicExecutor, pstate: ProcessState, routine: str, addr: int):\n\t    # We hook fread to symbolize what is being read\n\t    arg = pstate.get_argument_value(0)\n\t    sizeof = pstate.get_argument_value(2)\n", "    exec.inject_symbolic_input(arg, exec.seed)\n\t    print(\"Symbolizing {} bytes at {}\".format(hex(sizeof), hex(arg)))\n\t    s = pstate.memory.read_string(arg)\n\t    print(f\"fread: {s}\")\n\t    return 0\n\tdef hook_sscanf4(exec: SymbolicExecutor, pstate: ProcessState, routine: str, addr: int):\n\t    # sscanf(buffer, \"%d\", &j) is treated as j = atoi(buffer)\n\t    ast = pstate.actx\n\t    addr_j = pstate.get_argument_value(2)\n\t    arg = pstate.get_argument_value(0)\n", "    int_str = pstate.memory.read_string(arg)\n\t    cells = {i: pstate.read_symbolic_memory_byte(arg+i).getAst() for i in range(10)}\n\t    def multiply(ast, cells, index):\n\t        n = ast.bv(0, 32)\n\t        for i in range(index):\n\t            n = n * 10 + (ast.zx(24, cells[i]) - 0x30)\n\t        return n\n\t    res = ast.ite(\n\t              ast.lnot(ast.land([cells[0] >= 0x30, cells[0] <= 0x39])),\n\t              multiply(ast, cells, 0),\n", "              ast.ite(\n\t                  ast.lnot(ast.land([cells[1] >= 0x30, cells[1] <= 0x39])),\n\t                  multiply(ast, cells, 1),\n\t                  ast.ite(\n\t                      ast.lnot(ast.land([cells[2] >= 0x30, cells[2] <= 0x39])),\n\t                      multiply(ast, cells, 2),\n\t                      ast.ite(\n\t                          ast.lnot(ast.land([cells[3] >= 0x30, cells[3] <= 0x39])),\n\t                          multiply(ast, cells, 3),\n\t                          ast.ite(\n", "                              ast.lnot(ast.land([cells[4] >= 0x30, cells[4] <= 0x39])),\n\t                              multiply(ast, cells, 4),\n\t                              ast.ite(\n\t                                  ast.lnot(ast.land([cells[5] >= 0x30, cells[5] <= 0x39])),\n\t                                  multiply(ast, cells, 5),\n\t                                  ast.ite(\n\t                                      ast.lnot(ast.land([cells[6] >= 0x30, cells[6] <= 0x39])),\n\t                                      multiply(ast, cells, 6),\n\t                                      ast.ite(\n\t                                          ast.lnot(ast.land([cells[7] >= 0x30, cells[7] <= 0x39])),\n", "                                          multiply(ast, cells, 7),\n\t                                          ast.ite(\n\t                                              ast.lnot(ast.land([cells[8] >= 0x30, cells[8] <= 0x39])),\n\t                                              multiply(ast, cells, 8),\n\t                                              ast.ite(\n\t                                                  ast.lnot(ast.land([cells[9] >= 0x30, cells[9] <= 0x39])),\n\t                                                  multiply(ast, cells, 9),\n\t                                                  multiply(ast, cells, 9)\n\t                                              )\n\t                                          )\n", "                                      )\n\t                                  )\n\t                              )\n\t                          )\n\t                      )\n\t                  )\n\t              )\n\t          )\n\t    res = ast.sx(32, res)\n\t    pstate.write_symbolic_memory_int(addr_j, 8, res)\n", "    try:\n\t        i = int(int_str)\n\t        constraint = res == i\n\t        pstate.push_constraint(constraint)\n\t    except:\n\t        print(\"Failed to convert to int\")\n\t    return res\n\tp = Program(\"./1\")\n\tdse = SymbolicExplorator(Config(\\\n\t        skip_unsupported_import=True,\\\n", "        seed_format=SeedFormat.COMPOSITE), p)\n\tdse.add_input_seed(Seed(CompositeData(files={\"stdin\": b\"AZERZAER\", \"tmp.covpro\": b\"AZERAEZR\"})))\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\t#dse.callback_manager.register_post_imported_routine_callback(\"fread\", hook_fread)\n\tdse.callback_manager.register_pre_imported_routine_callback(\"__isoc99_sscanf\", hook_sscanf4)\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve0.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed, SeedFormat, CompositeData\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\tdef trace_inst(exec: SymbolicExecutor, pstate: ProcessState, inst: Instruction):\n\t    print(f\"[tid:{inst.getThreadId()}] 0x{inst.getAddress():x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})\")\n\tp = Program(\"./7\")\n\tdse = SymbolicExplorator(Config(\\\n", "        skip_unsupported_import=True,\\\n\t        seed_format=SeedFormat.COMPOSITE), p)\n\tdse.add_input_seed(Seed(CompositeData(argv=[b\"./7\", b\"XXXX\"], files={\"stdin\": b\"ZZZZ\"})))\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\t#dse.callback_manager.register_post_instruction_callback(trace_inst)\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve3.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed, SeedFormat, CompositeData\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\tonce_flag_write = False\n\tonce_flag_read = False\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef memory_read_callback(se: SymbolicExecutor, pstate: ProcessState, addr):\n\t    global once_flag_read\n", "    if once_flag_read: return\n\t    read_address = addr.getAddress()\n\t    inst_address = pstate.read_register(pstate.registers.rip)\n\t    lea = addr.getLeaAst()\n\t    if lea == None: return\n\t    #print(f\"inst: {hex(inst_address)} read: {hex(read_address)}\")\n\t    if inst_address == 0x1234:\n\t        print(lea)\n\t        rax_sym = pstate.read_symbolic_register(pstate.registers.rax)\n\t        rax = pstate.read_register(pstate.registers.rax)\n", "        rbp = pstate.read_register(pstate.registers.rbp)\n\t        target = rbp + rax * 4 - 0x80\n\t        if not pstate.is_register_symbolic(pstate.registers.rax):\n\t            print(\"rax not symbolic\")\n\t            return\n\t        print(f\"argv[1] = {se.seed.content} Target = {hex(target)}\")\n\t        exp = lea != target\n\t        status, model = pstate.solve(exp)\n\t        while status == SolverStatus.SAT:\n\t            new_seed = se.mk_new_seed_from_model(model)\n", "            se.enqueue_seed(new_seed)\n\t            target = pstate.evaluate_expression_model(lea, model)\n\t            var_values = pstate.get_expression_variable_values_model(rax_sym, model)\n\t            for var, value in var_values.items():\n\t                print(f\"{var}: {chr(value)} Target = {hex(target)}\")\n\t            exp = pstate.actx.land([exp, lea != target])\n\t            status, model = pstate.solve(exp)\n\t        once_flag_read = True\n\t#   0010120f 89 54 85 80     MOV        dword ptr [RBP + RAX*0x4 + -0x80],EDX\n\tdef memory_write_callback(se: SymbolicExecutor, pstate: ProcessState, addr, value):\n", "    global once_flag_write\n\t    if once_flag_write: return\n\t    read_address = addr.getAddress()\n\t    inst_address = pstate.read_register(pstate.registers.rip)\n\t    lea = addr.getLeaAst()\n\t    if lea == None: return\n\t    #print(f\"inst: {hex(inst_address)} write {hex(value)} to {hex(read_address)}\")\n\t    if inst_address == 0x120f:\n\t        rax_sym = pstate.read_symbolic_register(pstate.registers.rax)\n\t        rax = pstate.read_register(pstate.registers.rax)\n", "        rbp = pstate.read_register(pstate.registers.rbp)\n\t        target = rbp + rax * 4 - 0x80\n\t        if not pstate.is_register_symbolic(pstate.registers.rax):\n\t            print(\"rax not symbolic\")\n\t            return\n\t        print(f\"argv[1] = {se.seed.content} Target = {hex(target)}\")\n\t        exp = lea != target\n\t        status, model = pstate.solve(exp)\n\t        while status == SolverStatus.SAT:\n\t            new_seed = se.mk_new_seed_from_model(model)\n", "            se.enqueue_seed(new_seed)\n\t            target = pstate.evaluate_expression_model(lea, model)\n\t            var_values = pstate.get_expression_variable_values_model(rax_sym, model)\n\t            for var, value in var_values.items():\n\t                print(f\"{var}: {chr(value)} Target = {hex(target)}\")\n\t            exp = pstate.actx.land([exp, lea != target])\n\t            status, model = pstate.solve(exp)\n\t        once_flag_write = True\n\tp = Program(\"./3\")\n\tdse = SymbolicExplorator(Config(\\\n", "        skip_unsupported_import=True,\\\n\t        seed_format=SeedFormat.COMPOSITE), p)\n\tdse.add_input_seed(Seed(CompositeData(files={\"stdin\": b\"AZERAZER\"})))\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\tdse.callback_manager.register_memory_read_callback(memory_read_callback)\n\tdse.callback_manager.register_memory_write_callback(memory_write_callback)\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve5.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\timport logging\n\tbuffers_len_g = dict() # buffer_address : buffer_len\n\tclass StrncpySanitizer(ProbeInterface):\n\t    # TODO handle strncpy into buff + offset\n\t    # TODO handle symbolic n \n\t    def __init__(self):\n", "        super(StrncpySanitizer, self).__init__()\n\t        self._add_callback(CbType.PRE_RTN, self.strncpy_check, 'strncpy')\n\t    def strncpy_check(self, se: SymbolicExecutor, pstate: ProcessState, rtn_name: str, addr: Addr):\n\t        buffer_addr = se.pstate.get_argument_value(0)\n\t        if buffer_addr not in buffers_len_g:\n\t            return \n\t        buffer_len = buffers_len_g[buffer_addr]\n\t        n = se.pstate.get_argument_value(2)\n\t        n_sym = se.pstate.get_argument_symbolic(2)\n\t        if n > buffer_len:\n", "            logging.critical(f\"Found overflowing strncpy buf: {hex(buffer_addr)} bufsize: {buffer_len} copysize: {n}\")\n\t            # Generate input to trigger the overflow\n\t            s = pstate.get_argument_value(1)\n\t            ast = pstate.actx\n\t            def rec(res, s, deep, maxdeep):\n\t                if deep == maxdeep:\n\t                    return res\n\t                cell = pstate.read_symbolic_memory_byte(s+deep).getAst()\n\t                res  = ast.ite(cell == 0x00, ast.bv(deep, 64), rec(res, s, deep + 1, maxdeep))\n\t                return res\n", "            sze = len(pstate.memory.read_string(s))\n\t            res = ast.bv(sze, 64)\n\t            res = rec(res, s, 0, sze)\n\t            pstate.push_constraint(pstate.read_symbolic_memory_byte(s+sze).getAst() == 0x00)\n\t            # Manual state coverage of strlen(s) \n\t            exp = res > n\n\t            print(\"a\")\n\t            status, model = pstate.solve(exp)\n\t            while status == SolverStatus.SAT:\n\t                print(\"b\")\n", "                sze = pstate.evaluate_expression_model(res, model)\n\t                new_seed = se.mk_new_seed_from_model(model)\n\t                #print(f\"new_seed: {new_seed.content} len = {hex(sze)}\")\n\t                se.enqueue_seed(new_seed)\n\t                var_values = pstate.get_expression_variable_values_model(res, model)\n\t                exp = pstate.actx.land([exp, res != sze])\n\t                status, model = pstate.solve(exp)\n\t            return\n\t        if n_sym.isSymbolized():\n\t            const = n_sym > buffer_len\n", "            st, model = pstate.solve(const)\n\t            if st == SolverStatus.SAT:\n\t                new_seed = se.mk_new_seed_from_model(model)\n\t                new_seed.status = SeedStatus.CRASH\n\t                se.enqueue_seed(new_seed) \n\tdef trace_inst(exec: SymbolicExecutor, pstate: ProcessState, inst: Instruction):\n\t    print(f\"[tid:{inst.getThreadId()}] 0x{inst.getAddress():x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef hook_alert_placeholder(exec: SymbolicExecutor, pstate: ProcessState, addr: int):\n", "    buffer_len = pstate.get_argument_value(2)\n\t    buffer_addr = pstate.get_argument_value(3)\n\t    buffers_len_g[buffer_addr] = buffer_len\n\tp = Program(\"./5\")\n\talert_placeholder_addr = p.find_function_addr(\"__alert_placeholder\")\n\tdse = SymbolicExplorator(Config(skip_unsupported_import=True), p)\n\t#dse.add_input_seed(Seed(b\"AZERAZAZERA\"))\n\tdse.add_input_seed(Seed(b\"AZER\"))\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n", "dse.callback_manager.register_pre_addr_callback(alert_placeholder_addr, hook_alert_placeholder)\n\tdse.callback_manager.register_probe(StrncpySanitizer())\n\tdse.explore()\n"]}
{"filename": "doc/practicals/solutions_toy_examples/solve6.py", "chunked_list": ["from tritondse import ProbeInterface, SymbolicExecutor, Config, Program, SymbolicExplorator, ProcessState, CbType, SeedStatus, Seed\n\tfrom tritondse.types import Addr, SolverStatus, Architecture\n\tfrom tritondse.sanitizers import NullDerefSanitizer\n\tfrom triton import Instruction\n\timport logging\n\tbuffers_len_g = dict() # buffer_address : buffer_len\n\tclass StrncpySanitizer(ProbeInterface):\n\t    # TODO handle strncpy into buff + offset\n\t    def __init__(self):\n\t        super(StrncpySanitizer, self).__init__()\n", "        self._add_callback(CbType.PRE_RTN, self.strncpy_check, 'strncpy')\n\t    def strncpy_check(self, se: SymbolicExecutor, pstate: ProcessState, rtn_name: str, addr: Addr):\n\t        buffer_addr = se.pstate.get_argument_value(0)\n\t        if buffer_addr not in buffers_len_g:\n\t            return \n\t        buffer_len = buffers_len_g[buffer_addr]\n\t        n = se.pstate.get_argument_value(2)\n\t        n_sym = se.pstate.get_argument_symbolic(2)\n\t        if n > buffer_len:\n\t            logging.critical(f\"Found overflowing strncpy buf: {hex(buffer_addr)} bufsize: {buffer_len} copysize: {n}\")\n", "            # Generate input to trigger the overflow\n\t            s = pstate.get_argument_value(1)\n\t            ast = pstate.actx\n\t            def rec(res, s, deep, maxdeep):\n\t                if deep == maxdeep:\n\t                    return res\n\t                cell = pstate.read_symbolic_memory_byte(s+deep).getAst()\n\t                res  = ast.ite(cell == 0x00, ast.bv(deep, 64), rec(res, s, deep + 1, maxdeep))\n\t                return res\n\t            sze = len(pstate.memory.read_string(s))\n", "            res = ast.bv(sze, 64)\n\t            res = rec(res, s, 0, sze)\n\t            pstate.push_constraint(pstate.read_symbolic_memory_byte(s+sze).getAst() == 0x00)\n\t            # Manual state coverage of strlen(s) \n\t            exp = res > n\n\t            status, model = pstate.solve(exp)\n\t            while status == SolverStatus.SAT:\n\t                sze = pstate.evaluate_expression_model(res, model)\n\t                new_seed = se.mk_new_seed_from_model(model)\n\t                #print(f\"new_seed: {new_seed.content} len = {hex(sze)}\")\n", "                se.enqueue_seed(new_seed)\n\t                var_values = pstate.get_expression_variable_values_model(res, model)\n\t                exp = pstate.actx.land([exp, res != sze])\n\t                status, model = pstate.solve(exp)\n\t            return\n\t        # If n is symbolic, we try to make if bigger than buffer_len\n\t        if n_sym.isSymbolized():\n\t            const = n_sym.getAst() > buffer_len\n\t            st, model = pstate.solve(const)\n\t            if st == SolverStatus.SAT:\n", "                new_seed = se.mk_new_seed_from_model(model)\n\t                #new_seed.status = SeedStatus.CRASH\n\t                se.enqueue_seed(new_seed) \n\tdef trace_inst(exec: SymbolicExecutor, pstate: ProcessState, inst: Instruction):\n\t    print(f\"[tid:{inst.getThreadId()}] 0x{inst.getAddress():x}: {inst.getDisassembly()}\")\n\tdef post_exec_hook(se: SymbolicExecutor, state: ProcessState):\n\t    print(f\"seed:{se.seed.hash} ({repr(se.seed.content)})   [exitcode:{se.exitcode}]\")\n\tdef hook_alert_placeholder(exec: SymbolicExecutor, pstate: ProcessState, addr: int):\n\t    buffer_len = pstate.get_argument_value(2)\n\t    buffer_addr = pstate.get_argument_value(3)\n", "    buffers_len_g[buffer_addr] = buffer_len\n\tp = Program(\"./6\")\n\talert_placeholder_addr = p.find_function_addr(\"__alert_placeholder\")\n\tdse = SymbolicExplorator(Config(symbolize_argv=True, skip_unsupported_import=True), p)\n\tdse.add_input_seed(Seed(b\"./6\\x00AZERAZER\\x00AZERAZER\"))\n\tdse.callback_manager.register_post_execution_callback(post_exec_hook)\n\t#dse.callback_manager.register_post_instruction_callback(trace_inst)\n\tdse.callback_manager.register_pre_addr_callback(alert_placeholder_addr, hook_alert_placeholder)\n\tdse.callback_manager.register_probe(StrncpySanitizer())\n\tdse.callback_manager.register_probe(NullDerefSanitizer())\n", "dse.explore()\n"]}
{"filename": "tritondse/worklist.py", "chunked_list": ["# built-in imports\n\timport json\n\tfrom typing import Optional\n\t# Local imports\n\tfrom tritondse.seed import Seed\n\tfrom tritondse.coverage import GlobalCoverage\n\tfrom tritondse.workspace import Workspace\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"seedmanager\")\n\tclass SeedScheduler:\n", "    \"\"\"\n\t    Abstract class for all seed selection strategies.\n\t    This class provides the base methods that all\n\t    subclasses should implement to be compliant with\n\t    the interface.\n\t    \"\"\"\n\t    def has_seed_remaining(self) -> bool:\n\t        \"\"\"\n\t        Returns true if there are still seeds to be processed in the scheduler\n\t        :returns: true if there are seeds to process\n", "        \"\"\"\n\t        raise NotImplementedError()\n\t    def add(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Add a new seed in the scheduler\n\t        :param seed: Seed to add in the scheduler\n\t        :type seed: Seed\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def update_worklist(self, coverage: GlobalCoverage) -> None:\n", "        \"\"\"\n\t        Call after every execution.\n\t        That function might help the scheduler with some of its internal states.\n\t        For instance the scheduler is keep somes seed meant to cover an address\n\t        which is now covered, it can just drop these seeds.\n\t        :param coverage: global coverage of the exploration\n\t        :type coverage: GlobalCoverage\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def can_solve_models(self) -> bool:\n", "        \"\"\"\n\t        Function called by the seed manager to know if it can\n\t        start negating branches to discover new paths. Some seed\n\t        scheduler might want to run concretely all inputs first\n\t        before starting negating branches.\n\t        :return: true if the :py:obj:`SeedManager` can negate branches\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def pick(self) -> Optional[Seed]:\n\t        \"\"\"\n", "        Return the next seed to execute.\n\t        :returns: seed to execute\n\t        :rtype: Seed\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def post_execution(self) -> None:\n\t        \"\"\"\n\t        Called at the end of each execution after the generation of new seeds through SMT.\n\t        Last thing called before starting the next iteration.\n\t        \"\"\"\n", "        pass\n\t    def post_exploration(self, workspace: Workspace) -> None:\n\t        \"\"\"\n\t        Called at the end of the exploration to perform\n\t        some clean-up or anything else.\n\t        \"\"\"\n\t        pass\n\tclass WorklistAddressToSet(SeedScheduler):\n\t    \"\"\"\n\t    This worklist classifies seeds by addresses. We map a seed X to an\n", "    address Y, if the seed X has been generated to reach the address Y.\n\t    When the method pick() is called, seeds covering a new address 'Y'\n\t    are selected first. Otherwise anyone is taken.\n\t    \"\"\"\n\t    def __init__(self, manager: 'SeedManager'):\n\t        self.manager = manager\n\t        self.cov = None\n\t        self.worklist = dict() # {CovItem: set(Seed)}\n\t    def __len__(self) -> int:\n\t        \"\"\" Number of pending seeds to execute \"\"\"\n", "        count = 0\n\t        for k in list(self.worklist):  # Copy in list to avoid race-condition\n\t            v = self.worklist[k]\n\t            count += len(v)\n\t        return count\n\t    def has_seed_remaining(self) -> bool:\n\t        \"\"\" Returns true if there are still seeds in the worklist \"\"\"\n\t        return len(self) != 0\n\t    def add(self, seed: Seed) -> None:\n\t        \"\"\" Add a seed to the worklist \"\"\"\n", "        for obj in seed.coverage_objectives:\n\t            if obj in self.worklist:\n\t                self.worklist[obj].add(seed)\n\t            else:\n\t                self.worklist[obj] = {seed}\n\t    def update_worklist(self, coverage: GlobalCoverage) -> None:\n\t        \"\"\" Update the coverage state of the woklist with the global one \"\"\"\n\t        self.cov = coverage\n\t    def can_solve_models(self) -> bool:\n\t        \"\"\"\n", "        Always true.\n\t        This strategy always allows solving branches. As a consequence\n\t        it might try to solve a branch already covered in a seed not run yet.\n\t        But this enables iterating a seed only once.\n\t        :returns: True\n\t        \"\"\"\n\t        return True\n\t    def pick(self) -> Optional[Seed]:\n\t        \"\"\" Return the next seed to execute\n\t        :returns: next seed to execute (first one covering new addresses, otherwise any other)\n", "        :rtype: Seed\n\t        \"\"\"\n\t        seed_picked = None\n\t        item_picked = None\n\t        to_remove = set()\n\t        for k, v in self.worklist.items():\n\t            # If the set is empty remove the entry\n\t            if not len(v):\n\t                to_remove.add(k)\n\t                continue\n", "            # If the address has never been executed, return the seed\n\t            if not self.cov.is_covered(k):\n\t                seed_picked = v.pop()\n\t                item_picked = k\n\t                if not len(v):\n\t                    to_remove.add(k)\n\t                break\n\t        # If all adresses has been executed, just pick a random seed\n\t        if not seed_picked:\n\t            for k, v in self.worklist.items():\n", "                if v:\n\t                    seed_picked = v.pop()\n\t                    item_picked = k\n\t                    if not len(v):\n\t                        to_remove.add(k)\n\t                    break\n\t        # If we did not have a seed again the worklist is definitely empty\n\t        if not seed_picked:\n\t            return None\n\t        # Pop the seed from all worklist[X] where it is\n", "        for obj in seed_picked.coverage_objectives:\n\t            if obj != item_picked:   # already poped it from item_picked thus only pop the other\n\t                if obj in self.worklist and seed_picked in self.worklist[obj]: \n\t                    self.worklist[obj].remove(seed_picked)\n\t                    if not self.worklist[obj]:\n\t                        to_remove.add(obj)\n\t        # Garbage the worklist\n\t        for i in to_remove:\n\t            self.worklist.pop(i)\n\t        return seed_picked\n", "class WorklistRand(SeedScheduler):\n\t    \"\"\"\n\t    Trivial strategy that returns any Seed without any classification.\n\t    It uses a Set for insertion and pop (which is random) for picking seeds.\n\t    \"\"\"\n\t    def __init__(self, manager: 'SeedManager'):\n\t        self.worklist = set() # set(Seed)\n\t    def __len__(self) -> int:\n\t        \"\"\" Number of pending seeds to execute \"\"\"\n\t        return len(self.worklist)\n", "    def has_seed_remaining(self) -> bool:\n\t        \"\"\" Returns true if there are still seeds in the worklist \"\"\"\n\t        return len(self) != 0\n\t    def add(self, seed: Seed) -> None:\n\t        \"\"\" Add a seed to the worklist\n\t        :param seed: Seed to add to this rand scheduler\n\t        :type seed: Seed\n\t        \"\"\"\n\t        self.worklist.add(seed)\n\t    def update_worklist(self, coverage: GlobalCoverage) -> None:\n", "        \"\"\" Update the coverage state of the worklist with the global one \"\"\"\n\t        self.cov = coverage\n\t    def can_solve_models(self) -> bool:\n\t        \"\"\" Always true \"\"\"\n\t        return True\n\t    def pick(self) -> Optional[Seed]:\n\t        \"\"\"\n\t        Return the next seed to execute. The method pop() removes a random element\n\t        from the set and returns the removed element. Unlike, a stack a\n\t        random element is popped off the set.\n", "        :returns: next seed to executre\n\t        :rtype: Seed\n\t        \"\"\"\n\t        return self.worklist.pop() if self.worklist else None\n\tclass FreshSeedPrioritizerWorklist(SeedScheduler):\n\t    \"\"\"\n\t    Strategy that first execute all seeds without negating branches\n\t    in order to get the most updated coverage and which then re-run\n\t    all relevant seeds to negate their branches.\n\t    This worklist works as follow:\n", "        - return first fresh seeds first to get them executed (to improve coverage)\n\t        - keep the seed in the worklist up until it gets dropped or thoroughtly processed\n\t        - if no fresh seed is available, iterates seed that will generate coverage\n\t    \"\"\"\n\t    def __init__(self, manager: 'SeedManager'):\n\t        self.manager = manager\n\t        self.fresh = []       # Seed never processed (list to make sure we can pop first one received)\n\t        self.worklist = dict() # CovItem -> set(Seed)\n\t    def __len__(self) -> int:\n\t        \"\"\" Number of pending seeds to execute \"\"\"\n", "        s = set()\n\t        for seeds in list(self.worklist.values()):\n\t            s.update(seeds)\n\t        return len(self.fresh) + len(s)\n\t    def has_seed_remaining(self) -> bool:\n\t        \"\"\" Returns true if there are still seeds in the worklist \"\"\"\n\t        return len(self) != 0\n\t    def add(self, seed: Seed) -> None:\n\t        \"\"\" Add a seed to the worklist\n\t        :param seed: seed to add to the scheduler\n", "        :type seed: Seed\n\t        \"\"\"\n\t        if seed.coverage_objectives:  # If the seed already have coverage objectives\n\t            for item in seed.coverage_objectives:  # Add it in our worklist\n\t                if item in self.worklist:\n\t                    self.worklist[item].add(seed)\n\t                else:\n\t                    self.worklist[item] = {seed}\n\t            # seed.coverage_objectives.clear()  # Flush the objectives\n\t        else:  # Otherwise it is fresh\n", "            self.fresh.append(seed)\n\t    def update_worklist(self, coverage: GlobalCoverage) -> None:\n\t        \"\"\" Update the coverage state of the worklist with the global one \"\"\"\n\t        # Iterate the worklist to see if some items have now been covered\n\t        # and are thus not interesting anymore\n\t        to_remove = [x for x in self.worklist if coverage.is_covered(x)]\n\t        for item in to_remove:\n\t            for seed in self.worklist.pop(item):\n\t                seed.coverage_objectives.remove(item)\n\t                if not seed.coverage_objectives:  # The seed cannot improve the coverage of anything\n", "                    self.manager.drop_seed(seed)\n\t    def can_solve_models(self) -> bool:\n\t        \"\"\"\n\t        Returns True if there are no \"fresh\" seeds to execute.\n\t        :returns: True if all fresh seeds have been executed.\n\t        \"\"\"\n\t        return not self.fresh\n\t    def pick(self) -> Optional[Seed]:\n\t        \"\"\" Return the next seed to execute \"\"\"\n\t        # Pop first fresh seed\n", "        if self.fresh:\n\t            return self.fresh.pop(0)  # Return first item as it is the older\n\t        # Then pop seed meant to crash\n\t        if ... in self.worklist:  # If we have specific seeds (mostly generated by sanitizers)\n\t            it = self.worklist[...].pop()\n\t            if not self.worklist[...]:  # Remove the key if now empty\n\t                self.worklist.pop(...)\n\t            return it\n\t        if not self.worklist:\n\t            return None\n", "        # Then pop traditional coverage seeds\n\t        k = list(self.worklist.keys())[0]      # arbitrary covitem\n\t        seed = self.worklist[k].pop()          # remove first seed inside\n\t        for it in seed.coverage_objectives:    # Remove the seed from all worklist[x]\n\t            if it != k:                        # we already popped the item from k\n\t                self.worklist[it].remove(seed) # remove the seed from that covitem set\n\t            if not self.worklist[it]:          # remove the whole covitem if empty\n\t                self.worklist.pop(it)\n\t        return seed\n\t    def post_execution(self) -> None:\n", "        \"\"\"\n\t        Solely used to show intermediate statistics\n\t        \"\"\"\n\t        logger.info(f\"Seed Scheduler: worklist:{len(self)} Coverage objectives:{len(self.worklist)}  (fresh:{len(self.fresh)})\")\n\t    def post_exploration(self, workspace: Workspace) -> None:\n\t        \"\"\"\n\t        At the end of the execution, print the worklist to know\n\t        its state before exit.\n\t        \"\"\"\n\t        workspace.save_metadata_file(\"coverage_objectives.json\", json.dumps(list(self.worklist.keys())))\n"]}
{"filename": "tritondse/exception.py", "chunked_list": ["class SkipInstructionException(Exception):\n\t    \"\"\"\n\t    Exception to raise in a PRE callback to skip the evaluation\n\t    of the current instruction. It will thus force a SymbolicExecutor\n\t    to fetch the next instruction. Thus the user have to update the\n\t    RIP of the ProcessState currently being executed.\n\t    \"\"\"\n\t    pass\n\tclass AbortExecutionException(Exception):\n\t    \"\"\"\n", "    Exception to rais in a callback to stop current SymbolicExecutor.\n\t    The user should be careful to set the status of the current seed\n\t    being executed.\n\t    \"\"\"\n\t    pass\n\tclass StopExplorationException(Exception):\n\t    \"\"\"\n\t    Exception to raise in a callback to stop the whole exploration of\n\t    the program. It is caught by SymbolicExplorator.\n\t    \"\"\"\n", "    pass\n\tclass AllocatorException(Exception):\n\t    \"\"\"\n\t    Class used to represent an heap allocator exception.\n\t    This exception can be raised in the following conditions:\n\t    * trying to allocate data which overflow heap size\n\t    * trying to free a pointer already freed\n\t    * trying to free a non-allocated pointer\n\t    \"\"\"\n\t    def __init__(self, message):\n", "        super(Exception, self).__init__(message)\n"]}
{"filename": "tritondse/symbolic_explorator.py", "chunked_list": ["import time\n\timport threading\n\timport gc\n\tfrom enum import Enum\n\tfrom typing import Union, Type\n\tfrom pathlib import Path\n\timport stat\n\timport enum_tools.documentation\n\tfrom tritondse.config            import Config\n\tfrom tritondse.process_state     import ProcessState\n", "from tritondse.loaders           import Loader\n\tfrom tritondse.seed              import Seed\n\tfrom tritondse.symbolic_executor import SymbolicExecutor\n\tfrom tritondse.workspace         import Workspace\n\tfrom tritondse.coverage          import GlobalCoverage\n\tfrom tritondse.types             import Addr\n\tfrom tritondse.exception         import StopExplorationException\n\tfrom tritondse.seeds_manager import SeedManager\n\tfrom tritondse.worklist import SeedScheduler\n\tfrom tritondse.callbacks import CallbackManager\n", "import tritondse.logging\n\tlogger = tritondse.logging.get(\"explorator\")\n\t@enum_tools.documentation.document_enum\n\tclass ExplorationStatus(Enum):\n\t    \"\"\" Enum representing the current state of the exploration \"\"\"\n\t    NOT_RUNNING = 0  # doc: The explorator has not been started yet\n\t    RUNNING     = 1  # doc: The explorator is running and performing exploration\n\t    IDLE        = 2  # doc: The explorator is idle, it has run, but is out of inputs to process\n\t    STOPPED     = 3  # doc: The explorator has been stopped by the user\n\t    TERMINATED  = 4  # doc: The explorator has stopped normally, reached its goal (user-defined)\n", "class SymbolicExplorator(object):\n\t    \"\"\"\n\t    Symbolic Exploration. This class is in charge of iterating\n\t    executions with the different seeds available in the workspace\n\t    and generated along the way.\n\t    \"\"\"\n\t    def __init__(self, config: Config, loader: Loader = None, workspace: Workspace = None, executor_stop_at: Addr = None, seed_scheduler_class: Type[SeedScheduler] = None):\n\t        self.loader: Loader = loader  #: Program being analyzed\n\t        self.config: Config = config  #: Configuration file\n\t        self.cbm: CallbackManager = CallbackManager()  #: CallbackManager to register callbacks\n", "        self._stop = False\n\t        self.ts: int = time.time()  #: Timestamp (object instanciation)\n\t        self.uid_counter: int = 0\n\t        self.status: ExplorationStatus = ExplorationStatus.NOT_RUNNING  #: status of the execution\n\t        self._executor_stop_at = executor_stop_at\n\t        # Initialize the workspace\n\t        if workspace:\n\t            self.workspace: Workspace = workspace  #: exploration workspace\n\t        else:\n\t            self.workspace: Workspace = Workspace(self.config.workspace)  #: workspace object\n", "            self.workspace.initialize(flush=False)\n\t        # Save the configuration in the workspace\n\t        self.workspace.save_file(\"config.json\", self.config.to_json())\n\t        # Save the binary in the workspace if not already done\n\t        if self.loader:\n\t            bin_path = self.workspace.get_binary_directory() / self.loader.bin_path.name\n\t            if not bin_path.exists():  # If the program is not yet present\n\t                self.workspace.save_file(bin_path, self.loader.bin_path.read_bytes())\n\t                self.loader.bin_path = bin_path  # Patch its official new location\n\t                bin_path.chmod(stat.S_IRWXU)  # Make it executable\n", "        # Configure logfile in workspace\n\t        tritondse.logging.enable_to_file(logger.level, self.workspace.logfile_path)\n\t        # Initialize coverage\n\t        self.coverage: GlobalCoverage = GlobalCoverage(self.config.coverage_strategy, self.config.branch_solving_strategy)\n\t        \"\"\" GlobalCoverage object holding information about the global coverage.\n\t        *(not really meant to be manipulated by the user)*\n\t        \"\"\"\n\t        # Load workspace global coverage if any\n\t        cov = self.workspace.get_metadata_file_path(GlobalCoverage.COVERAGE_FILE)\n\t        if cov.exists():\n", "            self.coverage = GlobalCoverage.from_file(cov)\n\t        # Initialize the seed manager\n\t        self.seeds_manager: SeedManager = SeedManager(self.coverage, self.workspace, self.config.smt_queries_limit, callback_manager=self.cbm, seed_scheduler_class=seed_scheduler_class)\n\t        \"\"\" Manager of seed, holding all seeds related data and various statistics \"\"\"\n\t        # running executors (for debugging purposes)\n\t        self.current_executor: SymbolicExecutor = None  #: last symbolic executor executed\n\t        # General purpose attributes\n\t        self._exec_count = 0\n\t        self._total_emulation_time = 0\n\t    @property\n", "    def total_emulation_time(self) -> float:\n\t        \"\"\" Represent total emulation time. This include all callbacks execution\n\t        but not the SMT solving time (performed at the end). \"\"\"\n\t        return self._total_emulation_time\n\t    @property\n\t    def callback_manager(self) -> CallbackManager:\n\t        \"\"\"\n\t        CallbackManager global instance that will be transmitted to\n\t        all :py:obj:`SymbolicExecutor`.\n\t        :rtype: CallbackManager\n", "        \"\"\"\n\t        return self.cbm\n\t    @property\n\t    def execution_count(self) -> int:\n\t        \"\"\"\n\t        Get the number of execution performed.\n\t        :return: number of execution performed\n\t        :rtype: int\n\t        \"\"\"\n\t        return self._exec_count\n", "    def __time_delta(self):\n\t        return time.time() - self.ts\n\t    def _worker(self, seed, uid):\n\t        \"\"\" Worker thread \"\"\"\n\t        logger.info(f'Pick-up seed: {seed.filename} (fresh: {seed.is_fresh()})')\n\t        if self.config.exploration_timeout and self.__time_delta() >= self.config.exploration_timeout:\n\t            logger.info('Exploration timeout')\n\t            self.stop_exploration()\n\t            return\n\t        # Execute the binary with seeds\n", "        cbs = None if self.cbm.is_empty() else self.cbm.fork()\n\t        logger.info(f\"Initialize ProcessState with thread scheduling: {self.config.thread_scheduling}\")\n\t        execution = SymbolicExecutor(self.config, seed=seed, workspace=self.workspace, uid=uid, callbacks=cbs)\n\t        if self.loader:  # If doing the exploration from a program\n\t            execution.load(self.loader)\n\t        else:\n\t            execution.load_process(ProcessState())\n\t        self.current_executor = execution\n\t        # increment exec_count\n\t        self._exec_count += 1\n", "        ts = time.time()\n\t        try:\n\t            execution.run(self._executor_stop_at)\n\t            expl_ts = time.time() - ts\n\t        except StopExplorationException:\n\t            expl_ts = time.time() - ts\n\t            logger.info(\"Exploration interrupted (coverage not integrated)\")\n\t            self.stop_exploration()\n\t        if self.config.exploration_limit and (uid+1) >= self.config.exploration_limit:\n\t            logger.info('Exploration limit reached')\n", "            self.stop_exploration()\n\t        # Some analysis in post execution\n\t        solve_time = self.seeds_manager.post_execution(execution, seed, not self._stop)\n\t        self._total_emulation_time += expl_ts\n\t        logger.info(f\"Emulation: {self._fmt_secs(expl_ts)} | Solving: {self._fmt_secs(solve_time)} | Elapsed: {self._fmt_secs(self.__time_delta())}\\n\")\n\t    def step(self) -> None:\n\t        \"\"\"\n\t        Perform a single exploration step. That means it execute\n\t        a single :py:obj:`SymbolicExecutor`. Then it gives the hand\n\t        back to the user.\n", "        \"\"\"\n\t        # Take an input\n\t        seed = self.seeds_manager.pick_seed()\n\t        # If we don't have any new seed to process just switch exploration to idle\n\t        if seed is None:\n\t            logger.info(\"worklist of seed to process is empty\")\n\t            self.status = ExplorationStatus.IDLE\n\t            return\n\t        # Iterate the callback to be called at each steps\n\t        for cb in self.cbm.get_exploration_step_callbacks():\n", "            cb(self)\n\t        # Execution into a thread\n\t        t = threading.Thread(\n\t            name='\\033[0;%dm[exec:%08d]\\033[0m' % ((31 + (self.uid_counter % 4)), self.uid_counter),\n\t            target=self._worker,\n\t            args=[seed, self.uid_counter],\n\t            daemon=True\n\t        )\n\t        t.start()\n\t        self.uid_counter += 1\n", "        while True:\n\t            t.join(0.001)\n\t            if not t.is_alive():\n\t                break\n\t    def explore(self) -> ExplorationStatus:\n\t        \"\"\"\n\t        Start the symbolic exploration. That function\n\t        holds until the exploration is interrupted or finished.\n\t        :returns: the status of the exploration\n\t        :rtype: ExplorationStatus\n", "        \"\"\"\n\t        self.status = ExplorationStatus.RUNNING\n\t        try:\n\t            while self.seeds_manager.seeds_available() and not self._stop:\n\t                gc.collect()\n\t                self.step()\n\t            if self.status == ExplorationStatus.RUNNING:\n\t                if not self.seeds_manager.seeds_available():\n\t                    logger.info(\"exploration step done (no new seed available)\")\n\t                    self.status = ExplorationStatus.IDLE\n", "                else:\n\t                    logger.warning(f'should not exit step() in RUNNING state (stop? {self._stop}, seeds available? {self.seeds_manager.seeds_available()})')\n\t        except KeyboardInterrupt:\n\t            logger.warning(\"keyboard interrupt, stop symbolic exploration\")\n\t            self.stop_exploration()\n\t        self.post_exploration()\n\t        logger.info(f\"Total time of the exploration: {self._fmt_secs(self.__time_delta())}\")\n\t        if self.status == ExplorationStatus.IDLE:\n\t            logger.info(\"Execution IDLE no seeds to execute\")\n\t        return self.status\n", "    def add_input_seed(self, seed: Union[bytes, Seed]) -> None:\n\t        \"\"\"\n\t        Add the given bytes or Seed object as input for the exploration.\n\t        :param seed: input seed to add in the pending inputs to process\n\t        :type seed: Union[bytes, Seed]\n\t        \"\"\"\n\t        seed = seed if isinstance(seed, Seed) else Seed(seed)\n\t        self.seeds_manager.add_new_seed(seed)\n\t    def stop_exploration(self) -> None:\n\t        \"\"\" Interrupt the exploration \"\"\"\n", "        self.status = ExplorationStatus.STOPPED\n\t        self._stop = True\n\t    def terminate_exploration(self) -> None:\n\t        \"\"\" Terminate exploration with status terminated (normal shutdown) \"\"\"\n\t        self.status = ExplorationStatus.TERMINATED\n\t        self._stop = True\n\t    @staticmethod\n\t    def _fmt_secs(seconds) -> str:\n\t        m, s = divmod(seconds, 60)\n\t        h, m = divmod(m, 60)\n", "        return (f\"{int(h)}h\" if h else '')+f\"{int(m)}m{int(s)}s\"\n\t    def post_exploration(self) -> None:\n\t        \"\"\" Perform  all calls to post exploration functions\"\"\"\n\t        self.seeds_manager.post_exploration()\n\t        self.coverage.post_exploration(self.workspace)\n"]}
{"filename": "tritondse/sanitizers.py", "chunked_list": ["from __future__ import annotations\n\tfrom triton import Instruction\n\tfrom tritondse.callbacks import CbType, ProbeInterface\n\tfrom tritondse.seed import Seed, SeedStatus\n\tfrom tritondse.types import Architecture, Addr, Tuple, SolverStatus\n\tfrom tritondse import SymbolicExecutor, ProcessState\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"sanitizers\")\n\tdef mk_new_crashing_seed(se, model) -> Seed:\n\t    \"\"\"\n", "    This function is used by every sanitizers to dump the model found in order\n\t    to trigger a bug into the crash directory.\n\t    :return: A fresh Seed\n\t    \"\"\"\n\t    new_input = bytearray(se.seed.content)\n\t    for k, v in model.items():\n\t        new_input[k] = v.getValue()\n\t    # Don't tag the seed as CRASH before executing it.\n\t    # At this stage, we do not know if the seed will really make the\n\t    # program crash or not.\n", "    return Seed(bytes(new_input))\n\tclass UAFSanitizer(ProbeInterface):\n\t    \"\"\"\n\t    Use-After-Free Sanitizer.\n\t    It is able to detect UaF and double-free. It works by hooking\n\t    all memory read/write if it points to the heap in a freed area\n\t    then the Use-After-Free is detected. It also hooks the free\n\t    routine to detect double-free.\n\t    \"\"\"\n\t    def __init__(self):\n", "        super(UAFSanitizer, self).__init__()\n\t        self._add_callback(CbType.MEMORY_READ, self._memory_read)\n\t        self._add_callback(CbType.MEMORY_WRITE, self._memory_write)\n\t        self._add_callback(CbType.PRE_RTN, self._free_routine, 'free')\n\t    @staticmethod\n\t    def check(se: SymbolicExecutor, pstate: ProcessState, ptr: Addr, description: str = None) -> bool:\n\t        \"\"\"\n\t        Checks whether the given ``ptr`` is symptomatic of a Use-After-Free by querying\n\t        various methods of :py:obj:`tritondse.heap_allocator.HeapAllocator`.\n\t        :param se: symbolic executor\n", "        :type se: SymbolicExecutor\n\t        :param pstate: process state\n\t        :type pstate: ProcessState\n\t        :param ptr: pointer address to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :param description: description string printed in logger if an issue is detected\n\t        :return: True if the bug is present\n\t        \"\"\"\n\t        if pstate.is_heap_ptr(ptr) and pstate.heap_allocator.is_ptr_freed(ptr):\n\t            if description:\n", "                logger.critical(description)\n\t            se.seed.status = SeedStatus.CRASH\n\t            pstate.stop = True\n\t            return True\n\t        return False\n\t    @staticmethod\n\t    def _memory_read(se, pstate, mem):\n\t        return UAFSanitizer.check(se, pstate, mem.getAddress(), f'UAF detected at {mem}')\n\t    @staticmethod\n\t    def _memory_write(se, pstate, mem, value):\n", "        return UAFSanitizer.check(se, pstate, mem.getAddress(), f'UAF detected at {mem}')\n\t    @staticmethod\n\t    def _free_routine(se, pstate, name, addr):\n\t        ptr = se.pstate.get_argument_value(0)\n\t        return UAFSanitizer.check(se, pstate, ptr, f'Double free detected at {addr:#x}')\n\tclass NullDerefSanitizer(ProbeInterface):\n\t    \"\"\"\n\t    Null Dereference Sanitizer.\n\t    Simply checks if any memory read or write is performed at address 0.\n\t    If so an error is raised.\n", "    \"\"\"\n\t    def __init__(self):\n\t        super(NullDerefSanitizer, self).__init__()\n\t        self._add_callback(CbType.MEMORY_READ, self._memory_read)\n\t        self._add_callback(CbType.MEMORY_WRITE, self._memory_write)\n\t    @staticmethod\n\t    def check(se: SymbolicExecutor, pstate: ProcessState, ptr: Addr, description: str = None) -> bool:\n\t        \"\"\"\n\t        Checks that the ``ptr`` given is basically not 0.\n\t        :param se: symbolic executor\n", "        :type se: SymbolicExecutor\n\t        :param pstate: process state\n\t        :type pstate: ProcessState\n\t        :param ptr: pointer address to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :param description: description string printed in logger if an issue is detected\n\t        :return: True if the bug is present\n\t        \"\"\"\n\t         # The execution has not started yet\n\t        if pstate.current_instruction is None:\n", "            return False\n\t        # FIXME: Takes so much time...\n\t        #if access_ast is not None and access_ast.isSymbolized():\n\t        #    model = pstate.tt_ctx.getModel(access_ast == 0)\n\t        #    if model:\n\t        #        logging.warning(f'Potential null deref when reading at {mem}')\n\t        #        crash_seed = mk_new_crashing_seed(se, model)\n\t        #        se.workspace.save_seed(crash_seed)\n\t        #        se.seed.status = SeedStatus.OK_DONE\n\t        #        # Do not abort, just continue the execution\n", "        #if access_ast is not None and access_ast.evaluate() == 0:\n\t        # FIXME: Ici on rajoute 16 car nous avons un problème si une instruction se situe\n\t        # en fin de page mappée. Lors du fetching des opcodes, nous fetchons 16 bytes car\n\t        # nous ne connaissons pas la taille d'une instruction, ici, en fetchant en fin de\n\t        # page on déclenche ce sanitizer...\n\t        # FIXME: Why do we call is_valid_memory_mapping ? It is not a \"Null Deref vulnerability\", it is more a segmentation error\n\t        if ptr == 0 or (pstate.memory.segmentation_enabled and not pstate.memory.is_mapped(ptr)):\n\t            if description:\n\t                logger.critical(description)\n\t            se.seed.status = SeedStatus.CRASH\n", "            pstate.stop = True\n\t            return True\n\t        return False\n\t    @staticmethod\n\t    def _memory_read(se, pstate, mem):\n\t        return NullDerefSanitizer.check(se, pstate, mem.getAddress(), f'Invalid memory access when reading at {mem} from {pstate.current_instruction}')\n\t    @staticmethod\n\t    def _memory_write(se, pstate, mem, value):\n\t        return NullDerefSanitizer.check(se, pstate, mem.getAddress(), f'Invalid memory access when writting at {mem} from {pstate.current_instruction}')\n\tclass FormatStringSanitizer(ProbeInterface):\n", "    \"\"\"\n\t    Format String Sanitizer.\n\t    This probes hooks standard libc functions like 'printf', 'fprintf', 'sprintf',\n\t    'dprintf', 'snprintf' and if one of them is triggered it checks the format string.\n\t    If the format string is symbolic then it is user controlled. A warning is shown\n\t    but the execution not interrupted. However the sanitizer tries through SMT to\n\t    generate format strings with many '%s'. If satisfiable a new input is generated\n\t    which will then be added to inputs to process. That subsequent input might lead\n\t    to a crash.\n\t    \"\"\"\n", "    def __init__(self):\n\t        super(FormatStringSanitizer, self).__init__()\n\t        self._add_callback(CbType.PRE_RTN,  self._xprintf_arg0_routine, 'printf')\n\t        self._add_callback(CbType.PRE_RTN, self._xprintf_arg1_routine, 'fprintf')\n\t        self._add_callback(CbType.PRE_RTN, self._xprintf_arg1_routine, 'sprintf')\n\t        self._add_callback(CbType.PRE_RTN, self._xprintf_arg1_routine, 'dprintf')\n\t        self._add_callback(CbType.PRE_RTN, self._xprintf_arg1_routine, 'snprintf')\n\t    @staticmethod\n\t    def check(se, pstate, fmt_ptr, extra_data: Tuple[str, Addr] = None):\n\t        \"\"\"\n", "        Checks that the format string at ``fmt_ptr`` does not contain\n\t        symbolic bytes. If so shows an alert and tries to generate new\n\t        inputs with as many '%s' as possible.\n\t        :param se: symbolic executor\n\t        :type se: SymbolicExecutor\n\t        :param pstate: process state\n\t        :type pstate: ProcessState\n\t        :param fmt_ptr: pointer address to check\n\t        :type fmt_ptr: :py:obj:`tritondse.types.Addr`\n\t        :param extra_data: additionnal infos given by the callbacks on routines (indicating function address)\n", "        :type extra_data: Tuple[str, :py:obj:`tritondse.types.Addr`]\n\t        :return: True if the bug is present\n\t        \"\"\"\n\t        symbolic_cells = []\n\t        # Count the number of cells which is symbolic\n\t        cur_ptr = fmt_ptr\n\t        while se.pstate.memory.read_uchar(cur_ptr):  # while different from 0\n\t            if se.pstate.is_memory_symbolic(cur_ptr, 1):\n\t                symbolic_cells.append(cur_ptr)\n\t            cur_ptr += 1\n", "        if symbolic_cells:\n\t            extra = f\"(function {extra_data[0]}@{extra_data[1]:#x})\" if extra_data else \"\"\n\t            logger.warning(f'Potential format string of length {len(symbolic_cells)} on {fmt_ptr:x} {extra}')\n\t            se.seed.status = SeedStatus.OK_DONE\n\t            pp_seeds = []\n\t            nopp_seeds = []\n\t            for i in range(int(len(symbolic_cells) / 2)):\n\t                # FIXME: Does not check that cell1 and cell2 are contiguous\n\t                cell1 = pstate.read_symbolic_memory_byte(symbolic_cells.pop(0)).getAst()\n\t                cell2 = pstate.read_symbolic_memory_byte(symbolic_cells.pop(0)).getAst()\n", "                # Try to solve once with the path predicate\n\t                st, model = pstate.solve([cell1 == ord('%'), cell2 == ord('s')], with_pp=True)\n\t                if st == SolverStatus.SAT and model:\n\t                    pp_seeds.append(mk_new_crashing_seed(se, model))\n\t                # Try once again without the path predicate (may be incorrect but help to discover bug)\n\t                st, model = pstate.solve_no_pp([cell1 == ord('%'), cell2 == ord('s')])\n\t                if st == SolverStatus.SAT and model:\n\t                    pp_seeds.append(mk_new_crashing_seed(se, model))\n\t            # If found some seeds\n\t            if pp_seeds:\n", "                s = pp_seeds[-1]\n\t                se.enqueue_seed(s)  # Only keep last seed\n\t                logger.warning(f'Found model that might lead to a crash: {s.hash} (with path predicate)')\n\t            if nopp_seeds:\n\t                s = nopp_seeds[-1]\n\t                se.enqueue_seed(s)  # Only keep last seed\n\t                logger.warning(f'Found model that might lead to a crash: {s.hash} (without path predicate)')\n\t            # Do not stop the execution, just continue the execution\n\t            pstate.stop = False\n\t            return True\n", "        return False\n\t    @staticmethod\n\t    def _xprintf_arg0_routine(se, pstate, name, addr):\n\t        string_ptr = se.pstate.get_argument_value(0)\n\t        FormatStringSanitizer.check(se, pstate, string_ptr, (name, addr))\n\t    @staticmethod\n\t    def _xprintf_arg1_routine(se, pstate, name, addr):\n\t        string_ptr = se.pstate.get_argument_value(1)\n\t        FormatStringSanitizer.check(se, pstate, string_ptr, (name, addr))\n\tclass IntegerOverflowSanitizer(ProbeInterface):\n", "    \"\"\"\n\t    Integer Overflow Sanitizer.\n\t    This probe checks on every instructions that the overflow\n\t    flag is not set. If so mark the input as a crashing input.\n\t    If not, but the value is symbolic, via SMT solving to make\n\t    it to be set (and thus to overflow). If possible generates\n\t    a new input to be executed.\n\t    \"\"\"\n\t    def __init__(self):\n\t        super(IntegerOverflowSanitizer, self).__init__()\n", "        self._add_callback(CbType.POST_INST, self.check)\n\t    @staticmethod\n\t    def check(se: SymbolicExecutor, pstate: ProcessState, instruction: Instruction) -> bool:\n\t        \"\"\"\n\t        The entry point of the sanitizer. This function check if a bug is present\n\t        :param se: symbolic executor\n\t        :type se: SymbolicExecutor\n\t        :param pstate: process state\n\t        :type pstate: ProcessState\n\t        :param instruction: Instruction that has just been executed\n", "        :type instruction: `Instruction <https://triton.quarkslab.com/documentation/doxygen/py_Instruction_page.html>`_\n\t        :return: True if the bug is present\n\t        \"\"\"\n\t        # This probe is only available for X86_64 and AARCH64\n\t        assert(pstate.architecture == Architecture.X86_64 or pstate.architecture == Architecture.AARCH64)\n\t        rf = (pstate.registers.of if pstate.architecture == Architecture.X86_64 else pstate.registers.v)\n\t        if pstate.read_register(rf):\n\t            logger.warning(f'Integer overflow at {instruction}')\n\t            # FIXME: What if it's normal behavior?\n\t            se.seed.status = SeedStatus.CRASH\n", "            return True\n\t        else:  # if no overflow took place check if symbolic and if so, if it can be 1\n\t            if pstate.is_register_symbolic(rf):\n\t                sym_flag = pstate.read_symbolic_register(rf)\n\t                _, model = pstate.solve_no_pp(sym_flag.getAst() == 1)\n\t                if model:\n\t                    logger.warning(f'Potential integer overflow at {instruction}')\n\t                    crash_seed = mk_new_crashing_seed(se, model)\n\t                    se.enqueue_seed(crash_seed)\n\t                    return True\n", "        return False\n"]}
{"filename": "tritondse/arch.py", "chunked_list": ["# built-in modules\n\timport platform\n\tfrom collections import namedtuple\n\t# third-party module\n\tfrom triton import OPCODE, TritonContext\n\t# local imports\n\tfrom tritondse.types import Architecture, Addr\n\tArch = namedtuple(\"Arch\", \"ret_reg pc_reg bp_reg sp_reg sys_reg reg_args halt_inst syscall_inst\")\n\tARCHS = {\n\t    Architecture.X86:     Arch('eax', 'eip', 'ebp', 'esp', 'eax',\n", "                               [],\n\t                               OPCODE.X86.HLT,\n\t                               [OPCODE.X86.SYSCALL, OPCODE.X86.SYSENTER]),  # ignore int 80\n\t    Architecture.X86_64:  Arch('rax', 'rip', 'rbp', 'rsp', 'rax',\n\t                               ['rdi', 'rsi', 'rdx', 'rcx', 'r8', 'r9'],\n\t                               OPCODE.X86.HLT,\n\t                               [OPCODE.X86.SYSCALL, OPCODE.X86.SYSENTER]),  # ignore int 80\n\t    Architecture.AARCH64: Arch('x0', 'pc', 'sp', 'sp', 'x8',\n\t                               ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7'],\n\t                               OPCODE.AARCH64.HLT,\n", "                               [OPCODE.AARCH64.SVC]),\n\t    Architecture.ARM32:   Arch('r0', 'pc', 'r11', 'sp', 'r7',\n\t                               ['r0', 'r1', 'r2', 'r3'],\n\t                               OPCODE.ARM32.HLT,\n\t                               [OPCODE.ARM32.SVC])\n\t}\n\tclass CpuState(dict):\n\t    \"\"\"\n\t    Thin wrapper on a TritonContext, to allow accessing\n\t    and modifying registers in a Pythonic way. It also\n", "    abstract base, stack, and program counter for architecture\n\t    agnostic operations. This class performs all actions\n\t    on the TritonContext, and does not hold any information.\n\t    It is just acting as a proxy\n\t    .. note:: This class adds dynamically attributes corresponding\n\t              to register. Thus attributes will vary from an architecture\n\t              to the other.\n\t    >>> cpu.rax\n\t    12\n\t    >>> cpu.rax += 1\n", "    >>> cpu.rax\n\t    13\n\t    No data is stored, all operations are performed on the\n\t    TritonContext:\n\t    >>> cpu.__ctx.getConcreteRegisterValue(cpu.rsp)\n\t    0x7ff6540\n\t    >>> cpu.stack_pointer += 8\n\t    >>> cpu.__ctx.getConcreteRegisterValue(cpu.rsp)\n\t    0x7ff6548\n\t    .. note:: The user is not meant to instanciate it manually, and must\n", "              use it through :py:obj:`ProcessState`.\n\t    \"\"\"\n\t    def __init__(self, ctx: TritonContext, arch_info: Arch):\n\t        super(CpuState, self).__init__()\n\t        self.__ctx = ctx\n\t        self.__archinfo = arch_info\n\t        for r in ctx.getAllRegisters():\n\t            self[r.getName()] = r\n\t    def __getattr__(self, name: str):\n\t        \"\"\"\n", "        Return the concrete value of a given register name\n\t        :param name: The name of the register\n\t        :return: the concrete value of a given register\n\t        \"\"\"\n\t        if name in self:\n\t            return self.__ctx.getConcreteRegisterValue(self[name])\n\t        else:\n\t            super().__getattr__(name)\n\t    def __setattr__(self, name: str, value: int):\n\t        \"\"\"\n", "        Set a concrete value to a given register name\n\t        :param name: The name of the register\n\t        :param value: The concrete value to set\n\t        \"\"\"\n\t        if name in self:\n\t            self.__ctx.setConcreteRegisterValue(self[name], value)\n\t        else:\n\t            super().__setattr__(name, value)\n\t    @property\n\t    def program_counter(self) -> int:\n", "        \"\"\"\n\t        :return: The value of the program counter (RIP for x86, PC for ARM ..)\n\t        :rtype: int\n\t        \"\"\"\n\t        return getattr(self, self.__archinfo.pc_reg)\n\t    @program_counter.setter\n\t    def program_counter(self, value: int) -> None:\n\t        \"\"\"\n\t        Set a value to the program counter\n\t        :param value: Value to set\n", "        :type value: int\n\t        \"\"\"\n\t        setattr(self, self.__archinfo.pc_reg, value)\n\t    @property\n\t    def base_pointer(self) -> int:\n\t        \"\"\"\n\t        :return: The value of the base pointer register\n\t        \"\"\"\n\t        return getattr(self, self.__archinfo.bp_reg)\n\t    @base_pointer.setter\n", "    def base_pointer(self, value: int) -> None:\n\t        \"\"\"\n\t        Set a value to the base pointer register\n\t        :param value: Value to set\n\t        :return: None\n\t        \"\"\"\n\t        setattr(self, self.__archinfo.bp_reg, value)\n\t    @property\n\t    def stack_pointer(self) -> int:\n\t        \"\"\"\n", "        :return: The value of the stack pointer register\n\t        \"\"\"\n\t        return getattr(self, self.__archinfo.sp_reg)\n\t    @stack_pointer.setter\n\t    def stack_pointer(self, value: int) -> None:\n\t        \"\"\"\n\t        Set a value to the stack pointer register\n\t        :param value: Value to set\n\t        :type value: int\n\t        \"\"\"\n", "        setattr(self, self.__archinfo.sp_reg, value)\n\tdef local_architecture() -> Architecture:\n\t    \"\"\"\n\t    Returns the architecture of the local machine.\n\t    :return: local architecture\n\t    \"\"\"\n\t    arch_m = {\"i386\": Architecture.X86,\n\t              \"x86_64\": Architecture.X86_64,\n\t              \"armv7l\": Architecture.ARM32,\n\t              \"aarch64\": Architecture.AARCH64}\n", "    return arch_m[platform.machine()]\n"]}
{"filename": "tritondse/routines.py", "chunked_list": ["import io\n\timport logging\n\timport os\n\timport random\n\timport re\n\timport sys\n\timport time\n\tfrom tritondse.types import Architecture, FileDesc\n\tfrom tritondse.seed import SeedFormat, SeedStatus, Seed\n\timport tritondse.logging\n", "logger = tritondse.logging.get(\"routines\")\n\tNULL_PTR = 0\n\tdef rtn_ctype_b_loc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __ctype_b_loc behavior.\n\t    \"\"\"\n\t    logger.debug('__ctype_b_loc hooked')\n\t    ctype  = b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n", "    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n", "    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\"  # must point here\n\t    ctype += b\"\\x02\\x00\\x03\\x20\\x02\\x20\\x02\\x20\\x02\\x20\\x02\\x20\\x02\\x00\\x02\\x00\"\n\t    ctype += b\"\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\"\n\t    ctype += b\"\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\\x02\\x00\"\n\t    ctype += b\"\\x01\\x60\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\"\n\t    ctype += b\"\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\"\n\t    ctype += b\"\\x08\\xd8\\x08\\xd8\\x08\\xd8\\x08\\xd8\\x08\\xd8\\x08\\xd8\\x08\\xd8\\x08\\xd8\"\n", "    ctype += b\"\\x08\\xd8\\x08\\xd8\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\"\n\t    ctype += b\"\\x04\\xc0\\x08\\xd5\\x08\\xd5\\x08\\xd5\\x08\\xd5\\x08\\xd5\\x08\\xd5\\x08\\xc5\"\n\t    ctype += b\"\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\"\n\t    ctype += b\"\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x08\\xc5\"\n\t    ctype += b\"\\x08\\xc5\\x08\\xc5\\x08\\xc5\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\"\n\t    ctype += b\"\\x04\\xc0\\x08\\xd6\\x08\\xd6\\x08\\xd6\\x08\\xd6\\x08\\xd6\\x08\\xd6\\x08\\xc6\"\n\t    ctype += b\"\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\"\n\t    ctype += b\"\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x08\\xc6\"\n\t    ctype += b\"\\x08\\xc6\\x08\\xc6\\x08\\xc6\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x04\\xc0\\x02\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n", "    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    ctype += b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\t    # Allocate on heap enough to make the table to fit\n\t    alloc_size = 2*pstate.ptr_size + len(ctype)\n\t    base_ctype = pstate.heap_allocator.alloc(alloc_size)\n\t    ctype_table_offset = base_ctype + (pstate.ptr_size * 2)\n\t    otable_offset = ctype_table_offset + 256\n", "    pstate.memory.write_ptr(base_ctype, otable_offset)\n\t    pstate.memory.write_ptr(base_ctype+pstate.ptr_size, 0)\n\t    # FIXME: On pourrait la renvoyer qu'une seule fois ou la charger au demarage direct dans pstate\n\t    pstate.memory.write(ctype_table_offset, ctype)\n\t    return base_ctype\n\tdef rtn_ctype_toupper_loc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    # FIXME: Not sure about the array and where to place the pointer \n\t    # https://codebrowser.dev/glibc/glibc/locale/C-ctype.c.html\n\t    \"\"\"\n\t    The __ctype_toupper_loc behavior.\n", "    \"\"\"\n\t    logger.debug('__ctype_toupper_loc hooked')\n\t    ctype  = b\"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\"\n\t    ctype += b\"\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\"\n\t    ctype += b\"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\"\n\t    ctype += b\"\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\"\n\t    ctype += b\"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\"\n\t    ctype += b\"\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\"\n\t    ctype += b\"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\"\n\t    ctype += b\"\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\\xff\\xff\\xff\"\n", "    ctype += b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\"\n\t    ctype += b\"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n\t    ctype += b\"\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\"\n\t    ctype += b\"\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\"\n\t    ctype += b\"\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\"\n\t    ctype += b\"\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\"\n\t    ctype += b\"\\x60\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\"\n\t    ctype += b\"\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x7b\\x7c\\x7d\\x7e\\x7f\"\n\t    ctype += b\"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\"\n\t    ctype += b\"\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\"\n", "    ctype += b\"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\"\n\t    ctype += b\"\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\"\n\t    ctype += b\"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\"\n\t    ctype += b\"\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\"\n\t    ctype += b\"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\"\n\t    ctype += b\"\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n\t    # Allocate on heap enough to make the table to fit\n\t    alloc_size = 2*pstate.ptr_size + len(ctype)\n\t    base_ctype = pstate.heap_allocator.alloc(alloc_size)\n\t    ctype_table_offset = base_ctype + (pstate.ptr_size * 2)\n", "    otable_offset = ctype_table_offset + 256\n\t    pstate.memory.write_ptr(base_ctype, otable_offset)\n\t    pstate.memory.write_ptr(base_ctype+pstate.ptr_size, 0)\n\t    # FIXME: On pourrait la renvoyer qu'une seule fois ou la charger au demarage direct dans pstate\n\t    pstate.memory.write(ctype_table_offset, ctype)\n\t    return base_ctype\n\tdef rtn_errno_location(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __errno_location behavior.\n\t    \"\"\"\n", "    logger.debug('__errno_location hooked')\n\t    # Errno is a int* ptr, initialize it to zero\n\t    # We consider it is located in the [extern] segment\n\t    # Thus the process must have one of this map\n\t    segs = pstate.memory.find_map(pstate.EXTERN_SEG)\n\t    if segs:\n\t        map = segs[0]\n\t        ERRNO = map.start + map.size - 4  # Point is last int of the mapping\n\t    else:\n\t        assert False\n", "    pstate.memory.write_dword(ERRNO, 0)\n\t    return ERRNO\n\tdef rtn_libc_start_main(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __libc_start_main behavior.\n\t    \"\"\"\n\t    logger.debug('__libc_start_main hooked')\n\t    # Get arguments\n\t    main = pstate.get_argument_value(0)\n\t    # WARNING: Dirty trick to make sure to jump on main after\n", "    # the emulation of that stub\n\t    if pstate.architecture == Architecture.AARCH64:\n\t        pstate.cpu.x30 = main\n\t    elif pstate.architecture in [Architecture.X86_64, Architecture.X86]:\n\t        # Push the return value to jump into the main() function\n\t        pstate.push_stack_value(main)\n\t    else:\n\t        assert False\n\t    # Define concrete value of argc (from either the seed or the program_argv)\n\t    if se.config.is_format_raw():\n", "        # Cannot provide argv in RAW seeds\n\t        argc = len(se.config.program_argv)\n\t    else: # SeedFormat.COMPOSITE\n\t        argc = len(se.seed.content.argv) if se.seed.content.argv else len(se.config.program_argv)\n\t    if pstate.architecture == Architecture.X86:\n\t        # Because of the \"Dirty trick\" described above, we RET to main instead of CALLing it.\n\t        # Because of that, the arguments end up 1 slot off on the stack\n\t        pstate.write_argument_value(0 + 1, argc)\n\t    else:\n\t        pstate.write_argument_value(0, argc)\n", "    logger.debug(f\"argc = {argc}\")\n\t    # Define argv\n\t    addrs = list()\n\t    if se.config.is_format_composite() and se.seed.content.argv: # Use the seed provided (and ignore config.program_argv !!)\n\t        argvs = se.seed.content.argv\n\t        src = 'seed'\n\t    else:  # use the config argv\n\t        argvs = [x.encode(\"latin-1\") for x in se.config.program_argv]  # Convert it from str to bytes\n\t        src = 'config'\n\t    # Compute the allocation size: size of strings, + all \\x00 + all pointers\n", "    size = sum(len(x) for x in argvs)+len(argvs)+len(argvs)*pstate.ptr_size\n\t    if size == 0:  # Falback on a single pointer that will hold not even be initialized\n\t        size = pstate.ptr_size\n\t    # We put the ARGV stuff on the heap even though its normally on stack\n\t    base = pstate.heap_allocator.alloc(size)\n\t    for i, arg in enumerate(argvs):\n\t        addrs.append(base)\n\t        pstate.memory.write(base, arg + b'\\x00')\n\t        if se.config.is_format_composite() and se.seed.content.argv: # Use the seed provided (and ignore config.program_argv !!)\n\t            # Symbolize the argv string\n", "            se.inject_symbolic_argv_memory(base, i, arg)\n\t            # FIXME: Shall add a constraint on every char to be != \\x00\n\t        logger.debug(f\"({src}) argv[{i}] = {repr(pstate.memory.read(base, len(arg)))}\")\n\t        base += len(arg) + 1\n\t    # NOTE: the array of pointers will be after the string themselves\n\t    b_argv = base\n\t    for addr in addrs:\n\t        pstate.memory.write_ptr(base, addr)\n\t        base += pstate.ptr_size\n\t    # Concrete value\n", "    if pstate.architecture == Architecture.X86:\n\t        # Because of the \"Dirty trick\" described above, we RET to main instead of CALLing it.\n\t        # Because of that, the arguments end up 1 slot off on the stack\n\t        pstate.write_argument_value(1 + 1, b_argv)\n\t    else:\n\t        pstate.write_argument_value(1, b_argv)\n\t    return None\n\tdef rtn_stack_chk_fail(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __stack_chk_fail behavior.\n", "    \"\"\"\n\t    logger.debug('__stack_chk_fail hooked')\n\t    logger.critical('*** stack smashing detected ***: terminated')\n\t    se.seed.status = SeedStatus.CRASH\n\t    pstate.stop = True\n\t# int __xstat(int ver, const char* path, struct stat* stat_buf);\n\tdef rtn_xstat(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __xstat behavior.\n\t    \"\"\"\n", "    logger.debug('__xstat hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # int ver\n\t    arg1 = pstate.get_argument_value(1)  # const char* path\n\t    arg2 = pstate.get_argument_value(2)  # struct stat* stat_buf\n\t    if os.path.isfile(pstate.memory.read_string(arg1)):\n\t        stat = os.stat(pstate.memory.read_string(arg1))\n\t        pstate.memory.write_qword(arg2 + 0x00, stat.st_dev)\n\t        pstate.memory.write_qword(arg2 + 0x08, stat.st_ino)\n\t        pstate.memory.write_qword(arg2 + 0x10, stat.st_nlink)\n", "        pstate.memory.write_dword(arg2 + 0x18, stat.st_mode)\n\t        pstate.memory.write_dword(arg2 + 0x1c, stat.st_uid)\n\t        pstate.memory.write_dword(arg2 + 0x20, stat.st_gid)\n\t        pstate.memory.write_dword(arg2 + 0x24, 0)\n\t        pstate.memory.write_qword(arg2 + 0x28, stat.st_rdev)\n\t        pstate.memory.write_qword(arg2 + 0x30, stat.st_size)\n\t        pstate.memory.write_qword(arg2 + 0x38, stat.st_blksize)\n\t        pstate.memory.write_qword(arg2 + 0x40, stat.st_blocks)\n\t        pstate.memory.write_qword(arg2 + 0x48, 0)\n\t        pstate.memory.write_qword(arg2 + 0x50, 0)\n", "        pstate.memory.write_qword(arg2 + 0x58, 0)\n\t        pstate.memory.write_qword(arg2 + 0x60, 0)\n\t        pstate.memory.write_qword(arg2 + 0x68, 0)\n\t        pstate.memory.write_qword(arg2 + 0x70, 0)\n\t        pstate.memory.write_qword(arg2 + 0x78, 0)\n\t        pstate.memory.write_qword(arg2 + 0x80, 0)\n\t        pstate.memory.write_qword(arg2 + 0x88, 0)\n\t        return 0\n\t    return pstate.minus_one\n\tdef rtn_abort(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"::\n\t        void abort(void);\n\t    Mark the input seed as OK and stop execution.\n\t    [`Man Page <https://man7.org/linux/man-pages/man3/abort.3.html>`_]\n\t    \"\"\"\n\t    logger.debug('abort hooked')\n\t    se.seed.status = SeedStatus.OK_DONE\n\t    pstate.stop = True\n\t# int atoi(const char *nptr);\n\tdef rtn_atoi(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"::\n\t        int atoi(const char *nptr);\n\t    **Description**: The atoi() function converts the initial portion of the string\n\t    pointed to by nptr to int.  The behavior is the same as\n\t    Concrete: /\n\t    Symbolic: Represent the return value symbolically with 10 nested if\n\t    to represent the value.\n\t    .. warning:: The function does not support all possibles representation\n\t                 of an integer. It does not support negative integer nor values\n\t                 prefixed by spaces.\n", "    [`Man Page <https://man7.org/linux/man-pages/man3/abort.3.html>`_]\n\t    :return: Symbolic value of the integer base on the symbolic string ``nptr``\n\t    \"\"\"\n\t    logger.debug('atoi hooked')\n\t    ast = pstate.actx\n\t    arg = pstate.get_argument_value(0)\n\t    # FIXME: On ne concretize pas correctement la taille de la chaine\n\t    cells = {i: pstate.read_symbolic_memory_byte(arg+i).getAst() for i in range(10)}\n\t    # FIXME: Does not support negative value and all other corner cases.\n\t    # \"000000000012372183762173\"\n", "    # \"         98273483274\"\n\t    # \"-123123\"\n\t    # \"18273213\"\n\t    def multiply(ast, cells, index):\n\t        n = ast.bv(0, 32)\n\t        for i in range(index):\n\t            n = n * 10 + (ast.zx(24, cells[i]) - 0x30)\n\t        return n\n\t    res = ast.ite(\n\t              ast.lnot(ast.land([cells[0] >= 0x30, cells[0] <= 0x39])),\n", "              multiply(ast, cells, 0),\n\t              ast.ite(\n\t                  ast.lnot(ast.land([cells[1] >= 0x30, cells[1] <= 0x39])),\n\t                  multiply(ast, cells, 1),\n\t                  ast.ite(\n\t                      ast.lnot(ast.land([cells[2] >= 0x30, cells[2] <= 0x39])),\n\t                      multiply(ast, cells, 2),\n\t                      ast.ite(\n\t                          ast.lnot(ast.land([cells[3] >= 0x30, cells[3] <= 0x39])),\n\t                          multiply(ast, cells, 3),\n", "                          ast.ite(\n\t                              ast.lnot(ast.land([cells[4] >= 0x30, cells[4] <= 0x39])),\n\t                              multiply(ast, cells, 4),\n\t                              ast.ite(\n\t                                  ast.lnot(ast.land([cells[5] >= 0x30, cells[5] <= 0x39])),\n\t                                  multiply(ast, cells, 5),\n\t                                  ast.ite(\n\t                                      ast.lnot(ast.land([cells[6] >= 0x30, cells[6] <= 0x39])),\n\t                                      multiply(ast, cells, 6),\n\t                                      ast.ite(\n", "                                          ast.lnot(ast.land([cells[7] >= 0x30, cells[7] <= 0x39])),\n\t                                          multiply(ast, cells, 7),\n\t                                          ast.ite(\n\t                                              ast.lnot(ast.land([cells[8] >= 0x30, cells[8] <= 0x39])),\n\t                                              multiply(ast, cells, 8),\n\t                                              ast.ite(\n\t                                                  ast.lnot(ast.land([cells[9] >= 0x30, cells[9] <= 0x39])),\n\t                                                  multiply(ast, cells, 9),\n\t                                                  multiply(ast, cells, 9)\n\t                                              )\n", "                                          )\n\t                                      )\n\t                                  )\n\t                              )\n\t                          )\n\t                      )\n\t                  )\n\t              )\n\t          )\n\t    res = ast.sx(32, res)\n", "    return res\n\t# void *calloc(size_t nmemb, size_t size);\n\tdef rtn_calloc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The calloc behavior.\n\t    \"\"\"\n\t    logger.debug('calloc hooked')\n\t    # Get arguments\n\t    nmemb = pstate.get_argument_value(0)\n\t    size  = pstate.get_argument_value(1)\n", "    # We use nmemb and size as concret values\n\t    pstate.concretize_argument(0)  # will be concretized with nmemb value\n\t    pstate.concretize_argument(1)  # will be concretized with size value\n\t    if nmemb == 0 or size == 0:\n\t        ptr = NULL_PTR\n\t    else:\n\t        ptr = pstate.heap_allocator.alloc(nmemb * size)\n\t        # Once the ptr allocated, the memory area must be filled with zero\n\t        for index in range(nmemb * size):\n\t            pstate.write_symbolic_memory_byte(ptr+index, pstate.actx.bv(0, 8))\n", "    # Return value\n\t    return ptr\n\t# int clock_gettime(clockid_t clockid, struct timespec *tp);\n\tdef rtn_clock_gettime(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The clock_gettime behavior.\n\t    \"\"\"\n\t    logger.debug('clock_gettime hooked')\n\t    # Get arguments\n\t    clockid = pstate.get_argument_value(0)\n", "    tp      = pstate.get_argument_value(1)\n\t    # We use tp as concret value\n\t    pstate.concretize_argument(1)\n\t    # FIXME: We can return something logic\n\t    if tp == 0:\n\t        return pstate.minus_one\n\t    if pstate.time_inc_coefficient:\n\t        t = pstate.time\n\t    else:\n\t        t = time.time()\n", "    pstate.memory.write_ptr(tp, int(t))\n\t    pstate.memory.write_ptr(tp+pstate.ptr_size, int(t * 1000000))\n\t    # Return value\n\t    return 0\n\tdef rtn_exit(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The exit behavior.\n\t    \"\"\"\n\t    logger.debug('exit hooked')\n\t    arg = pstate.get_argument_value(0)\n", "    pstate.stop = True\n\t    return arg\n\tdef rtn_fclose(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The fclose behavior.\n\t    \"\"\"\n\t    logger.debug('fclose hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0) # fd\n\t    # We use fd as concret value\n", "    pstate.concretize_argument(0)\n\t    if pstate.file_descriptor_exists(arg0):\n\t        pstate.close_file_descriptor(arg0)\n\t    else:\n\t        return pstate.minus_one\n\t    # Return value\n\t    return 0\n\tdef rtn_fseek(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The fseek behavior.\n", "    \"\"\"\n\t    #define SEEK_SET    0   /* set file offset to offset */\n\t    #define SEEK_CUR    1   /* set file offset to current plus offset */\n\t    #define SEEK_END    2   /* set file offset to EOF plus offset */\n\t    logger.debug('fseek hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    arg1 = pstate.get_argument_value(1)\n\t    arg2 = pstate.get_argument_value(2)\n\t    if arg2 not in [0, 1, 2]:\n", "        return pstate.minus_one\n\t        # TODO: set errno to: -22 # EINVAL\n\t    if pstate.file_descriptor_exists(arg0):\n\t        desc = pstate.get_file_descriptor(arg0)\n\t        if desc.fd.seekable():\n\t            r = desc.fd.seek(arg1, arg2)\n\t            return r\n\t        else:\n\t            return -1\n\t            # TODO: set errno to: 29 # ESPIPE\n", "    else:\n\t        return -1\n\tdef rtn_ftell(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The ftell behavior.\n\t    \"\"\"\n\t    logger.debug('ftell hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    if pstate.file_descriptor_exists(arg0):\n", "        desc = pstate.get_file_descriptor(arg0)\n\t        if desc.fd.seekable():\n\t            return desc.fd.tell()\n\t        else:\n\t            return -1\n\t            # TODO: set errno -22 EINVAL\n\t# char *fgets(char *s, int size, FILE *stream);\n\tdef rtn_fgets(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The fgets behavior.\n", "    \"\"\"\n\t    logger.debug('fgets hooked')\n\t    # Get arguments\n\t    buff, buff_ast = pstate.get_full_argument(0)\n\t    size, size_ast = pstate.get_full_argument(1)\n\t    fd = pstate.get_argument_value(2)\n\t    # We use fd as concret value\n\t    pstate.concretize_argument(2)\n\t    if pstate.file_descriptor_exists(fd):\n\t        filedesc = pstate.get_file_descriptor(fd)\n", "        offset = filedesc.offset\n\t        data = filedesc.fgets(size)\n\t        data_no_trail = data[:-1]  # not \\x00 terminated\n\t        if filedesc.is_input_fd(): # Reading into input\n\t            # if we started from empty seed simulate reading `size` amount of data\n\t            if se.seed.is_raw() and se.seed.is_bootstrap_seed() and not data_no_trail:\n\t                data = b'\\x00' * size\n\t            if len(data_no_trail) == size:  # if `size` limited the fgets its an indirect constraint\n\t                pstate.push_constraint(size_ast.getAst() == size)\n\t            se.inject_symbolic_file_memory(buff, filedesc.name, data, offset)\n", "            logger.debug(f\"fgets() in {filedesc.name} = {repr(data)}\")\n\t        else:\n\t            pstate.concretize_argument(1)\n\t            pstate.memory.write(buff, data)\n\t        return buff_ast if data_no_trail else NULL_PTR\n\t    else:\n\t        logger.warning(f'File descriptor ({fd}) not found')\n\t        return NULL_PTR\n\t# fopen(const char *pathname, const char *mode);\n\tdef rtn_fopen(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The fopen behavior.\n\t    \"\"\"\n\t    logger.debug('fopen hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # const char *pathname\n\t    arg1 = pstate.get_argument_value(1)  # const char *mode\n\t    arg0s = pstate.memory.read_string(arg0)\n\t    arg1s = pstate.memory.read_string(arg1)\n\t    # Concretize the whole path name\n", "    pstate.concretize_memory_bytes(arg0, len(arg0s)+1)  # Concretize the whole string + \\0\n\t    # We use mode as concrete value\n\t    pstate.concretize_argument(1)\n\t    if se.seed.is_file_defined(arg0s):\n\t        logger.info(f\"opening an input file: {arg0s}\")\n\t        # Program is opening an input\n\t        data = se.seed.get_file_input(arg0s)\n\t        filedesc = pstate.create_file_descriptor(arg0s, io.BytesIO(data))\n\t        return filedesc.id\n\t    else:\n", "        # Try to open it as a regular file\n\t        try:\n\t            fd = open(arg0s, arg1s)\n\t            filedesc = pstate.create_file_descriptor(arg0s, fd)\n\t            return filedesc.id\n\t        except Exception as e:\n\t            logger.debug(f\"Failed to open {arg0s} {e}\")\n\t            return NULL_PTR\n\tdef rtn_fprintf(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The fprintf behavior.\n\t    \"\"\"\n\t    logger.debug('fprintf hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    arg1 = pstate.get_argument_value(1)\n\t    # FIXME: ARM64\n\t    # FIXME: pushPathConstraint\n\t    arg1f = pstate.get_format_string(arg1)\n\t    nbArgs = arg1f.count(\"{\")\n", "    args = pstate.get_format_arguments(arg1, [pstate.get_argument_value(x) for x in range(2, nbArgs+2)])\n\t    try:\n\t        s = arg1f.format(*args)\n\t    except:\n\t        # FIXME: Les chars UTF8 peuvent foutre le bordel. Voir avec ground-truth/07.input\n\t        logger.warning('Something wrong, probably UTF-8 string')\n\t        s = \"\"\n\t    if pstate.file_descriptor_exists(arg0):\n\t        fdesc = pstate.get_file_descriptor(arg0)\n\t        if arg0 not in [1, 2] or (arg0 == 1 and se.config.pipe_stdout) or (arg0 == 2 and se.config.pipe_stderr):\n", "            fdesc.fd.write(s)\n\t            fdesc.fd.flush()\n\t    else:\n\t        return 0\n\t    # Return value\n\t    return len(s)\n\tdef rtn___fprintf_chk(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __fprintf_chk behavior.\n\t    \"\"\"\n", "    logger.debug('__fprintf_chk hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    flag = pstate.get_argument_value(1)\n\t    arg1 = pstate.get_argument_value(2)\n\t    # FIXME: ARM64\n\t    # FIXME: pushPathConstraint\n\t    arg1f = pstate.get_format_string(arg1)\n\t    nbArgs = arg1f.count(\"{\")\n\t    args = pstate.get_format_arguments(arg1, [pstate.get_argument_value(x) for x in range(3, nbArgs+2)])\n", "    try:\n\t        s = arg1f.format(*args)\n\t    except:\n\t        # FIXME: Les chars UTF8 peuvent foutre le bordel. Voir avec ground-truth/07.input\n\t        logger.warning('Something wrong, probably UTF-8 string')\n\t        s = \"\"\n\t    if pstate.file_descriptor_exists(arg0):\n\t        fdesc = pstate.get_file_descriptor(arg0)\n\t        if arg0 not in [1, 2] or (arg0 == 1 and se.config.pipe_stdout) or (arg0 == 2 and se.config.pipe_stderr):\n\t            fdesc.fd.write(s)\n", "            fdesc.fd.flush()\n\t    else:\n\t        return 0\n\t    # Return value\n\t    return len(s)\n\t# fputc(int c, FILE *stream);\n\tdef rtn_fputc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The fputc behavior.\n\t    \"\"\"\n", "    logger.debug('fputc hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    arg1 = pstate.get_argument_value(1)\n\t    pstate.concretize_argument(0)\n\t    pstate.concretize_argument(1)\n\t    if pstate.file_descriptor_exists(arg1):\n\t        fdesc = pstate.get_file_descriptor(arg1)\n\t        if arg1 == 0:\n\t            return 0\n", "        elif (arg1 == 1 and se.config.pipe_stdout) or (arg1 == 2 and se.config.pipe_stderr):\n\t            fdesc.fd.write(chr(arg0))\n\t            fdesc.fd.flush()\n\t        elif arg1 not in [0, 2]:\n\t            fdesc.fd.write(chr(arg0))\n\t        return 1\n\t    else:\n\t        return 0\n\tdef rtn_fputs(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The fputs behavior.\n\t    \"\"\"\n\t    logger.debug('fputs hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    arg1 = pstate.get_argument_value(1)\n\t    pstate.concretize_argument(0)\n\t    pstate.concretize_argument(1)\n\t    s = pstate.memory.read_string(arg0)\n\t    # FIXME: What if the fd is coming from the memory (fmemopen) ?\n", "    if pstate.file_descriptor_exists(arg1):\n\t        fdesc = pstate.get_file_descriptor(arg1)\n\t        if arg1 == 0:\n\t            return 0\n\t        elif arg1 == 1:\n\t            if se.config.pipe_stdout:\n\t                fdesc.fd.write(s)\n\t                fdesc.fd.flush()\n\t        elif arg1 == 2:\n\t            if se.config.pipe_stderr:\n", "                fdesc.fd.write(s)\n\t                fdesc.fd.flush()\n\t        else:\n\t            fdesc.fd.write(s)\n\t    else:\n\t        return 0\n\t    # Return value\n\t    return len(s)\n\tdef rtn_fread(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The fread behavior.\n\t    \"\"\"\n\t    logger.debug('fread hooked')\n\t    # Get arguments\n\t    ptr = pstate.get_argument_value(0) # ptr\n\t    size_t, size_ast = pstate.get_full_argument(1) # size\n\t    nmemb = pstate.get_argument_value(2) # nmemb\n\t    fd = pstate.get_argument_value(3) # stream\n\t    size = size_t * nmemb\n\t    # FIXME: pushPathConstraint\n", "    if pstate.file_descriptor_exists(fd):\n\t        filedesc = pstate.get_file_descriptor(fd)\n\t        offset = filedesc.offset\n\t        data = filedesc.read(size)\n\t        if filedesc.is_input_fd(): # Reading into input\n\t            # if we started from empty seed simulate reading `size` amount of data\n\t            if se.seed.is_raw() and se.seed.is_bootstrap_seed() and not data:\n\t                data = b'\\x00' * size\n\t            if len(data) == size:  # if `size` limited the fgets its an indirect constraint\n\t                pstate.push_constraint(size_ast.getAst() == size)\n", "            se.inject_symbolic_file_memory(ptr, filedesc.name, data, offset)\n\t            logger.debug(f\"read in {filedesc.name} = {repr(data)}\")\n\t        else:\n\t            pstate.concretize_argument(2)\n\t            pstate.memory.write(ptr, data)\n\t        return int(len(data)/size_t) if size_t else 0  # number of items read\n\t    else:\n\t        logger.warning(f'File descriptor ({fd}) not found')\n\t        return 0\n\tdef rtn_free(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The free behavior.\n\t    \"\"\"\n\t    logger.debug('free hooked')\n\t    # Get arguments\n\t    ptr = pstate.get_argument_value(0)\n\t    if ptr == 0: # free(NULL) is a nop\n\t        return None\n\t    pstate.heap_allocator.free(ptr)\n\t    return None\n", "def rtn_fwrite(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The fwrite behavior.\n\t    \"\"\"\n\t    logger.debug('fwrite hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    arg1 = pstate.get_argument_value(1)\n\t    arg2 = pstate.get_argument_value(2)\n\t    arg3 = pstate.get_argument_value(3)\n", "    size = arg1 * arg2\n\t    data = pstate.memory.read(arg0, size)\n\t    if pstate.file_descriptor_exists(arg3):\n\t        fdesc = pstate.get_file_descriptor(arg3)\n\t        if arg3 == 0:\n\t            return 0\n\t        elif arg3 == 1:\n\t            if se.config.pipe_stdout:\n\t                fdesc.fd.buffer.write(data)\n\t                fdesc.fd.flush()\n", "        elif arg3 == 2:\n\t            if se.config.pipe_stderr:\n\t                fdesc.fd.buffer.write(data)\n\t                fdesc.fd.flush()\n\t        else:\n\t            fdesc.fd.write(data)\n\t    else:\n\t        return 0\n\t    # Return value\n\t    return size\n", "def rtn_write(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The write behavior.\n\t    \"\"\"\n\t    logger.debug('write hooked')\n\t    # Get arguments\n\t    fd = pstate.get_argument_value(0)\n\t    buf = pstate.get_argument_value(1)\n\t    size = pstate.get_argument_value(2)\n\t    data = pstate.memory.read(buf, size)\n", "    if pstate.file_descriptor_exists(fd):\n\t        fdesc = pstate.get_file_descriptor(fd)\n\t        if fd == 0:\n\t            return 0\n\t        elif fd == 1:\n\t            if se.config.pipe_stdout:\n\t                fdesc.fd.buffer.write(data)\n\t                fdesc.fd.flush()\n\t        elif fd == 2:\n\t            if se.config.pipe_stderr:\n", "                fdesc.fd.buffer.write(data)\n\t                fdesc.fd.flush()\n\t        else:\n\t            fdesc.fd.write(data)\n\t    else:\n\t        return 0\n\t    # Return value\n\t    return size\n\tdef rtn_gettimeofday(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The gettimeofday behavior.\n\t    \"\"\"\n\t    logger.debug('gettimeofday hooked')\n\t    # Get arguments\n\t    tv = pstate.get_argument_value(0)\n\t    tz = pstate.get_argument_value(1)\n\t    if tv == 0:\n\t        return pstate.minus_one\n\t    if pstate.time_inc_coefficient:\n\t        t = pstate.time\n", "    else:\n\t        t = time.time()\n\t    s = pstate.ptr_size\n\t    pstate.memory.write_ptr(tv, int(t))\n\t    pstate.memory.write_ptr(tv+pstate.ptr_size, int(t * 1000000))\n\t    # Return value\n\t    return 0\n\tdef rtn_malloc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The malloc behavior.\n", "    \"\"\"\n\t    logger.debug('malloc hooked')\n\t    # Get arguments\n\t    size = pstate.get_argument_value(0)\n\t    ptr = pstate.heap_allocator.alloc(size)\n\t    # Return value\n\t    return ptr\n\tdef rtn_open(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The open behavior.\n", "    \"\"\"\n\t    logger.debug('open hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # const char *pathname\n\t    flags = pstate.get_argument_value(1)  # int flags\n\t    mode = pstate.get_argument_value(2)  # we ignore it\n\t    arg0s = pstate.memory.read_string(arg0)\n\t    # Concretize the whole path name\n\t    pstate.concretize_memory_bytes(arg0, len(arg0s)+1)  # Concretize the whole string + \\0\n\t    # We use flags as concrete value\n", "    pstate.concretize_argument(1)\n\t    # Use the flags to open the file in the write mode.\n\t    mode = \"\"\n\t    if (flags & 0xFF) == 0x00:   # O_RDONLY\n\t        mode = \"r\"\n\t    elif (flags & 0xFF) == 0x01: # O_WRONLY\n\t        mode = \"w\"\n\t    elif (flags & 0xFF) == 0x02: # O_RDWR\n\t        mode = \"r+\"\n\t    if flags & 0x0100: # O_CREAT\n", "        mode += \"x\"\n\t    if flags & 0x0200: # O_APPEND\n\t        mode = \"a\"  # replace completely value\n\t    # enforce using binary mode for open\n\t    mode += \"b\"\n\t    if se.seed.is_file_defined(arg0s) and \"r\" in mode:  # input file and opened in reading\n\t        logger.info(f\"opening an input file: {arg0s}\")\n\t        # Program is opening an input\n\t        data = se.seed.get_file_input(arg0s)\n\t        filedesc = pstate.create_file_descriptor(arg0s, io.BytesIO(data))\n", "        return filedesc.id\n\t    else:\n\t        # Try to open it as a regular file\n\t        try:\n\t            fd = open(arg0s, mode)  # use the mode here\n\t            filedesc = pstate.create_file_descriptor(arg0s, fd)\n\t            return filedesc.id\n\t        except Exception as e:\n\t            logger.debug(f\"Failed to open {arg0s} {e}\")\n\t            return pstate.minus_one\n", "def rtn_realloc(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The realloc behavior.\n\t    \"\"\"\n\t    logger.debug('realloc hooked')\n\t    # Get arguments\n\t    oldptr = pstate.get_argument_value(0)\n\t    size = pstate.get_argument_value(1)\n\t    if oldptr == 0:\n\t        # malloc behaviour\n", "        ptr = pstate.heap_allocator.alloc(size)\n\t        return ptr\n\t    ptr = pstate.heap_allocator.alloc(size)\n\t    if ptr == 0: return ptr\n\t    if ptr not in pstate.heap_allocator.alloc_pool:\n\t        logger.warning(\"Invalid ptr passed to realloc\")\n\t        pstate.heap_allocator.free(ptr) # This will raise an error\n\t    old_memmap = pstate.heap_allocator.alloc_pool[oldptr]\n\t    old_size = old_memmap.size\n\t    size_to_copy = min(size, old_size)\n", "    #data = pstate.memory.read(oldptr, size_to_copy)\n\t    #pstate.memory.write(ptr, data)\n\t    # Copy bytes symbolically\n\t    for index in range(size_to_copy):\n\t        sym_c = pstate.read_symbolic_memory_byte(oldptr+index)\n\t        pstate.write_symbolic_memory_byte(ptr+index, sym_c)\n\t    pstate.heap_allocator.free(oldptr)\n\t    return ptr\n\tdef rtn_memcmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The memcmp behavior.\n\t    \"\"\"\n\t    logger.debug('memcmp hooked')\n\t    s1 = pstate.get_argument_value(0)\n\t    s2 = pstate.get_argument_value(1)\n\t    size = pstate.get_argument_value(2)\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    res = ast.bv(0, ptr_bit_size)\n\t    # We constrain the logical value of size\n", "    pstate.concretize_argument(2)\n\t    for index in range(size):\n\t        cells1 = pstate.read_symbolic_memory_byte(s1+index).getAst()\n\t        cells2 = pstate.read_symbolic_memory_byte(s2+index).getAst()\n\t        res = res + ast.ite(\n\t                        cells1 == cells2,\n\t                        ast.bv(0, ptr_bit_size),\n\t                        ast.bv(1, ptr_bit_size)\n\t                    )\n\t    return res\n", "def rtn_memcpy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The memcpy behavior.\n\t    \"\"\"\n\t    logger.debug('memcpy hooked')\n\t    dst, dst_ast = pstate.get_full_argument(0)\n\t    src = pstate.get_argument_value(1)\n\t    cnt = pstate.get_argument_value(2)\n\t    # We constrain the logical value of size\n\t    pstate.concretize_argument(2)\n", "    for index in range(cnt):\n\t        # Read symbolic src value and copy symbolically in dst\n\t        sym_src = pstate.read_symbolic_memory_byte(src+index)\n\t        pstate.write_symbolic_memory_byte(dst+index, sym_src)\n\t    return dst_ast\n\tdef rtn_mempcpy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The mempcpy behavior.\n\t    \"\"\"\n\t    logger.debug('mempcpy hooked')\n", "    dst, dst_ast = pstate.get_full_argument(0)\n\t    src = pstate.get_argument_value(1)\n\t    cnt = pstate.get_argument_value(2)\n\t    # We constrain the logical value of size\n\t    pstate.concretize_argument(2)\n\t    for index in range(cnt):\n\t        # Read symbolic src value and copy symbolically in dst\n\t        sym_src = pstate.read_symbolic_memory_byte(src+index)\n\t        pstate.write_symbolic_memory_byte(dst+index, sym_src)\n\t    return dst + cnt\n", "def rtn_memmem(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The memmem behavior.\n\t    \"\"\"\n\t    logger.debug('memmem hooked')\n\t    haystack    = pstate.get_argument_value(0)  # const void*\n\t    haystacklen = pstate.get_argument_value(1)  # size_t\n\t    needle      = pstate.get_argument_value(2)  # const void *\n\t    needlelen   = pstate.get_argument_value(3)  # size_t\n\t    s1 = pstate.memory.read(haystack, haystacklen)  # haystack\n", "    s2 = pstate.memory.read(needle, needlelen)      # needle\n\t    offset = s1.find(s2)\n\t    if offset == -1:\n\t        #FIXME: faut s'assurer que le marquer dans le string\n\t        return NULL_PTR\n\t    for i, c in enumerate(s2):\n\t        c1 = pstate.read_symbolic_memory_byte(haystack+offset+i)\n\t        c2 = pstate.read_symbolic_memory_byte(needle+i)\n\t        pstate.push_constraint(c1.getAst() == c2.getAst())\n\t    # FIXME: à reflechir si on doit contraindre offset ou pas\n", "    # faut s'assurer que le marquer est bien présent à l'offset trouvé\n\t    return haystack + offset\n\tdef rtn_memmove(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The memmove behavior.\n\t    \"\"\"\n\t    logger.debug('memmove hooked')\n\t    dst, dst_ast = pstate.get_full_argument(0)\n\t    src = pstate.get_argument_value(1)\n\t    cnt = pstate.get_argument_value(2)\n", "    # We constrain the logical value of cnt\n\t    pstate.concretize_argument(2)\n\t    # TODO: What if cnt is symbolic ?\n\t    for index in range(cnt):\n\t        # Read symbolic src value and copy symbolically in dst\n\t        sym_src = pstate.read_symbolic_memory_byte(src+index)\n\t        pstate.write_symbolic_memory_byte(dst+index, sym_src)\n\t    return dst_ast\n\tdef rtn_memset(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The memset behavior.\n\t    \"\"\"\n\t    logger.debug('memset hooked')\n\t    dst, dst_ast = pstate.get_full_argument(0)\n\t    src, src_ast = pstate.get_full_argument(1)\n\t    size = pstate.get_argument_value(2)\n\t    # We constrain the logical value of size\n\t    pstate.concretize_argument(2)\n\t    sym_cell = pstate.actx.extract(7, 0, src_ast.getAst())\n\t    # TODO: What if size is symbolic ?\n", "    for index in range(size):\n\t        pstate.write_symbolic_memory_byte(dst+index, sym_cell)\n\t    return dst_ast\n\tdef rtn_printf(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The printf behavior.\n\t    \"\"\"\n\t    logger.debug('printf hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n", "    arg0f = pstate.get_format_string(arg0)\n\t    nbArgs = arg0f.count(\"{\")\n\t    args = pstate.get_format_arguments(arg0, [pstate.get_argument_value(x) for x in range(1, nbArgs+1)])\n\t    try:\n\t        s = arg0f.format(*args)\n\t    except:\n\t        # FIXME: Les chars UTF8 peuvent foutre le bordel. Voir avec ground-truth/07.input\n\t        logger.warning('Something wrong, probably UTF-8 string')\n\t        s = \"\"\n\t    if se.config.pipe_stdout:\n", "        stdout = pstate.get_file_descriptor(1)\n\t        stdout.fd.write(s)\n\t        stdout.fd.flush()\n\t    # Return value\n\t    return len(s)\n\tdef rtn_pthread_create(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The pthread_create behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_create hooked')\n", "    # Get arguments\n\t    arg0 = pstate.get_argument_value(0) # pthread_t *thread\n\t    arg1 = pstate.get_argument_value(1) # const pthread_attr_t *attr\n\t    arg2 = pstate.get_argument_value(2) # void *(*start_routine) (void *)\n\t    arg3 = pstate.get_argument_value(3) # void *arg\n\t    th = pstate.spawn_new_thread(arg2, arg3)\n\t    # Save out the thread id\n\t    pstate.memory.write_ptr(arg0, th.tid)\n\t    # Return value\n\t    return 0\n", "def rtn_pthread_exit(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The pthread_exit behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_exit hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n\t    # Kill the thread\n\t    pstate.current_thread.kill()\n\t    # FIXME: I guess the thread exiting never return, so should not continue\n", "    # FIXME: iterating instructions\n\t    # Return value\n\t    return None\n\tdef rtn_pthread_join(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The pthread_join behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_join hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)\n", "    arg1 = pstate.get_argument_value(1)\n\t    if arg0 in pstate.threads:\n\t        pstate.current_thread.join_thread(arg0)\n\t        logger.info(f\"Thread id {pstate.current_thread.tid} joined thread id {arg0}\")\n\t    else:\n\t        pstate.current_thread.cancel_join()\n\t        logger.debug(f\"Thread id {arg0} already destroyed\")\n\t    # Return value\n\t    return 0\n\tdef rtn_pthread_mutex_destroy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The pthread_mutex_destroy behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_mutex_destroy hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # pthread_mutex_t *restrict mutex\n\t    pstate.memory.write_ptr(arg0, pstate.PTHREAD_MUTEX_INIT_MAGIC)\n\t    return 0\n\tdef rtn_pthread_mutex_init(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The pthread_mutex_init behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_mutex_init hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # pthread_mutex_t *restrict mutex\n\t    arg1 = pstate.get_argument_value(1)  # const pthread_mutexattr_t *restrict attr)\n\t    pstate.memory.write_ptr(arg0, pstate.PTHREAD_MUTEX_INIT_MAGIC)\n\t    return 0\n\tdef rtn_pthread_mutex_lock(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The pthread_mutex_lock behavior.\n\t    \"\"\"\n\t    logger.debug('pthread_mutex_lock hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # pthread_mutex_t *mutex\n\t    mutex = pstate.memory.read_ptr(arg0)  # deref pointer and read a uint64 int\n\t    # If the thread has been initialized and unused, define the tid has lock\n\t    if mutex == pstate.PTHREAD_MUTEX_INIT_MAGIC:\n\t        logger.debug('mutex unlocked')\n\t        pstate.memory.write_ptr(arg0, pstate.current_thread.tid)\n", "    # The mutex is locked and we are not allowed to continue the execution\n\t    elif mutex != pstate.current_thread.tid:\n\t        logger.debug('mutex locked')\n\t        pstate.mutex_locked = True\n\t    # Return value\n\t    return 0\n\tdef rtn_pthread_mutex_unlock(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The pthread_mutex_unlock behavior.\n\t    \"\"\"\n", "    logger.debug('pthread_mutex_unlock hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # pthread_mutex_t *mutex\n\t    pstate.memory.write_ptr(arg0, pstate.PTHREAD_MUTEX_INIT_MAGIC)\n\t    # Return value\n\t    return 0\n\tdef rtn_puts(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The puts behavior.\n\t    \"\"\"\n", "    logger.debug('puts hooked')\n\t    arg0 = pstate.get_string_argument(0)\n\t    # Get arguments\n\t    if se.config.pipe_stdout:  # Only perform printing if pipe_stdout activated\n\t        sys.stdout.write(arg0 + '\\n')\n\t        sys.stdout.flush()\n\t    # Return value\n\t    return len(arg0) + 1\n\tdef rtn_rand(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The rand behavior.\n\t    \"\"\"\n\t    logger.debug('rand hooked')\n\t    return random.randrange(0, 0xffffffff)\n\tdef rtn_read(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The read behavior.\n\t    \"\"\"\n\t    logger.debug('read hooked')\n\t    # Get arguments\n", "    fd   = pstate.get_argument_value(0)\n\t    buff = pstate.get_argument_value(1)\n\t    size, size_ast = pstate.get_full_argument(2)\n\t    if size_ast.isSymbolized():\n\t        logger.warning(f'Reading from the file descriptor ({fd}) with a symbolic size')\n\t    pstate.concretize_argument(0)\n\t    if pstate.file_descriptor_exists(fd):\n\t        filedesc = pstate.get_file_descriptor(fd)\n\t        offset = filedesc.offset\n\t        data = filedesc.read(size)\n", "        if filedesc.is_input_fd(): # Reading into input\n\t            # if we started from empty seed simulate reading `size` amount of data\n\t            if se.seed.is_raw() and se.seed.is_bootstrap_seed() and not data:\n\t                data = b'\\x00' * size\n\t            if len(data) == size:  # if `size` limited the fgets its an indirect constraint\n\t                pstate.push_constraint(size_ast.getAst() == size)\n\t            se.inject_symbolic_file_memory(buff, filedesc.name, data, offset)\n\t            logger.debug(f\"read in (input) {filedesc.name} = {repr(data)}\")\n\t        else:\n\t            pstate.concretize_argument(2)\n", "            pstate.memory.write(buff, data)\n\t        return len(data)\n\t    else:\n\t        logger.warning(f'File descriptor ({fd}) not found')\n\t        return pstate.minus_one  # todo: set errno\n\tdef rtn_getchar(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The getchar behavior.\n\t    \"\"\"\n\t    logger.debug('getchar hooked')\n", "    # Get arguments\n\t    filedesc = pstate.get_file_descriptor(0) # stdin\n\t    offset = filedesc.offset\n\t    data = filedesc.read(1)\n\t    if data:\n\t        if filedesc.is_input_fd():  # Reading into input\n\t            data = ord(data) # convert to integer\n\t            se.inject_symbolic_file_register(pstate.return_register, filedesc.name, data, offset)\n\t            logger.debug(f\"read in {filedesc.name} = {repr(data)}\")\n\t        return data\n", "    else:\n\t        return pstate.minus_one\n\tdef rtn_sem_destroy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_destroy behavior.\n\t    \"\"\"\n\t    logger.debug('sem_destroy hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n\t    # Destroy the semaphore with the value\n", "    pstate.memory.write_ptr(arg0, 0)\n\t    # Return success\n\t    return 0\n\tdef rtn_sem_getvalue(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_getvalue behavior.\n\t    \"\"\"\n\t    logger.debug('sem_getvalue hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n", "    arg1 = pstate.get_argument_value(1)  # int *sval\n\t    value = pstate.memory.read_ptr(arg0)  # deref pointer\n\t    # Set the semaphore's value into the output\n\t    pstate.memory.write_dword(arg1, value)  # WARNING: read uint64 to uint32\n\t    # Return success\n\t    return 0\n\tdef rtn_sem_init(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_init behavior.\n\t    \"\"\"\n", "    logger.debug('sem_init hooked')\n\t    # Get arguments\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n\t    arg1 = pstate.get_argument_value(1)  # int pshared\n\t    arg2 = pstate.get_argument_value(2)  # unsigned int value\n\t    # Init the semaphore with the value\n\t    pstate.memory.write_ptr(arg0, arg2)\n\t    # Return success\n\t    return 0\n\tdef rtn_sem_post(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The sem_post behavior.\n\t    \"\"\"\n\t    logger.debug('sem_post hooked')\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n\t    # increments (unlocks) the semaphore pointed to by sem\n\t    value = pstate.memory.read_ptr(arg0)\n\t    pstate.memory.write_ptr(arg0, value + 1)\n\t    # Return success\n\t    return 0\n", "def rtn_sem_timedwait(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_timedwait behavior.\n\t    \"\"\"\n\t    logger.debug('sem_timedwait hooked')\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n\t    arg1 = pstate.get_argument_value(1)  # const struct timespec *abs_timeout\n\t    # sem_timedwait() is the same as sem_wait(), except that abs_timeout specifies a limit\n\t    # on the amount of time that the call should block if the decrement cannot be immediately\n\t    # performed. The abs_timeout argument points to a structure that specifies an absolute\n", "    # timeout in seconds and nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC).\n\t    # This structure is defined as follows:\n\t    #\n\t    #     struct timespec {\n\t    #         time_t tv_sec;      /* Seconds */\n\t    #         long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */\n\t    #     };\n\t    #\n\t    # If the timeout has already expired by the time of the call, and the semaphore could not be\n\t    # locked immediately, then sem_timedwait() fails with a timeout error (errno set to ETIMEDOUT).\n", "    #\n\t    # If  the operation can be performed immediately, then sem_timedwait() never fails with a\n\t    # timeout error, regardless of the value of abs_timeout.  Furthermore, the validity of\n\t    # abs_timeout is not checked in this case.\n\t    # TODO: Take into account the abs_timeout argument\n\t    value = pstate.memory.read_ptr(arg0)\n\t    if value > 0:\n\t        logger.debug('semaphore still not locked')\n\t        pstate.memory.write_ptr(arg0, value - 1)\n\t        pstate.semaphore_locked = False\n", "    else:\n\t        logger.debug('semaphore locked')\n\t        pstate.semaphore_locked = True\n\t    # Return success\n\t    return 0\n\tdef rtn_sem_trywait(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_trywait behavior.\n\t    \"\"\"\n\t    logger.debug('sem_trywait hooked')\n", "    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n\t    # sem_trywait()  is  the  same as sem_wait(), except that if the decrement\n\t    # cannot be immediately performed, then call returns an error (errno set to\n\t    # EAGAIN) instead of blocking.\n\t    value = pstate.memory.read_ptr(arg0)\n\t    if value > 0:\n\t        logger.debug('semaphore still not locked')\n\t        pstate.memory.write_ptr(arg0, value - 1)\n\t        pstate.semaphore_locked = False\n\t    else:\n", "        logger.debug('semaphore locked but continue')\n\t        pstate.semaphore_locked = False\n\t        # Setting errno to EAGAIN (3406)\n\t        segs = pstate.memory.find_map(pstate.EXTERN_SEG)\n\t        if segs:\n\t            map = segs[0]\n\t            ERRNO = map.start + map.size - 4  # Point is last int of the mapping\n\t            pstate.memory.write_dword(ERRNO, 3406)\n\t        else:\n\t            assert False\n", "        # Return -1\n\t        return pstate.minus_one\n\t    # Return success\n\t    return 0\n\tdef rtn_sem_wait(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sem_wait behavior.\n\t    \"\"\"\n\t    logger.debug('sem_wait hooked')\n\t    arg0 = pstate.get_argument_value(0)  # sem_t *sem\n", "    # decrements (locks) the semaphore pointed to by sem. If the semaphore's value\n\t    # is greater than zero, then the decrement proceeds, and the function returns,\n\t    # immediately. If the semaphore currently has the value zero, then the call blocks\n\t    # until either it becomes possible to perform the decrement (i.e., the semaphore\n\t    # value rises above zero).\n\t    value = pstate.memory.read_ptr(arg0)\n\t    if value > 0:\n\t        logger.debug('semaphore still not locked')\n\t        pstate.memory.write_ptr(arg0, value - 1)\n\t        pstate.semaphore_locked = False\n", "    else:\n\t        logger.debug('semaphore locked')\n\t        pstate.semaphore_locked = True\n\t    # Return success\n\t    return 0\n\tdef rtn_sleep(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sleep behavior.\n\t    \"\"\"\n\t    logger.debug('sleep hooked')\n", "    # Get arguments\n\t    if not se.config.skip_sleep_routine:\n\t        t = pstate.get_argument_value(0)\n\t        time.sleep(t)\n\t    # Return value\n\t    return 0\n\tdef rtn_sprintf(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The sprintf behavior.\n\t    \"\"\"\n", "    logger.debug('sprintf hooked')\n\t    # Get arguments\n\t    buff = pstate.get_argument_value(0)\n\t    arg0 = pstate.get_argument_value(1)\n\t    try:\n\t        arg0f = pstate.get_format_string(arg0)\n\t        nbArgs = arg0f.count(\"{\")\n\t        args = pstate.get_format_arguments(arg0, [pstate.get_argument_value(x) for x in range(2, nbArgs+2)])\n\t        s = arg0f.format(*args)\n\t    except:\n", "        # FIXME: Les chars UTF8 peuvent foutre le bordel. Voir avec ground-truth/07.input\n\t        logger.warning('Something wrong, probably UTF-8 string')\n\t        s = \"\"\n\t    # FIXME: todo\n\t    # FIXME: THIS SEEMS NOT OK\n\t    # for index, c in enumerate(s):\n\t    #     pstate.tt_ctx.concretizeMemory(buff + index)\n\t    #     pstate.tt_ctx.setConcreteMemoryValue(buff + index, ord(c))\n\t    #     pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(buff + index, 1)) == ord(c))\n\t    #\n", "    # # including the terminating null byte ('\\0')\n\t    # pstate.tt_ctx.setConcreteMemoryValue(buff + len(s), 0x00)\n\t    # pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(buff + len(s), 1)) == 0x00)\n\t    return len(s)\n\tdef rtn_strcasecmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strcasecmp behavior.\n\t    \"\"\"\n\t    logger.debug('strcasecmp hooked')\n\t    s1 = pstate.get_argument_value(0)\n", "    s2 = pstate.get_argument_value(1)\n\t    size = min(len(pstate.memory.read_string(s1)), len(pstate.memory.read_string(s2)) + 1)\n\t    #s = s1 if len(pstate.memory.read_string(s1)) < len(pstate.memory.read_string(s2)) else s2\n\t    #for i in range(size):\n\t    #    pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s1 + i, CPUSIZE.BYTE)) != 0x00)\n\t    #    pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s2 + i, CPUSIZE.BYTE)) != 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s + size, CPUSIZE.BYTE)) == 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s1 + len(pstate.memory.read_string(s1)), CPUSIZE.BYTE)) == 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s2 + len(pstate.memory.read_string(s2)), CPUSIZE.BYTE)) == 0x00)\n\t    # FIXME: Il y a des truc chelou avec le +1 et le logic ci-dessous\n", "    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    res = ast.bv(0, pstate.ptr_bit_size)\n\t    for index in range(size):\n\t        cells1 = pstate.read_symbolic_memory_byte(s1 + index).getAst()\n\t        cells2 = pstate.read_symbolic_memory_byte(s2 + index).getAst()\n\t        cells1 = ast.ite(ast.land([cells1 >= ord('a'), cells1 <= ord('z')]), cells1 - 32, cells1) # upper case\n\t        cells2 = ast.ite(ast.land([cells2 >= ord('a'), cells2 <= ord('z')]), cells2 - 32, cells2) # upper case\n\t        res = res + ast.ite(cells1 == cells2, ast.bv(0, ptr_bit_size), ast.bv(1, ptr_bit_size))\n\t    return res\n", "def rtn_strchr(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strchr behavior.\n\t    \"\"\"\n\t    logger.debug('strchr hooked')\n\t    string = pstate.get_argument_value(0)\n\t    char   = pstate.get_argument_value(1)\n\t    ast    = pstate.actx\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    def rec(res, deep, maxdeep):\n", "        if deep == maxdeep:\n\t            return res\n\t        cell = pstate.read_symbolic_memory_byte(string + deep).getAst()\n\t        res  = ast.ite(cell == (char & 0xff), ast.bv(string + deep, ptr_bit_size), rec(res, deep + 1, maxdeep))\n\t        return res\n\t    sze = len(pstate.memory.read_string(string))\n\t    res = rec(ast.bv(0, ptr_bit_size), 0, sze)\n\t    for i, c in enumerate(pstate.memory.read_string(string)):\n\t        pstate.push_constraint(pstate.read_symbolic_memory_byte(string+i).getAst() != 0x00)\n\t    pstate.push_constraint(pstate.read_symbolic_memory_byte(string+sze).getAst() == 0x00)\n", "    return res\n\tdef rtn_strcmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strcmp behavior.\n\t    \"\"\"\n\t    logger.debug('strcmp hooked')\n\t    s1 = pstate.get_argument_value(0)\n\t    s2 = pstate.get_argument_value(1)\n\t    size = min(len(pstate.memory.read_string(s1)), len(pstate.memory.read_string(s2))) + 1\n\t    #s = s1 if len(pstate.memory.read_string(s1)) <= len(pstate.memory.read_string(s2)) else s2\n", "    #for i in range(size):\n\t    #    pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s1 + i, CPUSIZE.BYTE)) != 0x00)\n\t    #    pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s2 + i, CPUSIZE.BYTE)) != 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s + size, CPUSIZE.BYTE)) == 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s1 + len(pstate.memory.read_string(s1)), CPUSIZE.BYTE)) == 0x00)\n\t    #pstate.tt_ctx.pushPathConstraint(pstate.tt_ctx.getMemoryAst(MemoryAccess(s2 + len(pstate.memory.read_string(s2)), CPUSIZE.BYTE)) == 0x00)\n\t    # FIXME: Il y a des truc chelou avec le +1 et le logic ci-dessous\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    res = ast.bv(0, ptr_bit_size)\n", "    for index in range(size):\n\t        cells1 = pstate.read_symbolic_memory_byte(s1 + index).getAst()\n\t        cells2 = pstate.read_symbolic_memory_byte(s2 + index).getAst()\n\t        res = res + ast.ite(cells1 == cells2, ast.bv(0, ptr_bit_size), ast.bv(1, ptr_bit_size))\n\t    return res\n\tdef rtn_strcpy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strcpy behavior.\n\t    \"\"\"\n\t    logger.debug('strcpy hooked')\n", "    dst  = pstate.get_argument_value(0)\n\t    src  = pstate.get_argument_value(1)\n\t    src_str = pstate.memory.read_string(src)\n\t    size = len(src_str)\n\t    # constraint src buff to be != \\00 and last one to be \\00 (indirectly concretize length)\n\t    for i, c in enumerate(src_str):\n\t        pstate.push_constraint(pstate.read_symbolic_memory_byte(src + i).getAst() != 0x00)\n\t    pstate.push_constraint(pstate.read_symbolic_memory_byte(src + size).getAst() == 0x00)\n\t    # Copy symbolically bytes (including \\00)\n\t    for index in range(size+1):\n", "        sym_c = pstate.read_symbolic_memory_byte(src+index)\n\t        pstate.write_symbolic_memory_byte(dst+index, sym_c)\n\t    return dst\n\tdef rtn_strdup(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strdup behavior.\n\t    \"\"\"\n\t    logger.debug('strdup hooked')\n\t    s  = pstate.get_argument_value(0)\n\t    s_str = pstate.memory.read_string(s)\n", "    size = len(s_str)\n\t    #print(f\"strdup s={s:#x} s_str={s_str} size={size}\")\n\t    # constrain src buff to be != \\00 and last one to be \\00 (indirectly concretize length)\n\t    for i, c in enumerate(s_str):\n\t        pstate.push_constraint(pstate.read_symbolic_memory_byte(s + i).getAst() != 0x00)\n\t    pstate.push_constraint(pstate.read_symbolic_memory_byte(s + size).getAst() == 0x00)\n\t    # Malloc a chunk\n\t    ptr = pstate.heap_allocator.alloc(size + 1)\n\t    # Copy symbolically bytes (including \\00)\n\t    for index in range(size+1):\n", "        sym_c = pstate.read_symbolic_memory_byte(s+index)\n\t        pstate.write_symbolic_memory_byte(ptr+index, sym_c)\n\t    return ptr\n\tdef rtn_strerror(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strerror behavior.\n\t    :param se: The current symbolic execution instance\n\t    :param pstate: The current process state\n\t    :return: a concrete value\n\t    \"\"\"\n", "    logger.debug('strerror hooked')\n\t    sys_errlist = [\n\t        b\"Success\",\n\t        b\"Operation not permitted\",\n\t        b\"No such file or directory\",\n\t        b\"No such process\",\n\t        b\"Interrupted system call\",\n\t        b\"Input/output error\",\n\t        b\"No such device or address\",\n\t        b\"Argument list too long\",\n", "        b\"Exec format error\",\n\t        b\"Bad file descriptor\",\n\t        b\"No child processes\",\n\t        b\"Resource temporarily unavailable\",\n\t        b\"Cannot allocate memory\",\n\t        b\"Permission denied\",\n\t        b\"Bad address\",\n\t        b\"Block device required\",\n\t        b\"Device or resource busy\",\n\t        b\"File exists\",\n", "        b\"Invalid cross-device link\",\n\t        b\"No such device\",\n\t        b\"Not a directory\",\n\t        b\"Is a directory\",\n\t        b\"Invalid argument\",\n\t        b\"Too many open files in system\",\n\t        b\"Too many open files\",\n\t        b\"Inappropriate ioctl for device\",\n\t        b\"Text file busy\",\n\t        b\"File too large\",\n", "        b\"No space left on device\",\n\t        b\"Illegal seek\",\n\t        b\"Read-only file system\",\n\t        b\"Too many links\",\n\t        b\"Broken pipe\",\n\t        b\"Numerical argument out of domain\",\n\t        b\"Numerical result out of range\",\n\t        b\"Resource deadlock avoided\",\n\t        b\"File name too long\",\n\t        b\"No locks available\",\n", "        b\"Function not implemented\",\n\t        b\"Directory not empty\",\n\t        b\"Too many levels of symbolic links\",\n\t        None,\n\t        b\"No message of desired type\",\n\t        b\"Identifier removed\",\n\t        b\"Channel number out of range\",\n\t        b\"Level 2 not synchronized\",\n\t        b\"Level 3 halted\",\n\t        b\"Level 3 reset\",\n", "        b\"Link number out of range\",\n\t        b\"Protocol driver not attached\",\n\t        b\"No CSI structure available\",\n\t        b\"Level 2 halted\",\n\t        b\"Invalid exchange\",\n\t        b\"Invalid request descriptor\",\n\t        b\"Exchange full\",\n\t        b\"No anode\",\n\t        b\"Invalid request code\",\n\t        b\"Invalid slot\",\n", "        None,\n\t        b\"Bad font file format\",\n\t        b\"Device not a stream\",\n\t        b\"No data available\",\n\t        b\"Timer expired\",\n\t        b\"Out of streams resources\",\n\t        b\"Machine is not on the network\",\n\t        b\"Package not installed\",\n\t        b\"Object is remote\",\n\t        b\"Link has been severed\",\n", "        b\"Advertise error\",\n\t        b\"Srmount error\",\n\t        b\"Communication error on send\",\n\t        b\"Protocol error\",\n\t        b\"Multihop attempted\",\n\t        b\"RFS specific error\",\n\t        b\"Bad message\",\n\t        b\"Value too large for defined data type\",\n\t        b\"Name not unique on network\",\n\t        b\"File descriptor in bad state\",\n", "        b\"Remote address changed\",\n\t        b\"Can not access a needed shared library\",\n\t        b\"Accessing a corrupted shared library\",\n\t        b\".lib section in a.out corrupted\",\n\t        b\"Attempting to link in too many shared libraries\",\n\t        b\"Cannot exec a shared library directly\",\n\t        b\"Invalid or incomplete multibyte or wide character\",\n\t        b\"Interrupted system call should be restarted\",\n\t        b\"Streams pipe error\",\n\t        b\"Too many users\",\n", "        b\"Socket operation on non-socket\",\n\t        b\"Destination address required\",\n\t        b\"Message too long\",\n\t        b\"Protocol wrong type for socket\",\n\t        b\"Protocol not available\",\n\t        b\"Protocol not supported\",\n\t        b\"Socket type not supported\",\n\t        b\"Operation not supported\",\n\t        b\"Protocol family not supported\",\n\t        b\"Address family not supported by protocol\",\n", "        b\"Address already in use\",\n\t        b\"Cannot assign requested address\",\n\t        b\"Network is down\",\n\t        b\"Network is unreachable\",\n\t        b\"Network dropped connection on reset\",\n\t        b\"Software caused connection abort\",\n\t        b\"Connection reset by peer\",\n\t        b\"No buffer space available\",\n\t        b\"Transport endpoint is already connected\",\n\t        b\"Transport endpoint is not connected\",\n", "        b\"Cannot send after transport endpoint shutdown\",\n\t        b\"Too many references: cannot splice\",\n\t        b\"Connection timed out\",\n\t        b\"Connection refused\",\n\t        b\"Host is down\",\n\t        b\"No route to host\",\n\t        b\"Operation already in progress\",\n\t        b\"Operation now in progress\",\n\t        b\"Stale NFS file handle\",\n\t        b\"Structure needs cleaning\",\n", "        b\"Not a XENIX named type file\",\n\t        b\"No XENIX semaphores available\",\n\t        b\"Is a named type file\",\n\t        b\"Remote I/O error\",\n\t        b\"Disk quota exceeded\",\n\t        b\"No medium found\",\n\t        b\"Wrong medium type\",\n\t        b\"Operation canceled\",\n\t        b\"Required key not available\",\n\t        b\"Key has expired\",\n", "        b\"Key has been revoked\",\n\t        b\"Key was rejected by service\",\n\t        b\"Owner died\",\n\t        b\"State not recoverable\"\n\t    ]\n\t    # Get arguments\n\t    errnum = pstate.get_argument_value(0)\n\t    try:\n\t        str = sys_errlist[errnum]\n\t    except:\n", "        # invalid errnum\n\t        str = b'Error'\n\t    # TODO: We allocate the string at every hit of this function with a\n\t    # potential memory leak. We should allocate the sys_errlist only once\n\t    # and then refer to this table instead of allocate string.\n\t    ptr = pstate.heap_allocator.alloc(len(str) + 1)\n\t    pstate.memory.write(ptr, str + b'\\0')\n\t    return ptr\n\tdef rtn_strlen(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The strlen behavior.\n\t    \"\"\"\n\t    logger.debug('strlen hooked')\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    # Get arguments\n\t    s = pstate.get_argument_value(0)\n\t    ast = pstate.actx\n\t    # FIXME: Not so sure its is really the strlen semantic\n\t    def rec(res, s, deep, maxdeep):\n\t        if deep == maxdeep:\n", "            return res\n\t        cell = pstate.read_symbolic_memory_byte(s+deep).getAst()\n\t        res  = ast.ite(cell == 0x00, ast.bv(deep, ptr_bit_size), rec(res, s, deep + 1, maxdeep))\n\t        return res\n\t    sze = len(pstate.memory.read_string(s))\n\t    res = ast.bv(sze, ptr_bit_size)\n\t    res = rec(res, s, 0, sze)\n\t    # FIXME: That routine should do something like below to be SOUND !\n\t    # for i, c in enumerate(pstate.memory.read_string(src)):\n\t    #     pstate.push_constraint(pstate.read_symbolic_memory_byte(src + i) != 0x00)\n", "    # pstate.push_constraint(pstate.read_symbolic_memory_byte(src + size) == 0x00)\n\t    pstate.push_constraint(pstate.read_symbolic_memory_byte(s+sze).getAst() == 0x00)\n\t    return res\n\tdef rtn_strncasecmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strncasecmp behavior.\n\t    \"\"\"\n\t    logger.debug('strncasecmp hooked')\n\t    s1 = pstate.get_argument_value(0)\n\t    s2 = pstate.get_argument_value(1)\n", "    sz = pstate.get_argument_value(2)\n\t    maxlen = min(sz, min(len(pstate.memory.read_string(s1)), len(pstate.memory.read_string(s2))) + 1)\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    res = ast.bv(0, ptr_bit_size)\n\t    for index in range(maxlen):\n\t        cells1 = pstate.read_symbolic_memory_byte(s1 + index).getAst()\n\t        cells2 = pstate.read_symbolic_memory_byte(s2 + index).getAst()\n\t        cells1 = ast.ite(ast.land([cells1 >= ord('a'), cells1 <= ord('z')]), cells1 - 32, cells1) # upper case\n\t        cells2 = ast.ite(ast.land([cells2 >= ord('a'), cells2 <= ord('z')]), cells2 - 32, cells2) # upper case\n", "        res = res + ast.ite(cells1 == cells2, ast.bv(0, ptr_bit_size), ast.bv(1, ptr_bit_size))\n\t    return res\n\tdef rtn_strncmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strncmp behavior.\n\t    \"\"\"\n\t    logger.debug('strncmp hooked')\n\t    s1 = pstate.get_argument_value(0)\n\t    s2 = pstate.get_argument_value(1)\n\t    sz = pstate.get_argument_value(2)\n", "    maxlen = min(sz, min(len(pstate.memory.read_string(s1)), len(pstate.memory.read_string(s2))) + 1)\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    res = ast.bv(0, ptr_bit_size)\n\t    for index in range(maxlen):\n\t        cells1 = pstate.read_symbolic_memory_byte(s1 + index).getAst()\n\t        cells2 = pstate.read_symbolic_memory_byte(s2 + index).getAst()\n\t        res = res + ast.ite(cells1 == cells2, ast.bv(0, ptr_bit_size), ast.bv(1, ptr_bit_size))\n\t    return res\n\tdef rtn_strncpy(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The strncpy behavior.\n\t    \"\"\"\n\t    logger.debug('strncpy hooked')\n\t    dst = pstate.get_argument_value(0)\n\t    src = pstate.get_argument_value(1)\n\t    cnt = pstate.get_argument_value(2)\n\t    pstate.concretize_argument(2)\n\t    for index in range(cnt):\n\t        src_sym = pstate.read_symbolic_memory_byte(src+index)\n", "        pstate.write_symbolic_memory_byte(dst+index, src_sym)\n\t        if src_sym.getAst().evaluate() == 0:\n\t            pstate.push_constraint(src_sym.getAst() == 0x00)\n\t            break\n\t        else:\n\t            pstate.push_constraint(src_sym.getAst() != 0x00)\n\t    return dst\n\tdef rtn_strtok_r(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strtok_r behavior.\n", "    \"\"\"\n\t    logger.debug('strtok_r hooked')\n\t    string  = pstate.get_argument_value(0)\n\t    delim   = pstate.get_argument_value(1)\n\t    saveptr = pstate.get_argument_value(2)\n\t    saveMem = pstate.memory.read_ptr(saveptr)\n\t    if string == 0:\n\t        string = saveMem\n\t    d = pstate.memory.read_string(delim)\n\t    s = pstate.memory.read_string(string)\n", "    tokens = re.split('[' + re.escape(d) + ']', s)\n\t    # TODO: Make it symbolic\n\t    for token in tokens:\n\t        if token:\n\t            offset = s.find(token)\n\t            # Init the \\0 at the delimiter position\n\t            node = pstate.read_symbolic_memory_byte(string + offset + len(token)).getAst()\n\t            try:\n\t                pstate.push_constraint(pstate.actx.lor([node == ord(c) for c in d]))\n\t            except:  # dafuck is that?\n", "                pstate.push_constraint(node == ord(d))\n\t            # Token must not contain delimiters\n\t            for index, char in enumerate(token):\n\t                node = pstate.read_symbolic_memory_byte(string + offset + index).getAst()\n\t                for delim in d:\n\t                    pstate.push_constraint(node != ord(delim))\n\t            pstate.memory.write_char(string + offset + len(token), 0)\n\t            # Save the pointer\n\t            pstate.memory.write_ptr(saveptr, string + offset + len(token) + 1)\n\t            # Return the token\n", "            return string + offset\n\t    return NULL_PTR\n\tdef rtn_strtoul(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The strtoul behavior.\n\t    \"\"\"\n\t    logger.debug('strtoul hooked')\n\t    nptr   = pstate.get_argument_value(0)\n\t    nptrs  = pstate.get_string_argument(0)\n\t    endptr = pstate.get_argument_value(1)\n", "    base   = pstate.get_argument_value(2)\n\t    for i, c in enumerate(nptrs):\n\t        pstate.push_constraint(pstate.read_symbolic_memory_byte(nptr+i).getAst() == ord(c))\n\t    pstate.concretize_argument(2)  # Concretize base\n\t    try:\n\t        return int(nptrs, base)\n\t    except:\n\t        return 0xffffffff\n\tdef rtn_getenv(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n", "    The getenv behavior.\n\t    \"\"\"\n\t    # TODO\n\t    name = pstate.get_argument_value(0)\n\t    if name == 0:\n\t        return NULL_PTR\n\t    environ_name = pstate.memory.read_string(name)\n\t    logger.warning(f\"Target called getenv({environ_name})\")\n\t    host_env_val = os.getenv(environ_name)\n\t    return host_env_val if host_env_val is not None else 0\n", "#def rtn_tolower(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t#    # TODO\n\t#    \"\"\"\n\t#    The tolower behavior.\n\t#    \"\"\"\n\t#    ptr_bit_size = pstate.ptr_bit_size\n\t#    ast = pstate.actx\n\t#    arg_sym = pstate.get_argument_symbolic(0)\n\t#    return rdi_sym.getAst() - 0x20\n\tdef rtn_isspace(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n", "    \"\"\"\n\t    The isspace behavior.\n\t    \"\"\"\n\t    ptr_bit_size = pstate.ptr_bit_size\n\t    ast = pstate.actx\n\t    arg_sym = pstate.get_argument_symbolic(0)\n\t    exp = arg_sym.getAst() == 0x20\n\t    exp = ast.lor([exp, arg_sym.getAst() == 0xa])\n\t    exp = ast.lor([exp, arg_sym.getAst() == 0x9])\n\t    exp = ast.lor([exp, arg_sym.getAst() == 0xc])\n", "    exp = ast.lor([exp, arg_sym.getAst() == 0xd])\n\t    res =  ast.ite(exp, ast.bv(0, ptr_bit_size), ast.bv(1, ptr_bit_size))\n\t    return res\n\tdef rtn_assert_fail(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The __assert_fail behavior.\n\t    \"\"\"\n\t    msg = pstate.get_argument_value(0)\n\t    msg = pstate.memory.read_string(msg)\n\t    logger.warning(f\"__assert_fail called : {msg}\")\n", "    # Write 1 as return value of the program\n\t    pstate.write_register(pstate.return_register, 1)\n\t    se.abort()\n\tdef rtn_setlocale(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The setlocale behavior.\n\t    \"\"\"\n\t    logger.debug('setlocale hooked')\n\t    category = pstate.get_argument_value(0)\n\t    locale   = pstate.get_argument_value(1)\n", "    if locale != 0:\n\t        logger.warning(f\"Attempt to modify Locale. Currently not supported.\")\n\t        return 0\n\t    # This is a bit hacky but we just store the LOCALEs in the [extern] segment\n\t    segs = pstate.memory.find_map(pstate.EXTERN_SEG)\n\t    if segs:\n\t        map = segs[0]\n\t        LC_ALL = map.start + map.size - 0x20 # Point to the end of seg. But keep in mind LC_ALL is at end - 4.\n\t    else:\n\t        assert False\n", "    print(f\"selocale writing at {LC_ALL:#x}\")\n\t    if category == 0:\n\t        pstate.memory.write(LC_ALL, b\"en_US.UTF-8\\x00\")\n\t    else:\n\t        logger.warning(f\"setlocale called with unsupported category={category}.\")\n\t    return LC_ALL\n\tdef rtn__setjmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The _setjmp behavior. \n\t    \"\"\"\n", "    # TODO\n\t    logger.warning(\"hooked _setjmp\")\n\t    return 0\n\tdef rtn_longjmp(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    \"\"\"\n\t    The longjmp behavior.\n\t    \"\"\"\n\t    # NOTE All the programs tested so far used `longjmp` as an error handling mechanism, right\n\t    # before exiting. This is why, `longjmp` is currently considered an exit condition. \n\t    # TODO Real implementation\n", "    logger.debug('longjmp hooked')\n\t    pstate.stop = True\n\tdef rtn_atexit(se: 'SymbolicExecutor', pstate: 'ProcessState'):\n\t    return 0\n\tSUPPORTED_ROUTINES = {\n\t    # TODO:\n\t    #   - tolower\n\t    #   - toupper\n\t    '__assert_fail':           rtn_assert_fail,\n\t    '__ctype_b_loc':           rtn_ctype_b_loc,\n", "    '__ctype_toupper_loc':     rtn_ctype_toupper_loc,\n\t    '__errno_location':        rtn_errno_location,\n\t    '__fprintf_chk':           rtn___fprintf_chk,\n\t    '__libc_start_main':       rtn_libc_start_main,\n\t    '__stack_chk_fail':        rtn_stack_chk_fail,\n\t    '__xstat':                 rtn_xstat,\n\t    'abort':                   rtn_abort,\n\t    \"atexit\":                  rtn_atexit,\n\t    \"__cxa_atexit\":            rtn_atexit,\n\t    'atoi':                    rtn_atoi,\n", "    'calloc':                  rtn_calloc,\n\t    'clock_gettime':           rtn_clock_gettime,\n\t    'exit':                    rtn_exit,\n\t    'fclose':                  rtn_fclose,\n\t    'fgets':                   rtn_fgets,\n\t    'fopen':                   rtn_fopen,\n\t    'fprintf':                 rtn_fprintf,\n\t    'fputc':                   rtn_fputc,\n\t    'fputs':                   rtn_fputs,\n\t    'fread':                   rtn_fread,\n", "    'free':                    rtn_free,\n\t    'fwrite':                  rtn_fwrite,\n\t    'gettimeofday':            rtn_gettimeofday,\n\t    'malloc':                  rtn_malloc,\n\t    'memcmp':                  rtn_memcmp,\n\t    'memcpy':                  rtn_memcpy,\n\t    'memmem':                  rtn_memmem,\n\t    'memmove':                 rtn_memmove,\n\t    'memset':                  rtn_memset,\n\t    'open':                    rtn_open,\n", "    'printf':                  rtn_printf,\n\t    'pthread_create':          rtn_pthread_create,\n\t    'pthread_exit':            rtn_pthread_exit,\n\t    'pthread_join':            rtn_pthread_join,\n\t    'pthread_mutex_destroy':   rtn_pthread_mutex_destroy,\n\t    'pthread_mutex_init':      rtn_pthread_mutex_init,\n\t    'pthread_mutex_lock':      rtn_pthread_mutex_lock,\n\t    'pthread_mutex_unlock':    rtn_pthread_mutex_unlock,\n\t    'puts':                    rtn_puts,\n\t    'rand':                    rtn_rand,\n", "    'read':                    rtn_read,\n\t    'sem_destroy':             rtn_sem_destroy,\n\t    'sem_getvalue':            rtn_sem_getvalue,\n\t    'sem_init':                rtn_sem_init,\n\t    'sem_post':                rtn_sem_post,\n\t    'sem_timedwait':           rtn_sem_timedwait,\n\t    'sem_trywait':             rtn_sem_trywait,\n\t    'sem_wait':                rtn_sem_wait,\n\t    'sleep':                   rtn_sleep,\n\t    'sprintf':                 rtn_sprintf,\n", "    'strcasecmp':              rtn_strcasecmp,\n\t    'strchr':                  rtn_strchr,\n\t    'strcmp':                  rtn_strcmp,\n\t    'strcpy':                  rtn_strcpy,\n\t    'strerror':                rtn_strerror,\n\t    'strlen':                  rtn_strlen,\n\t    'strncasecmp':             rtn_strncasecmp,\n\t    'strncmp':                 rtn_strncmp,\n\t    'strncpy':                 rtn_strncpy,\n\t    'strtok_r':                rtn_strtok_r,\n", "    'strtoul':                 rtn_strtoul,\n\t    'write':                   rtn_write,\n\t    'getenv':                  rtn_getenv,\n\t    'fseek':                   rtn_fseek,\n\t    'ftell':                   rtn_ftell,\n\t    '_setjmp':                 rtn__setjmp,\n\t    'longjmp':                 rtn_longjmp,\n\t    'realloc':                 rtn_realloc,\n\t    'setlocale':               rtn_setlocale,\n\t    'strdup':                  rtn_strdup,\n", "    'mempcpy':                 rtn_mempcpy,\n\t    '__mempcpy':               rtn_mempcpy,\n\t    'getchar':                 rtn_getchar,\n\t    'isspace':                 rtn_isspace,\n\t    #'tolower':                 rtn_tolower,\n\t}\n\tSUPORTED_GVARIABLES = {\n\t    '__stack_chk_guard':    0xdead,\n\t    'stderr':               0x0002,\n\t    'stdin':                0x0000,\n", "    'stdout':               0x0001,\n\t}\n"]}
{"filename": "tritondse/types.py", "chunked_list": ["from __future__ import annotations\n\timport sys\n\tfrom enum import IntEnum, Enum, auto, IntFlag\n\tfrom pathlib import Path\n\tfrom triton import ARCH, SOLVER_STATE, SOLVER\n\tfrom typing import Union, TypeVar, Tuple, Type\n\timport io\n\timport enum_tools.documentation\n\tfrom dataclasses import dataclass\n\tPathLike = Union[str, Path]\n", "\"\"\"Type representing file either as a file, either as a Path object\"\"\"\n\tAddr = int\n\t\"\"\"Integer representing an address\"\"\"\n\trAddr = int\n\t\"\"\"Integer representing a relative address\"\"\"\n\tBitSize = int\n\t\"\"\"Integer representing a value in bits\"\"\"\n\tByteSize = int\n\t\"\"\"Integer representing a value in bytes\"\"\"\n\tInput = bytes\n", "\"\"\" Type representing an Input (which is bytes) \"\"\"\n\tRegister = TypeVar('Register')\n\t\"\"\"Register identifier as used by Triton *(not the Register object itself)*\"\"\"\n\tRegisters = TypeVar('Registers')\n\t\"\"\"Set of registers as used by Triton\"\"\"\n\tPathConstraint = TypeVar('PathConstraint')\n\t\"\"\" `PathConstraint <https://triton.quarkslab.com/documentation/doxygen/py_PathConstraint_page.html>`_ object as returned by Triton\"\"\"\n\tAstNode = TypeVar('AstNode')\n\t\"\"\" SMT logic formula as returned by Triton (`AstNode <https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_) \"\"\"\n\tModel = TypeVar('Model')\n", "\"\"\" Solver `Model <https://triton.quarkslab.com/documentation/doxygen/py_SolverModel_page.html>`_ as returned by Triton \"\"\"\n\tExpression = TypeVar('Expression')\n\t\"\"\" Symbolic Expression as returned by Triton (`SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_) \"\"\"\n\tSymbolicVariable = TypeVar('SymbolicVariable')\n\t\"\"\" Symbolic Variable as returned by Triton (`SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicVariable_page.html>`_) \"\"\"\n\tEdge = Tuple[Addr, Addr]\n\t\"\"\" Type representing a edge in the program \"\"\"\n\tPathHash = str\n\t\"\"\"Type representing the hash of path to uniquely identify any path \"\"\"\n\t@enum_tools.documentation.document_enum\n", "class SymExType(str, Enum):\n\t    \"\"\"\n\t    Symobolic Expression type enum. (internal usage only)\n\t    \"\"\"\n\t    CONDITIONAL_JMP = 'cond-jcc'  # doc: symbolic expression is a conditional jump\n\t    DYNAMIC_JMP = 'dyn-jmp'       # doc: symbolic expression is a dynamic jump\n\t    SYMBOLIC_READ = 'sym-read'    # doc: symbolic expression is a symbolic memory read\n\t    SYMBOLIC_WRITE = 'sym-write'  # doc: symbolic expression is a symbolic memory write\n\tif sys.version_info.minor >= 8:\n\t    from typing import TypedDict\n", "    class PathBranch(TypedDict):\n\t        \"\"\"\n\t        Typed dictionnary describing the branch information\n\t        returned by Triton (with getBranchConstraints())\n\t        \"\"\"\n\t        isTaken: bool\n\t        srcAddr: Addr\n\t        dstAddr: Addr\n\t        constraint: AstNode\n\telse:\n", "    PathBranch = TypeVar('PathBranch')\n\t    \"\"\" PathBranchobject as returned by Triton.\n\t    Thus it is a dictionnary with the keys:\n\t    \"\"\"\n\t@enum_tools.documentation.document_enum\n\tclass Architecture(IntEnum):\n\t    \"\"\"\n\t    Common architecture Enum fully compatible with Triton\n\t    `ARCH <https://triton.quarkslab.com/documentation/doxygen/py_ARCH_page.html>`_\n\t    \"\"\"\n", "    AARCH64 = ARCH.AARCH64  # doc: Aarch64 architecture\n\t    ARM32 = ARCH.ARM32      # doc: ARM architecture (32 bits)\n\t    X86 = ARCH.X86          # doc: x86 architecture (32 bits)\n\t    X86_64 = ARCH.X86_64    # doc: x86-64 architecture (64 bits)\n\t@enum_tools.documentation.document_enum\n\tclass ArchMode(IntFlag):\n\t    \"\"\"\n\t    Various architecture specific modes that can be enabled or disabledd.\n\t    (meant to be fullfilled)\n\t    \"\"\"\n", "    THUMB = 1   # doc: set thumb mode for ARM32 architecture\n\t@enum_tools.documentation.document_enum\n\tclass Platform(IntEnum):\n\t    \"\"\"\n\t    Platform associated to a binary\n\t    \"\"\"\n\t    LINUX = auto()    # doc: Linux platform\n\t    WINDOWS = auto()  # doc: Windows platform\n\t    MACOS = auto()    # doc: Mac OS platform\n\t    ANDROID = auto()  # doc: Android platform\n", "    IOS = auto()      # doc: IOS platform\n\t@enum_tools.documentation.document_enum\n\tclass SmtSolver(IntEnum):\n\t    \"\"\" Common SMT Solver Enum fully compatible with Triton \"\"\"\n\t    Z3 = SOLVER.Z3              # doc: Z3 SMT solver\n\t    BITWUZLA = SOLVER.BITWUZLA  # doc: bitwuzla solver\n\t@enum_tools.documentation.document_enum\n\tclass SolverStatus(IntEnum):\n\t    \"\"\" Common Solver Enum fully compatible with Triton ARCH \"\"\"\n\t    SAT     = SOLVER_STATE.SAT      # doc: Formula is satisfiable (SAT)\n", "    UNSAT   = SOLVER_STATE.UNSAT    # doc: Formula is unsatisfiable (UNSAT)\n\t    TIMEOUT = SOLVER_STATE.TIMEOUT  # doc: Formula solving did timeout\n\t    UNKNOWN = SOLVER_STATE.UNKNOWN  # doc: Formula solving failed\n\t@enum_tools.documentation.document_enum\n\tclass Perm(IntFlag):\n\t    \"\"\"\n\t    Flags encoding permissions. Used for memory pages.\n\t    They can be combined as flags. e.g:\n\t    .. code-block:: python\n\t        rw = Perm.R | Perm.W\n", "    \"\"\"\n\t    R = 4  # doc: Read\n\t    W = 2  # doc: Write\n\t    X = 1  # doc: Execute\n\t@enum_tools.documentation.document_enum\n\tclass Endian(IntEnum):\n\t    \"\"\"\n\t    Endianess of the binary.\n\t    \"\"\"\n\t    LITTLE = 1  # doc: Little-endian\n", "    BIG = 2     # doc: Big-endian\n\t@dataclass\n\tclass FileDesc:\n\t    \"\"\"\n\t    Type representing a file descriptor\n\t    \"\"\"\n\t    \"\"\" The target program's file descriptor \"\"\"\n\t    id: int\n\t    \"\"\" Name of the file \"\"\"\n\t    name: str\n", "    \"\"\" The python file stream object \"\"\"\n\t    fd: io.IOBase\n\t    @property\n\t    def offset(self) -> int:\n\t        return self.fd.tell()\n\t    def is_real_fd(self) -> bool:\n\t        return isinstance(self.fd, io.TextIOWrapper)\n\t    def is_input_fd(self) -> bool:\n\t        return isinstance(self.fd, io.BytesIO)\n\t    def fgets(self, max_size: int) -> bytes:\n", "        s = b\"\"\n\t        for i in range(max_size):\n\t            c = self.fd.read(1)\n\t            if not c:  # EOF\n\t                break\n\t            c = c if isinstance(c, bytes) else c.encode()\n\t            s += c\n\t            if c == b\"\\x00\":\n\t                return s\n\t            elif c == b\"\\n\":\n", "                break\n\t        # If get there read max_size\n\t        return s+b\"\\x00\"\n\t    def read(self, size: int) -> bytes:\n\t        data = self.fd.read(size)\n\t        return data if isinstance(data, bytes) else data.encode()\n"]}
{"filename": "tritondse/config.py", "chunked_list": ["import logging\n\timport json\n\tfrom enum import Enum, IntFlag\n\tfrom pathlib import Path\n\tfrom typing import List\n\tfrom functools import reduce\n\t# triton-based libraries\n\tfrom tritondse.coverage import CoverageStrategy, BranchSolvingStrategy\n\tfrom tritondse.types import SmtSolver\n\tfrom tritondse.seed import SeedFormat\n", "class Config(object):\n\t    \"\"\"\n\t    Data class holding tritondse configuration\n\t    parameter\n\t    \"\"\"\n\t    def __init__(self,\n\t                 seed_format: SeedFormat = SeedFormat.RAW,\n\t                 pipe_stdout: bool = False,\n\t                 pipe_stderr: bool = False,\n\t                 skip_sleep_routine: bool = False,\n", "                 smt_solver: SmtSolver = SmtSolver.Z3,\n\t                 smt_timeout: int = 5000,\n\t                 execution_timeout: int = 0,\n\t                 exploration_timeout: int = 0,\n\t                 exploration_limit: int = 0,\n\t                 thread_scheduling: int = 200,\n\t                 smt_queries_limit: int = 1200,\n\t                 smt_enumeration_limit: int = 40,\n\t                 coverage_strategy: CoverageStrategy = CoverageStrategy.BLOCK,\n\t                 branch_solving_strategy: BranchSolvingStrategy = BranchSolvingStrategy.FIRST_LAST_NOT_COVERED,\n", "                 workspace: str = \"\",\n\t                 program_argv: List[str] = None,\n\t                 time_inc_coefficient: float = 0.00001,\n\t                 skip_unsupported_import: bool = False,\n\t                 skip_unsupported_instruction: bool = False,\n\t                 memory_segmentation: bool = True):\n\t        self.seed_format: SeedFormat = seed_format\n\t        \"\"\" Seed type is either Raw (raw bytes) or Composite (more expressive).\n\t            See seeds.py for more information on each format.\n\t        \"\"\"\n", "        self.pipe_stdout: bool = pipe_stdout\n\t        \"\"\" Pipe the program stdout to Python's stdout. *(default: False)*\"\"\"\n\t        self.pipe_stderr: bool = pipe_stderr\n\t        \"\"\" Pipe the program stderr to Python's stderr *(default: False)*\"\"\"\n\t        self.skip_sleep_routine: bool = skip_sleep_routine\n\t        \"\"\" Whether to emulate sleeps routine or not *(default: False)*\"\"\"\n\t        self.smt_solver: SmtSolver = smt_solver\n\t        \"\"\" SMT solver to perform queries solving \"\"\"\n\t        self.smt_timeout: int = smt_timeout\n\t        \"\"\" Timeout for a single SMT query in milliseconds *(default: 10)*\"\"\"\n", "        self.execution_timeout: int = execution_timeout\n\t        \"\"\" Timeout of a single execution. If it is triggered the associated\n\t        input file is marked as 'hanging'. In seconds, 0 means unlimited *(default: 0)*\"\"\"\n\t        self.exploration_timeout: int = exploration_timeout\n\t        \"\"\" Overall timeout of the exploration in seconds. 0 means unlimited *(default: 0)* \"\"\"\n\t        self.exploration_limit: int = exploration_limit\n\t        \"\"\" Number of execution iterations. 0 means unlimited *(default: 0)*\"\"\"\n\t        self.thread_scheduling: int = thread_scheduling\n\t        \"\"\" Number of instructions to execute before switching to the next thread.\n\t        At the moment all threads are scheduled in a round-robin manner *(default: 200)*\"\"\"\n", "        self.smt_queries_limit: int = smt_queries_limit\n\t        \"\"\" Limit of SMT queries to perform for a single execution *(default: 1200)*\"\"\"\n\t        self.smt_enumeration_limit: int = smt_enumeration_limit\n\t        \"\"\" Limit of model values retrieved when enumerating a dynamic jump or symbolic memory accesses\"\"\"\n\t        self.coverage_strategy: CoverageStrategy = coverage_strategy\n\t        \"\"\" Coverage strategy to apply for the whole exploration, default: :py:obj:`CoverageStrategy.BLOCK`\"\"\"\n\t        self.branch_solving_strategy: BranchSolvingStrategy = branch_solving_strategy\n\t        \"\"\" Branch solving strategy to apply for a single execution. For a given non-covered\n\t        branch allows changing whether we try to solve it at all occurences or more seldomly.\n\t        default: :py:obj:`BranchSolvingStrategy.FIRST_LAST_NOT_COVERED`\n", "        \"\"\"\n\t        self.workspace: str = workspace\n\t        \"\"\" Workspace directory to use. *(default: 'workspace')* \"\"\"\n\t        self.program_argv: List[str] = [] if program_argv is None else program_argv\n\t        \"\"\" Concrete program argument as given on the command line.\"\"\"\n\t        self.time_inc_coefficient: float = time_inc_coefficient\n\t        \"\"\" Time increment coefficient at each instruction to provide a deterministic\n\t        behavior when calling time functions (e.g gettimeofday(), clock_gettime(), ...).\n\t        For example, if 0.0001 is defined, each instruction will increment the time representation\n\t        of the execution by 100us. *(default: 0.00001)*\n", "        \"\"\"\n\t        self.skip_unsupported_import: bool = skip_unsupported_import\n\t        \"\"\" Whether or not to stop the emulation when hitting a external\n\t        call to a function that is not supported.\n\t        \"\"\"\n\t        self.skip_unsupported_instruction: bool = skip_unsupported_instruction\n\t        \"\"\" Whether or not to stop the emulation when hitting an instruction\n\t        for which the semantic is not defined.\n\t        \"\"\"\n\t        self.memory_segmentation: bool = memory_segmentation\n", "        \"\"\" This option defines whether or not memory segmentation is enforced.\n\t        If activated all memory accesses must belong to a mapped memory area.\n\t        \"\"\"\n\t        self.custom = {}\n\t        \"\"\"\n\t        Custom carrier field enabling user to add parameters of their own.\n\t        \"\"\"\n\t    def __str__(self):\n\t        return \"\\n\".join(f\"{k.ljust(23)}= {v}\" for k, v in self.__dict__.items())\n\t    def to_file(self, file: str) -> None:\n", "        \"\"\"\n\t        Save the current configuration to a file\n\t        :param file: The path name\n\t        \"\"\"\n\t        with open(file, \"w\") as f:\n\t            f.write(self.to_json())\n\t    @staticmethod\n\t    def from_file(file: str) -> 'Config':\n\t        \"\"\"\n\t        Load a configuration from a file to a new instance of Config\n", "        :param file: The path name\n\t        :return: A fresh instance of Config\n\t        \"\"\"\n\t        raw = Path(file).read_text()\n\t        return Config.from_json(raw)\n\t    @staticmethod\n\t    def from_json(s: str) -> 'Config':\n\t        \"\"\"\n\t        Load a configuration from a json input to a new instance of Config\n\t        :param s: The JSON text\n", "        :return: A fresh instance of Config\n\t        \"\"\"\n\t        data = json.loads(s)\n\t        c = Config()\n\t        for k, v in data.items():\n\t            if hasattr(c, k):\n\t                mapping = {\"coverage_strategy\": CoverageStrategy, \"smt_solver\": SmtSolver,\n\t                           \"seed_format\": SeedFormat}\n\t                if k in mapping:\n\t                    v = mapping[k][v]\n", "                elif k == \"branch_solving_strategy\":\n\t                    v = reduce(lambda acc, x: BranchSolvingStrategy[x] | acc, v, 0)\n\t                setattr(c, k, v)\n\t            else:\n\t                logging.warning(f\"config unknown parameter: {k}\")\n\t        return c\n\t    def to_json(self) -> str:\n\t        \"\"\"\n\t        Convert the current configuration to a json output\n\t        :return: JSON text\n", "        \"\"\"\n\t        def to_str_list(value):\n\t            return [x.name for x in list(BranchSolvingStrategy) if x in value]\n\t        d = {}\n\t        for k, v in self.__dict__.items():\n\t            if isinstance(v, IntFlag):\n\t                d[k] = to_str_list(v)\n\t            elif isinstance(v, Enum):\n\t                d[k] = v.name\n\t            else:\n", "                d[k] = v\n\t        return json.dumps(d, indent=2)\n\t    def is_format_composite(self) -> bool:\n\t        \"\"\" Return true if the seed format is composite\"\"\"\n\t        return self.seed_format == SeedFormat.COMPOSITE\n\t    def is_format_raw(self) -> bool:\n\t        \"\"\" Return true if the seed format is raw \"\"\"\n\t        return self.seed_format == SeedFormat.RAW\n"]}
{"filename": "tritondse/workspace.py", "chunked_list": ["# built-in imports\n\tfrom __future__ import annotations\n\timport shutil\n\tfrom pathlib import Path\n\tfrom typing import Generator, Optional, Union\n\timport time\n\t# local imports\n\tfrom tritondse.types import PathLike\n\tfrom tritondse.seed import Seed, SeedStatus\n\timport tritondse.logging\n", "logger = tritondse.logging.get()\n\tclass Workspace(object):\n\t    \"\"\"\n\t    Class to abstract the file tree of the current exploration workspace.\n\t    A user willing to save additional files in the workspace is invited\n\t    to do it from the workspace API as it somehow abstract the exact\n\t    location of it.\n\t    \"\"\"\n\t    DEFAULT_WORKSPACE = \"/tmp/triton_workspace\"\n\t    CORPUS_DIR = \"corpus\"\n", "    CRASH_DIR = \"crashes\"\n\t    HANG_DIR = \"hangs\"\n\t    WORKLIST_DIR = \"worklist\"\n\t    METADATA_DIR = \"metadata\"\n\t    BIN_DIR = \"bin\"\n\t    LOG_FILE = \"tritondse.log\"\n\t    def __init__(self, root_dir: PathLike):\n\t        \"\"\"\n\t        :param root_dir: Root directory of the workspace. Created if not existing\n\t        :type root_dir: :py:obj:`tritondse.types.PathLike`\n", "        \"\"\"\n\t        if not root_dir:  # If no workspace was provided create a unique temporary one\n\t            self.root_dir = Path(self.DEFAULT_WORKSPACE) / str(time.time()).replace(\".\", \"\")\n\t            self.root_dir.mkdir(parents=True)\n\t        else:\n\t            self.root_dir = Path(root_dir)\n\t            if not self.root_dir.exists():  # Create the directory in case it was not existing\n\t                self.root_dir.mkdir(parents=True)\n\t                self.initialize()\n\t        self.root_dir: Path = self.root_dir.resolve()  #: root directory of the Workspace\n", "    def initialize(self, flush: bool = False) -> None:\n\t        \"\"\"\n\t        Initialize the workspace by creating all required subfolders\n\t        if not already existing.\n\t        :param flush: if True deletes all files contained in the workspace\n\t        :type flush: bool\n\t        \"\"\"\n\t        for dir in (self.root_dir / x for x in [self.CORPUS_DIR, self.CRASH_DIR, self.HANG_DIR, self.WORKLIST_DIR, self.METADATA_DIR, self.BIN_DIR]):\n\t            if not dir.exists():\n\t                logger.debug(f\"Creating the {dir} directory\")\n", "                dir.mkdir(parents=True)\n\t            else:\n\t                if flush:\n\t                    shutil.rmtree(dir)\n\t                    dir.mkdir()\n\t    def get_metadata_file(self, name: str) -> Optional[str]:\n\t        \"\"\"\n\t        Read a metadata file from the workspace on disk.\n\t        Data is read as a string. If the given file does not\n\t        exists, None is returned\n", "        :param name: file name (can also be a path)\n\t        :type name: str\n\t        :returns: File content as string if existing\n\t        :rtype: Optional[str]\n\t        \"\"\"\n\t        p = (self.root_dir / self.METADATA_DIR) / name\n\t        if p.exists():\n\t            return p.read_text()\n\t        else:\n\t            return None\n", "    def get_metadata_file_path(self, name: str) -> Path:\n\t        \"\"\"\n\t        Get a file path in the workspace directory that the user\n\t        can write into. Might be called for the user to write on\n\t        its own the file content. If name is a file tree, all parent\n\t        directories are created.\n\t        :param name: filename wanted\n\t        :type name: str\n\t        :return: absolute filepath (regardless of whether it exists or not)\n\t        \"\"\"\n", "        p = (self.root_dir / self.METADATA_DIR) / name\n\t        if not p.parent.exists():\n\t            p.parent.mkdir(parents=True)\n\t        return p\n\t    def get_binary_directory(self) -> Path:\n\t        \"\"\"\n\t        Get the directory containing the executable (and its dependencies).\n\t        :return: Path of the directory\n\t        \"\"\"\n\t        return self.root_dir / self.BIN_DIR\n", "    def save_metadata_file(self, name: str, content: Union[str, bytes]) -> None:\n\t        \"\"\"\n\t        Save ``content`` in a file ``name`` in the metadata directory.\n\t        The name should be a file name not a path.\n\t        :param name: file name\n\t        :type name: str\n\t        :param content: content of the file to write\n\t        :type content: Union[str, bytes]\n\t        \"\"\"\n\t        p = (self.root_dir / self.METADATA_DIR) / name\n", "        if isinstance(content, str):\n\t            p.write_text(content)\n\t        else:\n\t            p.write_bytes(content)\n\t    def _iter_seeds(self, directory: str, st: SeedStatus) -> Generator[Seed, None, None]:\n\t        \"\"\" Iterate over seeds \"\"\"\n\t        for file in (self.root_dir/directory).glob(\"*.cov\"):\n\t            yield Seed.from_file(file, st)\n\t    def iter_corpus(self) -> Generator[Seed, None, None]:\n\t        \"\"\"\n", "        Iterate over the corpus files as Seed object.\n\t        :returns: generator of Seed object\n\t        :rtype: Generator[Seed, None, None]\n\t        \"\"\"\n\t        yield from self._iter_seeds(self.CORPUS_DIR, SeedStatus.OK_DONE)\n\t    def iter_crashes(self) -> Generator[Seed, None, None]:\n\t        \"\"\"\n\t        Iterate over the crashes files as Seed object.\n\t        :returns: generator of Seed object\n\t        :rtype: Generator[Seed, None, None]\n", "        \"\"\"\n\t        yield from self._iter_seeds(self.CRASH_DIR, SeedStatus.CRASH)\n\t    def iter_hangs(self) -> Generator[Seed, None, None]:\n\t        \"\"\"\n\t        Iterate over the hang files as Seed object.\n\t        :returns: generator of Seed object\n\t        :rtype: Generator[Seed, None, None]\n\t        \"\"\"\n\t        yield from self._iter_seeds(self.HANG_DIR, SeedStatus.HANG)\n\t    def iter_worklist(self) -> Generator[Seed, None, None]:\n", "        \"\"\"\n\t        Iterate over the worklist files as Seed object.\n\t        Worklist are all the pending seeds\n\t        :returns: generator of Seed object\n\t        :rtype: Generator[Seed, None, None]\n\t        \"\"\"\n\t        yield from self._iter_seeds(self.WORKLIST_DIR, SeedStatus.NEW)\n\t    def save_seed(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Save the current seed in the workspace directory matching its status.\n", "        :param seed: Seed to save\n\t        :type seed: Seed\n\t        \"\"\"\n\t        mapper = {SeedStatus.NEW: self.WORKLIST_DIR,\n\t                  SeedStatus.OK_DONE: self.CORPUS_DIR,\n\t                  SeedStatus.HANG: self.HANG_DIR,\n\t                  SeedStatus.CRASH: self.CRASH_DIR}\n\t        p = (self.root_dir / mapper[seed.status]) / seed.filename\n\t        p.write_bytes(bytes(seed))\n\t    def update_seed_location(self, seed: Seed) -> None:\n", "        \"\"\"\n\t        Move a worklist seed to its final location according to its (new) status.\n\t        Typically used to move a seed from pending ones to corpus or crash once it\n\t        is fully consumed.\n\t        :param seed: seed to move\n\t        :type seed: Seed\n\t        \"\"\"\n\t        old_p = (self.root_dir / self.WORKLIST_DIR) / seed.filename\n\t        try:\n\t            old_p.unlink()  # Remove the seed from the worklist\n", "        except:\n\t            logger.warning(f\"seed {seed} unlink failed\")\n\t            pass  # FIXME: Not meant to get here\n\t        self.save_seed(seed)\n\t    def save_file(self, rel_path: PathLike, content: Union[str, bytes], override: bool = False):\n\t        \"\"\"\n\t        Save a, arbitrary file in the workspace by providing the relative path\n\t        of the file. If ``override`` is True, erase the previous file if any.\n\t        :param rel_path: relative path of the file\n\t        :type rel_path: :py:obj:`tritondse.types.PathLike`\n", "        :param content: content to write\n\t        :type content: Union[str, bytes]\n\t        :param override: whether to override or not an existing file\n\t        :type override: bool\n\t        \"\"\"\n\t        p = self.root_dir / rel_path\n\t        p.parent.mkdir(parents=True, exist_ok=True)\n\t        if not p.exists() or override:\n\t            if isinstance(content, str):\n\t                p.write_text(content)\n", "            elif isinstance(content, bytes):\n\t                p.write_bytes(content)\n\t            else:\n\t                assert False\n\t    @property\n\t    def logfile_path(self):\n\t        return self.root_dir / self.LOG_FILE\n"]}
{"filename": "tritondse/thread_context.py", "chunked_list": ["from enum import Enum, auto\n\timport enum_tools.documentation\n\tfrom triton import TritonContext\n\t@enum_tools.documentation.document_enum\n\tclass ThreadState(Enum):\n\t    RUNNING = auto()  # doc: Normal state\n\t    DEAD = auto()     # doc: State after pthread_exit\n\t    JOINING = auto()  # doc: State after pthread_join\n\t    LOCKED = auto()   # doc: State after a pthread_lock & co\n\tclass ThreadContext(object):\n", "    \"\"\"\n\t    Thread data structure holding all information related to it.\n\t    Purposely used to save registers and to restore them in a\n\t    TritonContext.\n\t    \"\"\"\n\t    def __init__(self, tid: int):\n\t        \"\"\"\n\t        :param tid: thread id\n\t        \"\"\"\n\t        self.cregs = dict()          # context of concrete registers\n", "        self.sregs = dict()          # context of symbolic registers\n\t        self._join_th_id = None      # joined thread id\n\t        self.tid = tid               # the thread id\n\t        self.count = 0               # Number of instructions executed until scheduling\n\t        self.state = ThreadState.RUNNING\n\t        # FIXME: Keep the thread_scheduling and automated the reset on restore\n\t    def save(self, tt_ctx: TritonContext) -> None:\n\t        \"\"\"\n\t        Save the current thread state from the current execution.\n\t        That implies keeping a reference on symbolic and concrete\n", "        registers.\n\t        :param tt_ctx: current TritonContext to save\n\t        :type tt_ctx: `TritonContext <https://triton.quarkslab.com/documentation/doxygen/py_TritonContext_page.html>`_\n\t        \"\"\"\n\t        # Save symbolic registers\n\t        self.sregs = tt_ctx.getSymbolicRegisters()\n\t        # Save concrete registers\n\t        for r in tt_ctx.getParentRegisters():\n\t            self.cregs.update({r.getId(): tt_ctx.getConcreteRegisterValue(r)})\n\t    def restore(self, tt_ctx: TritonContext) -> None:\n", "        \"\"\"\n\t        Restore a thread state in the given TritonContext\n\t        :param tt_ctx: context in which to restor the current thread state\n\t        :type tt_ctx: `TritonContext <https://triton.quarkslab.com/documentation/doxygen/py_TritonContext_page.html>`_\n\t        \"\"\"\n\t        # Restore concrete registers\n\t        for rid, v in self.cregs.items():\n\t            tt_ctx.setConcreteRegisterValue(tt_ctx.getRegister(rid), v)\n\t        # Restore symbolic registers\n\t        for rid, e in self.sregs.items():\n", "            tt_ctx.assignSymbolicExpressionToRegister(e, tt_ctx.getRegister(rid))\n\t    def kill(self) -> None:\n\t        \"\"\"\n\t        Kill the current thread. Called when exiting the thread.\n\t        :return:\n\t        \"\"\"\n\t        self.state = ThreadState.DEAD\n\t    def is_dead(self) -> bool:\n\t        \"\"\"\n\t        Returns whether the thread is killed or not\n", "        :return: boolean indicating if the thread is dead or not\n\t        \"\"\"\n\t        return self.state == ThreadState.DEAD\n\t    def join_thread(self, th_id: int) -> None:\n\t        \"\"\"\n\t        Put the thread in a join state where waits for\n\t        another thread.\n\t        :param th_id: id of the thread to join\n\t        :return: None\n\t        \"\"\"\n", "        self._join_th_id = th_id\n\t        self.state = ThreadState.JOINING\n\t    def is_waiting_to_join(self) -> bool:\n\t        \"\"\"\n\t        Checks whether the thread is waiting to join\n\t        another one.\n\t        :return: boolean on whether it waits for another thread\n\t        \"\"\"\n\t        return self.state == ThreadState.JOINING\n\t    def cancel_join(self) -> None:\n", "        \"\"\"\n\t        Cancel a join operation.\n\t        :return: None\n\t        \"\"\"\n\t        self._join_th_id = None\n\t        self.state = ThreadState.RUNNING\n\t    def is_main_thread(self) -> bool:\n\t        \"\"\"\n\t        Returns whether or not it is the main thread\n\t        (namely its id is 0)\n", "        :return: bool\n\t        \"\"\"\n\t        return self.tid == 0\n\t    def is_running(self) -> bool:\n\t        \"\"\"\n\t        Return if the thread is properly running or not.\n\t        :return: True if the thread is running\n\t        \"\"\"\n\t        return self.state == ThreadState.RUNNING\n"]}
{"filename": "tritondse/seed.py", "chunked_list": ["import hashlib\n\timport base64\n\timport json\n\tfrom enum import Enum\n\tfrom pathlib import Path\n\tfrom tritondse.types import PathLike, SymExType\n\tfrom typing import List, Dict, Union, Optional\n\tfrom dataclasses import dataclass, field\n\timport enum_tools.documentation\n\t@enum_tools.documentation.document_enum\n", "class SeedStatus(Enum):\n\t    \"\"\"\n\t    Seed status enum.\n\t    Enables giving a status to a seed during its execution.\n\t    At the end of a :py:obj:`SymbolicExecutor` run one of these\n\t    status must have set to the seed.\n\t    \"\"\"\n\t    NEW = 0      # doc: The input seed is new (has not been executed yet)\n\t    OK_DONE = 1  # doc: The input seed has been executed and terminated correctly\n\t    CRASH = 2    # doc: The input seed crashed in some ways\n", "    HANG = 3     # doc: The input seed made the program to hang\n\t@enum_tools.documentation.document_enum\n\tclass SeedFormat(Enum):\n\t    \"\"\"\n\t    Seed format enum\n\t    Raw seeds are just bytes Seed(b\"AAAAA\\x00BBBBB\")\n\t    Composite can describe how to inject the input more precisely \n\t    \"\"\"\n\t    RAW = 0        # doc: plain bytes input seed\n\t    COMPOSITE = 1  # doc: complex input object\n", "@dataclass(frozen=True)\n\tclass CompositeData:\n\t    argv: List[bytes] = field(default_factory=list)\n\t    \"list of argv values\"\n\t    files: Dict[str, bytes] = field(default_factory=dict)\n\t    \"dictionnary of files and the associated content (stdin is one of them)\"\n\t    variables: Dict[str, bytes] = field(default_factory=dict)\n\t    \"user defined variables, that the use must take care to inject at right location\"\n\t    def _to_json(self):\n\t        data = {\n", "            'argv': [base64.b64encode(v).decode() for v in self.argv],\n\t            'files': {k: (base64.b64encode(v).decode() if isinstance(v, bytes) else v) for k, v in self.files.items()},\n\t            'variables': {k: (base64.b64encode(v).decode() if isinstance(v, bytes) else v) for k, v in self.variables.items()},\n\t        }\n\t        return json.dumps(data, indent=2)\n\t    def __bytes__(self) -> str:\n\t        \"\"\"\n\t        Serialize data into a json string.\n\t        :return: JSON serialized data\n\t        \"\"\"\n", "        return self._to_json().encode()\n\t    @staticmethod\n\t    def from_dict(json_data: dict) -> 'CompositeData':\n\t        \"\"\"\n\t        Convert dict data into a :py:obj:`CompositeData` object.\n\t        :param json_data: json data\n\t        :return: new object instance\n\t        \"\"\"\n\t        argv = [base64.b64decode(v) for v in json_data['argv']]\n\t        files = {k: (base64.b64decode(v) if isinstance(v, str) else v) for k, v in json_data['files'].items()}\n", "        variables = {k: (base64.b64decode(v) if isinstance(v, str) else v) for k, v in json_data['variables'].items()}\n\t        return CompositeData(argv=argv, files=files, variables=variables)\n\t    def __hash__(self):\n\t        return hash(bytes(self))\n\tclass Seed(object):\n\t    \"\"\"\n\t    Seed input.\n\t    Holds the bytes buffer of the content a status after execution\n\t    but also some metadata of code portions it is meant to cover.\n\t    \"\"\"\n", "    def __init__(self, content: Union[bytes, CompositeData] = bytes(), status=SeedStatus.NEW):\n\t        \"\"\"\n\t        :param content: content of the input. By default is b\"\" *(and is thus considered as a bootstrap seed)*\n\t        :type content: bytes\n\t        :param status: status of the seed if already known\n\t        :type status: SeedStatus\n\t        \"\"\"\n\t        self.content = content\n\t        self.coverage_objectives = set()  # set of coverage items that the seed is meant to cover\n\t        self.meta_fname = []\n", "        self.target = None                # CovItem informational field indicate the item the seed was generated for\n\t        self._status = status\n\t        self._type = SeedFormat.COMPOSITE if isinstance(content, CompositeData) else SeedFormat.RAW\n\t    def is_composite(self) -> bool:\n\t        \"\"\"Returns wether the seed is a composite seed or not. \"\"\"\n\t        return self._type == SeedFormat.COMPOSITE\n\t    def is_raw(self) -> bool:\n\t        \"\"\"Returns wether the seed is a raw seed or not. \"\"\"\n\t        return self._type == SeedFormat.RAW\n\t    def is_bootstrap_seed(self) -> bool:\n", "        \"\"\"\n\t        A bootstrap seed is an empty seed (b\"\"). It will received a\n\t        specific processing in the engine as its size will be automatically\n\t        adapted to the size read (in stdin for instance)\n\t        :return: true if the seed is a bootstrap seed\n\t        \"\"\"\n\t        return self.content == b\"\"\n\t    def is_fresh(self) -> bool:\n\t        \"\"\"\n\t        A fresh seed is never been executed. Its is recognizable\n", "        as it does not contain any coverage objectives.\n\t        :return: True if the seed has never been executed\n\t        \"\"\"\n\t        return not self.coverage_objectives\n\t    @property\n\t    def status(self) -> SeedStatus:\n\t        \"\"\"\n\t        Status of the seed.\n\t        :rtype: SeedStatus\n\t        \"\"\"\n", "        return self._status\n\t    @property\n\t    def format(self) -> SeedFormat:\n\t        \"\"\"\n\t        Format of the seed.\n\t        :rtype: SeedFormat\n\t        \"\"\"\n\t        return self._type\n\t    @status.setter\n\t    def status(self, value: SeedStatus) -> None:\n", "        \"\"\" Sets the status of the seed \"\"\"\n\t        self._status = value\n\t    def is_status_set(self) -> bool:\n\t        \"\"\" Checks whether a status has already been assigned to the seed. \"\"\"\n\t        return self.status != SeedStatus.NEW\n\t    def __len__(self) -> int:\n\t        \"\"\"\n\t        Size of the content of the seed.\n\t        :rtype: int\n\t        \"\"\"\n", "        return len(bytes(self.content))\n\t    def __eq__(self, other) -> bool:\n\t        \"\"\"\n\t        Equality check based on content.\n\t        :returns: true if content of both seeds are equal \"\"\"\n\t        return self.content == other.content\n\t    def bytes(self) -> bytes:\n\t        return bytes(self)\n\t    def __bytes__(self) -> bytes:\n\t        \"\"\"\n", "        Return a representation of the seed's content in bytes.\n\t        :rtype: bytes\n\t        \"\"\"\n\t        return bytes(self.content)\n\t    def __hash__(self):\n\t        \"\"\"\n\t        Seed hash function overriden to base itself on content.\n\t        That enable storing seed in dictionnaries directly based\n\t        on their content to discriminate them.\n\t        :rtype: int\n", "        \"\"\"\n\t        return hash(self.content)\n\t    @property\n\t    def hash(self) -> str:\n\t        \"\"\"\n\t        MD5 hash of the seed content\n\t        :rtype: str\n\t        \"\"\"\n\t        m = hashlib.md5(bytes(self))\n\t        return m.hexdigest()\n", "    @property\n\t    def size(self) -> int:\n\t        \"\"\"\n\t        Size of the seed content in bytes\n\t        :rtype: int\n\t        \"\"\"\n\t        return len(bytes(self))\n\t    @property\n\t    def filename(self):\n\t        \"\"\"\n", "        Standardized filename based on hash and size.\n\t        That does not mean the file exists or anything.\n\t        :returns: formatted intended filename of the seed\n\t        :rtype: str\n\t        \"\"\"\n\t        return f\"{self.hash}_{self.size:04x}_{'_'.join(self.meta_fname)}.tritondse.cov\"\n\t    @staticmethod\n\t    def from_bytes(raw_seed: bytes, status: SeedStatus = SeedStatus.NEW) -> 'Seed':\n\t        \"\"\"\n\t        Parse a seed from its byte representation. If its a composite one\n", "        it will parse the bytes as JSON and create the CompositeData accordingly.\n\t        :param raw_seed: bytes: raw bytes of the seed\n\t        :param status: status of the seed if any, otherwise :py:obj:`SeedStatus.NEW`\n\t        :type status: SeedStatus\n\t        :returns: fresh seed instance\n\t        :rtype: Seed\n\t        \"\"\"\n\t        try:\n\t            data = json.loads(raw_seed)\n\t            if not isinstance(data, dict):  # it might happen that files contains only digit which is a valid JSON\n", "                return Seed(raw_seed, status)\n\t            if 'files' in data and 'argv' in data:\n\t                return Seed(CompositeData.from_dict(data), status)\n\t            else:  # Else still consider file as raw bytes\n\t                return Seed(raw_seed, status)\n\t        except (json.JSONDecodeError, UnicodeDecodeError):\n\t            return Seed(raw_seed, status)\n\t    @staticmethod\n\t    def from_file(path: PathLike, status: SeedStatus = SeedStatus.NEW) -> 'Seed':\n\t        \"\"\"\n", "        Read a seed from a file. The status can optionally given\n\t        as it cannot be determined from the file.\n\t        :param path: seed path\n\t        :type path: :py:obj:`tritondse.types.PathLike`\n\t        :param status: status of the seed if any, otherwise :py:obj:`SeedStatus.NEW`\n\t        :type status: SeedStatus\n\t        :returns: fresh seed instance\n\t        :rtype: Seed\n\t        \"\"\"\n\t        raw = Path(path).read_bytes()\n", "        seed = Seed.from_bytes(raw, status)\n\t        # Parse filename to extract back metadata if any\n\t        name = Path(path).name\n\t        if name.endswith(\".tritondse.cov\"):\n\t            name = name.replace(\".tritondse.cov\", \"\")\n\t        metas = name.split(\"_\")\n\t        if len(metas) >= 4:\n\t            seed.meta_fname = metas[3:]\n\t        return seed\n\t    # Utility function for composite seeds\n", "    def is_file_defined(self, name: str) -> bool:\n\t        if self.is_composite():\n\t            return name in self.content.files\n\t        else:\n\t            return False\n\t    def get_file_input(self, name: str) -> bytes:\n\t        \"\"\"\n\t        Return the bytes associated to a given file within\n\t        a composite seed.\n\t        :raise KeyError: if the name cannot be found in the seed.\n", "        :param name: name of the file to retrieve\n\t        :return: bytes of the file content\n\t        \"\"\"\n\t        return self.content.files[name]\n"]}
{"filename": "tritondse/qbdi_trace.py", "chunked_list": ["# This script is used by pyqbdipreload to generate a json file that can be parsed with CoverageSingleRun.from_json\n\t# This needs to be fast which is why we cannot import tritondse and generate the CoverageSingleRun directly \n\t# (`import tritondse` adds ~0.3 s to the execution time of the script in my experience).\n\t# built-in modules\n\timport atexit\n\timport bisect\n\timport ctypes\n\timport ctypes.util\n\timport json\n\timport lief\n", "import os\n\timport sys\n\timport time\n\tfrom collections import Counter\n\tfrom dataclasses import dataclass\n\tfrom typing import List, Optional, Tuple, Dict\n\t# Third-party modules\n\timport pyqbdi\n\tsetjmp_data = {}\n\tlibdl = None\n", "class Dl_info(ctypes.Structure):\n\t    _fields_ = [\n\t        ('dli_fname', ctypes.c_char_p),\n\t        ('dli_fbase', ctypes.c_void_p),\n\t        ('dli_sname', ctypes.c_char_p),\n\t        ('dli_saddr', ctypes.c_void_p)\n\t    ]\n\tdef dladdr(addr):\n\t    res = Dl_info()\n\t    libdl.dladdr(ctypes.cast(addr, ctypes.c_void_p), ctypes.byref(res))\n", "    return res.dli_sname\n\tdef is_symbol(name, addr):\n\t    sname = dladdr(addr)\n\t    sname = sname.decode() if sname else \"\"\n\t    return sname == name\n\tdef hook_post_setjmp(vm, state, gpr, fpr, data):\n\t    setjmp_data[data]['rip'] = gpr.rip\n\t    if setjmp_data[data]['setjmp_cbk_id'] is not None:\n\t        vm.deleteInstrumentation(setjmp_data[data]['setjmp_cbk_id'])\n\t        setjmp_data[data]['setjmp_cbk_id'] = None\n", "    return pyqbdi.CONTINUE\n\tdef hook_post_longjmp(vm, state, gpr, fpr, data):\n\t    if data in setjmp_data:\n\t        gpr.rip = setjmp_data[data]['rip']\n\t    else:\n\t        print(f'[FATAL] longjmp arg ({data:x}) not found!')\n\t        sys.exit(-1)\n\t    if setjmp_data[data]['longjmp_cbk_id'] is not None:\n\t        vm.deleteInstrumentation(setjmp_data[data]['longjmp_cbk_id'])\n\t        setjmp_data[data]['longjmp_cbk_id'] = None\n", "    return pyqbdi.CONTINUE\n\tdef handle_exec_transfer_call(vm, state, gpr, fpr, data):\n\t    if is_symbol(\"_setjmp\", gpr.rip):\n\t        arg1 = gpr.rdi      # get env argument.\n\t        setjmp_data[arg1] = {}\n\t        setjmp_data[arg1]['setjmp_cbk_id'] = vm.addVMEventCB(pyqbdi.EXEC_TRANSFER_RETURN, hook_post_setjmp, arg1)\n\t    elif is_symbol(\"longjmp\", gpr.rip):\n\t        arg1 = gpr.rdi      # get env argument.\n\t        setjmp_data[arg1]['longjmp_cbk_id'] = vm.addVMEventCB(pyqbdi.EXEC_TRANSFER_RETURN, hook_post_longjmp, arg1)\n\t    return pyqbdi.CONTINUE\n", "@dataclass\n\tclass CoverageTrace:\n\t    strategy: str  # BLOCK, EDGE, etc..\n\t    covered_instructions: Counter\n\t    covered_items: List[Tuple[int, int, Optional[int]]]\n\t    modules: Dict[str, int]\n\t    trace: List[int]\n\t@dataclass\n\tclass CoverageData:\n\t    strategy: str  # BLOCK, EDGE, etc..\n", "    branch_data: Optional[Tuple[int, int, int, bool, bool]]  # (temporary data): branch pc, true-branch, false-branch, is_taken, is_dynamic\n\t    trace: CoverageTrace\n\t    modules_base: List[int]\n\t    pie: bool\n\t    dump_trace: bool\n\t    def to_relative(self, addr: int) -> int:\n\t        if self.pie:\n\t            return addr - self.modules_base[bisect.bisect_right(self.modules_base, addr)-1]\n\t        else:\n\t            return addr\n", "def get_modules() -> Dict[str, int]:\n\t    \"\"\" Retrieve modules base address to remove ASLR. \"\"\"\n\t    modules = {}\n\t    for m in pyqbdi.getCurrentProcessMaps(True):\n\t        if m.name in modules:\n\t            modules[m.name] = min(m.range[0], modules[m.name])\n\t        else:\n\t            modules[m.name] = m.range[0]\n\t        # print(f\"{m.name}: {m.range}, {m.permission}\")\n\t    return modules\n", "def get_module_bases() -> List[int]:\n\t    \"\"\" Retrieve modules base address to remove ASLR. \"\"\"\n\t    return sorted(get_modules().values())\n\tdef write_coverage(covdata: CoverageData, output_file: str):\n\t    \"\"\"Write coverage into a file.\n\t    \"\"\"\n\t    data = {\n\t        \"coverage_strategy\": covdata.trace.strategy,\n\t        \"covered_instructions\": covdata.trace.covered_instructions,\n\t        \"covered_items\": covdata.trace.covered_items,\n", "        \"trace\": covdata.trace.trace,\n\t        \"modules_base\": covdata.trace.modules\n\t    }\n\t    with open(output_file, \"w\") as fd:\n\t        json.dump(data, fd)\n\tdef register_instruction_coverage(vm, gpr, fpr, data: CoverageData):\n\t    # inst_analysis = vm.getInstAnalysis(type=pyqbdi.AnalysisType.ANALYSIS_INSTRUCTION)\n\t    # Save instruction covered\n\t    rel_rip = data.to_relative(gpr.rip)\n\t    data.trace.covered_instructions[rel_rip] += 1  # change to be portable\n", "    if data.dump_trace:\n\t        # Also save the trace\n\t        data.trace.trace.append(rel_rip)\n\t    return pyqbdi.CONTINUE\n\tdef register_basic_block_coverage(vm, evt, gpr, fpr, data: CoverageData):\n\t    addr = evt.basicBlockStart\n\t    # Process branch data in case there is one pending.\n\t    if data.branch_data:\n\t        # Unpack branch data.\n\t        branch_addr, true_branch_addr, false_branch_addr, is_taken, is_dynamic = data.branch_data\n", "        br_a, true_a, false_a = data.to_relative(branch_addr), data.to_relative(true_branch_addr), data.to_relative(false_branch_addr)\n\t        # Check if the branch was taken.\n\t        taken_a, not_taken_a = (true_a, false_a) if bool(addr == true_branch_addr) else (false_a, true_a)\n\t        if is_dynamic:\n\t            data.trace.covered_items.append((br_a, taken_a, None))\n\t        else:\n\t            data.trace.covered_items.append((br_a, taken_a, not_taken_a))\n\t        # Clear branch data for next occurrence.\n\t        data.branch_data = None\n\t    else:\n", "        pass\n\t        # FIXME: There is a problem in that script is_dynamic can never be true !\n\t        # FIXME: as it's never set to true. I feel like the else here is the case where its dynamic?\n\t    return pyqbdi.CONTINUE\n\tdef register_branch_coverage(vm, gpr, fpr, data):\n\t    inst_analysis = vm.getInstAnalysis(type=pyqbdi.AnalysisType.ANALYSIS_INSTRUCTION | pyqbdi.AnalysisType.ANALYSIS_OPERANDS)\n\t    operand = inst_analysis.operands[0]\n\t    branch_addr = inst_analysis.address\n\t    false_branch_addr = inst_analysis.address + inst_analysis.instSize\n\t    if operand.type == pyqbdi.OperandType.OPERAND_IMM:\n", "        # FIXME: Isn't it assuming the jump is relative ?\n\t        true_branch_addr = inst_analysis.address + inst_analysis.instSize + ctypes.c_longlong(operand.value).value\n\t    else:\n\t        raise Exception('Invalid operand type')\n\t    # Save current branch data\n\t    data.branch_data = (branch_addr, true_branch_addr, false_branch_addr, None, False)\n\t    return pyqbdi.CONTINUE\n\tdef pyqbdipreload_on_run(vm, start, stop):\n\t    global libdl\n\t    s = time.time()\n", "    # Load dl library.\n\t    libdl_path = ctypes.util.find_library('dl')\n\t    if libdl_path is None:\n\t        raise Exception('Unable to found dl library')\n\t    libdl = ctypes.cdll.LoadLibrary(libdl_path)\n\t    libdl.dladdr.argtypes = (ctypes.c_void_p, ctypes.POINTER(Dl_info))\n\t    # Read parameters.\n\t    strat = os.getenv('PYQBDIPRELOAD_COVERAGE_STRATEGY', 'BLOCK')\n\t    output = os.getenv('PYQBDIPRELOAD_OUTPUT_FILEPATH', 'a.cov')\n\t    bool_trace = os.getenv('PYQBDIPRELOAD_DUMP_TRACE', 'False')\n", "    bool_trace = True if bool_trace in ['true', 'True'] else False\n\t    mods = get_modules()\n\t    base_addresses = sorted(get_modules().values())\n\t    covtrace = CoverageTrace(strat, Counter(), [], mods, [])\n\t    # Open binary in LIEF to check if PIE or not\n\t    p = lief.parse(sys.argv[0])\n\t    coverage_data = CoverageData(strat, None, covtrace, base_addresses, p.is_pie, bool_trace)\n\t    # Remove all instrumented modules except the main one.\n\t    vm.removeAllInstrumentedRanges()\n\t    vm.addInstrumentedModuleFromAddr(start)\n", "    if coverage_data.strategy == 'BLOCK' or bool_trace:\n\t        # Add callback on instruction execution.\n\t        vm.addCodeCB(pyqbdi.PREINST, register_instruction_coverage, coverage_data)\n\t    # Add callback on basic block entry.\n\t    vm.addVMEventCB(pyqbdi.BASIC_BLOCK_ENTRY, register_basic_block_coverage, coverage_data)\n\t    # Add callback on the JCC mnemonic.\n\t    vm.addMnemonicCB('JCC', pyqbdi.InstPosition.POSTINST, register_branch_coverage, coverage_data)\n\t    # Write coverage on exit.\n\t    # TODO This does not work with bins that crash.\n\t    atexit.register(write_coverage, coverage_data, output)\n", "    # Add callback for handling calls to functions setjmp and longjmp.\n\t    vm.addVMEventCB(pyqbdi.EXEC_TRANSFER_CALL, handle_exec_transfer_call, None)\n\t    # Run program.\n\t    print(\"Run start\")\n\t    vm.run(start, stop)\n\t    print(f\"Run finished: {time.time() - s:.02f}s\")\n"]}
{"filename": "tritondse/process_state.py", "chunked_list": ["# built-ins\n\tfrom __future__ import annotations\n\timport io\n\timport struct\n\timport sys\n\timport time\n\tfrom typing import Union, Callable, Tuple, Optional, List, Dict\n\t# third-party\n\t# import z3  # For direct value enumeration\n\tfrom triton import TritonContext, MemoryAccess, CALLBACK, CPUSIZE, Instruction, MODE, AST_NODE, SOLVER, EXCEPTION\n", "# local imports\n\tfrom tritondse.thread_context import ThreadContext\n\tfrom tritondse.heap_allocator import HeapAllocator\n\tfrom tritondse.types import Architecture, Addr, ByteSize, BitSize, PathConstraint, Register, Expression, \\\n\t                            AstNode, Registers, SolverStatus, Model, SymbolicVariable, ArchMode, Perm, FileDesc, Endian\n\tfrom tritondse.arch import ARCHS, CpuState\n\tfrom tritondse.loaders import Loader\n\tfrom tritondse.memory import Memory, MemoryAccessViolation\n\timport tritondse.logging\n\tlogger = tritondse.logging.get()\n", "class ProcessState(object):\n\t    \"\"\"\n\t    Current process state. This class keeps all the runtime related to a running\n\t    process, namely current, instruction, thread, memory maps, file descriptors etc.\n\t    It also wraps Triton execution and thus hold its context. At the top of this,\n\t    it provides a user-friendly API to access data in both the concrete and symbolic\n\t    state of Triton.\n\t    \"\"\"\n\t    STACK_SEG = \"[stack]\"\n\t    EXTERN_SEG = \"[extern]\"\n", "    def __init__(self, endianness: Endian = Endian.LITTLE, time_inc_coefficient: float = 0.0001):\n\t        \"\"\"\n\t        :param endianness: Endianness to consider\n\t        :param time_inc_coefficient: Time coefficient to represent execution time of an\n\t                                     instruction see: :py:attr:`tritondse.Config.time_inc_coefficient`\n\t        \"\"\"\n\t        # EXTERN_BASE is a \"fake\" memory area (not mapped) that will\n\t        # which addresses will be used for external symbols\n\t        self.EXTERN_FUNC_BASE = 0x01000000  # Not PLT but a dummy address space containing pointers to external symbols\n\t        # This range will be dynamically allocated\n", "        # upon request.\n\t        self.BASE_HEAP = 0x10000000\n\t        self.END_HEAP = 0x6fffffff\n\t        # The Triton's context\n\t        self.tt_ctx = TritonContext()\n\t        \"\"\"TritonContext object\"\"\"\n\t        self.actx: 'AstContext' = self.tt_ctx.getAstContext()\n\t        \"\"\"\n\t        Triton `AstContext <https://triton-library.github.io/documentation/doxygen/py_AstContext_page.html>`_\n\t        enabling crafting logical expressions to be solved by SMT\n", "        \"\"\"\n\t        # Cpu object wrapping registers values\n\t        self.cpu: CpuState = None  #: CpuState holding concrete values of registers *(initialized when calling load)*\n\t        self._archinfo = None\n\t        # Memory object\n\t        self.memory: Memory = Memory(self.tt_ctx, endianness)\n\t        \"\"\"Memory object associated with the ProcessState \"\"\"\n\t        # Used to define that the process must exist\n\t        self.stop = False\n\t        # Signals table used by raise(), signal(), etc.\n", "        #self.signals_table = dict()\n\t        # Dynamic symbols name -> addr (where they are mapped)\n\t        self.dynamic_symbol_table: Dict[str, Tuple[Addr, bool]] = {}\n\t        \"\"\"Dictionnary of dynamic symbols as retrieved during the loading\"\"\"\n\t        # File descriptors table used by fopen(), fprintf(), etc.\n\t        self._fd_table = {\n\t            0: FileDesc(0, \"stdin\", sys.stdin),\n\t            1: FileDesc(1, \"stdout\", sys.stdout),\n\t            2: FileDesc(2, \"stderr\", sys.stderr),\n\t        }\n", "        # Unique file id incrementation\n\t        self._fd_id = len(self._fd_table)\n\t        # Allocation information used by malloc()\n\t        self.heap_allocator: HeapAllocator = HeapAllocator(self.BASE_HEAP, self.END_HEAP, self.memory)\n\t        \"\"\"Allocator providing alloc, free primitives atop the Memory object\"\"\"\n\t        # Unique thread id incrementation\n\t        self._utid = 0\n\t        # Current thread id\n\t        self._tid = self._utid\n\t        # Threads contexts\n", "        self._threads = {\n\t            self._tid: ThreadContext(self._tid)\n\t        }\n\t        # Thread mutext init magic number\n\t        self.PTHREAD_MUTEX_INIT_MAGIC = 0xdead\n\t        # Mutex and semaphore\n\t        self.mutex_locked = False\n\t        self.semaphore_locked = False\n\t        # The time when the ProcessState is instancied.\n\t        # It's used to provide a deterministic behavior when calling functions\n", "        # like gettimeofday(), clock_gettime(), etc.\n\t        self.time = time.time()\n\t        # Configuration values\n\t        self.endianness = endianness  #: Current endianness\n\t        self.time_inc_coefficient = time_inc_coefficient\n\t        # Runtime temporary variables\n\t        self.__pcs_updated = False\n\t        # The current instruction executed\n\t        self.__current_inst = None\n\t        # The memory mapping of the program ({vaddr_s : vaddr_e})\n", "        self.__program_segments_mapping = {}\n\t    @property\n\t    def threads(self) -> List[ThreadContext]:\n\t        \"\"\"\n\t        Gives a list of all threads currently active.\n\t        :return:\n\t        \"\"\"\n\t        return list(self._threads.values())\n\t    @property\n\t    def current_thread(self) -> ThreadContext:\n", "        \"\"\"\n\t        Gives the current thread selected.\n\t        :return: current thread\n\t        :rtype: ThreadContext\n\t        \"\"\"\n\t        return self._threads[self._tid]\n\t    def switch_thread(self, thread: ThreadContext) -> bool:\n\t        \"\"\"\n\t        Change the current thread to the one given in parameter.\n\t        Thus save the current context, and restore the one of the\n", "        thread given in parameter. It also resets the counter of\n\t        the thread restored. If the current_thread is dead, it will\n\t        also remove it !\n\t        :param thread: thread to restore ThreadContext\n\t        :return: True if the switch worked fine\n\t        \"\"\"\n\t        assert (thread.tid in self._threads)\n\t        try:\n\t            if self.current_thread.is_dead():\n\t                del self._threads[self._tid]\n", "                # TODO: Finding all other threads joining it / (or locked by it ?) to unlock them\n\t            else:  # Do a normal switch\n\t                # Reset the counter and save its context\n\t                self.current_thread.save(self.tt_ctx)\n\t            # Schedule to the next thread\n\t            thread.count = 0  # Reset the counter\n\t            thread.restore(self.tt_ctx)\n\t            self._tid = thread.tid\n\t            return True\n\t        except Exception as e:\n", "            logger.error(f\"Error while doing context switch: {e}\")\n\t            return False\n\t    def spawn_new_thread(self, new_pc: Addr, args: Addr) -> ThreadContext:\n\t        \"\"\"\n\t        Create a new thread in the process state. Parameters are the\n\t        new program counter and a pointer to arguments to provide the thread.\n\t        :param new_pc: new program counter (function to execution)\n\t        :param args: arguments\n\t        :return: thread context newly created\n\t        \"\"\"\n", "        tid = self._get_unique_thread_id()\n\t        thread = ThreadContext(tid)\n\t        thread.save(self.tt_ctx)\n\t        # Concretize pc, bp, sp, and first (argument)\n\t        regs = [self.program_counter_register, self.stack_pointer_register, self.base_pointer_register, self._get_argument_register(0)]\n\t        for reg in regs:\n\t            if reg.getId() in thread.sregs:\n\t                del thread.sregs[reg.getId()]\n\t        thread.cregs[self.program_counter_register.getId()] = new_pc  # set new pc\n\t        thread.cregs[self._get_argument_register(0).getId()] = args   # set args pointer\n", "        stack = self.memory.map_from_name(self.STACK_SEG)\n\t        thread.cregs[self.base_pointer_register.getId()] = ((stack.start+stack.size) - ((1 << 28) * tid))\n\t        thread.cregs[self.stack_pointer_register.getId()] = ((stack.start+stack.size) - ((1 << 28) * tid))\n\t        # Add the thread in the pool of threads\n\t        self._threads[tid] = thread\n\t        return thread\n\t    def set_triton_mode(self, mode: MODE, value: int = True) -> None:\n\t        \"\"\"\n\t        Set the given mode in the TritonContext.\n\t        :param mode: mode to set in triton context\n", "        :param value: value to set (default True)\n\t        \"\"\"\n\t        self.tt_ctx.setMode(mode, value)\n\t    def set_thumb(self, enable: bool) -> None:\n\t        \"\"\"\n\t        Set thumb mode activated in the TritonContext. The mode will automatically\n\t        be switched during execution, but at initialization this method enable\n\t        activating it / disabling it. (Disabled be default)\n\t        :param enable: bool: Wether or not to active thumb\n\t        \"\"\"\n", "        self.tt_ctx.setThumb(enable)\n\t    def set_solver_timeout(self, timeout: int) -> None:\n\t        \"\"\"\n\t        Set the timeout for all subsequent queries.\n\t        :param timeout: timeout in milliseconds\n\t        \"\"\"\n\t        self.tt_ctx.setSolverTimeout(timeout)\n\t    def set_solver(self, solver: Union[str, SOLVER]) -> None:\n\t        \"\"\"\n\t        Set the SMT solver to use in the background.\n", "        :param solver: Solver to use\n\t        \"\"\"\n\t        if isinstance(solver, str):\n\t            solver = getattr(SOLVER, solver.upper(), SOLVER.Z3)\n\t        self.tt_ctx.setSolver(solver)\n\t    def _get_unique_thread_id(self) -> int:\n\t        \"\"\"\n\t        Return a new unique thread id. Used by thread related functions when spawning a new thread.\n\t        :returns: new thread identifier\n\t        \"\"\"\n", "        self._utid += 1\n\t        return self._utid\n\t    def create_file_descriptor(self, name: str, file: io.IOBase) -> FileDesc:\n\t        \"\"\"\n\t        Create a new file descriptor out of a name.\n\t        :param name: name of the file\n\t        :param file: object to read from\n\t        :return: FileDesc object\n\t        \"\"\"\n\t        new_fd_id = self._fd_id\n", "        self._fd_id += 1\n\t        filedesc = FileDesc(id=new_fd_id, name=name, fd=file)\n\t        self._fd_table[new_fd_id] = filedesc\n\t        return filedesc\n\t    def close_file_descriptor(self, id: int) -> None:\n\t        \"\"\"\n\t        Close the given file descriptor id.\n\t        :param id: id of the file descriptor\n\t        :return: None\n\t        \"\"\"\n", "        filedesc = self._fd_table.pop(id)\n\t        if isinstance(filedesc.fd, io.IOBase):\n\t            filedesc.fd.close()\n\t    def get_file_descriptor(self, id: int) -> FileDesc:\n\t        \"\"\"\n\t        Get the given file descriptor.\n\t        :raise KeyError: if the file descriptor is not found\n\t        :param id: id of the file descriptor\n\t        :return: FileDesc object\n\t        \"\"\"\n", "        return self._fd_table[id]\n\t    def file_descriptor_exists(self, id: int) -> bool:\n\t        \"\"\"\n\t        Returns whether the file descriptor has been defined or not.\n\t        :param id: id of the file descriptor\n\t        :return: True if the id is found\n\t        \"\"\"\n\t        return bool(id in self._fd_table)\n\t    @property\n\t    def architecture(self) -> Architecture:\n", "        \"\"\"\n\t        Architecture of the current process state\n\t        :return: Architecture set\n\t        \"\"\"\n\t        return Architecture(self.tt_ctx.getArchitecture())\n\t    @architecture.setter\n\t    def architecture(self, arch: Architecture) -> None:\n\t        \"\"\"\n\t        Set the architecture of the process state.\n\t        Internal set it in the TritonContext\n", "        :param arch: Architecture to set\n\t        \"\"\"\n\t        self.tt_ctx.setArchitecture(arch)\n\t    @property\n\t    def ptr_size(self) -> ByteSize:\n\t        \"\"\"\n\t        Size of a pointer in bytes\n\t        :rtype: :py:obj:`tritondse.types.ByteSize`\n\t        \"\"\"\n\t        return self.tt_ctx.getGprSize()\n", "    @property\n\t    def ptr_bit_size(self) -> BitSize:\n\t        \"\"\"\n\t        Size of a pointer in bits\n\t        :rtype: :py:obj:`tritondse.types.BitSize`\n\t        \"\"\"\n\t        return self.tt_ctx.getGprBitSize()\n\t    @property\n\t    def minus_one(self) -> int:\n\t        \"\"\"\n", "        Value -1 according to the architecture size (32 or 64 bits)\n\t        :return: -1 as an unsigned Python integer\n\t        \"\"\"\n\t        return (1 << self.ptr_bit_size) - 1\n\t    @property\n\t    def registers(self) -> Registers:\n\t        \"\"\"\n\t        All registers according to the current architecture defined.\n\t        The object returned is the TritonContext.register object.\n\t        :rtype: :py:obj:`tritondse.types.Registers`\n", "        \"\"\"\n\t        return self.tt_ctx.registers\n\t    @property\n\t    def return_register(self) -> Register:\n\t        \"\"\"\n\t        Return the appropriate return register according to the arch.\n\t        :rtype: :py:obj:`tritondse.types.Register`\n\t        \"\"\"\n\t        return getattr(self.registers, self._archinfo.ret_reg)\n\t    @property\n", "    def program_counter_register(self) -> Register:\n\t        \"\"\"\n\t        Return the appropriate pc register according to the arch.\n\t        :rtype: :py:obj:`tritondse.types.Register`\n\t        \"\"\"\n\t        return getattr(self.registers, self._archinfo.pc_reg)\n\t    @property\n\t    def base_pointer_register(self) -> Register:\n\t        \"\"\"\n\t        Return the appropriate base pointer register according to the arch.\n", "        :rtype: :py:obj:`tritondse.types.Register`\n\t        \"\"\"\n\t        return getattr(self.registers, self._archinfo.bp_reg)\n\t    @property\n\t    def stack_pointer_register(self) -> Register:\n\t        \"\"\"\n\t        Return the appropriate stack pointer register according to the arch.\n\t        :rtype: :py:obj:`tritondse.types.Register`\n\t        \"\"\"\n\t        return getattr(self.registers, self._archinfo.sp_reg)\n", "    @property\n\t    def _syscall_register(self) -> Register:\n\t        \"\"\" Return the appropriate syscall id register according to the arch \"\"\"\n\t        return getattr(self.registers, self._archinfo.sys_reg)\n\t    def _get_argument_register(self, i: int) -> Register:\n\t        \"\"\"\n\t        Return the appropriate register according to the arch.\n\t        :raise: IndexError If the index is out of arguments bound\n\t        :return: Register\n\t        \"\"\"\n", "        return getattr(self.registers, self._archinfo.reg_args[i])\n\t    def initialize_context(self, arch: Architecture):\n\t        \"\"\"\n\t        Initialize the context with the given architecture\n\t        .. todo:: Protecting that function\n\t        :param arch: The architecture to initialize\n\t        :type arch: Architecture\n\t        :return: None\n\t        \"\"\"\n\t        self.architecture = arch\n", "        self._archinfo = ARCHS[self.architecture]\n\t        self.cpu = CpuState(self.tt_ctx, self._archinfo)\n\t    def unpack_integer(self, data: bytes, size: int) -> int:\n\t        \"\"\"\n\t        Unpack the given bytes into into integer value respecting\n\t        size given and endianness.\n\t        :param data: bytes data to unpack\n\t        :param size: size in bits of data to unpack\n\t        :return: integer value unpacked\n\t        \"\"\"\n", "        s = \"<\" if self.endianness == Endian.LITTLE else \">\"\n\t        tab = {8: 'B', 16: 'H', 32: 'I', 64: 'Q'}\n\t        s += tab[size]\n\t        return struct.unpack(s, data)[0]\n\t    def pack_integer(self, value: int, size: int) -> bytes:\n\t        \"\"\"\n\t        Unpack the given bytes into into integer value respecting\n\t        size given and endianness.\n\t        :param data: bytes data to unpack\n\t        :param size: size in bits of data to unpack\n", "        :return: integer value packed as bytes\n\t        \"\"\"\n\t        s = \"<\" if self.endianness == Endian.LITTLE else \">\"\n\t        tab = {8: 'B', 16: 'H', 32: 'I', 64: 'Q'}\n\t        s += tab[size]\n\t        return struct.pack(s, value)\n\t    def read_register(self, register: Union[str, Register]) -> int:\n\t        \"\"\"\n\t        Read the current concrete value of the given register.\n\t        :param register: string of the register or Register object\n", "        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        :return: Integer value\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register  # if str transform to reg\n\t        return self.tt_ctx.getConcreteRegisterValue(reg)\n\t    def write_register(self, register: Union[str, Register], value: int) -> None:\n\t        \"\"\"\n\t        Read the current concrete value of the given register.\n\t        :param register: string of the register or Register object\n\t        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n", "        :param value: integer value to assign in the register\n\t        :type value: int\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register  # if str transform to reg\n\t        return self.tt_ctx.setConcreteRegisterValue(reg, value)\n\t    def register_triton_callback(self, cb_type: CALLBACK, callback: Callable) -> None:\n\t        \"\"\"\n\t        Register the given ``callback`` as triton callback to hook memory/registers\n\t        read/writes.\n\t        :param cb_type: Callback enum type as defined by Triton\n", "        :type cb_type: `CALLBACK <https://triton.quarkslab.com/documentation/doxygen/py_CALLBACK_page.html>`_\n\t        :param callback: routines to call on the given event\n\t        \"\"\"\n\t        self.tt_ctx.addCallback(cb_type, callback)\n\t    def clear_triton_callbacks(self) -> None:\n\t        \"\"\"\n\t        Remove all registered callbacks in triton.\n\t        \"\"\"\n\t        self.tt_ctx.clearCallbacks()\n\t    def is_heap_ptr(self, ptr: Addr) -> bool:\n", "        \"\"\"\n\t        Check whether a given address is pointing in the heap area.\n\t        :param ptr: Address to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :return: True if pointer points to the heap area *(allocated or not)*.\n\t        \"\"\"\n\t        if self.BASE_HEAP <= ptr < self.END_HEAP:\n\t            return True\n\t        return False\n\t    def is_syscall(self) -> bool:\n", "        \"\"\"\n\t        Check whether the current instrution fetched is a syscall or not.\n\t        \"\"\"\n\t        return bool(self.current_instruction.getType() in self._archinfo.syscall_inst)\n\t    def fetch_instruction(self, address: Addr = None, set_as_current: bool = True, disable_callbacks: bool = True) -> Instruction:\n\t        \"\"\"\n\t        Fetch the instruction at the given address. If no address\n\t        is specified the current program counter one is used.\n\t        :raise MemoryAccessViolation: If the instruction cannot be fetched in the memory.\n\t        :param address: address where to get the instruction from\n", "        :param set_as_current: set as the current instruction in the process state\n\t        :param disable_callbacks: whether memory callbacks should be disabled to fetch memory bytes\n\t        :return: instruction disassembled\n\t        \"\"\"\n\t        if address is None:\n\t            address = self.cpu.program_counter\n\t        with self.memory.without_segmentation(disable_callbacks=disable_callbacks):\n\t            data = self.memory.read(address, 16)\n\t        i = Instruction(address, data)\n\t        i.setThreadId(self.current_thread.tid)\n", "        self.tt_ctx.disassembly(i)  # This needs to be done before using i.getSize()\n\t                                    # otherwise, i.getSize() will always be 16\n\t        if self.memory.segmentation_enabled:\n\t            map = self.memory.get_map(address, i.getSize())\n\t            if map is None:\n\t                raise MemoryAccessViolation(address, Perm.X, memory_not_mapped=True)\n\t            if Perm.X not in map.perm:  # Note: in this model we can execute code in non-readable pages\n\t                raise MemoryAccessViolation(address, Perm.X, map_perm=map.perm, perm_error=True)\n\t        if set_as_current:\n\t            self.__current_inst = i\n", "        return i\n\t    def process_instruction(self, instruction: Instruction) -> bool:\n\t        \"\"\"\n\t        Process the given triton instruction on this process state.\n\t        :param instruction: Triton Instruction object\n\t        :type instruction: `Instruction <https://triton.quarkslab.com/documentation/doxygen/py_Instruction_page.html>`_\n\t        :return: True if the processing of the instruction succeeded (False otherwise)\n\t        \"\"\"\n\t        self.__pcs_updated = False\n\t        __len_pcs = self.tt_ctx.getPathPredicateSize()\n", "        if not instruction.getDisassembly():  # If the insrtuction has not been disassembled\n\t            self.tt_ctx.disassembly(instruction)\n\t        self.__current_inst = instruction\n\t        ret = self.tt_ctx.buildSemantics(instruction)\n\t        # Simulate that the time of an executed instruction is time_inc_coefficient.\n\t        # For example, if time_inc_coefficient is 0.0001, it means that an instruction\n\t        # takes 100us to be executed. Used to provide a deterministic behavior when\n\t        # calling time functions (e.g gettimeofday(), clock_gettime(), ...).\n\t        self.time += self.time_inc_coefficient\n\t        if self.tt_ctx.getPathPredicateSize() > __len_pcs:\n", "            self.__pcs_updated = True\n\t        return ret == EXCEPTION.NO_FAULT\n\t    @property\n\t    def path_predicate_size(self) -> int:\n\t        \"\"\"\n\t        Get the size of the path predicate (conjonction\n\t        of all branches and additionnals constraints added)\n\t        :return: size of the predicate\n\t        \"\"\"\n\t        return self.tt_ctx.getPathPredicateSize()\n", "    def is_path_predicate_updated(self) -> bool:\n\t        \"\"\" Return whether or not the path predicate has been updated \"\"\"\n\t        return self.__pcs_updated\n\t    @property\n\t    def last_branch_constraint(self) -> PathConstraint:\n\t        \"\"\"\n\t        Return the last PathConstraint object added in the path predicate.\n\t        Should be called after :py:meth:`is_path_predicate_updated`.\n\t        :raise IndexError: if the path predicate is empty\n\t        :return: the path constraint object as returned by Triton\n", "        :rtype: `PathConstraint <https://triton.quarkslab.com/documentation/doxygen/py_PathConstraint_page.html>`_\n\t        \"\"\"\n\t        return self.tt_ctx.getPathConstraints()[-1]\n\t    @property\n\t    def current_instruction(self) -> Optional[Instruction]:\n\t        \"\"\"\n\t        The current instruction being executed. *(None if not set yet)*\n\t        :rtype: Optional[`Instruction <https://triton.quarkslab.com/documentation/doxygen/py_Instruction_page.html>`_]\n\t        \"\"\"\n\t        return self.__current_inst\n", "    def is_register_symbolic(self, register: Union[str, Register]) -> bool:\n\t        \"\"\"\n\t        Check whether the register is symbolic or not.\n\t        :param register: register string, or Register object\n\t        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        :return: True if the register is symbolic\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register\n\t        return self.tt_ctx.getRegisterAst(reg).isSymbolized()\n\t    def read_symbolic_register(self, register: Union[str, Register]) -> Expression:\n", "        \"\"\"\n\t        Get the symbolic expression associated with the given register.\n\t        :param register: register string, or Register object\n\t        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        :return: SymbolicExpression of the register as returned by Triton\n\t        :rtype: `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register  # if str transform to reg\n\t        sym_reg = self.tt_ctx.getSymbolicRegister(reg)\n\t        if sym_reg is None or reg.getBitSize() != sym_reg.getAst().getBitvectorSize():\n", "            return self.tt_ctx.newSymbolicExpression(self.tt_ctx.getRegisterAst(reg))\n\t        else:\n\t            return sym_reg\n\t    def write_symbolic_register(self, register: Union[str, Register], expr: Union[AstNode, Expression], comment: str = \"\") -> None:\n\t        \"\"\"\n\t        Assign the given symbolic expression to the register. The given expression can either be a SMT AST node\n\t        or directly an Expression (SymbolicExpression).\n\t        :param register: register identifier (str or Register)\n\t        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        :param expr: expression to assign (`AstNode <https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_\n", "               or `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)\n\t        :param comment: Comment to add on the symbolic expression created\n\t        :type comment: str\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register  # if str transform to reg\n\t        exp = expr if hasattr(expr, \"getAst\") else self.tt_ctx.newSymbolicExpression(expr, f\"assign {reg.getName()}: {comment}\")\n\t        self.write_register(reg, exp.getAst().evaluate())  # Update concrete state to keep sync\n\t        self.tt_ctx.assignSymbolicExpressionToRegister(exp, reg)\n\t    def read_symbolic_memory_int(self, addr: Addr, size: ByteSize) -> Expression:\n\t        \"\"\"\n", "        Return a new Symbolic Expression representing the whole memory range given in parameter.\n\t        That function should not be used on big memory chunks.\n\t        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: memory size in bytes\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        :raise RuntimeError: If the size if not aligned\n\t        :return: Symbolic Expression associated with the memory\n\t        :rtype: `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_\n\t        \"\"\"\n", "        if size == 1:\n\t            return self.read_symbolic_memory_byte(addr)\n\t        elif size in [2, 4, 8, 16, 32, 64]:\n\t            ast = self.tt_ctx.getMemoryAst(MemoryAccess(addr, size))\n\t            return self.tt_ctx.newSymbolicExpression(ast)\n\t        else:\n\t            raise RuntimeError(\"size should be aligned [1, 2, 4, 8, 16, 32, 64] (bytes)\")\n\t    def read_symbolic_memory_byte(self, addr: Addr) -> Expression:\n\t        \"\"\"\n\t        Thin wrapper to retrieve the symbolic expression of a single bytes in memory.\n", "        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :return: Symbolic Expression associated with the memory\n\t        :rtype: `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_\n\t        \"\"\"\n\t        res = self.tt_ctx.getSymbolicMemory(addr)\n\t        if res is None:\n\t            return self.tt_ctx.newSymbolicExpression(self.tt_ctx.getMemoryAst(MemoryAccess(addr, 1)))\n\t        else:\n\t            return res\n", "    def read_symbolic_memory_bytes(self, addr: Addr, size: ByteSize) -> Expression:\n\t        \"\"\"\n\t        Return a new Symbolic Expression representing the whole memory range given in parameter.\n\t        That function should not be used on big memory chunks.\n\t        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: memory size in bytes\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        :return: Symbolic Expression associated with the memory\n\t        :rtype: `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_\n", "        \"\"\"\n\t        if size == 1:\n\t            return self.read_symbolic_memory_byte(addr)\n\t        else:  # Need to create a per-byte expression with concat\n\t            asts = [self.tt_ctx.getMemoryAst(MemoryAccess(addr+i, CPUSIZE.BYTE)) for i in range(size)]\n\t            concat_expr = self.actx.concat(asts)\n\t            return self.tt_ctx.newSymbolicExpression(concat_expr)\n\t    def write_symbolic_memory_int(self, addr: Addr, size: ByteSize, expr: Union[AstNode, Expression]) -> None:\n\t        \"\"\"\n\t        Assign the given symbolic expression representing an integer to the given address.\n", "        That function should not be used on big memory chunks.\n\t        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: memory size in bytes\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        :param expr: expression to assign (`AstNode <https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_\n\t                     or `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)\n\t        :raise RuntimeError: if the size if not aligned\n\t        \"\"\"\n\t        expr = expr if hasattr(expr, \"getAst\") else self.tt_ctx.newSymbolicExpression(expr, f\"assign memory\")\n", "        if size in [1, 2, 4, 8, 16, 32, 64]:\n\t            self.tt_ctx.setConcreteMemoryValue(MemoryAccess(addr, size), expr.getAst().evaluate())  # To keep the concrete state synchronized\n\t            self.tt_ctx.assignSymbolicExpressionToMemory(expr, MemoryAccess(addr, size))\n\t        else:\n\t            raise RuntimeError(\"size should be aligned [1, 2, 4, 8, 16, 32, 64] (bytes)\")\n\t    def write_symbolic_memory_byte(self, addr: Addr, expr: Union[AstNode, Expression]) -> None:\n\t        \"\"\"\n\t        Set a single bytes symbolic at the given address\n\t        .. NOTE: We purposefully not provide a way to assign in memory a symbolic expression of\n\t           arbitrary size as it would imply doing many extract on the given expression. For buffer\n", "           you should do it in a per-byte manner with this method.\n\t        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param expr: byte expression to assign (`AstNode <https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_\n\t                     or `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_)\n\t        \"\"\"\n\t        expr = expr if hasattr(expr, \"getAst\") else self.tt_ctx.newSymbolicExpression(expr, f\"assign memory\")\n\t        ast = expr.getAst()\n\t        assert ast.getBitvectorSize() == 8\n\t        self.tt_ctx.setConcreteMemoryValue(MemoryAccess(addr, CPUSIZE.BYTE), ast.evaluate())  # Keep concrete state synced\n", "        self.tt_ctx.assignSymbolicExpressionToMemory(expr, MemoryAccess(addr, CPUSIZE.BYTE))\n\t    def is_memory_symbolic(self, addr: Addr, size: ByteSize) -> bool:\n\t        \"\"\"\n\t        Iterate the symbolic memory and returns whether or not at least one byte of the buffer\n\t        is symbolic\n\t        :param addr: Memory address\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: size of the memory range to check\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        :return: True if at least one byte of the memory is symbolic, false otherwise\n", "        \"\"\"\n\t        for i in range(addr, addr+size):\n\t            if self.tt_ctx.isMemorySymbolized(MemoryAccess(i, 1)):\n\t                return True\n\t        return False\n\t    def push_constraint(self, constraint: AstNode, comment: str = \"\") -> None:\n\t        \"\"\"\n\t        Thin wrapper on the triton context underneath to add a path constraint.\n\t        :param constraint: Constraint expression to add\n\t        :type constraint: `AstNode <https://triton.quarkslab.com/documentation/doxygen/py_AstNode_page.html>`_\n", "        :param comment: String comment to attach to the constraint\n\t        :type comment: str\n\t        \"\"\"\n\t        self.tt_ctx.pushPathConstraint(constraint, comment)\n\t    def get_path_constraints(self) -> List[PathConstraint]:\n\t        \"\"\"\n\t        Get the list of all path constraints set in the Triton context.\n\t        :return: list of constraints\n\t        \"\"\"\n\t        return self.tt_ctx.getPathConstraints()\n", "    def concretize_register(self, register: Union[str, Register]) -> None:\n\t        \"\"\"\n\t        Concretize the given register with its current concrete value.\n\t        **This operation is sound** as it will also add a path constraint\n\t        to enforce that the symbolic register value is equal to its concrete\n\t        value.\n\t        :param register: Register identifier (str or Register)\n\t        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register\n", "        if self.tt_ctx.isRegisterSymbolized(reg):\n\t            value = self.read_register(reg)\n\t            self.push_constraint(self.read_symbolic_register(reg).getAst() == value)\n\t        # Else do not even push the constraint\n\t    def concretize_memory_bytes(self, addr: Addr, size: ByteSize) -> None:\n\t        \"\"\"\n\t        Concretize the given memory with its current concrete value.\n\t        **This operation is sound** and allows restraining the memory\n\t        value to its constant value.\n\t        :param addr: Address to concretize\n", "        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Size of the integer to concretize\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        \"\"\"\n\t        data = self.memory.read(addr, size)\n\t        if self.is_memory_symbolic(addr, size):\n\t            self.push_constraint(self.read_symbolic_memory_bytes(addr, size).getAst() == data)\n\t        # else do not even push the constraint\n\t    def concretize_memory_int(self, addr: Addr, size: ByteSize) -> None:\n\t        \"\"\"\n", "        Concretize the given memory with its current concrete value.\n\t        **This operation is sound** and allows restraining the memory\n\t        value to its constant value.\n\t        :param addr: Address to concretize\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Size of the integer to concretize\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        \"\"\"\n\t        value = self.memory.read_uint(addr, size)\n\t        if self.tt_ctx.isMemorySymbolized(MemoryAccess(addr, size)):\n", "            self.push_constraint(self.read_symbolic_memory_int(addr, size).getAst() == value)\n\t        # else do not even push the constraint\n\t    def concretize_argument(self, index: int) -> None:\n\t        \"\"\"\n\t        Concretize the given function parameter following the calling convention\n\t        of the architecture.\n\t        :param index: Argument index\n\t        :type index: int\n\t        \"\"\"\n\t        try:\n", "            self.concretize_register(self._get_argument_register(index))\n\t        except IndexError:\n\t            len_args = len(self._archinfo.reg_args)\n\t            addr = self.cpu.stack_pointer + self.ptr_size + ((index-len_args) * self.ptr_size)  # Retrieve stack address\n\t            self.concretize_memory_int(addr, self.ptr_size)                     # Concretize the value at this addr\n\t    def write_argument_value(self, i: int, val: int) -> None:\n\t        \"\"\"\n\t        Write the parameter index with the given value. It will take in account\n\t        whether the argument is in a register or the stack.\n\t        :param i: Ith argument of the function\n", "        :param val: integer value of the parameter\n\t        :return: None\n\t        \"\"\"\n\t        try:\n\t            return self.write_register(self._get_argument_register(i), val)\n\t        except IndexError:\n\t            len_args = len(self._archinfo.reg_args)\n\t            return self.write_stack_value(i-len_args, val, offset=1)\n\t    def get_argument_value(self, i: int) -> int:\n\t        \"\"\"\n", "        Get the integer value of parameters following the call convention.\n\t        The value originate either from a register or the stack depending\n\t        on the ith argument requested.\n\t        :param i: Ith argument of the function\n\t        :type i: int\n\t        :return: integer value of the parameter\n\t        :rtype: int\n\t        \"\"\"\n\t        try:\n\t            return self.read_register(self._get_argument_register(i))\n", "        except IndexError:\n\t            len_args = len(self._archinfo.reg_args)\n\t            return self.get_stack_value(i-len_args, offset=1)\n\t    def get_argument_symbolic(self, i: int) -> Expression:\n\t        \"\"\"\n\t        Return the symbolic expression associated with the given ith parameter.\n\t        :param i: Ith function parameter\n\t        :return: Symbolic expression associated\n\t        :rtype: `SymbolicExpression <https://triton.quarkslab.com/documentation/doxygen/py_SymbolicExpression_page.html>`_\n\t        \"\"\"\n", "        try:\n\t            return self.read_symbolic_register(self._get_argument_register(i))\n\t        except IndexError:\n\t            len_args = len(self._archinfo.reg_args)\n\t            addr = self.cpu.stack_pointer + ((i-len_args) * self.ptr_size)\n\t            return self.read_symbolic_memory_int(addr, self.ptr_size)\n\t    def get_full_argument(self, i: int) -> Tuple[int, Expression]:\n\t        \"\"\"\n\t        Get both the concrete argument value along with its symbolic expression.\n\t        :return: Tuple containing concrete value and symbolic expression\n", "        \"\"\"\n\t        return self.get_argument_value(i), self.get_argument_symbolic(i)\n\t    def get_string_argument(self, idx: int) -> str:\n\t        \"\"\"Read a string for which address is a function parameter.\n\t        The function first get the argument value, and then dereference\n\t        the string located at that address.\n\t        :param idx: argument index\n\t        :type idx: int\n\t        :returns: memory string\n\t        :rtype: str\n", "        \"\"\"\n\t        return self.memory.read_string(self.get_argument_value(idx))\n\t    def get_format_string(self, addr: Addr) -> str:\n\t        \"\"\"\n\t        Returns a formatted string in Python format from a format string\n\t        located in memory at ``addr``.\n\t        :param addr: Address to concretize\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :rtype: str\n\t        \"\"\"\n", "        return self.memory.read_string(addr)                                             \\\n\t               .replace(\"%s\", \"{}\").replace(\"%d\", \"{}\").replace(\"%#02x\", \"{:#02x}\")     \\\n\t               .replace(\"%#x\", \"{:#x}\").replace(\"%x\", \"{:x}\").replace(\"%02X\", \"{:02X}\") \\\n\t               .replace(\"%c\", \"{:c}\").replace(\"%02x\", \"{:02x}\").replace(\"%ld\", \"{}\")    \\\n\t               .replace(\"%*s\", \"\").replace(\"%lX\", \"{:X}\").replace(\"%08x\", \"{:08x}\")     \\\n\t               .replace(\"%u\", \"{}\").replace(\"%lu\", \"{}\").replace(\"%zu\", \"{}\")           \\\n\t               .replace(\"%02u\", \"{:02d}\").replace(\"%03u\", \"{:03d}\")                     \\\n\t               .replace(\"%03d\", \"{:03d}\").replace(\"%p\", \"{:#x}\").replace(\"%i\", \"{}\")\n\t    def get_format_arguments(self, fmt_addr: Addr, args: List[int]) -> List[Union[int, str]]:\n\t        \"\"\"\n", "        Read the format string at ``fmt_addr``. For each format item\n\t        which are strings, dereference that associated string and replaces it\n\t        in ``args``.\n\t        :param fmt_addr: Address to concretize\n\t        :type fmt_addr: :py:obj:`tritondse.types.Addr`\n\t        :param args: Parameters associated with the format string\n\t        :type args: List[int]\n\t        :rtype: List[Union[int, str]]\n\t        \"\"\"\n\t        # FIXME: Modifies inplace args (which is not very nice)\n", "        s_str = self.memory.read_string(fmt_addr)\n\t        postString = [i for i, x in enumerate([i for i, c in enumerate(s_str) if c == '%']) if s_str[x+1] == \"s\"]\n\t        for p in postString:\n\t            args[p] = self.memory.read_string(args[p])\n\t            args[p] = args[p].encode(\"latin-1\").decode()\n\t        return args\n\t    def get_stack_value(self, index: int, offset: int = 0) -> int:\n\t        \"\"\"\n\t        Returns the value at the ith position further in the stack\n\t        :param index: The index position from the top of the stack\n", "        :type index: int\n\t        :param offset: An integer value offset to apply to stack address\n\t        :type offset: int\n\t        :return: the value got\n\t        :return: the value got\n\t        :rtype: int\n\t        \"\"\"\n\t        addr = self.cpu.stack_pointer + (offset * self.ptr_size) + (index * self.ptr_size)\n\t        return self.memory.read_uint(addr, self.ptr_size)\n\t    def write_stack_value(self, index: int, value: int, offset: int = 0) -> None:\n", "        \"\"\"\n\t        Write the given value on the stack at the given index relative to the current\n\t        stack pointer. The index value can be positive to write further down the stack\n\t        or negative to write upward.\n\t        :param index: The index position from the top of the stack\n\t        :type index: int\n\t        :param value: Integer value to write on the stack\n\t        :type value: int\n\t        :param offset: Add an optional ith item offset to add to stack value (not a size)\n\t        :type offset: int\n", "        :return: the value got\n\t        :rtype: int\n\t        \"\"\"\n\t        addr = self.cpu.stack_pointer + (offset * self.ptr_size) + (index * self.ptr_size)\n\t        self.memory.write_int(addr, value, self.ptr_size)\n\t    def pop_stack_value(self) -> int:\n\t        \"\"\"\n\t        Pop a stack value, and the re-increment the stack pointer value.\n\t        This operation is fully concrete.\n\t        :return: int\n", "        \"\"\"\n\t        val = self.memory.read_ptr(self.cpu.stack_pointer)\n\t        self.cpu.stack_pointer += self.ptr_size\n\t        return val\n\t    def push_stack_value(self, value: int) -> None:\n\t        \"\"\"\n\t        Push a stack value. It then decreement the stack pointer value.\n\t        :param value: The value to push\n\t        \"\"\"\n\t        self.memory.write_ptr(self.cpu.stack_pointer-self.ptr_size, value)\n", "        self.cpu.stack_pointer -= self.ptr_size\n\t    def is_halt_instruction(self) -> bool:\n\t        \"\"\"\n\t        Check if the the current instruction is corresponding to an 'halt' instruction\n\t        in the target architecture.\n\t        :returns: Return true if on halt instruction architecture independent\n\t        \"\"\"\n\t        halt_opc = self._archinfo.halt_inst\n\t        return self.__current_inst.getType() == halt_opc\n\t    def solve(self, constraint: Union[AstNode, List[AstNode]], with_pp: bool = True) -> Tuple[SolverStatus, Model]:\n", "        \"\"\"\n\t        Solve the given constraint one the current symbolic state and returns both\n\t        a Solver status and a model. If not SAT the model returned is empty. Argument\n\t        ``with_pp`` enables checking the constraint taking in account the path predicate.\n\t        :param constraint: AstNode or list of AstNodes constraints to solve\n\t        :param with_pp: whether to take in account path predicate\n\t        :return: tuple of status and model\n\t        \"\"\"\n\t        if with_pp:\n\t            cst = constraint if isinstance(constraint, list) else [constraint]\n", "            final_cst = self.actx.land([self.tt_ctx.getPathPredicate()]+cst)\n\t        else:\n\t            final_cst = self.actx.land(constraint) if isinstance(constraint, list) else constraint\n\t        model, status, _ = self.tt_ctx.getModel(final_cst, status=True)\n\t        return SolverStatus(status), model\n\t    def solve_no_pp(self, constraint: Union[AstNode, List[AstNode]]) -> Tuple[SolverStatus, Model]:\n\t        \"\"\"\n\t        Helper function that solve a constraint forcing not to use\n\t        the path predicate.\n\t        .. warning:: Solving a query without the path predicate gives theoretically\n", "                     unsound results.\n\t        :param constraint: AstNode constraint to solve\n\t        :return: tuple of status and model\n\t        \"\"\"\n\t        return self.solve(constraint, with_pp=False)\n\t    def symbolize_register(self, register: Union[str, Register], alias: str = None) -> SymbolicVariable:\n\t        \"\"\"\n\t        Symbolize the given register. This a proxy for the symbolizeRegister\n\t        Triton function.\n\t        :param register: string of the register or Register object\n", "        :type register: Union[str, :py:obj:`tritondse.types.Register`]\n\t        :param alias: alias name to give to the symbolic variable\n\t        :type alias: str\n\t        :return: Triton Symbolic variable created\n\t        \"\"\"\n\t        reg = getattr(self.tt_ctx.registers, register) if isinstance(register, str) else register  # if str get reg\n\t        if alias:\n\t            var = self.tt_ctx.symbolizeRegister(reg, alias)\n\t        else:\n\t            var = self.tt_ctx.symbolizeRegister(reg)\n", "        return var\n\t    def symbolize_memory_byte(self, addr: Addr, alias: str = None) -> SymbolicVariable:\n\t        \"\"\"\n\t        Symbolize the given memory cell. Returns the associated\n\t        SymbolicVariable\n\t        :param addr: Address to symbolize\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param alias: alias to give the variable\n\t        :return: newly created symbolic variable\n\t        :rtype: :py:obj:`tritondse.types.SymbolicVariable`\n", "        \"\"\"\n\t        if alias:\n\t            return self.tt_ctx.symbolizeMemory(MemoryAccess(addr, CPUSIZE.BYTE), alias)\n\t        else:\n\t            return self.tt_ctx.symbolizeMemory(MemoryAccess(addr, CPUSIZE.BYTE))\n\t    def symbolize_memory_bytes(self, addr: Addr, size: ByteSize, alias_prefix: str = None, offset: int = 0) -> List[SymbolicVariable]:\n\t        \"\"\"\n\t        Symbolize a range of memory addresses. Can optionally provide an alias\n\t        prefix.\n\t        :param addr: Address at which to read data\n", "        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Number of bytes to symbolize\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n\t        :param alias_prefix: prefix name to give the variable\n\t        :type alias_prefix: str\n\t        :return: list of Symbolic variables created\n\t        :rtype: List[:py:obj:`tritondse.types.SymbolicVariable`]\n\t        \"\"\"\n\t        if alias_prefix:\n\t            return [self.symbolize_memory_byte(addr+i, alias_prefix+f\"[{i+offset}]\") for i in range(size)]\n", "        else:\n\t            return [self.symbolize_memory_byte(addr+i) for i in range(size)]\n\t    def get_expression_variable_values_model(self, exp: Union[AstNode, Expression], model: Model) -> Dict[SymbolicVariable: int]:\n\t        \"\"\"\n\t        Given a symbolic expression and a model, returns the valuation\n\t        of all variables involved in the expression.\n\t        :param exp: Symbolic Expression to look into\n\t        :param model: Model generated by the solver\n\t        :return: dictionnary of symbolic variables and their associated value (as int)\n\t        \"\"\"\n", "        ast = exp.getAst() if hasattr(exp, \"getAst\") else exp\n\t        ast_vars = self.actx.search(ast, AST_NODE.VARIABLE)\n\t        sym_vars = [x.getSymbolicVariable() for x in ast_vars]\n\t        final_dict = {}\n\t        for avar, svar in zip(ast_vars, sym_vars):\n\t            if svar.getId() in model:\n\t                final_dict[svar] = model[svar.getId()].getValue()\n\t            else:\n\t                final_dict[svar] = avar.evaluate()\n\t        return final_dict\n", "    def evaluate_expression_model(self, exp: Union[AstNode, Expression], model: Model) -> int:\n\t        \"\"\"\n\t        Evaluate the given expression on the given model. The value returned is the\n\t        integer value corresponding to the bitvector evaluation of the expression.\n\t        :param exp: Symbolic Expression to evaluate\n\t        :param model: Model generated by the solver\n\t        :return: result of the evaluation\n\t        \"\"\"\n\t        ast = exp.getAst() if hasattr(exp, \"getAst\") else exp\n\t        vars = self.get_expression_variable_values_model(ast, model)\n", "        backup = {}\n\t        for var, value in vars.items():\n\t            backup[var] = self.tt_ctx.getConcreteVariableValue(var)\n\t            self.tt_ctx.setConcreteVariableValue(var, value)\n\t        final_value = ast.evaluate()\n\t        for var in vars.keys():\n\t            self.tt_ctx.setConcreteVariableValue(var, backup[var])\n\t        return final_value\n\t    # def enumerate_expression_value(self, exp: Union[AstNode, Expression], constraints: List[AstNode], values_blacklist: List[int], limit: int):\n\t    #     # Written for when it will work\n", "    #     solver = z3.SolverFor(\"QF_BV\")\n\t    #     ast = exp.getAst() if hasattr(exp, \"getAst\") else exp\n\t    #     z3ast = self.actx.tritonToZ3(ast)\n\t    #\n\t    #     solver.add([self.actx.tritonToZ3(x) for x in constraints])\n\t    #     solver.add([z3ast != x for x in values_blacklist])\n\t    #\n\t    #     values = []  # retrieved values\n\t    #\n\t    #     while limit:\n", "    #         res = solver.check()\n\t    #         if res == z3.sat:\n\t    #             model = solver.model()\n\t    #             new_val = model.eval(z3ast)\n\t    #             values.append(new_val)\n\t    #             solver.add(z3ast != new_val)\n\t    #         else:\n\t    #             return values\n\t    #         limit -= 1\n\t    #     return values\n", "    def solve_enumerate_expression(self, exp: Union[AstNode, Expression], constraints: List[AstNode], values_blacklist: List[int], limit: int) -> List[Tuple[Model, int]]:\n\t        # Written for when it will work\n\t        ast = exp.getAst() if hasattr(exp, \"getAst\") else exp\n\t        constraint = self.actx.land(constraints + [ast != x for x in values_blacklist])\n\t        result = []\n\t        while limit:\n\t            status, model = self.solve(constraint, with_pp=False)\n\t            if status == SolverStatus.SAT:\n\t                new_val = self.evaluate_expression_model(ast, model)\n\t                result.append((model, new_val))\n", "                constraint = self.actx.land([constraint, ast != new_val])\n\t            else:\n\t                return result\n\t            limit -= 1\n\t        return result\n\t    @staticmethod\n\t    def from_loader(loader: Loader) -> 'ProcessState':\n\t        pstate = ProcessState(loader.endianness)\n\t        # Initialize the architecture of the processstate\n\t        pstate.initialize_context(loader.architecture)\n", "        # Set the program counter to points to entrypoint\n\t        pstate.cpu.program_counter = loader.entry_point\n\t        # Disable segmentation to map segments\n\t        with pstate.memory.without_segmentation():\n\t            # Load memory areas in memory\n\t            for i, seg in enumerate(loader.memory_segments()):\n\t                if not seg.size and not seg.content:\n\t                    logger.warning(f\"A segment have to provide either a size or a content {seg.name} (skipped)\")\n\t                    continue\n\t                size = len(seg.content) if seg.content else seg.size\n", "                logger.debug(f\"Loading 0x{seg.address:#08x} - {seg.address+size:#08x} size={size:#x}\")\n\t                pstate.memory.map(seg.address, size, seg.perms, seg.name)\n\t                if seg.content:\n\t                    pstate.memory.write(seg.address, seg.content)\n\t        # Apply dynamic relocations\n\t        cur_linkage_address = pstate.EXTERN_FUNC_BASE\n\t        # Disable segmentation\n\t        with pstate.memory.without_segmentation():\n\t            # Link imported functions in EXTERN_FUNC_BASE\n\t            for fname, rel_addr in loader.imported_functions_relocations():\n", "                logger.debug(f\"Hooking {fname} at {rel_addr:#x}\")\n\t                # If we already linked this function (because another library uses it) we reuse the same\n\t                # linkage address.\n\t                if fname in pstate.dynamic_symbol_table:\n\t                    (linkage_address, _) = pstate.dynamic_symbol_table[fname] \n\t                    logger.debug(f\"Already added. {fname} at {rel_addr:#x} linkage_addr={linkage_address:#x}\")\n\t                    pstate.memory.write_ptr(rel_addr, linkage_address)\n\t                else:\n\t                    # Add symbol in dynamic_symbol_table\n\t                    pstate.dynamic_symbol_table[fname] = (cur_linkage_address, True)\n", "                    # Apply relocation to our custom address in process memory\n\t                    pstate.memory.write_ptr(rel_addr, cur_linkage_address)\n\t                    # Increment linkage address number\n\t                    cur_linkage_address += pstate.ptr_size\n\t        # Try initializing stack registers if a stack is present in maps\n\t        # Map the stack\n\t        try:\n\t            stack = pstate.memory.map_from_name(pstate.STACK_SEG)\n\t            alloc = 1 * pstate.ptr_size\n\t            pstate.write_register(pstate.base_pointer_register, stack.start+stack.size-alloc) # Pointing right-out of the stack\n", "            pstate.write_register(pstate.stack_pointer_register, stack.start+stack.size-alloc)\n\t        except AssertionError:\n\t            logger.warning(\"no stack segment has been created by the loader\")\n\t        # Search for a map to settle foreign symbols\n\t        segs = pstate.memory.find_map(pstate.EXTERN_SEG)\n\t        if segs:\n\t            symb_base = segs[0].start\n\t            # Link imported symbols\n\t            for sname, rel_addr in loader.imported_variable_symbols_relocations():\n\t                logger.debug(f\"Hooking {sname} at {rel_addr:#x}\")\n", "                if pstate.architecture == Architecture.X86_64:  # HACK: Keep rel_addr to directly write symbol on it\n\t                    # Add symbol in dynamic_symbol_table\n\t                    pstate.dynamic_symbol_table[sname] = (rel_addr, False)\n\t                    #pstate.memory.write_ptr(rel_addr, cur_linkage_address)  # Do not write anything as symbolic executor will do it\n\t                else:\n\t                    # Add symbol in dynamic_symbol_table\n\t                    pstate.dynamic_symbol_table[sname] = (symb_base, False)\n\t                    pstate.memory.write_ptr(rel_addr, symb_base)\n\t                symb_base += pstate.ptr_size\n\t        for reg_name in pstate.cpu:\n", "            if reg_name in loader.cpustate:\n\t                setattr(pstate.cpu, reg_name, loader.cpustate[reg_name])\n\t        if loader.arch_mode: # If the processor's mode is provided\n\t            if loader.arch_mode == ArchMode.THUMB:\n\t                pstate.set_thumb(True)\n\t        return pstate\n"]}
{"filename": "tritondse/__init__.py", "chunked_list": ["from .config                import Config\n\tfrom .loaders.program       import Program\n\tfrom .loaders.quokkaprogram import QuokkaProgram\n\tfrom .loaders.cle_loader    import CleLoader\n\tfrom .loaders.loader        import Loader, MonolithicLoader, LoadableSegment\n\tfrom .process_state         import ProcessState\n\tfrom .coverage              import CoverageStrategy, BranchSolvingStrategy, CoverageSingleRun, GlobalCoverage\n\tfrom .symbolic_executor     import SymbolicExecutor\n\tfrom .symbolic_explorator   import SymbolicExplorator, ExplorationStatus\n\tfrom .seed                  import Seed, SeedStatus, SeedFormat, CompositeData\n", "from .sanitizers            import CbType, ProbeInterface, UAFSanitizer, NullDerefSanitizer, FormatStringSanitizer, IntegerOverflowSanitizer\n\tfrom .types                 import *\n\tfrom .workspace             import Workspace\n\tfrom .memory                import Memory, MemoryAccessViolation, MapOverlapException, MemMap\n\tfrom .exception import AllocatorException, SkipInstructionException, StopExplorationException, AbortExecutionException\n\tfrom triton import VERSION\n\tTRITON_VERSION = f\"v{VERSION.MAJOR}.{VERSION.MINOR}\"\n"]}
{"filename": "tritondse/symbolic_executor.py", "chunked_list": ["# built-in imports\n\timport io\n\timport time\n\timport os\n\tif os.name == 'posix':\n\t    import resource\n\tfrom typing import Optional, Union, List, NoReturn, Dict, Type\n\t# third party imports\n\tfrom triton import MODE, Instruction, CPUSIZE, MemoryAccess, CALLBACK\n\t# local imports\n", "from tritondse.config import Config\n\tfrom tritondse.coverage import CoverageSingleRun, BranchSolvingStrategy\n\tfrom tritondse.process_state import ProcessState\n\tfrom tritondse.loaders import Loader\n\tfrom tritondse.seed import Seed, SeedStatus, SeedFormat, CompositeData\n\tfrom tritondse.types import Expression, Architecture, Addr, Model, SymbolicVariable, Register\n\tfrom tritondse.routines import SUPPORTED_ROUTINES, SUPORTED_GVARIABLES\n\tfrom tritondse.callbacks import CallbackManager\n\tfrom tritondse.workspace import Workspace\n\tfrom tritondse.heap_allocator import AllocatorException\n", "from tritondse.thread_context import ThreadContext\n\tfrom tritondse.exception import AbortExecutionException, SkipInstructionException, StopExplorationException\n\tfrom tritondse.memory import MemoryAccessViolation, Perm\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"executor\")\n\tclass SymbolicExecutor(object):\n\t    \"\"\"\n\t    Single Program Execution Class.\n\t    That module, is in charge of performing the process loading from the given\n\t    program.\n", "    \"\"\"\n\t    def __init__(self, config: Config, seed: Seed = Seed(), workspace: Workspace = None, uid=0, callbacks=None):\n\t        \"\"\"\n\t        :param config: configuration file to use\n\t        :type config: Config\n\t        :param seed: input file to inject either in stdin or argv (optional)\n\t        :type seed: Seed\n\t        :param workspace: Workspace to use. If None it will be instanciated\n\t        :type workspace: Optional[Workspace]\n\t        :param uid: Unique ID. Given by :py:obj:`SymbolicExplorator` to identify uniquely executions\n", "        :type uid: int\n\t        :param callbacks: callbacks to bind on this execution before running *(instanciated if empty !)*\n\t        :type callbacks: CallbackManager\n\t        \"\"\"\n\t        self.config: Config = config      #: Configuration file used\n\t        self.loader: Type[Loader] = None  #: Loader used to run the code\n\t        self.pstate: ProcessState = None  #: ProcessState\n\t        self.workspace: Workspace = workspace  #: Current workspace\n\t        if self.workspace is None:\n\t            self.workspace = Workspace(config.workspace)\n", "        self.seed: Seed = seed  #: The current seed used for the execution\n\t        # Override config if there is a mismatch between seed format and config file\n\t        if seed.format != self.config.seed_format:\n\t            logger.warning(f\"seed format {seed.format} mismatch config {config.seed_format} (override config)\")\n\t            self.config.seed_format = seed.format\n\t        self.symbolic_seed = self._init_symbolic_seed(seed) #: symbolic seed (same structure than Seed but with symbols)\n\t        self.coverage: CoverageSingleRun = CoverageSingleRun(self.config.coverage_strategy)  #: Coverage of the execution\n\t        self.rtn_table = dict()   # Addr -> Tuple[fname, routine]\n\t        self.uid: int = uid       #: Unique identifier meant to unique accross Exploration instances\n\t        self.start_time: int = 0  #: start time of the process\n", "        self.end_time: int = 0    #: end time of the process\n\t        # create callback object if not provided as argument, and bind callbacks to the current process state\n\t        self.cbm: CallbackManager = callbacks if callbacks is not None else CallbackManager()\n\t        \"\"\"callback manager\"\"\"\n\t        # List of new seeds filled during the execution and flushed by explorator\n\t        self._pending_seeds = []\n\t        self._run_to_target = None\n\t        self.trace_offset: int = 0  #: counter of instructions executed\n\t        self.previous_pc: int = 0  #: previous program counter executed\n\t        self.current_pc = 0        #: current program counter\n", "        self.debug_pp = False\n\t        self._in_processing = False  # use to know if we are currently processing an instruction\n\t        # TODO: Here we load the binary each time we run an execution (via ELFLoader). We can\n\t        #       avoid this (and so gain in speed) if a TritonContext could be forked from a\n\t        #       state. See: https://github.com/JonathanSalwan/Triton/issues/532\n\t    def _init_symbolic_seed(self, seed: Seed) -> Union[list, CompositeData]:\n\t        if seed.is_raw():\n\t            return [None]*len(seed.content)\n\t        else:  # is composite\n\t            argv = [[None]*len(a) for a in seed.content.argv]\n", "            files = {k: [None]*len(v) for k, v in seed.content.files.items()}\n\t            variables = {k: [None]*(1 if isinstance(v, int) else len(v)) for k, v in seed.content.variables.items()}\n\t            return CompositeData(argv=argv, files=files, variables=variables)\n\t    def load(self, loader: Loader) -> None:\n\t        \"\"\"\n\t        Use the given loader to initialize the ProcessState.\n\t        It overrides the current ProcessState if any.\n\t        :param loader: Loader describing how to load\n\t        :return: None\n\t        \"\"\"\n", "        # Initialize the process_state architecture (at this point arch is sure to be supported)\n\t        self.loader = loader\n\t        logger.debug(f\"Loading program {self.loader.name} [{self.loader.architecture}]\")\n\t        self.pstate = ProcessState.from_loader(loader)\n\t        self._map_dynamic_symbols()\n\t        self._load_seed_process_state(self.pstate, self.seed)\n\t    def load_process(self, pstate: ProcessState) -> None:\n\t        \"\"\"\n\t        Load the given process state. Do nothing but\n\t        setting the internal ProcessState.\n", "        :param pstate: PrcoessState to set\n\t        \"\"\"\n\t        self.pstate = pstate\n\t        self._load_seed_process_state(self.pstate, self.seed)\n\t    @staticmethod\n\t    def _load_seed_process_state(pstate: ProcessState, seed: Seed) -> None:\n\t        if seed.is_raw():\n\t            data = seed.content\n\t        else:  # is composite\n\t            if seed.is_file_defined(\"stdin\"):\n", "                data = seed.get_file_input(\"stdin\")\n\t            else:\n\t                return\n\t        filedesc = pstate.get_file_descriptor(0)\n\t        filedesc.fd = io.BytesIO(data)\n\t    @property\n\t    def execution_time(self) -> int:\n\t        \"\"\"\n\t        Time taken for the execution in seconds\n\t        .. warning:: Only relevant at the end of the execution\n", "        :return: execution time (in s)\n\t        \"\"\"\n\t        return self.end_time - self.start_time\n\t    @property\n\t    def pending_seeds(self) -> List[Seed]:\n\t        \"\"\"\n\t        List of pending seeds gathered during execution.\n\t        .. warning:: Only relevant at the end of execution\n\t        :returns: list of new seeds generated\n\t        :rtype: List[Seed]\n", "        \"\"\"\n\t        return self._pending_seeds\n\t    def enqueue_seed(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Add a seed to the queue of seed to be executed in later iterations.\n\t        This function is meant to be used by user callbacks.\n\t        :param seed: Seed to be added\n\t        :type seed: Seed\n\t        \"\"\"\n\t        self._pending_seeds.append(seed)\n", "    @property\n\t    def callback_manager(self) -> CallbackManager:\n\t        \"\"\"\n\t        Get the callback manager associated with the execution.\n\t        :rtype: CallbackManager\"\"\"\n\t        return self.cbm\n\t    def is_seed_injected(self) -> bool:\n\t        \"\"\"\n\t        Get whether or not the seed has been injected.\n\t        :return: True if the seed has already been inserted\n", "        \"\"\"\n\t        if self.config.is_format_raw():\n\t            return bool(self.symbolic_seed)\n\t        elif self.config.is_format_composite():\n\t            # Namely has one of the various input been injected or not\n\t            return bool(self.symbolic_seed.content.files) or bool(self.symbolic_seed.content.variables)\n\t        else:\n\t            assert False\n\t    def _configure_pstate(self) -> None:\n\t        #for mode in [MODE.ALIGNED_MEMORY, MODE.AST_OPTIMIZATIONS, MODE.CONSTANT_FOLDING, MODE.ONLY_ON_SYMBOLIZED]:\n", "        for mode in [MODE.ONLY_ON_SYMBOLIZED]:\n\t            self.pstate.set_triton_mode(mode, True)\n\t        logger.info(f\"configure pstate: time_inc:{self.config.time_inc_coefficient}  solver:{self.config.smt_solver.name}  timeout:{self.config.smt_timeout}\")\n\t        self.pstate.time_inc_coefficient = self.config.time_inc_coefficient\n\t        self.pstate.set_solver_timeout(self.config.smt_timeout)\n\t        self.pstate.set_solver(self.config.smt_solver)\n\t    def _fetch_next_thread(self, threads: List[ThreadContext]) -> Optional[ThreadContext]:\n\t        \"\"\"\n\t        Given a list of threads, returns the next to execute. Iterating\n\t        threads in a round-robin style picking the next item in the list.\n", "        :param threads: list of threads\n\t        :return: thread context\n\t        \"\"\"\n\t        cur_idx = threads.index(self.pstate.current_thread)\n\t        tmp_list = threads[cur_idx+1:]+threads[:cur_idx]  # rotate list (and exclude current_item)\n\t        for th in tmp_list:\n\t            if th.is_running():\n\t                return th  # Return the first thread that is properly running\n\t        return None\n\t    def __schedule_thread(self) -> None:\n", "        threads_list = self.pstate.threads\n\t        if len(threads_list) == 1:  # If there is only one thread no need to schedule another thread\n\t            return\n\t        if self.pstate.current_thread.count > self.config.thread_scheduling:\n\t            # Select the next thread to execute\n\t            next_th = self._fetch_next_thread(threads_list)\n\t            if next_th:  # We found another thread to schedule\n\t                # Call all callbacks related to threads\n\t                for cb in self.cbm.get_context_switch_callback():\n\t                    cb(self, self.pstate, self.pstate.current_thread)\n", "                # Save current context and restore new thread context (+kill current if dead)\n\t                self.pstate.switch_thread(next_th)\n\t            else:  # There are other thread but not other one is available (thus keep current one)\n\t                self.pstate.current_thread.count = 0  # Reset its counter\n\t        else:\n\t            # Increment the instruction counter of the thread (a bit in advance but it does not matter)\n\t            self.pstate.current_thread.count += 1\n\t    def _symbolic_mem_callback(self, se: 'SymbolicExecutor', ps: ProcessState, mem: MemoryAccess, *args):\n\t        tgt_addr = mem.getAddress()\n\t        lea_ast = mem.getLeaAst()\n", "        if lea_ast is None:\n\t            return\n\t        if lea_ast.isSymbolized():\n\t            s = \"write\" if bool(args) else \"read\"\n\t            pc = self.pstate.cpu.program_counter\n\t            logger.debug(f\"symbolic {s} at 0x{pc:x}: target: 0x{tgt_addr:x} [{lea_ast}]\")\n\t            self.pstate.push_constraint(lea_ast == tgt_addr, f\"sym-{s}:{self.trace_offset}:{pc}\")\n\t    def emulate(self):\n\t        while not self.pstate.stop and self.pstate.threads:\n\t            if not self.step():\n", "                break\n\t        if not self.seed.is_status_set():  # Set a status if it has not already been done\n\t            self.seed.status = SeedStatus.OK_DONE\n\t        return\n\t    def step(self) -> bool:\n\t        \"\"\"\n\t        Perform a single instruction step. Returns whether the emulation can\n\t        continue or we have to stop.\n\t        \"\"\"\n\t        try:\n", "            # Schedule thread if it's time\n\t            self.__schedule_thread()\n\t            if not self.pstate.current_thread.is_running():\n\t                logger.warning(f\"After scheduling current thread is not running (probably in a deadlock state)\")\n\t                return False  # Were not able to find a suitable thread thus exit emulation\n\t            # Fetch program counter (of the thread selected), at this point the current thread should be running!\n\t            self.current_pc = self.pstate.cpu.program_counter  # should normally be already set but still.\n\t            if self.current_pc == self._run_to_target:  # Hit the location we wanted to reach\n\t                return False\n\t            if self.current_pc == 0:\n", "                logger.error(f\"PC=0, is it normal ? (stop)\")\n\t                return False\n\t            if self.pstate.memory.segmentation_enabled:\n\t                if not self.pstate.memory.has_ever_been_written(self.current_pc, CPUSIZE.BYTE):\n\t                    logger.error(f\"Instruction not mapped: 0x{self.current_pc:x}\")\n\t                    return False\n\t            instruction = self.pstate.fetch_instruction()\n\t            opcode = instruction.getOpcode()\n\t            mnemonic = instruction.getType()\n\t            try:\n", "                # Trigger pre-address callback\n\t                pre_cbs, post_cbs = self.cbm.get_address_callbacks(self.current_pc)\n\t                for cb in pre_cbs:\n\t                    cb(self, self.pstate, self.current_pc)\n\t                # Trigger pre-opcode callback\n\t                pre_opcode, post_opcode = self.cbm.get_opcode_callbacks(opcode)\n\t                for cb in pre_opcode:\n\t                    cb(self, self.pstate, opcode)\n\t                # Trigger pre-mnemonic callback\n\t                pre_mnemonic, post_mnemonic = self.cbm.get_mnemonic_callbacks(mnemonic)\n", "                for cb in pre_mnemonic:\n\t                    cb(self, self.pstate, mnemonic)\n\t                # Trigger pre-instruction callback\n\t                pre_insts, post_insts = self.cbm.get_instruction_callbacks()\n\t                for cb in pre_insts:\n\t                    cb(self, self.pstate, instruction)\n\t            except SkipInstructionException as _:\n\t                return True\n\t            if self.pstate.is_syscall():\n\t                logger.warning(f\"execute syscall instruction {self.pstate.read_register(self.pstate._syscall_register)}\")\n", "            # Process\n\t            prev_pc = self.current_pc\n\t            self._in_processing = True\n\t            if not self.pstate.process_instruction(instruction):\n\t                if self.pstate.is_halt_instruction():\n\t                    logger.info(f\"hit {str(instruction)} instruction stop.\")\n\t                else:\n\t                    logger.error('Instruction not supported: %s' % (str(instruction)))\n\t                if self.config.skip_unsupported_instruction:\n\t                    self.pstate.cpu.program_counter += instruction.getSize() # try to jump over the instruction\n", "                else:\n\t                    return False  # stop emulation\n\t            self._in_processing = False\n\t            # increment trace offset\n\t            self.trace_offset += 1\n\t            # update previous program counters\n\t            self.previous_pc = prev_pc\n\t            self.current_pc = self.pstate.cpu.program_counter  # current_pc becomes new instruction pointer\n\t            # Update the coverage of the execution\n\t            self.coverage.add_covered_address(self.previous_pc)\n", "            # Update coverage send it the last PathConstraint object if one was added\n\t            if self.pstate.is_path_predicate_updated():\n\t                path_constraint = self.pstate.last_branch_constraint\n\t                if path_constraint.isMultipleBranches():\n\t                    branches = path_constraint.getBranchConstraints()\n\t                    if len(branches) != 2:\n\t                        logger.error(\"Branching condition has more than two branches\")\n\t                    taken, not_taken = branches if branches[0]['isTaken'] else branches[::-1]\n\t                    taken_addr, not_taken_addr = taken['dstAddr'], not_taken['dstAddr']\n\t                    for cb in self.cbm.get_on_branch_covered_callback():\n", "                        cb(self, self.pstate, (self.previous_pc, taken_addr))\n\t                    self.coverage.add_covered_branch(self.previous_pc, taken_addr, not_taken_addr)\n\t                else:  # It is normally a dynamic jump or symbolic memory read/write\n\t                    cmt = path_constraint.getComment()\n\t                    if cmt.startswith(\"sym-read\") or cmt.startswith(\"sym-write\"):\n\t                        pass\n\t                        # NOTE: At the moment it does not seems suitable to count r/w pointers\n\t                        # as part of the coverage. So does not have an influence on covered/not_covered.\n\t                    else:\n\t                        logger.warning(f\"New dynamic jump covered at: {self.previous_pc:08x}\")\n", "                        path_constraint.setComment(f\"dyn-jmp:{self.trace_offset}:{self.previous_pc}\")\n\t                        self.coverage.add_covered_dynamic_branch(self.previous_pc, self.current_pc)\n\t            # Trigger post-opcode callback\n\t            for cb in post_opcode:\n\t                cb(self, self.pstate, opcode)\n\t            # Trigger post-mnemonic callback\n\t            for cb in post_mnemonic:\n\t                cb(self, self.pstate, mnemonic)\n\t            # Trigger post-instruction callback\n\t            for cb in post_insts:\n", "                cb(self, self.pstate, instruction)\n\t            # Trigger post-address callbacks\n\t            for cb in post_cbs:\n\t                cb(self, self.pstate, self.previous_pc)\n\t            # Simulate routines\n\t            try:\n\t                self._routines_handler(instruction)\n\t            except AllocatorException as e:\n\t                logger.info(f'An exception has been raised: {e}')\n\t                self.seed.status = SeedStatus.CRASH\n", "                return False\n\t            # Check timeout of the execution\n\t            if self.config.execution_timeout and (time.time() - self.start_time) >= self.config.execution_timeout:\n\t                logger.info('Timeout of an execution reached')\n\t                self.seed.status = SeedStatus.HANG\n\t                return False\n\t            return True\n\t        except AbortExecutionException as e:\n\t            return False\n\t        except MemoryAccessViolation as e:\n", "            logger.warning(f\"Memory violation: {str(e)}\")\n\t            # Call all the callbacks on the memory violations\n\t            for cb in self.callback_manager.get_memory_violation_callbacks():\n\t                cb(self, self.pstate, e)\n\t            # Assign the seed the status of crash\n\t            if not self.seed.is_status_set():\n\t                self.seed.status = SeedStatus.CRASH\n\t            return False\n\t    def __handle_external_return(self, routine_name: str, ret_val: Optional[Union[int, Expression]]) -> None:\n\t        \"\"\" Symbolize or concretize return values of external functions \"\"\"\n", "        if ret_val is not None:\n\t            reg = self.pstate.return_register\n\t            if isinstance(ret_val, int): # Write its concrete value\n\t                self.pstate.write_register(reg, ret_val)\n\t            else:  # It should be a logic expression\n\t                self.pstate.write_symbolic_register(reg, ret_val, f\"(routine {routine_name}\")\n\t    def _routines_handler(self, instruction: Instruction):\n\t        \"\"\"\n\t        This function handle external routines calls. When the .plt jmp on an external\n\t        address, we call the appropriate Python routine and setup the returned value\n", "        which may be concrete or symbolic.\n\t        :param instruction: The current instruction executed\n\t        :return: None\n\t        \"\"\"\n\t        pc = self.pstate.cpu.program_counter\n\t        if pc in self.rtn_table:\n\t            routine_name, routine = self.rtn_table[pc]\n\t            logger.debug(f\"Enter external routine: {routine_name}\")\n\t            # Trigger pre-address callback\n\t            pre_cbs, post_cbs = self.cbm.get_imported_routine_callbacks(routine_name)\n", "            ret_val = None\n\t            for cb in pre_cbs:\n\t                ret = cb(self, self.pstate, routine_name, pc)\n\t                if ret is not None:  # if the callback return a value the function behavior will be skipped\n\t                    ret_val = ret\n\t                    break  # Set the ret val and break\n\t            if ret_val is None:  # If no ret_val has been set by any callback function call the supported routine\n\t                # Emulate the routine and the return value\n\t                ret_val = routine(self, self.pstate)\n\t            self.__handle_external_return(routine_name, ret_val)\n", "            # Trigger post-address callbacks\n\t            for cb in post_cbs:\n\t                cb(self, self.pstate, routine_name, pc)\n\t            # Do not continue the execution if we are in a locked mutex\n\t            if self.pstate.mutex_locked:\n\t                self.pstate.mutex_locked = False\n\t                self.pstate.cpu.program_counter = instruction.getAddress()\n\t                # It's locked, so switch to another thread\n\t                self.pstate.current_thread.count = self.config.thread_scheduling+1\n\t                return\n", "            # Do not continue the execution if we are in a locked semaphore\n\t            if self.pstate.semaphore_locked:\n\t                self.pstate.semaphore_locked = False\n\t                self.pstate.cpu.program_counter = instruction.getAddress()\n\t                # It's locked, so switch to another thread\n\t                self.pstate.current_thread.count = self.config.thread_scheduling+1\n\t                return\n\t            if self.pstate.architecture == Architecture.AARCH64:\n\t                # Get the return address\n\t                ret_addr = self.pstate.read_register('x30')\n", "            elif self.pstate.architecture in [Architecture.X86, Architecture.X86_64]:\n\t                # Get the return address and restore RSP (simulate RET)\n\t                ret_addr = self.pstate.pop_stack_value()\n\t            else:\n\t                raise Exception(\"Architecture not supported\")\n\t            # Hijack RIP to skip the call\n\t            self.pstate.cpu.program_counter = ret_addr\n\t    def _map_dynamic_symbols(self) -> None:\n\t        \"\"\"\n\t        Apply dynamic relocations of imported functions and imported symbols\n", "        regardless of the architecture or executable format\n\t        .. FIXME: This function does not apply all possible relocations\n\t        :return: None\n\t        \"\"\"\n\t        for symbol, (addr, is_func) in self.pstate.dynamic_symbol_table.items():\n\t            if symbol in SUPPORTED_ROUTINES:  # if the routine name is supported\n\t                # Add link to the routine and got tables\n\t                self.rtn_table[addr] = (symbol, SUPPORTED_ROUTINES[symbol])\n\t            elif symbol in SUPORTED_GVARIABLES:\n\t                # if self.pstate.architecture == Architecture.X86_64:\n", "                self.pstate.memory.write_ptr(addr, SUPORTED_GVARIABLES[symbol])  # write directly at addr\n\t                # elif self.pstate.architecture == Architecture.AARCH64:\n\t                #     val = self.pstate.memory.read_ptr(addr)\n\t                #     self.pstate.memory.write_ptr(val, SUPORTED_GVARIABLES[symbol])\n\t            else:  # the symbol is not supported\n\t                if self.uid == 0:  # print warning if first uid (so that it get printed once)\n\t                    logger.warning(f\"symbol {symbol} imported but unsupported\")\n\t                if is_func:\n\t                    # Add link to a default stub function\n\t                    self.rtn_table[addr] = (symbol, self.__default_stub)\n", "                else:\n\t                    pass # do nothing on unsupported symbols\n\t    def __default_stub(self, se: 'SymbolicExecutor', pstate: ProcessState):\n\t        rtn_name, _ = self.rtn_table[pstate.cpu.program_counter]\n\t        logger.warning(f\"calling {rtn_name} which is unsupported\")\n\t        if self.config.skip_unsupported_import:\n\t            return None  # Like if function did nothing\n\t        else:\n\t            self.abort()\n\t    def abort(self) -> NoReturn:\n", "        \"\"\"\n\t        Abort the current execution. It works by raising\n\t        an exception which is caught by the emulation function\n\t        that takes care of returning appropriately afterward.\n\t        :raise AbortExecutionException: to abort execution from anywhere\n\t        \"\"\"\n\t        raise AbortExecutionException('Execution aborted')\n\t    def skip_instruction(self) -> NoReturn:\n\t        \"\"\"\n\t        Skip the current instruction before it gets executed. It is only\n", "        relevant to call it from pre-inst or pre-addr callbacks.\n\t        :raise SkipInstructionException: to skip the current instruction\n\t        \"\"\"\n\t        raise SkipInstructionException(\"Skip instruction\")\n\t    def stop_exploration(self) -> NoReturn:\n\t        \"\"\"\n\t        Function to call to stop the whole exploration of\n\t        the program. It raises an exception which is caught by SymbolicExplorator.\n\t        :raise StopExplorationException: to stop the exploration\n\t        \"\"\"\n", "        raise StopExplorationException(\"Stop exploration\")\n\t    def emulation_init(self) -> bool:\n\t        if self.pstate is None:\n\t            logger.error(f\"ProcessState is None (have you called \\\"load\\\"?\")\n\t            return False\n\t        self.start_time = time.time()\n\t        # Configure memory segmentation using configuration\n\t        self.pstate.memory.set_segmentation(self.config.memory_segmentation)\n\t        if self.config.memory_segmentation:\n\t            self.cbm.register_memory_read_callback(self._mem_accesses_callback)\n", "            self.cbm.register_memory_write_callback(self._mem_accesses_callback)\n\t        # Register memory callbacks in case we activated covering mem access\n\t        if BranchSolvingStrategy.COVER_SYM_READ in self.config.branch_solving_strategy:\n\t            self.cbm.register_memory_read_callback(self._symbolic_mem_callback)\n\t        if BranchSolvingStrategy.COVER_SYM_WRITE in self.config.branch_solving_strategy:\n\t            self.cbm.register_memory_write_callback(self._symbolic_mem_callback)\n\t        # bind dbm callbacks on the process state (newly initialized)\n\t        self.cbm.bind_to(self)  # bind call\n\t        # Let's emulate the binary from the entry point\n\t        logger.info('Starting emulation')\n", "        # Get pre/post callbacks on execution\n\t        pre_cb, post_cb = self.cbm.get_execution_callbacks()\n\t        # Iterate through all pre exec callbacks\n\t        for cb in pre_cb:\n\t            cb(self, self.pstate)\n\t        # Call it here to make sure in case of \"load_process\" the use has properly instanciated the architecture\n\t        self._configure_pstate()\n\t        return True\n\t    def run(self, stop_at: Addr = None) -> None:\n\t        \"\"\"\n", "        Execute the program.\n\t        If the :py:attr:`tritondse.Config.execution_timeout` is not set\n\t        the execution might hang forever if the program does.\n\t        :param stop_at: Address where to stop (if necessary)\n\t        :return: None\n\t        \"\"\"\n\t        if stop_at:\n\t            self._run_to_target = stop_at\n\t        # Call init steps\n\t        if not self.emulation_init():\n", "            return\n\t        # Run until reaching a stopping condition\n\t        self.emulate()\n\t        # Call termination steps\n\t        self.emulation_deinit()\n\t    def emulation_deinit(self):\n\t        _, post_cb = self.cbm.get_execution_callbacks()\n\t        # Iterate through post exec callbacks\n\t        for cb in post_cb:\n\t            cb(self, self.pstate)\n", "        self.end_time = time.time()\n\t        # IMPORTANT The next call is necessary otherwise there is a memory\n\t        #           leak issues.\n\t        # Unbind callbacks from the current symbolic executor instance.\n\t        self.cbm.unbind()\n\t        # NOTE Unregister callbacks registered at the beginning of the function.\n\t        #      This is necessary because we currently have a circular dependency\n\t        #      between this class and the callback manager. Note that we create\n\t        #      that circular dependency indirectly when we set the callback to\n\t        #      a method of this class (_mem_accesses_callback and\n", "        #      _symbolic_mem_callback).\n\t        if self.config.memory_segmentation:\n\t            self.cbm.unregister_callback(self._mem_accesses_callback)\n\t        if BranchSolvingStrategy.COVER_SYM_READ in self.config.branch_solving_strategy:\n\t            self.cbm.unregister_callback(self._symbolic_mem_callback)\n\t        if BranchSolvingStrategy.COVER_SYM_WRITE in self.config.branch_solving_strategy:\n\t            self.cbm.unregister_callback(self._symbolic_mem_callback)\n\t        logger.info(f\"Emulation done [ret:{self.pstate.read_register(self.pstate.return_register):x}]  (time:{self.execution_time:.02f}s)\")\n\t        logger.info(f\"Instructions executed: {self.coverage.total_instruction_executed}  symbolic branches: {self.pstate.path_predicate_size}\")\n\t        logger.info(f\"Memory usage: {self.mem_usage_str()}\")\n", "    def _mem_accesses_callback(self, se: 'SymbolicExecutor', ps: ProcessState, mem: MemoryAccess, *args):\n\t        \"\"\"\n\t        This callback is used to ensure memory accesses performed by side-effect of instructions\n\t        semantic correctly checks memory segmentation. Thus we only do the check during the processing\n\t        of an instruction.\n\t        \"\"\"\n\t        if ps.memory.segmentation_enabled and self._in_processing:\n\t            perm = Perm.W if bool(args) else Perm.R\n\t            addr = mem.getAddress()\n\t            size = mem.getSize()\n", "            map = ps.memory.get_map(addr, size)  # It raises\n\t            if map is None:\n\t                raise MemoryAccessViolation(addr, perm, memory_not_mapped=True)\n\t            else:\n\t                if perm not in map.perm:\n\t                    raise MemoryAccessViolation(addr, perm, map_perm=map.perm, perm_error=True)\n\t    @property\n\t    def exitcode(self) -> int:\n\t        \"\"\" Exit code value of the process. The value\n\t        is simply the concrete value of the register\n", "        marked as return_register (rax, on x86, r0 on ARM..)\n\t        \"\"\"\n\t        return self.pstate.read_register(self.pstate.return_register) & 0xFF\n\t    @staticmethod\n\t    def mem_usage_str() -> str:\n\t        \"\"\"\n\t        Debug function to track memory consumption of an execution (not\n\t        implemented on Windows).\n\t        \"\"\"\n\t        if os.name == \"posix\":\n", "            size, resident, shared, _, _, _, _ = (int(x) for x in open(f\"/proc/{os.getpid()}/statm\").read().split(\" \"))\n\t            resident = resident * resource.getpagesize()\n\t            units = [(float(1024), \"Kb\"), (float(1024 **2), \"Mb\"), (float(1024 **3), \"Gb\")]\n\t            for unit, s in units[::-1]:\n\t                if resident / unit < 1:\n\t                    continue\n\t                else:  # We are on the right unit\n\t                    return \"%.2f%s\" % (resident/unit, s)\n\t            return \"%dB\" % resident\n\t        else:\n", "          return \"N/A\"\n\t    def mk_new_seed_from_model(self, model: Model) -> Seed:\n\t        \"\"\"\n\t        Creates a new seed from the given SMT model.\n\t        :param model: SMT model\n\t        :return: new seed object\n\t        \"\"\"\n\t        def repl_bytearray(concrete, symbolic):\n\t            for i, sv in enumerate(symbolic):  # Enumerate symvars associated with each bytes\n\t                if sv is not None:\n", "                    if sv.getId() in model:  # If solver provided a new value for the symvar\n\t                        value = model[sv.getId()].getValue()\n\t                        concrete[i] = value # Replace it in the bytearray\n\t            return concrete\n\t        if self.config.is_format_raw(): # RAW seed. => symbolize_stdin\n\t            content = bytes(repl_bytearray(bytearray(self.seed.content), self.symbolic_seed))\n\t        elif self.config.is_format_composite():\n\t            # NOTE will have to update this if more things are added to CompositeData\n\t            new_files, new_vars = {}, {}\n\t            # Handle argv (its meant to be here)\n", "            args = [bytearray(x) for x in self.seed.content.argv]\n\t            new_argv = [bytes(repl_bytearray(c, s)) for c, s in zip(args, self.symbolic_seed.argv)]\n\t            # Handle stdin and files\n\t            # If the seed provides the content of files (#NOTE stdin is treated as a file)\n\t            new_files = {}\n\t            for k, c in self.seed.content.files.items():\n\t                if k in self.symbolic_seed.files:\n\t                    new_files[k] = bytes(repl_bytearray(bytearray(c), self.symbolic_seed.files[k]))\n\t                else:\n\t                    new_files[k] = c  # keep the current value in the seed\n", "            # Handle variables, if the seed provides some\n\t            new_variables = {}\n\t            for k, c in self.seed.content.variables.items():\n\t                if k in self.symbolic_seed.variables:\n\t                    conc = bytearray(c) if isinstance(c, bytes) else [c]\n\t                    new_vals = repl_bytearray(conc, self.symbolic_seed.variables[k])\n\t                    new_variables[k] = bytes(new_vals) if isinstance(c, bytes) else new_vals[0]  # new variables are either bytes or int\n\t                else:\n\t                    new_variables[k] = c  # If it has not been injected keep the current concrete value\n\t            content = CompositeData(new_argv, new_files, new_variables)\n", "        else:\n\t            assert False\n\t        # Calling callback if user defined one\n\t        new_seed = Seed(content)\n\t        for cb in self.cbm.get_new_input_callback():\n\t            cont = cb(self, self.pstate, new_seed)\n\t            if cont:\n\t                # if the callback return a new input continue with that one\n\t                new_seed = cont\n\t        # Return the\n", "        return new_seed\n\t    def inject_symbolic_argv_memory(self, addr: Addr, index: int, value: bytes) -> None:\n\t        \"\"\"\n\t        Inject the ith item of argv in memory.\n\t        To be used only with composite seeds and only if seed have a symbolic argv\n\t        :param addr: address where to inject the argv[ith]\n\t        :param index: ith argv item\n\t        :param value: value of the item\n\t        \"\"\"\n\t        self.pstate.memory.write(addr, value)  # Write concrete bytes in memory\n", "        sym_vars = self.pstate.symbolize_memory_bytes(addr, len(value), f\"argv[{index}]\") # Symbolize bytes\n\t        self.symbolic_seed.argv[index] = sym_vars # Add symbolic variables to symbolic seed\n\t    def inject_symbolic_file_memory(self, addr: Addr, name: str, value: bytes, offset: int = 0) -> None:\n\t        \"\"\"\n\t        Inject a symbolic file (or part of it) in memory.\n\t        :param addr: address where to inject the file bytes\n\t        :param name: name of the file in the composite seed\n\t        :param value: bytes content of the file\n\t        :param offset: offset within the file (for partial file injection)\n\t        \"\"\"\n", "        self.pstate.memory.write(addr, value)  # Write concrete bytes in memory\n\t        sym_vars = self.pstate.symbolize_memory_bytes(addr, len(value), name, offset) # Symbolize bytes\n\t        sym_seed = self.symbolic_seed.files[name] if self.seed.is_composite() else self.symbolic_seed\n\t        sym_seed[offset:offset+len(value)] = sym_vars # Add symbolic variables to symbolic seed\n\t        # FIXME: Handle if reading twice same input bytes !\n\t    def inject_symbolic_variable_memory(self, addr: Addr, name: str, value: bytes, offset: int = 0) -> None:\n\t        \"\"\"\n\t        Inject a symbolic variable in memory.\n\t        :param addr: address where to inject the variable\n\t        :param name: name of the variable in the composite seed\n", "        :param value: value of the variable\n\t        :param offset: offset within the variable (for partial variable injection)\n\t        :return:\n\t        \"\"\"\n\t        self.pstate.memory.write(addr, value)  # Write concrete bytes in memory\n\t        sym_vars = self.pstate.symbolize_memory_bytes(addr, len(value), name, offset)  # Symbolize bytes\n\t        self.symbolic_seed.variables[name][offset:offset+len(value)-1] = sym_vars # Add symbolic variables to symbolic seed\n\t        # FIXME: Handle if reading twice same input bytes !\n\t    def inject_symbolic_file_register(self, reg: Union[str, Register], name: str, value: int, offset: int = 0) -> None:\n\t        \"\"\"\n", "        Inject a symbolic file (or part of it) into a register.\n\t        The value has to be an integer.\n\t        :param reg: register identifier\n\t        :param name: name of the file in the composite seed\n\t        :param value: integer value\n\t        :param offset: offset within the file\n\t        \"\"\"\n\t        if reg.getSize != 1:\n\t            logger.error(\"can't call inject_symbolic_file_register with regsiter larger than 1!\")\n\t            return\n", "        self.pstate.write_register(reg, value)  # Write concrete value in register\n\t        sym_vars = self.pstate.symbolize_register(reg, f\"{name}[{offset}]\")  # Symbolize bytes\n\t        sym_seed = self.symbolic_seed.files[name] if self.seed.is_composite() else self.symbolic_seed\n\t        sym_seed[offset] = sym_vars  # Add symbolic variables to symbolic seed\n\t    def inject_symbolic_variable_register(self, reg: Union[str, Register], name: str, value: int) -> None:\n\t        \"\"\"\n\t        Inject a symbolic variable (or part of it) in a register.\n\t        The value has to be an integer.\n\t        :param reg: register identifier\n\t        :param name: name of the variable\n", "        :param value: integer value\n\t        \"\"\"\n\t        if not self.seed.is_composite():\n\t            logger.warning(\"cannot use inject_symbolic_variable_register on raw seeds!\")\n\t            return\n\t        if isinstance(value, int):\n\t            self.pstate.write_register(reg, value)                         # write concrete value in register\n\t            sym_var = self.pstate.symbolize_register(reg, f\"{name}[{0}]\")  # symbolize value\n\t            self.symbolic_seed.variables[name][0] = sym_var               # add the symbolic variables to symbolic seed\n\t        else:  # meant to be bytes\n", "            logger.warning(\"variable injected in registers have to be integer values\")\n\t    def inject_symbolic_raw_input(self, addr: Addr, data: bytes, offset: int = 0) -> None:\n\t        \"\"\"\n\t        Inject the input in memory. This injection method should\n\t        be used for RAW seed type.\n\t        :param addr: address where to inject input.\n\t        :param data: content of the seed\n\t        :param offset: offset within the content of the seed.\n\t        \"\"\"\n\t        if self.seed.is_composite():\n", "            logger.warning(\"inject_symbolic_memory must not be used with composite seeds !\")\n\t        else:\n\t            self.inject_symbolic_file_memory(addr, \"input\", data, offset)\n"]}
{"filename": "tritondse/coverage.py", "chunked_list": ["# built-in imports\n\tfrom __future__ import annotations\n\timport hashlib\n\timport struct\n\tfrom pathlib import Path\n\tfrom typing import List, Generator, Tuple, Set, Union, Dict, Optional\n\tfrom collections import Counter\n\tfrom enum import IntFlag, Enum, auto\n\timport pickle\n\timport enum_tools.documentation\n", "# third-party imports\n\tfrom triton import AST_NODE\n\t# local imports\n\tfrom tritondse.types import Addr, PathConstraint, PathBranch, SolverStatus, PathHash, Edge, SymExType\n\timport tritondse.logging\n\tlogger = tritondse.logging.get()\n\tCovItem = Union[Addr, Edge, PathHash, Tuple[PathHash, Edge]]\n\t\"\"\"\n\tVariant type representing a coverage item.\n\tIt can be:\n", "* an address :py:obj:`tritondse.types.Addr` for block coverage\n\t* an edge :py:obj:`tritondse.types.Edge` for edge coverage\n\t* a string :py:obj:`tritondse.types.PathHash` for path coverage\n\t* a tuple of both a Pathhash and an edge\n\t\"\"\"\n\t@enum_tools.documentation.document_enum\n\tclass CoverageStrategy(str, Enum):\n\t    \"\"\"\n\t    Coverage strategy (metric) enum.\n\t    This enum will change whether a given branch have\n", "    to be solved or not.\n\t    \"\"\"\n\t    BLOCK = \"block\"   # doc: block coverage, only tracks new basic blocks covered\n\t    EDGE = \"edge\"     # doc: edge coverage, tracks CFGs edges covered\n\t    PATH = \"path\"     # doc: tracks any new path covered\n\t    PREFIXED_EDGE = \"PREFIXED_EDGE\"  # doc: edge coverage but also taking in account path prefix)\n\t@enum_tools.documentation.document_enum\n\tclass BranchSolvingStrategy(IntFlag):\n\t    \"\"\"\n\t    Branch strategy enumerate.\n", "    It defines the manner with which branches are checked with SMT\n\t    on a single trace, namely a :py:obj:`CoverageSingleRun`. For a\n\t    given branch that has not been covered strategies are:\n\t    * ``ALL_NOT_COVERED``: check by SMT all occurences\n\t    * ``FIRST_LAST_NOT_COVERED``: check only the first and last occurence in the trace\n\t    \"\"\"\n\t    ALL_NOT_COVERED = auto()         # doc: check by SMT all occurences of a given branch (true by default)\n\t    FIRST_LAST_NOT_COVERED = auto()  # doc: check by SMT the first and last occurence of a given branch\n\t    UNSAT_ONCE = auto()              # doc: if a branch is UNSAT do not try solving it again\n\t    TIMEOUT_ONCE = auto()            # doc: if a branch is TIMEOUT do not try solving it again\n", "    TIMEOUT_ALWAYS = auto()          # doc: always try solving again a TIMEOUT branch (incompatible with :py:enum:mem:`TIMEOUT_ONCE`\n\t    COVER_SYM_DYNJUMP = auto()       # doc: try covering dynamic jumps on a symbolic register or memory value\n\t    COVER_SYM_READ = auto()          # doc: try enumerating values for symbolic reads\n\t    COVER_SYM_WRITE = auto()         # doc: try enumerating values for symbolic writes\n\t    SOUND_MEM_ACCESS = auto()        # doc: enables adding a constraint when using a symbolic read/write or jump\n\t    MANUAL = auto()                  # doc: disable automatic branch solving after an execution (has to be done manually in callbacks)\n\tclass CoverageSingleRun(object):\n\t    \"\"\"\n\t    Coverage produced by a **Single Execution**\n\t    Depending on the strategy given to the constructor\n", "    it stores different data.\n\t    \"\"\"\n\t    def __init__(self, strategy: CoverageStrategy):\n\t        \"\"\"\n\t        :param strategy: Strategy to employ\n\t        :type strategy: CoverageStrategy\n\t        \"\"\"\n\t        self.strategy: CoverageStrategy = strategy  #: Coverage strategy\n\t        # For instruction coverage\n\t        self.covered_instructions: Dict[Addr, int] = Counter()\n", "        \"\"\" Instruction coverage. Counter for code coverage) \"\"\"\n\t        self.covered_items: Dict[CovItem, int] = Counter()\n\t        \"\"\" Stores covered items whatever they are \"\"\"\n\t        self.not_covered_items: Set[CovItem] = set()\n\t        self._not_covered_items_mirror: Dict[CovItem, List[str]] = {}  # solely used for prefixed-edge\n\t        \"\"\" CovItems not covered in the trace. It thus represent what can be\n\t        covered by the trace (input). We call it coverage objectives.\"\"\"\n\t        # For path coverage\n\t        self._current_path: List[Addr] = []\n\t        \"\"\" List of addresses forming the path currently being taken \"\"\"\n", "        self._current_path_hash = hashlib.md5()\n\t    def add_covered_address(self, address: Addr) -> None:\n\t        \"\"\"\n\t        Add an instruction address covered.\n\t        *(Called by :py:obj:`SymbolicExecutor` for each\n\t        instruction executed)*\n\t        :param address: The address of the instruction\n\t        :type address: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n\t        self.covered_instructions[address] += 1\n", "    def add_covered_dynamic_branch(self, source: Addr, target: Addr) -> None:\n\t        \"\"\"\n\t        Add a dynamic branch covered. The branch will be encoded according to the\n\t        coverage strategy.\n\t        :param source: Address of the dynamic jump\n\t        :param target: Target address on which the jump is performed\n\t        :return:\n\t        \"\"\"\n\t        if self.strategy == CoverageStrategy.BLOCK:\n\t            pass # Target address will be covered anyway\n", "        if self.strategy == CoverageStrategy.EDGE:\n\t            self.covered_items[(source, target)] += 1\n\t            self.not_covered_items.discard((source, target))    # Remove it from non-taken if it was inside\n\t        if self.strategy == CoverageStrategy.PATH:\n\t            self._current_path.append(target)\n\t            self._current_path_hash.update(struct.pack(\"<Q\", target))\n\t            self.covered_items[self._current_path_hash.hexdigest()] += 1\n\t        if self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            # Add covered as covered\n\t            self.covered_items[(\"\", (source, target))] += 1\n", "            # update the current path hash etc\n\t            self._current_path.append(target)\n\t            self._current_path_hash.update(struct.pack(\"<Q\", target))\n\t    def add_covered_branch(self, program_counter: Addr, taken_addr: Addr, not_taken_addr: Addr) -> None:\n\t        \"\"\"\n\t        Add a branch to our covered branches list. Each branch is encoded according\n\t        to the coverage strategy. For code coverage, the branch encoding is the\n\t        address of the instruction. For edge coverage, the branch encoding is the\n\t        tupe (src address, dst address). For path coverage, the branch encoding\n\t        is the MD5 of the conjunction of all taken branch addresses.\n", "        :param program_counter: The address taken in by the branch\n\t        :type program_counter: :py:obj:`tritondse.types.Addr`\n\t        :param taken_addr: Target address of branch taken\n\t        :type taken_addr: Addr\n\t        :param not_taken_addr: Target address of branch **not** taken\n\t        :type not_taken_addr: Addr\n\t        \"\"\"\n\t        if self.strategy == CoverageStrategy.BLOCK:\n\t            self.covered_items[taken_addr] += 1\n\t            self.not_covered_items.discard(taken_addr)    # remove address from non-covered if inside\n", "            if not_taken_addr not in self.covered_items:  # Keep the address that has not been covered (and could have)\n\t                self.not_covered_items.add(not_taken_addr)\n\t        if self.strategy == CoverageStrategy.EDGE:\n\t            taken_tuple, not_taken_tuple = (program_counter, taken_addr), (program_counter, not_taken_addr)\n\t            self.covered_items[taken_tuple] += 1\n\t            self.not_covered_items.discard(taken_tuple)    # Remove it from non-taken if it was inside\n\t            if not_taken_tuple not in self.covered_items:  # Add the not taken tuple in non-covered\n\t                self.not_covered_items.add(not_taken_tuple)\n\t        if self.strategy == CoverageStrategy.PATH:\n\t            self._current_path.append(taken_addr)\n", "            # Compute the hash of the not taken path and add it to non-covered paths\n\t            not_taken_path_hash = self._current_path_hash.copy()\n\t            not_taken_path_hash.update(struct.pack('<Q', not_taken_addr))\n\t            self.not_covered_items.add(not_taken_path_hash.hexdigest())\n\t            # Update the current path hash and add it to hashes\n\t            self._current_path_hash.update(struct.pack(\"<Q\", taken_addr))\n\t            self.covered_items[self._current_path_hash.hexdigest()] += 1\n\t        if self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            taken_tuple, not_taken_tuple = (program_counter, taken_addr), (program_counter, not_taken_addr)\n\t            _, not_taken = (self._current_path_hash.hexdigest(), taken_tuple), (self._current_path_hash.hexdigest(), not_taken_tuple)\n", "            gtaken, gnot_taken = (\"\", taken_tuple), (\"\", not_taken_tuple)\n\t            # Add covered as covered\n\t            self.covered_items[gtaken] += 1\n\t            # Find all items in not_covered that have this edge\n\t            if taken_tuple in self._not_covered_items_mirror:               # if a not_covered match this edge\n\t                for prefix in self._not_covered_items_mirror[taken_tuple]:  # iterate all the prefixes\n\t                    self.not_covered_items.discard((prefix, taken_tuple))   # and discard them\n\t                self._not_covered_items_mirror.pop(taken_tuple)             # finally discard the entry\n\t            # look if not_taken edge not in covered\n\t            if gnot_taken not in self.covered_items:\n", "                self.not_covered_items.add(not_taken)\n\t                if not_taken[1] not in self._not_covered_items_mirror:\n\t                    self._not_covered_items_mirror[not_taken[1]] = [not_taken[0]]\n\t                else:\n\t                    self._not_covered_items_mirror[not_taken[1]].append(not_taken[0])\n\t            # update the current path hash etc\n\t            self._current_path.append(taken_addr)\n\t            self._current_path_hash.update(struct.pack(\"<Q\", taken_addr))\n\t    @property\n\t    def unique_instruction_covered(self) -> int:\n", "        \"\"\"\n\t        :return: The number of unique instructions covered\n\t        \"\"\"\n\t        return len(self.covered_instructions)\n\t    @property\n\t    def unique_covitem_covered(self) -> int:\n\t        \"\"\"\n\t        :return: The number of unique edges covered\n\t        \"\"\"\n\t        return len(self.covered_items)\n", "    @property\n\t    def total_instruction_executed(self) -> int:\n\t        \"\"\"\n\t        :return: The number of total instruction executed\n\t        \"\"\"\n\t        return sum(self.covered_instructions.values())\n\t    def post_execution(self) -> None:\n\t        \"\"\"\n\t        Function is called after each execution\n\t        for post processing or clean-up. *(Not\n", "        doing anythin at the moment)*\n\t        \"\"\"\n\t        pass\n\t    def is_covered(self, item: CovItem) -> bool:\n\t        \"\"\"\n\t        Return whether the item has been covered or not.\n\t        **The item should match the strategy**\n\t        :param item: An address, an edge or a path\n\t        :type item: CovItem\n\t        :return: bool\n", "        \"\"\"\n\t        if self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            try:\n\t                return ('', item[1]) in self.covered_items\n\t            except TypeError:  # in case of ellipsis\n\t                return False\n\t        else:\n\t            return item in self.covered_items\n\t    def pp_item(self, covitem: CovItem) -> str:\n\t        \"\"\"\n", "        Pretty print a CovItem according the coverage strategy\n\t        :param covitem: An address, an edge or a path\n\t        :return: str\n\t        \"\"\"\n\t        if self.strategy == CoverageStrategy.BLOCK:\n\t            return f\"0x{covitem:08x}\"\n\t        elif self.strategy == CoverageStrategy.EDGE:\n\t            return f\"(0x{covitem[0]:08x}-0x{covitem[1]:08x})\"\n\t        elif self.strategy == CoverageStrategy.PATH:\n\t            return covitem[:10]  # already a hash str\n", "        elif self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            return f\"({covitem[0][:6]}_0x{covitem[1][0]:08x}-0x{covitem[1][1]:08x})\"\n\t    def difference(self, other: CoverageSingleRun) -> Set[CovItem]:\n\t        if self.strategy == other.strategy:\n\t            return self.covered_items.keys() - other.covered_items.keys()\n\t        else:\n\t            logger.error(\"Trying to make difference of coverage with different strategies\")\n\t            return set()\n\t    def __sub__(self, other) -> Set[CovItem]:\n\t        return self.difference(other)\n", "class GlobalCoverage(CoverageSingleRun):\n\t    \"\"\"\n\t    Global Coverage.\n\t    Represent the overall coverage of the exploration.\n\t    It is filled by iteratively call merge with the\n\t    :py:obj:`CoverageSingleRun` objects created during\n\t    exploration.\n\t    \"\"\"\n\t    COVERAGE_FILE = \"coverage.json\"\n\t    def __init__(self, strategy: CoverageStrategy, branch_strategy: BranchSolvingStrategy):\n", "        \"\"\"\n\t        :param strategy: Coverage strategy to use\n\t        :type strategy: CoverageStrategy\n\t        :param branch_strategy: Branch checking strategies\n\t        :type branch_strategy: BranchSolvingStrategy\n\t        \"\"\"\n\t        super().__init__(strategy)\n\t        self.branch_strategy = branch_strategy\n\t        # Keep pending items to be covered (code, edge, path)\n\t        self.pending_coverage: Set[CovItem] = set()\n", "        \"\"\" Set of pending coverage items. These are items for which a branch\n\t        as already been solved and \n\t        \"\"\"\n\t        self.uncoverable_items: Dict[CovItem, SolverStatus] = {}\n\t        \"\"\" CovItems that are determined not to be coverable. \"\"\"\n\t        self.covered_symbolic_pointers: Set[Addr] = set()\n\t        \"\"\" Set of addresses for which pointers have been enumerated \"\"\"\n\t    def iter_new_paths(self, path_constraints: List[PathConstraint]) -> Generator[Tuple[SymExType, List[PathConstraint], PathBranch, CovItem, int], Optional[SolverStatus], None]:\n\t        \"\"\"\n\t        The function iterate the given path predicate and yield PatchConstraint to\n", "        consider as-is and PathBranch representing the new branch to take. It acts\n\t        as a black-box so that the SeedManager does not have to know what strategy\n\t        is being used under the hood. From an implementation perspective the goal\n\t        of the function is to manipulate the path WITHOUT doing any SMT related things.\n\t        :param path_constraints: list of path constraint to iterate\n\t        :return: generator of path constraint and branches to solve. The first tuple\n\t                 item is a list of PathConstraint to add in the path predicate and the second\n\t                 is the branch to solve (but not to keep in path predicate)\n\t        \"\"\"\n\t        if BranchSolvingStrategy.MANUAL in self.branch_strategy:\n", "            logger.info(f'Branch solving strategy set to MANUAL.')\n\t            return\n\t        pending_csts = []\n\t        current_hash = hashlib.md5()  # Current path hash for PATH coverage\n\t        # NOTE: When we arrive here the CoverageSingleRun associated with the path_constraints\n\t        # has already been merge. Thus covered, pending etc do include ones of the CoverageSingleRuns\n\t        not_covered_items = self._get_items_trace(path_constraints)  # Map of CovItem -> [idx1, idx2, ..., .] (occurence in list)\n\t        # is_ok_with_branch_strategy = lambda covitem, idx: True if self.strategy == CoverageStrategy.PATH else (idx in occurence_map[covitem])\n\t        # Re-iterate through all path constraints to solve them concretely (with knowledge of what is beyond in the trace)\n\t        for i, pc in enumerate(path_constraints):\n", "            if pc.isMultipleBranches():     # If there is a condition\n\t                for branch in pc.getBranchConstraints():  # Get all branches\n\t                    # Get the constraint of the branch which has not been taken.\n\t                    if not branch['isTaken']:\n\t                        covitem = self._get_covitem(current_hash, branch)\n\t                        generic_covitem = ('', covitem[1]) if self.strategy == CoverageStrategy.PREFIXED_EDGE else covitem\n\t                        #print(f\"Covitem: {covitem}: {covitem not in self.covered_items} | {covitem not in self.pending_coverage} | {covitem not in self.uncoverable_items} | {i in not_covered_items.get(covitem, [])} | {i} | {not_covered_items.get(covitem)}\")\n\t                        # Not covered in: previous runs | yet to be covered by a seed already SAT | not uncoverable | parts of items to solve\n\t                        if generic_covitem not in self.covered_items and \\\n\t                           generic_covitem not in self.pending_coverage and \\\n", "                           covitem not in self.uncoverable_items and \\\n\t                           i in not_covered_items.get(covitem, []):\n\t                            # Send the branch to solve to the function iterating\n\t                            res = yield SymExType.CONDITIONAL_JMP, pending_csts, branch, covitem, i\n\t                            # If path SAT add it to pending coverage\n\t                            if res == SolverStatus.SAT:\n\t                                self.pending_coverage.add(generic_covitem)\n\t                            elif res == SolverStatus.UNSAT:\n\t                                if BranchSolvingStrategy.UNSAT_ONCE in self.branch_strategy:\n\t                                    self.uncoverable_items[covitem] = res\n", "                                elif self.strategy in [CoverageStrategy.PATH, CoverageStrategy.PREFIXED_EDGE]:\n\t                                    self.uncoverable_items[covitem] = res  # paths, and prefixed-edge ensure to be unique thus drop if unsat\n\t                            elif res == SolverStatus.TIMEOUT:\n\t                                if BranchSolvingStrategy.TIMEOUT_ONCE in self.branch_strategy:\n\t                                    self.uncoverable_items[covitem] = res\n\t                            elif res == SolverStatus.UNKNOWN:\n\t                                pass\n\t                            else: # status == None\n\t                                logger.debug(f'Branch skipped!')\n\t                            pending_csts = []  # reset pending constraint added\n", "                    else:\n\t                        pass  # Branch was taken do nothing\n\t                # Add it the path predicate constraints and update current path hash\n\t                pending_csts.append(pc)\n\t                current_hash.update(struct.pack(\"<Q\", pc.getTakenAddress()))\n\t            else:\n\t                cmt = pc.getComment()\n\t                if (cmt.startswith(\"dyn-jmp\") and BranchSolvingStrategy.COVER_SYM_DYNJUMP in self.branch_strategy) or \\\n\t                   (cmt.startswith(\"sym-read\") and BranchSolvingStrategy.COVER_SYM_READ in self.branch_strategy) or \\\n\t                   (cmt.startswith(\"sym-write\") and BranchSolvingStrategy.COVER_SYM_WRITE in self.branch_strategy):\n", "                    typ, offset, addr = cmt.split(\":\")\n\t                    typ = SymExType(typ)\n\t                    offset, addr = int(offset), int(addr)\n\t                    if addr not in self.covered_symbolic_pointers:  # if the address pointer has never been covered\n\t                        pred = pc.getTakenPredicate()\n\t                        if pred.getType() == AST_NODE.EQUAL:\n\t                            p1, p2 = pred.getChildren()\n\t                            if p2.getType() == AST_NODE.BV:\n\t                                logger.info(f\"Try to enumerate value {offset}:0x{addr:02x}: {p1}\")\n\t                                res = yield typ, pending_csts, p1, (addr, p2.evaluate()), i\n", "                                self.covered_symbolic_pointers.add(addr)  # add the pointer in covered regardless of result\n\t                            else:\n\t                                logger.warning(f\"memory constraint unexpected pattern: {pred}\")\n\t                        else:\n\t                            logger.warning(f\"memory constraint unexpected pattern: {pred}\")\n\t                    if BranchSolvingStrategy.SOUND_MEM_ACCESS in self.branch_strategy:\n\t                        pending_csts.append(pc)  # if sound add the mem dereference as a constraint in path predicate\n\t                        # NOTE: in both case the branch is not taken in account in the current_path_hash\n\t                else:  # Routines, or user-defined constraints thus add it all the time.\n\t                    pending_csts.append(pc)\n", "    def _get_covitem(self, path_hash, branch: PathBranch) -> CovItem:\n\t        src, dst = branch['srcAddr'], branch['dstAddr']\n\t        # Check if the target is new with regards to the strategy\n\t        if self.strategy == CoverageStrategy.BLOCK:\n\t            return dst\n\t        elif self.strategy == CoverageStrategy.EDGE:\n\t            return src, dst\n\t        elif self.strategy == CoverageStrategy.PATH:\n\t            # Have to fork the hash of the current pc for each branch we want to revert\n\t            forked_hash = path_hash.copy()\n", "            forked_hash.update(struct.pack(\"<Q\", dst))\n\t            return forked_hash.hexdigest()\n\t        elif self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            return path_hash.hexdigest(), (src, dst)\n\t        else:\n\t            assert False\n\t    def _get_items_trace(self, path_constraints: List[PathConstraint]) -> Dict[CovItem, List[int]]:\n\t        \"\"\"\n\t        Iterate the all trace and retrieve all covered and not covered CovItem. For non covered one\n\t        it filter instances to check.\n", "        \"\"\"\n\t        not_covered = {}\n\t        current_hash = hashlib.md5()  # Current path hash for PATH coverage\n\t        for i, pc in enumerate(path_constraints):\n\t            if pc.isMultipleBranches():     # If there is a condition\n\t                for branch in pc.getBranchConstraints():  # Get all branches\n\t                    if not branch['isTaken']:\n\t                        covitem = self._get_covitem(current_hash, branch)\n\t                        if covitem in not_covered:\n\t                            not_covered[covitem].append(i)\n", "                        else:\n\t                            not_covered[covitem] = [i]\n\t                current_hash.update(struct.pack(\"<Q\", pc.getTakenAddress()))  # compute current path hash along the way\n\t            else:\n\t                pass  # Ignore all other dynamic constraints in path computation\n\t        # Now filter the map according to the branch solving strategy\n\t        if BranchSolvingStrategy.FIRST_LAST_NOT_COVERED in self.branch_strategy:\n\t            if self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t                # Black magic\n\t                m = {(\"\", e): [] for h, e in not_covered.keys()}  # Map: (\"\", edge) -> []\n", "                for (h, e), v in not_covered.items():          # fill map with all occurences edges regardless of path\n\t                    m[(\"\", e)].extend(v)\n\t                for k in m.keys():                             # iterate the result and only keep min and max occurence\n\t                    idxs = m[k]\n\t                    if len(idxs) > 2:\n\t                        m[k] = [min(idxs), max(idxs)]\n\t                for k in not_covered.keys():                   # Push back resulting list in not_covered items\n\t                    not_covered[k] = m[('', k[1])]\n\t            else:  # Straightforward\n\t                for k in not_covered.keys():\n", "                    l = not_covered[k]\n\t                    if len(l) > 2:\n\t                        not_covered[k] = [l[0], l[-1]]  # Only keep first and last iteration\n\t        else: # ALL_NOT_COVERED\n\t            pass  # Keep all occurences\n\t        return not_covered\n\t    def merge(self, other: CoverageSingleRun) -> None:\n\t        \"\"\"\n\t        Merge a CoverageSingeRun instance into this instance\n\t        :param other: The CoverageSingleRun to merge into self\n", "        :type other: CoverageSingleRun\n\t        \"\"\"\n\t        assert self.strategy == other.strategy\n\t        # Update instruction coverage for code coverage (in all cases keep code coverage)\n\t        self.covered_instructions.update(other.covered_instructions)\n\t        # Remove covered items from pending ones\n\t        self.pending_coverage.difference_update(other.covered_items)\n\t        # Update covered items\n\t        self.covered_items.update(other.covered_items)\n\t        # Update non-covered ones\n", "        if self.strategy == CoverageStrategy.PREFIXED_EDGE:\n\t            # More complex as not_covered as covitem: (hash, edge) while covered has covitems: (\"\", edge)\n\t            # remove self not covered that are now covered\n\t            for _, edge in other.covered_items.keys():\n\t                if edge in self._not_covered_items_mirror:\n\t                    for prefix in self._not_covered_items_mirror[edge]:  # iterate all the prefixes\n\t                        self.not_covered_items.discard((prefix, edge))  # and discard them\n\t                    self._not_covered_items_mirror.pop(edge)  # finally discard the entry\n\t            # Only add other not covered if still not covered\n\t            for prefix, edge in other.not_covered_items:\n", "                if (\"\", edge) not in self.covered_items:\n\t                    self.not_covered_items.add((prefix, edge))\n\t                    if edge not in self._not_covered_items_mirror:\n\t                        self._not_covered_items_mirror[edge] = [prefix]\n\t                    else:\n\t                        self._not_covered_items_mirror[edge].append(prefix)\n\t        else: # Straightfoward set difference\n\t            self.not_covered_items.update(other.not_covered_items - self.covered_items.keys())\n\t    def can_improve_coverage(self, other: CoverageSingleRun) -> bool:\n\t        \"\"\"\n", "        Check if some of the non-covered are not already in the global coverage\n\t        Used to know if an input is relevant to keep or not\n\t        :param other: The CoverageSingleRun to check against our global coverage state\n\t        :return: bool\n\t        \"\"\"\n\t        return bool(self.new_items_to_cover(other))\n\t    def can_cover_symbolic_pointers(self, execution: 'SymbolicExecutor') -> bool:\n\t        \"\"\"\n\t        Determines if this execution has symbolic memory accesses to enumerate. If so we may want\n\t        to enumerate them even though \n", "        \"\"\"\n\t        path_constraints = execution.pstate.get_path_constraints()\n\t        for pc in path_constraints:\n\t            if not pc.isMultipleBranches():     # If there isn't a condition i.e it's a sym ptr access\n\t                cmt = pc.getComment()\n\t                if (cmt.startswith(\"dyn-jmp\") and BranchSolvingStrategy.COVER_SYM_DYNJUMP in self.branch_strategy) or \\\n\t                   (cmt.startswith(\"sym-read\") and BranchSolvingStrategy.COVER_SYM_READ in self.branch_strategy) or \\\n\t                   (cmt.startswith(\"sym-write\") and BranchSolvingStrategy.COVER_SYM_WRITE in self.branch_strategy):\n\t                    typ, offset, addr = cmt.split(\":\")\n\t                    typ = SymExType(typ)\n", "                    offset, addr = int(offset), int(addr)\n\t                    if addr not in self.covered_symbolic_pointers:  # if the address pointer has never been covered\n\t                        return True\n\t        return False\n\t    def new_items_to_cover(self, other: CoverageSingleRun) -> Set[CovItem]:\n\t        \"\"\"\n\t        Return all coverage items (addreses, edges, paths) that the given CoverageSingleRun\n\t        can cover if it is possible to negate their branches\n\t        :param other: The CoverageSingleRun to check with our global coverage state\n\t        :return: A set of CovItem\n", "        \"\"\"\n\t        assert self.strategy == other.strategy\n\t        # Take not covered_items (potential candidates) substract already covered items, uncoverable and pending ones.\n\t        # Resulting covitem are really new ones that the trace brings\n\t        return other.not_covered_items - self.covered_items.keys() - self.uncoverable_items.keys() - self.pending_coverage\n\t    def improve_coverage(self, other: CoverageSingleRun) -> bool:\n\t        \"\"\"\n\t        Checks if the given object do cover new covitem than the current\n\t        coverage. More concretely it performs the difference between the\n\t        two covered dicts. If ``other`` contains new items return True.\n", "        :param other: coverage on which to check coverage\n\t        :return: Whether the coverage covers new items\n\t        \"\"\"\n\t        return bool(other.covered_items.keys() - self.covered_items.keys())\n\t    @staticmethod\n\t    def from_file(file: Union[str, Path]) -> 'GlobalCoverage':\n\t        with open(file, \"rb\") as f:\n\t            obj = pickle.load(f)\n\t        return obj\n\t    def to_file(self, file: Union[str, Path]) -> None:\n", "        copy = self._current_path_hash\n\t        self._current_path_hash = None\n\t        with open(file, \"wb\") as f:\n\t            pickle.dump(self, f)\n\t        self._current_path_hash = copy\n\t    def post_exploration(self, workspace: 'Workspace') -> None:\n\t        \"\"\" Function called at the very end of the exploration.\n\t        It saves the coverage in the workspace.\n\t        :param workspace: Workspace in which to save coverage\n\t        :type workspace: Workspace\n", "        \"\"\"\n\t        # Save the coverage\n\t        self.to_file(workspace.get_metadata_file_path(self.COVERAGE_FILE))\n\t    def clone(self) -> 'GlobalCoverage':\n\t        cov2 = GlobalCoverage(self.strategy, self.branch_strategy)\n\t        # Copy items from the CoverageSingleRun\n\t        cov2.covered_instructions = Counter({k: v for k, v in self.covered_instructions.items()})\n\t        cov2.covered_items = Counter({k: v for k, v in self.covered_items.items()})\n\t        cov2.not_covered_items = {x for x in self.not_covered_items}\n\t        cov2._not_covered_items_mirror = {k: v for k, v in self._not_covered_items_mirror.items()}\n", "        cov2._current_path = self._current_path[:]\n\t        self._current_path: List[Addr] = []\n\t        self._current_path_hash = self._current_path_hash.copy()\n\t        # Copy items from the global coverage\n\t        cov2.pending_coverage = {x for x in self.pending_coverage}\n\t        cov2.uncoverable_items = {k: v for k, v in self.uncoverable_items.items()}\n\t        cov2.covered_symbolic_pointers = {x for x in self.covered_symbolic_pointers}\n\t        return cov2\n"]}
{"filename": "tritondse/memory.py", "chunked_list": ["from triton import TritonContext\n\timport bisect\n\tfrom typing import Optional, Union, Generator, List\n\tfrom collections import namedtuple\n\timport struct\n\tfrom contextlib import contextmanager\n\tfrom tritondse.types import Perm, Addr, ByteSize, Endian\n\tMemMap = namedtuple('Map', \"start size perm name\")\n\tclass MapOverlapException(Exception):\n\t    \"\"\"\n", "    Exception raised when trying to map a memory area where some of\n\t    the addresses overlap with an already mapped area.\n\t    \"\"\"\n\t    pass\n\tclass MemoryAccessViolation(Exception):\n\t    \"\"\"\n\t    Exception triggered when accessing memory with\n\t    the wrong permissions.\n\t    \"\"\"\n\t    def __init__(self, addr: Addr, access: Perm, map_perm: Perm = None, memory_not_mapped: bool = False, perm_error: bool = False):\n", "        \"\"\"\n\t        :param addr: address where the violation occured\n\t        :param access: type of access performed\n\t        :param map_perm: permission of the memory page of `address`\n\t        :param memory_not_mapped: whether the address was mapped or not\n\t        :param perm_error: whether it is a permission error\n\t        \"\"\"\n\t        super(MemoryAccessViolation, self).__init__()\n\t        self.address: Addr = addr\n\t        \"\"\" address where the violation occurred\"\"\"\n", "        self._is_mem_unmapped = memory_not_mapped\n\t        self._is_perm_error = perm_error\n\t        self.access: Perm = access\n\t        \"\"\"Access type that was performed\"\"\"\n\t        self.map_perm: Optional[Perm] = map_perm\n\t        \"\"\"Permissions of the memory map associated to the address\"\"\"\n\t    def is_permission_error(self) -> bool:\n\t        \"\"\"True if the exception was caused by a permission issue\"\"\"\n\t        return self._is_perm_error\n\t    def is_memory_unmapped_error(self) -> bool:\n", "        \"\"\"\n\t        Return true if the exception was raised due to an access\n\t        to an area not mapped\n\t        \"\"\"\n\t        return self._is_mem_unmapped\n\t    def __str__(self) -> str:\n\t        if self.is_permission_error():\n\t            return f\"(addr:{self.address:#08x}, access:{str(self.access)} on map:{str(self.map_perm)})\"\n\t        else:\n\t            return f\"({str(self.access)}: {self.address:#08x} unmapped)\"\n", "    def __repr__(self):\n\t        return str(self)\n\tSTRUCT_MAP = {\n\t    (True, 1): 'B',\n\t    (False, 1): 'b',\n\t    (True, 2): 'H',\n\t    (False, 2): 'h',\n\t    (True, 4): 'I',\n\t    (False, 4): 'i',\n\t    (True, 8): 'Q',\n", "    (False, 8): 'q'\n\t}\n\tENDIAN_MAP = {\n\t    Endian.LITTLE: \"<\",\n\t    Endian.BIG: \">\"\n\t}\n\tclass Memory(object):\n\t    \"\"\"\n\t    Memory representation of the current :py:class:`ProcessState` object.\n\t    It wraps all interaction with Triton's memory context to provide high-level\n", "    function. It adds a segmentation and memory permission model at the top\n\t    of Triton. It also overrides __getitem__ and the slice mechanism to be able\n\t    read and write concrete memory values in a Pythonic manner.\n\t    \"\"\"\n\t    def __init__(self, ctx: TritonContext, endianness: Endian = Endian.LITTLE):\n\t        \"\"\"\n\t        :param ctx: TritonContext to interface with\n\t        \"\"\"\n\t        self.ctx: TritonContext = ctx\n\t        \"\"\"Underlying Triton context\"\"\"\n", "        self._linear_map_addr = []  # List of [map_start, map_end, map_start, map_end ...]\n\t        self._linear_map_map = []   # List of [MemMap,    None,    MemMap,    None    ...]\n\t        self._segment_enabled = True\n\t        self._endian = endianness\n\t        self._endian_key = ENDIAN_MAP[self._endian]\n\t        self._mem_cbs_enabled = True\n\t        # self._maps = {}  # Addr: -> Map\n\t    def set_endianess(self, en: Endian) -> None:\n\t        \"\"\"\n\t        Set the endianness of memory accesses. By default,\n", "        endianess is little.\n\t        :param en: Endian: Endianess to use.\n\t        :return: None\n\t        \"\"\"\n\t        self._endian = en\n\t        self._endian_key = ENDIAN_MAP[self._endian]\n\t    @property\n\t    def _ptr_size(self) -> int:\n\t        return self.ctx.getGprSize()\n\t    @property\n", "    def segmentation_enabled(self) -> bool:\n\t        \"\"\"\n\t        returns whether segmentation enforcing is enabled\n\t        :return: True if segmentation is enabled\n\t        \"\"\"\n\t        return self._segment_enabled\n\t    def disable_segmentation(self) -> None:\n\t        \"\"\"\n\t        Turn-off segmentation enforcing.\n\t        \"\"\"\n", "        self._segment_enabled = False\n\t    def enable_segmentation(self) -> None:\n\t        \"\"\"\n\t        Turn-off segmentation enforcing.\n\t        \"\"\"\n\t        self._segment_enabled = True\n\t    def set_segmentation(self, enabled: bool) -> None:\n\t        \"\"\"\n\t        Set the segmentation enforcing with the given boolean.\n\t        \"\"\"\n", "        self._segment_enabled = enabled\n\t    @contextmanager\n\t    def without_segmentation(self, disable_callbacks=False) -> Generator['Memory', None, None]:\n\t        \"\"\"\n\t        Context manager enabling manipulating temporarily the memory\n\t        without considering the memory permissions.\n\t        E.g: It enables writing data in a memory mapped in RX\n\t        :param disable_callbacks: Whether to disable memory callbacks that could have been set\n\t        :return:\n\t        \"\"\"\n", "        previous = self._segment_enabled\n\t        self.disable_segmentation()\n\t        cbs = self._mem_cbs_enabled\n\t        self._mem_cbs_enabled = not disable_callbacks\n\t        yield self\n\t        self._mem_cbs_enabled = cbs\n\t        self.set_segmentation(previous)\n\t    def callbacks_enabled(self) -> bool:\n\t        \"\"\"\n\t        Return whether memory callbacks are enabled.\n", "        :return: True if callbacks are enabled\n\t        \"\"\"\n\t        return self._mem_cbs_enabled\n\t    def get_maps(self) -> Generator[MemMap, None, None]:\n\t        \"\"\"\n\t        Iterate all the memory maps defined, including all memory\n\t        areas allocated on the heap.\n\t        :return: generator of all :py:class:`MemMap` objects\n\t        \"\"\"\n\t        yield from (x for x in self._linear_map_map if x)\n", "    def map(self, start, size, perm: Perm = Perm.R | Perm.W | Perm.X, name=\"\") -> MemMap:\n\t        \"\"\"\n\t        Map the given address and size in memory with the given permission.\n\t        :raise MapOverlapException: In the case the map overlap an existing mapping\n\t        :param start: address to map\n\t        :param size: size to map\n\t        :param perm: permission\n\t        :param name: name to given to the memory region\n\t        :return: MemMap freshly mapped\n\t        \"\"\"\n", "        def _map_idx(idx):\n\t            self._linear_map_addr.insert(idx, start + size - 1)  # end address is included\n\t            self._linear_map_addr.insert(idx, start)\n\t            self._linear_map_map.insert(idx, None)\n\t            memmap = MemMap(start, size, perm, name)\n\t            self._linear_map_map.insert(idx, memmap)\n\t            return memmap\n\t        if not self._linear_map_addr:  # Nothing mapped yet\n\t            return _map_idx(0)\n\t        idx = bisect.bisect_left(self._linear_map_addr, start)\n", "        if idx == len(self._linear_map_addr):  # It should be mapped at the end\n\t            return _map_idx(idx)\n\t        addr = self._linear_map_addr[idx]\n\t        if (idx % 2) == 0:  # We are on a start address\n\t            if start < addr and start+size <= addr:  # Can fit before\n\t                return _map_idx(idx)\n\t            else:  # there is an overlap\n\t                raise MapOverlapException(f\"0x{start:08x}:{size} overlap with map: 0x{addr:08x} (even)\")\n\t        else:  # We are on an end address\n\t            prev = self._linear_map_addr[idx-1]\n", "            raise MapOverlapException(f\"0x{start:08x}:{size} overlap with map: 0x{prev:08x} (odd)\")\n\t    def unmap(self, addr: Addr) -> None:\n\t        \"\"\"\n\t        Unmap the :py:class:`MemMap` object mapped at the address.\n\t        The address can be within the map and not requires pointing\n\t        at the head.\n\t        :param addr: address to unmap\n\t        :return: None\n\t        \"\"\"\n\t        def _unmap_idx(idx):\n", "            self._linear_map_addr.pop(idx) # Pop the start\n\t            self._linear_map_addr.pop(idx) # Pop the end\n\t            self._linear_map_map.pop(idx)  # Pop the object\n\t            self._linear_map_map.pop(idx)  # Pop the None padding\n\t        idx = bisect.bisect_left(self._linear_map_addr, addr)\n\t        try:\n\t            mapaddr = self._linear_map_addr[idx]\n\t            if (idx % 2) == 0:  # We are on a start address (meaning we should be exactly on map start other unmapped)\n\t                if addr == mapaddr:  # We are exactly on the map address\n\t                    _unmap_idx(idx)\n", "                else:\n\t                    raise MemoryAccessViolation(addr, Perm(0), memory_not_mapped=True)\n\t            else:  # We are on an end address\n\t                _unmap_idx(idx-1)\n\t        except IndexError:\n\t            raise MemoryAccessViolation(addr, Perm(0), memory_not_mapped=True)\n\t    def mprotect(self, addr: Addr, perm: Perm) -> None:\n\t        \"\"\"\n\t        Update the map at the given address with permissions provided in argument.\n\t        :param addr: address of the map of which to change permission\n", "        :param perm: permission to assign\n\t        :return: None\n\t        \"\"\"\n\t        idx = bisect.bisect_left(self._linear_map_addr, addr)\n\t        try:\n\t            if (idx % 2) == 0:  # We are on a start address (meaning we should be exactly on map start other unmapped)\n\t                map = self._linear_map_map[idx]\n\t                self._linear_map_map[idx] = MemMap(map.start, map.size, perm, map.name)  # replace map with new perms\n\t            else:  # We are on an end address\n\t                map = self._linear_map_map[idx-1]\n", "                self._linear_map_map[idx-1] = MemMap(map.start, map.size, perm, map.name)  # replace map with new perms\n\t        except IndexError:\n\t            raise MemoryAccessViolation(addr, Perm(0), memory_not_mapped=True)\n\t    def __setitem__(self, key: Addr, value: bytes) -> None:\n\t        \"\"\"\n\t        Assign the given value at the address given by the key.\n\t        The value must be bytes but can be multiple bytes.\n\t        Warning: You cannot use the slice API on this function.\n\t        :param key: address to write to\n\t        :param value: content to write\n", "        :raise MemoryAccessViolation: in case of invalid access\n\t        \"\"\"\n\t        if isinstance(key, slice):\n\t            raise TypeError(\"slice unsupported for __setitem__\")\n\t        else:\n\t            self.write(key, value)\n\t    def __getitem__(self, item: Union[Addr, slice]) -> bytes:\n\t        \"\"\"\n\t        Read the memory at the given address. If the key\n\t        is an integer reads a single byte. If the key is\n", "        a slice: read addr+size bytes in memory.\n\t        :param item: address, or address:size to read\n\t        :return: memory content\n\t        :raise MemoryAccessViolation: if the access is invalid\n\t        \"\"\"\n\t        if isinstance(item, slice):\n\t            return self.read(item.start, item.stop)\n\t        elif isinstance(item, int):\n\t            return self.read(item, 1)\n\t    def write(self, addr: Addr, data: bytes) -> None:\n", "        \"\"\"\n\t        Write the given `data` bytes at `addr` address.\n\t        :param addr: address where to write\n\t        :param data: data to write\n\t        :return: None\n\t        \"\"\"\n\t        if self._segment_enabled:\n\t            map = self._get_map(addr, len(data))\n\t            if map is None:\n\t                raise MemoryAccessViolation(addr, Perm.W, memory_not_mapped=True)\n", "            if Perm.W not in map.perm:\n\t                raise MemoryAccessViolation(addr, Perm.W, map_perm=map.perm, perm_error=True)\n\t        return self.ctx.setConcreteMemoryAreaValue(addr, data)\n\t    def read(self, addr: Addr, size: ByteSize) -> bytes:\n\t        \"\"\"\n\t        Read `size` bytes at `addr` address.\n\t        :param addr: address to read\n\t        :param size: size of content to read\n\t        :return: bytes read\n\t        \"\"\"\n", "        if self._segment_enabled:\n\t            map = self._get_map(addr, size)\n\t            if map is None:\n\t                raise MemoryAccessViolation(addr, Perm.R, memory_not_mapped=True)\n\t            if Perm.R not in map.perm:\n\t                raise MemoryAccessViolation(addr, Perm.R, map_perm=map.perm, perm_error=True)\n\t        return self.ctx.getConcreteMemoryAreaValue(addr, size)\n\t    def _get_map(self, ptr: Addr, size: ByteSize) -> Optional[MemMap]:\n\t        \"\"\"\n\t        Internal function returning the MemMap object associated\n", "        with any address. It returns None if part of the memory\n\t        range falls out of a memory mapping.\n\t        Complexity is O(log(n))\n\t        :param ptr: address in memory\n\t        :param size: size of the memory\n\t        :return: True if mapped\n\t        \"\"\"\n\t        idx = bisect.bisect_left(self._linear_map_addr, ptr)\n\t        try:\n\t            addr = self._linear_map_addr[idx]\n", "            if (idx % 2) == 0:  # We are on a start address (meaning we should be exactly on map start other unmapped)\n\t                end = self._linear_map_addr[idx+1]\n\t                return self._linear_map_map[idx] if (ptr == addr and ptr+size <= end+1) else None\n\t            else:  # We are on an end address\n\t                start = self._linear_map_addr[idx-1]\n\t                return self._linear_map_map[idx-1] if (start <= addr and ptr+size <= addr+1) else None  # fit into the map\n\t        except IndexError:\n\t            return None  # Either raised when linear_map is empty or the address is beyond everything that is mapped\n\t    def get_map(self, addr: Addr, size: ByteSize = 1) -> Optional[MemMap]:\n\t        \"\"\"\n", "        Find the MemMap associated with the given address and returns\n\t        it if any.\n\t        :param addr: Address of the map (or any map inside)\n\t        :param size: size of bytes for which we want the map\n\t        :return: MemMap if found\n\t        \"\"\"\n\t        return self._get_map(addr, size)\n\t    def find_map(self, name: str) -> Optional[List[MemMap]]:\n\t        \"\"\"\n\t        Find a map given its name.\n", "        :param name: Map name\n\t        :return: MemMap if found\n\t        \"\"\"\n\t        l = []\n\t        for map in (x for x in self._linear_map_map if x):\n\t            if map.name == name:\n\t                l.append(map)\n\t        return l\n\t    def map_from_name(self, name: str) -> MemMap:\n\t        \"\"\"\n", "        Return a map from its name. This function assumes\n\t        the map is present.\n\t        :raise AssertionError: If the map is not found\n\t        :param name: Map name\n\t        :return: MemMap\n\t        \"\"\"\n\t        for map in (x for x in self._linear_map_map if x):\n\t            if map.name == name:\n\t                return map\n\t        assert False\n", "    def is_mapped(self, ptr: Addr, size: ByteSize = 1) -> bool:\n\t        \"\"\"\n\t        The function checks whether the memory is mapped or not.\n\t        The implementation return False if the memory chunk overlap\n\t        on two memory regions.\n\t        Complexity is O(log(n))\n\t        :param ptr: address in memory\n\t        :param size: size of the memory\n\t        :return: True if mapped\n\t        \"\"\"\n", "        return self._get_map(ptr, size) is not None\n\t    def has_ever_been_written(self, ptr: Addr, size: ByteSize) -> bool:\n\t        \"\"\"\n\t        Returns whether the given range of addresses has previously\n\t        been written or not. (Do not take in account the memory mapping).\n\t        :param ptr: The pointer to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Size of the memory range to check\n\t        :return: True if all addresses have been defined\n\t        \"\"\"\n", "        return self.ctx.isConcreteMemoryValueDefined(ptr, size)\n\t    def read_uint(self, addr: Addr, size: ByteSize = 4):\n\t        \"\"\"\n\t        Read in the process memory a **little-endian** integer of the ``size`` at ``addr``.\n\t        :param addr: Address at which to read data\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Number of bytes to read\n\t        :type size: Union[str, :py:obj:`tritondse.types.ByteSize`]\n\t        :return: Integer value read\n\t        :raise struct.error: If value can't fit in `size`\n", "        \"\"\"\n\t        data = self.read(addr, size)\n\t        return struct.unpack(self._endian_key+STRUCT_MAP[(True, size)], data)[0]\n\t    def read_sint(self, addr: Addr, size: ByteSize = 4):\n\t        \"\"\"\n\t        Read in the process memory a **little-endian** integer of the ``size`` at ``addr``.\n\t        :param addr: Address at which to read data\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param size: Number of bytes to read\n\t        :type size: Union[str, :py:obj:`tritondse.types.ByteSize`]\n", "        :return: Integer value read\n\t        :raise struct.error: If value can't fit in `size`\n\t        \"\"\"\n\t        data = self.read(addr, size)\n\t        return struct.unpack(self._endian_key+STRUCT_MAP[(False, size)], data)[0]\n\t    def read_ptr(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read in the process memory a little-endian integer of size :py:attr:`tritondse.ProcessState.ptr_size`\n\t        :param addr: Address at which to read data\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n", "        :return: Integer value read\n\t        \"\"\"\n\t        return self.read_uint(addr, self._ptr_size)\n\t    def read_char(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read a char in memory (1-byte) following endianess.\n\t        :param addr: address to read\n\t        :return: char value as int\n\t        \"\"\"\n\t        return self.read_sint(addr, 1)\n", "    def read_uchar(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read an unsigned char in memory (1-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: unsigned char value as int\n\t        \"\"\"\n\t        return self.read_uint(addr, 1)\n\t    def read_int(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read a signed integer in memory (4-byte) following endianness.\n", "        :param addr: address to read\n\t        :return: signed integer value as int\n\t        \"\"\"\n\t        return self.read_sint(addr, 4)\n\t    def read_word(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read signed word in memory (2-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: signed word value as int\n\t        \"\"\"\n", "        return self.read_uint(addr, 2)\n\t    def read_dword(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read signed double word in memory (4-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: dword value as int\n\t        \"\"\"\n\t        return self.read_uint(addr, 4)\n\t    def read_qword(self, addr: Addr) -> int:\n\t        \"\"\"\n", "        Read signed qword in memory (8-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: qword value as int\n\t        \"\"\"\n\t        return self.read_uint(addr, 8)\n\t    def read_long(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read 'C style' long in memory (4-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: value as int\n", "        \"\"\"\n\t        return self.read_sint(addr, 4)\n\t    def read_ulong(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read unsigned long in memory (4-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: unsigned long value as int\n\t        \"\"\"\n\t        return self.read_uint(addr, 4)\n\t    def read_long_long(self, addr: Addr) -> int:\n", "        \"\"\"\n\t        Read long long in memory (8-byte) following endianness.\n\t        :param addr: address to read\n\t        :return: long long value as int\n\t        \"\"\"\n\t        return self.read_sint(addr, 8)\n\t    def read_ulong_long(self, addr: Addr) -> int:\n\t        \"\"\"\n\t        Read unsigned long long in memory (8-byte) following endianness.\n\t        :param addr: address to read\n", "        :return: unsigned long long value as int\n\t        \"\"\"\n\t        return self.read_uint(addr, 8)\n\t    def read_string(self, addr: Addr) -> str:\n\t        \"\"\" Read a string in process memory at the given address\n\t        .. warning:: The memory read is unbounded. Thus the memory is iterated up until\n\t                     finding a 0x0.\n\t        :returns: the string read in memory\n\t        :rtype: str\n\t        \"\"\"\n", "        s = \"\"\n\t        index = 0\n\t        while True:\n\t            val = self.read_uint(addr+index, 1)\n\t            if not val:\n\t                return s\n\t            s += chr(val)\n\t            index += 1\n\t    def write_int(self, addr: Addr, value: int, size: ByteSize = 4):\n\t        \"\"\"\n", "        Write in the process memory the given integer value of the given size at\n\t        a specific address.\n\t        :param addr: Address at which to read data\n\t        :param value: data to write represented as an integer\n\t        :param size: Number of bytes to read\n\t        :raise struct.error: If integer value cannot fit in `size`\n\t        \"\"\"\n\t        self.write(addr, struct.pack(self._endian_key+STRUCT_MAP[(value >= 0, size)], value))\n\t    def write_ptr(self, addr: Addr, value: int) -> None:\n\t        \"\"\"\n", "        Similar to :py:meth:`write_int` but the size is automatically adjusted\n\t        to be ``ptr_size``.\n\t        :param addr: address where to write data\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param value: pointer value to write\n\t        :type value: int\n\t        :raise struct.error: If integer value cannot fit in a pointer size\n\t        \"\"\"\n\t        self.write_int(addr, value, self._ptr_size)\n\t    def write_char(self, addr: Addr, value: int) -> None:\n", "        \"\"\"\n\t        Write the integer value as a single byte in memory.\n\t        :param addr: address to write\n\t        :param value: integer value\n\t        :raise struct.error: If integer value do not fit in a byte (>255)\n\t        \"\"\"\n\t        self.write_int(addr, value, 1)\n\t    def write_word(self, addr: Addr, value: int) -> None:\n\t        \"\"\"\n\t        Write the word (2-byte) in memory following endianess.\n", "        :param addr: address to write\n\t        :param value: integer value\n\t        :raise struct.error: If integer value do not fit in a word\n\t        \"\"\"\n\t        self.write_int(addr, value, 2)\n\t    def write_dword(self, addr: Addr, value: int) -> None:\n\t        \"\"\"\n\t        Write the word (4-byte) in memory following endianess.\n\t        :param addr: address to write\n\t        :param value: integer value\n", "        :raise struct.error: If integer value do not fit in a dword\n\t        \"\"\"\n\t        self.write_int(addr, value, 4)\n\t    def write_qword(self, addr: Addr, value: int) -> None:\n\t        \"\"\"\n\t        Write the qword (8-byte) in memory following endianess.\n\t        :param addr: address to write\n\t        :param value: integer value\n\t        :raise struct.error: If integer value do not fit in a qword\n\t        \"\"\"\n", "        self.write_int(addr, value, 8)\n\t    def write_long(self, addr: Addr, value: int) -> None:\n\t        \"\"\"\n\t        Write a \"C style\" long (4-byte) in memory following endianess.\n\t        :param addr: address to write\n\t        :param value: integer value\n\t        :raise struct.error: If integer value do not fit in a long\n\t        \"\"\"\n\t        return self.write_int(addr, value, 4)\n\t    def write_long_long(self, addr: Addr, value: int) -> None:\n", "        \"\"\"\n\t        Write the \"C style\" long long (8-byte) in memory following endianess.\n\t        :param addr: address to write\n\t        :param value: integer value\n\t        :raise struct.error: If integer value do not fit in a long long\n\t        \"\"\"\n\t        return self.write_int(addr, value, 8)\n"]}
{"filename": "tritondse/trace.py", "chunked_list": ["# built-in imports\n\timport json\n\timport os\n\timport subprocess\n\tfrom pathlib import Path\n\timport time\n\tfrom typing import List, Optional, Union\n\tfrom collections import Counter\n\t# local imports\n\timport tritondse # NOTE We need this import so we can use it to determine the path of this file.\n", "from tritondse import Config, Program, SymbolicExecutor, CoverageStrategy, CoverageSingleRun\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"tracer\")\n\tclass TraceException(Exception):\n\t    pass\n\tclass Trace:\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def run(strategy: CoverageStrategy, binary_path: str, args: List[str], output_path: str, dump_trace: bool = False, stdin_file=None) -> bool:\n", "        \"\"\"Run the binary passed as argument and return the coverage.\n\t        :param strategy: Coverage strategy.\n\t        :type strategy: :py:obj:`CoverageStrategy`.\n\t        :param binary_path: Path to the binary.\n\t        :type binary_path: :py:obj:`str`.\n\t        :param args: List of arguments to pass to the binary.\n\t        :type args: :py:obj:`List[str]`.\n\t        :type output_path: File where to store trace\n\t        :param dump_trace: Enable gather the trace\n\t        :param stdin_file: Path to the file that will act as stdin.\n", "        :type args: :py:obj:`str`.\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    @property\n\t    def trace(self) -> List[int]:\n\t        raise NotImplementedError()\n\t    @staticmethod\n\t    def from_file(file: Union[str, Path]) -> 'QBDITrace':\n\t        raise NotImplementedError()\n\t    @property\n", "    def coverage(self) -> CoverageSingleRun:\n\t        \"\"\"\n\t        Coverage generated by the trace\n\t        :return: CoverageSingleRun object\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def get_coverage(self) -> CoverageSingleRun:\n\t        \"\"\"Return the execution coverage.\n\t        :return: :py:obj:`CoverageSingleRun`.\n\t        \"\"\"\n", "        return self.coverage\n\t    @property\n\t    def strategy(self) -> CoverageStrategy:\n\t        \"\"\"\n\t        Return the coverage strategy with which this trace\n\t        was generated with.\n\t        :return: :py:obj:`CoverageStrategy`\n\t        \"\"\"\n\t        return self.coverage.strategy\n\tclass TritonTrace(Trace):\n", "    def __init__(self):\n\t        super().__init__()\n\t        self._coverage = None\n\t    @staticmethod\n\t    def run(strategy: CoverageStrategy, binary_path: str, args: List[str], output_path: str, dump_trace: bool = False, stdin_file=None) -> bool:\n\t        # Override stdin with the input file.\n\t        if stdin_file:\n\t            os.dup2(os.open(stdin_file, os.O_RDONLY), 0)\n\t        config = Config(coverage_strategy=strategy)\n\t        se = SymbolicExecutor(config)\n", "        se.load(Program(binary_path))\n\t        se.run()\n\t        trace = TritonTrace()\n\t        trace._coverage = se.coverage\n\t        # FIXME: Writing the coverage to a file\n\t    @staticmethod\n\t    def from_file(file: Union[str, Path]) -> 'QBDITrace':\n\t        # FIXME: Reading coverage file from a file\n\t        return trace\n\t    @property\n", "    def coverage(self) -> CoverageSingleRun:\n\t        return self._coverage\n\tclass QBDITrace(Trace):\n\t    QBDI_SCRIPT_FILEPATH = Path(tritondse.__file__).parent / 'qbdi_trace.py'\n\t    def __init__(self):\n\t        super().__init__()\n\t        self._coverage = None\n\t        self._trace = None\n\t        self.modules = {}\n\t    @staticmethod\n", "    def run(strategy: CoverageStrategy, binary_path: str, args: List[str], output_path: str, dump_trace: bool = False, stdin_file=None, timeout=None, cwd=None) -> bool:\n\t        if not Path(binary_path).exists():\n\t            raise FileNotFoundError()\n\t        if stdin_file and not Path(stdin_file).exists():\n\t            raise FileNotFoundError()\n\t        args = [] if not args else args\n\t        cmdlne = f'timeout {timeout} python -m pyqbdipreload {QBDITrace.QBDI_SCRIPT_FILEPATH}'.split(' ') + [binary_path] + args\n\t        cmdlne = \" \".join(cmdlne)\n\t        logger.debug(f'Command line: {cmdlne}')\n\t        # Set environment variables.\n", "        environ = {\n\t            'PYQBDIPRELOAD_COVERAGE_STRATEGY': strategy.name,\n\t            'PYQBDIPRELOAD_OUTPUT_FILEPATH': output_path,\n\t            'PYQBDIPRELOAD_DUMP_TRACE': str(dump_trace),\n\t            'LD_BIND_NOW': '1',\n\t        }\n\t        environ.update(os.environ)\n\t        # Open stdin file if it is present.\n\t        stdin_fp = open(stdin_file, 'rb') if stdin_file else None\n\t        # Run QBDI tool.\n", "        process = subprocess.Popen(cmdlne,\n\t                                   shell=True,\n\t                                   stdin=stdin_fp,\n\t                                   stdout=subprocess.DEVNULL,\n\t                                   stderr=subprocess.DEVNULL,\n\t                                   cwd=cwd,\n\t                                   env=environ)\n\t        try:\n\t            stdout, stderr = process.communicate(timeout=timeout)\n\t            # for line in stdout.split(b\"\\n\"):\n", "            #     logger.debug(f\"stdout: {line}\")\n\t            # for line in stderr.split(b\"\\n\"):\n\t            #     logger.debug(f\"stdout: {line}\")\n\t        except subprocess.TimeoutExpired:\n\t            process.wait()\n\t            # logger.warning('QBDI tracer timeout expired!')\n\t            raise TraceException('QBDI tracer timeout expired')\n\t        if stdin_fp:\n\t            stdin_fp.close()\n\t        return Path(output_path).exists()\n", "    @staticmethod\n\t    def from_file(coverage_path: str) -> 'QBDITrace':\n\t        \"\"\"Load coverage from a file.\n\t        :param coverage_path: Path to the coverage file.\n\t        :type coverage_path: :py:obj:`str`.\n\t        \"\"\"\n\t        trace = QBDITrace()\n\t        logger.debug(f'Loading coverage file: {coverage_path}')\n\t        with open(coverage_path, 'rb') as fd:\n\t            data = json.load(fd)\n", "        cov = CoverageSingleRun(CoverageStrategy[data[\"coverage_strategy\"]])\n\t        cov.covered_instructions = Counter({int(k): v for k, v in data[\"covered_instructions\"].items()})\n\t        for (src, dst, not_taken) in data[\"covered_items\"]:\n\t            if not_taken is None:\n\t                cov.add_covered_dynamic_branch(src, dst)\n\t            else:\n\t                cov.add_covered_branch(src, dst, not_taken)\n\t        trace._coverage = cov\n\t        trace._trace = data['trace']\n\t        trace.modules = data['modules_base']\n", "        return trace\n\t    @property\n\t    def coverage(self) -> CoverageSingleRun:\n\t        \"\"\"\n\t        CoverageSingleRun associated with the trace.\n\t        :return: coverage object\n\t        \"\"\"\n\t        if not self._coverage:\n\t            logger.warning(\"Please .run() the trace before querying coverage\")\n\t        return self._coverage\n", "    @property\n\t    def trace(self) -> List[int]:\n\t        \"\"\"\n\t        List of addresses executed.\n\t        :return: list of addresses\n\t        \"\"\"\n\t        return self._trace\n\tif __name__ == \"__main__\":\n\t    import sys\n\t    if len(sys.argv) < 2:\n", "        print(\"Usage: trace.py program [args]\")\n\t        sys.exit(1)\n\t    tritondse.logging.enable()\n\t    if QBDITrace.run(CoverageStrategy.EDGE, sys.argv[1], sys.argv[2:], \"/tmp/test.cov\", dump_trace=False):\n\t        coverage = QBDITrace.from_file(\"/tmp/test.cov\")\n\t    else:\n\t        print(\"Something went wrong during trace generation\")\n"]}
{"filename": "tritondse/heap_allocator.py", "chunked_list": ["from tritondse.types import Addr, ByteSize, Perm\n\tfrom tritondse.memory import Memory\n\tfrom tritondse.exception import AllocatorException\n\timport tritondse.logging\n\tlogger = tritondse.logging.get()\n\tclass HeapAllocator(object):\n\t    \"\"\"\n\t    Custom tiny heap allocator. Used by built-ins routines like malloc/free.\n\t    This allocation manager also provides an API enabling checking whether\n\t    a pointer is allocated freed etc.\n", "    .. warning:: This allocator is very simple and does not perform any\n\t                 coalescing of freed memory areas. Thus it may not correctly\n\t                 model the behavior of libc allocator.\n\t    \"\"\"\n\t    def __init__(self, start: Addr, end: Addr, memory: Memory):\n\t        \"\"\"\n\t        Class constructor. Takes heap bounds as parameter.\n\t        :param start Addr: Where the heap area can start\n\t        :type start: :py:obj:`tritondse.types.Addr`\n\t        :param end Addr: Where the heap area must be end\n", "        :type start: :py:obj:`tritondse.types.Addr`\n\t        :param memory: Memory: Memory object on which to perform allocations\n\t        \"\"\"\n\t        # Range of the memory mapping\n\t        self.start: Addr = start\n\t        #: Starting address of the heap\n\t        self.end: Addr = end\n\t        #: Ending address of the heap\n\t        self._curr_offset: Addr = self.start  #: Heap current offset address\n\t        self._memory = memory\n", "        # Pools memory\n\t        self.alloc_pool = dict() # {ptr: MemMap}\n\t        self.free_pool = dict() # {size: set(MemMap ...)}\n\t        # TODO: For a to-the-moon allocator, we could merge freed chunks. Like 4 chunks of 1 byte into one chunk of 4 bytes.\n\t        # TODO: For a to-the-moon allocator, we could split a big chunk into two chunks when asking an allocation.\n\t    def alloc(self, size: ByteSize) -> Addr:\n\t        \"\"\"\n\t        Performs an allocation of the given byte size.\n\t        :param size: Byte size to allocate\n\t        :type size: :py:obj:`tritondse.types.ByteSize`\n", "        :raise AllocatorException: if not memory is available\n\t        :return: The pointer address allocated\n\t        :rtype: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n\t        if size <= 0:\n\t            logger.error(f\"Heap: invalid allocation size {size}\")\n\t            return 0\n\t        ptr = None\n\t        for sz in sorted(x for x in self.free_pool if x >= size):\n\t            # get the free chunk\n", "            ptr = self.free_pool[sz].pop().start\n\t            # If the set is empty after the pop(), remove the entry\n\t            if not self.free_pool[sz]:\n\t                del self.free_pool[sz]\n\t            break\n\t        if ptr is None: # We did not found reusable freed ptr\n\t            ptr = self._curr_offset\n\t            self._curr_offset += size\n\t        # Now we can allocate the chunk\n\t        map = self._memory.map(ptr, size, Perm.R | Perm.W, 'heap')\n", "        self.alloc_pool.update({ptr: map})\n\t        return ptr\n\t    def free(self, ptr: Addr) -> None:\n\t        \"\"\"\n\t        Free the given memory chunk.\n\t        :param ptr: Address to free\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :raise AllocatorException: if the pointer has already been freed or if it has never been allocated\n\t        \"\"\"\n\t        if self.is_ptr_freed(ptr):\n", "            raise AllocatorException('Double free or corruption!')\n\t        if not self.is_ptr_allocated(ptr):\n\t            raise AllocatorException(f'Invalid pointer ({hex(ptr)})')\n\t        # Add the chunk into our free_pool\n\t        memmap = self.alloc_pool[ptr]\n\t        if memmap.size in self.free_pool:\n\t            self.free_pool[memmap.size].add(memmap)\n\t        else:\n\t            self.free_pool[memmap.size] = {memmap}\n\t        # Remove the chunk from our alloc_pool\n", "        self._memory.unmap(ptr)\n\t        del self.alloc_pool[ptr]\n\t    def is_ptr_allocated(self, ptr: Addr) -> bool:\n\t        \"\"\"\n\t        Check whether a given address has been allocated\n\t        :param ptr: Address to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :return: True if pointer points to an allocated memory region\n\t        \"\"\"\n\t        return self._memory.is_mapped(ptr, 1)\n", "    def is_ptr_freed(self, ptr: Addr) -> bool:\n\t        \"\"\"\n\t        Check whether a given pointer has recently been freed.\n\t        :param ptr: Address to check\n\t        :type ptr: :py:obj:`tritondse.types.Addr`\n\t        :return: True if pointer has been freed, False otherwise\n\t        \"\"\"\n\t        # FIXME: This function is linear in the size of chunks. Can make it logarithmic\n\t        for size, chunks in self.free_pool.items():\n\t            for chunk in chunks:\n", "                if chunk.start <= ptr < chunk.start + size:\n\t                    return True\n\t        return False\n"]}
{"filename": "tritondse/seeds_manager.py", "chunked_list": ["# built-in imports\n\timport time\n\timport json\n\tfrom typing import Generator, Optional, Type\n\tfrom collections import Counter\n\t# local imports\n\tfrom tritondse.seed              import Seed, SeedStatus\n\tfrom tritondse.callbacks         import CallbackManager\n\tfrom tritondse.coverage          import GlobalCoverage, CovItem, CoverageStrategy\n\tfrom tritondse.worklist          import WorklistAddressToSet, FreshSeedPrioritizerWorklist, SeedScheduler\n", "from tritondse.workspace         import Workspace\n\tfrom tritondse.symbolic_executor import SymbolicExecutor\n\tfrom tritondse.types             import SolverStatus, SymExType\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"seedmanager\")\n\tclass SeedManager:\n\t    \"\"\"\n\t    Seed Manager.\n\t    This class is in charge of providing the next seed to execute by prioritizing\n\t    them. It also holds various sets of pending seeds, corpus, crashes etc and\n", "    manages them in the workspace.\n\t    It contains basically 2 types of seeds which are:\n\t    * pending seeds (kept in the seed scheduler). These are the seeds that might\n\t      be selected to be run\n\t    * seed consumed (corpus, crash, hangs) which are seeds not meant to be re-executed\n\t      as they cannot lead to new paths, all candidate paths are UNSAT etc.\n\t    \"\"\"\n\t    def __init__(self, coverage: GlobalCoverage, workspace: Workspace, smt_queries_limit: int, callback_manager: CallbackManager = None, seed_scheduler_class: Type[SeedScheduler] = None):\n\t        \"\"\"\n\t        :param coverage: global coverage object. The instance will be updated by the seed manager\n", "        :type coverage: GlobalCoverage\n\t        :param workspace: workspace instance object.\n\t        :type workspace: Workspace\n\t        :param smt_queries_limit: maximum number of queries for  a given execution\n\t        :type smt_queries_limit: int\n\t        :param scheduler: seed scheduler object to use as scheduling strategy\n\t        :type scheduler: SeedScheduler\n\t        \"\"\"\n\t        self.smt_queries_limit = smt_queries_limit\n\t        self.workspace = workspace\n", "        self.coverage = coverage\n\t        if seed_scheduler_class is None:\n\t            self.worklist = FreshSeedPrioritizerWorklist(self)\n\t        else:\n\t            self.worklist = seed_scheduler_class(self)\n\t        self.cbm = callback_manager\n\t        self.corpus = set()\n\t        self.crash = set()\n\t        self.hangs = set()\n\t        self.__load_seed_workspace()\n", "        self._solv_count = 0\n\t        self._solv_time_sum = 0\n\t        self._solv_status = {SolverStatus.SAT: 0, SolverStatus.UNSAT: 0, SolverStatus.UNKNOWN: 0, SolverStatus.TIMEOUT: 0}\n\t        self._stat_branch_reverted = Counter()\n\t        self._stat_branch_fail = Counter()\n\t        self._current_solv_time = 0\n\t    @property\n\t    def total_solving_time(self) -> float:\n\t        return self._solv_time_sum\n\t    def __load_seed_workspace(self):\n", "        \"\"\" Load seed from the workspace \"\"\"\n\t        # Load seed from the corpus\n\t        for seed in self.workspace.iter_corpus():\n\t            self.corpus.add(seed)\n\t        # Load hangs\n\t        for seed in self.workspace.iter_hangs():\n\t            self.hangs.add(seed)\n\t        # Load crashes\n\t        for seed in self.workspace.iter_crashes():\n\t            self.crash.add(seed)\n", "        # Load worklist\n\t        for seed in self.workspace.iter_worklist():\n\t            self.worklist.add(seed)\n\t    def is_new_seed(self, seed: Seed) -> bool:\n\t        \"\"\"\n\t        Check if a seed is a new one (not into corpus, crash and hangs)\n\t        :param seed: The seed to test\n\t        :type seed: Seed\n\t        :return: True if the seed is a new one\n\t        .. warning:: That function does not check that the seed\n", "                     is not in the pending seeds queue\n\t        \"\"\"\n\t        return sum(seed in x for x in [self.corpus, self.crash, self.hangs]) == 0\n\t    def add_seed_queue(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Add a seed to to appropriate internal queue depending\n\t        on its status. If it is new it is added in pending seed,\n\t        if OK, HANG or CRASH it the appropriate set.\n\t        **Note that the seed is not written in the workspace**\n\t        :param seed: Seed to add in an internal queue\n", "        :type seed: Seed\n\t        \"\"\"\n\t        # Add the seed to the appropriate list\n\t        if seed.status == SeedStatus.NEW:\n\t            self.worklist.add(seed)\n\t        elif seed.status == SeedStatus.OK_DONE:\n\t            self.corpus.add(seed)\n\t        elif seed.status == SeedStatus.HANG:\n\t            self.hangs.add(seed)\n\t        elif seed.status == SeedStatus.CRASH:\n", "            self.crash.add(seed)\n\t        else:\n\t            assert False\n\t    def post_execution(self, execution: SymbolicExecutor, seed: Seed, solve_new_path: int = True) -> float:\n\t        \"\"\"\n\t        Function called after each execution. It updates the global\n\t        code coverage object, and tries to generate new paths through\n\t        SMT in accordance with the seed scheduling strategy.\n\t        :param execution: The current execution\n\t        :type execution: SymbolicExecutor\n", "        :param seed: The seed of the execution\n\t        :type seed: Seed\n\t        :param solve_new_path: Whether or not to solve constraint to find new paths\n\t        :type solve_new_path: bool\n\t        :return: Total SMT solving time\n\t        \"\"\"\n\t        # Update instructions covered from the last execution into our exploration coverage\n\t        self.coverage.merge(execution.coverage)\n\t        self.worklist.update_worklist(execution.coverage)\n\t        # if the seed have target checks that we covered it\n", "        if seed.target:\n\t            color = (\"YES\", 92) if execution.coverage.is_covered(seed.target) else (\"NO\", 91)\n\t            logger.info(f\"Seed covered its target: \\033[{color[1]}m{color[0]}\\033[0m\")\n\t        # reset the current solving time\n\t        self._current_solv_time = 0\n\t        # Iterate all pending seeds to be added in the right location\n\t        for s in execution.pending_seeds:\n\t            if self.is_new_seed(s):\n\t                if not s.coverage_objectives:      # If they don't have objectives set the Ellipsis wildcard\n\t                    s.coverage_objectives.add(...)\n", "                self._add_seed(s)  # will add the seed in both internal queues & workspace\n\t            else:\n\t                logger.warning(f\"dropping enqueued seed: {s.hash} (already seen)\")\n\t        # Update the current seed queue\n\t        if seed.status == SeedStatus.NEW:\n\t            logger.error(f\"seed not meant to be NEW at the end of execution ({seed.hash}) (dropped)\")\n\t            self.drop_seed(seed)\n\t        elif seed.status in [SeedStatus.HANG, SeedStatus.CRASH]:\n\t            self.archive_seed(seed)\n\t            # NOTE: Do not perform further processing on the seed (like generating inputs from it)\n", "        elif seed.status == SeedStatus.OK_DONE:\n\t            if self.coverage.can_improve_coverage(execution.coverage) or self.coverage.can_cover_symbolic_pointers(execution):\n\t                items = self.coverage.new_items_to_cover(execution.coverage)\n\t                seed.coverage_objectives = items  # Set its new objectives\n\t                if self.worklist.can_solve_models() and solve_new_path:     # No fresh seeds pending thus can solve model\n\t                    logger.info(f'Seed {seed.hash} generate new coverage')\n\t                    self._generate_new_inputs(execution)\n\t                    self.archive_seed(seed)\n\t                else:\n\t                    logger.info(f\"Seed {seed.hash} push back in worklist (to unstack fresh)\")\n", "                    seed.status = SeedStatus.NEW  # Reset its status for later run\n\t                    self.add_seed_queue(seed)  # will be pushed back in worklist\n\t            else:\n\t                self.archive_seed(seed)\n\t                logger.info(f'Seed {seed.hash} archived cannot generate new coverage [{seed.status.name}]')\n\t        else:\n\t            assert False\n\t        logger.info(f\"Corpus:{len(self.corpus)} Crash:{len(self.crash)}\")\n\t        self.worklist.post_execution()\n\t        logger.info(f\"Coverage instruction:{self.coverage.unique_instruction_covered} covitem:{self.coverage.unique_covitem_covered}\")\n", "        return self._current_solv_time\n\t    def _generate_new_inputs(self, execution: SymbolicExecutor):\n\t        # Generate new inputs\n\t        for new_input in self.__iter_new_inputs(execution):\n\t            # Check if we already have executed this new seed\n\t            if self.is_new_seed(new_input):\n\t                self.worklist.add(new_input)\n\t                self.workspace.save_seed(new_input)\n\t                logger.info(f'New seed model {new_input.filename} dumped [{new_input.status.name}]')\n\t            else:\n", "                logger.info(f\"New seed {new_input.filename} has already been generated\")\n\t    def __iter_new_inputs(self, execution: SymbolicExecutor) -> Generator[Seed, None, None]:\n\t        # Get the astContext\n\t        actx = execution.pstate.actx\n\t        # We start with any input. T (Top)\n\t        path_predicate = [actx.equal(actx.bvtrue(), actx.bvtrue())]\n\t        # Define a limit of branch constraints\n\t        smt_queries = 0\n\t        # Solver status\n\t        status = None\n", "        path_constraints = execution.pstate.get_path_constraints()\n\t        total_len = len(path_constraints)\n\t        path_generator = self.coverage.iter_new_paths(path_constraints)\n\t        try:\n\t            while True:\n\t                # If smt_queries_limit is zero: unlimited queries\n\t                # If smt_queries_limit is negative: no query\n\t                if self.smt_queries_limit < 0:\n\t                    logger.info(f'The configuration is defined as: no query')\n\t                    break\n", "                typ, p_prefix, branch, covitem, ith = path_generator.send(status)\n\t                # Create edge in case of conditional branch, for all the other the edge shall be already set\n\t                edge = (branch['srcAddr'], branch['dstAddr']) if typ == SymExType.CONDITIONAL_JMP else covitem\n\t                # Add path_prefix in path predicate (regardless on whether we solve the item or not)\n\t                path_predicate.extend(x.getTakenPredicate() for x in p_prefix)\n\t                expr = branch['constraint'] if typ == SymExType.CONDITIONAL_JMP else branch\n\t                # Call on_branch_solving, if one replies False does not solve the branch\n\t                if self.cbm is not None:\n\t                    cb_result = all(cb(execution, execution.pstate, edge, typ, expr, path_predicate) for cb in self.cbm.get_on_solving_callback())\n\t                else:\n", "                    cb_result = True\n\t                # Skip processing the current path in case the result of the\n\t                # callbacks return False.\n\t                if not cb_result:\n\t                    status = None\n\t                    continue\n\t                # Create the constraint\n\t                if typ in [SymExType.DYNAMIC_JMP, SymExType.SYMBOLIC_READ, SymExType.SYMBOLIC_WRITE]:\n\t                    expr, (addr, tgt) = branch, covitem   # branch and covitem have a different meaning here\n\t                    ts = time.time()\n", "                    results = execution.pstate.solve_enumerate_expression(expr, path_predicate, [tgt], execution.config.smt_enumeration_limit)  # enumerate values\n\t                    # all stats updates\n\t                    solve_time = time.time() - ts\n\t                    count = len(results)\n\t                    status = SolverStatus.SAT if count else SolverStatus.UNSAT\n\t                    self._update_solve_stats(None, status, solve_time, count)\n\t                    results = [(x[0], (addr, x[1])) for x in results]   # extract results\n\t                    logger.info(f'pc:{ith}/{total_len} | Query n°{smt_queries}-{smt_queries+count}, enumerate:{expr} (time: {solve_time:.02f}s) values:[{count}:{self._pp_smt_status(status)}]')\n\t                    smt_queries += count+1  # for the unsat\n\t                elif typ == SymExType.CONDITIONAL_JMP:\n", "                    # if debug_pp=True solve the branch that has been taken\n\t                    branch_cst = actx.lnot(branch['constraint']) if execution.debug_pp else branch['constraint']\n\t                    constraint = actx.land(path_predicate + [branch_cst])\n\t                    # Solve the constraint\n\t                    ts = time.time()\n\t                    status, model = execution.pstate.solve(constraint, with_pp=False)  # Do not use path predicate as we are iterating it\n\t                    solve_time = time.time() - ts\n\t                    self._update_solve_stats(covitem, status, solve_time)\n\t                    results = [(model, covitem)]\n\t                    smt_queries += 1\n", "                    logger.info(f'pc:{ith}/{total_len} | Query n°{smt_queries}, solve:{self.coverage.pp_item(covitem)} (time: {solve_time:.02f}s) [{self._pp_smt_status(status)}]')\n\t                else:\n\t                    assert False\n\t                if status == SolverStatus.SAT:\n\t                    for model, covitem in results:\n\t                        new_seed = execution.mk_new_seed_from_model(model)\n\t                        # Trick to keep track of which target a seed is meant to cover\n\t                        new_seed.coverage_objectives.add(covitem)\n\t                        new_seed.meta_fname.append(self.pp_meta_filename(covitem, typ))\n\t                        new_seed.target = covitem if typ == SymExType.CONDITIONAL_JMP else None\n", "                        yield new_seed  # Yield the seed to get it added in the worklist\n\t                else:\n\t                    pass\n\t                # Check if we reached the limit of query\n\t                if self.smt_queries_limit and smt_queries >= self.smt_queries_limit:\n\t                    logger.info(f'Limit of query reached. Stop asking for models')\n\t                    break\n\t        except StopIteration:  # We have iterated the whole path generator\n\t            pass\n\t    def _update_solve_stats(self, covitem: Optional[CovItem], status: SolverStatus, solving_time: float, count=1):\n", "        self._solv_count += count\n\t        self._solv_time_sum += solving_time\n\t        self._current_solv_time += solving_time\n\t        self._solv_status[status] += count\n\t        logger.debug(f'Solve stats: solve_count={self._solv_count} solving_time={solving_time} solve_time_sum={self._solv_time_sum} current_solve_time={self._current_solv_time} solv_status={status} / {self._solv_status[status]}')\n\t        if covitem:\n\t            if status == SolverStatus.SAT:\n\t                self._stat_branch_reverted[covitem] += count  # Update stats\n\t                if covitem in self._stat_branch_fail:\n\t                    self._stat_branch_fail.pop(covitem)\n", "            elif status == SolverStatus.UNSAT:\n\t                self._stat_branch_fail[covitem] += count\n\t    def pick_seed(self) -> Optional[Seed]:\n\t        \"\"\"\n\t        Get the next seed to be executed by querying it\n\t        in the seed scheduler.\n\t        :returns: Seed to execute from the pending seeds\n\t        :rtype: Seed\n\t        \"\"\"\n\t        return self.worklist.pick()\n", "    def seeds_available(self) -> bool:\n\t        \"\"\"\n\t        Checks whether or not there is still pending seeds to process.\n\t        :returns: True if seeds are still pending\n\t        \"\"\"\n\t        return self.worklist.has_seed_remaining()\n\t    def add_new_seed(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Add the given seed in the manager.\n\t        The function uses its type to know where to add the seed.\n", "        :param seed: seed to add\n\t        :type seed: Seed\n\t        \"\"\"\n\t        if self.is_new_seed(seed):\n\t            self._add_seed(seed)\n\t            logger.debug(f'Seed {seed.filename} dumped [{seed.status.name}]')\n\t        else:\n\t            logger.debug(f\"seed {seed} is already known (not adding it)\")\n\t    def _add_seed(self, seed: Seed) -> None:\n\t        \"\"\" Add the seed in both internal queues but also workspace \"\"\"\n", "        self.add_seed_queue(seed)\n\t        self.workspace.save_seed(seed)\n\t    def drop_seed(self, seed: Seed) -> None:\n\t        \"\"\"\n\t        Drop a seed that is not of interest anymore.\n\t        The function thus switch its status to ``OK_DONE``\n\t        and move it in the corpus. *(the seed is not removed\n\t        from the corpus)*\n\t        :param seed: seed object to drop\n\t        :type seed: Seed\n", "        \"\"\"\n\t        self.archive_seed(seed)\n\t    def archive_seed(self, seed: Seed, status: SeedStatus = None) -> None:\n\t        \"\"\"\n\t        Send a seed in the corpus. As such, the seed\n\t        is not meant to be used anymore (for finding\n\t        new seeds).\n\t        :param seed: seed object\n\t        :type seed: Seed\n\t        :param status: optional status to assign the seed\n", "        :type status: SeedStatus\n\t        \"\"\"\n\t        if status:\n\t            seed.status = status\n\t        self.add_seed_queue(seed)  # Will put it in the corpus\n\t        self.workspace.update_seed_location(seed)  # Will put it in the corpus in files\n\t    def post_exploration(self) -> None:\n\t        \"\"\"\n\t        Function called at the end of exploration. It perform\n\t        some stats printing, but would also perform any clean\n", "        up tasks. *(not meant to be called by the user)*\n\t        \"\"\"\n\t        # Do things you would do at the very end of exploration\n\t        # (or just before it becomes idle)\n\t        stats = {\n\t            \"total_solving_time\": self._solv_time_sum,\n\t            \"total_solving_attempt\": self._solv_count,\n\t            \"branch_reverted\": {str(k): v for k, v in self._stat_branch_reverted.items()}, # convert covitem to str whatever it is\n\t            \"branch_not_solved\": {str(k): v for k, v in self._stat_branch_fail.items()},  # convert covitem to str whatever it is\n\t            \"UNSAT\": self._solv_status[SolverStatus.UNSAT],\n", "            \"SAT\": self._solv_status[SolverStatus.SAT],\n\t            \"TIMEOUT\": self._solv_status[SolverStatus.TIMEOUT]\n\t        }\n\t        self.workspace.save_metadata_file(\"solving_stats.json\", json.dumps(stats, indent=2))\n\t        logger.info(f\"Branches reverted: {len(self._stat_branch_reverted)}  Branches still fail: {len(self._stat_branch_fail)}\")\n\t        self.worklist.post_exploration(self.workspace)\n\t    @staticmethod\n\t    def _pp_smt_status(status: SolverStatus) -> str:\n\t        \"\"\" The pretty print function of the solver status \"\"\"\n\t        mapper = {SolverStatus.SAT: 92, SolverStatus.UNSAT: 91, SolverStatus.TIMEOUT: 93, SolverStatus.UNKNOWN: 95}\n", "        return f\"\\033[{mapper[status]}m{status.name}\\033[0m\"\n\t    def pp_meta_filename(self, covitem: CovItem, typ: SymExType) -> str:\n\t        \"\"\"pretty-print a covitem\"\"\"\n\t        if typ == SymExType.CONDITIONAL_JMP:\n\t            pp_item = self.coverage.pp_item(covitem)\n\t        else:\n\t            pp_item = f\"({covitem[0]:#08x}:@[{covitem[1]:#08x}])\"\n\t        map = {SymExType.CONDITIONAL_JMP: \"CC\",\n\t               SymExType.SYMBOLIC_READ: \"SR\",\n\t               SymExType.SYMBOLIC_WRITE: \"SW\",\n", "               SymExType.DYNAMIC_JMP: \"DYN\"}\n\t        return f\"{map[typ]}_{pp_item}\"\n"]}
{"filename": "tritondse/callbacks.py", "chunked_list": ["# built-in imports\n\tfrom __future__ import annotations\n\tfrom enum import Enum, auto\n\tfrom typing import Callable, Tuple, List, Optional, Union, Any\n\timport enum_tools.documentation\n\t# third-party imports\n\tfrom triton import CALLBACK, Instruction, MemoryAccess, OPCODE\n\t# local imports\n\tfrom tritondse.process_state import ProcessState\n\tfrom tritondse.types import Addr, Input, Register, Expression, Edge, SymExType, AstNode\n", "from tritondse.thread_context import ThreadContext\n\tfrom tritondse.seed import Seed\n\tfrom tritondse.memory import MemoryAccessViolation\n\timport tritondse.logging\n\tlogger = tritondse.logging.get()  # get root tritondse logger\n\t@enum_tools.documentation.document_enum\n\tclass CbPos(Enum):\n\t    \"\"\" Enmus representing callback position \"\"\"\n\t    BEFORE = auto()  # doc: Callback should be executed before the hook location interpretation\n\t    AFTER = auto()   # doc: Callback should be executed after the hook location interpreation\n", "@enum_tools.documentation.document_enum\n\tclass CbType(Enum):\n\t    \"\"\" Enmus representing all kind of callbacks \"\"\"\n\t    CTX_SWITCH = auto()     # doc: context-switch callback\n\t    MEMORY_READ = auto()    # doc: memory read callback\n\t    MEMORY_WRITE = auto()   # doc: memory write callback\n\t    POST_RTN = auto()       # doc: routine callback (after)\n\t    POST_ADDR = auto()      # doc: address class back (after)\n\t    POST_EXEC = auto()      # doc: post execution callback, after a SymbolicExecutor run\n\t    POST_INST = auto()      # doc: post instruction callback (all of them)\n", "    PRE_ADDR = auto()       # doc: pre address callback\n\t    PRE_EXEC = auto()       # doc: pre-execution callback (before launching a Symbolic Executor)\n\t    PRE_INST = auto()       # doc: pre instruction callback (all of them)\n\t    PRE_RTN = auto()        # doc: routine callback (before)\n\t    REG_READ = auto()       # doc: a register is read\n\t    REG_WRITE = auto()      # doc: a register is written\n\t    NEW_INPUT = auto()      # doc: new input has been generated\n\t    EXPLORE_STEP = auto()   # doc: an exploration step is reached. Called in between each SymbolicExecutor run\n\t    PRE_MNEM = auto()       # doc: callback on a specific mnemonic (as a string) (before)\n\t    POST_MNEM = auto()      # doc: callback on a specific mnemonic (as a string) (after)\n", "    PRE_OPCODE = auto()     # doc: callback on a specific opcode (as bytes) (before)\n\t    POST_OPCODE = auto()    # doc: callback on a specific opcode (as bytes) (after)\n\t    BRANCH_COV = auto()     # doc: a new branch is getting covered\n\t    SYMEX_SOLVING = auto()  # doc: An SMT formula is getting solved\n\t    MEM_VIOLATION = auto()  # doc: A memory violation occured\n\tAddrCallback            = Callable[['SymbolicExecutor', ProcessState, Addr], None]\n\tExplorationStepCallback = Callable[['SymbolicExplorator'], None]\n\tInstrCallback           = Callable[['SymbolicExecutor', ProcessState, Instruction], None]\n\tMemReadCallback         = Callable[['SymbolicExecutor', ProcessState, MemoryAccess], None]\n\tMemWriteCallback        = Callable[['SymbolicExecutor', ProcessState, MemoryAccess, int], None]\n", "MnemonicCallback        = Callable[['SymbolicExecutor', ProcessState, OPCODE], None]\n\tSymExSolvingCallback    = Callable[['SymbolicExecutor', ProcessState, Edge, SymExType, AstNode, List[AstNode]], bool]\n\tBranchCoveredCallback   = Callable[['SymbolicExecutor', ProcessState, Edge], bool]\n\tNewInputCallback        = Callable[['SymbolicExecutor', ProcessState, Seed], Optional[Seed]]\n\tOpcodeCallback          = Callable[['SymbolicExecutor', ProcessState, bytes], None]\n\tRegReadCallback         = Callable[['SymbolicExecutor', ProcessState, Register], None]\n\tRegWriteCallback        = Callable[['SymbolicExecutor', ProcessState, Register, int], None]\n\tRtnCallback             = Callable[['SymbolicExecutor', ProcessState, str, Addr], Optional[Union[int, Expression]]]\n\tSymExCallback           = Callable[['SymbolicExecutor', ProcessState], None]\n\tThreadCallback          = Callable[['SymbolicExecutor', ProcessState, ThreadContext], None]\n", "MemoryViolationCallback = Callable[['SymbolicExecutor', ProcessState, MemoryAccessViolation], None]\n\tclass ProbeInterface(object):\n\t    \"\"\" The Probe interface \"\"\"\n\t    def __init__(self):\n\t        self._cbs: List[Tuple[CbType, Callable, Optional[str]]] = []  #: list of callback infos\n\t    @property\n\t    def callbacks(self) -> List[Tuple[CbType, Callable, Optional[Any]]]:\n\t        return self._cbs\n\t    def _add_callback(self, typ: CbType, callback: Callable, arg: str = None):\n\t        \"\"\" Add a callback \"\"\"\n", "        self._cbs.append((typ, callback, arg))\n\tclass CallbackManager(object):\n\t    \"\"\"\n\t    Class used to aggregate all callbacks that can be plugged\n\t    inside a SymbolicExecutor running session. The internal\n\t    structure ensure that check the presence of callback can\n\t    be made in Log(N). All callbacks are designed to be read-only\n\t    \"\"\"\n\t    def __init__(self):\n\t        self._se = None\n", "        # SymbolicExplorator callbacks\n\t        self._step_cbs = []  # Callback called between each exploration steps\n\t        # SymbolicExecutor callbacks\n\t        self._pc_addr_cbs        = {}  # addresses reached\n\t        self._opcode_cbs         = {}  # opcode before and after\n\t        self._mnemonic_cbs       = {}  # mnemonic before and after\n\t        self._instr_cbs          = {CbPos.BEFORE: [], CbPos.AFTER: []}  # all instructions\n\t        self._pre_exec           = []  # before execution\n\t        self._post_exec          = []  # after execution\n\t        self._ctx_switch         = []  # on each thread context switch (implementing pre/post?)\n", "        self._new_input_cbs      = []  # each time an SMT model is get\n\t        self._branch_solving_cbs = []  # each time a branch is about to be solved\n\t        self._branch_covered_cbs = []  # each time a branch is covered\n\t        self._pre_rtn_cbs        = {}  # before imported routine calls ({str: [RtnCallback]})\n\t        self._post_rtn_cbs       = {}  # after imported routine calls ({str: [RtnCallback]})\n\t        self._mem_violation_cbs  = []  # called when an exception is raised\n\t        # Triton callbacks\n\t        self._mem_read_cbs  = []  # memory reads\n\t        self._mem_write_cbs = []  # memory writes\n\t        self._reg_read_cbs  = []  # register reads\n", "        self._reg_write_cbs = []  # register writes\n\t        self._empty         = True\n\t        # Temporary mapping of function name to register\n\t        self._func_to_register = {}\n\t    def is_empty(self) -> bool:\n\t        \"\"\"\n\t        Check whether a callback has alreday been registered or not\n\t        :return: True if no callback were registered\n\t        \"\"\"\n\t        return self._empty\n", "    def is_binded(self) -> bool:\n\t        \"\"\"\n\t        Check if the callback manager has already been binded on a given process state.\n\t        :return: True if callbacks are binded on a process state\n\t        \"\"\"\n\t        return bool(self._se) # and self._se.uid == se.uid)\n\t    def _trampoline_mem_read_cb(self, ctx, mem):\n\t        \"\"\"\n\t        This function is the trampoline callback on memory read from triton to tritondse\n\t        :param ctx: TritonContext\n", "        :param mem: MemoryAccess\n\t        :return: None\n\t        \"\"\"\n\t        if self._se.pstate.memory.callbacks_enabled():\n\t            for cb in self._mem_read_cbs:\n\t                cb(self._se, self._se.pstate, mem)\n\t    def _trampoline_mem_write_cb(self, ctx, mem, value):\n\t        \"\"\"\n\t        This function is the trampoline callback on memory write from triton to tritondse\n\t        :param ctx: TritonContext\n", "        :param mem: MemoryAccess\n\t        :param value: int\n\t        :return: None\n\t        \"\"\"\n\t        if self._se.pstate.memory.callbacks_enabled():\n\t            for cb in self._mem_write_cbs:\n\t                cb(self._se, self._se.pstate, mem, value)\n\t    def _trampoline_reg_read_cb(self, ctx, reg):\n\t        \"\"\"\n\t        This function is the trampoline callback on register read from triton to tritondse\n", "        :param ctx: TritonContext\n\t        :param reg: Register\n\t        :return: None\n\t        \"\"\"\n\t        for cb in self._reg_read_cbs:\n\t            cb(self._se, self._se.pstate, reg)\n\t    def _trampoline_reg_write_cb(self, ctx, reg, value):\n\t        \"\"\"\n\t        This function is the trampoline callback on register write from triton to tritondse\n\t        :param ctx: TritonContext\n", "        :param reg: Register\n\t        :param value: int\n\t        :return: None\n\t        \"\"\"\n\t        for cb in self._reg_write_cbs:\n\t            cb(self._se, self._se.pstate, reg, value)\n\t    def unbind(self) -> None:\n\t        \"\"\"\n\t        Unbind callbacks from the current process state as well as from\n\t        the Triton Context object.\n", "        \"\"\"\n\t        if self.is_binded():\n\t            self._se.pstate.clear_triton_callbacks()\n\t            self._se = None\n\t    def bind_to(self, se: 'SymbolicExecutor') -> None:\n\t        \"\"\"\n\t        Bind callbacks on the given process state. That step is required\n\t        to register callbacks on the Triton Context object. This is also\n\t        used to keep a reference on the SymbolicExecutor object;\n\t        IMPORTANT You MUST call `unbind` once you finish using the\n", "        SymbolicExecutor.\n\t        :param se: SymbolicExecutor on which to bind callbacks\n\t        :type se: SymbolicExecutor\n\t        \"\"\"\n\t        if self.is_binded() and self._se != se:\n\t            logger.warning(\"Callback_manager already binded (on a different executor instance)\")\n\t        # assert not self.is_binded()\n\t        # NOTE This creates a circular dependency between the SymbolicExecutor\n\t        #      received and this object, as the SymbolicExecutor keeps a\n\t        #      reference to it. Therefore, it is necessary to call `unbind`\n", "        #      once you finish using the executor.\n\t        self._se = se\n\t        # Register only one trampoline by kind of callback. It will be the role\n\t        # of the trampoline to call every registered tritondse callbacks.\n\t        if self._mem_read_cbs:\n\t            se.pstate.register_triton_callback(CALLBACK.GET_CONCRETE_MEMORY_VALUE, self._trampoline_mem_read_cb)\n\t        if self._mem_write_cbs:\n\t            se.pstate.register_triton_callback(CALLBACK.SET_CONCRETE_MEMORY_VALUE, self._trampoline_mem_write_cb)\n\t        if self._reg_read_cbs:\n\t            se.pstate.register_triton_callback(CALLBACK.GET_CONCRETE_REGISTER_VALUE, self._trampoline_reg_read_cb)\n", "        if self._reg_write_cbs:\n\t            se.pstate.register_triton_callback(CALLBACK.SET_CONCRETE_REGISTER_VALUE, self._trampoline_reg_write_cb)\n\t        # Check if there is a program on which to register functions callback\n\t        if self._func_to_register:\n\t            if se.loader:\n\t                for fname in list(self._func_to_register):\n\t                    cbs = self._func_to_register.pop(fname)\n\t                    addr = se.loader.find_function_addr(fname)\n\t                    if addr:\n\t                        for cb in cbs:\n", "                            self.register_pre_addr_callback(addr, cb)\n\t                    else:\n\t                        logger.warning(f\"can't find function '{fname}' in {se.loader}\")\n\t            else:\n\t                logger.warning(f\"function callback to resolve but no program provided\")\n\t    def register_addr_callback(self, pos: CbPos, addr: Addr, callback: AddrCallback) -> None:\n\t        \"\"\"\n\t        Register a callback function on a given address before or after the execution\n\t        of the associated instruction.\n\t        :param pos: When to trigger the callback (before or after) execution of the instruction\n", "        :type pos: CbPos\n\t        :param addr: Address where to trigger the callback\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.AddrCallback`\n\t        \"\"\"\n\t        if addr not in self._pc_addr_cbs:\n\t            self._pc_addr_cbs[addr] = {CbPos.BEFORE: [], CbPos.AFTER: []}\n\t        self._pc_addr_cbs[addr][pos].append(callback)\n\t        self._empty = False\n", "    def register_pre_addr_callback(self, addr: Addr, callback: AddrCallback) -> None:\n\t        \"\"\"\n\t        Register pre address callback\n\t        :param addr: Address where to trigger the callback\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.AddrCallback`\n\t        \"\"\"\n\t        self.register_addr_callback(CbPos.BEFORE, addr, callback)\n\t    def register_post_addr_callback(self, addr: Addr, callback: AddrCallback) -> None:\n", "        \"\"\"\n\t        Register post-address callback. Equivalent to register a pre-address on the\n\t        return site. *(assume the function returns)*\n\t        :param addr: Address where to trigger the callback\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.AddrCallback`\n\t        \"\"\"\n\t        self.register_addr_callback(CbPos.AFTER, addr, callback)\n\t    def get_address_callbacks(self, addr: Addr) -> Tuple[List[AddrCallback], List[AddrCallback]]:\n", "        \"\"\"\n\t        Get all the pre/post callbacks for a given address.\n\t        :param addr: Address where to trigger the callback\n\t        :type addr: :py:obj:`tritondse.types.Addr`\n\t        :return: tuple of lists containing callback functions for pre/post respectively\n\t        \"\"\"\n\t        cbs = self._pc_addr_cbs.get(addr, None)\n\t        if cbs:\n\t            return cbs[CbPos.BEFORE], cbs[CbPos.AFTER]\n\t        else:\n", "            return [], []\n\t    def register_opcode_callback(self, pos: CbPos, opcode: bytes, callback: OpcodeCallback) -> None:\n\t        \"\"\"\n\t        Register a callback function on a given opcode before or after the execution\n\t        of the associated instruction.\n\t        :param pos: When to trigger the callback (before or after) execution of the instruction\n\t        :type pos: CbPos\n\t        :param opcode: Opcode where to trigger the callback\n\t        :type opcode: :py:obj:`bytes`\n\t        :param callback: callback function\n", "        :type callback: :py:obj:`tritondse.callbacks.OpcodeCallback`\n\t        \"\"\"\n\t        if opcode not in self._opcode_cbs:\n\t            self._opcode_cbs[opcode] = {CbPos.BEFORE: [], CbPos.AFTER: []}\n\t        self._opcode_cbs[opcode][pos].append(callback)\n\t        self._empty = False\n\t    def register_pre_opcode_callback(self, opcode: bytes, callback: OpcodeCallback) -> None:\n\t        \"\"\"\n\t        Register pre-opcode callback.\n\t        :param opcode: Opcode where to trigger the callback\n", "        :type opcode: :py:obj:`bytes`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.OpcodeCallback`\n\t        \"\"\"\n\t        self.register_opcode_callback(CbPos.BEFORE, opcode, callback)\n\t    def register_post_opcode_callback(self, opcode: bytes, callback: OpcodeCallback) -> None:\n\t        \"\"\"\n\t        Register post-opcode callback.\n\t        :param opcode: Opcode where to trigger the callback\n\t        :type opcode: :py:obj:`bytes`\n", "        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.OpcodeCallback`\n\t        \"\"\"\n\t        self.register_opcode_callback(CbPos.AFTER, opcode, callback)\n\t    def get_opcode_callbacks(self, opcode: bytes) -> Tuple[List[OpcodeCallback], List[OpcodeCallback]]:\n\t        \"\"\"\n\t        Get all the pre/post callbacks for a given opcode.\n\t        :param opcode: Opcode where to trigger the callback\n\t        :type opcode: :py:obj:`bytes`\n\t        :return: tuple of lists containing callback functions for pre/post respectively\n", "        \"\"\"\n\t        cbs = self._opcode_cbs.get(opcode, None)\n\t        if cbs:\n\t            return cbs[CbPos.BEFORE], cbs[CbPos.AFTER]\n\t        else:\n\t            return [], []\n\t    def register_mnemonic_callback(self, pos: CbPos, mnemonic: OPCODE, callback: MnemonicCallback) -> None:\n\t        \"\"\"\n\t        Register a callback function on a given mnemonic before or after the execution\n\t        of the associated instruction.\n", "        :param pos: When to trigger the callback (before or after) execution of the instruction\n\t        :type pos: CbPos\n\t        :param mnemonic: Mnemonic where to trigger the callback\n\t        :type mnemonic: :py:obj:`OPCODE`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.MnemonicCallback`\n\t        \"\"\"\n\t        if mnemonic not in self._mnemonic_cbs:\n\t            self._mnemonic_cbs[mnemonic] = {CbPos.BEFORE: [], CbPos.AFTER: []}\n\t        self._mnemonic_cbs[mnemonic][pos].append(callback)\n", "        self._empty = False\n\t    def register_pre_mnemonic_callback(self, mnemonic: OPCODE, callback: MnemonicCallback) -> None:\n\t        \"\"\"\n\t        Register pre-mnemonic callback.\n\t        :param mnemonic: Mnemonic where to trigger the callback\n\t        :type mnemonic: :py:obj:`OPCODE`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.MnemonicCallback`\n\t        \"\"\"\n\t        self.register_mnemonic_callback(CbPos.BEFORE, mnemonic, callback)\n", "    def register_post_mnemonic_callback(self, mnemonic: OPCODE, callback: MnemonicCallback) -> None:\n\t        \"\"\"\n\t        Register post-mnemonic callback.\n\t        :param mnemonic: Mnemonic where to trigger the callback\n\t        :type mnemonic: :py:obj:`OPCODE`\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.MnemonicCallback`\n\t        \"\"\"\n\t        self.register_mnemonic_callback(CbPos.AFTER, mnemonic, callback)\n\t    def get_mnemonic_callbacks(self, mnemonic: OPCODE) -> Tuple[List[MnemonicCallback], List[MnemonicCallback]]:\n", "        \"\"\"\n\t        Get all the pre/post callbacks for a given mnemonic.\n\t        :param mnemonic: Mnemonic where to trigger the callback\n\t        :type mnemonic: :py:obj:`OPCODE`\n\t        :return: tuple of lists containing callback functions for pre/post respectively\n\t        \"\"\"\n\t        cbs = self._mnemonic_cbs.get(mnemonic, None)\n\t        if cbs:\n\t            return cbs[CbPos.BEFORE], cbs[CbPos.AFTER]\n\t        else:\n", "            return [], []\n\t    def register_function_callback(self, func_name: str, callback: AddrCallback) -> None:\n\t        \"\"\"\n\t        Register a callback on the address of the given function name.\n\t        The function name is only resolve when the callback manager is binded\n\t        to a SymbolicExecutor.\n\t        :param func_name: Function name\n\t        :type func_name: str\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.AddrCallback`\n", "        \"\"\"\n\t        if func_name in self._func_to_register:\n\t            self._func_to_register[func_name].append(callback)\n\t        else:\n\t            self._func_to_register[func_name] = [callback]\n\t    def register_instruction_callback(self, pos: CbPos, callback: InstrCallback) -> None:\n\t        \"\"\"\n\t        Register a callback triggered on each instruction executed, before or after its\n\t        side effects have been applied to ProcessState.\n\t        :param pos: before, after execution of the instruction\n", "        :type pos: CbPos\n\t        :param callback: callback function to trigger\n\t        :type callback: :py:obj:`tritondse.callbacks.InstrCallback`\n\t        \"\"\"\n\t        self._instr_cbs[pos].append(callback)\n\t        self._empty = False\n\t    def register_pre_instruction_callback(self, callback: InstrCallback) -> None:\n\t        \"\"\"\n\t        Register a pre-execution callback on all instruction executed by the engine.\n\t        :param callback: callback function to trigger\n", "        :type callback: :py:obj:`tritondse.callbacks.InstrCallback`\n\t        \"\"\"\n\t        self.register_instruction_callback(CbPos.BEFORE, callback)\n\t    def register_post_instruction_callback(self, callback: InstrCallback) -> None:\n\t        \"\"\"\n\t        Register a post-execution callback on all instruction executed by the engine.\n\t        :param callback: callback function to trigger\n\t        :type callback: :py:obj:`tritondse.callbacks.InstrCallback`\n\t        \"\"\"\n\t        self.register_instruction_callback(CbPos.AFTER, callback)\n", "    def get_instruction_callbacks(self) -> Tuple[List[InstrCallback], List[InstrCallback]]:\n\t        \"\"\"\n\t        Get all the pre/post callbacks for instructions.\n\t        :return: tuple of lists containing callback functions for pre/post respectively\n\t        \"\"\"\n\t        return self._instr_cbs[CbPos.BEFORE], self._instr_cbs[CbPos.AFTER]\n\t    def register_pre_execution_callback(self, callback: SymExCallback) -> None:\n\t        \"\"\"\n\t        Register a callback executed after program loading, registers and memory\n\t        initialization. Thus this callback is called just before executing the\n", "        first instruction.\n\t        :param callback: Callback function to trigger\n\t        :type callback: :py:obj:`tritondse.callbacks.SymExCallback`\n\t        \"\"\"\n\t        self._pre_exec.append(callback)\n\t        self._empty = False\n\t    def register_post_execution_callback(self, callback: SymExCallback) -> None:\n\t        \"\"\"\n\t        Register a callback executed after program loading, registers and memory\n\t        initialization. Thus this callback is called after executing upon program\n", "        exit (or crash)\n\t        :param callback: Callback function to trigger\n\t        :type callback: :py:obj:`tritondse.callbacks.SymExCallback`\n\t        \"\"\"\n\t        self._post_exec.append(callback)\n\t        self._empty = False\n\t    def register_exploration_step_callback(self, callback: ExplorationStepCallback) -> None:\n\t        \"\"\"\n\t        Register a callback executed before each exploration step. The object\n\t        given in parameter is the SymbolicExplorator itself.\n", "        :param callback: Callback function to trigger\n\t        :type callback: :py:obj:`tritondse.callbacks.ExplorationStepCallback`\n\t        \"\"\"\n\t        self._step_cbs.append(callback)\n\t        # self._empty = False  # Does not impact the emptiness of the callbackmanager\n\t    def get_execution_callbacks(self) -> Tuple[List[SymExCallback], List[SymExCallback]]:\n\t        \"\"\"\n\t        Get all the pre/post callbacks for the current symbolic execution.\n\t        :return: tuple of lists containing callback functions for pre/post respectively\n\t        \"\"\"\n", "        return self._pre_exec, self._post_exec\n\t    def register_memory_read_callback(self, callback: MemReadCallback) -> None:\n\t        \"\"\"\n\t        Register a callback that will be triggered by any read in the concrete\n\t        memory of the process state.\n\t        :param callback: Callback function to be called\n\t        :type callback: :py:obj:`tritondse.callbacks.MemCallback`\n\t        \"\"\"\n\t        self._mem_read_cbs.append(callback)\n\t        self._empty = False\n", "    def register_memory_write_callback(self, callback: MemWriteCallback) -> None:\n\t        \"\"\"\n\t        Register a callback called on each write in the concrete memory state\n\t        of the process.\n\t        :param callback: Callback function to be called\n\t        :type callback: :py:obj:`tritondse.callbacks.MemCallback`\n\t        \"\"\"\n\t        self._mem_write_cbs.append(callback)\n\t        self._empty = False\n\t    def register_register_read_callback(self, callback: RegReadCallback) -> None:\n", "        \"\"\"\n\t        Register a callback on each register read during the symbolic execution.\n\t        :param callback: Callback function to be called\n\t        :type callback: :py:obj:`tritondse.callbacks.RegReadCallback`\n\t        \"\"\"\n\t        self._reg_read_cbs.append(callback)\n\t        self._empty = False\n\t    def register_register_write_callback(self, callback: RegWriteCallback) -> None:\n\t        \"\"\"\n\t        Register a callback on each register write during the symbolic execution.\n", "        :param callback: Callback function to be called\n\t        :type callback: :py:obj:`tritondse.callbacks.RegReadCallback`\n\t        \"\"\"\n\t        self._reg_write_cbs.append(callback)\n\t        self._empty = False\n\t    def register_thread_context_switch_callback(self, callback: ThreadCallback) -> None:\n\t        \"\"\"\n\t        Register a callback triggered upon each thread context switch during the execution.\n\t        :param callback: Callback to be called\n\t        :type callback: :py:obj:`tritondse.callbacks.ThreadCallback`\n", "        \"\"\"\n\t        self._ctx_switch.append(callback)\n\t        self._empty = False\n\t    def get_context_switch_callback(self) -> List[ThreadCallback]:\n\t        \"\"\"\n\t        Get the list of all function callback to call when thread is being scheduled.\n\t        :return: List of callbacks defined when thread is being scheduled\n\t        \"\"\"\n\t        return self._ctx_switch\n\t    def register_new_input_callback(self, callback: NewInputCallback) -> None:\n", "        \"\"\"\n\t        Register a callback function called when the SMT solver find a new model namely\n\t        a new input. This callback is called before any treatment on the input (worklist, etc.).\n\t        It thus allow to post-process the input before it getting put in the queue.\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.NewInputCallback`\n\t        \"\"\"\n\t        self._new_input_cbs.append(callback)\n\t        self._empty = False\n\t    def get_new_input_callback(self) -> List[NewInputCallback]:\n", "        \"\"\"\n\t        Get the list of all function callback to call when an a new\n\t        input is generated by SMT.\n\t        :return: List of callbacks to call on input generation\n\t        \"\"\"\n\t        return self._new_input_cbs\n\t    def register_on_solving_callback(self, callback: SymExSolvingCallback) -> None:\n\t        \"\"\"\n\t        Register a callback function called when a branch is about to\n\t        be solved. This callback is called before the branch is solved and will\n", "        use the result of the callback to go ahead with the solving or skip it.\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.BranchSolvingCallback`\n\t        \"\"\"\n\t        self._branch_solving_cbs.append(callback)\n\t        self._empty = False\n\t    def get_on_solving_callback(self) -> List[SymExSolvingCallback]:\n\t        \"\"\"\n\t        Get the list of all function callbacks to call when a branch is about\n\t        to be solved.\n", "        :return: List of callbacks to call on branch solving\n\t        \"\"\"\n\t        return self._branch_solving_cbs\n\t    def register_on_branch_covered_callback(self, callback: BranchCoveredCallback) -> None:\n\t        \"\"\"\n\t        Register a callback function called when a branch covered. This callback\n\t        is called after the branch is solved.\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.BranchCoveredCallback`\n\t        \"\"\"\n", "        self._branch_covered_cbs.append(callback)\n\t        self._empty = False\n\t    def get_on_branch_covered_callback(self) -> List[BranchCoveredCallback]:\n\t        \"\"\"\n\t        Get the list of all function callbacks to call when a branch is about\n\t        to be solved.\n\t        :return: List of callbacks to call on branch covered\n\t        \"\"\"\n\t        return self._branch_covered_cbs\n\t    def register_memory_violation_callback(self, callback: MemoryViolationCallback) -> None:\n", "        \"\"\"\n\t        Register a callback function called when a memory violation occured during the\n\t        emulation.\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.MemoryViolationCallback`\n\t        \"\"\"\n\t        self._mem_violation_cbs.append(callback)\n\t        self._empty = False\n\t    def get_memory_violation_callbacks(self) -> List[MemoryViolationCallback]:\n\t        \"\"\"\n", "        Get all memory violation callbacks.\n\t        :return: list of memory violation callbacks\n\t        \"\"\"\n\t        return self._mem_violation_cbs\n\t    def get_exploration_step_callbacks(self) -> List[ExplorationStepCallback]:\n\t        \"\"\"\n\t        Get all the exploration step callbacks\n\t        :return: list containing callbacks\n\t        \"\"\"\n\t        return self._step_cbs\n", "    def register_pre_imported_routine_callback(self, routine_name: str, callback: RtnCallback) -> None:\n\t        \"\"\"\n\t        Register a callback before call to an imported routines\n\t        :param routine_name: the routine name\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.RtnCallback`\n\t        \"\"\"\n\t        if routine_name in self._pre_rtn_cbs:\n\t            self._pre_rtn_cbs[routine_name].append(callback)\n\t        else:\n", "            self._pre_rtn_cbs[routine_name] = [callback]\n\t        self._empty = False\n\t    def register_post_imported_routine_callback(self, routine_name: str, callback: RtnCallback) -> None:\n\t        \"\"\"\n\t        Register a callback, called after the call to imported routines.\n\t        :param routine_name: the routine name\n\t        :param callback: callback function\n\t        :type callback: :py:obj:`tritondse.callbacks.RtnCallback`\n\t        \"\"\"\n\t        if routine_name in self._post_rtn_cbs:\n", "            self._post_rtn_cbs[routine_name].append(callback)\n\t        else:\n\t            self._post_rtn_cbs[routine_name] = [callback]\n\t        self._empty = False\n\t    def get_imported_routine_callbacks(self, routine_name: str) -> Tuple[List[RtnCallback], List[RtnCallback]]:\n\t        \"\"\"\n\t        Get the list of all callbacks for an imported routine\n\t        :param routine_name: the routine name\n\t        :return: Tuple of list of callbacks (for pre and post)\n\t        \"\"\"\n", "        pre_ret = (self._pre_rtn_cbs[routine_name] if routine_name in self._pre_rtn_cbs else [])\n\t        post_ret = (self._post_rtn_cbs[routine_name] if routine_name in self._post_rtn_cbs else [])\n\t        return pre_ret, post_ret\n\t    def register_probe(self, probe: ProbeInterface) -> None:\n\t        \"\"\"\n\t        Register a probe. That function will iterate the ``cbs`` attribute\n\t        of the object, and will register each entries in self.\n\t        .. warning:: Does not implement all CbType\n\t        :param probe: a probe interface\n\t        :type probe: ProbeInterface\n", "        \"\"\"\n\t        for kind, cb, arg in probe.callbacks:\n\t            try:\n\t                mapping_with_args = {\n\t                    CbType.PRE_RTN: self.register_pre_imported_routine_callback,\n\t                    CbType.POST_RTN: self.register_post_imported_routine_callback,\n\t                    CbType.PRE_ADDR: self.register_pre_addr_callback,\n\t                    CbType.POST_ADDR: self.register_post_addr_callback,\n\t                    CbType.PRE_MNEM: self.register_pre_mnemonic_callback,\n\t                    CbType.POST_MNEM: self.register_post_mnemonic_callback,\n", "                    CbType.PRE_OPCODE: self.register_pre_opcode_callback,\n\t                    CbType.POST_OPCODE: self.register_post_opcode_callback,\n\t                }\n\t                mapping_with_args[kind](arg, cb)\n\t            except KeyError:\n\t                mapping = {\n\t                    CbType.CTX_SWITCH: self.register_thread_context_switch_callback,\n\t                    CbType.MEMORY_READ: self.register_memory_read_callback,\n\t                    CbType.MEMORY_WRITE: self.register_memory_write_callback,\n\t                    CbType.POST_EXEC: self.register_post_execution_callback,\n", "                    CbType.POST_INST: self.register_post_instruction_callback,\n\t                    CbType.PRE_EXEC: self.register_pre_execution_callback,\n\t                    CbType.PRE_INST: self.register_pre_instruction_callback,\n\t                    CbType.REG_READ: self.register_register_read_callback,\n\t                    CbType.REG_WRITE: self.register_register_write_callback,\n\t                    CbType.NEW_INPUT: self.register_new_input_callback,\n\t                    CbType.EXPLORE_STEP: self.register_exploration_step_callback,\n\t                    CbType.BRANCH_COV: self.register_on_branch_covered_callback,\n\t                    CbType.SYMEX_SOLVING: self.register_on_solving_callback,\n\t                    CbType.MEM_VIOLATION: self.register_memory_violation_callback\n", "                }\n\t                mapping[kind](cb)\n\t    def fork(self) -> 'CallbackManager':\n\t        \"\"\"\n\t        Fork the current CallbackManager in a new object instance\n\t        (that will be unbinded). That method is used by the SymbolicExplorator\n\t        to ensure each SymbolicExecutor running concurrently will have\n\t        their own instance off the CallbackManager.\n\t        :return: Fresh instance of CallbackManager\n\t        :rtype: CallbackManager\n", "        \"\"\"\n\t        cbs = CallbackManager()\n\t        # SymbolicExecutor callbacks\n\t        cbs._pc_addr_cbs        = self._pc_addr_cbs.copy()\n\t        cbs._opcode_cbs         = self._opcode_cbs.copy()\n\t        cbs._mnemonic_cbs       = self._mnemonic_cbs.copy()\n\t        cbs._instr_cbs          = self._instr_cbs.copy()\n\t        cbs._pre_exec           = self._pre_exec.copy()\n\t        cbs._post_exec          = self._post_exec.copy()\n\t        cbs._ctx_switch         = self._ctx_switch.copy()\n", "        cbs._new_input_cbs      = self._new_input_cbs.copy()\n\t        cbs._branch_solving_cbs = self._branch_solving_cbs.copy()\n\t        cbs._branch_covered_cbs = self._branch_covered_cbs.copy()\n\t        cbs._pre_rtn_cbs        = self._pre_rtn_cbs.copy()\n\t        cbs._post_rtn_cbs       = self._post_rtn_cbs.copy()\n\t        cbs._mem_violation_cbs  = self._mem_violation_cbs.copy()\n\t        # Triton callbacks\n\t        cbs._mem_read_cbs  = self._mem_read_cbs.copy()\n\t        cbs._mem_write_cbs = self._mem_write_cbs.copy()\n\t        cbs._reg_read_cbs  = self._reg_read_cbs.copy()\n", "        cbs._reg_write_cbs = self._reg_write_cbs.copy()\n\t        cbs._empty         = self._empty\n\t        # Copy temporary data\n\t        cbs._func_to_register = self._func_to_register.copy()\n\t        return cbs\n\t    def unregister_callback(self, callback: Callable) -> None:\n\t        \"\"\"\n\t        Unregister the given callback from the manager.\n\t        :param callback: callback to remove\n\t        :return: None\n", "        \"\"\"\n\t        for addr, itms in self._pc_addr_cbs.items():\n\t            for loc in CbPos:\n\t                if callback in itms[loc]:\n\t                    itms[loc].remove(callback)\n\t        for opcode, itms in self._opcode_cbs.items():\n\t            for loc in CbPos:\n\t                if callback in itms[loc]:\n\t                    itms[loc].remove(callback)\n\t        for mnemonic, itms in self._mnemonic_cbs.items():\n", "            for loc in CbPos:\n\t                if callback in itms[loc]:\n\t                    itms[loc].remove(callback)\n\t        for loc in CbPos:\n\t            if callback in self._instr_cbs[loc]:\n\t                self._instr_cbs[loc].remove(callback)\n\t        for cb_list in [self._step_cbs, self._pre_exec, self._post_exec, self._ctx_switch, self._new_input_cbs, self._branch_solving_cbs, self._branch_covered_cbs,\n\t                        self._mem_read_cbs, self._mem_write_cbs, self._reg_read_cbs, self._reg_write_cbs, self._mem_violation_cbs]:\n\t            if callback in cb_list:\n\t                cb_list.remove(callback)\n", "        for d in [self._pre_rtn_cbs, self._post_rtn_cbs]:\n\t            for cb_list in d.values():\n\t                if callback in cb_list:\n\t                    cb_list.remove(callback)\n\t    def reset(self) -> None:\n\t        \"\"\"\n\t        Reset all callbacks\n\t        :return:\n\t        \"\"\"\n\t        # SymbolicExplorator callbacks\n", "        self._step_cbs = []  # Callback called between each exploration steps\n\t        # SymbolicExecutor callbacks\n\t        self._pc_addr_cbs        = {}  # addresses reached\n\t        self._opcode_cbs         = {}  # opcode before and after\n\t        self._mnemonic_cbs       = {}  # mnemonic before and after\n\t        self._instr_cbs          = {CbPos.BEFORE: [], CbPos.AFTER: []}  # all instructions\n\t        self._pre_exec           = []  # before execution\n\t        self._post_exec          = []  # after execution\n\t        self._ctx_switch         = []  # on each thread context switch (implementing pre/post?)\n\t        self._new_input_cbs      = []  # each time an SMT model is get\n", "        self._branch_solving_cbs = []  # each time a covitem is about to be solved\n\t        self._branch_covered_cbs = []  # each time a covitem is covered\n\t        self._pre_rtn_cbs        = {}  # before imported routine calls ({str: [RtnCallback]})\n\t        self._post_rtn_cbs       = {}  # after imported routine calls ({str: [RtnCallback]})\n\t        self._mem_violation_cbs  = []  # reset the memory violation calls\n\t        # Triton callbacks\n\t        self._mem_read_cbs  = []  # memory reads\n\t        self._mem_write_cbs = []  # memory writes\n\t        self._reg_read_cbs  = []  # register reads\n\t        self._reg_write_cbs = []  # register writes\n", "        self._empty         = True\n"]}
{"filename": "tritondse/logging.py", "chunked_list": ["import logging\n\t'''\n\tLoggers hierarchy is the following:\n\t- tritondse.\n\t    - \n\t'''\n\tlogger = logging.getLogger('tritondse')\n\tlogger.propagate = False  # Do not propagate logs by default\n\tcolor_enabled = True\n\t_loggers = {}\n", "def get(name: str = \"\") -> logging.Logger:\n\t    \"\"\"\n\t    Get a child logger from the tritondse one.\n\t    If name is empty returns the root tritondse\n\t    logger.\n\t    :param name: logger name\n\t    \"\"\"\n\t    log = logger.getChild(name) if name else logger\n\t    if log.name not in _loggers:\n\t        log.propagate = False  # first time it is retrieve disable propagation\n", "        _loggers[log.name] = log\n\t    return log\n\tdef enable(level: int = logging.INFO, name: str = \"\") -> None:\n\t    \"\"\"\n\t    Enable tritondse logging to terminal output\n\t    :param level: logging level\n\t    :param name: name of the logger to enable (all by default)\n\t    \"\"\"\n\t    log = get(name)\n\t    log.propagate = True\n", "    log.setLevel(level)\n\t    # Enable root logger if needed\n\t    if log.name != \"tritondse\":\n\t        logger.propagate = True\n\t    else:\n\t        for sub_logger in _loggers.values():\n\t            sub_logger.propagate = True\n\tdef enable_to_file(level: int, file: str, name: str = \"\") -> None:\n\t    \"\"\"\n\t    Enable tritondse logging to a file\n", "    :param level: logging level\n\t    :param file: path to log file\n\t    :param name: name of the logger to enable to a file\n\t    \"\"\"\n\t    log = get(name)\n\t    log.setLevel(level)\n\t    fmt = logging.Formatter(\"%(asctime)s %(threadName)s [%(levelname)s] %(message)s\")\n\t    handler = logging.FileHandler(file)\n\t    handler.setFormatter(fmt)\n\t    log.addHandler(handler)  # Add the handler to the logger"]}
{"filename": "tritondse/probes/basic_trace.py", "chunked_list": ["from tritondse import ProbeInterface, CbType, SymbolicExecutor, ProcessState, SymbolicExplorator\n\timport tritondse.logging\n\tlogger = tritondse.logging.get(\"probe.basictrace\")\n\tclass BasicDebugTrace(ProbeInterface):\n\t    \"\"\"\n\t    Basic probe that print instruction trace\n\t    to logging debug.\n\t    \"\"\"\n\t    NAME = \"debugtrace-probe\"\n\t    def __init__(self):\n", "        super(BasicDebugTrace, self).__init__()\n\t        self._add_callback(CbType.PRE_INST, self.trace_debug)\n\t    def trace_debug(self, exec: SymbolicExecutor, __: ProcessState, ins: 'Instruction'):\n\t        logger.debug(f\"[tid:{ins.getThreadId()}] {exec.trace_offset} [0x{ins.getAddress():x}]: {ins.getDisassembly()}\")\n\tclass BasicTextTrace(ProbeInterface):\n\t    \"\"\"\n\t    Basic probe that generate a txt execution trace\n\t    for each run.\n\t    \"\"\"\n\t    NAME = \"txttrace-probe\"\n", "    def __init__(self):\n\t        super(BasicTextTrace, self).__init__()\n\t        self._add_callback(CbType.PRE_EXEC, self.pre_execution)\n\t        self._add_callback(CbType.POST_EXEC, self.post_execution)\n\t        self._add_callback(CbType.PRE_INST, self.trace_debug)\n\t        # File in which to write the trace\n\t        self._file = None\n\t    def pre_execution(self, executor: SymbolicExecutor, _: ProcessState):\n\t        # Triggered before each execution\n\t        name = f\"{executor.uid}-{executor.seed.hash}.txt\"\n", "        file = executor.workspace.get_metadata_file_path(f\"{self.NAME}/{name}\")\n\t        self._file = open(file, \"w\")\n\t    def post_execution(self, executor: SymbolicExecutor, _: ProcessState):\n\t        self._file.close()\n\t    def trace_debug(self, exec: SymbolicExecutor, __: ProcessState, ins: 'Instruction'):\n\t        \"\"\"\n\t        This function is mainly used for debug.\n\t        :param _: The current symbolic executor\n\t        :param __: The current processus state of the execution\n\t        :param ins: The current instruction executed\n", "        :return: None\n\t        \"\"\"\n\t        self._file.write(f\"[tid:{ins.getThreadId()}] {exec.trace_offset} [0x{ins.getAddress():x}]: {ins.getDisassembly()}\\n\")\n"]}
{"filename": "tritondse/probes/__init__.py", "chunked_list": []}
{"filename": "tritondse/loaders/quokkaprogram.py", "chunked_list": ["# Built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Union, Generator, Tuple, Optional, Any, List\n\t# third-party imports\n\timport quokka\n\timport networkx\n\timport lief\n\t# local imports\n\tfrom tritondse.loaders import Program, LoadableSegment\n\tfrom tritondse.coverage import CoverageSingleRun\n", "from tritondse.types import PathLike, Addr, Architecture, Platform, Endian\n\tclass QuokkaProgram(quokka.Program):\n\t    def __init__(self, export_file: Union[Path, str], exec_path: Union[Path, str]):\n\t        super(QuokkaProgram, self).__init__(export_file, exec_path)\n\t        self.program = Program(self.executable.exec_file.as_posix())\n\t    def get_call_graph(self, backedge_on_ret=False) -> networkx.DiGraph:\n\t        \"\"\"\n\t        Compute the call graph of the program.\n\t        :param backedge_on_ret: if true, add a back edge to represent the \"return\"\n\t        :return: call graph as a digraph\n", "        \"\"\"\n\t        g = networkx.DiGraph()\n\t        for fun in self.values():\n\t            g.add_edges_from((fun.start, x.start) for x in fun.calls)\n\t            if backedge_on_ret:  # Add return edge\n\t                g.add_edges_from((x.start, fun.start) for x in fun.calls)\n\t        return g\n\t    @staticmethod\n\t    def get_slice(graph: networkx.DiGraph, frm: Any, to: Any) -> networkx.DiGraph:\n\t        \"\"\"\n", "        Compute the slice between the two nodes on the given graph.\n\t        The slice is the intersection of reachable node (of ``frm``) and\n\t        ancestors of ``to``. The result is a subgraph of the original graph.\n\t        :param graph: Graph on which to compute the slice\n\t        :param frm: node identifier\n\t        :param to: node identifier\n\t        :return: sub graph\n\t        \"\"\"\n\t        succs = networkx.descendants(graph, frm)\n\t        preds = networkx.ancestors(graph, to)\n", "        return graph.subgraph(succs.intersection(preds).union({frm, to}))\n\t    def merge(self, coverage: CoverageSingleRun):\n\t        # TODO: To implement\n\t        raise NotImplementedError\n\t    def __repr__(self):\n\t        return f\"<{self.export_file.name}  funs:{len(self)}>\"\n\t    def get_caller_instructions(self, target: quokka.Function) -> List[int]:\n\t        \"\"\"Get the list of instructions calling `target`\n\t        \"\"\"\n\t        # Get the first instruction of the target\n", "        first_inst = target.get_instruction(target.start)\n\t        assert first_inst is not None\n\t        # Reference holder\n\t        ref = target.program.references\n\t        caller_instructions = []\n\t        for reference in ref.resolve_inst_instance(first_inst.inst_tuple, quokka.types.ReferenceType.CALL, towards=True):\n\t            _, block, offset = reference.source\n\t            inst = list(block.instructions)[offset]\n\t            caller_instructions.append(inst.address)\n\t        return caller_instructions\n", "    # ============== Methods for interroperability with Program object ==============\n\t    @property\n\t    def path(self) -> Path:\n\t        return self.program.path\n\t    @path.setter\n\t    def path(self, path: Path) -> None:\n\t        self.program.path = path\n\t    @property\n\t    def entry_point(self) -> Addr:\n\t        return self.program.entry_point\n", "    @property\n\t    def architecture(self) -> Architecture:\n\t        return self.program.architecture\n\t    @property\n\t    def platform(self) -> Platform:\n\t        return self.program.platform\n\t    @property\n\t    def endianness(self) -> Endian:\n\t        return self.program.endianness\n\t    @property\n", "    def format(self) -> lief.EXE_FORMATS:\n\t        return self.program.format\n\t    @property\n\t    def relocation_enum(self):\n\t        return self.program.relocation_enum\n\t    def memory_segments(self) -> Generator[LoadableSegment, None, None]:\n\t        return self.program.memory_segments()\n\t    def imported_functions_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        return self.program.imported_functions_relocations()\n\t    def imported_variable_symbols_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n", "        return self.program.imported_variable_symbols_relocations()\n\t    def find_function_addr(self, name: str) -> Optional[Addr]:\n\t        return self.program.find_function_addr(name)\n\t    def find_function_from_addr(self, address: Addr) -> Optional[quokka.function.Function]:\n\t        for f in self.values():\n\t            if f.in_func(address):\n\t                return f\n"]}
{"filename": "tritondse/loaders/cle_loader.py", "chunked_list": ["from typing import Generator, Optional, Tuple\n\tfrom pathlib import Path\n\timport logging\n\t# Third-party imports\n\timport cle\n\t# Local imports\n\tfrom tritondse.loaders import Loader, LoadableSegment\n\tfrom tritondse.types import Addr, Architecture, PathLike, Platform, Perm, Endian\n\tfrom tritondse.routines import SUPPORTED_ROUTINES\n\timport tritondse.logging\n", "logger = tritondse.logging.get(\"loader\")\n\t_arch_mapper = {\n\t    \"ARMEL\":   Architecture.ARM32,\n\t    \"AARCH64\": Architecture.AARCH64,\n\t    \"AMD64\":   Architecture.X86_64,\n\t    \"X86\":   Architecture.X86,\n\t}\n\t_plfm_mapper = {\n\t    \"UNIX - System V\": Platform.LINUX,\n\t    \"windows\": Platform.WINDOWS,\n", "    \"macos\": Platform.MACOS\n\t}\n\tclass CleLoader(Loader):\n\t    EXTERN_SYM_BASE = 0x0f001000\n\t    EXTERN_SYM_SIZE = 0x1000\n\t    BASE_STACK = 0xf0000000\n\t    END_STACK = 0x70000000  # This is inclusive\n\t    def __init__(self, path: PathLike, ld_path: Optional[PathLike] = None):\n\t        super(CleLoader, self).__init__(path)\n\t        self.path: Path = Path(path)  #: Binary file path\n", "        if not self.path.is_file():\n\t            raise FileNotFoundError(f\"file {path} not found (or not a file)\")\n\t        self._disable_vex_loggers()  # disable logs of pyvex\n\t        self.ld_path = ld_path if ld_path is not None else ()\n\t        self.ld = cle.Loader(str(path), ld_path=self.ld_path)\n\t    def _disable_vex_loggers(self):\n\t        for name, logger in logging.root.manager.loggerDict.items():\n\t            if \"pyvex\" in name:\n\t                logger.propagate = False\n\t    @property\n", "    def name(self) -> str:\n\t        \"\"\" Name of the loader\"\"\"\n\t        return f\"CleLoader({self.path})\"\n\t    @property\n\t    def architecture(self) -> Architecture:\n\t        \"\"\"\n\t        Architecture enum representing program architecture.\n\t        :rtype: Architecture\n\t        \"\"\"\n\t        return _arch_mapper[self.ld.main_object.arch.name]\n", "    @property\n\t    def endianness(self) -> Endian:\n\t        # FIXME: Depending on architecture returning good endianess\n\t        return Endian.LITTLE\n\t    @property\n\t    def entry_point(self) -> Addr:\n\t        \"\"\"\n\t        Program entrypoint address as defined in the binary headers\n\t        :rtype: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n", "        return self.ld.main_object.entry\n\t    def memory_segments(self) -> Generator[LoadableSegment, None, None]:\n\t        \"\"\"\n\t        :return: Generator of tuples addrs and content\n\t        \"\"\"\n\t        for obj in self.ld.all_objects:\n\t            logger.debug(obj)\n\t            for seg in obj.segments:\n\t                segdata = self.ld.memory.load(seg.vaddr, seg.memsize)\n\t                assert len(segdata) == seg.memsize\n", "                perms = (Perm.R if seg.is_readable else 0) | (Perm.W if seg.is_writable else 0) | (Perm.X if seg.is_executable else 0) \n\t                if seg.__class__.__name__ != \"ExternSegment\":\n\t                    # The format string in CLE is broken if the filesize is 0. This is a workaround.\n\t                    logger.debug(f\"Loading segment {seg} - perms:{perms}\")\n\t                yield LoadableSegment(seg.vaddr, perms, content=segdata, name=f\"seg-{obj.binary_basename}\")\n\t        # Also return a specific map to put external symbols\n\t        yield LoadableSegment(self.EXTERN_SYM_BASE, self.EXTERN_SYM_SIZE, Perm.R | Perm.W, name=\"[extern]\")\n\t        yield LoadableSegment(self.END_STACK, self.BASE_STACK-self.END_STACK+1, Perm.R | Perm.W, name=\"[stack]\")\n\t        # FIXME. Temporary solution to prevent crashes on access to the TLB e.g fs:28\n\t        yield LoadableSegment(0, 0x2000, Perm.R | Perm.W, name=\"[fs]\")\n", "    # FIXME. Temporary solution to prevent crashes on access to the TLB e.g fs:28\n\t    @property\n\t    def cpustate(self):\n\t        # NOTE: in Triton, the segment selector is used as the segment base and not as a selector into GDT.\n\t        # i.e directly store the segment base into fs\n\t        return {\"fs\": 0x1000}\n\t    @property\n\t    def platform(self) -> Optional[Platform]:\n\t        \"\"\"\n\t        Platform of the binary.\n", "        :return: Platform\n\t        \"\"\"\n\t        return _plfm_mapper[self.ld.main_object.os]\n\t    def imported_functions_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        \"\"\"\n\t        Iterate over all imported functions by the program. This function\n\t        is a generator of tuples associating the function and its relocation\n\t        address in the binary.\n\t        :return: Generator of tuples function name and relocation address\n\t        \"\"\"\n", "        # TODO I think there's a problem here. We only deal with imports from the main binary\n\t        # For example if a library calls a libc function, we probably need to patch the library's GOT\n\t        for obj in self.ld.all_objects:\n\t            for fun in obj.imports:\n\t                rtn_name = f\"rtn_{fun}\"\n\t                if fun in SUPPORTED_ROUTINES:\n\t                    reloc = obj.imports[fun]\n\t                    got_entry_addr = reloc.relative_addr + obj.mapped_base\n\t                    yield fun, got_entry_addr\n\t        # Handle indirect functions.\n", "        # Currently we only support indirect functions if there exists a stub for them in `routines.py`\n\t        # Otherwise the program will crash because CLE doesn't perform the relocation for indirect functions.\n\t        # We could perform the relocation ourself by writing to the got slot but we need a way to figure out \n\t        # the correct fptr to use.\n\t        # In other words we should execute `resolver_fun` or parse it in some way to get the correct function ptr\n\t        # to write to got_slot (write with self.ld.memory.pack_word(got_slot, func_ptr))\n\t        for obj in self.ld.all_objects:\n\t            for (resolver_func, got_rva) in obj.irelatives:\n\t                got_slot = got_rva + obj.mapped_base\n\t                sym = self.ld.find_symbol(resolver_func)\n", "                if sym is None:\n\t                    continue\n\t                fun = sym.name\n\t                if fun in SUPPORTED_ROUTINES:\n\t                    yield fun, got_slot\n\t    def imported_variable_symbols_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        \"\"\"\n\t        Iterate over all imported variable symbols. Yield for each of them the name and\n\t        the relocation address in the binary.\n\t        :return: Generator of tuples with symbol name, relocation address\n", "        \"\"\"\n\t        # TODO I think there's a problem here. We only deal with imports from the main binary\n\t        for s in self.ld.main_object.symbols:\n\t            if s.resolved and s._type == cle.SymbolType.TYPE_OBJECT:\n\t                logger.debug(f\"CleLoader: hooking symbol {s.name} @ {s.relative_addr:#x} {s.resolved} {s.resolvedby} {s._type}\")\n\t                s_addr = s.relative_addr + self.ld.main_object.mapped_base\n\t                yield s.name, s_addr\n\t    def find_function_addr(self, name: str) -> Optional[Addr]:\n\t        \"\"\"\n\t        Search for the function name in fonctions of the binary.\n", "        :param name: Function name\n\t        :type name: str\n\t        :return: Address of function if found\n\t        :rtype: Addr\n\t        \"\"\"\n\t        res = [x for x in self.ld.find_all_symbols(name) if x.is_function]\n\t        return res[0].rebased_addr if res else None  # if multiple elements return the first\n"]}
{"filename": "tritondse/loaders/loader.py", "chunked_list": ["from __future__ import annotations\n\t# built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Optional, Generator, Tuple, Dict, List\n\tfrom dataclasses import dataclass\n\t# local imports\n\tfrom tritondse.types import Addr, Architecture, Platform, ArchMode, Perm, Endian\n\tfrom tritondse.arch import ARCHS\n\timport tritondse.logging\n\tlogger = tritondse.logging.get()\n", "@dataclass\n\tclass LoadableSegment:\n\t    \"\"\" Represent a Segment to load in memory.\n\t    It can either provide a content and will thus be\n\t    initialized in a context or virtual.\n\t    \"\"\"\n\t    address: int\n\t    \"\"\" Virtual address where to load the segment \"\"\"\n\t    size: int = 0\n\t    \"\"\" Size of the segment. If content is present use len(content)\"\"\"\n", "    perms: Perm = Perm.R|Perm.W|Perm.X\n\t    \"\"\" Permissions to assign the segment \"\"\"\n\t    content: Optional[bytes] = None\n\t    \"\"\" Content of the segment \"\"\"\n\t    name: str = \"\"\n\t    \"\"\" Name to give to the segment \"\"\"\n\tclass Loader(object):\n\t    \"\"\"\n\t    This class describes how to load the target program in memory.\n\t    \"\"\"\n", "    def __init__(self, path: str):\n\t        self.bin_path = Path(path)\n\t    @property\n\t    def name(self) -> str:\n\t        \"\"\"\n\t        Name of the loader and target being loaded.\n\t        :return: str of the loader name\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    @property\n", "    def entry_point(self) -> Addr:\n\t        \"\"\"\n\t        Program entrypoint address as defined in the binary headers\n\t        :rtype: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    @property\n\t    def architecture(self) -> Architecture:\n\t        \"\"\"\n\t        Architecture enum representing program architecture.\n", "        :rtype: Architecture\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    @property\n\t    def arch_mode(self) -> Optional[ArchMode]:\n\t        \"\"\"\n\t        ArchMode enum representing the starting mode (e.g Thumb for ARM).\n\t        if None, the default mode of the architecture will be used.\n\t        :rtype: Optional[ArchMode]\n\t        \"\"\"\n", "        return None\n\t    @property\n\t    def platform(self) -> Optional[Platform]:\n\t        \"\"\"\n\t        Platform of the binary.\n\t        :return: Platform\n\t        \"\"\"\n\t        return None\n\t    @property\n\t    def endianness(self) -> Endian:\n", "        \"\"\"\n\t        Endianess of the loaded program\n\t        :return: Endianness\n\t        \"\"\"\n\t        raise NotImplementedError()\n\t    def memory_segments(self) -> Generator[LoadableSegment, None, None]:\n\t        \"\"\"\n\t        Iterate over all memory segments of the program as loaded in memory.\n\t        :return: Generator of tuples addrs and content\n\t        :raise NotImplementedError: if the binary format cannot be loaded\n", "        \"\"\"\n\t        raise NotImplementedError()\n\t    @property\n\t    def cpustate(self) -> Dict[str, int]:\n\t        \"\"\"\n\t        Provide the initial cpu state in the forma of a dictionary of\n\t        {\"register_name\" : register_value}\n\t        \"\"\"\n\t        return {}\n\t    def imported_functions_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n", "        \"\"\"\n\t        Iterate over all imported functions by the program. This function\n\t        is a generator of tuples associating the function and its relocation\n\t        address in the binary.\n\t        :return: Generator of tuples function name and relocation address\n\t        \"\"\"\n\t        yield from ()\n\t    def imported_variable_symbols_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        \"\"\"\n\t        Iterate over all imported variable symbols. Yield for each of them the name and\n", "        the relocation address in the binary.\n\t        :return: Generator of tuples with symbol name, relocation address\n\t        \"\"\"\n\t        yield from ()\n\t    def find_function_addr(self, name: str) -> Optional[Addr]:\n\t        \"\"\"\n\t        Search for the function name in fonctions of the binary.\n\t        :param name: Function name\n\t        :type name: str\n\t        :return: Address of function if found\n", "        :rtype: Addr\n\t        \"\"\"\n\t        return None\n\tclass MonolithicLoader(Loader):\n\t    \"\"\"\n\t    Monolithic loader. It helps loading raw firmware at a given address\n\t    in DSE memory space, with the various attributes like architecture etc.\n\t    \"\"\"\n\t    def __init__(self,\n\t                 architecture: Architecture,\n", "                 cpustate: Dict[str, int] = None,\n\t                 maps: List[LoadableSegment] = None,\n\t                 set_thumb: bool = False,\n\t                 platform: Platform = None,\n\t                 endianess: Endian = Endian.LITTLE):\n\t        super(MonolithicLoader, self).__init__(\"\")\n\t        self._architecture = architecture\n\t        self._platform = platform if platform else None\n\t        self._cpustate = cpustate if cpustate else {}\n\t        self.maps = maps\n", "        self._arch_mode = ArchMode.THUMB if set_thumb else None\n\t        self._endian = endianess\n\t        if self._platform and (self._architecture, self._platform) in ARCHS:\n\t            self._archinfo = ARCHS[(self._architecture, self._platform)]\n\t        elif self._architecture in ARCHS:\n\t            self._archinfo = ARCHS[self._architecture]\n\t        else: \n\t            logger.error(\"Unknown architecture\")\n\t            assert False\n\t    @property\n", "    def name(self) -> str:\n\t        \"\"\" Name of the loader\"\"\"\n\t        return f\"Monolithic({self.bin_path})\"\n\t    @property\n\t    def architecture(self) -> Architecture:\n\t        \"\"\"\n\t        Architecture enum representing program architecture.\n\t        :rtype: Architecture\n\t        \"\"\"\n\t        return self._architecture\n", "    @property\n\t    def arch_mode(self) -> ArchMode:\n\t        \"\"\"\n\t        ArchMode enum representing the starting mode (e.g Thumb for ARM).\n\t        :rtype: ArchMode\n\t        \"\"\"\n\t        return self._arch_mode\n\t    @property\n\t    def entry_point(self) -> Addr:\n\t        \"\"\"\n", "        Program entrypoint address as defined in the binary headers\n\t        :rtype: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n\t        return self.cpustate[self._archinfo.pc_reg]\n\t    def memory_segments(self) -> Generator[LoadableSegment, None, None]:\n\t        \"\"\"\n\t        In the case of a monolithic firmware, there is a single segment.\n\t        The generator returns a single tuple with the load address and the content.\n\t        :return: Generator of tuples addrs and content\n\t        \"\"\"\n", "        yield from self.maps\n\t    @property\n\t    def cpustate(self) -> Dict[str, int]:\n\t        \"\"\"\n\t        Provide the initial cpu state in the format of a dictionary of\n\t        {\"register_name\" : register_value}\n\t        \"\"\"\n\t        return self._cpustate\n\t    @property\n\t    def platform(self) -> Optional[Platform]:\n", "        \"\"\"\n\t        Platform of the binary.\n\t        :return: Platform\n\t        \"\"\"\n\t        return self._platform\n\t    @property\n\t    def endianness(self) -> Endian:\n\t        \"\"\"\n\t        Endianess of the monolithic loader.\n\t        (default is LITTLE)\n", "        \"\"\"\n\t        return self._endian\n"]}
{"filename": "tritondse/loaders/program.py", "chunked_list": ["from __future__ import annotations\n\t# built-in imports\n\tfrom pathlib import Path\n\tfrom typing import Optional, Generator, Tuple\n\tfrom collections import namedtuple\n\t# third party\n\timport lief\n\t# local imports\n\tfrom tritondse.types import PathLike, Addr, Architecture, Platform, ArchMode, Perm, Endian\n\tfrom tritondse.loaders import Loader, LoadableSegment\n", "import tritondse.logging\n\tlogger = tritondse.logging.get(\"loader\")\n\t_arch_mapper = {\n\t    lief.ARCHITECTURES.ARM:   Architecture.ARM32,\n\t    lief.ARCHITECTURES.ARM64: Architecture.AARCH64,\n\t    lief.ARCHITECTURES.X86:   Architecture.X86\n\t}\n\t_plfm_mapper = {\n\t    lief.EXE_FORMATS.ELF: Platform.LINUX,\n\t    lief.EXE_FORMATS.PE: Platform.WINDOWS,\n", "    lief.EXE_FORMATS.MACHO: Platform.MACOS\n\t}\n\tclass Program(Loader):\n\t    \"\"\"\n\t    Representation of a program (loaded in memory). This class is wrapping\n\t    `LIEF <https://lief.quarkslab.com/doc/latest>`_ to represent a program\n\t    and to provide all the features allowing to pseudo-load one regardless\n\t    of its format.\n\t    \"\"\"\n\t    EXTERN_SYM_BASE = 0x0f001000\n", "    EXTERN_SYM_SIZE = 0x1000\n\t    BASE_STACK = 0xf0000000\n\t    END_STACK  = 0x70000000 # This is inclusive\n\t    def __init__(self, path: PathLike):\n\t        \"\"\"\n\t        :param path: Program path\n\t        :type path: :py:obj:`tritondse.types.PathLike`\n\t        :raise FileNotFoundError: if the file is not properly recognized by lief\n\t                                  or in the wrong architecture\n\t        \"\"\"\n", "        super(Program, self).__init__(path)\n\t        self.path: Path = Path(path)  #: Binary file path\n\t        if not self.path.is_file():\n\t            raise FileNotFoundError(f\"file {path} not found (or not a file)\")\n\t        self._binary = lief.parse(str(self.path))\n\t        if self._binary is None:  # lief has not been able to parse it\n\t            raise FileNotFoundError(f\"file {path} not recognised by lief\")\n\t        self._arch = self._load_arch()\n\t        if self._arch is None:\n\t            raise FileNotFoundError(f\"binary {path} architecture unsupported {self._binary.abstract.header.architecture}\")\n", "        try:\n\t            self._plfm = _plfm_mapper[self._binary.format]\n\t            # TODO: better refine for Android, iOS etc.\n\t        except KeyError:\n\t            self._plfm = None\n\t        self._funs = {f.name: f for f in self._binary.concrete.functions}\n\t    @property\n\t    def name(self) -> str:\n\t        \"\"\" Name of the loader\"\"\"\n\t        return f\"Program({self.path})\"\n", "    @property\n\t    def endianness(self) -> Endian:\n\t        return {lief.ENDIANNESS.LITTLE: Endian.LITTLE,\n\t                lief.ENDIANNESS.BIG: Endian.BIG}[self._binary.abstract.header.endianness]\n\t    @property\n\t    def entry_point(self) -> Addr:\n\t        \"\"\"\n\t        Program entrypoint address as defined in the binary headers\n\t        :rtype: :py:obj:`tritondse.types.Addr`\n\t        \"\"\"\n", "        return self._binary.entrypoint\n\t    @property\n\t    def architecture(self) -> Architecture:\n\t        \"\"\"\n\t        Architecture enum representing program architecture.\n\t        :rtype: Architecture\n\t        \"\"\"\n\t        return self._arch\n\t    @property\n\t    def platform(self) -> Optional[Platform]:\n", "        \"\"\"\n\t        Platform of the binary. Its solely based on the format\n\t        of the file ELF, PE etc..\n\t        :return: Platform\n\t        \"\"\"\n\t        return self._plfm\n\t    @property\n\t    def format(self) -> lief.EXE_FORMATS:\n\t        \"\"\"\n\t        Binary format. Supported formats by lief are: ELF, PE, MachO\n", "        :rtype: lief.EXE_FORMATS\n\t        \"\"\"\n\t        return self._binary.format\n\t    def _load_arch(self) -> Optional[Architecture]:\n\t        \"\"\"\n\t        Load architecture as an Architecture object.\n\t        :return: Architecture or None if unsupported\n\t        \"\"\"\n\t        arch = self._binary.abstract.header.architecture\n\t        if arch in _arch_mapper:\n", "            arch = _arch_mapper[arch]\n\t            if arch == Architecture.X86:\n\t                arch = Architecture.X86 if self._binary.abstract.header.is_32 else Architecture.X86_64\n\t            return arch\n\t        else:\n\t            return None\n\t    @property\n\t    def relocation_enum(self):\n\t        \"\"\"\n\t        LIEF relocation enum associated with the current\n", "        architecture of the binary.\n\t        :return: LIEF relocation enum\n\t        :rtype: Union[lief.ELF.RELOCATION_AARCH64,\n\t                      lief.ELF.RELOCATION_ARM,\n\t                      lief.ELF.RELOCATION_PPC64,\n\t                      lief.ELF.RELOCATION_PPC,\n\t                      lief.ELF.RELOCATION_i386,\n\t                      lief.ELF.RELOCATION_X86_64]\n\t        \"\"\"\n\t        rel_map = {\n", "            lief.ELF.ARCH.AARCH64: lief.ELF.RELOCATION_AARCH64,\n\t            lief.ELF.ARCH.ARM:     lief.ELF.RELOCATION_ARM,\n\t            lief.ELF.ARCH.PPC64:   lief.ELF.RELOCATION_PPC64,\n\t            lief.ELF.ARCH.PPC:     lief.ELF.RELOCATION_PPC,\n\t            lief.ELF.ARCH.i386:    lief.ELF.RELOCATION_i386,\n\t            lief.ELF.ARCH.x86_64:  lief.ELF.RELOCATION_X86_64\n\t        }\n\t        return rel_map[self._binary.concrete.header.machine_type]\n\t    def _is_glob_dat(self, rel: lief.ELF.Relocation) -> bool:\n\t        \"\"\" Get whether the given relocation is of type GLOB_DAT.\n", "        Used locally to find mandatory relocations\n\t        \"\"\"\n\t        rel_enum = self.relocation_enum\n\t        if hasattr(rel_enum, \"GLOB_DAT\"):\n\t            return rel_enum(rel.type) == getattr(rel_enum, \"GLOB_DAT\")\n\t        else:\n\t            return False  # Not GLOB_DAT relocation for this architecture\n\t    def memory_segments(self) -> Generator[LoadableSegment, None, None]:\n\t        \"\"\"\n\t        Iterate over all memory segments of the program as loaded in memory.\n", "        :return: Generator of tuples addrs and content\n\t        :raise NotImplementedError: if the binary format cannot be loaded\n\t        \"\"\"\n\t        if self.format == lief.EXE_FORMATS.ELF:\n\t            for i, seg in enumerate(self._binary.concrete.segments):\n\t                if seg.type == lief.ELF.SEGMENT_TYPES.LOAD:\n\t                    content = bytearray(seg.content)\n\t                    if seg.virtual_size != len(seg.content):  # pad with zeros (as it might be .bss)\n\t                        content += bytearray([0]) * (seg.virtual_size - seg.physical_size)\n\t                    yield LoadableSegment(seg.virtual_address, perms=Perm(int(seg.flags)), content=bytes(content), name=f\"seg{i}\")\n", "        else:\n\t            raise NotImplementedError(f\"memory segments not implemented for: {self.format.name}\")\n\t        # Also return a specific map to put external symbols\n\t        yield LoadableSegment(self.EXTERN_SYM_BASE, self.EXTERN_SYM_SIZE, Perm.R | Perm.W, name=\"[extern]\")\n\t        yield LoadableSegment(self.END_STACK, self.BASE_STACK-self.END_STACK, Perm.R | Perm.W, name=\"[stack]\")\n\t    def imported_functions_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        \"\"\"\n\t        Iterate over all imported functions by the program. This function\n\t        is a generator of tuples associating the function and its relocation\n\t        address in the binary.\n", "        :return: Generator of tuples function name and relocation address\n\t        \"\"\"\n\t        if self.format == lief.EXE_FORMATS.ELF:\n\t            try:\n\t                # Iterate functions imported through PLT\n\t                for rel in self._binary.concrete.pltgot_relocations:\n\t                    yield rel.symbol.name, rel.address\n\t                # Iterate functions imported via mandatory relocation (e.g: __libc_start_main)\n\t                for rel in self._binary.dynamic_relocations:\n\t                    if self._is_glob_dat(rel) and rel.has_symbol and not rel.symbol.is_variable:\n", "                        yield rel.symbol.name, rel.address\n\t            except Exception:\n\t                logger.error('Something wrong with the pltgot relocations')\n\t        else:\n\t            raise NotImplementedError(f\"Imported functions relocations not implemented for: {self.format.name}\")\n\t    def imported_variable_symbols_relocations(self) -> Generator[Tuple[str, Addr], None, None]:\n\t        \"\"\"\n\t        Iterate over all imported variable symbols. Yield for each of them the name and\n\t        the relocation address in the binary.\n\t        :return: Generator of tuples with symbol name, relocation address\n", "        \"\"\"\n\t        if self.format == lief.EXE_FORMATS.ELF:\n\t            rel_enum = self.relocation_enum\n\t            # Iterate imported symbols\n\t            for rel in self._binary.dynamic_relocations:\n\t                if rel.has_symbol:\n\t                #if rel_enum(rel.type) == rel_enum.COPY and rel.has_symbol:\n\t                    if rel.symbol.is_variable:\n\t                        yield rel.symbol.name, rel.address\n\t        else:\n", "            raise NotImplementedError(f\"Imported symbols relocations not implemented for: {self.format.name}\")\n\t    def find_function_addr(self, name: str) -> Optional[Addr]:\n\t        \"\"\"\n\t        Search for the function name in fonctions of the binary.\n\t        :param name: Function name\n\t        :type name: str\n\t        :return: Address of function if found\n\t        :rtype: Addr\n\t        \"\"\"\n\t        f = self._funs.get(name)\n", "        return f.address if f else None\n\t    @property\n\t    def arch_mode(self) -> ArchMode:\n\t        pass  # TODO: Richard\n"]}
{"filename": "tritondse/loaders/__init__.py", "chunked_list": ["from .loader import Loader, LoadableSegment\n\tfrom .cle_loader import CleLoader\n\tfrom .program import Program\n\tfrom .quokkaprogram import QuokkaProgram\n"]}
