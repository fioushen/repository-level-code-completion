{"filename": "test/__init__.py", "chunked_list": []}
{"filename": "test/conftest.py", "chunked_list": []}
{"filename": "test/integration/inference/test_sample.py", "chunked_list": ["import sys\n\timport os\n\tfrom src.inference.inference_model import InferenceModel, InferenceModelInitialiser\n\tfrom src.inference.sample_main import init_job\n\tdef test_gpt2():\n\t    configs = init_job(\n\t        [\"--config_file\", os.path.join(os.path.dirname(__file__), \"test_sample.yml\")]\n\t    )\n\t    model_init = InferenceModelInitialiser(configs)\n\t    initialised = model_init.init_model()\n", "    configs = model_init.configs\n\t    inference_model = InferenceModel(configs)\n\t    inference_model.init_inference(initialised.model, initialised.checkpoint)\n\t    out = inference_model.generate_samples(configs.job_config.num_samples)\n\t    assert len(out) == 1\n\t    for y in out:\n\t        assert isinstance(out, list)\n\t        assert isinstance(out[0], str)\n"]}
{"filename": "test/integration/training/test_trainer.py", "chunked_list": ["import sys\n\timport os\n\timport logging\n\tfrom tempfile import TemporaryDirectory\n\tfrom src.training.trainer import GPTTrainer, TrainModelInitialiser\n\tfrom src.data_io.data_loaders import DataLoader\n\tfrom src.training.train_main import init_job\n\tdef run_training_test(config_file):\n\t    configs = init_job(\n\t        [\"--config_file\", os.path.join(os.path.dirname(__file__), config_file)]\n", "    )\n\t    os.rmdir(\n\t        configs.job_config.out_dir\n\t    )  # this was created during init but we don't need it here\n\t    with TemporaryDirectory() as tmpdirname:\n\t        configs.job_config.out_dir = os.path.join(\n\t            tmpdirname, configs.job_config.out_dir\n\t        )\n\t        os.makedirs(\n\t            configs.job_config.out_dir, exist_ok=True\n", "        )  # we need to create this manually since it's a tempdir\n\t        data_loader = DataLoader(configs.data_config)\n\t        model_init = TrainModelInitialiser(configs)\n\t        initialised = model_init.init_model(data_loader)\n\t        configs = (\n\t            model_init.configs\n\t        )  # some configs might have been changed when loading a model\n\t        trainer = GPTTrainer(\n\t            configs.job_config, configs.model_config, initialised.checkpoint\n\t        )\n", "        trainer.init_trainer(initialised.model)\n\t        _ = trainer.training_loop(\n\t            data_loader=data_loader,\n\t            context=configs.context,\n\t            iter_num=initialised.iter_num,\n\t            best_val_loss=initialised.best_val_loss,\n\t        )\n\t        out_dir = os.listdir(configs.job_config.out_dir)\n\t        assert out_dir\n\t        assert out_dir[0] == \"ckpt.pt\"\n", "def test_scratch_training():\n\t    run_training_test(\"test_scratch_training.yml\")\n\tdef test_finetune_training():\n\t    run_training_test(\"test_finetune_training.yml\")\n"]}
{"filename": "test/shared/shared_testing.py", "chunked_list": ["import os\n\tfrom src.features.gpt_encoding import DataEncoder\n\tdef init_data(dataset, tmpdirname):\n\t    data_dir = os.path.join(tmpdirname, \"data\")\n\t    dataset_dir = os.path.join(data_dir, dataset)\n\t    os.mkdir(data_dir)\n\t    os.mkdir(dataset_dir)\n\t    train_data = \"This is a dataset created for training loaders\"\n\t    val_data = \"This is a dataset created for validation loaders\"\n\t    data_encoder = DataEncoder()\n", "    train_ids = data_encoder.encode(train_data)\n\t    data_encoder.save_data(train_ids, dir_path=dataset_dir, fname=\"train\")\n\t    val_ids = data_encoder.encode(val_data)\n\t    data_encoder.save_data(val_ids, dir_path=dataset_dir, fname=\"val\")\n\t    data_encoder.save_metadata(dir_path=dataset_dir)\n"]}
{"filename": "test/shared/__init__.py", "chunked_list": []}
{"filename": "test/unit/inference/test_inference_model.py", "chunked_list": ["import os\n\timport pytest\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n\timport torch\n\tfrom src.inference.inference_model import InferenceJobConfig, InferenceModel\n\tfrom src.model.gpt_model import GPTConfig, GPT\n\tfrom src.features.gpt_encoding import DataEncoder\n\t@pytest.fixture(scope=\"module\")\n\tdef init_inference_model():\n", "    InitModel = namedtuple(\"InitModel\", \"inference_model data_encoder inference_config\")\n\t    Configs = namedtuple(\"Configs\", \"job_config context\")\n\t    job_config = InferenceJobConfig(\n\t        start=\"\\n\",\n\t        max_new_tokens=12,\n\t        temperature=0.8,\n\t        top_k=5,\n\t        seed=1337,\n\t        device=\"cpu\",\n\t        device_type=\"cpu\",\n", "        compile_model=False,\n\t    )\n\t    torch.manual_seed(job_config.seed)\n\t    torch.cuda.manual_seed(job_config.seed)\n\t    torch.backends.cuda.matmul.allow_tf32 = True  # allow tf32 on matmul\n\t    torch.backends.cudnn.allow_tf32 = True  # allow tf32 on cudnn\n\t    ptdtype = {\n\t        \"float32\": torch.float32,\n\t        \"bfloat16\": torch.bfloat16,\n\t        \"float16\": torch.float16,\n", "    }[job_config.dtype]\n\t    ctx = (\n\t        nullcontext()\n\t        if job_config.device_type == \"cpu\"\n\t        else torch.amp.autocast(device_type=job_config.device_type, dtype=ptdtype)\n\t    )\n\t    inference_config = Configs(job_config, ctx)\n\t    data_encoder = DataEncoder()\n\t    model = GPT(GPTConfig())\n\t    inference_model = InferenceModel(configs=inference_config)\n", "    inference_model.init_inference(\n\t        model=model,\n\t    )\n\t    return InitModel(inference_model, data_encoder, inference_config)\n\tdef test_generate_sample(init_inference_model):\n\t    prompt = \"\\n\"\n\t    out = init_inference_model.inference_model.generate_sample(prompt)\n\t    assert isinstance(out, str)\n\tdef test_generate_samples(init_inference_model):\n\t    num_samples = 3\n", "    out = init_inference_model.inference_model.generate_samples(num_samples)\n\t    assert len(out) == 3\n\t    for y in out:\n\t        assert isinstance(y, str)\n"]}
{"filename": "test/unit/training/test_training.py", "chunked_list": ["import os\n\timport pytest\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n\timport torch\n\tfrom tempfile import TemporaryDirectory\n\tfrom src.training.trainer import JobConfig, GPTTrainer, TrainModelInitialiser\n\tfrom src.model.gpt_model import GPTConfig, GPT\n\tfrom src.data_io.data_loaders import DataLoader, DataConfig\n\tfrom src.features.gpt_encoding import DataEncoder\n", "from test.shared.shared_testing import init_data\n\tdef init_training_model(dataset, tmpdirname, num_iters):\n\t    InitModel = namedtuple(\"InitModel\", \"initialised data_loader configs\")\n\t    Configs = namedtuple(\"Configs\", \"job_config data_config model_config context\")\n\t    job_config = JobConfig(\n\t        init_from=\"scratch\",\n\t        eval_interval=100,  # we set those high to avoid checkpointing\n\t        eval_iters=100,  # we set those high to avoid checkpointing\n\t        log_interval=1,\n\t        always_save_checkpoint=False,\n", "        dataset=dataset,\n\t        batch_size=2,\n\t        block_size=8,\n\t        n_layer=4,\n\t        n_head=4,\n\t        n_embd=128,\n\t        dropout=0.0,\n\t        learning_rate=1.0e-3,\n\t        max_iters=num_iters,\n\t        lr_decay_iters=num_iters,\n", "        min_lr=1.0e-4,\n\t        beta2=0.99,\n\t        device=\"cpu\",\n\t        device_type=\"cpu\",\n\t        dtype=\"float32\",\n\t        compile_model=False,\n\t    )\n\t    data_config = DataConfig(\n\t        dataset=dataset,\n\t        block_size=job_config.block_size,\n", "        batch_size=job_config.batch_size,\n\t        device=job_config.device,\n\t        device_type=job_config.device_type,\n\t    )\n\t    data_loader = DataLoader(data_config, path=tmpdirname)\n\t    model_config = GPTConfig(\n\t        n_layer=job_config.n_layer,\n\t        n_head=job_config.n_head,\n\t        n_embd=job_config.n_embd,\n\t        block_size=job_config.block_size,\n", "        bias=job_config.bias,\n\t        vocab_size=None,\n\t        dropout=job_config.dropout,\n\t    )\n\t    master_process = True\n\t    seed_offset = 0\n\t    job_config.gradient_accumulation_steps *= 8  # simulate 8 gpus\n\t    torch.manual_seed(1337 + seed_offset)\n\t    torch.backends.cuda.matmul.allow_tf32 = True  # allow tf32 on matmul\n\t    torch.backends.cudnn.allow_tf32 = True  # allow tf32 on cudnn\n", "    # note: float16 data type will automatically use a GradScaler\n\t    ptdtype = {\n\t        \"float32\": torch.float32,\n\t        \"bfloat16\": torch.bfloat16,\n\t        \"float16\": torch.float16,\n\t    }[job_config.dtype]\n\t    ctx = (\n\t        nullcontext()\n\t        if job_config.device_type == \"cpu\"\n\t        else torch.amp.autocast(device_type=job_config.device_type, dtype=ptdtype)\n", "    )\n\t    configs = Configs(job_config, data_config, model_config, ctx)\n\t    model_init = TrainModelInitialiser(configs)\n\t    initialised = model_init.init_model(data_loader)\n\t    configs = (\n\t        model_init.configs\n\t    )  # some configs might have been changed when loading a model\n\t    return InitModel(initialised, data_loader, configs)\n\tdef test_training_loop():\n\t    with TemporaryDirectory() as tmpdirname:\n", "        dataset = \"test_dataset\"\n\t        num_iters = 1\n\t        init_data(dataset, tmpdirname)\n\t        init_model = init_training_model(dataset, tmpdirname, num_iters)\n\t        trainer = GPTTrainer(\n\t            init_model.configs.job_config,\n\t            init_model.configs.model_config,\n\t            init_model.initialised.checkpoint,\n\t        )\n\t        trainer.init_trainer(init_model.initialised.model)\n", "        intial_loses = trainer.estimate_loss(\n\t            init_model.data_loader, init_model.configs.context\n\t        )\n\t        train_logs = trainer.training_loop(\n\t            data_loader=init_model.data_loader,\n\t            context=init_model.configs.context,\n\t            iter_num=init_model.initialised.iter_num,\n\t            best_val_loss=init_model.initialised.best_val_loss,\n\t        )\n\t        final_losses = train_logs.losses\n", "        assert train_logs.iter_num == num_iters + 1\n\t        assert isinstance(final_losses, dict)\n"]}
{"filename": "test/unit/features/test_gpt_encoding.py", "chunked_list": ["import os\n\tfrom src.features.gpt_encoding import DataEncoder\n\tdef test_encode_train():\n\t    data_encoder = DataEncoder()\n\t    text_data = \"This is a dataset created for testing encoder\"\n\t    seq_len = 10\n\t    data_ids = data_encoder.encode(text_data)\n\t    assert isinstance(data_ids, dict)\n\t    assert data_ids[\"len\"] == seq_len\n\t    assert len(data_ids[\"ids\"]) == seq_len\n", "    assert data_ids[\"ids\"][-1] == 50256  # eot token\n\tdef test_encode_inference():\n\t    data_encoder = DataEncoder()\n\t    text_data = \"This is a dataset created for testing encoder\"\n\t    seq_len = 9\n\t    data_ids = data_encoder.encode(text_data, train=False)\n\t    assert isinstance(data_ids, list)\n\t    assert len(data_ids) == seq_len\n\tdef test_decode():\n\t    data_encoder = DataEncoder()\n", "    text_data = \"This is a dataset created for testing encoder\"\n\t    data_ids = data_encoder.encode(text_data, train=False)\n\t    decoded_text = data_encoder.decode(data_ids)\n\t    assert decoded_text == text_data\n"]}
{"filename": "test/unit/data_io/test_data_loaders.py", "chunked_list": ["import os\n\tfrom tempfile import TemporaryDirectory\n\timport pytest\n\tfrom src.data_io.data_loaders import DataLoader, DataConfig\n\tfrom src.features.gpt_encoding import DataEncoder\n\tfrom test.shared.shared_testing import init_data\n\tdef test_load_metadata():\n\t    with TemporaryDirectory() as tmpdirname:\n\t        dataset = \"test_dataset\"\n\t        batch_size = 2\n", "        block_size = 8\n\t        init_data(dataset, tmpdirname)\n\t        data_config = DataConfig(\n\t            dataset=dataset,\n\t            block_size=block_size,\n\t            batch_size=batch_size,\n\t            device=\"cpu\",\n\t            device_type=\"cpu\",\n\t        )\n\t        data_loader = DataLoader(data_config, path=tmpdirname)\n", "        assert data_loader.meta_vocab_size == 50257\n\tdef test_get_batch():\n\t    with TemporaryDirectory() as tmpdirname:\n\t        dataset = \"test_dataset\"\n\t        batch_size = 2\n\t        block_size = 8\n\t        init_data(dataset, tmpdirname)\n\t        data_config = DataConfig(\n\t            dataset=dataset,\n\t            block_size=block_size,\n", "            batch_size=batch_size,\n\t            device=\"cpu\",\n\t            device_type=\"cpu\",\n\t        )\n\t        data_loader = DataLoader(data_config, path=tmpdirname)\n\t        X, Y = data_loader.get_batch(\"train\")\n\t        assert X.shape == (batch_size, block_size)\n\t        assert Y.shape == (batch_size, block_size)\n"]}
{"filename": "src/inference/sample_main.py", "chunked_list": ["\"\"\"\n\tSample from a trained model\n\t\"\"\"\n\timport os\n\timport sys\n\timport argparse\n\timport logging\n\timport pickle\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n", "import torch\n\timport tiktoken\n\tfrom src.config.configurator import override_config\n\tfrom src.inference.inference_model import InferenceModel, InferenceModelInitialiser\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger = logging.getLogger(__name__)\n\tdef parse_args(args):\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--config_file\", type=str, help=\"\", default=None)\n\t    return parser.parse_args(args)\n", "def init_job(args):\n\t    Configs = namedtuple(\"Configs\", \"job_config context\")\n\t    job_args = parse_args(args)\n\t    job_config = override_config(job_args.config_file, inference=True)\n\t    torch.manual_seed(job_config.seed)\n\t    torch.cuda.manual_seed(job_config.seed)\n\t    torch.backends.cuda.matmul.allow_tf32 = True  # allow tf32 on matmul\n\t    torch.backends.cudnn.allow_tf32 = True  # allow tf32 on cudnn\n\t    ptdtype = {\n\t        \"float32\": torch.float32,\n", "        \"bfloat16\": torch.bfloat16,\n\t        \"float16\": torch.float16,\n\t    }[job_config.dtype]\n\t    ctx = (\n\t        nullcontext()\n\t        if job_config.device_type == \"cpu\"\n\t        else torch.amp.autocast(device_type=job_config.device_type, dtype=ptdtype)\n\t    )\n\t    return Configs(job_config, ctx)\n\tdef main():\n", "    configs = init_job(sys.argv[1:])\n\t    logging.debug(configs.job_config)\n\t    model_init = InferenceModelInitialiser(configs)\n\t    initialised = model_init.init_model()\n\t    configs = (\n\t        model_init.configs\n\t    )  # some configs might have been changed when loading a model\n\t    inference_model = InferenceModel(configs)\n\t    inference_model.init_inference(initialised.model, initialised.checkpoint)\n\t    out = inference_model.generate_samples(configs.job_config.num_samples)\n", "    for y in out:\n\t        logger.info(f\"{y}\\n---------------\")\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "src/inference/inference_model.py", "chunked_list": ["import os\n\timport argparse\n\timport logging\n\timport pickle\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n\tfrom dataclasses import dataclass\n\timport torch\n\timport tiktoken\n\tfrom src.model.model_init import ModelInitialiser\n", "from src.model.gpt_model import GPTConfig, GPT\n\tfrom src.features.gpt_encoding import DataEncoder\n\tlogger = logging.getLogger(__name__)\n\t@dataclass\n\tclass InferenceJobConfig:\n\t    \"\"\"default config values designed to sample from a gpt2\"\"\"\n\t    out_dir: str = \"out\"\n\t    start: str = \"\\n\"\n\t    init_from: str = \"resume\"  # 'resume' or 'gpt2*'\n\t    num_samples: int = 10\n", "    max_new_tokens: int = 500  # number of tokens generated in each sample\n\t    temperature: float = (\n\t        0.8  # 1.0 = no change, < 1.0 = less random, > 1.0 = more random, in predictions\n\t    )\n\t    top_k: int = 200  # retain only the top_k most likely tokens, clamp others to have 0 probability\n\t    seed: int = 1337\n\t    device: str = \"cuda\"  # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks\n\t    device_type: str = (\n\t        \"cuda\" if \"cuda\" in device else \"cpu\"\n\t    )  # for later use in torch.autocast\n", "    dtype: str = \"float16\"  # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler\n\t    compile_model: bool = True  # use PyTorch 2.0 to compile the model to be faster\n\tclass InferenceModel:\n\t    \"\"\"This class can be used to call a GPT model for inference\"\"\"\n\t    def __init__(self, configs):\n\t        self.job_config = configs.job_config\n\t        self.context = configs.context\n\t        self.encode_fn = None\n\t        self.decode_fn = None\n\t        self.model = None\n", "    def init_inference(self, model, checkpoint=None):\n\t        # ok let's assume gpt-2 encodings by default\n\t        logger.info(\"No meta.pkl found, assuming GPT-2 encodings...\")\n\t        data_encoder = DataEncoder()\n\t        self.encode_fn = lambda s: data_encoder.encode(s, train=False)\n\t        self.decode_fn = lambda l: data_encoder.decode(l)\n\t        self.model = model\n\t        self.model.eval()\n\t        self.model.to(self.job_config.device)\n\t        if self.job_config.compile_model:\n", "            self.model = torch.compile(self.model)  # requires PyTorch 2.0 (optional)\n\t    def generate_sample(self, s):\n\t        s_ids = self.encode_fn(s)\n\t        x = torch.tensor(s_ids, dtype=torch.long, device=self.job_config.device)[\n\t            None, ...\n\t        ]\n\t        with torch.no_grad():\n\t            with self.context:\n\t                y = self.model.generate(\n\t                    x,\n", "                    self.job_config.max_new_tokens,\n\t                    temperature=self.job_config.temperature,\n\t                    top_k=self.job_config.top_k,\n\t                )\n\t        return self.decode_fn(y[0].tolist())\n\t    def generate_samples(self, num_samples):\n\t        start = self.job_config.start\n\t        # encode the beginning of the prompt\n\t        if start.startswith(\"FILE:\"):\n\t            with open(start[5:], \"r\", encoding=\"utf-8\") as f:\n", "                start = f.read()\n\t        # run generation\n\t        out = []\n\t        for k in range(num_samples):\n\t            y = self.generate_sample(start)\n\t            out.append(y)\n\t        return out\n\tclass InferenceModelInitialiser(ModelInitialiser):\n\t    def __init__(self, configs, **kwargs):\n\t        super(InferenceModelInitialiser, self).__init__(configs, **kwargs)\n", "    def init_model(self):\n\t        InitialisedModel = namedtuple(\"InitialisedModel\", \"model checkpoint\")\n\t        # model\n\t        checkpoint = None\n\t        if self.configs.job_config.init_from == \"resume\":\n\t            # init from a model saved in a specific directory\n\t            model, checkpoint = self.init_resume(training_args=False)\n\t        elif self.configs.job_config.init_from.startswith(\"gpt2\"):\n\t            # init from a given GPT-2 model\n\t            model = GPT.from_pretrained(\n", "                self.configs.job_config.init_from, dict(dropout=0.0)\n\t            )\n\t        return InitialisedModel(model, checkpoint)\n"]}
{"filename": "src/inference/test_query.py", "chunked_list": ["import requests\n\timport json\n\tpayload = {\n\t    \"prompt_txt\": \"\"\"\n\t    Elaborate on the sentence.\\n\n\t    Here's the sentence: The latest advances in AI (GPT, LLM, transformers, etc.) are like a Nokia phone in the 90's.\\n\n\t    \"\"\"\n\t}\n\tr = requests.get(\"http://127.0.0.1:8000/\")\n\tprint(r.text)\n", "r = requests.post(\"http://127.0.0.1:8000/lightchatgpt/\", json=payload)\n\tresponse = json.loads(r.text)\n\tprint(response[\"prompt\"])\n\tprint(response[\"out\"])\n"]}
{"filename": "src/inference/service_main.py", "chunked_list": ["\"\"\"Creates a FastAPI service that serves GPT\"\"\"\n\timport logging\n\tfrom typing import Union\n\tfrom pydantic import BaseModel\n\tfrom fastapi import FastAPI\n\tfrom src.inference.gpt_server import GPTServer\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger = logging.getLogger(__name__)\n\tapp = FastAPI()\n\tmodels = {}\n", "class Prompt(BaseModel):\n\t    prompt_txt: Union[str, None] = None\n\t@app.on_event(\"startup\")\n\tasync def startup_event():\n\t    models[\"gpt2_model\"] = GPTServer(config_file=\"config/sample_gpt2.yml\")\n\t@app.get(\"/\")\n\tdef read_root():\n\t    return {\"Hello\": \"From Light GPT\"}\n\t@app.post(\"/lightchatgpt/\")\n\tasync def read_item(prompt: Prompt):\n", "    out = models[\"gpt2_model\"].generate_sample(prompt.prompt_txt)\n\t    return {\"prompt\": prompt.prompt_txt, \"out\": out}\n"]}
{"filename": "src/inference/__init__.py", "chunked_list": []}
{"filename": "src/inference/gpt_server.py", "chunked_list": ["import os\n\timport logging\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n\timport torch\n\tfrom src.config.configurator import override_config\n\tfrom src.inference.inference_model import InferenceModel, InferenceModelInitialiser\n\tlogger = logging.getLogger(__name__)\n\tclass GPTServer:\n\t    \"\"\"This class is used to serve an InferenceModel\"\"\"\n", "    def __init__(self, config_file):\n\t        configs = self.init_server(config_file)\n\t        logger.debug(configs.job_config)\n\t        model_init = InferenceModelInitialiser(configs)\n\t        initialised = model_init.init_model()\n\t        logger.info(\"GPT-2 model loaded\")\n\t        configs = model_init.configs  # some configs might have been changed when loading a model\n\t        self.inference_model = InferenceModel(configs)\n\t        self.inference_model.init_inference(initialised.model, initialised.checkpoint)\n\t        logger.info(\"GPT-2 inference ready\")\n", "    def init_server(self, config_file):\n\t        Configs = namedtuple('Configs', 'job_config context')\n\t        job_config = override_config(config_file, inference=True)\n\t        torch.manual_seed(job_config.seed)\n\t        torch.cuda.manual_seed(job_config.seed)\n\t        torch.backends.cuda.matmul.allow_tf32 = True # allow tf32 on matmul\n\t        torch.backends.cudnn.allow_tf32 = True # allow tf32 on cudnn\n\t        ptdtype = {'float32': torch.float32, 'bfloat16': torch.bfloat16, 'float16': torch.float16}[job_config.dtype]\n\t        ctx = nullcontext() if job_config.device_type == 'cpu' else torch.amp.autocast(device_type=job_config.device_type, dtype=ptdtype)\n\t        return Configs(job_config, ctx)\n", "    def generate_sample(self, prompt_txt):\n\t        out = self.inference_model.generate_sample(prompt_txt)\n\t        return out\n"]}
{"filename": "src/config/configurator.py", "chunked_list": ["\"\"\"\n\tPoor Man's Configurator\n\t\"\"\"\n\timport logging\n\timport yaml\n\tfrom dataclasses import dataclass\n\tfrom src.training.trainer import JobConfig\n\tfrom src.inference.inference_model import InferenceJobConfig\n\tlogger = logging.getLogger(__name__)\n\tdef override_config(config_file=None, inference=False):\n", "    loaded_configs = {}\n\t    if config_file:\n\t        logger.info(f\"Overriding config with {config_file}:\")\n\t        with open(config_file, \"r\") as stream:\n\t            loaded_configs = yaml.safe_load(stream)\n\t    if inference:\n\t        job_config = InferenceJobConfig(**loaded_configs)\n\t    else:\n\t        job_config = JobConfig(**loaded_configs)\n\t    return job_config\n"]}
{"filename": "src/config/__init__.py", "chunked_list": []}
{"filename": "src/logging/__init__.py", "chunked_list": []}
{"filename": "src/training/train_main.py", "chunked_list": ["\"\"\"\n\tThis training script can be run both on a single gpu in debug mode,\n\tand also in a larger training run with distributed data parallel (ddp).\n\tTo run on a single GPU, example:\n\t$ python train.py --batch_size=32 --compile=False\n\tTo run with DDP on 4 gpus on 1 node, example:\n\t$ torchrun --standalone --nproc_per_node=4 train.py\n\tTo run with DDP on 4 gpus across 2 nodes, example:\n\t- Run on the first (master) node with example IP 123.456.123.456:\n\t$ torchrun --nproc_per_node=8 --nnodes=2 --node_rank=0 --master_addr=123.456.123.456 --master_port=1234 train.py\n", "- Run on the worker node:\n\t$ torchrun --nproc_per_node=8 --nnodes=2 --node_rank=1 --master_addr=123.456.123.456 --master_port=1234 train.py\n\t(If your cluster does not have Infiniband interconnect prepend NCCL_IB_DISABLE=1)\n\t\"\"\"\n\timport sys\n\timport os\n\timport argparse\n\timport time\n\timport logging\n\timport math\n", "import pickle\n\tfrom collections import namedtuple\n\tfrom contextlib import nullcontext\n\tfrom dataclasses import asdict\n\timport numpy as np\n\timport torch\n\tfrom torch.nn.parallel import DistributedDataParallel as DDP\n\tfrom torch.distributed import init_process_group, destroy_process_group\n\tfrom src.model.gpt_model import GPTConfig, GPT\n\tfrom src.training.trainer import GPTTrainer, TrainModelInitialiser\n", "from src.data_io.data_loaders import DataLoader, DataConfig\n\tfrom src.config.configurator import override_config\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger = logging.getLogger(__name__)\n\tdef init_job(args):\n\t    Configs = namedtuple(\"Configs\", \"job_config data_config model_config context\")\n\t    job_args = parse_args(args)\n\t    job_config = override_config(job_args.config_file)\n\t    data_config = DataConfig(\n\t        dataset=job_config.dataset,\n", "        block_size=job_config.block_size,\n\t        batch_size=job_config.batch_size,\n\t        device=job_config.device,\n\t        device_type=job_config.device_type,\n\t    )\n\t    model_config = GPTConfig(\n\t        n_layer=job_config.n_layer,\n\t        n_head=job_config.n_head,\n\t        n_embd=job_config.n_embd,\n\t        block_size=job_config.block_size,\n", "        bias=job_config.bias,\n\t        vocab_size=None,\n\t        dropout=job_config.dropout,\n\t    )\n\t    # various inits, derived attributes, I/O setup\n\t    job_config.ddp = int(os.environ.get(\"RANK\", -1)) != -1  # is this a ddp run?\n\t    if job_config.ddp:\n\t        init_process_group(backend=job_config.backend)\n\t        ddp_rank = int(os.environ[\"RANK\"])\n\t        ddp_local_rank = int(os.environ[\"LOCAL_RANK\"])\n", "        job_config.device = f\"cuda:{ddp_local_rank}\"\n\t        torch.cuda.set_device(job_config.device)\n\t        master_process = (\n\t            ddp_rank == 0\n\t        )  # this process will do logging, checkpointing etc.\n\t        seed_offset = ddp_rank  # each process gets a different seed\n\t    else:\n\t        # if not ddp, we are running on a single gpu, and one process\n\t        master_process = True\n\t        seed_offset = 0\n", "        job_config.gradient_accumulation_steps *= 8  # simulate 8 gpus\n\t    if master_process:\n\t        os.makedirs(job_config.out_dir, exist_ok=True)\n\t    torch.manual_seed(1337 + seed_offset)\n\t    torch.backends.cuda.matmul.allow_tf32 = True  # allow tf32 on matmul\n\t    torch.backends.cudnn.allow_tf32 = True  # allow tf32 on cudnn\n\t    # note: float16 data type will automatically use a GradScaler\n\t    ptdtype = {\n\t        \"float32\": torch.float32,\n\t        \"bfloat16\": torch.bfloat16,\n", "        \"float16\": torch.float16,\n\t    }[job_config.dtype]\n\t    ctx = (\n\t        nullcontext()\n\t        if job_config.device_type == \"cpu\"\n\t        else torch.amp.autocast(device_type=job_config.device_type, dtype=ptdtype)\n\t    )\n\t    return Configs(job_config, data_config, model_config, ctx)\n\tdef parse_args(args):\n\t    parser = argparse.ArgumentParser()\n", "    parser.add_argument(\"--config_file\", type=str, help=\"\", default=None)\n\t    return parser.parse_args(args)\n\tdef main():\n\t    configs = init_job(sys.argv[1:])\n\t    config = asdict(configs.job_config)\n\t    logging.debug(configs.job_config)\n\t    data_loader = DataLoader(configs.data_config)\n\t    model_init = TrainModelInitialiser(configs)\n\t    initialised = model_init.init_model(data_loader)\n\t    configs = (\n", "        model_init.configs\n\t    )  # some configs might have been changed when loading a model\n\t    trainer = GPTTrainer(\n\t        configs.job_config, configs.model_config, initialised.checkpoint\n\t    )\n\t    trainer.init_trainer(initialised.model)\n\t    _ = trainer.training_loop(\n\t        data_loader=data_loader,\n\t        context=configs.context,\n\t        iter_num=initialised.iter_num,\n", "        best_val_loss=initialised.best_val_loss,\n\t    )\n\t    if configs.job_config.ddp:\n\t        destroy_process_group()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "src/training/__init__.py", "chunked_list": []}
{"filename": "src/training/trainer.py", "chunked_list": ["import os\n\timport time\n\timport logging\n\timport math\n\tfrom collections import namedtuple\n\tfrom dataclasses import dataclass, asdict\n\timport numpy as np\n\timport torch\n\tfrom torch.nn.parallel import DistributedDataParallel as DDP\n\tfrom src.model.gpt_model import GPTConfig, GPT\n", "from src.model.model_init import ModelInitialiser\n\tlogger = logging.getLogger(__name__)\n\t@dataclass\n\tclass JobConfig:\n\t    # default config values designed to train a gpt2 (124M) on OpenWebText\n\t    # I/O\n\t    out_dir: str = \"out\"\n\t    eval_interval: int = 2000\n\t    log_interval: int = 1\n\t    eval_iters: int = 200\n", "    eval_only: bool = False  # if True, script exits right after the first eval\n\t    always_save_checkpoint: bool = (\n\t        True  # if True, always save a checkpoint after each eval\n\t    )\n\t    init_from: str = \"scratch\"  # 'scratch' or 'resume' or 'gpt2*'\n\t    # wandb logging\n\t    wandb_log: bool = False  # disabled by default\n\t    wandb_project: str = \"owt\"\n\t    wandb_run_name: str = \"gpt2\"  # 'run' + str(time.time())\n\t    # data\n", "    dataset: str = \"openwebtext\"\n\t    gradient_accumulation_steps: int = 5  # used to simulate larger batch sizes\n\t    batch_size: int = (\n\t        12  # if gradient_accumulation_steps > 1, this is the micro-batch size\n\t    )\n\t    block_size: int = 1024\n\t    # model\n\t    n_layer: int = 12\n\t    n_head: int = 12\n\t    n_embd: int = 768\n", "    dropout: float = 0.0  # for pretraining 0 is good, for finetuning try 0.1+\n\t    bias: bool = False  # do we use bias inside LayerNorm and Linear layers?\n\t    # adamw optimizer\n\t    learning_rate: float = 6e-4  # max learning rate\n\t    max_iters: int = 600000  # total number of training iterations\n\t    weight_decay: float = 1e-1\n\t    beta1: float = 0.9\n\t    beta2: float = 0.95\n\t    grad_clip: float = 1.0  # clip gradients at this value, or disable if == 0.0\n\t    # learning rate decay settings\n", "    decay_lr: bool = True  # whether to decay the learning rate\n\t    warmup_iters: int = 2000  # how many steps to warm up for\n\t    lr_decay_iters: int = 600000  # should be ~= max_iters per Chinchilla\n\t    min_lr: float = (\n\t        6e-5  # minimum learning rate, should be ~= learning_rate/10 per Chinchilla\n\t    )\n\t    # DDP settings\n\t    backend: str = \"nccl\"  # 'nccl', 'gloo', etc.\n\t    ddp: bool = False\n\t    ddp_local_rank: int = -1\n", "    # system\n\t    master_process: bool = True\n\t    device: str = \"cuda\"  # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks\n\t    device_type: str = (\n\t        \"cuda\" if \"cuda\" in device else \"cpu\"\n\t    )  # for later use in torch.autocast\n\t    dtype: str = \"float16\"  # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler\n\t    compile_model: bool = True  # use PyTorch 2.0 to compile the model to be faster\n\tclass GPTTrainer:\n\t    def __init__(self, job_config, model_config, checkpoint=None):\n", "        self.job_config = job_config\n\t        self.model_config = model_config\n\t        self.checkpoint = checkpoint\n\t        self.scaler = None\n\t        self.optimizer = None\n\t        self.unoptimized_model = None\n\t        self.model = None\n\t    def init_trainer(self, model):\n\t        self.model = model\n\t        # initialize a GradScaler. If enabled=False scaler is a no-op\n", "        self.scaler = torch.cuda.amp.GradScaler(\n\t            enabled=(self.job_config.dtype == \"float16\")\n\t        )\n\t        # optimizer\n\t        self.optimizer = self.model.configure_optimizers(\n\t            self.job_config.weight_decay,\n\t            self.job_config.learning_rate,\n\t            (self.job_config.beta1, self.job_config.beta2),\n\t            self.job_config.device_type,\n\t        )\n", "        if self.job_config.init_from == \"resume\":\n\t            self.optimizer.load_state_dict(self.checkpoint[\"optimizer\"])\n\t        # compile the model\n\t        if self.job_config.compile_model:\n\t            logger.info(\"compiling the model... (takes a ~minute)\")\n\t            self.unoptimized_model = self.model\n\t            self.model = torch.compile(self.model)  # requires PyTorch 2.0\n\t        # wrap model into DDP container\n\t        if self.job_config.ddp:\n\t            self.model = DDP(self.model, device_ids=[self.job_config.ddp_local_rank])\n", "        # logging\n\t        if self.job_config.wandb_log and self.job_config.master_process:\n\t            import wandb\n\t            wandb.init(\n\t                project=self.job_config.wandb_project,\n\t                name=self.job_config.wandb_run_name,\n\t                config=asdict(self.job_config),\n\t            )\n\t    @torch.no_grad()\n\t    def estimate_loss(self, data_loader, context):\n", "        \"\"\"helps estimate an arbitrarily accurate loss over either split using many batches\"\"\"\n\t        out = {}\n\t        self.model.eval()\n\t        for split in [\"train\", \"val\"]:\n\t            losses = torch.zeros(self.job_config.eval_iters)\n\t            for k in range(self.job_config.eval_iters):\n\t                X, Y = data_loader.get_batch(split)\n\t                with context:\n\t                    logits, loss = self.model(X, Y)\n\t                losses[k] = loss.item()\n", "            out[split] = losses.mean()\n\t        self.model.train()\n\t        return out\n\t    def get_lr(self, it):\n\t        \"\"\"learning rate decay scheduler (cosine with warmup)\"\"\"\n\t        # 1) linear warmup for warmup_iters steps\n\t        if it < self.job_config.warmup_iters:\n\t            return self.job_config.learning_rate * it / self.job_config.warmup_iters\n\t        # 2) if it > lr_decay_iters, return min learning rate\n\t        if it > self.job_config.lr_decay_iters:\n", "            return min_lr\n\t        # 3) in between, use cosine decay down to min learning rate\n\t        decay_ratio = (it - self.job_config.warmup_iters) / (\n\t            self.job_config.lr_decay_iters - self.job_config.warmup_iters\n\t        )\n\t        assert 0 <= decay_ratio <= 1\n\t        coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio))  # coeff ranges 0..1\n\t        return self.job_config.min_lr + coeff * (\n\t            self.job_config.learning_rate - self.job_config.min_lr\n\t        )\n", "    def training_loop(self, data_loader, context, iter_num, best_val_loss):\n\t        TrainingLogs = namedtuple(\"TrainingLogs\", \"iter_num losses running_mfu\")\n\t        # training loop\n\t        X, Y = data_loader.get_batch(\"train\")  # fetch the very first batch\n\t        t0 = time.time()\n\t        local_iter_num = 0  # number of iterations in the lifetime of this process\n\t        raw_model = (\n\t            self.model.module if self.job_config.ddp else self.model\n\t        )  # unwrap DDP container if needed\n\t        running_mfu = -1.0\n", "        while True:\n\t            # determine and set the learning rate for this iteration\n\t            lr = (\n\t                self.get_lr(iter_num)\n\t                if self.job_config.decay_lr\n\t                else self.job_config.learning_rate\n\t            )\n\t            for param_group in self.optimizer.param_groups:\n\t                param_group[\"lr\"] = lr\n\t            # evaluate the loss on train/val sets and write checkpoints\n", "            if (\n\t                iter_num % self.job_config.eval_interval == 0\n\t                and self.job_config.master_process\n\t            ):\n\t                losses = self.estimate_loss(data_loader, context)\n\t                logger.info(\n\t                    f\"step {iter_num}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\"\n\t                )\n\t                if self.job_config.wandb_log:\n\t                    self.job_config.wandb.log(\n", "                        {\n\t                            \"iter\": iter_num,\n\t                            \"train/loss\": losses[\"train\"],\n\t                            \"val/loss\": losses[\"val\"],\n\t                            \"lr\": lr,\n\t                            \"mfu\": running_mfu * 100,  # convert to percentage\n\t                        }\n\t                    )\n\t                if (\n\t                    losses[\"val\"] < best_val_loss\n", "                    or self.job_config.always_save_checkpoint\n\t                ):\n\t                    best_val_loss = losses[\"val\"]\n\t                    if iter_num > 0:\n\t                        checkpoint = {\n\t                            \"model\": raw_model.state_dict(),\n\t                            \"optimizer\": self.optimizer.state_dict(),\n\t                            \"model_args\": asdict(self.model_config),\n\t                            \"iter_num\": iter_num,\n\t                            \"best_val_loss\": best_val_loss,\n", "                            \"config\": asdict(self.job_config),\n\t                        }\n\t                        logger.info(f\"saving checkpoint to {self.job_config.out_dir}\")\n\t                        torch.save(\n\t                            checkpoint, os.path.join(self.job_config.out_dir, \"ckpt.pt\")\n\t                        )\n\t            if iter_num == 0 and self.job_config.eval_only:\n\t                break\n\t            # forward backward update, with optional gradient accumulation to simulate larger batch size\n\t            # and using the GradScaler if data type is float16\n", "            for micro_step in range(self.job_config.gradient_accumulation_steps):\n\t                if self.job_config.ddp:\n\t                    # in DDP training we only need to sync gradients at the last micro step.\n\t                    # the official way to do this is with model.no_sync() context manager, but\n\t                    # I really dislike that this bloats the code and forces us to repeat code\n\t                    # looking at the source of that context manager, it just toggles this variable\n\t                    self.model.require_backward_grad_sync = (\n\t                        micro_step == self.job_config.gradient_accumulation_steps - 1\n\t                    )\n\t                with context:\n", "                    logits, loss = self.model(X, Y)\n\t                # immediately async prefetch next batch while model is doing the forward pass on the GPU\n\t                X, Y = data_loader.get_batch(\"train\")\n\t                # backward pass, with gradient scaling if training in fp16\n\t                self.scaler.scale(loss).backward()\n\t            # clip the gradient\n\t            if self.job_config.grad_clip != 0.0:\n\t                self.scaler.unscale_(self.optimizer)\n\t                torch.nn.utils.clip_grad_norm_(\n\t                    self.model.parameters(), self.job_config.grad_clip\n", "                )\n\t            # step the optimizer and scaler if training in fp16\n\t            self.scaler.step(self.optimizer)\n\t            self.scaler.update()\n\t            # flush the gradients as soon as we can, no need for this memory anymore\n\t            self.optimizer.zero_grad(set_to_none=True)\n\t            # timing and logging\n\t            t1 = time.time()\n\t            dt = t1 - t0\n\t            t0 = t1\n", "            if (\n\t                iter_num % self.job_config.log_interval == 0\n\t                and self.job_config.master_process\n\t            ):\n\t                lossf = loss.item()  # loss as float. note: this is a CPU-GPU sync point\n\t                if local_iter_num >= 5:  # let the training loop settle a bit\n\t                    mfu = raw_model.estimate_mfu(\n\t                        self.job_config.batch_size\n\t                        * self.job_config.gradient_accumulation_steps,\n\t                        dt,\n", "                    )\n\t                    running_mfu = (\n\t                        mfu if running_mfu == -1.0 else 0.9 * running_mfu + 0.1 * mfu\n\t                    )\n\t                logger.info(\n\t                    f\"iter {iter_num}: loss {lossf:.4f}, time {dt*1000:.2f}ms, mfu {running_mfu*100:.2f}%\"\n\t                )\n\t            iter_num += 1\n\t            local_iter_num += 1\n\t            # termination conditions\n", "            if iter_num > self.job_config.max_iters:\n\t                break\n\t        return TrainingLogs(iter_num, losses, running_mfu)\n\tclass TrainModelInitialiser(ModelInitialiser):\n\t    def __init__(self, configs, **kwargs):\n\t        super(TrainModelInitialiser, self).__init__(configs, **kwargs)\n\t    def init_model(self, data_loader):\n\t        InitialisedModel = namedtuple(\n\t            \"InitialisedModel\", \"model best_val_loss iter_num checkpoint\"\n\t        )\n", "        iter_num = 0\n\t        best_val_loss = 1e9\n\t        checkpoint = None\n\t        if self.configs.job_config.init_from == \"scratch\":\n\t            # init a new model from scratch\n\t            logger.info(\"Initializing a new model from scratch\")\n\t            # determine the vocab size we'll use for from-scratch training\n\t            if data_loader.meta_vocab_size is None:\n\t                logger.info(\n\t                    \"defaulting to vocab_size of GPT-2 to 50304 (50257 rounded up for efficiency)\"\n", "                )\n\t            gptconf = self.configs.model_config\n\t            gptconf.vocab_size = (\n\t                data_loader.meta_vocab_size\n\t                if data_loader.meta_vocab_size is not None\n\t                else 50304\n\t            )\n\t            model = GPT(gptconf)\n\t        elif self.configs.job_config.init_from == \"resume\":\n\t            logger.info(f\"Resuming training from {self.configs.job_config.out_dir}\")\n", "            # resume training from a checkpoint.\n\t            model, checkpoint = self.init_resume(training_args=True)\n\t            iter_num = checkpoint[\"iter_num\"]\n\t            best_val_loss = checkpoint[\"best_val_loss\"]\n\t        elif self.configs.job_config.init_from.startswith(\"gpt2\"):\n\t            logger.info(\n\t                f\"Initializing from OpenAI GPT-2 weights: {self.configs.job_config.init_from}\"\n\t            )\n\t            # initialize from OpenAI GPT-2 weights\n\t            override_args = dict(dropout=self.configs.model_config.dropout)\n", "            model = GPT.from_pretrained(\n\t                self.configs.job_config.init_from, override_args\n\t            )\n\t            # read off the created config params, so we can store them into checkpoint correctly\n\t            for k in [\n\t                \"n_layer\",\n\t                \"n_head\",\n\t                \"n_embd\",\n\t                \"block_size\",\n\t                \"bias\",\n", "                \"vocab_size\",\n\t            ]:\n\t                setattr(self.configs.model_config, k, getattr(model.config, k))\n\t        # crop down the model block size if desired, using model surgery\n\t        if self.configs.job_config.block_size < model.config.block_size:\n\t            model.crop_block_size(self.configs.job_config.block_size)\n\t            self.configs.model_config.block_size = (\n\t                self.configs.job_config.block_size\n\t            )  # so that the checkpoint will have the right value\n\t        model.to(self.configs.job_config.device)\n", "        return InitialisedModel(model, best_val_loss, iter_num, checkpoint)\n"]}
{"filename": "src/postprocessing/__init__.py", "chunked_list": []}
{"filename": "src/features/gpt_encoding.py", "chunked_list": ["import os\n\timport pickle\n\timport requests\n\timport logging\n\timport numpy as np\n\timport tiktoken\n\tlogger = logging.getLogger(__name__)\n\tclass DataEncoder:\n\t    def __init__(self):\n\t        self.enc = tiktoken.get_encoding(\"gpt2\")\n", "    def encode(self, s, train=True):\n\t        if train:  # training preprocessing\n\t            ids = self.enc.encode_ordinary(s) # encode_ordinary ignores any special tokens\n\t            ids.append(self.enc.eot_token) # add the end of text token, e.g. 50256 for gpt2 bpe\n\t            # note: I think eot should be prepended not appended... hmm. it's called \"eot\" though...\n\t            out = {'ids': ids, 'len': len(ids)}\n\t        else:  # inference\n\t            out = self.enc.encode(s, allowed_special={\"<|endoftext|>\"})\n\t        return out\n\t    def decode(self, s):\n", "        return self.enc.decode(s)\n\t    @staticmethod\n\t    def create_splits(data):\n\t        \"\"\"create the train and test splits\"\"\"\n\t        n = len(data)\n\t        train_data = data[:int(n*0.9)]\n\t        val_data = data[int(n*0.9):]\n\t        return train_data, val_data\n\t    @staticmethod\n\t    def save_data(data, dir_path, fname):\n", "        \"\"\"export to bin files\"\"\"\n\t        data_ids = np.array(data[\"ids\"], dtype=np.uint16)\n\t        data_ids.tofile(os.path.join(dir_path, f\"{fname}.bin\"))\n\t    def save_metadata(self, dir_path):\n\t        \"\"\"save the meta information as well, to help us encode/decode later\"\"\"\n\t        meta = {\n\t            'vocab_size': self.enc.n_vocab,\n\t        }\n\t        with open(os.path.join(dir_path, 'meta.pkl'), 'wb') as f:\n\t            pickle.dump(meta, f)\n"]}
{"filename": "src/features/__init__.py", "chunked_list": []}
{"filename": "src/model/model_init.py", "chunked_list": ["import os\n\timport time\n\timport logging\n\timport math\n\tfrom dataclasses import asdict\n\tfrom collections import namedtuple\n\timport numpy as np\n\timport torch\n\tfrom torch.nn.parallel import DistributedDataParallel as DDP\n\tfrom src.model.gpt_model import GPTConfig, GPT\n", "logger = logging.getLogger(__name__)\n\tclass ModelInitialiser:\n\t    def __init__(self, configs):\n\t        self.configs = configs\n\t    def init_resume(self, training_args=True):\n\t        # init from a model saved in a specific directory\n\t        ckpt_path = os.path.join(self.configs.job_config.out_dir, 'ckpt.pt')\n\t        checkpoint = torch.load(ckpt_path, map_location=self.configs.job_config.device)\n\t        if training_args:\n\t            # resume training from a checkpoint.\n", "            gptconf = self.configs.model_config\n\t            # force these config attributes to be equal otherwise we can't even resume training\n\t            # the rest of the attributes (e.g. dropout) can stay as desired from command line\n\t            for k in ['n_layer', 'n_head', 'n_embd', 'block_size', 'bias', 'vocab_size']:\n\t                setattr(gptconf, k, checkpoint['model_args'][k])\n\t        else:\n\t            gptconf = GPTConfig(**checkpoint['model_args'])\n\t        model = GPT(gptconf)\n\t        state_dict = checkpoint['model']\n\t        unwanted_prefix = '_orig_mod.'\n", "        for k,v in list(state_dict.items()):\n\t            if k.startswith(unwanted_prefix):\n\t                state_dict[k[len(unwanted_prefix):]] = state_dict.pop(k)\n\t        model.load_state_dict(state_dict)\n\t        return model, checkpoint\n"]}
{"filename": "src/model/__init__.py", "chunked_list": []}
{"filename": "src/model/gpt_model.py", "chunked_list": ["\"\"\"\n\tFull definition of a GPT Language Model, all of it in this single file.\n\tReferences:\n\t1) the official GPT-2 TensorFlow implementation released by OpenAI:\n\thttps://github.com/openai/gpt-2/blob/master/src/model.py\n\t2) huggingface/transformers PyTorch implementation:\n\thttps://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/modeling_gpt2.py\n\t\"\"\"\n\timport logging\n\timport math\n", "import inspect\n\tfrom dataclasses import dataclass\n\timport torch\n\timport torch.nn as nn\n\tfrom torch.nn import functional as F\n\tlogger = logging.getLogger(__name__)\n\t# @torch.jit.script # good to enable when not using torch.compile, disable when using (our default)\n\tdef new_gelu(x):\n\t    \"\"\"\n\t    Implementation of the GELU activation function currently in Google BERT repo (identical to OpenAI GPT).\n", "    Reference: Gaussian Error Linear Units (GELU) paper: https://arxiv.org/abs/1606.08415\n\t    \"\"\"\n\t    return 0.5 * x * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (x + 0.044715 * torch.pow(x, 3.0))))\n\tclass LayerNorm(nn.Module):\n\t    \"\"\" LayerNorm but with an optional bias. PyTorch doesn't support simply bias=False \"\"\"\n\t    def __init__(self, ndim, bias):\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(ndim))\n\t        self.bias = nn.Parameter(torch.zeros(ndim)) if bias else None\n\t    def forward(self, input):\n", "        return F.layer_norm(input, self.weight.shape, self.weight, self.bias, 1e-5)\n\tclass CausalSelfAttention(nn.Module):\n\t    \"\"\"\"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        assert config.n_embd % config.n_head == 0\n\t        # key, query, value projections for all heads, but in a batch\n\t        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd, bias=config.bias)\n\t        # output projection\n\t        self.c_proj = nn.Linear(config.n_embd, config.n_embd, bias=config.bias)\n", "        # regularization\n\t        self.attn_dropout = nn.Dropout(config.dropout)\n\t        self.resid_dropout = nn.Dropout(config.dropout)\n\t        self.n_head = config.n_head\n\t        self.n_embd = config.n_embd\n\t        self.dropout = config.dropout\n\t        # flash attention make GPU go brrrrr but support is only in PyTorch >= 2.0\n\t        self.flash = hasattr(torch.nn.functional, 'scaled_dot_product_attention')\n\t        if not self.flash:\n\t            logger.warning(\"WARNING: using slow attention. Flash Attention requires PyTorch >= 2.0\")\n", "            # causal mask to ensure that attention is only applied to the left in the input sequence\n\t            self.register_buffer(\"bias\", torch.tril(torch.ones(config.block_size, config.block_size))\n\t                                        .view(1, 1, config.block_size, config.block_size))\n\t    def forward(self, x):\n\t        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)\n\t        # calculate query, key, values for all heads in batch and move head forward to be the batch dim\n\t        q, k ,v  = self.c_attn(x).split(self.n_embd, dim=2)\n\t        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n", "        # causal self-attention; Self-attend: (B, nh, T, hs) x (B, nh, hs, T) -> (B, nh, T, T)\n\t        if self.flash:\n\t            # efficient attention using Flash Attention CUDA kernels\n\t            y = torch.nn.functional.scaled_dot_product_attention(q, k, v, attn_mask=None, dropout_p=self.dropout, is_causal=True)\n\t        else:\n\t            # manual implementation of attention\n\t            att = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))\n\t            att = att.masked_fill(self.bias[:,:,:T,:T] == 0, float('-inf'))\n\t            att = F.softmax(att, dim=-1)\n\t            att = self.attn_dropout(att)\n", "            y = att @ v # (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)\n\t        y = y.transpose(1, 2).contiguous().view(B, T, C) # re-assemble all head outputs side by side\n\t        # output projection\n\t        y = self.resid_dropout(self.c_proj(y))\n\t        return y\n\tclass MLP(nn.Module):\n\t    \"\"\"\"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=config.bias)\n", "        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=config.bias)\n\t        self.dropout = nn.Dropout(config.dropout)\n\t    def forward(self, x):\n\t        x = self.c_fc(x)\n\t        x = new_gelu(x)\n\t        x = self.c_proj(x)\n\t        x = self.dropout(x)\n\t        return x\n\tclass Block(nn.Module):\n\t    \"\"\"\"\"\"\n", "    def __init__(self, config):\n\t        super().__init__()\n\t        self.ln_1 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.attn = CausalSelfAttention(config)\n\t        self.ln_2 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.mlp = MLP(config)\n\t    def forward(self, x):\n\t        x = x + self.attn(self.ln_1(x))\n\t        x = x + self.mlp(self.ln_2(x))\n\t        return x\n", "@dataclass\n\tclass GPTConfig:\n\t    block_size: int = 1024\n\t    vocab_size: int = 50304 # GPT-2 vocab_size of 50257, padded up to nearest multiple of 64 for efficiency\n\t    n_layer: int = 12\n\t    n_head: int = 12\n\t    n_embd: int = 768\n\t    dropout: float = 0.0\n\t    bias: bool = True # True: bias in Linears and LayerNorms, like GPT-2. False: a bit better and faster\n\tclass GPT(nn.Module):\n", "    \"\"\"\"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        assert config.vocab_size is not None\n\t        assert config.block_size is not None\n\t        self.config = config\n\t        self.transformer = nn.ModuleDict(dict(\n\t            wte = nn.Embedding(config.vocab_size, config.n_embd),\n\t            wpe = nn.Embedding(config.block_size, config.n_embd),\n\t            drop = nn.Dropout(config.dropout),\n", "            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),\n\t            ln_f = LayerNorm(config.n_embd, bias=config.bias),\n\t        ))\n\t        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)\n\t        # with weight tying when using torch.compile() some warnings get generated:\n\t        # \"UserWarning: functional_call was passed multiple values for tied weights.\n\t        # This behavior is deprecated and will be an error in future versions\"\n\t        # not 100% sure what this is, so far seems to be harmless. TODO investigate\n\t        self.transformer.wte.weight = self.lm_head.weight # https://paperswithcode.com/method/weight-tying\n\t        # init all weights\n", "        self.apply(self._init_weights)\n\t        # apply special scaled init to the residual projections, per GPT-2 paper\n\t        for pn, p in self.named_parameters():\n\t            if pn.endswith('c_proj.weight'):\n\t                torch.nn.init.normal_(p, mean=0.0, std=0.02/math.sqrt(2 * config.n_layer))\n\t        # report number of parameters\n\t        logger.info(\"number of parameters: %.2fM\" % (self.get_num_params()/1e6,))\n\t    def get_num_params(self, non_embedding=True):\n\t        \"\"\"\n\t        Return the number of parameters in the model.\n", "        For non-embedding count (default), the position embeddings get subtracted.\n\t        The token embeddings would too, except due to the parameter sharing these\n\t        params are actually used as weights in the final layer, so we include them.\n\t        \"\"\"\n\t        n_params = sum(p.numel() for p in self.parameters())\n\t        if non_embedding:\n\t            n_params -= self.transformer.wpe.weight.numel()\n\t        return n_params\n\t    def _init_weights(self, module):\n\t        if isinstance(module, nn.Linear):\n", "            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t            if module.bias is not None:\n\t                torch.nn.init.zeros_(module.bias)\n\t        elif isinstance(module, nn.Embedding):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t    def forward(self, idx, targets=None):\n\t        device = idx.device\n\t        b, t = idx.size()\n\t        assert t <= self.config.block_size, f\"Cannot forward sequence of length {t}, block size is only {self.config.block_size}\"\n\t        pos = torch.arange(0, t, dtype=torch.long, device=device).unsqueeze(0) # shape (1, t)\n", "        # forward the GPT model itself\n\t        tok_emb = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)\n\t        pos_emb = self.transformer.wpe(pos) # position embeddings of shape (1, t, n_embd)\n\t        x = self.transformer.drop(tok_emb + pos_emb)\n\t        for block in self.transformer.h:\n\t            x = block(x)\n\t        x = self.transformer.ln_f(x)\n\t        if targets is not None:\n\t            # if we are given some desired targets also calculate the loss\n\t            logits = self.lm_head(x)\n", "            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)\n\t        else:\n\t            # inference-time mini-optimization: only forward the lm_head on the very last position\n\t            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim\n\t            loss = None\n\t        return logits, loss\n\t    def crop_block_size(self, block_size):\n\t        # model surgery to decrease the block size if necessary\n\t        # e.g. we may load the GPT2 pretrained model checkpoint (block size 1024)\n\t        # but want to use a smaller block size for some smaller, simpler model\n", "        assert block_size <= self.config.block_size\n\t        self.config.block_size = block_size\n\t        self.transformer.wpe.weight = nn.Parameter(self.transformer.wpe.weight[:block_size])\n\t        for block in self.transformer.h:\n\t            block.attn.bias = block.attn.bias[:,:,:block_size,:block_size]\n\t    @classmethod\n\t    def from_pretrained(cls, model_type, override_args=None):\n\t        assert model_type in {'gpt2', 'gpt2-medium', 'gpt2-large', 'gpt2-xl'}\n\t        override_args = override_args or {} # default to empty dict\n\t        # only dropout can be overridden see more notes below\n", "        assert all(k == 'dropout' for k in override_args)\n\t        from transformers import GPT2LMHeadModel\n\t        logger.info(\"loading weights from pretrained gpt: %s\" % model_type)\n\t        # n_layer, n_head and n_embd are determined from model_type\n\t        config_args = {\n\t            'gpt2':         dict(n_layer=12, n_head=12, n_embd=768),  # 124M params\n\t            'gpt2-medium':  dict(n_layer=24, n_head=16, n_embd=1024), # 350M params\n\t            'gpt2-large':   dict(n_layer=36, n_head=20, n_embd=1280), # 774M params\n\t            'gpt2-xl':      dict(n_layer=48, n_head=25, n_embd=1600), # 1558M params\n\t        }[model_type]\n", "        logger.info(\"forcing vocab_size=50257, block_size=1024, bias=True\")\n\t        config_args['vocab_size'] = 50257 # always 50257 for GPT model checkpoints\n\t        config_args['block_size'] = 1024 # always 1024 for GPT model checkpoints\n\t        config_args['bias'] = True # always True for GPT model checkpoints\n\t        # we can override the dropout rate, if desired\n\t        if 'dropout' in override_args:\n\t            logger.info(f\"overriding dropout rate to {override_args['dropout']}\")\n\t            config_args['dropout'] = override_args['dropout']\n\t        # create a from-scratch initialized minGPT model\n\t        config = GPTConfig(**config_args)\n", "        model = GPT(config)\n\t        sd = model.state_dict()\n\t        sd_keys = sd.keys()\n\t        sd_keys = [k for k in sd_keys if not k.endswith('.attn.bias')] # discard this mask / buffer, not a param\n\t        # init a huggingface/transformers model\n\t        model_hf = GPT2LMHeadModel.from_pretrained(model_type)\n\t        sd_hf = model_hf.state_dict()\n\t        # copy while ensuring all of the parameters are aligned and match in names and shapes\n\t        sd_keys_hf = sd_hf.keys()\n\t        sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.masked_bias')] # ignore these, just a buffer\n", "        sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.bias')] # same, just the mask (buffer)\n\t        transposed = ['attn.c_attn.weight', 'attn.c_proj.weight', 'mlp.c_fc.weight', 'mlp.c_proj.weight']\n\t        # basically the openai checkpoints use a \"Conv1D\" module, but we only want to use a vanilla Linear\n\t        # this means that we have to transpose these weights when we import them\n\t        assert len(sd_keys_hf) == len(sd_keys), f\"mismatched keys: {len(sd_keys_hf)} != {len(sd_keys)}\"\n\t        for k in sd_keys_hf:\n\t            if any(k.endswith(w) for w in transposed):\n\t                # special treatment for the Conv1D weights we need to transpose\n\t                assert sd_hf[k].shape[::-1] == sd[k].shape\n\t                with torch.no_grad():\n", "                    sd[k].copy_(sd_hf[k].t())\n\t            else:\n\t                # vanilla copy over the other parameters\n\t                assert sd_hf[k].shape == sd[k].shape\n\t                with torch.no_grad():\n\t                    sd[k].copy_(sd_hf[k])\n\t        return model\n\t    def configure_optimizers(self, weight_decay, learning_rate, betas, device_type):\n\t        \"\"\"\n\t        This long function is unfortunately doing something very simple and is being very defensive:\n", "        We are separating out all parameters of the model into two buckets: those that will experience\n\t        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n\t        We are then returning the PyTorch optimizer object.\n\t        \"\"\"\n\t        # separate out all parameters to those that will and won't experience regularizing weight decay\n\t        decay = set()\n\t        no_decay = set()\n\t        whitelist_weight_modules = (torch.nn.Linear, )\n\t        blacklist_weight_modules = (torch.nn.LayerNorm, LayerNorm, torch.nn.Embedding)\n\t        for mn, m in self.named_modules():\n", "            for pn, p in m.named_parameters():\n\t                fpn = '%s.%s' % (mn, pn) if mn else pn # full param name\n\t                # random note: because named_modules and named_parameters are recursive\n\t                # we will see the same tensors p many many times. but doing it this way\n\t                # allows us to know which parent module any tensor p belongs to...\n\t                if pn.endswith('bias'):\n\t                    # all biases will not be decayed\n\t                    no_decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, whitelist_weight_modules):\n\t                    # weights of whitelist modules will be weight decayed\n", "                    decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, blacklist_weight_modules):\n\t                    # weights of blacklist modules will NOT be weight decayed\n\t                    no_decay.add(fpn)\n\t        # subtle: 'transformer.wte.weight' and 'lm_head.weight' are tied, so they\n\t        # will appear in the no_decay and decay sets respectively after the above.\n\t        # In addition, because named_parameters() doesn't return duplicates, it\n\t        # will only return the first occurence, key'd by 'transformer.wte.weight', below.\n\t        # so let's manually remove 'lm_head.weight' from decay set. This will include\n\t        # this tensor into optimization via transformer.wte.weight only, and not decayed.\n", "        decay.remove('lm_head.weight')\n\t        # validate that we considered every parameter\n\t        param_dict = {pn: p for pn, p in self.named_parameters()}\n\t        inter_params = decay & no_decay\n\t        union_params = decay | no_decay\n\t        assert len(inter_params) == 0, \"parameters %s made it into both decay/no_decay sets!\" % (str(inter_params), )\n\t        assert len(param_dict.keys() - union_params) == 0, \"parameters %s were not separated into either decay/no_decay set!\" \\\n\t                                                    % (str(param_dict.keys() - union_params), )\n\t        # create the pytorch optimizer object\n\t        optim_groups = [\n", "            {\"params\": [param_dict[pn] for pn in sorted(list(decay))], \"weight_decay\": weight_decay},\n\t            {\"params\": [param_dict[pn] for pn in sorted(list(no_decay))], \"weight_decay\": 0.0},\n\t        ]\n\t        # new PyTorch nightly has a new 'fused' option for AdamW that is much faster\n\t        use_fused = (device_type == 'cuda') and ('fused' in inspect.signature(torch.optim.AdamW).parameters)\n\t        logger.info(f\"using fused AdamW: {use_fused}\")\n\t        extra_args = dict(fused=True) if use_fused else dict()\n\t        optimizer = torch.optim.AdamW(optim_groups, lr=learning_rate, betas=betas, **extra_args)\n\t        return optimizer\n\t    def estimate_mfu(self, fwdbwd_per_iter, dt):\n", "        \"\"\" estimate model flops utilization (MFU) in units of A100 bfloat16 peak FLOPS \"\"\"\n\t        # first estimate the number of flops we do per iteration.\n\t        # see PaLM paper Appendix B as ref: https://arxiv.org/abs/2204.02311\n\t        N = self.get_num_params()\n\t        cfg = self.config\n\t        L, H, Q, T = cfg.n_layer, cfg.n_head, cfg.n_embd//cfg.n_head, cfg.block_size\n\t        flops_per_token = 6*N + 12*L*H*Q*T\n\t        flops_per_fwdbwd = flops_per_token * T\n\t        flops_per_iter = flops_per_fwdbwd * fwdbwd_per_iter\n\t        # express our flops throughput as ratio of A100 bfloat16 peak flops\n", "        flops_achieved = flops_per_iter * (1.0/dt) # per second\n\t        flops_promised = 312e12 # A100 GPU bfloat16 peak flops is 312 TFLOPS\n\t        mfu = flops_achieved / flops_promised\n\t        return mfu\n\t    @torch.no_grad()\n\t    def generate(self, idx, max_new_tokens, temperature=1.0, top_k=None):\n\t        \"\"\"\n\t        Take a conditioning sequence of indices idx (LongTensor of shape (b,t)) and complete\n\t        the sequence max_new_tokens times, feeding the predictions back into the model each time.\n\t        Most likely you'll want to make sure to be in model.eval() mode of operation for this.\n", "        \"\"\"\n\t        for _ in range(max_new_tokens):\n\t            # if the sequence context is growing too long we must crop it at block_size\n\t            idx_cond = idx if idx.size(1) <= self.config.block_size else idx[:, -self.config.block_size:]\n\t            # forward the model to get the logits for the index in the sequence\n\t            logits, _ = self(idx_cond)\n\t            # pluck the logits at the final step and scale by desired temperature\n\t            logits = logits[:, -1, :] / temperature\n\t            # optionally crop the logits to only the top k options\n\t            if top_k is not None:\n", "                v, _ = torch.topk(logits, min(top_k, logits.size(-1)))\n\t                logits[logits < v[:, [-1]]] = -float('Inf')\n\t            # apply softmax to convert logits to (normalized) probabilities\n\t            probs = F.softmax(logits, dim=-1)\n\t            # sample from the distribution\n\t            idx_next = torch.multinomial(probs, num_samples=1)\n\t            # append sampled index to the running sequence and continue\n\t            idx = torch.cat((idx, idx_next), dim=1)\n\t        return idx\n"]}
{"filename": "src/model_registration/__init__.py", "chunked_list": []}
{"filename": "src/data_io/data_loaders.py", "chunked_list": ["import os\n\timport pickle\n\timport logging\n\tfrom dataclasses import dataclass\n\timport numpy as np\n\timport tiktoken\n\timport torch\n\tlogger = logging.getLogger(__name__)\n\t@dataclass\n\tclass DataConfig:\n", "    dataset: str = 'openwebtext'\n\t    batch_size: int = 12 # if gradient_accumulation_steps > 1, this is the micro-batch size\n\t    block_size: int = 1024\n\t    device: str = 'cuda' # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks\n\t    device_type: str = 'cuda' if 'cuda' in device else 'cpu' # for later use in torch.autocast\n\tclass DataLoader:\n\t    def __init__(self, config, path=None):\n\t        self.config = config\n\t        self.data_dir = os.path.join('data', self.config.dataset)\n\t        if path:\n", "            self.data_dir = os.path.join(path, self.data_dir)\n\t        self.train_data = np.memmap(os.path.join(self.data_dir, 'train.bin'), dtype=np.uint16, mode='r')\n\t        self.val_data = np.memmap(os.path.join(self.data_dir, 'val.bin'), dtype=np.uint16, mode='r')\n\t        self.load_metadata()\n\t    def load_metadata(self):\n\t        \"\"\"attempt to derive vocab_size from the dataset\"\"\"\n\t        meta_path = os.path.join(self.data_dir, 'meta.pkl')\n\t        self.meta_vocab_size = None\n\t        if os.path.exists(meta_path):\n\t            with open(meta_path, 'rb') as f:\n", "                meta = pickle.load(f)\n\t            self.meta_vocab_size = meta['vocab_size']\n\t            logger.info(f\"found vocab_size = {self.meta_vocab_size} (inside {meta_path})\")\n\t    def get_batch(self, split):\n\t        data = self.train_data if split == 'train' else self.val_data\n\t        ix = torch.randint(len(data) - self.config.block_size, (self.config.batch_size,))\n\t        x = torch.stack([torch.from_numpy((data[i:i+self.config.block_size]).astype(np.int64)) for i in ix])\n\t        y = torch.stack([torch.from_numpy((data[i+1:i+1+self.config.block_size]).astype(np.int64)) for i in ix])\n\t        if self.config.device_type == 'cuda':\n\t            # pin arrays x,y, which allows us to move them to GPU asynchronously (non_blocking=True)\n", "            x, y = x.pin_memory().to(self.config.device, non_blocking=True), y.pin_memory().to(self.config.device, non_blocking=True)\n\t        else:\n\t            x, y = x.to(self.config.device), y.to(self.config.device)\n\t        return x, y\n"]}
{"filename": "src/data_io/fetch_shakespeare.py", "chunked_list": ["\"\"\"\n\tPrepare the Shakespeare dataset for language modeling.\n\t\"\"\"\n\timport os\n\timport logging\n\timport numpy as np\n\tfrom src.features.gpt_encoding import DataEncoder\n\tfrom src.data_io.data_fetchers import fetch_txt_data\n\tlogging.basicConfig(level=logging.INFO)\n\tlogger = logging.getLogger(__name__)\n", "def main():\n\t    \"\"\"\n\t    length of dataset in characters:  1115394\n\t    all the unique characters:\n\t        #!$&',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\t    vocab size: 65\n\t    train has 1003854 tokens\n\t    val has 111540 tokens\n\t    \"\"\"\n\t    data = fetch_txt_data(\n", "        data_url=\"https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\",\n\t        output_dir_path=\"data/tinyshakespeare\",\n\t    )\n\t    data_builder = DataEncoder()\n\t    train_data, val_data = data_builder.create_splits(data)\n\t    # encode both to integers\n\t    train_ids = data_builder.encode(train_data)\n\t    val_ids = data_builder.encode(val_data)\n\t    logger.info(f\"vocabulary has {data_builder.enc.n_vocab} tokens\")\n\t    num_train_ids = train_ids[\"len\"]\n", "    num_val_ids = val_ids[\"len\"]\n\t    logger.info(f\"train has {num_train_ids} tokens\")\n\t    logger.info(f\"val has {num_val_ids} tokens\")\n\t    data_builder.save_data(train_ids, dir_path=\"data/tinyshakespeare\", fname=\"train\")\n\t    data_builder.save_data(val_ids, dir_path=\"data/tinyshakespeare\", fname=\"val\")\n\t    data_builder.save_metadata(dir_path=\"data/tinyshakespeare\")\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "src/data_io/__init__.py", "chunked_list": []}
{"filename": "src/data_io/data_fetchers.py", "chunked_list": ["import os\n\timport logging\n\timport requests\n\tlogger = logging.getLogger(__name__)\n\tdef fetch_txt_data(data_url, output_dir_path):\n\t    \"\"\"download a .txt dataset\"\"\"\n\t    input_file_path = os.path.join(output_dir_path, 'input.txt')\n\t    if not os.path.exists(input_file_path):\n\t        with open(input_file_path, 'w') as f:\n\t            f.write(requests.get(data_url).text)\n", "    with open(input_file_path, 'r') as f:\n\t        data = f.read()\n\t    logger.info(f\"length of dataset in characters: {len(data):,}\")\n\t    return data\n"]}
