{"filename": "tests/test_wikidata.py", "chunked_list": ["import pytest\n\tfrom srtk.knowledge_graph import Wikidata\n\tWIKIDATA_ENDPOINT = \"https://query.wikidata.org/sparql\"\n\t@pytest.fixture\n\tdef wikidata():\n\t    return Wikidata(WIKIDATA_ENDPOINT, prepend_prefixes=False, exclude_qualifiers=True)\n\tdef test_get_label(wikidata: Wikidata):\n\t    label = wikidata.get_label(\"Q157808\")\n\t    assert label == \"Technical University of Munich\"\n\tdef test_search_one_hop_relations(wikidata: Wikidata):\n", "    src = \"Q157808\"\n\t    dst = \"Q183\"\n\t    relations = wikidata.search_one_hop_relations(src, dst)\n\t    assert [\"P17\"] in relations, \"(TUM --country--> Germany)\"\n\tdef test_search_two_hop_relations(wikidata: Wikidata):\n\t    src = \"Q157808\"\n\t    dst = \"Q458\"\n\t    relations = wikidata.search_two_hop_relations(src, dst)\n\t    assert [\"P17\", \"P463\"] in relations, \"(TUM --country--> Germany --member of--> European Union)\"\n\tdef test_deduce_leaves(wikidata: Wikidata):\n", "    src = \"Q157808\"\n\t    # Test one-hop leaves\n\t    path = (\"P17\",)\n\t    leaves = wikidata.deduce_leaves(src, path, limit=10)\n\t    assert \"Q183\"  in leaves, \"(TUM --country--> Germany )\"\n\t    # Test two-hop leaves\n\t    path = (\"P17\", \"P463\")\n\t    leaves = wikidata.deduce_leaves(src, path, limit=100)\n\t    assert \"Q458\" in leaves, \"(TUM --country--> Germany --member of--> European Union)\"\n\tdef test_get_neighbor_relations():\n", "    src = \"Q157808\"\n\t    wikidata = Wikidata(WIKIDATA_ENDPOINT, exclude_qualifiers=True)\n\t    # Test 1-hop relations AND exclude_qualifiers=True\n\t    relations = wikidata.get_neighbor_relations(src, hop=1, limit=200)\n\t    assert \"P17\" in relations and \"P112\" in relations,  \"TUM has 1-hop relations country and founded by\"\n\t    assert \"P571\" not in relations, \"inception should be filtered out as it is a quantifier\"\n\t    # Test 2-hop relations\n\t    relations = wikidata.get_neighbor_relations(src, hop=2)\n\t    assert (\"P17\", \"P361\") in relations, \"TUM --country--> Germany --part of--> European Union\"\n\t    # The wikidata endpoint is re-initialized to avoid caching\n", "    wikidata = Wikidata(WIKIDATA_ENDPOINT, prepend_prefixes=False, exclude_qualifiers=False)\n\t    # Test exclude_qualifiers=False\n\t    relations = wikidata.get_neighbor_relations(src, hop=1, limit=200)\n\t    assert \"P571\" in relations, \"inception should be present when qualifiers are not excluded\"\n\tdef test_deduce_leaves_from_multiple_srcs(wikidata: Wikidata):\n\t    srcs = [\"Q157808\", \"Q55044\"]  # TUM and LMU\n\t    # Test searching one-hop common leaves\n\t    path = (\"P17\",)\n\t    leaves = wikidata.deduce_leaves_from_multiple_srcs(srcs, path, limit=10)\n\t    assert \"Q183\" in leaves, \"(TUM | LMU --country--> Germany )\"\n"]}
{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "tests/test_encoder.py", "chunked_list": ["import pytest\n\timport torch\n\tfrom srtk.scorer import LitSentenceEncoder\n\t@pytest.fixture\n\tdef model():\n\t    return LitSentenceEncoder('smallbenchnlp/roberta-small')\n\tdef examine_single_pooler(pooler):\n\t    # Test pooler without batch size\n\t    hidden_states = torch.randn(10, 256)\n\t    attention_mask = torch.ones(10)\n", "    pooled = pooler(hidden_states, attention_mask)\n\t    assert pooled.shape == (256,)\n\t    # Test pooler with batch size\n\t    hidden_states = torch.randn(2, 10, 256)\n\t    attention_mask = torch.ones(2, 10)\n\t    pooled = pooler(hidden_states, attention_mask)\n\t    assert pooled.shape == (2, 256)\n\tdef test_avg_pooler(model):\n\t    if hasattr(model, 'avg_pool'):\n\t        examine_single_pooler(model.avg_pool)\n", "    else:\n\t        pytest.skip('No avg pooler found')\n\tdef test_cls_pooler(model):\n\t    if hasattr(model, 'cls_pool'):\n\t        examine_single_pooler(model.cls_pool)\n\t    else:\n\t        pytest.skip('No cls pooler found')\n\tdef test_compute_sentence_similarity(model):\n\t    # Test batched similarity\n\t    query = torch.randn(2, 1, 10, 256)\n", "    samples = torch.randn(2, 3, 10, 256)\n\t    similarity = model.compute_sentence_similarity(query, samples)\n\t    assert similarity.shape == (2, 3)\n\t    # Test single pair similarity\n\t    query = torch.randn(1, 10, 256)\n\t    sample = torch.randn(1, 10, 256)\n\t    similarity = model.compute_sentence_similarity(query, sample)\n\t    assert similarity.shape == (1,)\n\tdef test_training_step(model):\n\t    # Test training step\n", "    batch = {\n\t        'input_ids': torch.randint(0, 100, (2, 4, 10)),\n\t        'attention_mask': torch.ones(2, 4, 10),\n\t    }\n\t    loss = model.training_step(batch, 0)\n\t    assert loss.shape == ()\n"]}
{"filename": "tests/test_scorer.py", "chunked_list": ["import pytest\n\tfrom srtk.scorer import Scorer\n\t@pytest.fixture\n\tdef scorer():\n\t    \"\"\"Whether the scorer can be initialized\"\"\"\n\t    return Scorer('smallbenchnlp/roberta-small')\n\tdef test_score(scorer):\n\t    \"\"\"Whether the scorer can run and return a digit, without crashing.\"\"\"\n\t    query = 'query: how old is the natural satellite of the earch?'\n\t    prev_relations = ('satellite of',)\n", "    next_relation = 'relation: age'\n\t    scorer.score(query, prev_relations, next_relation)\n\tdef test_batch_score(scorer):\n\t    \"\"\"Whether the batch scorer is capable of batch scoring.\"\"\"\n\t    query = 'query: how old is the natural satellite of the earch?'\n\t    prev_relations = ('satellite of',)\n\t    next_relations = ('relation: age', 'relation: age')\n\t    scores = scorer.batch_score(query, prev_relations, next_relations)\n\t    assert isinstance(scores, list)\n\t    assert len(scores) == len(next_relations)\n", "    assert scores[0] == scores[1], 'The scores should be the same for the same samples.'\n"]}
{"filename": "tests/test_link.py", "chunked_list": ["import json\n\timport requests\n\tfrom argparse import Namespace\n\timport pytest\n\tfrom srtk.link import link\n\tdef check_url_availability(url):\n\t    try:\n\t        response = requests.head(url)\n\t        return response.status_code == 200\n\t    except requests.ConnectionError:\n", "        return False\n\tdef test_dbpedia_linker():\n\t    question = {\"id\": \"berlin\", \"question\": \"Berlin is the capital of Germany.\"}\n\t    with open(\"question.jsonl\", \"w\", encoding=\"utf-8\") as f:\n\t        f.write(json.dumps(question) + \"\\n\")\n\t    dbpedia_endpoint = \"https://api.dbpedia-spotlight.org/en/annotate\"\n\t    if not check_url_availability(dbpedia_endpoint):\n\t        pytest.skip(\"DBpedia endpoint is not available.\")\n\t    args = Namespace(\n\t        input=\"question.jsonl\",\n", "        output=\"linked.jsonl\",\n\t        knowledge_graph=\"dbpedia\",\n\t        ground_on=\"question\",\n\t        el_endpoint=dbpedia_endpoint,\n\t        service=\"spotlight\",\n\t        token=None,\n\t    )\n\t    link(args)\n\t    with open(\"linked.jsonl\", \"r\", encoding=\"utf-8\") as f:\n\t        linked = json.loads(f.readline())\n", "    assert \"Berlin\" in linked[\"question_entities\"]\n\t    assert \"Germany\" in linked[\"question_entities\"]\n"]}
{"filename": "tests/test_freebase.py", "chunked_list": ["import requests\n\timport pytest\n\tfrom srtk.knowledge_graph import Freebase\n\tFREEBASE_ENDPOINT = \"http://localhost:3001/sparql\"\n\tdef endpoint_reachable():\n\t    try:\n\t        response = requests.get(FREEBASE_ENDPOINT)\n\t        if response.status_code == 200:\n\t            return True\n\t        else:\n", "            return False\n\t    except requests.exceptions.RequestException:\n\t        return False\n\tskip_if_unreachable = pytest.mark.skipif(\n\t    not endpoint_reachable(), reason=\"Freebase endpoint not reachable\"\n\t)\n\t@pytest.fixture\n\tdef freebase():\n\t    return Freebase(FREEBASE_ENDPOINT, prepend_prefixes=True)\n\t@skip_if_unreachable\n", "def test_get_label(freebase: Freebase):\n\t    # Skip the test if the fixture is skipped\n\t    label = freebase.get_label(\"m.03_r3\")\n\t    assert label == \"Jamaica\"\n\t@skip_if_unreachable\n\tdef test_search_one_hop_relations(freebase: Freebase):\n\t    src = \"m.03_r3\"\n\t    dst = \"m.01428y\"\n\t    relations = freebase.search_one_hop_relations(src, dst)\n\t    assert [\"location.country.languages_spoken\"] in relations, \"(Jamaica --speak--> Jamaican English)\"\n", "@skip_if_unreachable\n\tdef test_search_two_hop_relations(freebase: Freebase):\n\t    src = \"m.0157m\"\n\t    dst = \"m.0crpbj\"\n\t    relations = freebase.search_two_hop_relations(src, dst)\n\t    assert [\"people.person.education\", \"education.education.institution\"] in relations, \\\n\t        \"Bill Clinton --education-->  ?? --institution--> Hot Springs High School\"\n\t@skip_if_unreachable\n\tdef test_deduce_leaves(freebase: Freebase):\n\t    src = \"m.0157m\"\n", "    # Test one-hop leaves\n\t    path = (\"people.person.education\",)\n\t    leaves = freebase.deduce_leaves(src, path, limit=10)\n\t    assert \"m.0125cddf\"  in leaves, \"(Bill Clinton --education-->  )\"\n\t    # Test two-hop leaves\n\t    path = (\"people.person.education\", \"education.education.institution\")\n\t    leaves = freebase.deduce_leaves(src, path, limit=10)\n\t    assert \"m.0crpbj\" in leaves, \"(Bill Clinton --education-->  --insittution--> Hot Springs High School\"\n\t@skip_if_unreachable\n\tdef test_get_neighbor_relations(freebase):\n", "    src = \"m.0157m\"\n\t    # Test 1-hop relations\n\t    relations = freebase.get_neighbor_relations(src, hop=1, limit=200)\n\t    assert \"government.us_president.vice_president\" in relations and \"government.politician.party\" in relations,\\\n\t        \"Billclinton has 1-hop relations vice_president and party\"\n\t    # Test 2-hop relations\n\t    src = \"m.0157m\"\n\t    relations = freebase.get_neighbor_relations(src, hop=2, limit=200)\n\t    assert ('government.us_president.vice_president', 'people.person.gender') in relations,\\\n\t        \"Bill Clinton --vice president--> --gender--> ...\"\n", "@skip_if_unreachable\n\tdef test_deduce_leaves_from_multiple_srcs(freebase: Freebase):\n\t    srcs = [\"m.0157m\", \"m.02mjmr\"]  # Bill and Barack\n\t    # Test searching one-hop common leaves\n\t    path = (\"government.us_president.vice_president\",)\n\t    leaves = freebase.deduce_leaves_from_multiple_srcs(srcs, path, limit=10)\n\t    assert \"m.0d05fv\" in leaves, \"(Bill | Barack --vice president--> Joe Biden )\"\n"]}
{"filename": "tests/test_dbpedia.py", "chunked_list": ["import pytest\n\tfrom srtk.knowledge_graph.dbpedia import DBpedia\n\tDBPEDIA_ENDPOINT = \"https://dbpedia.org/sparql\"\n\t@pytest.fixture\n\tdef dbpedia():\n\t    return DBpedia(DBPEDIA_ENDPOINT, prepend_prefixes=False)\n\tdef test_get_label(dbpedia: DBpedia):\n\t    label = dbpedia.get_label(\"Elizabeth_II\")\n\t    assert label == \"Elizabeth II\"\n\tdef test_search_one_hop_relations(dbpedia: DBpedia):\n", "    src = \"Elizabeth_II\"\n\t    dst = \"Charles_III\"\n\t    relations = dbpedia.search_one_hop_relations(src, dst)\n\t    assert [\"child\"] in relations and [\"successor\"] in relations\n\tdef test_search_two_hop_relations(dbpedia: DBpedia):\n\t    src = \"Technical_University_of_Munich\"\n\t    dst = \"Bavaria\"\n\t    relations = dbpedia.search_two_hop_relations(src, dst)\n\t    assert [\"city\", \"federalState\"] in relations\n\tdef test_deduce_leaves(dbpedia: DBpedia):\n", "    src = \"Technical_University_of_Munich\"\n\t    # Test one-hop leaves\n\t    path = (\"city\",)\n\t    leaves = dbpedia.deduce_leaves(src, path, limit=10)\n\t    assert \"Munich\"  in leaves, \"(TUM --city--> Munich )\"\n\t    # Test two-hop leaves\n\t    path = (\"city\", \"federalState\")\n\t    leaves = dbpedia.deduce_leaves(src, path, limit=10)\n\t    assert \"Bavaria\" in leaves\n\tdef test_get_neighbor_relations(dbpedia):\n", "    src = \"Charles_III\"\n\t    # Test 1-hop relations\n\t    relations = dbpedia.get_neighbor_relations(src, hop=1, limit=200)\n\t    assert  all(r in relations for r in [\"predecessor\", \"parent\", \"successor\"]),\\\n\t        \"'predecessor', 'parent', 'successor' should present in the relations\"\n\t    # Test 2-hop relations\n\t    relations = dbpedia.get_neighbor_relations(src, hop=2)\n\t    assert (\"parent\", \"title\") in relations, \"Charles III --parent--> Elizabeth II --title--> Queen\"\n\tdef test_deduce_leaves_from_multiple_srcs(dbpedia):\n\t    srcs = [\"Charles_III\", \"Elizabeth_II\"]\n", "    path = (\"successor\",)\n\t    leaves = dbpedia.deduce_leaves_from_multiple_srcs(srcs, path, limit=10)\n\t    assert \"Charles_III\" in leaves and \"William,_Prince_of_Wales\" in leaves\n"]}
{"filename": "docs/conf.py", "chunked_list": ["# Configuration file for the Sphinx documentation builder.\n\t#\n\t# For the full list of built-in configuration values, see the documentation:\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\timport os\n\timport sys\n\tsys.path.insert(0, os.path.abspath('../src'))\n\t# -- Project information -----------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\n\tproject = 'srtk'\n", "copyright = '2023, Yuanchun Shen'\n\tauthor = 'Yuanchun Shen'\n\trelease = '0.0.5'\n\t# -- General configuration ---------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\n\tautodoc_mock_imports = ['beautifulsoup4', 'lightning', 'pyvis', 'SPARQLWrapper',\n\t                        'srsly', 'transformers', 'tqdm', 'torch', 'datasets',\n\t                        'bs4', 'wikimapper']\n\textensions = ['sphinx.ext.autodoc', 'myst_parser', 'sphinx.ext.napoleon']\n\ttemplates_path = ['_templates']\n", "exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\t# -- Options for HTML output -------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n\thtml_theme = 'sphinx_rtd_theme'\n\thtml_static_path = ['_static']\n"]}
{"filename": "src/srtk/train.py", "chunked_list": ["\"\"\"The script to train the scorer model.\n\te.g.\n\tpython train.py --data-file data/train.jsonl --model-name-or-path intfloat/e5-small --save-model-path artifacts/scorer\n\t\"\"\"\n\timport argparse\n\timport datetime\n\tfrom collections import defaultdict\n\tfrom dataclasses import dataclass\n\timport lightning.pytorch as pl\n\timport torch\n", "from datasets import load_dataset\n\tfrom lightning.pytorch.loggers import WandbLogger\n\tfrom torch.utils.data import DataLoader\n\tfrom transformers import AutoTokenizer, PreTrainedTokenizerBase\n\tfrom .scorer import LitSentenceEncoder\n\tdef concate_all(example):\n\t    \"\"\"Concatenate all columns into one column for input.\n\t    The resulted 'input_text' column is a list of strings.\n\t    \"\"\"\n\t    query = 'query: ' + example['query']\n", "    rels = [example['positive']] + example['negatives']\n\t    rels = ['relation: ' + rel for rel in rels]\n\t    example['input_text'] = [query] + rels\n\t    return example\n\t@dataclass\n\tclass Collator:\n\t    \"\"\"Collate a list of examples into a batch.\"\"\"\n\t    tokenizer: PreTrainedTokenizerBase\n\t    def __call__(self, features):\n\t        batched = defaultdict(list)\n", "        for item in features:\n\t            for key, value in item.items():\n\t                value = torch.tensor(value)\n\t                if key == 'attention_mask':\n\t                    value = value.bool()\n\t                batched[key].append(value)\n\t        for key, value in batched.items():\n\t            batched[key] = torch.stack(value, dim=0)\n\t        return batched\n\tdef prepare_dataloaders(train_data, validation_data, tokenizer, batch_size):\n", "    \"\"\"Prepare dataloaders for training and validation.\n\t    If validation dataset is not provided, 5 percent of the training data will be used as validation data.\n\t    \"\"\"\n\t    def tokenize(example):\n\t        tokenized = tokenizer(example['input_text'], padding='max_length', truncation=True, return_tensors='pt', max_length=32)\n\t        return tokenized\n\t    train_split = 'train[:95%]' if validation_data is None else 'train'\n\t    validation_split = 'train[95%:]' if validation_data is None else 'train'\n\t    if validation_data is None:\n\t        validation_data = train_data\n", "    train_dataset = load_dataset('json', data_files=train_data, split=train_split)\n\t    train_dataset = train_dataset.map(concate_all, remove_columns=train_dataset.column_names)\n\t    train_dataset = train_dataset.map(tokenize, remove_columns=train_dataset.column_names)\n\t    validation_dataset = load_dataset('json', data_files=validation_data, split=validation_split)\n\t    validation_dataset = validation_dataset.map(concate_all, remove_columns=validation_dataset.column_names)\n\t    validation_dataset = validation_dataset.map(tokenize, remove_columns=validation_dataset.column_names)\n\t    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, collate_fn=Collator(tokenizer), num_workers=8)\n\t    validation_loader = DataLoader(validation_dataset, batch_size=batch_size, shuffle=False, collate_fn=Collator(tokenizer), num_workers=8)\n\t    return train_loader, validation_loader\n\tdef train(args):\n", "    \"\"\"Train the scorer model.\n\t    The model compares the similarity between [question; previous relation] and the next relation.\n\t    \"\"\"\n\t    torch.set_float32_matmul_precision('medium')\n\t    model = LitSentenceEncoder(args.model_name_or_path, lr=args.learning_rate, loss=args.loss)\n\t    tokenizer = AutoTokenizer.from_pretrained(args.model_name_or_path)\n\t    train_loader, validation_loader = prepare_dataloaders(args.train_dataset, args.validation_dataset, tokenizer, args.batch_size)\n\t    day_hour = datetime.datetime.now().strftime('%m%d%H%M')\n\t    wandb_logger = WandbLogger(project=args.wandb_project, name=day_hour , group=args.wandb_group, save_dir=args.wandb_savedir)\n\t    trainer = pl.Trainer(accelerator=args.accelerator, default_root_dir=args.output_dir,\n", "                         fast_dev_run=args.fast_dev_run, max_epochs=args.max_epochs, logger=wandb_logger)\n\t    trainer.fit(model, train_dataloaders=train_loader, val_dataloaders=validation_loader)\n\t    model.save_huggingface_model(args.output_dir)\n\t    tokenizer.save_pretrained(args.output_dir)\n\tdef _add_arguments(parser):\n\t    \"\"\"Add train arguments to a parser in place.\"\"\"\n\t    parser.add_argument('-t', '--train-dataset', required=True,\n\t                        help='path to the training dataset. It should be a JSONL file with fields: query, positive, negatives')\n\t    parser.add_argument('-v', '--validation-dataset',\n\t                        help='path to the validation dataset. If not provided, 5 percent of the training data will be used as validation data.\\\n", "                        (default: None)')\n\t    parser.add_argument('-o', '--output-dir', default='artifacts/scorer',\n\t                        help='output model path. the model will be saved in the format of huggingface models,\\\n\t                        which can be uploaded to the huggingface hub and shared with the community.\\\n\t                        (default: artifacts/scorer)')\n\t    parser.add_argument('-m', '--model-name-or-path', default='intfloat/e5-small',\n\t                        help='pretrained model name or path. It is fully compatible with HuggingFace models.\\\n\t                        You can specify either a local path where a model is saved, or an encoder model identifier\\\n\t                        from huggingface hub. (default: intfloat/e5-small)')\n\t    parser.add_argument('-lr', '--learning-rate', default=5e-5, type=float, help='learning rate (default: 5e-5)')\n", "    parser.add_argument('--batch-size', default=16, type=int, help='batch size (default: 16)')\n\t    parser.add_argument('--loss', default='cross_entropy', choices=['cross_entropy', 'contrastive'],\n\t                        help='loss function, can be cross_entropy or contrastive (default: cross_entropy)')\n\t    parser.add_argument('--max-epochs', default=10, type=int, help='max epochs (default: 10)')\n\t    parser.add_argument('--accelerator', default='gpu', help='accelerator, can be cpu, gpu, or tpu (default: gpu)')\n\t    parser.add_argument('--fast-dev-run', action='store_true',\n\t                        help='fast dev run for debugging, only use 1 batch for training and validation')\n\t    parser.add_argument('--wandb-project', default='retrieval', help='wandb project name (default: retrieval)')\n\t    parser.add_argument('--wandb-group', default='contrastive', help='wandb group name (default: contrastive)')\n\t    parser.add_argument('--wandb-savedir', default='artifacts', help='wandb save directory (default: artifacts)')\n", "if __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    _add_arguments(parser)\n\t    args = parser.parse_args()\n\t    train(args)\n"]}
{"filename": "src/srtk/link.py", "chunked_list": ["\"\"\"Entity linking\n\tThis step links the entity mentions in the question to the entities in the Wikidata knowledge graph.\n\tIt inference on the REL endpoint.\n\t\"\"\"\n\timport argparse\n\tfrom pathlib import Path\n\timport srsly\n\tfrom tqdm import tqdm\n\tfrom .entity_linking import WikidataLinker, DBpediaLinker\n\tfrom .utils import socket_reachable\n", "def link(args):\n\t    \"\"\"Link the entities in the questions to the Wikidata knowledge graph\"\"\"\n\t    if not socket_reachable(args.el_endpoint):\n\t        raise RuntimeError(f\"Can't reach the endpoint {args.el_endpoint}\")\n\t    if args.knowledge_graph == 'wikidata':\n\t        linker = WikidataLinker(args.el_endpoint, args.wikimapper_db, service=args.service)\n\t    elif args.knowledge_graph == 'dbpedia':\n\t        linker = DBpediaLinker(args.el_endpoint)\n\t    else:\n\t        raise NotImplementedError(f\"Knowledge graph {args.knowledge_graph} not implemented\")\n", "    extra_kwargs = {}\n\t    if args.token:\n\t        extra_kwargs['token'] = args.token\n\t    with open(args.input, 'r', encoding='utf-8') as f:\n\t        total_lines = len(f.readlines())\n\t    questions = srsly.read_jsonl(args.input)\n\t    cnt_id_not_found = 0\n\t    cnt_id_found = 0\n\t    all_linked = []\n\t    for question in tqdm(questions, total=total_lines, desc=f\"Entity linking {args.input}\"):\n", "        linked = linker.annotate(question[args.ground_on], **extra_kwargs)\n\t        cnt_id_found += len(linked[\"question_entities\"])\n\t        if 'not_converted_entities' in linked:\n\t            cnt_id_not_found += len(linked['not_converted_entities'])\n\t        if 'id' in question:\n\t            linked['id'] = question['id']\n\t        all_linked.append(linked)\n\t    if cnt_id_not_found > 0:\n\t        print(f\"{cnt_id_not_found} / {cnt_id_found + cnt_id_not_found} grounded entities not converted to ids\")\n\t    # check whether the folder exists\n", "    folder_path = Path(args.output).parent\n\t    if not folder_path.exists():\n\t        folder_path.mkdir(parents=True)\n\t        print(f\"Folder {folder_path} created\")\n\t    Path(args.output).parent.mkdir(parents=True, exist_ok=True)\n\t    srsly.write_jsonl(args.output, all_linked)\n\t    print(f\"Entity linking result saved to {args.output}\")\n\tdef _add_arguments(parser):\n\t    \"\"\"Add entity linking arguments to the parser\"\"\"\n\t    parser.description = '''Entity linking on Wikidata.\n", "    The input is a jsonl file. The field of interest is specified by the argument --ground-on.\n\t    The output is a jsonl file, each line is a dict with keys: id, question_entities, spans, entity_names.\n\t    '''\n\t    parser.add_argument('-i', '--input', type=str, help='Input file path, in which the question is stored')\n\t    parser.add_argument('-o', '--output', type=str, help='Output file path, in which the entity linking result is stored')\n\t    parser.add_argument('-e', '--el-endpoint', type=str, default='http://127.0.0.1:1235', help='Entity linking endpoint \\\n\t                        (default: http://127.0.0.1:1235 <local REL endpoint>)')\n\t    parser.add_argument('-kg', '--knowledge-graph', type=str, default='wikidata', choices=['wikidata', 'dbpedia'],\n\t                        help='Knowledge graph to link to, only wikidata is supported now')\n\t    parser.add_argument('--wikimapper-db', type=str, default='resources/wikimapper/index_enwiki.db', help='Wikimapper database path')\n", "    parser.add_argument('--ground-on', type=str, default='question',\n\t                        help='The key to ground on, the corresponding text will be sent to the REL endpoint for entity linking')\n\t    parser.add_argument('--service', type=str, choices=['tagme', 'wat', 'rel', 'spotlight'],\n\t                        help='Entity linking service to use. Currently only tagme, wat, rel, spotlight are supported.')\n\t    parser.add_argument('--token', type=str, default=None, help='Token for the entity linking endpoint')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    _add_arguments(parser)\n\t    args = parser.parse_args()\n\t    link(args)\n"]}
{"filename": "src/srtk/__init__.py", "chunked_list": []}
{"filename": "src/srtk/utils.py", "chunked_list": ["import socket\n\tfrom urllib.parse import urlparse\n\tdef get_host_port(url):\n\t    \"\"\"Get the host and port from a URL\"\"\"\n\t    parsed_url = urlparse(url)\n\t    host = parsed_url.hostname\n\t    port = parsed_url.port\n\t    if port is None:\n\t        if parsed_url.scheme == 'http':\n\t            port = 80\n", "        elif parsed_url.scheme == 'https':\n\t            port = 443\n\t    return host, port\n\tdef socket_reachable(url):\n\t    \"\"\"Check if a socket is reachable\n\t    \"\"\"\n\t    host, port = get_host_port(url)\n\t    try:\n\t        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\t        s.settimeout(2) # set a timeout value for the socket\n", "        s.connect((host, port))\n\t        s.close()\n\t        return True\n\t    except Exception as err:\n\t        print(err)\n\t        return False\n"]}
{"filename": "src/srtk/visualize.py", "chunked_list": ["\"\"\"Visualize the graph (represented as a set of triplets) using pyvis.\n\tThe visualized subgraphs are html files.\n\t\"\"\"\n\timport os\n\timport argparse\n\timport json\n\tfrom pathlib import Path\n\timport srsly\n\tfrom pyvis.network import Network\n\tfrom tqdm import tqdm\n", "from bs4 import BeautifulSoup as Soup\n\tfrom .knowledge_graph import KnowledgeGraphBase, get_knowledge_graph\n\t__DESCRIPTION__ = \"\"\"Visualize the graph (represented as a set of triplets) using pyvis.\n\tIt expects the input to be a JSONL file, where each line contains fields id, triplets, \n\tquestion, answer, question_entities, answer_entities. Their meanings are as follows:\n\t- id: the id of the sample. the output will be named as [id].html\n\t- triplets (list[list[str]]): a list of triplets, where each triplet is a list of three strings: subject, relation, object\n\t- question (str): the question. it will be shown in backgraound\n\t- answer (str, optional): the answer. it will be shown in backgraound\n\t- question_entities (list[str], optional): a list of entity identifiers. they will be highlighted in blue.\n", "- answer_entities (list[str], optional): a list of entity identifiers. they will be highlighted in green.\n\t\"\"\"\n\tdef visualize_subgraph(sample, kg: KnowledgeGraphBase):\n\t    \"\"\"Visualize the subgraph. It returns an html string.\n\t    \"\"\"\n\t    net = Network(directed=True, font_color='#000000')\n\t    net.barnes_hut()\n\t    question_entities = sample['question_entities'] if 'question_entities' in sample else []\n\t    answer_entities = sample['answer_entities'] if 'answer_entities' in sample else []\n\t    # Add question entities even if they are not in the triplets\n", "    for entity in question_entities:\n\t        net.add_node(entity, label=kg.get_label(entity), color='#114B7A')\n\t    for triplet in sample['triplets']:\n\t        subject, relation, obj = triplet\n\t        subject_label = kg.get_label(subject)\n\t        subject_options = {'color':'#114B7A'} if subject in question_entities else {}\n\t        obj_label = kg.get_label(obj)\n\t        obj_options = {'color':'#1B5E20'} if obj in answer_entities else {}\n\t        relation_label = kg.get_label(relation)\n\t        net.add_node(subject, label=subject_label, **subject_options)\n", "        net.add_node(obj, label=obj_label, **obj_options)\n\t        net.add_edge(subject, obj, label=relation_label)\n\t    net_options = {\n\t        'shape': 'dot',\n\t        'font': {\n\t            'size': '1em',\n\t            'face': 'fontFace',\n\t            'strokeColor': '#fff',\n\t            'strokeWidth': 5\n\t        },\n", "        'size': '1.5em',\n\t    }\n\t    net.set_options(json.dumps(net_options))\n\t    return net.generate_html(notebook=False)\n\tdef add_text_to_html(html, text):\n\t    soup = Soup(html, 'html.parser')\n\t    style_tag = soup.new_tag('style')\n\t    style_tag.string = '''\n\t        .background-text {\n\t            position: absolute;\n", "            z-index: 1;\n\t            top: 0;\n\t            left: 0;\n\t            font-size: 2em;\n\t            color: #ccc;\n\t        }\n\t    '''\n\t    soup.head.append(style_tag)\n\t    p_tag = soup.new_tag('p', attrs={'class': 'background-text'}, style=\"white-space:pre-wrap\")\n\t    p_tag.string = text\n", "    soup.body.append(p_tag)\n\t    return soup.prettify()\n\tdef visualize(args):\n\t    \"\"\"Main entry for subgraph visualization.\n\t    Args:\n\t        args (Namespace): arguments for subgraph visualization.\n\t    \"\"\"\n\t    knowledge_graph = get_knowledge_graph(args.knowledge_graph, args.sparql_endpoint)\n\t    samples = srsly.read_jsonl(args.input)\n\t    total = sum(1 for _ in srsly.read_jsonl(args.input))\n", "    total = min(total, args.max_output)\n\t    if not os.path.exists(args.output_dir):\n\t        Path(args.output_dir).mkdir(parents=True, exist_ok=True)\n\t        print(f'Created output directory: {args.output_dir}')\n\t    for i, sample in enumerate(tqdm(samples, desc='Visualizing graphs', total=total)):\n\t        if i >= args.max_output:\n\t            break\n\t        html = visualize_subgraph(sample, knowledge_graph)\n\t        text_to_append = f\"Question: {sample['question']}\"\n\t        if 'answer' in sample:\n", "            text_to_append += f\"\\n    Answer: {sample['answer']}\"\n\t        html = add_text_to_html(html, text_to_append)\n\t        output_path = os.path.join(args.output_dir, sample['id'] + '.html')\n\t        with open(output_path, 'w', encoding='utf-8') as fout:\n\t            fout.write(html)\n\t    print(f'Visualized graphs outputted to {args.output_dir}.')\n\tdef _add_arguments(parser):\n\t    parser.description = __DESCRIPTION__\n\t    parser.add_argument('-i', '--input', required=True, help='The input subgraph file path.')\n\t    parser.add_argument('-o', '--output-dir', required=True, help='The output directory path.')\n", "    parser.add_argument('-e', '--sparql-endpoint', type=str, default='http://localhost:1234/api/endpoint/sparql',\n\t                        help='SPARQL endpoint for Wikidata or Freebase services. In this step, it is used to get the labels of entities.\\\n\t                        (Default: http://localhost:1234/api/endpoint/sparql)')\n\t    parser.add_argument('-kg', '--knowledge-graph', type=str, choices=('wikidata', 'freebase', 'dbpedia'), default='wikidata',\n\t                        help='The knowledge graph type to use. (Default: wikidata)')\n\t    parser.add_argument('--max-output', type=int, default=1000,\n\t                        help='The maximum number of graphs to output. This is useful for debugging. (Default: 1000)')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    _add_arguments(parser)\n", "    args = parser.parse_args()\n\t    visualize(args)\n"]}
{"filename": "src/srtk/preprocess.py", "chunked_list": ["\"\"\"This script creates the training data from the grounded questions.\n\tInputs should be a jsonl file, with each line representing a grounded question.\n\tThe format of each line should be like this example:\n\t.. code-block:: json\n\t    {\n\t        \"id\": \"sample-id\",\n\t        \"question\": \"Which universities did Barack Obama graduate from?\",\n\t        \"question_entities\": [\n\t            \"Q76\"\n\t        ],\n", "        \"answer_entities\": [\n\t            \"Q49122\",\n\t            \"Q1346110\",\n\t            \"Q4569677\"\n\t        ]\n\t    }\n\t\"\"\"\n\timport os\n\timport argparse\n\tfrom argparse import Namespace\n", "from pathlib import Path\n\tfrom .preprocessing.search_path import main as search_path\n\tfrom .preprocessing.score_path import main as score_path\n\tfrom .preprocessing.negative_sampling import main as negative_sampling\n\tdef preprocess(args):\n\t    output_path = args.output\n\t    # Create parent dir for output if not exists.\n\t    Path(os.path.dirname(output_path)).mkdir(parents=True, exist_ok=True)\n\t    if args.search_path:\n\t        intermediate_dir = args.intermediate_dir\n", "        if intermediate_dir is None:\n\t            intermediate_dir = os.path.dirname(output_path)\n\t        Path(intermediate_dir).mkdir(parents=True, exist_ok=True)\n\t        paths_file = os.path.join(intermediate_dir, 'paths.jsonl')\n\t        scores_file = os.path.join(intermediate_dir, 'scores.jsonl')\n\t        search_path_args = Namespace(sparql_endpoint=args.sparql_endpoint,\n\t                                    knowledge_graph=args.knowledge_graph,\n\t                                    ground_path=args.input,\n\t                                    output_path=paths_file,\n\t                                    remove_sample_without_path=True)\n", "        score_path_args = Namespace(sparql_endpoint=args.sparql_endpoint,\n\t                                    knowledge_graph=args.knowledge_graph,\n\t                                    paths_file=paths_file,\n\t                                    output_path=scores_file,\n\t                                    metric=args.metric,)\n\t        negative_sampling_args = Namespace(sparql_endpoint=args.sparql_endpoint,\n\t                                           knowledge_graph=args.knowledge_graph,\n\t                                           scored_path_file=scores_file,\n\t                                           num_negative=args.num_negative,\n\t                                           positive_threshold=args.positive_threshold,\n", "                                           output_path=output_path,)\n\t        search_path(search_path_args)\n\t        score_path(score_path_args)\n\t    else:\n\t        negative_sampling_args = Namespace(sparql_endpoint=args.sparql_endpoint,\n\t                                           knowledge_graph=args.knowledge_graph,\n\t                                           scored_path_file=args.input,\n\t                                           num_negative=args.num_negative,\n\t                                           positive_threshold=args.positive_threshold,\n\t                                           output_path=output_path,)\n", "    negative_sampling(negative_sampling_args)\n\tdef _add_arguments(parser):\n\t    \"\"\"Add preprocess arguments to a parser in place.\"\"\"\n\t    parser.description = 'Create the training data from the grounded questions.'\n\t    parser.add_argument('-i', '--input', type=str, required=True,\n\t                        help='The grounded questions file with question, question & answer entities')\n\t    parser.add_argument('-o', '--output', type=str, required=True,\n\t                        help='The output path where the final training data will be saved.')\n\t    parser.add_argument('--intermediate-dir', type=str, help=\"The directory to save intermediate files. If not specified, the intermediate \\\n\t                        files will be saved in the same directory as the output file, with the name paths.jsonl and scores.jsonl\")\n", "    parser.add_argument('-e', '--sparql-endpoint', type=str, required=True,\n\t                        help=\"SPARQL endpoint URL for either Wikidata or Freebase\\\n\t                        (e.g., 'http://localhost:1234/api/endpoint/sparql' for default local qEndpoint)\")\n\t    parser.add_argument('-kg', '--knowledge-graph', type=str, required=True, choices=('wikidata', 'freebase', 'dbpedia'),\n\t                        help='knowledge graph name, either wikidata or freebase')\n\t    parser.add_argument('--search-path', action='store_true',\n\t                        help='Whether to search paths between question and answer entities. If not specified, paths and scores fields\\\n\t                        must present in the input file. You **have to** specify this for weakly supervised learning. (default: False)')\n\t    parser.add_argument('--metric', choices=('jaccard', 'recall'), default='jaccard',\n\t                        help='The metric used to score the paths. recall will usually result in a lager size of training dataset.\\\n", "                        (default: jaccard))')\n\t    parser.add_argument('--num-negative', type=int, default=15,\n\t                        help='The number of negative relations to sample for each positive relation. (default: 15)')\n\t    parser.add_argument('--positive-threshold', type=float, default=0.5,\n\t                        help='The threshold to determine whether a path is positive or negative. If you want to use \\\n\t                        a larger training dataset, you can set this value to a smaller value. (default: 0.5)')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    _add_arguments(parser)\n\t    args = parser.parse_args()\n", "    preprocess(args)\n"]}
{"filename": "src/srtk/retrieve.py", "chunked_list": ["\"\"\"This script retrieves subgraphs from a knowledge graph according to a natural\n\tlanguage query (usually a question). This command can also be used to evaluate\n\ta trained retriever when the answer entities are known.\n\tThe expected fields of one sample are:\n\t- question: question text\n\t- question_entities: list of grounded question entities (ids)\n\tFor evaluation, the following field is also required:\n\t- answer_entities: list of grounded answer entities (ids)\n\t\"\"\"\n\timport argparse\n", "import heapq\n\timport os\n\timport pathlib\n\tfrom collections import namedtuple\n\tfrom typing import List, Any, Dict\n\timport srsly\n\timport torch\n\tfrom tqdm import tqdm\n\tfrom .knowledge_graph import KnowledgeGraphBase, get_knowledge_graph\n\tfrom .scorer import Scorer\n", "END_REL = 'END OF HOP'\n\t# Path collects the information at each traversal step\n\t# - prev_relations stores the relations that have been traversed\n\t# - score stores the score of the relation path\n\tPath = namedtuple('Path', ['prev_relations', 'score'], defaults=[(), 0])\n\tclass KnowledgeGraphTraverser:\n\t    '''KnowledgeGraphTraverser is a helper class that traverses a knowledge graph'''\n\t    def __init__(self, kg: KnowledgeGraphBase):\n\t        self.kg = kg\n\t    def retrive_subgraph(self, entity, path):\n", "        '''Retrive subgraph entities and triplets by traversing from an entity following\n\t        a relation path hop by hop.\n\t        Args:\n\t            entity (str): the identifier of the source node\n\t            path (list[str]): a list of relation identifiers\n\t        Returns:\n\t            entities: a list of entity identifiers\n\t            triplets: a list of triplets\n\t        '''\n\t        entities, triplets = set(), set()\n", "        tracked_entities = set((entity,))\n\t        for relation in path:\n\t            next_hops = set()\n\t            if relation == END_REL:\n\t                continue\n\t            for e in tracked_entities:\n\t                leaves = set(self.kg.deduce_leaves(e, (relation,)))\n\t                next_hops |= leaves\n\t                triplets |= {(e, relation, leaf) for leaf in leaves}\n\t            entities |= next_hops\n", "            tracked_entities = next_hops\n\t        return list(entities), list(triplets)\n\t    def deduce_leaves(self, entity, path):\n\t        \"\"\"Deduce leaves from an entity following a path hop by hop.\n\t        Args:\n\t            entity (str): the identifier of the source node\n\t            path (list[str]): a list of relation identifiers\n\t        Returns:\n\t            set[str]: a set of leave identifiers that are n-hop away from the source node,\n\t                where n is the length of the path\n", "        \"\"\"\n\t        leaves = set((entity,))\n\t        for relation in path:\n\t            if relation == END_REL:\n\t                continue\n\t            leaves = set().union(*(self.kg.deduce_leaves(leaf, (relation,)) for leaf in leaves))\n\t        return leaves\n\t    def deduce_leaf_relations(self, entity, path):\n\t        \"\"\"Deduce leaf relations from an entity following a path hop by hop.\n\t        Args:\n", "            entity (str): the identifier of the source node\n\t            path (list[str]): a list of relation identifiers\n\t        Returns:\n\t            tuple[str]: a tuple of relations that are n-hop away from the source node,\n\t                where n is the length of the path\n\t        \"\"\"\n\t        leaves = self.deduce_leaves(entity, path)\n\t        relations = set().union(*(self.kg.get_neighbor_relations(leaf) for leaf in leaves))\n\t        # Special filter relation for freebase\n\t        if self.kg.name == 'freebase':\n", "            relations = [r for r in relations if r.split('.')[0] not in ['kg', 'common']]\n\t        return tuple(relations)\n\t    def get_relation_label(self, identifier):\n\t        \"\"\"Get the relation label of an entity or a relation.\n\t        It serves as a proxy to the knowledge graph's get_label function. For freebase,\n\t        we directly use the identifier as the label. For others, we return the retrieved\n\t        label if it exists, otherwise return the identifier.\n\t        Args:\n\t            identifier (str): the identifier of an entity or a relation\n\t        Returns:\n", "            str: the label of the entity or the relation\n\t        \"\"\"\n\t        # For freebase, the relation identifier contains enough information\n\t        if self.kg.name == 'freebase' or self.kg.name == 'dbpedia':\n\t            return identifier\n\t        if identifier == END_REL:\n\t            return END_REL\n\t        label =  self.kg.get_label(identifier)\n\t        if label is None:\n\t            return identifier\n", "        return label\n\tclass Retriever:\n\t    '''Retriever retrieves subgraphs from a knowledge graph with a question and its\n\t    linked entities. The retrieval process takes the semantic information of the question\n\t    and the expanding path into consideration.\n\t    '''\n\t    def __init__(self, kg: KnowledgeGraphBase, scorer: Scorer, beam_width: int, max_depth: int):\n\t        self.kgh = KnowledgeGraphTraverser(kg)\n\t        self.scorer = scorer\n\t        self.beam_width = beam_width\n", "        self.max_depth = max_depth\n\t        self.num_entity_threshold = 1000\n\t    def retrieve_subgraph_triplets(self, sample: Dict[str, Any]):\n\t        \"\"\"Retrieve triplets as subgraphs from paths.\n\t        Args:\n\t            sample (dict): a sample from the dataset, which contains at least the following fields:\n\t                question: a string\n\t                question_entities: a list of entities\n\t        Returns:\n\t            list(tuple): a list of triplets\n", "        \"\"\"\n\t        question = sample['question']\n\t        triplets = []\n\t        for question_entity in sample['question_entities']:\n\t            path_score_list = self.beam_search_path(question, question_entity)\n\t            n_nodes = 0\n\t            for relations, _ in path_score_list:\n\t                partial_nodes, partial_triples = self.kgh.retrive_subgraph(question_entity, relations)\n\t                if len(partial_nodes) > self.num_entity_threshold:\n\t                    continue\n", "                n_nodes += len(partial_nodes)\n\t                triplets.extend(partial_triples)\n\t                if n_nodes > self.num_entity_threshold:\n\t                    break\n\t        triplets = list(set(triplets))\n\t        return triplets\n\t    def beam_search_path(self, question: str, question_entity: str):\n\t        '''This function reimplement RUC's paper's solution. In the search process, only the history\n\t        paths are recorded; each new relation is looked up via looking up the end relations from the\n\t        question entities following a history path.\n", "        Args:\n\t            question (str): a natural language question\n\t            question_entity (str): a grounded question entity\n\t        Returns:\n\t            list[Path]: path score list, a list of (path, score) tuples\n\t        '''\n\t        candidate_paths = [Path()]  # path and its score\n\t        result_paths = []\n\t        depth = 0\n\t        while candidate_paths and len(result_paths) < self.beam_width and depth < self.max_depth:\n", "            next_relations_batched = []\n\t            for path in candidate_paths:\n\t                prev_relations = path.prev_relations\n\t                next_relations = self.kgh.deduce_leaf_relations(question_entity, prev_relations)\n\t                next_relations = next_relations + (END_REL,)\n\t                next_relations_batched.append(next_relations)\n\t            tracked_paths = self.expand_and_score_paths(question, candidate_paths, next_relations_batched)\n\t            tracked_paths = heapq.nlargest(self.beam_width, tracked_paths, key=lambda x: x.score)\n\t            depth += 1\n\t            # Update candidate_paths\n", "            candidate_paths = []\n\t            for path in tracked_paths:\n\t                if  path.prev_relations and path.prev_relations[-1] == END_REL:\n\t                    result_paths.append(path)\n\t                else:\n\t                    candidate_paths.append(path)\n\t        # Merge not-yet-ended paths into the result paths \n\t        candidate_paths = [Path(prev_relations + (END_REL,), score) for prev_relations, score in candidate_paths]\n\t        result_paths = heapq.nlargest(self.beam_width, result_paths + candidate_paths, key=lambda x: x.score)\n\t        return result_paths\n", "    def expand_and_score_paths(self, question: str, paths: List[Path], relations_batched: List[List[str]]) -> List[Path]:\n\t        '''Expand the paths by one hop and score them by comparing the embedding similarity between\n\t        the query (question + prev_relations) and the next relation.\n\t        Args:\n\t            question (str)\n\t            paths (list[Path]): a list of current paths\n\t            relations_batched (list[list[str]]): a list of next relations for each path\n\t        Returns:\n\t            list[Path]: scored_paths, a list of newly expanded and scored paths\n\t        '''\n", "        scored_paths = []\n\t        score_matrix = []\n\t        for path, next_relations in zip(paths, relations_batched):\n\t            prev_relation_labels = tuple(self.kgh.get_relation_label(r) for r in path.prev_relations)\n\t            next_relation_labels = tuple(self.kgh.get_relation_label(r) for r in next_relations)\n\t            scores = self.scorer.batch_score(question, prev_relation_labels, next_relation_labels)\n\t            score_matrix.append(scores)\n\t        for i, (path, next_relations) in enumerate(zip(paths, relations_batched)):\n\t            for j, relation in enumerate(next_relations):\n\t                new_prev_relations = path.prev_relations + (relation,)\n", "                score = float(score_matrix[i][j]) + path.score\n\t                scored_paths.append(Path(new_prev_relations, score))\n\t        return scored_paths\n\tdef calculate_hit_and_miss(retrieved_path):\n\t    \"\"\"Calculate the recall of answer entities in retrieved triplets,\n\t    if answer_entities exists in each sample.\n\t    Args:\n\t        retrieved_path (str): path to the retrieved triplets\n\t    Returns:\n\t        tuple(int, int): number of samples that have at least one answer entity in retrieved triplets,\n", "            and number of samples that have no answer entity in retrieved triplets\n\t    \"\"\"\n\t    retrieval = srsly.read_jsonl(retrieved_path)\n\t    hit = 0\n\t    miss = 0\n\t    for sample in retrieval:\n\t        if 'answer_entities' not in sample:\n\t            continue\n\t        answers = sample['answer_entities']\n\t        entities = set().union(*((triplet[0], triplet[-1]) for triplet in sample['triplets']))\n", "        if any([entity in answers for entity in entities]):\n\t            hit += 1\n\t        else:\n\t            miss += 1\n\t    return hit, miss\n\tdef calculate_subgraph_size(retrieved_path):\n\t    \"\"\"Calculate the average number of triplets, entities and relations in retrieved subgraphs.\n\t    Args:\n\t        retrieved_path (str): path to the retrieved triplets\n\t    Returns:\n", "        tuple: average number of triplets, entities and relations in retrieved subgraphs\n\t    \"\"\"\n\t    retrieval = srsly.read_jsonl(retrieved_path)\n\t    n_triplets = []\n\t    n_entities = []\n\t    n_relations = []\n\t    for sample in retrieval:\n\t        entities = set().union(*((triplet[0], triplet[-1]) for triplet in sample['triplets']))\n\t        relations = set().union(*((triplet[1],) for triplet in sample['triplets']))\n\t        n_triplets.append(len(sample['triplets']))\n", "        n_entities.append(len(entities))\n\t        n_relations.append(len(relations))\n\t    avg_n_triplets = sum(n_triplets) / len(n_triplets) if len(n_triplets) > 0 else 0\n\t    avg_n_entities = sum(n_entities) / len(n_entities) if len(n_entities) > 0 else 0\n\t    avg_n_relations = sum(n_relations) / len(n_relations) if len(n_relations) > 0 else 0\n\t    return avg_n_triplets, avg_n_entities, avg_n_relations\n\tdef print_and_save_recall(retrieved_path):\n\t    \"\"\"Calculate and print the recall of answer entities in retrieved triplets,\n\t    If any answer from the answer entities is in the retrieved entities, the sample\n\t    counts as a hit.\n", "    \"\"\"\n\t    hit, miss = calculate_hit_and_miss(retrieved_path)\n\t    avg_triplets, avg_entities, avg_relations = calculate_subgraph_size(retrieved_path)\n\t    print(f\"Answer coverage rate: {hit / (hit + miss)} ({hit} / {hit + miss})\")\n\t    print(f\"Average number of triplets: {avg_triplets}, entities: {avg_entities}, relations: {avg_relations}\")\n\t    info = {}\n\t    if hit + miss != 0:\n\t        info = {\n\t            'hit': hit,\n\t            'miss': miss,\n", "            'recall': hit / (hit + miss)\n\t        }\n\t    # path/to/subgraph.jsonl -> path/to/subgraph.metric\n\t    recall_path = os.path.splitext(retrieved_path)[0] + '.metric'\n\t    srsly.write_json(recall_path, info)\n\tdef retrieve(args):\n\t    \"\"\"Retrieve subgraphs from a knowledge graph.\n\t    Args:\n\t        args (Namespace): arguments for subgraph retrieval\n\t    \"\"\"\n", "    pathlib.Path(os.path.dirname(args.output)).mkdir(parents=True, exist_ok=True)\n\t    kg = get_knowledge_graph(args.knowledge_graph, args.sparql_endpoint,\n\t                             prepend_prefixes=not args.omit_prefixes,\n\t                             exclude_qualifiers=not args.include_qualifiers)\n\t    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\t    scorer = Scorer(args.scorer_model_path, device)\n\t    retriever = Retriever(kg, scorer, args.beam_width, args.max_depth)\n\t    samples = list(srsly.read_jsonl(args.input))\n\t    total = sum(1 for _ in srsly.read_jsonl(args.input))\n\t    for sample in tqdm(samples, desc='Retrieving subgraphs', total=total):\n", "        triplets = retriever.retrieve_subgraph_triplets(sample)\n\t        sample['triplets'] = triplets\n\t    srsly.write_jsonl(args.output, samples)\n\t    print(f'Retrieved subgraphs saved to to {args.output}')\n\t    if args.evaluate:\n\t        print_and_save_recall(args.output)\n\tdef _add_arguments(parser):\n\t    \"\"\"Add retrieve arguments to the parser in place.\"\"\"\n\t    parser.description = '''Retrieve subgraphs with a trained model on a dataset that entities are linked.\n\t    This command can also be used to evaluate a trained retriever when the answer entities are known.\n", "    Provide a JSON file as input, where each JSON object must contain at least the 'question' and 'question_entities' fields.\n\t    When ``--evaluate`` is set, the input JSON file must also contain the 'answer_entities' field.\n\t    The output JSONL file will include an added 'triplets' field, based on the input JSONL file. This field consists of a list of triplets,\n\t    with each triplet representing a (head, relation, tail) tuple.\n\t    When ``--evaluate`` is set, a metric file will also be saved to the same directory as the output JSONL file.\n\t    '''\n\t    parser.add_argument('-i', '--input', type=str, required=True, help='path to input jsonl file. it should contain at least \\\n\t                        ``question`` and ``question_entities`` fields.')\n\t    parser.add_argument('-o', '--output', type=str, required=True, help='output file path for storing retrieved triplets.')\n\t    parser.add_argument('-e', '--sparql-endpoint', type=str, help='SPARQL endpoint for Wikidata or Freebase services.')\n", "    parser.add_argument('-kg', '--knowledge-graph', type=str, required=True, choices=('freebase', 'wikidata', 'dbpedia'),\n\t                        help='choose the knowledge graph: currently supports ``freebase``, ``wikidata`` and ``dbpedia``.')\n\t    parser.add_argument('-m', '--scorer-model-path', type=str, required=True, help='Path to the scorer model, containing \\\n\t                        both the saved model and its tokenizer in the Huggingface models format.\\\n\t                        Such a model is saved automatically when using the ``srtk train`` command.\\\n\t                        Alternatively, provide a pre-trained model name from the Hugging Face model hub.\\\n\t                        In practice it supports any Huggingface transformers encoder model, though models that do not use [CLS] \\\n\t                        tokens may require modifications on similarity function.')\n\t    parser.add_argument('--beam-width', type=int, default=10, help='beam width for beam search (default: 10).')\n\t    parser.add_argument('--max-depth', type=int, default=2, help='maximum depth for beam search (default: 2).')\n", "    parser.add_argument('--evaluate', action='store_true', help='Evaluate the retriever model. When the answer \\\n\t                        entities are known, the recall can be evluated as the number of samples that any of the \\\n\t                        answer entities are retrieved in the subgraph by the number of all samples. This equires \\\n\t                        `answer_entities` field in the input jsonl.')\n\t    parser.add_argument('--include-qualifiers', action='store_true', help='Include qualifiers from the retrieved triplets. \\\n\t                        Qualifiers are informations represented in non-entity form, like date, count etc.\\\n\t                        This is only relevant for Wikidata.')\n\t    parser.add_argument('--omit-prefixes', action='store_true', help='Whether to omit prefixes when passing SPARQLs \\\n\t                        to the endpoints. This can potentially save some bandwidth, but may cause errors when the \\\n\t                        prefixes are not defined in the endpoint.')\n", "if __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    _add_arguments(parser)\n\t    args = parser.parse_args()\n\t    if not args.sparql_endpoint:\n\t        if args.knowledge_graph == 'freebase':\n\t            args.sparql_endpoint = 'http://localhost:3001/sparql'\n\t        elif args.knowledge_graph == 'wikidata':\n\t            args.sparql_endpoint = 'http://localhost:1234/api/endpoint/sparql'\n\t        else:\n", "            args.sparql_endpoint = 'https://dbpedia.org/sparql'\n\t        print(f'Using default sparql endpoint for {args.knowledge_graph}: {args.sparql_endpoint}')\n\t    retrieve(args)\n"]}
{"filename": "src/srtk/cli.py", "chunked_list": ["\"\"\"Command-line interface for SRTK.\"\"\"\n\timport argparse\n\tfrom .link import _add_arguments as add_link_arguments\n\tfrom .link import link\n\tfrom .preprocess import _add_arguments as add_preprocess_arguments\n\tfrom .preprocess import preprocess\n\tfrom .retrieve import _add_arguments as add_retrieve_arguments\n\tfrom .retrieve import retrieve\n\tfrom .train import _add_arguments as add_train_arguments\n\tfrom .train import train\n", "from .visualize import _add_arguments as add_visualize_arguments\n\tfrom .visualize import visualize\n\tdef main():\n\t    \"\"\"Main entry to the command line interface.\n\t    \"\"\"\n\t    parser = argparse.ArgumentParser(description='SRTK: A toolkit for smantic-relevant subgraph retrieval')\n\t    subparsers = parser.add_subparsers(help='sub-command help')\n\t    parser_link = subparsers.add_parser('link', help='link entities to a knowledge graph')\n\t    add_link_arguments(parser_link)\n\t    parser_link.set_defaults(func=link)\n", "    parser_preprocess = subparsers.add_parser('preprocess', help='preprocess the data')\n\t    add_preprocess_arguments(parser_preprocess)\n\t    parser_preprocess.set_defaults(func=preprocess)\n\t    parser_train = subparsers.add_parser('train', help='train a subgraph retriever')\n\t    add_train_arguments(parser_train)\n\t    parser_train.set_defaults(func=train)\n\t    parser_retrieve = subparsers.add_parser('retrieve', help='retrieve a subgraph with a natural query')\n\t    add_retrieve_arguments(parser_retrieve)\n\t    parser_retrieve.set_defaults(func=retrieve)\n\t    parser_visualize = subparsers.add_parser('visualize', help='visualize the retrieved subgraph')\n", "    add_visualize_arguments(parser_visualize)\n\t    parser_visualize.set_defaults(func=visualize)\n\t    args = parser.parse_args()\n\t    if hasattr(args, 'func'):\n\t        args.func(args)\n\t    else:\n\t        parser.print_help()\n\tif __name__ == '__main__':\n\t    main()\n"]}
{"filename": "src/srtk/preprocessing/merge_ground.py", "chunked_list": ["\"\"\"2. This script merges the grounded data into one training data.\n\te.g.\n\tpython preprocess/merge_ground.py  --output-path data/preprocess/merged-ground.jsonl --ground-files\\\n\t    data/preprocess/mintaka-ground.jsonl data/preprocess/mkqa-ground.jsonl\n\t\"\"\"\n\timport argparse\n\timport srsly\n\tdef main(args):\n\t    merged_samples = []\n\t    for ground_file in args.ground_files:\n", "        samples = srsly.read_jsonl(ground_file)\n\t        merged_samples.extend(samples)\n\t    srsly.write_jsonl(args.output_path, merged_samples)\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('--output-path', type=str, required=True)\n\t    parser.add_argument('--ground-files', nargs='+', required=True)\n\t    args = parser.parse_args()\n\t    main(args)\n"]}
{"filename": "src/srtk/preprocessing/negative_sampling.py", "chunked_list": ["\"\"\"5. Negative Sampling\n\tRegarding negative sampling method, the author states in the paper:\n\t> We replace the observed relation at each time step with other sampled relations as the\n\tnegative instances to optimize the probability of the observed ones.\n\te.g.\n\tpython preprocess/negative_sampling.py \\\n\t    --scored-path-file data/preprocess/paths_scored.jsonl \\\n\t    --output-file data/preprocess/train_.jsonl\\\n\t    --positive-threshold 0.3\n\t\"\"\"\n", "import os\n\timport sys\n\timport argparse\n\timport random\n\tfrom collections import defaultdict\n\tfrom functools import lru_cache\n\timport srsly\n\tfrom tqdm import tqdm\n\tsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', )))\n\tfrom knowledge_graph import KnowledgeGraphBase, get_knowledge_graph\n", "END_REL = \"END OF HOP\"\n\tdef sample_negative_relations(soruce_entities, prev_path, positive_connections,\n\t                              num_negative, kg: KnowledgeGraphBase):\n\t    \"\"\"A helper function to sample negative relations.\n\t    Args:\n\t        soruce_entities (list[str]): list of source entities\n\t        prev_path (list[str]): previous path / relations\n\t        positive_connections (dict): a dictionary of positive connections\n\t        num_negative (int): number of negative relations to sample\n\t        kg (KnowledgeGraphBase): a knoledge graph instance\n", "    Returns:\n\t        list[str]: list of negative relations\n\t    \"\"\"\n\t    negative_relations = set()\n\t    for src in soruce_entities:\n\t        # get all relations connected to current tracked entities (question or intermediate entities)\n\t        negative_relations |= set(kg.get_neighbor_relations(src, limit=50))\n\t        if len(negative_relations) > 100:  # yet another magic number :(\n\t            break\n\t    negative_relations = negative_relations - positive_connections[tuple(prev_path)]\n", "    if len(negative_relations) == 0:\n\t        return []\n\t    negative_relations = random.choices(list(negative_relations), k=num_negative)\n\t    return negative_relations\n\tdef is_candidate_space_too_large(path, question_entities, kg: KnowledgeGraphBase, candidate_depth_multiplier=5):\n\t    \"\"\"Check whether the number of the candidate entities along the path is too large.\n\t    Args:\n\t        path (list[str]): path from source entity to destination entity\n\t        question_entities (list[str]): list of question entities\n\t        kg (KnowledgeGraphBase): a knowledge graph instance\n", "        candidate_depth_multiplier (int, optional): a multiplier to control the number of candidate entities\n\t            at each depth. Defaults to 10.\n\t    \"\"\"\n\t    flag_too_large = False\n\t    for i in range(1, len(path)):\n\t        prev_path = tuple(path[:i])\n\t        # The further the path is from the question, the greater the search space becomes.\n\t        limit = candidate_depth_multiplier ** i\n\t        candidate_entities = set()\n\t        for src in question_entities:\n", "            candidate_entities |= set(kg.deduce_leaves(src, prev_path, limit=limit))\n\t            # Stop early if the number of candidate entities is already very large\n\t            if len(candidate_entities) > limit:\n\t                break\n\t        # Check the entity space at each depth, if it is too large at any depth, we flag the path as too large.\n\t        if len(candidate_entities) > limit:\n\t            flag_too_large = True\n\t            break\n\t    return flag_too_large\n\tdef sample_records_from_path(path, question, question_entities, positive_connections,\n", "                             kg: KnowledgeGraphBase, num_negative):\n\t    \"\"\"Sample training records from a path.\n\t    Returns:\n\t        list[dict]: list of training records, each record has the following fields:\n\t            - question (str): the question\n\t            - prev_path (list): previous relations up to a relation (positive_relation) in the path\n\t            - positive_relation (str): the next relation of the prev_path is regarded as the positive relation\n\t            - negative_relations (list): a list of negative relations, the number is specified by num_negative\n\t    \"\"\"\n\t    # My interpretation: If the number of candidate entities is too large, we simply discard this path.\n", "    # But isn't it weird? The author checks the number of connected entities to the question entities\n\t    # with each relation along the path, and simply discard those paths with too many connected entities.\n\t    if is_candidate_space_too_large(path, question_entities, kg, candidate_depth_multiplier=5):\n\t        return []\n\t    path = path + [END_REL]\n\t    records = []\n\t    tracked_entities = question_entities\n\t    for i, current_relation in enumerate(path):\n\t        prev_path = path[:i]\n\t        negative_relations = sample_negative_relations(tracked_entities, prev_path, positive_connections,\n", "                                                       num_negative, kg)\n\t        if len(negative_relations) == 0:\n\t            continue\n\t        record = {\n\t            'question': question,\n\t            'prev_path': prev_path,\n\t            'positive_relation': current_relation,\n\t            'negative_relations': negative_relations\n\t        }\n\t        records.append(record)\n", "        if current_relation != END_REL:\n\t            # update tracked entities\n\t            tracked_entities = kg.deduce_leaves_from_multiple_srcs(tracked_entities, [current_relation], limit=100)\n\t    return records\n\tdef get_positive_connections_along_paths(paths):\n\t    \"\"\"Collect positive connections along paths. A positive connection is defined as\n\t    {prev_relations: next_relation}. END_REL is added to the end of each path.\n\t    Returns:\n\t        dict: a dictionary of positive connections\n\t    \"\"\"\n", "    positive_connections = defaultdict(set)\n\t    for path in paths:\n\t        path = path + [END_REL]\n\t        for i, rel in enumerate(path):\n\t            positive_connections[tuple(path[:i])].add(rel)\n\t    return positive_connections\n\tdef convert_records_relation_id_to_lable(records, kg):\n\t    \"\"\"Convert relation ids to relation labels in each record.\n\t    \"\"\"\n\t    processed_records = []\n", "    @lru_cache\n\t    def get_label(rel):\n\t        if kg.name == 'dbpedia' or kg.name == 'freebase':\n\t            return rel\n\t        if rel == END_REL:\n\t            return END_REL\n\t        return kg.get_relation_label(rel) or rel\n\t    for record in tqdm(records, desc='Converting relation ids to labels'):\n\t        record['prev_path'] = [get_label(rel) for rel in record['prev_path']]\n\t        record['positive_relation'] = get_label(record['positive_relation'])\n", "        record['negative_relations'] = [get_label(rel) for rel in record['negative_relations']]\n\t        processed_records.append(record)\n\t    return processed_records\n\tdef create_jsonl_dataset(records):\n\t    \"\"\"It combines the question and prev_path to query. Each train sample is a dict with the following fields:\n\t    - query (str): question + prev_path\n\t    - positive (str): the next relation of the prev_path is regarded as the positive relation\n\t    - negatives (list): a list of negative relations\n\t    Args:\n\t        records (list[dict]): list of records\n", "    Returns:\n\t        list[dict]: list of train samples\n\t    \"\"\"\n\t    samples = []\n\t    for record in records:\n\t        sample = {\n\t            'query': record['question'] + ' [SEP] ' + ' # '.join(record['prev_path']),\n\t            'positive': record['positive_relation'],\n\t            'negatives': record['negative_relations']\n\t        }\n", "        samples.append(sample)\n\t    return samples\n\tdef main(args):\n\t    kg = get_knowledge_graph(args.knowledge_graph, args.sparql_endpoint)\n\t    positive_threshold = args.positive_threshold\n\t    # Each sample has the following fields:\n\t    # - id: sample id\n\t    # - question: question text\n\t    # - question_entities: list of question entities (ids)\n\t    # - answer_entities: list of answer entities (ids)\n", "    # - question: question text\n\t    # - paths: list of paths\n\t    # - path_scores: list of path scores\n\t    samples = srsly.read_jsonl(args.scored_path_file)\n\t    total = sum(1 for _ in srsly.read_jsonl(args.scored_path_file))\n\t    train_records = []\n\t    for sample in tqdm(samples, total=total, desc='Negative sampling'):\n\t        paths = sample['paths']\n\t        path_scores = sample['path_scores']\n\t        question = sample['question']\n", "        question_entities = sample['question_entities']\n\t        # Filter out paths with low scores.\n\t        paths = [path for path, score in zip(paths, path_scores) if score >= positive_threshold]\n\t        path_scores = [score for score in path_scores if score >= positive_threshold]\n\t        if len(paths) != len(path_scores):\n\t            raise ValueError(f'The number of paths and path scores are not equal. {len(paths)} != {len(path_scores)}')\n\t        # A dictionary of {prev_rels: {next_rel, next_rel, ...}, ...},\n\t        # where prev_rels is a tuple of previous relations.\n\t        positive_connections = get_positive_connections_along_paths(paths)\n\t        for path in paths:\n", "            train_records.extend(sample_records_from_path(path, question, question_entities,\n\t                                                          positive_connections, kg, args.num_negative))\n\t    print(f\"Number of training records: {len(train_records)}\")\n\t    train_records = convert_records_relation_id_to_lable(train_records, kg)\n\t    train_records = create_jsonl_dataset(train_records)\n\t    srsly.write_jsonl(args.output_path, train_records)\n\t    print(f\"Training samples are saved to {args.output_path}\")\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('-e', '--sparql-endpoint', default='http://localhost:1234/api/endpoint/sparql',\n", "                        help='knowledge graph endpoint (default: http://localhost:1234/api/endpoint/sparql)')\n\t    parser.add_argument('-kg', '--knowledge-graph', default='wikidata', choices=['wikidata', 'freebase', 'dbpedia'],\n\t                        help='knowledge graph name')\n\t    parser.add_argument('--scored-path-file', help='The file containing scored paths')\n\t    parser.add_argument('--output-path', help='The path to the output file')\n\t    parser.add_argument('--positive-threshold', type=float, default=0.5, help='The threshold to determine whether a path is positive or negative')\n\t    parser.add_argument('--num-negative', type=int, default=15, help='The number of negative relations to sample for each positive relation')\n\t    args = parser.parse_args()\n\t    main(args)\n"]}
{"filename": "src/srtk/preprocessing/score_path.py", "chunked_list": ["\"\"\"4. Score path\n\tThe score of a relation path is defined as the HIT rate of the prediction\n\twith the ground truth entities. The *prediction* refers to the search results\n\tfrom the question entities following the relation path.\n\tPersonal notes:\n\tWhy this is necessary? Isn't the relation path already the path from the question\n\tentities to the ground truth entities?\n\tIn my understanding, this is similar to TF-IDF, the path is more precise if the results is\n\ta smaller set of entities but have a higher intersection with the ground truth entities.\n\te.g.\n", "python preprocess/score_path.py --paths-file data/preprocess/paths.jsonl --output-path data/preprocess/paths_scored.jsonl\n\t\"\"\"\n\timport os\n\timport sys\n\timport argparse\n\timport srsly\n\tfrom tqdm import tqdm\n\tsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', )))\n\tfrom knowledge_graph import KnowledgeGraphBase, get_knowledge_graph\n\tdef score_path(kg: KnowledgeGraphBase, src, path, answers, metric='jaccard'):\n", "    \"\"\"Calculate the HIT score of a given path.\n\t    Args:\n\t        kg (KnowledgeGraphBase): knowledge graph instance\n\t        src (str): the source entity\n\t        path (list): the path\n\t        answers (list): the ground truth entities\n\t        metric (str): how the paths are scored. 'jaccard' or 'recall'\n\t            Default: 'jaccard', per the original implementation\n\t    \"\"\"\n\t    if metric not in ('jaccard', 'recall'):\n", "        raise ValueError(f'Unknown metric: {metric}')\n\t    leaves = kg.deduce_leaves(src, path)\n\t    leaves = set(leaves)\n\t    answers = set(answers)\n\t    hit = leaves.intersection(answers)\n\t    if not leaves:\n\t        # In the original implementation, they return 1 if the leaves is empty\n\t        # I think it's more meaningful to set it to 0, as this path leads to no results\n\t        return 0\n\t    if metric == 'jaccard':\n", "        score = len(hit) / len(leaves)\n\t    else: # metric == 'recall':\n\t        score = len(hit) / len(answers)\n\t    return score\n\tdef main(args):\n\t    kg = get_knowledge_graph(args.knowledge_graph_type, args.sparql_endpoint)\n\t    samples = srsly.read_jsonl(args.paths_file)\n\t    total_lines = sum(1 for _ in srsly.read_jsonl(args.paths_file))\n\t    processed_samples = []  # adds path_scores to each sample\n\t    # Each sample is a dict with the following fields:\n", "    # - id: sample id\n\t    # - question: question text\n\t    # - question_entities: list of question entities\n\t    # - answer_entities: list of answer entities\n\t    # - paths: list of paths\n\t    for sample in tqdm(samples, total=total_lines, desc='Scoring paths'):\n\t        question_entities = sample['question_entities']\n\t        answer_entities = sample['answer_entities']\n\t        paths = sample['paths']\n\t        path_scores = []\n", "        for path in paths:\n\t            # path score is the max score of all possible source entities following the path\n\t            # Personal note: this is weird, why don't you start from the question entity where the\n\t            # path was originally found?\n\t            path = tuple(path)  # this makes it hashable\n\t            score = max(score_path(kg, src, path, answer_entities, metric=args.metric) for src in question_entities)\n\t            path_scores.append(score)\n\t        sample['path_scores'] = path_scores\n\t        processed_samples.append(sample)\n\t    srsly.write_jsonl(args.output_path, processed_samples)\n", "    print(f'Scored paths saved to {args.output_path}')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('-e', '--sparql-endpoint', default='http://localhost:1234/api/endpoint/sparql', help='knowledge graph endpoint')\n\t    parser.add_argument('-kg', '--knowledge-graph', default='wikidata', choices=('wikidata', 'freebase', 'dbpedia'),\n\t                        help='knowledge graph name')\n\t    parser.add_argument('--paths-file', help='the file where the paths are stored')\n\t    parser.add_argument('--output-path', help='the file where the scores are stored')\n\t    parser.add_argument('--metric', default='jaccard', choices=('jaccard', 'recall'), help='the metric used to score the paths')\n\t    args = parser.parse_args()\n", "    main(args)\n"]}
{"filename": "src/srtk/preprocessing/__init__.py", "chunked_list": []}
{"filename": "src/srtk/preprocessing/search_path.py", "chunked_list": ["\"\"\"3. Search Path\n\tThis corresponds to search_to_get_path.py in the RUC's code.\n\tIt enumerates all paths from the question entities to answer entities.\n\tpython preprocess/search_path.py --ground-path data/preprocess/merged-ground.jsonl --output-path data/preprocess/paths.jsonl --remove-sample-without-path\n\t\"\"\"\n\timport sys\n\timport os\n\timport argparse\n\timport srsly\n\tfrom tqdm import tqdm\n", "sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', )))\n\tfrom knowledge_graph import KnowledgeGraphBase, get_knowledge_graph\n\tdef generate_paths(src_entities, dst_entities, kg: KnowledgeGraphBase, max_path=50):\n\t    \"\"\"Generate paths from question entities to answer entities.\n\t    \"\"\"\n\t    paths = []\n\t    for src in src_entities:\n\t        for dst in dst_entities:\n\t            if len(paths) >= max_path:\n\t                break\n", "            one_hop_paths = kg.search_one_hop_relations(src, dst)\n\t            paths.extend(one_hop_paths)\n\t            # If there are alreay one-hop paths between the two entities, \n\t            # we don't need to look further.\n\t            if len(one_hop_paths) == 0:\n\t                paths.extend(kg.search_two_hop_relations(src, dst))\n\t    paths = [tuple(path) for path in paths]\n\t    paths = list(set(paths))\n\t    return paths[:max_path]\n\tdef has_type_relation(path):\n", "    \"\"\"A utility function to check whether the path contain certain relations.\"\"\"\n\t    for rel in path:\n\t        if rel in ('type.object.type', 'type.type.instance'):\n\t            return False\n\t    return True\n\tdef main(args):\n\t    # Each ground sample has the following fields:\n\t    # - id: sample id\n\t    # - question: question text\n\t    # - question_entities: list of question entities\n", "    # - answer_entities: list of answer entities\n\t    ground_samples = srsly.read_jsonl(args.ground_path)\n\t    total_samples = sum(1 for _ in srsly.read_jsonl(args.ground_path))\n\t    kg = get_knowledge_graph(args.knowledge_graph, args.sparql_endpoint)\n\t    processed_samples = []\n\t    skipped = 0\n\t    for sample in tqdm(ground_samples, total=total_samples, desc='Searching paths'):\n\t        question_entities = sample['question_entities']\n\t        answer_entities = sample['answer_entities']\n\t        try:\n", "            paths = generate_paths(question_entities, answer_entities, kg)\n\t        except Exception as e:\n\t            skipped += 1\n\t            print(e)\n\t            continue\n\t        if args.remove_sample_without_path and not paths:\n\t            skipped += 1\n\t            continue\n\t        # Special filter for Freebase\n\t        if args.knowledge_graph == 'freebase':\n", "            paths = list(filter(has_type_relation, paths))\n\t        sample['paths'] = paths\n\t        processed_samples.append(sample)\n\t    print(f'Processed {len(processed_samples)} samples; skipped {skipped} samples without any paths between question entities and answer entities; total {total_samples} samples')\n\t    srsly.write_jsonl(args.output_path, processed_samples)\n\t    print(f'Retrieved paths saved to {args.output_path}')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('--sparql-endpoint', default='http://localhost:1234/api/endpoint/sparql', help='knowledge graph SPARQL endpoint')\n\t    parser.add_argument('--knowledge-graph', type=str, default='wikidata', choices=('wikidata', 'freebase', 'dbpedia'), help='knowledge graph name (default: wikidata)')\n", "    parser.add_argument('--ground-path', type=str, required=True, help='grounded file where the question and answer entities are stored')\n\t    parser.add_argument('--output-path', type=str, required=True, help='path file where several paths for each sample stored')\n\t    parser.add_argument('--remove-sample-without-path', action='store_true', help='remove samples without paths')\n\t    args = parser.parse_args()\n\t    main(args)\n"]}
{"filename": "src/srtk/preprocessing/load_dataset.py", "chunked_list": ["\"\"\"1. Load the dataset\n\tThis scripts provides an example of how to prepare the dataset. It filters the grounded samples,\n\tremoving those without any answer or question entity.\n\tThe example input contains the following fields:\n\t- id: the sample id\n\t- sent: the question\n\t- qc: the question entities\n\t- ac: the answer entities\n\tExample usage:\n\t- For Mintaka dataset, those without any answer entity are removed.\n", "$ python preprocess/load_dataset.py --dataset mintaka --ground-path data/preprocess/mintaka-ground-raw.jsonl --output-path data/preprocess/mintaka-ground.jsonl\n\tTrain + Validation + Test: Processed 12188 samples, skipped 7812 samples, total 20000 samples\n\t- For MKQA dataset, those without any question entity are removed.\n\t$ python preprocess/load_dataset.py --dataset mkqa --ground-path data/preprocess/mkqa-ground-raw.jsonl --output-path data/preprocess/mkqa-ground.jsonl\n\tProcessed 2112 samples, skipped 7888 samples, total 10000 samples\n\t\"\"\"\n\timport argparse\n\tfrom pathlib import Path\n\timport srsly\n\tfrom tqdm import tqdm\n", "def main(args):\n\t    samples= srsly.read_jsonl(args.ground_path)\n\t    total_lines = sum(1 for _ in srsly.read_jsonl(args.ground_path))\n\t    skipped = 0\n\t    processed_samples = []\n\t    for sample in tqdm(samples, total=total_lines):\n\t        if len(sample['qc']) == 0 or len(sample['ac']) == 0 or None in sample['ac']:\n\t            skipped += 1\n\t            continue\n\t        processed_sample = {\n", "            'id': args.dataset + '_' + str(sample['id']),\n\t            'question': sample['sent'],\n\t            'question_entities': sample['qc'],\n\t            'answer_entities': sample['ac'],\n\t        }\n\t        processed_samples.append(processed_sample)\n\t    output_path = Path(args.output_path)\n\t    if not output_path.parent.exists():\n\t        output_path.parent.mkdir(parents=True)\n\t    srsly.write_jsonl(output_path, processed_samples)\n", "    print(f'Processed {len(processed_samples)} samples, skipped {skipped} samples, total {total_lines} samples')\n\t    print(f'Output saved to {output_path}')\n\tif __name__ == '__main__':\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument('--dataset', type=str, default='', help='dataset name, which will be prepend to sample ids')\n\t    parser.add_argument('--ground-path', type=str, required=True)\n\t    parser.add_argument('--output-path', type=str, required=True)\n\t    args = parser.parse_args()\n\t    main(args)\n"]}
{"filename": "src/srtk/entity_linking/linker_base.py", "chunked_list": ["from abc import abstractmethod\n\tclass LinkerBase:\n\t    \"\"\"Base class for entity linking\"\"\"\n\t    @abstractmethod\n\t    def annotate(self, text: str, **kwargs):\n\t        \"\"\"Annotate a text with the entities in the knowledge graph\n\t        The returned dictionary should at least have the following fields:\n\t        - question: The input text\n\t        - question_entities: The entity ids of the entities in the text\n\t        Args:\n", "            text (str): The text to annotate\n\t            kwargs: Extra arguments\n\t        Returns:\n\t            dictionary: The annotated text with linked entities\n\t        \"\"\"\n"]}
{"filename": "src/srtk/entity_linking/freebase.py", "chunked_list": []}
{"filename": "src/srtk/entity_linking/dbpedia.py", "chunked_list": ["\"\"\"\n\tLink entitiy mentions to DBpedia entities with the DBpedia Spotlight endpoint.\n\tKnow more about DBpedia Spotlight at https://www.dbpedia-spotlight.org/.\n\t\"\"\"\n\timport requests\n\tfrom .linker_base import LinkerBase\n\tclass DBpediaLinker(LinkerBase):\n\t    \"\"\"Link entitiy mentions to DBpedia entities with the DBpedia Spotlight endpoint\"\"\"\n\t    def __init__(self, endpoint):\n\t        \"\"\"Initialize the linker\n", "        Args:\n\t            endpoint (str): The endpoint of the DBpedia Spotlight service\n\t                e.g. https://api.dbpedia-spotlight.org/en/annotate\n\t        \"\"\"\n\t        self.endpoint = endpoint\n\t    def annotate(self, text, **kwargs):\n\t        \"\"\"Annotate a text with the entities in the DBpedia knowledge graph\n\t        Args:\n\t            text (str): The text to annotate\n\t        Returns:\n", "            dict: A dictionary with the following keys:\n\t                question: The input text\n\t                question_entities: The DBpedia entities in the text\n\t                spans: The spans of the entities in the text\n\t                similarity_scores: The similarity scores of the entities in the text\n\t        \"\"\"\n\t        params = {'text': text}\n\t        headers = {'Accept': 'application/json'}\n\t        response = requests.get(self.endpoint, params=params, headers=headers,\n\t                                timeout=60).json()\n", "        resources = response['Resources']\n\t        question_entities = []\n\t        spans = []\n\t        similarity_scores = []\n\t        for resource in resources:\n\t            uri = resource['@URI']\n\t            if not uri.startswith('http://dbpedia.org/resource/'):\n\t                continue\n\t            entity = uri[len('http://dbpedia.org/resource/'):]\n\t            offset = int(resource['@offset'])\n", "            surface_form = resource['@surfaceForm']\n\t            similarity_score = float(resource['@similarityScore'])\n\t            span = (offset, offset + len(surface_form))\n\t            question_entities.append(entity)\n\t            spans.append(span)\n\t            similarity_scores.append(similarity_score)\n\t        linked = {\n\t            \"question\": text,\n\t            \"question_entities\": question_entities,\n\t            \"spans\": spans,\n", "            \"similarity_scores\": similarity_scores,\n\t        }\n\t        return linked\n"]}
{"filename": "src/srtk/entity_linking/__init__.py", "chunked_list": ["from .wikidata import WikidataLinker\n\tfrom .dbpedia import DBpediaLinker\n"]}
{"filename": "src/srtk/entity_linking/wikidata.py", "chunked_list": ["import json\n\timport logging\n\timport requests\n\tfrom wikimapper import WikiMapper\n\tfrom .linker_base import LinkerBase\n\tclass WikidataLinker(LinkerBase):\n\t    \"\"\"Link entitiy mentions to Wikidata entities using the REL endpoint\"\"\"\n\t    def __init__(self, endpoint, wikimapper_db, service='rel'):\n\t        \"\"\"Initialize the linker\n\t        Args:\n", "            endpoint (str): The endpoint of the REL service\n\t            wikimapper_db (str): The path to the Wikimapper database\n\t        \"\"\"\n\t        self.endpoint = endpoint\n\t        self.mapper = WikiMapper(wikimapper_db)\n\t        self.service = service\n\t    def annotate_rel(self, text, token=None):\n\t        \"\"\"Annotate using a local REL service.\n\t        Check https://rel.readthedocs.io/en/latest/tutorials/e2e_entity_linking for setup instructions.\n\t        Args:\n", "            text (str): The text to annotate\n\t        Returns:\n\t            dict: annotation results\n\t        \"\"\"\n\t        document = {\n\t            'text': text,\n\t        }\n\t        headers = {\n\t            # 'Content-Type': 'application/json'\n\t        }\n", "        if token is not None:\n\t            headers['gcube-token'] = token\n\t        api_results = requests.post(self.endpoint, json=document, timeout=60,\n\t                                    headers=headers)\n\t        if api_results.status_code != 200:\n\t            logging.error(f\"Error in REL service: {api_results.text}\")\n\t            decoded = []\n\t        else:\n\t            decoded = api_results.json()\n\t        qids = []\n", "        spans = []\n\t        entities = []\n\t        not_converted_entities = []\n\t        for result in decoded:\n\t            start_pos, mention_length, mention, entity, disambiguation_cofidence, mention_detection_confidence, tag = result\n\t            qid = self.mapper.title_to_id(entity)\n\t            span = (start_pos, start_pos + mention_length)\n\t            if qid is None:\n\t                not_converted_entities.append(entity)\n\t            else:\n", "                qids.append(qid)\n\t                entities.append(entity)\n\t                spans.append(span)\n\t        linked = {\n\t            \"question\": text,\n\t            \"question_entities\": qids,\n\t            \"spans\": spans,\n\t            \"entity_names\": entities,\n\t            \"not_converted_entities\": not_converted_entities,\n\t        }\n", "        return linked\n\t    def annotate_tagme_wat(self, text, token):\n\t        \"\"\"Annotate using WAT or REL online services\n\t        Args:\n\t            text (str): The text to annotate\n\t            token (str): The token to access the service\n\t        Returns:\n\t            dict: annotation results\n\t        \"\"\"\n\t        params = {\n", "            'gcube-token': token,\n\t            'text': text\n\t        }\n\t        response = requests.get(self.endpoint, params=params, timeout=60)\n\t        # Parse the JSON response\n\t        data = json.loads(response.text)\n\t        qids = []\n\t        spans = []\n\t        entity_names = []\n\t        not_converted_entities = []\n", "        if \"annotations\" in data:\n\t            for annotation in data[\"annotations\"]:\n\t                title = annotation[\"title\"]\n\t                qid = self.mapper.title_to_id(title)\n\t                if qid is None:\n\t                    not_converted_entities.append(title)\n\t                else:\n\t                    qids.append(qid)\n\t                    spans.append((annotation[\"start\"], annotation[\"end\"]))\n\t                    entity_names.append(title)\n", "        linked = {\n\t            \"question\": text,\n\t            \"question_entities\": qids,\n\t            \"spans\": spans,\n\t            \"entity_names\": entity_names,\n\t            \"not_converted_entities\": not_converted_entities,\n\t        }\n\t        return linked\n\t    def annotate(self, text, **kwargs):\n\t        \"\"\"Annotate a text with the entities in the Wikidata knowledge graph\n", "        Args:\n\t            text (str): The text to annotate\n\t        Returns:\n\t            dict: A dictionary with the following keys:\n\t                question: The input text\n\t                question_entities: The Wikidata ids of the entities in the text\n\t                spans: The spans of the entities in the text\n\t                entity_names: The names of the entities in the text\n\t                not_converted_entities: The entities that are not converted to Wikidata ids\n\t        \"\"\"\n", "        token = kwargs.get(\"token\", None)\n\t        if self.service in ['tagme', 'wat']:\n\t            if token is None:\n\t                raise ValueError(f\"The {self.service} service requires a token\")\n\t            return self.annotate_tagme_wat(text, token)\n\t        if self.service == 'rel':\n\t            return self.annotate_rel(text, token)\n\t        raise NotImplementedError(f\"Service {self.service} is not implemented\")\n\t# if __name__ == '__main__':\n\t#     linker = WikidataLinker('http://localhost:5000/rel', 'data/index_enwiki-latest-uncased.db')\n", "#     text = \"The city of [[Amsterdam]] is the capital of [[Netherlands]].\"\n\t#     print(linker.annotate(text))"]}
{"filename": "src/srtk/knowledge_graph/freebase.py", "chunked_list": ["from functools import lru_cache\n\tfrom SPARQLWrapper import SPARQLWrapper, JSON\n\tfrom .graph_base import KnowledgeGraphBase\n\tclass Freebase(KnowledgeGraphBase):\n\t    PREFIXES: str = \"\"\"\n\t        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t        PREFIX ns: <http://rdf.freebase.com/ns/>\n\t        \"\"\"\n\t    def __init__(self, endpoint, prepend_prefixes=True) -> None:\n", "        self.sparql = SPARQLWrapper(endpoint)\n\t        self.sparql.setReturnFormat(JSON)\n\t        self.prepend_prefixes = prepend_prefixes\n\t        self.name = 'freebase'\n\t    def queryFreebase(self, query):\n\t        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        self.sparql.setQuery(query)\n\t        try:\n\t            ret = self.sparql.queryAndConvert()\n", "            result = ret['results']['bindings']\n\t        except Exception as exeption:\n\t            print(exeption)\n\t            print(f'Failed executing query: {query}')\n\t            result = []\n\t        return result\n\t    @staticmethod\n\t    def get_id_from_uri(uri):\n\t        \"\"\"Get id from uri.\"\"\"\n\t        return uri.split('/')[-1]\n", "    @lru_cache\n\t    def search_one_hop_relations(self, src, dst):\n\t        \"\"\"Search one hop relation between src and dst.\n\t        Args:\n\t            src (str): source entity\n\t            dst (str): destination entity\n\t        Returns:\n\t            list[list[str]]: list of paths, each path is a list of PIDs\n\t        \"\"\"\n\t        query = f\"\"\"\n", "            SELECT distinct ?r1 where {{\n\t                ns:{src} ?r1_ ns:{dst} . \n\t                FILTER REGEX(?r1_, \"http://rdf.freebase.com/ns/\")\n\t                BIND(STRAFTER(STR(?r1_),str(ns:)) AS ?r1)\n\t            }}\n\t        \"\"\"\n\t        paths = self.queryFreebase(query)\n\t        paths = [[path['r1']['value']] for path in paths]\n\t        return paths\n\t    @lru_cache\n", "    def search_two_hop_relations(self, src, dst):\n\t        query = f\"\"\"\n\t            SELECT distinct ?r1 ?r2 where {{\n\t                ns:{src} ?r1_ ?e1 . \n\t                ?e1 ?r2_ ns:{dst} .\n\t                FILTER REGEX(?e1, \"http://rdf.freebase.com/ns/\")\n\t                FILTER REGEX(?r1_, \"http://rdf.freebase.com/ns/\")\n\t                FILTER REGEX(?r2_, \"http://rdf.freebase.com/ns/\")\n\t                FILTER (?r1_ != <http://rdf.freebase.com/ns/type.object.type>)\n\t                FILTER (?r2_ != <http://rdf.freebase.com/ns/type.object.type>)\n", "                BIND(STRAFTER(STR(?r1_),str(ns:)) AS ?r1)\n\t                BIND(STRAFTER(STR(?r2_),str(ns:)) AS ?r2)\n\t            }}\n\t        \"\"\"\n\t        paths = self.queryFreebase(query)\n\t        paths = [[path['r1']['value'], path['r2']['value']] for path in paths]\n\t        return paths\n\t    @lru_cache\n\t    def deduce_leaves(self, src, path, limit=2000):\n\t        \"\"\"Deduce leave entities from source entity following the path.\n", "        Args:\n\t            src_entity (str): source entity\n\t            path (tuple[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves. Defaults to 2000.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n\t        if len(path) >= 3:\n\t            raise NotImplementedError(f'Currenly only support paths with length less than 3, got {len(path)}')\n\t        if len(path) == 0:\n", "            return [src]\n\t        if len(path) == 1:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?leaf WHERE {{\n\t                    ns:{src} ns:{path[0]} ?t0_ .\n\t                    FILTER REGEX(?t0_, \"http://rdf.freebase.com/ns/\")\n\t                    BIND(STRAFTER(STR(?t0_),STR(ns:)) AS ?leaf)\n\t                }} LIMIT {limit}\n\t                \"\"\"\n\t        else: # len(path) == 2:\n", "            query = f\"\"\"\n\t                SELECT DISTINCT ?leaf WHERE {{\n\t                    ns:{src} ns:{path[0]} ?e1_ . \n\t                    ?e1_ ns:{path[1]} ?e2_ .\n\t                    FILTER REGEX(?e1_, \"http://rdf.freebase.com/ns/\")\n\t                    FILTER REGEX(?e2_, \"http://rdf.freebase.com/ns/\")\n\t                    BIND(STRAFTER(STR(?e2_),str(ns:)) AS ?leaf)\n\t                }} LIMIT {limit}\n\t                \"\"\"\n\t        results = self.queryFreebase(query)\n", "        return [i['leaf']['value'] for i in results]\n\t    def deduce_leaves_from_multiple_srcs(self, srcs, path, limit=2000):\n\t        \"\"\"Deuce leave entities from multiple source entities following the path.\n\t        Args:\n\t            srcs (list[str]): list of source entities\n\t            path (list[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves. Defaults to 200.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n", "        if len(path) >= 2:\n\t            raise NotImplementedError(f'Currenly only support paths with length less than 2, got {len(path)}')\n\t        if len(path) == 0:\n\t            return srcs\n\t        query = f\"\"\"\n\t            SELECT DISTINCT ?leaf WHERE {{\n\t                VALUES ?src {{ns:{' ns:'.join(srcs)}}}\n\t                ?src ns:{path[0]} ?t0_ .\n\t                FILTER REGEX(?t0_, \"http://rdf.freebase.com/ns/\")\n\t                BIND(STRAFTER(STR(?t0_),STR(ns:)) AS ?leaf)\n", "            }} LIMIT {limit}\n\t            \"\"\"\n\t        results = self.queryFreebase(query)\n\t        return [i['leaf']['value'] for i in results]\n\t    @lru_cache\n\t    def get_neighbor_relations(self, src, hop=1, limit=100):\n\t        \"\"\"Get all relations connected to an entity. The relations are\n\t        limited to direct relations (those with wdt: prefix).\n\t        Args:\n\t            src (str): source entity\n", "            hop (int, optional): hop of the relations. Defaults to 1.\n\t            limit (int, optional): limit of the number of relations. Defaults to 100.\n\t        Returns:\n\t            list[str] | list[tuple(str,)]: list of relations. Each relation is a PID or a tuple of PIDs.\n\t        \"\"\"\n\t        if hop >= 3:\n\t            raise NotImplementedError(f'Currenly only support relations with hop less than 3, got {hop}')\n\t        if hop == 1:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?rel WHERE {{\n", "                    ns:{src} ?r0_ ?t0 .\n\t                    FILTER REGEX(?r0_, \"http://rdf.freebase.com/ns/\")\n\t                    FILTER REGEX(?t0, \"http://rdf.freebase.com/ns/\")\n\t                    FILTER (?r0_ != <http://rdf.freebase.com/ns/type.object.type>)\n\t                    BIND(STRAFTER(STR(?r0_),STR(ns:)) AS ?rel)\n\t                }} LIMIT {limit}\n\t                \"\"\"\n\t        elif hop == 2:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?rel0, ?rel1 WHERE {{     \n", "                    {{\n\t                        SELECT DISTINCT ?t0, ?rel0 WHERE {{\n\t                        ns:{src} ?r0_ ?t0 .\n\t                        FILTER REGEX(?r0_, \"http://rdf.freebase.com/ns/\")\n\t                        FILTER REGEX(?t0, \"http://rdf.freebase.com/ns/\")\n\t                        FILTER (?r0_ != <http://rdf.freebase.com/ns/type.object.type>)\n\t                        BIND(STRAFTER(STR(?r0_),STR(ns:)) AS ?rel0)\n\t                        }} LIMIT 10\n\t                    }}\n\t                    ?t0 ?r1_ ?t1 .\n", "                    FILTER REGEX(?r1_, \"http://rdf.freebase.com/ns/\")\n\t                    FILTER REGEX(?t1, \"http://rdf.freebase.com/ns/\")\n\t                    FILTER (?r1_ != <http://rdf.freebase.com/ns/type.object.type>)\n\t                    BIND(STRAFTER(STR(?r1_),STR(ns:)) AS ?rel1)\n\t                }} LIMIT {limit}\n\t                \"\"\"\n\t        results = self.queryFreebase(query)\n\t        if hop == 1:\n\t            paths = [path['rel']['value'] for path in results]\n\t        else:\n", "            paths = [(path['rel0']['value'], path['rel1']['value'])\n\t                     for path in results]\n\t        return paths\n\t    @lru_cache\n\t    def get_label(self, identifier):\n\t        query = f\"\"\"\n\t            SELECT ?label\n\t            WHERE {{\n\t                ns:{identifier} rdfs:label ?label .\n\t                FILTER (langMatches(lang(?label), \"EN\"))\n", "            }} LIMIT 1\n\t            \"\"\"\n\t        results = self.queryFreebase(query)\n\t        return results[0]['label']['value'] if results else None\n\t    def get_relation_label(self, relation):\n\t        \"\"\"For freebase, relation label is the same as the relation identifier.\"\"\"\n\t        return relation\n"]}
{"filename": "src/srtk/knowledge_graph/graph_base.py", "chunked_list": ["'''Provide protocal for different kinds of knowledge graphs.'''\n\tfrom abc import abstractmethod\n\tfrom typing import List\n\tclass KnowledgeGraphBase:\n\t    \"\"\"Knowledge graph base class.\"\"\"\n\t    @abstractmethod\n\t    def search_one_hop_relations(self, src: str, dst: str) -> List[List[str]]:\n\t        \"\"\"Search one hop relations between src and dst.\n\t        Args:\n\t            src (str): source entity\n", "            dst (str): destination entity\n\t        Returns:\n\t            list[list[str]]: list of paths, each path is a list of PIDs\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @abstractmethod\n\t    def search_two_hop_relations(self, src: str, dst: str) -> List[List[str]]:\n\t        \"\"\"Search two hop relations between src and dst.\n\t        Args:\n\t            src (str): source entity\n", "            dst (str): destination entity\n\t        Returns:\n\t            list[list[str]]: list of paths, each path is a list of PIDs\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @abstractmethod\n\t    def deduce_leaves(self, src: str, path: List[str], limit: int) -> List[str]:\n\t        \"\"\"Deduce leave entities from source entity following the path.\n\t        Args:\n\t            src_entity (str): source entity\n", "            path (tuple[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @abstractmethod\n\t    def get_neighbor_relations(self, src: str, hop: int, limit: int) -> List[str]:\n\t        \"\"\"Get n-hop neighbor relations of src.\n\t        Args:\n", "            src (str): source entity\n\t            hop (int, optional): hop of the relations. Defaults to 1.\n\t            limit (int, optional): limit of the number of relations.\n\t        Returns:\n\t            list[str] | list[tuple[str]]: list of relations (one-hop)\n\t                or list of tuples of relations (multi-hop)\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    @abstractmethod\n\t    def get_label(self, identifier: str) -> str:\n", "        \"\"\"Get label of an entity or a relation.\n\t        Args:\n\t            identifier (str): entity or relation identifier\n\t        Returns:\n\t            str: label of the entity or the relation\n\t        \"\"\"\n\t        raise NotImplementedError\n\t    def get_relation_label(self, relation: str) -> str:\n\t        \"\"\"Get the label of a relation. Defaults to get_label.\n\t        Args:\n", "            relation (str): relation identifier\n\t        Returns:\n\t            str: label of the relation\n\t        \"\"\"\n\t        return self.get_label(relation)\n\t    def get_entity_label(self, entity: str) -> str:\n\t        \"\"\"Get the label of an entity. Defaults to get_label.\n\t        Args:\n\t            entity (str): entity identifier\n\t        Returns:\n", "            str: label of the entity\n\t        \"\"\"\n\t        return self.get_label(entity)\n"]}
{"filename": "src/srtk/knowledge_graph/dbpedia.py", "chunked_list": ["from functools import lru_cache\n\tfrom typing import List\n\tfrom SPARQLWrapper import SPARQLWrapper, JSON\n\tfrom .graph_base import KnowledgeGraphBase\n\tclass DBpedia(KnowledgeGraphBase):\n\t    PREFIXES: str = \"\"\"PREFIX dbo: <http://dbpedia.org/ontology/>\n\t                       PREFIX dbr: <http://dbpedia.org/resource/>\n\t                       \"\"\"\n\t    def __init__(self, endpoint, prepend_prefixes=False):\n\t        self.sparql = SPARQLWrapper(endpoint)\n", "        self.sparql.setReturnFormat(JSON)\n\t        self.prepend_prefixes = prepend_prefixes\n\t        self.name = 'dbpedia'\n\t    def queryDBPedia(self, query):\n\t        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        self.sparql.setQuery(query)\n\t        try:\n\t            ret = self.sparql.queryAndConvert()\n\t            result = ret['results']['bindings']\n", "        except Exception as exeption:\n\t            print(f'Failed executing query: {query}')\n\t            print(f'Exception: {exeption}')\n\t            result = []\n\t        return result\n\t    def get_id_from_uri(self, uri):\n\t        return uri.split('/')[-1]\n\t    @lru_cache\n\t    def search_one_hop_relations(self, src, dst):\n\t        query = f\"\"\"\n", "                SELECT DISTINCT ?r WHERE {{\n\t                    dbr:{src} ?r dbr:{dst}.\n\t                    FILTER regex(str(?r), \"^http://dbpedia.org/ontology/\")\n\t                    FILTER (?r != dbo:wikiPageWikiLink)\n\t                }}\n\t                \"\"\"\n\t        paths = self.queryDBPedia(query)\n\t        # Keep only identifiers in the paths\n\t        paths = [[self.get_id_from_uri(path['r']['value'])] for path in paths]\n\t        return paths\n", "    @lru_cache\n\t    def search_two_hop_relations(self, src: str, dst: str) -> List[List[str]]:\n\t        \"\"\"Search two hop relations between src and dst.\n\t        Args:\n\t            src (str): source entity\n\t            dst (str): destination entity\n\t        Returns:\n\t            list[list[str]]: list of paths, each path is a list of IDs\n\t        \"\"\"\n\t        query = f\"\"\"\n", "                SELECT DISTINCT ?r1 ?r2 WHERE {{\n\t                    dbr:{src} ?r1 ?mid.\n\t                    ?mid ?r2 dbr:{dst}.\n\t                    FILTER regex(str(?r1), \"^http://dbpedia.org/ontology/\")\n\t                    FILTER regex(str(?r2), \"^http://dbpedia.org/ontology/\")\n\t                    FILTER (?r1 != dbo:wikiPageWikiLink)\n\t                    FILTER (?r2 != dbo:wikiPageWikiLink)\n\t                }}\n\t                \"\"\"\n\t        paths = self.queryDBPedia(query)\n", "        # Keep only identifiers in the paths\n\t        paths = [[self.get_id_from_uri(path['r1']['value']), self.get_id_from_uri(path['r2']['value'])] for path in paths]\n\t        return paths\n\t    def escape_entity(self, entity):\n\t        \"\"\"Escape brackets in the entity ID.\n\t        Args:\n\t            entity (str): entity identifier\n\t        Returns:\n\t            str: the bracket-escaped entity identifier\n\t        \"\"\"\n", "        # entity = entity.replace('(', r'\\(').replace(')', r'\\)')\n\t        entity = entity.replace('\"', r'\\\"')\n\t        entity = f\"<http://dbpedia.org/resource/{entity}>\"\n\t        return entity\n\t    def deduce_leaves(self, src: str, path: List[str], limit: int) -> List[str]:\n\t        \"\"\"Deduce leave entities from source entity following the path.\n\t        Args:\n\t            src_entity (str): source entity\n\t            path (tuple[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves.\n", "        Returns:\n\t            list[str]: list of leaves. Each leaf is a ID.\n\t        \"\"\"\n\t        if len(path) > 3:\n\t            raise NotImplementedError('Deduce leaves for paths longer than 3 is not implemented.')\n\t        if len(path) == 0:\n\t            return [src]\n\t        src = self.escape_entity(src)\n\t        if len(path) == 1:\n\t            query = f\"\"\"\n", "                SELECT DISTINCT ?dst WHERE {{\n\t                    {src} dbo:{path[0]} ?dst.\n\t                    FILTER(STRSTARTS(str(?dst), \"http://dbpedia.org/resource/\"))\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n\t        else:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?dst WHERE {{\n\t                    {src} dbo:{path[0]} ?mid.\n", "                    ?mid dbo:{path[1]} ?dst.\n\t                    FILTER(STRSTARTS(str(?dst), \"http://dbpedia.org/resource/\"))\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n\t        leaves = self.queryDBPedia(query)\n\t        leaves = [self.get_id_from_uri(leaf['dst']['value']) for leaf in leaves]\n\t        return leaves\n\t    def deduce_leaves_from_multiple_srcs(self, srcs, path, limit=2000):\n\t        \"\"\"Deuce leave entities from multiple source entities following the path.\n", "        Args:\n\t            srcs (list[str]): list of source entities\n\t            path (list[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves. Defaults to 200.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n\t        if len(path) >= 2:\n\t            raise NotImplementedError(f'Currenly only support paths with length less than 2, got {len(path)}')\n\t        if len(path) == 0:\n", "            return srcs\n\t        if len(srcs) == 0:\n\t            return []\n\t        srcs = [self.escape_entity(src) for src in srcs]\n\t        query = f\"\"\"\n\t            SELECT DISTINCT ?x WHERE {{\n\t                VALUES ?src {{ {' '.join(srcs)} }}\n\t                ?src dbo:{path[0]} ?x.\n\t                FILTER(STRSTARTS(str(?x), \"http://dbpedia.org/resource/\"))\n\t            }}\n", "            LIMIT {limit}\n\t            \"\"\"\n\t        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        leaves = self.queryDBPedia(query)\n\t        # Keep only QIDs in the leaves\n\t        leaves = [leaf['x']['value'].split('/')[-1] for leaf in leaves]\n\t        return leaves\n\t    @lru_cache\n\t    def get_neighbor_relations(self, src, hop=1, limit=100):\n", "        \"\"\"Get all relations connected to an entity. The relations are\n\t        limited to direct relations (those with wdt: prefix).\n\t        Args:\n\t            src (str): source entity\n\t            hop (int, optional): hop of the relations. Defaults to 1.\n\t            limit (int, optional): limit of the number of relations. Defaults to 100.\n\t        Returns:\n\t            list[str] | list[tuple(str,)]: list of relations. Each relation is a PID or a tuple of PIDs.\n\t        \"\"\"\n\t        if hop > 2:\n", "            raise NotImplementedError('Get neighbor relations for hop larger than 2 is not implemented.')\n\t        if hop == 1:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?r\n\t                WHERE {{\n\t                    dbr:Charles_III ?r ?neighbor .\n\t                    FILTER (STRSTARTS(STR(?r), \"http://dbpedia.org/ontology/\") && !STRSTARTS(STR(?r), \"http://dbpedia.org/ontology/wiki\"))\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n", "        else:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?r1 ?r2 WHERE {{\n\t                    dbr:{src} ?r1 ?mid.\n\t                    ?mid ?r2 ?dst.\n\t                    FILTER (STRSTARTS(STR(?r1), \"http://dbpedia.org/ontology/\") && !STRSTARTS(STR(?r1), \"http://dbpedia.org/ontology/wiki\"))\n\t                    FILTER (STRSTARTS(STR(?r2), \"http://dbpedia.org/ontology/\") && !STRSTARTS(STR(?r2), \"http://dbpedia.org/ontology/wiki\"))\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n", "        relations = self.queryDBPedia(query)\n\t        if hop == 1:\n\t            relations = [self.get_id_from_uri(relation['r']['value'])\n\t                         for relation in relations]\n\t        else:\n\t            relations = [(self.get_id_from_uri(relation['r1']['value']),\n\t                          self.get_id_from_uri(relation['r2']['value']))\n\t                         for relation in relations]\n\t        return relations\n\t    @lru_cache\n", "    def get_label(self, identifier):\n\t        \"\"\"Get label of an entity or a relation. If no label is found, return None.\n\t        Args:\n\t            identifier (str): entity or relation, a QID or a PID\n\t        Returns:\n\t            str | None: label of the entity or relation\n\t        \"\"\"\n\t        query = f\"\"\"\n\t                SELECT (str(?label) AS ?name)\n\t                WHERE {{\n", "                dbr:{identifier} rdfs:label ?label .\n\t                FILTER (lang(?label) = \"en\")\n\t                }}\n\t                LIMIT 1\n\t                \"\"\"\n\t        labels = self.queryDBPedia(query)\n\t        if len(labels) == 0:\n\t            print(f'No label found for {identifier}')\n\t            return None\n\t        label = labels[0]['name']['value']\n", "        return label\n"]}
{"filename": "src/srtk/knowledge_graph/__init__.py", "chunked_list": ["from .graph_base import KnowledgeGraphBase\n\tfrom .wikidata import Wikidata\n\tfrom .freebase import Freebase\n\tfrom .dbpedia import DBpedia\n\tfrom .utils import get_knowledge_graph"]}
{"filename": "src/srtk/knowledge_graph/utils.py", "chunked_list": ["from .wikidata import Wikidata\n\tfrom .freebase import Freebase\n\tfrom .dbpedia import DBpedia\n\tdef get_knowledge_graph(knowledge_graph_type, sparql_endpoint, prepend_prefixes=False,\n\t                        exclude_qualifiers=True):\n\t    \"\"\"Create a knowledge graph object.\n\t    Args:\n\t        knowledge_graph_type (str): Knowledge graph type. One of 'freebase', 'wikidata', 'dbpedia'.\n\t        sparql_endpoint (str): The SPARQL endpoint of the knowledge graph.\n\t        prepend_prefixes (bool): Whether to prepend prefixes to the SPARQL query. Defaults to False.\n", "        exclude_qualifiers (bool, optional): Whether to exclude qualifiers, only valid for Wikidata. Defaults to True.\n\t    Raises:\n\t        ValueError: If the knowledge graph type is not supported.\n\t    Returns:\n\t        KnowledgeGraphBase: A knowledge graph object.\n\t    \"\"\"\n\t    if knowledge_graph_type == 'freebase':\n\t        kg = Freebase(sparql_endpoint, prepend_prefixes=prepend_prefixes)\n\t    elif knowledge_graph_type == 'wikidata':\n\t        kg = Wikidata(sparql_endpoint, prepend_prefixes=prepend_prefixes, exclude_qualifiers=exclude_qualifiers)\n", "    elif knowledge_graph_type == 'dbpedia':\n\t        kg = DBpedia(sparql_endpoint, prepend_prefixes=prepend_prefixes)\n\t    else:\n\t        raise ValueError(f'Unknown knowledge graph type: {knowledge_graph_type}')\n\t    return kg"]}
{"filename": "src/srtk/knowledge_graph/wikidata.py", "chunked_list": ["from functools import lru_cache\n\tfrom SPARQLWrapper import SPARQLWrapper, JSON\n\tfrom .graph_base import KnowledgeGraphBase\n\tclass Wikidata(KnowledgeGraphBase):\n\t    PREFIXES: str = \"\"\"PREFIX wd: <http://www.wikidata.org/entity/>\n\t        PREFIX wds: <http://www.wikidata.org/entity/statement/>\n\t        PREFIX wdv: <http://www.wikidata.org/value/>\n\t        PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\t        PREFIX wikibase: <http://wikiba.se/ontology#>\n\t        PREFIX p: <http://www.wikidata.org/prop/>\n", "        PREFIX ps: <http://www.wikidata.org/prop/statement/>\n\t        PREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\t        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t        PREFIX bd: <http://www.bigdata.com/rdf#>\n\t        PREFIX schema: <http://schema.org/>\n\t        \"\"\"\n\t    ENTITY_PREFIX: str = \"http://www.wikidata.org/entity/Q\"\n\t    def __init__(self, endpoint, prepend_prefixes=False, exclude_qualifiers=True):\n\t        \"\"\"Create a Wikidata query handler.\n\t        Args:\n", "            endpoint (str): SPARQL endpoint, e.g. https://query.wikidata.org/sparql\n\t                Note that the protocal part (like https) is necessary.\n\t            prepend_prefixes (bool, optional): whether to prepend prefixes to the query.\n\t                Necessary for endpoints without pre-defined prefixes. Defaults to False.\n\t            exclude_qualifiers (bool, optional): whether to filter out qualifiers in the\n\t                queried entities. If set to True, only Wikidata entities (QXX) will be\n\t                considered. Defaults to True.\n\t        \"\"\"\n\t        self.sparql = SPARQLWrapper(endpoint)\n\t        self.sparql.setReturnFormat(JSON)\n", "        self.prepend_prefixes = prepend_prefixes\n\t        self.exclude_qualifiers = exclude_qualifiers\n\t        self.name = 'wikidata'\n\t    def queryWikidata(self, query):\n\t        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        self.sparql.setQuery(query)\n\t        try:\n\t            ret = self.sparql.queryAndConvert()\n\t            result = ret['results']['bindings']\n", "        except Exception as exeption:\n\t            print(f'Failed executing query: {query}')\n\t            print(f'Exception: {exeption}')\n\t            result = []\n\t        return result\n\t    @staticmethod\n\t    def get_pid_from_uri(uri):\n\t        \"\"\"Get property id from uri.\"\"\"\n\t        return uri.split('/')[-1]\n\t    @staticmethod\n", "    def is_qid(qid):\n\t        \"\"\"Check if qid is a valid Wikidata entity id.\"\"\"\n\t        return qid.startswith('Q') and qid[1:].isdigit()\n\t    @staticmethod\n\t    def is_pid(pid):\n\t        \"\"\"Check if pid is a valid Wikidata property id.\"\"\"\n\t        return pid.startswith('P') and pid[1:].isdigit()\n\t    def get_quantifier_filter(self, var_name):\n\t        \"\"\"Get quantifier filter string where the var is restricted to be entities.\n\t        If exclude_qualifiers is set to False, return empty string.\n", "        Note: in Wikidata, entities are prefixed with \"http://www.wikidata.org/entity/Q\",\n\t            while qualifiers are non-entity (and mostly string) values.\n\t        \"\"\"\n\t        return f'FILTER(STRSTARTS(STR(?{var_name}), \"{self.ENTITY_PREFIX}\"))' if self.exclude_qualifiers else ''\n\t    def search_one_hop_relations(self, src, dst):\n\t        \"\"\"Search one hop relation between src and dst.\n\t        Args:\n\t            src (str): source entity\n\t            dst (str): destination entity\n\t        Returns:\n", "            list[list[str]]: list of paths, each path is a list of PIDs\n\t        \"\"\"\n\t        if not self.is_qid(src) or not self.is_qid(dst):\n\t            return []\n\t        query = f\"\"\"\n\t            SELECT DISTINCT ?r WHERE {{\n\t                wd:{src} ?r wd:{dst}.\n\t            }}\n\t            \"\"\"\n\t        paths = self.queryWikidata(query)\n", "        # Keep only PIDs in the paths\n\t        paths = [[self.get_pid_from_uri(path['r']['value'])] for path in paths]\n\t        return paths\n\t    def search_two_hop_relations(self, src, dst):\n\t        \"\"\"Search two hop relation between src and dst.\n\t        Args:\n\t            src (str): source entity\n\t            dst (str): destination entity\n\t        Returns:\n\t            list[list[str]]: list of paths, each path is a list of PIDs\n", "        \"\"\"\n\t        if not self.is_qid(src) or not self.is_qid(dst):\n\t            return []\n\t        query = f\"\"\"\n\t            SELECT DISTINCT ?r1 ?r2 WHERE {{\n\t                wd:{src} ?r1 ?x.\n\t                ?x ?r2 wd:{dst}.\n\t                {self.get_quantifier_filter('x')}\n\t            }}\n\t            \"\"\"\n", "        paths = self.queryWikidata(query)\n\t        # Keep only PIDs in the paths\n\t        paths = [[self.get_pid_from_uri(path['r1']['value']),\n\t                  self.get_pid_from_uri(path['r2']['value'])]\n\t                 for path in paths]\n\t        return paths\n\t    @lru_cache\n\t    def deduce_leaves(self, src, path, limit=2000):\n\t        \"\"\"Deduce leave entities from source entity following the path.\n\t        Args:\n", "            src_entity (str): source entity\n\t            path (tuple[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves. Defaults to 2000.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n\t        if len(path) >= 3:\n\t            raise NotImplementedError(f'Currenly only support paths with length less than 3, got {len(path)}')\n\t        if not self.is_qid(src):\n\t            return []\n", "        if len(path) == 0:\n\t            return [src]\n\t        if len(path) == 1:\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?x WHERE {{\n\t                    wd:{src} wdt:{path[0]} ?x.\n\t                    {self.get_quantifier_filter('x')}\n\t                    }}\n\t                LIMIT {limit}\n\t            \"\"\"\n", "        else: # len(path) == 2\n\t            query = f\"\"\"\n\t                SELECT DISTINCT ?x WHERE {{\n\t                    wd:{src} wdt:{path[0]} ?y.\n\t                    ?y wdt:{path[1]} ?x.\n\t                    {self.get_quantifier_filter('y')}\n\t                    {self.get_quantifier_filter('x')}\n\t                }}\n\t                LIMIT {limit}\n\t            \"\"\"\n", "        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        leaves = self.queryWikidata(query)\n\t        # Keep only QIDs in the leaves\n\t        leaves = [leaf['x']['value'].split('/')[-1] for leaf in leaves]\n\t        return leaves\n\t    def deduce_leaves_from_multiple_srcs(self, srcs, path, limit=2000):\n\t        \"\"\"Deuce leave entities from multiple source entities following the path.\n\t        Args:\n\t            srcs (list[str]): list of source entities\n", "            path (list[str]): path from source entity to destination entity\n\t            limit (int, optional): limit of the number of leaves. Defaults to 200.\n\t        Returns:\n\t            list[str]: list of leaves. Each leaf is a QID.\n\t        \"\"\"\n\t        if len(path) >= 2:\n\t            raise NotImplementedError(f'Currenly only support paths with length less than 2, got {len(path)}')\n\t        if len(path) == 0:\n\t            return srcs\n\t        srcs = [src for src in srcs if self.is_qid(src)]\n", "        if len(srcs) == 0:\n\t            return []\n\t        query = f\"\"\"\n\t            SELECT DISTINCT ?x WHERE {{\n\t                VALUES ?src {{wd:{' wd:'.join(srcs)}}}\n\t                ?src wdt:{path[0]} ?x.\n\t                {self.get_quantifier_filter('x')}\n\t            }}\n\t            LIMIT {limit}\n\t            \"\"\"\n", "        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        leaves = self.queryWikidata(query)\n\t        # Keep only QIDs in the leaves\n\t        leaves = [leaf['x']['value'].split('/')[-1] for leaf in leaves]\n\t        return leaves\n\t    @lru_cache\n\t    def get_neighbor_relations(self, src, hop=1, limit=100):\n\t        \"\"\"Get all relations connected to an entity. The relations are\n\t        limited to direct relations (those with wdt: prefix).\n", "        Args:\n\t            src (str): source entity\n\t            hop (int, optional): hop of the relations. Defaults to 1.\n\t            limit (int, optional): limit of the number of relations. Defaults to 100.\n\t        Returns:\n\t            list[str] | list[tuple(str,)]: list of relations. Each relation is a PID or a tuple of PIDs.\n\t        \"\"\"\n\t        if hop >= 3:\n\t            raise NotImplementedError(f'Currenly only support relations with hop less than 3, got {hop}')\n\t        if not self.is_qid(src):\n", "            return []\n\t        if hop == 1:\n\t            query = f\"\"\"SELECT DISTINCT ?rel WHERE {{\n\t                wd:{src} ?rel ?obj .\n\t                FILTER(REGEX(STR(?rel), \"^http://www.wikidata.org/prop/direct/\"))\n\t                {self.get_quantifier_filter('obj')}\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n\t        else: # hop == 2\n", "            query = f\"\"\"SELECT DISTINCT ?rel1 ?rel2 WHERE {{\n\t                wd:{src} ?rel1 ?obj1 .\n\t                ?obj1 ?rel2 ?obj2 .\n\t                FILTER(REGEX(STR(?rel1), \"^http://www.wikidata.org/prop/direct/\"))\n\t                FILTER(REGEX(STR(?rel2), \"^http://www.wikidata.org/prop/direct/\"))\n\t                {self.get_quantifier_filter('obj1')}\n\t                {self.get_quantifier_filter('obj2')}\n\t                }}\n\t                LIMIT {limit}\n\t                \"\"\"\n", "        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        relations = self.queryWikidata(query)\n\t        if hop == 1:\n\t            relations = [self.get_pid_from_uri(relation['rel']['value'])\n\t                         for relation in relations]\n\t        else:\n\t            relations = [(self.get_pid_from_uri(relation['rel1']['value']),\n\t                          self.get_pid_from_uri(relation['rel2']['value']))\n\t                         for relation in relations]\n", "        return relations\n\t    @lru_cache\n\t    def get_label(self, identifier):\n\t        \"\"\"Get label of an entity or a relation. If no label is found, return None.\n\t        Args:\n\t            identifier (str): entity or relation, a QID or a PID\n\t        Returns:\n\t            str | None: label of the entity or relation\n\t        \"\"\"\n\t        if not self.is_qid(identifier) and not self.is_pid(identifier):\n", "            return identifier\n\t        query = f\"\"\"\n\t            SELECT ?label\n\t                WHERE {{\n\t                    BIND(wd:{identifier} AS ?identifier)\n\t                    ?identifier rdfs:label ?label .\n\t                    FILTER(LANG(?label) = \"en\")\n\t                    }}\n\t                LIMIT 1\n\t            \"\"\"\n", "        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        label = self.queryWikidata(query)\n\t        if len(label) == 0:\n\t            print(f'No label for identifier {identifier}.')\n\t            return None\n\t        label = label[0]['label']['value']\n\t        return label\n\t    def get_description(self, identifier):\n\t        \"\"\"Get description of an entity or a relation. If no description is found, return None.\n", "        Args:\n\t            identifier (str): entity or relation, a QID or a PID\n\t        Returns:\n\t            str | None: description of the entity or relation\n\t        \"\"\"\n\t        if not self.is_qid(identifier) and not self.is_pid(identifier):\n\t            return identifier\n\t        query = f\"\"\"\n\t            SELECT ?description\n\t                WHERE {{\n", "                    wd:{identifier} schema:description ?description .\n\t                    FILTER(LANG(?description) = \"en\")\n\t                    }}\n\t                LIMIT 1\n\t            \"\"\"\n\t        if self.prepend_prefixes:\n\t            query = self.PREFIXES + query\n\t        description = self.queryWikidata(query)\n\t        if len(description) == 0:\n\t            print(f'No description for identifier {identifier}.')\n", "            return None\n\t        description = description[0]['description']['value']\n\t        return description"]}
{"filename": "src/srtk/scorer/__init__.py", "chunked_list": ["from .encoder import LitSentenceEncoder\n\tfrom .scorer import Scorer\n"]}
{"filename": "src/srtk/scorer/scorer.py", "chunked_list": ["from functools import lru_cache\n\timport torch\n\tfrom transformers import AutoTokenizer\n\tfrom .encoder import LitSentenceEncoder\n\tclass Scorer:\n\t    \"\"\"Scorer for relation paths.\"\"\"\n\t    def __init__(self, pretrained_name_or_path, device=None):\n\t        self.tokenizer = AutoTokenizer.from_pretrained(pretrained_name_or_path)\n\t        # Set pooling method to average if the model does not have a CLS token.\n\t        if self.tokenizer.cls_token is None:\n", "            pool_method = 'avg'\n\t        else:\n\t            pool_method = 'cls'\n\t        self.model = LitSentenceEncoder(pretrained_name_or_path, pool=pool_method)\n\t        if device:\n\t            self.model = self.model.to(device)\n\t    @lru_cache\n\t    def score(self, question, prev_relations, next_relation):\n\t        \"\"\"Score a relation path.\n\t        Args:\n", "            question (str): question\n\t            prev_relations (tuple[str]): tuple of relation **labels** that have been traversed.\n\t            next_relation (str): next relation *label* to be traversed\n\t        Returns:\n\t            similarity: similarity between the query and the candidate\n\t        \"\"\"\n\t        # Prepending 'query' and 'relation' corresponds to the way the model was trained (check collate_fn)\n\t        query = f\"query: {question} [SEP] {' # '.join(prev_relations)}\"\n\t        next_relation = 'relation: ' + next_relation\n\t        text_pair = [query, next_relation]\n", "        inputs = self.tokenizer(text_pair, return_tensors='pt', padding=True)\n\t        inputs = {k: v.to(self.model.device) for k, v in inputs.items()}\n\t        with torch.no_grad():\n\t            outputs = self.model(**inputs, return_dict=True)\n\t            query_embedding = outputs.last_hidden_state[0:1]\n\t            sample_embedding = outputs.last_hidden_state[1:2]\n\t            similarity = self.model.compute_sentence_similarity(\n\t                query_embedding, sample_embedding)\n\t        return similarity.item()\n\t    @lru_cache\n", "    def batch_score(self, question, prev_relations, next_relations):\n\t        \"\"\"Score next relations in batch.\n\t        Args:\n\t            question (str): question\n\t            prev_relations (tuple[str]): tuple of relation **labels** that have been traversed.\n\t            next_relations (tuple[str]): tuple of candidate next relation *labels* that are\n\t                pertinent to the question and the previous relations.\n\t        Returns:\n\t            similarities (list[float]): list of similarities between the query and each candidate\n\t        \"\"\"\n", "        query = f\"query: {question} [SEP] {' # '.join(prev_relations)}\"\n\t        next_relations = ['relation: ' + next_relation for next_relation in next_relations]\n\t        text_pair = [query] + next_relations\n\t        inputs = self.tokenizer(text_pair, return_tensors='pt', padding=True)\n\t        inputs = {k: v.to(self.model.device) for k, v in inputs.items()}\n\t        with torch.no_grad():\n\t            outputs = self.model(**inputs, return_dict=True)\n\t            query_embedding = outputs.last_hidden_state[0:1]\n\t            sample_embeddings = outputs.last_hidden_state[1:]\n\t            similarities = self.model.compute_sentence_similarity(\n", "                query_embedding, sample_embeddings)\n\t            similarities = similarities.view(-1).tolist()\n\t            if len(similarities) != len(next_relations):\n\t                raise ValueError(f\"Sanity check failed: {len(similarities)} != {len(next_relations)}\")\n\t        return similarities\n"]}
{"filename": "src/srtk/scorer/encoder.py", "chunked_list": ["import json\n\timport os\n\tfrom pathlib import Path\n\timport lightning.pytorch as pl\n\timport torch\n\timport torch.nn.functional as F\n\tfrom transformers import AutoModel\n\ttry:\n\t    from pytorch_metric_learning.losses import NTXentLoss\n\texcept ImportError:\n", "    pass\n\tclass LitSentenceEncoder(pl.LightningModule):\n\t    \"\"\"A lightning module that wraps a sentence encoder.\"\"\"\n\t    def __init__(self, model_name_or_path, temperature=0.07, lr=5e-5, pool='cls', loss='cross_entropy'):\n\t        if pool not in ['cls', 'avg']:\n\t            raise ValueError(f\"pool method must be either cls or avg, got {pool}\")\n\t        if loss not in ['cross_entropy', 'contrastive']:\n\t            raise ValueError(f\"loss method must be either cross entropy or contrastive, got {loss}\")\n\t        if loss == 'contrastive' and 'NTXentLoss' not in globals():\n\t            raise ImportError(\"pytorch_metric_learning is required for contrastive loss.\\\n", "                Please install it via `pip install pytorch-metric-learning`.\")\n\t        super().__init__()\n\t        self.model = AutoModel.from_pretrained(model_name_or_path)\n\t        if self.model.config.is_encoder_decoder:\n\t            self.model = self.model.encoder\n\t            print(\"The model is an encoder-decoder model, only the encoder will be used.\")\n\t        self.config = self.model.config\n\t        self.temperature = temperature\n\t        self.lr = lr\n\t        self.pool_method = pool\n", "        self.loss = loss\n\t        self._loss_fns = {}\n\t    def forward(self, *args, **kwargs):\n\t        return self.model(*args, **kwargs)\n\t    @staticmethod\n\t    def cls_pool(last_hidden_states, attention_mask=None):\n\t        \"\"\"CLS pool the sentence embedding.\n\t        This is the pooling method adopted by RUC's SR paper.\n\t        Args:\n\t            last_hidden_states: [..., seq_len, embedding_dim]\n", "            attention_mask: [..., seq_len] silently ignored!\n\t                It exists for compatibility with other pooling methods.\n\t        Returns:\n\t            torch.Tensor: pooled_embedding [..., embedding_dim]\n\t        \"\"\"\n\t        return last_hidden_states[..., 0, :]\n\t    @staticmethod\n\t    def avg_pool(last_hidden_states, attention_mask=None):\n\t        \"\"\"Average pool the sentence embedding.\n\t        Args:\n", "            last_hidden_states (torch.Tensor): [..., seq_len, embedding_dim]\n\t            attention_mask (torch.Tensor): [..., seq_len]\n\t        Returns:\n\t            torch.Tensor: pooled_embedding [..., embedding_dim]\n\t        \"\"\"\n\t        # Compute the average embedding, ignoring the padding tokens.\n\t        if attention_mask is None:\n\t            attention_mask = torch.ones(last_hidden_states.shape[:-1], device=last_hidden_states.device)\n\t        last_hidden = last_hidden_states.masked_fill(~attention_mask[..., None].bool(), 0.0)\n\t        return last_hidden.sum(dim=-2) / attention_mask.sum(dim=-1)[..., None]\n", "    def compute_embedding_similarity(self, query, target):\n\t        \"\"\"Compute the similarity between query and target(s) embeddings.\n\t        Args:\n\t            query (torch.Tensor): [batch_size, 1, embedding_dim]\n\t            target (torch.Tensor): [batch_size, k, embedding_dim]\n\t        Returns:\n\t            torch.Tensor: similarity [batch_size, k]\n\t        \"\"\"\n\t        return F.cosine_similarity(query, target, dim=-1) / self.temperature\n\t    def pool_sentence_embedding(self, query, target, query_mask=None, target_mask=None):\n", "        \"\"\"Pool the query and target(s) sentence embeddings.\n\t        Args:\n\t            query (torch.Tensor): [..., 1, seq_len, embedding_dim]\n\t            target (torch.Tensor): [..., k, seq_len, embedding_dim]\n\t            query_mask (torch.Tensor, optional): [..., 1, seq_len, embedding_dim]. Defaults to None.\n\t            target_mask (torch.Tensor, optional): [..., k, seq_len, embedding]. Defaults to None.\n\t        Returns:\n\t            (torch.Tensor, torch.Tensor): pooled query and sentence embeddings\n\t        \"\"\"\n\t        embeddings = torch.cat([query, target], dim=-3)  # [..., 1 + k, seq_len, embedding_dim]\n", "        if self.pool_method == 'cls':\n\t            embeddings = self.cls_pool(embeddings) # [..., 1 + k, embedding_dim]\n\t        else:\n\t            if query_mask is None:\n\t                query_mask = torch.ones(query.shape[:-1], device=query.device)\n\t            if target_mask is None:\n\t                target_mask = torch.ones(target.shape[:-1], device=target.device)\n\t            attention_mask = torch.cat([query_mask, target_mask], dim=-2)  # [..., 2 + k, seq_len]\n\t            embeddings = self.avg_pool(embeddings, attention_mask)\n\t        query_embeddings = embeddings[..., 0:1, :]  # [..., 1, embedding_dim]\n", "        samples_embeddings = embeddings[..., 1:, :]  # [..., k, embedding_dim]\n\t        return query_embeddings, samples_embeddings\n\t    def compute_sentence_similarity(self, query, target, query_mask=None, target_mask=None):\n\t        \"\"\"Compute the similarity between query and target(s) sentence embeddings.\n\t        The query & target(s) sentence embedding are first pooled. Then the similarity\n\t        is computed between the pooled query and target(s) embeddings. \n\t        Args:\n\t            query (torch.Tensor): [..., 1, seq_len, embedding_dim]\n\t                query sentence embedding\n\t            target (torch.Tensor): [..., k, seq_len, embedding_dim]\n", "                target sentence(s) embedding\n\t        Returns:\n\t            torch.Tensor: similarity [..., k]\n\t        \"\"\"\n\t        query_embeddings, samples_embeddings = self.pool_sentence_embedding(query, target, query_mask, target_mask)\n\t        similarity = self.compute_embedding_similarity(query_embeddings, samples_embeddings)\n\t        return similarity\n\t    def _get_loss_fn(self):\n\t        \"\"\"This allows to change the loss function after initialization.\n\t        Besides, it maintains a single source of truth for the loss function.\n", "        \"\"\"\n\t        if self.loss not in self._loss_fns:\n\t            if self.loss == 'contrastive':\n\t                self._loss_fns[self.loss] = NTXentLoss(temperature=self.temperature)\n\t            else:\n\t                self._loss_fns[self.loss] = F.cross_entropy\n\t        return self._loss_fns[self.loss]\n\t    def compute_loss(self, pooled_query_embedding, pooled_sample_embeddings):\n\t        \"\"\"Compute loss using the pooled query and sample embeddings. It supports\n\t        cross_entropy and contrastive loss.\n", "        Args:\n\t            pooled_query_embedding (torch.Tensor): [batch_size, 1, embedding_dim]\n\t            pooled_sample_embeddings (torch.Tensor): [batch_size, k, embedding_dim]\n\t                In our case, k =  n_positive(1) + n_negatives\n\t        Returns:\n\t            torch.Tensor: the loss\n\t        \"\"\"\n\t        loss_fn = self._get_loss_fn()\n\t        if self.loss == 'contrastive':\n\t            # In each sentence group, the first sentence is the query, the second is the positive,\n", "            # and the rest are negatives. We set the positive to have the same label as the query,\n\t            # and the negatives to have different labels, so that the query and the positive will\n\t            # be pulled together, and the query and the negatives will be pushed apart.\n\t            # Ref: https://github.com/KevinMusgrave/pytorch-metric-learning/issues/179\n\t            concat_embeddings = torch.cat([pooled_query_embedding, pooled_sample_embeddings], dim=-2)\n\t            n_total = concat_embeddings.shape[-2]\n\t            n_neg = n_total - 2\n\t            # I manurally create positive pairs as (0, 1), and negative pairs as (0, 2), (0, 3), ...\n\t            # indices_tuple (anchor1, postives, anchor2, negatives)\n\t            indices_tuple = (torch.zeros((1,), dtype=torch.long), torch.ones((1,), dtype=torch.long),\n", "                        torch.zeros((n_neg,), dtype=torch.long), torch.arange(2, n_total, dtype=torch.long))\n\t            indices_tuple = tuple(x.to(self.device) for x in indices_tuple)\n\t            loss = 0\n\t            for sentence_group in concat_embeddings:\n\t                loss = loss + loss_fn(sentence_group, indices_tuple=indices_tuple)\n\t        else:\n\t            # similarity: [batch_size, 1 + neg]\n\t            query_samples_similarity = self.compute_embedding_similarity(pooled_query_embedding, pooled_sample_embeddings)\n\t            # The zerot-th label, where positive sample locates, is set to 0.\n\t            labels = torch.zeros(query_samples_similarity.shape[0], dtype=torch.long,\n", "                                device=query_samples_similarity.device)\n\t            loss = loss_fn(query_samples_similarity, labels)\n\t        return loss\n\t    def batch_forward(self, batch):\n\t        \"\"\"The common forward function for both training and inference.\"\"\"\n\t        # In each sentence group, the first sentence is the query, the second is the positive,\n\t        # and the rest are negatives.\n\t        # batch = {'input_ids': input_ids, 'attention_mask': attention_mask}\n\t        # input_ids: [batch_size, 1(query) + 1(positive) + neg (negative), seq_len]\n\t        batch_size, n_samples, seq_len = batch['input_ids'].shape  # n_sentences = 1 + 1 + neg\n", "        input_ids = batch['input_ids'].view(-1, seq_len)\n\t        attention_mask = batch['attention_mask'].view(-1, seq_len)\n\t        # outputs.last_hidden_state: [batch_size * (1 + 1 + neg), seq_len, embedding_dim]\n\t        outputs = self.model(input_ids, attention_mask=attention_mask, return_dict=True)\n\t        embeddings = outputs.last_hidden_state.view(batch_size, n_samples, seq_len, -1)\n\t        query_embedding = embeddings[:, 0:1]  # [batch_size, 1, seq_len, embedding_dim]\n\t        samples_embedding = embeddings[:, 1:]  # [batch_size, 1 + neg, seq_len, embedding_dim]\n\t        pooled_query_embedding, pooled_sample_embeddings = self.pool_sentence_embedding(\n\t            query_embedding, samples_embedding,\n\t            batch['attention_mask'][:, 0:1], batch['attention_mask'][:, 1:])\n", "        loss = self.compute_loss(pooled_query_embedding, pooled_sample_embeddings)\n\t        return loss\n\t    def training_step(self, batch, batch_idx):\n\t        train_loss =  self.batch_forward(batch)\n\t        self.log('train_loss', train_loss)\n\t        return train_loss\n\t    def validation_step(self, batch, batch_idx):\n\t        val_loss =  self.batch_forward(batch)\n\t        self.log('val_loss', val_loss)\n\t        return val_loss\n", "    def configure_optimizers(self) :\n\t        return torch.optim.Adam(self.parameters(), lr=self.lr)\n\t    def save_huggingface_model(self, save_dir):\n\t        \"\"\"Will save the model, so you can reload it using `from_pretrained()`.\"\"\"\n\t        save_path = Path(save_dir)\n\t        if not save_path.exists():\n\t            save_path.mkdir(parents=True)\n\t        state_dict = self.model.state_dict()\n\t        torch.save(state_dict, os.path.join(save_dir, 'pytorch_model.bin'))\n\t        with open(os.path.join(save_dir, 'config.json'), 'w', encoding='utf-8') as f:\n", "            json.dump(self.config.to_dict(), f)\n"]}
