{"filename": "lm_benchmark/eval_cmd_generator.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport dataclasses\n\t@dataclasses.dataclass\n\tclass Setting(object):\n\t    exp_dir: str\n\t    eval_len: int\n\t    topk: int\n\t    mem_size: int\n", "    mid_length: int\n\t    use_cache: bool = True\n\t    selection_method: str = \"per_token_and_head\"\n\t    mem_cache_freq: int = 50\n\t    eval_sample_size: int = 4000000\n\t    lm_cache: str = \"mem\"\n\texp_dirs = {\n\t    \"arxiv_landmark\": \"./exps/arxiv_landmark\",\n\t    \"arxiv_baseline\": \"./exps/arxiv_baseline\",\n\t    \"pg19_landmark\": \"./exps/pg19_landmark\",\n", "    \"pg19_baseline\": \"./exps/pg19_baseline\",\n\t    \"pg19_xl\": \"./exps/pg19_xl\",\n\t}\n\tsettings = [\n\t    dict(exp_dir=exp_dirs[\"pg19_baseline\"], eval_len=360, mid_length=360, \n\t         lm_cache=\"none\", mem_cache_freq=None, mem_size=None, topk=None, use_cache=False,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_baseline\"], eval_len=512, mid_length=512, \n\t         lm_cache=\"none\", mem_cache_freq=None, mem_size=None, topk=None, use_cache=False,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_xl\"], eval_len=2048, mid_length=256, \n\t         lm_cache=\"kv\", mem_cache_freq=None, mem_size=256, topk=None,eval_sample_size=None),\n", "    dict(exp_dir=exp_dirs[\"pg19_xl\"], eval_len=4096, mid_length=256, \n\t         lm_cache=\"kv\", mem_cache_freq=None, mem_size=256, topk=None,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=512, mid_length=250, mem_size=10, topk=2,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=2,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=350, mem_size=40, topk=2,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=300, mem_size=40, topk=3,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=20, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=40, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=2,eval_sample_size=None),\n", "    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=2,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=40, topk=4,eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=2,\n\t         selection_method=\"max_over_heads\",eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=4,\n\t         selection_method=\"max_over_heads\",eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=4,\n\t         selection_method=\"max_over_heads\",eval_sample_size=None),\n", "    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=2,\n\t         selection_method=\"max_over_tokens\",eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=4,\n\t         selection_method=\"max_over_tokens\",eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"pg19_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=4,\n\t         selection_method=\"max_over_tokens\",eval_sample_size=None),\n\t    dict(exp_dir=exp_dirs[\"arxiv_baseline\"], eval_len=360, mid_length=360, \n\t         lm_cache=None, mem_cache_freq=None, mem_size=None, topk=None, use_cache=False),\n\t    dict(exp_dir=exp_dirs[\"arxiv_baseline\"], eval_len=512, mid_length=512, \n\t         lm_cache=None, mem_cache_freq=None, mem_size=None, topk=None, use_cache=False),\n", "    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=512, mid_length=250, mem_size=10, topk=2),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=2),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=2048, mid_length=350, mem_size=40, topk=2),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=2048, mid_length=300, mem_size=40, topk=3),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=2048, mid_length=250, mem_size=20, topk=4),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=2048, mid_length=250, mem_size=40, topk=4),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=4096, mid_length=250, mem_size=40, topk=4),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=2),\n\t    dict(exp_dir=exp_dirs[\"arxiv_landmark\"], eval_len=4096, mid_length=250, mem_size=80, topk=4),\n\t]\n", "import itertools\n\tdef product_dict(**kwargs):\n\t    keys = kwargs.keys()\n\t    for instance in itertools.product(*kwargs.values()):\n\t        yield dict(zip(keys, instance))\n\tflat_settings = []\n\tfor setting in settings:\n\t    flat_settings.extend(product_dict(**{x: y if isinstance(y, list) else [y] for x, y in setting.items()}))\n\tsettings = [Setting(**d) for d in flat_settings]\n\tlast_exp_dir = None\n", "print (\"#!/bin/bash\")\n\tfor setting in settings:\n\t     s_lines = []\n\t     if last_exp_dir != setting.exp_dir:\n\t          s_lines.append(\"\"\"EXP_DIR=\"{exp_dir}\";\"\"\".format(**dataclasses.asdict(setting)))\n\t     last_exp_dir = setting.exp_dir\n\t     use_cache_str = \"--use_cache\" if setting.use_cache else \"\"\n\t     mem_size_flag = \"\"\n\t     s_lines += [\"\"\"\n\t     filename=\"$EXP_DIR/eval-{eval_len}-{selection_method}-{topk}-memsize{mem_size}-midlength{mid_length}-memcachefreq{mem_cache_freq}\"; \n", "     grep val_acc $filename /dev/null; \n\t     if [[ $? -ne 0 ]]; then \n\t          script -c \\\\\n\t          \"python eval.py \\\\\n\t               --checkpoint  $EXP_DIR \\\\\n\t               --distributed_backend None  \\\\\n\t               --lm_cache {lm_cache} \\\\\"\"\",\"\"\"\n\t               --mem_cache_size {mem_size} \\\\\"\"\" if setting.mem_size is not None else \"\",\"\"\"\n\t               --mem_cache_freq {mem_cache_freq} \\\\\"\"\" if setting.mem_cache_freq is not None else \"\", \"\"\"\n\t               --mem_freq None \\\\\n", "               --eval_seq_length {eval_len} \\\\\n\t               --cache_selection_method {selection_method} \\\\\"\"\",\"\"\"\n\t               --cache_topk {topk} \\\\\"\"\" if setting.topk is not None else \"\", \"\"\"\n\t               --no_compile \\\\\n\t               --batch_size 16 \\\\\n\t               --mid_length {mid_length} \\\\\n\t               --positional_encoder rotary \\\\\n\t               --pos_jump_on_mem 0   \\\\\n\t               {use_cache_str} \\\\\"\"\", \"\"\"\n\t               --eval_sample_size {eval_sample_size}\"\"\" if setting.eval_sample_size is not None else \"\", \"\"\"\n", "               \" $filename; \n\t     fi;\"\"\"]\n\t     print (\"\".join(s_lines).format(**dataclasses.asdict(setting), use_cache_str=use_cache_str))\n"]}
{"filename": "lm_benchmark/main.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport sys\n\timport numpy as np\n\timport torch\n\timport inspect\n\timport json\n\timport copy\n", "import argparse\n\timport random\n\timport wandb\n\timport config\n\timport models\n\tfrom data import get_dataset, prepare_dataset\n\tfrom optim.base import train_base\n\tfrom optim.transformer_xl import train_xl\n\timport distributed\n\tdef get_args():\n", "    parser = argparse.ArgumentParser(allow_abbrev=False)\n\t    parser.add_argument('--config_format', default='base', choices=config.registered_formats())\n\t    args, rem_args = parser.parse_known_args()\n\t    return config.parse_args_with_format(format=args.config_format, base_parser=parser, args=rem_args, namespace=args)\n\tdef main(args): \n\t    torch.backends.cuda.matmul.allow_tf32 = True # allows us to make sure we're able to use tensorfloat32 during training\n\t    torch.backends.cudnn.allow_tf32 = True\n\t    distributed_backend = distributed.make_backend_from_args(args)\n\t    args = distributed_backend.get_adjusted_args_for_process(args)\n\t    args.device = torch.device(args.device)\n", "    torch.cuda.set_device(args.device)\n\t    device_type = 'cuda' if 'cuda' in str(args.device) else 'cpu'\n\t    torch.manual_seed(args.seed)\n\t    random.seed(args.seed)\n\t    np.random.seed(args.seed)\n\t    print(f\"Loading dataset '{args.dataset}'\")\n\t    if distributed_backend.is_master_process():\n\t        prepare_dataset(args)\n\t    distributed_backend.sync()\n\t    data = get_dataset(args) # data is a dict: {'train': train_tokenized, 'val': eval_tokenized}\n", "    print(f\"Num training tokens: {len(data['train'])}\")\n\t    print(f\"Num validation tokens: {len(data['val'])}\")\n\t    model = models.make_model_from_args(args).to(args.device)\n\t    model = distributed_backend.transform_model(model)\n\t    group_specs = distributed_backend.get_raw_model(model).get_parameter_group_specs()\n\t    param_name_mapping = {p_name: p for p_name, p in model.named_parameters()}\n\t    optimized_params_cnt = 0\n\t    for g in group_specs:\n\t        params = []\n\t        for p_name in g[\"params\"]:\n", "            translated_p_names = distributed_backend.translate_model_parameter_name_for_node(p_name)\n\t            params += [param_name_mapping[p_name] for p_name in translated_p_names]\n\t        g[\"params\"] = params\n\t        optimized_params_cnt += sum([p.numel() for p in g[\"params\"]])\n\t    print(\"number of optimized parameters: %.2fM\" % (optimized_params_cnt/1e6,))\n\t    if args.opt == 'adamw':\n\t        use_fused = (device_type == 'cuda') and ('fused' in inspect.signature(torch.optim.AdamW).parameters)\n\t        print(f\"using fused AdamW: {use_fused}\")\n\t        extra_args = dict(fused=True) if use_fused else dict()\n\t        opt = torch.optim.AdamW(group_specs, lr=args.lr, betas=(args.beta1, args.beta2),\n", "                                weight_decay=args.weight_decay, **extra_args)\n\t    elif args.opt == 'adafactor':\n\t        from optim.adafactor import Adafactor\n\t        opt = Adafactor(group_specs, lr=args.lr)\n\t    else:\n\t        opt = torch.optim.SGD(group_specs, lr=args.lr, momentum=0.9, weight_decay=args.weight_decay)\n\t    if args.scheduler != 'none':\n\t        if args.scheduler in ['cos', 'linear']:\n\t            scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer=opt, max_lr=args.lr, total_steps=args.iterations, \n\t                                                            pct_start=args.warmup_percent, anneal_strategy=args.scheduler, \n", "                                                            cycle_momentum=False, div_factor=1e2, final_div_factor=.05)\n\t        else:\n\t            raise NotImplementedError(f\"Unknown scheduler type: {args.scheduler}.\")\n\t    else:\n\t        scheduler = None\n\t    args.world_size = distributed_backend.get_world_size()\n\t    exp_name = args.exp_name\n\t    if distributed_backend.is_master_process() and args.wandb:\n\t        params_copy = copy.deepcopy(vars(args))\n\t        del params_copy['device']\n", "        wandb.init(project=args.wandb_project, name=exp_name, config=params_copy)\n\t    ckpt_path = f\"{args.results_base_folder}/{args.dataset}/{args.model}/{exp_name}\"\n\t    if not os.path.exists(ckpt_path):\n\t        if distributed_backend.is_master_process():\n\t            os.makedirs(ckpt_path)\n\t    else:\n\t        if os.path.isfile(f\"{ckpt_path}/summary.json\"): # the experiment was already completed\n\t            print(f\"Already found experiment '{ckpt_path}'.\\nSkipping.\")\n\t            sys.exit(0)\n\t    if args.optimization_process == 'transformer_xl':\n", "        train = train_xl\n\t    else: \n\t        train = train_base\n\t    print(f\"\\nTraining model={args.model} \\n{vars(args)}\\n\")\n\t    stats = train(model, opt, data, scheduler, args.iterations, args.acc_steps, args.batch_size, args.sequence_length, \n\t                  eval_freq=args.eval_freq, \n\t                  distributed_backend=distributed_backend,\n\t                  ckpt_path=ckpt_path, extra_args=args)\n\t    args.device = None\n\t    args.dtype = None\n", "    stats['args'] = vars(args)\n\t    if distributed_backend.is_master_process():\n\t        with open(f\"{ckpt_path}/summary.json\", \"w\") as fs:\n\t            json.dump(stats, fs)\n\t    distributed_backend.finalize()\n\tif __name__ == \"__main__\":\n\t    args = get_args()\n\t    main(args)\n"]}
{"filename": "lm_benchmark/eval.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport sys\n\timport numpy as np\n\timport torch\n\timport inspect\n\timport json\n\timport copy\n", "import argparse\n\timport random\n\timport wandb\n\timport logging\n\tfrom tqdm import tqdm\n\timport config\n\timport models\n\tfrom data import get_dataset, prepare_dataset\n\tfrom optim.base import train_base\n\timport distributed\n", "from optim.utils import get_batch\n\tdef get_args():\n\t    parser = argparse.ArgumentParser(allow_abbrev=False)\n\t    parser.add_argument('--checkpoint', type=str, required=True)\n\t    args, rem_args = parser.parse_known_args()\n\t    if os.path.isfile(args.checkpoint):\n\t        args.checkpoint, args.checkpoint_filename = os.path.split(args.checkpoint)\n\t    else:\n\t        args.checkpoint_filename = \"ckpt.pt\"\n\t    with open(os.path.join(args.checkpoint, \"summary.json\")) as f:\n", "        summary = json.load(f)\n\t    for k, v in summary['args'].items():\n\t        if k not in [\"device\", \"dtype\"]:\n\t            setattr(args, k, v)\n\t    return config.parse_args_with_format(format=args.config_format, base_parser=argparse.ArgumentParser(allow_abbrev=False), args=rem_args, namespace=args)\n\tdef get_as_batch(data, seq_length, batch_size, device='cpu', sample_size=None):\n\t    all_ix = list(range(0, len(data), seq_length))\n\t    assert all_ix[-1] + seq_length + 1 > len(data)\n\t    all_ix.pop()\n\t    if sample_size is not None:\n", "        all_ix = np.random.choice(all_ix, size=sample_size // seq_length, replace=False).tolist()\n\t    idx = 0\n\t    for idx in range(0, len(all_ix), batch_size):\n\t        ix = all_ix[idx:idx+batch_size]\n\t        assert all([idx + seq_length + 1 <= len(data) for idx in ix])\n\t        x = torch.stack([torch.from_numpy((data[i:i+seq_length]).astype(np.int64)) for i in ix])\n\t        y = torch.stack([torch.from_numpy((data[i+1:i+1+seq_length]).astype(np.int64)) for i in ix])\n\t        if device != 'cpu':\n\t            x, y = x.pin_memory().to(device, non_blocking=True), y.pin_memory().to(device, non_blocking=True)\n\t        yield x, y\n", "def iceildiv(x, y):\n\t    return (x + y - 1) // y\n\tdef evaluate(model, data, iterations, acc_steps, batch_size, sequence_length, distributed_backend, extra_args):\n\t    device_type = 'cuda' if 'cuda' in str(extra_args.device) else 'cpu'\n\t    type_ctx = nullcontext() if device_type == 'cpu' else torch.amp.autocast(\n\t        device_type=device_type, dtype=extra_args.dtype)  # extra_args.dtype)\n\t    itr, substep, best_val_loss, text_table = 0, 0, float('inf'), None # best_val_loss not used atm, early stopping not recommended but possible \n\t    stats = {}\n\t    num_substeps_per_epoch = len(data['val']) // (batch_size * sequence_length)\n\t    if not extra_args.no_compile:\n", "        print(f\"Compiling model ...\")\n\t        import torch._dynamo as torchdynamo\n\t        torchdynamo.config.guard_nn_modules = True\n\t        # torchdynamo.config.log_level = logging.DEBUG\n\t        model = torch.compile(model) # requires pytorch 2.0+\n\t    model.eval()\n\t    loss_list_val, acc_list = [], []\n\t    loss_step_list_val = []\n\t    max_num_batches = 400\n\t    with torch.no_grad():\n", "        mid_length = extra_args.mid_length\n\t        print(f\"Sending sub-sequences of length at most {mid_length}\")\n\t        seq_length = extra_args.eval_seq_length \n\t        print(f\"Using seq length {seq_length}\")\n\t        torch.set_printoptions(sci_mode=False)\n\t        for idx, (x, y) in tqdm(\n\t            enumerate(\n\t                get_as_batch(\n\t                    data['val'], \n\t                    seq_length, \n", "                    batch_size, \n\t                    device=extra_args.device, \n\t                    sample_size=extra_args.eval_sample_size\n\t                )\n\t            ),\n\t            total=iceildiv(\n\t                extra_args.eval_sample_size // seq_length if extra_args.eval_sample_size is not None else \n\t                iceildiv(len(data['val']), seq_length), \n\t                batch_size\n\t            )\n", "        ):\n\t            val_loss = 0.\n\t            acc = 0.\n\t            cnt = 0\n\t            model.clear_state()\n\t            for part_idx, i in enumerate(range(0, x.shape[1], mid_length)):\n\t                part_len = x[:, i:i + mid_length].shape[1]\n\t                with type_ctx:\n\t                    outputs = model(x[:, i:i + mid_length], targets=y[:, i:i+mid_length].contiguous(), get_logits=True, use_cache=extra_args.use_cache)\n\t                val_loss = outputs['loss'] * part_len + val_loss \n", "                acc = ((outputs['logits'].argmax(-1) == y[:, i:i+mid_length]).float().sum()) + acc \n\t                cnt += part_len\n\t                while len(loss_step_list_val) <= part_idx:\n\t                    loss_step_list_val.append([])\n\t                loss_step_list_val[part_idx].append(outputs['loss'].item())\n\t            val_loss /= cnt\n\t            acc /= cnt\n\t            loss_list_val.append(val_loss.item())\n\t            acc_list.append(acc.item())\n\t    stats['val_acc'] = torch.as_tensor(acc_list).mean().item()\n", "    stats['val_loss'] = torch.as_tensor(loss_list_val).mean().item()\n\t    stats['val_perplexity'] = 2.71828 ** stats['val_loss']\n\t    stats['val_perplexity_per_chunk'] = torch.exp(torch.as_tensor(loss_step_list_val).mean(dim=1))\n\t    return stats\n\tdef main(args): \n\t    torch.backends.cuda.matmul.allow_tf32 = True # allows us to make sure we're able to use tensorfloat32 during training\n\t    torch.backends.cudnn.allow_tf32 = True\n\t    distributed_backend = distributed.make_backend_from_args(args)\n\t    args = distributed_backend.get_adjusted_args_for_process(args)\n\t    args.device = torch.device(args.device)\n", "    torch.cuda.set_device(args.device)\n\t    device_type = 'cuda' if 'cuda' in str(args.device) else 'cpu'\n\t    torch.manual_seed(args.seed)\n\t    random.seed(args.seed)\n\t    np.random.seed(args.seed)\n\t    print(f\"Loading dataset '{args.dataset}'\")\n\t    if distributed_backend.is_master_process():\n\t        prepare_dataset(args)\n\t    distributed_backend.sync()\n\t    data = get_dataset(args) # data is a dict: {'train': train_tokenized, 'val': eval_tokenized}\n", "    print(f\"Num training tokens: {len(data['train'])}\")\n\t    print(f\"Num validation tokens: {len(data['val'])}\")\n\t    model = models.make_model_from_args(args).to(args.device)\n\t    checkpoint = torch.load(os.path.join(args.checkpoint, args.checkpoint_filename))\n\t    model.load_state_dict({x: y for x, y in checkpoint['model'].items() if \"attn.bias\" not in x and \"wpe\" not in x}, strict=False)\n\t    model = distributed_backend.transform_model(model)\n\t    print(f\"\\Evaluating model={args.model} \\n{vars(args)}\\n\")\n\t    stats = evaluate(model, data, args.iterations, args.acc_steps, args.batch_size, args.sequence_length, \n\t                  distributed_backend=distributed_backend,\n\t                  extra_args=args)\n", "    print(stats)\n\t    distributed_backend.finalize()\n\tif __name__ == \"__main__\":\n\t    args = get_args()\n\t    main(args)\n"]}
{"filename": "lm_benchmark/distributed/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import ddp\n\tfrom . import single\n\tBACKEND_TYPE_TO_MODULE_MAP = {\n\t    \"nccl\": ddp.DataParallelDistributedBackend,\n\t    None: single.SinlgeNodeBackend,\n\t}\n\tdef make_backend_from_args(args):\n", "    return BACKEND_TYPE_TO_MODULE_MAP[args.distributed_backend](args)\n\tdef registered_backends():\n\t    return BACKEND_TYPE_TO_MODULE_MAP.keys()\n"]}
{"filename": "lm_benchmark/distributed/backend.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom typing import List\n\tclass DistributedBackend(object):\n\t    def __init__(self, args):\n\t        pass\n\t    def transform_model(self, model):\n\t        raise NotImplementedError\n\t    def get_context_for_microstep_forward(self, model, microstep_idx, gradient_accumulation_steps):\n", "        raise NotImplementedError\n\t    def is_master_process(self) -> bool:\n\t        raise NotImplementedError\n\t    def get_adjusted_args_for_process(self, args):\n\t        raise NotImplementedError\n\t    def get_raw_model(self, model):\n\t        raise NotImplementedError\n\t    def translate_model_parameter_name_for_node(self, parameter_name) -> List[str]:\n\t        raise NotImplementedError\n\t    def get_world_size(self):\n", "        raise NotImplementedError\n\t    def sync(self):\n\t        raise NotImplementedError\n\t    def finalize(self):\n\t        pass\n"]}
{"filename": "lm_benchmark/distributed/single.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom contextlib import nullcontext\n\tfrom .backend import DistributedBackend\n\tclass SinlgeNodeBackend(DistributedBackend):\n\t    def transform_model(self, model):\n\t        return model\n\t    def get_context_for_microstep_forward(self, *args, **kwargs):\n\t        return nullcontext()\n", "    def get_adjusted_args_for_process(self, args):\n\t        return args\n\t    def is_master_process(self) -> bool:\n\t        return True\n\t    def get_raw_model(self, model):\n\t        return model\n\t    def get_world_size(self):\n\t        return 1\n\t    def sync(self):\n\t        pass\n", "    def translate_model_parameter_name_for_node(self, parameter_name):\n\t        return [parameter_name]\n"]}
{"filename": "lm_benchmark/distributed/ddp.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport math\n\tfrom contextlib import contextmanager\n\tfrom torch.nn.parallel import DistributedDataParallel as DDP\n\tfrom torch.distributed import init_process_group, destroy_process_group, get_world_size, barrier\n\tfrom .backend import DistributedBackend\n\tclass DataParallelDistributedBackend(DistributedBackend):\n", "    def __init__(self, args):\n\t        self.rank = int(os.environ.get('RANK', -1))\n\t        assert self.rank != -1, \"DDP backend can not be used without rank\"\n\t        assert \"cuda\" in args.device, \"DDP backend can not be used on non-CUDA devices\"\n\t        init_process_group(backend=args.distributed_backend)\n\t        self.local_rank = int(os.environ['LOCAL_RANK'])\n\t    def get_adjusted_args_for_process(self, args):\n\t        effective_batch_size = args.batch_size * args.acc_steps\n\t        world_size = self.get_world_size()\n\t        if effective_batch_size % world_size != 0:\n", "            raise ValueError(f\"Effective batch size \"\n\t                             \"{effective_batch_size} is not divisible \"\n\t                             \"by the world size {world_size}.\")\n\t        acc_steps_div = math.gcd(args.acc_steps, world_size)\n\t        args.acc_steps = args.acc_steps // acc_steps_div\n\t        args.batch_size = args.batch_size // (world_size // acc_steps_div)\n\t        args.device = f'cuda:{self.local_rank}'\n\t        args.seed = args.seed + self.local_rank\n\t        return args\n\t    def transform_model(self, model):\n", "        return DDP(model, device_ids=[self.local_rank], find_unused_parameters=True)\n\t    @contextmanager\n\t    def get_context_for_microstep_forward(self, model, microstep_idx, gradient_accumulation_steps):\n\t        model.require_backward_grad_sync = (\n\t            microstep_idx == gradient_accumulation_steps - 1)\n\t        yield\n\t    def is_master_process(self) -> bool:\n\t        return self.rank == 0\n\t    def get_raw_model(self, model):\n\t        return model.module\n", "    def translate_model_parameter_name_for_node(self, parameter_name):\n\t        return [f'module.{parameter_name}']\n\t    def get_world_size(self):\n\t        return get_world_size()\n\t    def sync(self):\n\t        barrier()\n\t    def finalize(self):\n\t        destroy_process_group()\n"]}
{"filename": "lm_benchmark/config/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import rotary\n\tCONFIG_FORMAT_TO_MODULE_MAP = {\n\t    \"rotary\": rotary,\n\t}\n\tdef parse_args_with_format(format, base_parser, args, namespace):\n\t    return CONFIG_FORMAT_TO_MODULE_MAP[format].parse_args(base_parser, args, namespace)\n\tdef registered_formats():\n", "    return CONFIG_FORMAT_TO_MODULE_MAP.keys()\n"]}
{"filename": "lm_benchmark/config/rotary.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport argparse\n\timport torch\n\timport distributed\n\timport models\n\tdef none_or_str(value):\n\t    if value == 'None':\n\t        return None\n", "    return value\n\tdef none_or_int(value):\n\t    if value == 'None':\n\t        return None\n\t    return int(value)\n\tdef none_or_float(value):\n\t    if value == 'None':\n\t        return None\n\t    return float(value)\n\tdef parse_args(base_parser, args, namespace):\n", "    parser = base_parser\n\t    # General training params\n\t    parser.add_argument('--batch_size', default=50, type=int)\n\t    parser.add_argument('--acc_steps', default=4, type=int)\n\t    parser.add_argument('--seed', default=2, type=int)\n\t    parser.add_argument('--device', default='cuda:0', type=str)\n\t    parser.add_argument('--iterations', default=15000, type=int)\n\t    parser.add_argument('--lr', default=2e-3, type=float)\n\t    parser.add_argument('--warmup_percent', default=0.02, type=float)\n\t    parser.add_argument('--weight_decay', default=1e-3, type=float)\n", "    parser.add_argument('--beta1', default=0.9, type=float)\n\t    parser.add_argument('--beta2', default=0.95, type=float)\n\t    parser.add_argument('--scheduler', default='cos', choices=['linear', 'cos', 'none'])\n\t    parser.add_argument('--opt', default='adamw', choices=['adamw', 'sgd', 'adafactor'])\n\t    parser.add_argument('--eval_freq', default=200, type=int) # in iterations\n\t    parser.add_argument('--results_base_folder', default=\"./exps\", type=str) \n\t    parser.add_argument('--save_checkpoint_freq', default=None, type=int, required=False)\n\t    # Dataset params\n\t    parser.add_argument('--dataset', choices=['pg19', 'arxivmath'])\n\t    parser.add_argument('--vocab_size', default=50304, type=int)\n", "    parser.add_argument('--mem_freq', default=50, type=none_or_int, required=False, help=\"Frequency of landmark tokens\")\n\t    # Model params\n\t    parser.add_argument('--model', default='base_rotary', choices=models.registered_models())\n\t    parser.add_argument('--dropout', default=0.0, type=float)\n\t    parser.add_argument('--group_dropout', default=None, type=float, required=False)\n\t    parser.add_argument('--n_head', default=8, type=int)\n\t    parser.add_argument('--n_layer', default=12, type=int) # depths in att + ff blocks\n\t    parser.add_argument('--n_embd', default=1024, type=int) # embedding size / hidden size ... \n\t    parser.add_argument('--sequence_length', default=512, type=int)\n\t    parser.add_argument('--dtype', default=\"torch.bfloat16\", type=str)\n", "    parser.add_argument('--bias', default=False, type=bool)\n\t    parser.add_argument('--no_compile', action='store_true') # if true then model is not compiled \n\t    parser.add_argument('--run_prefix', default=None, type=str, required=False) # is added before the autogenerated experiment name\n\t    parser.add_argument('--exp_name', default=None, type=str, required=False) # is added before the autogenerated experiment name\n\t    parser.add_argument('--softmax_func', default=\"mem_opt\", type=str, required=False,\n\t                        choices=[\"mem_opt\", \"nomem\", \"mem\", \"ignore_mem\"])  # distributed backend type\n\t    parser.add_argument('--positional_encoder', default=\"rotary\", type=str, required=False,\n\t                        choices=models.positional_encoders.registered_encoders())  # distributed backend type\n\t    # logging params (WandB)\n\t    parser.add_argument('--wandb', action='store_true') # whether to use wandb or not\n", "    parser.add_argument('--wandb_project', default=\"my-project\", type=str)\n\t    # Distributed args\n\t    parser.add_argument('--distributed_backend', default=None, type=none_or_str, required=False,\n\t                        choices=distributed.registered_backends())  # distributed backend type\n\t    # Landmark tokens\n\t    parser.add_argument('--max_groups_for_softmax', default=16, type=int, required=False, help=\"Should be at least 2 + max. number of landmark tokens in one chunk.\")\n\t    # Inference\n\t    parser.add_argument('--use_cache', action='store_true')\n\t    parser.add_argument('--lm_cache', default=\"none\", type=str, required=False,\n\t                        choices=models.caches.registered_caches())\n", "    parser.add_argument('--mem_cache_size', default=None, type=int, required=False)\n\t    parser.add_argument('--mem_cache_freq', default=None, type=int, required=False, help=\"Frequency to add landmark tokens in the input (block size at inference)\")\n\t    parser.add_argument('--cache_topk', default=1, type=int, required=False)\n\t    parser.add_argument('--cache_selection_method', default=\"per_token_and_head\", type=str, required=False,)  \n\t    parser.add_argument('--eval_seq_length', default=512, type=int, required=False, help=\"Evaluation Length\")\n\t    parser.add_argument('--eval_sample_size', default=None, type=none_or_int, required=False, help=\"Size of the random subset of validation set used for evaluation\")\n\t    parser.add_argument('--mid_length', default=250, type=int, required=False, help=\"Size of chunks to break the input into\")\n\t    parser.add_argument('--allow_cache_during_training', action='store_true') \n\t    parser.add_argument('--postpone_lm_cache', action='store_true') \n\t    parser.add_argument('--optimization_process', default=\"landmark\", type=str, required=False,\n", "                        choices=[\"transformer_xl\", \"landmark\"])  # distributed backend type \n\t    # CMT Token\n\t    parser.add_argument('--under_rem_score_prob', default=0., type=none_or_float, required=False)\n\t    parser.add_argument('--rem_cutoff', default=None, type=none_or_float, required=False)\n\t    parser.add_argument('--enable_rem_score', default=False, action='store_true', required=False)\n\t    # Positional Augmentation\n\t    parser.add_argument('--pos_jump_on_mem', default=None, type=none_or_int, required=False)\n\t    # Transformer XL\n\t    parser.add_argument('--total_sequence_length', default=None, type=int, required=False)\n\t    args = parser.parse_args(args, namespace)\n", "    if args.exp_name is None:\n\t        special_name_handle_fields = {\"model\", \"lr\", \"batch_size\", \n\t                                      \"acc_steps\", \"seed\", \"exp_name\", \n\t                                      \"wandb\", \"wandb_project\",\n\t                                      \"run_prefix\", \"distributed_backend\", \"config_format\",\n\t                                      \"sequence_length\", \"mem_freq\"}\n\t        overriden_values = []\n\t        for key in vars(args):\n\t            if key in special_name_handle_fields:\n\t                continue\n", "            if getattr(args, key) != parser.get_default(key):\n\t                overriden_values.append((key, getattr(args, key)))\n\t        chunk_len = 10\n\t        overriden_values_str_parts = []\n\t        for chunk_id in range(0, len(overriden_values), chunk_len):\n\t            overriden_values_str = \"_\".join([\"{}={}\".format(key, value) for key, value in overriden_values[chunk_id:chunk_id+chunk_len]])\n\t            overriden_values_str_parts.append(overriden_values_str)\n\t        overriden_values_str = \"/\".join(overriden_values_str_parts)\n\t        exp_name = \"\"\n\t        if args.run_prefix is not None:\n", "            exp_name += f\"{args.run_prefix}_\"\n\t        exp_name += f\"{args.model}_lr{args.lr}_memfreq{args.mem_freq}_bs{args.batch_size}x{args.acc_steps}_seqlen{args.sequence_length}/{overriden_values_str}_seed={args.seed}\"\n\t        args.exp_name = exp_name\n\t    args.landmark_id = 50260\n\t    if args.dtype == \"torch.bfloat16\":\n\t        args.dtype = torch.bfloat16\n\t    elif args.dtype == \"torch.float16\":\n\t        args.dtype = torch.float16\n\t    landmark_freq  = max(args.mem_cache_freq or 0,  args.mem_freq or 0)\n\t    if landmark_freq != 0 and args.max_groups_for_softmax < args.sequence_length // landmark_freq + 1 + 2:\n", "        print(\"CRITICAL WARNING: Maximum number of groups for softmax is too low. Adjust with --max_groups_for_softmax.\")\n\t    return args\n"]}
{"filename": "lm_benchmark/data/arxiv_math.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport zipfile\n\timport urllib\n\timport numpy as np\n\timport tiktoken\n\timport torch\n\timport regex\n", "import multiprocessing\n\timport itertools\n\timport functools\n\tfrom .utils import add_mem_tokens\n\tARXIVMATH_ORIGINAL_PATH = \"./data/proof-pile/\"\n\tdef get_path(config):\n\t    dataset_name = f\"arxiv_mem={config.mem_freq}\"\n\t    return os.path.join(os.path.dirname(__file__), f\"datasets/{dataset_name}/\")\n\tdef prepare_arxivmath_data(config):\n\t    DATA_PATH = get_path(config)\n", "    print(DATA_PATH)\n\t    os.makedirs(DATA_PATH, exist_ok=True)\n\t    if not os.path.exists(os.path.join(DATA_PATH, 'train.bin')):\n\t        train_data = np.memmap(os.path.join(ARXIVMATH_ORIGINAL_PATH, 'train.bin'), dtype=np.uint16, mode='r')\n\t        raw_tokenized_train = add_mem_tokens(config.landmark_id, train_data, config.mem_freq)\n\t        train_tokenized = np.array(raw_tokenized_train, dtype=np.uint16) \n\t        train_tokenized.tofile(os.path.join(DATA_PATH, 'train.bin'))\n\t    if not os.path.exists(os.path.join(DATA_PATH, 'val.bin')):\n\t        val_data = np.memmap(os.path.join(ARXIVMATH_ORIGINAL_PATH, 'validation.bin'), dtype=np.uint16, mode='r')\n\t        raw_tokenized_eval = add_mem_tokens(config.landmark_id, val_data, config.mem_freq)\n", "        eval_tokenized = np.array(raw_tokenized_eval, dtype=np.uint16)\n\t        eval_tokenized.tofile(os.path.join(DATA_PATH, 'val.bin'))\n\t    print(\"completed the tokenization process!\")\n\tdef get_arxivmath_data(config):\n\t    DATA_PATH = get_path(config)\n\t    train_data = np.memmap(os.path.join(DATA_PATH, 'train.bin'), dtype=np.uint16, mode='r')\n\t    val_data = np.memmap(os.path.join(DATA_PATH, 'val.bin'), dtype=np.uint16, mode='r')\n\t    return {'train': train_data, 'val': val_data}\n"]}
{"filename": "lm_benchmark/data/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import pg19, arxiv_math\n\tPREPARE_GET_DATASET_MAP = {\n\t    \"pg19\": (pg19.prepare_pg19_data, pg19.get_pg19_data),\n\t    \"arxivmath\": (arxiv_math.prepare_arxivmath_data, arxiv_math.get_arxivmath_data)\n\t}\n\tdef prepare_dataset(args):\n\t    \"\"\" Fetch the right dataset given by the args.dataset parameter. The logic for each dataset is\n", "     contained in its own pythin file. The expected format at the moment is a disctionary of np.memmap\n\t     containing two keys: 'train' and 'val', corresponding to the tokenized training and validation data. \"\"\"\n\t    return PREPARE_GET_DATASET_MAP[args.dataset][0](args)\n\tdef get_dataset(args):\n\t    \"\"\" Fetch the right dataset given by the args.dataset parameter. The logic for each dataset is\n\t     contained in its own pythin file. The expected format at the moment is a disctionary of np.memmap\n\t     containing two keys: 'train' and 'val', corresponding to the tokenized training and validation data. \"\"\"\n\t    return PREPARE_GET_DATASET_MAP[args.dataset][1](args)\n"]}
{"filename": "lm_benchmark/data/utils.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport numpy as np\n\timport torch\n\timport multiprocessing\n\timport itertools\n\timport functools\n\tdef apply_add_mem_tokens(mem_id, tokens_filename, freq, start_idx, end_idx):\n\t    tokens = np.memmap(tokens_filename, dtype=np.uint16, mode='r')\n", "    print(f\"Processing {start_idx}-{end_idx}\")\n\t    tokens_with_mem = []\n\t    for t_idx in range(start_idx, end_idx):\n\t        t =  tokens[t_idx]\n\t        tokens_with_mem.append(t)\n\t        if freq is not None and t_idx % freq == freq - 1:\n\t            tokens_with_mem.append(mem_id)\n\t    return tokens_with_mem\n\tdef add_mem_tokens(mem_id, tokens, freq, n_workers=32):\n\t    print(len(tokens))\n", "    with multiprocessing.Pool(n_workers) as pool:\n\t        ids = list(range(0, len(tokens), 10 * 1000 * 1000))\n\t        pair_ids = zip(ids, ids[1:] + [len(tokens)])\n\t        apply = functools.partial(apply_add_mem_tokens, mem_id, tokens.filename, freq)\n\t        return list(itertools.chain.from_iterable(pool.starmap(apply, pair_ids)))\n"]}
{"filename": "lm_benchmark/data/pg19.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport zipfile\n\timport urllib\n\timport numpy as np\n\timport tiktoken\n\timport torch\n\timport regex\n", "import multiprocessing\n\timport itertools\n\timport functools\n\tfrom .utils import add_mem_tokens\n\tPG19_ORIGINAL_PATH = \"./data/pg19\"\n\tdef get_path(config):\n\t    dataset_name = f\"pg19_mem={config.mem_freq}\"\n\t    return os.path.join(os.path.dirname(__file__), f\"datasets/{dataset_name}/\")\n\tdef prepare_pg19_data(config):\n\t    DATA_PATH = get_path(config)\n", "    print(DATA_PATH)\n\t    os.makedirs(DATA_PATH, exist_ok=True)\n\t    if not os.path.exists(os.path.join(DATA_PATH, 'train.bin')):\n\t        train_data = np.memmap(os.path.join(PG19_ORIGINAL_PATH, 'train.bin'), dtype=np.uint16, mode='r')\n\t        raw_tokenized_train = add_mem_tokens(config.landmark_id, train_data, config.mem_freq)\n\t        train_tokenized = np.array(raw_tokenized_train, dtype=np.uint16) \n\t        train_tokenized.tofile(os.path.join(DATA_PATH, 'train.bin'))\n\t    if not os.path.exists(os.path.join(DATA_PATH, 'val.bin')):\n\t        val_data = np.memmap(os.path.join(PG19_ORIGINAL_PATH, 'validation.bin'), dtype=np.uint16, mode='r')\n\t        raw_tokenized_eval = add_mem_tokens(config.landmark_id, val_data, config.mem_freq)\n", "        eval_tokenized = np.array(raw_tokenized_eval, dtype=np.uint16)\n\t        eval_tokenized.tofile(os.path.join(DATA_PATH, 'val.bin'))\n\t    print(\"completed the tokenization process!\")\n\tdef get_pg19_data(config):\n\t    DATA_PATH = get_path(config)\n\t    train_data = np.memmap(os.path.join(DATA_PATH, 'train.bin'), dtype=np.uint16, mode='r')\n\t    val_data = np.memmap(os.path.join(DATA_PATH, 'val.bin'), dtype=np.uint16, mode='r')\n\t    return {'train': train_data, 'val': val_data}\n"]}
{"filename": "lm_benchmark/data/proof-pile/prepare.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport json\n\timport os\n\tfrom datasets import load_dataset\n\timport numpy as np\n\timport tiktoken\n\tfrom tqdm import tqdm\n\tdir_path = os.path.dirname(os.path.realpath(__file__))\n", "dataset = load_dataset(\"hoskinson-center/proof-pile\", cache_dir=os.path.join(dir_path, \"cache\"))\n\tnum_proc = 16\n\tarxiv = dataset.filter(lambda x: json.loads(x['meta']).get('config', None) == \"arxiv\", num_proc=num_proc)\n\tenc = tiktoken.get_encoding(\"gpt2\")\n\tdef process(example):\n\t    ids = enc.encode_ordinary(example['text']) # encode_ordinary ignores any special tokens\n\t    ids.append(enc.eot_token) # add the end of text token, e.g. 50256 for gpt2 bpe\n\t    # note: I think eot should be prepended not appended... hmm. it's called \"eot\" though...\n\t    out = {'ids': ids, 'len': len(ids)}\n\t    return out\n", "# tokenize the dataset\n\ttokenized = arxiv.map(\n\t    process,\n\t    remove_columns=['text'],\n\t    desc=\"tokenizing the splits\",\n\t    num_proc=num_proc,\n\t)\n\tfor split, dset in tokenized.items():\n\t    arr_len = np.sum(dset['len'])\n\t    filename = os.path.join(dir_path, f'{split}.bin')\n", "    dtype = np.uint16 # (can do since enc.max_token_value == 50256 is < 2**16)\n\t    arr = np.memmap(filename, dtype=dtype, mode='w+', shape=(arr_len,))\n\t    total_batches = 1024\n\t    idx = 0\n\t    for batch_idx in tqdm(range(total_batches), desc=f'writing {filename}'):\n\t        # Batch together samples for faster write\n\t        batch = dset.shard(num_shards=total_batches, index=batch_idx, contiguous=True).with_format('numpy')\n\t        arr_batch = np.concatenate(batch['ids'])\n\t        # Write into mmap\n\t        arr[idx : idx + len(arr_batch)] = arr_batch\n", "        idx += len(arr_batch)\n\t    arr.flush()\n"]}
{"filename": "lm_benchmark/data/pg19/prepare.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport tiktoken\n\timport numpy as np\n\tgpt2_tokenizer = tiktoken.get_encoding(\"gpt2\")\n\tdef _read_directory(path):\n\t    texts = []\n\t    for filename in os.listdir(path):\n", "        if filename.endswith(\".txt\") and filename[:-4].isnumeric():\n\t            print(filename)\n\t            with open(os.path.join(path, filename), 'r') as f:\n\t                texts += gpt2_tokenizer.encode_ordinary(f.read())\n\t                texts.append(gpt2_tokenizer.eot_token)\n\t    return np.array(texts, dtype=np.uint16)\n\traw_eval_data = _read_directory(\"validation\")\n\traw_eval_data.tofile('validation.bin')\n\traw_train_data = _read_directory(\"train\")\n\traw_train_data.tofile('train.bin')\n"]}
{"filename": "lm_benchmark/optim/transformer_xl.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom contextlib import nullcontext\n\timport torch\n\timport torch.nn.functional as F\n\timport wandb\n\timport time \n\timport copy\n\timport traceback\n", "from .utils import get_batch, save_checkpoint\n\t@torch.no_grad()\n\tdef eval(model, data_tensor, sequence_length, total_sequence_length, batch_size, device='cpu', max_num_batches=24, ctx=nullcontext()):\n\t    assert model.training == False\n\t    loss_list_val, acc_list = [], []\n\t    for _ in range(max_num_batches): \n\t        x, y = get_batch(data_tensor, total_sequence_length, batch_size, device=device)\n\t        model.clear_state()\n\t        total_loss = None\n\t        for idx in range(0, x.shape[1], sequence_length):\n", "            x_part = x[:, idx:idx+sequence_length]\n\t            y_part = y[:, idx:idx+sequence_length].contiguous()\n\t            with ctx:\n\t                outputs = model(x_part, targets=y_part, get_logits=True, use_cache=True)\n\t            val_loss = outputs['loss']\n\t            if idx == 0:\n\t                total_loss = val_loss\n\t            else:\n\t                total_loss += val_loss\n\t        loss_list_val.append(total_loss)\n", "        acc_list.append((outputs['logits'].argmax(-1) == y_part).float().mean())\n\t    val_acc = torch.stack(acc_list).mean().item()\n\t    val_loss = torch.stack(loss_list_val).mean().item()\n\t    val_perplexity = 2.71828 ** val_loss\n\t    return val_acc, val_loss, val_perplexity\n\tdef train_xl(model, opt, data, scheduler, iterations, acc_steps, batch_size, sequence_length, eval_freq, ckpt_path, distributed_backend, extra_args):\n\t    device_type = 'cuda' if 'cuda' in str(extra_args.device) else 'cpu'\n\t    type_ctx = nullcontext() if device_type == 'cpu' else torch.amp.autocast(\n\t        device_type=device_type, dtype=extra_args.dtype)  # extra_args.dtype)\n\t    itr, substep, best_val_loss, text_table = 0, 0, float('inf'), None # best_val_loss not used atm, early stopping not recommended but possible \n", "    stats = {'train_loss': [], 'val_loss': [], 'val_pp': [], 'val_acc': []}\n\t    num_substeps_per_epoch = len(data['train']) // (batch_size * sequence_length)\n\t    if not extra_args.no_compile:\n\t        print(f\"Compiling model ...\")\n\t        import torch._dynamo as torchdynamo\n\t        torchdynamo.config.guard_nn_modules = True\n\t        model = torch.compile(model) # requires pytorch 2.0+\n\t    model.train()\n\t    if extra_args.postpone_lm_cache:\n\t        distributed_backend.get_raw_model(model).init_cache()\n", "    t0 = time.time()\n\t    while itr < iterations:\n\t        for microstep_idx in range(acc_steps):  # gradient accumulation\n\t            x, y = get_batch(data['train'], extra_args.total_sequence_length, batch_size, device=extra_args.device)\n\t            distributed_backend.get_raw_model(model).clear_state()\n\t            total_loss = None\n\t            for idx in range(0, x.shape[1], extra_args.sequence_length):\n\t                with type_ctx:\n\t                    with distributed_backend.get_context_for_microstep_forward(model=model, microstep_idx=microstep_idx, gradient_accumulation_steps=acc_steps):\n\t                        outputs = model(x[:, idx:idx+extra_args.sequence_length], targets=y[:, idx:idx+extra_args.sequence_length].contiguous(), use_cache=True)\n", "                loss = outputs['loss']\n\t                loss.backward()\n\t                if idx == 0:\n\t                    total_loss = loss\n\t                else:\n\t                    total_loss += loss\n\t            substep += 1\n\t        opt.step()\n\t        scheduler.step()\n\t        opt.zero_grad(set_to_none=True)\n", "        itr += 1\n\t        if itr % eval_freq == 0 or itr == iterations: # from here it's only evaluation code, all the training is above\n\t            if distributed_backend.is_master_process():\n\t                t1 = time.time()\n\t                dt = t1 - t0\n\t                epoch = substep//num_substeps_per_epoch\n\t                model.eval()\n\t                train_loss = loss.detach().cpu().item()\n\t                current_lr = scheduler.get_last_lr()[0] if scheduler is not None else extra_args.lr\n\t                val_acc, val_loss, val_perplexity = eval(distributed_backend.get_raw_model(model), data['val'], sequence_length, extra_args.total_sequence_length, \n", "                                                         batch_size, extra_args.device, max_num_batches=24, ctx=type_ctx)\n\t                print_string = f\"{epoch}/{itr} [train] loss={train_loss:.3f} [val] loss={val_loss:.3f}, pp={val_perplexity:.2f}, acc={val_acc:3f}\"\n\t                print_string += f\" [time per itr] {dt*1000/eval_freq:.2f}ms\"\n\t                if scheduler is not None:\n\t                    print_string += f\" [lr] {current_lr:.5f}\"\n\t                print(print_string)\n\t                if extra_args.wandb:\n\t                    wandb.log({\n\t                        \"iter\": itr,\n\t                        \"train/loss\": train_loss,\n", "                        \"val/loss\": val_loss,\n\t                        \"val/perplexity\": val_perplexity,\n\t                        \"val/acc\": val_acc,\n\t                        \"lr\": current_lr,\n\t                    })\n\t                model.train()\n\t                t0 = time.time()\n\t    if distributed_backend.is_master_process():\n\t        print(f\"saving checkpoint to {ckpt_path}\")\n\t        save_checkpoint(distributed_backend=distributed_backend,\n", "                        model=model,\n\t                        opt=opt,\n\t                        scheduler=scheduler,\n\t                        itr=itr,\n\t                        ckpt_path=ckpt_path)\n\t    return stats\n"]}
{"filename": "lm_benchmark/optim/base.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom contextlib import nullcontext\n\timport torch\n\timport torch.nn.functional as F\n\timport wandb\n\timport time \n\timport copy\n\timport traceback\n", "from .utils import get_batch, save_checkpoint\n\t@torch.no_grad()\n\tdef eval(model, data_tensor, sequence_length, batch_size, device='cpu', max_num_batches=24, ctx=nullcontext()):\n\t    assert model.training == False\n\t    loss_list_val, acc_list = [], []\n\t    for _ in range(max_num_batches): \n\t        x, y = get_batch(data_tensor, sequence_length, batch_size, device=device)\n\t        with ctx:\n\t            outputs = model(x, targets=y, get_logits=True)\n\t        val_loss = outputs['loss']\n", "        loss_list_val.append(val_loss)\n\t        acc_list.append((outputs['logits'].argmax(-1) == y).float().mean())\n\t    val_acc = torch.stack(acc_list).mean().item()\n\t    val_loss = torch.stack(loss_list_val).mean().item()\n\t    val_perplexity = 2.71828 ** val_loss\n\t    return val_acc, val_loss, val_perplexity\n\tdef train_base(model, opt, data, scheduler, iterations, acc_steps, batch_size, sequence_length, eval_freq, ckpt_path, distributed_backend, extra_args):\n\t    device_type = 'cuda' if 'cuda' in str(extra_args.device) else 'cpu'\n\t    type_ctx = nullcontext() if device_type == 'cpu' else torch.amp.autocast(\n\t        device_type=device_type, dtype=extra_args.dtype)  # extra_args.dtype)\n", "    itr, substep, best_val_loss, text_table = 0, 0, float('inf'), None # best_val_loss not used atm, early stopping not recommended but possible \n\t    stats = {'train_loss': [], 'val_loss': [], 'val_pp': [], 'val_acc': []}\n\t    num_substeps_per_epoch = len(data['train']) // (batch_size * sequence_length)\n\t    if not extra_args.no_compile:\n\t        print(f\"Compiling model ...\")\n\t        import torch._dynamo as torchdynamo\n\t        torchdynamo.config.guard_nn_modules = True\n\t        model = torch.compile(model) # requires pytorch 2.0+\n\t    model.train()\n\t    t0 = time.time()\n", "    while itr < iterations:\n\t        for microstep_idx in range(acc_steps):  # gradient accumulation\n\t            x, y = get_batch(data['train'], sequence_length, batch_size, device=extra_args.device)\n\t            with type_ctx:\n\t                with distributed_backend.get_context_for_microstep_forward(model=model, microstep_idx=microstep_idx, gradient_accumulation_steps=acc_steps):\n\t                    if getattr(distributed_backend.get_raw_model(model), \"needs_iter\", False):\n\t                        outputs = model(x, targets=y, iter=itr)\n\t                    else:\n\t                        outputs = model(x, targets=y)\n\t            loss = outputs['loss']\n", "            loss.backward()\n\t            substep += 1\n\t        opt.step()\n\t        scheduler.step()\n\t        opt.zero_grad(set_to_none=True)\n\t        itr += 1\n\t        if itr % eval_freq == 0 or itr == iterations: # from here it's only evaluation code, all the training is above\n\t            if distributed_backend.is_master_process():\n\t                t1 = time.time()\n\t                dt = t1 - t0\n", "                epoch = substep//num_substeps_per_epoch\n\t                model.eval()\n\t                train_loss = loss.detach().cpu().item()\n\t                current_lr = scheduler.get_last_lr()[0] if scheduler is not None else extra_args.lr\n\t                val_acc, val_loss, val_perplexity = eval(model, data['val'], sequence_length, batch_size,\n\t                                                         extra_args.device, max_num_batches=24, ctx=type_ctx)\n\t                print_string = f\"{epoch}/{itr} [train] loss={train_loss:.3f} [val] loss={val_loss:.3f}, pp={val_perplexity:.2f}, acc={val_acc:3f}\"\n\t                print_string += f\" [time per itr] {dt*1000/eval_freq:.2f}ms\"\n\t                if scheduler is not None:\n\t                    print_string += f\" [lr] {current_lr:.5f}\"\n", "                print(print_string)\n\t                if extra_args.wandb:\n\t                    wandb.log({\n\t                        \"iter\": itr,\n\t                        \"train/loss\": train_loss,\n\t                        \"val/loss\": val_loss,\n\t                        \"val/perplexity\": val_perplexity,\n\t                        \"val/acc\": val_acc,\n\t                        \"lr\": current_lr,\n\t                    })\n", "                model.train()\n\t                t0 = time.time()\n\t        if distributed_backend.is_master_process():\n\t            if extra_args.save_checkpoint_freq is not None and itr % extra_args.save_checkpoint_freq == 0:\n\t                print(f\"saving checkpoint to {ckpt_path}/ckpt_{itr}.pt\")\n\t                save_checkpoint(distributed_backend=distributed_backend,\n\t                                model=model,\n\t                                opt=opt,\n\t                                scheduler=scheduler,\n\t                                itr=itr,\n", "                                ckpt_path=f\"{ckpt_path}/ckpt_{itr}.pt\")\n\t    if distributed_backend.is_master_process():\n\t        print(f\"saving checkpoint to {ckpt_path}\")\n\t        save_checkpoint(distributed_backend=distributed_backend,\n\t                        model=model,\n\t                        opt=opt,\n\t                        scheduler=scheduler,\n\t                        itr=itr,\n\t                        ckpt_path=f\"{ckpt_path}/ckpt.pt\")\n\t    return stats\n"]}
{"filename": "lm_benchmark/optim/utils.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport numpy as np\n\timport torch\n\timport torch.nn.functional as F\n\tfrom contextlib import nullcontext, contextmanager, ExitStack\n\tdef get_batch(data, seq_length, batch_size, device='cpu'):\n\t    ix = torch.randint(len(data) - seq_length - 1, (batch_size,))\n\t    x = torch.stack([torch.from_numpy((data[i:i+seq_length]).astype(np.int64)) for i in ix])\n", "    y = torch.stack([torch.from_numpy((data[i+1:i+1+seq_length+1]).astype(np.int64)) for i in ix])\n\t    y = torch.where(y[:, :-1] == 50260, y[:, 1:], y[:, :-1])\n\t    y = torch.where((x == 50260) | (x == 50256) , -1, y)\n\t    if device != 'cpu':\n\t        # pin arrays x,y, which allows us to move them to GPU asynchronously (non_blocking=True)\n\t        x, y = x.pin_memory().to(device, non_blocking=True), y.pin_memory().to(device, non_blocking=True)\n\t        #x, y = x.to(device), y.to(device)\n\t    return x, y\n\tdef save_checkpoint(distributed_backend, model, opt, scheduler, itr, ckpt_path, **extra_args):\n\t    checkpoint = dict({\n", "        'model': distributed_backend.get_raw_model(model).state_dict(),\n\t        'optimizer': opt.state_dict(),\n\t        'scheduler': scheduler.state_dict(),\n\t        'itr': itr,\n\t    }, **extra_args)\n\t    torch.save(checkpoint, ckpt_path)\n"]}
{"filename": "lm_benchmark/models/base_new.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport inspect\n\timport tiktoken\n\timport torch\n\timport torch.nn as nn\n\tfrom torch.nn import functional as F\n\tfrom . import positional_encoders, caches\n", "class LayerNorm(nn.Module):\n\t    \"\"\" LayerNorm but with an optional bias. PyTorch doesn't support simply bias=False \"\"\"\n\t    def __init__(self, ndim, bias):\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(ndim))\n\t        self.bias = nn.Parameter(torch.zeros(ndim)) if bias else None\n\t    def forward(self, input):\n\t        return F.layer_norm(input, self.weight.shape, self.weight, self.bias, 1e-5)\n\tclass CausalSelfAttention(nn.Module):\n\t    def __init__(self, config, lm_cache):\n", "        super().__init__()\n\t        assert config.n_embd % config.n_head == 0\n\t        # key, query, value projections for all heads, but in a batch\n\t        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd, bias=config.bias)\n\t        # output projection\n\t        self.c_proj = nn.Linear(config.n_embd, config.n_embd, bias=config.bias)\n\t        # regularization\n\t        self.attn_dropout = nn.Dropout(config.dropout)\n\t        self.resid_dropout = nn.Dropout(config.dropout)\n\t        self.n_head = config.n_head\n", "        self.n_embd = config.n_embd\n\t        self.dropout = config.dropout\n\t        self.cache_storage = lm_cache.get_storage_for_layer(self)\n\t        self.allow_cache_during_training = getattr(config, \"allow_cache_during_training\", False)\n\t        # causal mask to ensure that attention is only applied to the left in the input sequence\n\t        bias = torch.tril(torch.ones(config.sequence_length, config.sequence_length))\n\t        self.register_buffer(\"bias\", bias.view(1, 1, config.sequence_length, config.sequence_length))\n\t    def forward(self, x, pos_emb_closure, cache_context, start_index):\n\t        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)\n\t        # calculate query, key, values for all heads in batch and move head forward to be the batch dim\n", "        q, k ,v  = self.c_attn(x).split(self.n_embd, dim=2)\n\t        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = pos_emb_closure.adapt_queries(q, start_index=start_index)\n\t        if cache_context is not None:\n\t            att_prefix, cache_values_dict = \\\n\t                self.cache_storage.retrieve_for_query(q, cache_context, pos_emb_closure, start_index)\n\t            self.cache_storage.store_in_cache(k, {'v': v})\n\t            if self.training and att_prefix and not self.allow_cache_during_training:\n", "                raise ValueError(\"Cache is not allowed during training\")\n\t        else:\n\t            att_prefix = None\n\t        k = pos_emb_closure.adapt_keys(k, start_index=start_index)\n\t        # manual implementation of attention\n\t        att = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))\n\t        att = pos_emb_closure.adapt_attention_before_softmax(att, start_query_index=start_index, start_key_index=start_index)\n\t        att = att.masked_fill(self.bias[:,:,:T,:T] == 0, float('-inf'))\n\t        if att_prefix is not None:\n\t            prefix_size = att_prefix.shape[-1]\n", "            current_size = att.shape[-1]\n\t            att = torch.cat((att_prefix, att), dim=-1)\n\t        att = F.softmax(att, dim=-1)\n\t        att = self.attn_dropout(att)\n\t        if att_prefix is not None:\n\t            att_prefix, att = torch.split(att, (prefix_size, current_size), dim=-1)\n\t        y = att @ v # (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)\n\t        if att_prefix is not None:\n\t            cache_v = cache_values_dict['v']\n\t            if cache_v.ndim == v.ndim:\n", "                y += att_prefix @ cache_v\n\t            elif cache_v.ndim == v.ndim + 1:\n\t                y += (att_prefix.unsqueeze(3) @ cache_v).squeeze(3)\n\t            else:\n\t                raise NotImplementedError\n\t        y = y.transpose(1, 2).contiguous().view(B, T, C) # re-assemble all head outputs side by side\n\t        # output projection\n\t        y = self.resid_dropout(self.c_proj(y))\n\t        return y\n\tclass MLP(nn.Module):\n", "    def __init__(self, config):\n\t        super().__init__()\n\t        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=config.bias)\n\t        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=config.bias)\n\t        self.dropout = nn.Dropout(config.dropout)\n\t        self.activation = nn.GELU()\n\t    def forward(self, x):\n\t        x = self.c_fc(x)\n\t        x = self.activation(x)\n\t        x = self.c_proj(x)\n", "        x = self.dropout(x)\n\t        return x\n\tclass Block(nn.Module):\n\t    def __init__(self, config, lm_cache):\n\t        super().__init__()\n\t        self.ln_1 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.attn = CausalSelfAttention(config, lm_cache)\n\t        self.ln_2 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.mlp = MLP(config)\n\t    def forward(self, x, pos_emb_closure, cache_context, start_index):\n", "        x = x + self.attn(self.ln_1(x), pos_emb_closure, cache_context, start_index)\n\t        x = x + self.mlp(self.ln_2(x))\n\t        return x\n\tclass GPTBase(nn.Module):\n\t    needs_iter = False\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        assert config.vocab_size is not None\n\t        assert config.sequence_length is not None\n\t        self.config = config\n", "        self.tokenizer = tiktoken.get_encoding(\"gpt2\")\n\t        self.lm_cache = caches.get_cache(config.lm_cache)(config)\n\t        self.transformer = nn.ModuleDict(dict(\n\t            wte = nn.Embedding(config.vocab_size, config.n_embd),\n\t            wpe = positional_encoders.get_encoder(config.positional_encoder)(config),\n\t            drop = nn.Dropout(config.dropout),\n\t            h = nn.ModuleList([Block(config, self.lm_cache) for _ in range(config.n_layer)]),\n\t            ln_f = LayerNorm(config.n_embd, bias=config.bias),\n\t        ))\n\t        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)\n", "        # with weight tying when using torch.compile() some warnings get generated:\n\t        # \"UserWarning: functional_call was passed multiple values for tied weights.\n\t        # This behavior is deprecated and will be an error in future versions\"\n\t        # not 100% sure what this is, so far seems to be harmless. TODO investigate\n\t        self.transformer.wte.weight = self.lm_head.weight # https://paperswithcode.com/method/weight-tying\n\t        # init all weights\n\t        self.apply(self._init_weights)\n\t        # apply special scaled init to the residual projections, per GPT-2 paper\n\t        for pn, p in self.named_parameters():\n\t            if pn.endswith('c_proj.weight'):\n", "                torch.nn.init.normal_(p, mean=0.0, std=0.02/math.sqrt(2 * config.n_layer))\n\t        # report number of parameters\n\t        print(\"number of parameters: %.2fM\" % (self.get_num_params()/1e6,))\n\t    def get_num_params(self, non_embedding=True):\n\t        \"\"\"\n\t        Return the number of parameters in the model.\n\t        For non-embedding count (default), the position embeddings get subtracted.\n\t        The token embeddings would too, except due to the parameter sharing these\n\t        params are actually used as weights in the final layer, so we include them.\n\t        \"\"\"\n", "        n_params = sum(p.numel() for p in self.parameters())\n\t        if non_embedding:\n\t            n_params -= sum(p.numel() for p in self.transformer.wpe.parameters()) # TODO: Why do we need this?\n\t        return n_params\n\t    def _init_weights(self, module):\n\t        if isinstance(module, nn.Linear):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t            if module.bias is not None:\n\t                torch.nn.init.zeros_(module.bias)\n\t        elif isinstance(module, nn.Embedding):\n", "            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t    def forward(self, idx, targets=None, get_logits=False, use_cache=False, iter=None):\n\t        device = idx.device\n\t        b, t = idx.size()\n\t        assert t <= self.config.sequence_length, f\"Cannot forward sequence of length {t}, block size is only {self.config.sequence_length}\"\n\t        # forward the GPT model itself\n\t        if use_cache:\n\t            idx, index_shift, cache_context = self.lm_cache(idx)\n\t        else:\n\t            index_shift = 0\n", "            cache_context = None\n\t        if getattr(self.transformer.wpe, \"needs_iter\", False):\n\t            idx, pos_emb_closure = self.transformer.wpe(idx, iter=iter) # position embeddings of shape (1, t, n_embd)\n\t        else:\n\t            idx, pos_emb_closure = self.transformer.wpe(idx) # position embeddings of shape (1, t, n_embd)\n\t        tok_emb = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)\n\t        x = pos_emb_closure.adapt_model_input(tok_emb, start_index=index_shift)\n\t        x = self.transformer.drop(x)\n\t        for block in self.transformer.h:\n\t            x = block(x, pos_emb_closure, cache_context, start_index=index_shift)\n", "        x = self.transformer.ln_f(x)\n\t        if use_cache:\n\t            x = self.lm_cache.get_final_logits(x)\n\t        if targets is not None:\n\t            # if we are given some desired targets also calculate the loss\n\t            logits = self.lm_head(x)\n\t            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)\n\t        else:\n\t            # inference-time mini-optimization: only forward the lm_head on the very last position\n\t            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim\n", "            loss = None\n\t        logits = logits if get_logits else None\n\t        return {'logits': logits, 'loss': loss}\n\t    def clear_state(self):\n\t        self.lm_cache.clear_state()\n\t    def crop_sequence_length(self, sequence_length):\n\t        # model surgery to decrease the block size if necessary\n\t        # e.g. we may load the GPT2 pretrained model checkpoint (block size 1024)\n\t        # but want to use a smaller block size for some smaller, simpler model\n\t        assert sequence_length <= self.config.sequence_length\n", "        self.config.sequence_length = sequence_length\n\t        self.transformer.wpe.weight = nn.Parameter(self.transformer.wpe.weight[:sequence_length])\n\t        for block in self.transformer.h:\n\t            block.attn.bias = block.attn.bias[:,:,:sequence_length,:sequence_length]\n\t    @classmethod\n\t    def from_pretrained(cls, model_type, override_args=None):\n\t        # TODO\n\t        pass\n\t    def get_parameter_group_specs(self):\n\t        \"\"\"\n", "        This long function is unfortunately doing something very simple and is being very defensive:\n\t        We are separating out all parameters of the model into two buckets: those that will experience\n\t        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n\t        We are then returning the PyTorch optimizer object.\n\t        \"\"\"\n\t        # separate out all parameters to those that will and won't experience regularizing weight decay\n\t        decay = set()\n\t        no_decay = set()\n\t        whitelist_weight_modules = (torch.nn.Linear, )\n\t        blacklist_weight_modules = (torch.nn.LayerNorm, LayerNorm, torch.nn.Embedding)\n", "        for mn, m in self.named_modules():\n\t            for pn, p in m.named_parameters():\n\t                fpn = '%s.%s' % (mn, pn) if mn else pn # full param name\n\t                # random note: because named_modules and named_parameters are recursive\n\t                # we will see the same tensors p many many times. but doing it this way\n\t                # allows us to know which parent module any tensor p belongs to...\n\t                if pn.endswith('bias'):\n\t                    # all biases will not be decayed\n\t                    no_decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, whitelist_weight_modules):\n", "                    # weights of whitelist modules will be weight decayed\n\t                    decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, blacklist_weight_modules):\n\t                    # weights of blacklist modules will NOT be weight decayed\n\t                    no_decay.add(fpn)\n\t        # subtle: 'transformer.wte.weight' and 'lm_head.weight' are tied, so they\n\t        # will appear in the no_decay and decay sets respectively after the above.\n\t        # In addition, because named_parameters() doesn't return duplicates, it\n\t        # will only return the first occurence, key'd by 'transformer.wte.weight', below.\n\t        # so let's manually remove 'lm_head.weight' from decay set. This will include\n", "        # this tensor into optimization via transformer.wte.weight only, and not decayed.\n\t        decay.remove('lm_head.weight')\n\t        # validate that we considered every parameter\n\t        param_dict = {pn: p for pn, p in self.named_parameters()}\n\t        inter_params = decay & no_decay\n\t        union_params = decay | no_decay\n\t        assert len(inter_params) == 0, \"parameters %s made it into both decay/no_decay sets!\" % (str(inter_params), )\n\t        assert len(param_dict.keys() - union_params) == 0, \"parameters %s were not separated into either decay/no_decay set!\" \\\n\t                                                    % (str(param_dict.keys() - union_params), )\n\t        # create the pytorch optimizer object\n", "        return [\n\t            {\"params\": sorted(list(decay))},\n\t            {\"params\": sorted(list(no_decay)), \"weight_decay\": 0.0},\n\t        ]\n\t    @torch.no_grad()\n\t    def generate(self, idx, max_new_tokens, temperature=1.0, top_k=None):\n\t        \"\"\"\n\t        Take a conditioning sequence of indices idx (LongTensor of shape (b,t)) and complete\n\t        the sequence max_new_tokens times, feeding the predictions back into the model each time.\n\t        Most likely you'll want to make sure to be in model.eval() mode of operation for this.\n", "        \"\"\"\n\t        for _ in range(max_new_tokens):\n\t            # if the sequence context is growing too long we must crop it at sequence_length\n\t            idx_cond = idx if idx.size(1) <= self.config.sequence_length else idx[:, -self.config.sequence_length:]\n\t            # forward the model to get the logits for the index in the sequence\n\t            logits = self(idx_cond, get_logits=True)['logits']\n\t            # pluck the logits at the final step and scale by desired temperature\n\t            logits = logits[:, -1, :] / temperature\n\t            # optionally crop the logits to only the top k options\n\t            if top_k is not None:\n", "                v, _ = torch.topk(logits, min(top_k, logits.size(-1)))\n\t                logits[logits < v[:, [-1]]] = -float('Inf')\n\t            # apply softmax to convert logits to (normalized) probabilities\n\t            probs = F.softmax(logits, dim=-1)\n\t            # sample from the distribution\n\t            idx_next = torch.multinomial(probs, num_samples=1)\n\t            # append sampled index to the running sequence and continue\n\t            idx = torch.cat((idx, idx_next), dim=1)\n\t        return idx\n\t    @torch.no_grad()\n", "    def generate_from_string(self, in_str, max_new_tokens, temperature=1.0, top_k=None):\n\t        idx = torch.tensor(self.tokenizer.encode(in_str, allowed_special={\"<|endoftext|>\"})).view(1,-1).to(self.lm_head.weight.device)\n\t        out_idx = self.generate(idx, max_new_tokens, temperature, top_k).view(-1).to('cpu').numpy()\n\t        return self.tokenizer.decode(out_idx)\n"]}
{"filename": "lm_benchmark/models/landmark.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport inspect\n\timport tiktoken\n\timport torch\n\timport torch.nn as nn\n\tfrom torch.nn import functional as F\n\tfrom . import positional_encoders, caches\n", "class LayerNorm(nn.Module):\n\t    \"\"\" LayerNorm but with an optional bias. PyTorch doesn't support simply bias=False \"\"\"\n\t    def __init__(self, ndim, bias):\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(ndim))\n\t        self.bias = nn.Parameter(torch.zeros(ndim)) if bias else None\n\t    def forward(self, input):\n\t        return F.layer_norm(input, self.weight.shape, self.weight, self.bias, 1e-5)\n\tclass LandmarkGroupedSoftmaxFunction(torch.autograd.Function):\n\t    # Note that forward, setup_context, and backward are @staticmethods\n", "    @staticmethod\n\t    def forward(ctx, x, dim, mem_cnt, resp_mem_idx, rem_score=None):\n\t        new_shape = list(x.shape)\n\t        new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t        max_by_group = x.new_zeros((*new_shape,))\n\t        max_by_group.scatter_reduce_(src=x, index=resp_mem_idx, dim=dim, reduce=\"amax\", include_self=False)\n\t        maxes = torch.gather(max_by_group, dim, resp_mem_idx)\n\t        x_exp = torch.exp(x - torch.where(torch.isinf(maxes), 0, maxes))\n\t        cumsum_by_group = torch.zeros_like(max_by_group, dtype=x_exp.dtype)\n\t        cumsum_by_group.scatter_add_(dim, resp_mem_idx, x_exp, )\n", "        denom = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t        probs = torch.where(denom < 0.5, 0, x_exp / denom)\n\t        ctx.mem_cnt = mem_cnt\n\t        ctx.dim = dim\n\t        ctx.save_for_backward(resp_mem_idx, probs)\n\t        return probs\n\t    @staticmethod\n\t    def backward(ctx, grad_probs):\n\t        mem_cnt = ctx.mem_cnt\n\t        dim = ctx.dim\n", "        resp_mem_idx, probs = ctx.saved_tensors\n\t        grad_x = grad_dim = grad_mem_cnt = grad_resp_mem_idx = None\n\t        if ctx.needs_input_grad[0] or ctx.needs_input_grad[4]:\n\t            grad_pair = grad_probs * probs\n\t            new_shape = list(probs.shape)\n\t            new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t            cumsum_by_group = grad_pair.new_zeros((*new_shape,))\n\t            cumsum_by_group.scatter_add_(dim, resp_mem_idx, grad_pair)\n\t        if ctx.needs_input_grad[0]:\n\t            grad_sum = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n", "            grad_x = grad_pair - probs * grad_sum\n\t        assert not ctx.needs_input_grad[1]\n\t        assert not ctx.needs_input_grad[2]\n\t        assert not ctx.needs_input_grad[3]\n\t        return grad_x, grad_dim, grad_mem_cnt, grad_resp_mem_idx\n\tdef landmark_grouped_softmax(x, dim, is_mem, attn_mask,  last_section_mask, return_group_prob,\n\t                             max_mem_cnt, p_group_dropout=None):\n\t    mask = attn_mask\n\t    last_and_rest_mask = last_section_mask | mask\n\t    full_access_mask =  is_mem | last_and_rest_mask\n", "    # assert max_mem_cnt >= (is_mem.sum(dim=dim).max().view((1,)) + 2 + 1).item()\n\t    mem_group_idx = torch.cumsum(is_mem, dim=dim)\n\t    mem_bucket_id = max_mem_cnt - 1\n\t    resp_mem_idx = torch.where(last_and_rest_mask, \n\t                                max_mem_cnt - 1,\n\t                                torch.where(is_mem, mem_bucket_id, mem_group_idx))\n\t    probs = LandmarkGroupedSoftmaxFunction.apply(x, dim, max_mem_cnt, resp_mem_idx)\n\t    new_shape = list(x.shape)\n\t    new_shape[dim] = max_mem_cnt\n\t    group_prob = probs.new_zeros((*new_shape, ))\n", "    group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), probs)\n\t    if p_group_dropout is not None:\n\t        group_prob = torch.nn.functional.dropout(group_prob, p=p_group_dropout, inplace=True)\n\t        group_prob.select(dim, max_mem_cnt - 1).copy_((probs * last_section_mask).sum(dim=dim, )).div_(1 - p_group_dropout)\n\t    else:\n\t        group_prob.select(dim, max_mem_cnt - 1).copy_((probs * last_section_mask).sum(dim=dim, ))\n\t    probs = probs.mul(torch.where(full_access_mask, last_section_mask, torch.gather(group_prob, dim, resp_mem_idx)))\n\t    return probs, (group_prob if return_group_prob else None)\n\tdef softmax_ignore_mem(x, dim, is_mem, *args, **kwargs):\n\t    x = x.masked_fill(is_mem, float('-inf'))\n", "    return torch.nn.functional.softmax(x, dim=dim), None\n\tclass CausalSelfAttention(nn.Module):\n\t    def __init__(self, config, lm_cache):\n\t        super().__init__()\n\t        assert config.n_embd % config.n_head == 0\n\t        # key, query, value projections for all heads, but in a batch\n\t        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd, bias=config.bias)\n\t        # output projection\n\t        self.c_proj = nn.Linear(config.n_embd, config.n_embd, bias=config.bias)\n\t        # regularization\n", "        self.attn_dropout = nn.Dropout(config.dropout)\n\t        self.resid_dropout = nn.Dropout(config.dropout)\n\t        self.n_head = config.n_head\n\t        self.n_embd = config.n_embd\n\t        self.dropout = config.dropout\n\t        self.config = config\n\t        self.allow_cache_during_training = getattr(config, \"allow_cache_during_training\", False)\n\t        self.cache_storage = None\n\t        if not config.postpone_lm_cache:\n\t            self.init_cache_storage(lm_cache)\n", "        SOFTMAX_FUNC = {\n\t            \"nomem\": lambda x, dim, *args, **kwargs: (nn.functional.softmax(x, dim=dim), None),\n\t            \"mem_opt\": landmark_grouped_softmax,\n\t            \"ignore_mem\": softmax_ignore_mem,\n\t        }\n\t        self.softmax_func = SOFTMAX_FUNC[config.softmax_func]\n\t        if self.config.enable_rem_score:\n\t            self.rem_token_embedding = nn.Linear(config.n_embd, 1, bias=config.bias)\n\t        else:\n\t            self.rem_token_embedding = None\n", "        # causal mask to ensure that attention is only applied to the left in the input sequence\n\t        self.register_buffer(\"bias\", torch.tril(torch.ones(config.sequence_length, config.sequence_length))\n\t                                    .view(1, 1, config.sequence_length, config.sequence_length))\n\t    def init_cache_storage(self, lm_cache):\n\t        if self.cache_storage is not None:\n\t            return\n\t        print(\"Init Storage\")\n\t        self.cache_storage = lm_cache.get_storage_for_layer(self)\n\t    def forward(self, x, is_mem, pos_emb_closure, cache_context, start_index):\n\t        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)\n", "        # calculate query, key, values for all heads in batch and move head forward to be the batch dim\n\t        q, k ,v  = self.c_attn(x).split(self.n_embd, dim=2)\n\t        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = pos_emb_closure.adapt_queries(q, start_index=start_index)\n\t        if cache_context is not None and self.cache_storage is not None:\n\t            att_prefix, cache_values_dict = \\\n\t                self.cache_storage.retrieve_for_query(q, cache_context, pos_emb_closure, start_index)\n\t            if self.training and att_prefix is not None and not self.allow_cache_during_training:\n", "                raise ValueError(\"Cache is not allowed during training\")\n\t        else:\n\t            att_prefix = None\n\t        k_before_pos = k\n\t        is_mem_orig = is_mem\n\t        k = pos_emb_closure.adapt_keys(k, start_index=start_index)\n\t        # manual implementation of attention\n\t        att = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))\n\t        att = pos_emb_closure.adapt_attention_before_softmax(att, start_query_index=start_index, start_key_index=start_index)\n\t        att = att.masked_fill(self.bias[:,:,:T,:T] == 0, float('-inf'))\n", "        attn_mask = self.bias[:,:,:T,:T] == 0\n\t        if att_prefix is not None:\n\t            prefix_size = att_prefix.shape[-1]\n\t            current_size = att.shape[-1]\n\t            att = torch.cat((att_prefix, att), dim=-1)\n\t            if 'is_mem' in cache_values_dict:\n\t                is_mem = torch.cat((cache_values_dict['is_mem'], is_mem), dim=-1)\n\t            else:\n\t                is_mem = torch.cat((is_mem.new_zeros((B, prefix_size)), is_mem), dim=-1)\n\t            attn_mask = torch.cat((attn_mask.new_zeros((1, 1, T, prefix_size)), attn_mask), dim=-1)\n", "        is_mem_mat = is_mem.unsqueeze(1).unsqueeze(2).repeat((1, self.n_head, 1, 1))\n\t        # The following block should be inside landmark_grouped_softmax\n\t        # however, moving it there causes problems with torch.compile.\n\t        is_mem = is_mem_mat\n\t        dim = -1\n\t        with torch.no_grad():\n\t            mem_ids = torch.where(attn_mask, 0., torch.cumsum(is_mem, dim) - is_mem.int())\n\t            last_section_mask = torch.amax(mem_ids, dim, keepdim=True) == mem_ids\n\t            # the landmark token for the current block should be ignored, \n\t            # even if we are processing the landmark token itself.\n", "            mask = attn_mask.logical_or(is_mem & last_section_mask) \n\t            last_section_mask.logical_and_(~mask)\n\t            is_mem = is_mem.logical_and(~mask)\n\t        att = att.masked_fill_(mask, float('-inf')) \n\t        # End of block\n\t        att, group_prob = self.softmax_func(att, dim=-1, \n\t                                            is_mem=is_mem, attn_mask=mask,\n\t                                            last_section_mask=last_section_mask,\n\t                                            return_group_prob=False,\n\t                                            max_mem_cnt=self.config.max_groups_for_softmax,\n", "                                            p_group_dropout=self.config.group_dropout if self.training else None)\n\t        att = self.attn_dropout(att)\n\t        if att_prefix is not None:\n\t            att_prefix, att = torch.split(att, (prefix_size, current_size), dim=-1)\n\t        y = att @ v # (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)\n\t        if att_prefix is not None:\n\t            cache_v = cache_values_dict['v']\n\t            if cache_v.ndim == v.ndim:\n\t                y += att_prefix @ cache_v\n\t            elif cache_v.ndim == v.ndim + 1:\n", "                y += (att_prefix.unsqueeze(3) @ cache_v).squeeze(3)\n\t            else:\n\t                raise NotImplementedError\n\t        y = y.transpose(1, 2).contiguous().view(B, T, C) # re-assemble all head outputs side by side\n\t        # output projection\n\t        y = self.resid_dropout(self.c_proj(y))\n\t        if cache_context is not None and self.cache_storage is not None:\n\t            with torch.no_grad():\n\t                self.cache_storage.store_in_cache(k_before_pos, {'v': v, 'is_mem': is_mem_orig})\n\t        return y, group_prob\n", "class MLP(nn.Module):\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=config.bias)\n\t        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=config.bias)\n\t        self.dropout = nn.Dropout(config.dropout)\n\t        self.activation = nn.GELU()\n\t    def forward(self, x):\n\t        x = self.c_fc(x)\n\t        x = self.activation(x)\n", "        x = self.c_proj(x)\n\t        x = self.dropout(x)\n\t        return x\n\tclass Block(nn.Module):\n\t    def __init__(self, config, lm_cache):\n\t        super().__init__()\n\t        self.ln_1 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.attn = CausalSelfAttention(config, lm_cache)\n\t        self.ln_2 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.mlp = MLP(config)\n", "    def forward(self, x, is_mem, pos_emb_closure, cache_context, start_index):\n\t        x_attn, group_prob = self.attn(self.ln_1(x), is_mem, pos_emb_closure, cache_context, start_index)\n\t        x = x + x_attn\n\t        x = x + self.mlp(self.ln_2(x))\n\t        return x, group_prob\n\tclass GPTBase(nn.Module):\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        assert config.vocab_size is not None\n\t        assert config.sequence_length is not None\n", "        self.config = config\n\t        self.tokenizer = tiktoken.get_encoding(\"gpt2\")\n\t        self.lm_cache = None\n\t        if not config.postpone_lm_cache:\n\t            self.init_cache()\n\t        self.transformer = nn.ModuleDict(dict(\n\t            wte = nn.Embedding(config.vocab_size, config.n_embd),\n\t            wpe = positional_encoders.get_encoder(config.positional_encoder)(config),\n\t            drop = nn.Dropout(config.dropout),\n\t            h = nn.ModuleList([Block(\n", "                config, self.lm_cache) for idx in range(config.n_layer)]),\n\t            ln_f = LayerNorm(config.n_embd, bias=config.bias),\n\t        ))\n\t        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)\n\t        # with weight tying when using torch.compile() some warnings get generated:\n\t        # \"UserWarning: functional_call was passed multiple values for tied weights.\n\t        # This behavior is deprecated and will be an error in future versions\"\n\t        # not 100% sure what this is, so far seems to be harmless. TODO investigate\n\t        self.transformer.wte.weight = self.lm_head.weight # https://paperswithcode.com/method/weight-tying\n\t        # init all weights\n", "        self.apply(self._init_weights)\n\t        # apply special scaled init to the residual projections, per GPT-2 paper\n\t        for pn, p in self.named_parameters():\n\t            if pn.endswith('c_proj.weight'):\n\t                torch.nn.init.normal_(p, mean=0.0, std=0.02/math.sqrt(2 * config.n_layer))\n\t        # report number of parameters\n\t        print(\"number of parameters: %.2fM\" % (self.get_num_params()/1e6,))\n\t    def init_cache(self):\n\t        self.lm_cache = caches.get_cache(self.config.lm_cache)(self.config)\n\t        for m in self.modules():\n", "            if hasattr(m, \"init_cache_storage\"):\n\t                m.init_cache_storage(self.lm_cache)\n\t    def get_num_params(self, non_embedding=True):\n\t        \"\"\"\n\t        Return the number of parameters in the model.\n\t        For non-embedding count (default), the position embeddings get subtracted.\n\t        The token embeddings would too, except due to the parameter sharing these\n\t        params are actually used as weights in the final layer, so we include them.\n\t        \"\"\"\n\t        n_params = sum(p.numel() for p in self.parameters())\n", "        if non_embedding:\n\t            n_params -= sum(p.numel() for p in self.transformer.wpe.parameters()) # TODO: Why do we need this?\n\t        return n_params\n\t    def _init_weights(self, module):\n\t        if isinstance(module, nn.Linear):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t            if module.bias is not None:\n\t                torch.nn.init.zeros_(module.bias)\n\t        elif isinstance(module, nn.Embedding):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n", "    def forward(self, idx, targets=None, get_logits=False, use_cache=False):\n\t        device = idx.device\n\t        b, t = idx.size()\n\t        assert t <= self.config.sequence_length, f\"Cannot forward sequence of length {t}, block size is only {self.config.sequence_length}\"\n\t        # forward the GPT model itself\n\t        if use_cache:\n\t            idx, index_shift, cache_context = self.lm_cache(idx)\n\t        else:\n\t            index_shift = 0\n\t            cache_context = None\n", "        idx, pos_emb_closure = self.transformer.wpe(idx) # position embeddings of shape (1, t, n_embd)\n\t        is_mem = idx == self.config.landmark_id\n\t        tok_emb = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)\n\t        x = pos_emb_closure.adapt_model_input(tok_emb, start_index=index_shift)\n\t        # print(\"Index shift: \", index_shift)\n\t        x = self.transformer.drop(x)\n\t        group_prob = None\n\t        for block in self.transformer.h:\n\t            x, group_prob = block(x, is_mem, pos_emb_closure, cache_context, start_index=index_shift)\n\t        x = self.transformer.ln_f(x)\n", "        if use_cache:\n\t            x = self.lm_cache.get_final_logits(x)\n\t        if targets is not None:\n\t            # if we are given some desired targets also calculate the loss\n\t            logits = self.lm_head(x)\n\t            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)\n\t        else:\n\t            # inference-time mini-optimization: only forward the lm_head on the very last position\n\t            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim\n\t            loss = None\n", "        logits = logits if get_logits else None\n\t        return {'logits': logits, 'loss': loss}\n\t    def clear_state(self):\n\t        self.lm_cache.clear_state()\n\t    def crop_sequence_length(self, sequence_length):\n\t        # model surgery to decrease the block size if necessary\n\t        # e.g. we may load the GPT2 pretrained model checkpoint (block size 1024)\n\t        # but want to use a smaller block size for some smaller, simpler model\n\t        assert sequence_length <= self.config.sequence_length\n\t        self.config.sequence_length = sequence_length\n", "        self.transformer.wpe.weight = nn.Parameter(self.transformer.wpe.weight[:sequence_length])\n\t        for block in self.transformer.h:\n\t            block.attn.bias = block.attn.bias[:,:,:sequence_length,:sequence_length]\n\t    @classmethod\n\t    def from_pretrained(cls, model_type, override_args=None):\n\t        # TODO\n\t        pass\n\t    def get_parameter_group_specs(self):\n\t        \"\"\"\n\t        This long function is unfortunately doing something very simple and is being very defensive:\n", "        We are separating out all parameters of the model into two buckets: those that will experience\n\t        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n\t        We are then returning the PyTorch optimizer object.\n\t        \"\"\"\n\t        # separate out all parameters to those that will and won't experience regularizing weight decay\n\t        decay = set()\n\t        no_decay = set()\n\t        whitelist_weight_modules = (torch.nn.Linear, )\n\t        blacklist_weight_modules = (torch.nn.LayerNorm, LayerNorm, torch.nn.Embedding)\n\t        for mn, m in self.named_modules():\n", "            for pn, p in m.named_parameters():\n\t                fpn = '%s.%s' % (mn, pn) if mn else pn # full param name\n\t                # random note: because named_modules and named_parameters are recursive\n\t                # we will see the same tensors p many many times. but doing it this way\n\t                # allows us to know which parent module any tensor p belongs to...\n\t                if pn.endswith('bias'):\n\t                    # all biases will not be decayed\n\t                    no_decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, whitelist_weight_modules):\n\t                    # weights of whitelist modules will be weight decayed\n", "                    decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, blacklist_weight_modules):\n\t                    # weights of blacklist modules will NOT be weight decayed\n\t                    no_decay.add(fpn)\n\t        # subtle: 'transformer.wte.weight' and 'lm_head.weight' are tied, so they\n\t        # will appear in the no_decay and decay sets respectively after the above.\n\t        # In addition, because named_parameters() doesn't return duplicates, it\n\t        # will only return the first occurence, key'd by 'transformer.wte.weight', below.\n\t        # so let's manually remove 'lm_head.weight' from decay set. This will include\n\t        # this tensor into optimization via transformer.wte.weight only, and not decayed.\n", "        decay.remove('lm_head.weight')\n\t        # validate that we considered every parameter\n\t        param_dict = {pn: p for pn, p in self.named_parameters()}\n\t        inter_params = decay & no_decay\n\t        union_params = decay | no_decay\n\t        assert len(inter_params) == 0, \"parameters %s made it into both decay/no_decay sets!\" % (str(inter_params), )\n\t        assert len(param_dict.keys() - union_params) == 0, \"parameters %s were not separated into either decay/no_decay set!\" \\\n\t                                                    % (str(param_dict.keys() - union_params), )\n\t        # create the pytorch optimizer object\n\t        return [\n", "            {\"params\": sorted(list(decay))},\n\t            {\"params\": sorted(list(no_decay)), \"weight_decay\": 0.0},\n\t        ]\n\t    @torch.no_grad()\n\t    def generate(self, idx, max_new_tokens, temperature=1.0, top_k=None):\n\t        \"\"\"\n\t        Take a conditioning sequence of indices idx (LongTensor of shape (b,t)) and complete\n\t        the sequence max_new_tokens times, feeding the predictions back into the model each time.\n\t        Most likely you'll want to make sure to be in model.eval() mode of operation for this.\n\t        \"\"\"\n", "        for _ in range(max_new_tokens):\n\t            # if the sequence context is growing too long we must crop it at sequence_length\n\t            idx_cond = idx if idx.size(1) <= self.config.sequence_length else idx[:, -self.config.sequence_length:]\n\t            # forward the model to get the logits for the index in the sequence\n\t            logits = self(idx_cond, get_logits=True)['logits']\n\t            # pluck the logits at the final step and scale by desired temperature\n\t            logits = logits[:, -1, :] / temperature\n\t            # optionally crop the logits to only the top k options\n\t            if top_k is not None:\n\t                v, _ = torch.topk(logits, min(top_k, logits.size(-1)))\n", "                logits[logits < v[:, [-1]]] = -float('Inf')\n\t            # apply softmax to convert logits to (normalized) probabilities\n\t            probs = F.softmax(logits, dim=-1)\n\t            # sample from the distribution\n\t            idx_next = torch.multinomial(probs, num_samples=1)\n\t            # append sampled index to the running sequence and continue\n\t            idx = torch.cat((idx, idx_next), dim=1)\n\t        return idx\n\t    @torch.no_grad()\n\t    def generate_from_string(self, in_str, max_new_tokens, temperature=1.0, top_k=None):\n", "        idx = torch.tensor(self.tokenizer.encode(in_str, allowed_special={\"<|endoftext|>\"})).view(1,-1).to(self.lm_head.weight.device)\n\t        out_idx = self.generate(idx, max_new_tokens, temperature, top_k).view(-1).to('cpu').numpy()\n\t        return self.tokenizer.decode(out_idx)\n"]}
{"filename": "lm_benchmark/models/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import base_new, landmark, landmark_with_cmt\n\tMODELS = {\n\t    \"base\": base_new.GPTBase,\n\t    \"landmark\": landmark.GPTBase,\n\t    \"landmark_with_cmt\": landmark_with_cmt.GPTBase,\n\t}\n\tdef make_model_from_args(args):\n", "    return MODELS[args.model](args)\n\tdef registered_models():\n\t    return MODELS.keys()\n"]}
{"filename": "lm_benchmark/models/landmark_with_cmt.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport inspect\n\timport tiktoken\n\timport torch\n\timport torch.nn as nn\n\tfrom torch.nn import functional as F\n\tfrom . import positional_encoders, caches\n", "class LayerNorm(nn.Module):\n\t    \"\"\" LayerNorm but with an optional bias. PyTorch doesn't support simply bias=False \"\"\"\n\t    def __init__(self, ndim, bias):\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(ndim))\n\t        self.bias = nn.Parameter(torch.zeros(ndim)) if bias else None\n\t    def forward(self, input):\n\t        return F.layer_norm(input, self.weight.shape, self.weight, self.bias, 1e-5)\n\tclass LandmarkGroupedSoftmaxFunction(torch.autograd.Function):\n\t    # Note that forward, setup_context, and backward are @staticmethods\n", "    @staticmethod\n\t    def forward(ctx, x, dim, mem_cnt, resp_mem_idx, rem_score=None):\n\t        new_shape = list(x.shape)\n\t        new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t        max_by_group = x.new_zeros((*new_shape,))\n\t        max_by_group.scatter_reduce_(src=x, index=resp_mem_idx, dim=dim, reduce=\"amax\", include_self=False)\n\t        if rem_score is not None:\n\t            t = max_by_group.select(dim=dim, index=mem_cnt - 1).unsqueeze(dim)\n\t            t.copy_(t.maximum(rem_score))\n\t        maxes = torch.gather(max_by_group, dim, resp_mem_idx)\n", "        x_exp = torch.exp(x - torch.where(torch.isinf(maxes), 0, maxes))\n\t        if rem_score is not None:\n\t            rem_score_max = max_by_group.select(dim=dim, index=mem_cnt - 1).unsqueeze(dim)\n\t            rem_score_exp = torch.exp(rem_score - torch.where(torch.isinf(rem_score_max), 0, rem_score_max))\n\t        cumsum_by_group = torch.zeros_like(max_by_group, dtype=x_exp.dtype)\n\t        cumsum_by_group.scatter_add_(dim, resp_mem_idx, x_exp, )\n\t        if rem_score is not None:\n\t            cumsum_by_group.select(dim=dim, index=mem_cnt - 1).unsqueeze(dim).add_(rem_score_exp)\n\t        denom = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t        probs = torch.where(denom < 0.5, 0, x_exp / denom)\n", "        if rem_score is not None:\n\t            rem_denom = cumsum_by_group.select(dim=dim, index=mem_cnt-1).unsqueeze(dim)\n\t            final_rem_score = torch.where(rem_denom < 0.5, 0, rem_score_exp / rem_denom)\n\t        else:\n\t            final_rem_score = None\n\t        ctx.mem_cnt = mem_cnt\n\t        ctx.dim = dim\n\t        ctx.save_for_backward(resp_mem_idx, probs, final_rem_score)\n\t        return probs, final_rem_score\n\t    @staticmethod\n", "    def backward(ctx, grad_probs, grad_final_rem_score):\n\t        mem_cnt = ctx.mem_cnt\n\t        dim = ctx.dim\n\t        resp_mem_idx, probs, final_rem_score = ctx.saved_tensors\n\t        grad_x = grad_dim = grad_mem_cnt = grad_resp_mem_idx = grad_rem_score = None\n\t        if ctx.needs_input_grad[0] or ctx.needs_input_grad[4]:\n\t            grad_pair = grad_probs * probs\n\t            if final_rem_score is not None:\n\t                rem_pair = final_rem_score * grad_final_rem_score\n\t            new_shape = list(probs.shape)\n", "            new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t            cumsum_by_group = grad_pair.new_zeros((*new_shape,))\n\t            cumsum_by_group.scatter_add_(dim, resp_mem_idx, grad_pair)\n\t            if final_rem_score is not None:\n\t                cumsum_by_group.select(dim=dim, index=mem_cnt - 1).unsqueeze(dim).add_(rem_pair)\n\t        if ctx.needs_input_grad[0]:\n\t            grad_sum = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t            grad_x = grad_pair - probs * grad_sum\n\t        assert not ctx.needs_input_grad[1]\n\t        assert not ctx.needs_input_grad[2]\n", "        assert not ctx.needs_input_grad[3]\n\t        if final_rem_score is not None and ctx.needs_input_grad[4]:\n\t            grad_rem_score = rem_pair - final_rem_score * cumsum_by_group.select(dim=dim, index=mem_cnt-1).unsqueeze(dim)\n\t        return grad_x, grad_dim, grad_mem_cnt, grad_resp_mem_idx, grad_rem_score\n\tdef landmark_grouped_softmax(x, dim, is_mem, attn_mask, last_section_mask,\n\t                             rem_score, mask_rem_score, return_group_prob,\n\t                             max_mem_cnt, p_group_dropout=None, rem_cutoff=None,):\n\t    mask = attn_mask\n\t    last_and_rest_mask = last_section_mask | mask\n\t    full_access_mask =  is_mem | last_and_rest_mask\n", "    # assert max_mem_cnt >= (is_mem.sum(dim=dim).max().view((1,)) + 2 + 1).item()\n\t    mem_group_idx = torch.cumsum(is_mem, dim=dim)\n\t    if rem_score is None:\n\t        mem_bucket_id = max_mem_cnt - 1\n\t    else:\n\t        mem_bucket_id = torch.where(mask_rem_score, max_mem_cnt - 1, max_mem_cnt - 2)\n\t    resp_mem_idx = torch.where(last_and_rest_mask, \n\t                                max_mem_cnt - 1,\n\t                                torch.where(is_mem, mem_bucket_id, mem_group_idx))\n\t    probs, final_rem_score = LandmarkGroupedSoftmaxFunction.apply(x, dim, max_mem_cnt, resp_mem_idx, rem_score)\n", "    if rem_cutoff is not None:\n\t        final_rem_score = torch.where(final_rem_score < rem_cutoff, 0., final_rem_score)\n\t    new_shape = list(x.shape)\n\t    new_shape[dim] = max_mem_cnt\n\t    group_prob = probs.new_zeros((*new_shape, ))\n\t    if rem_score is None:\n\t        group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), probs)\n\t    else:\n\t        group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), \n\t            torch.where(mask_rem_score, 1., final_rem_score) * probs)\n", "    if p_group_dropout is not None:\n\t        group_prob = torch.nn.functional.dropout(group_prob, p=p_group_dropout, inplace=True)\n\t        group_prob.select(dim, max_mem_cnt - 1).copy_((probs * last_section_mask).sum(dim=dim, )).div_(1 - p_group_dropout)\n\t    else:\n\t        group_prob.select(dim, max_mem_cnt - 1).copy_((probs * last_section_mask).sum(dim=dim, ))\n\t    probs = probs.mul(torch.where(full_access_mask, last_section_mask, torch.gather(group_prob, dim, resp_mem_idx)))\n\t    return probs, (group_prob if return_group_prob else None)\n\tdef softmax_ignore_mem(x, dim, is_mem, *args, **kwargs):\n\t    x = x.masked_fill(is_mem, float('-inf'))\n\t    return torch.nn.functional.softmax(x, dim=dim), None\n", "class CausalSelfAttention(nn.Module):\n\t    def __init__(self, config, lm_cache):\n\t        super().__init__()\n\t        assert config.n_embd % config.n_head == 0\n\t        # key, query, value projections for all heads, but in a batch\n\t        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd, bias=config.bias)\n\t        # output projection\n\t        self.c_proj = nn.Linear(config.n_embd, config.n_embd, bias=config.bias)\n\t        # regularization\n\t        self.attn_dropout = nn.Dropout(config.dropout)\n", "        self.resid_dropout = nn.Dropout(config.dropout)\n\t        self.n_head = config.n_head\n\t        self.n_embd = config.n_embd\n\t        self.dropout = config.dropout\n\t        self.config = config\n\t        self.allow_cache_during_training = getattr(config, \"allow_cache_during_training\", False)\n\t        self.cache_storage = None\n\t        if not config.postpone_lm_cache:\n\t            self.init_cache_storage(lm_cache)\n\t        SOFTMAX_FUNC = {\n", "            \"nomem\": lambda x, dim, *args, **kwargs: (nn.functional.softmax(x, dim=dim), None),\n\t            \"mem_opt\": landmark_grouped_softmax,\n\t            \"ignore_mem\": softmax_ignore_mem,\n\t        }\n\t        self.softmax_func = SOFTMAX_FUNC[config.softmax_func]\n\t        # causal mask to ensure that attention is only applied to the left in the input sequence\n\t        self.register_buffer(\"bias\", torch.tril(torch.ones(config.sequence_length, config.sequence_length))\n\t                                    .view(1, 1, config.sequence_length, config.sequence_length))\n\t    def init_cache_storage(self, lm_cache):\n\t        if self.cache_storage is not None:\n", "            return\n\t        print(\"Init Storage\")\n\t        self.cache_storage = lm_cache.get_storage_for_layer(self)\n\t    def forward(self, x, is_mem, pos_emb_closure, cache_context, start_index):\n\t        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)\n\t        # calculate query, key, values for all heads in batch and move head forward to be the batch dim\n\t        q, k ,v  = self.c_attn(x).split(self.n_embd, dim=2)\n\t        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n\t        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)\n", "        rem_token_embedding = k[:, :, 0].unsqueeze(2)\n\t        q = q[:, :, 1:]\n\t        k = k[:, :, 1:]\n\t        v = v[:, :, 1:]\n\t        T -= 1\n\t        q = pos_emb_closure.adapt_queries(q, start_index=start_index)\n\t        rem_token_embedding = pos_emb_closure.adapt_keys(rem_token_embedding, start_index=-1)\n\t        rem_score = (q @ rem_token_embedding.transpose(-2, -1))  * (1.0 / math.sqrt(k.size(-1)))\n\t        if self.config.under_rem_score_prob is not None:\n\t            mask_rem_score = ~torch.where(\n", "                torch.rand_like(is_mem, dtype=q.dtype) <= self.config.under_rem_score_prob, is_mem, False)\n\t        else:\n\t            mask_rem_score = torch.ones_like(is_mem) # nothing is controlled\n\t        if cache_context is not None and self.cache_storage is not None:\n\t            att_prefix, cache_values_dict = \\\n\t                self.cache_storage.retrieve_for_query(q, cache_context, pos_emb_closure, start_index)\n\t            # self.cache_storage.store_in_cache(k, {'v': v, 'is_mem': is_mem})\n\t            if self.training and att_prefix is not None and not self.allow_cache_during_training:\n\t                raise ValueError(\"Cache is not allowed during training\")\n\t            mask_rem_score = torch.cat((~cache_values_dict['is_mem'], mask_rem_score), dim=-1)\n", "        else:\n\t            att_prefix = None\n\t        if self.config.rem_cutoff is not None:\n\t            assert not self.training\n\t        mask_rem_score = mask_rem_score.view(B, 1, 1, mask_rem_score.shape[1]).expand(B, self.n_head, T, mask_rem_score.shape[1])\n\t        k_before_pos = k\n\t        is_mem_orig = is_mem\n\t        #k2 = pos_emb_closure.adapt_keys(k, start_index=0)\n\t        k = pos_emb_closure.adapt_keys(k, start_index=start_index)\n\t        # manual implementation of attention\n", "        att = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))\n\t        #att2 = (q2 @ k2.transpose(-2, -1)) * (1.0 / math.sqrt(k2.size(-1)))\n\t        #print(start_index, (att - att2).max())\n\t        att = pos_emb_closure.adapt_attention_before_softmax(att, start_query_index=start_index, start_key_index=start_index)\n\t        att = att.masked_fill(self.bias[:,:,:T,:T] == 0, float('-inf'))\n\t        attn_mask = self.bias[:,:,:T,:T] == 0\n\t        if att_prefix is not None:\n\t            prefix_size = att_prefix.shape[-1]\n\t            current_size = att.shape[-1]\n\t            att = torch.cat((att_prefix, att), dim=-1)\n", "            if 'is_mem' in cache_values_dict:\n\t                is_mem = torch.cat((cache_values_dict['is_mem'], is_mem), dim=-1)\n\t            else:\n\t                is_mem = torch.cat((is_mem.new_zeros((B, prefix_size)), is_mem), dim=-1)\n\t            attn_mask = torch.cat((attn_mask.new_zeros((1, 1, T, prefix_size)), attn_mask), dim=-1)\n\t        #print(attn_mask.shape, attn_mask[..., 40:80])\n\t        is_mem_mat = is_mem.unsqueeze(1).unsqueeze(2).repeat((1, self.n_head, 1, 1))\n\t        # The following block should be inside landmark_grouped_softmax\n\t        # however, moving it there causes problems with torch.compile.\n\t        is_mem = is_mem_mat\n", "        dim = -1\n\t        with torch.no_grad():\n\t            mem_ids = torch.where(attn_mask, 0., torch.cumsum(is_mem, dim) - is_mem.int())\n\t            last_section_mask = torch.amax(mem_ids, dim, keepdim=True) == mem_ids\n\t            mask = attn_mask.logical_or(is_mem & last_section_mask) \n\t            last_section_mask.logical_and_(~mask)\n\t            is_mem = is_mem.logical_and(~mask)\n\t        att = att.masked_fill_(mask, float('-inf'))  \n\t        # End of block\n\t        att, group_prob = self.softmax_func(att, dim=-1, \n", "                                            is_mem=is_mem, attn_mask=mask,\n\t                                            last_section_mask=last_section_mask,\n\t                                            rem_score=rem_score, mask_rem_score=mask_rem_score, \n\t                                            return_group_prob=False, max_mem_cnt=self.config.max_groups_for_softmax,\n\t                                            p_group_dropout=self.config.group_dropout if self.training else None,\n\t                                            rem_cutoff=self.config.rem_cutoff)\n\t        att = self.attn_dropout(att)\n\t        if att_prefix is not None:\n\t            att_prefix, att = torch.split(att, (prefix_size, current_size), dim=-1)\n\t        y = att @ v # (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)\n", "        if att_prefix is not None:\n\t            cache_v = cache_values_dict['v']\n\t            if cache_v.ndim == v.ndim:\n\t                y += att_prefix @ cache_v\n\t            elif cache_v.ndim == v.ndim + 1:\n\t                y += (att_prefix.unsqueeze(3) @ cache_v).squeeze(3)\n\t            else:\n\t                raise NotImplementedError\n\t        y = y.transpose(1, 2).contiguous().view(B, T, C) # re-assemble all head outputs side by side\n\t        # output projection\n", "        y = self.resid_dropout(self.c_proj(torch.cat((y.new_zeros((B, 1, C)), y), dim=1)))\n\t        if cache_context is not None and self.cache_storage is not None:\n\t            with torch.no_grad():\n\t                self.cache_storage.store_in_cache(k_before_pos, {'v': v, 'is_mem': is_mem_orig})\n\t        return y, group_prob\n\tclass MLP(nn.Module):\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=config.bias)\n\t        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=config.bias)\n", "        self.dropout = nn.Dropout(config.dropout)\n\t        self.activation = nn.GELU()\n\t    def forward(self, x):\n\t        x = self.c_fc(x)\n\t        x = self.activation(x)\n\t        x = self.c_proj(x)\n\t        x = self.dropout(x)\n\t        return x\n\tclass Block(nn.Module):\n\t    def __init__(self, config, lm_cache):\n", "        super().__init__()\n\t        self.ln_1 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.attn = CausalSelfAttention(config, lm_cache)\n\t        self.ln_2 = LayerNorm(config.n_embd, bias=config.bias)\n\t        self.mlp = MLP(config)\n\t    def forward(self, x, is_mem, pos_emb_closure, cache_context, start_index):\n\t        x_attn, group_prob = self.attn(self.ln_1(x), is_mem, pos_emb_closure, cache_context, start_index)\n\t        x = x + x_attn\n\t        x = x + self.mlp(self.ln_2(x))\n\t        return x, group_prob\n", "class GPTBase(nn.Module):\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        assert config.vocab_size is not None\n\t        assert config.sequence_length is not None\n\t        self.config = config\n\t        self.tokenizer = tiktoken.get_encoding(\"gpt2\")\n\t        assert self.config.enable_rem_score\n\t        self.lm_cache = None\n\t        if not config.postpone_lm_cache:\n", "            self.init_cache()\n\t        self.transformer = nn.ModuleDict(dict(\n\t            wte = nn.Embedding(config.vocab_size, config.n_embd),\n\t            wpe = positional_encoders.get_encoder(config.positional_encoder)(config),\n\t            drop = nn.Dropout(config.dropout),\n\t            h = nn.ModuleList([Block(config, self.lm_cache) for idx in range(config.n_layer)]),\n\t            ln_f = LayerNorm(config.n_embd, bias=config.bias),\n\t        ))\n\t        self.rem_token_embedding = nn.Embedding(1, config.n_embd)\n\t        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)\n", "        # with weight tying when using torch.compile() some warnings get generated:\n\t        # \"UserWarning: functional_call was passed multiple values for tied weights.\n\t        # This behavior is deprecated and will be an error in future versions\"\n\t        # not 100% sure what this is, so far seems to be harmless. TODO investigate\n\t        self.transformer.wte.weight = self.lm_head.weight # https://paperswithcode.com/method/weight-tying\n\t        # init all weights\n\t        self.apply(self._init_weights)\n\t        # apply special scaled init to the residual projections, per GPT-2 paper\n\t        for pn, p in self.named_parameters():\n\t            if pn.endswith('c_proj.weight'):\n", "                torch.nn.init.normal_(p, mean=0.0, std=0.02/math.sqrt(2 * config.n_layer))\n\t        # report number of parameters\n\t        print(\"number of parameters: %.2fM\" % (self.get_num_params()/1e6,))\n\t    def init_cache(self):\n\t        self.lm_cache = caches.get_cache(self.config.lm_cache)(self.config)\n\t        for m in self.modules():\n\t            if hasattr(m, \"init_cache_storage\"):\n\t                m.init_cache_storage(self.lm_cache)\n\t    def get_num_params(self, non_embedding=True):\n\t        \"\"\"\n", "        Return the number of parameters in the model.\n\t        For non-embedding count (default), the position embeddings get subtracted.\n\t        The token embeddings would too, except due to the parameter sharing these\n\t        params are actually used as weights in the final layer, so we include them.\n\t        \"\"\"\n\t        n_params = sum(p.numel() for p in self.parameters())\n\t        if non_embedding:\n\t            n_params -= sum(p.numel() for p in self.transformer.wpe.parameters()) # TODO: Why do we need this?\n\t        return n_params\n\t    def _init_weights(self, module):\n", "        if isinstance(module, nn.Linear):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t            if module.bias is not None:\n\t                torch.nn.init.zeros_(module.bias)\n\t        elif isinstance(module, nn.Embedding):\n\t            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\t    def forward(self, idx, targets=None, get_logits=False, use_cache=False):\n\t        device = idx.device\n\t        b, t = idx.size()\n\t        assert t <= self.config.sequence_length, f\"Cannot forward sequence of length {t}, block size is only {self.config.sequence_length}\"\n", "        # forward the GPT model itself\n\t        if use_cache:\n\t            idx, index_shift, cache_context = self.lm_cache(idx)\n\t        else:\n\t            index_shift = 0\n\t            cache_context = None\n\t        idx, pos_emb_closure = self.transformer.wpe(idx) # position embeddings of shape (1, t, n_embd)\n\t        is_mem = idx == self.config.landmark_id\n\t        tok_emb = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)\n\t        rem_tok_emb = self.rem_token_embedding(idx.new_zeros((b, 1)))\n", "        x = pos_emb_closure.adapt_model_input(tok_emb, start_index=index_shift)\n\t        rem_tok_emb = pos_emb_closure.adapt_model_input(rem_tok_emb, start_index=-1)\n\t        # print(\"Index shift: \", index_shift)\n\t        x = self.transformer.drop(x)\n\t        x = torch.cat((rem_tok_emb, x), dim=1)\n\t        group_prob = None\n\t        for block in self.transformer.h:\n\t            x, group_prob = block(x, is_mem, pos_emb_closure, cache_context, start_index=index_shift)\n\t        x = x[:, 1:]\n\t        x = self.transformer.ln_f(x)\n", "        if use_cache:\n\t            x = self.lm_cache.get_final_logits(x)\n\t        if targets is not None:\n\t            # if we are given some desired targets also calculate the loss\n\t            logits = self.lm_head(x)\n\t            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)\n\t        else:\n\t            # inference-time mini-optimization: only forward the lm_head on the very last position\n\t            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim\n\t            loss = None\n", "        logits = logits if get_logits else None\n\t        return {'logits': logits, 'loss': loss}\n\t    def clear_state(self):\n\t        self.lm_cache.clear_state()\n\t    def crop_sequence_length(self, sequence_length):\n\t        # model surgery to decrease the block size if necessary\n\t        # e.g. we may load the GPT2 pretrained model checkpoint (block size 1024)\n\t        # but want to use a smaller block size for some smaller, simpler model\n\t        assert sequence_length <= self.config.sequence_length\n\t        self.config.sequence_length = sequence_length\n", "        self.transformer.wpe.weight = nn.Parameter(self.transformer.wpe.weight[:sequence_length])\n\t        for block in self.transformer.h:\n\t            block.attn.bias = block.attn.bias[:,:,:sequence_length,:sequence_length]\n\t    @classmethod\n\t    def from_pretrained(cls, model_type, override_args=None):\n\t        # TODO\n\t        pass\n\t    def get_parameter_group_specs(self):\n\t        \"\"\"\n\t        This long function is unfortunately doing something very simple and is being very defensive:\n", "        We are separating out all parameters of the model into two buckets: those that will experience\n\t        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n\t        We are then returning the PyTorch optimizer object.\n\t        \"\"\"\n\t        # separate out all parameters to those that will and won't experience regularizing weight decay\n\t        decay = set()\n\t        no_decay = set()\n\t        whitelist_weight_modules = (torch.nn.Linear, )\n\t        blacklist_weight_modules = (torch.nn.LayerNorm, LayerNorm, torch.nn.Embedding)\n\t        for mn, m in self.named_modules():\n", "            for pn, p in m.named_parameters():\n\t                fpn = '%s.%s' % (mn, pn) if mn else pn # full param name\n\t                # random note: because named_modules and named_parameters are recursive\n\t                # we will see the same tensors p many many times. but doing it this way\n\t                # allows us to know which parent module any tensor p belongs to...\n\t                if pn.endswith('bias'):\n\t                    # all biases will not be decayed\n\t                    no_decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, whitelist_weight_modules):\n\t                    # weights of whitelist modules will be weight decayed\n", "                    decay.add(fpn)\n\t                elif pn.endswith('weight') and isinstance(m, blacklist_weight_modules):\n\t                    # weights of blacklist modules will NOT be weight decayed\n\t                    no_decay.add(fpn)\n\t        # subtle: 'transformer.wte.weight' and 'lm_head.weight' are tied, so they\n\t        # will appear in the no_decay and decay sets respectively after the above.\n\t        # In addition, because named_parameters() doesn't return duplicates, it\n\t        # will only return the first occurence, key'd by 'transformer.wte.weight', below.\n\t        # so let's manually remove 'lm_head.weight' from decay set. This will include\n\t        # this tensor into optimization via transformer.wte.weight only, and not decayed.\n", "        decay.remove('lm_head.weight')\n\t        # validate that we considered every parameter\n\t        param_dict = {pn: p for pn, p in self.named_parameters()}\n\t        inter_params = decay & no_decay\n\t        union_params = decay | no_decay\n\t        assert len(inter_params) == 0, \"parameters %s made it into both decay/no_decay sets!\" % (str(inter_params), )\n\t        assert len(param_dict.keys() - union_params) == 0, \"parameters %s were not separated into either decay/no_decay set!\" \\\n\t                                                    % (str(param_dict.keys() - union_params), )\n\t        # create the pytorch optimizer object\n\t        return [\n", "            {\"params\": sorted(list(decay))},\n\t            {\"params\": sorted(list(no_decay)), \"weight_decay\": 0.0},\n\t        ]\n\t    @torch.no_grad()\n\t    def generate(self, idx, max_new_tokens, temperature=1.0, top_k=None):\n\t        \"\"\"\n\t        Take a conditioning sequence of indices idx (LongTensor of shape (b,t)) and complete\n\t        the sequence max_new_tokens times, feeding the predictions back into the model each time.\n\t        Most likely you'll want to make sure to be in model.eval() mode of operation for this.\n\t        \"\"\"\n", "        for _ in range(max_new_tokens):\n\t            # if the sequence context is growing too long we must crop it at sequence_length\n\t            idx_cond = idx if idx.size(1) <= self.config.sequence_length else idx[:, -self.config.sequence_length:]\n\t            # forward the model to get the logits for the index in the sequence\n\t            logits = self(idx_cond, get_logits=True)['logits']\n\t            # pluck the logits at the final step and scale by desired temperature\n\t            logits = logits[:, -1, :] / temperature\n\t            # optionally crop the logits to only the top k options\n\t            if top_k is not None:\n\t                v, _ = torch.topk(logits, min(top_k, logits.size(-1)))\n", "                logits[logits < v[:, [-1]]] = -float('Inf')\n\t            # apply softmax to convert logits to (normalized) probabilities\n\t            probs = F.softmax(logits, dim=-1)\n\t            # sample from the distribution\n\t            idx_next = torch.multinomial(probs, num_samples=1)\n\t            # append sampled index to the running sequence and continue\n\t            idx = torch.cat((idx, idx_next), dim=1)\n\t        return idx\n\t    @torch.no_grad()\n\t    def generate_from_string(self, in_str, max_new_tokens, temperature=1.0, top_k=None):\n", "        idx = torch.tensor(self.tokenizer.encode(in_str, allowed_special={\"<|endoftext|>\"})).view(1,-1).to(self.lm_head.weight.device)\n\t        out_idx = self.generate(idx, max_new_tokens, temperature, top_k).view(-1).to('cpu').numpy()\n\t        return self.tokenizer.decode(out_idx)\n"]}
{"filename": "lm_benchmark/models/positional_encoders/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import encoder, rotary, rotary_mem_jump\n\tPOS_ENCS = {\n\t    \"rotary\": rotary.RotaryPositionalEncoder,\n\t    \"rotary_mem_jump\": rotary_mem_jump.RotaryJumpMemPositionalEncoder\n\t}\n\tdef get_encoder(encoder_name):\n\t    return POS_ENCS[encoder_name]\n", "def registered_encoders():\n\t    return POS_ENCS.keys()\n"]}
{"filename": "lm_benchmark/models/positional_encoders/rotary_utils.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport torch\n\tdef rotate_half(x):\n\t    x = x.view(*x.shape[:-1], -1, 2)\n\t    x1, x2 = x.unbind(dim = -1)\n\t    x = torch.stack((-x2, x1), dim = -1)\n\t    return x.view(*x.shape[:-2], -1)\n\tdef apply_rotary_emb(freqs, t, start_index = 0, scale = 1.):\n", "    #freqs = freqs.to(t)\n\t    rot_dim = freqs.shape[-1]\n\t    end_index = start_index + rot_dim\n\t    assert rot_dim <= t.shape[-1], f'feature dimension {t.shape[-1]} is not of sufficient size to rotate in all the positions {rot_dim}'\n\t    #t_left, t, t_right = t[..., :start_index], t[..., start_index:end_index], t[..., end_index:]\n\t    t = (t * freqs.cos().to(t) * scale) + (rotate_half(t) * freqs.sin().to(t) * scale)\n\t    #return torch.cat((t_left, t, t_right), dim = -1)\n\t    return t\n"]}
{"filename": "lm_benchmark/models/positional_encoders/rotary_mem_jump.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport torch\n\tfrom torch import nn\n\tfrom .encoder import PositionalEncoder, PositionalEncoderClosure\n\tfrom .rotary_utils import apply_rotary_emb\n\tclass JumpingRotaryPositionalEncoderClosure(PositionalEncoderClosure):\n\t    def __init__(self, encoder, jumps):\n\t        super().__init__(encoder)\n", "        self.jumps = jumps\n\t    def adapt_vector_for_indices(self, v, indices):\n\t        #changer = torch.zeros_like(indices)\n\t        #changer[50::51] = 1\n\t        #indices -= torch.cumsum(changer, dim=-1)\n\t        *other_dims, T, hs = v.shape\n\t        if T == 0:\n\t            return v\n\t        other_dims_prefix = other_dims[:len(other_dims) - len(indices.shape) + 1]\n\t        if self.jumps is not None:\n", "            indices = indices.view([1] * len(other_dims_prefix) + list(indices.shape)).repeat(other_dims_prefix + [1] * len(indices.shape))\n\t            indices[..., 1:] = indices[..., 1:] + self.jumps\n\t            other_dims_prefix = []\n\t            # print(indices)\n\t        freqs = (indices.unsqueeze(-1) * self.encoder.freqs.view(1, -1)).unsqueeze(-1).expand(*indices.shape, -1, 2).reshape(*indices.shape, hs)\n\t        freqs = freqs.view([1] * len(other_dims_prefix) + list(indices.shape) + [hs]).expand(*v.shape)\n\t        v = apply_rotary_emb(freqs, v)\n\t        return v\n\t    def _adapt_keys_for_indices(self, k, indices):\n\t        return self.adapt_vector_for_indices(k, indices)\n", "    def adapt_queries(self, q, start_index):\n\t        T = q.shape[-2]\n\t        indices = torch.arange(start_index, T + start_index, device=q.device)\n\t        return self.adapt_vector_for_indices(q, indices)\n\tclass RotaryJumpMemPositionalEncoder(PositionalEncoder):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.max_pos_log = 4\n\t        self.max_pos_base = 10  \n\t        n_embd_per_head = config.n_embd // config.n_head\n", "        freqs =  (self.max_pos_base ** (-self.max_pos_log * torch.arange(0, n_embd_per_head, 2)[:(n_embd_per_head // 2)].float() / n_embd_per_head))\n\t        self.register_buffer(\"freqs\", freqs)\n\t    def forward(self, x):\n\t        if self.config.pos_jump_on_mem is not None and self.config.pos_jump_on_mem > 0:\n\t            #assert self.config.mem_freq is not None\n\t            is_mem = (x == self.config.landmark_id)\n\t            jumps = torch.cumsum((is_mem * torch.randint_like(x, self.config.pos_jump_on_mem))[:, :-1], dim=-1)\n\t            return x, self.closure_model(self, jumps.unsqueeze(1)) # (B, 1, T)\n\t        else:\n\t            return x, self.closure_model(self, None)\n", "    closure_model = JumpingRotaryPositionalEncoderClosure\n"]}
{"filename": "lm_benchmark/models/positional_encoders/rotary.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport torch\n\tfrom torch import nn\n\tfrom .encoder import PositionalEncoder, PositionalEncoderClosure\n\tfrom .rotary_utils import apply_rotary_emb\n\tclass RotaryPositionalEncoderClosure(PositionalEncoderClosure):\n\t    def adapt_vector_for_indices(self, v, indices):\n\t        #changer = torch.zeros_like(indices)\n", "        #changer[50::51] = 1\n\t        #indices -= torch.cumsum(changer, dim=-1)\n\t        *other_dims, T, hs = v.shape\n\t        if T == 0:\n\t            return v\n\t        other_dims_prefix = other_dims[:len(other_dims) - len(indices.shape) + 1]\n\t        freqs = (indices.unsqueeze(-1) * self.encoder.freqs.view(1, -1)).unsqueeze(-1).expand(*indices.shape, -1, 2).reshape(*indices.shape, hs)\n\t        freqs = freqs.view([1] * len(other_dims_prefix) + list(indices.shape) + [hs]).expand(*v.shape)\n\t        v = apply_rotary_emb(freqs, v)\n\t        return v\n", "    def _adapt_keys_for_indices(self, k, indices):\n\t        return self.adapt_vector_for_indices(k, indices)\n\t    def adapt_queries(self, q, start_index):\n\t        T = q.shape[-2]\n\t        indices = torch.arange(start_index, T + start_index, device=q.device)\n\t        return self.adapt_vector_for_indices(q, indices)\n\tclass RotaryPositionalEncoder(PositionalEncoder):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.max_pos_log = 4\n", "        self.max_pos_base = 10  \n\t        n_embd_per_head = config.n_embd // config.n_head\n\t        freqs =  (self.max_pos_base ** (-self.max_pos_log * torch.arange(0, n_embd_per_head, 2)[:(n_embd_per_head // 2)].float() / n_embd_per_head))\n\t        self.register_buffer(\"freqs\", freqs)\n\t    closure_model = RotaryPositionalEncoderClosure\n"]}
{"filename": "lm_benchmark/models/positional_encoders/encoder.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport torch\n\tfrom torch import nn\n\tclass PositionalEncoderClosure(object):\n\t    def __init__(self, encoder):\n\t        self.encoder = encoder\n\t    def adapt_model_input(self, x, start_index):\n\t        return x\n", "    def adapt_keys(self, k, start_index=None, indices=None):\n\t        if indices is None:\n\t            T = k.shape[-2]\n\t            indices = torch.arange(start_index, T + start_index, device=k.device)\n\t        return self._adapt_keys_for_indices(k, indices)\n\t    def _adapt_keys_for_indices(self, k, indices):\n\t        return k\n\t    def adapt_queries(self, q, start_index):\n\t        return q\n\t    def adapt_attention_before_softmax(self, att, start_query_index=None, start_key_index=None, q_indices=None, k_indices=None):\n", "        if q_indices is None:\n\t            qT = att.shape[-2]\n\t            q_indices = torch.arange(start_query_index, qT + start_query_index, device=att.device)\n\t        if k_indices is None:\n\t            kT = att.shape[-1]\n\t            k_indices = torch.arange(start_key_index, kT + start_key_index, device=att.device)\n\t        return self._adapt_attention_before_softmax_for_indices(att, q_indices, k_indices)\n\t    def _adapt_attention_before_softmax_for_indices(self, att, query_indices, key_indices):\n\t        return att\n\tclass PositionalEncoder(nn.Module):\n", "    closure_model = PositionalEncoderClosure\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.config = config\n\t    def forward(self, x):\n\t        return x, self.closure_model(self)\n"]}
{"filename": "lm_benchmark/models/caches/cache.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom torch import nn\n\tclass LMCacheStorage(nn.Module):\n\t    def __init__(self, config, layer):\n\t        super().__init__()\n\t        self.config = config\n\t        #self._layer = [layer]\n\t    #@property\n", "    #def layer(self):\n\t    #    return self._layer[0]\n\t    def store_in_cache(self, keys, values_dict):\n\t        pass\n\t    def retrieve_for_query(self, q, cache_context, pos_emb_closure, start_index):\n\t        return None, {}\n\t    def clear_state(self):\n\t        pass\n\tclass LMCacheContext(object):\n\t    pass\n", "class LMCache(nn.Module):\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.config = config\n\t        self.layer_storages_map = dict()\n\t        self.layer_storages = nn.ModuleList()\n\t        self.cache_storage = self.get_cache_storage()\n\t        self.context_class = self.get_context_class()\n\t    def get_cache_storage(self):\n\t        return LMCacheStorage\n", "    def get_context_class(self):\n\t        return LMCacheContext\n\t    def forward(self, x):\n\t        return x, 0, self.get_context_class()\n\t    def get_final_logits(self, logits):\n\t        return logits\n\t    def get_storage_for_layer(self, l):\n\t        if l not in self.layer_storages_map:\n\t            self.layer_storages_map[l] = len(self.layer_storages)\n\t            self.layer_storages.append(self.cache_storage(self.config, l))\n", "        return self.layer_storages[self.layer_storages_map[l]]\n\t    def clear_state(self):\n\t        for storage in self.layer_storages:\n\t            storage.clear_state()\n"]}
{"filename": "lm_benchmark/models/caches/mem_cache.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport torch\n\tfrom .cache import LMCache, LMCacheStorage\n\tclass MemLMCacheStorage(LMCacheStorage):\n\t    def __init__(self, config, layer):\n\t        super().__init__(config, layer)\n\t        n_embd_per_head = config.n_embd // config.n_head\n", "        self.register_buffer(\"cache_mem_k\", torch.empty((config.batch_size, config.mem_cache_size, config.mem_cache_freq + 1, config.n_head, n_embd_per_head)), persistent=False)\n\t        self.register_buffer(\"cache_mem_v\", torch.empty((config.batch_size, config.mem_cache_size, config.mem_cache_freq + 1, config.n_head, n_embd_per_head)), persistent=False)\n\t        self.register_buffer(\"last_incomplete_k\", torch.empty((config.batch_size, config.n_head, config.mem_cache_freq + 1, n_embd_per_head)), persistent=False)\n\t        self.register_buffer(\"last_incomplete_v\", torch.empty((config.batch_size, config.n_head, config.mem_cache_freq + 1, n_embd_per_head)), persistent=False)\n\t        self.register_buffer(\"last_incomplete_ismem\", torch.empty((config.batch_size, config.mem_cache_freq + 1), dtype=torch.bool), persistent=False)\n\t        self.last_incomplete_len = 0\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t        self.clear_state()\n\t    def clear_state(self):\n", "        self.last_incomplete_len = 0\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t    def retrieve_for_query(self, q, cache_context, pos_emb_closure, start_index):\n\t        B, nh, T, hs = q.size() \n\t        last_incomplete_k = pos_emb_closure.adapt_keys(self.last_incomplete_k[:B, :, :self.last_incomplete_len], start_index=start_index - self.last_incomplete_len)\n\t        att_incomplete = (q @ last_incomplete_k.transpose(-2, -1)) * (1.0 / math.sqrt(last_incomplete_k.size(-1)))\n\t        last_incomplete_v = self.last_incomplete_v[:B, :, :self.last_incomplete_len].unsqueeze(2).expand(B, nh, T, self.last_incomplete_len, hs)\n\t        last_incomplete_mem = self.last_incomplete_ismem[:B, :self.last_incomplete_len]\n\t        if self.cache_size == 0 or self.config.cache_topk == 0:\n", "            return att_incomplete, {'v': last_incomplete_v.clone(), 'is_mem': last_incomplete_mem.clone()}\n\t        top_k = self.config.cache_topk\n\t        k_with_cached_mem = self.cache_mem_k[:B, :self.cache_size, -1].view(B, -1, nh, hs).transpose(1, 2) # (B, nh, T, hs)\n\t        mem_indices = torch.cat((\n\t            torch.arange(k_with_cached_mem.shape[2] - self.cache_iter, k_with_cached_mem.shape[2], device=q.device),\n\t            torch.arange(0, k_with_cached_mem.shape[2] - self.cache_iter, device=q.device),\n\t        )).unsqueeze(0).expand(B, -1) \n\t        mem_indices = torch.where(mem_indices >= (k_with_cached_mem.shape[2] - top_k), mem_indices - (k_with_cached_mem.shape[2] - top_k) + 1, 0)\n\t        mem_token_indices = mem_indices * self.cache_mem_k.shape[2] + self.cache_mem_k.shape[2] - 1\n\t        k_with_cached_mem = pos_emb_closure.adapt_keys(k_with_cached_mem, indices=mem_token_indices.unsqueeze(1).expand(B, nh, -1))\n", "        mem_att = (q @ k_with_cached_mem.transpose(-2, -1)) * (1.0 / math.sqrt(k_with_cached_mem.size(-1)))\n\t        mem_att = torch.nn.functional.softmax(mem_att, dim=-1) # (B, nh, T, mem_count)\n\t        if self.config.cache_selection_method == \"max_over_heads\":\n\t            mem_att = mem_att.amax(dim=1).unsqueeze(1).expand(B, nh, T, -1)\n\t        elif self.config.cache_selection_method == \"per_token_and_head\":\n\t            pass\n\t        elif self.config.cache_selection_method == \"max_over_tokens\":\n\t            mem_att = mem_att.amax(dim=2, keepdim=True).expand(B, nh, T, -1)\n\t        else:\n\t            raise NotImplementedError\n", "        mem_att = mem_att.topk(dim=-1,k=top_k)[1]\n\t        if top_k > 1:\n\t            # sort\n\t            mem_att = torch.where(\n\t                mem_att < self.cache_iter, \n\t                (k_with_cached_mem.shape[2] - self.cache_iter) + mem_att, \n\t                mem_att - self.cache_iter)\n\t            mem_att = mem_att.sort(dim=-1)[0] # (B, nh, T, top_k)\n\t            mem_att = torch.where(\n\t                mem_att >= (k_with_cached_mem.shape[2] - self.cache_iter), \n", "                mem_att - (k_with_cached_mem.shape[2] - self.cache_iter), \n\t                mem_att + self.cache_iter) # (B, nh, T, top_k)\n\t        mem_att_or = mem_att\n\t        mem_att = mem_att.permute(0, 2, 3, 1).view(B, T, top_k, 1, nh, 1).expand(B, T, top_k, self.cache_mem_k.shape[2], nh, hs)\n\t        mem_k = self.cache_mem_k[:B].unsqueeze(1).expand(B, T, -1, -1, -1, -1).take_along_dim(mem_att, dim=2).view(B, T, -1, nh, hs)\n\t        mem_k = mem_k.permute((0, 3, 1, 2, 4))\n\t        mem_v = self.cache_mem_v[:B].unsqueeze(1).expand(B, T, -1, -1, -1, -1).take_along_dim(mem_att, dim=2).view(B, T, -1, nh, hs) # (B, T, top_k * mem_block, nh, hs)\n\t        mem_v = mem_v.permute((0, 3, 1, 2, 4)) # (B, nh, T, mem_block, hs)\n\t        k_indices = torch.arange(0, self.cache_mem_k.shape[2] * top_k, device=q.device)\n\t        chosen_indices = mem_indices.view(B, 1, 1, -1).expand(B, nh, T, -1).take_along_dim(mem_att_or, dim=-1)\n", "        k_indices = (((chosen_indices > 0) * self.cache_mem_k.shape[2]).unsqueeze(-1) + k_indices.view(1, 1, 1, top_k, -1)).view(B, nh, T, -1) # (B, nh, T, top_k * mem_block)\n\t        is_mem = torch.cat((q.new_zeros((B, top_k, self.cache_mem_k.shape[2] - 1), dtype=torch.bool), q.new_ones((B, top_k, 1), dtype=torch.bool)), dim=-1).view(B, -1)\n\t        mem_k = pos_emb_closure.adapt_keys(mem_k.reshape(B, nh, -1, hs), indices=k_indices.reshape(B, nh, -1)).view(B, nh, T, -1, hs)\n\t        att_k = (q.unsqueeze(3) @ mem_k.transpose(-2, -1)).squeeze(3) * (1.0 / math.sqrt(mem_k.size(-1)))\n\t        att_k = pos_emb_closure.adapt_attention_before_softmax(att_k, start_query_index=start_index, k_indices=k_indices)\n\t        att_prefix = torch.cat((att_k, att_incomplete), dim=-1)\n\t        v_prefix = torch.cat((mem_v, last_incomplete_v), dim=-2)\n\t        is_mem_prefix = torch.cat((is_mem, last_incomplete_mem), dim=-1)\n\t        return att_prefix, {'v': v_prefix, 'is_mem': is_mem_prefix}\n\t    def store_in_cache(self, keys, values_dict):\n", "        B, nh, T, hs = keys.size()\n\t        k = torch.cat((self.last_incomplete_k[:B, :, :self.last_incomplete_len], keys), dim=-2)\n\t        v = torch.cat((self.last_incomplete_v[:B, :, :self.last_incomplete_len], values_dict['v']), dim=-2)\n\t        is_mem = torch.cat((self.last_incomplete_ismem[:B, :self.last_incomplete_len], values_dict['is_mem']), dim=-1)\n\t        B, nh, T, hs = k.size()\n\t        incomplete_len = T % self.cache_mem_k.shape[2]\n\t        full_len = T - incomplete_len\n\t        k, incomplete_k = torch.split(k, (full_len, incomplete_len), dim=-2)\n\t        v, incomplete_v = torch.split(v, (full_len, incomplete_len), dim=-2)\n\t        is_mem, incomplete_ismem = torch.split(is_mem, (full_len, incomplete_len), dim=-1)\n", "        self.last_incomplete_k[:B, :, :incomplete_len].copy_(incomplete_k)\n\t        self.last_incomplete_v[:B, :, :incomplete_len].copy_(incomplete_v)\n\t        self.last_incomplete_ismem[:B, :incomplete_len].copy_(incomplete_ismem)\n\t        self.last_incomplete_len = incomplete_len\n\t        T = full_len\n\t        assert T % self.cache_mem_k.shape[2] == 0\n\t        is_mem_for_cache = is_mem.view(B, -1, self.cache_mem_k.shape[2])\n\t        assert is_mem_for_cache[..., -1].all()\n\t        assert not is_mem_for_cache[..., :-1].any()\n\t        added_size = is_mem_for_cache.shape[1]\n", "        k_for_cache = k.transpose(1, 2).view(B, added_size, self.cache_mem_k.shape[2], nh, hs)\n\t        v_for_cache = v.transpose(1, 2).view(B, added_size, self.cache_mem_v.shape[2], nh, hs)\n\t        is_mem_for_cache = is_mem_for_cache[:, -self.cache_mem_k.shape[1]:]\n\t        k_for_cache = k_for_cache[:, -self.cache_mem_k.shape[1]:]\n\t        v_for_cache = v_for_cache[:, -self.cache_mem_k.shape[1]:]\n\t        self.cache_iter = (self.cache_iter + added_size - is_mem_for_cache.shape[1]) % self.cache_mem_k.shape[1]\n\t        self.cache_size += added_size - is_mem_for_cache.shape[1]\n\t        added_size = is_mem_for_cache.shape[1]\n\t        # torch._assert(added_size <= self.cache_mem_k.shape[1], \"Should fit. Sanity check\")\n\t        if self.cache_iter + added_size >= self.cache_mem_k.shape[1]:\n", "            next_iter = (self.cache_iter + added_size) - self.cache_mem_k.shape[1]\n\t            rem = (self.cache_mem_k.shape[1] - self.cache_iter)\n\t            self.cache_mem_k[:B, :next_iter].copy_(k_for_cache[:, rem:])\n\t            self.cache_mem_k[:B, self.cache_iter:].copy_(k_for_cache[:, :rem])\n\t            self.cache_mem_v[:B, :next_iter].copy_(v_for_cache[:, rem:])\n\t            self.cache_mem_v[:B, self.cache_iter:].copy_(v_for_cache[:, :rem])\n\t        else:\n\t            next_iter = self.cache_iter + added_size\n\t            self.cache_mem_k[:B, self.cache_iter:next_iter].copy_(k_for_cache)\n\t            self.cache_mem_v[:B, self.cache_iter:next_iter].copy_(v_for_cache)\n", "        self.cache_iter = next_iter\n\t        self.cache_size += added_size\n\tclass MemLMCacheContext(object):\n\t    def __init__(self):\n\t        self.group_prob = None\n\tclass MemLMCache(LMCache):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.last_incomplete_len = 0\n\t        self.total_len = 0\n", "    def get_cache_storage(self):\n\t        return MemLMCacheStorage\n\t    def get_context_class(self):\n\t        return MemLMCacheContext\n\t    def forward(self, x):\n\t        previous_incomplete_len = self.last_incomplete_len\n\t        #print(\"Concatenating with {}\".format(previous_incomplete_len))\n\t        #print(\"Being forward\", x.shape)\n\t        B, T = x.size()\n\t        incomplete_placeholder = x.new_full((B, previous_incomplete_len), -1)\n", "        x = torch.cat((incomplete_placeholder, x), dim=-1)\n\t        B, T = x.size()\n\t        incomplete_len = T % self.config.mem_cache_freq\n\t        full_len = T - incomplete_len\n\t        mem_x, incomplete_x = torch.split(x, (full_len, incomplete_len), dim=-1)\n\t        mem_x = mem_x.view(B, -1, self.config.mem_cache_freq)\n\t        mem_x = torch.cat((mem_x, mem_x.new_full((mem_x.shape[0], mem_x.shape[1], 1), self.config.landmark_id)), dim=-1)\n\t        x = torch.cat((mem_x.view(B, -1), incomplete_x), dim=-1)[:, previous_incomplete_len:]\n\t        self.last_incomplete_len = incomplete_len\n\t        #print(\"End forward\", x.shape)\n", "        #print(x)\n\t        prev_total_len = self.total_len\n\t        self.total_len += x.shape[1]\n\t        start_index = min(prev_total_len // (self.config.mem_cache_freq + 1), (self.config.cache_topk + 1)) * (self.config.mem_cache_freq + 1) + previous_incomplete_len\n\t        return x, start_index, self.context_class()\n\t    def get_final_logits(self, x):\n\t        B, T, C = x.size()\n\t        incomplete_len = self.last_incomplete_len\n\t        T_with_mem = T - incomplete_len\n\t        if T_with_mem <= 0: \n", "            incomplete_len = T\n\t            T_with_mem = 0\n\t            x, incomplete = torch.split(x, (0, T), dim=1)\n\t            previous_incomplete_len = -T_with_mem\n\t        else:\n\t            x, incomplete = torch.split(x, (T_with_mem, incomplete_len), dim=1)\n\t            previous_incomplete_len = (self.config.mem_cache_freq + 1 - T_with_mem % (self.config.mem_cache_freq + 1)) % (self.config.mem_cache_freq + 1)\n\t        incomplete_placeholder = x.new_full((B, previous_incomplete_len, C), -1)\n\t        x = torch.cat((incomplete_placeholder, x), dim=1).view(B, -1, self.config.mem_cache_freq + 1, C)\n\t        x = x[:, :, :-1].reshape(B, -1, C)[:, previous_incomplete_len:]\n", "        return torch.cat((x, incomplete), dim=1)\n\t    def clear_state(self):\n\t        super().clear_state()\n\t        self.last_incomplete_len = 0\n\t        self.total_len = 0\n"]}
{"filename": "lm_benchmark/models/caches/kv_cache.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport torch\n\tfrom .cache import LMCache, LMCacheStorage\n\tclass KVLMCacheStorage(LMCacheStorage):\n\t    def __init__(self, config, layer):\n\t        super().__init__(config, layer)\n\t        n_embd_per_head = config.n_embd // config.n_head\n", "        self.max_cache_size = config.mem_cache_size\n\t        self.register_buffer(\"cache_k\", torch.empty((config.batch_size, config.n_head, config.mem_cache_size, n_embd_per_head)), persistent=False)\n\t        self.register_buffer(\"cache_v\", torch.empty((config.batch_size, config.n_head, config.mem_cache_size, n_embd_per_head)), persistent=False)\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t        self.clear_state()\n\t    def clear_state(self):\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t    def retrieve_for_query(self, q, cache_context, pos_emb_closure, start_index):\n", "        if self.cache_size == 0:\n\t            return None, {}\n\t        B, nh, T, hs = q.size() # batch size, num_heads, sequence length, per-head embedding dimensionality (n_embd)\n\t        cached_keys = self.cache_k[:B, :, :self.cache_size]\n\t        k_indices = torch.cat((\n\t            torch.arange(self.cache_size - self.cache_iter, self.cache_size, device=q.device),\n\t            torch.arange(self.cache_size - cached_keys.shape[2], self.cache_size - self.cache_iter, device=q.device),\n\t        ))\n\t        assert self.cache_size == start_index\n\t        last_incomplete_k = pos_emb_closure.adapt_keys(cached_keys, indices=k_indices)\n", "        att_incomplete = (q @ last_incomplete_k.transpose(-2, -1)) * (1.0 / math.sqrt(last_incomplete_k.size(-1)))\n\t        last_incomplete_v = self.cache_v[:B, :, :self.cache_size].unsqueeze(2).expand(B, nh, T, -1, hs)\n\t        return att_incomplete, {'v': last_incomplete_v.clone()}\n\t    def store_in_cache(self, keys, values_dict):\n\t        if self.max_cache_size == 0:\n\t            return\n\t        B, nh, T, hs = keys.size()\n\t        k_for_cache = keys[:, :, -self.max_cache_size:]\n\t        v_for_cache = values_dict['v'][:, :, -self.max_cache_size:]\n\t        self.cache_iter = (self.cache_iter + T - k_for_cache.shape[2]) % self.cache_k.shape[2]\n", "        self.cache_size += T - k_for_cache.shape[2]\n\t        T = k_for_cache.shape[2]\n\t        if self.cache_iter + T >= self.max_cache_size:\n\t            next_iter = (self.cache_iter + T) - self.max_cache_size\n\t            rem = (self.max_cache_size - self.cache_iter)\n\t            self.cache_k[:B, :, :next_iter].copy_(k_for_cache[:, :, rem:])\n\t            self.cache_k[:B, :, self.cache_iter:].copy_(k_for_cache[:,:, :rem])\n\t            self.cache_v[:B, :, :next_iter].copy_(v_for_cache[:,:, rem:])\n\t            self.cache_v[:B, :, self.cache_iter:].copy_(v_for_cache[:,:, :rem])\n\t        else:\n", "            next_iter = self.cache_iter + T\n\t            self.cache_k[:B, :, self.cache_iter:next_iter].copy_(k_for_cache)\n\t            self.cache_v[:B, :, self.cache_iter:next_iter].copy_(v_for_cache)\n\t        self.cache_iter = next_iter\n\t        self.cache_size += T\n\tclass KVLMCache(LMCache):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.total_len = 0\n\t    def get_cache_storage(self):\n", "        return KVLMCacheStorage\n\t    def forward(self, x):\n\t        B, T = x.size()\n\t        prev_total_len = self.total_len\n\t        self.total_len = self.total_len + x.shape[1]\n\t        return x, prev_total_len, self.context_class()\n\t    def clear_state(self):\n\t        super().clear_state()\n\t        self.total_len = 0\n"]}
{"filename": "lm_benchmark/models/caches/__init__.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom . import cache, mem_cache, kv_cache, kv_cache_train\n\tCACHES = {\n\t    \"none\": cache.LMCache,\n\t    \"mem\": mem_cache.MemLMCache,\n\t    \"kv\": kv_cache.KVLMCache,\n\t    \"kv_train\": kv_cache_train.KVLMCache\n\t}\n", "def get_cache(cache_name):\n\t    return CACHES[cache_name]\n\tdef registered_caches():\n\t    return CACHES.keys()\n"]}
{"filename": "lm_benchmark/models/caches/kv_cache_train.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport torch\n\tfrom .cache import LMCache, LMCacheStorage\n\tclass KVLMCacheStorage(LMCacheStorage):\n\t    def __init__(self, config, layer):\n\t        super().__init__(config, layer)\n\t        n_embd_per_head = config.n_embd // config.n_head\n", "        self.max_cache_size = config.mem_cache_size\n\t        self._cache_k = [torch.empty((config.batch_size, config.n_head, config.mem_cache_size, n_embd_per_head), device=torch.device('cuda'))]\n\t        self._cache_v = [torch.empty((config.batch_size, config.n_head, config.mem_cache_size, n_embd_per_head), device=torch.device('cuda'))]\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t        self.clear_state()\n\t    @property\n\t    def cache_k(self):\n\t        return self._cache_k[0]\n\t    @property\n", "    def cache_v(self):\n\t        return self._cache_v[0]\n\t    def clear_state(self):\n\t        self.cache_iter = 0\n\t        self.cache_size = 0\n\t    def retrieve_for_query(self, q, cache_context, pos_emb_closure, start_index):\n\t        if self.cache_size == 0:\n\t            return None, {}\n\t        B, nh, T, hs = q.size() # batch size, num_heads, sequence length, per-head embedding dimensionality (n_embd)\n\t        cached_keys = self.cache_k[:B, :, :self.cache_size]\n", "        k_indices = torch.cat((\n\t            torch.arange(self.cache_size - self.cache_iter, self.cache_size, device=q.device),\n\t            torch.arange(self.cache_size - cached_keys.shape[2], self.cache_size - self.cache_iter, device=q.device),\n\t        ))\n\t        assert self.cache_size == start_index\n\t        last_incomplete_k = pos_emb_closure.adapt_keys(cached_keys, indices=k_indices)\n\t        att_incomplete = (q @ last_incomplete_k.transpose(-2, -1)) * (1.0 / math.sqrt(last_incomplete_k.size(-1)))\n\t        last_incomplete_v = self.cache_v[:B, :, :self.cache_size].unsqueeze(2).expand(B, nh, T, -1, hs)\n\t        return att_incomplete, {'v': last_incomplete_v.clone()}\n\t    def store_in_cache(self, keys, values_dict):\n", "        if self.max_cache_size == 0:\n\t            return\n\t        B, nh, T, hs = keys.size()\n\t        k_for_cache = keys[:, :, -self.max_cache_size:]\n\t        v_for_cache = values_dict['v'][:, :, -self.max_cache_size:]\n\t        self.cache_iter = (self.cache_iter + T - k_for_cache.shape[2]) % self.cache_k.shape[2]\n\t        self.cache_size += T - k_for_cache.shape[2]\n\t        T = k_for_cache.shape[2]\n\t        if self.cache_iter + T >= self.max_cache_size:\n\t            next_iter = (self.cache_iter + T) - self.max_cache_size\n", "            rem = (self.max_cache_size - self.cache_iter)\n\t            self.cache_k[:B, :, :next_iter].copy_(k_for_cache[:, :, rem:])\n\t            self.cache_k[:B, :, self.cache_iter:].copy_(k_for_cache[:,:, :rem])\n\t            self.cache_v[:B, :, :next_iter].copy_(v_for_cache[:,:, rem:])\n\t            self.cache_v[:B, :, self.cache_iter:].copy_(v_for_cache[:,:, :rem])\n\t        else:\n\t            next_iter = self.cache_iter + T\n\t            self.cache_k[:B, :, self.cache_iter:next_iter].copy_(k_for_cache)\n\t            self.cache_v[:B, :, self.cache_iter:next_iter].copy_(v_for_cache)\n\t        self.cache_iter = next_iter\n", "        self.cache_size += T\n\tclass KVLMCache(LMCache):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.total_len = 0\n\t    def get_cache_storage(self):\n\t        return KVLMCacheStorage\n\t    def forward(self, x):\n\t        B, T = x.size()\n\t        prev_total_len = self.total_len\n", "        self.total_len = self.total_len + x.shape[1]\n\t        return x, prev_total_len, self.context_class()\n\t    def clear_state(self):\n\t        super().clear_state()\n\t        self.total_len = 0\n"]}
{"filename": "llama_legacy/train.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport copy\n\timport logging\n\tfrom dataclasses import dataclass, field\n\tfrom functools import partial\n\tfrom typing import Dict, Optional, Sequence\n\timport torch\n\timport transformers\n", "from torch.utils.data import Dataset\n\tfrom transformers import Trainer, DataCollatorForLanguageModeling, get_cosine_schedule_with_warmup\n\tfrom llama_mem import LlamaForCausalLM\n\tfrom torch.distributed import barrier\n\timport os\n\tfrom datasets import load_dataset\n\tIGNORE_INDEX = -100\n\tDEFAULT_PAD_TOKEN = \"[PAD]\"\n\tDEFAULT_EOS_TOKEN = \"</s>\"\n\tDEFAULT_BOS_TOKEN = \"<s>\"\n", "DEFAULT_UNK_TOKEN = \"<unk>\"\n\t@dataclass\n\tclass ModelArguments:\n\t    model_name_or_path: Optional[str] = field(default=\"facebook/opt-125m\")\n\t@dataclass\n\tclass TrainingArguments(transformers.TrainingArguments):\n\t    cache_dir: Optional[str] = field(default=None)\n\t    optim: str = field(default=\"adamw_torch\")\n\t    model_max_length: int = field(\n\t        default=512,\n", "        metadata={\"help\": \"Maximum sequence length. Sequences will be right padded (and possibly truncated).\"},\n\t    )\n\tclass TrainerCosine(Trainer):\n\t    def create_scheduler(self, num_training_steps: int, optimizer: torch.optim.Optimizer = None):\n\t        \"\"\"\n\t        Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or\n\t        passed as an argument.\n\t        Args:\n\t            num_training_steps (int): The number of training steps to do.\n\t        \"\"\"\n", "        if self.args.lr_scheduler_type != \"cosine\":\n\t            return super().create_scheduler(num_training_steps, optimizer)\n\t        if self.lr_scheduler is None:\n\t            self.lr_scheduler = get_cosine_schedule_with_warmup(\n\t                optimizer=self.optimizer if optimizer is None else optimizer,\n\t                num_warmup_steps=self.args.get_warmup_steps(num_training_steps),\n\t                num_training_steps=num_training_steps,\n\t                num_cycles=0.4 # ~10% of the init lr\n\t            )\n\t        return self.lr_scheduler\n", "def smart_tokenizer_and_embedding_resize(\n\t    special_tokens_dict: Dict,\n\t    tokenizer: transformers.PreTrainedTokenizer,\n\t    model: transformers.PreTrainedModel,\n\t):\n\t    \"\"\"Resize tokenizer and embedding.\n\t    Note: This is the unoptimized version that may make your embedding size not be divisible by 64.\n\t    \"\"\"\n\t    num_new_tokens = tokenizer.add_special_tokens(special_tokens_dict)\n\t    model.resize_token_embeddings(len(tokenizer))\n", "    if num_new_tokens > 0:\n\t        input_embeddings = model.get_input_embeddings().weight.data\n\t        output_embeddings = model.get_output_embeddings().weight.data\n\t        input_embeddings_avg = input_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)\n\t        output_embeddings_avg = output_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)\n\t        input_embeddings[-num_new_tokens:] = input_embeddings_avg\n\t        output_embeddings[-num_new_tokens:] = output_embeddings_avg\n\tdef tokenize_fn(tokenizer, example):\n\t    context_length = tokenizer.model_max_length\n\t    outputs = tokenizer(\n", "        tokenizer.eos_token.join(example[\"text\"]),\n\t        truncation=False,\n\t        return_tensors=\"pt\",\n\t        pad_to_multiple_of=context_length,\n\t        padding=True,\n\t    )\n\t    return {\"input_ids\": outputs[\"input_ids\"].view(-1, context_length)}\n\tdef add_mem_tokens(example, mem_freq, mem_id):\n\t    x = example[\"input_ids\"]\n\t    ret = []\n", "    prev_idx = 0\n\t    for t_idx in range(mem_freq, len(x), mem_freq):\n\t        ret.extend(x[prev_idx:t_idx])\n\t        ret.append(mem_id)\n\t        prev_idx = t_idx\n\t    ret.extend(x[prev_idx:])\n\t    # drop attention_mask\n\t    return {\"input_ids\": ret}\n\tdef train():\n\t    parser = transformers.HfArgumentParser((ModelArguments, TrainingArguments))\n", "    model_args, training_args = parser.parse_args_into_dataclasses()\n\t    model = LlamaForCausalLM.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        cache_dir=training_args.cache_dir,\n\t    )\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        cache_dir=training_args.cache_dir,\n\t        model_max_length=training_args.model_max_length,\n\t        padding_side=\"right\",\n", "        use_fast=False,\n\t    )\n\t    special_tokens_dict = dict()\n\t    if tokenizer.pad_token is None:\n\t        special_tokens_dict[\"pad_token\"] = DEFAULT_PAD_TOKEN\n\t    if tokenizer.eos_token is None:\n\t        special_tokens_dict[\"eos_token\"] = DEFAULT_EOS_TOKEN\n\t    if tokenizer.bos_token is None:\n\t        special_tokens_dict[\"bos_token\"] = DEFAULT_BOS_TOKEN\n\t    if tokenizer.unk_token is None:\n", "        special_tokens_dict[\"unk_token\"] = DEFAULT_UNK_TOKEN\n\t    mem_token = \"<landmark>\"\n\t    special_tokens_dict[\"additional_special_tokens\"] = [mem_token]\n\t    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=special_tokens_dict,\n\t        tokenizer=tokenizer,\n\t        model=model,\n\t    )\n\t    mem_id = tokenizer.convert_tokens_to_ids(mem_token)\n\t    model.set_mem_id(mem_id)\n", "    rank = int(os.environ.get('RANK', -1))\n\t    if rank > 0:\n\t        barrier()\n\t    dataset = load_dataset(\"togethercomputer/RedPajama-Data-1T-Sample\", cache_dir=training_args.cache_dir)\n\t    dataset = dataset.map(partial(tokenize_fn,tokenizer),batched=True, num_proc=32, remove_columns=[\"text\", \"meta\"])\n\t    dataset = dataset.map(\n\t        partial(\n\t            add_mem_tokens, \n\t            mem_freq=50, \n\t            mem_id=mem_id\n", "        ), batched=False, num_proc=32)\n\t    if rank == 0:\n\t        barrier()\n\t    print(dataset)\n\t    data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)\n\t    trainer = TrainerCosine(\n\t        model=model, tokenizer=tokenizer, args=training_args, \n\t        train_dataset=dataset[\"train\"],\n\t        eval_dataset=None,\n\t        data_collator=data_collator)\n", "    trainer.train()\n\t    trainer.save_state()\n\t    trainer.save_model(output_dir=training_args.output_dir)\n\tif __name__ == \"__main__\":\n\t    train()\n"]}
{"filename": "llama_legacy/redpajama.py", "chunked_list": ["# Copyright 2023 Together Computer\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t# Lint as: python3\n\t\"\"\"RedPajama: An Open-Source, Clean-Room 1.2 Trillion Token Dataset.\"\"\"\n\timport json\n\timport datasets\n\timport traceback\n\timport numpy as np\n\timport math\n", "logger = datasets.logging.get_logger(__name__)\n\t_DESCRIPTION = \"\"\"\\\n\tRedPajama is a clean-room, fully open-source implementation of the LLaMa dataset.\n\t\"\"\"\n\t_URL_LISTS = {\n\t    \"arxiv\": \"urls/arxiv.txt\",\n\t    \"book\": \"urls/book.txt\",\n\t    \"c4\": \"urls/c4.txt\",\n\t    \"common_crawl\": \"urls/common_crawl.txt\",\n\t    \"github\": \"urls/github.txt\",\n", "    \"stackexchange\": \"urls/stackexchange.txt\",\n\t    \"wikipedia\": \"urls/wikipedia.txt\",\n\t}\n\tclass RedPajama1TConfig(datasets.BuilderConfig):\n\t    \"\"\"BuilderConfig for RedPajama sample.\"\"\"\n\t    def __init__(self, *args, subsets, p_sample=None, **kwargs):\n\t        \"\"\"BuilderConfig for RedPajama.\n\t        Args:\n\t          **kwargs: keyword arguments forwarded to super.\n\t        \"\"\"\n", "        super(RedPajama1TConfig, self).__init__(**kwargs)\n\t        self.subsets = subsets\n\t        self.p_sample = p_sample\n\tclass RedPajama1T(datasets.GeneratorBasedBuilder):\n\t    \"\"\"RedPajama: Reproducing the LLaMA training dataset of over 1.2 trillion tokens. Version 1.0.0.\"\"\"\n\t    BUILDER_CONFIG_CLASS = RedPajama1TConfig\n\t    BUILDER_CONFIGS = [\n\t        RedPajama1TConfig(\n\t            subsets = list(_URL_LISTS.keys()),\n\t            name=\"plain_text\",\n", "            version=datasets.Version(\"1.0.0\", \"\"),\n\t            description=\"Plain text\",\n\t        ),\n\t        RedPajama1TConfig(\n\t            subsets = list(_URL_LISTS.keys()),\n\t            name=\"plain_text_tenpercent\",\n\t            version=datasets.Version(\"1.0.0\", \"\"),\n\t            description=\"Plain text\",\n\t            p_sample=0.1\n\t        ),\n", "    ]\n\t    def _info(self):\n\t        return datasets.DatasetInfo(\n\t            description=_DESCRIPTION,\n\t            features=datasets.Features(\n\t                {\n\t                    \"text\": datasets.Value(\"string\"),\n\t                    \"meta\": datasets.Value(\"string\"),\n\t                    \"red_pajama_subset\": datasets.Value(\"string\"),\n\t                }\n", "            ),\n\t            supervised_keys=None,\n\t        )\n\t    def _split_generators(self, dl_manager):\n\t        url_lists = dl_manager.download_and_extract({\n\t            subset: _URL_LISTS[subset] for subset in self.config.subsets\n\t        })\n\t        urls = {}\n\t        rng = np.random.default_rng(seed=2)\n\t        for subset, url_list in url_lists.items():\n", "            with open(url_list, encoding=\"utf-8\") as f:\n\t                urls[subset] = [line.strip() for line in f]\n\t            if self.config.p_sample is not None:\n\t                urls[subset] = rng.choice(\n\t                    urls[subset], \n\t                    size=int(math.ceil(len(urls[subset]) * self.config.p_sample)), replace=False).tolist()\n\t        downloaded_files = dl_manager.download(urls)\n\t        return [\n\t            datasets.SplitGenerator(\n\t                name=datasets.Split.TRAIN,\n", "                gen_kwargs = {\n\t                    \"files\": {\n\t                        subset: downloaded_files[subset]\n\t                        for subset in self.config.subsets\n\t                    }\n\t                }\n\t            )\n\t        ]\n\t    def _generate_examples(self, files):\n\t        \"\"\"This function returns the examples in the raw (text) form.\"\"\"\n", "        key = 0\n\t        for subset in files:\n\t            if subset == \"common_crawl\":\n\t                import zstandard as zstd\n\t                for path in files[subset]:\n\t                    with zstd.open(open(path, \"rb\"), \"rt\", encoding=\"utf-8\") as f:\n\t                        for i, row in enumerate(f):\n\t                            try:\n\t                                data = json.loads(row)\n\t                                text = data[\"text\"]\n", "                                del data[\"text\"]\n\t                                yield key, {\n\t                                    \"text\": text,\n\t                                    \"meta\": json.dumps(data),\n\t                                    \"red_pajama_subset\": subset,\n\t                                }\n\t                                key += 1\n\t                            except Exception as e:\n\t                                print(f'Subset: {subset}')\n\t                                print(f'Path: {path}')\n", "                                print(f'Row: {row}')\n\t                                traceback.print_exc()\n\t                                raise e\n\t            else:\n\t                for path in files[subset]:\n\t                    with open(path, encoding=\"utf-8\") as f:\n\t                        for i, row in enumerate(f):\n\t                            try:\n\t                                data = json.loads(row)\n\t                                if \"meta\" not in data:\n", "                                    text = data[\"text\"]\n\t                                    del data[\"text\"]\n\t                                    yield key, {\n\t                                        \"text\": text,\n\t                                        \"meta\": json.dumps(data),\n\t                                        \"red_pajama_subset\": subset,\n\t                                    }\n\t                                else:\n\t                                    yield key, {\n\t                                        \"text\": data[\"text\"],\n", "                                        \"meta\": data[\"meta\"],\n\t                                        \"red_pajama_subset\": subset,\n\t                                    }\n\t                                key += 1\n\t                            except Exception as e:\n\t                                print(f'Subset: {subset}')\n\t                                print(f'Path: {path}')\n\t                                print(f'Row: {row}')\n\t                                traceback.print_exc()\n\t                                raise e\n"]}
{"filename": "llama_legacy/run_test.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tllama_weights_7b_base = \"/llama_weights/7B_hf/\"\n\tllama_weights_7b_tuned = \"/llama-redpajama-mem-15000-with-mem/\"\n\tcache_path = \"/hf-cache/\"\n\tdef make_llama_base_pipe():\n\t    from transformers import pipeline\n\t    from transformers.models.llama import LlamaForCausalLM\n\t    llama_base = LlamaForCausalLM.from_pretrained(\n", "        llama_weights_7b_base,\n\t        cache_dir=cache_path,\n\t    )\n\t    llama_base = llama_base.to('cuda:0')\n\t    import transformers\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        llama_weights_7b_base,\n\t        cache_dir=cache_path,\n\t        model_max_length=1024,\n\t        padding_side=\"right\",\n", "        use_fast=False,\n\t    )\n\t    llama_base_pipe = pipeline(\"text-generation\", model=llama_base, tokenizer=tokenizer, device=llama_base.device)\n\t    return llama_base_pipe\n\tllama_base_pipe = make_llama_base_pipe()\n\tdef make_llama_mem_pipe():\n\t    from llama_mem import LlamaForCausalLM\n\t    model = LlamaForCausalLM.from_pretrained(\n\t        llama_weights_7b_tuned,\n\t        cache_dir=cache_path,\n", "    )\n\t    model.to('cuda:1')\n\t    import transformers\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n\t            llama_weights_7b_tuned,\n\t            cache_dir=cache_path,\n\t            model_max_length=512,\n\t            padding_side=\"right\",\n\t            use_fast=False,\n\t        )\n", "    from transformers import pipeline\n\t    llama_mem_pipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer, device=model.device)\n\t    return llama_mem_pipe\n\tllama_mem_pipe = make_llama_mem_pipe()\n\tmem_id = llama_mem_pipe.tokenizer.convert_tokens_to_ids(\"<landmark>\")\n\tllama_mem_pipe.model.set_mem_id(mem_id)\n\tllama_mem_pipe.model.set_mem_cache_args(max_seq_len=255, mem_freq=50, top_k=5, max_cache_size=None)\n\tpipes = {\"base\": llama_base_pipe, \"mem\": llama_mem_pipe}\n\timport torch\n\timport os\n", "import random\n\timport re\n\timport requests\n\tdef generate_prompt(n_garbage):\n\t    \"\"\"Generates a text file and inserts an execute line at a random position.\"\"\"\n\t    n_garbage_prefix = random.randint(0, n_garbage)\n\t    n_garbage_suffix = n_garbage - n_garbage_prefix\n\t    task_description = \"There is an important info hidden inside a lot of irrelevant text. Find it and memorize them. I will quiz you about the important information there.\"\n\t    garbage = \"The grass is green. The sky is blue. The sun is yellow. Here we go. There and back again.\"\n\t    garbage_inf = \" \".join([garbage] * 2000)\n", "    assert len(garbage_inf) >= n_garbage\n\t    garbage_prefix = garbage_inf[:n_garbage_prefix]\n\t    garbage_suffix = garbage_inf[:n_garbage_suffix]\n\t    pass_key = random.randint(1, 50000)\n\t    information_line = f\"The pass key is {pass_key}. Remember it. {pass_key} is the pass key.\"\n\t    final_question = \"What is the pass key? The pass key is\"\n\t    lines = [\n\t        task_description,\n\t        garbage_prefix,\n\t        information_line,\n", "        garbage_suffix,\n\t        final_question\n\t    ]\n\t    return \"\\n\".join(lines), pass_key\n\tdef test_model(prompt_text, pass_key, model_name):\n\t    response = pipes[model_name](prompt_text,num_return_sequences=1, max_new_tokens=10)[0][\"generated_text\"][len(prompt_text):]\n\t    assert f\"The pass key is {pass_key}\" in prompt_text\n\t    try:\n\t        pass_key = int(re.search(r'\\d+', response).group())\n\t    except:\n", "        pass_key = response[:20]\n\t    return pass_key\n\tn_values = [0, 100, 500, 1000, 5000, 8000, 10000, 12000, 14000, 18000, 20000, 25000, 38000]\n\tnum_tests = 50\n\tmodels = [\"base\", \"mem\"]\n\taccuracies = {x: [] for x in models}\n\tindividual_results = {x: [] for x in models}\n\tfor n in n_values:\n\t    correct_count = {x: 0 for x in models}\n\t    n_results = {x: [] for x in models}\n", "    for i in range(num_tests):\n\t        print(f\"\\nRunning test {i + 1}/{num_tests} for n = {n}...\")\n\t        prompt_text, pass_key = generate_prompt(n)\n\t        for model_name in models:\n\t            num_tokens = len(pipes[model_name].tokenizer.encode(prompt_text))\n\t            print(\"Number of tokens in this prompt: \", num_tokens)\n\t            model_output = test_model(prompt_text, pass_key, model_name)\n\t            print(f\"Expected number in the prompt: {pass_key}, {model_name} output: {model_output}\")\n\t            if pass_key == model_output:\n\t                correct_count[model_name] += 1\n", "                n_results[model_name].append(1)\n\t                print(\"Success!\")\n\t            else:\n\t                n_results[model_name].append(0)\n\t                print(\"Fail.\")\n\t    for model in models:\n\t        accuracy = (correct_count[model] / num_tests) * 100\n\t        print(f\"Accuracy {model} for n = {n}: {accuracy}%\")\n\t        accuracies[model].append(accuracy)\n\t        individual_results[model].append(n_results)\n"]}
{"filename": "llama_legacy/weight_diff.py", "chunked_list": ["#    Copyright 2023 Rohan Taori, Ishaan Gulrajani, Tianyi Zhang, Yann Dubois, Xuechen Li\n\t#\n\t#    Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#    you may not use this file except in compliance with the License.\n\t#    You may obtain a copy of the License at\n\t#\n\t#        http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#    Unless required by applicable law or agreed to in writing, software\n\t#    distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#    See the License for the specific language governing permissions and\n\t#    limitations under the License.\n\t# This file has been changed by Amirkeivan Mohtashami\n\t# to take into account the new token in the embedding layer\n\tfrom typing import Optional\n\timport fire\n\timport torch\n\timport tqdm\n\timport transformers\n", "from train import smart_tokenizer_and_embedding_resize\n\t@torch.inference_mode()\n\tdef make_diff(\n\t    path_raw: str, path_tuned: str, path_diff: str, device=\"cpu\",  # \"cuda\" or \"cpu\"\n\t):\n\t    \"\"\"Make the weight diff.\n\t    This function is given to present full transparency of how the weight diff was created.\n\t    Run:\n\t        python weight_diff.py make_diff --path_raw <your_path_raw> --path_tuned <your_path_tuned> --path_diff <your_path_diff>\n\t    \"\"\"\n", "    model_tuned: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_tuned,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    model_raw: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_raw,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n", "        low_cpu_mem_usage=True,\n\t    )\n\t    tokenizer_tuned: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_tuned\n\t    )\n\t    tokenizer_raw: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_raw\n\t    )\n\t    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=dict(pad_token=\"[PAD]\", additional_special_tokens=[\"<landmark>\"]),\n", "        model=model_raw,\n\t        tokenizer=tokenizer_raw,\n\t    )\n\t    state_dict_tuned = model_tuned.state_dict()\n\t    state_dict_raw = model_raw.state_dict()\n\t    for key in tqdm.tqdm(state_dict_tuned):\n\t        state_dict_tuned[key].add_(-state_dict_raw[key])\n\t    model_tuned.save_pretrained(path_diff)\n\t    tokenizer_tuned.save_pretrained(path_diff)\n\t@torch.inference_mode()\n", "def recover(\n\t    path_raw,\n\t    path_diff,\n\t    path_tuned: Optional[str] = None,\n\t    device=\"cpu\",\n\t    test_inference=True,\n\t    check_integrity_naively=True,\n\t):\n\t    \"\"\"Recover the original weights from the released weight diff.\n\t    This function is given for you to run.\n", "    Things to do before running this:\n\t        1. Convert Meta's released weights into huggingface format. Follow this guide:\n\t            https://huggingface.co/docs/transformers/main/model_doc/llama\n\t        2. Make sure you cloned the released weight diff into your local machine. The weight diff is located at:\n\t            https://huggingface.co/tatsu-lab/alpaca-7b/tree/main\n\t        3. Run this function with the correct paths. E.g.,\n\t            python weight_diff.py recover --path_raw <path_to_step_1_dir> --path_diff <path_to_step_2_dir>\n\t    Additional notes:\n\t        - If things run too slowly, and you have an 80G GPU lying around, let GPU go brrr by setting `--device \"cuda\"`.\n\t        - If you want to save the recovered weights, set `--path_tuned <your_path_tuned>`.\n", "            Next time you can load the recovered weights directly from `<your_path_tuned>`.\n\t    \"\"\"\n\t    model_raw: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_raw,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    model_recovered: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_diff,\n", "        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    tokenizer_raw: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_raw\n\t    )\n\t    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=dict(pad_token=\"[PAD]\", additional_special_tokens=[\"<landmark>\"]),\n\t        model=model_raw,\n", "        tokenizer=tokenizer_raw,\n\t    )\n\t    tokenizer_recovered: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_diff\n\t    )\n\t    state_dict_recovered = model_recovered.state_dict()\n\t    state_dict_raw = model_raw.state_dict()\n\t    for key in tqdm.tqdm(state_dict_recovered):\n\t        state_dict_recovered[key].add_(state_dict_raw[key])\n\t    if check_integrity_naively:\n", "        # This is not a rigorous, cryptographically strong integrity check :)\n\t        allsum = sum(state_dict_recovered[key].sum() for key in state_dict_recovered)\n\t        assert torch.allclose(\n\t            allsum, torch.full_like(allsum, fill_value=49798.7656), atol=1e-2, rtol=0\n\t        ), \"Naive integrity check failed. This could imply that some of the checkpoint files are corrupted.\"\n\t    if path_tuned is not None:\n\t        model_recovered.save_pretrained(path_tuned)\n\t        tokenizer_recovered.save_pretrained(path_tuned)\n\t    return model_recovered, tokenizer_recovered\n\tdef main(task, **kwargs):\n", "    globals()[task](**kwargs)\n\tif __name__ == \"__main__\":\n\t    fire.Fire(main)\n"]}
{"filename": "llama_legacy/llama_mem.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 EleutherAI and the HuggingFace Inc. team. All rights reserved.\n\t#\n\t# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX\n\t# and OPT implementations in this library. It has been modified from its\n\t# original forms to accommodate minor architectural differences compared\n\t# to GPT-NeoX and OPT used by the Meta AI team that trained the model.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n", "# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\" PyTorch LLaMA model.\"\"\"\n", "import math\n\tfrom typing import List, Optional, Tuple, Union\n\timport torch\n\timport torch.utils.checkpoint\n\tfrom torch import nn\n\tfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\tfrom transformers.activations import ACT2FN\n\tfrom transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast, SequenceClassifierOutputWithPast\n\tfrom transformers.modeling_utils import PreTrainedModel\n\tfrom transformers.utils import add_start_docstrings, add_start_docstrings_to_model_forward, logging, replace_return_docstrings\n", "from transformers.models.llama.configuration_llama import LlamaConfig\n\tlogger = logging.get_logger(__name__)\n\t_CONFIG_FOR_DOC = \"LlamaConfig\"\n\t# Copied from transformers.models.bart.modeling_bart._make_causal_mask\n\tdef _make_causal_mask(\n\t    input_ids_shape: torch.Size, dtype: torch.dtype, device: torch.device, past_key_values_length: int = 0\n\t):\n\t    \"\"\"\n\t    Make causal mask used for bi-directional self-attention.\n\t    \"\"\"\n", "    bsz, tgt_len = input_ids_shape\n\t    mask = torch.full((tgt_len, tgt_len), torch.tensor(torch.finfo(dtype).min, device=device), device=device)\n\t    mask_cond = torch.arange(mask.size(-1), device=device)\n\t    mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)\n\t    mask = mask.to(dtype)\n\t    if past_key_values_length > 0:\n\t        mask = torch.cat([torch.zeros(tgt_len, past_key_values_length, dtype=dtype, device=device), mask], dim=-1)\n\t    return mask[None, None, :, :].expand(bsz, 1, tgt_len, tgt_len + past_key_values_length)\n\t# Copied from transformers.models.bart.modeling_bart._expand_mask\n\tdef _expand_mask(mask: torch.Tensor, dtype: torch.dtype, tgt_len: Optional[int] = None):\n", "    \"\"\"\n\t    Expands attention_mask from `[bsz, seq_len]` to `[bsz, 1, tgt_seq_len, src_seq_len]`.\n\t    \"\"\"\n\t    bsz, src_len = mask.size()\n\t    tgt_len = tgt_len if tgt_len is not None else src_len\n\t    expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)\n\t    inverted_mask = 1.0 - expanded_mask\n\t    return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)\n\tclass LlamaRMSNorm(nn.Module):\n\t    def __init__(self, hidden_size, eps=1e-6):\n", "        \"\"\"\n\t        LlamaRMSNorm is equivalent to T5LayerNorm\n\t        \"\"\"\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(hidden_size))\n\t        self.variance_epsilon = eps\n\t    def forward(self, hidden_states):\n\t        variance = hidden_states.to(torch.float32).pow(2).mean(-1, keepdim=True)\n\t        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)\n\t        # convert into half-precision if necessary\n", "        if self.weight.dtype in [torch.float16, torch.bfloat16]:\n\t            hidden_states = hidden_states.to(self.weight.dtype)\n\t        return self.weight * hidden_states\n\tclass LlamaRotaryEmbedding(torch.nn.Module):\n\t    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None):\n\t        super().__init__()\n\t        inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2).float().to(device) / dim))\n\t        self.register_buffer(\"inv_freq\", inv_freq)\n\t        # Build here to make `torch.jit.trace` work.\n\t        self.max_seq_len_cached = max_position_embeddings\n", "        t = torch.arange(self.max_seq_len_cached, device=self.inv_freq.device, dtype=self.inv_freq.dtype)\n\t        freqs = torch.einsum(\"i,j->ij\", t, self.inv_freq)\n\t        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n\t        emb = torch.cat((freqs, freqs), dim=-1)\n\t        self.register_buffer(\"cos_cached\", emb.cos()[None, None, :, :], persistent=False)\n\t        self.register_buffer(\"sin_cached\", emb.sin()[None, None, :, :], persistent=False)\n\t    def forward(self, x, seq_len=None):\n\t        # x: [bs, num_attention_heads, seq_len, head_size]\n\t        # This `if` block is unlikely to be run after we build sin/cos in `__init__`. Keep the logic here just in case.\n\t        if seq_len > self.max_seq_len_cached:\n", "            self.max_seq_len_cached = seq_len\n\t            t = torch.arange(self.max_seq_len_cached, device=x.device, dtype=self.inv_freq.dtype)\n\t            freqs = torch.einsum(\"i,j->ij\", t, self.inv_freq)\n\t            # Different from paper, but it uses a different permutation in order to obtain the same calculation\n\t            emb = torch.cat((freqs, freqs), dim=-1).to(x.device)\n\t            self.register_buffer(\"cos_cached\", emb.cos()[None, None, :, :], persistent=False)\n\t            self.register_buffer(\"sin_cached\", emb.sin()[None, None, :, :], persistent=False)\n\t        return (\n\t            self.cos_cached[:, :, :seq_len, ...].to(dtype=x.dtype),\n\t            self.sin_cached[:, :, :seq_len, ...].to(dtype=x.dtype),\n", "        )\n\tdef rotate_half(x):\n\t    \"\"\"Rotates half the hidden dims of the input.\"\"\"\n\t    x1 = x[..., : x.shape[-1] // 2]\n\t    x2 = x[..., x.shape[-1] // 2 :]\n\t    return torch.cat((-x2, x1), dim=-1)\n\tdef apply_rotary_pos_emb(q, k, cos, sin, position_ids):\n\t    # The first two dimensions of cos and sin are always 1, so we can `squeeze` them.\n\t    cos = cos.squeeze(1).squeeze(0)  # [seq_len, dim]\n\t    sin = sin.squeeze(1).squeeze(0)  # [seq_len, dim]\n", "    cos = cos[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]\n\t    sin = sin[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]\n\t    if q is None:\n\t        q_embed = None\n\t    else:\n\t        q_embed = (q * cos) + (rotate_half(q) * sin)\n\t    k_embed = (k * cos) + (rotate_half(k) * sin)\n\t    return q_embed, k_embed\n\tclass LlamaMLP(nn.Module):\n\t    def __init__(\n", "        self,\n\t        hidden_size: int,\n\t        intermediate_size: int,\n\t        hidden_act: str,\n\t    ):\n\t        super().__init__()\n\t        self.gate_proj = nn.Linear(hidden_size, intermediate_size, bias=False)\n\t        self.down_proj = nn.Linear(intermediate_size, hidden_size, bias=False)\n\t        self.up_proj = nn.Linear(hidden_size, intermediate_size, bias=False)\n\t        self.act_fn = ACT2FN[hidden_act]\n", "    def forward(self, x):\n\t        return self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))\n\tclass LandmarkGroupedSoftmaxFunction(torch.autograd.Function):\n\t    # Note that forward, setup_context, and backward are @staticmethods\n\t    @staticmethod\n\t    def forward(ctx, x, dim, mem_cnt, resp_mem_idx):\n\t        new_shape = list(x.shape)\n\t        new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t        max_by_group = x.new_zeros((*new_shape,))\n\t        max_by_group.scatter_reduce_(src=x, index=resp_mem_idx, dim=dim, reduce=\"amax\", include_self=False)\n", "        maxes = torch.gather(max_by_group, dim, resp_mem_idx)\n\t        #x_exp = torch.exp(x - torch.where(torch.isinf(maxes), 0, maxes))\n\t        x_exp = torch.exp((x - maxes).to(torch.float32))\n\t        cumsum_by_group = torch.zeros_like(max_by_group, dtype=x_exp.dtype)\n\t        cumsum_by_group.scatter_add_(dim, resp_mem_idx, x_exp, )\n\t        denom = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t        #probs = torch.where(denom < 0.5, 0, x_exp / denom)\n\t        probs = x_exp / denom\n\t        ctx.mem_cnt = mem_cnt\n\t        ctx.dim = dim\n", "        ctx.save_for_backward(resp_mem_idx, probs)\n\t        return probs\n\t    @staticmethod\n\t    def backward(ctx, grad_probs):\n\t        mem_cnt = ctx.mem_cnt\n\t        dim = ctx.dim\n\t        resp_mem_idx, probs = ctx.saved_tensors\n\t        grad_x = grad_dim = grad_mem_cnt = grad_resp_mem_idx = None\n\t        if ctx.needs_input_grad[0] or ctx.needs_input_grad[4]:\n\t            grad_pair = grad_probs * probs\n", "            new_shape = list(probs.shape)\n\t            new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t            cumsum_by_group = grad_pair.new_zeros((*new_shape,))\n\t            cumsum_by_group.scatter_add_(dim, resp_mem_idx, grad_pair)\n\t        if ctx.needs_input_grad[0]:\n\t            grad_sum = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t            grad_x = grad_pair - probs * grad_sum\n\t        assert not ctx.needs_input_grad[1]\n\t        assert not ctx.needs_input_grad[2]\n\t        assert not ctx.needs_input_grad[3]\n", "        return grad_x, grad_dim, grad_mem_cnt, grad_resp_mem_idx\n\tdef landmark_grouped_softmax(x, dim, is_mem, last_section_mask):\n\t    last_and_rest_mask = last_section_mask # | mask\n\t    full_access_mask =  is_mem | last_and_rest_mask\n\t    max_mem_cnt = 16\n\t    mem_group_idx = torch.cumsum(is_mem, dim=dim)\n\t    mem_bucket_id = max_mem_cnt - 1\n\t    resp_mem_idx = torch.where(last_and_rest_mask, \n\t                                max_mem_cnt - 1,\n\t                                torch.where(is_mem, mem_bucket_id, mem_group_idx))\n", "    probs = LandmarkGroupedSoftmaxFunction.apply(x, dim, max_mem_cnt, resp_mem_idx)\n\t    new_shape = list(x.shape)\n\t    new_shape[dim] = max_mem_cnt\n\t    group_prob = probs.new_zeros((*new_shape, ))\n\t    group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), probs)\n\t    probs = probs.mul(torch.where(full_access_mask, last_section_mask, torch.gather(group_prob, dim, resp_mem_idx)))\n\t    return probs\n\tclass LlamaAttention(nn.Module):\n\t    \"\"\"Multi-headed attention from 'Attention Is All You Need' paper\"\"\"\n\t    def __init__(self, config: LlamaConfig):\n", "        super().__init__()\n\t        self.config = config\n\t        self.hidden_size = config.hidden_size\n\t        self.num_heads = config.num_attention_heads\n\t        self.head_dim = self.hidden_size // self.num_heads\n\t        self.max_position_embeddings = config.max_position_embeddings\n\t        if (self.head_dim * self.num_heads) != self.hidden_size:\n\t            raise ValueError(\n\t                f\"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}\"\n\t                f\" and `num_heads`: {self.num_heads}).\"\n", "            )\n\t        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.k_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.v_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.o_proj = nn.Linear(self.num_heads * self.head_dim, self.hidden_size, bias=False)\n\t        self.rotary_emb = LlamaRotaryEmbedding(self.head_dim, max_position_embeddings=self.max_position_embeddings)\n\t        self.mem_freq = None\n\t        self.top_k = None\n\t        self.max_cache_size = None\n\t    def _shape(self, tensor: torch.Tensor, seq_len: int, bsz: int):\n", "        return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()\n\t    def set_mem_cache_args(self, mem_freq, top_k, max_cache_size):\n\t        self.mem_freq = mem_freq\n\t        self.top_k = top_k\n\t        self.max_cache_size = max_cache_size\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n", "        past_key_value: Optional[Tuple[torch.Tensor]] = None,\n\t        output_attentions: bool = False,\n\t        use_cache: bool = False,\n\t        is_mem: Optional[torch.Tensor] = None,\n\t        last_section_mask: Optional[torch.Tensor] = None,\n\t        offload_cache_to_cpu: bool = False,\n\t    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n\t        bsz, q_len, _ = hidden_states.size()\n\t        query_states = self.q_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        key_states = self.k_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n", "        value_states = self.v_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        kv_seq_len = key_states.shape[-2]\n\t        if past_key_value is not None:\n\t            kv_seq_len += past_key_value[0].shape[-2]\n\t            if len(past_key_value) > 2:\n\t                kv_seq_len += past_key_value[3].shape[2] * past_key_value[3].shape[3]\n\t        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)\n\t        key_states_before_pos = key_states\n\t        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)\n\t        # [bsz, nh, t, hd]\n", "        attn_prefix = None\n\t        if past_key_value is not None:\n\t            # reuse k, v, self_attention\n\t            if self.mem_freq is None:\n\t                cache_len = past_key_value[0].shape[2]\n\t                if self.max_cache_size is not None:\n\t                    cache_len = min(cache_len, self.max_cache_size)\n\t                if is_mem is not None:\n\t                    is_mem = torch.cat((is_mem.new_zeros((1, 1, q_len, cache_len)), is_mem), dim=-1)\n\t                    last_section_mask = torch.cat((last_section_mask.new_ones((1, 1, q_len, cache_len)), last_section_mask), dim=-1)\n", "                past_key_states = torch.cat([past_key_value[0], key_states], dim=2)\n\t                past_value_states = torch.cat([past_key_value[1], value_states], dim=2)\n\t                key_states = past_key_states[:, :, -(q_len + cache_len):]\n\t                value_states = past_value_states[:, :, -(q_len + cache_len):]\n\t                expected_att_size = (bsz, self.num_heads, q_len, cache_len + q_len)\n\t            else:\n\t                orig_value_states = value_states\n\t                incomplete_len = past_key_value[0].shape[2] % (self.mem_freq + 1)\n\t                full_len = past_key_value[0].shape[2] - incomplete_len\n\t                past_key_mem, past_key_incomplete = torch.split(past_key_value[0], (full_len, incomplete_len), dim=2)\n", "                past_value_mem, past_value_incomplete = torch.split(past_key_value[1], (full_len, incomplete_len), dim=2)\n\t                if offload_cache_to_cpu:\n\t                    past_key_value = (past_key_incomplete, past_value_incomplete, *past_key_value[2:])\n\t                if incomplete_len > 0:\n\t                    assert q_len + incomplete_len <= (self.mem_freq + 1)\n\t                is_mem = torch.cat((is_mem.new_zeros((1, 1, q_len, incomplete_len)), is_mem), dim=-1)\n\t                last_section_mask = torch.cat((last_section_mask.new_ones((1, 1, q_len, incomplete_len)), last_section_mask), dim=-1)\n\t                if len(past_key_value) > 2:\n\t                    full_len += past_key_value[3].shape[2] * past_key_value[3].shape[3]\n\t                past_key_incomplete_pos = torch.arange(full_len, full_len + incomplete_len, dtype=torch.long, device=position_ids.device).unsqueeze(0)\n", "                _, past_key_incomplete = apply_rotary_pos_emb(None, past_key_incomplete, cos, sin, past_key_incomplete_pos)\n\t                key_states = torch.cat((past_key_incomplete, key_states), dim=2)\n\t                value_states = torch.cat((past_value_incomplete, value_states), dim=2)\n\t                past_key_mem = past_key_mem.view(bsz, self.num_heads, -1, self.mem_freq + 1, self.head_dim)\n\t                past_value_mem = past_value_mem.view(bsz, self.num_heads, -1, self.mem_freq + 1, self.head_dim)\n\t                if len(past_key_value) > 2:\n\t                    mem_key_nopos = torch.cat((\n\t                        past_key_value[2], \n\t                        past_key_mem.select(dim=3, index=self.mem_freq)), dim=2)\n\t                    past_key_mem_offload = past_key_value[3]\n", "                    past_key_mem = torch.cat((\n\t                        past_key_mem_offload, \n\t                        past_key_mem.to(past_key_mem_offload.device)), dim=2)\n\t                    past_value_mem = torch.cat((past_key_value[4], past_value_mem.to(past_key_mem_offload.device)), dim=2)\n\t                else:\n\t                    mem_key_nopos = past_key_mem.select(dim=3, index=self.mem_freq)    \n\t                num_mems = past_key_mem.shape[2]\n\t                top_k = min(self.top_k, num_mems)\n\t                prefix_len = full_len - (top_k + 1) * (self.mem_freq + 1)\n\t                mem_indices = torch.cat(\n", "                    (position_ids.new_zeros((max(0, num_mems - top_k), )),\n\t                    torch.arange(1, top_k + 1, device=query_states.device, dtype=position_ids.dtype)), dim=0)\n\t                mem_pos = (mem_indices * (self.mem_freq + 1) + self.mem_freq).unsqueeze(0).expand(bsz, -1) + prefix_len\n\t                _, mem_key = apply_rotary_pos_emb(None, mem_key_nopos, cos, sin, mem_pos)\n\t                mem_attn_weights = torch.matmul(query_states, mem_key.transpose(2, 3)) / math.sqrt(self.head_dim)\n\t                if offload_cache_to_cpu:\n\t                    aggregate = \"max_over_tokens\"\n\t                else:\n\t                    aggregate = None\n\t                if aggregate == \"max_over_tokens\":\n", "                    token_retrievers = 1\n\t                    head_retrievers = self.num_heads\n\t                    mem_attn_weights = torch.nn.functional.softmax(mem_attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)\n\t                    mem_attn_weights = mem_attn_weights.amax(dim=2, keepdim=True)\n\t                elif aggregate is None:\n\t                    token_retrievers = q_len\n\t                    head_retrievers = self.num_heads\n\t                else:\n\t                    raise NotImplementedError()\n\t                mem_selected_idx = mem_attn_weights.topk(dim=-1,k=top_k)[1].sort(dim=-1)[0].view(bsz, head_retrievers, token_retrievers, top_k)\n", "                selected_indices = torch.arange(0, top_k * (self.mem_freq + 1), device=query_states.device, dtype=position_ids.dtype)\n\t                selected_indices = torch.where(mem_selected_idx >= num_mems - top_k, self.mem_freq + 1, 0).unsqueeze(-1) + selected_indices.view(1, 1, 1, top_k, self.mem_freq + 1)\n\t                selected_indices = selected_indices.view(bsz, head_retrievers, token_retrievers, -1).expand(bsz, self.num_heads, q_len, -1) + prefix_len\n\t                mem_selected_idx = mem_selected_idx.to(past_key_mem.device)\n\t                mem_selected_idx = mem_selected_idx.view(bsz, self.num_heads, token_retrievers, top_k, 1, 1).expand(bsz, self.num_heads, token_retrievers, top_k, self.mem_freq + 1, self.head_dim) \n\t                selected_keys = past_key_mem.unsqueeze(2).expand(bsz, self.num_heads, token_retrievers, -1, self.mem_freq + 1, self.head_dim)\n\t                selected_keys = selected_keys.take_along_dim(mem_selected_idx, dim=3).to(query_states.device)\n\t                selected_values = past_value_mem.unsqueeze(2).expand(bsz, self.num_heads, token_retrievers, -1, self.mem_freq + 1, self.head_dim).take_along_dim(mem_selected_idx, dim=3).to(query_states.device)\n\t                selected_keys = selected_keys.view(bsz, self.num_heads, token_retrievers, -1, self.head_dim).expand(bsz, self.num_heads, q_len, -1, self.head_dim)\n\t                selected_keys = apply_rotary_pos_emb(None, selected_keys.unsqueeze(1), cos, sin, selected_indices)[1].squeeze(1)    \n", "                selected_values = selected_values.view(bsz, self.num_heads, token_retrievers, -1, self.head_dim).expand(bsz, self.num_heads, q_len, -1, self.head_dim)\n\t                attn_prefix = torch.matmul(query_states.unsqueeze(3), selected_keys.transpose(3, 4)).squeeze(3) / math.sqrt(self.head_dim)\n\t                is_mem_prefix = torch.cat((is_mem.new_zeros((self.mem_freq, )), is_mem.new_ones((1, )))).unsqueeze(0).repeat((top_k, 1))\n\t                is_mem_prefix = is_mem_prefix.view(1, 1, 1, -1).expand(1, 1, q_len, -1)\n\t                is_mem = torch.cat((is_mem_prefix, is_mem), dim=-1)\n\t                last_section_mask = torch.cat((last_section_mask.new_zeros((1, 1, q_len, top_k * (self.mem_freq + 1))), last_section_mask), dim=-1)\n\t                expected_att_size = (bsz, self.num_heads, q_len, q_len + incomplete_len)\n\t                past_key_states = torch.cat([past_key_value[0], key_states_before_pos], dim=2)\n\t                past_value_states = torch.cat([past_key_value[1], orig_value_states], dim=2)\n\t                if offload_cache_to_cpu:\n", "                    past_key_value = (past_key_states, past_value_states, mem_key_nopos, past_key_mem.to(\"cpu\"), past_value_mem.to(\"cpu\"), *past_key_value[5:]) if use_cache else None\n\t                else:\n\t                    past_key_value = (past_key_states, past_value_states) if use_cache else None\n\t        else:\n\t            if self.mem_freq is None:\n\t                past_key_states = key_states\n\t            else:\n\t                past_key_states = key_states_before_pos\n\t            past_value_states = value_states\n\t            expected_att_size = (bsz, self.num_heads, q_len, kv_seq_len)\n", "            past_key_value = (past_key_states, past_value_states) if use_cache else None\n\t        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)\n\t        if attn_weights.size() != expected_att_size:\n\t            raise ValueError(\n\t                f\"Attention weights should be of size {(bsz, self.num_heads, q_len, kv_seq_len)}, but is\"\n\t                f\" {attn_weights.size()}\"\n\t            )\n\t        if attention_mask is not None:\n\t            if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):\n\t                raise ValueError(\n", "                    f\"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}\"\n\t                )\n\t            attn_weights = attn_weights + attention_mask[...,-attn_weights.shape[-1]:]\n\t            attn_weights = torch.max(attn_weights, torch.tensor(torch.finfo(attn_weights.dtype).min))\n\t        if attn_prefix is not None:\n\t            attn_weights = torch.cat((attn_prefix, attn_weights), dim=-1)\n\t        # upcast attention to fp32\n\t        if is_mem is None:\n\t            raise ValueError(\"Don't use this without landmarks\")\n\t            attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)\n", "        else:\n\t            attn_weights = landmark_grouped_softmax(attn_weights, dim=-1, is_mem=is_mem.expand(-1, self.num_heads, -1, -1), last_section_mask=last_section_mask).to(query_states.dtype)\n\t        if attn_prefix is not None:\n\t            attn_prefix, attn_weights = torch.split(attn_weights, (attn_prefix.shape[-1], attn_weights.shape[-1] - attn_prefix.shape[-1]), dim=-1)\n\t        attn_output = torch.matmul(attn_weights, value_states)\n\t        if attn_prefix is not None:\n\t            attn_output += torch.matmul(attn_prefix.unsqueeze(3), selected_values).squeeze(3)\n\t        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):\n\t            raise ValueError(\n\t                f\"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is\"\n", "                f\" {attn_output.size()}\"\n\t            )\n\t        attn_output = attn_output.transpose(1, 2)\n\t        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)\n\t        attn_output = self.o_proj(attn_output)\n\t        if not output_attentions:\n\t            attn_weights = None\n\t        return attn_output, attn_weights, past_key_value\n\tclass LlamaDecoderLayer(nn.Module):\n\t    def __init__(self, config: LlamaConfig):\n", "        super().__init__()\n\t        self.hidden_size = config.hidden_size\n\t        self.self_attn = LlamaAttention(config=config)\n\t        self.mlp = LlamaMLP(\n\t            hidden_size=self.hidden_size,\n\t            intermediate_size=config.intermediate_size,\n\t            hidden_act=config.hidden_act,\n\t        )\n\t        self.input_layernorm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\t        self.post_attention_layernorm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n", "    def set_mem_cache_args(self, mem_freq, top_k, max_cache_size):\n\t        self.self_attn.set_mem_cache_args(mem_freq, top_k, max_cache_size)\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_value: Optional[Tuple[torch.Tensor]] = None,\n\t        output_attentions: Optional[bool] = False,\n\t        use_cache: Optional[bool] = False,\n", "        is_mem: Optional[torch.Tensor] = None,\n\t        last_section_mask: Optional[torch.Tensor] = None,\n\t        offload_cache_to_cpu: bool = False\n\t    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:\n\t        \"\"\"\n\t        Args:\n\t            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`\n\t            attention_mask (`torch.FloatTensor`, *optional*): attention mask of size\n\t                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n\t            output_attentions (`bool`, *optional*):\n", "                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n\t                returned tensors for more detail.\n\t            use_cache (`bool`, *optional*):\n\t                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding\n\t                (see `past_key_values`).\n\t            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states\n\t        \"\"\"\n\t        residual = hidden_states\n\t        hidden_states = self.input_layernorm(hidden_states)\n\t        # Self Attention\n", "        hidden_states, self_attn_weights, present_key_value = self.self_attn(\n\t            hidden_states=hidden_states,\n\t            attention_mask=attention_mask,\n\t            position_ids=position_ids,\n\t            past_key_value=past_key_value,\n\t            output_attentions=output_attentions,\n\t            use_cache=use_cache,\n\t            is_mem=is_mem,\n\t            last_section_mask=last_section_mask,\n\t            offload_cache_to_cpu=offload_cache_to_cpu\n", "        )\n\t        hidden_states = residual + hidden_states\n\t        # Fully Connected\n\t        residual = hidden_states\n\t        hidden_states = self.post_attention_layernorm(hidden_states)\n\t        hidden_states = self.mlp(hidden_states)\n\t        hidden_states = residual + hidden_states\n\t        outputs = (hidden_states,)\n\t        if output_attentions:\n\t            outputs += (self_attn_weights,)\n", "        if use_cache:\n\t            outputs += (present_key_value,)\n\t        return outputs\n\tLLAMA_START_DOCSTRING = r\"\"\"\n\t    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n\t    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n\t    etc.)\n\t    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n\t    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n\t    and behavior.\n", "    Parameters:\n\t        config ([`LlamaConfig`]):\n\t            Model configuration class with all the parameters of the model. Initializing with a config file does not\n\t            load the weights associated with the model, only the configuration. Check out the\n\t            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\t\"\"\"\n\t@add_start_docstrings(\n\t    \"The bare LLaMA Model outputting raw hidden-states without any specific head on top.\",\n\t    LLAMA_START_DOCSTRING,\n\t)\n", "class LlamaPreTrainedModel(PreTrainedModel):\n\t    config_class = LlamaConfig\n\t    base_model_prefix = \"model\"\n\t    supports_gradient_checkpointing = True\n\t    _no_split_modules = [\"LlamaDecoderLayer\"]\n\t    _keys_to_ignore_on_load_unexpected = [r\"decoder\\.version\"]\n\t    def _init_weights(self, module):\n\t        std = self.config.initializer_range\n\t        if isinstance(module, nn.Linear):\n\t            module.weight.data.normal_(mean=0.0, std=std)\n", "            if module.bias is not None:\n\t                module.bias.data.zero_()\n\t        elif isinstance(module, nn.Embedding):\n\t            module.weight.data.normal_(mean=0.0, std=std)\n\t            if module.padding_idx is not None:\n\t                module.weight.data[module.padding_idx].zero_()\n\t    def _set_gradient_checkpointing(self, module, value=False):\n\t        if isinstance(module, LlamaModel):\n\t            module.gradient_checkpointing = value\n\tLLAMA_INPUTS_DOCSTRING = r\"\"\"\n", "    Args:\n\t        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n\t            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide\n\t            it.\n\t            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n\t            [`PreTrainedTokenizer.__call__`] for details.\n\t            [What are input IDs?](../glossary#input-ids)\n\t        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n\t            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\t            - 1 for tokens that are **not masked**,\n", "            - 0 for tokens that are **masked**.\n\t            [What are attention masks?](../glossary#attention-mask)\n\t            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n\t            [`PreTrainedTokenizer.__call__`] for details.\n\t            If `past_key_values` is used, optionally only the last `decoder_input_ids` have to be input (see\n\t            `past_key_values`).\n\t            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]\n\t            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more\n\t            information on the default strategy.\n\t            - 1 indicates the head is **not masked**,\n", "            - 0 indicates the head is **masked**.\n\t        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n\t            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n\t            config.n_positions - 1]`.\n\t            [What are position IDs?](../glossary#position-ids)\n\t        past_key_values (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):\n\t            Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of shape\n\t            `(batch_size, num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of shape\n\t            `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.\n\t            Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention\n", "            blocks) that can be used (see `past_key_values` input) to speed up sequential decoding.\n\t            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n\t            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n\t            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n\t        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n\t            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n\t            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n\t            model's internal embedding lookup matrix.\n\t        use_cache (`bool`, *optional*):\n\t            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n", "            `past_key_values`).\n\t        output_attentions (`bool`, *optional*):\n\t            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n\t            tensors for more detail.\n\t        output_hidden_states (`bool`, *optional*):\n\t            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n\t            more detail.\n\t        return_dict (`bool`, *optional*):\n\t            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\t\"\"\"\n", "@add_start_docstrings(\n\t    \"The bare LLaMA Model outputting raw hidden-states without any specific head on top.\",\n\t    LLAMA_START_DOCSTRING,\n\t)\n\tclass LlamaModel(LlamaPreTrainedModel):\n\t    \"\"\"\n\t    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`LlamaDecoderLayer`]\n\t    Args:\n\t        config: LlamaConfig\n\t    \"\"\"\n", "    def __init__(self, config: LlamaConfig):\n\t        super().__init__(config)\n\t        self.padding_idx = config.pad_token_id\n\t        self.vocab_size = config.vocab_size\n\t        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)\n\t        self.layers = nn.ModuleList([LlamaDecoderLayer(config) for _ in range(config.num_hidden_layers)])\n\t        self.norm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\t        self.mem_id = None\n\t        self.gradient_checkpointing = False\n\t        # Initialize weights and apply final processing\n", "        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.embed_tokens\n\t    def set_input_embeddings(self, value):\n\t        self.embed_tokens = value\n\t    def set_mem_id(self, mem_id):\n\t        self.mem_id = mem_id\n\t    def set_mem_cache_args(self, mem_freq, top_k, max_cache_size):\n\t        for l in self.layers:\n\t            l.set_mem_cache_args(mem_freq, top_k, max_cache_size)\n", "    # Copied from transformers.models.bart.modeling_bart.BartDecoder._prepare_decoder_attention_mask\n\t    def _prepare_decoder_attention_mask(self, attention_mask, input_shape, inputs_embeds, past_key_values_length):\n\t        # create causal mask\n\t        # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]\n\t        combined_attention_mask = None\n\t        if input_shape[-1] > 1:\n\t            combined_attention_mask = _make_causal_mask(\n\t                input_shape,\n\t                inputs_embeds.dtype,\n\t                device=inputs_embeds.device,\n", "                past_key_values_length=past_key_values_length,\n\t            )\n\t        if attention_mask is not None:\n\t            # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]\n\t            expanded_attn_mask = _expand_mask(attention_mask, inputs_embeds.dtype, tgt_len=input_shape[-1]).to(\n\t                inputs_embeds.device\n\t            )\n\t            combined_attention_mask = (\n\t                expanded_attn_mask if combined_attention_mask is None else expanded_attn_mask + combined_attention_mask\n\t            )\n", "        return combined_attention_mask\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    def forward(\n\t        self,\n\t        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n\t        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        use_cache: Optional[bool] = None,\n", "        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n\t        offload_cache_to_cpu: Optional[bool] = None,\n\t    ) -> Union[Tuple, BaseModelOutputWithPast]:\n\t        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n\t            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n\t        )\n\t        use_cache = use_cache if use_cache is not None else self.config.use_cache\n", "        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        # retrieve input_ids and inputs_embeds\n\t        is_mem = None\n\t        if input_ids is not None and inputs_embeds is not None:\n\t            raise ValueError(\"You cannot specify both decoder_input_ids and decoder_inputs_embeds at the same time\")\n\t        elif input_ids is not None:\n\t            batch_size, seq_length = input_ids.shape\n\t            if self.mem_id is not None:\n\t                with torch.no_grad():\n\t                    is_mem = input_ids == self.mem_id\n", "        elif inputs_embeds is not None:\n\t            batch_size, seq_length, _ = inputs_embeds.shape\n\t            if self.mem_id is not None:\n\t                raise NotImplementedError\n\t        else:\n\t            raise ValueError(\"You have to specify either decoder_input_ids or decoder_inputs_embeds\")\n\t        seq_length_with_past = seq_length\n\t        past_key_values_length = 0\n\t        if past_key_values is not None:\n\t            if is_mem is not None:\n", "                pass\n\t                #raise NotImplementedError\n\t            past_key_values_length = past_key_values[0][0].shape[2]\n\t            if len(past_key_values[0]) > 2:\n\t                past_key_values_length += past_key_values[0][3].shape[2] * past_key_values[0][3].shape[3]\n\t            seq_length_with_past = seq_length_with_past + past_key_values_length\n\t        if position_ids is None:\n\t            device = input_ids.device if input_ids is not None else inputs_embeds.device\n\t            position_ids = torch.arange(\n\t                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device\n", "            )\n\t            position_ids = position_ids.unsqueeze(0).view(-1, seq_length)\n\t        else:\n\t            position_ids = position_ids.view(-1, seq_length).long()\n\t        if inputs_embeds is None:\n\t            inputs_embeds = self.embed_tokens(input_ids)\n\t        # embed positions\n\t        if attention_mask is None:\n\t            attention_mask = torch.ones(\n\t                (batch_size, seq_length_with_past), dtype=torch.bool, device=inputs_embeds.device\n", "            )\n\t        attention_mask = self._prepare_decoder_attention_mask(\n\t            attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length\n\t        )\n\t        last_section_mask = None\n\t        if is_mem is not None:\n\t            is_mem = is_mem.unsqueeze(1).unsqueeze(2)\n\t            current_len = input_ids.shape[1]\n\t            mem_ids = torch.where(attention_mask[..., -current_len:] < -1, 0, torch.cumsum(is_mem, -1) - is_mem.int())\n\t            last_section_mask = torch.amax(mem_ids, -1, keepdim=True) == mem_ids\n", "            attention_mask[..., -current_len:].masked_fill_(last_section_mask & is_mem, torch.tensor(torch.finfo(inputs_embeds.dtype).min, device=inputs_embeds.device))\n\t            last_section_mask.logical_and_(attention_mask[..., -current_len:] > -1)\n\t            is_mem = is_mem.logical_and(attention_mask[..., -current_len:] > -1)\n\t        hidden_states = inputs_embeds\n\t        if self.gradient_checkpointing and self.training:\n\t            if use_cache:\n\t                logger.warning_once(\n\t                    \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n\t                )\n\t                use_cache = False\n", "        # decoder layers\n\t        all_hidden_states = () if output_hidden_states else None\n\t        all_self_attns = () if output_attentions else None\n\t        next_decoder_cache = () if use_cache else None\n\t        for idx, decoder_layer in enumerate(self.layers):\n\t            if output_hidden_states:\n\t                all_hidden_states += (hidden_states,)\n\t            past_key_value = past_key_values[idx] if past_key_values is not None else None\n\t            if self.gradient_checkpointing and self.training:\n\t                def create_custom_forward(module):\n", "                    def custom_forward(*inputs):\n\t                        # None for past_key_value\n\t                        return module(*inputs, output_attentions, None)\n\t                    return custom_forward\n\t                layer_outputs = torch.utils.checkpoint.checkpoint(\n\t                    create_custom_forward(decoder_layer),\n\t                    hidden_states,\n\t                    attention_mask,\n\t                    position_ids,\n\t                    None,\n", "                    is_mem,\n\t                    last_section_mask\n\t                )\n\t            else:\n\t                layer_outputs = decoder_layer(\n\t                    hidden_states,\n\t                    attention_mask=attention_mask,\n\t                    position_ids=position_ids,\n\t                    past_key_value=past_key_value,\n\t                    output_attentions=output_attentions,\n", "                    use_cache=use_cache,\n\t                    is_mem=is_mem,\n\t                    last_section_mask=last_section_mask,\n\t                    offload_cache_to_cpu=offload_cache_to_cpu\n\t                )\n\t            hidden_states = layer_outputs[0]\n\t            if use_cache:\n\t                next_decoder_cache += (layer_outputs[2 if output_attentions else 1],)\n\t            if output_attentions:\n\t                all_self_attns += (layer_outputs[1],)\n", "        hidden_states = self.norm(hidden_states)\n\t        # add hidden states from the last decoder layer\n\t        if output_hidden_states:\n\t            all_hidden_states += (hidden_states,)\n\t        next_cache = next_decoder_cache if use_cache else None\n\t        if not return_dict:\n\t            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)\n\t        return BaseModelOutputWithPast(\n\t            last_hidden_state=hidden_states,\n\t            past_key_values=next_cache,\n", "            hidden_states=all_hidden_states,\n\t            attentions=all_self_attns,\n\t        )\n\tclass LlamaForCausalLM(LlamaPreTrainedModel):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.model = LlamaModel(config)\n\t        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\t        self.mem_id = None\n\t        self.mem_freq = None\n", "        self.top_k = None\n\t        self.max_seq_len = None\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.model.embed_tokens\n\t    def set_input_embeddings(self, value):\n\t        self.model.embed_tokens = value\n\t    def get_output_embeddings(self):\n\t        return self.lm_head\n", "    def set_output_embeddings(self, new_embeddings):\n\t        self.lm_head = new_embeddings\n\t    def set_decoder(self, decoder):\n\t        self.model = decoder\n\t    def get_decoder(self):\n\t        return self.model\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n\t    def forward(\n\t        self,\n", "        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n\t        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        labels: Optional[torch.LongTensor] = None,\n\t        use_cache: Optional[bool] = None,\n\t        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n", "        offload_cache_to_cpu: Optional[bool] = None,\n\t    ) -> Union[Tuple, CausalLMOutputWithPast]:\n\t        r\"\"\"\n\t        Args:\n\t            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n\t                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n\t                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n\t                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\t        Returns:\n\t        Example:\n", "        ```python\n\t        >>> from transformers import AutoTokenizer, LlamaForCausalLM\n\t        >>> model = LlamaForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)\n\t        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)\n\t        >>> prompt = \"Hey, are you consciours? Can you talk to me?\"\n\t        >>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\t        >>> # Generate\n\t        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n\t        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n\t        \"Hey, are you consciours? Can you talk to me?\\nI'm not consciours, but I can talk to you.\"\n", "        ```\"\"\"\n\t        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n\t            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n\t        )\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n\t        window_len = self.max_seq_len or input_ids.shape[1]\n\t        last_logits = None\n\t        for step, idx in enumerate(range(0, input_ids.shape[1], window_len)):\n", "            if idx >= 1:\n\t                if output_attentions or output_hidden_states:\n\t                    raise NotImplementedError\n\t                if not use_cache:\n\t                    raise NotImplementedError\n\t            outputs = self.model(\n\t                input_ids=input_ids[:, idx:idx + window_len],\n\t                attention_mask=attention_mask[:, :idx + window_len + attention_mask.shape[1] - input_ids.shape[1]] if attention_mask is not None else None,\n\t                position_ids=position_ids[:, idx:idx + window_len] if position_ids is not None else None,\n\t                past_key_values=past_key_values,\n", "                inputs_embeds=inputs_embeds[:, idx:idx + window_len] if inputs_embeds is not None else None,\n\t                use_cache=use_cache,\n\t                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n\t                offload_cache_to_cpu=offload_cache_to_cpu,\n\t            )\n\t            past_key_values = outputs[1]\n\t            if last_logits is not None:\n\t                last_logits = torch.cat((last_logits, outputs[0]), dim=-2)\n", "            last_logits = outputs[0]\n\t        hidden_states = last_logits\n\t        logits = self.lm_head(hidden_states)\n\t        loss = None\n\t        if labels is not None:\n\t            # Shift so that tokens < n predict n\n\t            shift_logits = logits[..., :-1, :].contiguous()\n\t            shift_labels = labels[..., 1:].contiguous()\n\t            # Flatten the tokens\n\t            loss_fct = CrossEntropyLoss()\n", "            shift_logits = shift_logits.view(-1, self.config.vocab_size)\n\t            shift_labels = shift_labels.view(-1)\n\t            # Enable model parallelism\n\t            shift_labels = shift_labels.to(shift_logits.device)\n\t            loss = loss_fct(shift_logits, shift_labels)\n\t        if not return_dict:\n\t            output = (logits,) + outputs[1:]\n\t            return (loss,) + output if loss is not None else output\n\t        return CausalLMOutputWithPast(\n\t            loss=loss,\n", "            logits=logits,\n\t            past_key_values=outputs.past_key_values,\n\t            hidden_states=outputs.hidden_states,\n\t            attentions=outputs.attentions,\n\t        )\n\t    def set_mem_id(self, mem_id):\n\t        self.mem_id = mem_id\n\t        self.model.set_mem_id(mem_id)\n\t    def set_mem_cache_args(self, max_seq_len, mem_freq, top_k, max_cache_size):\n\t        self.mem_freq = mem_freq\n", "        self.top_k = top_k\n\t        self.max_seq_len = max_seq_len\n\t        if self.max_seq_len is not None:\n\t            assert self.max_seq_len % (self.mem_freq + 1) == 0\n\t        self.model.set_mem_cache_args(mem_freq, top_k, max_cache_size)\n\t    def prepare_inputs_for_generation(\n\t        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs\n\t    ):\n\t        total_len = input_ids.shape[1]\n\t        if past_key_values:\n", "            prev_len = input_ids.shape[1] - 1\n\t        else:\n\t            prev_len = 0\n\t        position_ids = kwargs.get(\"position_ids\", None)\n\t        if self.mem_freq is not None:\n\t            if position_ids is not None:\n\t                raise NotImplementedError\n\t            T = input_ids.shape[1]\n\t            prev_incomplete_len = prev_len % self.mem_freq\n\t            prev_complete_len = prev_len - prev_incomplete_len\n", "            incomplete_len = total_len % self.mem_freq\n\t            new_full_len = total_len - prev_complete_len - incomplete_len\n\t            prev_input, input_ids_with_mem, input_ids_without_mem = torch.split(input_ids, (prev_complete_len, new_full_len, incomplete_len), dim=-1)\n\t            bsz, q_len = input_ids.size()\n\t            input_ids_with_mem = input_ids_with_mem.view(bsz, -1, self.mem_freq)            \n\t            input_ids_with_mem = torch.cat(\n\t                (\n\t                    input_ids_with_mem, \n\t                    input_ids_with_mem.new_full((bsz, input_ids_with_mem.shape[1], 1), self.mem_id)\n\t                ), \n", "                dim=-1\n\t            ).view(bsz, -1)\n\t            input_ids = torch.cat((prev_input, input_ids_with_mem, input_ids_without_mem), dim=-1)\n\t            if attention_mask is not None:\n\t                attention_mask_with_mem, attention_mask_without_mem = torch.split(attention_mask, (prev_complete_len + new_full_len, incomplete_len), dim=-1)\n\t                attention_mask_with_mem = attention_mask_with_mem.view(bsz, -1, self.mem_freq)\n\t                attention_mask_with_mem = torch.cat(\n\t                    (\n\t                        attention_mask_with_mem, \n\t                        attention_mask_with_mem.new_ones((bsz, attention_mask_with_mem.shape[1], 1))\n", "                    ), \n\t                    dim=-1\n\t                ).view(bsz, -1)\n\t                attention_mask = torch.cat((attention_mask_with_mem, attention_mask_without_mem), dim=-1)\n\t        input_ids = input_ids[:, prev_len:]\n\t        if attention_mask is not None and position_ids is None:\n\t            # create position_ids on the fly for batch generation\n\t            position_ids = attention_mask.long().cumsum(-1) - 1\n\t            position_ids.masked_fill_(attention_mask == 0, 1)\n\t            position_ids = position_ids[:, -input_ids.shape[1]:].unsqueeze(-1)\n", "        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step\n\t        if inputs_embeds is not None and past_key_values is None and self.mem_freq is None:\n\t            model_inputs = {\"inputs_embeds\": inputs_embeds}\n\t        else:\n\t            model_inputs = {\"input_ids\": input_ids}\n\t        model_inputs.update(\n\t            {\n\t                \"position_ids\": position_ids,\n\t                \"past_key_values\": past_key_values,\n\t                \"use_cache\": kwargs.get(\"use_cache\"),\n", "                \"attention_mask\": attention_mask,\n\t                \"offload_cache_to_cpu\": kwargs.get(\"offload_cache_to_cpu\")\n\t            }\n\t        )\n\t        return model_inputs\n\t    @staticmethod\n\t    def _reorder_cache(past_key_values, beam_idx):\n\t        reordered_past = ()\n\t        for layer_past in past_key_values:\n\t            reordered_past += (tuple(past_state.index_select(0, beam_idx) for past_state in layer_past),)\n", "        return reordered_past\n\t@add_start_docstrings(\n\t    \"\"\"\n\t    The LLaMa Model transformer with a sequence classification head on top (linear layer).\n\t    [`LlamaForSequenceClassification`] uses the last token in order to do the classification, as other causal models\n\t    (e.g. GPT-2) do.\n\t    Since it does classification on the last token, it requires to know the position of the last token. If a\n\t    `pad_token_id` is defined in the configuration, it finds the last token that is not a padding token in each row. If\n\t    no `pad_token_id` is defined, it simply takes the last value in each row of the batch. Since it cannot guess the\n\t    padding tokens when `inputs_embeds` are passed instead of `input_ids`, it does the same (take the last value in\n", "    each row of the batch).\n\t    \"\"\",\n\t    LLAMA_START_DOCSTRING,\n\t)\n\tclass LlamaForSequenceClassification(LlamaPreTrainedModel):\n\t    _keys_to_ignore_on_load_missing = [r\"lm_head.weight\"]\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.num_labels = config.num_labels\n\t        self.model = LlamaModel(config)\n", "        self.score = nn.Linear(config.hidden_size, self.num_labels, bias=False)\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.model.embed_tokens\n\t    def set_input_embeddings(self, value):\n\t        self.model.embed_tokens = value\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    def forward(\n\t        self,\n", "        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n\t        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        labels: Optional[torch.LongTensor] = None,\n\t        use_cache: Optional[bool] = None,\n\t        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n", "    ) -> Union[Tuple, SequenceClassifierOutputWithPast]:\n\t        r\"\"\"\n\t        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n\t            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n\t            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n\t            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n\t        \"\"\"\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        transformer_outputs = self.model(\n\t            input_ids,\n", "            attention_mask=attention_mask,\n\t            position_ids=position_ids,\n\t            past_key_values=past_key_values,\n\t            inputs_embeds=inputs_embeds,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n\t        hidden_states = transformer_outputs[0]\n", "        logits = self.score(hidden_states)\n\t        if input_ids is not None:\n\t            batch_size = input_ids.shape[0]\n\t        else:\n\t            batch_size = inputs_embeds.shape[0]\n\t        if self.config.pad_token_id is None and batch_size != 1:\n\t            raise ValueError(\"Cannot handle batch sizes > 1 if no padding token is defined.\")\n\t        if self.config.pad_token_id is None:\n\t            sequence_lengths = -1\n\t        else:\n", "            if input_ids is not None:\n\t                sequence_lengths = (torch.ne(input_ids, self.config.pad_token_id).sum(-1) - 1).to(logits.device)\n\t            else:\n\t                sequence_lengths = -1\n\t        pooled_logits = logits[torch.arange(batch_size, device=logits.device), sequence_lengths]\n\t        loss = None\n\t        if labels is not None:\n\t            labels = labels.to(logits.device)\n\t            if self.config.problem_type is None:\n\t                if self.num_labels == 1:\n", "                    self.config.problem_type = \"regression\"\n\t                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n\t                    self.config.problem_type = \"single_label_classification\"\n\t                else:\n\t                    self.config.problem_type = \"multi_label_classification\"\n\t            if self.config.problem_type == \"regression\":\n\t                loss_fct = MSELoss()\n\t                if self.num_labels == 1:\n\t                    loss = loss_fct(pooled_logits.squeeze(), labels.squeeze())\n\t                else:\n", "                    loss = loss_fct(pooled_logits, labels)\n\t            elif self.config.problem_type == \"single_label_classification\":\n\t                loss_fct = CrossEntropyLoss()\n\t                loss = loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))\n\t            elif self.config.problem_type == \"multi_label_classification\":\n\t                loss_fct = BCEWithLogitsLoss()\n\t                loss = loss_fct(pooled_logits, labels)\n\t        if not return_dict:\n\t            output = (pooled_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n", "        return SequenceClassifierOutputWithPast(\n\t            loss=loss,\n\t            logits=pooled_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n\t            hidden_states=transformer_outputs.hidden_states,\n\t            attentions=transformer_outputs.attentions,\n\t        )\n"]}
{"filename": "llama/train.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport copy\n\timport logging\n\tfrom dataclasses import dataclass, field\n\tfrom functools import partial\n\tfrom typing import Dict, Optional, Sequence\n\timport torch\n\timport transformers\n", "from torch.utils.data import Dataset\n\tfrom transformers import Trainer, DataCollatorForLanguageModeling, get_cosine_schedule_with_warmup\n\tfrom llama_mem import LlamaForCausalLM\n\tfrom torch.distributed import barrier\n\timport os\n\tfrom datasets import load_dataset\n\tIGNORE_INDEX = -100\n\tDEFAULT_PAD_TOKEN = \"[PAD]\"\n\tDEFAULT_EOS_TOKEN = \"</s>\"\n\tDEFAULT_BOS_TOKEN = \"<s>\"\n", "DEFAULT_UNK_TOKEN = \"<unk>\"\n\t@dataclass\n\tclass ModelArguments:\n\t    model_name_or_path: Optional[str] = field(default=\"facebook/opt-125m\")\n\t@dataclass\n\tclass TrainingArguments(transformers.TrainingArguments):\n\t    cache_dir: Optional[str] = field(default=None)\n\t    optim: str = field(default=\"adamw_torch\")\n\t    model_max_length: int = field(\n\t        default=512,\n", "        metadata={\"help\": \"Maximum sequence length. Sequences will be right padded (and possibly truncated).\"},\n\t    )\n\t    use_flash: bool = field(default=False)\n\t    mem_freq: int = field(default=63)\n\tclass TrainerCosine(Trainer):\n\t    def create_scheduler(self, num_training_steps: int, optimizer: torch.optim.Optimizer = None):\n\t        \"\"\"\n\t        Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or\n\t        passed as an argument.\n\t        Args:\n", "            num_training_steps (int): The number of training steps to do.\n\t        \"\"\"\n\t        if self.args.lr_scheduler_type != \"cosine\":\n\t            return super().create_scheduler(num_training_steps, optimizer)\n\t        if self.lr_scheduler is None:\n\t            self.lr_scheduler = get_cosine_schedule_with_warmup(\n\t                optimizer=self.optimizer if optimizer is None else optimizer,\n\t                num_warmup_steps=self.args.get_warmup_steps(num_training_steps),\n\t                num_training_steps=num_training_steps,\n\t                num_cycles=0.4 # ~10% of the init lr\n", "            )\n\t        return self.lr_scheduler\n\tdef smart_tokenizer_and_embedding_resize(\n\t    special_tokens_dict: Dict,\n\t    tokenizer: transformers.PreTrainedTokenizer,\n\t    model: transformers.PreTrainedModel,\n\t):\n\t    \"\"\"Resize tokenizer and embedding.\n\t    Note: This is the unoptimized version that may make your embedding size not be divisible by 64.\n\t    \"\"\"\n", "    num_new_tokens = tokenizer.add_special_tokens(special_tokens_dict)\n\t    model.resize_token_embeddings(len(tokenizer))\n\t    if num_new_tokens > 0:\n\t        input_embeddings = model.get_input_embeddings().weight.data\n\t        output_embeddings = model.get_output_embeddings().weight.data\n\t        input_embeddings_avg = input_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)\n\t        output_embeddings_avg = output_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)\n\t        input_embeddings[-num_new_tokens:] = input_embeddings_avg\n\t        output_embeddings[-num_new_tokens:] = output_embeddings_avg\n\tdef tokenize_fn(tokenizer, example):\n", "    context_length = tokenizer.model_max_length\n\t    outputs = tokenizer(\n\t        tokenizer.eos_token.join(example[\"text\"]),\n\t        truncation=False,\n\t        return_tensors=\"pt\",\n\t        pad_to_multiple_of=context_length,\n\t        padding=True,\n\t    )\n\t    return {\"input_ids\": outputs[\"input_ids\"].view(-1, context_length)}\n\tdef add_mem_tokens(example, mem_freq, mem_id):\n", "    x = example[\"input_ids\"]\n\t    ret = []\n\t    prev_idx = 0\n\t    for t_idx in range(mem_freq, len(x), mem_freq):\n\t        ret.extend(x[prev_idx:t_idx])\n\t        ret.append(mem_id)\n\t        prev_idx = t_idx\n\t    ret.extend(x[prev_idx:])\n\t    # drop attention_mask\n\t    return {\"input_ids\": ret}\n", "def train():\n\t    parser = transformers.HfArgumentParser((ModelArguments, TrainingArguments))\n\t    model_args, training_args = parser.parse_args_into_dataclasses()\n\t    model = LlamaForCausalLM.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        cache_dir=training_args.cache_dir,\n\t        mem_freq=training_args.mem_freq,\n\t        include_landmark_in_loss=not training_args.use_flash\n\t    )\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n", "        model_args.model_name_or_path,\n\t        cache_dir=training_args.cache_dir,\n\t        model_max_length=training_args.model_max_length,\n\t        padding_side=\"right\",\n\t        use_fast=False,\n\t    )\n\t    special_tokens_dict = dict()\n\t    if tokenizer.pad_token is None:\n\t        special_tokens_dict[\"pad_token\"] = DEFAULT_PAD_TOKEN\n\t    if tokenizer.eos_token is None:\n", "        special_tokens_dict[\"eos_token\"] = DEFAULT_EOS_TOKEN\n\t    if tokenizer.bos_token is None:\n\t        special_tokens_dict[\"bos_token\"] = DEFAULT_BOS_TOKEN\n\t    if tokenizer.unk_token is None:\n\t        special_tokens_dict[\"unk_token\"] = DEFAULT_UNK_TOKEN\n\t    mem_token = \"<landmark>\"\n\t    special_tokens_dict[\"additional_special_tokens\"] = [mem_token]\n\t    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=special_tokens_dict,\n\t        tokenizer=tokenizer,\n", "        model=model,\n\t    )\n\t    mem_id = tokenizer.convert_tokens_to_ids(mem_token)\n\t    model.set_mem_id(mem_id)\n\t    rank = int(os.environ.get('RANK', -1))\n\t    if rank > 0:\n\t        barrier()\n\t    dataset = load_dataset(\"togethercomputer/RedPajama-Data-1T-Sample\", cache_dir=training_args.cache_dir)\n\t    dataset = dataset.map(partial(tokenize_fn,tokenizer),batched=True, num_proc=32, remove_columns=[\"text\", \"meta\"])\n\t    if training_args.use_flash:\n", "        model.enable_landmark_insertion()\n\t        model.enable_flash()\n\t    else:\n\t        dataset = dataset.map(\n\t            partial(\n\t                add_mem_tokens, \n\t                mem_freq=training_args.mem_freq, \n\t                mem_id=mem_id\n\t            ), batched=False, num_proc=32)\n\t    if rank == 0:\n", "        barrier()\n\t    print(dataset)\n\t    data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)\n\t    trainer = TrainerCosine(\n\t        model=model, tokenizer=tokenizer, args=training_args, \n\t        train_dataset=dataset[\"train\"],\n\t        eval_dataset=None,\n\t        data_collator=data_collator)\n\t    trainer.train()\n\t    trainer.save_state()\n", "    trainer.save_model(output_dir=training_args.output_dir)\n\tif __name__ == \"__main__\":\n\t    train()\n"]}
{"filename": "llama/redpajama.py", "chunked_list": ["# Copyright 2023 Together Computer\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t# Lint as: python3\n\t\"\"\"RedPajama: An Open-Source, Clean-Room 1.2 Trillion Token Dataset.\"\"\"\n\timport json\n\timport datasets\n\timport traceback\n\timport numpy as np\n\timport math\n", "logger = datasets.logging.get_logger(__name__)\n\t_DESCRIPTION = \"\"\"\\\n\tRedPajama is a clean-room, fully open-source implementation of the LLaMa dataset.\n\t\"\"\"\n\t_URL_LISTS = {\n\t    \"arxiv\": \"urls/arxiv.txt\",\n\t    \"book\": \"urls/book.txt\",\n\t    \"c4\": \"urls/c4.txt\",\n\t    \"common_crawl\": \"urls/common_crawl.txt\",\n\t    \"github\": \"urls/github.txt\",\n", "    \"stackexchange\": \"urls/stackexchange.txt\",\n\t    \"wikipedia\": \"urls/wikipedia.txt\",\n\t}\n\tclass RedPajama1TConfig(datasets.BuilderConfig):\n\t    \"\"\"BuilderConfig for RedPajama sample.\"\"\"\n\t    def __init__(self, *args, subsets, p_sample=None, **kwargs):\n\t        \"\"\"BuilderConfig for RedPajama.\n\t        Args:\n\t          **kwargs: keyword arguments forwarded to super.\n\t        \"\"\"\n", "        super(RedPajama1TConfig, self).__init__(**kwargs)\n\t        self.subsets = subsets\n\t        self.p_sample = p_sample\n\tclass RedPajama1T(datasets.GeneratorBasedBuilder):\n\t    \"\"\"RedPajama: Reproducing the LLaMA training dataset of over 1.2 trillion tokens. Version 1.0.0.\"\"\"\n\t    BUILDER_CONFIG_CLASS = RedPajama1TConfig\n\t    BUILDER_CONFIGS = [\n\t        RedPajama1TConfig(\n\t            subsets = list(_URL_LISTS.keys()),\n\t            name=\"plain_text\",\n", "            version=datasets.Version(\"1.0.0\", \"\"),\n\t            description=\"Plain text\",\n\t        ),\n\t        RedPajama1TConfig(\n\t            subsets = list(_URL_LISTS.keys()),\n\t            name=\"plain_text_tenpercent\",\n\t            version=datasets.Version(\"1.0.0\", \"\"),\n\t            description=\"Plain text\",\n\t            p_sample=0.1\n\t        ),\n", "    ]\n\t    def _info(self):\n\t        return datasets.DatasetInfo(\n\t            description=_DESCRIPTION,\n\t            features=datasets.Features(\n\t                {\n\t                    \"text\": datasets.Value(\"string\"),\n\t                    \"meta\": datasets.Value(\"string\"),\n\t                    \"red_pajama_subset\": datasets.Value(\"string\"),\n\t                }\n", "            ),\n\t            supervised_keys=None,\n\t        )\n\t    def _split_generators(self, dl_manager):\n\t        url_lists = dl_manager.download_and_extract({\n\t            subset: _URL_LISTS[subset] for subset in self.config.subsets\n\t        })\n\t        urls = {}\n\t        rng = np.random.default_rng(seed=2)\n\t        for subset, url_list in url_lists.items():\n", "            with open(url_list, encoding=\"utf-8\") as f:\n\t                urls[subset] = [line.strip() for line in f]\n\t            if self.config.p_sample is not None:\n\t                urls[subset] = rng.choice(\n\t                    urls[subset], \n\t                    size=int(math.ceil(len(urls[subset]) * self.config.p_sample)), replace=False).tolist()\n\t        downloaded_files = dl_manager.download(urls)\n\t        return [\n\t            datasets.SplitGenerator(\n\t                name=datasets.Split.TRAIN,\n", "                gen_kwargs = {\n\t                    \"files\": {\n\t                        subset: downloaded_files[subset]\n\t                        for subset in self.config.subsets\n\t                    }\n\t                }\n\t            )\n\t        ]\n\t    def _generate_examples(self, files):\n\t        \"\"\"This function returns the examples in the raw (text) form.\"\"\"\n", "        key = 0\n\t        for subset in files:\n\t            if subset == \"common_crawl\":\n\t                import zstandard as zstd\n\t                for path in files[subset]:\n\t                    with zstd.open(open(path, \"rb\"), \"rt\", encoding=\"utf-8\") as f:\n\t                        for i, row in enumerate(f):\n\t                            try:\n\t                                data = json.loads(row)\n\t                                text = data[\"text\"]\n", "                                del data[\"text\"]\n\t                                yield key, {\n\t                                    \"text\": text,\n\t                                    \"meta\": json.dumps(data),\n\t                                    \"red_pajama_subset\": subset,\n\t                                }\n\t                                key += 1\n\t                            except Exception as e:\n\t                                print(f'Subset: {subset}')\n\t                                print(f'Path: {path}')\n", "                                print(f'Row: {row}')\n\t                                traceback.print_exc()\n\t                                raise e\n\t            else:\n\t                for path in files[subset]:\n\t                    with open(path, encoding=\"utf-8\") as f:\n\t                        for i, row in enumerate(f):\n\t                            try:\n\t                                data = json.loads(row)\n\t                                if \"meta\" not in data:\n", "                                    text = data[\"text\"]\n\t                                    del data[\"text\"]\n\t                                    yield key, {\n\t                                        \"text\": text,\n\t                                        \"meta\": json.dumps(data),\n\t                                        \"red_pajama_subset\": subset,\n\t                                    }\n\t                                else:\n\t                                    yield key, {\n\t                                        \"text\": data[\"text\"],\n", "                                        \"meta\": data[\"meta\"],\n\t                                        \"red_pajama_subset\": subset,\n\t                                    }\n\t                                key += 1\n\t                            except Exception as e:\n\t                                print(f'Subset: {subset}')\n\t                                print(f'Path: {path}')\n\t                                print(f'Row: {row}')\n\t                                traceback.print_exc()\n\t                                raise e\n"]}
{"filename": "llama/llama_landmark_config.py", "chunked_list": ["from transformers.models.llama.configuration_llama import LlamaConfig\n\tclass LlamaLandmarkConfig(LlamaConfig):\n\t    model_type = \"llama_with_landmark\"\n\t    def __init__(\n\t        self,\n\t        mem_id=32001,\n\t        mem_freq=50,\n\t        train_context_length=512,\n\t        include_landmark_in_loss=True,\n\t        **kwargs,\n", "    ):\n\t        self.mem_id = mem_id\n\t        self.mem_freq = mem_freq\n\t        self.train_context_length = train_context_length\n\t        self.include_landmark_in_loss = include_landmark_in_loss\n\t        super().__init__(**kwargs)\n"]}
{"filename": "llama/run_test.py", "chunked_list": ["# Copyright 2023 Amirkeivan Mohtashami, Martin Jaggi\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport torch\n\timport os\n\timport random\n\timport re\n\timport requests\n\tllama_weights_7b_base = \"/llama_weights/7B_hf/\"\n\tllama_weights_7b_tuned = \"/llama-redpajama-mem-15000-with-mem/\"\n", "cache_path = \"/hf-cache/\"\n\tuse_flash = False # using flash for inference is only implemented for when offloading kv to cpu\n\ttop_k = 5\n\tdtype = torch.bfloat16\n\tdef make_llama_base_pipe():\n\t    from transformers import pipeline\n\t    from transformers.models.llama import LlamaForCausalLM\n\t    llama_base = LlamaForCausalLM.from_pretrained(\n\t        llama_weights_7b_base,\n\t        cache_dir=cache_path,\n", "    )\n\t    llama_base = llama_base.to('cuda:0')\n\t    import transformers\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        llama_weights_7b_base,\n\t        cache_dir=cache_path,\n\t        model_max_length=2048,\n\t        padding_side=\"right\",\n\t        use_fast=False,\n\t    )\n", "    llama_base_pipe = pipeline(\"text-generation\", model=llama_base, tokenizer=tokenizer, device=llama_base.device)\n\t    return llama_base_pipe\n\tllama_base_pipe = make_llama_base_pipe()\n\tdef make_llama_mem_pipe():\n\t    from llama_mem import LlamaForCausalLM\n\t    model = LlamaForCausalLM.from_pretrained(\n\t        llama_weights_7b_tuned,\n\t        cache_dir=cache_path,\n\t        torch_dtype=dtype\n\t    )\n", "    model.to('cuda:1')\n\t    import transformers\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(\n\t            llama_weights_7b_tuned,\n\t            cache_dir=cache_path,\n\t            model_max_length=model.config.train_context_length,\n\t            padding_side=\"right\",\n\t            use_fast=False,\n\t        )\n\t    mem_id = tokenizer.convert_tokens_to_ids(\"<landmark>\")\n", "    model.set_mem_id(mem_id)\n\t    from transformers import pipeline\n\t    llama_mem_pipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer, device=model.device,\n\t                              offload_cache_to_cpu=use_flash, use_flash=use_flash, \n\t                              cache_top_k=top_k)\n\t    return llama_mem_pipe\n\tllama_mem_pipe = make_llama_mem_pipe()\n\tpipes = {\"base\": llama_base_pipe, \"mem\": llama_mem_pipe}\n\tdef generate_prompt(n_garbage):\n\t    \"\"\"Generates a text file and inserts an execute line at a random position.\"\"\"\n", "    n_garbage_prefix = random.randint(0, n_garbage)\n\t    n_garbage_suffix = n_garbage - n_garbage_prefix\n\t    task_description = \"There is an important info hidden inside a lot of irrelevant text. Find it and memorize them. I will quiz you about the important information there.\"\n\t    garbage = \"The grass is green. The sky is blue. The sun is yellow. Here we go. There and back again.\"\n\t    garbage_inf = \" \".join([garbage] * 2000)\n\t    assert len(garbage_inf) >= n_garbage\n\t    garbage_prefix = garbage_inf[:n_garbage_prefix]\n\t    garbage_suffix = garbage_inf[:n_garbage_suffix]\n\t    pass_key = random.randint(1, 50000)\n\t    information_line = f\"The pass key is {pass_key}. Remember it. {pass_key} is the pass key.\"\n", "    final_question = \"What is the pass key? The pass key is\"\n\t    lines = [\n\t        task_description,\n\t        garbage_prefix,\n\t        information_line,\n\t        garbage_suffix,\n\t        final_question\n\t    ]\n\t    return \"\\n\".join(lines), pass_key\n\tdef test_model(prompt_text, pass_key, model_name):\n", "    response = pipes[model_name](prompt_text,num_return_sequences=1, max_new_tokens=10)[0][\"generated_text\"][len(prompt_text):]\n\t    assert f\"The pass key is {pass_key}\" in prompt_text\n\t    try:\n\t        pass_key = int(re.search(r'\\d+', response).group())\n\t    except:\n\t        pass_key = response[:20]\n\t    return pass_key\n\tn_values = [0, 100, 500, 1000, 5000, 8000, 10000, 12000, 14000, 18000, 20000, 25000, 38000]\n\tnum_tests = 50\n\tmodels = [\"base\", \"mem\"]\n", "accuracies = {x: [] for x in models}\n\tindividual_results = {x: [] for x in models}\n\tfor n in n_values:\n\t    correct_count = {x: 0 for x in models}\n\t    n_results = {x: [] for x in models}\n\t    for i in range(num_tests):\n\t        print(f\"\\nRunning test {i + 1}/{num_tests} for n = {n}...\")\n\t        prompt_text, pass_key = generate_prompt(n)\n\t        for model_name in models:\n\t            if pipes[model_name] is None:\n", "                continue\n\t            num_tokens = len(pipes[model_name].tokenizer.encode(prompt_text))\n\t            print(\"Number of tokens in this prompt: \", num_tokens)\n\t            model_output = test_model(prompt_text, pass_key, model_name)\n\t            print(f\"Expected number in the prompt: {pass_key}, {model_name} output: {model_output}\")\n\t            if pass_key == model_output:\n\t                correct_count[model_name] += 1\n\t                n_results[model_name].append(1)\n\t                print(\"Success!\")\n\t            else:\n", "                n_results[model_name].append(0)\n\t                print(\"Fail.\")\n\t    for model in models:\n\t        accuracy = (correct_count[model] / num_tests) * 100\n\t        print(f\"Accuracy {model} for n = {n}: {accuracy}%\")\n\t        accuracies[model].append(accuracy)\n\t        individual_results[model].append(n_results)\n"]}
{"filename": "llama/weight_diff.py", "chunked_list": ["#    Copyright 2023 Rohan Taori, Ishaan Gulrajani, Tianyi Zhang, Yann Dubois, Xuechen Li\n\t#\n\t#    Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#    you may not use this file except in compliance with the License.\n\t#    You may obtain a copy of the License at\n\t#\n\t#        http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#    Unless required by applicable law or agreed to in writing, software\n\t#    distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#    See the License for the specific language governing permissions and\n\t#    limitations under the License.\n\t# This file has been changed by Amirkeivan Mohtashami\n\t# to take into account the new token in the embedding layer\n\timport os\n\tfrom typing import Optional\n\timport fire\n\timport torch\n\timport tqdm\n", "import transformers\n\tfrom train import smart_tokenizer_and_embedding_resize\n\timport llama_mem\n\t@torch.inference_mode()\n\tdef make_diff(\n\t    path_raw: str, path_tuned: str, path_diff: str, device=\"cpu\",  # \"cuda\" or \"cpu\"\n\t):\n\t    \"\"\"Make the weight diff.\n\t    This function is given to present full transparency of how the weight diff was created.\n\t    Run:\n", "        python weight_diff.py make_diff --path_raw <your_path_raw> --path_tuned <your_path_tuned> --path_diff <your_path_diff>\n\t    \"\"\"\n\t    model_tuned: transformers.PreTrainedModel = llama_mem.LlamaForCausalLM.from_pretrained(\n\t        path_tuned,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    model_raw: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_raw,\n", "        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    tokenizer_tuned: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_tuned\n\t    )\n\t    tokenizer_raw: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_raw\n\t    )\n", "    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=dict(pad_token=\"[PAD]\", additional_special_tokens=[\"<landmark>\"]),\n\t        model=model_raw,\n\t        tokenizer=tokenizer_raw,\n\t    )\n\t    state_dict_tuned = model_tuned.state_dict()\n\t    state_dict_raw = model_raw.state_dict()\n\t    with open(os.path.join(path_diff, \"checksum_psum.txt\"), \"w\") as f:\n\t        f.write(str(sum(state_dict_tuned[key].sum().item() for key in state_dict_tuned)))\n\t    for key in tqdm.tqdm(state_dict_tuned):\n", "        state_dict_tuned[key].add_(-state_dict_raw[key])\n\t    model_tuned.save_pretrained(path_diff)\n\t    tokenizer_tuned.save_pretrained(path_diff)\n\t@torch.inference_mode()\n\tdef recover(\n\t    path_raw,\n\t    path_diff,\n\t    path_tuned: Optional[str] = None,\n\t    device=\"cpu\",\n\t    test_inference=True,\n", "    check_integrity_naively=True,\n\t):\n\t    \"\"\"Recover the original weights from the released weight diff.\n\t    This function is given for you to run.\n\t    Things to do before running this:\n\t        1. Convert Meta's released weights into huggingface format. Follow this guide:\n\t            https://huggingface.co/docs/transformers/main/model_doc/llama\n\t        2. Make sure you cloned the released weight diff into your local machine. The weight diff is located at:\n\t            https://huggingface.co/tatsu-lab/alpaca-7b/tree/main\n\t        3. Run this function with the correct paths. E.g.,\n", "            python weight_diff.py recover --path_raw <path_to_step_1_dir> --path_diff <path_to_step_2_dir>\n\t    Additional notes:\n\t        - If things run too slowly, and you have an 80G GPU lying around, let GPU go brrr by setting `--device \"cuda\"`.\n\t        - If you want to save the recovered weights, set `--path_tuned <your_path_tuned>`.\n\t            Next time you can load the recovered weights directly from `<your_path_tuned>`.\n\t    \"\"\"\n\t    model_raw: transformers.PreTrainedModel = transformers.AutoModelForCausalLM.from_pretrained(\n\t        path_raw,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n", "        low_cpu_mem_usage=True,\n\t    )\n\t    model_recovered: transformers.PreTrainedModel = llama_mem.LlamaForCausalLM.from_pretrained(\n\t        path_diff,\n\t        device_map={\"\": torch.device(device)},\n\t        torch_dtype=torch.float32,\n\t        low_cpu_mem_usage=True,\n\t    )\n\t    tokenizer_raw: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_raw\n", "    )\n\t    smart_tokenizer_and_embedding_resize(\n\t        special_tokens_dict=dict(pad_token=\"[PAD]\", additional_special_tokens=[\"<landmark>\"]),\n\t        model=model_raw,\n\t        tokenizer=tokenizer_raw,\n\t    )\n\t    tokenizer_recovered: transformers.PreTrainedTokenizer = transformers.AutoTokenizer.from_pretrained(\n\t        path_diff\n\t    )\n\t    state_dict_recovered = model_recovered.state_dict()\n", "    state_dict_raw = model_raw.state_dict()\n\t    for key in tqdm.tqdm(state_dict_recovered):\n\t        state_dict_recovered[key].add_(state_dict_raw[key])\n\t    if check_integrity_naively:\n\t        # This is not a rigorous, cryptographically strong integrity check :)\n\t        allsum = sum(state_dict_recovered[key].sum() for key in state_dict_recovered)\n\t        if os.path.exists(os.path.join(path_diff, \"checksum_psum.txt\")):\n\t            with open(os.path.join(path_diff, \"checksum_psum.txt\")) as f:\n\t                expected_sum = float(f.read())\n\t        else:\n", "            expected_sum = 49798.7656 # backward compatibility with the first released weights\n\t        assert torch.allclose(\n\t            allsum, torch.full_like(allsum, fill_value=expected_sum), atol=1e-2, rtol=0\n\t        ), \"Naive integrity check failed. This could imply that some of the checkpoint files are corrupted.\"\n\t    if path_tuned is not None:\n\t        model_recovered.save_pretrained(path_tuned)\n\t        tokenizer_recovered.save_pretrained(path_tuned)\n\t    return model_recovered, tokenizer_recovered\n\tdef main(task, **kwargs):\n\t    globals()[task](**kwargs)\n", "if __name__ == \"__main__\":\n\t    fire.Fire(main)\n"]}
{"filename": "llama/llama_mem.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 EleutherAI and the HuggingFace Inc. team. All rights reserved.\n\t#\n\t# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX\n\t# and OPT implementations in this library. It has been modified from its\n\t# original forms to accommodate minor architectural differences compared\n\t# to GPT-NeoX and OPT used by the Meta AI team that trained the model.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n", "# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\" PyTorch LLaMA model.\"\"\"\n", "import math\n\tfrom typing import List, Optional, Tuple, Union\n\timport torch\n\timport torch.utils.checkpoint\n\tfrom torch import nn\n\tfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\tfrom transformers.activations import ACT2FN\n\tfrom transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast, SequenceClassifierOutputWithPast\n\tfrom transformers.modeling_utils import PreTrainedModel\n\tfrom transformers.utils import add_start_docstrings, add_start_docstrings_to_model_forward, logging, replace_return_docstrings\n", "from llama_landmark_config import LlamaLandmarkConfig\n\tfrom ltriton.flash_landmark_attention import fused_landmark_attention\n\tlogger = logging.get_logger(__name__)\n\t_CONFIG_FOR_DOC = \"LlamaLandmarkConfig\"\n\t# Copied from transformers.models.bart.modeling_bart._make_causal_mask\n\tdef _make_causal_mask(\n\t    input_ids_shape: torch.Size, dtype: torch.dtype, device: torch.device, past_key_values_length: int = 0\n\t):\n\t    \"\"\"\n\t    Make causal mask used for bi-directional self-attention.\n", "    \"\"\"\n\t    bsz, tgt_len = input_ids_shape\n\t    mask = torch.full((tgt_len, tgt_len), torch.tensor(torch.finfo(dtype).min, device=device), device=device)\n\t    mask_cond = torch.arange(mask.size(-1), device=device)\n\t    mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)\n\t    mask = mask.to(dtype)\n\t    if past_key_values_length > 0:\n\t        mask = torch.cat([torch.zeros(tgt_len, past_key_values_length, dtype=dtype, device=device), mask], dim=-1)\n\t    return mask[None, None, :, :].expand(bsz, 1, tgt_len, tgt_len + past_key_values_length)\n\t# Copied from transformers.models.bart.modeling_bart._expand_mask\n", "def _expand_mask(mask: torch.Tensor, dtype: torch.dtype, tgt_len: Optional[int] = None):\n\t    \"\"\"\n\t    Expands attention_mask from `[bsz, seq_len]` to `[bsz, 1, tgt_seq_len, src_seq_len]`.\n\t    \"\"\"\n\t    bsz, src_len = mask.size()\n\t    tgt_len = tgt_len if tgt_len is not None else src_len\n\t    expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)\n\t    inverted_mask = 1.0 - expanded_mask\n\t    return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)\n\tclass LlamaRMSNorm(nn.Module):\n", "    def __init__(self, hidden_size, eps=1e-6):\n\t        \"\"\"\n\t        LlamaRMSNorm is equivalent to T5LayerNorm\n\t        \"\"\"\n\t        super().__init__()\n\t        self.weight = nn.Parameter(torch.ones(hidden_size))\n\t        self.variance_epsilon = eps\n\t    def forward(self, hidden_states):\n\t        variance = hidden_states.to(torch.float32).pow(2).mean(-1, keepdim=True)\n\t        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)\n", "        # convert into half-precision if necessary\n\t        if self.weight.dtype in [torch.float16, torch.bfloat16]:\n\t            hidden_states = hidden_states.to(self.weight.dtype)\n\t        return self.weight * hidden_states\n\tclass LlamaRotaryEmbedding(torch.nn.Module):\n\t    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None):\n\t        super().__init__()\n\t        inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2).float().to(device) / dim))\n\t        self.register_buffer(\"inv_freq\", inv_freq)\n\t        # Build here to make `torch.jit.trace` work.\n", "        self.max_seq_len_cached = max_position_embeddings\n\t        t = torch.arange(self.max_seq_len_cached, device=self.inv_freq.device, dtype=self.inv_freq.dtype)\n\t        freqs = torch.einsum(\"i,j->ij\", t, self.inv_freq)\n\t        # Different from paper, but it uses a different permutation in order to obtain the same calculation\n\t        emb = torch.cat((freqs, freqs), dim=-1)\n\t        self.register_buffer(\"cos_cached\", emb.cos()[None, None, :, :], persistent=False)\n\t        self.register_buffer(\"sin_cached\", emb.sin()[None, None, :, :], persistent=False)\n\t    def forward(self, x, seq_len=None):\n\t        # x: [bs, num_attention_heads, seq_len, head_size]\n\t        # This `if` block is unlikely to be run after we build sin/cos in `__init__`. Keep the logic here just in case.\n", "        if seq_len > self.max_seq_len_cached:\n\t            self.max_seq_len_cached = seq_len\n\t            t = torch.arange(self.max_seq_len_cached, device=x.device, dtype=self.inv_freq.dtype)\n\t            freqs = torch.einsum(\"i,j->ij\", t, self.inv_freq)\n\t            # Different from paper, but it uses a different permutation in order to obtain the same calculation\n\t            emb = torch.cat((freqs, freqs), dim=-1).to(x.device)\n\t            self.register_buffer(\"cos_cached\", emb.cos()[None, None, :, :], persistent=False)\n\t            self.register_buffer(\"sin_cached\", emb.sin()[None, None, :, :], persistent=False)\n\t        return (\n\t            self.cos_cached[:, :, :seq_len, ...].to(dtype=x.dtype),\n", "            self.sin_cached[:, :, :seq_len, ...].to(dtype=x.dtype),\n\t        )\n\tdef rotate_half(x):\n\t    \"\"\"Rotates half the hidden dims of the input.\"\"\"\n\t    x1 = x[..., : x.shape[-1] // 2]\n\t    x2 = x[..., x.shape[-1] // 2 :]\n\t    return torch.cat((-x2, x1), dim=-1)\n\tdef apply_rotary_pos_emb(q, k, cos, sin, position_ids):\n\t    # The first two dimensions of cos and sin are always 1, so we can `squeeze` them.\n\t    cos = cos.squeeze(1).squeeze(0)  # [seq_len, dim]\n", "    sin = sin.squeeze(1).squeeze(0)  # [seq_len, dim]\n\t    if position_ids.ndim == 2:\n\t        cos = cos[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]\n\t        sin = sin[position_ids].unsqueeze(1)  # [bs, 1, seq_len, dim]\n\t    else:\n\t        cos = cos[position_ids]\n\t        sin = sin[position_ids]\n\t    if q is None:\n\t        q_embed = None\n\t    else:\n", "        q_embed = (q * cos) + (rotate_half(q) * sin)\n\t    k_embed = (k * cos) + (rotate_half(k) * sin)\n\t    return q_embed, k_embed\n\tclass LlamaMLP(nn.Module):\n\t    def __init__(\n\t        self,\n\t        hidden_size: int,\n\t        intermediate_size: int,\n\t        hidden_act: str,\n\t    ):\n", "        super().__init__()\n\t        self.gate_proj = nn.Linear(hidden_size, intermediate_size, bias=False)\n\t        self.down_proj = nn.Linear(intermediate_size, hidden_size, bias=False)\n\t        self.up_proj = nn.Linear(hidden_size, intermediate_size, bias=False)\n\t        self.act_fn = ACT2FN[hidden_act]\n\t    def forward(self, x):\n\t        return self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))\n\tclass LandmarkGroupedSoftmaxFunction(torch.autograd.Function):\n\t    # Note that forward, setup_context, and backward are @staticmethods\n\t    @staticmethod\n", "    def forward(ctx, x, dim, mem_cnt, resp_mem_idx):\n\t        new_shape = list(x.shape)\n\t        new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t        max_by_group = x.new_zeros((*new_shape,))\n\t        max_by_group.scatter_reduce_(src=x, index=resp_mem_idx, dim=dim, reduce=\"amax\", include_self=False)\n\t        maxes = torch.gather(max_by_group, dim, resp_mem_idx)\n\t        #x_exp = torch.exp(x - torch.where(torch.isinf(maxes), 0, maxes))\n\t        x_exp = torch.exp((x - maxes).to(torch.float32))\n\t        cumsum_by_group = torch.zeros_like(max_by_group, dtype=x_exp.dtype)\n\t        cumsum_by_group.scatter_add_(dim, resp_mem_idx, x_exp, )\n", "        denom = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t        #probs = torch.where(denom < 0.5, 0, x_exp / denom)\n\t        probs = x_exp / denom\n\t        ctx.mem_cnt = mem_cnt\n\t        ctx.dim = dim\n\t        ctx.save_for_backward(resp_mem_idx, probs)\n\t        return probs\n\t    @staticmethod\n\t    def backward(ctx, grad_probs):\n\t        mem_cnt = ctx.mem_cnt\n", "        dim = ctx.dim\n\t        resp_mem_idx, probs = ctx.saved_tensors\n\t        grad_x = grad_dim = grad_mem_cnt = grad_resp_mem_idx = None\n\t        if ctx.needs_input_grad[0] or ctx.needs_input_grad[4]:\n\t            grad_pair = grad_probs * probs\n\t            new_shape = list(probs.shape)\n\t            new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t            cumsum_by_group = grad_pair.new_zeros((*new_shape,))\n\t            cumsum_by_group.scatter_add_(dim, resp_mem_idx, grad_pair)\n\t        if ctx.needs_input_grad[0]:\n", "            grad_sum = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t            grad_x = grad_pair - probs * grad_sum\n\t        assert not ctx.needs_input_grad[1]\n\t        assert not ctx.needs_input_grad[2]\n\t        assert not ctx.needs_input_grad[3]\n\t        return grad_x, grad_dim, grad_mem_cnt, grad_resp_mem_idx\n\tdef landmark_grouped_softmax(x, dim, is_mem, last_section_mask):\n\t    last_and_rest_mask = last_section_mask # | mask\n\t    full_access_mask =  is_mem | last_and_rest_mask\n\t    max_mem_cnt = 64\n", "    mem_group_idx = torch.cumsum(is_mem, dim=dim)\n\t    mem_bucket_id = max_mem_cnt - 1\n\t    resp_mem_idx = torch.where(last_and_rest_mask, \n\t                                max_mem_cnt - 1,\n\t                                torch.where(is_mem, mem_bucket_id, mem_group_idx))\n\t    probs = LandmarkGroupedSoftmaxFunction.apply(x, dim, max_mem_cnt, resp_mem_idx)\n\t    new_shape = list(x.shape)\n\t    new_shape[dim] = max_mem_cnt\n\t    group_prob = probs.new_zeros((*new_shape, ))\n\t    group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), probs)\n", "    probs = probs.mul(torch.where(full_access_mask, last_section_mask, torch.gather(group_prob, dim, resp_mem_idx)))\n\t    return probs\n\tclass LlamaAttention(nn.Module):\n\t    \"\"\"Multi-headed attention from 'Attention Is All You Need' paper\"\"\"\n\t    def __init__(self, config: LlamaLandmarkConfig):\n\t        super().__init__()\n\t        self.config = config\n\t        self.hidden_size = config.hidden_size\n\t        self.num_heads = config.num_attention_heads\n\t        self.head_dim = self.hidden_size // self.num_heads\n", "        self.max_position_embeddings = config.max_position_embeddings\n\t        if (self.head_dim * self.num_heads) != self.hidden_size:\n\t            raise ValueError(\n\t                f\"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}\"\n\t                f\" and `num_heads`: {self.num_heads}).\"\n\t            )\n\t        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.k_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.v_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=False)\n\t        self.o_proj = nn.Linear(self.num_heads * self.head_dim, self.hidden_size, bias=False)\n", "        self.rotary_emb = LlamaRotaryEmbedding(self.head_dim, max_position_embeddings=self.max_position_embeddings)\n\t    def _shape(self, tensor: torch.Tensor, seq_len: int, bsz: int):\n\t        return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_value: Optional[Tuple[torch.Tensor]] = None,\n\t        output_attentions: bool = False,\n", "        use_cache: bool = False,\n\t        is_mem: Optional[torch.Tensor] = None,\n\t        last_section_mask: Optional[torch.Tensor] = None,\n\t        offload_cache_to_cpu: bool = False,\n\t        use_flash: bool = False,\n\t        cache_top_k: Optional[int] = None,\n\t        mem_freq: Optional[int] = None\n\t    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n\t        bsz, q_len, _ = hidden_states.size()\n\t        query_states = self.q_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n", "        key_states = self.k_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        value_states = self.v_proj(hidden_states).view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        kv_seq_len = key_states.shape[-2]\n\t        if past_key_value is not None:\n\t            kv_seq_len += past_key_value[0].shape[-2]\n\t            if len(past_key_value) > 2:\n\t                kv_seq_len += past_key_value[3].shape[2] * past_key_value[3].shape[3]\n\t        cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)\n\t        key_states_before_pos = key_states\n\t        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)\n", "        # [bsz, nh, t, hd]\n\t        attn_prefix = None\n\t        if past_key_value is not None:\n\t            # reuse k, v, self_attention\n\t            if mem_freq is None:\n\t                cache_len = past_key_value[0].shape[2]\n\t                if is_mem is not None:\n\t                    if use_flash:\n\t                        is_mem = torch.cat((is_mem.new_zeros((1, cache_len)), is_mem), dim=-1)\n\t                    else:\n", "                        is_mem = torch.cat((is_mem.new_zeros((1, 1, q_len, cache_len)), is_mem), dim=-1)\n\t                        last_section_mask = torch.cat((last_section_mask.new_ones((1, 1, q_len, cache_len)), last_section_mask), dim=-1)\n\t                past_key_states = torch.cat([past_key_value[0], key_states], dim=2)\n\t                past_value_states = torch.cat([past_key_value[1], value_states], dim=2)\n\t                key_states = past_key_states[:, :, -(q_len + cache_len):]\n\t                value_states = past_value_states[:, :, -(q_len + cache_len):]\n\t                expected_att_size = (bsz, self.num_heads, q_len, cache_len + q_len)\n\t            else:\n\t                orig_value_states = value_states\n\t                incomplete_len = past_key_value[0].shape[2] % (mem_freq + 1)\n", "                full_len = past_key_value[0].shape[2] - incomplete_len\n\t                past_key_mem, past_key_incomplete = torch.split(past_key_value[0], (full_len, incomplete_len), dim=2)\n\t                past_value_mem, past_value_incomplete = torch.split(past_key_value[1], (full_len, incomplete_len), dim=2)\n\t                if offload_cache_to_cpu:\n\t                    past_key_value = (past_key_incomplete, past_value_incomplete, *past_key_value[2:])\n\t                if incomplete_len > 0:\n\t                    assert q_len + incomplete_len <= (mem_freq + 1)\n\t                if use_flash:\n\t                    is_mem = torch.cat((is_mem.new_zeros((1, incomplete_len)), is_mem), dim=-1)\n\t                else:\n", "                    is_mem = torch.cat((is_mem.new_zeros((1, 1, q_len, incomplete_len)), is_mem), dim=-1)\n\t                    last_section_mask = torch.cat((last_section_mask.new_ones((1, 1, q_len, incomplete_len)), last_section_mask), dim=-1)\n\t                if len(past_key_value) > 2:\n\t                    full_len += past_key_value[3].shape[2] * past_key_value[3].shape[3]\n\t                past_key_incomplete_pos = torch.arange(full_len, full_len + incomplete_len, dtype=torch.long, device=position_ids.device).unsqueeze(0)\n\t                _, past_key_incomplete = apply_rotary_pos_emb(None, past_key_incomplete, cos, sin, past_key_incomplete_pos)\n\t                key_states = torch.cat((past_key_incomplete, key_states), dim=2)\n\t                value_states = torch.cat((past_value_incomplete, value_states), dim=2)\n\t                past_key_mem = past_key_mem.view(bsz, self.num_heads, -1, mem_freq + 1, self.head_dim)\n\t                past_value_mem = past_value_mem.view(bsz, self.num_heads, -1, mem_freq + 1, self.head_dim)\n", "                if len(past_key_value) > 2:\n\t                    mem_key_nopos = torch.cat((\n\t                        past_key_value[2], \n\t                        past_key_mem.select(dim=3, index=mem_freq)), dim=2)\n\t                    past_key_mem_offload = past_key_value[3]\n\t                    past_key_mem = torch.cat((\n\t                        past_key_mem_offload, \n\t                        past_key_mem.to(past_key_mem_offload.device)), dim=2)\n\t                    past_value_mem = torch.cat((past_key_value[4], past_value_mem.to(past_key_mem_offload.device)), dim=2)\n\t                else:\n", "                    mem_key_nopos = past_key_mem.select(dim=3, index=mem_freq)    \n\t                num_mems = past_key_mem.shape[2]\n\t                top_k = min(cache_top_k, num_mems)\n\t                prefix_len = full_len - (top_k + 1) * (mem_freq + 1)\n\t                mem_indices = torch.cat(\n\t                    (position_ids.new_zeros((max(0, num_mems - top_k), )),\n\t                    torch.arange(1, top_k + 1, device=query_states.device, dtype=position_ids.dtype)), dim=0)\n\t                mem_pos = (mem_indices * (mem_freq + 1) + mem_freq).unsqueeze(0).expand(bsz, -1) + prefix_len\n\t                _, mem_key = apply_rotary_pos_emb(None, mem_key_nopos, cos, sin, mem_pos)\n\t                mem_attn_weights = torch.matmul(query_states, mem_key.transpose(2, 3)) / math.sqrt(self.head_dim)\n", "                if offload_cache_to_cpu:\n\t                    aggregate = \"max_over_tokens\"\n\t                else:\n\t                    aggregate = None\n\t                if aggregate == \"max_over_tokens\":\n\t                    token_retrievers = 1\n\t                    head_retrievers = self.num_heads\n\t                    mem_attn_weights = torch.nn.functional.softmax(mem_attn_weights, dim=-1,dtype=torch.float32).to(query_states.dtype)\n\t                    mem_attn_weights = mem_attn_weights.amax(dim=2, keepdim=True)\n\t                elif aggregate is None:\n", "                    token_retrievers = q_len\n\t                    head_retrievers = self.num_heads\n\t                else:\n\t                    raise NotImplementedError()\n\t                mem_selected_idx = mem_attn_weights.topk(dim=-1,k=top_k)[1].sort(dim=-1)[0].view(bsz, head_retrievers, token_retrievers, top_k)\n\t                selected_indices = torch.arange(0, top_k * (mem_freq + 1), device=query_states.device, dtype=position_ids.dtype)\n\t                selected_indices = torch.where(mem_selected_idx >= num_mems - top_k, mem_freq + 1, 0).unsqueeze(-1) + selected_indices.view(1, 1, 1, top_k, mem_freq + 1)\n\t                selected_indices = selected_indices.view(bsz, head_retrievers, token_retrievers, -1) + prefix_len\n\t                mem_selected_idx = mem_selected_idx.to(past_key_mem.device)\n\t                mem_selected_idx = mem_selected_idx.view(bsz, self.num_heads, token_retrievers, top_k, 1, 1).expand(bsz, self.num_heads, token_retrievers, top_k, mem_freq + 1, self.head_dim) \n", "                selected_keys = past_key_mem.unsqueeze(2).expand(bsz, self.num_heads, token_retrievers, -1, mem_freq + 1, self.head_dim)\n\t                selected_keys = selected_keys.take_along_dim(mem_selected_idx, dim=3).to(query_states.device)\n\t                selected_values = past_value_mem.unsqueeze(2).expand(bsz, self.num_heads, token_retrievers, -1, mem_freq + 1, self.head_dim).take_along_dim(mem_selected_idx, dim=3).to(query_states.device)\n\t                if aggregate == \"max_over_tokens\":\n\t                    selected_indices = selected_indices.squeeze(2)\n\t                    selected_keys = selected_keys.view(bsz, self.num_heads, -1, self.head_dim)\n\t                    selected_keys = apply_rotary_pos_emb(None, selected_keys, cos, sin, selected_indices)[1] \n\t                    key_states = torch.cat((selected_keys, key_states), dim=2)\n\t                    value_states = torch.cat((selected_values.view(bsz, self.num_heads, -1, self.head_dim), value_states), dim=2)\n\t                    expected_att_size = (bsz, self.num_heads, q_len, key_states.shape[2])\n", "                else:\n\t                    selected_indices = selected_indices.expand(bsz, self.num_heads, q_len, -1)\n\t                    selected_keys = selected_keys.view(bsz, self.num_heads, token_retrievers, -1, self.head_dim).expand(bsz, self.num_heads, q_len, -1, self.head_dim)\n\t                    selected_keys = apply_rotary_pos_emb(None, selected_keys, cos, sin, selected_indices)[1]\n\t                    selected_values = selected_values.view(bsz, self.num_heads, token_retrievers, -1, self.head_dim).expand(bsz, self.num_heads, q_len, -1, self.head_dim)\n\t                    attn_prefix = torch.matmul(query_states.unsqueeze(3), selected_keys.transpose(3, 4)).squeeze(3) / math.sqrt(self.head_dim)\n\t                    expected_att_size = (bsz, self.num_heads, q_len, q_len + incomplete_len)\n\t                is_mem_prefix = torch.cat((is_mem.new_zeros((mem_freq, )), is_mem.new_ones((1, )))).unsqueeze(0).repeat((top_k, 1))\n\t                if use_flash:\n\t                    is_mem_prefix = is_mem_prefix.view(1, -1)\n", "                else:\n\t                    is_mem_prefix = is_mem_prefix.view(1, 1, 1, -1).expand(1, 1, q_len, -1)\n\t                    last_section_mask = torch.cat((last_section_mask.new_zeros((1, 1, q_len, top_k * (mem_freq + 1))), last_section_mask), dim=-1)\n\t                is_mem = torch.cat((is_mem_prefix, is_mem), dim=-1)\n\t                past_key_states = torch.cat([past_key_value[0], key_states_before_pos], dim=2)\n\t                past_value_states = torch.cat([past_key_value[1], orig_value_states], dim=2)\n\t                if offload_cache_to_cpu:\n\t                    past_key_value = (past_key_states, past_value_states, mem_key_nopos, past_key_mem.to(\"cpu\"), past_value_mem.to(\"cpu\"), *past_key_value[5:]) if use_cache else None\n\t                else:\n\t                    past_key_value = (past_key_states, past_value_states) if use_cache else None\n", "        else:\n\t            if mem_freq is None:\n\t                past_key_states = key_states\n\t            else:\n\t                past_key_states = key_states_before_pos\n\t            past_value_states = value_states\n\t            expected_att_size = (bsz, self.num_heads, q_len, kv_seq_len)\n\t            past_key_value = (past_key_states, past_value_states) if use_cache else None\n\t        if use_flash:\n\t            assert attn_prefix is None\n", "            assert not output_attentions\n\t            assert mem_freq is not None\n\t            attn_output = fused_landmark_attention(query_states, key_states, value_states, is_mem, block_size=mem_freq+1)\n\t            attn_weights = None\n\t        else:\n\t            attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)\n\t            if attn_weights.size() != expected_att_size:\n\t                raise ValueError(\n\t                    f\"Attention weights should be of size {(bsz, self.num_heads, q_len, kv_seq_len)}, but is\"\n\t                    f\" {attn_weights.size()}\"\n", "                )\n\t            if attention_mask is not None:\n\t                if attention_mask.size() != (bsz, 1, q_len, kv_seq_len):\n\t                    raise ValueError(\n\t                        f\"Attention mask should be of size {(bsz, 1, q_len, kv_seq_len)}, but is {attention_mask.size()}\"\n\t                    )\n\t                attn_weights = attn_weights + attention_mask[...,-attn_weights.shape[-1]:]\n\t                attn_weights = torch.max(attn_weights, torch.tensor(torch.finfo(attn_weights.dtype).min))\n\t            if attn_prefix is not None:\n\t                attn_weights = torch.cat((attn_prefix, attn_weights), dim=-1)\n", "            # upcast attention to fp32\n\t            if is_mem is None:\n\t                raise ValueError(\"Don't use this without landmarks\")\n\t                attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)\n\t            else:\n\t                attn_weights = landmark_grouped_softmax(attn_weights, dim=-1, is_mem=is_mem.expand(-1, self.num_heads, -1, -1), last_section_mask=last_section_mask).to(query_states.dtype)\n\t            if attn_prefix is not None:\n\t                attn_prefix, attn_weights = torch.split(attn_weights, (attn_prefix.shape[-1], attn_weights.shape[-1] - attn_prefix.shape[-1]), dim=-1)\n\t            attn_output = torch.matmul(attn_weights, value_states)\n\t            if attn_prefix is not None:\n", "                attn_output += torch.matmul(attn_prefix.unsqueeze(3), selected_values).squeeze(3)\n\t            if not output_attentions:\n\t                attn_weights = None\n\t        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):\n\t            raise ValueError(\n\t                f\"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is\"\n\t                f\" {attn_output.size()}\"\n\t            )\n\t        attn_output = attn_output.transpose(1, 2)\n\t        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)\n", "        attn_output = self.o_proj(attn_output)\n\t        return attn_output, attn_weights, past_key_value\n\tclass LlamaDecoderLayer(nn.Module):\n\t    def __init__(self, config: LlamaLandmarkConfig):\n\t        super().__init__()\n\t        self.hidden_size = config.hidden_size\n\t        self.self_attn = LlamaAttention(config=config)\n\t        self.mlp = LlamaMLP(\n\t            hidden_size=self.hidden_size,\n\t            intermediate_size=config.intermediate_size,\n", "            hidden_act=config.hidden_act,\n\t        )\n\t        self.input_layernorm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\t        self.post_attention_layernorm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_value: Optional[Tuple[torch.Tensor]] = None,\n", "        output_attentions: Optional[bool] = False,\n\t        use_cache: Optional[bool] = False,\n\t        is_mem: Optional[torch.Tensor] = None,\n\t        last_section_mask: Optional[torch.Tensor] = None,\n\t        offload_cache_to_cpu: bool = False,\n\t        use_flash: bool = False,\n\t        cache_top_k: Optional[int] = None,\n\t        mem_freq: Optional[int] = None\n\t    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:\n\t        \"\"\"\n", "        Args:\n\t            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`\n\t            attention_mask (`torch.FloatTensor`, *optional*): attention mask of size\n\t                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.\n\t            output_attentions (`bool`, *optional*):\n\t                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n\t                returned tensors for more detail.\n\t            use_cache (`bool`, *optional*):\n\t                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding\n\t                (see `past_key_values`).\n", "            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states\n\t        \"\"\"\n\t        residual = hidden_states\n\t        hidden_states = self.input_layernorm(hidden_states)\n\t        # Self Attention\n\t        hidden_states, self_attn_weights, present_key_value = self.self_attn(\n\t            hidden_states=hidden_states,\n\t            attention_mask=attention_mask,\n\t            position_ids=position_ids,\n\t            past_key_value=past_key_value,\n", "            output_attentions=output_attentions,\n\t            use_cache=use_cache,\n\t            is_mem=is_mem,\n\t            last_section_mask=last_section_mask,\n\t            offload_cache_to_cpu=offload_cache_to_cpu,\n\t            use_flash=use_flash,\n\t            cache_top_k=cache_top_k,\n\t            mem_freq=mem_freq\n\t        )\n\t        hidden_states = residual + hidden_states\n", "        # Fully Connected\n\t        residual = hidden_states\n\t        hidden_states = self.post_attention_layernorm(hidden_states)\n\t        hidden_states = self.mlp(hidden_states)\n\t        hidden_states = residual + hidden_states\n\t        outputs = (hidden_states,)\n\t        if output_attentions:\n\t            outputs += (self_attn_weights,)\n\t        if use_cache:\n\t            outputs += (present_key_value,)\n", "        return outputs\n\tLLAMA_START_DOCSTRING = r\"\"\"\n\t    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n\t    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n\t    etc.)\n\t    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n\t    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n\t    and behavior.\n\t    Parameters:\n\t        config ([`LlamaLandmarkConfig`]):\n", "            Model configuration class with all the parameters of the model. Initializing with a config file does not\n\t            load the weights associated with the model, only the configuration. Check out the\n\t            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\t\"\"\"\n\t@add_start_docstrings(\n\t    \"The bare LLaMA Model outputting raw hidden-states without any specific head on top.\",\n\t    LLAMA_START_DOCSTRING,\n\t)\n\tclass LlamaPreTrainedModel(PreTrainedModel):\n\t    config_class = LlamaLandmarkConfig\n", "    base_model_prefix = \"model\"\n\t    supports_gradient_checkpointing = True\n\t    _no_split_modules = [\"LlamaDecoderLayer\"]\n\t    _keys_to_ignore_on_load_unexpected = [r\"decoder\\.version\"]\n\t    def _init_weights(self, module):\n\t        std = self.config.initializer_range\n\t        if isinstance(module, nn.Linear):\n\t            module.weight.data.normal_(mean=0.0, std=std)\n\t            if module.bias is not None:\n\t                module.bias.data.zero_()\n", "        elif isinstance(module, nn.Embedding):\n\t            module.weight.data.normal_(mean=0.0, std=std)\n\t            if module.padding_idx is not None:\n\t                module.weight.data[module.padding_idx].zero_()\n\t    def _set_gradient_checkpointing(self, module, value=False):\n\t        if isinstance(module, LlamaModel):\n\t            module.gradient_checkpointing = value\n\tLLAMA_INPUTS_DOCSTRING = r\"\"\"\n\t    Args:\n\t        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n", "            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide\n\t            it.\n\t            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n\t            [`PreTrainedTokenizer.__call__`] for details.\n\t            [What are input IDs?](../glossary#input-ids)\n\t        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n\t            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\t            - 1 for tokens that are **not masked**,\n\t            - 0 for tokens that are **masked**.\n\t            [What are attention masks?](../glossary#attention-mask)\n", "            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n\t            [`PreTrainedTokenizer.__call__`] for details.\n\t            If `past_key_values` is used, optionally only the last `decoder_input_ids` have to be input (see\n\t            `past_key_values`).\n\t            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]\n\t            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more\n\t            information on the default strategy.\n\t            - 1 indicates the head is **not masked**,\n\t            - 0 indicates the head is **masked**.\n\t        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n", "            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n\t            config.n_positions - 1]`.\n\t            [What are position IDs?](../glossary#position-ids)\n\t        past_key_values (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):\n\t            Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of shape\n\t            `(batch_size, num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of shape\n\t            `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.\n\t            Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention\n\t            blocks) that can be used (see `past_key_values` input) to speed up sequential decoding.\n\t            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n", "            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n\t            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n\t        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n\t            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n\t            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n\t            model's internal embedding lookup matrix.\n\t        use_cache (`bool`, *optional*):\n\t            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n\t            `past_key_values`).\n\t        output_attentions (`bool`, *optional*):\n", "            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n\t            tensors for more detail.\n\t        output_hidden_states (`bool`, *optional*):\n\t            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n\t            more detail.\n\t        return_dict (`bool`, *optional*):\n\t            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\t\"\"\"\n\t@add_start_docstrings(\n\t    \"The bare LLaMA Model outputting raw hidden-states without any specific head on top.\",\n", "    LLAMA_START_DOCSTRING,\n\t)\n\tclass LlamaModel(LlamaPreTrainedModel):\n\t    \"\"\"\n\t    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`LlamaDecoderLayer`]\n\t    Args:\n\t        config: LlamaLandmarkConfig\n\t    \"\"\"\n\t    def __init__(self, config: LlamaLandmarkConfig):\n\t        super().__init__(config)\n", "        self.padding_idx = config.pad_token_id\n\t        self.vocab_size = config.vocab_size\n\t        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)\n\t        self.layers = nn.ModuleList([LlamaDecoderLayer(config) for _ in range(config.num_hidden_layers)])\n\t        self.norm = LlamaRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\t        self.gradient_checkpointing = False\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.embed_tokens\n", "    def set_input_embeddings(self, value):\n\t        self.embed_tokens = value\n\t    # Copied from transformers.models.bart.modeling_bart.BartDecoder._prepare_decoder_attention_mask\n\t    def _prepare_decoder_attention_mask(self, attention_mask, input_shape, inputs_embeds, past_key_values_length):\n\t        # create causal mask\n\t        # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]\n\t        combined_attention_mask = None\n\t        if input_shape[-1] > 1:\n\t            combined_attention_mask = _make_causal_mask(\n\t                input_shape,\n", "                inputs_embeds.dtype,\n\t                device=inputs_embeds.device,\n\t                past_key_values_length=past_key_values_length,\n\t            )\n\t        if attention_mask is not None:\n\t            # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]\n\t            expanded_attn_mask = _expand_mask(attention_mask, inputs_embeds.dtype, tgt_len=input_shape[-1]).to(\n\t                inputs_embeds.device\n\t            )\n\t            combined_attention_mask = (\n", "                expanded_attn_mask if combined_attention_mask is None else expanded_attn_mask + combined_attention_mask\n\t            )\n\t        return combined_attention_mask\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    def forward(\n\t        self,\n\t        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n", "        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        use_cache: Optional[bool] = None,\n\t        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n\t        offload_cache_to_cpu: Optional[bool] = None,\n\t        use_flash: Optional[bool] = None,\n\t        cache_top_k: Optional[int] = None,\n\t        mem_freq: Optional[int] = None\n\t    ) -> Union[Tuple, BaseModelOutputWithPast]:\n", "        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n\t            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n\t        )\n\t        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        # retrieve input_ids and inputs_embeds\n\t        is_mem = None\n\t        if input_ids is not None and inputs_embeds is not None:\n\t            raise ValueError(\"You cannot specify both decoder_input_ids and decoder_inputs_embeds at the same time\")\n", "        elif input_ids is not None:\n\t            batch_size, seq_length = input_ids.shape\n\t            if self.config.mem_id is not None:\n\t                with torch.no_grad():\n\t                    is_mem = input_ids == self.config.mem_id\n\t        elif inputs_embeds is not None:\n\t            batch_size, seq_length, _ = inputs_embeds.shape\n\t            if self.config.mem_id is not None:\n\t                raise NotImplementedError\n\t        else:\n", "            raise ValueError(\"You have to specify either decoder_input_ids or decoder_inputs_embeds\")\n\t        seq_length_with_past = seq_length\n\t        past_key_values_length = 0\n\t        if past_key_values is not None:\n\t            if is_mem is not None:\n\t                pass\n\t                #raise NotImplementedError\n\t            past_key_values_length = past_key_values[0][0].shape[2]\n\t            if len(past_key_values[0]) > 2:\n\t                past_key_values_length += past_key_values[0][3].shape[2] * past_key_values[0][3].shape[3]\n", "            seq_length_with_past = seq_length_with_past + past_key_values_length\n\t        if position_ids is None:\n\t            device = input_ids.device if input_ids is not None else inputs_embeds.device\n\t            position_ids = torch.arange(\n\t                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device\n\t            )\n\t            position_ids = position_ids.unsqueeze(0).view(-1, seq_length)\n\t        else:\n\t            position_ids = position_ids.view(-1, seq_length).long()\n\t        if inputs_embeds is None:\n", "            inputs_embeds = self.embed_tokens(input_ids)\n\t        # embed positions\n\t        if attention_mask is None:\n\t            attention_mask = torch.ones(\n\t                (batch_size, seq_length_with_past), dtype=torch.bool, device=inputs_embeds.device\n\t            )\n\t        attention_mask = self._prepare_decoder_attention_mask(\n\t            attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length\n\t        )\n\t        last_section_mask = None\n", "        if is_mem is not None and not use_flash:\n\t            is_mem = is_mem.unsqueeze(1).unsqueeze(2)\n\t            current_len = input_ids.shape[1]\n\t            mem_ids = torch.where(attention_mask[..., -current_len:] < -1, 0, torch.cumsum(is_mem, -1) - is_mem.int())\n\t            last_section_mask = torch.amax(mem_ids, -1, keepdim=True) == mem_ids\n\t            attention_mask[..., -current_len:].masked_fill_(last_section_mask & is_mem, torch.tensor(torch.finfo(inputs_embeds.dtype).min, device=inputs_embeds.device))\n\t            last_section_mask.logical_and_(attention_mask[..., -current_len:] > -1)\n\t            is_mem = is_mem.logical_and(attention_mask[..., -current_len:] > -1)\n\t        hidden_states = inputs_embeds\n\t        if self.gradient_checkpointing and self.training:\n", "            if use_cache:\n\t                logger.warning_once(\n\t                    \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n\t                )\n\t                use_cache = False\n\t        # decoder layers\n\t        all_hidden_states = () if output_hidden_states else None\n\t        all_self_attns = () if output_attentions else None\n\t        next_decoder_cache = () if use_cache else None\n\t        for idx, decoder_layer in enumerate(self.layers):\n", "            if output_hidden_states:\n\t                all_hidden_states += (hidden_states,)\n\t            past_key_value = past_key_values[idx] if past_key_values is not None else None\n\t            if self.gradient_checkpointing and self.training:\n\t                def create_custom_forward(module):\n\t                    def custom_forward(*inputs):\n\t                        # None for past_key_value\n\t                        return module(*inputs, output_attentions, None)\n\t                    return custom_forward\n\t                layer_outputs = torch.utils.checkpoint.checkpoint(\n", "                    create_custom_forward(decoder_layer),\n\t                    hidden_states,\n\t                    attention_mask,\n\t                    position_ids,\n\t                    None,\n\t                    is_mem,\n\t                    last_section_mask,\n\t                    offload_cache_to_cpu,\n\t                    use_flash,\n\t                    cache_top_k,\n", "                    mem_freq\n\t                )\n\t            else:\n\t                layer_outputs = decoder_layer(\n\t                    hidden_states,\n\t                    attention_mask=attention_mask,\n\t                    position_ids=position_ids,\n\t                    past_key_value=past_key_value,\n\t                    output_attentions=output_attentions,\n\t                    use_cache=use_cache,\n", "                    is_mem=is_mem,\n\t                    last_section_mask=last_section_mask,\n\t                    offload_cache_to_cpu=offload_cache_to_cpu,\n\t                    use_flash=use_flash,\n\t                    cache_top_k=cache_top_k,\n\t                    mem_freq=mem_freq,\n\t                )\n\t            hidden_states = layer_outputs[0]\n\t            if use_cache:\n\t                next_decoder_cache += (layer_outputs[2 if output_attentions else 1],)\n", "            if output_attentions:\n\t                all_self_attns += (layer_outputs[1],)\n\t        hidden_states = self.norm(hidden_states)\n\t        # add hidden states from the last decoder layer\n\t        if output_hidden_states:\n\t            all_hidden_states += (hidden_states,)\n\t        next_cache = next_decoder_cache if use_cache else None\n\t        if not return_dict:\n\t            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)\n\t        return BaseModelOutputWithPast(\n", "            last_hidden_state=hidden_states,\n\t            past_key_values=next_cache,\n\t            hidden_states=all_hidden_states,\n\t            attentions=all_self_attns,\n\t        )\n\tclass LlamaForCausalLM(LlamaPreTrainedModel):\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.model = LlamaModel(config)\n\t        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n", "        self.auto_insert_landmarks = False\n\t        self.always_use_flash = False\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.model.embed_tokens\n\t    def set_input_embeddings(self, value):\n\t        self.model.embed_tokens = value\n\t    def get_output_embeddings(self):\n\t        return self.lm_head\n", "    def set_output_embeddings(self, new_embeddings):\n\t        self.lm_head = new_embeddings\n\t    def set_decoder(self, decoder):\n\t        self.model = decoder\n\t    def get_decoder(self):\n\t        return self.model\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n\t    def forward(\n\t        self,\n", "        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n\t        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        labels: Optional[torch.LongTensor] = None,\n\t        use_cache: Optional[bool] = None,\n\t        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n", "        offload_cache_to_cpu: Optional[bool] = None,\n\t        use_flash: Optional[bool] = None,\n\t        cache_top_k: Optional[int] = None,\n\t        max_chunk_length: Optional[int] = 0,\n\t        mem_freq: Optional[int] = None,\n\t        drop_last_logit_if_mem: Optional[bool] = False,\n\t    ) -> Union[Tuple, CausalLMOutputWithPast]:\n\t        r\"\"\"\n\t        Args:\n\t            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n", "                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n\t                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n\t                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\t        Returns:\n\t        Example:\n\t        ```python\n\t        >>> from transformers import AutoTokenizer, LlamaForCausalLM\n\t        >>> model = LlamaForCausalLM.from_pretrained(PATH_TO_CONVERTED_WEIGHTS)\n\t        >>> tokenizer = AutoTokenizer.from_pretrained(PATH_TO_CONVERTED_TOKENIZER)\n\t        >>> prompt = \"Hey, are you consciours? Can you talk to me?\"\n", "        >>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\t        >>> # Generate\n\t        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n\t        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n\t        \"Hey, are you consciours? Can you talk to me?\\nI'm not consciours, but I can talk to you.\"\n\t        ```\"\"\"\n\t        use_flash = use_flash if use_flash is not None else self.always_use_flash\n\t        if self.auto_insert_landmarks:\n\t            mem_freq = self.config.mem_freq\n\t            assert self.config.mem_freq is not None\n", "            block_size = self.config.mem_freq + 1\n\t            input_ids = input_ids.view(input_ids.shape[0], -1, block_size - 1)\n\t            input_ids = torch.cat((input_ids, input_ids.new_full((input_ids.shape[0], input_ids.shape[1], 1), self.config.mem_id)), dim=-1)\n\t            input_ids = input_ids.view(input_ids.shape[0], -1)\n\t            if attention_mask is not None:\n\t                attention_mask = attention_mask.view(attention_mask.shape[0], -1, block_size - 1)\n\t                attention_mask = torch.cat((attention_mask, attention_mask.new_ones((attention_mask.shape[0], attention_mask.shape[1], 1))), dim=-1)\n\t                attention_mask = attention_mask.view(attention_mask.shape[0], -1)\n\t        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n", "            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n\t        )\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        if max_chunk_length == 0:\n\t            if cache_top_k is not None:\n\t                max_chunk_length = self.config.train_context_length - self.config.train_context_length % (mem_freq + 1) - (cache_top_k + 1) * (mem_freq + 1)\n\t                if max_chunk_length <= 0:\n\t                    raise ValueError(\"K is too large for this model.\")\n\t            else:\n\t                max_chunk_length = None\n", "        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n\t        window_len = max_chunk_length or input_ids.shape[1]\n\t        if use_flash:\n\t            assert window_len % (mem_freq + 1) == 0\n\t        last_logits = None\n\t        for step, idx in enumerate(range(0, input_ids.shape[1], window_len)):\n\t            if idx >= 1:\n\t                if output_attentions or output_hidden_states:\n\t                    raise NotImplementedError\n\t                if not use_cache:\n", "                    raise NotImplementedError\n\t            outputs = self.model(\n\t                input_ids=input_ids[:, idx:idx + window_len],\n\t                attention_mask=attention_mask[:, :idx + window_len + attention_mask.shape[1] - input_ids.shape[1]] if attention_mask is not None else None,\n\t                position_ids=position_ids[:, idx:idx + window_len] if position_ids is not None else None,\n\t                past_key_values=past_key_values,\n\t                inputs_embeds=inputs_embeds[:, idx:idx + window_len] if inputs_embeds is not None else None,\n\t                use_cache=use_cache,\n\t                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n", "                return_dict=return_dict,\n\t                offload_cache_to_cpu=offload_cache_to_cpu,\n\t                use_flash=(use_flash or self.auto_insert_landmarks),\n\t                cache_top_k=cache_top_k,\n\t                mem_freq=mem_freq,\n\t            )\n\t            past_key_values = outputs[1]\n\t            if last_logits is not None:\n\t                last_logits = torch.cat((last_logits, outputs[0]), dim=-2)\n\t            last_logits = outputs[0]\n", "        hidden_states = last_logits\n\t        if self.auto_insert_landmarks:\n\t            block_size = self.config.mem_freq + 1\n\t            hidden_states = hidden_states.reshape(hidden_states.shape[0], hidden_states.shape[1] // block_size, block_size, hidden_states.shape[2])\n\t            hidden_states = hidden_states[:, :, :block_size - 1]\n\t            hidden_states = hidden_states.reshape(hidden_states.shape[0], -1, hidden_states.shape[3])\n\t        if drop_last_logit_if_mem:\n\t            is_any_mem = (input_ids[:, -1] == self.config.mem_id).any()\n\t            are_all_mem = (input_ids[:, -1] == self.config.mem_id).all()\n\t            assert is_any_mem == are_all_mem\n", "            if is_any_mem:\n\t                hidden_states = hidden_states[:, :-1]\n\t        logits = self.lm_head(hidden_states)\n\t        loss = None\n\t        if labels is not None:\n\t            # Shift so that tokens < n predict n\n\t            shift_logits = logits[..., :-1, :].contiguous()\n\t            shift_labels = labels[..., 1:].contiguous()\n\t            # Flatten the tokens\n\t            loss_fct = CrossEntropyLoss()\n", "            shift_logits = shift_logits.view(-1, self.config.vocab_size)\n\t            shift_labels = shift_labels.view(-1)\n\t            # Enable model parallelism\n\t            shift_labels = shift_labels.to(shift_logits.device)\n\t            loss = loss_fct(shift_logits, shift_labels)\n\t        if not return_dict:\n\t            output = (logits,) + outputs[1:]\n\t            return (loss,) + output if loss is not None else output\n\t        return CausalLMOutputWithPast(\n\t            loss=loss,\n", "            logits=logits,\n\t            past_key_values=outputs.past_key_values,\n\t            hidden_states=outputs.hidden_states,\n\t            attentions=outputs.attentions,\n\t        )\n\t    def set_mem_id(self, mem_id):\n\t        if self.config.mem_id is not None:\n\t            assert mem_id == self.config.mem_id, \"Chanigng mem_id can break the model. If you really intend to do this, manually disable this check\"\n\t        self.config.mem_id = mem_id\n\t    def enable_landmark_insertion(self):\n", "        self.auto_insert_landmarks = True\n\t    def enable_flash(self):\n\t        self.always_use_flash = True\n\t    def prepare_inputs_for_generation(\n\t        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, **kwargs\n\t    ):\n\t        total_len = input_ids.shape[1]\n\t        if past_key_values:\n\t            prev_len = input_ids.shape[1] - 1\n\t            use_flash = False if kwargs.get(\"use_flash\") is not None else None\n", "        else:\n\t            prev_len = 0\n\t            use_flash = kwargs.get(\"use_flash\")\n\t        position_ids = kwargs.get(\"position_ids\", None)\n\t        mem_freq = kwargs.get(\"mem_freq\") or self.config.mem_freq\n\t        if mem_freq is not None:\n\t            if position_ids is not None:\n\t                raise NotImplementedError\n\t            T = input_ids.shape[1]\n\t            prev_incomplete_len = prev_len % mem_freq\n", "            prev_complete_len = prev_len - prev_incomplete_len\n\t            incomplete_len = total_len % mem_freq\n\t            new_full_len = total_len - prev_complete_len - incomplete_len\n\t            prev_input, input_ids_with_mem, input_ids_without_mem = torch.split(input_ids, (prev_complete_len, new_full_len, incomplete_len), dim=-1)\n\t            bsz, q_len = input_ids.size()\n\t            input_ids_with_mem = input_ids_with_mem.view(bsz, -1, mem_freq)            \n\t            input_ids_with_mem = torch.cat(\n\t                (\n\t                    input_ids_with_mem, \n\t                    input_ids_with_mem.new_full((bsz, input_ids_with_mem.shape[1], 1), self.config.mem_id)\n", "                ), \n\t                dim=-1\n\t            ).view(bsz, -1)\n\t            input_ids = torch.cat((prev_input, input_ids_with_mem, input_ids_without_mem), dim=-1)\n\t            if attention_mask is not None:\n\t                attention_mask_with_mem, attention_mask_without_mem = torch.split(attention_mask, (prev_complete_len + new_full_len, incomplete_len), dim=-1)\n\t                attention_mask_with_mem = attention_mask_with_mem.view(bsz, -1, mem_freq)\n\t                attention_mask_with_mem = torch.cat(\n\t                    (\n\t                        attention_mask_with_mem, \n", "                        attention_mask_with_mem.new_ones((bsz, attention_mask_with_mem.shape[1], 1))\n\t                    ), \n\t                    dim=-1\n\t                ).view(bsz, -1)\n\t                attention_mask = torch.cat((attention_mask_with_mem, attention_mask_without_mem), dim=-1)\n\t        input_ids = input_ids[:, prev_len:]\n\t        if attention_mask is not None and position_ids is None:\n\t            # create position_ids on the fly for batch generation\n\t            position_ids = attention_mask.long().cumsum(-1) - 1\n\t            position_ids.masked_fill_(attention_mask == 0, 1)\n", "            position_ids = position_ids[:, -input_ids.shape[1]:].unsqueeze(-1)\n\t        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step\n\t        if inputs_embeds is not None and past_key_values is None and mem_freq is None:\n\t            model_inputs = {\"inputs_embeds\": inputs_embeds}\n\t        else:\n\t            model_inputs = {\"input_ids\": input_ids}\n\t        model_inputs.update(\n\t            {\n\t                \"position_ids\": position_ids,\n\t                \"past_key_values\": past_key_values,\n", "                \"use_cache\": kwargs.get(\"use_cache\"),\n\t                \"attention_mask\": attention_mask,\n\t                \"offload_cache_to_cpu\": kwargs.get(\"offload_cache_to_cpu\"),\n\t                \"use_flash\": use_flash,\n\t                \"cache_top_k\": kwargs.get(\"cache_top_k\"),\n\t                \"max_chunk_length\": kwargs.get(\"max_chunk_length\", 0),\n\t                \"mem_freq\": mem_freq,\n\t                \"drop_last_logit_if_mem\": not self.config.include_landmark_in_loss,\n\t            }\n\t        )\n", "        return model_inputs\n\t    @staticmethod\n\t    def _reorder_cache(past_key_values, beam_idx):\n\t        reordered_past = ()\n\t        for layer_past in past_key_values:\n\t            reordered_past += (tuple(past_state.index_select(0, beam_idx) for past_state in layer_past),)\n\t        return reordered_past\n\t@add_start_docstrings(\n\t    \"\"\"\n\t    The LLaMa Model transformer with a sequence classification head on top (linear layer).\n", "    [`LlamaForSequenceClassification`] uses the last token in order to do the classification, as other causal models\n\t    (e.g. GPT-2) do.\n\t    Since it does classification on the last token, it requires to know the position of the last token. If a\n\t    `pad_token_id` is defined in the configuration, it finds the last token that is not a padding token in each row. If\n\t    no `pad_token_id` is defined, it simply takes the last value in each row of the batch. Since it cannot guess the\n\t    padding tokens when `inputs_embeds` are passed instead of `input_ids`, it does the same (take the last value in\n\t    each row of the batch).\n\t    \"\"\",\n\t    LLAMA_START_DOCSTRING,\n\t)\n", "class LlamaForSequenceClassification(LlamaPreTrainedModel):\n\t    _keys_to_ignore_on_load_missing = [r\"lm_head.weight\"]\n\t    def __init__(self, config):\n\t        super().__init__(config)\n\t        self.num_labels = config.num_labels\n\t        self.model = LlamaModel(config)\n\t        self.score = nn.Linear(config.hidden_size, self.num_labels, bias=False)\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n", "        return self.model.embed_tokens\n\t    def set_input_embeddings(self, value):\n\t        self.model.embed_tokens = value\n\t    @add_start_docstrings_to_model_forward(LLAMA_INPUTS_DOCSTRING)\n\t    def forward(\n\t        self,\n\t        input_ids: torch.LongTensor = None,\n\t        attention_mask: Optional[torch.Tensor] = None,\n\t        position_ids: Optional[torch.LongTensor] = None,\n\t        past_key_values: Optional[List[torch.FloatTensor]] = None,\n", "        inputs_embeds: Optional[torch.FloatTensor] = None,\n\t        labels: Optional[torch.LongTensor] = None,\n\t        use_cache: Optional[bool] = None,\n\t        output_attentions: Optional[bool] = None,\n\t        output_hidden_states: Optional[bool] = None,\n\t        return_dict: Optional[bool] = None,\n\t    ) -> Union[Tuple, SequenceClassifierOutputWithPast]:\n\t        r\"\"\"\n\t        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n\t            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n", "            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n\t            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n\t        \"\"\"\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        transformer_outputs = self.model(\n\t            input_ids,\n\t            attention_mask=attention_mask,\n\t            position_ids=position_ids,\n\t            past_key_values=past_key_values,\n\t            inputs_embeds=inputs_embeds,\n", "            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n\t        hidden_states = transformer_outputs[0]\n\t        logits = self.score(hidden_states)\n\t        if input_ids is not None:\n\t            batch_size = input_ids.shape[0]\n\t        else:\n", "            batch_size = inputs_embeds.shape[0]\n\t        if self.config.pad_token_id is None and batch_size != 1:\n\t            raise ValueError(\"Cannot handle batch sizes > 1 if no padding token is defined.\")\n\t        if self.config.pad_token_id is None:\n\t            sequence_lengths = -1\n\t        else:\n\t            if input_ids is not None:\n\t                sequence_lengths = (torch.ne(input_ids, self.config.pad_token_id).sum(-1) - 1).to(logits.device)\n\t            else:\n\t                sequence_lengths = -1\n", "        pooled_logits = logits[torch.arange(batch_size, device=logits.device), sequence_lengths]\n\t        loss = None\n\t        if labels is not None:\n\t            labels = labels.to(logits.device)\n\t            if self.config.problem_type is None:\n\t                if self.num_labels == 1:\n\t                    self.config.problem_type = \"regression\"\n\t                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n\t                    self.config.problem_type = \"single_label_classification\"\n\t                else:\n", "                    self.config.problem_type = \"multi_label_classification\"\n\t            if self.config.problem_type == \"regression\":\n\t                loss_fct = MSELoss()\n\t                if self.num_labels == 1:\n\t                    loss = loss_fct(pooled_logits.squeeze(), labels.squeeze())\n\t                else:\n\t                    loss = loss_fct(pooled_logits, labels)\n\t            elif self.config.problem_type == \"single_label_classification\":\n\t                loss_fct = CrossEntropyLoss()\n\t                loss = loss_fct(pooled_logits.view(-1, self.num_labels), labels.view(-1))\n", "            elif self.config.problem_type == \"multi_label_classification\":\n\t                loss_fct = BCEWithLogitsLoss()\n\t                loss = loss_fct(pooled_logits, labels)\n\t        if not return_dict:\n\t            output = (pooled_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n\t        return SequenceClassifierOutputWithPast(\n\t            loss=loss,\n\t            logits=pooled_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n", "            hidden_states=transformer_outputs.hidden_states,\n\t            attentions=transformer_outputs.attentions,\n\t        )\n"]}
{"filename": "llama/ltriton/test_flash_landmark_attention.py", "chunked_list": ["import torch\n\timport math\n\tfrom flash_landmark_attention import fused_landmark_attention\n\tclass LandmarkGroupedSoftmaxFunction(torch.autograd.Function):\n\t    # Note that forward, setup_context, and backward are @staticmethods\n\t    @staticmethod\n\t    def forward(ctx, x, dim, mem_cnt, resp_mem_idx):\n\t        new_shape = list(x.shape)\n\t        new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t        max_by_group = x.new_zeros((*new_shape,))\n", "        max_by_group.scatter_reduce_(src=x, index=resp_mem_idx, dim=dim, reduce=\"amax\", include_self=False)\n\t        maxes = torch.gather(max_by_group, dim, resp_mem_idx)\n\t        #x_exp = torch.exp(x - torch.where(torch.isinf(maxes), 0, maxes))\n\t        x_exp = torch.exp((x - maxes).to(torch.float32))\n\t        cumsum_by_group = torch.zeros_like(max_by_group, dtype=x_exp.dtype)\n\t        cumsum_by_group.scatter_add_(dim, resp_mem_idx, x_exp, )\n\t        denom = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t        #probs = torch.where(denom < 0.5, 0, x_exp / denom)\n\t        probs = x_exp / denom\n\t        ctx.mem_cnt = mem_cnt\n", "        ctx.dim = dim\n\t        ctx.save_for_backward(resp_mem_idx, probs)\n\t        return probs\n\t    @staticmethod\n\t    def backward(ctx, grad_probs):\n\t        mem_cnt = ctx.mem_cnt\n\t        dim = ctx.dim\n\t        resp_mem_idx, probs = ctx.saved_tensors\n\t        grad_x = grad_dim = grad_mem_cnt = grad_resp_mem_idx = None\n\t        if ctx.needs_input_grad[0] or ctx.needs_input_grad[4]:\n", "            grad_pair = grad_probs * probs\n\t            new_shape = list(probs.shape)\n\t            new_shape[dim] = mem_cnt # max_mem_cnt.item()\n\t            cumsum_by_group = grad_pair.new_zeros((*new_shape,))\n\t            cumsum_by_group.scatter_add_(dim, resp_mem_idx, grad_pair)\n\t        if ctx.needs_input_grad[0]:\n\t            grad_sum = torch.gather(cumsum_by_group, dim, resp_mem_idx)\n\t            grad_x = grad_pair - probs * grad_sum\n\t        assert not ctx.needs_input_grad[1]\n\t        assert not ctx.needs_input_grad[2]\n", "        assert not ctx.needs_input_grad[3]\n\t        return grad_x, grad_dim, grad_mem_cnt, grad_resp_mem_idx\n\tdef landmark_grouped_softmax(x, dim, is_mem, last_section_mask):\n\t    last_and_rest_mask = last_section_mask # | mask\n\t    full_access_mask =  is_mem | last_and_rest_mask\n\t    max_mem_cnt = 16\n\t    mem_group_idx = torch.cumsum(is_mem, dim=dim)\n\t    mem_bucket_id = max_mem_cnt - 1\n\t    resp_mem_idx = torch.where(last_and_rest_mask, \n\t                                max_mem_cnt - 1,\n", "                                torch.where(is_mem, mem_bucket_id, mem_group_idx))\n\t    probs = LandmarkGroupedSoftmaxFunction.apply(x, dim, max_mem_cnt, resp_mem_idx)\n\t    new_shape = list(x.shape)\n\t    new_shape[dim] = max_mem_cnt\n\t    group_prob = probs.new_zeros((*new_shape, ))\n\t    group_prob.scatter_(dim, torch.where(is_mem, mem_group_idx - 1, max_mem_cnt - 1), probs)\n\t    probs = probs.mul(torch.where(full_access_mask, last_section_mask, torch.gather(group_prob, dim, resp_mem_idx)))\n\t    return probs\n\tbatch = 2\n\tnheads = 8\n", "seqlen_q = 1024\n\tseqlen_k = 1024 #512\n\td = 128\n\tuse_I_for_v = False\n\tmem_freq = 63\n\tq = torch.rand((batch, seqlen_q, nheads, d)).cuda().to(torch.bfloat16).transpose(1, 2)\n\tk = torch.rand((batch, seqlen_k, nheads, d)).cuda().to(torch.bfloat16).transpose(1, 2)\n\tif not use_I_for_v:\n\t    v = torch.rand((batch, seqlen_k, nheads, d)).cuda().to(torch.bfloat16).transpose(1, 2)\n\telse:\n", "    v = torch.eye(seqlen_k, d).cuda().to(torch.bfloat16)\n\t    v = v.view(1, 1, seqlen_k, d).expand(batch, nheads, seqlen_k, d)\n\tq.requires_grad = True\n\tk.requires_grad = True\n\tv.requires_grad = True\n\tblock_size = mem_freq + 1\n\tis_mem = torch.arange(0, seqlen_k, device=q.device) % block_size == (block_size - 1)\n\tout = fused_landmark_attention(q, k, v, is_mem, block_size=block_size)\n\tdef f():\n\t    import math\n", "    att = q @ k.transpose(-1, -2) / math.sqrt(d)\n\t    att_mask = torch.tril(torch.ones((1, 1, seqlen_q, seqlen_k), device=q.device), diagonal=seqlen_k - seqlen_q)== 1.\n\t    last_section_mask = (torch.arange(0, seqlen_k, device=q.device) // (mem_freq + 1))[None, :] == (torch.arange(seqlen_k - seqlen_q, seqlen_k, device=q.device) // (mem_freq + 1))[:, None]\n\t    last_section_mask = last_section_mask.unsqueeze(0).unsqueeze(1)\n\t    is_mem_ = is_mem.view(1, 1, 1, seqlen_k)\n\t    mask = att_mask & ~(last_section_mask & is_mem_)\n\t    last_section_mask = last_section_mask & mask\n\t    is_mem_ = is_mem_ & mask\n\t    is_mem_ = is_mem_.expand(batch, nheads, seqlen_q, seqlen_k)\n\t    last_section_msak = last_section_mask.expand(batch, nheads, seqlen_q, seqlen_k)\n", "    att.masked_fill_(~mask, float(\"-inf\"))\n\t    att = landmark_grouped_softmax(att, -1, is_mem_, last_section_mask).to(q.dtype)\n\t    att.masked_fill_(~mask, 0.0)\n\t    exact_out = att @ v\n\t    return exact_out    \n\texact_out = f()\n\tdef make_f_grad(func):\n\t    def f_():\n\t        exact_out = func()\n\t        return torch.autograd.grad((exact_out**2).sum(), [q, k, v])\n", "    return f_\n\tdef f_exact():\n\t    return fused_landmark_attention(q, k, v, is_mem, block_size=block_size)\n\tdef f_torch():\n\t    return torch.nn.functional.scaled_dot_product_attention(q, k, v, is_causal=True)\n\tif use_I_for_v and d >= seqlen_k:\n\t    assert torch.allclose(out.sum(-1), torch.ones_like(out.sum(-1)), atol=1e-03, rtol=1e-03), out.sum(-1)\n\t    assert torch.allclose(exact_out.sum(-1), torch.ones_like(exact_out.sum(-1)))\n\t#print(\"Exact\", exact_out[:, :, mem_freq-1:mem_freq+2])\n\t#print(\"Fused\", out[:, :, mem_freq-1:mem_freq+2])\n", "assert torch.allclose(out, exact_out, rtol=1e-02, atol=1e-02), (out, exact_out)\n\t#print(\"Diff\", (out - exact_out).max(dim=-2))\n\t#print(last_section_mask[0, 0])\n\t#print(att[0, 0])\n\t#print(is_mem[0, 0])\n\t#print(is_mem[0, 0, -1])\n\tgrads = torch.autograd.grad((out ** 2).sum(), [q, k, v])\n\texact_grads = torch.autograd.grad((exact_out ** 2).sum(), [q, k, v])\n\t#print(len(exact_grads))\n\tfor grad, exact_grad, t in zip(grads, exact_grads, [\"q\", \"k\", \"v\"]):\n", "    torch.set_printoptions(sci_mode=False)\n\t    if not torch.allclose(grad, exact_grad, rtol=4e-02, atol=4e-02):\n\t        #print((grad, exact_grad, t))\n\t        print(\"Failed d\", t)\n\t    #print(t, (grad - exact_grad).max())\n\t    #print(t, torch.argmax((grad - exact_grad).amax(dim=-1), dim=-1))\n\tprint(\"Done once\")    \n\t#print(v.grad)\n\timport timeit\n\tprint(\"Exact: \", timeit.timeit(f, number=500))\n", "print(\"Fused: \", timeit.timeit(f_exact, number=500))\n\tprint(\"Torch: \", timeit.timeit(f_torch, number=500))\n\tprint(\"Exact Grad: \", timeit.timeit(make_f_grad(f), number=500))\n\tprint(\"Fused Grad: \", timeit.timeit(make_f_grad(f_exact), number=500))\n\tprint(\"Torch Grad: \", timeit.timeit(make_f_grad(f_torch), number=500))\n"]}
{"filename": "llama/ltriton/flash_landmark_attention.py", "chunked_list": ["import math\n\timport triton\n\timport torch\n\timport triton.language as tl\n\t@triton.jit\n\tdef _fwd_kernel(#debug, sdz, sdh, sdm, sdn,\n\t    Q, K, V, sm_scale, \n\t    Out,\n\t    sqz, sqh, sqm, sqd, # shape = (Z,H,N_CTX_Q,D)\n\t    skz, skh, skn, skd, # shape = (Z,H,N_CTX_KV,D)\n", "    svz, svh, svn, svd, # shape = (Z,H,N_CTX_KV,D)\n\t    soz, soh, som, sod, # shape = (Z,H,N_CTX_Q,D)\n\t    L, M,\n\t    Z, H, N_CTX_Q, N_CTX_KV, \n\t    BLOCK: tl.constexpr, # will load BLOCK_M queries, and compute self attention by blocks of BLOCK_N keys\n\t    BLOCK_DMODEL: tl.constexpr, # dimensionality of heads: D\n\t    N_PREFIX_Q: tl.constexpr,\n\t):\n\t    start_m = tl.program_id(0) # idx of sequence length chunk of size 128 (BLOCK_N)\n\t    off_hz = tl.program_id(1) # idx of head_batch (unique idx for each head in each batch)\n", "    BLOCK_M: tl.constexpr = BLOCK\n\t    BLOCK_N: tl.constexpr = BLOCK\n\t    # initialize offsets\n\t    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M) # indices of queries we want to process\n\t    offs_m_real = (start_m + N_PREFIX_Q) * BLOCK_M + tl.arange(0, BLOCK_M)  # indices of queries we want to process\n\t    offs_m_real += tl.where(tl.arange(0, BLOCK_M) == BLOCK_M - 1, -1, 0)\n\t    offs_n = tl.arange(0, BLOCK_N) # indices of keys we want to process, we start from [0, BLOCK_N-1] and update in the loop\n\t    offs_d = tl.arange(0, BLOCK_DMODEL) # we want to process all the dimensions of a given head\n\t    offs_q = off_hz * sqh + offs_m[:, None] * sqm + offs_d[None, :] * sqd # Q.view(Z*H,N_CTX_Q,D)[off_hz, start_m*BLOCK_M:(start_m+1)*BLOCK_M, :].squeeze() that's a BLOCK_M*D matrix\n\t    offs_k = off_hz * skh + offs_n[None, :] * skn + offs_d[:, None] * skd # K.view(Z*H,N_CTX_KV,D)[off_hz, 0:BLOCK_N, :].transpose(1,2).squeeze() that's a D*BLOCK_N matrix\n", "    offs_v = off_hz * svh + offs_n[:, None] * svn + offs_d[None, :] * svd # V.view(Z*H,N_CTX_KV,D)[off_hz, 0:BLOCK_N, :].squeeze() that's a BLOCK_N*D matrix\n\t    # pointers to m and l\n\t    m_prev = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n\t    l_prev = tl.zeros([BLOCK_M], dtype=tl.float32)\n\t    acc = tl.zeros([BLOCK_M, BLOCK_DMODEL], dtype=tl.float32)\n\t    # Load values\n\t    q_vals = tl.load(Q + offs_q, mask=offs_m[:, None] < N_CTX_Q, other=0) \n\t    for start_n in range(0, (N_PREFIX_Q + start_m)):\n\t        # Load values for K and K_idx\n\t        k_vals = tl.load(K + offs_k, mask=offs_n[None, :] < N_CTX_KV, other=0)\n", "        # compute qk\n\t        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=q_vals.dtype)\n\t        qk += tl.dot(q_vals, k_vals, allow_tf32=False)\n\t        qk *= sm_scale\n\t        # causal masking\n\t        qk = tl.where(offs_m_real[:,None] >= offs_n[None,:], qk, float(\"-inf\"))\n\t        landmark_qk = tl.max(tl.where(tl.arange(0, BLOCK_N)[None, :] == BLOCK_N - 1, qk, float(\"-inf\")), 1)\n\t        normal_qk = tl.where(tl.arange(0, BLOCK_N)[None, :] == BLOCK_N - 1, float(\"-inf\"), qk)\n\t        normal_m = tl.max(normal_qk, 1)\n\t        normal_p = tl.exp(normal_qk - normal_m[:, None])\n", "        normal_denom = tl.sum(normal_p, 1)\n\t        # compute attention weights\n\t        m_curr = tl.maximum(landmark_qk, m_prev) # compute new m\n\t        m_curr_ = m_curr # tl.where(m_curr != float('-inf'), m_curr, float(0.0))  # ADDITIONAL CHECK IF YOU GET NaNs\n\t        l_prev *= tl.exp(m_prev - m_curr_) # correct old l\n\t        landmark_p = tl.exp(landmark_qk - m_curr_)\n\t        l_curr = landmark_p + l_prev \n\t        l_rcp = 1. / l_curr # rescale operands of matmuls\n\t        # l_rcp = tl.where((l_rcp == float('inf')), 0, l_rcp)  # ADDITIONAL CHECK IF YOU GET NaNs\n\t        landmark_p *= l_rcp\n", "        acc *= (l_prev * l_rcp)[:, None] # weight for each value vector\n\t        # update acc\n\t        v_vals = tl.load(V + offs_v, mask=offs_n[:, None] < N_CTX_KV, other=0)\n\t        acc += tl.dot((landmark_p[:, None] * normal_p / normal_denom[:, None]).to(Q.dtype.element_ty), v_vals, allow_tf32=False) \n\t        # update m_i and l_i\n\t        l_prev = l_curr\n\t        m_prev = m_curr\n\t        # update offsets\n\t        offs_n += BLOCK_N\n\t        offs_k += BLOCK_N * skn\n", "        offs_v += BLOCK_N * svn\n\t    k_vals = tl.load(K + offs_k, mask=offs_n[None, :] < N_CTX_KV, other=0)\n\t    # compute qk\n\t    qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=q_vals.dtype)\n\t    qk += tl.dot(q_vals, k_vals, allow_tf32=False)\n\t    qk *= sm_scale\n\t    # causal masking\n\t    qk = tl.where(offs_m_real[:,None] >= offs_n[None,:], qk, float(\"-inf\"))\n\t    m_curr = tl.maximum(tl.max(qk, 1), m_prev) # compute new m\n\t    m_curr_ = m_curr#m_curr_ = tl.where(m_curr != float('-inf'), m_curr, float(0.0))\n", "    l_prev *= tl.exp(m_prev - m_curr_) # correct old l\n\t    p = tl.exp(qk - m_curr_[:, None])\n\t    l_curr = tl.sum(p, 1) + l_prev \n\t    l_rcp = 1. / l_curr # rescale operands of matmuls\n\t    # l_rcp = tl.where((l_rcp == float('inf')), 0, l_rcp)  # ADDITIONAL CHECK IF YOU GET NaNs\n\t    p *= l_rcp[:, None]\n\t    acc *= (l_prev * l_rcp)[:, None] # weight for each value vector\n\t    # update acc\n\t    p = p.to(Q.dtype.element_ty)\n\t    v_vals = tl.load(V + offs_v, mask=offs_n[:, None] < N_CTX_KV, other=0)\n", "    acc += tl.dot(p, v_vals, allow_tf32=False) \n\t    l_prev = l_curr\n\t    m_prev = m_curr\n\t    # store L and M\n\t    offs_L = off_hz * N_CTX_Q + offs_m # L is of shape (Z*H, N_CTX_Q), here we point to L[off_hz, start_m*Block_M:(start_m+1)*Block_M]\n\t    offs_M = off_hz * N_CTX_Q + offs_m\n\t    tl.store(L + offs_L, l_prev, mask=offs_m < N_CTX_Q)\n\t    tl.store(M + offs_M, m_prev, mask=offs_m < N_CTX_Q)\n\t    # store results to output\n\t    offs_o = off_hz * soh + offs_m[:, None] * som + offs_d[None, :] * sod\n", "    tl.store(Out + offs_o, acc, mask=offs_m[:, None] < N_CTX_Q)\n\t@triton.jit\n\tdef _bwd_preprocess(\n\t    Out, soz, soh, som, sod,\n\t    DO, L, slzh, slm,\n\t    NewDO, Delta, N_CTX_Q,\n\t    BLOCK_M: tl.constexpr, D_HEAD: tl.constexpr,\n\t):\n\t    start_m = tl.program_id(0)\n\t    off_hz = tl.program_id(1)\n", "    off_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n\t    off_d = tl.arange(0, D_HEAD)\n\t    # load\n\t    off_o = off_hz * soh + off_m[:, None] * som + off_d[None, :] * sod\n\t    off_l = off_hz * slzh + off_m * slm\n\t    o = tl.load(Out + off_o).to(tl.float32)#, mask=off_m[:, None] < N_CTX_Q, other=0.0).to(tl.float32)\n\t    do = tl.load(DO + off_o).to(tl.float32)#, mask=off_m[:, None] < N_CTX_Q, other=0.0).to(tl.float32)\n\t    denom = tl.load(L + off_l).to(tl.float32)#, mask=off_m < N_CTX_Q, other=1.0).to(tl.float32)\n\t    # denom = tl.where(denom == 0, 1.0, denom)  # ADDITIONAL CHECK IF YOU GET NaNs\n\t    # compute\n", "    do = do / denom[:, None]\n\t    delta = tl.sum(o * do, axis=1)\n\t    # write-back\n\t    tl.store(NewDO + off_o, do)#, mask=off_m[:, None] < N_CTX_Q)\n\t    tl.store(Delta + off_l, delta)#, mask=off_m < N_CTX_Q)\n\t@triton.jit\n\tdef _bwd_kernel(\n\t    Q, K, V, sm_scale, Out, DO,\n\t    DQ, DK, DV,\n\t    L, M,\n", "    D,\n\t    sqz, sqh, sqm, sqd,\n\t    skz, skh, skn, skd,\n\t    svz, svh, svn, svd,\n\t    Z, H, N_CTX_Q, N_CTX_KV,\n\t    BLOCK: tl.constexpr, BLOCK_DMODEL: tl.constexpr,\n\t    N_PREFIX_Q: tl.constexpr,\n\t):\n\t    off_hz = tl.program_id(0)\n\t    off_z = off_hz // H\n", "    off_h = off_hz % H\n\t    BLOCK_M: tl.constexpr = BLOCK\n\t    BLOCK_N: tl.constexpr = BLOCK\n\t    # offset pointers for batch/head\n\t    Q += off_z * sqz + off_h * sqh\n\t    K += off_z * skz + off_h * skh\n\t    V += off_z * svz + off_h * svh\n\t    DO += off_z * sqz + off_h * sqh\n\t    DQ += off_z * sqz + off_h * sqh\n\t    DK += off_z * skz + off_h * skh\n", "    DV += off_z * svz + off_h * svh\n\t    offs_d = tl.arange(0, BLOCK_DMODEL)\n\t    # pointer to row-wise quantities in value-like data\n\t    D_ptrs = D + off_hz * N_CTX_Q # pointer to D.view(Z*H,N_CTX_Q)[off_hz]\n\t    m_ptrs = M + off_hz * N_CTX_Q # pointer to m.view(Z*H,N_CTX_Q)[off_hz]\n\t    for start_n in range(0, N_CTX_KV, BLOCK_N):\n\t        start_n = tl.multiple_of(start_n, BLOCK_N)\n\t        offs_n = start_n + tl.arange(0, BLOCK_N)\n\t        # pointers for keys and values\n\t        k_ptrs = K + (offs_n[:, None] * skn + offs_d[None, :] * skd)\n", "        v_ptrs = V + (offs_n[:, None] * svn + offs_d[None, :] * svd)\n\t        # initialize dv amd dk\n\t        dv = tl.zeros([BLOCK_N, BLOCK_DMODEL], dtype=tl.float32)\n\t        dk = tl.zeros([BLOCK_N, BLOCK_DMODEL], dtype=tl.float32)\n\t        k = tl.load(k_ptrs)#, mask=offs_n[:, None] < N_CTX_KV)\n\t        v = tl.load(v_ptrs)#, mask=offs_n[:, None] < N_CTX_KV)\n\t        if start_n < N_PREFIX_Q * BLOCK_M:\n\t            start_q_index = 0\n\t        elif N_CTX_Q <= start_n - N_PREFIX_Q * BLOCK_M:\n\t            start_q_index = start_n - N_PREFIX_Q * BLOCK_M\n", "        else:\n\t            first_start_m = start_n - N_PREFIX_Q * BLOCK_M\n\t            first_start_m = tl.multiple_of(first_start_m, BLOCK_M)\n\t            offs_m = (first_start_m + tl.arange(0, BLOCK_M))\n\t            offs_m_real = offs_m + N_PREFIX_Q * BLOCK_M # indices of queries we want to process\n\t            offs_m_real += tl.where(tl.arange(0, BLOCK_M) == BLOCK_M - 1, -1, 0)    \n\t            q_ptrs = Q + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            do_ptrs = DO + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            dq_ptrs = DQ + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            q = tl.load(q_ptrs) #, mask=offs_m[:,None] < N_CTX_Q)\n", "            qk = tl.dot(q, tl.trans(k), allow_tf32=False)\n\t            qk = tl.where(offs_m_real[:,None] >= (offs_n[None,:]), qk, float(\"-inf\"))\n\t            m = tl.load(m_ptrs + offs_m) #, mask=offs_m < N_CTX_Q)\n\t            m_ = m # tl.where(m != float('-inf'), m, 0.0)\n\t            last_p = tl.exp(qk * sm_scale - m_[:, None])\n\t            do = tl.load(do_ptrs) #, mask=offs_m[:,None] < N_CTX_Q)\n\t            # compute dv\n\t            dv += tl.dot(tl.trans(last_p.to(Q.dtype.element_ty)), do, allow_tf32=False)\n\t            Di = tl.load(D_ptrs + offs_m) #, mask=offs_m < N_CTX_Q)\n\t            # compute dp = dot(v, do)\n", "            last_dp = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) - Di[:, None]\n\t            last_dp += tl.dot(do, tl.trans(v), allow_tf32=False)\n\t            # compute ds = p * (dp - delta[:, None])\n\t            ds = last_p * last_dp * sm_scale\n\t            # compute dk = dot(ds.T, q)\n\t            dk += tl.dot(tl.trans(ds.to(Q.dtype.element_ty)), q, allow_tf32=False)\n\t            dq = tl.load(dq_ptrs) #, mask=offs_m[:,None] < N_CTX_Q)\n\t            # compute dq\n\t            dq += tl.dot(ds.to(Q.dtype.element_ty), k, allow_tf32=False)\n\t            tl.store(dq_ptrs, dq) #, mask=offs_m[:, None] < N_CTX_Q)\n", "            start_q_index = first_start_m + BLOCK_M\n\t        for start_m in range(start_q_index, N_CTX_Q, BLOCK_M):\n\t            start_m = tl.multiple_of(start_m, BLOCK_M)\n\t            offs_m = (start_m + tl.arange(0, BLOCK_M))\n\t            # offs_m_real = offs_m + N_PREFIX_Q * BLOCK_M # indices of queries we want to process\n\t            # offs_m_real += tl.where(tl.arange(0, BLOCK_M) == BLOCK_M - 1, -1, 0)    \n\t            q_ptrs = Q + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            do_ptrs = DO + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            dq_ptrs = DQ + (offs_m[:, None] * sqm + offs_d[None, :] * sqd)\n\t            q = tl.load(q_ptrs) #, mask=offs_m[:,None] < N_CTX_Q)\n", "            qk = tl.dot(q, tl.trans(k), allow_tf32=False)\n\t            qk *= sm_scale\n\t            # qk = tl.where(offs_m_real[:,None] >= (offs_n[None,:]), qk, float(\"-inf\"))  # This should not be necessary anymore since we separate the first step\n\t            landmark_qk = tl.max(tl.where(tl.arange(0, BLOCK_N)[None, :] == BLOCK_N - 1, qk, float(\"-inf\")), 1)\n\t            normal_qk = tl.where(tl.arange(0, BLOCK_N)[None, :] == BLOCK_N - 1, float(\"-inf\"), qk)\n\t            m = tl.load(m_ptrs + offs_m)#, mask=offs_m < N_CTX_Q)\n\t            m_ = m # tl.where(m != float('-inf'), m, 0.0)  # ADDITIONAL CHECK IF YOU GET NaNs\n\t            p = tl.exp(landmark_qk - m_) # BLOCK_M\n\t            do = tl.load(do_ptrs)#, mask=offs_m[:,None] < N_CTX_Q) # BLOCK_M x H\n\t            normal_m = tl.max(normal_qk, 1)\n", "            normal_p = tl.exp(normal_qk - normal_m[:, None])\n\t            normal_p_normalized = normal_p / tl.sum(normal_p, 1)[:, None] # BLOCK_M x (BLOCK_N - 1)\n\t            normal_kv = tl.dot(normal_p_normalized.to(Q.dtype.element_ty), v, allow_tf32=False) # BLOCK_M x H\n\t            normal_D = tl.sum(do * normal_kv, 1)\n\t            # compute dv\n\t            dv += tl.dot(tl.trans((p[:, None] * normal_p_normalized).to(Q.dtype.element_ty)), do, allow_tf32=False)\n\t            Di = tl.load(D_ptrs + offs_m)#, mask=offs_m < N_CTX_Q)\n\t            # compute dp and ds for landmark\n\t            dp = tl.zeros([BLOCK_M], dtype=tl.float32) - Di\n\t            dp += normal_D \n", "            landmark_ds = p * dp\n\t            # compute dp and ds for others\n\t            normal_dp = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32) - normal_D[:, None]\n\t            normal_dp += tl.dot(do, tl.trans(v), allow_tf32=False)\n\t            normal_ds = p[:, None] * normal_p_normalized * normal_dp \n\t            # merge\n\t            ds = tl.where(tl.arange(0, BLOCK_N)[None, :] == BLOCK_N - 1, landmark_ds[:, None], normal_ds)\n\t            ds *= sm_scale\n\t            # compute dk = dot(ds.T, q)\n\t            dk += tl.dot(tl.trans(ds.to(Q.dtype.element_ty)), q, allow_tf32=False)\n", "            dq = tl.load(dq_ptrs) #, mask=offs_m[:,None] < N_CTX_Q)\n\t            # compute dq\n\t            dq += tl.dot(ds.to(Q.dtype.element_ty), k, allow_tf32=False)\n\t            tl.store(dq_ptrs, dq) #, mask=offs_m[:, None] < N_CTX_Q)\n\t        # write-back\n\t        dv_ptrs = DV + (offs_n[:, None] * svn + offs_d[None, :] * svd)\n\t        dk_ptrs = DK + (offs_n[:, None] * skn + offs_d[None, :] * skd)\n\t        tl.store(dv_ptrs, dv) #, mask=offs_n[:, None] < N_CTX_KV)\n\t        tl.store(dk_ptrs, dk) #, mask=offs_n[:, None] < N_CTX_KV)\n\tclass FusedLandmarkAttention(torch.autograd.Function):\n", "    @staticmethod\n\t    def forward(ctx, q, k, v, n_prefix_q, sm_scale, block_size):\n\t        q = q.contiguous()\n\t        k = k.contiguous()\n\t        v = v.contiguous()\n\t        # shape constraints\n\t        batch, nheads, seqlen_q, d = q.shape\n\t        _, _, seqlen_k, _ = k.shape\n\t        assert k.shape == (batch, nheads, seqlen_k, d)\n\t        assert v.shape == (batch, nheads, seqlen_k, d)\n", "        assert d <= 128, 'FlashAttention only support head dimensions up to 128'\n\t        assert q.dtype == k.dtype == v.dtype, 'All tensors must have the same type'\n\t        #assert q.dtype in [torch.float16, torch.bfloat16], 'Only support fp16 and bf16'\n\t        assert q.is_cuda and k.is_cuda and v.is_cuda\n\t        BLOCK = block_size\n\t        o = torch.empty_like(q)\n\t        grid = (triton.cdiv(q.shape[2], BLOCK), q.shape[0] * q.shape[1], 1)\n\t        L = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n\t        m = torch.empty((q.shape[0] * q.shape[1], q.shape[2]), device=q.device, dtype=torch.float32)\n\t        num_warps = 4 if d <= 64 else 8\n", "        _fwd_kernel[grid](\n\t            q, k, v, sm_scale,\n\t            o,\n\t            q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n\t            k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n\t            v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n\t            o.stride(0), o.stride(1), o.stride(2), o.stride(3),\n\t            L, m,\n\t            q.shape[0], q.shape[1], q.shape[2], k.shape[2],\n\t            BLOCK=BLOCK, BLOCK_DMODEL=d,\n", "            N_PREFIX_Q=n_prefix_q,\n\t            num_warps=num_warps, num_stages=2\n\t        )\n\t        ctx.save_for_backward(q, k, v, o, L, m)\n\t        ctx.grid = grid\n\t        ctx.sm_scale = sm_scale\n\t        ctx.BLOCK_DMODEL = d\n\t        ctx.N_PREFIX_Q = n_prefix_q\n\t        ctx.BLOCK = BLOCK\n\t        return o\n", "    @staticmethod\n\t    def backward(ctx, do):\n\t        BLOCK = ctx.BLOCK\n\t        q, k, v, o, l, m = ctx.saved_tensors\n\t        assert q.shape[2] % BLOCK == 0, \"Backward supported only for full blocks\"\n\t        assert k.shape[2] % BLOCK == 0, \"Backward supported only for full blocks\"\n\t        do = do.contiguous()\n\t        dq = torch.zeros_like(q, dtype=torch.float32)\n\t        dk = torch.empty_like(k)\n\t        dv = torch.empty_like(v)\n", "        do_scaled = torch.empty_like(do)\n\t        delta = torch.empty_like(l)\n\t        _bwd_preprocess[(ctx.grid[0], ctx.grid[1])](\n\t            o, o.stride(0), o.stride(1), o.stride(2), o.stride(3), do, l, l.stride(0), l.stride(1),\n\t            do_scaled, delta, q.shape[2],\n\t            BLOCK_M=BLOCK, D_HEAD=ctx.BLOCK_DMODEL,\n\t        )\n\t        _bwd_kernel[(ctx.grid[1],)](\n\t            q, k, v, ctx.sm_scale,\n\t            o, do_scaled,\n", "            dq, dk, dv,\n\t            l, m,\n\t            delta,\n\t            q.stride(0), q.stride(1), q.stride(2), q.stride(3),\n\t            k.stride(0), k.stride(1), k.stride(2), k.stride(3),\n\t            v.stride(0), v.stride(1), v.stride(2), v.stride(3),\n\t            q.shape[0], q.shape[1], q.shape[2], k.shape[2],\n\t            BLOCK=BLOCK,\n\t            BLOCK_DMODEL=ctx.BLOCK_DMODEL, \n\t            N_PREFIX_Q=ctx.N_PREFIX_Q,\n", "            num_warps=8,\n\t            num_stages=1,\n\t        )\n\t        return dq, dk, dv, None, None, None\n\tdef fused_landmark_attention(q, k, v, is_mem, sm_scale=None, block_size=64):\n\t    expected_is_mem = torch.arange(0, is_mem.shape[-1], device=is_mem.device) % block_size == (block_size - 1)\n\t    assert (is_mem == expected_is_mem).all()\n\t    n_history_kv = k.shape[-2] - q.shape[-2]\n\t    assert n_history_kv % block_size == 0\n\t    n_history_blocks = n_history_kv // block_size\n", "    if sm_scale is None:\n\t        sm_scale = 1.0 / math.sqrt(q.size(-1))\n\t    return FusedLandmarkAttention.apply(q, k, v, n_history_blocks, sm_scale, block_size)\n"]}
