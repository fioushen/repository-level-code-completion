{"filename": "xlmr/scripts/process/prepare_xxl_ckpt.py", "chunked_list": ["from fairseq import checkpoint_utils\n\timport torch\n\tdef read_ckpt():\n\t    local_path = \"/opt/data/private/data/xlmr/xlmr.xl/parallel_8/model-model_part-1.pt\"\n\t    with open(local_path, \"rb\") as f:\n\t        state_all = torch.load(f, map_location=torch.device(\"cpu\"))\n\t    import pdb; pdb.set_trace()\n\tdef split_ckpt(para_block=8):\n\t    for rank in range(para_block):\n\t        local_path = \"/opt/data/private/data/xlmr/xlmr.xxl/model.pt\"\n", "        with open(local_path, \"rb\") as f:\n\t            state = torch.load(f, map_location=torch.device(\"cpu\"))\n\t        vocab_size = 250880\n\t        embed_size = 4096\n\t        fc_size = 4096 * 4\n\t        para_vocab_size = vocab_size // para_block\n\t        para_embed_size = embed_size // para_block\n\t        para_fc_size = fc_size // para_block\n\t        print(para_vocab_size, para_embed_size, para_fc_size)\n\t        # rescale vocab embedding:\n", "        embed_weight = state['model']['encoder.sentence_encoder.embed_tokens.weight']\n\t        temp_size = embed_weight.size(0)\n\t        embed_weight_copy = torch.zeros(vocab_size, embed_size).type_as(embed_weight)\n\t        embed_weight_copy[:temp_size, :] = embed_weight\n\t        embed_weight = embed_weight_copy\n\t        print(embed_weight.size())\n\t        # rescale output mapping bias:\n\t        embed_bias = state['model']['encoder.lm_head.bias']\n\t        embed_bias_copy = torch.zeros(vocab_size).type_as(embed_weight)\n\t        embed_bias_copy[:temp_size] = embed_bias\n", "        embed_bias = embed_bias_copy\n\t        print(embed_bias.size())\n\t        for k in list(state['model'].keys()):\n\t            if \"layer_norm\" in k or \"embed_positions\" in k or \"version\" in k or \"layernorm_embedding\" in k:\n\t                print(k)\n\t                state['model'][k] = state['model'][k].clone()\n\t                continue\n\t            if \"encoder.sentence_encoder.embed_tokens.weight\" in k:\n\t                start_dim = rank * para_vocab_size\n\t                end_dim = (rank + 1) * para_vocab_size\n", "                print(\"convert {} from {} to {} \".format(k, start_dim, end_dim))\n\t                state['model'][k] = embed_weight[start_dim:end_dim, :].clone()\n\t            elif \"encoder.sentence_encoder.layers\" in k:\n\t                if \"fc\" in k:\n\t                    start_dim = rank * para_fc_size\n\t                    end_dim = (rank + 1) * para_fc_size\n\t                    print(\"convert {} from {} to {} \".format(k, start_dim, end_dim))\n\t                    if \"fc1.weight\" in k:\n\t                        state['model'][k] = state['model'][k][start_dim:end_dim, :].clone()\n\t                    elif \"fc1.bias\" in k:\n", "                        state['model'][k] = state['model'][k][start_dim:end_dim].clone()\n\t                    elif \"fc2.weight\" in k:\n\t                        state['model'][k] = state['model'][k][:, start_dim:end_dim].clone()\n\t                else:\n\t                    start_dim = rank * para_embed_size\n\t                    end_dim = (rank + 1) * para_embed_size\n\t                    print(\"convert {} from {} to {} \".format(k, start_dim, end_dim))\n\t                    if \"self_attn.out_proj.weight\" in k:\n\t                        state['model'][k] = state['model'][k][:, start_dim:end_dim].clone()\n\t                    elif \"self_attn.out_proj.bias\" in k:\n", "                        state['model'][k] = state['model'][k].clone()\n\t                    else:\n\t                        if \"self_attn.q_proj.weight\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim, :].clone()\n\t                        elif \"self_attn.q_proj.bias\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim].clone()\n\t                        elif \"self_attn.k_proj.weight\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim, :].clone()\n\t                        elif \"self_attn.k_proj.bias\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim].clone()\n", "                        elif \"self_attn.v_proj.weight\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim, :].clone()\n\t                        elif \"self_attn.v_proj.bias\" in k:\n\t                            state['model'][k] = state['model'][k][start_dim:end_dim].clone()\n\t                        else:\n\t                            print(state['model'][k].size())\n\t                            print(k)\n\t                            raise NotImplementedError\n\t            elif \"lm_head.weight\" in k:\n\t                start_dim = rank * para_vocab_size\n", "                end_dim = (rank + 1) * para_vocab_size\n\t                state['model'][k] = embed_weight[start_dim:end_dim, :].clone()\n\t            elif \"lm_head.bias\" in k:\n\t                state['model'][k] = embed_bias.clone()\n\t            elif \"lm_head.dense.weight\" in k:\n\t                start_dim = rank * para_embed_size\n\t                end_dim = (rank + 1) * para_embed_size\n\t                print(\"convert {} from {} to {} \".format(k, start_dim, end_dim))\n\t                state['model'][k] = state['model'][k][start_dim:end_dim, :].clone()\n\t            elif \"lm_head.dense.bias\" in k:\n", "                start_dim = rank * para_embed_size\n\t                end_dim = (rank + 1) * para_embed_size\n\t                print(\"convert {} from {} to {} \".format(k, start_dim, end_dim))\n\t                state['model'][k] = state['model'][k][start_dim:end_dim].clone()\n\t            else:\n\t                print(state['model'][k].size())\n\t                print(k)\n\t                raise NotImplementedError\n\t        torch.save(state, \"/opt/data/private/data/xlmr/xlmr.xxl/parallel_8/model-model_part-{}.pt\".format(rank))\n\tsplit_ckpt(para_block=8)\n", "# read_ckpt()\n"]}
{"filename": "xlmr/scripts/process/merge_xxl_ckpt.py", "chunked_list": ["from fairseq import checkpoint_utils\n\timport torch\n\tdef merge_ckpt(para_block=8):\n\t    state = None\n\t    for rank in range(para_block):\n\t        local_path = \"/opt/data/private/ckpt/nar_chat/megatron8_ft/checkpoint9-model_part-{}.pt\".format(rank)\n\t        with open(local_path, \"rb\") as f:\n\t            ckpt_state = torch.load(f, map_location=torch.device(\"cpu\"))\n\t        if state is None:\n\t            state = ckpt_state\n", "            continue\n\t        else:\n\t            ckpt_state = ckpt_state['model']    \n\t        for k in list(ckpt_state.keys()):\n\t            print(rank, k, ckpt_state[k].size())\n\t            if \"embed_tokens\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"embed_positions\" in k:\n\t                continue\n\t            elif \"decoder.layers\" in k and \"q_proj.weight\" in k:\n", "                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"q_proj.bias\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"k_proj.weight\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"k_proj.bias\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"v_proj.weight\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"v_proj.bias\" in k:\n", "                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"out_proj.weight\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=-1)\n\t            elif \"decoder.layers\" in k and \"out_proj.bias\" in k:\n\t                continue\n\t            elif \"decoder.layers\" in k and \"fc1.weight\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"fc1.bias\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"decoder.layers\" in k and \"fc2.weight\" in k:\n", "                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=-1)\n\t            elif \"decoder.layers\" in k and \"fc2.bias\" in k:\n\t                continue\n\t            elif \"norm\" in k:\n\t                continue\n\t            elif \"lm_head.weight\" in k: \n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"lm_head.bias\" in k:\n\t                continue\n\t            elif \"lm_head.dense.weight\" in k:\n", "                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"lm_head.dense.bias\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            elif \"embed_length.weight\" in k:\n\t                state['model'][k] = torch.cat([state['model'][k], ckpt_state[k]], dim=0)\n\t            else:\n\t                import pdb; pdb.set_trace()\n\t    torch.save(state, \"/opt/data/private/ckpt/nar_chat/megatron8_ft/model.pt\")\n\tmerge_ckpt(para_block=8)\n"]}
{"filename": "xlmr/src/generate2.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTranslate pre-processed data with a trained model.\n\t\"\"\"\n\timport ast\n\timport logging\n\timport math\n", "import os\n\timport sys\n\tfrom argparse import Namespace\n\tfrom itertools import chain\n\timport numpy as np\n\timport torch\n\tfrom omegaconf import DictConfig\n\tfrom fairseq import checkpoint_utils, options, scoring, tasks, utils\n\tfrom fairseq.dataclass.utils import convert_namespace_to_omegaconf\n\tfrom fairseq.logging import progress_bar\n", "from fairseq.logging.meters import StopwatchMeter, TimeMeter\n\tdef main(cfg: DictConfig):\n\t    if isinstance(cfg, Namespace):\n\t        cfg = convert_namespace_to_omegaconf(cfg)\n\t    assert cfg.common_eval.path is not None, \"--path required for generation!\"\n\t    assert (\n\t        not cfg.generation.sampling or cfg.generation.nbest == cfg.generation.beam\n\t    ), \"--sampling requires --nbest to be equal to --beam\"\n\t    assert (\n\t        cfg.generation.replace_unk is None or cfg.dataset.dataset_impl == \"raw\"\n", "    ), \"--replace-unk requires a raw text dataset (--dataset-impl=raw)\"\n\t    if cfg.common_eval.results_path is not None:\n\t        os.makedirs(cfg.common_eval.results_path, exist_ok=True)\n\t        output_path = os.path.join(\n\t            cfg.common_eval.results_path,\n\t            \"generate-{}.txt\".format(cfg.dataset.gen_subset),\n\t        )\n\t        with open(output_path, \"w\", buffering=1, encoding=\"utf-8\") as h:\n\t            return _main(cfg, h)\n\t    else:\n", "        return _main(cfg, sys.stdout)\n\tdef get_symbols_to_strip_from_output(generator):\n\t    if hasattr(generator, \"symbols_to_strip_from_output\"):\n\t        return generator.symbols_to_strip_from_output\n\t    else:\n\t        return {generator.eos}\n\tdef _main(cfg: DictConfig, output_file):\n\t    logging.basicConfig(\n\t        format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n\t        datefmt=\"%Y-%m-%d %H:%M:%S\",\n", "        level=os.environ.get(\"LOGLEVEL\", \"INFO\").upper(),\n\t        stream=output_file,\n\t    )\n\t    logger = logging.getLogger(\"fairseq_cli.generate\")\n\t    utils.import_user_module(cfg.common)\n\t    if cfg.dataset.max_tokens is None and cfg.dataset.batch_size is None:\n\t        cfg.dataset.max_tokens = 12000\n\t    logger.info(cfg)\n\t    # Fix seed for stochastic decoding\n\t    if cfg.common.seed is not None and not cfg.generation.no_seed_provided:\n", "        np.random.seed(cfg.common.seed)\n\t        utils.set_torch_seed(cfg.common.seed)\n\t    use_cuda = torch.cuda.is_available() and not cfg.common.cpu\n\t    # Load dataset splits\n\t    task = tasks.setup_task(cfg.task)\n\t    # Set dictionaries\n\t    try:\n\t        src_dict = getattr(task, \"source_dictionary\", None)\n\t    except NotImplementedError:\n\t        src_dict = None\n", "    tgt_dict = task.target_dictionary\n\t    overrides = ast.literal_eval(cfg.common_eval.model_overrides)\n\t    # Load ensemble\n\t    logger.info(\"loading model(s) from {}\".format(cfg.common_eval.path))\n\t    models, saved_cfg = checkpoint_utils.load_model_ensemble(\n\t        utils.split_paths(cfg.common_eval.path),\n\t        arg_overrides=overrides,\n\t        task=task,\n\t        suffix=cfg.checkpoint.checkpoint_suffix,\n\t        strict=(cfg.checkpoint.checkpoint_shard_count == 1),\n", "        num_shards=cfg.checkpoint.checkpoint_shard_count,\n\t    )\n\t    # loading the dataset should happen after the checkpoint has been loaded so we can give it the saved task config\n\t    task.load_dataset(cfg.dataset.gen_subset, task_cfg=saved_cfg.task)\n\t    if cfg.generation.lm_path is not None:\n\t        overrides[\"data\"] = cfg.task.data\n\t        try:\n\t            lms, _ = checkpoint_utils.load_model_ensemble(\n\t                [cfg.generation.lm_path], arg_overrides=overrides, task=None\n\t            )\n", "        except:\n\t            logger.warning(\n\t                f\"Failed to load language model! Please make sure that the language model dict is the same \"\n\t                f\"as target dict and is located in the data dir ({cfg.task.data})\"\n\t            )\n\t            raise\n\t        assert len(lms) == 1\n\t    else:\n\t        lms = [None]\n\t    # Optimize ensemble for generation\n", "    for model in chain(models, lms):\n\t        if model is None:\n\t            continue\n\t        if cfg.common.fp16:\n\t            model.half()\n\t        if use_cuda and not cfg.distributed_training.pipeline_model_parallel:\n\t            model.cuda()\n\t        model.prepare_for_inference_(cfg)\n\t    # Load alignment dictionary for unknown word replacement\n\t    # (None if no unknown word replacement, empty if no path to align dictionary)\n", "    align_dict = utils.load_align_dict(cfg.generation.replace_unk)\n\t    # Load dataset (possibly sharded)\n\t    itr = task.get_batch_iterator(\n\t        dataset=task.dataset(cfg.dataset.gen_subset),\n\t        max_tokens=cfg.dataset.max_tokens,\n\t        max_sentences=cfg.dataset.batch_size,\n\t        max_positions=utils.resolve_max_positions(\n\t            task.max_positions(), *[m.max_positions() for m in models]\n\t        ),\n\t        ignore_invalid_inputs=cfg.dataset.skip_invalid_size_inputs_valid_test,\n", "        required_batch_size_multiple=cfg.dataset.required_batch_size_multiple,\n\t        seed=cfg.common.seed,\n\t        num_shards=cfg.distributed_training.distributed_world_size,\n\t        shard_id=cfg.distributed_training.distributed_rank,\n\t        num_workers=cfg.dataset.num_workers,\n\t        data_buffer_size=cfg.dataset.data_buffer_size,\n\t    ).next_epoch_itr(shuffle=False)\n\t    progress = progress_bar.progress_bar(\n\t        itr,\n\t        log_format=cfg.common.log_format,\n", "        log_interval=cfg.common.log_interval,\n\t        default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t    )\n\t    # Initialize generator\n\t    gen_timer = StopwatchMeter()\n\t    extra_gen_cls_kwargs = {\"lm_model\": lms[0], \"lm_weight\": cfg.generation.lm_weight}\n\t    generator = task.build_generator(\n\t        models, cfg.generation, extra_gen_cls_kwargs=extra_gen_cls_kwargs\n\t    )\n\t    # Handle tokenization and BPE\n", "    tokenizer = task.build_tokenizer(cfg.tokenizer)\n\t    bpe = task.build_bpe(cfg.bpe)\n\t    def decode_fn(x):\n\t        if bpe is not None:\n\t            x = bpe.decode(x)\n\t        if tokenizer is not None:\n\t            x = tokenizer.decode(x)\n\t        return x\n\t    scorer = scoring.build_scorer(cfg.scoring, tgt_dict)\n\t    num_sentences = 0\n", "    has_target = True\n\t    wps_meter = TimeMeter()\n\t    for sample in progress:\n\t        sample = utils.move_to_cuda(sample) if use_cuda else sample\n\t        if \"net_input\" not in sample:\n\t            continue\n\t        prefix_tokens = None\n\t        if cfg.generation.prefix_size > 0:\n\t            prefix_tokens = sample[\"target\"][:, : cfg.generation.prefix_size]\n\t        constraints = None\n", "        if \"constraints\" in sample:\n\t            constraints = sample[\"constraints\"]\n\t        gen_timer.start()\n\t        hypos = task.inference_step(\n\t            generator,\n\t            models,\n\t            sample,\n\t            prefix_tokens=prefix_tokens,\n\t            constraints=constraints,\n\t        )\n", "        num_generated_tokens = sum(len(h[0][\"tokens\"]) for h in hypos)\n\t        gen_timer.stop(num_generated_tokens)\n\t        for i, sample_id in enumerate(sample[\"id\"].tolist()):\n\t            has_target = sample[\"target\"] is not None\n\t            # Remove padding\n\t            if \"src_tokens\" in sample[\"net_input\"]:\n\t                src_tokens = utils.strip_pad(\n\t                    sample[\"net_input\"][\"src_tokens\"][i, :], tgt_dict.pad()\n\t                )\n\t            else:\n", "                src_tokens = None\n\t            target_tokens = None\n\t            if has_target:\n\t                target_tokens = (\n\t                    utils.strip_pad(sample[\"target\"][i, :], tgt_dict.pad()).int().cpu()\n\t                )\n\t            # Either retrieve the original sentences or regenerate them from tokens.\n\t            if align_dict is not None:\n\t                src_str = task.dataset(cfg.dataset.gen_subset).src.get_original_text(\n\t                    sample_id\n", "                )\n\t                target_str = task.dataset(cfg.dataset.gen_subset).tgt.get_original_text(\n\t                    sample_id\n\t                )\n\t            else:\n\t                if src_dict is not None:\n\t                    src_str = src_dict.string(src_tokens, cfg.common_eval.post_process)\n\t                else:\n\t                    src_str = \"\"\n\t                if has_target:\n", "                    target_str = tgt_dict.string(\n\t                        target_tokens,\n\t                        cfg.common_eval.post_process,\n\t                        escape_unk=True,\n\t                        extra_symbols_to_ignore=get_symbols_to_strip_from_output(\n\t                            generator\n\t                        ),\n\t                    )\n\t            src_str = decode_fn(src_str)\n\t            if has_target:\n", "                target_str = decode_fn(target_str)\n\t            if not cfg.common_eval.quiet:\n\t                if src_dict is not None:\n\t                    print(\"S-{}\\t{}\".format(sample_id, src_str), file=output_file)\n\t                if has_target:\n\t                    print(\"T-{}\\t{}\".format(sample_id, target_str), file=output_file)\n\t            # Process top predictions\n\t            for j, hypo in enumerate(hypos[i][: cfg.generation.nbest]):\n\t                hypo_tokens, hypo_str, alignment = utils.post_process_prediction(\n\t                    hypo_tokens=hypo[\"tokens\"].int().cpu(),\n", "                    src_str=src_str,\n\t                    alignment=hypo[\"alignment\"],\n\t                    align_dict=align_dict,\n\t                    tgt_dict=tgt_dict,\n\t                    remove_bpe=cfg.common_eval.post_process,\n\t                    extra_symbols_to_ignore=get_symbols_to_strip_from_output(generator),\n\t                )\n\t                detok_hypo_str = decode_fn(hypo_str)\n\t                if not cfg.common_eval.quiet:\n\t                    score = hypo[\"score\"] / math.log(2)  # convert to base 2\n", "                    # original hypothesis (after tokenization and BPE)\n\t                    print(\n\t                        \"H-{}\\t{}\\t{}\".format(sample_id, score, hypo_str),\n\t                        file=output_file,\n\t                    )\n\t                    # detokenized hypothesis\n\t                    print(\n\t                        \"D-{}\\t{}\\t{}\".format(sample_id, score, detok_hypo_str),\n\t                        file=output_file,\n\t                    )\n", "                    print(\n\t                        \"P-{}\\t{}\".format(\n\t                            sample_id,\n\t                            \" \".join(\n\t                                map(\n\t                                    lambda x: \"{:.4f}\".format(x),\n\t                                    # convert from base e to base 2\n\t                                    hypo[\"positional_scores\"]\n\t                                    .div_(math.log(2))\n\t                                    .tolist(),\n", "                                )\n\t                            ),\n\t                        ),\n\t                        file=output_file,\n\t                    )\n\t                    if cfg.generation.print_alignment == \"hard\":\n\t                        print(\n\t                            \"A-{}\\t{}\".format(\n\t                                sample_id,\n\t                                \" \".join(\n", "                                    [\n\t                                        \"{}-{}\".format(src_idx, tgt_idx)\n\t                                        for src_idx, tgt_idx in alignment\n\t                                    ]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n\t                        )\n\t                    if cfg.generation.print_alignment == \"soft\":\n\t                        print(\n", "                            \"A-{}\\t{}\".format(\n\t                                sample_id,\n\t                                \" \".join(\n\t                                    [\",\".join(src_probs) for src_probs in alignment]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n\t                        )\n\t                    if cfg.generation.print_step:\n\t                        print(\n", "                            \"I-{}\\t{}\".format(sample_id, hypo[\"steps\"]),\n\t                            file=output_file,\n\t                        )\n\t                    if cfg.generation.retain_iter_history:\n\t                        for step, h in enumerate(hypo[\"history\"]):\n\t                            _, h_str, _ = utils.post_process_prediction(\n\t                                hypo_tokens=h[\"tokens\"].int().cpu(),\n\t                                src_str=src_str,\n\t                                alignment=None,\n\t                                align_dict=None,\n", "                                tgt_dict=tgt_dict,\n\t                                remove_bpe=None,\n\t                            )\n\t                            print(\n\t                                \"E-{}_{}\\t{}\".format(sample_id, step, h_str),\n\t                                file=output_file,\n\t                            )\n\t                # Score only the top hypothesis\n\t                if has_target and j == 0:\n\t                    if (\n", "                        align_dict is not None\n\t                        or cfg.common_eval.post_process is not None\n\t                    ):\n\t                        # Convert back to tokens for evaluation with unk replacement and/or without BPE\n\t                        target_tokens = tgt_dict.encode_line(\n\t                            target_str, add_if_not_exist=True\n\t                        )\n\t                        hypo_tokens = tgt_dict.encode_line(\n\t                            detok_hypo_str, add_if_not_exist=True\n\t                        )\n", "                    if hasattr(scorer, \"add_string\"):\n\t                        scorer.add_string(target_str, detok_hypo_str)\n\t                    else:\n\t                        scorer.add(target_tokens, hypo_tokens)\n\t        wps_meter.update(num_generated_tokens)\n\t        progress.log({\"wps\": round(wps_meter.avg)})\n\t        num_sentences += (\n\t            sample[\"nsentences\"] if \"nsentences\" in sample else sample[\"id\"].numel()\n\t        )\n\t    logger.info(\"NOTE: hypothesis and token scores are output in base 2\")\n", "    logger.info(\n\t        \"Translated {:,} sentences ({:,} tokens) in {:.1f}s ({:.2f} sentences/s, {:.2f} tokens/s)\".format(\n\t            num_sentences,\n\t            gen_timer.n,\n\t            gen_timer.sum,\n\t            num_sentences / gen_timer.sum,\n\t            1.0 / gen_timer.avg,\n\t        )\n\t    )\n\t    if has_target:\n", "        if cfg.bpe and not cfg.generation.sacrebleu:\n\t            if cfg.common_eval.post_process:\n\t                logger.warning(\n\t                    \"BLEU score is being computed by splitting detokenized string on spaces, this is probably not what you want. Use --sacrebleu for standard 13a BLEU tokenization\"\n\t                )\n\t            else:\n\t                logger.warning(\n\t                    \"If you are using BPE on the target side, the BLEU score is computed on BPE tokens, not on proper words.  Use --sacrebleu for standard 13a BLEU tokenization\"\n\t                )\n\t        # use print to be consistent with other main outputs: S-, H-, T-, D- and so on\n", "        print(\n\t            \"Generate {} with beam={}: {}\".format(\n\t                cfg.dataset.gen_subset, cfg.generation.beam, scorer.result_string()\n\t            ),\n\t            file=output_file,\n\t        )\n\t    return scorer\n\tdef cli_main():\n\t    parser = options.get_generation_parser()\n\t    # TODO: replace this workaround with refactoring of `AudioPretraining`\n", "    parser.add_argument(\n\t        \"--arch\",\n\t        \"-a\",\n\t        metavar=\"ARCH\",\n\t        default=\"wav2vec2\",\n\t        help=\"Model architecture. For constructing tasks that rely on \"\n\t        \"model args (e.g. `AudioPretraining`)\",\n\t    )\n\t    args = options.parse_args_and_arch(parser)\n\t    main(args)\n", "if __name__ == \"__main__\":\n\t    cli_main()"]}
{"filename": "xlmr/src/nar_generate.py", "chunked_list": ["#!/usr/bin/env python3 -u\n\t# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTranslate pre-processed data with a trained model.\n\t\"\"\"\n\timport ast\n\timport logging\n", "import math\n\timport os\n\timport sys\n\tfrom argparse import Namespace\n\tfrom itertools import chain\n\timport numpy as np\n\timport torch\n\tfrom omegaconf import DictConfig\n\tfrom fairseq import checkpoint_utils, options, scoring, tasks, utils\n\tfrom fairseq.dataclass.utils import convert_namespace_to_omegaconf\n", "from fairseq.logging import progress_bar\n\tfrom fairseq.logging.meters import StopwatchMeter, TimeMeter\n\timport utils as distributed_utils\n\tdef main(cfg: DictConfig):\n\t    if isinstance(cfg, Namespace):\n\t        cfg = convert_namespace_to_omegaconf(cfg)\n\t    assert cfg.common_eval.path is not None, \"--path required for generation!\"\n\t    assert (\n\t        not cfg.generation.sampling or cfg.generation.nbest == cfg.generation.beam\n\t    ), \"--sampling requires --nbest to be equal to --beam\"\n", "    assert (\n\t        cfg.generation.replace_unk is None or cfg.dataset.dataset_impl == \"raw\"\n\t    ), \"--replace-unk requires a raw text dataset (--dataset-impl=raw)\"\n\t    if cfg.common_eval.results_path is not None:\n\t        os.makedirs(cfg.common_eval.results_path, exist_ok=True)\n\t        output_path = os.path.join(\n\t            cfg.common_eval.results_path,\n\t            \"generate-{}.txt\".format(cfg.dataset.gen_subset),\n\t        )\n\t        with open(output_path, \"w\", buffering=1, encoding=\"utf-8\") as h:\n", "            return _main(cfg, h)\n\t    else:\n\t        return _main(cfg, sys.stdout)\n\tdef get_symbols_to_strip_from_output(generator):\n\t    if hasattr(generator, \"symbols_to_strip_from_output\"):\n\t        return generator.symbols_to_strip_from_output\n\t    else:\n\t        return {generator.eos}\n\tdef _main(cfg: DictConfig, output_file):\n\t    logging.basicConfig(\n", "        format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n\t        datefmt=\"%Y-%m-%d %H:%M:%S\",\n\t        level=os.environ.get(\"LOGLEVEL\", \"INFO\").upper(),\n\t        stream=output_file,\n\t    )\n\t    logger = logging.getLogger(\"fairseq_cli.generate\")\n\t    utils.import_user_module(cfg.common)\n\t    if cfg.dataset.max_tokens is None and cfg.dataset.batch_size is None:\n\t        cfg.dataset.max_tokens = 12000\n\t    logger.info(cfg)\n", "    # Fix seed for stochastic decoding\n\t    if cfg.common.seed is not None and not cfg.generation.no_seed_provided:\n\t        np.random.seed(cfg.common.seed)\n\t        utils.set_torch_seed(cfg.common.seed)\n\t    use_cuda = torch.cuda.is_available() and not cfg.common.cpu\n\t    # Load dataset splits\n\t    task = tasks.setup_task(cfg.task)\n\t    # Set dictionaries\n\t    try:\n\t        src_dict = getattr(task, \"source_dictionary\", None)\n", "    except NotImplementedError:\n\t        src_dict = None\n\t    tgt_dict = task.target_dictionary\n\t    overrides = ast.literal_eval(cfg.common_eval.model_overrides)\n\t    # Load ensemble\n\t    logger.info(\"loading model(s) from {}\".format(cfg.common_eval.path))\n\t    models, saved_cfg = checkpoint_utils.load_model_ensemble(\n\t        utils.split_paths(cfg.common_eval.path),\n\t        arg_overrides=overrides,\n\t        task=task,\n", "        suffix=cfg.checkpoint.checkpoint_suffix,\n\t        strict=(cfg.checkpoint.checkpoint_shard_count == 1),\n\t        num_shards=cfg.checkpoint.checkpoint_shard_count,\n\t    )\n\t    # loading the dataset should happen after the checkpoint has been loaded so we can give it the saved task config\n\t    task.load_dataset(cfg.dataset.gen_subset, task_cfg=saved_cfg.task)\n\t    if cfg.generation.lm_path is not None:\n\t        overrides[\"data\"] = cfg.task.data\n\t        try:\n\t            lms, _ = checkpoint_utils.load_model_ensemble(\n", "                [cfg.generation.lm_path], arg_overrides=overrides, task=None\n\t            )\n\t        except:\n\t            logger.warning(\n\t                f\"Failed to load language model! Please make sure that the language model dict is the same \"\n\t                f\"as target dict and is located in the data dir ({cfg.task.data})\"\n\t            )\n\t            raise\n\t        assert len(lms) == 1\n\t    else:\n", "        lms = [None]\n\t    # Optimize ensemble for generation\n\t    for model in chain(models, lms):\n\t        if model is None:\n\t            continue\n\t        if cfg.common.fp16:\n\t            model.half()\n\t        if use_cuda and not cfg.distributed_training.pipeline_model_parallel:\n\t            model.cuda()\n\t        model.prepare_for_inference_(cfg)\n", "    # Load alignment dictionary for unknown word replacement\n\t    # (None if no unknown word replacement, empty if no path to align dictionary)\n\t    align_dict = utils.load_align_dict(cfg.generation.replace_unk)\n\t    # Load dataset (possibly sharded)\n\t    itr = task.get_batch_iterator(\n\t        dataset=task.dataset(cfg.dataset.gen_subset),\n\t        max_tokens=cfg.dataset.max_tokens,\n\t        max_sentences=cfg.dataset.batch_size,\n\t        max_positions=utils.resolve_max_positions(\n\t            task.max_positions(), *[m.max_positions() for m in models]\n", "        ),\n\t        ignore_invalid_inputs=cfg.dataset.skip_invalid_size_inputs_valid_test,\n\t        required_batch_size_multiple=cfg.dataset.required_batch_size_multiple,\n\t        seed=cfg.common.seed,\n\t        num_shards=cfg.distributed_training.distributed_world_size,\n\t        shard_id=cfg.distributed_training.distributed_rank,\n\t        num_workers=cfg.dataset.num_workers,\n\t        data_buffer_size=cfg.dataset.data_buffer_size,\n\t    ).next_epoch_itr(shuffle=False)\n\t    progress = progress_bar.progress_bar(\n", "        itr,\n\t        log_format=cfg.common.log_format,\n\t        log_interval=cfg.common.log_interval,\n\t        default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t    )\n\t    # Initialize generator\n\t    gen_timer = StopwatchMeter()\n\t    extra_gen_cls_kwargs = {\"lm_model\": lms[0], \"lm_weight\": cfg.generation.lm_weight}\n\t    generator = task.build_generator(\n\t        models, cfg.generation, extra_gen_cls_kwargs=extra_gen_cls_kwargs\n", "    )\n\t    # Handle tokenization and BPE\n\t    tokenizer = task.build_tokenizer(cfg.tokenizer)\n\t    bpe = task.build_bpe(cfg.bpe)\n\t    def decode_fn(x):\n\t        if bpe is not None:\n\t            x = bpe.decode(x)\n\t        if tokenizer is not None:\n\t            x = tokenizer.decode(x)\n\t        return x\n", "    scorer = scoring.build_scorer(cfg.scoring, tgt_dict)\n\t    num_sentences = 0\n\t    has_target = True\n\t    wps_meter = TimeMeter()\n\t    for sample in progress:\n\t        sample = utils.move_to_cuda(sample) if use_cuda else sample\n\t        if \"net_input\" not in sample:\n\t            continue\n\t        prefix_tokens = None\n\t        if cfg.generation.prefix_size > 0:\n", "            prefix_tokens = sample[\"target\"][:, : cfg.generation.prefix_size]\n\t        constraints = None\n\t        if \"constraints\" in sample:\n\t            constraints = sample[\"constraints\"]\n\t        gen_timer.start()\n\t        hypos = task.inference_step(\n\t            generator,\n\t            models,\n\t            sample,\n\t            prefix_tokens=prefix_tokens,\n", "            constraints=constraints,\n\t        )\n\t        num_generated_tokens = sum(len(h[0][\"tokens\"]) for h in hypos)\n\t        gen_timer.stop(num_generated_tokens)\n\t        for i, sample_id in enumerate(sample[\"id\"].tolist()):\n\t            has_target = sample[\"target\"] is not None\n\t            # Remove padding\n\t            if \"src_tokens\" in sample[\"net_input\"]:\n\t                src_tokens = utils.strip_pad(\n\t                    sample[\"net_input\"][\"src_tokens\"][i, :], tgt_dict.pad()\n", "                )\n\t            else:\n\t                src_tokens = None\n\t            target_tokens = None\n\t            if has_target:\n\t                target_tokens = (\n\t                    utils.strip_pad(sample[\"net_input\"][\"xlmr_tgt_item\"][i, :], tgt_dict.pad()).int().cpu()\n\t                )\n\t            # Either retrieve the original sentences or regenerate them from tokens.\n\t            if align_dict is not None:\n", "                src_str = task.dataset(cfg.dataset.gen_subset).src.get_original_text(\n\t                    sample_id\n\t                )\n\t                target_str = task.dataset(cfg.dataset.gen_subset).tgt.get_original_text(\n\t                    sample_id\n\t                )\n\t            else:\n\t                if src_dict is not None:\n\t                    src_str = src_dict.string(src_tokens, cfg.common_eval.post_process)\n\t                else:\n", "                    src_str = \"\"\n\t                if has_target:\n\t                    target_str = tgt_dict.string(\n\t                        target_tokens,\n\t                        cfg.common_eval.post_process,\n\t                        escape_unk=True,\n\t                        extra_symbols_to_ignore=get_symbols_to_strip_from_output(\n\t                            generator\n\t                        ),\n\t                    )\n", "            src_str = decode_fn(src_str)\n\t            if has_target:\n\t                target_str = decode_fn(target_str)\n\t            if not cfg.common_eval.quiet:\n\t                if src_dict is not None:\n\t                    print(\"S-{}\\t{}\".format(sample_id, src_str), file=output_file)\n\t                if has_target:\n\t                    print(\"T-{}\\t{}\".format(sample_id, target_str), file=output_file)\n\t            # Process top predictions\n\t            for j, hypo in enumerate(hypos[i][: cfg.generation.nbest]):\n", "                hypo_tokens, hypo_str, alignment = utils.post_process_prediction(\n\t                    hypo_tokens=hypo[\"tokens\"].int().cpu(),\n\t                    src_str=src_str,\n\t                    alignment=hypo[\"alignment\"],\n\t                    align_dict=align_dict,\n\t                    tgt_dict=tgt_dict,\n\t                    remove_bpe=cfg.common_eval.post_process,\n\t                    extra_symbols_to_ignore=get_symbols_to_strip_from_output(generator),\n\t                )\n\t                detok_hypo_str = decode_fn(hypo_str)\n", "                if not cfg.common_eval.quiet:\n\t                    score = hypo[\"score\"] / math.log(2)  # convert to base 2\n\t                    # original hypothesis (after tokenization and BPE)\n\t                    print(\n\t                        \"H-{}\\t{}\\t{}\".format(sample_id, score, hypo_str),\n\t                        file=output_file,\n\t                    )\n\t                    # detokenized hypothesis\n\t                    print(\n\t                        \"D-{}\\t{}\\t{}\".format(sample_id, score, detok_hypo_str),\n", "                        file=output_file,\n\t                    )\n\t                    print(\n\t                        \"P-{}\\t{}\".format(\n\t                            sample_id,\n\t                            \" \".join(\n\t                                map(\n\t                                    lambda x: \"{:.4f}\".format(x),\n\t                                    # convert from base e to base 2\n\t                                    hypo[\"positional_scores\"]\n", "                                    .div_(math.log(2))\n\t                                    .tolist(),\n\t                                )\n\t                            ),\n\t                        ),\n\t                        file=output_file,\n\t                    )\n\t                    if cfg.generation.print_alignment == \"hard\":\n\t                        print(\n\t                            \"A-{}\\t{}\".format(\n", "                                sample_id,\n\t                                \" \".join(\n\t                                    [\n\t                                        \"{}-{}\".format(src_idx, tgt_idx)\n\t                                        for src_idx, tgt_idx in alignment\n\t                                    ]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n\t                        )\n", "                    if cfg.generation.print_alignment == \"soft\":\n\t                        print(\n\t                            \"A-{}\\t{}\".format(\n\t                                sample_id,\n\t                                \" \".join(\n\t                                    [\",\".join(src_probs) for src_probs in alignment]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n\t                        )\n", "                    if cfg.generation.print_step:\n\t                        print(\n\t                            \"I-{}\\t{}\".format(sample_id, hypo[\"steps\"]),\n\t                            file=output_file,\n\t                        )\n\t                    if cfg.generation.retain_iter_history:\n\t                        for step, h in enumerate(hypo[\"history\"]):\n\t                            _, h_str, _ = utils.post_process_prediction(\n\t                                hypo_tokens=h[\"tokens\"].int().cpu(),\n\t                                src_str=src_str,\n", "                                alignment=None,\n\t                                align_dict=None,\n\t                                tgt_dict=tgt_dict,\n\t                                remove_bpe=None,\n\t                            )\n\t                            print(\n\t                                \"E-{}_{}\\t{}\".format(sample_id, step, h_str),\n\t                                file=output_file,\n\t                            )\n\t                # Score only the top hypothesis\n", "                if has_target and j == 0:\n\t                    if (\n\t                        align_dict is not None\n\t                        or cfg.common_eval.post_process is not None\n\t                    ):\n\t                        # Convert back to tokens for evaluation with unk replacement and/or without BPE\n\t                        target_tokens = tgt_dict.encode_line(\n\t                            target_str, add_if_not_exist=True\n\t                        )\n\t                        hypo_tokens = tgt_dict.encode_line(\n", "                            detok_hypo_str, add_if_not_exist=True\n\t                        )\n\t                    if hasattr(scorer, \"add_string\"):\n\t                        scorer.add_string(target_str, detok_hypo_str)\n\t                    else:\n\t                        scorer.add(target_tokens, hypo_tokens)\n\t        wps_meter.update(num_generated_tokens)\n\t        progress.log({\"wps\": round(wps_meter.avg)})\n\t        num_sentences += (\n\t            sample[\"nsentences\"] if \"nsentences\" in sample else sample[\"id\"].numel()\n", "        )\n\t    logger.info(\"NOTE: hypothesis and token scores are output in base 2\")\n\t    logger.info(\n\t        \"Translated {:,} sentences ({:,} tokens) in {:.1f}s ({:.2f} sentences/s, {:.2f} tokens/s)\".format(\n\t            num_sentences,\n\t            gen_timer.n,\n\t            gen_timer.sum,\n\t            num_sentences / gen_timer.sum,\n\t            1.0 / gen_timer.avg,\n\t        )\n", "    )\n\t    if has_target:\n\t        if cfg.bpe and not cfg.generation.sacrebleu:\n\t            if cfg.common_eval.post_process:\n\t                logger.warning(\n\t                    \"BLEU score is being computed by splitting detokenized string on spaces, this is probably not what you want. Use --sacrebleu for standard 13a BLEU tokenization\"\n\t                )\n\t            else:\n\t                logger.warning(\n\t                    \"If you are using BPE on the target side, the BLEU score is computed on BPE tokens, not on proper words.  Use --sacrebleu for standard 13a BLEU tokenization\"\n", "                )\n\t        # use print to be consistent with other main outputs: S-, H-, T-, D- and so on\n\t        print(\n\t            \"Generate {} with beam={}: {}\".format(\n\t                cfg.dataset.gen_subset, cfg.generation.beam, scorer.result_string()\n\t            ),\n\t            file=output_file,\n\t        )\n\t    return scorer\n\tdef cli_main():\n", "    parser = options.get_generation_parser()\n\t    # TODO: replace this workaround with refactoring of `AudioPretraining`\n\t    parser.add_argument(\n\t        \"--arch\",\n\t        \"-a\",\n\t        metavar=\"ARCH\",\n\t        default=\"wav2vec2\",\n\t        help=\"Model architecture. For constructing tasks that rely on \"\n\t        \"model args (e.g. `AudioPretraining`)\",\n\t    )\n", "    args = options.parse_args_and_arch(parser)\n\t    if args.model_parallel_size > 1:\n\t        print(\"run megatron mode...\")\n\t        distributed_utils.call_main(convert_namespace_to_omegaconf(args), main)\n\t    else:\n\t        main(args)\n\tif __name__ == \"__main__\":\n\t    cli_main()\n"]}
{"filename": "xlmr/src/webapp.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport torch\n\tfrom model.llama_model import LLaMA\n\timport argparse\n\timport gradio as gr\n\tdef sample_demo(alpaca):\n\t    @torch.no_grad()\n", "    def process(prompt):\n\t        prompt_text = \"## Instruction:\\n{}\\n\\n## Response:\".format(prompt)\n\t        print(\"Received:\\n\", prompt_text)\n\t        eval_kwargs = dict(beam=1, sampling=True, sampling_topp=0.95, temperature=0.8, min_len=512)\n\t        prompts = [prompt_text]\n\t        results = alpaca.sample(prompts, **eval_kwargs)[0]\n\t        print(\"Generated:\\n\", results[0])\n\t        return str(results[0])\n\t    demo = gr.Interface(\n\t        title = \"Efficient Alpaca\",\n", "        thumbnail = \"https://github.com/dropreg/efficient_alpaca/blob/main/efficient_alpaca_logo.PNG\",\n\t        fn = process,\n\t        inputs = gr.Textbox(lines=10, placeholder=\"Your prompt here...\"),\n\t        outputs = \"text\",\n\t    )\n\t    demo.launch(share=True)\n\tdef demo(alpaca):\n\t    @torch.no_grad()\n\t    def process(prompt, temperature, topp):\n\t        prompt_text = \"## Instruction:\\n{}\\n\\n## Response:\".format(prompt)\n", "        print(\"Received:\\n\", prompt_text)\n\t        eval_kwargs = dict(sampling=True, sampling_topp=topp, temperature=temperature)\n\t        prompts = [prompt_text]\n\t        results = alpaca.sample(prompts, **eval_kwargs)[0]\n\t        print(\"Generated:\\n\", results[0])\n\t        return str(results[0])\n\t    with gr.Blocks() as demo:\n\t        gr.Markdown(\n\t            \"\"\"\n\t            <p align=\"center\" width=\"100%\">\n", "            <img src=\"https://github.com/dropreg/efficient_alpaca/raw/main/efficient_alpaca_logo.PNG\" alt=\"Efficient-Alpaca\" style=\"width: 40%; min-width: 200px; display: block; margin: auto;\">\n\t            </p>\n\t            \"\"\")\n\t        with gr.Row():\n\t            with gr.Column():\n\t                model_input = gr.Textbox(lines=15, placeholder='Input something', label='Input')\n\t                with gr.Row():\n\t                    gen = gr.Button(\"Generate\")\n\t                    clr = gr.Button(\"Clear\")\n\t            outputs = gr.Textbox(lines=15, label='Output')\n", "        gr.Markdown(\n\t            \"\"\"\n\t            Generation Parameter\n\t            \"\"\")\n\t        with gr.Row():\n\t            with gr.Column():\n\t                temperature = gr.Slider(maximum=1, value=0.8, minimum=0, label='Temperature')\n\t                topp = gr.Slider(maximum=1, value=0.95, minimum=0, label='Top P')\n\t        inputs = [model_input, temperature, topp]\n\t        gen.click(fn=process, inputs=inputs, outputs=outputs)\n", "        clr.click(fn=lambda value: gr.update(value=\"\"), inputs=clr, outputs=model_input)\n\t        gr.Markdown(\n\t            \"\"\"\n\t            Our project can be found from [Efficient Alpaca](https://github.com/dropreg/efficient_alpaca)\n\t            \"\"\")\n\t    demo.launch(share=True)\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\n\t        \"--model-dir\",\n", "        required=True,\n\t        type=str,\n\t        default=\"alpaca_lora\",\n\t        help=\"path containing model file and src_dict.txt\",\n\t    )\n\t    parser.add_argument(\n\t        \"--model-file\",\n\t        default=\"checkpoint_best.pt\",\n\t        help=\"where in model_dir are weights saved\",\n\t    )\n", "    parser.add_argument(\n\t        \"--lora-model-inf\",\n\t        default=\"\",\n\t        help=\"where in model_dir are weights saved\",\n\t    )\n\t    parser.add_argument(\n\t        \"--lora-tuning\",\n\t        action=\"store_true\",\n\t        default=False,\n\t        help=\"if true use XSUM_KWARGS else CNN_KWARGS\",\n", "    )\n\t    parser.add_argument(\"--bpe\",)\n\t    parser.add_argument(\"--sentencepiece-model\")\n\t    args = parser.parse_args()\n\t    kwargs = {\n\t        \"user_dir\": \"alpaca/src\", \n\t        \"lora_model_inf\": args.lora_model_inf,\n\t        \"bpe\": args.bpe,\n\t        \"sentencepiece_model\": args.sentencepiece_model,\n\t        \"source_lang\": 'src',\n", "        \"target_lang\": 'tgt',\n\t        \"lora_tuning\": args.lora_tuning,\n\t        \"task\": \"seq2seq_lora_task\",\n\t    }\n\t    alpaca = LLaMA.from_pretrained(\n\t        model_name_or_path=args.model_dir,\n\t        checkpoint_file=args.model_file,\n\t        **kwargs,\n\t    )\n\t    alpaca = alpaca.eval()\n", "    if torch.cuda.is_available():\n\t        alpaca = alpaca.half().cuda()\n\t    demo(alpaca)\n"]}
{"filename": "xlmr/src/megatron_trainer.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTrain a network across multiple GPUs.\n\t\"\"\"\n\tfrom fairseq.dataclass.configs import FairseqConfig\n\timport utils as distributed_utils\n\tfrom trainer import Trainer\n", "from fairscale.nn.model_parallel.random import get_cuda_rng_tracker\n\tclass MegatronTrainer(Trainer):\n\t    \"\"\"Main class for model parallel with data parallel training.\"\"\"\n\t    def __init__(self, cfg: FairseqConfig, task, model, criterion, **kwargs):\n\t        super().__init__(cfg, task, model, criterion, **kwargs)\n\t    def clip_grad_norm(self, clip_norm):\n\t        def _aggregate_model_parallel_grad_norm(total_norm):\n\t            total_norm = total_norm**2\n\t            distributed_utils.all_reduce(\n\t                total_norm, group=distributed_utils.get_model_parallel_group()\n", "            )\n\t            total_norm = total_norm**0.5\n\t            return total_norm\n\t        return self.optimizer.clip_grad_norm(\n\t            clip_norm,\n\t            aggregate_norm_fn=_aggregate_model_parallel_grad_norm,\n\t        )\n\t    def save_checkpoint(self, filename, extra_state):\n\t        \"\"\"Save all training state in a checkpoint file.\"\"\"\n\t        extra_state[\"rng_tracker_states\"] = get_cuda_rng_tracker().get_states()\n", "        super().save_checkpoint(filename, extra_state)\n\t    def load_checkpoint(\n\t        self,\n\t        filename,\n\t        reset_optimizer=False,\n\t        reset_lr_scheduler=False,\n\t        optimizer_overrides=None,\n\t        reset_meters=False,\n\t    ):\n\t        extra_state = super().load_checkpoint(\n", "            filename,\n\t            reset_optimizer=reset_optimizer,\n\t            reset_lr_scheduler=reset_lr_scheduler,\n\t            optimizer_overrides=optimizer_overrides,\n\t            reset_meters=reset_meters,\n\t        )\n\t        if extra_state is not None and \"rng_tracker_states\" in extra_state:\n\t            get_cuda_rng_tracker().set_states(extra_state[\"rng_tracker_states\"])\n\t        return extra_state\n"]}
{"filename": "xlmr/src/inference.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport torch\n\tfrom model.xlmr_model import NARXLMR\n\timport argparse\n\timport logging\n\tlogger = logging.getLogger(__name__)\n\t@torch.no_grad()\n", "def generate(xlmr_model):\n\t    # load from txt\n\t    # prompts = [\n\t    #     \"给我讲一个曹操的故事.\",\n\t    #     \"中国的最好的十所大学排名是什么？\",\n\t    # ]\n\t    prompts = [\n\t        \"Who is the author of the Lord of the Rings\",\n\t        \"Give me a story about Snow White\",\n\t        \"Give me a story about cao cao.\",\n", "        \"Write a short story in third person narration about a protagonist who has to make an important career decision.\",\n\t    ]\n\t    # load from files\n\t    # prompts = open(\"alpaca/scripts/assert/test.src\").readlines()\n\t    eval_kwargs = dict(sampling=True, sampling_topp=0.95, temperature=0.8)\n\t    for prompt in prompts:\n\t        print(\"-----\" * 20)\n\t        prompt_text = prompt\n\t        print(prompt_text)\n\t        output = xlmr_model.sample([prompt_text], **eval_kwargs)[0][0]\n", "        print(output)\n\tdef main():\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\n\t        \"--model-dir\",\n\t        required=True,\n\t        type=str,\n\t        default=\"\",\n\t        help=\"path containing model file\",\n\t    )\n", "    parser.add_argument(\n\t        \"--model-file\",\n\t        default=\"\",\n\t        help=\"where in model_dir are weights saved\",\n\t    )\n\t    parser.add_argument(\n\t        \"--lora-model-inf\",\n\t        default=\"\",\n\t        help=\"where in model_dir are weights saved\",\n\t    )\n", "    parser.add_argument(\n\t        \"--lora-tuning\",\n\t        action=\"store_true\",\n\t        default=False,\n\t        help=\"if true use XSUM_KWARGS else CNN_KWARGS\",\n\t    )\n\t    parser.add_argument(\"--bpe\",)\n\t    parser.add_argument(\"--sentencepiece-model\")\n\t    args = parser.parse_args()\n\t    kwargs = {\n", "        \"user_dir\": \"xlmr/src\",\n\t        \"bpe\": args.bpe,\n\t        \"sentencepiece_model\": args.sentencepiece_model,\n\t        \"source_lang\": 'src',\n\t        \"target_lang\": 'tgt',\n\t        \"task\": \"seq2seq_ft_task\",\n\t        \"iter_decode_max_iter\": 9,\n\t    }\n\t    xlmr_model = NARXLMR.from_pretrained(\n\t        model_name_or_path=args.model_dir,\n", "        checkpoint_file=args.model_file,\n\t        **kwargs,\n\t    )\n\t    xlmr_model = xlmr_model.eval()\n\t    if torch.cuda.is_available():\n\t        xlmr_model = xlmr_model.half().cuda()\n\t    generate(xlmr_model)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "xlmr/src/__init__.py", "chunked_list": ["try:\n\t    from .model import xlmr_model\n\texcept:\n\t    print(\"have been load xlmr model\")\n\tfrom .loss import cmlm_loss\n\tfrom .task import seq2seq_ft_task\n\tfrom .fsdp import cpu_adam, fully_sharded_data_parallel\n"]}
{"filename": "xlmr/src/utils.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport io\n\timport logging\n\timport os\n\timport pickle\n\timport random\n\timport socket\n", "import struct\n\timport subprocess\n\timport warnings\n\tfrom argparse import Namespace\n\tfrom collections import OrderedDict\n\tfrom dataclasses import dataclass\n\tfrom typing import Any, Dict, List, Mapping, Optional\n\timport torch\n\timport torch.distributed as dist\n\tfrom fairseq.dataclass.configs import DistributedTrainingConfig, FairseqConfig\n", "from omegaconf import open_dict\n\ttry:\n\t    import torch_xla.core.xla_model as xm\n\texcept ImportError:\n\t    xm = None\n\t# Flag to indicate if we're using Megatron\n\t# NOTE: this is a temporary hack until we move away from Megatron's model parallel init\n\t_USE_MEGATRON = False\n\t# Whether to use XLA ops (e.g., on TPUs) instead of CUDA ops.\n\t_USE_XLA = False\n", "logger = logging.getLogger(__name__)\n\tdef is_master(cfg: DistributedTrainingConfig):\n\t    return cfg.distributed_rank == 0\n\tdef infer_init_method(cfg: DistributedTrainingConfig, force_distributed=False):\n\t    if cfg.distributed_init_method is not None or cfg.tpu:\n\t        return\n\t    num_pipelines_per_node = None\n\t    if cfg.pipeline_model_parallel:\n\t        num_pipeline_devices, num_pipelines_per_node = _pipeline_parallel_pre_init(cfg)\n\t    if cfg.distributed_world_size == 1:\n", "        return\n\t    if all(\n\t        key in os.environ\n\t        for key in [\"MASTER_ADDR\", \"MASTER_PORT\", \"WORLD_SIZE\", \"RANK\"]\n\t    ):\n\t        # support torch.distributed.launch\n\t        _infer_torch_distributed_launch_init(cfg)\n\t    else:\n\t        # we can determine the init method automatically for Slurm\n\t        if not _infer_slurm_init(cfg, num_pipelines_per_node):\n", "            if cfg.distributed_port <= 0 or force_distributed:\n\t                _infer_single_node_init(cfg)\n\t        elif cfg.distributed_port <= 0:\n\t            _infer_single_node_init(cfg)\n\t    if cfg.pipeline_model_parallel:\n\t        _pipeline_parallel_post_init(cfg, num_pipeline_devices, num_pipelines_per_node)\n\t    elif not cfg.distributed_no_spawn:\n\t        with open_dict(cfg):\n\t            cfg.distributed_num_procs = min(\n\t                torch.cuda.device_count(), cfg.distributed_world_size\n", "            )\n\t    else:\n\t        if cfg.device_id > 0:\n\t            logger.info(\n\t                \"setting CUDA device={} on rank {}\".format(\n\t                    cfg.device_id, cfg.distributed_rank\n\t                )\n\t            )\n\t            torch.cuda.set_device(cfg.device_id)\n\tdef _infer_torch_distributed_launch_init(cfg: DistributedTrainingConfig):\n", "    cfg.distributed_init_method = \"env://\"\n\t    cfg.distributed_world_size = int(os.environ[\"WORLD_SIZE\"])\n\t    cfg.distributed_rank = int(os.environ[\"RANK\"])\n\t    cfg.device_id = cfg.distributed_rank % torch.cuda.device_count()\n\t    # processes are created by torch.distributed.launch\n\t    cfg.distributed_no_spawn = True\n\tdef _infer_slurm_init(cfg: DistributedTrainingConfig, num_pipelines_per_node):\n\t    node_list = os.environ.get(\"SLURM_STEP_NODELIST\")\n\t    if node_list is None:\n\t        node_list = os.environ.get(\"SLURM_JOB_NODELIST\")\n", "    if node_list is not None:\n\t        try:\n\t            hostnames = subprocess.check_output(\n\t                [\"scontrol\", \"show\", \"hostnames\", node_list]\n\t            )\n\t            cfg.distributed_init_method = \"tcp://{host}:{port}\".format(\n\t                host=hostnames.split()[0].decode(\"utf-8\"),\n\t                port=cfg.distributed_port,\n\t            )\n\t            nnodes = int(os.environ.get(\"SLURM_NNODES\"))\n", "            ntasks_per_node = os.environ.get(\"SLURM_NTASKS_PER_NODE\")\n\t            if ntasks_per_node is not None:\n\t                ntasks_per_node = int(ntasks_per_node)\n\t            else:\n\t                ntasks = int(os.environ.get(\"SLURM_NTASKS\"))\n\t                nnodes = int(os.environ.get(\"SLURM_NNODES\"))\n\t                assert ntasks % nnodes == 0\n\t                ntasks_per_node = int(ntasks / nnodes)\n\t            if ntasks_per_node == 1:\n\t                gpus_per_node = torch.cuda.device_count()\n", "                node_id = int(os.environ.get(\"SLURM_NODEID\"))\n\t                cfg.distributed_rank = node_id * gpus_per_node\n\t                cfg.distributed_world_size = nnodes * gpus_per_node\n\t            elif cfg.pipeline_model_parallel:\n\t                assert ntasks_per_node == num_pipelines_per_node, (\n\t                    \"SLURM --ntasks-per-node must match number of pipelines per \"\n\t                    \"node (={})\".format(num_pipelines_per_node)\n\t                )\n\t                cfg.distributed_no_spawn = True\n\t                # For 4-way MP on nodes with 8 GPUs, ranks will be [0, 1] on\n", "                # the first node, [1, 2] on the second node, etc. This\n\t                # matches torch.distributed.launch.\n\t                node_id = int(os.environ.get(\"SLURM_NODEID\"))\n\t                local_id = int(os.environ.get(\"SLURM_LOCALID\"))\n\t                cfg.distributed_rank = node_id * num_pipelines_per_node + local_id\n\t                # In the above example, device_id will always be in [0, 1],\n\t                # which also matches torch.distributed.launch.\n\t                cfg.device_id = local_id\n\t                # We also want to set distributed_world_size to be the total\n\t                # number of pipelines across all nodes.\n", "                cfg.distributed_world_size = nnodes * num_pipelines_per_node\n\t            else:\n\t                assert (\n\t                    ntasks_per_node == cfg.distributed_world_size // nnodes\n\t                ), f\"{ntasks_per_node}, {cfg.distributed_world_size}, {nnodes}\"\n\t                cfg.distributed_no_spawn = True\n\t                cfg.distributed_rank = int(os.environ.get(\"SLURM_PROCID\"))\n\t                cfg.device_id = int(os.environ.get(\"SLURM_LOCALID\"))\n\t            logger.info(f\"Rank {cfg.distributed_rank}, device_id: {cfg.device_id}\")\n\t            return True\n", "        except subprocess.CalledProcessError as e:  # scontrol failed\n\t            raise e\n\t        except FileNotFoundError:  # Slurm is not installed\n\t            pass\n\t    return False\n\tdef _infer_single_node_init(cfg: DistributedTrainingConfig):\n\t    assert (\n\t        cfg.distributed_world_size <= torch.cuda.device_count()\n\t    ), f\"world size is {cfg.distributed_world_size} but have {torch.cuda.device_count()} available devices\"\n\t    if cfg.distributed_port <= 0:\n", "        jobid = os.environ.get(\"SLURM_JOB_ID\")\n\t        task_id = os.environ.get(\"SLURM_ARRAY_TASK_ID\")\n\t        if jobid is not None:\n\t            if task_id is not None:\n\t                jobid += str(task_id)\n\t            jobid = int(jobid)\n\t            rng = random.Random(jobid)\n\t            port = rng.randint(10000, 60000)\n\t        else:\n\t            port = random.randint(10000, 60000)\n", "        cfg.distributed_port = port\n\t    cfg.distributed_init_method = \"tcp://localhost:{port}\".format(\n\t        port=cfg.distributed_port\n\t    )\n\tdef _pipeline_parallel_pre_init(cfg: DistributedTrainingConfig):\n\t    from fairseq import utils\n\t    balance_exists = (\n\t        cfg.pipeline_balance is not None\n\t        or cfg.pipeline_encoder_balance is not None\n\t        or cfg.pipeline_decoder_balance is not None\n", "    )\n\t    devices_exist = (\n\t        cfg.pipeline_devices is not None\n\t        or cfg.pipeline_encoder_devices is not None\n\t        or cfg.pipeline_decoder_devices is not None\n\t    )\n\t    if not balance_exists:\n\t        raise ValueError(\n\t            \"--pipeline-balance is currently required for pipeline model parallelism\"\n\t        )\n", "    if not devices_exist:\n\t        raise ValueError(\n\t            \"--pipeline-devices is currently required for pipeline model parallelism\"\n\t        )\n\t    cfg.pipeline_balance = utils.eval_str_list(cfg.pipeline_balance, type=int)\n\t    if cfg.pipeline_devices is not None:\n\t        cfg.pipeline_devices = utils.eval_str_list(cfg.pipeline_devices, type=int)\n\t        num_pipeline_devices = len(set(cfg.pipeline_devices))\n\t    else:\n\t        cfg.pipeline_encoder_devices = utils.eval_str_list(\n", "            cfg.pipeline_encoder_devices, type=int\n\t        )\n\t        cfg.pipeline_decoder_devices = utils.eval_str_list(\n\t            cfg.pipeline_decoder_devices, type=int\n\t        )\n\t        num_pipeline_devices = len(\n\t            set(cfg.pipeline_encoder_devices + cfg.pipeline_decoder_devices)\n\t        )\n\t    gpus_per_node = torch.cuda.device_count()\n\t    assert (\n", "        gpus_per_node >= num_pipeline_devices\n\t        and gpus_per_node % num_pipeline_devices == 0\n\t    ), (\n\t        \"the number of unique device IDs in --pipeline-devices must evenly divide \"\n\t        \"the number of GPUs per node (multi-node pipelining is not yet supported)\"\n\t    )\n\t    num_pipelines_per_node = gpus_per_node // num_pipeline_devices\n\t    return num_pipeline_devices, num_pipelines_per_node\n\tdef _pipeline_parallel_post_init(\n\t    cfg: DistributedTrainingConfig, num_pipeline_devices, num_pipelines_per_node\n", "):\n\t    if not cfg.distributed_no_spawn:\n\t        # When distributed_no_spawn is False, we expect distributed_rank and\n\t        # distributed_world_size to be based on the total number of GPUs, so\n\t        # we need to correct them to be based on the number of pipelines.\n\t        assert cfg.distributed_world_size % num_pipeline_devices == 0\n\t        cfg.distributed_world_size = cfg.distributed_world_size // num_pipeline_devices\n\t        # In the case of 4-way MP on nodes with 8 GPUs, we want\n\t        # distributed_rank to be the starting GPU index for each pipeline\n\t        # i.e., 0, 2, ...\n", "        gpus_per_node = torch.cuda.device_count()\n\t        assert cfg.distributed_rank % gpus_per_node == 0\n\t        assert cfg.distributed_rank % num_pipeline_devices == 0\n\t        with open_dict(cfg):\n\t            cfg.distributed_rank = cfg.distributed_rank // num_pipeline_devices\n\t            # launch one process per pipeline\n\t            cfg.distributed_num_procs = num_pipelines_per_node\n\t    # if we have 4-way MP on a node with 8 GPUs, we want device_ids to be 0\n\t    # and 4, indicating the starting device IDs for each pipeline\n\t    cfg.device_id *= num_pipeline_devices\n", "    if cfg.device_id > 0:\n\t        # if there's multiple pipelines on a node (e.g., 4-way MP on an 8\n\t        # GPU node), we need to adjust pipeline_devices accordingly\n\t        logger.debug(\n\t            \"setting CUDA device={} on rank {}\".format(\n\t                cfg.device_id, cfg.distributed_rank\n\t            )\n\t        )\n\t        torch.cuda.set_device(cfg.device_id)\n\t        with open_dict(cfg):\n", "            cfg.pipeline_devices = [cfg.device_id + d for d in cfg.pipeline_devices]\n\t        logger.info(\n\t            \"setting pipeline_devices={} on rank {}\".format(\n\t                cfg.pipeline_devices, cfg.distributed_rank\n\t            )\n\t        )\n\tdef distributed_init(cfg: FairseqConfig):\n\t    if isinstance(cfg, Namespace):\n\t        from fairseq.dataclass.utils import convert_namespace_to_omegaconf\n\t        cfg = convert_namespace_to_omegaconf(cfg)\n", "    if not cfg.common.tpu:\n\t        if torch.distributed.is_available() and torch.distributed.is_initialized():\n\t            warnings.warn(\n\t                \"Distributed is already initialized, cannot initialize twice!\"\n\t            )\n\t        else:\n\t            logger.info(\n\t                \"distributed init (rank {}): {}\".format(\n\t                    cfg.distributed_training.distributed_rank,\n\t                    cfg.distributed_training.distributed_init_method,\n", "                )\n\t            )\n\t            dist.init_process_group(\n\t                backend=cfg.distributed_training.distributed_backend,\n\t                init_method=cfg.distributed_training.distributed_init_method,\n\t                world_size=cfg.distributed_training.distributed_world_size,\n\t                rank=cfg.distributed_training.distributed_rank,\n\t            )\n\t            logger.info(\n\t                \"initialized host {} as rank {}\".format(\n", "                    socket.gethostname(),\n\t                    cfg.distributed_training.distributed_rank,\n\t                )\n\t            )\n\t            # perform a dummy all-reduce to initialize the NCCL communicator\n\t            if torch.cuda.is_available():\n\t                dist.all_reduce(torch.zeros(1).cuda())\n\t        cfg.distributed_training.distributed_rank = torch.distributed.get_rank()\n\t    else:\n\t        assert xm.xrt_world_size() == cfg.distributed_training.distributed_world_size\n", "        global _USE_XLA\n\t        _USE_XLA = True\n\t        cfg.distributed_training.device_id = xm.get_local_ordinal()\n\t        cfg.distributed_training.distributed_rank = xm.get_ordinal()\n\t        xm.rendezvous(\"distributed_init\")  # wait for all workers\n\t    if is_master(cfg.distributed_training):\n\t        logging.getLogger().setLevel(logging.INFO)\n\t    else:\n\t        logging.getLogger().setLevel(logging.WARNING)\n\t    if cfg.common.model_parallel_size > 1:\n", "        global _USE_MEGATRON\n\t        _USE_MEGATRON = True\n\t        from fairscale.nn.model_parallel.initialize import initialize_model_parallel\n\t        initialize_model_parallel(cfg.common.model_parallel_size)\n\t        from fairscale.nn.model_parallel.random import model_parallel_cuda_manual_seed\n\t        model_parallel_cuda_manual_seed(cfg.common.seed)\n\t        model_part_number = get_model_parallel_rank()\n\t        cfg.checkpoint.checkpoint_suffix += \"-model_part-{0}\".format(model_part_number)\n\t    if hasattr(cfg, \"model\") and getattr(cfg.model, \"base_layers\", 0) > 0:\n\t        cfg.checkpoint.checkpoint_suffix = (\n", "            f\"-rank-{cfg.distributed_training.distributed_rank}\"\n\t        )\n\t    return cfg.distributed_training.distributed_rank\n\tdef distributed_main(i, main, cfg: FairseqConfig, kwargs):\n\t    cfg.distributed_training.device_id = i\n\t    if torch.cuda.is_available() and not cfg.common.cpu and not cfg.common.tpu:\n\t        torch.cuda.set_device(cfg.distributed_training.device_id)\n\t    if cfg.distributed_training.distributed_rank is None:  # torch.multiprocessing.spawn\n\t        cfg.distributed_training.distributed_rank = kwargs.pop(\"start_rank\", 0) + i\n\t    cfg.distributed_training.distributed_rank = distributed_init(cfg)\n", "    after_distributed_init_fn = kwargs.pop(\"after_distributed_init_fn\", None)\n\t    if after_distributed_init_fn:\n\t        cfg = after_distributed_init_fn(cfg)\n\t    main(cfg, **kwargs)\n\t    if torch.distributed.is_initialized():\n\t        torch.distributed.barrier(get_global_group())\n\tdef call_main(cfg: FairseqConfig, main, **kwargs):\n\t    if cfg.distributed_training.distributed_init_method is None:\n\t        infer_init_method(cfg.distributed_training)\n\t    if cfg.distributed_training.distributed_init_method is not None:\n", "        # distributed training\n\t        if not cfg.distributed_training.distributed_no_spawn:\n\t            start_rank = cfg.distributed_training.distributed_rank\n\t            cfg.distributed_training.distributed_rank = None  # assign automatically\n\t            kwargs[\"start_rank\"] = start_rank\n\t            torch.multiprocessing.spawn(\n\t                fn=distributed_main,\n\t                args=(main, cfg, kwargs),\n\t                nprocs=min(\n\t                    torch.cuda.device_count(),\n", "                    cfg.distributed_training.distributed_world_size,\n\t                ),\n\t                join=True,\n\t            )\n\t        else:\n\t            distributed_main(cfg.distributed_training.device_id, main, cfg, kwargs)\n\t    elif cfg.common.tpu and cfg.distributed_training.distributed_world_size > 1:\n\t        import torch_xla.distributed.xla_multiprocessing as xmp\n\t        torch.multiprocessing.set_sharing_strategy(\"file_system\")\n\t        xmp.spawn(\n", "            fn=distributed_main,\n\t            args=(main, cfg, kwargs),\n\t            # tpu-comment:\n\t            #   8 devices in one TPU VM, is the max processes to be spawned.\n\t            #   The rest is driven by xm.distributed.xla_dist\n\t            nprocs=min(cfg.distributed_training.distributed_world_size, 8),\n\t        )\n\t    else:\n\t        # single GPU main\n\t        main(cfg, **kwargs)\n", "def use_xla():\n\t    global _USE_XLA\n\t    return _USE_XLA\n\tdef new_groups(grouped_ranks: List[List[int]]):\n\t    if use_xla():\n\t        return (\"tpu\", grouped_ranks)\n\t    else:\n\t        groups = [dist.new_group(g) for g in grouped_ranks]\n\t        my_group_idx = _find_my_group_index(grouped_ranks)\n\t        return groups[my_group_idx]\n", "def _find_my_group_index(grouped_ranks):\n\t    my_rank = get_global_rank()\n\t    for i, group in enumerate(grouped_ranks):\n\t        if my_rank in group:\n\t            return i\n\t    raise RuntimeError\n\tdef _find_my_group(grouped_ranks):\n\t    index = _find_my_group_index(grouped_ranks)\n\t    return grouped_ranks[index]\n\tdef get_rank(group):\n", "    if use_xla():\n\t        assert group[0] == \"tpu\"\n\t        my_group = _find_my_group(group[1])\n\t        return my_group.index(get_global_rank())\n\t    else:\n\t        return dist.get_rank(group=group)\n\tdef get_world_size(group):\n\t    if use_xla():\n\t        assert group[0] == \"tpu\"\n\t        my_group = _find_my_group(group[1])\n", "        return len(my_group)\n\t    elif torch.distributed.is_initialized():\n\t        return dist.get_world_size(group=group)\n\t    else:\n\t        return 1\n\tdef get_global_group():\n\t    if use_xla():\n\t        return new_groups([list(range(get_global_world_size()))])\n\t    elif torch.distributed.is_initialized():\n\t        if not hasattr(get_global_group, \"_global_group\"):\n", "            # ideally we could use torch.distributed.group.WORLD, but it seems\n\t            # to cause random NCCL hangs in some cases\n\t            get_global_group._global_group = dist.new_group()\n\t        return get_global_group._global_group\n\t    else:\n\t        return None\n\tdef get_global_rank():\n\t    if use_xla():\n\t        return xm.get_ordinal()\n\t    elif torch.distributed.is_initialized():\n", "        return torch.distributed.get_rank()\n\t    else:\n\t        return 0\n\tdef get_global_world_size():\n\t    if use_xla():\n\t        return xm.xrt_world_size()\n\t    elif torch.distributed.is_initialized():\n\t        return torch.distributed.get_world_size()\n\t    else:\n\t        return 1\n", "def get_data_parallel_group():\n\t    \"\"\"Get the data parallel group the caller rank belongs to.\"\"\"\n\t    global _USE_MEGATRON\n\t    if _USE_MEGATRON:\n\t        from fairscale.nn.model_parallel import initialize as mpu\n\t        return mpu.get_data_parallel_group()\n\t    else:\n\t        return get_global_group()\n\tdef get_data_parallel_rank():\n\t    \"\"\"Return my rank for the data parallel group.\"\"\"\n", "    return get_rank(get_data_parallel_group())\n\tdef get_data_parallel_world_size():\n\t    \"\"\"Return world size for the data parallel group.\"\"\"\n\t    return get_world_size(get_data_parallel_group())\n\tdef get_model_parallel_group():\n\t    global _USE_MEGATRON\n\t    if _USE_MEGATRON:\n\t        from fairscale.nn.model_parallel import initialize as mpu\n\t        return mpu.get_model_parallel_group()\n\t    else:\n", "        return None\n\tdef get_model_parallel_rank():\n\t    \"\"\"Return my rank for the model parallel group.\"\"\"\n\t    return get_rank(get_model_parallel_group())\n\tdef get_model_parallel_world_size():\n\t    \"\"\"Return world size for the model parallel group.\"\"\"\n\t    return get_world_size(get_model_parallel_group())\n\tdef all_reduce(tensor, group, op=\"sum\"):\n\t    if use_xla():\n\t        assert isinstance(group, tuple) and group[0] == \"tpu\"\n", "        tensor = [tensor]  # wrap in a list to make xm.all_reduce in-place\n\t        return xm.all_reduce(op, tensor, groups=group[1])[0]\n\t    else:\n\t        if op == \"sum\":\n\t            op = dist.ReduceOp.SUM\n\t        elif op == \"max\":\n\t            op = dist.ReduceOp.MAX\n\t        else:\n\t            raise NotImplementedError\n\t        dist.all_reduce(tensor, op=op, group=group)\n", "        return tensor\n\tdef broadcast(tensor, src, group):\n\t    if use_xla():\n\t        # XLA doesn't support broadcast, hack it with all_reduce\n\t        if get_rank(group) != src:\n\t            tensor.zero_()\n\t        all_reduce(tensor, group)\n\t    else:\n\t        dist.broadcast(tensor, src=src, group=group)\n\tdef all_to_all(tensor, group):\n", "    \"\"\"Perform an all-to-all operation on a 1D Tensor.\"\"\"\n\t    assert tensor.dim() == 1\n\t    split_count = get_world_size(group=group)\n\t    assert tensor.numel() % split_count == 0\n\t    if use_xla():\n\t        assert isinstance(group, tuple) and group[0] == \"tpu\"\n\t        return xm.all_to_all(\n\t            tensor,\n\t            split_dimension=0,\n\t            concat_dimension=0,\n", "            split_count=split_count,\n\t            groups=group[1],\n\t        )\n\t    else:\n\t        output = torch.zeros_like(tensor)\n\t        dist.all_to_all_single(output, tensor, group=group)\n\t        return output\n\tdef all_gather(tensor, group, return_tensor=False):\n\t    \"\"\"Perform an all-gather operation.\"\"\"\n\t    if use_xla():\n", "        result = xm.all_gather(tensor, groups=group[1])\n\t        world_size = get_world_size(group=group)\n\t        result = result.view(world_size, *tensor.size())\n\t        if return_tensor:\n\t            return result\n\t        else:\n\t            return [result[i] for i in range(world_size)]\n\t    else:\n\t        world_size = get_world_size(group=group)\n\t        rank = get_rank(group=group)\n", "        tensor_list = [\n\t            tensor if i == rank else torch.empty_like(tensor) for i in range(world_size)\n\t        ]\n\t        dist.all_gather(tensor_list, tensor, group=group)\n\t        if return_tensor:\n\t            return torch.stack(tensor_list, dim=0)\n\t        else:\n\t            return tensor_list\n\tdef all_gather_list(data, group=None, max_size=16384):\n\t    \"\"\"Gathers arbitrary data from all nodes into a list.\n", "    Similar to :func:`~torch.distributed.all_gather` but for arbitrary Python\n\t    data. Note that *data* must be picklable and any CUDA tensors will be moved\n\t    to CPU and returned on CPU as well.\n\t    Args:\n\t        data (Any): data from the local worker to be gathered on other workers\n\t        group: group of the collective\n\t        max_size (int, optional): maximum size of the data to be gathered\n\t            across workers\n\t    \"\"\"\n\t    from fairseq import utils\n", "    if group is None:\n\t        group = get_global_group()\n\t    rank = get_rank(group=group)\n\t    world_size = get_world_size(group=group)\n\t    buffer_size = max_size * world_size\n\t    if (\n\t        not hasattr(all_gather_list, \"_buffer\")\n\t        or all_gather_list._buffer.numel() < buffer_size\n\t    ):\n\t        all_gather_list._buffer = torch.cuda.ByteTensor(buffer_size)\n", "        all_gather_list._cpu_buffer = torch.ByteTensor(max_size).pin_memory()\n\t    buffer = all_gather_list._buffer\n\t    buffer.zero_()\n\t    cpu_buffer = all_gather_list._cpu_buffer\n\t    data = utils.move_to_cpu(data)\n\t    enc = pickle.dumps(data)\n\t    enc_size = len(enc)\n\t    header_size = 4  # size of header that contains the length of the encoded data\n\t    size = header_size + enc_size\n\t    if size > max_size:\n", "        raise ValueError(\n\t            \"encoded data size ({}) exceeds max_size ({})\".format(size, max_size)\n\t        )\n\t    header = struct.pack(\">I\", enc_size)\n\t    cpu_buffer[:size] = torch.ByteTensor(list(header + enc))\n\t    start = rank * max_size\n\t    buffer[start : start + size].copy_(cpu_buffer[:size])\n\t    all_reduce(buffer, group=group)\n\t    buffer = buffer.cpu()\n\t    try:\n", "        result = []\n\t        for i in range(world_size):\n\t            out_buffer = buffer[i * max_size : (i + 1) * max_size]\n\t            (enc_size,) = struct.unpack(\">I\", bytes(out_buffer[:header_size].tolist()))\n\t            if enc_size > 0:\n\t                result.append(\n\t                    pickle.loads(\n\t                        bytes(out_buffer[header_size : header_size + enc_size].tolist())\n\t                    )\n\t                )\n", "        return result\n\t    except pickle.UnpicklingError:\n\t        raise Exception(\n\t            \"Unable to unpickle data from other workers. all_gather_list requires all \"\n\t            \"workers to enter the function together, so this error usually indicates \"\n\t            \"that the workers have fallen out of sync somehow. Workers can fall out of \"\n\t            \"sync if one of them runs out of memory, or if there are other conditions \"\n\t            \"in your training script that can cause one worker to finish an epoch \"\n\t            \"while other workers are still iterating over their portions of the data. \"\n\t            \"Try rerunning with --ddp-backend=legacy_ddp and see if that helps.\"\n", "        )\n\tdef all_reduce_dict(data: Mapping[str, Any], device, group) -> Dict[str, Any]:\n\t    \"\"\"\n\t    AllReduce a dictionary of values across workers. We separately\n\t    reduce items that are already on the device and items on CPU for\n\t    better performance.\n\t    Args:\n\t        data (Mapping[str, Any]): dictionary of data to all-reduce, but\n\t            cannot be a nested dictionary\n\t        device (torch.device): device for the reduction\n", "        group: group of the collective\n\t    \"\"\"\n\t    data_keys = list(data.keys())\n\t    # We want to separately reduce items that are already on the\n\t    # device and items on CPU for performance reasons.\n\t    cpu_data = OrderedDict()\n\t    device_data = OrderedDict()\n\t    for k in data_keys:\n\t        t = data[k]\n\t        if not torch.is_tensor(t):\n", "            cpu_data[k] = torch.tensor(t, dtype=torch.double)\n\t        elif t.device.type != device.type:\n\t            cpu_data[k] = t.to(dtype=torch.double)\n\t        else:\n\t            device_data[k] = t.to(dtype=torch.double)\n\t    def _all_reduce_dict(data: OrderedDict):\n\t        if len(data) == 0:\n\t            return data\n\t        buf = torch.cat([t.view(-1) for t in data.values()]).to(device=device)\n\t        all_reduce(buf, group=group)\n", "        split_buf = torch.split(buf.clone(), [t.numel() for t in data.values()])\n\t        reduced_data = [t.view_as(orig) for t, orig in zip(split_buf, data.values())]\n\t        return OrderedDict(zip(data.keys(), reduced_data))\n\t    cpu_data = _all_reduce_dict(cpu_data)\n\t    device_data = _all_reduce_dict(device_data)\n\t    def get_from_stack(key):\n\t        if key in cpu_data:\n\t            return cpu_data[key]\n\t        elif key in device_data:\n\t            return device_data[key]\n", "        raise KeyError\n\t    return OrderedDict([(key, get_from_stack(key)) for key in data_keys])\n\tdef broadcast_tensors(\n\t    tensors: Optional[List[torch.Tensor]],\n\t    src_rank: int,\n\t    group: object,\n\t    dist_device: Optional[torch.device] = None,\n\t) -> List[torch.Tensor]:\n\t    \"\"\"\n\t    Broadcasts a list of tensors without other (non-src) ranks needing to know\n", "    the dtypes/shapes of the tensors.\n\t    \"\"\"\n\t    if dist_device is None:\n\t        if torch.distributed.get_backend(group) == \"nccl\":\n\t            dist_device = torch.device(\"cuda\")\n\t        else:\n\t            dist_device = torch.device(\"cpu\")\n\t    # share metadata first to simplify transfer\n\t    is_src_rank = get_rank(group) == src_rank\n\t    if is_src_rank:\n", "        metadata = [\n\t            {\"size\": t.size(), \"dtype\": t.dtype, \"device\": t.device} for t in tensors\n\t        ]\n\t        metadata = _broadcast_object_slow(metadata, src_rank, group, dist_device)\n\t    else:\n\t        metadata = _broadcast_object_slow(None, src_rank, group, dist_device)\n\t    out_tensors = []\n\t    for i, meta in enumerate(metadata):\n\t        if is_src_rank:\n\t            tensor = tensors[i]\n", "            broadcast(tensors[i].to(dist_device), src=src_rank, group=group)\n\t        else:\n\t            tensor = torch.zeros(\n\t                [meta[\"size\"].numel()], dtype=meta[\"dtype\"], device=dist_device\n\t            )\n\t            broadcast(tensor, src=src_rank, group=group)\n\t        tensor = tensor.view(meta[\"size\"]).to(meta[\"device\"])\n\t        out_tensors.append(tensor)\n\t    return out_tensors\n\tdef broadcast_object(\n", "    obj: Any,\n\t    src_rank: int,\n\t    group: object,\n\t    dist_device: Optional[torch.device] = None,\n\t) -> Any:\n\t    \"\"\"Broadcast an arbitrary Python object to other workers.\"\"\"\n\t    if dist_device is None:\n\t        if torch.distributed.get_backend(group) == \"nccl\":\n\t            dist_device = torch.device(\"cuda\")\n\t        else:\n", "            dist_device = torch.device(\"cpu\")\n\t    if get_rank(group) == src_rank:\n\t        # split the tensors from the non-tensors so we can broadcast them\n\t        # directly, avoiding unnecessary serialization/deserialization\n\t        tensors = []\n\t        obj = _split_tensors_from_obj(obj, tensors)\n\t        obj = _broadcast_object_slow(obj, src_rank, group, dist_device)\n\t        tensors = broadcast_tensors(tensors, src_rank, group, dist_device)\n\t    else:\n\t        obj = _broadcast_object_slow(None, src_rank, group, dist_device)\n", "        tensors = broadcast_tensors(None, src_rank, group, dist_device)\n\t    return _put_tensors_in_obj(obj, tensors)\n\tdef _broadcast_object_slow(\n\t    obj: Any,\n\t    src_rank: int,\n\t    group: object,\n\t    dist_device: torch.device,\n\t) -> Any:\n\t    if get_rank(group) == src_rank:\n\t        # Emit data\n", "        buffer = io.BytesIO()\n\t        torch.save(obj, buffer)\n\t        buffer = torch.ByteTensor(buffer.getbuffer()).to(dist_device)\n\t        length = torch.LongTensor([len(buffer)]).to(dist_device)\n\t        broadcast(length, src=src_rank, group=group)\n\t        broadcast(buffer, src=src_rank, group=group)\n\t    else:\n\t        # Fetch from the source\n\t        length = torch.LongTensor([0]).to(dist_device)\n\t        broadcast(length, src=src_rank, group=group)\n", "        buffer = torch.ByteTensor(int(length.item())).to(dist_device)\n\t        broadcast(buffer, src=src_rank, group=group)\n\t        buffer = io.BytesIO(buffer.cpu().numpy())\n\t        obj = torch.load(buffer, map_location=\"cpu\")\n\t    return obj\n\t@dataclass(frozen=True)\n\tclass _TensorPlaceholder:\n\t    index: int\n\tdef _split_tensors_from_obj(obj: Any, tensors: List[torch.Tensor]) -> Any:\n\t    if torch.is_tensor(obj):\n", "        placeholder = _TensorPlaceholder(index=len(tensors))\n\t        tensors.append(obj)\n\t        return placeholder\n\t    elif isinstance(obj, dict):\n\t        return {k: _split_tensors_from_obj(v, tensors) for k, v in obj.items()}\n\t    elif isinstance(obj, list):\n\t        return [_split_tensors_from_obj(v, tensors) for v in obj]\n\t    elif isinstance(obj, tuple):\n\t        return tuple(_split_tensors_from_obj(v, tensors) for v in obj)\n\t    elif isinstance(obj, set):\n", "        return {_split_tensors_from_obj(v, tensors) for v in obj}\n\t    else:\n\t        return obj\n\tdef _put_tensors_in_obj(obj: Any, tensors: List[torch.Tensor]) -> Any:\n\t    if isinstance(obj, _TensorPlaceholder):\n\t        return tensors[obj.index]\n\t    elif isinstance(obj, dict):\n\t        return {k: _put_tensors_in_obj(v, tensors) for k, v in obj.items()}\n\t    elif isinstance(obj, list):\n\t        return [_put_tensors_in_obj(v, tensors) for v in obj]\n", "    elif isinstance(obj, tuple):\n\t        return tuple(_put_tensors_in_obj(v, tensors) for v in obj)\n\t    elif isinstance(obj, set):\n\t        return {_put_tensors_in_obj(v, tensors) for v in obj}\n\t    else:\n\t        return obj"]}
{"filename": "xlmr/src/train_fsdp.py", "chunked_list": ["#!/usr/bin/env python3 -u\n\t# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTrain a new model on one or across multiple GPUs.\n\t\"\"\"\n\timport argparse\n\timport logging\n", "import math\n\timport os\n\timport sys\n\tfrom typing import Any, Callable, Dict, List, Optional, Tuple\n\t# We need to setup root logger before importing any fairseq libraries.\n\tlogging.basicConfig(\n\t    format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n\t    datefmt=\"%Y-%m-%d %H:%M:%S\",\n\t    level=os.environ.get(\"LOGLEVEL\", \"INFO\").upper(),\n\t    stream=sys.stdout,\n", ")\n\tlogger = logging.getLogger(\"fairseq_cli.train\")\n\timport numpy as np\n\timport torch\n\tfrom omegaconf import DictConfig, OmegaConf\n\tfrom fairseq import checkpoint_utils, options, quantization_utils, tasks, utils\n\tfrom fairseq.data import data_utils, iterators\n\tfrom fairseq.data.plasma_utils import PlasmaStore\n\tfrom fairseq.dataclass.configs import FairseqConfig\n\tfrom fairseq.dataclass.initialize import add_defaults\n", "from fairseq.dataclass.utils import convert_namespace_to_omegaconf\n\tfrom fairseq.distributed import utils as distributed_utils\n\tfrom fairseq.file_io import PathManager\n\tfrom fairseq.logging import meters, metrics, progress_bar\n\tfrom fairseq.model_parallel.megatron_trainer import MegatronTrainer\n\tfrom trainer import Trainer\n\tfrom fsdp.fully_sharded_data_parallel import fsdp_enable_wrap, fsdp_wrap\n\tdef main(cfg: FairseqConfig) -> None:\n\t    if isinstance(cfg, argparse.Namespace):\n\t        cfg = convert_namespace_to_omegaconf(cfg)\n", "    utils.import_user_module(cfg.common)\n\t    add_defaults(cfg)\n\t    if (\n\t        distributed_utils.is_master(cfg.distributed_training)\n\t        and \"job_logging_cfg\" in cfg\n\t    ):\n\t        # make hydra logging work with ddp (see # see https://github.com/facebookresearch/hydra/issues/1126)\n\t        logging.config.dictConfig(OmegaConf.to_container(cfg.job_logging_cfg))\n\t    assert (\n\t        cfg.dataset.max_tokens is not None or cfg.dataset.batch_size is not None\n", "    ), \"Must specify batch size either with --max-tokens or --batch-size\"\n\t    metrics.reset()\n\t    if cfg.common.log_file is not None:\n\t        handler = logging.FileHandler(filename=cfg.common.log_file)\n\t        logger.addHandler(handler)\n\t    np.random.seed(cfg.common.seed)\n\t    utils.set_torch_seed(cfg.common.seed)\n\t    if distributed_utils.is_master(cfg.distributed_training):\n\t        checkpoint_utils.verify_checkpoint_directory(cfg.checkpoint.save_dir)\n\t    # Print args\n", "    logger.info(cfg)\n\t    if cfg.checkpoint.write_checkpoints_asynchronously:\n\t        try:\n\t            import iopath  # noqa: F401\n\t        except ImportError:\n\t            logging.exception(\n\t                \"Asynchronous checkpoint writing is specified but iopath is \"\n\t                \"not installed: `pip install iopath`\"\n\t            )\n\t            return\n", "    # Setup task, e.g., translation, language modeling, etc.\n\t    task = tasks.setup_task(cfg.task)\n\t    assert cfg.criterion, \"Please specify criterion to train a model\"\n\t    if not torch.distributed.is_initialized():\n\t        os.environ['MASTER_ADDR'] = 'localhost'\n\t        os.environ['MASTER_PORT'] = '30000'\n\t        torch.distributed.init_process_group(\"nccl\", init_method='env://', rank=0, world_size=1)\n\t    # Build model and criterion\n\t    if cfg.distributed_training.ddp_backend == \"fully_sharded\":\n\t        with fsdp_enable_wrap(cfg.distributed_training):\n", "            model = fsdp_wrap(task.build_model(cfg.model))\n\t    else:\n\t        model = task.build_model(cfg.model)\n\t    criterion = task.build_criterion(cfg.criterion)\n\t    logger.info(model)\n\t    logger.info(\"task: {}\".format(task.__class__.__name__))\n\t    logger.info(\"model: {}\".format(model.__class__.__name__))\n\t    logger.info(\"criterion: {}\".format(criterion.__class__.__name__))\n\t    logger.info(\n\t        \"num. shared model params: {:,} (num. trained: {:,})\".format(\n", "            sum(\n\t                p.numel() for p in model.parameters() if not getattr(p, \"expert\", False)\n\t            ),\n\t            sum(\n\t                p.numel()\n\t                for p in model.parameters()\n\t                if not getattr(p, \"expert\", False) and p.requires_grad\n\t            ),\n\t        )\n\t    )\n", "    logger.info(\n\t        \"num. expert model params: {} (num. trained: {})\".format(\n\t            sum(p.numel() for p in model.parameters() if getattr(p, \"expert\", False)),\n\t            sum(\n\t                p.numel()\n\t                for p in model.parameters()\n\t                if getattr(p, \"expert\", False) and p.requires_grad\n\t            ),\n\t        )\n\t    )\n", "    # Load valid dataset (we load training data below, based on the latest checkpoint)\n\t    # We load the valid dataset AFTER building the model\n\t    if not cfg.dataset.disable_validation:\n\t        data_utils.raise_if_valid_subsets_unintentionally_ignored(cfg)\n\t        if cfg.dataset.combine_valid_subsets:\n\t            task.load_dataset(\"valid\", combine=True, epoch=1)\n\t        else:\n\t            for valid_sub_split in cfg.dataset.valid_subset.split(\",\"):\n\t                task.load_dataset(valid_sub_split, combine=False, epoch=1)\n\t    # (optionally) Configure quantization\n", "    if cfg.common.quantization_config_path is not None:\n\t        quantizer = quantization_utils.Quantizer(\n\t            config_path=cfg.common.quantization_config_path,\n\t            max_epoch=cfg.optimization.max_epoch,\n\t            max_update=cfg.optimization.max_update,\n\t        )\n\t    else:\n\t        quantizer = None\n\t    # Build trainer\n\t    if cfg.common.model_parallel_size == 1:\n", "        trainer = Trainer(cfg, task, model, criterion, quantizer)\n\t    else:\n\t        trainer = MegatronTrainer(cfg, task, model, criterion)\n\t    logger.info(\n\t        \"training on {} devices (GPUs/TPUs)\".format(\n\t            cfg.distributed_training.distributed_world_size\n\t        )\n\t    )\n\t    logger.info(\n\t        \"max tokens per device = {} and max sentences per device = {}\".format(\n", "            cfg.dataset.max_tokens,\n\t            cfg.dataset.batch_size,\n\t        )\n\t    )\n\t    # Load the latest checkpoint if one is available and restore the\n\t    # corresponding train iterator\n\t    extra_state, epoch_itr = checkpoint_utils.load_checkpoint(\n\t        cfg.checkpoint,\n\t        trainer,\n\t        # don't cache epoch iterators for sharded datasets\n", "        disable_iterator_cache=task.has_sharded_data(\"train\"),\n\t    )\n\t    if cfg.common.tpu:\n\t        import torch_xla.core.xla_model as xm\n\t        xm.rendezvous(\"load_checkpoint\")  # wait for all workers\n\t    max_epoch = cfg.optimization.max_epoch or math.inf\n\t    lr = trainer.get_lr()\n\t    # TODO: a dry run on validation set to pin the memory\n\t    valid_subsets = cfg.dataset.valid_subset.split(\",\")\n\t    if not cfg.dataset.disable_validation:\n", "        for subset in valid_subsets:\n\t            logger.info('begin dry-run validation on \"{}\" subset'.format(subset))\n\t            itr = trainer.get_valid_iterator(subset).next_epoch_itr(\n\t                shuffle=False, set_dataset_epoch=False  # use a fixed valid set\n\t            )\n\t            if cfg.common.tpu:\n\t                itr = utils.tpu_data_loader(itr)\n\t            for _ in itr:\n\t                pass\n\t    # TODO: end of dry run section\n", "    train_meter = meters.StopwatchMeter()\n\t    train_meter.start()\n\t    while epoch_itr.next_epoch_idx <= max_epoch:\n\t        if lr <= cfg.optimization.stop_min_lr:\n\t            logger.info(\n\t                f\"stopping training because current learning rate ({lr}) is smaller \"\n\t                \"than or equal to minimum learning rate \"\n\t                f\"(--stop-min-lr={cfg.optimization.stop_min_lr})\"\n\t            )\n\t            break\n", "        # train for one epoch\n\t        valid_losses, should_stop = train(cfg, trainer, task, epoch_itr)\n\t        if should_stop:\n\t            break\n\t        # only use first validation loss to update the learning rate\n\t        lr = trainer.lr_step(epoch_itr.epoch, valid_losses[0])\n\t        epoch_itr = trainer.get_train_iterator(\n\t            epoch_itr.next_epoch_idx,\n\t            # sharded data: get train iterator for next epoch\n\t            load_dataset=task.has_sharded_data(\"train\"),\n", "            # don't cache epoch iterators for sharded datasets\n\t            disable_iterator_cache=task.has_sharded_data(\"train\"),\n\t        )\n\t    train_meter.stop()\n\t    logger.info(\"done training in {:.1f} seconds\".format(train_meter.sum))\n\t    # ioPath implementation to wait for all asynchronous file writes to complete.\n\t    if cfg.checkpoint.write_checkpoints_asynchronously:\n\t        logger.info(\n\t            \"ioPath PathManager waiting for all asynchronous checkpoint \"\n\t            \"writes to finish.\"\n", "        )\n\t        PathManager.async_close()\n\t        logger.info(\"ioPath PathManager finished waiting.\")\n\tdef should_stop_early(cfg: DictConfig, valid_loss: float) -> bool:\n\t    # skip check if no validation was done in the current epoch\n\t    if valid_loss is None:\n\t        return False\n\t    if cfg.checkpoint.patience <= 0:\n\t        return False\n\t    def is_better(a, b):\n", "        return a > b if cfg.checkpoint.maximize_best_checkpoint_metric else a < b\n\t    prev_best = getattr(should_stop_early, \"best\", None)\n\t    if prev_best is None or is_better(valid_loss, prev_best):\n\t        should_stop_early.best = valid_loss\n\t        should_stop_early.num_runs = 0\n\t        return False\n\t    else:\n\t        should_stop_early.num_runs += 1\n\t        if should_stop_early.num_runs >= cfg.checkpoint.patience:\n\t            logger.info(\n", "                \"early stop since valid performance hasn't improved for last {} runs\".format(\n\t                    cfg.checkpoint.patience\n\t                )\n\t            )\n\t            return True\n\t        else:\n\t            return False\n\t@metrics.aggregate(\"train\")\n\tdef train(\n\t    cfg: DictConfig, trainer: Trainer, task: tasks.FairseqTask, epoch_itr\n", ") -> Tuple[List[Optional[float]], bool]:\n\t    \"\"\"Train the model for one epoch and return validation losses.\"\"\"\n\t    # Initialize data iterator\n\t    itr = epoch_itr.next_epoch_itr(\n\t        fix_batches_to_gpus=cfg.distributed_training.fix_batches_to_gpus,\n\t        shuffle=(epoch_itr.next_epoch_idx > cfg.dataset.curriculum),\n\t    )\n\t    update_freq = (\n\t        cfg.optimization.update_freq[epoch_itr.epoch - 1]\n\t        if epoch_itr.epoch <= len(cfg.optimization.update_freq)\n", "        else cfg.optimization.update_freq[-1]\n\t    )\n\t    itr = iterators.GroupedIterator(\n\t        itr,\n\t        update_freq,\n\t        skip_remainder_batch=cfg.optimization.skip_remainder_batch,\n\t    )\n\t    if cfg.common.tpu:\n\t        itr = utils.tpu_data_loader(itr)\n\t    progress = progress_bar.progress_bar(\n", "        itr,\n\t        log_format=cfg.common.log_format,\n\t        log_file=cfg.common.log_file,\n\t        log_interval=cfg.common.log_interval,\n\t        epoch=epoch_itr.epoch,\n\t        aim_repo=(\n\t            cfg.common.aim_repo\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n", "        aim_run_hash=(\n\t            cfg.common.aim_run_hash\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n\t        aim_param_checkpoint_dir=cfg.checkpoint.save_dir,\n\t        tensorboard_logdir=(\n\t            cfg.common.tensorboard_logdir\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n", "        ),\n\t        default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t        wandb_project=(\n\t            cfg.common.wandb_project\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n\t        wandb_run_name=os.environ.get(\n\t            \"WANDB_NAME\", os.path.basename(cfg.checkpoint.save_dir)\n\t        ),\n", "        azureml_logging=(\n\t            cfg.common.azureml_logging\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else False\n\t        ),\n\t    )\n\t    progress.update_config(_flatten_config(cfg))\n\t    trainer.begin_epoch(epoch_itr.epoch)\n\t    valid_subsets = cfg.dataset.valid_subset.split(\",\")\n\t    should_stop = False\n", "    num_updates = trainer.get_num_updates()\n\t    logger.info(\"Start iterating over samples\")\n\t    for i, samples in enumerate(progress):\n\t        with metrics.aggregate(\"train_inner\"), torch.autograd.profiler.record_function(\n\t            \"train_step-%d\" % i\n\t        ):\n\t            log_output = trainer.train_step(samples)\n\t        if log_output is not None:  # not OOM, overflow, ...\n\t            # log mid-epoch stats\n\t            num_updates = trainer.get_num_updates()\n", "            if num_updates % cfg.common.log_interval == 0:\n\t                stats = get_training_stats(metrics.get_smoothed_values(\"train_inner\"))\n\t                progress.log(stats, tag=\"train_inner\", step=num_updates)\n\t                # reset mid-epoch stats after each log interval\n\t                # the end-of-epoch stats will still be preserved\n\t                metrics.reset_meters(\"train_inner\")\n\t        end_of_epoch = not itr.has_next()\n\t        valid_losses, should_stop = validate_and_save(\n\t            cfg, trainer, task, epoch_itr, valid_subsets, end_of_epoch\n\t        )\n", "        if should_stop:\n\t            break\n\t    # log end-of-epoch stats\n\t    logger.info(\"end of epoch {} (average epoch stats below)\".format(epoch_itr.epoch))\n\t    stats = get_training_stats(metrics.get_smoothed_values(\"train\"))\n\t    progress.print(stats, tag=\"train\", step=num_updates)\n\t    # reset epoch-level meters\n\t    metrics.reset_meters(\"train\")\n\t    return valid_losses, should_stop\n\tdef _flatten_config(cfg: DictConfig):\n", "    config = OmegaConf.to_container(cfg)\n\t    # remove any legacy Namespaces and replace with a single \"args\"\n\t    namespace = None\n\t    for k, v in list(config.items()):\n\t        if isinstance(v, argparse.Namespace):\n\t            namespace = v\n\t            del config[k]\n\t    if namespace is not None:\n\t        config[\"args\"] = vars(namespace)\n\t    return config\n", "def validate_and_save(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n\t    task: tasks.FairseqTask,\n\t    epoch_itr,\n\t    valid_subsets: List[str],\n\t    end_of_epoch: bool,\n\t) -> Tuple[List[Optional[float]], bool]:\n\t    num_updates = trainer.get_num_updates()\n\t    max_update = cfg.optimization.max_update or math.inf\n", "    # Stopping conditions (and an additional one based on validation loss later\n\t    # on)\n\t    should_stop = False\n\t    if num_updates >= max_update:\n\t        should_stop = True\n\t        logger.info(\n\t            f\"Stopping training due to \"\n\t            f\"num_updates: {num_updates} >= max_update: {max_update}\"\n\t        )\n\t    training_time_hours = trainer.cumulative_training_time() / (60 * 60)\n", "    if (\n\t        cfg.optimization.stop_time_hours > 0\n\t        and training_time_hours > cfg.optimization.stop_time_hours\n\t    ):\n\t        should_stop = True\n\t        logger.info(\n\t            f\"Stopping training due to \"\n\t            f\"cumulative_training_time: {training_time_hours} > \"\n\t            f\"stop_time_hours: {cfg.optimization.stop_time_hours} hour(s)\"\n\t        )\n", "    do_save = (\n\t        (end_of_epoch and epoch_itr.epoch % cfg.checkpoint.save_interval == 0)\n\t        or should_stop\n\t        or (\n\t            cfg.checkpoint.save_interval_updates > 0\n\t            and num_updates > 0\n\t            and num_updates % cfg.checkpoint.save_interval_updates == 0\n\t            and num_updates >= cfg.dataset.validate_after_updates\n\t        )\n\t    )\n", "    do_validate = (\n\t        (\n\t            (not end_of_epoch and do_save)  # validate during mid-epoch saves\n\t            or (end_of_epoch and epoch_itr.epoch % cfg.dataset.validate_interval == 0)\n\t            or should_stop\n\t            or (\n\t                cfg.dataset.validate_interval_updates > 0\n\t                and num_updates > 0\n\t                and num_updates % cfg.dataset.validate_interval_updates == 0\n\t            )\n", "        )\n\t        and not cfg.dataset.disable_validation\n\t        and num_updates >= cfg.dataset.validate_after_updates\n\t    )\n\t    # Validate\n\t    valid_losses = [None]\n\t    if do_validate:\n\t        valid_losses = validate(cfg, trainer, task, epoch_itr, valid_subsets)\n\t    should_stop |= should_stop_early(cfg, valid_losses[0])\n\t    # Save checkpoint\n", "    if do_save or should_stop:\n\t        cp_path = checkpoint_utils.save_checkpoint(\n\t            cfg.checkpoint, trainer, epoch_itr, valid_losses[0]\n\t        )\n\t        if cp_path is not None and hasattr(task, \"post_save\"):\n\t            task.post_save(cp_path, num_updates)\n\t    return valid_losses, should_stop\n\tdef get_training_stats(stats: Dict[str, Any]) -> Dict[str, Any]:\n\t    stats[\"wall\"] = round(metrics.get_meter(\"default\", \"wall\").elapsed_time, 0)\n\t    return stats\n", "def validate(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n\t    task: tasks.FairseqTask,\n\t    epoch_itr,\n\t    subsets: List[str],\n\t) -> List[Optional[float]]:\n\t    \"\"\"Evaluate the model on the validation set(s) and return the losses.\"\"\"\n\t    if cfg.dataset.fixed_validation_seed is not None:\n\t        # set fixed seed for every validation\n", "        utils.set_torch_seed(cfg.dataset.fixed_validation_seed)\n\t    trainer.begin_valid_epoch(epoch_itr.epoch)\n\t    valid_losses = []\n\t    for subset_idx, subset in enumerate(subsets):\n\t        logger.info('begin validation on \"{}\" subset'.format(subset))\n\t        # Initialize data iterator\n\t        itr = trainer.get_valid_iterator(subset).next_epoch_itr(\n\t            shuffle=False, set_dataset_epoch=False  # use a fixed valid set\n\t        )\n\t        if cfg.common.tpu:\n", "            itr = utils.tpu_data_loader(itr)\n\t        progress = progress_bar.progress_bar(\n\t            itr,\n\t            log_format=cfg.common.log_format,\n\t            log_interval=cfg.common.log_interval,\n\t            epoch=epoch_itr.epoch,\n\t            prefix=f\"valid on '{subset}' subset\",\n\t            aim_repo=(\n\t                cfg.common.aim_repo\n\t                if distributed_utils.is_master(cfg.distributed_training)\n", "                else None\n\t            ),\n\t            aim_run_hash=(\n\t                cfg.common.aim_run_hash\n\t                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            aim_param_checkpoint_dir=cfg.checkpoint.save_dir,\n\t            tensorboard_logdir=(\n\t                cfg.common.tensorboard_logdir\n", "                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t            wandb_project=(\n\t                cfg.common.wandb_project\n\t                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            wandb_run_name=os.environ.get(\n", "                \"WANDB_NAME\", os.path.basename(cfg.checkpoint.save_dir)\n\t            ),\n\t        )\n\t        # create a new root metrics aggregator so validation metrics\n\t        # don't pollute other aggregators (e.g., train meters)\n\t        with metrics.aggregate(new_root=True) as agg:\n\t            for i, sample in enumerate(progress):\n\t                if (\n\t                    cfg.dataset.max_valid_steps is not None\n\t                    and i > cfg.dataset.max_valid_steps\n", "                ):\n\t                    break\n\t                trainer.valid_step(sample)\n\t        # log validation stats\n\t        # only tracking the best metric on the 1st validation subset\n\t        tracking_best = subset_idx == 0\n\t        stats = get_valid_stats(cfg, trainer, agg.get_smoothed_values(), tracking_best)\n\t        if hasattr(task, \"post_validate\"):\n\t            task.post_validate(trainer.get_model(), stats, agg)\n\t        progress.print(stats, tag=subset, step=trainer.get_num_updates())\n", "        valid_losses.append(stats[cfg.checkpoint.best_checkpoint_metric])\n\t    return valid_losses\n\tdef get_valid_stats(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n\t    stats: Dict[str, Any],\n\t    tracking_best: bool,\n\t) -> Dict[str, Any]:\n\t    stats[\"num_updates\"] = trainer.get_num_updates()\n\t    if tracking_best and hasattr(checkpoint_utils.save_checkpoint, \"best\"):\n", "        key = \"best_{0}\".format(cfg.checkpoint.best_checkpoint_metric)\n\t        best_function = max if cfg.checkpoint.maximize_best_checkpoint_metric else min\n\t        stats[key] = best_function(\n\t            checkpoint_utils.save_checkpoint.best,\n\t            stats[cfg.checkpoint.best_checkpoint_metric],\n\t        )\n\t    return stats\n\tdef cli_main(\n\t    modify_parser: Optional[Callable[[argparse.ArgumentParser], None]] = None\n\t) -> None:\n", "    parser = options.get_training_parser()\n\t    args = options.parse_args_and_arch(parser, modify_parser=modify_parser)\n\t    cfg = convert_namespace_to_omegaconf(args)\n\t    if cfg.common.use_plasma_view:\n\t        server = PlasmaStore(path=cfg.common.plasma_path)\n\t        logger.info(\n\t            f\"Started plasma server pid {server.server.pid} {cfg.common.plasma_path}\"\n\t        )\n\t    if args.profile:\n\t        with torch.cuda.profiler.profile():\n", "            with torch.autograd.profiler.emit_nvtx():\n\t                distributed_utils.call_main(cfg, main)\n\t    else:\n\t        distributed_utils.call_main(cfg, main)\n\t    # if cfg.common.use_plasma_view:\n\t    #     server.server.kill()\n\tif __name__ == \"__main__\":\n\t    cli_main()\n"]}
{"filename": "xlmr/src/train_megatron.py", "chunked_list": ["#!/usr/bin/env python3 -u\n\t# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTrain a new model on one or across multiple GPUs.\n\t\"\"\"\n\timport argparse\n\timport logging\n", "import math\n\timport os\n\timport sys\n\tfrom typing import Any, Callable, Dict, List, Optional, Tuple\n\t# We need to setup root logger before importing any fairseq libraries.\n\tlogging.basicConfig(\n\t    format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n\t    datefmt=\"%Y-%m-%d %H:%M:%S\",\n\t    level=os.environ.get(\"LOGLEVEL\", \"INFO\").upper(),\n\t    stream=sys.stdout,\n", ")\n\tlogger = logging.getLogger(\"fairseq_cli.train\")\n\timport numpy as np\n\timport torch\n\tfrom omegaconf import DictConfig, OmegaConf\n\tfrom fairseq.utils import safe_getattr, safe_hasattr\n\tfrom fairseq import checkpoint_utils, options, quantization_utils, tasks, utils\n\tfrom fairseq.data import data_utils, iterators\n\tfrom fairseq.data.plasma_utils import PlasmaStore\n\tfrom fairseq.dataclass.configs import FairseqConfig\n", "from fairseq.dataclass.initialize import add_defaults\n\tfrom fairseq.dataclass.utils import convert_namespace_to_omegaconf\n\tfrom fairseq.distributed import fsdp_enable_wrap, fsdp_wrap\n\tfrom fairseq.file_io import PathManager\n\tfrom fairseq.logging import meters, metrics, progress_bar\n\tfrom megatron_trainer import MegatronTrainer\n\tfrom trainer import Trainer\n\timport utils as distributed_utils\n\tdef main(cfg: FairseqConfig) -> None:\n\t    if isinstance(cfg, argparse.Namespace):\n", "        cfg = convert_namespace_to_omegaconf(cfg)\n\t    utils.import_user_module(cfg.common)\n\t    add_defaults(cfg)\n\t    if (\n\t        distributed_utils.is_master(cfg.distributed_training)\n\t        and \"job_logging_cfg\" in cfg\n\t    ):\n\t        # make hydra logging work with ddp (see # see https://github.com/facebookresearch/hydra/issues/1126)\n\t        logging.config.dictConfig(OmegaConf.to_container(cfg.job_logging_cfg))\n\t    assert (\n", "        cfg.dataset.max_tokens is not None or cfg.dataset.batch_size is not None\n\t    ), \"Must specify batch size either with --max-tokens or --batch-size\"\n\t    metrics.reset()\n\t    if cfg.common.log_file is not None:\n\t        handler = logging.FileHandler(filename=cfg.common.log_file)\n\t        logger.addHandler(handler)\n\t    np.random.seed(cfg.common.seed)\n\t    utils.set_torch_seed(cfg.common.seed)\n\t    if distributed_utils.is_master(cfg.distributed_training):\n\t        checkpoint_utils.verify_checkpoint_directory(cfg.checkpoint.save_dir)\n", "    # Print args\n\t    logger.info(cfg)\n\t    if cfg.checkpoint.write_checkpoints_asynchronously:\n\t        try:\n\t            import iopath  # noqa: F401\n\t        except ImportError:\n\t            logging.exception(\n\t                \"Asynchronous checkpoint writing is specified but iopath is \"\n\t                \"not installed: `pip install iopath`\"\n\t            )\n", "            return\n\t    # Setup task, e.g., translation, language modeling, etc.\n\t    task = tasks.setup_task(cfg.task)\n\t    assert cfg.criterion, \"Please specify criterion to train a model\"\n\t    # Build model and criterion\n\t    if cfg.distributed_training.ddp_backend == \"fully_sharded\":\n\t        with fsdp_enable_wrap(cfg.distributed_training):\n\t            model = fsdp_wrap(task.build_model(cfg.model))\n\t    else:\n\t        model = task.build_model(cfg.model)\n", "    criterion = task.build_criterion(cfg.criterion)\n\t    logger.info(model)\n\t    logger.info(\"task: {}\".format(task.__class__.__name__))\n\t    logger.info(\"model: {}\".format(model.__class__.__name__))\n\t    logger.info(\"criterion: {}\".format(criterion.__class__.__name__))\n\t    logger.info(\n\t        \"num. shared model params: {:,} (num. trained: {:,})\".format(\n\t            sum(\n\t                p.numel() for p in model.parameters() if not getattr(p, \"expert\", False)\n\t            ),\n", "            sum(\n\t                p.numel()\n\t                for p in model.parameters()\n\t                if not getattr(p, \"expert\", False) and p.requires_grad\n\t            ),\n\t        )\n\t    )\n\t    logger.info(\n\t        \"num. expert model params: {} (num. trained: {})\".format(\n\t            sum(p.numel() for p in model.parameters() if getattr(p, \"expert\", False)),\n", "            sum(\n\t                p.numel()\n\t                for p in model.parameters()\n\t                if getattr(p, \"expert\", False) and p.requires_grad\n\t            ),\n\t        )\n\t    )\n\t    # Load valid dataset (we load training data below, based on the latest checkpoint)\n\t    # We load the valid dataset AFTER building the model\n\t    if not cfg.dataset.disable_validation:\n", "        data_utils.raise_if_valid_subsets_unintentionally_ignored(cfg)\n\t        if cfg.dataset.combine_valid_subsets:\n\t            task.load_dataset(\"valid\", combine=True, epoch=1)\n\t        else:\n\t            for valid_sub_split in cfg.dataset.valid_subset.split(\",\"):\n\t                task.load_dataset(valid_sub_split, combine=False, epoch=1)\n\t    # (optionally) Configure quantization\n\t    if cfg.common.quantization_config_path is not None:\n\t        quantizer = quantization_utils.Quantizer(\n\t            config_path=cfg.common.quantization_config_path,\n", "            max_epoch=cfg.optimization.max_epoch,\n\t            max_update=cfg.optimization.max_update,\n\t        )\n\t    else:\n\t        quantizer = None\n\t    # Build trainer\n\t    if cfg.common.model_parallel_size == 1:\n\t        trainer = Trainer(cfg, task, model, criterion, quantizer)\n\t    else:\n\t        trainer = MegatronTrainer(cfg, task, model, criterion)\n", "    logger.info(\n\t        \"training on {} devices (GPUs/TPUs)\".format(\n\t            cfg.distributed_training.distributed_world_size\n\t        )\n\t    )\n\t    logger.info(\n\t        \"max tokens per device = {} and max sentences per device = {}\".format(\n\t            cfg.dataset.max_tokens,\n\t            cfg.dataset.batch_size,\n\t        )\n", "    )\n\t    # Load the latest checkpoint if one is available and restore the\n\t    # corresponding train iterator\n\t    extra_state, epoch_itr = checkpoint_utils.load_checkpoint(\n\t        cfg.checkpoint,\n\t        trainer,\n\t        # don't cache epoch iterators for sharded datasets\n\t        disable_iterator_cache=task.has_sharded_data(\"train\"),\n\t    )\n\t    if cfg.common.tpu:\n", "        import torch_xla.core.xla_model as xm\n\t        xm.rendezvous(\"load_checkpoint\")  # wait for all workers\n\t    max_epoch = cfg.optimization.max_epoch or math.inf\n\t    lr = trainer.get_lr()\n\t    # TODO: a dry run on validation set to pin the memory\n\t    valid_subsets = cfg.dataset.valid_subset.split(\",\")\n\t    if not cfg.dataset.disable_validation:\n\t        for subset in valid_subsets:\n\t            logger.info('begin dry-run validation on \"{}\" subset'.format(subset))\n\t            itr = trainer.get_valid_iterator(subset).next_epoch_itr(\n", "                shuffle=False, set_dataset_epoch=False  # use a fixed valid set\n\t            )\n\t            if cfg.common.tpu:\n\t                itr = utils.tpu_data_loader(itr)\n\t            for _ in itr:\n\t                pass\n\t    # TODO: end of dry run section\n\t    train_meter = meters.StopwatchMeter()\n\t    train_meter.start()\n\t    while epoch_itr.next_epoch_idx <= max_epoch:\n", "        if lr <= cfg.optimization.stop_min_lr:\n\t            logger.info(\n\t                f\"stopping training because current learning rate ({lr}) is smaller \"\n\t                \"than or equal to minimum learning rate \"\n\t                f\"(--stop-min-lr={cfg.optimization.stop_min_lr})\"\n\t            )\n\t            break\n\t        # train for one epoch\n\t        valid_losses, should_stop = train(cfg, trainer, task, epoch_itr)\n\t        if should_stop:\n", "            break\n\t        # only use first validation loss to update the learning rate\n\t        lr = trainer.lr_step(epoch_itr.epoch, valid_losses[0])\n\t        epoch_itr = trainer.get_train_iterator(\n\t            epoch_itr.next_epoch_idx,\n\t            # sharded data: get train iterator for next epoch\n\t            load_dataset=task.has_sharded_data(\"train\"),\n\t            # don't cache epoch iterators for sharded datasets\n\t            disable_iterator_cache=task.has_sharded_data(\"train\"),\n\t        )\n", "    train_meter.stop()\n\t    logger.info(\"done training in {:.1f} seconds\".format(train_meter.sum))\n\t    # ioPath implementation to wait for all asynchronous file writes to complete.\n\t    if cfg.checkpoint.write_checkpoints_asynchronously:\n\t        logger.info(\n\t            \"ioPath PathManager waiting for all asynchronous checkpoint \"\n\t            \"writes to finish.\"\n\t        )\n\t        PathManager.async_close()\n\t        logger.info(\"ioPath PathManager finished waiting.\")\n", "def should_stop_early(cfg: DictConfig, valid_loss: float) -> bool:\n\t    # skip check if no validation was done in the current epoch\n\t    if valid_loss is None:\n\t        return False\n\t    if cfg.checkpoint.patience <= 0:\n\t        return False\n\t    def is_better(a, b):\n\t        return a > b if cfg.checkpoint.maximize_best_checkpoint_metric else a < b\n\t    prev_best = getattr(should_stop_early, \"best\", None)\n\t    if prev_best is None or is_better(valid_loss, prev_best):\n", "        should_stop_early.best = valid_loss\n\t        should_stop_early.num_runs = 0\n\t        return False\n\t    else:\n\t        should_stop_early.num_runs += 1\n\t        if should_stop_early.num_runs >= cfg.checkpoint.patience:\n\t            logger.info(\n\t                \"early stop since valid performance hasn't improved for last {} runs\".format(\n\t                    cfg.checkpoint.patience\n\t                )\n", "            )\n\t            return True\n\t        else:\n\t            return False\n\t@metrics.aggregate(\"train\")\n\tdef train(\n\t    cfg: DictConfig, trainer: Trainer, task: tasks.FairseqTask, epoch_itr\n\t) -> Tuple[List[Optional[float]], bool]:\n\t    \"\"\"Train the model for one epoch and return validation losses.\"\"\"\n\t    # Initialize data iterator\n", "    itr = epoch_itr.next_epoch_itr(\n\t        fix_batches_to_gpus=cfg.distributed_training.fix_batches_to_gpus,\n\t        shuffle=(epoch_itr.next_epoch_idx > cfg.dataset.curriculum),\n\t    )\n\t    update_freq = (\n\t        cfg.optimization.update_freq[epoch_itr.epoch - 1]\n\t        if epoch_itr.epoch <= len(cfg.optimization.update_freq)\n\t        else cfg.optimization.update_freq[-1]\n\t    )\n\t    itr = iterators.GroupedIterator(\n", "        itr,\n\t        update_freq,\n\t        skip_remainder_batch=cfg.optimization.skip_remainder_batch,\n\t    )\n\t    if cfg.common.tpu:\n\t        itr = utils.tpu_data_loader(itr)\n\t    progress = progress_bar.progress_bar(\n\t        itr,\n\t        log_format=cfg.common.log_format,\n\t        log_file=cfg.common.log_file,\n", "        log_interval=cfg.common.log_interval,\n\t        epoch=epoch_itr.epoch,\n\t        aim_repo=(\n\t            cfg.common.aim_repo\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n\t        aim_run_hash=(\n\t            cfg.common.aim_run_hash\n\t            if distributed_utils.is_master(cfg.distributed_training)\n", "            else None\n\t        ),\n\t        aim_param_checkpoint_dir=cfg.checkpoint.save_dir,\n\t        tensorboard_logdir=(\n\t            cfg.common.tensorboard_logdir\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n\t        default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t        wandb_project=(\n", "            cfg.common.wandb_project\n\t            if distributed_utils.is_master(cfg.distributed_training)\n\t            else None\n\t        ),\n\t        wandb_run_name=os.environ.get(\n\t            \"WANDB_NAME\", os.path.basename(cfg.checkpoint.save_dir)\n\t        ),\n\t        azureml_logging=(\n\t            cfg.common.azureml_logging\n\t            if distributed_utils.is_master(cfg.distributed_training)\n", "            else False\n\t        ),\n\t    )\n\t    progress.update_config(_flatten_config(cfg))\n\t    trainer.begin_epoch(epoch_itr.epoch)\n\t    valid_subsets = cfg.dataset.valid_subset.split(\",\")\n\t    should_stop = False\n\t    num_updates = trainer.get_num_updates()\n\t    logger.info(\"Start iterating over samples\")\n\t    for i, samples in enumerate(progress):\n", "        with metrics.aggregate(\"train_inner\"), torch.autograd.profiler.record_function(\n\t            \"train_step-%d\" % i\n\t        ):\n\t            log_output = trainer.train_step(samples)\n\t        if log_output is not None:  # not OOM, overflow, ...\n\t            # log mid-epoch stats\n\t            num_updates = trainer.get_num_updates()\n\t            if num_updates % cfg.common.log_interval == 0:\n\t                stats = get_training_stats(metrics.get_smoothed_values(\"train_inner\"))\n\t                progress.log(stats, tag=\"train_inner\", step=num_updates)\n", "                # reset mid-epoch stats after each log interval\n\t                # the end-of-epoch stats will still be preserved\n\t                metrics.reset_meters(\"train_inner\")\n\t        end_of_epoch = not itr.has_next()\n\t        valid_losses, should_stop = validate_and_save(\n\t            cfg, trainer, task, epoch_itr, valid_subsets, end_of_epoch\n\t        )\n\t        if should_stop:\n\t            break\n\t    # log end-of-epoch stats\n", "    logger.info(\"end of epoch {} (average epoch stats below)\".format(epoch_itr.epoch))\n\t    stats = get_training_stats(metrics.get_smoothed_values(\"train\"))\n\t    progress.print(stats, tag=\"train\", step=num_updates)\n\t    # reset epoch-level meters\n\t    metrics.reset_meters(\"train\")\n\t    return valid_losses, should_stop\n\tdef _flatten_config(cfg: DictConfig):\n\t    config = OmegaConf.to_container(cfg)\n\t    # remove any legacy Namespaces and replace with a single \"args\"\n\t    namespace = None\n", "    for k, v in list(config.items()):\n\t        if isinstance(v, argparse.Namespace):\n\t            namespace = v\n\t            del config[k]\n\t    if namespace is not None:\n\t        config[\"args\"] = vars(namespace)\n\t    return config\n\tdef validate_and_save(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n", "    task: tasks.FairseqTask,\n\t    epoch_itr,\n\t    valid_subsets: List[str],\n\t    end_of_epoch: bool,\n\t) -> Tuple[List[Optional[float]], bool]:\n\t    num_updates = trainer.get_num_updates()\n\t    max_update = cfg.optimization.max_update or math.inf\n\t    # Stopping conditions (and an additional one based on validation loss later\n\t    # on)\n\t    should_stop = False\n", "    if num_updates >= max_update:\n\t        should_stop = True\n\t        logger.info(\n\t            f\"Stopping training due to \"\n\t            f\"num_updates: {num_updates} >= max_update: {max_update}\"\n\t        )\n\t    training_time_hours = trainer.cumulative_training_time() / (60 * 60)\n\t    if (\n\t        cfg.optimization.stop_time_hours > 0\n\t        and training_time_hours > cfg.optimization.stop_time_hours\n", "    ):\n\t        should_stop = True\n\t        logger.info(\n\t            f\"Stopping training due to \"\n\t            f\"cumulative_training_time: {training_time_hours} > \"\n\t            f\"stop_time_hours: {cfg.optimization.stop_time_hours} hour(s)\"\n\t        )\n\t    do_save = (\n\t        (end_of_epoch and epoch_itr.epoch % cfg.checkpoint.save_interval == 0)\n\t        or should_stop\n", "        or (\n\t            cfg.checkpoint.save_interval_updates > 0\n\t            and num_updates > 0\n\t            and num_updates % cfg.checkpoint.save_interval_updates == 0\n\t            and num_updates >= cfg.dataset.validate_after_updates\n\t        )\n\t    )\n\t    do_validate = (\n\t        (\n\t            (not end_of_epoch and do_save)  # validate during mid-epoch saves\n", "            or (end_of_epoch and epoch_itr.epoch % cfg.dataset.validate_interval == 0)\n\t            or should_stop\n\t            or (\n\t                cfg.dataset.validate_interval_updates > 0\n\t                and num_updates > 0\n\t                and num_updates % cfg.dataset.validate_interval_updates == 0\n\t            )\n\t        )\n\t        and not cfg.dataset.disable_validation\n\t        and num_updates >= cfg.dataset.validate_after_updates\n", "    )\n\t    # Validate\n\t    valid_losses = [None]\n\t    if do_validate:\n\t        valid_losses = validate(cfg, trainer, task, epoch_itr, valid_subsets)\n\t    should_stop |= should_stop_early(cfg, valid_losses[0])\n\t    # Save checkpoint\n\t    if do_save or should_stop:\n\t        if safe_getattr(task, \"lora_tuning\", False) and \"model_part\" in trainer.checkpoint_suffix and \"model_part-0\" not in trainer.checkpoint_suffix:\n\t            print(\"skip to save checkpoint checkpoint{}.pt\".format(trainer.checkpoint_suffix))\n", "        else:\n\t            cp_path = checkpoint_utils.save_checkpoint(\n\t                cfg.checkpoint, trainer, epoch_itr, valid_losses[0]\n\t            )\n\t            if cp_path is not None and hasattr(task, \"post_save\"):\n\t                task.post_save(cp_path, num_updates)\n\t    return valid_losses, should_stop\n\tdef get_training_stats(stats: Dict[str, Any]) -> Dict[str, Any]:\n\t    stats[\"wall\"] = round(metrics.get_meter(\"default\", \"wall\").elapsed_time, 0)\n\t    return stats\n", "def validate(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n\t    task: tasks.FairseqTask,\n\t    epoch_itr,\n\t    subsets: List[str],\n\t) -> List[Optional[float]]:\n\t    \"\"\"Evaluate the model on the validation set(s) and return the losses.\"\"\"\n\t    if cfg.dataset.fixed_validation_seed is not None:\n\t        # set fixed seed for every validation\n", "        utils.set_torch_seed(cfg.dataset.fixed_validation_seed)\n\t    trainer.begin_valid_epoch(epoch_itr.epoch)\n\t    valid_losses = []\n\t    for subset_idx, subset in enumerate(subsets):\n\t        logger.info('begin validation on \"{}\" subset'.format(subset))\n\t        # Initialize data iterator\n\t        itr = trainer.get_valid_iterator(subset).next_epoch_itr(\n\t            shuffle=False, set_dataset_epoch=False  # use a fixed valid set\n\t        )\n\t        if cfg.common.tpu:\n", "            itr = utils.tpu_data_loader(itr)\n\t        progress = progress_bar.progress_bar(\n\t            itr,\n\t            log_format=cfg.common.log_format,\n\t            log_interval=cfg.common.log_interval,\n\t            epoch=epoch_itr.epoch,\n\t            prefix=f\"valid on '{subset}' subset\",\n\t            aim_repo=(\n\t                cfg.common.aim_repo\n\t                if distributed_utils.is_master(cfg.distributed_training)\n", "                else None\n\t            ),\n\t            aim_run_hash=(\n\t                cfg.common.aim_run_hash\n\t                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            aim_param_checkpoint_dir=cfg.checkpoint.save_dir,\n\t            tensorboard_logdir=(\n\t                cfg.common.tensorboard_logdir\n", "                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t            wandb_project=(\n\t                cfg.common.wandb_project\n\t                if distributed_utils.is_master(cfg.distributed_training)\n\t                else None\n\t            ),\n\t            wandb_run_name=os.environ.get(\n", "                \"WANDB_NAME\", os.path.basename(cfg.checkpoint.save_dir)\n\t            ),\n\t        )\n\t        # create a new root metrics aggregator so validation metrics\n\t        # don't pollute other aggregators (e.g., train meters)\n\t        with metrics.aggregate(new_root=True) as agg:\n\t            for i, sample in enumerate(progress):\n\t                if (\n\t                    cfg.dataset.max_valid_steps is not None\n\t                    and i > cfg.dataset.max_valid_steps\n", "                ):\n\t                    break\n\t                trainer.valid_step(sample)\n\t        # log validation stats\n\t        # only tracking the best metric on the 1st validation subset\n\t        tracking_best = subset_idx == 0\n\t        stats = get_valid_stats(cfg, trainer, agg.get_smoothed_values(), tracking_best)\n\t        if hasattr(task, \"post_validate\"):\n\t            task.post_validate(trainer.get_model(), stats, agg)\n\t        progress.print(stats, tag=subset, step=trainer.get_num_updates())\n", "        valid_losses.append(stats[cfg.checkpoint.best_checkpoint_metric])\n\t    return valid_losses\n\tdef get_valid_stats(\n\t    cfg: DictConfig,\n\t    trainer: Trainer,\n\t    stats: Dict[str, Any],\n\t    tracking_best: bool,\n\t) -> Dict[str, Any]:\n\t    stats[\"num_updates\"] = trainer.get_num_updates()\n\t    if tracking_best and hasattr(checkpoint_utils.save_checkpoint, \"best\"):\n", "        key = \"best_{0}\".format(cfg.checkpoint.best_checkpoint_metric)\n\t        best_function = max if cfg.checkpoint.maximize_best_checkpoint_metric else min\n\t        stats[key] = best_function(\n\t            checkpoint_utils.save_checkpoint.best,\n\t            stats[cfg.checkpoint.best_checkpoint_metric],\n\t        )\n\t    return stats\n\tdef cli_main(\n\t    modify_parser: Optional[Callable[[argparse.ArgumentParser], None]] = None\n\t) -> None:\n", "    parser = options.get_training_parser()\n\t    args = options.parse_args_and_arch(parser, modify_parser=modify_parser)\n\t    cfg = convert_namespace_to_omegaconf(args)\n\t    if cfg.common.use_plasma_view:\n\t        server = PlasmaStore(path=cfg.common.plasma_path)\n\t        logger.info(\n\t            f\"Started plasma server pid {server.server.pid} {cfg.common.plasma_path}\"\n\t        )\n\t    if args.profile:\n\t        with torch.cuda.profiler.profile():\n", "            with torch.autograd.profiler.emit_nvtx():\n\t                distributed_utils.call_main(cfg, main)\n\t    else:\n\t        distributed_utils.call_main(cfg, main)\n\t    # if cfg.common.use_plasma_view:\n\t    #     server.server.kill()\n\tif __name__ == \"__main__\":\n\t    cli_main()\n"]}
{"filename": "xlmr/src/generate.py", "chunked_list": ["#!/usr/bin/env python3 -u\n\t# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTranslate pre-processed data with a trained model.\n\t\"\"\"\n\timport ast\n\timport logging\n", "import math\n\timport os\n\timport sys\n\tfrom argparse import Namespace\n\tfrom itertools import chain\n\timport numpy as np\n\timport torch\n\tfrom omegaconf import DictConfig\n\tfrom fairseq import checkpoint_utils, options, scoring, tasks, utils\n\tfrom fairseq.dataclass.utils import convert_namespace_to_omegaconf\n", "from fairseq.logging import progress_bar\n\tfrom fairseq.logging.meters import StopwatchMeter, TimeMeter\n\timport utils as distributed_utils\n\tdef main(cfg: DictConfig):\n\t    if isinstance(cfg, Namespace):\n\t        cfg = convert_namespace_to_omegaconf(cfg)\n\t    assert cfg.common_eval.path is not None, \"--path required for generation!\"\n\t    assert (\n\t        not cfg.generation.sampling or cfg.generation.nbest == cfg.generation.beam\n\t    ), \"--sampling requires --nbest to be equal to --beam\"\n", "    assert (\n\t        cfg.generation.replace_unk is None or cfg.dataset.dataset_impl == \"raw\"\n\t    ), \"--replace-unk requires a raw text dataset (--dataset-impl=raw)\"\n\t    if cfg.common_eval.results_path is not None:\n\t        os.makedirs(cfg.common_eval.results_path, exist_ok=True)\n\t        output_path = os.path.join(\n\t            cfg.common_eval.results_path,\n\t            \"generate-{}.txt\".format(cfg.dataset.gen_subset),\n\t        )\n\t        with open(output_path, \"w\", buffering=1, encoding=\"utf-8\") as h:\n", "            return _main(cfg, h)\n\t    else:\n\t        return _main(cfg, sys.stdout)\n\tdef get_symbols_to_strip_from_output(generator):\n\t    if hasattr(generator, \"symbols_to_strip_from_output\"):\n\t        return generator.symbols_to_strip_from_output\n\t    else:\n\t        return {generator.eos}\n\tdef _main(cfg: DictConfig, output_file):\n\t    logging.basicConfig(\n", "        format=\"%(asctime)s | %(levelname)s | %(name)s | %(message)s\",\n\t        datefmt=\"%Y-%m-%d %H:%M:%S\",\n\t        level=os.environ.get(\"LOGLEVEL\", \"INFO\").upper(),\n\t        stream=output_file,\n\t    )\n\t    logger = logging.getLogger(\"fairseq_cli.generate\")\n\t    utils.import_user_module(cfg.common)\n\t    if cfg.dataset.max_tokens is None and cfg.dataset.batch_size is None:\n\t        cfg.dataset.max_tokens = 12000\n\t    logger.info(cfg)\n", "    # Fix seed for stochastic decoding\n\t    if cfg.common.seed is not None and not cfg.generation.no_seed_provided:\n\t        np.random.seed(cfg.common.seed)\n\t        utils.set_torch_seed(cfg.common.seed)\n\t    use_cuda = torch.cuda.is_available() and not cfg.common.cpu\n\t    # Load dataset splits\n\t    task = tasks.setup_task(cfg.task)\n\t    # Set dictionaries\n\t    try:\n\t        src_dict = getattr(task, \"source_dictionary\", None)\n", "    except NotImplementedError:\n\t        src_dict = None\n\t    tgt_dict = task.target_dictionary\n\t    overrides = ast.literal_eval(cfg.common_eval.model_overrides)\n\t    logger.info(\"cfg.checkpoint.checkpoint_suffix {}\".format(cfg.checkpoint.checkpoint_suffix))\n\t    # Load ensemble\n\t    logger.info(\"loading model(s) from {}\".format(cfg.common_eval.path))\n\t    models, saved_cfg = checkpoint_utils.load_model_ensemble(\n\t        utils.split_paths(cfg.common_eval.path),\n\t        arg_overrides=overrides,\n", "        task=task,\n\t        suffix=cfg.checkpoint.checkpoint_suffix,\n\t        strict=(cfg.checkpoint.checkpoint_shard_count == 1),\n\t        num_shards=cfg.checkpoint.checkpoint_shard_count,\n\t    )\n\t    # loading the dataset should happen after the checkpoint has been loaded so we can give it the saved task config\n\t    task.load_dataset(cfg.dataset.gen_subset, task_cfg=saved_cfg.task)\n\t    if cfg.generation.lm_path is not None:\n\t        overrides[\"data\"] = cfg.task.data\n\t        try:\n", "            lms, _ = checkpoint_utils.load_model_ensemble(\n\t                [cfg.generation.lm_path], arg_overrides=overrides, task=None\n\t            )\n\t        except:\n\t            logger.warning(\n\t                f\"Failed to load language model! Please make sure that the language model dict is the same \"\n\t                f\"as target dict and is located in the data dir ({cfg.task.data})\"\n\t            )\n\t            raise\n\t        assert len(lms) == 1\n", "    else:\n\t        lms = [None]\n\t    # Optimize ensemble for generation\n\t    for model in chain(models, lms):\n\t        if model is None:\n\t            continue\n\t        if cfg.common.fp16:\n\t            model.half()\n\t        if use_cuda and not cfg.distributed_training.pipeline_model_parallel:\n\t            model.cuda()\n", "        model.prepare_for_inference_(cfg)\n\t    # Load alignment dictionary for unknown word replacement\n\t    # (None if no unknown word replacement, empty if no path to align dictionary)\n\t    align_dict = utils.load_align_dict(cfg.generation.replace_unk)\n\t    # Load dataset (possibly sharded)\n\t    itr = task.get_batch_iterator(\n\t        dataset=task.dataset(cfg.dataset.gen_subset),\n\t        max_tokens=cfg.dataset.max_tokens,\n\t        max_sentences=cfg.dataset.batch_size,\n\t        max_positions=utils.resolve_max_positions(\n", "            task.max_positions(), *[m.max_positions() for m in models]\n\t        ),\n\t        ignore_invalid_inputs=cfg.dataset.skip_invalid_size_inputs_valid_test,\n\t        required_batch_size_multiple=cfg.dataset.required_batch_size_multiple,\n\t        seed=cfg.common.seed,\n\t        num_shards=cfg.distributed_training.distributed_world_size,\n\t        shard_id=cfg.distributed_training.distributed_rank,\n\t        num_workers=cfg.dataset.num_workers,\n\t        data_buffer_size=cfg.dataset.data_buffer_size,\n\t    ).next_epoch_itr(shuffle=False)\n", "    progress = progress_bar.progress_bar(\n\t        itr,\n\t        log_format=cfg.common.log_format,\n\t        log_interval=cfg.common.log_interval,\n\t        default_log_format=(\"tqdm\" if not cfg.common.no_progress_bar else \"simple\"),\n\t    )\n\t    # Initialize generator\n\t    gen_timer = StopwatchMeter()\n\t    generator = task.build_generator(models, args=cfg.generation)\n\t    # Handle tokenization and BPE\n", "    tokenizer = task.build_tokenizer(cfg.tokenizer)\n\t    bpe = task.build_bpe(cfg.bpe)\n\t    def decode_fn(x):\n\t        if bpe is not None:\n\t            x = bpe.decode(x.tolist())\n\t        if tokenizer is not None:\n\t            x = tokenizer.decode(x)\n\t        return x\n\t    scorer = scoring.build_scorer(cfg.scoring, tgt_dict)\n\t    num_sentences = 0\n", "    has_target = True\n\t    wps_meter = TimeMeter()\n\t    for sample in progress:\n\t        sample = utils.move_to_cuda(sample) if use_cuda else sample\n\t        if \"net_input\" not in sample:\n\t            continue\n\t        prefix_tokens = None\n\t        if cfg.generation.prefix_size > 0:\n\t            prefix_tokens = sample[\"target\"][:, : cfg.generation.prefix_size]\n\t        constraints = None\n", "        if \"constraints\" in sample:\n\t            constraints = sample[\"constraints\"]\n\t        gen_timer.start()\n\t        hypos = task.inference_step(\n\t            generator,\n\t            models,\n\t            sample,\n\t            prefix_tokens=prefix_tokens,\n\t            constraints=constraints,\n\t        )\n", "        num_generated_tokens = sum(len(h[0][\"tokens\"]) for h in hypos)\n\t        gen_timer.stop(num_generated_tokens)\n\t        for i, sample_id in enumerate(sample[\"id\"].tolist()):\n\t            has_target = sample[\"target\"] is not None\n\t            # Remove padding\n\t            if \"src_tokens\" in sample[\"net_input\"]:\n\t                src_tokens = utils.strip_pad(\n\t                    sample[\"net_input\"][\"src_tokens\"][i, :], tgt_dict.pad()\n\t                )\n\t            else:\n", "                src_tokens = None\n\t            target_tokens = None\n\t            if has_target:\n\t                target_tokens = (\n\t                    utils.strip_pad(sample[\"target\"][i, :], tgt_dict.pad()).int().cpu()\n\t                )\n\t            # Either retrieve the original sentences or regenerate them from tokens.\n\t            if align_dict is not None:\n\t                src_str = task.dataset(cfg.dataset.gen_subset).src.get_original_text(\n\t                    sample_id\n", "                )\n\t                target_str = task.dataset(cfg.dataset.gen_subset).tgt.get_original_text(\n\t                    sample_id\n\t                )\n\t            else:\n\t                if src_dict is not None:\n\t                    src_str = src_dict.string(src_tokens, cfg.common_eval.post_process)\n\t                else:\n\t                    src_str = \"\"\n\t                if has_target:\n", "                    target_str = tgt_dict.string(\n\t                        target_tokens,\n\t                        cfg.common_eval.post_process,\n\t                        escape_unk=True,\n\t                        extra_symbols_to_ignore=get_symbols_to_strip_from_output(\n\t                            generator\n\t                        ),\n\t                    )\n\t            src_str = decode_fn(src_tokens)\n\t            if has_target:\n", "                target_str = decode_fn(target_tokens)\n\t            if \"-model_part\" in cfg.checkpoint.checkpoint_suffix and \"-model_part-0\" not in cfg.checkpoint.checkpoint_suffix:\n\t                print(distributed_utils.get_model_parallel_rank())\n\t                continue\n\t            if not cfg.common_eval.quiet:\n\t                if src_dict is not None:\n\t                    print(\"S-{}\\t{}\".format(sample_id, src_str), file=output_file)\n\t                # if has_target:\n\t                #     print(\"T-{}\\t{}\".format(sample_id, target_str), file=output_file)\n\t            # Process top predictions\n", "            for j, hypo in enumerate(hypos[i][: cfg.generation.nbest]):\n\t                hypo_tokens, hypo_str, alignment = utils.post_process_prediction(\n\t                    hypo_tokens=hypo[\"tokens\"].int().cpu(),\n\t                    src_str=src_str,\n\t                    alignment=hypo[\"alignment\"],\n\t                    align_dict=align_dict,\n\t                    tgt_dict=tgt_dict,\n\t                    remove_bpe=cfg.common_eval.post_process,\n\t                    extra_symbols_to_ignore=get_symbols_to_strip_from_output(generator),\n\t                )\n", "                detok_hypo_str = decode_fn(hypo_tokens)\n\t                if not cfg.common_eval.quiet:\n\t                    score = hypo[\"score\"] / math.log(2)  # convert to base 2\n\t                    # original hypothesis (after tokenization and BPE)\n\t                    print(\n\t                        \"H-{}\\t{}\\t{}\".format(sample_id, score, hypo_str),\n\t                        file=output_file,\n\t                    )\n\t                    # detokenized hypothesis\n\t                    print(\n", "                        \"D-{}\\t{}\\t{}\".format(sample_id, score, detok_hypo_str),\n\t                        file=output_file,\n\t                    )\n\t                    # print(\n\t                    #     \"P-{}\\t{}\".format(\n\t                    #         sample_id,\n\t                    #         \" \".join(\n\t                    #             map(\n\t                    #                 lambda x: \"{:.4f}\".format(x),\n\t                    #                 # convert from base e to base 2\n", "                    #                 hypo[\"positional_scores\"]\n\t                    #                 .div_(math.log(2))\n\t                    #                 .tolist(),\n\t                    #             )\n\t                    #         ),\n\t                    #     ),\n\t                    #     file=output_file,\n\t                    # )\n\t                    if cfg.generation.print_alignment == \"hard\":\n\t                        print(\n", "                            \"A-{}\\t{}\".format(\n\t                                sample_id,\n\t                                \" \".join(\n\t                                    [\n\t                                        \"{}-{}\".format(src_idx, tgt_idx)\n\t                                        for src_idx, tgt_idx in alignment\n\t                                    ]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n", "                        )\n\t                    if cfg.generation.print_alignment == \"soft\":\n\t                        print(\n\t                            \"A-{}\\t{}\".format(\n\t                                sample_id,\n\t                                \" \".join(\n\t                                    [\",\".join(src_probs) for src_probs in alignment]\n\t                                ),\n\t                            ),\n\t                            file=output_file,\n", "                        )\n\t                    if cfg.generation.print_step:\n\t                        print(\n\t                            \"I-{}\\t{}\".format(sample_id, hypo[\"steps\"]),\n\t                            file=output_file,\n\t                        )\n\t                    if cfg.generation.retain_iter_history:\n\t                        for step, h in enumerate(hypo[\"history\"]):\n\t                            _, h_str, _ = utils.post_process_prediction(\n\t                                hypo_tokens=h[\"tokens\"].int().cpu(),\n", "                                src_str=src_str,\n\t                                alignment=None,\n\t                                align_dict=None,\n\t                                tgt_dict=tgt_dict,\n\t                                remove_bpe=None,\n\t                            )\n\t                            print(\n\t                                \"E-{}_{}\\t{}\".format(sample_id, step, h_str),\n\t                                file=output_file,\n\t                            )\n", "                # Score only the top hypothesis\n\t                if has_target and j == 0:\n\t                    if (\n\t                        align_dict is not None\n\t                        or cfg.common_eval.post_process is not None\n\t                    ):\n\t                        # Convert back to tokens for evaluation with unk replacement and/or without BPE\n\t                        target_tokens = tgt_dict.encode_line(\n\t                            target_str, add_if_not_exist=True\n\t                        )\n", "                        hypo_tokens = tgt_dict.encode_line(\n\t                            detok_hypo_str, add_if_not_exist=True\n\t                        )\n\t                    if hasattr(scorer, \"add_string\"):\n\t                        scorer.add_string(target_str, detok_hypo_str)\n\t                    else:\n\t                        scorer.add(target_tokens, hypo_tokens)\n\t        wps_meter.update(num_generated_tokens)\n\t        progress.log({\"wps\": round(wps_meter.avg)})\n\t        num_sentences += (\n", "            sample[\"nsentences\"] if \"nsentences\" in sample else sample[\"id\"].numel()\n\t        )\n\t    logger.info(\"NOTE: hypothesis and token scores are output in base 2\")\n\t    logger.info(\n\t        \"Translated {:,} sentences ({:,} tokens) in {:.1f}s ({:.2f} sentences/s, {:.2f} tokens/s)\".format(\n\t            num_sentences,\n\t            gen_timer.n,\n\t            gen_timer.sum,\n\t            num_sentences / gen_timer.sum,\n\t            1.0 / gen_timer.avg,\n", "        )\n\t    )\n\t    # if has_target:\n\t    #     if cfg.bpe and not cfg.generation.sacrebleu:\n\t    #         if cfg.common_eval.post_process:\n\t    #             logger.warning(\n\t    #                 \"BLEU score is being computed by splitting detokenized string on spaces, this is probably not what you want. Use --sacrebleu for standard 13a BLEU tokenization\"\n\t    #             )\n\t    #         else:\n\t    #             logger.warning(\n", "    #                 \"If you are using BPE on the target side, the BLEU score is computed on BPE tokens, not on proper words.  Use --sacrebleu for standard 13a BLEU tokenization\"\n\t    #             )\n\t    #     # use print to be consistent with other main outputs: S-, H-, T-, D- and so on\n\t    #     print(\n\t    #         \"Generate {} with beam={}: {}\".format(\n\t    #             cfg.dataset.gen_subset, cfg.generation.beam, scorer.result_string()\n\t    #         ),\n\t    #         file=output_file,\n\t    #     )\n\t    return scorer\n", "def cli_main():\n\t    parser = options.get_generation_parser()\n\t    # TODO: replace this workaround with refactoring of `AudioPretraining`\n\t    parser.add_argument(\n\t        \"--arch\",\n\t        \"-a\",\n\t        metavar=\"ARCH\",\n\t        default=\"wav2vec2\",\n\t        help=\"Model architecture. For constructing tasks that rely on \"\n\t        \"model args (e.g. `AudioPretraining`)\",\n", "    )\n\t    args = options.parse_args_and_arch(parser)\n\t    if args.model_parallel_size > 1:\n\t        print(\"run megatron mode...\")\n\t        distributed_utils.call_main(convert_namespace_to_omegaconf(args), main)\n\t    else:\n\t        main(args)\n\tif __name__ == \"__main__\":\n\t    cli_main()\n"]}
{"filename": "xlmr/src/trainer.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\t\"\"\"\n\tTrain a network across multiple GPUs.\n\t\"\"\"\n\timport contextlib\n\timport logging\n\timport os\n", "import sys\n\timport time\n\tfrom argparse import Namespace\n\tfrom itertools import chain\n\tfrom typing import Any, Dict, List\n\timport torch\n\tfrom omegaconf import OmegaConf\n\tfrom fairseq import checkpoint_utils, models, optim, utils\n\tfrom fairseq.dataclass.configs import FairseqConfig\n\tfrom fairseq.dataclass.utils import convert_namespace_to_omegaconf\n", "# from fairseq.distributed import utils as distributed_utils\n\tfrom fairseq.file_io import PathManager\n\tfrom fairseq.logging import meters, metrics\n\tfrom fairseq.models.ema import build_ema\n\tfrom fairseq.nan_detector import NanDetector\n\tfrom fairseq.optim import lr_scheduler\n\tfrom fairseq.utils import safe_hasattr\n\timport utils as distributed_utils\n\tlogger = logging.getLogger(__name__)\n\tclass Trainer(object):\n", "    \"\"\"Main class for data parallel training.\n\t    This class supports synchronous distributed data parallel training,\n\t    where multiple workers each have a full model replica and gradients\n\t    are accumulated across workers before each update. We use\n\t    :class:`~torch.nn.parallel.DistributedDataParallel` to handle\n\t    communication of the gradients across workers.\n\t    \"\"\"\n\t    def __init__(self, cfg: FairseqConfig, task, model, criterion, quantizer=None):\n\t        if isinstance(cfg, Namespace):\n\t            logger.warning(\n", "                \"argparse.Namespace configuration is deprecated! Automatically converting to OmegaConf\"\n\t            )\n\t            cfg = convert_namespace_to_omegaconf(cfg)\n\t        self.cfg = cfg\n\t        self.task = task\n\t        # catalog shared parameters\n\t        shared_params = _catalog_shared_params(model)\n\t        self.tpu = cfg.common.tpu\n\t        self.cuda = torch.cuda.is_available() and not cfg.common.cpu and not self.tpu\n\t        if self.cuda:\n", "            self.device = torch.device(\"cuda\")\n\t        elif self.tpu:\n\t            self.device = utils.get_tpu_device()\n\t        else:\n\t            self.device = torch.device(\"cpu\")\n\t        if self.is_fsdp:\n\t            import fairscale\n\t            if self.cfg.common.bf16:\n\t                raise ValueError(\n\t                    \"FullyShardedDataParallel is not compatible with --bf16 or \"\n", "                    \"--memory-efficient-bf16\"\n\t                )\n\t            if self.cfg.distributed_training.zero_sharding != \"none\":\n\t                raise ValueError(\n\t                    \"FullyShardedDataParallel is not compatible with --zero-sharding \"\n\t                    \"option (it's already built in)\"\n\t                )\n\t            if (\n\t                max(self.cfg.optimization.update_freq) > 1\n\t                and fairscale.__version__ < \"0.4.0\"\n", "            ):\n\t                raise RuntimeError(\n\t                    \"Please update to fairscale 0.4.0 or newer when combining \"\n\t                    \"--update-freq with FullyShardedDataParallel\"\n\t                )\n\t        else:\n\t            if (\n\t                hasattr(self.cfg.distributed_training, \"cpu_offload\")\n\t                and self.cfg.distributed_training.cpu_offload\n\t            ):\n", "                raise ValueError(\"--cpu-offload requires --ddp-backend=fully_sharded\")\n\t        # copy model and criterion to current device/dtype\n\t        self._criterion = criterion\n\t        self._model = model\n\t        if not self.is_fsdp:\n\t            if cfg.common.fp16:\n\t                assert not cfg.common.amp, \"Cannot use fp16 and AMP together\"\n\t                self._criterion = self._criterion.half()\n\t                self._model = self._model.half()\n\t            elif cfg.common.bf16:\n", "                self._criterion = self._criterion.to(dtype=torch.bfloat16)\n\t                self._model = self._model.to(dtype=torch.bfloat16)\n\t            elif cfg.common.amp:\n\t                self._amp_retries = 0\n\t        if (\n\t            not cfg.distributed_training.pipeline_model_parallel\n\t            # the DistributedFairseqModel wrapper will handle moving to device,\n\t            # so only handle cases which don't use the wrapper\n\t            and not self.use_distributed_wrapper\n\t        ):\n", "            self._criterion = self._criterion.to(device=self.device)\n\t            self._model = self._model.to(device=self.device)\n\t        self.pipeline_model_parallel = cfg.distributed_training.pipeline_model_parallel\n\t        self.last_device = None\n\t        if self.cuda and self.pipeline_model_parallel:\n\t            self.last_device = torch.device(\n\t                cfg.distributed_training.pipeline_devices[-1]\n\t            )\n\t        # check that shared parameters are preserved after device transfer\n\t        for shared_param in shared_params:\n", "            ref = _get_module_by_path(self._model, shared_param[0])\n\t            for path in shared_param[1:]:\n\t                logger.info(\n\t                    \"detected shared parameter: {} <- {}\".format(shared_param[0], path)\n\t                )\n\t                _set_module_by_path(self._model, path, ref)\n\t        self._dummy_batch = None  # indicates we don't have a dummy batch at first\n\t        self._lr_scheduler = None\n\t        self._num_updates = 0\n\t        self._num_xla_compiles = 0  # for TPUs\n", "        self._optim_history = None\n\t        self._optimizer = None\n\t        self._warn_once = set()\n\t        self._wrapped_criterion = None\n\t        self._wrapped_model = None\n\t        self._ema = None\n\t        # TODO(myleott): support tpu\n\t        if self.cuda and self.data_parallel_world_size > 1:\n\t            self._grad_norm_buf = torch.cuda.DoubleTensor(self.data_parallel_world_size)\n\t        else:\n", "            self._grad_norm_buf = None\n\t        self.quantizer = quantizer\n\t        if self.quantizer is not None:\n\t            self.quantizer.set_trainer(self)\n\t        # get detailed cuda environment\n\t        if self.cuda:\n\t            self.cuda_env = utils.CudaEnvironment()\n\t            if self.data_parallel_world_size > 1:\n\t                self.cuda_env_arr = distributed_utils.all_gather_list(\n\t                    self.cuda_env, group=distributed_utils.get_global_group()\n", "                )\n\t            else:\n\t                self.cuda_env_arr = [self.cuda_env]\n\t            if self.data_parallel_rank == 0:\n\t                utils.CudaEnvironment.pretty_print_cuda_env_list(self.cuda_env_arr)\n\t        else:\n\t            self.cuda_env = None\n\t            self.cuda_env_arr = None\n\t        metrics.log_start_time(\"wall\", priority=790, round=0)\n\t        self._start_time = time.time()\n", "        self._previous_training_time = 0\n\t        self._cumulative_training_time = None\n\t    def reinitialize(self):\n\t        \"\"\"Reinitialize the Trainer, typically after model params change.\"\"\"\n\t        self._lr_scheduler = None\n\t        self._optimizer = None\n\t        self._wrapped_criterion = None\n\t        self._wrapped_model = None\n\t    @property\n\t    def data_parallel_world_size(self):\n", "        if self.cfg.distributed_training.distributed_world_size == 1:\n\t            return 1\n\t        return distributed_utils.get_data_parallel_world_size()\n\t    @property\n\t    def data_parallel_process_group(self):\n\t        return distributed_utils.get_data_parallel_group()\n\t    @property\n\t    def data_parallel_rank(self):\n\t        if self.cfg.distributed_training.distributed_world_size == 1:\n\t            return 0\n", "        return distributed_utils.get_data_parallel_rank()\n\t    @property\n\t    def is_data_parallel_master(self):\n\t        # NOTE: this returns true for all model parallel replicas with data\n\t        # parallel rank 0\n\t        return self.data_parallel_rank == 0\n\t    @property\n\t    def use_distributed_wrapper(self) -> bool:\n\t        return (\n\t            self.data_parallel_world_size > 1 and not self.cfg.optimization.use_bmuf\n", "        ) or (self.is_fsdp and self.cfg.distributed_training.cpu_offload)\n\t    @property\n\t    def should_save_checkpoint_on_current_rank(self) -> bool:\n\t        \"\"\"Indicates whether to save checkpoints on the current DDP rank.\"\"\"\n\t        if (\n\t            self.is_fsdp and self.cfg.distributed_training.use_sharded_state\n\t        ) or getattr(self.cfg.model, \"base_layers\", 0) > 0:\n\t            return True\n\t        else:\n\t            return self.is_data_parallel_master\n", "    @property\n\t    def always_call_state_dict_during_save_checkpoint(self) -> bool:\n\t        if self.is_fsdp and not self.cfg.distributed_training.use_sharded_state:\n\t            # FSDP calls communication collective when consolidating checkpoints\n\t            return True\n\t        else:\n\t            return False\n\t    @property\n\t    def checkpoint_suffix(self) -> str:\n\t        \"\"\"Suffix to add to the checkpoint file name.\"\"\"\n", "        if self.is_fsdp and self.cfg.distributed_training.use_sharded_state:\n\t            return self.cfg.checkpoint.checkpoint_suffix + \"-shard{0}\".format(\n\t                self.data_parallel_rank\n\t            )\n\t        else:\n\t            return self.cfg.checkpoint.checkpoint_suffix or \"\"\n\t    @property\n\t    def criterion(self):\n\t        if self._wrapped_criterion is None:\n\t            if utils.has_parameters(self._criterion) and self.use_distributed_wrapper:\n", "                self._wrapped_criterion = models.DistributedFairseqModel(\n\t                    self.cfg.distributed_training,\n\t                    self._criterion,\n\t                    process_group=self.data_parallel_process_group,\n\t                    device=self.device,\n\t                )\n\t            else:\n\t                self._wrapped_criterion = self._criterion\n\t        return self._wrapped_criterion\n\t    @property\n", "    def model(self):\n\t        if self._wrapped_model is None:\n\t            if self.use_distributed_wrapper:\n\t                self._wrapped_model = models.DistributedFairseqModel(\n\t                    self.cfg.distributed_training,\n\t                    self._model,\n\t                    process_group=self.data_parallel_process_group,\n\t                    device=self.device,\n\t                )\n\t            else:\n", "                self._wrapped_model = self._model\n\t        return self._wrapped_model\n\t    @property\n\t    def ema(self):\n\t        if self._ema is None:\n\t            self._build_ema()\n\t        return self._ema\n\t    def _build_ema(self):\n\t        if self.cfg.ema.store_ema:\n\t            self._ema = build_ema(self._model, self.cfg.ema, self.device)\n", "            logger.info(\"Exponential Moving Average Shadow Model is initialized.\")\n\t    @property\n\t    def optimizer(self):\n\t        if self._optimizer is None:\n\t            self._build_optimizer()\n\t        return self._optimizer\n\t    @property\n\t    def lr_scheduler(self):\n\t        if self._lr_scheduler is None:\n\t            self._build_optimizer()  # this will initialize self._lr_scheduler\n", "        return self._lr_scheduler\n\t    def _build_optimizer(self):\n\t        if (\n\t            self.cfg.optimization.debug_param_names\n\t            and self.cfg.common.fp16_no_flatten_grads\n\t        ):\n\t            params = []\n\t            self.param_names = []\n\t            for n, p in chain(\n\t                self.model.named_parameters(), self.criterion.named_parameters()\n", "            ):\n\t                if p.requires_grad:\n\t                    params.append(p)\n\t                    self.param_names.append(n)\n\t        else:\n\t            params = list(\n\t                filter(\n\t                    lambda p: p.requires_grad,\n\t                    chain(self.model.parameters(), self.criterion.parameters()),\n\t                )\n", "            )\n\t        if self.is_fsdp and self.cfg.common.fp16:\n\t            # FullyShardedDataParallel always uses MemoryEfficientFP16 wrapper,\n\t            # mostly for the grad scaling. But if we don't have the\n\t            # --memory-efficient-fp16 flag set, then we're effectively doing\n\t            # regular --fp16 and can allow the use of optimizers that would\n\t            # otherwise be unsupported by MemoryEfficientFP16Optimizer.\n\t            allow_unsupported = not self.cfg.common.memory_efficient_fp16\n\t            self._optimizer = optim.MemoryEfficientFP16Optimizer.build_optimizer(\n\t                self.cfg, params, allow_unsupported=allow_unsupported\n", "            )\n\t        elif self.cfg.common.fp16 or self.cfg.common.bf16 or self.cfg.common.amp:\n\t            if self.cuda and torch.cuda.get_device_capability(0)[0] < 7:\n\t                logger.info(\n\t                    \"NOTE: your device does NOT support faster training with --fp16 or --amp, \"\n\t                    \"please switch to FP32 which is likely to be faster\"\n\t                )\n\t            if (\n\t                self.cfg.common.memory_efficient_fp16\n\t                or self.cfg.common.memory_efficient_bf16\n", "            ):\n\t                self._optimizer = optim.MemoryEfficientFP16Optimizer.build_optimizer(\n\t                    self.cfg, params\n\t                )\n\t            elif self.cfg.common.amp:\n\t                self._optimizer = optim.AMPOptimizer.build_optimizer(self.cfg, params)\n\t            else:\n\t                self._optimizer = optim.FP16Optimizer.build_optimizer(self.cfg, params)\n\t        else:\n\t            if self.cuda and torch.cuda.get_device_capability(0)[0] >= 7:\n", "                logger.info(\n\t                    \"NOTE: your device may support faster training with --fp16 or --amp\"\n\t                )\n\t            self._optimizer = optim.build_optimizer(self.cfg.optimizer, params)\n\t        if self.is_fsdp:\n\t            assert (\n\t                not self.cfg.optimization.use_bmuf\n\t            ), \"--ddp-backend=fully_sharded is not compatible with BMUF\"\n\t            assert self._optimizer.supports_flat_params, (\n\t                \"--ddp-backend=fully_sharded is only compatible with pointwise \"\n", "                \"optimizers (e.g., Adam, AdamW, Adadelta, Adamax, SGD, etc.). \"\n\t                \"However, the sharding will result in slightly different results when \"\n\t                \"using non-pointwise optimizers (e.g., Adagrad, Adafactor, LAMB)\"\n\t            )\n\t        if self.cfg.optimization.use_bmuf:\n\t            self._optimizer = optim.FairseqBMUF(\n\t                self.cfg.bmuf,\n\t                self._optimizer,\n\t            )\n\t        if self.cfg.distributed_training.zero_sharding == \"os\":\n", "            if (\n\t                self.cfg.common.fp16\n\t                and not self.cfg.common.memory_efficient_fp16\n\t                and not self.cfg.common.memory_efficient_bf16\n\t            ) and not self.cfg.common.fp16_no_flatten_grads:\n\t                raise ValueError(\n\t                    \"ZeRO is incomptabile with fp16 and flattened grads. \"\n\t                    \"Please use --fp16-no-flatten-grads\"\n\t                )\n\t            else:\n", "                optim.shard_(self._optimizer, self.data_parallel_process_group)\n\t        # We should initialize the learning rate scheduler immediately after\n\t        # building the optimizer, so that the initial learning rate is set.\n\t        self._lr_scheduler = lr_scheduler.build_lr_scheduler(\n\t            self.cfg.lr_scheduler,\n\t            self.optimizer,\n\t        )\n\t        self._lr_scheduler.step_update(0)\n\t    @property\n\t    def is_fsdp(self):\n", "        return self.cfg.distributed_training.ddp_backend == \"fully_sharded\"\n\t    def consolidate_optimizer(self):\n\t        \"\"\"For OSS, we need to consolidate the state dict.\"\"\"\n\t        if self.cfg.checkpoint.no_save_optimizer_state:\n\t            return\n\t        self._gathered_optim_state = None\n\t        if hasattr(self.optimizer.optimizer, \"consolidate_state_dict\"):\n\t            self.optimizer.optimizer.consolidate_state_dict()\n\t        elif self.is_fsdp and not self.model.use_sharded_state:\n\t            st = self.model.gather_full_optim_state_dict(\n", "                self.optimizer\n\t            )  # only returns on rank 0\n\t            self._gathered_optim_state = st\n\t    def state_dict(self):\n\t        state_dict = {\n\t            \"args\": None,  # legacy\n\t            \"cfg\": (\n\t                OmegaConf.to_container(self.cfg, resolve=True, enum_to_str=True)\n\t                if OmegaConf.is_config(self.cfg)\n\t                else self.cfg\n", "            ),\n\t            \"model\": self.model.state_dict(),\n\t            \"criterion\": (\n\t                self.criterion.state_dict()\n\t                if utils.has_parameters(self.criterion)\n\t                else None\n\t            ),\n\t            \"optimizer_history\": (self._optim_history or [])\n\t            + [\n\t                {\n", "                    \"criterion_name\": self.get_criterion().__class__.__name__,\n\t                    \"optimizer_name\": self.optimizer.__class__.__name__,\n\t                    \"lr_scheduler_state\": self.lr_scheduler.state_dict(),\n\t                    \"num_updates\": self.get_num_updates(),\n\t                }\n\t            ],\n\t            \"task_state\": self.task.state_dict() if self.task is not None else {},\n\t            \"extra_state\": {\n\t                \"metrics\": metrics.state_dict(),\n\t                \"previous_training_time\": self.cumulative_training_time(),\n", "            },\n\t        }\n\t        if self.cfg.ema.store_ema:\n\t            # Save EMA model state as extra state\n\t            state_dict[\"extra_state\"][\"ema\"] = self.ema.get_model().state_dict()\n\t            if self.cfg.ema.ema_fp32:\n\t                # Save EMA params in fp32\n\t                state_dict[\"extra_state\"][\"ema_fp32_params\"] = self.ema.fp32_params\n\t        if not self.cfg.checkpoint.no_save_optimizer_state:\n\t            if self._gathered_optim_state is not None:\n", "                state_dict[\"last_optimizer_state\"] = self._gathered_optim_state\n\t                self._gathered_optim_state = None\n\t            else:\n\t                state_dict[\"last_optimizer_state\"] = self.optimizer.state_dict()\n\t        if self.is_fsdp:\n\t            # save meta data for recombining checkpoint upon loading\n\t            state_dict[\"fsdp_metadata\"] = self.model.local_metadata_dict()\n\t        return state_dict\n\t    def save_checkpoint(self, filename, extra_state):\n\t        \"\"\"Save all training state in a checkpoint file.\"\"\"\n", "        if self.should_save_checkpoint_on_current_rank:\n\t            logger.info(f\"Saving checkpoint to {os.path.abspath(filename)}\")\n\t            # call state_dict on all ranks in case it needs internal communication\n\t            state_dict = utils.move_to_cpu(self.state_dict())\n\t            state_dict[\"extra_state\"].update(extra_state)\n\t            checkpoint_utils.torch_persistent_save(\n\t                state_dict,\n\t                filename,\n\t                async_write=self.cfg.checkpoint.write_checkpoints_asynchronously,\n\t            )\n", "            logger.info(f\"Finished saving checkpoint to {os.path.abspath(filename)}\")\n\t            return os.path.abspath(filename)\n\t        return None\n\t    def load_checkpoint(\n\t        self,\n\t        filename,\n\t        reset_optimizer=False,\n\t        reset_lr_scheduler=False,\n\t        optimizer_overrides=None,\n\t        reset_meters=False,\n", "    ):\n\t        \"\"\"\n\t        Load all training state from a checkpoint file.\n\t        rank = 0 will load the checkpoint, and then broadcast it to all\n\t        other ranks.\n\t        \"\"\"\n\t        extra_state, self._optim_history, last_optim_state = None, [], None\n\t        logger.info(f\"Preparing to load checkpoint {filename}\")\n\t        is_distributed = self.data_parallel_world_size > 1\n\t        bexists = PathManager.isfile(filename)\n", "        if bexists:\n\t            load_on_all_ranks = (\n\t                self.cfg.checkpoint.load_checkpoint_on_all_dp_ranks\n\t                # TPUs don't support broadcast yet, so load checkpoints\n\t                # on every worker for now\n\t                or self.tpu\n\t                # FSDP requires loading checkpoint shards on all ranks\n\t                or (self.is_fsdp and self.cfg.distributed_training.use_sharded_state)\n\t                or getattr(self.cfg.model, \"base_layers\", 0) > 0\n\t            )\n", "            if load_on_all_ranks or self.data_parallel_rank == 0:\n\t                state = checkpoint_utils.load_checkpoint_to_cpu(\n\t                    filename, load_on_all_ranks=load_on_all_ranks\n\t                )\n\t                last_optim_state = state.get(\"last_optimizer_state\", None)\n\t                # If doing zero_sharding, do not broadcast global optimizer\n\t                # state. Later we will broadcast sharded states to each rank\n\t                # to avoid memory from exploding.\n\t                if (\n\t                    not load_on_all_ranks\n", "                    and self.cfg.distributed_training.zero_sharding == \"os\"\n\t                    and \"last_optimizer_state\" in state\n\t                    and is_distributed\n\t                ):\n\t                    state[\"last_optimizer_state\"] = \"SHARDED\"\n\t            else:\n\t                last_optim_state = None\n\t                state = None\n\t            if is_distributed and not load_on_all_ranks:\n\t                state = distributed_utils.broadcast_object(\n", "                    state,\n\t                    src_rank=0,\n\t                    group=self.data_parallel_process_group,\n\t                    dist_device=self.device,\n\t                )\n\t                if self.data_parallel_rank > 0:\n\t                    last_optim_state = state.get(\"last_optimizer_state\", None)\n\t            # load model parameters\n\t            try:\n\t                if (\n", "                    \"optimizer_history\" in state\n\t                    and len(state[\"optimizer_history\"]) > 0\n\t                    and \"num_updates\" in state[\"optimizer_history\"][-1]\n\t                ):\n\t                    self.model.set_num_updates(\n\t                        state[\"optimizer_history\"][-1][\"num_updates\"]\n\t                    )\n\t                # this is the code related to AdaPrune\n\t                # In short, it removes redundant heads in multi-head attention module based on heads importance provided\n\t                # For more info, please refer to the paper: https://openreview.net/forum?id=_CMSV7FTzGI\n", "                # The idea of prune in mha can be summarized as\n\t                # Fine tune model (e.g. roberta encoder) on a certain datasets with regularization\n\t                # After the model is trained. User could use get_reserve_head_index and _adaptive_prune_heads functions to get the top X heads with most importance.\n\t                # Then user uses the rank to prune a new roberta encoder and save the pruned ckpt manually.\n\t                # User will fine tune the the new roberta encoder via the ckpt saved above\n\t                # To get rid of registering different pruned version of Roberta, I use the argument --mha-heads-to-keep to prune the Roberta model into a pruned version which matches the pruned ckpt.\n\t                if (\n\t                    safe_hasattr(self.model, \"args\")\n\t                    and safe_hasattr(self.model.args, \"mha_heads_to_keep\")\n\t                    and self.model.args.mha_heads_to_keep != -1\n", "                ):\n\t                    logger.info(\n\t                        f\"Prune model: keep {self.model.args.mha_heads_to_keep} heads for each multihead attention module\"\n\t                    )\n\t                    for layer in self.model.encoder.sentence_encoder.layers:\n\t                        reserve_head_index = layer.self_attn._get_reserve_head_index(\n\t                            num_heads_to_keep=self.model.args.mha_heads_to_keep\n\t                        )\n\t                        layer.self_attn._adaptive_prune_heads(\n\t                            reserve_head_index=reserve_head_index\n", "                        )\n\t                        layer.self_attn._set_skip_embed_dim_check()\n\t                    logger.info(self.model)\n\t                # this is the code related to AdaPrune\n\t                # In short, it removes redundant units in feedforward layer in each transformer layer based on importance\n\t                # For more info, please refer to the paper: https://openreview.net/forum?id=_CMSV7FTzGI\n\t                # The idea of prune in ffn can be summarized as\n\t                # Fine tune model (e.g. roberta encoder) on a certain datasets with regularization\n\t                # After the model is trained. User could use _get_fc_rank and _prune_fc_layer functions to get the top X units with most importance.\n\t                # Then user uses the rank to prune a new roberta encoder and save the pruned ckpt manually.\n", "                # User will fine tune the the new roberta encoder via the ckpt saved above\n\t                # To get rid of registering different pruned version of Roberta, I use the argument --ffn-blocks-to-remove to prune the Roberta model into a pruned version which matches the pruned ckpt.\n\t                if (\n\t                    safe_hasattr(self.model, \"args\")\n\t                    and safe_hasattr(self.model.args, \"ffn_blocks_to_remove\")\n\t                    and self.model.args.ffn_blocks_to_remove != -1\n\t                ):\n\t                    logger.info(\n\t                        f\"Prune model: remove {self.model.args.ffn_blocks_to_remove} ffn blocks for each transformer layer\"\n\t                    )\n", "                    for layer in self.model.encoder.sentence_encoder.layers:\n\t                        remove_index = layer._get_fc_rank(\n\t                            remove_num=self.model.args.ffn_blocks_to_remove\n\t                        )\n\t                        layer._prune_fc_layer(remove_index=remove_index)\n\t                    logger.info(self.model)\n\t                if self.is_fsdp:\n\t                    self.model.upgrade_state_dict_named(state[\"model\"], '')\n\t                    self.model.load_state_dict(state[\"model\"], strict=True, model_cfg=self.cfg.model)\n\t                else:\n", "                    self.model.load_state_dict(\n\t                        state[\"model\"], strict=True, model_cfg=self.cfg.model\n\t                    )\n\t                # save memory for later steps\n\t                del state[\"model\"]\n\t                if utils.has_parameters(self.get_criterion()):\n\t                    self.get_criterion().load_state_dict(\n\t                        state[\"criterion\"], strict=True\n\t                    )\n\t                    del state[\"criterion\"]\n", "            except Exception:\n\t                raise Exception(\n\t                    \"Cannot load model parameters from checkpoint {}; \"\n\t                    \"please ensure that the architectures match.\".format(filename)\n\t                )\n\t            extra_state = state[\"extra_state\"]\n\t            self._optim_history = state[\"optimizer_history\"]\n\t        if last_optim_state is not None and not reset_optimizer:\n\t            # rebuild optimizer after loading model, since params may have changed\n\t            self._build_optimizer()\n", "            # only reload optimizer and lr_scheduler if they match\n\t            last_optim = self._optim_history[-1]\n\t            assert (\n\t                last_optim[\"criterion_name\"] == self.get_criterion().__class__.__name__\n\t            ), f\"Criterion does not match; please reset the optimizer (--reset-optimizer). {last_optim['criterion_name']} vs {self.get_criterion().__class__.__name__}\"\n\t            assert (\n\t                last_optim[\"optimizer_name\"] == self.optimizer.__class__.__name__\n\t            ), f\"Optimizer does not match; please reset the optimizer (--reset-optimizer). {last_optim['optimizer_name']} vs {self.optimizer.__class__.__name__}\"\n\t            if not reset_lr_scheduler:\n\t                self.lr_scheduler.load_state_dict(last_optim[\"lr_scheduler_state\"])\n", "            if self.is_fsdp and not self.model.use_sharded_state:\n\t                # if use_sharded_state, the last_optim_state is already sharded, skip this\n\t                last_optim_state = self.model.get_shard_from_optim_state_dict(\n\t                    last_optim_state\n\t                )\n\t            elif not load_on_all_ranks and is_distributed:\n\t                last_optim_state = self.optimizer.broadcast_global_state_dict(\n\t                    last_optim_state\n\t                )\n\t            self.optimizer.load_state_dict(last_optim_state, optimizer_overrides)\n", "            self.set_num_updates(last_optim[\"num_updates\"])\n\t        if extra_state is not None:\n\t            itr_state = extra_state[\"train_iterator\"]\n\t            epoch = itr_state[\"epoch\"]\n\t            if \"previous_training_time\" in extra_state:\n\t                self._previous_training_time = extra_state[\"previous_training_time\"]\n\t                self._start_time = time.time()\n\t            self.lr_step(epoch)\n\t            if (\n\t                itr_state.get(\"version\", 1) >= 2\n", "                and itr_state[\"iterations_in_epoch\"] == 0\n\t            ):\n\t                # reset meters at start of epoch\n\t                reset_meters = True\n\t            if \"metrics\" in extra_state and not reset_meters:\n\t                metrics.load_state_dict(extra_state[\"metrics\"])\n\t                # reset TimeMeters, since their start times don't make sense anymore\n\t                for meter in metrics.get_meters(\"default\"):\n\t                    if isinstance(meter, meters.TimeMeter):\n\t                        meter.reset()\n", "            if self.cfg.ema.store_ema:\n\t                if \"ema\" not in extra_state:\n\t                    logger.warn(\n\t                        \"EMA not found in checkpoint. But store_ema is True. \"\n\t                        \"EMA is re-initialized from checkpoint.\"\n\t                    )\n\t                    self.ema.restore(\n\t                        state[\"model\"], build_fp32_params=self.cfg.ema.ema_fp32\n\t                    )\n\t                else:\n", "                    logger.info(\"Loading EMA from checkpoint\")\n\t                    self.ema.restore(extra_state[\"ema\"], build_fp32_params=False)\n\t                    if self.cfg.ema.ema_fp32:\n\t                        if \"ema_fp32_params\" in extra_state:\n\t                            logger.info(\"Loading EMA fp32 params from checkpoint\")\n\t                            self.ema.build_fp32_params(extra_state[\"ema_fp32_params\"])\n\t                        else:\n\t                            logger.info(\n\t                                \"Building EMA fp32 params from EMA model in checkpoint\"\n\t                            )\n", "                            self.ema.build_fp32_params()\n\t            logger.info(\n\t                \"Loaded checkpoint {} (epoch {} @ {} updates)\".format(\n\t                    filename, epoch, self.get_num_updates()\n\t                )\n\t            )\n\t        else:\n\t            logger.info(\"No existing checkpoint found {}\".format(filename))\n\t        return extra_state\n\t    def get_train_iterator(\n", "        self,\n\t        epoch,\n\t        combine=True,\n\t        load_dataset=True,\n\t        data_selector=None,\n\t        shard_batch_itr=True,\n\t        disable_iterator_cache=False,\n\t    ):\n\t        \"\"\"Return an EpochBatchIterator over the training set for a given epoch.\"\"\"\n\t        if load_dataset:\n", "            logger.info(\"loading train data for epoch {}\".format(epoch))\n\t            self.task.load_dataset(\n\t                self.cfg.dataset.train_subset,\n\t                epoch=epoch,\n\t                combine=combine,\n\t                data_selector=data_selector,\n\t                tpu=self.tpu,\n\t            )\n\t        batch_iterator = self.task.get_batch_iterator(\n\t            dataset=self.task.dataset(self.cfg.dataset.train_subset),\n", "            max_tokens=self.cfg.dataset.max_tokens,\n\t            max_sentences=self.cfg.dataset.batch_size,\n\t            max_positions=utils.resolve_max_positions(\n\t                self.task.max_positions(),\n\t                self.model.max_positions(),\n\t                self.cfg.dataset.max_tokens,\n\t            ),\n\t            ignore_invalid_inputs=True,\n\t            required_batch_size_multiple=self.cfg.dataset.required_batch_size_multiple,\n\t            seed=(self.cfg.common.seed + epoch)\n", "            if self.cfg.dataset.update_ordered_indices_seed\n\t            else self.cfg.common.seed,\n\t            num_shards=self.data_parallel_world_size if shard_batch_itr else 1,\n\t            shard_id=self.data_parallel_rank if shard_batch_itr else 0,\n\t            num_workers=self.cfg.dataset.num_workers,\n\t            epoch=epoch,\n\t            data_buffer_size=self.cfg.dataset.data_buffer_size,\n\t            disable_iterator_cache=disable_iterator_cache,\n\t            skip_remainder_batch=self.cfg.optimization.skip_remainder_batch,\n\t            grouped_shuffling=self.cfg.dataset.grouped_shuffling,\n", "            update_epoch_batch_itr=self.cfg.dataset.update_epoch_batch_itr,\n\t        )\n\t        self.reset_dummy_batch(batch_iterator.first_batch)\n\t        return batch_iterator\n\t    def get_valid_iterator(\n\t        self,\n\t        subset,\n\t        disable_iterator_cache=False,\n\t    ):\n\t        \"\"\"Return an EpochBatchIterator over given validation subset for a given epoch.\"\"\"\n", "        batch_iterator = self.task.get_batch_iterator(\n\t            dataset=self.task.dataset(subset),\n\t            max_tokens=self.cfg.dataset.max_tokens_valid,\n\t            max_sentences=self.cfg.dataset.batch_size_valid,\n\t            max_positions=utils.resolve_max_positions(\n\t                self.task.max_positions(),\n\t                self.model.max_positions(),\n\t            ),\n\t            ignore_invalid_inputs=self.cfg.dataset.skip_invalid_size_inputs_valid_test,\n\t            required_batch_size_multiple=self.cfg.dataset.required_batch_size_multiple,\n", "            seed=self.cfg.common.seed,\n\t            num_shards=self.data_parallel_world_size,\n\t            shard_id=self.data_parallel_rank,\n\t            num_workers=self.cfg.dataset.num_workers,\n\t            # always pass a fixed \"epoch\" to keep validation data consistent\n\t            # across training epochs\n\t            epoch=1,\n\t            data_buffer_size=self.cfg.dataset.data_buffer_size,\n\t            disable_iterator_cache=disable_iterator_cache,\n\t            skip_remainder_batch=False,\n", "        )\n\t        self.reset_dummy_batch(batch_iterator.first_batch)\n\t        return batch_iterator\n\t    def begin_epoch(self, epoch):\n\t        \"\"\"Called at the beginning of each epoch.\"\"\"\n\t        logger.info(\"begin training epoch {}\".format(epoch))\n\t        self.lr_step_begin_epoch(epoch)\n\t        if self.quantizer is not None:\n\t            self.quantizer.begin_epoch(epoch)\n\t        # task specific setup per epoch\n", "        self.task.begin_epoch(epoch, self.get_model())\n\t        if self.tpu:\n\t            import torch_xla.core.xla_model as xm\n\t            xm.rendezvous(\"begin_epoch\")  # wait for all workers\n\t            xm.mark_step()\n\t    def begin_valid_epoch(self, epoch):\n\t        \"\"\"Called at the beginning of each validation epoch.\"\"\"\n\t        # task specific setup per validation epoch\n\t        self.task.begin_valid_epoch(epoch, self.get_model())\n\t    def reset_dummy_batch(self, batch):\n", "        self._dummy_batch = batch\n\t    @metrics.aggregate(\"train\")\n\t    def train_step(self, samples, raise_oom=False):\n\t        \"\"\"Do forward, backward and parameter update.\"\"\"\n\t        self._set_seed()\n\t        self.model.train()\n\t        self.criterion.train()\n\t        self.zero_grad()\n\t        metrics.log_start_time(\"train_wall\", priority=800, round=0)\n\t        # If EMA is enabled through store_ema=True\n", "        # and task.uses_ema is True, pass the EMA model as a keyword\n\t        # argument to the task.\n\t        extra_kwargs = {}\n\t        if self.cfg.ema.store_ema and getattr(self.task, \"uses_ema\", False):\n\t            extra_kwargs[\"ema_model\"] = self.ema.get_model()\n\t        has_oom = False\n\t        # forward and backward pass\n\t        logging_outputs, sample_size, ooms = [], 0, 0\n\t        for i, sample in enumerate(samples):  # delayed update loop\n\t            sample, is_dummy_batch = self._prepare_sample(sample)\n", "            def maybe_no_sync():\n\t                \"\"\"\n\t                Whenever *samples* contains more than one mini-batch, we\n\t                want to accumulate gradients locally and only call\n\t                all-reduce in the last backwards pass.\n\t                \"\"\"\n\t                if (\n\t                    self.data_parallel_world_size > 1\n\t                    and hasattr(self.model, \"no_sync\")\n\t                    and i < len(samples) - 1\n", "                    # The no_sync context manager results in increased memory\n\t                    # usage with FSDP, since full-size gradients will be\n\t                    # accumulated on each GPU. It's typically a better tradeoff\n\t                    # to do the extra communication with FSDP.\n\t                    and not self.is_fsdp\n\t                ):\n\t                    return self.model.no_sync()\n\t                else:\n\t                    return contextlib.ExitStack()  # dummy contextmanager\n\t            try:\n", "                with maybe_no_sync():\n\t                    # forward and backward\n\t                    loss, sample_size_i, logging_output = self.task.train_step(\n\t                        sample=sample,\n\t                        model=self.model,\n\t                        criterion=self.criterion,\n\t                        optimizer=self.optimizer,\n\t                        update_num=self.get_num_updates(),\n\t                        ignore_grad=is_dummy_batch,\n\t                        **extra_kwargs,\n", "                    )\n\t                    del loss\n\t                logging_outputs.append(logging_output)\n\t                sample_size += sample_size_i\n\t                # emptying the CUDA cache after the first step can\n\t                # reduce the chance of OOM\n\t                if self.cuda and self.get_num_updates() == 0:\n\t                    torch.cuda.empty_cache()\n\t            except RuntimeError as e:\n\t                if \"out of memory\" in str(e):\n", "                    self._log_oom(e)\n\t                    has_oom = True\n\t                    if raise_oom:\n\t                        raise e\n\t                else:\n\t                    raise e\n\t            except Exception:\n\t                self.consolidate_optimizer()\n\t                self.save_checkpoint(\n\t                    os.path.join(self.cfg.checkpoint.save_dir, \"crash.pt\"), {}\n", "                )\n\t                raise\n\t            if has_oom:\n\t                logger.warning(\n\t                    \"attempting to recover from OOM in forward/backward pass\"\n\t                )\n\t                ooms += 1\n\t                self.zero_grad()\n\t                if self.cuda:\n\t                    torch.cuda.empty_cache()\n", "                if self.cfg.distributed_training.distributed_world_size == 1:\n\t                    return None\n\t            if self.tpu and i < len(samples) - 1:\n\t                # tpu-comment: every XLA operation before marking step is\n\t                # appended to the IR graph, and processing too many batches\n\t                # before marking step can lead to OOM errors.\n\t                # To handle gradient accumulation use case, we explicitly\n\t                # mark step here for every forward pass without a backward pass\n\t                self._xla_markstep_and_send_to_cpu()\n\t        if is_dummy_batch:\n", "            if torch.is_tensor(sample_size):\n\t                sample_size.zero_()\n\t            else:\n\t                sample_size *= 0.0\n\t        if torch.is_tensor(sample_size):\n\t            sample_size = sample_size.float()\n\t        else:\n\t            sample_size = float(sample_size)\n\t        # gather logging outputs from all replicas\n\t        if self._sync_stats():\n", "            train_time = self._local_cumulative_training_time()\n\t            (\n\t                logging_outputs,\n\t                (\n\t                    sample_size,\n\t                    ooms,\n\t                    total_train_time,\n\t                ),\n\t            ) = self._aggregate_logging_outputs(\n\t                logging_outputs, sample_size, ooms, train_time, ignore=is_dummy_batch\n", "            )\n\t            self._cumulative_training_time = (\n\t                total_train_time / self.data_parallel_world_size\n\t            )\n\t        overflow = False\n\t        try:\n\t            with torch.autograd.profiler.record_function(\"reduce-grads\"):\n\t                # reduce gradients across workers\n\t                self.optimizer.all_reduce_grads(self.model)\n\t                if utils.has_parameters(self.criterion):\n", "                    self.optimizer.all_reduce_grads(self.criterion)\n\t            with torch.autograd.profiler.record_function(\"multiply-grads\"):\n\t                # multiply gradients by (data_parallel_size / sample_size) since\n\t                # DDP normalizes by the number of data parallel workers for\n\t                # improved fp16 precision.\n\t                # Thus we get (sum_of_gradients / sample_size) at the end.\n\t                # In case of fp16, this step also undoes loss scaling.\n\t                # (Debugging note: Some optimizers perform this scaling on the\n\t                # fly, so inspecting model.parameters() or optimizer.params may\n\t                # still show the original, unscaled gradients.)\n", "                numer = (\n\t                    self.data_parallel_world_size\n\t                    if not self.cfg.optimization.use_bmuf or self._sync_stats()\n\t                    else 1\n\t                )\n\t                self.optimizer.multiply_grads(numer / (sample_size or 1.0))\n\t                # Note: (sample_size or 1.0) handles the case of a zero gradient, in a\n\t                # way that avoids CPU/device transfers in case sample_size is a GPU or\n\t                # TPU object. The assumption is that the gradient itself is also 0.\n\t            with torch.autograd.profiler.record_function(\"clip-grads\"):\n", "                # clip grads\n\t                grad_norm = self.clip_grad_norm(self.cfg.optimization.clip_norm)\n\t            # check that grad norms are consistent across workers\n\t            # on tpu check tensor is slow\n\t            if not self.tpu:\n\t                if (\n\t                    not self.cfg.optimization.use_bmuf\n\t                    and self.cfg.distributed_training.ddp_backend != \"slowmo\"\n\t                ):\n\t                    self._check_grad_norms(grad_norm)\n", "                if not torch.isfinite(grad_norm).all():\n\t                    # in case of AMP, if gradients are Nan/Inf then\n\t                    # optimizer step is still required\n\t                    if self.cfg.common.amp:\n\t                        overflow = True\n\t                    else:\n\t                        # check local gradnorm single GPU case, trigger NanDetector\n\t                        raise FloatingPointError(\"gradients are Nan/Inf\")\n\t            with torch.autograd.profiler.record_function(\"optimizer\"):\n\t                # take an optimization step\n", "                self.task.optimizer_step(\n\t                    self.optimizer, model=self.model, update_num=self.get_num_updates()\n\t                )\n\t                if self.cfg.common.amp and overflow:\n\t                    if self._amp_retries == self.cfg.common.amp_batch_retries:\n\t                        logger.info(\"AMP: skipping this batch.\")\n\t                        self._amp_retries = 0\n\t                    else:\n\t                        self._amp_retries += 1\n\t                        return self.train_step(\n", "                            samples, raise_oom\n\t                        )  # recursion to feed in same batch\n\t        except FloatingPointError:\n\t            self.consolidate_optimizer()\n\t            self.save_checkpoint(\n\t                os.path.join(self.cfg.checkpoint.save_dir, \"crash.pt\"), {}\n\t            )\n\t            # re-run the forward and backward pass with hooks attached to print\n\t            # out where it fails\n\t            self.zero_grad()\n", "            with NanDetector(self.get_model()):\n\t                for _, sample in enumerate(samples):\n\t                    sample, _ = self._prepare_sample(sample)\n\t                    self.task.train_step(\n\t                        sample,\n\t                        self.model,\n\t                        self.criterion,\n\t                        self.optimizer,\n\t                        self.get_num_updates(),\n\t                        ignore_grad=False,\n", "                        **extra_kwargs,\n\t                    )\n\t            raise\n\t        except OverflowError as e:\n\t            overflow = True\n\t            logger.info(\n\t                f\"NOTE: gradient overflow detected, ignoring gradient, {str(e)}\"\n\t            )\n\t            if hasattr(self, \"param_names\") and hasattr(\n\t                self.optimizer, \"fp32_optimizer\"\n", "            ):\n\t                for p, n in zip(self.optimizer.fp32_optimizer.params, self.param_names):\n\t                    if torch.isinf(p.grad).any() or torch.isnan(p.grad).any():\n\t                        logger.info(f\"overflow in param {n}\")\n\t            grad_norm = torch.tensor(0.0).cuda()\n\t            self.zero_grad()\n\t        except RuntimeError as e:\n\t            if \"out of memory\" in str(e):\n\t                self._log_oom(e)\n\t                logger.error(\"OOM during optimization, irrecoverable\")\n", "            raise e\n\t        # Some distributed wrappers (e.g., SlowMo) need access to the optimizer\n\t        # after the step\n\t        if hasattr(self.model, \"perform_slowmo\"):\n\t            self.model.perform_slowmo(\n\t                self.optimizer.optimizer, getattr(self.optimizer, \"fp32_params\", None)\n\t            )\n\t        logging_output = None\n\t        if not overflow or self.cfg.distributed_training.ddp_backend == \"slowmo\":\n\t            self.set_num_updates(self.get_num_updates() + 1)\n", "            if self.cfg.ema.store_ema:\n\t                # Step EMA forward with new model.\n\t                self.ema.step(\n\t                    self.get_model(),\n\t                    self.get_num_updates(),\n\t                )\n\t                metrics.log_scalar(\n\t                    \"ema_decay\",\n\t                    self.ema.get_decay(),\n\t                    priority=10000,\n", "                    round=5,\n\t                    weight=0,\n\t                )\n\t            if self.tpu:\n\t                import torch_xla.core.xla_model as xm\n\t                # mark step on TPUs\n\t                self._xla_markstep_and_send_to_cpu()\n\t                # only log stats every log_interval steps\n\t                # this causes wps to be misreported when log_interval > 1\n\t                logging_output = {}\n", "                if self.get_num_updates() % self.cfg.common.log_interval == 0:\n\t                    # log memory usage\n\t                    mem_info = xm.get_memory_info(self.device)\n\t                    gb_free = mem_info[\"kb_free\"] / 1024 / 1024\n\t                    gb_total = mem_info[\"kb_total\"] / 1024 / 1024\n\t                    metrics.log_scalar(\n\t                        \"gb_free\", gb_free, priority=1500, round=1, weight=0\n\t                    )\n\t                    metrics.log_scalar(\n\t                        \"gb_total\", gb_total, priority=1600, round=1, weight=0\n", "                    )\n\t                    logging_outputs = self._xla_markstep_and_send_to_cpu(\n\t                        logging_outputs\n\t                    )\n\t                    logging_output = self._reduce_and_log_stats(\n\t                        logging_outputs, sample_size, grad_norm\n\t                    )\n\t                # log whenever there's an XLA compilation, since these\n\t                # slow down training and may indicate opportunities for\n\t                # optimization\n", "                self._check_xla_compilation()\n\t            else:\n\t                if self.cuda and self.cuda_env is not None:\n\t                    # log minimum free memory over the iteration\n\t                    gb_used = torch.cuda.max_memory_allocated() / 1024 / 1024 / 1024\n\t                    torch.cuda.reset_peak_memory_stats()\n\t                    gb_free = self.cuda_env.total_memory_in_GB - gb_used\n\t                    metrics.log_scalar(\n\t                        \"gb_free\", gb_free, priority=1500, round=1, weight=0\n\t                    )\n", "                # log stats\n\t                logging_output = self._reduce_and_log_stats(\n\t                    logging_outputs, sample_size, grad_norm\n\t                )\n\t                # clear CUDA cache to reduce memory fragmentation\n\t                if (\n\t                    self.cuda\n\t                    and self.cfg.common.empty_cache_freq > 0\n\t                    and (\n\t                        (self.get_num_updates() + self.cfg.common.empty_cache_freq - 1)\n", "                        % self.cfg.common.empty_cache_freq\n\t                    )\n\t                    == 0\n\t                ):\n\t                    torch.cuda.empty_cache()\n\t        if self.cfg.common.fp16 or self.cfg.common.amp:\n\t            metrics.log_scalar(\n\t                \"loss_scale\",\n\t                (\n\t                    self.optimizer.scaler.loss_scale\n", "                    if self.cfg.common.fp16\n\t                    else self.optimizer.scaler.get_scale()\n\t                ),\n\t                priority=700,\n\t                round=4,\n\t                weight=0,\n\t            )\n\t        metrics.log_stop_time(\"train_wall\")\n\t        return logging_output\n\t    @metrics.aggregate(\"valid\")\n", "    def valid_step(self, sample, raise_oom=False):\n\t        \"\"\"Do forward pass in evaluation mode.\"\"\"\n\t        if self.tpu:\n\t            import torch_xla.core.xla_model as xm\n\t            xm.rendezvous(\"valid_step\")  # wait for all workers\n\t        # If EMA is enabled through store_ema=True\n\t        # and task.uses_ema is True, pass the EMA model as a keyword\n\t        # argument to the task.\n\t        extra_kwargs = {}\n\t        if self.cfg.ema.store_ema and getattr(self.task, \"uses_ema\", False):\n", "            extra_kwargs[\"ema_model\"] = self.ema.get_model()\n\t        with torch.no_grad():\n\t            self.model.eval()\n\t            self.criterion.eval()\n\t            sample, is_dummy_batch = self._prepare_sample(sample)\n\t            try:\n\t                _loss, sample_size, logging_output = self.task.valid_step(\n\t                    sample, self.model, self.criterion, **extra_kwargs\n\t                )\n\t            except RuntimeError as e:\n", "                if \"out of memory\" in str(e):\n\t                    self._log_oom(e)\n\t                    if not raise_oom:\n\t                        logger.warning(\n\t                            \"ran out of memory in validation step, retrying batch\"\n\t                        )\n\t                        for p in self.model.parameters():\n\t                            if p.grad is not None:\n\t                                p.grad = None  # free some memory\n\t                        if self.cuda:\n", "                            torch.cuda.empty_cache()\n\t                        return self.valid_step(sample, raise_oom=True)\n\t                raise e\n\t            logging_outputs = [logging_output]\n\t            if is_dummy_batch:\n\t                if torch.is_tensor(sample_size):\n\t                    sample_size.zero_()\n\t                else:\n\t                    sample_size *= 0.0\n\t        # gather logging outputs from all replicas\n", "        if self.data_parallel_world_size > 1:\n\t            logging_outputs, (sample_size,) = self._aggregate_logging_outputs(\n\t                logging_outputs,\n\t                sample_size,\n\t                ignore=is_dummy_batch,\n\t            )\n\t        # log validation stats\n\t        if self.tpu:\n\t            logging_outputs = self._xla_markstep_and_send_to_cpu(logging_outputs)\n\t        logging_output = self._reduce_and_log_stats(logging_outputs, sample_size)\n", "        return logging_output\n\t    def zero_grad(self):\n\t        self.optimizer.zero_grad()\n\t    def lr_step_begin_epoch(self, epoch):\n\t        \"\"\"Adjust the learning rate at the beginning of the epoch.\"\"\"\n\t        self.lr_scheduler.step_begin_epoch(epoch)\n\t        # prefer updating the LR based on the number of steps\n\t        return self.lr_step_update()\n\t    def lr_step(self, epoch, val_loss=None):\n\t        \"\"\"Adjust the learning rate at the end of the epoch.\"\"\"\n", "        self.lr_scheduler.step(epoch, val_loss)\n\t        # prefer updating the LR based on the number of steps\n\t        return self.lr_step_update()\n\t    def lr_step_update(self):\n\t        \"\"\"Update the learning rate after each update.\"\"\"\n\t        new_lr = self.lr_scheduler.step_update(self.get_num_updates())\n\t        if isinstance(new_lr, dict):\n\t            for k, v in new_lr.items():\n\t                metrics.log_scalar(f\"lr_{k}\", v, weight=0, priority=300)\n\t            new_lr = new_lr.get(\"default\", next(iter(new_lr.values())))\n", "        else:\n\t            metrics.log_scalar(\"lr\", new_lr, weight=0, priority=300)\n\t        return new_lr\n\t    def get_lr(self):\n\t        \"\"\"Get the current learning rate.\"\"\"\n\t        return self.optimizer.get_lr()\n\t    def get_model(self):\n\t        \"\"\"Get the (non-wrapped) model instance.\"\"\"\n\t        return self._model\n\t    def get_criterion(self):\n", "        \"\"\"Get the (non-wrapped) criterion instance.\"\"\"\n\t        return self._criterion\n\t    def get_meter(self, name):\n\t        \"\"\"[deprecated] Get a specific meter by name.\"\"\"\n\t        from fairseq import meters\n\t        if \"get_meter\" not in self._warn_once:\n\t            self._warn_once.add(\"get_meter\")\n\t            utils.deprecation_warning(\n\t                \"Trainer.get_meter is deprecated. Please use fairseq.metrics instead.\"\n\t            )\n", "        train_meters = metrics.get_meters(\"train\")\n\t        if train_meters is None:\n\t            train_meters = {}\n\t        if name == \"train_loss\" and \"loss\" in train_meters:\n\t            return train_meters[\"loss\"]\n\t        elif name == \"train_nll_loss\":\n\t            # support for legacy train.py, which assumed this meter is\n\t            # always initialized\n\t            m = train_meters.get(\"nll_loss\", None)\n\t            return m or meters.AverageMeter()\n", "        elif name == \"wall\":\n\t            # support for legacy train.py, which assumed this meter is\n\t            # always initialized\n\t            m = metrics.get_meter(\"default\", \"wall\")\n\t            return m or meters.TimeMeter()\n\t        elif name == \"wps\":\n\t            m = metrics.get_meter(\"train\", \"wps\")\n\t            return m or meters.TimeMeter()\n\t        elif name in {\"valid_loss\", \"valid_nll_loss\"}:\n\t            # support for legacy train.py, which assumed these meters\n", "            # are always initialized\n\t            k = name[len(\"valid_\") :]\n\t            m = metrics.get_meter(\"valid\", k)\n\t            return m or meters.AverageMeter()\n\t        elif name == \"oom\":\n\t            return meters.AverageMeter()\n\t        elif name in train_meters:\n\t            return train_meters[name]\n\t        return None\n\t    def get_num_updates(self):\n", "        \"\"\"Get the number of parameters updates.\"\"\"\n\t        return self._num_updates\n\t    def set_num_updates(self, num_updates):\n\t        \"\"\"Set the number of parameters updates.\"\"\"\n\t        self._num_updates = num_updates\n\t        self.lr_step_update()\n\t        if self.quantizer:\n\t            self.quantizer.step_update(self._num_updates)\n\t        metrics.log_scalar(\"num_updates\", self._num_updates, weight=0, priority=200)\n\t    def clip_grad_norm(self, clip_norm):\n", "        def agg_norm_fn(total_norm):\n\t            total_norm = total_norm.cuda().float() ** 2\n\t            total_norm = distributed_utils.all_reduce(\n\t                total_norm, group=self.data_parallel_process_group\n\t            )\n\t            return total_norm**0.5\n\t        should_agg_norm = self.is_fsdp and (\n\t            self.data_parallel_process_group is not None\n\t            or torch.distributed.is_initialized()\n\t        )\n", "        return self.optimizer.clip_grad_norm(\n\t            clip_norm, aggregate_norm_fn=agg_norm_fn if should_agg_norm else None\n\t        )\n\t    def cumulative_training_time(self):\n\t        if self._cumulative_training_time is None:\n\t            # single GPU\n\t            return self._local_cumulative_training_time()\n\t        else:\n\t            return self._cumulative_training_time\n\t    def _local_cumulative_training_time(self):\n", "        \"\"\"Aggregate training time in seconds.\"\"\"\n\t        return time.time() - self._start_time + self._previous_training_time\n\t    def _fp_convert_sample(self, sample):\n\t        def apply_half(t):\n\t            if t.dtype is torch.float32:\n\t                return t.to(dtype=torch.half)\n\t            return t\n\t        def apply_bfloat16(t):\n\t            if t.dtype is torch.float32:\n\t                return t.to(dtype=torch.bfloat16)\n", "            return t\n\t        if self.cfg.common.fp16:\n\t            sample = utils.apply_to_sample(apply_half, sample)\n\t        if self.cfg.common.bf16:\n\t            sample = utils.apply_to_sample(apply_bfloat16, sample)\n\t        return sample\n\t    def _prepare_sample(self, sample, is_dummy=False):\n\t        if sample == \"DUMMY\":\n\t            raise Exception(\n\t                \"Trying to use an uninitialized 'dummy' batch. This usually indicates \"\n", "                \"that the total number of batches is smaller than the number of \"\n\t                \"participating GPUs. Try reducing the batch size or using fewer GPUs.\"\n\t            )\n\t        if sample is None or len(sample) == 0:\n\t            assert (\n\t                self._dummy_batch is not None and len(self._dummy_batch) > 0\n\t            ), \"Invalid dummy batch: {}\".format(self._dummy_batch)\n\t            sample, _ = self._prepare_sample(self._dummy_batch, is_dummy=True)\n\t            return sample, True\n\t        # Given that PCIe/NVLink bandwidth is significantly smaller than DRAM bandwidth\n", "        # it makes sense to do the format conversion on the CPU and then transfer\n\t        # a smaller buffer to the device. This also saves GPU memory capacity.\n\t        if self.cfg.common.on_cpu_convert_precision:\n\t            sample = self._fp_convert_sample(sample)\n\t        if self.cuda:\n\t            if self.pipeline_model_parallel:\n\t                if \"target\" in sample:\n\t                    sample[\"target\"] = utils.move_to_cuda(\n\t                        sample[\"target\"], device=self.last_device\n\t                    )\n", "            else:\n\t                sample = utils.move_to_cuda(sample)\n\t        elif self.tpu and is_dummy:\n\t            # the dummy batch may not be on the appropriate device\n\t            sample = utils.move_to_cuda(sample, device=self.device)\n\t        if not self.cfg.common.on_cpu_convert_precision:\n\t            sample = self._fp_convert_sample(sample)\n\t        if self._dummy_batch == \"DUMMY\":\n\t            self._dummy_batch = sample\n\t        return sample, False\n", "    def _set_seed(self):\n\t        # Set seed based on args.seed and the update number so that we get\n\t        # reproducible results when resuming from checkpoints\n\t        seed = self.cfg.common.seed + self.get_num_updates()\n\t        utils.set_torch_seed(seed)\n\t    def _sync_stats(self):\n\t        # Return True if it's using multiple GPUs and DDP or multiple GPUs with\n\t        # BMUF and it's a bmuf sync with warmup iterations completed before.\n\t        if self.data_parallel_world_size == 1:\n\t            return False\n", "        elif self.cfg.optimization.use_bmuf:\n\t            return (\n\t                self.get_num_updates() + 1\n\t            ) % self.cfg.bmuf.global_sync_iter == 0 and (\n\t                self.get_num_updates() + 1\n\t            ) > self.cfg.bmuf.warmup_iterations\n\t        else:\n\t            return True\n\t    def _log_oom(self, exc):\n\t        msg = \"OOM: Ran out of memory with exception: {}\".format(exc)\n", "        logger.warning(msg)\n\t        if torch.cuda.is_available() and hasattr(torch.cuda, \"memory_summary\"):\n\t            for device_idx in range(torch.cuda.device_count()):\n\t                logger.warning(torch.cuda.memory_summary(device=device_idx))\n\t        sys.stderr.flush()\n\t    def _aggregate_logging_outputs(\n\t        self,\n\t        logging_outputs: List[Dict[str, Any]],\n\t        *extra_stats_to_sum,\n\t        ignore=False,\n", "    ):\n\t        if self.task.__class__.logging_outputs_can_be_summed(self.get_criterion()):\n\t            return self._fast_stat_sync_sum(\n\t                logging_outputs, *extra_stats_to_sum, ignore=ignore\n\t            )\n\t        else:\n\t            return self._all_gather_list_sync(\n\t                logging_outputs, *extra_stats_to_sum, ignore=ignore\n\t            )\n\t    def _all_gather_list_sync(\n", "        self,\n\t        logging_outputs: List[Dict[str, Any]],\n\t        *extra_stats_to_sum,\n\t        ignore=False,\n\t    ):\n\t        \"\"\"\n\t        Sync logging outputs across workers. all_gather_list_sync is\n\t        suitable when logging outputs are complex types.\n\t        \"\"\"\n\t        if self.tpu:\n", "            raise NotImplementedError\n\t        if ignore:\n\t            logging_outputs = []\n\t        results = list(\n\t            zip(\n\t                *distributed_utils.all_gather_list(\n\t                    [logging_outputs] + list(extra_stats_to_sum),\n\t                    max_size=getattr(self.cfg.common, \"all_gather_list_size\", 16384),\n\t                    group=self.data_parallel_process_group,\n\t                )\n", "            )\n\t        )\n\t        logging_outputs, extra_stats_to_sum = results[0], results[1:]\n\t        logging_outputs = list(chain.from_iterable(logging_outputs))\n\t        extra_stats_to_sum = [sum(s) for s in extra_stats_to_sum]\n\t        return logging_outputs, extra_stats_to_sum\n\t    def _fast_stat_sync_sum(\n\t        self,\n\t        logging_outputs: List[Dict[str, Any]],\n\t        *extra_stats_to_sum,\n", "        ignore=False,\n\t    ):\n\t        \"\"\"\n\t        Sync logging outputs across workers. fast_stat_sync_sum is\n\t        faster than all_gather_list_sync, but is only suitable when\n\t        logging outputs are scalars and can be summed. Note that\n\t        *logging_outputs* cannot contain any nested dicts/lists.\n\t        \"\"\"\n\t        data = {}\n\t        for i, stat in enumerate(extra_stats_to_sum):\n", "            data[\"extra_stats_\" + str(i)] = stat\n\t        if len(logging_outputs) > 0:\n\t            log_keys = list(logging_outputs[0].keys())\n\t            for k in log_keys:\n\t                if not ignore:\n\t                    v = sum(log[k] for log in logging_outputs if k in log)\n\t                else:\n\t                    v = logging_outputs[0][k]\n\t                    v = torch.zeros_like(v) if torch.is_tensor(v) else 0\n\t                data[\"logging_outputs_\" + k] = v\n", "        else:\n\t            log_keys = None\n\t        data = distributed_utils.all_reduce_dict(\n\t            data, device=self.device, group=self.data_parallel_process_group\n\t        )\n\t        extra_stats_to_sum = [\n\t            data[\"extra_stats_\" + str(i)] for i in range(len(extra_stats_to_sum))\n\t        ]\n\t        if log_keys is not None:\n\t            logging_outputs = [{k: data[\"logging_outputs_\" + k] for k in log_keys}]\n", "        else:\n\t            logging_outputs = []\n\t        return logging_outputs, extra_stats_to_sum\n\t    def _check_grad_norms(self, grad_norm):\n\t        \"\"\"Check that grad norms are consistent across workers.\"\"\"\n\t        if self._grad_norm_buf is not None:\n\t            self._grad_norm_buf.zero_()\n\t            self._grad_norm_buf[self.data_parallel_rank] = grad_norm\n\t            distributed_utils.all_reduce(\n\t                self._grad_norm_buf, group=self.data_parallel_process_group\n", "            )\n\t            def is_consistent(tensor):\n\t                max_abs_diff = torch.max(torch.abs(tensor - tensor[0]))\n\t                return (\n\t                    (\n\t                        torch.isfinite(tensor).all()\n\t                        and (max_abs_diff / (tensor[0] + 1e-6) < 1e-6).all()\n\t                    )\n\t                    or (self.cfg.common.amp and not torch.isfinite(tensor).all())\n\t                    # in case of amp non-finite grads are fine\n", "                )\n\t            if not is_consistent(self._grad_norm_buf):\n\t                pretty_detail = \"\\n\".join(\n\t                    \"rank {:3d} = {:.8f}\".format(r, n)\n\t                    for r, n in enumerate(self._grad_norm_buf.tolist())\n\t                )\n\t                error_detail = \"grad_norm across the workers:\\n{}\\n\".format(\n\t                    pretty_detail\n\t                )\n\t                # use FloatingPointError to trigger NanDetector\n", "                raise FloatingPointError(\n\t                    \"Fatal error: gradients are inconsistent between workers. \"\n\t                    \"Try --ddp-backend=legacy_ddp. \"\n\t                    \"Or are you mixing up different generation of GPUs in training?\"\n\t                    + \"\\n\"\n\t                    + \"-\" * 80\n\t                    + \"\\n{}\\n\".format(error_detail)\n\t                    + \"-\" * 80\n\t                )\n\t    def _reduce_and_log_stats(self, logging_outputs, sample_size, grad_norm=None):\n", "        if grad_norm is not None and (\n\t            not torch.is_tensor(grad_norm) or torch.isfinite(grad_norm)\n\t        ):\n\t            metrics.log_speed(\"ups\", 1.0, priority=100, round=2)\n\t            metrics.log_scalar(\"gnorm\", grad_norm, priority=400, round=3)\n\t            if self.cfg.optimization.clip_norm > 0:\n\t                metrics.log_scalar(\n\t                    \"clip\",\n\t                    torch.where(\n\t                        grad_norm > self.cfg.optimization.clip_norm,\n", "                        grad_norm.new_tensor(100),\n\t                        grad_norm.new_tensor(0),\n\t                    ),\n\t                    priority=500,\n\t                    round=1,\n\t                )\n\t        with metrics.aggregate() as agg:\n\t            if logging_outputs is not None:\n\t                self.task.reduce_metrics(logging_outputs, self.get_criterion())\n\t                del logging_outputs\n", "            # extra warning for criterions that don't properly log a loss value\n\t            if \"loss\" not in agg:\n\t                if \"loss\" not in self._warn_once:\n\t                    self._warn_once.add(\"loss\")\n\t                    logger.warning(\n\t                        \"Criterion.reduce_metrics did not log a 'loss' value, \"\n\t                        \"which may break some functionality\"\n\t                    )\n\t                metrics.log_scalar(\"loss\", -1)\n\t            # support legacy interface\n", "            if self.tpu:\n\t                logging_output = {}\n\t            else:\n\t                logging_output = agg.get_smoothed_values()\n\t                logging_output[\"sample_size\"] = sample_size\n\t                for key_to_delete in [\"ppl\", \"wps\", \"wpb\", \"bsz\"]:\n\t                    if key_to_delete in logging_output:\n\t                        del logging_output[key_to_delete]\n\t            return logging_output\n\t    def _check_xla_compilation(self):\n", "        import torch_xla.debug.metrics as met\n\t        compile_stats = met.metric_data(\"CompileTime\")\n\t        if compile_stats is None:\n\t            return\n\t        num_xla_compiles = compile_stats[0]\n\t        if num_xla_compiles > self._num_xla_compiles:\n\t            logger.warning(\n\t                \"XLA compilation detected on device #{}; too many of these can lead \"\n\t                \"to slow training, but we expect a few in the beginning\".format(\n\t                    self.cfg.distributed_training.distributed_rank\n", "                )\n\t            )\n\t        self._num_xla_compiles = num_xla_compiles\n\t    def _xla_markstep_and_send_to_cpu(self, data=None):\n\t        import torch_xla.core.xla_model as xm\n\t        xm.mark_step()\n\t        if data is not None:\n\t            from fairseq.utils import xla_device_to_cpu\n\t            return xla_device_to_cpu(data)\n\tdef _catalog_shared_params(module, memo=None, prefix=\"\"):\n", "    if memo is None:\n\t        first_call = True\n\t        memo = {}\n\t    else:\n\t        first_call = False\n\t    for name, param in module._parameters.items():\n\t        param_prefix = prefix + (\".\" if prefix else \"\") + name\n\t        if param not in memo:\n\t            memo[param] = []\n\t        memo[param].append(param_prefix)\n", "    for name, m in module._modules.items():\n\t        if m is None:\n\t            continue\n\t        submodule_prefix = prefix + (\".\" if prefix else \"\") + name\n\t        _catalog_shared_params(m, memo, submodule_prefix)\n\t    if first_call:\n\t        return [x for x in memo.values() if len(x) > 1]\n\tdef _get_module_by_path(module, path):\n\t    path = path.split(\".\")\n\t    for name in path:\n", "        module = getattr(module, name)\n\t    return module\n\tdef _set_module_by_path(module, path, value):\n\t    path = path.split(\".\")\n\t    for name in path[:-1]:\n\t        module = getattr(module, name)\n\t    setattr(module, path[-1], value)\n"]}
{"filename": "xlmr/src/task/seq2seq_dataset.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport logging\n\timport numpy as np\n\timport torch\n\tfrom fairseq.data import FairseqDataset, data_utils\n\tfrom fairseq.utils import new_arange\n\timport math\n", "from fairseq.utils import new_arange\n\tlogger = logging.getLogger(__name__)\n\tdef collate(\n\t    samples,\n\t    pad_idx,\n\t    eos_idx,\n\t    left_pad_source=True,\n\t    left_pad_target=False,\n\t    input_feeding=True,\n\t    pad_to_length=None,\n", "    pad_to_multiple=1,\n\t):\n\t    if len(samples) == 0:\n\t        return {}\n\t    def merge(key, left_pad, move_eos_to_beginning=False, pad_to_length=None):\n\t        return data_utils.collate_tokens(\n\t            [s[key] for s in samples],\n\t            pad_idx,\n\t            eos_idx,\n\t            left_pad,\n", "            move_eos_to_beginning,\n\t            pad_to_length=pad_to_length,\n\t            pad_to_multiple=pad_to_multiple,\n\t        )\n\t    def check_alignment(alignment, src_len, tgt_len):\n\t        if alignment is None or len(alignment) == 0:\n\t            return False\n\t        if (\n\t            alignment[:, 0].max().item() >= src_len - 1\n\t            or alignment[:, 1].max().item() >= tgt_len - 1\n", "        ):\n\t            logger.warning(\"alignment size mismatch found, skipping alignment!\")\n\t            return False\n\t        return True\n\t    def compute_alignment_weights(alignments):\n\t        \"\"\"\n\t        Given a tensor of shape [:, 2] containing the source-target indices\n\t        corresponding to the alignments, a weight vector containing the\n\t        inverse frequency of each target index is computed.\n\t        For e.g. if alignments = [[5, 7], [2, 3], [1, 3], [4, 2]], then\n", "        a tensor containing [1., 0.5, 0.5, 1] should be returned (since target\n\t        index 3 is repeated twice)\n\t        \"\"\"\n\t        align_tgt = alignments[:, 1]\n\t        _, align_tgt_i, align_tgt_c = torch.unique(\n\t            align_tgt, return_inverse=True, return_counts=True\n\t        )\n\t        align_weights = align_tgt_c[align_tgt_i[np.arange(len(align_tgt))]]\n\t        return 1.0 / align_weights.float()\n\t    id = torch.LongTensor([s[\"id\"] for s in samples])\n", "    src_tokens = merge(\n\t        \"source\",\n\t        left_pad=left_pad_source,\n\t        pad_to_length=pad_to_length[\"source\"] if pad_to_length is not None else None,\n\t    )\n\t    # sort by descending source length\n\t    src_lengths = torch.LongTensor(\n\t        [s[\"source\"].ne(pad_idx).long().sum() for s in samples]\n\t    )\n\t    src_lengths, sort_order = src_lengths.sort(descending=True)\n", "    id = id.index_select(0, sort_order)\n\t    src_tokens = src_tokens.index_select(0, sort_order)\n\t    def merge_data(data_name, sort_order):\n\t        prepared_data = merge(\n\t            data_name,\n\t            left_pad=left_pad_target,\n\t            pad_to_length=pad_to_length[data_name]\n\t            if pad_to_length is not None\n\t            else None,\n\t        )\n", "        return prepared_data.index_select(0, sort_order)\n\t    if samples[0].get(\"target\", None) is not None:\n\t        target = merge(\n\t            \"target\",\n\t            left_pad=left_pad_target,\n\t            pad_to_length=pad_to_length[\"target\"]\n\t            if pad_to_length is not None\n\t            else None,\n\t        )\n\t        target = target.index_select(0, sort_order)\n", "        tgt_lengths = torch.LongTensor(\n\t            [s[\"target\"].ne(pad_idx).long().sum() for s in samples]\n\t        ).index_select(0, sort_order)\n\t        ntokens = tgt_lengths.sum().item()\n\t    else:\n\t        target = None\n\t        ntokens = src_lengths.sum().item()\n\t    batch = {\n\t        \"id\": id,\n\t        \"nsentences\": len(samples),\n", "        \"ntokens\": ntokens,\n\t        \"net_input\": {\n\t            \"src_tokens\": src_tokens,\n\t            \"src_lengths\": src_lengths,\n\t        },\n\t        \"target\": target,\n\t    }\n\t    if samples[0].get(\"alignment\", None) is not None:\n\t        bsz, tgt_sz = batch[\"target\"].shape\n\t        src_sz = batch[\"net_input\"][\"src_tokens\"].shape[1]\n", "        offsets = torch.zeros((len(sort_order), 2), dtype=torch.long)\n\t        offsets[:, 1] += torch.arange(len(sort_order), dtype=torch.long) * tgt_sz\n\t        if left_pad_source:\n\t            offsets[:, 0] += src_sz - src_lengths\n\t        if left_pad_target:\n\t            offsets[:, 1] += tgt_sz - tgt_lengths\n\t        alignments = [\n\t            alignment + offset\n\t            for align_idx, offset, src_len, tgt_len in zip(\n\t                sort_order, offsets, src_lengths, tgt_lengths\n", "            )\n\t            for alignment in [samples[align_idx][\"alignment\"].view(-1, 2)]\n\t            if check_alignment(alignment, src_len, tgt_len)\n\t        ]\n\t        if len(alignments) > 0:\n\t            alignments = torch.cat(alignments, dim=0)\n\t            align_weights = compute_alignment_weights(alignments)\n\t            batch[\"alignments\"] = alignments\n\t            batch[\"align_weights\"] = align_weights\n\t    if samples[0].get(\"constraints\", None) is not None:\n", "        # Collate the packed constraints across the samples, padding to\n\t        # the length of the longest sample.\n\t        lens = [sample.get(\"constraints\").size(0) for sample in samples]\n\t        max_len = max(lens)\n\t        constraints = torch.zeros((len(samples), max(lens))).long()\n\t        for i, sample in enumerate(samples):\n\t            constraints[i, 0 : lens[i]] = samples[i].get(\"constraints\")\n\t        batch[\"constraints\"] = constraints\n\t    return batch\n\tclass LanguagePairDataset(FairseqDataset):\n", "    def __init__(\n\t        self,\n\t        src,\n\t        src_sizes,\n\t        src_dict,\n\t        tgt=None,\n\t        tgt_sizes=None,\n\t        tgt_dict=None,\n\t        left_pad_source=True,\n\t        left_pad_target=False,\n", "        shuffle=True,\n\t        input_feeding=True,\n\t        remove_eos_from_source=False,\n\t        append_eos_to_target=False,\n\t        align_dataset=None,\n\t        constraints=None,\n\t        append_bos=False,\n\t        eos=None,\n\t        num_buckets=0,\n\t        src_lang_id=None,\n", "        tgt_lang_id=None,\n\t        pad_to_multiple=1,\n\t    ):\n\t        if tgt_dict is not None:\n\t            assert src_dict.pad() == tgt_dict.pad()\n\t            assert src_dict.eos() == tgt_dict.eos()\n\t            assert src_dict.unk() == tgt_dict.unk()\n\t        if tgt is not None:\n\t            assert len(src) == len(\n\t                tgt\n", "            ), \"Source and target must contain the same number of examples\"\n\t        self.src = src\n\t        self.tgt = tgt\n\t        self.src_sizes = np.array(src_sizes)\n\t        self.tgt_sizes = np.array(tgt_sizes) if tgt_sizes is not None else None\n\t        self.sizes = (\n\t            np.vstack((self.src_sizes, self.tgt_sizes)).T\n\t            if self.tgt_sizes is not None\n\t            else self.src_sizes\n\t        )\n", "        self.src_dict = src_dict\n\t        self.tgt_dict = tgt_dict\n\t        self.left_pad_source = left_pad_source\n\t        self.left_pad_target = left_pad_target\n\t        self.shuffle = shuffle\n\t        self.input_feeding = input_feeding\n\t        self.remove_eos_from_source = remove_eos_from_source\n\t        self.append_eos_to_target = append_eos_to_target\n\t        self.align_dataset = align_dataset\n\t        if self.align_dataset is not None:\n", "            assert (\n\t                self.tgt_sizes is not None\n\t            ), \"Both source and target needed when alignments are provided\"\n\t        self.constraints = constraints\n\t        self.append_bos = append_bos\n\t        self.eos = eos if eos is not None else src_dict.eos()\n\t        self.src_lang_id = src_lang_id\n\t        self.tgt_lang_id = tgt_lang_id\n\t        if num_buckets > 0:\n\t            from fairseq.data import BucketPadLengthDataset\n", "            self.src = BucketPadLengthDataset(\n\t                self.src,\n\t                sizes=self.src_sizes,\n\t                num_buckets=num_buckets,\n\t                pad_idx=self.src_dict.pad(),\n\t                left_pad=self.left_pad_source,\n\t            )\n\t            self.src_sizes = self.src.sizes\n\t            logger.info(\"bucketing source lengths: {}\".format(list(self.src.buckets)))\n\t            if self.tgt is not None:\n", "                self.tgt = BucketPadLengthDataset(\n\t                    self.tgt,\n\t                    sizes=self.tgt_sizes,\n\t                    num_buckets=num_buckets,\n\t                    pad_idx=self.tgt_dict.pad(),\n\t                    left_pad=self.left_pad_target,\n\t                )\n\t                self.tgt_sizes = self.tgt.sizes\n\t                logger.info(\n\t                    \"bucketing target lengths: {}\".format(list(self.tgt.buckets))\n", "                )\n\t            # determine bucket sizes using self.num_tokens, which will return\n\t            # the padded lengths (thanks to BucketPadLengthDataset)\n\t            num_tokens = np.vectorize(self.num_tokens, otypes=[np.long])\n\t            self.bucketed_num_tokens = num_tokens(np.arange(len(self.src)))\n\t            self.buckets = [\n\t                (None, num_tokens) for num_tokens in np.unique(self.bucketed_num_tokens)\n\t            ]\n\t        else:\n\t            self.buckets = None\n", "        self.pad_to_multiple = pad_to_multiple\n\t    def get_batch_shapes(self):\n\t        return self.buckets\n\t    def __getitem__(self, index):\n\t        tgt_item = self.tgt[index] if self.tgt is not None else None\n\t        src_item = self.src[index]\n\t        example = {\n\t            \"id\": index,\n\t            \"source\": src_item,\n\t            \"target\": tgt_item,\n", "        }\n\t        if self.align_dataset is not None:\n\t            example[\"alignment\"] = self.align_dataset[index]\n\t        if self.constraints is not None:\n\t            example[\"constraints\"] = self.constraints[index]\n\t        return example\n\t    def __len__(self):\n\t        return len(self.src)\n\t    def collater(self, samples, pad_to_length=None):\n\t        res = collate(\n", "            samples,\n\t            pad_idx=self.src_dict.pad(),\n\t            eos_idx=self.eos,\n\t            left_pad_source=self.left_pad_source,\n\t            left_pad_target=self.left_pad_target,\n\t            input_feeding=self.input_feeding,\n\t            pad_to_length=pad_to_length,\n\t            pad_to_multiple=self.pad_to_multiple,\n\t        )\n\t        if self.src_lang_id is not None or self.tgt_lang_id is not None:\n", "            src_tokens = res[\"net_input\"][\"src_tokens\"]\n\t            bsz = src_tokens.size(0)\n\t            if self.src_lang_id is not None:\n\t                res[\"net_input\"][\"src_lang_id\"] = (\n\t                    torch.LongTensor([[self.src_lang_id]]).expand(bsz, 1).to(src_tokens)\n\t                )\n\t            if self.tgt_lang_id is not None:\n\t                res[\"tgt_lang_id\"] = (\n\t                    torch.LongTensor([[self.tgt_lang_id]]).expand(bsz, 1).to(src_tokens)\n\t                )\n", "        return res\n\t    def num_tokens(self, index):\n\t        \"\"\"Return the number of tokens in a sample. This value is used to\n\t        enforce ``--max-tokens`` during batching.\"\"\"\n\t        return max(\n\t            self.src_sizes[index],\n\t            self.tgt_sizes[index] if self.tgt_sizes is not None else 0,\n\t        )\n\t    def num_tokens_vec(self, indices):\n\t        \"\"\"Return the number of tokens for a set of positions defined by indices.\n", "        This value is used to enforce ``--max-tokens`` during batching.\"\"\"\n\t        sizes = self.src_sizes[indices]\n\t        if self.tgt_sizes is not None:\n\t            sizes = np.maximum(sizes, self.tgt_sizes[indices])\n\t        return sizes\n\t    def size(self, index):\n\t        \"\"\"Return an example's size as a float or tuple. This value is used when\n\t        filtering a dataset with ``--max-positions``.\"\"\"\n\t        return (\n\t            self.src_sizes[index],\n", "            self.tgt_sizes[index] if self.tgt_sizes is not None else 0,\n\t        )\n\t    def ordered_indices(self):\n\t        \"\"\"Return an ordered list of indices. Batches will be constructed based\n\t        on this order.\"\"\"\n\t        if self.shuffle:\n\t            indices = np.random.permutation(len(self)).astype(np.int64)\n\t        else:\n\t            indices = np.arange(len(self), dtype=np.int64)\n\t        if self.buckets is None:\n", "            # sort by target length, then source length\n\t            if self.tgt_sizes is not None:\n\t                indices = indices[np.argsort(self.tgt_sizes[indices], kind=\"mergesort\")]\n\t            return indices[np.argsort(self.src_sizes[indices], kind=\"mergesort\")]\n\t        else:\n\t            # sort by bucketed_num_tokens, which is:\n\t            #   max(padded_src_len, padded_tgt_len)\n\t            return indices[\n\t                np.argsort(self.bucketed_num_tokens[indices], kind=\"mergesort\")\n\t            ]\n", "    @property\n\t    def supports_prefetch(self):\n\t        return getattr(self.src, \"supports_prefetch\", False) and (\n\t            getattr(self.tgt, \"supports_prefetch\", False) or self.tgt is None\n\t        )\n\t    def prefetch(self, indices):\n\t        self.src.prefetch(indices)\n\t        if self.tgt is not None:\n\t            self.tgt.prefetch(indices)\n\t        if self.align_dataset is not None:\n", "            self.align_dataset.prefetch(indices)\n\t    def filter_indices_by_size(self, indices, max_sizes):\n\t        \"\"\"Filter a list of sample indices. Remove those that are longer\n\t            than specified in max_sizes.\n\t        Args:\n\t            indices (np.array): original array of sample indices\n\t            max_sizes (int or list[int] or tuple[int]): max sample size,\n\t                can be defined separately for src and tgt (then list or tuple)\n\t        Returns:\n\t            np.array: filtered sample array\n", "            list: list of removed indices\n\t        \"\"\"\n\t        return data_utils.filter_paired_dataset_indices_by_size(\n\t            self.src_sizes,\n\t            self.tgt_sizes,\n\t            indices,\n\t            max_sizes,\n\t        )\n"]}
{"filename": "xlmr/src/task/seq2seq_ft_task.py", "chunked_list": ["import torch\n\timport itertools\n\timport os\n\timport logging\n\tfrom typing import Dict, Optional\n\tfrom dataclasses import dataclass, field\n\tfrom fairseq import utils\n\tfrom fairseq.tasks.translation import TranslationTask\n\tfrom fairseq.utils import new_arange\n\tfrom fairseq.tasks import FairseqTask, register_task\n", "from fairseq.tasks.translation import TranslationConfig\n\tfrom fairseq.data import (\n\t    AppendTokenDataset,\n\t    ConcatDataset,\n\t    PrependTokenDataset,\n\t    StripTokenDataset,\n\t    TruncateDataset,\n\t    data_utils,\n\t    indexed_dataset,\n\t)\n", "from fairseq.data import iterators\n\tfrom .seq2seq_dataset import LanguagePairDataset\n\tfrom fairseq.utils import safe_getattr, safe_hasattr\n\tfrom fairseq.data import Dictionary\n\tlogger = logging.getLogger(__name__)\n\tdef load_langpair_dataset(\n\t    data_path,\n\t    split,\n\t    src,\n\t    src_dict,\n", "    tgt,\n\t    tgt_dict,\n\t    combine,\n\t    dataset_impl,\n\t    upsample_primary,\n\t    left_pad_source,\n\t    left_pad_target,\n\t    max_source_positions,\n\t    max_target_positions,\n\t    prepend_bos=False,\n", "    load_alignments=False,\n\t    truncate_source=False,\n\t    append_source_id=False,\n\t    num_buckets=0,\n\t    shuffle=True,\n\t    pad_to_multiple=1,\n\t    prepend_bos_src=None,\n\t):\n\t    def split_exists(split, src, tgt, lang, data_path):\n\t        filename = os.path.join(data_path, \"{}.{}-{}.{}\".format(split, src, tgt, lang))\n", "        return indexed_dataset.dataset_exists(filename, impl=dataset_impl)\n\t    src_datasets = []\n\t    tgt_datasets = []\n\t    for k in itertools.count():\n\t        split_k = split + (str(k) if k > 0 else \"\")\n\t        # infer langcode\n\t        if split_exists(split_k, src, tgt, src, data_path):\n\t            prefix = os.path.join(data_path, \"{}.{}-{}.\".format(split_k, src, tgt))\n\t        elif split_exists(split_k, tgt, src, src, data_path):\n\t            prefix = os.path.join(data_path, \"{}.{}-{}.\".format(split_k, tgt, src))\n", "        else:\n\t            if k > 0:\n\t                break\n\t            else:\n\t                raise FileNotFoundError(\n\t                    \"Dataset not found: {} ({})\".format(split, data_path)\n\t                )\n\t        src_dataset = data_utils.load_indexed_dataset(\n\t            prefix + src, src_dict, dataset_impl\n\t        )\n", "        if truncate_source:\n\t            src_dataset = AppendTokenDataset(\n\t                TruncateDataset(\n\t                    StripTokenDataset(src_dataset, src_dict.eos()),\n\t                    max_source_positions - 2,\n\t                ),\n\t                src_dict.eos(),\n\t            )\n\t        src_datasets.append(src_dataset)\n\t        tgt_dataset = data_utils.load_indexed_dataset(\n", "            prefix + tgt, tgt_dict, dataset_impl\n\t        )\n\t        if truncate_source:\n\t            tgt_dataset = AppendTokenDataset(\n\t                TruncateDataset(\n\t                    StripTokenDataset(tgt_dataset, tgt_dict.eos()),\n\t                    max_target_positions - 2,\n\t                ),\n\t                tgt_dict.eos(),\n\t            )\n", "        if tgt_dataset is not None:\n\t            tgt_datasets.append(tgt_dataset)\n\t        logger.info(\n\t            \"{} {} {}-{} {} examples\".format(\n\t                data_path, split_k, src, tgt, len(src_datasets[-1])\n\t            )\n\t        )\n\t        if not combine:\n\t            break\n\t    assert len(src_datasets) == len(tgt_datasets) or len(tgt_datasets) == 0\n", "    if len(src_datasets) == 1:\n\t        src_dataset = src_datasets[0]\n\t        tgt_dataset = tgt_datasets[0] if len(tgt_datasets) > 0 else None\n\t    else:\n\t        sample_ratios = [1] * len(src_datasets)\n\t        sample_ratios[0] = upsample_primary\n\t        src_dataset = ConcatDataset(src_datasets, sample_ratios)\n\t        if len(tgt_datasets) > 0:\n\t            tgt_dataset = ConcatDataset(tgt_datasets, sample_ratios)\n\t        else:\n", "            tgt_dataset = None\n\t    if prepend_bos:\n\t        assert hasattr(src_dict, \"bos_index\") and hasattr(tgt_dict, \"bos_index\")\n\t        src_dataset = PrependTokenDataset(src_dataset, src_dict.bos())\n\t        if tgt_dataset is not None:\n\t            tgt_dataset = PrependTokenDataset(tgt_dataset, tgt_dict.bos())\n\t    elif prepend_bos_src is not None:\n\t        logger.info(f\"prepending src bos: {prepend_bos_src}\")\n\t        src_dataset = PrependTokenDataset(src_dataset, prepend_bos_src)\n\t    eos = None\n", "    if append_source_id:\n\t        src_dataset = AppendTokenDataset(\n\t            src_dataset, src_dict.index(\"[{}]\".format(src))\n\t        )\n\t        if tgt_dataset is not None:\n\t            tgt_dataset = AppendTokenDataset(\n\t                tgt_dataset, tgt_dict.index(\"[{}]\".format(tgt))\n\t            )\n\t        eos = tgt_dict.index(\"[{}]\".format(tgt))\n\t    align_dataset = None\n", "    if load_alignments:\n\t        align_path = os.path.join(data_path, \"{}.align.{}-{}\".format(split, src, tgt))\n\t        if indexed_dataset.dataset_exists(align_path, impl=dataset_impl):\n\t            align_dataset = data_utils.load_indexed_dataset(\n\t                align_path, None, dataset_impl\n\t            )\n\t    tgt_dataset_sizes = tgt_dataset.sizes if tgt_dataset is not None else None\n\t    return LanguagePairDataset(\n\t        src_dataset,\n\t        src_dataset.sizes,\n", "        src_dict,\n\t        tgt_dataset,\n\t        tgt_dataset_sizes,\n\t        tgt_dict,\n\t        left_pad_source=left_pad_source,\n\t        left_pad_target=left_pad_target,\n\t        align_dataset=align_dataset,\n\t        eos=eos,\n\t        num_buckets=num_buckets,\n\t        shuffle=shuffle,\n", "        pad_to_multiple=pad_to_multiple,\n\t    )\n\t@dataclass\n\tclass FTTaskConfig(TranslationConfig):\n\t    megatron_model: bool = field(\n\t        default=False,\n\t        metadata={\"help\": \"using megatron-lm to split model\"},\n\t    )\n\t@register_task(\"seq2seq_ft_task\", dataclass=FTTaskConfig)\n\tclass Seq2SeqFineTuningTask(TranslationTask):\n", "    def __init__(self, cfg, src_dict, tgt_dict):\n\t        super().__init__(cfg, src_dict, tgt_dict)\n\t        self.megatron_model = safe_getattr(cfg, \"megatron_model\", False)\n\t    @classmethod\n\t    def load_dictionary(cls, filename):\n\t        dictionary = Dictionary.load(filename)\n\t        dictionary.add_symbol(\"<mask>\")\n\t        return dictionary\n\t    def load_dataset(self, split, epoch=1, combine=False, **kwargs):\n\t        paths = utils.split_paths(self.cfg.data)\n", "        data_path = paths[(epoch - 1) % len(paths)]\n\t        src, tgt = self.cfg.source_lang, self.cfg.target_lang\n\t        self.cfg.left_pad_source = False\n\t        self.cfg.left_pad_target = False\n\t        self.datasets[split] = load_langpair_dataset(\n\t            data_path,\n\t            split,\n\t            src,\n\t            self.src_dict,\n\t            tgt,\n", "            self.tgt_dict,\n\t            combine=combine,\n\t            dataset_impl=self.cfg.dataset_impl,\n\t            upsample_primary=self.cfg.upsample_primary,\n\t            left_pad_source=self.cfg.left_pad_source,\n\t            left_pad_target=self.cfg.left_pad_target,\n\t            max_source_positions=self.cfg.max_source_positions,\n\t            max_target_positions=self.cfg.max_target_positions,\n\t            truncate_source=self.cfg.truncate_source,\n\t            shuffle=(split != \"test\"),\n", "            prepend_bos=True,\n\t        )\n\t    def build_dataset_for_inference(self, src_tokens, src_lengths, constraints=None):\n\t        return LanguagePairDataset(\n\t            src_tokens,\n\t            src_lengths,\n\t            self.source_dictionary,\n\t            tgt_dict=self.target_dictionary,\n\t            constraints=constraints,\n\t        )\n", "    def build_generator(self, models, args=None, **kwargs):\n\t        from generator.iterative_refinement_generator import IterativeRefinementGenerator\n\t        return IterativeRefinementGenerator(\n\t            self.target_dictionary,\n\t            eos_penalty=getattr(args, \"iter_decode_eos_penalty\", 0.0),\n\t            max_iter=getattr(args, \"iter_decode_max_iter\", 9),\n\t            beam_size=getattr(args, \"iter_decode_with_beam\", 1),\n\t            reranking=getattr(args, \"iter_decode_with_external_reranker\", False),\n\t            decoding_format=getattr(args, \"decoding_format\", None),\n\t            adaptive=not getattr(args, \"iter_decode_force_max_iter\", True),\n", "            retain_history=getattr(args, \"retain_iter_history\", False),\n\t        )\n"]}
{"filename": "xlmr/src/generator/sequence_generator.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport math\n\timport sys\n\tfrom typing import Dict, List, Optional\n\timport torch\n\timport torch.nn as nn\n\tfrom torch import Tensor\n", "from fairseq import search, utils\n\tfrom fairseq.data import data_utils\n\tfrom fairseq.models import FairseqIncrementalDecoder\n\tfrom fairseq.ngram_repeat_block import NGramRepeatBlock\n\tclass SequenceGenerator(nn.Module):\n\t    def __init__(\n\t        self,\n\t        models,\n\t        tgt_dict,\n\t        beam_size=1,\n", "        max_len_a=0,\n\t        max_len_b=200,\n\t        max_len=0,\n\t        min_len=1,\n\t        normalize_scores=True,\n\t        len_penalty=1.0,\n\t        unk_penalty=0.0,\n\t        temperature=1.0,\n\t        match_source_len=False,\n\t        no_repeat_ngram_size=0,\n", "        search_strategy=None,\n\t        eos=None,\n\t        symbols_to_strip_from_output=None,\n\t        lm_model=None,\n\t        lm_weight=1.0,\n\t        tokens_to_suppress=(),\n\t    ):\n\t        \"\"\"Generates translations of a given source sentence.\n\t        Args:\n\t            models (List[~fairseq.models.FairseqModel]): ensemble of models,\n", "                currently support fairseq.models.TransformerModel for scripting\n\t            beam_size (int, optional): beam width (default: 1)\n\t            max_len_a/b (int, optional): generate sequences of maximum length\n\t                ax + b, where x is the source length\n\t            max_len (int, optional): the maximum length of the generated output\n\t                (not including end-of-sentence)\n\t            min_len (int, optional): the minimum length of the generated output\n\t                (not including end-of-sentence)\n\t            normalize_scores (bool, optional): normalize scores by the length\n\t                of the output (default: True)\n", "            len_penalty (float, optional): length penalty, where <1.0 favors\n\t                shorter, >1.0 favors longer sentences (default: 1.0)\n\t            unk_penalty (float, optional): unknown word penalty, where <0\n\t                produces more unks, >0 produces fewer (default: 0.0)\n\t            temperature (float, optional): temperature, where values\n\t                >1.0 produce more uniform samples and values <1.0 produce\n\t                sharper samples (default: 1.0)\n\t            match_source_len (bool, optional): outputs should match the source\n\t                length (default: False)\n\t        \"\"\"\n", "        super().__init__()\n\t        if isinstance(models, EnsembleModel):\n\t            self.model = models\n\t        else:\n\t            self.model = EnsembleModel(models)\n\t        self.tgt_dict = tgt_dict\n\t        self.pad = tgt_dict.pad()\n\t        self.unk = tgt_dict.unk()\n\t        self.eos = tgt_dict.eos() if eos is None else eos\n\t        self.symbols_to_strip_from_output = (\n", "            symbols_to_strip_from_output.union({self.eos})\n\t            if symbols_to_strip_from_output is not None\n\t            else {self.eos}\n\t        )\n\t        self.token_indices_to_suppress: Optional[Tensor] = None\n\t        token_indices_to_suppress = []\n\t        for token_string in tokens_to_suppress:\n\t            token_index = tgt_dict.index(token_string)\n\t            assert token_index != self.unk\n\t            token_indices_to_suppress.append(token_index)\n", "        if len(token_indices_to_suppress) > 0:\n\t            self.token_indices_to_suppress = torch.Tensor(\n\t                token_indices_to_suppress\n\t            ).long()\n\t        self.vocab_size = len(tgt_dict)\n\t        self.beam_size = beam_size\n\t        # the max beam size is the dictionary size - 1, since we never select pad\n\t        self.beam_size = min(beam_size, self.vocab_size - 1)\n\t        self.model.set_decoder_beam_size(self.beam_size)\n\t        self.max_len_a = max_len_a\n", "        self.max_len_b = max_len_b\n\t        self.min_len = min_len\n\t        self.max_len = max_len or self.model.max_decoder_positions()\n\t        self.normalize_scores = normalize_scores\n\t        self.len_penalty = len_penalty\n\t        self.unk_penalty = unk_penalty\n\t        self.temperature = temperature\n\t        self.match_source_len = match_source_len\n\t        if no_repeat_ngram_size > 0:\n\t            self.repeat_ngram_blocker = NGramRepeatBlock(no_repeat_ngram_size)\n", "        else:\n\t            self.repeat_ngram_blocker = None\n\t        assert temperature > 0, \"--temperature must be greater than 0\"\n\t        self.search = (\n\t            search.BeamSearch(tgt_dict) if search_strategy is None else search_strategy\n\t        )\n\t        # We only need to set src_lengths in LengthConstrainedBeamSearch.\n\t        # As a module attribute, setting it would break in multithread\n\t        # settings when the model is shared.\n\t        self.should_set_src_lengths = (\n", "            hasattr(self.search, \"needs_src_lengths\") and self.search.needs_src_lengths\n\t        )\n\t        self.model.eval()\n\t        self.lm_model = lm_model\n\t        self.lm_weight = lm_weight\n\t        if self.lm_model is not None:\n\t            self.lm_model.eval()\n\t    def cuda(self):\n\t        self.model.cuda()\n\t        return self\n", "    @torch.no_grad()\n\t    def forward(\n\t        self,\n\t        sample: Dict[str, Dict[str, Tensor]],\n\t        prefix_tokens: Optional[Tensor] = None,\n\t        bos_token: Optional[int] = None,\n\t    ):\n\t        \"\"\"Generate a batch of translations.\n\t        Args:\n\t            sample (dict): batch\n", "            prefix_tokens (torch.LongTensor, optional): force decoder to begin\n\t                with these tokens\n\t            bos_token (int, optional): beginning of sentence token\n\t                (default: self.eos)\n\t        \"\"\"\n\t        return self._generate(sample, prefix_tokens, bos_token=bos_token)\n\t    # TODO(myleott): unused, deprecate after pytorch-translate migration\n\t    def generate_batched_itr(self, data_itr, beam_size=None, cuda=False, timer=None):\n\t        \"\"\"Iterate over a batched dataset and yield individual translations.\n\t        Args:\n", "            cuda (bool, optional): use GPU for generation\n\t            timer (StopwatchMeter, optional): time generations\n\t        \"\"\"\n\t        for sample in data_itr:\n\t            s = utils.move_to_cuda(sample) if cuda else sample\n\t            if \"net_input\" not in s:\n\t                continue\n\t            input = s[\"net_input\"]\n\t            # model.forward normally channels prev_output_tokens into the decoder\n\t            # separately, but SequenceGenerator directly calls model.encoder\n", "            encoder_input = {\n\t                k: v for k, v in input.items() if k != \"prev_output_tokens\"\n\t            }\n\t            if timer is not None:\n\t                timer.start()\n\t            with torch.no_grad():\n\t                hypos = self.generate(encoder_input)\n\t            if timer is not None:\n\t                timer.stop(sum(len(h[0][\"tokens\"]) for h in hypos))\n\t            for i, id in enumerate(s[\"id\"].data):\n", "                # remove padding\n\t                src = utils.strip_pad(input[\"src_tokens\"].data[i, :], self.pad)\n\t                ref = (\n\t                    utils.strip_pad(s[\"target\"].data[i, :], self.pad)\n\t                    if s[\"target\"] is not None\n\t                    else None\n\t                )\n\t                yield id, src, ref, hypos[i]\n\t    @torch.no_grad()\n\t    def generate(\n", "        self, models, sample: Dict[str, Dict[str, Tensor]], **kwargs\n\t    ) -> List[List[Dict[str, Tensor]]]:\n\t        \"\"\"Generate translations. Match the api of other fairseq generators.\n\t        Args:\n\t            models (List[~fairseq.models.FairseqModel]): ensemble of models\n\t            sample (dict): batch\n\t            prefix_tokens (torch.LongTensor, optional): force decoder to begin\n\t                with these tokens\n\t            constraints (torch.LongTensor, optional): force decoder to include\n\t                the list of constraints\n", "            bos_token (int, optional): beginning of sentence token\n\t                (default: self.eos)\n\t        \"\"\"\n\t        return self._generate(sample, **kwargs)\n\t    def _generate(\n\t        self,\n\t        sample: Dict[str, Dict[str, Tensor]],\n\t        prefix_tokens: Optional[Tensor] = None,\n\t        constraints: Optional[Tensor] = None,\n\t        bos_token: Optional[int] = None,\n", "    ):\n\t        incremental_states = torch.jit.annotate(\n\t            List[Dict[str, Dict[str, Optional[Tensor]]]],\n\t            [\n\t                torch.jit.annotate(Dict[str, Dict[str, Optional[Tensor]]], {})\n\t                for i in range(self.model.models_size)\n\t            ],\n\t        )\n\t        net_input = sample[\"net_input\"]\n\t        if \"src_tokens\" in net_input:\n", "            src_tokens = net_input[\"src_tokens\"]\n\t            # length of the source text being the character length except EndOfSentence and pad\n\t            # if src_lengths exists in net_input (speech_to_text dataset case), then use it\n\t            if \"src_lengths\" in net_input:\n\t                src_lengths = net_input[\"src_lengths\"]\n\t            else:\n\t                src_lengths = (\n\t                    (src_tokens.ne(self.eos) & src_tokens.ne(self.pad))\n\t                    .long()\n\t                    .sum(dim=1)\n", "                )\n\t        elif \"source\" in net_input:\n\t            src_tokens = net_input[\"source\"]\n\t            src_lengths = (\n\t                net_input[\"padding_mask\"].size(-1) - net_input[\"padding_mask\"].sum(-1)\n\t                if net_input[\"padding_mask\"] is not None\n\t                else torch.tensor(src_tokens.size(-1)).to(src_tokens)\n\t            )\n\t        elif \"features\" in net_input:\n\t            src_tokens = net_input[\"features\"]\n", "            src_lengths = (\n\t                net_input[\"padding_mask\"].size(-1) - net_input[\"padding_mask\"].sum(-1)\n\t                if net_input[\"padding_mask\"] is not None\n\t                else torch.tensor(src_tokens.size(-1)).to(src_tokens)\n\t            )\n\t        else:\n\t            raise Exception(\n\t                \"expected src_tokens or source in net input. input keys: \"\n\t                + str(net_input.keys())\n\t            )\n", "        # bsz: total number of sentences in beam\n\t        # Note that src_tokens may have more than 2 dimensions (i.e. audio features)\n\t        bsz, src_len = src_tokens.size()[:2]\n\t        beam_size = self.beam_size\n\t        if constraints is not None and not self.search.supports_constraints:\n\t            raise NotImplementedError(\n\t                \"Target-side constraints were provided, but search method doesn't support them\"\n\t            )\n\t        # Initialize constraints, when active\n\t        self.search.init_constraints(constraints, beam_size)\n", "        max_len: int = -1\n\t        if self.match_source_len:\n\t            max_len = src_lengths.max().item()\n\t        else:\n\t            max_len = min(\n\t                int(self.max_len_a * src_len + self.max_len_b),\n\t                self.max_len - 1,\n\t            )\n\t        assert (\n\t            self.min_len <= max_len\n", "        ), \"min_len cannot be larger than max_len, please adjust these!\"\n\t        # compute the encoder output for each beam\n\t        with torch.autograd.profiler.record_function(\"EnsembleModel: forward_encoder\"):\n\t            encoder_outs = self.model.forward_encoder(net_input)\n\t        # placeholder of indices for bsz * beam_size to hold tokens and accumulative scores\n\t        new_order = torch.arange(bsz).view(-1, 1).repeat(1, beam_size).view(-1)\n\t        new_order = new_order.to(src_tokens.device).long()\n\t        encoder_outs = self.model.reorder_encoder_out(encoder_outs, new_order)\n\t        # ensure encoder_outs is a List.\n\t        assert encoder_outs is not None\n", "        # initialize buffers\n\t        scores = (\n\t            torch.zeros(bsz * beam_size, max_len + 1).to(src_tokens).float()\n\t        )  # +1 for eos; pad is never chosen for scoring\n\t        tokens = (\n\t            torch.zeros(bsz * beam_size, max_len + 2)\n\t            .to(src_tokens)\n\t            .long()\n\t            .fill_(self.pad)\n\t        )  # +2 for eos and pad\n", "        if bos_token is not None:\n\t            bos_new_token = bos_token.repeat(beam_size, 1)\n\t        tokens[:, 0] = self.eos if bos_token is None else bos_new_token.squeeze()\n\t        attn: Optional[Tensor] = None\n\t        # A list that indicates candidates that should be ignored.\n\t        # For example, suppose we're sampling and have already finalized 2/5\n\t        # samples. Then cands_to_ignore would mark 2 positions as being ignored,\n\t        # so that we only finalize the remaining 3 samples.\n\t        cands_to_ignore = (\n\t            torch.zeros(bsz, beam_size).to(src_tokens).eq(-1)\n", "        )  # forward and backward-compatible False mask\n\t        # list of completed sentences\n\t        finalized = torch.jit.annotate(\n\t            List[List[Dict[str, Tensor]]],\n\t            [torch.jit.annotate(List[Dict[str, Tensor]], []) for i in range(bsz)],\n\t        )  # contains lists of dictionaries of infomation about the hypothesis being finalized at each step\n\t        # a boolean array indicating if the sentence at the index is finished or not\n\t        finished = [False for i in range(bsz)]\n\t        num_remaining_sent = bsz  # number of sentences remaining\n\t        # number of candidate hypos per step\n", "        cand_size = 2 * beam_size  # 2 x beam size in case half are EOS\n\t        # offset arrays for converting between different indexing schemes\n\t        bbsz_offsets = (\n\t            (torch.arange(0, bsz) * beam_size)\n\t            .unsqueeze(1)\n\t            .type_as(tokens)\n\t            .to(src_tokens.device)\n\t        )\n\t        cand_offsets = torch.arange(0, cand_size).type_as(tokens).to(src_tokens.device)\n\t        reorder_state: Optional[Tensor] = None\n", "        batch_idxs: Optional[Tensor] = None\n\t        original_batch_idxs: Optional[Tensor] = None\n\t        if \"id\" in sample and isinstance(sample[\"id\"], Tensor):\n\t            original_batch_idxs = sample[\"id\"]\n\t        else:\n\t            original_batch_idxs = torch.arange(0, bsz).type_as(tokens)\n\t        for step in range(max_len + 1):  # one extra step for EOS marker\n\t            # reorder decoder internal states based on the prev choice of beams\n\t            if reorder_state is not None:\n\t                if batch_idxs is not None:\n", "                    # update beam indices to take into account removed sentences\n\t                    corr = batch_idxs - torch.arange(batch_idxs.numel()).type_as(\n\t                        batch_idxs\n\t                    )\n\t                    reorder_state.view(-1, beam_size).add_(\n\t                        corr.unsqueeze(-1) * beam_size\n\t                    )\n\t                    original_batch_idxs = original_batch_idxs[batch_idxs]\n\t                self.model.reorder_incremental_state(incremental_states, reorder_state)\n\t                encoder_outs = self.model.reorder_encoder_out(\n", "                    encoder_outs, reorder_state\n\t                )\n\t            with torch.autograd.profiler.record_function(\n\t                \"EnsembleModel: forward_decoder\"\n\t            ):\n\t                lprobs, avg_attn_scores = self.model.forward_decoder(\n\t                    tokens[:, : step + 1],\n\t                    encoder_outs,\n\t                    incremental_states,\n\t                    self.temperature,\n", "                )\n\t            if self.lm_model is not None:\n\t                lm_out = self.lm_model(tokens[:, : step + 1])\n\t                probs = self.lm_model.get_normalized_probs(\n\t                    lm_out, log_probs=True, sample=None\n\t                )\n\t                probs = probs[:, -1, :] * self.lm_weight\n\t                lprobs += probs\n\t            lprobs[lprobs != lprobs] = torch.tensor(-math.inf).to(lprobs)\n\t            lprobs[:, self.pad] = -math.inf  # never select pad\n", "            lprobs[:, self.unk] -= self.unk_penalty  # apply unk penalty\n\t            # handle max length constraint\n\t            if step >= max_len:\n\t                lprobs[:, : self.eos] = -math.inf\n\t                lprobs[:, self.eos + 1 :] = -math.inf\n\t            # handle prefix tokens (possibly with different lengths)\n\t            if (\n\t                prefix_tokens is not None\n\t                and step < prefix_tokens.size(1)\n\t                and step < max_len\n", "            ):\n\t                lprobs, tokens, scores = self._prefix_tokens(\n\t                    step, lprobs, scores, tokens, prefix_tokens, beam_size\n\t                )\n\t            else:\n\t                if step < self.min_len:\n\t                    # minimum length constraint (does not apply if using prefix_tokens)\n\t                    lprobs[:, self.eos] = -math.inf\n\t                if self.token_indices_to_suppress is not None:\n\t                    lprobs[:, self.token_indices_to_suppress] = -math.inf\n", "            # Record attention scores, only support avg_attn_scores is a Tensor\n\t            if avg_attn_scores is not None:\n\t                if attn is None:\n\t                    attn = torch.empty(\n\t                        bsz * beam_size, avg_attn_scores.size(1), max_len + 2\n\t                    ).to(scores)\n\t                attn[:, :, step + 1].copy_(avg_attn_scores)\n\t            scores = scores.type_as(lprobs)\n\t            eos_bbsz_idx = torch.empty(0).to(\n\t                tokens\n", "            )  # indices of hypothesis ending with eos (finished sentences)\n\t            eos_scores = torch.empty(0).to(\n\t                scores\n\t            )  # scores of hypothesis ending with eos (finished sentences)\n\t            if self.should_set_src_lengths:\n\t                self.search.set_src_lengths(src_lengths)\n\t            if self.repeat_ngram_blocker is not None:\n\t                lprobs = self.repeat_ngram_blocker(tokens, lprobs, bsz, beam_size, step)\n\t            # Shape: (batch, cand_size)\n\t            cand_scores, cand_indices, cand_beams = self.search.step(\n", "                step,\n\t                lprobs.view(bsz, -1, self.vocab_size),\n\t                scores.view(bsz, beam_size, -1)[:, :, :step],\n\t                tokens[:, : step + 1],\n\t                original_batch_idxs,\n\t            )\n\t            # cand_bbsz_idx contains beam indices for the top candidate\n\t            # hypotheses, with a range of values: [0, bsz*beam_size),\n\t            # and dimensions: [bsz, cand_size]\n\t            cand_bbsz_idx = cand_beams.add(bbsz_offsets)\n", "            # finalize hypotheses that end in eos\n\t            # Shape of eos_mask: (batch size, beam size)\n\t            eos_mask = cand_indices.eq(self.eos) & cand_scores.ne(-math.inf)\n\t            eos_mask[:, :beam_size][cands_to_ignore] = torch.tensor(0).to(eos_mask)\n\t            # only consider eos when it's among the top beam_size indices\n\t            # Now we know what beam item(s) to finish\n\t            # Shape: 1d list of absolute-numbered\n\t            eos_bbsz_idx = torch.masked_select(\n\t                cand_bbsz_idx[:, :beam_size], mask=eos_mask[:, :beam_size]\n\t            )\n", "            finalized_sents: List[int] = []\n\t            if eos_bbsz_idx.numel() > 0:\n\t                eos_scores = torch.masked_select(\n\t                    cand_scores[:, :beam_size], mask=eos_mask[:, :beam_size]\n\t                )\n\t                finalized_sents = self.finalize_hypos(\n\t                    step,\n\t                    eos_bbsz_idx,\n\t                    eos_scores,\n\t                    tokens,\n", "                    scores,\n\t                    finalized,\n\t                    finished,\n\t                    beam_size,\n\t                    attn,\n\t                    src_lengths,\n\t                    max_len,\n\t                )\n\t                num_remaining_sent -= len(finalized_sents)\n\t            assert num_remaining_sent >= 0\n", "            if num_remaining_sent == 0:\n\t                break\n\t            if self.search.stop_on_max_len and step >= max_len:\n\t                break\n\t            assert step < max_len, f\"{step} < {max_len}\"\n\t            # Remove finalized sentences (ones for which {beam_size}\n\t            # finished hypotheses have been generated) from the batch.\n\t            if len(finalized_sents) > 0:\n\t                new_bsz = bsz - len(finalized_sents)\n\t                # construct batch_idxs which holds indices of batches to keep for the next pass\n", "                batch_mask = torch.ones(\n\t                    bsz, dtype=torch.bool, device=cand_indices.device\n\t                )\n\t                batch_mask[finalized_sents] = False\n\t                # TODO replace `nonzero(as_tuple=False)` after TorchScript supports it\n\t                batch_idxs = torch.arange(\n\t                    bsz, device=cand_indices.device\n\t                ).masked_select(batch_mask)\n\t                # Choose the subset of the hypothesized constraints that will continue\n\t                self.search.prune_sentences(batch_idxs)\n", "                eos_mask = eos_mask[batch_idxs]\n\t                cand_beams = cand_beams[batch_idxs]\n\t                bbsz_offsets.resize_(new_bsz, 1)\n\t                cand_bbsz_idx = cand_beams.add(bbsz_offsets)\n\t                cand_scores = cand_scores[batch_idxs]\n\t                cand_indices = cand_indices[batch_idxs]\n\t                if prefix_tokens is not None:\n\t                    prefix_tokens = prefix_tokens[batch_idxs]\n\t                src_lengths = src_lengths[batch_idxs]\n\t                cands_to_ignore = cands_to_ignore[batch_idxs]\n", "                scores = scores.view(bsz, -1)[batch_idxs].view(new_bsz * beam_size, -1)\n\t                tokens = tokens.view(bsz, -1)[batch_idxs].view(new_bsz * beam_size, -1)\n\t                if attn is not None:\n\t                    attn = attn.view(bsz, -1)[batch_idxs].view(\n\t                        new_bsz * beam_size, attn.size(1), -1\n\t                    )\n\t                bsz = new_bsz\n\t            else:\n\t                batch_idxs = None\n\t            # Set active_mask so that values > cand_size indicate eos hypos\n", "            # and values < cand_size indicate candidate active hypos.\n\t            # After, the min values per row are the top candidate active hypos\n\t            # Rewrite the operator since the element wise or is not supported in torchscript.\n\t            eos_mask[:, :beam_size] = ~((~cands_to_ignore) & (~eos_mask[:, :beam_size]))\n\t            active_mask = torch.add(\n\t                eos_mask.type_as(cand_offsets) * cand_size,\n\t                cand_offsets[: eos_mask.size(1)],\n\t            )\n\t            # get the top beam_size active hypotheses, which are just\n\t            # the hypos with the smallest values in active_mask.\n", "            # {active_hypos} indicates which {beam_size} hypotheses\n\t            # from the list of {2 * beam_size} candidates were\n\t            # selected. Shapes: (batch size, beam size)\n\t            new_cands_to_ignore, active_hypos = torch.topk(\n\t                active_mask, k=beam_size, dim=1, largest=False\n\t            )\n\t            # update cands_to_ignore to ignore any finalized hypos.\n\t            cands_to_ignore = new_cands_to_ignore.ge(cand_size)[:, :beam_size]\n\t            # Make sure there is at least one active item for each sentence in the batch.\n\t            assert (~cands_to_ignore).any(dim=1).all()\n", "            # update cands_to_ignore to ignore any finalized hypos\n\t            # {active_bbsz_idx} denotes which beam number is continued for each new hypothesis (a beam\n\t            # can be selected more than once).\n\t            active_bbsz_idx = torch.gather(cand_bbsz_idx, dim=1, index=active_hypos)\n\t            active_scores = torch.gather(cand_scores, dim=1, index=active_hypos)\n\t            active_bbsz_idx = active_bbsz_idx.view(-1)\n\t            active_scores = active_scores.view(-1)\n\t            # copy tokens and scores for active hypotheses\n\t            # Set the tokens for each beam (can select the same row more than once)\n\t            tokens[:, : step + 1] = torch.index_select(\n", "                tokens[:, : step + 1], dim=0, index=active_bbsz_idx\n\t            )\n\t            # Select the next token for each of them\n\t            tokens.view(bsz, beam_size, -1)[:, :, step + 1] = torch.gather(\n\t                cand_indices, dim=1, index=active_hypos\n\t            )\n\t            if step > 0:\n\t                scores[:, :step] = torch.index_select(\n\t                    scores[:, :step], dim=0, index=active_bbsz_idx\n\t                )\n", "            scores.view(bsz, beam_size, -1)[:, :, step] = torch.gather(\n\t                cand_scores, dim=1, index=active_hypos\n\t            )\n\t            # Update constraints based on which candidates were selected for the next beam\n\t            self.search.update_constraints(active_hypos)\n\t            # copy attention for active hypotheses\n\t            if attn is not None:\n\t                attn[:, :, : step + 2] = torch.index_select(\n\t                    attn[:, :, : step + 2], dim=0, index=active_bbsz_idx\n\t                )\n", "            # reorder incremental state in decoder\n\t            reorder_state = active_bbsz_idx\n\t        # sort by score descending\n\t        for sent in range(len(finalized)):\n\t            scores = torch.tensor(\n\t                [float(elem[\"score\"].item()) for elem in finalized[sent]]\n\t            )\n\t            _, sorted_scores_indices = torch.sort(scores, descending=True)\n\t            finalized[sent] = [finalized[sent][ssi] for ssi in sorted_scores_indices]\n\t            finalized[sent] = torch.jit.annotate(\n", "                List[Dict[str, Tensor]], finalized[sent]\n\t            )\n\t        return finalized\n\t    def _prefix_tokens(\n\t        self, step: int, lprobs, scores, tokens, prefix_tokens, beam_size: int\n\t    ):\n\t        \"\"\"Handle prefix tokens\"\"\"\n\t        prefix_toks = prefix_tokens[:, step].unsqueeze(-1).repeat(1, beam_size).view(-1)\n\t        prefix_lprobs = lprobs.gather(-1, prefix_toks.unsqueeze(-1))\n\t        prefix_mask = prefix_toks.ne(self.pad)\n", "        lprobs[prefix_mask] = torch.tensor(-math.inf).to(lprobs)\n\t        lprobs[prefix_mask] = lprobs[prefix_mask].scatter(\n\t            -1, prefix_toks[prefix_mask].unsqueeze(-1), prefix_lprobs[prefix_mask]\n\t        )\n\t        # if prefix includes eos, then we should make sure tokens and\n\t        # scores are the same across all beams\n\t        eos_mask = prefix_toks.eq(self.eos)\n\t        if eos_mask.any():\n\t            # validate that the first beam matches the prefix\n\t            first_beam = tokens[eos_mask].view(-1, beam_size, tokens.size(-1))[\n", "                :, 0, 1 : step + 1\n\t            ]\n\t            eos_mask_batch_dim = eos_mask.view(-1, beam_size)[:, 0]\n\t            target_prefix = prefix_tokens[eos_mask_batch_dim][:, :step]\n\t            assert (first_beam == target_prefix).all()\n\t            # copy tokens, scores and lprobs from the first beam to all beams\n\t            tokens = self.replicate_first_beam(tokens, eos_mask_batch_dim, beam_size)\n\t            scores = self.replicate_first_beam(scores, eos_mask_batch_dim, beam_size)\n\t            lprobs = self.replicate_first_beam(lprobs, eos_mask_batch_dim, beam_size)\n\t        return lprobs, tokens, scores\n", "    def replicate_first_beam(self, tensor, mask, beam_size: int):\n\t        tensor = tensor.view(-1, beam_size, tensor.size(-1))\n\t        tensor[mask] = tensor[mask][:, :1, :]\n\t        return tensor.view(-1, tensor.size(-1))\n\t    def finalize_hypos(\n\t        self,\n\t        step: int,\n\t        bbsz_idx,\n\t        eos_scores,\n\t        tokens,\n", "        scores,\n\t        finalized: List[List[Dict[str, Tensor]]],\n\t        finished: List[bool],\n\t        beam_size: int,\n\t        attn: Optional[Tensor],\n\t        src_lengths,\n\t        max_len: int,\n\t    ):\n\t        \"\"\"Finalize hypothesis, store finalized information in `finalized`, and change `finished` accordingly.\n\t        A sentence is finalized when {beam_size} finished items have been collected for it.\n", "        Returns number of sentences (not beam items) being finalized.\n\t        These will be removed from the batch and not processed further.\n\t        Args:\n\t            bbsz_idx (Tensor):\n\t        \"\"\"\n\t        assert bbsz_idx.numel() == eos_scores.numel()\n\t        # clone relevant token and attention tensors.\n\t        # tokens is (batch * beam, max_len). So the index_select\n\t        # gets the newly EOS rows, then selects cols 1..{step + 2}\n\t        tokens_clone = tokens.index_select(0, bbsz_idx)[\n", "            :, 1 : step + 2\n\t        ]  # skip the first index, which is EOS\n\t        tokens_clone[:, step] = self.eos\n\t        attn_clone = (\n\t            attn.index_select(0, bbsz_idx)[:, :, 1 : step + 2]\n\t            if attn is not None\n\t            else None\n\t        )\n\t        # compute scores per token position\n\t        pos_scores = scores.index_select(0, bbsz_idx)[:, : step + 1]\n", "        pos_scores[:, step] = eos_scores\n\t        # convert from cumulative to per-position scores\n\t        pos_scores[:, 1:] = pos_scores[:, 1:] - pos_scores[:, :-1]\n\t        # normalize sentence-level scores\n\t        if self.normalize_scores:\n\t            eos_scores /= (step + 1) ** self.len_penalty\n\t        # cum_unfin records which sentences in the batch are finished.\n\t        # It helps match indexing between (a) the original sentences\n\t        # in the batch and (b) the current, possibly-reduced set of\n\t        # sentences.\n", "        cum_unfin: List[int] = []\n\t        prev = 0\n\t        for f in finished:\n\t            if f:\n\t                prev += 1\n\t            else:\n\t                cum_unfin.append(prev)\n\t        cum_fin_tensor = torch.tensor(cum_unfin, dtype=torch.int).to(bbsz_idx)\n\t        unfin_idx = torch.div(bbsz_idx, beam_size, rounding_mode=\"trunc\")\n\t        sent = unfin_idx + torch.index_select(cum_fin_tensor, 0, unfin_idx)\n", "        # Create a set of \"{sent}{unfin_idx}\", where\n\t        # \"unfin_idx\" is the index in the current (possibly reduced)\n\t        # list of sentences, and \"sent\" is the index in the original,\n\t        # unreduced batch\n\t        # For every finished beam item\n\t        # sentence index in the current (possibly reduced) batch\n\t        seen = (sent << 32) + unfin_idx\n\t        unique_seen: List[int] = torch.unique(seen).tolist()\n\t        if self.match_source_len:\n\t            condition = step > torch.index_select(src_lengths, 0, unfin_idx)\n", "            eos_scores = torch.where(condition, torch.tensor(-math.inf), eos_scores)\n\t        sent_list: List[int] = sent.tolist()\n\t        for i in range(bbsz_idx.size()[0]):\n\t            # An input sentence (among those in a batch) is finished when\n\t            # beam_size hypotheses have been collected for it\n\t            if len(finalized[sent_list[i]]) < beam_size:\n\t                if attn_clone is not None:\n\t                    # remove padding tokens from attn scores\n\t                    hypo_attn = attn_clone[i]\n\t                else:\n", "                    hypo_attn = torch.empty(0)\n\t                finalized[sent_list[i]].append(\n\t                    {\n\t                        \"tokens\": tokens_clone[i],\n\t                        \"score\": eos_scores[i],\n\t                        \"attention\": hypo_attn,  # src_len x tgt_len\n\t                        \"alignment\": torch.empty(0),\n\t                        \"positional_scores\": pos_scores[i],\n\t                    }\n\t                )\n", "        newly_finished: List[int] = []\n\t        for unique_s in unique_seen:\n\t            # check termination conditions for this sentence\n\t            unique_sent: int = unique_s >> 32\n\t            unique_unfin_idx: int = unique_s - (unique_sent << 32)\n\t            if not finished[unique_sent] and self.is_finished(\n\t                step, unique_unfin_idx, max_len, len(finalized[unique_sent]), beam_size\n\t            ):\n\t                finished[unique_sent] = True\n\t                newly_finished.append(unique_unfin_idx)\n", "        return newly_finished\n\t    def is_finished(\n\t        self,\n\t        step: int,\n\t        unfin_idx: int,\n\t        max_len: int,\n\t        finalized_sent_len: int,\n\t        beam_size: int,\n\t    ):\n\t        \"\"\"\n", "        Check whether decoding for a sentence is finished, which\n\t        occurs when the list of finalized sentences has reached the\n\t        beam size, or when we reach the maximum length.\n\t        \"\"\"\n\t        assert finalized_sent_len <= beam_size\n\t        if finalized_sent_len == beam_size or step == max_len:\n\t            return True\n\t        return False\n\tclass EnsembleModel(nn.Module):\n\t    \"\"\"A wrapper around an ensemble of models.\"\"\"\n", "    def __init__(self, models):\n\t        super().__init__()\n\t        self.models_size = len(models)\n\t        # method '__len__' is not supported in ModuleList for torch script\n\t        self.single_model = models[0]\n\t        self.models = nn.ModuleList(models)\n\t        self.has_incremental = True\n\t    def forward(self):\n\t        pass\n\t    def has_encoder(self):\n", "        return hasattr(self.single_model, \"encoder\")\n\t    def has_incremental_states(self):\n\t        return self.has_incremental\n\t    def max_decoder_positions(self):\n\t        return min(\n\t            [\n\t                m.max_decoder_positions()\n\t                for m in self.models\n\t                if hasattr(m, \"max_decoder_positions\")\n\t            ]\n", "            + [sys.maxsize]\n\t        )\n\t    def set_decoder_beam_size(self, beam_size):\n\t        \"\"\"Set beam size for efficient beamable enc-dec attention.\"\"\"\n\t        if beam_size > 1:\n\t            for model in self.models:\n\t                if hasattr(model, \"set_beam_size\"):\n\t                    model.set_beam_size(beam_size)\n\t    @torch.jit.export\n\t    def forward_encoder(self, net_input: Dict[str, Tensor]):\n", "        return [model.forward_encoder(net_input) for model in self.models]\n\t    @torch.jit.export\n\t    def forward_decoder(\n\t        self,\n\t        tokens,\n\t        encoder_outs: List[Dict[str, List[Tensor]]],\n\t        incremental_states: List[Dict[str, Dict[str, Optional[Tensor]]]],\n\t        temperature: float = 1.0,\n\t    ):\n\t        log_probs = []\n", "        avg_attn: Optional[Tensor] = None\n\t        encoder_out: Optional[Dict[str, List[Tensor]]] = None\n\t        for i, model in enumerate(self.models):\n\t            encoder_out = encoder_outs[i]\n\t            # decode each model\n\t            if self.has_incremental_states():\n\t                decoder_out = model.forward_decoder(\n\t                    tokens,\n\t                    encoder_out=encoder_out,\n\t                    incremental_state=incremental_states[i],\n", "                )\n\t                incremental_states[i] = decoder_out[2]\n\t            else:\n\t                if hasattr(model, \"decoder\"):\n\t                    decoder_out = model.forward_decoder(tokens, encoder_out=encoder_out)\n\t                else:\n\t                    decoder_out = model.forward(tokens)\n\t            attn: Optional[Tensor] = None\n\t            decoder_len = len(decoder_out) - 1\n\t            if decoder_len > 1 and decoder_out[1] is not None:\n", "                if isinstance(decoder_out[1], Tensor):\n\t                    attn = decoder_out[1]\n\t                else:\n\t                    attn_holder = decoder_out[1][\"attn\"]\n\t                    if isinstance(attn_holder, Tensor):\n\t                        attn = attn_holder\n\t                    elif attn_holder is not None:\n\t                        attn = attn_holder[0]\n\t                if attn is not None:\n\t                    attn = attn[:, -1, :]\n", "            decoder_out_tuple = (\n\t                decoder_out[0][:, -1:, :].div_(temperature),\n\t                None if decoder_len <= 1 else decoder_out[1],\n\t            )\n\t            probs = model.get_normalized_probs(\n\t                decoder_out_tuple, log_probs=True, sample=None\n\t            )\n\t            probs = probs[:, -1, :]\n\t            if self.models_size == 1:\n\t                return probs, None\n", "            log_probs.append(probs)\n\t            if attn is not None:\n\t                if avg_attn is None:\n\t                    avg_attn = attn\n\t                else:\n\t                    avg_attn.add_(attn)\n\t        avg_probs = torch.logsumexp(torch.stack(log_probs, dim=0), dim=0) - math.log(\n\t            self.models_size\n\t        )\n\t        if avg_attn is not None:\n", "            avg_attn.div_(self.models_size)\n\t        return avg_probs, avg_attn\n\t    @torch.jit.export\n\t    def reorder_encoder_out(\n\t        self, encoder_outs: Optional[List[Dict[str, List[Tensor]]]], new_order\n\t    ):\n\t        \"\"\"\n\t        Reorder encoder output according to *new_order*.\n\t        Args:\n\t            encoder_out: output from the ``forward()`` method\n", "            new_order (LongTensor): desired order\n\t        Returns:\n\t            *encoder_out* rearranged according to *new_order*\n\t        \"\"\"\n\t        new_outs: List[Dict[str, List[Tensor]]] = []\n\t        for i, model in enumerate(self.models):\n\t            assert encoder_outs is not None\n\t            new_outs.append(\n\t                model.reorder_encoder_out(encoder_outs[i], new_order)\n\t            )\n", "        return new_outs\n\t    @torch.jit.export\n\t    def reorder_incremental_state(\n\t        self,\n\t        incremental_states: List[Dict[str, Dict[str, Optional[Tensor]]]],\n\t        new_order,\n\t    ):\n\t        if not self.has_incremental_states():\n\t            return\n\t        for i, model in enumerate(self.models):\n", "            model.reorder_incremental_state(\n\t                incremental_states[i], new_order\n\t            )\n\tclass SequenceGeneratorWithAlignment(SequenceGenerator):\n\t    def __init__(\n\t        self, models, tgt_dict, left_pad_target=False, print_alignment=\"hard\", **kwargs\n\t    ):\n\t        \"\"\"Generates translations of a given source sentence.\n\t        Produces alignments following \"Jointly Learning to Align and\n\t        Translate with Transformer Models\" (Garg et al., EMNLP 2019).\n", "        Args:\n\t            left_pad_target (bool, optional): Whether or not the\n\t                hypothesis should be left padded or not when they are\n\t                teacher forced for generating alignments.\n\t        \"\"\"\n\t        super().__init__(EnsembleModelWithAlignment(models), tgt_dict, **kwargs)\n\t        self.left_pad_target = left_pad_target\n\t        if print_alignment == \"hard\":\n\t            self.extract_alignment = utils.extract_hard_alignment\n\t        elif print_alignment == \"soft\":\n", "            self.extract_alignment = utils.extract_soft_alignment\n\t    @torch.no_grad()\n\t    def generate(self, models, sample, **kwargs):\n\t        finalized = super()._generate(sample, **kwargs)\n\t        src_tokens = sample[\"net_input\"][\"src_tokens\"]\n\t        bsz = src_tokens.shape[0]\n\t        beam_size = self.beam_size\n\t        (\n\t            src_tokens,\n\t            src_lengths,\n", "            prev_output_tokens,\n\t            tgt_tokens,\n\t        ) = self._prepare_batch_for_alignment(sample, finalized)\n\t        if any(getattr(m, \"full_context_alignment\", False) for m in self.model.models):\n\t            attn = self.model.forward_align(src_tokens, src_lengths, prev_output_tokens)\n\t        else:\n\t            attn = [\n\t                finalized[i // beam_size][i % beam_size][\"attention\"].transpose(1, 0)\n\t                for i in range(bsz * beam_size)\n\t            ]\n", "        if src_tokens.device != \"cpu\":\n\t            src_tokens = src_tokens.to(\"cpu\")\n\t            tgt_tokens = tgt_tokens.to(\"cpu\")\n\t            attn = [i.to(\"cpu\") for i in attn]\n\t        # Process the attn matrix to extract hard alignments.\n\t        for i in range(bsz * beam_size):\n\t            alignment = self.extract_alignment(\n\t                attn[i], src_tokens[i], tgt_tokens[i], self.pad, self.eos\n\t            )\n\t            finalized[i // beam_size][i % beam_size][\"alignment\"] = alignment\n", "        return finalized\n\t    def _prepare_batch_for_alignment(self, sample, hypothesis):\n\t        src_tokens = sample[\"net_input\"][\"src_tokens\"]\n\t        bsz = src_tokens.shape[0]\n\t        src_tokens = (\n\t            src_tokens[:, None, :]\n\t            .expand(-1, self.beam_size, -1)\n\t            .contiguous()\n\t            .view(bsz * self.beam_size, -1)\n\t        )\n", "        src_lengths = sample[\"net_input\"][\"src_lengths\"]\n\t        src_lengths = (\n\t            src_lengths[:, None]\n\t            .expand(-1, self.beam_size)\n\t            .contiguous()\n\t            .view(bsz * self.beam_size)\n\t        )\n\t        prev_output_tokens = data_utils.collate_tokens(\n\t            [beam[\"tokens\"] for example in hypothesis for beam in example],\n\t            self.pad,\n", "            self.eos,\n\t            self.left_pad_target,\n\t            move_eos_to_beginning=True,\n\t        )\n\t        tgt_tokens = data_utils.collate_tokens(\n\t            [beam[\"tokens\"] for example in hypothesis for beam in example],\n\t            self.pad,\n\t            self.eos,\n\t            self.left_pad_target,\n\t            move_eos_to_beginning=False,\n", "        )\n\t        return src_tokens, src_lengths, prev_output_tokens, tgt_tokens\n\tclass EnsembleModelWithAlignment(EnsembleModel):\n\t    \"\"\"A wrapper around an ensemble of models.\"\"\"\n\t    def __init__(self, models):\n\t        super().__init__(models)\n\t    def forward_align(self, src_tokens, src_lengths, prev_output_tokens):\n\t        avg_attn = None\n\t        for model in self.models:\n\t            decoder_out = model(src_tokens, src_lengths, prev_output_tokens)\n", "            attn = decoder_out[1][\"attn\"][0]\n\t            if avg_attn is None:\n\t                avg_attn = attn\n\t            else:\n\t                avg_attn.add_(attn)\n\t        if len(self.models) > 1:\n\t            avg_attn.div_(len(self.models))\n\t        return avg_attn\n"]}
{"filename": "xlmr/src/generator/iterative_refinement_generator.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\tfrom collections import namedtuple\n\timport numpy as np\n\timport torch\n\tfrom fairseq import utils\n\tDecoderOut = namedtuple(\n\t    \"IterativeRefinementDecoderOut\",\n", "    [\"output_tokens\", \"output_scores\", \"attn\", \"step\", \"max_step\", \"history\"],\n\t)\n\tclass IterativeRefinementGenerator(object):\n\t    def __init__(\n\t        self,\n\t        tgt_dict,\n\t        models=None,\n\t        eos_penalty=0.0,\n\t        max_iter=10,\n\t        max_ratio=2,\n", "        beam_size=1,\n\t        decoding_format=None,\n\t        retain_dropout=False,\n\t        adaptive=True,\n\t        retain_history=False,\n\t        reranking=False,\n\t    ):\n\t        \"\"\"\n\t        Generates translations based on iterative refinement.\n\t        Args:\n", "            tgt_dict: target dictionary\n\t            eos_penalty: if > 0.0, it penalized early-stopping in decoding\n\t            max_iter: maximum number of refinement iterations\n\t            max_ratio: generate sequences of maximum length ax, where x is the source length\n\t            decoding_format: decoding mode in {'unigram', 'ensemble', 'vote', 'dp', 'bs'}\n\t            retain_dropout: retaining dropout in the inference\n\t            adaptive: decoding with early stop\n\t        \"\"\"\n\t        self.bos = tgt_dict.bos()\n\t        self.pad = tgt_dict.pad()\n", "        self.unk = tgt_dict.unk()\n\t        self.eos = tgt_dict.eos()\n\t        self.vocab_size = len(tgt_dict)\n\t        self.eos_penalty = eos_penalty\n\t        self.max_iter = max_iter\n\t        self.max_ratio = max_ratio\n\t        self.beam_size = beam_size\n\t        self.reranking = reranking\n\t        self.decoding_format = decoding_format\n\t        self.retain_dropout = retain_dropout\n", "        self.retain_history = retain_history\n\t        self.adaptive = adaptive\n\t        self.models = models\n\t    def generate_batched_itr(\n\t        self,\n\t        data_itr,\n\t        maxlen_a=None,\n\t        maxlen_b=None,\n\t        cuda=False,\n\t        timer=None,\n", "        prefix_size=0,\n\t    ):\n\t        \"\"\"Iterate over a batched dataset and yield individual translations.\n\t        Args:\n\t            maxlen_a/b: generate sequences of maximum length ax + b,\n\t                where x is the source sentence length.\n\t            cuda: use GPU for generation\n\t            timer: StopwatchMeter for timing generations.\n\t        \"\"\"\n\t        for sample in data_itr:\n", "            if \"net_input\" not in sample:\n\t                continue\n\t            if timer is not None:\n\t                timer.start()\n\t            with torch.no_grad():\n\t                hypos = self.generate(\n\t                    self.models,\n\t                    sample,\n\t                    prefix_tokens=sample[\"target\"][:, :prefix_size]\n\t                    if prefix_size > 0\n", "                    else None,\n\t                )\n\t            if timer is not None:\n\t                timer.stop(sample[\"ntokens\"])\n\t            for i, id in enumerate(sample[\"id\"]):\n\t                # remove padding\n\t                src = utils.strip_pad(sample[\"net_input\"][\"src_tokens\"][i, :], self.pad)\n\t                ref = utils.strip_pad(sample[\"target\"][i, :], self.pad)\n\t                yield id, src, ref, hypos[i]\n\t    @torch.no_grad()\n", "    def generate(self, models, sample, prefix_tokens=None, constraints=None):\n\t        if constraints is not None:\n\t            raise NotImplementedError(\n\t                \"Constrained decoding with the IterativeRefinementGenerator is not supported\"\n\t            )\n\t        # TODO: iterative refinement generator does not support ensemble for now.\n\t        if not self.retain_dropout:\n\t            for model in models:\n\t                model.eval()\n\t        model, reranker = models[0], None\n", "        if self.reranking:\n\t            assert len(models) > 1, \"Assuming the last checkpoint is the reranker\"\n\t            assert (\n\t                self.beam_size > 1\n\t            ), \"Reranking requires multiple translation for each example\"\n\t            reranker = models[-1]\n\t            models = models[:-1]\n\t        if len(models) > 1 and hasattr(model, \"enable_ensemble\"):\n\t            assert model.allow_ensemble, \"{} does not support ensembling\".format(\n\t                model.__class__.__name__\n", "            )\n\t            model.enable_ensemble(models)\n\t        # TODO: better encoder inputs?\n\t        src_lengths = sample[\"net_input\"][\"src_lengths\"]\n\t        src_tokens = sample[\"net_input\"][\"src_tokens\"]\n\t        tgt_tokens = sample[\"target\"]\n\t        bsz, src_len = src_tokens.size()\n\t        # initialize\n\t        encoder_out = model.forward_encoder(src_tokens)\n\t        prev_decoder_out = model.initialize_output_tokens(encoder_out, src_tokens, tgt_tokens)\n", "        if self.beam_size > 1:\n\t            assert (\n\t                model.allow_length_beam\n\t            ), \"{} does not support decoding with length beam.\".format(\n\t                model.__class__.__name__\n\t            )\n\t            # regenerate data based on length-beam\n\t            length_beam_order = (\n\t                utils.new_arange(src_tokens, self.beam_size, bsz).t().reshape(-1)\n\t            )\n", "            encoder_out = model.reorder_encoder_out(\n\t                encoder_out, length_beam_order\n\t            )\n\t            prev_decoder_out = model.regenerate_length_beam(\n\t                prev_decoder_out, self.beam_size\n\t            )\n\t            bsz = bsz * self.beam_size\n\t        sent_idxs = torch.arange(bsz)\n\t        prev_output_tokens = prev_decoder_out.output_tokens.clone()\n\t        if self.retain_history:\n", "            prev_decoder_out = prev_decoder_out._replace(history=[prev_output_tokens])\n\t        finalized = [[] for _ in range(bsz)]\n\t        def is_a_loop(x, y, s, a):\n\t            b, l_x, l_y = x.size(0), x.size(1), y.size(1)\n\t            if l_x > l_y:\n\t                y = torch.cat([y, x.new_zeros(b, l_x - l_y).fill_(self.pad)], 1)\n\t                s = torch.cat([s, s.new_zeros(b, l_x - l_y)], 1)\n\t                if a is not None:\n\t                    a = torch.cat([a, a.new_zeros(b, l_x - l_y, a.size(2))], 1)\n\t            elif l_x < l_y:\n", "                x = torch.cat([x, y.new_zeros(b, l_y - l_x).fill_(self.pad)], 1)\n\t            return (x == y).all(1), y, s, a\n\t        def finalized_hypos(step, prev_out_token, prev_out_score, prev_out_attn):\n\t            cutoff = prev_out_token.ne(self.pad)\n\t            tokens = prev_out_token[cutoff]\n\t            if prev_out_score is None:\n\t                scores, score = None, None\n\t            else:\n\t                scores = prev_out_score[cutoff]\n\t                score = scores.mean()\n", "            if prev_out_attn is None:\n\t                hypo_attn, alignment = None, None\n\t            else:\n\t                hypo_attn = prev_out_attn[cutoff]\n\t                alignment = hypo_attn.max(dim=1)[1]\n\t            return {\n\t                \"steps\": step,\n\t                \"tokens\": tokens,\n\t                \"positional_scores\": scores,\n\t                \"score\": score,\n", "                \"hypo_attn\": hypo_attn,\n\t                \"alignment\": alignment,\n\t            }\n\t        for step in range(self.max_iter + 1):\n\t            decoder_options = {\n\t                \"eos_penalty\": self.eos_penalty,\n\t                \"max_ratio\": self.max_ratio,\n\t                \"decoding_format\": self.decoding_format,\n\t            }\n\t            prev_decoder_out = prev_decoder_out._replace(\n", "                step=step,\n\t                max_step=self.max_iter + 1,\n\t            )\n\t            decoder_out = model.forward_decoder(\n\t                prev_decoder_out, encoder_out, **decoder_options\n\t            )\n\t            if self.adaptive:\n\t                # terminate if there is a loop\n\t                terminated, out_tokens, out_scores, out_attn = is_a_loop(\n\t                    prev_output_tokens,\n", "                    decoder_out.output_tokens,\n\t                    decoder_out.output_scores,\n\t                    decoder_out.attn,\n\t                )\n\t                decoder_out = decoder_out._replace(\n\t                    output_tokens=out_tokens,\n\t                    output_scores=out_scores,\n\t                    attn=out_attn,\n\t                )\n\t            else:\n", "                terminated = decoder_out.output_tokens.new_zeros(\n\t                    decoder_out.output_tokens.size(0)\n\t                ).bool()\n\t            if step == self.max_iter:  # reach last iteration, terminate\n\t                terminated.fill_(1)\n\t            # collect finalized sentences\n\t            finalized_idxs = sent_idxs[terminated.cpu()]\n\t            finalized_tokens = decoder_out.output_tokens[terminated]\n\t            finalized_scores = decoder_out.output_scores[terminated]\n\t            finalized_attn = (\n", "                None\n\t                if (decoder_out.attn is None or decoder_out.attn.size(0) == 0)\n\t                else decoder_out.attn[terminated]\n\t            )\n\t            if self.retain_history:\n\t                finalized_history_tokens = [h[terminated] for h in decoder_out.history]\n\t            for i in range(finalized_idxs.size(0)):\n\t                finalized[finalized_idxs[i]] = [\n\t                    finalized_hypos(\n\t                        step,\n", "                        finalized_tokens[i],\n\t                        finalized_scores[i],\n\t                        None if finalized_attn is None else finalized_attn[i],\n\t                    )\n\t                ]\n\t                if self.retain_history:\n\t                    finalized[finalized_idxs[i]][0][\"history\"] = []\n\t                    for j in range(len(finalized_history_tokens)):\n\t                        finalized[finalized_idxs[i]][0][\"history\"].append(\n\t                            finalized_hypos(\n", "                                step, finalized_history_tokens[j][i], None, None\n\t                            )\n\t                        )\n\t            # check if all terminated\n\t            if terminated.sum() == terminated.size(0):\n\t                break\n\t            # for next step\n\t            not_terminated = ~terminated\n\t            prev_decoder_out = decoder_out._replace(\n\t                output_tokens=decoder_out.output_tokens[not_terminated],\n", "                output_scores=decoder_out.output_scores[not_terminated],\n\t                attn=decoder_out.attn[not_terminated]\n\t                if (decoder_out.attn is not None and decoder_out.attn.size(0) > 0)\n\t                else None,\n\t                history=[h[not_terminated] for h in decoder_out.history]\n\t                if decoder_out.history is not None\n\t                else None,\n\t            )\n\t            encoder_out = model.reorder_encoder_out(\n\t                encoder_out, not_terminated.nonzero(as_tuple=False).squeeze()\n", "            )\n\t            sent_idxs = sent_idxs[not_terminated.cpu()]\n\t            prev_output_tokens = prev_decoder_out.output_tokens.clone()\n\t        if self.beam_size > 1:\n\t            if reranker is not None:\n\t                finalized = self.rerank(\n\t                    reranker, finalized, [src_tokens, src_lengths], self.beam_size\n\t                )\n\t            # aggregate information from length beam\n\t            finalized = [\n", "                finalized[\n\t                    np.argmax(\n\t                        [\n\t                            finalized[self.beam_size * i + j][0][\"score\"].cpu()\n\t                            for j in range(self.beam_size)\n\t                        ]\n\t                    )\n\t                    + self.beam_size * i\n\t                ]\n\t                for i in range(len(finalized) // self.beam_size)\n", "            ]\n\t        return finalized\n\t    def rerank(self, reranker, finalized, encoder_input, beam_size):\n\t        def rebuild_batch(finalized):\n\t            finalized_tokens = [f[0][\"tokens\"] for f in finalized]\n\t            finalized_maxlen = max(f.size(0) for f in finalized_tokens)\n\t            final_output_tokens = (\n\t                finalized_tokens[0]\n\t                .new_zeros(len(finalized_tokens), finalized_maxlen)\n\t                .fill_(self.pad)\n", "            )\n\t            for i, f in enumerate(finalized_tokens):\n\t                final_output_tokens[i, : f.size(0)] = f\n\t            return final_output_tokens\n\t        final_output_tokens = rebuild_batch(finalized)\n\t        final_output_tokens[\n\t            :, 0\n\t        ] = self.eos  # autoregressive model assumes starting with EOS\n\t        reranker_encoder_out = reranker.encoder(*encoder_input)\n\t        length_beam_order = (\n", "            utils.new_arange(\n\t                final_output_tokens, beam_size, reranker_encoder_out.encoder_out.size(1)\n\t            )\n\t            .t()\n\t            .reshape(-1)\n\t        )\n\t        reranker_encoder_out = reranker.encoder.reorder_encoder_out(\n\t            reranker_encoder_out, length_beam_order\n\t        )\n\t        reranking_scores = reranker.get_normalized_probs(\n", "            reranker.decoder(final_output_tokens[:, :-1], reranker_encoder_out),\n\t            True,\n\t            None,\n\t        )\n\t        reranking_scores = reranking_scores.gather(2, final_output_tokens[:, 1:, None])\n\t        reranking_masks = final_output_tokens[:, 1:].ne(self.pad)\n\t        reranking_scores = (\n\t            reranking_scores[:, :, 0].masked_fill_(~reranking_masks, 0).sum(1)\n\t        )\n\t        reranking_scores = reranking_scores / reranking_masks.sum(1).type_as(\n", "            reranking_scores\n\t        )\n\t        for i in range(len(finalized)):\n\t            finalized[i][0][\"score\"] = reranking_scores[i]\n\t        return finalized\n"]}
{"filename": "xlmr/src/generator/search.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport math\n\tfrom typing import List, Optional\n\timport torch\n\timport torch.nn as nn\n\tfrom fairseq.token_generation_constraints import (\n\t    ConstraintState,\n", "    OrderedConstraintState,\n\t    UnorderedConstraintState,\n\t)\n\tfrom torch import Tensor\n\tclass Search(nn.Module):\n\t    def __init__(self, tgt_dict):\n\t        super().__init__()\n\t        self.pad = tgt_dict.pad()\n\t        self.unk = tgt_dict.unk()\n\t        self.eos = tgt_dict.eos()\n", "        self.vocab_size = len(tgt_dict)\n\t        self.src_lengths = torch.tensor(-1)\n\t        self.supports_constraints = False\n\t        self.stop_on_max_len = False\n\t    def step(\n\t        self, step, lprobs, scores, prev_output_tokens=None, original_batch_idxs=None\n\t    ):\n\t        \"\"\"Take a single search step.\n\t        Args:\n\t            step: the current search step, starting at 0\n", "            lprobs: (bsz x input_beam_size x vocab_size)\n\t                the model's log-probabilities over the vocabulary at the current step\n\t            scores: (bsz x input_beam_size x step)\n\t                the historical model scores of each hypothesis up to this point\n\t            prev_output_tokens: (bsz x step)\n\t                the previously generated oputput tokens\n\t            original_batch_idxs: (bsz)\n\t                the tensor with the batch indices, in the range [0, bsz)\n\t                this is useful in case there has been applied a re-ordering\n\t                and we need to know the orignal indices\n", "        Return: A tuple of (scores, indices, beams) where:\n\t            scores: (bsz x output_beam_size)\n\t                the scores of the chosen elements; output_beam_size can be\n\t                larger than input_beam_size, e.g., we may return\n\t                2*input_beam_size to account for EOS\n\t            indices: (bsz x output_beam_size)\n\t                the indices of the chosen elements\n\t            beams: (bsz x output_beam_size)\n\t                the hypothesis ids of the chosen elements, in the range [0, input_beam_size)\n\t        \"\"\"\n", "        raise NotImplementedError\n\t    @torch.jit.export\n\t    def set_src_lengths(self, src_lengths):\n\t        self.src_lengths = src_lengths\n\t    @torch.jit.export\n\t    def init_constraints(self, batch_constraints: Optional[Tensor], beam_size: int):\n\t        \"\"\"Initialize constraint states for constrained decoding (if supported).\n\t        Args:\n\t            batch_constraints: (torch.Tensor, optional)\n\t                the list of constraints, in packed form\n", "            beam_size: (int)\n\t                the beam size\n\t        Returns:\n\t            *encoder_out* rearranged according to *new_order*\n\t        \"\"\"\n\t        pass\n\t    def prune_sentences(self, batch_idxs: Tensor):\n\t        \"\"\"\n\t        Removes constraint states for completed sentences (if supported).\n\t        This is called from sequence_generator._generate() when sentences are\n", "        deleted from the batch.\n\t        Args:\n\t            batch_idxs: Indices of *sentences* whose constraint state should be *kept*.\n\t        \"\"\"\n\t        pass\n\t    def update_constraints(self, active_hypos: Tensor):\n\t        \"\"\"\n\t        Updates the constraint states by selecting the beam items that are retained.\n\t        This is called at each time step of sequence_generator._generate() when\n\t        the set of 2 * {beam_size} candidate hypotheses are reduced to the beam size.\n", "        Args:\n\t            active_hypos: (batch size, beam size)\n\t              list of integers denoting, for each sentence, which beam candidate items\n\t              should be kept.\n\t        \"\"\"\n\t        pass\n\tclass BeamSearch(Search):\n\t    def __init__(self, tgt_dict):\n\t        super().__init__(tgt_dict)\n\t        self.constraint_states = None\n", "    @torch.jit.export\n\t    def step(\n\t        self,\n\t        step: int,\n\t        lprobs,\n\t        scores: Optional[Tensor],\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n\t    ):\n\t        bsz, beam_size, vocab_size = lprobs.size()\n", "        if step == 0:\n\t            # at the first step all hypotheses are equally likely, so use\n\t            # only the first beam\n\t            lprobs = lprobs[:, ::beam_size, :].contiguous()\n\t        else:\n\t            # make probs contain cumulative scores for each hypothesis\n\t            assert scores is not None\n\t            lprobs = lprobs + scores[:, :, step - 1].unsqueeze(-1)\n\t        top_prediction = torch.topk(\n\t            lprobs.view(bsz, -1),\n", "            k=min(\n\t                # Take the best 2 x beam_size predictions. We'll choose the first\n\t                # beam_size of these which don't predict eos to continue with.\n\t                beam_size * 2,\n\t                lprobs.view(bsz, -1).size(1) - 1,  # -1 so we never select pad\n\t            ),\n\t        )\n\t        scores_buf = top_prediction[0]\n\t        indices_buf = top_prediction[1]\n\t        # Project back into relative indices and beams\n", "        beams_buf = torch.div(indices_buf, vocab_size, rounding_mode=\"trunc\")\n\t        indices_buf = indices_buf.fmod(vocab_size)\n\t        # At this point, beams_buf and indices_buf are single-dim and contain relative indices\n\t        return scores_buf, indices_buf, beams_buf\n\tclass PrefixConstrainedBeamSearch(Search):\n\t    def __init__(self, tgt_dict, prefix_allowed_tokens_fn):\n\t        super().__init__(tgt_dict)\n\t        self.prefix_allowed_tokens_fn = prefix_allowed_tokens_fn\n\t        self.stop_on_max_len = True\n\t    @torch.jit.export\n", "    def apply_mask(self, x, prev_output_tokens, original_batch_idxs):\n\t        beam_size = x.shape[0] // original_batch_idxs.shape[0]\n\t        original_batch_idxs = (\n\t            original_batch_idxs.unsqueeze(-1).repeat((1, beam_size)).flatten().tolist()\n\t        )\n\t        mask = torch.full_like(x, -math.inf)\n\t        for sent_i, (sent, batch_i) in enumerate(\n\t            zip(prev_output_tokens, original_batch_idxs)\n\t        ):\n\t            mask[sent_i, :, self.prefix_allowed_tokens_fn(batch_i, sent)] = 0\n", "        return mask\n\t    @torch.jit.export\n\t    def step(\n\t        self,\n\t        step: int,\n\t        lprobs: Tensor,\n\t        scores: Tensor,\n\t        prev_output_tokens: Tensor,\n\t        original_batch_idxs: Tensor,\n\t    ):\n", "        bsz, beam_size, vocab_size = lprobs.size()\n\t        lprobs += self.apply_mask(\n\t            lprobs.view(bsz * beam_size, 1, vocab_size),\n\t            prev_output_tokens,\n\t            original_batch_idxs,\n\t        ).view(bsz, beam_size, vocab_size)\n\t        if step == 0:\n\t            # at the first step all hypotheses are equally likely, so use\n\t            # only the first beam\n\t            lprobs = lprobs[:, ::beam_size, :].contiguous()\n", "        else:\n\t            # make probs contain cumulative scores for each hypothesis\n\t            assert scores is not None\n\t            lprobs = lprobs + scores[:, :, step - 1].unsqueeze(-1)\n\t        top_prediction = torch.topk(\n\t            lprobs.view(bsz, -1),\n\t            k=min(\n\t                # Take the best beam_size predictions. We'll choose the first\n\t                # beam_size of these which don't predict eos to continue with.\n\t                beam_size,\n", "                lprobs.view(bsz, -1).size(1) - 1,  # -1 so we never select pad\n\t            ),\n\t        )\n\t        scores_buf = top_prediction[0]\n\t        indices_buf = top_prediction[1]\n\t        beams_buf = indices_buf // vocab_size\n\t        indices_buf = indices_buf.fmod(vocab_size)\n\t        return scores_buf, indices_buf, beams_buf\n\tclass LexicallyConstrainedBeamSearch(Search):\n\t    \"\"\"Implements lexically constrained beam search as described in\n", "        Fast Lexically Constrained Decoding with Dynamic Beam\n\t        Allocation for Neural Machine Translation.  Post & Vilar,\n\t        NAACL 2018.  https://www.aclweb.org/anthology/N18-1119/\n\t    and\n\t        Improved Lexically Constrained Decoding for Translation and\n\t        Monolingual Rewriting. Hu et al, NAACL\n\t        2019. https://www.aclweb.org/anthology/N19-1090/\n\t    This is accomplished by maintaining, for each beam hypothesis, a\n\t    ConstraintState object (see constraints.py) that tracks which\n\t    constraints have been generated and using this information to\n", "    shape the beam for each input sentence.\n\t    \"\"\"\n\t    def __init__(self, tgt_dict, representation):\n\t        super().__init__(tgt_dict)\n\t        self.representation = representation\n\t        self.vocab_size = len(tgt_dict)\n\t        self.num_cands = 0\n\t        self.supports_constraints = True\n\t    @torch.jit.export\n\t    def init_constraints(self, batch_constraints: Optional[Tensor], beam_size: int):\n", "        self.constraint_states = []\n\t        for constraint_tensor in batch_constraints:\n\t            if self.representation == \"ordered\":\n\t                constraint_state = OrderedConstraintState.create(constraint_tensor)\n\t            elif self.representation == \"unordered\":\n\t                constraint_state = UnorderedConstraintState.create(constraint_tensor)\n\t            self.constraint_states.append([constraint_state for i in range(beam_size)])\n\t    @torch.jit.export\n\t    def prune_sentences(self, batch_idxs: Tensor):\n\t        self.constraint_states = [\n", "            self.constraint_states[i] for i in batch_idxs.tolist()\n\t        ]\n\t    @torch.jit.export\n\t    def update_constraints(self, active_hypos: Tensor):\n\t        if self.constraint_states:\n\t            batch_size = active_hypos.size(0)\n\t            for sentid in range(batch_size):\n\t                self.constraint_states[sentid] = [\n\t                    self.constraint_states[sentid][i] for i in active_hypos[sentid]\n\t                ]\n", "    @torch.jit.export\n\t    def step(\n\t        self,\n\t        step: int,\n\t        lprobs: Tensor,\n\t        scores: Optional[Tensor],\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n\t    ):\n\t        \"\"\"\n", "        A constrained step builds a large candidates list from the following:\n\t        - the top 2 * {beam_size} items over the whole beam\n\t        - for each item in the beam\n\t          - the top {each_k} (default 1)\n\t          - all next constraints\n\t        We then compute the constrained state of each beam item, and assign\n\t        stripe codes: 0 to the best in each bank, 1 to the 2nd-best, and so\n\t        on. We then sort by (stripe, score), and truncate the list at\n\t        2 * beam size.\n\t        Args:\n", "            step: the decoder step\n\t            lprobs: (batch size, beam size, target vocab)\n\t                the target-vocab distributions for each item in the beam.\n\t        Retrun: A tuple of (scores, indices, beams, constraints) where:\n\t            scores: (batch, output beam size)\n\t                the scores of the chosen elements\n\t            indices: (batch, output beam size)\n\t                the target vocab indices of the chosen elements\n\t            beams: (batch, output beam size)\n\t                the 0-indexed hypothesis ids of the chosen elements\n", "            constraints: (batch, output beam size)\n\t                the new constraint states\n\t        \"\"\"\n\t        each_k = 1\n\t        device = lprobs.device\n\t        batch_size, beam_size, vocab_size = lprobs.size()\n\t        self.num_cands = min(\n\t            # Just take the k-best. We'll get another k from the 1-best from each\n\t            # row, plus more from the constraints\n\t            beam_size * 2,\n", "            lprobs.view(batch_size, -1).size(1) - 1,  # -1 so we never select pad\n\t        )\n\t        # STEP 0: Preliminary. Prevent EOS for unfinished hyps across all batch items\n\t        constraint_states = self.constraint_states\n\t        if constraint_states and step > 0:\n\t            not_finished_indices = []\n\t            for sentno, sent_constraints in enumerate(constraint_states):\n\t                for beamno, state in enumerate(sent_constraints):\n\t                    index = sentno * beam_size + beamno\n\t                    if not state.finished:\n", "                        not_finished_indices.append(index)\n\t            not_finished_indices = torch.tensor(not_finished_indices)\n\t            if not_finished_indices.numel() > 0:\n\t                lprobs.view(batch_size * beam_size, -1)[\n\t                    not_finished_indices, self.eos\n\t                ] = -math.inf\n\t        if step == 0:\n\t            # at the first step all hypotheses are equally likely, so use\n\t            # only the first beam entry for each batch item\n\t            lprobs = lprobs[:, ::beam_size, :].contiguous()\n", "        else:\n\t            # make probs contain cumulative scores for each hypothesis\n\t            assert scores is not None\n\t            lprobs = lprobs + scores[:, :, step - 1].unsqueeze(-1)\n\t        top_prediction = torch.topk(\n\t            lprobs.view(batch_size, -1),\n\t            self.num_cands,\n\t        )\n\t        scores_buf, indices_buf = top_prediction\n\t        # Project back into relative indices and beams\n", "        beams_buf = indices_buf // vocab_size\n\t        indices_buf = indices_buf.fmod(vocab_size)\n\t        # Short circuit if there are no constraints in this batch\n\t        if not constraint_states:\n\t            return scores_buf, indices_buf, beams_buf\n\t        # STEP 1: get top-1 from each hypothesis across all sentences in the batch\n\t        if step > 0:\n\t            top_scores, top_indices = torch.topk(\n\t                lprobs.view(batch_size * beam_size, -1),\n\t                k=each_k,\n", "                dim=1,\n\t            )\n\t            top_scores = top_scores.view(batch_size, -1)\n\t            top_indices = top_indices.view(batch_size, -1)\n\t            scores_buf = torch.cat((scores_buf, top_scores), dim=1)\n\t            indices_buf = torch.cat((indices_buf, top_indices), dim=1)\n\t            new_beams = torch.arange(0, beam_size, device=device).repeat(batch_size, 1)\n\t            beams_buf = torch.cat((beams_buf, new_beams), dim=1)\n\t        # Now, process sentences in the batch one by one.\n\t        new_scores_buf = torch.zeros((batch_size, 2 * beam_size), device=device)\n", "        new_indices_buf = torch.zeros((batch_size, 2 * beam_size), device=device).long()\n\t        new_beams_buf = torch.zeros((batch_size, 2 * beam_size), device=device).long()\n\t        for sentno, states in enumerate(constraint_states):\n\t            scores, indices, beams, new_states = self.step_sentence(\n\t                step,\n\t                sentno,\n\t                lprobs[sentno],\n\t                constraint_states[sentno],\n\t                beams_buf[sentno].clone(),\n\t                indices_buf[sentno].clone(),\n", "                scores_buf[sentno].clone(),\n\t            )\n\t            new_scores_buf[sentno] = scores\n\t            new_indices_buf[sentno] = indices\n\t            new_beams_buf[sentno] = beams\n\t            self.constraint_states[sentno] = new_states\n\t        return new_scores_buf, new_indices_buf, new_beams_buf\n\t    @torch.jit.export\n\t    def step_sentence(\n\t        self,\n", "        step: int,\n\t        sentno: int,\n\t        lprobs: Tensor,\n\t        constraint_states: List[List[ConstraintState]],\n\t        beams_buf: Tensor,\n\t        indices_buf: Tensor,\n\t        scores_buf: Tensor,\n\t    ):\n\t        \"\"\"Does per-sentence processing. Adds all constraints for each\n\t        hypothesis to the list of candidates; then removes duplicates,\n", "        sorts, and dynamically stripes across the banks. All tensor inputs\n\t        are collapsed to those pertaining to a single input sentence.\n\t        \"\"\"\n\t        device = lprobs.device\n\t        # STEP 2: Add all constraints for each beam item\n\t        for beamno, state in enumerate(constraint_states):\n\t            next_tokens = torch.tensor(list(state.next_tokens()), device=device).long()\n\t            if next_tokens.numel() != 0:\n\t                indices_buf = torch.cat((indices_buf, next_tokens))\n\t                next_beams = (\n", "                    torch.tensor(beamno, device=device)\n\t                    .repeat(next_tokens.size(0))\n\t                    .long()\n\t                )\n\t                beams_buf = torch.cat((beams_buf, next_beams))\n\t                next_values = lprobs[beamno].take(next_tokens.view(-1))\n\t                scores_buf = torch.cat((scores_buf, next_values))\n\t            # At the 0th time step, there is just one beam item\n\t            if step == 0:\n\t                break\n", "        # STEP 3: Compute the \"bank\" for each candidate. This is the\n\t        # number of constraints it's generated. We need this so that\n\t        # we can do round-robin allocation of the beam across these\n\t        # banks. If C is the number of constraints, we select the best\n\t        # item in bank C, then the best in bank C-1, etc, followed by\n\t        # the 2nd-best in bank C, the 2nd-best in bank C-1, etc, and so\n\t        # on, until the maximum beam size. We accomplish this by\n\t        # creating a sort key and striping across the banks.\n\t        # Compute the new states for all candidates\n\t        cands_size = indices_buf.size(0)\n", "        constraint_states = [\n\t            constraint_states[beams_buf[i]].advance(indices_buf[i])\n\t            for i in range(cands_size)\n\t        ]\n\t        banks = torch.tensor([state.bank for state in constraint_states], device=device)\n\t        # STEP 4: Sort\n\t        num_constraint_tokens = len(state.tokens)\n\t        # Sort by keys (bank, score) (i.e., sort banks together, and scores\n\t        # within banks). AFAIK pytorch doesn't support either stable sort or\n\t        # multi-key sorting, so we have to hack this.\n", "        MAX_SCORE = -100\n\t        sort_key = (num_constraint_tokens - banks) * MAX_SCORE + scores_buf\n\t        sort_values, sort_indices = sort_key.sort(dim=0, descending=True)\n\t        scores_buf = scores_buf[sort_indices]\n\t        indices_buf = indices_buf[sort_indices]\n\t        beams_buf = beams_buf[sort_indices]\n\t        banks = banks[sort_indices]\n\t        # Sort the constraints to follow suit\n\t        constraint_states = [constraint_states[i] for i in sort_indices]\n\t        # STEP 5: Remove duplicates. The topk calls (overall and\n", "        # per-row) plus the per-row generation of constraints will\n\t        # produce duplicates. Here we remove them.\n\t        def roll(t):\n\t            \"\"\"Rolls a 1d tensor left by 1.\n\t            [0, 1, 2, 3, 4] becomes [4, 0, 1, 2, 3]\n\t            \"\"\"\n\t            return torch.cat((t[-1].unsqueeze(0), t[0:-1]), dim=0)\n\t        # We map candidates (beam, token_id) to a single dimension.\n\t        # This is then shifted by 1. We can then easily identify\n\t        # duplicates and create a mask that identifies unique\n", "        # extensions.\n\t        uniques_mask = beams_buf * (self.vocab_size + 1) + indices_buf\n\t        uniques_mask = roll(uniques_mask) != uniques_mask\n\t        # Use the mask to pare down the data structures\n\t        scores_buf = torch.masked_select(scores_buf, uniques_mask)\n\t        indices_buf = torch.masked_select(indices_buf, uniques_mask)\n\t        beams_buf = torch.masked_select(beams_buf, uniques_mask)\n\t        banks = torch.masked_select(banks, uniques_mask)\n\t        i = 1\n\t        for mask in uniques_mask[1:]:\n", "            if not mask:\n\t                constraint_states.pop(i)\n\t            i += mask\n\t        # STEP 6: Assign IDs round-robin across banks, sort, and\n\t        # truncate. Now that the candidates are sorted by (bank,\n\t        # score) and uniqed, we dynamically allocate the {beam_size}\n\t        # beam by striping across the candidates. These stripes will\n\t        # be used as sort keys to do round-robin selection. This is\n\t        # accomplished in a single pass with offsets. Sorting by\n\t        # highest-banks (furthest-along hypotheses) first ensures\n", "        # progress through the constraints.\n\t        #\n\t        # e.g., BANKS: 3 3 3 2 2 2 2 1 1 1 0 0\n\t        # OLD STRIPES: 0 1 2 0 1 2 3 0 1 2 0 1\n\t        # NEW STRIPES: 0 1+4 2+8 0+1 1+5 2+9 3+11 0+2 1+6 2+10 0+3 1+7\n\t        #            = 0 5 10 1 6 11 13 2 7 12 3 8\n\t        #\n\t        # Sorting by this then gives the following banks:\n\t        #\n\t        #             3 2 1 0 3 2 1 0 3 2 1 2\n", "        #\n\t        # We'll take the top {beam_size} of these.\n\t        stripe_offsets = [offset * (len(banks) + 1) for offset in range(len(banks) + 1)]\n\t        stripes = torch.zeros_like(banks)\n\t        cur_bank_count = -1\n\t        cur_bank = banks[0]\n\t        for i, bank in enumerate(banks):\n\t            if bank != cur_bank:\n\t                cur_bank_count = 0\n\t                cur_bank = bank\n", "            else:\n\t                cur_bank_count += 1\n\t            stripes[i] = num_constraint_tokens - bank + stripe_offsets[cur_bank_count]\n\t        # STEP 7: Sort by the stripes values\n\t        sort_values, sort_indices = stripes.sort(dim=0)\n\t        scores_buf = scores_buf[sort_indices]\n\t        indices_buf = indices_buf[sort_indices]\n\t        beams_buf = beams_buf[sort_indices]\n\t        constraint_states = [constraint_states[i] for i in sort_indices]\n\t        # STEP 8: Truncate to the candidates size!\n", "        scores_buf = scores_buf[: self.num_cands]\n\t        indices_buf = indices_buf[: self.num_cands]\n\t        beams_buf = beams_buf[: self.num_cands]\n\t        return scores_buf, indices_buf, beams_buf, constraint_states\n\tclass LengthConstrainedBeamSearch(Search):\n\t    def __init__(self, tgt_dict, min_len_a, min_len_b, max_len_a, max_len_b):\n\t        super().__init__(tgt_dict)\n\t        self.min_len_a = min_len_a\n\t        self.min_len_b = min_len_b\n\t        self.max_len_a = max_len_a\n", "        self.max_len_b = max_len_b\n\t        self.beam = BeamSearch(tgt_dict)\n\t        self.needs_src_lengths = True\n\t    def step(\n\t        self,\n\t        step: int,\n\t        lprobs,\n\t        scores,\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n", "    ):\n\t        min_lens = self.min_len_a * self.src_lengths + self.min_len_b\n\t        max_lens = self.max_len_a * self.src_lengths + self.max_len_b\n\t        lprobs[step < min_lens, :, self.eos] = -math.inf\n\t        lprobs[step >= max_lens, :, self.eos] = 0\n\t        return self.beam.step(step, lprobs, scores)\n\tclass DiverseBeamSearch(Search):\n\t    \"\"\"Diverse Beam Search.\n\t    See \"Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence\n\t    Models\" for details.\n", "    We only implement the Hamming Diversity penalty here, which performed best\n\t    in the original paper.\n\t    \"\"\"\n\t    def __init__(self, tgt_dict, num_groups, diversity_strength):\n\t        super().__init__(tgt_dict)\n\t        self.num_groups = num_groups\n\t        self.diversity_strength = -diversity_strength\n\t        self.beam = BeamSearch(tgt_dict)\n\t    @torch.jit.export\n\t    def step(\n", "        self,\n\t        step: int,\n\t        lprobs,\n\t        scores,\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n\t    ):\n\t        bsz, beam_size, vocab_size = lprobs.size()\n\t        if beam_size % self.num_groups != 0:\n\t            raise ValueError(\n", "                \"DiverseBeamSearch requires --beam to be divisible by the number of groups\"\n\t            )\n\t        # initialize diversity penalty\n\t        diversity_buf = torch.zeros(lprobs[:, 0, :].size()).to(lprobs)\n\t        scores_G, indices_G, beams_G = [], [], []\n\t        for g in range(self.num_groups):\n\t            lprobs_g = lprobs[:, g :: self.num_groups, :]\n\t            scores_g = scores[:, g :: self.num_groups, :] if step > 0 else None\n\t            # apply diversity penalty\n\t            if g > 0:\n", "                lprobs_g = torch.add(\n\t                    lprobs_g,\n\t                    other=diversity_buf.unsqueeze(1),\n\t                    alpha=self.diversity_strength,\n\t                )\n\t            else:\n\t                lprobs_g = lprobs_g.contiguous()\n\t            scores_buf, indices_buf, beams_buf = self.beam.step(\n\t                step, lprobs_g, scores_g\n\t            )\n", "            beams_buf.mul_(self.num_groups).add_(g)\n\t            scores_G.append(scores_buf.clone())\n\t            indices_G.append(indices_buf.clone())\n\t            beams_G.append(beams_buf.clone())\n\t            # update diversity penalty\n\t            diversity_buf.scatter_add_(\n\t                1, indices_buf, torch.ones(indices_buf.size()).to(diversity_buf)\n\t            )\n\t        # interleave results from different groups\n\t        scores_buf = torch.stack(scores_G, dim=2).view(bsz, -1)\n", "        indices_buf = torch.stack(indices_G, dim=2).view(bsz, -1)\n\t        beams_buf = torch.stack(beams_G, dim=2).view(bsz, -1)\n\t        return scores_buf, indices_buf, beams_buf\n\tclass Sampling(Search):\n\t    sampling_topk: int\n\t    sampling_topp: float\n\t    def __init__(self, tgt_dict, sampling_topk=-1, sampling_topp=-1.0):\n\t        super().__init__(tgt_dict)\n\t        self.sampling_topk = sampling_topk\n\t        self.sampling_topp = sampling_topp\n", "    def _sample_topp(self, lprobs):\n\t        \"\"\"Sample among the smallest set of elements whose cumulative probability mass exceeds p.\n\t        See `\"The Curious Case of Neural Text Degeneration\"\n\t        (Holtzman et al., 2019) <https://arxiv.org/abs/1904.09751>`_.\n\t        Args:\n\t            lprobs: (bsz x input_beam_size x vocab_size)\n\t                the model's log-probabilities over the vocabulary at the current step\n\t        Return: A tuple of (trimed_probs, truncated_indices) where:\n\t            trimed_probs: (bsz x input_beam_size x ?)\n\t                the model's probabilities over the elements selected to sample from. The\n", "                width of the third dimension is determined by top-P.\n\t            truncated_indices: (bsz x input_beam_size x ?)\n\t                the indices of the chosen elements.\n\t        \"\"\"\n\t        probs = lprobs.exp_()\n\t        # sort the last dimension (vocab dimension) in descending order\n\t        sorted_probs, sorted_indices = probs.sort(descending=True)\n\t        # compute a mask to indicate the words to be included in the top-P set.\n\t        cumsum_probs = sorted_probs.cumsum(dim=2)\n\t        mask = cumsum_probs.lt(self.sampling_topp)\n", "        # note that mask was computed by 'lt'. One more word needs to be included\n\t        # so that the cumulative probability mass can exceed p.\n\t        cumsum_mask = mask.cumsum(dim=2)\n\t        last_included = cumsum_mask[:, :, -1:]\n\t        last_included.clamp_(0, mask.size()[2] - 1)\n\t        mask = mask.scatter_(2, last_included, 1)\n\t        # truncate unnecessary dims.\n\t        max_dim = last_included.max()\n\t        truncated_mask = mask[:, :, : max_dim + 1]\n\t        truncated_probs = sorted_probs[:, :, : max_dim + 1]\n", "        truncated_indices = sorted_indices[:, :, : max_dim + 1]\n\t        # trim the words that are not in top-P by setting their probabilities\n\t        # to 0, so that they would not be sampled later.\n\t        trim_mask = ~truncated_mask\n\t        trimed_probs = truncated_probs.masked_fill_(trim_mask, 0)\n\t        return trimed_probs, truncated_indices\n\t    @torch.jit.export\n\t    def step(\n\t        self,\n\t        step: int,\n", "        lprobs,\n\t        scores,\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n\t    ):\n\t        bsz, beam_size, vocab_size = lprobs.size()\n\t        if step == 0:\n\t            # at the first step all hypotheses are equally likely, so use\n\t            # only the first beam\n\t            lprobs = lprobs[:, ::beam_size, :].contiguous()\n", "        if self.sampling_topp > 0:\n\t            # only sample from the smallest set of words whose cumulative probability mass exceeds p\n\t            probs, top_indices = self._sample_topp(lprobs)\n\t        elif self.sampling_topk > 0:\n\t            # only sample from top-k candidates\n\t            lprobs, top_indices = lprobs.topk(self.sampling_topk)\n\t            probs = lprobs.exp_()\n\t        else:\n\t            probs = lprobs.exp_()\n\t            # dummy data to be consistent with true branch for type check\n", "            top_indices = torch.empty(0).to(probs)\n\t        # sample\n\t        if step == 0:\n\t            indices_buf = torch.multinomial(\n\t                probs.view(bsz, -1),\n\t                beam_size,\n\t                replacement=True,\n\t            ).view(bsz, beam_size)\n\t        else:\n\t            indices_buf = torch.multinomial(\n", "                probs.view(bsz * beam_size, -1),\n\t                1,\n\t                replacement=True,\n\t            ).view(bsz, beam_size)\n\t        if step == 0:\n\t            # expand to beam size\n\t            probs = probs.expand(bsz, beam_size, -1)\n\t        # gather scores\n\t        scores_buf = torch.gather(probs, dim=2, index=indices_buf.unsqueeze(-1))\n\t        scores_buf = scores_buf.log_().view(bsz, -1)\n", "        # remap indices if using top-k or top-P sampling\n\t        if self.sampling_topk > 0 or self.sampling_topp > 0:\n\t            indices_buf = torch.gather(\n\t                top_indices.expand(bsz, beam_size, -1),\n\t                dim=2,\n\t                index=indices_buf.unsqueeze(-1),\n\t            ).squeeze(2)\n\t        if step == 0:\n\t            beams_buf = indices_buf.new_zeros(bsz, beam_size)\n\t        else:\n", "            beams_buf = torch.arange(0, beam_size).to(indices_buf).repeat(bsz, 1)\n\t            # make scores cumulative\n\t            scores_buf.add_(\n\t                torch.gather(scores[:, :, step - 1], dim=1, index=beams_buf)\n\t            )\n\t        return scores_buf, indices_buf, beams_buf\n\tclass DiverseSiblingsSearch(Search):\n\t    \"\"\"\n\t    Beam search with diverse siblings.\n\t    See \"A Simple, Fast Diverse Decoding Algorithm for Neural Generation\" for details.\n", "    https://arxiv.org/abs/1611.08562\n\t    1/ Calculate hypotheses for each beam\n\t    2/ Intra-sibling ordering\n\t    3/ Rewrite scores\n\t    4/ Choose top K hypotheses\n\t    if diversity_rate == 0 is equivalent to BeamSearch\n\t    \"\"\"\n\t    def __init__(self, tgt_dict, diversity_rate):\n\t        super().__init__(tgt_dict)\n\t        self.diversity_rate = diversity_rate\n", "        self.beam = BeamSearch(tgt_dict)\n\t    def step(\n\t        self,\n\t        step: int,\n\t        lprobs,\n\t        scores,\n\t        prev_output_tokens: Optional[Tensor] = None,\n\t        original_batch_idxs: Optional[Tensor] = None,\n\t    ):\n\t        bsz, beam_size, vocab_size = lprobs.size()\n", "        k = min(\n\t            # Take the best 2 x beam_size predictions. We'll choose the first\n\t            # beam_size of these which don't predict eos to continue with.\n\t            beam_size * 2,\n\t            lprobs.view(bsz, -1).size(1) - 1,  # -1 so we never select pad\n\t        )\n\t        s_list: List[Tensor]\n\t        i_list: List[Tensor]\n\t        s_list = [torch.empty(0).to(lprobs) for i in range(beam_size)]\n\t        i_list = [torch.LongTensor().to(device=lprobs.device) for i in range(beam_size)]\n", "        sibling_score = torch.arange(1, k + 1).to(lprobs) * self.diversity_rate\n\t        if step == 0:\n\t            return self.beam.step(step, lprobs, scores)\n\t        lprobs.add_(scores[:, :, step - 1].unsqueeze(-1))\n\t        # 1/ Calculate hypotheses for each beam\n\t        for i in range(beam_size):\n\t            torch.topk(lprobs[:, i, :].view(bsz, -1), k, out=(s_list[i], i_list[i]))\n\t            i_list[i].fmod_(vocab_size)\n\t            # 2/ Intra-sibling ordering by default from topk + 3/ Rewrite scores\n\t            s_list[i].sub_(sibling_score)\n", "        # 4/ Choose top K hypotheses\n\t        indices = torch.stack(i_list, dim=1).view(bsz, -1)\n\t        final_scores = torch.empty(0).to(lprobs)\n\t        final_indices = torch.LongTensor().to(device=lprobs.device)\n\t        final_beams = torch.LongTensor().to(device=lprobs.device)\n\t        (final_scores, final_indices) = torch.topk(\n\t            torch.stack(s_list, dim=1).view(bsz, -1),\n\t            k,\n\t        )\n\t        final_beams = final_indices // k\n", "        for i in range(bsz):\n\t            final_indices[i] = indices[i][final_indices[i]]\n\t        return final_scores, final_indices, final_beams\n"]}
{"filename": "xlmr/src/model/hub_interface.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport copy\n\timport logging\n\tfrom typing import Dict, List\n\timport numpy as np\n\timport torch\n\timport torch.nn as nn\n", "import torch.nn.functional as F\n\tfrom fairseq import utils\n\tfrom fairseq.data import encoders\n\tfrom fairseq.hub_utils import GeneratorHubInterface\n\tfrom omegaconf import open_dict\n\tlogger = logging.getLogger(__name__)\n\tclass XLMRHubInterface(GeneratorHubInterface):\n\t    def __init__(self, cfg, task, model):\n\t        super().__init__(cfg, task, [model])\n\t        self.model = self.models[0]\n", "    def encode(\n\t        self, sentence: str, *addl_sentences, no_separator=True\n\t    ) -> torch.LongTensor:\n\t        bpe_sentence = \"<s> \" + self.bpe.encode(sentence)\n\t        tokens = self.task.target_dictionary.encode_line(bpe_sentence, append_eos=False)\n\t        return tokens.long()\n\t    def decode(self, tokens: torch.LongTensor):\n\t        tokens = tokens.cpu().numpy()\n\t        sentences = [self.bpe.decode(self.task.target_dictionary.string(tokens))]\n\t        return sentences\n", "    def sample(\n\t        self, sentences: List[str], **kwargs\n\t    ) -> List[str]:\n\t        tokenized_sentences = [self.encode(sentence) for sentence in sentences]\n\t        batched_hypos = self.generate(tokenized_sentences, **kwargs)\n\t        return [self.decode(hypos[0][\"tokens\"]) for hypos in batched_hypos]\n\t    def generate(\n\t        self,\n\t        tokenized_sentences: List[torch.LongTensor],\n\t        **kwargs\n", "    ) -> List[List[Dict[str, torch.Tensor]]]:\n\t        generator = self.task.build_generator(\n\t            self.models,\n\t            **kwargs,\n\t        )\n\t        results = []\n\t        for batch in self._build_batches(tokenized_sentences, skip_invalid_size_inputs=False):\n\t            batch = utils.apply_to_sample(lambda t: t.to(self.device), batch)\n\t            translations = self.task.inference_step(\n\t                generator, self.models, batch,\n", "            )\n\t            for id, hypos in zip(batch[\"id\"].tolist(), translations):\n\t                results.append((id, hypos))\n\t        # sort output to match input order\n\t        outputs = [hypos for _, hypos in sorted(results, key=lambda x: x[0])]\n\t        return outputs\n"]}
{"filename": "xlmr/src/model/xlmr_megatron.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\tfrom typing import Dict, List, Optional, Tuple\n\timport os\n\timport math\n\timport logging\n\timport torch\n\tfrom torch import Tensor, nn\n", "import torch.nn.functional as F\n\tfrom fairseq import utils\n\tfrom torch.nn import Linear\n\tfrom fairscale.nn.model_parallel import initialize as mpu\n\tfrom fairscale.nn.model_parallel.initialize import initialize_model_parallel\n\tfrom fairscale.nn.model_parallel.mappings import (\n\t    scatter_to_model_parallel_region, \n\t    gather_from_model_parallel_region, \n\t    copy_to_model_parallel_region\n\t) \n", "import fairscale.nn.model_parallel.initialize as fs_init\n\tfrom fairscale.nn.model_parallel.layers import (\n\t    ParallelEmbedding,\n\t    RowParallelLinear,\n\t    ColumnParallelLinear,\n\t    VocabParallelEmbedding,\n\t)\n\tfrom fairseq.modules.fairseq_dropout import FairseqDropout\n\tfrom fairseq.modules.checkpoint_activations import checkpoint_wrapper\n\tfrom fsdp.fully_sharded_data_parallel import fsdp_enable_wrap, fsdp_wrap\n", "from fairseq.modules import (\n\t    LayerNorm,\n\t    PositionalEmbedding,\n\t)\n\tlogger = logging.getLogger(__name__)\n\tdef _mean_pooling(enc_feats, src_masks):\n\t    # enc_feats: T x B x C\n\t    # src_masks: B x T or None\n\t    if src_masks is None:\n\t        enc_feats = enc_feats.mean(0)\n", "    else:\n\t        src_masks = (~src_masks).transpose(0, 1).type_as(enc_feats)\n\t        enc_feats = (\n\t            (enc_feats / src_masks.sum(0)[None, :, None]) * src_masks[:, :, None]\n\t        ).sum(0)\n\t    return enc_feats\n\tclass XLMRMegatron(nn.Module):\n\t    def __init__(self, cfg, src_dict, tgt_dict, embed_tokens):\n\t        super().__init__()\n\t        self.src_dict = src_dict\n", "        self.tgt_dict = tgt_dict\n\t        self.embed_tokens = embed_tokens\n\t        self.embed_dim = cfg.decoder_embed_dim\n\t        self.num_layers = cfg.decoder_layers\n\t        self.normalize_before = cfg.decoder_normalize_before\n\t        self.pad = self.tgt_dict.pad()\n\t        self.bos = self.tgt_dict.bos()\n\t        self.eos = self.tgt_dict.eos()\n\t        self.unk = self.tgt_dict.unk()\n\t        self.embed_positions = (\n", "            PositionalEmbedding(512,\n\t                self.embed_dim,\n\t                padding_idx=self.pad,\n\t                learned=True,\n\t            )\n\t        )\n\t        self.layers = torch.nn.ModuleList()\n\t        self.layers.extend(\n\t            [\n\t                self.build_decoder_layer(cfg)\n", "                for _ in range(self.num_layers)\n\t            ]\n\t        )\n\t        self.layer_norm = LayerNorm(self.embed_dim)\n\t        self.lm_head = XLMRHead(\n\t            embed_dim=self.embed_dim,\n\t            output_dim=len(self.tgt_dict),\n\t            weight=self.embed_tokens.weight,\n\t        )\n\t        def _vocab_init(tensor, **kwargs):\n", "            nn.init.normal_(tensor, mean=0.0, std=0.02)\n\t        self.embed_length = VocabParallelEmbedding(512, self.embed_dim, init_method=_vocab_init)\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward_length(self, enc_feats, src_masks):\n\t        enc_feats = _mean_pooling(enc_feats.transpose(0, 1), src_masks)\n\t        enc_feats = copy_to_model_parallel_region(enc_feats)\n\t        length_out = F.linear(enc_feats, self.embed_length.weight)\n\t        length_out = gather_from_model_parallel_region(length_out).contiguous()\n\t        return F.log_softmax(length_out, -1)\n\t    def forward_length_prediction(self, length_out, tgt_tokens=None):\n", "        if tgt_tokens is not None:\n\t            # obtain the length target\n\t            tgt_lengs = tgt_tokens.ne(self.pad).sum(1).long()\n\t            length_tgt = tgt_lengs\n\t            length_tgt = length_tgt.clamp(min=0, max=512)\n\t        else:\n\t            length_out = gather_from_model_parallel_region(length_out).contiguous()\n\t            pred_lengs = length_out.max(-1)[1]\n\t            length_tgt = pred_lengs\n\t        return length_tgt\n", "    def build_decoder_layer(self, cfg):\n\t        layer = XLMRTransformerLayer(cfg)\n\t        checkpoint = cfg.checkpoint_activations\n\t        if checkpoint:\n\t            offload_to_cpu = cfg.offload_activations\n\t            layer = checkpoint_wrapper(layer, offload_to_cpu=offload_to_cpu)\n\t        min_params_to_wrap = cfg.min_params_to_wrap if not checkpoint else 0\n\t        layer = fsdp_wrap(layer, min_num_params=min_params_to_wrap)\n\t        return layer\n\t    def output_layer(self, x):\n", "        return self.lm_head(x).float()\n\t    def forward(self, source, target):\n\t        src_embed = self.embed_tokens(source)\n\t        src_x = src_embed + self.embed_positions(source)\n\t        tgt_embed = self.embed_tokens(target)\n\t        tgt_x = tgt_embed + self.embed_positions(target)\n\t        if not self.normalize_before:\n\t            src_x = self.layer_norm(src_x)\n\t            tgt_x = self.layer_norm(tgt_x)\n\t        src_x = self.dropout_module(src_x)\n", "        tgt_x = self.dropout_module(tgt_x)\n\t        src_key_padding_mask = source.eq(self.pad)\n\t        tgt_key_padding_mask = target.eq(self.pad)\n\t        hidden_state = [src_x]\n\t        tgt_start_idx = src_x.size(1)\n\t        x = torch.cat([src_x, tgt_x], dim=1)\n\t        key_padding_mask = torch.cat([src_key_padding_mask, tgt_key_padding_mask], dim=1)\n\t        for i, layer in enumerate(self.layers):\n\t            x = layer(\n\t                x,\n", "                key_padding_mask,\n\t            )\n\t            hidden_state.append(x[:,:tgt_start_idx,:])\n\t        if self.normalize_before:\n\t            src_x = self.layer_norm(x[:,:tgt_start_idx,:])\n\t            tgt_x = self.layer_norm(x[:,tgt_start_idx:,:])\n\t        return src_x, tgt_x, src_key_padding_mask, tgt_key_padding_mask, hidden_state\n\t    def forward_enc(self, tokens):\n\t        embed = self.embed_tokens(tokens)\n\t        x = embed + self.embed_positions(tokens)\n", "        if not self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        x = self.dropout_module(x)\n\t        key_padding_mask = tokens.eq(self.pad)\n\t        hidden_state = [x]\n\t        for i, layer in enumerate(self.layers):\n\t            x = layer(\n\t                x,\n\t                key_padding_mask,\n\t            )\n", "            hidden_state.append(x)\n\t        if self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        return x, key_padding_mask, hidden_state\n\t    def forward_dec(self, encoder_out, tokens):\n\t        embed = self.embed_tokens(tokens)\n\t        x = embed + self.embed_positions(tokens)\n\t        if not self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        x = self.dropout_module(x)\n", "        tgt_key_padding_mask = tokens.eq(self.pad)\n\t        hidden_state = [x]\n\t        tgt_start_idx = encoder_out[\"encoder_padding_mask\"][0].size(1)\n\t        key_padding_mask = torch.cat([encoder_out[\"encoder_padding_mask\"][0], tgt_key_padding_mask], dim=1)\n\t        for i, layer in enumerate(self.layers):\n\t            x_concat = torch.cat([encoder_out[\"encoder_states\"][i], x], dim=1)\n\t            x = layer(\n\t                x_concat,\n\t                key_padding_mask,\n\t            )[:, tgt_start_idx:, :]\n", "            hidden_state.append(x[:, tgt_start_idx:, :])\n\t        if self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        return x, key_padding_mask, hidden_state\n\tclass XLMRHead(nn.Module):\n\t    \"\"\"Head for masked language modeling.\"\"\"\n\t    def __init__(self, embed_dim, output_dim, weight=None):\n\t        super().__init__()\n\t        self.dense = ColumnParallelLinear(\n\t            embed_dim,\n", "            embed_dim,\n\t            bias=True,\n\t            gather_output=True,\n\t            init_method=lambda x: x,\n\t        )\n\t        self.activation_fn = utils.get_activation_fn(\"gelu\")\n\t        self.layer_norm = LayerNorm(embed_dim)\n\t        if weight is None:\n\t            weight = nn.Linear(embed_dim, output_dim, bias=False).weight\n\t        self.weight = weight\n", "        self.bias = nn.Parameter(torch.zeros(output_dim))\n\t    def forward(self, features):\n\t        x = self.dense(features)\n\t        x = self.activation_fn(x)\n\t        x = self.layer_norm(x)\n\t        x = copy_to_model_parallel_region(x)\n\t        x = F.linear(x, self.weight)\n\t        x = gather_from_model_parallel_region(x).contiguous()\n\t        x = x + self.bias\n\t        return x\n", "class XLMRTransformerLayer(nn.Module):\n\t    def __init__(self, cfg):\n\t        super().__init__()\n\t        self.embed_dim = cfg.decoder_embed_dim\n\t        self.num_heads = cfg.decoder_attention_heads\n\t        self.ffn_embed_dim = cfg.decoder_ffn_embed_dim\n\t        self.self_attn = XLMRAttention(self.num_heads, self.embed_dim)\n\t        self.activation_fn = utils.get_activation_fn(\"gelu\")\n\t        self.fc1 = ColumnParallelLinear(self.embed_dim, self.ffn_embed_dim, gather_output=False, init_method=lambda x: x)\n\t        self.fc2 = RowParallelLinear(self.ffn_embed_dim, self.embed_dim, input_is_parallel=True, init_method=lambda x: x)\n", "        self.self_attn_layer_norm = LayerNorm(self.embed_dim)\n\t        self.final_layer_norm = LayerNorm(self.embed_dim)\n\t        self.normalize_before = cfg.decoder_normalize_before\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward(\n\t        self,\n\t        x: Tensor,\n\t        key_padding_mask: Optional[Tensor],\n\t    ):\n\t        residual = x\n", "        if self.normalize_before:\n\t            x = self.self_attn_layer_norm(x)\n\t        x = residual + self.dropout_module(self.self_attn(x, key_padding_mask))\n\t        if not self.normalize_before:\n\t            x = self.self_attn_layer_norm(x)\n\t        residual = x\n\t        if self.normalize_before:\n\t            x = self.final_layer_norm(x)\n\t        x = residual + self.dropout_module(self.fc2(self.activation_fn(self.fc1(x))))\n\t        if not self.normalize_before:\n", "            x = self.final_layer_norm(x)\n\t        return x\n\tclass XLMRAttention(nn.Module):\n\t    def __init__(self, num_heads, embed_dim):\n\t        super().__init__()\n\t        self.num_heads = num_heads\n\t        self.embed_dim = embed_dim\n\t        self.head_dim = embed_dim // num_heads\n\t        self.local_num_heads = self.num_heads // fs_init.get_model_parallel_world_size()\n\t        self.scaling = self.head_dim**-0.5\n", "        self.q_proj = ColumnParallelLinear(\n\t            self.embed_dim,\n\t            self.embed_dim,\n\t            bias=True,\n\t            gather_output=False,\n\t            init_method=lambda x: x,\n\t        )\n\t        self.k_proj = ColumnParallelLinear(\n\t            self.embed_dim,\n\t            self.embed_dim,\n", "            bias=True,\n\t            gather_output=False,\n\t            init_method=lambda x: x,\n\t        )\n\t        self.v_proj = ColumnParallelLinear(\n\t            self.embed_dim,\n\t            self.embed_dim,\n\t            bias=True,\n\t            gather_output=False,\n\t            init_method=lambda x: x,\n", "        )\n\t        self.out_proj = RowParallelLinear(\n\t            self.embed_dim,\n\t            self.embed_dim,\n\t            bias=True,\n\t            input_is_parallel=True,\n\t            init_method=lambda x: x,\n\t        )\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward(self, query, key_padding_mask):\n", "        bsz, src_len, embed_dim = query.size()\n\t        q = self.q_proj(query)\n\t        k = self.k_proj(query)\n\t        v = self.v_proj(query)\n\t        q *= self.scaling\n\t        q = q.view(bsz, src_len, self.local_num_heads, self.head_dim).transpose(1, 2)\n\t        k = k.view(bsz, src_len, self.local_num_heads, self.head_dim).transpose(1, 2)\n\t        v = v.view(bsz, src_len, self.local_num_heads, self.head_dim).transpose(1, 2)\n\t        attn_scores = torch.matmul(q, k.transpose(2, 3))\n\t        if key_padding_mask is not None:\n", "            attn_scores = attn_scores.masked_fill(\n\t                key_padding_mask.unsqueeze(1).unsqueeze(2),\n\t                float(\"-inf\")\n\t            )\n\t        attn_softmax_scores = F.softmax(attn_scores.float(), dim=-1).type_as(q)\n\t        output = torch.matmul(self.dropout_module(attn_softmax_scores), v)\n\t        output = output.transpose(1, 2).contiguous().view(bsz, src_len, -1)\n\t        return self.out_proj(output)\n"]}
{"filename": "xlmr/src/model/xlmr_model.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Dict, List, Optional, Tuple\n\timport os\n\tfrom omegaconf import II\n\timport math\n\timport logging\n", "import torch \n\tfrom torch import Tensor, nn\n\timport torch.nn.functional as F\n\tfrom fairseq import options, utils\n\tfrom fairseq.dataclass import ChoiceEnum, FairseqDataclass\n\tfrom fairseq.models import (\n\t    BaseFairseqModel,\n\t    register_model,\n\t    register_model_architecture,\n\t)\n", "from fairseq.models.transformer import DEFAULT_MIN_PARAMS_TO_WRAP\n\tfrom .hub_interface import XLMRHubInterface\n\tfrom .xlmr_transformer import XLMRTransformer\n\tfrom .xlmr_megatron import XLMRMegatron\n\tfrom fairseq.utils import safe_getattr, safe_hasattr\n\tfrom fairseq.utils import new_arange\n\tfrom generator.iterative_refinement_generator import DecoderOut\n\tfrom fairscale.nn.model_parallel import initialize as mpu\n\tfrom fairscale.nn.model_parallel.layers import ParallelEmbedding, VocabParallelEmbedding\n\tfrom sentencepiece import SentencePieceProcessor\n", "logger = logging.getLogger(__name__)\n\tdef _skeptical_unmasking(output_scores, output_masks, p):\n\t    sorted_index = output_scores.sort(-1)[1]\n\t    boundary_len = (\n\t        (output_masks.sum(1, keepdim=True).type_as(output_scores) - 2) * p\n\t    ).long()\n\t    skeptical_mask = new_arange(output_masks) < boundary_len\n\t    return skeptical_mask.scatter(1, sorted_index, skeptical_mask)\n\t@dataclass\n\tclass XLMRConfig(FairseqDataclass):\n", "    dropout: float = field(default=0.1, metadata={\"help\": \"dropout probability\"})\n\t    attention_dropout: float = field(\n\t        default=0.0, metadata={\"help\": \"dropout probability for attention weights\"}\n\t    )\n\t    decoder_embed_dim: int = field(\n\t        default=4096, metadata={\"help\": \"decoder embedding dimension\"}\n\t    )\n\t    decoder_ffn_embed_dim: int = field(\n\t        default=16384, metadata={\"help\": \"decoder embedding dimension for FFN\"}\n\t    )\n", "    decoder_layers: int = field(default=48, metadata={\"help\": \"num decoder layers\"})\n\t    decoder_attention_heads: int = field(\n\t        default=32, metadata={\"help\": \"num decoder attention heads\"}\n\t    )\n\t    decoder_normalize_before: bool = field(\n\t        default=True, metadata={\"help\": \"norm before\"}\n\t    )\n\t    max_target_positions: Optional[int] = II(\"task.max_target_positions\")\n\t    checkpoint_activations: bool = field(\n\t        default=False, metadata={\"help\": \"checkpoint activations at each layer\"}\n", "    )\n\t    offload_activations: bool = field(\n\t        default=False,\n\t        metadata={\"help\": \"move checkpointed activations to CPU after they are used.\"},\n\t    )\n\t    min_params_to_wrap: int = field(\n\t        default=DEFAULT_MIN_PARAMS_TO_WRAP,\n\t        metadata={\n\t            \"help\": (\"minimum number of params for a layer to be wrapped with FSDP()\")\n\t        },\n", "    )\n\tdef Embedding(num_embeddings, embedding_dim, padding_idx):\n\t    m = nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)\n\t    nn.init.normal_(m.weight, mean=0, std=embedding_dim**-0.5)\n\t    nn.init.constant_(m.weight[padding_idx], 0)\n\t    return m\n\t@register_model(\"nar_xlmr\", dataclass=XLMRConfig)\n\tclass NARXLMR(BaseFairseqModel):\n\t    def __init__(self, decoder):\n\t        super().__init__()\n", "        self.decoder = decoder\n\t        self.mask_idx = self.decoder.tgt_dict.index('<mask>')\n\t    @classmethod\n\t    def build_model(cls, args, task):\n\t        \"\"\"Build a new model instance.\"\"\"\n\t        xlmr_base(args)\n\t        logger.info(\"rescale [src] dictionary: {} types and [tgt] dictionary: {} types\".format(\n\t            len(task.source_dictionary), len(task.target_dictionary)))\n\t        task.megatron_model = False\n\t        if safe_getattr(task, \"megatron_model\", False):\n", "            cls.initialize_model_parallel()\n\t            task.source_dictionary.pad_to_multiple_(torch.distributed.get_world_size() * 8)\n\t            task.target_dictionary.pad_to_multiple_(torch.distributed.get_world_size() * 8)\n\t            embed_tokens = cls.build_megatron_embedding(args, task.target_dictionary, args.decoder_embed_dim)\n\t            decoder = XLMRMegatron(\n\t                args,\n\t                task.source_dictionary,\n\t                task.target_dictionary,\n\t                embed_tokens\n\t            )\n", "        else:\n\t            embed_tokens = cls.build_embedding(args, task.source_dictionary, args.decoder_embed_dim)\n\t            decoder = XLMRTransformer(\n\t                args,\n\t                task.source_dictionary,\n\t                task.target_dictionary,\n\t                embed_tokens\n\t            )\n\t        return cls(decoder)\n\t    @classmethod\n", "    def initialize_model_parallel(cls):\n\t        logger.info(\"llama model init process group\")\n\t        if not torch.distributed.is_initialized():\n\t            torch.distributed.init_process_group(\"nccl\")\n\t        if not mpu.model_parallel_is_initialized():\n\t            ws = torch.distributed.get_world_size()\n\t            mpu.initialize_model_parallel(ws)\n\t    @classmethod\n\t    def build_megatron_embedding(cls, args, dictionary, embed_dim):\n\t        return VocabParallelEmbedding(len(dictionary), embed_dim, init_method=lambda x: x)\n", "    @classmethod\n\t    def build_embedding(cls, cfg, dictionary, embed_dim):\n\t        return Embedding(len(dictionary), embed_dim, dictionary.pad())\n\t    @classmethod\n\t    def from_pretrained(\n\t        cls,\n\t        model_name_or_path,\n\t        checkpoint_file,\n\t        **kwargs\n\t    ):\n", "        from fairseq import hub_utils\n\t        x = hub_utils.from_pretrained(\n\t            model_name_or_path,\n\t            checkpoint_file,\n\t            **kwargs,\n\t        )\n\t        return XLMRHubInterface(x[\"args\"], x[\"task\"], x[\"models\"][0])\n\t    def forward(self, source, target_mask):\n\t        src_x, tgt_x, src_key_padding_mask, tgt_key_padding_mask, hidden_state = self.decoder(source, target_mask)\n\t        tgt_out = self.decoder.output_layer(tgt_x)\n", "        length_out = self.decoder.forward_length(src_x, src_key_padding_mask)\n\t        length_tgt = self.decoder.forward_length_prediction(length_out, target_mask)\n\t        return tgt_out, length_out, length_tgt\n\t    def forward_encoder(self, source):\n\t        src_x, src_padding, src_hiddens = self.decoder.forward_enc(source)\n\t        return {\n\t            \"encoder_out\": [src_x],\n\t            \"encoder_padding_mask\": [src_padding],\n\t            \"encoder_states\": src_hiddens,\n\t            \"src_tokens\": [source],\n", "        }\n\t    def nucleus_sampling(self, probs, output_tokens, step, max_step):\n\t        nucleus_p = 0.9\n\t        temperature = (1.0 - step / max_step) * 2.0\n\t        probs = F.softmax(probs / temperature, dim=-1)\n\t        raw_indices_buf = probs.max(-1)[1].unsqueeze(-1)\n\t        if nucleus_p > 0:\n\t            sorted_probs, sorted_indices = probs.sort(descending=True)\n\t            cumsum_probs = sorted_probs.cumsum(dim=2)\n\t            mask = cumsum_probs.lt(nucleus_p)\n", "            cumsum_mask = mask.cumsum(dim=2)\n\t            last_included = cumsum_mask[:, :, -1:]\n\t            last_included.clamp_(0, mask.size()[2] - 1)\n\t            mask = mask.scatter_(2, last_included, 1)\n\t            max_dim = last_included.max()\n\t            truncated_mask = mask[:, :, : max_dim + 1]\n\t            truncated_probs = sorted_probs[:, :, : max_dim + 1]\n\t            truncated_indices = sorted_indices[:, :, : max_dim + 1]\n\t            trimed_probs = truncated_probs.masked_fill_(~truncated_mask, 0)\n\t        else:\n", "            trimed_probs, truncated_indices = probs.topk(nucleus_k)\n\t        bsz, seq_len, _ = trimed_probs.size()\n\t        select_buf = torch.multinomial(trimed_probs.view(bsz * seq_len, -1), 1, replacement=True).view(bsz, seq_len)\n\t        scores_buf = torch.gather(trimed_probs, dim=2, index=select_buf.unsqueeze(-1))\n\t        indices_buf = torch.gather(truncated_indices, dim=2, index=select_buf.unsqueeze(-1))\n\t        return torch.log(scores_buf), indices_buf\n\t    def forward_decoder(self, decoder_out, encoder_out, decoding_format=None, **kwargs):\n\t        step = decoder_out.step\n\t        max_step = decoder_out.max_step\n\t        output_tokens = decoder_out.output_tokens\n", "        output_scores = decoder_out.output_scores\n\t        history = decoder_out.history\n\t        output_masks = output_tokens.eq(self.mask_idx)\n\t        tgt_x, tgt_padding_mask, _ = self.decoder.forward_dec(encoder_out, output_tokens)\n\t        tgt_out = self.decoder.output_layer(tgt_x)\n\t        _scores, _tokens = self.nucleus_sampling(tgt_out, output_tokens, step, max_step)\n\t        # _scores, _tokens = F.log_softmax(tgt_out, -1).max(-1)\n\t        output_tokens.masked_scatter_(output_masks, _tokens[output_masks])\n\t        output_scores.masked_scatter_(output_masks, _scores[output_masks])\n\t        if history is not None:\n", "            history.append(output_tokens.clone())\n\t        # skeptical decoding (depend on the maximum decoding steps.)\n\t        if (step + 1) < max_step:\n\t            skeptical_mask = _skeptical_unmasking(\n\t                output_scores, output_tokens.ne(self.decoder.tgt_dict.pad()), 1 - (step + 1) / max_step\n\t            )\n\t            output_tokens.masked_fill_(skeptical_mask, self.mask_idx)\n\t            output_scores.masked_fill_(skeptical_mask, 0.0)\n\t            if history is not None:\n\t                history.append(output_tokens.clone())\n", "        return decoder_out._replace(\n\t            output_tokens=output_tokens,\n\t            output_scores=output_scores,\n\t            attn=None,\n\t            history=history,\n\t        )\n\t    def initialize_output_tokens(self, encoder_out, src_tokens, tgt_tokens=None):\n\t        length_tgt = self.decoder.forward_length_prediction(\n\t            self.decoder.forward_length(encoder_out[\"encoder_out\"][0], encoder_out[\"encoder_padding_mask\"][0]),\n\t            tgt_tokens=tgt_tokens,\n", "        )\n\t        max_length = length_tgt.clamp_(min=2).max()\n\t        idx_length = utils.new_arange(src_tokens, max_length)\n\t        initial_output_tokens = src_tokens.new_zeros(\n\t            src_tokens.size(0), max_length\n\t        ).fill_(self.decoder.pad)\n\t        initial_output_tokens.masked_fill_(\n\t            idx_length[None, :] < length_tgt[:, None], self.mask_idx\n\t        )\n\t        initial_output_tokens[:, 0] = self.decoder.bos\n", "        initial_output_tokens.scatter_(1, length_tgt[:, None] - 1, self.decoder.eos)\n\t        initial_output_scores = initial_output_tokens.new_zeros(\n\t            *initial_output_tokens.size()\n\t        ).type_as(encoder_out[\"encoder_out\"][0]).float()\n\t        return DecoderOut(\n\t            output_tokens=initial_output_tokens,\n\t            output_scores=initial_output_scores,\n\t            attn=None,\n\t            step=0,\n\t            max_step=0,\n", "            history=None,\n\t        )\n\t    @torch.jit.export\n\t    def reorder_encoder_out(self, encoder_out: Dict[str, List[Tensor]], new_order):\n\t        if len(encoder_out[\"encoder_out\"]) == 0:\n\t            new_encoder_out = []\n\t        else:\n\t            new_encoder_out = [encoder_out[\"encoder_out\"][0].index_select(0, new_order)]\n\t        if len(encoder_out[\"encoder_padding_mask\"]) == 0:\n\t            new_encoder_padding_mask = []\n", "        else:\n\t            new_encoder_padding_mask = [\n\t                encoder_out[\"encoder_padding_mask\"][0].index_select(0, new_order)\n\t            ]\n\t        encoder_states = encoder_out[\"encoder_states\"]\n\t        if len(encoder_states) > 0:\n\t            for idx, state in enumerate(encoder_states):\n\t                encoder_states[idx] = state.index_select(0, new_order)\n\t        if len(encoder_out[\"src_tokens\"]) == 0:\n\t            src_tokens = []\n", "        else:\n\t            src_tokens = [(encoder_out[\"src_tokens\"][0]).index_select(0, new_order)]\n\t        return {\n\t            \"encoder_out\": new_encoder_out,  # T x B x C\n\t            \"encoder_padding_mask\": new_encoder_padding_mask,  # B x T\n\t            \"encoder_states\": encoder_states,  # List[T x B x C]\n\t            \"src_tokens\": src_tokens,  # B x T\n\t        }\n\t    def upgrade_state_dict_named(self, state_dict, name):\n\t        for k in list(state_dict.keys()):\n", "            if \"version\" in k:\n\t                del state_dict[k]\n\t                continue\n\t            if \"encoder.sentence_encoder\" in k:\n\t                new_k = k.replace(\"encoder.sentence_encoder\", \"decoder\")\n\t                state_dict[new_k] = state_dict[k]\n\t                del state_dict[k]\n\t            if \"encoder.lm_head\" in k:\n\t                new_k = k.replace(\"encoder.lm_head\", \"decoder.lm_head\")\n\t                state_dict[new_k] = state_dict[k]\n", "                del state_dict[k]   \n\t        if \"decoder.embed_length.weight\" not in state_dict:\n\t            state_dict[\"decoder.embed_length.weight\"] = self.decoder.embed_length.weight\n\t        super().upgrade_state_dict_named(state_dict, name)\n\tdef xlmr_base_architecture(args):\n\t    args.dropout = safe_getattr(args, \"dropout\", 0.1)\n\t    args.attention_dropout = safe_getattr(args, \"attention_dropout\", 0.1)\n\t    args.decoder_embed_dim = safe_getattr(args, \"decoder_embed_dim\", 768)\n\t    args.decoder_ffn_embed_dim = safe_getattr(args, \"decoder_ffn_embed_dim\", 768 * 4)\n\t    args.decoder_layers = safe_getattr(args, \"decoder_layers\", 12)\n", "    args.decoder_attention_heads = safe_getattr(args, \"decoder_attention_heads\", 12)\n\t    args.decoder_normalize_before = getattr(args, \"decoder_normalize_before\", True)\n\t    args.max_source_positions = safe_getattr(args, \"max_source_positions\", 512)\n\t    args.max_target_positions = safe_getattr(args, \"max_target_positions\", 512)\n\tdef xlmr_xl_architecture(args):\n\t    args.dropout = safe_getattr(args, \"dropout\", 0.1)\n\t    args.attention_dropout = safe_getattr(args, \"attention_dropout\", 0.1)\n\t    args.decoder_embed_dim = safe_getattr(args, \"decoder_embed_dim\", 2560)\n\t    args.decoder_ffn_embed_dim = safe_getattr(args, \"decoder_ffn_embed_dim\", 2560 * 4)\n\t    args.decoder_layers = safe_getattr(args, \"decoder_layers\", 36)\n", "    args.decoder_attention_heads = safe_getattr(args, \"decoder_attention_heads\", 32)\n\t    args.decoder_normalize_before = getattr(args, \"decoder_normalize_before\", True)\n\t    args.max_source_positions = safe_getattr(args, \"max_source_positions\", 512)\n\t    args.max_target_positions = safe_getattr(args, \"max_target_positions\", 512)\n\tdef xlmr_xxl_architecture(args):\n\t    args.dropout = safe_getattr(args, \"dropout\", 0.1)\n\t    args.attention_dropout = safe_getattr(args, \"attention_dropout\", 0.1)\n\t    args.decoder_embed_dim = safe_getattr(args, \"decoder_embed_dim\", 4096)\n\t    args.decoder_ffn_embed_dim = safe_getattr(args, \"decoder_ffn_embed_dim\", 4096 * 4)\n\t    args.decoder_layers = safe_getattr(args, \"decoder_layers\", 48)\n", "    args.decoder_attention_heads = safe_getattr(args, \"decoder_attention_heads\", 32)\n\t    args.decoder_normalize_before = getattr(args, \"decoder_normalize_before\", True)\n\t    args.max_source_positions = safe_getattr(args, \"max_source_positions\", 512)\n\t    args.max_target_positions = safe_getattr(args, \"max_target_positions\", 512)\n\t@register_model_architecture(\"nar_xlmr\", \"nar_xlmr_base\")\n\tdef xlmr_base(args):\n\t    xlmr_base_architecture(args)\n\t@register_model_architecture(\"nar_xlmr\", \"nar_xlmr_xl\")\n\tdef xlmr_xl(args):\n\t    xlmr_xl_architecture(args)\n", "@register_model_architecture(\"nar_xlmr\", \"nar_xlmr_xxl\")\n\tdef xlmr_xxl(args):\n\t    xlmr_xxl_architecture(args)"]}
{"filename": "xlmr/src/model/xlmr_transformer.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\tfrom typing import Dict, List, Optional, Tuple\n\timport os\n\timport math\n\timport logging\n\timport torch\n\tfrom torch import Tensor, nn\n", "import torch.nn.functional as F\n\tfrom fairseq import utils\n\tfrom torch.nn import Linear\n\tfrom fsdp.fully_sharded_data_parallel import fsdp_enable_wrap, fsdp_wrap\n\tfrom fairseq.modules.checkpoint_activations import checkpoint_wrapper\n\tfrom fairseq.modules.fairseq_dropout import FairseqDropout\n\timport numpy as np\n\tfrom fairseq.modules import (\n\t    LayerNorm,\n\t    PositionalEmbedding,\n", ")\n\tlogger = logging.getLogger(__name__)\n\tdef Embedding(num_embeddings, embedding_dim, padding_idx):\n\t    m = nn.Embedding(num_embeddings, embedding_dim, padding_idx=padding_idx)\n\t    nn.init.normal_(m.weight, mean=0, std=embedding_dim**-0.5)\n\t    nn.init.constant_(m.weight[padding_idx], 0)\n\t    return m\n\tdef _mean_pooling(enc_feats, src_masks):\n\t    # enc_feats: T x B x C\n\t    # src_masks: B x T or None\n", "    if src_masks is None:\n\t        enc_feats = enc_feats.mean(0)\n\t    else:\n\t        src_masks = (~src_masks).transpose(0, 1).type_as(enc_feats)\n\t        enc_feats = (\n\t            (enc_feats / src_masks.sum(0)[None, :, None]) * src_masks[:, :, None]\n\t        ).sum(0)\n\t    return enc_feats\n\tclass XLMRTransformer(nn.Module):\n\t    def __init__(self, cfg, src_dict, tgt_dict, embed_tokens):\n", "        super().__init__()\n\t        self.src_dict = src_dict\n\t        self.tgt_dict = tgt_dict\n\t        self.embed_tokens = embed_tokens\n\t        self.embed_dim = cfg.decoder_embed_dim\n\t        self.num_layers = cfg.decoder_layers\n\t        self.normalize_before = cfg.decoder_normalize_before\n\t        self.pad = self.tgt_dict.pad()\n\t        self.bos = self.tgt_dict.bos()\n\t        self.eos = self.tgt_dict.eos()\n", "        self.unk = self.tgt_dict.unk()\n\t        self.embed_positions = (\n\t            PositionalEmbedding(512,\n\t                self.embed_dim,\n\t                padding_idx=self.pad,\n\t                learned=True,\n\t            )\n\t        )\n\t        self.layers = torch.nn.ModuleList()\n\t        self.layers.extend(\n", "            [\n\t                self.build_decoder_layer(cfg)\n\t                for _ in range(self.num_layers)\n\t            ]\n\t        )\n\t        self.layer_norm = LayerNorm(self.embed_dim)\n\t        self.lm_head = XLMRHead(\n\t            embed_dim=self.embed_dim,\n\t            output_dim=len(self.tgt_dict),\n\t            weight=self.embed_tokens.weight,\n", "        )\n\t        self.embed_length = Embedding(512, self.embed_dim, None)\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward_length(self, enc_feats, src_masks):\n\t        enc_feats = _mean_pooling(enc_feats.transpose(0, 1), src_masks)\n\t        length_out = F.linear(enc_feats, self.embed_length.weight)\n\t        return F.log_softmax(length_out, -1)\n\t    def forward_length_prediction(self, length_out, tgt_tokens=None):\n\t        if tgt_tokens is not None:\n\t            # obtain the length target\n", "            tgt_lengs = tgt_tokens.ne(self.pad).sum(1).long()\n\t            length_tgt = tgt_lengs\n\t            length_tgt = length_tgt.clamp(min=0, max=512)\n\t        else:\n\t            pred_lengs = length_out.max(-1)[1]\n\t            length_tgt = pred_lengs\n\t        return length_tgt\n\t    def build_decoder_layer(self, cfg):\n\t        layer = XLMRTransformerLayer(cfg)\n\t        checkpoint = cfg.checkpoint_activations\n", "        if checkpoint:\n\t            offload_to_cpu = cfg.offload_activations\n\t            layer = checkpoint_wrapper(layer, offload_to_cpu=offload_to_cpu)\n\t        min_params_to_wrap = cfg.min_params_to_wrap if not checkpoint else 0\n\t        layer = fsdp_wrap(layer, min_num_params=min_params_to_wrap)\n\t        return layer\n\t    def output_layer(self, x):\n\t        return self.lm_head(x).float()\n\t    def forward(self, source, target):\n\t        src_embed = self.embed_tokens(source)\n", "        src_x = src_embed + self.embed_positions(source)\n\t        tgt_embed = self.embed_tokens(target)\n\t        tgt_x = tgt_embed + self.embed_positions(target)\n\t        if not self.normalize_before:\n\t            src_x = self.layer_norm(src_x)\n\t            tgt_x = self.layer_norm(tgt_x)\n\t        src_x = self.dropout_module(src_x)\n\t        tgt_x = self.dropout_module(tgt_x)\n\t        src_key_padding_mask = source.eq(self.pad)\n\t        tgt_key_padding_mask = target.eq(self.pad)\n", "        hidden_state = [src_x]\n\t        tgt_start_idx = src_x.size(1)\n\t        x = torch.cat([src_x, tgt_x], dim=1)\n\t        key_padding_mask = torch.cat([src_key_padding_mask, tgt_key_padding_mask], dim=1)\n\t        for i, layer in enumerate(self.layers):\n\t            x = layer(\n\t                x,\n\t                key_padding_mask,\n\t            )\n\t            hidden_state.append(x[:,:tgt_start_idx,:])\n", "        if self.normalize_before:\n\t            src_x = self.layer_norm(x[:,:tgt_start_idx,:])\n\t            tgt_x = self.layer_norm(x[:,tgt_start_idx:,:])\n\t        return src_x, tgt_x, src_key_padding_mask, tgt_key_padding_mask, hidden_state\n\t    def forward_enc(self, tokens):\n\t        embed = self.embed_tokens(tokens)\n\t        x = embed + self.embed_positions(tokens)\n\t        if not self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        x = self.dropout_module(x)\n", "        key_padding_mask = tokens.eq(self.pad)\n\t        hidden_state = [x]\n\t        for i, layer in enumerate(self.layers):\n\t            x = layer(\n\t                x,\n\t                key_padding_mask,\n\t            )\n\t            hidden_state.append(x)\n\t        if self.normalize_before:\n\t            x = self.layer_norm(x)\n", "        return x, key_padding_mask, hidden_state\n\t    def forward_dec(self, encoder_out, tokens):\n\t        embed = self.embed_tokens(tokens)\n\t        x = embed + self.embed_positions(tokens)\n\t        if not self.normalize_before:\n\t            x = self.layer_norm(x)\n\t        x = self.dropout_module(x)\n\t        tgt_key_padding_mask = tokens.eq(self.pad)\n\t        hidden_state = [x]\n\t        tgt_start_idx = encoder_out[\"encoder_padding_mask\"][0].size(1)\n", "        key_padding_mask = torch.cat([encoder_out[\"encoder_padding_mask\"][0], tgt_key_padding_mask], dim=1)\n\t        for i, layer in enumerate(self.layers):\n\t            x_concat = torch.cat([encoder_out[\"encoder_states\"][i], x], dim=1)\n\t            x = layer(\n\t                x_concat,\n\t                key_padding_mask,\n\t            )[:, tgt_start_idx:, :]\n\t            hidden_state.append(x[:, tgt_start_idx:, :])\n\t        if self.normalize_before:\n\t            x = self.layer_norm(x)\n", "        return x, key_padding_mask, hidden_state\n\tclass XLMRHead(nn.Module):\n\t    \"\"\"Head for masked language modeling.\"\"\"\n\t    def __init__(self, embed_dim, output_dim, weight=None):\n\t        super().__init__()\n\t        self.dense = nn.Linear(embed_dim, embed_dim)\n\t        self.activation_fn = utils.get_activation_fn(\"gelu\")\n\t        self.layer_norm = LayerNorm(embed_dim)\n\t        if weight is None:\n\t            weight = nn.Linear(embed_dim, output_dim, bias=False).weight\n", "        self.weight = weight\n\t        self.bias = nn.Parameter(torch.zeros(output_dim))\n\t    def forward(self, features):\n\t        x = self.dense(features)\n\t        x = self.activation_fn(x)\n\t        x = self.layer_norm(x)\n\t        x = F.linear(x, self.weight) + self.bias\n\t        return x\n\tclass XLMRTransformerLayer(nn.Module):\n\t    def __init__(self, cfg):\n", "        super().__init__()\n\t        self.embed_dim = cfg.decoder_embed_dim\n\t        self.num_heads = cfg.decoder_attention_heads\n\t        self.ffn_embed_dim = cfg.decoder_ffn_embed_dim\n\t        self.self_attn = XLMRAttention(self.num_heads, self.embed_dim)\n\t        self.activation_fn = utils.get_activation_fn(\"gelu\")\n\t        self.fc1 = nn.Linear(self.embed_dim, self.ffn_embed_dim)\n\t        self.fc2 = nn.Linear(self.ffn_embed_dim, self.embed_dim)\n\t        self.self_attn_layer_norm = LayerNorm(self.embed_dim)\n\t        self.final_layer_norm = LayerNorm(self.embed_dim)\n", "        self.normalize_before = cfg.decoder_normalize_before\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward(\n\t        self,\n\t        x: Tensor,\n\t        key_padding_mask: Optional[Tensor],\n\t    ):\n\t        residual = x\n\t        if self.normalize_before:\n\t            x = self.self_attn_layer_norm(x)\n", "        x = residual + self.dropout_module(self.self_attn(x, key_padding_mask))\n\t        if not self.normalize_before:\n\t            x = self.self_attn_layer_norm(x)\n\t        residual = x\n\t        if self.normalize_before:\n\t            x = self.final_layer_norm(x)\n\t        x = residual + self.dropout_module(self.fc2(self.activation_fn(self.fc1(x))))\n\t        if not self.normalize_before:\n\t            x = self.final_layer_norm(x)\n\t        return x\n", "class XLMRAttention(nn.Module):\n\t    def __init__(self, num_heads, embed_dim):\n\t        super().__init__()\n\t        self.num_heads = num_heads\n\t        self.embed_dim = embed_dim\n\t        self.head_dim = embed_dim // num_heads\n\t        self.scaling = self.head_dim**-0.5\n\t        self.q_proj = nn.Linear(self.embed_dim, self.embed_dim, bias=True)\n\t        self.k_proj = nn.Linear(self.embed_dim, self.embed_dim, bias=True)\n\t        self.v_proj = nn.Linear(self.embed_dim, self.embed_dim, bias=True)\n", "        self.out_proj = nn.Linear(self.embed_dim, self.embed_dim, bias=True)\n\t        self.dropout_module = FairseqDropout(0.1)\n\t    def forward(self, query, key_padding_mask):\n\t        bsz, src_len, embed_dim = query.size()\n\t        q = self.q_proj(query)\n\t        k = self.k_proj(query)\n\t        v = self.v_proj(query)\n\t        q *= self.scaling\n\t        q = q.view(bsz, src_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        k = k.view(bsz, src_len, self.num_heads, self.head_dim).transpose(1, 2)\n", "        v = v.view(bsz, src_len, self.num_heads, self.head_dim).transpose(1, 2)\n\t        attn_scores = torch.matmul(q, k.transpose(2, 3))\n\t        if key_padding_mask is not None:\n\t            attn_scores = attn_scores.masked_fill(\n\t                key_padding_mask.unsqueeze(1).unsqueeze(2),\n\t                float(\"-inf\")\n\t            )\n\t        attn_softmax_scores = F.softmax(attn_scores.float(), dim=-1).type_as(q)\n\t        output = torch.matmul(self.dropout_module(attn_softmax_scores), v)\n\t        output = output.transpose(1, 2).contiguous().view(bsz, src_len, -1)\n", "        return self.out_proj(output)\n"]}
{"filename": "xlmr/src/fsdp/cpu_adam.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport importlib\n\tfrom collections.abc import Collection\n\tfrom dataclasses import dataclass, field\n\tfrom typing import List\n\timport torch\n\tfrom fairseq.dataclass import FairseqDataclass\n", "from fairseq.optim import FairseqOptimizer, register_optimizer\n\tfrom omegaconf import II, DictConfig\n\ttry:\n\t    import deepspeed\n\t    has_deepspeed = True\n\texcept ImportError as e:\n\t    has_deepspeed = False\n\tdef _get_cpu_adam():\n\t    try:\n\t        from deepspeed.ops.op_builder import CPUAdamBuilder\n", "        return CPUAdamBuilder().load()\n\t    except ImportError:\n\t        # fbcode\n\t        from deepspeed.ops.adam import DeepSpeedCPUAdam as ds_opt_adam\n\t        return ds_opt_adam\n\t@dataclass\n\tclass FairseqCPUAdamConfig(FairseqDataclass):\n\t    adam_betas: str = field(\n\t        default=\"(0.9, 0.999)\", metadata={\"help\": \"betas for Adam optimizer\"}\n\t    )\n", "    adam_eps: float = field(\n\t        default=1e-8, metadata={\"help\": \"epsilon for Adam optimizer\"}\n\t    )\n\t    weight_decay: float = field(default=0.0, metadata={\"help\": \"weight decay\"})\n\t    fp16_adam_stats: bool = field(\n\t        default=False, metadata={\"help\": \"use FP16 stats (with automatic scaling)\"}\n\t    )\n\t    # TODO common vars below in parent\n\t    lr: List[float] = II(\"optimization.lr\")\n\t@register_optimizer(\"new_cpu_adam\", dataclass=FairseqCPUAdamConfig)\n", "class FairseqCPUAdam(FairseqOptimizer):\n\t    \"\"\"Adam optimizer for fairseq, optimized for CPU tensors.\n\t    Important note: this optimizer corresponds to the \"AdamW\" variant of\n\t    Adam in its weight decay behavior. As such, it is most closely\n\t    analogous to torch.optim.AdamW from PyTorch.\n\t    \"\"\"\n\t    def __init__(self, cfg: DictConfig, params):\n\t        super().__init__(cfg)\n\t        self._optimizer = CPUAdam(params, **self.optimizer_config)\n\t    @property\n", "    def optimizer_config(self):\n\t        \"\"\"\n\t        Return a kwarg dictionary that will be used to override optimizer\n\t        args stored in checkpoints. This allows us to load a checkpoint and\n\t        resume training using a different set of optimizer args, e.g., with a\n\t        different learning rate.\n\t        \"\"\"\n\t        return {\n\t            \"lr\": self.cfg.lr[0]\n\t            if isinstance(self.cfg.lr, Collection)\n", "            else self.cfg.lr,\n\t            \"betas\": eval(self.cfg.adam_betas),\n\t            \"eps\": self.cfg.adam_eps,\n\t            \"weight_decay\": self.cfg.weight_decay,\n\t            \"use_fp16_stats\": self.cfg.fp16_adam_stats,\n\t        }\n\tclass CPUAdam(torch.optim.Optimizer):\n\t    optimizer_id = 0\n\t    def __init__(\n\t        self,\n", "        params,\n\t        lr=1e-3,\n\t        bias_correction=True,\n\t        betas=(0.9, 0.999),\n\t        eps=1e-8,\n\t        weight_decay=0,\n\t        use_fp16_stats=False,\n\t    ):\n\t        defaults = {\n\t            \"lr\": lr,\n", "            \"bias_correction\": bias_correction,\n\t            \"betas\": betas,\n\t            \"eps\": eps,\n\t            \"weight_decay\": weight_decay,\n\t        }\n\t        super().__init__(params, defaults)\n\t        self.use_fp16_stats = use_fp16_stats\n\t        self.FLOAT16_MAX = 65504.0\n\t        if not has_deepspeed:\n\t            raise ImportError(\"Please install DeepSpeed: pip install deepspeed\")\n", "        self.opt_id = CPUAdam.optimizer_id\n\t        CPUAdam.optimizer_id = CPUAdam.optimizer_id + 1\n\t        self.ds_opt_adam = _get_cpu_adam()\n\t        adamw_mode = True\n\t        self.ds_opt_adam.create_adam(\n\t            self.opt_id, lr, betas[0], betas[1], eps, weight_decay, adamw_mode, True\n\t        )\n\t    @property\n\t    def supports_memory_efficient_fp16(self):\n\t        return True\n", "    @property\n\t    def supports_flat_params(self):\n\t        return True\n\t    @torch.no_grad()\n\t    def step(self, closure=None):\n\t        loss = None\n\t        if closure is not None:\n\t            with torch.enable_grad():\n\t                loss = closure()\n\t        torch.cuda.synchronize()\n", "        for group_id, group in enumerate(self.param_groups):\n\t            for param_id, p in enumerate(group[\"params\"]):\n\t                if p.grad is None:\n\t                    continue\n\t                state = self.state[p]\n\t                if len(state) == 0:\n\t                    state[\"step\"] = 0\n\t                    dtype = torch.float16 if self.use_fp16_stats else p.data.dtype\n\t                    # gradient momentums\n\t                    state[\"exp_avg\"] = torch.zeros_like(\n", "                        p.data, dtype=dtype, device=\"cpu\"\n\t                    )\n\t                    # gradient variances\n\t                    state[\"exp_avg_sq\"] = torch.zeros_like(\n\t                        p.data, dtype=dtype, device=\"cpu\"\n\t                    )\n\t                    if self.use_fp16_stats:\n\t                        assert torch.is_floating_point(p.data)\n\t                        state[\"exp_avg_scale\"] = 1.0\n\t                        state[\"exp_avg_sq_scale\"] = 1.0\n", "                exp_avg, exp_avg_sq = state[\"exp_avg\"], state[\"exp_avg_sq\"]\n\t                p_data_bak = p.data  # backup of the original data pointer\n\t                p.data = p.data.to(dtype=torch.float32, device=\"cpu\")\n\t                p.grad.data = p.grad.data.to(dtype=torch.float32, device=\"cpu\")\n\t                if self.use_fp16_stats:\n\t                    exp_avg = exp_avg.float() * state[\"exp_avg_scale\"]\n\t                    exp_avg_sq = exp_avg_sq.float() * state[\"exp_avg_sq_scale\"]\n\t                state[\"step\"] += 1\n\t                beta1, beta2 = group[\"betas\"]\n\t                self.ds_opt_adam.adam_update(\n", "                    self.opt_id,\n\t                    state[\"step\"],\n\t                    group[\"lr\"],\n\t                    beta1,\n\t                    beta2,\n\t                    group[\"eps\"],\n\t                    group[\"weight_decay\"],\n\t                    group[\"bias_correction\"],\n\t                    p.data,\n\t                    p.grad.data,\n", "                    exp_avg,\n\t                    exp_avg_sq,\n\t                )\n\t                if p_data_bak.data_ptr() != p.data.data_ptr():\n\t                    p_data_bak.copy_(p.data)\n\t                    p.data = p_data_bak\n\t                if self.use_fp16_stats:\n\t                    def inf_norm(t):\n\t                        return torch.norm(t, float(\"inf\"))\n\t                    # from github.com/openai/jukebox/blob/master/jukebox/utils/fp16.py\n", "                    state[\"exp_avg_scale\"], state[\"exp_avg_sq_scale\"] = (\n\t                        1e-8 + inf_norm(exp_avg) / self.FLOAT16_MAX,\n\t                        1e-8 + inf_norm(exp_avg_sq) / self.FLOAT16_MAX,\n\t                    )\n\t                    state[\"exp_avg\"], state[\"exp_avg_sq\"] = (\n\t                        (exp_avg / state[\"exp_avg_scale\"]).half(),\n\t                        (exp_avg_sq / state[\"exp_avg_sq_scale\"]).half(),\n\t                    )\n\t        return loss\n"]}
{"filename": "xlmr/src/fsdp/fully_sharded_data_parallel.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport contextlib\n\tfrom typing import Optional\n\timport os\n\timport torch\n\tfrom fairseq.dataclass.configs import DistributedTrainingConfig\n\tfrom fairseq.distributed import utils as dist_utils\n", "from typing import Any, Dict, Optional, Set, cast\n\ttry:\n\t    from fairscale.nn.data_parallel import FullyShardedDataParallel as FSDP\n\t    from fairscale.nn.data_parallel import TrainingState\n\t    has_FSDP = True\n\texcept ImportError:\n\t    FSDP = torch.nn.Module\n\t    has_FSDP = False\n\tdef free_storage_(data: torch.Tensor):\n\t    if data.storage().size() > 0:\n", "        assert data.storage_offset() == 0\n\t        data.storage().resize_(0)\n\tclass FullyShardedDataParallel(FSDP):\n\t    \"\"\"\n\t    A small wrapper around fairscale's FullyShardedDataParallel (FSDP) with some\n\t    fairseq-specific checkpoint saving/loading logic.\n\t    Args:\n\t        use_sharded_state (bool): if True, then ``state_dict`` will return\n\t            ``FSDP.local_state_dict`` and ``load_state_dict`` will call\n\t            ``FSDP.load_local_state_dict``. Otherwise, ``state_dict`` will\n", "            return the full model weights on data parallel rank 0 (empty on\n\t            other ranks) and ``load_state_dict`` will broadcast model weights\n\t            from rank 0 to other ranks.\n\t    \"\"\"\n\t    def __init__(self, *args, use_sharded_state: bool = False, **kwargs):\n\t        if not has_FSDP:\n\t            raise ImportError(\n\t                \"Cannot find FullyShardedDataParallel. \"\n\t                \"Please install fairscale with: pip install fairscale\"\n\t            )\n", "        super().__init__(*args, **kwargs)\n\t        self.use_sharded_state = use_sharded_state\n\t        if dist_utils.get_world_size(group=dist_utils.get_data_parallel_group()) < 4 and \\\n\t            \"NVIDIA GeForce RTX 3090\" in torch.cuda.get_device_name():\n\t            self.alpaca_force_full_precision = False\n\t        else:\n\t            self.alpaca_force_full_precision = True\n\t    @property\n\t    def unwrapped_module(self) -> torch.nn.Module:\n\t        if self.flatten_parameters:\n", "            return self.module.module\n\t        else:\n\t            return self.module\n\t    def state_dict(self, destination=None, prefix=\"\", keep_vars=False):\n\t        if self.use_sharded_state:\n\t            return super().local_state_dict(\n\t                destination=destination, prefix=prefix, keep_vars=keep_vars\n\t            )\n\t        else:\n\t            if self.rank == 0:\n", "                return super().state_dict(\n\t                    destination=destination, prefix=prefix, keep_vars=keep_vars\n\t                )\n\t            else:\n\t                # We must call state_dict() due to use of communication\n\t                # primitives. But we don't use the result.\n\t                super().state_dict()\n\t                return destination or {}\n\t    def load_state_dict(self, state_dict, strict=True, model_cfg=None):\n\t        if self.use_sharded_state:\n", "            return super().load_local_state_dict(state_dict, strict=strict)\n\t        else:\n\t            state_dict = dist_utils.broadcast_object(\n\t                state_dict, src_rank=0, group=self.process_group,\n\t            )\n\t            return super().load_state_dict(state_dict, strict=strict)\n\t    @contextlib.contextmanager\n\t    def summon_full_params(self, recurse: bool = True, volatile: bool = False):\n\t        if recurse:\n\t            with contextlib.ExitStack() as stack:\n", "                # Summon all params for any nested FSDP instances.\n\t                for module in self.modules():\n\t                    if isinstance(module, FullyShardedDataParallel):\n\t                        stack.enter_context(module.summon_full_params(recurse=False, volatile=volatile))\n\t                # Yield to the caller, with full params in all nested instances.\n\t                yield\n\t            # Exiting from the ExitStack will re-shard params.\n\t            return\n\t        else:\n\t            torch.cuda.synchronize()\n", "            self._lazy_init()\n\t            self.assert_state(TrainingState.IDLE)\n\t            # Set the state so that we assert when trying to go into fwd/bwd.\n\t            self.training_state = TrainingState.SUMMON_FULL_PARAMS\n\t            full_tensors = self._rebuild_full_params(force_full_precision=self.alpaca_force_full_precision)\n\t            assert full_tensors is not None\n\t            with contextlib.ExitStack() as stack:\n\t                if self.module.is_flattened:\n\t                    # Update flattened views to point to fully-sized tensors. We\n\t                    # use self.params instead of full_tensors since the\n", "                    # latter may contain padding.\n\t                    stack.enter_context(\n\t                        self.module.unflatten_params(\n\t                            flat_params=[p.data for p in self.params[: self._num_flatten_params]]\n\t                        )\n\t                    )\n\t                try:\n\t                    yield\n\t                finally:\n\t                    stack.close()\n", "                    non_shared_params = self.params\n\t                    # filter out shared params for all but the owner FSDP module.\n\t                    if len(full_tensors) < len(non_shared_params):\n\t                        non_shared_params = self.non_shared_params()\n\t                    assert len(full_tensors) == len(\n\t                        non_shared_params\n\t                    ), f\"{len(full_tensors)} vs. {len(non_shared_params)}\"\n\t                    for p, (full_tensor, safe_to_free) in zip(non_shared_params, full_tensors):\n\t                        if not volatile:\n\t                            # Copy any changes made to the full params back into\n", "                            # the corresponding local shards.\n\t                            local_shard, _ = self._get_shard(full_tensor)\n\t                            p._fp32_shard.copy_(local_shard.view_as(p._fp32_shard))\n\t                        if safe_to_free:\n\t                            free_storage_(full_tensor)\n\t                    self.has_full_params = False\n\t                    self._use_fp32_param_shard()\n\t                    self.training_state = TrainingState.IDLE\n\tclass DummyProcessGroup:\n\t    def __init__(self, rank: int, size: int):\n", "        self._rank = rank\n\t        self._size = size\n\t    def rank(self) -> int:\n\t        return self._rank\n\t    def size(self) -> int:\n\t        return self._size\n\t@contextlib.contextmanager\n\tdef fsdp_enable_wrap(cfg: DistributedTrainingConfig):\n\t    try:\n\t        from fairscale.nn import enable_wrap\n", "    except ImportError:\n\t        raise ImportError(\n\t            \"Cannot find FullyShardedDataParallel. \"\n\t            \"Please install fairscale with: pip install fairscale\"\n\t        )\n\t    if cfg.memory_efficient_fp16:\n\t        assert cfg.fp16  # memory_efficient_fp16 should imply fp16\n\t    group = dist_utils.get_data_parallel_group()\n\t    if group is None and cfg.distributed_world_size == 1:\n\t        group = DummyProcessGroup(rank=0, size=1)\n", "    fsdp_config = {\n\t        \"process_group\": group,\n\t        \"reshard_after_forward\": not cfg.no_reshard_after_forward,\n\t        \"mixed_precision\": cfg.fp16 and not cfg.memory_efficient_fp16,\n\t        \"fp32_reduce_scatter\": cfg.fp32_reduce_scatter,\n\t        \"flatten_parameters\": not cfg.not_fsdp_flatten_parameters,\n\t        \"cpu_offload\": cfg.cpu_offload,\n\t        \"compute_dtype\": torch.float16 if cfg.fp16 else torch.float32,\n\t        \"bucket_cap_mb\": cfg.bucket_cap_mb,\n\t        \"state_dict_device\": torch.device(\"cpu\"),  # reduce GPU mem usage\n", "    }\n\t    with enable_wrap(\n\t        wrapper_cls=FullyShardedDataParallel,\n\t        use_sharded_state=cfg.use_sharded_state,\n\t        **fsdp_config,\n\t    ):\n\t        yield\n\tdef fsdp_wrap(module, min_num_params: Optional[int] = None, **kwargs):\n\t    \"\"\"\n\t    Helper to wrap layers/modules in FSDP. This falls back to a no-op if\n", "    fairscale is not available.\n\t    Args:\n\t        module (nn.Module): module to (maybe) wrap\n\t        min_num_params (int, Optional): minimum number of layer params to wrap\n\t    \"\"\"\n\t    try:\n\t        from fairscale.nn import wrap\n\t        if min_num_params is not None:\n\t            num_params = sum(p.numel() for p in module.parameters())\n\t            if num_params >= min_num_params:\n", "                return wrap(module, **kwargs)\n\t            else:\n\t                return module\n\t        else:\n\t            return wrap(module, **kwargs)\n\t    except ImportError:\n\t        return module\n"]}
{"filename": "xlmr/src/loss/cmlm_loss.py", "chunked_list": ["# Copyright (c) Facebook, Inc. and its affiliates.\n\t#\n\t# This source code is licensed under the MIT license found in the\n\t# LICENSE file in the root directory of this source tree.\n\timport math\n\tfrom dataclasses import dataclass, field\n\timport torch\n\tfrom fairseq import metrics, utils\n\tfrom fairseq.criterions import FairseqCriterion, register_criterion\n\tfrom fairseq.dataclass import FairseqDataclass\n", "import torch.nn.functional as F\n\tfrom fairseq.utils import new_arange\n\tfrom fairscale.nn.model_parallel.cross_entropy import vocab_parallel_cross_entropy\n\t@register_criterion(\"cmlm_loss\")\n\tclass CMLMLabelSmoothedCrossEntropyCriterion(FairseqCriterion):\n\t    def __init__(\n\t        self,\n\t        task,\n\t    ):\n\t        super().__init__(task)\n", "        self.eps = 0.1\n\t        self.pad = task.tgt_dict.pad()\n\t        self.bos = task.tgt_dict.bos()\n\t        self.eos = task.tgt_dict.eos()\n\t        self.unk = task.tgt_dict.unk()\n\t        self.mask = task.tgt_dict.index('<mask>')\n\t    def _random_mask(self, target_tokens):\n\t        target_masks = (\n\t            target_tokens.ne(self.pad) & target_tokens.ne(self.bos) & target_tokens.ne(self.eos)\n\t        )\n", "        target_score = target_tokens.clone().float().uniform_()\n\t        target_score.masked_fill_(~target_masks, 2.0)\n\t        target_length = target_masks.sum(1).float()\n\t        target_length = target_length * target_length.clone().uniform_()\n\t        target_length = target_length + 1  # make sure to mask at least one token.\n\t        _, target_rank = target_score.sort(1)\n\t        target_cutoff = new_arange(target_rank) < target_length[:, None].long()\n\t        prev_target_tokens = target_tokens.masked_fill(\n\t            target_cutoff.scatter(1, target_rank, target_cutoff), self.mask\n\t        )\n", "        return prev_target_tokens\n\t    def forward(self, model, sample, reduce=True):\n\t        source = sample[\"net_input\"][\"src_tokens\"]\n\t        target = sample[\"target\"]\n\t        target_mask = self._random_mask(target)\n\t        mask = (target != target_mask)\n\t        output, length_out, length_tgt = model(source, target_mask)\n\t        loss, nll_loss = self.label_smooth_loss(output[mask], target[mask])\n\t        # print(length_out.size(), length_tgt)\n\t        # length_loss = self.length_loss(length_out, length_tgt)\n", "        # loss += 0.1 * length_loss\n\t        sample_size = 1\n\t        logging_output = {\n\t            \"loss\": loss.data,\n\t            \"nll_loss\": nll_loss.data,\n\t            \"ntokens\": sample[\"ntokens\"],\n\t            \"nsentences\": sample[\"target\"].size(0),\n\t            \"sample_size\": sample_size,\n\t        }\n\t        return loss, sample_size, logging_output\n", "    def label_smooth_loss(self, net_out, net_target):\n\t        net_logits = F.log_softmax(net_out, dim=-1)\n\t        nll_loss = F.nll_loss(net_logits, net_target, reduction=\"none\").float().mean()\n\t        loss = nll_loss * (1. - self.eps) - net_logits.float().mean() * self.eps\n\t        return loss, nll_loss\n\t    def length_loss(self, length_out, length_tgt):\n\t        length_logits = F.log_softmax(length_out, dim=-1)\n\t        length_loss = F.nll_loss(length_logits, length_tgt, reduction=\"none\").float().mean()\n\t        return length_loss\n\t    @classmethod\n", "    def reduce_metrics(cls, logging_outputs) -> None:\n\t        \"\"\"Aggregate logging outputs from data parallel training.\"\"\"\n\t        loss_sum = sum(log.get(\"loss\", 0) for log in logging_outputs)\n\t        nll_loss_sum = sum(log.get(\"nll_loss\", 0) for log in logging_outputs)\n\t        ntokens = sum(log.get(\"ntokens\", 0) for log in logging_outputs)\n\t        sample_size = sum(log.get(\"sample_size\", 0) for log in logging_outputs)\n\t        metrics.log_scalar(\n\t            \"loss\", loss_sum / sample_size / math.log(2), sample_size, round=3\n\t        )\n\t        metrics.log_scalar(\n", "            \"nll_loss\", nll_loss_sum / sample_size / math.log(2), sample_size, round=3\n\t        )\n\t        metrics.log_derived(\n\t            \"ppl\", lambda meters: utils.get_perplexity(meters[\"loss\"].avg)\n\t        )\n\t    @staticmethod\n\t    def logging_outputs_can_be_summed() -> bool:\n\t        \"\"\"\n\t        Whether the logging outputs returned by `forward` can be summed\n\t        across workers prior to calling `reduce_metrics`. Setting this\n", "        to True will improves distributed training speed.\n\t        \"\"\"\n\t        return True\n"]}
