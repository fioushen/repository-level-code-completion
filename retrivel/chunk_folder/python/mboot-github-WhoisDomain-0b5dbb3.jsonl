{"filename": "test3.py", "chunked_list": ["#! /usr/bin/env python3\n\tfrom whoisdomain.main import main\n\tmain()\n"]}
{"filename": "test2.py", "chunked_list": ["#! /usr/bin/env python3\n\tfrom whoisdomain.main import main\n\tmain()\n"]}
{"filename": "whoisdomain/tld_regexpr.py", "chunked_list": ["from typing import (\n\t    Dict,\n\t    Any,\n\t)\n\t# interesting:\n\t# https://github.com/rfc1036/whois/blob/next/tld_serv_list\n\t# https://github.com/rfc1036/whois/blob/next/new_gtlds_list\n\t# seems the most up to date and maintained\n\tZZ: Dict[str, Any] = {}\n\t# elements starting with _\n", "# are meta patterns and are not processed as domains\n\t# examples:  _donuts, _centralnic\n\t# elements ending in _\n\t# like id_ , is_, if_, in_, global_ are conflicting words in python without a trailing _\n\t# and auto replaced with a non conflicting word by adding a _ at the end\n\t# NOTE: many registrars use \\r and some even have whitespace after the entry\n\t# Some items can be multiple: status, emails, name_servers\n\t# the remaining are always singular\n\t# when we finally apply the regexes we use IGNORE CASE allways on all matches\n\t# Commercial TLD - Original Big 7\n", "ZZ[\"com\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name\\s*:\\s*(.+)\",\n\t    \"registrar\": r\"Registrar:\\s?(.+)\",\n\t    \"registrant\": r\"Registrant\\s*Organi(?:s|z)ation:([^\\n]*)\",  # this seems to match Registrant Street: if Registrant Organization: is empty\n\t    \"registrant_country\": r\"Registrant Country:\\s?(.+)\",\n\t    \"creation_date\": r\"Creation Date:[ \\t]*([^\\n]*)\",\n\t    \"expiration_date\": r\"(?:Expiry|Expiration) Date:[ \\t]*([^\\n]*)\",  # Expiration Date\n\t    \"updated_date\": r\"Updated Date:[\\t ]*([^\\n]*)\",\n\t    \"name_servers\": r\"Name Server:\\s*(.+)\\s*\",  # host -t ns <domain> often has more nameservers then the output of whois\n", "    \"status\": r\"Status:\\s?(.+)\",\n\t    # the trailing domain must have minimal 2 parts firstname.lastname@fld.tld\n\t    # it may actually have more then 4 levels\n\t    # to match the dot in firstname.lastname we must use \\.\n\t    \"emails\": r\"([\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4})\",\n\t}\n\t# United Kingdom - academic sub-domain\n\tZZ[\"ac.uk\"] = {\n\t    \"extend\": \"uk\",\n\t    \"domain_name\": r\"Domain:\\n\\s?(.+)\",\n", "    \"owner\": r\"Domain Owner:\\n\\s?(.+)\",\n\t    \"registrar\": r\"Registered By:\\n\\s?(.+)\",\n\t    \"registrant\": r\"Registered Contact:\\n\\s*(.+)\",\n\t    \"expiration_date\": r\"Renewal date:\\n\\s*(.+)\",\n\t    \"updated_date\": r\"Entry updated:\\n\\s*(.+)\",\n\t    \"creation_date\": r\"Entry created:\\n\\s?(.+)\",\n\t    \"name_servers\": r\"Servers:\\s*(.+)\\t\\n\\s*(.+)\\t\\n\",\n\t}\n\tZZ[\"co.uk\"] = {\n\t    \"extend\": \"uk\",\n", "    \"domain_name\": r\"Domain name:\\s+(.+)\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"name_servers\": r\"Name servers:(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?\\n\\n\",  # capture up to 4\n\t    \"status\": r\"Registration status:\\s*(.+)\",\n\t    \"creation_date\": r\"Registered on:(.+)\",\n\t    \"expiration_date\": r\"Expiry date:(.+)\",\n\t    \"updated_date\": r\"Last updated:(.+)\",\n\t    \"owner\": r\"Domain Owner:\\s+(.+)\",\n\t    \"registrant\": r\"Registrant:\\n\\s+(.+)\",  # example meta.co.uk has a registrar google.co.uk has not\n\t}\n", "ZZ[\"org.uk\"] = {\"extend\": \"co.uk\"}\n\tZZ[\"gov.uk\"] = {\"extend\": \"ac.uk\"}\n\t# United Arab Emirates\n\t# ae = {    \"extend\": \"ar\"}\n\t# redefined below\n\t# Anguilla\n\tZZ[\"ai\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.ai\",\n\t}\n", "# Armenia\n\tZZ[\"am\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain name:\\s+(.+)\",\n\t    \"status\": r\"Status:\\s(.+)\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"registrant\": r\"Registrant:\\s+(.+)\",\n\t    \"registrant_country\": r\"Registrant:\\n.+\\n.+\\n.+\\n\\s+(.+)\",\n\t    \"creation_date\": r\"Registered:\\s+(.+)\",\n\t    \"expiration_date\": r\"Expires:\\s+(.+)\",\n", "    \"updated_date\": r\"Last modified:\\s+(.+)\",\n\t    \"name_servers\": r\"DNS servers.*:\\n(?:\\s+(\\S+)\\n)(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)\\n?\",\n\t}\n\t# Amsterdam\n\tZZ[\"amsterdam\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n", "    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\tZZ[\"app\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.google\",\n\t}\n\t# Argentina\n\tZZ[\"ar\"] = {\n\t    \"extend\": \"com\",\n", "    \"domain_name\": r\"domain\\s*:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"creation_date\": r\"registered:\\s?(.+)\",\n\t    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"changed\\s*:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t}\n\tZZ[\"asia\"] = {\n\t    \"extend\": \"com\",\n\t}\n", "# Austria\n\tZZ[\"at\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.at\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"updated_date\": r\"changed:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t}\n", "# Australia\n\tZZ[\"au\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrar\": r\"Registrar Name:\\s?(.+)\",\n\t    \"updated_date\": r\"Last Modified:([^\\n]*)\",  # fix empty LastModified\n\t}\n\tZZ[\"ax\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain\\.+:\\s*(\\S+)\",\n\t    \"registrar\": r\"registrar\\.+:\\s*(.+)\",\n", "    \"creation_date\": r\"created\\.+:\\s*(\\S+)\",\n\t    \"expiration_date\": r\"expires\\.+:\\s*(\\S+)\",\n\t    \"updated_date\": r\"modified\\.+:\\s?(\\S+)\",\n\t    \"name_servers\": r\"nserver\\.+:\\s*(\\S+)\",  # host -t ns gives back more then output of whois\n\t    \"status\": r\"status\\.+:\\s*(\\S+)\",\n\t    \"registrant\": r\"Holder\\s+name\\.+:\\s*(.+)\\r?\\n\",  # not always present see meta.ax and google.ax\n\t    \"registrant_country\": r\"country\\.+:\\s*(.+)\\r?\\n\",  # not always present see meta.ax and google.ax\n\t}\n\tZZ[\"aw\"] = {\n\t    \"extend\": \"nl\",\n", "    \"name_servers\": r\"Domain nameservers:\\s+(\\S+)[ \\t]*\\r?\\n(?:\\s+(\\S+))?\",\n\t}\n\t# Banking TLD - ICANN\n\tZZ[\"bank\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n", "}\n\tZZ[\"be\"] = {\n\t    \"extend\": \"pl\",\n\t    \"domain_name\": r\"\\nDomain:\\s*(.+)\",\n\t    \"registrar\": r\"Company Name:\\n?(.+)\",\n\t    \"creation_date\": r\"Registered:\\s*(.+)\\n\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    \"name_servers\": r\"Nameservers:(?:\\n[ \\t]+(\\S+))?(?:\\n[ \\t]+(\\S+))?(?:\\n[ \\t]+(\\S+))?(?:\\n[ \\t]+(\\S+))?\\n\\n\",  # fix missing and wrong output\n\t}\n\tZZ[\"biz\"] = {\n", "    \"extend\": \"com\",\n\t    \"registrar\": r\"Registrar:\\s?(.+)\",\n\t    \"registrant\": r\"Registrant Organization:\\s?(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": None,\n\t}\n\tZZ[\"br\"] = {\n\t    \"extend\": \"com\",\n", "    \"_server\": \"whois.registro.br\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": \"nic.br\",\n\t    \"registrant\": None,\n\t    \"owner\": r\"owner:\\s?(.+)\",\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"expires:\\s?(.+)\",\n\t    \"updated_date\": r\"changed:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"status:\\s?(.+)\",\n", "}\n\tZZ[\"by\"] = {  # fix multiple dns by removing test for \\n at the beginning as it is not needed\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s*(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"registrant\": r\"Org:\\s*(.+)\",\n\t    \"registrant_country\": r\"Country:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s*(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s*(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s*(.+)\",\n", "    \"name_servers\": r\"Name Server:\\s+(\\S+)\\n\",\n\t}\n\t# Brittany (French Territory)\n\t# Some personal data could be obfuscated at request from the registrant\n\tZZ[\"bzh\"] = {\n\t    \"extend\": \"fr\",\n\t    \"domain_name\": r\"Domain Name:\\s*(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"registrant\": r\"Registrant Organization:\\s*(.+)\",\n\t    \"registrant_country\": r\"Registrant Country:\\s*(.*)\",\n", "    \"creation_date\": r\"Creation Date:\\s*(.*)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s*(.*)\",\n\t    \"updated_date\": r\"Updated Date:\\s*(.*)\",\n\t    \"name_servers\": r\"Name Server:\\s*(.*)\",\n\t    \"status\": r\"Domain Status:\\s*(.*)\",\n\t}\n\tZZ[\"ca\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"cat\"] = {\n", "    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.cat\",\n\t}\n\tZZ[\"cc\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n", "    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"cl\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrar\": \"nic.cl\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s*(.+)\\s*\",\n\t}\n\tZZ[\"click\"] = {\n", "    \"extend\": \"com\",\n\t}\n\tZZ[\"cloud\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"club\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"cn\"] = {\n\t    \"extend\": \"com\",\n", "    \"registrar\": r\"Sponsoring Registrar:\\s?(.+)\",\n\t    \"registrant\": r\"Registrant:\\s?(.+)\",\n\t    \"creation_date\": r\"Registration Time:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Time:\\s?(.+)\",\n\t}\n\tZZ[\"com.cn\"] = {\n\t    \"extend\": \"cn\",\n\t}\n\tZZ[\"co\"] = {\n\t    \"extend\": \"biz\",\n", "    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"com.au\"] = {\n\t    \"extend\": \"au\",\n\t}\n\tZZ[\"tr\"] = {\"extend\": \"_privateReg\"}  # whois.nic.tr is an alias for whois.trabis.gov.tr.\n\tZZ[\"com.tr\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"\\*\\* Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Organization Name\\s+:\\s?(.+)\",\n", "    \"registrant\": r\"\\*\\* Registrant:\\s+?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"Created on\\.+:\\s?(.+).\",\n\t    \"expiration_date\": r\"Expires on\\.+:\\s?(.+).\",  # note the trailing . on both dates fields\n\t    \"updated_date\": \"\",\n\t    \"name_servers\": r\"\\*\\* Domain Servers:\\n(?:(\\S+).*\\n)?(?:(\\S+).*\\n)?(?:(\\S+).*\\n)?(?:(\\S+).*\\n)?\",  # allow for ip addresses after the name server\n\t    \"status\": None,\n\t    \"_server\": \"whois.trabis.gov.tr\",\n\t    \"_test\": \"google.com.tr\",\n\t}\n", "ZZ[\"gov.tr\"] = {\n\t    \"extend\": \"com.tr\",\n\t    \"_server\": \"whois.trabis.gov.tr\",\n\t    \"_test\": \"www.turkiye.gov.tr\",\n\t}\n\tZZ[\"edu.tr\"] = {\"extend\": \"com.tr\", \"_server\": \"whois.trabis.gov.tr\", \"_test\": \"anadolu.edu.tr\"}\n\tZZ[\"org.tr\"] = {\"extend\": \"com.tr\", \"_server\": \"whois.trabis.gov.tr\", \"_test\": \"dergipark.org.tr\"}\n\tZZ[\"net.tr\"] = {\"extend\": \"com.tr\", \"_server\": \"whois.trabis.gov.tr\", \"_test\": \"trt.net.tr\"}\n\tZZ[\"co.il\"] = {\n\t    \"extend\": \"com\",\n", "    \"domain_name\": r\"domain:\\s*(.+)\",\n\t    \"registrar\": r\"registrar name:\\s*(.+)\",\n\t    \"registrant\": None,\n\t    \"registrant_country\": None,\n\t    \"creation_date\": None,\n\t    \"expiration_date\": r\"validity:\\s*(.+)\",\n\t    \"updated_date\": None,\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"status:\\s*(.+)\",\n\t}\n", "ZZ[\"co.jp\"] = {  # is redefined later with english\n\t    \"extend\": \"jp\",\n\t    \"domain_name\": r\"\\[ドメイン名\\]\\s?(.+)\",\n\t    \"creation_date\": r\"\\[登録年月\\]\\s?(.+)\",\n\t    \"expiration_date\": r\"\\[状態\\].+\\((.+)\\)\",\n\t    \"updated_date\": r\"\\[最終更新\\]\\s?(.+)\",\n\t}\n\tZZ[\"courses\"] = {\"extend\": \"com\"}\n\tZZ[\"cr\"] = {\"extend\": \"cz\"}\n\tZZ[\"cz\"] = {\n", "    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"registered:\\s?(.+)\",\n\t    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"changed:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s+(\\S+)\",\n\t    \"status\": r\"status:\\s*(.+)\",\n", "}\n\t# The .de NIC whois servers no longer provide any PII data for domains in the TLD.\n\t# To obtains \"personal\" data, one must use the web interface: http://www.denic.de/en/domains/whois-service/web-whois.html\n\tZZ[\"de\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"\\ndomain:\\s*(.+)\",\n\t    \"updated_date\": r\"\\nChanged:\\s?(.+)\",\n\t    \"name_servers\": r\"Nserver:\\s*(.+)\",\n\t}\n\t# Developer\n", "ZZ[\"dev\"] = {\"extend\": \"com\"}\n\t# Denmark\n\tZZ[\"dk\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain:\\s?(.+)\",\n\t    \"registrar\": None,\n\t    \"registrant\": r\"Registrant\\s*Handle:\\s*\\w*\\s*Name:\\s?(.+)\",\n\t    \"registrant_country\": r\"Country:\\s?(.+)\",\n\t    \"creation_date\": r\"Registered:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expires:\\s?(.+)\",\n", "    \"updated_date\": None,\n\t    \"name_servers\": r\"Hostname:\\s*(.+)\\s*\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    \"emails\": None,\n\t}\n\tZZ[\"download\"] = {\n\t    \"extend\": \"amsterdam\",\n\t    \"name_servers\": r\"Name Server:[ \\t]+(\\S+)\",  # fix needed after strip(\\r) in _2_parse.py in version 0.19\n\t    \"status\": r\"Domain Status:\\s*([a-zA-z]+)\",\n\t}\n", "ZZ[\"edu\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrant\": r\"Registrant:\\s*(.+)\",\n\t    \"creation_date\": r\"Domain record activated:\\s?(.+)\",\n\t    \"updated_date\": r\"Domain record last updated:\\s?(.+)\",\n\t    \"expiration_date\": r\"Domain expires:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Servers:\\s?(?:\\t(.+)\\n)(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?(?:\\t(.+)\\n)?\",\n\t}\n\t# estonian\n\tZZ[\"ee\"] = {\n", "    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain:\\nname:\\s+(.+\\.ee)\\n\",\n\t    \"registrar\": r\"Registrar:\\nname:\\s+(.+)\\n\",\n\t    \"registrant\": r\"Registrant:\\nname:\\s+(.+)\\n\",\n\t    \"registrant_country\": r\"Registrant:(?:\\n+.+\\n*)*country:\\s+(.+)\\n\",\n\t    \"creation_date\": r\"Domain:(?:\\n+.+\\n*)*registered:\\s+(.+)\\n\",\n\t    \"expiration_date\": r\"Domain:(?:\\n+.+\\n*)*expire:\\s+(.+)\\n\",\n\t    \"updated_date\": r\"Domain:(?:\\n+.+\\n*)*changed:\\s+(.+)\\n\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"Domain:(?:\\n+.+\\n*)*status:\\s+(.+)\\n\",\n", "    # \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"eu\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.eu\",\n\t    \"registrar\": r\"Name:\\s?(.+)\",\n\t    \"domain_name\": r\"\\nDomain:\\s*(.+)\",\n\t    \"name_servers\": r\"Name servers:\\n(?:\\s+(\\S+)\\n)(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)?(?:\\s+(\\S+)\\n)\\n?\",\n\t}\n\tZZ[\"fi\"] = {\n", "    \"extend\": None,\n\t    \"domain_name\": r\"domain\\.+:\\s?(.+)\",\n\t    \"registrar\": r\"registrar\\.+:\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"created\\.+:\\s?(.+)\",\n\t    \"expiration_date\": r\"expires\\.+:\\s?(.+)\",\n\t    \"updated_date\": r\"modified\\.+:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver\\.+:\\s*(.+)\",\n\t    \"status\": r\"status\\.+:\\s?(.+)\",\n\t}\n", "ZZ[\"fit\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"fm\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"fo\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrant\": None,\n\t}\n", "ZZ[\"fr\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s*(.+)\",\n\t    \"registrant\": r\"contact:\\s?(.+)\",\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"last-update:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"status:\\s?(.+)\",\n", "}\n\tZZ[\"game\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"global\"] = {\n\t    \"extend\": \"amsterdam\",\n\t    \"name_servers\": r\"Name Server: (.+)\",\n\t}\n\t# Honduras\n\tZZ[\"hn\"] = {\n", "    \"extend\": \"com\",\n\t}\n\t# Hong Kong\n\tZZ[\"hk\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.hkirc.hk\",\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"registrar\": r\"Registrar Name:\\s?(.+)\",\n\t    \"registrant\": r\"Company English Name.*:\\s?(.+)\",\n\t    \"registrant_country\": None,\n", "    \"creation_date\": r\"Domain Name Commencement Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": None,\n\t    #  name servers have trailing whitespace, lines are \\n only\n\t    \"name_servers\": r\"Name Servers Information:\\s*(?:(\\S+)[ \\t]*\\n)(?:(\\S+)[ \\t]*\\n)?(?:(\\S+)[ \\t]*\\n)?(?:(\\S+)[ \\t]*\\n)?\",\n\t    \"status\": None,\n\t}\n\tZZ[\"id\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrar\": r\"Sponsoring Registrar Organization:\\s?(.+)\",\n", "    \"creation_date\": r\"Created On:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Last Updated On:\\s?(.+)$\",\n\t}\n\t# Ireland\n\tZZ[\"ie\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"im\"] = {\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n", "    \"status\": None,\n\t    \"registrar\": None,\n\t    \"registrant_country\": None,\n\t    \"creation_date\": \"\",\n\t    \"expiration_date\": r\"Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": \"\",\n\t    \"name_servers\": r\"Name Server:(.+)\",\n\t}\n\tZZ[\"in\"] = {\"extend\": \"com\", \"_server\": \"whois.registry.in\"}\n\tZZ[\"info\"] = {\n", "    \"extend\": \"com\",\n\t}\n\tZZ[\"ink\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"io\"] = {\n\t    \"extend\": \"com\",\n\t    \"expiration_date\": r\"\\nRegistry Expiry Date:\\s?(.+)\",\n\t}\n\tZZ[\"ir\"] = {\n", "    \"extend\": None,\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": \"nic.ir\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": None,\n\t    \"status\": None,\n\t    \"expiration_date\": r\"expire-date:\\s?(.+)\",\n\t    \"updated_date\": r\"last-updated:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t}\n", "ZZ[\"is\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": None,\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"expires:\\s?(.+)\",\n\t    \"updated_date\": None,\n\t    \"name_servers\": r\"nserver:\\s?(.+)\",\n", "    \"status\": None,\n\t    # \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"it\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar\\s*Organization:\\s*(.+)\",\n\t    \"registrant\": r\"Registrant\\s*Organization:\\s*(.+)\",\n\t    \"creation_date\": r\"Created:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expire Date:\\s?(.+)\",\n", "    \"updated_date\": r\"Last Update:\\s?(.+)\",\n\t    # \"name_servers\": r\"Nameservers\\s?(.+)\\s?(.+)\\s?(.+)\\s?(.+)\",\n\t    \"name_servers\": r\"Nameservers(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\t# The Japanese whois servers always return English unless a Japanese locale is specified in the user's LANG environmental variable.\n\t# See: https://www.computerhope.com/unix/uwhois.htm\n\t# Additionally, whois qeuries can explicitly request english:\n\t# \tTo suppress Japanese output, add'/e' at the end of command, e.g. 'whois -h whois.jprs.jp xxx/e'.\n\t#\n", "ZZ[\"jp\"] = {\n\t    \"domain_name\": r\"\\[Domain Name\\]\\s?(.+)\",\n\t    #    'registrar':                None,\n\t    \"registrar\": r\"\\[ (.+) database provides information on network administration. Its use is    \\]\",\n\t    \"registrant\": r\"\\[Registrant\\]\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    #    'creation_date':            r'\\[登録年月日\\]\\s?(.+)',\n\t    #    'expiration_date':          r'\\[有効期限\\]\\s?(.+)',\n\t    #    'updated_date':             r'\\[最終更新\\]\\s?(.+)',\n\t    \"creation_date\": r\"\\[Created on\\]\\s?(.+)\",\n", "    \"expiration_date\": r\"\\[Expires on\\]\\s?(.+)\",\n\t    \"updated_date\": r\"\\[Last Updated\\]\\s?(.+)\",\n\t    \"name_servers\": r\"\\[Name Server\\]\\s*(.+)\",\n\t    #    'status':                   r'\\[状態\\]\\s?(.+)',\n\t    \"status\": r\"\\[Status\\]\\s?(.+)\",\n\t    \"emails\": r\"([\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4})\",\n\t}\n\t# The Japanese whois servers always return English unless a Japanese locale is specified in the user's LANG environmental variable.\n\t# See: https://www.computerhope.com/unix/uwhois.htm\n\t# Additionally, whois qeuries can explicitly request english:\n", "# \tTo suppress Japanese output, add'/e' at the end of command, e.g. 'whois -h whois.jprs.jp xxx/e'.\n\t#\n\tZZ[\"co.jp\"] = {\n\t    \"extend\": \"jp\",\n\t    #    'domain_name':              r'\\[ドメイン名\\]\\s?(.+)',\n\t    \"domain_name\": r\"\\[Domain Name\\]\\s?(.+)\",\n\t    #    'creation_date':            r'\\[登録年月\\]\\s?(.+)',\n\t    #    'expiration_date':          r'\\[状態\\].+\\((.+)\\)',\n\t    #    'updated_date':             r'\\[最終更新\\]\\s?(.+)',\n\t    \"creation_date\": r\"\\[Registered Date\\]\\s?(.+)\",\n", "    \"expiration_date\": None,\n\t    \"updated_date\": r\"\\[Last Update\\]\\s?(.+)\",\n\t    \"status\": r\"\\[State\\]\\s?(.+)\",\n\t}\n\t# All Japanese Sub-TLDs. See: https://jprs.co.jp/en/jpdomain.html\n\tZZ[\"ne.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"or.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"go.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"ac.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"ad.jp\"] = {\"extend\": \"co.jp\"}\n", "ZZ[\"ed.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"gr.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"lg.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"geo.jp\"] = {\"extend\": \"co.jp\"}\n\tZZ[\"kiwi\"] = {\"extend\": \"com\"}\n\tZZ[\"kg\"] = {\n\t    \"domain_name\": r\"Domain\\s+(\\S+)\",\n\t    \"registrar\": r\"Billing\\sContact:\\n.*\\n\\s+Name:\\s(.+)\\n\",\n\t    \"registrant_country\": None,\n\t    \"expiration_date\": r\"Record expires on:\\s+(.+)\",\n", "    \"creation_date\": r\"Record created:\\s+(.+)\",\n\t    \"updated_date\": r\"Record last updated on:\\s+(.+)\",\n\t    # name servers have trailing whitespace\n\t    \"name_servers\": r\"Name servers in the listed order:\\n\\n(?:(\\S+)[ \\t]*\\S*\\n)(?:(\\S+)[ \\t]*\\S*\\n)?(?:(\\S+)[ \\t]*\\S*\\n)?\\n\",\n\t    # nameservers can have trailing ip (e.g. google.kg)\n\t    \"status\": r\"Domain\\s+\\S+\\s+\\((\\S+)\\)\",\n\t}\n\t# Saint Kitts and Nevis\n\tZZ[\"kn\"] = {\n\t    \"extend\": \"com\",\n", "}\n\tZZ[\"kr\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.kr\",\n\t    \"domain_name\": r\"Domain Name\\s*:\\s?(.+)\",\n\t    \"registrar\": r\"Authorized Agency\\s*:\\s*(.+)\",\n\t    \"registrant\": r\"Registrant\\s*:\\s*(.+)\",\n\t    \"creation_date\": r\"Registered Date\\s*:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date\\s*:\\s?(.+)\",\n\t    \"updated_date\": r\"Last Updated Date\\s*:\\s?(.+)\",\n", "    \"status\": r\"status\\s*:\\s?(.+)\",\n\t    \"name_servers\": r\"Host Name\\s+:\\s+(\\S+)\\n\",\n\t}\n\tZZ[\"kz\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain name\\.+:\\s(.+)\",\n\t    \"registrar\": r\"Current Registar:\\s(.+)\",\n\t    \"registrant_country\": r\"Country\\.+:\\s?(.+)\",\n\t    \"expiration_date\": None,\n\t    \"creation_date\": r\"Domain created:\\s(.+)\",\n", "    \"updated_date\": r\"Last modified :\\s(.+)\",\n\t    \"name_servers\": r\"ary server\\.+:\\s+(\\S+)\",\n\t    \"status\": r\"Domain status :(?:\\s+([^\\n]+)\\n)\",\n\t}\n\tZZ[\"link\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"lt\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain:\\s?(.+)\",\n", "    \"creation_date\": r\"Registered:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expires:\\s?(.+)\",\n\t    \"name_servers\": r\"Nameserver:\\s*(.+)\\s*\",\n\t    \"status\": r\"\\nStatus:\\s?(.+)\",\n\t}\n\tZZ[\"lv\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain:\\s*(.+)\",\n\t    \"creation_date\": r\"Registered:\\s*(.+)\\n\",  # actually there seem to be no dates\n\t    \"updated_date\": r\"Changed:\\s*(.+)\\n\",\n", "    \"expiration_date\": r\"paid-till:\\s*(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    \"_server\": \"whois.nic.lv\",\n\t}\n\tZZ[\"me\"] = {\n\t    # lines have \\r\n\t    \"extend\": \"biz\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s?(.+)\",\n", "    \"updated_date\": None,  # some entries have no date string but not always\n\t    \"name_servers\": r\"Name Server:\\s*(\\S+)\\r?\\n\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\tZZ[\"ml\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain name:\\s*([^(i|\\n)]+)\",\n\t    \"registrar\": r\"(?<=Owner contact:\\s)[\\s\\S]*?Organization:(.*)\",\n\t    \"registrant_country\": r\"(?<=Owner contact:\\s)[\\s\\S]*?Country:(.*)\",\n\t    \"registrant\": r\"(?<=Owner contact:\\s)[\\s\\S]*?Name:(.*)\",\n", "    \"creation_date\": r\"Domain registered: *(.+)\",\n\t    \"expiration_date\": r\"Record will expire on: *(.+)\",\n\t    \"name_servers\": r\"Domain Nameservers:\\s*(.+)\\n\\s*(.+)\\n\",\n\t    # \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"mobi\"] = {\n\t    \"extend\": \"com\",\n\t    \"expiration_date\": r\"\\nRegistry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"\\nUpdated Date:\\s?(.+)\",\n\t}\n", "ZZ[\"mx\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"creation_date\": r\"Created On:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Last Updated On:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s?(.+)\",\n\t    # \"registrant\": r\"Registrant:\\n\\s*(.+)\",\n\t    \"name_servers\": r\"\\sDNS:\\s*(.+)\",\n\t    \"registrant_country\": None,\n", "    \"status\": None,\n\t}\n\tZZ[\"name\"] = {\n\t    \"extend\": \"com\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\t# New-Caledonia (French Territory)\n\tZZ[\"nc\"] = {\n\t    \"extend\": \"fr\",\n\t    \"domain_name\": r\"Domain\\s*:\\s(.+)\",\n", "    \"registrar\": r\"Registrar\\s*:\\s(.+)\",\n\t    \"registrant\": r\"Registrant name\\s*:\\s(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"Created on\\s*:\\s(.*)\",\n\t    \"expiration_date\": r\"Expires on\\s*:\\s(.*)\",\n\t    \"updated_date\": r\"Last updated on\\s*:\\s(.*)\",\n\t    \"name_servers\": r\"Domain server [0-9]{1,}\\s*:\\s(.*)\",\n\t    \"status\": None,\n\t}\n\tZZ[\"net\"] = {\n", "    \"extend\": \"com\",\n\t}\n\tZZ[\"nl\"] = {\n\t    \"extend\": \"com\",\n\t    \"expiration_date\": None,\n\t    \"registrant_country\": None,\n\t    \"domain_name\": r\"Domain name:\\s?(.+)\",\n\t    \"name_servers\": (\n\t        r\"\"\"(?x:\n\t            Domain\\ nameservers:\\s+(\\S+)\\r?\\n # the first\n", "            (?:\\s+(\\S+)\\r?\\n)?  # a optional 2th\n\t            (?:\\s+(\\S+)\\r?\\n)?  # a optional 3th\n\t            (?:\\s+(\\S+)\\r?\\n)?  # a optional 4th\n\t            (?:\\s+(\\S+)\\r?\\n)?  # a optional 5th\n\t            # there may be more, best use host -t ns <domain> to get the actual nameservers\n\t        )\"\"\"\n\t    ),\n\t    # the format with [A] or [AAAA] is no longer in use\n\t    #    \"name_servers\": (\n\t    #        r\"\"\"(?x:\n", "    #            Domain\\ nameservers:[ \\t]*\\n\n\t    #            (?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n       # ns1.tld.nl [A?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns2.tld.nl [A?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns2.tld.nl [AAAA?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns3.tld.nl [A?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns3.tld.nl [AAAA?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns4.tld.nl [A?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns4.tld.nl [AAAA?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns5.tld.nl [A?]\n\t    #            (?:(?:[ \\t]+) (\\S+) (?:[ \\t]+\\S+)? \\n)?  # opt-ns5.tld.nl [AAAA?]\n", "    #            # Don't check for final LF; there might be even more records..\n\t    #        )\"\"\"\n\t    #    ),\n\t    \"reseller\": r\"Reseller:\\s?(.+)\",\n\t    \"abuse_contact\": r\"Abuse Contact:\\s?(.+)\",\n\t}\n\t# Norway\n\tZZ[\"no\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name\\.+:\\s?(.+)\",\n", "    \"registrar\": r\"Registrar Handle\\.+:\\s?(.+)\",\n\t    \"registrant\": None,\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"Created:\\s?(.+)\",\n\t    \"expiration_date\": None,\n\t    \"updated_date\": r\"Last Updated:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Server Handle\\.+:\\s*(.+)\\s*\",\n\t    \"status\": None,\n\t    \"emails\": None,\n\t}\n", "ZZ[\"nu\"] = {\n\t    \"extend\": \"se\",\n\t}\n\tZZ[\"nyc\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n", "    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"nz\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"domain_name:\\s?(.+)\",\n\t    \"registrar\": r\"registrar_name:\\s?(.+)\",\n\t    \"registrant\": r\"registrant_contact_name:\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"domain_dateregistered:\\s?(.+)\",\n\t    \"expiration_date\": r\"domain_datebilleduntil:\\s?(.+)\",\n", "    \"updated_date\": r\"domain_datelastmodified:\\s?(.+)\",\n\t    \"name_servers\": r\"ns_name_[0-9]{2}:\\s?(.+)\",\n\t    \"status\": r\"query_status:\\s?(.+)\",\n\t    \"emails\": r\"([\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4})\",\n\t}\n\tZZ[\"org\"] = {\n\t    \"extend\": \"com\",\n\t    \"expiration_date\": r\"\\nRegistry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"\\nLast Updated On:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s?(.+)\\s*\",\n", "}\n\tZZ[\"ovh\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.ovh\"}\n\tZZ[\"pe\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrant\": r\"Registrant Name:\\s?(.+)\",\n\t    \"admin\": r\"Admin Name:\\s?(.+)\",\n\t}\n\tZZ[\"pharmacy\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n", "    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"status:\\s?(.+)\",\n\t}\n\tZZ[\"pl\"] = {\n\t    # pl has lines ending in multiple line feeds \\r and trailing whitespace\n\t    \"extend\": \"uk\",\n\t    \"registrar\": r\"\\nREGISTRAR:\\s*(.+)\\n\",\n", "    \"creation_date\": r\"\\ncreated:\\s*(.+)\\n\",\n\t    \"updated_date\": r\"\\nlast modified:\\s*(.+)\\n\",\n\t    \"expiration_date\": r\"\\noption expiration date:\\s*(.+)\\n\",\n\t    # ns: match up to 4\n\t    \"name_servers\": r\"nameservers:(?:\\s+(\\S+)[^\\n]*\\n)(?:\\s+(\\S+)[^\\n]*\\n)?(?:\\s+(\\S+)[^\\n]*\\n)?(?:\\s+(\\S+)[^\\n]*\\n)?\",\n\t    \"status\": r\"\\nStatus:\\n\\s*(.+)\",\n\t}\n\tZZ[\"pro\"] = {\n\t    \"extend\": \"com\",\n\t}\n", "ZZ[\"pt\"] = {\n\t    # mboot 2022-11-16\n\t    # from aws frankfurt all ok, looks like network limitations\n\t    # actually it sometimes works, most of the time though we get: connect: Network is unreachable\n\t    # looks like this is now a privateRegistry mboot: 2022-06-10,\n\t    # manual lookup: use the website at whois.dns.pt\n\t    \"_server\": \"whois.dns.pt\",\n\t    # \"_privateRegistry\": True,\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain:\\s?(.+)\",\n", "    \"registrar\": None,\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"updated_date\": None,\n\t    # nameservers have trailing info: Name Server: ns1.dnscpanel.com | IPv4:  and IPv6:\n\t    \"name_servers\": r\"Name Server:(?:\\s*(\\S+)[^\\n]*\\n)(?:\\s*(\\S+)[^\\n]*\\n)?\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\tZZ[\"pw\"] = {\n\t    \"extend\": \"com\",\n", "    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"radio\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.radio\",\n", "}\n\tZZ[\"red\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"ru\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"domain:\\s*(.+)\",\n\t    \"creation_date\": r\"created:\\s*(.+)\",\n\t    \"expiration_date\": r\"paid-till:\\s*(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n", "    \"status\": r\"state:\\s*(.+)\",\n\t    \"_server\": \"whois.tcinet.ru\",\n\t}\n\tZZ[\"com.ru\"] = {\"extend\": \"ru\", \"_server\": \"whois.nic.ru\"}  # test: mining.com.ru\n\t# Russian city sub-domains\n\tZZ[\"msk.ru\"] = {\"extend\": \"com.ru\"}  # test with: mining.msk.ru\n\tZZ[\"spb.ru\"] = {\"extend\": \"com.ru\"}  # test with iac.spb.ru\n\t# Rossíyskaya Federátsiya) is the Cyrillic country code top-level domain for the Russian Federation,\n\t# In the Domain Name System it has the ASCII DNS name xn--p1ai.\n\tZZ[\"ru.rf\"] = {\"extend\": \"ru\"}\n", "ZZ[\"рф\"] = {\"extend\": \"ru\"}\n\tZZ[\"xn--p1ai\"] = {\"extend\": \"ru\"}\n\tZZ[\"sa\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s*(.+\\.sa)\\s\",\n\t    \"registrant\": r\"Registrant:\\n*(.+)\\n\",\n\t    \"name_servers\": r\"Name Servers:\\s*(.+)\\s*(.+)?\",\n\t    \"registrant_country\": None,\n\t    \"registrar\": None,\n\t    \"creation_date\": None,\n", "    \"expiration_date\": None,\n\t    \"updated_date\": None,\n\t    \"status\": None,\n\t    \"emails\": None,\n\t}\n\tZZ[\"sh\"] = {\n\t    \"extend\": \"com\",\n\t    \"registrant\": r\"\\nRegistrant Organization:\\s?(.+)\",\n\t    \"expiration_date\": r\"\\nRegistry Expiry Date:\\s*(.+)\",\n\t    \"status\": r\"\\nDomain Status:\\s?(.+)\",\n", "}\n\tZZ[\"shop\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"se\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"created:\\s+(\\d{4}-\\d{2}-\\d{2})\",\n", "    \"expiration_date\": r\"expires:\\s+(\\d{4}-\\d{2}-\\d{2})\",\n\t    \"updated_date\": r\"modified:\\s+(\\d{4}-\\d{2}-\\d{2})\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\",\n\t    \"status\": r\"status:\\s?(.+)\",\n\t}\n\t# Singapore - Commercial sub-domain\n\tZZ[\"com.sg\"] = {\n\t    # uses \\r nameservers have trailing whitespace\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n", "    \"registrar\": r\"Registrar:\\s?(.+)\",\n\t    \"registrant\": r\"Registrant:\\r?\\n\\r?\\n\\s*Name:\\s*(.+)\\r?\\n\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Modified Date:\\s?(.+)\",\n\t    # fix needed after strip(\\r) in _2_parse.py in version 0.19\n\t    # \"name_servers\": r\"Name Servers:\\r\\n(?:\\s*(\\S+)[ \\t\\r]*\\n)(?:\\s*(\\S+)[ \\t\\r]*\\n)?(?:\\s*(\\S+)[ \\t\\r]*\\n)?\",\n\t    \"name_servers\": r\"Name Servers:(?:\\s+(\\S+))(?:\\s+(\\S+))?(?:\\s+(\\S+))?(?:\\s+([\\.\\w]+)\\s+)?\",\n\t    # this seems ok for 2 and 3 ns and does not catch the dnssec: line\n", "    \"status\": r\"Domain Status:\\s*(.*)\\r?\\n\",\n\t    # \"emails\": r\"(\\S+@\\S+)\",\n\t    \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\t# Slovakia\n\tZZ[\"sk\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain:\\s?(.+)\",\n\t    \"creation_date\": r\"Created:\\s?(.+)\",\n\t    \"expiration_date\": r\"Valid Until:\\s?(.+)\",\n", "    \"updated_date\": r\"Updated:\\s?(.+)\",\n\t    \"name_servers\": r\"Nameserver:\\s*(\\S+)\",  # fix needed after strip(\\r) in _2_parse.py in version 0.19\n\t    \"registrant\": r\"Contact:\\s?(.+)\",\n\t    \"registrant_country\": r\"Country Code:\\s?(.+)\\nRegistrar:\",\n\t}\n\tZZ[\"study\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"tel\"] = {\n\t    \"extend\": \"com\",\n", "    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"\\nRegistry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\t# Thailand - Commercial sub-domain\n\tZZ[\"co.th\"] = {\n\t    \"_server\": \"whois.thnic.co.th\",\n", "    \"extend\": \"com\",\n\t    \"registrant\": r\"Domain Holder Organization:\\s?(.+)\",\n\t    \"registrant_country\": r\"Domain Holder Country:\\s?(.+)\",\n\t    \"creation_date\": r\"Created date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Exp date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated date:\\s?(.+)\",\n\t}\n\tZZ[\"go.th\"] = {\n\t    \"extend\": \"co.th\",\n\t}\n", "ZZ[\"in.th\"] = {\n\t    \"extend\": \"co.th\",\n\t}\n\tZZ[\"ac.th\"] = {\n\t    \"extend\": \"co.th\",\n\t}\n\tZZ[\"tn\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain name\\.+:(.+)\\s*\",\n\t    \"registrar\": r\"Registrar\\.+:(.+)\\s*\",\n", "    \"registrant\": r\"Owner Contact\\n+Name\\.+:\\s?(.+)\",\n\t    \"registrant_country\": r\"Owner Contact\\n(?:.+\\n)+Country\\.+:\\s(.+)\",\n\t    \"creation_date\": r\"Creation date\\.+:\\s?(.+)\",\n\t    \"expiration_date\": None,\n\t    \"updated_date\": None,\n\t    \"name_servers\": r\"DNS servers\\n(?:Name\\.+:\\s*(\\S+)\\n)(?:Name\\.+:\\s*(\\S+)\\n)?(?:Name\\.+:\\s*(\\S+)\\n)?(?:Name\\.+:\\s*(\\S+)\\n)?\",\n\t    \"status\": r\"Domain status\\.+:(.+)\",\n\t    # \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"tokyo\"] = {\n", "    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.tokyo\",\n\t}\n\tZZ[\"top\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"trade\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"tv\"] = {\n", "    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.tv\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"tz\"] = {\n", "    \"domain_name\": r\"\\ndomain:\\s*(.+)\",\n\t    \"registrar\": r\"\\nregistrar:\\s?(.+)\",\n\t    \"registrant\": r\"\\nregistrant:\\s*(.+)\",\n\t    \"registrant_country\": None,\n\t    \"creation_date\": r\"\\ncreated:\\s*(.+)\",\n\t    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"\\nchanged:\\s*(.+)\",\n\t    \"status\": None,\n\t    \"name_servers\": r\"\\nnserver:\\s*(.+)\",\n\t}\n", "ZZ[\"ua\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"\\ndomain:\\s*(.+)\",\n\t    \"registrar\": r\"\\nregistrar:\\s*(.+)\",\n\t    \"registrant_country\": r\"\\ncountry:\\s*(.+)\",\n\t    \"creation_date\": r\"\\ncreated:\\s+(.+)\",\n\t    \"expiration_date\": r\"\\nexpires:\\s*(.+)\",\n\t    \"updated_date\": r\"\\nmodified:\\s*(.+)\",\n\t    \"name_servers\": r\"\\nnserver:\\s*(.+)\",\n\t    \"status\": r\"\\nstatus:\\s*(.+)\",\n", "}\n\tZZ[\"edu.ua\"] = {\n\t    \"extend\": \"ua\",\n\t    \"creation_date\": r\"\\ncreated:\\s+0-UANIC\\s+(.+)\",\n\t}\n\tZZ[\"com.ua\"] = {\"extend\": \"ua\"}\n\tZZ[\"net.ua\"] = {\"extend\": \"ua\"}\n\tZZ[\"lviv.ua\"] = {\"extend\": \"com\"}\n\tZZ[\"uk\"] = {\n\t    \"extend\": \"com\",\n", "    \"registrant\": r\"Registrant:\\n\\s*(.+)\",\n\t    \"creation_date\": r\"Registered on:\\s*(.+)\",\n\t    \"expiration_date\": r\"Expiry date:\\s*(.+)\",\n\t    \"updated_date\": r\"Last updated:\\s*(.+)\",\n\t    \"name_servers\": r\"Name Servers:\\s*(\\S+)\\r?\\n(?:\\s+(\\S+)\\r?\\n)?(?:\\s+(\\S+)\\r?\\n)?(?:\\s+(\\S+)\\r?\\n)?\",\n\t    \"status\": r\"Registration status:\\n\\s*(.+)\",\n\t}\n\tZZ[\"us\"] = {\"extend\": \"name\"}\n\tZZ[\"uz\"] = {\n\t    \"extend\": \"com\",\n", "    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiration Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    \"name_servers\": r\"Domain servers in listed order:(?:\\n\\s+(\\S+))(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?\\n\\n\",\n\t    # sometimes 'not.defined is returned as a nameserver (e.g. google.uz)\n\t}\n\tZZ[\"vip\"] = {\n", "    \"_server\": \"whois.nic.vip\",\n\t    \"extend\": \"com\",\n\t    \"updated_date\": None,\n\t}\n\tZZ[\"wiki\"] = {\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n", "    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t}\n\tZZ[\"win\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"work\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.work\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n", "    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t}\n\tZZ[\"xin\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.xin\",\n\t}\n\tZZ[\"za\"] = {\n", "    \"extend\": \"com\",\n\t}\n\tZZ[\"web.za\"] = {\"extend\": \"za\", \"_server\": \"web-whois.registry.net.za\"}\n\tZZ[\"org.za\"] = {\"extend\": \"za\", \"_server\": \"org-whois.registry.net.za\"}\n\tZZ[\"net.za\"] = {\"extend\": \"za\", \"_server\": \"net-whois.registry.net.za\"}\n\tZZ[\"co.za\"] = {\"extend\": \"za\", \"_server\": \"coza-whois.registry.net.za\"}\n\tZZ[\"gy\"] = {\"extend\": \"com\"}\n\t# Multiple initialization\n\tZZ[\"ca\"] = {\"extend\": \"bank\"}\n\t# Rwanda: https://en.wikipedia.org/wiki/.rw\n", "ZZ[\"rw\"] = {\"extend\": \"com\", \"_server\": \"whois.ricta.org.rw\"}\n\tZZ[\".co.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".org.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".net.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".ac.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".gov.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".mil.rw\"] = {\"extend\": \"rw\"}\n\tZZ[\".coop.rw\"] = {\"extend\": \"rw\"}\n\t# ZZ[\".ltd.rw\"] = {\"extend\": \"rw\"} # unclear, no longer in https://publicsuffix.org/list/public_suffix_list.dat 2023-06-27 mboot\n\tZZ[\"mu\"] = {\"extend\": \"bank\"}\n", "ZZ[\"mu\"] = {\"extend\": \"bank\"}\n\t# Registry operator: donuts.domains\n\t# WHOIS server: whois.donuts.co\n\tZZ[\"_donuts\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.donuts.co\",\n\t    \"registrant\": r\"Registrant Organization:\\s?(.+)\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\tZZ[\"academy\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"accountants\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"actor\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"agency\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"airforce\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"apartments\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"army\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"associates\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"attorney\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"auction\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"band\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"bargains\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"bike\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"bingo\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"boutique\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"builders\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"business\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cab\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cafe\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"camera\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"camp\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"capital\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cards\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"careers\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"care\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cash\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"casino\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"catering\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"center\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"charity\"] = {\"extend\": \"_donuts\", \"_server\": \"whois.nic.charity\"}\n\tZZ[\"chat\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"cheap\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"church\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"city\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"claims\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cleaning\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"clinic\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"clothing\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"coach\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"codes\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"coffee\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"community\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"company\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"computer\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"condos\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"construction\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"consulting\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"contact\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"contractors\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cool\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"coupons\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"creditcard\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"credit\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"cruises\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"dance\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"dating\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"deals\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"degree\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"delivery\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"democrat\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"dental\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"dentist\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"diamonds\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"digital\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"direct\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"directory\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"discount\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"doctor\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"dog\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"domains\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"education\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"email\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"energy\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"engineer\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"engineering\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"enterprises\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"equipment\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"estate\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"events\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"exchange\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"expert\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"exposed\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"express\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"fail\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"family\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"fan\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"farm\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"finance\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"financial\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"fish\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"fitness\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"flights\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"florist\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"football\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"forsale\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"foundation\"] = {\"extend\": \"_donuts\", \"_server\": \"whois.nic.foundation\"}\n\tZZ[\"fund\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"furniture\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"futbol\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"fyi\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gallery\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"games\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gifts\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gives\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"glass\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gmbh\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gold\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"golf\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"graphics\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gratis\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"gripe\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"group\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"guide\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"guru\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"haus\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"healthcare\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"hockey\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"holdings\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"holiday\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"hospital\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"house\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"immobilien\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"immo\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"industries\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"institute\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"insure\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"international\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"investments\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"irish\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"jetzt\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"jewelry\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"kaufen\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"kitchen\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"land\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"lawyer\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"lease\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"legal\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"life\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"lighting\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"limited\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"limo\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"live\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"loans\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"ltd\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"maison\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"management\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"market\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"marketing\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"mba\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"media\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"memorial\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"moda\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"money\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"mortgage\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"movie\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"navy\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"network\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"news\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"ninja\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"partners\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"parts\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"pet\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"photography\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"photos\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"pictures\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"pizza\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"place\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"plumbing\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"plus\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"productions\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"properties\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"pub\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"recipes\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"rehab\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"reise\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"reisen\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"rentals\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"repair\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"report\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"republican\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"restaurant\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"reviews\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"rip\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"rocks\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"run\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"sale\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"salon\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"sarl\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"school\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"schule\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"services\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"shoes\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"shopping\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"show\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"singles\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"soccer\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"social\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"software\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"solar\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"solutions\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"studio\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"style\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"supplies\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"supply\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"support\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"surgery\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"systems\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tax\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"taxi\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"team\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"technology\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"tennis\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"theater\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tienda\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tips\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tires\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"today\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tools\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"tours\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"town\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"toys\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"training\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"travel\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"university\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"vacations\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"ventures\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"vet\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"viajes\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"video\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"villas\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"vin\"] = {\"extend\": \"_donuts\"}\n", "ZZ[\"vision\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"voyage\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"watch\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"wine\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"works\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"world\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"wtf\"] = {\"extend\": \"_donuts\"}\n\tZZ[\"zone\"] = {\"extend\": \"_donuts\"}\n\t# Registry operator: CentralNic\n\t# WHOIS server: whois.centralnic.com\n", "ZZ[\"_centralnic\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.centralnic.com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n", "ZZ[\"art\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"auto\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"autos\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"baby\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"bar\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"beauty\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"best\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"blog\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"boats\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"bond\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"build\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"cam\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"car\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"cars\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"ceo\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"cfd\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"college\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"coop\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"cyou\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"dealer\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"desi\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"fans\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"feedback\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"forum\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"frl\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"fun\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"gent\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"hair\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"homes\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"host\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"icu\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"inc\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"kred\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"london\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"luxury\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"makeup\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"monster\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"motorcycles\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"online\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"ooo\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"press\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"protection\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"qpon\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"quest\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"reit\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"rent\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"rest\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"saarland\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"sbs\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"security\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"site\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"skin\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"space\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"storage\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"store\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"tech\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"theatre\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"tickets\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"uno\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"website\"] = {\"extend\": \"_centralnic\"}\n", "ZZ[\"xyz\"] = {\"extend\": \"_centralnic\", \"_server\": \"whois.nic.xyz\"}\n\tZZ[\"yachts\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"zuerich\"] = {\"extend\": \"_centralnic\"}\n\t# mboot added start\n\t# note i extract the whois server for each toplevel domain using: https://github.com/jophy/iana_tld_list\n\t# of which i am a contributer\n\tZZ[\"ac\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n", "    \"status\": r\"Domain Status:\\s(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s+(\\S+)\",\n\t    \"registrant_country\": r\"Registrant Country:\\s*(.*)\\r?\\n\",\n\t    \"updated_date\": r\"Updated Date:\\s+(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s+(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s+(.+)\",\n\t}\n\tZZ[\"ae\"] = {\n\t    \"extend\": \"ar\",\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n", "    \"registrar\": r\"Registrar Name:\\s+(.+)\",\n\t    \"status\": r\"Status:\\s(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s+(\\S+)\",  # host -t ns gives back more, but whois output only has 2\n\t    \"registrant_country\": None,\n\t    \"creation_date\": None,\n\t    \"expiration_date\": None,\n\t    \"updated_date\": None,\n\t}\n\tZZ[\"aero\"] = {\n\t    \"extend\": \"ac\",\n", "    \"_server\": \"whois.aero\",\n\t    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"af\"] = {\n\t    \"extend\": \"ac\",\n\t}\n\tZZ[\"ag\"] = {\n\t    \"extend\": \"ac\",\n\t}\n\tZZ[\"bet\"] = {\n", "    \"extend\": \"ac\",\n\t    \"_server\": \"whois.nic.bet\",\n\t}\n\tZZ[\"bg\"] = {\n\t    \"extend\": None,\n\t    \"_server\": \"whois.register.bg\",\n\t    \"domain_name\": r\"DOMAIN\\s+NAME:\\s+(.+)\",\n\t    \"status\": r\"registration\\s+status:\\s(.+)\",\n\t    \"name_servers\": r\"NAME SERVER INFORMATION:\\n(?:(.+)\\n)(?:(.+)\\n)?(?:(.+)\\n)?(?:(.+)\\n)?\",\n\t    \"creation_date\": None,\n", "    \"expiration_date\": None,\n\t    \"updated_date\": None,\n\t    \"registrar\": None,\n\t    \"registrant_country\": None,\n\t}\n\tZZ[\"bid\"] = {\n\t    \"extend\": \"ac\",\n\t    \"_server\": \"whois.nic.bid\",\n\t}\n\t# Benin\n", "# WHOIS server: whois.nic.bj\n\t# by: https://github.com/LickosA\n\tZZ[\"bj\"] = {\n\t    \"_server\": \"whois.nic.bj\",\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s*(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n\t    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n", "    \"status\": r\"Status:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s+(\\S+)\\n\",\n\t}\n\tZZ[\"buzz\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"casa\"] = {\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t}\n", "ZZ[\"cd\"] = {\n\t    \"extend\": \"ac\",\n\t    \"_server\": \"whois.nic.cd\",\n\t    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"cf\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": None,\n\t    \"name_servers\": r\"Domain Nameservers:\\n(?:(.+)\\n)(?:(.+)\\n)?(?:(.+)\\n)?(?:(.+)\\n)?\",\n\t    \"registrar\": r\"Record maintained by:\\s+(.+)\",\n", "    \"creation_date\": r\"Domain registered:\\s?(.+)\",\n\t    \"expiration_date\": r\"Record will expire:\\s?(.+)\",\n\t    \"updated_date\": None,\n\t    \"registrant_country\": None,\n\t    # very restrictive, after a few queries it will refuse with try again later\n\t    \"_slowdown\": 5,\n\t}\n\tZZ[\"design\"] = {\n\t    \"extend\": \"ac\",\n\t}\n", "ZZ[\"eus\"] = {\n\t    \"extend\": \"ac\",\n\t}\n\tZZ[\"ge\"] = {\n\t    \"_server\": \"whois.nic.ge\",\n\t    \"extend\": \"ac\",\n\t    \"updated_date\": None,\n\t}\n\tZZ[\"gq\"] = {\n\t    \"extend\": \"ml\",\n", "    \"_server\": \"whois.domino.gq\",\n\t}\n\tZZ[\"la\"] = {\n\t    \"extend\": \"com\",\n\t}\n\tZZ[\"lol\"] = {\n\t    \"extend\": \"amsterdam\",\n\t}\n\tZZ[\"love\"] = {\n\t    \"extend\": \"ac\",\n", "    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"ly\"] = {\n\t    \"extend\": \"ac\",\n\t    \"_server\": \"whois.nic.ly\",\n\t    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"com.ly\"] = {\n\t    \"extend\": \"ly\",  # host -t ns <domain> often has more nameservers then output of whois\n\t}\n", "ZZ[\"ma\"] = {\n\t    \"extend\": \"ac\",\n\t    \"_server\": \"whois.registre.ma\",\n\t    \"registrar\": r\"Sponsoring Registrar:\\s*(.+)\",\n\t}\n\tZZ[\"mg\"] = {\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"moe\"] = {\n", "    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant\\s+Country:\\s+(.+)\",\n\t}\n\tZZ[\"ng\"] = {\n\t    \"_server\": \"whois.nic.net.ng\",\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t}\n\tZZ[\"ong\"] = {\n\t    \"extend\": \"ac\",\n", "    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t}\n\tZZ[\"pics\"] = {\n\t    \"extend\": \"ac\",\n\t}\n\tZZ[\"re\"] = {\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": None,\n\t    \"domain_name\": r\"domain:\\s+(.+)\",\n\t    \"registrar\": r\"registrar:\\s+(.+)\",\n", "    \"name_servers\": r\"nserver:\\s+(.+)\",\n\t    \"status\": r\"status:\\s(.+)\",\n\t    \"creation_date\": r\"created:\\s+(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s+(.+)\",\n\t    \"updated_date\": r\"last-update:\\s+(.*)\",\n\t    \"registrant_country\": None,\n\t}\n\tZZ[\"ro\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"\\s+Domain name:\\s+(.+)\",\n", "    \"registrar\": r\"\\s+Registrar:\\s+(.+)\",\n\t    \"creation_date\": r\"\\s+Registered On:\\s+(.+)\",\n\t    \"expiration_date\": r\"\\s+Expires On:\\s+(.+)\",\n\t    \"status\": r\"\\s+Domain Status:\\s(.+)\",\n\t    \"name_servers\": r\"\\s+NameServer:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t    \"updated_date\": None,\n\t}\n\tZZ[\"rs\"] = {\n\t    \"domain_name\": r\"Domain name:\\s+(.+)\",\n", "    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"status\": r\"Domain status:\\s(.+)\",\n\t    \"creation_date\": r\"Registration date:\\s+(.+)\",\n\t    \"expiration_date\": r\"Expiration date:\\s+(.+)\",\n\t    \"updated_date\": r\"Modification date:\\s+(.+)\",\n\t    \"name_servers\": r\"DNS:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t}\n\t# singapore\n\tZZ[\"sg\"] = {\n", "    \"_server\": \"whois.sgnic.sg\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"domain_name\": r\"\\s+Domain name:\\s+(.+)\",\n\t    \"creation_date\": r\"\\s+Creation Date:\\s+(.+)\",\n\t    \"expiration_date\": r\"\\s+Expiration Date:\\s+(.+)\",\n\t    \"updated_date\": r\"\\s+Modified Date:\\s+(.+)\",\n\t    \"status\": r\"\\s+Domain Status:\\s(.+)\",\n\t    \"registrant_country\": None,\n\t    \"name_servers\": r\"Name Servers:(?:\\n[ \\t]+(\\S+)[^\\n]*)(?:\\n[ \\t]+(\\S+)[^\\n]*)?(?:\\n[ \\t]+(\\S+)[^\\n]*)?(?:\\n[ \\t]+(\\S+)[^\\n]*)?\",\n\t    # make sure the dnssec is not matched\n", "}\n\tZZ[\"srl\"] = {\n\t    \"_server\": \"whois.afilias-srs.net\",\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t}\n\tZZ[\"su\"] = {\n\t    \"extend\": \"ru\",\n\t}\n\tZZ[\"td\"] = {\n", "    \"_server\": \"whois.nic.td\",\n\t    \"extend\": \"ac\",\n\t    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t}\n\tZZ[\"tw\"] = {\n\t    \"extend\": None,\n\t    \"_server\": \"whois.twnic.net.tw\",\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"creation_date\": r\"\\s+Record created on\\s+(.+)\",\n\t    \"expiration_date\": r\"\\s+Record expires on\\s+(.+)\",\n", "    \"status\": r\"\\s+Domain Status:\\s+(.+)\",\n\t    \"registrar\": r\"Registration\\s+Service\\s+Provider:\\s+(.+)\",\n\t    \"updated_date\": None,\n\t    \"registrant_country\": None,\n\t    \"name_servers\": r\"Domain servers in listed order:\\s*(\\S+)[ \\t]*\\r?\\n(?:\\s+(\\S+)[ \\t]*\\r?\\n)?(?:\\s+(\\S+)[ \\t]*\\r?\\n)?(?:\\s+(\\S+)[ \\t]*\\r?\\n)?\",\n\t}\n\tZZ[\"com.tw\"] = {\n\t    \"extend\": \"tw\",\n\t}\n\tZZ[\"ug\"] = {\n", "    \"_server\": \"whois.co.ug\",\n\t    \"domain_name\": r\"Domain name:\\s+(.+)\",\n\t    \"creation_date\": r\"Registered On:\\s+(.+)\",\n\t    \"expiration_date\": r\"Expires On:\\s+(.+)\",\n\t    \"status\": r\"Status:\\s+(.+)\",\n\t    \"name_servers\": r\"Nameserver:\\s+(.+)\",\n\t    \"registrant_country\": r\"Registrant Country:\\s+(.+)\",\n\t    \"updated_date\": r\"Renewed On:\\s+(.+)\",\n\t    \"registrar\": None,\n\t}\n", "ZZ[\"co.ug\"] = {\n\t    \"extend\": \"ug\",\n\t}\n\tZZ[\"ca.ug\"] = {\n\t    \"extend\": \"ug\",\n\t}\n\tZZ[\"ws\"] = {\n\t    \"extend\": None,\n\t    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s+(.+)\",\n", "    \"expiration_date\": r\"Registrar Registration Expiration Date:\\s+(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s?(.+)\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"status\": r\"Domain Status:\\s(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t}\n\tZZ[\"re\"] = {\n\t    \"domain_name\": r\"domain:\\s+(.+)\",\n\t    \"status\": r\"status:\\s+(.+)\",\n", "    \"registrar\": r\"registrar:\\s+(.+)\",\n\t    \"name_servers\": r\"nserver:\\s+(.+)\",\n\t    \"creation_date\": r\"created:\\s+(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s+(.+)\",\n\t    \"updated_date\": r\"last-update:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t}\n\tZZ[\"bo\"] = {\n\t    \"domain_name\": r\"\\s*NOMBRE DE DOMINIO:\\s+(.+)\",\n\t    \"registrant_country\": r\"País:\\s+(.+)\",\n", "    \"creation_date\": r\"Fecha de activación:\\s+(.+)\",\n\t    \"expiration_date\": r\"Fecha de corte:\\s+(.+)\",\n\t    \"extend\": None,\n\t    \"registrar\": None,\n\t    \"status\": None,\n\t    \"name_servers\": None,  # bo has no nameservers, use host -t ns <domain>\n\t    \"updated_date\": None,\n\t}\n\tZZ[\"com.bo\"] = {\"extend\": \"bo\"}\n\tZZ[\"hr\"] = {\n", "    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s+(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s+(.+)\",\n\t    \"updated_date\": r\"Updated Date:\\s+(.+)\",\n\t    \"status\": None,\n\t    \"registrar\": None,\n\t    \"expiration_date\": r\"Registrar Registration Expiration Date:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t}\n\t# 2022-06-20: mboot\n", "# com_ec = {}\n\t# gob_ec = {}\n\t# Registry operator: Zodiac Wang Limited\n\t# WHOIS server: whois.gtld.knet.cn\n\tZZ[\"_gtldKnet\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.gtld.knet.cn\",\n\t    \"admin\": r\"Admin\\s*Name:\\s+(.+)\",\n\t}\n\tZZ[\"wang\"] = {\"extend\": \"_gtldKnet\"}\n", "# we DONT have xn--45q11c 八卦 (gossip) fix\n\tZZ[\"八卦\"] = {\"extend\": \"_gtldKnet\"}\n\tZZ[\"xn--45q11c\"] = {\"extend\": \"_gtldKnet\"}\n\t# we DONT have xn--czru2d 商城 (mall) fix\n\tZZ[\"商城\"] = {\"extend\": \"_gtldKnet\"}\n\tZZ[\"xn--czru2d\"] = {\"extend\": \"_gtldKnet\"}\n\t# we DONT have xn--hxt814e 网店 (webshop) fix\n\tZZ[\"网店\"] = {\"extend\": \"_gtldKnet\"}\n\tZZ[\"xn--hxt814e\"] = {\"extend\": \"_gtldKnet\"}\n\tZZ[\"accountant\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.accountant\"}\n", "ZZ[\"cricket\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.cricket\"}\n\tZZ[\"date\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.date\"}\n\tZZ[\"faith\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.faith\"}\n\tZZ[\"hiphop\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.hiphop\"}\n\tZZ[\"loan\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.loan\"}\n\tZZ[\"party\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.party\"}\n\tZZ[\"racing\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.racing\"}\n\tZZ[\"ren\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.ren\"}\n\tZZ[\"review\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.review\"}\n\tZZ[\"science\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.science\"}\n", "ZZ[\"webcam\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.webcam\"}\n\tZZ[\"fashion\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.fashion\"}\n\t# Registry operator: UNR Corp.\n\t# WHOIS server: whois.uniregistry.net\n\tZZ[\"_uniregistry\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.uniregistry.net\",\n\t}\n\tZZ[\"help\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"photo\"] = {\"extend\": \"_uniregistry\"}\n", "ZZ[\"sexy\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"gift\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"tattoo\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"property\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"juegos\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"hosting\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"guitars\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"flowers\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"diet\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"christmas\"] = {\"extend\": \"_uniregistry\"}\n", "ZZ[\"blackfriday\"] = {\"extend\": \"_uniregistry\"}\n\tZZ[\"audio\"] = {\"extend\": \"_uniregistry\"}\n\t# Registry operator: TLD REGISTRY LIMITED.\n\t# WHOIS server: whois.teleinfo.cn\n\tZZ[\"_teleinfo\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.teleinfo.cn\",\n\t}\n\t# we DONT have xn--fiq228c5hs 中文网 (website) fix\n\tZZ[\"中文网\"] = {\"extend\": \"_teleinfo\"}\n", "ZZ[\"xn--fiq228c5hs\"] = {\"extend\": \"_teleinfo\"}\n\t# we DONT have xn--3ds443g 在线 (online) fix\n\tZZ[\"在线\"] = {\"extend\": \"_teleinfo\"}\n\tZZ[\"xn--3ds443g\"] = {\"extend\": \"_teleinfo\"}\n\t# RESTRICTED: now known as PrivateRegistry\n\t# restricted domains never answer or never show information sufficient for parsing\n\t# some only show if the domain is free, most allow using a website but some have no web\n\t# but you may have to prove you are not a robot and limits apply also on the website\n\t# some actually dont have a working whois server\n\t# details can be found at:\n", "# (https://www.iana.org/domains/root/db/<tld>.html)\n\tZZ[\"_privateReg\"] = {\"_privateRegistry\": True}\n\tZZ[\"al\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"az\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"ba\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"ch\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"cv\"] = {\"extend\": \"_privateReg\"}  # Cape Verde\n\tZZ[\"cw\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"es\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"ga\"] = {\"extend\": \"_privateReg\"}\n", "ZZ[\"gr\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"hu\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"li\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"mp\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"my\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"pk\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"py\"] = {\"extend\": \"_privateReg\"}  # Paraguay:https://www.iana.org/domains/root/db/py.html\n\tZZ[\"com.py\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"sr\"] = {\"extend\": \"_privateReg\"}\n\t# Kenia\n", "# ke : http://www.kenic.or.ke/index.php/en/ke-domains/ke-domains\n\tZZ[\"ke\"] = {\"extend\": \"com\", \"_server\": \"whois.kenic.or.ke\"}\n\tZZ[\"ac.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"co.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"go.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"info.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"me.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"mobi.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"ne.ke\"] = {\"extend\": \"ke\"}\n\tZZ[\"or.ke\"] = {\"extend\": \"ke\"}\n", "ZZ[\"sc.ke\"] = {\"extend\": \"ke\"}\n\t# https://www.iana.org/domains/root/db/td.html\n\t# td = {\"extend\": \"_privateReg\"} # Chad (French: Tchad) made available for use in 1997.\n\tZZ[\"tk\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"to\"] = {\"extend\": \"_privateReg\"}  #\n\tZZ[\"uy\"] = {\"extend\": \"_privateReg\"}  # Uruguay\n\tZZ[\"va\"] = {\"extend\": \"_privateReg\"}  # This TLD has no whois server.\n\tZZ[\"vu\"] = {\"extend\": \"_privateReg\"}  # all dates 1970 , no furter relevant info\n\tZZ[\"vn\"] = {\"extend\": \"_privateReg\"}\n\t#\n", "ZZ[\"zw\"] = {\"extend\": \"_privateReg\"}  # Zimbabwe ; # This TLD has no whois server\n\tZZ[\"com.zw\"] = {\"extend\": \"zw\"}\n\tZZ[\"org.zw\"] = {\"extend\": \"zw\"}\n\t# Nepal\n\tZZ[\"np\"] = {\"extend\": \"_privateReg\"}  # This TLD has no whois server, but you can access the whois database at https://www.mos.com.np/\n\tZZ[\"com.np\"] = {\"extend\": \"np\"}\n\t# Ecuador\n\tZZ[\"ec\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"com.ec\"] = {\"extend\": \"ec\"}\n\tZZ[\"gob.ec\"] = {\"extend\": \"ec\"}\n", "# https://umbrella.cisco.com/blog/on-the-trail-of-malicious-dynamic-dns-domains\n\tZZ[\"hopto.org\"] = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\tZZ[\"duckdns.org\"] = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# changeip_com = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# dnsdynamic_org = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\tZZ[\"noip.com\"] = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\tZZ[\"noip.org\"] = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# freedns_afraid_org = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# dyndns_com = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# sitelutions_com = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n", "# 3322_org = {\"extend\": \"_privateReg\"}  # dynamic dns without any whois\n\t# https://en.wikipedia.org/wiki/.onion, a \"official\" fake domain\n\t# https://www.rfc-editor.org/rfc/rfc7686.html\n\t# .onion names are used to provide access to end to end encrypted, secure, anonymized services;\n\tZZ[\"onion\"] = {\"extend\": \"_privateReg\"}\n\t# backend registry for domain names ending in GG, JE, and AS.\n\t# lines may have \\r actually before \\n , updated all 3 domains return all nameservers\n\tZZ[\"gg\"] = {\n\t    \"domain_name\": r\"Domain:\\s*\\n\\s+(.+)\",\n\t    \"status\": r\"Domain Status:\\s*\\n\\s+(.+)\",\n", "    \"registrar\": r\"Registrar:\\s*\\n\\s+(.+)\",\n\t    \"name_servers\": r\"Name servers:(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?(?:\\n\\s+(\\S+))?\\n\",\n\t    \"creation_date\": r\"Relevant dates:\\s*\\n\\s+Registered on(.+)\",\n\t    \"expiration_date\": None,\n\t    \"updated_date\": None,\n\t    \"registrant_country\": None,\n\t}\n\tZZ[\"as\"] = {\"extend\": \"gg\"}\n\tZZ[\"je\"] = {\"extend\": \"gg\"}\n\tZZ[\"sn\"] = {\n", "    \"_server\": \"whois.nic.sn\",\n\t    \"domain_name\": r\"Nom de domaine:\\s+(.+)\",\n\t    \"status\": r\"Statut:\\s+(.+)\",\n\t    \"registrar\": r\"Registrar:\\s+(.+)\",\n\t    \"name_servers\": r\"Serveur de noms:\\s*(.+)\",\n\t    \"creation_date\": r\"Date de création:\\s+(.+)\",\n\t    \"expiration_date\": r\"Date d'expiration:\\s+(.+)\",\n\t    \"updated_date\": r\"Dernière modification:\\s+(.+)\",\n\t    \"registrant_country\": None,\n\t}\n", "ZZ[\"si\"] = {\n\t    \"domain_name\": r\"domain:\\s+(.+)\",\n\t    \"status\": r\"status:\\s+(.+)\",\n\t    \"registrar\": r\"registrar:\\s+(.+)\",\n\t    \"name_servers\": r\"nameserver:\\s*(.+)\",\n\t    \"creation_date\": r\"created:\\s+(.+)\",\n\t    \"expiration_date\": r\"expire:\\s+(.+)\",\n\t    \"updated_date\": None,\n\t    \"registrant_country\": None,\n\t}\n", "ZZ[\"do\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"com.do\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"cx\"] = {\"extend\": \"com\"}\n\tZZ[\"dz\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"gd\"] = {\"extend\": \"com\"}\n\tZZ[\"mn\"] = {\"extend\": \"com\"}\n\tZZ[\"tl\"] = {\"extend\": \"com\"}\n\tZZ[\"gay\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.gay\"}\n\tZZ[\"tt\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"mo\"] = {\n", "    \"extend\": \"com\",\n\t    \"creation_date\": r\"created on\\s+(.+)\",\n\t    \"expiration_date\": r\"expires on\\s+(.+)\",\n\t    \"name_servers\": r\"Domain name servers:\\s*\\-+(?:\\s*(\\S+)\\n)(?:\\s*(\\S+)\\n)?(?:\\s*(\\S+)\\n)?(?:\\s*(\\S+)\\n)?\",\n\t}\n\tZZ[\"com.mo\"] = {\"extend\": \"mo\"}\n\tZZ[\"st\"] = {\n\t    # .ST domains can now be registered with many different competing registrars. and hence different formats\n\t    # >>> line appears quite early, valid info after would have been suppressed with the ^>>> cleanup rule: switched off\n\t    \"extend\": \"com\",\n", "    \"registrant_country\": r\"registrant-country:\\s+(\\S+)\",\n\t    \"registrant\": r\"registrant-organi(?:s|z)ation:\\s*(.+)\\r?\\n\",\n\t    \"expiration_date\": r\"Expiration\\s+Date:\\s?(.+)\",\n\t}\n\tZZ[\"so\"] = {\"extend\": \"com\"}\n\tZZ[\"nrw\"] = {\"extend\": \"com\"}\n\tZZ[\"lat\"] = {\"extend\": \"com\"}\n\tZZ[\"realestate\"] = {\"_server\": \"whois.nic.realestate\", \"extend\": \"com\"}\n\tZZ[\"ph\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"com.ph\"] = {\"extend\": \"ph\"}\n", "ZZ[\"org.ph\"] = {\"extend\": \"ph\"}\n\tZZ[\"net.ph\"] = {\"extend\": \"ph\"}\n\tZZ[\"zm\"] = {\"extend\": \"com\"}\n\tZZ[\"sy\"] = {\"extend\": \"_privateReg\", \"_server\": \"whois.tld.sy\"}\n\tZZ[\"onl\"] = {\"extend\": \"com\"}\n\tZZ[\"blue\"] = {\"extend\": \"com\"}\n\tZZ[\"garden\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.garden\"}\n\tZZ[\"promo\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.promo\"}\n\tZZ[\"pyc\"] = {\"extend\": \"com\"}\n\tZZ[\"mn\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.mn\"}\n", "ZZ[\"africa\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.africa\"}\n\tZZ[\"green\"] = {\"extend\": \"com\"}\n\tZZ[\"mk\"] = {\n\t    \"extend\": None,\n\t    \"_server\": \"whois.marnet.mk\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t    \"registrant_country\": r\"Registrant Country:\\s?(.+)\",\n\t    \"creation_date\": r\"registered:\\s?(.+)\",\n", "    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"changed:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    # the trailing domain must have minimal 2 parts firstname.lastname@fld.tld\n\t    # it may actually have more then 4 levels\n\t    # to match the dot in firstname.lastname we must use \\.\n\t    \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"observer\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.observer\"}\n", "ZZ[\"one\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.one\"}\n\tZZ[\"page\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"esq\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"dad\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"foo\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"mov\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"nexus\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"phd\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"prof\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n\tZZ[\"zip\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.google\"}\n", "ZZ[\"bf\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.bf\",\n\t    \"registrant\": r\"Registrant Name:\\s?(.+)\",\n\t}\n\tZZ[\"bz\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"si\"] = {\n\t    \"extend\": None,\n\t    \"_server\": \"whois.register.si\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n", "    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t    \"registrant_country\": r\"Registrant Country:\\s?(.+)\",\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"changed:\\s?(.+)\",\n\t    \"name_servers\": r\"nameserver:\\s*(.+)\\s*\",\n\t    \"status\": r\"Status:\\s?(.+)\",\n\t    # the trailing domain must have minimal 2 parts firstname.lastname@fld.tld\n\t    # it may actually have more then 4 levels\n", "    # to match the dot in firstname.lastname we must use \\.\n\t    \"emails\": r\"[\\w\\.-]+@[\\w\\.-]+\\.[\\w]{2,4}\",\n\t}\n\tZZ[\"sx\"] = {\"extend\": \"com\", \"_server\": \"whois.sx\"}\n\tZZ[\"tc\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.tc\",\n\t    \"domain_name\": r\"Domain Name:\\s?(.+)\",\n\t    \"registrar\": r\"Sponsoring Registrar:\\s?(.+)\",\n\t    \"creation_date\": r\"Creation Date:\\s?(.+)\",\n", "    \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t    \"name_servers\": r\"Name Server:\\s*(.+)\\s*\",\n\t    \"status\": r\"Domain Status:\\s?(.+)\",\n\t}\n\tZZ[\"wf\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.wf\",\n\t    \"domain_name\": r\"domain:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n", "    \"registrant_country\": r\"Registrant Country:\\s?(.+)\",\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"Expiry Date:\\s?(.+)\",\n\t    \"updated_date\": r\"last-update:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t    \"status\": r\"\\nstatus:\\s?(.+)\",\n\t}\n\tZZ[\"lk\"] = {\"extend\": \"_privateReg\"}  # Sri Lanka, whois.nic.lk exists but does not answer\n\tZZ[\"eg\"] = {\"extend\": \"_privateReg\"}  # Egipt\n\tZZ[\"com.eg\"] = {\"extend\": \"_privateReg\"}  # Egipt\n", "ZZ[\"mo\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.monic.mo\",\n\t    \"name_servers\": r\"Domain name servers:\\s+-+\\s+(\\S+)\\n(?:(\\S+)\\n)?(?:(\\S+)\\n)?(?:(\\S+)\\n)?\",\n\t    \"creation_date\": r\"Record created on (.+)\",\n\t    \"expiration_date\": r\"Record expires on (.+)\",\n\t}\n\tZZ[\"ph\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"vc\"] = {\"extend\": \"com\"}\n\tZZ[\"cm\"] = {\"extend\": \"com\"}\n", "# russian speaking community\n\tZZ[\"xn--p1acf\"] = {\"extend\": \"com\"}\n\tZZ[\"РУС\"] = {\"extend\": \"com\"}\n\tZZ[\"рус\"] = {\"extend\": \"com\"}\n\tZZ[\"vig\"] = {\"extend\": \"com\", \"_server\": \"whois.afilias-srs.net\"}\n\t# autodetect via compare_known_tld.py via IANA tld list and https://github.com/jophy/iana_tld_list\n\tZZ[\"aarp\"] = {\"_server\": \"whois.nic.aarp\", \"extend\": \"com\"}\n\tZZ[\"abbvie\"] = {\"_server\": \"whois.nic.abbvie\", \"extend\": \"com\"}\n\tZZ[\"abc\"] = {\"_server\": \"whois.nic.abc\", \"extend\": \"com\"}\n\tZZ[\"abogado\"] = {\"_server\": \"whois.nic.abogado\", \"extend\": \"com\"}\n", "ZZ[\"abudhabi\"] = {\"_server\": \"whois.nic.abudhabi\", \"extend\": \"com\"}\n\tZZ[\"aco\"] = {\"_server\": \"whois.nic.aco\", \"extend\": \"com\"}\n\tZZ[\"adult\"] = {\"_server\": \"whois.nic.adult\", \"extend\": \"com\"}\n\tZZ[\"aeg\"] = {\"_server\": \"whois.nic.aeg\", \"extend\": \"com\"}\n\tZZ[\"afl\"] = {\"_server\": \"whois.nic.afl\", \"extend\": \"com\"}\n\tZZ[\"airbus\"] = {\"_server\": \"whois.nic.airbus\", \"extend\": \"com\"}\n\tZZ[\"airtel\"] = {\"_server\": \"whois.nic.airtel\", \"extend\": \"com\"}\n\tZZ[\"alibaba\"] = {\"_server\": \"whois.nic.alibaba\", \"extend\": \"com\"}\n\tZZ[\"alipay\"] = {\"_server\": \"whois.nic.alipay\", \"extend\": \"com\"}\n\tZZ[\"allfinanz\"] = {\"_server\": \"whois.nic.allfinanz\", \"extend\": \"com\"}\n", "ZZ[\"ally\"] = {\"_server\": \"whois.nic.ally\", \"extend\": \"com\"}\n\tZZ[\"alsace\"] = {\"_server\": \"whois.nic.alsace\", \"extend\": \"com\"}\n\tZZ[\"alstom\"] = {\"_server\": \"whois.nic.alstom\", \"extend\": \"com\"}\n\tZZ[\"amazon\"] = {\"_server\": \"whois.nic.amazon\", \"extend\": \"com\"}\n\tZZ[\"americanfamily\"] = {\"_server\": \"whois.nic.americanfamily\", \"extend\": \"com\"}\n\tZZ[\"anz\"] = {\"_server\": \"whois.nic.anz\", \"extend\": \"com\"}\n\tZZ[\"aol\"] = {\"_server\": \"whois.nic.aol\", \"extend\": \"com\"}\n\tZZ[\"aquarelle\"] = {\"_server\": \"whois.nic.aquarelle\", \"extend\": \"com\"}\n\tZZ[\"arab\"] = {\"_server\": \"whois.nic.arab\", \"extend\": \"com\"}\n\tZZ[\"archi\"] = {\"_server\": \"whois.nic.archi\", \"extend\": \"com\"}\n", "ZZ[\"arte\"] = {\"_server\": \"whois.nic.arte\", \"extend\": \"com\"}\n\tZZ[\"asda\"] = {\"_server\": \"whois.nic.asda\", \"extend\": \"com\"}\n\tZZ[\"audible\"] = {\"_server\": \"whois.nic.audible\", \"extend\": \"com\"}\n\tZZ[\"auspost\"] = {\"_server\": \"whois.nic.auspost\", \"extend\": \"com\"}\n\tZZ[\"author\"] = {\"_server\": \"whois.nic.author\", \"extend\": \"com\"}\n\tZZ[\"aws\"] = {\"_server\": \"whois.nic.aws\", \"extend\": \"com\"}\n\tZZ[\"barcelona\"] = {\"_server\": \"whois.nic.barcelona\", \"extend\": \"com\"}\n\tZZ[\"barclaycard\"] = {\"_server\": \"whois.nic.barclaycard\", \"extend\": \"com\"}\n\tZZ[\"barclays\"] = {\"_server\": \"whois.nic.barclays\", \"extend\": \"com\"}\n\tZZ[\"barefoot\"] = {\"_server\": \"whois.nic.barefoot\", \"extend\": \"com\"}\n", "ZZ[\"basketball\"] = {\"_server\": \"whois.nic.basketball\", \"extend\": \"com\"}\n\tZZ[\"bauhaus\"] = {\"_server\": \"whois.nic.bauhaus\", \"extend\": \"com\"}\n\tZZ[\"bayern\"] = {\"_server\": \"whois.nic.bayern\", \"extend\": \"com\"}\n\tZZ[\"bbc\"] = {\"_server\": \"whois.nic.bbc\", \"extend\": \"com\"}\n\tZZ[\"bbt\"] = {\"_server\": \"whois.nic.bbt\", \"extend\": \"com\"}\n\tZZ[\"bbva\"] = {\"_server\": \"whois.nic.bbva\", \"extend\": \"com\"}\n\tZZ[\"bcg\"] = {\"_server\": \"whois.nic.bcg\", \"extend\": \"com\"}\n\tZZ[\"bcn\"] = {\"_server\": \"whois.nic.bcn\", \"extend\": \"com\"}\n\tZZ[\"beer\"] = {\"_server\": \"whois.nic.beer\", \"extend\": \"com\"}\n\tZZ[\"bentley\"] = {\"_server\": \"whois.nic.bentley\", \"extend\": \"com\"}\n", "ZZ[\"berlin\"] = {\"_server\": \"whois.nic.berlin\", \"extend\": \"com\"}\n\tZZ[\"bestbuy\"] = {\"_server\": \"whois.nic.bestbuy\", \"extend\": \"com\"}\n\tZZ[\"bi\"] = {\"_server\": \"whois1.nic.bi\", \"extend\": \"com\"}\n\tZZ[\"bible\"] = {\"_server\": \"whois.nic.bible\", \"extend\": \"com\"}\n\tZZ[\"bio\"] = {\"_server\": \"whois.nic.bio\", \"extend\": \"com\"}\n\tZZ[\"black\"] = {\"_server\": \"whois.nic.black\", \"extend\": \"com\"}\n\tZZ[\"blockbuster\"] = {\"_server\": \"whois.nic.blockbuster\", \"extend\": \"com\"}\n\tZZ[\"bms\"] = {\"_server\": \"whois.nic.bms\", \"extend\": \"com\"}\n\tZZ[\"bmw\"] = {\"_server\": \"whois.nic.bmw\", \"extend\": \"com\"}\n\tZZ[\"bofa\"] = {\"_server\": \"whois.nic.bofa\", \"extend\": \"com\"}\n", "ZZ[\"boo\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"book\"] = {\"_server\": \"whois.nic.book\", \"extend\": \"com\"}\n\tZZ[\"bosch\"] = {\"_server\": \"whois.nic.bosch\", \"extend\": \"com\"}\n\tZZ[\"bostik\"] = {\"_server\": \"whois.nic.bostik\", \"extend\": \"com\"}\n\tZZ[\"boston\"] = {\"_server\": \"whois.nic.boston\", \"extend\": \"com\"}\n\tZZ[\"bot\"] = {\"_server\": \"whois.nic.bot\", \"extend\": \"com\"}\n\tZZ[\"box\"] = {\"_server\": \"whois.nic.box\", \"extend\": \"com\"}\n\tZZ[\"bradesco\"] = {\"_server\": \"whois.nic.bradesco\", \"extend\": \"com\"}\n\tZZ[\"bridgestone\"] = {\"_server\": \"whois.nic.bridgestone\", \"extend\": \"com\"}\n\tZZ[\"broadway\"] = {\"_server\": \"whois.nic.broadway\", \"extend\": \"com\"}\n", "ZZ[\"broker\"] = {\"_server\": \"whois.nic.broker\", \"extend\": \"com\"}\n\tZZ[\"brother\"] = {\"_server\": \"whois.nic.brother\", \"extend\": \"com\"}\n\tZZ[\"brussels\"] = {\"_server\": \"whois.nic.brussels\", \"extend\": \"com\"}\n\tZZ[\"buy\"] = {\"_server\": \"whois.nic.buy\", \"extend\": \"com\"}\n\tZZ[\"call\"] = {\"_server\": \"whois.nic.call\", \"extend\": \"com\"}\n\tZZ[\"canon\"] = {\"_server\": \"whois.nic.canon\", \"extend\": \"com\"}\n\tZZ[\"capetown\"] = {\"_server\": \"whois.nic.capetown\", \"extend\": \"com\"}\n\tZZ[\"capitalone\"] = {\"_server\": \"whois.nic.capitalone\", \"extend\": \"com\"}\n\tZZ[\"career\"] = {\"_server\": \"whois.nic.career\", \"extend\": \"com\"}\n\tZZ[\"case\"] = {\"_server\": \"whois.nic.case\", \"extend\": \"com\"}\n", "ZZ[\"catholic\"] = {\"_server\": \"whois.nic.catholic\", \"extend\": \"com\"}\n\tZZ[\"cba\"] = {\"_server\": \"whois.nic.cba\", \"extend\": \"com\"}\n\tZZ[\"cfa\"] = {\"_server\": \"whois.nic.cfa\", \"extend\": \"com\"}\n\tZZ[\"chanel\"] = {\"_server\": \"whois.nic.chanel\", \"extend\": \"com\"}\n\tZZ[\"channel\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"chintai\"] = {\"_server\": \"whois.nic.chintai\", \"extend\": \"com\"}\n\tZZ[\"ci\"] = {\"_server\": \"whois.nic.ci\", \"extend\": \"com\"}\n\tZZ[\"circle\"] = {\"_server\": \"whois.nic.circle\", \"extend\": \"com\"}\n\tZZ[\"cityeats\"] = {\"_server\": \"whois.nic.cityeats\", \"extend\": \"com\"}\n\tZZ[\"clinique\"] = {\"_server\": \"whois.nic.clinique\", \"extend\": \"com\"}\n", "ZZ[\"clubmed\"] = {\"_server\": \"whois.nic.clubmed\", \"extend\": \"com\"}\n\tZZ[\"cologne\"] = {\"_server\": \"whois.ryce-rsp.com\", \"extend\": \"com\"}\n\tZZ[\"comcast\"] = {\"_server\": \"whois.nic.comcast\", \"extend\": \"com\"}\n\tZZ[\"commbank\"] = {\"_server\": \"whois.nic.commbank\", \"extend\": \"com\"}\n\tZZ[\"compare\"] = {\"_server\": \"whois.nic.compare\", \"extend\": \"com\"}\n\tZZ[\"comsec\"] = {\"_server\": \"whois.nic.comsec\", \"extend\": \"com\"}\n\tZZ[\"cooking\"] = {\"_server\": \"whois.nic.cooking\", \"extend\": \"com\"}\n\tZZ[\"cookingchannel\"] = {\"_server\": \"whois.nic.cookingchannel\", \"extend\": \"com\"}\n\tZZ[\"corsica\"] = {\"_server\": \"whois.nic.corsica\", \"extend\": \"com\"}\n\tZZ[\"country\"] = {\"_server\": \"whois.nic.country\", \"extend\": \"com\"}\n", "ZZ[\"cpa\"] = {\"_server\": \"whois.nic.cpa\", \"extend\": \"com\"}\n\tZZ[\"cruise\"] = {\"_server\": \"whois.nic.cruise\", \"extend\": \"com\"}\n\tZZ[\"cuisinella\"] = {\"_server\": \"whois.nic.cuisinella\", \"extend\": \"com\"}\n\tZZ[\"cymru\"] = {\"_server\": \"whois.nic.cymru\", \"extend\": \"com\"}\n\tZZ[\"data\"] = {\"_server\": \"whois.nic.data\", \"extend\": \"com\"}\n\tZZ[\"day\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"dds\"] = {\"_server\": \"whois.nic.dds\", \"extend\": \"com\"}\n\tZZ[\"deal\"] = {\"_server\": \"whois.nic.deal\", \"extend\": \"com\"}\n\tZZ[\"deloitte\"] = {\"_server\": \"whois.nic.deloitte\", \"extend\": \"com\"}\n\tZZ[\"delta\"] = {\"_server\": \"whois.nic.delta\", \"extend\": \"com\"}\n", "ZZ[\"dish\"] = {\"_server\": \"whois.nic.dish\", \"extend\": \"com\"}\n\tZZ[\"diy\"] = {\"_server\": \"whois.nic.diy\", \"extend\": \"com\"}\n\tZZ[\"dm\"] = {\"_server\": \"whois.dmdomains.dm\", \"extend\": \"com\"}\n\tZZ[\"dnp\"] = {\"_server\": \"whois.nic.dnp\", \"extend\": \"com\"}\n\tZZ[\"dot\"] = {\"_server\": \"whois.nic.dot\", \"extend\": \"com\"}\n\tZZ[\"dtv\"] = {\"_server\": \"whois.nic.dtv\", \"extend\": \"com\"}\n\tZZ[\"dubai\"] = {\"_server\": \"whois.nic.dubai\", \"extend\": \"com\"}\n\tZZ[\"dunlop\"] = {\"_server\": \"whois.nic.dunlop\", \"extend\": \"com\"}\n\tZZ[\"durban\"] = {\"_server\": \"whois.nic.durban\", \"extend\": \"com\"}\n\tZZ[\"dvag\"] = {\"_server\": \"whois.nic.dvag\", \"extend\": \"com\"}\n", "ZZ[\"dvr\"] = {\"_server\": \"whois.nic.dvr\", \"extend\": \"com\"}\n\tZZ[\"earth\"] = {\"_server\": \"whois.nic.earth\", \"extend\": \"com\"}\n\tZZ[\"eco\"] = {\"_server\": \"whois.nic.eco\", \"extend\": \"com\"}\n\tZZ[\"epson\"] = {\"_server\": \"whois.nic.epson\", \"extend\": \"com\"}\n\tZZ[\"ericsson\"] = {\"_server\": \"whois.nic.ericsson\", \"extend\": \"com\"}\n\tZZ[\"erni\"] = {\"_server\": \"whois.nic.erni\", \"extend\": \"com\"}\n\tZZ[\"eurovision\"] = {\"_server\": \"whois.nic.eurovision\", \"extend\": \"com\"}\n\tZZ[\"fairwinds\"] = {\"_server\": \"whois.nic.fairwinds\", \"extend\": \"com\"}\n\tZZ[\"fast\"] = {\"_server\": \"whois.nic.fast\", \"extend\": \"com\"}\n\tZZ[\"fedex\"] = {\"_server\": \"whois.nic.fedex\", \"extend\": \"com\"}\n", "ZZ[\"ferrari\"] = {\"_server\": \"whois.nic.ferrari\", \"extend\": \"com\"}\n\tZZ[\"fidelity\"] = {\"_server\": \"whois.nic.fidelity\", \"extend\": \"com\"}\n\tZZ[\"film\"] = {\"_server\": \"whois.nic.film\", \"extend\": \"com\"}\n\tZZ[\"fire\"] = {\"_server\": \"whois.nic.fire\", \"extend\": \"com\"}\n\tZZ[\"firestone\"] = {\"_server\": \"whois.nic.firestone\", \"extend\": \"com\"}\n\tZZ[\"firmdale\"] = {\"_server\": \"whois.nic.firmdale\", \"extend\": \"com\"}\n\tZZ[\"fishing\"] = {\"_server\": \"whois.nic.fishing\", \"extend\": \"com\"}\n\tZZ[\"foodnetwork\"] = {\"_server\": \"whois.nic.foodnetwork\", \"extend\": \"com\"}\n\tZZ[\"forex\"] = {\"_server\": \"whois.nic.forex\", \"extend\": \"com\"}\n\tZZ[\"fox\"] = {\"_server\": \"whois.nic.fox\", \"extend\": \"com\"}\n", "ZZ[\"free\"] = {\"_server\": \"whois.nic.free\", \"extend\": \"com\"}\n\tZZ[\"fresenius\"] = {\"_server\": \"whois.nic.fresenius\", \"extend\": \"com\"}\n\tZZ[\"frogans\"] = {\"_server\": \"whois.nic.frogans\", \"extend\": \"com\"}\n\tZZ[\"frontdoor\"] = {\"_server\": \"whois.nic.frontdoor\", \"extend\": \"com\"}\n\tZZ[\"gal\"] = {\"_server\": \"whois.nic.gal\", \"extend\": \"com\"}\n\tZZ[\"gallo\"] = {\"_server\": \"whois.nic.gallo\", \"extend\": \"com\"}\n\tZZ[\"gallup\"] = {\"_server\": \"whois.nic.gallup\", \"extend\": \"com\"}\n\tZZ[\"gdn\"] = {\"_server\": \"whois.nic.gdn\", \"extend\": \"com\"}\n\tZZ[\"gea\"] = {\"_server\": \"whois.nic.gea\", \"extend\": \"com\"}\n\tZZ[\"genting\"] = {\"_server\": \"whois.nic.genting\", \"extend\": \"com\"}\n", "ZZ[\"george\"] = {\"_server\": \"whois.nic.george\", \"extend\": \"com\"}\n\tZZ[\"ggee\"] = {\"_server\": \"whois.nic.ggee\", \"extend\": \"com\"}\n\tZZ[\"giving\"] = {\"_server\": \"whois.nic.giving\", \"extend\": \"com\"}\n\tZZ[\"gl\"] = {\"_server\": \"whois.nic.gl\", \"extend\": \"com\"}\n\tZZ[\"gmo\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"gmx\"] = {\"_server\": \"whois.nic.gmx\", \"extend\": \"com\"}\n\tZZ[\"godaddy\"] = {\"_server\": \"whois.nic.godaddy\", \"extend\": \"com\"}\n\tZZ[\"goldpoint\"] = {\"_server\": \"whois.nic.goldpoint\", \"extend\": \"com\"}\n\tZZ[\"goodyear\"] = {\"_server\": \"whois.nic.goodyear\", \"extend\": \"com\"}\n\tZZ[\"google\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n", "ZZ[\"gop\"] = {\"_server\": \"whois.nic.gop\", \"extend\": \"com\"}\n\tZZ[\"got\"] = {\"_server\": \"whois.nic.got\", \"extend\": \"com\"}\n\tZZ[\"gs\"] = {\"_server\": \"whois.nic.gs\", \"extend\": \"com\"}\n\tZZ[\"gucci\"] = {\"_server\": \"whois.nic.gucci\", \"extend\": \"com\"}\n\tZZ[\"hamburg\"] = {\"_server\": \"whois.nic.hamburg\", \"extend\": \"com\"}\n\tZZ[\"hdfc\"] = {\"_server\": \"whois.nic.hdfc\", \"extend\": \"com\"}\n\tZZ[\"hdfcbank\"] = {\"_server\": \"whois.nic.hdfcbank\", \"extend\": \"com\"}\n\tZZ[\"helsinki\"] = {\"_server\": \"whois.nic.helsinki\", \"extend\": \"com\"}\n\tZZ[\"hgtv\"] = {\"_server\": \"whois.nic.hgtv\", \"extend\": \"com\"}\n\tZZ[\"hiv\"] = {\"_server\": \"whois.nic.hiv\", \"extend\": \"com\"}\n", "ZZ[\"hkt\"] = {\"_server\": \"whois.nic.hkt\", \"extend\": \"com\"}\n\tZZ[\"homedepot\"] = {\"_server\": \"whois.nic.homedepot\", \"extend\": \"com\"}\n\tZZ[\"honda\"] = {\"_server\": \"whois.nic.honda\", \"extend\": \"com\"}\n\tZZ[\"horse\"] = {\"_server\": \"whois.nic.horse\", \"extend\": \"com\"}\n\tZZ[\"hot\"] = {\"_server\": \"whois.nic.hot\", \"extend\": \"com\"}\n\tZZ[\"how\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"ht\"] = {\"_server\": \"whois.nic.ht\", \"extend\": \"com\"}\n\tZZ[\"hughes\"] = {\"_server\": \"whois.nic.hughes\", \"extend\": \"com\"}\n\tZZ[\"hyundai\"] = {\"_server\": \"whois.nic.hyundai\", \"extend\": \"com\"}\n\tZZ[\"ibm\"] = {\"_server\": \"whois.nic.ibm\", \"extend\": \"com\"}\n", "ZZ[\"icbc\"] = {\"_server\": \"whois.nic.icbc\", \"extend\": \"com\"}\n\tZZ[\"ice\"] = {\"_server\": \"whois.nic.ice\", \"extend\": \"com\"}\n\tZZ[\"ifm\"] = {\"_server\": \"whois.nic.ifm\", \"extend\": \"com\"}\n\tZZ[\"ikano\"] = {\"_server\": \"whois.nic.ikano\", \"extend\": \"com\"}\n\tZZ[\"imdb\"] = {\"_server\": \"whois.nic.imdb\", \"extend\": \"com\"}\n\tZZ[\"insurance\"] = {\"_server\": \"whois.nic.insurance\", \"extend\": \"com\"}\n\tZZ[\"ist\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"istanbul\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"jaguar\"] = {\"_server\": \"whois.nic.jaguar\", \"extend\": \"com\"}\n\tZZ[\"java\"] = {\"_server\": \"whois.nic.java\", \"extend\": \"com\"}\n", "ZZ[\"jio\"] = {\"_server\": \"whois.nic.jio\", \"extend\": \"com\"}\n\tZZ[\"jobs\"] = {\"_server\": \"whois.nic.jobs\", \"extend\": \"com\"}\n\tZZ[\"joburg\"] = {\"_server\": \"whois.nic.joburg\", \"extend\": \"com\"}\n\tZZ[\"jot\"] = {\"_server\": \"whois.nic.jot\", \"extend\": \"com\"}\n\tZZ[\"joy\"] = {\"_server\": \"whois.nic.joy\", \"extend\": \"com\"}\n\tZZ[\"juniper\"] = {\"_server\": \"whois.nic.juniper\", \"extend\": \"com\"}\n\tZZ[\"kddi\"] = {\"_server\": \"whois.nic.kddi\", \"extend\": \"com\"}\n\tZZ[\"kerryhotels\"] = {\"_server\": \"whois.nic.kerryhotels\", \"extend\": \"com\"}\n\tZZ[\"kerrylogistics\"] = {\"_server\": \"whois.nic.kerrylogistics\", \"extend\": \"com\"}\n\tZZ[\"kerryproperties\"] = {\"_server\": \"whois.nic.kerryproperties\", \"extend\": \"com\"}\n", "ZZ[\"kfh\"] = {\"_server\": \"whois.nic.kfh\", \"extend\": \"com\"}\n\tZZ[\"kia\"] = {\"_server\": \"whois.nic.kia\", \"extend\": \"com\"}\n\tZZ[\"kids\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"kim\"] = {\"_server\": \"whois.nic.kim\", \"extend\": \"com\"}\n\tZZ[\"kindle\"] = {\"_server\": \"whois.nic.kindle\", \"extend\": \"com\"}\n\tZZ[\"koeln\"] = {\"_server\": \"whois.ryce-rsp.com\", \"extend\": \"com\"}\n\tZZ[\"komatsu\"] = {\"_server\": \"whois.nic.komatsu\", \"extend\": \"com\"}\n\tZZ[\"kosher\"] = {\"_server\": \"whois.nic.kosher\", \"extend\": \"com\"}\n\tZZ[\"krd\"] = {\"_server\": \"whois.nic.krd\", \"extend\": \"com\"}\n\tZZ[\"kuokgroup\"] = {\"_server\": \"whois.nic.kuokgroup\", \"extend\": \"com\"}\n", "ZZ[\"ky\"] = {\"_server\": \"whois.kyregistry.ky\", \"extend\": \"com\"}\n\tZZ[\"kyoto\"] = {\"_server\": \"whois.nic.kyoto\", \"extend\": \"com\"}\n\tZZ[\"lacaixa\"] = {\"_server\": \"whois.nic.lacaixa\", \"extend\": \"com\"}\n\tZZ[\"lamer\"] = {\"_server\": \"whois.nic.lamer\", \"extend\": \"com\"}\n\tZZ[\"lancaster\"] = {\"_server\": \"whois.nic.lancaster\", \"extend\": \"com\"}\n\tZZ[\"landrover\"] = {\"_server\": \"whois.nic.landrover\", \"extend\": \"com\"}\n\tZZ[\"latino\"] = {\"_server\": \"whois.nic.latino\", \"extend\": \"com\"}\n\tZZ[\"latrobe\"] = {\"_server\": \"whois.nic.latrobe\", \"extend\": \"com\"}\n\tZZ[\"law\"] = {\"_server\": \"whois.nic.law\", \"extend\": \"com\"}\n\tZZ[\"lb\"] = {\"_server\": \"whois.lbdr.org.lb\", \"extend\": \"com\"}\n", "ZZ[\"lds\"] = {\"_server\": \"whois.nic.lds\", \"extend\": \"com\"}\n\tZZ[\"leclerc\"] = {\"_server\": \"whois.nic.leclerc\", \"extend\": \"com\"}\n\tZZ[\"lefrak\"] = {\"_server\": \"whois.nic.lefrak\", \"extend\": \"com\"}\n\tZZ[\"lego\"] = {\"_server\": \"whois.nic.lego\", \"extend\": \"com\"}\n\tZZ[\"lexus\"] = {\"_server\": \"whois.nic.lexus\", \"extend\": \"com\"}\n\tZZ[\"lgbt\"] = {\"_server\": \"whois.nic.lgbt\", \"extend\": \"com\"}\n\tZZ[\"lidl\"] = {\"_server\": \"whois.nic.lidl\", \"extend\": \"com\"}\n\tZZ[\"lifestyle\"] = {\"_server\": \"whois.nic.lifestyle\", \"extend\": \"com\"}\n\tZZ[\"like\"] = {\"_server\": \"whois.nic.like\", \"extend\": \"com\"}\n\tZZ[\"linde\"] = {\"_server\": \"whois.nic.linde\", \"extend\": \"com\"}\n", "ZZ[\"lipsy\"] = {\"_server\": \"whois.nic.lipsy\", \"extend\": \"com\"}\n\tZZ[\"llc\"] = {\"_server\": \"whois.nic.llc\", \"extend\": \"com\"}\n\tZZ[\"llp\"] = {\"_server\": \"whois.nic.llp\", \"extend\": \"com\"}\n\tZZ[\"locker\"] = {\"_server\": \"whois.nic.locker\", \"extend\": \"com\"}\n\tZZ[\"locus\"] = {\"_server\": \"whois.nic.locus\", \"extend\": \"com\"}\n\tZZ[\"lotte\"] = {\"_server\": \"whois.nic.lotte\", \"extend\": \"com\"}\n\tZZ[\"lotto\"] = {\"_server\": \"whois.nic.lotto\", \"extend\": \"com\"}\n\tZZ[\"lpl\"] = {\"_server\": \"whois.nic.lpl\", \"extend\": \"com\"}\n\tZZ[\"ltda\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"lundbeck\"] = {\"_server\": \"whois.nic.lundbeck\", \"extend\": \"com\"}\n", "ZZ[\"luxe\"] = {\"_server\": \"whois.nic.luxe\", \"extend\": \"com\"}\n\tZZ[\"macys\"] = {\"_server\": \"whois.nic.macys\", \"extend\": \"com\"}\n\tZZ[\"madrid\"] = {\"_server\": \"whois.nic.madrid\", \"extend\": \"com\"}\n\tZZ[\"man\"] = {\"_server\": \"whois.nic.man\", \"extend\": \"com\"}\n\tZZ[\"mango\"] = {\"_server\": \"whois.nic.mango\", \"extend\": \"com\"}\n\tZZ[\"markets\"] = {\"_server\": \"whois.nic.markets\", \"extend\": \"com\"}\n\tZZ[\"maserati\"] = {\"_server\": \"whois.nic.maserati\", \"extend\": \"com\"}\n\tZZ[\"mckinsey\"] = {\"_server\": \"whois.nic.mckinsey\", \"extend\": \"com\"}\n\tZZ[\"med\"] = {\"_server\": \"whois.nic.med\", \"extend\": \"com\"}\n\tZZ[\"melbourne\"] = {\"_server\": \"whois.nic.melbourne\", \"extend\": \"com\"}\n", "ZZ[\"men\"] = {\"_server\": \"whois.nic.men\", \"extend\": \"com\"}\n\tZZ[\"menu\"] = {\"_server\": \"whois.nic.menu\", \"extend\": \"com\"}\n\tZZ[\"miami\"] = {\"_server\": \"whois.nic.miami\", \"extend\": \"com\"}\n\tZZ[\"mini\"] = {\"_server\": \"whois.nic.mini\", \"extend\": \"com\"}\n\tZZ[\"mls\"] = {\"_server\": \"whois.nic.mls\", \"extend\": \"com\"}\n\tZZ[\"mma\"] = {\"_server\": \"whois.nic.mma\", \"extend\": \"com\"}\n\tZZ[\"mobile\"] = {\"_server\": \"whois.nic.mobile\", \"extend\": \"com\"}\n\tZZ[\"moi\"] = {\"_server\": \"whois.nic.moi\", \"extend\": \"com\"}\n\tZZ[\"mom\"] = {\"_server\": \"whois.nic.mom\", \"extend\": \"com\"}\n\tZZ[\"monash\"] = {\"_server\": \"whois.nic.monash\", \"extend\": \"com\"}\n", "ZZ[\"mormon\"] = {\"_server\": \"whois.nic.mormon\", \"extend\": \"com\"}\n\tZZ[\"moscow\"] = {\"_server\": \"whois.nic.moscow\", \"extend\": \"com\"}\n\tZZ[\"mr\"] = {\"_server\": \"whois.nic.mr\", \"extend\": \"com\"}\n\tZZ[\"ms\"] = {\"_server\": \"whois.nic.ms\", \"extend\": \"com\"}\n\tZZ[\"mtn\"] = {\"_server\": \"whois.nic.mtn\", \"extend\": \"com\"}\n\tZZ[\"mtr\"] = {\"_server\": \"whois.nic.mtr\", \"extend\": \"com\"}\n\tZZ[\"museum\"] = {\"_server\": \"whois.nic.museum\", \"extend\": \"com\"}\n\tZZ[\"music\"] = {\"_server\": \"whois.nic.music\", \"extend\": \"com\"}\n\tZZ[\"mz\"] = {\"_server\": \"whois.nic.mz\", \"extend\": \"com\"}\n\tZZ[\"na\"] = {\"_server\": \"whois.na-nic.com.na\", \"extend\": \"com\"}\n", "ZZ[\"nab\"] = {\"_server\": \"whois.nic.nab\", \"extend\": \"com\"}\n\tZZ[\"nagoya\"] = {\"_server\": \"whois.nic.nagoya\", \"extend\": \"com\"}\n\tZZ[\"nec\"] = {\"_server\": \"whois.nic.nec\", \"extend\": \"com\"}\n\tZZ[\"netbank\"] = {\"_server\": \"whois.nic.netbank\", \"extend\": \"com\"}\n\tZZ[\"new\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"next\"] = {\"_server\": \"whois.nic.next\", \"extend\": \"com\"}\n\tZZ[\"nextdirect\"] = {\"_server\": \"whois.nic.nextdirect\", \"extend\": \"com\"}\n\tZZ[\"nf\"] = {\"_server\": \"whois.nic.nf\", \"extend\": \"com\"}\n\tZZ[\"ngo\"] = {\"_server\": \"whois.nic.ngo\", \"extend\": \"com\"}\n\tZZ[\"nhk\"] = {\"_server\": \"whois.nic.nhk\", \"extend\": \"com\"}\n", "ZZ[\"nico\"] = {\"_server\": \"whois.nic.nico\", \"extend\": \"com\"}\n\tZZ[\"nikon\"] = {\"_server\": \"whois.nic.nikon\", \"extend\": \"com\"}\n\tZZ[\"nissay\"] = {\"_server\": \"whois.nic.nissay\", \"extend\": \"com\"}\n\tZZ[\"norton\"] = {\"_server\": \"whois.nic.norton\", \"extend\": \"com\"}\n\tZZ[\"now\"] = {\"_server\": \"whois.nic.now\", \"extend\": \"com\"}\n\tZZ[\"nowruz\"] = {\"_server\": \"whois.nic.nowruz\", \"extend\": \"com\"}\n\tZZ[\"nowtv\"] = {\"_server\": \"whois.nic.nowtv\", \"extend\": \"com\"}\n\tZZ[\"obi\"] = {\"_server\": \"whois.nic.obi\", \"extend\": \"com\"}\n\tZZ[\"olayan\"] = {\"_server\": \"whois.nic.olayan\", \"extend\": \"com\"}\n\tZZ[\"olayangroup\"] = {\"_server\": \"whois.nic.olayangroup\", \"extend\": \"com\"}\n", "ZZ[\"ollo\"] = {\"_server\": \"whois.nic.ollo\", \"extend\": \"com\"}\n\tZZ[\"om\"] = {\"_server\": \"whois.registry.om\", \"extend\": \"com\"}\n\tZZ[\"omega\"] = {\"_server\": \"whois.nic.omega\", \"extend\": \"com\"}\n\tZZ[\"oracle\"] = {\"_server\": \"whois.nic.oracle\", \"extend\": \"com\"}\n\tZZ[\"orange\"] = {\"_server\": \"whois.nic.orange\", \"extend\": \"com\"}\n\tZZ[\"organic\"] = {\"_server\": \"whois.nic.organic\", \"extend\": \"com\"}\n\tZZ[\"origins\"] = {\"_server\": \"whois.nic.origins\", \"extend\": \"com\"}\n\tZZ[\"osaka\"] = {\"_server\": \"whois.nic.osaka\", \"extend\": \"com\"}\n\tZZ[\"otsuka\"] = {\"_server\": \"whois.nic.otsuka\", \"extend\": \"com\"}\n\tZZ[\"ott\"] = {\"_server\": \"whois.nic.ott\", \"extend\": \"com\"}\n", "ZZ[\"paris\"] = {\"_server\": \"whois.nic.paris\", \"extend\": \"com\"}\n\tZZ[\"pars\"] = {\"_server\": \"whois.nic.pars\", \"extend\": \"com\"}\n\tZZ[\"pay\"] = {\"_server\": \"whois.nic.pay\", \"extend\": \"com\"}\n\tZZ[\"pccw\"] = {\"_server\": \"whois.nic.pccw\", \"extend\": \"com\"}\n\tZZ[\"philips\"] = {\"_server\": \"whois.nic.philips\", \"extend\": \"com\"}\n\tZZ[\"phone\"] = {\"_server\": \"whois.nic.phone\", \"extend\": \"com\"}\n\tZZ[\"physio\"] = {\"_server\": \"whois.nic.physio\", \"extend\": \"com\"}\n\tZZ[\"pid\"] = {\"_server\": \"whois.nic.pid\", \"extend\": \"com\"}\n\tZZ[\"pin\"] = {\"_server\": \"whois.nic.pin\", \"extend\": \"com\"}\n\tZZ[\"pink\"] = {\"_server\": \"whois.nic.pink\", \"extend\": \"com\"}\n", "ZZ[\"pioneer\"] = {\"_server\": \"whois.nic.pioneer\", \"extend\": \"com\"}\n\tZZ[\"playstation\"] = {\"_server\": \"whois.nic.playstation\", \"extend\": \"com\"}\n\tZZ[\"pnc\"] = {\"_server\": \"whois.nic.pnc\", \"extend\": \"com\"}\n\tZZ[\"pohl\"] = {\"_server\": \"whois.nic.pohl\", \"extend\": \"com\"}\n\tZZ[\"poker\"] = {\"_server\": \"whois.nic.poker\", \"extend\": \"com\"}\n\tZZ[\"politie\"] = {\"_server\": \"whois.nic.politie\", \"extend\": \"com\"}\n\tZZ[\"porn\"] = {\"_server\": \"whois.nic.porn\", \"extend\": \"com\"}\n\tZZ[\"pr\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"prime\"] = {\"_server\": \"whois.nic.prime\", \"extend\": \"com\"}\n\tZZ[\"qa\"] = {\"_server\": \"whois.registry.qa\", \"extend\": \"com\"}\n", "ZZ[\"quebec\"] = {\"_server\": \"whois.nic.quebec\", \"extend\": \"com\"}\n\tZZ[\"read\"] = {\"_server\": \"whois.nic.read\", \"extend\": \"com\"}\n\tZZ[\"realty\"] = {\"_server\": \"whois.nic.realty\", \"extend\": \"com\"}\n\tZZ[\"redstone\"] = {\"_server\": \"whois.nic.redstone\", \"extend\": \"com\"}\n\tZZ[\"reliance\"] = {\"_server\": \"whois.nic.reliance\", \"extend\": \"com\"}\n\tZZ[\"rexroth\"] = {\"_server\": \"whois.nic.rexroth\", \"extend\": \"com\"}\n\tZZ[\"rich\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"richardli\"] = {\"_server\": \"whois.nic.richardli\", \"extend\": \"com\"}\n\tZZ[\"ricoh\"] = {\"_server\": \"whois.nic.ricoh\", \"extend\": \"com\"}\n\tZZ[\"ril\"] = {\"_server\": \"whois.nic.ril\", \"extend\": \"com\"}\n", "ZZ[\"rodeo\"] = {\"_server\": \"whois.nic.rodeo\", \"extend\": \"com\"}\n\tZZ[\"room\"] = {\"_server\": \"whois.nic.room\", \"extend\": \"com\"}\n\tZZ[\"rsvp\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"rugby\"] = {\"_server\": \"whois.nic.rugby\", \"extend\": \"com\"}\n\tZZ[\"ruhr\"] = {\"_server\": \"whois.nic.ruhr\", \"extend\": \"com\"}\n\tZZ[\"rwe\"] = {\"_server\": \"whois.nic.rwe\", \"extend\": \"com\"}\n\tZZ[\"safe\"] = {\"_server\": \"whois.nic.safe\", \"extend\": \"com\"}\n\tZZ[\"safety\"] = {\"_server\": \"whois.nic.safety\", \"extend\": \"com\"}\n\tZZ[\"samsclub\"] = {\"_server\": \"whois.nic.samsclub\", \"extend\": \"com\"}\n\tZZ[\"samsung\"] = {\"_server\": \"whois.nic.samsung\", \"extend\": \"com\"}\n", "ZZ[\"sandvik\"] = {\"_server\": \"whois.nic.sandvik\", \"extend\": \"com\"}\n\tZZ[\"sandvikcoromant\"] = {\"_server\": \"whois.nic.sandvikcoromant\", \"extend\": \"com\"}\n\tZZ[\"sanofi\"] = {\"_server\": \"whois.nic.sanofi\", \"extend\": \"com\"}\n\tZZ[\"sap\"] = {\"_server\": \"whois.nic.sap\", \"extend\": \"com\"}\n\tZZ[\"save\"] = {\"_server\": \"whois.nic.save\", \"extend\": \"com\"}\n\tZZ[\"saxo\"] = {\"_server\": \"whois.nic.saxo\", \"extend\": \"com\"}\n\tZZ[\"sbi\"] = {\"_server\": \"whois.nic.sbi\", \"extend\": \"com\"}\n\tZZ[\"sc\"] = {\"_server\": \"whois2.afilias-grs.net\", \"extend\": \"com\"}\n\tZZ[\"sca\"] = {\"_server\": \"whois.nic.sca\", \"extend\": \"com\"}\n\tZZ[\"scb\"] = {\"_server\": \"whois.nic.scb\", \"extend\": \"com\"}\n", "ZZ[\"schmidt\"] = {\"_server\": \"whois.nic.schmidt\", \"extend\": \"com\"}\n\tZZ[\"scholarships\"] = {\"_server\": \"whois.nic.scholarships\", \"extend\": \"com\"}\n\tZZ[\"schwarz\"] = {\"_server\": \"whois.nic.schwarz\", \"extend\": \"com\"}\n\tZZ[\"scot\"] = {\"_server\": \"whois.nic.scot\", \"extend\": \"com\"}\n\tZZ[\"seat\"] = {\"_server\": \"whois.nic.seat\", \"extend\": \"com\"}\n\tZZ[\"secure\"] = {\"_server\": \"whois.nic.secure\", \"extend\": \"com\"}\n\tZZ[\"seek\"] = {\"_server\": \"whois.nic.seek\", \"extend\": \"com\"}\n\tZZ[\"select\"] = {\"_server\": \"whois.nic.select\", \"extend\": \"com\"}\n\tZZ[\"seven\"] = {\"_server\": \"whois.nic.seven\", \"extend\": \"com\"}\n\tZZ[\"sex\"] = {\"_server\": \"whois.nic.sex\", \"extend\": \"com\"}\n", "ZZ[\"sfr\"] = {\"_server\": \"whois.nic.sfr\", \"extend\": \"com\"}\n\tZZ[\"shangrila\"] = {\"_server\": \"whois.nic.shangrila\", \"extend\": \"com\"}\n\tZZ[\"shell\"] = {\"_server\": \"whois.nic.shell\", \"extend\": \"com\"}\n\tZZ[\"shia\"] = {\"_server\": \"whois.nic.shia\", \"extend\": \"com\"}\n\tZZ[\"shiksha\"] = {\"_server\": \"whois.nic.shiksha\", \"extend\": \"com\"}\n\tZZ[\"silk\"] = {\"_server\": \"whois.nic.silk\", \"extend\": \"com\"}\n\tZZ[\"sina\"] = {\"_server\": \"whois.nic.sina\", \"extend\": \"com\"}\n\tZZ[\"ski\"] = {\"_server\": \"whois.nic.ski\", \"extend\": \"com\"}\n\tZZ[\"sky\"] = {\"_server\": \"whois.nic.sky\", \"extend\": \"com\"}\n\tZZ[\"sling\"] = {\"_server\": \"whois.nic.sling\", \"extend\": \"com\"}\n", "ZZ[\"smart\"] = {\"_server\": \"whois.nic.smart\", \"extend\": \"com\"}\n\tZZ[\"smile\"] = {\"_server\": \"whois.nic.smile\", \"extend\": \"com\"}\n\tZZ[\"sncf\"] = {\"_server\": \"whois.nic.sncf\", \"extend\": \"com\"}\n\tZZ[\"sony\"] = {\"_server\": \"whois.nic.sony\", \"extend\": \"com\"}\n\tZZ[\"soy\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"spa\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"sport\"] = {\"_server\": \"whois.nic.sport\", \"extend\": \"com\"}\n\tZZ[\"spot\"] = {\"_server\": \"whois.nic.spot\", \"extend\": \"com\"}\n\tZZ[\"ss\"] = {\"_server\": \"whois.nic.ss\", \"extend\": \"com\"}\n\tZZ[\"star\"] = {\"_server\": \"whois.nic.star\", \"extend\": \"com\"}\n", "ZZ[\"statebank\"] = {\"_server\": \"whois.nic.statebank\", \"extend\": \"com\"}\n\tZZ[\"stc\"] = {\"_server\": \"whois.nic.stc\", \"extend\": \"com\"}\n\tZZ[\"stcgroup\"] = {\"_server\": \"whois.nic.stcgroup\", \"extend\": \"com\"}\n\tZZ[\"stream\"] = {\"_server\": \"whois.nic.stream\", \"extend\": \"com\"}\n\tZZ[\"sucks\"] = {\"_server\": \"whois.nic.sucks\", \"extend\": \"com\"}\n\tZZ[\"surf\"] = {\"_server\": \"whois.nic.surf\", \"extend\": \"com\"}\n\tZZ[\"suzuki\"] = {\"_server\": \"whois.nic.suzuki\", \"extend\": \"com\"}\n\tZZ[\"swatch\"] = {\"_server\": \"whois.nic.swatch\", \"extend\": \"com\"}\n\tZZ[\"swiss\"] = {\"_server\": \"whois.nic.swiss\", \"extend\": \"com\"}\n\tZZ[\"sydney\"] = {\"_server\": \"whois.nic.sydney\", \"extend\": \"com\"}\n", "ZZ[\"tab\"] = {\"_server\": \"whois.nic.tab\", \"extend\": \"com\"}\n\tZZ[\"taipei\"] = {\"_server\": \"whois.nic.taipei\", \"extend\": \"com\"}\n\tZZ[\"talk\"] = {\"_server\": \"whois.nic.talk\", \"extend\": \"com\"}\n\tZZ[\"taobao\"] = {\"_server\": \"whois.nic.taobao\", \"extend\": \"com\"}\n\tZZ[\"tatamotors\"] = {\"_server\": \"whois.nic.tatamotors\", \"extend\": \"com\"}\n\tZZ[\"tatar\"] = {\"_server\": \"whois.nic.tatar\", \"extend\": \"com\"}\n\tZZ[\"tci\"] = {\"_server\": \"whois.nic.tci\", \"extend\": \"com\"}\n\tZZ[\"tdk\"] = {\"_server\": \"whois.nic.tdk\", \"extend\": \"com\"}\n\tZZ[\"teva\"] = {\"_server\": \"whois.nic.teva\", \"extend\": \"com\"}\n\tZZ[\"thd\"] = {\"_server\": \"whois.nic.thd\", \"extend\": \"com\"}\n", "ZZ[\"tiaa\"] = {\"_server\": \"whois.nic.tiaa\", \"extend\": \"com\"}\n\tZZ[\"tiffany\"] = {\"_server\": \"whois.nic.tiffany\", \"extend\": \"com\"}\n\tZZ[\"tirol\"] = {\"_server\": \"whois.nic.tirol\", \"extend\": \"com\"}\n\tZZ[\"tmall\"] = {\"_server\": \"whois.nic.tmall\", \"extend\": \"com\"}\n\tZZ[\"toray\"] = {\"_server\": \"whois.nic.toray\", \"extend\": \"com\"}\n\tZZ[\"toshiba\"] = {\"_server\": \"whois.nic.toshiba\", \"extend\": \"com\"}\n\tZZ[\"total\"] = {\"_server\": \"whois.nic.total\", \"extend\": \"com\"}\n\tZZ[\"toyota\"] = {\"_server\": \"whois.nic.toyota\", \"extend\": \"com\"}\n\tZZ[\"trading\"] = {\"_server\": \"whois.nic.trading\", \"extend\": \"com\"}\n\tZZ[\"travelchannel\"] = {\"_server\": \"whois.nic.travelchannel\", \"extend\": \"com\"}\n", "ZZ[\"trust\"] = {\"_server\": \"whois.nic.trust\", \"extend\": \"com\"}\n\tZZ[\"tui\"] = {\"_server\": \"whois.nic.tui\", \"extend\": \"com\"}\n\tZZ[\"tunes\"] = {\"_server\": \"whois.nic.tunes\", \"extend\": \"com\"}\n\tZZ[\"tushu\"] = {\"_server\": \"whois.nic.tushu\", \"extend\": \"com\"}\n\tZZ[\"tvs\"] = {\"_server\": \"whois.nic.tvs\", \"extend\": \"com\"}\n\tZZ[\"ubank\"] = {\"_server\": \"whois.nic.ubank\", \"extend\": \"com\"}\n\tZZ[\"ubs\"] = {\"_server\": \"whois.nic.ubs\", \"extend\": \"com\"}\n\tZZ[\"unicom\"] = {\"_server\": \"whois.nic.unicom\", \"extend\": \"com\"}\n\tZZ[\"ups\"] = {\"_server\": \"whois.nic.ups\", \"extend\": \"com\"}\n\tZZ[\"vana\"] = {\"_server\": \"whois.nic.vana\", \"extend\": \"com\"}\n", "ZZ[\"vanguard\"] = {\"_server\": \"whois.nic.vanguard\", \"extend\": \"com\"}\n\tZZ[\"vegas\"] = {\"_server\": \"whois.nic.vegas\", \"extend\": \"com\"}\n\tZZ[\"verisign\"] = {\"_server\": \"whois.nic.verisign\", \"extend\": \"com\"}\n\tZZ[\"versicherung\"] = {\"_server\": \"whois.nic.versicherung\", \"extend\": \"com\"}\n\tZZ[\"vg\"] = {\"_server\": \"whois.nic.vg\", \"extend\": \"com\"}\n\tZZ[\"virgin\"] = {\"_server\": \"whois.nic.virgin\", \"extend\": \"com\"}\n\tZZ[\"visa\"] = {\"_server\": \"whois.nic.visa\", \"extend\": \"com\"}\n\tZZ[\"viva\"] = {\"_server\": \"whois.nic.viva\", \"extend\": \"com\"}\n\tZZ[\"vlaanderen\"] = {\"_server\": \"whois.nic.vlaanderen\", \"extend\": \"com\"}\n\tZZ[\"vodka\"] = {\"_server\": \"whois.nic.vodka\", \"extend\": \"com\"}\n", "ZZ[\"volvo\"] = {\"_server\": \"whois.nic.volvo\", \"extend\": \"com\"}\n\tZZ[\"vote\"] = {\"_server\": \"whois.nic.vote\", \"extend\": \"com\"}\n\tZZ[\"voting\"] = {\"_server\": \"whois.nic.voting\", \"extend\": \"com\"}\n\tZZ[\"voto\"] = {\"_server\": \"whois.nic.voto\", \"extend\": \"com\"}\n\tZZ[\"wales\"] = {\"_server\": \"whois.nic.wales\", \"extend\": \"com\"}\n\tZZ[\"walmart\"] = {\"_server\": \"whois.nic.walmart\", \"extend\": \"com\"}\n\tZZ[\"walter\"] = {\"_server\": \"whois.nic.walter\", \"extend\": \"com\"}\n\tZZ[\"wanggou\"] = {\"_server\": \"whois.nic.wanggou\", \"extend\": \"com\"}\n\tZZ[\"watches\"] = {\"_server\": \"whois.nic.watches\", \"extend\": \"com\"}\n\tZZ[\"weber\"] = {\"_server\": \"whois.nic.weber\", \"extend\": \"com\"}\n", "ZZ[\"wed\"] = {\"_server\": \"whois.nic.wed\", \"extend\": \"com\"}\n\tZZ[\"wedding\"] = {\"_server\": \"whois.nic.wedding\", \"extend\": \"com\"}\n\tZZ[\"weibo\"] = {\"_server\": \"whois.nic.weibo\", \"extend\": \"com\"}\n\tZZ[\"whoswho\"] = {\"_server\": \"whois.nic.whoswho\", \"extend\": \"com\"}\n\tZZ[\"wien\"] = {\"_server\": \"whois.nic.wien\", \"extend\": \"com\"}\n\tZZ[\"wme\"] = {\"_server\": \"whois.nic.wme\", \"extend\": \"com\"}\n\tZZ[\"wolterskluwer\"] = {\"_server\": \"whois.nic.wolterskluwer\", \"extend\": \"com\"}\n\tZZ[\"woodside\"] = {\"_server\": \"whois.nic.woodside\", \"extend\": \"com\"}\n\tZZ[\"wow\"] = {\"_server\": \"whois.nic.wow\", \"extend\": \"com\"}\n\tZZ[\"wtc\"] = {\"_server\": \"whois.nic.wtc\", \"extend\": \"com\"}\n", "ZZ[\"xerox\"] = {\"_server\": \"whois.nic.xerox\", \"extend\": \"com\"}\n\tZZ[\"xfinity\"] = {\"_server\": \"whois.nic.xfinity\", \"extend\": \"com\"}\n\tZZ[\"xn--11b4c3d\"] = {\"_server\": \"whois.nic.xn--11b4c3d\", \"extend\": \"com\"}\n\tZZ[\"xn--1qqw23a\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--3pxu8k\"] = {\"_server\": \"whois.nic.xn--3pxu8k\", \"extend\": \"com\"}\n\tZZ[\"xn--42c2d9a\"] = {\"_server\": \"whois.nic.xn--42c2d9a\", \"extend\": \"com\"}\n\tZZ[\"xn--4gbrim\"] = {\"_server\": \"whois.nic.xn--4gbrim\", \"extend\": \"com\"}\n\tZZ[\"xn--55qx5d\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--5su34j936bgsg\"] = {\"_server\": \"whois.nic.xn--5su34j936bgsg\", \"extend\": \"com\"}\n\tZZ[\"xn--5tzm5g\"] = {\"_server\": \"whois.nic.xn--5tzm5g\", \"extend\": \"com\"}\n", "ZZ[\"xn--6frz82g\"] = {\"_server\": \"whois.nic.xn--6frz82g\", \"extend\": \"com\"}\n\tZZ[\"xn--6qq986b3xl\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--80adxhks\"] = {\"_server\": \"whois.nic.xn--80adxhks\", \"extend\": \"com\"}\n\tZZ[\"xn--80aqecdr1a\"] = {\"_server\": \"whois.nic.xn--80aqecdr1a\", \"extend\": \"com\"}\n\tZZ[\"xn--80asehdb\"] = {\"_server\": \"whois.nic.xn--80asehdb\", \"extend\": \"com\"}\n\tZZ[\"xn--80aswg\"] = {\"_server\": \"whois.nic.xn--80aswg\", \"extend\": \"com\"}\n\tZZ[\"xn--8y0a063a\"] = {\"_server\": \"whois.nic.xn--8y0a063a\", \"extend\": \"com\"}\n\tZZ[\"xn--9dbq2a\"] = {\"_server\": \"whois.nic.xn--9dbq2a\", \"extend\": \"com\"}\n\tZZ[\"xn--9krt00a\"] = {\"_server\": \"whois.nic.xn--9krt00a\", \"extend\": \"com\"}\n\tZZ[\"xn--c1avg\"] = {\"_server\": \"whois.nic.xn--c1avg\", \"extend\": \"com\"}\n", "ZZ[\"xn--c2br7g\"] = {\"_server\": \"whois.nic.xn--c2br7g\", \"extend\": \"com\"}\n\tZZ[\"xn--cckwcxetd\"] = {\"_server\": \"whois.nic.xn--cckwcxetd\", \"extend\": \"com\"}\n\tZZ[\"xn--czrs0t\"] = {\"_server\": \"whois.nic.xn--czrs0t\", \"extend\": \"com\"}\n\tZZ[\"xn--efvy88h\"] = {\"_server\": \"whois.nic.xn--efvy88h\", \"extend\": \"com\"}\n\tZZ[\"xn--fhbei\"] = {\"_server\": \"whois.nic.xn--fhbei\", \"extend\": \"com\"}\n\tZZ[\"xn--fiqs8s\"] = {\"_server\": \"cwhois.cnnic.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--fiqz9s\"] = {\"_server\": \"cwhois.cnnic.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--fjq720a\"] = {\"_server\": \"whois.nic.xn--fjq720a\", \"extend\": \"com\"}\n\tZZ[\"xn--fzys8d69uvgm\"] = {\"_server\": \"whois.nic.xn--fzys8d69uvgm\", \"extend\": \"com\"}\n\tZZ[\"xn--i1b6b1a6a2e\"] = {\"_server\": \"whois.nic.xn--i1b6b1a6a2e\", \"extend\": \"com\"}\n", "ZZ[\"xn--io0a7i\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--j1aef\"] = {\"_server\": \"whois.nic.xn--j1aef\", \"extend\": \"com\"}\n\tZZ[\"xn--jlq480n2rg\"] = {\"_server\": \"whois.nic.xn--jlq480n2rg\", \"extend\": \"com\"}\n\tZZ[\"xn--kcrx77d1x4a\"] = {\"_server\": \"whois.nic.xn--kcrx77d1x4a\", \"extend\": \"com\"}\n\tZZ[\"xn--kput3i\"] = {\"_server\": \"whois.nic.xn--kput3i\", \"extend\": \"com\"}\n\tZZ[\"xn--mgba7c0bbn0a\"] = {\"_server\": \"whois.nic.xn--mgba7c0bbn0a\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbab2bd\"] = {\"_server\": \"whois.nic.xn--mgbab2bd\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbca7dzdo\"] = {\"_server\": \"whois.nic.xn--mgbca7dzdo\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbi4ecexp\"] = {\"_server\": \"whois.nic.xn--mgbi4ecexp\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbt3dhd\"] = {\"_server\": \"whois.nic.xn--mgbt3dhd\", \"extend\": \"com\"}\n", "ZZ[\"xn--mk1bu44c\"] = {\"_server\": \"whois.nic.xn--mk1bu44c\", \"extend\": \"com\"}\n\tZZ[\"xn--mxtq1m\"] = {\"_server\": \"whois.nic.xn--mxtq1m\", \"extend\": \"com\"}\n\tZZ[\"xn--ngbc5azd\"] = {\"_server\": \"whois.nic.xn--ngbc5azd\", \"extend\": \"com\"}\n\tZZ[\"xn--ngbe9e0a\"] = {\"_server\": \"whois.nic.xn--ngbe9e0a\", \"extend\": \"com\"}\n\tZZ[\"xn--ngbrx\"] = {\"_server\": \"whois.nic.xn--ngbrx\", \"extend\": \"com\"}\n\tZZ[\"xn--nqv7f\"] = {\"_server\": \"whois.nic.xn--nqv7f\", \"extend\": \"com\"}\n\tZZ[\"xn--nqv7fs00ema\"] = {\"_server\": \"whois.nic.xn--nqv7fs00ema\", \"extend\": \"com\"}\n\tZZ[\"xn--pssy2u\"] = {\"_server\": \"whois.nic.xn--pssy2u\", \"extend\": \"com\"}\n\tZZ[\"xn--q9jyb4c\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"xn--ses554g\"] = {\"_server\": \"whois.nic.xn--ses554g\", \"extend\": \"com\"}\n", "ZZ[\"xn--t60b56a\"] = {\"_server\": \"whois.nic.xn--t60b56a\", \"extend\": \"com\"}\n\tZZ[\"xn--tckwe\"] = {\"_server\": \"whois.nic.xn--tckwe\", \"extend\": \"com\"}\n\tZZ[\"xn--tiq49xqyj\"] = {\"_server\": \"whois.nic.xn--tiq49xqyj\", \"extend\": \"com\"}\n\tZZ[\"xn--unup4y\"] = {\"_server\": \"whois.nic.xn--unup4y\", \"extend\": \"com\"}\n\tZZ[\"xn--vermgensberater-ctb\"] = {\"_server\": \"whois.nic.xn--vermgensberater-ctb\", \"extend\": \"com\"}\n\tZZ[\"xn--vermgensberatung-pwb\"] = {\"_server\": \"whois.nic.xn--vermgensberatung-pwb\", \"extend\": \"com\"}\n\tZZ[\"xn--vhquv\"] = {\"_server\": \"whois.nic.xn--vhquv\", \"extend\": \"com\"}\n\tZZ[\"xn--w4r85el8fhu5dnra\"] = {\"_server\": \"whois.nic.xn--w4r85el8fhu5dnra\", \"extend\": \"com\"}\n\tZZ[\"xn--w4rs40l\"] = {\"_server\": \"whois.nic.xn--w4rs40l\", \"extend\": \"com\"}\n\tZZ[\"xxx\"] = {\"_server\": \"whois.nic.xxx\", \"extend\": \"com\"}\n", "ZZ[\"yamaxun\"] = {\"_server\": \"whois.nic.yamaxun\", \"extend\": \"com\"}\n\tZZ[\"yoga\"] = {\"_server\": \"whois.nic.yoga\", \"extend\": \"com\"}\n\tZZ[\"yokohama\"] = {\"_server\": \"whois.nic.yokohama\", \"extend\": \"com\"}\n\tZZ[\"you\"] = {\"_server\": \"whois.nic.you\", \"extend\": \"com\"}\n\tZZ[\"zappos\"] = {\"_server\": \"whois.nic.zappos\", \"extend\": \"com\"}\n\tZZ[\"amfam\"] = {\"_server\": \"whois.nic.amfam\", \"extend\": \"com\"}\n\tZZ[\"lplfinancial\"] = {\"_server\": \"whois.nic.lplfinancial\", \"extend\": \"com\"}  # auto-detected via IANA tld\n\tZZ[\"okinawa\"] = {\"_server\": \"whois.nic.okinawa\", \"extend\": \"com\"}  # auto-detected via IANA tld\n\tZZ[\"ryukyu\"] = {\"_server\": \"whois.nic.ryukyu\", \"extend\": \"com\"}  # auto-detected via IANA tld\n\tZZ[\"softbank\"] = {\"_server\": \"whois.nic.softbank\", \"extend\": \"com\"}  # auto-detected via IANA tld\n", "ZZ[\"gov\"] = {\"extend\": \"com\"}  # only 2 or 3 fields are actually returned\n\tZZ[\"tm\"] = {  # Turkmenistan\n\t    \"extend\": \"com\",\n\t    \"domain_name\": r\"Domain\\s*:\\s*(.+)\",\n\t    \"expiration_date\": r\"Expiry\\s*:\\s*(\\d+-\\d+-\\d+)\",\n\t    \"name_servers\": r\"NS\\s+\\d+\\s+:\\s*(\\S+)\",\n\t    \"status\": r\"Status\\s*:\\s*(.+)\",\n\t}\n\tZZ[\"com.tm\"] = {\"extend\": \"tm\", \"_privateRegistry\": True}\n\tZZ[\"ac.ug\"] = {\"extend\": \"ug\", \"_privateRegistry\": True}\n", "# venezuela\n\tZZ[\"ve\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.nic.ve\",\n\t    \"domain_name\": r\"domain\\s*:\\s?(.+)\",\n\t    \"registrar\": r\"registrar:\\s?(.+)\",\n\t    \"registrant\": r\"registrant:\\s?(.+)\",\n\t    \"creation_date\": r\"created:\\s?(.+)\",\n\t    \"expiration_date\": r\"expire:\\s?(.+)\",\n\t    \"updated_date\": r\"changed\\s*:\\s?(.+)\",\n", "    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t}\n\tZZ[\"com.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"co.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"info.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"net.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"org.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"web.ve\"] = {\"extend\": \"ve\"}\n\tZZ[\"gt\"] = {\"extend\": \"_privateReg\"}\n\tZZ[\"yt\"] = {\"extend\": \"re\", \"_server\": \"whois.nic.yt\"}\n", "ZZ[\"pm\"] = {\"extend\": \"re\", \"_server\": \"whois.nic.pm\"}\n\tZZ[\"tf\"] = {\"extend\": \"re\", \"_server\": \"whois.nic.tf\"}\n\tZZ[\"sb\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.net.sb\"}\n\tZZ[\"lc\"] = {\"extend\": \"com\", \"_server\": \"whois2.afilias-grs.net\"}\n\tZZ[\"tube\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.tube\"}\n\tZZ[\"md\"] = {\"extend\": \"ug\", \"_server\": \"whois.nic.md\"}\n\tZZ[\"ki\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.ki\"}\n\tZZ[\"lu\"] = {\n\t    \"extend\": \"com\",\n\t    \"_server\": \"whois.dns.lu\",\n", "    \"domain_name\": r\"domainname\\s*:\\s?(.+)\",\n\t    \"registrar\": r\"registrar-name:\\s?(.+)\",\n\t    \"name_servers\": r\"nserver:\\s*(.+)\\s*\",\n\t    \"status\": r\"domaintype\\s*:\\s*(.+)\",\n\t    \"registrant_country\": r\"org-country\\s*:\\s?(.+)\",\n\t}\n\tZZ[\"health\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.health\"}\n\tZZ[\"bd\"] = {\"extend\": \"_privateReg\"}  # Bangladesh\n\tZZ[\"gov.bd\"] = {\"extend\": \"bd\"}\n\tZZ[\"net.bd\"] = {\"extend\": \"bd\"}\n", "ZZ[\"com.bd\"] = {\"extend\": \"bd\"}\n\tZZ[\"ac.bd\"] = {\"extend\": \"bd\"}\n\tZZ[\"do\"] = {\"extend\": \"bzh\", \"_server\": \"whois.nic.do\"}\n\tZZ[\"ls\"] = {\"extend\": \"cz\", \"_server\": \"whois.nic.ls\"}\n\tZZ[\"ps\"] = {\"extend\": \"com\"}\n\tZZ[\"sl\"] = {\"extend\": \"com\", \"_server\": \"whois.nic.sl\"}\n\tZZ[\"sd\"] = {\"extend\": \"com\", \"_server\": \"whois.sdnic.sd\"}\n\tZZ[\"sm\"] = {\n\t    \"extend\": \"rs\",\n\t    \"_server\": \"whois.nic.sm\",\n", "    \"domain_name\": r\"Domain Name:\\s+(.+)\",\n\t    \"status\": r\"Status:\\s(.+)\",\n\t    \"name_servers\": r\"DNS Servers:\\s+(.+)\",\n\t}\n\tZZ[\"et\"] = {\"extend\": \"com\", \"_server\": \"whois.ethiotelecom.et\"}\n\tZZ[\"mq\"] = {\"extend\": \"si\", \"_server\": \"whois.mediaserv.net\"}\n\tZZ[\"gf\"] = {\"extend\": \"si\", \"_server\": \"whois.mediaserv.net\"}\n\t#    elif domain.endswith('.онлайн') or domain.endswith('.xn--80asehdb'):\n\t#        tld = 'ru_online'\n\tZZ[\"ru_online\"] = {\n", "    \"extend\": \"com\",\n\t    # \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t}\n\tZZ[\"xn--80asehdb\"] = {\n\t    \"extend\": \"com\",\n\t    # \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n\t}\n\tZZ[\"онлайн\"] = {\n\t    \"extend\": \"com\",\n\t    # \"expiration_date\": r\"Registry Expiry Date:\\s?(.+)\",\n", "}\n\tZZ[\"ps\"] = {\n\t    # Registrant Name\n\t    \"extend\": \"com\",\n\t    \"registrant\": r\"Registrant\\s+Name:\\s?(.+)\",\n\t}\n\t# experimental autodetect via iana tld\n\tZZ[\"abarth\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"abbott\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"active\"] = {\"_privateRegistry\": True}\n", "ZZ[\"adac\"] = {\"_privateRegistry\": True}\n\tZZ[\"afamilycompany\"] = {\"_privateRegistry\": True}\n\tZZ[\"agakhan\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"aigo\"] = {\"_privateRegistry\": True}\n\tZZ[\"akdn\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"alfaromeo\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"allstate\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"an\"] = {\"_privateRegistry\": True}\n\tZZ[\"apple\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"audi\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"avianca\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"beats\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"bl\"] = {\"_privateRegistry\": True}\n\tZZ[\"blanco\"] = {\"_privateRegistry\": True}\n\tZZ[\"bnl\"] = {\"_privateRegistry\": True}\n\tZZ[\"bnpparibas\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}  # 'group.bnpparibas' works\n\tZZ[\"boehringer\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"boots\"] = {\"_privateRegistry\": True}\n\tZZ[\"bq\"] = {\"_privateRegistry\": True}\n\tZZ[\"budapest\"] = {\"_privateRegistry\": True}\n", "ZZ[\"bugatti\"] = {\"_privateRegistry\": True}\n\tZZ[\"cancerresearch\"] = {\"_privateRegistry\": True}\n\tZZ[\"cartier\"] = {\"_privateRegistry\": True}\n\tZZ[\"caseih\"] = {\"_privateRegistry\": True}\n\tZZ[\"cbs\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"ceb\"] = {\"_privateRegistry\": True}\n\tZZ[\"cern\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"chloe\"] = {\"_privateRegistry\": True}\n\tZZ[\"chrysler\"] = {\"_privateRegistry\": True}\n\tZZ[\"cipriani\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"creditunion\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"csc\"] = {\"_privateRegistry\": True}\n\tZZ[\"dabur\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"dodge\"] = {\"_privateRegistry\": True}\n\tZZ[\"doha\"] = {\"_privateRegistry\": True}\n\tZZ[\"doosan\"] = {\"_privateRegistry\": True}\n\tZZ[\"duck\"] = {\"_privateRegistry\": True}\n\tZZ[\"duns\"] = {\"_privateRegistry\": True}\n\tZZ[\"edeka\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"eh\"] = {\"_privateRegistry\": True}\n", "ZZ[\"emerck\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"epost\"] = {\"_privateRegistry\": True}\n\tZZ[\"esurance\"] = {\"_privateRegistry\": True}\n\tZZ[\"everbank\"] = {\"_privateRegistry\": True}\n\tZZ[\"extraspace\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"fage\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"fiat\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"fido\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"flsmidth\"] = {\"_privateRegistry\": True}\n\tZZ[\"fujixerox\"] = {\"_privateRegistry\": True}\n", "ZZ[\"glade\"] = {\"_privateRegistry\": True}\n\tZZ[\"goodhands\"] = {\"_privateRegistry\": True}\n\tZZ[\"hermes\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"honeywell\"] = {\"_privateRegistry\": True}\n\tZZ[\"htc\"] = {\"_privateRegistry\": True}\n\tZZ[\"iinet\"] = {\"_privateRegistry\": True}\n\tZZ[\"imamat\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"intel\"] = {\"_privateRegistry\": True}\n\tZZ[\"iselect\"] = {\"_privateRegistry\": True}\n\tZZ[\"ismaili\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"itv\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"iveco\"] = {\"_privateRegistry\": True}\n\tZZ[\"iwc\"] = {\"_privateRegistry\": True}\n\tZZ[\"jcp\"] = {\"_privateRegistry\": True}\n\tZZ[\"jeep\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"jlc\"] = {\"_privateRegistry\": True}\n\tZZ[\"jll\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"ladbrokes\"] = {\"_privateRegistry\": True}\n\tZZ[\"lamborghini\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"lancia\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"lancome\"] = {\"_privateRegistry\": True}\n\tZZ[\"lasalle\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"liaison\"] = {\"_privateRegistry\": True}\n\tZZ[\"lixil\"] = {\"_privateRegistry\": True}\n\tZZ[\"loft\"] = {\"_privateRegistry\": True}\n\tZZ[\"lupin\"] = {\"_privateRegistry\": True}\n\tZZ[\"marriott\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"mcd\"] = {\"_privateRegistry\": True}\n\tZZ[\"mcdonalds\"] = {\"_privateRegistry\": True}\n\tZZ[\"meo\"] = {\"_privateRegistry\": True}\n", "ZZ[\"metlife\"] = {\"_privateRegistry\": True}\n\tZZ[\"mf\"] = {\"_privateRegistry\": True}\n\tZZ[\"mit\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"mobily\"] = {\"_privateRegistry\": True}\n\tZZ[\"montblanc\"] = {\"_privateRegistry\": True}\n\tZZ[\"mopar\"] = {\"_privateRegistry\": True}\n\tZZ[\"movistar\"] = {\"_privateRegistry\": True}\n\tZZ[\"mtpc\"] = {\"_privateRegistry\": True}\n\tZZ[\"mutuelle\"] = {\"_privateRegistry\": True}\n\tZZ[\"nadex\"] = {\"_privateRegistry\": True}\n", "ZZ[\"nationwide\"] = {\"_privateRegistry\": True}\n\tZZ[\"newholland\"] = {\"_privateRegistry\": True}\n\tZZ[\"nokia\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"nra\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"off\"] = {\"_privateRegistry\": True}\n\tZZ[\"onyourside\"] = {\"_privateRegistry\": True}\n\tZZ[\"orientexpress\"] = {\"_privateRegistry\": True}\n\tZZ[\"pamperedchef\"] = {\"_privateRegistry\": True}\n\tZZ[\"panerai\"] = {\"_privateRegistry\": True}\n\tZZ[\"piaget\"] = {\"_privateRegistry\": True}\n", "ZZ[\"progressive\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"pwc\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"qvc\"] = {\"_privateRegistry\": True}\n\tZZ[\"raid\"] = {\"_privateRegistry\": True}\n\tZZ[\"redumbrella\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"rightathome\"] = {\"_privateRegistry\": True}\n\tZZ[\"rmit\"] = {\"_privateRegistry\": True}\n\tZZ[\"rogers\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"sapo\"] = {\"_privateRegistry\": True}\n\tZZ[\"schaeffler\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"scjohnson\"] = {\"_privateRegistry\": True}\n\tZZ[\"scor\"] = {\"_privateRegistry\": True}\n\tZZ[\"ses\"] = {\"_privateRegistry\": True}\n\tZZ[\"sew\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"shaw\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"showtime\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"shriram\"] = {\"_privateRegistry\": True}\n\tZZ[\"spiegel\"] = {\"_privateRegistry\": True}\n\tZZ[\"spreadbetting\"] = {\"_privateRegistry\": True}\n\tZZ[\"srt\"] = {\"_privateRegistry\": True}\n", "ZZ[\"stada\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"starhub\"] = {\"_privateRegistry\": True}\n\tZZ[\"statoil\"] = {\"_privateRegistry\": True}\n\tZZ[\"stockholm\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"swiftcover\"] = {\"_privateRegistry\": True}\n\tZZ[\"symantec\"] = {\"_privateRegistry\": True}\n\tZZ[\"telecity\"] = {\"_privateRegistry\": True}\n\tZZ[\"telefonica\"] = {\"_privateRegistry\": True}\n\tZZ[\"temasek\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"tp\"] = {\"_privateRegistry\": True}\n", "ZZ[\"travelers\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"travelersinsurance\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"trv\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"uconnect\"] = {\"_privateRegistry\": True}\n\tZZ[\"um\"] = {\"_privateRegistry\": True}\n\tZZ[\"viking\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"vista\"] = {\"_privateRegistry\": True}\n\tZZ[\"vistaprint\"] = {\"_privateRegistry\": True}\n\tZZ[\"volkswagen\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"warman\"] = {\"_privateRegistry\": True}\n", "ZZ[\"xn--0zwm56d\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--11b5bs3a9aj6g\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--3oq18vl8pn36a\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--80akhbyknj4f\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--9t4b11yi5a\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--b4w605ferd\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"xn--deba0ad\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--estv75g\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--g6w251d\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--hgbk6aj7f53bba\"] = {\"_privateRegistry\": True}\n", "ZZ[\"xn--hlcj6aya9esc7a\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--jlq61u9w7b\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--jxalpdlp\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--kgbechtv\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--kpu716f\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--mgbb9fbpob\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--pbt977c\"] = {\"_privateRegistry\": True}\n\tZZ[\"xn--zckzah\"] = {\"_privateRegistry\": True}\n\tZZ[\"xperia\"] = {\"_privateRegistry\": True}\n\tZZ[\"zara\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n", "ZZ[\"zippo\"] = {\"_privateRegistry\": True}\n\tZZ[\"gi\"] = {\"_server\": \"whois2.afilias-grs.net\", \"extend\": \"com\"}\n\tZZ[\"ads\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"android\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"cal\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"chrome\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"dclk\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"docs\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"drive\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"eat\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n", "ZZ[\"fly\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"gbiz\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"gle\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"gmail\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"goog\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"guge\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"hangout\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"here\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"ing\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"map\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n", "ZZ[\"meet\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"meme\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"play\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"prod\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"search\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"xn--flw351e\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"xn--qcka1pmc\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"youtube\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"datsun\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"fujitsu\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n", "ZZ[\"goo\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"hisamitsu\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"hitachi\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"infiniti\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"jcb\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"mitsubishi\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"nissan\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"panasonic\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"sharp\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n\tZZ[\"yodobashi\"] = {\"_server\": \"whois.nic.gmo\", \"extend\": \"com\"}\n", "ZZ[\"baidu\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--30rr7y\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--3bst00m\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--9et52u\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--fiq64b\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"xn--clchc0ea0b2g2a9gcd\"] = {\"_server\": \"whois.sgnic.sg\", \"extend\": \"sg\"}\n\tZZ[\"xn--yfro4i67o\"] = {\"_server\": \"whois.sgnic.sg\", \"extend\": \"sg\"}\n\tZZ[\"anquan\"] = {\"extend\": \"_teleinfo\"}\n\tZZ[\"shouji\"] = {\"extend\": \"_teleinfo\"}\n\tZZ[\"xihuan\"] = {\"extend\": \"_teleinfo\"}\n", "ZZ[\"xn--vuq861b\"] = {\"extend\": \"_teleinfo\"}\n\tZZ[\"yun\"] = {\"extend\": \"_teleinfo\"}\n\tZZ[\"etisalat\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"xn--mgbaakc7dvf\"] = {\"extend\": \"_centralnic\"}\n\tZZ[\"xn--2scrj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--3hcrj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--45br5cyl\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--45brj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--fpcrj9c3d\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--gecrj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n", "ZZ[\"xn--h2breg3eve\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--h2brj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--h2brj9c8c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbbh1a\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbbh1a71e\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--mgbgu82a\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--rvc1e0am3e\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--s9brj9c\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--xkc2dl3a5ee0h\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"xn--xhq521b\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n", "ZZ[\"xn--kprw13d\"] = {\"extend\": \"tw\"}\n\tZZ[\"xn--kpry57d\"] = {\"extend\": \"tw\"}\n\tZZ[\"th\"] = {\"_server\": \"whois.thnic.co.th\", \"extend\": \"co.th\"}\n\t# whois.thnic.co.th ['co.th']\n\tZZ[\"xn--d1alf\"] = {\"_server\": \"whois.marnet.mk\", \"extend\": \"mk\"}\n\t# whois.marnet.mk ['mk']\n\tZZ[\"xn--mgb9awbf\"] = {\"_server\": \"whois.registry.om\", \"extend\": \"om\"}\n\t# whois.registry.om ['om']\n\tZZ[\"xn--mgbah1a3hjkrd\"] = {\"_server\": \"whois.nic.mr\", \"extend\": \"mr\"}\n\t# whois.nic.mr ['mr']\n", "ZZ[\"xn--mix891f\"] = {\"_server\": \"whois.monic.mo\", \"extend\": \"mo\"}\n\t# whois.monic.mo ['mo']\n\tZZ[\"xn--o3cw4h\"] = {\"_server\": \"whois.thnic.co.th\", \"extend\": \"co.th\"}\n\t# whois.thnic.co.th ['co.th']\n\tZZ[\"xn--ogbpf8fl\"] = {\"_server\": \"whois.tld.sy\", \"extend\": \"sy\"}\n\t# whois.tld.sy ['sy']\n\tZZ[\"xn--wgbl6a\"] = {\"_server\": \"whois.registry.qa\", \"extend\": \"qa\"}\n\t# whois.registry.qa ['qa']\n\tZZ[\"xn--j6w193g\"] = {\"_server\": \"whois.hkirc.hk\", \"extend\": \"hk\"}\n\t# whois.hkirc.hk ['hk']\n", "ZZ[\"xn--e1a4c\"] = {\"_server\": \"whois.eu\", \"extend\": \"eu\"}\n\t# whois.eu ['eu']\n\tZZ[\"xn--qxa6a\"] = {\"_server\": \"whois.eu\", \"extend\": \"eu\"}\n\t# whois.eu ['eu']\n\tZZ[\"bom\"] = {\"extend\": \"com\", \"_server\": \"whois.gtlds.nic.br\"}\n\tZZ[\"final\"] = {\"_server\": \"whois.gtlds.nic.br\", \"extend\": \"bom\"}\n\t# whois.gtlds.nic.br ['bom']\n\tZZ[\"globo\"] = {\"_server\": \"whois.gtlds.nic.br\", \"extend\": \"bom\"}\n\t# whois.gtlds.nic.br ['bom']\n\tZZ[\"natura\"] = {\"_server\": \"whois.gtlds.nic.br\", \"extend\": \"bom\"}\n", "# whois.gtlds.nic.br ['bom']\n\tZZ[\"rio\"] = {\"_server\": \"whois.gtlds.nic.br\", \"extend\": \"bom\"}\n\t# whois.gtlds.nic.br ['bom']\n\tZZ[\"uol\"] = {\"_server\": \"whois.gtlds.nic.br\", \"extend\": \"bom\"}\n\t# whois.gtlds.nic.br ['bom']\n\tZZ[\"xn--3e0b707e\"] = {\"_server\": \"whois.kr\", \"extend\": \"kr\"}\n\t# whois.kr ['kr']\n\tZZ[\"xn--cg4bki\"] = {\"_server\": \"whois.kr\", \"extend\": \"kr\"}\n\t# whois.kr ['kr']\n\t# testing  unicode domains autodetect\n", "ZZ[\"测试\"] = {\"_privateRegistry\": True}\n\t# ZZ[\"कम\"] = {\"_server\": \"whois.nic.xn--11b4c3d\", \"extend\": \"xn--11b4c3d\"} # whois.nic.xn--11b4c3d ['xn--11b4c3d']\n\tZZ[\"परकष\"] = {\"_privateRegistry\": True}\n\tZZ[\"佛山\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"ಭರತ\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"慈善\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"集团\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"한국\"] = {\"_server\": \"whois.kr\", \"extend\": \"kr\"}  # whois.kr ['kr', 'xn--3e0b707e', 'xn--cg4bki']\n\tZZ[\"ଭରତ\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"大众汽车\"] = {\"_privateRegistry\": True}\n", "ZZ[\"点看\"] = {\"_server\": \"whois.nic.xn--3pxu8k\", \"extend\": \"xn--3pxu8k\"}  # whois.nic.xn--3pxu8k ['xn--3pxu8k']\n\tZZ[\"คอม\"] = {\"_server\": \"whois.nic.xn--42c2d9a\", \"extend\": \"xn--42c2d9a\"}  # whois.nic.xn--42c2d9a ['xn--42c2d9a']\n\tZZ[\"ভৰত\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"ভরত\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"موقع\"] = {\"_server\": \"whois.nic.xn--4gbrim\", \"extend\": \"xn--4gbrim\"}  # whois.nic.xn--4gbrim ['xn--4gbrim']\n\tZZ[\"公司\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"香格里拉\"] = {\n\t    \"_server\": \"whois.nic.xn--5su34j936bgsg\",\n\t    \"extend\": \"xn--5su34j936bgsg\",\n\t}  # whois.nic.xn--5su34j936bgsg ['xn--5su34j936bgsg']\n", "ZZ[\"网站\"] = {\"_server\": \"whois.nic.xn--5tzm5g\", \"extend\": \"xn--5tzm5g\"}  # whois.nic.xn--5tzm5g ['xn--5tzm5g']\n\tZZ[\"移动\"] = {\"_server\": \"whois.nic.xn--6frz82g\", \"extend\": \"xn--6frz82g\"}  # whois.nic.xn--6frz82g ['xn--6frz82g']\n\tZZ[\"我爱你\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"москва\"] = {\n\t    \"_server\": \"whois.nic.xn--80adxhks\",\n\t    \"extend\": \"xn--80adxhks\",\n\t}  # whois.nic.xn--80adxhks ['xn--80adxhks']\n\tZZ[\"испытание\"] = {\"_privateRegistry\": True}\n\tZZ[\"католик\"] = {\n\t    \"_server\": \"whois.nic.xn--80aqecdr1a\",\n", "    \"extend\": \"xn--80aqecdr1a\",\n\t}  # whois.nic.xn--80aqecdr1a ['xn--80aqecdr1a']\n\tZZ[\"сайт\"] = {\"_server\": \"whois.nic.xn--80aswg\", \"extend\": \"xn--80aswg\"}  # whois.nic.xn--80aswg ['xn--80aswg']\n\tZZ[\"联通\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"קום\"] = {\"_server\": \"whois.nic.xn--9dbq2a\", \"extend\": \"xn--9dbq2a\"}  # whois.nic.xn--9dbq2a ['xn--9dbq2a']\n\tZZ[\"时尚\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"微博\"] = {\"_server\": \"whois.nic.xn--9krt00a\", \"extend\": \"xn--9krt00a\"}  # whois.nic.xn--9krt00a ['xn--9krt00a']\n\tZZ[\"테스트\"] = {\"_privateRegistry\": True}\n\tZZ[\"淡马锡\"] = {\"_server\": \"whois.afilias-srs.net\", \"extend\": \"com\"}\n\tZZ[\"орг\"] = {\"_server\": \"whois.nic.xn--c1avg\", \"extend\": \"xn--c1avg\"}  # whois.nic.xn--c1avg ['xn--c1avg']\n", "ZZ[\"नट\"] = {\"_server\": \"whois.nic.xn--c2br7g\", \"extend\": \"xn--c2br7g\"}  # whois.nic.xn--c2br7g ['xn--c2br7g']\n\tZZ[\"アマゾン\"] = {\n\t    \"_server\": \"whois.nic.xn--cckwcxetd\",\n\t    \"extend\": \"xn--cckwcxetd\",\n\t}  # whois.nic.xn--cckwcxetd ['xn--cckwcxetd']\n\tZZ[\"삼성\"] = {\"_server\": \"whois.kr\", \"extend\": \"kr\"}  # whois.kr ['kr', 'xn--3e0b707e', 'xn--cg4bki']\n\tZZ[\"சஙகபபர\"] = {\"_server\": \"whois.sgnic.sg\", \"extend\": \"sg\"}\n\tZZ[\"商店\"] = {\"_server\": \"whois.nic.xn--czrs0t\", \"extend\": \"xn--czrs0t\"}  # whois.nic.xn--czrs0t ['xn--czrs0t']\n\tZZ[\"мкд\"] = {\"_server\": \"whois.marnet.mk\", \"extend\": \"mk\"}  # whois.marnet.mk ['mk', 'xn--d1alf']\n\tZZ[\"טעסט\"] = {\"_privateRegistry\": True}\n", "ZZ[\"ею\"] = {\"_server\": \"whois.eu\", \"extend\": \"eu\"}  # whois.eu ['eu', 'xn--e1a4c', 'xn--qxa6a']\n\tZZ[\"新闻\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"工行\"] = {\"_privateRegistry\": True}\n\tZZ[\"كوم\"] = {\"_server\": \"whois.nic.xn--fhbei\", \"extend\": \"xn--fhbei\"}  # whois.nic.xn--fhbei ['xn--fhbei']\n\tZZ[\"中信\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"中国\"] = {\"_server\": \"cwhois.cnnic.cn\", \"extend\": \"xn--fiqs8s\"}  # cwhois.cnnic.cn ['xn--fiqs8s', 'xn--fiqz9s']\n\tZZ[\"中國\"] = {\"_server\": \"cwhois.cnnic.cn\", \"extend\": \"xn--fiqs8s\"}  # cwhois.cnnic.cn ['xn--fiqs8s', 'xn--fiqz9s']\n\tZZ[\"娱乐\"] = {\"_server\": \"whois.nic.xn--fjq720a\", \"extend\": \"xn--fjq720a\"}  # whois.nic.xn--fjq720a ['xn--fjq720a']\n\tZZ[\"谷歌\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"భరత\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n", "ZZ[\"電訊盈科\"] = {\n\t    \"_server\": \"whois.nic.xn--fzys8d69uvgm\",\n\t    \"extend\": \"xn--fzys8d69uvgm\",\n\t}  # whois.nic.xn--fzys8d69uvgm ['xn--fzys8d69uvgm']\n\tZZ[\"測試\"] = {\"_privateRegistry\": True}\n\tZZ[\"ભરત\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"भरतम\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"भरत\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"भरत\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"آزمایشی\"] = {\"_privateRegistry\": True}\n", "ZZ[\"பரடச\"] = {\"_privateRegistry\": True}\n\tZZ[\"सगठन\"] = {\n\t    \"_server\": \"whois.nic.xn--i1b6b1a6a2e\",\n\t    \"extend\": \"xn--i1b6b1a6a2e\",\n\t}  # whois.nic.xn--i1b6b1a6a2e ['xn--i1b6b1a6a2e']\n\tZZ[\"网络\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"ком\"] = {\"_server\": \"whois.nic.xn--j1aef\", \"extend\": \"xn--j1aef\"}  # whois.nic.xn--j1aef ['xn--j1aef']\n\tZZ[\"香港\"] = {\"_server\": \"whois.hkirc.hk\", \"extend\": \"hk\"}  # whois.hkirc.hk ['hk', 'xn--j6w193g']\n\tZZ[\"亚马逊\"] = {\n\t    \"_server\": \"whois.nic.xn--jlq480n2rg\",\n", "    \"extend\": \"xn--jlq480n2rg\",\n\t}  # whois.nic.xn--jlq480n2rg ['xn--jlq480n2rg']\n\tZZ[\"诺基亚\"] = {\"_privateRegistry\": True}\n\tZZ[\"δοκιμή\"] = {\"_privateRegistry\": True}\n\tZZ[\"飞利浦\"] = {\n\t    \"_server\": \"whois.nic.xn--kcrx77d1x4a\",\n\t    \"extend\": \"xn--kcrx77d1x4a\",\n\t}  # whois.nic.xn--kcrx77d1x4a ['xn--kcrx77d1x4a']\n\tZZ[\"إختبار\"] = {\"_privateRegistry\": True}\n\tZZ[\"台湾\"] = {\"_server\": \"whois.twnic.net.tw\", \"extend\": \"tw\"}\n", "ZZ[\"台灣\"] = {\"_server\": \"whois.twnic.net.tw\", \"extend\": \"tw\"}\n\tZZ[\"手表\"] = {\"_privateRegistry\": True}\n\tZZ[\"手机\"] = {\"_server\": \"whois.nic.xn--kput3i\", \"extend\": \"xn--kput3i\"}  # whois.nic.xn--kput3i ['xn--kput3i']\n\tZZ[\"عمان\"] = {\"_server\": \"whois.registry.om\", \"extend\": \"om\"}  # whois.registry.om ['om', 'xn--mgb9awbf']\n\tZZ[\"العليان\"] = {\n\t    \"_server\": \"whois.nic.xn--mgba7c0bbn0a\",\n\t    \"extend\": \"xn--mgba7c0bbn0a\",\n\t}  # whois.nic.xn--mgba7c0bbn0a ['xn--mgba7c0bbn0a']\n\tZZ[\"اتصالات\"] = {\"_server\": \"whois.centralnic.com\", \"extend\": \"_centralnic\"}\n\tZZ[\"بازار\"] = {\n", "    \"_server\": \"whois.nic.xn--mgbab2bd\",\n\t    \"extend\": \"xn--mgbab2bd\",\n\t}  # whois.nic.xn--mgbab2bd ['xn--mgbab2bd']\n\tZZ[\"موريتانيا\"] = {\"_server\": \"whois.nic.mr\", \"extend\": \"mr\"}  # whois.nic.mr ['mr', 'xn--mgbah1a3hjkrd']\n\tZZ[\"موبايلي\"] = {\"_privateRegistry\": True}\n\tZZ[\"بارت\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"بھارت\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"ابوظبي\"] = {\n\t    \"_server\": \"whois.nic.xn--mgbca7dzdo\",\n\t    \"extend\": \"xn--mgbca7dzdo\",\n", "}  # whois.nic.xn--mgbca7dzdo ['xn--mgbca7dzdo']\n\tZZ[\"ڀارت\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"كاثوليك\"] = {\n\t    \"_server\": \"whois.nic.xn--mgbi4ecexp\",\n\t    \"extend\": \"xn--mgbi4ecexp\",\n\t}  # whois.nic.xn--mgbi4ecexp ['xn--mgbi4ecexp']\n\tZZ[\"همراه\"] = {\n\t    \"_server\": \"whois.nic.xn--mgbt3dhd\",\n\t    \"extend\": \"xn--mgbt3dhd\",\n\t}  # whois.nic.xn--mgbt3dhd ['xn--mgbt3dhd']\n", "ZZ[\"澳門\"] = {\"_server\": \"whois.monic.mo\", \"extend\": \"mo\"}  # whois.monic.mo ['mo', 'xn--mix891f']\n\tZZ[\"닷컴\"] = {\"_server\": \"whois.nic.xn--mk1bu44c\", \"extend\": \"xn--mk1bu44c\"}  # whois.nic.xn--mk1bu44c ['xn--mk1bu44c']\n\tZZ[\"政府\"] = {\"_server\": \"whois.nic.xn--mxtq1m\", \"extend\": \"xn--mxtq1m\"}  # whois.nic.xn--mxtq1m ['xn--mxtq1m']\n\tZZ[\"شبكة\"] = {\"_server\": \"whois.nic.xn--ngbc5azd\", \"extend\": \"xn--ngbc5azd\"}  # whois.nic.xn--ngbc5azd ['xn--ngbc5azd']\n\tZZ[\"بيتك\"] = {\"_server\": \"whois.nic.xn--ngbe9e0a\", \"extend\": \"xn--ngbe9e0a\"}  # whois.nic.xn--ngbe9e0a ['xn--ngbe9e0a']\n\tZZ[\"عرب\"] = {\"_server\": \"whois.nic.xn--ngbrx\", \"extend\": \"xn--ngbrx\"}  # whois.nic.xn--ngbrx ['xn--ngbrx']\n\tZZ[\"机构\"] = {\"_server\": \"whois.nic.xn--nqv7f\", \"extend\": \"xn--nqv7f\"}  # whois.nic.xn--nqv7f ['xn--nqv7f']\n\tZZ[\"组织机构\"] = {\n\t    \"_server\": \"whois.nic.xn--nqv7fs00ema\",\n\t    \"extend\": \"xn--nqv7fs00ema\",\n", "}  # whois.nic.xn--nqv7fs00ema ['xn--nqv7fs00ema']\n\tZZ[\"ไทย\"] = {\"_server\": \"whois.thnic.co.th\", \"extend\": \"co.th\"}  # whois.thnic.co.th ['co.th', 'th', 'xn--o3cw4h']\n\tZZ[\"سورية\"] = {\"_server\": \"whois.tld.sy\", \"extend\": \"sy\"}  # whois.tld.sy ['sy', 'xn--ogbpf8fl']\n\tZZ[\"珠宝\"] = {\"_privateRegistry\": True}\n\tZZ[\"大拿\"] = {\"_server\": \"whois.nic.xn--pssy2u\", \"extend\": \"xn--pssy2u\"}  # whois.nic.xn--pssy2u ['xn--pssy2u']\n\tZZ[\"みんな\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"グーグル\"] = {\"_server\": \"whois.nic.google\", \"extend\": \"com\"}\n\tZZ[\"ευ\"] = {\"_server\": \"whois.eu\", \"extend\": \"eu\"}  # whois.eu ['eu', 'xn--e1a4c', 'xn--qxa6a']\n\tZZ[\"ഭരത\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"ਭਰਤ\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n", "ZZ[\"网址\"] = {\"_server\": \"whois.gtld.knet.cn\", \"extend\": \"com\"}\n\tZZ[\"닷넷\"] = {\"_server\": \"whois.nic.xn--t60b56a\", \"extend\": \"xn--t60b56a\"}  # whois.nic.xn--t60b56a ['xn--t60b56a']\n\tZZ[\"コム\"] = {\"_server\": \"whois.nic.xn--tckwe\", \"extend\": \"xn--tckwe\"}  # whois.nic.xn--tckwe ['xn--tckwe']\n\tZZ[\"天主教\"] = {\n\t    \"_server\": \"whois.nic.xn--tiq49xqyj\",\n\t    \"extend\": \"xn--tiq49xqyj\",\n\t}  # whois.nic.xn--tiq49xqyj ['xn--tiq49xqyj']\n\tZZ[\"游戏\"] = {\"_server\": \"whois.nic.xn--unup4y\", \"extend\": \"xn--unup4y\"}  # whois.nic.xn--unup4y ['xn--unup4y']\n\tZZ[\"vermögensberater\"] = {\n\t    \"_server\": \"whois.nic.xn--vermgensberater-ctb\",\n", "    \"extend\": \"xn--vermgensberater-ctb\",\n\t}  # whois.nic.xn--vermgensberater-ctb ['xn--vermgensberater-ctb']\n\tZZ[\"vermögensberatung\"] = {\n\t    \"_server\": \"whois.nic.xn--vermgensberatung-pwb\",\n\t    \"extend\": \"xn--vermgensberatung-pwb\",\n\t}  # whois.nic.xn--vermgensberatung-pwb ['xn--vermgensberatung-pwb']\n\tZZ[\"企业\"] = {\"_server\": \"whois.nic.xn--vhquv\", \"extend\": \"xn--vhquv\"}  # whois.nic.xn--vhquv ['xn--vhquv']\n\tZZ[\"信息\"] = {\"_server\": \"whois.teleinfo.cn\", \"extend\": \"_teleinfo\"}\n\tZZ[\"嘉里大酒店\"] = {\n\t    \"_server\": \"whois.nic.xn--w4r85el8fhu5dnra\",\n", "    \"extend\": \"xn--w4r85el8fhu5dnra\",\n\t}  # whois.nic.xn--w4r85el8fhu5dnra ['xn--w4r85el8fhu5dnra']\n\tZZ[\"嘉里\"] = {\"_server\": \"whois.nic.xn--w4rs40l\", \"extend\": \"xn--w4rs40l\"}  # whois.nic.xn--w4rs40l ['xn--w4rs40l']\n\tZZ[\"قطر\"] = {\"_server\": \"whois.registry.qa\", \"extend\": \"qa\"}  # whois.registry.qa ['qa', 'xn--wgbl6a']\n\tZZ[\"广东\"] = {\"_server\": \"whois.ngtld.cn\", \"extend\": \"com\"}\n\tZZ[\"இநதய\"] = {\"_server\": \"whois.registry.in\", \"extend\": \"com\"}\n\tZZ[\"新加坡\"] = {\"_server\": \"whois.sgnic.sg\", \"extend\": \"sg\"}\n\tZZ[\"テスト\"] = {\"_privateRegistry\": True}\n"]}
{"filename": "whoisdomain/version.py", "chunked_list": ["VERSION = \"1.20230720.2\"\n"]}
{"filename": "whoisdomain/_2_parse.py", "chunked_list": ["import re\n\timport sys\n\tfrom typing import (\n\t    cast,\n\t    Any,\n\t    Dict,\n\t    Optional,\n\t    List,\n\t    Tuple,\n\t)\n", "from ._0_init_tld import TLD_RE\n\tfrom ._3_adjust import (\n\t    Domain,\n\t)\n\tfrom .exceptions import (\n\t    FailedParsingWhoisOutput,\n\t    WhoisQuotaExceeded,\n\t)\n\tVerbose: bool = True\n\tNONESTRINGS: List[str] = [\n", "    \"the domain has not been registered\",\n\t    \"no match found for\",\n\t    \"no matching record\",\n\t    \"no match\",\n\t    \"not found\",\n\t    \"no data found\",\n\t    \"no entries found\",\n\t    # \"status: free\", # we should not interprete the result if there is a result\n\t    \"no such domain\",\n\t    \"the queried object does not exist\",\n", "    \"domain you requested is not known\",\n\t    # \"status: available\", # we should not interprete the result if there is a result\n\t    \"no whois server is known for this kind of object\",\n\t    \"nameserver not found\",\n\t    \"malformed request\",  # this means this domain is not in whois as it is on top of a registered domain\n\t    \"registration of this domain is restricted\",\n\t    \"restricted\",\n\t    \"this domain is currently available\",\n\t]\n\tQUOTASTRINGS: List[str] = [\n", "    \"limit exceeded\",\n\t    \"quota exceeded\",\n\t    \"try again later\",\n\t    \"please try again\",\n\t    \"exceeded the maximum allowable number\",\n\t    \"can temporarily not be answered\",\n\t    \"please try again.\",\n\t    \"queried interval is too short\",\n\t    \"number of allowed queries exceeded\",\n\t]\n", "def _handleShortResponse(\n\t    tld: str,\n\t    dl: List[str],\n\t    whois_str: str,\n\t    verbose: bool = False,\n\t    simplistic: bool = False,\n\t    include_raw_whois_text: bool = False,\n\t) -> Optional[Domain]:\n\t    if verbose:\n\t        d = \".\".join(dl)\n", "        print(f\"line count < 5:: {tld} {d} {whois_str}\", file=sys.stderr)\n\t    # TODO: some short responses are actually valid:\n\t    # lookfor Domain: and Status but all other fields are missing so the regexec could fail\n\t    # this domain is taken already or reserved\n\t    # whois syswow.64-b.it\n\t    # [Querying whois.nic.it]\n\t    # [whois.nic.it]\n\t    # Domain:             syswow.64-b.it\n\t    # Status:             UNASSIGNABLE\n\t    s = whois_str.strip().lower()\n", "    # NOTE: from here s is lowercase only\n\t    # ---------------------------------\n\t    noneStrings = NoneStrings()\n\t    for i in noneStrings:\n\t        if i in s:\n\t            return None\n\t    # ---------------------------------\n\t    # is there any error string in the result\n\t    if s.count(\"error\"):\n\t        if verbose:\n", "            print(\"i see 'error' in the result, return: None\", file=sys.stderr)\n\t        return None\n\t    # ---------------------------------\n\t    quotaStrings = QuotaStrings()\n\t    for i in quotaStrings:\n\t        if i in s:\n\t            if simplistic:\n\t                msg = \"WhoisQuotaExceeded\"\n\t                return Domain(\n\t                    data={},\n", "                    whois_str=whois_str,\n\t                    verbose=verbose,\n\t                    include_raw_whois_text=include_raw_whois_text,\n\t                    exeptionStr=msg,\n\t                )\n\t            raise WhoisQuotaExceeded(whois_str)\n\t    if simplistic:\n\t        msg = \"FailedParsingWhoisOutput\"\n\t        return Domain(\n\t            data={},\n", "            whois_str=whois_str,\n\t            verbose=verbose,\n\t            include_raw_whois_text=include_raw_whois_text,\n\t            exeptionStr=msg,\n\t        )\n\t    raise FailedParsingWhoisOutput(whois_str)\n\tdef _doDnsSec(\n\t    whois_str: str,\n\t) -> bool:\n\t    whois_dnssec: Any = whois_str.split(\"DNSSEC:\")\n", "    if len(whois_dnssec) >= 2:\n\t        whois_dnssec = whois_dnssec[1].split(\"\\n\")[0]\n\t        if whois_dnssec.strip() == \"signedDelegation\" or whois_dnssec.strip() == \"yes\":\n\t            return True\n\t    return False\n\tdef _doIfServerNameLookForDomainName(\n\t    whois_str: str,\n\t    verbose: bool = False,\n\t) -> str:\n\t    # not often available anymore\n", "    if re.findall(r\"Server Name:\\s?(.+)\", whois_str, re.IGNORECASE):\n\t        if verbose:\n\t            msg = \"i have seen Server Name:, looking for Domain Name:\"\n\t            print(msg, file=sys.stderr)\n\t        whois_str = whois_str[whois_str.find(\"Domain Name:\") :]\n\t    return whois_str\n\tdef _doExtractPattensIanaFromWhoisString(\n\t    tld: str,\n\t    r: Dict[str, Any],\n\t    whois_str: str,\n", "    verbose: bool = False,\n\t) -> Dict[str, Any]:\n\t    # now handle the actual format if this whois response\n\t    iana = {\n\t        \"domain_name\": r\"domain:\\s?([^\\n]+)\",\n\t        \"registrar\": r\"organisation:\\s?([^\\n]+)\",\n\t        \"creation_date\": r\"created:\\s?([^\\n]+)\",\n\t    }\n\t    for k, v in iana.items():\n\t        zz = re.findall(v, whois_str)\n", "        if zz:\n\t            if verbose:\n\t                print(f\"parsing iana data only for tld: {tld}, {zz}\", file=sys.stderr)\n\t            r[k] = zz\n\t    return r\n\tdef _doExtractPattensFromWhoisString(\n\t    tld: str,\n\t    r: Dict[str, Any],\n\t    whois_str: str,\n\t    verbose: bool = False,\n", ") -> Dict[str, Any]:\n\t    for k, v in TLD_RE.get(tld, TLD_RE[\"com\"]).items():  # use TLD_RE[\"com\"] as default if a regex is missing\n\t        if k.startswith(\"_\"):  # skip meta element like: _server or _privateRegistry\n\t            continue\n\t        # Historical: here we use 'empty string' as default, not None\n\t        if v is None:\n\t            r[k] = [\"\"]\n\t        else:\n\t            r[k] = v.findall(whois_str) or [\"\"]\n\t    return r\n", "def _doSourceIana(\n\t    tld: str,\n\t    r: Dict[str, Any],\n\t    whois_str: str,\n\t    verbose: bool = False,\n\t) -> Tuple[str, Optional[Dict[str, Any]]]:\n\t    # here we can handle the example.com and example.net permanent IANA domains\n\t    k = \"source:       IANA\"\n\t    if verbose:\n\t        msg = f\"i have seen {k}\"\n", "        print(msg, file=sys.stderr)\n\t    whois_splitted = whois_str.split(k)\n\t    z = len(whois_splitted)\n\t    if z > 2:\n\t        return k.join(whois_splitted[1:]), None\n\t    if z == 2 and whois_splitted[1].strip() != \"\":\n\t        # if we see source: IANA and the part after is not only whitespace\n\t        if verbose:\n\t            msg = f\"after: {k} we see not only whitespace: {whois_splitted[1]}\"\n\t            print(msg, file=sys.stderr)\n", "        return whois_splitted[1], None\n\t    # try to parse this as a IANA domain as after is only whitespace\n\t    r = _doExtractPattensFromWhoisString(\n\t        tld,\n\t        r,\n\t        whois_str,\n\t        verbose,\n\t    )  # set default values\n\t    # now handle the actual format if this whois response\n\t    r = _doExtractPattensIanaFromWhoisString(\n", "        tld,\n\t        r,\n\t        whois_str,\n\t        verbose,\n\t    )\n\t    return whois_str, r\n\t# PUBLIC\n\tdef cleanupWhoisResponse(\n\t    whois_str: str,\n\t    verbose: bool = False,\n", "    with_cleanup_results: bool = False,\n\t    withRedacted: bool = False,\n\t) -> str:\n\t    tmp2: List[str] = []\n\t    # note we cannot do yet rstrip() on the lines as many registrars use \\r and even trailing whitespace after entries\n\t    # as the resulting matches are all stripped of leading and trailing whitespace this currently is fixed there\n\t    # and relaxes the regexes: you will often see a capture with (.*)\n\t    # we would have to fix all regexes to allow stripping all trailing whitespace\n\t    # it would make many matches easier though.\n\t    skipFromHere = False\n", "    tmp: List[str] = whois_str.split(\"\\n\")\n\t    for line in tmp:\n\t        if skipFromHere is True:\n\t            continue\n\t        # some servers respond with: % Quota exceeded in the comment section (lines starting with %)\n\t        if \"quota exceeded\" in line.lower():\n\t            raise WhoisQuotaExceeded(whois_str)\n\t        if with_cleanup_results is True and line.startswith(\"%\"):  # only remove if requested\n\t            continue\n\t        if withRedacted is False:\n", "            if \"REDACTED FOR PRIVACY\" in line:  # these lines contibute nothing so ignore\n\t                continue\n\t        if \"Please query the RDDS service of the Registrar of Record\" in line:  # these lines contibute nothing so ignore\n\t            continue\n\t        # regular responses may at the end have meta info starting with a line >>> some texte <<<\n\t        # similar trailing info exists with lines starting with -- but we wil handle them later\n\t        # unfortunalery we have domains (google.st) that have this early at the top\n\t        if 0:\n\t            if line.startswith(\">>>\"):\n\t                skipFromHere = True\n", "                continue\n\t        if line.startswith(\"Terms of Use:\"):  # these lines contibute nothing so ignore\n\t            continue\n\t        tmp2.append(line.strip(\"\\r\"))\n\t    return \"\\n\".join(tmp2)\n\tdef NoneStrings() -> List[str]:\n\t    return NONESTRINGS\n\tdef NoneStringsAdd(aString: str) -> None:\n\t    if aString and isinstance(aString, str) and len(aString) > 0:\n\t        NONESTRINGS.append(aString)\n", "def QuotaStrings() -> List[str]:\n\t    return QUOTASTRINGS\n\tdef QuotaStringsAdd(aString: str) -> None:\n\t    if aString and isinstance(aString, str) and len(aString) > 0:\n\t        NONESTRINGS.append(aString)\n\tdef do_parse(\n\t    whois_str: str,\n\t    tld: str,\n\t    dl: List[str],\n\t    verbose: bool = False,\n", "    with_cleanup_results: bool = False,\n\t    simplistic: bool = False,\n\t    include_raw_whois_text: bool = False,\n\t    withRedacted: bool = False,\n\t) -> Any:\n\t    whois_str = cleanupWhoisResponse(\n\t        whois_str=whois_str,\n\t        verbose=verbose,\n\t        with_cleanup_results=with_cleanup_results,\n\t        withRedacted=withRedacted,\n", "    )\n\t    if whois_str.count(\"\\n\") < 5:\n\t        result = _handleShortResponse(  # may raise:    FailedParsingWhoisOutput,    WhoisQuotaExceeded,\n\t            tld=tld,\n\t            dl=dl,\n\t            whois_str=whois_str,\n\t            verbose=verbose,\n\t            simplistic=simplistic,\n\t            include_raw_whois_text=include_raw_whois_text,\n\t        )\n", "        return result\n\t    # this is the beginning of the return data\n\t    r: Dict[str, Any] = {\n\t        \"tld\": tld,\n\t        \"DNSSEC\": _doDnsSec(whois_str),\n\t    }\n\t    if \"source:       IANA\" in whois_str:  # prepare for handling historical IANA domains\n\t        whois_str, ianaDomain = _doSourceIana(tld, r, whois_str, verbose)\n\t        if ianaDomain is not None:\n\t            ianaDomain = cast(Optional[Dict[str, Any]], ianaDomain)\n", "            return ianaDomain\n\t    if \"Server Name\" in whois_str:  # handle old type Server Name (not very common anymore)\n\t        whois_str = _doIfServerNameLookForDomainName(whois_str, verbose)\n\t    return _doExtractPattensFromWhoisString(tld, r, whois_str, verbose)\n"]}
{"filename": "whoisdomain/main.py", "chunked_list": ["#!/usr/bin/python3\n\timport os\n\timport re\n\timport getopt\n\timport sys\n\timport json\n\tfrom typing import (\n\t    Optional,\n\t    Tuple,\n\t    Any,\n", "    List,\n\t    Dict,\n\t)\n\timport whoisdomain as whois  # to be compatible with dannycork\n\t# if we are not running as test2.py run in a simplistic way\n\tSIMPLISTIC: bool = False\n\tWithRedacted: bool = False\n\tPrintJson: bool = False\n\tVerbose: bool = False\n\tPrintGetRawWhoisResult: bool = False\n", "Ruleset: bool = False\n\tFailures: Dict[str, Any] = {}\n\tIgnoreReturncode: bool = False\n\tTestAllTld: bool = False\n\tclass ResponseCleaner:\n\t    data: str\n\t    rDict: Dict[str, Any] = {}\n\t    def __init__(\n\t        self,\n\t        pathToTestFile: str,\n", "    ):\n\t        self.data = self.readInputFile(pathToTestFile)\n\t    def readInputFile(\n\t        self,\n\t        pathToTestFile: str,\n\t    ) -> str:\n\t        if not os.path.exists(pathToTestFile):\n\t            return \"\"\n\t        with open(pathToTestFile, mode=\"rb\") as f:  # switch to binary mode as that is what Popen uses\n\t            # make sure the data is treated exactly the same as the output of Popen\n", "            return f.read().decode(errors=\"ignore\")\n\t    def cleanSection(\n\t        self,\n\t        section: List[str],\n\t    ) -> List[str]:\n\t        # cleanup any beginning and ending empty lines from the section\n\t        if len(section) == 0:\n\t            return section\n\t        rr = r\"^\\s*$\"\n\t        n = 0  # remove empty lines from the start of section\n", "        while re.match(rr, section[n]):\n\t            section.pop(n)\n\t            # n stays 0\n\t        n = len(section) - 1  # remove empty lines from the end of the section\n\t        while re.match(rr, section[n]):\n\t            section.pop(n)\n\t            n = len(section) - 1  # remove empty lines from the end of section\n\t        return section\n\t    def splitBodyInSections(\n\t        self,\n", "        body: List[str],\n\t    ) -> List[str]:\n\t        # split the body on empty line, cleanup all sections, remove empty sections\n\t        # return list of body's\n\t        sections: List[List[str]] = []\n\t        n = 0\n\t        sections.append([])\n\t        for line in body:\n\t            if re.match(r\"^\\s*$\", line):\n\t                n += 1\n", "                sections.append([])\n\t                continue\n\t            sections[n].append(line)\n\t        m = 0\n\t        while m < len(sections):\n\t            sections[m] = self.cleanSection(sections[m])\n\t            m += 1\n\t        # now remove empty sections and return\n\t        sections2: List[str] = []\n\t        m = 0\n", "        while m < len(sections):\n\t            if len(sections[m]) > 0:\n\t                sections2.append(\"\\n\".join(sections[m]))\n\t            m += 1\n\t        return sections2\n\t    def cleanupWhoisResponse(\n\t        self,\n\t        verbose: bool = False,\n\t        with_cleanup_results: bool = False,\n\t    ) -> Tuple[str, Dict[Any, Any]]:\n", "        result = whois.cleanupWhoisResponse(\n\t            self.data,\n\t            verbose,\n\t            with_cleanup_results,\n\t        )\n\t        self.rDict: Dict[str, Any] = {\n\t            \"BodyHasSections\": False,  # if this is true the body is not a list of lines but a list of sections with lines\n\t            \"Preamble\": [],  # the lines telling what whois servers wwere contacted\n\t            \"Percent\": [],  # lines staring with %% , often not present but may contain hints\n\t            \"Body\": [],  # the body of the whois, may be in sections separated by empty lines\n", "            \"Postamble\": [],  # copyright and other not relevant info for actual parsing whois\n\t        }\n\t        body: List[str] = []\n\t        rr: List[str] = []\n\t        z = result.split(\"\\n\")\n\t        preambleSeen = False\n\t        postambleSeen = False\n\t        percentSeen = False\n\t        for line in z:\n\t            if preambleSeen is False:\n", "                if line.startswith(\"[\"):\n\t                    self.rDict[\"Preamble\"].append(line)\n\t                    line = \"PRE;\" + line\n\t                    continue\n\t                else:\n\t                    preambleSeen = True\n\t            if preambleSeen is True and percentSeen is False:\n\t                if line.startswith(\"%\"):\n\t                    self.rDict[\"Percent\"].append(line)\n\t                    line = \"PERCENT;\" + line\n", "                    continue\n\t                else:\n\t                    percentSeen = True\n\t            if postambleSeen is False:\n\t                if line.startswith(\"-- \") or line.startswith(\">>> \") or line.startswith(\"Copyright notice\"):\n\t                    postambleSeen = True\n\t            if postambleSeen is True:\n\t                self.rDict[\"Postamble\"].append(line)\n\t                line = \"POST;\" + line\n\t                continue\n", "            body.append(line)\n\t            if \"\\t\" in line:\n\t                line = \"TAB;\" + line  # mark lines having tabs\n\t            if line.endswith(\"\\r\"):\n\t                line = \"CR;\" + line  # mark lines having CR (\\r)\n\t            rr.append(line)\n\t        body = self.cleanSection(body)\n\t        self.rDict[\"Body\"] = self.splitBodyInSections(body)\n\t        return \"\\n\".join(rr), self.rDict\n\t    def printMe(self) -> None:\n", "        zz = [\"Preamble\", \"Percent\", \"Postamble\"]\n\t        for k in zz:\n\t            n = 0\n\t            for lines in self.rDict[k]:\n\t                tab = \" [TAB] \" if \"\\t\" in lines else \"\"  # tabs are present in this section\n\t                cr = \" [CR] \" if \"\\r\" in lines else \"\"  # \\r is present in this section\n\t                print(k, cr, tab, lines)\n\t        k = \"Body\"\n\t        if len(self.rDict[k]):\n\t            n = 0\n", "            for lines in self.rDict[k]:\n\t                ws = \" [WHITESPACE AT END] \" if re.search(r\"[ \\t]+\\r?\\n\", lines) else \"\"\n\t                tab = \" [TAB] \" if \"\\t\" in lines else \"\"  # tabs are present in this section\n\t                cr = \" [CR] \" if \"\\r\" in lines else \"\"  # \\r is present in this section\n\t                print(f\"# --- {k} Section: {n} {cr}{tab}{ws}\")\n\t                n += 1\n\t                print(lines)\n\tdef prepItem(d: str) -> None:\n\t    if PrintJson is False:\n\t        print(\"\")\n", "        print(f\"test domain: <<<<<<<<<< {d} >>>>>>>>>>>>>>>>>>>>\")\n\tdef xType(x: Any) -> str:\n\t    s = f\"{type(x)}\"\n\t    return s.split(\"'\")[1]\n\tdef testItem(\n\t    d: str,\n\t    printgetRawWhoisResult: bool = False,\n\t) -> None:\n\t    global PrintGetRawWhoisResult\n\t    global SIMPLISTIC\n", "    global WithRedacted\n\t    global TestAllTld\n\t    timeout = 30  # seconds\n\t    w = whois.query(\n\t        d,\n\t        ignore_returncode=IgnoreReturncode,\n\t        verbose=Verbose,\n\t        internationalized=True,\n\t        include_raw_whois_text=PrintGetRawWhoisResult,\n\t        timeout=timeout,\n", "        simplistic=SIMPLISTIC,\n\t        withRedacted=WithRedacted,\n\t    )\n\t    if w is None:\n\t        print(\"None\")\n\t        print(\"\\n\", whois.get_last_raw_whois_data())\n\t        return\n\t    # the 3 date time items can be None if not present or a datetime string\n\t    # dnssec is a bool\n\t    # some strings are return as '' when empty (status)\n", "    # statuses can be a array of one empty string if no data\n\t    # not all values are always present it mainly depends on whet we see in the output of whois\n\t    # if we return not None: the elements that ars always there ars domain_name , tld, dnssec\n\t    wd = w.__dict__\n\t    if PrintJson is True:\n\t        for f in [\"creation_date\", \"expiration_date\", \"last_updated\"]:\n\t            if f in wd:\n\t                wd[f] = f\"{wd[f]}\"\n\t        print(json.dumps(wd))\n\t        return\n", "    for k, v in wd.items():\n\t        if SIMPLISTIC:\n\t            ss = \"%-18s \"\n\t            if isinstance(v, str):\n\t                print((ss + \"'%s'\") % (k, v))\n\t            else:\n\t                print((ss + \"%s\") % (k, v))\n\t        else:\n\t            ss = \"%-18s %-17s \"\n\t            if isinstance(v, str):\n", "                print((ss + \"'%s'\") % (k, xType(v), v))\n\t            else:\n\t                print((ss + \"%s\") % (k, xType(v), v))\n\t    # print(\"\\n\", whois.get_last_raw_whois_data())\n\tdef errorItem(d: str, e: Any, what: str = \"Generic\") -> None:\n\t    if what not in Failures:\n\t        Failures[what] = {}\n\t    Failures[what][d] = e\n\t    message = f\"Domain: {d}; Exception: {what}; Error: {e}\"\n\t    print(message)\n", "def testDomains(aList: List[str]) -> None:\n\t    for d in aList:\n\t        # skip empty lines\n\t        if not d:\n\t            continue\n\t        if len(d.strip()) == 0:\n\t            continue\n\t        # skip comments\n\t        if d.strip().startswith(\"#\"):\n\t            continue\n", "        # skip comments behind the domain\n\t        d = d.split(\"#\")[0]\n\t        d = d.strip()\n\t        prepItem(d)\n\t        try:\n\t            testItem(d)\n\t        except whois.UnknownTld as e:\n\t            errorItem(d, e, what=\"UnknownTld\")\n\t        except whois.FailedParsingWhoisOutput as e:\n\t            errorItem(d, e, what=\"FailedParsingWhoisOutput\")\n", "        except whois.UnknownDateFormat as e:\n\t            errorItem(d, e, what=\"UnknownDateFormat\")\n\t        except whois.WhoisCommandFailed as e:\n\t            errorItem(d, e, what=\"WhoisCommandFailed\")\n\t        except whois.WhoisQuotaExceeded as e:\n\t            errorItem(d, e, what=\"WhoisQuotaExceeded\")\n\t        except whois.WhoisPrivateRegistry as e:\n\t            errorItem(d, e, what=\"WhoisPrivateRegistry\")\n\t        except whois.WhoisCommandTimeout as e:\n\t            errorItem(d, e, what=\"WhoisCommandTimeout\")\n", "        # except Exception as e:\n\t        #    errorItem(d, e, what=\"Generic\")\n\tdef getTestFileOne(fPath: str, fileData: Dict[str, Any]) -> None:\n\t    if not os.path.isfile(fPath):  # only files\n\t        return\n\t    if not fPath.endswith(\".txt\"):  # ending in .txt\n\t        return\n\t    bName = fPath[:-4]\n\t    fileData[bName] = []\n\t    xx = fileData[bName]\n", "    with open(fPath) as f:\n\t        for index, line in enumerate(f):\n\t            line = line.strip()\n\t            if len(line) == 0 or line.startswith(\"#\"):\n\t                continue\n\t            aa = re.split(r\"\\s+\", line)\n\t            if aa[0] not in xx:\n\t                xx.append(aa[0])\n\t    return\n\tdef getTestFilesAll(\n", "    tDir: str,\n\t    fileData: Dict[str, Any],\n\t) -> None:\n\t    for item in os.listdir(tDir):\n\t        fPath = f\"{tDir}/{item}\"\n\t        getTestFileOne(fPath, fileData)\n\tdef getAllCurrentTld() -> List[str]:\n\t    return whois.validTlds()\n\tdef makeMetaAllCurrentTld(\n\t    allHaving: Optional[str] = None,\n", "    allRegex: Optional[str] = None,\n\t) -> List[str]:\n\t    global TestAllTld\n\t    def appendHint(\n\t        allRegex: Optional[str],\n\t        tld: str,\n\t    ) -> None:\n\t        if TestAllTld is True:\n\t            hint = whois.getTestHint(tld)\n\t            hint = hint if hint else f\"meta.{tld}\"\n", "            rr.append(f\"{hint}\")\n\t        else:\n\t            rr.append(f\"meta.{tld}\")\n\t    rr: List[str] = []\n\t    for tld in getAllCurrentTld():\n\t        if allRegex:\n\t            if re.search(allRegex, tld):\n\t                appendHint(allRegex, tld)\n\t        else:\n\t            appendHint(allRegex, tld)\n", "    return rr\n\tdef showAllCurrentTld() -> None:\n\t    print(\"Tld's currently supported\")\n\t    for tld in getAllCurrentTld():\n\t        print(tld)\n\tdef ShowRuleset(tld: str) -> None:\n\t    rr = whois.TLD_RE\n\t    if tld in rr:\n\t        for key in sorted(rr[tld].keys()):\n\t            rule = f\"{rr[tld][key]}\"\n", "            if \"re.compile\" in rule:\n\t                rule = rule.split(\"re.compile(\")[1]\n\t                rule = rule.split(\", re.IGNORECASE)\")[0]\n\t            print(key, rule, \"IGNORECASE\")\n\tdef usage() -> None:\n\t    name = os.path.basename(sys.argv[0])\n\t    print(\n\t        f\"\"\"\n\t{name}\n\t    [ -h | --usage ]\n", "        print this text and exit\n\t    [ -V | --Version ]\n\t        print the build version string\n\t        and exit\n\t    [ -S | --SupportedTld ]\n\t        print all known top level domains\n\t        and exit\n\t    [ -a | --all]\n\t        test all existing tld currently supported\n\t        and exit\n", "    [ -f <filename> | --file = <filename> \" ]\n\t        use the named file to test all domains (one domain per line)\n\t        lines starting with # or empty lines are skipped, anything after the domain is ignored\n\t        the option can be repeated to specify more then one file\n\t        exits after processing all the files\n\t    [ -D <directory> | --Directory = <directory> \" ]\n\t        use the named directory, ald use all files ending in .txt as files containing domains\n\t        files are processed as in the -f option so comments and empty lines are skipped\n\t        the option can be repeated to specify more then one directory\n\t        exits after processing all the dirs\n", "    [ -d <domain> | --domain = <domain> \" ]\n\t        only analyze the given domains\n\t        the option can be repeated to specify more domain's\n\t    [ -v | --verbose ]\n\t        set verbose to True,\n\t        verbose output will be printed on stderr only\n\t    [ -j | --json ]\n\t        print each result as json\n\t    [ -I | --IgnoreReturncode ]\n\t        sets the IgnoreReturncode to True,\n", "    [ -p | --print ]\n\t        also print text containing the raw output of the cli whois\n\t    [ -R | --Ruleset ]\n\t        dump the ruleset for the requested tld and exit\n\t        should be combined with -d to specify tld's\n\t    [ -C <file> | --Cleanup <file> ]\n\t        read the input file specified and run the same cleanup as in whois.query,\n\t        then exit\n\t    # test two domains with verbose and IgnoreReturncode\n\t    example: {name} -v -I -d meta.org -d meta.com\n", "    # test all supported tld's with verbose and IgnoreReturncode\n\t    example: {name} -v -I -a\n\t    # test one specific file with verbose and IgnoreReturncode\n\t    example: {name} -v -I -f tests/ok-domains.txt\n\t    # test one specific directory with verbose and IgnoreReturncode\n\t    example: {name} -v -I -D tests\n\t\"\"\"\n\t    )\n\t    \"\"\"\n\t    TODO\n", "    --all --reg <re>\n\t        from all tld a regex match sub selection\n\t    --all --having <name>\n\t        from all but only the ones haveing a certain field\n\t    \"\"\"\n\t    sys.exit(1)\n\tdef showFailures() -> None:\n\t    if len(Failures):\n\t        print(\"\\n# ========================\")\n\t        for i in sorted(Failures.keys()):\n", "            for j in sorted(Failures[i].keys()):\n\t                print(i, j, Failures[i][j])\n\tdef main() -> None:\n\t    global PrintJson\n\t    global Verbose\n\t    global IgnoreReturncode\n\t    global PrintGetRawWhoisResult\n\t    global Ruleset\n\t    global SIMPLISTIC\n\t    global WithRedacted\n", "    global TestAllTld\n\t    name: str = os.path.basename(sys.argv[0])\n\t    if name == \"test2.py\":\n\t        SIMPLISTIC = False\n\t    else:\n\t        SIMPLISTIC = True\n\t    try:\n\t        opts, args = getopt.getopt(\n\t            sys.argv[1:],\n\t            \"jRSpvVIhaf:d:D:r:H:C:\",\n", "            [\n\t                \"json\",\n\t                \"Ruleset\",\n\t                \"SupportedTld\",\n\t                \"print\",\n\t                \"verbose\",\n\t                \"Version\",\n\t                \"IgnoreReturncode\",\n\t                \"all\",\n\t                \"file=\",\n", "                \"Directory=\",\n\t                \"domain=\",\n\t                \"reg=\",\n\t                \"having=\",\n\t                \"Cleanup=\",\n\t                \"withRedacted\",\n\t            ],\n\t        )\n\t    except getopt.GetoptError:\n\t        usage()\n", "        sys.exit(2)\n\t    # TestAllTld: bool = False\n\t    allHaving: Optional[str] = None  # from all supported tld only process the ones having this :: TODO ::\n\t    allRegex: Optional[str] = None  # from all supported tld process only the ones matching this regex\n\t    directory: Optional[str] = None\n\t    dirs: List[str] = []\n\t    filename: Optional[str] = None\n\t    files: List[str] = []\n\t    domain: Optional[str] = None\n\t    domains: List[str] = []\n", "    fileData: Dict[str, Any] = {}\n\t    for opt, arg in opts:\n\t        if opt in (\"-S\", \"SupportedTld\"):\n\t            for tld in sorted(whois.validTlds()):\n\t                print(tld)\n\t            sys.exit(0)\n\t        if opt in (\"-V\", \"Version\"):\n\t            print(whois.getVersion())\n\t            sys.exit(0)\n\t        if opt == \"-h\":\n", "            usage()\n\t            sys.exit(0)\n\t        if opt in (\"--withRedacted\"):\n\t            WithRedacted = True\n\t        if opt in (\"-a\", \"--all\"):\n\t            TestAllTld = True\n\t        if opt in (\"-H\", \"--having\"):\n\t            TestAllTld = True\n\t            allHaving = str(arg)\n\t        if opt in (\"-r\", \"--reg\"):\n", "            TestAllTld = True\n\t            allRegex = str(arg)\n\t        if opt in (\"-v\", \"--verbose\"):\n\t            Verbose = True\n\t        if opt in (\"-p\", \"--print\"):\n\t            PrintGetRawWhoisResult = True\n\t        if opt in (\"-j\", \"--json\"):\n\t            PrintJson = True\n\t        if opt in (\"-R\", \"--Ruleset\"):\n\t            Ruleset = True\n", "        if opt in (\"-D\", \"--Directory\"):\n\t            directory = arg\n\t            isDir = os.path.isdir(directory)\n\t            if isDir is False:\n\t                print(f\"{directory} cannot be found or is not a directory\", file=sys.stderr)\n\t                sys.exit(101)\n\t        if opt in (\"-C\", \"--Cleanup\"):\n\t            inFile = arg\n\t            isFile = os.path.isfile(arg)\n\t            if isFile is False:\n", "                print(f\"{inFile} cannot be found or is not a file\", file=sys.stderr)\n\t                sys.exit(101)\n\t            rc = ResponseCleaner(inFile)\n\t            d1, rDict = rc.cleanupWhoisResponse()\n\t            rc.printMe()\n\t            sys.exit(0)\n\t        if opt in (\"-f\", \"--file\"):\n\t            filename = arg\n\t            isFile = os.path.isfile(filename)\n\t            if isFile is False:\n", "                print(f\"{filename} cannot be found or is not a file\", file=sys.stderr)\n\t                sys.exit(101)\n\t            if filename not in files:\n\t                files.append(filename)\n\t                TestAllTld = False\n\t        if opt in (\"-d\", \"--domain\"):\n\t            domain = arg\n\t            if domain not in domains:\n\t                domains.append(domain)\n\t    if Verbose:\n", "        print(f\"{name} SIMPLISTIC: {SIMPLISTIC}\", file=sys.stderr)\n\t    if Ruleset is True and len(domains):\n\t        for domain in domains:\n\t            ShowRuleset(domain)\n\t        sys.exit(0)\n\t    if TestAllTld:\n\t        allMetaTld = makeMetaAllCurrentTld(allHaving, allRegex)\n\t        testDomains(allMetaTld)\n\t        showFailures()\n\t        sys.exit(0)\n", "    if len(dirs):\n\t        fileData = {}\n\t        for dName in dirs:\n\t            getTestFilesAll(dName, fileData)\n\t        for testFile in fileData:\n\t            testDomains(fileData[testFile])\n\t        showFailures()\n\t        sys.exit(0)\n\t    if len(files):\n\t        fileData = {}\n", "        for testFile in files:\n\t            getTestFileOne(testFile, fileData)\n\t        for testFile in fileData:\n\t            testDomains(fileData[testFile])\n\t        showFailures()\n\t        sys.exit(0)\n\t    if len(domains):\n\t        testDomains(domains)\n\t        showFailures()\n\t        sys.exit(0)\n", "    usage()\n\t    sys.exit(0)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "whoisdomain/__init__.py", "chunked_list": ["import sys\n\timport os\n\tfrom functools import wraps\n\tfrom typing import (\n\t    cast,\n\t    Optional,\n\t    List,\n\t    Dict,\n\t    Tuple,\n\t    Any,\n", "    Callable,\n\t)\n\tfrom ._1_query import (\n\t    do_query,\n\t)\n\tfrom ._2_parse import (\n\t    do_parse,\n\t    NoneStrings,\n\t    NoneStringsAdd,\n\t    QuotaStrings,\n", "    QuotaStringsAdd,\n\t    cleanupWhoisResponse,\n\t)\n\tfrom ._3_adjust import (\n\t    Domain,\n\t)\n\tfrom .tld_regexpr import (\n\t    ZZ,\n\t)\n\tfrom ._0_init_tld import (\n", "    TLD_RE,\n\t    validTlds,\n\t    filterTldToSupportedPattern,\n\t    mergeExternalDictWithRegex,\n\t)\n\tfrom .exceptions import (\n\t    UnknownTld,\n\t    FailedParsingWhoisOutput,\n\t    UnknownDateFormat,\n\t    WhoisCommandFailed,\n", "    WhoisPrivateRegistry,\n\t    WhoisQuotaExceeded,\n\t    WhoisCommandTimeout,\n\t)\n\tfrom .version import (\n\t    VERSION,\n\t)\n\t__all__ = [\n\t    # from exceptions\n\t    \"UnknownTld\",\n", "    \"FailedParsingWhoisOutput\",\n\t    \"UnknownDateFormat\",\n\t    \"WhoisCommandFailed\",\n\t    \"WhoisPrivateRegistry\",\n\t    \"WhoisQuotaExceeded\",\n\t    \"WhoisCommandTimeout\",\n\t    # from init_tld\n\t    \"validTlds\",\n\t    \"TLD_RE\",\n\t    # from version\n", "    \"VERSION\",\n\t    # from this file\n\t    \"get_last_raw_whois_data\",\n\t    \"getVersion\",\n\t    \"query\",\n\t    # from parse\n\t    \"NoneStrings\",\n\t    \"NoneStringsAdd\",\n\t    \"QuotaStrings\",\n\t    \"QuotaStringsAdd\",\n", "    \"cleanupWhoisResponse\",\n\t    \"getTestHint\",\n\t]\n\tWHOISDOMAIN: str = \"\"\n\tif os.getenv(\"WHOISDOMAIN\"):\n\t    WHOISDOMAIN = str(os.getenv(\"WHOISDOMAIN\"))\n\tWD = WHOISDOMAIN.upper().split(\":\")\n\tSIMPLISTIC = False\n\tif \"SIMPISTIC\" in WD:\n\t    SIMPLISTIC = True\n", "CACHE_FILE = None\n\tSLOW_DOWN = 0\n\tLastWhois: Dict[str, Any] = {\n\t    \"Try\": [],\n\t}\n\t# PRIVATE\n\tdef _internationalizedDomainNameToPunyCode(d: List[str]) -> List[str]:\n\t    return [k.encode(\"idna\").decode() or k for k in d]\n\tdef _result2dict(func: Any) -> Any:\n\t    @wraps(func)\n", "    def _inner(*args: str, **kw: Any) -> Dict[str, Any]:\n\t        r = func(*args, **kw)\n\t        return r and vars(r) or {}\n\t    return _inner\n\tdef _fromDomainStringToTld(\n\t    domain: str,\n\t    internationalized: bool,\n\t    verbose: bool = False,\n\t    simplistic: bool = False,\n\t) -> Tuple[Optional[str], Optional[List[str]]]:\n", "    domain = domain.lower().strip().rstrip(\".\")  # Remove the trailing dot to support FQDN.\n\t    d: List[str] = domain.split(\".\")\n\t    if verbose:\n\t        print(d, file=sys.stderr)\n\t    if d[0] == \"www\":\n\t        d = d[1:]\n\t    if len(d) == 1:\n\t        return None, None\n\t    tld: str = filterTldToSupportedPattern(domain, d, verbose)  # may raise UnknownTld\n\t    if verbose:\n", "        print(f\"filterTldToSupportedPattern returns tld: {tld}\", file=sys.stderr)\n\t    if internationalized and isinstance(internationalized, bool):\n\t        d = _internationalizedDomainNameToPunyCode(d)\n\t    if verbose:\n\t        print(tld, d, file=sys.stderr)\n\t    return tld, d\n\tdef _validateWeKnowTheToplevelDomain(\n\t    tld: str,\n\t    return_raw_text_for_unsupported_tld: bool = False,\n\t) -> Optional[str]:\n", "    # may raise UnknownTld\n\t    if return_raw_text_for_unsupported_tld:\n\t        # we dont raise we return None so we can handle unsupported domains anyway\n\t        return None\n\t    a = f\"The TLD {tld} is currently not supported by this package.\"\n\t    b = \"Use validTlds() to see what toplevel domains are supported.\"\n\t    msg = f\"{a} {b}\"\n\t    return msg\n\tdef _verifyPrivateRegistry(\n\t    thisTld: Dict[str, Any],\n", "    simplistic: bool = False,\n\t) -> bool:\n\t    # may raise WhoisPrivateRegistry\n\t    # signal we know the tld but it has no whos or does not respond with any information\n\t    if thisTld.get(\"_privateRegistry\"):\n\t        if simplistic is False:\n\t            msg = \"WhoisPrivateRegistry\"\n\t            raise WhoisPrivateRegistry(msg)\n\t        return True\n\t    return False\n", "def _doServerHintsForThisTld(\n\t    tld: str,\n\t    thisTld: Dict[str, Any],\n\t    server: Optional[str],\n\t    verbose: bool = False,\n\t) -> Optional[str]:\n\t    # note _server hints currently are not passes down when using \"extend\", that may have been my error during the initial implementation\n\t    # allow server hints using \"_server\" from the tld_regexpr.py file\n\t    thisTldServer = thisTld.get(\"_server\")\n\t    if server is None and thisTldServer:\n", "        server = thisTldServer\n\t        if verbose:\n\t            print(f\"using _server hint {server} for tld: {tld}\", file=sys.stderr)\n\t    return server\n\tdef _doSlowdownHintForThisTld(\n\t    tld: str,\n\t    thisTld: Dict[str, Any],\n\t    slow_down: int,\n\t    verbose: bool = False,\n\t) -> int:\n", "    # allow a configrable slowdown for some tld's\n\t    slowDown = thisTld.get(\"_slowdown\")\n\t    if slow_down == 0 and slowDown and slowDown > 0:\n\t        slow_down = slowDown\n\t        if verbose:\n\t            print(f\"using _slowdown hint {slowDown} for tld: {tld}\", file=sys.stderr)\n\t    return slow_down\n\tdef _doUnsupportedTldAnyway(\n\t    tld: str,\n\t    dl: List[str],\n", "    ignore_returncode: bool = False,\n\t    slow_down: int = 0,\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    wh: str = \"whois\",\n\t    simplistic: bool = False,\n\t) -> Optional[Domain]:\n\t    include_raw_whois_text = True\n\t    # we will not hunt for possible valid first level domains as we have no actual feedback\n\t    whois_str = do_query(\n", "        dl=dl,\n\t        slow_down=slow_down,\n\t        ignore_returncode=ignore_returncode,\n\t        server=server,\n\t        verbose=verbose,\n\t        wh=wh,\n\t        simplistic=simplistic,\n\t    )\n\t    # we will only return minimal data\n\t    data = {\n", "        \"tld\": tld,\n\t        \"domain_name\": [],\n\t    }\n\t    data[\"domain_name\"] = [\".\".join(dl)]  # note the fields are default all array, except tld\n\t    if verbose:\n\t        print(data, file=sys.stderr)\n\t    return Domain(\n\t        data=data,\n\t        whois_str=whois_str,\n\t        verbose=verbose,\n", "        include_raw_whois_text=include_raw_whois_text,\n\t        return_raw_text_for_unsupported_tld=True,\n\t    )\n\tdef _doOneLookup(\n\t    tld: str,\n\t    dl: List[str],\n\t    force: bool = False,\n\t    cache_file: Optional[str] = None,\n\t    cache_age: int = 60 * 60 * 48,\n\t    slow_down: int = 0,\n", "    ignore_returncode: bool = False,\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    with_cleanup_results: bool = False,\n\t    include_raw_whois_text: bool = False,\n\t    timeout: Optional[float] = None,\n\t    parse_partial_response: bool = False,\n\t    wh: str = \"whois\",\n\t    simplistic: bool = False,\n\t    withRedacted: bool = False,\n", ") -> Optional[Domain]:\n\t    try:\n\t        whois_str = do_query(\n\t            dl=dl,\n\t            force=force,\n\t            cache_file=cache_file,\n\t            cache_age=cache_age,\n\t            slow_down=slow_down,\n\t            ignore_returncode=ignore_returncode,\n\t            server=server,\n", "            verbose=verbose,\n\t            timeout=timeout,\n\t            parse_partial_response=parse_partial_response,\n\t            wh=wh,\n\t            simplistic=simplistic,\n\t        )\n\t    except Exception as e:\n\t        if simplistic:\n\t            return Domain(\n\t                data={},\n", "                whois_str=None,\n\t                verbose=verbose,\n\t                include_raw_whois_text=include_raw_whois_text,\n\t                exeptionStr=f\"{e}\",\n\t            )\n\t        raise e\n\t    LastWhois[\"Try\"].append(\n\t        {\n\t            \"Domain\": \".\".join(dl),\n\t            \"rawData\": whois_str,\n", "            \"server\": server,\n\t        }\n\t    )\n\t    data = do_parse(\n\t        whois_str=whois_str,\n\t        tld=tld,\n\t        dl=dl,\n\t        verbose=verbose,\n\t        with_cleanup_results=with_cleanup_results,\n\t        simplistic=simplistic,\n", "        include_raw_whois_text=include_raw_whois_text,\n\t        withRedacted=withRedacted,\n\t    )\n\t    if isinstance(data, Domain):\n\t        return data\n\t    # do we have a result and does it have a domain name\n\t    if data and data[\"domain_name\"][0]:\n\t        return Domain(\n\t            data=data,\n\t            whois_str=whois_str,\n", "            verbose=verbose,\n\t            include_raw_whois_text=include_raw_whois_text,\n\t        )\n\t    return None\n\t# PUBLIC\n\tdef get_last_raw_whois_data() -> Dict[str, Any]:\n\t    global LastWhois\n\t    return LastWhois\n\tdef query(\n\t    domain: str,\n", "    force: bool = False,\n\t    cache_file: Optional[str] = None,\n\t    cache_age: int = 60 * 60 * 48,\n\t    slow_down: int = 0,\n\t    ignore_returncode: bool = False,\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    with_cleanup_results: bool = False,\n\t    internationalized: bool = False,\n\t    include_raw_whois_text: bool = False,\n", "    return_raw_text_for_unsupported_tld: bool = False,\n\t    timeout: Optional[float] = None,\n\t    parse_partial_response: bool = False,\n\t    cmd: str = \"whois\",\n\t    simplistic: bool = False,\n\t    withRedacted: bool = False,\n\t) -> Optional[Domain]:\n\t    \"\"\"\n\t    force=True          Don't use cache.\n\t    cache_file=<path>   Use file to store cache not only memory.\n", "    cache_age=172800    Cache expiration time for given domain, in seconds\n\t    slow_down=0         Time [s] it will wait after you query WHOIS database.\n\t                        This is useful when there is a limit to the number of requests at a time.\n\t    server:             if set use the whois server explicitly for making the query:\n\t                        propagates on linux to \"whois -h <server> <domain>\"\n\t                        propagates on Windows to whois.exe <domain> <server>\n\t    with_cleanup_results: cleanup lines starting with % and REDACTED FOR PRIVACY\n\t    internationalized:  if true convert with internationalizedDomainNameToPunyCode().\n\t    ignore_returncode:  if true and the whois command fails with code 1, still process the data returned as normal.\n\t    verbose:            if true, print relevant information on steps taken to standard error\n", "    include_raw_whois_text:\n\t                        if reqested the full response is also returned.\n\t    return_raw_text_for_unsupported_tld:\n\t                        if the tld is unsupported, just try it anyway but return only the raw text.\n\t    timeout:            timeout in seconds for the whois command to return a result.\n\t    parse_partial_response:\n\t                        try to parse partial response when cmd timed out (stdbuf should be in PATH for best results)\n\t    cmd:                explicitly specify the path to the whois you want to use.\n\t    simplistic:         when simplistic is True we return None for most exceptions and dont pass info why we have no data.\n\t    withRedacted:       show redacted output , default no redacted data is shown\n", "    \"\"\"\n\t    global LastWhois\n\t    LastWhois[\"Try\"] = []  # init on start of query\n\t    wh: str = cmd  # make it compatible with python-whois-extended\n\t    assert isinstance(domain, str), Exception(\"`domain` - must be <str>\")\n\t    return_raw_text_for_unsupported_tld = bool(return_raw_text_for_unsupported_tld)\n\t    try:\n\t        tld, dl = _fromDomainStringToTld(  # may raise UnknownTld\n\t            domain,\n\t            internationalized,\n", "            verbose,\n\t        )\n\t        if tld is None:\n\t            return None\n\t    except Exception as e:\n\t        if simplistic:\n\t            return Domain(\n\t                data={},\n\t                whois_str=None,\n\t                verbose=verbose,\n", "                include_raw_whois_text=include_raw_whois_text,\n\t                exeptionStr=\"UnknownTld\",\n\t            )\n\t        raise (e)\n\t    dl = cast(List[str], dl)\n\t    if tld not in TLD_RE.keys():\n\t        msg = _validateWeKnowTheToplevelDomain(tld, return_raw_text_for_unsupported_tld)\n\t        if msg is None:\n\t            return _doUnsupportedTldAnyway(\n\t                tld,\n", "                dl,\n\t                ignore_returncode=ignore_returncode,\n\t                slow_down=slow_down,\n\t                server=server,\n\t                verbose=verbose,\n\t                wh=wh,\n\t                simplistic=simplistic,\n\t            )\n\t        if simplistic:\n\t            return Domain(\n", "                data={},\n\t                whois_str=None,\n\t                verbose=verbose,\n\t                include_raw_whois_text=include_raw_whois_text,\n\t                exeptionStr=\"UnknownTld\",\n\t            )\n\t        raise UnknownTld(msg)\n\t    thisTld = cast(Dict[str, Any], TLD_RE.get(tld))\n\t    if _verifyPrivateRegistry(thisTld, simplistic):  # may raise WhoisPrivateRegistry\n\t        msg = \"This tld has either no whois server or responds only with minimal information\"\n", "        return Domain(\n\t            data={},\n\t            whois_str=None,\n\t            verbose=verbose,\n\t            include_raw_whois_text=include_raw_whois_text,\n\t            exeptionStr=msg,\n\t        )\n\t    server = _doServerHintsForThisTld(tld, thisTld, server, verbose)\n\t    slow_down = slow_down or SLOW_DOWN\n\t    slow_down = _doSlowdownHintForThisTld(tld, thisTld, slow_down, verbose)\n", "    # if the tld is a multi level we should not move further down than the tld itself\n\t    # we currently allow progressive lookups until we find something:\n\t    # so xxx.yyy.zzz will try both xxx.yyy.zzz and yyy.zzz\n\t    # but if the tld is yyy.zzz we should only try xxx.yyy.zzz\n\t    cache_file = cache_file or CACHE_FILE\n\t    tldLevel = tld.split(\".\")\n\t    while 1:\n\t        result = _doOneLookup(\n\t            tld=tld,\n\t            dl=dl,\n", "            force=force,\n\t            cache_file=cache_file,\n\t            cache_age=cache_age,\n\t            slow_down=slow_down,\n\t            ignore_returncode=ignore_returncode,\n\t            server=server,\n\t            verbose=verbose,\n\t            with_cleanup_results=with_cleanup_results,\n\t            include_raw_whois_text=include_raw_whois_text,\n\t            timeout=timeout,\n", "            parse_partial_response=parse_partial_response,\n\t            wh=wh,\n\t            simplistic=simplistic,\n\t            withRedacted=withRedacted,\n\t        )\n\t        if result:\n\t            return result\n\t        if len(dl) > (len(tldLevel) + 1):\n\t            dl = dl[1:]  # strip one element from the front and try again\n\t            if verbose:\n", "                print(f\"try again with {dl}, {len(dl)}, {len(tldLevel) + 1}\", file=sys.stderr)\n\t            continue\n\t        # no result or no domain but we can not reduce any further so we have None\n\t        return None\n\t    return None\n\t# Add get function to support return result in dictionary form\n\tget = _result2dict(query)\n\tdef getVersion() -> str:\n\t    return VERSION\n\tdef getTestHint(tld: str) -> Optional[str]:\n", "    if tld not in ZZ:\n\t        return None\n\t    k: str = \"_test\"\n\t    if k not in ZZ[tld]:\n\t        return None\n\t    return str(ZZ[tld][k])\n"]}
{"filename": "whoisdomain/_0_init_tld.py", "chunked_list": ["import re\n\timport sys\n\tfrom typing import (\n\t    Dict,\n\t    List,\n\t    Any,\n\t)\n\tfrom .tld_regexpr import ZZ\n\tfrom .exceptions import (\n\t    UnknownTld,\n", ")\n\tVerbose: bool = False\n\tTLD_RE: Dict[str, Dict[str, Any]] = {}\n\tREG_COLLECTION_BY_KEY: Dict[str, Any] = {}\n\tdef validTlds() -> List[str]:\n\t    return sorted(TLD_RE.keys())\n\tdef filterTldToSupportedPattern(\n\t    domain: str,\n\t    d: List[str],\n\t    verbose: bool = False,\n", ") -> str:\n\t    # we have max 2 levels so first check if the last 2 are in our list\n\t    tld = f\"{d[-2]}.{d[-1]}\"\n\t    if tld in ZZ:\n\t        if verbose:\n\t            print(f\"we have {tld}\", file=sys.stderr)\n\t        return tld\n\t    # if not check if the last item  we have\n\t    tld = f\"{d[-1]}\"\n\t    if tld in ZZ:\n", "        if verbose:\n\t            print(f\"we have {tld}\", file=sys.stderr)\n\t        return tld\n\t    if verbose:\n\t        print(f\"we DONT have {tld}\", file=sys.stderr)\n\t    # if not fail\n\t    a = f\"The TLD {tld} is currently not supported by this package.\"\n\t    b = \"Use validTlds() to see what toplevel domains are supported.\"\n\t    msg = f\"{a} {b}\"\n\t    raise UnknownTld(msg)\n", "def get_tld_re(tld: str, override: bool = False) -> Dict[str, Any]:\n\t    if override is False:\n\t        if tld in TLD_RE:\n\t            return TLD_RE[tld]\n\t    v = ZZ[tld]\n\t    extend = v.get(\"extend\")\n\t    if extend:\n\t        e = get_tld_re(extend)  # call recursive\n\t        tmp = e.copy()\n\t        tmp.update(v)  # and merge results in tmp with caller data in v\n", "        # The update() method updates the dictionary with the elements\n\t        # from another dictionary object or from an iterable of key/value pairs.\n\t    else:\n\t        tmp = v\n\t    # finally we dont want to propagate the extend data\n\t    # as it is only used to recursivly populate the dataset\n\t    if \"extend\" in tmp:\n\t        del tmp[\"extend\"]\n\t    # we want now to exclude _server hints\n\t    tld_re = dict(\n", "        # (k, re.compile(v, re.IGNORECASE) if (isinstance(v, str) and k[0] != \"_\") else v) for k, v in tmp.items()\n\t        # dont recompile each re by themselves, reuse existing compiled re\n\t        (k, REG_COLLECTION_BY_KEY[k][v] if (isinstance(v, str) and k[0] != \"_\") else v)\n\t        for k, v in tmp.items()\n\t    )\n\t    # meta domains start with _: examples _centralnic and _donuts\n\t    if tld[0] != \"_\":\n\t        TLD_RE[tld] = tld_re\n\t    return tld_re\n\tdef mergeExternalDictWithRegex(aDict: Dict[str, Any] = {}) -> None:\n", "    # merge in ZZ, this extends ZZ with new tld's and overrides existing tld's\n\t    for tld in aDict.keys():\n\t        ZZ[tld] = aDict[tld]\n\t    # reprocess te regexes we newly defined or overrode\n\t    override = True\n\t    for tld in aDict.keys():\n\t        initOne(tld, override)\n\tdef initOne(tld: str, override: bool = False) -> None:\n\t    if tld[0] == \"_\":  # skip meta domain patterns , these are not domains just handles we reuse\n\t        return\n", "    what = get_tld_re(tld, override)\n\t    # test if the string is identical after idna conversion\n\t    d = tld.split(\".\")\n\t    j = [k.encode(\"idna\").decode() or k for k in d]\n\t    tld2 = \".\".join(j)\n\t    if tld == tld2:\n\t        return\n\t    # also automatically see if we can internationalize the domains to the official ascii string\n\t    TLD_RE[tld2] = what\n\t    if Verbose:\n", "        print(f\"{tld} -> {tld2}\", file=sys.stderr)\n\tdef buildRegCollection(zz: Dict[str, Any]) -> Dict[str, Any]:\n\t    regCollection: Dict[str, Any] = {}\n\t    # get all regexes\n\t    for name in zz:\n\t        # print(name)\n\t        z = zz[name]\n\t        for key in z:\n\t            if key is None:\n\t                continue\n", "            if key.startswith(\"_\"):  # skip meta keys, they are not regexes\n\t                continue\n\t            if key in [\"extend\"]:  # this actually should have been a meta key: \"_extend\"\n\t                continue\n\t            if key not in regCollection:\n\t                regCollection[key] = {}\n\t            reg = z[key]\n\t            if reg is None:\n\t                continue\n\t            if reg in regCollection[key] and regCollection[key][reg] is not None:\n", "                # we already have a compiled regex, no need to do it again\n\t                continue\n\t            regCollection[key][reg] = None\n\t            if isinstance(reg, str):\n\t                regCollection[key][reg] = re.compile(reg, flags=re.IGNORECASE)\n\t    return regCollection\n\tdef initOnImport() -> None:\n\t    global REG_COLLECTION_BY_KEY\n\t    # here we run the import processing\n\t    # we load all tld's on import so we dont lose time later\n", "    # we keep ZZ so we can later reuse it if we want to aoverrid or update tld's\n\t    REG_COLLECTION_BY_KEY = buildRegCollection(ZZ)\n\t    override = False\n\t    for tld in ZZ.keys():\n\t        initOne(tld, override)\n\tinitOnImport()\n"]}
{"filename": "whoisdomain/_1_query.py", "chunked_list": ["import subprocess\n\timport time\n\timport sys\n\timport os\n\timport platform\n\timport json\n\timport shutil\n\tfrom .exceptions import WhoisCommandFailed, WhoisCommandTimeout\n\tfrom typing import Dict, List, Optional, Tuple\n\t# PYTHON_VERSION = sys.version_info[0]\n", "CACHE: Dict[str, Tuple[int, str]] = {}\n\tCACHE_MAX_AGE = 60 * 60 * 48  # 48h\n\tIS_WINDOWS = platform.system() == \"Windows\"\n\tif not IS_WINDOWS and shutil.which(\"stdbuf\"):\n\t    STDBUF_OFF_CMD = [\"stdbuf\", \"-o0\"]\n\telse:\n\t    STDBUF_OFF_CMD = []\n\tdef _cache_load(cf: str) -> None:\n\t    if not os.path.isfile(cf):\n\t        return\n", "    global CACHE\n\t    f = open(cf, \"r\")\n\t    try:\n\t        CACHE = json.load(f)\n\t    except Exception as e:\n\t        print(f\"ignore lson load err: {e}\", file=sys.stderr)\n\t    f.close()\n\tdef _cache_save(cf: str) -> None:\n\t    global CACHE\n\t    f = open(cf, \"w\")\n", "    json.dump(CACHE, f)\n\t    f.close()\n\tdef _testWhoisPythonFromStaticTestData(\n\t    dl: List[str],\n\t    ignore_returncode: bool,\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t) -> str:\n\t    domain = \".\".join(dl)\n\t    testDir = os.getenv(\"TEST_WHOIS_PYTHON\")\n", "    pathToTestFile = f\"{testDir}/{domain}/input\"\n\t    if os.path.exists(pathToTestFile):\n\t        with open(pathToTestFile, mode=\"rb\") as f:  # switch to binary mode as that is what Popen uses\n\t            # make sure the data is treated exactly the same as the output of Popen\n\t            return f.read().decode(errors=\"ignore\")\n\t    raise WhoisCommandFailed(\"\")\n\tdef _tryInstallMissingWhoisOnWindows(\n\t    verbose: bool = False,\n\t) -> None:\n\t    \"\"\"\n", "    Windows 'whois' command wrapper\n\t    https://docs.microsoft.com/en-us/sysinternals/downloads/whois\n\t    \"\"\"\n\t    folder = os.getcwd()\n\t    copy_command = r\"copy \\\\live.sysinternals.com\\tools\\whois.exe \" + folder\n\t    if verbose:\n\t        print(\"downloading dependencies\", file=sys.stderr)\n\t        print(copy_command, file=sys.stderr)\n\t    subprocess.call(\n\t        copy_command,\n", "        stdout=subprocess.PIPE,\n\t        stderr=subprocess.STDOUT,\n\t        shell=True,\n\t    )\n\tdef _makeWhoisCommandToRun(\n\t    dl: List[str],\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    wh: str = \"whois\",\n\t) -> List[str]:\n", "    domain = \".\".join(dl)\n\t    if \" \" in wh:\n\t        whList = wh.split(\" \")\n\t    else:\n\t        whList = [wh]\n\t    if IS_WINDOWS:\n\t        if wh == \"whois\":  # only if the use did not specify what whois to use\n\t            if os.path.exists(\"whois.exe\"):\n\t                wh = r\".\\whois.exe\"\n\t            else:\n", "                find = False\n\t                paths = os.environ[\"path\"].split(\";\")\n\t                for path in paths:\n\t                    wpath = os.path.join(path, \"whois.exe\")\n\t                    if os.path.exists(wpath):\n\t                        wh = wpath\n\t                        find = True\n\t                        break\n\t                if not find:\n\t                    _tryInstallMissingWhoisOnWindows(verbose)\n", "        whList = [wh]\n\t        if server:\n\t            return whList + [\"-v\", \"-nobanner\", domain, server]\n\t        return whList + [\"-v\", \"-nobanner\", domain]\n\t    # not windows\n\t    if server:\n\t        return whList + [domain, \"-h\", server]\n\t    return whList + [domain]\n\tdef _do_whois_query(\n\t    dl: List[str],\n", "    ignore_returncode: bool,\n\t    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    timeout: Optional[float] = None,\n\t    parse_partial_response: bool = False,\n\t    wh: str = \"whois\",\n\t    simplistic: bool = False,\n\t) -> str:\n\t    # if getenv[TEST_WHOIS_PYTON] fake whois by reading static data from a file\n\t    # this wasy we can actually implemnt a test run with known data in and expected data out\n", "    if os.getenv(\"TEST_WHOIS_PYTHON\"):\n\t        return _testWhoisPythonFromStaticTestData(dl, ignore_returncode, server, verbose)\n\t    cmd = _makeWhoisCommandToRun(\n\t        dl=dl,\n\t        server=server,\n\t        verbose=verbose,\n\t        wh=wh,\n\t    )\n\t    if verbose:\n\t        print(cmd, wh, file=sys.stderr)\n", "    # LANG=en is added to make the \".jp\" output consist across all environments\n\t    p = subprocess.Popen(\n\t        # STDBUF_OFF_CMD needed to not lose data on kill\n\t        STDBUF_OFF_CMD + cmd,\n\t        stdout=subprocess.PIPE,\n\t        stderr=subprocess.STDOUT,\n\t        env={\"LANG\": \"en\"} if dl[-1] in \".jp\" else None,\n\t    )\n\t    try:\n\t        r = p.communicate(timeout=timeout)[0].decode(errors=\"ignore\")\n", "    except subprocess.TimeoutExpired:\n\t        # Kill the child process & flush any output buffers\n\t        p.kill()\n\t        r = p.communicate()[0].decode(errors=\"ignore\")\n\t        # In most cases whois servers returns partial domain data really fast\n\t        # after that delay occurs (probably intentional) before returning contact data.\n\t        # Add this option to cover those cases\n\t        if not parse_partial_response or not r:\n\t            raise WhoisCommandTimeout(f\"timeout: query took more then {timeout} seconds\")\n\t    if verbose:\n", "        print(r, file=sys.stderr)\n\t    if ignore_returncode is False and p.returncode not in [0, 1]:\n\t        # network error, \"fgets: Connection reset by peer\" fix, ignore\n\t        if \"fgets: Connection reset by peer\" in r:\n\t            return r.replace(\"fgets: Connection reset by peer\", \"\")\n\t        # connect: Connection refused\n\t        elif \"connect: Connection refused\" in r:\n\t            return r.replace(\"connect: Connection refused\", \"\")\n\t        if simplistic:\n\t            return r\n", "        raise WhoisCommandFailed(r)\n\t    return r\n\t# PUBLIC\n\tdef do_query(\n\t    dl: List[str],\n\t    force: bool = False,\n\t    cache_file: Optional[str] = None,\n\t    cache_age: int = CACHE_MAX_AGE,\n\t    slow_down: int = 0,\n\t    ignore_returncode: bool = False,\n", "    server: Optional[str] = None,\n\t    verbose: bool = False,\n\t    timeout: Optional[float] = None,\n\t    parse_partial_response: bool = False,\n\t    wh: str = \"whois\",\n\t    simplistic: bool = False,\n\t) -> str:\n\t    k = \".\".join(dl)\n\t    if cache_file:\n\t        if verbose:\n", "            print(f\"using cache file: {cache_file}\", file=sys.stderr)\n\t        _cache_load(cache_file)\n\t    # actually also whois uses cache, so if you really dont want to use cache\n\t    # you should also pass the --force-lookup flag (on linux)\n\t    if force or k not in CACHE or CACHE[k][0] < time.time() - cache_age:\n\t        if verbose:\n\t            print(f\"force = {force}\", file=sys.stderr)\n\t        # slow down before so we can force individual domains at a slower tempo\n\t        if slow_down:\n\t            time.sleep(slow_down)\n", "        # populate a fresh cache entry\n\t        CACHE[k] = (\n\t            int(time.time()),\n\t            _do_whois_query(\n\t                dl=dl,\n\t                ignore_returncode=ignore_returncode,\n\t                server=server,\n\t                verbose=verbose,\n\t                timeout=timeout,\n\t                parse_partial_response=parse_partial_response,\n", "                wh=wh,\n\t                simplistic=simplistic,\n\t            ),\n\t        )\n\t        if cache_file:\n\t            _cache_save(cache_file)\n\t    return CACHE[k][1]\n"]}
{"filename": "whoisdomain/exceptions.py", "chunked_list": ["class UnknownTld(Exception):\n\t    pass\n\tclass FailedParsingWhoisOutput(Exception):\n\t    pass\n\tclass WhoisQuotaExceeded(Exception):\n\t    pass\n\tclass UnknownDateFormat(Exception):\n\t    pass\n\tclass WhoisCommandFailed(Exception):\n\t    pass\n", "class WhoisPrivateRegistry(Exception):\n\t    # also known as restricted : see comments at the bottom in tld_regexpr.py\n\t    # almost no info is returned or there is no cli whois server at all:\n\t    # see: https://www.iana.org/domains/root/db/<tld>.html\n\t    pass\n\tclass WhoisCommandTimeout(Exception):\n\t    pass\n"]}
{"filename": "whoisdomain/_3_adjust.py", "chunked_list": ["import re\n\timport sys\n\timport datetime\n\tfrom .exceptions import UnknownDateFormat\n\tfrom typing import Any, List, Dict, Optional\n\t# PYTHON_VERSION = sys.version_info[0]\n\tclass Domain:\n\t    # mandatory fields we expect always to be present (but can be None or '')\n\t    name: Optional[str] = None\n\t    tld: Optional[str] = None\n", "    registrar: Optional[str] = None\n\t    registrant_country: Optional[str] = None\n\t    creation_date = None\n\t    expiration_date = None\n\t    last_updated = None\n\t    status: Optional[str] = None\n\t    statuses: List[str] = []\n\t    dnssec: bool = False\n\t    name_servers: List[str] = []\n\t    # optional fields\n", "    owner: Optional[str] = None\n\t    abuse_contact = None\n\t    reseller = None\n\t    registrant = None\n\t    admin = None\n\t    emails: List[str] = []\n\t    def _cleanupArray(\n\t        self,\n\t        data: List[str],\n\t    ) -> List[str]:\n", "        if \"\" in data:\n\t            index = data.index(\"\")\n\t            data.pop(index)\n\t        return data\n\t    def _doNameservers(\n\t        self,\n\t        data: Dict[str, Any],\n\t    ) -> None:\n\t        tmp: List[str] = []\n\t        for x in data[\"name_servers\"]:\n", "            if isinstance(x, str):\n\t                tmp.append(x.strip().lower())\n\t                continue\n\t            # not a string but an array\n\t            for y in x:\n\t                tmp.append(y.strip().lower())\n\t        self.name_servers = []\n\t        for x in tmp:\n\t            x = x.strip(\" .\")  # remove any leading or trailing spaces and/or dots\n\t            if x:\n", "                if \" \" in x:\n\t                    x, _ = x.split(\" \", 1)\n\t                    x = x.strip(\" .\")\n\t                x = x.lower()\n\t                if x not in self.name_servers:\n\t                    self.name_servers.append(x)\n\t        self.name_servers = sorted(self.name_servers)\n\t    def _doStatus(\n\t        self,\n\t        data: Dict[str, Any],\n", "    ) -> None:\n\t        self.status = data[\"status\"][0].strip()\n\t        self.statuses = sorted(  # sorted added to get predictable output during test\n\t            list(  # list(set(...))) to deduplicate results\n\t                set(\n\t                    [s.strip() for s in data[\"status\"]],\n\t                ),\n\t            ),\n\t        )\n\t        if \"\" in self.statuses:\n", "            self.statuses = self._cleanupArray(self.statuses)\n\t    def _doOptionalFields(\n\t        self,\n\t        data: Dict[str, Any],\n\t    ) -> None:\n\t        # optional fiels\n\t        if \"owner\" in data:\n\t            self.owner = data[\"owner\"][0].strip()\n\t        if \"abuse_contact\" in data:\n\t            self.abuse_contact = data[\"abuse_contact\"][0].strip()\n", "        if \"reseller\" in data:\n\t            self.reseller = data[\"reseller\"][0].strip()\n\t        if \"registrant\" in data:\n\t            self.registrant = data[\"registrant\"][0].strip()\n\t        if \"admin\" in data:\n\t            self.admin = data[\"admin\"][0].strip()\n\t        if \"emails\" in data:\n\t            self.emails = sorted(  # sorted added to get predictable output during test\n\t                list(  # list(set(...))) to deduplicate results\n\t                    set(\n", "                        [s.strip() for s in data[\"emails\"]],\n\t                    ),\n\t                ),\n\t            )\n\t            if \"\" in self.emails:\n\t                self.emails = self._cleanupArray(self.emails)\n\t    def __init__(\n\t        self,\n\t        data: Dict[str, Any],\n\t        whois_str: Optional[str] = None,\n", "        verbose: bool = False,\n\t        include_raw_whois_text: bool = False,\n\t        return_raw_text_for_unsupported_tld: bool = False,\n\t        exeptionStr: Optional[str] = None,\n\t    ):\n\t        if include_raw_whois_text and whois_str is not None:\n\t            self.text = whois_str\n\t        if exeptionStr is not None:\n\t            self._exception = exeptionStr\n\t            return\n", "        self.name = data[\"domain_name\"][0].strip().lower()\n\t        self.tld = data[\"tld\"].lower()\n\t        if return_raw_text_for_unsupported_tld is True:\n\t            return\n\t        # process mandatory fields that we expact always to be present even if we have None or ''\n\t        self.registrar = data[\"registrar\"][0].strip()\n\t        self.registrant_country = data[\"registrant_country\"][0].strip()\n\t        # date time items\n\t        self.creation_date = str_to_date(data[\"creation_date\"][0], self.tld, verbose=verbose)\n\t        self.expiration_date = str_to_date(data[\"expiration_date\"][0], self.tld, verbose=verbose)\n", "        self.last_updated = str_to_date(data[\"updated_date\"][0], self.tld, verbose=verbose)\n\t        self.dnssec = data[\"DNSSEC\"]\n\t        self._doStatus(data)\n\t        self._doNameservers(data)\n\t        # optional fiels\n\t        self._doOptionalFields(data)\n\t# http://docs.python.org/library/datetime.html#strftime-strptime-behavior\n\tDATE_FORMATS = [\n\t    \"%d-%b-%Y\",  # 02-jan-2000\n\t    \"%d-%m-%Y\",  # 02-01-2000\n", "    \"%d.%m.%Y\",  # 02.02.2000\n\t    \"%d/%m/%Y\",  # 01/06/2011\n\t    \"%Y-%m-%d\",  # 2000-01-02\n\t    \"%Y.%m.%d\",  # 2000.01.02\n\t    \"%Y/%m/%d\",  # 2005/05/30\n\t    \"%b-%Y\",  # aug-1996\n\t    \"before %b-%Y\",  # before aug-1996\n\t    \"before %Y%m%d\",  # before 19950101\n\t    \"%Y.%m.%d %H:%M:%S\",  # 2002.09.19 13:00:00\n\t    \"%Y%m%d %H:%M:%S\",  # 20110908 14:44:51\n", "    \"%Y-%m-%d %H:%M:%S\",  # 2011-09-08 14:44:51\n\t    \"%Y-%m-%d %H:%M:%S%z\",  # 2025-04-27 02:54:19+03:00\n\t    \"%Y-%m-%d %H:%M:%S %z\",  # 2020-05-18 01:30:25 +0200\n\t    \"%Y-%m-%d %H:%M:%S CLST\",  # 2011-09-08 14:44:51 CLST CL\n\t    \"%Y-%m-%d %H:%M:%S.%f\",  # 2011-09-08 14:44:51 CLST CL\n\t    \"%d.%m.%Y  %H:%M:%S\",  # 19.09.2002 13:00:00\n\t    \"%d-%b-%Y %H:%M:%S %Z\",  # 24-Jul-2009 13:20:03 UTC\n\t    \"%Y/%m/%d %H:%M:%S (%z)\",  # 2011/06/01 01:05:01 (+0900)\n\t    \"%Y/%m/%d %H:%M:%S\",  # 2011/06/01 01:05:01\n\t    \"%a %b %d %H:%M:%S %Z %Y\",  # Tue Jun 21 23:59:59 GMT 2011\n", "    \"%a %b %d %Y\",  # Tue Dec 12 2000\n\t    \"%Y-%m-%dT%H:%M:%S\",  # 2007-01-26T19:10:31\n\t    \"%Y-%m-%dT%H:%M:%SZ\",  # 2007-01-26T19:10:31Z\n\t    \"%Y-%m-%dt%H:%M:%S.%fz\",  # 2007-01-26t19:10:31.00z\n\t    \"%Y-%m-%dT%H:%M:%S%z\",  # 2011-03-30T19:36:27+0200\n\t    \"%Y-%m-%dT%H:%M:%S.%f%z\",  # 2011-09-08T14:44:51.622265+03:00\n\t    \"%Y-%m-%dt%H:%M:%S.%f\",  # 2011-09-08t14:44:51.622265\n\t    \"%Y-%m-%dt%H:%M:%S\",  # 2007-01-26T19:10:31\n\t    \"%Y-%m-%dt%H:%M:%SZ\",  # 2007-01-26T19:10:31Z\n\t    \"%Y-%m-%dt%H:%M:%Sz\",  # 2007-01-26T19:10:31Z\n", "    \"%Y-%m-%dt%H:%M:%S.%fz\",  # 2007-01-26t19:10:31.00z\n\t    \"%Y-%m-%dt%H:%M:%S%z\",  # 2011-03-30T19:36:27+0200\n\t    \"%Y-%m-%dt%H:%M:%S.%f%z\",  # 2011-09-08T14:44:51.622265+03:00\n\t    \"%Y%m%d\",  # 20110908\n\t    \"%Y. %m. %d.\",  # 2020. 01. 12.\n\t    \"before %b-%Y\",  # before aug-1996\n\t    \"%a %d %b %Y\",  # Tue 21 Jun 2011\n\t    \"%A %d %b %Y\",  # Tuesday 21 Jun 2011\n\t    \"%a %d %B %Y\",  # Tue 21 June 2011\n\t    \"%A %d %B %Y\",  # Tuesday 21 June 2011\n", "    \"%Y-%m-%d %H:%M:%S (%Z+0:00)\",  # 2007-12-24 10:24:32 (gmt+0:00)\n\t    \"%d-%m-%Y %H:%M:%S %Z+1\",  # 19-04-2021 13:56:51 GMT+1\n\t    \"%B %d %Y\",  # January 01 2000\n\t    \"%Y-%b-%d\",  # 2021-Oct-18\n\t    \"%d/%m/%Y %H:%M:%S\",  # 08/09/2011 14:44:51\n\t    \"%m/%d/%Y\",  # 03/28/2013\n\t    \"%d %b %Y\",  # 28 jan 2021\n\t    \"%d-%b-%Y %H:%M:%S\",  # 30-nov-2009 17:00:58\n\t    \"%Y%m%d%H%M%S\",  # 20071224102432 used in edu_ua\n\t    \"%Y-%m-%d %H:%M:%S (%Z%z)\",  # .tw uses (UTC+8) but we need (UTC+0800) for %z match\n", "    \"%d %B %Y at %H:%M:%S.%f\",  # 07 january 2020 at 23:38:30.772\n\t    \"%Y-%m-%d %H:%M:%S.%f %Z\",  # 2022-09-18 22:38:18.0 UTC (sn Senegal),\n\t    \"%a %b %d %H:%M:%S %Y\",  # Thu Oct 21 05:54:20 2032 (kg Kyrgyzstan)\n\t    \"%m-%d-%Y\",  # 03-28-2013 # is ambivalent for all days <=12\n\t]\n\tCUSTOM_DATE_FORMATS = {\n\t    \"ml\": \"%m/%d/%Y\",\n\t}\n\tdef str_to_date(\n\t    text: str,\n", "    tld: Optional[str] = None,\n\t    verbose: bool = False,\n\t) -> Optional[datetime.datetime]:\n\t    text = text.strip().lower()\n\t    if verbose:\n\t        print(f\"tld: {tld}; str_to_date: {text}\", file=sys.stderr)\n\t    noDate = [\n\t        \"not defined\",\n\t        \"n/a\",\n\t        \"none\",\n", "    ]\n\t    if not text or text in noDate:\n\t        return None\n\t    # replace japan standard time to +0900 (%z format)\n\t    text = text.replace(\"(jst)\", \"(+0900)\")\n\t    text = re.sub(r\"(\\+[0-9]{2}):([0-9]{2})\", \"\\\\1\\\\2\", text)\n\t    # text = re.sub(r\"(\\+[0-9]{2})$\", \"\\\\1:00\", text)\n\t    # text = re.sub(r\"(\\+[0-9]{2})$\", \"\\\\100\", text) # python 3.6 does not parse : in the timezone offset\n\t    if re.search(r\"(\\+[0-9]{2})$\", text):\n\t        text = text + \"00\"\n", "    # strip trailing space and comment\n\t    text = re.sub(r\"(\\ #.*)\", \"\", text)\n\t    # tw uses UTC+8, but strptime needs UTC+0800), note we are now lower case\n\t    r = r\"\\(utc([-+])(\\d)\\)\"\n\t    if re.search(r, text):\n\t        text = re.sub(r, \"(utc\\\\g<1>0\\\\g<2>00)\", text)\n\t    # hack for 1st 2nd 3rd 4th etc\n\t    # better here https://stackoverflow.com/questions/1258199/python-datetime-strptime-wildcard\n\t    text = re.sub(r\"(\\d+)(st|nd|rd|th) \", r\"\\1 \", text)\n\t    # Remove consecutive whitespace\n", "    text = re.sub(r\"\\s\\s+\", r\" \", text)\n\t    # 07 january 2020 at 23:38:30.772\n\t    # %d %B %Y at %H:%M %S.%f\n\t    if tld and tld in CUSTOM_DATE_FORMATS:\n\t        return (\n\t            datetime.datetime.strptime(\n\t                text,\n\t                CUSTOM_DATE_FORMATS[tld],\n\t            )\n\t            .astimezone()\n", "            .replace(tzinfo=None)\n\t        )\n\t    for f in DATE_FORMATS:\n\t        try:\n\t            if verbose:\n\t                print(f\"try with {f} on text: {text}\", file=sys.stderr)\n\t            z = datetime.datetime.strptime(text, f)\n\t            z = z.astimezone()\n\t            z = z.replace(tzinfo=None)\n\t            return z\n", "        except ValueError as v:\n\t            if verbose:\n\t                print(f\"{v}\", file=sys.stderr)\n\t            pass\n\t    raise UnknownDateFormat(\"Unknown date format: '%s'\" % text)\n"]}
{"filename": "bin/test_adjust.py", "chunked_list": ["#!/usr/bin/env python\n\t# -*- coding: utf-8 -*-\n\t# from https://github.com/maarten-boot/python-whois-extended\n\tfrom whoisdomain._3_adjust import str_to_date\n\tfrom typing import (\n\t    List,\n\t)\n\tTEST_DATETIMES: List[str] = [\n\t    \"02-jan-2000\",\n\t    \"02.02.2000\",\n", "    \"01/06/2011\",\n\t    \"2000-01-02\",\n\t    \"2000.01.02\",\n\t    \"2005/05/30\",\n\t    \"31-01-2000\",\n\t    \"01-31-2000\",  # is ambivalent for all days <=12 could be interpreded as dd-mm-yyyy\n\t    \"20240405\",\n\t    \"2000. 01. 31.\",\n\t    \"aug-1996\",\n\t    \"2002.09.19 13:00:00\",\n", "    \"20110908 14:44:51\",\n\t    \"2011-09-08 14:44:51\",\n\t    \"19.09.2002 13:00:00\",\n\t    \"24-Jul-2009 13:20:03 UTC\",\n\t    \"24-Jul-2009 13:20:03\",\n\t    # '%d %b %Y %H:%M %Z',\n\t    \"2011/06/01 01:05:01 (+0900)\",\n\t    \"2011/06/01 01:05:01\",\n\t    \"Tue Jun 21 23:59:59 GMT 2011\",\n\t    \"Tue Jun 21 23:59:59 2015\",\n", "    \"Tue Dec 12 2000\",\n\t    \"2007-01-26T19:10:31\",\n\t    \"2007-01-26T19:10:31Z\",\n\t    \"2019-11-12T19:15:55.283Z\",\n\t    \"2011-03-30T19:36:27+0200\",\n\t    \"2011-09-08T14:44:51.622265+03:00\",\n\t    \"2011-09-08t14:44:51.622265\",\n\t    \"2010-04-07 03:32:36 (GMT+0:00)\",\n\t    \"2010-04-07 03:32:36 (GMT+00:00)\",\n\t    \"21/09/2018 23:59:48\",\n", "    \"2015-08-21 16:07:21+02\",\n\t    \"2015-08-21 16:07:21+03\",\n\t    \"2024-04-21 00:00:00 (UTC+8)\",\n\t]\n\tfor f in TEST_DATETIMES:\n\t    try:\n\t        str_to_date(f)\n\t    except ValueError as err:\n\t        print(f\"{err} :: Unable to convert: '%s'\" % f)\n\t        raise\n"]}
{"filename": "bin/test.py", "chunked_list": ["#!/usr/bin/env python\n\t# -*- coding: utf-8 -*-\n\t# from: https://github.com/maarten-boot/python-whois-extended\n\timport sys\n\tfrom typing import (\n\t    Optional,\n\t    List,\n\t)\n\timport whoisdomain as whois\n\tDOMAINS: str = \"\"\"\n", "google.com\n\twww.fsdfsdfsdfsd.google.com\n\tgoogle.org\n\tgoogle.net\n\tgoogle.pl\n\tgoogle.co\n\tgoogle.co.uk\n\tgoogle.jp\n\tgoogle.co.jp\n\tgoogle.de\n", "google.cc\n\tgoogle.ru\n\tgoogle.us\n\tgoogle.eu,whois.markmonitor.com\n\tgoogle.me\n\tgoogle.be\n\tgoogle.biz\n\tgoogle.info\n\tgoogle.it\n\tgoogle.cz\n", "google.fr\n\tgoogle.lv\n\tgoogle.kz\n\tgoogle.by\n\tgoogle.am\n\tgoogle.com.ua\n\tgoogle.kg\n\tgoogle.help\n\tgoogle.tv\n\tgoogle.link\n", "google.com.sg\n\te2e4.online,whois.nic.ru\n\tnapaster.name,whois.nic.ru\n\tXN--C1AAY4A.XN--P1AI\n\tгугл.рф\n\tnic.pw\n\tnic.bid,whois.nic.bid\n\tnic.host,whois.nic.host\n\tnic.online,whois.nic.online\n\tnic.party,whois.nic.party\n", "nic.pro,whois.nic.pro\n\tnic.review,whois.nic.review\n\tnic.site,whois.nic.site\n\tnic.space,whois.nic.space\n\tnic.top,whois.nic.top\n\tnic.website,whois.nic.website\n\tnic.win,whois.nic.win\n\twhois.aero\n\ttest.taxi\n\ttest.foundation\n", "nic.ir\n\ttest.technology\n\ttest.im\n\tnic.co.ua\n\tnic.travel\n\tgoogle.ee\n\tnic.company\n\tnic.delivery\n\tnic.services\n\tnic.systems\n", "nic.network\n\tnic.cl\n\tnic.company\n\tnic.in\n\ttest.com.br\n\tnic.ge,whois.nic.ge\n\tnic.рус\n\twhois.twnic.net.tw\n\tnic.онлайн\n\t\"\"\"\n", "def query(\n\t    domain: str,\n\t    host: Optional[str] = None,\n\t) -> None:\n\t    print(\"\")\n\t    print(\"-\" * 80)\n\t    print(\"Domain: {0}, host: {1}\".format(domain, host))\n\t    timout = 30  # seconds\n\t    try:\n\t        w = whois.query(\n", "            domain,\n\t            server=host,\n\t            ignore_returncode=True,\n\t            verbose=False,\n\t            internationalized=True,\n\t            include_raw_whois_text=False,\n\t            timeout=timout,\n\t        )\n\t        if w:\n\t            wd = w.__dict__\n", "            for k, v in wd.items():\n\t                print('%20s\\t\"%s\"' % (k, v))\n\t        else:\n\t            print(\"None\")\n\t            print(\"\\n\", whois.get_last_raw_whois_data())\n\t    except Exception as e:\n\t        print(e)\n\tdef parse(data: str) -> None:\n\t    if \",\" not in data:\n\t        query(data)\n", "        return\n\t    dList: List[str] = data.split(\",\")\n\t    if len(dList) == 1:\n\t        query(dList[0])\n\t        return\n\t    if len(dList) == 2:\n\t        query(dList[0], dList[1])\n\t        return\n\tdef main() -> None:\n\t    if len(sys.argv) > 1:\n", "        domains = sys.argv[1:]\n\t    else:\n\t        domains = DOMAINS.split(\"\\n\")\n\t    for data in domains:\n\t        if data:\n\t            parse(data)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "Old/analize_patterns.py", "chunked_list": ["#! /usr/bin/env python3\n\timport sys\n\timport re\n\tfrom typing import (\n\t    # Optional,\n\t    # List,\n\t    Dict,\n\t)\n\t# most likely we can now introduce trailing whitespace trim on all lines from whois,\n\t# and simplefy trailing whitespace rules\n", "# as \\r is already gone now and that was the most disticnt line ending\n\t# occasionally we need to detect \\n\\s+ for groups that belong together\n\t# mostly with indented blocks of nameservers\n\t# import whois\n\tfrom whoisdomain.tld_regexpr import ZZ\n\tdef buildRegCollection(zz: Dict):\n\t    regCollection = {}\n\t    # get all regexes\n\t    for name in zz:\n\t        # print(name)\n", "        z = zz[name]\n\t        for key in z:\n\t            if key is None:\n\t                continue\n\t            if key.startswith(\"_\"):\n\t                continue\n\t            if key in [\"extend\"]:\n\t                continue\n\t            if key not in regCollection:\n\t                regCollection[key] = {}\n", "            reg = z[key]\n\t            if reg is None:\n\t                continue\n\t            regCollection[key][reg] = None\n\t            if isinstance(reg, str):\n\t                regCollection[key][reg] = re.compile(reg, flags=re.IGNORECASE)\n\t    return regCollection\n\tif __name__ == \"__main__\":\n\t    regCollection = buildRegCollection(ZZ)\n\t    for name in sorted(regCollection.keys()):\n", "        print(f\"## {name}\", file=sys.stderr)\n\t        for key in sorted(regCollection[name].keys()):\n\t            if key:\n\t                print(f\"{name}: {key}\")\n"]}
{"filename": "Old/compare_known_tld.py", "chunked_list": ["#! /usr/bin/env python3\n\t# clone https://github.com/jophy/iana_tld_list in ./tmp\n\timport urllib.request\n\tfrom tmp.iana_tld_list.iana import IANA\n\timport whoisdomain as whois\n\tfrom whois._1_query import _do_whois_query\n\t# allow verbose messages during testing (all on stderr)\n\tverbose = False\n\t# by default the all tld file will be refreshed ever 24 hours,\n\t# but you can force a new download anytime also\n", "forceDownloadTld = False\n\t# do you want to overwrite the results file ?\n\toverwrite = True\n\t# do you want interactive questions if files will be re-written?\n\tinteractive = False\n\t# if autoProcessAll is True: all tld's will be processed (initial run > 20 minutes)\n\tautoProcessAll = False\n\twith_test_original = True\n\tdirName = \"/tmp/iana_data\"\n\ti = IANA(\n", "    dirName=dirName,\n\t    verbose=verbose,\n\t    overwrite=overwrite,\n\t    interactive=interactive,\n\t    autoProcessAll=autoProcessAll,\n\t    forceDownloadTld=forceDownloadTld,\n\t)\n\t# ge python whois known tld's and second level domains\n\tknown = sorted(whois.validTlds())\n\t# get iana data\n", "URL = \"https://data.iana.org/TLD/tlds-alpha-by-domain.txt\"\n\tresponse = urllib.request.urlopen(URL)\n\tdata = response.read().decode(\"utf-8\").lower()\n\tdataList = sorted(data.splitlines())\n\t# filter out known names and try to detect names not known by iana\n\tfor name in known:\n\t    if name in dataList:\n\t        continue\n\t    if \".\" in name:\n\t        continue\n", "    if name not in dataList:\n\t        print(f\"{name} tld name from python_whois is not known in IANA list\")\n\t        continue\n\tdataList2 = []\n\tfor name in dataList:\n\t    if name in known:\n\t        continue\n\t    dataList2.append(name)\n\t# Try to auto detect new domains via IANA and some known common regex lists like .com\n\tfound = {}\n", "for tld in dataList2:\n\t    data, status = i.getInfoOnOneTld(tld)\n\t    xtest = data and (\"whois\" in data) and (data[\"whois\"]) and (data[\"whois\"] != \"NULL\")\n\t    if not xtest:\n\t        print(f\"no whois info for tld: {tld} {data}\")\n\t        continue\n\t    wh = data[\"whois\"]\n\t    if wh.endswith(f\".{tld}\"):\n\t        dd = wh.split(\".\")[-2:]\n\t    else:\n", "        dd = [\"meta\", tld]\n\t    print(f\"try: {tld}\")\n\t    zz = _do_whois_query(\n\t        dd,\n\t        ignore_returncode=False,\n\t        server=wh,\n\t    )\n\t    pp = {\"_server\": wh, \"extend\": \"com\"}\n\t    aDictToTestOverride = {tld: pp}\n\t    whois.mergeExternalDictWithRegex(aDictToTestOverride)\n", "    try:\n\t        d = whois.query(\".\".join(dd))\n\t        if d:\n\t            print(d.__dict__)\n\t            if len(d.name_servers) > 0:\n\t                found[tld] = pp\n\t                print(f\"## ZZ['{tld}'] = {found[tld]} # auto-detected via IANA tld\")\n\t    except Exception as e:\n\t        print(e)\n"]}
{"filename": "Old/test3.py", "chunked_list": ["#!/usr/bin/python3\n\timport whoisdomain as whois\n\timport os\n\timport re\n\timport getopt\n\timport sys\n\timport subprocess\n\tfrom typing import Optional, List, Dict\n\tVerbose = False\n\tPrintGetRawWhoisResult = False\n", "Ruleset = False\n\tFailures = {}\n\tIgnoreReturncode = False\n\tclass ResponseCleaner:\n\t    data: Optional[str] = None\n\t    rDict: Dict = {}\n\t    def __init__(self, pathToTestFile: str):\n\t        self.data = self.readInputFile(pathToTestFile)\n\t    def readInputFile(self, pathToTestFile: str):\n\t        if not os.path.exists(pathToTestFile):\n", "            return None\n\t        with open(pathToTestFile, mode=\"rb\") as f:  # switch to binary mode as that is what Popen uses\n\t            # make sure the data is treated exactly the same as the output of Popen\n\t            return f.read().decode(errors=\"ignore\")\n\t    def cleanSection(self, section: List) -> List:\n\t        # cleanup any beginning and ending empty lines from the section\n\t        if len(section) == 0:\n\t            return section\n\t        rr = r\"^\\s*$\"\n\t        n = 0  # remove empty lines from the start of section\n", "        while re.match(rr, section[n]):\n\t            section.pop(n)\n\t            # n stays 0\n\t        n = len(section) - 1  # remove empty lines from the end of the section\n\t        while re.match(rr, section[n]):\n\t            section.pop(n)\n\t            n = len(section) - 1  # remove empty lines from the end of section\n\t        return section\n\t    def splitBodyInSections(self, body: List) -> List:\n\t        # split the body on empty line, cleanup all sections, remove empty sections\n", "        # return list of body's\n\t        sections = []\n\t        n = 0\n\t        sections.append([])\n\t        for line in body:\n\t            if re.match(r\"^\\s*$\", line):\n\t                n += 1\n\t                sections.append([])\n\t                continue\n\t            sections[n].append(line)\n", "        m = 0\n\t        while m < len(sections):\n\t            sections[m] = self.cleanSection(sections[m])\n\t            m += 1\n\t        # now remove ampty sections and return\n\t        sections2 = []\n\t        m = 0\n\t        while m < len(sections):\n\t            if len(sections[m]) > 0:\n\t                sections2.append(\"\\n\".join(sections[m]))\n", "            m += 1\n\t        return sections2\n\t    def cleanupWhoisResponse(\n\t        self,\n\t        verbose: bool = False,\n\t        with_cleanup_results: bool = False,\n\t    ):\n\t        result = whois._2_parse.cleanupWhoisResponse(\n\t            self.data,\n\t            verbose=False,\n", "            with_cleanup_results=False,\n\t        )\n\t        self.rDict = {\n\t            \"BodyHasSections\": False,  # if this is true the body is not a list of lines but a list of sections with lines\n\t            \"Preamble\": [],  # the lines telling what whois servers wwere contacted\n\t            \"Percent\": [],  # lines staring with %% , often not present but may contain hints\n\t            \"Body\": [],  # the body of the whois, may be in sections separated by empty lines\n\t            \"Postamble\": [],  # copyright and other not relevant info for actual parsing whois\n\t        }\n\t        body = []\n", "        rr = []\n\t        z = result.split(\"\\n\")\n\t        preambleSeen = False\n\t        postambleSeen = False\n\t        percentSeen = False\n\t        for line in z:\n\t            if preambleSeen is False:\n\t                if line.startswith(\"[\"):\n\t                    self.rDict[\"Preamble\"].append(line)\n\t                    line = \"PRE;\" + line\n", "                    continue\n\t                else:\n\t                    preambleSeen = True\n\t            if preambleSeen is True and percentSeen is False:\n\t                if line.startswith(\"%\"):\n\t                    self.rDict[\"Percent\"].append(line)\n\t                    line = \"PERCENT;\" + line\n\t                    continue\n\t                else:\n\t                    percentSeen = True\n", "            if postambleSeen is False:\n\t                if line.startswith(\"-- \") or line.startswith(\">>> \") or line.startswith(\"Copyright notice\"):\n\t                    postambleSeen = True\n\t            if postambleSeen is True:\n\t                self.rDict[\"Postamble\"].append(line)\n\t                line = \"POST;\" + line\n\t                continue\n\t            body.append(line)\n\t            if \"\\t\" in line:\n\t                line = \"TAB;\" + line  # mark lines having tabs\n", "            if line.endswith(\"\\r\"):\n\t                line = \"CR;\" + line  # mark lines having CR (\\r)\n\t            rr.append(line)\n\t        body = self.cleanSection(body)\n\t        self.rDict[\"Body\"] = self.splitBodyInSections(body)\n\t        return \"\\n\".join(rr), self.rDict\n\t    def printMe(self):\n\t        zz = [\"Preamble\", \"Percent\", \"Postamble\"]\n\t        for k in zz:\n\t            n = 0\n", "            for lines in self.rDict[k]:\n\t                tab = \" [TAB] \" if \"\\t\" in lines else \"\"  # tabs are present in this section\n\t                cr = \" [CR] \" if \"\\r\" in lines else \"\"  # \\r is present in this section\n\t                print(k, cr, tab, lines)\n\t        k = \"Body\"\n\t        if len(self.rDict[k]):\n\t            n = 0\n\t            for lines in self.rDict[k]:\n\t                ws = \" [WHITESPACE AT END] \" if re.search(r\"[ \\t]+\\r?\\n\", lines) else \"\"\n\t                tab = \" [TAB] \" if \"\\t\" in lines else \"\"  # tabs are present in this section\n", "                cr = \" [CR] \" if \"\\r\" in lines else \"\"  # \\r is present in this section\n\t                print(f\"# --- {k} Section: {n} {cr}{tab}{ws}\")\n\t                n += 1\n\t                print(lines)\n\tdef prepItem(d):\n\t    print(\"\")\n\t    print(f\"test domain: <<<<<<<<<< {d} >>>>>>>>>>>>>>>>>>>>\")\n\tdef xType(x):\n\t    s = f\"{type(x)}\"\n\t    return s.split(\"'\")[1]\n", "def doDnsDomainExists(domain):\n\t    cmd = [\"host\", \"-t\", \"ns\", domain]\n\t    # LANG=en is added to make the \".jp\" output consist across all environments\n\t    p = subprocess.Popen(\n\t        cmd,\n\t        stdout=subprocess.PIPE,\n\t        stderr=subprocess.STDOUT,\n\t        env={\"LANG\": \"en\"},\n\t    )\n\t    r = p.communicate()[0].decode(errors=\"ignore\")\n", "    what = r.split(\"\\n\")\n\t    rr = []\n\t    for i in what:\n\t        if \" name server \" in i:\n\t            rr.append(i.split(\" \")[-1].lower())\n\t    return rr\n\tdef testItem(d: str, printgetRawWhoisResult: bool = False):\n\t    global PrintGetRawWhoisResult\n\t    w = whois.query(\n\t        d,\n", "        ignore_returncode=IgnoreReturncode,\n\t        verbose=Verbose,\n\t        internationalized=True,\n\t        include_raw_whois_text=PrintGetRawWhoisResult,\n\t    )\n\t    return w\n\t    if w is None:\n\t        print(\"None\")\n\t        return\n\t    # the 3 date time items can be None if not present or a datetime string\n", "    # dnssec is a bool\n\t    # some strings are return as '' when empty (status)\n\t    # statuses can be a array of one empty string if no data\n\t    # not all values are always present it mainly depends on whet we see in the output of whois\n\t    # if we return not None: the elements that ars always there ars domain_name , tld, dnssec\n\t    wd = w.__dict__\n\t    for k, v in wd.items():\n\t        ss = \"%-18s %-17s \"\n\t        if isinstance(v, str):\n\t            print((ss + \"'%s'\") % (k, xType(v), v))\n", "        else:\n\t            print((ss + \"%s\") % (k, xType(v), v))\n\tdef errorItem(d, e, what=\"Generic\"):\n\t    if what not in Failures:\n\t        Failures[what] = {}\n\t    Failures[what][d] = e\n\t    message = f\"Domain: {d}; Exception: {what}; Error: {e}\"\n\t    print(message)\n\tdef testDomains(aList):\n\t    for d in aList:\n", "        # skip empty lines\n\t        if not d:\n\t            continue\n\t        if len(d.strip()) == 0:\n\t            continue\n\t        # skip comments\n\t        if d.strip().startswith(\"#\"):\n\t            continue\n\t        # skip comments behind the domain\n\t        d = d.split(\"#\")[0]\n", "        d = d.strip()\n\t        ns = sorted(doDnsDomainExists(d))\n\t        if len(ns) == 0:\n\t            continue\n\t        # prepItem(d)\n\t        try:\n\t            w = testItem(d)\n\t            if w is None:\n\t                print(\"None\")\n\t                continue\n", "            wd = w.__dict__\n\t            for k, v in wd.items():\n\t                if k == \"name_servers\":\n\t                    if len(v) != len(ns):\n\t                        ss = \"%-18s %-17s \"\n\t                        if not isinstance(v, str):\n\t                            print(d, (ss + \"%s\") % (k, xType(v), v))\n\t                            print(ns)\n\t        except whois.UnknownTld as e:\n\t            errorItem(d, e, what=\"UnknownTld\")\n", "        except whois.FailedParsingWhoisOutput as e:\n\t            errorItem(d, e, what=\"FailedParsingWhoisOutput\")\n\t        except whois.UnknownDateFormat as e:\n\t            errorItem(d, e, what=\"UnknownDateFormat\")\n\t        except whois.WhoisCommandFailed as e:\n\t            errorItem(d, e, what=\"WhoisCommandFailed\")\n\t        except whois.WhoisQuotaExceeded as e:\n\t            errorItem(d, e, what=\"WhoisQuotaExceeded\")\n\t        except whois.WhoisPrivateRegistry as e:\n\t            errorItem(d, e, what=\"WhoisPrivateRegistry\")\n", "def getTestFileOne(fPath, fileData):\n\t    if not os.path.isfile(fPath):  # only files\n\t        return\n\t    if not fPath.endswith(\".txt\"):  # ending in .txt\n\t        return\n\t    bName = fPath[:-4]\n\t    fileData[bName] = []\n\t    xx = fileData[bName]\n\t    with open(fPath) as f:\n\t        for index, line in enumerate(f):\n", "            line = line.strip()\n\t            if len(line) == 0 or line.startswith(\"#\"):\n\t                continue\n\t            aa = re.split(r\"\\s+\", line)\n\t            if aa[0] not in xx:\n\t                xx.append(aa[0])\n\t    return\n\tdef getTestFilesAll(tDir, fileData):\n\t    for item in os.listdir(tDir):\n\t        fPath = f\"{tDir}/{item}\"\n", "        getTestFileOne(fPath, fileData)\n\tdef getAllCurrentTld():\n\t    return whois.validTlds()\n\tdef makeMetaAllCurrentTld(allHaving=None, allRegex=None):\n\t    rr = []\n\t    for tld in getAllCurrentTld():\n\t        rr.append(f\"meta.{tld}\")\n\t        rr.append(f\"google.{tld}\")\n\t    return rr\n\tdef usage():\n", "    print(\n\t        \"\"\"\n\ttest.py\n\t    [ -v | --verbose ]\n\t        # set verbose to True, this will be forwarded to whois.query\n\t    [ -I | --IgnoreReturncode ]\n\t        # sets the IgnoreReturncode to True, this will be forwarded to whois.query\n\t    [ -a | --all]\n\t        # test all existing tld currently supported,\n\t\"\"\"\n", "    )\n\tdef showFailures():\n\t    if len(Failures):\n\t        print(\"\\n# ========================\")\n\t        for i in sorted(Failures.keys()):\n\t            for j in sorted(Failures[i].keys()):\n\t                print(i, j, Failures[i][j])\n\tdef main(argv):\n\t    global Verbose\n\t    global IgnoreReturncode\n", "    global PrintGetRawWhoisResult\n\t    global Ruleset\n\t    try:\n\t        opts, args = getopt.getopt(\n\t            argv,\n\t            \"pvI\",\n\t            [\n\t                \"print\",\n\t                \"verbose\",\n\t                \"IgnoreReturncode\",\n", "            ],\n\t        )\n\t    except getopt.GetoptError:\n\t        usage()\n\t        sys.exit(2)\n\t    for opt, arg in opts:\n\t        if opt == \"-h\":\n\t            usage()\n\t            sys.exit(0)\n\t        if opt in (\"-v\", \"--verbose\"):\n", "            Verbose = True\n\t        if opt in (\"-p\", \"--print\"):\n\t            PrintGetRawWhoisResult = True\n\t    print(\"## ===== TEST CURRENT TLD's\")\n\t    allMetaTld = makeMetaAllCurrentTld()\n\t    testDomains(allMetaTld)\n\t    showFailures()\n\t    return\n\tif __name__ == \"__main__\":\n\t    main(sys.argv[1:])\n"]}
{"filename": "Old/testExtend.py", "chunked_list": ["#!/usr/bin/python3\n\timport whoisdomain as whois\n\tVerbose = True\n\t\"\"\"\n\tinitial testing had errors for these\n\twe DONT have xn--3ds443g 在线 (online)\n\twe DONT have xn--45q11c 八卦 (gossip)\n\twe DONT have xn--czru2d 商城 (mall)\n\twe DONT have xn--fiq228c5hs 中文网 (website)\n\twe DONT have xn--hxt814e 网店 (webshop)\n", "\"\"\"\n\tdef t1(domain: str, text: str):\n\t    print(f\"{text}: {domain}\")\n\t    try:\n\t        d = whois.query(domain)\n\t        if d:\n\t            print(d.__dict__)\n\t        else:\n\t            print(d)\n\t    except Exception as e:\n", "        print(domain, e)\n\tdef xMain():\n\t    aDictToTestOverride = {\n\t        \"si\": {  # changing a existing one\n\t            \"domain_name\": r\"domain:\\s+(.+)\",\n\t            \"status\": r\"status:\\s+(.+)\",\n\t            \"registrar\": r\"registrar:\\s+(.+)\",\n\t            \"name_servers\": r\"nameserver:\\s*(.+)\",\n\t            \"creation_date\": r\"created:\\s+(.+)\",\n\t            \"expiration_date\": None,\n", "            \"updated_date\": None,\n\t            \"registrant_country\": None,\n\t        },\n\t        \"mk\": {  # defining a non existant one, meanwhile this is now supported so the test is meaningless\n\t            \"extend\": \"com\",\n\t            \"domain_name\": r\"domain:\\s+(.+)\",\n\t            \"status\": r\"status:\\s+(.+)\",\n\t            \"registrar\": r\"registrar:\\s+(.+)\",\n\t            \"name_servers\": r\"nserver:\\s*(.+)\",\n\t            \"creation_date\": r\"registered:\\s+(.+)\",\n", "            \"expiration_date\": r\"expire:\\s+(.+)\",\n\t            \"updated_date\": r\"changed:\\s+(.+)\",\n\t            \"registrant_country\": None,\n\t            \"registrant\": r\"registrant:\\s+(.+)\",\n\t        },\n\t    }\n\t    domains = [\n\t        \"google.si\",\n\t        \"google.mk\",\n\t    ]\n", "    for domain in domains:\n\t        t1(domain, \"BEFORE\")\n\t    whois.mergeExternalDictWithRegex(aDictToTestOverride)\n\t    for domain in domains:\n\t        t1(domain, \"AFTER\")\n\txMain()\n\t\"\"\"\n\t% Domain Information over Whois protocol\n\t%\n\t% Whoisd Server Version: 3.9.0\n", "% Timestamp: Fri Nov 25 16:49:33 2022\n\tdomain:       google.mk\n\tregistrant:   UNET-R11\n\tadmin-c:      UNET-C12\n\tnsset:        UNET-NS191\n\tregistrar:    UNET-REG\n\tregistered:   13.05.2008 14:00:00\n\tchanged:      17.04.2014 12:50:32\n\texpire:       13.05.2023\n\tcontact:      UNET-R11\n", "org:          Google LLC\n\tname:         Google LLC\n\taddress:      Amphiteatre Parkway 1600\n\taddress:      Mountain View\n\taddress:      94043\n\taddress:      US\n\tphone:        +1.6502530000\n\tfax-no:       +1.6502530000\n\te-mail:       ccops@markmonitor.com\n\tregistrar:    UNET-REG\n", "created:      25.03.2014 11:48:02\n\tchanged:      29.09.2021 16:26:23\n\tcontact:      UNET-C12\n\tname:         Mark Monitor Inc.\n\taddress:      3540 East Longwing Lane Suite 300\n\taddress:      Meridian\n\taddress:      83646\n\taddress:      US\n\tphone:        +1.2083895740\n\te-mail:       ccops@markmonitor.com\n", "registrar:    UNET-REG\n\tcreated:      25.03.2014 11:48:00\n\tchanged:      19.11.2019 16:47:01\n\tnsset:        UNET-NS191\n\tnserver:      ns2.google.com\n\tnserver:      ns1.google.com\n\ttech-c:       UNET-C12\n\tregistrar:    UNET-REG\n\tcreated:      17.04.2014 12:50:22\n\tchanged:      17.04.2014 21:02:14\n", "\"\"\"\n"]}
{"filename": "Old/test.py", "chunked_list": ["#!/usr/bin/python3\n\timport whois\n\tVerbose = True\n\tNEW_TESTS = \"\"\"\n\t    # https://www.rfc-editor.org/rfc/rfc6761.html\n\t    # The domains \"example.\", \"example.com.\", \"example.net.\", \"example.org.\",\n\t    # and any names falling within those domains,\n\t    # are special in the following ways:\n\t    # TODO future:\n\t    # example.com #  All example names are registered in perpetuity to IANA:\n", "    # OK NOW:\n\t    # abroco.me\n\t    # wp.pl\n\t    # google.ai\n\t    # New TLD\n\t    whois.aero\n\t    nic.cd\n\t    register.bg\n\t    bit.ly\n\t    nic.re\n", "    nic.pet\n\t    twnic.net.tw\n\t    nic.td\n\t    nic.moe\n\t    nic.mg\n\t    nic.love\n\t    google.cf\n\t    google.bo\n\t    thnic.co.th\n\t    nic.br\n", "    nusurionuy5ff.at\n\t    phila.ac.ug # has a None date\n\t    nic.ma # error in ma: missing extend\n\t    merlin.ua # Unknown date format: '2006-03-30 13:26:31+03:00'\n\t    www.google.co.jp\n\t    # test next item if first one has no whois data\n\t    dns1.carnet.hr # get actual info from carnet.hr\n\t    # now a secondlevel tld\n\t    ns1.cfi.co.ug # should go to: cfi.co.ug but not to: co.ug\n\t    # test IDNs\n", "    meta.中文网\n\t    meta.在线\n\t    # NEW TLDs\n\t    meta.accountant\n\t    meta.audio\n\t    meta.blackfriday\n\t    meta.christmas\n\t    meta.cricket\n\t    meta.date\n\t    meta.diet\n", "    meta.faith\n\t    meta.flowers\n\t    meta.gift\n\t    meta.guitars\n\t    meta.help\n\t    meta.hiphop\n\t    meta.hosting\n\t    meta.juegos\n\t    meta.loan\n\t    meta.party\n", "    meta.photo\n\t    meta.property\n\t    meta.racing\n\t    meta.ren\n\t    meta.review\n\t    meta.science\n\t    meta.sexy\n\t    meta.tattoo\n\t    meta.wang\n\t    meta.webcam\n", "    meta.gg\n\t    meta.as\n\t    meta.je\n\t    meta.sn\n\t    meta.fashion\n\t    meta.cv\n\t    meta.si\n\t    meta.py\n\t    meta.com.py\n\t    meta.no-ip.com\n", "    meta.no-ip.org\n\t    nic.radio\n\t\"\"\"\n\tPrivateRegistry = \"\"\"\n\t    google.al\n\t    google.ch\n\t    google.cw\n\t    google.ga\n\t    google.gr\n\t    google.hu\n", "    google.li\n\t    google.mp\n\t    google.sr\n\t    google.tk\n\t    google.to\n\t    google.vn\n\t    nic.ba # PrivateReg\n\t    net.pk # PrivateReg\n\t    mynic.my # PrivateReg\n\t    nic.es # PrivateReg\n", "    nic.ec # PrivateReg\n\t    nic.zw # PrivateReg\n\t    gooogle.onion # PrivateReg\n\t    google.ke # PrivateReg\n\t    whois.az # PrivateReg\n\t\"\"\"\n\tInvalidTld = \"\"\"\n\t\"\"\"\n\tFailedParsing = \"\"\"\n\t    afilias.com.au\n", "    amazon.courses\n\t    bretagne.bzh\n\t    davidetson.ovh\n\t    ghc.fit\n\t    google.com.au\n\t    google.dev\n\t    sylblog.xin\n\t    vols.cat\n\t    www.fsdfsdfsdfsd.google.com\n\t    www.google.com\n", "\"\"\"\n\tUnknownDateFormat = \"\"\"\n\t\"\"\"\n\t# these are all supposed to result in data or None but no errors\n\tDOMAINS = \"\"\"\n\t    abroco.me\n\t    agodasylumsy.top\n\t    agtaster.kiwi\n\t    amazon.study\n\t    america.com\n", "    anthropology.website\n\t    autobuyer.site\n\t    belgium.com\n\t    bellerose.asia\n\t    bloom.space\n\t    buzzi.space\n\t    ci.security\n\t    clubclio.shop\n\t    colooder.app\n\t    congres.nc\n", "    curly.red\n\t    custler.com # may have issues with gethostaddr\n\t    darkops.site\n\t    ddarko.org\n\t    digg.com\n\t    discjockey.website\n\t    doramy.club\n\t    dot.ml\n\t    edc.click\n\t    elcomercio.pe\n", "    emeralds.site\n\t    example.com\n\t    fraukesart.de # status: free\n\t    google.am\n\t    google.aw\n\t    google.be\n\t    google.biz\n\t    google.bj\n\t    google.ca\n\t    google.cat\n", "    google.cc\n\t    google.cl\n\t    google.co\n\t    google.co.il\n\t    google.com.ar\n\t    google.com.br\n\t    google.com.co\n\t    google.com.tr\n\t    google.co.uk\n\t    google.cr\n", "    google.cz\n\t    google.de\n\t    google.eu\n\t    google.fi\n\t    google.fm\n\t    google.fr\n\t    google.game\n\t    google.global\n\t    google.hk\n\t    google.im\n", "    google.in\n\t    google.info\n\t    google.ink\n\t    google.io\n\t    google.is\n\t    google.it\n\t    google.jp\n\t    google.link\n\t    google.lt\n\t    google.me\n", "    google.mu\n\t    google.name\n\t    google.net\n\t    google.nl\n\t    google.nu\n\t    google.nyc\n\t    google.online\n\t    google.pl\n\t    google.press\n\t    google.pt\n", "    google.pub\n\t    google.pw\n\t    google.rw\n\t    google.sale\n\t    google.se\n\t    google.security\n\t    google.site\n\t    google.sk\n\t    google.space\n\t    google.store\n", "    google.tech\n\t    google.tel\n\t    google.theatre\n\t    google.tickets\n\t    google.trade\n\t    google.tv\n\t    google.us\n\t    google.website\n\t    google.wiki\n\t    google.xyz\n", "    gopro.com\n\t    guinness.ie\n\t    hisd.cloud\n\t    icee.sa\n\t    imdb.com\n\t    in.security\n\t    invr.space\n\t    jisc.ac.uk\n\t    juniper.security\n\t    karibu.tz\n", "    kono.store\n\t    kubet77.win\n\t    livechat.website\n\t    loop.space\n\t    luminor.ee\n\t    manniswindows.site\n\t    medicaldata.icu\n\t    microsoft.com\n\t    minigames.best\n\t    mphimmoitv.com\n", "    netsec.ninja\n\t    nic.art\n\t    nic.auto\n\t    nic.autos\n\t    nic.baby\n\t    nic.bar\n\t    nic.beauty\n\t    nic.best\n\t    nic.bj\n\t    nic.blog\n", "    nic.boats\n\t    nic.bond\n\t    nic.build\n\t    nic.cam\n\t    nic.car\n\t    nic.cars\n\t    nic.ceo\n\t    nic.cfd\n\t    nic.college\n\t    nic.coop\n", "    nic.cyou\n\t    nic.dealer\n\t    nic.desi\n\t    nic.fans\n\t    nic.feedback\n\t    nic.forum\n\t    nic.frl\n\t    nic.fun\n\t    nic.gent\n\t    nic.hair\n", "    nic.homes\n\t    nic.host\n\t    nic.icu\n\t    nic.inc\n\t    nic.kred\n\t    nic.london\n\t    nic.luxury\n\t    nic.makeup\n\t    nic.me\n\t    nic.monster\n", "    nic.motorcycles\n\t    nic.online\n\t    nic.ooo\n\t    nic.press\n\t    nic.protection\n\t    nic.qpon\n\t    nic.quest\n\t    nic.reit\n\t    nic.rent\n\t    nic.rest\n", "    nic.saarland\n\t    nic.sbs\n\t    nic.security\n\t    nic.site\n\t    nic.skin\n\t    nic.space\n\t    nic.storage\n\t    nic.store\n\t    nic.tech\n\t    nic.theatre\n", "    nic.tickets\n\t    nic.ua\n\t    nic.uno\n\t    nic.website\n\t    nic.xyz\n\t    nic.yachts\n\t    nic.zuerich\n\t    office.com\n\t    pep.security\n\t    phimchill.tv\n", "    python.org\n\t    rans88.vip\n\t    register.bank\n\t    terra.com.pe\n\t    test.education\n\t    test.ez.lv\n\t    theobservatory.space\n\t    timphillipsgarage.bond\n\t    token.security\n\t    tut.by\n", "    viacom.tech\n\t    vidange.tn\n\t    wonder.store\n\t    www.asp.net\n\t    www.ddarko.pl\n\t    www.google.co.jp\n\t    www.google.org\n\t    yandex.ru\n\t    yandex.ua\n\t    youtu.be\n", "    youtube.com\n\t    zieit.edu.ua # has issues with date/time strings\n\t\"\"\"\n\tfailure = {}\n\tnones = []\n\tdef prepItem(d):\n\t    print(\"-\" * 80)\n\t    print(d)\n\tdef testItem(d):\n\t    w = whois.query(d, ignore_returncode=True, verbose=Verbose, internationalized=True)\n", "    if w:\n\t        wd = w.__dict__\n\t        for k, v in wd.items():\n\t            print('%20s\\t\"%s\"' % (k, v))\n\t    else:\n\t        nones.append(d)\n\t        print(\"None\")\n\tdef errorItem(d, e, what=\"Generic\"):\n\t    print(f\"Caught {what} Exception\")\n\t    failure[d] = {\"exception\": what, \"result\": e}\n", "    message = f\"\"\"\n\t    Error : {e},\n\t    On Domain: {d}\n\t    \"\"\"\n\t    print(message)\n\tdef testDomains(aList):\n\t    for d in aList:\n\t        # skip empty lines\n\t        if not d:\n\t            continue\n", "        if len(d.strip()) == 0:\n\t            continue\n\t        # skip comments\n\t        if d.strip().startswith(\"#\"):\n\t            continue\n\t        # skip comments behind the domain\n\t        d = d.split(\"#\")[0]\n\t        d = d.strip()\n\t        prepItem(d)\n\t        try:\n", "            testItem(d)\n\t        except whois.UnknownTld as e:\n\t            errorItem(d, e, what=\"UnknownTld\")\n\t        except whois.FailedParsingWhoisOutput as e:\n\t            errorItem(d, e, what=\"FailedParsingWhoisOutput\")\n\t        except whois.UnknownDateFormat as e:\n\t            errorItem(d, e, what=\"UnknownDateFormat\")\n\t        except whois.WhoisCommandFailed as e:\n\t            errorItem(d, e, what=\"WhoisCommandFailed\")\n\t        except whois.WhoisQuotaExceeded as e:\n", "            errorItem(d, e, what=\"WhoisQuotaExceeded\")\n\t        except whois.WhoisPrivateRegistry as e:\n\t            errorItem(d, e, what=\"WhoisPrivateRegistry\")\n\t        except Exception as e:\n\t            errorItem(d, e, what=\"Generic\")\n\tdef main():\n\t    # ----------------------------\n\t    testAllTlds = True\n\t    testOnlyProblems = True\n\t    testOnlyNew = True\n", "    # ----------------------------\n\t    if testAllTlds is True:\n\t        print(\"Tld's currently supported\")\n\t        zz = whois.validTlds()\n\t        for tld in zz:\n\t            print(tld)\n\t    print(\"\\n========================================\\n\")\n\t    print(\"Testing\")\n\t    testDomains(NEW_TESTS.split(\"\\n\"))\n\t    if testOnlyNew is False:\n", "        if testOnlyProblems is False:\n\t            print(\"\\n========================================\\n\")\n\t            testDomains(DOMAINS.split(\"\\n\"))\n\t        print(\"\\n========================================\\n\")\n\t        testDomains(PrivateRegistry.split(\"\\n\"))\n\t        print(\"\\n========================================\\n\")\n\t        testDomains(InvalidTld.split(\"\\n\"))\n\t        print(\"\\n========================================\\n\")\n\t        testDomains(FailedParsing.split(\"\\n\"))\n\t        print(\"\\n========================================\\n\")\n", "        testDomains(UnknownDateFormat.split(\"\\n\"))\n\t    print(\"\\n# ========================\")\n\t    print(f\"Failure during test : {len(failure)}\")\n\t    for i in sorted(failure.keys()):\n\t        print(i, failure[i])\n\t    print(\"\\n# ========================\")\n\t    print(f\"Domains with 'None' result : {len(nones)}\")\n\t    for d in sorted(nones):\n\t        print(d)\n\tmain()\n"]}
{"filename": "analizer/investigateTld.py", "chunked_list": ["#! /usr/bin/env python3\n\t# should run after a valid database is created with analizeIanaTld.py\n\tfrom typing import (\n\t    Dict,\n\t    Any,\n\t)\n\timport re\n\timport idna as idna2\n\tfrom ianaDatabase import IanaDatabase\n\timport sys\n", "sys.path.append(\"..\")\n\tfrom whoisdomain import tld_regexpr\n\tdef extractServers(aDict: Dict[str, Any]) -> Dict[str, Any]:\n\t    servers: Dict[str, Any] = {}\n\t    k = \"_server\"\n\t    for key in aDict.keys():\n\t        if k in aDict[key]:\n\t            server = aDict[key][k]\n\t            if server not in servers:\n\t                servers[server] = []\n", "            servers[server].append(key)\n\t    return servers\n\tdef xMain() -> None:\n\t    verbose = False\n\t    dbFileName = \"IanaDb.sqlite\"\n\t    iad = IanaDatabase(verbose=verbose)\n\t    iad.connectDb(dbFileName)\n\t    ss = extractServers(tld_regexpr.ZZ)\n\t    # investigate all known iana tld and see if we have them\n\t    sql = \"\"\"\n", "SELECT\n\t    Link,\n\t    Domain,\n\t    Type,\n\t    TLD_Manager,\n\t    Whois,\n\t    `DnsResolve-A`,\n\t    RegistrationUrl\n\tFROM\n\t    IANA_TLD\n", "\"\"\"\n\t    rr, cur = iad.selectSql(sql)\n\t    for row in cur:\n\t        tld = row[0].replace(\"'\", \"\")\n\t        tld2 = \"\".join(map(lambda s: s and re.sub(\"[^\\w\\s]\", \"\", s), row[1]))\n\t        tld3 = row[1].replace(\".\", \"\").replace(\"'\", \"\").replace(\"\\u200f\", \"\").replace(\"\\u200e\", \"\")\n\t        tld4 = tld3\n\t        manager = row[3]\n\t        w = row[4].replace(\"'\", \"\")\n\t        resolve = row[5]\n", "        reg = row[6]\n\t        # look for a whois server in iana with a different or no server in the list\n\t        if not w:\n\t            continue\n\t        if tld not in tld_regexpr.ZZ:\n\t            continue\n\t        k = \"_server\"\n\t        s1 = \"\"\n\t        TLD = tld_regexpr.ZZ[tld]\n\t        if k in TLD:\n", "            s1 = TLD[k]\n\t        if \"whois.centralnicregistry.com.\" in resolve:\n\t            continue\n\t            kk = \"_centralnic\"\n\t            if s1 == w and \"extend\" in TLD and TLD[\"extend\"] in [kk, \"com\"]:\n\t                continue\n\t            s = f\"ZZ['{tld}']\" + ' = {\"extend\": ' + f\"{kk}, \" + '\"_server\":' + f'\"{w}\"' + \"} # < suggest ### \"\n\t            if \"extend\" in TLD:\n\t                print(s, \"# current > \", s1, w, TLD[\"extend\"], TLD)\n\t            else:\n", "                print(s, \"# current > \", s1, w, \"_no_extend_\", TLD)\n\t            continue\n\t        if \"whois.donuts.co\" in resolve:\n\t            continue\n\t            kk = \"_donuts\"\n\t            if s1 == w and \"extend\" in TLD and TLD[\"extend\"] in [kk, \"com\"]:\n\t                continue\n\t            s = f\"ZZ['{tld}']\" + ' = {\"extend\": ' + f\"{kk}, \" + '\"_server\":' + f'\"{w}\"' + \"} # suggest ### \"\n\t            if \"extend\" in TLD:\n\t                print(s, \"# current \", s1, w, TLD[\"extend\"], TLD)\n", "            else:\n\t                print(s, \"# current \", s1, w, \"_no_extend_\", TLD)\n\t            continue\n\t        continue\n\t        if w != s1:\n\t            print(tld, s1, w, resolve)\n\t        continue\n\t        try:\n\t            tld3 = idna2.encode(tld3).decode() or tld3\n\t        except Exception as e:\n", "            print(f\"## {tld} {tld2} {tld3}\")\n\t            continue\n\t        tld4 = tld4.encode(\"idna\").decode()\n\t        if tld != tld2:\n\t            if tld2 not in ss:\n\t                print(tld, tld2, tld3, tld4, tld.encode(\"idna\"))\n\t        continue\n\t        if tld != tld3:\n\t            print(f\"#SKIP {tld} {tld2} { tld3}\")\n\t            continue\n", "        if tld2 == tld and tld in tld_regexpr.ZZ:\n\t            continue\n\t        if tld2 in tld_regexpr.ZZ and tld in tld_regexpr.ZZ:\n\t            continue\n\t        if manager == \"NULL\":\n\t            if tld not in tld_regexpr.ZZ:\n\t                print(f'ZZ[\"{tld}\"] = ' + '{\"_privateRegistry\": True}')\n\t            if tld2 != tld:\n\t                if tld2 not in tld_regexpr.ZZ:\n\t                    print(f'ZZ[\"{tld2}\"] = ' + '{\"_privateRegistry\": True}')\n", "            continue\n\t        mm = {\n\t            \"com\": [\n\t                \"whois.afilias-srs.net\",\n\t                \"whois2.afilias-grs.net\",\n\t                \"whois.nic.google\",\n\t                \"whois.nic.gmo\",\n\t                \"whois.gtld.knet.cn\",\n\t                \"whois.registry.in\",\n\t                \"whois.ngtld.cn\",\n", "            ],\n\t            \"sg\": [\n\t                \"whois.sgnic.sg\",\n\t            ],\n\t            \"_teleinfo\": [\n\t                \"whois.teleinfo.cn\",\n\t            ],\n\t            \"tw\": [\n\t                \"whois.twnic.net.tw\",\n\t            ],\n", "            \"_centralnic\": [\n\t                \"whois.centralnic.com\",\n\t            ],\n\t        }\n\t        found = False\n\t        for key, value in mm.items():\n\t            for n in value:\n\t                if n in resolve:\n\t                    if tld not in tld_regexpr.ZZ:\n\t                        print(f'ZZ[\"{tld}\"] = ' + '{\"_server\": \"' + n + '\", \"extend\": \"' + key + '\"}')\n", "                    if tld2 != tld:\n\t                        if tld2 not in tld_regexpr.ZZ:\n\t                            print(f'ZZ[\"{tld2}\"] = ' + '{\"_server\": \"' + n + '\", \"extend\": \"' + key + '\"}')\n\t                    found = True\n\t                if found:\n\t                    break\n\t            if found:\n\t                break\n\t        if found:\n\t            continue\n", "        if reg == \"NULL\" and w == \"NULL\":\n\t            continue  # unclear, we have existing ns records indicating some tld's actually exist but have no whois, lets skip for now\n\t            # TODO add ns records\n\t            if tld not in tld_regexpr.ZZ:\n\t                print(f'ZZ[\"{tld}\"] = ' + '{\"_privateRegistry\": True}')\n\t        if w == \"NULL\":\n\t            continue\n\t        w = w.replace(\"'\", \"\")\n\t        if w in ss:\n\t            if tld not in tld_regexpr.ZZ:\n", "                print(f'ZZ[\"{tld}\"] = ' + '{\"_server\": \"' + w + '\", \"extend\": \"' + ss[w][0] + '\"}', \"# \", w, ss[w])\n\t            if tld2 != tld:\n\t                if tld2 not in tld_regexpr.ZZ:\n\t                    print(f'ZZ[\"{tld2}\"] = ' + '{\"_server\": \"' + w + '\", \"extend\": \"' + ss[w][0] + '\"}', \"# \", w, ss[w])\n\t            continue\n\t        print(\"# MISSING\", tld, tld2, tld3, manager.replace(\"\\n\", \";\"), w, resolve, reg)\n\txMain()\n"]}
{"filename": "analizer/ianaCrawler.py", "chunked_list": ["#\n\tfrom typing import (\n\t    Optional,\n\t    List,\n\t    Dict,\n\t    Any,\n\t    # Tuple,\n\t)\n\timport sys\n\tfrom bs4 import BeautifulSoup\n", "import time\n\timport requests_cache\n\tclass IanaCrawler:\n\t    URL: str = \"https://www.iana.org/domains/root/db\"\n\t    CacheTime: int = 3600 * 24  # default 24 hours\n\t    Session: Any = None\n\t    cacheName: str = \".iana_cache\"\n\t    verbose: bool = False\n\t    cacheBackend: str = \"filesystem\"\n\t    records: List[Any] = []\n", "    columns: List[Any] = []\n\t    resolver: Any = None\n\t    def __init__(\n\t        self,\n\t        verbose: bool = False,\n\t        resolver: Any = None,\n\t    ):\n\t        self.verbose = verbose\n\t        self.resolver = resolver\n\t        self.Session = requests_cache.CachedSession(\n", "            self.cacheName,\n\t            backend=self.cacheBackend,\n\t        )\n\t    def getUrl(self) -> str:\n\t        return self.URL\n\t    def getBasicBs(\n\t        self,\n\t        url: str,\n\t    ) -> BeautifulSoup:\n\t        try:\n", "            response = self.Session.get(url)\n\t        except Exception as e:\n\t            # in case of no data, sleep and try again\n\t            print(e, file=sys.stderr)\n\t            time.sleep(15)\n\t            response = self.Session.get(url)\n\t        soup = BeautifulSoup(response.text, \"html.parser\")\n\t        return soup\n\t    def getAdditionalItem(\n\t        self,\n", "        what: str,\n\t        data: List[str],\n\t    ) -> Optional[str]:\n\t        for i in [0, 1]:\n\t            try:\n\t                z: str = f\"{what}:\"\n\t                if z in data[i]:\n\t                    return data[i].replace(z, \"\").strip()\n\t            except Exception as _:\n\t                _ = _\n", "                return None\n\t        return None\n\t    def getTldInfo(self) -> None:\n\t        soup = self.getBasicBs(self.getUrl())\n\t        table: Any = soup.find(\"table\")  # the first table has the tld data\n\t        self.records: List[Any] = []\n\t        self.columns: List[Any] = []\n\t        n = 0\n\t        for tr in table.findAll(\"tr\"):\n\t            n += 1\n", "            # extract header info if present\n\t            ths = tr.findAll(\"th\")\n\t            if ths != []:\n\t                for each in ths:\n\t                    self.columns.append(each.text)\n\t                continue\n\t            # extrct data\n\t            trs = tr.findAll(\"td\")\n\t            record = []\n\t            for each in trs:\n", "                try:\n\t                    link = each.find(\"a\")[\"href\"]\n\t                    aa = link.split(\"/\")\n\t                    record.append(aa[-1].replace(\".html\", \"\"))\n\t                    record.append(each.text.strip())\n\t                except Exception as _:\n\t                    _ = _\n\t                    record.append(each.text)\n\t            self.records.append(record)\n\t        self.columns.insert(0, \"Link\")\n", "    def getTldPWithString(\n\t        self,\n\t        url: str,\n\t        text: str,\n\t    ) -> Optional[str]:\n\t        soup = self.getBasicBs(url)\n\t        gfg: List[Any] = soup.find_all(lambda tag: tag.name == \"p\" and text in tag.text)\n\t        if len(gfg):\n\t            s: str = gfg[0].text.strip()\n\t            return s\n", "        return None\n\t    def resolveWhois(\n\t        self,\n\t        whois: str,\n\t    ) -> List[Any]:\n\t        ll: List[Any] = []\n\t        if self.resolver:\n\t            answer: List[Any] = []\n\t            n: int = 3\n\t            while n:\n", "                try:\n\t                    answer = list(self.resolver.resolve(whois, \"A\").response.answer)\n\t                    break\n\t                except Exception as e:\n\t                    print(whois, e, n, file=sys.stderr)\n\t                    time.sleep(5)\n\t                    n = n - 1\n\t            for a in answer:\n\t                s = str(a)\n\t                if \"\\n\" in s:\n", "                    ss = s.split(\"\\n\")\n\t                    ll.append(ss)\n\t                else:\n\t                    ll.append(s)\n\t                if self.verbose:\n\t                    print(a)\n\t        return ll\n\t    def addInfoToOneTld(\n\t        self,\n\t        tldItem: List[Any],\n", "    ) -> List[str]:\n\t        url = tldItem[0]\n\t        if self.verbose:\n\t            print(url, file=sys.stderr)\n\t        if tldItem[3] == \"Not assigned\":\n\t            tldItem[3] = None\n\t        zz = {\n\t            \"Whois\": \"WHOIS Server\",\n\t            \"RegistrationUrl\": \"URL for registration services\",\n\t        }\n", "        for key, val in zz.items():\n\t            regDataW = self.getTldPWithString(self.getUrl() + \"/\" + url + \".html\", val)\n\t            if regDataW:\n\t                regDataW = regDataW.replace(val, key)\n\t                regDataA = regDataW.split(\"\\n\")\n\t                for s in [key]:\n\t                    tldItem.append(self.getAdditionalItem(s, regDataA))\n\t            else:\n\t                tldItem.append(None)\n\t        if tldItem[4]:\n", "            ll = self.resolveWhois(tldItem[4])\n\t            tldItem.append(ll)\n\t        else:\n\t            tldItem.append(None)\n\t        if self.verbose:\n\t            print(url, tldItem, file=sys.stderr)\n\t        return tldItem\n\t    def addInfoToAllTld(self) -> None:\n\t        records2 = []\n\t        for tldItem in self.records:\n", "            rr = self.addInfoToOneTld(tldItem)\n\t            if self.verbose:\n\t                print(len(rr), rr)\n\t            records2.append(rr)\n\t        self.columns.insert(4, \"Whois\")\n\t        self.columns.insert(5, \"RegistrationUrl\")\n\t        self.columns.insert(6, \"DnsResolve-A\")\n\t        self.records = records2\n\t        self.columns[3] = self.columns[3].replace(\" \", \"_\")\n\t    def getResults(self) -> Dict[str, Any]:\n", "        ll = list(self.columns)\n\t        ll[3] = ll[3].replace(\" \", \"_\")\n\t        return {\n\t            \"header\": ll,\n\t            \"data\": self.records,\n\t        }\n"]}
{"filename": "analizer/analizeIanaTld.py", "chunked_list": ["#! /usr/bin/env python3\n\t\"\"\"\n\tAnalyze all tld's currently in the iana root db\n\t\"\"\"\n\tfrom typing import (\n\t    Any,\n\t)\n\timport io\n\timport re\n\tfrom dns.resolver import (\n", "    Resolver,\n\t    LRUCache,\n\t)\n\timport json\n\tfrom ianaCrawler import IanaCrawler\n\tfrom pslGrabber import PslGrabber\n\tfrom ianaDatabase import IanaDatabase\n\tdef xMain() -> None:\n\t    verbose: bool = True\n\t    dbFileName: str = \"IanaDb.sqlite\"\n", "    iad: Any = IanaDatabase(verbose=verbose)\n\t    iad.connectDb(dbFileName)\n\t    iad.createTableTld()\n\t    iad.createTablePsl()\n\t    resolver: Resolver = Resolver()\n\t    resolver.cache = LRUCache()  # type: ignore\n\t    iac = IanaCrawler(verbose=verbose, resolver=resolver)\n\t    iac.getTldInfo()\n\t    iac.addInfoToAllTld()\n\t    xx = iac.getResults()\n", "    for item in xx[\"data\"]:\n\t        sql, data = iad.makeInsOrUpdSqlTld(xx[\"header\"], item)\n\t        iad.doSql(sql, data)\n\t    if verbose:\n\t        print(json.dumps(iac.getResults(), indent=2, ensure_ascii=False))\n\t    pg = PslGrabber()\n\t    response = pg.getData(pg.getUrl())\n\t    text = response.text\n\t    buf = io.StringIO(text)\n\t    section = \"\"\n", "    while True:\n\t        line = buf.readline()\n\t        if not line:\n\t            break\n\t        z = line.strip()\n\t        if len(z):\n\t            if \"// ===END \" in z:\n\t                section = \"\"\n\t            if \"// ===BEGIN ICANN\" in z:\n\t                section = \"ICANN\"\n", "            if \"// ===BEGIN PRIVATE\" in z:\n\t                section = \"PRIVATE\"\n\t            if section == \"PRIVATE\":\n\t                continue\n\t            if re.match(r\"^\\s*//\", z):\n\t                # print(\"SKIP\", z)\n\t                continue\n\t            n = 0\n\t            z = z.split()[0]\n\t            if \".\" in z:\n", "                tld = z.split(\".\")[-1]\n\t                n = len(z.split(\".\"))\n\t            else:\n\t                tld = z\n\t            sql, data = iad.makeInsOrUpdSqlPsl(pg.ColumnsPsl(), [tld, z, n, section, None])\n\t            if verbose:\n\t                print(data)\n\t            iad.doSql(sql, data)\n\txMain()\n"]}
{"filename": "analizer/pslGrabber.py", "chunked_list": ["#\n\tfrom typing import (\n\t    # Optional,\n\t    List,\n\t    # Dict,\n\t    Any,\n\t    # Tuple,\n\t)\n\timport requests_cache\n\tclass PslGrabber:\n", "    # notes: https://github.com/publicsuffix/list/wiki/Format\n\t    URL: str = \"https://publicsuffix.org/list/public_suffix_list.dat\"\n\t    CacheTime = 3600 * 24  # default 24 hours\n\t    Session: Any = None\n\t    cacheName = \".psl_cache\"\n\t    verbose: bool = False\n\t    cacheBackend: str = \"filesystem\"\n\t    def __init__(self, verbose: bool = False):\n\t        self.verbose = verbose\n\t        self.Session = requests_cache.CachedSession(\n", "            self.cacheName,\n\t            backend=self.cacheBackend,\n\t        )\n\t    def getUrl(self) -> str:\n\t        return self.URL\n\t    def getData(\n\t        self,\n\t        url: str,\n\t    ) -> Any:\n\t        response = self.Session.get(url)\n", "        return response\n\t    def ColumnsPsl(self) -> List[str]:\n\t        return [\n\t            \"Tld\",\n\t            \"Psl\",\n\t            \"Level\",\n\t            \"Type\",\n\t            \"Comment\",\n\t        ]\n"]}
{"filename": "analizer/ianaDatabase.py", "chunked_list": ["#! /usr/bin/env python3\n\tfrom typing import (\n\t    # Optional,\n\t    List,\n\t    # Dict,\n\t    Any,\n\t    Tuple,\n\t)\n\timport sys\n\timport json\n", "import sqlite3\n\tclass IanaDatabase:\n\t    verbose: bool = False\n\t    conn: Any = None\n\t    def __init__(\n\t        self,\n\t        verbose: bool = False,\n\t    ):\n\t        self.verbose = verbose\n\t    def connectDb(\n", "        self,\n\t        fileName: str,\n\t    ) -> None:\n\t        self.conn = sqlite3.connect(fileName)\n\t        self.testValidConnection()\n\t    def testValidConnection(self) -> None:\n\t        if self.conn is None:\n\t            raise Exception(\"No valid connection to the database exist\")\n\t    def selectSql(\n\t        self,\n", "        sql: str,\n\t        data: Any = None,\n\t    ) -> Tuple[Any, Any]:\n\t        self.testValidConnection()\n\t        cur: Any = self.conn.cursor()\n\t        try:\n\t            if data:\n\t                result = cur.execute(sql, data)\n\t            else:\n\t                result = cur.execute(sql)\n", "        except Exception as e:\n\t            print(sql, data, e, file=sys.stderr)\n\t            exit(101)\n\t        return result, cur\n\t    def doSql(\n\t        self,\n\t        sql: str,\n\t        data: Any = None,\n\t        withCommit: bool = True,\n\t    ) -> Any:\n", "        self.testValidConnection()\n\t        cur: Any = self.conn.cursor()\n\t        try:\n\t            if data:\n\t                result = cur.execute(sql, data)\n\t            else:\n\t                result = cur.execute(sql)\n\t            if withCommit:\n\t                self.conn.commit()\n\t        except Exception as e:\n", "            print(sql, e, file=sys.stderr)\n\t            exit(101)\n\t        return result\n\t    def createTableTld(self) -> None:\n\t        sql = \"\"\"\n\tCREATE TABLE IF NOT EXISTS IANA_TLD (\n\t    Link            TEXT PRIMARY KEY,\n\t    Domain          TEXT NOT NULL UNIQUE,\n\t    Type            TEXT NOT NULL,\n\t    TLD_Manager     TEXT,\n", "    Whois           TEXT,\n\t    'DnsResolve-A'  TEXT,\n\t    RegistrationUrl TEXT\n\t);\n\t\"\"\"\n\t        rr = self.doSql(sql)\n\t        if self.verbose:\n\t            print(rr, file=sys.stderr)\n\t    def createTablePsl(self) -> None:\n\t        sql = \"\"\"\n", "CREATE TABLE IF NOT EXISTS IANA_PSL (\n\t    Tld             TEXT NOT NULL,\n\t    Psl             TEXT UNIQUE,\n\t    Level           INTEGER NOT NULL,\n\t    Type            TEXT NOT NULL,\n\t    Comment         TEXT,\n\t    PRIMARY KEY (Tld, Psl)\n\t);\n\t\"\"\"\n\t        rr = self.doSql(sql)\n", "        if self.verbose:\n\t            print(rr, file=sys.stderr)\n\t    def prepData(\n\t        self,\n\t        columns: List[str],\n\t        values: List[str],\n\t    ) -> Tuple[str, str, List[Any]]:\n\t        cc = \"`\" + \"`,`\".join(columns) + \"`\"\n\t        data = []\n\t        vvv = []\n", "        i = 0\n\t        while i < len(values):\n\t            v = \"NULL\"\n\t            if values[i] is not None:\n\t                v = values[i]\n\t                if not isinstance(v, str) and not isinstance(v, int):\n\t                    v = json.dumps(v, ensure_ascii=False)\n\t                if isinstance(v, str):\n\t                    v = \"'\" + v + \"'\"\n\t                if isinstance(v, int):\n", "                    v = int(v)\n\t            data.append(v)\n\t            vvv.append(\"?\")\n\t            i += 1\n\t        vv = \",\".join(vvv)\n\t        return cc, vv, data\n\t    def makeInsOrUpdSqlTld(\n\t        self,\n\t        columns: List[str],\n\t        values: List[str],\n", "    ) -> Tuple[str, List[Any]]:\n\t        cc, vv, data = self.prepData(columns, values)\n\t        return (\n\t            f\"\"\"\n\tINSERT OR REPLACE INTO IANA_TLD (\n\t    {cc}\n\t) VALUES(\n\t    {vv}\n\t);\n\t\"\"\",\n", "            data,\n\t        )\n\t    def makeInsOrUpdSqlPsl(\n\t        self,\n\t        columns: List[str],\n\t        values: List[str],\n\t    ) -> Tuple[str, List[Any]]:\n\t        cc, vv, data = self.prepData(columns, values)\n\t        return (\n\t            f\"\"\"\n", "INSERT OR REPLACE INTO IANA_PSL (\n\t    {cc}\n\t) VALUES(\n\t    {vv}\n\t);\n\t\"\"\",\n\t            data,\n\t        )\n"]}
