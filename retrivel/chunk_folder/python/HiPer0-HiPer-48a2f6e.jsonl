{"filename": "inference.py", "chunked_list": ["import argparse\n\timport os\n\timport torch\n\tfrom torch import autocast\n\tfrom diffusers import DDIMScheduler\n\tfrom diffusers_ import StableDiffusionPipeline\n\tfrom accelerate.utils import set_seed\n\tdef parse_args():\n\t    parser = argparse.ArgumentParser(description=\"Simple example of a training script.\")\n\t    parser.add_argument(\n", "        \"--output_dir\",\n\t        type=str,\n\t        default=\"text-inversion-model\",\n\t        help=\"The directory where the target embeddings are saved.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--target_txt\",\n\t        type=str,\n\t        help=\"Target prompt.\",\n\t    )\n", "    parser.add_argument(\n\t        \"--pretrained_model_name\",\n\t        type=str,\n\t        default=\"CompVis/stable-diffusion-v1-4\",\n\t    )\n\t    parser.add_argument(\n\t        \"--seed\",\n\t        type=int,\n\t        help=\"Seed\",\n\t    )\n", "    parser.add_argument(\n\t        \"--image_num\",\n\t        type=int,\n\t        help=\"Seed\",\n\t    )\n\t    parser.add_argument(\n\t        \"--inference_train_step\",\n\t        type=int,\n\t        help=\"Seed\",\n\t    )\n", "    args = parser.parse_args()\n\t    return args\n\tfrom transformers import CLIPTextModel, CLIPTokenizer\n\tdef main():\n\t    args = parse_args()\n\t    if args.seed is not None:\n\t        set_seed(args.seed)\n\t        g_cuda = torch.Generator(device='cuda')\n\t        g_cuda.manual_seed(args.seed)\n\t    # Load pretrained models    \n", "    scheduler = DDIMScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule=\"scaled_linear\", clip_sample=False, set_alpha_to_one=False) \n\t    pipe = StableDiffusionPipeline.from_pretrained(args.pretrained_model_name, scheduler=scheduler, torch_dtype=torch.float16).to(\"cuda\")\n\t    tokenizer = CLIPTokenizer.from_pretrained(args.pretrained_model_name, subfolder=\"tokenizer\", use_auth_token=True)\n\t    CLIP_text_encoder = CLIPTextModel.from_pretrained(args.pretrained_model_name, subfolder=\"text_encoder\", use_auth_token=True)\n\t    # Encode the target text.\n\t    text_ids_tgt = tokenizer(args.target_txt, padding=\"max_length\", truncation=True, max_length=tokenizer.model_max_length, return_tensors=\"pt\").input_ids\n\t    CLIP_text_encoder.to('cuda', dtype=torch.float32)\n\t    with torch.inference_mode():\n\t        target_embedding = CLIP_text_encoder(text_ids_tgt.to('cuda'))[0].to('cuda')\n\t    del CLIP_text_encoder    \n", "    # Concat target and hiper embeddings\n\t    hiper_embeddings = torch.load(os.path.join(args.output_dir, 'hiper_embeddings_step{}.pt'.format(args.inference_train_step))).to(\"cuda\")\n\t    n_hiper = hiper_embeddings.shape[1]\n\t    inference_embeddings =torch.cat([target_embedding[:, :-n_hiper], hiper_embeddings*0.8], 1)\n\t    # Generate target images \n\t    num_samples = 3\n\t    guidance_scale = 7.5 \n\t    num_inference_steps = 50 \n\t    height = 512\n\t    width = 512 \n", "    with autocast(\"cuda\"), torch.inference_mode():        \n\t        model_path = os.path.join(args.output_dir, 'result')\n\t        os.makedirs(model_path, exist_ok=True)\n\t        for idx, embd in enumerate([inference_embeddings]):\n\t            for i in range(args.image_num//num_samples+1):\n\t                images = pipe(\n\t                    text_embeddings=embd,\n\t                    height=height,\n\t                    width=width,\n\t                    num_images_per_prompt=num_samples,\n", "                    num_inference_steps=num_inference_steps,\n\t                    guidance_scale=guidance_scale,\n\t                    generator=g_cuda\n\t                ).images\n\t                for j in range(len(images)):\n\t                    image = images[j]\n\t                    image.save(model_path+'/{}_seed{}_{}.png'.format(args.target_txt,args.seed,i*num_samples+j))\n\t                    if i*num_samples+j == args.image_num:\n\t                        break\n\tif __name__ == \"__main__\":\n", "    main()\n"]}
{"filename": "train.py", "chunked_list": ["import argparse\n\timport os\n\timport torch\n\timport torch.nn.functional as F\n\timport torch.utils.checkpoint\n\tfrom accelerate import Accelerator\n\tfrom accelerate.logging import get_logger\n\tfrom accelerate.utils import set_seed\n\tfrom diffusers import AutoencoderKL, DDPMScheduler, DDIMScheduler, UNet2DConditionModel\n\tfrom diffusers_ import StableDiffusionPipeline\n", "from huggingface_hub import HfFolder, Repository, whoami\n\tfrom PIL import Image\n\timport numpy as np\n\tfrom torchvision import transforms\n\tfrom tqdm.auto import tqdm\n\tfrom transformers import CLIPTextModel, CLIPTokenizer\n\tfrom torch import autocast\n\tfrom utils import inf_save\n\tlogger = get_logger(__name__)\n\tdef parse_args():\n", "    parser = argparse.ArgumentParser(description=\"Simple example of a training script.\")\n\t    parser.add_argument(\n\t        \"--pretrained_model_name\",\n\t        type=str,\n\t        default=None,\n\t        required=True,\n\t        help=\"model identifier from huggingface.co/models.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--input_image\",\n", "        type=str,\n\t        default=None,\n\t        required=True,\n\t        help=\"Path to input image to edit.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--target_text\",\n\t        type=str,\n\t        default=None,\n\t        help=\"The target text describing the output image.\",\n", "    )\n\t    parser.add_argument(\n\t        \"--source_text\",\n\t        type=str,\n\t        default=None,\n\t        help=\"The source text describing the input image.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--output_dir\",\n\t        type=str,\n", "        default=\"output\",\n\t        help=\"The output directory where the model predictions and checkpoints will be written.\",\n\t    )\n\t    parser.add_argument(\"--seed\", type=int, default=None, help=\"A seed for reproducible training.\")\n\t    parser.add_argument(\n\t        \"--resolution\",\n\t        type=int,\n\t        default=512,\n\t        help=(\n\t            \"The resolution for input images, all the images in the train/validation dataset will be resized to this\"\n", "            \" resolution\"\n\t        ),\n\t    )\n\t    parser.add_argument(\n\t        \"--center_crop\", action=\"store_true\", help=\"Whether to center crop images before resizing to resolution\"\n\t    )\n\t    parser.add_argument(\n\t        \"--n_hiper\",\n\t        type=int,\n\t        default=5,\n", "        help=\"Number of hiper embedding\",\n\t    )\n\t    parser.add_argument(\n\t        \"--emb_train_steps\",\n\t        type=int,\n\t        default=1500,\n\t        help=\"Total number of training steps to perform.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--emb_learning_rate\",\n", "        type=float,\n\t        default=1e-3,\n\t        help=\"Learning rate for optimizing the embeddings.\",\n\t    )\n\t    parser.add_argument(\n\t        \"--gradient_accumulation_steps\",\n\t        type=int,\n\t        default=1,\n\t        help=\"Number of updates steps to accumulate before performing a backward/update pass.\",\n\t    )\n", "    parser.add_argument(\n\t        \"--use_8bit_adam\", action=\"store_false\", help=\"Whether or not to use 8-bit Adam from bitsandbytes.\"\n\t    )\n\t    parser.add_argument(\"--adam_beta1\", type=float, default=0.9, help=\"The beta1 parameter for the Adam optimizer.\")\n\t    parser.add_argument(\"--adam_beta2\", type=float, default=0.999, help=\"The beta2 parameter for the Adam optimizer.\")\n\t    parser.add_argument(\"--adam_epsilon\", type=float, default=1e-08, help=\"Epsilon value for the Adam optimizer\")\n\t    parser.add_argument(\n\t        \"--mixed_precision\",\n\t        type=str,\n\t        default=\"fp16\",\n", "        choices=[\"no\", \"fp16\", \"bf16\"],\n\t        help=(\n\t            \"Whether to use mixed precision. Choose\"\n\t            \"between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >= 1.10.\"\n\t            \"and an Nvidia Ampere GPU.\"\n\t        ),\n\t    )\n\t    args = parser.parse_args()\n\t    return args\n\tdef main():\n", "    args = parse_args()\n\t    # Setting\n\t    accelerator = Accelerator(\n\t        gradient_accumulation_steps=args.gradient_accumulation_steps,\n\t        mixed_precision=args.mixed_precision,\n\t    )\n\t    if args.seed is not None:\n\t        set_seed(args.seed)\n\t        g_cuda = torch.Generator(device='cuda')\n\t        g_cuda.manual_seed(args.seed)\n", "    os.makedirs(args.output_dir, exist_ok=True)\n\t    if args.use_8bit_adam:\n\t        try:\n\t            import bitsandbytes as bnb\n\t        except ImportError:\n\t            raise ImportError(\n\t                \"To use 8-bit Adam, please install the bitsandbytes library: `pip install bitsandbytes`.\"\n\t            )\n\t        optimizer_class = bnb.optim.Adam8bit\n\t    else:\n", "        optimizer_class = torch.optim.Adam\n\t    weight_dtype = torch.float32\n\t    if args.mixed_precision == \"fp16\":\n\t        weight_dtype = torch.float16\n\t    elif args.mixed_precision == \"bf16\":\n\t        weight_dtype = torch.bfloat16\n\t    # Load pretrained models    \n\t    tokenizer = CLIPTokenizer.from_pretrained(args.pretrained_model_name, subfolder=\"tokenizer\", use_auth_token=True)\n\t    CLIP_text_encoder = CLIPTextModel.from_pretrained(args.pretrained_model_name, subfolder=\"text_encoder\", use_auth_token=True)\n\t    vae = AutoencoderKL.from_pretrained(args.pretrained_model_name, subfolder=\"vae\", use_auth_token=True)\n", "    unet = UNet2DConditionModel.from_pretrained(args.pretrained_model_name, subfolder=\"unet\", use_auth_token=True)\n\t    noise_scheduler = DDPMScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule=\"scaled_linear\", num_train_timesteps=1000)\n\t    # Encode the input image.\n\t    vae.to(accelerator.device, dtype=weight_dtype)\n\t    input_image = Image.open(args.input_image).convert(\"RGB\")\n\t    image_transforms = transforms.Compose(\n\t        [\n\t            transforms.Resize(args.resolution, interpolation=transforms.InterpolationMode.BILINEAR),\n\t            transforms.CenterCrop(args.resolution) if args.center_crop else transforms.RandomCrop(args.resolution),\n\t            transforms.ToTensor(),\n", "            transforms.Normalize([0.5], [0.5]),\n\t        ]\n\t    )\n\t    init_image = image_transforms(input_image)\n\t    init_image = init_image[None].to(device=accelerator.device, dtype=weight_dtype)\n\t    with torch.inference_mode():\n\t        init_latents = vae.encode(init_image).latent_dist.sample()\n\t        init_latents = 0.18215 * init_latents\n\t    # Encode the source and target text.\n\t    CLIP_text_encoder.to(accelerator.device, dtype=weight_dtype)\n", "    text_ids_tgt = tokenizer(args.target_text, padding=\"max_length\", truncation=True, max_length=tokenizer.model_max_length, return_tensors=\"pt\").input_ids\n\t    text_ids_tgt = text_ids_tgt.to(device=accelerator.device)\n\t    text_ids_src = tokenizer(args.source_text,padding=\"max_length\",truncation=True,max_length=tokenizer.model_max_length,return_tensors=\"pt\").input_ids\n\t    text_ids_src = text_ids_src.to(device=accelerator.device)\n\t    with torch.inference_mode():\n\t        target_embeddings = CLIP_text_encoder(text_ids_tgt)[0].float()\n\t        source_embeddings = CLIP_text_encoder(text_ids_src)[0].float()\n\t    # del vae, CLIP_text_encoder\n\t    del vae, CLIP_text_encoder\n\t    if torch.cuda.is_available():\n", "        torch.cuda.empty_cache()\n\t    # For inference\n\t    ddim_scheduler = DDIMScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule=\"scaled_linear\", clip_sample=False, set_alpha_to_one=False)\n\t    pipe = StableDiffusionPipeline.from_pretrained(args.pretrained_model_name, scheduler=ddim_scheduler, torch_dtype=torch.float16).to(\"cuda\")\n\t    num_samples = 1 \n\t    guidance_scale = 7.5 \n\t    num_inference_steps = 50\n\t    height = 512\n\t    width = 512\n\t    # Optimize hiper embedding\n", "    n_hiper = args.n_hiper\n\t    hiper_embeddings = source_embeddings[:,-n_hiper:].clone().detach()\n\t    src_embeddings = source_embeddings[:,:-n_hiper].clone().detach()\n\t    tgt_embeddings = target_embeddings[:,:-n_hiper].clone().detach()\n\t    hiper_embeddings.requires_grad_(True)\n\t    optimizer = optimizer_class(\n\t        [hiper_embeddings],  \n\t        lr=args.emb_learning_rate,\n\t        betas=(args.adam_beta1, args.adam_beta2),\n\t        eps=args.adam_epsilon,\n", "    )\n\t    unet, optimizer = accelerator.prepare(unet, optimizer)\n\t    def train_loop(pbar, optimizer, hiper_embeddings):\n\t        for step in pbar:\n\t            with accelerator.accumulate(unet):\n\t                noise = torch.randn_like(init_latents)\n\t                bsz = init_latents.shape[0]\n\t                timesteps = torch.randint(0, noise_scheduler.config.num_train_timesteps, (bsz,), device=init_latents.device)\n\t                timesteps = timesteps.long()\n\t                noisy_latents = noise_scheduler.add_noise(init_latents, noise, timesteps)\n", "                source_embeddings = torch.cat([src_embeddings, hiper_embeddings], 1)\n\t                noise_pred = unet(noisy_latents, timesteps, source_embeddings).sample\n\t                loss = F.mse_loss(noise_pred.float(), noise.float(), reduction=\"mean\")\n\t                accelerator.backward(loss)\n\t                optimizer.step()\n\t                optimizer.zero_grad(set_to_none=True)\n\t            # Check inference\n\t            if step%100==0:\n\t                inf_emb = []\n\t                inf_emb.append(torch.cat([src_embeddings, hiper_embeddings.clone().detach()], 1))\n", "                inf_emb.append(torch.cat([tgt_embeddings, hiper_embeddings.clone().detach()*0.8], 1))\n\t                inf_emb.append(target_embeddings)\n\t                inf_images=[]    \n\t                inf_images.append(input_image)            \n\t                with autocast(\"cuda\"), torch.inference_mode():     \n\t                    for i in range(3):   \n\t                        images = pipe(text_embeddings=inf_emb[i], height=height, width=width, num_images_per_prompt=num_samples,\n\t                            num_inference_steps=num_inference_steps, guidance_scale=guidance_scale, generator=g_cuda).images\n\t                        inf_images.append(images[0])\n\t                save_name = os.path.join(args.output_dir, 'training_results_seed{}_step{}.png'.format(args.seed, step))\n", "                inf_save(inf_images, ['source_img', '[src, hper]', '[tgt, hper]', '[tgt]'], save_name)\n\t                del images\n\t                torch.save(hiper_embeddings.cpu(), os.path.join(args.output_dir, \"hiper_embeddings_step{}.pt\".format(step)))\n\t        accelerator.wait_for_everyone()\n\t    progress_bar = tqdm(range(args.emb_train_steps), disable=not accelerator.is_local_main_process)\n\t    progress_bar.set_description(\"Optimizing embedding\")\n\t    train_loop(progress_bar, optimizer, hiper_embeddings)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "utils.py", "chunked_list": ["import numpy as np\n\timport torch\n\tfrom PIL import Image, ImageDraw, ImageFont\n\timport cv2\n\tfrom typing import Optional, Union, Tuple, List, Callable, Dict\n\tfrom tqdm.notebook import tqdm\n\t#codes for 'save_image' and 'text_under_image' are from \n\t# https://github.com/google/prompt-to-prompt/blob/main/prompt-to-prompt_stable.ipynb\n\tdef save_images(images, num_rows=1, offset_ratio=0.02, name=None):\n\t    if type(images) is list:\n", "        num_empty = len(images) % num_rows\n\t    elif images.ndim == 4:\n\t        num_empty = images.shape[0] % num_rows\n\t    else:\n\t        images = [images]\n\t        num_empty = 0\n\t    empty_images = np.ones(images[0].shape, dtype=np.uint8) * 255\n\t    images = [image.astype(np.uint8) for image in images] + [empty_images] * num_empty\n\t    num_items = len(images)\n\t    h, w, c = images[0].shape\n", "    offset = int(h * offset_ratio)\n\t    num_cols = num_items // num_rows\n\t    image_ = np.ones((h * num_rows + offset * (num_rows - 1),\n\t                      w * num_cols + offset * (num_cols - 1), 3), dtype=np.uint8) * 255\n\t    for i in range(num_rows):\n\t        for j in range(num_cols):\n\t            image_[i * (h + offset): i * (h + offset) + h:, j * (w + offset): j * (w + offset) + w] = images[\n\t                i * num_cols + j]\n\t    pil_img = Image.fromarray(image_)\n\t    pil_img.save(name)\n", "def text_under_image(image: np.ndarray, text: str, text_color: Tuple[int, int, int] = (0, 0, 0)):\n\t    h, w, c = image.shape\n\t    offset = int(h * .2)\n\t    img = np.ones((h + offset, w, c), dtype=np.uint8) * 255\n\t    font = cv2.FONT_HERSHEY_SIMPLEX\n\t    img[:h] = image\n\t    textsize = cv2.getTextSize(text, font, 1, 2)[0]\n\t    text_x, text_y = (w - textsize[0]) // 2, h + offset - textsize[1] // 2\n\t    cv2.putText(img, text, (text_x, text_y ), font, 1, text_color, 2)\n\t    return img\n", "def inf_save(inf_img, name, save_name):\n\t    images = []\n\t    for i in range(len(inf_img)):\n\t        image = np.array(inf_img[i].resize((256,256)))\n\t        image = text_under_image(image, name[i])\n\t        images.append(image)\n\t    save_images(np.stack(images, axis=0), name = save_name)\n"]}
{"filename": "diffusers_/configuration_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 The HuggingFace Inc. team.\n\t# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\" ConfigMixin base class and utilities.\"\"\"\n\timport dataclasses\n\timport functools\n\timport importlib\n\timport inspect\n", "import json\n\timport os\n\timport re\n\tfrom collections import OrderedDict\n\tfrom typing import Any, Dict, Tuple, Union\n\tfrom huggingface_hub import hf_hub_download\n\tfrom huggingface_hub.utils import EntryNotFoundError, RepositoryNotFoundError, RevisionNotFoundError\n\tfrom requests import HTTPError\n\tfrom . import __version__\n\tfrom .utils import DIFFUSERS_CACHE, HUGGINGFACE_CO_RESOLVE_ENDPOINT, DummyObject, deprecate, logging\n", "logger = logging.get_logger(__name__)\n\t_re_configuration_file = re.compile(r\"config\\.(.*)\\.json\")\n\tclass FrozenDict(OrderedDict):\n\t    def __init__(self, *args, **kwargs):\n\t        super().__init__(*args, **kwargs)\n\t        for key, value in self.items():\n\t            setattr(self, key, value)\n\t        self.__frozen = True\n\t    def __delitem__(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``__delitem__`` on a {self.__class__.__name__} instance.\")\n", "    def setdefault(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``setdefault`` on a {self.__class__.__name__} instance.\")\n\t    def pop(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``pop`` on a {self.__class__.__name__} instance.\")\n\t    def update(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``update`` on a {self.__class__.__name__} instance.\")\n\t    def __setattr__(self, name, value):\n\t        if hasattr(self, \"__frozen\") and self.__frozen:\n\t            raise Exception(f\"You cannot use ``__setattr__`` on a {self.__class__.__name__} instance.\")\n\t        super().__setattr__(name, value)\n", "    def __setitem__(self, name, value):\n\t        if hasattr(self, \"__frozen\") and self.__frozen:\n\t            raise Exception(f\"You cannot use ``__setattr__`` on a {self.__class__.__name__} instance.\")\n\t        super().__setitem__(name, value)\n\tclass ConfigMixin:\n\t    r\"\"\"\n\t    Base class for all configuration classes. Stores all configuration parameters under `self.config` Also handles all\n\t    methods for loading/downloading/saving classes inheriting from [`ConfigMixin`] with\n\t        - [`~ConfigMixin.from_config`]\n\t        - [`~ConfigMixin.save_config`]\n", "    Class attributes:\n\t        - **config_name** (`str`) -- A filename under which the config should stored when calling\n\t          [`~ConfigMixin.save_config`] (should be overridden by parent class).\n\t        - **ignore_for_config** (`List[str]`) -- A list of attributes that should not be saved in the config (should be\n\t          overridden by subclass).\n\t        - **has_compatibles** (`bool`) -- Whether the class has compatible classes (should be overridden by subclass).\n\t        - **_deprecated_kwargs** (`List[str]`) -- Keyword arguments that are deprecated. Note that the init function\n\t          should only have a `kwargs` argument if at least one argument is deprecated (should be overridden by\n\t          subclass).\n\t    \"\"\"\n", "    config_name = None\n\t    ignore_for_config = []\n\t    has_compatibles = False\n\t    _deprecated_kwargs = []\n\t    def register_to_config(self, **kwargs):\n\t        if self.config_name is None:\n\t            raise NotImplementedError(f\"Make sure that {self.__class__} has defined a class name `config_name`\")\n\t        # Special case for `kwargs` used in deprecation warning added to schedulers\n\t        # TODO: remove this when we remove the deprecation warning, and the `kwargs` argument,\n\t        # or solve in a more general way.\n", "        kwargs.pop(\"kwargs\", None)\n\t        for key, value in kwargs.items():\n\t            try:\n\t                setattr(self, key, value)\n\t            except AttributeError as err:\n\t                logger.error(f\"Can't set {key} with value {value} for {self}\")\n\t                raise err\n\t        if not hasattr(self, \"_internal_dict\"):\n\t            internal_dict = kwargs\n\t        else:\n", "            previous_dict = dict(self._internal_dict)\n\t            internal_dict = {**self._internal_dict, **kwargs}\n\t            logger.debug(f\"Updating config from {previous_dict} to {internal_dict}\")\n\t        self._internal_dict = FrozenDict(internal_dict)\n\t    def save_config(self, save_directory: Union[str, os.PathLike], push_to_hub: bool = False, **kwargs):\n\t        \"\"\"\n\t        Save a configuration object to the directory `save_directory`, so that it can be re-loaded using the\n\t        [`~ConfigMixin.from_config`] class method.\n\t        Args:\n\t            save_directory (`str` or `os.PathLike`):\n", "                Directory where the configuration JSON file will be saved (will be created if it does not exist).\n\t        \"\"\"\n\t        if os.path.isfile(save_directory):\n\t            raise AssertionError(f\"Provided path ({save_directory}) should be a directory, not a file\")\n\t        os.makedirs(save_directory, exist_ok=True)\n\t        # If we save using the predefined names, we can load using `from_config`\n\t        output_config_file = os.path.join(save_directory, self.config_name)\n\t        self.to_json_file(output_config_file)\n\t        logger.info(f\"Configuration saved in {output_config_file}\")\n\t    @classmethod\n", "    def from_config(cls, config: Union[FrozenDict, Dict[str, Any]] = None, return_unused_kwargs=False, **kwargs):\n\t        r\"\"\"\n\t        Instantiate a Python class from a config dictionary\n\t        Parameters:\n\t            config (`Dict[str, Any]`):\n\t                A config dictionary from which the Python class will be instantiated. Make sure to only load\n\t                configuration files of compatible classes.\n\t            return_unused_kwargs (`bool`, *optional*, defaults to `False`):\n\t                Whether kwargs that are not consumed by the Python class should be returned or not.\n\t            kwargs (remaining dictionary of keyword arguments, *optional*):\n", "                Can be used to update the configuration object (after it being loaded) and initiate the Python class.\n\t                `**kwargs` will be directly passed to the underlying scheduler/model's `__init__` method and eventually\n\t                overwrite same named arguments of `config`.\n\t        Examples:\n\t        ```python\n\t        >>> from diffusers import DDPMScheduler, DDIMScheduler, PNDMScheduler\n\t        >>> # Download scheduler from huggingface.co and cache.\n\t        >>> scheduler = DDPMScheduler.from_pretrained(\"google/ddpm-cifar10-32\")\n\t        >>> # Instantiate DDIM scheduler class with same config as DDPM\n\t        >>> scheduler = DDIMScheduler.from_config(scheduler.config)\n", "        >>> # Instantiate PNDM scheduler class with same config as DDPM\n\t        >>> scheduler = PNDMScheduler.from_config(scheduler.config)\n\t        ```\n\t        \"\"\"\n\t        # <===== TO BE REMOVED WITH DEPRECATION\n\t        # TODO(Patrick) - make sure to remove the following lines when config==\"model_path\" is deprecated\n\t        if \"pretrained_model_name_or_path\" in kwargs:\n\t            config = kwargs.pop(\"pretrained_model_name_or_path\")\n\t        if config is None:\n\t            raise ValueError(\"Please make sure to provide a config as the first positional argument.\")\n", "        # ======>\n\t        if not isinstance(config, dict):\n\t            deprecation_message = \"It is deprecated to pass a pretrained model name or path to `from_config`.\"\n\t            if \"Scheduler\" in cls.__name__:\n\t                deprecation_message += (\n\t                    f\"If you were trying to load a scheduler, please use {cls}.from_pretrained(...) instead.\"\n\t                    \" Otherwise, please make sure to pass a configuration dictionary instead. This functionality will\"\n\t                    \" be removed in v1.0.0.\"\n\t                )\n\t            elif \"Model\" in cls.__name__:\n", "                deprecation_message += (\n\t                    f\"If you were trying to load a model, please use {cls}.load_config(...) followed by\"\n\t                    f\" {cls}.from_config(...) instead. Otherwise, please make sure to pass a configuration dictionary\"\n\t                    \" instead. This functionality will be removed in v1.0.0.\"\n\t                )\n\t            deprecate(\"config-passed-as-path\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t            config, kwargs = cls.load_config(pretrained_model_name_or_path=config, return_unused_kwargs=True, **kwargs)\n\t        init_dict, unused_kwargs, hidden_dict = cls.extract_init_dict(config, **kwargs)\n\t        # Allow dtype to be specified on initialization\n\t        if \"dtype\" in unused_kwargs:\n", "            init_dict[\"dtype\"] = unused_kwargs.pop(\"dtype\")\n\t        # add possible deprecated kwargs\n\t        for deprecated_kwarg in cls._deprecated_kwargs:\n\t            if deprecated_kwarg in unused_kwargs:\n\t                init_dict[deprecated_kwarg] = unused_kwargs.pop(deprecated_kwarg)\n\t        # Return model and optionally state and/or unused_kwargs\n\t        model = cls(**init_dict)\n\t        # make sure to also save config parameters that might be used for compatible classes\n\t        model.register_to_config(**hidden_dict)\n\t        # add hidden kwargs of compatible classes to unused_kwargs\n", "        unused_kwargs = {**unused_kwargs, **hidden_dict}\n\t        if return_unused_kwargs:\n\t            return (model, unused_kwargs)\n\t        else:\n\t            return model\n\t    @classmethod\n\t    def get_config_dict(cls, *args, **kwargs):\n\t        deprecation_message = (\n\t            f\" The function get_config_dict is deprecated. Please use {cls}.load_config instead. This function will be\"\n\t            \" removed in version v1.0.0\"\n", "        )\n\t        deprecate(\"get_config_dict\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t        return cls.load_config(*args, **kwargs)\n\t    @classmethod\n\t    def load_config(\n\t        cls, pretrained_model_name_or_path: Union[str, os.PathLike], return_unused_kwargs=False, **kwargs\n\t    ) -> Tuple[Dict[str, Any], Dict[str, Any]]:\n\t        r\"\"\"\n\t        Instantiate a Python class from a config dictionary\n\t        Parameters:\n", "            pretrained_model_name_or_path (`str` or `os.PathLike`, *optional*):\n\t                Can be either:\n\t                    - A string, the *model id* of a model repo on huggingface.co. Valid model ids should have an\n\t                      organization name, like `google/ddpm-celebahq-256`.\n\t                    - A path to a *directory* containing model weights saved using [`~ConfigMixin.save_config`], e.g.,\n\t                      `./my_model_directory/`.\n\t            cache_dir (`Union[str, os.PathLike]`, *optional*):\n\t                Path to a directory in which a downloaded pretrained model configuration should be cached if the\n\t                standard cache should not be used.\n\t            force_download (`bool`, *optional*, defaults to `False`):\n", "                Whether or not to force the (re-)download of the model weights and configuration files, overriding the\n\t                cached versions if they exist.\n\t            resume_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to delete incompletely received files. Will attempt to resume the download if such a\n\t                file exists.\n\t            proxies (`Dict[str, str]`, *optional*):\n\t                A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t                'http://hostname': 'foo.bar:4012'}`. The proxies are used on each request.\n\t            output_loading_info(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.\n", "            local_files_only(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to only look at local files (i.e., do not try to download the model).\n\t            use_auth_token (`str` or *bool*, *optional*):\n\t                The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t                when running `transformers-cli login` (stored in `~/.huggingface`).\n\t            revision (`str`, *optional*, defaults to `\"main\"`):\n\t                The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t                git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t                identifier allowed by git.\n\t            subfolder (`str`, *optional*, defaults to `\"\"`):\n", "                In case the relevant files are located inside a subfolder of the model repo (either remote in\n\t                huggingface.co or downloaded locally), you can specify the folder name here.\n\t        <Tip>\n\t         It is required to be logged in (`huggingface-cli login`) when you want to use private or [gated\n\t         models](https://huggingface.co/docs/hub/models-gated#gated-models).\n\t        </Tip>\n\t        <Tip>\n\t        Activate the special [\"offline-mode\"](https://huggingface.co/transformers/installation.html#offline-mode) to\n\t        use this method in a firewalled environment.\n\t        </Tip>\n", "        \"\"\"\n\t        cache_dir = kwargs.pop(\"cache_dir\", DIFFUSERS_CACHE)\n\t        force_download = kwargs.pop(\"force_download\", False)\n\t        resume_download = kwargs.pop(\"resume_download\", False)\n\t        proxies = kwargs.pop(\"proxies\", None)\n\t        use_auth_token = kwargs.pop(\"use_auth_token\", None)\n\t        local_files_only = kwargs.pop(\"local_files_only\", False)\n\t        revision = kwargs.pop(\"revision\", None)\n\t        _ = kwargs.pop(\"mirror\", None)\n\t        subfolder = kwargs.pop(\"subfolder\", None)\n", "        user_agent = {\"file_type\": \"config\"}\n\t        pretrained_model_name_or_path = str(pretrained_model_name_or_path)\n\t        if cls.config_name is None:\n\t            raise ValueError(\n\t                \"`self.config_name` is not defined. Note that one should not load a config from \"\n\t                \"`ConfigMixin`. Please make sure to define `config_name` in a class inheriting from `ConfigMixin`\"\n\t            )\n\t        if os.path.isfile(pretrained_model_name_or_path):\n\t            config_file = pretrained_model_name_or_path\n\t        elif os.path.isdir(pretrained_model_name_or_path):\n", "            if os.path.isfile(os.path.join(pretrained_model_name_or_path, cls.config_name)):\n\t                # Load from a PyTorch checkpoint\n\t                config_file = os.path.join(pretrained_model_name_or_path, cls.config_name)\n\t            elif subfolder is not None and os.path.isfile(\n\t                os.path.join(pretrained_model_name_or_path, subfolder, cls.config_name)\n\t            ):\n\t                config_file = os.path.join(pretrained_model_name_or_path, subfolder, cls.config_name)\n\t            else:\n\t                raise EnvironmentError(\n\t                    f\"Error no file named {cls.config_name} found in directory {pretrained_model_name_or_path}.\"\n", "                )\n\t        else:\n\t            try:\n\t                # Load from URL or cache if already cached\n\t                config_file = hf_hub_download(\n\t                    pretrained_model_name_or_path,\n\t                    filename=cls.config_name,\n\t                    cache_dir=cache_dir,\n\t                    force_download=force_download,\n\t                    proxies=proxies,\n", "                    resume_download=resume_download,\n\t                    local_files_only=local_files_only,\n\t                    use_auth_token=use_auth_token,\n\t                    user_agent=user_agent,\n\t                    subfolder=subfolder,\n\t                    revision=revision,\n\t                )\n\t            except RepositoryNotFoundError:\n\t                raise EnvironmentError(\n\t                    f\"{pretrained_model_name_or_path} is not a local folder and is not a valid model identifier\"\n", "                    \" listed on 'https://huggingface.co/models'\\nIf this is a private repository, make sure to pass a\"\n\t                    \" token having permission to this repo with `use_auth_token` or log in with `huggingface-cli\"\n\t                    \" login`.\"\n\t                )\n\t            except RevisionNotFoundError:\n\t                raise EnvironmentError(\n\t                    f\"{revision} is not a valid git identifier (branch name, tag name or commit id) that exists for\"\n\t                    \" this model name. Check the model page at\"\n\t                    f\" 'https://huggingface.co/{pretrained_model_name_or_path}' for available revisions.\"\n\t                )\n", "            except EntryNotFoundError:\n\t                raise EnvironmentError(\n\t                    f\"{pretrained_model_name_or_path} does not appear to have a file named {cls.config_name}.\"\n\t                )\n\t            except HTTPError as err:\n\t                raise EnvironmentError(\n\t                    \"There was a specific connection error when trying to load\"\n\t                    f\" {pretrained_model_name_or_path}:\\n{err}\"\n\t                )\n\t            except ValueError:\n", "                raise EnvironmentError(\n\t                    f\"We couldn't connect to '{HUGGINGFACE_CO_RESOLVE_ENDPOINT}' to load this model, couldn't find it\"\n\t                    f\" in the cached files and it looks like {pretrained_model_name_or_path} is not the path to a\"\n\t                    f\" directory containing a {cls.config_name} file.\\nCheckout your internet connection or see how to\"\n\t                    \" run the library in offline mode at\"\n\t                    \" 'https://huggingface.co/docs/diffusers/installation#offline-mode'.\"\n\t                )\n\t            except EnvironmentError:\n\t                raise EnvironmentError(\n\t                    f\"Can't load config for '{pretrained_model_name_or_path}'. If you were trying to load it from \"\n", "                    \"'https://huggingface.co/models', make sure you don't have a local directory with the same name. \"\n\t                    f\"Otherwise, make sure '{pretrained_model_name_or_path}' is the correct path to a directory \"\n\t                    f\"containing a {cls.config_name} file\"\n\t                )\n\t        try:\n\t            # Load config dict\n\t            config_dict = cls._dict_from_json_file(config_file)\n\t        except (json.JSONDecodeError, UnicodeDecodeError):\n\t            raise EnvironmentError(f\"It looks like the config file at '{config_file}' is not a valid JSON file.\")\n\t        if return_unused_kwargs:\n", "            return config_dict, kwargs\n\t        return config_dict\n\t    @staticmethod\n\t    def _get_init_keys(cls):\n\t        return set(dict(inspect.signature(cls.__init__).parameters).keys())\n\t    @classmethod\n\t    def extract_init_dict(cls, config_dict, **kwargs):\n\t        # 0. Copy origin config dict\n\t        original_dict = {k: v for k, v in config_dict.items()}\n\t        # 1. Retrieve expected config attributes from __init__ signature\n", "        expected_keys = cls._get_init_keys(cls)\n\t        expected_keys.remove(\"self\")\n\t        # remove general kwargs if present in dict\n\t        if \"kwargs\" in expected_keys:\n\t            expected_keys.remove(\"kwargs\")\n\t        # remove flax internal keys\n\t        if hasattr(cls, \"_flax_internal_args\"):\n\t            for arg in cls._flax_internal_args:\n\t                expected_keys.remove(arg)\n\t        # 2. Remove attributes that cannot be expected from expected config attributes\n", "        # remove keys to be ignored\n\t        if len(cls.ignore_for_config) > 0:\n\t            expected_keys = expected_keys - set(cls.ignore_for_config)\n\t        # load diffusers library to import compatible and original scheduler\n\t        diffusers_library = importlib.import_module(__name__.split(\".\")[0])\n\t        if cls.has_compatibles:\n\t            compatible_classes = [c for c in cls._get_compatibles() if not isinstance(c, DummyObject)]\n\t        else:\n\t            compatible_classes = []\n\t        expected_keys_comp_cls = set()\n", "        for c in compatible_classes:\n\t            expected_keys_c = cls._get_init_keys(c)\n\t            expected_keys_comp_cls = expected_keys_comp_cls.union(expected_keys_c)\n\t        expected_keys_comp_cls = expected_keys_comp_cls - cls._get_init_keys(cls)\n\t        config_dict = {k: v for k, v in config_dict.items() if k not in expected_keys_comp_cls}\n\t        # remove attributes from orig class that cannot be expected\n\t        orig_cls_name = config_dict.pop(\"_class_name\", cls.__name__)\n\t        if orig_cls_name != cls.__name__ and hasattr(diffusers_library, orig_cls_name):\n\t            orig_cls = getattr(diffusers_library, orig_cls_name)\n\t            unexpected_keys_from_orig = cls._get_init_keys(orig_cls) - expected_keys\n", "            config_dict = {k: v for k, v in config_dict.items() if k not in unexpected_keys_from_orig}\n\t        # remove private attributes\n\t        config_dict = {k: v for k, v in config_dict.items() if not k.startswith(\"_\")}\n\t        # 3. Create keyword arguments that will be passed to __init__ from expected keyword arguments\n\t        init_dict = {}\n\t        for key in expected_keys:\n\t            # if config param is passed to kwarg and is present in config dict\n\t            # it should overwrite existing config dict key\n\t            if key in kwargs and key in config_dict:\n\t                config_dict[key] = kwargs.pop(key)\n", "            if key in kwargs:\n\t                # overwrite key\n\t                init_dict[key] = kwargs.pop(key)\n\t            elif key in config_dict:\n\t                # use value from config dict\n\t                init_dict[key] = config_dict.pop(key)\n\t        # 4. Give nice warning if unexpected values have been passed\n\t        if len(config_dict) > 0:\n\t            logger.warning(\n\t                f\"The config attributes {config_dict} were passed to {cls.__name__}, \"\n", "                \"but are not expected and will be ignored. Please verify your \"\n\t                f\"{cls.config_name} configuration file.\"\n\t            )\n\t        # 5. Give nice info if config attributes are initiliazed to default because they have not been passed\n\t        passed_keys = set(init_dict.keys())\n\t        if len(expected_keys - passed_keys) > 0:\n\t            logger.info(\n\t                f\"{expected_keys - passed_keys} was not found in config. Values will be initialized to default values.\"\n\t            )\n\t        # 6. Define unused keyword arguments\n", "        unused_kwargs = {**config_dict, **kwargs}\n\t        # 7. Define \"hidden\" config parameters that were saved for compatible classes\n\t        hidden_config_dict = {k: v for k, v in original_dict.items() if k not in init_dict}\n\t        return init_dict, unused_kwargs, hidden_config_dict\n\t    @classmethod\n\t    def _dict_from_json_file(cls, json_file: Union[str, os.PathLike]):\n\t        with open(json_file, \"r\", encoding=\"utf-8\") as reader:\n\t            text = reader.read()\n\t        return json.loads(text)\n\t    def __repr__(self):\n", "        return f\"{self.__class__.__name__} {self.to_json_string()}\"\n\t    @property\n\t    def config(self) -> Dict[str, Any]:\n\t        \"\"\"\n\t        Returns the config of the class as a frozen dictionary\n\t        Returns:\n\t            `Dict[str, Any]`: Config of the class.\n\t        \"\"\"\n\t        return self._internal_dict\n\t    def to_json_string(self) -> str:\n", "        \"\"\"\n\t        Serializes this instance to a JSON string.\n\t        Returns:\n\t            `str`: String containing all the attributes that make up this configuration instance in JSON format.\n\t        \"\"\"\n\t        config_dict = self._internal_dict if hasattr(self, \"_internal_dict\") else {}\n\t        config_dict[\"_class_name\"] = self.__class__.__name__\n\t        config_dict[\"_diffusers_version\"] = __version__\n\t        return json.dumps(config_dict, indent=2, sort_keys=True) + \"\\n\"\n\t    def to_json_file(self, json_file_path: Union[str, os.PathLike]):\n", "        \"\"\"\n\t        Save this instance to a JSON file.\n\t        Args:\n\t            json_file_path (`str` or `os.PathLike`):\n\t                Path to the JSON file in which this configuration instance's parameters will be saved.\n\t        \"\"\"\n\t        with open(json_file_path, \"w\", encoding=\"utf-8\") as writer:\n\t            writer.write(self.to_json_string())\n\tdef register_to_config(init):\n\t    r\"\"\"\n", "    Decorator to apply on the init of classes inheriting from [`ConfigMixin`] so that all the arguments are\n\t    automatically sent to `self.register_for_config`. To ignore a specific argument accepted by the init but that\n\t    shouldn't be registered in the config, use the `ignore_for_config` class variable\n\t    Warning: Once decorated, all private arguments (beginning with an underscore) are trashed and not sent to the init!\n\t    \"\"\"\n\t    @functools.wraps(init)\n\t    def inner_init(self, *args, **kwargs):\n\t        # Ignore private kwargs in the init.\n\t        init_kwargs = {k: v for k, v in kwargs.items() if not k.startswith(\"_\")}\n\t        config_init_kwargs = {k: v for k, v in kwargs.items() if k.startswith(\"_\")}\n", "        if not isinstance(self, ConfigMixin):\n\t            raise RuntimeError(\n\t                f\"`@register_for_config` was applied to {self.__class__.__name__} init method, but this class does \"\n\t                \"not inherit from `ConfigMixin`.\"\n\t            )\n\t        ignore = getattr(self, \"ignore_for_config\", [])\n\t        # Get positional arguments aligned with kwargs\n\t        new_kwargs = {}\n\t        signature = inspect.signature(init)\n\t        parameters = {\n", "            name: p.default for i, (name, p) in enumerate(signature.parameters.items()) if i > 0 and name not in ignore\n\t        }\n\t        for arg, name in zip(args, parameters.keys()):\n\t            new_kwargs[name] = arg\n\t        # Then add all kwargs\n\t        new_kwargs.update(\n\t            {\n\t                k: init_kwargs.get(k, default)\n\t                for k, default in parameters.items()\n\t                if k not in ignore and k not in new_kwargs\n", "            }\n\t        )\n\t        new_kwargs = {**config_init_kwargs, **new_kwargs}\n\t        getattr(self, \"register_to_config\")(**new_kwargs)\n\t        init(self, *args, **init_kwargs)\n\t    return inner_init\n\tdef flax_register_to_config(cls):\n\t    original_init = cls.__init__\n\t    @functools.wraps(original_init)\n\t    def init(self, *args, **kwargs):\n", "        if not isinstance(self, ConfigMixin):\n\t            raise RuntimeError(\n\t                f\"`@register_for_config` was applied to {self.__class__.__name__} init method, but this class does \"\n\t                \"not inherit from `ConfigMixin`.\"\n\t            )\n\t        # Ignore private kwargs in the init. Retrieve all passed attributes\n\t        init_kwargs = {k: v for k, v in kwargs.items()}\n\t        # Retrieve default values\n\t        fields = dataclasses.fields(self)\n\t        default_kwargs = {}\n", "        for field in fields:\n\t            # ignore flax specific attributes\n\t            if field.name in self._flax_internal_args:\n\t                continue\n\t            if type(field.default) == dataclasses._MISSING_TYPE:\n\t                default_kwargs[field.name] = None\n\t            else:\n\t                default_kwargs[field.name] = getattr(self, field.name)\n\t        # Make sure init_kwargs override default kwargs\n\t        new_kwargs = {**default_kwargs, **init_kwargs}\n", "        # dtype should be part of `init_kwargs`, but not `new_kwargs`\n\t        if \"dtype\" in new_kwargs:\n\t            new_kwargs.pop(\"dtype\")\n\t        # Get positional arguments aligned with kwargs\n\t        for i, arg in enumerate(args):\n\t            name = fields[i].name\n\t            new_kwargs[name] = arg\n\t        getattr(self, \"register_to_config\")(**new_kwargs)\n\t        original_init(self, *args, **kwargs)\n\t    cls.__init__ = init\n", "    return cls\n"]}
{"filename": "diffusers_/modeling_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 The HuggingFace Inc. team.\n\t# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\tfrom functools import partial\n\tfrom typing import Callable, List, Optional, Tuple, Union\n\timport torch\n\tfrom torch import Tensor, device\n", "from huggingface_hub import hf_hub_download\n\tfrom huggingface_hub.utils import EntryNotFoundError, RepositoryNotFoundError, RevisionNotFoundError\n\tfrom requests import HTTPError\n\tfrom . import __version__\n\tfrom .utils import (\n\t    CONFIG_NAME,\n\t    DIFFUSERS_CACHE,\n\t    HUGGINGFACE_CO_RESOLVE_ENDPOINT,\n\t    WEIGHTS_NAME,\n\t    is_accelerate_available,\n", "    is_torch_version,\n\t    logging,\n\t)\n\tlogger = logging.get_logger(__name__)\n\tif is_torch_version(\">=\", \"1.9.0\"):\n\t    _LOW_CPU_MEM_USAGE_DEFAULT = True\n\telse:\n\t    _LOW_CPU_MEM_USAGE_DEFAULT = False\n\tif is_accelerate_available():\n\t    import accelerate\n", "    from accelerate.utils import set_module_tensor_to_device\n\t    from accelerate.utils.versions import is_torch_version\n\tdef get_parameter_device(parameter: torch.nn.Module):\n\t    try:\n\t        return next(parameter.parameters()).device\n\t    except StopIteration:\n\t        # For torch.nn.DataParallel compatibility in PyTorch 1.5\n\t        def find_tensor_attributes(module: torch.nn.Module) -> List[Tuple[str, Tensor]]:\n\t            tuples = [(k, v) for k, v in module.__dict__.items() if torch.is_tensor(v)]\n\t            return tuples\n", "        gen = parameter._named_members(get_members_fn=find_tensor_attributes)\n\t        first_tuple = next(gen)\n\t        return first_tuple[1].device\n\tdef get_parameter_dtype(parameter: torch.nn.Module):\n\t    try:\n\t        return next(parameter.parameters()).dtype\n\t    except StopIteration:\n\t        # For torch.nn.DataParallel compatibility in PyTorch 1.5\n\t        def find_tensor_attributes(module: torch.nn.Module) -> List[Tuple[str, Tensor]]:\n\t            tuples = [(k, v) for k, v in module.__dict__.items() if torch.is_tensor(v)]\n", "            return tuples\n\t        gen = parameter._named_members(get_members_fn=find_tensor_attributes)\n\t        first_tuple = next(gen)\n\t        return first_tuple[1].dtype\n\tdef load_state_dict(checkpoint_file: Union[str, os.PathLike]):\n\t    \"\"\"\n\t    Reads a PyTorch checkpoint file, returning properly formatted errors if they arise.\n\t    \"\"\"\n\t    try:\n\t        return torch.load(checkpoint_file, map_location=\"cpu\")\n", "    except Exception as e:\n\t        try:\n\t            with open(checkpoint_file) as f:\n\t                if f.read().startswith(\"version\"):\n\t                    raise OSError(\n\t                        \"You seem to have cloned a repository without having git-lfs installed. Please install \"\n\t                        \"git-lfs and run `git lfs install` followed by `git lfs pull` in the folder \"\n\t                        \"you cloned.\"\n\t                    )\n\t                else:\n", "                    raise ValueError(\n\t                        f\"Unable to locate the file {checkpoint_file} which is necessary to load this pretrained \"\n\t                        \"model. Make sure you have saved the model properly.\"\n\t                    ) from e\n\t        except (UnicodeDecodeError, ValueError):\n\t            raise OSError(\n\t                f\"Unable to load weights from pytorch checkpoint file for '{checkpoint_file}' \"\n\t                f\"at '{checkpoint_file}'. \"\n\t                \"If you tried to load a PyTorch model from a TF 2.0 checkpoint, please set from_tf=True.\"\n\t            )\n", "def _load_state_dict_into_model(model_to_load, state_dict):\n\t    # Convert old format to new format if needed from a PyTorch state_dict\n\t    # copy state_dict so _load_from_state_dict can modify it\n\t    state_dict = state_dict.copy()\n\t    error_msgs = []\n\t    # PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants\n\t    # so we need to apply the function recursively.\n\t    def load(module: torch.nn.Module, prefix=\"\"):\n\t        args = (state_dict, prefix, {}, True, [], [], error_msgs)\n\t        module._load_from_state_dict(*args)\n", "        for name, child in module._modules.items():\n\t            if child is not None:\n\t                load(child, prefix + name + \".\")\n\t    load(model_to_load)\n\t    return error_msgs\n\tclass ModelMixin(torch.nn.Module):\n\t    r\"\"\"\n\t    Base class for all models.\n\t    [`ModelMixin`] takes care of storing the configuration of the models and handles methods for loading, downloading\n\t    and saving models.\n", "        - **config_name** ([`str`]) -- A filename under which the model should be stored when calling\n\t          [`~modeling_utils.ModelMixin.save_pretrained`].\n\t    \"\"\"\n\t    config_name = CONFIG_NAME\n\t    _automatically_saved_args = [\"_diffusers_version\", \"_class_name\", \"_name_or_path\"]\n\t    _supports_gradient_checkpointing = False\n\t    def __init__(self):\n\t        super().__init__()\n\t    @property\n\t    def is_gradient_checkpointing(self) -> bool:\n", "        \"\"\"\n\t        Whether gradient checkpointing is activated for this model or not.\n\t        Note that in other frameworks this feature can be referred to as \"activation checkpointing\" or \"checkpoint\n\t        activations\".\n\t        \"\"\"\n\t        return any(hasattr(m, \"gradient_checkpointing\") and m.gradient_checkpointing for m in self.modules())\n\t    def enable_gradient_checkpointing(self):\n\t        \"\"\"\n\t        Activates gradient checkpointing for the current model.\n\t        Note that in other frameworks this feature can be referred to as \"activation checkpointing\" or \"checkpoint\n", "        activations\".\n\t        \"\"\"\n\t        if not self._supports_gradient_checkpointing:\n\t            raise ValueError(f\"{self.__class__.__name__} does not support gradient checkpointing.\")\n\t        self.apply(partial(self._set_gradient_checkpointing, value=True))\n\t    def disable_gradient_checkpointing(self):\n\t        \"\"\"\n\t        Deactivates gradient checkpointing for the current model.\n\t        Note that in other frameworks this feature can be referred to as \"activation checkpointing\" or \"checkpoint\n\t        activations\".\n", "        \"\"\"\n\t        if self._supports_gradient_checkpointing:\n\t            self.apply(partial(self._set_gradient_checkpointing, value=False))\n\t    def save_pretrained(\n\t        self,\n\t        save_directory: Union[str, os.PathLike],\n\t        is_main_process: bool = True,\n\t        save_function: Callable = torch.save,\n\t    ):\n\t        \"\"\"\n", "        Save a model and its configuration file to a directory, so that it can be re-loaded using the\n\t        `[`~modeling_utils.ModelMixin.from_pretrained`]` class method.\n\t        Arguments:\n\t            save_directory (`str` or `os.PathLike`):\n\t                Directory to which to save. Will be created if it doesn't exist.\n\t            is_main_process (`bool`, *optional*, defaults to `True`):\n\t                Whether the process calling this is the main process or not. Useful when in distributed training like\n\t                TPUs and need to call this function on all processes. In this case, set `is_main_process=True` only on\n\t                the main process to avoid race conditions.\n\t            save_function (`Callable`):\n", "                The function to use to save the state dictionary. Useful on distributed training like TPUs when one\n\t                need to replace `torch.save` by another method.\n\t        \"\"\"\n\t        if os.path.isfile(save_directory):\n\t            logger.error(f\"Provided path ({save_directory}) should be a directory, not a file\")\n\t            return\n\t        os.makedirs(save_directory, exist_ok=True)\n\t        model_to_save = self\n\t        # Attach architecture to the config\n\t        # Save the config\n", "        if is_main_process:\n\t            model_to_save.save_config(save_directory)\n\t        # Save the model\n\t        state_dict = model_to_save.state_dict()\n\t        # Clean the folder from a previous save\n\t        for filename in os.listdir(save_directory):\n\t            full_filename = os.path.join(save_directory, filename)\n\t            # If we have a shard file that is not going to be replaced, we delete it, but only from the main process\n\t            # in distributed settings to avoid race conditions.\n\t            if filename.startswith(WEIGHTS_NAME[:-4]) and os.path.isfile(full_filename) and is_main_process:\n", "                os.remove(full_filename)\n\t        # Save the model\n\t        save_function(state_dict, os.path.join(save_directory, WEIGHTS_NAME))\n\t        logger.info(f\"Model weights saved in {os.path.join(save_directory, WEIGHTS_NAME)}\")\n\t    @classmethod\n\t    def from_pretrained(cls, pretrained_model_name_or_path: Optional[Union[str, os.PathLike]], **kwargs):\n\t        r\"\"\"\n\t        Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\t        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated). To train\n\t        the model, you should first set it back in training mode with `model.train()`.\n", "        The warning *Weights from XXX not initialized from pretrained model* means that the weights of XXX do not come\n\t        pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning\n\t        task.\n\t        The warning *Weights from XXX not used in YYY* means that the layer XXX is not used by YYY, therefore those\n\t        weights are discarded.\n\t        Parameters:\n\t            pretrained_model_name_or_path (`str` or `os.PathLike`, *optional*):\n\t                Can be either:\n\t                    - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.\n\t                      Valid model ids should have an organization name, like `google/ddpm-celebahq-256`.\n", "                    - A path to a *directory* containing model weights saved using [`~ModelMixin.save_config`], e.g.,\n\t                      `./my_model_directory/`.\n\t            cache_dir (`Union[str, os.PathLike]`, *optional*):\n\t                Path to a directory in which a downloaded pretrained model configuration should be cached if the\n\t                standard cache should not be used.\n\t            torch_dtype (`str` or `torch.dtype`, *optional*):\n\t                Override the default `torch.dtype` and load the model under this dtype. If `\"auto\"` is passed the dtype\n\t                will be automatically derived from the model's weights.\n\t            force_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to force the (re-)download of the model weights and configuration files, overriding the\n", "                cached versions if they exist.\n\t            resume_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to delete incompletely received files. Will attempt to resume the download if such a\n\t                file exists.\n\t            proxies (`Dict[str, str]`, *optional*):\n\t                A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t                'http://hostname': 'foo.bar:4012'}`. The proxies are used on each request.\n\t            output_loading_info(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.\n\t            local_files_only(`bool`, *optional*, defaults to `False`):\n", "                Whether or not to only look at local files (i.e., do not try to download the model).\n\t            use_auth_token (`str` or *bool*, *optional*):\n\t                The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t                when running `diffusers-cli login` (stored in `~/.huggingface`).\n\t            revision (`str`, *optional*, defaults to `\"main\"`):\n\t                The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t                git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t                identifier allowed by git.\n\t            subfolder (`str`, *optional*, defaults to `\"\"`):\n\t                In case the relevant files are located inside a subfolder of the model repo (either remote in\n", "                huggingface.co or downloaded locally), you can specify the folder name here.\n\t            mirror (`str`, *optional*):\n\t                Mirror source to accelerate downloads in China. If you are from China and have an accessibility\n\t                problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.\n\t                Please refer to the mirror site for more information.\n\t            device_map (`str` or `Dict[str, Union[int, str, torch.device]]`, *optional*):\n\t                A map that specifies where each submodule should go. It doesn't need to be refined to each\n\t                parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the\n\t                same device.\n\t                To have Accelerate compute the most optimized `device_map` automatically, set `device_map=\"auto\"`. For\n", "                more information about each option see [designing a device\n\t                map](https://hf.co/docs/accelerate/main/en/usage_guides/big_modeling#designing-a-device-map).\n\t            low_cpu_mem_usage (`bool`, *optional*, defaults to `True` if torch version >= 1.9.0 else `False`):\n\t                Speed up model loading by not initializing the weights and only loading the pre-trained weights. This\n\t                also tries to not use more than 1x model size in CPU memory (including peak memory) while loading the\n\t                model. This is only supported when torch version >= 1.9.0. If you are using an older version of torch,\n\t                setting this argument to `True` will raise an error.\n\t        <Tip>\n\t         It is required to be logged in (`huggingface-cli login`) when you want to use private or [gated\n\t         models](https://huggingface.co/docs/hub/models-gated#gated-models).\n", "        </Tip>\n\t        <Tip>\n\t        Activate the special [\"offline-mode\"](https://huggingface.co/diffusers/installation.html#offline-mode) to use\n\t        this method in a firewalled environment.\n\t        </Tip>\n\t        \"\"\"\n\t        cache_dir = kwargs.pop(\"cache_dir\", DIFFUSERS_CACHE)\n\t        ignore_mismatched_sizes = kwargs.pop(\"ignore_mismatched_sizes\", False)\n\t        force_download = kwargs.pop(\"force_download\", False)\n\t        resume_download = kwargs.pop(\"resume_download\", False)\n", "        proxies = kwargs.pop(\"proxies\", None)\n\t        output_loading_info = kwargs.pop(\"output_loading_info\", False)\n\t        local_files_only = kwargs.pop(\"local_files_only\", False)\n\t        use_auth_token = kwargs.pop(\"use_auth_token\", None)\n\t        revision = kwargs.pop(\"revision\", None)\n\t        torch_dtype = kwargs.pop(\"torch_dtype\", None)\n\t        subfolder = kwargs.pop(\"subfolder\", None)\n\t        device_map = kwargs.pop(\"device_map\", None)\n\t        low_cpu_mem_usage = kwargs.pop(\"low_cpu_mem_usage\", _LOW_CPU_MEM_USAGE_DEFAULT)\n\t        if low_cpu_mem_usage and not is_accelerate_available():\n", "            low_cpu_mem_usage = False\n\t            logger.warning(\n\t                \"Cannot initialize model with low cpu memory usage because `accelerate` was not found in the\"\n\t                \" environment. Defaulting to `low_cpu_mem_usage=False`. It is strongly recommended to install\"\n\t                \" `accelerate` for faster and less memory-intense model loading. You can do so with: \\n```\\npip\"\n\t                \" install accelerate\\n```\\n.\"\n\t            )\n\t        if device_map is not None and not is_accelerate_available():\n\t            raise NotImplementedError(\n\t                \"Loading and dispatching requires `accelerate`. Please make sure to install accelerate or set\"\n", "                \" `device_map=None`. You can install accelerate with `pip install accelerate`.\"\n\t            )\n\t        # Check if we can handle device_map and dispatching the weights\n\t        if device_map is not None and not is_torch_version(\">=\", \"1.9.0\"):\n\t            raise NotImplementedError(\n\t                \"Loading and dispatching requires torch >= 1.9.0. Please either update your PyTorch version or set\"\n\t                \" `device_map=None`.\"\n\t            )\n\t        if low_cpu_mem_usage is True and not is_torch_version(\">=\", \"1.9.0\"):\n\t            raise NotImplementedError(\n", "                \"Low memory initialization requires torch >= 1.9.0. Please either update your PyTorch version or set\"\n\t                \" `low_cpu_mem_usage=False`.\"\n\t            )\n\t        if low_cpu_mem_usage is False and device_map is not None:\n\t            raise ValueError(\n\t                f\"You cannot set `low_cpu_mem_usage` to `False` while using device_map={device_map} for loading and\"\n\t                \" dispatching. Please make sure to set `low_cpu_mem_usage=True`.\"\n\t            )\n\t        user_agent = {\n\t            \"diffusers\": __version__,\n", "            \"file_type\": \"model\",\n\t            \"framework\": \"pytorch\",\n\t        }\n\t        # Load config if we don't provide a configuration\n\t        config_path = pretrained_model_name_or_path\n\t        # This variable will flag if we're loading a sharded checkpoint. In this case the archive file is just the\n\t        # Load model\n\t        pretrained_model_name_or_path = str(pretrained_model_name_or_path)\n\t        if os.path.isdir(pretrained_model_name_or_path):\n\t            if os.path.isfile(os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)):\n", "                # Load from a PyTorch checkpoint\n\t                model_file = os.path.join(pretrained_model_name_or_path, WEIGHTS_NAME)\n\t            elif subfolder is not None and os.path.isfile(\n\t                os.path.join(pretrained_model_name_or_path, subfolder, WEIGHTS_NAME)\n\t            ):\n\t                model_file = os.path.join(pretrained_model_name_or_path, subfolder, WEIGHTS_NAME)\n\t            else:\n\t                raise EnvironmentError(\n\t                    f\"Error no file named {WEIGHTS_NAME} found in directory {pretrained_model_name_or_path}.\"\n\t                )\n", "        else:\n\t            try:\n\t                # Load from URL or cache if already cached\n\t                model_file = hf_hub_download(\n\t                    pretrained_model_name_or_path,\n\t                    filename=WEIGHTS_NAME,\n\t                    cache_dir=cache_dir,\n\t                    force_download=force_download,\n\t                    proxies=proxies,\n\t                    resume_download=resume_download,\n", "                    local_files_only=local_files_only,\n\t                    use_auth_token=use_auth_token,\n\t                    user_agent=user_agent,\n\t                    subfolder=subfolder,\n\t                    revision=revision,\n\t                )\n\t            except RepositoryNotFoundError:\n\t                raise EnvironmentError(\n\t                    f\"{pretrained_model_name_or_path} is not a local folder and is not a valid model identifier \"\n\t                    \"listed on 'https://huggingface.co/models'\\nIf this is a private repository, make sure to pass a \"\n", "                    \"token having permission to this repo with `use_auth_token` or log in with `huggingface-cli \"\n\t                    \"login`.\"\n\t                )\n\t            except RevisionNotFoundError:\n\t                raise EnvironmentError(\n\t                    f\"{revision} is not a valid git identifier (branch name, tag name or commit id) that exists for \"\n\t                    \"this model name. Check the model page at \"\n\t                    f\"'https://huggingface.co/{pretrained_model_name_or_path}' for available revisions.\"\n\t                )\n\t            except EntryNotFoundError:\n", "                raise EnvironmentError(\n\t                    f\"{pretrained_model_name_or_path} does not appear to have a file named {WEIGHTS_NAME}.\"\n\t                )\n\t            except HTTPError as err:\n\t                raise EnvironmentError(\n\t                    \"There was a specific connection error when trying to load\"\n\t                    f\" {pretrained_model_name_or_path}:\\n{err}\"\n\t                )\n\t            except ValueError:\n\t                raise EnvironmentError(\n", "                    f\"We couldn't connect to '{HUGGINGFACE_CO_RESOLVE_ENDPOINT}' to load this model, couldn't find it\"\n\t                    f\" in the cached files and it looks like {pretrained_model_name_or_path} is not the path to a\"\n\t                    f\" directory containing a file named {WEIGHTS_NAME} or\"\n\t                    \" \\nCheckout your internet connection or see how to run the library in\"\n\t                    \" offline mode at 'https://huggingface.co/docs/diffusers/installation#offline-mode'.\"\n\t                )\n\t            except EnvironmentError:\n\t                raise EnvironmentError(\n\t                    f\"Can't load the model for '{pretrained_model_name_or_path}'. If you were trying to load it from \"\n\t                    \"'https://huggingface.co/models', make sure you don't have a local directory with the same name. \"\n", "                    f\"Otherwise, make sure '{pretrained_model_name_or_path}' is the correct path to a directory \"\n\t                    f\"containing a file named {WEIGHTS_NAME}\"\n\t                )\n\t            # restore default dtype\n\t        if low_cpu_mem_usage:\n\t            # Instantiate model with empty weights\n\t            with accelerate.init_empty_weights():\n\t                config, unused_kwargs = cls.load_config(\n\t                    config_path,\n\t                    cache_dir=cache_dir,\n", "                    return_unused_kwargs=True,\n\t                    force_download=force_download,\n\t                    resume_download=resume_download,\n\t                    proxies=proxies,\n\t                    local_files_only=local_files_only,\n\t                    use_auth_token=use_auth_token,\n\t                    revision=revision,\n\t                    subfolder=subfolder,\n\t                    device_map=device_map,\n\t                    **kwargs,\n", "                )\n\t                model = cls.from_config(config, **unused_kwargs)\n\t            # if device_map is Non,e load the state dict on move the params from meta device to the cpu\n\t            if device_map is None:\n\t                param_device = \"cpu\"\n\t                state_dict = load_state_dict(model_file)\n\t                # move the parms from meta device to cpu\n\t                for param_name, param in state_dict.items():\n\t                    set_module_tensor_to_device(model, param_name, param_device, value=param)\n\t            else:  # else let accelerate handle loading and dispatching.\n", "                # Load weights and dispatch according to the device_map\n\t                # by deafult the device_map is None and the weights are loaded on the CPU\n\t                accelerate.load_checkpoint_and_dispatch(model, model_file, device_map)\n\t            loading_info = {\n\t                \"missing_keys\": [],\n\t                \"unexpected_keys\": [],\n\t                \"mismatched_keys\": [],\n\t                \"error_msgs\": [],\n\t            }\n\t        else:\n", "            config, unused_kwargs = cls.load_config(\n\t                config_path,\n\t                cache_dir=cache_dir,\n\t                return_unused_kwargs=True,\n\t                force_download=force_download,\n\t                resume_download=resume_download,\n\t                proxies=proxies,\n\t                local_files_only=local_files_only,\n\t                use_auth_token=use_auth_token,\n\t                revision=revision,\n", "                subfolder=subfolder,\n\t                device_map=device_map,\n\t                **kwargs,\n\t            )\n\t            model = cls.from_config(config, **unused_kwargs)\n\t            state_dict = load_state_dict(model_file)\n\t            model, missing_keys, unexpected_keys, mismatched_keys, error_msgs = cls._load_pretrained_model(\n\t                model,\n\t                state_dict,\n\t                model_file,\n", "                pretrained_model_name_or_path,\n\t                ignore_mismatched_sizes=ignore_mismatched_sizes,\n\t            )\n\t            loading_info = {\n\t                \"missing_keys\": missing_keys,\n\t                \"unexpected_keys\": unexpected_keys,\n\t                \"mismatched_keys\": mismatched_keys,\n\t                \"error_msgs\": error_msgs,\n\t            }\n\t        if torch_dtype is not None and not isinstance(torch_dtype, torch.dtype):\n", "            raise ValueError(\n\t                f\"{torch_dtype} needs to be of type `torch.dtype`, e.g. `torch.float16`, but is {type(torch_dtype)}.\"\n\t            )\n\t        elif torch_dtype is not None:\n\t            model = model.to(torch_dtype)\n\t        model.register_to_config(_name_or_path=pretrained_model_name_or_path)\n\t        # Set model in evaluation mode to deactivate DropOut modules by default\n\t        model.eval()\n\t        if output_loading_info:\n\t            return model, loading_info\n", "        return model\n\t    @classmethod\n\t    def _load_pretrained_model(\n\t        cls,\n\t        model,\n\t        state_dict,\n\t        resolved_archive_file,\n\t        pretrained_model_name_or_path,\n\t        ignore_mismatched_sizes=False,\n\t    ):\n", "        # Retrieve missing & unexpected_keys\n\t        model_state_dict = model.state_dict()\n\t        loaded_keys = [k for k in state_dict.keys()]\n\t        expected_keys = list(model_state_dict.keys())\n\t        original_loaded_keys = loaded_keys\n\t        missing_keys = list(set(expected_keys) - set(loaded_keys))\n\t        unexpected_keys = list(set(loaded_keys) - set(expected_keys))\n\t        # Make sure we are able to load base models as well as derived models (with heads)\n\t        model_to_load = model\n\t        def _find_mismatched_keys(\n", "            state_dict,\n\t            model_state_dict,\n\t            loaded_keys,\n\t            ignore_mismatched_sizes,\n\t        ):\n\t            mismatched_keys = []\n\t            if ignore_mismatched_sizes:\n\t                for checkpoint_key in loaded_keys:\n\t                    model_key = checkpoint_key\n\t                    if (\n", "                        model_key in model_state_dict\n\t                        and state_dict[checkpoint_key].shape != model_state_dict[model_key].shape\n\t                    ):\n\t                        mismatched_keys.append(\n\t                            (checkpoint_key, state_dict[checkpoint_key].shape, model_state_dict[model_key].shape)\n\t                        )\n\t                        del state_dict[checkpoint_key]\n\t            return mismatched_keys\n\t        if state_dict is not None:\n\t            # Whole checkpoint\n", "            mismatched_keys = _find_mismatched_keys(\n\t                state_dict,\n\t                model_state_dict,\n\t                original_loaded_keys,\n\t                ignore_mismatched_sizes,\n\t            )\n\t            error_msgs = _load_state_dict_into_model(model_to_load, state_dict)\n\t        if len(error_msgs) > 0:\n\t            error_msg = \"\\n\\t\".join(error_msgs)\n\t            if \"size mismatch\" in error_msg:\n", "                error_msg += (\n\t                    \"\\n\\tYou may consider adding `ignore_mismatched_sizes=True` in the model `from_pretrained` method.\"\n\t                )\n\t            raise RuntimeError(f\"Error(s) in loading state_dict for {model.__class__.__name__}:\\n\\t{error_msg}\")\n\t        if len(unexpected_keys) > 0:\n\t            logger.warning(\n\t                f\"Some weights of the model checkpoint at {pretrained_model_name_or_path} were not used when\"\n\t                f\" initializing {model.__class__.__name__}: {unexpected_keys}\\n- This IS expected if you are\"\n\t                f\" initializing {model.__class__.__name__} from the checkpoint of a model trained on another task\"\n\t                \" or with another architecture (e.g. initializing a BertForSequenceClassification model from a\"\n", "                \" BertForPreTraining model).\\n- This IS NOT expected if you are initializing\"\n\t                f\" {model.__class__.__name__} from the checkpoint of a model that you expect to be exactly\"\n\t                \" identical (initializing a BertForSequenceClassification model from a\"\n\t                \" BertForSequenceClassification model).\"\n\t            )\n\t        else:\n\t            logger.info(f\"All model checkpoint weights were used when initializing {model.__class__.__name__}.\\n\")\n\t        if len(missing_keys) > 0:\n\t            logger.warning(\n\t                f\"Some weights of {model.__class__.__name__} were not initialized from the model checkpoint at\"\n", "                f\" {pretrained_model_name_or_path} and are newly initialized: {missing_keys}\\nYou should probably\"\n\t                \" TRAIN this model on a down-stream task to be able to use it for predictions and inference.\"\n\t            )\n\t        elif len(mismatched_keys) == 0:\n\t            logger.info(\n\t                f\"All the weights of {model.__class__.__name__} were initialized from the model checkpoint at\"\n\t                f\" {pretrained_model_name_or_path}.\\nIf your task is similar to the task the model of the\"\n\t                f\" checkpoint was trained on, you can already use {model.__class__.__name__} for predictions\"\n\t                \" without further training.\"\n\t            )\n", "        if len(mismatched_keys) > 0:\n\t            mismatched_warning = \"\\n\".join(\n\t                [\n\t                    f\"- {key}: found shape {shape1} in the checkpoint and {shape2} in the model instantiated\"\n\t                    for key, shape1, shape2 in mismatched_keys\n\t                ]\n\t            )\n\t            logger.warning(\n\t                f\"Some weights of {model.__class__.__name__} were not initialized from the model checkpoint at\"\n\t                f\" {pretrained_model_name_or_path} and are newly initialized because the shapes did not\"\n", "                f\" match:\\n{mismatched_warning}\\nYou should probably TRAIN this model on a down-stream task to be\"\n\t                \" able to use it for predictions and inference.\"\n\t            )\n\t        return model, missing_keys, unexpected_keys, mismatched_keys, error_msgs\n\t    @property\n\t    def device(self) -> device:\n\t        \"\"\"\n\t        `torch.device`: The device on which the module is (assuming that all the module parameters are on the same\n\t        device).\n\t        \"\"\"\n", "        return get_parameter_device(self)\n\t    @property\n\t    def dtype(self) -> torch.dtype:\n\t        \"\"\"\n\t        `torch.dtype`: The dtype of the module (assuming that all the module parameters have the same dtype).\n\t        \"\"\"\n\t        return get_parameter_dtype(self)\n\t    def num_parameters(self, only_trainable: bool = False, exclude_embeddings: bool = False) -> int:\n\t        \"\"\"\n\t        Get number of (optionally, trainable or non-embeddings) parameters in the module.\n", "        Args:\n\t            only_trainable (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to return only the number of trainable parameters\n\t            exclude_embeddings (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to return only the number of non-embeddings parameters\n\t        Returns:\n\t            `int`: The number of parameters.\n\t        \"\"\"\n\t        if exclude_embeddings:\n\t            embedding_param_names = [\n", "                f\"{name}.weight\"\n\t                for name, module_type in self.named_modules()\n\t                if isinstance(module_type, torch.nn.Embedding)\n\t            ]\n\t            non_embedding_parameters = [\n\t                parameter for name, parameter in self.named_parameters() if name not in embedding_param_names\n\t            ]\n\t            return sum(p.numel() for p in non_embedding_parameters if p.requires_grad or not only_trainable)\n\t        else:\n\t            return sum(p.numel() for p in self.parameters() if p.requires_grad or not only_trainable)\n", "def unwrap_model(model: torch.nn.Module) -> torch.nn.Module:\n\t    \"\"\"\n\t    Recursively unwraps a model from potential containers (as used in distributed training).\n\t    Args:\n\t        model (`torch.nn.Module`): The model to unwrap.\n\t    \"\"\"\n\t    # since there could be multiple levels of wrapping, unwrap recursively\n\t    if hasattr(model, \"module\"):\n\t        return unwrap_model(model.module)\n\t    else:\n", "        return model\n"]}
{"filename": "diffusers_/hub_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 The HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\timport shutil\n\timport sys\n\tfrom pathlib import Path\n\tfrom typing import Dict, Optional, Union\n\tfrom uuid import uuid4\n", "from huggingface_hub import HfFolder, Repository, whoami\n\tfrom . import __version__\n\tfrom .utils import ENV_VARS_TRUE_VALUES, deprecate, logging\n\tfrom .utils.import_utils import (\n\t    _flax_version,\n\t    _jax_version,\n\t    _onnxruntime_version,\n\t    _torch_version,\n\t    is_flax_available,\n\t    is_modelcards_available,\n", "    is_onnx_available,\n\t    is_torch_available,\n\t)\n\tif is_modelcards_available():\n\t    from modelcards import CardData, ModelCard\n\tlogger = logging.get_logger(__name__)\n\tMODEL_CARD_TEMPLATE_PATH = Path(__file__).parent / \"utils\" / \"model_card_template.md\"\n\tSESSION_ID = uuid4().hex\n\tDISABLE_TELEMETRY = os.getenv(\"DISABLE_TELEMETRY\", \"\").upper() in ENV_VARS_TRUE_VALUES\n\tdef http_user_agent(user_agent: Union[Dict, str, None] = None) -> str:\n", "    \"\"\"\n\t    Formats a user-agent string with basic info about a request.\n\t    \"\"\"\n\t    ua = f\"diffusers/{__version__}; python/{sys.version.split()[0]}; session_id/{SESSION_ID}\"\n\t    if DISABLE_TELEMETRY:\n\t        return ua + \"; telemetry/off\"\n\t    if is_torch_available():\n\t        ua += f\"; torch/{_torch_version}\"\n\t    if is_flax_available():\n\t        ua += f\"; jax/{_jax_version}\"\n", "        ua += f\"; flax/{_flax_version}\"\n\t    if is_onnx_available():\n\t        ua += f\"; onnxruntime/{_onnxruntime_version}\"\n\t    # CI will set this value to True\n\t    if os.environ.get(\"DIFFUSERS_IS_CI\", \"\").upper() in ENV_VARS_TRUE_VALUES:\n\t        ua += \"; is_ci/true\"\n\t    if isinstance(user_agent, dict):\n\t        ua += \"; \" + \"; \".join(f\"{k}/{v}\" for k, v in user_agent.items())\n\t    elif isinstance(user_agent, str):\n\t        ua += \"; \" + user_agent\n", "    return ua\n\tdef get_full_repo_name(model_id: str, organization: Optional[str] = None, token: Optional[str] = None):\n\t    if token is None:\n\t        token = HfFolder.get_token()\n\t    if organization is None:\n\t        username = whoami(token)[\"name\"]\n\t        return f\"{username}/{model_id}\"\n\t    else:\n\t        return f\"{organization}/{model_id}\"\n\tdef init_git_repo(args, at_init: bool = False):\n", "    \"\"\"\n\t    Args:\n\t    Initializes a git repo in `args.hub_model_id`.\n\t        at_init (`bool`, *optional*, defaults to `False`):\n\t            Whether this function is called before any training or not. If `self.args.overwrite_output_dir` is `True`\n\t            and `at_init` is `True`, the path to the repo (which is `self.args.output_dir`) might be wiped out.\n\t    \"\"\"\n\t    deprecation_message = (\n\t        \"Please use `huggingface_hub.Repository`. \"\n\t        \"See `examples/unconditional_image_generation/train_unconditional.py` for an example.\"\n", "    )\n\t    deprecate(\"init_git_repo()\", \"0.10.0\", deprecation_message)\n\t    if hasattr(args, \"local_rank\") and args.local_rank not in [-1, 0]:\n\t        return\n\t    hub_token = args.hub_token if hasattr(args, \"hub_token\") else None\n\t    use_auth_token = True if hub_token is None else hub_token\n\t    if not hasattr(args, \"hub_model_id\") or args.hub_model_id is None:\n\t        repo_name = Path(args.output_dir).absolute().name\n\t    else:\n\t        repo_name = args.hub_model_id\n", "    if \"/\" not in repo_name:\n\t        repo_name = get_full_repo_name(repo_name, token=hub_token)\n\t    try:\n\t        repo = Repository(\n\t            args.output_dir,\n\t            clone_from=repo_name,\n\t            use_auth_token=use_auth_token,\n\t            private=args.hub_private_repo,\n\t        )\n\t    except EnvironmentError:\n", "        if args.overwrite_output_dir and at_init:\n\t            # Try again after wiping output_dir\n\t            shutil.rmtree(args.output_dir)\n\t            repo = Repository(\n\t                args.output_dir,\n\t                clone_from=repo_name,\n\t                use_auth_token=use_auth_token,\n\t            )\n\t        else:\n\t            raise\n", "    repo.git_pull()\n\t    # By default, ignore the checkpoint folders\n\t    if not os.path.exists(os.path.join(args.output_dir, \".gitignore\")):\n\t        with open(os.path.join(args.output_dir, \".gitignore\"), \"w\", encoding=\"utf-8\") as writer:\n\t            writer.writelines([\"checkpoint-*/\"])\n\t    return repo\n\tdef push_to_hub(\n\t    args,\n\t    pipeline,\n\t    repo: Repository,\n", "    commit_message: Optional[str] = \"End of training\",\n\t    blocking: bool = True,\n\t    **kwargs,\n\t) -> str:\n\t    \"\"\"\n\t    Parameters:\n\t    Upload *self.model* and *self.tokenizer* to the 🤗 model hub on the repo *self.args.hub_model_id*.\n\t        commit_message (`str`, *optional*, defaults to `\"End of training\"`):\n\t            Message to commit while pushing.\n\t        blocking (`bool`, *optional*, defaults to `True`):\n", "            Whether the function should return only when the `git push` has finished.\n\t        kwargs:\n\t            Additional keyword arguments passed along to [`create_model_card`].\n\t    Returns:\n\t        The url of the commit of your model in the given repository if `blocking=False`, a tuple with the url of the\n\t        commit and an object to track the progress of the commit if `blocking=True`\n\t    \"\"\"\n\t    deprecation_message = (\n\t        \"Please use `huggingface_hub.Repository` and `Repository.push_to_hub()`. \"\n\t        \"See `examples/unconditional_image_generation/train_unconditional.py` for an example.\"\n", "    )\n\t    deprecate(\"push_to_hub()\", \"0.10.0\", deprecation_message)\n\t    if not hasattr(args, \"hub_model_id\") or args.hub_model_id is None:\n\t        model_name = Path(args.output_dir).name\n\t    else:\n\t        model_name = args.hub_model_id.split(\"/\")[-1]\n\t    output_dir = args.output_dir\n\t    os.makedirs(output_dir, exist_ok=True)\n\t    logger.info(f\"Saving pipeline checkpoint to {output_dir}\")\n\t    pipeline.save_pretrained(output_dir)\n", "    # Only push from one node.\n\t    if hasattr(args, \"local_rank\") and args.local_rank not in [-1, 0]:\n\t        return\n\t    # Cancel any async push in progress if blocking=True. The commits will all be pushed together.\n\t    if (\n\t        blocking\n\t        and len(repo.command_queue) > 0\n\t        and repo.command_queue[-1] is not None\n\t        and not repo.command_queue[-1].is_done\n\t    ):\n", "        repo.command_queue[-1]._process.kill()\n\t    git_head_commit_url = repo.push_to_hub(commit_message=commit_message, blocking=blocking, auto_lfs_prune=True)\n\t    # push separately the model card to be independent from the rest of the model\n\t    create_model_card(args, model_name=model_name)\n\t    try:\n\t        repo.push_to_hub(commit_message=\"update model card README.md\", blocking=blocking, auto_lfs_prune=True)\n\t    except EnvironmentError as exc:\n\t        logger.error(f\"Error pushing update to the model card. Please read logs and retry.\\n${exc}\")\n\t    return git_head_commit_url\n\tdef create_model_card(args, model_name):\n", "    if not is_modelcards_available:\n\t        raise ValueError(\n\t            \"Please make sure to have `modelcards` installed when using the `create_model_card` function. You can\"\n\t            \" install the package with `pip install modelcards`.\"\n\t        )\n\t    if hasattr(args, \"local_rank\") and args.local_rank not in [-1, 0]:\n\t        return\n\t    hub_token = args.hub_token if hasattr(args, \"hub_token\") else None\n\t    repo_name = get_full_repo_name(model_name, token=hub_token)\n\t    model_card = ModelCard.from_template(\n", "        card_data=CardData(  # Card metadata object that will be converted to YAML block\n\t            language=\"en\",\n\t            license=\"apache-2.0\",\n\t            library_name=\"diffusers\",\n\t            tags=[],\n\t            datasets=args.dataset_name,\n\t            metrics=[],\n\t        ),\n\t        template_path=MODEL_CARD_TEMPLATE_PATH,\n\t        model_name=model_name,\n", "        repo_name=repo_name,\n\t        dataset_name=args.dataset_name if hasattr(args, \"dataset_name\") else None,\n\t        learning_rate=args.learning_rate,\n\t        train_batch_size=args.train_batch_size,\n\t        eval_batch_size=args.eval_batch_size,\n\t        gradient_accumulation_steps=args.gradient_accumulation_steps\n\t        if hasattr(args, \"gradient_accumulation_steps\")\n\t        else None,\n\t        adam_beta1=args.adam_beta1 if hasattr(args, \"adam_beta1\") else None,\n\t        adam_beta2=args.adam_beta2 if hasattr(args, \"adam_beta2\") else None,\n", "        adam_weight_decay=args.adam_weight_decay if hasattr(args, \"adam_weight_decay\") else None,\n\t        adam_epsilon=args.adam_epsilon if hasattr(args, \"adam_epsilon\") else None,\n\t        lr_scheduler=args.lr_scheduler if hasattr(args, \"lr_scheduler\") else None,\n\t        lr_warmup_steps=args.lr_warmup_steps if hasattr(args, \"lr_warmup_steps\") else None,\n\t        ema_inv_gamma=args.ema_inv_gamma if hasattr(args, \"ema_inv_gamma\") else None,\n\t        ema_power=args.ema_power if hasattr(args, \"ema_power\") else None,\n\t        ema_max_decay=args.ema_max_decay if hasattr(args, \"ema_max_decay\") else None,\n\t        mixed_precision=args.mixed_precision,\n\t    )\n\t    card_path = os.path.join(args.output_dir, \"README.md\")\n", "    model_card.save(card_path)\n"]}
{"filename": "diffusers_/dynamic_modules_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 The HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Utilities to dynamically load objects from the Hub.\"\"\"\n\timport importlib\n\timport inspect\n\timport os\n\timport re\n\timport shutil\n", "import sys\n\tfrom pathlib import Path\n\tfrom typing import Dict, Optional, Union\n\tfrom huggingface_hub import HfFolder, cached_download, hf_hub_download, model_info\n\tfrom .utils import DIFFUSERS_DYNAMIC_MODULE_NAME, HF_MODULES_CACHE, logging\n\tCOMMUNITY_PIPELINES_URL = (\n\t    \"https://raw.githubusercontent.com/huggingface/diffusers/main/examples/community/{pipeline}.py\"\n\t)\n\tlogger = logging.get_logger(__name__)  # pylint: disable=invalid-name\n\tdef init_hf_modules():\n", "    \"\"\"\n\t    Creates the cache directory for modules with an init, and adds it to the Python path.\n\t    \"\"\"\n\t    # This function has already been executed if HF_MODULES_CACHE already is in the Python path.\n\t    if HF_MODULES_CACHE in sys.path:\n\t        return\n\t    sys.path.append(HF_MODULES_CACHE)\n\t    os.makedirs(HF_MODULES_CACHE, exist_ok=True)\n\t    init_path = Path(HF_MODULES_CACHE) / \"__init__.py\"\n\t    if not init_path.exists():\n", "        init_path.touch()\n\tdef create_dynamic_module(name: Union[str, os.PathLike]):\n\t    \"\"\"\n\t    Creates a dynamic module in the cache directory for modules.\n\t    \"\"\"\n\t    init_hf_modules()\n\t    dynamic_module_path = Path(HF_MODULES_CACHE) / name\n\t    # If the parent module does not exist yet, recursively create it.\n\t    if not dynamic_module_path.parent.exists():\n\t        create_dynamic_module(dynamic_module_path.parent)\n", "    os.makedirs(dynamic_module_path, exist_ok=True)\n\t    init_path = dynamic_module_path / \"__init__.py\"\n\t    if not init_path.exists():\n\t        init_path.touch()\n\tdef get_relative_imports(module_file):\n\t    \"\"\"\n\t    Get the list of modules that are relatively imported in a module file.\n\t    Args:\n\t        module_file (`str` or `os.PathLike`): The module file to inspect.\n\t    \"\"\"\n", "    with open(module_file, \"r\", encoding=\"utf-8\") as f:\n\t        content = f.read()\n\t    # Imports of the form `import .xxx`\n\t    relative_imports = re.findall(\"^\\s*import\\s+\\.(\\S+)\\s*$\", content, flags=re.MULTILINE)\n\t    # Imports of the form `from .xxx import yyy`\n\t    relative_imports += re.findall(\"^\\s*from\\s+\\.(\\S+)\\s+import\", content, flags=re.MULTILINE)\n\t    # Unique-ify\n\t    return list(set(relative_imports))\n\tdef get_relative_import_files(module_file):\n\t    \"\"\"\n", "    Get the list of all files that are needed for a given module. Note that this function recurses through the relative\n\t    imports (if a imports b and b imports c, it will return module files for b and c).\n\t    Args:\n\t        module_file (`str` or `os.PathLike`): The module file to inspect.\n\t    \"\"\"\n\t    no_change = False\n\t    files_to_check = [module_file]\n\t    all_relative_imports = []\n\t    # Let's recurse through all relative imports\n\t    while not no_change:\n", "        new_imports = []\n\t        for f in files_to_check:\n\t            new_imports.extend(get_relative_imports(f))\n\t        module_path = Path(module_file).parent\n\t        new_import_files = [str(module_path / m) for m in new_imports]\n\t        new_import_files = [f for f in new_import_files if f not in all_relative_imports]\n\t        files_to_check = [f\"{f}.py\" for f in new_import_files]\n\t        no_change = len(new_import_files) == 0\n\t        all_relative_imports.extend(files_to_check)\n\t    return all_relative_imports\n", "def check_imports(filename):\n\t    \"\"\"\n\t    Check if the current Python environment contains all the libraries that are imported in a file.\n\t    \"\"\"\n\t    with open(filename, \"r\", encoding=\"utf-8\") as f:\n\t        content = f.read()\n\t    # Imports of the form `import xxx`\n\t    imports = re.findall(\"^\\s*import\\s+(\\S+)\\s*$\", content, flags=re.MULTILINE)\n\t    # Imports of the form `from xxx import yyy`\n\t    imports += re.findall(\"^\\s*from\\s+(\\S+)\\s+import\", content, flags=re.MULTILINE)\n", "    # Only keep the top-level module\n\t    imports = [imp.split(\".\")[0] for imp in imports if not imp.startswith(\".\")]\n\t    # Unique-ify and test we got them all\n\t    imports = list(set(imports))\n\t    missing_packages = []\n\t    for imp in imports:\n\t        try:\n\t            importlib.import_module(imp)\n\t        except ImportError:\n\t            missing_packages.append(imp)\n", "    if len(missing_packages) > 0:\n\t        raise ImportError(\n\t            \"This modeling file requires the following packages that were not found in your environment: \"\n\t            f\"{', '.join(missing_packages)}. Run `pip install {' '.join(missing_packages)}`\"\n\t        )\n\t    return get_relative_imports(filename)\n\tdef get_class_in_module(class_name, module_path):\n\t    \"\"\"\n\t    Import a module on the cache directory for modules and extract a class from it.\n\t    \"\"\"\n", "    module_path = module_path.replace(os.path.sep, \".\")\n\t    module = importlib.import_module(module_path)\n\t    if class_name is None:\n\t        return find_pipeline_class(module)\n\t    return getattr(module, class_name)\n\tdef find_pipeline_class(loaded_module):\n\t    \"\"\"\n\t    Retrieve pipeline class that inherits from `DiffusionPipeline`. Note that there has to be exactly one class\n\t    inheriting from `DiffusionPipeline`.\n\t    \"\"\"\n", "    from .pipeline_utils import DiffusionPipeline\n\t    cls_members = dict(inspect.getmembers(loaded_module, inspect.isclass))\n\t    pipeline_class = None\n\t    for cls_name, cls in cls_members.items():\n\t        if (\n\t            cls_name != DiffusionPipeline.__name__\n\t            and issubclass(cls, DiffusionPipeline)\n\t            and cls.__module__.split(\".\")[0] != \"diffusers\"\n\t        ):\n\t            if pipeline_class is not None:\n", "                raise ValueError(\n\t                    f\"Multiple classes that inherit from {DiffusionPipeline.__name__} have been found:\"\n\t                    f\" {pipeline_class.__name__}, and {cls_name}. Please make sure to define only one in\"\n\t                    f\" {loaded_module}.\"\n\t                )\n\t            pipeline_class = cls\n\t    return pipeline_class\n\tdef get_cached_module_file(\n\t    pretrained_model_name_or_path: Union[str, os.PathLike],\n\t    module_file: str,\n", "    cache_dir: Optional[Union[str, os.PathLike]] = None,\n\t    force_download: bool = False,\n\t    resume_download: bool = False,\n\t    proxies: Optional[Dict[str, str]] = None,\n\t    use_auth_token: Optional[Union[bool, str]] = None,\n\t    revision: Optional[str] = None,\n\t    local_files_only: bool = False,\n\t):\n\t    \"\"\"\n\t    Prepares Downloads a module from a local folder or a distant repo and returns its path inside the cached\n", "    Transformers module.\n\t    Args:\n\t        pretrained_model_name_or_path (`str` or `os.PathLike`):\n\t            This can be either:\n\t            - a string, the *model id* of a pretrained model configuration hosted inside a model repo on\n\t              huggingface.co. Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced\n\t              under a user or organization name, like `dbmdz/bert-base-german-cased`.\n\t            - a path to a *directory* containing a configuration file saved using the\n\t              [`~PreTrainedTokenizer.save_pretrained`] method, e.g., `./my_model_directory/`.\n\t        module_file (`str`):\n", "            The name of the module file containing the class to look for.\n\t        cache_dir (`str` or `os.PathLike`, *optional*):\n\t            Path to a directory in which a downloaded pretrained model configuration should be cached if the standard\n\t            cache should not be used.\n\t        force_download (`bool`, *optional*, defaults to `False`):\n\t            Whether or not to force to (re-)download the configuration files and override the cached versions if they\n\t            exist.\n\t        resume_download (`bool`, *optional*, defaults to `False`):\n\t            Whether or not to delete incompletely received file. Attempts to resume the download if such a file exists.\n\t        proxies (`Dict[str, str]`, *optional*):\n", "            A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t            'http://hostname': 'foo.bar:4012'}.` The proxies are used on each request.\n\t        use_auth_token (`str` or *bool*, *optional*):\n\t            The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t            when running `transformers-cli login` (stored in `~/.huggingface`).\n\t        revision (`str`, *optional*, defaults to `\"main\"`):\n\t            The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t            git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t            identifier allowed by git.\n\t        local_files_only (`bool`, *optional*, defaults to `False`):\n", "            If `True`, will only try to load the tokenizer configuration from local files.\n\t    <Tip>\n\t    You may pass a token in `use_auth_token` if you are not logged in (`huggingface-cli long`) and want to use private\n\t    or [gated models](https://huggingface.co/docs/hub/models-gated#gated-models).\n\t    </Tip>\n\t    Returns:\n\t        `str`: The path to the module inside the cache.\n\t    \"\"\"\n\t    # Download and cache module_file from the repo `pretrained_model_name_or_path` of grab it if it's a local file.\n\t    pretrained_model_name_or_path = str(pretrained_model_name_or_path)\n", "    module_file_or_url = os.path.join(pretrained_model_name_or_path, module_file)\n\t    if os.path.isfile(module_file_or_url):\n\t        resolved_module_file = module_file_or_url\n\t        submodule = \"local\"\n\t    elif pretrained_model_name_or_path.count(\"/\") == 0:\n\t        # community pipeline on GitHub\n\t        github_url = COMMUNITY_PIPELINES_URL.format(pipeline=pretrained_model_name_or_path)\n\t        try:\n\t            resolved_module_file = cached_download(\n\t                github_url,\n", "                cache_dir=cache_dir,\n\t                force_download=force_download,\n\t                proxies=proxies,\n\t                resume_download=resume_download,\n\t                local_files_only=local_files_only,\n\t                use_auth_token=False,\n\t            )\n\t            submodule = \"git\"\n\t            module_file = pretrained_model_name_or_path + \".py\"\n\t        except EnvironmentError:\n", "            logger.error(f\"Could not locate the {module_file} inside {pretrained_model_name_or_path}.\")\n\t            raise\n\t    else:\n\t        try:\n\t            # Load from URL or cache if already cached\n\t            resolved_module_file = hf_hub_download(\n\t                pretrained_model_name_or_path,\n\t                module_file,\n\t                cache_dir=cache_dir,\n\t                force_download=force_download,\n", "                proxies=proxies,\n\t                resume_download=resume_download,\n\t                local_files_only=local_files_only,\n\t                use_auth_token=use_auth_token,\n\t            )\n\t            submodule = os.path.join(\"local\", \"--\".join(pretrained_model_name_or_path.split(\"/\")))\n\t        except EnvironmentError:\n\t            logger.error(f\"Could not locate the {module_file} inside {pretrained_model_name_or_path}.\")\n\t            raise\n\t    # Check we have all the requirements in our environment\n", "    modules_needed = check_imports(resolved_module_file)\n\t    # Now we move the module inside our cached dynamic modules.\n\t    full_submodule = DIFFUSERS_DYNAMIC_MODULE_NAME + os.path.sep + submodule\n\t    create_dynamic_module(full_submodule)\n\t    submodule_path = Path(HF_MODULES_CACHE) / full_submodule\n\t    if submodule == \"local\" or submodule == \"git\":\n\t        # We always copy local files (we could hash the file to see if there was a change, and give them the name of\n\t        # that hash, to only copy when there is a modification but it seems overkill for now).\n\t        # The only reason we do the copy is to avoid putting too many folders in sys.path.\n\t        shutil.copy(resolved_module_file, submodule_path / module_file)\n", "        for module_needed in modules_needed:\n\t            module_needed = f\"{module_needed}.py\"\n\t            shutil.copy(os.path.join(pretrained_model_name_or_path, module_needed), submodule_path / module_needed)\n\t    else:\n\t        # Get the commit hash\n\t        # TODO: we will get this info in the etag soon, so retrieve it from there and not here.\n\t        if isinstance(use_auth_token, str):\n\t            token = use_auth_token\n\t        elif use_auth_token is True:\n\t            token = HfFolder.get_token()\n", "        else:\n\t            token = None\n\t        commit_hash = model_info(pretrained_model_name_or_path, revision=revision, token=token).sha\n\t        # The module file will end up being placed in a subfolder with the git hash of the repo. This way we get the\n\t        # benefit of versioning.\n\t        submodule_path = submodule_path / commit_hash\n\t        full_submodule = full_submodule + os.path.sep + commit_hash\n\t        create_dynamic_module(full_submodule)\n\t        if not (submodule_path / module_file).exists():\n\t            shutil.copy(resolved_module_file, submodule_path / module_file)\n", "        # Make sure we also have every file with relative\n\t        for module_needed in modules_needed:\n\t            if not (submodule_path / module_needed).exists():\n\t                get_cached_module_file(\n\t                    pretrained_model_name_or_path,\n\t                    f\"{module_needed}.py\",\n\t                    cache_dir=cache_dir,\n\t                    force_download=force_download,\n\t                    resume_download=resume_download,\n\t                    proxies=proxies,\n", "                    use_auth_token=use_auth_token,\n\t                    revision=revision,\n\t                    local_files_only=local_files_only,\n\t                )\n\t    return os.path.join(full_submodule, module_file)\n\tdef get_class_from_dynamic_module(\n\t    pretrained_model_name_or_path: Union[str, os.PathLike],\n\t    module_file: str,\n\t    class_name: Optional[str] = None,\n\t    cache_dir: Optional[Union[str, os.PathLike]] = None,\n", "    force_download: bool = False,\n\t    resume_download: bool = False,\n\t    proxies: Optional[Dict[str, str]] = None,\n\t    use_auth_token: Optional[Union[bool, str]] = None,\n\t    revision: Optional[str] = None,\n\t    local_files_only: bool = False,\n\t    **kwargs,\n\t):\n\t    \"\"\"\n\t    Extracts a class from a module file, present in the local folder or repository of a model.\n", "    <Tip warning={true}>\n\t    Calling this function will execute the code in the module file found locally or downloaded from the Hub. It should\n\t    therefore only be called on trusted repos.\n\t    </Tip>\n\t    Args:\n\t        pretrained_model_name_or_path (`str` or `os.PathLike`):\n\t            This can be either:\n\t            - a string, the *model id* of a pretrained model configuration hosted inside a model repo on\n\t              huggingface.co. Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced\n\t              under a user or organization name, like `dbmdz/bert-base-german-cased`.\n", "            - a path to a *directory* containing a configuration file saved using the\n\t              [`~PreTrainedTokenizer.save_pretrained`] method, e.g., `./my_model_directory/`.\n\t        module_file (`str`):\n\t            The name of the module file containing the class to look for.\n\t        class_name (`str`):\n\t            The name of the class to import in the module.\n\t        cache_dir (`str` or `os.PathLike`, *optional*):\n\t            Path to a directory in which a downloaded pretrained model configuration should be cached if the standard\n\t            cache should not be used.\n\t        force_download (`bool`, *optional*, defaults to `False`):\n", "            Whether or not to force to (re-)download the configuration files and override the cached versions if they\n\t            exist.\n\t        resume_download (`bool`, *optional*, defaults to `False`):\n\t            Whether or not to delete incompletely received file. Attempts to resume the download if such a file exists.\n\t        proxies (`Dict[str, str]`, *optional*):\n\t            A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t            'http://hostname': 'foo.bar:4012'}.` The proxies are used on each request.\n\t        use_auth_token (`str` or `bool`, *optional*):\n\t            The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t            when running `transformers-cli login` (stored in `~/.huggingface`).\n", "        revision (`str`, *optional*, defaults to `\"main\"`):\n\t            The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t            git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t            identifier allowed by git.\n\t        local_files_only (`bool`, *optional*, defaults to `False`):\n\t            If `True`, will only try to load the tokenizer configuration from local files.\n\t    <Tip>\n\t    You may pass a token in `use_auth_token` if you are not logged in (`huggingface-cli long`) and want to use private\n\t    or [gated models](https://huggingface.co/docs/hub/models-gated#gated-models).\n\t    </Tip>\n", "    Returns:\n\t        `type`: The class, dynamically imported from the module.\n\t    Examples:\n\t    ```python\n\t    # Download module `modeling.py` from huggingface.co and cache then extract the class `MyBertModel` from this\n\t    # module.\n\t    cls = get_class_from_dynamic_module(\"sgugger/my-bert-model\", \"modeling.py\", \"MyBertModel\")\n\t    ```\"\"\"\n\t    # And lastly we get the class inside our newly created module\n\t    final_module = get_cached_module_file(\n", "        pretrained_model_name_or_path,\n\t        module_file,\n\t        cache_dir=cache_dir,\n\t        force_download=force_download,\n\t        resume_download=resume_download,\n\t        proxies=proxies,\n\t        use_auth_token=use_auth_token,\n\t        revision=revision,\n\t        local_files_only=local_files_only,\n\t    )\n", "    return get_class_in_module(class_name, final_module.replace(\".py\", \"\"))\n"]}
{"filename": "diffusers_/__init__.py", "chunked_list": ["from .utils import (\n\t    is_torch_available,\n\t    is_transformers_available,\n\t)\n\t__version__ = \"0.9.0\"\n\tif is_torch_available() and is_transformers_available():\n\t    from .stable_diffusion import (\n\t        StableDiffusionPipeline,\n\t    )\n\telse:\n", "    from .utils.dummy_torch_and_transformers_objects import *  # noqa F403\n"]}
{"filename": "diffusers_/pipeline_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2022 The HuggingFace Inc. team.\n\t# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport importlib\n\timport inspect\n\timport os\n\tfrom dataclasses import dataclass\n\tfrom pathlib import Path\n", "from typing import Any, Dict, List, Optional, Union\n\timport numpy as np\n\timport torch\n\timport diffusers\n\timport PIL\n\tfrom huggingface_hub import snapshot_download\n\tfrom packaging import version\n\tfrom PIL import Image\n\tfrom tqdm.auto import tqdm\n\tfrom .configuration_utils import ConfigMixin\n", "from .dynamic_modules_utils import get_class_from_dynamic_module\n\tfrom .hub_utils import http_user_agent\n\tfrom .modeling_utils import _LOW_CPU_MEM_USAGE_DEFAULT\n\tfrom .scheduling_utils import SCHEDULER_CONFIG_NAME\n\tfrom .utils import (\n\t    CONFIG_NAME,\n\t    DIFFUSERS_CACHE,\n\t    ONNX_WEIGHTS_NAME,\n\t    WEIGHTS_NAME,\n\t    BaseOutput,\n", "    deprecate,\n\t    is_accelerate_available,\n\t    is_torch_version,\n\t    is_transformers_available,\n\t    logging,\n\t)\n\tif is_transformers_available():\n\t    import transformers\n\t    from transformers import PreTrainedModel\n\tINDEX_FILE = \"diffusion_pytorch_model.bin\"\n", "CUSTOM_PIPELINE_FILE_NAME = \"pipeline.py\"\n\tDUMMY_MODULES_FOLDER = \"diffusers.utils\"\n\tTRANSFORMERS_DUMMY_MODULES_FOLDER = \"transformers.utils\"\n\tlogger = logging.get_logger(__name__)\n\tLOADABLE_CLASSES = {\n\t    \"diffusers\": {\n\t        \"ModelMixin\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"SchedulerMixin\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"DiffusionPipeline\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"OnnxRuntimeModel\": [\"save_pretrained\", \"from_pretrained\"],\n", "    },\n\t    \"transformers\": {\n\t        \"PreTrainedTokenizer\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"PreTrainedTokenizerFast\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"PreTrainedModel\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"FeatureExtractionMixin\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"ProcessorMixin\": [\"save_pretrained\", \"from_pretrained\"],\n\t        \"ImageProcessingMixin\": [\"save_pretrained\", \"from_pretrained\"],\n\t    },\n\t    \"onnxruntime.training\": {\n", "        \"ORTModule\": [\"save_pretrained\", \"from_pretrained\"],\n\t    },\n\t}\n\tALL_IMPORTABLE_CLASSES = {}\n\tfor library in LOADABLE_CLASSES:\n\t    ALL_IMPORTABLE_CLASSES.update(LOADABLE_CLASSES[library])\n\t@dataclass\n\tclass ImagePipelineOutput(BaseOutput):\n\t    \"\"\"\n\t    Output class for image pipelines.\n", "    Args:\n\t        images (`List[PIL.Image.Image]` or `np.ndarray`)\n\t            List of denoised PIL images of length `batch_size` or numpy array of shape `(batch_size, height, width,\n\t            num_channels)`. PIL images or numpy array present the denoised images of the diffusion pipeline.\n\t    \"\"\"\n\t    images: Union[List[PIL.Image.Image], np.ndarray]\n\t@dataclass\n\tclass AudioPipelineOutput(BaseOutput):\n\t    \"\"\"\n\t    Output class for audio pipelines.\n", "    Args:\n\t        audios (`np.ndarray`)\n\t            List of denoised samples of shape `(batch_size, num_channels, sample_rate)`. Numpy array present the\n\t            denoised audio samples of the diffusion pipeline.\n\t    \"\"\"\n\t    audios: np.ndarray\n\tclass DiffusionPipeline(ConfigMixin):\n\t    r\"\"\"\n\t    Base class for all models.\n\t    [`DiffusionPipeline`] takes care of storing all components (models, schedulers, processors) for diffusion pipelines\n", "    and handles methods for loading, downloading and saving models as well as a few methods common to all pipelines to:\n\t        - move all PyTorch modules to the device of your choice\n\t        - enabling/disabling the progress bar for the denoising iteration\n\t    Class attributes:\n\t        - **config_name** (`str`) -- name of the config file that will store the class and module names of all\n\t          components of the diffusion pipeline.\n\t        - **_optional_components** (List[`str`]) -- list of all components that are optional so they don't have to be\n\t          passed for the pipeline to function (should be overridden by subclasses).\n\t    \"\"\"\n\t    config_name = \"model_index.json\"\n", "    _optional_components = []\n\t    def register_modules(self, **kwargs):\n\t        # import it here to avoid circular import\n\t        from diffusers import pipelines\n\t        for name, module in kwargs.items():\n\t            # retrieve library\n\t            if module is None:\n\t                register_dict = {name: (None, None)}\n\t            else:\n\t                library = module.__module__.split(\".\")[0]\n", "                # check if the module is a pipeline module\n\t                pipeline_dir = module.__module__.split(\".\")[-2] if len(module.__module__.split(\".\")) > 2 else None\n\t                path = module.__module__.split(\".\")\n\t                is_pipeline_module = pipeline_dir in path and hasattr(pipelines, pipeline_dir)\n\t                # if library is not in LOADABLE_CLASSES, then it is a custom module.\n\t                # Or if it's a pipeline module, then the module is inside the pipeline\n\t                # folder so we set the library to module name.\n\t                if library not in LOADABLE_CLASSES or is_pipeline_module:\n\t                    library = pipeline_dir\n\t                # retrieve class_name\n", "                class_name = module.__class__.__name__\n\t                register_dict = {name: (library, class_name)}\n\t                # save model index config\n\t                self.register_to_config(**register_dict)\n\t            # set models\n\t            setattr(self, name, module)\n\t    def save_pretrained(self, save_directory: Union[str, os.PathLike]):\n\t        \"\"\"\n\t        Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to\n\t        a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading\n", "        method. The pipeline can easily be re-loaded using the `[`~DiffusionPipeline.from_pretrained`]` class method.\n\t        Arguments:\n\t            save_directory (`str` or `os.PathLike`):\n\t                Directory to which to save. Will be created if it doesn't exist.\n\t        \"\"\"\n\t        self.save_config(save_directory)\n\t        model_index_dict = dict(self.config)\n\t        model_index_dict.pop(\"_class_name\")\n\t        model_index_dict.pop(\"_diffusers_version\")\n\t        model_index_dict.pop(\"_module\", None)\n", "        expected_modules, optional_kwargs = self._get_signature_keys(self)\n\t        def is_saveable_module(name, value):\n\t            if name not in expected_modules:\n\t                return False\n\t            if name in self._optional_components and value[0] is None:\n\t                return False\n\t            return True\n\t        model_index_dict = {k: v for k, v in model_index_dict.items() if is_saveable_module(k, v)}\n\t        for pipeline_component_name in model_index_dict.keys():\n\t            sub_model = getattr(self, pipeline_component_name)\n", "            model_cls = sub_model.__class__\n\t            save_method_name = None\n\t            # search for the model's base class in LOADABLE_CLASSES\n\t            for library_name, library_classes in LOADABLE_CLASSES.items():\n\t                library = importlib.import_module(library_name)\n\t                for base_class, save_load_methods in library_classes.items():\n\t                    class_candidate = getattr(library, base_class, None)\n\t                    if class_candidate is not None and issubclass(model_cls, class_candidate):\n\t                        # if we found a suitable base class in LOADABLE_CLASSES then grab its save method\n\t                        save_method_name = save_load_methods[0]\n", "                        break\n\t                if save_method_name is not None:\n\t                    break\n\t            if save_method_name is not None:\n\t                save_method = getattr(sub_model, save_method_name)\n\t                save_method(os.path.join(save_directory, pipeline_component_name))\n\t    def to(self, torch_device: Optional[Union[str, torch.device]] = None):\n\t        if torch_device is None:\n\t            return self\n\t        module_names, _, _ = self.extract_init_dict(dict(self.config))\n", "        for name in module_names.keys():\n\t            module = getattr(self, name)\n\t            if isinstance(module, torch.nn.Module):\n\t                if module.dtype == torch.float16 and str(torch_device) in [\"cpu\"]:\n\t                    logger.warning(\n\t                        \"Pipelines loaded with `torch_dtype=torch.float16` cannot run with `cpu` device. It\"\n\t                        \" is not recommended to move them to `cpu` as running them will fail. Please make\"\n\t                        \" sure to use an accelerator to run the pipeline in inference, due to the lack of\"\n\t                        \" support for`float16` operations on this device in PyTorch. Please, remove the\"\n\t                        \" `torch_dtype=torch.float16` argument, or use another device for inference.\"\n", "                    )\n\t                module.to(torch_device)\n\t        return self\n\t    @property\n\t    def device(self) -> torch.device:\n\t        r\"\"\"\n\t        Returns:\n\t            `torch.device`: The torch device on which the pipeline is located.\n\t        \"\"\"\n\t        module_names, _, _ = self.extract_init_dict(dict(self.config))\n", "        for name in module_names.keys():\n\t            module = getattr(self, name)\n\t            if isinstance(module, torch.nn.Module):\n\t                return module.device\n\t        return torch.device(\"cpu\")\n\t    @classmethod\n\t    def from_pretrained(cls, pretrained_model_name_or_path: Optional[Union[str, os.PathLike]], **kwargs):\n\t        r\"\"\"\n\t        Instantiate a PyTorch diffusion pipeline from pre-trained pipeline weights.\n\t        The pipeline is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated).\n", "        The warning *Weights from XXX not initialized from pretrained model* means that the weights of XXX do not come\n\t        pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning\n\t        task.\n\t        The warning *Weights from XXX not used in YYY* means that the layer XXX is not used by YYY, therefore those\n\t        weights are discarded.\n\t        Parameters:\n\t            pretrained_model_name_or_path (`str` or `os.PathLike`, *optional*):\n\t                Can be either:\n\t                    - A string, the *repo id* of a pretrained pipeline hosted inside a model repo on\n\t                      https://huggingface.co/ Valid repo ids have to be located under a user or organization name, like\n", "                      `CompVis/ldm-text2im-large-256`.\n\t                    - A path to a *directory* containing pipeline weights saved using\n\t                      [`~DiffusionPipeline.save_pretrained`], e.g., `./my_pipeline_directory/`.\n\t            torch_dtype (`str` or `torch.dtype`, *optional*):\n\t                Override the default `torch.dtype` and load the model under this dtype. If `\"auto\"` is passed the dtype\n\t                will be automatically derived from the model's weights.\n\t            custom_pipeline (`str`, *optional*):\n\t                <Tip warning={true}>\n\t                    This is an experimental feature and is likely to change in the future.\n\t                </Tip>\n", "                Can be either:\n\t                    - A string, the *repo id* of a custom pipeline hosted inside a model repo on\n\t                      https://huggingface.co/. Valid repo ids have to be located under a user or organization name,\n\t                      like `hf-internal-testing/diffusers-dummy-pipeline`.\n\t                        <Tip>\n\t                         It is required that the model repo has a file, called `pipeline.py` that defines the custom\n\t                         pipeline.\n\t                        </Tip>\n\t                    - A string, the *file name* of a community pipeline hosted on GitHub under\n\t                      https://github.com/huggingface/diffusers/tree/main/examples/community. Valid file names have to\n", "                      match exactly the file name without `.py` located under the above link, *e.g.*\n\t                      `clip_guided_stable_diffusion`.\n\t                        <Tip>\n\t                         Community pipelines are always loaded from the current `main` branch of GitHub.\n\t                        </Tip>\n\t                    - A path to a *directory* containing a custom pipeline, e.g., `./my_pipeline_directory/`.\n\t                        <Tip>\n\t                         It is required that the directory has a file, called `pipeline.py` that defines the custom\n\t                         pipeline.\n\t                        </Tip>\n", "                For more information on how to load and create custom pipelines, please have a look at [Loading and\n\t                Adding Custom\n\t                Pipelines](https://huggingface.co/docs/diffusers/using-diffusers/custom_pipeline_overview)\n\t            torch_dtype (`str` or `torch.dtype`, *optional*):\n\t            force_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to force the (re-)download of the model weights and configuration files, overriding the\n\t                cached versions if they exist.\n\t            resume_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to delete incompletely received files. Will attempt to resume the download if such a\n\t                file exists.\n", "            proxies (`Dict[str, str]`, *optional*):\n\t                A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t                'http://hostname': 'foo.bar:4012'}`. The proxies are used on each request.\n\t            output_loading_info(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.\n\t            local_files_only(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to only look at local files (i.e., do not try to download the model).\n\t            use_auth_token (`str` or *bool*, *optional*):\n\t                The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t                when running `huggingface-cli login` (stored in `~/.huggingface`).\n", "            revision (`str`, *optional*, defaults to `\"main\"`):\n\t                The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t                git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t                identifier allowed by git.\n\t            mirror (`str`, *optional*):\n\t                Mirror source to accelerate downloads in China. If you are from China and have an accessibility\n\t                problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.\n\t                Please refer to the mirror site for more information. specify the folder name here.\n\t            device_map (`str` or `Dict[str, Union[int, str, torch.device]]`, *optional*):\n\t                A map that specifies where each submodule should go. It doesn't need to be refined to each\n", "                parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the\n\t                same device.\n\t                To have Accelerate compute the most optimized `device_map` automatically, set `device_map=\"auto\"`. For\n\t                more information about each option see [designing a device\n\t                map](https://hf.co/docs/accelerate/main/en/usage_guides/big_modeling#designing-a-device-map).\n\t            low_cpu_mem_usage (`bool`, *optional*, defaults to `True` if torch version >= 1.9.0 else `False`):\n\t                Speed up model loading by not initializing the weights and only loading the pre-trained weights. This\n\t                also tries to not use more than 1x model size in CPU memory (including peak memory) while loading the\n\t                model. This is only supported when torch version >= 1.9.0. If you are using an older version of torch,\n\t                setting this argument to `True` will raise an error.\n", "            kwargs (remaining dictionary of keyword arguments, *optional*):\n\t                Can be used to overwrite load - and saveable variables - *i.e.* the pipeline components - of the\n\t                specific pipeline class. The overwritten components are then directly passed to the pipelines\n\t                `__init__` method. See example below for more information.\n\t        <Tip>\n\t         It is required to be logged in (`huggingface-cli login`) when you want to use private or [gated\n\t         models](https://huggingface.co/docs/hub/models-gated#gated-models), *e.g.* `\"runwayml/stable-diffusion-v1-5\"`\n\t        </Tip>\n\t        <Tip>\n\t        Activate the special [\"offline-mode\"](https://huggingface.co/diffusers/installation.html#offline-mode) to use\n", "        this method in a firewalled environment.\n\t        </Tip>\n\t        Examples:\n\t        ```py\n\t        >>> from diffusers import DiffusionPipeline\n\t        >>> # Download pipeline from huggingface.co and cache.\n\t        >>> pipeline = DiffusionPipeline.from_pretrained(\"CompVis/ldm-text2im-large-256\")\n\t        >>> # Download pipeline that requires an authorization token\n\t        >>> # For more information on access tokens, please refer to this section\n\t        >>> # of the documentation](https://huggingface.co/docs/hub/security-tokens)\n", "        >>> pipeline = DiffusionPipeline.from_pretrained(\"runwayml/stable-diffusion-v1-5\")\n\t        >>> # Use a different scheduler\n\t        >>> from diffusers import LMSDiscreteScheduler\n\t        >>> scheduler = LMSDiscreteScheduler.from_config(pipeline.scheduler.config)\n\t        >>> pipeline.scheduler = scheduler\n\t        ```\n\t        \"\"\"\n\t        cache_dir = kwargs.pop(\"cache_dir\", DIFFUSERS_CACHE)\n\t        resume_download = kwargs.pop(\"resume_download\", False)\n\t        force_download = kwargs.pop(\"force_download\", False)\n", "        proxies = kwargs.pop(\"proxies\", None)\n\t        local_files_only = kwargs.pop(\"local_files_only\", False)\n\t        use_auth_token = kwargs.pop(\"use_auth_token\", None)\n\t        revision = kwargs.pop(\"revision\", None)\n\t        torch_dtype = kwargs.pop(\"torch_dtype\", None)\n\t        custom_pipeline = kwargs.pop(\"custom_pipeline\", None)\n\t        provider = kwargs.pop(\"provider\", None)\n\t        sess_options = kwargs.pop(\"sess_options\", None)\n\t        device_map = kwargs.pop(\"device_map\", None)\n\t        low_cpu_mem_usage = kwargs.pop(\"low_cpu_mem_usage\", _LOW_CPU_MEM_USAGE_DEFAULT)\n", "        if low_cpu_mem_usage and not is_accelerate_available():\n\t            low_cpu_mem_usage = False\n\t            logger.warning(\n\t                \"Cannot initialize model with low cpu memory usage because `accelerate` was not found in the\"\n\t                \" environment. Defaulting to `low_cpu_mem_usage=False`. It is strongly recommended to install\"\n\t                \" `accelerate` for faster and less memory-intense model loading. You can do so with: \\n```\\npip\"\n\t                \" install accelerate\\n```\\n.\"\n\t            )\n\t        if device_map is not None and not is_torch_version(\">=\", \"1.9.0\"):\n\t            raise NotImplementedError(\n", "                \"Loading and dispatching requires torch >= 1.9.0. Please either update your PyTorch version or set\"\n\t                \" `device_map=None`.\"\n\t            )\n\t        if low_cpu_mem_usage is True and not is_torch_version(\">=\", \"1.9.0\"):\n\t            raise NotImplementedError(\n\t                \"Low memory initialization requires torch >= 1.9.0. Please either update your PyTorch version or set\"\n\t                \" `low_cpu_mem_usage=False`.\"\n\t            )\n\t        if low_cpu_mem_usage is False and device_map is not None:\n\t            raise ValueError(\n", "                f\"You cannot set `low_cpu_mem_usage` to False while using device_map={device_map} for loading and\"\n\t                \" dispatching. Please make sure to set `low_cpu_mem_usage=True`.\"\n\t            )\n\t        # 1. Download the checkpoints and configs\n\t        # use snapshot download here to get it working from from_pretrained\n\t        if not os.path.isdir(pretrained_model_name_or_path):\n\t            config_dict = cls.load_config(\n\t                pretrained_model_name_or_path,\n\t                cache_dir=cache_dir,\n\t                resume_download=resume_download,\n", "                force_download=force_download,\n\t                proxies=proxies,\n\t                local_files_only=local_files_only,\n\t                use_auth_token=use_auth_token,\n\t                revision=revision,\n\t            )\n\t            # make sure we only download sub-folders and `diffusers` filenames\n\t            folder_names = [k for k in config_dict.keys() if not k.startswith(\"_\")]\n\t            allow_patterns = [os.path.join(k, \"*\") for k in folder_names]\n\t            allow_patterns += [WEIGHTS_NAME, SCHEDULER_CONFIG_NAME, CONFIG_NAME, ONNX_WEIGHTS_NAME, cls.config_name]\n", "            # make sure we don't download flax weights\n\t            ignore_patterns = \"*.msgpack\"\n\t            if custom_pipeline is not None:\n\t                allow_patterns += [CUSTOM_PIPELINE_FILE_NAME]\n\t            if cls != DiffusionPipeline:\n\t                requested_pipeline_class = cls.__name__\n\t            else:\n\t                requested_pipeline_class = config_dict.get(\"_class_name\", cls.__name__)\n\t            user_agent = {\"pipeline_class\": requested_pipeline_class}\n\t            if custom_pipeline is not None:\n", "                user_agent[\"custom_pipeline\"] = custom_pipeline\n\t            user_agent = http_user_agent(user_agent)\n\t            # download all allow_patterns\n\t            cached_folder = snapshot_download(\n\t                pretrained_model_name_or_path,\n\t                cache_dir=cache_dir,\n\t                resume_download=resume_download,\n\t                proxies=proxies,\n\t                local_files_only=local_files_only,\n\t                use_auth_token=use_auth_token,\n", "                revision=revision,\n\t                allow_patterns=allow_patterns,\n\t                ignore_patterns=ignore_patterns,\n\t                user_agent=user_agent,\n\t            )\n\t        else:\n\t            cached_folder = pretrained_model_name_or_path\n\t        config_dict = cls.load_config(cached_folder)\n\t        # 2. Load the pipeline class, if using custom module then load it from the hub\n\t        # if we load from explicit class, let's use it\n", "        if custom_pipeline is not None:\n\t            if custom_pipeline.endswith(\".py\"):\n\t                path = Path(custom_pipeline)\n\t                # decompose into folder & file\n\t                file_name = path.name\n\t                custom_pipeline = path.parent.absolute()\n\t            else:\n\t                file_name = CUSTOM_PIPELINE_FILE_NAME\n\t            import ipdb; ipdb.set_trace()\n\t            pipeline_class = get_class_from_dynamic_module(\n", "                custom_pipeline, module_file=file_name, cache_dir=custom_pipeline\n\t            )\n\t        elif cls != DiffusionPipeline:\n\t            pipeline_class = cls\n\t        else:\n\t            diffusers_module = importlib.import_module(cls.__module__.split(\".\")[0])\n\t            pipeline_class = getattr(diffusers_module, config_dict[\"_class_name\"])\n\t        # To be removed in 1.0.0\n\t        if pipeline_class.__name__ == \"StableDiffusionInpaintPipeline\" and version.parse(\n\t            version.parse(config_dict[\"_diffusers_version\"]).base_version\n", "        ) <= version.parse(\"0.5.1\"):\n\t            from diffusers import StableDiffusionInpaintPipeline, StableDiffusionInpaintPipelineLegacy\n\t            pipeline_class = StableDiffusionInpaintPipelineLegacy\n\t            deprecation_message = (\n\t                \"You are using a legacy checkpoint for inpainting with Stable Diffusion, therefore we are loading the\"\n\t                f\" {StableDiffusionInpaintPipelineLegacy} class instead of {StableDiffusionInpaintPipeline}. For\"\n\t                \" better inpainting results, we strongly suggest using Stable Diffusion's official inpainting\"\n\t                \" checkpoint: https://huggingface.co/runwayml/stable-diffusion-inpainting instead or adapting your\"\n\t                f\" checkpoint {pretrained_model_name_or_path} to the format of\"\n\t                \" https://huggingface.co/runwayml/stable-diffusion-inpainting. Note that we do not actively maintain\"\n", "                \" the {StableDiffusionInpaintPipelineLegacy} class and will likely remove it in version 1.0.0.\"\n\t            )\n\t            deprecate(\"StableDiffusionInpaintPipelineLegacy\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t        # some modules can be passed directly to the init\n\t        # in this case they are already instantiated in `kwargs`\n\t        # extract them here\n\t        expected_modules, optional_kwargs = cls._get_signature_keys(pipeline_class)\n\t        passed_class_obj = {k: kwargs.pop(k) for k in expected_modules if k in kwargs}\n\t        passed_pipe_kwargs = {k: kwargs.pop(k) for k in optional_kwargs if k in kwargs}\n\t        init_dict, unused_kwargs, _ = pipeline_class.extract_init_dict(config_dict, **kwargs)\n", "        # define init kwargs\n\t        init_kwargs = {k: init_dict.pop(k) for k in optional_kwargs if k in init_dict}\n\t        init_kwargs = {**init_kwargs, **passed_pipe_kwargs}\n\t        # remove `null` components\n\t        def load_module(name, value):\n\t            if value[0] is None:\n\t                return False\n\t            if name in passed_class_obj and passed_class_obj[name] is None:\n\t                return False\n\t            return True\n", "        init_dict = {k: v for k, v in init_dict.items() if load_module(k, v)}\n\t        if len(unused_kwargs) > 0:\n\t            logger.warning(\n\t                f\"Keyword arguments {unused_kwargs} are not expected by {pipeline_class.__name__} and will be ignored.\"\n\t            )\n\t        # import it here to avoid circular import\n\t        from diffusers import pipelines\n\t        # 3. Load each module in the pipeline\n\t        for name, (library_name, class_name) in init_dict.items():\n\t            # 3.1 - now that JAX/Flax is an official framework of the library, we might load from Flax names\n", "            if class_name.startswith(\"Flax\"):\n\t                class_name = class_name[4:]\n\t            is_pipeline_module = hasattr(pipelines, library_name)\n\t            loaded_sub_model = None\n\t            # if the model is in a pipeline module, then we load it from the pipeline\n\t            if name in passed_class_obj:\n\t                # 1. check that passed_class_obj has correct parent class\n\t                if not is_pipeline_module:\n\t                    library = importlib.import_module(library_name)\n\t                    class_obj = getattr(library, class_name)\n", "                    importable_classes = LOADABLE_CLASSES[library_name]\n\t                    class_candidates = {c: getattr(library, c, None) for c in importable_classes.keys()}\n\t                    expected_class_obj = None\n\t                    for class_name, class_candidate in class_candidates.items():\n\t                        if class_candidate is not None and issubclass(class_obj, class_candidate):\n\t                            expected_class_obj = class_candidate\n\t                    if not issubclass(passed_class_obj[name].__class__, expected_class_obj):\n\t                        raise ValueError(\n\t                            f\"{passed_class_obj[name]} is of type: {type(passed_class_obj[name])}, but should be\"\n\t                            f\" {expected_class_obj}\"\n", "                        )\n\t                else:\n\t                    logger.warning(\n\t                        f\"You have passed a non-standard module {passed_class_obj[name]}. We cannot verify whether it\"\n\t                        \" has the correct type\"\n\t                    )\n\t                # set passed class object\n\t                loaded_sub_model = passed_class_obj[name]\n\t            elif is_pipeline_module:\n\t                pipeline_module = getattr(pipelines, library_name)\n", "                class_obj = getattr(pipeline_module, class_name)\n\t                importable_classes = ALL_IMPORTABLE_CLASSES\n\t                class_candidates = {c: class_obj for c in importable_classes.keys()}\n\t            else:\n\t                # else we just import it from the library.\n\t                library = importlib.import_module(library_name)\n\t                class_obj = getattr(library, class_name)\n\t                importable_classes = LOADABLE_CLASSES[library_name]\n\t                class_candidates = {c: getattr(library, c, None) for c in importable_classes.keys()}\n\t            if loaded_sub_model is None:\n", "                load_method_name = None\n\t                for class_name, class_candidate in class_candidates.items():\n\t                    if class_candidate is not None and issubclass(class_obj, class_candidate):\n\t                        load_method_name = importable_classes[class_name][1]\n\t                if load_method_name is None:\n\t                    none_module = class_obj.__module__\n\t                    is_dummy_path = none_module.startswith(DUMMY_MODULES_FOLDER) or none_module.startswith(\n\t                        TRANSFORMERS_DUMMY_MODULES_FOLDER\n\t                    )\n\t                    if is_dummy_path and \"dummy\" in none_module:\n", "                        # call class_obj for nice error message of missing requirements\n\t                        class_obj()\n\t                    raise ValueError(\n\t                        f\"The component {class_obj} of {pipeline_class} cannot be loaded as it does not seem to have\"\n\t                        f\" any of the loading methods defined in {ALL_IMPORTABLE_CLASSES}.\"\n\t                    )\n\t                load_method = getattr(class_obj, load_method_name)\n\t                loading_kwargs = {}\n\t                if issubclass(class_obj, torch.nn.Module):\n\t                    loading_kwargs[\"torch_dtype\"] = torch_dtype\n", "                if issubclass(class_obj, diffusers.OnnxRuntimeModel):\n\t                    loading_kwargs[\"provider\"] = provider\n\t                    loading_kwargs[\"sess_options\"] = sess_options\n\t                is_diffusers_model = issubclass(class_obj, diffusers.ModelMixin)\n\t                is_transformers_model = (\n\t                    is_transformers_available()\n\t                    and issubclass(class_obj, PreTrainedModel)\n\t                    and version.parse(version.parse(transformers.__version__).base_version) >= version.parse(\"4.20.0\")\n\t                )\n\t                # When loading a transformers model, if the device_map is None, the weights will be initialized as opposed to diffusers.\n", "                # To make default loading faster we set the `low_cpu_mem_usage=low_cpu_mem_usage` flag which is `True` by default.\n\t                # This makes sure that the weights won't be initialized which significantly speeds up loading.\n\t                if is_diffusers_model or is_transformers_model:\n\t                    loading_kwargs[\"device_map\"] = device_map\n\t                    loading_kwargs[\"low_cpu_mem_usage\"] = low_cpu_mem_usage\n\t                # check if the module is in a subdirectory\n\t                if os.path.isdir(os.path.join(cached_folder, name)):\n\t                    loaded_sub_model = load_method(os.path.join(cached_folder, name), **loading_kwargs)\n\t                else:\n\t                    # else load from the root directory\n", "                    loaded_sub_model = load_method(cached_folder, **loading_kwargs)\n\t            init_kwargs[name] = loaded_sub_model  # UNet(...), # DiffusionSchedule(...)\n\t        # 4. Potentially add passed objects if expected\n\t        missing_modules = set(expected_modules) - set(init_kwargs.keys())\n\t        passed_modules = list(passed_class_obj.keys())\n\t        optional_modules = pipeline_class._optional_components\n\t        if len(missing_modules) > 0 and missing_modules <= set(passed_modules + optional_modules):\n\t            for module in missing_modules:\n\t                init_kwargs[module] = passed_class_obj.get(module, None)\n\t        elif len(missing_modules) > 0:\n", "            passed_modules = set(list(init_kwargs.keys()) + list(passed_class_obj.keys())) - optional_kwargs\n\t            # raise ValueError(\n\t            #     f\"Pipeline {pipeline_class} expected {expected_modules}, but only {passed_modules} were passed.\"\n\t            # )\n\t        # 5. Instantiate the pipeline\n\t        model = pipeline_class(**init_kwargs)\n\t        return model\n\t    @staticmethod\n\t    def _get_signature_keys(obj):\n\t        parameters = inspect.signature(obj.__init__).parameters\n", "        required_parameters = {k: v for k, v in parameters.items() if v.default == inspect._empty}\n\t        optional_parameters = set({k for k, v in parameters.items() if v.default != inspect._empty})\n\t        expected_modules = set(required_parameters.keys()) - set([\"self\"])\n\t        return expected_modules, optional_parameters\n\t    @property\n\t    def components(self) -> Dict[str, Any]:\n\t        r\"\"\"\n\t        The `self.components` property can be useful to run different pipelines with the same weights and\n\t        configurations to not have to re-allocate memory.\n\t        Examples:\n", "        ```py\n\t        >>> from diffusers import (\n\t        ...     StableDiffusionPipeline,\n\t        ...     StableDiffusionImg2ImgPipeline,\n\t        ...     StableDiffusionInpaintPipeline,\n\t        ... )\n\t        >>> text2img = StableDiffusionPipeline.from_pretrained(\"runwayml/stable-diffusion-v1-5\")\n\t        >>> img2img = StableDiffusionImg2ImgPipeline(**text2img.components)\n\t        >>> inpaint = StableDiffusionInpaintPipeline(**text2img.components)\n\t        ```\n", "        Returns:\n\t            A dictionaly containing all the modules needed to initialize the pipeline.\n\t        \"\"\"\n\t        expected_modules, optional_parameters = self._get_signature_keys(self)\n\t        components = {\n\t            k: getattr(self, k) for k in self.config.keys() if not k.startswith(\"_\") and k not in optional_parameters\n\t        }\n\t        if set(components.keys()) != expected_modules:\n\t            raise ValueError(\n\t                f\"{self} has been incorrectly initialized or {self.__class__} is incorrectly implemented. Expected\"\n", "                f\" {expected_modules} to be defined, but {components} are defined.\"\n\t            )\n\t        return components\n\t    @staticmethod\n\t    def numpy_to_pil(images):\n\t        \"\"\"\n\t        Convert a numpy image or a batch of images to a PIL image.\n\t        \"\"\"\n\t        if images.ndim == 3:\n\t            images = images[None, ...]\n", "        images = (images * 255).round().astype(\"uint8\")\n\t        if images.shape[-1] == 1:\n\t            # special case for grayscale (single channel) images\n\t            pil_images = [Image.fromarray(image.squeeze(), mode=\"L\") for image in images]\n\t        else:\n\t            pil_images = [Image.fromarray(image) for image in images]\n\t        return pil_images\n\t    def progress_bar(self, iterable):\n\t        if not hasattr(self, \"_progress_bar_config\"):\n\t            self._progress_bar_config = {}\n", "        elif not isinstance(self._progress_bar_config, dict):\n\t            raise ValueError(\n\t                f\"`self._progress_bar_config` should be of type `dict`, but is {type(self._progress_bar_config)}.\"\n\t            )\n\t        return tqdm(iterable, **self._progress_bar_config)\n\t    def set_progress_bar_config(self, **kwargs):\n\t        self._progress_bar_config = kwargs\n"]}
{"filename": "diffusers_/scheduling_utils.py", "chunked_list": ["# Copyright 2022 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport importlib\n\timport os\n\tfrom dataclasses import dataclass\n\tfrom typing import Any, Dict, Optional, Union\n\timport torch\n\tfrom .utils import BaseOutput\n\tSCHEDULER_CONFIG_NAME = \"scheduler_config.json\"\n", "@dataclass\n\tclass SchedulerOutput(BaseOutput):\n\t    \"\"\"\n\t    Base class for the scheduler's step function output.\n\t    Args:\n\t        prev_sample (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)` for images):\n\t            Computed sample (x_{t-1}) of previous timestep. `prev_sample` should be used as next model input in the\n\t            denoising loop.\n\t    \"\"\"\n\t    prev_sample: torch.FloatTensor\n", "class SchedulerMixin:\n\t    \"\"\"\n\t    Mixin containing common functions for the schedulers.\n\t    Class attributes:\n\t        - **_compatibles** (`List[str]`) -- A list of classes that are compatible with the parent class, so that\n\t          `from_config` can be used from a class different than the one used to save the config (should be overridden\n\t          by parent class).\n\t    \"\"\"\n\t    config_name = SCHEDULER_CONFIG_NAME\n\t    _compatibles = []\n", "    has_compatibles = True\n\t    @classmethod\n\t    def from_pretrained(\n\t        cls,\n\t        pretrained_model_name_or_path: Dict[str, Any] = None,\n\t        subfolder: Optional[str] = None,\n\t        return_unused_kwargs=False,\n\t        **kwargs,\n\t    ):\n\t        r\"\"\"\n", "        Instantiate a Scheduler class from a pre-defined JSON configuration file inside a directory or Hub repo.\n\t        Parameters:\n\t            pretrained_model_name_or_path (`str` or `os.PathLike`, *optional*):\n\t                Can be either:\n\t                    - A string, the *model id* of a model repo on huggingface.co. Valid model ids should have an\n\t                      organization name, like `google/ddpm-celebahq-256`.\n\t                    - A path to a *directory* containing the schedluer configurations saved using\n\t                      [`~SchedulerMixin.save_pretrained`], e.g., `./my_model_directory/`.\n\t            subfolder (`str`, *optional*):\n\t                In case the relevant files are located inside a subfolder of the model repo (either remote in\n", "                huggingface.co or downloaded locally), you can specify the folder name here.\n\t            return_unused_kwargs (`bool`, *optional*, defaults to `False`):\n\t                Whether kwargs that are not consumed by the Python class should be returned or not.\n\t            cache_dir (`Union[str, os.PathLike]`, *optional*):\n\t                Path to a directory in which a downloaded pretrained model configuration should be cached if the\n\t                standard cache should not be used.\n\t            force_download (`bool`, *optional*, defaults to `False`):\n\t                Whether or not to force the (re-)download of the model weights and configuration files, overriding the\n\t                cached versions if they exist.\n\t            resume_download (`bool`, *optional*, defaults to `False`):\n", "                Whether or not to delete incompletely received files. Will attempt to resume the download if such a\n\t                file exists.\n\t            proxies (`Dict[str, str]`, *optional*):\n\t                A dictionary of proxy servers to use by protocol or endpoint, e.g., `{'http': 'foo.bar:3128',\n\t                'http://hostname': 'foo.bar:4012'}`. The proxies are used on each request.\n\t            output_loading_info(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.\n\t            local_files_only(`bool`, *optional*, defaults to `False`):\n\t                Whether or not to only look at local files (i.e., do not try to download the model).\n\t            use_auth_token (`str` or *bool*, *optional*):\n", "                The token to use as HTTP bearer authorization for remote files. If `True`, will use the token generated\n\t                when running `transformers-cli login` (stored in `~/.huggingface`).\n\t            revision (`str`, *optional*, defaults to `\"main\"`):\n\t                The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a\n\t                git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any\n\t                identifier allowed by git.\n\t        <Tip>\n\t         It is required to be logged in (`huggingface-cli login`) when you want to use private or [gated\n\t         models](https://huggingface.co/docs/hub/models-gated#gated-models).\n\t        </Tip>\n", "        <Tip>\n\t        Activate the special [\"offline-mode\"](https://huggingface.co/transformers/installation.html#offline-mode) to\n\t        use this method in a firewalled environment.\n\t        </Tip>\n\t        \"\"\"\n\t        config, kwargs = cls.load_config(\n\t            pretrained_model_name_or_path=pretrained_model_name_or_path,\n\t            subfolder=subfolder,\n\t            return_unused_kwargs=True,\n\t            **kwargs,\n", "        )\n\t        return cls.from_config(config, return_unused_kwargs=return_unused_kwargs, **kwargs)\n\t    def save_pretrained(self, save_directory: Union[str, os.PathLike], push_to_hub: bool = False, **kwargs):\n\t        \"\"\"\n\t        Save a scheduler configuration object to the directory `save_directory`, so that it can be re-loaded using the\n\t        [`~SchedulerMixin.from_pretrained`] class method.\n\t        Args:\n\t            save_directory (`str` or `os.PathLike`):\n\t                Directory where the configuration JSON file will be saved (will be created if it does not exist).\n\t        \"\"\"\n", "        self.save_config(save_directory=save_directory, push_to_hub=push_to_hub, **kwargs)\n\t    @property\n\t    def compatibles(self):\n\t        \"\"\"\n\t        Returns all schedulers that are compatible with this scheduler\n\t        Returns:\n\t            `List[SchedulerMixin]`: List of compatible schedulers\n\t        \"\"\"\n\t        return self._get_compatibles()\n\t    @classmethod\n", "    def _get_compatibles(cls):\n\t        compatible_classes_str = list(set([cls.__name__] + cls._compatibles))\n\t        diffusers_library = importlib.import_module(__name__.split(\".\")[0])\n\t        compatible_classes = [\n\t            getattr(diffusers_library, c) for c in compatible_classes_str if hasattr(diffusers_library, c)\n\t        ]\n\t        return compatible_classes\n"]}
{"filename": "diffusers_/utils/outputs.py", "chunked_list": ["# Copyright 2022 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"\n\tGeneric utilities\n\t\"\"\"\n\tfrom collections import OrderedDict\n\tfrom dataclasses import fields\n\tfrom typing import Any, Tuple\n\timport numpy as np\n", "from .import_utils import is_torch_available\n\tdef is_tensor(x):\n\t    \"\"\"\n\t    Tests if `x` is a `torch.Tensor` or `np.ndarray`.\n\t    \"\"\"\n\t    if is_torch_available():\n\t        import torch\n\t        if isinstance(x, torch.Tensor):\n\t            return True\n\t    return isinstance(x, np.ndarray)\n", "class BaseOutput(OrderedDict):\n\t    \"\"\"\n\t    Base class for all model outputs as dataclass. Has a `__getitem__` that allows indexing by integer or slice (like a\n\t    tuple) or strings (like a dictionary) that will ignore the `None` attributes. Otherwise behaves like a regular\n\t    python dictionary.\n\t    <Tip warning={true}>\n\t    You can't unpack a `BaseOutput` directly. Use the [`~utils.BaseOutput.to_tuple`] method to convert it to a tuple\n\t    before.\n\t    </Tip>\n\t    \"\"\"\n", "    def __post_init__(self):\n\t        class_fields = fields(self)\n\t        # Safety and consistency checks\n\t        if not len(class_fields):\n\t            raise ValueError(f\"{self.__class__.__name__} has no fields.\")\n\t        first_field = getattr(self, class_fields[0].name)\n\t        other_fields_are_none = all(getattr(self, field.name) is None for field in class_fields[1:])\n\t        if other_fields_are_none and isinstance(first_field, dict):\n\t            for key, value in first_field.items():\n\t                self[key] = value\n", "        else:\n\t            for field in class_fields:\n\t                v = getattr(self, field.name)\n\t                if v is not None:\n\t                    self[field.name] = v\n\t    def __delitem__(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``__delitem__`` on a {self.__class__.__name__} instance.\")\n\t    def setdefault(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``setdefault`` on a {self.__class__.__name__} instance.\")\n\t    def pop(self, *args, **kwargs):\n", "        raise Exception(f\"You cannot use ``pop`` on a {self.__class__.__name__} instance.\")\n\t    def update(self, *args, **kwargs):\n\t        raise Exception(f\"You cannot use ``update`` on a {self.__class__.__name__} instance.\")\n\t    def __getitem__(self, k):\n\t        if isinstance(k, str):\n\t            inner_dict = {k: v for (k, v) in self.items()}\n\t            return inner_dict[k]\n\t        else:\n\t            return self.to_tuple()[k]\n\t    def __setattr__(self, name, value):\n", "        if name in self.keys() and value is not None:\n\t            # Don't call self.__setitem__ to avoid recursion errors\n\t            super().__setitem__(name, value)\n\t        super().__setattr__(name, value)\n\t    def __setitem__(self, key, value):\n\t        # Will raise a KeyException if needed\n\t        super().__setitem__(key, value)\n\t        # Don't call self.__setattr__ to avoid recursion errors\n\t        super().__setattr__(key, value)\n\t    def to_tuple(self) -> Tuple[Any]:\n", "        \"\"\"\n\t        Convert self to a tuple containing all the attributes/keys that are not `None`.\n\t        \"\"\"\n\t        return tuple(self[k] for k in self.keys())\n"]}
{"filename": "diffusers_/utils/deprecation_utils.py", "chunked_list": ["import inspect\n\timport warnings\n\tfrom typing import Any, Dict, Optional, Union\n\tfrom packaging import version\n\tdef deprecate(*args, take_from: Optional[Union[Dict, Any]] = None, standard_warn=True):\n\t    from .. import __version__\n\t    deprecated_kwargs = take_from\n\t    values = ()\n\t    if not isinstance(args[0], tuple):\n\t        args = (args,)\n", "    for attribute, version_name, message in args:\n\t        if version.parse(version.parse(__version__).base_version) >= version.parse(version_name):\n\t            raise ValueError(\n\t                f\"The deprecation tuple {(attribute, version_name, message)} should be removed since diffusers'\"\n\t                f\" version {__version__} is >= {version_name}\"\n\t            )\n\t        warning = None\n\t        if isinstance(deprecated_kwargs, dict) and attribute in deprecated_kwargs:\n\t            values += (deprecated_kwargs.pop(attribute),)\n\t            warning = f\"The `{attribute}` argument is deprecated and will be removed in version {version_name}.\"\n", "        elif hasattr(deprecated_kwargs, attribute):\n\t            values += (getattr(deprecated_kwargs, attribute),)\n\t            warning = f\"The `{attribute}` attribute is deprecated and will be removed in version {version_name}.\"\n\t        elif deprecated_kwargs is None:\n\t            warning = f\"`{attribute}` is deprecated and will be removed in version {version_name}.\"\n\t        if warning is not None:\n\t            warning = warning + \" \" if standard_warn else \"\"\n\t            warnings.warn(warning + message, FutureWarning)\n\t    if isinstance(deprecated_kwargs, dict) and len(deprecated_kwargs) > 0:\n\t        call_frame = inspect.getouterframes(inspect.currentframe())[1]\n", "        filename = call_frame.filename\n\t        line_number = call_frame.lineno\n\t        function = call_frame.function\n\t        key, value = next(iter(deprecated_kwargs.items()))\n\t        raise TypeError(f\"{function} in {filename} line {line_number-1} got an unexpected keyword argument `{key}`\")\n\t    if len(values) == 0:\n\t        return\n\t    elif len(values) == 1:\n\t        return values[0]\n\t    return values\n"]}
{"filename": "diffusers_/utils/testing_utils.py", "chunked_list": ["import inspect\n\timport logging\n\timport os\n\timport random\n\timport re\n\timport unittest\n\timport urllib.parse\n\tfrom distutils.util import strtobool\n\tfrom io import BytesIO, StringIO\n\tfrom pathlib import Path\n", "from typing import Union\n\timport numpy as np\n\timport PIL.Image\n\timport PIL.ImageOps\n\timport requests\n\tfrom packaging import version\n\tfrom .import_utils import is_flax_available, is_onnx_available, is_torch_available\n\tglobal_rng = random.Random()\n\tif is_torch_available():\n\t    import torch\n", "    torch_device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\t    is_torch_higher_equal_than_1_12 = version.parse(version.parse(torch.__version__).base_version) >= version.parse(\n\t        \"1.12\"\n\t    )\n\t    if is_torch_higher_equal_than_1_12:\n\t        # Some builds of torch 1.12 don't have the mps backend registered. See #892 for more details\n\t        mps_backend_registered = hasattr(torch.backends, \"mps\")\n\t        torch_device = \"mps\" if (mps_backend_registered and torch.backends.mps.is_available()) else torch_device\n\tdef torch_all_close(a, b, *args, **kwargs):\n\t    if not is_torch_available():\n", "        raise ValueError(\"PyTorch needs to be installed to use this function.\")\n\t    if not torch.allclose(a, b, *args, **kwargs):\n\t        assert False, f\"Max diff is absolute {(a - b).abs().max()}. Diff tensor is {(a - b).abs()}.\"\n\t    return True\n\tdef get_tests_dir(append_path=None):\n\t    \"\"\"\n\t    Args:\n\t        append_path: optional path to append to the tests dir path\n\t    Return:\n\t        The full path to the `tests` dir, so that the tests can be invoked from anywhere. Optionally `append_path` is\n", "        joined after the `tests` dir the former is provided.\n\t    \"\"\"\n\t    # this function caller's __file__\n\t    caller__file__ = inspect.stack()[1][1]\n\t    tests_dir = os.path.abspath(os.path.dirname(caller__file__))\n\t    while not tests_dir.endswith(\"tests\"):\n\t        tests_dir = os.path.dirname(tests_dir)\n\t    if append_path:\n\t        return os.path.join(tests_dir, append_path)\n\t    else:\n", "        return tests_dir\n\tdef parse_flag_from_env(key, default=False):\n\t    try:\n\t        value = os.environ[key]\n\t    except KeyError:\n\t        # KEY isn't set, default to `default`.\n\t        _value = default\n\t    else:\n\t        # KEY is set, convert it to True or False.\n\t        try:\n", "            _value = strtobool(value)\n\t        except ValueError:\n\t            # More values are supported, but let's keep the message simple.\n\t            raise ValueError(f\"If set, {key} must be yes or no.\")\n\t    return _value\n\t_run_slow_tests = parse_flag_from_env(\"RUN_SLOW\", default=False)\n\tdef floats_tensor(shape, scale=1.0, rng=None, name=None):\n\t    \"\"\"Creates a random float32 tensor\"\"\"\n\t    if rng is None:\n\t        rng = global_rng\n", "    total_dims = 1\n\t    for dim in shape:\n\t        total_dims *= dim\n\t    values = []\n\t    for _ in range(total_dims):\n\t        values.append(rng.random() * scale)\n\t    return torch.tensor(data=values, dtype=torch.float).view(shape).contiguous()\n\tdef slow(test_case):\n\t    \"\"\"\n\t    Decorator marking a test as slow.\n", "    Slow tests are skipped by default. Set the RUN_SLOW environment variable to a truthy value to run them.\n\t    \"\"\"\n\t    return unittest.skipUnless(_run_slow_tests, \"test is slow\")(test_case)\n\tdef require_torch(test_case):\n\t    \"\"\"\n\t    Decorator marking a test that requires PyTorch. These tests are skipped when PyTorch isn't installed.\n\t    \"\"\"\n\t    return unittest.skipUnless(is_torch_available(), \"test requires PyTorch\")(test_case)\n\tdef require_torch_gpu(test_case):\n\t    \"\"\"Decorator marking a test that requires CUDA and PyTorch.\"\"\"\n", "    return unittest.skipUnless(is_torch_available() and torch_device == \"cuda\", \"test requires PyTorch+CUDA\")(\n\t        test_case\n\t    )\n\tdef require_flax(test_case):\n\t    \"\"\"\n\t    Decorator marking a test that requires JAX & Flax. These tests are skipped when one / both are not installed\n\t    \"\"\"\n\t    return unittest.skipUnless(is_flax_available(), \"test requires JAX & Flax\")(test_case)\n\tdef require_onnxruntime(test_case):\n\t    \"\"\"\n", "    Decorator marking a test that requires onnxruntime. These tests are skipped when onnxruntime isn't installed.\n\t    \"\"\"\n\t    return unittest.skipUnless(is_onnx_available(), \"test requires onnxruntime\")(test_case)\n\tdef load_numpy(arry: Union[str, np.ndarray]) -> np.ndarray:\n\t    if isinstance(arry, str):\n\t        if arry.startswith(\"http://\") or arry.startswith(\"https://\"):\n\t            response = requests.get(arry)\n\t            response.raise_for_status()\n\t            arry = np.load(BytesIO(response.content))\n\t        elif os.path.isfile(arry):\n", "            arry = np.load(arry)\n\t        else:\n\t            raise ValueError(\n\t                f\"Incorrect path or url, URLs must start with `http://` or `https://`, and {arry} is not a valid path\"\n\t            )\n\t    elif isinstance(arry, np.ndarray):\n\t        pass\n\t    else:\n\t        raise ValueError(\n\t            \"Incorrect format used for numpy ndarray. Should be an url linking to an image, a local path, or a\"\n", "            \" ndarray.\"\n\t        )\n\t    return arry\n\tdef load_image(image: Union[str, PIL.Image.Image]) -> PIL.Image.Image:\n\t    \"\"\"\n\t    Args:\n\t    Loads `image` to a PIL Image.\n\t        image (`str` or `PIL.Image.Image`):\n\t            The image to convert to the PIL Image format.\n\t    Returns:\n", "        `PIL.Image.Image`: A PIL Image.\n\t    \"\"\"\n\t    if isinstance(image, str):\n\t        if image.startswith(\"http://\") or image.startswith(\"https://\"):\n\t            image = PIL.Image.open(requests.get(image, stream=True).raw)\n\t        elif os.path.isfile(image):\n\t            image = PIL.Image.open(image)\n\t        else:\n\t            raise ValueError(\n\t                f\"Incorrect path or url, URLs must start with `http://` or `https://`, and {image} is not a valid path\"\n", "            )\n\t    elif isinstance(image, PIL.Image.Image):\n\t        image = image\n\t    else:\n\t        raise ValueError(\n\t            \"Incorrect format used for image. Should be an url linking to an image, a local path, or a PIL image.\"\n\t        )\n\t    image = PIL.ImageOps.exif_transpose(image)\n\t    image = image.convert(\"RGB\")\n\t    return image\n", "def load_hf_numpy(path) -> np.ndarray:\n\t    if not path.startswith(\"http://\") or path.startswith(\"https://\"):\n\t        path = os.path.join(\n\t            \"https://huggingface.co/datasets/fusing/diffusers-testing/resolve/main\", urllib.parse.quote(path)\n\t        )\n\t    return load_numpy(path)\n\t# --- pytest conf functions --- #\n\t# to avoid multiple invocation from tests/conftest.py and examples/conftest.py - make sure it's called only once\n\tpytest_opt_registered = {}\n\tdef pytest_addoption_shared(parser):\n", "    \"\"\"\n\t    This function is to be called from `conftest.py` via `pytest_addoption` wrapper that has to be defined there.\n\t    It allows loading both `conftest.py` files at once without causing a failure due to adding the same `pytest`\n\t    option.\n\t    \"\"\"\n\t    option = \"--make-reports\"\n\t    if option not in pytest_opt_registered:\n\t        parser.addoption(\n\t            option,\n\t            action=\"store\",\n", "            default=False,\n\t            help=\"generate report files. The value of this option is used as a prefix to report names\",\n\t        )\n\t        pytest_opt_registered[option] = 1\n\tdef pytest_terminal_summary_main(tr, id):\n\t    \"\"\"\n\t    Generate multiple reports at the end of test suite run - each report goes into a dedicated file in the current\n\t    directory. The report files are prefixed with the test suite name.\n\t    This function emulates --duration and -rA pytest arguments.\n\t    This function is to be called from `conftest.py` via `pytest_terminal_summary` wrapper that has to be defined\n", "    there.\n\t    Args:\n\t    - tr: `terminalreporter` passed from `conftest.py`\n\t    - id: unique id like `tests` or `examples` that will be incorporated into the final reports filenames - this is\n\t      needed as some jobs have multiple runs of pytest, so we can't have them overwrite each other.\n\t    NB: this functions taps into a private _pytest API and while unlikely, it could break should\n\t    pytest do internal changes - also it calls default internal methods of terminalreporter which\n\t    can be hijacked by various `pytest-` plugins and interfere.\n\t    \"\"\"\n\t    from _pytest.config import create_terminal_writer\n", "    if not len(id):\n\t        id = \"tests\"\n\t    config = tr.config\n\t    orig_writer = config.get_terminal_writer()\n\t    orig_tbstyle = config.option.tbstyle\n\t    orig_reportchars = tr.reportchars\n\t    dir = \"reports\"\n\t    Path(dir).mkdir(parents=True, exist_ok=True)\n\t    report_files = {\n\t        k: f\"{dir}/{id}_{k}.txt\"\n", "        for k in [\n\t            \"durations\",\n\t            \"errors\",\n\t            \"failures_long\",\n\t            \"failures_short\",\n\t            \"failures_line\",\n\t            \"passes\",\n\t            \"stats\",\n\t            \"summary_short\",\n\t            \"warnings\",\n", "        ]\n\t    }\n\t    # custom durations report\n\t    # note: there is no need to call pytest --durations=XX to get this separate report\n\t    # adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/runner.py#L66\n\t    dlist = []\n\t    for replist in tr.stats.values():\n\t        for rep in replist:\n\t            if hasattr(rep, \"duration\"):\n\t                dlist.append(rep)\n", "    if dlist:\n\t        dlist.sort(key=lambda x: x.duration, reverse=True)\n\t        with open(report_files[\"durations\"], \"w\") as f:\n\t            durations_min = 0.05  # sec\n\t            f.write(\"slowest durations\\n\")\n\t            for i, rep in enumerate(dlist):\n\t                if rep.duration < durations_min:\n\t                    f.write(f\"{len(dlist)-i} durations < {durations_min} secs were omitted\")\n\t                    break\n\t                f.write(f\"{rep.duration:02.2f}s {rep.when:<8} {rep.nodeid}\\n\")\n", "    def summary_failures_short(tr):\n\t        # expecting that the reports were --tb=long (default) so we chop them off here to the last frame\n\t        reports = tr.getreports(\"failed\")\n\t        if not reports:\n\t            return\n\t        tr.write_sep(\"=\", \"FAILURES SHORT STACK\")\n\t        for rep in reports:\n\t            msg = tr._getfailureheadline(rep)\n\t            tr.write_sep(\"_\", msg, red=True, bold=True)\n\t            # chop off the optional leading extra frames, leaving only the last one\n", "            longrepr = re.sub(r\".*_ _ _ (_ ){10,}_ _ \", \"\", rep.longreprtext, 0, re.M | re.S)\n\t            tr._tw.line(longrepr)\n\t            # note: not printing out any rep.sections to keep the report short\n\t    # use ready-made report funcs, we are just hijacking the filehandle to log to a dedicated file each\n\t    # adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/terminal.py#L814\n\t    # note: some pytest plugins may interfere by hijacking the default `terminalreporter` (e.g.\n\t    # pytest-instafail does that)\n\t    # report failures with line/short/long styles\n\t    config.option.tbstyle = \"auto\"  # full tb\n\t    with open(report_files[\"failures_long\"], \"w\") as f:\n", "        tr._tw = create_terminal_writer(config, f)\n\t        tr.summary_failures()\n\t    # config.option.tbstyle = \"short\" # short tb\n\t    with open(report_files[\"failures_short\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        summary_failures_short(tr)\n\t    config.option.tbstyle = \"line\"  # one line per error\n\t    with open(report_files[\"failures_line\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        tr.summary_failures()\n", "    with open(report_files[\"errors\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        tr.summary_errors()\n\t    with open(report_files[\"warnings\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        tr.summary_warnings()  # normal warnings\n\t        tr.summary_warnings()  # final warnings\n\t    tr.reportchars = \"wPpsxXEf\"  # emulate -rA (used in summary_passes() and short_test_summary())\n\t    with open(report_files[\"passes\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n", "        tr.summary_passes()\n\t    with open(report_files[\"summary_short\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        tr.short_test_summary()\n\t    with open(report_files[\"stats\"], \"w\") as f:\n\t        tr._tw = create_terminal_writer(config, f)\n\t        tr.summary_stats()\n\t    # restore:\n\t    tr._tw = orig_writer\n\t    tr.reportchars = orig_reportchars\n", "    config.option.tbstyle = orig_tbstyle\n\tclass CaptureLogger:\n\t    \"\"\"\n\t    Args:\n\t    Context manager to capture `logging` streams\n\t        logger: 'logging` logger object\n\t    Returns:\n\t        The captured output is available via `self.out`\n\t    Example:\n\t    ```python\n", "    >>> from diffusers import logging\n\t    >>> from diffusers.testing_utils import CaptureLogger\n\t    >>> msg = \"Testing 1, 2, 3\"\n\t    >>> logging.set_verbosity_info()\n\t    >>> logger = logging.get_logger(\"diffusers.pipelines.stable_diffusion.pipeline_stable_diffusion.py\")\n\t    >>> with CaptureLogger(logger) as cl:\n\t    ...     logger.info(msg)\n\t    >>> assert cl.out, msg + \"\\n\"\n\t    ```\n\t    \"\"\"\n", "    def __init__(self, logger):\n\t        self.logger = logger\n\t        self.io = StringIO()\n\t        self.sh = logging.StreamHandler(self.io)\n\t        self.out = \"\"\n\t    def __enter__(self):\n\t        self.logger.addHandler(self.sh)\n\t        return self\n\t    def __exit__(self, *exc):\n\t        self.logger.removeHandler(self.sh)\n", "        self.out = self.io.getvalue()\n\t    def __repr__(self):\n\t        return f\"captured: {self.out}\\n\"\n"]}
{"filename": "diffusers_/utils/import_utils.py", "chunked_list": ["# Copyright 2022 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"\n\tImport utilities: Utilities related to imports and our lazy inits.\n\t\"\"\"\n\timport importlib.util\n\timport operator as op\n\timport os\n\timport sys\n", "from collections import OrderedDict\n\tfrom typing import Union\n\tfrom packaging import version\n\tfrom packaging.version import Version, parse\n\tfrom . import logging\n\t# The package importlib_metadata is in a different place, depending on the python version.\n\tif sys.version_info < (3, 8):\n\t    import importlib_metadata\n\telse:\n\t    import importlib.metadata as importlib_metadata\n", "logger = logging.get_logger(__name__)  # pylint: disable=invalid-name\n\tENV_VARS_TRUE_VALUES = {\"1\", \"ON\", \"YES\", \"TRUE\"}\n\tENV_VARS_TRUE_AND_AUTO_VALUES = ENV_VARS_TRUE_VALUES.union({\"AUTO\"})\n\tUSE_TF = os.environ.get(\"USE_TF\", \"AUTO\").upper()\n\tUSE_TORCH = os.environ.get(\"USE_TORCH\", \"AUTO\").upper()\n\tUSE_JAX = os.environ.get(\"USE_FLAX\", \"AUTO\").upper()\n\tSTR_OPERATION_TO_FUNC = {\">\": op.gt, \">=\": op.ge, \"==\": op.eq, \"!=\": op.ne, \"<=\": op.le, \"<\": op.lt}\n\t_torch_version = \"N/A\"\n\tif USE_TORCH in ENV_VARS_TRUE_AND_AUTO_VALUES and USE_TF not in ENV_VARS_TRUE_VALUES:\n\t    _torch_available = importlib.util.find_spec(\"torch\") is not None\n", "    if _torch_available:\n\t        try:\n\t            _torch_version = importlib_metadata.version(\"torch\")\n\t            logger.info(f\"PyTorch version {_torch_version} available.\")\n\t        except importlib_metadata.PackageNotFoundError:\n\t            _torch_available = False\n\telse:\n\t    logger.info(\"Disabling PyTorch because USE_TF is set\")\n\t    _torch_available = False\n\t_tf_version = \"N/A\"\n", "if USE_TF in ENV_VARS_TRUE_AND_AUTO_VALUES and USE_TORCH not in ENV_VARS_TRUE_VALUES:\n\t    _tf_available = importlib.util.find_spec(\"tensorflow\") is not None\n\t    if _tf_available:\n\t        candidates = (\n\t            \"tensorflow\",\n\t            \"tensorflow-cpu\",\n\t            \"tensorflow-gpu\",\n\t            \"tf-nightly\",\n\t            \"tf-nightly-cpu\",\n\t            \"tf-nightly-gpu\",\n", "            \"intel-tensorflow\",\n\t            \"intel-tensorflow-avx512\",\n\t            \"tensorflow-rocm\",\n\t            \"tensorflow-macos\",\n\t            \"tensorflow-aarch64\",\n\t        )\n\t        _tf_version = None\n\t        # For the metadata, we have to look for both tensorflow and tensorflow-cpu\n\t        for pkg in candidates:\n\t            try:\n", "                _tf_version = importlib_metadata.version(pkg)\n\t                break\n\t            except importlib_metadata.PackageNotFoundError:\n\t                pass\n\t        _tf_available = _tf_version is not None\n\t    if _tf_available:\n\t        if version.parse(_tf_version) < version.parse(\"2\"):\n\t            logger.info(f\"TensorFlow found but with version {_tf_version}. Diffusers requires version 2 minimum.\")\n\t            _tf_available = False\n\t        else:\n", "            logger.info(f\"TensorFlow version {_tf_version} available.\")\n\telse:\n\t    logger.info(\"Disabling Tensorflow because USE_TORCH is set\")\n\t    _tf_available = False\n\t_jax_version = \"N/A\"\n\t_flax_version = \"N/A\"\n\tif USE_JAX in ENV_VARS_TRUE_AND_AUTO_VALUES:\n\t    _flax_available = importlib.util.find_spec(\"jax\") is not None and importlib.util.find_spec(\"flax\") is not None\n\t    if _flax_available:\n\t        try:\n", "            _jax_version = importlib_metadata.version(\"jax\")\n\t            _flax_version = importlib_metadata.version(\"flax\")\n\t            logger.info(f\"JAX version {_jax_version}, Flax version {_flax_version} available.\")\n\t        except importlib_metadata.PackageNotFoundError:\n\t            _flax_available = False\n\telse:\n\t    _flax_available = False\n\t_transformers_available = importlib.util.find_spec(\"transformers\") is not None\n\ttry:\n\t    _transformers_version = importlib_metadata.version(\"transformers\")\n", "    logger.debug(f\"Successfully imported transformers version {_transformers_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n\t    _transformers_available = False\n\t_inflect_available = importlib.util.find_spec(\"inflect\") is not None\n\ttry:\n\t    _inflect_version = importlib_metadata.version(\"inflect\")\n\t    logger.debug(f\"Successfully imported inflect version {_inflect_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n\t    _inflect_available = False\n\t_unidecode_available = importlib.util.find_spec(\"unidecode\") is not None\n", "try:\n\t    _unidecode_version = importlib_metadata.version(\"unidecode\")\n\t    logger.debug(f\"Successfully imported unidecode version {_unidecode_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n\t    _unidecode_available = False\n\t_modelcards_available = importlib.util.find_spec(\"modelcards\") is not None\n\ttry:\n\t    _modelcards_version = importlib_metadata.version(\"modelcards\")\n\t    logger.debug(f\"Successfully imported modelcards version {_modelcards_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n", "    _modelcards_available = False\n\t_onnxruntime_version = \"N/A\"\n\t_onnx_available = importlib.util.find_spec(\"onnxruntime\") is not None\n\tif _onnx_available:\n\t    candidates = (\"onnxruntime\", \"onnxruntime-gpu\", \"onnxruntime-directml\", \"onnxruntime-openvino\")\n\t    _onnxruntime_version = None\n\t    # For the metadata, we have to look for both onnxruntime and onnxruntime-gpu\n\t    for pkg in candidates:\n\t        try:\n\t            _onnxruntime_version = importlib_metadata.version(pkg)\n", "            break\n\t        except importlib_metadata.PackageNotFoundError:\n\t            pass\n\t    _onnx_available = _onnxruntime_version is not None\n\t    if _onnx_available:\n\t        logger.debug(f\"Successfully imported onnxruntime version {_onnxruntime_version}\")\n\t_scipy_available = importlib.util.find_spec(\"scipy\") is not None\n\ttry:\n\t    _scipy_version = importlib_metadata.version(\"scipy\")\n\t    logger.debug(f\"Successfully imported transformers version {_scipy_version}\")\n", "except importlib_metadata.PackageNotFoundError:\n\t    _scipy_available = False\n\t_accelerate_available = importlib.util.find_spec(\"accelerate\") is not None\n\ttry:\n\t    _accelerate_version = importlib_metadata.version(\"accelerate\")\n\t    logger.debug(f\"Successfully imported accelerate version {_accelerate_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n\t    _accelerate_available = False\n\t_xformers_available = importlib.util.find_spec(\"xformers\") is not None\n\ttry:\n", "    _xformers_version = importlib_metadata.version(\"xformers\")\n\t    if _torch_available:\n\t        import torch\n\t        if torch.__version__ < version.Version(\"1.12\"):\n\t            raise ValueError(\"PyTorch should be >= 1.12\")\n\t    logger.debug(f\"Successfully imported xformers version {_xformers_version}\")\n\texcept importlib_metadata.PackageNotFoundError:\n\t    _xformers_available = False\n\tdef is_torch_available():\n\t    return _torch_available\n", "def is_tf_available():\n\t    return _tf_available\n\tdef is_flax_available():\n\t    return _flax_available\n\tdef is_transformers_available():\n\t    return _transformers_available\n\tdef is_inflect_available():\n\t    return _inflect_available\n\tdef is_unidecode_available():\n\t    return _unidecode_available\n", "def is_modelcards_available():\n\t    return _modelcards_available\n\tdef is_onnx_available():\n\t    return _onnx_available\n\tdef is_scipy_available():\n\t    return _scipy_available\n\tdef is_xformers_available():\n\t    return _xformers_available\n\tdef is_accelerate_available():\n\t    return _accelerate_available\n", "# docstyle-ignore\n\tFLAX_IMPORT_ERROR = \"\"\"\n\t{0} requires the FLAX library but it was not found in your environment. Checkout the instructions on the\n\tinstallation page: https://github.com/google/flax and follow the ones that match your environment.\n\t\"\"\"\n\t# docstyle-ignore\n\tINFLECT_IMPORT_ERROR = \"\"\"\n\t{0} requires the inflect library but it was not found in your environment. You can install it with pip: `pip install\n\tinflect`\n\t\"\"\"\n", "# docstyle-ignore\n\tPYTORCH_IMPORT_ERROR = \"\"\"\n\t{0} requires the PyTorch library but it was not found in your environment. Checkout the instructions on the\n\tinstallation page: https://pytorch.org/get-started/locally/ and follow the ones that match your environment.\n\t\"\"\"\n\t# docstyle-ignore\n\tONNX_IMPORT_ERROR = \"\"\"\n\t{0} requires the onnxruntime library but it was not found in your environment. You can install it with pip: `pip\n\tinstall onnxruntime`\n\t\"\"\"\n", "# docstyle-ignore\n\tSCIPY_IMPORT_ERROR = \"\"\"\n\t{0} requires the scipy library but it was not found in your environment. You can install it with pip: `pip install\n\tscipy`\n\t\"\"\"\n\t# docstyle-ignore\n\tTENSORFLOW_IMPORT_ERROR = \"\"\"\n\t{0} requires the TensorFlow library but it was not found in your environment. Checkout the instructions on the\n\tinstallation page: https://www.tensorflow.org/install and follow the ones that match your environment.\n\t\"\"\"\n", "# docstyle-ignore\n\tTRANSFORMERS_IMPORT_ERROR = \"\"\"\n\t{0} requires the transformers library but it was not found in your environment. You can install it with pip: `pip\n\tinstall transformers`\n\t\"\"\"\n\t# docstyle-ignore\n\tUNIDECODE_IMPORT_ERROR = \"\"\"\n\t{0} requires the unidecode library but it was not found in your environment. You can install it with pip: `pip install\n\tUnidecode`\n\t\"\"\"\n", "BACKENDS_MAPPING = OrderedDict(\n\t    [\n\t        (\"flax\", (is_flax_available, FLAX_IMPORT_ERROR)),\n\t        (\"inflect\", (is_inflect_available, INFLECT_IMPORT_ERROR)),\n\t        (\"onnx\", (is_onnx_available, ONNX_IMPORT_ERROR)),\n\t        (\"scipy\", (is_scipy_available, SCIPY_IMPORT_ERROR)),\n\t        (\"tf\", (is_tf_available, TENSORFLOW_IMPORT_ERROR)),\n\t        (\"torch\", (is_torch_available, PYTORCH_IMPORT_ERROR)),\n\t        (\"transformers\", (is_transformers_available, TRANSFORMERS_IMPORT_ERROR)),\n\t        (\"unidecode\", (is_unidecode_available, UNIDECODE_IMPORT_ERROR)),\n", "    ]\n\t)\n\tdef requires_backends(obj, backends):\n\t    if not isinstance(backends, (list, tuple)):\n\t        backends = [backends]\n\t    name = obj.__name__ if hasattr(obj, \"__name__\") else obj.__class__.__name__\n\t    checks = (BACKENDS_MAPPING[backend] for backend in backends)\n\t    failed = [msg.format(name) for available, msg in checks if not available()]\n\t    if failed:\n\t        raise ImportError(\"\".join(failed))\n", "    if name in [\n\t        \"VersatileDiffusionTextToImagePipeline\",\n\t        \"VersatileDiffusionPipeline\",\n\t        \"VersatileDiffusionDualGuidedPipeline\",\n\t        \"StableDiffusionImageVariationPipeline\",\n\t    ] and is_transformers_version(\"<\", \"4.25.0.dev0\"):\n\t        raise ImportError(\n\t            f\"You need to install `transformers` from 'main' in order to use {name}: \\n```\\n pip install\"\n\t            \" git+https://github.com/huggingface/transformers \\n```\"\n\t        )\n", "class DummyObject(type):\n\t    \"\"\"\n\t    Metaclass for the dummy objects. Any class inheriting from it will return the ImportError generated by\n\t    `requires_backend` each time a user tries to access any method of that class.\n\t    \"\"\"\n\t    def __getattr__(cls, key):\n\t        if key.startswith(\"_\"):\n\t            return super().__getattr__(cls, key)\n\t        requires_backends(cls, cls._backends)\n\t# This function was copied from: https://github.com/huggingface/accelerate/blob/874c4967d94badd24f893064cc3bef45f57cadf7/src/accelerate/utils/versions.py#L319\n", "def compare_versions(library_or_version: Union[str, Version], operation: str, requirement_version: str):\n\t    \"\"\"\n\t    Args:\n\t    Compares a library version to some requirement using a given operation.\n\t        library_or_version (`str` or `packaging.version.Version`):\n\t            A library name or a version to check.\n\t        operation (`str`):\n\t            A string representation of an operator, such as `\">\"` or `\"<=\"`.\n\t        requirement_version (`str`):\n\t            The version to compare the library version against\n", "    \"\"\"\n\t    if operation not in STR_OPERATION_TO_FUNC.keys():\n\t        raise ValueError(f\"`operation` must be one of {list(STR_OPERATION_TO_FUNC.keys())}, received {operation}\")\n\t    operation = STR_OPERATION_TO_FUNC[operation]\n\t    if isinstance(library_or_version, str):\n\t        library_or_version = parse(importlib_metadata.version(library_or_version))\n\t    return operation(library_or_version, parse(requirement_version))\n\t# This function was copied from: https://github.com/huggingface/accelerate/blob/874c4967d94badd24f893064cc3bef45f57cadf7/src/accelerate/utils/versions.py#L338\n\tdef is_torch_version(operation: str, version: str):\n\t    \"\"\"\n", "    Args:\n\t    Compares the current PyTorch version to a given reference with an operation.\n\t        operation (`str`):\n\t            A string representation of an operator, such as `\">\"` or `\"<=\"`\n\t        version (`str`):\n\t            A string version of PyTorch\n\t    \"\"\"\n\t    return compare_versions(parse(_torch_version), operation, version)\n\tdef is_transformers_version(operation: str, version: str):\n\t    \"\"\"\n", "    Args:\n\t    Compares the current Transformers version to a given reference with an operation.\n\t        operation (`str`):\n\t            A string representation of an operator, such as `\">\"` or `\"<=\"`\n\t        version (`str`):\n\t            A string version of PyTorch\n\t    \"\"\"\n\t    if not _transformers_available:\n\t        return False\n\t    return compare_versions(parse(_transformers_version), operation, version)\n"]}
{"filename": "diffusers_/utils/pil_utils.py", "chunked_list": ["import PIL.Image\n\timport PIL.ImageOps\n\tfrom packaging import version\n\tif version.parse(version.parse(PIL.__version__).base_version) >= version.parse(\"9.1.0\"):\n\t    PIL_INTERPOLATION = {\n\t        \"linear\": PIL.Image.Resampling.BILINEAR,\n\t        \"bilinear\": PIL.Image.Resampling.BILINEAR,\n\t        \"bicubic\": PIL.Image.Resampling.BICUBIC,\n\t        \"lanczos\": PIL.Image.Resampling.LANCZOS,\n\t        \"nearest\": PIL.Image.Resampling.NEAREST,\n", "    }\n\telse:\n\t    PIL_INTERPOLATION = {\n\t        \"linear\": PIL.Image.LINEAR,\n\t        \"bilinear\": PIL.Image.BILINEAR,\n\t        \"bicubic\": PIL.Image.BICUBIC,\n\t        \"lanczos\": PIL.Image.LANCZOS,\n\t        \"nearest\": PIL.Image.NEAREST,\n\t    }\n"]}
{"filename": "diffusers_/utils/__init__.py", "chunked_list": ["# Copyright 2022 The HuggingFace Inc. team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport os\n\tfrom .deprecation_utils import deprecate\n\tfrom .import_utils import (\n\t    ENV_VARS_TRUE_AND_AUTO_VALUES,\n\t    ENV_VARS_TRUE_VALUES,\n\t    USE_JAX,\n\t    USE_TF,\n", "    USE_TORCH,\n\t    DummyObject,\n\t    is_accelerate_available,\n\t    is_flax_available,\n\t    is_inflect_available,\n\t    is_modelcards_available,\n\t    is_onnx_available,\n\t    is_scipy_available,\n\t    is_tf_available,\n\t    is_torch_available,\n", "    is_torch_version,\n\t    is_transformers_available,\n\t    is_transformers_version,\n\t    is_unidecode_available,\n\t    requires_backends,\n\t)\n\tfrom .logging import get_logger\n\tfrom .outputs import BaseOutput\n\tfrom .pil_utils import PIL_INTERPOLATION\n\tif is_torch_available():\n", "    from .testing_utils import (\n\t        floats_tensor,\n\t        load_hf_numpy,\n\t        load_image,\n\t        load_numpy,\n\t        parse_flag_from_env,\n\t        require_torch_gpu,\n\t        slow,\n\t        torch_all_close,\n\t        torch_device,\n", "    )\n\tlogger = get_logger(__name__)\n\thf_cache_home = os.path.expanduser(\n\t    os.getenv(\"HF_HOME\", os.path.join(os.getenv(\"XDG_CACHE_HOME\", \"~/.cache\"), \"huggingface\"))\n\t)\n\tdefault_cache_path = os.path.join(hf_cache_home, \"diffusers\")\n\tCONFIG_NAME = \"config.json\"\n\tWEIGHTS_NAME = \"diffusion_pytorch_model.bin\"\n\tFLAX_WEIGHTS_NAME = \"diffusion_flax_model.msgpack\"\n\tONNX_WEIGHTS_NAME = \"model.onnx\"\n", "ONNX_EXTERNAL_WEIGHTS_NAME = \"weights.pb\"\n\tHUGGINGFACE_CO_RESOLVE_ENDPOINT = \"https://huggingface.co\"\n\tDIFFUSERS_CACHE = default_cache_path\n\tDIFFUSERS_DYNAMIC_MODULE_NAME = \"diffusers_modules\"\n\tHF_MODULES_CACHE = os.getenv(\"HF_MODULES_CACHE\", os.path.join(hf_cache_home, \"modules\"))\n\t_COMPATIBLE_STABLE_DIFFUSION_SCHEDULERS = [\n\t    \"DDIMScheduler\",\n\t    \"DDPMScheduler\",\n\t    \"PNDMScheduler\",\n\t    \"LMSDiscreteScheduler\",\n", "    \"EulerDiscreteScheduler\",\n\t    \"EulerAncestralDiscreteScheduler\",\n\t    \"DPMSolverMultistepScheduler\",\n\t]\n"]}
{"filename": "diffusers_/utils/logging.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2020 Optuna, Hugging Face\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\" Logging utilities.\"\"\"\n\timport logging\n\timport os\n\timport sys\n\timport threading\n\tfrom logging import CRITICAL  # NOQA\n", "from logging import DEBUG  # NOQA\n\tfrom logging import ERROR  # NOQA\n\tfrom logging import FATAL  # NOQA\n\tfrom logging import INFO  # NOQA\n\tfrom logging import NOTSET  # NOQA\n\tfrom logging import WARN  # NOQA\n\tfrom logging import WARNING  # NOQA\n\tfrom typing import Optional\n\tfrom tqdm import auto as tqdm_lib\n\t_lock = threading.Lock()\n", "_default_handler: Optional[logging.Handler] = None\n\tlog_levels = {\n\t    \"debug\": logging.DEBUG,\n\t    \"info\": logging.INFO,\n\t    \"warning\": logging.WARNING,\n\t    \"error\": logging.ERROR,\n\t    \"critical\": logging.CRITICAL,\n\t}\n\t_default_log_level = logging.WARNING\n\t_tqdm_active = True\n", "def _get_default_logging_level():\n\t    \"\"\"\n\t    If DIFFUSERS_VERBOSITY env var is set to one of the valid choices return that as the new default level. If it is\n\t    not - fall back to `_default_log_level`\n\t    \"\"\"\n\t    env_level_str = os.getenv(\"DIFFUSERS_VERBOSITY\", None)\n\t    if env_level_str:\n\t        if env_level_str in log_levels:\n\t            return log_levels[env_level_str]\n\t        else:\n", "            logging.getLogger().warning(\n\t                f\"Unknown option DIFFUSERS_VERBOSITY={env_level_str}, \"\n\t                f\"has to be one of: { ', '.join(log_levels.keys()) }\"\n\t            )\n\t    return _default_log_level\n\tdef _get_library_name() -> str:\n\t    return __name__.split(\".\")[0]\n\tdef _get_library_root_logger() -> logging.Logger:\n\t    return logging.getLogger(_get_library_name())\n\tdef _configure_library_root_logger() -> None:\n", "    global _default_handler\n\t    with _lock:\n\t        if _default_handler:\n\t            # This library has already configured the library root logger.\n\t            return\n\t        _default_handler = logging.StreamHandler()  # Set sys.stderr as stream.\n\t        _default_handler.flush = sys.stderr.flush\n\t        # Apply our default configuration to the library root logger.\n\t        library_root_logger = _get_library_root_logger()\n\t        library_root_logger.addHandler(_default_handler)\n", "        library_root_logger.setLevel(_get_default_logging_level())\n\t        library_root_logger.propagate = False\n\tdef _reset_library_root_logger() -> None:\n\t    global _default_handler\n\t    with _lock:\n\t        if not _default_handler:\n\t            return\n\t        library_root_logger = _get_library_root_logger()\n\t        library_root_logger.removeHandler(_default_handler)\n\t        library_root_logger.setLevel(logging.NOTSET)\n", "        _default_handler = None\n\tdef get_log_levels_dict():\n\t    return log_levels\n\tdef get_logger(name: Optional[str] = None) -> logging.Logger:\n\t    \"\"\"\n\t    Return a logger with the specified name.\n\t    This function is not supposed to be directly accessed unless you are writing a custom diffusers module.\n\t    \"\"\"\n\t    if name is None:\n\t        name = _get_library_name()\n", "    _configure_library_root_logger()\n\t    return logging.getLogger(name)\n\tdef get_verbosity() -> int:\n\t    \"\"\"\n\t    Return the current level for the 🤗 Diffusers' root logger as an int.\n\t    Returns:\n\t        `int`: The logging level.\n\t    <Tip>\n\t    🤗 Diffusers has following logging levels:\n\t    - 50: `diffusers.logging.CRITICAL` or `diffusers.logging.FATAL`\n", "    - 40: `diffusers.logging.ERROR`\n\t    - 30: `diffusers.logging.WARNING` or `diffusers.logging.WARN`\n\t    - 20: `diffusers.logging.INFO`\n\t    - 10: `diffusers.logging.DEBUG`\n\t    </Tip>\"\"\"\n\t    _configure_library_root_logger()\n\t    return _get_library_root_logger().getEffectiveLevel()\n\tdef set_verbosity(verbosity: int) -> None:\n\t    \"\"\"\n\t    Set the verbosity level for the 🤗 Diffusers' root logger.\n", "    Args:\n\t        verbosity (`int`):\n\t            Logging level, e.g., one of:\n\t            - `diffusers.logging.CRITICAL` or `diffusers.logging.FATAL`\n\t            - `diffusers.logging.ERROR`\n\t            - `diffusers.logging.WARNING` or `diffusers.logging.WARN`\n\t            - `diffusers.logging.INFO`\n\t            - `diffusers.logging.DEBUG`\n\t    \"\"\"\n\t    _configure_library_root_logger()\n", "    _get_library_root_logger().setLevel(verbosity)\n\tdef set_verbosity_info():\n\t    \"\"\"Set the verbosity to the `INFO` level.\"\"\"\n\t    return set_verbosity(INFO)\n\tdef set_verbosity_warning():\n\t    \"\"\"Set the verbosity to the `WARNING` level.\"\"\"\n\t    return set_verbosity(WARNING)\n\tdef set_verbosity_debug():\n\t    \"\"\"Set the verbosity to the `DEBUG` level.\"\"\"\n\t    return set_verbosity(DEBUG)\n", "def set_verbosity_error():\n\t    \"\"\"Set the verbosity to the `ERROR` level.\"\"\"\n\t    return set_verbosity(ERROR)\n\tdef disable_default_handler() -> None:\n\t    \"\"\"Disable the default handler of the HuggingFace Diffusers' root logger.\"\"\"\n\t    _configure_library_root_logger()\n\t    assert _default_handler is not None\n\t    _get_library_root_logger().removeHandler(_default_handler)\n\tdef enable_default_handler() -> None:\n\t    \"\"\"Enable the default handler of the HuggingFace Diffusers' root logger.\"\"\"\n", "    _configure_library_root_logger()\n\t    assert _default_handler is not None\n\t    _get_library_root_logger().addHandler(_default_handler)\n\tdef add_handler(handler: logging.Handler) -> None:\n\t    \"\"\"adds a handler to the HuggingFace Diffusers' root logger.\"\"\"\n\t    _configure_library_root_logger()\n\t    assert handler is not None\n\t    _get_library_root_logger().addHandler(handler)\n\tdef remove_handler(handler: logging.Handler) -> None:\n\t    \"\"\"removes given handler from the HuggingFace Diffusers' root logger.\"\"\"\n", "    _configure_library_root_logger()\n\t    assert handler is not None and handler not in _get_library_root_logger().handlers\n\t    _get_library_root_logger().removeHandler(handler)\n\tdef disable_propagation() -> None:\n\t    \"\"\"\n\t    Disable propagation of the library log outputs. Note that log propagation is disabled by default.\n\t    \"\"\"\n\t    _configure_library_root_logger()\n\t    _get_library_root_logger().propagate = False\n\tdef enable_propagation() -> None:\n", "    \"\"\"\n\t    Enable propagation of the library log outputs. Please disable the HuggingFace Diffusers' default handler to prevent\n\t    double logging if the root logger has been configured.\n\t    \"\"\"\n\t    _configure_library_root_logger()\n\t    _get_library_root_logger().propagate = True\n\tdef enable_explicit_format() -> None:\n\t    \"\"\"\n\t    Enable explicit formatting for every HuggingFace Diffusers' logger. The explicit formatter is as follows:\n\t    ```\n", "        [LEVELNAME|FILENAME|LINE NUMBER] TIME >> MESSAGE\n\t    ```\n\t    All handlers currently bound to the root logger are affected by this method.\n\t    \"\"\"\n\t    handlers = _get_library_root_logger().handlers\n\t    for handler in handlers:\n\t        formatter = logging.Formatter(\"[%(levelname)s|%(filename)s:%(lineno)s] %(asctime)s >> %(message)s\")\n\t        handler.setFormatter(formatter)\n\tdef reset_format() -> None:\n\t    \"\"\"\n", "    Resets the formatting for HuggingFace Diffusers' loggers.\n\t    All handlers currently bound to the root logger are affected by this method.\n\t    \"\"\"\n\t    handlers = _get_library_root_logger().handlers\n\t    for handler in handlers:\n\t        handler.setFormatter(None)\n\tdef warning_advice(self, *args, **kwargs):\n\t    \"\"\"\n\t    This method is identical to `logger.warning()`, but if env var DIFFUSERS_NO_ADVISORY_WARNINGS=1 is set, this\n\t    warning will not be printed\n", "    \"\"\"\n\t    no_advisory_warnings = os.getenv(\"DIFFUSERS_NO_ADVISORY_WARNINGS\", False)\n\t    if no_advisory_warnings:\n\t        return\n\t    self.warning(*args, **kwargs)\n\tlogging.Logger.warning_advice = warning_advice\n\tclass EmptyTqdm:\n\t    \"\"\"Dummy tqdm which doesn't do anything.\"\"\"\n\t    def __init__(self, *args, **kwargs):  # pylint: disable=unused-argument\n\t        self._iterator = args[0] if args else None\n", "    def __iter__(self):\n\t        return iter(self._iterator)\n\t    def __getattr__(self, _):\n\t        \"\"\"Return empty function.\"\"\"\n\t        def empty_fn(*args, **kwargs):  # pylint: disable=unused-argument\n\t            return\n\t        return empty_fn\n\t    def __enter__(self):\n\t        return self\n\t    def __exit__(self, type_, value, traceback):\n", "        return\n\tclass _tqdm_cls:\n\t    def __call__(self, *args, **kwargs):\n\t        if _tqdm_active:\n\t            return tqdm_lib.tqdm(*args, **kwargs)\n\t        else:\n\t            return EmptyTqdm(*args, **kwargs)\n\t    def set_lock(self, *args, **kwargs):\n\t        self._lock = None\n\t        if _tqdm_active:\n", "            return tqdm_lib.tqdm.set_lock(*args, **kwargs)\n\t    def get_lock(self):\n\t        if _tqdm_active:\n\t            return tqdm_lib.tqdm.get_lock()\n\ttqdm = _tqdm_cls()\n\tdef is_progress_bar_enabled() -> bool:\n\t    \"\"\"Return a boolean indicating whether tqdm progress bars are enabled.\"\"\"\n\t    global _tqdm_active\n\t    return bool(_tqdm_active)\n\tdef enable_progress_bar():\n", "    \"\"\"Enable tqdm progress bar.\"\"\"\n\t    global _tqdm_active\n\t    _tqdm_active = True\n\tdef disable_progress_bar():\n\t    \"\"\"Disable tqdm progress bar.\"\"\"\n\t    global _tqdm_active\n\t    _tqdm_active = False\n"]}
{"filename": "diffusers_/stable_diffusion/pipeline_stable_diffusion.py", "chunked_list": ["import inspect\n\tfrom typing import Callable, List, Optional, Union\n\timport torch\n\tfrom diffusers.utils import is_accelerate_available\n\tfrom packaging import version\n\tfrom ..configuration_utils import FrozenDict\n\tfrom ..pipeline_utils import DiffusionPipeline\n\tfrom ..utils import deprecate, logging\n\tfrom . import StableDiffusionPipelineOutput\n\tfrom .safety_checker import StableDiffusionSafetyChecker\n", "logger = logging.get_logger(__name__)  # pylint: disable=invalid-name\n\tclass StableDiffusionPipeline(DiffusionPipeline):\n\t    r\"\"\"\n\t    Pipeline for text-to-image generation using Stable Diffusion.\n\t    This model inherits from [`DiffusionPipeline`]. Check the superclass documentation for the generic methods the\n\t    library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)\n\t    Args:\n\t        vae ([`AutoencoderKL`]):\n\t            Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.\n\t        text_encoder ([`CLIPTextModel`]):\n", "            Frozen text-encoder. Stable Diffusion uses the text portion of\n\t            [CLIP](https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel), specifically\n\t            the [clip-vit-large-patch14](https://huggingface.co/openai/clip-vit-large-patch14) variant.\n\t        tokenizer (`CLIPTokenizer`):\n\t            Tokenizer of class\n\t            [CLIPTokenizer](https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer).\n\t        unet ([`UNet2DConditionModel`]): Conditional U-Net architecture to denoise the encoded image latents.\n\t        scheduler ([`SchedulerMixin`]):\n\t            A scheduler to be used in combination with `unet` to denoise the encoded image latens. Can be one of\n\t            [`DDIMScheduler`], [`LMSDiscreteScheduler`], or [`PNDMScheduler`].\n", "        safety_checker ([`StableDiffusionSafetyChecker`]):\n\t            Classification module that estimates whether generated images could be considered offensive or harmful.\n\t            Please, refer to the [model card](https://huggingface.co/runwayml/stable-diffusion-v1-5) for details.\n\t        feature_extractor ([`CLIPFeatureExtractor`]):\n\t            Model that extracts features from generated images to be used as inputs for the `safety_checker`.\n\t    \"\"\"\n\t    _optional_components = [\"safety_checker\", \"feature_extractor\"]\n\t    def __init__(\n\t        self,\n\t        vae,\n", "        text_encoder,\n\t        tokenizer,\n\t        unet,\n\t        scheduler,\n\t        safety_checker,\n\t        feature_extractor,\n\t        requires_safety_checker: bool = False,\n\t    ):\n\t        super().__init__()\n\t        if hasattr(scheduler.config, \"steps_offset\") and scheduler.config.steps_offset != 1:\n", "            deprecation_message = (\n\t                f\"The configuration file of this scheduler: {scheduler} is outdated. `steps_offset`\"\n\t                f\" should be set to 1 instead of {scheduler.config.steps_offset}. Please make sure \"\n\t                \"to update the config accordingly as leaving `steps_offset` might led to incorrect results\"\n\t                \" in future versions. If you have downloaded this checkpoint from the Hugging Face Hub,\"\n\t                \" it would be very nice if you could open a Pull request for the `scheduler/scheduler_config.json`\"\n\t                \" file\"\n\t            )\n\t            deprecate(\"steps_offset!=1\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t            new_config = dict(scheduler.config)\n", "            new_config[\"steps_offset\"] = 1\n\t            scheduler._internal_dict = FrozenDict(new_config)\n\t        if hasattr(scheduler.config, \"clip_sample\") and scheduler.config.clip_sample is True:\n\t            deprecation_message = (\n\t                f\"The configuration file of this scheduler: {scheduler} has not set the configuration `clip_sample`.\"\n\t                \" `clip_sample` should be set to False in the configuration file. Please make sure to update the\"\n\t                \" config accordingly as not setting `clip_sample` in the config might lead to incorrect results in\"\n\t                \" future versions. If you have downloaded this checkpoint from the Hugging Face Hub, it would be very\"\n\t                \" nice if you could open a Pull request for the `scheduler/scheduler_config.json` file\"\n\t            )\n", "            deprecate(\"clip_sample not set\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t            new_config = dict(scheduler.config)\n\t            new_config[\"clip_sample\"] = False\n\t            scheduler._internal_dict = FrozenDict(new_config)\n\t        if safety_checker is None and requires_safety_checker:\n\t            logger.warning(\n\t                f\"You have disabled the safety checker for {self.__class__} by passing `safety_checker=None`. Ensure\"\n\t                \" that you abide to the conditions of the Stable Diffusion license and do not expose unfiltered\"\n\t                \" results in services or applications open to the public. Both the diffusers team and Hugging Face\"\n\t                \" strongly recommend to keep the safety filter enabled in all public facing circumstances, disabling\"\n", "                \" it only for use-cases that involve analyzing network behavior or auditing its results. For more\"\n\t                \" information, please have a look at https://github.com/huggingface/diffusers/pull/254 .\"\n\t            )\n\t        if safety_checker is not None and feature_extractor is None:\n\t            raise ValueError(\n\t                \"Make sure to define a feature extractor when loading {self.__class__} if you want to use the safety\"\n\t                \" checker. If you do not want to use the safety checker, you can pass `'safety_checker=None'` instead.\"\n\t            )\n\t        is_unet_version_less_0_9_0 = hasattr(unet.config, \"_diffusers_version\") and version.parse(\n\t            version.parse(unet.config._diffusers_version).base_version\n", "        ) < version.parse(\"0.9.0.dev0\")\n\t        is_unet_sample_size_less_64 = hasattr(unet.config, \"sample_size\") and unet.config.sample_size < 64\n\t        if is_unet_version_less_0_9_0 and is_unet_sample_size_less_64:\n\t            deprecation_message = (\n\t                \"The configuration file of the unet has set the default `sample_size` to smaller than\"\n\t                \" 64 which seems highly unlikely .If you're checkpoint is a fine-tuned version of any of the\"\n\t                \" following: \\n- CompVis/stable-diffusion-v1-4 \\n- CompVis/stable-diffusion-v1-3 \\n-\"\n\t                \" CompVis/stable-diffusion-v1-2 \\n- CompVis/stable-diffusion-v1-1 \\n- runwayml/stable-diffusion-v1-5\"\n\t                \" \\n- runwayml/stable-diffusion-inpainting \\n you should change 'sample_size' to 64 in the\"\n\t                \" configuration file. Please make sure to update the config accordingly as leaving `sample_size=32`\"\n", "                \" in the config might lead to incorrect results in future versions. If you have downloaded this\"\n\t                \" checkpoint from the Hugging Face Hub, it would be very nice if you could open a Pull request for\"\n\t                \" the `unet/config.json` file\"\n\t            )\n\t            deprecate(\"sample_size<64\", \"1.0.0\", deprecation_message, standard_warn=False)\n\t            new_config = dict(unet.config)\n\t            new_config[\"sample_size\"] = 64\n\t            unet._internal_dict = FrozenDict(new_config)\n\t        self.register_modules(\n\t            vae=vae,\n", "            text_encoder=text_encoder,\n\t            tokenizer=tokenizer,\n\t            unet=unet,\n\t            scheduler=scheduler,\n\t            safety_checker=None, #safety_checker,\n\t            feature_extractor=None, #feature_extractor,\n\t        )\n\t        self.vae_scale_factor = 2 ** (len(self.vae.config.block_out_channels) - 1)\n\t        self.register_to_config(requires_safety_checker=requires_safety_checker)\n\t    def enable_xformers_memory_efficient_attention(self):\n", "        r\"\"\"\n\t        Enable memory efficient attention as implemented in xformers.\n\t        When this option is enabled, you should observe lower GPU memory usage and a potential speed up at inference\n\t        time. Speed up at training time is not guaranteed.\n\t        Warning: When Memory Efficient Attention and Sliced attention are both enabled, the Memory Efficient Attention\n\t        is used.\n\t        \"\"\"\n\t        self.unet.set_use_memory_efficient_attention_xformers(True)\n\t    def disable_xformers_memory_efficient_attention(self):\n\t        r\"\"\"\n", "        Disable memory efficient attention as implemented in xformers.\n\t        \"\"\"\n\t        self.unet.set_use_memory_efficient_attention_xformers(False)\n\t    def enable_attention_slicing(self, slice_size: Optional[Union[str, int]] = \"auto\"):\n\t        r\"\"\"\n\t        Enable sliced attention computation.\n\t        When this option is enabled, the attention module will split the input tensor in slices, to compute attention\n\t        in several steps. This is useful to save some memory in exchange for a small speed decrease.\n\t        Args:\n\t            slice_size (`str` or `int`, *optional*, defaults to `\"auto\"`):\n", "                When `\"auto\"`, halves the input to the attention heads, so attention will be computed in two steps. If\n\t                a number is provided, uses as many slices as `attention_head_dim // slice_size`. In this case,\n\t                `attention_head_dim` must be a multiple of `slice_size`.\n\t        \"\"\"\n\t        if slice_size == \"auto\":\n\t            if isinstance(self.unet.config.attention_head_dim, int):\n\t                # half the attention head size is usually a good trade-off between\n\t                # speed and memory\n\t                slice_size = self.unet.config.attention_head_dim // 2\n\t            else:\n", "                # if `attention_head_dim` is a list, take the smallest head size\n\t                slice_size = min(self.unet.config.attention_head_dim)\n\t        self.unet.set_attention_slice(slice_size)\n\t    def disable_attention_slicing(self):\n\t        r\"\"\"\n\t        Disable sliced attention computation. If `enable_attention_slicing` was previously invoked, this method will go\n\t        back to computing attention in one step.\n\t        \"\"\"\n\t        # set slice_size = `None` to disable `attention slicing`\n\t        self.enable_attention_slicing(None)\n", "    def enable_sequential_cpu_offload(self):\n\t        r\"\"\"\n\t        Offloads all models to CPU using accelerate, significantly reducing memory usage. When called, unet,\n\t        text_encoder, vae and safety checker have their state dicts saved to CPU and then are moved to a\n\t        `torch.device('meta') and loaded to GPU only when their specific submodule has its `forward` method called.\n\t        \"\"\"\n\t        if is_accelerate_available():\n\t            from accelerate import cpu_offload\n\t        else:\n\t            raise ImportError(\"Please install accelerate via `pip install accelerate`\")\n", "        device = torch.device(\"cuda\")\n\t        for cpu_offloaded_model in [self.unet, self.text_encoder, self.vae]:\n\t            if cpu_offloaded_model is not None:\n\t                cpu_offload(cpu_offloaded_model, device)\n\t        if self.safety_checker is not None:\n\t            # TODO(Patrick) - there is currently a bug with cpu offload of nn.Parameter in accelerate\n\t            # fix by only offloading self.safety_checker for now\n\t            cpu_offload(self.safety_checker.vision_model, device)\n\t    @property\n\t    def _execution_device(self):\n", "        r\"\"\"\n\t        Returns the device on which the pipeline's models will be executed. After calling\n\t        `pipeline.enable_sequential_cpu_offload()` the execution device can only be inferred from Accelerate's module\n\t        hooks.\n\t        \"\"\"\n\t        if self.device != torch.device(\"meta\") or not hasattr(self.unet, \"_hf_hook\"):\n\t            return self.device\n\t        for module in self.unet.modules():\n\t            if (\n\t                hasattr(module, \"_hf_hook\")\n", "                and hasattr(module._hf_hook, \"execution_device\")\n\t                and module._hf_hook.execution_device is not None\n\t            ):\n\t                return torch.device(module._hf_hook.execution_device)\n\t        return self.device\n\t    def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt):\n\t        r\"\"\"\n\t        Encodes the prompt into text encoder hidden states.\n\t        Args:\n\t            prompt (`str` or `list(int)`):\n", "                prompt to be encoded\n\t            device: (`torch.device`):\n\t                torch device\n\t            num_images_per_prompt (`int`):\n\t                number of images that should be generated per prompt\n\t            do_classifier_free_guidance (`bool`):\n\t                whether to use classifier free guidance or not\n\t            negative_prompt (`str` or `List[str]`):\n\t                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\n\t                if `guidance_scale` is less than `1`).\n", "        \"\"\"\n\t        batch_size = len(prompt) if isinstance(prompt, list) else 1\n\t        text_inputs = self.tokenizer(\n\t            prompt,\n\t            padding=\"max_length\",\n\t            max_length=self.tokenizer.model_max_length,\n\t            truncation=True,\n\t            return_tensors=\"pt\",\n\t        )\n\t        text_input_ids = text_inputs.input_ids\n", "        untruncated_ids = self.tokenizer(prompt, padding=\"max_length\", return_tensors=\"pt\").input_ids\n\t        if not torch.equal(text_input_ids, untruncated_ids):\n\t            removed_text = self.tokenizer.batch_decode(untruncated_ids[:, self.tokenizer.model_max_length - 1 : -1])\n\t            logger.warning(\n\t                \"The following part of your input was truncated because CLIP can only handle sequences up to\"\n\t                f\" {self.tokenizer.model_max_length} tokens: {removed_text}\"\n\t            )\n\t        if hasattr(self.text_encoder.config, \"use_attention_mask\") and self.text_encoder.config.use_attention_mask:\n\t            attention_mask = text_inputs.attention_mask.to(device)\n\t        else:\n", "            attention_mask = None\n\t        text_embeddings = self.text_encoder(\n\t            text_input_ids.to(device),\n\t            attention_mask=attention_mask,\n\t        )\n\t        text_embeddings = text_embeddings[0]\n\t        # duplicate text embeddings for each generation per prompt, using mps friendly method\n\t        bs_embed, seq_len, _ = text_embeddings.shape\n\t        text_embeddings = text_embeddings.repeat(1, num_images_per_prompt, 1)\n\t        text_embeddings = text_embeddings.view(bs_embed * num_images_per_prompt, seq_len, -1)\n", "        # get unconditional embeddings for classifier free guidance\n\t        if do_classifier_free_guidance:\n\t            uncond_tokens: List[str]\n\t            if negative_prompt is None:\n\t                uncond_tokens = [\"\"] * batch_size\n\t            elif type(prompt) is not type(negative_prompt):\n\t                raise TypeError(\n\t                    f\"`negative_prompt` should be the same type to `prompt`, but got {type(negative_prompt)} !=\"\n\t                    f\" {type(prompt)}.\"\n\t                )\n", "            elif isinstance(negative_prompt, str):\n\t                uncond_tokens = [negative_prompt]\n\t            elif batch_size != len(negative_prompt):\n\t                raise ValueError(\n\t                    f\"`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`:\"\n\t                    f\" {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches\"\n\t                    \" the batch size of `prompt`.\"\n\t                )\n\t            else:\n\t                uncond_tokens = negative_prompt\n", "            max_length = text_input_ids.shape[-1]\n\t            uncond_input = self.tokenizer(\n\t                uncond_tokens,\n\t                padding=\"max_length\",\n\t                max_length=max_length,\n\t                truncation=True,\n\t                return_tensors=\"pt\",\n\t            )\n\t            if hasattr(self.text_encoder.config, \"use_attention_mask\") and self.text_encoder.config.use_attention_mask:\n\t                attention_mask = uncond_input.attention_mask.to(device)\n", "            else:\n\t                attention_mask = None\n\t            uncond_embeddings = self.text_encoder(\n\t                uncond_input.input_ids.to(device),\n\t                attention_mask=attention_mask,\n\t            )\n\t            uncond_embeddings = uncond_embeddings[0]\n\t            # duplicate unconditional embeddings for each generation per prompt, using mps friendly method\n\t            seq_len = uncond_embeddings.shape[1]\n\t            uncond_embeddings = uncond_embeddings.repeat(1, num_images_per_prompt, 1)\n", "            uncond_embeddings = uncond_embeddings.view(batch_size * num_images_per_prompt, seq_len, -1)\n\t            # For classifier free guidance, we need to do two forward passes.\n\t            # Here we concatenate the unconditional and text embeddings into a single batch\n\t            # to avoid doing two forward passes\n\t            text_embeddings = torch.cat([uncond_embeddings, text_embeddings])\n\t        return text_embeddings\n\t    def run_safety_checker(self, image, device, dtype):\n\t        if self.safety_checker is not None:\n\t            safety_checker_input = self.feature_extractor(self.numpy_to_pil(image), return_tensors=\"pt\").to(device)\n\t            image, has_nsfw_concept = self.safety_checker(\n", "                images=image, clip_input=safety_checker_input.pixel_values.to(dtype)\n\t            )\n\t        else:\n\t            has_nsfw_concept = None\n\t        return image, has_nsfw_concept\n\t    def decode_latents(self, latents):\n\t        latents = 1 / 0.18215 * latents\n\t        image = self.vae.decode(latents).sample\n\t        image = (image / 2 + 0.5).clamp(0, 1)\n\t        # we always cast to float32 as this does not cause significant overhead and is compatible with bfloa16\n", "        image = image.cpu().permute(0, 2, 3, 1).float().numpy()\n\t        return image\n\t    def prepare_extra_step_kwargs(self, generator, eta):\n\t        # prepare extra kwargs for the scheduler step, since not all schedulers have the same signature\n\t        # eta (η) is only used with the DDIMScheduler, it will be ignored for other schedulers.\n\t        # eta corresponds to η in DDIM paper: https://arxiv.org/abs/2010.02502\n\t        # and should be between [0, 1]\n\t        accepts_eta = \"eta\" in set(inspect.signature(self.scheduler.step).parameters.keys())\n\t        extra_step_kwargs = {}\n\t        if accepts_eta:\n", "            extra_step_kwargs[\"eta\"] = eta\n\t        # check if the scheduler accepts generator\n\t        accepts_generator = \"generator\" in set(inspect.signature(self.scheduler.step).parameters.keys())\n\t        if accepts_generator:\n\t            extra_step_kwargs[\"generator\"] = generator\n\t        return extra_step_kwargs\n\t    def check_inputs(self, prompt, height, width, callback_steps):\n\t        if not isinstance(prompt, str) and not isinstance(prompt, list):\n\t            raise ValueError(f\"`prompt` has to be of type `str` or `list` but is {type(prompt)}\")\n\t        if height % 8 != 0 or width % 8 != 0:\n", "            raise ValueError(f\"`height` and `width` have to be divisible by 8 but are {height} and {width}.\")\n\t        if (callback_steps is None) or (\n\t            callback_steps is not None and (not isinstance(callback_steps, int) or callback_steps <= 0)\n\t        ):\n\t            raise ValueError(\n\t                f\"`callback_steps` has to be a positive integer but is {callback_steps} of type\"\n\t                f\" {type(callback_steps)}.\"\n\t            )\n\t    def prepare_latents(self, batch_size, num_channels_latents, height, width, dtype, device, generator, latents=None):\n\t        shape = (batch_size, num_channels_latents, height // self.vae_scale_factor, width // self.vae_scale_factor)\n", "        if latents is None:\n\t            if device.type == \"mps\":\n\t                # randn does not work reproducibly on mps\n\t                latents = torch.randn(shape, generator=generator, device=\"cpu\", dtype=dtype).to(device)\n\t            else:\n\t                latents = torch.randn(shape, generator=generator, device=device, dtype=dtype)\n\t        else:\n\t            if latents.shape != shape:\n\t                raise ValueError(f\"Unexpected latents shape, got {latents.shape}, expected {shape}\")\n\t            latents = latents.to(device)\n", "        # scale the initial noise by the standard deviation required by the scheduler\n\t        latents = latents * self.scheduler.init_noise_sigma\n\t        return latents\n\t    @torch.no_grad()\n\t    def __call__(\n\t        self,\n\t        prompt: Union[str, List[str]] = \"\",\n\t        height: Optional[int] = None,\n\t        width: Optional[int] = None,\n\t        num_inference_steps: int = 50,\n", "        guidance_scale: float = 7.5,\n\t        text_embeddings: Optional[torch.FloatTensor] = None,\n\t        negative_prompt: Optional[Union[str, List[str]]] = None,\n\t        num_images_per_prompt: Optional[int] = 1,\n\t        eta: float = 0.0,\n\t        generator: Optional[torch.Generator] = None,\n\t        latents: Optional[torch.FloatTensor] = None,\n\t        output_type: Optional[str] = \"pil\",\n\t        return_dict: bool = True,\n\t        callback: Optional[Callable[[int, int, torch.FloatTensor], None]] = None,\n", "        callback_steps: Optional[int] = 1,\n\t        **kwargs,\n\t    ):\n\t        r\"\"\"\n\t        Function invoked when calling the pipeline for generation.\n\t        Args:\n\t            prompt (`str` or `List[str]`):\n\t                The prompt or prompts to guide the image generation.\n\t            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n\t                The height in pixels of the generated image.\n", "            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n\t                The width in pixels of the generated image.\n\t            num_inference_steps (`int`, *optional*, defaults to 50):\n\t                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\n\t                expense of slower inference.\n\t            guidance_scale (`float`, *optional*, defaults to 7.5):\n\t                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\n\t                `guidance_scale` is defined as `w` of equation 2. of [Imagen\n\t                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\n\t                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\n", "                usually at the expense of lower image quality.\n\t            negative_prompt (`str` or `List[str]`, *optional*):\n\t                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\n\t                if `guidance_scale` is less than `1`).\n\t            num_images_per_prompt (`int`, *optional*, defaults to 1):\n\t                The number of images to generate per prompt.\n\t            eta (`float`, *optional*, defaults to 0.0):\n\t                Corresponds to parameter eta (η) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\n\t                [`schedulers.DDIMScheduler`], will be ignored for others.\n\t            generator (`torch.Generator`, *optional*):\n", "                A [torch generator](https://pytorch.org/docs/stable/generated/torch.Generator.html) to make generation\n\t                deterministic.\n\t            latents (`torch.FloatTensor`, *optional*):\n\t                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\n\t                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\n\t                tensor will ge generated by sampling using the supplied random `generator`.\n\t            output_type (`str`, *optional*, defaults to `\"pil\"`):\n\t                The output format of the generate image. Choose between\n\t                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\n\t            return_dict (`bool`, *optional*, defaults to `True`):\n", "                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\n\t                plain tuple.\n\t            callback (`Callable`, *optional*):\n\t                A function that will be called every `callback_steps` steps during inference. The function will be\n\t                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\n\t            callback_steps (`int`, *optional*, defaults to 1):\n\t                The frequency at which the `callback` function will be called. If not specified, the callback will be\n\t                called at every step.\n\t        Returns:\n\t            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\n", "            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\n\t            When returning a tuple, the first element is a list with the generated images, and the second element is a\n\t            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\n\t            (nsfw) content, according to the `safety_checker`.\n\t        \"\"\"\n\t        # 0. Default height and width to unet\n\t        height = height or self.unet.config.sample_size * self.vae_scale_factor\n\t        width = width or self.unet.config.sample_size * self.vae_scale_factor\n\t        # 1. Check inputs. Raise error if not correct\n\t        self.check_inputs(prompt, height, width, callback_steps)\n", "        # 2. Define call parameters\n\t        batch_size = 1 if isinstance(prompt, str) else len(prompt)\n\t        device = self._execution_device\n\t        # here `guidance_scale` is defined analog to the guidance weight `w` of equation (2)\n\t        # of the Imagen paper: https://arxiv.org/pdf/2205.11487.pdf . `guidance_scale = 1`\n\t        # corresponds to doing no classifier free guidance.\n\t        do_classifier_free_guidance = guidance_scale > 1.0\n\t        # 3. Encode input prompt\n\t        # if text_embeddings is None:\n\t        #     text_embeddings = self._encode_prompt(\n", "        #         prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt\n\t        #     )\n\t        if num_images_per_prompt!=1:\n\t            seq_len = text_embeddings.shape[1]\n\t            text_embeddings = text_embeddings.repeat(1, num_images_per_prompt, 1)\n\t            text_embeddings = text_embeddings.view(num_images_per_prompt, seq_len, -1)\n\t        if do_classifier_free_guidance:\n\t            uncond_tokens = [\"\"]\n\t            max_length = self.tokenizer.model_max_length\n\t            uncond_input = self.tokenizer(\n", "                uncond_tokens,\n\t                padding=\"max_length\",\n\t                max_length=max_length,\n\t                truncation=True,\n\t                return_tensors=\"pt\",\n\t            )\n\t            uncond_embeddings = self.text_encoder(uncond_input.input_ids.to(self.device))[0]\n\t            # duplicate unconditional embeddings for each generation per prompt, using mps friendly method\n\t            seq_len = uncond_embeddings.shape[1]\n\t            if num_images_per_prompt!=1:\n", "                uncond_embeddings = uncond_embeddings.repeat(1, num_images_per_prompt, 1)\n\t            uncond_embeddings = uncond_embeddings.view(num_images_per_prompt, seq_len, -1)\n\t            # For classifier free guidance, we need to do two forward passes.\n\t            # Here we concatenate the unconditional and text embeddings into a single batch\n\t            # to avoid doing two forward passes\n\t            text_embeddings = torch.cat([uncond_embeddings, text_embeddings])\n\t        # 4. Prepare timesteps\n\t        self.scheduler.set_timesteps(num_inference_steps, device=device)\n\t        timesteps = self.scheduler.timesteps\n\t        # 5. Prepare latent variables\n", "        num_channels_latents = self.unet.in_channels\n\t        latents = self.prepare_latents(\n\t            batch_size * num_images_per_prompt,\n\t            num_channels_latents,\n\t            height,\n\t            width,\n\t            text_embeddings.dtype,\n\t            device,\n\t            generator,\n\t            latents,\n", "        )\n\t        # 6. Prepare extra step kwargs. TODO: Logic should ideally just be moved out of the pipeline\n\t        extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n\t        # 7. Denoising loop\n\t        for i, t in enumerate(self.progress_bar(timesteps)):\n\t            # expand the latents if we are doing classifier free guidance\n\t            latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n\t            latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n\t            # predict the noise residual\n\t            noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=text_embeddings).sample\n", "            # perform guidance\n\t            if do_classifier_free_guidance:\n\t                noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)\n\t                noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n\t            # compute the previous noisy sample x_t -> x_t-1\n\t            latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs).prev_sample\n\t            # call the callback, if provided\n\t            if callback is not None and i % callback_steps == 0:\n\t                callback(i, t, latents)\n\t        # 8. Post-processing\n", "        image = self.decode_latents(latents)\n\t        # 9. Run safety checker\n\t        image, has_nsfw_concept = self.run_safety_checker(image, device, text_embeddings.dtype)\n\t        # 10. Convert to PIL\n\t        if output_type == \"pil\":\n\t            image = self.numpy_to_pil(image)\n\t        if not return_dict:\n\t            return (image, has_nsfw_concept)\n\t        return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)"]}
{"filename": "diffusers_/stable_diffusion/__init__.py", "chunked_list": ["from dataclasses import dataclass\n\tfrom typing import List, Optional, Union\n\timport numpy as np\n\timport PIL\n\tfrom PIL import Image\n\tfrom ..utils import (\n\t    BaseOutput,\n\t    is_torch_available,\n\t    is_transformers_available,\n\t)\n", "@dataclass\n\tclass StableDiffusionPipelineOutput(BaseOutput):\n\t    \"\"\"\n\t    Output class for Stable Diffusion pipelines.\n\t    Args:\n\t        images (`List[PIL.Image.Image]` or `np.ndarray`)\n\t            List of denoised PIL images of length `batch_size` or numpy array of shape `(batch_size, height, width,\n\t            num_channels)`. PIL images or numpy array present the denoised images of the diffusion pipeline.\n\t        nsfw_content_detected (`List[bool]`)\n\t            List of flags denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\n", "            (nsfw) content, or `None` if safety checking could not be performed.\n\t    \"\"\"\n\t    images: Union[List[PIL.Image.Image], np.ndarray]\n\t    nsfw_content_detected: Optional[List[bool]]\n\tif is_transformers_available() and is_torch_available():\n\t    from .pipeline_stable_diffusion import StableDiffusionPipeline\n"]}
{"filename": "diffusers_/stable_diffusion/safety_checker.py", "chunked_list": ["# Copyright 2022 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport numpy as np\n\timport torch\n\timport torch.nn as nn\n\tfrom transformers import CLIPConfig, CLIPVisionModel, PreTrainedModel\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(__name__)\n\tdef cosine_distance(image_embeds, text_embeds):\n", "    normalized_image_embeds = nn.functional.normalize(image_embeds)\n\t    normalized_text_embeds = nn.functional.normalize(text_embeds)\n\t    return torch.mm(normalized_image_embeds, normalized_text_embeds.t())\n\tclass StableDiffusionSafetyChecker(PreTrainedModel):\n\t    config_class = CLIPConfig\n\t    _no_split_modules = [\"CLIPEncoderLayer\"]\n\t    def __init__(self, config: CLIPConfig):\n\t        super().__init__(config)\n\t        self.vision_model = CLIPVisionModel(config.vision_config)\n\t        self.visual_projection = nn.Linear(config.vision_config.hidden_size, config.projection_dim, bias=False)\n", "        self.concept_embeds = nn.Parameter(torch.ones(17, config.projection_dim), requires_grad=False)\n\t        self.special_care_embeds = nn.Parameter(torch.ones(3, config.projection_dim), requires_grad=False)\n\t        self.concept_embeds_weights = nn.Parameter(torch.ones(17), requires_grad=False)\n\t        self.special_care_embeds_weights = nn.Parameter(torch.ones(3), requires_grad=False)\n\t    @torch.no_grad()\n\t    def forward(self, clip_input, images):\n\t        pooled_output = self.vision_model(clip_input)[1]  # pooled_output\n\t        image_embeds = self.visual_projection(pooled_output)\n\t        # we always cast to float32 as this does not cause significant overhead and is compatible with bfloa16\n\t        special_cos_dist = cosine_distance(image_embeds, self.special_care_embeds).cpu().float().numpy()\n", "        cos_dist = cosine_distance(image_embeds, self.concept_embeds).cpu().float().numpy()\n\t        result = []\n\t        batch_size = image_embeds.shape[0]\n\t        for i in range(batch_size):\n\t            result_img = {\"special_scores\": {}, \"special_care\": [], \"concept_scores\": {}, \"bad_concepts\": []}\n\t            # increase this value to create a stronger `nfsw` filter\n\t            # at the cost of increasing the possibility of filtering benign images\n\t            adjustment = 0.0\n\t            for concept_idx in range(len(special_cos_dist[0])):\n\t                concept_cos = special_cos_dist[i][concept_idx]\n", "                concept_threshold = self.special_care_embeds_weights[concept_idx].item()\n\t                result_img[\"special_scores\"][concept_idx] = round(concept_cos - concept_threshold + adjustment, 3)\n\t                if result_img[\"special_scores\"][concept_idx] > 0:\n\t                    result_img[\"special_care\"].append({concept_idx, result_img[\"special_scores\"][concept_idx]})\n\t                    adjustment = 0.01\n\t            for concept_idx in range(len(cos_dist[0])):\n\t                concept_cos = cos_dist[i][concept_idx]\n\t                concept_threshold = self.concept_embeds_weights[concept_idx].item()\n\t                result_img[\"concept_scores\"][concept_idx] = round(concept_cos - concept_threshold + adjustment, 3)\n\t                if result_img[\"concept_scores\"][concept_idx] > 0:\n", "                    result_img[\"bad_concepts\"].append(concept_idx)\n\t            result.append(result_img)\n\t        has_nsfw_concepts = [len(res[\"bad_concepts\"]) > 0 for res in result]\n\t        for idx, has_nsfw_concept in enumerate(has_nsfw_concepts):\n\t            if has_nsfw_concept:\n\t                images[idx] = np.zeros(images[idx].shape)  # black image\n\t        if any(has_nsfw_concepts):\n\t            logger.warning(\n\t                \"Potential NSFW content was detected in one or more images. A black image will be returned instead.\"\n\t                \" Try again with a different prompt and/or seed.\"\n", "            )\n\t        return images, has_nsfw_concepts\n\t    @torch.no_grad()\n\t    def forward_onnx(self, clip_input: torch.FloatTensor, images: torch.FloatTensor):\n\t        pooled_output = self.vision_model(clip_input)[1]  # pooled_output\n\t        image_embeds = self.visual_projection(pooled_output)\n\t        special_cos_dist = cosine_distance(image_embeds, self.special_care_embeds)\n\t        cos_dist = cosine_distance(image_embeds, self.concept_embeds)\n\t        # increase this value to create a stronger `nsfw` filter\n\t        # at the cost of increasing the possibility of filtering benign images\n", "        adjustment = 0.0\n\t        special_scores = special_cos_dist - self.special_care_embeds_weights + adjustment\n\t        # special_scores = special_scores.round(decimals=3)\n\t        special_care = torch.any(special_scores > 0, dim=1)\n\t        special_adjustment = special_care * 0.01\n\t        special_adjustment = special_adjustment.unsqueeze(1).expand(-1, cos_dist.shape[1])\n\t        concept_scores = (cos_dist - self.concept_embeds_weights) + special_adjustment\n\t        # concept_scores = concept_scores.round(decimals=3)\n\t        has_nsfw_concepts = torch.any(concept_scores > 0, dim=1)\n\t        images[has_nsfw_concepts] = 0.0  # black image\n", "        return images, has_nsfw_concepts\n"]}
