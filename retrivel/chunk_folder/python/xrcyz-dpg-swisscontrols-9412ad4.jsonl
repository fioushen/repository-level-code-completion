{"filename": "launcher.py", "chunked_list": ["# import subprocess\n\t# subprocess.run([\"python\", \"-m\", \"./controls/PivotCtrl/demo_PivotCtrl.py\"])\n\t\"\"\"\n\thttps://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time\n\t\"Relative imports use a module's name attribute to determine that module's \n\tposition in the package hierarchy. If the module's name does not contain any \n\tpackage information (e.g. it is set to 'main') then relative imports are \n\tresolved as if the module were a top level module, regardless of where the \n\tmodule is actually located on the file system.\"\n\tSo if `my_file.py` imports a file from a sister folder, the location is _not_ \n", "relative to `my_file.py`, it is relative to wherever the process was initiated. \n\t\"\"\"\n\t# import examples.demo_ListEdtCtrl\n\t# import examples.demo_CheckListCtrl\n\timport controls.PivotCtrl.demo_PivotCtrl\n"]}
{"filename": "__init__.py", "chunked_list": []}
{"filename": "controls/__init__.py", "chunked_list": []}
{"filename": "controls/GridSelector/GridSelector.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\timport numpy as np\n\timport itertools\n\tdef is_between(a, b, c):\n\t    \"\"\"Checks if b is between a and c (inclusive). Handles any order of a, b, c.\"\"\"\n\t    return min(a, c) <= b <= max(a, c)\n\tdef translate_index(flat_index, dimensions):\n\t    \"\"\"\n\t    Translates a flat index into a nested index based on provided dimensions.\n\t    Args:\n", "        flat_index (int): The index to be translated.\n\t        dimensions (list of ints): The dimensions of the nested structure.\n\t    Returns:\n\t        list of ints: The nested index corresponding to the flat_index.\n\t    Examples:\n\t        >>> translate_index(5, [3, 2, 2])\n\t        [1, 0, 1]\n\t    \"\"\"\n\t    nested_index = []\n\t    for dimension in reversed(dimensions):\n", "        nested_index.insert(0, flat_index % dimension)\n\t        flat_index //= dimension\n\t    return nested_index\n\tdef index_to_nested_index(index, dims):\n\t    \"\"\"\n\t    Translates a single index to a corresponding nested index based on provided dimensions.\n\t    Args:\n\t        index (int): The index to be translated.\n\t        dims (list of list of ints): The dimensions of the nested structure. Each sub-list represents the\n\t            dimensions of each level of the nested structure.\n", "    Returns:\n\t        list of ints: The nested index corresponding to the provided index.\n\t    Examples:\n\t        >>> index_to_nested_index(7, [[1,2], [2,2,2]])\n\t        [2, 0, 1] # third column, first child, second grandchild\n\t    \"\"\"\n\t    offset = np.prod(dims[0])\n\t    if index < offset:\n\t        return [0] + translate_index(index, dims[0])\n\t    else:\n", "        ret = translate_index(index - offset, dims[1])\n\t        ret[0] += 1\n\t        return ret\n\tclass GridSelector:\n\t    def __init__(self, table_id, width, height):\n\t        self.table_id = table_id\n\t        self.width = width\n\t        self.height = height\n\t        self.widget_grid = [[None for _ in range(width)] for _ in range(height)]\n\t        self.dpg_lookup = [[(0,0,0) for _ in range(width)] for _ in range(height)] # [table_id, i, j] for each cell\n", "        self.mouse_drag_coords = [[0,0], [0,0]] # pixel coords\n\t        self.range_coords = [[0,0], [0,0]] # index coords\n\t        self.is_dragging_range = False\n\t        self._is_paused = False\n\t        self.mouse_registry = -1\n\t        with dpg.handler_registry() as mouse_registry:\n\t            self.mouse_registry = mouse_registry\n\t            # dpg.add_mouse_click_handler(button=dpg.mvMouseButton_Left, callback=self.test)\n\t            dpg.add_mouse_click_handler(button=dpg.mvMouseButton_Left, callback=self.on_mouse_down)\n\t            dpg.add_mouse_release_handler(button=dpg.mvMouseButton_Left, callback=self.on_mouse_up)\n", "            dpg.add_mouse_drag_handler(button=dpg.mvMouseButton_Left, callback=self.on_mouse_drag)\n\t    def __del__(self):\n\t        self.deregister()\n\t    def is_empty(self):\n\t        return (len(self.widget_grid) == 0 or len(self.widget_grid[0]) == 0)\n\t    def pause(self):\n\t        self._is_paused = True\n\t    def unpause(self):\n\t        self._is_paused = False\n\t    def on_mouse_down(self, sender, app_data):\n", "        # bail if paused\n\t        if(self._is_paused): \n\t            return\n\t        # bail if widget grid is empty\n\t        if self.is_empty():\n\t            return\n\t        # print(self._is_paused)\n\t        # test if mouse inside table bounding box\n\t        rect_min = dpg.get_item_rect_min(self.widget_grid[0][0])\n\t        rect_max = dpg.get_item_rect_max(self.widget_grid[-1][-1])\n", "        mouse_pos = dpg.get_mouse_pos(local=False)\n\t        if((rect_min[0] < mouse_pos[0] < rect_max[0]) and (rect_min[1] < mouse_pos[1] < rect_max[1])):\n\t            self.mouse_drag_coords[0] = mouse_pos\n\t            self.is_dragging_range = True\n\t            widget_widths = [dpg.get_item_rect_size(w)[0]+1 for w in self.widget_grid[0]]\n\t            widget_heights = [dpg.get_item_rect_size(r[0])[1] for r in self.widget_grid] # y element of (first item in each row)\n\t            column = int(np.searchsorted(np.cumsum(widget_widths), mouse_pos[0] - rect_min[0]))\n\t            row = int(np.searchsorted(np.cumsum(widget_heights), mouse_pos[1] - rect_min[1]))\n\t            self.range_coords[0] = [column, row]\n\t            print(f\"Mouse down: {column}, {row}\")\n", "    def on_mouse_drag(self, sender, app_data):\n\t        # bail if paused\n\t        if(self._is_paused): \n\t            return  None, None\n\t        # bail if widget grid is empty\n\t        if self.is_empty():\n\t            return None, None\n\t        # print(self._is_paused)\n\t        # Get the ending position of the drag\n\t        rect_min = dpg.get_item_rect_min(self.widget_grid[0][0])\n", "        rect_max = dpg.get_item_rect_max(self.widget_grid[-1][-1])\n\t        mouse_pos = dpg.get_mouse_pos(local=False)\n\t        # print(f\"self.is_dragging_range: {self.is_dragging_range}\")\n\t        if(self.is_dragging_range and (rect_min[0] < mouse_pos[0] < rect_max[0]) and (rect_min[1] < mouse_pos[1] < rect_max[1])):\n\t            self.mouse_drag_coords[1] = mouse_pos\n\t            widget_widths = [dpg.get_item_rect_size(w)[0]+1 for w in self.widget_grid[0]]\n\t            widget_heights = [dpg.get_item_rect_size(r[0])[1] for r in self.widget_grid]\n\t            column = int(np.searchsorted(np.cumsum(widget_widths), mouse_pos[0] - rect_min[0]))\n\t            row = int(np.searchsorted(np.cumsum(widget_heights), mouse_pos[1] - rect_min[1]))\n\t            self.range_coords[1] = [column, row]\n", "            for j,i in itertools.product(range(self.height), range(self.width)):\n\t                table_id, table_j, table_i = self.dpg_lookup[j][i]\n\t                if is_between(self.range_coords[0][0], i, self.range_coords[1][0]) and is_between(self.range_coords[0][1], j, self.range_coords[1][1]):\n\t                    dpg.highlight_table_cell(table_id, table_j, table_i, [34, 83, 118, 100])\n\t                else:\n\t                    dpg.unhighlight_table_cell(table_id, table_j, table_i)\n\t                    dpg.set_value(self.widget_grid[j][i], False)\n\t            return row, column\n\t        else:\n\t            return None, None\n", "    def on_mouse_up(self, sender, app_data):\n\t        # bail if paused\n\t        if(self._is_paused): \n\t            return \n\t        row, column = self.on_mouse_drag(sender, app_data)\n\t        self.is_dragging_range = False\n\t        print(f\"Mouse up: {column}, {row}\")\n\t    def deregister(self):\n\t        if (self.mouse_registry > 0 and dpg.does_item_exist(self.mouse_registry)):\n\t            dpg.delete_item(self.mouse_registry)\n", "        self.mouse_registry = -1"]}
{"filename": "controls/PivotCtrl/PivotCtrl.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\tdef pivotCtrl(table_id):\n\t    table_id = dpg.generate_uuid()\n\t    with dpg.table(tag=table_id, header_row=False, resizable=True, policy=dpg.mvTable_SizingStretchProp, #mvTable_SizingStretchProp \n\t                        row_background=False, no_host_extendX=True, no_pad_innerX=True,\n\t                        borders_outerH=True, borders_innerV=True, borders_outerV=True):\n\t                dpg.add_table_column(label=\"\", init_width_or_weight=1) \n\t                dpg.add_table_column(label=\"\", init_width_or_weight=1) \n\t                dpg.add_table_column(label=\"\", init_width_or_weight=4) \n\t                with dpg.table_row(parent = table_id) as row_id:\n", "                        dpg.add_text(\"\")\n\t                        dpg.add_text(\"Fruit\")\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"Apples\")\n\t                                dpg.add_text(\"Pears\")\n\t                with dpg.table_row(parent = table_id) as row_id:\n\t                        dpg.add_text(\"\")\n", "                        dpg.add_text(\"Property\")\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"Weight\")\n\t                                dpg.add_text(\"Volume\")\n\t                                dpg.add_text(\"Weight\")\n", "                                dpg.add_text(\"Volume\")\n\t                with dpg.table_row(parent = table_id) as row_id:\n\t                        dpg.add_text(\"Year\")\n\t                        dpg.add_text(\"Month\")\n\t                with dpg.table_row(parent = table_id) as row_id:\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"2022\")\n\t                        with dpg.table(header_row=False):\n", "                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"Nov\")\n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"Dec\")\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n", "                            with dpg.table_row():\n\t                                dpg.add_text(\"0\")\n\t                                dpg.add_text(\"1\")\n\t                                dpg.add_text(\"2\")\n\t                                dpg.add_text(\"3\")\n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"1\")\n\t                                dpg.add_text(\"2\")\n\t                                dpg.add_text(\"3\")\n\t                                dpg.add_text(\"4\")\n", "                with dpg.table_row(parent = table_id) as row_id:\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"2023\")\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"Jan\")\n\t                            with dpg.table_row():\n", "                                dpg.add_text(\"Feb\")\n\t                        with dpg.table(header_row=False):\n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            dpg.add_table_column() \n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"0\")\n\t                                dpg.add_text(\"1\")\n\t                                dpg.add_text(\"2\")\n", "                                dpg.add_text(\"3\")\n\t                            with dpg.table_row():\n\t                                dpg.add_text(\"1\")\n\t                                dpg.add_text(\"2\")\n\t                                dpg.add_text(\"3\")\n\t                                dpg.add_text(\"4\")\n"]}
{"filename": "controls/PivotCtrl/PivotFilter.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\tfrom typing import List, Tuple, Callable\n\tfrom enum import Enum\n\timport dataclasses\n\tfrom controls.DpgHelpers.MvItemTypes import MvItemTypes\n\tfrom controls.DpgHelpers.MvStyleVar import MvStyleVar\n\tfrom controls.Textures.TextureIds import TextureIds\n\tfrom controls.Scripting.scripting import create_lambda_from_checklist, create_lambda_from_expression\n\tfrom controls.PivotCtrl.PivotField import PivotFieldType\n\t@dataclasses.dataclass\n", "class PivotFilterButton:\n\t    id: str\n\t    field: str\n\t    label: str\n\t    filter: Callable\n\t    field_type: PivotFieldType\n\tdef pivotFilterDialog(title: str, field: str, data: List[Tuple[bool, str]], sender: str, send_data: Callable[[List[Tuple[bool, str]]], None]):\n\t    \"\"\"\n\t    :param data: A list of [checkbox state, item label] pairs\n\t    :param callback: Callback to send back the user selection\n", "    TODO: \n\t    - change Tuple[bool, str] to a dataclass\n\t    - dynamically set the checkbox size\n\t        - checkbox_size = font_size + 2*frame_padding\n\t    \"\"\"\n\t    ID_MODAL = dpg.generate_uuid()\n\t    ID_HEADER = dpg.generate_uuid()\n\t    ID_CHILD_WINDOW = dpg.generate_uuid()\n\t    ID_TABBAR = dpg.generate_uuid()\n\t    ID_TAB_CATEGORY = dpg.generate_uuid()\n", "    ID_TAB_RANGE = dpg.generate_uuid()\n\t    ID_OK = dpg.generate_uuid()\n\t    ID_WINDOW_HANDLER = dpg.generate_uuid()\n\t    TEX_PARTIAL_CHECK = TextureIds.ID_PARTIAL_CHECK.UUID\n\t    ID_MCB_CHECKBOX = dpg.generate_uuid()\n\t    ID_MCB_LABEL = dpg.generate_uuid()\n\t    ID_CHECKBOX_THEME = dpg.generate_uuid()\n\t    ID_SCRIPT_INPUT = dpg.generate_uuid()\n\t    child_checkboxes = []\n\t    # resize the child window on resize modal window\n", "    def resize_window(sender, data):\n\t        windowHeight = dpg.get_item_height(ID_MODAL)\n\t        windowWidth = dpg.get_item_width(ID_MODAL)\n\t        dpg.configure_item(ID_CHILD_WINDOW, height = windowHeight - 95)\n\t        dpg.configure_item(ID_SCRIPT_INPUT, width = windowWidth - 4*MvStyleVar.WindowPadding.value[1])\n\t        pos = [dpg.get_item_width(ID_MODAL) - 75*2-16, dpg.get_item_height(ID_MODAL) - 30]\n\t        dpg.configure_item(ID_OK, pos = pos)\n\t    # get theme for partial checkbox\n\t    with dpg.theme(tag=ID_CHECKBOX_THEME):\n\t        with dpg.theme_component(dpg.mvImageButton):\n", "            # remove frame padding around image button\n\t            dpg.add_theme_style(dpg.mvStyleVar_FramePadding, 0, 0)\n\t    def on_mcb_click(sender):\n\t        # on master checkbox click\n\t        for ccb in child_checkboxes:\n\t            dpg.set_value(ccb[0], dpg.get_value(sender))\n\t    def on_mcb_check(init_state=True):\n\t        # set ID_MCB_CHECKBOX to a checkbox\n\t        if dpg.does_item_exist(ID_MCB_CHECKBOX):\n\t            dpg.delete_item(ID_MCB_CHECKBOX)\n", "        # print(init_state)\n\t        dpg.add_checkbox(before=ID_MCB_LABEL, tag=ID_MCB_CHECKBOX, default_value=init_state, callback=on_mcb_click)\n\t        for ccb in child_checkboxes:\n\t            dpg.set_value(ccb[0], init_state)\n\t    def on_mcb_init():\n\t        # on first call, figure out whether to be checkbox or imagebutton\n\t        # this method could potentially be merged with on_ccb_click\n\t        set_checked = all(e[0] for e in data)\n\t        set_unchecked = not any(e[0] for e in data)\n\t        if set_checked or set_unchecked:\n", "            on_mcb_check(set_checked)\n\t        else:\n\t            dpg.add_image_button(before=ID_MCB_LABEL, tag=ID_MCB_CHECKBOX, texture_tag=TEX_PARTIAL_CHECK, height=19, width=19, callback=lambda: on_mcb_check(init_state=True), show=True)\n\t            dpg.bind_item_theme(ID_MCB_CHECKBOX, ID_CHECKBOX_THEME)\n\t    def on_ccb_click():\n\t        # on child checkbox click\n\t        set_checked = all(dpg.get_value(e[0]) for e in child_checkboxes)\n\t        set_unchecked = not any(dpg.get_value(e[0]) for e in child_checkboxes)\n\t        # if all children are checked, check master\n\t        if set_checked or set_unchecked:\n", "            if(dpg.get_item_type(ID_MCB_CHECKBOX) == MvItemTypes.Checkbox.value):\n\t                dpg.set_value(ID_MCB_CHECKBOX, set_checked)\n\t            else:\n\t                on_mcb_check(set_checked)\n\t        else:\n\t            dpg.delete_item(ID_MCB_CHECKBOX)\n\t            dpg.add_image_button(before=ID_MCB_LABEL, tag=ID_MCB_CHECKBOX, texture_tag=TEX_PARTIAL_CHECK, height=19, width=19, callback=lambda: on_mcb_check(init_state=True), show=True)\n\t            dpg.bind_item_theme(ID_MCB_CHECKBOX, ID_CHECKBOX_THEME)\n\t    # build dialog\n\t    with dpg.window(label=title, \n", "                    tag=ID_MODAL,\n\t                    modal=True, \n\t                    show=True, \n\t                    no_title_bar=True, \n\t                    pos=dpg.get_mouse_pos(local=False), \n\t                    width=210, \n\t                    height=320):\n\t        with dpg.group(tag=ID_HEADER, horizontal=False):\n\t            with dpg.group(horizontal=True):\n\t                dpg.add_text(field)\n", "                dpg.add_combo(items=[\"is in\", \"is not in\"], default_value=\"is in\", width=100)\n\t                # summary_checked = dpg.add_text(\"[2022, 2023]\")\n\t            # summary_checked = dpg.add_text(\"[2022, 2023]\", wrap=195)\n\t        # method to update displayed text\n\t        # def checked_callback(sender):\n\t        #     checked_items = [dpg.get_value(e[1]) for e in child_checkboxes if dpg.get_value(e[0])]\n\t        #     display_text = f'[{\", \".join(checked_items) }]'\n\t        #     dpg.set_value(summary_checked, display_text)\n\t        with dpg.child_window(tag=ID_CHILD_WINDOW):\n\t            with dpg.tab_bar(tag=ID_TABBAR):\n", "                # categorical filtering\n\t                with dpg.tab(tag=ID_TAB_CATEGORY, label=\"List\", closable=False):\n\t                    # master checkbox\n\t                    with dpg.group(horizontal=True):\n\t                        dpg.add_text(\"All Items\", tag=ID_MCB_LABEL)\n\t                        on_mcb_init() # inserts checkbox before 'All Items'\n\t                    # child checkboxes\n\t                    dpg.add_separator()\n\t                    for [checkbox_state, item_label] in data:\n\t                        with dpg.group(horizontal=True):\n", "                            b = dpg.add_checkbox(default_value=checkbox_state, callback=on_ccb_click)\n\t                            t = dpg.add_text(item_label)\n\t                            child_checkboxes.append((b, t))\n\t                # range filtering\n\t                with dpg.tab(tag=ID_TAB_RANGE, label=\"Range\", closable=False):\n\t                    with dpg.group(horizontal=True):\n\t                        my_expr = f\"0 <= {field} < 100\"\n\t                        dpg.add_input_text(tag=ID_SCRIPT_INPUT, default_value=my_expr, multiline=True, height=100) \n\t        def on_ok():\n\t            # change this to return a PivotFilterButton\n", "            # return category or range filter \n\t            if dpg.get_value(ID_TABBAR) == ID_TAB_CATEGORY:\n\t                # gather the data\n\t                # retain the original datatype from 'data', don't just read the string label off the UI\n\t                include_items = [data[i][1] for i, item in enumerate(child_checkboxes) if dpg.get_value(item[0])]\n\t                # construct the filter lambda\n\t                my_lambda = create_lambda_from_checklist(field,  include_items)\n\t                # delete the dialog\n\t                on_cancel()\n\t                # send the data _after_ deleting the dialog\n", "                send_data(sender, my_lambda)\n\t            else: \n\t                # gather the data\n\t                my_expr = dpg.get_value(ID_SCRIPT_INPUT)\n\t                # TODO we should get df.columns in here somehow...\n\t                my_lambda = create_lambda_from_expression(expr=my_expr, allowed_vars=[field])\n\t                # delete the dialog\n\t                on_cancel()\n\t                # send the data _after_ deleting the dialog\n\t                send_data(sender, my_lambda)\n", "        def on_cancel():\n\t            # delete the window and all children\n\t            dpg.delete_item(ID_MODAL)\n\t            # delete the resize callback handler\n\t            dpg.delete_item(ID_WINDOW_HANDLER)\n\t            # delete the checkbox theme\n\t            dpg.delete_item(ID_CHECKBOX_THEME)\n\t            # do not delete the texture - that is not our job\n\t        with dpg.group(horizontal=True):\n\t            # TODO figure out how to get element heights\n", "            # print(\"---\")\n\t            # print(dpg.get_item_pos(ID_CHILD_WINDOW))\n\t            # print(dpg.get_item_height(ID_CHILD_WINDOW))\n\t            # print(\"---\")\n\t            pos = [dpg.get_item_width(ID_MODAL) - 75*2-16, dpg.get_item_height(ID_MODAL) - 30]\n\t            dpg.add_button(tag=ID_OK, label=\"Accept\", width=75, callback=on_ok, pos=pos)\n\t            dpg.add_button(label=\"Cancel\", width=75, callback=on_cancel)\n\t    # register the resize method to ID_MODAL\n\t    with dpg.item_handler_registry(tag=ID_WINDOW_HANDLER):\n\t        dpg.add_item_resize_handler(callback=resize_window)\n", "    dpg.bind_item_handler_registry(ID_MODAL, ID_WINDOW_HANDLER)\n\t    return\n"]}
{"filename": "controls/PivotCtrl/PivotField.py", "chunked_list": ["from enum import Enum\n\t\"\"\"\n\tIn pandas, you can represent this column as an ordered categorical dtype, which has an associated order and allows for comparison operations based on this order. Here's an example:\n\t```\n\timport pandas as pd\n\t# Define the order\n\tordering = ['First', 'Second', 'Third']\n\t# Create a categorical series with this order\n\ts = pd.Series(['First', 'Second', 'Third', 'Second', 'First'], dtype=pd.CategoricalDtype(categories=ordering, ordered=True))\n\t# Now you can perform comparisons\n", "print(s >= 'Second')\n\t```\n\t\"\"\"\n\tclass PivotFieldType:\n\t    class GroupBy(Enum):\n\t        CATEGORY = 1\n\t        ORDINAL = 2\n\t    class Aggregate(Enum):\n\t        SUM = 3\n\t        WEIGHTED_AVERAGE = 4\n", "        COUNT = 5\n\tclass PivotField:\n\t    def __init__(self, name, field_type, weight_field=None, agg_func='sum', format=None):\n\t        self.name = name\n\t        self.field_type = field_type\n\t        self.weight_field = weight_field\n\t        self.agg_func = agg_func\n\t        self.format = format\n"]}
{"filename": "controls/PivotCtrl/demo_PivotCtrl.py", "chunked_list": ["import itertools\n\tfrom enum import Enum\n\timport dearpygui.dearpygui as dpg\n\timport pandas as pd\n\timport numpy as np\n\tfrom controls.DpgHelpers.MvItemTypes import MvItemTypes\n\tfrom controls.DpgHelpers.MvStyleVar import calc_single_window_height_from_items, calc_multi_window_height_in_table_rows\n\tfrom controls.Textures.TextureIds import TextureIds\n\tfrom controls.GridSelector.GridSelector import GridSelector\n\tfrom controls.PivotCtrl.PivotBroker import PivotBroker\n", "from controls.PivotCtrl.PivotField import PivotFieldType \n\tfrom controls.CheckListCtrl.CheckListCtrl import checkListCtrl\n\tfrom controls.PivotCtrl.PivotFilter import PivotFilterButton, pivotFilterDialog\n\t\"\"\"\n\tDONE\n\t- deal with empty rows, cols, aggs\n\t- fix swap buttons \n\t- create [categories, values] field types in pivot broker\n\t- [category, values, (Data)] can only drag-drop to right destinations\n\t- make weight averages work\n", "- finish categorical filter dialog\n\t- finish range filter dialog\n\t- make filters work\n\t    - move lambdas into a dict\n\t    - send lambdas to pivotBroker\n\tTODO\n\t- make filters work\n\t    - send df.columns to pivotFilterDialog somehow\n\t    - send df.uniques to pivotFilterDialog\n\t    - make category lambda work on numeric dtypes \n", "    - should pivotFilterDialog return a PivotFilterButton? Yes.\n\t- create PivotFilterState for loading, saving, and querying PivotBroker\n\t- how to create an empty group (for Where lane)?\n\t- myStyleVar_CellPadding; myStyleVar_SelectableTextAlign\n\t- pause grid_select on launch dialogs\n\t- fix `compact_index` if there's only one data field and (Data) is in cols\n\t- make texture loader check if ID already exists (should be loaded on app start)\n\t- enable sorting?\n\t- move the 'failed drag' code into a method\n\t- fix whatever bug is in the compact_index method \n", "\"\"\"\n\t# print(f\"Test: {MvItemTypes.Button.value == 'mvAppItemType::mvButton'}\")\n\tdpg.create_context()\n\tdpg.create_viewport(title='Custom Title', width=800, height=600)\n\tdpg.setup_dearpygui()\n\tID_PIVOT_PARENT = dpg.generate_uuid()\n\tID_FIELDLIST = dpg.generate_uuid()\n\tID_ROWSLIST = dpg.generate_uuid()\n\tID_COLSLIST = dpg.generate_uuid()\n\tID_DATALIST = dpg.generate_uuid()\n", "ID_GRID_SELECT = dpg.generate_uuid()\n\tID_PIVOT_TABLE = dpg.generate_uuid()\n\tID_PIVOT_CONFIG_WINDOW = dpg.generate_uuid()\n\tdef load_textures():\n\t    with dpg.texture_registry():\n\t        for tex_info in TextureIds.get_tex_info():\n\t            w_h_c_data = dpg.load_image(tex_info.PATH)\n\t            if(w_h_c_data == None):\n\t                raise Exception(\"Failed to load image, check current working directory is project folder.\")\n\t            width, height, channels, im_data = w_h_c_data\n", "            dpg.add_static_texture(width=width, height=height, default_value=im_data, tag=tex_info.UUID)\n\tload_textures()\n\t# print(dpg.does_alias_exist('3215'))\n\t# print(dpg.does_item_exist('3215'))\n\tpivotBroker = PivotBroker()\n\tdf = pivotBroker.get_pivot(filters=None, \n\t                        rows=['Fruit', '(Data)', 'Shape'], # '(Data)', \n\t                        cols=['Year'],\n\t                        aggs=['Weight', 'Volume'])\n\t# print(df)\n", "# print(df.columns)\n\t# print(df.shape)\n\t# print(df.index)\n\t# w_h_c_data = dpg.load_image(\"controls/assets/partial_check.png\")\n\t# print(w_h_c_data)\n\tdef get_column_to_index_treedict(df):\n\t    \"\"\"\n\t    Get a mapping from hierarchical column levels to DataFrame column indices.\n\t    Args:\n\t    df (pandas.DataFrame): The DataFrame to map.\n", "    Returns:\n\t    dict: A nested dictionary where the keys at each level correspond to the\n\t    values at each level of the DataFrame's columns. The values at the deepest\n\t    level are the indices of the corresponding columns in the DataFrame.\n\t    \"\"\"\n\t    # Initialize an empty dictionary\n\t    lookup = {}\n\t    if isinstance(df.columns, pd.MultiIndex):\n\t        # Iterate over the DataFrame's columns\n\t        for i, col in enumerate(df.columns):\n", "            # Extract the values at each level of the column\n\t            level_values = col[:len(df.columns.names)]\n\t            # Traverse the lookup dictionary, creating new dictionaries as needed\n\t            current_dict = lookup\n\t            for value in level_values[:-1]:\n\t                if value not in current_dict:\n\t                    current_dict[value] = {}\n\t                current_dict = current_dict[value]\n\t            # Add the final level to the lookup dictionary\n\t            if level_values[-1] not in current_dict:\n", "                current_dict[level_values[-1]] = i\n\t    else:\n\t        lookup = { item: i for i, item in enumerate(df.columns)}\n\t    return lookup\n\tdef get_index_to_columnnames_dict(column_map, current_keys=[], index_map={}):\n\t    \"\"\"\n\t    Recursively create an index map for a nested column structure.\n\t    Args:\n\t    column_map (dict): The column map dict.\n\t    current_keys (list): The current position within the column map, at each level of the hierarchy.\n", "    index_map (dict): The index map to populate. This is also the return value.\n\t    Returns:\n\t    dict: The populated index map, mapping indices to positions.\n\t    \"\"\"\n\t    current_level = column_map\n\t    for key in current_keys:\n\t        current_level = current_level[key]\n\t    for key, value in current_level.items():\n\t        if isinstance(value, dict):\n\t            get_index_to_columnnames_dict(column_map, current_keys + [key], index_map)\n", "        else:\n\t            index_map[value] = current_keys + [key]\n\t    return index_map\n\tdef compact_index(df):\n\t    \"\"\"\n\t    Compacts a DataFrame MultiIndex by replacing consecutive identical values with ''.\n\t    Args:\n\t    df (pandas.DataFrame): The DataFrame with the MultiIndex to compact.\n\t    Returns:\n\t    list: A list of lists, each containing the compacted values from each level of the MultiIndex.\n", "    \"\"\"\n\t    if not isinstance(df.index, pd.MultiIndex):\n\t        # If the index is not a MultiIndex, just convert it to a list and wrap it in another list\n\t        compact_index = [[item] for item in df.index.tolist()]\n\t    else:\n\t        index_list = df.index.tolist()  # Convert the MultiIndex to a list of tuples\n\t        # Use a list comprehension to replace consecutive identical values with ''\n\t        compact_index = [[col if j == 0 or col != index_list[j - 1][i] else '' for i, col in enumerate(row)] for j, row in enumerate(index_list)]\n\t    return compact_index\n\tdef add_df_multilevelindex_recursive(column_names, depth):\n", "    # called inside a row\n\t    if depth < len(column_names)-1:\n\t        with dpg.table(parent=dpg.last_item(), header_row=True, resizable=True, no_host_extendX=True):\n\t            dpg.add_table_column() #label=column_names[depth])\n\t            with dpg.table_row():\n\t                add_df_multilevelindex_recursive(column_names, depth+1)\n\t    else:\n\t        with dpg.table(header_row=True, resizable=True, no_host_extendX=True):\n\t            for name in df.index.names:\n\t                dpg.add_table_column(label=name)\n", "            prev_keytuple = None\n\t            for keytuple in df.index:\n\t                with dpg.table_row():\n\t                    for i in range(len(df.index.names)):\n\t                        label = keytuple[i] if prev_keytuple is None or keytuple[i] != prev_keytuple[i] else \"\"\n\t                        dpg.add_selectable(label=label)\n\t                    prev_keytuple = keytuple\n\tdef add_df_monolevelindex_recursive(depth):\n\t    \"\"\"\n\t    - is called inside a row\n", "    - is called when isinstance(df.columns, pd.MultiIndex) \n\t    \"\"\"\n\t    # col_btns = [item for item in dpg.get_item_children(ID_COLSLIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n\t    if depth < len(df.columns.names)-2:\n\t        with dpg.table():\n\t            dpg.add_table_column() # label=dpg.get_item_label(col_btns[depth+1]))\n\t            with dpg.table_row():\n\t                add_df_monolevelindex_recursive(depth+1)\n\t    else:\n\t        with dpg.table():\n", "            dpg.add_table_column(label=df.index.name)\n\t            for i in range(len(df.index)):\n\t                with dpg.table_row():\n\t                    dpg.add_selectable(label=df.index[i])\n\tdef add_df_multicolumndata_recursive(column_map, keys):\n\t    \"\"\"\n\t    Recursively build nested table structure for DearPyGui based on a multi-level column map.\n\t    Args:\n\t    column_map (dict): Multi-level column map from DataFrame column hierarchy to indices. \n\t                        The values of the map are either further dictionaries (for non-leaf nodes)\n", "                        or integers (for leaf nodes), referring to column indices in the DataFrame.\n\t    keys (list): Keys to the current level in the column map.\n\t    \"\"\"\n\t    # Retrieve current level dictionary from column map\n\t    current_level = column_map\n\t    for key in keys:\n\t        current_level = current_level[key]\n\t    # implicitly, we are in a row at this step\n\t    # adding a table to each column in the row\n\t    for key in current_level.keys():\n", "        with dpg.table(header_row=True, resizable=True, policy=dpg.mvTable_SizingStretchProp,\n\t                row_background=False, no_host_extendX=True, no_pad_innerX=False,\n\t                borders_outerH=False, borders_innerV=True):\n\t            nx_level = current_level[key]\n\t            for nx_key in nx_level:\n\t                dpg.add_table_column(label=nx_key)\n\t            if isinstance(next(iter(nx_level.values())), dict):\n\t                # if the values of nx_level are dicts, keep going \n\t                with dpg.table_row():\n\t                    add_df_multicolumndata_recursive(column_map, keys + [key])              \n", "            else:\n\t                # if the values of nx_level are strings, write table \n\t                for row_index in range(df.shape[0]):\n\t                    with dpg.table_row():\n\t                        for relative_column_index, absolute_column_index in enumerate(nx_level.values()):\n\t                            val = df.iloc[row_index, absolute_column_index]\n\t                            cell = dpg.add_selectable(label=\"{:.2f}\".format(val))\n\t                            grid_selector.widget_grid[row_index][absolute_column_index] = cell\n\t                            grid_selector.dpg_lookup[row_index][absolute_column_index] = [\n\t                                dpg.get_item_parent(dpg.get_item_parent(cell)), \n", "                                row_index , # offset for multi-index row\n\t                                relative_column_index # + len(df.index[0])\n\t                            ]\n\tcolumn_names_to_absolute_column_index = get_column_to_index_treedict(df)\n\t# print(column_map)\n\tabsolute_column_index_to_column_names = get_index_to_columnnames_dict(column_names_to_absolute_column_index)\n\t# print(index_to_column_names)  \n\t# grid_selector = GridSelector(ID_GRID_SELECT, width=df.shape[1], height=df.shape[0])\n\t# ===========================\n\tdef swap_button_labels(selected_tag, forward=True):\n", "    parent_group = dpg.get_item_parent(selected_pivot_index)\n\t    children = dpg.get_item_children(parent_group, 1)\n\t    # Ensure selected index is not the last one\n\t    if selected_tag in children:\n\t        # Get the tags of the selected item and the next item\n\t        idx = children.index(selected_tag)\n\t        if forward and idx == len(children) - 1:\n\t            return\n\t        if not forward and idx == 0:\n\t            return\n", "        next_tag = children[idx + (1 if forward else -1)]\n\t        if (dpg.get_item_type(next_tag) != MvItemTypes.Button.value):\n\t            return\n\t        # Get the labels of the selected item and the next item\n\t        selected_label = dpg.get_item_label(selected_tag)\n\t        next_label = dpg.get_item_label(next_tag)\n\t        # Swap the labels\n\t        dpg.set_item_label(selected_tag, label=next_label)\n\t        dpg.set_item_label(next_tag, label=selected_label)\n\t        pidx_highlight_button(next_tag, None, None)\n", "# ===========================\n\tdef configure_fields():\n\t    # grid_selector.pause()\n\t    fields = pivotBroker.get_field_list()\n\t    current_sel = [dpg.get_item_label(id) for id in dpg.get_item_children(ID_FIELDLIST, 1)]\n\t    data = [(label in current_sel, label) for label in fields]\n\t    checkListCtrl(title=\"Select fields\", data=data, send_data=configure_fields_callback)\n\tdef configure_fields_callback(user_sel):\n\t    # delete current field list\n\t    fields = dpg.get_item_children(ID_FIELDLIST, 1)\n", "    for field in fields:\n\t        dpg.delete_item(field)\n\t    list_of_pivot_field_selectables = []\n\t    # build field list from selection\n\t    for sel, field in user_sel:\n\t        if sel:\n\t            create_pivot_sel(parent=ID_FIELDLIST, label=field)\n\t    # delete any [rows, cols, data] if not in field list\n\t    fields = ['(Data)'] + [sel[1] for sel in user_sel if sel[0]]\n\t    row_btns = [item for item in dpg.get_item_children(ID_ROWSLIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n", "    for btn in row_btns:\n\t        if(dpg.get_item_label(btn) not in fields):\n\t            dpg.delete_item(btn)\n\t            list_of_pivot_index_buttons.remove(btn)\n\t    col_btns = [item for item in dpg.get_item_children(ID_COLSLIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n\t    for btn in col_btns:\n\t        if(dpg.get_item_label(btn) not in fields):\n\t            dpg.delete_item(btn)\n\t            list_of_pivot_index_buttons.remove(btn)\n\t    data_btns = [item for item in dpg.get_item_children(ID_DATALIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n", "    for btn in data_btns:\n\t        if(dpg.get_item_label(btn) not in fields):\n\t            dpg.delete_item(btn)\n\t            list_of_pivot_index_buttons.remove(btn)\n\t    update_pivot()\n\t    # print(user_sel)\n\t# ===========================\n\tselected_pivot_index = -1\n\tlist_of_pivot_field_selectables = []\n\tlist_of_pivot_index_buttons = []\n", "dict_of_pivot_filter_buttons = {}\n\tdef on_pidx_swap(selected_tag, forward=True):\n\t    swap_button_labels(selected_tag, forward)\n\t    update_pivot()\n\tdef on_psel_drop(drop_sender, drag_sender):\n\t    \"\"\"\n\t    Handles drag-drop onto the Fields listbox.\n\t    Simply delete the caller, update the button list, and done. \n\t    \"\"\"\n\t    print(f\"Dropped {drag_sender} onto {drop_sender}\")\n", "    # special case for `(Data)` pidx_button\n\t    if dpg.get_item_label(drag_sender) == '(Data)':\n\t        return\n\t    # logic for dragging from rows and columns back to selected fields\n\t    if drag_sender in list_of_pivot_index_buttons:\n\t        dpg.delete_item(drag_sender)\n\t        list_of_pivot_index_buttons.remove(drag_sender)\n\t    # logic for dragging from filters back to selected fields\n\t    update_pivot()\n\tdef on_pwhere_drop(drop_sender, drag_sender):\n", "    \"\"\"\n\t    Handles drag-drop onto [Where] lanes.\n\t    - Check if the drag field type matches the accepted payload type (GroupBy or Aggregate)\n\t    - Delete the caller if caller was a pidx_button\n\t    - Create a new pidx_button at the drop site\n\t    \"\"\"\n\t    print(f\"Dropped {drag_sender} onto {drop_sender}\")\n\t    field_name = dpg.get_item_label(drag_sender)\n\t    drag_field_instance = pivotBroker.get_field_type(field_name) # category or aggregate field\n\t    global dict_of_pivot_filter_buttons\n", "    # special case for '(Data)' \n\t    if field_name=='(Data)':\n\t        # delete the previous popup\n\t        if(dpg.does_item_exist(\"popup_reject_drop\")):\n\t            dpg.delete_item(\"popup_reject_drop\")\n\t        with dpg.window(popup=True, tag=\"popup_reject_drop\", height=24) as popup:\n\t            dpg.add_text(f\"Can't drop '(data)' into a 'Where' lane.\")\n\t        return\n\t    # deal with duplicates\n\t    if field_name in [f.field for f in dict_of_pivot_filter_buttons.values()]:\n", "        return\n\t    # on drag from other lanes\n\t    if drag_sender in list_of_pivot_index_buttons:\n\t        create_pivot_filter(parent=drop_sender, field=field_name, label=field_name, field_type=drag_field_instance)\n\t        dpg.delete_item(drag_sender)\n\t        list_of_pivot_index_buttons.remove(drag_sender)\n\t    # on drag from field list\n\t    elif drag_sender in list_of_pivot_field_selectables:\n\t        create_pivot_filter(parent=drop_sender, field=field_name, label=f\"{field_name} is in [values]\", field_type=drag_field_instance)\n\t    update_pivot()\n", "def on_pidx_drop(drop_sender, drag_sender):\n\t    \"\"\"\n\t    Handles drag-drop onto [Rows, Cols, Values] lanes.\n\t    - Check if the drag field type matches the accepted payload type (GroupBy or Aggregate)\n\t    - Delete the caller if caller was a pidx_button\n\t    - Create a new pidx_button at the drop site\n\t    \"\"\"\n\t    print(f\"Dropped {drag_sender} onto {drop_sender}\")\n\t    field_name = dpg.get_item_label(drag_sender)\n\t    drag_field_instance = pivotBroker.get_field_type(field_name)\n", "    drop_field_type = dpg.get_item_user_data(drop_sender)\n\t    if (not isinstance(drag_field_instance, drop_field_type)): # or (field_name == \"(Data)\" and drop_field_type != PivotFieldTypes.GroupBy):\n\t        # delete the previous popup\n\t        if(dpg.does_item_exist(\"popup_reject_drop\")):\n\t            dpg.delete_item(\"popup_reject_drop\")\n\t        drag_type_str = \"GroupBy\" if isinstance(drag_field_instance, PivotFieldType.GroupBy) else \"Data\"\n\t        drop_type_str = \"GroupBy\" if (drop_field_type == PivotFieldType.GroupBy) else \"Data\"\n\t        with dpg.window(popup=True, tag=\"popup_reject_drop\", height=24) as popup:\n\t            dpg.add_text(f\"Can't drop a '{drag_type_str}' field into a '{drop_type_str}' lane.\")\n\t        return\n", "    global list_of_pivot_index_buttons\n\t    current_buttons = list_of_pivot_index_buttons\n\t    # logic for dragging between rows and columns\n\t    if drag_sender in list_of_pivot_index_buttons:\n\t        create_pivot_idx(parent=drop_sender, label=field_name)\n\t        dpg.delete_item(drag_sender)\n\t        list_of_pivot_index_buttons.remove(drag_sender)\n\t    # logic for dragging from field list to rows and columns\n\t    elif drag_sender in list_of_pivot_field_selectables:\n\t        # only add field to rows and cols if not already present\n", "        list_of_pivot_index_buttons =  [item for item in list_of_pivot_index_buttons if dpg.get_item_label(item) != field_name]\n\t        deletions = [item for item in current_buttons if item not in list_of_pivot_index_buttons]\n\t        for e in deletions:\n\t            dpg.delete_item(e)\n\t        create_pivot_idx(parent=drop_sender, label=field_name)\n\t    update_pivot()\n\tdef on_pidx_drag(sender):\n\t    pidx_highlight_button(sender, None, None)\n\tdef pidx_highlight_button(sender, app_data, user_data): \n\t    global selected_pivot_index\n", "    # highlight the button and unhighlight the rest\n\t    for button in list_of_pivot_index_buttons:\n\t        if button == sender:\n\t            dpg.bind_item_theme(button, selected_button)\n\t            selected_pivot_index = button\n\t        else:\n\t            dpg.bind_item_theme(button, 0)\n\tdef create_pivot_idx(parent, label):\n\t    drag_tag = dpg.generate_uuid()\n\t    b = dpg.add_button(tag=drag_tag, label=label, parent=parent, payload_type=\"PROW\", drag_callback=on_pidx_drag, callback=pidx_highlight_button) # , width=8*len(label)\n", "    list_of_pivot_index_buttons.append(b)\n\t    with dpg.drag_payload(parent=b, payload_type=\"PROW\", drag_data=drag_tag, drop_data=\"drop data\"):\n\t        dpg.add_text(label)\n\tdef create_pivot_sel(parent, label):\n\t    drag_tag = dpg.generate_uuid()\n\t    b = dpg.add_selectable(tag=drag_tag, label=label, parent=parent, payload_type=\"PROW\")\n\t    list_of_pivot_field_selectables.append(b)\n\t    with dpg.drag_payload(parent=b, payload_type=\"PROW\", drag_data=drag_tag, drop_data=\"drop data\"):\n\t        dpg.add_text(label)\n\tdef create_pivot_filter(parent, field: str, label: str, field_type: PivotFieldType):\n", "    # print(type(field_type))\n\t    drag_tag = dpg.generate_uuid()\n\t    b = dpg.add_button(\n\t        tag=drag_tag, \n\t        label=label, \n\t        parent=parent, \n\t        payload_type=\"PROW\", \n\t        callback=show_pivotFilterDialog\n\t    )\n\t    dict_of_pivot_filter_buttons[b] = PivotFilterButton(id=b, field=field, label=label, filter=lambda row: True, field_type=field_type)\n", "    # TODO move this into its own method\n\t    # resize filter window\n\t    count_items = len(dict_of_pivot_filter_buttons.keys())\n\t    height = calc_single_window_height_from_items(count_items=count_items)\n\t    dpg.configure_item(parent, height = height)\n\t    # resize the parent window\n\t    height = calc_multi_window_height_in_table_rows(count_items_in_each_window=[count_items, 3])\n\t    dpg.configure_item(ID_PIVOT_CONFIG_WINDOW, height = height)\n\t    with dpg.drag_payload(parent=b, payload_type=\"PROW\", drag_data=drag_tag, drop_data=\"drop data\"):\n\t        dpg.add_text(field)\n", "# ==========================================\n\tdef show_pivotFilterDialog(sender):\n\t    # TODO pause gridselect when dialog launched\n\t    global pivotBroker\n\t    global dict_of_pivot_filter_buttons\n\t    field = dict_of_pivot_filter_buttons[sender].field\n\t    # if sender is an aggregate field, disable categorical filtering and force range filtering\n\t    # we need to check if this field has already been filtered\n\t    # and if so, build the filter list for the dialog\n\t    data = [(True, val) for val in pivotBroker.get_uniques(field)]\n", "    # sort the data alphabetically\n\t    data = sorted(data, key=lambda item: item[1])\n\t    pivotFilterDialog(title=\"Filter by\", field=field, data=data, sender=sender, send_data=pivotFilterDialog_callback)\n\tdef pivotFilterDialog_callback(sender, user_lambda):\n\t    # keep the lambdas in a dict, indexed by the ID of the filter button\n\t    dict_of_pivot_filter_buttons[sender].filter = user_lambda\n\t    update_pivot()\n\t    # print(pivotBroker.get_filtered(user_lambda))\n\t# ==========================================\n\twith dpg.theme() as listbox_theme:\n", "    with dpg.theme_component(dpg.mvSelectable):\n\t        dpg.add_theme_color(dpg.mvThemeCol_Header, (0.26 * 255, 0.59 * 255, 0.98 * 255, 0.31 * 255))\n\t    with dpg.theme_component(dpg.mvAll):\n\t        # dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (150, 100, 100), category=dpg.mvThemeCat_Core)\n\t        # dpg.add_theme_color(dpg.mvThemeCol_WindowBg, (255,255,255,255), category=dpg.mvThemeCat_Core)\n\t        dpg.add_theme_color(dpg.mvThemeCol_ChildBg, (51,51,55,255), category=dpg.mvThemeCat_Core)\n\twith dpg.theme() as transparent_button:\n\t    with dpg.theme_component(dpg.mvButton):\n\t        dpg.add_theme_color(dpg.mvThemeCol_Button, (255, 255, 255, 0))  # transparent background\n\twith dpg.theme() as selected_button:\n", "    with dpg.theme_component(dpg.mvButton):\n\t        dpg.add_theme_color(dpg.mvThemeCol_Button, (0.26 * 255, 0.59 * 255, 0.98 * 255, 0.31 * 255))  #\n\t        # myStyleVar_FrameRounding\n\t        # myStyleVar_FrameBorderSize\n\t        # FrameBorder\n\t# ===========================\n\tdef delete_pivot():\n\t    if dpg.does_item_exist(ID_PIVOT_TABLE):\n\t        grid_selector.deregister()\n\t        dpg.delete_item(ID_PIVOT_TABLE)\n", "def update_pivot():\n\t    delete_pivot()\n\t    global grid_selector\n\t    global df \n\t    global column_names_to_absolute_column_index\n\t    # global absolute_column_index_to_column_names\n\t    filters = [item.filter for item in dict_of_pivot_filter_buttons.values()]\n\t    rows = [dpg.get_item_label(item) for item in dpg.get_item_children(ID_ROWSLIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n\t    cols = [dpg.get_item_label(item) for item in dpg.get_item_children(ID_COLSLIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n\t    aggs = [dpg.get_item_label(item) for item in dpg.get_item_children(ID_DATALIST, 1) if (dpg.get_item_type(item) == MvItemTypes.Button.value)]\n", "    df = pivotBroker.get_pivot(filters=filters, \n\t                                rows=rows, \n\t                                cols=cols,\n\t                                aggs=aggs)\n\t    grid_selector = GridSelector(ID_GRID_SELECT, width=df.shape[1], height=df.shape[0])\n\t    # print(df)\n\t    column_names_to_absolute_column_index = get_column_to_index_treedict(df)\n\t    # print(column_names_to_absolute_column_index)\n\t    # absolute_column_index_to_column_names = get_index_to_columnnames_dict(column_names_to_absolute_column_index)\n\t    # print(absolute_column_index_to_column_names)\n", "    pretty_df_index = compact_index(df)\n\t    # print(pretty_df_index)\n\t    if not isinstance(df.columns, pd.MultiIndex):\n\t        with dpg.table(tag=ID_PIVOT_TABLE, parent=ID_PIVOT_PARENT,\n\t                header_row=True, resizable=True, policy=dpg.mvTable_SizingStretchProp,\n\t                row_background=False, no_host_extendX=True, no_pad_innerX=False,\n\t                borders_outerH=True, \n\t                borders_outerV=True,\n\t                borders_innerV=True):\n\t            # case where columns are not multi-index\n", "            for name in df.index.names:\n\t                dpg.add_table_column(label=name)\n\t            for key in column_names_to_absolute_column_index.keys():\n\t                dpg.add_table_column(label=key)\n\t            for row_index in range(df.shape[0]):\n\t                with dpg.table_row() as trow:\n\t                    for name in pretty_df_index[row_index]:\n\t                        # TODO figure out why putting text here messes up the widget heights in grid_selector\n\t                        dpg.add_selectable(label=name)\n\t                    for relative_column_index, absolute_column_index in enumerate(column_names_to_absolute_column_index.values()):\n", "                        val = df.iloc[row_index, absolute_column_index]\n\t                        # pivot tables shall display numbers only\n\t                        if not isinstance(val, (int, float, np.number)):\n\t                            raise ValueError(f\"Expected a numeric value, but got {val} of type {type(val)}\")\n\t                        cell = dpg.add_selectable(label=\"{:.2f}\".format(val)) \n\t                        grid_selector.widget_grid[row_index][absolute_column_index] = cell\n\t                        grid_selector.dpg_lookup[row_index][absolute_column_index] = [\n\t                            dpg.get_item_parent(dpg.get_item_parent(cell)), \n\t                            row_index , \n\t                            relative_column_index + len(df.index.names) \n", "                        ]\n\t    else:\n\t        # case where columns are multi-index\n\t        with dpg.table(tag=ID_PIVOT_TABLE, parent=ID_PIVOT_PARENT,\n\t                header_row=True, resizable=True, policy=dpg.mvTable_SizingStretchProp,\n\t                row_background=False, no_host_extendX=True, no_pad_innerX=False,\n\t                borders_outerH=True, \n\t                borders_outerV=True,\n\t                borders_innerV=True):\n\t            # first level name\n", "            dpg.add_table_column() # label=df.columns.names[0])\n\t            # first level values\n\t            top_level = column_names_to_absolute_column_index.keys()\n\t            for key0 in top_level:\n\t                dpg.add_table_column(label=key0)\n\t            # a single row that contains all data in the table\n\t            with dpg.table_row():\n\t                # insert df.index into first column\n\t                if isinstance(df.index, pd.MultiIndex):\n\t                    column_names = df.columns.names[1:]\n", "                    add_df_multilevelindex_recursive(column_names, 0)\n\t                else:\n\t                    add_df_monolevelindex_recursive(0)\n\t                # if isinstance(df.columns, pd.MultiIndex):\n\t                add_df_multicolumndata_recursive(column_names_to_absolute_column_index, keys=[])\n\t                # else:\n\t                #     print(column_map)\n\t# ===========================\n\twith dpg.window(tag=ID_PIVOT_PARENT, width=700, height=600):\n\t    # dpg.add_button(label='Update table', callback=update_pivot)\n", "    with dpg.collapsing_header(label=\"Setup\"):\n\t        with dpg.child_window(tag=ID_PIVOT_CONFIG_WINDOW):\n\t            # ---- horizontal splot\n\t            with dpg.group(horizontal=True): \n\t                # ---- field selector\n\t                with dpg.group(horizontal=False):\n\t                    dpg.add_button(label=\"Select: \", callback=configure_fields)\n\t                    with dpg.group(horizontal=True):\n\t                        with dpg.child_window(tag=ID_FIELDLIST, width=80, height=90, drop_callback= on_psel_drop, payload_type=\"PROW\") as id_listbox:\n\t                            with dpg.group(horizontal=False, width=80):\n", "                                    items = pivotBroker.get_field_list()\n\t                                    for item in items[:-1]:\n\t                                        create_pivot_sel(parent=ID_FIELDLIST, label=item)  \n\t                dpg.bind_item_theme(id_listbox, listbox_theme)\n\t                # --- field organiser\n\t                with dpg.table(header_row=False, policy=dpg.mvTable_SizingStretchProp,\n\t                                    no_host_extendX=True, no_pad_innerX=False,\n\t                                    borders_outerH=False, \n\t                                    borders_outerV=False,\n\t                                    borders_innerV=False, borders_innerH=False):\n", "                    dpg.add_table_column(width=40, width_fixed=True)\n\t                    dpg.add_table_column(width_stretch=True, init_width_or_weight=0.0)\n\t                    with dpg.table_row():\n\t                        dpg.add_text(\"Where: \")\n\t                        # with dpg.group(horizontal=False, \n\t                        #             drop_callback= on_pwhere_drop, \n\t                        #             payload_type=\"PROW\") as g:\n\t                        dpg.add_child_window(height=calc_single_window_height_from_items(1), \n\t                                    drop_callback= on_pwhere_drop, \n\t                                    payload_type=\"PROW\")\n", "                            # create_pivot_filter(parent=g, field=\"Fruit\", label=\"Fruit is any value\", field_type=PivotFieldType.GroupBy.CATEGORY) # Year is in [2022, 2023]\n\t                            # create_pivot_filter(parent=g, field=\"Weight\", label=\"Weight\") # Weight > 0\n\t                    with dpg.table_row():\n\t                        with dpg.group(horizontal=False):\n\t                            dpg.add_text(\"Groupby: \")\n\t                            with dpg.group(horizontal=True):\n\t                                pidx_left = dpg.add_button(arrow=True, direction=dpg.mvDir_Left)\n\t                                pidx_right = dpg.add_button(arrow=True, direction=dpg.mvDir_Right)\n\t                        with dpg.child_window():\n\t                            with dpg.group(horizontal=False):\n", "                                with dpg.group(tag=ID_ROWSLIST, horizontal=True, \n\t                                            drop_callback= on_pidx_drop, \n\t                                            user_data=PivotFieldType.GroupBy,\n\t                                            payload_type=\"PROW\"):\n\t                                    dpg.add_text(\"Rows: \", indent=10)\n\t                                    # create_pivot_idx(parent=ID_ROWSLIST, label=\"Fruit\")\n\t                                    # create_pivot_idx(parent=ID_ROWSLIST, label=\"Shape\")\n\t                                with dpg.group(tag=ID_COLSLIST, horizontal=True, \n\t                                            drop_callback= on_pidx_drop, \n\t                                            user_data=PivotFieldType.GroupBy,\n", "                                            payload_type=\"PROW\"):\n\t                                    dpg.add_text(\"Columns: \", indent=10)\n\t                                    # create_pivot_idx(parent=ID_COLSLIST, label=\"Year\")\n\t                                    create_pivot_idx(parent=ID_ROWSLIST, label=\"(Data)\")\n\t                                with dpg.group(tag=ID_DATALIST, horizontal=True, \n\t                                            drop_callback= on_pidx_drop, \n\t                                            user_data=PivotFieldType.Aggregate,\n\t                                            payload_type=\"PROW\") as g:\n\t                                    dpg.add_text(\"Data: \", indent=10)\n\t                                    # create_pivot_idx(parent=ID_DATALIST, label=\"Volume\")\n", "                                    # create_pivot_idx(parent=ID_DATALIST, label=\"Weight\")\n\t                        dpg.set_item_callback(pidx_left, lambda: on_pidx_swap(selected_tag=selected_pivot_index, forward=False))\n\t                        dpg.set_item_callback(pidx_right, lambda: on_pidx_swap(selected_tag=selected_pivot_index, forward=True))\n\t        height = calc_multi_window_height_in_table_rows(count_items_in_each_window=[1, 3])\n\t        dpg.configure_item(ID_PIVOT_CONFIG_WINDOW, height = height)\n\t    update_pivot()\n\tdpg.show_style_editor()\n\tdpg.show_item_registry()\n\tdpg.show_viewport()\n\twhile dpg.is_dearpygui_running():\n", "    dpg.render_dearpygui_frame()\n\tdpg.destroy_context()\n"]}
{"filename": "controls/PivotCtrl/PivotBroker.py", "chunked_list": ["import dataclasses\n\tfrom enum import Enum\n\tfrom typing import List, Dict, Callable\n\timport pandas as pd\n\timport numpy as np\n\tfrom controls.PivotCtrl.DataSource import get_flat_data, get_field_data\n\tfrom controls.PivotCtrl.PivotField import PivotField, PivotFieldType\n\tfrom controls.Scripting.scripting import create_combined_lambdas\n\tclass PivotBroker:\n\t    # mediator between PivotCtrl and DataSource\n", "    # receives pivot parameters from the UI\n\t    # sends pivoted dataframe to the UI\n\t    # handles all pandas operations separately from UI \n\t    # tells the UI the available fields names and types\n\t    df: pd.DataFrame\n\t    field_data: Dict[str, PivotField]\n\t    def __init__(self):\n\t        # if df is multiindex raise exception\n\t        # should be flat data\n\t        self.df = get_flat_data()\n", "        assert not isinstance(self.df.columns, pd.MultiIndex), \"DataFrame columns should not be a MultiIndex\"\n\t        assert not isinstance(self.df.index, pd.MultiIndex), \"DataFrame index should not be a MultiIndex\"\n\t        assert isinstance(self.df.index, pd.RangeIndex), \"DataFrame index should be a default integer-based index (RangeIndex)\"\n\t        self.field_data = get_field_data()\n\t        # assign the aggregation functions to local PivotBroker functions\n\t        self.aggregation_functions = {\n\t            PivotFieldType.Aggregate.SUM: 'sum',\n\t            PivotFieldType.Aggregate.WEIGHTED_AVERAGE: self.custom_weighted_average,\n\t            PivotFieldType.Aggregate.COUNT: 'count',\n\t            # define other aggregation functions here...\n", "        }\n\t        for name, field in self.field_data.items():\n\t            if isinstance(field.field_type, PivotFieldType.Aggregate):\n\t                field.agg_func = self.aggregation_functions[field.field_type]\n\t    def get_field_list(self):\n\t        # return sorted(self.df.columns)\n\t        # assume the data source, in its infinite wisdom, has given us pre-ordered columns\n\t        return self.df.columns\n\t    def get_field_type(self, field_name):\n\t        if (field_name == \"(Data)\"):\n", "            return PivotFieldType.GroupBy.CATEGORY\n\t        if field_name not in self.field_data:\n\t            raise Exception(f\"The field '{field_name}' does not exist.\")\n\t        return self.field_data[field_name].field_type\n\t    def get_uniques(self, field_name):\n\t        if field_name not in self.field_data:\n\t            raise Exception(f\"The field '{field_name}' does not exist.\")\n\t        return self.df[field_name].unique()\n\t    def custom_weighted_average(self, series: pd.Series) -> float:\n\t        weight_col = self.field_data[series.name].weight_field\n", "        return np.average(series, weights=self.df.loc[series.index, weight_col])\n\t    def get_filtered(self, filter):\n\t        return self.df[self.df.apply(filter, axis=1)]\n\t    def get_pivot(self, \n\t                  filters: List[Callable], \n\t                  rows: List[str], \n\t                  cols: List[str], \n\t                  aggs: List[str]):\n\t        \"\"\"\n\t        :param rows: A list of fields to become index in the returned dataframe\n", "        :param cols: A list of fields to become columns in the returned dataframe\n\t        :param aggs: A list of fields to be grouped by rows and cols\n\t        A special string '(Data)' indicates the level of the `aggs` fields in one of the MultiIndexes.\n\t        \"\"\"\n\t        if not filters:\n\t            filtered_df = self.df\n\t        else:\n\t            combined_lambda = create_combined_lambdas(lambdas=filters)\n\t            filtered_df = self.df[self.df.apply(combined_lambda, axis=1)]\n\t        agg_dict = {field: self.field_data[field].agg_func for field in aggs}\n", "        # if 'Price/kg' in agg_dict:\n\t        #     agg_dict['Price/kg'] = self.custom_weighted_average\n\t        # before anything else, figure out the transpose situation\n\t        transpose = False\n\t        if('(Data)' in rows):\n\t            \"\"\"\n\t            If '(Data)' is in the rows, then swap rows with columns and transpose at the end. \n\t            \"\"\"\n\t            cols, rows = rows, cols\n\t            transpose = True\n", "        cols_init = ['(Data)'] + [col for col in cols if col != '(Data)'] # initial dataframe.columns.names\n\t        col_levels_dict = {col: cols_init.index(col) for col in cols_init} # index of each item in initial df\n\t        col_level_order = [col_levels_dict[item] for item in cols] # where we want the cols to be\n\t        # Remove '(Data)' from cols list\n\t        cols.remove('(Data)') \n\t         # deal with special cases\n\t        if not (rows+cols+aggs):\n\t            # special case: [rows, cols, aggs] are all empty\n\t            result = pd.DataFrame(index=[\"\"], columns=[\"\"]).fillna(0 )\n\t            return result    \n", "        elif not (aggs):\n\t            # special case: [rows, cols] populated but [aggs] empty\n\t            result = (filtered_df[rows+cols+aggs]\n\t                        .groupby(rows+cols)\n\t                        .sum(numeric_only=True)\n\t                        # .agg(agg_dict)\n\t                    )\n\t            # if rows is empty list, insert a 'Value' level \n\t            if not rows:  \n\t                result = pd.concat([result], axis=0, keys=['Value'])\n", "        elif not (rows+cols):\n\t            # special case: [aggs] populated but [rows, cols] empty\n\t            result = (filtered_df.copy()[aggs]\n\t                    #   .sum(numeric_only=True)\n\t                      .agg(agg_dict)\n\t                      .to_frame().T # convert series back to dataframe\n\t                    )\n\t            # set column name to 'Value'\n\t            result = result.rename(index={0: 'Value'})\n\t        else:\n", "            # general case: [rows, cols, aggs] populated\n\t            result = (filtered_df.copy()[rows+cols+aggs]\n\t                        .groupby(rows+cols)\n\t                        # .sum(numeric_only=True)\n\t                        .agg(agg_dict)\n\t                    )\n\t            # if rows is empty list, insert a 'Value' level \n\t            if not rows:  \n\t                result = pd.concat([result], axis=0, keys=['Value'])\n\t        # unstack columns\n", "        result = result.unstack(cols).fillna(0)\n\t        # reorder cols if not empty list\n\t        if cols: \n\t            # name the '(Data)' level\n\t            new_names = list(result.columns.names)\n\t            new_names[0] = \"Field\"\n\t            result.columns.set_names(new_names, inplace=True)\n\t            # order the columns\n\t            result = result.reorder_levels(order=col_level_order, axis=1)\n\t        # create a rename dict for custom field ordering\n", "        agg_order = {str: f'\"@$%\"+{idx}' for idx, str in enumerate(aggs)} \n\t        result.rename(columns=agg_order, inplace=True)\n\t        result = result.sort_index(axis=1)\n\t        result.rename(columns={v: k for k, v in agg_order.items()}, inplace=True)\n\t        if(transpose):\n\t            result = result.T\n\t        return result\n"]}
{"filename": "controls/PivotCtrl/__init__.py", "chunked_list": []}
{"filename": "controls/PivotCtrl/DataSource.py", "chunked_list": ["import random\n\tfrom typing import Dict\n\timport pandas as pd\n\timport numpy as np\n\tfrom controls.PivotCtrl.PivotField import PivotField, PivotFieldType\n\tdef get_field_data() -> Dict[str, PivotField]:\n\t    return {\n\t        'Year': PivotField('Year', PivotFieldType.GroupBy.ORDINAL),\n\t        'Quarter': PivotField('Quarter', PivotFieldType.GroupBy.ORDINAL),\n\t        'Fruit': PivotField('Fruit', PivotFieldType.GroupBy.CATEGORY),\n", "        'Shape': PivotField('Shape', PivotFieldType.GroupBy.CATEGORY),\n\t        'Vibe': PivotField('Vibe', PivotFieldType.GroupBy.CATEGORY),\n\t        'Weight': PivotField('Weight', PivotFieldType.Aggregate.SUM),\n\t        'Volume': PivotField('Volume', PivotFieldType.Aggregate.SUM),\n\t        'Price/kg': PivotField('Price/kg', PivotFieldType.Aggregate.WEIGHTED_AVERAGE, weight_field='Weight'),\n\t    }\n\tdef get_flat_data():\n\t    # Number of rows to generate\n\t    n_rows = 10\n\t    # Random fruits\n", "    vibe = random.choices([\"Cool\", \"Calm\", \"Chill\", \"Fire\", \"Deep\"], k=n_rows)\n\t    fruits = random.choices([\"Apple\", \"Pear\", \"Cherry\", \"Fig\", \"Banana\"], k=n_rows)\n\t    grade = random.choices([\"Round\", \"Square\", \"Star\", \"Cone\", \"Torus\"], k=n_rows)\n\t    # Random years and months\n\t    years = random.choices([2022, 2023, 2024, 2025, 2026, 2027], k=n_rows)\n\t    quarters = random.choices(np.arange(1,5), k=n_rows)\n\t    # Random weights and volumes\n\t    weights = np.random.rand(n_rows)\n\t    volumes = np.random.rand(n_rows)\n\t    price = np.random.rand(n_rows)\n", "    # Create DataFrame\n\t    df = pd.DataFrame({\n\t        'Year': years,\n\t        'Quarter': quarters,\n\t        'Fruit': fruits,\n\t        'Shape': grade,\n\t        'Vibe': vibe,\n\t        'Weight': weights,\n\t        'Volume': volumes,\n\t        'Price/kg': price,\n", "    })\n\t    return df\n\tdef get_pivot_data():\n\t    \"\"\"\n\t    Returns a dataframe like this.\n\t    Fruit           Apple               Cherry              Pear\n\t                    Volume    Weight    Volume    Weight    Volume    Weight\n\t    Year    Month\n\t    2022    1       6.896494  7.042704  4.536400  5.091052  7.183056  6.905257\n\t            2       3.416444  4.850913  1.073033  2.000163  6.995971  7.126390\n", "    2023    1       2.007010  2.951129  2.415113  1.579377  5.249216  3.125248\n\t            2       2.164300  3.162353  1.964546  2.241498  6.641311  7.045404\n\t    \"\"\"\n\t    # Create DataFrame\n\t    df = get_flat_data()\n\t    # Perform groupby, sum and unstack operations\n\t    df_grouped = (df.groupby(['Fruit', 'Shape', 'Year', 'Quarter'])\n\t                  .sum(numeric_only=True)\n\t                  .unstack(['Fruit', 'Shape'])\n\t                  .reorder_levels([1, 2, 0], axis=1)\n", "                  .sort_index(axis=1)\n\t                  .fillna(0)\n\t    )\n\t    df_grouped.columns.names = ['Fruit', 'Field', 'Shape']\n\t    return df_grouped\n"]}
{"filename": "controls/Scripting/scripting.py", "chunked_list": ["import ast\n\timport operator as op\n\tfrom typing import List, Union, Tuple, Callable\n\t\"\"\"\n\tTODO\n\t- return error messages instead of raising exceptions\n\t\"\"\"\n\tdef create_combined_lambdas(lambdas: List[Callable]) -> Callable:\n\t    \"\"\"\n\t    Takes a list of lambda functions and returns a new function that,\n", "    when called with a row of a DataFrame, returns True only if all of the\n\t    lambda functions in the list return True for that row.\n\t    Args:\n\t    lambdas: List[Callable]\n\t        A list of lambda functions that take a DataFrame row and return a bool.\n\t    Returns:\n\t    Callable\n\t        A function that takes a DataFrame row and returns a bool.\n\t    Usage:\n\t    >>> lambdas = create_combined_lambdas(list_of_lambdas)\n", "    >>> filtered_df = df[df.apply(lambdas, axis=1)]\n\t    \"\"\"\n\t    def filter_func(row):\n\t        # apply each lambda to the row and check if all return True\n\t        return all(f(row) for f in lambdas)\n\t    return filter_func\n\tdef create_lambda_from_checklist(column: str, include_items: List[Union[str, int]]):\n\t    \"\"\"\n\t    Create a lambda function to filter a DataFrame based on multiple conditions.\n\t    Args:\n", "        column: A column name in a dataframe.\n\t        include_items: A list of items to include from that column.\n\t    Returns:\n\t        callable: A lambda function which when applied to a DataFrame, filters the DataFrame based \n\t        on the conditions provided.\n\t    Usage:\n\t    >>> lambda = construct_filter_lambda('Fruit',  ['Pear'])\n\t    >>> filtered_df = df[df.apply(lambda, axis=1)]\n\t    \"\"\"\n\t    def filter_func(row):\n", "        return row[column] in include_items\n\t    return filter_func\n\tdef create_lambda_from_expression(expr: str, allowed_vars: List[str]):\n\t    \"\"\"\n\t    Create a lambda function from a given string expression. \n\t    This function converts a user provided string expression into a valid \n\t    lambda function, ensuring that the expression only contains allowed variables.\n\t    Parameters:\n\t    expr (str): The string expression to be converted into a lambda function.\n\t    allowed_vars (List[str]): A list of variable names that are allowed in the expression.\n", "    Returns:\n\t    function: A lambda function equivalent to the provided string expression.\n\t    Raises:\n\t    ValueError: If the provided string expression contains disallowed variables or operations,\n\t                a ValueError is raised with the message: \"Disallowed expression: {expr}\".\n\t    Example:\n\t    Given a DataFrame df with columns ['Fruit', 'Year', 'Quarter']:\n\t    >>> expr = '((Fruit == \"Apple\") and (Year == 2023)) or (Quarter == 4)'\n\t    >>> lambda_func = create_lambda_from_expression(expr, allowed_vars=['Fruit', 'Year', 'Quarter'])\n\t    >>> filtered_df = df[df.apply(lambda_func, axis=1)]\n", "    The filtered_df will contain only the rows where Fruit is \"Apple\" and Year is 2023,\n\t    or where Quarter is 4.\n\t    Note: The lambda function operates on a row-wise basis (i.e., axis=1 in df.apply()).\n\t    Each identifier in expr corresponds to a column in the DataFrame.\n\t    \"\"\"\n\t    node = ast.parse(expr, mode='eval')\n\t    if not is_allowed(node, allowed_vars):\n\t        raise ValueError(f\"Disallowed expression: {expr}\")\n\t    return ast_to_lambda(node)\n\tdef is_allowed(node, allowed_vars):\n", "    \"\"\"\n\t    Recursively check if a parsed AST node is allowed.\n\t    Parameters:\n\t    node (ast.AST): The AST node to check.\n\t    allowed_vars (List[str]): A list of variable names that are allowed in the expression.\n\t    Returns:\n\t    bool: True if the node is allowed, False otherwise.\n\t    \"\"\"\n\t    if isinstance(node, (ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.Eq, ast.NotEq)):\n\t        return True\n", "    elif isinstance(node, ast.BoolOp):\n\t        return all(is_allowed(value, allowed_vars) for value in node.values)\n\t    elif isinstance(node, ast.Compare):\n\t        return is_allowed(node.left, allowed_vars) and all(is_allowed(comp, allowed_vars) for comp in node.ops) and all(is_allowed(c, allowed_vars) for c in node.comparators)\n\t    elif isinstance(node, ast.Name):\n\t        return node.id in allowed_vars\n\t    elif isinstance(node, ast.Constant):\n\t        return True\n\t    elif isinstance(node, ast.Expression):\n\t        return is_allowed(node.body, allowed_vars)\n", "    else:\n\t        return False\n\tdef ast_to_lambda(node):\n\t    \"\"\"\n\t    Convert an AST to a lambda function.\n\t    Parameters:\n\t    node (ast.AST): The AST node to convert.\n\t    Returns:\n\t    function: A lambda function equivalent to the provided AST node.\n\t    \"\"\"\n", "    if isinstance(node, ast.Expression):\n\t        return ast_to_lambda(node.body)\n\t    elif isinstance(node, ast.BoolOp):\n\t        if isinstance(node.op, ast.And):\n\t            return lambda row: all(ast_to_lambda(value)(row) for value in node.values)\n\t        elif isinstance(node.op, ast.Or):\n\t            return lambda row: any(ast_to_lambda(value)(row) for value in node.values)\n\t        else:\n\t            raise ValueError(f\"Unsupported boolean operator: {type(node.op)}\")\n\t    elif isinstance(node, ast.Compare):\n", "        if len(node.ops) == 1:\n\t            return make_compare_lambda(node.left, node.ops[0], node.comparators[0])\n\t        elif len(node.ops) == 2:\n\t            # print(ast.dump(node, indent=4))\n\t            # Compare(\n\t            #     left=Constant(value=2022),\n\t            #     ops=[\n\t            #         Lt(),\n\t            #         Lt()],\n\t            #     comparators=[\n", "            #         Name(id='Year', ctx=Load()),\n\t            #         Constant(value=2024)])\n\t            my_ast = ast.BoolOp(op=ast.And(),\n\t                values=[ast.Compare(left=node.left,\n\t                                    ops=[node.ops[0]],\n\t                                    comparators=[node.comparators[0]]),\n\t                        ast.Compare(left=node.comparators[0],\n\t                                    ops=[node.ops[1]],\n\t                                    comparators=[node.comparators[1]])])\n\t            return lambda row: ast_to_lambda(my_ast)(row)\n", "        else:\n\t            raise ValueError(\"More than two comparisons are not supported.\")\n\t    else:\n\t        raise ValueError(f\"Unsupported node type: {type(node)}\")\n\tdef make_compare_lambda(left, op, right):\n\t    \"\"\"\n\t    Create a lambda function from a comparison AST node.\n\t    Parameters:\n\t    node (ast.Compare): The comparison AST node to convert.\n\t    Returns:\n", "    function: A lambda function equivalent to the provided comparison AST node.\n\t    \"\"\"\n\t    if isinstance(left, ast.Name):\n\t        name = left.id\n\t        value = ast.literal_eval(right)\n\t    elif isinstance(right, ast.Name):\n\t        name = right.id\n\t        value = ast.literal_eval(left)\n\t        # Swap comparison operator for reversed operands\n\t        if isinstance(op, ast.Lt):\n", "            op = ast.Gt()\n\t        elif isinstance(op, ast.LtE):\n\t            op = ast.GtE()\n\t        elif isinstance(op, ast.Gt):\n\t            op = ast.Lt()\n\t        elif isinstance(op, ast.GtE):\n\t            op = ast.LtE()\n\t    else:\n\t        raise ValueError(\"Either left or right operand must be a column name.\")\n\t    if isinstance(op, ast.Lt):\n", "        return lambda row: row[name] < value\n\t    elif isinstance(op, ast.LtE):\n\t        return lambda row: row[name] <= value\n\t    elif isinstance(op, ast.Gt):\n\t        return lambda row: row[name] > value\n\t    elif isinstance(op, ast.GtE):\n\t        return lambda row: row[name] >= value\n\t    elif isinstance(op, ast.Eq):\n\t        return lambda row: row[name] == value\n\t    elif isinstance(op, ast.NotEq):\n", "        return lambda row: row[name] != value\n\t    else:\n\t        raise ValueError(f\"Unsupported operator type: {type(op)}\")\n"]}
{"filename": "controls/Textures/TextureIds.py", "chunked_list": ["from dataclasses import dataclass\n\t@dataclass\n\tclass TexInfo:\n\t    UUID: str\n\t    PATH: str\n\tclass TextureIds:\n\t    ID_PARTIAL_CHECK =  TexInfo(UUID='tx1', PATH='controls/assets/partial_check.png')\n\t    # ID_TEX100 =  TexInfo(uuid='tx100', path='controls/assets/texture100.png')\n\t    def __init__(self):\n\t        raise RuntimeError(\"TextureIds should not be instantiated\")\n", "    @staticmethod\n\t    def get_tex_info():\n\t        ret = []\n\t        for name in dir(TextureIds):\n\t            if name.startswith('ID_'):\n\t                value = getattr(TextureIds, name)\n\t                # print(f\"{name} = {value}\")\n\t                ret.append(value)\n\t        return ret\n"]}
{"filename": "controls/Textures/__init__.py", "chunked_list": []}
{"filename": "controls/DpgHelpers/MvItemTypes.py", "chunked_list": ["from enum import Enum\n\tclass MvItemTypes(Enum):\n\t    Button = 'mvAppItemType::mvButton'\n\t    Text = 'mvAppItemType::mvText'\n\t    ImageButton = 'mvAppItemType::mvImageButton'\n\t    Checkbox = 'mvAppItemType::mvCheckbox'\n\t    Window = 'mvAppItemType::mvWindowAppItem'\n\t    # Add other item types as needed"]}
{"filename": "controls/DpgHelpers/MvStyleVar.py", "chunked_list": ["from enum import Enum\n\tfrom typing import List, Dict\n\tclass MvStyleVar(Enum):\n\t    TextHeight = 13\n\t    WindowPadding = [8,8]\n\t    FramePadding = [4,3]\n\t    CellPadding  = [4,2]\n\t    ItemSpacing = [8,4]\n\t    # Add other item types as needed\n\tdef calc_single_window_height_from_items(count_items, min_count = 1):\n", "    # minimum window size\n\t    if count_items < min_count:\n\t        count_items = min_count\n\t    return (\n\t        2 * MvStyleVar.WindowPadding.value[1] + \n\t        count_items * (MvStyleVar.TextHeight.value + 2 * MvStyleVar.FramePadding.value[1]) + \n\t        (count_items-1) * MvStyleVar.ItemSpacing.value[1]\n\t    )\n\tdef calc_multi_window_height_in_table_rows(count_items_in_each_window: List[int]):\n\t    height = 2 * MvStyleVar.WindowPadding.value[1]\n", "    for count_items in count_items_in_each_window:\n\t        height += calc_single_window_height_from_items(count_items=count_items)\n\t        height += 2*MvStyleVar.CellPadding.value[1]\n\t    return height\n"]}
{"filename": "controls/CheckListCtrl/CheckListCtrl.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\tfrom typing import List, Tuple, Callable\n\t\"\"\"\n\tTODO\n\t- pull the checklist stuff out of PivotFilter.py and into here as CheckListWidget\n\t- wrap PivotFilter.py around CheckListWidget\n\t\"\"\"\n\tdef checkListCtrl(title: str, data: List[Tuple[bool, str]], send_data: Callable[[List[Tuple[bool, str]]], None]):\n\t    \"\"\"\n\t    :param data: A list of [checkbox state, item label] pairs\n", "    :param callback: Callback to send back the user selection\n\t    \"\"\"\n\t    ID_MODAL = dpg.generate_uuid()\n\t    ID_CHILD_WINDOW = dpg.generate_uuid()\n\t    ID_OK = dpg.generate_uuid()\n\t    ID_WINDOW_HANDLER = dpg.generate_uuid()\n\t    # resize the child window on resize modal window\n\t    def resize_window(sender, data):\n\t        windowHeight = dpg.get_item_height(ID_MODAL)\n\t        dpg.configure_item(ID_CHILD_WINDOW, height = windowHeight - 70)\n", "        pos = [dpg.get_item_width(ID_MODAL) - 75*2-16, dpg.get_item_height(ID_MODAL) - 30]\n\t        dpg.configure_item(ID_OK, pos = pos)\n\t    with dpg.window(label=title, \n\t                    tag=ID_MODAL,\n\t                    modal=True, \n\t                    show=True, \n\t                    no_title_bar=True, \n\t                    pos=dpg.get_mouse_pos(local=False), \n\t                    width=210, \n\t                    height=320):\n", "        state = []\n\t        dpg.add_text(\"Select items\")\n\t        dpg.add_separator()\n\t        with dpg.child_window(tag=ID_CHILD_WINDOW, height=250):\n\t            for [checkbox_state, item_label] in data:\n\t                with dpg.group(horizontal=True):\n\t                    b = dpg.add_checkbox(default_value=checkbox_state)\n\t                    t = dpg.add_text(item_label)\n\t                    state.append((b, t))\n\t        def on_ok():\n", "            ret = [(dpg.get_value(e[0]), dpg.get_value(e[1])) for e in state]\n\t            send_data(ret)\n\t            dpg.delete_item(ID_MODAL)\n\t        def on_cancel():\n\t            dpg.delete_item(ID_MODAL)\n\t            dpg.delete_item(ID_WINDOW_HANDLER)\n\t        with dpg.group(horizontal=True):\n\t            pos = [dpg.get_item_width(ID_MODAL) - 75*2-16, dpg.get_item_height(ID_MODAL) - 30]\n\t            dpg.add_button(tag=ID_OK, label=\"Accept\", width=75, callback=on_ok, pos=pos)\n\t            dpg.add_button(label=\"Cancel\", width=75, callback=on_cancel)\n", "    # register the resize method to ID_MODAL\n\t    with dpg.item_handler_registry(tag=ID_WINDOW_HANDLER):\n\t        dpg.add_item_resize_handler(callback=resize_window)\n\t    dpg.bind_item_handler_registry(ID_MODAL, ID_WINDOW_HANDLER)\n\t    return\n"]}
{"filename": "controls/assets/__init__.py", "chunked_list": []}
{"filename": "controls/ListEditCtrl/DataGrid.py", "chunked_list": ["import copy\n\tclass DataGrid:\n\t    TXT_STRING = 0\n\t    TXT_INT = 1\n\t    TXT_FLOAT = 2\n\t    COMBO = 3\n\t    CHECKBOX = 4\n\t    GRID = 5\n\t    COLOR = 6\n\t    def __init__(self, title, columns, dtypes, defaults, combo_lists = None, data=None):\n", "        \"\"\"\n\t        Create a new DataGrid.\n\t        :param title: Display title\n\t        :param columns: List of column names.\n\t        :param dtypes: List of data types for each column.\n\t        :param defaults: List of default values for each column.\n\t        :param combo_lists: List of combo lists for each column.\n\t        :param data: 2D list for grid data, ordered data[col][row].\n\t        \"\"\"\n\t        if not isinstance(columns, list) or not isinstance(dtypes, list) or not isinstance(defaults, list):\n", "            raise ValueError(\"Columns, dtypes, and defaults must be lists.\")\n\t        if len(columns) != len(dtypes) or len(columns) != len(defaults):\n\t            raise ValueError(\"Columns, dtypes, and defaults must have the same length.\")\n\t        if combo_lists is not None and (not isinstance(combo_lists, list) or len(columns) != len(combo_lists)):\n\t            raise ValueError(\"Combo_lists must be a list with the same length as columns.\")\n\t        self.title = title\n\t        self.columns = columns\n\t        self.dtypes = dtypes\n\t        self.defaults = defaults\n\t        self.combo_lists = combo_lists or [None] * len(columns)\n", "        self.data = data if data is not None else [[] for _ in columns]\n\t    @property\n\t    def shape(self):\n\t        # follow pandas convention [rows, columns]\n\t        return len(self.data[0] if self.data else 0), len(self.columns)\n\t    def copy(self):\n\t        ret = self.empty_like()\n\t        ret.data = copy.deepcopy(self.data)\n\t        return ret\n\t    def empty_like(self):\n", "        empty_grid = DataGrid(\n\t            title = self.title,\n\t            columns = [col for col in self.columns],\n\t            dtypes = [dt for dt in self.dtypes],\n\t            defaults = [val for val in self.defaults],\n\t            combo_lists = [cl for cl in self.combo_lists]\n\t        )\n\t        return empty_grid\n\t    def append(self, row):\n\t        if row is None:\n", "            row = self.defaults\n\t        elif len(row) != len(self.columns):\n\t            raise ValueError(\"Row does not match the column structure\")\n\t        for col in range(len(row)):\n\t            if(isinstance(row[col], DataGrid)): # fails\n\t                self.data[col].append(row[col].copy())\n\t            else:\n\t                self.data[col].append(row[col])\n\t    def drop(self, row_idx):\n\t        \"\"\"Remove a row from the data grid by its index.\"\"\"\n", "        for col in range(len(self.columns)):\n\t            if row_idx < len(self.data[col]):  # Make sure the row exists\n\t                del self.data[col][row_idx]\n\t    def swap_rows(self, row_idx_a, row_idx_b):\n\t        if row_idx_a == row_idx_b:\n\t            return\n\t        if not (0 <= row_idx_a < len(self.data[0]) and 0 <= row_idx_b < len(self.data[0])):\n\t            raise ValueError(\"Invalid row indices.\")\n\t        for column in self.data:\n\t            column[row_idx_a], column[row_idx_b] = column[row_idx_b], column[row_idx_a]\n", "    def get_row(self, row):\n\t        return [col[row] for col in self.data]\n\t    def get_cell(self, col_idx, row_idx):\n\t        return self.data[col_idx][row_idx]\n\t    def execute_callback(self, col_idx, row_idx):\n\t        callback = self.callbacks[col_idx]\n\t        if callback:\n\t            callback(self, row_idx)\n\t    def display(self):\n\t        for column in self.columns:\n", "            print(f\"{column:15s}\", end=\" \")\n\t        print()\n\t        for row in range(len(self.data[0])):\n\t            for col in range(len(self.data)):\n\t                if self.dtypes[col] == DataGrid.GRID:\n\t                    print(f\"{self.data[col][row].title:15s}\", end=\" \")\n\t                else:\n\t                    print(f\"{str(self.data[col][row]):15s}\", end=\" \")\n\t            print()\n"]}
{"filename": "controls/ListEditCtrl/__init__.py", "chunked_list": []}
{"filename": "controls/ListEditCtrl/TableHelpers.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\tdef swap_row_values(table_id, row_a_idx, row_b_idx):\n\t    # Get the children of the table\n\t    rows = dpg.get_item_children(table_id, 1)\n\t    # Get the row IDs for the rows to be swapped\n\t    row_a_id = rows[row_a_idx]\n\t    row_b_id = rows[row_b_idx]\n\t    # Get the cell IDs for each row\n\t    cells_a = dpg.get_item_children(row_a_id, 1)\n\t    cells_b = dpg.get_item_children(row_b_id, 1)\n", "    # Temporarily store the values from row A\n\t    temp_values = [dpg.get_value(cell) for cell in cells_a]\n\t    # Set the values in row A to the values from row B\n\t    for i, cell in enumerate(cells_a):\n\t        dpg.set_value(cell, dpg.get_value(cells_b[i]))\n\t    # Set the values in row B to the temporarily stored values from row A\n\t    for i, cell in enumerate(cells_b):\n\t        dpg.set_value(cell, temp_values[i])\n"]}
{"filename": "controls/ListEditCtrl/ListEditCtrl.py", "chunked_list": ["from typing import List, Dict, Tuple, Callable\n\timport dearpygui.dearpygui as dpg\n\tfrom controls.ListEditCtrl.DataGrid import DataGrid\n\tfrom controls.ListEditCtrl.TableHelpers import swap_row_values\n\tdef listEditCtrlDialog(grid: DataGrid, send_grid: Callable[[DataGrid], None]):\n\t    \"\"\"\n\t    Creates a ListEditCtrl dialog.\n\t    :param grid: The input data source for the control. \n\t    :param send_grid: Callback method to the parent control. \n\t    \"\"\"    \n", "    # TODO - change tag to support a dialog within a dialog\n\t    with dpg.window(label=\"Modal Dialog\", \n\t                    modal=True, \n\t                    show=True, \n\t                    no_title_bar=True, \n\t                    pos=dpg.get_mouse_pos(local=False), \n\t                    width=430, \n\t                    height=400) as id_modal:\n\t        table_id = dpg.generate_uuid()\n\t        get_grid = listEditCtrl(table_id, grid, height=360)\n", "        def on_ok():\n\t            send_grid(get_grid())\n\t            dpg.delete_item(id_modal)\n\t        with dpg.group(horizontal=True):\n\t            dpg.add_button(label=\"Accept\", width=75, callback=on_ok)\n\t            dpg.add_button(label=\"Cancel\", width=75, callback=lambda: dpg.delete_item(id_modal))\n\tdef listEditCtrl(table_id, grid: DataGrid, height=-1, **kwargs):\n\t    \"\"\"\n\t    Creates a ListEditCtrl widget.\n\t    :param table_id: The ID for the table.\n", "    :param grid: The input data source for the control. \n\t    \"\"\"    \n\t    def _grid_ref():\n\t        nonlocal grid\n\t        # print(grid.data)\n\t        return grid\n\t    def _subgrid_callback(col_idx, row_idx, new_grid: DataGrid):\n\t            \"\"\"\n\t            Callback method for child grids to update their data in the parent grid.\n\t            \"\"\"\n", "            nonlocal grid\n\t            # print(f\"col_idx: {col_idx}\")\n\t            # print(f\"row_idx: {row_idx}\")\n\t            grid.data[col_idx][row_idx] = new_grid\n\t    def _add_row(use_defaults=True): \n\t        \"\"\"\n\t        Adds a new row to the DataGrid. \n\t        :param use_defaults: A boolean indicating whether to use default values for the new row. \n\t            If False, it uses the data from the corresponding row in the underlying DataGrid.\n\t        This function creates a new row in the DataGrid and populates it with widgets appropriate for each column's \n", "        data type. The widgets are initialized with either default values (if use_defaults=True) or with the \n\t        corresponding data from the underlying DataGrid (if use_defaults=False).\n\t        It uses the _set_focus callback to update the selected row index when any widget in the new row is clicked.\n\t        If a new row is added that exceeds the current number of rows in the underlying DataGrid, \n\t        the DataGrid is expanded with a row of default values.\n\t        TODO:\n\t        1. Insertion of rows in the middle of the grid is currently not supported. Implement functionality to support \n\t        insertion into arbitrary positions in the grid.\n\t        2. The row index is not currently passed to the callback functions for the individual widgets. Modify the \n\t        callbacks to accept the row index as an input. This will enable the callbacks to modify specific rows \n", "        in the DataGrid based on user interaction.\n\t        :raises ValueError: If a column has an unsupported data type.\n\t        \"\"\"\n\t        nonlocal grid\n\t        nonlocal table_id\n\t        nonlocal focus_index\n\t        row_idx = len(dpg.get_item_children(table_id)[1])\n\t        # if the row_idx is greater than the grid length, then expand the grid\n\t        if row_idx >= grid.shape[0]:\n\t            grid.append(grid.defaults)\n", "        if focus_index < 0:\n\t            focus_index = 0\n\t        # need to feed in the row index for the callbacks\n\t        with dpg.table_row(parent = table_id) as row_id:\n\t            dpg.add_table_cell()\n\t            for col_idx in range(len(grid.columns)):\n\t                row = grid.defaults if use_defaults else _grid_ref().get_row(row_idx) # TODO grid.defaults if row_idx==None or row_idx >= grid.shape[0]\n\t                if grid.dtypes[col_idx] == DataGrid.CHECKBOX:\n\t                    dpg.add_checkbox(callback=_set_focus, \n\t                                     default_value=row[col_idx], \n", "                                     user_data=row_id)\n\t                elif grid.dtypes[col_idx] == DataGrid.TXT_STRING:\n\t                    id_input_text = dpg.generate_uuid()\n\t                    dpg.add_input_text(tag=id_input_text, \n\t                                       default_value=row[col_idx], \n\t                                       hint=\"enter text here\", width=200, callback=_set_focus, user_data=row_id)\n\t                    _register_widget_click(id_input_text, row_id)\n\t                elif grid.dtypes[col_idx] == DataGrid.COMBO:\n\t                    id_input_combo = dpg.generate_uuid()\n\t                    dpg.add_combo(tag=id_input_combo, \n", "                                  items=grid.combo_lists[col_idx], \n\t                                  default_value=grid.combo_lists[col_idx][row[col_idx]], \n\t                                  no_preview=False, width=200, callback=_set_focus, user_data=row_id)\n\t                    _register_widget_click(id_input_combo, row_id)\n\t                elif grid.dtypes[col_idx] == DataGrid.COLOR:\n\t                    id_color_pikr = dpg.generate_uuid()\n\t                    dpg.add_color_edit(tag=id_color_pikr, \n\t                                       default_value=row[col_idx], \n\t                                       no_inputs=True, callback=_set_focus, user_data=row_id)\n\t                    _register_widget_click(id_color_pikr, row_id)\n", "                elif grid.dtypes[col_idx] == DataGrid.GRID:\n\t                    id_button = dpg.generate_uuid()\n\t                    dpg.add_button(tag=id_button,\n\t                                   label=\"Configure\", \n\t                                   callback=lambda: listEditCtrlDialog(grid=_grid_ref().data[col_idx][row_idx], send_grid=lambda new_grid: _subgrid_callback(col_idx, row_idx, new_grid)),\n\t                                   user_data=row_id)\n\t                else:\n\t                    raise ValueError(\"unsupported data type\")\n\t            # close out the row\n\t            dpg.add_selectable(height=20, span_columns=True, callback=_set_focus, user_data=row_id)\n", "    def _delete_row():\n\t        nonlocal focus_index\n\t        nonlocal table_id\n\t        if focus_index < 0:\n\t            return\n\t        # delete the row from DPG\n\t        row_id = dpg.get_item_children(table_id)[1][focus_index]\n\t        dpg.delete_item(row_id)\n\t        # delete the row from the grid\n\t        grid.drop(focus_index)\n", "        # move the focus_index up if list length is less than focus_index\n\t        if(focus_index >= len(dpg.get_item_children(table_id)[1])):\n\t            focus_index -= 1\n\t        # call _set_focus on the current index\n\t        if(focus_index >= 0):\n\t            dpg.highlight_table_row(table_id, focus_index, [15,86,135])\n\t    def _move_row_up():\n\t        nonlocal focus_index\n\t        nonlocal table_id\n\t        row_ids = dpg.get_item_children(table_id, 1)\n", "        if (focus_index == 0) or (len(row_ids) <= 1):\n\t            return False\n\t        swap_row_values(table_id, focus_index, focus_index-1)\n\t        grid.swap_rows(focus_index, focus_index-1) \n\t        dpg.unhighlight_table_row(table_id, focus_index)\n\t        focus_index -= 1\n\t        dpg.highlight_table_row(table_id, focus_index, [15,86,135])\n\t        return True\n\t    def _move_row_down():\n\t        nonlocal focus_index\n", "        nonlocal table_id\n\t        row_ids = dpg.get_item_children(table_id, 1)\n\t        if (focus_index == len(row_ids)-1) or (len(row_ids) <= 1):\n\t            return False\n\t        swap_row_values(table_id, focus_index, focus_index+1)\n\t        grid.swap_rows(focus_index, focus_index+1)\n\t        dpg.unhighlight_table_row(table_id, focus_index)\n\t        focus_index += 1\n\t        dpg.highlight_table_row(table_id, focus_index, [15,86,135])\n\t        return True\n", "    focus_index=0\n\t    def _set_focus(sender, app_data, user_data): # TODO fix this method sig or rename `_set_focus_from_widget`\n\t        if (dpg.get_item_type(sender) == \"mvAppItemType::mvSelectable\"):\n\t            dpg.set_value(sender, False)\n\t        nonlocal focus_index\n\t        nonlocal table_id\n\t        dpg.unhighlight_table_row(table_id, focus_index)\n\t        table_children = dpg.get_item_children(table_id, 1)\n\t        focus_index = table_children.index(user_data)\n\t        dpg.highlight_table_row(table_id, focus_index, [15,86,135])\n", "    def _on_widget_click(row_id):  \n\t            nonlocal focus_index\n\t            nonlocal table_id\n\t            dpg.unhighlight_table_row(table_id, focus_index)\n\t            # this is slow but good enough for prototyping\n\t            table_children = dpg.get_item_children(table_id, 1)\n\t            focus_index = table_children.index(row_id)\n\t            # print(table_children, row_id, focus_index)\n\t            dpg.highlight_table_row(table_id, focus_index, [15,86,135])\n\t            # highlight_row(table_id, focus_index)\n", "    def _register_widget_click(sender, row_id):\n\t        handler_tag = f\"{row_id} handler\"\n\t        if not dpg.does_item_exist(handler_tag):\n\t            with dpg.item_handler_registry(tag=handler_tag) as handler:\n\t                dpg.add_item_clicked_handler(callback=lambda x: _on_widget_click(row_id)) \n\t        dpg.bind_item_handler_registry(sender, handler_tag)\n\t    with dpg.child_window(menubar=True, height=height):\n\t        with dpg.menu_bar():\n\t                    dpg.add_text(grid.title)\n\t        with dpg.group(horizontal=True):\n", "            dpg.add_button(label=\"Add\", tag=dpg.generate_uuid(), callback=lambda: _add_row(use_defaults=True))\n\t            dpg.add_button(label=\"Remove\", tag=dpg.generate_uuid(), callback=_delete_row)\n\t            dpg.add_button(arrow=True, direction=dpg.mvDir_Up, callback=_move_row_up)\n\t            dpg.add_button(arrow=True, direction=dpg.mvDir_Down, callback=_move_row_down)\n\t        with dpg.child_window():\n\t            with dpg.table(tag=table_id, header_row=True, resizable=True, policy=dpg.mvTable_SizingFixedFit, #mvTable_SizingStretchProp\n\t                           row_background=False, no_host_extendX=True, no_pad_innerX=True,\n\t                           borders_outerH=True, borders_innerV=True, borders_outerV=True):\n\t                dpg.add_table_column() # index column\n\t                for col in grid.columns:\n", "                    dpg.add_table_column(label=col)\n\t                dpg.add_table_column() # selector column\n\t                for i in range(len(grid.data[0])):\n\t                    _add_row(use_defaults=False)\n\t    def evaluate_grid():\n\t        nonlocal grid\n\t        # create a new grid of the same structure\n\t        new_grid = grid.empty_like()\n\t        # populate the grid from the table\n\t        for row_idx, row_id in enumerate(dpg.get_item_children(table_id)[1]):\n", "            new_row = []\n\t            cells = list(dpg.get_item_children(row_id)[1])\n\t            for col_idx, col_id in enumerate(cells[1:-1]):  # Skip the first and last cell.\n\t                if grid.dtypes[col_idx] == DataGrid.GRID:\n\t                    # Get subgrid from grid\n\t                    new_row.append(grid.get_cell(col_idx, row_idx))\n\t                elif grid.dtypes[col_idx] == DataGrid.COMBO:\n\t                    selection = dpg.get_value(col_id)\n\t                    idx = grid.combo_lists[col_idx].index(selection)\n\t                    new_row.append(idx)\n", "                else:\n\t                    # Get the value in the cell and append it to the new row.\n\t                    new_row.append(dpg.get_value(col_id))\n\t            # Add the new row to the data in the new grid.\n\t            new_grid.append(new_row)\n\t        return new_grid\n\t    return evaluate_grid\n"]}
{"filename": "examples/demo_CheckListCtrl.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\timport numpy as np \n\tfrom controls.CheckListCtrl.CheckListCtrl import checkListCtrl\n\tdata = []\n\tfor i in range(12):\n\t    data.append((True, f\"Item {i}\"))\n\tuser_sel = []\n\tdef get_user_selection(user_sel):\n\t    print(user_sel)\n\tdpg.create_context()\n", "dpg.create_viewport(title='Custom Title', width=800, height=600)\n\tdpg.setup_dearpygui()\n\twith dpg.window(tag=\"window\", width=700, height=400):\n\t    dpg.add_button(label=\"Select\", tag=dpg.generate_uuid(), callback=lambda: checkListCtrl(\"Select items\", data, get_user_selection))\n\tdpg.show_viewport()\n\twhile dpg.is_dearpygui_running():\n\t    dpg.render_dearpygui_frame()\n\tdpg.destroy_context()"]}
{"filename": "examples/__init__.py", "chunked_list": []}
{"filename": "examples/demo_ListEdtCtrl.py", "chunked_list": ["import dearpygui.dearpygui as dpg\n\timport numpy as np \n\tfrom controls.ListEditCtrl.DataGrid import DataGrid\n\tfrom controls.ListEditCtrl.ListEditCtrl import listEditCtrl\n\tcommit_grid = DataGrid(\n\t    title=\"Commit History\",\n\t    columns = [\"User\", \"Comment\"],\n\t    dtypes = [DataGrid.COMBO, DataGrid.TXT_STRING],\n\t    defaults = [0, \"\"],\n\t    combo_lists = [[\"Jane\", \"Tom\", \"Peter\"], None]\n", ")\n\tcommit_grid.append([0, \"First commit\"])\n\tticket_grid = DataGrid(\n\t    title=\"Ticket System\",\n\t    columns = ['Closed', 'Ticket', 'Status', 'Color', 'Commits'],\n\t    dtypes = [DataGrid.CHECKBOX, DataGrid.TXT_STRING, DataGrid.COMBO, DataGrid.COLOR, DataGrid.GRID],\n\t    defaults = [False, \"New Ticket\", 0, (30, 179, 120, 128), commit_grid],\n\t    combo_lists = [None, None, [\"Avacado\", \"Banana\", \"Lemon\", \"Pear\"], None, None]\n\t)\n\tticket_grid.append([True, \"Create table\", 0, [212, 98, 223, 128], commit_grid])\n", "ticket_grid.append([True, \"Create data structure\", 1, [48, 145, 213, 128], commit_grid])\n\tticket_grid.append([True, \"Do callbacks\", 2, [220, 165, 65, 128], commit_grid])\n\tdpg.create_context()\n\tdpg.create_viewport(title='Custom Title', width=800, height=600)\n\tdpg.setup_dearpygui()\n\twith dpg.window(tag=\"window\", width=700, height=400):\n\t    id_fruits = dpg.generate_uuid()\n\t    eval_grid = listEditCtrl(id_fruits, grid=ticket_grid)\n\t    dpg.add_button(label=\"Submit\", tag=dpg.generate_uuid(), callback=lambda: print(eval_grid().display()))\n\tdpg.show_viewport()\n", "while dpg.is_dearpygui_running():\n\t    dpg.render_dearpygui_frame()\n\tdpg.destroy_context()"]}
