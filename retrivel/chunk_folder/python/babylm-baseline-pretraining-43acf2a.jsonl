{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\tsetup(\n\t  name = 'babylm_baseline_train',\n\t  package_dir={\"\": \"src\"},\n\t  packages=find_packages(\"src\"),\n\t  version = '1.0.0',\n\t  license='MIT',\n\t  description = 'BabyLM Baseline Training',\n\t  long_description_content_type = 'text/markdown',\n\t  keywords = [\n", "    'artificial intelligence',\n\t    'deep learning',\n\t    'transformers',\n\t  ],\n\t  install_requires=[\n\t    'torch==1.10.2',\n\t    'transformers',\n\t    'ipdb',\n\t    'datasets',\n\t    'jax==0.3.21',\n", "    'jaxlib==0.3.20',   # NOTE: use this to train on GPU: pip install jaxlib==0.3.20+cuda11.cudnn82 -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html\n\t    'flax==0.6.1',\n\t    'sentencepiece',\n\t  ],\n\t  classifiers=[\n\t    'Development Status :: 4 - Beta',\n\t    'Intended Audience :: Developers',\n\t    'Topic :: Scientific/Engineering :: Artificial Intelligence',\n\t    'License :: OSI Approved :: MIT License',\n\t    'Programming Language :: Python :: 3.9',\n", "  ],\n\t)\n"]}
{"filename": "scripts/run_t5_mlm_flax.py", "chunked_list": ["#!/usr/bin/env python\n\t# coding=utf-8\n\t# Copyright 2021 The HuggingFace Team All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"\n\tPretraining the library models for T5-like span-masked language modeling on a text file or a dataset.\n\tHere is the full list of checkpoints on the hub that can be pretrained by this script:\n\thttps://huggingface.co/models?filter=t5\n\t\"\"\"\n", "import json\n\timport logging\n\timport math\n\timport os\n\timport sys\n\timport time\n\tfrom dataclasses import asdict, dataclass, field\n\t# You can also adapt this script on your own masked language modeling task. Pointers for this are left as comments.\n\tfrom enum import Enum\n\tfrom itertools import chain\n", "from pathlib import Path\n\tfrom typing import Dict, List, Optional\n\timport numpy as np\n\tfrom datasets import load_dataset\n\tfrom tqdm import tqdm\n\timport flax\n\timport jax\n\timport jax.numpy as jnp\n\timport optax\n\tfrom flax import jax_utils, traverse_util\n", "from flax.jax_utils import pad_shard_unpad\n\tfrom flax.training import train_state\n\tfrom flax.training.common_utils import get_metrics, onehot, shard\n\tfrom huggingface_hub import Repository\n\tfrom transformers import (\n\t    CONFIG_MAPPING,\n\t    FLAX_MODEL_FOR_MASKED_LM_MAPPING,\n\t    AutoTokenizer,\n\t    BatchEncoding,\n\t    FlaxT5ForConditionalGeneration,\n", "    HfArgumentParser,\n\t    PreTrainedTokenizerBase,\n\t    T5Config,\n\t    is_tensorboard_available,\n\t    set_seed,\n\t)\n\tfrom transformers.models.t5.modeling_flax_t5 import shift_tokens_right\n\tfrom transformers.utils import get_full_repo_name, send_example_telemetry\n\tMODEL_CONFIG_CLASSES = list(FLAX_MODEL_FOR_MASKED_LM_MAPPING.keys())\n\tMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)\n", "@dataclass\n\tclass TrainingArguments:\n\t    output_dir: str = field(\n\t        metadata={\"help\": \"The output directory where the model predictions and checkpoints will be written.\"},\n\t    )\n\t    overwrite_output_dir: bool = field(\n\t        default=False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Overwrite the content of the output directory. \"\n", "                \"Use this to continue training if output_dir points to a checkpoint directory.\"\n\t            )\n\t        },\n\t    )\n\t    do_train: bool = field(default=False, metadata={\"help\": \"Whether to run training.\"})\n\t    do_eval: bool = field(default=False, metadata={\"help\": \"Whether to run eval on the dev set.\"})\n\t    per_device_train_batch_size: int = field(\n\t        default=8, metadata={\"help\": \"Batch size per GPU/TPU core/CPU for training.\"}\n\t    )\n\t    per_device_eval_batch_size: int = field(\n", "        default=8, metadata={\"help\": \"Batch size per GPU/TPU core/CPU for evaluation.\"}\n\t    )\n\t    learning_rate: float = field(default=5e-5, metadata={\"help\": \"The initial learning rate for AdamW.\"})\n\t    weight_decay: float = field(default=0.0, metadata={\"help\": \"Weight decay for AdamW if we apply some.\"})\n\t    adam_beta1: float = field(default=0.9, metadata={\"help\": \"Beta1 for AdamW optimizer\"})\n\t    adam_beta2: float = field(default=0.999, metadata={\"help\": \"Beta2 for AdamW optimizer\"})\n\t    adam_epsilon: float = field(default=1e-8, metadata={\"help\": \"Epsilon for AdamW optimizer.\"})\n\t    adafactor: bool = field(default=False, metadata={\"help\": \"Whether or not to replace AdamW by Adafactor.\"})\n\t    num_train_epochs: float = field(default=3.0, metadata={\"help\": \"Total number of training epochs to perform.\"})\n\t    num_train_steps: int = field(default=-1, metadata={\"help\": \"Total number of training steps top perform.\"})\n", "    warmup_steps: int = field(default=0, metadata={\"help\": \"Linear warmup over warmup_steps.\"})\n\t    logging_steps: int = field(default=500, metadata={\"help\": \"Log every X updates steps.\"})\n\t    save_steps: int = field(default=500, metadata={\"help\": \"Save checkpoint every X updates steps.\"})\n\t    save_epochs: int = field(default=-1, metadata={\"help\": \"Save checkpoint every X epochs.\"})\n\t    eval_steps: int = field(default=-1, metadata={\"help\": \"Run an evaluation every X steps.\"})\n\t    eval_epochs: int = field(default=-1, metadata={\"help\": \"Run an evaluation every X epochs.\"})\n\t    seed: int = field(default=42, metadata={\"help\": \"Random seed that will be set at the beginning of training.\"})\n\t    push_to_hub: bool = field(\n\t        default=False, metadata={\"help\": \"Whether or not to upload the trained model to the model hub after training.\"}\n\t    )\n", "    hub_model_id: str = field(\n\t        default=None, metadata={\"help\": \"The name of the repository to keep in sync with the local `output_dir`.\"}\n\t    )\n\t    hub_token: str = field(default=None, metadata={\"help\": \"The token to use to push to the Model Hub.\"})\n\t    def __post_init__(self):\n\t        if self.output_dir is not None:\n\t            self.output_dir = os.path.expanduser(self.output_dir)\n\t    def to_dict(self):\n\t        \"\"\"\n\t        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\n", "        the token values by removing their value.\n\t        \"\"\"\n\t        d = asdict(self)\n\t        for k, v in d.items():\n\t            if isinstance(v, Enum):\n\t                d[k] = v.value\n\t            if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n\t                d[k] = [x.value for x in v]\n\t            if k.endswith(\"_token\"):\n\t                d[k] = f\"<{k.upper()}>\"\n", "        return d\n\t@dataclass\n\tclass ModelArguments:\n\t    \"\"\"\n\t    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.\n\t    \"\"\"\n\t    model_name_or_path: Optional[str] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n", "                \"The model checkpoint for weights initialization.Don't set if you want to train a model from scratch.\"\n\t            )\n\t        },\n\t    )\n\t    model_type: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"If training from scratch, pass a model type from the list: \" + \", \".join(MODEL_TYPES)},\n\t    )\n\t    config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n", "    )\n\t    tokenizer_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n\t    )\n\t    cache_dir: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Where do you want to store the pretrained models downloaded from s3\"}\n\t    )\n\t    use_fast_tokenizer: bool = field(\n\t        default=True,\n\t        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n", "    )\n\t    dtype: Optional[str] = field(\n\t        default=\"float32\",\n\t        metadata={\n\t            \"help\": (\n\t                \"Floating-point format in which the model weights should be initialized and trained. Choose one of\"\n\t                \" `[float32, float16, bfloat16]`.\"\n\t            )\n\t        },\n\t    )\n", "    use_auth_token: bool = field(\n\t        default=False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Will use the token generated when running `huggingface-cli login` (necessary to use this script \"\n\t                \"with private models).\"\n\t            )\n\t        },\n\t    )\n\t    rerandomize: bool = field(\n", "        default = False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Rerandomizes the initial weighst of the model by using model.init_weights() instead of \"\n\t                \"flax functions.\"\n\t            )\n\t        },\n\t    )\n\t@dataclass\n\tclass DataTrainingArguments:\n", "    \"\"\"\n\t    Arguments pertaining to what data we are going to input our model for training and eval.\n\t    \"\"\"\n\t    dataset_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    dataset_config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    train_file: Optional[str] = field(default=None, metadata={\"help\": \"The input training data file (a text file).\"})\n", "    validation_file: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"An optional input evaluation data file to evaluate the perplexity on (a text file).\"},\n\t    )\n\t    train_ref_file: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"An optional input train ref data file for whole word masking in Chinese.\"},\n\t    )\n\t    validation_ref_file: Optional[str] = field(\n\t        default=None,\n", "        metadata={\"help\": \"An optional input validation ref data file for whole word masking in Chinese.\"},\n\t    )\n\t    overwrite_cache: bool = field(\n\t        default=False, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n\t    )\n\t    validation_split_percentage: Optional[int] = field(\n\t        default=5,\n\t        metadata={\n\t            \"help\": \"The percentage of the train set used as validation set in case there's no validation split\"\n\t        },\n", "    )\n\t    max_seq_length: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"The maximum total input sequence length after tokenization and masking. Sequences longer than this\"\n\t                \" will be truncated. Default to the max input length of the model.\"\n\t            )\n\t        },\n\t    )\n", "    preprocessing_num_workers: Optional[int] = field(\n\t        default=None,\n\t        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n\t    )\n\t    mlm_probability: float = field(\n\t        default=0.15, metadata={\"help\": \"Ratio of tokens to mask for span masked language modeling loss\"}\n\t    )\n\t    mean_noise_span_length: float = field(\n\t        default=3.0,\n\t        metadata={\"help\": \"Mean span length of masked tokens\"},\n", "    )\n\t    def __post_init__(self):\n\t        if self.dataset_name is None and self.train_file is None and self.validation_file is None:\n\t            raise ValueError(\"Need either a dataset name or a training/validation file.\")\n\t        else:\n\t            if self.train_file is not None:\n\t                extension = self.train_file.split(\".\")[-1]\n\t                assert extension in [\"csv\", \"json\", \"txt\"], \"`train_file` should be a csv, a json or a txt file.\"\n\t            if self.validation_file is not None:\n\t                extension = self.validation_file.split(\".\")[-1]\n", "                assert extension in [\"csv\", \"json\", \"txt\"], \"`validation_file` should be a csv, a json or a txt file.\"\n\tdef compute_input_and_target_lengths(inputs_length, noise_density, mean_noise_span_length):\n\t    \"\"\"This function is copy of `random_spans_helper <https://github.com/google-research/text-to-text-transfer-transformer/blob/84f8bcc14b5f2c03de51bd3587609ba8f6bbd1cd/t5/data/preprocessors.py#L2466>`__ .\n\t    Training parameters to avoid padding with random_spans_noise_mask.\n\t    When training a model with random_spans_noise_mask, we would like to set the other\n\t    training hyperparmeters in a way that avoids padding.\n\t    This function helps us compute these hyperparameters.\n\t    We assume that each noise span in the input is replaced by extra_tokens_per_span_inputs sentinel tokens,\n\t    and each non-noise span in the targets is replaced by extra_tokens_per_span_targets sentinel tokens.\n\t    This function tells us the required number of tokens in the raw example (for split_tokens())\n", "    as well as the length of the encoded targets. Note that this function assumes\n\t    the inputs and targets will have EOS appended and includes that in the reported length.\n\t    Args:\n\t        inputs_length: an integer - desired length of the tokenized inputs sequence\n\t        noise_density: a float\n\t        mean_noise_span_length: a float\n\t    Returns:\n\t        tokens_length: length of original text in tokens\n\t        targets_length: an integer - length in tokens of encoded targets sequence\n\t    \"\"\"\n", "    def _tokens_length_to_inputs_length_targets_length(tokens_length):\n\t        num_noise_tokens = int(round(tokens_length * noise_density))\n\t        num_nonnoise_tokens = tokens_length - num_noise_tokens\n\t        num_noise_spans = int(round(num_noise_tokens / mean_noise_span_length))\n\t        # inputs contain all nonnoise tokens, sentinels for all noise spans\n\t        # and one EOS token.\n\t        _input_length = num_nonnoise_tokens + num_noise_spans + 1\n\t        _output_length = num_noise_tokens + num_noise_spans + 1\n\t        return _input_length, _output_length\n\t    tokens_length = inputs_length\n", "    while _tokens_length_to_inputs_length_targets_length(tokens_length + 1)[0] <= inputs_length:\n\t        tokens_length += 1\n\t    inputs_length, targets_length = _tokens_length_to_inputs_length_targets_length(tokens_length)\n\t    # minor hack to get the targets length to be equal to inputs length\n\t    # which is more likely to have been set to a nice round number.\n\t    if noise_density == 0.5 and targets_length > inputs_length:\n\t        tokens_length -= 1\n\t        targets_length -= 1\n\t    return tokens_length, targets_length\n\t@flax.struct.dataclass\n", "class FlaxDataCollatorForT5MLM:\n\t    \"\"\"\n\t    Data collator used for T5 span-masked language modeling.\n\t    It is made sure that after masking the inputs are of length `data_args.max_seq_length` and targets are also of fixed length.\n\t    For more information on how T5 span-masked language modeling works, one can take a look\n\t    at the `official paper <https://arxiv.org/pdf/1910.10683.pdf>`__\n\t    or the `official code for preprocessing <https://github.com/google-research/text-to-text-transfer-transformer/blob/master/t5/data/preprocessors.py>`__ .\n\t    Args:\n\t        tokenizer (:class:`~transformers.PreTrainedTokenizer` or :class:`~transformers.PreTrainedTokenizerFast`):\n\t            The tokenizer used for encoding the data.\n", "        noise_density (:obj:`float`):\n\t            The probability with which to (randomly) mask tokens in the input.\n\t        mean_noise_span_length (:obj:`float`):\n\t            The average span length of the masked tokens.\n\t        input_length (:obj:`int`):\n\t            The expected input length after masking.\n\t        target_length (:obj:`int`):\n\t            The expected target length after masking.\n\t        pad_token_id: (:obj:`int`):\n\t            The pad token id of the model\n", "        decoder_start_token_id: (:obj:`int):\n\t            The decoder start token id of the model\n\t    \"\"\"\n\t    tokenizer: PreTrainedTokenizerBase\n\t    noise_density: float\n\t    mean_noise_span_length: float\n\t    input_length: int\n\t    target_length: int\n\t    pad_token_id: int\n\t    decoder_start_token_id: int\n", "    def __call__(self, examples: List[Dict[str, np.ndarray]]) -> BatchEncoding:\n\t        # convert list to dict and tensorize input\n\t        batch = BatchEncoding(\n\t            {k: np.array([examples[i][k] for i in range(len(examples))]) for k, v in examples[0].items()}\n\t        )\n\t        input_ids = batch[\"input_ids\"]\n\t        batch_size, expandend_input_length = input_ids.shape\n\t        mask_indices = np.asarray([self.random_spans_noise_mask(expandend_input_length) for i in range(batch_size)])\n\t        labels_mask = ~mask_indices\n\t        input_ids_sentinel = self.create_sentinel_ids(mask_indices.astype(np.int8))\n", "        labels_sentinel = self.create_sentinel_ids(labels_mask.astype(np.int8))\n\t        batch[\"input_ids\"] = self.filter_input_ids(input_ids, input_ids_sentinel)\n\t        batch[\"labels\"] = self.filter_input_ids(input_ids, labels_sentinel)\n\t        if batch[\"input_ids\"].shape[-1] != self.input_length:\n\t            raise ValueError(\n\t                f\"`input_ids` are incorrectly preprocessed. `input_ids` length is {batch['input_ids'].shape[-1]}, but\"\n\t                f\" should be {self.target_length}.\"\n\t            )\n\t        if batch[\"labels\"].shape[-1] != self.target_length:\n\t            raise ValueError(\n", "                f\"`labels` are incorrectly preprocessed. `labels` length is {batch['labels'].shape[-1]}, but should be\"\n\t                f\" {self.target_length}.\"\n\t            )\n\t        # to check that tokens are correctly preprocessed, one can run `self.tokenizer.batch_decode(input_ids)` and `self.tokenizer.batch_decode(labels)` here...\n\t        batch[\"decoder_input_ids\"] = shift_tokens_right(\n\t            batch[\"labels\"], self.pad_token_id, self.decoder_start_token_id\n\t        )\n\t        return batch\n\t    def create_sentinel_ids(self, mask_indices):\n\t        \"\"\"\n", "        Sentinel ids creation given the indices that should be masked.\n\t        The start indices of each mask are replaced by the sentinel ids in increasing\n\t        order. Consecutive mask indices to be deleted are replaced with `-1`.\n\t        \"\"\"\n\t        start_indices = mask_indices - np.roll(mask_indices, 1, axis=-1) * mask_indices\n\t        start_indices[:, 0] = mask_indices[:, 0]\n\t        sentinel_ids = np.where(start_indices != 0, np.cumsum(start_indices, axis=-1), start_indices)\n\t        sentinel_ids = np.where(sentinel_ids != 0, (len(self.tokenizer) - sentinel_ids), 0)\n\t        sentinel_ids -= mask_indices - start_indices\n\t        return sentinel_ids\n", "    def filter_input_ids(self, input_ids, sentinel_ids):\n\t        \"\"\"\n\t        Puts sentinel mask on `input_ids` and fuse consecutive mask tokens into a single mask token by deleting.\n\t        This will reduce the sequence length from `expanded_inputs_length` to `input_length`.\n\t        \"\"\"\n\t        batch_size = input_ids.shape[0]\n\t        input_ids_full = np.where(sentinel_ids != 0, sentinel_ids, input_ids)\n\t        # input_ids tokens and sentinel tokens are >= 0, tokens < 0 are\n\t        # masked tokens coming after sentinel tokens and should be removed\n\t        input_ids = input_ids_full[input_ids_full >= 0].reshape((batch_size, -1))\n", "        input_ids = np.concatenate(\n\t            [input_ids, np.full((batch_size, 1), self.tokenizer.eos_token_id, dtype=np.int32)], axis=-1\n\t        )\n\t        return input_ids\n\t    def random_spans_noise_mask(self, length):\n\t        \"\"\"This function is copy of `random_spans_helper <https://github.com/google-research/text-to-text-transfer-transformer/blob/84f8bcc14b5f2c03de51bd3587609ba8f6bbd1cd/t5/data/preprocessors.py#L2682>`__ .\n\t        Noise mask consisting of random spans of noise tokens.\n\t        The number of noise tokens and the number of noise spans and non-noise spans\n\t        are determined deterministically as follows:\n\t        num_noise_tokens = round(length * noise_density)\n", "        num_nonnoise_spans = num_noise_spans = round(num_noise_tokens / mean_noise_span_length)\n\t        Spans alternate between non-noise and noise, beginning with non-noise.\n\t        Subject to the above restrictions, all masks are equally likely.\n\t        Args:\n\t            length: an int32 scalar (length of the incoming token sequence)\n\t            noise_density: a float - approximate density of output mask\n\t            mean_noise_span_length: a number\n\t        Returns:\n\t            a boolean tensor with shape [length]\n\t        \"\"\"\n", "        orig_length = length\n\t        num_noise_tokens = int(np.round(length * self.noise_density))\n\t        # avoid degeneracy by ensuring positive numbers of noise and nonnoise tokens.\n\t        num_noise_tokens = min(max(num_noise_tokens, 1), length - 1)\n\t        num_noise_spans = int(np.round(num_noise_tokens / self.mean_noise_span_length))\n\t        # avoid degeneracy by ensuring positive number of noise spans\n\t        num_noise_spans = max(num_noise_spans, 1)\n\t        num_nonnoise_tokens = length - num_noise_tokens\n\t        # pick the lengths of the noise spans and the non-noise spans\n\t        def _random_segmentation(num_items, num_segments):\n", "            \"\"\"Partition a sequence of items randomly into non-empty segments.\n\t            Args:\n\t                num_items: an integer scalar > 0\n\t                num_segments: an integer scalar in [1, num_items]\n\t            Returns:\n\t                a Tensor with shape [num_segments] containing positive integers that add\n\t                up to num_items\n\t            \"\"\"\n\t            mask_indices = np.arange(num_items - 1) < (num_segments - 1)\n\t            np.random.shuffle(mask_indices)\n", "            first_in_segment = np.pad(mask_indices, [[1, 0]])\n\t            segment_id = np.cumsum(first_in_segment)\n\t            # count length of sub segments assuming that list is sorted\n\t            _, segment_length = np.unique(segment_id, return_counts=True)\n\t            return segment_length\n\t        noise_span_lengths = _random_segmentation(num_noise_tokens, num_noise_spans)\n\t        nonnoise_span_lengths = _random_segmentation(num_nonnoise_tokens, num_noise_spans)\n\t        interleaved_span_lengths = np.reshape(\n\t            np.stack([nonnoise_span_lengths, noise_span_lengths], axis=1), [num_noise_spans * 2]\n\t        )\n", "        span_starts = np.cumsum(interleaved_span_lengths)[:-1]\n\t        span_start_indicator = np.zeros((length,), dtype=np.int8)\n\t        span_start_indicator[span_starts] = True\n\t        span_num = np.cumsum(span_start_indicator)\n\t        is_noise = np.equal(span_num % 2, 1)\n\t        return is_noise[:orig_length]\n\tdef generate_batch_splits(samples_idx: np.ndarray, batch_size: int, drop_last=True) -> np.ndarray:\n\t    \"\"\"Generate batches of data for a specified batch size from sample indices. If the dataset size is not divisible by\n\t    the batch size and `drop_last` is `True`, the last incomplete batch is dropped. Else, it is returned.\"\"\"\n\t    num_samples = len(samples_idx)\n", "    if drop_last:\n\t        samples_to_remove = num_samples % batch_size\n\t        if samples_to_remove != 0:\n\t            samples_idx = samples_idx[:-samples_to_remove]\n\t        sections_split = num_samples // batch_size\n\t        samples_idx = samples_idx.reshape((sections_split, batch_size))\n\t    else:\n\t        sections_split = math.ceil(num_samples / batch_size)\n\t        samples_idx = np.array_split(samples_idx, sections_split)\n\t    return samples_idx\n", "def write_train_metric(summary_writer, train_metrics, train_time, step):\n\t    summary_writer.scalar(\"train_time\", train_time, step)\n\t    train_metrics = get_metrics(train_metrics)\n\t    for key, vals in train_metrics.items():\n\t        tag = f\"train_{key}\"\n\t        for i, val in enumerate(vals):\n\t            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n\tdef write_eval_metric(summary_writer, eval_metrics, step):\n\t    for metric_name, value in eval_metrics.items():\n\t        summary_writer.scalar(f\"eval_{metric_name}\", value, step)\n", "def main():\n\t    # See all possible arguments in src/transformers/training_args.py\n\t    # or by passing the --help flag to this script.\n\t    # We now keep distinct sets of args, for a cleaner separation of concerns.\n\t    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n\t    if len(sys.argv) == 2 and sys.argv[1].endswith(\".json\"):\n\t        # If we pass only one argument to the script and it's the path to a json file,\n\t        # let's parse it to get our arguments.\n\t        model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n\t    else:\n", "        model_args, data_args, training_args = parser.parse_args_into_dataclasses()\n\t    # Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The\n\t    # information sent is the one passed as arguments along with your Python/PyTorch versions.\n\t    send_example_telemetry(\"run_t5_mlm\", model_args, data_args, framework=\"flax\")\n\t    if (\n\t        os.path.exists(training_args.output_dir)\n\t        and os.listdir(training_args.output_dir)\n\t        and training_args.do_train\n\t        and not training_args.overwrite_output_dir\n\t    ):\n", "        raise ValueError(\n\t            f\"Output directory ({training_args.output_dir}) already exists and is not empty.\"\n\t            \"Use --overwrite_output_dir to overcome.\"\n\t        )\n\t    # Setup logging\n\t    logging.basicConfig(\n\t        format=\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\",\n\t        level=logging.INFO,\n\t        datefmt=\"[%X]\",\n\t    )\n", "    # Log on each process the small summary:\n\t    logger = logging.getLogger(__name__)\n\t    # Set the verbosity to info of the Transformers logger (on main process only):\n\t    logger.info(f\"Training/evaluation parameters {training_args}\")\n\t    # Set seed before initializing model.\n\t    set_seed(training_args.seed)\n\t    # Handle the repository creation\n\t    if training_args.push_to_hub:\n\t        if training_args.hub_model_id is None:\n\t            repo_name = get_full_repo_name(\n", "                Path(training_args.output_dir).absolute().name, token=training_args.hub_token\n\t            )\n\t        else:\n\t            repo_name = training_args.hub_model_id\n\t        repo = Repository(training_args.output_dir, clone_from=repo_name)\n\t    # Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)\n\t    # or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/\n\t    # (the dataset will be downloaded automatically from the datasets Hub).\n\t    #\n\t    # For CSV/JSON files, this script will use the column called 'text' or the first column if no column called\n", "    # 'text' is found. You can easily tweak this behavior (see below).\n\t    if data_args.dataset_name is not None:\n\t        # Downloading and loading a dataset from the hub.\n\t        datasets = load_dataset(\n\t            data_args.dataset_name,\n\t            data_args.dataset_config_name,\n\t            cache_dir=model_args.cache_dir,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t        if \"validation\" not in datasets.keys():\n", "            datasets[\"validation\"] = load_dataset(\n\t                data_args.dataset_name,\n\t                data_args.dataset_config_name,\n\t                split=f\"train[:{data_args.validation_split_percentage}%]\",\n\t                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n\t            )\n\t            datasets[\"train\"] = load_dataset(\n\t                data_args.dataset_name,\n\t                data_args.dataset_config_name,\n", "                split=f\"train[{data_args.validation_split_percentage}%:]\",\n\t                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n\t            )\n\t    else:\n\t        data_files = {}\n\t        if data_args.train_file is not None:\n\t            data_files[\"train\"] = data_args.train_file\n\t        if data_args.validation_file is not None:\n\t            data_files[\"validation\"] = data_args.validation_file\n", "        extension = data_args.train_file.split(\".\")[-1]\n\t        if extension == \"txt\":\n\t            extension = \"text\"\n\t        datasets = load_dataset(\n\t            extension,\n\t            data_files=data_files,\n\t            cache_dir=model_args.cache_dir,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t        if \"validation\" not in datasets.keys():\n", "            datasets[\"validation\"] = load_dataset(\n\t                extension,\n\t                data_files=data_files,\n\t                split=f\"train[:{data_args.validation_split_percentage}%]\",\n\t                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n\t            )\n\t            datasets[\"train\"] = load_dataset(\n\t                extension,\n\t                data_files=data_files,\n", "                split=f\"train[{data_args.validation_split_percentage}%:]\",\n\t                cache_dir=model_args.cache_dir,\n\t                use_auth_token=True if model_args.use_auth_token else None,\n\t            )\n\t    # See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at\n\t    # https://huggingface.co/docs/datasets/loading_datasets.html.\n\t    # Load pretrained model and tokenizer\n\t    if model_args.tokenizer_name:\n\t        tokenizer = AutoTokenizer.from_pretrained(\n\t            model_args.tokenizer_name,\n", "            cache_dir=model_args.cache_dir,\n\t            use_fast=model_args.use_fast_tokenizer,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    elif model_args.model_name_or_path:\n\t        tokenizer = AutoTokenizer.from_pretrained(\n\t            model_args.model_name_or_path,\n\t            cache_dir=model_args.cache_dir,\n\t            use_fast=model_args.use_fast_tokenizer,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n", "        )\n\t    else:\n\t        raise ValueError(\n\t            \"You are instantiating a new tokenizer from scratch. This is not supported by this script.\"\n\t            \"You can do it from another script, save it, and load it from here, using --tokenizer_name.\"\n\t        )\n\t    if model_args.config_name:\n\t        config = T5Config.from_pretrained(\n\t            model_args.config_name,\n\t            cache_dir=model_args.cache_dir,\n", "            vocab_size=len(tokenizer),\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    elif model_args.model_name_or_path:\n\t        config = T5Config.from_pretrained(\n\t            model_args.model_name_or_path,\n\t            cache_dir=model_args.cache_dir,\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    else:\n", "        config = CONFIG_MAPPING[model_args.model_type]()\n\t        logger.warning(\"You are instantiating a new config instance from scratch.\")\n\t    # Preprocessing the datasets.\n\t    # First we tokenize all the texts.\n\t    if training_args.do_train:\n\t        column_names = datasets[\"train\"].column_names\n\t    else:\n\t        column_names = datasets[\"validation\"].column_names\n\t    text_column_name = \"text\" if \"text\" in column_names else column_names[0]\n\t    max_seq_length = min(data_args.max_seq_length, tokenizer.model_max_length)\n", "    # Otherwise, we tokenize every text, then concatenate them together before splitting them in smaller parts.\n\t    # Since we make sure that all sequences are of the same length, no attention_mask is needed.\n\t    def tokenize_function(examples):\n\t        return tokenizer(examples[text_column_name], return_attention_mask=False)\n\t    tokenized_datasets = datasets.map(\n\t        tokenize_function,\n\t        batched=True,\n\t        num_proc=data_args.preprocessing_num_workers,\n\t        remove_columns=column_names,\n\t        load_from_cache_file=not data_args.overwrite_cache,\n", "    )\n\t    # T5-like span masked language modeling will fuse consecutively masked tokens to a single sentinel token.\n\t    # To ensure that the input length is `max_seq_length`, we need to increase the maximum length\n\t    # according to `mlm_probability` and `mean_noise_span_length`. We can also define the label length accordingly.\n\t    expanded_inputs_length, targets_length = compute_input_and_target_lengths(\n\t        inputs_length=max_seq_length,\n\t        noise_density=data_args.mlm_probability,\n\t        mean_noise_span_length=data_args.mean_noise_span_length,\n\t    )\n\t    # Main data processing function that will concatenate all texts from our dataset and generate chunks of expanded_inputs_length.\n", "    def group_texts(examples):\n\t        # Concatenate all texts.\n\t        concatenated_examples = {k: list(chain(*examples[k])) for k in examples.keys()}\n\t        total_length = len(concatenated_examples[list(examples.keys())[0]])\n\t        # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can\n\t        # customize this part to your needs.\n\t        if total_length >= expanded_inputs_length:\n\t            total_length = (total_length // expanded_inputs_length) * expanded_inputs_length\n\t        # Split by chunks of max_len.\n\t        result = {\n", "            k: [t[i : i + expanded_inputs_length] for i in range(0, total_length, expanded_inputs_length)]\n\t            for k, t in concatenated_examples.items()\n\t        }\n\t        return result\n\t    # Note that with `batched=True`, this map processes 1,000 texts together, so group_texts throws away a\n\t    # remainder for each of those groups of 1,000 texts. You can adjust that batch_size here but a higher value\n\t    # might be slower to preprocess.\n\t    #\n\t    # To speed up this part, we use multiprocessing. See the documentation of the map method for more information:\n\t    # https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.map\n", "    tokenized_datasets = tokenized_datasets.map(\n\t        group_texts,\n\t        batched=True,\n\t        num_proc=data_args.preprocessing_num_workers,\n\t        load_from_cache_file=not data_args.overwrite_cache,\n\t    )\n\t    # Enable tensorboard only on the master node\n\t    has_tensorboard = is_tensorboard_available()\n\t    if has_tensorboard and jax.process_index() == 0:\n\t        try:\n", "            from flax.metrics.tensorboard import SummaryWriter\n\t            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n\t        except ImportError as ie:\n\t            has_tensorboard = False\n\t            logger.warning(\n\t                f\"Unable to display metrics through TensorBoard because some package are not installed: {ie}\"\n\t            )\n\t    else:\n\t        logger.warning(\n\t            \"Unable to display metrics through TensorBoard because the package is not installed: \"\n", "            \"Please run pip install tensorboard to enable.\"\n\t        )\n\t    # Initialize our training\n\t    rng = jax.random.PRNGKey(training_args.seed)\n\t    dropout_rngs = jax.random.split(rng, jax.local_device_count())\n\t    if model_args.model_name_or_path:\n\t        model = FlaxT5ForConditionalGeneration.from_pretrained(\n\t            model_args.model_name_or_path,\n\t            config=config,\n\t            seed=training_args.seed,\n", "            dtype=getattr(jnp, model_args.dtype),\n\t            use_auth_token=True if model_args.use_auth_token else None,\n\t        )\n\t    else:\n\t        config.vocab_size = len(tokenizer)\n\t        model = FlaxT5ForConditionalGeneration(\n\t            config,\n\t            seed=training_args.seed,\n\t            dtype=getattr(jnp, model_args.dtype),\n\t        )\n", "    if model_args.rerandomize:\n\t        model.init_weights(rng, model.input_shape)\n\t    # Data collator\n\t    # This one will take care of randomly masking the tokens.\n\t    data_collator = FlaxDataCollatorForT5MLM(\n\t        tokenizer=tokenizer,\n\t        noise_density=data_args.mlm_probability,\n\t        mean_noise_span_length=data_args.mean_noise_span_length,\n\t        input_length=max_seq_length,\n\t        target_length=targets_length,\n", "        pad_token_id=model.config.pad_token_id,\n\t        decoder_start_token_id=model.config.decoder_start_token_id,\n\t    )\n\t    # Store some constant\n\t    num_epochs = int(training_args.num_train_epochs)\n\t    num_steps = int(training_args.num_train_steps)\n\t    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n\t    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n\t    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n\t    num_train_steps = len(tokenized_datasets[\"train\"]) // train_batch_size * num_epochs\n", "    if num_steps > 0:\n\t        num_train_steps = num_steps\n\t        num_epochs = math.ceil((num_train_steps * train_batch_size) / len(tokenized_datasets[\"train\"]))\n\t    if training_args.save_epochs > 0:\n\t        save_steps = len(tokenized_datasets[\"train\"]) // train_batch_size * training_args.save_epochs\n\t    else:\n\t        save_steps = training_args.save_steps\n\t    if training_args.eval_epochs > 0:\n\t        eval_steps = len(tokenized_datasets[\"train\"]) // train_batch_size * training_args.eval_epochs\n\t    else:\n", "        eval_steps = training_args.eval_steps\n\t    num_of_hosts = jax.process_count()\n\t    current_host_idx = jax.process_index()\n\t    # Create learning rate schedule\n\t    warmup_fn = optax.linear_schedule(\n\t        init_value=0.0, end_value=training_args.learning_rate, transition_steps=training_args.warmup_steps\n\t    )\n\t    decay_fn = optax.linear_schedule(\n\t        init_value=training_args.learning_rate,\n\t        end_value=0,\n", "        transition_steps=num_train_steps - training_args.warmup_steps,\n\t    )\n\t    linear_decay_lr_schedule_fn = optax.join_schedules(\n\t        schedules=[warmup_fn, decay_fn], boundaries=[training_args.warmup_steps]\n\t    )\n\t    # We use Optax's \"masking\" functionality to not apply weight decay\n\t    # to bias and LayerNorm scale parameters. decay_mask_fn returns a\n\t    # mask boolean with the same structure as the parameters.\n\t    # The mask is True for parameters that should be decayed.\n\t    def decay_mask_fn(params):\n", "        flat_params = traverse_util.flatten_dict(params)\n\t        # find out all LayerNorm parameters\n\t        layer_norm_candidates = [\"layernorm\", \"layer_norm\", \"ln\"]\n\t        layer_norm_named_params = set(\n\t            [\n\t                layer[-2:]\n\t                for layer_norm_name in layer_norm_candidates\n\t                for layer in flat_params.keys()\n\t                if layer_norm_name in \"\".join(layer).lower()\n\t            ]\n", "        )\n\t        flat_mask = {path: (path[-1] != \"bias\" and path[-2:] not in layer_norm_named_params) for path in flat_params}\n\t        return traverse_util.unflatten_dict(flat_mask)\n\t    # create adam optimizer\n\t    if training_args.adafactor:\n\t        # We use the default parameters here to initialize adafactor,\n\t        # For more details about the parameters please check https://github.com/deepmind/optax/blob/ed02befef9bf81cbbf236be3d2b0e032e9ed4a40/optax/_src/alias.py#L74\n\t        optimizer = optax.adafactor(\n\t            learning_rate=linear_decay_lr_schedule_fn,\n\t        )\n", "    else:\n\t        optimizer = optax.adamw(\n\t            learning_rate=linear_decay_lr_schedule_fn,\n\t            b1=training_args.adam_beta1,\n\t            b2=training_args.adam_beta2,\n\t            weight_decay=training_args.weight_decay,\n\t            mask=decay_mask_fn,\n\t        )\n\t    # Setup train state\n\t    state = train_state.TrainState.create(apply_fn=model.__call__, params=model.params, tx=optimizer)\n", "    # Define gradient update step fn\n\t    def train_step(state, batch, dropout_rng):\n\t        dropout_rng, new_dropout_rng = jax.random.split(dropout_rng)\n\t        def loss_fn(params):\n\t            labels = batch.pop(\"labels\")\n\t            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n\t            # compute loss\n\t            loss = optax.softmax_cross_entropy(logits, onehot(labels, logits.shape[-1])).mean()\n\t            return loss\n\t        grad_fn = jax.value_and_grad(loss_fn)\n", "        loss, grad = grad_fn(state.params)\n\t        grad = jax.lax.pmean(grad, \"batch\")\n\t        new_state = state.apply_gradients(grads=grad)\n\t        metrics = jax.lax.pmean(\n\t            {\"loss\": loss, \"learning_rate\": linear_decay_lr_schedule_fn(state.step)}, axis_name=\"batch\"\n\t        )\n\t        return new_state, metrics, new_dropout_rng\n\t    # Create parallel version of the train step\n\t    p_train_step = jax.pmap(train_step, \"batch\", donate_argnums=(0,))\n\t    # Define eval fn\n", "    def eval_step(params, batch):\n\t        labels = batch.pop(\"labels\")\n\t        logits = model(**batch, params=params, train=False)[0]\n\t        # compute loss\n\t        loss = optax.softmax_cross_entropy(logits, onehot(labels, logits.shape[-1]))\n\t        # compute accuracy\n\t        accuracy = jnp.equal(jnp.argmax(logits, axis=-1), labels)\n\t        # summarize metrics\n\t        metrics = {\"loss\": loss.mean(), \"accuracy\": accuracy.mean()}\n\t        metrics = jax.lax.pmean(metrics, axis_name=\"batch\")\n", "        return metrics\n\t    p_eval_step = jax.pmap(eval_step, \"batch\", donate_argnums=(0,))\n\t    # Replicate the train state on each device\n\t    state = jax_utils.replicate(state)\n\t    train_time = 0\n\t    epochs = tqdm(range(num_epochs), desc=\"Epoch ... \", position=0)\n\t    for epoch in epochs:\n\t        # ======================== Training ================================\n\t        train_start = time.time()\n\t        train_metrics = []\n", "        # Create sampling rng\n\t        rng, input_rng = jax.random.split(rng)\n\t        # Generate an epoch by shuffling sampling indices from the train dataset\n\t        num_train_samples = len(tokenized_datasets[\"train\"])\n\t        # Avoid using jax.numpy here in case of TPU training\n\t        train_samples_idx = np.random.permutation(np.arange(num_train_samples))\n\t        train_batch_idx = generate_batch_splits(train_samples_idx, train_batch_size)\n\t        # Gather the indexes for creating the batch and do a training step\n\t        for step, batch_idx in enumerate(tqdm(train_batch_idx, desc=\"Training...\", position=1)):\n\t            samples = [tokenized_datasets[\"train\"][int(idx)] for idx in batch_idx]\n", "            model_inputs = data_collator(samples)\n\t            local_host_model_inputs = {\n\t                key: np.split(model_inputs.data[key], num_of_hosts, axis=0)[current_host_idx]\n\t                for key, value in model_inputs.data.items()\n\t            }\n\t            # Model forward\n\t            model_inputs = shard(local_host_model_inputs)\n\t            state, train_metric, dropout_rngs = p_train_step(state, model_inputs, dropout_rngs)\n\t            train_metrics.append(train_metric)\n\t            cur_step = epoch * (num_train_samples // train_batch_size) + step\n", "            if cur_step % training_args.logging_steps == 0 and cur_step > 0:\n\t                # Save metrics\n\t                train_metric = jax_utils.unreplicate(train_metric)\n\t                train_time += time.time() - train_start\n\t                if has_tensorboard and jax.process_index() == 0:\n\t                    write_train_metric(summary_writer, train_metrics, train_time, cur_step)\n\t                epochs.write(\n\t                    f\"Step... ({cur_step} | Loss: {train_metric['loss'].mean()}, Learning Rate:\"\n\t                    f\" {train_metric['learning_rate'].mean()})\"\n\t                )\n", "                train_metrics = []\n\t            if cur_step % eval_steps == 0 and cur_step > 0:\n\t                # ======================== Evaluating ==============================\n\t                num_eval_samples = len(tokenized_datasets[\"validation\"])\n\t                # Avoid using jax.numpy here in case of TPU training\n\t                eval_samples_idx = np.arange(num_eval_samples)\n\t                eval_batch_idx = generate_batch_splits(eval_samples_idx, eval_batch_size, drop_last=False)\n\t                eval_metrics = []\n\t                for i, batch_idx in enumerate(tqdm(eval_batch_idx, desc=\"Evaluating ...\", position=2)):\n\t                    samples = [tokenized_datasets[\"validation\"][int(idx)] for idx in batch_idx]\n", "                    model_inputs = data_collator(samples)\n\t                    # Model forward\n\t                    metrics = pad_shard_unpad(p_eval_step, static_return=True)(\n\t                        state.params, model_inputs.data, min_device_batch=per_device_eval_batch_size\n\t                    )\n\t                    eval_metrics.append(metrics)\n\t                # get eval metrics\n\t                eval_metrics = get_metrics(eval_metrics)\n\t                eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n\t                # Update progress bar\n", "                epochs.write(f\"Step... ({cur_step} | Loss: {eval_metrics['loss']}, Acc: {eval_metrics['accuracy']})\")\n\t                # Save metrics\n\t                if has_tensorboard and jax.process_index() == 0:\n\t                    write_eval_metric(summary_writer, eval_metrics, cur_step)\n\t            if cur_step % save_steps == 0 and cur_step > 0:\n\t                # save checkpoint after each epoch and push checkpoint to the hub\n\t                if jax.process_index() == 0:\n\t                    params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n\t                    checkpoint_dir = os.path.join(training_args.output_dir, f\"checkpoint-{cur_step}\")\n\t                    model.save_pretrained(checkpoint_dir, params=params)\n", "                    tokenizer.save_pretrained(training_args.output_dir)\n\t                    if training_args.push_to_hub:\n\t                        repo.push_to_hub(commit_message=f\"Saving weights and logs of step {cur_step}\", blocking=False)\n\t            if num_steps > 0 and cur_step >= num_train_steps:\n\t                break\n\t    # Eval after training\n\t    if training_args.do_eval:\n\t        num_eval_samples = len(tokenized_datasets[\"validation\"])\n\t        # Avoid using jax.numpy here in case of TPU training\n\t        eval_samples_idx = np.arange(num_eval_samples)\n", "        eval_batch_idx = generate_batch_splits(eval_samples_idx, eval_batch_size, drop_last=False)\n\t        eval_metrics = []\n\t        for i, batch_idx in enumerate(tqdm(eval_batch_idx, desc=\"Evaluating ...\", position=2)):\n\t            samples = [tokenized_datasets[\"validation\"][int(idx)] for idx in batch_idx]\n\t            model_inputs = data_collator(samples)\n\t            # Model forward\n\t            metrics = pad_shard_unpad(p_eval_step, static_return=True)(\n\t                state.params, model_inputs.data, min_device_batch=per_device_eval_batch_size\n\t            )\n\t            eval_metrics.append(metrics)\n", "        # get eval metrics\n\t        eval_metrics = get_metrics(eval_metrics)\n\t        eval_metrics = jax.tree_util.tree_map(lambda metric: jnp.mean(metric).item(), eval_metrics)\n\t        if jax.process_index() == 0:\n\t            eval_metrics = {f\"eval_{metric_name}\": value for metric_name, value in eval_metrics.items()}\n\t            path = os.path.join(training_args.output_dir, \"eval_results.json\")\n\t            with open(path, \"w\") as f:\n\t                json.dump(eval_metrics, f, indent=4, sort_keys=True)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "scripts/general_train.py", "chunked_list": ["import argparse\n\timport os\n\timport pdb\n\timport importlib\n\timport setuptools\n\timport functools\n\timport warnings\n\twarnings.filterwarnings(\"ignore\")\n\tfrom pt_framework.epoch_based_runner import EpochBasedRunner\n\tfrom pt_framework.dist_utils import init_dist\n", "from babylm_baseline_train.basic_param_setter import ParamsBuilder\n\timport babylm_baseline_train.models.helper as helper\n\tfrom babylm_baseline_train.train.tk_funcs import\\\n\t        get_tokenizer_func\n\tfrom babylm_baseline_train.datasets.babyLM import get_babyLM_10M\n\tfrom babylm_baseline_train.datasets.utils import collate_fn\n\tfrom babylm_baseline_train.train.utils import get_setting_func\n\tdef get_parser():\n\t    parser = argparse.ArgumentParser(\n\t            description='Pytorch training framework for general dist training')\n", "    parser.add_argument(\n\t            '--setting', \n\t            default=None, type=str, \n\t            action='store')\n\t    parser.add_argument(\n\t            '--local_rank', type=int, default=0,\n\t            help='Used during distributed training')\n\t    parser.add_argument(\n\t            '--train_upto_epoch', type=int, default=None,\n\t            help='Number of epochs to be run upto')\n", "    parser.add_argument(\n\t            '--exp_id', \n\t            default='test_strict_small', type=str, \n\t            action='store')\n\t    parser.add_argument(\n\t            '--opt_model_size', \n\t            default='125m', type=str, \n\t            action='store')\n\t    return parser\n\tdef get_key_params(args):\n", "    get_model_func = functools.partial(\n\t            helper.get_opt_func, \n\t            opt_model_size=args.opt_model_size)\n\t    tokenizer = get_tokenizer_func()\n\t    add_train_loader_kwargs = dict(collate_fn=collate_fn)\n\t    params = dict(\n\t            exp_id=args.exp_id, col_name='babylm_test',\n\t            get_model_func=get_model_func,\n\t            get_dataset_func=functools.partial(\n\t                get_babyLM_10M, tokenizer=tokenizer),\n", "            optimizer_cfg=dict(\n\t                type='AdamW', lr=1e-4, weight_decay=0.1,\n\t                ),\n\t            add_train_loader_kwargs=add_train_loader_kwargs,\n\t            desired_batch_size=128,\n\t            base_batch_size=128,\n\t            )\n\t    return params\n\tdef main():\n\t    parser = get_parser()\n", "    args = parser.parse_args()\n\t    if 'LOCAL_RANK' not in os.environ:\n\t        os.environ['LOCAL_RANK'] = str(args.local_rank)\n\t    init_dist('pytorch')\n\t    key_params = get_key_params(args)\n\t    if args.setting is not None:\n\t        setting_func = get_setting_func(args.setting)\n\t        key_params = setting_func(key_params)\n\t    params = ParamsBuilder(\n\t            opt_use_fp16=False,\n", "            **key_params).build_params()\n\t    runner = EpochBasedRunner(**params)\n\t    runner.train(args.train_upto_epoch)\n\tif __name__ == '__main__':\n\t    main()\n"]}
{"filename": "src/babylm_baseline_train/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/env_vars.py", "chunked_list": ["import os\n\timport sys\n\tfrom os.path import expanduser\n\thome = expanduser(\"~\")\n\tROOT_DIR = os.environ.get(\n\t        'BABYLM_ROOT_DIR',\n\t        home)\n\tROOT_DIR_FREQ = os.environ.get(\n\t        'BABYLM_ROOT_DIR_FREQ',\n\t        ROOT_DIR)\n", "DATASET_ROOT_DIR = os.environ.get(\n\t        'BABYLM_DATASET_ROOT_DIR',\n\t        os.path.join(ROOT_DIR, 'datasets'))\n\tDEBUG = int(os.environ.get(\n\t        'DEBUG',\n\t        '0')) == 1\n"]}
{"filename": "src/babylm_baseline_train/basic_param_setter.py", "chunked_list": ["import argparse\n\timport copy\n\timport random\n\timport pdb\n\timport os\n\timport os.path as osp\n\timport sys\n\timport json\n\timport re\n\timport numpy as np\n", "import logging\n\timport time\n\timport torch\n\timport functools\n\tfrom tqdm import tqdm\n\tfrom torch import nn\n\timport torch.backends.cudnn as cudnn\n\timport torch.optim\n\timport torch.utils.data\n\timport torchvision.datasets as datasets\n", "import torch.distributed as dist\n\timport pt_framework.hooks.lr_updater as lr_updater\n\tfrom pt_framework.dist_utils import get_dist_info, init_dist\n\tfrom pt_framework.utils import mkdir_or_exist, get_root_logger, print_log\n\tfrom pt_framework.hooks.hook import Hook\n\tfrom pt_framework.hooks.record_saver import MongoDBSaver\n\tfrom pt_framework.hooks.optimizer import OptimizerHook, DistOptimizerHook\n\tfrom pt_framework.hooks.checkpoint import CkptSpecifySaveHook\n\timport torch.optim as optimizers\n\tfrom .train.env_params import MODEL_SAVE_FOLDER, USE_TPU, REC_SAVE_FOLDER\n", "SAVE_REC_TO_FILE = os.environ.get('SAVE_REC_TO_FILE', '1')\n\tDEBUG = os.environ.get('DEBUG', '0')\n\tPERSISTENT_WORKERS = int(os.environ.get('PERSISTENT_WORKERS', 1))==1\n\tdef build_optimizer(model, optimizer_cfg, verbose=True):\n\t    \"\"\"Build optimizer from configs.\n\t    Args:\n\t        model (:obj:`nn.Module`): The model with parameters to be optimized.\n\t        optimizer_cfg (dict): The config dict of the optimizer.\n\t            Positional fields are:\n\t                - type: class name of the optimizer.\n", "                - lr: base learning rate.\n\t            Optional fields are:\n\t                - any arguments of the corresponding optimizer type, e.g.,\n\t                  weight_decay, momentum, etc.\n\t                - paramwise_options: a dict with regular expression as keys\n\t                  to match parameter names and a dict containing options as\n\t                  values. Options include 6 fields: lr, lr_mult, momentum,\n\t                  momentum_mult, weight_decay, weight_decay_mult.\n\t    Returns:\n\t        torch.optim.Optimizer: The initialized optimizer.\n", "    Example:\n\t        >>> model = torch.nn.modules.Conv1d(1, 1, 1)\n\t        >>> paramwise_options = {\n\t        >>>     '(bn|gn)(\\d+)?.(weight|bias)': dict(weight_decay_mult=0.1),\n\t        >>>     '\\Ahead.': dict(lr_mult=10, momentum=0)}\n\t        >>> optimizer_cfg = dict(type='SGD', lr=0.01, momentum=0.9,\n\t        >>>                      weight_decay=0.0001,\n\t        >>>                      paramwise_options=paramwise_options)\n\t        >>> optimizer = build_optimizer(model, optimizer_cfg)\n\t    \"\"\"\n", "    if hasattr(model, 'module'):\n\t        model = model.module\n\t    optimizer_cfg = optimizer_cfg.copy()\n\t    paramwise_options = optimizer_cfg.pop('paramwise_options', None)\n\t    # if no paramwise option is specified, just use the global setting\n\t    if paramwise_options is None:\n\t        optimizer_cls = getattr(optimizers, optimizer_cfg.pop('type'))\n\t        return optimizer_cls(params=model.parameters(), **optimizer_cfg)\n\t    else:\n\t        assert isinstance(paramwise_options, dict)\n", "        params = []\n\t        for name, param in model.named_parameters():\n\t            param_group = {'params': [param]}\n\t            if not param.requires_grad:\n\t                params.append(param_group)\n\t                continue\n\t            for regexp, options in paramwise_options.items():\n\t                if re.search(regexp, name):\n\t                    for key, value in options.items():\n\t                        if key.endswith('_mult'): # is a multiplier\n", "                            key = key[:-5]\n\t                            assert key in optimizer_cfg, \\\n\t                                \"{} not in optimizer_cfg\".format(key)\n\t                            value = optimizer_cfg[key] * value\n\t                        param_group[key] = value\n\t                        if not dist.is_initialized() or dist.get_rank() == 0:\n\t                            if verbose:\n\t                                print_log('paramwise_options -- {}: {}={}'.format(\n\t                                    name, key, value))\n\t            # otherwise use the global settings\n", "            params.append(param_group)\n\t        optimizer_cls = getattr(optimizers, optimizer_cfg.pop('type'))\n\t        return optimizer_cls(params, **optimizer_cfg)\n\tdef set_random_seed(seed, deterministic=False):\n\t    \"\"\"Set random seed.\n\t    Args:\n\t        seed (int): Seed to be used.\n\t        deterministic (bool): Whether to set the deterministic option for\n\t            CUDNN backend, i.e., set `torch.backends.cudnn.deterministic`\n\t            to True and `torch.backends.cudnn.benchmark` to False.\n", "            Default: False.\n\t    \"\"\"\n\t    random.seed(seed)\n\t    np.random.seed(seed)\n\t    torch.manual_seed(seed)\n\t    torch.cuda.manual_seed_all(seed)\n\t    if deterministic:\n\t        torch.backends.cudnn.deterministic = True\n\t        torch.backends.cudnn.benchmark = False\n\tclass SetEpochHook(Hook):\n", "    def before_epoch(self, runner):\n\t        dataset = runner.data_loader.dataset\n\t        assert hasattr(dataset, 'set_epoch')\n\t        dataset.set_epoch(runner.epoch)\n\tclass ParamsBuilder(object):\n\t    def __init__(\n\t            self, exp_id, col_name,\n\t            get_dataset_func, get_model_func,  \n\t            optimizer_cfg,\n\t            add_train_loader_kwargs={},\n", "            batch_processor_params=None,\n\t            save_rec_to_file=False,\n\t            opt_update_interval=None,\n\t            opt_grad_clip={'max_norm': 1.0},\n\t            opt_use_fp16=True,\n\t            model_find_unused=False,\n\t            database_name='babylm_train',\n\t            desired_batch_size=None, \n\t            base_batch_size=16,\n\t            max_epochs=400,\n", "            seed=None,\n\t            specify_iter=[50, 200, 1000, 2000, 4000],\n\t            specify_epoch=[1, 2, 4, 8, 20, 40],\n\t            ckpt_save_interval=50,\n\t            shuffle=True):\n\t        self.exp_id = exp_id\n\t        self.params = {'max_epochs': max_epochs}\n\t        self.col_name = col_name\n\t        self.get_dataset_func = get_dataset_func\n\t        self.get_model_func = get_model_func\n", "        self.add_train_loader_kwargs = add_train_loader_kwargs\n\t        self.batch_processor_params = batch_processor_params\n\t        self.optimizer_cfg = optimizer_cfg\n\t        self.save_rec_to_file = save_rec_to_file \\\n\t                or (int(SAVE_REC_TO_FILE) == 1)\n\t        self.opt_update_interval = opt_update_interval\n\t        self.opt_grad_clip = opt_grad_clip\n\t        self.opt_use_fp16 = opt_use_fp16\n\t        self.model_find_unused = model_find_unused\n\t        self.database_name = database_name\n", "        self.desired_batch_size = desired_batch_size\n\t        self.base_batch_size = base_batch_size\n\t        self.shuffle = shuffle\n\t        self.specify_iter = specify_iter\n\t        self.specify_epoch = specify_epoch\n\t        self.ckpt_save_interval = ckpt_save_interval\n\t        self.setup_opt_update_interval()\n\t        if seed is not None:\n\t            set_random_seed(seed)\n\t    def get_save_params(self):\n", "        ckpt_work_dir = os.path.join(\n\t                MODEL_SAVE_FOLDER, self.col_name, self.exp_id)\n\t        rec_work_dir = os.path.join(\n\t                REC_SAVE_FOLDER, self.col_name, self.exp_id)\n\t        save_params = {\n\t                'cache_ckpt_keep_nums': 3,\n\t                'ckpt_hook_builder': CkptSpecifySaveHook,\n\t                'ckpt_hook_kwargs': {\n\t                    'interval': self.ckpt_save_interval,\n\t                    'out_dir': ckpt_work_dir,\n", "                    'cache_interval': 1,\n\t                    'specify_epoch': self.specify_epoch,\n\t                    'specify_iter': self.specify_iter,\n\t                    },\n\t                }\n\t        if self.save_rec_to_file:\n\t            save_params['record_saver_kwargs'] = {\n\t                    'out_dir': rec_work_dir}\n\t        else:\n\t            save_params['record_saver_kwargs'] = {\n", "                    'port': 26001,\n\t                    'database_name': self.database_name,\n\t                    'collection_name': self.col_name,\n\t                    'exp_id': self.exp_id,\n\t                    'interval': 2500,\n\t                    'by_epoch': False,\n\t                    }\n\t            save_params['record_saver_builder'] = MongoDBSaver\n\t        self.params['save_params'] = save_params\n\t        rank, _ = get_dist_info()\n", "        if rank == 0:\n\t            mkdir_or_exist(rec_work_dir)\n\t            mkdir_or_exist(ckpt_work_dir)\n\t        timestamp = time.strftime('%Y%m%d_%H%M%S', time.localtime())\n\t        log_file = osp.join(rec_work_dir, 'train_{}.log'.format(timestamp))\n\t        logger = get_root_logger(log_file)\n\t        self.params['logger'] = logger\n\t    def get_num_workers_batch_size(self):\n\t        num_workers = int(os.environ.get(\n\t                'NUM_WORKERS', 8))\n", "        batch_size = int(os.environ.get(\n\t                'BATCH_SIZE', self.base_batch_size))\n\t        rel_batch_size = float(os.environ.get('REL_BATCH_SIZE', 1.0))\n\t        return num_workers, int(batch_size * rel_batch_size)\n\t    def setup_opt_update_interval(self):\n\t        if self.desired_batch_size is not None:\n\t            assert isinstance(self.desired_batch_size, int)\n\t            _, batch_size = self.get_num_workers_batch_size()\n\t            _, world_size = get_dist_info()\n\t            opt_update_interval = self.desired_batch_size // (batch_size * world_size)\n", "            if opt_update_interval > 1:\n\t                self.opt_update_interval = opt_update_interval\n\t    def add_one_hook_params(self, one_hook_params):\n\t        if 'extra_hook_params' not in self.params:\n\t            self.params['extra_hook_params'] = []\n\t        self.params['extra_hook_params'].append(one_hook_params)\n\t    def add_set_epoch_hook(self):\n\t        set_epoch_hook_params = {'builder': SetEpochHook}\n\t        self.add_one_hook_params(set_epoch_hook_params)\n\t    def get_train_data_params(self):\n", "        train_data_params = {\n\t                'dataset_builder': self.get_dataset_func,\n\t                'shuffle': self.shuffle,\n\t                }\n\t        num_workers, batch_size = self.get_num_workers_batch_size()\n\t        train_data_params.update({\n\t            'batch_size': int(batch_size),\n\t            'num_workers': int(num_workers),\n\t            'distributed': True,\n\t            'data_loader_kwargs': {\n", "                'drop_last': True,\n\t                'persistent_workers': PERSISTENT_WORKERS,\n\t                },\n\t            })\n\t        train_data_params['data_loader_kwargs'].update(\n\t                self.add_train_loader_kwargs)\n\t        self.params['train_data_params'] = train_data_params\n\t        if not self.shuffle:\n\t            self.add_set_epoch_hook()\n\t    def build_model_optimizer(\n", "            self, get_model_func, optimizer_cfg):\n\t        self.model = get_model_func().cuda()\n\t        self.optimizer = build_optimizer(\n\t                self.model, \n\t                optimizer_cfg)\n\t        if self.opt_use_fp16:\n\t            import apex\n\t            self.model, self.optimizer = apex.amp.initialize(self.model, self.optimizer)\n\t        self.model = torch.nn.parallel.DistributedDataParallel(\n\t                self.model,\n", "                device_ids=[torch.cuda.current_device()],\n\t                find_unused_parameters=self.model_find_unused,\n\t                )\n\t        return self.model, self.optimizer\n\t    def get_model_optimizer_params(self):\n\t        model_optimizer_params = {\n\t                'builder': self.build_model_optimizer,\n\t                'builder_kwargs': dict(\n\t                    get_model_func=self.get_model_func,\n\t                    optimizer_cfg=self.optimizer_cfg),\n", "                }\n\t        self.params['model_optimizer_params'] = model_optimizer_params\n\t    def empty_func(self):\n\t        return None\n\t    def get_loss_params(self):\n\t        loss_params = {}\n\t        loss_params['builder'] = self.empty_func\n\t        self.params['loss_params'] = loss_params\n\t    def get_learning_rate_params(self):\n\t        builder_name = 'Fixed'\n", "        builder = getattr(lr_updater, builder_name + 'LrUpdaterHook')\n\t        lr_config = dict(\n\t            warmup='linear',\n\t            warmup_iters=5000 if self.opt_update_interval is None\\\n\t                         else 5000 * self.opt_update_interval,\n\t            warmup_ratio=0.0001, # cannot be 0\n\t            warmup_by_epoch=False)\n\t        learning_rate_params = {\n\t                'builder': builder,\n\t                'builder_kwargs': lr_config,\n", "                }\n\t        self.params['learning_rate_params'] = learning_rate_params\n\t    def naive_processor(self, model, loss_func, data_batch):\n\t        if not USE_TPU:\n\t            model_outputs = model(**data_batch)\n\t            return {'loss': model_outputs['loss']}\n\t        else:\n\t            model_outputs = model(\n\t                    return_dict=False, **data_batch)\n\t            return {'loss': model_outputs[0]}\n", "    def get_batch_processor_params(self):\n\t        if self.batch_processor_params is None:\n\t            batch_processor_params = {\n\t                    'func': self.naive_processor,\n\t                    }\n\t        else:\n\t            batch_processor_params = self.batch_processor_params\n\t        self.params['batch_processor_params'] = batch_processor_params\n\t    def get_validation_params(self):\n\t        self.params['validation_params'] = {}\n", "    def get_optimizer_hook_params(self):\n\t        optimizer_hook_params = {\n\t                'builder': OptimizerHook,\n\t                'builder_kwargs': {\n\t                    'grad_clip': self.opt_grad_clip,\n\t                    }}\n\t        if self.opt_update_interval is not None:\n\t            assert isinstance(self.opt_update_interval, int)\n\t            optimizer_hook_params['builder'] = DistOptimizerHook\n\t            optimizer_hook_params['builder_kwargs'].update({\n", "                        'update_interval': self.opt_update_interval})\n\t        if self.opt_use_fp16:\n\t            optimizer_hook_params['builder'] = DistOptimizerHook\n\t            optimizer_hook_params['builder_kwargs'].update({\n\t                        'use_fp16': self.opt_use_fp16})\n\t        self.params['optimizer_hook_params'] = optimizer_hook_params\n\t    def build_params(self):\n\t        self.get_save_params()\n\t        self.get_train_data_params()\n\t        self.get_model_optimizer_params()\n", "        self.get_loss_params()\n\t        self.get_learning_rate_params()\n\t        self.get_batch_processor_params()\n\t        self.get_validation_params()\n\t        self.get_optimizer_hook_params()\n\t        return self.params\n"]}
{"filename": "src/babylm_baseline_train/configs/general.py", "chunked_list": ["import babylm_baseline_train.models.helper as helper\n\tfrom babylm_baseline_train.train.tk_funcs import\\\n\t        get_tokenizer_func\n\timport functools\n\tfrom transformers import DataCollatorForLanguageModeling\n\tfrom itertools import product\n\timport copy\n\tdef add_collate_fn_for_MLM(key_params, tokenizer):\n\t    if 'add_train_loader_kwargs' not in key_params:\n\t        key_params['add_train_loader_kwargs'] = {}\n", "    key_params['add_train_loader_kwargs'].update(\n\t            {'collate_fn': DataCollatorForLanguageModeling(\n\t                tokenizer=tokenizer,\n\t                mlm=True,\n\t                mlm_probability=0.15,\n\t                )})\n\t    return key_params\n\tdef add_func_in_general(\n\t        func_name,\n\t        data_func,\n", "        exp_name=None,\n\t        seed=None,\n\t        model_name=None,\n\t        all_things=None,\n\t        post_func=None,\n\t        **kwargs):\n\t    if exp_name is None:\n\t        exp_name = func_name\n\t    def _func(key_params):\n\t        key_params = data_func(key_params)\n", "        if model_name == '350m':\n\t            key_params['get_model_func'] = functools.partial(\n\t                    helper.get_opt_func, \n\t                    opt_model_size='350m')\n\t        elif model_name == 'roberta-base':\n\t            key_params['get_model_func'] = helper.get_roberta_func\n\t        elif model_name == 'roberta-large':\n\t            key_params['get_model_func'] = functools.partial(\n\t                    helper.get_roberta_func,\n\t                    model_name=model_name)\n", "        elif model_name is not None:\n\t            raise NotImplementedError\n\t        key_params['exp_id'] = exp_name\n\t        key_params['seed'] = seed\n\t        key_params.update(kwargs)\n\t        if post_func is not None:\n\t            key_params = post_func(key_params)\n\t        return key_params\n\t    if all_things is None:\n\t        all_things = globals()\n", "    all_things[func_name] = _func\n\tadd_func_in_general_for_opt = add_func_in_general\n\tdef get_general_data_func(\n\t        data_func, tokenizer=None, \n\t        max_epochs=100, ckpt_save_interval=50,\n\t        col_name=None):\n\t    def _func(key_params):\n\t        if col_name is not None:\n\t            key_params['col_name'] = col_name\n\t        if tokenizer is None:\n", "            _tokenizer = get_tokenizer_func()\n\t        else:\n\t            _tokenizer = tokenizer\n\t        key_params['get_dataset_func'] = functools.partial(\n\t                    data_func,\n\t                    tokenizer=_tokenizer)\n\t        key_params['max_epochs'] = max_epochs\n\t        key_params['ckpt_save_interval'] = ckpt_save_interval\n\t        return key_params\n\t    return _func\n"]}
{"filename": "src/babylm_baseline_train/configs/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/configs/BabyLM/exp_strict.py", "chunked_list": ["import babylm_baseline_train.datasets.babyLM as babyLM\n\tfrom babylm_baseline_train.configs.general import\\\n\t        add_func_in_general_for_opt, get_general_data_func\n\timport functools\n\tfrom itertools import product\n\timport babylm_baseline_train.train.tk_funcs as tk_funcs\n\tKWARGS = dict(\n\t        all_things=globals(),\n\t        specify_iter=[],\n\t        specify_epoch=[5, 10, 20],\n", "        )\n\tDATA_KWARGS = dict(\n\t        max_epochs=20, ckpt_save_interval=15,\n\t        col_name='babyLM_10M')\n\tdef add_exp_seeds(\n\t        exp_names, seeds, data_func,\n\t        model_name=None,\n\t        tokenizer=None,\n\t        ):\n\t    for exp_name, seed in zip(exp_names, seeds):\n", "        add_func_in_general_for_opt(\n\t                func_name=exp_name,\n\t                data_func=get_general_data_func(\n\t                    data_func,\n\t                    tokenizer=tokenizer,\n\t                    **DATA_KWARGS),\n\t                seed=seed,\n\t                model_name=model_name,\n\t                **KWARGS)\n\tadd_exp_seeds(\n", "        exp_names=[\n\t            'opt125m_s1',\n\t            'opt125m_s2',\n\t            'opt125m_s3',\n\t            'opt125m_s4',\n\t            ], \n\t        seeds=[1, 2, 3, 4], \n\t        data_func=babyLM.get_babyLM_10M)\n\tadd_exp_seeds(\n\t        exp_names=[\n", "            'opt350m_s1',\n\t            'opt350m_s2',\n\t            'opt350m_s3',\n\t            'opt350m_s4',\n\t            ], \n\t        seeds=[1, 2, 3, 4], \n\t        data_func=babyLM.get_babyLM_10M,\n\t        model_name='350m')\n"]}
{"filename": "src/babylm_baseline_train/configs/BabyLM/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/configs/BabyLM/exp_strict_mask.py", "chunked_list": ["import babylm_baseline_train.datasets.babyLM as babyLM\n\tfrom babylm_baseline_train.configs.general import\\\n\t        add_func_in_general, get_general_data_func,\\\n\t        add_collate_fn_for_MLM\n\timport functools\n\tfrom itertools import product\n\timport babylm_baseline_train.train.tk_funcs as tk_funcs\n\tKWARGS = dict(\n\t        all_things=globals(),\n\t        specify_iter=[],\n", "        specify_epoch=[5, 10, 20],\n\t        )\n\tDATA_KWARGS = dict(\n\t        max_epochs=20, ckpt_save_interval=15,\n\t        col_name='babyLM_10M')\n\tdef add_exp_seeds(\n\t        exp_names, seeds, data_func,\n\t        model_name='roberta-base',\n\t        tokenizer=None,\n\t        ):\n", "    for exp_name, seed in zip(exp_names, seeds):\n\t        if tokenizer is None:\n\t            MLM_tokenizer = tk_funcs.get_roberta_tokenizer_func(\n\t                    model_name=model_name)\n\t        else:\n\t            MLM_tokenizer = tokenizer\n\t        add_func_in_general(\n\t                func_name=exp_name,\n\t                data_func=get_general_data_func(\n\t                    data_func,\n", "                    tokenizer=MLM_tokenizer,\n\t                    **DATA_KWARGS),\n\t                seed=seed,\n\t                model_name=model_name,\n\t                post_func=functools.partial(\n\t                    add_collate_fn_for_MLM,\n\t                    tokenizer=MLM_tokenizer),\n\t                **KWARGS)\n\tadd_exp_seeds(\n\t        exp_names=[\n", "            'roberta_s1',\n\t            ], \n\t        seeds=[1], \n\t        data_func=babyLM.get_babyLM_10M)\n\tadd_exp_seeds(\n\t        exp_names=[\n\t            'roberta_large_s1',\n\t            ], \n\t        seeds=[1], \n\t        data_func=babyLM.get_babyLM_10M,\n", "        model_name='roberta-large')\n"]}
{"filename": "src/babylm_baseline_train/models/ckpt_loader.py", "chunked_list": ["import os\n\timport ipdb\n\timport setuptools\n\timport torch\n\timport transformers\n\timport babylm_baseline_train.train.tk_funcs as tk_funcs\n\timport babylm_baseline_train.models.helper as helper\n\tdef load_opt125m():\n\t    tokenizer = tk_funcs.get_tokenizer_func()\n\t    model = helper.get_opt_func()\n", "    saved_model = torch.load(\n\t            './babyLM_10M/opt125m_s1/epoch_20.pth', # path to your pretrained model\n\t            map_location=torch.device('cpu'))\n\t    model.load_state_dict(saved_model['state_dict'])\n\tdef load_roberta():\n\t    tokenizer = tk_funcs.get_roberta_tokenizer_func()\n\t    model = helper.get_roberta_func(tokenizer=tokenizer)\n\t    saved_model = torch.load(\n\t            './babyLM_10M/roberta_s1/epoch_20.pth', # path to your pretrained model\n\t            map_location=torch.device('cpu'))\n", "    saved_model['state_dict'].pop('roberta.embeddings.token_type_ids')\n\t    model.load_state_dict(saved_model['state_dict'])\n\tdef load_t5():\n\t    tokenizer = tk_funcs.get_t5_tokenizer_func()\n\t    model = transformers.AutoModelForSeq2SeqLM.from_pretrained(\n\t            \"./babyLM_10M/t5_s1/\",                  # path to your pretrained model\n\t            from_flax=True,\n\t    )\n"]}
{"filename": "src/babylm_baseline_train/models/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/models/helper.py", "chunked_list": ["import os\n\timport pdb\n\timport setuptools\n\timport torch\n\timport ipdb\n\timport copy\n\tfrom transformers import OPTForCausalLM\n\tfrom transformers.models.opt.modeling_opt import OPTConfig\n\tDEBUG = int(os.environ.get(\n\t        'DEBUG',\n", "        '0')) == 1\n\tdef get_opt_func(opt_model_size='125m'):\n\t    model_name = f\"facebook/opt-{opt_model_size}\"\n\t    config = OPTConfig.from_pretrained(model_name)\n\t    model = OPTForCausalLM(config=config)\n\t    return model\n\tdef get_roberta_func(model_name=\"roberta-base\", tokenizer=None):\n\t    from transformers import RobertaConfig, RobertaForMaskedLM\n\t    config = RobertaConfig.from_pretrained(model_name)\n\t    model = RobertaForMaskedLM(config)\n", "    if tokenizer is not None:\n\t        model.resize_token_embeddings(len(tokenizer))\n\t    return model\n"]}
{"filename": "src/babylm_baseline_train/train/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/train/tk_funcs.py", "chunked_list": ["import os\n\timport pdb\n\timport setuptools\n\timport torch\n\tfrom transformers import AutoTokenizer\n\tfrom transformers import GPT2Tokenizer\n\tdef get_gpt2_tokenizer_func(model_name='gpt2'):\n\t    tokenizer = GPT2Tokenizer.from_pretrained(model_name)\n\t    return tokenizer\n\tdef get_roberta_tokenizer_func(model_name=\"roberta-base\"):\n", "    from transformers import RobertaTokenizer\n\t    tokenizer = RobertaTokenizer.from_pretrained(model_name)\n\t    return tokenizer\n\tdef get_t5_tokenizer_func(model_name=\"t5-base\"):\n\t    from transformers import T5Tokenizer\n\t    tokenizer = T5Tokenizer.from_pretrained(model_name)\n\t    return tokenizer\n\tdef get_tokenizer_func(opt_model_size='125m'):\n\t    model_name = f\"facebook/opt-{opt_model_size}\"\n\t    tokenizer = GPT2Tokenizer.from_pretrained(model_name)\n", "    tokenizer.add_bos_token = False\n\t    tokenizer.add_special_tokens(\n\t            {\n\t                'bos_token': '<s>', \n\t                'unk_token': '<unk>',\n\t                'additional_special_tokens': [\n\t                    '<image>', '</c>', \n\t                    '<PERSON>', # C-12M for person names\n\t                    ]\n\t            })\n", "    return tokenizer\n"]}
{"filename": "src/babylm_baseline_train/train/utils.py", "chunked_list": ["import importlib\n\tdef get_setting_func(setting):\n\t    assert len(setting.split(':')) == 2, \\\n\t            'Setting should be \"script_path:func_name\"'\n\t    script_path, func_name = setting.split(':')\n\t    assert script_path.endswith('.py'), \\\n\t            'Script should end with \".py\"'\n\t    module_name = script_path[:-3].replace('/', '.')\n\t    while module_name.startswith('.'):\n\t        module_name = module_name[1:]\n", "    try:\n\t        load_setting_module = importlib.import_module(module_name)\n\t    except:\n\t        module_name = 'babylm_baseline_train.configs.' + module_name\n\t        load_setting_module = importlib.import_module(module_name)\n\t    setting_func = getattr(load_setting_module, func_name)\n\t    return setting_func\n"]}
{"filename": "src/babylm_baseline_train/train/env_params.py", "chunked_list": ["import os\n\tfrom pt_framework.dist_utils import use_tpu\n\tfrom ..env_vars import ROOT_DIR, ROOT_DIR_FREQ\n\tMODEL_SAVE_FOLDER = os.environ.get(\n\t        'BABYLM_MODEL_SAVE_FOLDER',\n\t        os.path.join(\n\t            ROOT_DIR, 'models/'))\n\tREC_SAVE_FOLDER = os.environ.get(\n\t        'BABYLM_REC_SAVE_FOLDER',\n\t        os.path.join(\n", "            ROOT_DIR_FREQ, 'model_recs/'))\n\tUSE_TPU = use_tpu()\n\tMANUAL_FORCE_TPU = int(os.environ.get('MANUAL_FORCE_TPU', 0)) == 1\n\tUSE_TPU = USE_TPU or MANUAL_FORCE_TPU\n"]}
{"filename": "src/babylm_baseline_train/datasets/base.py", "chunked_list": ["from transformers import AutoTokenizer\n\timport torch\n\tfrom abc import ABC, abstractmethod\n\tfrom transformers import GPT2Tokenizer\n\timport ipdb\n\tfrom tqdm import tqdm\n\tfrom .utils import Group_Texts\n\tclass BaseGroupDataset(ABC):\n\t    def __init__(self, seq_len, tokenizer):\n\t        self.seq_len = seq_len\n", "        self.tokenizer = tokenizer\n\t    def prepare_tokenizer(self):\n\t        if self.tokenizer is None:\n\t            #self.tokenizer = AutoTokenizer.from_pretrained(\n\t            #        \"gpt2\", fast=False)\n\t            model_name = f\"facebook/opt-125m\"\n\t            self.tokenizer = GPT2Tokenizer.from_pretrained(model_name)\n\t    @abstractmethod\n\t    def get_dataset(self):\n\t        pass\n", "    def tokenize_function(self, examples):\n\t        outputs = self.tokenizer(examples['text'])\n\t        return outputs\n\t    def get_group_dataset(self, just_dataset=False):\n\t        self.prepare_tokenizer()\n\t        self.get_dataset()\n\t        if just_dataset == True:\n\t            return self.dataset\n\t        elif just_dataset == 'self':\n\t            return self\n", "        tokenized_datasets = self.dataset.map(\n\t                self.tokenize_function, batched=True, \n\t                remove_columns=[\"text\"])\n\t        group_text_default = Group_Texts(\n\t                tokenized_datasets, self.tokenizer, \n\t                seq_len=self.seq_len)\n\t        grouped_dataset_default = group_text_default.group_texts()\n\t        return grouped_dataset_default\n\t    def count_num_of_words(self):\n\t        import re\n", "        import inflect\n\t        import nltk.data\n\t        from tqdm import tqdm\n\t        tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\n\t        num = 0\n\t        for data in tqdm(self.dataset):\n\t            sents = tokenizer.tokenize(data['text'])\n\t            for sent in sents:\n\t                tokens = re.findall('\\w+', sent)\n\t                num += len(tokens)\n", "        return num\n\t    def count_num_of_tks(self):\n\t        num_of_tks = 0\n\t        for line in tqdm(self.dataset):\n\t            txt_in_tks = self.tokenize_function(line)\n\t            num_of_tks += len(txt_in_tks.input_ids)\n\t        return num_of_tks\n"]}
{"filename": "src/babylm_baseline_train/datasets/__init__.py", "chunked_list": []}
{"filename": "src/babylm_baseline_train/datasets/utils.py", "chunked_list": ["from copy import deepcopy\n\tfrom typing import Optional\n\timport torch\n\t# New class based off of group_texts with stride, padding, and padding token inputs\n\tclass Group_Texts:\n\t    def __init__(self,\n\t                 tokenized_dataset,\n\t                 tokenizer,\n\t                 seq_len: int,\n\t                 stride: Optional[int] = None,\n", "                 padding: Optional[bool] = False,\n\t                 padding_tok: Optional[int] = None\n\t                 ):\n\t        # Set values for the class variables\n\t        self.dataset = tokenized_dataset\n\t        self.seq_len = seq_len\n\t        # if-else for setting stride/padding/padding token\n\t        # Padding false, stride None -> Default\n\t        if padding is False and stride is None:\n\t            self.stride = seq_len\n", "            self.padding = padding\n\t        # Padding true, stride None -> Only padding\n\t        elif padding is True and stride is None:\n\t            self.stride = seq_len\n\t            self.padding = padding\n\t            if padding_tok is not None:\n\t                self.padding_tok = padding_tok\n\t            elif padding_tok is None:\n\t                # Doesn't matter what the padding token is since it will be masked dually by labels and attention mask\n\t                # Can also set to the input id value of eos token\n", "                self.padding_tok = (tokenizer(tokenizer.eos_token))[\"input_ids\"][0]\n\t                print(\n\t                    f'Padding token defaulting to {(tokenizer(tokenizer.eos_token))[\"input_ids\"][0]} (debugging), it will be masked by labels and attention mask')\n\t        # Padding false, stride a value -> Only stride\n\t        elif padding is False and stride is not None:\n\t            self.stride = stride\n\t            self.padding = padding\n\t        # Padding true, stride a value -> Stride with padding\n\t        elif padding is True and stride is not None:\n\t            self.stride = stride\n", "            self.padding = padding\n\t            if padding_tok is not None:\n\t                self.padding_tok = padding_tok\n\t            elif padding_tok is None:\n\t                self.padding_tok = (tokenizer(tokenizer.eos_token))[\"input_ids\"][0]\n\t                print(\n\t                    f'Padding token defaulting to {(tokenizer(tokenizer.eos_token))[\"input_ids\"][0]} (debugging), it will be masked by labels and attention mask')\n\t        # Split function calls by the inputs\n\t        if self.padding is False and self.stride is self.seq_len:\n\t            print(\"Grouping texts with default mode without padding or stride at context length of\", self.seq_len)\n", "        elif self.padding is True and self.stride is self.seq_len:\n\t            print(\"Grouping texts with padding with padding token\", self.padding_tok, \"at context length of\", self.seq_len)\n\t        elif self.padding is False and self.stride is not self.seq_len:\n\t            print(\"Grouping texts at a stride of\", self.stride, \"at context length of\", self.seq_len)\n\t        elif self.padding is True and self.stride is not self.seq_len:\n\t            print(\"Grouping texts with padding with padding token\", self.padding_tok, \"and stride of\", self.stride, \"at context length of\", self.seq_len)\n\t    def group_texts(self):\n\t        # Call preferred grouping function\n\t        return self.dataset.map(self.get_grouping, batched=True, batch_size=1000)\n\t    # Default function with no padding or striding\n", "    # Leaves out tokens that do not fit into a multiple of seq_len\n\t    def group_default(self, examples):\n\t        concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n\t        total_length = len(concatenated_examples[list(examples.keys())[0]])\n\t        total_length_use = (total_length // self.seq_len) * self.seq_len\n\t        result = {\n\t            k: [t[i: i + self.seq_len] for i in range(0, total_length_use, self.seq_len)]\n\t            for k, t in concatenated_examples.items()\n\t        }\n\t        result[\"labels\"] = result[\"input_ids\"].copy()\n", "        # Some checks\n\t        assert all([len(x) == self.seq_len for x in result[\"input_ids\"]])\n\t        if 'attention_mask' in result:\n\t            assert all([len(x) == self.seq_len for x in result[\"attention_mask\"]])\n\t        assert all([len(x) == self.seq_len for x in result[\"labels\"]])\n\t        return result\n\t    # Only Padding function\n\t    # Takes the left out tokens and pads to seq_len\n\t    def group_padding(self, examples):\n\t        concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n", "        total_length = len(concatenated_examples[list(examples.keys())[0]])\n\t        # Find what length to add padding\n\t        remainder = total_length % self.seq_len\n\t        if remainder != 0:\n\t            to_add = self.seq_len - remainder\n\t        elif remainder == 0:\n\t            to_add = 0\n\t        to_add_input_id = [self.padding_tok] * to_add\n\t        to_add_atten_mask = [0] * to_add\n\t        # Merge the two Dict variables\n", "        pad_dict = dict(input_ids=to_add_input_id, attention_mask=to_add_atten_mask)\n\t        for key in concatenated_examples.keys():\n\t            t = concatenated_examples[key]\n\t            t1 = [item for sublist in [t, pad_dict[key]] for item in sublist]\n\t            assert not len(t1) % self.seq_len\n\t            concatenated_examples[key] = t1\n\t        total_length_use = len(concatenated_examples[list(examples.keys())[0]])\n\t        result = {\n\t            k: [t[i: i + self.seq_len] for i in range(0, total_length_use, self.seq_len)]\n\t            for k, t in concatenated_examples.items()\n", "        }\n\t        # Labels is copied from input ids\n\t        result[\"labels\"] = result[\"input_ids\"].copy()\n\t        # Label is -100 if attention mask is 0, otherwise same as input ids\n\t        result[\"labels\"] = [\n\t            [-100 if mask == 0 else token for mask, token in mask_and_tokens] for mask_and_tokens in\n\t            [zip(masks, labels) for masks, labels in zip(result[\"attention_mask\"], result[\"labels\"])]\n\t        ]\n\t        # Some checks\n\t        assert all([len(x) == self.seq_len for x in result[\"input_ids\"]])\n", "        assert all([len(x) == self.seq_len for x in result[\"attention_mask\"]])\n\t        assert all([len(x) == self.seq_len for x in result[\"labels\"]])\n\t        return result\n\t    # Only Stride function\n\t    # Takes batches at length seq_len, moving every stride\n\t    # Masks out tokens that are reused the next batch\n\t    def group_stride(self, examples):\n\t        concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n\t        total_length = len(concatenated_examples[list(examples.keys())[0]])\n\t        if self.stride < self.seq_len:\n", "            total_length_use = ((total_length - self.seq_len + self.stride) // self.stride) * self.stride\n\t            result = {\n\t                k: [t[i: i + self.seq_len] for i in range(0, total_length_use, self.stride)]\n\t                for k, t in concatenated_examples.items()}\n\t        elif self.stride > self.seq_len:\n\t            count_indice = 1\n\t            count_length = total_length - self.seq_len\n\t            while count_length >= self.stride + self.seq_len:\n\t                count_indice += 1\n\t                count_length = count_length - self.stride - self.seq_len\n", "            total_length_use = count_indice * self.stride\n\t            result = {\n\t                k: [t[0:self.seq_len]] for k, t in concatenated_examples.items()}\n\t            result_add = {\n\t                k: [t[i + self.stride + 1: i + self.seq_len + self.stride + 1] for i in range(self.stride, total_length_use, self.stride)]\n\t                for k, t in concatenated_examples.items()}\n\t            for key in result.keys():\n\t                t = result[key]\n\t                t1 = [item for sublist in [t, result_add[key]] for item in sublist]\n\t                result[key] = t1\n", "        # Copies over input ids to new column called labels\n\t        result[\"labels\"] = deepcopy(result[\"input_ids\"])\n\t        # Mask out losses in overlapping regions\n\t        # Changes masked labels to -100 and attention mask to 0\n\t        for i, labels in enumerate(result[\"labels\"]):\n\t            # Skip the first index since the first batch will not have any masking\n\t            if i == 0:\n\t                continue\n\t            # For every j in range from 0 to length-stride, label to -100 to mask them\n\t            for j in range(self.seq_len - self.stride):\n", "                labels[j] = -100\n\t            # Set the newly masked list of labels to result Dict object\n\t            result[\"labels\"][i] = labels\n\t        for i, attention in enumerate(result[\"attention_mask\"]):\n\t            # Skip the first index since the first batch will not have any masking\n\t            if i == 0:\n\t                continue\n\t            # For every j in range from 0 to length-stride, label to -100 to mask them\n\t            for j in range(self.seq_len - self.stride):\n\t                attention[j] = 0\n", "            # Set the newly masked list of labels to result Dict object\n\t            result[\"attention_mask\"][i] = attention\n\t        # Some checks\n\t        #assert all([len(x) == self.seq_len for x in result[\"input_ids\"]])\n\t        #assert all([len(x) == self.seq_len for x in result[\"attention_mask\"]])\n\t        #assert all([len(x) == self.seq_len for x in result[\"labels\"]])\n\t        return result\n\t    # Padding and stride function\n\t    def group_padding_stride(self, examples):\n\t        concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n", "        total_length = len(concatenated_examples[list(examples.keys())[0]])\n\t        # Finds just the quotient of total_length - seq_len by stride\n\t        total_length_stride = ((total_length - self.seq_len + self.stride) // self.stride) * self.stride\n\t        # Get the remainder and subtract to get the length of padding to add to fit the last stride\n\t        # Different padding for stride > or < than seq_len\n\t        if self.stride < self.seq_len:\n\t            remainder = (total_length - self.seq_len) % self.stride\n\t            to_add = self.seq_len - remainder\n\t            to_add_input_id = [self.padding_tok] * to_add\n\t            to_add_atten_mask = [0] * to_add\n", "            pad_dict = dict(input_ids=to_add_input_id, attention_mask=to_add_atten_mask)\n\t            for key in concatenated_examples.keys():\n\t                t = concatenated_examples[key]\n\t                t1 = [item for sublist in [t, pad_dict[key]] for item in sublist]\n\t                # assert not len(t1) % self.stride\n\t                concatenated_examples[key] = t1\n\t            total_length_use = total_length_stride + 1\n\t            # New Dict object based that samples at length seq_len with stride\n\t            result = {k: [t[i: i + self.seq_len] for i in range(0, total_length_use, self.stride)] for k, t in\n\t                      concatenated_examples.items()}\n", "        elif self.stride > self.seq_len:\n\t            count_index = 1\n\t            count_length = total_length - self.seq_len\n\t            while count_length >= self.stride + self.seq_len:\n\t                count_index += 1\n\t                count_length = count_length - self.stride - self.seq_len\n\t            to_add = self.seq_len\n\t            to_add_input_id = [self.padding_tok] * to_add\n\t            to_add_atten_mask = [0] * to_add\n\t            total_length_use = count_index * self.stride\n", "            pad_dict = dict(input_ids=to_add_input_id, attention_mask=to_add_atten_mask)\n\t            for key in concatenated_examples.keys():\n\t                t = concatenated_examples[key]\n\t                t1 = [item for sublist in [t, pad_dict[key]] for item in sublist]\n\t                # assert not len(t1) % self.stride\n\t                concatenated_examples[key] = t1\n\t            # New Dict object based that samples at length seq_len with stride\n\t            result = {k: [t[0:self.seq_len]] for k, t in concatenated_examples.items()}\n\t            result_add = {\n\t                k: [t[i + self.stride - 1: i + self.seq_len + self.stride - 1] for i in\n", "                    range(self.stride, total_length_use, self.stride)]\n\t                for k, t in concatenated_examples.items()}\n\t            for key in result.keys():\n\t                t = result[key]\n\t                t1 = [item for sublist in [t, result_add[key]] for item in sublist]\n\t                result[key] = t1\n\t        # Copies over input ids to new column called labels\n\t        result[\"labels\"] = deepcopy(result[\"input_ids\"])\n\t        # Label is -100 if attention mask is 0, otherwise same as input ids\n\t        # Just for padding at the end\n", "        result[\"labels\"] = [\n\t            [-100 if mask == 0 else token for mask, token in mask_and_tokens] for mask_and_tokens in\n\t            [zip(masks, labels) for masks, labels in zip(result[\"attention_mask\"], result[\"labels\"])]\n\t        ]\n\t        # Mask out losses in overlapping regions. If training data, string will be equal to seq_len\n\t        for i, labels in enumerate(result[\"labels\"]):\n\t            # Skip the first index since the first batch will not have any masking\n\t            if i == 0:\n\t                continue\n\t            # For every j in range from 0 to length-stride, change label to -100 to mask them\n", "            for j in range(self.seq_len - self.stride):\n\t                labels[j] = -100\n\t            # Set the newly masked list of labels to result Dict object\n\t            result[\"labels\"][i] = labels\n\t        for i, attention in enumerate(result[\"attention_mask\"]):\n\t            # Skip the first index since the first batch will not have any masking\n\t            if i == 0:\n\t                continue\n\t            # For every j in range from 0 to length-stride, change attention mask to 0 to mask them\n\t            for j in range(self.seq_len - self.stride):\n", "                attention[j] = 0\n\t            # Set the newly masked list of labels to result Dict object\n\t            result[\"attention_mask\"][i] = attention\n\t        # Some checks\n\t        # assert all([len(x) == self.seq_len for x in result[\"input_ids\"]])\n\t        # assert all([len(x) == self.seq_len for x in result[\"attention_mask\"]])\n\t        # assert all([len(x) == self.seq_len for x in result[\"labels\"]])\n\t        return result\n\t    # If-else function calls based on padding and stride values of self\n\t    def get_grouping(self, examples):\n", "        # Split function calls by the inputs\n\t        if self.padding is False and self.stride is self.seq_len:\n\t            return self.group_default(examples)\n\t        elif self.padding is True and self.stride is self.seq_len:\n\t            return self.group_padding(examples)\n\t        elif self.padding is False and self.stride is not self.seq_len:\n\t            return self.group_stride(examples)\n\t        elif self.padding is True and self.stride is not self.seq_len:\n\t            return self.group_padding_stride(examples)\n\tdef collate_fn(all_data):\n", "    keys = list(all_data[0].keys())\n\t    ret_dict = {}\n\t    for other_key in keys:\n\t        all_other_value = [torch.LongTensor(_data[other_key]) for _data in all_data]\n\t        all_other_value = torch.stack(all_other_value, 0)\n\t        ret_dict[other_key] = all_other_value\n\t    return ret_dict\n"]}
{"filename": "src/babylm_baseline_train/datasets/hf_loaders.py", "chunked_list": ["from datasets import load_dataset\n\tfrom ..env_vars import ROOT_DIR, DATASET_ROOT_DIR\n\timport os\n\timport babylm_baseline_train\n\trepo_path = babylm_baseline_train.__path__[0]\n\tdef get_babyLM(name, split):\n\t    dataset = load_dataset(\n\t            path=os.path.join(\n\t                repo_path, 'datasets', \"babyLM_for_hf.py\"),\n\t            name=name,\n", "            split=split)\n\t    return dataset\n"]}
{"filename": "src/babylm_baseline_train/datasets/babyLM_for_hf.py", "chunked_list": ["import os\n\timport datasets\n\tfrom babylm_baseline_train.env_vars import DATASET_ROOT_DIR\n\t_CITATION = \"\"\"\n\t\"\"\"\n\t_DESCRIPTION = \"\"\"\\\n\tBabyLM data\n\t\"\"\"\n\t_HOMEPAGE = \"https://babylm.github.io/\"\n\t_LICENSE = \"????\"\n", "_DATA_URL = DATASET_ROOT_DIR\n\tclass babyLMConfig(datasets.BuilderConfig):\n\t    \"\"\"BuilderConfig for babyLM.\"\"\"\n\t    def __init__(self, data_url, **kwargs):\n\t        \"\"\"BuilderConfig for babyLM\n\t        Args:\n\t          data_url: `string`, url to the dataset (word or raw level)\n\t          **kwargs: keyword arguments forwarded to super.\n\t        \"\"\"\n\t        super().__init__(\n", "            version=datasets.Version(\n\t                \"1.0.0\",\n\t            ),\n\t            **kwargs,\n\t        )\n\t        self.data_url = data_url\n\tclass babyLM(datasets.GeneratorBasedBuilder):\n\t    \"\"\"TODO: Short description of dataset dataset.\"\"\"\n\t    DATA_SOURCES = [\n\t            'aochildes', 'bnc_spoken', 'cbt', 'children_stories',\n", "            'gutenberg', 'open_subtitles', 'qed',  'simple_wikipedia',\n\t            'switchboard',  'wikipedia']\n\t    VERSION = datasets.Version(\"0.0.0\")\n\t    BUILDER_CONFIGS = [\n\t            babyLMConfig(\n\t                name=\"babyLM-10M\",\n\t                data_url=os.path.join(_DATA_URL, 'babylm_10M'),\n\t                description=\"Raw level dataset: the raw tokens before the addition of <unk> tokens. 10M tokens.\",\n\t            ),\n\t            babyLMConfig(\n", "                name=\"babyLM-100M\",\n\t                data_url=os.path.join(_DATA_URL, 'babylm_100M'),\n\t                description=\"Raw level dataset: the raw tokens before the addition of <unk> tokens. 100M tokens.\",\n\t            ),\n\t            ]\n\t    def _info(self):\n\t        return datasets.DatasetInfo(\n\t            # This is the description that will appear on the datasets page.\n\t            description=_DESCRIPTION,\n\t            # datasets.features.FeatureConnectors\n", "            features=datasets.Features(\n\t                {\n\t                    \"text\": datasets.Value(\"string\")\n\t                    # These are the features of your dataset like images, labels ...\n\t                }\n\t            ),\n\t            # If there's a common (input, target) tuple from the features,\n\t            # specify them here. They'll be used if as_supervised=True in\n\t            # builder.as_dataset.\n\t            supervised_keys=None,\n", "            homepage=_HOMEPAGE,\n\t            license=_LICENSE,\n\t            citation=_CITATION,\n\t        )\n\t    def _split_generators(self, dl_manager):\n\t        \"\"\"Returns SplitGenerators.\"\"\"\n\t        ret_list = [\n\t            datasets.SplitGenerator(\n\t                name=datasets.Split.TEST,\n\t                gen_kwargs={\"data_folder\": os.path.join(_DATA_URL, \"babylm_test\"), \"split\": \"test\"},\n", "            ),\n\t            datasets.SplitGenerator(\n\t                name=datasets.Split.VALIDATION,\n\t                gen_kwargs={\"data_folder\": os.path.join(_DATA_URL, \"babylm_dev\"), \"split\": \"dev\"},\n\t            ),\n\t            datasets.SplitGenerator(\n\t                name=datasets.Split.TRAIN,\n\t                gen_kwargs={\"data_folder\": self.config.data_url, \"split\": \"train\"},\n\t            ),\n\t        ]\n", "        return ret_list\n\t    def _generate_examples(self, data_folder, split):\n\t        \"\"\"Yields examples.\"\"\"\n\t        all_data_files = [\n\t                os.path.join(data_folder, f'{source}.{split}')\n\t                for source in self.DATA_SOURCES]\n\t        all_lines = []\n\t        for data_file in all_data_files:\n\t            with open(data_file, encoding=\"utf-8\") as f:\n\t                all_lines.extend(f.readlines())\n", "        for idx, row in enumerate(all_lines):\n\t            if row.strip():\n\t                yield idx, {\"text\": row}\n\t            else:\n\t                yield idx, {\"text\": \"\"}\n"]}
{"filename": "src/babylm_baseline_train/datasets/babyLM.py", "chunked_list": ["from datasets import load_dataset, concatenate_datasets\n\tfrom transformers import AutoTokenizer\n\timport numpy as np\n\timport pdb\n\tfrom .utils import Group_Texts\n\tfrom .base import BaseGroupDataset\n\tfrom . import hf_loaders\n\tclass BabyLM(BaseGroupDataset):\n\t    def __init__(\n\t            self, \n", "            seq_len=128, tokenizer=None,\n\t            name='babyLM-10M',\n\t            ):\n\t        super().__init__(seq_len, tokenizer)\n\t        self.name = name\n\t    def get_dataset(self):\n\t        self.dataset = hf_loaders.get_babyLM(\n\t                name=self.name,\n\t                split=\"train\")\n\tdef get_babyLM_10M(seq_len=128, tokenizer=None, just_dataset=False):\n", "    dataset_builder = BabyLM(\n\t            seq_len=seq_len,\n\t            tokenizer=tokenizer,\n\t            name='babyLM-10M',\n\t            )\n\t    return dataset_builder.get_group_dataset(just_dataset=just_dataset)\n\tdef get_babyLM_100M(seq_len=128, tokenizer=None, just_dataset=False):\n\t    dataset_builder = BabyLM(\n\t            seq_len=seq_len,\n\t            tokenizer=tokenizer,\n", "            name='babyLM-100M',\n\t            )\n\t    return dataset_builder.get_group_dataset(just_dataset=just_dataset)\n"]}
