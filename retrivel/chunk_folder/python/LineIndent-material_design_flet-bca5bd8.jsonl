{"filename": "setup.py", "chunked_list": ["from setuptools import setup\n\tsetup(\n\t    name=\"flet-material\",\n\t    version=\"0.3.3\",\n\t    author=\"S. Ahmad P. Hakimi\",\n\t    author_email=\"pourhakimi@pm.me\",\n\t    description=\"Material UI Library for Flet\",\n\t    long_description=\"\",\n\t    long_description_content_type=\"text/markdown\",\n\t    url=\"https://github.com/LineIndent/material_design_flet\",\n", "    packages=[\"flet_material\", \"styles\"],\n\t    install_requires=[\"click>=8.1.3\", \"flet>=0.8.1\"],\n\t    classifiers=[\n\t        \"Programming Language :: Python :: 3\",\n\t        \"License :: OSI Approved :: MIT License\",\n\t        \"Operating System :: OS Independent\",\n\t    ],\n\t    entry_points={\n\t        \"console_scripts\": [\n\t            \"flet_material_init=flet_material.command.new_project:init_code\"\n", "        ],\n\t    },\n\t    keywords=[\"material design\", \"UI library\", \"Flet\"],\n\t)\n"]}
{"filename": "flet_material/alert.py", "chunked_list": ["import flet as ft\n\tfrom styles import alert_dimension, alert_settings\n\tfrom flet_material.base import Theme\n\tclass Alerts(ft.Container, Theme):\n\t    def __init__(\n\t        self,\n\t        type_: str,\n\t        size: str,\n\t        title: str,\n\t        comment: str,\n", "        *args,\n\t        **kwargs,\n\t    ):\n\t        # get alert dimensions\n\t        width = alert_dimension.get(size).get(\"width\")\n\t        height = alert_dimension.get(size).get(\"height\")\n\t        # get alert properties\n\t        bgcolor = alert_settings.get(type_).get(\"bgcolor\")\n\t        icon = alert_settings.get(type_).get(\"icon\")\n\t        # props for inner row\n", "        self.box1: ft.Control = ft.Container(\n\t            width=5,\n\t            border_radius=20,\n\t            bgcolor=bgcolor,\n\t            margin=ft.margin.only(left=5, right=5, top=5, bottom=5),\n\t        )\n\t        self.box2: ft.Control = ft.Container(\n\t            expand=1,\n\t            alignment=ft.alignment.center,\n\t            content=ft.Icon(name=icon, size=30, color=bgcolor),\n", "        )\n\t        self.box3: ft.Control = ft.Container(\n\t            expand=5,\n\t            content=ft.Row(\n\t                alignment=\"start\",\n\t                controls=[\n\t                    ft.Column(\n\t                        spacing=2,\n\t                        alignment=\"center\",\n\t                        controls=[\n", "                            ft.Text(title, size=13, color=\"black\", weight=\"bold\"),\n\t                            ft.Text(\n\t                                comment,\n\t                                size=10,\n\t                                color=ft.colors.with_opacity(0.85, \"black\"),\n\t                            ),\n\t                        ],\n\t                    )\n\t                ],\n\t            ),\n", "        )\n\t        self.box4: ft.Control = ft.Container(\n\t            width=45,\n\t            alignment=ft.alignment.center,\n\t            ink=True,\n\t            content=ft.Text(\"Ã—\", color=ft.colors.with_opacity(0.5, \"black\")),\n\t        )\n\t        #\n\t        kwargs.setdefault(\n\t            \"shadow\",\n", "            ft.BoxShadow(\n\t                spread_radius=8,\n\t                blur_radius=15,\n\t                color=ft.colors.with_opacity(0.25, \"black\"),\n\t                offset=ft.Offset(4, 0),\n\t            ),\n\t        )\n\t        kwargs.setdefault(\"width\", width)\n\t        kwargs.setdefault(\"height\", height)\n\t        kwargs.setdefault(\"bgcolor\", ft.colors.with_opacity(0.90, \"white\"))\n", "        kwargs.setdefault(\"border_radius\", 6)\n\t        kwargs.setdefault(\n\t            \"content\",\n\t            ft.Row(\n\t                spacing=0,\n\t                alignment=\"center\",\n\t                controls=[self.box1, self.box2, self.box3, self.box4],\n\t            ),\n\t        )\n\t        super().__init__(*args, **kwargs)\n"]}
{"filename": "flet_material/button.py", "chunked_list": ["import flet as ft\n\tfrom flet_material.base import Theme\n\tclass Buttons(ft.Container, Theme):\n\t    def __init__(self, width, height, title: str, *args, **kwargs):\n\t        #\n\t        self.title = title\n\t        #\n\t        self.text = ft.Text(\n\t            self.title,\n\t            weight=\"bold\",\n", "            color=ft.colors.with_opacity(0.85, Theme.primary_theme),\n\t        )\n\t        #\n\t        kwargs.setdefault(\"width\", width)\n\t        kwargs.setdefault(\"height\", height)\n\t        kwargs.setdefault(\"ink\", True)\n\t        kwargs.setdefault(\"bgcolor\", \"#2e2f3e\")\n\t        kwargs.setdefault(\"shape\", ft.BoxShape(\"rectangle\"))\n\t        kwargs.setdefault(\n\t            \"border\",\n", "            ft.border.all(2, ft.colors.with_opacity(0.85, Theme.primary_theme)),\n\t        )\n\t        kwargs.setdefault(\"border_radius\", 4)\n\t        kwargs.setdefault(\"on_hover\", lambda e: self.animate_button(e))\n\t        kwargs.setdefault(\"alignment\", ft.alignment.center)\n\t        kwargs.setdefault(\"animate\", ft.Animation(500, \"ease\"))\n\t        kwargs.setdefault(\"content\", self.text)\n\t        super().__init__(*args, **kwargs)\n\t    def animate_button(self, e):\n\t        if self.bgcolor == \"#2e2f3e\":\n", "            self.bgcolor = Theme.primary_theme\n\t            self.text.color = ft.colors.with_opacity(0.95, \"white\")\n\t        else:\n\t            self.bgcolor = \"#2e2f3e\"\n\t            self.text.color = ft.colors.with_opacity(0.85, Theme.primary_theme)\n\t        self.update()\n"]}
{"filename": "flet_material/annotation.py", "chunked_list": ["from flet_material.base import Theme\n\timport flet as ft\n\tclass Annotations(ft.Container, Theme):\n\t    def __init__(\n\t        self,\n\t        annotations_msg: str,\n\t        *args,\n\t        **kwargs,\n\t    ):\n\t        self.annotations_msg = annotations_msg\n", "        self.annotation = ft.Tooltip(\n\t            padding=10,\n\t            vertical_offset=20,\n\t            message=self.annotations_msg,\n\t            bgcolor=\"#20222c\",\n\t            text_style=ft.TextStyle(color=\"white\"),\n\t            content=ft.Icon(\n\t                name=ft.icons.ADD,\n\t                size=15,\n\t                rotate=ft.Rotate(0, ft.alignment.center),\n", "                animate_rotation=ft.Animation(400, \"easeOutBack\"),\n\t            ),\n\t        )\n\t        kwargs.setdefault(\"width\", 21)\n\t        kwargs.setdefault(\"height\", 21)\n\t        kwargs.setdefault(\"bgcolor\", \"white24\")\n\t        kwargs.setdefault(\"shape\", ft.BoxShape(\"circle\"))\n\t        kwargs.setdefault(\"alignment\", ft.alignment.center)\n\t        kwargs.setdefault(\"content\", self.annotation)\n\t        kwargs.setdefault(\"animate\", 400)\n", "        kwargs.setdefault(\"on_hover\", lambda e: self.change_rotation(e))\n\t        super().__init__(*args, **kwargs)\n\t    def change_rotation(self, e):\n\t        if e.data == \"true\":\n\t            self.bgcolor = Theme.primary_theme\n\t            self.content.content.rotate = ft.Rotate(0.75, ft.alignment.center)\n\t        else:\n\t            self.bgcolor = \"white24\"\n\t            self.content.content.rotate = ft.Rotate(0, ft.alignment.center)\n\t        self.update()\n"]}
{"filename": "flet_material/base.py", "chunked_list": ["from styles.theme import flet_material_theme\n\tclass Theme:\n\t    primary_theme: str = None\n\t    accent_theme: str = None\n\t    bgcolor: str = \"#2e2f3e\"\n\t    @classmethod\n\t    def set_theme(cls, theme: str):\n\t        app_theme = flet_material_theme.get(theme)\n\t        cls.primary_theme = app_theme.get(\"primary\")\n\t        cls.accent_theme = app_theme.get(\"accent\")\n"]}
{"filename": "flet_material/checkbox.py", "chunked_list": ["import flet as ft\n\tfrom flet_material.base import Theme\n\timport time\n\tclass CheckBox(ft.Container, Theme):\n\t    def __init__(self, shape: str, value: bool, disabled: bool, *args, **kwargs):\n\t        self.checkbox: ft.Control = ft.Checkbox(\n\t            fill_color=Theme.primary_theme,\n\t            check_color=\"white\",\n\t            scale=ft.Scale(0.95),\n\t            value=value,\n", "            disabled=disabled,\n\t            on_change=lambda e: self.animate_checkbox(e),\n\t        )\n\t        kwargs.setdefault(\"width\", 25)\n\t        kwargs.setdefault(\"height\", 25)\n\t        kwargs.setdefault(\"shape\", ft.BoxShape(shape))\n\t        kwargs.setdefault(\"bgcolor\", Theme.primary_theme)\n\t        kwargs.setdefault(\"content\", self.checkbox)\n\t        kwargs.setdefault(\"scale\", 0.8)\n\t        kwargs.setdefault(\"animate_scale\", ft.Animation(500, \"bounceOut\"))\n", "        kwargs.setdefault(\"on_click\", lambda e: self.animate_checkbox(e))\n\t        super().__init__(*args, **kwargs)\n\t    def animate_checkbox(self, e):\n\t        self.scale = ft.Scale(0.65)\n\t        self.update()\n\t        time.sleep(0.15)\n\t        self.scale = ft.Scale(0.8)\n\t        self.update()\n"]}
{"filename": "flet_material/switch.py", "chunked_list": ["import flet as ft\n\tfrom flet_material.base import Theme\n\tclass Switchs(ft.Container, Theme):\n\t    def __init__(self, animation: ft.Animation = \"easeInOutBack\", *args, **kwargs):\n\t        self.toggle = ft.Container(\n\t            bgcolor=\"white\",\n\t            shape=ft.BoxShape(\"circle\"),\n\t            offset=ft.transform.Offset(-0.25, 0),\n\t            animate_offset=ft.Animation(600, animation),\n\t            on_click=lambda e: self.toggle_switch(e),\n", "        )\n\t        kwargs.setdefault(\"width\", 54)\n\t        kwargs.setdefault(\"height\", 25)\n\t        kwargs.setdefault(\"border_radius\", 25)\n\t        kwargs.setdefault(\"bgcolor\", \"white10\")\n\t        kwargs.setdefault(\"padding\", 4)\n\t        kwargs.setdefault(\"clip_behavior\", ft.ClipBehavior.HARD_EDGE)\n\t        kwargs.setdefault(\"content\", self.toggle)\n\t        kwargs.setdefault(\"animate\", 400)\n\t        kwargs.setdefault(\"on_click\", lambda e: self.toggle_switch(e))\n", "        super().__init__(*args, **kwargs)\n\t    def toggle_switch(self, e):\n\t        if self.toggle.offset == ft.transform.Offset(-0.25, 0):\n\t            self.toggle.offset = ft.transform.Offset(0.25, 0)\n\t            self.bgcolor = Theme.primary_theme\n\t            self.update()\n\t        elif self.toggle.offset == ft.transform.Offset(0.25, 0):\n\t            self.toggle.offset = ft.transform.Offset(-0.25, 0)\n\t            self.bgcolor = \"white10\"\n\t            self.update()\n", "        else:\n\t            pass\n"]}
{"filename": "flet_material/__init__.py", "chunked_list": ["from flet_material.base import Theme\n\tfrom flet_material.admonition import Admonitions, FixedAdmonitions\n\tfrom flet_material.annotation import Annotations\n\tfrom flet_material.checkbox import CheckBox\n\tfrom flet_material.button import Buttons\n\tfrom flet_material.chip import FilterChip\n\tfrom flet_material.badge import NotificationBadge, IconBadge\n\tfrom flet_material.switch import Switchs\n\tfrom flet_material.alert import Alerts\n\tfrom flet_material.code_block import Code\n"]}
{"filename": "flet_material/chip.py", "chunked_list": ["import flet as ft\n\tfrom flet_material.base import Theme\n\tclass FilterChip(ft.Container, Theme):\n\t    def __init__(\n\t        self,\n\t        title: str,\n\t        chip_width: int,\n\t        *args,\n\t        **kwargs,\n\t    ):\n", "        #\n\t        self.title = title\n\t        self.chip_width = chip_width\n\t        #\n\t        self.tick = ft.Control = ft.Checkbox(\n\t            width=2,\n\t            height=2,\n\t            scale=ft.Scale(0.7),\n\t            fill_color=\"#2e2f3e\",\n\t            check_color=\"white\",\n", "            disabled=True,\n\t            value=False,\n\t        )\n\t        kwargs.setdefault(\"width\", self.chip_width)\n\t        kwargs.setdefault(\"bgcolor\", \"#2e2f3e\")\n\t        kwargs.setdefault(\"border\", ft.border.all(1, Theme.primary_theme))\n\t        kwargs.setdefault(\"padding\", 8)\n\t        kwargs.setdefault(\"ink\", True)\n\t        kwargs.setdefault(\"border_radius\", 6)\n\t        kwargs.setdefault(\"alignment\", ft.alignment.center)\n", "        kwargs.setdefault(\"on_click\", lambda e: self.toggle_filter_chip(e))\n\t        kwargs.setdefault(\n\t            \"content\",\n\t            ft.Row(\n\t                spacing=0,\n\t                alignment=ft.MainAxisAlignment.SPACE_AROUND,\n\t                vertical_alignment=\"center\",\n\t                controls=[self.tick, ft.Text(self.title, size=11, weight=\"bold\")],\n\t            ),\n\t        )\n", "        super().__init__(*args, **kwargs)\n\t    def toggle_filter_chip(self, e):\n\t        if self.tick.value == False:\n\t            self.tick.value = True\n\t        else:\n\t            self.tick.value = False\n\t        self.tick.update()\n"]}
{"filename": "flet_material/code_block.py", "chunked_list": ["import flet as ft\n\timport asyncio\n\tclass Code(ft.UserControl):\n\t    def __init__(self, title):\n\t        #\n\t        self.title = title\n\t        #\n\t        self._hovered: bool | None = None\n\t        self.copy_box = ft.Container(\n\t            width=28,\n", "            height=28,\n\t            border=ft.border.all(1, \"transparent\"),\n\t            right=1,\n\t            top=1,\n\t            border_radius=7,\n\t            scale=ft.Scale(1),\n\t            animate=ft.Animation(400, \"ease\"),\n\t            alignment=ft.alignment.center,\n\t            content=ft.Icon(\n\t                name=ft.icons.COPY,\n", "                size=14,\n\t                color=\"white12\",\n\t                opacity=0,\n\t                animate_opacity=ft.Animation(420, \"ease\"),\n\t            ),\n\t            on_click=lambda e: asyncio.run(self.get_copy_box_content(e)),\n\t        )\n\t        super().__init__()\n\t    async def get_copy_box_content(self, e):\n\t        self.title = self.title.replace(\"`\", \"\")\n", "        self.title = self.title.replace(\"python\", \"\")\n\t        e.page.set_clipboard(self.title)\n\t        while self._hovered:\n\t            self.copy_box.disabled = True\n\t            self.copy_box.update()\n\t            self.copy_box.content.opacity = 0\n\t            self.copy_box.content.name = ft.icons.CHECK\n\t            self.copy_box.update()\n\t            await asyncio.sleep(0.25)\n\t            self.copy_box.content.opacity = 1\n", "            self.copy_box.content.color = \"teal\"\n\t            self.copy_box.update()\n\t            await asyncio.sleep(1)\n\t            self.copy_box.content.opacity = 0\n\t            self.copy_box.content.name = ft.icons.COPY\n\t            self.copy_box.content.color = \"white12\"\n\t            self.copy_box.update()\n\t            self.copy_box.disabled = False\n\t            self.copy_box.update()\n\t            break\n", "        if self._hovered == True:\n\t            self.copy_box.content.opacity = 1\n\t        else:\n\t            self.copy_box.content.opacity = 0\n\t        self.copy_box.content.update()\n\t    def show_copy_box(self, e):\n\t        if e.data == \"true\":\n\t            self.copy_box.border = ft.border.all(0.95, \"white10\")\n\t            self.copy_box.content.opacity = 1\n\t            self._hovered = True\n", "        else:\n\t            self.copy_box.content.opacity = 0\n\t            self.copy_box.border = ft.border.all(0.95, \"transparent\")\n\t            self._hovered = False\n\t        self.copy_box.update()\n\t    def build(self):\n\t        return ft.Row(\n\t            alignment=\"start\",\n\t            vertical_alignment=\"center\",\n\t            controls=[\n", "                ft.Container(\n\t                    expand=True,\n\t                    padding=8,\n\t                    border_radius=7,\n\t                    bgcolor=\"#282b33\",\n\t                    on_hover=lambda e: self.show_copy_box(e),\n\t                    content=ft.Stack(\n\t                        controls=[\n\t                            ft.Markdown(\n\t                                value=self.title,\n", "                                selectable=True,\n\t                                extension_set=\"gitHubWeb\",\n\t                                code_theme=\"atom-one-dark-reasonable\",\n\t                                code_style=ft.TextStyle(size=12),\n\t                            ),\n\t                            self.copy_box,\n\t                        ],\n\t                    ),\n\t                )\n\t            ],\n", "        )\n"]}
{"filename": "flet_material/badge.py", "chunked_list": ["import flet as ft\n\tfrom flet_material.base import Theme\n\tfrom styles import badge_size_dimensions, badge_icon\n\timport time\n\tclass NotificationBadge(ft.Stack, Theme):\n\t    def __init__(\n\t        self,\n\t        title: str,\n\t        size: str,\n\t        notification: int,\n", "        *args,\n\t        **kwargs,\n\t    ):\n\t        # set the start notification counter\n\t        self.notification = notification\n\t        # get the wdiget dimension\n\t        size = badge_size_dimensions.get(size, {})\n\t        width = size.get(\"width\", 55)\n\t        height = size.get(\"height\", 45)\n\t        #\n", "        self.notification_text = ft.Text(\n\t            value=notification, weight=\"bold\", size=9, text_align=\"center\"\n\t        )\n\t        self.notification_box: ft.Control = ft.Container(\n\t            width=22,\n\t            height=22,\n\t            shape=ft.BoxShape(\"circle\"),\n\t            top=0,\n\t            right=0,\n\t            bgcolor=\"red800\",\n", "            border_radius=4,\n\t            offset=ft.transform.Offset(0, -0.25),\n\t            animate_offset=ft.Animation(50, \"linear\"),\n\t            alignment=ft.alignment.center,\n\t            content=self.notification_text,\n\t        )\n\t        #\n\t        kwargs.setdefault(\"width\", width)\n\t        kwargs.setdefault(\"height\", height)\n\t        kwargs.setdefault(\n", "            \"controls\",\n\t            [\n\t                ft.Container(\n\t                    width=width * 0.9,\n\t                    height=height * 0.9,\n\t                    bgcolor=Theme.primary_theme,\n\t                    top=1,\n\t                    border_radius=6,\n\t                    alignment=ft.alignment.center,\n\t                    content=ft.Text(\n", "                        title,\n\t                        weight=\"bold\",\n\t                        size=12,\n\t                        text_align=\"center\",\n\t                        font_family=\"Roboto\",\n\t                    ),\n\t                ),\n\t                ft.Container(\n\t                    width=25,\n\t                    height=25,\n", "                    top=0,\n\t                    right=0,\n\t                    padding=10,\n\t                    shape=ft.BoxShape(\"circle\"),\n\t                    offset=ft.transform.Offset(0, -0.25),\n\t                    bgcolor=\"#2e2f3e\",\n\t                    alignment=ft.alignment.center,\n\t                ),\n\t                self.notification_box,\n\t            ],\n", "        )\n\t        super().__init__(*args, **kwargs)\n\t    def add_notification(self, current):\n\t        self.notification_text.value = current\n\t        self.notification_box.offset = ft.transform.Offset(0.05, -0.25)\n\t        self.notification_box.update()\n\t        time.sleep(0.05)\n\t        self.notification_box.offset = ft.transform.Offset(-0.05, -0.25)\n\t        self.notification_box.update()\n\t        time.sleep(0.05)\n", "        self.notification_box.offset = ft.transform.Offset(0, -0.25)\n\t        self.notification_box.update()\n\tclass IconBadge(ft.Stack, Theme):\n\t    def __init__(\n\t        self,\n\t        bagde_icon: str,\n\t        notification: int,\n\t        *args,\n\t        **kwargs,\n\t    ):\n", "        #\n\t        icon = badge_icon.get(bagde_icon)\n\t        self.notification = notification\n\t        #\n\t        self.notification_text = ft.Text(\n\t            value=notification, weight=\"bold\", size=9, text_align=\"center\"\n\t        )\n\t        self.notification_box: ft.Control = ft.Container(\n\t            width=22,\n\t            height=18,\n", "            top=0,\n\t            right=0,\n\t            bgcolor=\"red800\",\n\t            border_radius=4,\n\t            offset=ft.transform.Offset(-0.30, 0.35),\n\t            animate_offset=ft.Animation(50, \"linear\"),\n\t            shape=ft.BoxShape(\"rectangle\"),\n\t            alignment=ft.alignment.center,\n\t            content=self.notification_text,\n\t        )\n", "        #\n\t        kwargs.setdefault(\"width\", 64)\n\t        kwargs.setdefault(\"height\", 64)\n\t        kwargs.setdefault(\n\t            \"controls\",\n\t            [\n\t                self.notification_box,\n\t                ft.Container(\n\t                    width=64 * 0.9,\n\t                    height=64 * 0.9,\n", "                    bgcolor=\"transparent\",\n\t                    top=1,\n\t                    border_radius=6,\n\t                    alignment=ft.alignment.center,\n\t                    content=ft.Icon(name=icon, size=24),\n\t                ),\n\t            ],\n\t        )\n\t        super().__init__(*args, **kwargs)\n\t    def add_notification(self, current):\n", "        self.notification_text.value = current\n\t        self.notification_box.offset = ft.transform.Offset(-0.35, 0.35)\n\t        self.notification_box.update()\n\t        time.sleep(0.05)\n\t        self.notification_box.offset = ft.transform.Offset(-0.25, 0.35)\n\t        self.notification_box.update()\n\t        time.sleep(0.05)\n\t        self.notification_box.offset = ft.transform.Offset(-0.3, 0.35)\n\t        self.notification_box.update()\n"]}
{"filename": "flet_material/admonition.py", "chunked_list": ["import flet as ft\n\tfrom styles import admon_style, font_scheme\n\tclass Admonitions(ft.Container):\n\t    def __init__(\n\t        self,\n\t        type_: str,\n\t        expanded_height: int,\n\t        expand: bool,\n\t        components: list,\n\t        height=60,\n", "        padding=0,\n\t        border_radius=6,\n\t        animate=ft.Animation(300, \"decelerate\"),\n\t        clip_behavior=ft.ClipBehavior.HARD_EDGE,\n\t        shadow=ft.BoxShadow(\n\t            spread_radius=8,\n\t            blur_radius=15,\n\t            color=ft.colors.with_opacity(0.35, \"black\"),\n\t            offset=ft.Offset(4, 4),\n\t        ),\n", "    ):\n\t        self.type_ = type_\n\t        self.expanded_height = expanded_height\n\t        self.components = components\n\t        self.column = ft.Column(\n\t            controls=self.components,\n\t        )\n\t        # define admonition title properties\n\t        bgcolor = admon_style.get(self.type_, {}).get(\"bgcolor\", \"#20222c\")\n\t        border_color = admon_style.get(self.type_, {}).get(\"border_color\", \"white24\")\n", "        icon = admon_style.get(self.type_, {}).get(\"icon\", \"white24\")\n\t        self.container = ft.Container(\n\t            height=58,\n\t            bgcolor=ft.colors.with_opacity(0.95, bgcolor),\n\t            border_radius=6,\n\t            padding=10,\n\t            content=ft.Row(\n\t                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n\t                controls=[\n\t                    ft.Row(\n", "                        vertical_alignment=\"center\",\n\t                        spacing=10,\n\t                        controls=[\n\t                            ft.Icon(\n\t                                name=icon,\n\t                                color=border_color,\n\t                                size=18,\n\t                            ),\n\t                            ft.Text(\n\t                                self.type_.capitalize(),\n", "                                size=12,\n\t                                weight=\"w700\",\n\t                            ),\n\t                        ],\n\t                    ),\n\t                    ft.IconButton(\n\t                        icon=ft.icons.ADD,\n\t                        icon_size=15,\n\t                        icon_color=border_color,\n\t                        rotate=ft.Rotate(0, ft.alignment.center),\n", "                        animate_rotation=ft.Animation(400, \"easeOutBack\"),\n\t                        on_click=lambda e: self.resize_admonition(e),\n\t                    ),\n\t                ],\n\t            ),\n\t        )\n\t        super().__init__(\n\t            expand=expand,\n\t            height=height,\n\t            padding=padding,\n", "            border_radius=border_radius,\n\t            animate=animate,\n\t            clip_behavior=clip_behavior,\n\t            border=ft.border.all(0.85, border_color),\n\t            shadow=shadow,\n\t            content=ft.Column(\n\t                alignment=\"start\",\n\t                spacing=0,\n\t                controls=[\n\t                    self.container,\n", "                    self.column,\n\t                ],\n\t            ),\n\t        )\n\t    # method: expand and retract admonition control + animation set\n\t    def resize_admonition(self, e):\n\t        if self.height != self.expanded_height:\n\t            self.height = self.expanded_height\n\t            self.container.border_radius = ft.border_radius.only(topLeft=6, topRight=6)\n\t            e.control.rotate = ft.Rotate(0.75, ft.alignment.center)\n", "        else:\n\t            self.height = 60\n\t            e.control.rotate = ft.Rotate(0, ft.alignment.center)\n\t            self.container.border_radius = 6\n\t        self.update()\n\tclass FixedAdmonitions(ft.Container):\n\t    def __init__(\n\t        self,\n\t        type_: str,\n\t        expanded: bool,\n", "        title: str,\n\t        *args,\n\t        **kwargs,\n\t    ):\n\t        self.title = title\n\t        # define admonition title properties\n\t        bgcolor = admon_style.get(type_, {}).get(\"bgcolor\", \"#20222c\")\n\t        border_color = admon_style.get(type_, {}).get(\"border_color\", \"white24\")\n\t        icon = admon_style.get(type_, {}).get(\"icon\", \"white24\")\n\t        fonts = font_scheme.get(\"admonitions_title\", {})\n", "        title_font = fonts.get(\"font_family\")\n\t        title_size = fonts.get(\"size\")\n\t        self.container = ft.Container(\n\t            height=58,\n\t            bgcolor=ft.colors.with_opacity(0.95, bgcolor),\n\t            border_radius=6,\n\t            padding=10,\n\t            content=ft.Row(\n\t                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n\t                controls=[\n", "                    ft.Row(\n\t                        vertical_alignment=\"center\",\n\t                        spacing=10,\n\t                        controls=[\n\t                            ft.Icon(\n\t                                name=icon,\n\t                                color=border_color,\n\t                                size=18,\n\t                            ),\n\t                            ft.Text(\n", "                                type_.capitalize(),\n\t                                size=title_size,\n\t                                font_family=title_font,\n\t                                weight=\"w700\",\n\t                            ),\n\t                            ft.Text(\n\t                                self.title,\n\t                                size=13,\n\t                                font_family=title_font,\n\t                                weight=\"w400\",\n", "                            ),\n\t                        ],\n\t                    ),\n\t                ],\n\t            ),\n\t        )\n\t        # define self instance properties\n\t        kwargs.setdefault(\n\t            \"shadow\",\n\t            ft.BoxShadow(\n", "                spread_radius=8,\n\t                blur_radius=15,\n\t                color=ft.colors.with_opacity(0.35, \"black\"),\n\t                offset=ft.Offset(4, 4),\n\t            ),\n\t        )\n\t        kwargs.setdefault(\"border\", ft.border.all(0.85, border_color))\n\t        kwargs.setdefault(\"clip_behavior\", ft.ClipBehavior.HARD_EDGE)\n\t        kwargs.setdefault(\"animate\", ft.Animation(300, \"decelerate\"))\n\t        kwargs.setdefault(\"expand\", expanded)\n", "        kwargs.setdefault(\"border_radius\", 6)\n\t        kwargs.setdefault(\"height\", 60)\n\t        kwargs.setdefault(\"padding\", 0)\n\t        kwargs.setdefault(\n\t            \"content\",\n\t            ft.Column(\n\t                alignment=\"start\",\n\t                spacing=0,\n\t                controls=[\n\t                    self.container,\n", "                ],\n\t            ),\n\t        )\n\t        super().__init__(*args, **kwargs)\n"]}
{"filename": "styles/theme.py", "chunked_list": ["\"\"\"\n\t\"\"\"\n\tflet_material_theme: dict = {\n\t    \"red\": {\n\t        \"primary\": \"#dd6058\",\n\t        \"accent\": \"#dc2626\",\n\t    },\n\t    \"pink\": {\n\t        \"primary\": \"#d63863\",\n\t        \"accent\": \"#9f1239\",\n", "    },\n\t    \"purple\": {\n\t        \"primary\": \"#a855f7\",\n\t        \"accent\": \"#7e22ce\",\n\t    },\n\t    \"indigo\": {\n\t        \"primary\": \"#4f46e5\",\n\t        \"accent\": \"#3730a3\",\n\t    },\n\t    \"blue\": {\n", "        \"primary\": \"#3b82f6\",\n\t        \"accent\": \"#1d4ed8\",\n\t    },\n\t    \"light blue\": {\n\t        \"primary\": \"#0ea5e9\",\n\t        \"accent\": \"#0369a1\",\n\t    },\n\t    \"cyan\": {\n\t        \"primary\": \"#06b6d4\",\n\t        \"accent\": \"#0e7490\",\n", "    },\n\t    \"teal\": {\n\t        \"primary\": \"#14b8a6\",\n\t        \"accent\": \"#0f766e\",\n\t    },\n\t    \"green\": {\n\t        \"primary\": \"#22c55e\",\n\t        \"accent\": \"#15803d\",\n\t    },\n\t    \"lime\": {\n", "        \"primary\": \"#84cc16\",\n\t        \"accent\": \"#4d7c0f\",\n\t    },\n\t    \"yellow\": {\n\t        \"primary\": \"#eab308\",\n\t        \"accent\": \"#a16207\",\n\t    },\n\t    \"amber\": {\n\t        \"primary\": \"#f59e0b\",\n\t        \"accent\": \"#b45309\",\n", "    },\n\t    \"orange\": {\n\t        \"primary\": \"#f97316\",\n\t        \"accent\": \"#c2410c\",\n\t    },\n\t    \"earth\": {\n\t        \"primary\": \"#78716c\",\n\t        \"accent\": \"#44403c\",\n\t    },\n\t    \"slate\": {\n", "        \"primary\": \"#64748b\",\n\t        \"accent\": \"#334155\",\n\t    },\n\t    \"black\": {\n\t        \"primary\": \"#000000\",\n\t        \"accent\": \"#000000\",\n\t    },\n\t    \"white\": {\n\t        \"primary\": \"#ffffff\",\n\t        \"accent\": \"#ffffff\",\n", "    },\n\t}\n"]}
{"filename": "styles/fonts.py", "chunked_list": ["font_scheme: dict = {\n\t    \"admonitions_title\": {\"font_family\": \"Roboto\", \"size\": \"12\"},\n\t}\n"]}
{"filename": "styles/__init__.py", "chunked_list": ["from styles.theme import flet_material_theme\n\tfrom styles.fonts import font_scheme\n\tfrom styles.admonition_style import admon_style\n\tfrom styles.badge_style import badge_size_dimensions, badge_icon\n\tfrom styles.alert_style import alert_dimension, alert_settings\n"]}
{"filename": "styles/badge_style.py", "chunked_list": ["badge_size_dimensions: dict = {\n\t    \"sm\": {\"width\": 55, \"height\": 45},\n\t    \"md\": {\"width\": 90, \"height\": 45},\n\t    \"lg\": {\"width\": 135, \"height\": 45},\n\t    \"xl\": {\"width\": 165, \"height\": 45},\n\t}\n\tbadge_icon: dict = {\n\t    \"email\": \"email_rounded\",\n\t    \"facebook\": \"facebook_rounded\",\n\t    \"notification\": \"notifications_sharp\",\n", "    \"cart\": \"shopping_cart_sharp\",\n\t}\n"]}
{"filename": "styles/alert_style.py", "chunked_list": ["alert_dimension: dict = {\n\t    \"sm\": {\"width\": 250, \"height\": 75},\n\t    \"md\": {\"width\": 300, \"height\": 75},\n\t    \"lg\": {\"width\": 350, \"height\": 75},\n\t}\n\talert_settings: dict = {\n\t    \"info\": {\"bgcolor\": \"blue800\", \"icon\": \"info_sharp\"},\n\t    \"warn\": {\"bgcolor\": \"yellow600\", \"icon\": \"priority_high_sharp\"},\n\t    \"question\": {\"bgcolor\": \"green700\", \"icon\": \"question_mark_rounded\"},\n\t}\n"]}
{"filename": "styles/admonition_style.py", "chunked_list": ["admon_style: dict = {\n\t    \"note\": {\n\t        \"bgcolor\": \"#2f3851\",\n\t        \"border_color\": \"#448afe\",\n\t        \"icon\": \"event_note_rounded\",\n\t    },\n\t    \"abstract\": {\n\t        \"bgcolor\": \"#293c51\",\n\t        \"border_color\": \"#1eb0fe\",\n\t        \"icon\": \"insert_drive_file_rounded\",\n", "    },\n\t    \"info\": {\n\t        \"bgcolor\": \"#293d4d\",\n\t        \"border_color\": \"#24b7d4\",\n\t        \"icon\": \"info_rounded\",\n\t    },\n\t    \"tip\": {\n\t        \"bgcolor\": \"#293f48\",\n\t        \"border_color\": \"#2abfa4\",\n\t        \"icon\": \"tips_and_updates_rounded\",\n", "    },\n\t    \"success\": {\n\t        \"bgcolor\": \"#293e40\",\n\t        \"border_color\": \"#2fc852\",\n\t        \"icon\": \"check_sharp\",\n\t    },\n\t    \"warning\": {\n\t        \"bgcolor\": \"#423a37\",\n\t        \"border_color\": \"#fb9100\",\n\t        \"icon\": \"warning_sharp\",\n", "    },\n\t    \"danger\": {\n\t        \"bgcolor\": \"#432d3f\",\n\t        \"border_color\": \"#fa1744\",\n\t        \"icon\": \"dangerous_sharp\",\n\t    },\n\t}\n"]}
{"filename": "tests/test_buttons.py", "chunked_list": ["import flet_material as fm\n\timport unittest\n\tbutton = fm.Buttons(width=220, height=55, title=\"Give this repo a star!\")\n\tclass TestButtons(unittest.TestCase):\n\t    def test_parameter_types(self):\n\t        self.assertIsInstance(button.width, int)\n\t        self.assertIsInstance(button.height, int)\n\t        self.assertIsInstance(button.title, str)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_switch.py", "chunked_list": ["import flet as ft\n\timport flet_material as fm\n\timport unittest\n\tswitch = fm.Switchs()\n\tclass TestButtons(unittest.TestCase):\n\t    def test_attributes(self):\n\t        self.assertEqual(switch.width, 54)\n\t        self.assertEqual(switch.height, 25)\n\t        self.assertEqual(switch.border_radius, 25)\n\t        self.assertEqual(switch.bgcolor, \"white10\")\n", "        self.assertEqual(switch.padding, 4)\n\t        self.assertEqual(switch.clip_behavior, ft.ClipBehavior.HARD_EDGE)\n\t    def test_parameter_types(self):\n\t        # Test if switch is an instance of the Switchs class:\n\t        self.assertIsInstance(switch, fm.Switchs)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_admonitions.py", "chunked_list": ["import flet_material as fm\n\timport unittest\n\tdropdown = fm.Admonitions(\n\t    type_=\"note\", expanded_height=300, expand=False, components=None\n\t)\n\tclass TestButtons(unittest.TestCase):\n\t    def test_parameter_types(self):\n\t        self.assertIsInstance(dropdown.type_, str)\n\t        self.assertIsInstance(dropdown.expanded_height, int)\n\t        self.assertIsInstance(dropdown.components, (list, type(None)))\n", "if __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "command/new_project.py", "chunked_list": ["import click\n\t@click.command()\n\t@click.argument(\"project_name\")\n\tdef init_code(project_name):\n\t    \"\"\"\n\t    Create a new Flet Material project with a main.py file.\n\t    \"\"\"\n\t    template_code = \"\"\"import flet as ft\n\timport flet_material as fm\n\t# begin by changing your app theme color here ...\n", "fm.Theme.set_theme(theme=\"blue\")\n\tdef main(page:ft.Page):\n\t    page.bgcolor = fm.Theme.bgcolor\n\t    page.update()\n\tif __name__ == \"__main__\":\n\t    ft.flet.app(target=main)\n\t\"\"\"\n\t    with open(f\"{project_name}/main.py\", \"w\") as f:\n\t        f.write(template_code)\n\t    click.echo(f\"Created {project_name}/main.py\")\n", "if __name__ == \"__main__\":\n\t    init_code()\n"]}
{"filename": "command/__init__.py", "chunked_list": ["from command.new_project import init_code\n"]}
{"filename": "api/data/style.py", "chunked_list": ["style_sheet = {\n\t    \"admonitions\": [\n\t        {\n\t            \"name\": \"note\",\n\t            \"bgcolor\": \"#2f3851\",\n\t            \"border_color\": \"#448afe\",\n\t            \"icon\": \"event_note_rounded\",\n\t        },\n\t        {\n\t            \"name\": \"abstract\",\n", "            \"bgcolor\": \"#293c51\",\n\t            \"border_color\": \"#1eb0fe\",\n\t            \"icon\": \"insert_drive_file_rounded\",\n\t        },\n\t        {\n\t            \"name\": \"info\",\n\t            \"bgcolor\": \"#293d4d\",\n\t            \"border_color\": \"#24b7d4\",\n\t            \"icon\": \"info_rounded\",\n\t        },\n", "        {\n\t            \"name\": \"tip\",\n\t            \"bgcolor\": \"#293f48\",\n\t            \"border_color\": \"#2abfa4\",\n\t            \"icon\": \"tips_and_updates_rounded\",\n\t        },\n\t        {\n\t            \"name\": \"success\",\n\t            \"bgcolor\": \"#293e40\",\n\t            \"border_color\": \"#2fc852\",\n", "            \"icon\": \"check_sharp\",\n\t        },\n\t        {\n\t            \"name\": \"warning\",\n\t            \"bgcolor\": \"#423a37\",\n\t            \"border_color\": \"#fb9100\",\n\t            \"icon\": \"warning_sharp\",\n\t        },\n\t        {\n\t            \"name\": \"danger\",\n", "            \"bgcolor\": \"#432d3f\",\n\t            \"border_color\": \"#fa1744\",\n\t            \"icon\": \"dangerous_sharp\",\n\t        },\n\t    ],\n\t}\n"]}
{"filename": "api/api/index.py", "chunked_list": ["from flask import Flask, jsonify\n\timport os\n\timport sys\n\tcurrent_dir = os.path.dirname(os.path.abspath(__file__))\n\tparent_dir = os.path.join(current_dir, \"..\")\n\tsys.path.append(parent_dir)\n\tfrom data.style import style_sheet\n\tapp = Flask(__name__)\n\t@app.route(\"/\")\n\tdef home():\n", "    return jsonify(style_sheet)\n"]}
