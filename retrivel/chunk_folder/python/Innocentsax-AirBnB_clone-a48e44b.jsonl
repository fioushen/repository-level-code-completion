{"filename": "console.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Module for the entry point of the command interpreter.\"\"\"\n\timport cmd\n\tfrom models.base_model import BaseModel\n\tfrom models import storage\n\timport re\n\timport json\n\tclass HBNBCommand(cmd.Cmd):\n\t    \"\"\"This is the Class for the command interpreter.\"\"\"\n\t    prompt = \"(hbnb) \"\n", "    def default(self, line):\n\t        \"\"\"Catch commands if nothing else matches then.\"\"\"\n\t        # print(\"DEF:::\", line)\n\t        self._precmd(line)\n\t    def _precmd(self, line):\n\t        \"\"\"Intercepts commands to test for class.syntax()\"\"\"\n\t        # print(\"PRECMD:::\", line)\n\t        match = re.search(r\"^(\\w*)\\.(\\w+)(?:\\(([^)]*)\\))$\", line)\n\t        if not match:\n\t            return line\n", "        classname = match.group(1)\n\t        method = match.group(2)\n\t        args = match.group(3)\n\t        match_uid_and_args = re.search('^\"([^\"]*)\"(?:, (.*))?$', args)\n\t        if match_uid_and_args:\n\t            uid = match_uid_and_args.group(1)\n\t            attr_or_dict = match_uid_and_args.group(2)\n\t        else:\n\t            uid = args\n\t            attr_or_dict = False\n", "        attr_and_value = \"\"\n\t        if method == \"update\" and attr_or_dict:\n\t            match_dict = re.search('^({.*})$', attr_or_dict)\n\t            if match_dict:\n\t                self.update_dict(classname, uid, match_dict.group(1))\n\t                return \"\"\n\t            match_attr_and_value = re.search(\n\t                '^(?:\"([^\"]*)\")?(?:, (.*))?$', attr_or_dict)\n\t            if match_attr_and_value:\n\t                attr_and_value = (match_attr_and_value.group(\n", "                    1) or \"\") + \" \" + (match_attr_and_value.group(2) or \"\")\n\t        command = method + \" \" + classname + \" \" + uid + \" \" + attr_and_value\n\t        self.onecmd(command)\n\t        return command\n\t    def update_dict(self, classname, uid, s_dict):\n\t        \"\"\"This is the helper method for update() with a dictionary.\"\"\"\n\t        s = s_dict.replace(\"'\", '\"')\n\t        d = json.loads(s)\n\t        if not classname:\n\t            print(\"** class name missing **\")\n", "        elif classname not in storage.classes():\n\t            print(\"** class doesn't exist **\")\n\t        elif uid is None:\n\t            print(\"** instance id missing **\")\n\t        else:\n\t            key = \"{}.{}\".format(classname, uid)\n\t            if key not in storage.all():\n\t                print(\"** no instance found **\")\n\t            else:\n\t                attributes = storage.attributes()[classname]\n", "                for attribute, value in d.items():\n\t                    if attribute in attributes:\n\t                        value = attributes[attribute](value)\n\t                    setattr(storage.all()[key], attribute, value)\n\t                storage.all()[key].save()\n\t    def do_EOF(self, line):\n\t        \"\"\"This handles End Of File character.\n\t        \"\"\"\n\t        print()\n\t        return True\n", "    def do_quit(self, line):\n\t        \"\"\"This exits the program.\n\t        \"\"\"\n\t        return True\n\t    def emptyline(self):\n\t        \"\"\"This doesn't do anything on ENTER.\n\t        \"\"\"\n\t        pass\n\t    def do_create(self, line):\n\t        \"\"\"This creates an instance.\n", "        \"\"\"\n\t        if line == \"\" or line is None:\n\t            print(\"** class name missing **\")\n\t        elif line not in storage.classes():\n\t            print(\"** class doesn't exist **\")\n\t        else:\n\t            b = storage.classes()[line]()\n\t            b.save()\n\t            print(b.id)\n\t    def do_show(self, line):\n", "        \"\"\"This prints the string representation of an instance.\n\t        \"\"\"\n\t        if line == \"\" or line is None:\n\t            print(\"** class name missing **\")\n\t        else:\n\t            words = line.split(' ')\n\t            if words[0] not in storage.classes():\n\t                print(\"** class doesn't exist **\")\n\t            elif len(words) < 2:\n\t                print(\"** instance id missing **\")\n", "            else:\n\t                key = \"{}.{}\".format(words[0], words[1])\n\t                if key not in storage.all():\n\t                    print(\"** no instance found **\")\n\t                else:\n\t                    print(storage.all()[key])\n\t    def do_destroy(self, line):\n\t        \"\"\"This deletes an instance based on the class name and id.\n\t        \"\"\"\n\t        if line == \"\" or line is None:\n", "            print(\"** class name missing **\")\n\t        else:\n\t            words = line.split(' ')\n\t            if words[0] not in storage.classes():\n\t                print(\"** class doesn't exist **\")\n\t            elif len(words) < 2:\n\t                print(\"** instance id missing **\")\n\t            else:\n\t                key = \"{}.{}\".format(words[0], words[1])\n\t                if key not in storage.all():\n", "                    print(\"** no instance found **\")\n\t                else:\n\t                    del storage.all()[key]\n\t                    storage.save()\n\t    def do_all(self, line):\n\t        \"\"\"This prints all string representation of all instances.\n\t        \"\"\"\n\t        if line != \"\":\n\t            words = line.split(' ')\n\t            if words[0] not in storage.classes():\n", "                print(\"** class doesn't exist **\")\n\t            else:\n\t                nl = [str(obj) for key, obj in storage.all().items()\n\t                      if type(obj).__name__ == words[0]]\n\t                print(nl)\n\t        else:\n\t            new_list = [str(obj) for key, obj in storage.all().items()]\n\t            print(new_list)\n\t    def do_count(self, line):\n\t        \"\"\"This counts the instances of a class.\n", "        \"\"\"\n\t        words = line.split(' ')\n\t        if not words[0]:\n\t            print(\"** class name missing **\")\n\t        elif words[0] not in storage.classes():\n\t            print(\"** class doesn't exist **\")\n\t        else:\n\t            matches = [\n\t                k for k in storage.all() if k.startswith(\n\t                    words[0] + '.')]\n", "            print(len(matches))\n\t    def do_update(self, line):\n\t        \"\"\"This updates an instance by adding or updating attribute.\n\t        \"\"\"\n\t        if line == \"\" or line is None:\n\t            print(\"** class name missing **\")\n\t            return\n\t        rex = r'^(\\S+)(?:\\s(\\S+)(?:\\s(\\S+)(?:\\s((?:\"[^\"]*\")|(?:(\\S)+)))?)?)?'\n\t        match = re.search(rex, line)\n\t        classname = match.group(1)\n", "        uid = match.group(2)\n\t        attribute = match.group(3)\n\t        value = match.group(4)\n\t        if not match:\n\t            print(\"** class name missing **\")\n\t        elif classname not in storage.classes():\n\t            print(\"** class doesn't exist **\")\n\t        elif uid is None:\n\t            print(\"** instance id missing **\")\n\t        else:\n", "            key = \"{}.{}\".format(classname, uid)\n\t            if key not in storage.all():\n\t                print(\"** no instance found **\")\n\t            elif not attribute:\n\t                print(\"** attribute name missing **\")\n\t            elif not value:\n\t                print(\"** value missing **\")\n\t            else:\n\t                cast = None\n\t                if not re.search('^\".*\"$', value):\n", "                    if '.' in value:\n\t                        cast = float\n\t                    else:\n\t                        cast = int\n\t                else:\n\t                    value = value.replace('\"', '')\n\t                attributes = storage.attributes()[classname]\n\t                if attribute in attributes:\n\t                    value = attributes[attribute](value)\n\t                elif cast:\n", "                    try:\n\t                        value = cast(value)\n\t                    except ValueError:\n\t                        pass  # fine, stay a string then\n\t                setattr(storage.all()[key], attribute, value)\n\t                storage.all()[key].save()\n\tif __name__ == '__main__':\n\t    HBNBCommand().cmdloop()\n"]}
{"filename": "tests/test_console.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for console.py.\n\tUnittest classes:\n\t    TestHBNBCommand_prompting\n\t    TestHBNBCommand_help\n\t    TestHBNBCommand_exit\n\t    TestHBNBCommand_create\n\t    TestHBNBCommand_show\n\t    TestHBNBCommand_all\n\t    TestHBNBCommand_destroy\n", "    TestHBNBCommand_update\n\t\"\"\"\n\timport os\n\timport sys\n\timport unittest\n\tfrom models import storage\n\tfrom models.engine.file_storage import FileStorage\n\tfrom console import HBNBCommand\n\tfrom io import StringIO\n\tfrom unittest.mock import patch\n", "class TestHBNBCommand_prompting(unittest.TestCase):\n\t    \"\"\"Unit tests for testing prompting of the HBNB command interpreter.\"\"\"\n\t    def test_prompt_string(self):\n\t        self.assertEqual(\"(hbnb) \", HBNBCommand.prompt)\n\t    def test_empty_line(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"\"))\n\t            self.assertEqual(\"\", output.getvalue().strip())\n\tclass TestHBNBCommand_help(unittest.TestCase):\n\t    \"\"\"Unit tests for testing help messages of the HBNB command interpreter.\"\"\"\n", "    def test_help_quit(self):\n\t        h = \"Quit command to exit the program.\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help quit\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_create(self):\n\t        h = (\"Usage: create <class>\\n        \"\n\t             \"Create a new class instance and print its id.\")\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help create\"))\n", "            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_EOF(self):\n\t        h = \"EOF signal to exit the program.\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help EOF\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_show(self):\n\t        h = (\"Usage: show <class> <id> or <class>.show(<id>)\\n        \"\n\t             \"Display the string representation of a class instance of\"\n\t             \" a given id.\")\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help show\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_destroy(self):\n\t        h = (\"Usage: destroy <class> <id> or <class>.destroy(<id>)\\n        \"\n\t             \"Delete a class instance of a given id.\")\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help destroy\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_all(self):\n", "        h = (\"Usage: all or all <class> or <class>.all()\\n        \"\n\t             \"Display string representations of all instances of a given class\"\n\t             \".\\n        If no class is specified, displays all instantiated \"\n\t             \"objects.\")\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help all\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_count(self):\n\t        h = (\"Usage: count <class> or <class>.count()\\n        \"\n\t             \"Retrieve the number of instances of a given class.\")\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help count\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help_update(self):\n\t        h = (\"Usage: update <class> <id> <attribute_name> <attribute_value> or\"\n\t             \"\\n       <class>.update(<id>, <attribute_name>, <attribute_value\"\n\t             \">) or\\n       <class>.update(<id>, <dictionary>)\\n        \"\n\t             \"Update a class instance of a given id by adding or updating\\n   \"\n\t             \"     a given attribute key/value pair or dictionary.\")\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"help update\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\t    def test_help(self):\n\t        h = (\"Documented commands (type help <topic>):\\n\"\n\t             \"========================================\\n\"\n\t             \"EOF  all  count  create  destroy  help  quit  show  update\")\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"help\"))\n\t            self.assertEqual(h, output.getvalue().strip())\n\tclass TestHBNBCommand_exit(unittest.TestCase):\n", "    \"\"\"Unit tests for testing exiting from the HBNB command interpreter.\"\"\"\n\t    def test_quit_exits(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertTrue(HBNBCommand().onecmd(\"quit\"))\n\t    def test_EOF_exits(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertTrue(HBNBCommand().onecmd(\"EOF\"))\n\tclass TestHBNBCommand_create(unittest.TestCase):\n\t    \"\"\"Unit tests for testing create from the HBNB command interpreter.\"\"\"\n\t    @classmethod\n", "    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t        FileStorage.__objects = {}\n\t    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n", "        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_create_missing_class(self):\n\t        correct = \"** class name missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_create_invalid_class(self):\n\t        correct = \"** class doesn't exist **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create MyModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_create_invalid_syntax(self):\n\t        correct = \"*** Unknown syntax: MyModel.create()\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.create()\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        correct = \"*** Unknown syntax: BaseModel.create()\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.create()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_create_object(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"BaseModel.{}\".format(output.getvalue().strip())\n", "            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"User.{}\".format(output.getvalue().strip())\n\t            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"State.{}\".format(output.getvalue().strip())\n", "            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"City.{}\".format(output.getvalue().strip())\n\t            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"Amenity.{}\".format(output.getvalue().strip())\n", "            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"Place.{}\".format(output.getvalue().strip())\n\t            self.assertIn(testKey, storage.all().keys())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t            self.assertLess(0, len(output.getvalue().strip()))\n\t            testKey = \"Review.{}\".format(output.getvalue().strip())\n", "            self.assertIn(testKey, storage.all().keys())\n\tclass TestHBNBCommand_show(unittest.TestCase):\n\t    \"\"\"Unit tests for testing show from the HBNB command interpreter\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t        FileStorage.__objects = {}\n", "    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n", "    def test_show_missing_class(self):\n\t        correct = \"** class name missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\".show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_invalid_class(self):\n\t        correct = \"** class doesn't exist **\"\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show MyModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_missing_id_space_notation(self):\n\t        correct = \"** instance id missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show BaseModel\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show User\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show State\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show City\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show Amenity\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show Place\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show Review\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_missing_id_dot_notation(self):\n", "        correct = \"** instance id missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Amenity.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"Review.show()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_no_instance_found_space_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show BaseModel 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show User 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show State 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show City 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show Amenity 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"show Place 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"show Review 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_no_instance_found_dot_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"Amenity.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.show(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_show_objects_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"BaseModel.{}\".format(testID)]\n\t            command = \"show BaseModel {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testID = output.getvalue().strip()\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"User.{}\".format(testID)]\n\t            command = \"show User {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"State.{}\".format(testID)]\n", "            command = \"show State {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Place.{}\".format(testID)]\n\t            command = \"show Place {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n", "            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"City.{}\".format(testID)]\n\t            command = \"show City {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Amenity.{}\".format(testID)]\n\t            command = \"show Amenity {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t            testID = output.getvalue().strip()\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Review.{}\".format(testID)]\n\t            command = \"show Review {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t    def test_show_objects_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            obj = storage.all()[\"BaseModel.{}\".format(testID)]\n\t            command = \"BaseModel.show({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"User.{}\".format(testID)]\n\t            command = \"User.show({})\".format(testID)\n", "            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"State.{}\".format(testID)]\n\t            command = \"State.show({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Place.{}\".format(testID)]\n\t            command = \"Place.show({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n", "            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"City.{}\".format(testID)]\n\t            command = \"City.show({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            obj = storage.all()[\"Amenity.{}\".format(testID)]\n\t            command = \"Amenity.show({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Review.{}\".format(testID)]\n\t            command = \"Review.show({})\".format(testID)\n", "            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertEqual(obj.__str__(), output.getvalue().strip())\n\tclass TestHBNBCommand_destroy(unittest.TestCase):\n\t    \"\"\"Unit tests for testing destroy from the HBNB command interpreter.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n", "        FileStorage.__objects = {}\n\t    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n", "            pass\n\t        storage.reload()\n\t    def test_destroy_missing_class(self):\n\t        correct = \"** class name missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\".destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "    def test_destroy_invalid_class(self):\n\t        correct = \"** class doesn't exist **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy MyModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_destroy_id_missing_space_notation(self):\n\t        correct = \"** instance id missing **\"\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy BaseModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy User\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy State\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"destroy City\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Amenity\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Place\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Review\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_destroy_id_missing_dot_notation(self):\n\t        correct = \"** instance id missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"State.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Amenity.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.destroy()\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.destroy()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_destroy_invalid_id_space_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy BaseModel 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"destroy User 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy State 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy City 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Amenity 1\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Place 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"destroy Review 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_destroy_invalid_id_dot_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.destroy(1)\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Amenity.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.destroy(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "    def test_destroy_objects_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"BaseModel.{}\".format(testID)]\n\t            command = \"destroy BaseModel {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"User.{}\".format(testID)]\n\t            command = \"show User {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            testID = output.getvalue().strip()\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"State.{}\".format(testID)]\n\t            command = \"show State {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Place.{}\".format(testID)]\n", "            command = \"show Place {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"City.{}\".format(testID)]\n\t            command = \"show City {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n", "            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Amenity.{}\".format(testID)]\n\t            command = \"show Amenity {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Review.{}\".format(testID)]\n\t            command = \"show Review {}\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t    def test_destroy_objects_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n", "            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"BaseModel.{}\".format(testID)]\n\t            command = \"BaseModel.destroy({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            obj = storage.all()[\"User.{}\".format(testID)]\n\t            command = \"User.destroy({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"State.{}\".format(testID)]\n\t            command = \"State.destroy({})\".format(testID)\n", "            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Place.{}\".format(testID)]\n\t            command = \"Place.destroy({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"City.{}\".format(testID)]\n\t            command = \"City.destroy({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n", "            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            obj = storage.all()[\"Amenity.{}\".format(testID)]\n\t            command = \"Amenity.destroy({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t            testID = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            obj = storage.all()[\"Review.{}\".format(testID)]\n\t            command = \"Review.destory({})\".format(testID)\n\t            self.assertFalse(HBNBCommand().onecmd(command))\n\t            self.assertNotIn(obj, storage.all())\n\tclass TestHBNBCommand_all(unittest.TestCase):\n\t    \"\"\"Unittests for testing all of the HBNB command interpreter.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n", "        except IOError:\n\t            pass\n\t        FileStorage.__objects = {}\n\t    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n", "            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_all_invalid_class(self):\n\t        correct = \"** class doesn't exist **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all MyModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.all()\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_all_objects_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all\"))\n\t            self.assertIn(\"BaseModel\", output.getvalue().strip())\n\t            self.assertIn(\"User\", output.getvalue().strip())\n\t            self.assertIn(\"State\", output.getvalue().strip())\n\t            self.assertIn(\"Place\", output.getvalue().strip())\n\t            self.assertIn(\"City\", output.getvalue().strip())\n\t            self.assertIn(\"Amenity\", output.getvalue().strip())\n\t            self.assertIn(\"Review\", output.getvalue().strip())\n\t    def test_all_objects_dot_notation(self):\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\".all()\"))\n", "            self.assertIn(\"BaseModel\", output.getvalue().strip())\n\t            self.assertIn(\"User\", output.getvalue().strip())\n\t            self.assertIn(\"State\", output.getvalue().strip())\n\t            self.assertIn(\"Place\", output.getvalue().strip())\n\t            self.assertIn(\"City\", output.getvalue().strip())\n\t            self.assertIn(\"Amenity\", output.getvalue().strip())\n\t            self.assertIn(\"Review\", output.getvalue().strip())\n\t    def test_all_single_object_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n", "            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all BaseModel\"))\n\t            self.assertIn(\"BaseModel\", output.getvalue().strip())\n\t            self.assertNotIn(\"User\", output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all User\"))\n\t            self.assertIn(\"User\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all State\"))\n\t            self.assertIn(\"State\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all City\"))\n", "            self.assertIn(\"City\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all Amenity\"))\n\t            self.assertIn(\"Amenity\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all Place\"))\n\t            self.assertIn(\"Place\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"all Review\"))\n\t            self.assertIn(\"Review\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t    def test_all_single_object_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n", "            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.all()\"))\n\t            self.assertIn(\"BaseModel\", output.getvalue().strip())\n\t            self.assertNotIn(\"User\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.all()\"))\n\t            self.assertIn(\"User\", output.getvalue().strip())\n", "            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.all()\"))\n\t            self.assertIn(\"State\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.all()\"))\n\t            self.assertIn(\"City\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"Amenity.all()\"))\n\t            self.assertIn(\"Amenity\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.all()\"))\n\t            self.assertIn(\"Place\", output.getvalue().strip())\n\t            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.all()\"))\n\t            self.assertIn(\"Review\", output.getvalue().strip())\n", "            self.assertNotIn(\"BaseModel\", output.getvalue().strip())\n\tclass TestHBNBCommand_update(unittest.TestCase):\n\t    \"\"\"Unittests for testing update from the HBNB command interpreter.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t        FileStorage.__objects = {}\n", "    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n", "    def test_update_missing_class(self):\n\t        correct = \"** class name missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\".update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_invalid_class(self):\n\t        correct = \"** class doesn't exist **\"\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update MyModel\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_id_space_notation(self):\n\t        correct = \"** instance id missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update BaseModel\"))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update User\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update State\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update City\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update Amenity\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update Place\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update Review\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_id_dot_notation(self):\n", "        correct = \"** instance id missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Amenity.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"Review.update()\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_invalid_id_space_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update BaseModel 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update User 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update State 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update City 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update Amenity 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"update Place 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"update Review 1\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_invalid_id_dot_notation(self):\n\t        correct = \"** no instance found **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"Amenity.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.update(1)\"))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_attr_name_space_notation(self):\n\t        correct = \"** attribute name missing **\"\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"update BaseModel {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testId = output.getvalue().strip()\n", "            testCmd = \"update User {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"update State {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"update City {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n", "            testId = output.getvalue().strip()\n\t            testCmd = \"update Amenity {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"update Place {}\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_attr_name_dot_notation(self):\n\t        correct = \"** attribute name missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"BaseModel.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"User.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n", "            testId = output.getvalue().strip()\n\t            testCmd = \"State.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"City.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"Amenity.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t            testId = output.getvalue().strip()\n\t            testCmd = \"Place.update({})\".format(testId)\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_attr_value_space_notation(self):\n\t        correct = \"** value missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create BaseModel\")\n", "            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update BaseModel {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create User\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update User {} attr_name\".format(testId)\n", "            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update State {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create City\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update City {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            testCmd = \"update Amenity {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update Place {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Review\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"update Review {} attr_name\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_missing_attr_value_dot_notation(self):\n\t        correct = \"** value missing **\"\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create BaseModel\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"BaseModel.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create User\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            testCmd = \"User.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"State.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create City\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"City.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n\t            testId = output.getvalue().strip()\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"Amenity.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"Place.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n", "            self.assertEqual(correct, output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Review\")\n\t            testId = output.getvalue().strip()\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            testCmd = \"Review.update({}, attr_name)\".format(testId)\n\t            self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t            self.assertEqual(correct, output.getvalue().strip())\n\t    def test_update_valid_string_attr_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create BaseModel\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update BaseModel {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"BaseModel.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create User\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update User {} attr_name 'attr_value'\".format(testId)\n", "        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"User.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update State {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"State.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create City\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update City {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"City.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n", "        testCmd = \"update Place {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Amenity {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Amenity.{}\".format(testId)].__dict__\n", "        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Review\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Review {} attr_name 'attr_value'\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Review.{}\".format(testId)].__dict__\n\t        self.assertTrue(\"attr_value\", test_dict[\"attr_name\"])\n\t    def test_update_valid_string_attr_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create BaseModel\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"BaseModel.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"BaseModel.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create User\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"User.update({}, attr_name, 'attr_value')\".format(tId)\n", "        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"User.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"State.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"State.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create City\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"City.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"City.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            tId = output.getvalue().strip()\n", "        testCmd = \"Place.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Place.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"Amenity.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Amenity.{}\".format(tId)].__dict__\n", "        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Review\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"Review.update({}, attr_name, 'attr_value')\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Review.{}\".format(tId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t    def test_update_valid_int_attr_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Place {} max_guest 98\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(98, test_dict[\"max_guest\"])\n\t    def test_update_valid_int_attr_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            tId = output.getvalue().strip()\n", "        testCmd = \"Place.update({}, max_guest, 98)\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Place.{}\".format(tId)].__dict__\n\t        self.assertEqual(98, test_dict[\"max_guest\"])\n\t    def test_update_valid_float_attr_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Place {} latitude 7.2\".format(testId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n", "        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(7.2, test_dict[\"latitude\"])\n\t    def test_update_valid_float_attr_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            tId = output.getvalue().strip()\n\t        testCmd = \"Place.update({}, latitude, 7.2)\".format(tId)\n\t        self.assertFalse(HBNBCommand().onecmd(testCmd))\n\t        test_dict = storage.all()[\"Place.{}\".format(tId)].__dict__\n\t        self.assertEqual(7.2, test_dict[\"latitude\"])\n", "    def test_update_valid_dictionary_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create BaseModel\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update BaseModel {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"BaseModel.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create User\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update User {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"User.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            testId = output.getvalue().strip()\n", "        testCmd = \"update State {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"State.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create City\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update City {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n", "        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"City.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Place {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n", "        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Amenity {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Amenity.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            HBNBCommand().onecmd(\"create Review\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Review {} \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'}\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Review.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t    def test_update_valid_dictionary_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create BaseModel\")\n", "            testId = output.getvalue().strip()\n\t        testCmd = \"BaseModel.update({}\".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"BaseModel.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create User\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"User.update({}, \".format(testId)\n", "        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"User.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create State\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"State.update({}, \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n", "        test_dict = storage.all()[\"State.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create City\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"City.update({}, \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"City.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"Place.update({}, \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Amenity\")\n", "            testId = output.getvalue().strip()\n\t        testCmd = \"Amenity.update({}, \".format(testId)\n\t        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Amenity.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Review\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"Review.update({}, \".format(testId)\n", "        testCmd += \"{'attr_name': 'attr_value'})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Review.{}\".format(testId)].__dict__\n\t        self.assertEqual(\"attr_value\", test_dict[\"attr_name\"])\n\t    def test_update_valid_dictionary_with_int_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Place {} \".format(testId)\n\t        testCmd += \"{'max_guest': 98})\"\n", "        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(98, test_dict[\"max_guest\"])\n\t    def test_update_valid_dictionary_with_int_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"Place.update({}, \".format(testId)\n\t        testCmd += \"{'max_guest': 98})\"\n\t        HBNBCommand().onecmd(testCmd)\n", "        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(98, test_dict[\"max_guest\"])\n\t    def test_update_valid_dictionary_with_float_space_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"update Place {} \".format(testId)\n\t        testCmd += \"{'latitude': 9.8})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n", "        self.assertEqual(9.8, test_dict[\"latitude\"])\n\t    def test_update_valid_dictionary_with_float_dot_notation(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            HBNBCommand().onecmd(\"create Place\")\n\t            testId = output.getvalue().strip()\n\t        testCmd = \"Place.update({}, \".format(testId)\n\t        testCmd += \"{'latitude': 9.8})\"\n\t        HBNBCommand().onecmd(testCmd)\n\t        test_dict = storage.all()[\"Place.{}\".format(testId)].__dict__\n\t        self.assertEqual(9.8, test_dict[\"latitude\"])\n", "class TestHBNBCommand_count(unittest.TestCase):\n\t    \"\"\"Unittests for testing count method of HBNB comand interpreter.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t        FileStorage._FileStorage__objects = {}\n\t    @classmethod\n", "    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_count_invalid_class(self):\n", "        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"MyModel.count()\"))\n\t            self.assertEqual(\"0\", output.getvalue().strip())\n\t    def test_count_object(self):\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create BaseModel\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"BaseModel.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create User\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"User.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create State\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"State.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create Place\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Place.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create City\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"City.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n", "            self.assertFalse(HBNBCommand().onecmd(\"create Amenity\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Amenity.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"create Review\"))\n\t        with patch(\"sys.stdout\", new=StringIO()) as output:\n\t            self.assertFalse(HBNBCommand().onecmd(\"Review.count()\"))\n\t            self.assertEqual(\"1\", output.getvalue().strip())\n\tif __name__ == \"__main__\":\n", "    unittest.main()\n"]}
{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "tests/test_models/test_user.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/user.py.\n\tUnittest classes:\n\t    TestUser_instantiation\n\t    TestUser_save\n\t    TestUser_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.user import User\n\tclass TestUser_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the User class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(User, type(User()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(User(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(User().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(User().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(User().updated_at))\n\t    def test_email_is_public_str(self):\n\t        self.assertEqual(str, type(User.email))\n\t    def test_password_is_public_str(self):\n\t        self.assertEqual(str, type(User.password))\n\t    def test_first_name_is_public_str(self):\n", "        self.assertEqual(str, type(User.first_name))\n\t    def test_last_name_is_public_str(self):\n\t        self.assertEqual(str, type(User.last_name))\n\t    def test_two_users_unique_ids(self):\n\t        us1 = User()\n\t        us2 = User()\n\t        self.assertNotEqual(us1.id, us2.id)\n\t    def test_two_users_different_created_at(self):\n\t        us1 = User()\n\t        sleep(0.05)\n", "        us2 = User()\n\t        self.assertLess(us1.created_at, us2.created_at)\n\t    def test_two_users_different_updated_at(self):\n\t        us1 = User()\n\t        sleep(0.05)\n\t        us2 = User()\n\t        self.assertLess(us1.updated_at, us2.updated_at)\n\t    def test_str_representation(self):\n\t        dt = datetime.today()\n\t        dt_repr = repr(dt)\n", "        us = User()\n\t        us.id = \"123456\"\n\t        us.created_at = us.updated_at = dt\n\t        usstr = us.__str__()\n\t        self.assertIn(\"[User] (123456)\", usstr)\n\t        self.assertIn(\"'id': '123456'\", usstr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, usstr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, usstr)\n\t    def test_args_unused(self):\n\t        us = User(None)\n", "        self.assertNotIn(None, us.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n\t        dt_iso = dt.isoformat()\n\t        us = User(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(us.id, \"345\")\n\t        self.assertEqual(us.created_at, dt)\n\t        self.assertEqual(us.updated_at, dt)\n\t    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n", "            User(id=None, created_at=None, updated_at=None)\n\tclass TestUser_save(unittest.TestCase):\n\t    \"\"\"Unittests for testing save method of the  class.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    def tearDown(self):\n", "        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        us = User()\n", "        sleep(0.05)\n\t        first_updated_at = us.updated_at\n\t        us.save()\n\t        self.assertLess(first_updated_at, us.updated_at)\n\t    def test_two_saves(self):\n\t        us = User()\n\t        sleep(0.05)\n\t        first_updated_at = us.updated_at\n\t        us.save()\n\t        second_updated_at = us.updated_at\n", "        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        us.save()\n\t        self.assertLess(second_updated_at, us.updated_at)\n\t    def test_save_with_arg(self):\n\t        us = User()\n\t        with self.assertRaises(TypeError):\n\t            us.save(None)\n\t    def test_save_updates_file(self):\n\t        us = User()\n", "        us.save()\n\t        usid = \"User.\" + us.id\n\t        with open(\"file.json\", \"r\") as f:\n\t            self.assertIn(usid, f.read())\n\tclass TestUser_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the User class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(User().to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n\t        us = User()\n", "        self.assertIn(\"id\", us.to_dict())\n\t        self.assertIn(\"created_at\", us.to_dict())\n\t        self.assertIn(\"updated_at\", us.to_dict())\n\t        self.assertIn(\"__class__\", us.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        us = User()\n\t        us.middle_name = \"Holberton\"\n\t        us.my_number = 98\n\t        self.assertEqual(\"Holberton\", us.middle_name)\n\t        self.assertIn(\"my_number\", us.to_dict())\n", "    def test_to_dict_datetime_attributes_are_strs(self):\n\t        us = User()\n\t        us_dict = us.to_dict()\n\t        self.assertEqual(str, type(us_dict[\"id\"]))\n\t        self.assertEqual(str, type(us_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(us_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        us = User()\n\t        us.id = \"123456\"\n", "        us.created_at = us.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n\t            '__class__': 'User',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(us.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        us = User()\n", "        self.assertNotEqual(us.to_dict(), us.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        us = User()\n\t        with self.assertRaises(TypeError):\n\t            us.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/.#test_review.py", "chunked_list": ["root@dd09d64a3073.28907"]}
{"filename": "tests/test_models/test_amenity.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/amenity.py.\n\tUnittest classes:\n\t    TestAmenity_instantiation\n\t    TestAmenity_save\n\t    TestAmenity_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.amenity import Amenity\n\tclass TestAmenity_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the Amenity class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(Amenity, type(Amenity()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(Amenity(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(Amenity().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Amenity().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Amenity().updated_at))\n\t    def test_name_is_public_class_attribute(self):\n\t        am = Amenity()\n\t        self.assertEqual(str, type(Amenity.name))\n\t        self.assertIn(\"name\", dir(Amenity()))\n\t        self.assertNotIn(\"name\", am.__dict__)\n", "    def test_two_amenities_unique_ids(self):\n\t        am1 = Amenity()\n\t        am2 = Amenity()\n\t        self.assertNotEqual(am1.id, am2.id)\n\t    def test_two_amenities_different_created_at(self):\n\t        am1 = Amenity()\n\t        sleep(0.05)\n\t        am2 = Amenity()\n\t        self.assertLess(am1.created_at, am2.created_at)\n\t    def test_two_amenities_different_updated_at(self):\n", "        am1 = Amenity()\n\t        sleep(0.05)\n\t        am2 = Amenity()\n\t        self.assertLess(am1.updated_at, am2.updated_at)\n\t    def test_str_representation(self):\n\t        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        am = Amenity()\n\t        am.id = \"123456\"\n\t        am.created_at = am.updated_at = dt\n", "        amstr = am.__str__()\n\t        self.assertIn(\"[Amenity] (123456)\", amstr)\n\t        self.assertIn(\"'id': '123456'\", amstr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, amstr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, amstr)\n\t    def test_args_unused(self):\n\t        am = Amenity(None)\n\t        self.assertNotIn(None, am.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        \"\"\"instantiation with kwargs test method\"\"\"\n", "        dt = datetime.today()\n\t        dt_iso = dt.isoformat()\n\t        am = Amenity(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(am.id, \"345\")\n\t        self.assertEqual(am.created_at, dt)\n\t        self.assertEqual(am.updated_at, dt)\n\t    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            Amenity(id=None, created_at=None, updated_at=None)\n\tclass TestAmenity_save(unittest.TestCase):\n", "    \"\"\"Unittests for testing save method of the Amenity class.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n", "        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        am = Amenity()\n\t        sleep(0.05)\n\t        first_updated_at = am.updated_at\n", "        am.save()\n\t        self.assertLess(first_updated_at, am.updated_at)\n\t    def test_two_saves(self):\n\t        am = Amenity()\n\t        sleep(0.05)\n\t        first_updated_at = am.updated_at\n\t        am.save()\n\t        second_updated_at = am.updated_at\n\t        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n", "        am.save()\n\t        self.assertLess(second_updated_at, am.updated_at)\n\t    def test_save_with_arg(self):\n\t        am = Amenity()\n\t        with self.assertRaises(TypeError):\n\t            am.save(None)\n\t    def test_save_updates_file(self):\n\t        am = Amenity()\n\t        am.save()\n\t        amid = \"Amenity.\" + am.id\n", "        with open(\"file.json\", \"r\") as f:\n\t            self.assertIn(amid, f.read())\n\tclass TestAmenity_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the Amenity class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(Amenity().to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n\t        am = Amenity()\n\t        self.assertIn(\"id\", am.to_dict())\n\t        self.assertIn(\"created_at\", am.to_dict())\n", "        self.assertIn(\"updated_at\", am.to_dict())\n\t        self.assertIn(\"__class__\", am.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        am = Amenity()\n\t        am.middle_name = \"Holberton\"\n\t        am.my_number = 98\n\t        self.assertEqual(\"Holberton\", am.middle_name)\n\t        self.assertIn(\"my_number\", am.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        am = Amenity()\n", "        am_dict = am.to_dict()\n\t        self.assertEqual(str, type(am_dict[\"id\"]))\n\t        self.assertEqual(str, type(am_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(am_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        am = Amenity()\n\t        am.id = \"123456\"\n\t        am.created_at = am.updated_at = dt\n\t        tdict = {\n", "            'id': '123456',\n\t            '__class__': 'Amenity',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(am.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        am = Amenity()\n\t        self.assertNotEqual(am.to_dict(), am.__dict__)\n\t    def test_to_dict_with_arg(self):\n", "        am = Amenity()\n\t        with self.assertRaises(TypeError):\n\t            am.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/test_base_model.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/base_model.py.\n\tUnittest classes:\n\t    TestBaseModel_instantiation\n\t    TestBaseModel_save\n\t    TestBaseModel_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.base_model import BaseModel\n\tclass TestBaseModel_instantiation(unittest.TestCase):\n\t    \"\"\"Unit tests for testing instantiation of the BaseModel class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(BaseModel, type(BaseModel()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(BaseModel(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(BaseModel().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(BaseModel().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(BaseModel().updated_at))\n\t    def test_two_models_unique_ids(self):\n\t        bm1 = BaseModel()\n\t        bm2 = BaseModel()\n\t        self.assertNotEqual(bm1.id, bm2.id)\n\t    def test_two_models_different_created_at(self):\n", "        bm1 = BaseModel()\n\t        sleep(0.05)\n\t        bm2 = BaseModel()\n\t        self.assertLess(bm1.created_at, bm2.created_at)\n\t    def test_two_models_different_updated_at(self):\n\t        bm1 = BaseModel()\n\t        sleep(0.05)\n\t        bm2 = BaseModel()\n\t        self.assertLess(bm1.updated_at, bm2.updated_at)\n\t    def test_str_representation(self):\n", "        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        bm = BaseModel()\n\t        bm.id = \"123456\"\n\t        bm.created_at = bm.updated_at = dt\n\t        bmstr = bm.__str__()\n\t        self.assertIn(\"[BaseModel] (123456)\", bmstr)\n\t        self.assertIn(\"'id': '123456'\", bmstr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, bmstr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, bmstr)\n", "    def test_args_unused(self):\n\t        bm = BaseModel(None)\n\t        self.assertNotIn(None, bm.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n\t        dt_iso = dt.isoformat()\n\t        bm = BaseModel(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(bm.id, \"345\")\n\t        self.assertEqual(bm.created_at, dt)\n\t        self.assertEqual(bm.updated_at, dt)\n", "    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            BaseModel(id=None, created_at=None, updated_at=None)\n\t    def test_instantiation_with_args_and_kwargs(self):\n\t        dt = datetime.today()\n\t        dt_iso = dt.isoformat()\n\t        bm = BaseModel(\"12\", id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(bm.id, \"345\")\n\t        self.assertEqual(bm.created_at, dt)\n\t        self.assertEqual(bm.updated_at, dt)\n", "class TestBaseModel_save(unittest.TestCase):\n\t    \"\"\"Unit tests for testing save method of the BaseModel class.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    @classmethod\n\t    def tearDown(self):\n", "        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        bm = BaseModel()\n", "        sleep(0.05)\n\t        first_updated_at = bm.updated_at\n\t        bm.save()\n\t        self.assertLess(first_updated_at, bm.updated_at)\n\t    def test_two_saves(self):\n\t        bm = BaseModel()\n\t        sleep(0.05)\n\t        first_updated_at = bm.updated_at\n\t        bm.save()\n\t        second_updated_at = bm.updated_at\n", "        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        bm.save()\n\t        self.assertLess(second_updated_at, bm.updated_at)\n\t    def test_save_with_arg(self):\n\t        bm = BaseModel()\n\t        with self.assertRaises(TypeError):\n\t            bm.save(None)\n\t    def test_save_updates_file(self):\n\t        bm = BaseModel()\n", "        bm.save()\n\t        bmid = \"BaseModel.\" + bm.id\n\t        with open(\"file.json\", \"r\") as f:\n\t            self.assertIn(bmid, f.read())\n\tclass TestBaseModel_to_dict(unittest.TestCase):\n\t    \"\"\"Unit tests for testing to_dict method of the BaseModel class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        bm = BaseModel()\n\t        self.assertTrue(dict, type(bm.to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n", "        bm = BaseModel()\n\t        self.assertIn(\"id\", bm.to_dict())\n\t        self.assertIn(\"created_at\", bm.to_dict())\n\t        self.assertIn(\"updated_at\", bm.to_dict())\n\t        self.assertIn(\"__class__\", bm.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        bm = BaseModel()\n\t        bm.name = \"Holberton\"\n\t        bm.my_number = 98\n\t        self.assertIn(\"name\", bm.to_dict())\n", "        self.assertIn(\"my_number\", bm.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        bm = BaseModel()\n\t        bm_dict = bm.to_dict()\n\t        self.assertEqual(str, type(bm_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(bm_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        bm = BaseModel()\n\t        bm.id = \"123456\"\n", "        bm.created_at = bm.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n\t            '__class__': 'BaseModel',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat()\n\t        }\n\t        self.assertDictEqual(bm.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        bm = BaseModel()\n", "        self.assertNotEqual(bm.to_dict(), bm.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        bm = BaseModel()\n\t        with self.assertRaises(TypeError):\n\t            bm.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/__init__.py", "chunked_list": []}
{"filename": "tests/test_models/test_place.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/place.py.\n\tUnittest classes:\n\t    TestPlace_instantiation\n\t    TestPlace_save\n\t    TestPlace_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.place import Place\n\tclass TestPlace_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the Place class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(Place, type(Place()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(Place(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(Place().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Place().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Place().updated_at))\n\t    def test_city_id_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(str, type(Place.city_id))\n\t        self.assertIn(\"city_id\", dir(pl))\n\t        self.assertNotIn(\"city_id\", pl.__dict__)\n", "    def test_user_id_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(str, type(Place.user_id))\n\t        self.assertIn(\"user_id\", dir(pl))\n\t        self.assertNotIn(\"user_id\", pl.__dict__)\n\t    def test_name_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(str, type(Place.name))\n\t        self.assertIn(\"name\", dir(pl))\n\t        self.assertNotIn(\"name\", pl.__dict__)\n", "    def test_description_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(str, type(Place.description))\n\t        self.assertIn(\"description\", dir(pl))\n\t        self.assertNotIn(\"desctiption\", pl.__dict__)\n\t    def test_number_rooms_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(int, type(Place.number_rooms))\n\t        self.assertIn(\"number_rooms\", dir(pl))\n\t        self.assertNotIn(\"number_rooms\", pl.__dict__)\n", "    def test_number_bathrooms_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(int, type(Place.number_bathrooms))\n\t        self.assertIn(\"number_bathrooms\", dir(pl))\n\t        self.assertNotIn(\"number_bathrooms\", pl.__dict__)\n\t    def test_max_guest_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(int, type(Place.max_guest))\n\t        self.assertIn(\"max_guest\", dir(pl))\n\t        self.assertNotIn(\"max_guest\", pl.__dict__)\n", "    def test_price_by_night_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(int, type(Place.price_by_night))\n\t        self.assertIn(\"price_by_night\", dir(pl))\n\t        self.assertNotIn(\"price_by_night\", pl.__dict__)\n\t    def test_latitude_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(float, type(Place.latitude))\n\t        self.assertIn(\"latitude\", dir(pl))\n\t        self.assertNotIn(\"latitude\", pl.__dict__)\n", "    def test_longitude_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(float, type(Place.longitude))\n\t        self.assertIn(\"longitude\", dir(pl))\n\t        self.assertNotIn(\"longitude\", pl.__dict__)\n\t    def test_amenity_ids_is_public_class_attribute(self):\n\t        pl = Place()\n\t        self.assertEqual(list, type(Place.amenity_ids))\n\t        self.assertIn(\"amenity_ids\", dir(pl))\n\t        self.assertNotIn(\"amenity_ids\", pl.__dict__)\n", "    def test_two_places_unique_ids(self):\n\t        pl1 = Place()\n\t        pl2 = Place()\n\t        self.assertNotEqual(pl1.id, pl2.id)\n\t    def test_two_places_different_created_at(self):\n\t        pl1 = Place()\n\t        sleep(0.05)\n\t        pl2 = Place()\n\t        self.assertLess(pl1.created_at, pl2.created_at)\n\t    def test_two_places_different_updated_at(self):\n", "        pl1 = Place()\n\t        sleep(0.05)\n\t        pl2 = Place()\n\t        self.assertLess(pl1.updated_at, pl2.updated_at)\n\t    def test_str_representation(self):\n\t        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        pl = Place()\n\t        pl.id = \"123456\"\n\t        pl.created_at = pl.updated_at = dt\n", "        plstr = pl.__str__()\n\t        self.assertIn(\"[Place] (123456)\", plstr)\n\t        self.assertIn(\"'id': '123456'\", plstr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, plstr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, plstr)\n\t    def test_args_unused(self):\n\t        pl = Place(None)\n\t        self.assertNotIn(None, pl.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n", "        dt_iso = dt.isoformat()\n\t        pl = Place(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(pl.id, \"345\")\n\t        self.assertEqual(pl.created_at, dt)\n\t        self.assertEqual(pl.updated_at, dt)\n\t    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            Place(id=None, created_at=None, updated_at=None)\n\tclass TestPlace_save(unittest.TestCase):\n\t    \"\"\"Unittests for testing save method of the Place class.\"\"\"\n", "    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n", "            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        pl = Place()\n\t        sleep(0.05)\n\t        first_updated_at = pl.updated_at\n\t        pl.save()\n", "        self.assertLess(first_updated_at, pl.updated_at)\n\t    def test_two_saves(self):\n\t        pl = Place()\n\t        sleep(0.05)\n\t        first_updated_at = pl.updated_at\n\t        pl.save()\n\t        second_updated_at = pl.updated_at\n\t        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        pl.save()\n", "        self.assertLess(second_updated_at, pl.updated_at)\n\t    def test_save_with_arg(self):\n\t        pl = Place()\n\t        with self.assertRaises(TypeError):\n\t            pl.save(None)\n\t    def test_save_updates_file(self):\n\t        pl = Place()\n\t        pl.save()\n\t        plid = \"Place.\" + pl.id\n\t        with open(\"file.json\", \"r\") as f:\n", "            self.assertIn(plid, f.read())\n\tclass TestPlace_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the Place class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(Place().to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n\t        pl = Place()\n\t        self.assertIn(\"id\", pl.to_dict())\n\t        self.assertIn(\"created_at\", pl.to_dict())\n\t        self.assertIn(\"updated_at\", pl.to_dict())\n", "        self.assertIn(\"__class__\", pl.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        pl = Place()\n\t        pl.middle_name = \"Holberton\"\n\t        pl.my_number = 98\n\t        self.assertEqual(\"Holberton\", pl.middle_name)\n\t        self.assertIn(\"my_number\", pl.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        pl = Place()\n\t        pl_dict = pl.to_dict()\n", "        self.assertEqual(str, type(pl_dict[\"id\"]))\n\t        self.assertEqual(str, type(pl_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(pl_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        pl = Place()\n\t        pl.id = \"123456\"\n\t        pl.created_at = pl.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n", "            '__class__': 'Place',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(pl.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        pl = Place()\n\t        self.assertNotEqual(pl.to_dict(), pl.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        pl = Place()\n", "        with self.assertRaises(TypeError):\n\t            pl.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/test_review.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/review.py.\n\tUnittest classes:\n\t    TestReview_instantiation\n\t    TestReview_save\n\t    TestReview_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.review import Review\n\tclass TestReview_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the Review class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(Review, type(Review()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(Review(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(Review().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Review().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(Review().updated_at))\n\t    def test_place_id_is_public_class_attribute(self):\n\t        rv = Review()\n\t        self.assertEqual(str, type(Review.place_id))\n\t        self.assertIn(\"place_id\", dir(rv))\n\t        self.assertNotIn(\"place_id\", rv.__dict__)\n", "    def test_user_id_is_public_class_attribute(self):\n\t        rv = Review()\n\t        self.assertEqual(str, type(Review.user_id))\n\t        self.assertIn(\"user_id\", dir(rv))\n\t        self.assertNotIn(\"user_id\", rv.__dict__)\n\t    def test_text_is_public_class_attribute(self):\n\t        rv = Review()\n\t        self.assertEqual(str, type(Review.text))\n\t        self.assertIn(\"text\", dir(rv))\n\t        self.assertNotIn(\"text\", rv.__dict__)\n", "    def test_two_reviews_unique_ids(self):\n\t        rv1 = Review()\n\t        rv2 = Review()\n\t        self.assertNotEqual(rv1.id, rv2.id)\n\t    def test_two_reviews_different_created_at(self):\n\t        rv1 = Review()\n\t        sleep(0.05)\n\t        rv2 = Review()\n\t        self.assertLess(rv1.created_at, rv2.created_at)\n\t    def test_two_reviews_different_updated_at(self):\n", "        rv1 = Review()\n\t        sleep(0.05)\n\t        rv2 = Review()\n\t        self.assertLess(rv1.updated_at, rv2.updated_at)\n\t    def test_str_representation(self):\n\t        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        rv = Review()\n\t        rv.id = \"123456\"\n\t        rv.created_at = rv.updated_at = dt\n", "        rvstr = rv.__str__()\n\t        self.assertIn(\"[Review] (123456)\", rvstr)\n\t        self.assertIn(\"'id': '123456'\", rvstr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, rvstr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, rvstr)\n\t    def test_args_unused(self):\n\t        rv = Review(None)\n\t        self.assertNotIn(None, rv.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n", "        dt_iso = dt.isoformat()\n\t        rv = Review(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(rv.id, \"345\")\n\t        self.assertEqual(rv.created_at, dt)\n\t        self.assertEqual(rv.updated_at, dt)\n\t    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            Review(id=None, created_at=None, updated_at=None)\n\tclass TestReview_save(unittest.TestCase):\n\t    \"\"\"Unittests for testing save method of the Review class.\"\"\"\n", "    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n", "            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        rv = Review()\n\t        sleep(0.05)\n\t        first_updated_at = rv.updated_at\n\t        rv.save()\n", "        self.assertLess(first_updated_at, rv.updated_at)\n\t    def test_two_saves(self):\n\t        rv = Review()\n\t        sleep(0.05)\n\t        first_updated_at = rv.updated_at\n\t        rv.save()\n\t        second_updated_at = rv.updated_at\n\t        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        rv.save()\n", "        self.assertLess(second_updated_at, rv.updated_at)\n\t    def test_save_with_arg(self):\n\t        rv = Review()\n\t        with self.assertRaises(TypeError):\n\t            rv.save(None)\n\t    def test_save_updates_file(self):\n\t        rv = Review()\n\t        rv.save()\n\t        rvid = \"Review.\" + rv.id\n\t        with open(\"file.json\", \"r\") as f:\n", "            self.assertIn(rvid, f.read())\n\tclass TestReview_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the Review class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(Review().to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n\t        rv = Review()\n\t        self.assertIn(\"id\", rv.to_dict())\n\t        self.assertIn(\"created_at\", rv.to_dict())\n\t        self.assertIn(\"updated_at\", rv.to_dict())\n", "        self.assertIn(\"__class__\", rv.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        rv = Review()\n\t        rv.middle_name = \"Holberton\"\n\t        rv.my_number = 98\n\t        self.assertEqual(\"Holberton\", rv.middle_name)\n\t        self.assertIn(\"my_number\", rv.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        rv = Review()\n\t        rv_dict = rv.to_dict()\n", "        self.assertEqual(str, type(rv_dict[\"id\"]))\n\t        self.assertEqual(str, type(rv_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(rv_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        rv = Review()\n\t        rv.id = \"123456\"\n\t        rv.created_at = rv.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n", "            '__class__': 'Review',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(rv.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        rv = Review()\n\t        self.assertNotEqual(rv.to_dict(), rv.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        rv = Review()\n", "        with self.assertRaises(TypeError):\n\t            rv.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/test_city.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/city.py.\n\tUnittest classes:\n\t    TestCity_instantiation\n\t    TestCity_save\n\t    TestCity_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.city import City\n\tclass TestCity_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the City class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(City, type(City()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(City(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(City().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(City().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(City().updated_at))\n\t    def test_state_id_is_public_class_attribute(self):\n\t        cy = City()\n\t        self.assertEqual(str, type(City.state_id))\n\t        self.assertIn(\"state_id\", dir(cy))\n\t        self.assertNotIn(\"state_id\", cy.__dict__)\n", "    def test_name_is_public_class_attribute(self):\n\t        cy = City()\n\t        self.assertEqual(str, type(City.name))\n\t        self.assertIn(\"name\", dir(cy))\n\t        self.assertNotIn(\"name\", cy.__dict__)\n\t    def test_two_cities_unique_ids(self):\n\t        cy1 = City()\n\t        cy2 = City()\n\t        self.assertNotEqual(cy1.id, cy2.id)\n\t    def test_two_cities_different_created_at(self):\n", "        cy1 = City()\n\t        sleep(0.05)\n\t        cy2 = City()\n\t        self.assertLess(cy1.created_at, cy2.created_at)\n\t    def test_two_cities_different_updated_at(self):\n\t        cy1 = City()\n\t        sleep(0.05)\n\t        cy2 = City()\n\t        self.assertLess(cy1.updated_at, cy2.updated_at)\n\t    def test_str_representation(self):\n", "        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        cy = City()\n\t        cy.id = \"123456\"\n\t        cy.created_at = cy.updated_at = dt\n\t        cystr = cy.__str__()\n\t        self.assertIn(\"[City] (123456)\", cystr)\n\t        self.assertIn(\"'id': '123456'\", cystr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, cystr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, cystr)\n", "    def test_args_unused(self):\n\t        cy = City(None)\n\t        self.assertNotIn(None, cy.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n\t        dt_iso = dt.isoformat()\n\t        cy = City(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(cy.id, \"345\")\n\t        self.assertEqual(cy.created_at, dt)\n\t        self.assertEqual(cy.updated_at, dt)\n", "    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            City(id=None, created_at=None, updated_at=None)\n\tclass TestCity_save(unittest.TestCase):\n\t    \"\"\"Unittests for testing save method of the City class.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n", "            pass\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n", "    def test_one_save(self):\n\t        cy = City()\n\t        sleep(0.05)\n\t        first_updated_at = cy.updated_at\n\t        cy.save()\n\t        self.assertLess(first_updated_at, cy.updated_at)\n\t    def test_two_saves(self):\n\t        cy = City()\n\t        sleep(0.05)\n\t        first_updated_at = cy.updated_at\n", "        cy.save()\n\t        second_updated_at = cy.updated_at\n\t        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        cy.save()\n\t        self.assertLess(second_updated_at, cy.updated_at)\n\t    def test_save_with_arg(self):\n\t        cy = City()\n\t        with self.assertRaises(TypeError):\n\t            cy.save(None)\n", "    def test_save_updates_file(self):\n\t        cy = City()\n\t        cy.save()\n\t        cyid = \"City.\" + cy.id\n\t        with open(\"file.json\", \"r\") as f:\n\t            self.assertIn(cyid, f.read())\n\tclass TestCity_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the City class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(City().to_dict()))\n", "    def test_to_dict_contains_correct_keys(self):\n\t        cy = City()\n\t        self.assertIn(\"id\", cy.to_dict())\n\t        self.assertIn(\"created_at\", cy.to_dict())\n\t        self.assertIn(\"updated_at\", cy.to_dict())\n\t        self.assertIn(\"__class__\", cy.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        cy = City()\n\t        cy.middle_name = \"Holberton\"\n\t        cy.my_number = 98\n", "        self.assertEqual(\"Holberton\", cy.middle_name)\n\t        self.assertIn(\"my_number\", cy.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        cy = City()\n\t        cy_dict = cy.to_dict()\n\t        self.assertEqual(str, type(cy_dict[\"id\"]))\n\t        self.assertEqual(str, type(cy_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(cy_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n", "        cy = City()\n\t        cy.id = \"123456\"\n\t        cy.created_at = cy.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n\t            '__class__': 'City',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(cy.to_dict(), tdict)\n", "    def test_contrast_to_dict_dunder_dict(self):\n\t        cy = City()\n\t        self.assertNotEqual(cy.to_dict(), cy.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        cy = City()\n\t        with self.assertRaises(TypeError):\n\t            cy.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/test_state.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/state.py.\n\tUnittest classes:\n\t    TestState_instantiation\n\t    TestState_save\n\t    TestState_to_dict\n\t\"\"\"\n\timport os\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom time import sleep\n\tfrom models.state import State\n\tclass TestState_instantiation(unittest.TestCase):\n\t    \"\"\"Unittests for testing instantiation of the State class.\"\"\"\n\t    def test_no_args_instantiates(self):\n\t        self.assertEqual(State, type(State()))\n\t    def test_new_instance_stored_in_objects(self):\n\t        self.assertIn(State(), models.storage.all().values())\n\t    def test_id_is_public_str(self):\n", "        self.assertEqual(str, type(State().id))\n\t    def test_created_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(State().created_at))\n\t    def test_updated_at_is_public_datetime(self):\n\t        self.assertEqual(datetime, type(State().updated_at))\n\t    def test_name_is_public_class_attribute(self):\n\t        st = State()\n\t        self.assertEqual(str, type(State.name))\n\t        self.assertIn(\"name\", dir(st))\n\t        self.assertNotIn(\"name\", st.__dict__)\n", "    def test_two_states_unique_ids(self):\n\t        st1 = State()\n\t        st2 = State()\n\t        self.assertNotEqual(st1.id, st2.id)\n\t    def test_two_states_different_created_at(self):\n\t        st1 = State()\n\t        sleep(0.05)\n\t        st2 = State()\n\t        self.assertLess(st1.created_at, st2.created_at)\n\t    def test_two_states_different_updated_at(self):\n", "        st1 = State()\n\t        sleep(0.05)\n\t        st2 = State()\n\t        self.assertLess(st1.updated_at, st2.updated_at)\n\t    def test_str_representation(self):\n\t        dt = datetime.today()\n\t        dt_repr = repr(dt)\n\t        st = State()\n\t        st.id = \"123456\"\n\t        st.created_at = st.updated_at = dt\n", "        ststr = st.__str__()\n\t        self.assertIn(\"[State] (123456)\", ststr)\n\t        self.assertIn(\"'id': '123456'\", ststr)\n\t        self.assertIn(\"'created_at': \" + dt_repr, ststr)\n\t        self.assertIn(\"'updated_at': \" + dt_repr, ststr)\n\t    def test_args_unused(self):\n\t        st = State(None)\n\t        self.assertNotIn(None, st.__dict__.values())\n\t    def test_instantiation_with_kwargs(self):\n\t        dt = datetime.today()\n", "        dt_iso = dt.isoformat()\n\t        st = State(id=\"345\", created_at=dt_iso, updated_at=dt_iso)\n\t        self.assertEqual(st.id, \"345\")\n\t        self.assertEqual(st.created_at, dt)\n\t        self.assertEqual(st.updated_at, dt)\n\t    def test_instantiation_with_None_kwargs(self):\n\t        with self.assertRaises(TypeError):\n\t            State(id=None, created_at=None, updated_at=None)\n\tclass TestState_save(unittest.TestCase):\n\t    \"\"\"Unittests for testing save method of the State class.\"\"\"\n", "    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n", "            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n\t    def test_one_save(self):\n\t        st = State()\n\t        sleep(0.05)\n\t        first_updated_at = st.updated_at\n\t        st.save()\n", "        self.assertLess(first_updated_at, st.updated_at)\n\t    def test_two_saves(self):\n\t        st = State()\n\t        sleep(0.05)\n\t        first_updated_at = st.updated_at\n\t        st.save()\n\t        second_updated_at = st.updated_at\n\t        self.assertLess(first_updated_at, second_updated_at)\n\t        sleep(0.05)\n\t        st.save()\n", "        self.assertLess(second_updated_at, st.updated_at)\n\t    def test_save_with_arg(self):\n\t        st = State()\n\t        with self.assertRaises(TypeError):\n\t            st.save(None)\n\t    def test_save_updates_file(self):\n\t        st = State()\n\t        st.save()\n\t        stid = \"State.\" + st.id\n\t        with open(\"file.json\", \"r\") as f:\n", "            self.assertIn(stid, f.read())\n\tclass TestState_to_dict(unittest.TestCase):\n\t    \"\"\"Unittests for testing to_dict method of the State class.\"\"\"\n\t    def test_to_dict_type(self):\n\t        self.assertTrue(dict, type(State().to_dict()))\n\t    def test_to_dict_contains_correct_keys(self):\n\t        st = State()\n\t        self.assertIn(\"id\", st.to_dict())\n\t        self.assertIn(\"created_at\", st.to_dict())\n\t        self.assertIn(\"updated_at\", st.to_dict())\n", "        self.assertIn(\"__class__\", st.to_dict())\n\t    def test_to_dict_contains_added_attributes(self):\n\t        st = State()\n\t        st.middle_name = \"Holberton\"\n\t        st.my_number = 98\n\t        self.assertEqual(\"Holberton\", st.middle_name)\n\t        self.assertIn(\"my_number\", st.to_dict())\n\t    def test_to_dict_datetime_attributes_are_strs(self):\n\t        st = State()\n\t        st_dict = st.to_dict()\n", "        self.assertEqual(str, type(st_dict[\"id\"]))\n\t        self.assertEqual(str, type(st_dict[\"created_at\"]))\n\t        self.assertEqual(str, type(st_dict[\"updated_at\"]))\n\t    def test_to_dict_output(self):\n\t        dt = datetime.today()\n\t        st = State()\n\t        st.id = \"123456\"\n\t        st.created_at = st.updated_at = dt\n\t        tdict = {\n\t            'id': '123456',\n", "            '__class__': 'State',\n\t            'created_at': dt.isoformat(),\n\t            'updated_at': dt.isoformat(),\n\t        }\n\t        self.assertDictEqual(st.to_dict(), tdict)\n\t    def test_contrast_to_dict_dunder_dict(self):\n\t        st = State()\n\t        self.assertNotEqual(st.to_dict(), st.__dict__)\n\t    def test_to_dict_with_arg(self):\n\t        st = State()\n", "        with self.assertRaises(TypeError):\n\t            st.to_dict(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "tests/test_models/test_engine/__init__.py", "chunked_list": []}
{"filename": "tests/test_models/test_engine/test_file_storage.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Defines unittests for models/engine/file_storage.py.\n\tUnittest classes:\n\t    TestFileStorage_instantiation\n\t    TestFileStorage_methods\n\t\"\"\"\n\timport os\n\timport json\n\timport models\n\timport unittest\n", "from datetime import datetime\n\tfrom models.base_model import BaseModel\n\tfrom models.engine.file_storage import FileStorage\n\tfrom models.user import User\n\tfrom models.state import State\n\tfrom models.place import Place\n\tfrom models.city import City\n\tfrom models.amenity import Amenity\n\tfrom models.review import Review\n\tclass TestFileStorage_instantiation(unittest.TestCase):\n", "    \"\"\"Unittests for testing instantiation of the FileStorage class.\"\"\"\n\t    def test_FileStorage_instantiation_no_args(self):\n\t        self.assertEqual(type(FileStorage()), FileStorage)\n\t    def test_FileStorage_instantiation_with_arg(self):\n\t        with self.assertRaises(TypeError):\n\t            FileStorage(None)\n\t    def test_FileStorage_file_path_is_private_str(self):\n\t        self.assertEqual(str, type(FileStorage._FileStorage__file_path))\n\t    def testFileStorage_objects_is_private_dict(self):\n\t        self.assertEqual(dict, type(FileStorage._FileStorage__objects))\n", "    def test_storage_initializes(self):\n\t        self.assertEqual(type(models.storage), FileStorage)\n\tclass TestFileStorage_methods(unittest.TestCase):\n\t    \"\"\"Unittests for testing methods of the FileStorage class.\"\"\"\n\t    @classmethod\n\t    def setUp(self):\n\t        try:\n\t            os.rename(\"file.json\", \"tmp\")\n\t        except IOError:\n\t            pass\n", "    @classmethod\n\t    def tearDown(self):\n\t        try:\n\t            os.remove(\"file.json\")\n\t        except IOError:\n\t            pass\n\t        try:\n\t            os.rename(\"tmp\", \"file.json\")\n\t        except IOError:\n\t            pass\n", "        FileStorage._FileStorage__objects = {}\n\t    def test_all(self):\n\t        self.assertEqual(dict, type(models.storage.all()))\n\t    def test_all_with_arg(self):\n\t        with self.assertRaises(TypeError):\n\t            models.storage.all(None)\n\t    def test_new(self):\n\t        bm = BaseModel()\n\t        us = User()\n\t        st = State()\n", "        pl = Place()\n\t        cy = City()\n\t        am = Amenity()\n\t        rv = Review()\n\t        models.storage.new(bm)\n\t        models.storage.new(us)\n\t        models.storage.new(st)\n\t        models.storage.new(pl)\n\t        models.storage.new(cy)\n\t        models.storage.new(am)\n", "        models.storage.new(rv)\n\t        self.assertIn(\"BaseModel.\" + bm.id, models.storage.all().keys())\n\t        self.assertIn(bm, models.storage.all().values())\n\t        self.assertIn(\"User.\" + us.id, models.storage.all().keys())\n\t        self.assertIn(us, models.storage.all().values())\n\t        self.assertIn(\"State.\" + st.id, models.storage.all().keys())\n\t        self.assertIn(st, models.storage.all().values())\n\t        self.assertIn(\"Place.\" + pl.id, models.storage.all().keys())\n\t        self.assertIn(pl, models.storage.all().values())\n\t        self.assertIn(\"City.\" + cy.id, models.storage.all().keys())\n", "        self.assertIn(cy, models.storage.all().values())\n\t        self.assertIn(\"Amenity.\" + am.id, models.storage.all().keys())\n\t        self.assertIn(am, models.storage.all().values())\n\t        self.assertIn(\"Review.\" + rv.id, models.storage.all().keys())\n\t        self.assertIn(rv, models.storage.all().values())\n\t    def test_new_with_args(self):\n\t        with self.assertRaises(TypeError):\n\t            models.storage.new(BaseModel(), 1)\n\t    def test_new_with_None(self):\n\t        with self.assertRaises(AttributeError):\n", "            models.storage.new(None)\n\t    def test_save(self):\n\t        bm = BaseModel()\n\t        us = User()\n\t        st = State()\n\t        pl = Place()\n\t        cy = City()\n\t        am = Amenity()\n\t        rv = Review()\n\t        models.storage.new(bm)\n", "        models.storage.new(us)\n\t        models.storage.new(st)\n\t        models.storage.new(pl)\n\t        models.storage.new(cy)\n\t        models.storage.new(am)\n\t        models.storage.new(rv)\n\t        models.storage.save()\n\t        save_text = \"\"\n\t        with open(\"file.json\", \"r\") as f:\n\t            save_text = f.read()\n", "            self.assertIn(\"BaseModel.\" + bm.id, save_text)\n\t            self.assertIn(\"User.\" + us.id, save_text)\n\t            self.assertIn(\"State.\" + st.id, save_text)\n\t            self.assertIn(\"Place.\" + pl.id, save_text)\n\t            self.assertIn(\"City.\" + cy.id, save_text)\n\t            self.assertIn(\"Amenity.\" + am.id, save_text)\n\t            self.assertIn(\"Review.\" + rv.id, save_text)\n\t    def test_save_with_arg(self):\n\t        with self.assertRaises(TypeError):\n\t            models.storage.save(None)\n", "    def test_reload(self):\n\t        bm = BaseModel()\n\t        us = User()\n\t        st = State()\n\t        pl = Place()\n\t        cy = City()\n\t        am = Amenity()\n\t        rv = Review()\n\t        models.storage.new(bm)\n\t        models.storage.new(us)\n", "        models.storage.new(st)\n\t        models.storage.new(pl)\n\t        models.storage.new(cy)\n\t        models.storage.new(am)\n\t        models.storage.new(rv)\n\t        models.storage.save()\n\t        models.storage.reload()\n\t        objs = FileStorage._FileStorage__objects\n\t        self.assertIn(\"BaseModel.\" + bm.id, objs)\n\t        self.assertIn(\"User.\" + us.id, objs)\n", "        self.assertIn(\"State.\" + st.id, objs)\n\t        self.assertIn(\"Place.\" + pl.id, objs)\n\t        self.assertIn(\"City.\" + cy.id, objs)\n\t        self.assertIn(\"Amenity.\" + am.id, objs)\n\t        self.assertIn(\"Review.\" + rv.id, objs)\n\t    def test_reload_with_arg(self):\n\t        with self.assertRaises(TypeError):\n\t            models.storage.reload(None)\n\tif __name__ == \"__main__\":\n\t    unittest.main()\n"]}
{"filename": "models/review.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a Review class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass Review(BaseModel):\n\t    \"\"\"This is the class for managing review objects\"\"\"\n\t    place_id = \"\"\n\t    user_id = \"\"\n\t    text = \"\"\n"]}
{"filename": "models/place.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a Place class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass Place(BaseModel):\n\t    \"\"\"This is the class for managing place objects\"\"\"\n\t    city_id = \"\"\n\t    user_id = \"\"\n\t    name = \"\"\n\t    description = \"\"\n\t    number_rooms = 0\n", "    number_bathrooms = 0\n\t    max_guest = 0\n\t    price_by_night = 0\n\t    latitude = 0.0\n\t    longitude = 0.0\n\t    amenity_ids = []\n"]}
{"filename": "models/state.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a User class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass State(BaseModel):\n\t    \"\"\"This is the class for managing state objects\"\"\"\n\t    name = \"\"\n"]}
{"filename": "models/__init__.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This initializes the package\"\"\"\n\tfrom models.engine.file_storage import FileStorage\n\tstorage = FileStorage()\n\tstorage.reload()\n"]}
{"filename": "models/base_model.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This script is the base model\"\"\"\n\timport uuid\n\tfrom datetime import datetime\n\tfrom models import storage\n\tclass BaseModel:\n\t    \"\"\"This is the class from which all other classes will inherit\"\"\"\n\t    def __init__(self, *args, **kwargs):\n\t        \"\"\"This initializes instance attributes\n\t        Args:\n", "            - *args: list of arguments\n\t            - **kwargs: dict of key-values arguments\n\t        \"\"\"\n\t        if kwargs is not None and kwargs != {}:\n\t            for key in kwargs:\n\t                if key == \"created_at\":\n\t                    self.__dict__[\"created_at\"] = datetime.strptime(\n\t                        kwargs[\"created_at\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n\t                elif key == \"updated_at\":\n\t                    self.__dict__[\"updated_at\"] = datetime.strptime(\n", "                        kwargs[\"updated_at\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n\t                else:\n\t                    self.__dict__[key] = kwargs[key]\n\t        else:\n\t            self.id = str(uuid.uuid4())\n\t            self.created_at = datetime.now()\n\t            self.updated_at = datetime.now()\n\t            storage.new(self)\n\t    def __str__(self):\n\t        \"\"\"Returns official string representation\"\"\"\n", "        return \"[{}] ({}) {}\".\\\n\t            format(type(self).__name__, self.id, self.__dict__)\n\t    def save(self):\n\t        \"\"\"updates the public instance attribute updated_at\"\"\"\n\t        self.updated_at = datetime.now()\n\t        storage.save()\n\t    def to_dict(self):\n\t        \"\"\"This returns a dictionary containing all keys/values of __dict__\"\"\"\n\t        my_dict = self.__dict__.copy()\n\t        my_dict[\"__class__\"] = type(self).__name__\n", "        my_dict[\"created_at\"] = my_dict[\"created_at\"].isoformat()\n\t        my_dict[\"updated_at\"] = my_dict[\"updated_at\"].isoformat()\n\t        return my_dict\n"]}
{"filename": "models/city.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a User class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass City(BaseModel):\n\t    \"\"\"This is the class for managing city objects\"\"\"\n\t    state_id = \"\"\n\t    name = \"\"\n"]}
{"filename": "models/user.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a User class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass User(BaseModel):\n\t    \"\"\"This is the class for managing user objects\"\"\"\n\t    email = \"\"\n\t    password = \"\"\n\t    first_name = \"\"\n\t    last_name = \"\"\n"]}
{"filename": "models/amenity.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"This module creates a Amenity class\"\"\"\n\tfrom models.base_model import BaseModel\n\tclass Amenity(BaseModel):\n\t    \"\"\"This is a class for managing amenity objects\"\"\"\n\t    name = \"\"\n"]}
{"filename": "models/engine/__init__.py", "chunked_list": []}
{"filename": "models/engine/file_storage.py", "chunked_list": ["#!/usr/bin/python3\n\t\"\"\"Module for FileStorage class.\"\"\"\n\timport datetime\n\timport json\n\timport os\n\tclass FileStorage:\n\t    \"\"\"This is the class for storing and retrieving data\"\"\"\n\t    __file_path = \"file.json\"\n\t    __objects = {}\n\t    def all(self):\n", "        \"\"\"This returns the dictionary __objects\"\"\"\n\t        return FileStorage.__objects\n\t    def new(self, obj):\n\t        \"\"\"This sets in __objects the obj with key <obj class name>.id\"\"\"\n\t        key = \"{}.{}\".format(type(obj).__name__, obj.id)\n\t        FileStorage.__objects[key] = obj\n\t    def save(self):\n\t        \"\"\"This serializes __objects to the JSON file (path: __file_path)\"\"\"\n\t        with open(FileStorage.__file_path, \"w\", encoding=\"utf-8\") as f:\n\t            d = {k: v.to_dict() for k, v in FileStorage.__objects.items()}\n", "            json.dump(d, f)\n\t    def classes(self):\n\t        \"\"\"This returns a dictionary of valid classes and their references\"\"\"\n\t        from models.base_model import BaseModel\n\t        from models.user import User\n\t        from models.state import State\n\t        from models.city import City\n\t        from models.amenity import Amenity\n\t        from models.place import Place\n\t        from models.review import Review\n", "        classes = {\"BaseModel\": BaseModel,\n\t                   \"User\": User,\n\t                   \"State\": State,\n\t                   \"City\": City,\n\t                   \"Amenity\": Amenity,\n\t                   \"Place\": Place,\n\t                   \"Review\": Review}\n\t        return classes\n\t    def reload(self):\n\t        \"\"\"This reloads the stored objects\"\"\"\n", "        if not os.path.isfile(FileStorage.__file_path):\n\t            return\n\t        with open(FileStorage.__file_path, \"r\", encoding=\"utf-8\") as f:\n\t            obj_dict = json.load(f)\n\t            obj_dict = {k: self.classes()[v[\"__class__\"]](**v)\n\t                        for k, v in obj_dict.items()}\n\t            # TODO: should this overwrite or insert?\n\t            FileStorage.__objects = obj_dict\n\t    def attributes(self):\n\t        \"\"\"This returns the valid attributes and their types for classname\"\"\"\n", "        attributes = {\n\t            \"BaseModel\":\n\t                     {\"id\": str,\n\t                      \"created_at\": datetime.datetime,\n\t                      \"updated_at\": datetime.datetime},\n\t            \"User\":\n\t                     {\"email\": str,\n\t                      \"password\": str,\n\t                      \"first_name\": str,\n\t                      \"last_name\": str},\n", "            \"State\":\n\t                     {\"name\": str},\n\t            \"City\":\n\t                     {\"state_id\": str,\n\t                      \"name\": str},\n\t            \"Amenity\":\n\t                     {\"name\": str},\n\t            \"Place\":\n\t                     {\"city_id\": str,\n\t                      \"user_id\": str,\n", "                      \"name\": str,\n\t                      \"description\": str,\n\t                      \"number_rooms\": int,\n\t                      \"number_bathrooms\": int,\n\t                      \"max_guest\": int,\n\t                      \"price_by_night\": int,\n\t                      \"latitude\": float,\n\t                      \"longitude\": float,\n\t                      \"amenity_ids\": list},\n\t            \"Review\":\n", "            {\"place_id\": str,\n\t                         \"user_id\": str,\n\t                         \"text\": str}\n\t        }\n\t        return attributes\n"]}
