{"filename": "ft_chatglm_lora/tokenization_chatglm.py", "chunked_list": ["\"\"\"Tokenization classes for ChatGLM.\"\"\"\n\tfrom typing import List, Optional, Union\n\timport os\n\tfrom transformers.tokenization_utils import PreTrainedTokenizer\n\tfrom transformers.utils import logging, PaddingStrategy\n\tfrom transformers.tokenization_utils_base import EncodedInput, BatchEncoding\n\tfrom typing import Dict\n\timport sentencepiece as spm\n\timport numpy as np\n\tlogger = logging.get_logger(__name__)\n", "PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES = {\n\t    \"THUDM/chatglm-6b\": 2048,\n\t}\n\tclass TextTokenizer:\n\t    def __init__(self, model_path):\n\t        self.sp = spm.SentencePieceProcessor()\n\t        self.sp.Load(model_path)\n\t        self.num_tokens = self.sp.vocab_size()\n\t    def encode(self, text):\n\t        return self.sp.EncodeAsIds(text)\n", "    def decode(self, ids: List[int]):\n\t        return self.sp.DecodeIds(ids)\n\t    def tokenize(self, text):\n\t        return self.sp.EncodeAsPieces(text)\n\t    def convert_tokens_to_ids(self, tokens):\n\t        return [self.sp.PieceToId(token) for token in tokens]\n\t    def convert_token_to_id(self, token):\n\t        return self.sp.PieceToId(token)\n\t    def convert_id_to_token(self, idx):\n\t        return self.sp.IdToPiece(idx)\n", "    def __len__(self):\n\t        return self.num_tokens\n\tclass SPTokenizer:\n\t    def __init__(\n\t            self,\n\t            vocab_file,\n\t            num_image_tokens=20000,\n\t            max_blank_length=80,\n\t            byte_fallback=True,\n\t    ):\n", "        assert vocab_file is not None\n\t        self.vocab_file = vocab_file\n\t        self.num_image_tokens = num_image_tokens\n\t        self.special_tokens = [\"[MASK]\", \"[gMASK]\", \"[sMASK]\", \"<unused_0>\", \"<sop>\", \"<eop>\", \"<ENC>\", \"<dBLOCK>\"]\n\t        self.max_blank_length = max_blank_length\n\t        self.byte_fallback = byte_fallback\n\t        self.text_tokenizer = TextTokenizer(vocab_file)\n\t    def _get_text_tokenizer(self):\n\t        return self.text_tokenizer\n\t    @staticmethod\n", "    def get_blank_token(length: int):\n\t        assert length >= 2\n\t        return f\"<|blank_{length}|>\"\n\t    @staticmethod\n\t    def get_tab_token():\n\t        return f\"<|tab|>\"\n\t    @property\n\t    def num_text_tokens(self):\n\t        return self.text_tokenizer.num_tokens\n\t    @property\n", "    def num_tokens(self):\n\t        return self.num_image_tokens + self.num_text_tokens\n\t    @staticmethod\n\t    def _encode_whitespaces(text: str, max_len: int = 80):\n\t        text = text.replace(\"\\t\", SPTokenizer.get_tab_token())\n\t        for i in range(max_len, 1, -1):\n\t            text = text.replace(\" \" * i, SPTokenizer.get_blank_token(i))\n\t        return text\n\t    def _preprocess(self, text: str, linebreak=True, whitespaces=True):\n\t        if linebreak:\n", "            text = text.replace(\"\\n\", \"<n>\")\n\t        if whitespaces:\n\t            text = self._encode_whitespaces(text, max_len=self.max_blank_length)\n\t        return text\n\t    def encode(\n\t            self, text: str, linebreak=True, whitespaces=True, add_dummy_prefix=True\n\t    ) -> List[int]:\n\t        \"\"\"\n\t        @param text: Text to encode.\n\t        @param linebreak: Whether to encode newline (\\n) in text.\n", "        @param whitespaces: Whether to encode multiple whitespaces or tab in text, useful for source code encoding.\n\t        @param special_tokens: Whether to encode special token ([MASK], [gMASK], etc.) in text.\n\t        @param add_dummy_prefix: Whether to add dummy blank space in the beginning.\n\t        \"\"\"\n\t        text = self._preprocess(text, linebreak, whitespaces)\n\t        if not add_dummy_prefix:\n\t            text = \"<n>\" + text\n\t        tmp = self._get_text_tokenizer().encode(text)\n\t        tokens = [x + self.num_image_tokens for x in tmp]\n\t        return tokens if add_dummy_prefix else tokens[2:]\n", "    def decode(self, text_ids: List[int]) -> str:\n\t        ids = [int(_id) - self.num_image_tokens for _id in text_ids]\n\t        ids = [_id for _id in ids if _id >= 0]\n\t        text = self._get_text_tokenizer().decode(ids)\n\t        text = text.replace(\"<n>\", \"\\n\")\n\t        text = text.replace(SPTokenizer.get_tab_token(), \"\\t\")\n\t        for i in range(2, self.max_blank_length + 1):\n\t            text = text.replace(self.get_blank_token(i), \" \" * i)\n\t        return text\n\t    def tokenize(\n", "            self, text: str, linebreak=True, whitespaces=True, add_dummy_prefix=True\n\t    ) -> List[str]:\n\t        \"\"\"\n\t        @param text: Text to encode.\n\t        @param linebreak: Whether to encode newline (\\n) in text.\n\t        @param whitespaces: Whether to encode multiple whitespaces or tab in text, useful for source code encoding.\n\t        @param special_tokens: Whether to encode special token ([MASK], [gMASK], etc.) in text.\n\t        @param add_dummy_prefix: Whether to add dummy blank space in the beginning.\n\t        \"\"\"\n\t        text = self._preprocess(text, linebreak, whitespaces)\n", "        if not add_dummy_prefix:\n\t            text = \"<n>\" + text\n\t        tokens = self._get_text_tokenizer().tokenize(text)\n\t        return tokens if add_dummy_prefix else tokens[2:]\n\t    def __getitem__(self, x: Union[int, str]):\n\t        if isinstance(x, int):\n\t            if x < self.num_image_tokens:\n\t                return \"<image_{}>\".format(x)\n\t            else:\n\t                return self.text_tokenizer.convert_id_to_token(x - self.num_image_tokens)\n", "        elif isinstance(x, str):\n\t            if x.startswith(\"<image_\") and x.endswith(\">\") and x[7:-1].isdigit():\n\t                return int(x[7:-1])\n\t            else:\n\t                return self.text_tokenizer.convert_token_to_id(x) + self.num_image_tokens\n\t        else:\n\t            raise ValueError(\"The key should be str or int.\")\n\tclass ChatGLMTokenizer(PreTrainedTokenizer):\n\t    \"\"\"\n\t    Construct a ChatGLM tokenizer. Based on byte-level Byte-Pair-Encoding.\n", "    Args:\n\t        vocab_file (`str`):\n\t            Path to the vocabulary file.\n\t    \"\"\"\n\t    vocab_files_names = {\"vocab_file\": \"ice_text.model\"}\n\t    max_model_input_sizes = PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES\n\t    model_input_names = [\"input_ids\", \"attention_mask\", \"position_ids\"]\n\t    def __init__(\n\t            self,\n\t            vocab_file,\n", "            do_lower_case=False,\n\t            remove_space=False,\n\t            bos_token='<sop>',\n\t            eos_token='<eop>',\n\t            end_token='</s>',\n\t            mask_token='[MASK]',\n\t            gmask_token='[gMASK]',\n\t            padding_side=\"left\",\n\t            pad_token=\"<pad>\",\n\t            unk_token=\"<unk>\",\n", "            num_image_tokens=20000,\n\t            **kwargs\n\t    ) -> None:\n\t        super().__init__(\n\t            do_lower_case=do_lower_case,\n\t            remove_space=remove_space,\n\t            padding_side=padding_side,\n\t            bos_token=bos_token,\n\t            eos_token=eos_token,\n\t            end_token=end_token,\n", "            mask_token=mask_token,\n\t            gmask_token=gmask_token,\n\t            pad_token=pad_token,\n\t            unk_token=unk_token,\n\t            num_image_tokens=num_image_tokens,\n\t            **kwargs\n\t        )\n\t        self.do_lower_case = do_lower_case\n\t        self.remove_space = remove_space\n\t        self.vocab_file = vocab_file\n", "        self.bos_token = bos_token\n\t        self.eos_token = eos_token\n\t        self.end_token = end_token\n\t        self.mask_token = mask_token\n\t        self.gmask_token = gmask_token\n\t        self.sp_tokenizer = SPTokenizer(vocab_file, num_image_tokens=num_image_tokens)\n\t        \"\"\" Initialisation \"\"\"\n\t    @property\n\t    def gmask_token_id(self) -> Optional[int]:\n\t        if self.gmask_token is None:\n", "            return None\n\t        return self.convert_tokens_to_ids(self.gmask_token)\n\t    @property\n\t    def end_token_id(self) -> Optional[int]:\n\t        \"\"\"\n\t        `Optional[int]`: Id of the end of context token in the vocabulary. Returns `None` if the token has not been\n\t        set.\n\t        \"\"\"\n\t        if self.end_token is None:\n\t            return None\n", "        return self.convert_tokens_to_ids(self.end_token)\n\t    @property\n\t    def vocab_size(self):\n\t        \"\"\" Returns vocab size \"\"\"\n\t        return self.sp_tokenizer.num_tokens\n\t    def get_vocab(self):\n\t        \"\"\" Returns vocab as a dict \"\"\"\n\t        vocab = {self._convert_id_to_token(i): i for i in range(self.vocab_size)}\n\t        vocab.update(self.added_tokens_encoder)\n\t        return vocab\n", "    def preprocess_text(self, inputs):\n\t        if self.remove_space:\n\t            outputs = \" \".join(inputs.strip().split())\n\t        else:\n\t            outputs = inputs\n\t        if self.do_lower_case:\n\t            outputs = outputs.lower()\n\t        return outputs\n\t    def _tokenize(self, text, **kwargs):\n\t        \"\"\" Returns a tokenized string. \"\"\"\n", "        text = self.preprocess_text(text)\n\t        seq = self.sp_tokenizer.tokenize(text)\n\t        return seq\n\t    def _decode(\n\t            self,\n\t            token_ids: Union[int, List[int]],\n\t            skip_special_tokens: bool = False,\n\t            clean_up_tokenization_spaces: bool = True,\n\t            **kwargs\n\t    ) -> str:\n", "        if isinstance(token_ids, int):\n\t            token_ids = [token_ids]\n\t        if len(token_ids) == 0:\n\t            return \"\"\n\t        if self.pad_token_id in token_ids:  # remove pad\n\t            token_ids = list(filter((self.pad_token_id).__ne__, token_ids))\n\t        return self.sp_tokenizer.decode(token_ids)\n\t    def _convert_token_to_id(self, token):\n\t        \"\"\" Converts a token (str) in an id using the vocab. \"\"\"\n\t        return self.sp_tokenizer[token]\n", "    def _convert_id_to_token(self, index):\n\t        \"\"\"Converts an index (integer) in a token (str) using the vocab.\"\"\"\n\t        return self.sp_tokenizer[index]\n\t    def save_vocabulary(self, save_directory, filename_prefix=None):\n\t        \"\"\"\n\t        Save the vocabulary and special tokens file to a directory.\n\t        Args:\n\t            save_directory (`str`):\n\t                The directory in which to save the vocabulary.\n\t            filename_prefix (`str`, *optional*):\n", "                An optional prefix to add to the named of the saved files.\n\t        Returns:\n\t            `Tuple(str)`: Paths to the files saved.\n\t        \"\"\"\n\t        if os.path.isdir(save_directory):\n\t            vocab_file = os.path.join(\n\t                save_directory, self.vocab_files_names[\"vocab_file\"]\n\t            )\n\t        else:\n\t            vocab_file = save_directory\n", "        with open(self.vocab_file, 'rb') as fin:\n\t            proto_str = fin.read()\n\t        with open(vocab_file, \"wb\") as writer:\n\t            writer.write(proto_str)\n\t        return (vocab_file,)\n\t    def build_inputs_with_special_tokens(\n\t            self, token_ids_0: List[int], token_ids_1: Optional[List[int]] = None\n\t    ) -> List[int]:\n\t        \"\"\"\n\t        Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and\n", "        adding special tokens. A BERT sequence has the following format:\n\t        - single sequence: `[CLS] X [SEP]`\n\t        - pair of sequences: `[CLS] A [SEP] B [SEP]`\n\t        Args:\n\t            token_ids_0 (`List[int]`):\n\t                List of IDs to which the special tokens will be added.\n\t            token_ids_1 (`List[int]`, *optional*):\n\t                Optional second list of IDs for sequence pairs.\n\t        Returns:\n\t            `List[int]`: List of [input IDs](../glossary#input-ids) with the appropriate special tokens.\n", "        \"\"\"\n\t        gmask_id = self.sp_tokenizer[self.gmask_token]\n\t        eos_id = self.sp_tokenizer[self.eos_token]\n\t        token_ids_0 = token_ids_0 + [gmask_id, self.sp_tokenizer[self.bos_token]]\n\t        if token_ids_1 is not None:\n\t            token_ids_0 = token_ids_0 + token_ids_1 + [eos_id]\n\t        return token_ids_0\n\t    def _pad(\n\t            self,\n\t            encoded_inputs: Union[Dict[str, EncodedInput], BatchEncoding],\n", "            max_length: Optional[int] = None,\n\t            padding_strategy: PaddingStrategy = PaddingStrategy.DO_NOT_PAD,\n\t            pad_to_multiple_of: Optional[int] = None,\n\t            return_attention_mask: Optional[bool] = None,\n\t    ) -> dict:\n\t        \"\"\"\n\t        Pad encoded inputs (on left/right and up to predefined length or max length in the batch)\n\t        Args:\n\t            encoded_inputs:\n\t                Dictionary of tokenized inputs (`List[int]`) or batch of tokenized inputs (`List[List[int]]`).\n", "            max_length: maximum length of the returned list and optionally padding length (see below).\n\t                Will truncate by taking into account the special tokens.\n\t            padding_strategy: PaddingStrategy to use for padding.\n\t                - PaddingStrategy.LONGEST Pad to the longest sequence in the batch\n\t                - PaddingStrategy.MAX_LENGTH: Pad to the max length (default)\n\t                - PaddingStrategy.DO_NOT_PAD: Do not pad\n\t                The tokenizer padding sides are defined in self.padding_side:\n\t                    - 'left': pads on the left of the sequences\n\t                    - 'right': pads on the right of the sequences\n\t            pad_to_multiple_of: (optional) Integer if set will pad the sequence to a multiple of the provided value.\n", "                This is especially useful to enable the use of Tensor Core on NVIDIA hardware with compute capability\n\t                `>= 7.5` (Volta).\n\t            return_attention_mask:\n\t                (optional) Set to False to avoid returning attention mask (default: set to model specifics)\n\t        \"\"\"\n\t        # Load from model defaults\n\t        bos_token_id = self.sp_tokenizer[self.bos_token]\n\t        mask_token_id = self.sp_tokenizer[self.mask_token]\n\t        gmask_token_id = self.sp_tokenizer[self.gmask_token]\n\t        assert self.padding_side == \"left\"\n", "        required_input = encoded_inputs[self.model_input_names[0]]\n\t        seq_length = len(required_input)\n\t        if padding_strategy == PaddingStrategy.LONGEST:\n\t            max_length = len(required_input)\n\t        if max_length is not None and pad_to_multiple_of is not None and (max_length % pad_to_multiple_of != 0):\n\t            max_length = ((max_length // pad_to_multiple_of) + 1) * pad_to_multiple_of\n\t        needs_to_be_padded = padding_strategy != PaddingStrategy.DO_NOT_PAD and len(required_input) != max_length\n\t        # Initialize attention mask if not present.\n\t        if max_length is not None:\n\t            if \"attention_mask\" not in encoded_inputs:\n", "                if bos_token_id in required_input:\n\t                    context_length = required_input.index(bos_token_id)\n\t                else:\n\t                    context_length = seq_length\n\t                attention_mask = np.ones((1, seq_length, seq_length))\n\t                attention_mask = np.tril(attention_mask)\n\t                attention_mask[:, :, :context_length] = 1\n\t                attention_mask = np.bool_(attention_mask < 0.5)\n\t                encoded_inputs[\"attention_mask\"] = attention_mask\n\t            if \"position_ids\" not in encoded_inputs:\n", "                if bos_token_id in required_input:\n\t                    context_length = required_input.index(bos_token_id)\n\t                else:\n\t                    context_length = seq_length\n\t                position_ids = np.arange(seq_length, dtype=np.int64)\n\t                mask_token = mask_token_id if mask_token_id in required_input else gmask_token_id\n\t                if mask_token in required_input:\n\t                    mask_position = required_input.index(mask_token)\n\t                    position_ids[context_length:] = mask_position\n\t                block_position_ids = np.concatenate(\n", "                    [np.zeros(context_length, dtype=np.int64),\n\t                     np.arange(1, seq_length - context_length + 1, dtype=np.int64)])\n\t                encoded_inputs[\"position_ids\"] = np.stack([position_ids, block_position_ids], axis=0)\n\t        if needs_to_be_padded:\n\t            difference = max_length - len(required_input)\n\t            if \"attention_mask\" in encoded_inputs:\n\t                encoded_inputs[\"attention_mask\"] = np.pad(encoded_inputs[\"attention_mask\"],\n\t                                                          pad_width=[(0, 0), (difference, 0), (difference, 0)],\n\t                                                          mode='constant', constant_values=True)\n\t            if \"token_type_ids\" in encoded_inputs:\n", "                encoded_inputs[\"token_type_ids\"] = [self.pad_token_type_id] * difference + encoded_inputs[\n\t                    \"token_type_ids\"\n\t                ]\n\t            if \"special_tokens_mask\" in encoded_inputs:\n\t                encoded_inputs[\"special_tokens_mask\"] = [1] * difference + encoded_inputs[\"special_tokens_mask\"]\n\t            if \"position_ids\" in encoded_inputs:\n\t                encoded_inputs[\"position_ids\"] = np.pad(encoded_inputs[\"position_ids\"],\n\t                                                        pad_width=[(0, 0), (difference, 0)])\n\t            encoded_inputs[self.model_input_names[0]] = [self.pad_token_id] * difference + required_input\n\t        return encoded_inputs\n"]}
{"filename": "ft_chatglm_lora/modeling_chatglm.py", "chunked_list": ["\"\"\" PyTorch ChatGLM model. \"\"\"\n\timport math\n\timport copy\n\timport os\n\timport warnings\n\timport re\n\timport sys\n\timport torch\n\timport torch.utils.checkpoint\n\timport torch.nn.functional as F\n", "from torch import nn\n\tfrom torch.nn import CrossEntropyLoss, LayerNorm\n\tfrom torch.nn.utils import skip_init\n\tfrom typing import Optional, Tuple, Union, List, Callable, Dict, Any\n\tfrom transformers.utils import (\n\t    add_code_sample_docstrings,\n\t    add_start_docstrings,\n\t    add_start_docstrings_to_model_forward,\n\t)\n\tfrom transformers.modeling_outputs import (\n", "    BaseModelOutputWithPast,\n\t    CausalLMOutputWithPast,\n\t    BaseModelOutputWithPastAndCrossAttentions,\n\t)\n\tfrom transformers.modeling_utils import PreTrainedModel\n\tfrom transformers.utils import logging\n\tfrom transformers.generation.logits_process import LogitsProcessor\n\tfrom transformers.generation.utils import LogitsProcessorList, StoppingCriteriaList, GenerationConfig, ModelOutput\n\tfrom configuration_chatglm import ChatGLMConfig\n\t# flags required to enable jit fusion kernels\n", "if sys.platform != 'darwin':\n\t    torch._C._jit_set_profiling_mode(False)\n\t    torch._C._jit_set_profiling_executor(False)\n\t    torch._C._jit_override_can_fuse_on_cpu(True)\n\t    torch._C._jit_override_can_fuse_on_gpu(True)\n\tlogger = logging.get_logger(__name__)\n\t_CHECKPOINT_FOR_DOC = \"THUDM/ChatGLM-6B\"\n\t_CONFIG_FOR_DOC = \"ChatGLM6BConfig\"\n\tCHATGLM_6B_PRETRAINED_MODEL_ARCHIVE_LIST = [\n\t    \"THUDM/chatglm-6b\",\n", "    # See all ChatGLM-6B models at https://huggingface.co/models?filter=chatglm\n\t]\n\tclass InvalidScoreLogitsProcessor(LogitsProcessor):\n\t    def __call__(self, input_ids: torch.LongTensor, scores: torch.FloatTensor) -> torch.FloatTensor:\n\t        if torch.isnan(scores).any() or torch.isinf(scores).any():\n\t            scores.zero_()\n\t            scores[..., 5] = 5e4\n\t        return scores\n\tdef load_tf_weights_in_chatglm_6b(model, config, tf_checkpoint_path):\n\t    \"\"\"Load tf checkpoints in a pytorch model.\"\"\"\n", "    try:\n\t        import re\n\t        import numpy as np\n\t        import tensorflow as tf\n\t    except ImportError:\n\t        logger.error(\n\t            \"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"\n\t            \"https://www.tensorflow.org/install/ for installation instructions.\"\n\t        )\n\t        raise\n", "    tf_path = os.path.abspath(tf_checkpoint_path)\n\t    logger.info(f\"Converting TensorFlow checkpoint from {tf_path}\")\n\t    # Load weights from TF model\n\t    init_vars = tf.train.list_variables(tf_path)\n\t    names = []\n\t    arrays = []\n\t    for name, shape in init_vars:\n\t        logger.info(f\"Loading TF weight {name} with shape {shape}\")\n\t        array = tf.train.load_variable(tf_path, name)\n\t        names.append(name)\n", "        arrays.append(array)\n\t    for name, array in zip(names, arrays):\n\t        name = name.split(\"/\")\n\t        # adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v\n\t        # which are not required for using pretrained model\n\t        if any(\n\t                n in [\"adam_v\", \"adam_m\", \"AdamWeightDecayOptimizer\", \"AdamWeightDecayOptimizer_1\", \"global_step\"]\n\t                for n in name\n\t        ):\n\t            logger.info(f\"Skipping {'/'.join(name)}\")\n", "            continue\n\t        pointer = model\n\t        for m_name in name:\n\t            if re.fullmatch(r\"[A-Za-z]+_\\d+\", m_name):\n\t                scope_names = re.split(r\"_(\\d+)\", m_name)\n\t            else:\n\t                scope_names = [m_name]\n\t            if scope_names[0] == \"kernel\" or scope_names[0] == \"gamma\":\n\t                pointer = getattr(pointer, \"weight\")\n\t            elif scope_names[0] == \"output_bias\" or scope_names[0] == \"beta\":\n", "                pointer = getattr(pointer, \"bias\")\n\t            elif scope_names[0] == \"output_weights\":\n\t                pointer = getattr(pointer, \"weight\")\n\t            elif scope_names[0] == \"squad\":\n\t                pointer = getattr(pointer, \"classifier\")\n\t            else:\n\t                try:\n\t                    pointer = getattr(pointer, scope_names[0])\n\t                except AttributeError:\n\t                    logger.info(f\"Skipping {'/'.join(name)}\")\n", "                    continue\n\t            if len(scope_names) >= 2:\n\t                num = int(scope_names[1])\n\t                pointer = pointer[num]\n\t        if m_name[-11:] == \"_embeddings\":\n\t            pointer = getattr(pointer, \"weight\")\n\t        elif m_name == \"kernel\":\n\t            array = np.transpose(array)\n\t        try:\n\t            assert (\n", "                    pointer.shape == array.shape\n\t            ), f\"Pointer shape {pointer.shape} and array shape {array.shape} mismatched\"\n\t        except AssertionError as e:\n\t            e.args += (pointer.shape, array.shape)\n\t            raise\n\t        logger.info(f\"Initialize PyTorch weight {name}\")\n\t        pointer.data = torch.from_numpy(array)\n\t    return model\n\tclass PrefixEncoder(torch.nn.Module):\n\t    \"\"\"\n", "    The torch.nn model to encode the prefix\n\t    Input shape: (batch-size, prefix-length)\n\t    Output shape: (batch-size, prefix-length, 2*layers*hidden)\n\t    \"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.prefix_projection = config.prefix_projection\n\t        if self.prefix_projection:\n\t            # Use a two-layer MLP to encode the prefix\n\t            self.embedding = torch.nn.Embedding(config.pre_seq_len, config.hidden_size)\n", "            self.trans = torch.nn.Sequential(\n\t                torch.nn.Linear(config.hidden_size, config.hidden_size),\n\t                torch.nn.Tanh(),\n\t                torch.nn.Linear(config.hidden_size, config.num_layers * config.hidden_size * 2)\n\t            )\n\t        else:\n\t            self.embedding = torch.nn.Embedding(config.pre_seq_len, config.num_layers * config.hidden_size * 2)\n\t    def forward(self, prefix: torch.Tensor):\n\t        if self.prefix_projection:\n\t            prefix_tokens = self.embedding(prefix)\n", "            past_key_values = self.trans(prefix_tokens)\n\t        else:\n\t            past_key_values = self.embedding(prefix)\n\t        return past_key_values\n\t@torch.jit.script\n\tdef gelu_impl(x):\n\t    \"\"\"OpenAI's gelu implementation.\"\"\"\n\t    return 0.5 * x * (1.0 + torch.tanh(0.7978845608028654 * x *\n\t                                       (1.0 + 0.044715 * x * x)))\n\tdef gelu(x):\n", "    return gelu_impl(x)\n\tclass RotaryEmbedding(torch.nn.Module):\n\t    def __init__(self, dim, base=10000, precision=torch.half, learnable=False):\n\t        super().__init__()\n\t        inv_freq = 1. / (base ** (torch.arange(0, dim, 2).float() / dim))\n\t        inv_freq = inv_freq.half()\n\t        self.learnable = learnable\n\t        if learnable:\n\t            self.inv_freq = torch.nn.Parameter(inv_freq)\n\t            self.max_seq_len_cached = None\n", "        else:\n\t            self.register_buffer('inv_freq', inv_freq)\n\t            self.max_seq_len_cached = None\n\t            self.cos_cached = None\n\t            self.sin_cached = None\n\t        self.precision = precision\n\t    def _load_from_state_dict(self, state_dict, prefix, local_metadata, strict, missing_keys, unexpected_keys,\n\t                              error_msgs):\n\t        pass\n\t    def forward(self, x, seq_dim=1, seq_len=None):\n", "        if seq_len is None:\n\t            seq_len = x.shape[seq_dim]\n\t        if self.max_seq_len_cached is None or (seq_len > self.max_seq_len_cached):\n\t            self.max_seq_len_cached = None if self.learnable else seq_len\n\t            t = torch.arange(seq_len, device=x.device, dtype=self.inv_freq.dtype)\n\t            freqs = torch.einsum('i,j->ij', t, self.inv_freq)\n\t            # Different from paper, but it uses a different permutation in order to obtain the same calculation\n\t            emb = torch.cat((freqs, freqs), dim=-1).to(x.device)\n\t            if self.precision == torch.bfloat16:\n\t                emb = emb.float()\n", "            # [sx, 1 (b * np), hn]\n\t            cos_cached = emb.cos()[:, None, :]\n\t            sin_cached = emb.sin()[:, None, :]\n\t            if self.precision == torch.bfloat16:\n\t                cos_cached = cos_cached.bfloat16()\n\t                sin_cached = sin_cached.bfloat16()\n\t            if self.learnable:\n\t                return cos_cached, sin_cached\n\t            self.cos_cached, self.sin_cached = cos_cached, sin_cached\n\t        return self.cos_cached[:seq_len, ...], self.sin_cached[:seq_len, ...]\n", "    def _apply(self, fn):\n\t        if self.cos_cached is not None:\n\t            self.cos_cached = fn(self.cos_cached)\n\t        if self.sin_cached is not None:\n\t            self.sin_cached = fn(self.sin_cached)\n\t        return super()._apply(fn)\n\tdef rotate_half(x):\n\t    x1, x2 = x[..., :x.shape[-1] // 2], x[..., x.shape[-1] // 2:]\n\t    return torch.cat((-x2, x1), dim=x1.ndim - 1)  # dim=-1 triggers a bug in earlier torch versions\n\t@torch.jit.script\n", "def apply_rotary_pos_emb_index(q, k, cos, sin, position_id):\n\t    # position_id: [sq, b], q, k: [sq, b, np, hn], cos: [sq, 1, hn] -> [sq, b, 1, hn]\n\t    cos, sin = F.embedding(position_id, cos.squeeze(1)).unsqueeze(2), \\\n\t        F.embedding(position_id, sin.squeeze(1)).unsqueeze(2)\n\t    q, k = (q * cos) + (rotate_half(q) * sin), (k * cos) + (rotate_half(k) * sin)\n\t    return q, k\n\tdef attention_fn(\n\t        self,\n\t        query_layer,\n\t        key_layer,\n", "        value_layer,\n\t        attention_mask,\n\t        hidden_size_per_partition,\n\t        layer_id,\n\t        layer_past=None,\n\t        scaling_attention_score=True,\n\t        use_cache=False,\n\t):\n\t    if layer_past is not None:\n\t        past_key, past_value = layer_past[0], layer_past[1]\n", "        key_layer = torch.cat((past_key, key_layer), dim=0)\n\t        value_layer = torch.cat((past_value, value_layer), dim=0)\n\t    # seqlen, batch, num_attention_heads, hidden_size_per_attention_head\n\t    seq_len, b, nh, hidden_size = key_layer.shape\n\t    if use_cache:\n\t        present = (key_layer, value_layer)\n\t    else:\n\t        present = None\n\t    query_key_layer_scaling_coeff = float(layer_id + 1)\n\t    if scaling_attention_score:\n", "        query_layer = query_layer / (math.sqrt(hidden_size) * query_key_layer_scaling_coeff)\n\t    # ===================================\n\t    # Raw attention scores. [b, np, s, s]\n\t    # ===================================\n\t    # [b, np, sq, sk]\n\t    output_size = (query_layer.size(1), query_layer.size(2), query_layer.size(0), key_layer.size(0))\n\t    # [sq, b, np, hn] -> [sq, b * np, hn]\n\t    query_layer = query_layer.view(output_size[2], output_size[0] * output_size[1], -1)\n\t    # [sk, b, np, hn] -> [sk, b * np, hn]\n\t    key_layer = key_layer.view(output_size[3], output_size[0] * output_size[1], -1)\n", "    matmul_result = torch.zeros(\n\t        1, 1, 1,\n\t        dtype=query_layer.dtype,\n\t        device=query_layer.device,\n\t    )\n\t    matmul_result = torch.baddbmm(\n\t        matmul_result,\n\t        query_layer.transpose(0, 1),  # [b * np, sq, hn]\n\t        key_layer.transpose(0, 1).transpose(1, 2),  # [b * np, hn, sk]\n\t        beta=0.0,\n", "        alpha=1.0,\n\t    )\n\t    # change view to [b, np, sq, sk]\n\t    attention_scores = matmul_result.view(*output_size)\n\t    if self.scale_mask_softmax:\n\t        self.scale_mask_softmax.scale = query_key_layer_scaling_coeff\n\t        attention_probs = self.scale_mask_softmax(attention_scores, attention_mask.contiguous())\n\t    else:\n\t        if not (attention_mask == 0).all():\n\t            # if auto-regressive, skip\n", "            attention_scores.masked_fill_(attention_mask, -10000.0)\n\t        dtype = attention_scores.dtype\n\t        attention_scores = attention_scores.float()\n\t        attention_scores = attention_scores * query_key_layer_scaling_coeff\n\t        attention_probs = F.softmax(attention_scores, dim=-1)\n\t        attention_probs = attention_probs.type(dtype)\n\t    # =========================\n\t    # Context layer. [sq, b, hp]\n\t    # =========================\n\t    # value_layer -> context layer.\n", "    # [sk, b, np, hn] --> [b, np, sq, hn]\n\t    # context layer shape: [b, np, sq, hn]\n\t    output_size = (value_layer.size(1), value_layer.size(2), query_layer.size(0), value_layer.size(3))\n\t    # change view [sk, b * np, hn]\n\t    value_layer = value_layer.view(value_layer.size(0), output_size[0] * output_size[1], -1)\n\t    # change view [b * np, sq, sk]\n\t    attention_probs = attention_probs.view(output_size[0] * output_size[1], output_size[2], -1)\n\t    # matmul: [b * np, sq, hn]\n\t    context_layer = torch.bmm(attention_probs, value_layer.transpose(0, 1))\n\t    # change view [b, np, sq, hn]\n", "    context_layer = context_layer.view(*output_size)\n\t    # [b, np, sq, hn] --> [sq, b, np, hn]\n\t    context_layer = context_layer.permute(2, 0, 1, 3).contiguous()\n\t    # [sq, b, np, hn] --> [sq, b, hp]\n\t    new_context_layer_shape = context_layer.size()[:-2] + (hidden_size_per_partition,)\n\t    context_layer = context_layer.view(*new_context_layer_shape)\n\t    outputs = (context_layer, present, attention_probs)\n\t    return outputs\n\tdef default_init(cls, *args, **kwargs):\n\t    return cls(*args, **kwargs)\n", "class SelfAttention(torch.nn.Module):\n\t    def __init__(self, hidden_size, num_attention_heads,\n\t                 layer_id, hidden_size_per_attention_head=None, bias=True,\n\t                 params_dtype=torch.float, position_encoding_2d=True, empty_init=True):\n\t        if empty_init:\n\t            init_method = skip_init\n\t        else:\n\t            init_method = default_init\n\t        super(SelfAttention, self).__init__()\n\t        self.layer_id = layer_id\n", "        self.hidden_size = hidden_size\n\t        self.hidden_size_per_partition = hidden_size\n\t        self.num_attention_heads = num_attention_heads\n\t        self.num_attention_heads_per_partition = num_attention_heads\n\t        self.position_encoding_2d = position_encoding_2d\n\t        self.rotary_emb = RotaryEmbedding(\n\t            self.hidden_size // (self.num_attention_heads * 2)\n\t            if position_encoding_2d\n\t            else self.hidden_size // self.num_attention_heads,\n\t            base=10000,\n", "            precision=torch.half,\n\t            learnable=False,\n\t        )\n\t        self.scale_mask_softmax = None\n\t        if hidden_size_per_attention_head is None:\n\t            self.hidden_size_per_attention_head = hidden_size // num_attention_heads\n\t        else:\n\t            self.hidden_size_per_attention_head = hidden_size_per_attention_head\n\t        self.inner_hidden_size = num_attention_heads * self.hidden_size_per_attention_head\n\t        # Strided linear layer.\n", "        self.query_key_value = init_method(\n\t            torch.nn.Linear,\n\t            hidden_size,\n\t            3 * self.inner_hidden_size,\n\t            bias=bias,\n\t            dtype=params_dtype,\n\t        )\n\t        self.dense = init_method(\n\t            torch.nn.Linear,\n\t            self.inner_hidden_size,\n", "            hidden_size,\n\t            bias=bias,\n\t            dtype=params_dtype,\n\t        )\n\t    @staticmethod\n\t    def attention_mask_func(attention_scores, attention_mask):\n\t        attention_scores.masked_fill_(attention_mask, -10000.0)\n\t        return attention_scores\n\t    def split_tensor_along_last_dim(self, tensor, num_partitions,\n\t                                    contiguous_split_chunks=False):\n", "        \"\"\"Split a tensor along its last dimension.\n\t        Arguments:\n\t            tensor: input tensor.\n\t            num_partitions: number of partitions to split the tensor\n\t            contiguous_split_chunks: If True, make each chunk contiguous\n\t                                    in memory.\n\t        \"\"\"\n\t        # Get the size and dimension.\n\t        last_dim = tensor.dim() - 1\n\t        last_dim_size = tensor.size()[last_dim] // num_partitions\n", "        # Split.\n\t        tensor_list = torch.split(tensor, last_dim_size, dim=last_dim)\n\t        # Note: torch.split does not create contiguous tensors by default.\n\t        if contiguous_split_chunks:\n\t            return tuple(chunk.contiguous() for chunk in tensor_list)\n\t        return tensor_list\n\t    def forward(\n\t            self,\n\t            hidden_states: torch.Tensor,\n\t            position_ids,\n", "            attention_mask: torch.Tensor,\n\t            layer_id,\n\t            layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n\t            use_cache: bool = False,\n\t            output_attentions: bool = False,\n\t    ):\n\t        \"\"\"\n\t        hidden_states: [seq_len, batch, hidden_size]\n\t        attention_mask: [(1, 1), seq_len, seq_len]\n\t        \"\"\"\n", "        # [seq_len, batch, 3 * hidden_size]\n\t        mixed_raw_layer = self.query_key_value(hidden_states)\n\t        # [seq_len, batch, 3 * hidden_size] --> [seq_len, batch, num_attention_heads, 3 * hidden_size_per_attention_head]\n\t        new_tensor_shape = mixed_raw_layer.size()[:-1] + (\n\t            self.num_attention_heads_per_partition,\n\t            3 * self.hidden_size_per_attention_head,\n\t        )\n\t        mixed_raw_layer = mixed_raw_layer.view(*new_tensor_shape)\n\t        # [seq_len, batch, num_attention_heads, hidden_size_per_attention_head]\n\t        (query_layer, key_layer, value_layer) = self.split_tensor_along_last_dim(mixed_raw_layer, 3)\n", "        if self.position_encoding_2d:\n\t            q1, q2 = query_layer.chunk(2, dim=(query_layer.ndim - 1))\n\t            k1, k2 = key_layer.chunk(2, dim=(key_layer.ndim - 1))\n\t            cos, sin = self.rotary_emb(q1, seq_len=position_ids.max() + 1)\n\t            position_ids, block_position_ids = position_ids[:, 0, :].transpose(0, 1).contiguous(), \\\n\t                position_ids[:, 1, :].transpose(0, 1).contiguous()\n\t            q1, k1 = apply_rotary_pos_emb_index(q1, k1, cos, sin, position_ids)\n\t            q2, k2 = apply_rotary_pos_emb_index(q2, k2, cos, sin, block_position_ids)\n\t            query_layer = torch.concat([q1, q2], dim=(q1.ndim - 1))\n\t            key_layer = torch.concat([k1, k2], dim=(k1.ndim - 1))\n", "        else:\n\t            position_ids = position_ids.transpose(0, 1)\n\t            cos, sin = self.rotary_emb(value_layer, seq_len=position_ids.max() + 1)\n\t            # [seq_len, batch, num_attention_heads, hidden_size_per_attention_head]\n\t            query_layer, key_layer = apply_rotary_pos_emb_index(query_layer, key_layer, cos, sin, position_ids)\n\t        # [seq_len, batch, hidden_size]\n\t        context_layer, present, attention_probs = attention_fn(\n\t            self=self,\n\t            query_layer=query_layer,\n\t            key_layer=key_layer,\n", "            value_layer=value_layer,\n\t            attention_mask=attention_mask,\n\t            hidden_size_per_partition=self.hidden_size_per_partition,\n\t            layer_id=layer_id,\n\t            layer_past=layer_past,\n\t            use_cache=use_cache\n\t        )\n\t        output = self.dense(context_layer)\n\t        outputs = (output, present)\n\t        if output_attentions:\n", "            outputs += (attention_probs,)\n\t        return outputs  # output, present, attention_probs\n\tclass GEGLU(torch.nn.Module):\n\t    def __init__(self):\n\t        super().__init__()\n\t        self.activation_fn = F.gelu\n\t    def forward(self, x):\n\t        # dim=-1 breaks in jit for pt<1.10\n\t        x1, x2 = x.chunk(2, dim=(x.ndim - 1))\n\t        return x1 * self.activation_fn(x2)\n", "class GLU(torch.nn.Module):\n\t    def __init__(self, hidden_size, inner_hidden_size=None,\n\t                 layer_id=None, bias=True, activation_func=gelu, params_dtype=torch.float, empty_init=True):\n\t        super(GLU, self).__init__()\n\t        if empty_init:\n\t            init_method = skip_init\n\t        else:\n\t            init_method = default_init\n\t        self.layer_id = layer_id\n\t        self.activation_func = activation_func\n", "        # Project to 4h.\n\t        self.hidden_size = hidden_size\n\t        if inner_hidden_size is None:\n\t            inner_hidden_size = 4 * hidden_size\n\t        self.inner_hidden_size = inner_hidden_size\n\t        self.dense_h_to_4h = init_method(\n\t            torch.nn.Linear,\n\t            self.hidden_size,\n\t            self.inner_hidden_size,\n\t            bias=bias,\n", "            dtype=params_dtype,\n\t        )\n\t        # Project back to h.\n\t        self.dense_4h_to_h = init_method(\n\t            torch.nn.Linear,\n\t            self.inner_hidden_size,\n\t            self.hidden_size,\n\t            bias=bias,\n\t            dtype=params_dtype,\n\t        )\n", "    def forward(self, hidden_states):\n\t        \"\"\"\n\t        hidden_states: [seq_len, batch, hidden_size]\n\t        \"\"\"\n\t        # [seq_len, batch, inner_hidden_size]\n\t        intermediate_parallel = self.dense_h_to_4h(hidden_states)\n\t        intermediate_parallel = self.activation_func(intermediate_parallel)\n\t        output = self.dense_4h_to_h(intermediate_parallel)\n\t        return output\n\tclass GLMBlock(torch.nn.Module):\n", "    def __init__(\n\t            self,\n\t            hidden_size,\n\t            num_attention_heads,\n\t            layernorm_epsilon,\n\t            layer_id,\n\t            inner_hidden_size=None,\n\t            hidden_size_per_attention_head=None,\n\t            layernorm=LayerNorm,\n\t            use_bias=True,\n", "            params_dtype=torch.float,\n\t            num_layers=28,\n\t            position_encoding_2d=True,\n\t            empty_init=True\n\t    ):\n\t        super(GLMBlock, self).__init__()\n\t        # Set output layer initialization if not provided.\n\t        self.layer_id = layer_id\n\t        # Layernorm on the input data.\n\t        self.input_layernorm = layernorm(hidden_size, eps=layernorm_epsilon)\n", "        self.position_encoding_2d = position_encoding_2d\n\t        # Self attention.\n\t        self.attention = SelfAttention(\n\t            hidden_size,\n\t            num_attention_heads,\n\t            layer_id,\n\t            hidden_size_per_attention_head=hidden_size_per_attention_head,\n\t            bias=use_bias,\n\t            params_dtype=params_dtype,\n\t            position_encoding_2d=self.position_encoding_2d,\n", "            empty_init=empty_init\n\t        )\n\t        # Layernorm on the input data.\n\t        self.post_attention_layernorm = layernorm(hidden_size, eps=layernorm_epsilon)\n\t        self.num_layers = num_layers\n\t        # GLU\n\t        self.mlp = GLU(\n\t            hidden_size,\n\t            inner_hidden_size=inner_hidden_size,\n\t            bias=use_bias,\n", "            layer_id=layer_id,\n\t            params_dtype=params_dtype,\n\t            empty_init=empty_init\n\t        )\n\t    def forward(\n\t            self,\n\t            hidden_states: torch.Tensor,\n\t            position_ids,\n\t            attention_mask: torch.Tensor,\n\t            layer_id,\n", "            layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n\t            use_cache: bool = False,\n\t            output_attentions: bool = False,\n\t    ):\n\t        \"\"\"\n\t        hidden_states: [seq_len, batch, hidden_size]\n\t        attention_mask: [(1, 1), seq_len, seq_len]\n\t        \"\"\"\n\t        # Layer norm at the begining of the transformer layer.\n\t        # [seq_len, batch, hidden_size]\n", "        attention_input = self.input_layernorm(hidden_states)\n\t        # Self attention.\n\t        attention_outputs = self.attention(\n\t            attention_input,\n\t            position_ids,\n\t            attention_mask=attention_mask,\n\t            layer_id=layer_id,\n\t            layer_past=layer_past,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions\n", "        )\n\t        attention_output = attention_outputs[0]\n\t        outputs = attention_outputs[1:]\n\t        # Residual connection.\n\t        alpha = (2 * self.num_layers) ** 0.5\n\t        hidden_states = attention_input * alpha + attention_output\n\t        mlp_input = self.post_attention_layernorm(hidden_states)\n\t        # MLP.\n\t        mlp_output = self.mlp(mlp_input)\n\t        # Second residual connection.\n", "        output = mlp_input * alpha + mlp_output\n\t        if use_cache:\n\t            outputs = (output,) + outputs\n\t        else:\n\t            outputs = (output,) + outputs[1:]\n\t        return outputs  # hidden_states, present, attentions\n\tclass ChatGLMPreTrainedModel(PreTrainedModel):\n\t    \"\"\"\n\t    An abstract class to handle weights initialization and\n\t    a simple interface for downloading and loading pretrained models.\n", "    \"\"\"\n\t    is_parallelizable = False\n\t    supports_gradient_checkpointing = True\n\t    config_class = ChatGLMConfig\n\t    base_model_prefix = \"transformer\"\n\t    _no_split_modules = [\"GLMBlock\"]\n\t    def __init__(self, *inputs, **kwargs):\n\t        super().__init__(*inputs, **kwargs)\n\t    def _init_weights(self, module: nn.Module):\n\t        \"\"\"Initialize the weights.\"\"\"\n", "        return\n\t    def get_masks(self, input_ids, device):\n\t        batch_size, seq_length = input_ids.shape\n\t        context_lengths = [seq.tolist().index(self.config.bos_token_id) for seq in input_ids]\n\t        attention_mask = torch.ones((batch_size, seq_length, seq_length), device=device)\n\t        attention_mask.tril_()\n\t        for i, context_length in enumerate(context_lengths):\n\t            attention_mask[i, :, :context_length] = 1\n\t        attention_mask.unsqueeze_(1)\n\t        attention_mask = (attention_mask < 0.5).bool()\n", "        return attention_mask\n\t    def get_position_ids(self, input_ids, mask_positions, device, use_gmasks=None):\n\t        batch_size, seq_length = input_ids.shape\n\t        if use_gmasks is None:\n\t            use_gmasks = [False] * batch_size\n\t        context_lengths = [seq.tolist().index(self.config.bos_token_id) for seq in input_ids]\n\t        if self.position_encoding_2d:\n\t            position_ids = torch.arange(seq_length, dtype=torch.long, device=device).unsqueeze(0).repeat(batch_size, 1)\n\t            for i, context_length in enumerate(context_lengths):\n\t                position_ids[i, context_length:] = mask_positions[i]\n", "            block_position_ids = [torch.cat((\n\t                torch.zeros(context_length, dtype=torch.long, device=device),\n\t                torch.arange(seq_length - context_length, dtype=torch.long, device=device) + 1\n\t            )) for context_length in context_lengths]\n\t            block_position_ids = torch.stack(block_position_ids, dim=0)\n\t            position_ids = torch.stack((position_ids, block_position_ids), dim=1)\n\t        else:\n\t            position_ids = torch.arange(seq_length, dtype=torch.long, device=device).unsqueeze(0).repeat(batch_size, 1)\n\t            for i, context_length in enumerate(context_lengths):\n\t                if not use_gmasks[i]:\n", "                    position_ids[i, context_length:] = mask_positions[i]\n\t        return position_ids\n\t    def _set_gradient_checkpointing(self, module, value=False):\n\t        if isinstance(module, ChatGLMModel):\n\t            module.gradient_checkpointing = value\n\tCHATGLM_6B_START_DOCSTRING = r\"\"\"\n\t    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) sub-class.\n\t    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general\n\t    usage and behavior.\n\t    Parameters:\n", "        config ([`~ChatGLM6BConfig`]): Model configuration class with all the parameters of the model.\n\t            Initializing with a config file does not load the weights associated with the model, only the configuration.\n\t            Check out the [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\t\"\"\"\n\tCHATGLM_6B_INPUTS_DOCSTRING = r\"\"\"\n\t    Args:\n\t        input_ids (`torch.LongTensor` of shape `({0})`):\n\t            Indices of input sequence tokens in the vocabulary.\n\t            Indices can be obtained using [`ChatGLM6BTokenizer`].\n\t            See [`PreTrainedTokenizer.encode`] and\n", "            [`PreTrainedTokenizer.__call__`] for details.\n\t            [What are input IDs?](../glossary#input-ids)\n\t        attention_mask (`torch.FloatTensor` of shape `({0})`, *optional*):\n\t            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\t            - 1 for tokens that are **not masked**,\n\t            - 0 for tokens that are **masked**.\n\t            [What are attention masks?](../glossary#attention-mask)\n\t        token_type_ids (`torch.LongTensor` of shape `({0})`, *optional*):\n\t            Segment token indices to indicate first and second portions of the inputs. Indices are selected in `[0, 1]`:\n\t            - 0 corresponds to a *sentence A* token,\n", "            - 1 corresponds to a *sentence B* token.\n\t            [What are token type IDs?](../glossary#token-type-ids)\n\t        position_ids (`torch.LongTensor` of shape `({0})`, *optional*):\n\t            Indices of positions of each input sequence tokens in the position embeddings.\n\t            Selected in the range `[0, config.max_position_embeddings - 1]`.\n\t            [What are position IDs?](../glossary#position-ids)\n\t        head_mask (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`, *optional*):\n\t            Mask to nullify selected heads of the self-attention modules. Mask values selected in `[0, 1]`:\n\t            - 1 indicates the head is **not masked**,\n\t            - 0 indicates the head is **masked**.\n", "        inputs_embeds (`torch.FloatTensor` of shape `({0}, hidden_size)`, *optional*):\n\t            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation.\n\t            This is useful if you want more control over how to convert *input_ids* indices into associated vectors\n\t            than the model's internal embedding lookup matrix.\n\t        output_attentions (`bool`, *optional*):\n\t            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n\t            tensors for more detail.\n\t        output_hidden_states (`bool`, *optional*):\n\t            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n\t            more detail.\n", "        return_dict (`bool`, *optional*):\n\t            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\t\"\"\"\n\t@add_start_docstrings(\n\t    \"The bare ChatGLM-6B Model transformer outputting raw hidden-states without any specific head on top.\",\n\t    CHATGLM_6B_START_DOCSTRING,\n\t)\n\tclass ChatGLMModel(ChatGLMPreTrainedModel):\n\t    \"\"\"\n\t    The model can behave as an encoder (with only self-attention) as well\n", "    as a decoder, in which case a layer of cross-attention is added between\n\t    the self-attention layers, following the architecture described in [Attention is\n\t    all you need](https://arxiv.org/abs/1706.03762) by Ashish Vaswani,\n\t    Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\t    To behave as an decoder the model needs to be initialized with the\n\t    `is_decoder` argument of the configuration set to `True`.\n\t    To be used in a Seq2Seq model, the model needs to initialized with both `is_decoder`\n\t    argument and `add_cross_attention` set to `True`; an\n\t    `encoder_hidden_states` is then expected as an input to the forward pass.\n\t    \"\"\"\n", "    def __init__(self, config: ChatGLMConfig, empty_init=True):\n\t        super().__init__(config)\n\t        if empty_init:\n\t            init_method = skip_init\n\t        else:\n\t            init_method = default_init\n\t        # recording parameters\n\t        self.max_sequence_length = config.max_sequence_length\n\t        self.hidden_size = config.hidden_size\n\t        self.params_dtype = torch.half\n", "        self.num_attention_heads = config.num_attention_heads\n\t        self.vocab_size = config.vocab_size\n\t        self.num_layers = config.num_layers\n\t        self.layernorm_epsilon = config.layernorm_epsilon\n\t        self.inner_hidden_size = config.inner_hidden_size\n\t        self.hidden_size_per_attention_head = self.hidden_size // self.num_attention_heads\n\t        self.position_encoding_2d = config.position_encoding_2d\n\t        self.pre_seq_len = config.pre_seq_len\n\t        self.prefix_projection = config.prefix_projection\n\t        self.word_embeddings = init_method(\n", "            torch.nn.Embedding,\n\t            num_embeddings=self.vocab_size, embedding_dim=self.hidden_size,\n\t            dtype=self.params_dtype\n\t        )\n\t        self.gradient_checkpointing = False\n\t        def get_layer(layer_id):\n\t            return GLMBlock(\n\t                self.hidden_size,\n\t                self.num_attention_heads,\n\t                self.layernorm_epsilon,\n", "                layer_id,\n\t                inner_hidden_size=self.inner_hidden_size,\n\t                hidden_size_per_attention_head=self.hidden_size_per_attention_head,\n\t                layernorm=LayerNorm,\n\t                use_bias=True,\n\t                params_dtype=self.params_dtype,\n\t                position_encoding_2d=self.position_encoding_2d,\n\t                empty_init=empty_init\n\t            )\n\t        self.layers = torch.nn.ModuleList(\n", "            [get_layer(layer_id) for layer_id in range(self.num_layers)]\n\t        )\n\t        # Final layer norm before output.\n\t        self.final_layernorm = LayerNorm(self.hidden_size, eps=self.layernorm_epsilon)\n\t        if self.pre_seq_len is not None:\n\t            for param in self.parameters():\n\t                param.requires_grad = False\n\t            self.prefix_tokens = torch.arange(self.pre_seq_len).long()\n\t            self.prefix_encoder = PrefixEncoder(config)\n\t            self.dropout = torch.nn.Dropout(0.1)\n", "            # total_params = sum(p.numel() for p in self.parameters())\n\t            # trainable_params = sum(p.numel() for p in self.parameters() if p.requires_grad)\n\t            # print(\"Using p-tuning v2: # trainable_params = {} / {}\".format(trainable_params, total_params))\n\t    def get_input_embeddings(self):\n\t        return self.word_embeddings\n\t    def set_input_embeddings(self, new_embeddings: torch.Tensor):\n\t        self.word_embeddings = new_embeddings\n\t    def get_prompt(self, batch_size, device, dtype=torch.half):\n\t        prefix_tokens = self.prefix_tokens.unsqueeze(0).expand(batch_size, -1).to(device)\n\t        past_key_values = self.prefix_encoder(prefix_tokens).type(dtype)\n", "        past_key_values = past_key_values.view(\n\t            batch_size,\n\t            self.pre_seq_len,\n\t            self.num_layers * 2,\n\t            self.num_attention_heads,\n\t            self.hidden_size // self.num_attention_heads\n\t        )\n\t        # seq_len, b, nh, hidden_size\n\t        past_key_values = self.dropout(past_key_values)\n\t        past_key_values = past_key_values.permute([2, 1, 0, 3, 4]).split(2)\n", "        # past_key_values = [(v[0], v[1]) for v in past_key_values]\n\t        return past_key_values\n\t    @add_start_docstrings_to_model_forward(CHATGLM_6B_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n\t    @add_code_sample_docstrings(\n\t        checkpoint=_CHECKPOINT_FOR_DOC,\n\t        output_type=BaseModelOutputWithPastAndCrossAttentions,\n\t        config_class=_CONFIG_FOR_DOC,\n\t    )\n\t    def forward(\n\t            self,\n", "            input_ids: Optional[torch.LongTensor] = None,\n\t            position_ids: Optional[torch.LongTensor] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            past_key_values: Optional[Tuple[Tuple[torch.Tensor, torch.Tensor], ...]] = None,\n\t            inputs_embeds: Optional[torch.LongTensor] = None,\n\t            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n\t            return_dict: Optional[bool] = None,\n\t    ) -> Union[Tuple[torch.Tensor, ...], BaseModelOutputWithPast]:\n", "        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n\t            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n\t        )\n\t        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        if self.gradient_checkpointing and self.training:\n\t            if use_cache:\n\t                logger.warning_once(\n\t                    \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n", "                )\n\t                use_cache = False\n\t        if input_ids is not None and inputs_embeds is not None:\n\t            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n\t        elif input_ids is not None:\n\t            batch_size, seq_length = input_ids.shape[:2]\n\t        elif inputs_embeds is not None:\n\t            batch_size, seq_length = inputs_embeds.shape[:2]\n\t        else:\n\t            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n", "        if inputs_embeds is None:\n\t            inputs_embeds = self.word_embeddings(input_ids)\n\t        if past_key_values is None:\n\t            if self.pre_seq_len is not None:\n\t                past_key_values = self.get_prompt(batch_size=input_ids.shape[0], device=input_ids.device,\n\t                                                  dtype=inputs_embeds.dtype)\n\t            else:\n\t                past_key_values = tuple([None] * len(self.layers))\n\t            if attention_mask is None:\n\t                attention_mask = self.get_masks(\n", "                    input_ids,\n\t                    device=input_ids.device\n\t                )\n\t            if position_ids is None:\n\t                MASK, gMASK = self.config.mask_token_id, self.config.gmask_token_id\n\t                seqs = input_ids.tolist()\n\t                mask_positions, use_gmasks = [], []\n\t                for seq in seqs:\n\t                    mask_token = gMASK if gMASK in seq else MASK\n\t                    use_gmask = mask_token == gMASK\n", "                    mask_positions.append(seq.index(mask_token))\n\t                    use_gmasks.append(use_gmask)\n\t                position_ids = self.get_position_ids(\n\t                    input_ids,\n\t                    mask_positions=mask_positions,\n\t                    device=input_ids.device,\n\t                    use_gmasks=use_gmasks\n\t                )\n\t        if self.pre_seq_len is not None and attention_mask is not None:\n\t            prefix_attention_mask = torch.ones(batch_size, 1, input_ids.size(-1), self.pre_seq_len).to(\n", "                attention_mask.device)\n\t            prefix_attention_mask = (prefix_attention_mask < 0.5).bool()\n\t            attention_mask = torch.cat((prefix_attention_mask, attention_mask), dim=3)\n\t        # [seq_len, batch, hidden_size]\n\t        hidden_states = inputs_embeds.transpose(0, 1)\n\t        presents = () if use_cache else None\n\t        all_self_attentions = () if output_attentions else None\n\t        all_hidden_states = () if output_hidden_states else None\n\t        if attention_mask is None:\n\t            attention_mask = torch.zeros(1, 1, device=input_ids.device).bool()\n", "        else:\n\t            attention_mask = attention_mask.to(hidden_states.device)\n\t        for i, layer in enumerate(self.layers):\n\t            if output_hidden_states:\n\t                all_hidden_states = all_hidden_states + (hidden_states,)\n\t            layer_past = past_key_values[i]\n\t            if self.gradient_checkpointing and self.training:\n\t                layer_ret = torch.utils.checkpoint.checkpoint(\n\t                    layer,\n\t                    hidden_states,\n", "                    position_ids,\n\t                    attention_mask,\n\t                    torch.tensor(i),\n\t                    layer_past,\n\t                    use_cache,\n\t                    output_attentions\n\t                )\n\t            else:\n\t                layer_ret = layer(\n\t                    hidden_states,\n", "                    position_ids=position_ids,\n\t                    attention_mask=attention_mask,\n\t                    layer_id=torch.tensor(i),\n\t                    layer_past=layer_past,\n\t                    use_cache=use_cache,\n\t                    output_attentions=output_attentions\n\t                )\n\t            hidden_states = layer_ret[0]\n\t            if use_cache:\n\t                presents = presents + (layer_ret[1],)\n", "            if output_attentions:\n\t                all_self_attentions = all_self_attentions + (layer_ret[2 if use_cache else 1],)\n\t        # Final layer norm.\n\t        hidden_states = self.final_layernorm(hidden_states)\n\t        if output_hidden_states:\n\t            all_hidden_states = all_hidden_states + (hidden_states,)\n\t        if not return_dict:\n\t            return tuple(v for v in [hidden_states, presents, all_hidden_states, all_self_attentions] if v is not None)\n\t        return BaseModelOutputWithPast(\n\t            last_hidden_state=hidden_states,\n", "            past_key_values=presents,\n\t            hidden_states=all_hidden_states,\n\t            attentions=all_self_attentions,\n\t        )\n\tclass ChatGLMForConditionalGeneration(ChatGLMPreTrainedModel):\n\t    def __init__(self, config: ChatGLMConfig, empty_init=True):\n\t        super().__init__(config)\n\t        if empty_init:\n\t            init_method = skip_init\n\t        else:\n", "            init_method = default_init\n\t        # self.hidden_size = config.hidden_size\n\t        # self.params_dtype = torch.half\n\t        # self.vocab_size = config.vocab_size\n\t        self.max_sequence_length = config.max_sequence_length\n\t        self.position_encoding_2d = config.position_encoding_2d\n\t        self.transformer = ChatGLMModel(config, empty_init=empty_init)\n\t        self.lm_head = init_method(\n\t            nn.Linear,\n\t            config.hidden_size,\n", "            config.vocab_size,\n\t            bias=False,\n\t            dtype=torch.half\n\t        )\n\t        self.config = config\n\t        self.quantized = False\n\t        if self.config.quantization_bit:\n\t            self.quantize(self.config.quantization_bit, empty_init=True)\n\t    def get_output_embeddings(self):\n\t        return self.lm_head\n", "    def set_output_embeddings(self, new_embeddings):\n\t        self.lm_head = new_embeddings\n\t    def _update_model_kwargs_for_generation(\n\t        self,\n\t        outputs: ModelOutput,\n\t        model_kwargs: Dict[str, Any],\n\t        is_encoder_decoder: bool = False,\n\t        standardize_cache_format: bool = False,\n\t    ) -> Dict[str, Any]:\n\t        # update past_key_values\n", "        model_kwargs[\"past_key_values\"] = self._extract_past_from_model_output(\n\t            outputs, standardize_cache_format=standardize_cache_format\n\t        )\n\t        # update attention mask\n\t        if \"attention_mask\" in model_kwargs:\n\t            attention_mask = model_kwargs[\"attention_mask\"]\n\t            if attention_mask is not None and attention_mask.dtype == torch.bool:\n\t                attention_mask = torch.cat(\n\t                    [attention_mask, attention_mask.new_ones((*attention_mask.shape[:3], 1))], dim=3)\n\t                new_attention_mask = attention_mask[:, :, -1:].clone()\n", "                new_attention_mask[..., -1] = False\n\t                model_kwargs[\"attention_mask\"] = torch.cat(\n\t                    [attention_mask, new_attention_mask], dim=2\n\t                )\n\t        # update position ids\n\t        if \"position_ids\" in model_kwargs:\n\t            position_ids = model_kwargs[\"position_ids\"]\n\t            new_position_id = position_ids[..., -1:].clone()\n\t            new_position_id[:, 1, :] += 1\n\t            model_kwargs[\"position_ids\"] = torch.cat(\n", "                [position_ids, new_position_id], dim=-1\n\t            )\n\t        return model_kwargs\n\t    def prepare_inputs_for_generation(\n\t            self,\n\t            input_ids: torch.LongTensor,\n\t            past: Optional[torch.Tensor] = None,\n\t            past_key_values: Optional[torch.Tensor] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            position_ids: Optional[torch.Tensor] = None,\n", "            **kwargs\n\t    ) -> dict:\n\t        batch_size, seq_length = input_ids.shape\n\t        MASK, gMASK = self.config.mask_token_id, self.config.gmask_token_id\n\t        seqs = input_ids.tolist()\n\t        mask_positions, use_gmasks = [], []\n\t        for seq in seqs:\n\t            mask_token = gMASK if gMASK in seq else MASK\n\t            use_gmask = mask_token == gMASK\n\t            mask_positions.append(seq.index(mask_token))\n", "            use_gmasks.append(use_gmask)\n\t        # only last token for input_ids if past is not None\n\t        if past is not None or past_key_values is not None:\n\t            last_token = input_ids[:, -1].unsqueeze(-1)\n\t            if attention_mask is not None and attention_mask.dtype == torch.bool:\n\t                attention_mask = attention_mask[:, :, -1:]\n\t            else:\n\t                attention_mask = None\n\t            if position_ids is not None:\n\t                position_ids = position_ids[..., -1:]\n", "            else:\n\t                context_lengths = [seq.index(self.config.bos_token_id) for seq in seqs]\n\t                if self.position_encoding_2d:\n\t                    position_ids = torch.tensor(\n\t                        [[mask_position, seq_length - context_length] for mask_position, context_length in\n\t                         zip(mask_positions, context_lengths)], dtype=torch.long, device=input_ids.device).unsqueeze(-1)\n\t                else:\n\t                    position_ids = torch.tensor([mask_position for mask_position in mask_positions], dtype=torch.long,\n\t                                                device=input_ids.device).unsqueeze(-1)\n\t            if past is None:\n", "                past = past_key_values\n\t            return {\n\t                \"input_ids\": last_token,\n\t                \"past_key_values\": past,\n\t                \"position_ids\": position_ids,\n\t                \"attention_mask\": attention_mask\n\t            }\n\t        else:\n\t            if attention_mask is not None and attention_mask.dtype != torch.bool:\n\t                logger.warning_once(f\"The dtype of attention mask ({attention_mask.dtype}) is not bool\")\n", "                attention_mask = None\n\t            if attention_mask is None:\n\t                attention_mask = self.get_masks(\n\t                    input_ids,\n\t                    device=input_ids.device\n\t                )\n\t            if position_ids is None:\n\t                position_ids = self.get_position_ids(\n\t                    input_ids,\n\t                    device=input_ids.device,\n", "                    mask_positions=mask_positions,\n\t                    use_gmasks=use_gmasks\n\t                )\n\t            return {\n\t                \"input_ids\": input_ids,\n\t                \"past_key_values\": past,\n\t                \"position_ids\": position_ids,\n\t                \"attention_mask\": attention_mask\n\t            }\n\t    def forward(\n", "            self,\n\t            input_ids: Optional[torch.Tensor] = None,\n\t            position_ids: Optional[torch.Tensor] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            past_key_values: Optional[Tuple[torch.FloatTensor]] = None,\n\t            inputs_embeds: Optional[torch.Tensor] = None,\n\t            labels: Optional[torch.Tensor] = None,\n\t            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n", "            return_dict: Optional[bool] = None,\n\t    ):\n\t        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        # print(\"input_ids: \", input_ids.shape)\n\t        # print(\"input_ids: \", input_ids.shape)\n\t        transformer_outputs = self.transformer(\n\t            input_ids=input_ids,\n\t            position_ids=position_ids,\n\t            attention_mask=attention_mask,\n", "            past_key_values=past_key_values,\n\t            inputs_embeds=inputs_embeds,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n\t        hidden_states = transformer_outputs[0]\n\t        lm_logits = self.lm_head(hidden_states).permute(1, 0, 2).contiguous()\n\t        loss = None\n", "        if labels is not None:\n\t            lm_logits = lm_logits.to(torch.float32)\n\t            # Shift so that tokens < n predict n\n\t            shift_logits = lm_logits[..., :-1, :].contiguous()\n\t            shift_labels = labels[..., 1:].contiguous()\n\t            # Flatten the tokens\n\t            loss_fct = CrossEntropyLoss(ignore_index=-100)\n\t            loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))\n\t            lm_logits = lm_logits.to(hidden_states.dtype)\n\t            loss = loss.to(hidden_states.dtype)\n", "        if not return_dict:\n\t            output = (lm_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n\t        return CausalLMOutputWithPast(\n\t            loss=loss,\n\t            logits=lm_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n\t            hidden_states=transformer_outputs.hidden_states,\n\t            attentions=transformer_outputs.attentions,\n\t        )\n", "    @staticmethod\n\t    def _reorder_cache(\n\t            past: Tuple[Tuple[torch.Tensor, torch.Tensor], ...], beam_idx: torch.LongTensor\n\t    ) -> Tuple[Tuple[torch.Tensor, torch.Tensor], ...]:\n\t        \"\"\"\n\t        This function is used to re-order the `past_key_values` cache if [`~PreTrainedModel.beam_search`] or\n\t        [`~PreTrainedModel.beam_sample`] is called. This is required to match `past_key_values` with the correct\n\t        beam_idx at every generation step.\n\t        Output shares the same memory storage as `past`.\n\t        \"\"\"\n", "        return tuple(\n\t            (\n\t                layer_past[0].index_select(1, beam_idx.to(layer_past[0].device)),\n\t                layer_past[1].index_select(1, beam_idx.to(layer_past[1].device)),\n\t            )\n\t            for layer_past in past\n\t        )\n\t    def process_response(self, response):\n\t        response = response.strip()\n\t        response = response.replace(\"[[训练时间]]\", \"2023年\")\n", "        punkts = [\n\t            [\",\", \"，\"],\n\t            [\"!\", \"！\"],\n\t            [\":\", \"：\"],\n\t            [\";\", \"；\"],\n\t            [\"\\?\", \"？\"],\n\t        ]\n\t        for item in punkts:\n\t            response = re.sub(r\"([\\u4e00-\\u9fff])%s\" % item[0], r\"\\1%s\" % item[1], response)\n\t            response = re.sub(r\"%s([\\u4e00-\\u9fff])\" % item[0], r\"%s\\1\" % item[1], response)\n", "        return response\n\t    @torch.no_grad()\n\t    def chat(self, tokenizer, query: str, history: List[Tuple[str, str]] = None, max_length: int = 2048, num_beams=1,\n\t             do_sample=True, top_p=0.7, temperature=0.95, logits_processor=None, **kwargs):\n\t        if history is None:\n\t            history = []\n\t        if logits_processor is None:\n\t            logits_processor = LogitsProcessorList()\n\t        logits_processor.append(InvalidScoreLogitsProcessor())\n\t        gen_kwargs = {\"max_length\": max_length, \"num_beams\": num_beams, \"do_sample\": do_sample, \"top_p\": top_p,\n", "                      \"temperature\": temperature, \"logits_processor\": logits_processor, **kwargs}\n\t        if not history:\n\t            prompt = query\n\t        else:\n\t            prompt = \"\"\n\t            for i, (old_query, response) in enumerate(history):\n\t                prompt += \"[Round {}]\\n问：{}\\n答：{}\\n\".format(i, old_query, response)\n\t            prompt += \"[Round {}]\\n问：{}\\n答：\".format(len(history), query)\n\t        inputs = tokenizer([prompt], return_tensors=\"pt\")\n\t        inputs = inputs.to(self.device)\n", "        outputs = self.generate(**inputs, **gen_kwargs)\n\t        outputs = outputs.tolist()[0][len(inputs[\"input_ids\"][0]):]\n\t        response = tokenizer.decode(outputs)\n\t        response = self.process_response(response)\n\t        history = history + [(query, response)]\n\t        return response, history\n\t    @torch.no_grad()\n\t    def stream_chat(self, tokenizer, query: str, history: List[Tuple[str, str]] = None, max_length: int = 2048,\n\t                    do_sample=True, top_p=0.7, temperature=0.95, logits_processor=None, **kwargs):\n\t        if history is None:\n", "            history = []\n\t        if logits_processor is None:\n\t            logits_processor = LogitsProcessorList()\n\t        logits_processor.append(InvalidScoreLogitsProcessor())\n\t        gen_kwargs = {\"max_length\": max_length, \"do_sample\": do_sample, \"top_p\": top_p,\n\t                      \"temperature\": temperature, \"logits_processor\": logits_processor, **kwargs}\n\t        if not history:\n\t            prompt = query\n\t        else:\n\t            prompt = \"\"\n", "            for i, (old_query, response) in enumerate(history):\n\t                prompt += \"[Round {}]\\n问：{}\\n答：{}\\n\".format(i, old_query, response)\n\t            prompt += \"[Round {}]\\n问：{}\\n答：\".format(len(history), query)\n\t        inputs = tokenizer([prompt], return_tensors=\"pt\")\n\t        inputs = inputs.to(self.device)\n\t        for outputs in self.stream_generate(**inputs, **gen_kwargs):\n\t            outputs = outputs.tolist()[0][len(inputs[\"input_ids\"][0]):]\n\t            response = tokenizer.decode(outputs)\n\t            response = self.process_response(response)\n\t            new_history = history + [(query, response)]\n", "            yield response, new_history\n\t    @torch.no_grad()\n\t    def stream_generate(\n\t            self,\n\t            input_ids,\n\t            generation_config: Optional[GenerationConfig] = None,\n\t            logits_processor: Optional[LogitsProcessorList] = None,\n\t            stopping_criteria: Optional[StoppingCriteriaList] = None,\n\t            prefix_allowed_tokens_fn: Optional[Callable[[int, torch.Tensor], List[int]]] = None,\n\t            **kwargs,\n", "    ):\n\t        batch_size, input_ids_seq_length = input_ids.shape[0], input_ids.shape[-1]\n\t        if generation_config is None:\n\t            generation_config = self.generation_config\n\t        generation_config = copy.deepcopy(generation_config)\n\t        model_kwargs = generation_config.update(**kwargs)\n\t        bos_token_id, eos_token_id = generation_config.bos_token_id, generation_config.eos_token_id\n\t        if isinstance(eos_token_id, int):\n\t            eos_token_id = [eos_token_id]\n\t        has_default_max_length = kwargs.get(\"max_length\") is None and generation_config.max_length is not None\n", "        if has_default_max_length and generation_config.max_new_tokens is None:\n\t            warnings.warn(\n\t                f\"Using `max_length`'s default ({generation_config.max_length}) to control the generation length. \"\n\t                \"This behaviour is deprecated and will be removed from the config in v5 of Transformers -- we\"\n\t                \" recommend using `max_new_tokens` to control the maximum length of the generation.\",\n\t                UserWarning,\n\t            )\n\t        elif generation_config.max_new_tokens is not None:\n\t            generation_config.max_length = generation_config.max_new_tokens + input_ids_seq_length\n\t            if not has_default_max_length:\n", "                logger.warn(\n\t                    f\"Both `max_new_tokens` (={generation_config.max_new_tokens}) and `max_length`(=\"\n\t                    f\"{generation_config.max_length}) seem to have been set. `max_new_tokens` will take precedence. \"\n\t                    \"Please refer to the documentation for more information. \"\n\t                    \"(https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\",\n\t                    UserWarning,\n\t                )\n\t        if input_ids_seq_length >= generation_config.max_length:\n\t            input_ids_string = \"decoder_input_ids\" if self.config.is_encoder_decoder else \"input_ids\"\n\t            logger.warning(\n", "                f\"Input length of {input_ids_string} is {input_ids_seq_length}, but `max_length` is set to\"\n\t                f\" {generation_config.max_length}. This can lead to unexpected behavior. You should consider\"\n\t                \" increasing `max_new_tokens`.\"\n\t            )\n\t        # 2. Set generation parameters if not already defined\n\t        logits_processor = logits_processor if logits_processor is not None else LogitsProcessorList()\n\t        stopping_criteria = stopping_criteria if stopping_criteria is not None else StoppingCriteriaList()\n\t        logits_processor = self._get_logits_processor(\n\t            generation_config=generation_config,\n\t            input_ids_seq_length=input_ids_seq_length,\n", "            encoder_input_ids=input_ids,\n\t            prefix_allowed_tokens_fn=prefix_allowed_tokens_fn,\n\t            logits_processor=logits_processor,\n\t        )\n\t        stopping_criteria = self._get_stopping_criteria(\n\t            generation_config=generation_config, stopping_criteria=stopping_criteria\n\t        )\n\t        logits_warper = self._get_logits_warper(generation_config)\n\t        unfinished_sequences = input_ids.new(input_ids.shape[0]).fill_(1)\n\t        scores = None\n", "        while True:\n\t            model_inputs = self.prepare_inputs_for_generation(input_ids, **model_kwargs)\n\t            # forward pass to get next token\n\t            outputs = self(\n\t                **model_inputs,\n\t                return_dict=True,\n\t                output_attentions=False,\n\t                output_hidden_states=False,\n\t            )\n\t            next_token_logits = outputs.logits[:, -1, :]\n", "            # pre-process distribution\n\t            next_token_scores = logits_processor(input_ids, next_token_logits)\n\t            next_token_scores = logits_warper(input_ids, next_token_scores)\n\t            # sample\n\t            probs = nn.functional.softmax(next_token_scores, dim=-1)\n\t            if generation_config.do_sample:\n\t                next_tokens = torch.multinomial(probs, num_samples=1).squeeze(1)\n\t            else:\n\t                next_tokens = torch.argmax(probs, dim=-1)\n\t            # update generated ids, model inputs, and length for next step\n", "            input_ids = torch.cat([input_ids, next_tokens[:, None]], dim=-1)\n\t            model_kwargs = self._update_model_kwargs_for_generation(\n\t                outputs, model_kwargs, is_encoder_decoder=self.config.is_encoder_decoder\n\t            )\n\t            unfinished_sequences = unfinished_sequences.mul((sum(next_tokens != i for i in eos_token_id)).long())\n\t            # stop when each sentence is finished, or if we exceed the maximum length\n\t            if unfinished_sequences.max() == 0 or stopping_criteria(input_ids, scores):\n\t                break\n\t            yield input_ids\n\t    def quantize(self, bits: int, empty_init=False, **kwargs):\n", "        if bits == 0:\n\t            return\n\t        from .quantization import quantize\n\t        if self.quantized:\n\t            logger.info(\"Already quantized.\")\n\t            return self\n\t        self.quantized = True\n\t        self.config.quantization_bit = bits\n\t        self.transformer = quantize(self.transformer, bits, empty_init=empty_init, **kwargs)\n\t        return self\n"]}
{"filename": "ft_chatglm_lora/arguments.py", "chunked_list": ["from dataclasses import dataclass, field\n\tfrom typing import Optional\n\t@dataclass\n\tclass ModelArguments:\n\t    \"\"\"\n\t    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.\n\t    \"\"\"\n\t    model_name_or_path: str = field(\n\t        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co/models\"}\n\t    )\n", "    ptuning_checkpoint: str = field(\n\t        default=None, metadata={\"help\": \"Path to p-tuning v2 checkpoints\"}\n\t    )\n\t    config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n\t    )\n\t    tokenizer_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n\t    )\n\t    cache_dir: Optional[str] = field(\n", "        default=None,\n\t        metadata={\"help\": \"Where to store the pretrained models downloaded from huggingface.co\"},\n\t    )\n\t    use_fast_tokenizer: bool = field(\n\t        default=True,\n\t        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n\t    )\n\t    model_revision: str = field(\n\t        default=\"main\",\n\t        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n", "    )\n\t    use_auth_token: bool = field(\n\t        default=False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Will use the token generated when running `huggingface-cli login` (necessary to use this script \"\n\t                \"with private models).\"\n\t            )\n\t        },\n\t    )\n", "    resize_position_embeddings: Optional[bool] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"Whether to automatically resize the position embeddings if `max_source_length` exceeds \"\n\t                \"the model's position embeddings.\"\n\t            )\n\t        },\n\t    )\n\t    quantization_bit: Optional[int] = field(\n", "        default=None\n\t    )\n\t    pre_seq_len: Optional[int] = field(\n\t        default=None\n\t    )\n\t    prefix_projection: bool = field(\n\t        default=False\n\t    )\n\t    trainable: Optional[str] = field(default=\"q_proj,v_proj\")\n\t    lora_rank: Optional[int] = field(default=8)\n", "    lora_dropout: Optional[float] = field(default=0.1)\n\t    lora_alpha: Optional[float] = field(default=32.)\n\t    modules_to_save: Optional[str] = field(default='embed_tokens,lm_head')\n\t    debug_mode: Optional[bool] = field(default=False)\n\t    peft_path: Optional[str] = field(default=None)\n\t@dataclass\n\tclass DataTrainingArguments:\n\t    \"\"\"\n\t    Arguments pertaining to what data we are going to input our model for training and eval.\n\t    \"\"\"\n", "    lang: Optional[str] = field(default=None, metadata={\"help\": \"Language id for summarization.\"})\n\t    dataset_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    dataset_config_name: Optional[str] = field(\n\t        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n\t    )\n\t    prompt_column: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"The name of the column in the datasets containing the full texts (for summarization).\"},\n", "    )\n\t    response_column: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"The name of the column in the datasets containing the summaries (for summarization).\"},\n\t    )\n\t    history_column: Optional[str] = field(\n\t        default=None,\n\t        metadata={\"help\": \"The name of the column in the datasets containing the history of chat.\"},\n\t    )\n\t    train_file: Optional[str] = field(\n", "        default=None, metadata={\"help\": \"The input training data file (a jsonlines or csv file).\"}\n\t    )\n\t    validation_file: Optional[str] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"An optional input evaluation data file to evaluate the metrics (rouge) on (a jsonlines or csv file).\"\n\t            )\n\t        },\n\t    )\n", "    test_file: Optional[str] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": \"An optional input test data file to evaluate the metrics (rouge) on (a jsonlines or csv file).\"\n\t        },\n\t    )\n\t    overwrite_cache: bool = field(\n\t        default=True, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n\t    )\n\t    preprocessing_num_workers: Optional[int] = field(\n", "        default=None,\n\t        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n\t    )\n\t    max_source_length: Optional[int] = field(\n\t        default=1024,\n\t        metadata={\n\t            \"help\": (\n\t                \"The maximum total input sequence length after tokenization. Sequences longer \"\n\t                \"than this will be truncated, sequences shorter will be padded.\"\n\t            )\n", "        },\n\t    )\n\t    max_target_length: Optional[int] = field(\n\t        default=128,\n\t        metadata={\n\t            \"help\": (\n\t                \"The maximum total sequence length for target text after tokenization. Sequences longer \"\n\t                \"than this will be truncated, sequences shorter will be padded.\"\n\t            )\n\t        },\n", "    )\n\t    val_max_target_length: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"The maximum total sequence length for validation target text after tokenization. Sequences longer \"\n\t                \"than this will be truncated, sequences shorter will be padded. Will default to `max_target_length`.\"\n\t                \"This argument is also used to override the ``max_length`` param of ``model.generate``, which is used \"\n\t                \"during ``evaluate`` and ``predict``.\"\n\t            )\n", "        },\n\t    )\n\t    pad_to_max_length: bool = field(\n\t        default=False,\n\t        metadata={\n\t            \"help\": (\n\t                \"Whether to pad all samples to model maximum sentence length. \"\n\t                \"If False, will pad the samples dynamically when batching to the maximum length in the batch. More \"\n\t                \"efficient on GPU but very bad for TPU.\"\n\t            )\n", "        },\n\t    )\n\t    max_train_samples: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n", "    )\n\t    max_eval_samples: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n\t    )\n", "    max_predict_samples: Optional[int] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"For debugging purposes or quicker training, truncate the number of prediction examples to this \"\n\t                \"value if set.\"\n\t            )\n\t        },\n\t    )\n\t    num_beams: Optional[int] = field(\n", "        default=None,\n\t        metadata={\n\t            \"help\": (\n\t                \"Number of beams to use for evaluation. This argument will be passed to ``model.generate``, \"\n\t                \"which is used during ``evaluate`` and ``predict``.\"\n\t            )\n\t        },\n\t    )\n\t    ignore_pad_token_for_loss: bool = field(\n\t        default=True,\n", "        metadata={\n\t            \"help\": \"Whether to ignore the tokens corresponding to padded labels in the loss computation or not.\"\n\t        },\n\t    )\n\t    source_prefix: Optional[str] = field(\n\t        default=\"\", metadata={\"help\": \"A prefix to add before every source text (useful for T5 models).\"}\n\t    )\n\t    forced_bos_token: Optional[str] = field(\n\t        default=None,\n\t        metadata={\n", "            \"help\": (\n\t                \"The token to force as the first generated token after the decoder_start_token_id.\"\n\t                \"Useful for multilingual models like mBART where the first generated token\"\n\t                \"needs to be the target language token (Usually it is the target language token)\"\n\t            )\n\t        },\n\t    )\n\t    def __post_init__(self):\n\t        if self.dataset_name is None and self.train_file is None and self.validation_file is None and self.test_file is None:\n\t            raise ValueError(\"Need either a dataset name or a training/validation/test file.\")\n", "        else:\n\t            if self.train_file is not None:\n\t                extension = self.train_file.split(\".\")[-1]\n\t                assert extension in [\"csv\", \"json\"], \"`train_file` should be a csv or a json file.\"\n\t            if self.validation_file is not None:\n\t                extension = self.validation_file.split(\".\")[-1]\n\t                assert extension in [\"csv\", \"json\"], \"`validation_file` should be a csv or a json file.\"\n\t        if self.val_max_target_length is None:\n\t            self.val_max_target_length = self.max_target_length\n"]}
{"filename": "ft_chatglm_lora/configuration_chatglm.py", "chunked_list": ["\"\"\" ChatGLM model configuration \"\"\"\n\tfrom transformers.configuration_utils import PretrainedConfig\n\tfrom transformers.utils import logging\n\tlogger = logging.get_logger(__name__)\n\tclass ChatGLMConfig(PretrainedConfig):\n\t    r\"\"\"\n\t    This is the configuration class to store the configuration of a [`~ChatGLMModel`].\n\t    It is used to instantiate an ChatGLM model according to the specified arguments, defining the model\n\t    architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of\n\t    the ChatGLM-6B [THUDM/ChatGLM-6B](https://huggingface.co/THUDM/chatglm-6b) architecture.\n", "    Configuration objects inherit from  [`PretrainedConfig`] and can be used\n\t    to control the model outputs. Read the documentation from  [`PretrainedConfig`]\n\t    for more information.\n\t    Args:\n\t        vocab_size (`int`, *optional*, defaults to 150528):\n\t            Vocabulary size of the ChatGLM-6B model. Defines the number of different tokens that can be represented by the\n\t            `inputs_ids` passed when calling [`~ChatGLMModel`] or\n\t            [`~TFChatGLMModel`].\n\t        hidden_size (`int`, *optional*, defaults to 4096):\n\t            Dimension of the encoder layers and the pooler layer.\n", "        num_hidden_layers (`int`, *optional*, defaults to 28):\n\t            Number of hidden layers in the Transformer encoder.\n\t        num_attention_heads (`int`, *optional*, defaults to 32):\n\t            Number of attention heads for each attention layer in the Transformer encoder.\n\t        inner_hidden_size (`int`, *optional*, defaults to 16384):\n\t            Dimension of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n\t        max_sequence_length (`int`, *optional*, defaults to 512):\n\t            The maximum sequence length that this model might ever be used with.\n\t            Typically set this to something large just in case (e.g., 512 or 1024 or 2048).\n\t        layernorm_epsilon (`float`, *optional*, defaults to 1e-5):\n", "            The epsilon used by the layer normalization layers.\n\t        use_cache (`bool`, *optional*, defaults to `True`):\n\t            Whether the model should return the last key/values attentions (not used by all models).\n\t        Example:\n\t    ```python\n\t    >>> from configuration_chatglm import ChatGLMConfig\n\t    >>> from modeling_chatglm import ChatGLMModel\n\t    >>> # Initializing a ChatGLM-6B THUDM/ChatGLM-6B style configuration\n\t    >>> configuration = ChatGLMConfig()\n\t    >>> # Initializing a model from the THUDM/ChatGLM-6B style configuration\n", "    >>> model = ChatGLMModel(configuration)\n\t    >>> # Accessing the model configuration\n\t    >>> configuration = model.config\n\t    ```\n\t\"\"\"\n\t    model_type = \"chatglm\"\n\t    def __init__(\n\t            self,\n\t            vocab_size=150528,\n\t            hidden_size=4096,\n", "            num_layers=28,\n\t            num_attention_heads=32,\n\t            layernorm_epsilon=1e-5,\n\t            use_cache=False,\n\t            bos_token_id=150004,\n\t            eos_token_id=150005,\n\t            mask_token_id=150000,\n\t            gmask_token_id=150001,\n\t            pad_token_id=0,\n\t            max_sequence_length=2048,\n", "            inner_hidden_size=16384,\n\t            position_encoding_2d=True,\n\t            quantization_bit=0,\n\t            pre_seq_len=None,\n\t            prefix_projection=False,\n\t            **kwargs\n\t    ):\n\t        self.num_layers = num_layers\n\t        self.vocab_size = vocab_size\n\t        self.hidden_size = hidden_size\n", "        self.num_attention_heads = num_attention_heads\n\t        self.max_sequence_length = max_sequence_length\n\t        self.layernorm_epsilon = layernorm_epsilon\n\t        self.inner_hidden_size = inner_hidden_size\n\t        self.use_cache = use_cache\n\t        self.bos_token_id = bos_token_id\n\t        self.eos_token_id = eos_token_id\n\t        self.pad_token_id = pad_token_id\n\t        self.mask_token_id = mask_token_id\n\t        self.gmask_token_id = gmask_token_id\n", "        self.position_encoding_2d = position_encoding_2d\n\t        self.quantization_bit = quantization_bit\n\t        self.pre_seq_len = pre_seq_len\n\t        self.prefix_projection = prefix_projection\n\t        super().__init__(\n\t            pad_token_id=pad_token_id,\n\t            bos_token_id=bos_token_id,\n\t            eos_token_id=eos_token_id,\n\t            **kwargs\n\t        )\n"]}
{"filename": "ft_chatglm_lora/main.py", "chunked_list": ["#!/usr/bin/env python\n\t# coding=utf-8\n\t# Copyright 2021 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"\n\tFine-tuning the library models for sequence to sequence.\n\t\"\"\"\n\t# You can also adapt this script on your own sequence to sequence task. Pointers for this are left as comments.\n\timport logging\n", "import os\n\timport sys\n\timport json\n\timport numpy as np\n\tfrom datasets import load_dataset\n\timport jieba \n\tfrom rouge_chinese import Rouge\n\tfrom nltk.translate.bleu_score import sentence_bleu, SmoothingFunction\n\tfrom text2dt_eval.parser import parsing\n\tfrom text2dt_eval.metric import text2dt_metric\n", "import torch\n\timport transformers\n\tfrom transformers import (\n\t    AutoConfig,\n\t    AutoModel,\n\t    AutoTokenizer,\n\t    AutoTokenizer,\n\t    DataCollatorForSeq2Seq,\n\t    HfArgumentParser,\n\t    Seq2SeqTrainingArguments,\n", "    set_seed,\n\t)\n\timport sys\n\tsys.path.append(\"./\")\n\tfrom tokenization_chatglm import ChatGLMTokenizer\n\tfrom configuration_chatglm import ChatGLMConfig\n\tfrom modeling_chatglm import ChatGLMForConditionalGeneration\n\tfrom trainer_seq2seq import Seq2SeqTrainer\n\tfrom arguments import ModelArguments, DataTrainingArguments\n\tfrom peft import PeftModel, LoraConfig, TaskType, get_peft_model, get_peft_model_state_dict\n", "logger = logging.getLogger(__name__)\n\tdef main():\n\t    instruct = \"请形式化地描述以下医疗文本所表达的诊疗决策过程，目标输出格式为“若...[若...]，则...，否则，若...[若...]，则...，否则...”。三元组关系类型包括“临床表现，用药，治疗方案，用法，基本情况，慎用”。\\n输入文本：\"\n\t    RE_instruct = \"请找出以下医疗文本中出现的关系三元组，并按照“[(头实体1, 关系类型1, 尾实体1), (头实体2, 关系类型2, 尾实体2), ...]”的格式输出，目标关系类型包括“临床表现，用药，治疗方案，用法，基本情况，慎用”。\\n输入文本：\"\n\t    TreeS_instruct = \"请用“若”，“则”，“否则”，“或”，“且”，“和”大致表示以下医疗文本的诊疗逻辑框架。\\n输入文本：\"\n\t    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))\n\t    if len(sys.argv) == 2 and sys.argv[1].endswith(\".json\"):\n\t        # If we pass only one argument to the script and it's the path to a json file,\n\t        # let's parse it to get our arguments.\n\t        model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n", "    else:\n\t        model_args, data_args, training_args = parser.parse_args_into_dataclasses()\n\t    # Setup logging\n\t    logging.basicConfig(\n\t        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n\t        datefmt=\"%m/%d/%Y %H:%M:%S\",\n\t        handlers=[logging.StreamHandler(sys.stdout)],\n\t    )\n\t    if training_args.should_log:\n\t        # The default of training_args.log_level is passive, so we set log level at info here to have that default.\n", "        transformers.utils.logging.set_verbosity_info()\n\t    log_level = training_args.get_process_log_level()\n\t    logger.setLevel(log_level)\n\t    # datasets.utils.logging.set_verbosity(log_level)\n\t    transformers.utils.logging.set_verbosity(log_level)\n\t    transformers.utils.logging.enable_default_handler()\n\t    transformers.utils.logging.enable_explicit_format()\n\t    # Log on each process the small summary:\n\t    logger.warning(\n\t        f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"\n", "        + f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"\n\t    )\n\t    logger.info(f\"Data parameters {data_args}\")\n\t    logger.info(f\"Training/evaluation parameters {training_args}\")\n\t    # Set seed before initializing model.\n\t    set_seed(training_args.seed)\n\t    # Load dataset\n\t    data_files = {}\n\t    if data_args.train_file is not None:\n\t        data_files[\"train\"] = data_args.train_file\n", "        extension = data_args.train_file.split(\".\")[-1]\n\t    if data_args.validation_file is not None:\n\t        data_files[\"validation\"] = data_args.validation_file\n\t        extension = data_args.validation_file.split(\".\")[-1]\n\t    if data_args.test_file is not None:\n\t        data_files[\"test\"] = data_args.test_file\n\t        extension = data_args.test_file.split(\".\")[-1]\n\t    raw_datasets = load_dataset(\n\t        extension,\n\t        data_files=data_files,\n", "        cache_dir=model_args.cache_dir,\n\t        use_auth_token=True if model_args.use_auth_token else None,\n\t    )\n\t    print(\"raw_datasets: \", raw_datasets)\n\t    # print(\"raw_datasets: \", len(raw_datasets[\"train\"]))\n\t    # Load pretrained model and tokenizer\n\t    config = ChatGLMConfig.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        # trust_remote_code=True\n\t    )\n", "    config.pre_seq_len = model_args.pre_seq_len\n\t    config.prefix_projection = model_args.prefix_projection\n\t    tokenizer = ChatGLMTokenizer.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        # trust_remote_code=True\n\t    )\n\t    print(tokenizer.tokenize(instruct))\n\t    model = ChatGLMForConditionalGeneration.from_pretrained(\n\t        model_args.model_name_or_path,\n\t        config=config,\n", "    ).half().cuda()\n\t    # for n, p in model.named_parameters():\n\t    #     print(n, p.requires_grad)\n\t    if model_args.peft_path is not None:\n\t        logger.info(\"Peft from pre-trained model\")\n\t        model = PeftModel.from_pretrained(model, model_args.peft_path)\n\t    else:\n\t        logger.info(\"Init new peft model\")\n\t        target_modules = model_args.trainable.split(',')\n\t        modules_to_save = model_args.modules_to_save.split(',') if model_args.modules_to_save!=\"null\" else None\n", "        lora_rank = model_args.lora_rank\n\t        lora_dropout = model_args.lora_dropout\n\t        lora_alpha = model_args.lora_alpha\n\t        print(target_modules)\n\t        print(lora_rank)\n\t        peft_config = LoraConfig(\n\t            task_type=TaskType.CAUSAL_LM,\n\t            target_modules=target_modules,\n\t            inference_mode=False,\n\t            r=lora_rank, lora_alpha=lora_alpha,\n", "            lora_dropout=lora_dropout,\n\t            modules_to_save=modules_to_save\n\t        )\n\t        model = get_peft_model(model, peft_config)\n\t    model.print_trainable_parameters()\n\t    # for n, p in model.named_parameters():\n\t    #     print(n, p.requires_grad, p.numel())\n\t    prefix = data_args.source_prefix if data_args.source_prefix is not None else \"\"\n\t    # Preprocessing the datasets.\n\t    # We need to tokenize inputs and targets.\n", "    if training_args.do_train:\n\t        column_names = raw_datasets[\"train\"].column_names\n\t    elif training_args.do_eval:\n\t        column_names = raw_datasets[\"validation\"].column_names\n\t    elif training_args.do_predict:\n\t        column_names = raw_datasets[\"test\"].column_names\n\t    else:\n\t        logger.info(\"There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.\")\n\t        return\n\t    # Get the column names for input/target.\n", "    prompt_column = data_args.prompt_column\n\t    response_column = data_args.response_column\n\t    history_column = data_args.history_column\n\t    RE_response_column = 'RE_target'\n\t    TreeS_response_column = 'TreeS_target'\n\t    # Temporarily set max_target_length for training.\n\t    max_target_length = data_args.max_target_length\n\t    def preprocess_function_eval(examples):\n\t        inputs, targets = [], []\n\t        for i in range(len(examples[prompt_column])):\n", "            if not examples[response_column][i]:\n\t                targets.append(\"filled in !\")\n\t            else:\n\t                targets.append(examples[response_column][i])\n\t            if examples[prompt_column][i]:\n\t                query = examples[prompt_column][i]\n\t                query = instruct + query + \"\\n输出：\"\n\t                if history_column is None or len(examples[history_column][i]) == 0:\n\t                    prompt = query\n\t                else:\n", "                    prompt = \"\"\n\t                    history = examples[history_column][i]\n\t                    for turn_idx, (old_query, response) in enumerate(history):\n\t                        prompt += \"[Round {}]\\n问：{}\\n答：{}\\n\".format(turn_idx, old_query, response)\n\t                    prompt += \"[Round {}]\\n问：{}\\n答：\".format(len(history), query)\n\t                inputs.append(prompt)\n\t        inputs = [prefix + inp for inp in inputs]\n\t        model_inputs = tokenizer(inputs,\n\t                                 max_length=data_args.max_source_length,\n\t                                 truncation=True,\n", "                                 padding=True)\n\t        labels = tokenizer(text_target=targets, max_length=max_target_length, truncation=True)\n\t        if data_args.ignore_pad_token_for_loss:\n\t            labels[\"input_ids\"] = [\n\t                [(l if l != tokenizer.pad_token_id else -100) for l in label] for label in labels[\"input_ids\"]\n\t            ]\n\t        model_inputs[\"labels\"] = labels[\"input_ids\"]\n\t        return model_inputs\n\t    def preprocess_function_train(examples, repeat_main_task=1, aug_start_index=1e10):\n\t        max_seq_length = data_args.max_source_length + data_args.max_target_length\n", "        model_inputs = {\n\t            \"input_ids\": [],\n\t            \"labels\": [],\n\t        }\n\t        for i in range(len(examples[prompt_column])):\n\t            # sample for main task training\n\t            if examples[prompt_column][i] and examples[response_column][i]:\n\t                input_ids, labels = construct_train_sample(\n\t                    instruct,\n\t                    examples[prompt_column][i],\n", "                    examples[response_column][i],\n\t                    max_seq_length,\n\t                    None if history_column is None else examples[history_column][i]\n\t                )\n\t                # oversampling to balance # main-task-samples amd # auxilary-task-samples\n\t                for _ in range(repeat_main_task):\n\t                    model_inputs[\"input_ids\"].append(input_ids)\n\t                    model_inputs[\"labels\"].append(labels)\n\t            # sample for auxiliary RE task training\n\t            if examples[prompt_column][i] and examples[RE_response_column][i]:\n", "                # using all non-augmented data as well as hard augmented data (条件结点数量大于2)\n\t                if i < aug_start_index or examples[response_column][i].count('若') > 2:\n\t                    print(i, 'RE_response_column', examples[RE_response_column][i])\n\t                    input_ids, labels = construct_train_sample(\n\t                        RE_instruct,\n\t                        examples[prompt_column][i],\n\t                        examples[RE_response_column][i],\n\t                        max_seq_length,\n\t                        None if history_column is None else examples[history_column][i]\n\t                    )\n", "                    model_inputs[\"input_ids\"].append(input_ids)\n\t                    model_inputs[\"labels\"].append(labels)\n\t            # sample for auxiliary TreeS task training\n\t            if examples[prompt_column][i] and examples[TreeS_response_column][i]:\n\t                # using all non-augmented data as well as hard augmented data (条件结点数量大于2)\n\t                if i < aug_start_index or examples[response_column][i].count('若') > 2:\n\t                    print(i, 'TreeS_response_column', examples[TreeS_response_column][i])\n\t                    input_ids, labels = construct_train_sample(\n\t                        TreeS_instruct,\n\t                        examples[prompt_column][i],\n", "                        examples[TreeS_response_column][i],\n\t                        max_seq_length,\n\t                        None if history_column is None else examples[history_column][i]\n\t                    )\n\t                    model_inputs[\"input_ids\"].append(input_ids)\n\t                    model_inputs[\"labels\"].append(labels)\n\t        return model_inputs\n\t    def construct_train_sample(instruct, query, answer, max_seq_length, history=None):\n\t        query = instruct + query + \"\\n输出：\"\n\t        if history is None:\n", "            prompt = query\n\t        else:\n\t            prompt = \"\"\n\t            for turn_idx, (old_query, response) in enumerate(history):\n\t                prompt += \"[Round {}]\\n问：{}\\n答：{}\\n\".format(turn_idx, old_query, response)\n\t            prompt += \"[Round {}]\\n问：{}\\n答：\".format(len(history), query)\n\t        prompt = prefix + prompt\n\t        a_ids = tokenizer.encode(text=prompt, add_special_tokens=False)\n\t        b_ids = tokenizer.encode(text=answer, add_special_tokens=False)\n\t        if len(a_ids) > data_args.max_source_length - 1:\n", "            a_ids = a_ids[: data_args.max_source_length - 1]\n\t        if len(b_ids) > data_args.max_target_length - 2:\n\t            b_ids = b_ids[: data_args.max_target_length - 2]\n\t        input_ids = tokenizer.build_inputs_with_special_tokens(a_ids, b_ids)\n\t        context_length = input_ids.index(tokenizer.bos_token_id)\n\t        mask_position = context_length - 1\n\t        labels = [-100] * context_length + input_ids[mask_position+1:]\n\t        pad_len = max_seq_length - len(input_ids)\n\t        input_ids = input_ids + [tokenizer.pad_token_id] * pad_len\n\t        labels = labels + [tokenizer.pad_token_id] * pad_len\n", "        # print(\"input_ids: \", len(input_ids))\n\t        # print(\"labels: \", len(labels))\n\t        if data_args.ignore_pad_token_for_loss:\n\t            labels = [(l if l != tokenizer.pad_token_id else -100) for l in labels]\n\t        return input_ids, labels\n\t    def print_dataset_example(example):\n\t        print(\"\\ninput_ids: \",example[\"input_ids\"])\n\t        print(\"inputs: \", tokenizer.decode(example[\"input_ids\"]))\n\t        print(\"label_ids: \", example[\"labels\"])\n\t        print(\"labels: \", tokenizer.decode(example[\"labels\"]))\n", "    if training_args.do_train:\n\t        if \"train\" not in raw_datasets:\n\t            raise ValueError(\"--do_train requires a train dataset\")\n\t        train_dataset = raw_datasets[\"train\"]\n\t        if data_args.max_train_samples is not None:\n\t            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n\t            train_dataset = train_dataset.select(range(max_train_samples))\n\t        with training_args.main_process_first(desc=\"train dataset map pre-processing\"):\n\t            train_dataset = train_dataset.map(\n\t                preprocess_function_train,\n", "                fn_kwargs={'repeat_main_task': 2, 'aug_start_index': 400},\n\t                batched=True,\n\t                num_proc=data_args.preprocessing_num_workers,\n\t                remove_columns=column_names,\n\t                load_from_cache_file=False,\n\t                desc=\"Running tokenizer on train dataset\",\n\t            )\n\t        print_dataset_example(train_dataset[0])\n\t    if training_args.do_eval:\n\t        max_target_length = data_args.val_max_target_length\n", "        if \"validation\" not in raw_datasets:\n\t            raise ValueError(\"--do_eval requires a validation dataset\")\n\t        eval_dataset = raw_datasets[\"validation\"]\n\t        if data_args.max_eval_samples is not None:\n\t            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n\t            eval_dataset = eval_dataset.select(range(max_eval_samples))\n\t        with training_args.main_process_first(desc=\"validation dataset map pre-processing\"):\n\t            eval_dataset = eval_dataset.map(\n\t                preprocess_function_eval,\n\t                batched=True,\n", "                num_proc=data_args.preprocessing_num_workers,\n\t                remove_columns=column_names,\n\t                load_from_cache_file=False,\n\t                desc=\"Running tokenizer on validation dataset\",\n\t            )\n\t        print_dataset_example(eval_dataset[0])\n\t    if training_args.do_predict:\n\t        max_target_length = data_args.val_max_target_length\n\t        if \"test\" not in raw_datasets:\n\t            raise ValueError(\"--do_predict requires a test dataset\")\n", "        predict_dataset = raw_datasets[\"test\"]\n\t        if data_args.max_predict_samples is not None:\n\t            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n\t            predict_dataset = predict_dataset.select(range(max_predict_samples))\n\t        with training_args.main_process_first(desc=\"prediction dataset map pre-processing\"):\n\t            predict_dataset = predict_dataset.map(\n\t                preprocess_function_eval,\n\t                batched=True,\n\t                num_proc=data_args.preprocessing_num_workers,\n\t                remove_columns=column_names,\n", "                load_from_cache_file=False,\n\t                desc=\"Running tokenizer on prediction dataset\",\n\t            )\n\t        print_dataset_example(predict_dataset[0])\n\t    # Data collator\n\t    label_pad_token_id = -100 if data_args.ignore_pad_token_for_loss else tokenizer.pad_token_id\n\t    data_collator = DataCollatorForSeq2Seq(\n\t        tokenizer,\n\t        model=model,\n\t        label_pad_token_id=label_pad_token_id,\n", "        pad_to_multiple_of=None,\n\t        padding=False\n\t    )\n\t    # Metric\n\t    def compute_metrics(eval_preds):\n\t        preds, labels = eval_preds\n\t        if isinstance(preds, tuple):\n\t            preds = preds[0]\n\t        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n\t        if data_args.ignore_pad_token_for_loss:\n", "            # Replace -100 in the labels as we can't decode them.\n\t            labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n\t        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n\t        # print('decoded_labels', decoded_labels)\n\t        # print('decoded_preds', decoded_preds)\n\t        score_dict = dict()\n\t        gold_trees = list(map(parsing, decoded_labels))\n\t        pred_trees = list(map(parsing, decoded_preds))\n\t        text2dt_scores = text2dt_metric(gold_trees, pred_trees)\n\t        score_dict.update(text2dt_scores)\n", "        return score_dict\n\t    # Override the decoding parameters of Seq2SeqTrainer\n\t    training_args.generation_max_length = (\n\t        training_args.generation_max_length\n\t        if training_args.generation_max_length is not None\n\t        else data_args.val_max_target_length\n\t    )\n\t    training_args.generation_num_beams = (\n\t        data_args.num_beams if data_args.num_beams is not None else training_args.generation_num_beams\n\t    )\n", "    # Initialize our Trainer\n\t    trainer = Seq2SeqTrainer(\n\t        model=model,\n\t        args=training_args,\n\t        train_dataset=train_dataset if training_args.do_train else None,\n\t        eval_dataset=eval_dataset if training_args.do_eval else None,\n\t        tokenizer=tokenizer,\n\t        data_collator=data_collator,\n\t        compute_metrics=compute_metrics if training_args.predict_with_generate else None,\n\t        save_prefixencoder=model_args.pre_seq_len is not None\n", "    )\n\t    # Training\n\t    if training_args.do_train:\n\t        checkpoint = None\n\t        if training_args.resume_from_checkpoint is not None:\n\t            checkpoint = training_args.resume_from_checkpoint\n\t        # elif last_checkpoint is not None:\n\t        #     checkpoint = last_checkpoint\n\t        model.gradient_checkpointing_enable()\n\t        model.enable_input_require_grads()\n", "        train_result = trainer.train(resume_from_checkpoint=checkpoint)\n\t        # trainer.save_model()  # Saves the tokenizer too for easy upload\n\t        metrics = train_result.metrics\n\t        max_train_samples = (\n\t            data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)\n\t        )\n\t        metrics[\"train_samples\"] = min(max_train_samples, len(train_dataset))\n\t        trainer.log_metrics(\"train\", metrics)\n\t        trainer.save_metrics(\"train\", metrics)\n\t        trainer.save_state()\n", "    # Evaluation\n\t    results = {}\n\t    max_seq_length = data_args.max_source_length + data_args.max_target_length + 1\n\t    if training_args.do_eval:\n\t        logger.info(\"*** Evaluate ***\")\n\t        metrics = trainer.evaluate(metric_key_prefix=\"eval\", do_sample=False, top_p=0.7, max_length=max_seq_length, temperature=0.95)\n\t        max_eval_samples = data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)\n\t        metrics[\"eval_samples\"] = min(max_eval_samples, len(eval_dataset))\n\t        trainer.log_metrics(\"eval\", metrics)\n\t        trainer.save_metrics(\"eval\", metrics)\n", "    if training_args.do_predict:\n\t        logger.info(\"*** Predict ***\")\n\t        # 读取原test file\n\t        list_test_samples = []\n\t        with open(data_args.test_file, \"r\", encoding=\"utf-8\") as f:\n\t            for line in f:\n\t                line = json.loads(line)\n\t                list_test_samples.append(line)\n\t        predict_results = trainer.predict(\n\t            predict_dataset,\n", "            metric_key_prefix=\"predict\",\n\t            max_new_tokens=data_args.max_target_length,\n\t            do_sample=False,\n\t            top_p=0.7,\n\t            temperature=0.95,\n\t        )\n\t        metrics = predict_results.metrics\n\t        max_predict_samples = (\n\t            data_args.max_predict_samples if data_args.max_predict_samples is not None else len(predict_dataset)\n\t        )\n", "        metrics[\"predict_samples\"] = min(max_predict_samples, len(predict_dataset))\n\t        trainer.log_metrics(\"predict\", metrics)\n\t        trainer.save_metrics(\"predict\", metrics)\n\t        if trainer.is_world_process_zero():\n\t            if training_args.predict_with_generate:\n\t                predictions = tokenizer.batch_decode(\n\t                    predict_results.predictions, skip_special_tokens=True, clean_up_tokenization_spaces=True\n\t                )\n\t                predictions = [pred.strip() for pred in predictions]\n\t                labels = tokenizer.batch_decode(\n", "                    predict_results.label_ids, skip_special_tokens=True, clean_up_tokenization_spaces=True\n\t                )\n\t                labels = [label.strip() for label in labels]\n\t                assert len(labels) == len(list_test_samples)\n\t                output_prediction_file = os.path.join(training_args.output_dir, \"pred_trees.json\")\n\t                with open(output_prediction_file, \"w\", encoding=\"utf-8\") as writer:\n\t                    list_res = []\n\t                    for idx, (p, l) in enumerate(zip(predictions, labels)):\n\t                        text = list_test_samples[idx]['input']\n\t                        res = {'text': text, 'tree': parsing(p)}\n", "                        list_res.append(res)\n\t                    json.dump(list_res, writer, ensure_ascii=False, indent=2)\n\t    return results\n\tdef _mp_fn(index):\n\t    # For xla_spawn (TPUs)\n\t    main()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "ft_chatglm_lora/trainer_seq2seq.py", "chunked_list": ["# Copyright 2020 The HuggingFace Team. All rights reserved.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom typing import Any, Dict, List, Optional, Tuple, Union\n\timport torch\n\tfrom torch import nn\n\tfrom torch.utils.data import Dataset\n\tfrom transformers.deepspeed import is_deepspeed_zero3_enabled\n\tfrom transformers.trainer_utils import PredictionOutput\n\tfrom transformers.utils import logging\n", "from trainer import Trainer\n\tlogger = logging.get_logger(__name__)\n\tclass Seq2SeqTrainer(Trainer):\n\t    def evaluate(\n\t        self,\n\t        eval_dataset: Optional[Dataset] = None,\n\t        ignore_keys: Optional[List[str]] = None,\n\t        metric_key_prefix: str = \"eval\",\n\t        **gen_kwargs\n\t    ) -> Dict[str, float]:\n", "        \"\"\"\n\t        Run evaluation and returns metrics.\n\t        The calling script will be responsible for providing a method to compute metrics, as they are task-dependent\n\t        (pass it to the init `compute_metrics` argument).\n\t        You can also subclass and override this method to inject custom behavior.\n\t        Args:\n\t            eval_dataset (`Dataset`, *optional*):\n\t                Pass a dataset if you wish to override `self.eval_dataset`. If it is an [`~datasets.Dataset`], columns\n\t                not accepted by the `model.forward()` method are automatically removed. It must implement the `__len__`\n\t                method.\n", "            ignore_keys (`List[str]`, *optional*):\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n\t                gathering predictions.\n\t            metric_key_prefix (`str`, *optional*, defaults to `\"eval\"`):\n\t                An optional prefix to be used as the metrics key prefix. For example the metrics \"bleu\" will be named\n\t                \"eval_bleu\" if the prefix is `\"eval\"` (default)\n\t            max_length (`int`, *optional*):\n\t                The maximum target length to use when predicting with the generate method.\n\t            num_beams (`int`, *optional*):\n\t                Number of beams for beam search that will be used when predicting with the generate method. 1 means no\n", "                beam search.\n\t            gen_kwargs:\n\t                Additional `generate` specific kwargs.\n\t        Returns:\n\t            A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The\n\t            dictionary also contains the epoch number which comes from the training state.\n\t        \"\"\"\n\t        gen_kwargs = gen_kwargs.copy()\n\t        if gen_kwargs.get(\"max_length\") is None and gen_kwargs.get(\"max_new_tokens\") is None:\n\t            gen_kwargs[\"max_length\"] = self.args.generation_max_length\n", "        gen_kwargs[\"num_beams\"] = (\n\t            gen_kwargs[\"num_beams\"] if gen_kwargs.get(\"num_beams\") is not None else self.args.generation_num_beams\n\t        )\n\t        self._gen_kwargs = gen_kwargs\n\t        return super().evaluate(eval_dataset, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)\n\t    def predict(\n\t        self,\n\t        test_dataset: Dataset,\n\t        ignore_keys: Optional[List[str]] = None,\n\t        metric_key_prefix: str = \"test\",\n", "        **gen_kwargs\n\t    ) -> PredictionOutput:\n\t        \"\"\"\n\t        Run prediction and returns predictions and potential metrics.\n\t        Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method\n\t        will also return metrics, like in `evaluate()`.\n\t        Args:\n\t            test_dataset (`Dataset`):\n\t                Dataset to run the predictions on. If it is a [`~datasets.Dataset`], columns not accepted by the\n\t                `model.forward()` method are automatically removed. Has to implement the method `__len__`\n", "            ignore_keys (`List[str]`, *optional*):\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n\t                gathering predictions.\n\t            metric_key_prefix (`str`, *optional*, defaults to `\"eval\"`):\n\t                An optional prefix to be used as the metrics key prefix. For example the metrics \"bleu\" will be named\n\t                \"eval_bleu\" if the prefix is `\"eval\"` (default)\n\t            max_length (`int`, *optional*):\n\t                The maximum target length to use when predicting with the generate method.\n\t            num_beams (`int`, *optional*):\n\t                Number of beams for beam search that will be used when predicting with the generate method. 1 means no\n", "                beam search.\n\t            gen_kwargs:\n\t                Additional `generate` specific kwargs.\n\t        <Tip>\n\t        If your predictions or labels have different sequence lengths (for instance because you're doing dynamic\n\t        padding in a token classification task) the predictions will be padded (on the right) to allow for\n\t        concatenation into one array. The padding index is -100.\n\t        </Tip>\n\t        Returns: *NamedTuple* A namedtuple with the following keys:\n\t            - predictions (`np.ndarray`): The predictions on `test_dataset`.\n", "            - label_ids (`np.ndarray`, *optional*): The labels (if the dataset contained some).\n\t            - metrics (`Dict[str, float]`, *optional*): The potential dictionary of metrics (if the dataset contained\n\t              labels).\n\t        \"\"\"\n\t        gen_kwargs = gen_kwargs.copy()\n\t        if gen_kwargs.get(\"max_length\") is None and gen_kwargs.get(\"max_new_tokens\") is None:\n\t            gen_kwargs[\"max_length\"] = self.args.generation_max_length\n\t        gen_kwargs[\"num_beams\"] = (\n\t            gen_kwargs[\"num_beams\"] if gen_kwargs.get(\"num_beams\") is not None else self.args.generation_num_beams\n\t        )\n", "        self._gen_kwargs = gen_kwargs\n\t        return super().predict(test_dataset, ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix)\n\t    def prediction_step(\n\t        self,\n\t        model: nn.Module,\n\t        inputs: Dict[str, Union[torch.Tensor, Any]],\n\t        prediction_loss_only: bool,\n\t        ignore_keys: Optional[List[str]] = None,\n\t    ) -> Tuple[Optional[float], Optional[torch.Tensor], Optional[torch.Tensor]]:\n\t        \"\"\"\n", "        Perform an evaluation step on `model` using `inputs`.\n\t        Subclass and override to inject custom behavior.\n\t        Args:\n\t            model (`nn.Module`):\n\t                The model to evaluate.\n\t            inputs (`Dict[str, Union[torch.Tensor, Any]]`):\n\t                The inputs and targets of the model.\n\t                The dictionary will be unpacked before being fed to the model. Most models expect the targets under the\n\t                argument `labels`. Check your model's documentation for all accepted arguments.\n\t            prediction_loss_only (`bool`):\n", "                Whether or not to return the loss only.\n\t        Return:\n\t            Tuple[Optional[float], Optional[torch.Tensor], Optional[torch.Tensor]]: A tuple with the loss, logits and\n\t            labels (each being optional).\n\t        \"\"\"\n\t        if not self.args.predict_with_generate or prediction_loss_only:\n\t            return super().prediction_step(\n\t                model, inputs, prediction_loss_only=prediction_loss_only, ignore_keys=ignore_keys\n\t            )\n\t        has_labels = \"labels\" in inputs\n", "        inputs = self._prepare_inputs(inputs)\n\t        # XXX: adapt synced_gpus for fairscale as well\n\t        gen_kwargs = self._gen_kwargs.copy()\n\t        if gen_kwargs.get(\"max_length\") is None and gen_kwargs.get(\"max_new_tokens\") is None:\n\t            gen_kwargs[\"max_length\"] = self.model.config.max_length\n\t        gen_kwargs[\"num_beams\"] = (\n\t            gen_kwargs[\"num_beams\"] if gen_kwargs.get(\"num_beams\") is not None else self.model.config.num_beams\n\t        )\n\t        default_synced_gpus = True if is_deepspeed_zero3_enabled() else False\n\t        gen_kwargs[\"synced_gpus\"] = (\n", "            gen_kwargs[\"synced_gpus\"] if gen_kwargs.get(\"synced_gpus\") is not None else default_synced_gpus\n\t        )\n\t        if \"attention_mask\" in inputs:\n\t            gen_kwargs[\"attention_mask\"] = inputs.get(\"attention_mask\", None)\n\t        if \"position_ids\" in inputs:\n\t            gen_kwargs[\"position_ids\"] = inputs.get(\"position_ids\", None)\n\t        if \"global_attention_mask\" in inputs:\n\t            gen_kwargs[\"global_attention_mask\"] = inputs.get(\"global_attention_mask\", None)\n\t        # prepare generation inputs\n\t        # some encoder-decoder models can have varying encoder's and thus\n", "        # varying model input names\n\t        if hasattr(self.model, \"encoder\") and self.model.encoder.main_input_name != self.model.main_input_name:\n\t            generation_inputs = inputs[self.model.encoder.main_input_name]\n\t        else:\n\t            generation_inputs = inputs[self.model.main_input_name]\n\t        gen_kwargs[\"input_ids\"] = generation_inputs\n\t        generated_tokens = self.model.generate(**gen_kwargs)\n\t        generated_tokens = generated_tokens[:, generation_inputs.size()[-1]:]\n\t        # in case the batch is shorter than max length, the output should be padded\n\t        if gen_kwargs.get(\"max_length\") is not None and generated_tokens.shape[-1] < gen_kwargs[\"max_length\"]:\n", "            generated_tokens = self._pad_tensors_to_max_len(generated_tokens, gen_kwargs[\"max_length\"])\n\t        elif gen_kwargs.get(\"max_new_tokens\") is not None and generated_tokens.shape[-1] < (\n\t            gen_kwargs[\"max_new_tokens\"] + 1\n\t        ):\n\t            generated_tokens = self._pad_tensors_to_max_len(generated_tokens, gen_kwargs[\"max_new_tokens\"] + 1)\n\t        loss = None\n\t        if self.args.prediction_loss_only:\n\t            return (loss, None, None)\n\t        if has_labels:\n\t            labels = inputs[\"labels\"]\n", "            if gen_kwargs.get(\"max_length\") is not None and labels.shape[-1] < gen_kwargs[\"max_length\"]:\n\t                labels = self._pad_tensors_to_max_len(labels, gen_kwargs[\"max_length\"])\n\t            elif gen_kwargs.get(\"max_new_tokens\") is not None and labels.shape[-1] < (\n\t                gen_kwargs[\"max_new_tokens\"] + 1\n\t            ):\n\t                labels = self._pad_tensors_to_max_len(labels, (gen_kwargs[\"max_new_tokens\"] + 1))\n\t        else:\n\t            labels = None\n\t        return (loss, generated_tokens, labels)\n\t    def _pad_tensors_to_max_len(self, tensor, max_length):\n", "        if self.tokenizer is not None and hasattr(self.tokenizer, \"pad_token_id\"):\n\t            # If PAD token is not defined at least EOS token has to be defined\n\t            pad_token_id = (\n\t                self.tokenizer.pad_token_id if self.tokenizer.pad_token_id is not None else self.tokenizer.eos_token_id\n\t            )\n\t        else:\n\t            if self.model.config.pad_token_id is not None:\n\t                pad_token_id = self.model.config.pad_token_id\n\t            else:\n\t                raise ValueError(\"Pad_token_id must be set in the configuration of the model, in order to pad tensors\")\n", "        padded_tensor = pad_token_id * torch.ones(\n\t            (tensor.shape[0], max_length), dtype=tensor.dtype, device=tensor.device\n\t        )\n\t        padded_tensor[:, : tensor.shape[-1]] = tensor\n\t        return padded_tensor\n\t    def _maybe_log_save_evaluate(self, tr_loss, model, trial, epoch, ignore_keys_for_eval):\n\t        if self.control.should_log:\n\t            logs: Dict[str, float] = {}\n\t            # all_gather + mean() to get average loss over all processes\n\t            tr_loss_scalar = self._nested_gather(tr_loss).mean().item()\n", "            # reset tr_loss to zero\n\t            tr_loss -= tr_loss\n\t            logs[\"loss\"] = round(tr_loss_scalar / (self.state.global_step - self._globalstep_last_logged), 4)\n\t            logs[\"learning_rate\"] = self._get_learning_rate()\n\t            self._total_loss_scalar += tr_loss_scalar\n\t            self._globalstep_last_logged = self.state.global_step\n\t            self.store_flos()\n\t            self.log(logs)\n\t        metrics = None\n\t        if self.control.should_evaluate:\n", "            if isinstance(self.eval_dataset, dict):\n\t                for eval_dataset_name, eval_dataset in self.eval_dataset.items():\n\t                    metrics = self.evaluate(\n\t                        eval_dataset=eval_dataset,\n\t                        ignore_keys=ignore_keys_for_eval,\n\t                        metric_key_prefix=f\"eval_{eval_dataset_name}\",\n\t                        do_sample=False, max_new_tokens=512, top_p=0.7, temperature=0.95\n\t                    )\n\t            else:\n\t                metrics = self.evaluate(ignore_keys=ignore_keys_for_eval,\n", "                                        do_sample=False, max_new_tokens=512, top_p=0.7, temperature=0.95)\n\t            self._report_to_hp_search(trial, self.state.global_step, metrics)\n\t        if self.control.should_save:\n\t            self._save_checkpoint(model, trial, metrics=metrics)\n\t            self.control = self.callback_handler.on_save(self.args, self.state, self.control)"]}
{"filename": "ft_chatglm_lora/trainer.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2020-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"\n\tThe Trainer class, to easily train a 🤗 Transformers from scratch or finetune it on a new task.\n\t\"\"\"\n\timport contextlib\n\timport functools\n\timport glob\n", "import inspect\n\timport math\n\timport os\n\timport random\n\timport re\n\timport shutil\n\timport sys\n\timport time\n\timport warnings\n\tfrom collections.abc import Mapping\n", "from distutils.util import strtobool\n\tfrom pathlib import Path\n\tfrom typing import TYPE_CHECKING, Any, Callable, Dict, List, Optional, Tuple, Union\n\tfrom tqdm.auto import tqdm\n\t# Integrations must be imported before ML frameworks:\n\t# isort: off\n\tfrom transformers.integrations import (\n\t    default_hp_search_backend,\n\t    get_reporting_integration_callbacks,\n\t    hp_params,\n", "    is_fairscale_available,\n\t    is_optuna_available,\n\t    is_ray_tune_available,\n\t    is_sigopt_available,\n\t    is_wandb_available,\n\t    run_hp_search_optuna,\n\t    run_hp_search_ray,\n\t    run_hp_search_sigopt,\n\t    run_hp_search_wandb,\n\t)\n", "# isort: on\n\timport numpy as np\n\timport torch\n\timport torch.distributed as dist\n\tfrom huggingface_hub import Repository, create_repo\n\tfrom packaging import version\n\tfrom torch import nn\n\tfrom torch.utils.data import DataLoader, Dataset, RandomSampler, SequentialSampler\n\tfrom torch.utils.data.distributed import DistributedSampler\n\tfrom transformers import __version__\n", "from transformers.configuration_utils import PretrainedConfig\n\tfrom transformers.data.data_collator import DataCollator, DataCollatorWithPadding, default_data_collator\n\tfrom transformers.debug_utils import DebugOption, DebugUnderflowOverflow\n\tfrom transformers.deepspeed import deepspeed_init, is_deepspeed_zero3_enabled\n\tfrom transformers.dependency_versions_check import dep_version_check\n\tfrom transformers.modelcard import TrainingSummary\n\tfrom transformers.modeling_utils import PreTrainedModel, load_sharded_checkpoint, unwrap_model\n\tfrom transformers.models.auto.modeling_auto import MODEL_FOR_CAUSAL_LM_MAPPING_NAMES, MODEL_MAPPING_NAMES\n\tfrom transformers.optimization import Adafactor, get_scheduler\n\tfrom transformers.pytorch_utils import ALL_LAYERNORM_LAYERS, is_torch_greater_or_equal_than_1_10, is_torch_less_than_1_11\n", "from transformers.tokenization_utils_base import PreTrainedTokenizerBase\n\tfrom transformers.trainer_callback import (\n\t    CallbackHandler,\n\t    DefaultFlowCallback,\n\t    PrinterCallback,\n\t    ProgressCallback,\n\t    TrainerCallback,\n\t    TrainerControl,\n\t    TrainerState,\n\t)\n", "from transformers.trainer_pt_utils import (\n\t    DistributedLengthGroupedSampler,\n\t    DistributedSamplerWithLoop,\n\t    DistributedTensorGatherer,\n\t    IterableDatasetShard,\n\t    LabelSmoother,\n\t    LengthGroupedSampler,\n\t    SequentialDistributedSampler,\n\t    ShardSampler,\n\t    distributed_broadcast_scalars,\n", "    distributed_concat,\n\t    find_batch_size,\n\t    get_module_class_from_name,\n\t    get_parameter_names,\n\t    nested_concat,\n\t    nested_detach,\n\t    nested_numpify,\n\t    nested_truncate,\n\t    nested_xla_mesh_reduce,\n\t    reissue_pt_warnings,\n", ")\n\tfrom transformers.trainer_utils import (\n\t    PREFIX_CHECKPOINT_DIR,\n\t    BestRun,\n\t    EvalLoopOutput,\n\t    EvalPrediction,\n\t    FSDPOption,\n\t    HPSearchBackend,\n\t    HubStrategy,\n\t    IntervalStrategy,\n", "    PredictionOutput,\n\t    RemoveColumnsCollator,\n\t    ShardedDDPOption,\n\t    TrainerMemoryTracker,\n\t    TrainOutput,\n\t    default_compute_objective,\n\t    default_hp_space,\n\t    denumpify_detensorize,\n\t    enable_full_determinism,\n\t    find_executable_batch_size,\n", "    get_last_checkpoint,\n\t    has_length,\n\t    number_of_arguments,\n\t    seed_worker,\n\t    set_seed,\n\t    speed_metrics,\n\t)\n\tfrom transformers.training_args import OptimizerNames, ParallelMode, TrainingArguments\n\tfrom transformers.utils import (\n\t    WEIGHTS_INDEX_NAME,\n", "    can_return_loss,\n\t    find_labels,\n\t    get_full_repo_name,\n\t    is_accelerate_available,\n\t    is_apex_available,\n\t    is_datasets_available,\n\t    is_in_notebook,\n\t    is_ipex_available,\n\t    is_sagemaker_dp_enabled,\n\t    is_sagemaker_mp_enabled,\n", "    is_torch_compile_available,\n\t    is_torch_neuroncore_available,\n\t    is_torch_tpu_available,\n\t    logging,\n\t)\n\tfrom transformers.utils.generic import ContextManagers\n\t# Following PEFT Lora\n\tWEIGHTS_NAME = \"adapter_model.bin\"\n\tCONFIG_NAME = \"adapter_config.json\"\n\tfrom peft.utils.save_and_load import set_peft_model_state_dict\n", "_is_native_cpu_amp_available = is_torch_greater_or_equal_than_1_10\n\tDEFAULT_CALLBACKS = [DefaultFlowCallback]\n\tDEFAULT_PROGRESS_CALLBACK = ProgressCallback\n\tif is_in_notebook():\n\t    from transformers.utils.notebook import NotebookProgressCallback\n\t    DEFAULT_PROGRESS_CALLBACK = NotebookProgressCallback\n\tif is_apex_available():\n\t    from apex import amp\n\tif is_datasets_available():\n\t    import datasets\n", "if is_torch_tpu_available(check_device=False):\n\t    import torch_xla.core.xla_model as xm\n\t    import torch_xla.debug.metrics as met\n\t    import torch_xla.distributed.parallel_loader as pl\n\tif is_fairscale_available():\n\t    dep_version_check(\"fairscale\")\n\t    import fairscale\n\t    from fairscale.nn.data_parallel import FullyShardedDataParallel as FullyShardedDDP\n\t    from fairscale.nn.data_parallel import ShardedDataParallel as ShardedDDP\n\t    from fairscale.nn.wrap import auto_wrap\n", "    from fairscale.optim import OSS\n\t    from fairscale.optim.grad_scaler import ShardedGradScaler\n\tif is_sagemaker_mp_enabled():\n\t    import smdistributed.modelparallel.torch as smp\n\t    from smdistributed.modelparallel import __version__ as SMP_VERSION\n\t    IS_SAGEMAKER_MP_POST_1_10 = version.parse(SMP_VERSION) >= version.parse(\"1.10\")\n\t    from transformers.trainer_pt_utils import smp_forward_backward, smp_forward_only, smp_gather, smp_nested_concat\n\telse:\n\t    IS_SAGEMAKER_MP_POST_1_10 = False\n\tskip_first_batches = None\n", "if is_accelerate_available():\n\t    from accelerate import __version__ as accelerate_version\n\t    if version.parse(accelerate_version) >= version.parse(\"0.16\"):\n\t        from accelerate import skip_first_batches\n\tif TYPE_CHECKING:\n\t    import optuna\n\tlogger = logging.get_logger(__name__)\n\t# Name of the files used for checkpointing\n\tTRAINING_ARGS_NAME = \"training_args.bin\"\n\tTRAINER_STATE_NAME = \"trainer_state.json\"\n", "OPTIMIZER_NAME = \"optimizer.pt\"\n\tSCHEDULER_NAME = \"scheduler.pt\"\n\tSCALER_NAME = \"scaler.pt\"\n\tclass Trainer:\n\t    \"\"\"\n\t    Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for 🤗 Transformers.\n\t    Args:\n\t        model ([`PreTrainedModel`] or `torch.nn.Module`, *optional*):\n\t            The model to train, evaluate or use for predictions. If not provided, a `model_init` must be passed.\n\t            <Tip>\n", "            [`Trainer`] is optimized to work with the [`PreTrainedModel`] provided by the library. You can still use\n\t            your own models defined as `torch.nn.Module` as long as they work the same way as the 🤗 Transformers\n\t            models.\n\t            </Tip>\n\t        args ([`TrainingArguments`], *optional*):\n\t            The arguments to tweak for training. Will default to a basic instance of [`TrainingArguments`] with the\n\t            `output_dir` set to a directory named *tmp_trainer* in the current directory if not provided.\n\t        data_collator (`DataCollator`, *optional*):\n\t            The function to use to form a batch from a list of elements of `train_dataset` or `eval_dataset`. Will\n\t            default to [`default_data_collator`] if no `tokenizer` is provided, an instance of\n", "            [`DataCollatorWithPadding`] otherwise.\n\t        train_dataset (`torch.utils.data.Dataset` or `torch.utils.data.IterableDataset`, *optional*):\n\t            The dataset to use for training. If it is a [`~datasets.Dataset`], columns not accepted by the\n\t            `model.forward()` method are automatically removed.\n\t            Note that if it's a `torch.utils.data.IterableDataset` with some randomization and you are training in a\n\t            distributed fashion, your iterable dataset should either use a internal attribute `generator` that is a\n\t            `torch.Generator` for the randomization that must be identical on all processes (and the Trainer will\n\t            manually set the seed of this `generator` at each epoch) or have a `set_epoch()` method that internally\n\t            sets the seed of the RNGs used.\n\t        eval_dataset (Union[`torch.utils.data.Dataset`, Dict[str, `torch.utils.data.Dataset`]), *optional*):\n", "             The dataset to use for evaluation. If it is a [`~datasets.Dataset`], columns not accepted by the\n\t             `model.forward()` method are automatically removed. If it is a dictionary, it will evaluate on each\n\t             dataset prepending the dictionary key to the metric name.\n\t        tokenizer ([`PreTrainedTokenizerBase`], *optional*):\n\t            The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs to the\n\t            maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an\n\t            interrupted training or reuse the fine-tuned model.\n\t        model_init (`Callable[[], PreTrainedModel]`, *optional*):\n\t            A function that instantiates the model to be used. If provided, each call to [`~Trainer.train`] will start\n\t            from a new instance of the model as given by this function.\n", "            The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to\n\t            be able to choose different architectures according to hyper parameters (such as layer count, sizes of\n\t            inner layers, dropout probabilities etc).\n\t        compute_metrics (`Callable[[EvalPrediction], Dict]`, *optional*):\n\t            The function that will be used to compute metrics at evaluation. Must take a [`EvalPrediction`] and return\n\t            a dictionary string to metric values.\n\t        callbacks (List of [`TrainerCallback`], *optional*):\n\t            A list of callbacks to customize the training loop. Will add those to the list of default callbacks\n\t            detailed in [here](callback).\n\t            If you want to remove one of the default callbacks used, use the [`Trainer.remove_callback`] method.\n", "        optimizers (`Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]`, *optional*): A tuple\n\t            containing the optimizer and the scheduler to use. Will default to an instance of [`AdamW`] on your model\n\t            and a scheduler given by [`get_linear_schedule_with_warmup`] controlled by `args`.\n\t        preprocess_logits_for_metrics (`Callable[[torch.Tensor, torch.Tensor], torch.Tensor]`, *optional*):\n\t            A function that preprocess the logits right before caching them at each evaluation step. Must take two\n\t            tensors, the logits and the labels, and return the logits once processed as desired. The modifications made\n\t            by this function will be reflected in the predictions received by `compute_metrics`.\n\t            Note that the labels (second parameter) will be `None` if the dataset does not have them.\n\t    Important attributes:\n\t        - **model** -- Always points to the core model. If using a transformers model, it will be a [`PreTrainedModel`]\n", "          subclass.\n\t        - **model_wrapped** -- Always points to the most external model in case one or more other modules wrap the\n\t          original model. This is the model that should be used for the forward pass. For example, under `DeepSpeed`,\n\t          the inner model is wrapped in `DeepSpeed` and then again in `torch.nn.DistributedDataParallel`. If the inner\n\t          model hasn't been wrapped, then `self.model_wrapped` is the same as `self.model`.\n\t        - **is_model_parallel** -- Whether or not a model has been switched to a model parallel mode (different from\n\t          data parallelism, this means some of the model layers are split on different GPUs).\n\t        - **place_model_on_device** -- Whether or not to automatically place the model on the device - it will be set\n\t          to `False` if model parallel or deepspeed is used, or if the default\n\t          `TrainingArguments.place_model_on_device` is overridden to return `False` .\n", "        - **is_in_train** -- Whether or not a model is currently running `train` (e.g. when `evaluate` is called while\n\t          in `train`)\n\t    \"\"\"\n\t    from transformers.trainer_pt_utils import _get_learning_rate, log_metrics, metrics_format, save_metrics, save_state\n\t    def __init__(\n\t        self,\n\t        model: Union[PreTrainedModel, nn.Module] = None,\n\t        args: TrainingArguments = None,\n\t        data_collator: Optional[DataCollator] = None,\n\t        train_dataset: Optional[Dataset] = None,\n", "        eval_dataset: Optional[Union[Dataset, Dict[str, Dataset]]] = None,\n\t        tokenizer: Optional[PreTrainedTokenizerBase] = None,\n\t        model_init: Optional[Callable[[], PreTrainedModel]] = None,\n\t        compute_metrics: Optional[Callable[[EvalPrediction], Dict]] = None,\n\t        callbacks: Optional[List[TrainerCallback]] = None,\n\t        optimizers: Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None),\n\t        preprocess_logits_for_metrics: Optional[Callable[[torch.Tensor, torch.Tensor], torch.Tensor]] = None,\n\t        save_prefixencoder: bool = False,\n\t    ):\n\t        self.save_prefixencoder = save_prefixencoder\n", "        if args is None:\n\t            output_dir = \"tmp_trainer\"\n\t            logger.info(f\"No `TrainingArguments` passed, using `output_dir={output_dir}`.\")\n\t            args = TrainingArguments(output_dir=output_dir)\n\t        self.args = args\n\t        # Seed must be set before instantiating the model when using model\n\t        enable_full_determinism(self.args.seed) if self.args.full_determinism else set_seed(self.args.seed)\n\t        self.hp_name = None\n\t        self.deepspeed = None\n\t        self.is_in_train = False\n", "        # memory metrics - must set up as early as possible\n\t        self._memory_tracker = TrainerMemoryTracker(self.args.skip_memory_metrics)\n\t        self._memory_tracker.start()\n\t        # set the correct log level depending on the node\n\t        log_level = args.get_process_log_level()\n\t        logging.set_verbosity(log_level)\n\t        # force device and distributed setup init explicitly\n\t        args._setup_devices\n\t        if model is None:\n\t            if model_init is not None:\n", "                self.model_init = model_init\n\t                model = self.call_model_init()\n\t            else:\n\t                raise RuntimeError(\"`Trainer` requires either a `model` or `model_init` argument\")\n\t        else:\n\t            if model_init is not None:\n\t                warnings.warn(\n\t                    \"`Trainer` requires either a `model` or `model_init` argument, but not both. `model_init` will\"\n\t                    \" overwrite your model when calling the `train` method. This will become a fatal error in the next\"\n\t                    \" release.\",\n", "                    FutureWarning,\n\t                )\n\t            self.model_init = model_init\n\t        if model.__class__.__name__ in MODEL_MAPPING_NAMES:\n\t            raise ValueError(\n\t                f\"The model you have picked ({model.__class__.__name__}) cannot be used as is for training: it only \"\n\t                \"computes hidden states and does not accept any labels. You should choose a model with a head \"\n\t                \"suitable for your task like any of the `AutoModelForXxx` listed at \"\n\t                \"https://huggingface.co/docs/transformers/model_doc/auto.\"\n\t            )\n", "        if hasattr(model, \"is_parallelizable\") and model.is_parallelizable and model.model_parallel:\n\t            self.is_model_parallel = True\n\t        else:\n\t            self.is_model_parallel = False\n\t        # At this stage the model is already loaded\n\t        if getattr(model, \"is_loaded_in_8bit\", False):\n\t            if getattr(model, \"_is_int8_training_enabled\", False):\n\t                logger.info(\n\t                    \"The model is loaded in 8-bit precision. To train this model you need to add additional modules\"\n\t                    \" inside the model such as adapters using `peft` library and freeze the model weights. Please\"\n", "                    \" check \"\n\t                    \" the examples in https://github.com/huggingface/peft for more details.\"\n\t                )\n\t            else:\n\t                raise ValueError(\n\t                    \"The model you want to train is loaded in 8-bit precision.  if you want to fine-tune an 8-bit\"\n\t                    \" model, please make sure that you have installed `bitsandbytes>=0.37.0`. \"\n\t                )\n\t        # Setup Sharded DDP training\n\t        self.sharded_ddp = None\n", "        if len(args.sharded_ddp) > 0:\n\t            if args.deepspeed:\n\t                raise ValueError(\n\t                    \"Using --sharded_ddp xxx together with --deepspeed is not possible, deactivate one of those flags.\"\n\t                )\n\t            if len(args.fsdp) > 0:\n\t                raise ValueError(\n\t                    \"Using --sharded_ddp xxx together with --fsdp is not possible, deactivate one of those flags.\"\n\t                )\n\t            if args.local_rank == -1:\n", "                raise ValueError(\"Using sharded DDP only works in distributed training.\")\n\t            elif not is_fairscale_available():\n\t                raise ImportError(\"Sharded DDP training requires fairscale: `pip install fairscale`.\")\n\t            elif ShardedDDPOption.SIMPLE not in args.sharded_ddp and FullyShardedDDP is None:\n\t                raise ImportError(\n\t                    \"Sharded DDP in a mode other than simple training requires fairscale version >= 0.3, found \"\n\t                    f\"{fairscale.__version__}. Upgrade your fairscale library: `pip install --upgrade fairscale`.\"\n\t                )\n\t            elif ShardedDDPOption.SIMPLE in args.sharded_ddp:\n\t                self.sharded_ddp = ShardedDDPOption.SIMPLE\n", "            elif ShardedDDPOption.ZERO_DP_2 in args.sharded_ddp:\n\t                self.sharded_ddp = ShardedDDPOption.ZERO_DP_2\n\t            elif ShardedDDPOption.ZERO_DP_3 in args.sharded_ddp:\n\t                self.sharded_ddp = ShardedDDPOption.ZERO_DP_3\n\t        self.fsdp = None\n\t        if len(args.fsdp) > 0:\n\t            if args.deepspeed:\n\t                raise ValueError(\n\t                    \"Using --fsdp xxx together with --deepspeed is not possible, deactivate one of those flags.\"\n\t                )\n", "            if not args.fsdp_config[\"xla\"] and args.local_rank == -1:\n\t                raise ValueError(\"Using fsdp only works in distributed training.\")\n\t            # dep_version_check(\"torch>=1.12.0\")\n\t            # Would have to update setup.py with torch>=1.12.0\n\t            # which isn't ideally given that it will force people not using FSDP to also use torch>=1.12.0\n\t            # below is the current alternative.\n\t            if version.parse(version.parse(torch.__version__).base_version) < version.parse(\"1.12.0\"):\n\t                raise ValueError(\"FSDP requires PyTorch >= 1.12.0\")\n\t            from torch.distributed.fsdp.fully_sharded_data_parallel import BackwardPrefetch, ShardingStrategy\n\t            if FSDPOption.FULL_SHARD in args.fsdp:\n", "                self.fsdp = ShardingStrategy.FULL_SHARD\n\t            elif FSDPOption.SHARD_GRAD_OP in args.fsdp:\n\t                self.fsdp = ShardingStrategy.SHARD_GRAD_OP\n\t            elif FSDPOption.NO_SHARD in args.fsdp:\n\t                self.fsdp = ShardingStrategy.NO_SHARD\n\t            self.backward_prefetch = BackwardPrefetch.BACKWARD_PRE\n\t            if \"backward_prefetch\" in self.args.fsdp_config and \"backward_pos\" not in self.backward_prefetch:\n\t                self.backward_prefetch = BackwardPrefetch.BACKWARD_POST\n\t            self.forword_prefetch = False\n\t            if self.args.fsdp_config.get(\"forword_prefect\", False):\n", "                self.forword_prefetch = True\n\t            self.limit_all_gathers = False\n\t            if self.args.fsdp_config.get(\"limit_all_gathers\", False):\n\t                self.limit_all_gathers = True\n\t        # one place to sort out whether to place the model on device or not\n\t        # postpone switching model to cuda when:\n\t        # 1. MP - since we are trying to fit a much bigger than 1 gpu model\n\t        # 2. fp16-enabled DeepSpeed loads the model in half the size and it doesn't need .to() anyway,\n\t        #    and we only use deepspeed for training at the moment\n\t        # 3. full bf16 or fp16 eval - since the model needs to be cast to the right dtype first\n", "        # 4. Sharded DDP - same as MP\n\t        # 5. FSDP - same as MP\n\t        self.place_model_on_device = args.place_model_on_device\n\t        if (\n\t            self.is_model_parallel\n\t            or args.deepspeed\n\t            or ((args.fp16_full_eval or args.bf16_full_eval) and not args.do_train)\n\t            or (self.sharded_ddp in [ShardedDDPOption.ZERO_DP_2, ShardedDDPOption.ZERO_DP_3])\n\t            or (self.fsdp is not None)\n\t        ):\n", "            self.place_model_on_device = False\n\t        default_collator = default_data_collator if tokenizer is None else DataCollatorWithPadding(tokenizer)\n\t        self.data_collator = data_collator if data_collator is not None else default_collator\n\t        self.train_dataset = train_dataset\n\t        self.eval_dataset = eval_dataset\n\t        self.tokenizer = tokenizer\n\t        if self.place_model_on_device and not getattr(model, \"is_loaded_in_8bit\", False):\n\t            self._move_model_to_device(model, args.device)\n\t        # Force n_gpu to 1 to avoid DataParallel as MP will manage the GPUs\n\t        if self.is_model_parallel:\n", "            self.args._n_gpu = 1\n\t        # later use `self.model is self.model_wrapped` to check if it's wrapped or not\n\t        self.model_wrapped = model\n\t        self.model = model\n\t        self.compute_metrics = compute_metrics\n\t        self.preprocess_logits_for_metrics = preprocess_logits_for_metrics\n\t        self.optimizer, self.lr_scheduler = optimizers\n\t        if model_init is not None and (self.optimizer is not None or self.lr_scheduler is not None):\n\t            raise RuntimeError(\n\t                \"Passing a `model_init` is incompatible with providing the `optimizers` argument. \"\n", "                \"You should subclass `Trainer` and override the `create_optimizer_and_scheduler` method.\"\n\t            )\n\t        if is_torch_tpu_available() and self.optimizer is not None:\n\t            for param in self.model.parameters():\n\t                model_device = param.device\n\t                break\n\t            for param_group in self.optimizer.param_groups:\n\t                if len(param_group[\"params\"]) > 0:\n\t                    optimizer_device = param_group[\"params\"][0].device\n\t                    break\n", "            if model_device != optimizer_device:\n\t                raise ValueError(\n\t                    \"The model and the optimizer parameters are not on the same device, which probably means you\"\n\t                    \" created an optimizer around your model **before** putting on the device and passing it to the\"\n\t                    \" `Trainer`. Make sure the lines `import torch_xla.core.xla_model as xm` and\"\n\t                    \" `model.to(xm.xla_device())` is performed before the optimizer creation in your script.\"\n\t                )\n\t        if ((self.sharded_ddp is not None) or args.deepspeed or (self.fsdp is not None)) and (\n\t            self.optimizer is not None or self.lr_scheduler is not None\n\t        ):\n", "            raise RuntimeError(\n\t                \"Passing `optimizers` is not allowed if Fairscale, Deepspeed or PyTorch FSDP is enabled.\"\n\t                \"You should subclass `Trainer` and override the `create_optimizer_and_scheduler` method.\"\n\t            )\n\t        default_callbacks = DEFAULT_CALLBACKS + get_reporting_integration_callbacks(self.args.report_to)\n\t        callbacks = default_callbacks if callbacks is None else default_callbacks + callbacks\n\t        self.callback_handler = CallbackHandler(\n\t            callbacks, self.model, self.tokenizer, self.optimizer, self.lr_scheduler\n\t        )\n\t        self.add_callback(PrinterCallback if self.args.disable_tqdm else DEFAULT_PROGRESS_CALLBACK)\n", "        # Will be set to True by `self._setup_loggers()` on first call to `self.log()`.\n\t        self._loggers_initialized = False\n\t        # Create clone of distant repo and output directory if needed\n\t        if self.args.push_to_hub:\n\t            self.init_git_repo(at_init=True)\n\t            # In case of pull, we need to make sure every process has the latest.\n\t            if is_torch_tpu_available():\n\t                xm.rendezvous(\"init git repo\")\n\t            elif args.local_rank != -1:\n\t                dist.barrier()\n", "        if self.args.should_save:\n\t            os.makedirs(self.args.output_dir, exist_ok=True)\n\t        if not callable(self.data_collator) and callable(getattr(self.data_collator, \"collate_batch\", None)):\n\t            raise ValueError(\"The `data_collator` should be a simple callable (function, class with `__call__`).\")\n\t        if args.max_steps > 0:\n\t            logger.info(\"max_steps is given, it will override any value given in num_train_epochs\")\n\t        if train_dataset is not None and not has_length(train_dataset) and args.max_steps <= 0:\n\t            raise ValueError(\"train_dataset does not implement __len__, max_steps has to be specified\")\n\t        if (\n\t            train_dataset is not None\n", "            and isinstance(train_dataset, torch.utils.data.IterableDataset)\n\t            and args.group_by_length\n\t        ):\n\t            raise ValueError(\"the `--group_by_length` option is only available for `Dataset`, not `IterableDataset\")\n\t        self._signature_columns = None\n\t        # Mixed precision setup\n\t        self.use_apex = False\n\t        self.use_cuda_amp = False\n\t        self.use_cpu_amp = False\n\t        # Mixed precision setup for SageMaker Model Parallel\n", "        if is_sagemaker_mp_enabled():\n\t            # BF16 + model parallelism in SageMaker: currently not supported, raise an error\n\t            if args.bf16:\n\t                raise ValueError(\"SageMaker Model Parallelism does not support BF16 yet. Please use FP16 instead \")\n\t            if IS_SAGEMAKER_MP_POST_1_10:\n\t                # When there's mismatch between SMP config and trainer argument, use SMP config as truth\n\t                if args.fp16 != smp.state.cfg.fp16:\n\t                    logger.warning(\n\t                        f\"FP16 provided in SM_HP_MP_PARAMETERS is {smp.state.cfg.fp16},\"\n\t                        f\"but FP16 provided in trainer argument is {args.fp16},\"\n", "                        f\"setting to {smp.state.cfg.fp16}\"\n\t                    )\n\t                    args.fp16 = smp.state.cfg.fp16\n\t            else:\n\t                # smp < 1.10 does not support fp16 in trainer.\n\t                if hasattr(smp.state.cfg, \"fp16\"):\n\t                    logger.warning(\n\t                        f\"FP16 provided in SM_HP_MP_PARAMETERS is {smp.state.cfg.fp16}, \"\n\t                        \"but SageMaker Model Parallelism < 1.10 does not support FP16 in trainer.\"\n\t                    )\n", "        if args.fp16 or args.bf16:\n\t            if args.half_precision_backend == \"auto\":\n\t                if args.device == torch.device(\"cpu\"):\n\t                    if args.fp16:\n\t                        raise ValueError(\"Tried to use `fp16` but it is not supported on cpu\")\n\t                    elif _is_native_cpu_amp_available:\n\t                        args.half_precision_backend = \"cpu_amp\"\n\t                    else:\n\t                        raise ValueError(\"Tried to use cpu amp but native cpu amp is not available\")\n\t                else:\n", "                    args.half_precision_backend = \"cuda_amp\"\n\t            logger.info(f\"Using {args.half_precision_backend} half precision backend\")\n\t        self.do_grad_scaling = False\n\t        if (args.fp16 or args.bf16) and not (args.deepspeed or is_sagemaker_mp_enabled() or is_torch_tpu_available()):\n\t            # deepspeed and SageMaker Model Parallel manage their own half precision\n\t            if args.half_precision_backend == \"cuda_amp\":\n\t                self.use_cuda_amp = True\n\t                self.amp_dtype = torch.float16 if args.fp16 else torch.bfloat16\n\t                #  bf16 does not need grad scaling\n\t                self.do_grad_scaling = self.amp_dtype == torch.float16\n", "                if self.do_grad_scaling:\n\t                    if self.sharded_ddp is not None:\n\t                        self.scaler = ShardedGradScaler()\n\t                    elif self.fsdp is not None:\n\t                        from torch.distributed.fsdp.sharded_grad_scaler import (\n\t                            ShardedGradScaler as FSDPShardedGradScaler,\n\t                        )\n\t                        self.scaler = FSDPShardedGradScaler()\n\t                    elif is_torch_tpu_available():\n\t                        from torch_xla.amp import GradScaler\n", "                        self.scaler = GradScaler()\n\t                    else:\n\t                        self.scaler = torch.cuda.amp.GradScaler()\n\t            elif args.half_precision_backend == \"cpu_amp\":\n\t                self.use_cpu_amp = True\n\t                self.amp_dtype = torch.bfloat16\n\t            else:\n\t                if not is_apex_available():\n\t                    raise ImportError(\n\t                        \"Using FP16 with APEX but APEX is not installed, please refer to\"\n", "                        \" https://www.github.com/nvidia/apex.\"\n\t                    )\n\t                self.use_apex = True\n\t        # FP16 + model parallelism in SageMaker: gradient clipping does not work for now so we raise a helpful error.\n\t        if (\n\t            is_sagemaker_mp_enabled()\n\t            and self.use_cuda_amp\n\t            and args.max_grad_norm is not None\n\t            and args.max_grad_norm > 0\n\t        ):\n", "            raise ValueError(\n\t                \"SageMaker Model Parallelism in mixed precision mode does not support gradient clipping yet. Pass \"\n\t                \"along 'max_grad_norm': 0 in your hyperparameters.\"\n\t            )\n\t        # Label smoothing\n\t        if self.args.label_smoothing_factor != 0:\n\t            self.label_smoother = LabelSmoother(epsilon=self.args.label_smoothing_factor)\n\t        else:\n\t            self.label_smoother = None\n\t        self.state = TrainerState(\n", "            is_local_process_zero=self.is_local_process_zero(),\n\t            is_world_process_zero=self.is_world_process_zero(),\n\t        )\n\t        self.control = TrainerControl()\n\t        # Internal variable to count flos in each process, will be accumulated in `self.state.total_flos` then\n\t        # returned to 0 every time flos need to be logged\n\t        self.current_flos = 0\n\t        self.hp_search_backend = None\n\t        self.use_tune_checkpoints = False\n\t        default_label_names = find_labels(self.model.__class__)\n", "        self.label_names = default_label_names if self.args.label_names is None else self.args.label_names\n\t        self.can_return_loss = can_return_loss(self.model.__class__)\n\t        self.control = self.callback_handler.on_init_end(self.args, self.state, self.control)\n\t        # Internal variables to keep track of the original batch size\n\t        self._train_batch_size = args.train_batch_size\n\t        # very last\n\t        self._memory_tracker.stop_and_update_metrics()\n\t        # torch.compile\n\t        if args.torch_compile and not is_torch_compile_available():\n\t            raise RuntimeError(\"Using torch.compile requires PyTorch 2.0 or higher.\")\n", "    def add_callback(self, callback):\n\t        \"\"\"\n\t        Add a callback to the current list of [`~transformer.TrainerCallback`].\n\t        Args:\n\t           callback (`type` or [`~transformer.TrainerCallback`]):\n\t               A [`~transformer.TrainerCallback`] class or an instance of a [`~transformer.TrainerCallback`]. In the\n\t               first case, will instantiate a member of that class.\n\t        \"\"\"\n\t        self.callback_handler.add_callback(callback)\n\t    def pop_callback(self, callback):\n", "        \"\"\"\n\t        Remove a callback from the current list of [`~transformer.TrainerCallback`] and returns it.\n\t        If the callback is not found, returns `None` (and no error is raised).\n\t        Args:\n\t           callback (`type` or [`~transformer.TrainerCallback`]):\n\t               A [`~transformer.TrainerCallback`] class or an instance of a [`~transformer.TrainerCallback`]. In the\n\t               first case, will pop the first member of that class found in the list of callbacks.\n\t        Returns:\n\t            [`~transformer.TrainerCallback`]: The callback removed, if found.\n\t        \"\"\"\n", "        return self.callback_handler.pop_callback(callback)\n\t    def remove_callback(self, callback):\n\t        \"\"\"\n\t        Remove a callback from the current list of [`~transformer.TrainerCallback`].\n\t        Args:\n\t           callback (`type` or [`~transformer.TrainerCallback`]):\n\t               A [`~transformer.TrainerCallback`] class or an instance of a [`~transformer.TrainerCallback`]. In the\n\t               first case, will remove the first member of that class found in the list of callbacks.\n\t        \"\"\"\n\t        self.callback_handler.remove_callback(callback)\n", "    def _move_model_to_device(self, model, device):\n\t        model = model.to(device)\n\t        # Moving a model to an XLA device disconnects the tied weights, so we have to retie them.\n\t        if self.args.parallel_mode == ParallelMode.TPU and hasattr(model, \"tie_weights\"):\n\t            model.tie_weights()\n\t    def _set_signature_columns_if_needed(self):\n\t        if self._signature_columns is None:\n\t            # Inspect model forward signature to keep only the arguments it accepts.\n\t            signature = inspect.signature(self.model.forward)\n\t            self._signature_columns = list(signature.parameters.keys())\n", "            # Labels may be named label or label_ids, the default data collator handles that.\n\t            self._signature_columns += list(set([\"label\", \"label_ids\"] + self.label_names))\n\t    def _remove_unused_columns(self, dataset: \"datasets.Dataset\", description: Optional[str] = None):\n\t        if not self.args.remove_unused_columns:\n\t            return dataset\n\t        self._set_signature_columns_if_needed()\n\t        signature_columns = self._signature_columns\n\t        ignored_columns = list(set(dataset.column_names) - set(signature_columns))\n\t        if len(ignored_columns) > 0:\n\t            dset_description = \"\" if description is None else f\"in the {description} set\"\n", "            logger.info(\n\t                f\"The following columns {dset_description} don't have a corresponding argument in \"\n\t                f\"`{self.model.__class__.__name__}.forward` and have been ignored: {', '.join(ignored_columns)}.\"\n\t                f\" If {', '.join(ignored_columns)} are not expected by `{self.model.__class__.__name__}.forward`, \"\n\t                \" you can safely ignore this message.\"\n\t            )\n\t        columns = [k for k in signature_columns if k in dataset.column_names]\n\t        if version.parse(datasets.__version__) < version.parse(\"1.4.0\"):\n\t            dataset.set_format(\n\t                type=dataset.format[\"type\"], columns=columns, format_kwargs=dataset.format[\"format_kwargs\"]\n", "            )\n\t            return dataset\n\t        else:\n\t            return dataset.remove_columns(ignored_columns)\n\t    def _get_collator_with_removed_columns(\n\t        self, data_collator: Callable, description: Optional[str] = None\n\t    ) -> Callable:\n\t        \"\"\"Wrap the data collator in a callable removing unused columns.\"\"\"\n\t        if not self.args.remove_unused_columns:\n\t            return data_collator\n", "        self._set_signature_columns_if_needed()\n\t        signature_columns = self._signature_columns\n\t        remove_columns_collator = RemoveColumnsCollator(\n\t            data_collator=data_collator,\n\t            signature_columns=signature_columns,\n\t            logger=logger,\n\t            description=description,\n\t            model_name=self.model.__class__.__name__,\n\t        )\n\t        return remove_columns_collator\n", "    def _get_train_sampler(self) -> Optional[torch.utils.data.Sampler]:\n\t        if self.train_dataset is None or not has_length(self.train_dataset):\n\t            return None\n\t        generator = None\n\t        if self.args.world_size <= 1:\n\t            generator = torch.Generator()\n\t            # for backwards compatibility, we generate a seed here (which is sampled from a generator seeded with\n\t            # `args.seed`) if data_seed isn't provided.\n\t            # Further on in this method, we default to `args.seed` instead.\n\t            if self.args.data_seed is None:\n", "                seed = int(torch.empty((), dtype=torch.int64).random_().item())\n\t            else:\n\t                seed = self.args.data_seed\n\t            generator.manual_seed(seed)\n\t        seed = self.args.data_seed if self.args.data_seed is not None else self.args.seed\n\t        # Build the sampler.\n\t        if self.args.group_by_length:\n\t            if is_datasets_available() and isinstance(self.train_dataset, datasets.Dataset):\n\t                lengths = (\n\t                    self.train_dataset[self.args.length_column_name]\n", "                    if self.args.length_column_name in self.train_dataset.column_names\n\t                    else None\n\t                )\n\t            else:\n\t                lengths = None\n\t            model_input_name = self.tokenizer.model_input_names[0] if self.tokenizer is not None else None\n\t            if self.args.world_size <= 1:\n\t                return LengthGroupedSampler(\n\t                    self.args.train_batch_size * self.args.gradient_accumulation_steps,\n\t                    dataset=self.train_dataset,\n", "                    lengths=lengths,\n\t                    model_input_name=model_input_name,\n\t                    generator=generator,\n\t                )\n\t            else:\n\t                return DistributedLengthGroupedSampler(\n\t                    self.args.train_batch_size * self.args.gradient_accumulation_steps,\n\t                    dataset=self.train_dataset,\n\t                    num_replicas=self.args.world_size,\n\t                    rank=self.args.process_index,\n", "                    lengths=lengths,\n\t                    model_input_name=model_input_name,\n\t                    seed=seed,\n\t                )\n\t        else:\n\t            if self.args.world_size <= 1:\n\t                return RandomSampler(self.train_dataset, generator=generator)\n\t            elif (\n\t                self.args.parallel_mode in [ParallelMode.TPU, ParallelMode.SAGEMAKER_MODEL_PARALLEL]\n\t                and not self.args.dataloader_drop_last\n", "            ):\n\t                # Use a loop for TPUs when drop_last is False to have all batches have the same size.\n\t                return DistributedSamplerWithLoop(\n\t                    self.train_dataset,\n\t                    batch_size=self.args.per_device_train_batch_size,\n\t                    num_replicas=self.args.world_size,\n\t                    rank=self.args.process_index,\n\t                    seed=seed,\n\t                )\n\t            else:\n", "                return DistributedSampler(\n\t                    self.train_dataset,\n\t                    num_replicas=self.args.world_size,\n\t                    rank=self.args.process_index,\n\t                    seed=seed,\n\t                )\n\t    def get_train_dataloader(self) -> DataLoader:\n\t        \"\"\"\n\t        Returns the training [`~torch.utils.data.DataLoader`].\n\t        Will use no sampler if `train_dataset` does not implement `__len__`, a random sampler (adapted to distributed\n", "        training if necessary) otherwise.\n\t        Subclass and override this method if you want to inject some custom behavior.\n\t        \"\"\"\n\t        if self.train_dataset is None:\n\t            raise ValueError(\"Trainer: training requires a train_dataset.\")\n\t        train_dataset = self.train_dataset\n\t        data_collator = self.data_collator\n\t        if is_datasets_available() and isinstance(train_dataset, datasets.Dataset):\n\t            train_dataset = self._remove_unused_columns(train_dataset, description=\"training\")\n\t        else:\n", "            data_collator = self._get_collator_with_removed_columns(data_collator, description=\"training\")\n\t        if isinstance(train_dataset, torch.utils.data.IterableDataset):\n\t            if self.args.world_size > 1:\n\t                train_dataset = IterableDatasetShard(\n\t                    train_dataset,\n\t                    batch_size=self._train_batch_size,\n\t                    drop_last=self.args.dataloader_drop_last,\n\t                    num_processes=self.args.world_size,\n\t                    process_index=self.args.process_index,\n\t                )\n", "            return DataLoader(\n\t                train_dataset,\n\t                batch_size=self._train_batch_size,\n\t                collate_fn=data_collator,\n\t                num_workers=self.args.dataloader_num_workers,\n\t                pin_memory=self.args.dataloader_pin_memory,\n\t            )\n\t        train_sampler = self._get_train_sampler()\n\t        return DataLoader(\n\t            train_dataset,\n", "            batch_size=self._train_batch_size,\n\t            sampler=train_sampler,\n\t            collate_fn=data_collator,\n\t            drop_last=self.args.dataloader_drop_last,\n\t            num_workers=self.args.dataloader_num_workers,\n\t            pin_memory=self.args.dataloader_pin_memory,\n\t            worker_init_fn=seed_worker,\n\t        )\n\t    def _get_eval_sampler(self, eval_dataset: Dataset) -> Optional[torch.utils.data.Sampler]:\n\t        # Deprecated code\n", "        if self.args.use_legacy_prediction_loop:\n\t            if is_torch_tpu_available():\n\t                return SequentialDistributedSampler(\n\t                    eval_dataset, num_replicas=xm.xrt_world_size(), rank=xm.get_ordinal()\n\t                )\n\t            elif is_sagemaker_mp_enabled():\n\t                return SequentialDistributedSampler(\n\t                    eval_dataset,\n\t                    num_replicas=smp.dp_size(),\n\t                    rank=smp.dp_rank(),\n", "                    batch_size=self.args.per_device_eval_batch_size,\n\t                )\n\t            elif self.args.local_rank != -1:\n\t                return SequentialDistributedSampler(eval_dataset)\n\t            else:\n\t                return SequentialSampler(eval_dataset)\n\t        if self.args.world_size <= 1:\n\t            return SequentialSampler(eval_dataset)\n\t        else:\n\t            return ShardSampler(\n", "                eval_dataset,\n\t                batch_size=self.args.per_device_eval_batch_size,\n\t                num_processes=self.args.world_size,\n\t                process_index=self.args.process_index,\n\t            )\n\t    def get_eval_dataloader(self, eval_dataset: Optional[Dataset] = None) -> DataLoader:\n\t        \"\"\"\n\t        Returns the evaluation [`~torch.utils.data.DataLoader`].\n\t        Subclass and override this method if you want to inject some custom behavior.\n\t        Args:\n", "            eval_dataset (`torch.utils.data.Dataset`, *optional*):\n\t                If provided, will override `self.eval_dataset`. If it is a [`~datasets.Dataset`], columns not accepted\n\t                by the `model.forward()` method are automatically removed. It must implement `__len__`.\n\t        \"\"\"\n\t        if eval_dataset is None and self.eval_dataset is None:\n\t            raise ValueError(\"Trainer: evaluation requires an eval_dataset.\")\n\t        eval_dataset = eval_dataset if eval_dataset is not None else self.eval_dataset\n\t        data_collator = self.data_collator\n\t        if is_datasets_available() and isinstance(eval_dataset, datasets.Dataset):\n\t            eval_dataset = self._remove_unused_columns(eval_dataset, description=\"evaluation\")\n", "        else:\n\t            data_collator = self._get_collator_with_removed_columns(data_collator, description=\"evaluation\")\n\t        if isinstance(eval_dataset, torch.utils.data.IterableDataset):\n\t            if self.args.world_size > 1:\n\t                eval_dataset = IterableDatasetShard(\n\t                    eval_dataset,\n\t                    batch_size=self.args.per_device_eval_batch_size,\n\t                    drop_last=self.args.dataloader_drop_last,\n\t                    num_processes=self.args.world_size,\n\t                    process_index=self.args.process_index,\n", "                )\n\t            return DataLoader(\n\t                eval_dataset,\n\t                batch_size=self.args.eval_batch_size,\n\t                collate_fn=data_collator,\n\t                num_workers=self.args.dataloader_num_workers,\n\t                pin_memory=self.args.dataloader_pin_memory,\n\t            )\n\t        eval_sampler = self._get_eval_sampler(eval_dataset)\n\t        return DataLoader(\n", "            eval_dataset,\n\t            sampler=eval_sampler,\n\t            batch_size=self.args.eval_batch_size,\n\t            collate_fn=data_collator,\n\t            drop_last=self.args.dataloader_drop_last,\n\t            num_workers=self.args.dataloader_num_workers,\n\t            pin_memory=self.args.dataloader_pin_memory,\n\t        )\n\t    def get_test_dataloader(self, test_dataset: Dataset) -> DataLoader:\n\t        \"\"\"\n", "        Returns the test [`~torch.utils.data.DataLoader`].\n\t        Subclass and override this method if you want to inject some custom behavior.\n\t        Args:\n\t            test_dataset (`torch.utils.data.Dataset`, *optional*):\n\t                The test dataset to use. If it is a [`~datasets.Dataset`], columns not accepted by the\n\t                `model.forward()` method are automatically removed. It must implement `__len__`.\n\t        \"\"\"\n\t        data_collator = self.data_collator\n\t        if is_datasets_available() and isinstance(test_dataset, datasets.Dataset):\n\t            test_dataset = self._remove_unused_columns(test_dataset, description=\"test\")\n", "        else:\n\t            data_collator = self._get_collator_with_removed_columns(data_collator, description=\"test\")\n\t        if isinstance(test_dataset, torch.utils.data.IterableDataset):\n\t            if self.args.world_size > 1:\n\t                test_dataset = IterableDatasetShard(\n\t                    test_dataset,\n\t                    batch_size=self.args.eval_batch_size,\n\t                    drop_last=self.args.dataloader_drop_last,\n\t                    num_processes=self.args.world_size,\n\t                    process_index=self.args.process_index,\n", "                )\n\t            return DataLoader(\n\t                test_dataset,\n\t                batch_size=self.args.eval_batch_size,\n\t                collate_fn=data_collator,\n\t                num_workers=self.args.dataloader_num_workers,\n\t                pin_memory=self.args.dataloader_pin_memory,\n\t            )\n\t        test_sampler = self._get_eval_sampler(test_dataset)\n\t        # We use the same batch_size as for eval.\n", "        return DataLoader(\n\t            test_dataset,\n\t            sampler=test_sampler,\n\t            batch_size=self.args.eval_batch_size,\n\t            collate_fn=data_collator,\n\t            drop_last=self.args.dataloader_drop_last,\n\t            num_workers=self.args.dataloader_num_workers,\n\t            pin_memory=self.args.dataloader_pin_memory,\n\t        )\n\t    def create_optimizer_and_scheduler(self, num_training_steps: int):\n", "        \"\"\"\n\t        Setup the optimizer and the learning rate scheduler.\n\t        We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the\n\t        Trainer's init through `optimizers`, or subclass and override this method (or `create_optimizer` and/or\n\t        `create_scheduler`) in a subclass.\n\t        \"\"\"\n\t        self.create_optimizer()\n\t        if IS_SAGEMAKER_MP_POST_1_10 and smp.state.cfg.fp16:\n\t            # If smp >= 1.10 and fp16 is enabled, we unwrap the optimizer\n\t            optimizer = self.optimizer.optimizer\n", "        else:\n\t            optimizer = self.optimizer\n\t        self.create_scheduler(num_training_steps=num_training_steps, optimizer=optimizer)\n\t    def create_optimizer(self):\n\t        \"\"\"\n\t        Setup the optimizer.\n\t        We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the\n\t        Trainer's init through `optimizers`, or subclass and override this method in a subclass.\n\t        \"\"\"\n\t        opt_model = self.model_wrapped if is_sagemaker_mp_enabled() else self.model\n", "        if self.optimizer is None:\n\t            decay_parameters = get_parameter_names(opt_model, ALL_LAYERNORM_LAYERS)\n\t            decay_parameters = [name for name in decay_parameters if \"bias\" not in name]\n\t            optimizer_grouped_parameters = [\n\t                {\n\t                    \"params\": [\n\t                        p for n, p in opt_model.named_parameters() if (n in decay_parameters and p.requires_grad)\n\t                    ],\n\t                    \"weight_decay\": self.args.weight_decay,\n\t                },\n", "                {\n\t                    \"params\": [\n\t                        p for n, p in opt_model.named_parameters() if (n not in decay_parameters and p.requires_grad)\n\t                    ],\n\t                    \"weight_decay\": 0.0,\n\t                },\n\t            ]\n\t            optimizer_cls, optimizer_kwargs = Trainer.get_optimizer_cls_and_kwargs(self.args)\n\t            if self.sharded_ddp == ShardedDDPOption.SIMPLE:\n\t                self.optimizer = OSS(\n", "                    params=optimizer_grouped_parameters,\n\t                    optim=optimizer_cls,\n\t                    **optimizer_kwargs,\n\t                )\n\t            else:\n\t                self.optimizer = optimizer_cls(optimizer_grouped_parameters, **optimizer_kwargs)\n\t                if optimizer_cls.__name__ == \"Adam8bit\":\n\t                    import bitsandbytes\n\t                    manager = bitsandbytes.optim.GlobalOptimManager.get_instance()\n\t                    skipped = 0\n", "                    for module in opt_model.modules():\n\t                        if isinstance(module, nn.Embedding):\n\t                            skipped += sum({p.data_ptr(): p.numel() for p in module.parameters()}.values())\n\t                            print(f\"skipped {module}: {skipped/2**20}M params\")\n\t                            manager.register_module_override(module, \"weight\", {\"optim_bits\": 32})\n\t                            logger.debug(f\"bitsandbytes: will optimize {module} in fp32\")\n\t                    print(f\"skipped: {skipped/2**20}M params\")\n\t        if is_sagemaker_mp_enabled():\n\t            self.optimizer = smp.DistributedOptimizer(self.optimizer)\n\t        return self.optimizer\n", "    @staticmethod\n\t    def get_optimizer_cls_and_kwargs(args: TrainingArguments) -> Tuple[Any, Any]:\n\t        \"\"\"\n\t        Returns the optimizer class and optimizer parameters based on the training arguments.\n\t        Args:\n\t            args (`transformers.training_args.TrainingArguments`):\n\t                The training arguments for the training session.\n\t        \"\"\"\n\t        # parse args.optim_args\n\t        optim_args = {}\n", "        if args.optim_args:\n\t            for mapping in args.optim_args.replace(\" \", \"\").split(\",\"):\n\t                key, value = mapping.split(\"=\")\n\t                optim_args[key] = value\n\t        optimizer_kwargs = {\"lr\": args.learning_rate}\n\t        adam_kwargs = {\n\t            \"betas\": (args.adam_beta1, args.adam_beta2),\n\t            \"eps\": args.adam_epsilon,\n\t        }\n\t        if args.optim == OptimizerNames.ADAFACTOR:\n", "            optimizer_cls = Adafactor\n\t            optimizer_kwargs.update({\"scale_parameter\": False, \"relative_step\": False})\n\t        elif args.optim == OptimizerNames.ADAMW_HF:\n\t            from transformers.optimization import AdamW\n\t            optimizer_cls = AdamW\n\t            optimizer_kwargs.update(adam_kwargs)\n\t        elif args.optim in [OptimizerNames.ADAMW_TORCH, OptimizerNames.ADAMW_TORCH_FUSED]:\n\t            from torch.optim import AdamW\n\t            optimizer_cls = AdamW\n\t            optimizer_kwargs.update(adam_kwargs)\n", "            if args.optim == OptimizerNames.ADAMW_TORCH_FUSED:\n\t                optimizer_kwargs.update({\"fused\": True})\n\t        elif args.optim == OptimizerNames.ADAMW_TORCH_XLA:\n\t            try:\n\t                from torch_xla.amp.syncfree import AdamW\n\t                optimizer_cls = AdamW\n\t                optimizer_kwargs.update(adam_kwargs)\n\t            except ImportError:\n\t                raise ValueError(\"Trainer failed to import syncfree AdamW from torch_xla.\")\n\t        elif args.optim == OptimizerNames.ADAMW_APEX_FUSED:\n", "            try:\n\t                from apex.optimizers import FusedAdam\n\t                optimizer_cls = FusedAdam\n\t                optimizer_kwargs.update(adam_kwargs)\n\t            except ImportError:\n\t                raise ValueError(\"Trainer tried to instantiate apex FusedAdam but apex is not installed!\")\n\t        elif args.optim == OptimizerNames.ADAMW_BNB:\n\t            try:\n\t                from bitsandbytes.optim import Adam8bit\n\t                optimizer_cls = Adam8bit\n", "                optimizer_kwargs.update(adam_kwargs)\n\t            except ImportError:\n\t                raise ValueError(\"Trainer tried to instantiate bnb Adam8bit but bnb is not installed!\")\n\t        elif args.optim == OptimizerNames.ADAMW_ANYPRECISION:\n\t            try:\n\t                from torchdistx.optimizers import AnyPrecisionAdamW\n\t                optimizer_cls = AnyPrecisionAdamW\n\t                optimizer_kwargs.update(adam_kwargs)\n\t                # TODO Change dtypes back to M=FP32, Var = BF16, Kahan = False once they can be cast together in torchdistx.\n\t                optimizer_kwargs.update(\n", "                    {\n\t                        \"use_kahan_summation\": strtobool(optim_args.get(\"use_kahan_summation\", \"False\")),\n\t                        \"momentum_dtype\": getattr(torch, optim_args.get(\"momentum_dtype\", \"float32\")),\n\t                        \"variance_dtype\": getattr(torch, optim_args.get(\"variance_dtype\", \"float32\")),\n\t                        \"compensation_buffer_dtype\": getattr(\n\t                            torch, optim_args.get(\"compensation_buffer_dtype\", \"bfloat16\")\n\t                        ),\n\t                    }\n\t                )\n\t            except ImportError:\n", "                raise ValueError(\"Please install https://github.com/pytorch/torchdistx\")\n\t        elif args.optim == OptimizerNames.SGD:\n\t            optimizer_cls = torch.optim.SGD\n\t        elif args.optim == OptimizerNames.ADAGRAD:\n\t            optimizer_cls = torch.optim.Adagrad\n\t        else:\n\t            raise ValueError(f\"Trainer cannot instantiate unsupported optimizer: {args.optim}\")\n\t        return optimizer_cls, optimizer_kwargs\n\t    def create_scheduler(self, num_training_steps: int, optimizer: torch.optim.Optimizer = None):\n\t        \"\"\"\n", "        Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or\n\t        passed as an argument.\n\t        Args:\n\t            num_training_steps (int): The number of training steps to do.\n\t        \"\"\"\n\t        if self.lr_scheduler is None:\n\t            self.lr_scheduler = get_scheduler(\n\t                self.args.lr_scheduler_type,\n\t                optimizer=self.optimizer if optimizer is None else optimizer,\n\t                num_warmup_steps=self.args.get_warmup_steps(num_training_steps),\n", "                num_training_steps=num_training_steps,\n\t            )\n\t        return self.lr_scheduler\n\t    def num_examples(self, dataloader: DataLoader) -> int:\n\t        \"\"\"\n\t        Helper to get number of samples in a [`~torch.utils.data.DataLoader`] by accessing its dataset. When\n\t        dataloader.dataset does not exist or has no length, estimates as best it can\n\t        \"\"\"\n\t        try:\n\t            dataset = dataloader.dataset\n", "            # Special case for IterableDatasetShard, we need to dig deeper\n\t            if isinstance(dataset, IterableDatasetShard):\n\t                return len(dataloader.dataset.dataset)\n\t            return len(dataloader.dataset)\n\t        except (NameError, AttributeError, TypeError):  # no dataset or length, estimate by length of dataloader\n\t            return len(dataloader) * self.args.per_device_train_batch_size\n\t    def _hp_search_setup(self, trial: Union[\"optuna.Trial\", Dict[str, Any]]):\n\t        \"\"\"HP search setup code\"\"\"\n\t        self._trial = trial\n\t        if self.hp_search_backend is None or trial is None:\n", "            return\n\t        if self.hp_search_backend == HPSearchBackend.OPTUNA:\n\t            params = self.hp_space(trial)\n\t        elif self.hp_search_backend == HPSearchBackend.RAY:\n\t            params = trial\n\t            params.pop(\"wandb\", None)\n\t        elif self.hp_search_backend == HPSearchBackend.SIGOPT:\n\t            params = {k: int(v) if isinstance(v, str) else v for k, v in trial.assignments.items()}\n\t        elif self.hp_search_backend == HPSearchBackend.WANDB:\n\t            params = trial\n", "        for key, value in params.items():\n\t            if not hasattr(self.args, key):\n\t                logger.warning(\n\t                    f\"Trying to set {key} in the hyperparameter search but there is no corresponding field in\"\n\t                    \" `TrainingArguments`.\"\n\t                )\n\t                continue\n\t            old_attr = getattr(self.args, key, None)\n\t            # Casting value to the proper type\n\t            if old_attr is not None:\n", "                value = type(old_attr)(value)\n\t            setattr(self.args, key, value)\n\t        if self.hp_search_backend == HPSearchBackend.OPTUNA:\n\t            logger.info(f\"Trial: {trial.params}\")\n\t        if self.hp_search_backend == HPSearchBackend.SIGOPT:\n\t            logger.info(f\"SigOpt Assignments: {trial.assignments}\")\n\t        if self.hp_search_backend == HPSearchBackend.WANDB:\n\t            logger.info(f\"W&B Sweep parameters: {trial}\")\n\t        if self.args.deepspeed:\n\t            # Rebuild the deepspeed config to reflect the updated training parameters\n", "            from transformers.deepspeed import HfTrainerDeepSpeedConfig\n\t            self.args.hf_deepspeed_config = HfTrainerDeepSpeedConfig(self.args.deepspeed)\n\t            self.args.hf_deepspeed_config.trainer_config_process(self.args)\n\t    def _report_to_hp_search(self, trial: Union[\"optuna.Trial\", Dict[str, Any]], step: int, metrics: Dict[str, float]):\n\t        if self.hp_search_backend is None or trial is None:\n\t            return\n\t        self.objective = self.compute_objective(metrics.copy())\n\t        if self.hp_search_backend == HPSearchBackend.OPTUNA:\n\t            import optuna\n\t            trial.report(self.objective, step)\n", "            if trial.should_prune():\n\t                self.callback_handler.on_train_end(self.args, self.state, self.control)\n\t                raise optuna.TrialPruned()\n\t        elif self.hp_search_backend == HPSearchBackend.RAY:\n\t            from ray import tune\n\t            if self.control.should_save:\n\t                self._tune_save_checkpoint()\n\t            tune.report(objective=self.objective, **metrics)\n\t    def _tune_save_checkpoint(self):\n\t        from ray import tune\n", "        if not self.use_tune_checkpoints:\n\t            return\n\t        with tune.checkpoint_dir(step=self.state.global_step) as checkpoint_dir:\n\t            output_dir = os.path.join(checkpoint_dir, f\"{PREFIX_CHECKPOINT_DIR}-{self.state.global_step}\")\n\t            self.save_model(output_dir, _internal_call=True)\n\t            if self.args.should_save:\n\t                self.state.save_to_json(os.path.join(output_dir, TRAINER_STATE_NAME))\n\t                torch.save(self.optimizer.state_dict(), os.path.join(output_dir, OPTIMIZER_NAME))\n\t                torch.save(self.lr_scheduler.state_dict(), os.path.join(output_dir, SCHEDULER_NAME))\n\t    def call_model_init(self, trial=None):\n", "        model_init_argcount = number_of_arguments(self.model_init)\n\t        if model_init_argcount == 0:\n\t            model = self.model_init()\n\t        elif model_init_argcount == 1:\n\t            model = self.model_init(trial)\n\t        else:\n\t            raise RuntimeError(\"model_init should have 0 or 1 argument.\")\n\t        if model is None:\n\t            raise RuntimeError(\"model_init should not return None.\")\n\t        return model\n", "    def torch_jit_model_eval(self, model, dataloader, training=False):\n\t        if not training:\n\t            if dataloader is None:\n\t                logger.warning(\"failed to use PyTorch jit mode due to current dataloader is none.\")\n\t                return model\n\t            example_batch = next(iter(dataloader))\n\t            example_batch = self._prepare_inputs(example_batch)\n\t            try:\n\t                jit_model = model.eval()\n\t                with ContextManagers([self.autocast_smart_context_manager(cache_enabled=False), torch.no_grad()]):\n", "                    if version.parse(version.parse(torch.__version__).base_version) >= version.parse(\"1.14.0\"):\n\t                        if isinstance(example_batch, dict):\n\t                            jit_model = torch.jit.trace(jit_model, example_kwarg_inputs=example_batch, strict=False)\n\t                        else:\n\t                            jit_model = torch.jit.trace(\n\t                                jit_model,\n\t                                example_kwarg_inputs={key: example_batch[key] for key in example_batch},\n\t                                strict=False,\n\t                            )\n\t                    else:\n", "                        jit_inputs = []\n\t                        for key in example_batch:\n\t                            example_tensor = torch.ones_like(example_batch[key])\n\t                            jit_inputs.append(example_tensor)\n\t                        jit_inputs = tuple(jit_inputs)\n\t                        jit_model = torch.jit.trace(jit_model, jit_inputs, strict=False)\n\t                jit_model = torch.jit.freeze(jit_model)\n\t                with torch.no_grad():\n\t                    jit_model(**example_batch)\n\t                    jit_model(**example_batch)\n", "                model = jit_model\n\t                self.use_cpu_amp = False\n\t                self.use_cuda_amp = False\n\t            except (RuntimeError, TypeError, ValueError, NameError, IndexError) as e:\n\t                logger.warning(f\"failed to use PyTorch jit mode due to: {e}.\")\n\t        return model\n\t    def ipex_optimize_model(self, model, training=False, dtype=torch.float32):\n\t        if not is_ipex_available():\n\t            raise ImportError(\n\t                \"Using IPEX but IPEX is not installed or IPEX's version does not match current PyTorch, please refer\"\n", "                \" to https://github.com/intel/intel-extension-for-pytorch.\"\n\t            )\n\t        import intel_extension_for_pytorch as ipex\n\t        if not training:\n\t            model.eval()\n\t            dtype = torch.bfloat16 if not self.is_in_train and self.args.bf16_full_eval else dtype\n\t            # conv_bn_folding is disabled as it fails in symbolic tracing, resulting in ipex warnings\n\t            model = ipex.optimize(model, dtype=dtype, level=\"O1\", conv_bn_folding=False, inplace=not self.is_in_train)\n\t        else:\n\t            if not model.training:\n", "                model.train()\n\t            model, self.optimizer = ipex.optimize(\n\t                model, dtype=dtype, optimizer=self.optimizer, inplace=True, level=\"O1\"\n\t            )\n\t        return model\n\t    def _wrap_model(self, model, training=True, dataloader=None):\n\t        if self.args.torch_compile:\n\t            model = torch.compile(model, backend=self.args.torch_compile_backend, mode=self.args.torch_compile_mode)\n\t        if self.args.use_ipex:\n\t            dtype = torch.bfloat16 if self.use_cpu_amp else torch.float32\n", "            model = self.ipex_optimize_model(model, training, dtype=dtype)\n\t        if is_sagemaker_mp_enabled():\n\t            # Wrapping the base model twice in a DistributedModel will raise an error.\n\t            if isinstance(self.model_wrapped, smp.model.DistributedModel):\n\t                return self.model_wrapped\n\t            return smp.DistributedModel(model, backward_passes_per_step=self.args.gradient_accumulation_steps)\n\t        # already initialized its own DDP and AMP\n\t        if self.deepspeed:\n\t            return self.deepspeed\n\t        # train/eval could be run multiple-times - if already wrapped, don't re-wrap it again\n", "        if unwrap_model(model) is not model:\n\t            return model\n\t        # Mixed precision training with apex (torch < 1.6)\n\t        if self.use_apex and training:\n\t            model, self.optimizer = amp.initialize(model, self.optimizer, opt_level=self.args.fp16_opt_level)\n\t        # Multi-gpu training (should be after apex fp16 initialization)\n\t        if self.args.n_gpu > 1:\n\t            model = nn.DataParallel(model)\n\t        if self.args.jit_mode_eval:\n\t            start_time = time.time()\n", "            model = self.torch_jit_model_eval(model, dataloader, training)\n\t            self.jit_compilation_time = round(time.time() - start_time, 4)\n\t        # Note: in torch.distributed mode, there's no point in wrapping the model\n\t        # inside a DistributedDataParallel as we'll be under `no_grad` anyways.\n\t        if not training:\n\t            return model\n\t        # Distributed training (should be after apex fp16 initialization)\n\t        if self.sharded_ddp is not None:\n\t            # Sharded DDP!\n\t            if self.sharded_ddp == ShardedDDPOption.SIMPLE:\n", "                model = ShardedDDP(model, self.optimizer)\n\t            else:\n\t                mixed_precision = self.args.fp16 or self.args.bf16\n\t                cpu_offload = ShardedDDPOption.OFFLOAD in self.args.sharded_ddp\n\t                zero_3 = self.sharded_ddp == ShardedDDPOption.ZERO_DP_3\n\t                # XXX: Breaking the self.model convention but I see no way around it for now.\n\t                if ShardedDDPOption.AUTO_WRAP in self.args.sharded_ddp:\n\t                    model = auto_wrap(model)\n\t                self.model = model = FullyShardedDDP(\n\t                    model,\n", "                    mixed_precision=mixed_precision,\n\t                    reshard_after_forward=zero_3,\n\t                    cpu_offload=cpu_offload,\n\t                ).to(self.args.device)\n\t        # Distributed training using PyTorch FSDP\n\t        elif self.fsdp is not None:\n\t            if not self.args.fsdp_config[\"xla\"]:\n\t                # PyTorch FSDP!\n\t                from torch.distributed.fsdp.fully_sharded_data_parallel import CPUOffload, MixedPrecision\n\t                from torch.distributed.fsdp.fully_sharded_data_parallel import FullyShardedDataParallel as FSDP\n", "                from torch.distributed.fsdp.wrap import size_based_auto_wrap_policy, transformer_auto_wrap_policy\n\t                if FSDPOption.OFFLOAD in self.args.fsdp:\n\t                    cpu_offload = CPUOffload(offload_params=True)\n\t                else:\n\t                    cpu_offload = CPUOffload(offload_params=False)\n\t                auto_wrap_policy = None\n\t                if FSDPOption.AUTO_WRAP in self.args.fsdp:\n\t                    if self.args.fsdp_config[\"fsdp_min_num_params\"] > 0:\n\t                        auto_wrap_policy = functools.partial(\n\t                            size_based_auto_wrap_policy, min_num_params=self.args.fsdp_config[\"fsdp_min_num_params\"]\n", "                        )\n\t                    elif self.args.fsdp_config.get(\"fsdp_transformer_layer_cls_to_wrap\", None) is not None:\n\t                        transformer_cls_to_wrap = set()\n\t                        for layer_class in self.args.fsdp_config[\"fsdp_transformer_layer_cls_to_wrap\"]:\n\t                            transformer_cls = get_module_class_from_name(model, layer_class)\n\t                            if transformer_cls is None:\n\t                                raise Exception(\"Could not find the transformer layer class to wrap in the model.\")\n\t                            else:\n\t                                transformer_cls_to_wrap.add(transformer_cls)\n\t                        auto_wrap_policy = functools.partial(\n", "                            transformer_auto_wrap_policy,\n\t                            # Transformer layer class to wrap\n\t                            transformer_layer_cls=transformer_cls_to_wrap,\n\t                        )\n\t                mixed_precision_policy = None\n\t                dtype = None\n\t                if self.args.fp16:\n\t                    dtype = torch.float16\n\t                elif self.args.bf16:\n\t                    dtype = torch.bfloat16\n", "                if dtype is not None:\n\t                    mixed_precision_policy = MixedPrecision(param_dtype=dtype, reduce_dtype=dtype, buffer_dtype=dtype)\n\t                if type(model) != FSDP:\n\t                    # XXX: Breaking the self.model convention but I see no way around it for now.\n\t                    self.model = model = FSDP(\n\t                        model,\n\t                        sharding_strategy=self.fsdp,\n\t                        cpu_offload=cpu_offload,\n\t                        auto_wrap_policy=auto_wrap_policy,\n\t                        mixed_precision=mixed_precision_policy,\n", "                        device_id=self.args.device,\n\t                        backward_prefetch=self.backward_prefetch,\n\t                        forward_prefetch=self.forword_prefetch,\n\t                        limit_all_gathers=self.limit_all_gathers,\n\t                    )\n\t            else:\n\t                try:\n\t                    from torch_xla.distributed.fsdp import XlaFullyShardedDataParallel as FSDP\n\t                    from torch_xla.distributed.fsdp import checkpoint_module\n\t                    from torch_xla.distributed.fsdp.wrap import (\n", "                        size_based_auto_wrap_policy,\n\t                        transformer_auto_wrap_policy,\n\t                    )\n\t                except ImportError:\n\t                    raise ImportError(\"Missing XLA FSDP related module; please make sure to use torch-xla >= 2.0.\")\n\t                auto_wrap_policy = None\n\t                auto_wrapper_callable = None\n\t                if self.args.fsdp_config[\"fsdp_min_num_params\"] > 0:\n\t                    auto_wrap_policy = functools.partial(\n\t                        size_based_auto_wrap_policy, min_num_params=self.args.fsdp_config[\"fsdp_min_num_params\"]\n", "                    )\n\t                elif self.args.fsdp_config.get(\"fsdp_transformer_layer_cls_to_wrap\", None) is not None:\n\t                    transformer_cls_to_wrap = set()\n\t                    for layer_class in self.args.fsdp_config[\"fsdp_transformer_layer_cls_to_wrap\"]:\n\t                        transformer_cls = get_module_class_from_name(model, layer_class)\n\t                        if transformer_cls is None:\n\t                            raise Exception(\"Could not find the transformer layer class to wrap in the model.\")\n\t                        else:\n\t                            transformer_cls_to_wrap.add(transformer_cls)\n\t                    auto_wrap_policy = functools.partial(\n", "                        transformer_auto_wrap_policy,\n\t                        # Transformer layer class to wrap\n\t                        transformer_layer_cls=transformer_cls_to_wrap,\n\t                    )\n\t                fsdp_kwargs = self.args.xla_fsdp_config\n\t                if self.args.fsdp_config[\"xla_fsdp_grad_ckpt\"]:\n\t                    # Apply gradient checkpointing to auto-wrapped sub-modules if specified\n\t                    def auto_wrapper_callable(m, *args, **kwargs):\n\t                        return FSDP(checkpoint_module(m), *args, **kwargs)\n\t                # Wrap the base model with an outer FSDP wrapper\n", "                self.model = model = FSDP(\n\t                    model,\n\t                    auto_wrap_policy=auto_wrap_policy,\n\t                    auto_wrapper_callable=auto_wrapper_callable,\n\t                    **fsdp_kwargs,\n\t                )\n\t                # Patch `xm.optimizer_step` should not reduce gradients in this case,\n\t                # as FSDP does not need gradient reduction over sharded parameters.\n\t                def patched_optimizer_step(optimizer, barrier=False, optimizer_args={}):\n\t                    loss = optimizer.step(**optimizer_args)\n", "                    if barrier:\n\t                        xm.mark_step()\n\t                    return loss\n\t                xm.optimizer_step = patched_optimizer_step\n\t        elif is_sagemaker_dp_enabled():\n\t            model = nn.parallel.DistributedDataParallel(\n\t                model, device_ids=[int(os.getenv(\"SMDATAPARALLEL_LOCAL_RANK\"))]\n\t            )\n\t        elif self.args.local_rank != -1:\n\t            kwargs = {}\n", "            if self.args.ddp_find_unused_parameters is not None:\n\t                kwargs[\"find_unused_parameters\"] = self.args.ddp_find_unused_parameters\n\t            elif isinstance(model, PreTrainedModel):\n\t                # find_unused_parameters breaks checkpointing as per\n\t                # https://github.com/huggingface/transformers/pull/4659#issuecomment-643356021\n\t                kwargs[\"find_unused_parameters\"] = not model.is_gradient_checkpointing\n\t            else:\n\t                kwargs[\"find_unused_parameters\"] = True\n\t            if self.args.ddp_bucket_cap_mb is not None:\n\t                kwargs[\"bucket_cap_mb\"] = self.args.ddp_bucket_cap_mb\n", "            if is_torch_neuroncore_available():\n\t                return model\n\t            model = nn.parallel.DistributedDataParallel(\n\t                model,\n\t                device_ids=[self.args.local_rank] if self.args._n_gpu != 0 else None,\n\t                output_device=self.args.local_rank if self.args._n_gpu != 0 else None,\n\t                **kwargs,\n\t            )\n\t        return model\n\t    def train(\n", "        self,\n\t        resume_from_checkpoint: Optional[Union[str, bool]] = None,\n\t        trial: Union[\"optuna.Trial\", Dict[str, Any]] = None,\n\t        ignore_keys_for_eval: Optional[List[str]] = None,\n\t        **kwargs,\n\t    ):\n\t        \"\"\"\n\t        Main training entry point.\n\t        Args:\n\t            resume_from_checkpoint (`str` or `bool`, *optional*):\n", "                If a `str`, local path to a saved checkpoint as saved by a previous instance of [`Trainer`]. If a\n\t                `bool` and equals `True`, load the last checkpoint in *args.output_dir* as saved by a previous instance\n\t                of [`Trainer`]. If present, training will resume from the model/optimizer/scheduler states loaded here.\n\t            trial (`optuna.Trial` or `Dict[str, Any]`, *optional*):\n\t                The trial run or the hyperparameter dictionary for hyperparameter search.\n\t            ignore_keys_for_eval (`List[str]`, *optional*)\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n\t                gathering predictions for evaluation during the training.\n\t            kwargs:\n\t                Additional keyword arguments used to hide deprecated arguments\n", "        \"\"\"\n\t        if resume_from_checkpoint is False:\n\t            resume_from_checkpoint = None\n\t        # memory metrics - must set up as early as possible\n\t        self._memory_tracker.start()\n\t        args = self.args\n\t        self.is_in_train = True\n\t        # do_train is not a reliable argument, as it might not be set and .train() still called, so\n\t        # the following is a workaround:\n\t        if (args.fp16_full_eval or args.bf16_full_eval) and not args.do_train:\n", "            self._move_model_to_device(self.model, args.device)\n\t        if \"model_path\" in kwargs:\n\t            resume_from_checkpoint = kwargs.pop(\"model_path\")\n\t            warnings.warn(\n\t                \"`model_path` is deprecated and will be removed in a future version. Use `resume_from_checkpoint` \"\n\t                \"instead.\",\n\t                FutureWarning,\n\t            )\n\t        if len(kwargs) > 0:\n\t            raise TypeError(f\"train() received got unexpected keyword arguments: {', '.join(list(kwargs.keys()))}.\")\n", "        # This might change the seed so needs to run first.\n\t        self._hp_search_setup(trial)\n\t        self._train_batch_size = self.args.train_batch_size\n\t        # Model re-init\n\t        model_reloaded = False\n\t        if self.model_init is not None:\n\t            # Seed must be set before instantiating the model when using model_init.\n\t            enable_full_determinism(self.args.seed) if self.args.full_determinism else set_seed(self.args.seed)\n\t            self.model = self.call_model_init(trial)\n\t            model_reloaded = True\n", "            # Reinitializes optimizer and scheduler\n\t            self.optimizer, self.lr_scheduler = None, None\n\t        # Load potential model checkpoint\n\t        if isinstance(resume_from_checkpoint, bool) and resume_from_checkpoint:\n\t            resume_from_checkpoint = get_last_checkpoint(args.output_dir)\n\t            if resume_from_checkpoint is None:\n\t                raise ValueError(f\"No valid checkpoint found in output directory ({args.output_dir})\")\n\t        if resume_from_checkpoint is not None and not is_sagemaker_mp_enabled() and args.deepspeed is None:\n\t            self._load_from_checkpoint(resume_from_checkpoint)\n\t        # If model was re-initialized, put it on the right device and update self.model_wrapped\n", "        if model_reloaded:\n\t            if self.place_model_on_device:\n\t                self._move_model_to_device(self.model, args.device)\n\t            self.model_wrapped = self.model\n\t        inner_training_loop = find_executable_batch_size(\n\t            self._inner_training_loop, self._train_batch_size, args.auto_find_batch_size\n\t        )\n\t        return inner_training_loop(\n\t            args=args,\n\t            resume_from_checkpoint=resume_from_checkpoint,\n", "            trial=trial,\n\t            ignore_keys_for_eval=ignore_keys_for_eval,\n\t        )\n\t    def _inner_training_loop(\n\t        self, batch_size=None, args=None, resume_from_checkpoint=None, trial=None, ignore_keys_for_eval=None\n\t    ):\n\t        self._train_batch_size = batch_size\n\t        # Data loader and number of training steps\n\t        train_dataloader = self.get_train_dataloader()\n\t        # Setting up training control variables:\n", "        # number of training epochs: num_train_epochs\n\t        # number of training steps per epoch: num_update_steps_per_epoch\n\t        # total number of training steps to execute: max_steps\n\t        total_train_batch_size = args.train_batch_size * args.gradient_accumulation_steps * args.world_size\n\t        len_dataloader = None\n\t        if has_length(train_dataloader):\n\t            len_dataloader = len(train_dataloader)\n\t            num_update_steps_per_epoch = len_dataloader // args.gradient_accumulation_steps\n\t            num_update_steps_per_epoch = max(num_update_steps_per_epoch, 1)\n\t            num_examples = self.num_examples(train_dataloader)\n", "            if args.max_steps > 0:\n\t                max_steps = args.max_steps\n\t                num_train_epochs = args.max_steps // num_update_steps_per_epoch + int(\n\t                    args.max_steps % num_update_steps_per_epoch > 0\n\t                )\n\t                # May be slightly incorrect if the last batch in the training dataloader has a smaller size but it's\n\t                # the best we can do.\n\t                num_train_samples = args.max_steps * total_train_batch_size\n\t            else:\n\t                max_steps = math.ceil(args.num_train_epochs * num_update_steps_per_epoch)\n", "                num_train_epochs = math.ceil(args.num_train_epochs)\n\t                num_train_samples = self.num_examples(train_dataloader) * args.num_train_epochs\n\t        elif args.max_steps > 0:  # Rely on max_steps when dataloader does not have a working size\n\t            max_steps = args.max_steps\n\t            # Setting a very large number of epochs so we go as many times as necessary over the iterator.\n\t            num_train_epochs = sys.maxsize\n\t            num_update_steps_per_epoch = max_steps\n\t            num_examples = total_train_batch_size * args.max_steps\n\t            num_train_samples = args.max_steps * total_train_batch_size\n\t        else:\n", "            raise ValueError(\n\t                \"args.max_steps must be set to a positive value if dataloader does not have a length, was\"\n\t                f\" {args.max_steps}\"\n\t            )\n\t        if DebugOption.UNDERFLOW_OVERFLOW in self.args.debug:\n\t            if self.args.n_gpu > 1:\n\t                # nn.DataParallel(model) replicates the model, creating new variables and module\n\t                # references registered here no longer work on other gpus, breaking the module\n\t                raise ValueError(\n\t                    \"Currently --debug underflow_overflow is not supported under DP. Please use DDP\"\n", "                    \" (torch.distributed.launch).\"\n\t                )\n\t            else:\n\t                debug_overflow = DebugUnderflowOverflow(self.model)  # noqa\n\t        delay_optimizer_creation = (\n\t            self.sharded_ddp is not None\n\t            and self.sharded_ddp != ShardedDDPOption.SIMPLE\n\t            or is_sagemaker_mp_enabled()\n\t            or self.fsdp is not None\n\t        )\n", "        if args.deepspeed:\n\t            deepspeed_engine, optimizer, lr_scheduler = deepspeed_init(\n\t                self, num_training_steps=max_steps, resume_from_checkpoint=resume_from_checkpoint\n\t            )\n\t            self.model = deepspeed_engine.module\n\t            self.model_wrapped = deepspeed_engine\n\t            self.deepspeed = deepspeed_engine\n\t            self.optimizer = optimizer\n\t            self.lr_scheduler = lr_scheduler\n\t        elif not delay_optimizer_creation:\n", "            self.create_optimizer_and_scheduler(num_training_steps=max_steps)\n\t        self.state = TrainerState()\n\t        self.state.is_hyper_param_search = trial is not None\n\t        # Activate gradient checkpointing if needed\n\t        if args.gradient_checkpointing:\n\t            self.model.gradient_checkpointing_enable()\n\t        model = self._wrap_model(self.model_wrapped)\n\t        if is_sagemaker_mp_enabled() and resume_from_checkpoint is not None:\n\t            self._load_from_checkpoint(resume_from_checkpoint, model)\n\t        # for the rest of this function `model` is the outside model, whether it was wrapped or not\n", "        if model is not self.model:\n\t            self.model_wrapped = model\n\t        if delay_optimizer_creation:\n\t            self.create_optimizer_and_scheduler(num_training_steps=max_steps)\n\t        # Check if saved optimizer or scheduler states exist\n\t        self._load_optimizer_and_scheduler(resume_from_checkpoint)\n\t        # important: at this point:\n\t        # self.model         is the Transformers Model\n\t        # self.model_wrapped is DDP(Transformers Model), Deepspeed(Transformers Model), etc.\n\t        # Train!\n", "        logger.info(\"***** Running training *****\")\n\t        logger.info(f\"  Num examples = {num_examples}\")\n\t        logger.info(f\"  Num Epochs = {num_train_epochs}\")\n\t        logger.info(f\"  Instantaneous batch size per device = {args.per_device_train_batch_size}\")\n\t        logger.info(f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_train_batch_size}\")\n\t        logger.info(f\"  Gradient Accumulation steps = {args.gradient_accumulation_steps}\")\n\t        logger.info(f\"  Total optimization steps = {max_steps}\")\n\t        logger.info(\n\t            f\"  Number of trainable parameters = {sum(p.numel() for p in model.parameters() if p.requires_grad)}\"\n\t        )\n", "        self.state.epoch = 0\n\t        start_time = time.time()\n\t        epochs_trained = 0\n\t        steps_trained_in_current_epoch = 0\n\t        steps_trained_progress_bar = None\n\t        # Check if continuing training from a checkpoint\n\t        if resume_from_checkpoint is not None and os.path.isfile(\n\t            os.path.join(resume_from_checkpoint, TRAINER_STATE_NAME)\n\t        ):\n\t            self.state = TrainerState.load_from_json(os.path.join(resume_from_checkpoint, TRAINER_STATE_NAME))\n", "            epochs_trained = self.state.global_step // num_update_steps_per_epoch\n\t            if not args.ignore_data_skip:\n\t                steps_trained_in_current_epoch = self.state.global_step % (num_update_steps_per_epoch)\n\t                steps_trained_in_current_epoch *= args.gradient_accumulation_steps\n\t            else:\n\t                steps_trained_in_current_epoch = 0\n\t            logger.info(\"  Continuing training from checkpoint, will skip to saved global_step\")\n\t            logger.info(f\"  Continuing training from epoch {epochs_trained}\")\n\t            logger.info(f\"  Continuing training from global step {self.state.global_step}\")\n\t            if not args.ignore_data_skip:\n", "                if skip_first_batches is None:\n\t                    logger.info(\n\t                        f\"  Will skip the first {epochs_trained} epochs then the first\"\n\t                        f\" {steps_trained_in_current_epoch} batches in the first epoch. If this takes a lot of time,\"\n\t                        \" you can install the latest version of Accelerate with `pip install -U accelerate`.You can\"\n\t                        \" also add the `--ignore_data_skip` flag to your launch command, but you will resume the\"\n\t                        \" training on data already seen by your model.\"\n\t                    )\n\t                else:\n\t                    logger.info(\n", "                        f\"  Will skip the first {epochs_trained} epochs then the first\"\n\t                        f\" {steps_trained_in_current_epoch} batches in the first epoch.\"\n\t                    )\n\t                if self.is_local_process_zero() and not args.disable_tqdm and skip_first_batches is None:\n\t                    steps_trained_progress_bar = tqdm(total=steps_trained_in_current_epoch)\n\t                    steps_trained_progress_bar.set_description(\"Skipping the first batches\")\n\t        # Update the references\n\t        self.callback_handler.model = self.model\n\t        self.callback_handler.optimizer = self.optimizer\n\t        self.callback_handler.lr_scheduler = self.lr_scheduler\n", "        self.callback_handler.train_dataloader = train_dataloader\n\t        if self.hp_name is not None and self._trial is not None:\n\t            # use self._trial because the SigOpt/Optuna hpo only call `_hp_search_setup(trial)` instead of passing trial\n\t            # parameter to Train when using DDP.\n\t            self.state.trial_name = self.hp_name(self._trial)\n\t        if trial is not None:\n\t            assignments = trial.assignments if self.hp_search_backend == HPSearchBackend.SIGOPT else trial\n\t            self.state.trial_params = hp_params(assignments)\n\t        else:\n\t            self.state.trial_params = None\n", "        # This should be the same if the state has been saved but in case the training arguments changed, it's safer\n\t        # to set this after the load.\n\t        self.state.max_steps = max_steps\n\t        self.state.num_train_epochs = num_train_epochs\n\t        self.state.is_local_process_zero = self.is_local_process_zero()\n\t        self.state.is_world_process_zero = self.is_world_process_zero()\n\t        # tr_loss is a tensor to avoid synchronization of TPUs through .item()\n\t        tr_loss = torch.tensor(0.0).to(args.device)\n\t        # _total_loss_scalar is updated everytime .item() has to be called on tr_loss and stores the sum of all losses\n\t        self._total_loss_scalar = 0.0\n", "        self._globalstep_last_logged = self.state.global_step\n\t        model.zero_grad()\n\t        self.control = self.callback_handler.on_train_begin(args, self.state, self.control)\n\t        # Skip the first epochs_trained epochs to get the random state of the dataloader at the right point.\n\t        if not args.ignore_data_skip:\n\t            for epoch in range(epochs_trained):\n\t                is_random_sampler = hasattr(train_dataloader, \"sampler\") and isinstance(\n\t                    train_dataloader.sampler, RandomSampler\n\t                )\n\t                if is_torch_less_than_1_11 or not is_random_sampler:\n", "                    # We just need to begin an iteration to create the randomization of the sampler.\n\t                    # That was before PyTorch 1.11 however...\n\t                    for _ in train_dataloader:\n\t                        break\n\t                else:\n\t                    # Otherwise we need to call the whooooole sampler cause there is some random operation added\n\t                    # AT THE VERY END!\n\t                    _ = list(train_dataloader.sampler)\n\t        total_batched_samples = 0\n\t        for epoch in range(epochs_trained, num_train_epochs):\n", "            if isinstance(train_dataloader, DataLoader) and isinstance(train_dataloader.sampler, DistributedSampler):\n\t                train_dataloader.sampler.set_epoch(epoch)\n\t            elif hasattr(train_dataloader, \"dataset\") and isinstance(train_dataloader.dataset, IterableDatasetShard):\n\t                train_dataloader.dataset.set_epoch(epoch)\n\t            if is_torch_tpu_available():\n\t                parallel_loader = pl.ParallelLoader(train_dataloader, [args.device]).per_device_loader(args.device)\n\t                epoch_iterator = parallel_loader\n\t            else:\n\t                epoch_iterator = train_dataloader\n\t            # Reset the past mems state at the beginning of each epoch if necessary.\n", "            if args.past_index >= 0:\n\t                self._past = None\n\t            steps_in_epoch = (\n\t                len(epoch_iterator)\n\t                if len_dataloader is not None\n\t                else args.max_steps * args.gradient_accumulation_steps\n\t            )\n\t            self.control = self.callback_handler.on_epoch_begin(args, self.state, self.control)\n\t            if epoch == epochs_trained and resume_from_checkpoint is not None and steps_trained_in_current_epoch == 0:\n\t                self._load_rng_state(resume_from_checkpoint)\n", "            rng_to_sync = False\n\t            steps_skipped = 0\n\t            if skip_first_batches is not None and steps_trained_in_current_epoch > 0:\n\t                epoch_iterator = skip_first_batches(epoch_iterator, steps_trained_in_current_epoch)\n\t                steps_skipped = steps_trained_in_current_epoch\n\t                steps_trained_in_current_epoch = 0\n\t                rng_to_sync = True\n\t            step = -1\n\t            for step, inputs in enumerate(epoch_iterator):\n\t                total_batched_samples += 1\n", "                if rng_to_sync:\n\t                    self._load_rng_state(resume_from_checkpoint)\n\t                    rng_to_sync = False\n\t                # Skip past any already trained steps if resuming training\n\t                if steps_trained_in_current_epoch > 0:\n\t                    steps_trained_in_current_epoch -= 1\n\t                    if steps_trained_progress_bar is not None:\n\t                        steps_trained_progress_bar.update(1)\n\t                    if steps_trained_in_current_epoch == 0:\n\t                        self._load_rng_state(resume_from_checkpoint)\n", "                    continue\n\t                elif steps_trained_progress_bar is not None:\n\t                    steps_trained_progress_bar.close()\n\t                    steps_trained_progress_bar = None\n\t                if step % args.gradient_accumulation_steps == 0:\n\t                    self.control = self.callback_handler.on_step_begin(args, self.state, self.control)\n\t                if (\n\t                    (total_batched_samples % args.gradient_accumulation_steps != 0)\n\t                    and args.local_rank != -1\n\t                    and args._no_sync_in_gradient_accumulation\n", "                ):\n\t                    # Avoid unnecessary DDP synchronization since there will be no backward pass on this example.\n\t                    with model.no_sync():\n\t                        tr_loss_step = self.training_step(model, inputs)\n\t                else:\n\t                    tr_loss_step = self.training_step(model, inputs)\n\t                if (\n\t                    args.logging_nan_inf_filter\n\t                    and not is_torch_tpu_available()\n\t                    and (torch.isnan(tr_loss_step) or torch.isinf(tr_loss_step))\n", "                ):\n\t                    # if loss is nan or inf simply add the average of previous logged losses\n\t                    tr_loss += tr_loss / (1 + self.state.global_step - self._globalstep_last_logged)\n\t                else:\n\t                    tr_loss += tr_loss_step\n\t                self.current_flos += float(self.floating_point_ops(inputs))\n\t                # Optimizer step for deepspeed must be called on every step regardless of the value of gradient_accumulation_steps\n\t                if self.deepspeed:\n\t                    self.deepspeed.step()\n\t                if total_batched_samples % args.gradient_accumulation_steps == 0 or (\n", "                    # last step in epoch but step is always smaller than gradient_accumulation_steps\n\t                    steps_in_epoch <= args.gradient_accumulation_steps\n\t                    and (step + 1) == steps_in_epoch\n\t                ):\n\t                    # Gradient clipping\n\t                    if args.max_grad_norm is not None and args.max_grad_norm > 0 and not self.deepspeed:\n\t                        # deepspeed does its own clipping\n\t                        if self.do_grad_scaling:\n\t                            # Reduce gradients first for XLA\n\t                            if is_torch_tpu_available():\n", "                                gradients = xm._fetch_gradients(self.optimizer)\n\t                                xm.all_reduce(\"sum\", gradients, scale=1.0 / xm.xrt_world_size())\n\t                            # AMP: gradients need unscaling\n\t                            self.scaler.unscale_(self.optimizer)\n\t                        if is_sagemaker_mp_enabled() and args.fp16:\n\t                            self.optimizer.clip_master_grads(args.max_grad_norm)\n\t                        elif hasattr(self.optimizer, \"clip_grad_norm\"):\n\t                            # Some optimizers (like the sharded optimizer) have a specific way to do gradient clipping\n\t                            self.optimizer.clip_grad_norm(args.max_grad_norm)\n\t                        elif hasattr(model, \"clip_grad_norm_\"):\n", "                            # Some models (like FullyShardedDDP) have a specific way to do gradient clipping\n\t                            model.clip_grad_norm_(args.max_grad_norm)\n\t                        else:\n\t                            # Revert to normal clipping otherwise, handling Apex or full precision\n\t                            nn.utils.clip_grad_norm_(\n\t                                amp.master_params(self.optimizer) if self.use_apex else model.parameters(),\n\t                                args.max_grad_norm,\n\t                            )\n\t                    # Optimizer step\n\t                    optimizer_was_run = True\n", "                    if self.deepspeed:\n\t                        pass  # called outside the loop\n\t                    elif is_torch_tpu_available():\n\t                        if self.do_grad_scaling:\n\t                            self.scaler.step(self.optimizer)\n\t                            self.scaler.update()\n\t                        else:\n\t                            xm.optimizer_step(self.optimizer)\n\t                    elif self.do_grad_scaling:\n\t                        scale_before = self.scaler.get_scale()\n", "                        self.scaler.step(self.optimizer)\n\t                        self.scaler.update()\n\t                        scale_after = self.scaler.get_scale()\n\t                        optimizer_was_run = scale_before <= scale_after\n\t                    else:\n\t                        self.optimizer.step()\n\t                    if optimizer_was_run and not self.deepspeed:\n\t                        self.lr_scheduler.step()\n\t                    model.zero_grad()\n\t                    self.state.global_step += 1\n", "                    self.state.epoch = epoch + (step + 1 + steps_skipped) / steps_in_epoch\n\t                    self.control = self.callback_handler.on_step_end(args, self.state, self.control)\n\t                    self._maybe_log_save_evaluate(tr_loss, model, trial, epoch, ignore_keys_for_eval)\n\t                else:\n\t                    self.control = self.callback_handler.on_substep_end(args, self.state, self.control)\n\t                if self.control.should_epoch_stop or self.control.should_training_stop:\n\t                    break\n\t            if step < 0:\n\t                logger.warning(\n\t                    \"There seems to be not a single sample in your epoch_iterator, stopping training at step\"\n", "                    f\" {self.state.global_step}! This is expected if you're using an IterableDataset and set\"\n\t                    f\" num_steps ({max_steps}) higher than the number of available samples.\"\n\t                )\n\t                self.control.should_training_stop = True\n\t            self.control = self.callback_handler.on_epoch_end(args, self.state, self.control)\n\t            self._maybe_log_save_evaluate(tr_loss, model, trial, epoch, ignore_keys_for_eval)\n\t            if DebugOption.TPU_METRICS_DEBUG in self.args.debug:\n\t                if is_torch_tpu_available():\n\t                    # tpu-comment: Logging debug metrics for PyTorch/XLA (compile, execute times, ops, etc.)\n\t                    xm.master_print(met.metrics_report())\n", "                else:\n\t                    logger.warning(\n\t                        \"You enabled PyTorch/XLA debug metrics but you don't have a TPU \"\n\t                        \"configured. Check your training configuration if this is unexpected.\"\n\t                    )\n\t            if self.control.should_training_stop:\n\t                break\n\t        if args.past_index and hasattr(self, \"_past\"):\n\t            # Clean the state at the end of training\n\t            delattr(self, \"_past\")\n", "        logger.info(\"\\n\\nTraining completed. Do not forget to share your model on huggingface.co/models =)\\n\\n\")\n\t        if args.load_best_model_at_end and self.state.best_model_checkpoint is not None:\n\t            # Wait for everyone to get here so we are sur the model has been saved by process 0.\n\t            if is_torch_tpu_available():\n\t                xm.rendezvous(\"load_best_model_at_end\")\n\t            elif args.local_rank != -1:\n\t                dist.barrier()\n\t            elif is_sagemaker_mp_enabled():\n\t                smp.barrier()\n\t            self._load_best_model()\n", "        # add remaining tr_loss\n\t        self._total_loss_scalar += tr_loss.item()\n\t        train_loss = self._total_loss_scalar / self.state.global_step\n\t        metrics = speed_metrics(\"train\", start_time, num_samples=num_train_samples, num_steps=self.state.max_steps)\n\t        self.store_flos()\n\t        metrics[\"total_flos\"] = self.state.total_flos\n\t        metrics[\"train_loss\"] = train_loss\n\t        self.is_in_train = False\n\t        self._memory_tracker.stop_and_update_metrics(metrics)\n\t        self.log(metrics)\n", "        run_dir = self._get_output_dir(trial)\n\t        checkpoints_sorted = self._sorted_checkpoints(use_mtime=False, output_dir=run_dir)\n\t        # Delete the last checkpoint when save_total_limit=1 if it's different from the best checkpoint and process allowed to save.\n\t        if self.args.should_save and self.state.best_model_checkpoint is not None and self.args.save_total_limit == 1:\n\t            for checkpoint in checkpoints_sorted:\n\t                if checkpoint != self.state.best_model_checkpoint:\n\t                    logger.info(f\"Deleting older checkpoint [{checkpoint}] due to args.save_total_limit\")\n\t                    shutil.rmtree(checkpoint)\n\t        self.control = self.callback_handler.on_train_end(args, self.state, self.control)\n\t        return TrainOutput(self.state.global_step, train_loss, metrics)\n", "    def _get_output_dir(self, trial):\n\t        if self.hp_search_backend is not None and trial is not None:\n\t            if self.hp_search_backend == HPSearchBackend.OPTUNA:\n\t                run_id = trial.number\n\t            elif self.hp_search_backend == HPSearchBackend.RAY:\n\t                from ray import tune\n\t                run_id = tune.get_trial_id()\n\t            elif self.hp_search_backend == HPSearchBackend.SIGOPT:\n\t                run_id = trial.id\n\t            elif self.hp_search_backend == HPSearchBackend.WANDB:\n", "                import wandb\n\t                run_id = wandb.run.id\n\t            run_name = self.hp_name(trial) if self.hp_name is not None else f\"run-{run_id}\"\n\t            run_dir = os.path.join(self.args.output_dir, run_name)\n\t        else:\n\t            run_dir = self.args.output_dir\n\t        return run_dir\n\t    def _load_from_checkpoint(self, resume_from_checkpoint, model=None):\n\t        if model is None:\n\t            model = self.model\n", "        if not os.path.isfile(os.path.join(resume_from_checkpoint, WEIGHTS_NAME)) and not os.path.isfile(\n\t            os.path.join(resume_from_checkpoint, WEIGHTS_INDEX_NAME)\n\t        ):\n\t            raise ValueError(f\"Can't find a valid checkpoint at {resume_from_checkpoint}\")\n\t        logger.info(f\"Loading model from {resume_from_checkpoint}.\")\n\t        if os.path.isfile(os.path.join(resume_from_checkpoint, CONFIG_NAME)):\n\t            config = PretrainedConfig.from_json_file(os.path.join(resume_from_checkpoint, CONFIG_NAME))\n\t            checkpoint_version = config.transformers_version\n\t            if checkpoint_version is not None and checkpoint_version != __version__:\n\t                logger.warning(\n", "                    f\"You are resuming training from a checkpoint trained with {checkpoint_version} of \"\n\t                    f\"Transformers but your current version is {__version__}. This is not recommended and could \"\n\t                    \"yield to errors or unwanted behaviors.\"\n\t                )\n\t        if os.path.isfile(os.path.join(resume_from_checkpoint, WEIGHTS_NAME)):\n\t            # If the model is on the GPU, it still works!\n\t            if is_sagemaker_mp_enabled():\n\t                if os.path.isfile(os.path.join(resume_from_checkpoint, \"user_content.pt\")):\n\t                    # If the 'user_content.pt' file exists, load with the new smp api.\n\t                    # Checkpoint must have been saved with the new smp api.\n", "                    smp.resume_from_checkpoint(\n\t                        path=resume_from_checkpoint, tag=WEIGHTS_NAME, partial=False, load_optimizer=False\n\t                    )\n\t                else:\n\t                    # If the 'user_content.pt' file does NOT exist, load with the old smp api.\n\t                    # Checkpoint must have been saved with the old smp api.\n\t                    if hasattr(self.args, \"fp16\") and self.args.fp16 is True:\n\t                        logger.warning(\n\t                            \"Enabling FP16 and loading from smp < 1.10 checkpoint together is not suppported.\"\n\t                        )\n", "                    state_dict = torch.load(os.path.join(resume_from_checkpoint, WEIGHTS_NAME), map_location=\"cpu\")\n\t                    # Required for smp to not auto-translate state_dict from hf to smp (is already smp).\n\t                    state_dict[\"_smp_is_partial\"] = False\n\t                    load_result = model.load_state_dict(state_dict, strict=True)\n\t                    # release memory\n\t                    del state_dict\n\t            else:\n\t                # We load the model state dict on the CPU to avoid an OOM error.\n\t                state_dict = torch.load(os.path.join(resume_from_checkpoint, WEIGHTS_NAME), map_location=\"cpu\")\n\t                # workaround for FSDP bug https://github.com/pytorch/pytorch/issues/82963\n", "                # which takes *args instead of **kwargs\n\t                load_result = model.load_state_dict(state_dict, False)\n\t                # release memory\n\t                del state_dict\n\t                self._issue_warnings_after_load(load_result)\n\t        else:\n\t            # We load the sharded checkpoint\n\t            load_result = load_sharded_checkpoint(model, resume_from_checkpoint, strict=is_sagemaker_mp_enabled())\n\t            if not is_sagemaker_mp_enabled():\n\t                self._issue_warnings_after_load(load_result)\n", "    def _load_best_model(self):\n\t        logger.info(f\"Loading best model from {self.state.best_model_checkpoint} (score: {self.state.best_metric}).\")\n\t        best_model_path = os.path.join(self.state.best_model_checkpoint, WEIGHTS_NAME)\n\t        model = self.model_wrapped if is_sagemaker_mp_enabled() else self.model\n\t        if os.path.exists(best_model_path):\n\t            if self.deepspeed:\n\t                if self.model_wrapped is not None:\n\t                    # this removes the pre-hooks from the previous engine\n\t                    self.model_wrapped.destroy()\n\t                    self.model_wrapped = None\n", "                # temp hack until Deepspeed fixes the problem with resume from an existing engine that did some stepping\n\t                deepspeed_engine, optimizer, lr_scheduler = deepspeed_init(\n\t                    self,\n\t                    num_training_steps=self.args.max_steps,\n\t                    resume_from_checkpoint=self.state.best_model_checkpoint,\n\t                )\n\t                self.model = deepspeed_engine.module\n\t                self.model_wrapped = deepspeed_engine\n\t                self.deepspeed = deepspeed_engine\n\t                self.optimizer = optimizer\n", "                self.lr_scheduler = lr_scheduler\n\t            else:\n\t                if is_sagemaker_mp_enabled():\n\t                    if os.path.isfile(os.path.join(self.state.best_model_checkpoint, \"user_content.pt\")):\n\t                        # If the 'user_content.pt' file exists, load with the new smp api.\n\t                        # Checkpoint must have been saved with the new smp api.\n\t                        smp.resume_from_checkpoint(\n\t                            path=self.state.best_model_checkpoint,\n\t                            tag=WEIGHTS_NAME,\n\t                            partial=False,\n", "                            load_optimizer=False,\n\t                        )\n\t                    else:\n\t                        # If the 'user_content.pt' file does NOT exist, load with the old smp api.\n\t                        # Checkpoint must have been saved with the old smp api.\n\t                        state_dict = torch.load(best_model_path, map_location=\"cpu\")\n\t                        state_dict[\"_smp_is_partial\"] = False\n\t                        # load_result = model.load_state_dict(state_dict, strict=True)\n\t                        set_peft_model_state_dict(model, state_dict) # For PEFT Lora\n\t                else:\n", "                    # We load the model state dict on the CPU to avoid an OOM error.\n\t                    state_dict = torch.load(best_model_path, map_location=\"cpu\")\n\t                    # If the model is on the GPU, it still works!\n\t                    # workaround for FSDP bug https://github.com/pytorch/pytorch/issues/82963\n\t                    # which takes *args instead of **kwargs\n\t                    # load_result = model.load_state_dict(state_dict, False)\n\t                    set_peft_model_state_dict(model, state_dict) # For PEFT Lora\n\t        elif os.path.exists(os.path.join(self.state.best_model_checkpoint, WEIGHTS_INDEX_NAME)):\n\t            # load_result = load_sharded_checkpoint(\n\t            #     model, self.state.best_model_checkpoint, strict=is_sagemaker_mp_enabled()\n", "            # )\n\t            # if not is_sagemaker_mp_enabled():\n\t            #     self._issue_warnings_after_load(load_result)\n\t            logger.error(\"load_sharded_checkpoint is unsupported for PEFT Lora\")\n\t        else:\n\t            logger.warning(\n\t                f\"Could not locate the best model at {best_model_path}, if you are running a distributed training \"\n\t                \"on multiple nodes, you should activate `--save_on_each_node`.\"\n\t            )\n\t    def _issue_warnings_after_load(self, load_result):\n", "        if len(load_result.missing_keys) != 0:\n\t            if self.model._keys_to_ignore_on_save is not None and set(load_result.missing_keys) == set(\n\t                self.model._keys_to_ignore_on_save\n\t            ):\n\t                self.model.tie_weights()\n\t            else:\n\t                logger.warning(f\"There were missing keys in the checkpoint model loaded: {load_result.missing_keys}.\")\n\t        if len(load_result.unexpected_keys) != 0:\n\t            logger.warning(\n\t                f\"There were unexpected keys in the checkpoint model loaded: {load_result.unexpected_keys}.\"\n", "            )\n\t    def _maybe_log_save_evaluate(self, tr_loss, model, trial, epoch, ignore_keys_for_eval):\n\t        if self.control.should_log:\n\t            if is_torch_tpu_available():\n\t                xm.mark_step()\n\t            logs: Dict[str, float] = {}\n\t            # all_gather + mean() to get average loss over all processes\n\t            tr_loss_scalar = self._nested_gather(tr_loss).mean().item()\n\t            # reset tr_loss to zero\n\t            tr_loss -= tr_loss\n", "            logs[\"loss\"] = round(tr_loss_scalar / (self.state.global_step - self._globalstep_last_logged), 4)\n\t            logs[\"learning_rate\"] = self._get_learning_rate()\n\t            self._total_loss_scalar += tr_loss_scalar\n\t            self._globalstep_last_logged = self.state.global_step\n\t            self.store_flos()\n\t            self.log(logs)\n\t        metrics = None\n\t        if self.control.should_evaluate:\n\t            if isinstance(self.eval_dataset, dict):\n\t                for eval_dataset_name, eval_dataset in self.eval_dataset.items():\n", "                    metrics = self.evaluate(\n\t                        eval_dataset=eval_dataset,\n\t                        ignore_keys=ignore_keys_for_eval,\n\t                        metric_key_prefix=f\"eval_{eval_dataset_name}\",\n\t                    )\n\t            else:\n\t                metrics = self.evaluate(ignore_keys=ignore_keys_for_eval)\n\t            self._report_to_hp_search(trial, self.state.global_step, metrics)\n\t        if self.control.should_save:\n\t            self._save_checkpoint(model, trial, metrics=metrics)\n", "            self.control = self.callback_handler.on_save(self.args, self.state, self.control)\n\t    def _load_rng_state(self, checkpoint):\n\t        # Load RNG states from `checkpoint`\n\t        if checkpoint is None:\n\t            return\n\t        if self.args.world_size > 1:\n\t            process_index = self.args.process_index\n\t            rng_file = os.path.join(checkpoint, f\"rng_state_{process_index}.pth\")\n\t            if not os.path.isfile(rng_file):\n\t                logger.info(\n", "                    f\"Didn't find an RNG file for process {process_index}, if you are resuming a training that \"\n\t                    \"wasn't launched in a distributed fashion, reproducibility is not guaranteed.\"\n\t                )\n\t                return\n\t        else:\n\t            rng_file = os.path.join(checkpoint, \"rng_state.pth\")\n\t            if not os.path.isfile(rng_file):\n\t                logger.info(\n\t                    \"Didn't find an RNG file, if you are resuming a training that was launched in a distributed \"\n\t                    \"fashion, reproducibility is not guaranteed.\"\n", "                )\n\t                return\n\t        checkpoint_rng_state = torch.load(rng_file)\n\t        random.setstate(checkpoint_rng_state[\"python\"])\n\t        np.random.set_state(checkpoint_rng_state[\"numpy\"])\n\t        torch.random.set_rng_state(checkpoint_rng_state[\"cpu\"])\n\t        if torch.cuda.is_available():\n\t            if self.args.local_rank != -1:\n\t                torch.cuda.random.set_rng_state(checkpoint_rng_state[\"cuda\"])\n\t            else:\n", "                try:\n\t                    torch.cuda.random.set_rng_state_all(checkpoint_rng_state[\"cuda\"])\n\t                except Exception as e:\n\t                    logger.info(\n\t                        f\"Didn't manage to set back the RNG states of the GPU because of the following error:\\n {e}\"\n\t                        \"\\nThis won't yield the same results as if the training had not been interrupted.\"\n\t                    )\n\t        if is_torch_tpu_available():\n\t            xm.set_rng_state(checkpoint_rng_state[\"xla\"])\n\t    def _save_checkpoint(self, model, trial, metrics=None):\n", "        # In all cases, including ddp/dp/deepspeed, self.model is always a reference to the model we\n\t        # want to save except FullyShardedDDP.\n\t        # assert unwrap_model(model) is self.model, \"internal model should be a reference to self.model\"\n\t        # Save model checkpoint\n\t        checkpoint_folder = f\"{PREFIX_CHECKPOINT_DIR}-{self.state.global_step}\"\n\t        if self.hp_search_backend is None and trial is None:\n\t            self.store_flos()\n\t        run_dir = self._get_output_dir(trial=trial)\n\t        output_dir = os.path.join(run_dir, checkpoint_folder)\n\t        self.save_model(output_dir, _internal_call=True)\n", "        if self.deepspeed:\n\t            # under zero3 model file itself doesn't get saved since it's bogus! Unless deepspeed\n\t            # config `stage3_gather_16bit_weights_on_model_save` is True\n\t            self.deepspeed.save_checkpoint(output_dir)\n\t        # Save optimizer and scheduler\n\t        if self.sharded_ddp == ShardedDDPOption.SIMPLE:\n\t            self.optimizer.consolidate_state_dict()\n\t        if is_torch_tpu_available():\n\t            xm.rendezvous(\"saving_optimizer_states\")\n\t            xm.save(self.optimizer.state_dict(), os.path.join(output_dir, OPTIMIZER_NAME))\n", "            with warnings.catch_warnings(record=True) as caught_warnings:\n\t                xm.save(self.lr_scheduler.state_dict(), os.path.join(output_dir, SCHEDULER_NAME))\n\t                reissue_pt_warnings(caught_warnings)\n\t        elif is_sagemaker_mp_enabled():\n\t            opt_state_dict = self.optimizer.local_state_dict(gather_if_shard=False)\n\t            smp.barrier()\n\t            if smp.rdp_rank() == 0 or smp.state.cfg.shard_optimizer_state:\n\t                smp.save(\n\t                    opt_state_dict,\n\t                    os.path.join(output_dir, OPTIMIZER_NAME),\n", "                    partial=True,\n\t                    v3=smp.state.cfg.shard_optimizer_state,\n\t                )\n\t            if self.args.should_save:\n\t                with warnings.catch_warnings(record=True) as caught_warnings:\n\t                    torch.save(self.lr_scheduler.state_dict(), os.path.join(output_dir, SCHEDULER_NAME))\n\t                reissue_pt_warnings(caught_warnings)\n\t                if self.do_grad_scaling:\n\t                    torch.save(self.scaler.state_dict(), os.path.join(output_dir, SCALER_NAME))\n\t        elif self.args.should_save and not self.deepspeed:\n", "            # deepspeed.save_checkpoint above saves model/optim/sched\n\t            torch.save(self.optimizer.state_dict(), os.path.join(output_dir, OPTIMIZER_NAME))\n\t            with warnings.catch_warnings(record=True) as caught_warnings:\n\t                torch.save(self.lr_scheduler.state_dict(), os.path.join(output_dir, SCHEDULER_NAME))\n\t            reissue_pt_warnings(caught_warnings)\n\t            if self.do_grad_scaling:\n\t                torch.save(self.scaler.state_dict(), os.path.join(output_dir, SCALER_NAME))\n\t        # Determine the new best metric / best model checkpoint\n\t        if metrics is not None and self.args.metric_for_best_model is not None:\n\t            metric_to_check = self.args.metric_for_best_model\n", "            if not metric_to_check.startswith(\"eval_\"):\n\t                metric_to_check = f\"eval_{metric_to_check}\"\n\t            metric_value = metrics[metric_to_check]\n\t            operator = np.greater if self.args.greater_is_better else np.less\n\t            if (\n\t                self.state.best_metric is None\n\t                or self.state.best_model_checkpoint is None\n\t                or operator(metric_value, self.state.best_metric)\n\t            ):\n\t                self.state.best_metric = metric_value\n", "                self.state.best_model_checkpoint = output_dir\n\t        # Save the Trainer state\n\t        if self.args.should_save:\n\t            self.state.save_to_json(os.path.join(output_dir, TRAINER_STATE_NAME))\n\t        # Save RNG state in non-distributed training\n\t        rng_states = {\n\t            \"python\": random.getstate(),\n\t            \"numpy\": np.random.get_state(),\n\t            \"cpu\": torch.random.get_rng_state(),\n\t        }\n", "        if torch.cuda.is_available():\n\t            if self.args.local_rank == -1:\n\t                # In non distributed, we save the global CUDA RNG state (will take care of DataParallel)\n\t                rng_states[\"cuda\"] = torch.cuda.random.get_rng_state_all()\n\t            else:\n\t                rng_states[\"cuda\"] = torch.cuda.random.get_rng_state()\n\t        if is_torch_tpu_available():\n\t            rng_states[\"xla\"] = xm.get_rng_state()\n\t        # A process can arrive here before the process 0 has a chance to save the model, in which case output_dir may\n\t        # not yet exist.\n", "        os.makedirs(output_dir, exist_ok=True)\n\t        if self.args.world_size <= 1:\n\t            torch.save(rng_states, os.path.join(output_dir, \"rng_state.pth\"))\n\t        else:\n\t            torch.save(rng_states, os.path.join(output_dir, f\"rng_state_{self.args.process_index}.pth\"))\n\t        if self.args.push_to_hub:\n\t            self._push_from_checkpoint(output_dir)\n\t        # Maybe delete some older checkpoints.\n\t        if self.args.should_save:\n\t            self._rotate_checkpoints(use_mtime=True, output_dir=run_dir)\n", "    def _load_optimizer_and_scheduler(self, checkpoint):\n\t        \"\"\"If optimizer and scheduler states exist, load them.\"\"\"\n\t        if checkpoint is None:\n\t            return\n\t        if self.deepspeed:\n\t            # deepspeed loads optimizer/lr_scheduler together with the model in deepspeed_init\n\t            return\n\t        checkpoint_file_exists = (\n\t            glob.glob(os.path.join(checkpoint, OPTIMIZER_NAME) + \"_*\")\n\t            if is_sagemaker_mp_enabled()\n", "            else os.path.isfile(os.path.join(checkpoint, OPTIMIZER_NAME))\n\t        )\n\t        if checkpoint_file_exists and os.path.isfile(os.path.join(checkpoint, SCHEDULER_NAME)):\n\t            # Load in optimizer and scheduler states\n\t            if is_torch_tpu_available():\n\t                # On TPU we have to take some extra precautions to properly load the states on the right device.\n\t                optimizer_state = torch.load(os.path.join(checkpoint, OPTIMIZER_NAME), map_location=\"cpu\")\n\t                with warnings.catch_warnings(record=True) as caught_warnings:\n\t                    lr_scheduler_state = torch.load(os.path.join(checkpoint, SCHEDULER_NAME), map_location=\"cpu\")\n\t                reissue_pt_warnings(caught_warnings)\n", "                xm.send_cpu_data_to_device(optimizer_state, self.args.device)\n\t                xm.send_cpu_data_to_device(lr_scheduler_state, self.args.device)\n\t                self.optimizer.load_state_dict(optimizer_state)\n\t                self.lr_scheduler.load_state_dict(lr_scheduler_state)\n\t            else:\n\t                map_location = \"cpu\" if is_sagemaker_mp_enabled() else self.args.device\n\t                if is_sagemaker_mp_enabled():\n\t                    if os.path.isfile(os.path.join(checkpoint, \"user_content.pt\")):\n\t                        # Optimizer checkpoint was saved with smp >= 1.10\n\t                        def opt_load_hook(mod, opt):\n", "                            opt.load_state_dict(smp.load(os.path.join(checkpoint, OPTIMIZER_NAME), partial=True))\n\t                    else:\n\t                        # Optimizer checkpoint was saved with smp < 1.10\n\t                        def opt_load_hook(mod, opt):\n\t                            if IS_SAGEMAKER_MP_POST_1_10:\n\t                                opt.load_state_dict(\n\t                                    smp.load(os.path.join(checkpoint, OPTIMIZER_NAME), partial=True, back_compat=True)\n\t                                )\n\t                            else:\n\t                                opt.load_state_dict(smp.load(os.path.join(checkpoint, OPTIMIZER_NAME), partial=True))\n", "                    self.model_wrapped.register_post_step_hook(opt_load_hook)\n\t                else:\n\t                    self.optimizer.load_state_dict(\n\t                        torch.load(os.path.join(checkpoint, OPTIMIZER_NAME), map_location=map_location)\n\t                    )\n\t                with warnings.catch_warnings(record=True) as caught_warnings:\n\t                    self.lr_scheduler.load_state_dict(torch.load(os.path.join(checkpoint, SCHEDULER_NAME)))\n\t                reissue_pt_warnings(caught_warnings)\n\t                if self.do_grad_scaling and os.path.isfile(os.path.join(checkpoint, SCALER_NAME)):\n\t                    self.scaler.load_state_dict(torch.load(os.path.join(checkpoint, SCALER_NAME)))\n", "    def hyperparameter_search(\n\t        self,\n\t        hp_space: Optional[Callable[[\"optuna.Trial\"], Dict[str, float]]] = None,\n\t        compute_objective: Optional[Callable[[Dict[str, float]], float]] = None,\n\t        n_trials: int = 20,\n\t        direction: str = \"minimize\",\n\t        backend: Optional[Union[\"str\", HPSearchBackend]] = None,\n\t        hp_name: Optional[Callable[[\"optuna.Trial\"], str]] = None,\n\t        **kwargs,\n\t    ) -> BestRun:\n", "        \"\"\"\n\t        Launch an hyperparameter search using `optuna` or `Ray Tune` or `SigOpt`. The optimized quantity is determined\n\t        by `compute_objective`, which defaults to a function returning the evaluation loss when no metric is provided,\n\t        the sum of all metrics otherwise.\n\t        <Tip warning={true}>\n\t        To use this method, you need to have provided a `model_init` when initializing your [`Trainer`]: we need to\n\t        reinitialize the model at each new run. This is incompatible with the `optimizers` argument, so you need to\n\t        subclass [`Trainer`] and override the method [`~Trainer.create_optimizer_and_scheduler`] for custom\n\t        optimizer/scheduler.\n\t        </Tip>\n", "        Args:\n\t            hp_space (`Callable[[\"optuna.Trial\"], Dict[str, float]]`, *optional*):\n\t                A function that defines the hyperparameter search space. Will default to\n\t                [`~trainer_utils.default_hp_space_optuna`] or [`~trainer_utils.default_hp_space_ray`] or\n\t                [`~trainer_utils.default_hp_space_sigopt`] depending on your backend.\n\t            compute_objective (`Callable[[Dict[str, float]], float]`, *optional*):\n\t                A function computing the objective to minimize or maximize from the metrics returned by the `evaluate`\n\t                method. Will default to [`~trainer_utils.default_compute_objective`].\n\t            n_trials (`int`, *optional*, defaults to 100):\n\t                The number of trial runs to test.\n", "            direction (`str`, *optional*, defaults to `\"minimize\"`):\n\t                Whether to optimize greater or lower objects. Can be `\"minimize\"` or `\"maximize\"`, you should pick\n\t                `\"minimize\"` when optimizing the validation loss, `\"maximize\"` when optimizing one or several metrics.\n\t            backend (`str` or [`~training_utils.HPSearchBackend`], *optional*):\n\t                The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending\n\t                on which one is installed. If all are installed, will default to optuna.\n\t            hp_name (`Callable[[\"optuna.Trial\"], str]]`, *optional*):\n\t                A function that defines the trial/run name. Will default to None.\n\t            kwargs (`Dict[str, Any]`, *optional*):\n\t                Additional keyword arguments passed along to `optuna.create_study` or `ray.tune.run`. For more\n", "                information see:\n\t                - the documentation of\n\t                  [optuna.create_study](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html)\n\t                - the documentation of [tune.run](https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run)\n\t                - the documentation of [sigopt](https://app.sigopt.com/docs/endpoints/experiments/create)\n\t        Returns:\n\t            [`trainer_utils.BestRun`]: All the information about the best run. Experiment summary can be found in\n\t            `run_summary` attribute for Ray backend.\n\t        \"\"\"\n\t        if backend is None:\n", "            backend = default_hp_search_backend()\n\t            if backend is None:\n\t                raise RuntimeError(\n\t                    \"At least one of optuna or ray should be installed. \"\n\t                    \"To install optuna run `pip install optuna`. \"\n\t                    \"To install ray run `pip install ray[tune]`. \"\n\t                    \"To install sigopt run `pip install sigopt`.\"\n\t                )\n\t        backend = HPSearchBackend(backend)\n\t        if backend == HPSearchBackend.OPTUNA and not is_optuna_available():\n", "            raise RuntimeError(\"You picked the optuna backend, but it is not installed. Use `pip install optuna`.\")\n\t        if backend == HPSearchBackend.RAY and not is_ray_tune_available():\n\t            raise RuntimeError(\n\t                \"You picked the Ray Tune backend, but it is not installed. Use `pip install 'ray[tune]'`.\"\n\t            )\n\t        if backend == HPSearchBackend.SIGOPT and not is_sigopt_available():\n\t            raise RuntimeError(\"You picked the sigopt backend, but it is not installed. Use `pip install sigopt`.\")\n\t        if backend == HPSearchBackend.WANDB and not is_wandb_available():\n\t            raise RuntimeError(\"You picked the wandb backend, but it is not installed. Use `pip install wandb`.\")\n\t        self.hp_search_backend = backend\n", "        if self.model_init is None:\n\t            raise RuntimeError(\n\t                \"To use hyperparameter search, you need to pass your model through a model_init function.\"\n\t            )\n\t        self.hp_space = default_hp_space[backend] if hp_space is None else hp_space\n\t        self.hp_name = hp_name\n\t        self.compute_objective = default_compute_objective if compute_objective is None else compute_objective\n\t        backend_dict = {\n\t            HPSearchBackend.OPTUNA: run_hp_search_optuna,\n\t            HPSearchBackend.RAY: run_hp_search_ray,\n", "            HPSearchBackend.SIGOPT: run_hp_search_sigopt,\n\t            HPSearchBackend.WANDB: run_hp_search_wandb,\n\t        }\n\t        best_run = backend_dict[backend](self, n_trials, direction, **kwargs)\n\t        self.hp_search_backend = None\n\t        return best_run\n\t    def log(self, logs: Dict[str, float]) -> None:\n\t        \"\"\"\n\t        Log `logs` on the various objects watching training.\n\t        Subclass and override this method to inject custom behavior.\n", "        Args:\n\t            logs (`Dict[str, float]`):\n\t                The values to log.\n\t        \"\"\"\n\t        if self.state.epoch is not None:\n\t            logs[\"epoch\"] = round(self.state.epoch, 2)\n\t        output = {**logs, **{\"step\": self.state.global_step}}\n\t        self.state.log_history.append(output)\n\t        self.control = self.callback_handler.on_log(self.args, self.state, self.control, logs)\n\t    def _prepare_input(self, data: Union[torch.Tensor, Any]) -> Union[torch.Tensor, Any]:\n", "        \"\"\"\n\t        Prepares one `data` before feeding it to the model, be it a tensor or a nested list/dictionary of tensors.\n\t        \"\"\"\n\t        if isinstance(data, Mapping):\n\t            return type(data)({k: self._prepare_input(v) for k, v in data.items()})\n\t        elif isinstance(data, (tuple, list)):\n\t            return type(data)(self._prepare_input(v) for v in data)\n\t        elif isinstance(data, torch.Tensor):\n\t            kwargs = {\"device\": self.args.device}\n\t            if self.deepspeed and (torch.is_floating_point(data) or torch.is_complex(data)):\n", "                # NLP models inputs are int/uint and those get adjusted to the right dtype of the\n\t                # embedding. Other models such as wav2vec2's inputs are already float and thus\n\t                # may need special handling to match the dtypes of the model\n\t                kwargs.update({\"dtype\": self.args.hf_deepspeed_config.dtype()})\n\t            return data.to(**kwargs)\n\t        return data\n\t    def _prepare_inputs(self, inputs: Dict[str, Union[torch.Tensor, Any]]) -> Dict[str, Union[torch.Tensor, Any]]:\n\t        \"\"\"\n\t        Prepare `inputs` before feeding them to the model, converting them to tensors if they are not already and\n\t        handling potential state.\n", "        \"\"\"\n\t        inputs = self._prepare_input(inputs)\n\t        if len(inputs) == 0:\n\t            raise ValueError(\n\t                \"The batch received was empty, your model won't be able to train on it. Double-check that your \"\n\t                f\"training dataset contains keys expected by the model: {','.join(self._signature_columns)}.\"\n\t            )\n\t        if self.args.past_index >= 0 and self._past is not None:\n\t            inputs[\"mems\"] = self._past\n\t        return inputs\n", "    def compute_loss_context_manager(self):\n\t        \"\"\"\n\t        A helper wrapper to group together context managers.\n\t        \"\"\"\n\t        return self.autocast_smart_context_manager()\n\t    def autocast_smart_context_manager(self, cache_enabled: Optional[bool] = True):\n\t        \"\"\"\n\t        A helper wrapper that creates an appropriate context manager for `autocast` while feeding it the desired\n\t        arguments, depending on the situation.\n\t        \"\"\"\n", "        if self.use_cuda_amp or self.use_cpu_amp:\n\t            if is_torch_greater_or_equal_than_1_10:\n\t                ctx_manager = (\n\t                    torch.cpu.amp.autocast(cache_enabled=cache_enabled, dtype=self.amp_dtype)\n\t                    if self.use_cpu_amp\n\t                    else torch.cuda.amp.autocast(cache_enabled=cache_enabled, dtype=self.amp_dtype)\n\t                )\n\t            else:\n\t                ctx_manager = torch.cuda.amp.autocast()\n\t        else:\n", "            ctx_manager = contextlib.nullcontext() if sys.version_info >= (3, 7) else contextlib.suppress()\n\t        return ctx_manager\n\t    def training_step(self, model: nn.Module, inputs: Dict[str, Union[torch.Tensor, Any]]) -> torch.Tensor:\n\t        \"\"\"\n\t        Perform a training step on a batch of inputs.\n\t        Subclass and override to inject custom behavior.\n\t        Args:\n\t            model (`nn.Module`):\n\t                The model to train.\n\t            inputs (`Dict[str, Union[torch.Tensor, Any]]`):\n", "                The inputs and targets of the model.\n\t                The dictionary will be unpacked before being fed to the model. Most models expect the targets under the\n\t                argument `labels`. Check your model's documentation for all accepted arguments.\n\t        Return:\n\t            `torch.Tensor`: The tensor with training loss on this batch.\n\t        \"\"\"\n\t        model.train()\n\t        inputs = self._prepare_inputs(inputs)\n\t        if is_sagemaker_mp_enabled():\n\t            loss_mb = smp_forward_backward(model, inputs, self.args.gradient_accumulation_steps)\n", "            return loss_mb.reduce_mean().detach().to(self.args.device)\n\t        with self.compute_loss_context_manager():\n\t            loss = self.compute_loss(model, inputs)\n\t        if self.args.n_gpu > 1:\n\t            loss = loss.mean()  # mean() to average on multi-gpu parallel training\n\t        if self.args.gradient_accumulation_steps > 1 and not self.deepspeed:\n\t            # deepspeed handles loss scaling by gradient_accumulation_steps in its `backward`\n\t            loss = loss / self.args.gradient_accumulation_steps\n\t        if self.do_grad_scaling:\n\t            self.scaler.scale(loss).backward()\n", "        elif self.use_apex:\n\t            with amp.scale_loss(loss, self.optimizer) as scaled_loss:\n\t                scaled_loss.backward()\n\t        elif self.deepspeed:\n\t            # loss gets scaled under gradient_accumulation_steps in deepspeed\n\t            loss = self.deepspeed.backward(loss)\n\t        else:\n\t            loss.backward()\n\t        return loss.detach()\n\t    def compute_loss(self, model, inputs, return_outputs=False):\n", "        \"\"\"\n\t        How the loss is computed by Trainer. By default, all models return the loss in the first element.\n\t        Subclass and override for custom behavior.\n\t        \"\"\"\n\t        if self.label_smoother is not None and \"labels\" in inputs:\n\t            labels = inputs.pop(\"labels\")\n\t        else:\n\t            labels = None\n\t        outputs = model(**inputs)\n\t        # Save past state if it exists\n", "        # TODO: this needs to be fixed and made cleaner later.\n\t        if self.args.past_index >= 0:\n\t            self._past = outputs[self.args.past_index]\n\t        if labels is not None:\n\t            if unwrap_model(model)._get_name() in MODEL_FOR_CAUSAL_LM_MAPPING_NAMES.values():\n\t                loss = self.label_smoother(outputs, labels, shift_labels=True)\n\t            else:\n\t                loss = self.label_smoother(outputs, labels)\n\t        else:\n\t            if isinstance(outputs, dict) and \"loss\" not in outputs:\n", "                raise ValueError(\n\t                    \"The model did not return a loss from the inputs, only the following keys: \"\n\t                    f\"{','.join(outputs.keys())}. For reference, the inputs it received are {','.join(inputs.keys())}.\"\n\t                )\n\t            # We don't use .loss here since the model may return tuples instead of ModelOutput.\n\t            loss = outputs[\"loss\"] if isinstance(outputs, dict) else outputs[0]\n\t        return (loss, outputs) if return_outputs else loss\n\t    def is_local_process_zero(self) -> bool:\n\t        \"\"\"\n\t        Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several\n", "        machines) main process.\n\t        \"\"\"\n\t        return self.args.local_process_index == 0\n\t    def is_world_process_zero(self) -> bool:\n\t        \"\"\"\n\t        Whether or not this process is the global main process (when training in a distributed fashion on several\n\t        machines, this is only going to be `True` for one process).\n\t        \"\"\"\n\t        # Special case for SageMaker ModelParallel since there process_index is dp_process_index, not the global\n\t        # process index.\n", "        if is_sagemaker_mp_enabled():\n\t            return smp.rank() == 0\n\t        else:\n\t            return self.args.process_index == 0\n\t    def save_model(self, output_dir: Optional[str] = None, _internal_call: bool = False):\n\t        \"\"\"\n\t        Will save the model, so you can reload it using `from_pretrained()`.\n\t        Will only save from the main process.\n\t        \"\"\"\n\t        if output_dir is None:\n", "            output_dir = self.args.output_dir\n\t        if is_torch_tpu_available():\n\t            self._save_tpu(output_dir)\n\t        elif is_sagemaker_mp_enabled():\n\t            # Calling the state_dict needs to be done on the wrapped model and on all processes.\n\t            os.makedirs(output_dir, exist_ok=True)\n\t            state_dict = self.model_wrapped.state_dict()\n\t            if self.args.should_save:\n\t                self._save(output_dir, state_dict=state_dict)\n\t            if IS_SAGEMAKER_MP_POST_1_10:\n", "                # 'user_content.pt' indicates model state_dict saved with smp >= 1.10\n\t                Path(os.path.join(output_dir, \"user_content.pt\")).touch()\n\t        elif (\n\t            ShardedDDPOption.ZERO_DP_2 in self.args.sharded_ddp\n\t            or ShardedDDPOption.ZERO_DP_3 in self.args.sharded_ddp\n\t            or self.fsdp is not None\n\t        ):\n\t            state_dict = self.model.state_dict()\n\t            if self.args.should_save:\n\t                self._save(output_dir, state_dict=state_dict)\n", "        elif self.deepspeed:\n\t            # this takes care of everything as long as we aren't under zero3\n\t            if self.args.should_save:\n\t                self._save(output_dir)\n\t            if is_deepspeed_zero3_enabled():\n\t                # It's too complicated to try to override different places where the weights dump gets\n\t                # saved, so since under zero3 the file is bogus, simply delete it. The user should\n\t                # either user deepspeed checkpoint to resume or to recover full weights use\n\t                # zero_to_fp32.py stored in the checkpoint.\n\t                if self.args.should_save:\n", "                    file = os.path.join(output_dir, WEIGHTS_NAME)\n\t                    if os.path.isfile(file):\n\t                        # logger.info(f\"deepspeed zero3: removing {file}, see zero_to_fp32.py to recover weights\")\n\t                        os.remove(file)\n\t                # now save the real model if stage3_gather_16bit_weights_on_model_save=True\n\t                # if false it will not be saved.\n\t                # This must be called on all ranks\n\t                if not self.deepspeed.save_16bit_model(output_dir, WEIGHTS_NAME):\n\t                    logger.warning(\n\t                        \"deepspeed.save_16bit_model didn't save the model, since\"\n", "                        \" stage3_gather_16bit_weights_on_model_save=false. Saving the full checkpoint instead, use\"\n\t                        \" zero_to_fp32.py to recover weights\"\n\t                    )\n\t                    self.deepspeed.save_checkpoint(output_dir)\n\t        elif self.args.should_save:\n\t            self._save(output_dir)\n\t        # Push to the Hub when `save_model` is called by the user.\n\t        if self.args.push_to_hub and not _internal_call:\n\t            self.push_to_hub(commit_message=\"Model save\")\n\t    def _save_tpu(self, output_dir: Optional[str] = None):\n", "        output_dir = output_dir if output_dir is not None else self.args.output_dir\n\t        logger.info(f\"Saving model checkpoint to {output_dir}\")\n\t        if xm.is_master_ordinal():\n\t            os.makedirs(output_dir, exist_ok=True)\n\t            torch.save(self.args, os.path.join(output_dir, TRAINING_ARGS_NAME))\n\t        # Save a trained model and configuration using `save_pretrained()`.\n\t        # They can then be reloaded using `from_pretrained()`\n\t        xm.rendezvous(\"saving_checkpoint\")\n\t        if not isinstance(self.model, PreTrainedModel):\n\t            if isinstance(unwrap_model(self.model), PreTrainedModel):\n", "                unwrap_model(self.model).save_pretrained(\n\t                    output_dir,\n\t                    is_main_process=self.args.should_save,\n\t                    state_dict=self.model.state_dict(),\n\t                    save_function=xm.save,\n\t                )\n\t            else:\n\t                logger.info(\"Trainer.model is not a `PreTrainedModel`, only saving its state dict.\")\n\t                state_dict = self.model.state_dict()\n\t                xm.save(state_dict, os.path.join(output_dir, WEIGHTS_NAME))\n", "        else:\n\t            self.model.save_pretrained(output_dir, is_main_process=self.args.should_save, save_function=xm.save)\n\t        if self.tokenizer is not None and self.args.should_save:\n\t            self.tokenizer.save_pretrained(output_dir)\n\t    def _save(self, output_dir: Optional[str] = None, state_dict=None):\n\t        # If we are executing this function, we are the process zero, so we don't check for that.\n\t        output_dir = output_dir if output_dir is not None else self.args.output_dir\n\t        os.makedirs(output_dir, exist_ok=True)\n\t        logger.info(f\"Saving model checkpoint to {output_dir}\")\n\t        # Save a trained model and configuration using `save_pretrained()`.\n", "        # They can then be reloaded using `from_pretrained()`\n\t        self.model.save_pretrained(output_dir)\n\t        # if not isinstance(self.model, PreTrainedModel):\n\t        #     if isinstance(unwrap_model(self.model), PreTrainedModel):\n\t        #         if state_dict is None:\n\t        #             state_dict = self.model.state_dict()\n\t        #         unwrap_model(self.model).save_pretrained(output_dir, state_dict=filtered_state_dict)\n\t        #     else:\n\t        #         logger.info(\"Trainer.model is not a `PreTrainedModel`, only saving its state dict.\")\n\t        #         if state_dict is None:\n", "        #             state_dict = self.model.state_dict()\n\t        #         torch.save(state_dict, os.path.join(output_dir, WEIGHTS_NAME))\n\t        # else:\n\t        #     if self.save_prefixencoder:\n\t        #         print(\"Saving PrefixEncoder\")\n\t        #         state_dict = self.model.state_dict()\n\t        #         filtered_state_dict = {}\n\t        #         for k, v in self.model.named_parameters():\n\t        #             if v.requires_grad:\n\t        #                 filtered_state_dict[k] = state_dict[k]\n", "        #         self.model.save_pretrained(output_dir, state_dict=filtered_state_dict)\n\t        #     else:\n\t        #         print(\"Saving the whole model\")\n\t        #         self.model.save_pretrained(output_dir, state_dict=state_dict)\n\t        if self.tokenizer is not None:\n\t            self.tokenizer.save_pretrained(output_dir)\n\t        # Good practice: save your training arguments together with the trained model\n\t        torch.save(self.args, os.path.join(output_dir, TRAINING_ARGS_NAME))\n\t    def store_flos(self):\n\t        # Storing the number of floating-point operations that went into the model\n", "        if self.args.local_rank != -1:\n\t            self.state.total_flos += (\n\t                distributed_broadcast_scalars([self.current_flos], device=self.args.device).sum().item()\n\t            )\n\t            self.current_flos = 0\n\t        else:\n\t            self.state.total_flos += self.current_flos\n\t            self.current_flos = 0\n\t    def _sorted_checkpoints(\n\t        self, output_dir=None, checkpoint_prefix=PREFIX_CHECKPOINT_DIR, use_mtime=False\n", "    ) -> List[str]:\n\t        ordering_and_checkpoint_path = []\n\t        glob_checkpoints = [str(x) for x in Path(output_dir).glob(f\"{checkpoint_prefix}-*\") if os.path.isdir(x)]\n\t        for path in glob_checkpoints:\n\t            if use_mtime:\n\t                ordering_and_checkpoint_path.append((os.path.getmtime(path), path))\n\t            else:\n\t                regex_match = re.match(f\".*{checkpoint_prefix}-([0-9]+)\", path)\n\t                if regex_match is not None and regex_match.groups() is not None:\n\t                    ordering_and_checkpoint_path.append((int(regex_match.groups()[0]), path))\n", "        checkpoints_sorted = sorted(ordering_and_checkpoint_path)\n\t        checkpoints_sorted = [checkpoint[1] for checkpoint in checkpoints_sorted]\n\t        # Make sure we don't delete the best model.\n\t        if self.state.best_model_checkpoint is not None:\n\t            best_model_index = checkpoints_sorted.index(str(Path(self.state.best_model_checkpoint)))\n\t            for i in range(best_model_index, len(checkpoints_sorted) - 2):\n\t                checkpoints_sorted[i], checkpoints_sorted[i + 1] = checkpoints_sorted[i + 1], checkpoints_sorted[i]\n\t        return checkpoints_sorted\n\t    def _rotate_checkpoints(self, use_mtime=False, output_dir=None) -> None:\n\t        if self.args.save_total_limit is None or self.args.save_total_limit <= 0:\n", "            return\n\t        # Check if we should delete older checkpoint(s)\n\t        checkpoints_sorted = self._sorted_checkpoints(use_mtime=use_mtime, output_dir=output_dir)\n\t        if len(checkpoints_sorted) <= self.args.save_total_limit:\n\t            return\n\t        # If save_total_limit=1 with load_best_model_at_end=True, we could end up deleting the last checkpoint, which\n\t        # we don't do to allow resuming.\n\t        save_total_limit = self.args.save_total_limit\n\t        if (\n\t            self.state.best_model_checkpoint is not None\n", "            and self.args.save_total_limit == 1\n\t            and checkpoints_sorted[-1] != self.state.best_model_checkpoint\n\t        ):\n\t            save_total_limit = 2\n\t        number_of_checkpoints_to_delete = max(0, len(checkpoints_sorted) - save_total_limit)\n\t        checkpoints_to_be_deleted = checkpoints_sorted[:number_of_checkpoints_to_delete]\n\t        for checkpoint in checkpoints_to_be_deleted:\n\t            logger.info(f\"Deleting older checkpoint [{checkpoint}] due to args.save_total_limit\")\n\t            shutil.rmtree(checkpoint, ignore_errors=True)\n\t    def evaluate(\n", "        self,\n\t        eval_dataset: Optional[Dataset] = None,\n\t        ignore_keys: Optional[List[str]] = None,\n\t        metric_key_prefix: str = \"eval\",\n\t    ) -> Dict[str, float]:\n\t        \"\"\"\n\t        Run evaluation and returns metrics.\n\t        The calling script will be responsible for providing a method to compute metrics, as they are task-dependent\n\t        (pass it to the init `compute_metrics` argument).\n\t        You can also subclass and override this method to inject custom behavior.\n", "        Args:\n\t            eval_dataset (`Dataset`, *optional*):\n\t                Pass a dataset if you wish to override `self.eval_dataset`. If it is a [`~datasets.Dataset`], columns\n\t                not accepted by the `model.forward()` method are automatically removed. It must implement the `__len__`\n\t                method.\n\t            ignore_keys (`Lst[str]`, *optional*):\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n\t                gathering predictions.\n\t            metric_key_prefix (`str`, *optional*, defaults to `\"eval\"`):\n\t                An optional prefix to be used as the metrics key prefix. For example the metrics \"bleu\" will be named\n", "                \"eval_bleu\" if the prefix is \"eval\" (default)\n\t        Returns:\n\t            A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The\n\t            dictionary also contains the epoch number which comes from the training state.\n\t        \"\"\"\n\t        # memory metrics - must set up as early as possible\n\t        self._memory_tracker.start()\n\t        eval_dataloader = self.get_eval_dataloader(eval_dataset)\n\t        start_time = time.time()\n\t        eval_loop = self.prediction_loop if self.args.use_legacy_prediction_loop else self.evaluation_loop\n", "        output = eval_loop(\n\t            eval_dataloader,\n\t            description=\"Evaluation\",\n\t            # No point gathering the predictions if there are no metrics, otherwise we defer to\n\t            # self.args.prediction_loss_only\n\t            prediction_loss_only=True if self.compute_metrics is None else None,\n\t            ignore_keys=ignore_keys,\n\t            metric_key_prefix=metric_key_prefix,\n\t        )\n\t        total_batch_size = self.args.eval_batch_size * self.args.world_size\n", "        if f\"{metric_key_prefix}_jit_compilation_time\" in output.metrics:\n\t            start_time += output.metrics[f\"{metric_key_prefix}_jit_compilation_time\"]\n\t        output.metrics.update(\n\t            speed_metrics(\n\t                metric_key_prefix,\n\t                start_time,\n\t                num_samples=output.num_samples,\n\t                num_steps=math.ceil(output.num_samples / total_batch_size),\n\t            )\n\t        )\n", "        self.log(output.metrics)\n\t        if DebugOption.TPU_METRICS_DEBUG in self.args.debug:\n\t            # tpu-comment: Logging debug metrics for PyTorch/XLA (compile, execute times, ops, etc.)\n\t            xm.master_print(met.metrics_report())\n\t        self.control = self.callback_handler.on_evaluate(self.args, self.state, self.control, output.metrics)\n\t        self._memory_tracker.stop_and_update_metrics(output.metrics)\n\t        return output.metrics\n\t    def predict(\n\t        self, test_dataset: Dataset, ignore_keys: Optional[List[str]] = None, metric_key_prefix: str = \"test\"\n\t    ) -> PredictionOutput:\n", "        \"\"\"\n\t        Run prediction and returns predictions and potential metrics.\n\t        Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method\n\t        will also return metrics, like in `evaluate()`.\n\t        Args:\n\t            test_dataset (`Dataset`):\n\t                Dataset to run the predictions on. If it is an `datasets.Dataset`, columns not accepted by the\n\t                `model.forward()` method are automatically removed. Has to implement the method `__len__`\n\t            ignore_keys (`Lst[str]`, *optional*):\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n", "                gathering predictions.\n\t            metric_key_prefix (`str`, *optional*, defaults to `\"test\"`):\n\t                An optional prefix to be used as the metrics key prefix. For example the metrics \"bleu\" will be named\n\t                \"test_bleu\" if the prefix is \"test\" (default)\n\t        <Tip>\n\t        If your predictions or labels have different sequence length (for instance because you're doing dynamic padding\n\t        in a token classification task) the predictions will be padded (on the right) to allow for concatenation into\n\t        one array. The padding index is -100.\n\t        </Tip>\n\t        Returns: *NamedTuple* A namedtuple with the following keys:\n", "            - predictions (`np.ndarray`): The predictions on `test_dataset`.\n\t            - label_ids (`np.ndarray`, *optional*): The labels (if the dataset contained some).\n\t            - metrics (`Dict[str, float]`, *optional*): The potential dictionary of metrics (if the dataset contained\n\t              labels).\n\t        \"\"\"\n\t        # memory metrics - must set up as early as possible\n\t        self._memory_tracker.start()\n\t        test_dataloader = self.get_test_dataloader(test_dataset)\n\t        start_time = time.time()\n\t        eval_loop = self.prediction_loop if self.args.use_legacy_prediction_loop else self.evaluation_loop\n", "        output = eval_loop(\n\t            test_dataloader, description=\"Prediction\", ignore_keys=ignore_keys, metric_key_prefix=metric_key_prefix\n\t        )\n\t        total_batch_size = self.args.eval_batch_size * self.args.world_size\n\t        if f\"{metric_key_prefix}_jit_compilation_time\" in output.metrics:\n\t            start_time += output.metrics[f\"{metric_key_prefix}_jit_compilation_time\"]\n\t        output.metrics.update(\n\t            speed_metrics(\n\t                metric_key_prefix,\n\t                start_time,\n", "                num_samples=output.num_samples,\n\t                num_steps=math.ceil(output.num_samples / total_batch_size),\n\t            )\n\t        )\n\t        self.control = self.callback_handler.on_predict(self.args, self.state, self.control, output.metrics)\n\t        self._memory_tracker.stop_and_update_metrics(output.metrics)\n\t        return PredictionOutput(predictions=output.predictions, label_ids=output.label_ids, metrics=output.metrics)\n\t    def evaluation_loop(\n\t        self,\n\t        dataloader: DataLoader,\n", "        description: str,\n\t        prediction_loss_only: Optional[bool] = None,\n\t        ignore_keys: Optional[List[str]] = None,\n\t        metric_key_prefix: str = \"eval\",\n\t    ) -> EvalLoopOutput:\n\t        \"\"\"\n\t        Prediction/evaluation loop, shared by `Trainer.evaluate()` and `Trainer.predict()`.\n\t        Works both with or without labels.\n\t        \"\"\"\n\t        args = self.args\n", "        prediction_loss_only = prediction_loss_only if prediction_loss_only is not None else args.prediction_loss_only\n\t        # if eval is called w/o train init deepspeed here\n\t        if args.deepspeed and not self.deepspeed:\n\t            # XXX: eval doesn't have `resume_from_checkpoint` arg but we should be able to do eval\n\t            # from the checkpoint eventually\n\t            deepspeed_engine, _, _ = deepspeed_init(\n\t                self, num_training_steps=0, resume_from_checkpoint=None, inference=True\n\t            )\n\t            self.model = deepspeed_engine.module\n\t            self.model_wrapped = deepspeed_engine\n", "            self.deepspeed = deepspeed_engine\n\t        model = self._wrap_model(self.model, training=False, dataloader=dataloader)\n\t        # if full fp16 or bf16 eval is wanted and this ``evaluation`` or ``predict`` isn't called\n\t        # while ``train`` is running, cast it to the right dtype first and then put on device\n\t        if not self.is_in_train:\n\t            if args.fp16_full_eval:\n\t                model = model.to(dtype=torch.float16, device=args.device)\n\t            elif args.bf16_full_eval:\n\t                model = model.to(dtype=torch.bfloat16, device=args.device)\n\t        batch_size = self.args.eval_batch_size\n", "        logger.info(f\"***** Running {description} *****\")\n\t        if has_length(dataloader):\n\t            logger.info(f\"  Num examples = {self.num_examples(dataloader)}\")\n\t        else:\n\t            logger.info(\"  Num examples: Unknown\")\n\t        logger.info(f\"  Batch size = {batch_size}\")\n\t        model.eval()\n\t        self.callback_handler.eval_dataloader = dataloader\n\t        # Do this before wrapping.\n\t        eval_dataset = getattr(dataloader, \"dataset\", None)\n", "        if is_torch_tpu_available():\n\t            dataloader = pl.ParallelLoader(dataloader, [args.device]).per_device_loader(args.device)\n\t        if args.past_index >= 0:\n\t            self._past = None\n\t        # Initialize containers\n\t        # losses/preds/labels on GPU/TPU (accumulated for eval_accumulation_steps)\n\t        losses_host = None\n\t        preds_host = None\n\t        labels_host = None\n\t        inputs_host = None\n", "        # losses/preds/labels on CPU (final containers)\n\t        all_losses = None\n\t        all_preds = None\n\t        all_labels = None\n\t        all_inputs = None\n\t        # Will be useful when we have an iterable dataset so don't know its length.\n\t        observed_num_examples = 0\n\t        # Main evaluation loop\n\t        for step, inputs in enumerate(dataloader):\n\t            # Update the observed num examples\n", "            observed_batch_size = find_batch_size(inputs)\n\t            if observed_batch_size is not None:\n\t                observed_num_examples += observed_batch_size\n\t                # For batch samplers, batch_size is not known by the dataloader in advance.\n\t                if batch_size is None:\n\t                    batch_size = observed_batch_size\n\t            # Prediction step\n\t            loss, logits, labels = self.prediction_step(model, inputs, prediction_loss_only, ignore_keys=ignore_keys)\n\t            inputs_decode = self._prepare_input(inputs[\"input_ids\"]) if args.include_inputs_for_metrics else None\n\t            if is_torch_tpu_available():\n", "                xm.mark_step()\n\t            # Update containers on host\n\t            if loss is not None:\n\t                losses = self._nested_gather(loss.repeat(batch_size))\n\t                losses_host = losses if losses_host is None else torch.cat((losses_host, losses), dim=0)\n\t            if labels is not None:\n\t                labels = self._pad_across_processes(labels)\n\t                labels = self._nested_gather(labels)\n\t                labels_host = labels if labels_host is None else nested_concat(labels_host, labels, padding_index=-100)\n\t            if inputs_decode is not None:\n", "                inputs_decode = self._pad_across_processes(inputs_decode)\n\t                inputs_decode = self._nested_gather(inputs_decode)\n\t                inputs_host = (\n\t                    inputs_decode\n\t                    if inputs_host is None\n\t                    else nested_concat(inputs_host, inputs_decode, padding_index=-100)\n\t                )\n\t            if logits is not None:\n\t                logits = self._pad_across_processes(logits)\n\t                logits = self._nested_gather(logits)\n", "                if self.preprocess_logits_for_metrics is not None:\n\t                    logits = self.preprocess_logits_for_metrics(logits, labels)\n\t                preds_host = logits if preds_host is None else nested_concat(preds_host, logits, padding_index=-100)\n\t            self.control = self.callback_handler.on_prediction_step(args, self.state, self.control)\n\t            # Gather all tensors and put them back on the CPU if we have done enough accumulation steps.\n\t            if args.eval_accumulation_steps is not None and (step + 1) % args.eval_accumulation_steps == 0:\n\t                if losses_host is not None:\n\t                    losses = nested_numpify(losses_host)\n\t                    all_losses = losses if all_losses is None else np.concatenate((all_losses, losses), axis=0)\n\t                if preds_host is not None:\n", "                    logits = nested_numpify(preds_host)\n\t                    all_preds = logits if all_preds is None else nested_concat(all_preds, logits, padding_index=-100)\n\t                if inputs_host is not None:\n\t                    inputs_decode = nested_numpify(inputs_host)\n\t                    all_inputs = (\n\t                        inputs_decode\n\t                        if all_inputs is None\n\t                        else nested_concat(all_inputs, inputs_decode, padding_index=-100)\n\t                    )\n\t                if labels_host is not None:\n", "                    labels = nested_numpify(labels_host)\n\t                    all_labels = (\n\t                        labels if all_labels is None else nested_concat(all_labels, labels, padding_index=-100)\n\t                    )\n\t                # Set back to None to begin a new accumulation\n\t                losses_host, preds_host, inputs_host, labels_host = None, None, None, None\n\t        if args.past_index and hasattr(self, \"_past\"):\n\t            # Clean the state at the end of the evaluation loop\n\t            delattr(self, \"_past\")\n\t        # Gather all remaining tensors and put them back on the CPU\n", "        if losses_host is not None:\n\t            losses = nested_numpify(losses_host)\n\t            all_losses = losses if all_losses is None else np.concatenate((all_losses, losses), axis=0)\n\t        if preds_host is not None:\n\t            logits = nested_numpify(preds_host)\n\t            all_preds = logits if all_preds is None else nested_concat(all_preds, logits, padding_index=-100)\n\t        if inputs_host is not None:\n\t            inputs_decode = nested_numpify(inputs_host)\n\t            all_inputs = (\n\t                inputs_decode if all_inputs is None else nested_concat(all_inputs, inputs_decode, padding_index=-100)\n", "            )\n\t        if labels_host is not None:\n\t            labels = nested_numpify(labels_host)\n\t            all_labels = labels if all_labels is None else nested_concat(all_labels, labels, padding_index=-100)\n\t        # Number of samples\n\t        if has_length(eval_dataset):\n\t            num_samples = len(eval_dataset)\n\t        # The instance check is weird and does not actually check for the type, but whether the dataset has the right\n\t        # methods. Therefore we need to make sure it also has the attribute.\n\t        elif isinstance(eval_dataset, IterableDatasetShard) and getattr(eval_dataset, \"num_examples\", 0) > 0:\n", "            num_samples = eval_dataset.num_examples\n\t        else:\n\t            if has_length(dataloader):\n\t                num_samples = self.num_examples(dataloader)\n\t            else:  # both len(dataloader.dataset) and len(dataloader) fail\n\t                num_samples = observed_num_examples\n\t        if num_samples == 0 and observed_num_examples > 0:\n\t            num_samples = observed_num_examples\n\t        # Number of losses has been rounded to a multiple of batch_size and in a distributed training, the number of\n\t        # samplers has been rounded to a multiple of batch_size, so we truncate.\n", "        if all_losses is not None:\n\t            all_losses = all_losses[:num_samples]\n\t        if all_preds is not None:\n\t            all_preds = nested_truncate(all_preds, num_samples)\n\t        if all_labels is not None:\n\t            all_labels = nested_truncate(all_labels, num_samples)\n\t        if all_inputs is not None:\n\t            all_inputs = nested_truncate(all_inputs, num_samples)\n\t        # Metrics!\n\t        if self.compute_metrics is not None and all_preds is not None and all_labels is not None:\n", "            if args.include_inputs_for_metrics:\n\t                metrics = self.compute_metrics(\n\t                    EvalPrediction(predictions=all_preds, label_ids=all_labels, inputs=all_inputs)\n\t                )\n\t            else:\n\t                metrics = self.compute_metrics(EvalPrediction(predictions=all_preds, label_ids=all_labels))\n\t        else:\n\t            metrics = {}\n\t        # To be JSON-serializable, we need to remove numpy types or zero-d tensors\n\t        metrics = denumpify_detensorize(metrics)\n", "        if all_losses is not None:\n\t            metrics[f\"{metric_key_prefix}_loss\"] = all_losses.mean().item()\n\t        if hasattr(self, \"jit_compilation_time\"):\n\t            metrics[f\"{metric_key_prefix}_jit_compilation_time\"] = self.jit_compilation_time\n\t        # Prefix all keys with metric_key_prefix + '_'\n\t        for key in list(metrics.keys()):\n\t            if not key.startswith(f\"{metric_key_prefix}_\"):\n\t                metrics[f\"{metric_key_prefix}_{key}\"] = metrics.pop(key)\n\t        return EvalLoopOutput(predictions=all_preds, label_ids=all_labels, metrics=metrics, num_samples=num_samples)\n\t    def _nested_gather(self, tensors, name=None):\n", "        \"\"\"\n\t        Gather value of `tensors` (tensor or list/tuple of nested tensors) and convert them to numpy before\n\t        concatenating them to `gathered`\n\t        \"\"\"\n\t        if tensors is None:\n\t            return\n\t        if is_torch_tpu_available():\n\t            if name is None:\n\t                name = \"nested_gather\"\n\t            tensors = nested_xla_mesh_reduce(tensors, name)\n", "        elif is_sagemaker_mp_enabled():\n\t            tensors = smp_gather(tensors)\n\t        elif self.args.local_rank != -1:\n\t            tensors = distributed_concat(tensors)\n\t        return tensors\n\t    # Copied from Accelerate.\n\t    def _pad_across_processes(self, tensor, pad_index=-100):\n\t        \"\"\"\n\t        Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so\n\t        they can safely be gathered.\n", "        \"\"\"\n\t        if isinstance(tensor, (list, tuple)):\n\t            return type(tensor)(self._pad_across_processes(t, pad_index=pad_index) for t in tensor)\n\t        elif isinstance(tensor, dict):\n\t            return type(tensor)({k: self._pad_across_processes(v, pad_index=pad_index) for k, v in tensor.items()})\n\t        elif not isinstance(tensor, torch.Tensor):\n\t            raise TypeError(\n\t                f\"Can't pad the values of type {type(tensor)}, only of nested list/tuple/dicts of tensors.\"\n\t            )\n\t        if len(tensor.shape) < 2:\n", "            return tensor\n\t        # Gather all sizes\n\t        size = torch.tensor(tensor.shape, device=tensor.device)[None]\n\t        sizes = self._nested_gather(size).cpu()\n\t        max_size = max(s[1] for s in sizes)\n\t        # When extracting XLA graphs for compilation, max_size is 0,\n\t        # so use inequality to avoid errors.\n\t        if tensor.shape[1] >= max_size:\n\t            return tensor\n\t        # Then pad to the maximum size\n", "        old_size = tensor.shape\n\t        new_size = list(old_size)\n\t        new_size[1] = max_size\n\t        new_tensor = tensor.new_zeros(tuple(new_size)) + pad_index\n\t        new_tensor[:, : old_size[1]] = tensor\n\t        return new_tensor\n\t    def prediction_step(\n\t        self,\n\t        model: nn.Module,\n\t        inputs: Dict[str, Union[torch.Tensor, Any]],\n", "        prediction_loss_only: bool,\n\t        ignore_keys: Optional[List[str]] = None,\n\t    ) -> Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]:\n\t        \"\"\"\n\t        Perform an evaluation step on `model` using `inputs`.\n\t        Subclass and override to inject custom behavior.\n\t        Args:\n\t            model (`nn.Module`):\n\t                The model to evaluate.\n\t            inputs (`Dict[str, Union[torch.Tensor, Any]]`):\n", "                The inputs and targets of the model.\n\t                The dictionary will be unpacked before being fed to the model. Most models expect the targets under the\n\t                argument `labels`. Check your model's documentation for all accepted arguments.\n\t            prediction_loss_only (`bool`):\n\t                Whether or not to return the loss only.\n\t            ignore_keys (`Lst[str]`, *optional*):\n\t                A list of keys in the output of your model (if it is a dictionary) that should be ignored when\n\t                gathering predictions.\n\t        Return:\n\t            Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]: A tuple with the loss,\n", "            logits and labels (each being optional).\n\t        \"\"\"\n\t        has_labels = False if len(self.label_names) == 0 else all(inputs.get(k) is not None for k in self.label_names)\n\t        # For CLIP-like models capable of returning loss values.\n\t        # If `return_loss` is not specified or being `None` in `inputs`, we check if the default value of `return_loss`\n\t        # is `True` in `model.forward`.\n\t        return_loss = inputs.get(\"return_loss\", None)\n\t        if return_loss is None:\n\t            return_loss = self.can_return_loss\n\t        loss_without_labels = True if len(self.label_names) == 0 and return_loss else False\n", "        inputs = self._prepare_inputs(inputs)\n\t        if ignore_keys is None:\n\t            if hasattr(self.model, \"config\"):\n\t                ignore_keys = getattr(self.model.config, \"keys_to_ignore_at_inference\", [])\n\t            else:\n\t                ignore_keys = []\n\t        # labels may be popped when computing the loss (label smoothing for instance) so we grab them first.\n\t        if has_labels or loss_without_labels:\n\t            labels = nested_detach(tuple(inputs.get(name) for name in self.label_names))\n\t            if len(labels) == 1:\n", "                labels = labels[0]\n\t        else:\n\t            labels = None\n\t        with torch.no_grad():\n\t            if is_sagemaker_mp_enabled():\n\t                raw_outputs = smp_forward_only(model, inputs)\n\t                if has_labels or loss_without_labels:\n\t                    if isinstance(raw_outputs, dict):\n\t                        loss_mb = raw_outputs[\"loss\"]\n\t                        logits_mb = tuple(v for k, v in raw_outputs.items() if k not in ignore_keys + [\"loss\"])\n", "                    else:\n\t                        loss_mb = raw_outputs[0]\n\t                        logits_mb = raw_outputs[1:]\n\t                    loss = loss_mb.reduce_mean().detach().cpu()\n\t                    logits = smp_nested_concat(logits_mb)\n\t                else:\n\t                    loss = None\n\t                    if isinstance(raw_outputs, dict):\n\t                        logits_mb = tuple(v for k, v in raw_outputs.items() if k not in ignore_keys)\n\t                    else:\n", "                        logits_mb = raw_outputs\n\t                    logits = smp_nested_concat(logits_mb)\n\t            else:\n\t                if has_labels or loss_without_labels:\n\t                    with self.compute_loss_context_manager():\n\t                        loss, outputs = self.compute_loss(model, inputs, return_outputs=True)\n\t                    loss = loss.mean().detach()\n\t                    if isinstance(outputs, dict):\n\t                        logits = tuple(v for k, v in outputs.items() if k not in ignore_keys + [\"loss\"])\n\t                    else:\n", "                        logits = outputs[1:]\n\t                else:\n\t                    loss = None\n\t                    with self.compute_loss_context_manager():\n\t                        outputs = model(**inputs)\n\t                    if isinstance(outputs, dict):\n\t                        logits = tuple(v for k, v in outputs.items() if k not in ignore_keys)\n\t                    else:\n\t                        logits = outputs\n\t                    # TODO: this needs to be fixed and made cleaner later.\n", "                    if self.args.past_index >= 0:\n\t                        self._past = outputs[self.args.past_index - 1]\n\t        if prediction_loss_only:\n\t            return (loss, None, None)\n\t        logits = nested_detach(logits)\n\t        if len(logits) == 1:\n\t            logits = logits[0]\n\t        return (loss, logits, labels)\n\t    def floating_point_ops(self, inputs: Dict[str, Union[torch.Tensor, Any]]):\n\t        \"\"\"\n", "        For models that inherit from [`PreTrainedModel`], uses that method to compute the number of floating point\n\t        operations for every backward + forward pass. If using another model, either implement such a method in the\n\t        model or subclass and override this method.\n\t        Args:\n\t            inputs (`Dict[str, Union[torch.Tensor, Any]]`):\n\t                The inputs and targets of the model.\n\t        Returns:\n\t            `int`: The number of floating-point operations.\n\t        \"\"\"\n\t        if hasattr(self.model, \"floating_point_ops\"):\n", "            return self.model.floating_point_ops(inputs)\n\t        else:\n\t            return 0\n\t    def init_git_repo(self, at_init: bool = False):\n\t        \"\"\"\n\t        Initializes a git repo in `self.args.hub_model_id`.\n\t        Args:\n\t            at_init (`bool`, *optional*, defaults to `False`):\n\t                Whether this function is called before any training or not. If `self.args.overwrite_output_dir` is\n\t                `True` and `at_init` is `True`, the path to the repo (which is `self.args.output_dir`) might be wiped\n", "                out.\n\t        \"\"\"\n\t        if not self.is_world_process_zero():\n\t            return\n\t        if self.args.hub_model_id is None:\n\t            repo_name = Path(self.args.output_dir).absolute().name\n\t        else:\n\t            repo_name = self.args.hub_model_id\n\t        if \"/\" not in repo_name:\n\t            repo_name = get_full_repo_name(repo_name, token=self.args.hub_token)\n", "        # Make sure the repo exists.\n\t        create_repo(repo_name, token=self.args.hub_token, private=self.args.hub_private_repo, exist_ok=True)\n\t        try:\n\t            self.repo = Repository(self.args.output_dir, clone_from=repo_name, token=self.args.hub_token)\n\t        except EnvironmentError:\n\t            if self.args.overwrite_output_dir and at_init:\n\t                # Try again after wiping output_dir\n\t                shutil.rmtree(self.args.output_dir)\n\t                self.repo = Repository(self.args.output_dir, clone_from=repo_name, token=self.args.hub_token)\n\t            else:\n", "                raise\n\t        self.repo.git_pull()\n\t        # By default, ignore the checkpoint folders\n\t        if (\n\t            not os.path.exists(os.path.join(self.args.output_dir, \".gitignore\"))\n\t            and self.args.hub_strategy != HubStrategy.ALL_CHECKPOINTS\n\t        ):\n\t            with open(os.path.join(self.args.output_dir, \".gitignore\"), \"w\", encoding=\"utf-8\") as writer:\n\t                writer.writelines([\"checkpoint-*/\"])\n\t        # Add \"*.sagemaker\" to .gitignore if using SageMaker\n", "        if os.environ.get(\"SM_TRAINING_ENV\"):\n\t            self._add_sm_patterns_to_gitignore()\n\t        self.push_in_progress = None\n\t    def create_model_card(\n\t        self,\n\t        language: Optional[str] = None,\n\t        license: Optional[str] = None,\n\t        tags: Union[str, List[str], None] = None,\n\t        model_name: Optional[str] = None,\n\t        finetuned_from: Optional[str] = None,\n", "        tasks: Union[str, List[str], None] = None,\n\t        dataset_tags: Union[str, List[str], None] = None,\n\t        dataset: Union[str, List[str], None] = None,\n\t        dataset_args: Union[str, List[str], None] = None,\n\t    ):\n\t        \"\"\"\n\t        Creates a draft of a model card using the information available to the `Trainer`.\n\t        Args:\n\t            language (`str`, *optional*):\n\t                The language of the model (if applicable)\n", "            license (`str`, *optional*):\n\t                The license of the model. Will default to the license of the pretrained model used, if the original\n\t                model given to the `Trainer` comes from a repo on the Hub.\n\t            tags (`str` or `List[str]`, *optional*):\n\t                Some tags to be included in the metadata of the model card.\n\t            model_name (`str`, *optional*):\n\t                The name of the model.\n\t            finetuned_from (`str`, *optional*):\n\t                The name of the model used to fine-tune this one (if applicable). Will default to the name of the repo\n\t                of the original model given to the `Trainer` (if it comes from the Hub).\n", "            tasks (`str` or `List[str]`, *optional*):\n\t                One or several task identifiers, to be included in the metadata of the model card.\n\t            dataset_tags (`str` or `List[str]`, *optional*):\n\t                One or several dataset tags, to be included in the metadata of the model card.\n\t            dataset (`str` or `List[str]`, *optional*):\n\t                One or several dataset identifiers, to be included in the metadata of the model card.\n\t            dataset_args (`str` or `List[str]`, *optional*):\n\t               One or several dataset arguments, to be included in the metadata of the model card.\n\t        \"\"\"\n\t        if not self.is_world_process_zero():\n", "            return\n\t        training_summary = TrainingSummary.from_trainer(\n\t            self,\n\t            language=language,\n\t            license=license,\n\t            tags=tags,\n\t            model_name=model_name,\n\t            finetuned_from=finetuned_from,\n\t            tasks=tasks,\n\t            dataset_tags=dataset_tags,\n", "            dataset=dataset,\n\t            dataset_args=dataset_args,\n\t        )\n\t        model_card = training_summary.to_model_card()\n\t        with open(os.path.join(self.args.output_dir, \"README.md\"), \"w\") as f:\n\t            f.write(model_card)\n\t    def _push_from_checkpoint(self, checkpoint_folder):\n\t        # Only push from one node.\n\t        if not self.is_world_process_zero() or self.args.hub_strategy == HubStrategy.END:\n\t            return\n", "        # If we haven't finished the last push, we don't do this one.\n\t        if self.push_in_progress is not None and not self.push_in_progress.is_done:\n\t            return\n\t        output_dir = self.args.output_dir\n\t        # To avoid a new synchronization of all model weights, we just copy the file from the checkpoint folder\n\t        modeling_files = [CONFIG_NAME, WEIGHTS_NAME]\n\t        for modeling_file in modeling_files:\n\t            if os.path.isfile(os.path.join(checkpoint_folder, modeling_file)):\n\t                shutil.copy(os.path.join(checkpoint_folder, modeling_file), os.path.join(output_dir, modeling_file))\n\t        # Saving the tokenizer is fast and we don't know how many files it may have spawned, so we resave it to be sure.\n", "        if self.tokenizer is not None:\n\t            self.tokenizer.save_pretrained(output_dir)\n\t        # Same for the training arguments\n\t        torch.save(self.args, os.path.join(output_dir, TRAINING_ARGS_NAME))\n\t        try:\n\t            if self.args.hub_strategy == HubStrategy.CHECKPOINT:\n\t                # Temporarily move the checkpoint just saved for the push\n\t                tmp_checkpoint = os.path.join(output_dir, \"last-checkpoint\")\n\t                # We have to remove the \"last-checkpoint\" dir if it exists, otherwise the checkpoint is moved as a\n\t                # subfolder.\n", "                if os.path.isdir(tmp_checkpoint):\n\t                    shutil.rmtree(tmp_checkpoint)\n\t                shutil.move(checkpoint_folder, tmp_checkpoint)\n\t            if self.args.save_strategy == IntervalStrategy.STEPS:\n\t                commit_message = f\"Training in progress, step {self.state.global_step}\"\n\t            else:\n\t                commit_message = f\"Training in progress, epoch {int(self.state.epoch)}\"\n\t            _, self.push_in_progress = self.repo.push_to_hub(\n\t                commit_message=commit_message, blocking=False, auto_lfs_prune=True\n\t            )\n", "        finally:\n\t            if self.args.hub_strategy == HubStrategy.CHECKPOINT:\n\t                # Move back the checkpoint to its place\n\t                shutil.move(tmp_checkpoint, checkpoint_folder)\n\t    def push_to_hub(self, commit_message: Optional[str] = \"End of training\", blocking: bool = True, **kwargs) -> str:\n\t        \"\"\"\n\t        Upload *self.model* and *self.tokenizer* to the 🤗 model hub on the repo *self.args.hub_model_id*.\n\t        Parameters:\n\t            commit_message (`str`, *optional*, defaults to `\"End of training\"`):\n\t                Message to commit while pushing.\n", "            blocking (`bool`, *optional*, defaults to `True`):\n\t                Whether the function should return only when the `git push` has finished.\n\t            kwargs:\n\t                Additional keyword arguments passed along to [`~Trainer.create_model_card`].\n\t        Returns:\n\t            The url of the commit of your model in the given repository if `blocking=False`, a tuple with the url of\n\t            the commit and an object to track the progress of the commit if `blocking=True`\n\t        \"\"\"\n\t        # If a user calls manually `push_to_hub` with `self.args.push_to_hub = False`, we try to create the repo but\n\t        # it might fail.\n", "        if not hasattr(self, \"repo\"):\n\t            self.init_git_repo()\n\t        model_name = kwargs.pop(\"model_name\", None)\n\t        if model_name is None and self.args.should_save:\n\t            if self.args.hub_model_id is None:\n\t                model_name = Path(self.args.output_dir).name\n\t            else:\n\t                model_name = self.args.hub_model_id.split(\"/\")[-1]\n\t        # Needs to be executed on all processes for TPU training, but will only save on the processed determined by\n\t        # self.args.should_save.\n", "        self.save_model(_internal_call=True)\n\t        # Only push from one node.\n\t        if not self.is_world_process_zero():\n\t            return\n\t        # Cancel any async push in progress if blocking=True. The commits will all be pushed together.\n\t        if blocking and self.push_in_progress is not None and not self.push_in_progress.is_done:\n\t            self.push_in_progress._process.kill()\n\t            self.push_in_progress = None\n\t        git_head_commit_url = self.repo.push_to_hub(\n\t            commit_message=commit_message, blocking=blocking, auto_lfs_prune=True\n", "        )\n\t        # push separately the model card to be independant from the rest of the model\n\t        if self.args.should_save:\n\t            self.create_model_card(model_name=model_name, **kwargs)\n\t            try:\n\t                self.repo.push_to_hub(\n\t                    commit_message=\"update model card README.md\", blocking=blocking, auto_lfs_prune=True\n\t                )\n\t            except EnvironmentError as exc:\n\t                logger.error(f\"Error pushing update to the model card. Please read logs and retry.\\n${exc}\")\n", "        return git_head_commit_url\n\t    #\n\t    # Deprecated code\n\t    #\n\t    def prediction_loop(\n\t        self,\n\t        dataloader: DataLoader,\n\t        description: str,\n\t        prediction_loss_only: Optional[bool] = None,\n\t        ignore_keys: Optional[List[str]] = None,\n", "        metric_key_prefix: str = \"eval\",\n\t    ) -> EvalLoopOutput:\n\t        \"\"\"\n\t        Prediction/evaluation loop, shared by `Trainer.evaluate()` and `Trainer.predict()`.\n\t        Works both with or without labels.\n\t        \"\"\"\n\t        args = self.args\n\t        if not has_length(dataloader):\n\t            raise ValueError(\"dataloader must implement a working __len__\")\n\t        prediction_loss_only = prediction_loss_only if prediction_loss_only is not None else args.prediction_loss_only\n", "        # if eval is called w/o train init deepspeed here\n\t        if args.deepspeed and not self.deepspeed:\n\t            # XXX: eval doesn't have `resume_from_checkpoint` arg but we should be able to do eval\n\t            # from the checkpoint eventually\n\t            deepspeed_engine, _, _ = deepspeed_init(self, num_training_steps=0, resume_from_checkpoint=None)\n\t            self.model = deepspeed_engine.module\n\t            self.model_wrapped = deepspeed_engine\n\t            self.deepspeed = deepspeed_engine\n\t            # XXX: we don't need optim/sched for inference, but this needs to be sorted out, since\n\t            # for example the Z3-optimizer is a must for zero3 to work even for inference - what we\n", "            # don't need is the deepspeed basic optimizer which is self.optimizer.optimizer\n\t            deepspeed_engine.optimizer.optimizer = None\n\t            deepspeed_engine.lr_scheduler = None\n\t        model = self._wrap_model(self.model, training=False, dataloader=dataloader)\n\t        # if full fp16 or bf16 eval is wanted and this ``evaluation`` or ``predict`` isn't called\n\t        # while ``train`` is running, cast it to the right dtype first and then put on device\n\t        if not self.is_in_train:\n\t            if args.fp16_full_eval:\n\t                model = model.to(dtype=torch.float16, device=args.device)\n\t            elif args.bf16_full_eval:\n", "                model = model.to(dtype=torch.bfloat16, device=args.device)\n\t        batch_size = dataloader.batch_size\n\t        num_examples = self.num_examples(dataloader)\n\t        logger.info(f\"***** Running {description} *****\")\n\t        logger.info(f\"  Num examples = {num_examples}\")\n\t        logger.info(f\"  Batch size = {batch_size}\")\n\t        losses_host: torch.Tensor = None\n\t        preds_host: Union[torch.Tensor, List[torch.Tensor]] = None\n\t        labels_host: Union[torch.Tensor, List[torch.Tensor]] = None\n\t        inputs_host: Union[torch.Tensor, List[torch.Tensor]] = None\n", "        world_size = max(1, args.world_size)\n\t        eval_losses_gatherer = DistributedTensorGatherer(world_size, num_examples, make_multiple_of=batch_size)\n\t        if not prediction_loss_only:\n\t            # The actual number of eval_sample can be greater than num_examples in distributed settings (when we pass\n\t            # a batch size to the sampler)\n\t            make_multiple_of = None\n\t            if hasattr(dataloader, \"sampler\") and isinstance(dataloader.sampler, SequentialDistributedSampler):\n\t                make_multiple_of = dataloader.sampler.batch_size\n\t            preds_gatherer = DistributedTensorGatherer(world_size, num_examples, make_multiple_of=make_multiple_of)\n\t            labels_gatherer = DistributedTensorGatherer(world_size, num_examples, make_multiple_of=make_multiple_of)\n", "            inputs_gatherer = DistributedTensorGatherer(world_size, num_examples, make_multiple_of=make_multiple_of)\n\t        model.eval()\n\t        if is_torch_tpu_available():\n\t            dataloader = pl.ParallelLoader(dataloader, [args.device]).per_device_loader(args.device)\n\t        if args.past_index >= 0:\n\t            self._past = None\n\t        self.callback_handler.eval_dataloader = dataloader\n\t        for step, inputs in enumerate(dataloader):\n\t            loss, logits, labels = self.prediction_step(model, inputs, prediction_loss_only, ignore_keys=ignore_keys)\n\t            inputs_decode = self._prepare_input(inputs[\"input_ids\"]) if args.include_inputs_for_metrics else None\n", "            if loss is not None:\n\t                losses = loss.repeat(batch_size)\n\t                losses_host = losses if losses_host is None else torch.cat((losses_host, losses), dim=0)\n\t            if logits is not None:\n\t                preds_host = logits if preds_host is None else nested_concat(preds_host, logits, padding_index=-100)\n\t            if labels is not None:\n\t                labels_host = labels if labels_host is None else nested_concat(labels_host, labels, padding_index=-100)\n\t            if inputs_decode is not None:\n\t                inputs_host = (\n\t                    inputs_decode\n", "                    if inputs_host is None\n\t                    else nested_concat(inputs_host, inputs_decode, padding_index=-100)\n\t                )\n\t            self.control = self.callback_handler.on_prediction_step(args, self.state, self.control)\n\t            # Gather all tensors and put them back on the CPU if we have done enough accumulation steps.\n\t            if args.eval_accumulation_steps is not None and (step + 1) % args.eval_accumulation_steps == 0:\n\t                eval_losses_gatherer.add_arrays(self._gather_and_numpify(losses_host, \"eval_losses\"))\n\t                if not prediction_loss_only:\n\t                    preds_gatherer.add_arrays(self._gather_and_numpify(preds_host, \"eval_preds\"))\n\t                    labels_gatherer.add_arrays(self._gather_and_numpify(labels_host, \"eval_label_ids\"))\n", "                    inputs_gatherer.add_arrays(self._gather_and_numpify(inputs_host, \"eval_inputs_ids\"))\n\t                # Set back to None to begin a new accumulation\n\t                losses_host, preds_host, labels_host, inputs_host = None, None, None, None\n\t        if args.past_index and hasattr(self, \"_past\"):\n\t            # Clean the state at the end of the evaluation loop\n\t            delattr(self, \"_past\")\n\t        # Gather all remaining tensors and put them back on the CPU\n\t        eval_losses_gatherer.add_arrays(self._gather_and_numpify(losses_host, \"eval_losses\"))\n\t        if not prediction_loss_only:\n\t            preds_gatherer.add_arrays(self._gather_and_numpify(preds_host, \"eval_preds\"))\n", "            labels_gatherer.add_arrays(self._gather_and_numpify(labels_host, \"eval_label_ids\"))\n\t            inputs_gatherer.add_arrays(self._gather_and_numpify(inputs_host, \"eval_inputs_ids\"))\n\t        eval_loss = eval_losses_gatherer.finalize()\n\t        preds = preds_gatherer.finalize() if not prediction_loss_only else None\n\t        label_ids = labels_gatherer.finalize() if not prediction_loss_only else None\n\t        inputs_ids = inputs_gatherer.finalize() if not prediction_loss_only else None\n\t        if self.compute_metrics is not None and preds is not None and label_ids is not None:\n\t            if args.include_inputs_for_metrics:\n\t                metrics = self.compute_metrics(\n\t                    EvalPrediction(predictions=preds, label_ids=label_ids, inputs=inputs_ids)\n", "                )\n\t            else:\n\t                metrics = self.compute_metrics(EvalPrediction(predictions=preds, label_ids=label_ids))\n\t        else:\n\t            metrics = {}\n\t        # To be JSON-serializable, we need to remove numpy types or zero-d tensors\n\t        metrics = denumpify_detensorize(metrics)\n\t        if eval_loss is not None:\n\t            metrics[f\"{metric_key_prefix}_loss\"] = eval_loss.mean().item()\n\t        # Prefix all keys with metric_key_prefix + '_'\n", "        for key in list(metrics.keys()):\n\t            if not key.startswith(f\"{metric_key_prefix}_\"):\n\t                metrics[f\"{metric_key_prefix}_{key}\"] = metrics.pop(key)\n\t        return EvalLoopOutput(predictions=preds, label_ids=label_ids, metrics=metrics, num_samples=num_examples)\n\t    def _gather_and_numpify(self, tensors, name):\n\t        \"\"\"\n\t        Gather value of `tensors` (tensor or list/tuple of nested tensors) and convert them to numpy before\n\t        concatenating them to `gathered`\n\t        \"\"\"\n\t        if tensors is None:\n", "            return\n\t        if is_torch_tpu_available():\n\t            tensors = nested_xla_mesh_reduce(tensors, name)\n\t        elif is_sagemaker_mp_enabled():\n\t            tensors = smp_gather(tensors)\n\t        elif self.args.local_rank != -1:\n\t            tensors = distributed_concat(tensors)\n\t        return nested_numpify(tensors)\n\t    def _add_sm_patterns_to_gitignore(self) -> None:\n\t        \"\"\"Add SageMaker Checkpointing patterns to .gitignore file.\"\"\"\n", "        # Make sure we only do this on the main process\n\t        if not self.is_world_process_zero():\n\t            return\n\t        patterns = [\"*.sagemaker-uploading\", \"*.sagemaker-uploaded\"]\n\t        # Get current .gitignore content\n\t        if os.path.exists(os.path.join(self.repo.local_dir, \".gitignore\")):\n\t            with open(os.path.join(self.repo.local_dir, \".gitignore\"), \"r\") as f:\n\t                current_content = f.read()\n\t        else:\n\t            current_content = \"\"\n", "        # Add the patterns to .gitignore\n\t        content = current_content\n\t        for pattern in patterns:\n\t            if pattern not in content:\n\t                if content.endswith(\"\\n\"):\n\t                    content += pattern\n\t                else:\n\t                    content += f\"\\n{pattern}\"\n\t        # Write the .gitignore file if it has changed\n\t        if content != current_content:\n", "            with open(os.path.join(self.repo.local_dir, \".gitignore\"), \"w\") as f:\n\t                logger.debug(f\"Writing .gitignore file. Content: {content}\")\n\t                f.write(content)\n\t        self.repo.git_add(\".gitignore\")\n\t        # avoid race condition with git status\n\t        time.sleep(0.5)\n\t        if not self.repo.is_repo_clean():\n\t            self.repo.git_commit(\"Add *.sagemaker patterns to .gitignore.\")\n\t            self.repo.git_push()\n"]}
{"filename": "ft_chatglm_lora/peft/peft_model.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport inspect\n\timport os\n\timport warnings\n\tfrom contextlib import contextmanager\n\timport torch\n\tfrom accelerate import dispatch_model, infer_auto_device_map\n", "from accelerate.hooks import AlignDevicesHook, add_hook_to_module, remove_hook_from_submodules\n\tfrom accelerate.utils import get_balanced_memory\n\tfrom huggingface_hub import hf_hub_download\n\tfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\tfrom transformers import PreTrainedModel\n\tfrom transformers.modeling_outputs import SequenceClassifierOutput, TokenClassifierOutput\n\tfrom transformers.utils import PushToHubMixin\n\tfrom .tuners import (\n\t    AdaLoraModel,\n\t    AdaptionPromptModel,\n", "    LoraModel,\n\t    PrefixEncoder,\n\t    PromptEmbedding,\n\t    PromptEncoder,\n\t)\n\tfrom .utils import (\n\t    TRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING,\n\t    WEIGHTS_NAME,\n\t    PeftConfig,\n\t    PeftType,\n", "    PromptLearningConfig,\n\t    TaskType,\n\t    _set_adapter,\n\t    _set_trainable,\n\t    get_peft_model_state_dict,\n\t    set_peft_model_state_dict,\n\t    shift_tokens_right,\n\t)\n\tPEFT_TYPE_TO_MODEL_MAPPING = {\n\t    PeftType.LORA: LoraModel,\n", "    PeftType.PROMPT_TUNING: PromptEmbedding,\n\t    PeftType.P_TUNING: PromptEncoder,\n\t    PeftType.PREFIX_TUNING: PrefixEncoder,\n\t    PeftType.ADALORA: AdaLoraModel,\n\t    PeftType.ADAPTION_PROMPT: AdaptionPromptModel,\n\t}\n\tclass PeftModel(PushToHubMixin, torch.nn.Module):\n\t    \"\"\"\n\t    Base model encompassing various Peft methods.\n\t    Args:\n", "        model ([`~transformers.PreTrainedModel`]): The base transformer model used for Peft.\n\t        peft_config ([`PeftConfig`]): The configuration of the Peft model.\n\t    **Attributes**:\n\t        - **base_model** ([`~transformers.PreTrainedModel`]) -- The base transformer model used for Peft.\n\t        - **peft_config** ([`PeftConfig`]) -- The configuration of the Peft model.\n\t        - **modules_to_save** (`list` of `str`) -- The list of sub-module names to save when\n\t        saving the model.\n\t        - **prompt_encoder** ([`PromptEncoder`]) -- The prompt encoder used for Peft if\n\t        using [`PromptLearningConfig`].\n\t        - **prompt_tokens** (`torch.Tensor`) -- The virtual prompt tokens used for Peft if\n", "        using [`PromptLearningConfig`].\n\t        - **transformer_backbone_name** (`str`) -- The name of the transformer\n\t        backbone in the base model if using [`PromptLearningConfig`].\n\t        - **word_embeddings** (`torch.nn.Embedding`) -- The word embeddings of the transformer backbone\n\t        in the base model if using [`PromptLearningConfig`].\n\t    \"\"\"\n\t    def __init__(self, model, peft_config: PeftConfig, adapter_name=\"default\"):\n\t        super().__init__()\n\t        self.base_model = model\n\t        self.config = self.base_model.config\n", "        self.modules_to_save = None\n\t        self.peft_config = {}\n\t        self.active_adapter = adapter_name\n\t        self.peft_type = peft_config.peft_type\n\t        self.base_model_torch_dtype = getattr(model, \"dtype\", None)\n\t        if not isinstance(peft_config, PromptLearningConfig):\n\t            self.peft_config[adapter_name] = peft_config\n\t            self.base_model = PEFT_TYPE_TO_MODEL_MAPPING[peft_config.peft_type](\n\t                self.base_model, self.peft_config, adapter_name\n\t            )\n", "            self.set_additional_trainable_modules(peft_config, adapter_name)\n\t        else:\n\t            self.add_adapter(adapter_name, peft_config)\n\t    def save_pretrained(self, save_directory, **kwargs):\n\t        r\"\"\"\n\t        This function saves the adapter model and the adapter configuration files to a directory, so that it can be\n\t        reloaded using the [`LoraModel.from_pretrained`] class method, and also used by the [`LoraModel.push_to_hub`]\n\t        method.\n\t        Args:\n\t            save_directory (`str`):\n", "                Directory where the adapter model and configuration files will be saved (will be created if it does not\n\t                exist).\n\t            kwargs (additional keyword arguments, *optional*):\n\t                Additional keyword arguments passed along to the `push_to_hub` method.\n\t        \"\"\"\n\t        if os.path.isfile(save_directory):\n\t            raise ValueError(f\"Provided path ({save_directory}) should be a directory, not a file\")\n\t        os.makedirs(save_directory, exist_ok=True)\n\t        for adapter_name, peft_config in self.peft_config.items():\n\t            # save only the trainable weights\n", "            output_state_dict = get_peft_model_state_dict(\n\t                self, state_dict=kwargs.get(\"state_dict\", None), adapter_name=adapter_name\n\t            )\n\t            output_dir = os.path.join(save_directory, adapter_name) if adapter_name != \"default\" else save_directory\n\t            os.makedirs(output_dir, exist_ok=True)\n\t            torch.save(output_state_dict, os.path.join(output_dir, WEIGHTS_NAME))\n\t            # save the config and change the inference mode to `True`\n\t            if peft_config.base_model_name_or_path is None:\n\t                peft_config.base_model_name_or_path = (\n\t                    self.base_model.__dict__.get(\"name_or_path\", None)\n", "                    if isinstance(peft_config, PromptLearningConfig)\n\t                    else self.base_model.model.__dict__.get(\"name_or_path\", None)\n\t                )\n\t            inference_mode = peft_config.inference_mode\n\t            peft_config.inference_mode = True\n\t            peft_config.save_pretrained(output_dir)\n\t            peft_config.inference_mode = inference_mode\n\t    @classmethod\n\t    def from_pretrained(cls, model, model_id, adapter_name=\"default\", is_trainable=False, **kwargs):\n\t        r\"\"\"\n", "        Instantiate a [`LoraModel`] from a pretrained Lora configuration and weights.\n\t        Args:\n\t            model ([`~transformers.PreTrainedModel`]):\n\t                The model to be adapted. The model should be initialized with the\n\t                [`~transformers.PreTrainedModel.from_pretrained`] method from the 🤗 Transformers library.\n\t            model_id (`str` or `os.PathLike`):\n\t                The name of the Lora configuration to use. Can be either:\n\t                    - A string, the `model id` of a Lora configuration hosted inside a model repo on the Hugging Face\n\t                      Hub.\n\t                    - A path to a directory containing a Lora configuration file saved using the `save_pretrained`\n", "                      method (`./my_lora_config_directory/`).\n\t        \"\"\"\n\t        from .mapping import MODEL_TYPE_TO_PEFT_MODEL_MAPPING, PEFT_TYPE_TO_CONFIG_MAPPING\n\t        # load the config\n\t        config = PEFT_TYPE_TO_CONFIG_MAPPING[\n\t            PeftConfig.from_pretrained(model_id, subfolder=kwargs.get(\"subfolder\", None)).peft_type\n\t        ].from_pretrained(model_id, subfolder=kwargs.get(\"subfolder\", None))\n\t        if (getattr(model, \"hf_device_map\", None) is not None) and len(\n\t            set(model.hf_device_map.values()).intersection({\"cpu\", \"disk\"})\n\t        ) > 0:\n", "            remove_hook_from_submodules(model)\n\t        if isinstance(config, PromptLearningConfig) and is_trainable:\n\t            raise ValueError(\"Cannot set a prompt learning adapter to trainable when loading pretrained adapter.\")\n\t        else:\n\t            config.inference_mode = not is_trainable\n\t        if config.task_type not in MODEL_TYPE_TO_PEFT_MODEL_MAPPING.keys():\n\t            model = cls(model, config, adapter_name)\n\t        else:\n\t            model = MODEL_TYPE_TO_PEFT_MODEL_MAPPING[config.task_type](model, config, adapter_name)\n\t        model.load_adapter(model_id, adapter_name, **kwargs)\n", "        return model\n\t    def _setup_prompt_encoder(self, adapter_name):\n\t        config = self.peft_config[adapter_name]\n\t        self.prompt_encoder = torch.nn.ModuleDict({})\n\t        self.prompt_tokens = {}\n\t        transformer_backbone = None\n\t        for name, module in self.base_model.named_children():\n\t            for param in module.parameters():\n\t                param.requires_grad = False\n\t            if isinstance(module, PreTrainedModel):\n", "                # Make sure to freeze Tranformers model\n\t                if transformer_backbone is None:\n\t                    transformer_backbone = module\n\t                    self.transformer_backbone_name = name\n\t        if config.num_transformer_submodules is None:\n\t            config.num_transformer_submodules = 2 if config.task_type == TaskType.SEQ_2_SEQ_LM else 1\n\t        for named_param, value in list(transformer_backbone.named_parameters()):\n\t            if value.shape[0] == self.base_model.config.vocab_size:\n\t                self.word_embeddings = transformer_backbone.get_submodule(named_param.replace(\".weight\", \"\"))\n\t                break\n", "        if config.peft_type == PeftType.PROMPT_TUNING:\n\t            prompt_encoder = PromptEmbedding(config, self.word_embeddings)\n\t        elif config.peft_type == PeftType.P_TUNING:\n\t            prompt_encoder = PromptEncoder(config)\n\t        elif config.peft_type == PeftType.PREFIX_TUNING:\n\t            prompt_encoder = PrefixEncoder(config)\n\t        else:\n\t            raise ValueError(\"Not supported\")\n\t        self.prompt_encoder.update(torch.nn.ModuleDict({adapter_name: prompt_encoder}))\n\t        self.prompt_tokens[adapter_name] = torch.arange(\n", "            config.num_virtual_tokens * config.num_transformer_submodules\n\t        ).long()\n\t    def get_prompt_embedding_to_save(self, adapter_name):\n\t        \"\"\"\n\t        Returns the prompt embedding to save when saving the model. Only applicable when `peft_config.peft_type !=\n\t        PeftType.LORA`.\n\t        \"\"\"\n\t        prompt_tokens = self.prompt_tokens[adapter_name].unsqueeze(0).expand(1, -1).to(self.device)\n\t        if self.peft_config[adapter_name].peft_type == PeftType.PREFIX_TUNING:\n\t            prompt_tokens = prompt_tokens[:, : self.peft_config[adapter_name].num_virtual_tokens]\n", "        prompt_embeddings = self.prompt_encoder[adapter_name](prompt_tokens)\n\t        return prompt_embeddings[0].detach().cpu()\n\t    def get_prompt(self, batch_size):\n\t        \"\"\"\n\t        Returns the virtual prompts to use for Peft. Only applicable when `peft_config.peft_type != PeftType.LORA`.\n\t        \"\"\"\n\t        peft_config = self.active_peft_config\n\t        prompt_encoder = self.prompt_encoder[self.active_adapter]\n\t        prompt_tokens = self.prompt_tokens[self.active_adapter].unsqueeze(0).expand(batch_size, -1).to(self.device)\n\t        if peft_config.peft_type == PeftType.PREFIX_TUNING:\n", "            prompt_tokens = prompt_tokens[:, : peft_config.num_virtual_tokens]\n\t            if peft_config.inference_mode:\n\t                past_key_values = prompt_encoder.embedding.weight.repeat(batch_size, 1, 1)\n\t            else:\n\t                past_key_values = prompt_encoder(prompt_tokens)\n\t            past_key_values = past_key_values.view(\n\t                batch_size,\n\t                peft_config.num_virtual_tokens,\n\t                peft_config.num_layers * 2,\n\t                peft_config.num_attention_heads,\n", "                peft_config.token_dim // peft_config.num_attention_heads,\n\t            )\n\t            if peft_config.num_transformer_submodules == 2:\n\t                past_key_values = torch.cat([past_key_values, past_key_values], dim=2)\n\t            past_key_values = past_key_values.permute([2, 0, 3, 1, 4]).split(\n\t                peft_config.num_transformer_submodules * 2\n\t            )\n\t            if TRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING.get(self.config.model_type, None) is not None:\n\t                post_process_fn = TRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING[self.config.model_type]\n\t                past_key_values = post_process_fn(past_key_values)\n", "            return past_key_values\n\t        else:\n\t            if peft_config.inference_mode:\n\t                prompts = prompt_encoder.embedding.weight.repeat(batch_size, 1, 1)\n\t            else:\n\t                prompts = prompt_encoder(prompt_tokens)\n\t            return prompts\n\t    def print_trainable_parameters(self):\n\t        \"\"\"\n\t        Prints the number of trainable parameters in the model.\n", "        \"\"\"\n\t        trainable_params = 0\n\t        all_param = 0\n\t        for _, param in self.named_parameters():\n\t            num_params = param.numel()\n\t            # if using DS Zero 3 and the weights are initialized empty\n\t            if num_params == 0 and hasattr(param, \"ds_numel\"):\n\t                num_params = param.ds_numel\n\t            all_param += num_params\n\t            if param.requires_grad:\n", "                trainable_params += num_params\n\t        print(\n\t            f\"trainable params: {trainable_params} || all params: {all_param} || trainable%: {100 * trainable_params / all_param}\"\n\t        )\n\t    def __getattr__(self, name: str):\n\t        \"\"\"Forward missing attributes to the wrapped module.\"\"\"\n\t        try:\n\t            return super().__getattr__(name)  # defer to nn.Module's logic\n\t        except AttributeError:\n\t            return getattr(self.base_model, name)\n", "    def forward(self, *args, **kwargs):\n\t        \"\"\"\n\t        Forward pass of the model.\n\t        \"\"\"\n\t        return self.get_base_model()(*args, **kwargs)\n\t    @contextmanager\n\t    def disable_adapter(self):\n\t        \"\"\"\n\t        Disables the adapter module.\n\t        \"\"\"\n", "        try:\n\t            if isinstance(self.peft_config, PromptLearningConfig):\n\t                old_forward = self.forward\n\t                self.forward = self.base_model.forward\n\t            else:\n\t                self.base_model.disable_adapter_layers()\n\t            yield\n\t        finally:\n\t            if isinstance(self.peft_config, PromptLearningConfig):\n\t                self.forward = old_forward\n", "            else:\n\t                self.base_model.enable_adapter_layers()\n\t    def get_base_model(self):\n\t        \"\"\"\n\t        Returns the base model.\n\t        \"\"\"\n\t        return self.base_model if isinstance(self.active_peft_config, PromptLearningConfig) else self.base_model.model\n\t    def add_adapter(self, adapter_name, peft_config):\n\t        if peft_config.peft_type != self.peft_type:\n\t            raise ValueError(\n", "                f\"Cannot combine adapters with different peft types. \"\n\t                f\"Found {self.peft_type} and {peft_config.peft_type}.\"\n\t            )\n\t        self.peft_config[adapter_name] = peft_config\n\t        if isinstance(peft_config, PromptLearningConfig):\n\t            self._setup_prompt_encoder(adapter_name)\n\t        else:\n\t            self.base_model.add_adapter(adapter_name, peft_config)\n\t        self.set_additional_trainable_modules(peft_config, adapter_name)\n\t    def set_additional_trainable_modules(self, peft_config, adapter_name):\n", "        if getattr(peft_config, \"modules_to_save\", None) is not None:\n\t            if self.modules_to_save is None:\n\t                self.modules_to_save = set(peft_config.modules_to_save)\n\t            else:\n\t                self.modules_to_save.update(peft_config.modules_to_save)\n\t            _set_trainable(self, adapter_name)\n\t    def load_adapter(self, model_id, adapter_name, is_trainable=False, **kwargs):\n\t        from .mapping import PEFT_TYPE_TO_CONFIG_MAPPING\n\t        if adapter_name not in self.peft_config:\n\t            # load the config\n", "            peft_config = PEFT_TYPE_TO_CONFIG_MAPPING[\n\t                PeftConfig.from_pretrained(model_id, subfolder=kwargs.get(\"subfolder\", None)).peft_type\n\t            ].from_pretrained(model_id, subfolder=kwargs.get(\"subfolder\", None))\n\t            if isinstance(peft_config, PromptLearningConfig) and is_trainable:\n\t                raise ValueError(\"Cannot set a prompt learning adapter to trainable when loading pretrained adapter.\")\n\t            else:\n\t                peft_config.inference_mode = not is_trainable\n\t            self.add_adapter(adapter_name, peft_config)\n\t        # load weights if any\n\t        path = os.path.join(model_id, kwargs[\"subfolder\"]) if kwargs.get(\"subfolder\", None) is not None else model_id\n", "        if os.path.exists(os.path.join(path, WEIGHTS_NAME)):\n\t            filename = os.path.join(path, WEIGHTS_NAME)\n\t        else:\n\t            try:\n\t                filename = hf_hub_download(model_id, WEIGHTS_NAME, subfolder=kwargs.get(\"subfolder\", None))\n\t            except:  # noqa\n\t                raise ValueError(\n\t                    f\"Can't find weights for {model_id} in {model_id} or in the Hugging Face Hub. \"\n\t                    f\"Please check that the file {WEIGHTS_NAME} is present at {model_id}.\"\n\t                )\n", "        adapters_weights = torch.load(\n\t            filename, map_location=torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\t        )\n\t        # load the weights into the model\n\t        set_peft_model_state_dict(self, adapters_weights, adapter_name=adapter_name)\n\t        if (\n\t            (getattr(self, \"hf_device_map\", None) is not None)\n\t            and (len(set(self.hf_device_map.values()).intersection({\"cpu\", \"disk\"})) > 0)\n\t            and len(self.peft_config) == 1\n\t        ):\n", "            device_map = kwargs.get(\"device_map\", \"auto\")\n\t            max_memory = kwargs.get(\"max_memory\", None)\n\t            offload_dir = kwargs.get(\"offload_folder\", None)\n\t            offload_index = kwargs.get(\"offload_index\", None)\n\t            dispatch_model_kwargs = {}\n\t            # Safety checker for previous `accelerate` versions\n\t            # `offload_index` was introduced in https://github.com/huggingface/accelerate/pull/873/\n\t            if \"offload_index\" in inspect.signature(dispatch_model).parameters:\n\t                dispatch_model_kwargs[\"offload_index\"] = offload_index\n\t            no_split_module_classes = self._no_split_modules\n", "            if device_map != \"sequential\":\n\t                max_memory = get_balanced_memory(\n\t                    self,\n\t                    max_memory=max_memory,\n\t                    no_split_module_classes=no_split_module_classes,\n\t                    low_zero=(device_map == \"balanced_low_0\"),\n\t                )\n\t            if isinstance(device_map, str):\n\t                device_map = infer_auto_device_map(\n\t                    self, max_memory=max_memory, no_split_module_classes=no_split_module_classes\n", "                )\n\t            dispatch_model(\n\t                self,\n\t                device_map=device_map,\n\t                offload_dir=offload_dir,\n\t                **dispatch_model_kwargs,\n\t            )\n\t            hook = AlignDevicesHook(io_same_device=True)\n\t            if isinstance(self.peft_config[adapter_name], PromptLearningConfig):\n\t                remove_hook_from_submodules(self.prompt_encoder)\n", "            add_hook_to_module(self.get_base_model(), hook)\n\t        # Set model in evaluation mode to deactivate Dropout modules by default\n\t        self.eval()\n\t    def set_adapter(self, adapter_name):\n\t        \"\"\"\n\t        Sets the active adapter.\n\t        \"\"\"\n\t        if adapter_name not in self.peft_config:\n\t            raise ValueError(f\"Adapter {adapter_name} not found.\")\n\t        self.active_adapter = adapter_name\n", "        if not isinstance(self.peft_config[adapter_name], PromptLearningConfig):\n\t            self.base_model.set_adapter(adapter_name)\n\t        _set_adapter(self, adapter_name)\n\t    @property\n\t    def active_peft_config(self):\n\t        return self.peft_config[self.active_adapter]\n\tclass PeftModelForSequenceClassification(PeftModel):\n\t    \"\"\"\n\t    Peft model for sequence classification tasks.\n\t    Args:\n", "        model ([`~transformers.PreTrainedModel`]): Base transformer model.\n\t        peft_config ([`PeftConfig`]): Peft config.\n\t    **Attributes**:\n\t        - **config** ([`~transformers.PretrainedConfig`]) -- The configuration object of the base model.\n\t        - **cls_layer_name** (`str`) -- The name of the classification layer.\n\t    Example:\n\t        ```py\n\t        >>> from transformers import AutoModelForSequenceClassification\n\t        >>> from peft import PeftModelForSequenceClassification, get_peft_config\n\t        >>> config = {\n", "        ...     \"peft_type\": \"PREFIX_TUNING\",\n\t        ...     \"task_type\": \"SEQ_CLS\",\n\t        ...     \"inference_mode\": False,\n\t        ...     \"num_virtual_tokens\": 20,\n\t        ...     \"token_dim\": 768,\n\t        ...     \"num_transformer_submodules\": 1,\n\t        ...     \"num_attention_heads\": 12,\n\t        ...     \"num_layers\": 12,\n\t        ...     \"encoder_hidden_size\": 768,\n\t        ...     \"prefix_projection\": False,\n", "        ...     \"postprocess_past_key_value_function\": None,\n\t        ... }\n\t        >>> peft_config = get_peft_config(config)\n\t        >>> model = AutoModelForSequenceClassification.from_pretrained(\"bert-base-cased\")\n\t        >>> peft_model = PeftModelForSequenceClassification(model, peft_config)\n\t        >>> peft_model.print_trainable_parameters()\n\t        trainable params: 370178 || all params: 108680450 || trainable%: 0.3406113979101117\n\t        ```\n\t    \"\"\"\n\t    def __init__(self, model, peft_config: PeftConfig, adapter_name=\"default\"):\n", "        super().__init__(model, peft_config, adapter_name)\n\t        if self.modules_to_save is None:\n\t            self.modules_to_save = {\"classifier\", \"score\"}\n\t        else:\n\t            self.modules_to_save.update({\"classifier\", \"score\"})\n\t        for name, _ in self.base_model.named_children():\n\t            if any(module_name in name for module_name in self.modules_to_save):\n\t                self.cls_layer_name = name\n\t                break\n\t        # to make sure classifier layer is trainable\n", "        _set_trainable(self, adapter_name)\n\t    def forward(\n\t        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n\t        inputs_embeds=None,\n\t        labels=None,\n\t        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n", "        **kwargs,\n\t    ):\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        peft_config = self.active_peft_config\n\t        if not isinstance(peft_config, PromptLearningConfig):\n\t            return self.base_model(\n\t                input_ids=input_ids,\n\t                attention_mask=attention_mask,\n\t                inputs_embeds=inputs_embeds,\n\t                labels=labels,\n", "                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n\t                **kwargs,\n\t            )\n\t        batch_size = input_ids.shape[0]\n\t        if attention_mask is not None:\n\t            # concat prompt attention mask\n\t            prefix_attention_mask = torch.ones(batch_size, peft_config.num_virtual_tokens).to(self.device)\n\t            attention_mask = torch.cat((prefix_attention_mask, attention_mask), dim=1)\n", "        if kwargs.get(\"position_ids\", None) is not None:\n\t            warnings.warn(\"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\")\n\t            kwargs[\"position_ids\"] = None\n\t        kwargs.update(\n\t            {\n\t                \"attention_mask\": attention_mask,\n\t                \"labels\": labels,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n\t                \"return_dict\": return_dict,\n", "            }\n\t        )\n\t        if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t            return self._prefix_tuning_forward(input_ids=input_ids, **kwargs)\n\t        else:\n\t            if kwargs.get(\"token_type_ids\", None) is not None:\n\t                kwargs[\"token_type_ids\"] = torch.cat(\n\t                    (\n\t                        torch.zeros(batch_size, peft_config.num_virtual_tokens).to(self.device),\n\t                        kwargs[\"token_type_ids\"],\n", "                    ),\n\t                    dim=1,\n\t                ).long()\n\t            if inputs_embeds is None:\n\t                inputs_embeds = self.word_embeddings(input_ids)\n\t            prompts = self.get_prompt(batch_size=batch_size)\n\t            prompts = prompts.to(inputs_embeds.dtype)\n\t            inputs_embeds = torch.cat((prompts, inputs_embeds), dim=1)\n\t            return self.base_model(inputs_embeds=inputs_embeds, **kwargs)\n\t    def _prefix_tuning_forward(\n", "        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n\t        inputs_embeds=None,\n\t        labels=None,\n\t        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n\t        **kwargs,\n\t    ):\n", "        batch_size = input_ids.shape[0]\n\t        past_key_values = self.get_prompt(batch_size)\n\t        fwd_params = list(inspect.signature(self.base_model.forward).parameters.keys())\n\t        kwargs.update(\n\t            {\n\t                \"input_ids\": input_ids,\n\t                \"attention_mask\": attention_mask,\n\t                \"inputs_embeds\": inputs_embeds,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n", "                \"return_dict\": return_dict,\n\t                \"past_key_values\": past_key_values,\n\t            }\n\t        )\n\t        if \"past_key_values\" in fwd_params:\n\t            return self.base_model(labels=labels, **kwargs)\n\t        else:\n\t            transformer_backbone_name = self.base_model.get_submodule(self.transformer_backbone_name)\n\t            fwd_params = list(inspect.signature(transformer_backbone_name.forward).parameters.keys())\n\t            if \"past_key_values\" not in fwd_params:\n", "                raise ValueError(\"Model does not support past key values which are required for prefix tuning.\")\n\t            outputs = transformer_backbone_name(**kwargs)\n\t            pooled_output = outputs[1] if len(outputs) > 1 else outputs[0]\n\t            if \"dropout\" in [name for name, _ in list(self.base_model.named_children())]:\n\t                pooled_output = self.base_model.dropout(pooled_output)\n\t            logits = self.base_model.get_submodule(self.cls_layer_name)(pooled_output)\n\t            loss = None\n\t            if labels is not None:\n\t                if self.config.problem_type is None:\n\t                    if self.base_model.num_labels == 1:\n", "                        self.config.problem_type = \"regression\"\n\t                    elif self.base_model.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n\t                        self.config.problem_type = \"single_label_classification\"\n\t                    else:\n\t                        self.config.problem_type = \"multi_label_classification\"\n\t                if self.config.problem_type == \"regression\":\n\t                    loss_fct = MSELoss()\n\t                    if self.base_model.num_labels == 1:\n\t                        loss = loss_fct(logits.squeeze(), labels.squeeze())\n\t                    else:\n", "                        loss = loss_fct(logits, labels)\n\t                elif self.config.problem_type == \"single_label_classification\":\n\t                    loss_fct = CrossEntropyLoss()\n\t                    loss = loss_fct(logits.view(-1, self.base_model.num_labels), labels.view(-1))\n\t                elif self.config.problem_type == \"multi_label_classification\":\n\t                    loss_fct = BCEWithLogitsLoss()\n\t                    loss = loss_fct(logits, labels)\n\t            if not return_dict:\n\t                output = (logits,) + outputs[2:]\n\t                return ((loss,) + output) if loss is not None else output\n", "            return SequenceClassifierOutput(\n\t                loss=loss,\n\t                logits=logits,\n\t                hidden_states=outputs.hidden_states,\n\t                attentions=outputs.attentions,\n\t            )\n\tclass PeftModelForCausalLM(PeftModel):\n\t    \"\"\"\n\t    Peft model for causal language modeling.\n\t    Args:\n", "        model ([`~transformers.PreTrainedModel`]): Base transformer model.\n\t        peft_config ([`PeftConfig`]): Peft config.\n\t    Example:\n\t        ```py\n\t        >>> from transformers import AutoModelForCausalLM\n\t        >>> from peft import PeftModelForCausalLM, get_peft_config\n\t        >>> config = {\n\t        ...     \"peft_type\": \"PREFIX_TUNING\",\n\t        ...     \"task_type\": \"CAUSAL_LM\",\n\t        ...     \"inference_mode\": False,\n", "        ...     \"num_virtual_tokens\": 20,\n\t        ...     \"token_dim\": 1280,\n\t        ...     \"num_transformer_submodules\": 1,\n\t        ...     \"num_attention_heads\": 20,\n\t        ...     \"num_layers\": 36,\n\t        ...     \"encoder_hidden_size\": 1280,\n\t        ...     \"prefix_projection\": False,\n\t        ...     \"postprocess_past_key_value_function\": None,\n\t        ... }\n\t        >>> peft_config = get_peft_config(config)\n", "        >>> model = AutoModelForCausalLM.from_pretrained(\"gpt2-large\")\n\t        >>> peft_model = PeftModelForCausalLM(model, peft_config)\n\t        >>> peft_model.print_trainable_parameters()\n\t        trainable params: 1843200 || all params: 775873280 || trainable%: 0.23756456724479544\n\t        ```\n\t    \"\"\"\n\t    def __init__(self, model, peft_config: PeftConfig, adapter_name=\"default\"):\n\t        super().__init__(model, peft_config, adapter_name)\n\t        self.base_model_prepare_inputs_for_generation = self.base_model.prepare_inputs_for_generation\n\t    def forward(\n", "        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n\t        inputs_embeds=None,\n\t        labels=None,\n\t        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n\t        **kwargs,\n\t    ):\n", "        peft_config = self.active_peft_config\n\t        if not isinstance(peft_config, PromptLearningConfig):\n\t            return self.base_model(\n\t                input_ids=input_ids,\n\t                attention_mask=attention_mask,\n\t                inputs_embeds=inputs_embeds,\n\t                labels=labels,\n\t                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n", "                **kwargs,\n\t            )\n\t        batch_size = input_ids.shape[0]\n\t        if attention_mask is not None:\n\t            # concat prompt attention mask\n\t            prefix_attention_mask = torch.ones(batch_size, peft_config.num_virtual_tokens).to(self.device)\n\t            attention_mask = torch.cat((prefix_attention_mask, attention_mask), dim=1)\n\t        if kwargs.get(\"position_ids\", None) is not None:\n\t            warnings.warn(\"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\")\n\t            kwargs[\"position_ids\"] = None\n", "        if kwargs.get(\"token_type_ids\", None) is not None:\n\t            warnings.warn(\"Token type ids are not supported for parameter efficient tuning. Ignoring token type ids\")\n\t            kwargs[\"token_type_ids\"] = None\n\t        kwargs.update(\n\t            {\n\t                \"attention_mask\": attention_mask,\n\t                \"labels\": labels,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n\t                \"return_dict\": return_dict,\n", "            }\n\t        )\n\t        if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t            past_key_values = self.get_prompt(batch_size)\n\t            return self.base_model(input_ids=input_ids, past_key_values=past_key_values, **kwargs)\n\t        else:\n\t            if inputs_embeds is None:\n\t                inputs_embeds = self.word_embeddings(input_ids)\n\t            # concat prompt labels\n\t            if labels is not None:\n", "                prefix_labels = torch.full((batch_size, peft_config.num_virtual_tokens), -100).to(self.device)\n\t                kwargs[\"labels\"] = torch.cat((prefix_labels, labels), dim=1)\n\t            prompts = self.get_prompt(batch_size=batch_size)\n\t            prompts = prompts.to(inputs_embeds.dtype)\n\t            inputs_embeds = torch.cat((prompts, inputs_embeds), dim=1)\n\t            return self.base_model(inputs_embeds=inputs_embeds, **kwargs)\n\t    def generate(self, **kwargs):\n\t        peft_config = self.active_peft_config\n\t        self.base_model.prepare_inputs_for_generation = self.prepare_inputs_for_generation\n\t        try:\n", "            if not isinstance(peft_config, PromptLearningConfig):\n\t                outputs = self.base_model.generate(**kwargs)\n\t            else:\n\t                if \"input_ids\" not in kwargs:\n\t                    raise ValueError(\"input_ids must be provided for Peft model generation\")\n\t                # For gpt2 models, we construct postion_ids on the fly by using attention mask, and position ids need to match input_shape.\n\t                # for prefix tuning, input shape is determined using `input_ids`. Thus we should not expand 'attention_mask' here\n\t                # for prompt tuning input_ids is not passed but a concatenated input_embeds is passed. Thus attention_mask needs to be of same size of num_virtual_tokens + input_ids\n\t                if kwargs.get(\"attention_mask\", None) is not None and peft_config.peft_type in [\n\t                    PeftType.PROMPT_TUNING,\n", "                    PeftType.P_TUNING,\n\t                ]:\n\t                    # concat prompt attention mask\n\t                    prefix_attention_mask = torch.ones(\n\t                        kwargs[\"input_ids\"].shape[0], peft_config.num_virtual_tokens\n\t                    ).to(kwargs[\"input_ids\"].device)\n\t                    kwargs[\"attention_mask\"] = torch.cat((prefix_attention_mask, kwargs[\"attention_mask\"]), dim=1)\n\t                if kwargs.get(\"position_ids\", None) is not None:\n\t                    warnings.warn(\n\t                        \"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\"\n", "                    )\n\t                    kwargs[\"position_ids\"] = None\n\t                if kwargs.get(\"token_type_ids\", None) is not None:\n\t                    warnings.warn(\n\t                        \"Token type ids are not supported for parameter efficient tuning. Ignoring token type ids\"\n\t                    )\n\t                    kwargs[\"token_type_ids\"] = None\n\t                outputs = self.base_model.generate(**kwargs)\n\t        except:\n\t            self.base_model.prepare_inputs_for_generation = self.base_model_prepare_inputs_for_generation\n", "            raise\n\t        else:\n\t            self.base_model.prepare_inputs_for_generation = self.base_model_prepare_inputs_for_generation\n\t            return outputs\n\t    def prepare_inputs_for_generation(self, *args, **kwargs):\n\t        peft_config = self.active_peft_config\n\t        model_kwargs = self.base_model_prepare_inputs_for_generation(*args, **kwargs)\n\t        if isinstance(peft_config, PromptLearningConfig):\n\t            if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t                prefix_attention_mask = torch.ones(\n", "                    model_kwargs[\"input_ids\"].shape[0], peft_config.num_virtual_tokens\n\t                ).to(model_kwargs[\"input_ids\"].device)\n\t                model_kwargs[\"attention_mask\"] = torch.cat(\n\t                    (prefix_attention_mask, model_kwargs[\"attention_mask\"]), dim=1\n\t                )\n\t            if model_kwargs[\"past_key_values\"] is None and peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t                past_key_values = self.get_prompt(batch_size=model_kwargs[\"input_ids\"].shape[0])\n\t                if self.base_model_torch_dtype is not None:\n\t                    # handle the case for Bloom where it outputs tuple of tuples\n\t                    if isinstance(past_key_values[0], tuple):\n", "                        past_key_values = tuple(\n\t                            tuple(\n\t                                past_key_value.to(self.base_model_torch_dtype)\n\t                                for past_key_value in past_key_value_tuple\n\t                            )\n\t                            for past_key_value_tuple in past_key_values\n\t                        )\n\t                    else:\n\t                        past_key_values = tuple(\n\t                            past_key_value.to(self.base_model_torch_dtype) for past_key_value in past_key_values\n", "                        )\n\t                model_kwargs[\"past_key_values\"] = past_key_values\n\t            else:\n\t                if model_kwargs[\"past_key_values\"] is None:\n\t                    inputs_embeds = self.word_embeddings(model_kwargs[\"input_ids\"])\n\t                    prompts = self.get_prompt(batch_size=model_kwargs[\"input_ids\"].shape[0])\n\t                    prompts = prompts.to(inputs_embeds.dtype)\n\t                    model_kwargs[\"inputs_embeds\"] = torch.cat((prompts, inputs_embeds), dim=1)\n\t                    model_kwargs[\"input_ids\"] = None\n\t        return model_kwargs\n", "class PeftModelForSeq2SeqLM(PeftModel):\n\t    \"\"\"\n\t    Peft model for sequence-to-sequence language modeling.\n\t    Args:\n\t        model ([`~transformers.PreTrainedModel`]): Base transformer model.\n\t        peft_config ([`PeftConfig`]): Peft config.\n\t    Example:\n\t        ```py\n\t        >>> from transformers import AutoModelForSeq2SeqLM\n\t        >>> from peft import PeftModelForSeq2SeqLM, get_peft_config\n", "        >>> config = {\n\t        ...     \"peft_type\": \"LORA\",\n\t        ...     \"task_type\": \"SEQ_2_SEQ_LM\",\n\t        ...     \"inference_mode\": False,\n\t        ...     \"r\": 8,\n\t        ...     \"target_modules\": [\"q\", \"v\"],\n\t        ...     \"lora_alpha\": 32,\n\t        ...     \"lora_dropout\": 0.1,\n\t        ...     \"merge_weights\": False,\n\t        ...     \"fan_in_fan_out\": False,\n", "        ...     \"enable_lora\": None,\n\t        ...     \"bias\": \"none\",\n\t        ... }\n\t        >>> peft_config = get_peft_config(config)\n\t        >>> model = AutoModelForSeq2SeqLM.from_pretrained(\"t5-base\")\n\t        >>> peft_model = PeftModelForSeq2SeqLM(model, peft_config)\n\t        >>> peft_model.print_trainable_parameters()\n\t        trainable params: 884736 || all params: 223843584 || trainable%: 0.3952474242013566\n\t        ```\n\t    \"\"\"\n", "    def __init__(self, model, peft_config: PeftConfig, adapter_name=\"default\"):\n\t        super().__init__(model, peft_config, adapter_name)\n\t        self.base_model_prepare_inputs_for_generation = self.base_model.prepare_inputs_for_generation\n\t        self.base_model_prepare_encoder_decoder_kwargs_for_generation = (\n\t            self.base_model._prepare_encoder_decoder_kwargs_for_generation\n\t        )\n\t    def forward(\n\t        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n", "        inputs_embeds=None,\n\t        decoder_input_ids=None,\n\t        decoder_attention_mask=None,\n\t        decoder_inputs_embeds=None,\n\t        labels=None,\n\t        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n\t        **kwargs,\n\t    ):\n", "        peft_config = self.active_peft_config\n\t        if not isinstance(peft_config, PromptLearningConfig):\n\t            return self.base_model(\n\t                input_ids=input_ids,\n\t                attention_mask=attention_mask,\n\t                inputs_embeds=inputs_embeds,\n\t                decoder_input_ids=decoder_input_ids,\n\t                decoder_attention_mask=decoder_attention_mask,\n\t                decoder_inputs_embeds=decoder_inputs_embeds,\n\t                labels=labels,\n", "                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n\t                **kwargs,\n\t            )\n\t        batch_size = input_ids.shape[0]\n\t        if decoder_attention_mask is not None:\n\t            # concat prompt attention mask\n\t            prefix_attention_mask = torch.ones(batch_size, peft_config.num_virtual_tokens).to(self.device)\n\t            decoder_attention_mask = torch.cat((prefix_attention_mask, decoder_attention_mask), dim=1)\n", "        if kwargs.get(\"position_ids\", None) is not None:\n\t            warnings.warn(\"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\")\n\t            kwargs[\"position_ids\"] = None\n\t        if kwargs.get(\"token_type_ids\", None) is not None:\n\t            warnings.warn(\"Token type ids are not supported for parameter efficient tuning. Ignoring token type ids\")\n\t            kwargs[\"token_type_ids\"] = None\n\t        kwargs.update(\n\t            {\n\t                \"attention_mask\": attention_mask,\n\t                \"decoder_attention_mask\": decoder_attention_mask,\n", "                \"labels\": labels,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n\t                \"return_dict\": return_dict,\n\t            }\n\t        )\n\t        if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t            past_key_values = self.get_prompt(batch_size)\n\t            return self.base_model(\n\t                input_ids=input_ids, decoder_input_ids=decoder_input_ids, past_key_values=past_key_values, **kwargs\n", "            )\n\t        else:\n\t            if inputs_embeds is None:\n\t                inputs_embeds = self.word_embeddings(input_ids)\n\t            if decoder_inputs_embeds is None and decoder_input_ids is None:\n\t                decoder_input_ids = shift_tokens_right(\n\t                    labels, self.config.pad_token_id, self.config.decoder_start_token_id\n\t                )\n\t                decoder_inputs_embeds = self.word_embeddings(decoder_input_ids)\n\t            if attention_mask is not None:\n", "                # concat prompt attention mask\n\t                prefix_attention_mask = torch.ones(batch_size, peft_config.num_virtual_tokens).to(self.device)\n\t                kwargs[\"attention_mask\"] = torch.cat((prefix_attention_mask, attention_mask), dim=1)\n\t            # concat prompt labels\n\t            if labels is not None:\n\t                if peft_config.num_transformer_submodules == 1:\n\t                    kwargs[\"labels\"] = labels\n\t                elif peft_config.num_transformer_submodules == 2:\n\t                    prefix_labels = torch.full((batch_size, peft_config.num_virtual_tokens), -100).to(self.device)\n\t                    kwargs[\"labels\"] = torch.cat((prefix_labels, labels), dim=1)\n", "            prompts = self.get_prompt(batch_size=batch_size)\n\t            prompts = prompts.to(inputs_embeds.dtype)\n\t            inputs_embeds = torch.cat((prompts[:, : peft_config.num_virtual_tokens], inputs_embeds), dim=1)\n\t            if peft_config.num_transformer_submodules == 1:\n\t                return self.base_model(inputs_embeds=inputs_embeds, **kwargs)\n\t            elif peft_config.num_transformer_submodules == 2:\n\t                decoder_inputs_embeds = torch.cat(\n\t                    (prompts[:, peft_config.num_virtual_tokens :], decoder_inputs_embeds), dim=1\n\t                )\n\t                return self.base_model(\n", "                    inputs_embeds=inputs_embeds, decoder_inputs_embeds=decoder_inputs_embeds, **kwargs\n\t                )\n\t    def generate(self, **kwargs):\n\t        peft_config = self.active_peft_config\n\t        self.base_model.prepare_inputs_for_generation = self.prepare_inputs_for_generation\n\t        self.base_model._prepare_encoder_decoder_kwargs_for_generation = (\n\t            self._prepare_encoder_decoder_kwargs_for_generation\n\t        )\n\t        try:\n\t            if not isinstance(peft_config, PromptLearningConfig):\n", "                outputs = self.base_model.generate(**kwargs)\n\t            else:\n\t                if \"input_ids\" not in kwargs:\n\t                    raise ValueError(\"input_ids must be provided for Peft model generation\")\n\t                if kwargs.get(\"position_ids\", None) is not None:\n\t                    warnings.warn(\n\t                        \"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\"\n\t                    )\n\t                    kwargs[\"position_ids\"] = None\n\t                if kwargs.get(\"token_type_ids\", None) is not None:\n", "                    warnings.warn(\n\t                        \"Token type ids are not supported for parameter efficient tuning. Ignoring token type ids\"\n\t                    )\n\t                    kwargs[\"token_type_ids\"] = None\n\t                if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t                    outputs = self.base_model.generate(**kwargs)\n\t                else:\n\t                    raise NotImplementedError\n\t        except:\n\t            self.base_model.prepare_inputs_for_generation = self.base_model_prepare_inputs_for_generation\n", "            self.base_model._prepare_encoder_decoder_kwargs_for_generation = (\n\t                self.base_model_prepare_encoder_decoder_kwargs_for_generation\n\t            )\n\t            raise\n\t        else:\n\t            self.base_model.prepare_inputs_for_generation = self.base_model_prepare_inputs_for_generation\n\t            self.base_model._prepare_encoder_decoder_kwargs_for_generation = (\n\t                self.base_model_prepare_encoder_decoder_kwargs_for_generation\n\t            )\n\t            return outputs\n", "    def prepare_inputs_for_generation(self, *args, **kwargs):\n\t        peft_config = self.active_peft_config\n\t        model_kwargs = self.base_model_prepare_inputs_for_generation(*args, **kwargs)\n\t        if model_kwargs[\"past_key_values\"] is None and peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t            batch_size = model_kwargs[\"decoder_input_ids\"].shape[0]\n\t            past_key_values = self.get_prompt(batch_size)\n\t            if self.base_model_torch_dtype is not None:\n\t                # handle the case for Bloom where it outputs tuple of tuples\n\t                if isinstance(past_key_values[0], tuple):\n\t                    past_key_values = tuple(\n", "                        tuple(\n\t                            past_key_value.to(self.base_model_torch_dtype) for past_key_value in past_key_value_tuple\n\t                        )\n\t                        for past_key_value_tuple in past_key_values\n\t                    )\n\t                else:\n\t                    past_key_values = tuple(\n\t                        past_key_value.to(self.base_model_torch_dtype) for past_key_value in past_key_values\n\t                    )\n\t            model_kwargs[\"past_key_values\"] = past_key_values\n", "        return model_kwargs\n\tclass PeftModelForTokenClassification(PeftModel):\n\t    \"\"\"\n\t    Peft model for token classification tasks.\n\t    Args:\n\t        model ([`~transformers.PreTrainedModel`]): Base transformer model.\n\t        peft_config ([`PeftConfig`]): Peft config.\n\t    **Attributes**:\n\t        - **config** ([`~transformers.PretrainedConfig`]) -- The configuration object of the base model.\n\t        - **cls_layer_name** (`str`) -- The name of the classification layer.\n", "    Example:\n\t        ```py\n\t        >>> from transformers import AutoModelForSequenceClassification\n\t        >>> from peft import PeftModelForTokenClassification, get_peft_config\n\t        >>> config = {\n\t        ...     \"peft_type\": \"PREFIX_TUNING\",\n\t        ...     \"task_type\": \"TOKEN_CLS\",\n\t        ...     \"inference_mode\": False,\n\t        ...     \"num_virtual_tokens\": 20,\n\t        ...     \"token_dim\": 768,\n", "        ...     \"num_transformer_submodules\": 1,\n\t        ...     \"num_attention_heads\": 12,\n\t        ...     \"num_layers\": 12,\n\t        ...     \"encoder_hidden_size\": 768,\n\t        ...     \"prefix_projection\": False,\n\t        ...     \"postprocess_past_key_value_function\": None,\n\t        ... }\n\t        >>> peft_config = get_peft_config(config)\n\t        >>> model = AutoModelForTokenClassification.from_pretrained(\"bert-base-cased\")\n\t        >>> peft_model = PeftModelForTokenClassification(model, peft_config)\n", "        >>> peft_model.print_trainable_parameters()\n\t        trainable params: 370178 || all params: 108680450 || trainable%: 0.3406113979101117\n\t        ```\n\t    \"\"\"\n\t    def __init__(self, model, peft_config: PeftConfig = None, adapter_name=\"default\"):\n\t        super().__init__(model, peft_config, adapter_name)\n\t        if self.modules_to_save is None:\n\t            self.modules_to_save = {\"classifier\", \"score\"}\n\t        else:\n\t            self.modules_to_save.update({\"classifier\", \"score\"})\n", "        for name, _ in self.base_model.named_children():\n\t            if any(module_name in name for module_name in self.modules_to_save):\n\t                self.cls_layer_name = name\n\t                break\n\t        # to make sure classifier layer is trainable\n\t        _set_trainable(self, adapter_name)\n\t    def forward(\n\t        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n", "        inputs_embeds=None,\n\t        labels=None,\n\t        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n\t        **kwargs,\n\t    ):\n\t        peft_config = self.active_peft_config\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        if not isinstance(peft_config, PromptLearningConfig):\n", "            return self.base_model(\n\t                input_ids=input_ids,\n\t                attention_mask=attention_mask,\n\t                inputs_embeds=inputs_embeds,\n\t                labels=labels,\n\t                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n\t                **kwargs,\n\t            )\n", "        batch_size = input_ids.shape[0]\n\t        if attention_mask is not None:\n\t            # concat prompt attention mask\n\t            prefix_attention_mask = torch.ones(batch_size, peft_config.num_virtual_tokens).to(self.device)\n\t            attention_mask = torch.cat((prefix_attention_mask, attention_mask), dim=1)\n\t        if kwargs.get(\"position_ids\", None) is not None:\n\t            warnings.warn(\"Position ids are not supported for parameter efficient tuning. Ignoring position ids.\")\n\t            kwargs[\"position_ids\"] = None\n\t        kwargs.update(\n\t            {\n", "                \"attention_mask\": attention_mask,\n\t                \"labels\": labels,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n\t                \"return_dict\": return_dict,\n\t            }\n\t        )\n\t        if peft_config.peft_type == PeftType.PREFIX_TUNING:\n\t            return self._prefix_tuning_forward(input_ids=input_ids, **kwargs)\n\t        else:\n", "            if kwargs.get(\"token_type_ids\", None) is not None:\n\t                kwargs[\"token_type_ids\"] = torch.cat(\n\t                    (\n\t                        torch.zeros(batch_size, peft_config.num_virtual_tokens).to(self.device),\n\t                        kwargs[\"token_type_ids\"],\n\t                    ),\n\t                    dim=1,\n\t                ).long()\n\t            if inputs_embeds is None:\n\t                inputs_embeds = self.word_embeddings(input_ids)\n", "            prompts = self.get_prompt(batch_size=batch_size)\n\t            prompts = prompts.to(inputs_embeds.dtype)\n\t            inputs_embeds = torch.cat((prompts, inputs_embeds), dim=1)\n\t            return self.base_model(inputs_embeds=inputs_embeds, **kwargs)\n\t    def _prefix_tuning_forward(\n\t        self,\n\t        input_ids=None,\n\t        attention_mask=None,\n\t        inputs_embeds=None,\n\t        labels=None,\n", "        output_attentions=None,\n\t        output_hidden_states=None,\n\t        return_dict=None,\n\t        **kwargs,\n\t    ):\n\t        batch_size = input_ids.shape[0]\n\t        past_key_values = self.get_prompt(batch_size)\n\t        fwd_params = list(inspect.signature(self.base_model.forward).parameters.keys())\n\t        kwargs.update(\n\t            {\n", "                \"input_ids\": input_ids,\n\t                \"attention_mask\": attention_mask,\n\t                \"inputs_embeds\": inputs_embeds,\n\t                \"output_attentions\": output_attentions,\n\t                \"output_hidden_states\": output_hidden_states,\n\t                \"return_dict\": return_dict,\n\t                \"past_key_values\": past_key_values,\n\t            }\n\t        )\n\t        if \"past_key_values\" in fwd_params:\n", "            return self.base_model(labels=labels, **kwargs)\n\t        else:\n\t            transformer_backbone_name = self.base_model.get_submodule(self.transformer_backbone_name)\n\t            fwd_params = list(inspect.signature(transformer_backbone_name.forward).parameters.keys())\n\t            if \"past_key_values\" not in fwd_params:\n\t                raise ValueError(\"Model does not support past key values which are required for prefix tuning.\")\n\t            outputs = transformer_backbone_name(**kwargs)\n\t            sequence_output = outputs[0]\n\t            if \"dropout\" in [name for name, _ in list(self.base_model.named_children())]:\n\t                sequence_output = self.base_model.dropout(sequence_output)\n", "            logits = self.base_model.get_submodule(self.cls_layer_name)(sequence_output)\n\t            loss = None\n\t            loss = None\n\t            if labels is not None:\n\t                loss_fct = CrossEntropyLoss()\n\t                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))\n\t            if not return_dict:\n\t                output = (logits,) + outputs[2:]\n\t                return ((loss,) + output) if loss is not None else output\n\t            return TokenClassifierOutput(\n", "                loss=loss,\n\t                logits=logits,\n\t                hidden_states=outputs.hidden_states,\n\t                attentions=outputs.attentions,\n\t            )\n"]}
{"filename": "ft_chatglm_lora/peft/mapping.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom .peft_model import (\n\t    PeftModel,\n\t    PeftModelForCausalLM,\n\t    PeftModelForSeq2SeqLM,\n\t    PeftModelForSequenceClassification,\n\t    PeftModelForTokenClassification,\n", ")\n\tfrom .tuners import (\n\t    AdaLoraConfig,\n\t    AdaptionPromptConfig,\n\t    LoraConfig,\n\t    PrefixTuningConfig,\n\t    PromptEncoderConfig,\n\t    PromptTuningConfig,\n\t)\n\tfrom .utils import PromptLearningConfig\n", "MODEL_TYPE_TO_PEFT_MODEL_MAPPING = {\n\t    \"SEQ_CLS\": PeftModelForSequenceClassification,\n\t    \"SEQ_2_SEQ_LM\": PeftModelForSeq2SeqLM,\n\t    \"CAUSAL_LM\": PeftModelForCausalLM,\n\t    \"TOKEN_CLS\": PeftModelForTokenClassification,\n\t}\n\tPEFT_TYPE_TO_CONFIG_MAPPING = {\n\t    \"ADAPTION_PROMPT\": AdaptionPromptConfig,\n\t    \"PROMPT_TUNING\": PromptTuningConfig,\n\t    \"PREFIX_TUNING\": PrefixTuningConfig,\n", "    \"P_TUNING\": PromptEncoderConfig,\n\t    \"LORA\": LoraConfig,\n\t    \"ADALORA\": AdaLoraConfig,\n\t}\n\tdef get_peft_config(config_dict):\n\t    \"\"\"\n\t    Returns a Peft config object from a dictionary.\n\t    Args:\n\t        config_dict (`Dict[str, Any]`): Dictionary containing the configuration parameters.\n\t    \"\"\"\n", "    return PEFT_TYPE_TO_CONFIG_MAPPING[config_dict[\"peft_type\"]](**config_dict)\n\tdef _prepare_prompt_learning_config(peft_config, model_config):\n\t    if peft_config.num_layers is None:\n\t        if \"num_hidden_layers\" in model_config:\n\t            num_layers = model_config[\"num_hidden_layers\"]\n\t        elif \"num_layers\" in model_config:\n\t            num_layers = model_config[\"num_layers\"]\n\t        elif \"n_layer\" in model_config:\n\t            num_layers = model_config[\"n_layer\"]\n\t        else:\n", "            raise ValueError(\"Please specify `num_layers` in `peft_config`\")\n\t        peft_config.num_layers = num_layers\n\t    if peft_config.token_dim is None:\n\t        if \"hidden_size\" in model_config:\n\t            token_dim = model_config[\"hidden_size\"]\n\t        elif \"n_embd\" in model_config:\n\t            token_dim = model_config[\"n_embd\"]\n\t        elif \"d_model\" in model_config:\n\t            token_dim = model_config[\"d_model\"]\n\t        else:\n", "            raise ValueError(\"Please specify `token_dim` in `peft_config`\")\n\t        peft_config.token_dim = token_dim\n\t    if peft_config.num_attention_heads is None:\n\t        if \"num_attention_heads\" in model_config:\n\t            num_attention_heads = model_config[\"num_attention_heads\"]\n\t        elif \"n_head\" in model_config:\n\t            num_attention_heads = model_config[\"n_head\"]\n\t        elif \"num_heads\" in model_config:\n\t            num_attention_heads = model_config[\"num_heads\"]\n\t        elif \"encoder_attention_heads\" in model_config:\n", "            num_attention_heads = model_config[\"encoder_attention_heads\"]\n\t        else:\n\t            raise ValueError(\"Please specify `num_attention_heads` in `peft_config`\")\n\t        peft_config.num_attention_heads = num_attention_heads\n\t    if getattr(peft_config, \"encoder_hidden_size\", None) is None:\n\t        setattr(peft_config, \"encoder_hidden_size\", token_dim)\n\t    return peft_config\n\tdef get_peft_model(model, peft_config):\n\t    \"\"\"\n\t    Returns a Peft model object from a model and a config.\n", "    Args:\n\t        model ([`transformers.PreTrainedModel`]): Model to be wrapped.\n\t        peft_config ([`PeftConfig`]): Configuration object containing the parameters of the Peft model.\n\t    \"\"\"\n\t    model_config = model.config.to_dict() if hasattr(model.config, \"to_dict\") else model.config\n\t    peft_config.base_model_name_or_path = model.__dict__.get(\"name_or_path\", None)\n\t    if peft_config.task_type not in MODEL_TYPE_TO_PEFT_MODEL_MAPPING.keys() and not isinstance(\n\t        peft_config, PromptLearningConfig\n\t    ):\n\t        return PeftModel(model, peft_config)\n", "    if isinstance(peft_config, PromptLearningConfig):\n\t        peft_config = _prepare_prompt_learning_config(peft_config, model_config)\n\t    return MODEL_TYPE_TO_PEFT_MODEL_MAPPING[peft_config.task_type](model, peft_config)\n"]}
{"filename": "ft_chatglm_lora/peft/import_utils.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport importlib\n\tdef is_bnb_available():\n\t    return importlib.util.find_spec(\"bitsandbytes\") is not None\n"]}
{"filename": "ft_chatglm_lora/peft/__init__.py", "chunked_list": ["# flake8: noqa\n\t# There's no way to ignore \"F401 '...' imported but unused\" warnings in this\n\t# module, but to preserve other warnings. So, don't check this module at all.\n\t# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n", "#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t__version__ = \"0.3.0.dev0\"\n\tfrom .mapping import MODEL_TYPE_TO_PEFT_MODEL_MAPPING, PEFT_TYPE_TO_CONFIG_MAPPING, get_peft_config, get_peft_model\n\tfrom .peft_model import (\n", "    PeftModel,\n\t    PeftModelForCausalLM,\n\t    PeftModelForSeq2SeqLM,\n\t    PeftModelForSequenceClassification,\n\t    PeftModelForTokenClassification,\n\t)\n\tfrom .tuners import (\n\t    AdaptionPromptConfig,\n\t    AdaptionPromptModel,\n\t    LoraConfig,\n", "    LoraModel,\n\t    AdaLoraConfig,\n\t    AdaLoraModel,\n\t    PrefixEncoder,\n\t    PrefixTuningConfig,\n\t    PromptEmbedding,\n\t    PromptEncoder,\n\t    PromptEncoderConfig,\n\t    PromptEncoderReparameterizationType,\n\t    PromptTuningConfig,\n", "    PromptTuningInit,\n\t)\n\tfrom .utils import (\n\t    TRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING,\n\t    PeftConfig,\n\t    PeftType,\n\t    PromptLearningConfig,\n\t    TaskType,\n\t    bloom_model_postprocess_past_key_value,\n\t    get_peft_model_state_dict,\n", "    prepare_model_for_int8_training,\n\t    set_peft_model_state_dict,\n\t    shift_tokens_right,\n\t)\n"]}
{"filename": "ft_chatglm_lora/peft/utils/save_and_load.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom .config import PeftType, PromptLearningConfig\n\tdef get_peft_model_state_dict(model, state_dict=None, adapter_name=\"default\"):\n\t    \"\"\"\n\t    Get the state dict of the Peft model.\n\t    Args:\n\t        model ([`PeftModel`]): The Peft model. When using torch.nn.DistributedDataParallel, DeepSpeed or FSDP,\n", "        the model should be the underlying model/unwrapped model (i.e. model.module).\n\t        state_dict (`dict`, *optional*, defaults to `None`):\n\t            The state dict of the model. If not provided, the state dict of the model\n\t        will be used.\n\t    \"\"\"\n\t    config = model.peft_config[adapter_name]\n\t    if state_dict is None:\n\t        state_dict = model.state_dict()\n\t    if config.peft_type in (PeftType.LORA, PeftType.ADALORA):\n\t        # to_return = lora_state_dict(model, bias=model.peft_config.bias)\n", "        # adapted from `https://github.com/microsoft/LoRA/blob/main/loralib/utils.py`\n\t        # to be used directly with the state dict which is necessary when using DeepSpeed or FSDP\n\t        bias = config.bias\n\t        if bias == \"none\":\n\t            to_return = {k: state_dict[k] for k in state_dict if \"lora_\" in k}\n\t        elif bias == \"all\":\n\t            to_return = {k: state_dict[k] for k in state_dict if \"lora_\" in k or \"bias\" in k}\n\t        elif bias == \"lora_only\":\n\t            to_return = {}\n\t            for k in state_dict:\n", "                if \"lora_\" in k:\n\t                    to_return[k] = state_dict[k]\n\t                    bias_name = k.split(\"lora_\")[0] + \"bias\"\n\t                    if bias_name in state_dict:\n\t                        to_return[bias_name] = state_dict[bias_name]\n\t        else:\n\t            raise NotImplementedError\n\t        to_return = {k: v for k, v in to_return.items() if ((\"lora_\" in k and adapter_name in k) or (\"bias\" in k))}\n\t        if config.peft_type == PeftType.ADALORA:\n\t            rank_pattern = config.rank_pattern\n", "            if rank_pattern is not None:\n\t                rank_pattern = {k.replace(f\".{adapter_name}\", \"\"): v for k, v in rank_pattern.items()}\n\t                config.rank_pattern = rank_pattern\n\t                to_return = model.resize_state_dict_by_rank_pattern(rank_pattern, to_return, adapter_name)\n\t    elif config.peft_type == PeftType.ADAPTION_PROMPT:\n\t        to_return = {k: state_dict[k] for k in state_dict if k.split(\".\")[-1].startswith(\"adaption_\")}\n\t    elif isinstance(config, PromptLearningConfig):\n\t        to_return = {}\n\t        if config.inference_mode:\n\t            prompt_embeddings = model.prompt_encoder[adapter_name].embedding.weight\n", "        else:\n\t            prompt_embeddings = model.get_prompt_embedding_to_save(adapter_name)\n\t        to_return[\"prompt_embeddings\"] = prompt_embeddings\n\t    else:\n\t        raise NotImplementedError\n\t    if model.modules_to_save is not None:\n\t        for key, value in state_dict.items():\n\t            if any(f\"{module_name}.modules_to_save.{adapter_name}\" in key for module_name in model.modules_to_save):\n\t                to_return[key.replace(\"modules_to_save.\", \"\")] = value\n\t    to_return = {k.replace(f\".{adapter_name}\", \"\"): v for k, v in to_return.items()}\n", "    return to_return\n\tdef set_peft_model_state_dict(model, peft_model_state_dict, adapter_name=\"default\"):\n\t    \"\"\"\n\t    Set the state dict of the Peft model.\n\t    Args:\n\t        model ([`PeftModel`]): The Peft model.\n\t        peft_model_state_dict (`dict`): The state dict of the Peft model.\n\t    \"\"\"\n\t    config = model.peft_config[adapter_name]\n\t    state_dict = {}\n", "    if model.modules_to_save is not None:\n\t        for key, value in peft_model_state_dict.items():\n\t            if any(module_name in key for module_name in model.modules_to_save):\n\t                for module_name in model.modules_to_save:\n\t                    if module_name in key:\n\t                        key = key.replace(module_name, f\"{module_name}.modules_to_save.{adapter_name}\")\n\t                        break\n\t            state_dict[key] = value\n\t    else:\n\t        state_dict = peft_model_state_dict\n", "    if config.peft_type in (PeftType.LORA, PeftType.ADALORA):\n\t        peft_model_state_dict = {}\n\t        for k, v in state_dict.items():\n\t            if \"lora_\" in k:\n\t                suffix = k.split(\"lora_\")[1]\n\t                if \".\" in suffix:\n\t                    suffix_to_replace = \".\".join(suffix.split(\".\")[1:])\n\t                    k = k.replace(suffix_to_replace, f\"{adapter_name}.{suffix_to_replace}\")\n\t                else:\n\t                    k = f\"{k}.{adapter_name}\"\n", "                peft_model_state_dict[k] = v\n\t            else:\n\t                peft_model_state_dict[k] = v\n\t        if config.peft_type == PeftType.ADALORA:\n\t            rank_pattern = config.rank_pattern\n\t            if rank_pattern is not None:\n\t                model.resize_modules_by_rank_pattern(rank_pattern, adapter_name)\n\t    elif isinstance(config, PromptLearningConfig) or config.peft_type == PeftType.ADAPTION_PROMPT:\n\t        peft_model_state_dict = state_dict\n\t    else:\n", "        raise NotImplementedError\n\t    model.load_state_dict(peft_model_state_dict, strict=False)\n\t    if isinstance(config, PromptLearningConfig):\n\t        model.prompt_encoder[adapter_name].embedding.load_state_dict(\n\t            {\"weight\": peft_model_state_dict[\"prompt_embeddings\"]}, strict=True\n\t        )\n"]}
{"filename": "ft_chatglm_lora/peft/utils/other.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport copy\n\timport torch\n\t# needed for prefix-tuning of bloom model\n\tdef bloom_model_postprocess_past_key_value(past_key_values):\n\t    past_key_values = torch.cat(past_key_values)\n\t    total_layers, batch_size, num_attention_heads, num_virtual_tokens, head_dim = past_key_values.shape\n", "    keys = past_key_values[: total_layers // 2]\n\t    keys = keys.transpose(2, 3).reshape(\n\t        total_layers // 2, batch_size * num_attention_heads, head_dim, num_virtual_tokens\n\t    )\n\t    values = past_key_values[total_layers // 2 :]\n\t    values = values.reshape(total_layers // 2, batch_size * num_attention_heads, num_virtual_tokens, head_dim)\n\t    return tuple(zip(keys, values))\n\tdef prepare_model_for_int8_training(\n\t    model, output_embedding_layer_name=\"lm_head\", use_gradient_checkpointing=True, layer_norm_names=[\"layer_norm\"]\n\t):\n", "    r\"\"\"\n\t    This method wraps the entire protocol for preparing a model before running a training. This includes:\n\t        1- Cast the layernorm in fp32 2- making output embedding layer require grads 3- Add the upcasting of the lm\n\t        head to fp32\n\t    Args:\n\t        model, (`transformers.PreTrainedModel`):\n\t            The loaded model from `transformers`\n\t    \"\"\"\n\t    loaded_in_8bit = getattr(model, \"is_loaded_in_8bit\", False)\n\t    for name, param in model.named_parameters():\n", "        # freeze base model's layers\n\t        param.requires_grad = False\n\t        if loaded_in_8bit:\n\t            # cast layer norm in fp32 for stability for 8bit models\n\t            if param.ndim == 1 and any(layer_norm_name in name for layer_norm_name in layer_norm_names):\n\t                param.data = param.data.to(torch.float32)\n\t    if loaded_in_8bit and use_gradient_checkpointing:\n\t        # For backward compatibility\n\t        if hasattr(model, \"enable_input_require_grads\"):\n\t            model.enable_input_require_grads()\n", "        else:\n\t            def make_inputs_require_grad(module, input, output):\n\t                output.requires_grad_(True)\n\t            model.get_input_embeddings().register_forward_hook(make_inputs_require_grad)\n\t        # enable gradient checkpointing for memory efficiency\n\t        model.gradient_checkpointing_enable()\n\t    if hasattr(model, output_embedding_layer_name):\n\t        output_embedding_layer = getattr(model, output_embedding_layer_name)\n\t        input_dtype = output_embedding_layer.weight.dtype\n\t        class CastOutputToFloat(torch.nn.Sequential):\n", "            r\"\"\"\n\t            Manually cast to the expected dtype of the lm_head as sometimes there is a final layer norm that is casted\n\t            in fp32\n\t            \"\"\"\n\t            def forward(self, x):\n\t                return super().forward(x.to(input_dtype)).to(torch.float32)\n\t        setattr(model, output_embedding_layer_name, CastOutputToFloat(output_embedding_layer))\n\t    return model\n\t# copied from transformers.models.bart.modeling_bart\n\tdef shift_tokens_right(input_ids: torch.Tensor, pad_token_id: int, decoder_start_token_id: int):\n", "    \"\"\"\n\t    Shift input ids one token to the right.\n\t    Args:\n\t        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`): input ids\n\t        pad_token_id (`int`): The id of the `padding` token.\n\t        decoder_start_token_id (`int`): The id of the `start` token.\n\t    \"\"\"\n\t    shifted_input_ids = input_ids.new_zeros(input_ids.shape)\n\t    shifted_input_ids[:, 1:] = input_ids[:, :-1].clone()\n\t    shifted_input_ids[:, 0] = decoder_start_token_id\n", "    if pad_token_id is None:\n\t        raise ValueError(\"self.model.config.pad_token_id has to be defined.\")\n\t    # replace possible -100 values in labels by `pad_token_id`\n\t    shifted_input_ids.masked_fill_(shifted_input_ids == -100, pad_token_id)\n\t    return shifted_input_ids\n\tclass ModulesToSaveWrapper(torch.nn.Module):\n\t    def __init__(self, module_to_save, adapter_name):\n\t        super().__init__()\n\t        self.original_module = module_to_save\n\t        self.modules_to_save = torch.nn.ModuleDict({})\n", "        self.update(adapter_name)\n\t        self.active_adapter = adapter_name\n\t    def update(self, adapter_name):\n\t        self.modules_to_save.update(torch.nn.ModuleDict({adapter_name: copy.deepcopy(self.original_module)}))\n\t    def forward(self, *args, **kwargs):\n\t        if self.active_adapter not in self.modules_to_save:\n\t            return self.original_module(*args, **kwargs)\n\t        return self.modules_to_save[self.active_adapter](*args, **kwargs)\n\tdef _get_submodules(model, key):\n\t    parent = model.get_submodule(\".\".join(key.split(\".\")[:-1]))\n", "    target_name = key.split(\".\")[-1]\n\t    target = model.get_submodule(key)\n\t    return parent, target, target_name\n\tdef _freeze_adapter(model, adapter_name):\n\t    for n, p in model.named_parameters():\n\t        if adapter_name in n:\n\t            p.requires_grad = False\n\tdef _set_trainable(model, adapter_name):\n\t    key_list = [key for key, _ in model.named_modules()]\n\t    for key in key_list:\n", "        target_module_found = any(key.endswith(target_key) for target_key in model.modules_to_save)\n\t        if target_module_found:\n\t            parent, target, target_name = _get_submodules(model, key)\n\t            if isinstance(target, ModulesToSaveWrapper):\n\t                target.update(adapter_name)\n\t            else:\n\t                for param in target.parameters():\n\t                    param.requires_grad = True\n\t                setattr(parent, target_name, ModulesToSaveWrapper(target, adapter_name))\n\tdef _set_adapter(model, adapter_name):\n", "    for module in model.modules():\n\t        if isinstance(module, ModulesToSaveWrapper):\n\t            module.active_adapter = adapter_name\n\tdef fsdp_auto_wrap_policy(model):\n\t    import functools\n\t    import os\n\t    from accelerate import FullyShardedDataParallelPlugin\n\t    from torch.distributed.fsdp.wrap import _or_policy, lambda_auto_wrap_policy, transformer_auto_wrap_policy\n\t    from ..tuners import PrefixEncoder, PromptEmbedding, PromptEncoder\n\t    def lambda_policy_fn(module):\n", "        if (\n\t            len(list(module.named_children())) == 0\n\t            and getattr(module, \"weight\", None) is not None\n\t            and module.weight.requires_grad\n\t        ):\n\t            return True\n\t        return False\n\t    lambda_policy = functools.partial(lambda_auto_wrap_policy, lambda_fn=lambda_policy_fn)\n\t    transformer_wrap_policy = functools.partial(\n\t        transformer_auto_wrap_policy,\n", "        transformer_layer_cls=(\n\t            PrefixEncoder,\n\t            PromptEncoder,\n\t            PromptEmbedding,\n\t            FullyShardedDataParallelPlugin.get_module_class_from_name(\n\t                model, os.environ.get(\"FSDP_TRANSFORMER_CLS_TO_WRAP\", \"\")\n\t            ),\n\t        ),\n\t    )\n\t    auto_wrap_policy = functools.partial(_or_policy, policies=[lambda_policy, transformer_wrap_policy])\n", "    return auto_wrap_policy\n\tdef transpose(weight, fan_in_fan_out):\n\t    return weight.T if fan_in_fan_out else weight\n\tTRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING = {\n\t    \"t5\": [\"q\", \"v\"],\n\t    \"mt5\": [\"q\", \"v\"],\n\t    \"bart\": [\"q_proj\", \"v_proj\"],\n\t    \"gpt2\": [\"c_attn\"],\n\t    \"bloom\": [\"query_key_value\"],\n\t    \"blip-2\": [\"q\", \"v\", \"q_proj\", \"v_proj\"],\n", "    \"opt\": [\"q_proj\", \"v_proj\"],\n\t    \"gptj\": [\"q_proj\", \"v_proj\"],\n\t    \"gpt_neox\": [\"query_key_value\"],\n\t    \"gpt_neo\": [\"q_proj\", \"v_proj\"],\n\t    \"bert\": [\"query\", \"value\"],\n\t    \"roberta\": [\"query\", \"value\"],\n\t    \"xlm-roberta\": [\"query\", \"value\"],\n\t    \"electra\": [\"query\", \"value\"],\n\t    \"deberta-v2\": [\"query_proj\", \"value_proj\"],\n\t    \"deberta\": [\"in_proj\"],\n", "    \"layoutlm\": [\"query\", \"value\"],\n\t    \"llama\": [\"q_proj\", \"v_proj\"],\n\t    \"chatglm\": [\"query_key_value\"],\n\t}\n\tTRANSFORMERS_MODELS_TO_ADALORA_TARGET_MODULES_MAPPING = {\n\t    \"t5\": [\"q\", \"k\", \"v\", \"o\", \"wi\", \"wo\"],\n\t    \"mt5\": [\"q\", \"k\", \"v\", \"o\", \"wi_0\", \"wi_1\", \"wo\"],\n\t    \"bart\": [\"q_proj\", \"k_proj\", \"v_proj\", \"out_proj\", \"fc1\", \"fc2\"],\n\t    # \"gpt2\": [\"c_attn\"],\n\t    # \"bloom\": [\"query_key_value\"],\n", "    \"opt\": [\"q_proj\", \"k_proj\", \"v_proj\", \"out_proj\", \"fc1\", \"fc2\"],\n\t    # \"gptj\": [\"q_proj\", \"v_proj\"],\n\t    # \"gpt_neox\": [\"query_key_value\"],\n\t    # \"gpt_neo\": [\"q_proj\", \"v_proj\"],\n\t    # \"bert\": [\"query\", \"value\"],\n\t    \"roberta\": [\"query\", \"key\", \"value\", \"dense\"],\n\t    # \"xlm-roberta\": [\"query\", \"value\"],\n\t    # \"electra\": [\"query\", \"value\"],\n\t    \"deberta-v2\": [\"query_proj\", \"key_proj\", \"value_proj\", \"dense\"],\n\t    # \"deberta\": [\"in_proj\"],\n", "    # \"layoutlm\": [\"query\", \"value\"],\n\t}\n\tTRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING = {\n\t    \"bloom\": bloom_model_postprocess_past_key_value,\n\t}\n\tWEIGHTS_NAME = \"adapter_model.bin\"\n\tCONFIG_NAME = \"adapter_config.json\"\n"]}
{"filename": "ft_chatglm_lora/peft/utils/config.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport enum\n\timport json\n\timport os\n\tfrom dataclasses import asdict, dataclass, field\n\tfrom typing import Optional, Union\n\tfrom huggingface_hub import hf_hub_download\n", "from transformers.utils import PushToHubMixin\n\tfrom .other import CONFIG_NAME\n\tclass PeftType(str, enum.Enum):\n\t    PROMPT_TUNING = \"PROMPT_TUNING\"\n\t    P_TUNING = \"P_TUNING\"\n\t    PREFIX_TUNING = \"PREFIX_TUNING\"\n\t    LORA = \"LORA\"\n\t    ADALORA = \"ADALORA\"\n\t    ADAPTION_PROMPT = \"ADAPTION_PROMPT\"\n\tclass TaskType(str, enum.Enum):\n", "    SEQ_CLS = \"SEQ_CLS\"\n\t    SEQ_2_SEQ_LM = \"SEQ_2_SEQ_LM\"\n\t    CAUSAL_LM = \"CAUSAL_LM\"\n\t    TOKEN_CLS = \"TOKEN_CLS\"\n\t@dataclass\n\tclass PeftConfigMixin(PushToHubMixin):\n\t    r\"\"\"\n\t    This is the base configuration class for PEFT adapter models. It contains all the methods that are common to all\n\t    PEFT adapter models. This class inherits from [`~transformers.utils.PushToHubMixin`] which contains the methods to\n\t    push your model to the Hub. The method `save_pretrained` will save the configuration of your adapter model in a\n", "    directory. The method `from_pretrained` will load the configuration of your adapter model from a directory.\n\t    Args:\n\t        peft_type (Union[[`~peft.utils.config.PeftType`], `str`]): The type of Peft method to use.\n\t    \"\"\"\n\t    peft_type: Optional[PeftType] = field(default=None, metadata={\"help\": \"The type of PEFT model.\"})\n\t    @property\n\t    def __dict__(self):\n\t        return asdict(self)\n\t    def to_dict(self):\n\t        return self.__dict__\n", "    def save_pretrained(self, save_directory, **kwargs):\n\t        r\"\"\"\n\t        This method saves the configuration of your adapter model in a directory.\n\t        Args:\n\t            save_directory (`str`):\n\t                The directory where the configuration will be saved.\n\t            kwargs (additional keyword arguments, *optional*):\n\t                Additional keyword arguments passed along to the [`~transformers.utils.PushToHubMixin.push_to_hub`]\n\t                method.\n\t        \"\"\"\n", "        if os.path.isfile(save_directory):\n\t            raise AssertionError(f\"Provided path ({save_directory}) should be a directory, not a file\")\n\t        os.makedirs(save_directory, exist_ok=True)\n\t        output_dict = self.__dict__\n\t        output_path = os.path.join(save_directory, CONFIG_NAME)\n\t        # save it\n\t        with open(output_path, \"w\") as writer:\n\t            writer.write(json.dumps(output_dict, indent=2, sort_keys=True))\n\t    @classmethod\n\t    def from_pretrained(cls, pretrained_model_name_or_path, subfolder=None, **kwargs):\n", "        r\"\"\"\n\t        This method loads the configuration of your adapter model from a directory.\n\t        Args:\n\t            pretrained_model_name_or_path (`str`):\n\t                The directory or the Hub repository id where the configuration is saved.\n\t            kwargs (additional keyword arguments, *optional*):\n\t                Additional keyword arguments passed along to the child class initialization.\n\t        \"\"\"\n\t        path = (\n\t            os.path.join(pretrained_model_name_or_path, subfolder)\n", "            if subfolder is not None\n\t            else pretrained_model_name_or_path\n\t        )\n\t        if os.path.isfile(os.path.join(path, CONFIG_NAME)):\n\t            config_file = os.path.join(path, CONFIG_NAME)\n\t        else:\n\t            try:\n\t                config_file = hf_hub_download(pretrained_model_name_or_path, CONFIG_NAME, subfolder=subfolder)\n\t            except Exception:\n\t                raise ValueError(f\"Can't find '{CONFIG_NAME}' at '{pretrained_model_name_or_path}'\")\n", "        loaded_attributes = cls.from_json_file(config_file)\n\t        config = cls(**kwargs)\n\t        for key, value in loaded_attributes.items():\n\t            if hasattr(config, key):\n\t                setattr(config, key, value)\n\t        return config\n\t    @classmethod\n\t    def from_json_file(cls, path_json_file, **kwargs):\n\t        r\"\"\"\n\t        Loads a configuration file from a json file.\n", "        Args:\n\t            path_json_file (`str`):\n\t                The path to the json file.\n\t        \"\"\"\n\t        with open(path_json_file, \"r\") as file:\n\t            json_object = json.load(file)\n\t        return json_object\n\t@dataclass\n\tclass PeftConfig(PeftConfigMixin):\n\t    \"\"\"\n", "    This is the base configuration class to store the configuration of a [`PeftModel`].\n\t    Args:\n\t        peft_type (Union[[`~peft.utils.config.PeftType`], `str`]): The type of Peft method to use.\n\t        task_type (Union[[`~peft.utils.config.TaskType`], `str`]): The type of task to perform.\n\t        inference_mode (`bool`, defaults to `False`): Whether to use the Peft model in inference mode.\n\t    \"\"\"\n\t    base_model_name_or_path: str = field(default=None, metadata={\"help\": \"The name of the base model to use.\"})\n\t    peft_type: Union[str, PeftType] = field(default=None, metadata={\"help\": \"Peft type\"})\n\t    task_type: Union[str, TaskType] = field(default=None, metadata={\"help\": \"Task type\"})\n\t    inference_mode: bool = field(default=False, metadata={\"help\": \"Whether to use inference mode\"})\n", "@dataclass\n\tclass PromptLearningConfig(PeftConfig):\n\t    \"\"\"\n\t    This is the base configuration class to store the configuration of [`PrefixTuning`], [`PromptEncoder`], or\n\t    [`PromptTuning`].\n\t    Args:\n\t        num_virtual_tokens (`int`): The number of virtual tokens to use.\n\t        token_dim (`int`): The hidden embedding dimension of the base transformer model.\n\t        num_transformer_submodules (`int`): The number of transformer submodules in the base transformer model.\n\t        num_attention_heads (`int`): The number of attention heads in the base transformer model.\n", "        num_layers (`int`): The number of layers in the base transformer model.\n\t    \"\"\"\n\t    num_virtual_tokens: int = field(default=None, metadata={\"help\": \"Number of virtual tokens\"})\n\t    token_dim: int = field(\n\t        default=None, metadata={\"help\": \"The hidden embedding dimension of the base transformer model\"}\n\t    )\n\t    num_transformer_submodules: Optional[int] = field(\n\t        default=None, metadata={\"help\": \"Number of transformer submodules\"}\n\t    )\n\t    num_attention_heads: Optional[int] = field(default=None, metadata={\"help\": \"Number of attention heads\"})\n", "    num_layers: Optional[int] = field(default=None, metadata={\"help\": \"Number of transformer layers\"})\n"]}
{"filename": "ft_chatglm_lora/peft/utils/__init__.py", "chunked_list": ["# flake8: noqa\n\t# There's no way to ignore \"F401 '...' imported but unused\" warnings in this\n\t# module, but to preserve other warnings. So, don't check this module at all\n\t# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n", "#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom .config import PeftConfig, PeftType, PromptLearningConfig, TaskType\n\tfrom .other import (\n\t    TRANSFORMERS_MODELS_TO_PREFIX_TUNING_POSTPROCESS_MAPPING,\n", "    TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING,\n\t    TRANSFORMERS_MODELS_TO_ADALORA_TARGET_MODULES_MAPPING,\n\t    CONFIG_NAME,\n\t    WEIGHTS_NAME,\n\t    _set_trainable,\n\t    bloom_model_postprocess_past_key_value,\n\t    prepare_model_for_int8_training,\n\t    shift_tokens_right,\n\t    transpose,\n\t    _get_submodules,\n", "    _set_adapter,\n\t    _freeze_adapter,\n\t    ModulesToSaveWrapper,\n\t)\n\tfrom .save_and_load import get_peft_model_state_dict, set_peft_model_state_dict\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/prompt_tuning.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport enum\n\timport math\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Optional, Union\n\timport torch\n\tfrom ..utils import PeftType, PromptLearningConfig\n", "class PromptTuningInit(str, enum.Enum):\n\t    TEXT = \"TEXT\"\n\t    RANDOM = \"RANDOM\"\n\t@dataclass\n\tclass PromptTuningConfig(PromptLearningConfig):\n\t    \"\"\"\n\t    This is the configuration class to store the configuration of a [`PromptEmbedding`].\n\t    Args:\n\t        prompt_tuning_init (Union[[`PromptTuningInit`], `str`]): The initialization of the prompt embedding.\n\t        prompt_tuning_init_text (`str`, *optional*):\n", "            The text to initialize the prompt embedding. Only used if `prompt_tuning_init` is `TEXT`.\n\t        tokenizer_name_or_path (`str`, *optional*):\n\t            The name or path of the tokenizer. Only used if `prompt_tuning_init` is `TEXT`.\n\t    \"\"\"\n\t    prompt_tuning_init: Union[PromptTuningInit, str] = field(\n\t        default=PromptTuningInit.RANDOM,\n\t        metadata={\"help\": \"How to initialize the prompt tuning parameters\"},\n\t    )\n\t    prompt_tuning_init_text: Optional[str] = field(\n\t        default=None,\n", "        metadata={\n\t            \"help\": \"The text to use for prompt tuning initialization. Only used if prompt_tuning_init is `TEXT`\"\n\t        },\n\t    )\n\t    tokenizer_name_or_path: Optional[str] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": \"The tokenizer to use for prompt tuning initialization. Only used if prompt_tuning_init is `TEXT`\"\n\t        },\n\t    )\n", "    def __post_init__(self):\n\t        self.peft_type = PeftType.PROMPT_TUNING\n\tclass PromptEmbedding(torch.nn.Module):\n\t    \"\"\"\n\t    The model to encode virtual tokens into prompt embeddings.\n\t    Args:\n\t        config ([`PromptTuningConfig`]): The configuration of the prompt embedding.\n\t        word_embeddings (`torch.nn.Module`): The word embeddings of the base transformer model.\n\t    **Attributes**:\n\t        - **embedding** (`torch.nn.Embedding`) -- The embedding layer of the prompt embedding.\n", "    Example:\n\t    ```py\n\t    >>> from peft import PromptEmbedding, PromptTuningConfig\n\t    >>> config = PromptTuningConfig(\n\t    ...     peft_type=\"PROMPT_TUNING\",\n\t    ...     task_type=\"SEQ_2_SEQ_LM\",\n\t    ...     num_virtual_tokens=20,\n\t    ...     token_dim=768,\n\t    ...     num_transformer_submodules=1,\n\t    ...     num_attention_heads=12,\n", "    ...     num_layers=12,\n\t    ...     prompt_tuning_init=\"TEXT\",\n\t    ...     prompt_tuning_init_text=\"Predict if sentiment of this review is positive, negative or neutral\",\n\t    ...     tokenizer_name_or_path=\"t5-base\",\n\t    ... )\n\t    >>> # t5_model.shared is the word embeddings of the base model\n\t    >>> prompt_embedding = PromptEmbedding(config, t5_model.shared)\n\t    ```\n\t    Input Shape: (`batch_size`, `total_virtual_tokens`)\n\t    Output Shape: (`batch_size`, `total_virtual_tokens`, `token_dim`)\n", "    \"\"\"\n\t    def __init__(self, config, word_embeddings):\n\t        super().__init__()\n\t        total_virtual_tokens = config.num_virtual_tokens * config.num_transformer_submodules\n\t        self.embedding = torch.nn.Embedding(total_virtual_tokens, config.token_dim)\n\t        if config.prompt_tuning_init == PromptTuningInit.TEXT:\n\t            from transformers import AutoTokenizer\n\t            tokenizer = AutoTokenizer.from_pretrained(config.tokenizer_name_or_path)\n\t            init_text = config.prompt_tuning_init_text\n\t            init_token_ids = tokenizer(init_text)[\"input_ids\"]\n", "            # Trim or iterate until num_text_tokens matches total_virtual_tokens\n\t            num_text_tokens = len(init_token_ids)\n\t            if num_text_tokens > total_virtual_tokens:\n\t                init_token_ids = init_token_ids[:total_virtual_tokens]\n\t            elif num_text_tokens < total_virtual_tokens:\n\t                num_reps = math.ceil(total_virtual_tokens / num_text_tokens)\n\t                init_token_ids = init_token_ids * num_reps\n\t            init_token_ids = init_token_ids[:total_virtual_tokens]\n\t            word_embedding_weights = word_embeddings(torch.LongTensor(init_token_ids)).detach().clone()\n\t            word_embedding_weights = word_embedding_weights.to(torch.float32)\n", "            self.embedding.weight = torch.nn.Parameter(word_embedding_weights)\n\t    def forward(self, indices):\n\t        # Just get embeddings\n\t        prompt_embeddings = self.embedding(indices)\n\t        return prompt_embeddings\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/p_tuning.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport enum\n\timport warnings\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Union\n\timport torch\n\tfrom ..utils import PeftType, PromptLearningConfig\n", "class PromptEncoderReparameterizationType(str, enum.Enum):\n\t    MLP = \"MLP\"\n\t    LSTM = \"LSTM\"\n\t@dataclass\n\tclass PromptEncoderConfig(PromptLearningConfig):\n\t    \"\"\"\n\t    This is the configuration class to store the configuration of a [`PromptEncoder`].\n\t    Args:\n\t        encoder_reparameterization_type (Union[[`PromptEncoderReparameterizationType`], `str`]):\n\t            The type of reparameterization to use.\n", "        encoder_hidden_size (`int`): The hidden size of the prompt encoder.\n\t        encoder_num_layers (`int`): The number of layers of the prompt encoder.\n\t        encoder_dropout (`float`): The dropout probability of the prompt encoder.\n\t    \"\"\"\n\t    encoder_reparameterization_type: Union[str, PromptEncoderReparameterizationType] = field(\n\t        default=PromptEncoderReparameterizationType.MLP,\n\t        metadata={\"help\": \"How to reparameterize the prompt encoder\"},\n\t    )\n\t    encoder_hidden_size: int = field(\n\t        default=None,\n", "        metadata={\"help\": \"The hidden size of the prompt encoder\"},\n\t    )\n\t    encoder_num_layers: int = field(\n\t        default=2,\n\t        metadata={\"help\": \"The number of layers of the prompt encoder\"},\n\t    )\n\t    encoder_dropout: float = field(\n\t        default=0.0,\n\t        metadata={\"help\": \"The dropout of the prompt encoder\"},\n\t    )\n", "    def __post_init__(self):\n\t        self.peft_type = PeftType.P_TUNING\n\t# Based on https://github.com/NVIDIA/NeMo/blob/main/nemo/collections/nlp/modules/common/prompt_encoder.py\n\t# with some refactor\n\tclass PromptEncoder(torch.nn.Module):\n\t    \"\"\"\n\t    The prompt encoder network that is used to generate the virtual token embeddings for p-tuning.\n\t    Args:\n\t        config ([`PromptEncoderConfig`]): The configuration of the prompt encoder.\n\t    Example:\n", "    ```py\n\t    >>> from peft import PromptEncoder, PromptEncoderConfig\n\t    >>> config = PromptEncoderConfig(\n\t    ...     peft_type=\"P_TUNING\",\n\t    ...     task_type=\"SEQ_2_SEQ_LM\",\n\t    ...     num_virtual_tokens=20,\n\t    ...     token_dim=768,\n\t    ...     num_transformer_submodules=1,\n\t    ...     num_attention_heads=12,\n\t    ...     num_layers=12,\n", "    ...     encoder_reparameterization_type=\"MLP\",\n\t    ...     encoder_hidden_size=768,\n\t    ... )\n\t    >>> prompt_encoder = PromptEncoder(config)\n\t    ```\n\t    **Attributes**:\n\t        - **embedding** (`torch.nn.Embedding`) -- The embedding layer of the prompt encoder.\n\t        - **mlp_head** (`torch.nn.Sequential`) -- The MLP head of the prompt encoder if `inference_mode=False`.\n\t        - **lstm_head** (`torch.nn.LSTM`) -- The LSTM head of the prompt encoder if `inference_mode=False` and\n\t        `encoder_reparameterization_type=\"LSTM\"`.\n", "        - **token_dim** (`int`) -- The hidden embedding dimension of the base transformer model.\n\t        - **input_size** (`int`) -- The input size of the prompt encoder.\n\t        - **output_size** (`int`) -- The output size of the prompt encoder.\n\t        - **hidden_size** (`int`) -- The hidden size of the prompt encoder.\n\t        - **total_virtual_tokens** (`int`): The total number of virtual tokens of the\n\t        prompt encoder.\n\t        - **encoder_type** (Union[[`PromptEncoderReparameterizationType`], `str`]): The encoder type of the prompt\n\t          encoder.\n\t    Input shape: (`batch_size`, `total_virtual_tokens`)\n\t    Output shape: (`batch_size`, `total_virtual_tokens`, `token_dim`)\n", "    \"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.token_dim = config.token_dim\n\t        self.input_size = self.token_dim\n\t        self.output_size = self.token_dim\n\t        self.hidden_size = config.encoder_hidden_size\n\t        self.total_virtual_tokens = config.num_virtual_tokens * config.num_transformer_submodules\n\t        self.encoder_type = config.encoder_reparameterization_type\n\t        # embedding\n", "        self.embedding = torch.nn.Embedding(self.total_virtual_tokens, self.token_dim)\n\t        if not config.inference_mode:\n\t            if self.encoder_type == PromptEncoderReparameterizationType.LSTM:\n\t                lstm_dropout = config.encoder_dropout\n\t                num_layers = config.encoder_num_layers\n\t                # LSTM\n\t                self.lstm_head = torch.nn.LSTM(\n\t                    input_size=self.input_size,\n\t                    hidden_size=self.hidden_size,\n\t                    num_layers=num_layers,\n", "                    dropout=lstm_dropout,\n\t                    bidirectional=True,\n\t                    batch_first=True,\n\t                )\n\t                self.mlp_head = torch.nn.Sequential(\n\t                    torch.nn.Linear(self.hidden_size * 2, self.hidden_size * 2),\n\t                    torch.nn.ReLU(),\n\t                    torch.nn.Linear(self.hidden_size * 2, self.output_size),\n\t                )\n\t            elif self.encoder_type == PromptEncoderReparameterizationType.MLP:\n", "                warnings.warn(\n\t                    f\"for {self.encoder_type}, the `encoder_num_layers` is ignored. Exactly 2 MLP layers are used.\"\n\t                )\n\t                layers = [\n\t                    torch.nn.Linear(self.input_size, self.hidden_size),\n\t                    torch.nn.ReLU(),\n\t                    torch.nn.Linear(self.hidden_size, self.hidden_size),\n\t                    torch.nn.ReLU(),\n\t                    torch.nn.Linear(self.hidden_size, self.output_size),\n\t                ]\n", "                self.mlp_head = torch.nn.Sequential(*layers)\n\t            else:\n\t                raise ValueError(\"Prompt encoder type not recognized. Please use one of MLP (recommended) or LSTM.\")\n\t    def forward(self, indices):\n\t        input_embeds = self.embedding(indices)\n\t        if self.encoder_type == PromptEncoderReparameterizationType.LSTM:\n\t            output_embeds = self.mlp_head(self.lstm_head(input_embeds)[0])\n\t        elif self.encoder_type == PromptEncoderReparameterizationType.MLP:\n\t            output_embeds = self.mlp_head(input_embeds)\n\t        else:\n", "            raise ValueError(\"Prompt encoder type not recognized. Please use one of MLP (recommended) or LSTM.\")\n\t        return output_embeds\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/prefix_tuning.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom dataclasses import dataclass, field\n\timport torch\n\tfrom ..utils import PeftType, PromptLearningConfig\n\t@dataclass\n\tclass PrefixTuningConfig(PromptLearningConfig):\n\t    \"\"\"\n", "    This is the configuration class to store the configuration of a [`PrefixEncoder`].\n\t    Args:\n\t        encoder_hidden_size (`int`): The hidden size of the prompt encoder.\n\t        prefix_projection (`bool`): Whether to project the prefix embeddings.\n\t    \"\"\"\n\t    encoder_hidden_size: int = field(\n\t        default=None,\n\t        metadata={\"help\": \"The hidden size of the encoder\"},\n\t    )\n\t    prefix_projection: bool = field(\n", "        default=False,\n\t        metadata={\"help\": \"Whether to project the prefix tokens\"},\n\t    )\n\t    def __post_init__(self):\n\t        self.peft_type = PeftType.PREFIX_TUNING\n\t# Based on https://github.com/THUDM/P-tuning-v2/blob/main/model/prefix_encoder.py\n\t# with some refactor\n\tclass PrefixEncoder(torch.nn.Module):\n\t    r\"\"\"\n\t    The `torch.nn` model to encode the prefix.\n", "    Args:\n\t        config ([`PrefixTuningConfig`]): The configuration of the prefix encoder.\n\t    Example:\n\t    ```py\n\t    >>> from peft import PrefixEncoder, PrefixTuningConfig\n\t    >>> config = PrefixTuningConfig(\n\t    ...     peft_type=\"PREFIX_TUNING\",\n\t    ...     task_type=\"SEQ_2_SEQ_LM\",\n\t    ...     num_virtual_tokens=20,\n\t    ...     token_dim=768,\n", "    ...     num_transformer_submodules=1,\n\t    ...     num_attention_heads=12,\n\t    ...     num_layers=12,\n\t    ...     encoder_hidden_size=768,\n\t    ... )\n\t    >>> prefix_encoder = PrefixEncoder(config)\n\t    ```\n\t    **Attributes**:\n\t        - **embedding** (`torch.nn.Embedding`) -- The embedding layer of the prefix encoder.\n\t        - **transform** (`torch.nn.Sequential`) -- The two-layer MLP to transform the prefix embeddings if\n", "          `prefix_projection` is `True`.\n\t        - **prefix_projection** (`bool`) -- Whether to project the prefix embeddings.\n\t    Input shape: (`batch_size`, `num_virtual_tokens`)\n\t    Output shape: (`batch_size`, `num_virtual_tokens`, `2*layers*hidden`)\n\t    \"\"\"\n\t    def __init__(self, config):\n\t        super().__init__()\n\t        self.prefix_projection = config.prefix_projection\n\t        token_dim = config.token_dim\n\t        num_layers = config.num_layers\n", "        encoder_hidden_size = config.encoder_hidden_size\n\t        num_virtual_tokens = config.num_virtual_tokens\n\t        if self.prefix_projection and not config.inference_mode:\n\t            # Use a two-layer MLP to encode the prefix\n\t            self.embedding = torch.nn.Embedding(num_virtual_tokens, token_dim)\n\t            self.transform = torch.nn.Sequential(\n\t                torch.nn.Linear(token_dim, encoder_hidden_size),\n\t                torch.nn.Tanh(),\n\t                torch.nn.Linear(encoder_hidden_size, num_layers * 2 * token_dim),\n\t            )\n", "        else:\n\t            self.embedding = torch.nn.Embedding(num_virtual_tokens, num_layers * 2 * token_dim)\n\t    def forward(self, prefix: torch.Tensor):\n\t        if self.prefix_projection:\n\t            prefix_tokens = self.embedding(prefix)\n\t            past_key_values = self.transform(prefix_tokens)\n\t        else:\n\t            past_key_values = self.embedding(prefix)\n\t        return past_key_values\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/__init__.py", "chunked_list": ["# flake8: noqa\n\t# There's no way to ignore \"F401 '...' imported but unused\" warnings in this\n\t# module, but to preserve other warnings. So, don't check this module at all\n\t# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n", "#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\tfrom .adaption_prompt import AdaptionPromptConfig, AdaptionPromptModel\n\tfrom .lora import LoraConfig, LoraModel\n\tfrom .adalora import AdaLoraConfig, AdaLoraModel\n", "from .p_tuning import PromptEncoder, PromptEncoderConfig, PromptEncoderReparameterizationType\n\tfrom .prefix_tuning import PrefixEncoder, PrefixTuningConfig\n\tfrom .prompt_tuning import PromptEmbedding, PromptTuningConfig, PromptTuningInit\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/lora.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\timport re\n\timport warnings\n\tfrom dataclasses import asdict, dataclass, field\n\tfrom enum import Enum\n\tfrom typing import List, Optional, Union\n", "import torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom transformers.pytorch_utils import Conv1D\n\tfrom ..import_utils import is_bnb_available\n\tfrom ..utils import (\n\t    TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING,\n\t    ModulesToSaveWrapper,\n\t    PeftConfig,\n\t    PeftType,\n", "    _freeze_adapter,\n\t    _get_submodules,\n\t    transpose,\n\t)\n\tif is_bnb_available():\n\t    import bitsandbytes as bnb\n\t@dataclass\n\tclass LoraConfig(PeftConfig):\n\t    \"\"\"\n\t    This is the configuration class to store the configuration of a [`LoraModel`].\n", "    Args:\n\t        r (`int`): Lora attention dimension.\n\t        target_modules (`Union[List[str],str]`): The names of the modules to apply Lora to.\n\t        lora_alpha (`float`): The alpha parameter for Lora scaling.\n\t        lora_dropout (`float`): The dropout probability for Lora layers.\n\t        fan_in_fan_out (`bool`): Set this to True if the layer to replace stores weight like (fan_in, fan_out).\n\t        For example, gpt-2 uses `Conv1D` which stores weights like (fan_in, fan_out) and hence this should be set to `True`.:\n\t        bias (`str`): Bias type for Lora. Can be 'none', 'all' or 'lora_only'\n\t        modules_to_save (`List[str]`):List of modules apart from LoRA layers to be set as trainable\n\t            and saved in the final checkpoint.\n", "    \"\"\"\n\t    r: int = field(default=8, metadata={\"help\": \"Lora attention dimension\"})\n\t    target_modules: Optional[Union[List[str], str]] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": \"List of module names or regex expression of the module names to replace with Lora.\"\n\t            \"For example, ['q', 'v'] or '.*decoder.*(SelfAttention|EncDecAttention).*(q|v)$' \"\n\t        },\n\t    )\n\t    lora_alpha: int = field(default=None, metadata={\"help\": \"Lora alpha\"})\n", "    lora_dropout: float = field(default=None, metadata={\"help\": \"Lora dropout\"})\n\t    fan_in_fan_out: bool = field(\n\t        default=False,\n\t        metadata={\"help\": \"Set this to True if the layer to replace stores weight like (fan_in, fan_out)\"},\n\t    )\n\t    bias: str = field(default=\"none\", metadata={\"help\": \"Bias type for Lora. Can be 'none', 'all' or 'lora_only'\"})\n\t    modules_to_save: Optional[List[str]] = field(\n\t        default=None,\n\t        metadata={\n\t            \"help\": \"List of modules apart from LoRA layers to be set as trainable and saved in the final checkpoint. \"\n", "            \"For example, in Sequence Classification or Token Classification tasks, \"\n\t            \"the final layer `classifier/score` are randomly initialized and as such need to be trainable and saved.\"\n\t        },\n\t    )\n\t    init_lora_weights: bool = field(\n\t        default=True,\n\t        metadata={\"help\": \"Whether to initialize the weights of the Lora layers.\"},\n\t    )\n\t    def __post_init__(self):\n\t        self.peft_type = PeftType.LORA\n", "class LoraModel(torch.nn.Module):\n\t    \"\"\"\n\t    Creates Low Rank Adapter (Lora) model from a pretrained transformers model.\n\t    Args:\n\t        model ([`~transformers.PreTrainedModel`]): The model to be adapted.\n\t        config ([`LoraConfig`]): The configuration of the Lora model.\n\t    Returns:\n\t        `torch.nn.Module`: The Lora model.\n\t    Example:\n\t        ```py\n", "        >>> from transformers import AutoModelForSeq2SeqLM, LoraConfig\n\t        >>> from peft import LoraModel, LoraConfig\n\t        >>> config = LoraConfig(\n\t        ...     peft_type=\"LORA\",\n\t        ...     task_type=\"SEQ_2_SEQ_LM\",\n\t        ...     r=8,\n\t        ...     lora_alpha=32,\n\t        ...     target_modules=[\"q\", \"v\"],\n\t        ...     lora_dropout=0.01,\n\t        ... )\n", "        >>> model = AutoModelForSeq2SeqLM.from_pretrained(\"t5-base\")\n\t        >>> lora_model = LoraModel(config, model)\n\t        ```\n\t    **Attributes**:\n\t        - **model** ([`~transformers.PreTrainedModel`]) -- The model to be adapted.\n\t        - **peft_config** ([`LoraConfig`]): The configuration of the Lora model.\n\t    \"\"\"\n\t    def __init__(self, model, config, adapter_name):\n\t        super().__init__()\n\t        self.model = model\n", "        self.forward = self.model.forward\n\t        self.peft_config = config\n\t        self.add_adapter(adapter_name, self.peft_config[adapter_name])\n\t    def add_adapter(self, adapter_name, config=None):\n\t        if config is not None:\n\t            model_config = self.model.config.to_dict() if hasattr(self.model.config, \"to_dict\") else self.model.config\n\t            config = self._prepare_lora_config(config, model_config)\n\t            self.peft_config[adapter_name] = config\n\t        self._find_and_replace(adapter_name)\n\t        if len(self.peft_config) > 1 and self.peft_config[adapter_name].bias != \"none\":\n", "            raise ValueError(\n\t                \"LoraModel supports only 1 adapter with bias. When using multiple adapters, set bias to 'none' for all adapters.\"\n\t            )\n\t        mark_only_lora_as_trainable(self.model, self.peft_config[adapter_name].bias)\n\t        if self.peft_config[adapter_name].inference_mode:\n\t            _freeze_adapter(self.model, adapter_name)\n\t    def _find_and_replace(self, adapter_name):\n\t        lora_config = self.peft_config[adapter_name]\n\t        loaded_in_8bit = getattr(self.model, \"is_loaded_in_8bit\", False)\n\t        if loaded_in_8bit and not is_bnb_available():\n", "            raise ImportError(\n\t                \"To use Lora with 8-bit quantization, please install the `bitsandbytes` package. \"\n\t                \"You can install it with `pip install bitsandbytes`.\"\n\t            )\n\t        is_target_modules_in_base_model = False\n\t        kwargs = {\n\t            \"r\": lora_config.r,\n\t            \"lora_alpha\": lora_config.lora_alpha,\n\t            \"lora_dropout\": lora_config.lora_dropout,\n\t            \"fan_in_fan_out\": lora_config.fan_in_fan_out,\n", "            \"init_lora_weights\": lora_config.init_lora_weights,\n\t        }\n\t        key_list = [key for key, _ in self.model.named_modules()]\n\t        for key in key_list:\n\t            if isinstance(lora_config.target_modules, str):\n\t                target_module_found = re.fullmatch(lora_config.target_modules, key)\n\t            else:\n\t                target_module_found = any(key.endswith(target_key) for target_key in lora_config.target_modules)\n\t            if target_module_found:\n\t                if not is_target_modules_in_base_model:\n", "                    is_target_modules_in_base_model = True\n\t                parent, target, target_name = _get_submodules(self.model, key)\n\t                bias = target.bias is not None\n\t                if isinstance(target, LoraLayer):\n\t                    target.update_layer(\n\t                        adapter_name,\n\t                        lora_config.r,\n\t                        lora_config.lora_alpha,\n\t                        lora_config.lora_dropout,\n\t                        lora_config.init_lora_weights,\n", "                    )\n\t                else:\n\t                    if loaded_in_8bit and isinstance(target, bnb.nn.Linear8bitLt):\n\t                        eightbit_kwargs = kwargs.copy()\n\t                        eightbit_kwargs.update(\n\t                            {\n\t                                \"has_fp16_weights\": target.state.has_fp16_weights,\n\t                                \"memory_efficient_backward\": target.state.memory_efficient_backward,\n\t                                \"threshold\": target.state.threshold,\n\t                                \"index\": target.index,\n", "                            }\n\t                        )\n\t                        new_module = Linear8bitLt(\n\t                            adapter_name, target.in_features, target.out_features, bias=bias, **eightbit_kwargs\n\t                        )\n\t                    else:\n\t                        if isinstance(target, torch.nn.Linear):\n\t                            in_features, out_features = target.in_features, target.out_features\n\t                            if kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n", "                                    \"fan_in_fan_out is set to True but the target module is `torch.nn.Linear`. \"\n\t                                    \"Setting fan_in_fan_out to False.\"\n\t                                )\n\t                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = False\n\t                        elif isinstance(target, Conv1D):\n\t                            in_features, out_features = (\n\t                                target.weight.ds_shape if hasattr(target.weight, \"ds_shape\") else target.weight.shape\n\t                            )\n\t                            if not kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n", "                                    \"fan_in_fan_out is set to False but the target module is `Conv1D`. \"\n\t                                    \"Setting fan_in_fan_out to True.\"\n\t                                )\n\t                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = True\n\t                        else:\n\t                            raise ValueError(\n\t                                f\"Target module {target} is not supported. \"\n\t                                f\"Currently, only `torch.nn.Linear` and `Conv1D` are supported.\"\n\t                            )\n\t                        new_module = Linear(adapter_name, in_features, out_features, bias=bias, **kwargs)\n", "                    self._replace_module(parent, target_name, new_module, target)\n\t        if not is_target_modules_in_base_model:\n\t            raise ValueError(\n\t                f\"Target modules {lora_config.target_modules} not found in the base model. \"\n\t                f\"Please check the target modules and try again.\"\n\t            )\n\t    def _replace_module(self, parent_module, child_name, new_module, old_module):\n\t        setattr(parent_module, child_name, new_module)\n\t        new_module.weight = old_module.weight\n\t        if old_module.bias is not None:\n", "            new_module.bias = old_module.bias\n\t        if getattr(old_module, \"state\", None) is not None:\n\t            new_module.state = old_module.state\n\t            new_module.to(old_module.weight.device)\n\t        # dispatch to correct device\n\t        for name, module in new_module.named_modules():\n\t            if \"lora_\" in name:\n\t                module.to(old_module.weight.device)\n\t    def __getattr__(self, name: str):\n\t        \"\"\"Forward missing attributes to the wrapped module.\"\"\"\n", "        try:\n\t            return super().__getattr__(name)  # defer to nn.Module's logic\n\t        except AttributeError:\n\t            return getattr(self.model, name)\n\t    def get_peft_config_as_dict(self, inference: bool = False):\n\t        config_dict = {}\n\t        for key, value in self.peft_config.items():\n\t            config = {k: v.value if isinstance(v, Enum) else v for k, v in asdict(value).items()}\n\t            if inference:\n\t                config[\"inference_mode\"] = True\n", "        config_dict[key] = config\n\t        return config\n\t    def _set_adapter_layers(self, enabled=True):\n\t        for module in self.model.modules():\n\t            if isinstance(module, LoraLayer):\n\t                module.disable_adapters = False if enabled else True\n\t    def enable_adapter_layers(self):\n\t        self._set_adapter_layers(enabled=True)\n\t    def disable_adapter_layers(self):\n\t        self._set_adapter_layers(enabled=False)\n", "    def set_adapter(self, adapter_name):\n\t        for module in self.model.modules():\n\t            if isinstance(module, LoraLayer):\n\t                if module.merged:\n\t                    warnings.warn(\"Adapter cannot be set when the model is merged. Unmerging the model first.\")\n\t                    module.unmerge()\n\t                module.active_adapter = adapter_name\n\t    def merge_adapter(self):\n\t        for module in self.model.modules():\n\t            if isinstance(module, LoraLayer):\n", "                module.merge()\n\t    def unmerge_adapter(self):\n\t        for module in self.model.modules():\n\t            if isinstance(module, LoraLayer):\n\t                module.unmerge()\n\t    @staticmethod\n\t    def _prepare_lora_config(peft_config, model_config):\n\t        if peft_config.target_modules is None:\n\t            if model_config[\"model_type\"] not in TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING:\n\t                raise ValueError(\"Please specify `target_modules` in `peft_config`\")\n", "            peft_config.target_modules = TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING[model_config[\"model_type\"]]\n\t        if peft_config.inference_mode:\n\t            peft_config.merge_weights = True\n\t        return peft_config\n\t    def merge_and_unload(self):\n\t        r\"\"\"\n\t        This method merges the LoRa layers into the base model. This is needed if someone wants to use the base model\n\t        as a standalone model.\n\t        \"\"\"\n\t        if getattr(self.config, \"model_type\", None) == \"gpt2\":\n", "            raise ValueError(\"GPT2 models are not supported for merging LORA layers\")\n\t        if getattr(self.model, \"is_loaded_in_8bit\", False):\n\t            raise ValueError(\"Cannot merge LORA layers when the model is loaded in 8-bit mode\")\n\t        key_list = [key for key, _ in self.model.named_modules() if \"lora\" not in key]\n\t        for key in key_list:\n\t            try:\n\t                parent, target, target_name = _get_submodules(self.model, key)\n\t            except AttributeError:\n\t                continue\n\t            if isinstance(target, LoraLayer):\n", "                bias = target.bias is not None\n\t                new_module = torch.nn.Linear(target.in_features, target.out_features, bias=bias)\n\t                target.merge()\n\t                self._replace_module(parent, target_name, new_module, target)\n\t            # save any additional trainable modules part of `modules_to_save`\n\t            if isinstance(target, ModulesToSaveWrapper):\n\t                setattr(parent, target_name, target.modules_to_save[target.active_adapter])\n\t        return self.model\n\t    def add_weighted_adapter(self, adapters, weights, adapter_name):\n\t        if len({self.peft_config[adapter].r for adapter in adapters}) != 1:\n", "            raise ValueError(\"All adapters must have the same r value\")\n\t        self.peft_config[adapter_name] = self.peft_config[adapters[0]]\n\t        self.peft_config[adapter_name].lora_alpha = self.peft_config[adapters[0]].r\n\t        self._find_and_replace(adapter_name)\n\t        mark_only_lora_as_trainable(self.model, self.peft_config[adapter_name].bias)\n\t        _freeze_adapter(self.model, adapter_name)\n\t        key_list = [key for key, _ in self.model.named_modules() if \"lora\" not in key]\n\t        for key in key_list:\n\t            _, target, _ = _get_submodules(self.model, key)\n\t            if isinstance(target, LoraLayer):\n", "                target.lora_A[adapter_name].weight.data = target.lora_A[adapter_name].weight.data * 0.0\n\t                target.lora_B[adapter_name].weight.data = target.lora_B[adapter_name].weight.data * 0.0\n\t                for adapter, weight in zip(adapters, weights):\n\t                    if adapter not in target.lora_A:\n\t                        continue\n\t                    target.lora_A[adapter_name].weight.data += (\n\t                        target.lora_A[adapter].weight.data * weight * target.scaling[adapter]\n\t                    )\n\t                    target.lora_B[adapter_name].weight.data += target.lora_B[adapter].weight.data * weight\n\t# Below code is based on https://github.com/microsoft/LoRA/blob/main/loralib/layers.py\n", "# and modified to work with PyTorch FSDP\n\t#  ------------------------------------------------------------------------------------------\n\t#  Copyright (c) Microsoft Corporation. All rights reserved.\n\t#  Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.\n\t#  ------------------------------------------------------------------------------------------\n\t# had to adapt it for `lora_only` to work\n\tdef mark_only_lora_as_trainable(model: nn.Module, bias: str = \"none\") -> None:\n\t    for n, p in model.named_parameters():\n\t        if \"lora_\" not in n:\n\t            p.requires_grad = False\n", "    if bias == \"none\":\n\t        return\n\t    elif bias == \"all\":\n\t        for n, p in model.named_parameters():\n\t            if \"bias\" in n:\n\t                p.requires_grad = True\n\t    elif bias == \"lora_only\":\n\t        for m in model.modules():\n\t            if isinstance(m, LoraLayer) and hasattr(m, \"bias\") and m.bias is not None:\n\t                m.bias.requires_grad = True\n", "    else:\n\t        raise NotImplementedError\n\tclass LoraLayer:\n\t    def __init__(\n\t        self,\n\t        in_features: int,\n\t        out_features: int,\n\t    ):\n\t        self.r = {}\n\t        self.lora_alpha = {}\n", "        self.scaling = {}\n\t        self.lora_dropout = nn.ModuleDict({})\n\t        self.lora_A = nn.ModuleDict({})\n\t        self.lora_B = nn.ModuleDict({})\n\t        # Mark the weight as unmerged\n\t        self.merged = False\n\t        self.disable_adapters = False\n\t        self.in_features = in_features\n\t        self.out_features = out_features\n\t    def update_layer(self, adapter_name, r, lora_alpha, lora_dropout, init_lora_weights):\n", "        self.r[adapter_name] = r\n\t        self.lora_alpha[adapter_name] = lora_alpha\n\t        if lora_dropout > 0.0:\n\t            lora_dropout_layer = nn.Dropout(p=lora_dropout)\n\t        else:\n\t            lora_dropout_layer = nn.Identity()\n\t        self.lora_dropout.update(nn.ModuleDict({adapter_name: lora_dropout_layer}))\n\t        # Actual trainable parameters\n\t        if r > 0:\n\t            self.lora_A.update(nn.ModuleDict({adapter_name: nn.Linear(self.in_features, r, bias=False)}))\n", "            self.lora_B.update(nn.ModuleDict({adapter_name: nn.Linear(r, self.out_features, bias=False)}))\n\t            self.scaling[adapter_name] = lora_alpha / r\n\t        if init_lora_weights:\n\t            self.reset_lora_parameters(adapter_name)\n\t        self.to(self.weight.device)\n\t    def reset_lora_parameters(self, adapter_name):\n\t        if adapter_name in self.lora_A.keys():\n\t            # initialize A the same way as the default for nn.Linear and B to zero\n\t            nn.init.kaiming_uniform_(self.lora_A[adapter_name].weight, a=math.sqrt(5))\n\t            nn.init.zeros_(self.lora_B[adapter_name].weight)\n", "class Linear(nn.Linear, LoraLayer):\n\t    # Lora implemented in a dense layer\n\t    def __init__(\n\t        self,\n\t        adapter_name: str,\n\t        in_features: int,\n\t        out_features: int,\n\t        r: int = 0,\n\t        lora_alpha: int = 1,\n\t        lora_dropout: float = 0.0,\n", "        fan_in_fan_out: bool = False,  # Set this to True if the layer to replace stores weight like (fan_in, fan_out)\n\t        **kwargs,\n\t    ):\n\t        init_lora_weights = kwargs.pop(\"init_lora_weights\", True)\n\t        nn.Linear.__init__(self, in_features, out_features, **kwargs)\n\t        LoraLayer.__init__(self, in_features=in_features, out_features=out_features)\n\t        # Freezing the pre-trained weight matrix\n\t        self.weight.requires_grad = False\n\t        self.fan_in_fan_out = fan_in_fan_out\n\t        if fan_in_fan_out:\n", "            self.weight.data = self.weight.data.T\n\t        nn.Linear.reset_parameters(self)\n\t        self.update_layer(adapter_name, r, lora_alpha, lora_dropout, init_lora_weights)\n\t        self.active_adapter = adapter_name\n\t    def merge(self):\n\t        if self.active_adapter not in self.lora_A.keys():\n\t            return\n\t        if self.merged:\n\t            warnings.warn(\"Already merged. Nothing to do.\")\n\t            return\n", "        if self.r[self.active_adapter] > 0:\n\t            self.weight.data += (\n\t                transpose(\n\t                    self.lora_B[self.active_adapter].weight @ self.lora_A[self.active_adapter].weight,\n\t                    self.fan_in_fan_out,\n\t                )\n\t                * self.scaling[self.active_adapter]\n\t            )\n\t            self.merged = True\n\t    def unmerge(self):\n", "        if self.active_adapter not in self.lora_A.keys():\n\t            return\n\t        if not self.merged:\n\t            warnings.warn(\"Already unmerged. Nothing to do.\")\n\t            return\n\t        if self.r[self.active_adapter] > 0:\n\t            self.weight.data -= (\n\t                transpose(\n\t                    self.lora_B[self.active_adapter].weight @ self.lora_A[self.active_adapter].weight,\n\t                    self.fan_in_fan_out,\n", "                )\n\t                * self.scaling[self.active_adapter]\n\t            )\n\t            self.merged = False\n\t    def forward(self, x: torch.Tensor):\n\t        previous_dtype = x.dtype\n\t        if self.active_adapter not in self.lora_A.keys():\n\t            return F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t        if self.disable_adapters:\n\t            if self.r[self.active_adapter] > 0 and self.merged:\n", "                self.unmerge()\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t        elif self.r[self.active_adapter] > 0 and not self.merged:\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t            x = x.to(self.lora_A[self.active_adapter].weight.dtype)\n\t            result += (\n\t                self.lora_B[self.active_adapter](\n\t                    self.lora_A[self.active_adapter](self.lora_dropout[self.active_adapter](x))\n\t                )\n\t                * self.scaling[self.active_adapter]\n", "            )\n\t        else:\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t        result = result.to(previous_dtype)\n\t        return result\n\tif is_bnb_available():\n\t    class Linear8bitLt(bnb.nn.Linear8bitLt, LoraLayer):\n\t        # Lora implemented in a dense layer\n\t        def __init__(\n\t            self,\n", "            adapter_name,\n\t            in_features,\n\t            out_features,\n\t            r: int = 0,\n\t            lora_alpha: int = 1,\n\t            lora_dropout: float = 0.0,\n\t            **kwargs,\n\t        ):\n\t            bnb.nn.Linear8bitLt.__init__(\n\t                self,\n", "                in_features,\n\t                out_features,\n\t                bias=kwargs.get(\"bias\", True),\n\t                has_fp16_weights=kwargs.get(\"has_fp16_weights\", True),\n\t                memory_efficient_backward=kwargs.get(\"memory_efficient_backward\", False),\n\t                threshold=kwargs.get(\"threshold\", 0.0),\n\t                index=kwargs.get(\"index\", None),\n\t            )\n\t            LoraLayer.__init__(self, in_features=in_features, out_features=out_features)\n\t            # Freezing the pre-trained weight matrix\n", "            self.weight.requires_grad = False\n\t            init_lora_weights = kwargs.pop(\"init_lora_weights\", True)\n\t            self.update_layer(adapter_name, r, lora_alpha, lora_dropout, init_lora_weights)\n\t            self.active_adapter = adapter_name\n\t        def forward(self, x: torch.Tensor):\n\t            result = super().forward(x)\n\t            if self.disable_adapters or self.active_adapter not in self.lora_A.keys():\n\t                return result\n\t            elif self.r[self.active_adapter] > 0:\n\t                if not torch.is_autocast_enabled():\n", "                    expected_dtype = result.dtype\n\t                    if x.dtype != torch.float32:\n\t                        x = x.float()\n\t                    output = (\n\t                        self.lora_B[self.active_adapter](\n\t                            self.lora_A[self.active_adapter](self.lora_dropout[self.active_adapter](x))\n\t                        ).to(expected_dtype)\n\t                        * self.scaling[self.active_adapter]\n\t                    )\n\t                else:\n", "                    output = (\n\t                        self.lora_B[self.active_adapter](\n\t                            self.lora_A[self.active_adapter](self.lora_dropout[self.active_adapter](x))\n\t                        )\n\t                        * self.scaling[self.active_adapter]\n\t                    )\n\t                result += output\n\t            return result\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/adalora.py", "chunked_list": ["import importlib\n\timport re\n\timport warnings\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Optional\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom transformers.pytorch_utils import Conv1D\n\tfrom ..utils import (\n", "    TRANSFORMERS_MODELS_TO_ADALORA_TARGET_MODULES_MAPPING,\n\t    PeftType,\n\t    _freeze_adapter,\n\t    _get_submodules,\n\t    transpose,\n\t)\n\tfrom .lora import (\n\t    LoraConfig,\n\t    LoraLayer,\n\t    LoraModel,\n", "    mark_only_lora_as_trainable,\n\t)\n\tdef is_bnb_available():\n\t    return importlib.util.find_spec(\"bitsandbytes\") is not None\n\tif is_bnb_available():\n\t    import bitsandbytes as bnb\n\t@dataclass\n\tclass AdaLoraConfig(LoraConfig):\n\t    \"\"\"\n\t    This is the configuration class to store the configuration of a [`~peft.AdaLora`].\n", "    Args:\n\t        target_r (`int`): The target average rank of incremental matrix.\n\t        init_r (`int`): The initial rank for each incremental matrix.\n\t        tinit (`int`): The steps of initial fine-tuning warmup.\n\t        tfinal (`int`): The step of final fine-tuning.\n\t        deltaT (`int`): The time internval between two budget allocations.\n\t        beta1 (`float`): The hyperparameter of EMA for sensitivity smoothing.\n\t        beta2 (`float`): The hyperparameter of EMA for undertainty quantification.\n\t        orth_reg_weight (`float`): The coefficient of orthogonal regularization.\n\t        total_step (`int`): The total training steps that should be specified before training.\n", "        rank_pattern (`list`): The allocated rank for each weight matrix by RankAllocator.\n\t    \"\"\"\n\t    target_r: int = field(default=8, metadata={\"help\": \"Target Lora matrix dimension.\"})\n\t    init_r: int = field(default=12, metadata={\"help\": \"Intial Lora matrix dimension.\"})\n\t    tinit: int = field(default=0, metadata={\"help\": \"The steps of initial warmup.\"})\n\t    tfinal: int = field(default=0, metadata={\"help\": \"The steps of final warmup.\"})\n\t    deltaT: int = field(default=1, metadata={\"help\": \"Step interval of rank allocation.\"})\n\t    beta1: float = field(default=0.85, metadata={\"help\": \"Hyperparameter of EMA.\"})\n\t    beta2: float = field(default=0.85, metadata={\"help\": \"Hyperparameter of EMA.\"})\n\t    orth_reg_weight: float = field(default=0.5, metadata={\"help\": \"The orthogonal regularization coefficient.\"})\n", "    total_step: Optional[int] = field(default=None, metadata={\"help\": \"The total training steps.\"})\n\t    rank_pattern: Optional[dict] = field(default=None, metadata={\"help\": \"The saved rank pattern.\"})\n\t    def __post_init__(self):\n\t        self.peft_type = PeftType.ADALORA\n\tclass AdaLoraModel(LoraModel):\n\t    \"\"\"\n\t    Creates AdaLoRA (Adaptive LoRA) model from a pretrained transformers model. Paper:\n\t    https://openreview.net/pdf?id=lq62uWRJjiY\n\t    Args:\n\t        model ([`transformers.PreTrainedModel`]): The model to be adapted.\n", "        config ([`AdaLoraConfig`]): The configuration of the AdaLora model.\n\t    Returns:\n\t        `torch.nn.Module`: The AdaLora model.\n\t    Example::\n\t        >>> from transformers import AutoModelForSeq2SeqLM, LoraConfig >>> from peft import AdaLoraModel, AdaLoraConfig\n\t        >>> config = AdaLoraConfig(\n\t                peft_type=\"ADALORA\", task_type=\"SEQ_2_SEQ_LM\", r=8, lora_alpha=32, target_modules=[\"q\", \"v\"],\n\t                lora_dropout=0.01,\n\t            )\n\t        >>> model = AutoModelForSeq2SeqLM.from_pretrained(\"t5-base\") >>> model = AdaLoraModel(config, model)\n", "    **Attributes**:\n\t        - **model** ([`transformers.PreTrainedModel`]) -- The model to be adapted.\n\t        - **peft_config** ([`AdaLoraConfig`]): The configuration of the AdaLora model.\n\t    \"\"\"\n\t    def __init__(self, model, config, adapter_name):\n\t        nn.Module.__init__(self)\n\t        self.model = model\n\t        self.peft_config = config\n\t        self.add_adapter(adapter_name, self.peft_config[adapter_name])\n\t    def add_adapter(self, adapter_name, config=None):\n", "        if config is not None:\n\t            model_config = self.model.config.to_dict() if hasattr(self.model.config, \"to_dict\") else self.model.config\n\t            config = self._prepare_adalora_config(config, model_config)\n\t            self.peft_config[adapter_name] = config\n\t        self._find_and_replace(adapter_name)\n\t        if len(self.peft_config) > 1 and self.peft_config[adapter_name].bias != \"none\":\n\t            raise ValueError(\n\t                \"AdaLoraModel supports only 1 adapter with bias. When using multiple adapters, set bias to 'none' for all adapters.\"\n\t            )\n\t        traininable_mode_counter = 0\n", "        for config in self.peft_config.values():\n\t            if not config.inference_mode:\n\t                traininable_mode_counter += 1\n\t        if traininable_mode_counter > 1:\n\t            raise ValueError(\n\t                \"AdaLoraModel supports only 1 trainable adapter. \"\n\t                \"When using multiple adapters, set inference_mode to True for all adapters except the one you want to train.\"\n\t            )\n\t        mark_only_lora_as_trainable(self.model, self.peft_config[adapter_name].bias)\n\t        if self.peft_config[adapter_name].inference_mode:\n", "            _freeze_adapter(self.model, adapter_name)\n\t        else:\n\t            self.trainable_adapter_name = adapter_name\n\t            self.rankallocator = RankAllocator(self.model, self.peft_config[adapter_name], self.trainable_adapter_name)\n\t    def _find_and_replace(self, adapter_name):\n\t        lora_config = self.peft_config[adapter_name]\n\t        loaded_in_8bit = getattr(self.model, \"is_loaded_in_8bit\", False)\n\t        if loaded_in_8bit and not is_bnb_available():\n\t            raise ImportError(\n\t                \"To use Lora with 8-bit quantization, please install the `bitsandbytes` package. \"\n", "                \"You can install it with `pip install bitsandbytes`.\"\n\t            )\n\t        is_target_modules_in_base_model = False\n\t        kwargs = {\n\t            \"r\": lora_config.init_r,\n\t            \"lora_alpha\": lora_config.lora_alpha,\n\t            \"lora_dropout\": lora_config.lora_dropout,\n\t            \"fan_in_fan_out\": lora_config.fan_in_fan_out,\n\t            \"init_lora_weights\": lora_config.init_lora_weights,\n\t        }\n", "        key_list = [key for key, _ in self.model.named_modules()]\n\t        for key in key_list:\n\t            if isinstance(lora_config.target_modules, str):\n\t                target_module_found = re.fullmatch(lora_config.target_modules, key)\n\t            else:\n\t                target_module_found = any(key.endswith(target_key) for target_key in lora_config.target_modules)\n\t            if target_module_found:\n\t                if not is_target_modules_in_base_model:\n\t                    is_target_modules_in_base_model = True\n\t                parent, target, target_name = _get_submodules(self.model, key)\n", "                bias = target.bias is not None\n\t                if isinstance(target, LoraLayer):\n\t                    target.update_layer(\n\t                        adapter_name,\n\t                        lora_config.init_r,\n\t                        lora_config.lora_alpha,\n\t                        lora_config.lora_dropout,\n\t                        lora_config.init_lora_weights,\n\t                    )\n\t                else:\n", "                    if loaded_in_8bit and isinstance(target, bnb.nn.Linear8bitLt):\n\t                        kwargs.update(\n\t                            {\n\t                                \"has_fp16_weights\": target.state.has_fp16_weights,\n\t                                \"memory_efficient_backward\": target.state.memory_efficient_backward,\n\t                                \"threshold\": target.state.threshold,\n\t                                \"index\": target.index,\n\t                            }\n\t                        )\n\t                        new_module = SVDLinear8bitLt(\n", "                            adapter_name, target.in_features, target.out_features, bias=bias, **kwargs\n\t                        )\n\t                    else:\n\t                        if isinstance(target, torch.nn.Linear):\n\t                            in_features, out_features = target.in_features, target.out_features\n\t                            if kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n\t                                    \"fan_in_fan_out is set to True but the target module is `torch.nn.Linear`. \"\n\t                                    \"Setting fan_in_fan_out to False.\"\n\t                                )\n", "                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = False\n\t                        elif isinstance(target, Conv1D):\n\t                            in_features, out_features = (\n\t                                target.weight.ds_shape if hasattr(target.weight, \"ds_shape\") else target.weight.shape\n\t                            )\n\t                            if not kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n\t                                    \"fan_in_fan_out is set to False but the target module is `Conv1D`. \"\n\t                                    \"Setting fan_in_fan_out to True.\"\n\t                                )\n", "                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = True\n\t                        else:\n\t                            raise ValueError(\n\t                                f\"Target module {target} is not supported. \"\n\t                                f\"Currently, only `torch.nn.Linear` and `Conv1D` are supported.\"\n\t                            )\n\t                        new_module = SVDLinear(adapter_name, in_features, out_features, bias=bias, **kwargs)\n\t                    self._replace_module(parent, target_name, new_module, target)\n\t        if not is_target_modules_in_base_model:\n\t            raise ValueError(\n", "                f\"Target modules {lora_config.target_modules} not found in the base model. \"\n\t                f\"Please check the target modules and try again.\"\n\t            )\n\t    def __getattr__(self, name: str):\n\t        \"\"\"Forward missing attributes to the wrapped module.\"\"\"\n\t        try:\n\t            return super().__getattr__(name)  # defer to nn.Module's logic\n\t        except AttributeError:\n\t            return getattr(self.model, name)\n\t    def forward(self, *args, **kwargs):\n", "        outputs = self.model.forward(*args, **kwargs)\n\t        # Calculate the orthogonal regularization\n\t        orth_reg_weight = self.peft_config[self.trainable_adapter_name].orth_reg_weight\n\t        assert orth_reg_weight > 0\n\t        if hasattr(outputs, \"loss\"):\n\t            regu_loss = 0\n\t            num_param = 0\n\t            for n, p in self.model.named_parameters():\n\t                if (\"lora_A\" in n or \"lora_B\" in n) and self.trainable_adapter_name in n:\n\t                    para_cov = p @ p.T if \"lora_A\" in n else p.T @ p\n", "                    I = torch.eye(*para_cov.size(), out=torch.empty_like(para_cov))\n\t                    I.requires_grad = False\n\t                    num_param += 1\n\t                    regu_loss += torch.norm(para_cov - I, p=\"fro\")\n\t            regu_loss = regu_loss / num_param\n\t            outputs.loss += orth_reg_weight * regu_loss\n\t        return outputs\n\t    def resize_modules_by_rank_pattern(self, rank_pattern, adapter_name):\n\t        lora_config = self.peft_config[adapter_name]\n\t        for name, rank_idx in rank_pattern.items():\n", "            if isinstance(rank_idx, list):\n\t                rank = sum(rank_idx)\n\t            elif isinstance(rank_idx, torch.Tensor):\n\t                rank_idx = rank_idx.view(-1)\n\t                rank = rank_idx.sum().item()\n\t            else:\n\t                raise ValueError(\"Unexcepted type of rank_idx\")\n\t            key = \".\".join(name.split(\".\")[0:-2]) if adapter_name in name else \".\".join(name.split(\".\")[0:-1])\n\t            _, target, _ = _get_submodules(self.model, key)\n\t            lora_E_weights = target.lora_E[adapter_name][rank_idx]\n", "            lora_A_weights = target.lora_A[adapter_name][rank_idx]\n\t            lora_B_weights = target.lora_B[adapter_name][:, rank_idx]\n\t            ranknum = target.ranknum[adapter_name]\n\t            target.update_layer(\n\t                adapter_name,\n\t                rank,\n\t                lora_config.lora_alpha,\n\t                lora_config.lora_dropout,\n\t                lora_config.init_lora_weights,\n\t            )\n", "            with torch.no_grad():\n\t                if rank > 0:\n\t                    target.lora_E[adapter_name].copy_(lora_E_weights)\n\t                    target.lora_A[adapter_name].copy_(lora_A_weights)\n\t                    target.lora_B[adapter_name].copy_(lora_B_weights)\n\t                    # The scaling is exactly as the previous\n\t                    target.ranknum[adapter_name].copy_(ranknum)\n\t    def resize_state_dict_by_rank_pattern(self, rank_pattern, state_dict, adapter_name):\n\t        for name, rank_idx in rank_pattern.items():\n\t            rank = sum(rank_idx)\n", "            prefix = \".\".join(name.split(\".\")[0:-2]) if adapter_name in name else \".\".join(name.split(\".\")[0:-1])\n\t            for layer in [\"lora_E\", \"lora_A\", \"lora_B\"]:\n\t                key = f\"base_model.model.{prefix}.{layer}.{adapter_name}\"\n\t                if layer != \"lora_B\":\n\t                    state_dict[key] = (\n\t                        state_dict[key][rank_idx] if rank != state_dict[key].shape[0] else state_dict[key]\n\t                    )\n\t                else:\n\t                    state_dict[key] = (\n\t                        state_dict[key][:, rank_idx] if rank != state_dict[key].shape[1] else state_dict[key]\n", "                    )\n\t        return state_dict\n\t    def update_and_allocate(self, global_step):\n\t        lora_config = self.peft_config[self.trainable_adapter_name]\n\t        # Update the importance score and allocate the budget\n\t        if global_step < lora_config.total_step - lora_config.tfinal:\n\t            _, rank_pattern = self.rankallocator.update_and_allocate(self.model, global_step)\n\t            if rank_pattern:\n\t                lora_config.rank_pattern = rank_pattern\n\t        # Finalize the budget allocation\n", "        elif global_step == lora_config.total_step - lora_config.tfinal:\n\t            _, rank_pattern = self.rankallocator.update_and_allocate(self.model, global_step, force_mask=True)\n\t            # for some reason, this freezes the trainable parameters and nothing gets updates\n\t            # self.resize_modules_by_rank_pattern(rank_pattern, self.trainable_adapter_name)\n\t            lora_config.rank_pattern = rank_pattern\n\t            self.rankallocator.reset_ipt()\n\t        # Currently using inefficient way to mask the unimportant weights using the rank pattern\n\t        #  due to problem mentioned above\n\t        elif global_step > lora_config.total_step - lora_config.tfinal:\n\t            self.rankallocator.mask_using_rank_pattern(self.model, lora_config.rank_pattern)\n", "        # Pass the function and do forward propagation\n\t        else:\n\t            return None\n\t    @staticmethod\n\t    def _prepare_adalora_config(peft_config, model_config):\n\t        if peft_config.target_modules is None:\n\t            if model_config[\"model_type\"] not in TRANSFORMERS_MODELS_TO_ADALORA_TARGET_MODULES_MAPPING:\n\t                raise ValueError(\"Please specify `target_modules` in `peft_config`\")\n\t            peft_config.target_modules = TRANSFORMERS_MODELS_TO_ADALORA_TARGET_MODULES_MAPPING[\n\t                model_config[\"model_type\"]\n", "            ]\n\t        if peft_config.inference_mode:\n\t            peft_config.merge_weights = True\n\t        return peft_config\n\tclass AdaLoraLayer(LoraLayer):\n\t    def __init__(\n\t        self,\n\t        in_features: int,\n\t        out_features: int,\n\t    ):\n", "        super().__init__(in_features, out_features)\n\t        self.lora_E = nn.ParameterDict({})\n\t        self.lora_A = nn.ParameterDict({})\n\t        self.lora_B = nn.ParameterDict({})\n\t        self.ranknum = nn.ParameterDict({})\n\t    def update_layer(self, adapter_name, r, lora_alpha, lora_dropout, init_lora_weights):\n\t        self.r[adapter_name] = r\n\t        self.lora_alpha[adapter_name] = lora_alpha\n\t        if lora_dropout > 0.0:\n\t            lora_dropout_layer = nn.Dropout(p=lora_dropout)\n", "        else:\n\t            def lora_dropout_layer(x):\n\t                return x\n\t        self.lora_dropout.update(nn.ModuleDict({adapter_name: lora_dropout_layer}))\n\t        # Actual trainable parameters\n\t        # Right singular vectors\n\t        self.lora_A.update(nn.ParameterDict({adapter_name: nn.Parameter(torch.zeros(r, self.in_features))}))\n\t        # Singular values\n\t        self.lora_E.update(nn.ParameterDict({adapter_name: nn.Parameter(torch.zeros(r, 1))}))\n\t        # Left singular vectors\n", "        self.lora_B.update(nn.ParameterDict({adapter_name: nn.Parameter(torch.zeros(self.out_features, r))}))\n\t        # The current rank\n\t        self.ranknum.update(nn.ParameterDict({adapter_name: nn.Parameter(torch.zeros(1), requires_grad=False)}))\n\t        self.ranknum[adapter_name].data.fill_(float(r))\n\t        self.ranknum[adapter_name].requires_grad = False\n\t        self.scaling[adapter_name] = lora_alpha if lora_alpha > 0 else float(r)\n\t        if init_lora_weights:\n\t            self.reset_lora_parameters(adapter_name)\n\t        self.to(self.weight.device)\n\t    def reset_lora_parameters(self, adapter_name):\n", "        if adapter_name in self.lora_A.keys():\n\t            nn.init.zeros_(self.lora_E[adapter_name])\n\t            nn.init.normal_(self.lora_A[adapter_name], mean=0.0, std=0.02)\n\t            nn.init.normal_(self.lora_B[adapter_name], mean=0.0, std=0.02)\n\tclass SVDLinear(nn.Linear, AdaLoraLayer):\n\t    # SVD-based adaptation by a dense layer\n\t    def __init__(\n\t        self,\n\t        adapter_name: str,\n\t        in_features: int,\n", "        out_features: int,\n\t        r: int = 0,\n\t        lora_alpha: int = 1,\n\t        lora_dropout: float = 0.0,\n\t        fan_in_fan_out: bool = False,\n\t        **kwargs,\n\t    ):\n\t        init_lora_weights = kwargs.pop(\"init_lora_weights\", True)\n\t        nn.Linear.__init__(self, in_features, out_features, **kwargs)\n\t        AdaLoraLayer.__init__(self, in_features=in_features, out_features=out_features)\n", "        # Freezing the pre-trained weight matrix\n\t        self.weight.requires_grad = False\n\t        self.fan_in_fan_out = fan_in_fan_out\n\t        if fan_in_fan_out:\n\t            self.weight.data = self.weight.data.T\n\t        nn.Linear.reset_parameters(self)\n\t        self.update_layer(adapter_name, r, lora_alpha, lora_dropout, init_lora_weights)\n\t        self.active_adapter = adapter_name\n\t    def merge(self):\n\t        if self.active_adapter not in self.lora_A.keys():\n", "            return\n\t        if self.merged:\n\t            warnings.warn(\"Already merged. Nothing to do.\")\n\t            return\n\t        if self.r[self.active_adapter] > 0:\n\t            self.weight.data += (\n\t                transpose(\n\t                    self.lora_B[self.active_adapter]\n\t                    @ (self.lora_A[self.active_adapter] * self.lora_E[self.active_adapter])\n\t                )\n", "                * self.scaling[self.active_adapter]\n\t                / (self.ranknum[self.active_adapter] + 1e-5)\n\t            )\n\t            self.merged = True\n\t    def unmerge(self):\n\t        if self.active_adapter not in self.lora_A.keys():\n\t            return\n\t        if not self.merged:\n\t            warnings.warn(\"Already unmerged. Nothing to do.\")\n\t            return\n", "        if self.r[self.active_adapter] > 0:\n\t            self.weight.data -= (\n\t                transpose(\n\t                    self.lora_B[self.active_adapter]\n\t                    @ (self.lora_A[self.active_adapter] * self.lora_E[self.active_adapter])\n\t                )\n\t                * self.scaling[self.active_adapter]\n\t                / (self.ranknum[self.active_adapter] + 1e-5)\n\t            )\n\t            self.merged = False\n", "    def forward(self, x: torch.Tensor):\n\t        if self.active_adapter not in self.lora_A.keys():\n\t            return F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t        if self.disable_adapters:\n\t            if self.r[self.active_adapter] > 0 and self.merged:\n\t                self.unmerge()\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t        elif self.r[self.active_adapter] > 0 and not self.merged:\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n\t            result += (\n", "                (\n\t                    self.lora_dropout[self.active_adapter](x)\n\t                    @ (self.lora_A[self.active_adapter] * self.lora_E[self.active_adapter]).T\n\t                    @ self.lora_B[self.active_adapter].T\n\t                )\n\t                * self.scaling[self.active_adapter]\n\t                / (self.ranknum[self.active_adapter] + 1e-5)\n\t            )\n\t        else:\n\t            result = F.linear(x, transpose(self.weight, self.fan_in_fan_out), bias=self.bias)\n", "        return result\n\tif is_bnb_available():\n\t    class SVDLinear8bitLt(bnb.nn.Linear8bitLt, AdaLoraLayer):\n\t        # Low-rank matrix for SVD-based adaptation\n\t        def __init__(\n\t            self,\n\t            adapter_name,\n\t            in_features,\n\t            out_features,\n\t            r: int = 0,\n", "            lora_alpha: int = 1,\n\t            lora_dropout: float = 0.0,\n\t            **kwargs,\n\t        ):\n\t            bnb.nn.Linear8bitLt.__init__(\n\t                self,\n\t                in_features,\n\t                out_features,\n\t                bias=kwargs.get(\"bias\", True),\n\t                has_fp16_weights=kwargs.get(\"has_fp16_weights\", True),\n", "                memory_efficient_backward=kwargs.get(\"memory_efficient_backward\", False),\n\t                threshold=kwargs.get(\"threshold\", 0.0),\n\t                index=kwargs.get(\"index\", None),\n\t            )\n\t            AdaLoraLayer.__init__(self, in_features=in_features, out_features=out_features)\n\t            # Freezing the pre-trained weight matrix\n\t            self.weight.requires_grad = False\n\t            init_lora_weights = kwargs.pop(\"init_lora_weights\", True)\n\t            self.update_layer(adapter_name, r, lora_alpha, lora_dropout, init_lora_weights)\n\t            self.active_adapter = adapter_name\n", "        def forward(self, x: torch.Tensor):\n\t            result = super().forward(x)\n\t            if self.disable_adapters or self.active_adapter not in self.lora_A.keys():\n\t                return result\n\t            elif self.r[self.active_adapter] > 0:\n\t                if not torch.is_autocast_enabled():\n\t                    expected_dtype = result.dtype\n\t                    if x.dtype != torch.float32:\n\t                        x = x.float()\n\t                    output = (\n", "                        (\n\t                            self.lora_dropout[self.active_adapter](x)\n\t                            @ (self.lora_A[self.active_adapter] * self.lora_E[self.active_adapter]).T\n\t                            @ self.lora_B[self.active_adapter].T\n\t                        ).to(expected_dtype)\n\t                        * self.scaling[self.active_adapter]\n\t                        / (self.ranknum[self.active_adapter] + 1e-5)\n\t                    )\n\t                else:\n\t                    output = (\n", "                        (\n\t                            self.lora_dropout[self.active_adapter](x)\n\t                            @ (self.lora_A[self.active_adapter] * self.lora_E[self.active_adapter]).T\n\t                            @ self.lora_B[self.active_adapter].T\n\t                        )\n\t                        * self.scaling[self.active_adapter]\n\t                        / (self.ranknum[self.active_adapter] + 1e-5)\n\t                    )\n\t                result += output\n\t            return result\n", "class RankAllocator(object):\n\t    \"\"\"\n\t    The RankAllocator for AdaLoraModel. Paper: https://openreview.net/pdf?id=lq62uWRJjiY\n\t    Args:\n\t        config ([`AdaLoraConfig`]): The configuration of the AdaLora model.\n\t        model: the model that we apply AdaLoRA to.\n\t    \"\"\"\n\t    def __init__(self, model, peft_config, adapter_name):\n\t        self.peft_config = peft_config\n\t        self.adapter_name = adapter_name\n", "        self.beta1 = peft_config.beta1\n\t        self.beta2 = peft_config.beta2\n\t        assert self.beta1 > 0 and self.beta1 < 1\n\t        assert self.beta2 > 0 and self.beta2 < 1\n\t        self.reset_ipt()\n\t        self._set_budget_scheduler(model)\n\t    def set_total_step(self, total_step):\n\t        self.peft_config.total_step = total_step\n\t    def reset_ipt(self):\n\t        self.ipt = {}\n", "        self.exp_avg_ipt = {}\n\t        self.exp_avg_unc = {}\n\t    def _set_budget_scheduler(self, model):\n\t        self.init_bgt = 0\n\t        self.name_set = set()\n\t        for n, p in model.named_parameters():\n\t            if f\"lora_A.{self.adapter_name}\" in n:\n\t                self.init_bgt += p.size(0)\n\t                self.name_set.add(n.replace(\"lora_A\", \"%s\"))\n\t        self.name_set = sorted(self.name_set)\n", "        # The total final rank budget\n\t        self.target_bgt = self.peft_config.target_r * len(self.name_set)\n\t    def budget_schedule(self, step: int):\n\t        tinit = self.peft_config.tinit\n\t        tfinal = self.peft_config.tfinal\n\t        total_step = self.peft_config.total_step\n\t        # Initial warmup\n\t        if step <= tinit:\n\t            budget = self.init_bgt\n\t            mask_ind = False\n", "        # Final fine-tuning\n\t        elif step > total_step - tfinal:\n\t            budget = self.target_bgt\n\t            mask_ind = True\n\t        else:\n\t            # Budget decreasing with a cubic scheduler\n\t            mul_coeff = 1 - (step - tinit) / (total_step - tfinal - tinit)\n\t            budget = int((self.init_bgt - self.target_bgt) * (mul_coeff**3) + self.target_bgt)\n\t            mask_ind = True if step % self.peft_config.deltaT == 0 else False\n\t        return budget, mask_ind\n", "    def update_ipt(self, model):\n\t        # Update the sensitivity and uncertainty for every weight\n\t        for n, p in model.named_parameters():\n\t            if \"lora_\" in n and self.adapter_name in n:\n\t                if n not in self.ipt:\n\t                    self.ipt[n] = torch.zeros_like(p)\n\t                    self.exp_avg_ipt[n] = torch.zeros_like(p)\n\t                    self.exp_avg_unc[n] = torch.zeros_like(p)\n\t                with torch.no_grad():\n\t                    self.ipt[n] = (p * p.grad).abs().detach()\n", "                    # Sensitivity smoothing\n\t                    self.exp_avg_ipt[n] = self.beta1 * self.exp_avg_ipt[n] + (1 - self.beta1) * self.ipt[n]\n\t                    # Uncertainty quantification\n\t                    self.exp_avg_unc[n] = (\n\t                        self.beta2 * self.exp_avg_unc[n] + (1 - self.beta2) * (self.ipt[n] - self.exp_avg_ipt[n]).abs()\n\t                    )\n\t    def _element_score(self, n):\n\t        return self.exp_avg_ipt[n] * self.exp_avg_unc[n]\n\t    def _combine_ipt(self, ipt_E, ipt_AB):\n\t        ipt_AB = ipt_AB.sum(dim=1, keepdim=False)\n", "        sum_ipt = ipt_E.view(-1) + ipt_AB.view(-1)\n\t        return sum_ipt\n\t    def mask_to_budget(self, model, budget):\n\t        value_ipt = {}\n\t        vector_ipt = {}\n\t        triplet_ipt = {}\n\t        # Get the importance score for A, E, B\n\t        for n, p in model.named_parameters():\n\t            if f\"lora_A.{self.adapter_name}\" in n:\n\t                entry_ipt = self._element_score(n)\n", "                comb_ipt = torch.mean(entry_ipt, dim=1, keepdim=True)\n\t                name_m = n.replace(\"lora_A\", \"%s\")\n\t                if name_m not in vector_ipt:\n\t                    vector_ipt[name_m] = [comb_ipt]\n\t                else:\n\t                    vector_ipt[name_m].append(comb_ipt)\n\t            if f\"lora_B.{self.adapter_name}\" in n:\n\t                entry_ipt = self._element_score(n)\n\t                comb_ipt = torch.mean(entry_ipt, dim=0, keepdim=False).view(-1, 1)\n\t                name_m = n.replace(\"lora_B\", \"%s\")\n", "                if name_m not in vector_ipt:\n\t                    vector_ipt[name_m] = [comb_ipt]\n\t                else:\n\t                    vector_ipt[name_m].append(comb_ipt)\n\t            if f\"lora_E.{self.adapter_name}\" in n:\n\t                entry_ipt = self._element_score(n)\n\t                name_m = n.replace(\"lora_E\", \"%s\")\n\t                value_ipt[name_m] = entry_ipt\n\t        all_score = []\n\t        # Calculate the score for each triplet\n", "        for name_m in vector_ipt:\n\t            ipt_E = value_ipt[name_m]\n\t            ipt_AB = torch.cat(vector_ipt[name_m], dim=1)\n\t            sum_ipt = self._combine_ipt(ipt_E, ipt_AB)\n\t            name_E = name_m % \"lora_E\"\n\t            triplet_ipt[name_E] = sum_ipt.view(-1, 1)\n\t            all_score.append(sum_ipt.view(-1))\n\t        # Get the threshold by ranking ipt\n\t        mask_threshold = torch.kthvalue(\n\t            torch.cat(all_score),\n", "            k=self.init_bgt - budget,\n\t        )[0].item()\n\t        rank_pattern = {}\n\t        # Mask the unimportant triplets\n\t        with torch.no_grad():\n\t            for n, p in model.named_parameters():\n\t                if f\"lora_E.{self.adapter_name}\" in n:\n\t                    p.masked_fill_(triplet_ipt[n] <= mask_threshold, 0.0)\n\t                    rank_pattern[n] = (~(triplet_ipt[n] <= mask_threshold)).view(-1).tolist()\n\t        return rank_pattern\n", "    def update_and_allocate(self, model, global_step, force_mask=False):\n\t        # # Update the importance score and allocate the budget\n\t        if global_step < self.peft_config.total_step - self.peft_config.tfinal:\n\t            self.update_ipt(model)\n\t        budget, mask_ind = self.budget_schedule(global_step)\n\t        # Allocate the budget according to importance scores\n\t        if mask_ind or force_mask:\n\t            rank_pattern = self.mask_to_budget(model, budget)\n\t        else:\n\t            rank_pattern = None\n", "        return budget, rank_pattern\n\t    def mask_using_rank_pattern(self, model, rank_pattern):\n\t        # Mask the unimportant triplets\n\t        is_adapter_name_truncated = False\n\t        if self.adapter_name not in next(iter(rank_pattern.keys())):\n\t            is_adapter_name_truncated = True\n\t        with torch.no_grad():\n\t            for n, p in model.named_parameters():\n\t                if f\"lora_E.{self.adapter_name}\" in n:\n\t                    key = n if not is_adapter_name_truncated else n.replace(f\".{self.adapter_name}\", \"\")\n", "                    mask = torch.Tensor(rank_pattern[key]).unsqueeze(-1).to(p.device)\n\t                    p.masked_fill_(~mask.bool(), 0.0)\n"]}
{"filename": "ft_chatglm_lora/peft/tuners/adaption_prompt.py", "chunked_list": ["# coding=utf-8\n\t# Copyright 2023-present the HuggingFace Inc. team.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport math\n\tfrom collections import namedtuple\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Dict, List\n\timport torch\n\timport torch.nn as nn\n", "import torch.nn.functional as F\n\tfrom peft.utils.config import PeftConfig, PeftType\n\tfrom peft.utils.other import _freeze_adapter, _get_submodules\n\tdef llama_rotate_half(x: torch.Tensor) -> torch.Tensor:\n\t    \"\"\"\n\t    Rotate half the hidden dims of the input.\n\t    This function was duplicated verbatim from:\n\t    https://github.com/huggingface/transformers/blob/1de8ce9ee1191ba761a593ac15d9ccbf5851bfc5/src/transformers/models/llama/modeling_llama.py#L126\n\t    This was done to eliminate the Llama transformers implementation as a dependency of this file. Note that some other\n\t    functions were also adapted from the transformers implementation but were modified.\n", "    \"\"\"\n\t    x1 = x[..., : x.shape[-1] // 2]\n\t    x2 = x[..., x.shape[-1] // 2 :]\n\t    return torch.cat((-x2, x1), dim=-1)\n\tdef llama_apply_rotary_pos_emb(q, cos, sin, position_ids):\n\t    \"\"\"\n\t    Apply rotary position embedding to query states in the Llama model.\n\t    This function was adapted from:\n\t    https://github.com/huggingface/transformers/blob/1de8ce9ee1191ba761a593ac15d9ccbf5851bfc5/src/transformers/models/llama/modeling_llama.py#L133\n\t    It was modified to remove unnecessary processing of key states.\n", "    \"\"\"\n\t    gather_indices = position_ids[:, None, :, None]  # [bs, 1, seq_len, 1]\n\t    gather_indices = gather_indices.repeat(1, cos.shape[1], 1, cos.shape[3])\n\t    cos = torch.gather(cos.repeat(gather_indices.shape[0], 1, 1, 1), 2, gather_indices)\n\t    sin = torch.gather(sin.repeat(gather_indices.shape[0], 1, 1, 1), 2, gather_indices)\n\t    q_embed = (q * cos) + (llama_rotate_half(q) * sin)\n\t    return q_embed\n\tdef llama_compute_query_states(model: nn.Module, **kwargs) -> torch.Tensor:\n\t    \"\"\"\n\t    Compute query states for Llama models specifically.\n", "    They need to be recomputed as the forward() method of the original LlamaModel in the transformers library does not\n\t    return them. See the related discussion in the PR: https://github.com/huggingface/peft/pull/268\n\t    \"\"\"\n\t    hidden_states = kwargs.get(\"hidden_states\")\n\t    position_ids = kwargs.get(\"position_ids\")\n\t    past_key_value = kwargs.get(\"past_key_value\")\n\t    bsz, q_len, _ = hidden_states.size()\n\t    query_states = model.q_proj(hidden_states).view(bsz, q_len, model.num_heads, model.head_dim).transpose(1, 2)\n\t    value_states = model.v_proj(hidden_states).view(bsz, q_len, model.num_heads, model.head_dim).transpose(1, 2)\n\t    seq_len = q_len\n", "    if past_key_value is not None:\n\t        seq_len += past_key_value[0].shape[-2]\n\t    cos, sin = model.rotary_emb(value_states, seq_len=seq_len)\n\t    return llama_apply_rotary_pos_emb(query_states, cos, sin, position_ids)\n\t# Contains the config that is specific to a transformers model type.\n\tModelTypeConfig = namedtuple(\n\t    \"ModelTypeConfig\", [\"compute_query_states\", \"target_modules\", \"k_proj_layer\", \"v_proj_layer\", \"o_proj_layer\"]\n\t)\n\t# Mapping of transformers model types to their specific configuration.\n\tTRANSFORMERS_MODEL_CONFIG = {\n", "    \"llama\": ModelTypeConfig(\n\t        compute_query_states=llama_compute_query_states,\n\t        target_modules=\"self_attn\",\n\t        k_proj_layer=\"k_proj\",\n\t        v_proj_layer=\"v_proj\",\n\t        o_proj_layer=\"o_proj\",\n\t    ),\n\t}\n\tdef is_adaption_prompt_trainable(params: str) -> bool:\n\t    \"\"\"Return True if module is trainable under adaption prompt fine-tuning.\"\"\"\n", "    return params.split(\".\")[-1].startswith(\"adaption_\")\n\t@dataclass\n\tclass AdaptionPromptConfig(PeftConfig):\n\t    \"\"\"Stores the configuration of an [`AdaptionPromptModel`].\"\"\"\n\t    target_modules: str = field(\n\t        default=None, metadata={\"help\": \"Name of the attention submodules to insert adaption prompts into.\"}\n\t    )\n\t    adapter_len: int = field(default=None, metadata={\"help\": \"Number of adapter tokens to insert\"})\n\t    adapter_layers: int = field(default=None, metadata={\"help\": \"Number of adapter layers (from the top)\"})\n\t    def __post_init__(self):\n", "        self.peft_type = PeftType.ADAPTION_PROMPT\n\tdef prepare_config(\n\t    peft_config: AdaptionPromptConfig,\n\t    model,\n\t) -> AdaptionPromptConfig:\n\t    \"\"\"Prepare the config based on the llama model type.\"\"\"\n\t    if model.config.model_type not in TRANSFORMERS_MODEL_CONFIG:\n\t        raise ValueError(\"Unsupported model type for adaption prompt: '{model.config.model_type}'.\")\n\t    model_config = TRANSFORMERS_MODEL_CONFIG[model.config.model_type]\n\t    if peft_config.target_modules is None:\n", "        peft_config.target_modules = model_config.target_modules\n\t    return peft_config\n\tclass AdaptionPromptModel(nn.Module):\n\t    \"\"\"\n\t    Implements adaption prompts as described in https://arxiv.org/pdf/2303.16199.pdf.\n\t    The top L attention modules are replaced with AdaptedAttention modules that wrap the original ones, but insert\n\t    trainable prompts with gates (for zero init).\n\t    Notes on the multi-adapter pattern:\n\t    - We store the states of different adapters by keeping a dictionary of AdaptedAttention modules indexed by adapter\n\t      name.\n", "    - Every time we switch adapters, we remove the modules of the currently active adapter from the model, store them\n\t      in the dictionary, and replace them with the modules of the new adapter.\n\t    - To avoid duplicated and potentially inconsistent state, the currently active adapter is always removed from the\n\t      dictionary.\n\t    - Disabling the adapter would also result in the modules being removed from the model.\n\t    \"\"\"\n\t    def __init__(self, model, configs: Dict, adapter_name: str):\n\t        super().__init__()\n\t        self.model = model\n\t        # Store adapter configs by name.\n", "        self._configs: Dict[str, AdaptionPromptConfig] = {}\n\t        # Store lists of the parents of the affected attention modules by adapter name.\n\t        # We keep references to the parents so we can swap the adapters in-and-out of the model.\n\t        self._parents: Dict[str, List[nn.Module]] = {}\n\t        # Store lists of cached AdaptedAttention modules by name.\n\t        self._cached_adapters: Dict[str, List] = {}\n\t        # The name of the currently active adapter.\n\t        self._active_adapter = None\n\t        # Whether the adapter is enabled.\n\t        self._enabled = True\n", "        self.forward = self.model.forward\n\t        self.add_adapter(adapter_name, configs[adapter_name])\n\t        self._mark_only_adaption_prompts_as_trainable()\n\t    def add_adapter(self, adapter_name: str, config: AdaptionPromptConfig) -> None:\n\t        \"\"\"Add an adapter with the given name and config.\"\"\"\n\t        config = prepare_config(config, self.model)\n\t        if adapter_name in self._configs:\n\t            raise ValueError(f\"Adapter with name '{adapter_name}' already exists.\")\n\t        parents = []\n\t        for name, _ in self.model.named_modules():\n", "            if name.endswith(config.target_modules):\n\t                par, _, _ = _get_submodules(self.model, name)\n\t                parents.append(par)\n\t        if len(parents) < config.adapter_layers:\n\t            raise ValueError(\n\t                f\"Config specifies more adapter layers '{config.adapter_layers}'\"\n\t                f\" than the model has '{len(parents)}'.\"\n\t            )\n\t        # Note that if the target modules are not in Sequential, ModuleList, or\n\t        # some other PyTorch ordered container, the behavior is undefined as we\n", "        # assume here that the order of the modules is the same as the order of\n\t        # the transformer decoder layers.\n\t        parents = parents[-config.adapter_layers :]\n\t        self._parents[adapter_name] = parents\n\t        # It is only None during initialization.\n\t        # If it is disabled, we don't have to remove the modules.\n\t        if self._active_adapter is not None and self._enabled:\n\t            self._remove_adapted_attentions(self._active_adapter)\n\t        self._active_adapter = adapter_name\n\t        self._configs[adapter_name] = config\n", "        self._create_adapted_attentions(config, parents)\n\t        if not self._enabled:\n\t            self._remove_adapted_attentions(self._active_adapter)\n\t        if config.inference_mode:\n\t            _freeze_adapter(self.model, adapter_name)\n\t    def set_adapter(self, adapter_name: str) -> None:\n\t        \"\"\"Set the model to use the adapter with the given name.\"\"\"\n\t        if self._active_adapter == adapter_name:\n\t            return\n\t        if adapter_name not in self._configs:\n", "            raise ValueError(f\"Adapter with name '{adapter_name}' does not exist.\")\n\t        if self._enabled:\n\t            self._remove_adapted_attentions(self._active_adapter)\n\t            self._set_adapted_attentions(adapter_name)\n\t        self._active_adapter = adapter_name\n\t    def enable_adapter_layers(self):\n\t        \"\"\"Enable adapter layers by swapping in cached AdaptedAttention modules.\"\"\"\n\t        self._enabled = True\n\t        self._set_adapted_attentions(self._active_adapter)\n\t    def disable_adapter_layers(self):\n", "        \"\"\"Disable adapter layers by swapping out AdaptedAttention modules.\"\"\"\n\t        self._enabled = False\n\t        self._remove_adapted_attentions(self._active_adapter)\n\t    def _create_adapted_attentions(self, config: AdaptionPromptConfig, parents: List[nn.Module]) -> None:\n\t        \"\"\"Wrap LlamaAttention modules with newly created AdaptedAttention modules.\"\"\"\n\t        for par in parents:\n\t            attn = AdaptedAttention(\n\t                model_type=self.model.config.model_type,\n\t                adapter_len=config.adapter_len,\n\t                model=getattr(par, config.target_modules),\n", "            )\n\t            setattr(par, config.target_modules, attn)\n\t    def _set_adapted_attentions(self, adapter_name: str) -> None:\n\t        \"\"\"Replace LlamaAttention modules with cached AdaptedAttention modules.\"\"\"\n\t        cached = self._cached_adapters[adapter_name]\n\t        del self._cached_adapters[adapter_name]\n\t        config = self._configs[adapter_name]\n\t        for i, par in enumerate(self._parents[adapter_name]):\n\t            setattr(par, config.target_modules, cached[i])\n\t    def _remove_adapted_attentions(self, adapter_name: str) -> None:\n", "        \"\"\"Remove AdaptedAttention modules from the model and store them in the cache.\"\"\"\n\t        config = self._configs[adapter_name]\n\t        adapted_attentions = []\n\t        for par in self._parents[adapter_name]:\n\t            attn = getattr(par, config.target_modules)\n\t            adapted_attentions.append(attn)\n\t            setattr(par, config.target_modules, attn.model)\n\t        self._cached_adapters[adapter_name] = adapted_attentions\n\t    def _mark_only_adaption_prompts_as_trainable(self) -> None:\n\t        \"\"\"Freeze all parameters of the model except the adaption prompts.\"\"\"\n", "        for n, p in self.model.named_parameters():\n\t            if not is_adaption_prompt_trainable(n):\n\t                p.requires_grad = False\n\t    def __getattr__(self, name: str):\n\t        \"\"\"Forward missing attributes to the wrapped module.\"\"\"\n\t        try:\n\t            return super().__getattr__(name)  # defer to nn.Module's logic\n\t        except AttributeError:\n\t            # This is necessary as e.g. causal models have various methods that we\n\t            # don't want to re-implement here.\n", "            return getattr(self.model, name)\n\tclass AdaptedAttention(nn.Module):\n\t    \"\"\"This module wraps a LLamaAttention module and injects adaption prompts.\"\"\"\n\t    def __init__(self, model_type: str, adapter_len: int, model):\n\t        \"\"\"\n\t        Initialize object.\n\t        Args:\n\t            model_type: The transformer model type. This is used to retrieve the right method to\n\t                compute query states.\n\t            adapter_len: The length of the adaption prompt to insert.\n", "            model: The original transformer attention module that is being wrapped.\n\t        \"\"\"\n\t        assert not isinstance(model, AdaptedAttention)\n\t        super().__init__()\n\t        self.model_type = model_type\n\t        self.model = model\n\t        self.adapter_len = adapter_len\n\t        # Assume all parameters of the attention model we are wrapping are on the same device.\n\t        device = next(model.parameters()).device\n\t        # Don't think this was specified in the paper, but we follow the official repo which used an Embedding\n", "        # which initializes the tokens with standard normal values.\n\t        # https://github.com/ZrrSkywalker/LLaMA-Adapter/blob/41c3546fe1997ab8a65809dc8d8f9252b19d9faf/llama/model.py#L234\n\t        # (bsz, adapter_len, hidden_size)\n\t        self.adaption_prompt = nn.Parameter(\n\t            torch.empty(1, adapter_len, self.model.hidden_size, device=device).normal_()\n\t        )\n\t        # Initialize the gate to 0 as this is \"zero-init\".\n\t        self.adaption_gate = nn.Parameter(torch.zeros(1, device=device))\n\t    def forward(self, **kwargs):\n\t        \"\"\"\n", "        Forward pass for the adapter which wraps the original LlamaAttention module.\n\t        \"Official\" paper implementation:\n\t        https://github.com/ZrrSkywalker/LLaMA-Adapter/blob/41c3546fe1997ab8a65809dc8d8f9252b19d9faf/llama/model.py#L141\n\t        Args:\n\t            kwargs: See the original LlamaAttention module.\n\t        \"\"\"\n\t        if kwargs.get(\"output_attention\", False):\n\t            raise NotImplementedError(\"output_attention is not currently supported.\")\n\t        output, _, past_key_value = self.model(**kwargs)\n\t        bsz = output.shape[0]\n", "        q_len = output.shape[1]\n\t        embed_dim = output.shape[2]\n\t        k_proj_layer = TRANSFORMERS_MODEL_CONFIG[self.model_type].k_proj_layer\n\t        v_proj_layer = TRANSFORMERS_MODEL_CONFIG[self.model_type].v_proj_layer\n\t        o_proj_layer = TRANSFORMERS_MODEL_CONFIG[self.model_type].o_proj_layer\n\t        if k_proj_layer == v_proj_layer:\n\t            _, key, value = getattr(self.model, k_proj_layer)(self.adaption_prompt).split(embed_dim, dim=2)\n\t        else:\n\t            key = getattr(self.model, k_proj_layer)(self.adaption_prompt)\n\t            value = getattr(self.model, v_proj_layer)(self.adaption_prompt)\n", "        # (bsz, num_heads, adapter_len, head_dim)\n\t        adapter_k = (\n\t            key.view(1, self.adapter_len, self.model.num_heads, self.model.head_dim)\n\t            .repeat(bsz, 1, 1, 1)\n\t            .transpose(1, 2)\n\t        )\n\t        # (bsz, num_heads, adapter_len, head_dim)\n\t        adapter_v = (\n\t            value.view(1, self.adapter_len, self.model.num_heads, self.model.head_dim)\n\t            .repeat(bsz, 1, 1, 1)\n", "            .transpose(1, 2)\n\t        )\n\t        # Recompute query states.\n\t        compute_query_states = TRANSFORMERS_MODEL_CONFIG[self.model_type].compute_query_states\n\t        # (bsz, num_heads, q_len, head_dim)\n\t        query_states = compute_query_states(model=self.model, **kwargs)\n\t        # (bsz, num_heads, q_len, adapter_len)\n\t        scores = torch.matmul(query_states, adapter_k.transpose(2, 3)) / math.sqrt(self.model.head_dim)\n\t        # Upcast attention to fp32\n\t        # (bsz, num_heads, q_len, adapter_len)\n", "        scores = self.adaption_gate * F.softmax(scores, dim=-1, dtype=torch.float32).to(query_states.dtype)\n\t        # (bsz, q_len, num_heads * head_dim)\n\t        adapter_output = torch.matmul(scores, adapter_v).transpose(1, 2).reshape(bsz, q_len, -1)\n\t        # (bsz, q_len, hidden_size)\n\t        if o_proj_layer is not None:\n\t            adapter_output = getattr(self.model, o_proj_layer)(adapter_output)\n\t        # Add adaption prompt output to original output.\n\t        output = output + adapter_output\n\t        return output, None, past_key_value\n"]}
{"filename": "ft_chatglm_lora/text2dt_eval/parser.py", "chunked_list": ["import re\n\tfrom collections import Counter\n\trel_name_2_label = {\n\t    \"临床表现\": \"临床表现\",\n\t    \"用药\": \"治疗药物\",\n\t    \"治疗方案\": \"治疗方案\",\n\t    \"用法\": \"用法用量\",\n\t    \"基本情况\": \"基本情况\",\n\t    \"慎用\": \"禁用药物\",\n\t}\n", "def parsing(seq):\n\t    # print('seq', seq)\n\t    res, _, _ = scan_seq([], seq, 0)\n\t    # print('res', res)\n\t    return res\n\tdef scan_seq(tgt, seq, start, num_leaf=0, num_inner=0):\n\t    flag, _ = is_completed(tgt, 0)\n\t    if start >= len(seq) or flag:\n\t        return tgt, num_leaf, num_inner\n\t    if seq[start: start+4] == '否则,若':\n", "        role = 'C'\n\t        node_triples, logical_rel, end = get_node(seq, start+4, role)\n\t        tgt.append({'role': role, 'triples': node_triples, 'logical_rel': logical_rel})\n\t        tgt, num_leaf_, num_inner_ = scan_seq(tgt, seq, end+1, 0, 1)\n\t        if num_leaf_ < num_inner_ + 1:\n\t            tgt += [{'role': 'D', 'triples': [], 'logical_rel': 'null'}] * (num_inner_ + 1 - num_leaf_)\n\t            num_leaf_ = num_inner_ + 1\n\t        return tgt, num_leaf+num_leaf_, num_inner+num_inner_\n\t    elif seq[start: start+2] == '否则':\n\t        role = 'D'\n", "        node_triples, logical_rel, end = get_node(seq, start+2, role)\n\t        if len(node_triples) > 0:\n\t            tgt.append({'role': role, 'triples': node_triples, 'logical_rel': logical_rel})\n\t            num_leaf += 1\n\t        tgt, num_leaf, num_inner = scan_seq(tgt, seq, end+1, num_leaf, num_inner)\n\t        return tgt, num_leaf, num_inner\n\t    elif seq[start: start+1] == '则':\n\t        role = 'D'\n\t        node_triples, logical_rel, end = get_node(seq, start+1, role)\n\t        if len(node_triples) > 0:\n", "            tgt.append({'role': role, 'triples': node_triples, 'logical_rel': logical_rel})\n\t            num_leaf += 1\n\t        tgt, num_leaf, num_inner = scan_seq(tgt, seq, end+1, num_leaf, num_inner)\n\t        return tgt, num_leaf, num_inner\n\t    elif seq[start: start+1] == '若':\n\t        role = 'C'\n\t        node_triples, logical_rel, end = get_node(seq, start+1, role)\n\t        tgt.append({'role': role, 'triples': node_triples, 'logical_rel': logical_rel})\n\t        tgt, num_leaf_, num_inner_ = scan_seq(tgt, seq, end+1, 0, 1)\n\t        if num_leaf_ < num_inner_ + 1:\n", "            tgt += [{'role': 'D', 'triples': [], 'logical_rel': 'null'}] * (num_inner_ + 1 - num_leaf_)\n\t            num_leaf_ = num_inner_ + 1\n\t        return tgt, num_leaf+num_leaf_, num_inner+num_inner_\n\t    else:\n\t        return tgt, num_leaf, num_inner\n\tdef get_node(seq, start, role):\n\t    cursor = start\n\t    node_triples = []\n\t    logical_rels = []\n\t    num_or = 0\n", "    num_and = 0\n\t    while cursor < len(seq):\n\t        if seq[cursor] == \"(\":\n\t            # matching for (xxx, xxx, xxx)\n\t            triple_span = re.match(r'\\(.*?,.*?,[^\\n\\r\\(]*?(\\(.*?\\))*?[^\\n\\r\\(]*?\\)', seq[cursor:])\n\t            if triple_span is None:\n\t                # print(seq[cursor:])\n\t                cursor += 1\n\t                continue\n\t            triple_span = triple_span.span()\n", "            triple_str = seq[cursor+triple_span[0]: cursor+triple_span[1]]\n\t            len_span = len(triple_str)\n\t            cursor += len_span\n\t            triple_split = triple_str[1:-1].split(',')\n\t            triple = [x.strip() for x in triple_split]\n\t            if len(triple_split) == 3 and triple[1] in rel_name_2_label:\n\t                rel_label = rel_name_2_label[triple[1]]\n\t            else:\n\t                # print(triple_split)\n\t                continue\n", "            triple = (triple[0], rel_label, triple[2])\n\t            if triple not in node_triples:\n\t                node_triples.append(triple)\n\t        elif seq[cursor] in ['或']:\n\t            logical_rels.append('or')\n\t            num_or += 1\n\t            cursor += 1\n\t        elif seq[cursor] in ['且']:\n\t            logical_rels.append('and')\n\t            num_and += 1\n", "            cursor += 1\n\t        elif seq[cursor] in ['和']:\n\t            logical_rels.append('and')\n\t            num_and += 1\n\t            cursor += 1\n\t        elif seq[cursor] in [',', '。']:\n\t            break\n\t        else:\n\t            cursor += 1\n\t    logical_rel = 'null'\n", "    if len(node_triples) > 1:\n\t        if num_or > num_and:\n\t            logical_rel = 'or'\n\t        else:\n\t            logical_rel = 'and'\n\t    return node_triples, logical_rel, cursor\n\tdef is_completed(tree, start):\n\t    if start >= len(tree):\n\t        return False, start\n\t    if tree[start]['role'] == 'D':\n", "        return True, start\n\t    elif tree[start]['role'] == 'C':\n\t        left_flag, left_end = is_completed(tree, start+1)\n\t        right_flag, right_end = is_completed(tree, left_end+1)\n\t        flag = left_flag and right_flag\n\t        return flag, right_end\n"]}
{"filename": "ft_chatglm_lora/text2dt_eval/metric.py", "chunked_list": ["from text2dt_eval.eval_func import eval\n\tdef text2dt_metric(gold_data, predict_data):\n\t    gold_tree_num, correct_tree_num = 0.000001, 0.000001\n\t    gold_triplet_num, predict_triplet_num, correct_triplet_num = 0.000001, 0.000001, 0.000001\n\t    gold_path_num, predict_path_num, correct_path_num= 0.000001, 0.000001, 0.000001\n\t    gold_node_num, predict_node_num, correct_node_num = 0.000001, 0.000001, 0.000001\n\t    edit_dis = 0\n\t    for i in range(len(predict_data)):\n\t        # print(i)\n\t        tmp= eval(predict_data[i], gold_data[i])\n", "        gold_tree_num += tmp[0]\n\t        correct_tree_num += tmp[1]\n\t        correct_triplet_num += tmp[2]\n\t        predict_triplet_num += tmp[3]\n\t        gold_triplet_num += tmp[4]\n\t        correct_path_num += tmp[5]\n\t        predict_path_num += tmp[6]\n\t        gold_path_num += tmp[7]\n\t        edit_dis += tmp[8]\n\t        correct_node_num += tmp[9]\n", "        predict_node_num += tmp[10]\n\t        gold_node_num += tmp[11]\n\t    tree_acc= correct_tree_num/gold_tree_num\n\t    triple_p = correct_triplet_num/predict_triplet_num\n\t    triple_r = correct_triplet_num/gold_triplet_num\n\t    triple_f1 = 2 * triple_p * triple_r / (triple_p + triple_r)\n\t    path_f1 =2* (correct_path_num/predict_path_num) *(correct_path_num/gold_path_num)/(correct_path_num/predict_path_num + correct_path_num/gold_path_num)\n\t    tree_edit_distance=edit_dis/gold_tree_num\n\t    node_f1 =2* (correct_node_num/predict_node_num) *(correct_node_num/gold_node_num)/(correct_node_num/predict_node_num + correct_node_num/gold_node_num)\n\t    print('[Triple_P]: %.6f;\\t [Triple_R]: %.6f\\t [Triple_F1]: %.6f' % (triple_p, triple_r, triple_f1), flush=True)\n", "    print(\"[Node_F1] : %.6f;\\t [Path_F1] : %.6f\\t [Edit_Dist]: %.6f\" % (node_f1, path_f1, tree_edit_distance), flush=True)\n\t    print('[Tree_ACC]: %.6f' % tree_acc, flush=True)\n\t    return {'triple_f1': triple_f1, 'node_f1': node_f1, 'path_f1': path_f1, 'tree_acc': tree_acc, 'path_tree_avg': (path_f1+tree_acc)/2}\n"]}
{"filename": "ft_chatglm_lora/text2dt_eval/eval_func.py", "chunked_list": ["# 将符合诊疗决策树约束的节点前序序列转化为代表诊疗决策树结构的节点矩阵，matrix[i][j]='F'/'L'/'R'表示第j个节点是第i个节点的父/左子/右子节点\n\tdef nodematrix(tree):\n\t    nodelist=[]\n\t    for i in range(len(tree)):\n\t        nodelist.append(tree[i][\"role\"])\n\t    # print('*'*10)\n\t    # print(tree)\n\t    # print(nodelist)\n\t    # print('*'*10)\n\t    node_matrix = [[0 for i in range(len(nodelist))] for j in range(len(nodelist))]\n", "    if len(nodelist) == 0:\n\t        return node_matrix\n\t    while (nodelist[0] != 'D'):\n\t        for i in range(len(nodelist)):\n\t            if nodelist[i] == 'C':\n\t                flag, leaf1, leaf2 = 0, 0, 0\n\t                for j in range(i+1,len(nodelist)):\n\t                    if nodelist[j]=='D' and flag==0:\n\t                        flag = 1\n\t                        leaf1 = j\n", "                    elif nodelist[j]=='X' :\n\t                        continue\n\t                    elif nodelist[j]=='D' and flag==1:\n\t                        #print(i)\n\t                        leaf2 = j\n\t                        nodelist[i]='D'\n\t                        node_matrix[leaf1][i]= 'F'\n\t                        node_matrix[leaf2][i] = 'F'\n\t                        node_matrix[i][leaf1] = 'L'\n\t                        node_matrix[i][leaf2] = 'R'\n", "                        for k in range(i+1,leaf2+1):\n\t                            nodelist[k]='X'\n\t                        flag = 2\n\t                        break\n\t                    elif nodelist[j]=='C':\n\t                        break\n\t                if flag == 2:\n\t                    break\n\t    return(node_matrix)\n\t# 计算两个节点的距离\n", "def node_dis(node1,node2):\n\t    if node2 is None :\n\t        node2 = {\"role\":\"\",\"triples\": [],\"logical_rel\": \"\"}\n\t    dis=0\n\t    if node1[\"role\"] != node2[\"role\"]:\n\t        dis += 1\n\t    #print(dis)\n\t    if node1[\"logical_rel\"] != node2[\"logical_rel\"]:\n\t        dis += 1\n\t    dis += len(list((set(node1[\"triples\"])|set(node2[\"triples\"]))-(set(node1[\"triples\"])&set(node2[\"triples\"]))))\n", "    return(dis)\n\tdef is_path_equal(path1,path2):\n\t    if (len(path1)!=len(path2)):\n\t        return False\n\t    for i in range(len(path1)):\n\t        if isinstance(path1[i],dict) and isinstance(path2[i],dict):\n\t            if path1[i]['role'] == path2[i]['role'] and path1[i]['logical_rel'] == path2[i]['logical_rel'] and set(path1[i]['triples']) == set(path2[i]['triples']):\n\t                continue\n\t            else:\n\t                return False\n", "        elif path1[i] != path2[i]:\n\t            return False\n\t    return True\n\tdef is_tree_equal(predict_tree,gold_tree):\n\t    if len(predict_tree) != len(gold_tree):\n\t        return 0\n\t    else:\n\t        for i in range(len(predict_tree)):\n\t            if predict_tree[i]['role'] == gold_tree[i]['role'] and predict_tree[i]['logical_rel'] == gold_tree[i]['logical_rel'] and set(\n\t                predict_tree[i]['triples']) == set(gold_tree[i]['triples']):\n", "                continue\n\t            else:\n\t                return 0\n\t    return 1\n\t# 计算模型预测的诊疗决策树和ground turth的距离，距离越小表示两树越相似\n\tdef edit_distance(predict_tree, gold_tree, predict_matrix, gold_matrix):\n\t    dis = 0\n\t    if len(predict_matrix) == 0:\n\t        for node in gold_tree:\n\t            dis += node_dis(node, None)\n", "        return dis\n\t    stack1 = [0]\n\t    stack2 = [0]\n\t    while stack1:\n\t        s1=stack1.pop()\n\t        s2=stack2.pop()\n\t        if ('L' not in predict_matrix[s1] and 'R' not in predict_matrix[s1]) and ('L' in gold_matrix[s2] or 'R' in gold_matrix[s2]):\n\t            dis += node_dis(predict_tree[s1], gold_tree[s2])\n\t            stack_tmp=[]\n\t            stack_tmp.append(gold_matrix[s2].index('R'))\n", "            stack_tmp.append(gold_matrix[s2].index('L'))\n\t            while stack_tmp:\n\t                s_tmp=stack_tmp.pop()\n\t                dis += node_dis(gold_tree[s_tmp],None)\n\t                if ('L' in gold_matrix[s_tmp] and 'R' in gold_matrix[s_tmp]):\n\t                    stack_tmp.append(gold_matrix[s_tmp].index('R'))\n\t                    stack_tmp.append(gold_matrix[s_tmp].index('L'))\n\t        elif  ('L' in predict_matrix[s1] and 'R' in predict_matrix[s1]) and ('L' not in gold_matrix[s2] or 'R' not in gold_matrix[s2]):\n\t            dis += node_dis(predict_tree[s1], gold_tree[s2])\n\t            stack_tmp=[]\n", "            stack_tmp.append(predict_matrix[s1].index('R'))\n\t            stack_tmp.append(predict_matrix[s1].index('L'))\n\t            while stack_tmp:\n\t                s_tmp=stack_tmp.pop()\n\t                dis += node_dis(predict_tree[s_tmp], None)\n\t                if ('L' in predict_matrix[s_tmp] and 'R' in predict_matrix[s_tmp]):\n\t                    stack_tmp.append(predict_matrix[s_tmp].index('R'))\n\t                    stack_tmp.append(predict_matrix[s_tmp].index('L'))\n\t        elif ('L' not in predict_matrix[s1] and 'R' not in predict_matrix[s1]) and ('L' not in gold_matrix[s2] and 'R' not in gold_matrix[s2]):\n\t            dis += node_dis(predict_tree[s1], gold_tree[s2])\n", "        else:\n\t            stack1.append(predict_matrix[s1].index('R'))\n\t            stack1.append(predict_matrix[s1].index('L'))\n\t            stack2.append(gold_matrix[s2].index('R'))\n\t            stack2.append(gold_matrix[s2].index('L'))\n\t            dis += node_dis(predict_tree[s1], gold_tree[s2])\n\t    return dis\n\t# 计算决策路径抽取的TP,TP+FP,TP+FN\n\tdef decision_path(predict_tree, gold_tree, predict_matrix, gold_matrix):\n\t    leaf1, leaf2, paths1, paths2 = [], [], [], []\n", "    for i in range(len(predict_matrix)):\n\t        if ('L' not in predict_matrix[i] and 'R' not in predict_matrix[i]):\n\t            leaf1.append(i)\n\t    for node in leaf1:\n\t        path=[predict_tree[node]]\n\t        while node !=0:\n\t            # print(predict_matrix)\n\t            # print(node)\n\t            # print(predict_matrix[node])\n\t            # print()\n", "            path.append(predict_matrix[predict_matrix[node].index('F')][node])\n\t            path.append(predict_tree[predict_matrix[node].index('F')])\n\t            node =predict_matrix[node].index('F')\n\t        paths1.append(path)\n\t    for i in range(len(gold_matrix)):\n\t        if ('L' not in gold_matrix[i] and 'R' not in gold_matrix[i]):\n\t            leaf2.append(i)\n\t    for node in leaf2:\n\t        path=[gold_tree[node]]\n\t        while node !=0:\n", "            path.append(gold_matrix[gold_matrix[node].index('F')][node])\n\t            path.append(gold_tree[gold_matrix[node].index('F')])\n\t            node =gold_matrix[node].index('F')\n\t        paths2.append(path)\n\t    res = 0\n\t    for path1 in paths1:\n\t        for path2 in paths2:\n\t            if is_path_equal(path1, path2):\n\t                res += 1\n\t                break\n", "    return res,len(paths1),len(paths2)\n\t# 计算三元组抽取的TP,TP+FP,TP+FN\n\tdef triplet_extraction(predict_tree, gold_tree):\n\t    predict_triplet, gold_triplet = [], []\n\t    for i in range(len(predict_tree)):\n\t        for triplet in predict_tree[i][\"triples\"]:\n\t            predict_triplet.append(triplet)\n\t    for i in range(len(gold_tree)):\n\t        for triplet in gold_tree[i][\"triples\"]:\n\t            gold_triplet.append(triplet)\n", "    predict_triplet_num = len(list(set(predict_triplet)))\n\t    gold_triplet_num = len(list(set(gold_triplet)))\n\t    correct_triplet_num =len(list(set(gold_triplet)&set(predict_triplet)))\n\t    return [correct_triplet_num, predict_triplet_num, gold_triplet_num]\n\tdef node_extraction(predict_tree, gold_tree):\n\t    predict_node, gold_node = [], []\n\t    for i in range(len(predict_tree)):\n\t        if len(predict_tree[i]['triples'])>0:\n\t            predict_node.append(predict_tree[i])\n\t    for i in range(len(gold_tree)):\n", "        if len(gold_tree[i]['triples']) > 0:\n\t            gold_node.append(gold_tree[i])\n\t    predict_triplet_num = len(predict_node)\n\t    gold_triplet_num = len(gold_node)\n\t    correct_triplet_num = 0\n\t    for node1 in predict_node:\n\t        for node2 in gold_node:\n\t            if len(node1['triples'])>0 and node1['role'] == node2['role'] and node1['logical_rel'] == node2['logical_rel'] and set(node1['triples']) == set(node2['triples']):\n\t                correct_triplet_num +=1\n\t    return [correct_triplet_num, predict_triplet_num, gold_triplet_num]\n", "#评测函数，共计算四个指标: 决策树的Acc；三元组抽取的F1；决策路径的F1; 树的编辑距离\n\tdef eval(predict_tree, gold_tree):\n\t    # 将符合诊疗决策树的节点前序序列转化为代表诊疗决策树结构的节点矩阵，matrix[i][j]='F'/'L'/'R'表示第j个节点是第i个节点的父/左子/右子节点\n\t    for node in predict_tree:\n\t        for i in range(len(node['triples'])):\n\t            node['triples'][i]=(node['triples'][i][0].lower(), node['triples'][i][1].lower(), node['triples'][i][2].lower())\n\t    for node in gold_tree:\n\t        for i in range(len(node['triples'])):\n\t            node['triples'][i]=(node['triples'][i][0].lower(), node['triples'][i][1].lower(), node['triples'][i][2].lower())\n\t    predict_matrix = nodematrix(predict_tree)\n", "    gold_matrix = nodematrix(gold_tree)\n\t    # 用于计算生成树的Acc\n\t    tree_num = (0 if predict_tree == [] else 1)\n\t    correct_tree_num = is_tree_equal(predict_tree,gold_tree)\n\t    # 用于计算triplet抽取的F1\n\t    correct_triplet_num, predict_triplet_num, gold_triplet_num = triplet_extraction(predict_tree, gold_tree)\n\t    # 用于计算决策路径的F1\n\t    correct_path_num, predict_path_num, gold_path_num = decision_path(predict_tree, gold_tree, predict_matrix, gold_matrix)\n\t    # 用于计算树的编辑距离\n\t    edit_dis = edit_distance(predict_tree, gold_tree, predict_matrix, gold_matrix)\n", "    correct_node_num, predict_node_num, gold_node_num = node_extraction(predict_tree, gold_tree)\n\t    return tree_num,correct_tree_num, correct_triplet_num, predict_triplet_num, gold_triplet_num, correct_path_num, predict_path_num, gold_path_num, edit_dis,correct_node_num, predict_node_num, gold_node_num\n"]}
{"filename": "datasets/Text2DT/convert.py", "chunked_list": ["import os, json\n\trel_label_mapping = {\n\t    \"临床表现\": \"临床表现\",\n\t    \"治疗药物\": \"用药\",\n\t    \"治疗方案\": \"治疗方案\",\n\t    \"用法用量\": \"用法\",\n\t    \"基本情况\": \"基本情况\",\n\t    \"禁用药物\": \"慎用\",\n\t}\n\tdef preorder_traverse(tree, start, list_triple2relID, relations, side='left', TreeS=False):\n", "    if start >= len(tree):\n\t        return None, ''\n\t    root = tree[start]\n\t    triple2relID = list_triple2relID[start]\n\t    role = root['role']\n\t    tgt_seq = ''\n\t    if role == 'C':\n\t        if side == 'left':\n\t            tgt_seq += '若'\n\t        else:\n", "            tgt_seq += '否则，若'\n\t        tgt_seq += read_node(root, triple2relID, relations, TreeS)\n\t        tgt_seq += '，'\n\t        left_end, left_tgt_seq = preorder_traverse(tree, start+1, list_triple2relID, relations, TreeS=TreeS)\n\t        tgt_seq += left_tgt_seq\n\t        right_end, right_tgt_seq = preorder_traverse(tree, left_end+1, list_triple2relID, relations, side='right', TreeS=TreeS)\n\t        tgt_seq += right_tgt_seq\n\t        end = right_end\n\t    elif role == 'D':\n\t        if len(root['triples']) > 0:\n", "            if side == 'left':\n\t                tgt_seq += '则'\n\t            else:\n\t                tgt_seq += '否则'\n\t            tgt_seq += read_node(root, triple2relID, relations, TreeS)\n\t            tgt_seq += '，' if any([len(x['triples']) > 0 for x in tree[start+1:]]) else '。'\n\t        end = start\n\t    return end, tgt_seq\n\tdef read_node(node, triple2relID, relations, TreeS=False):\n\t    role = node['role']\n", "    triples = [tuple(t) for t in node['triples']]\n\t    logical_rel = node['logical_rel']\n\t    if logical_rel == 'or':\n\t        conjunction = '或'\n\t    elif role == 'C':\n\t        conjunction = '且'\n\t    else:\n\t        conjunction = '和'\n\t    clauses = []\n\t    visited = set()\n", "    for i, t1 in enumerate(triples):\n\t        if t1 in visited:\n\t            continue\n\t        id1 = triple2relID[t1]\n\t        clause = [id1]\n\t        visited.add(t1)\n\t        for t2 in triples[i+1:]:\n\t            if t2 in visited:\n\t                continue\n\t            if t1[-1] == t2[0] or t1[0] == t2[-1]:\n", "                id2 = triple2relID[t2]\n\t                clause.append(id2)\n\t                visited.add(t2)\n\t        # if len(clause) > 2:\n\t        #     print([relations[id] for id in clause])\n\t        try:\n\t            clause = sorted(clause, key=lambda x: location(x, relations))\n\t        except:\n\t            pass\n\t        clauses.append(clause)\n", "    try:\n\t        clauses = sorted(clauses, key=lambda x: clause_location(x, relations))\n\t    except:\n\t        pass\n\t    if TreeS:\n\t        clauses = conjunction.join(['...' for clause in clauses])\n\t    else:\n\t        clauses = conjunction.join([''.join([linearize_triple(relations[x]) for x in clause]) for clause in clauses])\n\t    return clauses\n\tdef location(relID, relations):\n", "    rel = relations[relID]\n\t    return sum(rel[0][:2] + rel[2][:2])\n\t    # return (sum(rel[2][:2]), sum(rel[0][:2]))\n\tdef clause_location(clause, relations):\n\t    return min([location(relID, relations) for relID in clause])\n\t# def linearize_clause(clause, relations):\n\t#     for tripleID in clause:\n\t#         triple = relations[tripleID]\n\t#     return\n\tdef linearize_triple(triple):\n", "    return '('+ triple[0][-1] + ', ' + rel_label_mapping[triple[1]] + ', ' + triple[2][-1] + ')'\n\tdef convert_sample(input_doc, RE=False, TreeS=False):\n\t    samples = []\n\t    with open(input_doc) as f:\n\t        lines = f.readlines()\n\t        lines = [eval(ele) for ele in lines]\n\t    for idx, line in enumerate(lines):\n\t        # print(line)\n\t        text = line[\"text\"]\n\t        tree = line[\"tree\"]\n", "        triples = line[\"relations\"]\n\t        list_triple2relID = []\n\t        visited = set()\n\t        for node in tree:\n\t            triple2relID = dict()\n\t            for triple in node['triples']:\n\t                triple = tuple(triple)\n\t                candidates = []\n\t                for relID, rel in enumerate(line[\"relations\"]):\n\t                    if (rel[0][-1], rel[1], rel[2][-1]) == triple:\n", "                        candidates.append(relID)\n\t                        if relID not in visited:\n\t                            triple2relID[triple] = relID\n\t                            visited.add(relID)\n\t                            break\n\t                if triple not in triple2relID:\n\t                    triple2relID[triple] = candidates[-1]\n\t            list_triple2relID.append(triple2relID)\n\t        _, tgt_seq = preorder_traverse(tree, 0, list_triple2relID, triples)\n\t        sample = {'input': text, 'target': tgt_seq, 'RE_target': '', 'TreeS_target': ''}\n", "        # print(text)\n\t        # print(tgt_seq)\n\t        if RE:\n\t            triples_seq = '[' + ', '.join([linearize_triple(x) for x in triples]) + ']'\n\t            sample['RE_target'] = triples_seq\n\t        if TreeS:\n\t            _, tgt_seq = preorder_traverse(tree, 0, list_triple2relID, triples, TreeS=True)\n\t            sample['TreeS_target'] = tgt_seq\n\t        samples.append(sample)\n\t    return samples\n", "if __name__ == '__main__':\n\t    in_dir = 'raw_data'\n\t    out_dir = './'\n\t    os.makedirs(out_dir, exist_ok=True)\n\t    for root, dirs, files in os.walk(in_dir):\n\t        for fn in files:\n\t            if fn[-4:] != '.txt':\n\t                continue\n\t            print(fn)\n\t            samples = convert_sample(os.path.join(in_dir, fn), RE=True, TreeS=True)\n", "            fname = fn.split('.')[0]\n\t            json_f = open(os.path.join(out_dir, fname + '.json'), 'w', encoding='utf-8')\n\t            for sample in samples:\n\t                json_line = json.dumps(sample, ensure_ascii=False)\n\t                print(json_line, file=json_f)\n"]}
{"filename": "datasets/Text2DT/raw_data/data_augment.py", "chunked_list": ["import random\n\timport copy\n\tdef data_augmentation(ori_fn, tgt_fn, type_len_2_mentions=None, repeat=1):\n\t    random.seed(2021)\n\t    with open(ori_fn) as f:\n\t        lines = f.readlines()\n\t        lines = [eval(ele) for ele in lines]\n\t    if type_len_2_mentions is None:\n\t        type_len_2_mentions = dict()\n\t        for line in lines:\n", "            entities = line[\"entities\"]\n\t            for ent in entities:\n\t                mention = ent[2]\n\t                mention_len = len(mention)\n\t                etype = ent[-1]\n\t                if (etype, mention_len) not in type_len_2_mentions:\n\t                    type_len_2_mentions[(etype, mention_len)] = []\n\t                if mention not in type_len_2_mentions[(etype, mention_len)]:\n\t                    type_len_2_mentions[(etype, mention_len)].append(mention)\n\t    new_lines = []\n", "    for line in lines:\n\t        text = line[\"text\"]\n\t        relations = line[\"relations\"]\n\t        entities = line[\"entities\"]\n\t        tree = line[\"tree\"]\n\t        skip_mentions = set()\n\t        for i, e1 in enumerate(entities):\n\t            for j, e2 in enumerate(entities):\n\t                if e1 == e2:\n\t                    continue\n", "                mention1 = e1[2]\n\t                mention2 = e2[2]\n\t                max_len_LCS = LCS(mention1, mention2)\n\t                if overlap(e1, e2) or max_len_LCS > max(len(mention1), len(mention2))/2:\n\t                    skip_mentions.add(mention1)\n\t                    skip_mentions.add(mention2)\n\t        for _ in range(repeat):\n\t            type_len_2_mentions_ = copy.deepcopy(type_len_2_mentions)\n\t            text_ = text\n\t            entites_ = []\n", "            mention_2_substitute = dict()\n\t            for i, ent in enumerate(entities):\n\t                ent_start, ent_end, mention, etype = ent\n\t                if mention in mention_2_substitute:\n\t                    substitute = mention_2_substitute[mention]\n\t                else:\n\t                    candidates = type_len_2_mentions_[(etype, len(mention))]\n\t                    if len(candidates) == 1 or mention in skip_mentions:\n\t                        substitute = mention\n\t                    else:\n", "                        substitute = random.choice(candidates)\n\t                    mention_2_substitute[mention] = substitute\n\t                text_ = text_[:ent_start] + substitute + text_[ent_end:]\n\t                entites_.append((ent_start, ent_end, substitute, etype))\n\t            relations_ = []\n\t            triple2substitute = dict()\n\t            for relation in relations:\n\t                head, rel_type, tail = relation\n\t                h_start, h_end, h_mention = head\n\t                t_start, t_end, t_mention = tail\n", "                triple = (h_mention, rel_type, t_mention)\n\t                if triple in triple2substitute:\n\t                    h_mention_ = triple2substitute[triple][0]\n\t                    t_mention_ = triple2substitute[triple][-1]\n\t                else:\n\t                    h_mention_ = mention_2_substitute[h_mention]\n\t                    t_mention_ = mention_2_substitute[t_mention]\n\t                    triple2substitute[triple] = (h_mention_, rel_type, t_mention_)\n\t                head_ = (h_start, h_end, h_mention_)\n\t                tail_ = (t_start, t_end, t_mention_)\n", "                relations_.append((head_, rel_type, tail_))\n\t            tree_ = []\n\t            for node in tree:\n\t                role = node['role']\n\t                triples = node['triples']\n\t                logical_rel = node['logical_rel']\n\t                triples_ = []\n\t                for triple in triples:\n\t                    triple_ = triple2substitute[tuple(triple)]\n\t                    triples_.append(triple_)\n", "                tree_.append({'role': role, 'triples': triples_, 'logical_rel': logical_rel})\n\t            # print(text)\n\t            # print(text_)\n\t            # print()\n\t            new_line = {'text': text_, 'relations': relations_, 'entities': entites_, 'tree': tree_}\n\t            new_lines.append(new_line)\n\t    out_f = open(tgt_fn, 'w')\n\t    for new_line in new_lines:\n\t        print(new_line, file=out_f)\n\tdef overlap(span1, span2):\n", "    return not (span1[1] <= span2[0] or span2[1] <= span1[0])\n\tdef LCS(text1: str, text2: str) -> int:\n\t    n = len(text1)\n\t    m = len(text2)\n\t    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\t    for i in range(1, n + 1):\n\t        for j in range(1, m + 1):\n\t            if text1[i - 1] == text2[j - 1]:\n\t                dp[i][j] = dp[i - 1][j - 1] + 1\n\t            else:\n", "                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\t    return dp[n][m]\n\tif __name__ == '__main__':\n\t    data_augmentation(\"train_dev_dt.txt\", \"aug_dt.txt\")\n"]}
