{"filename": "tests/__main__.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest all supported features.\n\tTest for determinism within one thread, record performance.\n\t'''\n\timport unittest\n\timport sys\n\tfrom argparse import ArgumentParser\n\tfrom . import testutils\n", "# Import all tests for unittest to run\n\tfrom .bits import *\n\tfrom .determinism import *\n\tfrom .features.basic import *\n\tfrom .features.errors import *\n\tfrom .features.rand_list import *\n\tfrom .features.temp import *\n\tdef parse_args():\n\t    parser = ArgumentParser(description='Run unit tests for constrainedrandom library')\n\t    parser.add_argument(\n", "        '--length-mul',\n\t        type=int,\n\t        default=1,\n\t        help='Multiplier for test length, when desiring greater certainty on performance.')\n\t    args, extra = parser.parse_known_args()\n\t    return args, extra\n\tif __name__ == \"__main__\":\n\t    args, extra = parse_args()\n\t    testutils.RandObjTestBase.TEST_LENGTH_MULTIPLIER = args.length_mul\n\t    # Reconstruct argv\n", "    argv = [sys.argv[0]] + extra\n\t    unittest.main(argv=argv)\n"]}
{"filename": "tests/bits.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest bitwise operations.\n\t'''\n\timport unittest\n\tfrom constrainedrandom.bits import get_bitslice, set_bitslice\n\tclass BitsliceTests(unittest.TestCase):\n\t    def test_get_bitslice(self):\n\t        print(\"Testing get_bitslice...\")\n", "        self.assertEqual(get_bitslice(0xdeadbeef, 11, 8), 0xe)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 3, 0), 0xf)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 4, 0), 0xf)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 6, 1), 0x37)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 19, 12), 0xdb)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 31, 0), 0xdeadbeef)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 32, 0), 0xdeadbeef)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 0, 0), 0x1)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 4, 4), 0x0)\n\t        self.assertEqual(get_bitslice(0xdeadbeef, 34, 32), 0x0)\n", "        print(\"... done testing get_bitslice.\")\n\t    def test_set_bitslice(self):\n\t        print(\"Testing set_bitslice...\")\n\t        self.assertEqual(set_bitslice(0xf00, 1, 0, 2), 0xf02)\n\t        self.assertEqual(set_bitslice(0xf00, 3, 2, 2), 0xf08)\n\t        self.assertEqual(set_bitslice(0xf00, 2, 1, 2), 0xf04)\n\t        self.assertEqual(set_bitslice(0xf00, 11, 8, 0), 0x0)\n\t        self.assertEqual(set_bitslice(0xf00, 11, 8, 3), 0x300)\n\t        self.assertEqual(set_bitslice(0xf00, 12, 11, 3), 0x1f00)\n\t        self.assertEqual(set_bitslice(0, 12, 11, 3), 0x1800)\n", "        self.assertEqual(set_bitslice(0, 15, 0, 0xdeadbeef), 0xbeef)\n\t        self.assertEqual(set_bitslice(0, 31, 16, 0xdeadbeef), 0xbeef0000)\n\t        self.assertEqual(set_bitslice(0xcafef00d, 15, 0, 0xdeadbeef), 0xcafebeef)\n\t        self.assertEqual(set_bitslice(0xcafef00d, 31, 16, 0xdeadbeef), 0xbeeff00d)\n\t        print(\"... done testing set_bitslice.\")\n\t    def test_errors(self):\n\t        print(\"Testing bitslice errors...\")\n\t        # lo > hi\n\t        self.assertRaises(AssertionError, get_bitslice, 0xdeadbeef, 3, 5)\n\t        self.assertRaises(AssertionError, set_bitslice, 0xdeadbeef, 3, 5, 3)\n", "        print(\"... done testing bitslice errors.\")\n"]}
{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "tests/testutils.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t''' Reusable definitions for unit testing '''\n\timport random\n\timport timeit\n\timport unittest\n\tfrom copy import deepcopy\n\tfrom typing import Any, Dict, List\n\tfrom constrainedrandom import RandObj, RandomizationError\n\tdef assertListOfDictsEqual(instance, list0, list1, msg) -> None:\n", "    '''\n\t    This is missing from unittest. It doesn't like it when two large lists of dictionaries\n\t    are different and compared using `assertListEqual` or `assertEqual`.\n\t    '''\n\t    for idx, (i, j) in enumerate(zip(list0, list1)):\n\t        instance.assertDictEqual(i, j, f\"iteration {idx} failed: \" + msg)\n\tclass RandObjTestBase(unittest.TestCase):\n\t    '''\n\t    Provides useful utilities for testing features of constrainedrandom.\n\t    Extend this class to create testcases.\n", "    '''\n\t    ITERATIONS = 1000\n\t    TEST_LENGTH_MULTIPLIER = 1\n\t    EXPECT_FAILURE = False\n\t    def setUp(self) -> None:\n\t        self.iterations = self.ITERATIONS * self.TEST_LENGTH_MULTIPLIER\n\t    def get_full_test_name(self) -> str:\n\t        '''\n\t        Returns the full path to the test being run.\n\t        '''\n", "        return f'{self.__class__.__module__}.{self.__class__.__name__}.{self._testMethodName}'\n\t    def get_randobj(self, *args) -> RandObj:\n\t        '''\n\t        Returns an instance of a `RandObj` for this problem, based\n\t        on a given seed.\n\t        '''\n\t        pass\n\t    def check(self, results) -> None:\n\t        '''\n\t        Checks the results of randomization are correct,\n", "        according to the defined problem.\n\t        '''\n\t        pass\n\t    def get_tmp_constraints(self) -> List[Any]:\n\t        '''\n\t        Returns temporary constraints for the problem, if any.\n\t        '''\n\t        return None\n\t    def get_tmp_values(self) -> Dict[str, Any]:\n\t        '''\n", "        Returns temporary values for the problem, if any.\n\t        '''\n\t        return None\n\t    def tmp_check(self, results) -> None:\n\t        '''\n\t        Checks the results of randomization are correct,\n\t        according to the defined problem plus any\n\t        temporary constraints/values.\n\t        '''\n\t        pass\n", "    def randomize_and_time(self, randobj, iterations, tmp_constraints=None, tmp_values=None) -> List[Dict[str, Any]]:\n\t        '''\n\t        Call randobj.randomize() iterations times, time it, print performance stats,\n\t        return the results.\n\t        '''\n\t        results = []\n\t        time_taken = 0\n\t        for _ in range(iterations):\n\t            start_time = timeit.default_timer()\n\t            if tmp_constraints is not None or tmp_values is not None:\n", "                randobj.randomize(with_constraints=tmp_constraints, with_values=tmp_values)\n\t            else:\n\t                randobj.randomize()\n\t            end_time = timeit.default_timer()\n\t            time_taken += end_time - start_time\n\t            # Extract the results\n\t            results.append(randobj.get_results())\n\t        hz = iterations/time_taken\n\t        print(f'{self.get_full_test_name()} took {time_taken:.4g}s for {iterations} iterations ({hz:.1f}Hz)')\n\t        return results\n", "    def randomize_and_check_result(\n\t        self,\n\t        randobj,\n\t        expected_results,\n\t        do_tmp_checks,\n\t        tmp_constraints,\n\t        tmp_values,\n\t        expected_tmp_results,\n\t        expected_post_tmp_results,\n\t        expected_add_results,\n", "        add_tmp_constraints,\n\t    ) -> None:\n\t        '''\n\t        Code to randomize a randobj and check its results against expected\n\t        results.\n\t        '''\n\t        if self.EXPECT_FAILURE:\n\t            self.assertRaises(RandomizationError, randobj.randomize)\n\t        else:\n\t            results = self.randomize_and_time(randobj, self.iterations)\n", "            assertListOfDictsEqual(self, expected_results, results, \"Non-determinism detected, results were not equal\")\n\t            if do_tmp_checks:\n\t                # Check applying temporary constraints is also deterministic\n\t                tmp_results = self.randomize_and_time(randobj, self.iterations, tmp_constraints, tmp_values)\n\t                assertListOfDictsEqual(\n\t                    self,\n\t                    expected_tmp_results,\n\t                    tmp_results,\n\t                    \"Non-determinism detected, results were not equal with temp constraints\"\n\t                )\n", "                # Check temporary constraints don't break base randomization determinism\n\t                post_tmp_results = self.randomize_and_time(randobj, self.iterations)\n\t                assertListOfDictsEqual(\n\t                    self,\n\t                    expected_post_tmp_results,\n\t                    post_tmp_results,\n\t                    \"Non-determinism detected, results were not equal after temp constraints\"\n\t                )\n\t                # Add temporary constraints permanently, see what happens\n\t                if add_tmp_constraints and tmp_constraints is not None:\n", "                    for constr, vars in tmp_constraints:\n\t                        randobj.add_constraint(constr, vars)\n\t                    add_results = self.randomize_and_time(randobj, self.iterations, tmp_values=tmp_values)\n\t                    assertListOfDictsEqual(\n\t                        self,\n\t                        expected_add_results,\n\t                        add_results,\n\t                        \"Non-determinism detected, results were not equal after constraints added\"\n\t                    )\n\t    def test_randobj(self) -> None:\n", "        '''\n\t        Reusable test function to randomize a RandObj for a number of iterations and perform checks.\n\t        Tests functionality based on `self.check`.\n\t        Reports performance stats.\n\t        Tests determinism.\n\t        Tests use of temporary constraints and values.\n\t        '''\n\t        tmp_constraints = self.get_tmp_constraints()\n\t        tmp_values = self.get_tmp_values()\n\t        do_tmp_checks = tmp_constraints is not None or tmp_values is not None\n", "        results = None\n\t        tmp_results = None\n\t        post_tmp_results = None\n\t        add_results = None\n\t        # Test with seed 0\n\t        r = random.Random(0)\n\t        randobj = self.get_randobj(r)\n\t        # Take a copy of the randobj for use later\n\t        randobj_copy = deepcopy(randobj)\n\t        if self.EXPECT_FAILURE:\n", "            self.assertRaises(RandomizationError, randobj.randomize)\n\t        else:\n\t            results = self.randomize_and_time(randobj, self.iterations)\n\t            self.check(results)\n\t            if do_tmp_checks:\n\t                # Check when applying temporary constraints\n\t                tmp_results = self.randomize_and_time(randobj, self.iterations, tmp_constraints, tmp_values)\n\t                self.tmp_check(tmp_results)\n\t                # Check temporary constraints don't break base randomization\n\t                post_tmp_results = self.randomize_and_time(randobj, self.iterations)\n", "                self.check(post_tmp_results)\n\t                # Add temporary constraints permanently, see what happens\n\t                if tmp_constraints is not None:\n\t                    for constr, vars in tmp_constraints:\n\t                        randobj.add_constraint(constr, vars)\n\t                    add_results = self.randomize_and_time(randobj, self.iterations, tmp_values=tmp_values)\n\t                    self.tmp_check(add_results)\n\t        # Test again with seed 0, ensuring results are the same.\n\t        r0 = random.Random(0)\n\t        randobj0 = self.get_randobj(r0)\n", "        self.randomize_and_check_result(\n\t            randobj0,\n\t            results,\n\t            do_tmp_checks,\n\t            tmp_constraints,\n\t            tmp_values,\n\t            tmp_results,\n\t            post_tmp_results,\n\t            add_results,\n\t            add_tmp_constraints=True,\n", "        )\n\t        # Also test the copy we took earlier.\n\t        self.randomize_and_check_result(\n\t            randobj_copy,\n\t            results,\n\t            do_tmp_checks,\n\t            tmp_constraints,\n\t            tmp_values,\n\t            tmp_results,\n\t            post_tmp_results,\n", "            add_results,\n\t            add_tmp_constraints=True,\n\t        )\n\t        # Test with seed 1, ensuring results are different\n\t        r1 = random.Random(1)\n\t        randobj1 = self.get_randobj(r1)\n\t        if self.EXPECT_FAILURE:\n\t            self.assertRaises(RandomizationError, randobj1.randomize)\n\t        else:\n\t            results1 = self.randomize_and_time(randobj1, self.iterations)\n", "            self.check(results1)\n\t            self.assertNotEqual(results, results1, \"Results were the same for two different seeds, check testcase.\")\n\t            if do_tmp_checks:\n\t                # Check results are also different when applying temporary constraints\n\t                tmp_results1 = self.randomize_and_time(randobj1, self.iterations, tmp_constraints, tmp_values)\n\t                self.tmp_check(tmp_results1)\n\t                self.assertNotEqual(tmp_results, tmp_results1,\n\t                                    \"Results were the same for two different seeds, check testcase.\")\n\t        # Test using global seeding, ensuring results are the same\n\t        # Don't add temp constraints this time, so that we can test this object again.\n", "        random.seed(0)\n\t        randobj0_global = self.get_randobj()\n\t        self.randomize_and_check_result(\n\t            randobj0_global,\n\t            results,\n\t            do_tmp_checks,\n\t            tmp_constraints,\n\t            tmp_values,\n\t            tmp_results,\n\t            post_tmp_results,\n", "            add_results,\n\t            add_tmp_constraints=False,\n\t        )\n\t        # Re-test the the globally-seeded object\n\t        # Must re-seed the global random module to ensure repeatability.\n\t        random.seed(0)\n\t        self.randomize_and_check_result(\n\t            randobj0_global,\n\t            results,\n\t            do_tmp_checks,\n", "            tmp_constraints,\n\t            tmp_values,\n\t            tmp_results,\n\t            post_tmp_results,\n\t            add_results,\n\t            add_tmp_constraints=True,\n\t        )\n\t        # TODO: Fix interaction between global random module and deepcopy.\n\t        # Details:\n\t        # There is an issue around copying an object that relies on the\n", "        # global random object - the state of any copied object is tied to\n\t        # its original.\n\t        # Having spent a lot of time debugging this issue, it is still very\n\t        # difficult to understand.\n\t        # Each individual copied RandObj instance points to a new random.Random\n\t        # instance, which shares state with the global module. It appears then\n\t        # in some instances that the object uses the global value in the random\n\t        # module, and in others it uses the copied one, meaning the state\n\t        # diverges.\n\t        # Right now, all I can conclude is it would take a lot of work to\n", "        # fully debug it, and it can be worked around by passing objects a\n\t        # seeded random.Random if the user desires reproducible objects.\n\t        # TODO: Make testing of copy more thorough when above issue fixed.\n\t        # Take a copy, to show that we can. Its behaviour can't be guaranteed\n\t        # to be deterministic w.r.t. randobj0_global due to issues around\n\t        # deepcopy interacting with the global random module.\n\t        # So, just test it can randomize.\n\t        randobj0_global_copy = deepcopy(randobj0_global)\n\t        if self.EXPECT_FAILURE:\n\t            self.assertRaises(RandomizationError, randobj0_global_copy.randomize)\n", "        else:\n\t            # Don't check results. Checks may fail due to the interaction\n\t            # between deepcopy and global random. E.g. if we check that temp\n\t            # constraints are not followed when not supplied, they may\n\t            # be due to the interaction between random and deepcopy.\n\t            # This just ensures it doesn't crash.\n\t            self.randomize_and_time(randobj0_global_copy, self.iterations)\n\t            self.randomize_and_time(randobj0_global_copy, self.iterations, tmp_constraints, tmp_values)\n"]}
{"filename": "tests/determinism.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest determinism between processes.\n\t'''\n\timport os\n\timport subprocess\n\timport timeit\n\timport unittest\n\tclass DeterminismTest(unittest.TestCase):\n", "    '''\n\t    Test determinism between processes when PYTHONHASHSEED changes\n\t    between runs.\n\t    PYTHONHASHSEED controls the `hash` function in Python, and so\n\t    affects iteration order of dictionaries and sets.\n\t    '''\n\t    def test_determinism(self):\n\t        # Create a program that does some determinstic randomization.\n\t        # Indendation here is poor but arguably more readable than doing\n\t        # a string per line.\n", "        program = '''\n\timport random\n\tfrom constrainedrandom import RandObj\n\trandom.seed(0)\n\tr = RandObj()\n\tr.add_rand_var('a', domain=range(100))\n\tr.add_rand_var('b', domain=range(100))\n\tr.add_rand_var('c', domain=range(100))\n\tdef sum_lt50(a, b, c):\n\t    return a + b + c < 50\n", "r.add_constraint(sum_lt50, ('a', 'b', 'c'))\n\tresults = []\n\tfor _ in range(100):\n\t    r.randomize()\n\t    results.append(r.get_results())\n\tprint(results)\n\texit(0)\n\t'''\n\t        cmd = ['python3', '-c', program]\n\t        # Capture the current env\n", "        env = dict(os.environ)\n\t        results = []\n\t        print(\"Testing thread-level determinism...\")\n\t        start_time = timeit.default_timer()\n\t        for hashseed in range(10):\n\t            # Vary the PYTHONHASHSEED to introduce non-determinism in set/dict ordering\n\t            env['PYTHONHASHSEED'] = str(hashseed)\n\t            process_result = subprocess.run(cmd, env=env, capture_output=True, check=True)\n\t            # Result is a string\n\t            result = process_result.stdout\n", "            if len(results) > 0:\n\t                # Check these results are the same as the rest\n\t                self.assertEqual(results[-1], result, \"Results were not deterministic when PYTHONHASHSEED changes.\")\n\t            results.append(result)\n\t        end_time = timeit.default_timer()\n\t        total_time = end_time - start_time\n\t        print(f\"... done testing thread-level determinism. Took {total_time:.4g}s.\")\n"]}
{"filename": "tests/features/errors.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest error cases.\n\t'''\n\tfrom random import Random\n\tfrom constrainedrandom import RandObj, RandomizationError\n\tfrom .basic import MultiSum\n\tfrom .. import testutils\n\tclass ImpossibleThorough(MultiSum):\n", "    '''\n\t    Test the thorough solver for a problem that will always fail.\n\t    The thorough solver almost always converges, so it's very\n\t    hard to construct a problem 'too hard' for it.\n\t    Instead, make it impossible and only enable the thorough\n\t    solver.\n\t    '''\n\t    EXPECT_FAILURE = True\n\t    def get_randobj(self, *args):\n\t        randobj = super().get_randobj(*args)\n", "        # Only use thorough solver.\n\t        randobj.set_solver_mode(naive=False, sparse=False)\n\t        # Make problem impossible so that numbers can't sum to 41.\n\t        def mod_2(z):\n\t            return z % 2 == 0\n\t        randobj.add_constraint(mod_2, ('x',))\n\t        randobj.add_constraint(mod_2, ('y',))\n\t        randobj.add_constraint(mod_2, ('z',))\n\t        # Setting max domain size to 1 makes this run a bit quicker.\n\t        randobj._max_domain_size = 1\n", "        return randobj\n\tclass ImpossibleOneVar(testutils.RandObjTestBase):\n\t    '''\n\t    Test an impossible constraint problem with one variable.\n\t    '''\n\t    def get_randobj(self, *args):\n\t        randobj = RandObj(*args)\n\t        def eq_zero(x):\n\t            return x == 0\n\t        randobj.add_rand_var('a', domain=[1,], constraints=[eq_zero,])\n", "        return randobj\n\t    def test_randobj(self):\n\t        # Override the whole test function, because unsolvable\n\t        # simple single variables fail on creation, rather\n\t        # than when randomize is called.\n\t        self.assertRaises(RandomizationError, self.get_randobj, 0)\n\t        self.assertRaises(RandomizationError, self.get_randobj, 1)\n\tclass ImpossibleComplexVar(testutils.RandObjTestBase):\n\t    '''\n\t    Test an impossible constraint problem with one variable, where\n", "    the variable state space is too large to fail on creation.\n\t    '''\n\t    EXPECT_FAILURE = True\n\t    def get_randobj(self, *args):\n\t        randobj = RandObj(*args)\n\t        def eq_minus_one(x):\n\t            return x == -1\n\t        randobj.add_rand_var('a', bits=64, constraints=[eq_minus_one,])\n\t        return randobj\n\tclass ImpossibleMultiVar(testutils.RandObjTestBase):\n", "    '''\n\t    Test an impossible constraint problem with multiple variables.\n\t    '''\n\t    EXPECT_FAILURE = True\n\t    def get_randobj(self, *args):\n\t        randobj = RandObj(*args)\n\t        def lt_5(x):\n\t            return x < 5\n\t        randobj.add_rand_var('a', domain=range(10), constraints=[lt_5,])\n\t        randobj.add_rand_var('b', domain=range(10), constraints=[lt_5,])\n", "        def sum_gt_10(x, y):\n\t            return x + y > 10\n\t        randobj.add_constraint(sum_gt_10, ('a', 'b'))\n\t        return randobj\n"]}
{"filename": "tests/features/__init__.py", "chunked_list": []}
{"filename": "tests/features/rand_list.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest random lists.\n\t'''\n\tfrom random import Random\n\tfrom constrainedrandom import RandObj\n\tfrom constrainedrandom.utils import unique\n\tfrom .. import testutils\n\tdef plus_or_minus_one(listvar):\n", "    val = listvar[0]\n\t    for nxt_val in listvar[1:]:\n\t        if nxt_val == val + 1 or nxt_val == val - 1:\n\t            val = nxt_val\n\t            continue\n\t        return False\n\t    return True\n\tdef sum_0(listvar):\n\t    return sum(listvar) == 0\n\tclass RandList(testutils.RandObjTestBase):\n", "    '''\n\t    Test a randomized list.\n\t    '''\n\t    ITERATIONS = 1000\n\t    LENGTH = 10\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        def not_7(x):\n\t            return x != 7\n\t        r.add_rand_var('listvar', domain=range(10), constraints=[not_7], length=self.LENGTH)\n", "        return r\n\t    def check(self, results):\n\t        nonzero_seen = False\n\t        for result in results:\n\t            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n\t            for x in result['listvar']:\n\t                self.assertIn(x, range(10), \"Value was wrongly randomized\")\n\t                self.assertNotEqual(x, 7, \"Scalar constraint not respected\")\n\t                if x != 0:\n", "                    nonzero_seen = True\n\t        self.assertTrue(nonzero_seen, \"All values were zero\")\n\tclass RandListConstrained(testutils.RandObjTestBase):\n\t    '''\n\t    Test a randomized list with a basic list constraint.\n\t    Keep it simple enough that we use the CSP list solver.\n\t    '''\n\t    ITERATIONS = 1000\n\t    LENGTH = 2\n\t    def get_randobj(self, *args):\n", "        r = RandObj(*args)\n\t        def not_7(x):\n\t            return x != 7\n\t        r.add_rand_var('listvar', domain=range(10), constraints=[not_7], length=self.LENGTH)\n\t        def sum_lt_val(listvar):\n\t            return sum(listvar) < (6 * self.LENGTH)\n\t        r.add_constraint(sum_lt_val, ('listvar',))\n\t        return r\n\t    def check(self, results):\n\t        nonzero_seen = False\n", "        for result in results:\n\t            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n\t            self.assertLess(sum(result['listvar']), (8 * self.LENGTH), \"List constraint not followed\")\n\t            for x in result['listvar']:\n\t                self.assertIn(x, range(10), \"Value was wrongly randomized\")\n\t                self.assertNotEqual(x, 7, \"Scalar constraint not respected\")\n\t                if x != 0:\n\t                    nonzero_seen = True\n\t        self.assertTrue(nonzero_seen, \"All values were zero\")\n", "class RandListConstrainedHard(RandListConstrained):\n\t    '''\n\t    Test a randomized list with a basic list constraint.\n\t    Make it sufficiently complex that it requires the random solver,\n\t    do this by increasing the length.\n\t    '''\n\t    ITERATIONS = 1000\n\t    LENGTH = 10\n\tclass RandListConstrainedVeryHard(testutils.RandObjTestBase):\n\t    '''\n", "    Test a randomized list with a difficult constraint on the values in the list.\n\t    '''\n\t    ITERATIONS = 10\n\t    LENGTH = 10\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('listvar', domain=range(10), length=self.LENGTH, list_constraints=(plus_or_minus_one,))\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n", "            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n\t            prev = None\n\t            for x in result['listvar']:\n\t                self.assertIn(x, range(10), \"Value was wrongly randomized\")\n\t                if prev is not None:\n\t                    self.assertTrue(x == prev + 1 or x == prev - 1, \"list constraint not followed\")\n\t                prev = x\n\tclass RandListMultivar(testutils.RandObjTestBase):\n\t    '''\n", "    Test a randomized list with constraints on the values in the list,\n\t    also with constraints over multiple variables.\n\t    '''\n\t    ITERATIONS = 10\n\t    LENGTH = 10\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('listvar', domain=range(10), length=self.LENGTH, list_constraints=(plus_or_minus_one,))\n\t        # Give x slightly larger range so it is sometimes impossible\n\t        r.add_rand_var('x', domain=range(11), order=1)\n", "        def in_list(x, listvar):\n\t            return x in listvar\n\t        r.add_constraint(in_list, ('x', 'listvar'))\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n\t            prev = None\n\t            for l in result['listvar']:\n", "                self.assertIn(l, range(10), \"Value was wrongly randomized\")\n\t                if prev is not None:\n\t                    self.assertTrue(l == prev + 1 or l == prev - 1, \"list constraint not followed\")\n\t                prev = l\n\t            self.assertIn(result['x'], result['listvar'])\n\tclass RandListUnique(testutils.RandObjTestBase):\n\t    '''\n\t    Test that the unique constraint works on a random list.\n\t    '''\n\t    ITERATIONS = 100\n", "    LENGTH = 10\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var(\n\t            'listvar',\n\t            domain=range(10),\n\t            length=self.LENGTH,\n\t            list_constraints=(unique,),\n\t            disable_naive_list_solver=True,\n\t        )\n", "        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n\t            for x_idx, x in enumerate(result['listvar']):\n\t                self.assertIn(x, range(10), \"Value was wrongly randomized\")\n\t                for y_idx, y in enumerate(result['listvar']):\n\t                    if x_idx != y_idx:\n\t                        self.assertNotEqual(x, y, \"List elements were not unique\")\n", "class RandListTempConstraints(testutils.RandObjTestBase):\n\t    '''\n\t    Test a randomized list with temporary constraints.\n\t    '''\n\t    ITERATIONS = 100\n\t    LENGTH = 10\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        def not_4(x):\n\t            return x != 4\n", "        def not_too_many_zeros(listvar):\n\t            zeros = [x for x in listvar if x == 0]\n\t            return len(zeros) < 5\n\t        r.add_rand_var('listvar', domain=range(10), constraints=[not_4],\n\t            length=self.LENGTH, list_constraints=[not_too_many_zeros])\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertIsInstance(result['listvar'], list, \"Var with length > 0 wasn't a list\")\n\t            self.assertEqual(len(result['listvar']), self.LENGTH, \"Length incorrect\")\n", "            zeros = 0\n\t            for x in result['listvar']:\n\t                self.assertIn(x, range(10), \"Value was wrongly randomized\")\n\t                self.assertNotEqual(x, 4, \"Scalar constraint not respected\")\n\t                if x == 0:\n\t                    zeros += 1\n\t            self.assertLess(zeros, 5, \"List constraint not respected\")\n\t    def get_tmp_constraints(self):\n\t        def temp_constr(listvar):\n\t            for x in listvar:\n", "                if x == 5:\n\t                    return False\n\t            return True\n\t        return [(temp_constr, ('listvar',))]\n\t    def tmp_check(self, results):\n\t        self.check(results)\n\t        for result in results:\n\t            for x in result['listvar']:\n\t                self.assertNotEqual(x, 5, \"Temp constraint not respected\")\n\tclass RandListSumZero(testutils.RandObjTestBase):\n", "    ITERATIONS = 100\n\t    def get_randobj(self, *args):\n\t        randobj = RandObj(*args)\n\t        randobj.add_rand_var('listvar', length=10, domain=range(-10, 11))\n\t        randobj.add_constraint(sum_0, ('listvar',))\n\t        return randobj\n\t    def check(self, results):\n\t        nonzero_seen = False\n\t        for result in results:\n\t            sum = 0\n", "            listvar = result['listvar']\n\t            self.assertIsInstance(listvar, list, \"Returned non-list\")\n\t            self.assertEqual(len(listvar), 10, \"Length incorrect\")\n\t            for val in listvar:\n\t                if val != 0:\n\t                    nonzero_seen = True\n\t                sum += val\n\t            self.assertEqual(sum, 0, \"Sum must be zero but wasn't.\")\n\t        self.assertTrue(nonzero_seen, \"Should not always solve this problem with a list full of zeroes.\")\n\tclass RandListSparse(testutils.RandObjTestBase):\n", "    '''\n\t    Test a randomized list with the sparse solver.\n\t    Make it hard enough to fail with a depth-first search.\n\t    '''\n\t    ITERATIONS = 1\n\t    def get_randobj(self, *args):\n\t        randobj = RandObj(*args)\n\t        randobj.set_solver_mode(naive=False, sparse=True, thorough=False)\n\t        randobj.add_rand_var('listvar1', length=10, domain=range(-10, 11))\n\t        randobj.add_constraint(sum_0, ('listvar1',))\n", "        randobj.add_rand_var('listvar2', length=3, domain=range(-10, 11), list_constraints=[unique])\n\t        def not_in_list(listvar1, listvar2):\n\t            for x in listvar2:\n\t                if x in listvar1:\n\t                    return False\n\t            return True\n\t        randobj.add_constraint(not_in_list, ('listvar1', 'listvar2'))\n\t        randobj.add_rand_var('listvar3', length=2, domain=range(-10,11))\n\t        def awful_constraint(listvar1, listvar2, listvar3):\n\t            total = 1\n", "            for val in listvar1:\n\t                if val != 0:\n\t                    total = total * val\n\t            for val in listvar2:\n\t                if val != 0:\n\t                    total = total * val\n\t            for val in listvar3:\n\t                if val != 0:\n\t                    total = total * val\n\t            return total % 3 == 1\n", "        randobj.add_constraint(awful_constraint, ('listvar1', 'listvar2', 'listvar3'))\n\t        return randobj\n\t    def check(self, results):\n\t        nonzero_seen = False\n\t        for result in results:\n\t            sum = 0\n\t            product = 1\n\t            listvar1 = result['listvar1']\n\t            listvar2 = result['listvar2']\n\t            listvar3 = result['listvar3']\n", "            self.assertIsInstance(listvar1, list, \"Returned non-list\")\n\t            self.assertEqual(len(listvar1), 10, \"Length incorrect\")\n\t            self.assertIsInstance(listvar2, list, \"Returned non-list\")\n\t            self.assertEqual(len(listvar2), 3, \"Length incorrect\")\n\t            self.assertIsInstance(listvar3, list, \"Returned non-list\")\n\t            self.assertEqual(len(listvar3), 2, \"Length incorrect\")\n\t            for val in listvar1:\n\t                if val != 0:\n\t                    nonzero_seen = True\n\t                    product = product * val\n", "                sum += val\n\t                self.assertNotIn(val, listvar2, \"Lists must be disjoint\")\n\t            for val in listvar2:\n\t                if val != 0:\n\t                    product = product * val\n\t            for val in listvar3:\n\t                if val != 0:\n\t                    product = product * val\n\t            self.assertEqual(sum, 0, \"Sum must be zero but wasn't.\")\n\t            self.assertEqual(product % 3, 1, \"Product mod 3 wasn't 1.\")\n", "        self.assertTrue(nonzero_seen, \"Should not always solve this problem with a list full of zeroes.\")\n"]}
{"filename": "tests/features/basic.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest basic features.\n\t'''\n\tfrom enum import Enum, IntEnum\n\tfrom random import Random\n\tfrom constrainedrandom import RandObj\n\tfrom examples.ldinstr import ldInstr\n\tfrom .. import testutils\n", "class BasicFeatures(testutils.RandObjTestBase):\n\t    '''\n\t    Test all basic single random variable features.\n\t    '''\n\t    ITERATIONS = 10000\n\t    class MyEnum(Enum):\n\t        A = 'a'\n\t        B = 'b'\n\t    class MyIntEnum(IntEnum):\n\t        ONE = 1\n", "        TWO = 2\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var(\"foo\", domain=range(100))\n\t        r.add_rand_var(\"bar\", domain=(1,2,3,))\n\t        r.add_rand_var(\"baz\", bits=4)\n\t        r.add_rand_var(\"bob\", domain={0: 9, 1: 1})\n\t        def not_3(foo):\n\t            return foo != 3\n\t        r.add_rand_var(\"dan\", domain=range(5), constraints=(not_3,))\n", "        def custom_fn(arg):\n\t            return arg + 1\n\t        r.add_rand_var(\"joe\", fn=custom_fn, args=(1,))\n\t        r.add_rand_var(\"enum\", domain=self.MyEnum)\n\t        r.add_rand_var(\"int_enum\", domain=self.MyIntEnum)\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertLessEqual(0, result['foo'])\n\t            self.assertLess(result['foo'], 100)\n", "            self.assertIn(result['bar'], (1,2,3,))\n\t            self.assertLessEqual(0, result['baz'])\n\t            self.assertLess(result['baz'], (1 << 4))\n\t            self.assertIn(result['bob'], (0,1))\n\t            self.assertIn(result['dan'], (0,1,2,4))\n\t            self.assertEqual(result['joe'], 2)\n\t            self.assertIn(result['enum'], (self.MyEnum.A, self.MyEnum.B))\n\t            self.assertIn(result['int_enum'], (1, 2))\n\tclass BasicSparse(BasicFeatures):\n\t    '''\n", "    Test basic features, only with sparse constraint solver.\n\t    '''\n\t    def get_randobj(self, *args):\n\t        randobj = super().get_randobj(*args)\n\t        randobj.set_solver_mode(naive=False, sparse=True, thorough=False)\n\t        return randobj\n\tclass BasicThorough(BasicFeatures):\n\t    '''\n\t    Test basic features, only with thorough constraint solver.\n\t    '''\n", "    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        randobj = super().get_randobj(*args)\n\t        randobj.set_solver_mode(naive=False, sparse=False, thorough=True)\n\t        return randobj\n\tclass MultiBasic(testutils.RandObjTestBase):\n\t    '''\n\t    Test a basic multi-variable constraint (easy to randomly fulfill the constraint).\n\t    '''\n\t    ITERATIONS = 100\n", "    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var(\"a\", domain=range(10))\n\t        r.add_rand_var(\"b\", domain=range(10))\n\t        r.add_rand_var(\"c\", domain=range(5,10))\n\t        def abc(a, b, c):\n\t            return a < b < c\n\t        r.add_constraint(abc, (\"a\",\"b\",\"c\"))\n\t        return r\n\t    def check(self, results):\n", "        for result in results:\n\t            self.assertLess(result['a'], result['b'], f'Check failed for {result=}')\n\t            self.assertLess(result['b'], result['c'], f'Check failed for {result=}')\n\tclass MultiPlusOne(testutils.RandObjTestBase):\n\t    '''\n\t    Test a slightly trickier multi-variable constraint (much less likely to just randomly get it right).\n\t    '''\n\t    ITERATIONS = 100\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n", "        # Very unlikely (1/100) to solve the problem naively, just skip to applying constraints.\n\t        r.set_solver_mode(naive=False)\n\t        r.add_rand_var(\"x\", domain=range(100), order=0)\n\t        r.add_rand_var(\"y\", domain=range(100), order=1)\n\t        def plus_one(x, y):\n\t            return y == x + 1\n\t        r.add_constraint(plus_one, (\"x\", \"y\"))\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n", "            self.assertEqual(result['y'], result['x'] + 1, f'Check failed for {result=}')\n\tclass MultiSum(testutils.RandObjTestBase):\n\t    '''\n\t    Test a much trickier multi-variable constraint.\n\t    '''\n\t    ITERATIONS = 100\n\t    def get_randobj(self, *args):\n\t        '''\n\t        Very difficult problem to solve naively, to force the solver\n\t        into using MultiVarProblem. Used by several tests.\n", "        '''\n\t        r = RandObj(*args)\n\t        # Very unlikely (1/200^3) to solve the problem naively, just skip to applying constraints.\n\t        r.set_solver_mode(naive=False)\n\t        def nonzero(x):\n\t            return x != 0\n\t        r.add_rand_var(\"x\", domain=range(-100, 100), order=0, constraints=(nonzero,))\n\t        r.add_rand_var(\"y\", domain=range(-100, 100), order=1, constraints=(nonzero,))\n\t        r.add_rand_var(\"z\", domain=range(-100, 100), order=1, constraints=(nonzero,))\n\t        def sum_41(x, y, z):\n", "            return x + y + z == 41\n\t        r.add_constraint(sum_41, (\"x\", \"y\", \"z\"))\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertEqual(result['x'] + result['y'] + result['z'], 41, f'Check failed for {result=}')\n\t            self.assertNotEqual(result['x'], 0, f'Check failed for {result=}')\n\tclass MultiOrder(testutils.RandObjTestBase):\n\t    '''\n\t    Test a problem that benefits greatly from being solved in a certain order.\n", "    '''\n\t    ITERATIONS = 100\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var(\"a\", domain=range(100), order=0)\n\t        r.add_rand_var(\"b\", domain=range(100), order=1)\n\t        def mul_lt1000(a, b):\n\t            return a * b < 1000\n\t        r.add_constraint(mul_lt1000, ('a', 'b'))\n\t        r.add_rand_var(\"c\", domain=range(100), order=2)\n", "        def sum_lt100(a, b, c):\n\t            return a + b + c < 100\n\t        r.add_constraint(sum_lt100, ('a', 'b', 'c'))\n\t        return r\n\t    def check(self, results):\n\t        for result in results:\n\t            self.assertLess(result['a'] * result['b'], 1000, f'Check failed for {result=}')\n\t            self.assertLess(result['a'] + result['b'] + result['c'], 100, f'Check failed for {result=}')\n\tclass Dist(testutils.RandObjTestBase):\n\t    '''\n", "    Test a distribution.\n\t    '''\n\t    ITERATIONS = 10000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var(\"dist\", domain={0: 25, 1 : 25, range(2,5): 50})\n\t        return r\n\t    def check(self, results):\n\t        count_zeroes = 0\n\t        count_ones = 0\n", "        count_two_plus = 0\n\t        for result in results:\n\t            val = result['dist']\n\t            if val == 0:\n\t                count_zeroes += 1\n\t            elif val == 1:\n\t                count_ones += 1\n\t            elif 2 <= val < 5:\n\t                count_two_plus += 1\n\t            else:\n", "                self.fail(\"too high!\")\n\t        # Check it's roughly the right distribution.\n\t        # Work out what the distribution should be,\n\t        modified_iterations = self.ITERATIONS * self.TEST_LENGTH_MULTIPLIER\n\t        quarter = modified_iterations // 4\n\t        half = modified_iterations // 2\n\t        # Allow 10% leeway,\n\t        q_delta = quarter // 10\n\t        h_delta = half // 10\n\t        quarter_range = range(quarter - q_delta, quarter + q_delta + 1)\n", "        half_range = range(half - h_delta, half + h_delta + 1)\n\t        self.assertIn(count_zeroes, quarter_range)\n\t        self.assertIn(count_ones, quarter_range)\n\t        self.assertIn(count_two_plus, half_range)\n\tclass Instr(testutils.RandObjTestBase):\n\t    '''\n\t    Test something that looks like an instruction opcode, one of the desired\n\t    use cases for this library.\n\t    '''\n\t    ITERATIONS = 1000\n", "    def get_randobj(self, *args):\n\t        ld_instr = ldInstr(*args)\n\t        return ld_instr\n\t    def check(self, results):\n\t        for result in results:\n\t            if result['wb']:\n\t                self.assertNotEqual(result['src0'], result['dst0'])\n\t            address = result['src0_value'] + result['imm0']\n\t            self.assertLess(address, 0xffffffff)\n\t            self.assertEqual(address & 3, 0)\n", "class ThoroughMultiSum(MultiSum):\n\t    '''\n\t    Test the thorough solver for a hard problem.\n\t    '''\n\t    ITERATIONS = 5\n\t    def get_randobj(self, *args):\n\t        randobj = super().get_randobj(*args)\n\t        # Set max_iterations to 1 to ensure thorough solver is used.\n\t        randobj._max_iterations = 1\n\t        # Set a smaller max domain size to speed thigns up a bit.\n", "        randobj._max_domain_size = 50\n\t        return randobj\n"]}
{"filename": "tests/features/temp.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tTest temporary constraints and values.\n\t'''\n\tfrom random import Random\n\tfrom constrainedrandom import RandObj\n\tfrom . import basic\n\tfrom .. import testutils\n\tclass TempConstraint(testutils.RandObjTestBase):\n", "    '''\n\t    Test using a simple temporary constraint.\n\t    '''\n\t    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('a', domain=range(10))\n\t        return r\n\t    def check(self, results):\n\t        seen_gt_4 = False\n", "        for result in results:\n\t            self.assertIn(result['a'], range(10))\n\t            if result['a'] >= 5:\n\t                seen_gt_4 = True\n\t        self.assertTrue(seen_gt_4, \"Temporary constraint followed when not given\")\n\t    def get_tmp_constraints(self):\n\t        def tmp_constraint(a):\n\t            return a < 5\n\t        return [(tmp_constraint, ('a',))]\n\t    def tmp_check(self, results):\n", "        for result in results:\n\t            self.assertIn(result['a'], range(5))\n\tclass TempMultiConstraint(testutils.RandObjTestBase):\n\t    '''\n\t    Test using a temporary multi-variable constraint.\n\t    '''\n\t    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('a', domain=range(10))\n", "        r.add_rand_var('b', domain=range(100))\n\t        return r\n\t    def check(self, results):\n\t        seen_tmp_constraint_false = False\n\t        for result in results:\n\t            self.assertIn(result['a'], range(10))\n\t            self.assertIn(result['b'], range(100))\n\t            if result['a'] * result['b'] >= 200 and result['a'] >= 5:\n\t                seen_tmp_constraint_false = True\n\t        self.assertTrue(seen_tmp_constraint_false, \"Temporary constraint followed when not given\")\n", "    def get_tmp_constraints(self):\n\t        def a_mul_b_lt_200(a, b):\n\t            return a * b < 200\n\t        return [(a_mul_b_lt_200, ('a', 'b'))]\n\t    def tmp_check(self, results):\n\t        for result in results:\n\t            # Do normal checks\n\t            self.assertIn(result['a'], range(10))\n\t            self.assertIn(result['b'], range(100))\n\t            # Also check the temp constraint is followed\n", "            self.assertLess(result['a'] * result['b'], 200)\n\tclass MixedTempConstraints(testutils.RandObjTestBase):\n\t    '''\n\t    Test using a temporary multi-variable constraint, with a single-variable constraint.\n\t    '''\n\t    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('a', domain=range(10))\n\t        r.add_rand_var('b', domain=range(100))\n", "        return r\n\t    def check(self, results):\n\t        seen_tmp_constraint_false = False\n\t        for result in results:\n\t            self.assertIn(result['a'], range(10))\n\t            self.assertIn(result['b'], range(100))\n\t            if result['a'] * result['b'] >= 200 and result['a'] >= 5:\n\t                seen_tmp_constraint_false = True\n\t        self.assertTrue(seen_tmp_constraint_false, \"Temporary constraint followed when not given\")\n\t    def tmp_check(self, results):\n", "        for result in results:\n\t            # Do normal checks\n\t            self.assertIn(result['a'], range(5))\n\t            self.assertIn(result['b'], range(100))\n\t            # Also check the temp constraint is followed\n\t            self.assertLess(result['a'] * result['b'], 200)\n\t    def get_tmp_constraints(self):\n\t        def a_lt_5(a):\n\t            return a < 5\n\t        def a_mul_b_lt_200(a, b):\n", "            return a * b < 200\n\t        return [(a_lt_5, ('a',)), (a_mul_b_lt_200, ('a', 'b'))]\n\tclass TrickyTempConstraints(basic.MultiSum):\n\t    '''\n\t    Force use of MultiVarProblem with a difficult problem, and\n\t    also use temporary constraints.\n\t    '''\n\t    ITERATIONS = 30\n\t    def check(self, results):\n\t        # Normal checks\n", "        super().check(results)\n\t        # Check that we see x and y sum to greater than 50 when\n\t        # the temporary constraint isn't in place.\n\t        # Temp constraint not respected - check for at least one instance\n\t        # where all conditions are not respected.\n\t        temp_constraint_respected = True\n\t        for result in results:\n\t            if result['x'] + result['y'] >= 50 and \\\n\t                result['x'] % 2 != 0 and \\\n\t                (result['y'] + result['z']) % 3 != 0:\n", "                temp_constraint_respected = False\n\t        self.assertFalse(\n\t            temp_constraint_respected,\n\t            \"Temp constraint should not be followed when not applied\"\n\t        )\n\t    def get_tmp_constraints(self):\n\t        # Use a few extra temporary constraints to make the problem even harder\n\t        tmp_constraints = []\n\t        def tmp_abs_sum_xy_lt50(x, y):\n\t            return abs(x) + abs(y) < 50\n", "        tmp_constraints.append((tmp_abs_sum_xy_lt50, ('x', 'y')))\n\t        def tmp_x_mod2(x):\n\t            return x % 2 == 0\n\t        tmp_constraints.append((tmp_x_mod2, ('x',)))\n\t        def tmp_yz_mod3(y, z):\n\t            return (y + z) % 3 == 0\n\t        tmp_constraints.append((tmp_yz_mod3, ('y', 'z')))\n\t        return tmp_constraints\n\t    # Check that the temp constraint is respected\n\t    def tmp_check(self, results):\n", "        # Normal checks\n\t        super().check(results)\n\t        # Temp constraint respected\n\t        for result in results:\n\t            self.assertLess(result['x'] + result['y'], 50, \"Temp constraint not respected\")\n\t            self.assertTrue(result['x'] % 2 == 0, \"Temp constraint not respected\")\n\t            self.assertTrue((result['y'] + result['z']) % 3 == 0, \"Temp constraint not respected\")\n\tclass WithValues(testutils.RandObjTestBase):\n\t    '''\n\t    Basic test for with_values.\n", "    '''\n\t    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('a', domain=range(10))\n\t        r.add_rand_var('b', domain=range(100))\n\t        return r\n\t    def check(self, results):\n\t        # Ensure we see the temporary value violated at least once\n\t        non_52_seen = False\n", "        for result in results:\n\t            self.assertIn(result['a'], range(10))\n\t            self.assertIn(result['b'], range(100))\n\t            if result['b'] != 52:\n\t                non_52_seen = True\n\t        self.assertTrue(non_52_seen, \"Temporary value used when it shouldn't be\")\n\t    def get_tmp_values(self):\n\t        return {'b': 52}\n\t    def tmp_check(self, results):\n\t        for result in results:\n", "            self.assertIn(result['a'], range(10))\n\t            self.assertEqual(result['b'], 52)\n\tclass WithValuesWithConstraints(testutils.RandObjTestBase):\n\t    '''\n\t    Test how with_values and with_constraints interact.\n\t    '''\n\t    ITERATIONS = 1000\n\t    def get_randobj(self, *args):\n\t        r = RandObj(*args)\n\t        r.add_rand_var('a', domain=range(10))\n", "        r.add_rand_var('b', domain=range(100))\n\t        return r\n\t    def check(self, results):\n\t        seen_tmp_constraint_false = False\n\t        seen_tmp_value_false = False\n\t        for result in results:\n\t            self.assertIn(result['a'], range(10))\n\t            self.assertIn(result['b'], range(100))\n\t            if result['a'] * result['b'] >= 200 and result['a'] >= 5:\n\t                seen_tmp_constraint_false = True\n", "            if result['a'] != 3:\n\t                seen_tmp_value_false = True\n\t        self.assertTrue(seen_tmp_constraint_false, \"Temporary constraint followed when not given\")\n\t        self.assertTrue(seen_tmp_value_false, \"Temporary value followed when not given\")\n\t    def get_tmp_constraints(self):\n\t        def a_lt_5(a):\n\t            return a < 5\n\t        def a_mul_b_lt_200(a, b):\n\t            return a * b < 200\n\t        return [(a_lt_5, ('a',)), (a_mul_b_lt_200, ('a', 'b'))]\n", "    def get_tmp_values(self):\n\t        return {'a': 3}\n\t    def tmp_check(self, results):\n\t        for result in results:\n\t            # Do normal checks\n\t            self.assertIn(result['a'], range(5))\n\t            self.assertIn(result['b'], range(100))\n\t            # Also check the temp constraint is followed\n\t            self.assertLess(result['a'] * result['b'], 200)\n\t            # Check the temp value has been followed\n", "            self.assertEqual(result['a'], 3)\n\tclass TrickyTempValues(basic.MultiSum):\n\t    '''\n\t    Force use of MultiVarProblem with a difficult problem, and\n\t    also use temporary constraints and temporary values.\n\t    '''\n\t    ITERATIONS = 50\n\t    # Check that we see x and y sum to greater than 50 when\n\t    # the temporary constraint isn't in place\n\t    def check(self, results):\n", "        # Normal checks\n\t        super().check(results)\n\t        # Temp constraint not respected - check for at least one instance\n\t        # where all conditions are not respected\n\t        temp_constraint_respected = True\n\t        temp_value_respected = True\n\t        for result in results:\n\t            if result['x'] + result['y'] >= 50 and \\\n\t                (result['x'] % 2 == 1 or \\\n\t                    (result['y'] + result['z']) % 2 == 0):\n", "                temp_constraint_respected = False\n\t            if result['x'] != 6:\n\t                temp_value_respected = False\n\t        self.assertFalse(\n\t            temp_constraint_respected,\n\t            \"Temp constraint should not be followed when not applied\"\n\t        )\n\t        self.assertFalse(\n\t            temp_value_respected,\n\t            \"Temp value should not be followed when not applied\"\n", "        )\n\t    def get_tmp_constraints(self):\n\t        # Use a few extra temporary constraints to make the problem even harder\n\t        tmp_constraints = []\n\t        def tmp_abs_sum_xy_lt50(x, y):\n\t            return abs(x) + abs(y) < 50\n\t        tmp_constraints.append((tmp_abs_sum_xy_lt50, ('x', 'y')))\n\t        def tmp_x_mod2(x):\n\t            return x % 2 == 0\n\t        tmp_constraints.append((tmp_x_mod2, ('x',)))\n", "        def tmp_yz_mod3(y, z):\n\t            return (y + z) % 2 == 1\n\t        tmp_constraints.append((tmp_yz_mod3, ('y', 'z')))\n\t        return tmp_constraints\n\t    def get_tmp_values(self):\n\t        return {'x': 6}\n\t    # Check that the temp constraint is respected\n\t    def tmp_check(self, results):\n\t        # Normal checks\n\t        super().check(results)\n", "        # Temp constraint respected\n\t        for result in results:\n\t            self.assertLess(result['x'] + result['y'], 50, \"Temp constraint not respected\")\n\t            self.assertTrue(result['x'] % 2 == 0, \"Temp constraint not respected\")\n\t            self.assertTrue((result['y'] + result['z']) % 2 == 1, \"Temp constraint not respected\")\n\t            self.assertEqual(result['x'], 6, \"Temp value not respected\")\n"]}
{"filename": "benchmarks/__main__.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tBenchmark against pyvsc library for equivalent testcases.\n\t'''\n\timport unittest\n\timport timeit\n\timport sys\n\tfrom argparse import ArgumentParser\n\tfrom random import Random\n", "from benchmarks.pyvsc.basic import vsc_basic, cr_basic\n\tfrom benchmarks.pyvsc.in_keyword import vsc_in, cr_in, cr_in_order\n\tfrom benchmarks.pyvsc.ldinstr import vsc_ldinstr\n\tfrom benchmarks.pyvsc.randlist import vscRandListSumZero, \\\n\t    crRandListSumZero, vscRandListUnique, crRandListUnique, \\\n\t    crRandListSumZeroFaster, crRandListUniqueFaster\n\tfrom examples.ldinstr import ldInstr\n\tTEST_LENGTH_MULTIPLIER = 1\n\tclass BenchmarkTests(unittest.TestCase):\n\t    def run_one(self, name, randobj, iterations):\n", "        '''\n\t        Benchmark one object that implements the .randomize() function\n\t        for N iterations.\n\t        '''\n\t        start_time = timeit.default_timer()\n\t        for _ in range(iterations):\n\t            randobj.randomize()\n\t        end_time = timeit.default_timer()\n\t        total_time = end_time - start_time\n\t        hz = iterations / total_time\n", "        print(f'{self._testMethodName}: {name} took {total_time:.4g}s for {iterations} iterations ({hz:.1f}Hz)')\n\t        return total_time, hz\n\t    def run_benchmark(self, randobjs, iterations, check):\n\t        '''\n\t        Reusable function to run a fair benchmark between\n\t        two or more randomizable objects.\n\t        randobjs:   dictionary where key is name, value is an object that implements .randomize()\n\t        iterations: how many times to call .randomize()\n\t        check:      function taking a dictionary of results to check.\n\t        '''\n", "        iterations *= TEST_LENGTH_MULTIPLIER\n\t        results = {}\n\t        winner = None\n\t        best_hz = 0\n\t        for name, randobj in randobjs.items():\n\t            total_time, hz = self.run_one(name, randobj, iterations)\n\t            if hz > best_hz:\n\t                winner = name\n\t                best_hz = hz\n\t            # Store both total time and Hz in case the test wants to specify\n", "            # checks on how long should be taken in wall clock time.\n\t            results[name] = total_time, hz\n\t        print(f'{self._testMethodName}: The winner is {winner} with {best_hz:.1f}Hz!')\n\t        # Print summary of hz delta\n\t        for name, (_total_time, hz) in results.items():\n\t            if name == winner:\n\t                continue\n\t            speedup = best_hz / hz\n\t            print(f'{self._testMethodName}: {winner} was {speedup:.2f}x faster than {name}')\n\t        check(results)\n", "    def test_basic(self):\n\t        '''\n\t        Test basic randomizable object.\n\t        '''\n\t        randobjs = {'vsc': vsc_basic(), 'cr': cr_basic(Random(0))}\n\t        def check(results):\n\t            self.assertGreater(results['cr'][1], results['vsc'][1])\n\t            # This testcase is typically 40-50x faster, which may vary depending\n\t            # on machine. Ensure it doesn't fall below 30x.\n\t            speedup = results['cr'][1] / results['vsc'][1]\n", "            self.assertGreater(speedup, 30, \"Performance has degraded!\")\n\t        self.run_benchmark(randobjs, 100, check)\n\t    def test_in(self):\n\t        '''\n\t        Test object using 'in' keyword.\n\t        '''\n\t        randobjs = {\n\t            'vsc': vsc_in(),\n\t            'cr': cr_in(Random(0)),\n\t            'cr_order': cr_in_order(Random(0)),\n", "        }\n\t        def check(results):\n\t            self.assertGreater(results['cr'][1], results['vsc'][1])\n\t            # This testcase is typically 13-15x faster, which may vary depending\n\t            # on machine. Ensure it doesn't fall below 10x.\n\t            speedup = results['cr'][1] / results['vsc'][1]\n\t            self.assertGreater(speedup, 10, \"Performance has degraded!\")\n\t        self.run_benchmark(randobjs, 100, check)\n\t    def test_ldinstr(self):\n\t        '''\n", "        Test LD instruction example.\n\t        '''\n\t        randobjs = {\n\t            'vsc': vsc_ldinstr(),\n\t            'cr': ldInstr(Random(0)),\n\t        }\n\t        def check(results):\n\t            self.assertGreater(results['cr'][1], results['vsc'][1])\n\t            # This testcase is typically 13-15x faster, which may vary depending\n\t            # on machine. Ensure it doesn't fall below 10x.\n", "            speedup = results['cr'][1] / results['vsc'][1]\n\t            self.assertGreater(speedup, 10, \"Performance has degraded!\")\n\t        self.run_benchmark(randobjs, 100, check)\n\t    def test_randlist_sumzero(self):\n\t        '''\n\t        Test random list example where the list must sum to zero.\n\t        '''\n\t        randobjs = {\n\t            'vsc': vscRandListSumZero(),\n\t            'cr': crRandListSumZero(Random(0)),\n", "            'cr_faster': crRandListSumZeroFaster(Random(0)),\n\t        }\n\t        def check(results):\n\t            self.assertGreater(results['cr'][1], results['vsc'][1])\n\t            self.assertGreater(results['cr_faster'][1], results['vsc'][1])\n\t            # This testcase is typically 20x faster, which may vary depending\n\t            # on machine. Ensure it doesn't fall below 15x.\n\t            speedup = results['cr'][1] / results['vsc'][1]\n\t            self.assertGreater(speedup, 15, \"Performance has degraded!\")\n\t            speedup = results['cr_faster'][1] / results['vsc'][1]\n", "            self.assertGreater(speedup, 15, \"Performance has degraded!\")\n\t        self.run_benchmark(randobjs, 100, check)\n\t    def test_randlist_unique(self):\n\t        '''\n\t        Test random list example where the list must be unique.\n\t        '''\n\t        randobjs = {\n\t            'vsc': vscRandListUnique(),\n\t            'cr': crRandListUnique(Random(0)),\n\t            'cr_faster': crRandListUniqueFaster(Random(0)),\n", "        }\n\t        def check(results):\n\t            self.assertGreater(results['cr_faster'][1], results['vsc'][1])\n\t            self.assertGreater(results['cr'][1], results['vsc'][1])\n\t            # With the naive solver, this testcase is typically 3-4x faster,\n\t            # which may vary depending on machine. Ensure it doesn't fall\n\t            # below 2x.\n\t            speedup = results['cr'][1] / results['vsc'][1]\n\t            self.assertGreater(speedup, 2, \"Performance has degraded!\")\n\t            # This testcase is typically 10-13x faster, which may vary depending\n", "            # on machine. Ensure it doesn't fall below 10x.\n\t            speedup = results['cr_faster'][1] / results['vsc'][1]\n\t            self.assertGreater(speedup, 10, \"Performance has degraded!\")\n\t        self.run_benchmark(randobjs, 100, check)\n\tdef parse_args():\n\t    parser = ArgumentParser(description='Run unit tests for constrainedrandom library')\n\t    parser.add_argument('--length-mul', type=int, default=1, help='Multiplier for test length, when desiring greater certainty on performance.')\n\t    args, extra = parser.parse_known_args()\n\t    return args, extra\n\tif __name__ == \"__main__\":\n", "    args, extra = parse_args()\n\t    TEST_LENGTH_MULTIPLIER = args.length_mul\n\t    # Reconstruct argv\n\t    argv = [sys.argv[0]] + extra\n\t    unittest.main(argv=argv)\n"]}
{"filename": "benchmarks/__init__.py", "chunked_list": []}
{"filename": "benchmarks/pyvsc/in_keyword.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tRandom object using 'in' keyword from pyvsc documentation.\n\t'''\n\tfrom constrainedrandom import RandObj\n\timport vsc\n\t@vsc.randobj\n\tclass vsc_in(object):\n\t    def __init__(self):\n", "        self.a = vsc.rand_bit_t(8)\n\t        self.b = vsc.rand_bit_t(8)\n\t        self.c = vsc.rand_bit_t(8)\n\t        self.d = vsc.rand_bit_t(8)\n\t    @vsc.constraint\n\t    def ab_c(self):\n\t       self.a in vsc.rangelist(1, 2, vsc.rng(4,8))\n\t       self.c != 0\n\t       self.d != 0\n\t       self.c < self.d\n", "       self.b in vsc.rangelist(vsc.rng(self.c,self.d))\n\tclass cr_in(RandObj):\n\t    '''\n\t    Basic implementation, does thes same thing as vsc_in. No ordering hints.\n\t    '''\n\t    def __init__(self, random):\n\t        super().__init__(random)\n\t        self.add_rand_var('a', domain=[1,2] + list(range(4,8)))\n\t        self.add_rand_var('b', bits=8, constraints=(lambda b : b != 0,))\n\t        self.add_rand_var('c', bits=8)\n", "        self.add_rand_var('d', bits=8, constraints=(lambda d : d != 0,))\n\t        def c_lt_d(c, d):\n\t            return c < d\n\t        self.add_constraint(c_lt_d, ('c', 'd'))\n\t        def b_in_range(b, c, d):\n\t            return b in range(c, d)\n\t        self.add_constraint(b_in_range, ('b', 'c', 'd'))\n\tclass cr_in_order(RandObj):\n\t    '''\n\t    cr_in, but with ordering hints.\n", "    '''\n\t    def __init__(self, random):\n\t        super().__init__(random)\n\t        self.add_rand_var('a', domain=[1,2] + list(range(4,8)), order=0)\n\t        self.add_rand_var('b', bits=8, constraints=(lambda b : b != 0,), order=2)\n\t        self.add_rand_var('c', bits=8, order=0)\n\t        self.add_rand_var('d', bits=8, constraints=(lambda d : d != 0,), order=1)\n\t        def c_lt_d(c, d):\n\t            return c < d\n\t        self.add_constraint(c_lt_d, ('c', 'd'))\n", "        def b_in_range(b, c, d):\n\t            return b in range(c, d)\n\t        self.add_constraint(b_in_range, ('b', 'c', 'd'))\n"]}
{"filename": "benchmarks/pyvsc/ldinstr.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tImplement realistic load instruction case from constrainedrandom examples.ldinstr\n\t'''\n\timport vsc\n\t@vsc.randobj\n\tclass vsc_ldinstr(object):\n\t    def __init__(self):\n\t        self.imm0 = vsc.rand_bit_t(11)\n", "        self.src0 = vsc.rand_bit_t(5)\n\t        self.dst0 = vsc.rand_bit_t(5)\n\t        self.wb = vsc.rand_bit_t(1)\n\t        self.enc = 0xfa800000\n\t        # Make this the same as in examples.ldinstr\n\t        self.src0_value_getter = lambda : 0xfffffbcd\n\t    @vsc.constraint\n\t    def wb_src0_dst0(self):\n\t        with vsc.if_then(self.wb == 1):\n\t            self.src0 != self.dst0\n", "    @vsc.constraint\n\t    def sum_src0_imm0(self):\n\t        self.imm0 + self.src0_value_getter() <= 0xffffffff\n\t        (self.imm0 + self.src0_value_getter()) & 3 == 0\n"]}
{"filename": "benchmarks/pyvsc/randlist.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tRandom list examples where constrainedrandom has previously struggled.\n\t'''\n\tfrom constrainedrandom import RandObj\n\tfrom constrainedrandom.utils import unique\n\timport vsc\n\t@vsc.randobj\n\tclass vscRandListSumZero(object):\n", "    def __init__(self):\n\t        self.listvar = vsc.rand_list_t(vsc.int8_t(), 10)\n\t    @vsc.constraint\n\t    def listvar_c(self):\n\t        with vsc.foreach(self.listvar) as l:\n\t            l >= -10\n\t            l < 11\n\t    @vsc.constraint\n\t    def listvar_sum_c(self):\n\t        sum(self.listvar) == 0\n", "class crRandListSumZero(RandObj):\n\t    def __init__(self, *args):\n\t        super().__init__(*args)\n\t        self.add_rand_var('listvar', domain=range(-10, 11), length=10)\n\t        def sum_0(listvar):\n\t            return sum(listvar) == 0\n\t        self.add_constraint(sum_0, ('listvar',))\n\tclass crRandListSumZeroFaster(RandObj):\n\t    def __init__(self, *args):\n\t        super().__init__(*args)\n", "        self.add_rand_var('listvar', domain=range(-10, 11), length=10, disable_naive_list_solver=True)\n\t        def sum_0(listvar):\n\t            return sum(listvar) == 0\n\t        self.add_constraint(sum_0, ('listvar',))\n\t@vsc.randobj\n\tclass vscRandListUnique(object):\n\t    def __init__(self):\n\t        self.listvar = vsc.rand_list_t(vsc.uint8_t(), 10)\n\t    @vsc.constraint\n\t    def listvar_c(self):\n", "        with vsc.foreach(self.listvar) as l:\n\t            l >= 0\n\t            l < 10\n\t    @vsc.constraint\n\t    def listvar_unique_c(self):\n\t        vsc.unique(self.listvar)\n\tclass crRandListUnique(RandObj):\n\t    def __init__(self, *args):\n\t        super().__init__(*args)\n\t        self.add_rand_var('listvar', domain=range(10), length=10, list_constraints=[unique])\n", "class crRandListUniqueFaster(RandObj):\n\t    def __init__(self, *args):\n\t        super().__init__(*args)\n\t        self.add_rand_var('listvar',\n\t            domain=range(10),\n\t            length=10,\n\t            list_constraints=[unique],\n\t            disable_naive_list_solver=True,\n\t        )\n"]}
{"filename": "benchmarks/pyvsc/__init__.py", "chunked_list": []}
{"filename": "benchmarks/pyvsc/basic.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tBasic random object from pyvsc documentation.\n\t'''\n\tfrom constrainedrandom import RandObj\n\timport vsc\n\t@vsc.randobj\n\tclass vsc_basic(object):\n\t    def __init__(self):\n", "        self.a = vsc.rand_bit_t(8)\n\t        self.b = vsc.rand_bit_t(8)\n\t        self.c = vsc.rand_bit_t(8)\n\t        self.d = vsc.rand_bit_t(8)\n\t    @vsc.constraint\n\t    def ab_c(self):\n\t        self.a < self.b\n\tclass cr_basic(RandObj):\n\t    def __init__(self, random):\n\t        super().__init__(random)\n", "        self.add_rand_var('a', bits=8)\n\t        self.add_rand_var('b', bits=8, order=1)\n\t        self.add_rand_var('c', bits=8)\n\t        self.add_rand_var('d', bits=8)\n\t        self.add_constraint(lambda a, b : a < b, ('a', 'b'))\n"]}
{"filename": "examples/ldinstr.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport random\n\tfrom constrainedrandom import RandObj\n\tclass ldInstr(RandObj):\n\t    '''\n\t    A made-up load instruction has the following fields (starting at LSB):\n\t    - imm0 (11 bits): immediate offset for memory address\n\t    - src0 ( 5 bits): source register for memory address\n\t    - dst0 ( 5 bits): destination register for load data\n", "    - wb   ( 1 bit ): enable for writeback of the address to the src0 register.\n\t    - enc  (10 bits): fixed encoding to signify this kind of load instruction.\n\t    And the following rules:\n\t    - If writeback (wb) is set, src0 is written back with memory offset. In\n\t    this case, do not allow dst0 to be the same register as src0.\n\t    - The sum of the current contents of src0 and imm0 should be word-aligned.\n\t    - The sum of the current contents of src0 and imm0 should not overflow 32\n\t    bits.\n\t    '''\n\t    ENC = 0xfa800000\n", "    def __init__(self, *args, **kwargs):\n\t        super().__init__(*args, **kwargs)\n\t        self.add_rand_var('src0', bits=5, order=0)\n\t        def read_model_for_src0_value():\n\t            # Pretend getter for src0 current value\n\t            return 0xfffffbcd\n\t        self.add_rand_var('src0_value', fn=read_model_for_src0_value, order=0)\n\t        self.add_rand_var('wb', bits=1, order=0)\n\t        self.add_rand_var('dst0', bits=5, order=1)\n\t        self.add_rand_var('imm0', bits=11, order=2)\n", "        def wb_dst_src(wb, dst0, src0):\n\t            if wb:\n\t                return dst0 != src0\n\t            return True\n\t        self.add_constraint(wb_dst_src, ('wb', 'dst0', 'src0'))\n\t        def sum_src0_imm0(src0_value, imm0):\n\t            address = src0_value + imm0\n\t            return (address & 3 == 0) and (address < 0xffffffff)\n\t        self.add_constraint(sum_src0_imm0, ('src0_value', 'imm0'))\n\t    def post_randomize(self):\n", "        self.opcode = self.get_opcode()\n\t    def get_opcode(self):\n\t        opcode = self.ENC\n\t        opcode = opcode | self.imm0\n\t        opcode = opcode | (self.src0 << 11)\n\t        opcode = opcode | (self.dst0 << 5)\n\t        opcode = opcode | (self.wb << 5)\n\t        return opcode\n\tif __name__ == \"__main__\":\n\t    # Use a seed of 0 so our results are repeatable\n", "    random.seed(0)\n\t    ld_instr = ldInstr()\n\t    # Produce 5 random valid opcodes for this load instruction\n\t    for _ in range(5):\n\t        ld_instr.randomize()\n\t        print(hex(ld_instr.opcode))\n"]}
{"filename": "examples/__init__.py", "chunked_list": []}
{"filename": "docs/conf.py", "chunked_list": ["import sys\n\timport os\n\tsys.path.insert(0, os.path.abspath('../'))\n\t# Configuration file for the Sphinx documentation builder.\n\t#\n\t# For the full list of built-in configuration values, see the documentation:\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\t# -- Project information -----------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\n\tproject = 'constrainedrandom'\n", "copyright = '2023, Imagination Technologies Ltd.'\n\tauthor = 'Will Keen'\n\t# -- General configuration ---------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\n\textensions = ['sphinx.ext.autodoc', 'sphinx.ext.autosectionlabel']\n\ttemplates_path = ['_templates']\n\texclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\t# -- Options for HTML output -------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n\thtml_theme = 'sphinx_rtd_theme'\n", "html_static_path = []\n"]}
{"filename": "constrainedrandom/bits.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tReusable utility functions to perform commonly required bitwise operations.\n\t'''\n\tdef get_bitslice(val: int, hi: int, lo: int):\n\t    '''\n\t    Function to get a bit slice from a value.\n\t    Equivalent behaviour to SystemVerilog, i.e.\n\t    ``get_bitslice(val, hi, lo)`` in Python\n", "    is the same as:\n\t    ``val[hi:lo]`` in SV.\n\t    :param val: The value to slice.\n\t    :param hi: The highest bit index of the desired slice.\n\t    :param hi: The lowest bit index of the desired slice.\n\t    :return: The requested bit slice.\n\t    :raises AssertionError: If lo > hi.\n\t    '''\n\t    assert lo <= hi, \"low index must be less than or equal to high index\"\n\t    size = hi - lo + 1\n", "    mask = (1 << size) - 1\n\t    return (val >> lo) & mask\n\tdef set_bitslice(val: int, hi: int, lo: int, new_val: int):\n\t    '''\n\t    Function to take a value and set a slice of bits to\n\t    a particular value. The function returns that new\n\t    value. The input value is unaffected.\n\t    Equivalent behaviour to SystemVerilog, i.e.\n\t    ``val = set_bitslice(val, hi, lo, new_val)`` in Python\n\t    is the same as:\n", "    ``val[hi:lo] = new_val`` in SV.\n\t    :param val: The value to modify.\n\t    :param hi: The highest bit index of the desired slice.\n\t    :param hi: The lowest bit index of the desired slice.\n\t    :param new_val: The new value to be assigned to the slice.\n\t    :return: The modified value.\n\t    :raises AssertionError: If lo > hi.\n\t    '''\n\t    assert lo <= hi, \"low index must be less than or equal to high index\"\n\t    size = hi - lo + 1\n", "    mask = (1 << size) - 1\n\t    new_val = new_val & mask\n\t    not_mask = ((1 << val.bit_length()) - 1) & ~(mask << lo)\n\t    return (val & not_mask) | (new_val << lo)\n"]}
{"filename": "constrainedrandom/randobj.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport constraint\n\timport random\n\tfrom collections import defaultdict\n\tfrom typing import Any, Callable, Dict, Iterable, List, Optional\n\tfrom . import utils\n\tfrom .internal.multivar import MultiVarProblem\n\tfrom .internal.randvar import RandVar\n\tclass RandObj:\n", "    '''\n\t    Randomizable object. User-facing class.\n\t    Contains any number of random variables and constraints.\n\t    Randomizes to produce a valid solution for those variables and constraints.\n\t    :param _random: An instance of ``random.Random``, which controls the\n\t        seeding and random generation for this class. If passed none, use the global\n\t        Python random package.\n\t    :param max_iterations: The maximum number of failed attempts to solve the randomization\n\t        problem before giving up.\n\t    :param max_domain_size: The maximum size of domain that a constraint satisfaction problem\n", "        may take. This is used to avoid poor performance. When a problem exceeds this domain\n\t        size, we don't use the ``constraint`` package, but just use ``random`` instead.\n\t    :example:\n\t    .. code-block:: python\n\t        import random\n\t        from constrainedrandom import RandObj\n\t        # Create a random object based on a random generator with seed 0\n\t        rand_generator = random.Random(0)\n\t        rand_obj = RandObj(rand_generator)\n\t        # Add some random variables\n", "        rand_obj.add_rand_var('one_to_nine', domain=range(1, 10))\n\t        rand_obj.add_rand_var('eight_bits', bits=8, constraints=(lambda x : x != 0))\n\t        # Add a multi-variable constraint\n\t        rand_obj.add_constraint(lambda x, y : x != y, ('one_to_nine', 'eight_bits'))\n\t        # Produce one valid solution\n\t        rand_obj.randomize()\n\t        # Random variables are now accessible as member variables\n\t        print(rand_obj.one_to_nine)\n\t        print(rand_obj.eight_bits)\n\t    '''\n", "    def __init__(\n\t        self,\n\t        _random: Optional[random.Random]=None,\n\t        max_iterations: int=utils.MAX_ITERATIONS,\n\t        max_domain_size: int=utils.CONSTRAINT_MAX_DOMAIN_SIZE,\n\t    ) -> None:\n\t        # Prefix 'internal use' variables with '_', as randomized results are populated to the class\n\t        self._random = _random\n\t        self._random_vars = {}\n\t        self._constraints : List[utils.ConstraintAndVars] = []\n", "        self._constrained_vars = set()\n\t        self._max_iterations = max_iterations\n\t        self._max_domain_size = max_domain_size\n\t        self._naive_solve = True\n\t        self._sparse_solve = True\n\t        self._thorough_solve = True\n\t        self._problem_changed = False\n\t    def _get_random(self) -> random.Random:\n\t        '''\n\t        Internal function to get the appropriate randomization object.\n", "        We can't store the package ``random`` in a member variable as this\n\t        prevents pickling.\n\t        :return: The appropriate random generator.\n\t        '''\n\t        if self._random is None:\n\t            return random\n\t        return self._random\n\t    def set_solver_mode(self,\n\t        naive: Optional[bool]=None,\n\t        sparse: Optional[bool]=None,\n", "        thorough: Optional[bool]=None,\n\t    ) -> None:\n\t        '''\n\t        Disable/enable different solving steps.\n\t        Solvers are used in the following order:\n\t        1. Naive solve - randomizing and checking constraints.\n\t        For some problems, it is more expedient to skip this\n\t        step and go straight to a MultiVarProblem.\n\t        2. Sparse solve - graph-based exporation of state space.\n\t        Start with depth-first search, move to wider subsets\n", "        of each level of state space until valid solution\n\t        found.\n\t        3. Thorough solve - use constraint solver to get\n\t        all solutions and pick a random one.\n\t        If a solver step is enabled it will run, if disabled\n\t        it won't run.\n\t        :param naive: ``True`` if naive solver should be used,\n\t            ``False`` otherwise. Setting not changed if argument\n\t            not provided.\n\t        :param sparse: ``True`` if sparse solver should be used,\n", "            ``False`` otherwise. Setting not changed if argument\n\t            not provided.\n\t        :param thorough: ``True`` if thorough solver should be used,\n\t            ``False`` otherwise. Setting not changed if argument\n\t            not provided.\n\t        :return: ``None``\n\t        '''\n\t        if naive is not None:\n\t            self._naive_solve = naive\n\t        if sparse is not None:\n", "            self._sparse_solve = sparse\n\t        if thorough is not None:\n\t            self._thorough_solve = thorough\n\t    def add_rand_var(\n\t        self,\n\t        name: str,\n\t        *,\n\t        domain: Optional[utils.Domain]=None,\n\t        bits: Optional[int]=None,\n\t        fn: Optional[Callable]=None,\n", "        args: Optional[tuple]=None,\n\t        constraints: Optional[Iterable[utils.Constraint]]=None,\n\t        list_constraints: Optional[Iterable[utils.Constraint]]=None,\n\t        length: int=0,\n\t        order: int=0,\n\t        initial: Any=None,\n\t        disable_naive_list_solver: bool=False,\n\t    ) -> None:\n\t        '''\n\t        Add a random variable to the object.\n", "        Exactly one of ``domain``, ``bits``, or ``fn`` (optionally with ``args``) must be provided\n\t        to determine how to randomize.\n\t        :param name: The name of this random variable.\n\t        :param domain: The possible values for this random variable, expressed either\n\t            as a ``range``, or as an iterable (e.g. ``list``, ``tuple``) of possible values.\n\t            Mutually exclusive with ``bits`` and ``fn``.\n\t        :param bits: Specifies the possible values of this variable in terms of a width\n\t            in bits. E.g. ``bits=32`` signifies this variable can be ``0 <= x < 1 << 32``.\n\t            Mutually exclusive with ``domain`` and ``fn``.\n\t        :param fn: Specifies a function to call that will provide the value of this random\n", "            variable.\n\t            Mutually exclusive with ``domain`` and ``bits``.\n\t        :param args: Arguments to pass to the function specified in ``fn``.\n\t            If ``fn`` is not used, ``args`` must not be used.\n\t        :param constraints: List or tuple of constraints that apply to this random variable.\n\t            Each of these apply only to the individual values in the list, if a length is\n\t            specified.\n\t        :param constraints: List or tuple of constraints that apply to this random variable.\n\t            Each of these apply across the values in the list, if a length is specified.\n\t        :param length: Specify a length > 0 to turn this variable into a list of random\n", "            values. A value of 0 means a scalar value. A value >= 1 means a list of that length.\n\t        :param order: The solution order for this variable with respect to other variables.\n\t        :param initial: Initial value to assign to the variable prior to randomizing.\n\t        :param disable_naive_list_solver: Attempt to use a faster algorithm for solving\n\t            list problems. May be faster, but may negatively impact quality of results.\n\t        :return: ``None``\n\t        :raises AssertionError: If inputs are not valid.\n\t        :example:\n\t        .. code-block:: python\n\t            # Create a random object based on a random generator with seed 0\n", "            rand_generator = random.Random(0)\n\t            rand_obj = RandObj(rand_generator)\n\t            # Add a variable which can be 1, 3, 5, 7 or 11\n\t            rand_obj.add_rand_var('prime', domain=(1, 3, 5, 7, 11))\n\t            # Add a variable which can be any number between 3 and 13, except 7\n\t            rand_obj.add_rand_var('not_7', domain=range(3, 14), constraints=(lambda x: x != 7,))\n\t            # Add a variable which is 12 bits wide and can't be zero\n\t            rand_obj.add_rand_var('twelve_bits', bits=12, constraints=(lambda x: x != 0,))\n\t            # Add a variable whose value is generated by calling a function\n\t            def my_fn():\n", "                return rand_generator.randrange(10)\n\t            rand_obj.add_rand_var('fn_based', fn=my_fn)\n\t            # Add a variable whose value is generated by calling a function that takes arguments\n\t            def my_fn(factor):\n\t                return factor * rand_generator.randrange(10)\n\t            rand_obj.add_rand_var('fn_based_with_args', fn=my_fn, args=(2,))\n\t        '''\n\t        # Check this is a valid name\n\t        assert name not in self.__dict__, f\"random variable name {name} is not valid, already exists in object\"\n\t        assert name not in self._random_vars, f\"random variable name {name} is not valid, already exists in random variables\"\n", "        self._random_vars[name] = RandVar(\n\t            name=name,\n\t            _random=self._random,\n\t            order=order,\n\t            domain=domain,\n\t            bits=bits,\n\t            fn=fn,\n\t            args=args,\n\t            constraints=constraints,\n\t            list_constraints=list_constraints,\n", "            length=length,\n\t            max_iterations=self._max_iterations,\n\t            max_domain_size=self._max_domain_size,\n\t            disable_naive_list_solver=disable_naive_list_solver,\n\t        )\n\t        self._problem_changed = True\n\t        self.__dict__[name] = initial\n\t    def add_constraint(self, constr: utils.Constraint, variables: Iterable[str]):\n\t        '''\n\t        Add an aribtrary constraint that applies to one or more variable(s).\n", "        :param constr: A function (or callable) that accepts the random variables listed in\n\t            ``variables`` as argument(s) and returns either ``True`` or ``False``.\n\t            If the function returns ``True`` when passed the variables, the constraint is satisfied.\n\t        :param variables: A tuple/list of variables affected by this constraint.\n\t            The order matters, this order will be preserved when passing variables into the constraint.\n\t        :return: ``None``\n\t        :raises AssertionError: If any member of ``variables`` is not a valid random variable.\n\t        :raises TypeError: If type of ``variables`` is not str, list or tuple.\n\t        :example:\n\t        .. code-block:: python\n", "            # Assume we have a RandObj called 'randobj', with random variables a, b and c\n\t            # Add a constraint that a, b and c must be different values\n\t            def not_equal(x, y, z):\n\t                return (x != y) and (y != z) and (x != z)\n\t            randobj.add_constraint(not_equal, ('a', 'b', 'c'))\n\t            # Add a constraint that a is less than b\n\t            randobj.add_constraint(lambda x, y: x < y, ('a', 'b'))\n\t            # Add a constraint that c must be more than double a but less than double b\n\t            randobj.constr(lambda a, b, c: (a * 2) < c < (b * 2), ('a', 'b', 'c'))\n\t        '''\n", "        if isinstance(variables, str):\n\t            # Single-variable constraint\n\t            self._random_vars[variables].add_constraint(constr)\n\t        elif isinstance(variables, list) or isinstance(variables, tuple):\n\t            if len(variables) == 1:\n\t                # Single-variable constraint\n\t                self._random_vars[variables[0]].add_constraint(constr)\n\t            else:\n\t                # Multi-variable constraint\n\t                for var in variables:\n", "                    assert var in self._random_vars, \\\n\t                        f\"Variable {var} was not in the set of random variables!\"\n\t                    self._constrained_vars.add(var)\n\t                self._constraints.append((constr, variables))\n\t        else:\n\t            raise TypeError(f\"{variables=} must be of type str, tuple or list\")\n\t        self._problem_changed = True\n\t    def pre_randomize(self) -> None:\n\t        '''\n\t        Called by :func:`randomize` before randomizing variables. Can be overridden to do something.\n", "        :return: ``None``\n\t        '''\n\t        pass\n\t    def randomize(\n\t        self,\n\t        *,\n\t        with_values: Optional[Dict[str, Any]]=None,\n\t        with_constraints: Optional[Iterable[utils.ConstraintAndVars]]=None,\n\t        debug: bool=False,\n\t    ) -> None:\n", "        '''\n\t        Randomizes all random variables, applying all constraints provided.\n\t        After calling this for the first time, random variables are\n\t        accessible as member variables.\n\t        :return: None\n\t        :param with_constraints: Temporary constraints for this randomization only.\n\t            List of tuples, consisting of a constraint function and an iterable\n\t            containing the variables it applies to.\n\t        :param debug: ``True`` to run in debug mode. Slower, but collects\n\t            all debug info along the way and not just the final failure.\n", "        :raises RandomizationError: If no solution is found\n\t            that satisfies the defined constraints.\n\t        '''\n\t        self.pre_randomize()\n\t        result = {}\n\t        # Copy always-on constraints, ready to add any temporary ones\n\t        constraints = list(self._constraints)\n\t        constrained_vars = set(self._constrained_vars)\n\t        # Process temporary constraints\n\t        tmp_single_var_constraints = defaultdict(list)\n", "        # Set to True if the problem is different from the base problem\n\t        problem_changed = False\n\t        if with_constraints is not None:\n\t            for constr, vars in with_constraints:\n\t                assert isinstance(vars, Iterable), \\\n\t                    \"with_constraints should specify a list of tuples of (constraint, Iterable[variables])\"\n\t                assert len(vars) > 0, \"Cannot add a constraint that applies to no variables\"\n\t                if len(vars) == 1:\n\t                    # Single-variable constraint\n\t                    tmp_single_var_constraints[vars[0]].append(constr)\n", "                    problem_changed = True\n\t                else:\n\t                    # Multi-variable constraint\n\t                    constraints.append((constr, vars))\n\t                    for var in vars:\n\t                        constrained_vars.add(var)\n\t                    problem_changed = True\n\t            # If a variable becomes constrained due to temporary multi-variable\n\t            # constraints, we must respect single var temporary constraints too.\n\t            for var, constrs in sorted(tmp_single_var_constraints.items()):\n", "                if var in constrained_vars:\n\t                    for constr in constrs:\n\t                        constraints.append((constr, (var,)))\n\t        # Don't allow non-determinism when iterating over a set\n\t        constrained_vars = sorted(constrained_vars)\n\t        # Don't allow non-determinism when iterating over a dict\n\t        random_vars = sorted(self._random_vars.items())\n\t        # Process concrete values - use these preferentially\n\t        with_values = with_values if with_values is not None else {}\n\t        for name, random_var in random_vars:\n", "            if name in with_values:\n\t                result[name] = with_values[name]\n\t            else:\n\t                tmp_constraints = tmp_single_var_constraints.get(name, [])\n\t                result[name] = random_var.randomize(tmp_constraints, debug)\n\t        # If there are constraints, first try just to solve naively by randomizing the values.\n\t        # This will be faster than constructing a MultiVarProblem if the constraints turn out\n\t        # to be trivial. Only try this a few times so as not to waste time.\n\t        constraints_satisfied = len(constraints) == 0\n\t        if self._naive_solve:\n", "            attempts = 0\n\t            max = self._max_iterations\n\t            while not constraints_satisfied:\n\t                if attempts == max:\n\t                    break\n\t                problem = constraint.Problem()\n\t                for var in constrained_vars:\n\t                    problem.addVariable(var, (result[var],))\n\t                for _constraint, variables in constraints:\n\t                    problem.addConstraint(_constraint, variables)\n", "                solutions = problem.getSolutions()\n\t                if len(solutions) > 0:\n\t                    # At least one solution was found, all is well\n\t                    constraints_satisfied = True\n\t                    solution = self._get_random().choice(solutions)\n\t                    result.update(solution)\n\t                else:\n\t                    # No solution found, re-randomize and try again\n\t                    for var in constrained_vars:\n\t                        # Don't re-randomize if we've specified a concrete value\n", "                        if var in with_values:\n\t                            continue\n\t                        else:\n\t                            tmp_constraints = tmp_single_var_constraints.get(var, [])\n\t                            result[var] = self._random_vars[var].randomize(tmp_constraints, debug)\n\t                    attempts += 1\n\t        # If constraints are still not satisfied by this point, construct a multi-variable\n\t        # problem and solve them properly\n\t        if not constraints_satisfied:\n\t            if not (self._sparse_solve or self._thorough_solve):\n", "                raise utils.RandomizationError(\n\t                    'Naive solve failed, and sparse solve and thorough solve disabled.' \\\n\t                    ' There is no way to solve the problem.'\n\t                )\n\t            if problem_changed or self._problem_changed or self._multi_var_problem is None:\n\t                multi_var_problem = MultiVarProblem(\n\t                    self,\n\t                    [var for var_name, var in random_vars if var_name in constrained_vars],\n\t                    constraints,\n\t                    max_iterations=self._max_iterations,\n", "                    max_domain_size=self._max_domain_size,\n\t                )\n\t                # Only 'cache' the problem if it's the base problem with no extra constraints\n\t                if not problem_changed:\n\t                    self._multi_var_problem = multi_var_problem\n\t                    self._problem_changed = False\n\t            else:\n\t                multi_var_problem = self._multi_var_problem\n\t            result.update(\n\t                multi_var_problem.solve(\n", "                    sparse=self._sparse_solve,\n\t                    thorough=self._thorough_solve,\n\t                    with_values=with_values,\n\t                    debug=debug,\n\t                )\n\t            )\n\t        # Update this object such that the results of randomization are available as member variables\n\t        self.__dict__.update(result)\n\t        self.post_randomize()\n\t    def post_randomize(self) -> None:\n", "        '''\n\t        Called by :func:`randomize` after randomizing variables. Can be overridden to do something.\n\t        :return: ``None``\n\t        '''\n\t        pass\n\t    def get_results(self) -> Dict[str, Any]:\n\t        '''\n\t        Returns a dictionary of the results from the most recent randomization.\n\t        This is mainly provided for testing purposes.\n\t        Note that individual variables can be accessed as member variables of\n", "        a RandObj instance, e.g.\n\t        .. code-block:: python\n\t            randobj = RandObj()\n\t            randobj.add_rand_var('a', domain=range(10))\n\t            randobj.randomize()\n\t            print(randobj.a)\n\t        :return: dictionary of the results from the most recent randomization.\n\t        '''\n\t        # Return a new dict object rather than a reference to this object's __dict__\n\t        return {k: self.__dict__[k] for k in self._random_vars.keys()}\n"]}
{"filename": "constrainedrandom/__init__.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\tfrom .random import dist, weighted_choice\n\tfrom .randobj import RandObj\n\tfrom .utils import RandomizationError\n\t__all__ = ['dist', 'weighted_choice', 'RandObj', 'RandomizationError']\n"]}
{"filename": "constrainedrandom/utils.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\t'''\n\tMiscellaneous utilities for the constrainedrandom package.\n\t'''\n\tfrom typing import Any, Callable, Dict, Iterable, List, Tuple, Union\n\t# Distribution type\n\tDist = Dict[Any, int]\n\t# Domain type\n\tDomain = Union[Iterable[Any], range, Dist]\n", "# Constraint type\n\tConstraint = Callable[..., bool]\n\t# Constraint and the variables it applies to\n\tConstraintAndVars = Tuple[Constraint, Iterable[str]]\n\t# The default maximum iterations before giving up on any randomization problem.\n\t# A larger number means convergence is more likely, but runtime may be higher.\n\tMAX_ITERATIONS = 100\n\t# The default largest domain size to use with the constraint library.\n\t# A large number may improve convergence, but hurt performance.\n\t# A lower number may improve performance, but make convergence less likely.\n", "CONSTRAINT_MAX_DOMAIN_SIZE = 1 << 10\n\tclass RandomizationError(Exception):\n\t    '''\n\t    Denotes that a randomization attempt has failed.\n\t    '''\n\tdef unique(list_variable: Iterable[Any]) -> bool:\n\t    '''\n\t    Optimal function for testing uniqueness of values in a list.\n\t    Useful constraint on a list.\n\t    O(N) time complexity where N is list length, but also\n", "    O(N) worst-case space complexity.\n\t    Usually what you want rather than O(N**2) time compexity\n\t    and O(1) space.\n\t    :param list_variable: A list (or any iterable).\n\t    :return: True if every element in the list is unique,\n\t        False otherwise.\n\t    '''\n\t    seen = set()\n\t    for i in list_variable:\n\t        if i in seen:\n", "            return False\n\t        seen.add(i)\n\t    return True\n"]}
{"filename": "constrainedrandom/random.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport random\n\tfrom typing import Any, Optional\n\tfrom . import utils\n\tdef weighted_choice(choices_dict: utils.Dist, _random: Optional[random.Random]=None) -> Any:\n\t    '''\n\t    Wrapper around ``random.choices``, allowing the user to specify weights in a dictionary.\n\t    :param choices_dict: A dict containing the possible values as keys and relative\n\t        weights as values.\n", "    :param _random: Instance of random generator object to use. If not supplied, use\n\t        global Python ``random`` module.\n\t    :return: One of the keys of ``choices_dict`` chosen at random, based on weighting.\n\t    :example:\n\t    .. code-block:: python\n\t        # 0 will be chosen 25% of the time, 1 25% of the time and 'foo' 50% of the time\n\t        value = weighted_choice({0: 25, 1: 25, 'foo': 50})\n\t    '''\n\t    if _random is None:\n\t        _random = random\n", "    return _random.choices(tuple(choices_dict.keys()), weights=tuple(choices_dict.values()))\n\tdef dist(dist_dict: utils.Dist, _random: Optional[random.Random]=None) -> Any:\n\t    '''\n\t    Random distribution. As :func:`weighted_choice`, but allows ``range`` to be used as\n\t    a key to the dictionary, which if chosen is then evaluated as a random range.\n\t    :param dist_dict: A dict containing the possible values as keys and relative\n\t        weights as values. If a range is supplied as a key, it will be evaluated\n\t        as a random range.\n\t    :param _random: Instance of random generator object to use. If not supplied, use\n\t        global Python ``random`` module.\n", "    :return: One of the keys of ``dist_dict`` chosen at random, based on weighting.\n\t        If the key is a range, evaluate the range as a random range before returning.\n\t    :example:\n\t    .. code-block:: python\n\t        # 0 will be chosen 25% of the time, a value in the range 1 to 9 25% of the time\n\t        # and 'foo' 50% of the time\n\t        value = dist({0: 25, range(1, 10): 25, 'foo': 50})\n\t    '''\n\t    if _random is None:\n\t        _random = random\n", "    answer = weighted_choice(choices_dict=dist_dict, _random=_random)[0]\n\t    if isinstance(answer, range):\n\t        return _random.randrange(answer.start, answer.stop)\n\t    return answer\n"]}
{"filename": "constrainedrandom/debug.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\tfrom typing import Any, Dict, Iterable, List\n\tfrom .utils import Constraint, ConstraintAndVars\n\tdef debug_constraints(\n\t        constraints: Iterable[ConstraintAndVars],\n\t        values: Dict[str, Any]\n\t    ) -> List[Constraint]:\n\t    '''\n\t    Call this to debug constraints. Gives feedback on which constraints\n", "    are not satisfied by the current set of values.\n\t    :param constraints: the list of constraints and the variables\n\t        they apply to.\n\t    :param values: dictionary of values.\n\t    :return: List of failing constraints.\n\t    '''\n\t    unsatisfied = []\n\t    for constr, var_names in constraints:\n\t        args = []\n\t        for var_name in var_names:\n", "            args.append(values[var_name])\n\t        satisfied = constr(*args)\n\t        if not satisfied:\n\t            unsatisfied.append((constr, var_names))\n\t    return unsatisfied\n\tclass RandomizationFail:\n\t    '''\n\t    Represents one failure to randomize a problem.\n\t    :param variables: List of variables that were randomized.\n\t    :param constraints: List of tuples, giving constraints that\n", "        were applied and the variables they apply to.\n\t    '''\n\t    def __init__(self, variables: Iterable[str], constraints: Iterable[ConstraintAndVars]) -> None:\n\t        self.variables = variables\n\t        self.constraints = constraints\n\t        self.values = []\n\t        self.failing_constraints = []\n\t    def add_values(self, attempt: int, values: Dict[str, Any]) -> None:\n\t        '''\n\t        Adds values to the failed randomization. These values did\n", "        not satisfy one or more constraints.\n\t        :param attempt: Number of attempts up until this failure.\n\t        :param values: Dictionary where keys are names of variables,\n\t            values are the failed values.\n\t        '''\n\t        self.values.append((attempt, values))\n\t        # Try to work out the constraints that are failing.\n\t        # This may not be possible, depending on the problem we are being passed.\n\t        try:\n\t            failing_constraints = debug_constraints(self.constraints, values)\n", "            self.failing_constraints.append(failing_constraints)\n\t        except Exception:\n\t            self.failing_constraints.append('could not compute failing constraints')\n\t    def __str__(self):\n\t        s = f\"variables: {self.variables}\"\n\t        s += f\"\\nconstraints: {self.constraints}\"\n\t        if len(self.values) > 0:\n\t            s += f\"\\nvalues and failing constraints:\"\n\t        for (attempt, value_dict), failing_constraints in zip(self.values, self.failing_constraints):\n\t            s += f\"\\n  attempt: {attempt}  values: {value_dict}\"\n", "            s += f\" failing constraints: {failing_constraints}\"\n\t        return s\n\t    def __repr__(self) -> str:\n\t        return self.__str__()\n\tclass RandomizationDebugInfo:\n\t    '''\n\t    Contains information about a failing randomization problem.\n\t    Returned as part of a ``RandomizationError``.\n\t    '''\n\t    def __init__(self) -> None:\n", "        self.failures = []\n\t    def __str__(self) -> str:\n\t        s = \"Randomization failure:\"\n\t        for fail in self.failures:\n\t            s += \"\\n\" + (str(fail))\n\t        return s\n\t    def __repr__(self) -> str:\n\t        return self.__str__()\n\t    def add_failure(self, failure: RandomizationFail):\n\t        '''\n", "        Adds a failure object, representing a single\n\t        randomization failure along the way.\n\t        :param failure: One ``RandomizationFail`` instance\n\t            to add to the debug info.\n\t        '''\n\t        self.failures.append(failure)\n"]}
{"filename": "constrainedrandom/internal/randvar.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport constraint\n\tfrom functools import partial\n\tfrom itertools import product\n\tfrom typing import Any, Callable, Iterable, List, Optional\n\timport random\n\tfrom .. import utils\n\tfrom ..debug import RandomizationDebugInfo, RandomizationFail\n\tfrom ..random import dist\n", "def get_and_call(getter: Callable, member_fn: str, *args: List[Any]):\n\t    '''\n\t    This is a very strange workaround for a very strange issue.\n\t    ``copy.deepcopy`` can handle a ``partial`` for all other members\n\t    of ``random.Random``, but not ``getrandbits``. I.e. it correctly\n\t    copies the other functions and their instance of ``random.Random``,\n\t    but not ``getrandbits``. The reason for this is unknown.\n\t    This function therefore exists to work around that issue\n\t    by getting ``getrandbits`` and calling it. I tried many\n\t    other approaches, but this was the only one that worked.\n", "    :param getter: Getter to call, returning an object that\n\t        has a member function with name ``member_fn``.\n\t    :param member_fn: Member function of the the object returned\n\t        by ``getter``.\n\t    :param args: Arguments to supply to ``member_fn``.\n\t    '''\n\t    callable_obj = getter()\n\t    fn = getattr(callable_obj, member_fn)\n\t    return fn(*args)\n\tclass RandVar:\n", "    '''\n\t    Randomizable variable. For internal use with :class:`RandObj`.\n\t    :param name: The name of this random variable.\n\t    :param _random: Provides the random generator object this instance will use to\n\t        create random values. Either provide an existing instance of a :class:`Random`,\n\t        or leave as ``None`` to use the global Python `random` package.\n\t    :param order: The solution order for this variable with respect to other variables.\n\t    :param domain: The possible values for this random variable, expressed either\n\t        as a ``range``, or as an iterable (e.g. ``list``, ``tuple``) of possible values.\n\t        Mutually exclusive with ``bits`` and ``fn``.\n", "    :param bits: Specifies the possible values of this variable in terms of a width\n\t        in bits. E.g. ``bits=32`` signifies this variable can be ``0 <= x < 1 << 32``.\n\t        Mutually exclusive with ``domain`` and ``fn``.\n\t    :param fn: Specifies a function to call that will provide the value of this random\n\t        variable.\n\t        Mutually exclusive with ``domain`` and ``bits``.\n\t    :param args: Arguments to pass to the function specified in ``fn``.\n\t        If ``fn`` is not used, ``args`` must not be used.\n\t    :param constraints: List or tuple of constraints that apply to this random variable.\n\t        Each of these apply only to the individual values in the list, if a length is\n", "        specified.\n\t    :param constraints: List or tuple of constraints that apply to this random variable.\n\t        Each of these apply across the values in the list, if a length is specified.\n\t    :param length: Specify a length > 0 to turn this variable into a list of random\n\t        values. A value of 0 means a scalar value. A value >= 1 means a list of that length.\n\t    :param max_iterations: The maximum number of failed attempts to solve the randomization\n\t        problem before giving up.\n\t    :param max_domain_size: The maximum size of domain that a constraint satisfaction problem\n\t        may take. This is used to avoid poor performance. When a problem exceeds this domain\n\t        size, we don't use the ``constraint`` package, but just use ``random`` instead.\n", "    :param disable_naive_list_solver: Attempt to use a faster algorithm for solving\n\t        list problems. May be faster, but may negatively impact quality of results.\n\t    '''\n\t    def __init__(self,\n\t        name: str,\n\t        *,\n\t        _random: Optional[random.Random]=None,\n\t        order: int=0,\n\t        domain: Optional[utils.Domain]=None,\n\t        bits: Optional[int]=None,\n", "        fn: Optional[Callable]=None,\n\t        args: Optional[tuple]=None,\n\t        constraints: Optional[Iterable[utils.Constraint]]=None,\n\t        list_constraints: Optional[Iterable[utils.Constraint]]=None,\n\t        length: int,\n\t        max_iterations: int,\n\t        max_domain_size: int,\n\t        disable_naive_list_solver: bool,\n\t    ) -> None:\n\t        self._random = _random\n", "        self.name = name\n\t        self.order = order\n\t        self.length = length\n\t        self.max_iterations = max_iterations\n\t        self.max_domain_size = max_domain_size\n\t        assert  ((domain is not None) != (fn is not None)) != (bits is not None), \"Must specify exactly one of fn, domain or bits\"\n\t        if fn is None:\n\t            assert args is None, \"args has no effect without fn\"\n\t        self.domain = domain\n\t        self.bits = bits\n", "        self.fn = fn\n\t        self.args = args\n\t        self.constraints = constraints if constraints is not None else []\n\t        assert isinstance(self.constraints, list) or isinstance(self.constraints, tuple), \\\n\t            \"constraints was bad type, should be list or tuple\"\n\t        if not isinstance(self.constraints, list):\n\t            self.constraints = list(self.constraints)\n\t        self.list_constraints = list_constraints if list_constraints is not None else []\n\t        assert isinstance(self.list_constraints, list) or isinstance(self.list_constraints, tuple), \\\n\t            \"list_constraints was bad type, should be list or tuple\"\n", "        if not isinstance(self.list_constraints, list):\n\t            self.list_constraints = list(self.list_constraints)\n\t        # Default strategy is to randomize and check the constraints.\n\t        # List constraints are always checked.\n\t        self.check_constraints = len(self.constraints) > 0\n\t        self.randomizer = self.create_randomizer()\n\t        self.disable_naive_list_solver = disable_naive_list_solver\n\t    def create_randomizer(self) -> Callable:\n\t        '''\n\t        Creates a randomizer function that returns an appropriate\n", "        random value for a single instance of the variable, i.e. a single\n\t        element of a list or a simple scalar variable.\n\t        We do this to create a more optimal randomizer than the user might\n\t        have specified that is functionally equivalent.\n\t        We always return a ``partial`` because these work with\n\t        ``copy.deepcopy``, whereas locally-defined functions and\n\t        lambdas can only ever have one instance.\n\t        :return: a function as described.\n\t        :raises TypeError: if the domain is of a bad type.\n\t        '''\n", "        # self.fn, self.bits and self.domain should already be guaranteed\n\t        # to be mutually exclusive - only one should be non-None.\n\t        if self.fn is not None:\n\t            if self.args is not None:\n\t                return partial(self.fn, *self.args)\n\t            else:\n\t                return self.fn\n\t        elif self.bits is not None:\n\t            self.domain = range(0, 1 << self.bits)\n\t            # This is still faster than doing self._get_random().randrange(self.bits << 1),\n", "            # it seems that getrandbits is 10x faster than randrange.\n\t            return partial(get_and_call, self._get_random, 'getrandbits', self.bits)\n\t        else:\n\t            # Handle possible types of domain.\n\t            is_range = isinstance(self.domain, range)\n\t            is_list_or_tuple = isinstance(self.domain, list) or isinstance(self.domain, tuple)\n\t            is_dict = isinstance(self.domain, dict)\n\t            # Range, list and tuple are handled nicely by the constraint package.\n\t            # Other Iterables may not be, e.g. enum.Enum isn't, despite being an Iterable.\n\t            is_iterable = isinstance(self.domain, Iterable)\n", "            if is_iterable and not (is_range or is_list_or_tuple or is_dict):\n\t                # Convert non-dict iterables to a tuple as we don't expect them to need to be mutable,\n\t                # and tuple ought to be slightly more performant than list.\n\t                try:\n\t                    self.domain = tuple(self.domain)\n\t                except TypeError:\n\t                    raise TypeError(f'RandVar was passed a domain of bad type - {self.domain}. '\n\t                                    'This was an Iterable but could not be converted to tuple.')\n\t                is_list_or_tuple = True\n\t            if self.check_constraints and (is_range or is_list_or_tuple) and len(self.domain) < self.max_domain_size:\n", "                # If we are provided a sufficiently small domain and we have constraints, simply construct a\n\t                # constraint solution problem instead.\n\t                problem = constraint.Problem()\n\t                problem.addVariable(self.name, self.domain)\n\t                for con in self.constraints:\n\t                    problem.addConstraint(con, (self.name,))\n\t                # Produces a list of dictionaries - index it up front for very marginal\n\t                # performance gains\n\t                solutions = problem.getSolutions()\n\t                if len(solutions) == 0:\n", "                    debug_fail = RandomizationFail([self.name],\n\t                        [(c, (self.name,)) for c in self.constraints])\n\t                    debug_info = RandomizationDebugInfo()\n\t                    debug_info.add_failure(debug_fail)\n\t                    raise utils.RandomizationError(\"Variable was unsolvable. Check constraints.\", debug_info)\n\t                solution_list = [s[self.name] for s in solutions]\n\t                self.check_constraints = False\n\t                return partial(self._get_random().choice, solution_list)\n\t            elif is_range:\n\t                return partial(self._get_random().randrange, self.domain.start, self.domain.stop)\n", "            elif is_list_or_tuple:\n\t                return partial(self._get_random().choice, self.domain)\n\t            elif is_dict:\n\t                rand = self._get_random()\n\t                if rand is random:\n\t                    # Don't store a module in a partial as this can't be copied.\n\t                    # dist defaults to using the global random module.\n\t                    return partial(dist, self.domain)\n\t                return partial(dist, self.domain, rand)\n\t            else:\n", "                raise TypeError(f'RandVar was passed a domain of a bad type - {self.domain}. '\n\t                                'Domain should be a range, list, tuple, dictionary or other Iterable.')\n\t    def add_constraint(self, constr: utils.Constraint) -> None:\n\t        '''\n\t        Add a single constraint to this variable.\n\t        :param constr: Constraint to add.\n\t        '''\n\t        if self.length > 0:\n\t            # Treat all additional constraints as list constraints,\n\t            # although this is a little less performant.\n", "            self.list_constraints.append(constr)\n\t        else:\n\t            # For adding scalar constraints, reevalute whether we can\n\t            # still use a CSP - recreate the randomizer.\n\t            self.constraints.append(constr)\n\t            self.check_constraints = True\n\t            self.randomizer = self.create_randomizer()\n\t    def _get_random(self) -> random.Random:\n\t        '''\n\t        Internal function to get the appropriate randomization object.\n", "        We can't store the package ``random`` in a member variable as this\n\t        prevents pickling.\n\t        :return: The appropriate random generator.\n\t        '''\n\t        if self._random is None:\n\t            return random\n\t        return self._random\n\t    def get_domain_size(self) -> int:\n\t        '''\n\t        Return total domain size, accounting for length of this random variable.\n", "        :return: domain size, integer.\n\t        '''\n\t        if self.domain is None:\n\t            # If there's no domain, it means we can't estimate the complexity\n\t            # of this variable. Return 1.\n\t            return 1\n\t        else:\n\t            # length == 0 implies a scalar variable, 1 is a list of length 1\n\t            if self.length == 0 or self.length == 1:\n\t                return len(self.domain)\n", "            else:\n\t                # In this case it is effectively cartesian product, i.e.\n\t                # n ** k, where n is the size of the domain and k is the length\n\t                # of the list.\n\t                return len(self.domain) ** self.length\n\t    def can_use_with_constraint(self) -> bool:\n\t        '''\n\t        Check whether this random variable can be used in a\n\t        ``constraint.Problem`` or not.\n\t        Note this isn't depenedent on the domain size, just\n", "        purely whether it will work.\n\t        :return: bool, True if it can be used with ``constraint.Problem``.\n\t        '''\n\t        # constraint can handle the variable as long as it has a domain\n\t        # and the domain isn't a dictionary.\n\t        return self.domain is not None and not isinstance(self.domain, dict)\n\t    def get_constraint_domain(self) -> utils.Domain:\n\t        '''\n\t        Get a ``constraint`` package friendly version of the domain\n\t        of this random variable.\n", "        :return: the variable's domain in a format that will work\n\t            with the ``constraint`` package.\n\t        '''\n\t        if self.length == 0:\n\t            # Straightforward, scalar\n\t            return self.domain\n\t        elif self.length == 1:\n\t            # List of length one\n\t            return [[x] for x in self.domain]\n\t        else:\n", "            # List of greater length, cartesian product.\n\t            # Beware that this may be an extremely large domain.\n\t            # Ensure each element is of type list, which is what\n\t            # we want to return.\n\t            return [list(x) for x in product(self.domain, repeat=self.length)]\n\t    def randomize_once(self, constraints: Iterable[utils.Constraint], check_constraints: bool, debug: bool) -> Any:\n\t        '''\n\t        Get one random value that satisfies the constraints.\n\t        :param constraints: The constraints that apply to this randomization.\n\t        :param check_constraints: Whether constraints need to be checked.\n", "        :param debug: ``True`` to run in debug mode. Slower, but collects\n\t            all debug info along the way and not just the final failure.\n\t        :return: A random value for the variable, respecting the constraints.\n\t        :raises RandomizationError: When the problem cannot be solved in fewer than\n\t            the allowed number of iterations.\n\t        '''\n\t        value = self.randomizer()\n\t        if not check_constraints:\n\t            return value\n\t        value_valid = False\n", "        iterations = 0\n\t        if debug:\n\t            # Collect failures as we go along\n\t            debug_fail = RandomizationFail([self.name],\n\t                [(c, (self.name,)) for c in constraints])\n\t        while not value_valid:\n\t            if iterations == self.max_iterations:\n\t                if not debug:\n\t                    # Just capture the most recent value\n\t                    debug_fail = RandomizationFail([self.name],\n", "                        [(c, (self.name,)) for c in constraints])\n\t                debug_fail.add_values(iterations, {self.name: value})\n\t                debug_info = RandomizationDebugInfo()\n\t                debug_info.add_failure(debug_fail)\n\t                raise utils.RandomizationError(\"Too many iterations, can't solve problem\", debug_fail)\n\t            problem = constraint.Problem()\n\t            problem.addVariable(self.name, (value,))\n\t            for con in constraints:\n\t                problem.addConstraint(con, (self.name,))\n\t            value_valid = problem.getSolution() is not None\n", "            if not value_valid:\n\t                if debug:\n\t                    # Capture all failing values as we go\n\t                    debug_fail.add_values(iterations, {self.name: value})\n\t                value = self.randomizer()\n\t            iterations += 1\n\t        return value\n\t    def randomize_list_csp(\n\t        self,\n\t        constraints: Iterable[utils.Constraint],\n", "        list_constraints: Iterable[utils.Constraint],\n\t    ):\n\t        '''\n\t        Use a CSP to get a full set of soltuons for the random list,\n\t        fulfilling the constraints. Selects and returns one randomization.\n\t        Should only be used when the domain is suitably small.\n\t        :param constraints: The constraints that apply to this randomization.\n\t            These are scalar constraints, i.e. on each individual element of\n\t            the list.\n\t        :param list_constraints: The constraints that apply to the entire list.\n", "        :return: A random list of values for the variable, respecting\n\t            the constraints.\n\t        '''\n\t        problem = constraint.Problem()\n\t        possible_values = self.get_constraint_domain()\n\t        # Prune possibilities according to scalar constraints.\n\t        possible_values = [x for x in possible_values \\\n\t            if all(constr(val) for val in x for constr in constraints)]\n\t        problem.addVariable(self.name, possible_values)\n\t        for con in list_constraints:\n", "            problem.addConstraint(con, (self.name,))\n\t        solutions = problem.getSolutions()\n\t        if len(solutions) == 0:\n\t            debug_fail = RandomizationFail([self.name],\n\t                [(con, (self.name,)) for con in list_constraints])\n\t            debug_info = RandomizationDebugInfo()\n\t            debug_info.add_failure(debug_fail)\n\t            raise utils.RandomizationError(\"Problem was unsolvable.\", debug_info)\n\t        values = self._get_random().choice(solutions)[self.name]\n\t        return values\n", "    def randomize_list_naive(\n\t        self,\n\t        constraints: Iterable[utils.Constraint],\n\t        check_constraints: bool,\n\t        list_constraints: Iterable[utils.Constraint],\n\t        debug : bool,\n\t        debug_fail: Optional[RandomizationFail],\n\t    ):\n\t        '''\n\t        Naive algorithm to randomize a random list of values, and check\n", "        it against the constraints. Faster than CSP as long as it's a simple\n\t        problem. Prone to failure.\n\t        :param constraints: The constraints that apply to this randomization.\n\t            These are scalar constraints, i.e. on each individual element of\n\t            the list.\n\t        :param check_constraints: Whether constraints need to be checked.\n\t        :param list_constraints: The constraints that apply to the entire list.\n\t        :param debug: ``True`` to run in debug mode. Slower, but collects\n\t            all debug info along the way and not just the final failure.\n\t        :param debug_fail: :class:`RandomizationFail` containing debug info,\n", "            if in debug mode, else ``None``.\n\t        :return: A random list of values for the variable, respecting\n\t            the constraints.\n\t        '''\n\t        values = [self.randomize_once(constraints, check_constraints, debug) \\\n\t            for _ in range(self.length)]\n\t        values_valid = len(list_constraints) == 0\n\t        iterations = 0\n\t        max_iterations = self.max_iterations\n\t        while not values_valid:\n", "            if iterations >= max_iterations:\n\t                # This method has failed.\n\t                return None\n\t            problem = constraint.Problem()\n\t            problem.addVariable(self.name, (values,))\n\t            for con in list_constraints:\n\t                problem.addConstraint(con, (self.name,))\n\t            values_valid = problem.getSolution() is not None\n\t            if not values_valid:\n\t                if debug:\n", "                    # Capture all failing values as we go\n\t                    debug_fail.add_values(iterations, {self.name: values})\n\t                iterations += 1\n\t                values = [self.randomize_once(constraints, check_constraints, debug) \\\n\t                    for _ in range(self.length)]\n\t        return values\n\t    def randomize_list_subset(\n\t        self,\n\t        constraints: Iterable[utils.Constraint],\n\t        check_constraints: bool,\n", "        list_constraints: Iterable[utils.Constraint],\n\t        debug : bool,\n\t        debug_fail: Optional[RandomizationFail],\n\t    ):\n\t        '''\n\t        Algorithm that attempts to ensure forward progress when randomizing\n\t        a random list. Over-constrains the problem slightly. Aims to converage\n\t        quickly while still giving good quality of results.\n\t        :param constraints: The constraints that apply to this randomization.\n\t            These are scalar constraints, i.e. on each individual element of\n", "            the list.\n\t        :param check_constraints: Whether constraints need to be checked.\n\t        :param list_constraints: The constraints that apply to the entire list.\n\t        :param debug: ``True`` to run in debug mode. Slower, but collects\n\t            all debug info along the way and not just the final failure.\n\t        :param debug_fail: :class:`RandomizationFail` containing debug info,\n\t            if in debug mode, else ``None``.\n\t        :return: A random list of values for the variable, respecting\n\t            the constraints.\n\t        :raises RandomizationError: When the problem cannot be solved in fewer than\n", "            the allowed number of iterations.\n\t        '''\n\t        values = [self.randomize_once(constraints, check_constraints, debug) \\\n\t            for _ in range(self.length)]\n\t        values_valid = len(list_constraints) == 0\n\t        iterations = 0\n\t        # Allow more attempts at a list, as it may be computationally hard.\n\t        # Assume it's linearly harder.\n\t        max_iterations = self.max_iterations * self.length\n\t        checked = []\n", "        while not values_valid:\n\t            iterations += 1\n\t            if iterations >= max_iterations:\n\t                if not debug:\n\t                    # Create the debug info 'late', only capturing the final\n\t                    # set of values.\n\t                    debug_fail = RandomizationFail([self.name],\n\t                        [(c, (self.name,)) for c in list_constraints])\n\t                debug_fail.add_values(iterations, {self.name: values})\n\t                debug_info = RandomizationDebugInfo()\n", "                debug_info.add_failure(debug_fail)\n\t                raise utils.RandomizationError(\"Too many iterations, can't solve problem\", debug_info)\n\t            # Keep a subset of the answer, to try to ensure forward progress.\n\t            min_group_size = len(checked) + 1\n\t            for idx in range(min_group_size, self.length):\n\t                tmp_values = values[:idx]\n\t                problem = constraint.Problem()\n\t                problem.addVariable(self.name, (tmp_values,))\n\t                for con in list_constraints:\n\t                    problem.addConstraint(con, (self.name,))\n", "                # This may fail if the user is relying on the\n\t                # list being fully-sized in their constraint.\n\t                try:\n\t                    tmp_values_valid = problem.getSolution() is not None\n\t                except Exception:\n\t                    tmp_values_valid = False\n\t                if tmp_values_valid:\n\t                    # Use these values and continue this loop,\n\t                    # adding to the checked values if more\n\t                    # values satisfy the constraints.\n", "                    # Check the entire list to ensure maximum\n\t                    # degrees of freedom.\n\t                    checked = tmp_values\n\t            values = checked + [self.randomize_once(constraints, check_constraints, debug) \\\n\t                for _ in range(self.length - len(checked))]\n\t            problem = constraint.Problem()\n\t            problem.addVariable(self.name, (values,))\n\t            for con in list_constraints:\n\t                problem.addConstraint(con, (self.name,))\n\t            values_valid = problem.getSolution() is not None\n", "            if debug and not values_valid:\n\t                # Capture failure info as we go along\n\t                debug_fail.add_values(iterations, {self.name: values})\n\t        return values\n\t    def randomize(\n\t        self,\n\t        temp_constraints: Optional[Iterable[utils.Constraint]]=None,\n\t        debug: bool=False\n\t    ) -> Any:\n\t        '''\n", "        Returns a random value based on the definition of this random variable.\n\t        Does not modify the state of the :class:`RandVar` instance.\n\t        :param temp_constraints: Temporary constraints to apply only for\n\t            this randomization.\n\t        :return: A randomly generated value, conforming to the definition of\n\t            this random variable, its constraints, etc.\n\t        :raises RandomizationError: When the problem cannot be solved in fewer than\n\t            the allowed number of iterations.\n\t        '''\n\t        check_constraints = self.check_constraints\n", "        # Handle temporary constraints. Start with copy of existing constraints,\n\t        # adding any temporary ones in.\n\t        constraints = list(self.constraints)\n\t        using_temp_constraints = temp_constraints is not None and len(temp_constraints) > 0\n\t        if self.length == 0:\n\t            # Interpret temporary constraints as scalar constraints\n\t            if using_temp_constraints:\n\t                check_constraints = True\n\t                constraints += temp_constraints\n\t            return self.randomize_once(constraints, check_constraints, debug)\n", "        else:\n\t            list_constraints = list(self.list_constraints)\n\t            # Interpret temporary constraints as list constraints\n\t            if using_temp_constraints:\n\t                list_constraints += temp_constraints\n\t            # Create list of values and check after that list constraints\n\t            # are followed.\n\t            # We can't check as we go along as this artificially limits\n\t            # the values that can be selected. E.g. if you have a constraint\n\t            # that says the values sum to zero, you would only ever\n", "            # end up with an all-zero list if you enforced the constraint\n\t            # at each iteration.\n\t            # Try to construct a constraint solution problem, if possible.\n\t            check_list_constraints = len(list_constraints) > 0\n\t            use_csp = check_list_constraints and self.can_use_with_constraint() \\\n\t                    and self.get_domain_size() <= self.max_domain_size\n\t            if use_csp:\n\t                return self.randomize_list_csp(constraints, list_constraints)\n\t            else:\n\t                # Otherwise, just randomize and check.\n", "                if debug:\n\t                    # Collect failures as we go along\n\t                    debug_fail = RandomizationFail([self.name],\n\t                        [(c, (self.name,)) for c in list_constraints])\n\t                else:\n\t                    debug_fail = None\n\t                # Start by purely randomizing and checking, unless\n\t                # naive mode disabled.\n\t                if not self.disable_naive_list_solver:\n\t                    values = self.randomize_list_naive(constraints, \\\n", "                        check_constraints, list_constraints, debug, debug_fail)\n\t                    if values is not None:\n\t                        return values\n\t                # If the above fails, use a slightly smarter algorithm,\n\t                # which is more likely to make forward progress, but\n\t                # might also restrict value selection.\n\t                # No fallback if this fails.\n\t                return self.randomize_list_subset(constraints, \\\n\t                    check_constraints, list_constraints, debug, debug_fail)\n"]}
{"filename": "constrainedrandom/internal/vargroup.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport constraint\n\tfrom functools import cached_property\n\tfrom typing import Any, Dict, List, Tuple, TYPE_CHECKING, Union\n\tfrom .. import utils\n\tfrom ..debug import RandomizationDebugInfo, RandomizationFail\n\tif TYPE_CHECKING:\n\t    from ..internal.randvar import RandVar\n\tclass VarGroup:\n", "    '''\n\t    Represents a group of random variables to be solved together.\n\t    Determines which variables in the group can be solved via a\n\t    constraint problem and which ones must be randomized and checked.\n\t    (Used internally by :class:`MultiVarProblem`).\n\t    :param group: List of random variables in this group.\n\t    :param solved vars: List of variable names that are already solved.\n\t    :param problem: Constraint problem to add variables and constraints to.\n\t        Note that the instance will be modified by this function.\n\t    :param constraints: Constraints that still apply at this stage of\n", "        solving the problem.\n\t    :param max_domain_size: The maximum size of domain that a constraint satisfaction problem\n\t        may take. This is used to avoid poor performance. When a problem exceeds this domain\n\t        size, we don't use the ``constraint`` package, but just use ``random`` instead.\n\t    :param debug: ``True`` to run in debug mode. Slower, but collects\n\t        all debug info along the way and not just the final failure.\n\t    :return: A tuple of 1) a list the names of the variables in the group,\n\t        2) a list of variables that must be randomized rather than solved\n\t        via a constraint problem,\n\t        3) a list of constraints and variables that won't be applied for this group.\n", "    '''\n\t    def __init__(\n\t        self,\n\t        group: List['RandVar'],\n\t        solved_vars: List[str],\n\t        problem: constraint.Problem,\n\t        constraints: List[utils.ConstraintAndVars],\n\t        max_domain_size: int,\n\t        debug: bool,\n\t    ) -> None:\n", "        self.group_vars: List[str] = []\n\t        self.rand_vars: List['RandVar'] = []\n\t        self.raw_constraints: List[utils.ConstraintAndVars] = []\n\t        self.problem = problem\n\t        self.max_domain_size = max_domain_size\n\t        self.debug = debug\n\t        # Construct a constraint problem where possible. A variable must have a domain\n\t        # in order to be part of the problem. If it doesn't have one, it must just be\n\t        # randomized. Also take care not to exceed tha maximum domain size for an\n\t        # individual variable.\n", "        for var in group:\n\t            self.group_vars.append(var.name)\n\t            if var.can_use_with_constraint() and var.get_domain_size() < self.max_domain_size:\n\t                self.problem.addVariable(var.name, var.get_constraint_domain())\n\t                # If variable has its own constraints, these must be added to the problem,\n\t                # regardless of whether var.check_constraints is true, as the var's value will\n\t                # depend on the value of the other constrained variables in the problem.\n\t                for con in var.constraints:\n\t                    self.problem.addConstraint(con, (var.name,))\n\t                    self.raw_constraints.append((con, (var.name,)))\n", "            else:\n\t                self.rand_vars.append(var)\n\t        # Add all pertinent constraints\n\t        self.skipped_constraints = []\n\t        for (con, vars) in constraints:\n\t            skip = False\n\t            for var in vars:\n\t                if var not in self.group_vars and var not in solved_vars:\n\t                    # Skip this constraint\n\t                    skip = True\n", "                    break\n\t            if skip:\n\t                self.skipped_constraints.append((con, vars))\n\t                continue\n\t            self.problem.addConstraint(con, vars)\n\t            self.raw_constraints.append((con, vars))\n\t    @cached_property\n\t    def debug_fail(self):\n\t        '''\n\t        Cached property, instance of ``RandomizationFail`` that\n", "        corresponds to this problem.\n\t        '''\n\t        failing_constraints = list(self.raw_constraints)\n\t        for var in self.rand_vars:\n\t            failing_constraints += [(constr, (var.name,)) for constr in var.constraints]\n\t        return RandomizationFail(list(self.group_vars), failing_constraints)\n\t    def can_retry(self):\n\t        '''\n\t        Call this to determine whether or not retrying ``solve``\n\t        can have a different outcome.\n", "        :return: ``True`` if calling ``solve`` again might yield\n\t            a different result (assuming it has already been called.)\n\t            ``False`` otherwise.\n\t        '''\n\t        return len(self.rand_vars) > 0\n\t    def solve(\n\t        self,\n\t        max_iterations: int,\n\t        solutions_per_group: int,\n\t        debug_info: RandomizationDebugInfo,\n", "    ) -> Union[List[Dict[str, Any]], None]:\n\t        '''\n\t        Attempts to solve one group of variables. Preferentially uses a constraint\n\t        satisfaction problem, but may need to randomize variables that can't be\n\t        added to a constraint satisfaction problem.\n\t        (Used internally by :class:`MultiVarProblem`).\n\t        :param max_iterations: Maximum number of attempts to solve the problem\n\t            before giving up.\n\t        :solutions_per_group: How many random values to produce before attempting\n\t            to solve the constraint satisfaction problem. A lower value will run\n", "            quicker but has less chance to succeed.\n\t        :param debug_info: :class:`RandomizationDebugInfo`` instance to collect\n\t            any debug info.\n\t        :return: A list of all possible solutions for the group, or ``None`` if\n\t            it can't be solved within ``max_iterations`` attempts.\n\t        '''\n\t        # Problem is ready to solve, apart from random variables\n\t        solutions = []\n\t        attempts = 0\n\t        if len(self.rand_vars) > 0:\n", "            # If we have additional random variables, randomize and check\n\t            while True:\n\t                for var in self.rand_vars:\n\t                    # Add random variables in with a concrete value\n\t                    if solutions_per_group == 1:\n\t                        self.problem.addVariable(var.name, (var.randomize(),))\n\t                    else:\n\t                        iterations = self.max_domain_size if solutions_per_group is None else solutions_per_group\n\t                        var_domain = []\n\t                        for _ in range(iterations):\n", "                            val = var.randomize()\n\t                            # List is ~2x slower than set for 'in',\n\t                            # but variables might be non-hashable.\n\t                            if val not in var_domain:\n\t                                var_domain.append(val)\n\t                        self.problem.addVariable(var.name, var_domain)\n\t                solutions = self.problem.getSolutions()\n\t                if len(solutions) > 0:\n\t                    break\n\t                else:\n", "                    attempts += 1\n\t                    # Always output debug info on the last attempt.\n\t                    failed = attempts >= max_iterations\n\t                    debug = self.debug or (solutions_per_group is None and failed)\n\t                    for var in self.rand_vars:\n\t                        # Remove from problem, they will be re-added with different concrete values\n\t                        del self.problem._variables[var.name]\n\t                    if debug:\n\t                        self.debug_fail.add_values(attempts, dict(self.problem._variables))\n\t                    if failed:\n", "                        # We have failed, give up\n\t                        debug_info.add_failure(self.debug_fail)\n\t                        return None\n\t        else:\n\t            # Otherwise, just get the solutions, no randomization required.\n\t            solutions = self.problem.getSolutions()\n\t            if len(solutions) == 0:\n\t                # Failed\n\t                debug_info.add_failure(self.debug_fail)\n\t                return None\n", "        return solutions\n"]}
{"filename": "constrainedrandom/internal/__init__.py", "chunked_list": []}
{"filename": "constrainedrandom/internal/multivar.py", "chunked_list": ["# SPDX-License-Identifier: MIT\n\t# Copyright (c) 2023 Imagination Technologies Ltd. All Rights Reserved\n\timport constraint\n\tfrom collections import defaultdict\n\tfrom typing import Any, Dict, Iterable, List, Optional, TYPE_CHECKING, Tuple, Union\n\tfrom .vargroup import VarGroup\n\tfrom .. import utils\n\tfrom ..debug import RandomizationDebugInfo, RandomizationFail\n\tif TYPE_CHECKING:\n\t    from ..randobj import RandObj\n", "    from ..internal.randvar import RandVar\n\tclass MultiVarProblem:\n\t    '''\n\t    Multi-variable problem. Used internally by RandObj.\n\t    Represents one problem concerning multiple random variables,\n\t    where those variables all share dependencies on one another.\n\t    :param parent: The :class:`RandObj` instance that owns this instance.\n\t    :param vars: The dictionary of names and :class:`RandVar` instances this problem consists of.\n\t    :param constraints: An iterable of tuples of (constraint, (variables,...)) denoting\n\t        the constraints and the variables they apply to.\n", "    :param max_iterations: The maximum number of failed attempts to solve the randomization\n\t        problem before giving up.\n\t    :param max_domain_size: The maximum size of domain that a constraint satisfaction problem\n\t        may take. This is used to avoid poor performance. When a problem exceeds this domain\n\t        size, we don't use the ``constraint`` package, but just use ``random`` instead.\n\t        For :class:`MultiVarProblem`, we also use this to determine the maximum size of a\n\t        solution group.\n\t    '''\n\t    def __init__(\n\t        self,\n", "        parent: 'RandObj',\n\t        vars: List['RandVar'],\n\t        constraints: Iterable[utils.ConstraintAndVars],\n\t        max_iterations: int,\n\t        max_domain_size: int,\n\t    ) -> None:\n\t        self.parent = parent\n\t        self.vars = vars\n\t        self.constraints = constraints\n\t        self.max_iterations = max_iterations\n", "        self.max_domain_size = max_domain_size\n\t        self.order = None\n\t        self.debug = False\n\t        self.debug_info = None\n\t    def determine_order(self, with_values: Dict[str, Any]) -> List[List['RandVar']]:\n\t        '''\n\t        Chooses an order in which to resolve the values of the variables.\n\t        Used internally.\n\t        :param with_values: Dictionary of variables with set values for this\n\t            randomization.\n", "        :return: A list of lists denoting the order in which to solve the problem.\n\t            Each inner list is a group of variables that can be solved at the same\n\t            time. Each inner list will be considered separately.\n\t        '''\n\t        # Use 'cached' version if no concrete values are specified\n\t        problem_changed = len(with_values) != 0\n\t        if not problem_changed and self.order is not None:\n\t            return self.order\n\t        # Aim to build a list of lists, each inner list denoting a group of variables\n\t        # to solve at the same time.\n", "        # The best case is to simply solve them all at once, if possible, however it is\n\t        # likely that the domain will be too large.\n\t        # If values are provided, simply don't add those variables to the ordering problem.\n\t        if problem_changed:\n\t            vars = []\n\t            for var in self.vars:\n\t                if var.name not in with_values:\n\t                    vars.append(var)\n\t        else:\n\t            vars = list(self.vars)\n", "        # Use order hints first, remaining variables can be placed anywhere the domain\n\t        # isn't too large.\n\t        sorted_vars = sorted(vars, key=lambda x: x.order)\n\t        # Currently this is just a flat list. Group into as large groups as possible.\n\t        result = [[sorted_vars[0]]]\n\t        index = 0\n\t        domain_size = sorted_vars[0].get_domain_size()\n\t        for var in sorted_vars[1:]:\n\t            domain_size = domain_size * var.get_domain_size()\n\t            if var.order == result[index][0].order and domain_size < self.max_domain_size:\n", "                # Put it in the same group as the previous one, carry on\n\t                result[index].append(var)\n\t            else:\n\t                # Make a new group\n\t                index += 1\n\t                domain_size = var.get_domain_size()\n\t                result.append([var])\n\t        if not problem_changed:\n\t            self.order = result\n\t        return result\n", "    def solve_groups(\n\t        self,\n\t        groups: List[List['RandVar']],\n\t        with_values: Dict[str, Any],\n\t        max_iterations: int,\n\t        solutions_per_group: Optional[int]=None,\n\t    ) -> Union[Dict[str, Any], None]:\n\t        '''\n\t        Constraint solving algorithm. (Used internally by :class:`MultiVarProblem`)\n\t        :param groups: The list of lists denoting the order in which to resolve the random variables.\n", "            See :func:`determine_order`.\n\t        :param with_values: Dictionary of variables with set values for this\n\t            randomization.\n\t        :param max_iterations: The maximum number of failed attempts to solve the randomization\n\t            problem before giving up.\n\t        :param solutions_per_group: If ``solutions_per_group`` is not ``None``,\n\t            solve each constraint group problem 'sparsely',\n\t            i.e. maintain only a subset of potential solutions between groups.\n\t            Fast but prone to failure.\n\t            ``solutions_per_group = 1`` is effectively a depth-first search through the state space\n", "            and comes with greater benefits of considering each multi-variable constraint at\n\t            most once.\n\t            If ``solutions_per_group`` is ``None``, Solve constraint problem 'thoroughly',\n\t            i.e. keep all possible results between iterations.\n\t            Slow, but will usually converge.\n\t        :returns: A valid solution to the problem, in the form of a dictionary with the\n\t            names of the random variables as keys and the valid solution as the values.\n\t            Returns ``None`` if no solution is found within the allotted ``max_iterations``.\n\t        '''\n\t        constraints = self.constraints\n", "        sparse_solver = solutions_per_group is not None\n\t        solutions = []\n\t        solved_vars = []\n\t        # Respect assigned temporary values\n\t        if len(with_values) > 0:\n\t            for var_name in with_values.keys():\n\t                solved_vars.append(var_name)\n\t            solutions.append(with_values)\n\t        # If solving sparsely, we'll create a new problem for each group.\n\t        # If not solving sparsely, just create one big problem that we add to\n", "        # as we go along.\n\t        if not sparse_solver:\n\t            problem = constraint.Problem()\n\t            for var_name, value in with_values.items():\n\t                problem.addVariable(var_name, (value,))\n\t        for group in groups:\n\t            if sparse_solver:\n\t                # Construct one problem per group, add solved variables from previous groups.\n\t                problem = constraint.Problem()\n\t            # Construct the appropriate group variable problem\n", "            group_problem = VarGroup(\n\t                group,\n\t                solved_vars,\n\t                problem,\n\t                constraints,\n\t                self.max_domain_size,\n\t                self.debug,\n\t            )\n\t            group_solutions = None\n\t            attempts = 0\n", "            while group_solutions is None or len(group_solutions) == 0:\n\t                if attempts >= max_iterations:\n\t                    # We have failed, give up\n\t                    return None\n\t                if attempts > 0 and not group_problem.can_retry():\n\t                    # Not worth retrying - the same result will be obtained.\n\t                    return None\n\t                if sparse_solver:\n\t                    if len(solutions) > 0:\n\t                        # Respect a proportion of the solution space, determined\n", "                        # by the sparsity/solutions_per_group.\n\t                        if solutions_per_group >= len(solutions):\n\t                            solution_subset = solutions\n\t                        else:\n\t                            solution_subset = self.parent._get_random().choices(\n\t                                solutions,\n\t                                k=solutions_per_group\n\t                            )\n\t                        if solutions_per_group == 1:\n\t                            for var_name, value in solution_subset[0].items():\n", "                                if var_name in problem._variables:\n\t                                    del problem._variables[var_name]\n\t                                problem.addVariable(var_name, (value,))\n\t                        else:\n\t                            solution_space = defaultdict(list)\n\t                            for soln in solution_subset:\n\t                                for var_name, value in soln.items():\n\t                                    # List is ~2x slower than set for 'in',\n\t                                    # but variables might be non-hashable.\n\t                                    if value not in solution_space[var_name]:\n", "                                        solution_space[var_name].append(value)\n\t                            for var_name, values in solution_space.items():\n\t                                if var_name in problem._variables:\n\t                                    del problem._variables[var_name]\n\t                                problem.addVariable(var_name, values)\n\t                # Attempt to solve the group\n\t                group_solutions = group_problem.solve(\n\t                    max_iterations,\n\t                    solutions_per_group,\n\t                    self.debug_info,\n", "                )\n\t                attempts += 1\n\t            # This group is solved, move on to the next group.\n\t            if solutions_per_group == 1:\n\t                # This means we have exactly one solution for the variables considered so far,\n\t                # meaning we don't need to re-apply solved constraints for future groups.\n\t                constraints = group_problem.skipped_constraints\n\t            solved_vars += group_problem.group_vars\n\t            solutions = group_solutions\n\t        return self.parent._get_random().choice(solutions)\n", "    def solve(\n\t        self,\n\t        sparse: bool,\n\t        thorough: bool,\n\t        with_values: Optional[Dict[str, Any]]=None,\n\t        debug: bool=False,\n\t    ) -> Union[Dict[str, Any], None]:\n\t        '''\n\t        Attempt to solve the variables with respect to the constraints.\n\t        :param with_values: Dictionary of variables with set values for this\n", "            randomization.\n\t        :return: One valid solution for the randomization problem, represented as\n\t            a dictionary with keys referring to the named variables.\n\t        :param debug: ``True`` to run in debug mode. Slower, but collects\n\t            all debug info along the way and not just the final failure.\n\t        :raises RandomizationError: When the problem cannot be solved in fewer than\n\t            the allowed number of iterations.\n\t        '''\n\t        with_values = {} if with_values is None else with_values\n\t        groups = self.determine_order(with_values)\n", "        solution = None\n\t        # Create debug info in case of failure\n\t        self.debug_info = RandomizationDebugInfo()\n\t        self.debug = debug\n\t        # Try to solve sparsely first\n\t        if sparse:\n\t            sparsities = [1, 10, 100, 1000]\n\t            # The worst-case value of the number of iterations for one sparsity level is:\n\t            # iterations_per_sparsity * iterations_per_attempt\n\t            # because of the call to solve_groups hitting iterations_per_attempt.\n", "            # Failing individual solution attempts speeds up some problems greatly,\n\t            # this can be thought of as pruning explorations of the state tree.\n\t            # So, reduce iterations_per_attempt by an order of magnitude.\n\t            iterations_per_sparsity = self.max_iterations\n\t            # Ensure it's non-zero\n\t            iterations_per_attempt = (self.max_iterations // 10) + 1\n\t            for sparsity in sparsities:\n\t                for _ in range(iterations_per_sparsity):\n\t                    solution = self.solve_groups(\n\t                        groups=groups,\n", "                        with_values=with_values,\n\t                        max_iterations=iterations_per_attempt,\n\t                        solutions_per_group=sparsity,\n\t                    )\n\t                    if solution is not None and len(solution) > 0:\n\t                        return solution\n\t        if thorough:\n\t            # Try 'thorough' method - no backup plan if this fails\n\t            solution = self.solve_groups(\n\t                groups=groups,\n", "                with_values=with_values,\n\t                max_iterations=self.max_iterations,\n\t                solutions_per_group=None,\n\t            )\n\t        if solution is None:\n\t            raise utils.RandomizationError(\"Could not solve problem.\", self.debug_info)\n\t        return solution\n"]}
