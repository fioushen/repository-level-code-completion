{"filename": "tests/test_abrp_api.py", "chunked_list": ["import json\n\tfrom unittest import TestCase\n\tfrom unittest.mock import patch, PropertyMock\n\timport requests\n\tfrom saic_ismart_client.abrp_api import AbrpApi\n\tfrom saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsWayPoint, \\\n\t    RvsWgs84Point, Timestamp4Short, RvsBasicStatus25857\n\tfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp\n\tTLM_URL = 'https://api.iternio.com/1/tlm/send'\n\tABRP_API_KEY = '8cfc314b-03cd-4efe-ab7d-4431cd8f2e2d'\n", "ABRP_USER_TOKEN = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\tdef get_mocked_vehicle_status() -> OtaRvmVehicleStatusResp25857:\n\t    vehicle_status = OtaRvmVehicleStatusResp25857()\n\t    vehicle_status.gps_position = RvsPosition()\n\t    vehicle_status.gps_position.way_point = RvsWayPoint()\n\t    vehicle_status.gps_position.way_point.position = RvsWgs84Point()\n\t    vehicle_status.gps_position.way_point.position.latitude = 10000000\n\t    vehicle_status.gps_position.way_point.position.longitude = 10000000\n\t    vehicle_status.gps_position.way_point.position.altitude = 100\n\t    vehicle_status.gps_position.timestamp_4_short = Timestamp4Short()\n", "    vehicle_status.gps_position.timestamp_4_short.seconds = 1000000000\n\t    vehicle_status.gps_position.way_point.speed = 100\n\t    vehicle_status.gps_position.way_point.heading = 90\n\t    vehicle_status.basic_vehicle_status = RvsBasicStatus25857()\n\t    # is charging\n\t    vehicle_status.basic_vehicle_status.extended_data2 = 0\n\t    # is parked\n\t    vehicle_status.basic_vehicle_status.engine_status = 0\n\t    vehicle_status.basic_vehicle_status.hand_brake = False\n\t    # temperature\n", "    vehicle_status.basic_vehicle_status.exterior_temperature = 10\n\t    vehicle_status.basic_vehicle_status.mileage = 1000\n\t    vehicle_status.basic_vehicle_status.fuel_range_elec = 32000\n\t    return vehicle_status\n\tdef get_mocked_charge_status() -> OtaChrgMangDataResp:\n\t    charge_status = OtaChrgMangDataResp()\n\t    charge_status.bmsPackSOCDsp = 841\n\t    charge_status.bmsPackCrnt = 20000\n\t    charge_status.bmsPackVol = 1602\n\t    return charge_status\n", "def mock_post(mocked_post):\n\t    def res():\n\t        r = requests.Response()\n\t        r.status_code = 200\n\t        return r\n\t    mocked_post.return_value = res()\n\t    type(mocked_post.return_value).content = PropertyMock(return_value=json.dumps({'status': 'ok'}).encode())\n\tclass TestAbrpApi(TestCase):\n\t    def setUp(self) -> None:\n\t        self.abrp_api = AbrpApi(ABRP_API_KEY, ABRP_USER_TOKEN)\n", "    @patch.object(requests, 'post')\n\t    def test_update_abrp(self, mocked_post):\n\t        vehicle_status = get_mocked_vehicle_status()\n\t        charge_status = get_mocked_charge_status()\n\t        mock_post(mocked_post)\n\t        self.abrp_api.update_abrp(vehicle_status, charge_status)\n\t        self.assertEqual(TLM_URL, mocked_post.call_args.kwargs['url'])\n\t        header_dict = mocked_post.call_args.kwargs['headers']\n\t        self.check_dict_value(header_dict, 'Authorization', f'APIKEY {ABRP_API_KEY}')\n\t        params_dict = mocked_post.call_args.kwargs['params']\n", "        self.check_dict_value(params_dict, 'token', ABRP_USER_TOKEN)\n\t        tlm_value = params_dict['tlm']\n\t        tlm_json = json.loads(tlm_value)\n\t        self.check_dict_value(tlm_json, 'utc', 1000000000)\n\t        self.check_dict_value(tlm_json, 'soc', 84.1)\n\t        self.check_dict_value(tlm_json, 'power', 0.0)\n\t        self.check_dict_value(tlm_json, 'speed', 10.0)\n\t        self.check_dict_value(tlm_json, 'lat', 10.00000000)\n\t        self.check_dict_value(tlm_json, 'lon', 10.00000000)\n\t        self.check_dict_value(tlm_json, 'is_charging', 0)\n", "        self.check_dict_value(tlm_json, 'is_parked', 1)\n\t        self.check_dict_value(tlm_json, 'heading', 90)\n\t        self.check_dict_value(tlm_json, 'elevation', 100)\n\t        self.check_dict_value(tlm_json, 'voltage', 400.5)\n\t        self.check_dict_value(tlm_json, 'current', 0.0)\n\t        self.check_dict_value(tlm_json, 'ext_temp', 10)\n\t        self.check_dict_value(tlm_json, 'odometer', 100.0)\n\t        self.check_dict_value(tlm_json, 'est_battery_range', 3200.0)\n\t    def check_dict_value(self, data: dict, key: str, expected_value):\n\t        if key in data:\n", "            self.assertEqual(expected_value, data[key])\n\t        else:\n\t            self.fail(f'{key} missing')\n"]}
{"filename": "tests/test_Message_v1_1.py", "chunked_list": ["import calendar\n\timport time\n\tfrom typing import cast\n\tfrom unittest import TestCase\n\tfrom saic_ismart_client.common_model import DataEncodingType, MessageCounter, BasicPosition, NetworkInfo, Header\n\tfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\n\tfrom saic_ismart_client.ota_v1_1.data_model import MpUserLoggingInReq, MessageBodyV11, MessageV11, MessageListReq,\\\n\t    StartEndNumber\n\tclass TestMessageCoderV11(TestCase):\n\t    def setUp(self) -> None:\n", "        self.message_coder = MessageCoderV11()\n\t    def test_encode_login_request(self):\n\t        expected_hex = '01F5111005600882CB162C58B162C58B162C58B162C58B162C58B162C58B162C58B162C58B162C58'\\\n\t                       + 'B162C58B162C58B162C58B161AB062C66C8240020200468ACF1343530ECA864468ACF1342468ACF1'\\\n\t                       + '342000001440100A08952A54A952A54AABAC30B162C586162C58B161858B162C30B162C587562C58'\\\n\t                       + '60C2C58B162FD8B162C58B0C1858B162C58B162C58BF62C586162C58B162C58B0B6C306161858B16'\\\n\t                       + '1830B162C30B162C58B162C586162C58B162C58617EFD8B162C586162C58B162C30B162C30B16183'\\\n\t                       + '0B162C58B162C58B162C58B162C306161858B162C58B162C58B161858B162C58B162C586162C58B0'\\\n\t                       + '8D1A3CBD796FE1971E1E4'\n\t        header = Header()\n", "        header.protocol_version = 17\n\t        expected_message = MessageV11(header, MessageBodyV11(), MpUserLoggingInReq())\n\t        self.message_coder.decode_response(expected_hex, expected_message)\n\t        body = MessageBodyV11()\n\t        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        body.application_data_length = 162\n\t        body.application_data_protocol_version = 513\n\t        body.application_id = '501'\n\t        body.event_creation_time = calendar.timegm(time.strptime('2022-09-30 01:06:40', '%Y-%m-%d %H:%M:%S'))\n\t        body.icc_id = '12345678901234567890'\n", "        body.message_counter = MessageCounter()\n\t        body.message_counter.downlink_counter = 0\n\t        body.message_counter.uplink_counter = 1\n\t        body.message_id = 1\n\t        body.sim_info = '1234567890987654321'\n\t        body.test_flag = 2\n\t        body.uid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n\t        user_login_req = MpUserLoggingInReq()\n\t        user_login_req.device_id = 'X0XXXX0XXXXX0XXXX0XXXX:XXX00XXXX_XXXXXX00XXXXXXXXX_XXX0XXXXXXXX-X00X0XXX00XXX0XX'\\\n\t                                   + 'XXXXXX0XXXXXXX0__XXXXX0XXXXXX0XXX0XX00XXXXXXXXXXXXXXX00X0XXXXXXXXXXX0XXXXXXXXX0X'\\\n", "                                   + 'XXX###europecar'\n\t        user_login_req.password = '********'\n\t        actual_message = MessageV11(header, body, user_login_req)\n\t        actual_hex = self.message_coder.encode_request(actual_message)\n\t        self.validate_message_body(cast(MessageBodyV11, expected_message.body),\n\t                                   cast(MessageBodyV11, actual_message.body))\n\t        self.assertEqual(expected_hex, actual_hex)\n\t    def test_encode_message_list_request(self):\n\t        expected_hex = '011B112007900C82C60C183060C183060C183060C183060C183060C183060C183060C183060C183'\\\n\t                       + '072C183060C183060E5CB972E5CB9B0E5CB973616B96162C2D72E6C395AE5CD872B5CD8B0E6C586'\\\n", "                       + '161CD87362C587361AB362C6A67E00020200468ACF134468ACF1342468ACF1342468ACF13420000'\\\n\t                       + '00240100A080000000000080000000000A120CC834A680'\n\t        header = Header()\n\t        header.protocol_version = 18\n\t        expected_message = MessageV11(header, MessageBodyV11(), MessageListReq())\n\t        self.message_coder.decode_response(expected_hex, expected_message)\n\t        body = MessageBodyV11()\n\t        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        body.application_data_length = 18\n\t        body.application_data_protocol_version = 513\n", "        body.application_id = '531'\n\t        body.event_creation_time = calendar.timegm(time.strptime('2022-10-22 00:53:20', '%Y-%m-%d %H:%M:%S'))\n\t        body.icc_id = '12345678901234567890'\n\t        body.message_counter = MessageCounter()\n\t        body.message_counter.downlink_counter = 0\n\t        body.message_counter.uplink_counter = 1\n\t        body.message_id = 1\n\t        body.sim_info = '1234567891234567890'\n\t        body.test_flag = 2\n\t        body.token = '99X9999X-90XX-99X9-99X9-9XX9XX0X9X9XXX9X'\n", "        body.uid = '00000000000000000000000000000000000090000000099999'\n\t        message_list_req = MessageListReq()\n\t        message_list_req.message_group = \"ALARM\"\n\t        message_list_req.start_end_number = StartEndNumber()\n\t        message_list_req.start_end_number.end_number = 20\n\t        message_list_req.start_end_number.start_number = 1\n\t        actual_message = MessageV11(header, body, message_list_req)\n\t        actual_hex = self.message_coder.encode_request(actual_message)\n\t        self.validate_message_body(cast(MessageBodyV11, expected_message.body),\n\t                                   cast(MessageBodyV11, actual_message.body))\n", "        self.assertEqual(expected_hex, actual_hex)\n\t    def validate_message_body(self, expected: MessageBodyV11, actual: MessageBodyV11) -> None:\n\t        self.assertEqual(expected.message_id, actual.message_id)\n\t        self.assertEqual(expected.event_creation_time, actual.event_creation_time)\n\t        self.assertEqual(expected.application_id, actual.application_id)\n\t        self.assertEqual(expected.application_data_protocol_version, actual.application_data_protocol_version)\n\t        self.assertEqual(expected.test_flag, actual.test_flag)\n\t        self.assertEqual(expected.uid, actual.uid)\n\t        self.assertEqual(expected.token, actual.token)\n\t        self.assertEqual(expected.event_id, actual.event_id)\n", "        self.assertEqual(expected.application_data_encoding, actual.application_data_encoding)\n\t        self.assertEqual(expected.application_data_length, actual.application_data_length)\n\t        self.assertEqual(expected.vin, actual.vin)\n\t        self.assertEqual(expected.ack_required, actual.ack_required)\n\t        self.assertEqual(expected.result, actual.result)\n\t        self.assertEqual(expected.error_message, actual.error_message)\n\t        if expected.message_counter is not None:\n\t            self.validate_message_counter(expected.message_counter, actual.message_counter)\n\t        else:\n\t            self.assertIsNone(actual.message_counter)\n", "        self.assertEqual(expected.icc_id, actual.icc_id)\n\t        self.assertEqual(expected.sim_info, actual.sim_info)\n\t        self.assertEqual(expected.stateless_dispatcher_message, actual.stateless_dispatcher_message)\n\t        self.assertEqual(expected.crqm_request, actual.crqm_request)\n\t        if expected.basic_position is not None:\n\t            self.validate_basic_position(expected.basic_position, actual.basic_position)\n\t        else:\n\t            self.assertIsNone(actual.basic_position)\n\t        if expected.network_info is not None:\n\t            self.validate_network_info(expected.network_info, actual.network_info)\n", "        else:\n\t            self.assertIsNone(actual.network_info)\n\t        self.assertEqual(expected.hmi_language, actual.hmi_language)\n\t    def validate_message_counter(self, expected: MessageCounter, actual: MessageCounter) -> None:\n\t        self.assertEqual(expected.downlink_counter, actual.downlink_counter)\n\t        self.assertEqual(expected.uplink_counter, actual.uplink_counter)\n\t    def validate_basic_position(self, expected: BasicPosition, actual: BasicPosition) -> None:\n\t        self.assertEqual(expected.latitude, actual.latitude)\n\t        self.assertEqual(expected.longitude, actual.longitude)\n\t    def validate_network_info(self, expected: NetworkInfo, actual: NetworkInfo) -> None:\n", "        self.assertEqual(expected.mcc_network, actual.mcc_network)\n\t        self.assertEqual(expected.mnc_network, actual.mnc_network)\n\t        self.assertEqual(expected.mcc_sim, actual.mcc_sim)\n\t        self.assertEqual(expected.mnc_sim, actual.mnc_sim)\n\t        self.assertEqual(expected.signal_strength, actual.signal_strength)\n"]}
{"filename": "tests/test_saic_api.py", "chunked_list": ["from typing import cast\n\tfrom unittest import TestCase\n\tfrom unittest.mock import patch, PropertyMock\n\timport requests\n\timport saic_ismart_client.saic_api\n\tfrom saic_ismart_client.common_model import Header, MessageV2, MessageBodyV2\n\tfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\n\tfrom saic_ismart_client.ota_v1_1.data_model import MessageV11, MpUserLoggingInRsp, MessageBodyV11, VinInfo, \\\n\t    MpAlarmSettingType\n\tfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\n", "from saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsWayPoint, \\\n\t    RvsWgs84Point, Timestamp4Short, RvsBasicStatus25857, OtaRvcStatus25857\n\tfrom saic_ismart_client.ota_v3_0.Message import MessageBodyV30, MessageV30, MessageCoderV30\n\tfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp, RvsChargingStatus\n\tfrom saic_ismart_client.saic_api import SaicApi, SaicApiException\n\tTOKEN = '99X9999X-90XX-99X9-99X9-9XX9XX0X9X9XXX9X'\n\tUID = '00000000000000000000000000000000000090000000099999'\n\tVIN = 'vin10000000000000'\n\tdef mock_login_response_hex(message_coder: MessageCoderV11) -> str:\n\t    app_data = MpUserLoggingInRsp()\n", "    app_data.user_name = 'user_name'\n\t    app_data.vin_list.append(create_vin_info(VIN))\n\t    app_data.vin_list.append(create_vin_info('vin20000000000000'))\n\t    app_data.vin_list.append(create_vin_info('vin30000000000000'))\n\t    header = Header()\n\t    header.protocol_version = 17\n\t    login_rsp_message = MessageV11(header, MessageBodyV11(), app_data)\n\t    message_coder.initialize_message(\n\t        UID,\n\t        TOKEN,\n", "        '501',\n\t        513,\n\t        1,\n\t        login_rsp_message)\n\t    return message_coder.encode_request(login_rsp_message)\n\tdef create_vin_info(vin: str) -> VinInfo:\n\t    vin_info = VinInfo()\n\t    vin_info.vin = vin\n\t    vin_info.series = 'series'\n\t    vin_info.brand_name = b'brandName'\n", "    vin_info.model_name = b'modelName'\n\t    vin_info.active = True\n\t    vin_info.model_configuration_json_str = 'name:Tire pressure monitoring system,code:J17,value:1;' \\\n\t                                            + 'name:Regular airbags,code:Q00,value:1;' \\\n\t                                            + 'name:Front-seat airbags,code:Q01,value:1;' \\\n\t                                            + 'name:Airbag switch,code:Q09,value:1;' \\\n\t                                            + 'name:Sun Roof,code:S35,value:0;' \\\n\t                                            + 'name:Remote control,code:S61,value:1;' \\\n\t                                            + 'name:Air conditioning,code:T11,value:1;' \\\n\t                                            + 'name:Electric Power Steering,code:EPS,value:1;' \\\n", "                                            + 'name:Security alert,code:SA64,value:0111110000000000001000000100101000000010100000000000000000000110;' \\\n\t                                            + 'name:Bonnut Status,code:BONNUT,value:1;' \\\n\t                                            + 'name:Door Status,code:DOOR,value:1111;' \\\n\t                                            + 'name:Boot Status,code:BOOT,value:1;' \\\n\t                                            + 'name:Engine Status,code:ENGINE,value:1;' \\\n\t                                            + 'name:Electric Vehicle,code:EV,value:0;' \\\n\t                                            + 'name:HeatedSeat,code:HeatedSeat,value:0;' \\\n\t                                            + 'name:Key Position,code:KEYPOS,value:1;' \\\n\t                                            + 'name:Energy state,code:ENERGY,value:0;' \\\n\t                                            + 'name:Battery Voltage,code:BATTERY,value:1;' \\\n", "                                            + 'name:Interior Temperature,code:INTEMP,value:1;' \\\n\t                                            + 'name:Exterior Temperature,code:EXTEMP,value:1;' \\\n\t                                            + 'name:Window Status,code:WINDOW,value:0000;' \\\n\t                                            + 'name:Left-Right Driving,code:LRD,value:0;' \\\n\t                                            + 'name:Bluetooth Key,code:BTKEY,value:0;' \\\n\t                                            + 'name:Battery Type,code:BType,value:2'\n\t    return vin_info\n\tdef mock_alarm_switch_response_hex(message_coder: MessageCoderV11) -> str:\n\t    header = Header()\n\t    header.protocol_version = 17\n", "    alarm_switch_rsp_message = MessageV11(header, MessageBodyV11())\n\t    message_coder.initialize_message(\n\t        UID,\n\t        TOKEN,\n\t        '521',\n\t        513,\n\t        1,\n\t        alarm_switch_rsp_message)\n\t    return message_coder.encode_request(alarm_switch_rsp_message)\n\tdef mock_vehicle_status_response(message_v2_1_coder: MessageCoderV21, uid: str, token: str, vin_info: VinInfo) -> str:\n", "    vehicle_status_response = OtaRvmVehicleStatusResp25857()\n\t    vehicle_status_response.status_time = 1000000000\n\t    vehicle_status_response.gps_position = RvsPosition()\n\t    vehicle_status_response.gps_position.way_point = RvsWayPoint()\n\t    vehicle_status_response.gps_position.way_point.position = RvsWgs84Point()\n\t    vehicle_status_response.gps_position.way_point.position.latitude = 10000000\n\t    vehicle_status_response.gps_position.way_point.position.longitude = 10000000\n\t    vehicle_status_response.gps_position.way_point.position.altitude = 100\n\t    vehicle_status_response.gps_position.way_point.heading = 90\n\t    vehicle_status_response.gps_position.way_point.speed = 100\n", "    vehicle_status_response.gps_position.way_point.hdop = 10\n\t    vehicle_status_response.gps_position.way_point.satellites = 3\n\t    vehicle_status_response.gps_position.timestamp_4_short = Timestamp4Short()\n\t    vehicle_status_response.gps_position.timestamp_4_short.seconds = 1000000000\n\t    vehicle_status_response.gps_position.gps_status = 'fix3D'\n\t    vehicle_status_response.basic_vehicle_status = RvsBasicStatus25857()\n\t    vehicle_status_response.basic_vehicle_status.driver_door = False\n\t    vehicle_status_response.basic_vehicle_status.passenger_door = False\n\t    vehicle_status_response.basic_vehicle_status.rear_left_door = False\n\t    vehicle_status_response.basic_vehicle_status.rear_right_door = False\n", "    vehicle_status_response.basic_vehicle_status.boot_status = True\n\t    vehicle_status_response.basic_vehicle_status.bonnet_status = False\n\t    vehicle_status_response.basic_vehicle_status.lock_status = True\n\t    vehicle_status_response.basic_vehicle_status.side_light_status = False\n\t    vehicle_status_response.basic_vehicle_status.dipped_beam_status = False\n\t    vehicle_status_response.basic_vehicle_status.main_beam_status = False\n\t    vehicle_status_response.basic_vehicle_status.power_mode = 1\n\t    vehicle_status_response.basic_vehicle_status.last_key_seen = 32000\n\t    vehicle_status_response.basic_vehicle_status.current_journey_distance = 7\n\t    vehicle_status_response.basic_vehicle_status.current_journey_id = 42\n", "    vehicle_status_response.basic_vehicle_status.interior_temperature = 22\n\t    vehicle_status_response.basic_vehicle_status.exterior_temperature = 10\n\t    vehicle_status_response.basic_vehicle_status.fuel_level_prc = 125\n\t    vehicle_status_response.basic_vehicle_status.fuel_range = 32000\n\t    vehicle_status_response.basic_vehicle_status.remote_climate_status = 7\n\t    vehicle_status_response.basic_vehicle_status.can_bus_active = False\n\t    vehicle_status_response.basic_vehicle_status.time_of_last_canbus_activity = 1000000000\n\t    vehicle_status_response.basic_vehicle_status.clstr_dspd_fuel_lvl_sgmt = 125\n\t    vehicle_status_response.basic_vehicle_status.mileage = 1000\n\t    vehicle_status_response.basic_vehicle_status.battery_voltage = 32000\n", "    vehicle_status_response.basic_vehicle_status.hand_brake = True\n\t    vehicle_status_response.basic_vehicle_status.veh_elec_rng_dsp = 125\n\t    vehicle_status_response.basic_vehicle_status.rmt_htd_rr_wnd_st = 125\n\t    vehicle_status_response.basic_vehicle_status.engine_status = 0\n\t    vehicle_status_response.basic_vehicle_status.extended_data2 = 0  # is charging\n\t    vehicle_status_response.basic_vehicle_status.fuel_range_elec = 32000\n\t    message = MessageV2(MessageBodyV2(), vehicle_status_response)\n\t    message_v2_1_coder.initialize_message(\n\t        uid,\n\t        token,\n", "        vin_info.vin,\n\t        \"511\",\n\t        25857,\n\t        1,\n\t        message)\n\t    return message_v2_1_coder.encode_request(message)\n\tdef mock_chrg_mgmt_data_rsp(message_v3_0_coder: MessageCoderV30, uid: str, token: str, vin_info: VinInfo) -> str:\n\t    chrg_mgmt_data_rsp = OtaChrgMangDataResp()\n\t    chrg_mgmt_data_rsp.bmsAdpPubChrgSttnDspCmd = 0\n\t    chrg_mgmt_data_rsp.bmsAltngChrgCrntDspCmd = 0\n", "    chrg_mgmt_data_rsp.bmsChrgCtrlDspCmd = 2\n\t    chrg_mgmt_data_rsp.bmsChrgOtptCrntReq = 1023\n\t    chrg_mgmt_data_rsp.bmsChrgSpRsn = 0\n\t    chrg_mgmt_data_rsp.bmsChrgSts = 0\n\t    chrg_mgmt_data_rsp.bms_estd_elec_rng = 290\n\t    chrg_mgmt_data_rsp.bmsOnBdChrgTrgtSOCDspCmd = 7\n\t    chrg_mgmt_data_rsp.bmsPackCrnt = 20000\n\t    chrg_mgmt_data_rsp.bmsPackSOCDsp = 841\n\t    chrg_mgmt_data_rsp.bmsPackVol = 1602\n\t    chrg_mgmt_data_rsp.bmsPTCHeatReqDspCmd = 0\n", "    chrg_mgmt_data_rsp.bmsPTCHeatSpRsn = 0\n\t    chrg_mgmt_data_rsp.bmsReserCtrlDspCmd = 0\n\t    chrg_mgmt_data_rsp.bmsReserSpHourDspCmd = 0\n\t    chrg_mgmt_data_rsp.bmsReserStHourDspCmd = 0\n\t    chrg_mgmt_data_rsp.bmsReserStMintueDspCmd = 0\n\t    chrg_mgmt_data_rsp.bmsReserSpMintueDspCmd = 0\n\t    chrg_mgmt_data_rsp.chrgngRmnngTime = 1023\n\t    chrg_mgmt_data_rsp.chrgngRmnngTimeV = 1\n\t    chrg_mgmt_data_rsp.clstrElecRngToEPT = 243\n\t    chrg_mgmt_data_rsp.chargeStatus = RvsChargingStatus()\n", "    chrg_mgmt_data_rsp.chargeStatus.charging_duration = 0\n\t    chrg_mgmt_data_rsp.chargeStatus.charging_gun_state = False\n\t    chrg_mgmt_data_rsp.chargeStatus.fuel_Range_elec = 2430\n\t    chrg_mgmt_data_rsp.chargeStatus.charging_type = 0\n\t    chrg_mgmt_data_rsp.chargeStatus.mileage = 19320\n\t    chrg_mgmt_data_rsp.chargeStatus.end_time = 1664974510\n\t    chrg_mgmt_data_rsp.chargeStatus.last_charge_ending_power = 631\n\t    chrg_mgmt_data_rsp.chargeStatus.mileage_of_day = 0\n\t    chrg_mgmt_data_rsp.chargeStatus.mileage_since_last_charge = 120\n\t    chrg_mgmt_data_rsp.chargeStatus.power_usage_of_day = 0\n", "    chrg_mgmt_data_rsp.chargeStatus.power_usage_since_last_charge = 21\n\t    chrg_mgmt_data_rsp.chargeStatus.real_time_power = 610\n\t    chrg_mgmt_data_rsp.chargeStatus.start_time = 1664962716\n\t    chrg_mgmt_data_rsp.chargeStatus.total_battery_capacity = 725\n\t    chrg_mgmt_data_rsp.chargeStatus.working_current = 20000\n\t    chrg_mgmt_data_rsp.chargeStatus.working_voltage = 1602\n\t    chrg_mgmt_data_rsp_msg = MessageV30(MessageBodyV30(), chrg_mgmt_data_rsp)\n\t    message_v3_0_coder.initialize_message(uid, token, vin_info.vin, '516', 768, 5, chrg_mgmt_data_rsp_msg)\n\t    return message_v3_0_coder.encode_request(chrg_mgmt_data_rsp_msg)\n\tdef mock_start_ac_rsp_msg(message_coder_v2_1: MessageCoderV21, uid: str, token: str, vin_info: VinInfo):\n", "    start_ac_rsp = OtaRvcStatus25857()\n\t    start_ac_rsp.rvcReqType = b'\\x06'\n\t    start_ac_rsp.rvcReqSts = b'\\x01'\n\t    start_ac_rsp.failureType = 0\n\t    start_ac_rsp.gpsPosition = RvsPosition()\n\t    start_ac_rsp.gpsPosition.way_point = RvsWayPoint()\n\t    start_ac_rsp.gpsPosition.way_point.position = RvsWgs84Point()\n\t    start_ac_rsp.gpsPosition.way_point.position.latitude = 10000000\n\t    start_ac_rsp.gpsPosition.way_point.position.longitude = 10000000\n\t    start_ac_rsp.gpsPosition.way_point.position.altitude = 100\n", "    start_ac_rsp.gpsPosition.way_point.heading = 90\n\t    start_ac_rsp.gpsPosition.way_point.speed = 100\n\t    start_ac_rsp.gpsPosition.way_point.hdop = 10\n\t    start_ac_rsp.gpsPosition.way_point.satellites = 3\n\t    start_ac_rsp.gpsPosition.timestamp_4_short = Timestamp4Short()\n\t    start_ac_rsp.gpsPosition.timestamp_4_short.seconds = 1000000000\n\t    start_ac_rsp.gpsPosition.gps_status = 'fix3D'\n\t    start_ac_rsp.basicVehicleStatus = RvsBasicStatus25857()\n\t    start_ac_rsp.basicVehicleStatus.driver_door = False\n\t    start_ac_rsp.basicVehicleStatus.passenger_door = False\n", "    start_ac_rsp.basicVehicleStatus.rear_left_door = False\n\t    start_ac_rsp.basicVehicleStatus.rear_right_door = False\n\t    start_ac_rsp.basicVehicleStatus.boot_status = True\n\t    start_ac_rsp.basicVehicleStatus.bonnet_status = False\n\t    start_ac_rsp.basicVehicleStatus.lock_status = True\n\t    start_ac_rsp.basicVehicleStatus.side_light_status = False\n\t    start_ac_rsp.basicVehicleStatus.dipped_beam_status = False\n\t    start_ac_rsp.basicVehicleStatus.main_beam_status = False\n\t    start_ac_rsp.basicVehicleStatus.power_mode = 1\n\t    start_ac_rsp.basicVehicleStatus.last_key_seen = 32000\n", "    start_ac_rsp.basicVehicleStatus.current_journey_distance = 7\n\t    start_ac_rsp.basicVehicleStatus.current_journey_id = 42\n\t    start_ac_rsp.basicVehicleStatus.interior_temperature = 22\n\t    start_ac_rsp.basicVehicleStatus.exterior_temperature = 10\n\t    start_ac_rsp.basicVehicleStatus.fuel_level_prc = 125\n\t    start_ac_rsp.basicVehicleStatus.fuel_range = 32000\n\t    start_ac_rsp.basicVehicleStatus.remote_climate_status = 7\n\t    start_ac_rsp.basicVehicleStatus.can_bus_active = False\n\t    start_ac_rsp.basicVehicleStatus.time_of_last_canbus_activity = 1000000000\n\t    start_ac_rsp.basicVehicleStatus.clstr_dspd_fuel_lvl_sgmt = 125\n", "    start_ac_rsp.basicVehicleStatus.mileage = 1000\n\t    start_ac_rsp.basicVehicleStatus.battery_voltage = 32000\n\t    start_ac_rsp.basicVehicleStatus.hand_brake = True\n\t    start_ac_rsp.basicVehicleStatus.veh_elec_rng_dsp = 125\n\t    start_ac_rsp.basicVehicleStatus.rmt_htd_rr_wnd_st = 125\n\t    start_ac_rsp.basicVehicleStatus.engine_status = 0\n\t    start_ac_rsp.basicVehicleStatus.extended_data2 = 0  # is charging\n\t    start_ac_rsp.basicVehicleStatus.fuel_range_elec = 32000\n\t    start_ac_rsp_msg = MessageV2(MessageBodyV2(), start_ac_rsp)\n\t    message_coder_v2_1.initialize_message(uid, token, vin_info.vin, '510', 25857, 1, start_ac_rsp_msg)\n", "    start_ac_rsp_msg.body.ack_required = False\n\t    return message_coder_v2_1.encode_request(start_ac_rsp_msg)\n\tdef mock_response(mocked_post, hex_value: str):\n\t    def res():\n\t        r = requests.Response()\n\t        r.status_code = 200\n\t        return r\n\t    mocked_post.return_value = res()\n\t    type(mocked_post.return_value).content = PropertyMock(return_value=hex_value.encode())\n\tclass TestSaicApi(TestCase):\n", "    def setUp(self) -> None:\n\t        self.saic_api = SaicApi('https://tap-eu.soimt.com', 'https://gateway-eu.soimt.com', 'user@home.de', 'secret')\n\t        self.message_coder_v1_1 = MessageCoderV11()\n\t        self.message_coder_v2_1 = MessageCoderV21()\n\t        self.message_coder_v3_0 = MessageCoderV30()\n\t    @patch.object(requests, 'post')\n\t    def test_login(self, mocked_post):\n\t        mock_response(mocked_post, mock_login_response_hex(self.message_coder_v1_1))\n\t        login_response_message = self.saic_api.login()\n\t        self.assertIsNotNone(login_response_message.application_data)\n", "        app_data = cast(MpUserLoggingInRsp, login_response_message.application_data)\n\t        self.assertEqual('user_name', app_data.user_name)\n\t    @patch.object(requests, 'post')\n\t    def test_set_alarm_switches(self, mocked_post):\n\t        mock_response(mocked_post, mock_alarm_switch_response_hex(self.message_coder_v1_1))\n\t        try:\n\t            alarm_switches = []\n\t            for alarm_setting_type in MpAlarmSettingType:\n\t                alarm_switches.append(saic_ismart_client.saic_api.create_alarm_switch(alarm_setting_type))\n\t            self.saic_api.set_alarm_switches(alarm_switches)\n", "        except SaicApiException:\n\t            self.fail()\n\t    @patch.object(requests, 'post')\n\t    def test_get_vehicle_status(self, mocked_post):\n\t        vin_info = create_vin_info(VIN)\n\t        mock_response(mocked_post, mock_vehicle_status_response(self.message_coder_v2_1, UID, TOKEN, vin_info))\n\t        vehicle_status_rsp_msg = self.saic_api.get_vehicle_status_with_retry(vin_info)\n\t        app_data = cast(OtaRvmVehicleStatusResp25857, vehicle_status_rsp_msg.application_data)\n\t        self.assertEqual(1000000000, app_data.status_time)\n\t    @patch.object(requests, 'post')\n", "    def test_get_charging_status(self, mocked_post):\n\t        vin_info = create_vin_info(VIN)\n\t        mock_response(mocked_post, mock_chrg_mgmt_data_rsp(self.message_coder_v3_0, UID, TOKEN, vin_info))\n\t        chrg_mgmt_data_rsp_msg = self.saic_api.get_charging_status_with_retry(vin_info)\n\t        app_data = cast(OtaChrgMangDataResp, chrg_mgmt_data_rsp_msg.application_data)\n\t        self.assertEqual(1023, app_data.bmsChrgOtptCrntReq)\n\t    @patch.object(requests, 'post')\n\t    def test_start_ac(self, mocked_post):\n\t        vin_info = create_vin_info(VIN)\n\t        mock_response(mocked_post, mock_start_ac_rsp_msg(self.message_coder_v2_1, UID, TOKEN, vin_info))\n", "        start_ac_rsp_msg = self.saic_api.start_ac(vin_info)\n\t        app_data = cast(OtaRvcStatus25857, start_ac_rsp_msg.application_data)\n\t        self.assertEqual(app_data.rvcReqType, b'\\x06')\n\t        self.assertEqual(start_ac_rsp_msg.body.ack_required, False)\n"]}
{"filename": "tests/test_Message_v3_0.py", "chunked_list": ["import calendar\n\timport time\n\tfrom typing import cast\n\tfrom unittest import TestCase\n\tfrom saic_ismart_client.common_model import DataEncodingType\n\tfrom saic_ismart_client.ota_v3_0.Message import MessageCoderV30, MessageBodyV30, MessageV30\n\tfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp, RvsChargingStatus\n\tclass TestMessageCoderV30(TestCase):\n\t    def setUp(self):\n\t        self.message_coder = MessageCoderV30()\n", "    def test_encode_chrg_mgmt_data(self):\n\t        expected_hex = '100CF30750000000000000000000000000000000000F0F983060C183060C183060C183060C18306'\\\n\t                       + '0C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB972E5CB95AC2C39B0B'\\\n\t                       + '5CB073616B972E5CAD72E6C5872E6C39B0E6C5872E5CB96AC5B58B162C3972C1CB9B16183972E5C'\\\n\t                       + 'B906C67BC48000009C3C011C03004000000800000000000000070122000203FF0103FF4E2006420'\\\n\t                       + '349000000F30000CFCE0026204BF00633D509CC67AFD5C9C400C8400F0002A00000000000000000'\\\n\t                       + '9DC0B5400025BC0000'\n\t        expected_message = MessageV30(MessageBodyV30(), OtaChrgMangDataResp())\n\t        self.message_coder.decode_response(expected_hex, expected_message)\n\t        reserved = bytes().fromhex('00000000000000000000000000000000')\n", "        body = MessageBodyV30()\n\t        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        body.application_data_length = 71\n\t        body.application_data_protocol_version = 768\n\t        body.application_id = '516'\n\t        body.event_creation_time = calendar.timegm(time.strptime('2022-10-05 20:00:00', '%Y-%m-%d %H:%M:%S'))\n\t        body.event_id = 9999\n\t        body.message_id = 6\n\t        body.result = 0\n\t        body.test_flag = 2\n", "        body.token = '9X999999-0X9X-909X-9999-99XX99X9X9XX9999'\n\t        body.uid = '00000000000000000000000000000000000090000000099999'\n\t        body.vin = 'XXXX99099XX099999'\n\t        chrg_mgmt_data_rsp = get_chrg_mgmt_data_rsp_test_data()\n\t        actual_message = MessageV30(body, chrg_mgmt_data_rsp, reserved)\n\t        actual_hex = self.message_coder.encode_request(actual_message)\n\t        self.validate_message(expected_message, actual_message)\n\t        self.assertEqual(expected_hex, actual_hex)\n\t    def validate_message(self, expected: MessageV30, actual: MessageV30) -> None:\n\t        self.assertEqual(expected.body.application_data_encoding, actual.body.application_data_encoding)\n", "        self.assertEqual(expected.body.application_data_length, actual.body.application_data_length)\n\t        self.assertEqual(expected.body.application_data_protocol_version, actual.body.application_data_protocol_version)\n\t        self.assertEqual(expected.body.application_id, actual.body.application_id)\n\t        self.assertEqual(expected.body.event_creation_time, actual.body.event_creation_time)\n\t        self.assertEqual(expected.body.event_id, actual.body.event_id)\n\t        self.assertEqual(expected.body.message_id, actual.body.message_id)\n\t        self.assertEqual(expected.body.test_flag, actual.body.test_flag)\n\t        self.assertEqual(expected.body.token, actual.body.token)\n\t        self.assertEqual(expected.body.uid, actual.body.uid)\n\t        self.assertEqual(expected.body.vin, actual.body.vin)\n", "        self.validate_chrg_mgmt_data(cast(OtaChrgMangDataResp, expected.application_data),\n\t                                     cast(OtaChrgMangDataResp, actual.application_data))\n\t    def validate_chrg_mgmt_data(self, expected: OtaChrgMangDataResp, actual: OtaChrgMangDataResp):\n\t        self.assertEqual(expected.bmsAdpPubChrgSttnDspCmd, actual.bmsAdpPubChrgSttnDspCmd)\n\t        self.assertEqual(expected.bmsAltngChrgCrntDspCmd, actual.bmsAltngChrgCrntDspCmd)\n\t        self.assertEqual(expected.bmsChrgCtrlDspCmd, actual.bmsChrgCtrlDspCmd)\n\t        self.assertEqual(expected.bmsChrgOtptCrntReq, actual.bmsChrgOtptCrntReq)\n\t        self.assertEqual(expected.bmsChrgSpRsn, actual.bmsChrgSpRsn)\n\t        self.assertEqual(expected.bmsChrgSts, actual.bmsChrgSts)\n\t        self.assertEqual(expected.bms_estd_elec_rng, actual.bms_estd_elec_rng)\n", "        self.assertEqual(expected.bmsOnBdChrgTrgtSOCDspCmd, actual.bmsOnBdChrgTrgtSOCDspCmd)\n\t        self.assertEqual(expected.bmsPackCrnt, actual.bmsPackCrnt)\n\t        self.assertEqual(expected.bmsPackSOCDsp, actual.bmsPackSOCDsp)\n\t        self.assertEqual(expected.bmsPackVol, actual.bmsPackVol)\n\t        self.assertEqual(expected.bmsPTCHeatReqDspCmd, actual.bmsPTCHeatReqDspCmd)\n\t        self.assertEqual(expected.bmsPTCHeatSpRsn, actual.bmsPTCHeatSpRsn)\n\t        self.assertEqual(expected.bmsReserCtrlDspCmd, actual.bmsReserCtrlDspCmd)\n\t        self.assertEqual(expected.bmsReserSpHourDspCmd, actual.bmsReserSpHourDspCmd)\n\t        self.assertEqual(expected.bmsReserStHourDspCmd, actual.bmsReserStHourDspCmd)\n\t        self.assertEqual(expected.bmsReserStMintueDspCmd, actual.bmsReserStMintueDspCmd)\n", "        self.assertEqual(expected.bmsReserSpMintueDspCmd, actual.bmsReserSpMintueDspCmd)\n\t        self.assertEqual(expected.chrgngRmnngTime, actual.chrgngRmnngTime)\n\t        self.assertEqual(expected.chrgngRmnngTimeV, actual.chrgngRmnngTimeV)\n\t        self.assertEqual(expected.clstrElecRngToEPT, actual.clstrElecRngToEPT)\n\t        self.validate_chrg_status(expected.chargeStatus, actual.chargeStatus)\n\t    def validate_chrg_status(self, expected: RvsChargingStatus, actual: RvsChargingStatus):\n\t        self.assertEqual(expected.charging_duration, actual.charging_duration)\n\t        self.assertEqual(expected.charging_gun_state, actual.charging_gun_state)\n\t        self.assertEqual(expected.fuel_Range_elec, actual.fuel_Range_elec)\n\t        self.assertEqual(expected.charging_type, actual.charging_type)\n", "        self.assertEqual(expected.mileage, actual.mileage)\n\t        self.assertEqual(expected.end_time, actual.end_time)\n\t        self.assertEqual(expected.last_charge_ending_power, actual.last_charge_ending_power)\n\t        self.assertEqual(expected.mileage_of_day, actual.mileage_of_day)\n\t        self.assertEqual(expected.mileage_since_last_charge, actual.mileage_since_last_charge)\n\t        self.assertEqual(expected.power_usage_of_day, actual.power_usage_of_day)\n\t        self.assertEqual(expected.power_usage_since_last_charge, actual.power_usage_since_last_charge)\n\t        self.assertEqual(expected.real_time_power, actual.real_time_power)\n\t        self.assertEqual(expected.start_time, actual.start_time)\n\t        self.assertEqual(expected.total_battery_capacity, actual.total_battery_capacity)\n", "        self.assertEqual(expected.working_current, actual.working_current)\n\t        self.assertEqual(expected.working_voltage, actual.working_voltage)\n\tdef get_chrg_mgmt_data_rsp_test_data() -> OtaChrgMangDataResp:\n\t    chrg_mgmt_data = OtaChrgMangDataResp()\n\t    chrg_mgmt_data.bmsAdpPubChrgSttnDspCmd = 0\n\t    chrg_mgmt_data.bmsAltngChrgCrntDspCmd = 0\n\t    chrg_mgmt_data.bmsChrgCtrlDspCmd = 2\n\t    chrg_mgmt_data.bmsChrgOtptCrntReq = 1023\n\t    chrg_mgmt_data.bmsChrgSpRsn = 0\n\t    chrg_mgmt_data.bmsChrgSts = 0\n", "    chrg_mgmt_data.bms_estd_elec_rng = 290\n\t    chrg_mgmt_data.bmsOnBdChrgTrgtSOCDspCmd = 7\n\t    chrg_mgmt_data.bmsPackCrnt = 20000\n\t    chrg_mgmt_data.bmsPackSOCDsp = 841\n\t    chrg_mgmt_data.bmsPackVol = 1602\n\t    chrg_mgmt_data.bmsPTCHeatReqDspCmd = 0\n\t    chrg_mgmt_data.bmsPTCHeatSpRsn = 0\n\t    chrg_mgmt_data.bmsReserCtrlDspCmd = 0\n\t    chrg_mgmt_data.bmsReserSpHourDspCmd = 0\n\t    chrg_mgmt_data.bmsReserStHourDspCmd = 0\n", "    chrg_mgmt_data.bmsReserStMintueDspCmd = 0\n\t    chrg_mgmt_data.bmsReserSpMintueDspCmd = 0\n\t    chrg_mgmt_data.chrgngRmnngTime = 1023\n\t    chrg_mgmt_data.chrgngRmnngTimeV = 1\n\t    chrg_mgmt_data.clstrElecRngToEPT = 243\n\t    chrg_mgmt_data.chargeStatus = RvsChargingStatus()\n\t    chrg_mgmt_data.chargeStatus.charging_duration = 0\n\t    chrg_mgmt_data.chargeStatus.charging_gun_state = False\n\t    chrg_mgmt_data.chargeStatus.fuel_Range_elec = 2430\n\t    chrg_mgmt_data.chargeStatus.charging_type = 0\n", "    chrg_mgmt_data.chargeStatus.mileage = 19320\n\t    chrg_mgmt_data.chargeStatus.end_time = 1664974510\n\t    chrg_mgmt_data.chargeStatus.last_charge_ending_power = 631\n\t    chrg_mgmt_data.chargeStatus.mileage_of_day = 0\n\t    chrg_mgmt_data.chargeStatus.mileage_since_last_charge = 120\n\t    chrg_mgmt_data.chargeStatus.power_usage_of_day = 0\n\t    chrg_mgmt_data.chargeStatus.power_usage_since_last_charge = 21\n\t    chrg_mgmt_data.chargeStatus.real_time_power = 610\n\t    chrg_mgmt_data.chargeStatus.start_time = 1664962716\n\t    chrg_mgmt_data.chargeStatus.total_battery_capacity = 725\n", "    chrg_mgmt_data.chargeStatus.working_current = 20000\n\t    chrg_mgmt_data.chargeStatus.working_voltage = 1602\n\t    return chrg_mgmt_data\n"]}
{"filename": "tests/test_Message_v2_1.py", "chunked_list": ["import calendar\n\timport time\n\tfrom typing import cast\n\tfrom unittest import TestCase\n\tfrom saic_ismart_client.common_model import DataEncodingType, MessageBodyV2, MessageV2\n\tfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\n\tfrom saic_ismart_client.ota_v2_1.data_model import OtaRvcReq, RvcReqParam\n\tclass TestMessageCoderV21(TestCase):\n\t    def setUp(self) -> None:\n\t        self.message_coder = MessageCoderV21()\n", "    def test_encode_ota_rvc_request(self):\n\t        expected_hex = '1009E21790000000000000000000000000000000000FFF183060C183060C183060C183060C183060'\\\n\t                       + 'C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB9B0E5CD85B62C39B0B5C'\\\n\t                       + 'B9B1616B9B16182D72E5CD8B161CB97362C5872C1CB96AC5858B162C3972C1CB9B16183972E5CB90'\\\n\t                       + '1C6F2C94000009C3C00000000000000243280A0801800080008001000080018000807F80000'\n\t        expected_message = MessageV2(MessageBodyV2(), OtaRvcReq())\n\t        self.message_coder.decode_response(expected_hex, expected_message)\n\t        reserved = bytes().fromhex('00000000000000000000000000000000')\n\t        body = MessageBodyV2()\n\t        body.ack_message_counter = 0\n", "        body.ack_required = False\n\t        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        body.application_data_length = 18\n\t        body.application_data_protocol_version = 25857\n\t        body.application_id = '510'\n\t        body.dl_message_counter = 0\n\t        body.event_creation_time = calendar.timegm(time.strptime('2022-11-19 23:20:00', '%Y-%m-%d %H:%M:%S'))\n\t        body.event_id = 9999\n\t        body.message_id = 1\n\t        body.test_flag = 2\n", "        body.token = '9X99X99X-XX9X-99XX-9XX0-999XXX999XXX9099'\n\t        body.uid = '00000000000000000000000000000000000090000000099999'\n\t        body.ul_message_counter = 0\n\t        body.vin = 'XXXX99099XX099999'\n\t        ota_rvc_req = get_ota_rvc_req_test_data()\n\t        actual_message = MessageV2(body, ota_rvc_req, reserved)\n\t        actual_hex = self.message_coder.encode_request(actual_message)\n\t        self.validate_message_body(cast(MessageBodyV2, expected_message.body),\n\t                                   cast(MessageBodyV2, actual_message.body))\n\t        self.assertEqual(expected_hex, actual_hex)\n", "    def validate_message_body(self, expected: MessageBodyV2, actual: MessageBodyV2) -> None:\n\t        self.assertEqual(expected.message_id, actual.message_id)\n\t        self.assertEqual(expected.ul_message_counter, actual.ul_message_counter)\n\t        self.assertEqual(expected.dl_message_counter, actual.dl_message_counter)\n\t        self.assertEqual(expected.ack_message_counter, actual.ack_message_counter)\n\t        self.assertEqual(expected.event_creation_time, actual.event_creation_time)\n\t        self.assertEqual(expected.application_id, actual.application_id)\n\t        self.assertEqual(expected.application_data_protocol_version, actual.application_data_protocol_version)\n\t        self.assertEqual(expected.test_flag, actual.test_flag)\n\t        self.assertEqual(expected.uid, actual.uid)\n", "        self.assertEqual(expected.token, actual.token)\n\t        self.assertEqual(expected.event_id, actual.event_id)\n\t        self.assertEqual(expected.application_data_encoding, actual.application_data_encoding)\n\t        self.assertEqual(expected.application_data_length, actual.application_data_length)\n\t        self.assertEqual(expected.vin, actual.vin)\n\t        self.assertEqual(expected.ack_required, actual.ack_required)\n\t        self.assertEqual(expected.result, actual.result)\n\t        self.assertEqual(expected.error_message, actual.error_message)\n\tdef get_ota_rvc_req_test_data() -> OtaRvcReq:\n\t    ota_rvc_req = OtaRvcReq()\n", "    ota_rvc_req.rvc_req_type = b'\\x00'\n\t    param1 = RvcReqParam()\n\t    param1.param_id = 1\n\t    param1.param_value = b'\\x01'\n\t    ota_rvc_req.rvc_params.append(param1)\n\t    param2 = RvcReqParam()\n\t    param2.param_id = 2\n\t    param2.param_value = b'\\x01'\n\t    ota_rvc_req.rvc_params.append(param2)\n\t    param3 = RvcReqParam()\n", "    param3.param_id = 3\n\t    param3.param_value = b'\\x01'\n\t    ota_rvc_req.rvc_params.append(param3)\n\t    param4 = RvcReqParam()\n\t    param4.param_id = 255\n\t    param4.param_value = b'\\x00'\n\t    ota_rvc_req.rvc_params.append(param4)\n\t    return ota_rvc_req\n"]}
{"filename": "src/saic_ismart_client/saic_api.py", "chunked_list": ["import datetime\n\timport functools\n\timport hashlib\n\timport logging\n\timport os\n\timport time\n\timport urllib.parse\n\tfrom typing import cast\n\timport requests as requests\n\tfrom saic_ismart_client.common_model import AbstractMessage, AbstractMessageBody, Header, MessageBodyV2, MessageV2, \\\n", "    ScheduledChargingMode, TargetBatteryCode, ChargeCurrentLimitCode\n\tfrom saic_ismart_client.exceptions import SaicApiException\n\tfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\n\tfrom saic_ismart_client.ota_v1_1.data_model import AbortSendMessageReq, AlarmSwitch, AlarmSwitchReq, Message, \\\n\t    MessageBodyV11, MessageListReq, MessageListResp, MessageV11, MpAlarmSettingType, MpUserLoggingInReq, \\\n\t    MpUserLoggingInRsp, StartEndNumber, Timestamp, VinInfo\n\tfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\n\tfrom saic_ismart_client.ota_v2_1.data_model import OtaRvcReq, OtaRvcStatus25857, OtaRvmVehicleStatusReq, \\\n\t    OtaRvmVehicleStatusResp25857, RvcReqParam\n\tfrom saic_ismart_client.ota_v3_0.Message import MessageBodyV30, MessageCoderV30, MessageV30\n", "from saic_ismart_client.ota_v3_0.data_model import OtaChrgCtrlReq, OtaChrgCtrlStsResp, OtaChrgHeatReq, \\\n\t    OtaChrgHeatResp, OtaChrgMangDataResp, OtaChrgRsvanReq, OtaChrgSetngReq, OtaChrgSetngResp, OtaChrgRsvanResp\n\tfrom saic_ismart_client.rest_v2.api import SaicRestV2Api\n\tfrom saic_ismart_client.rest_v2.model import TimeZoneEntity\n\tUID_INIT = '0000000000000000000000000000000000000000000000000#'\n\tAVG_SMS_DELIVERY_TIME = 15\n\tlogging.basicConfig(format='%(asctime)s %(message)s')\n\tLOG = logging.getLogger(__name__)\n\tLOG.setLevel(level=os.getenv('LOG_LEVEL', 'INFO').upper())\n\tclass SaicMessage:\n", "    def __init__(self, message_id: int, message_type: str, title: str, message_time: datetime, sender: str,\n\t                 content: str, read_status: int, vin: str):\n\t        self.message_id = message_id\n\t        self.message_type = message_type\n\t        self.title = title\n\t        self.message_time = message_time\n\t        self.sender = sender\n\t        self.content = content\n\t        self.read_status = read_status\n\t        self.vin = vin\n", "    def get_read_status_str(self) -> str:\n\t        if self.read_status is None:\n\t            return 'unknown'\n\t        elif self.read_status == 0:\n\t            return 'unread'\n\t        else:\n\t            return 'read'\n\t    def get_details(self) -> str:\n\t        return f'ID: {self.message_id}, Time: {self.message_time}, Type: {self.message_type}, Title: {self.title}, ' \\\n\t            + f'Content: {self.content}, Status: {self.get_read_status_str()}, Sender: {self.sender}, VIN: {self.vin}'\n", "def convert(message: Message) -> SaicMessage:\n\t    if message.content is not None:\n\t        content = message.content.decode()\n\t    else:\n\t        content = None\n\t    return SaicMessage(message.message_id, message.message_type, message.title.decode(),\n\t                       message.message_time.get_timestamp(), message.sender.decode(), content, message.read_status,\n\t                       message.vin)\n\tclass SaicApi:\n\t    def __init__(\n", "            self,\n\t            saic_uri: str,\n\t            saic_rest_uri: str,\n\t            saic_user: str,\n\t            saic_password: str,\n\t            relogin_delay: int = None\n\t    ):\n\t        self.saic_uri = saic_uri\n\t        self.saic_user = saic_user\n\t        self.saic_password = saic_password\n", "        if relogin_delay is None:\n\t            self.relogin_delay = 0\n\t        else:\n\t            self.relogin_delay = relogin_delay\n\t        self.message_v1_1_coder = MessageCoderV11()\n\t        self.message_V2_1_coder = MessageCoderV21()\n\t        self.message_V3_0_coder = MessageCoderV30()\n\t        self.rest_v2_api = SaicRestV2Api(saic_rest_uri)\n\t        self.cookies = None\n\t        self.uid = ''\n", "        self.token = ''\n\t        self.token_expiration = None\n\t        self.on_publish_raw_value = None\n\t        self.on_publish_json_value = None\n\t    def login(self) -> MessageV11:\n\t        application_data = MpUserLoggingInReq()\n\t        application_data.password = self.saic_password\n\t        header = Header()\n\t        header.protocol_version = 17\n\t        login_request_message = MessageV11(header, MessageBodyV11(), application_data)\n", "        application_id = '501'\n\t        application_data_protocol_version = 513\n\t        self.message_v1_1_coder.initialize_message(\n\t            UID_INIT[len(self.saic_user):] + self.saic_user,\n\t            cast(str, None),\n\t            application_id,\n\t            application_data_protocol_version,\n\t            1,\n\t            login_request_message)\n\t        self.publish_json_request(application_id, application_data_protocol_version, login_request_message.get_data())\n", "        login_request_hex = self.message_v1_1_coder.encode_request(login_request_message)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, login_request_hex)\n\t        login_response_hex = self.send_request(login_request_hex,\n\t                                               urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, login_response_hex)\n\t        logging_in_rsp = MpUserLoggingInRsp()\n\t        login_response_message = MessageV11(header, MessageBodyV11(), logging_in_rsp)\n\t        self.message_v1_1_coder.decode_response(login_response_hex, login_response_message)\n\t        self.publish_json_response(application_id, application_data_protocol_version, login_response_message.get_data())\n\t        if login_response_message.body.error_message is not None:\n", "            raise SaicApiException(login_response_message.body.error_message.decode(),\n\t                                   login_response_message.body.result)\n\t        else:\n\t            self.uid = login_response_message.body.uid\n\t            self.token = logging_in_rsp.token\n\t            if logging_in_rsp.token_expiration is not None:\n\t                self.token_expiration = logging_in_rsp.token_expiration\n\t        return login_response_message\n\t    def set_geofence_alarm_switch(self) -> None:\n\t        return self.set_alarm_switches(\n", "            [create_alarm_switch(MpAlarmSettingType.REGION)],\n\t            pin='22222222222222222222222222222222'\n\t        )\n\t    def set_alarm_switches(self, alarm_switches: list, pin: str = None) -> None:\n\t        alarm_switch_req = AlarmSwitchReq()\n\t        alarm_switch_req.alarm_switch_list = alarm_switches\n\t        alarm_switch_req.pin = hash_md5('123456') if pin is None else pin\n\t        header = Header()\n\t        header.protocol_version = 17\n\t        alarm_switch_req_message = MessageV11(header, MessageBodyV11(), alarm_switch_req)\n", "        application_id = '521'\n\t        application_data_protocol_version = 513\n\t        self.message_v1_1_coder.initialize_message(\n\t            self.uid,\n\t            self.get_token(),\n\t            application_id,\n\t            application_data_protocol_version,\n\t            1,\n\t            alarm_switch_req_message)\n\t        self.publish_json_request(application_id, application_data_protocol_version,\n", "                                  alarm_switch_req_message.get_data())\n\t        alarm_switch_request_hex = self.message_v1_1_coder.encode_request(alarm_switch_req_message)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, alarm_switch_request_hex)\n\t        alarm_switch_response_hex = self.send_request(alarm_switch_request_hex,\n\t                                                      urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, alarm_switch_response_hex)\n\t        alarm_switch_response_message = MessageV11(header, MessageBodyV11())\n\t        self.message_v1_1_coder.decode_response(alarm_switch_response_hex, alarm_switch_response_message)\n\t        self.publish_json_response(application_id, application_data_protocol_version,\n\t                                   alarm_switch_response_message.get_data())\n", "        if alarm_switch_response_message.body.error_message is not None:\n\t            raise SaicApiException(alarm_switch_response_message.body.error_message.decode(),\n\t                                   alarm_switch_response_message.body.result)\n\t    def get_vehicle_status(self, vin_info: VinInfo, event_id: str = None) -> MessageV2:\n\t        vehicle_status_req = OtaRvmVehicleStatusReq()\n\t        vehicle_status_req.veh_status_req_type = 2\n\t        vehicle_status_req_msg = MessageV2(MessageBodyV2(), vehicle_status_req)\n\t        application_id = '511'\n\t        application_data_protocol_version = 25857\n\t        self.message_V2_1_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n", "                                                   application_data_protocol_version, 1, vehicle_status_req_msg)\n\t        vehicle_status_req_msg.body.ack_required = False\n\t        if event_id is not None:\n\t            vehicle_status_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, vehicle_status_req_msg.get_data())\n\t        vehicle_status_req_hex = self.message_V2_1_coder.encode_request(vehicle_status_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, vehicle_status_req_hex)\n\t        vehicle_status_rsp_hex = self.send_request(vehicle_status_req_hex,\n\t                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv21'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, vehicle_status_rsp_hex)\n", "        vehicle_status_rsp_msg = MessageV2(MessageBodyV2(), OtaRvmVehicleStatusResp25857())\n\t        self.message_V2_1_coder.decode_response(vehicle_status_rsp_hex, vehicle_status_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, vehicle_status_rsp_msg.get_data())\n\t        return vehicle_status_rsp_msg\n\t    def get_vehicle_status_with_retry(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.handle_retry(self.get_vehicle_status, vin_info)\n\t    def unknown_engine_control(self, vin_info: VinInfo) -> MessageV2:\n\t        rvc_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 16\n", "        param1.param_value = b'\\x01'\n\t        rvc_params.append(param1)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x11', rvc_params, True)\n\t    def lock_vehicle(self, vin_info: VinInfo) -> MessageV2:\n\t        rvc_params = []\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x01', rvc_params, False)\n\t    def unlock_vehicle(self, vin_info: VinInfo) -> MessageV2:\n\t        rvc_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 4\n", "        param1.param_value = b'\\x00'\n\t        rvc_params.append(param1)\n\t        param2 = RvcReqParam()\n\t        param2.param_id = 5\n\t        param2.param_value = b'\\x00'\n\t        rvc_params.append(param2)\n\t        param3 = RvcReqParam()\n\t        param3.param_id = 6\n\t        param3.param_value = b'\\x00'\n\t        rvc_params.append(param3)\n", "        param4 = RvcReqParam()\n\t        param4.param_id = 7\n\t        param4.param_value = b'\\x03'\n\t        rvc_params.append(param4)\n\t        param5 = RvcReqParam()\n\t        param5.param_id = 255\n\t        param5.param_value = b'\\x00'\n\t        rvc_params.append(param5)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x02', rvc_params, False)\n\t    def start_rear_window_heat(self, vin_info: VinInfo) -> MessageV2:\n", "        return self.__control_rear_window_heat(vin_info, True)\n\t    def stop_rear_window_heat(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.__control_rear_window_heat(vin_info, False)\n\t    def __control_rear_window_heat(self, vin_info: VinInfo, enable: bool) -> MessageV2:\n\t        rvc_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 23\n\t        param1.param_value = bool_to_bit(enable)\n\t        rvc_params.append(param1)\n\t        param2 = RvcReqParam()\n", "        param2.param_id = 255\n\t        param2.param_value = b'\\x00'\n\t        rvc_params.append(param2)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x20', rvc_params, False)\n\t    def control_heated_seats(self, vin_info: VinInfo, driver_side=True, passenger_side=True):\n\t        rcv_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 17\n\t        param1.param_value = bool_to_bit(driver_side)\n\t        rcv_params.append(param1)\n", "        param2 = RvcReqParam()\n\t        param2.param_id = 18\n\t        param2.param_value = bool_to_bit(passenger_side)\n\t        rcv_params.append(param2)\n\t        param3 = RvcReqParam()\n\t        param3.param_id = 255\n\t        param3.param_value = b'\\x00'\n\t        rcv_params.append(param3)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x05', rcv_params, True)\n\t    def start_ac(self, vin_info: VinInfo, temperature_idx=8) -> MessageV2:\n", "        return self.control_climate(vin_info, fan_speed=2, ac_on=None, temperature_idx=temperature_idx)\n\t    def stop_ac(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.control_climate(vin_info, fan_speed=0, ac_on=False, temperature_idx=0)\n\t    def start_ac_blowing(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.control_climate(vin_info, fan_speed=1, ac_on=False, temperature_idx=0)\n\t    def start_front_defrost(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.control_climate(vin_info, fan_speed=5, ac_on=True, temperature_idx=8)\n\t    def stop_front_defrost(self, vin_info: VinInfo) -> MessageV2:\n\t        rcv_params = []\n\t        param1 = RvcReqParam()\n", "        param1.param_id = 19\n\t        param1.param_value = b'\\x00'\n\t        rcv_params.append(param1)\n\t        param2 = RvcReqParam()\n\t        param2.param_id = 20\n\t        param2.param_value = b'\\x08'\n\t        rcv_params.append(param2)\n\t        param3 = RvcReqParam()\n\t        param3.param_id = 22\n\t        param3.param_value = b'\\x00'\n", "        rcv_params.append(param3)\n\t        param4 = RvcReqParam()\n\t        param4.param_id = 255\n\t        param4.param_value = b'\\x00'\n\t        rcv_params.append(param4)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x06', rcv_params, True)\n\t    def control_climate(\n\t            self,\n\t            vin_info: VinInfo,\n\t            fan_speed: int = 5,\n", "            ac_on: bool | None = True,\n\t            temperature_idx: int = 8\n\t    ) -> MessageV2:\n\t        if fan_speed < 0 or fan_speed > 5:\n\t            raise Exception('fan_speed must be between 0 and 5')\n\t        if temperature_idx < 0 or temperature_idx > 14:\n\t            raise Exception('temperature_idx must be between 0 and 14')\n\t        if fan_speed == 0:\n\t            ac_on = False\n\t            temperature_idx = 8\n", "        rcv_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 19\n\t        param1.param_value = fan_speed.to_bytes(1, 'big')\n\t        rcv_params.append(param1)\n\t        if fan_speed > 0 or temperature_idx == 0:\n\t            param2 = RvcReqParam()\n\t            param2.param_id = 20\n\t            param2.param_value = temperature_idx.to_bytes(1, 'big')\n\t            rcv_params.append(param2)\n", "        if ac_on is not None:\n\t            param3 = RvcReqParam()\n\t            param3.param_id = 22\n\t            param3.param_value = bool_to_bit(ac_on)\n\t            rcv_params.append(param3)\n\t        param4 = RvcReqParam()\n\t        param4.param_id = 255\n\t        param4.param_value = b'\\x00'\n\t        rcv_params.append(param4)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x06', rcv_params, True)\n", "    def close_driver_window(self, vin_info: VinInfo) -> MessageV2:\n\t        rcv_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 9\n\t        param1.param_value = b'\\x01'\n\t        rcv_params.append(param1)\n\t        for i in [10, 11, 12, 13, 255]:\n\t            param = RvcReqParam()\n\t            param.param_id = i\n\t            param.param_value = b'\\x00'\n", "            rcv_params.append(param)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x03', rcv_params, False)\n\t    def control_sunroof(self, should_open: bool, vin_info: VinInfo) -> MessageV2:\n\t        rcv_params = []\n\t        param1 = RvcReqParam()\n\t        param1.param_id = 8\n\t        param1.param_value = b'\\x01'\n\t        rcv_params.append(param1)\n\t        for i in [9, 10, 11, 12, 255]:\n\t            param = RvcReqParam()\n", "            param.param_id = i\n\t            param.param_value = b'\\x00'\n\t            rcv_params.append(param)\n\t        param = RvcReqParam()\n\t        param.param_id = 13\n\t        param.param_value = b'\\x03' if should_open else b'\\x00'\n\t        rcv_params.append(param)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x03', rcv_params, True)\n\t    def open_door_locks(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.__open_vehicle_lock(vin_info, 3)\n", "    def open_tailgate(self, vin_info: VinInfo) -> MessageV2:\n\t        return self.__open_vehicle_lock(vin_info, 2)\n\t    def __open_vehicle_lock(self, vin_info: VinInfo, lock_id: int) -> MessageV2:\n\t        rcv_params = []\n\t        for i in [4, 5, 6, 255]:\n\t            param = RvcReqParam()\n\t            param.param_id = i\n\t            param.param_value = b'\\x00'\n\t            rcv_params.append(param)\n\t        param1 = RvcReqParam()\n", "        param1.param_id = 7\n\t        param1.param_value = lock_id.to_bytes(1, 'big')\n\t        rcv_params.append(param1)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x02', rcv_params, False)\n\t    def find_my_car(self, vin_info: VinInfo, with_horn: bool = True, with_lights: bool = True) -> MessageV2:\n\t        rcv_params = []\n\t        param = RvcReqParam()\n\t        param.param_id = 1\n\t        param.param_value = b'\\x01'\n\t        rcv_params.append(param)\n", "        param = RvcReqParam()\n\t        param.param_id = 2\n\t        param.param_value = bool_to_bit(with_horn)\n\t        rcv_params.append(param)\n\t        param = RvcReqParam()\n\t        param.param_id = 3\n\t        param.param_value = bool_to_bit(with_lights)\n\t        rcv_params.append(param)\n\t        param = RvcReqParam()\n\t        param.param_id = 255\n", "        param.param_value = b'\\x00'\n\t        rcv_params.append(param)\n\t        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x00', rcv_params, True)\n\t    def send_vehicle_ctrl_cmd_with_retry(self, vin_info: VinInfo, rvc_req_type: bytes, rvc_params: list,\n\t                                         has_app_data: bool, max_retries=3) -> MessageV2:\n\t        return self.handle_retry(\n\t            functools.partial(self.__send_vehicle_control_command, rvc_req_type, rvc_params),\n\t            vin_info=vin_info,\n\t            has_app_data=has_app_data,\n\t            max_retries=max_retries\n", "        )\n\t    def get_message_list_with_retry(self) -> list:\n\t        message_list_rsp_msg = self.handle_retry(self.get_message_list)\n\t        result = []\n\t        if message_list_rsp_msg.application_data is not None:\n\t            message_list_rsp = cast(MessageListResp, message_list_rsp_msg.application_data)\n\t            for message in message_list_rsp.messages:\n\t                result.append(convert(message))\n\t        return result\n\t    def handle_retry(self, func, vin_info: VinInfo = None, has_app_data: bool = True, max_retries: int = 3):\n", "        if has_app_data:\n\t            return self.__handle_retry_with_app_data(func, vin_info=vin_info, max_retries=max_retries)\n\t        else:\n\t            return self.__handle_retry_without_app_data(func, vin_info=vin_info, max_retries=max_retries)\n\t    def __handle_retry_without_app_data(self, func, vin_info: VinInfo, max_retries: int):\n\t        if vin_info:\n\t            rsp = func(vin_info)\n\t        else:\n\t            rsp = func()\n\t        rsp_msg = cast(AbstractMessage, rsp)\n", "        retry = 1\n\t        while (\n\t                rsp_msg.body.error_message is not None\n\t                and retry <= max_retries\n\t        ):\n\t            self.handle_error(rsp_msg.body, retry)\n\t            if vin_info:\n\t                rsp_msg = func(vin_info, rsp_msg.body.event_id)\n\t            else:\n\t                rsp_msg = func(rsp_msg.body.event_id)\n", "            retry += 1\n\t        if rsp_msg.body.error_message is not None:\n\t            raise SaicApiException(rsp_msg.body.error_message.decode(),\n\t                                   rsp_msg.body.result)\n\t        return rsp_msg\n\t    def __handle_retry_with_app_data(self, func, vin_info: VinInfo, max_retries: int):\n\t        if vin_info:\n\t            rsp = func(vin_info)\n\t        else:\n\t            rsp = func()\n", "        rsp_msg = cast(AbstractMessage, rsp)\n\t        iteration = 1\n\t        while rsp_msg.application_data is None:\n\t            error_message = rsp_msg.body.error_message\n\t            if iteration > max_retries:\n\t                additional_info = '.'\n\t                if error_message is not None:\n\t                    additional_info = f', error message: {error_message.decode()}'\n\t                raise SaicApiException(f'API request failed after {iteration} retries{additional_info}')\n\t            elif error_message is not None:\n", "                self.handle_error(rsp_msg.body, iteration)\n\t            else:\n\t                LOG.debug('API request returned no application data and no error message.')\n\t                time.sleep(float(AVG_SMS_DELIVERY_TIME))\n\t            iteration += 1\n\t            if vin_info:\n\t                rsp_msg = func(vin_info, rsp_msg.body.event_id)\n\t            else:\n\t                rsp_msg = func(rsp_msg.body.event_id)\n\t        return rsp_msg\n", "    def __send_vehicle_control_command(self, rvc_req_type: bytes, rvc_params: list,\n\t                                       vin_info: VinInfo, event_id: str = None) -> MessageV2:\n\t        vehicle_control_req = OtaRvcReq()\n\t        vehicle_control_req.rvc_req_type = rvc_req_type\n\t        for p in rvc_params:\n\t            param = cast(RvcReqParam, p)\n\t            vehicle_control_req.rvc_params.append(param)\n\t        vehicle_control_cmd_req_msg = MessageV2(MessageBodyV2(), vehicle_control_req)\n\t        application_id = '510'\n\t        application_data_protocol_version = 25857\n", "        self.message_V2_1_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 1, vehicle_control_cmd_req_msg)\n\t        vehicle_control_cmd_req_msg.body.ack_required = False\n\t        if event_id is not None:\n\t            vehicle_control_cmd_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version,\n\t                                  vehicle_control_cmd_req_msg.get_data())\n\t        vehicle_control_cmd_req_msg_hex = self.message_V2_1_coder.encode_request(vehicle_control_cmd_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, vehicle_control_cmd_req_msg_hex)\n\t        vehicle_control_cmd_rsp_msg_hex = self.send_request(vehicle_control_cmd_req_msg_hex,\n", "                                                            urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv21'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, vehicle_control_cmd_rsp_msg_hex)\n\t        vehicle_control_cmd_rsp_msg = MessageV2(MessageBodyV2(), OtaRvcStatus25857())\n\t        self.message_V2_1_coder.decode_response(vehicle_control_cmd_rsp_msg_hex, vehicle_control_cmd_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version,\n\t                                   vehicle_control_cmd_rsp_msg.get_data())\n\t        return vehicle_control_cmd_rsp_msg\n\t    # CHARGING MANAGEMENT\n\t    def get_charging_status(self, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n\t        chrg_mgmt_data_req_msg = MessageV30(MessageBodyV30())\n", "        application_id = '516'\n\t        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 5, chrg_mgmt_data_req_msg)\n\t        chrg_mgmt_data_req_msg.body.ack_required = False\n\t        if event_id is not None:\n\t            chrg_mgmt_data_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_mgmt_data_req_msg.get_data())\n\t        chrg_mgmt_data_req_hex = self.message_V3_0_coder.encode_request(chrg_mgmt_data_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, chrg_mgmt_data_req_hex)\n", "        chrg_mgmt_data_rsp_hex = self.send_request(chrg_mgmt_data_req_hex,\n\t                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, chrg_mgmt_data_rsp_hex)\n\t        chrg_mgmt_data_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgMangDataResp())\n\t        self.message_V3_0_coder.decode_response(chrg_mgmt_data_rsp_hex, chrg_mgmt_data_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_mgmt_data_rsp_msg.get_data())\n\t        return chrg_mgmt_data_rsp_msg\n\t    def get_charging_status_with_retry(self, vin_info: VinInfo) -> MessageV30:\n\t        return self.handle_retry(self.get_charging_status, vin_info)\n\t    def control_battery_heating(self, enable: bool, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n", "        chrg_heat_req = OtaChrgHeatReq()\n\t        chrg_heat_req.ptcHeatReq = bool_to_int(enable)\n\t        chrg_heat_req_msg = MessageV30(MessageBodyV30(), chrg_heat_req)\n\t        application_id = '516'\n\t        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 9, chrg_heat_req_msg)\n\t        if event_id is not None:\n\t            chrg_heat_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_heat_req_msg.get_data())\n", "        chrg_heat_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_heat_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, chrg_heat_req_msg_hex)\n\t        chrg_heat_rsp_msg_hex = self.send_request(chrg_heat_req_msg_hex,\n\t                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, chrg_heat_rsp_msg_hex)\n\t        chrg_heat_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgHeatResp())\n\t        self.message_V3_0_coder.decode_response(chrg_heat_rsp_msg_hex, chrg_heat_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_heat_rsp_msg.get_data())\n\t        return chrg_heat_rsp_msg\n\t    def control_charging_port_lock(self, unlock: bool, vin_info: VinInfo, event_id: str = None):\n", "        chrg_ctrl_req = OtaChrgCtrlReq()\n\t        chrg_ctrl_req.chrgCtrlReq = 0\n\t        chrg_ctrl_req.tboxV2XReq = 0\n\t        chrg_ctrl_req.tboxEleccLckCtrlReq = 2 if unlock else 1\n\t        chrg_ctrl_req_msg = MessageV30(MessageBodyV30(), chrg_ctrl_req)\n\t        application_id = '516'\n\t        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 7, chrg_ctrl_req_msg)\n\t        if event_id is not None:\n", "            chrg_ctrl_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg.get_data())\n\t        chrg_ctrl_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_ctrl_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg_hex)\n\t        chrg_ctrl_rsp_msg_hex = self.send_request(chrg_ctrl_req_msg_hex,\n\t                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg_hex)\n\t        chrg_ctrl_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgCtrlStsResp())\n\t        self.message_V3_0_coder.decode_response(chrg_ctrl_rsp_msg_hex, chrg_ctrl_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg.get_data())\n", "        return chrg_ctrl_rsp_msg\n\t    def control_charging(self, stop_charging: bool, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n\t        chrg_ctrl_req = OtaChrgCtrlReq()\n\t        chrg_ctrl_req.chrgCtrlReq = 2 if stop_charging else 1\n\t        chrg_ctrl_req.tboxV2XReq = 0\n\t        chrg_ctrl_req.tboxEleccLckCtrlReq = 0\n\t        chrg_ctrl_req_msg = MessageV30(MessageBodyV30(), chrg_ctrl_req)\n\t        application_id = '516'\n\t        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n", "                                                   application_data_protocol_version, 7, chrg_ctrl_req_msg)\n\t        if event_id is not None:\n\t            chrg_ctrl_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg.get_data())\n\t        chrg_ctrl_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_ctrl_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg_hex)\n\t        chrg_ctrl_rsp_msg_hex = self.send_request(chrg_ctrl_req_msg_hex,\n\t                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg_hex)\n\t        chrg_ctrl_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgCtrlStsResp())\n", "        self.message_V3_0_coder.decode_response(chrg_ctrl_rsp_msg_hex, chrg_ctrl_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg.get_data())\n\t        return chrg_ctrl_rsp_msg\n\t    def start_charging(self, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n\t        return self.control_charging(False, vin_info, event_id)\n\t    def start_charging_with_retry(self, vin_info: VinInfo) -> MessageV30:\n\t        return self.handle_retry(self.start_charging, vin_info)\n\t    def set_target_battery_soc(\n\t            self,\n\t            target_soc: TargetBatteryCode,\n", "            vin_info: VinInfo,\n\t            charge_current_limit: ChargeCurrentLimitCode = ChargeCurrentLimitCode.C_IGNORE,\n\t            event_id: str = None\n\t    ):\n\t        chrg_setng_req = OtaChrgSetngReq()\n\t        chrg_setng_req.onBdChrgTrgtSOCReq = target_soc.value\n\t        chrg_setng_req.altngChrgCrntReq = charge_current_limit.value\n\t        chrg_setng_req.tboxV2XSpSOCReq = 0\n\t        chrg_setng_req_msg = MessageV30(MessageBodyV30(), chrg_setng_req)\n\t        application_id = '516'\n", "        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 3, chrg_setng_req_msg)\n\t        if event_id is not None:\n\t            chrg_setng_req_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_setng_req_msg.get_data())\n\t        chrg_setng_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_setng_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, chrg_setng_req_msg_hex)\n\t        chrg_setng_rsp_msg_hex = self.send_request(chrg_setng_req_msg_hex,\n\t                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n", "        self.publish_raw_response(application_id, application_data_protocol_version, chrg_setng_rsp_msg_hex)\n\t        chrg_setng_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgSetngResp())\n\t        self.message_V3_0_coder.decode_response(chrg_setng_rsp_msg_hex, chrg_setng_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_setng_rsp_msg.get_data())\n\t        return chrg_setng_rsp_msg\n\t    def set_schedule_charging(self, start_time: datetime.time, end_time: datetime.time,\n\t                              mode: ScheduledChargingMode,\n\t                              vin_info: VinInfo,\n\t                              event_id: str = None):\n\t        start_hour = start_time.hour\n", "        start_minute = start_time.minute\n\t        end_hour = end_time.hour\n\t        end_minute = end_time.minute\n\t        mode_value = mode.value\n\t        chrg_rsvan_req = OtaChrgRsvanReq()\n\t        chrg_rsvan_req.rsvanStHour = start_hour\n\t        chrg_rsvan_req.rsvanStMintu = start_minute\n\t        chrg_rsvan_req.rsvanSpHour = end_hour\n\t        chrg_rsvan_req.rsvanSpMintu = end_minute\n\t        chrg_rsvan_req.tboxAdpPubChrgSttnReq = 1\n", "        chrg_rsvan_req.tboxReserCtrlReq = mode_value\n\t        chrg_rsvan_msg = MessageV30(MessageBodyV30(), chrg_rsvan_req)\n\t        application_id = '516'\n\t        application_data_protocol_version = 768\n\t        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n\t                                                   application_data_protocol_version, 1, chrg_rsvan_msg)\n\t        if event_id is not None:\n\t            chrg_rsvan_msg.body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, chrg_rsvan_msg.get_data())\n\t        chrg_rsvan_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_rsvan_msg)\n", "        self.publish_raw_request(application_id, application_data_protocol_version, chrg_rsvan_req_msg_hex)\n\t        chrg_rsvan_rsp_msg_hex = self.send_request(chrg_rsvan_req_msg_hex,\n\t                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, chrg_rsvan_rsp_msg_hex)\n\t        chrg_rsvan_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgRsvanResp())\n\t        self.message_V3_0_coder.decode_response(chrg_rsvan_rsp_msg_hex, chrg_rsvan_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, chrg_rsvan_rsp_msg.get_data())\n\t        return chrg_rsvan_rsp_msg\n\t    # Messages\n\t    def get_message_list(self, event_id: str = None) -> MessageV11:\n", "        return self.get_alarm_list(1, 5, event_id)\n\t    def get_alarm_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n\t        return self.__get_message_list_of_group(start, end, 'ALARM', event_id)\n\t    def get_command_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n\t        return self.__get_message_list_of_group(start, end, 'COMMAND', event_id)\n\t    def get_news_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n\t        return self.__get_message_list_of_group(start, end, 'NEWS', event_id)\n\t    def __get_message_list_of_group(self, start: int, end: int, message_group: str, event_id: str = None) -> MessageV11:\n\t        message_list_request = MessageListReq()\n\t        message_list_request.start_end_number = StartEndNumber()\n", "        message_list_request.start_end_number.start_number = start\n\t        message_list_request.start_end_number.end_number = end\n\t        message_list_request.message_group = message_group\n\t        header = Header()\n\t        header.protocol_version = 18\n\t        message_body = MessageBodyV11()\n\t        message_list_req_msg = MessageV11(header, message_body, message_list_request)\n\t        application_id = '531'\n\t        application_data_protocol_version = 513\n\t        self.message_v1_1_coder.initialize_message(self.uid, self.get_token(), application_id,\n", "                                                   application_data_protocol_version, 1, message_list_req_msg)\n\t        if event_id is not None:\n\t            message_body.event_id = event_id\n\t        self.publish_json_request(application_id, application_data_protocol_version, message_list_req_msg.get_data())\n\t        message_list_req_hex = self.message_v1_1_coder.encode_request(message_list_req_msg)\n\t        self.publish_raw_request(application_id, application_data_protocol_version, message_list_req_hex)\n\t        message_list_rsp_hex = self.send_request(message_list_req_hex,\n\t                                                 urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n\t        self.publish_raw_response(application_id, application_data_protocol_version, message_list_rsp_hex)\n\t        message_list_rsp_msg = MessageV11(header, MessageBodyV11(), MessageListResp())\n", "        self.message_v1_1_coder.decode_response(message_list_rsp_hex, message_list_rsp_msg)\n\t        self.publish_json_response(application_id, application_data_protocol_version, message_list_rsp_msg.get_data())\n\t        return message_list_rsp_msg\n\t    def delete_all_alarms(self, event_id: str = None):\n\t        self.__change_message_status(None, 'DELETE_ALARM', event_id)\n\t    def delete_all_commands(self, event_id: str = None):\n\t        self.__change_message_status(None, 'DELETE_COMMAND', event_id)\n\t    def delete_all_news(self, event_id: str = None):\n\t        self.__change_message_status(None, 'DELETE_NEWS', event_id)\n\t    def read_message(self, message_id: int, event_id: str = None):\n", "        self.__change_message_status(message_id, 'READ', event_id)\n\t    def delete_message(self, message_id: int, event_id: str = None):\n\t        self.__change_message_status(message_id, 'DELETE', event_id)\n\t    def __change_message_status(self, message_id: int | None, action_type: str, event_id: str = None):\n\t        abort_send_msg_req = AbortSendMessageReq()\n\t        abort_send_msg_req.action_type = action_type\n\t        if message_id is not None:\n\t            abort_send_msg_req.message_id = message_id\n\t        header = Header()\n\t        header.protocol_version = 17\n", "        message_body = MessageBodyV11()\n\t        message_delete_req_msg = MessageV11(header, message_body, abort_send_msg_req)\n\t        application_id = '615'\n\t        application_protocol_version = 513\n\t        self.message_v1_1_coder.initialize_message(self.uid, self.get_token(), application_id,\n\t                                                   application_protocol_version, 1, message_delete_req_msg)\n\t        if event_id is not None:\n\t            message_body.event_id = event_id\n\t        self.publish_json_request(application_id, application_protocol_version, abort_send_msg_req.get_data())\n\t        message_delete_req_hex = self.message_v1_1_coder.encode_request(message_delete_req_msg)\n", "        self.publish_raw_request(application_id, application_protocol_version, message_delete_req_hex)\n\t        message_delete_rsp_hex = self.send_request(message_delete_req_hex,\n\t                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n\t        self.publish_raw_response(application_id, application_protocol_version, message_delete_rsp_hex)\n\t        message_delete_rsp_msg = MessageV11(header, MessageBodyV11())\n\t        self.message_v1_1_coder.decode_response(message_delete_rsp_hex, message_delete_rsp_msg)\n\t        self.publish_json_response(application_id, application_protocol_version, message_delete_rsp_msg.get_data())\n\t        if message_delete_rsp_msg.body.error_message is not None:\n\t            raise SaicApiException(message_delete_rsp_msg.body.error_message.decode(),\n\t                                   message_delete_rsp_msg.body.result)\n", "    def publish_raw_value(self, key: str, raw: str):\n\t        if self.on_publish_raw_value is not None:\n\t            self.on_publish_raw_value(key, raw)\n\t        else:\n\t            LOG.debug(f'{key}: {raw}')\n\t    def publish_raw_request(self, application_id: str, application_data_protocol_version: int, raw: str):\n\t        key = f'{application_id}_{application_data_protocol_version}/raw/request'\n\t        self.publish_raw_value(key, raw)\n\t    def publish_raw_response(self, application_id: str, application_data_protocol_version: int, raw: str):\n\t        key = f'{application_id}_{application_data_protocol_version}/raw/response'\n", "        self.publish_raw_value(key, raw)\n\t    def publish_json_request(self, application_id: str, application_data_protocol_version: int, data: dict):\n\t        key = f'{application_id}_{application_data_protocol_version}/json/request'\n\t        self.publish_json(key, data)\n\t    def publish_json_response(self, application_id: str, application_data_protocol_version: int, data: dict):\n\t        key = f'{application_id}_{application_data_protocol_version}/json/response'\n\t        self.publish_json(key, data)\n\t    def publish_json(self, key: str, data: dict):\n\t        if self.on_publish_json_value is not None:\n\t            self.on_publish_json_value(key, data)\n", "        else:\n\t            LOG.debug(f'{key}: {data}')\n\t    def send_request(self, hex_message: str, endpoint) -> str:\n\t        headers = {\n\t            'Accept': '*/*',\n\t            'Content-Type': 'text/html',\n\t            'Accept-Encoding': 'gzip, deflate, br',\n\t            'User-Agent': 'MG iSMART/1.1.1 (iPhone; iOS 16.3; Scale/3.00)',\n\t            'Accept-Language': 'de-DE;q=1, en-DE;q=0.9, lu-DE;q=0.8, fr-DE;q=0.7',\n\t            'Content-Length': str(len(hex_message))\n", "        }\n\t        try:\n\t            response = requests.post(url=endpoint, data=hex_message, headers=headers, cookies=self.cookies)\n\t            self.cookies = response.cookies\n\t            return response.content.decode()\n\t        except requests.exceptions.ConnectionError as ece:\n\t            raise SaicApiException(f'Connection error: {ece}')\n\t        except requests.exceptions.Timeout as et:\n\t            raise SaicApiException(f'Timeout error: {et}')\n\t        except requests.exceptions.HTTPError as ehttp:\n", "            status_code = ehttp.response.status_code\n\t            raise SaicApiException(f'HTTP error. HTTP status: {status_code}, {ehttp}')\n\t        except requests.exceptions.RequestException as e:\n\t            raise SaicApiException(f'{e}')\n\t    def get_token(self):\n\t        if self.token_expiration is not None:\n\t            token_expiration = cast(Timestamp, self.token_expiration)\n\t            if token_expiration.get_timestamp() < datetime.datetime.now():\n\t                self.login()\n\t        return self.token\n", "    def get_user_timezone(self):\n\t        return self.rest_v2_api.get_user_timezone(self.get_token(), self.uid)\n\t    def handle_error(self, message_body: AbstractMessageBody, iteration: int):\n\t        if iteration > 0:\n\t            waiting_time = AVG_SMS_DELIVERY_TIME * iteration\n\t        else:\n\t            waiting_time = AVG_SMS_DELIVERY_TIME\n\t        message = f'application ID: {message_body.application_id},' \\\n\t                  + f' protocol version: {message_body.application_data_protocol_version},' \\\n\t                  + f' message: {message_body.error_message.decode()}' \\\n", "                  + f' result code: {message_body.result}'\n\t        if message_body.result == 2:\n\t            # re-login\n\t            LOG.debug(message)\n\t            if self.relogin_delay > 0:\n\t                LOG.warning(f'The SAIC user has been logged out. '\n\t                            + f'Waiting {self.relogin_delay} seconds before attempting another login')\n\t                time.sleep(float(self.relogin_delay))\n\t            self.login()\n\t        elif message_body.result == 4:\n", "            # The remote control instruction failed, please try again later.\n\t            LOG.debug(message)\n\t            time.sleep(float(waiting_time))\n\t        elif message_body.result == 6:\n\t            # The service is not available,please try again later\n\t            LOG.debug(message)\n\t            time.sleep(float(waiting_time))\n\t        elif message_body.result == -1:\n\t            LOG.warning(message)\n\t        else:\n", "            LOG.error(message)\n\t            raise SaicApiException(message_body.error_message.decode(), message_body.result)\n\tdef bool_to_bit(flag):\n\t    return b'\\x01' if flag else b'\\x00'\n\tdef bool_to_int(flag):\n\t    return 1 if flag else 0\n\tdef hash_md5(password: str) -> str:\n\t    return hashlib.md5(password.encode('utf-8')).hexdigest()\n\tdef create_alarm_switch(alarm_setting_type: MpAlarmSettingType) -> AlarmSwitch:\n\t    alarm_switch = AlarmSwitch()\n", "    alarm_switch.alarm_setting_type = alarm_setting_type.value\n\t    alarm_switch.alarm_switch = True\n\t    alarm_switch.function_switch = True\n\t    return alarm_switch\n"]}
{"filename": "src/saic_ismart_client/__init__.py", "chunked_list": []}
{"filename": "src/saic_ismart_client/abrp_api.py", "chunked_list": ["import json\n\timport time\n\timport requests\n\tfrom saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsBasicStatus25857\n\tfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp\n\tclass AbrpApiException(Exception):\n\t    def __init__(self, msg: str):\n\t        self.message = msg\n\t    def __str__(self):\n\t        return self.message\n", "class AbrpApi:\n\t    def __init__(self, abrp_api_key: str, abrp_user_token: str) -> None:\n\t        self.abrp_api_key = abrp_api_key\n\t        self.abrp_user_token = abrp_user_token\n\t    def update_abrp(self, vehicle_status: OtaRvmVehicleStatusResp25857, charge_status: OtaChrgMangDataResp) -> str:\n\t        if (\n\t                self.abrp_api_key is not None\n\t                and self.abrp_user_token is not None\n\t                and vehicle_status is not None\n\t                and charge_status is not None\n", "        ):\n\t            # Request\n\t            tlm_send_url = 'https://api.iternio.com/1/tlm/send'\n\t            data = {\n\t                'utc': int(time.time()), # We assume the timestamp is now, we will update it later from GPS if available\n\t                'soc': (charge_status.bmsPackSOCDsp / 10.0),\n\t                'power': charge_status.get_power(),\n\t                'voltage': charge_status.get_voltage(),\n\t                'current': charge_status.get_current(),\n\t                'is_charging': vehicle_status.is_charging(),\n", "                'is_parked': vehicle_status.is_parked(),\n\t            }\n\t            basic_vehicle_status = vehicle_status.get_basic_vehicle_status()\n\t            if basic_vehicle_status is not None:\n\t                data.update(self.__extract_basic_vehicle_status(basic_vehicle_status))\n\t            gps_position = vehicle_status.get_gps_position()\n\t            if gps_position is not None:\n\t                data.update(self.__extract_gps_position(gps_position))\n\t            headers = {\n\t                'Authorization': f'APIKEY {self.abrp_api_key}'\n", "            }\n\t            try:\n\t                response = requests.post(url=tlm_send_url, headers=headers, params={\n\t                    'token': self.abrp_user_token,\n\t                    'tlm': json.dumps(data)\n\t                })\n\t                return response.content.decode()\n\t            except requests.exceptions.ConnectionError as ece:\n\t                raise AbrpApiException(f'Connection error: {ece}')\n\t            except requests.exceptions.Timeout as et:\n", "                raise AbrpApiException(f'Timeout error {et}')\n\t            except requests.exceptions.HTTPError as ehttp:\n\t                raise AbrpApiException(f'HTTP error {ehttp}')\n\t            except requests.exceptions.RequestException as e:\n\t                raise AbrpApiException(f'{e}')\n\t        else:\n\t            return 'ABRP request skipped because of missing configuration'\n\t    @staticmethod\n\t    def __extract_basic_vehicle_status(basic_vehicle_status: RvsBasicStatus25857) -> dict:\n\t        data = {}\n", "        exterior_temperature = basic_vehicle_status.exterior_temperature\n\t        if exterior_temperature is not None and exterior_temperature != -128:\n\t            data['ext_temp'] = exterior_temperature\n\t        mileage = basic_vehicle_status.mileage\n\t        if mileage is not None and mileage > 0:\n\t            data['odometer'] = mileage / 10.0\n\t        range_elec = basic_vehicle_status.fuel_range_elec\n\t        if range_elec is not None and range_elec > 0:\n\t            data['est_battery_range'] = float(range_elec) / 10.0\n\t        return data\n", "    @staticmethod\n\t    def __extract_gps_position(gps_position: RvsPosition) -> dict:\n\t        # Do not transmit GPS data if we have no timestamp\n\t        if gps_position.timestamp_4_short is None:\n\t            return {}\n\t        way_point = gps_position.get_way_point()\n\t        # Do not transmit GPS data if we have no speed info\n\t        if way_point is None:\n\t            return {}\n\t        data = {\n", "            'utc': gps_position.timestamp_4_short.seconds,\n\t            'speed': (way_point.speed / 10.0),\n\t            'heading': way_point.heading,\n\t        }\n\t        position = way_point.get_position()\n\t        if position is None or position.latitude <= 0 or position.longitude <= 0:\n\t            return data\n\t        data.update({\n\t            'lat': (position.latitude / 1000000.0),\n\t            'lon': (position.longitude / 1000000.0),\n", "            'elevation': position.altitude,\n\t        })\n\t        return data\n"]}
{"filename": "src/saic_ismart_client/common_model.py", "chunked_list": ["import io\n\timport os\n\timport pathlib\n\timport time\n\tfrom enum import Enum\n\timport asn1tools\n\tfrom asn1tools.compiler import Specification\n\tFIELD_ERROR_MESSAGE = 'errorMessage'\n\tFIELD_RESULT = 'result'\n\tFIELD_TEST_FLAG = 'testFlag'\n", "FIELD_APPLICATION_DATA_ENCODING = 'applicationDataEncoding'\n\tFIELD_ACK_REQUIRED = 'ackRequired'\n\tFIELD_EVENT_ID = 'eventID'\n\tFIELD_VIN = 'vin'\n\tFIELD_TOKEN = 'token'\n\tFIELD_UID = 'uid'\n\tFIELD_APPLICATION_DATA_PROTOCOL_VERSION = 'applicationDataProtocolVersion'\n\tFIELD_APPLICATION_DATA_LENGTH = 'applicationDataLength'\n\tFIELD_MESSAGE_ID = 'messageID'\n\tFIELD_EVENT_CREATION_TIME = 'eventCreationTime'\n", "FIELD_APPLICATION_ID = 'applicationID'\n\tFIELD_ACK_MESSAGE_COUNTER = 'ackMessageCounter'\n\tFIELD_DL_MESSAGE_COUNTER = 'dlMessageCounter'\n\tFIELD_UL_MESSAGE_COUNTER = 'ulMessageCounter'\n\tFIELD_ICC_ID = 'iccID'\n\tFIELD_HMI_LANGUAGE = 'hmiLanguage'\n\tFIELD_NETWORK_INFO = 'networkInfo'\n\tFIELD_BASIC_POSITION = 'basicPosition'\n\tFIELD_CRQM_REQUEST = 'crqmRequest'\n\tFIELD_STATE_LESS_DISPATCHER_MESSAGE = 'statelessDispatcherMessage'\n", "FIELD_SIM_INFO = 'simInfo'\n\tFIELD_MESSAGE_COUNTER = 'messageCounter'\n\tFIELD_DOWNLINK_COUNTER = 'downlinkCounter'\n\tFIELD_UPLINK_COUNTER = 'uplinkCounter'\n\tFIELD_LONGITUDE = 'longitude'\n\tFIELD_LATITUDE = 'latitude'\n\tFIELD_MNC_SIM = 'mncSim'\n\tFIELD_MCC_SIM = 'mccSim'\n\tFIELD_MNC_NETWORK = 'mncNetwork'\n\tFIELD_MCC_NETWORK = 'mccNetwork'\n", "FIELD_SIGNAL_STRENGTH = 'signalStrength'\n\tclass ScheduledChargingMode(Enum):\n\t    DISABLED = 2\n\t    UNTIL_CONFIGURED_SOC = 3\n\t    UNTIL_CONFIGURED_TIME = 1\n\tclass ChargeCurrentLimitCode(Enum):\n\t    C_IGNORE = 0\n\t    C_6A = 1\n\t    C_8A = 2\n\t    C_16A = 3\n", "    C_MAX = 4\n\t    @staticmethod\n\t    def to_code(limit: str):\n\t        match limit.upper():\n\t            case \"6A\":\n\t                return ChargeCurrentLimitCode.C_6A\n\t            case \"8A\":\n\t                return ChargeCurrentLimitCode.C_8A\n\t            case \"16A\":\n\t                return ChargeCurrentLimitCode.C_16A\n", "            case \"MAX\":\n\t                return ChargeCurrentLimitCode.C_MAX\n\t            case _:\n\t                raise ValueError(f'Unknown charge current limit: {limit}')\n\t    def get_limit(self) -> str:\n\t        match self:\n\t            case ChargeCurrentLimitCode.C_6A:\n\t                return \"6A\"\n\t            case ChargeCurrentLimitCode.C_8A:\n\t                return \"8A\"\n", "            case ChargeCurrentLimitCode.C_16A:\n\t                return \"16A\"\n\t            case ChargeCurrentLimitCode.C_MAX:\n\t                return \"Max\"\n\t            case _:\n\t                raise ValueError(f'Unknown charge current limit code: {self}')\n\tclass TargetBatteryCode(Enum):\n\t    P_40 = 1\n\t    P_50 = 2\n\t    P_60 = 3\n", "    P_70 = 4\n\t    P_80 = 5\n\t    P_90 = 6\n\t    P_100 = 7\n\t    def get_percentage(self) -> int:\n\t        match self:\n\t            case TargetBatteryCode.P_40:\n\t                return 40\n\t            case TargetBatteryCode.P_50:\n\t                return 50\n", "            case TargetBatteryCode.P_60:\n\t                return 60\n\t            case TargetBatteryCode.P_70:\n\t                return 70\n\t            case TargetBatteryCode.P_80:\n\t                return 80\n\t            case TargetBatteryCode.P_90:\n\t                return 90\n\t            case TargetBatteryCode.P_100:\n\t                return 100\n", "            case _:\n\t                raise ValueError(f'Unknown target battery code: {self}')\n\t    @staticmethod\n\t    def from_percentage(percentage: int):\n\t        match percentage:\n\t            case 40:\n\t                return TargetBatteryCode.P_40\n\t            case 50:\n\t                return TargetBatteryCode.P_50\n\t            case 60:\n", "                return TargetBatteryCode.P_60\n\t            case 70:\n\t                return TargetBatteryCode.P_70\n\t            case 80:\n\t                return TargetBatteryCode.P_80\n\t            case 90:\n\t                return TargetBatteryCode.P_90\n\t            case 100:\n\t                return TargetBatteryCode.P_100\n\t            case _:  # default\n", "                raise ValueError(f'Unknown target battery percentage: {percentage}')\n\tclass Header:\n\t    def __init__(self):\n\t        self.protocol_version = None\n\t        self.security_context = None\n\t        self.dispatcher_message_length = None\n\t        self.dispatcher_body_encoding = None\n\t    def get_body_encoding_int_value(self) -> int:\n\t        if self.dispatcher_body_encoding == DataEncodingType.PER_UNALIGNED:\n\t            return 0\n", "        elif self.dispatcher_body_encoding == DataEncodingType.DER:\n\t            return 1\n\t        elif self.dispatcher_body_encoding == DataEncodingType.BER:\n\t            return 1\n\t        else:\n\t            return -1\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'protocolVersion': self.protocol_version,\n\t            'dispatcherMessageLength': self.dispatcher_message_length\n", "        }\n\t        if self.dispatcher_body_encoding is not None:\n\t            data['dispatcherBodyEncoding'] = self.dispatcher_body_encoding\n\t        if self.security_context is not None:\n\t            data['securityContext'] = self.security_context\n\t        return data\n\tclass Asn1Type:\n\t    def __init__(self, asn_type: str):\n\t        self.asn_type = asn_type\n\t    def get_data(self) -> dict:\n", "        pass\n\t    def init_from_dict(self, data: dict):\n\t        pass\n\t    def add_optional_field_to_data(self, data: dict, key: str, value) -> None:\n\t        if value is not None:\n\t            data[key] = value\n\tclass AbstractMessageBody(Asn1Type):\n\t    def __init__(self, asn_type: str):\n\t        super().__init__(asn_type)\n\t        self.message_id = None\n", "        self.event_creation_time = None\n\t        self.application_id = None\n\t        self.application_data_protocol_version = None\n\t        self.test_flag = None\n\t        self.uid = None\n\t        self.token = None\n\t        self.event_id = None\n\t        self.application_data_encoding = None\n\t        self.application_data_length = None\n\t        self.vin = None\n", "        self.ack_required = None\n\t        self.result = None\n\t        self.error_message = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_APPLICATION_ID: self.application_id,\n\t            FIELD_EVENT_CREATION_TIME: self.event_creation_time,\n\t            FIELD_MESSAGE_ID: self.message_id,\n\t            FIELD_APPLICATION_DATA_LENGTH: self.application_data_length,\n\t            FIELD_APPLICATION_DATA_PROTOCOL_VERSION: self.application_data_protocol_version\n", "        }\n\t        self.add_optional_field_to_data(data, FIELD_UID, self.uid)\n\t        self.add_optional_field_to_data(data, FIELD_TOKEN, self.token)\n\t        self.add_optional_field_to_data(data, FIELD_VIN, self.vin)\n\t        self.add_optional_field_to_data(data, FIELD_EVENT_ID, self.event_id)\n\t        self.add_optional_field_to_data(data, FIELD_ACK_REQUIRED, self.ack_required)\n\t        if self.application_data_encoding is not None:\n\t            data[FIELD_APPLICATION_DATA_ENCODING] = self.application_data_encoding\n\t        self.add_optional_field_to_data(data, FIELD_TEST_FLAG, self.test_flag)\n\t        self.add_optional_field_to_data(data, FIELD_RESULT, self.result)\n", "        self.add_optional_field_to_data(data, FIELD_ERROR_MESSAGE, self.error_message)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        if FIELD_UID in data:\n\t            self.uid = data.get(FIELD_UID)\n\t        if FIELD_TOKEN in data:\n\t            self.token = data.get(FIELD_TOKEN)\n\t        self.application_id = data.get(FIELD_APPLICATION_ID)\n\t        if FIELD_VIN in data:\n\t            self.vin = data.get(FIELD_VIN)\n", "        self.event_creation_time = data.get(FIELD_EVENT_CREATION_TIME)\n\t        if FIELD_EVENT_ID in data:\n\t            self.event_id = data.get(FIELD_EVENT_ID)\n\t        self.message_id = data.get(FIELD_MESSAGE_ID)\n\t        if FIELD_ACK_REQUIRED in data:\n\t            self.ack_required = data.get(FIELD_ACK_REQUIRED)\n\t        self.application_data_length = data.get(FIELD_APPLICATION_DATA_LENGTH)\n\t        if FIELD_APPLICATION_DATA_ENCODING in data:\n\t            self.application_data_encoding = data.get(FIELD_APPLICATION_DATA_ENCODING)\n\t        self.application_data_protocol_version = data.get(FIELD_APPLICATION_DATA_PROTOCOL_VERSION)\n", "        if FIELD_TEST_FLAG in data:\n\t            self.test_flag = data.get(FIELD_TEST_FLAG)\n\t        if FIELD_RESULT in data:\n\t            self.result = data.get(FIELD_RESULT)\n\t        if FIELD_ERROR_MESSAGE in data:\n\t            self.error_message = data.get(FIELD_ERROR_MESSAGE)\n\tclass MessageBodyV1(AbstractMessageBody):\n\t    def __init__(self, asn_type: str):\n\t        super().__init__(asn_type)\n\t        self.message_counter = None\n", "        self.icc_id = None\n\t        self.sim_info = None\n\t        self.stateless_dispatcher_message = None\n\t        self.crqm_request = None\n\t        self.basic_position = None\n\t        self.network_info = None\n\t        self.hmi_language = None\n\t    def get_data(self) -> dict:\n\t        data = super().get_data()\n\t        data[FIELD_ICC_ID] = self.icc_id\n", "        self.add_optional_field_to_data(data, FIELD_STATE_LESS_DISPATCHER_MESSAGE, self.stateless_dispatcher_message)\n\t        self.add_optional_field_to_data(data, FIELD_CRQM_REQUEST, self.crqm_request)\n\t        if self.basic_position is not None:\n\t            data[FIELD_BASIC_POSITION] = self.basic_position.get_data()\n\t        if self.network_info is not None:\n\t            data[FIELD_NETWORK_INFO] = self.network_info.get_data()\n\t        self.add_optional_field_to_data(data, FIELD_SIM_INFO, self.sim_info)\n\t        if self.hmi_language is not None:\n\t            data[FIELD_HMI_LANGUAGE] = self.hmi_language.get_data()\n\t        if self.message_counter is not None:\n", "            data[FIELD_MESSAGE_COUNTER] = self.message_counter.get_data()\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        super().init_from_dict(data)\n\t        if FIELD_MESSAGE_COUNTER in data:\n\t            self.message_counter = MessageCounter()\n\t            self.message_counter.init_from_dict(data.get(FIELD_MESSAGE_COUNTER))\n\t        self.stateless_dispatcher_message = data.get(FIELD_STATE_LESS_DISPATCHER_MESSAGE)\n\t        self.crqm_request = data.get(FIELD_CRQM_REQUEST)\n\t        if FIELD_BASIC_POSITION in data:\n", "            self.basic_position = BasicPosition()\n\t            self.basic_position.init_from_dict(data.get(FIELD_BASIC_POSITION))\n\t        if FIELD_NETWORK_INFO in data:\n\t            self.network_info = NetworkInfo()\n\t            self.network_info.init_from_dict(data.get(FIELD_NETWORK_INFO))\n\t        self.sim_info = data.get(FIELD_SIM_INFO)\n\t        if FIELD_HMI_LANGUAGE in data:\n\t            self.hmi_language = data.get(FIELD_HMI_LANGUAGE)\n\t        self.icc_id = data.get(FIELD_ICC_ID)\n\tclass MessageBodyV2(AbstractMessageBody):\n", "    def __init__(self):\n\t        super().__init__('MPDispatcherBody')\n\t        self.ul_message_counter = None\n\t        self.dl_message_counter = None\n\t        self.ack_message_counter = None\n\t    def get_data(self) -> dict:\n\t        data = super().get_data()\n\t        self.add_optional_field_to_data(data, FIELD_UL_MESSAGE_COUNTER, self.ul_message_counter)\n\t        self.add_optional_field_to_data(data, FIELD_DL_MESSAGE_COUNTER, self.dl_message_counter)\n\t        self.add_optional_field_to_data(data, FIELD_ACK_MESSAGE_COUNTER, self.ack_message_counter)\n", "        return data\n\t    def init_from_dict(self, data: dict):\n\t        super().init_from_dict(data)\n\t        self.ul_message_counter = data.get(FIELD_UL_MESSAGE_COUNTER)\n\t        self.dl_message_counter = data.get(FIELD_DL_MESSAGE_COUNTER)\n\t        self.ack_message_counter = data.get(FIELD_ACK_MESSAGE_COUNTER)\n\tclass ApplicationData(Asn1Type):\n\t    def __init__(self, asn_type: str):\n\t        super().__init__(asn_type)\n\tclass AbstractMessage:\n", "    def __init__(self, header: Header, body: AbstractMessageBody, application_data: ApplicationData):\n\t        self.header = header\n\t        self.body = body\n\t        self.application_data = application_data\n\t    def get_version(self) -> str:\n\t        pass\n\t    def get_data(self) -> dict:\n\t        app_data = None\n\t        if (\n\t                self.application_data is not None\n", "                and self.application_data.get_data()\n\t        ):\n\t            app_data = self.application_data.get_data()\n\t        return {\n\t            'applicationData': app_data,\n\t            'body': self.body.get_data(),\n\t            'header': self.header.get_data()\n\t        }\n\tclass MessageV1(AbstractMessage):\n\t    def __init__(self, header: Header, body: MessageBodyV1, application_data: ApplicationData = None):\n", "        super().__init__(header, body, application_data)\n\tclass MessageV2(AbstractMessage):\n\t    def __init__(self, body: MessageBodyV2, application_data: ApplicationData = None,\n\t                 reserved: bytes = None):\n\t        super().__init__(Header(), body, application_data)\n\t        self.reserved = reserved\n\tclass AbstractMessageCoder:\n\t    def __init__(self, asn_files_dir: str):\n\t        self.asn_files = []\n\t        self.asn_files_dir = pathlib.Path(__file__).parent / asn_files_dir\n", "        self.load_asn_files()\n\t    def load_asn_files(self):\n\t        for f in os.listdir(self.asn_files_dir):\n\t            if f.endswith('.asn1'):\n\t                self.asn_files.append(str(self.asn_files_dir) + '/' + f)\n\t    def encode_request(self, message: AbstractMessage) -> str:\n\t        pass\n\t    def decode_response(self, message: str, decoded_message: AbstractMessage) -> None:\n\t        pass\n\t    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n", "                           application_data_protocol_version: int, message_id: int, message: AbstractMessage) -> None:\n\t        pass\n\t    def get_current_time(self) -> int:\n\t        return int(time.time())\n\t    def get_application_data_bytes(self, application_data: ApplicationData, asn1_tool: Specification) -> bytes:\n\t        if application_data is not None:\n\t            application_data_bytes = asn1_tool.encode(application_data.asn_type, application_data.get_data())\n\t        else:\n\t            application_data_bytes = bytes()\n\t        return application_data_bytes\n", "class MessageCoderV1(AbstractMessageCoder):\n\t    def __init__(self, asn_files_dir: str):\n\t        super().__init__(asn_files_dir)\n\t        self.asn1_tool_uper = asn1tools.compile_files(self.asn_files, 'uper')\n\t        self.header_length = 4\n\t    def encode_request(self, message: MessageV1) -> str:\n\t        application_data_bytes = self.get_application_data_bytes(message.application_data, self.asn1_tool_uper)\n\t        message_body = message.body\n\t        message_body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        message_body.application_data_length = len(application_data_bytes)\n", "        message_body_bytes = self.asn1_tool_uper.encode(message_body.asn_type, message_body.get_data())\n\t        message_header = message.header\n\t        if message_header.protocol_version is None:\n\t            raise ValueError('Protocol version in header missing')\n\t        message_header.security_context = 0\n\t        message_header.dispatcher_message_length = len(message_body_bytes) + self.header_length\n\t        message_header.dispatcher_body_encoding = DataEncodingType.PER_UNALIGNED\n\t        buffered_message_bytes = io.BytesIO()\n\t        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, \"little\"))\n\t        buffered_message_bytes.write(message_header.security_context.to_bytes(1, \"little\"))\n", "        buffered_message_bytes.write(message_header.dispatcher_message_length.to_bytes(1, \"little\"))\n\t        buffered_message_bytes.write(message_header.get_body_encoding_int_value().to_bytes(1, \"little\"))\n\t        buffered_message_bytes.write(message_body_bytes)\n\t        buffered_message_bytes.write(application_data_bytes)\n\t        message_bytes = buffered_message_bytes.getvalue()\n\t        length_hex = \"{:04x}\".format(len(message_bytes) * 2 + 5)\n\t        result = length_hex + \"1\" + message_bytes.hex()\n\t        return result.upper()\n\t    def decode_response(self, message: str, decoded_message: MessageV1) -> None:\n\t        buffered_message_bytes = io.BytesIO(bytes.fromhex(message[5:]))\n", "        header_bytes = buffered_message_bytes.read(self.header_length)\n\t        decoded_message.header.protocol_version = int(header_bytes[0])\n\t        decoded_message.header.security_context = int(header_bytes[1])\n\t        decoded_message.header.dispatcher_message_length = int(header_bytes[2])\n\t        decoded_message.header.dispatcher_body_encoding = int(header_bytes[3])\n\t        dispatcher_message_bytes = buffered_message_bytes.read(\n\t            decoded_message.header.dispatcher_message_length - self.header_length)\n\t        message_body = decoded_message.body\n\t        message_body_dict = self.asn1_tool_uper.decode(message_body.asn_type, dispatcher_message_bytes)\n\t        message_body.init_from_dict(message_body_dict)\n", "        if decoded_message.body.application_data_length > 0:\n\t            application_data_bytes = buffered_message_bytes.read(decoded_message.body.application_data_length)\n\t            application_data_dict = self.asn1_tool_uper.decode(decoded_message.application_data.asn_type,\n\t                                                               application_data_bytes)\n\t            decoded_message.application_data.init_from_dict(application_data_dict)\n\t        else:\n\t            decoded_message.application_data = None\n\t    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n\t                           application_data_protocol_version: int, message_id: int, message: MessageV1):\n\t        message_counter = MessageCounter()\n", "        message_counter.downlink_counter = 0\n\t        message_counter.uplink_counter = 1\n\t        body = message.body\n\t        body.message_counter = message_counter\n\t        body.message_id = message_id\n\t        body.icc_id = '12345678901234567890'\n\t        body.sim_info = '1234567890987654321'\n\t        body.event_creation_time = self.get_current_time()\n\t        body.application_id = application_id\n\t        body.application_data_protocol_version = application_data_protocol_version\n", "        body.test_flag = 2\n\t        body.uid = uid\n\t        body.token = token\n\t        body.vin = vin\n\t        body.event_id = 0\n\tclass MessageCoderV2(AbstractMessageCoder):\n\t    def __init__(self, asn_files_dir: str):\n\t        super().__init__(asn_files_dir)\n\t        self.asn1_tool_uper = asn1tools.compile_files(self.asn_files, 'uper')\n\t        self.header_length = 3\n", "        self.reserved_size = 16\n\t    def encode_request(self, message: MessageV2) -> str:\n\t        application_data_bytes = self.get_application_data_bytes(message.application_data, self.asn1_tool_uper)\n\t        message_body = message.body\n\t        message_body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n\t        message_body.application_data_length = len(application_data_bytes)\n\t        message_body_bytes = self.asn1_tool_uper.encode(message_body.asn_type, message_body.get_data())\n\t        message_header = message.header\n\t        message_header.protocol_version = self.get_protocol_version()\n\t        message_header.dispatcher_message_length = len(message_body_bytes) + self.header_length\n", "        message_header.dispatcher_body_encoding = DataEncodingType.PER_UNALIGNED\n\t        buffered_message_bytes = io.BytesIO()\n\t        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, 'little'))\n\t        buffered_message_bytes.write(message_header.dispatcher_message_length.to_bytes(1, 'little'))\n\t        buffered_message_bytes.write(message_header.get_body_encoding_int_value().to_bytes(1, 'little'))\n\t        buffered_message_bytes.write(message.reserved)\n\t        buffered_message_bytes.write(message_body_bytes)\n\t        buffered_message_bytes.write(application_data_bytes)\n\t        message_bytes = buffered_message_bytes.getvalue()\n\t        length_hex = \"{:04x}\".format(len(message_bytes) + self.header_length)\n", "        result = \"1\" + length_hex + message_bytes.hex()\n\t        return result.upper()\n\t    def decode_response(self, message: str, decoded_message: MessageV2) -> None:\n\t        buffered_message_bytes = io.BytesIO(bytes.fromhex(message[5:]))\n\t        header = decoded_message.header\n\t        header_bytes = buffered_message_bytes.read(self.header_length)\n\t        header.protocol_version = int(header_bytes[0])\n\t        header.dispatcher_message_length = int(header_bytes[1])\n\t        header.dispatcher_body_encoding = int(header_bytes[2])\n\t        decoded_message.reserved = buffered_message_bytes.read(self.reserved_size)\n", "        dispatcher_message_bytes = buffered_message_bytes.read(header.dispatcher_message_length - self.header_length)\n\t        message_body_dict = self.asn1_tool_uper.decode('MPDispatcherBody', dispatcher_message_bytes)\n\t        message_body = decoded_message.body\n\t        message_body.init_from_dict(message_body_dict)\n\t        if(\n\t            message_body.application_data_length > 0\n\t            and decoded_message.application_data is not None\n\t        ):\n\t            application_data_bytes = buffered_message_bytes.read(message_body.application_data_length)\n\t            application_data_dict = self.asn1_tool_uper.decode(decoded_message.application_data.asn_type,\n", "                                                               application_data_bytes)\n\t            decoded_message.application_data.init_from_dict(application_data_dict)\n\t        else:\n\t            decoded_message.application_data = None\n\t    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n\t                           application_data_protocol_version: int, message_id: int, message: MessageV2) -> None:\n\t        message.body.message_id = message_id\n\t        message.body.ul_message_counter = 0\n\t        message.body.dl_message_counter = 0\n\t        message.body.ack_message_counter = 0\n", "        message.body.event_creation_time = self.get_current_time()\n\t        message.body.application_id = application_id\n\t        message.body.application_data_protocol_version = application_data_protocol_version\n\t        message.body.test_flag = 2\n\t        message.body.uid = uid\n\t        message.body.token = token\n\t        message.body.vin = vin\n\t        message.body.event_id = 0\n\t        message.body.result = 0\n\t        message.reserved = bytes(self.reserved_size)\n", "    def get_protocol_version(self) -> int:\n\t        pass\n\tclass DataEncodingType(Enum):\n\t    PER_UNALIGNED = 'perUnaligned'\n\t    DER = 'der'\n\t    BER = 'ber'\n\tclass MessageCounter(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('MessageCounter')\n\t        self.downlink_counter = None\n", "        self.uplink_counter = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_UPLINK_COUNTER: self.uplink_counter,\n\t            FIELD_DOWNLINK_COUNTER: self.downlink_counter\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.uplink_counter = data.get(FIELD_UPLINK_COUNTER)\n\t        self.downlink_counter = data.get(FIELD_DOWNLINK_COUNTER)\n\tclass BasicPosition(Asn1Type):\n", "    def __init__(self):\n\t        super().__init__('BasicPosition')\n\t        self.latitude = None\n\t        self.longitude = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_LATITUDE: self.latitude,\n\t            FIELD_LONGITUDE: self.longitude\n\t        }\n\t    def init_from_dict(self, data: dict):\n", "        self.latitude = data.get(FIELD_LATITUDE)\n\t        self.longitude = data.get(FIELD_LONGITUDE)\n\tclass NetworkInfo(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('NetworkInfo')\n\t        self.mcc_network = None\n\t        self.mnc_network = None\n\t        self.mcc_sim = None\n\t        self.mnc_sim = None\n\t        self.signal_strength = None\n", "    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_MCC_NETWORK: self.mcc_network,\n\t            FIELD_MNC_NETWORK: self.mnc_network,\n\t            FIELD_MCC_SIM: self.mcc_sim,\n\t            FIELD_MNC_SIM: self.mnc_sim,\n\t            FIELD_SIGNAL_STRENGTH: self.signal_strength\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.mcc_network = data.get(FIELD_MCC_NETWORK)\n", "        self.mnc_network = data.get(FIELD_MNC_NETWORK)\n\t        self.mcc_sim = data.get(FIELD_MCC_SIM)\n\t        self.mnc_sim = data.get(FIELD_MNC_SIM)\n\t        self.signal_strength = data.get(FIELD_SIGNAL_STRENGTH)\n\tclass TargetBatteryCode(Enum):\n\t    P_40 = 1\n\t    P_50 = 2\n\t    P_60 = 3\n\t    P_70 = 4\n\t    P_80 = 5\n", "    P_90 = 6\n\t    P_100 = 7\n\t    def get_percentage(self) -> int:\n\t        match self:\n\t            case TargetBatteryCode.P_40:\n\t                return 40\n\t            case TargetBatteryCode.P_50:\n\t                return 50\n\t            case TargetBatteryCode.P_60:\n\t                return 60\n", "            case TargetBatteryCode.P_70:\n\t                return 70\n\t            case TargetBatteryCode.P_80:\n\t                return 80\n\t            case TargetBatteryCode.P_90:\n\t                return 90\n\t            case TargetBatteryCode.P_100:\n\t                return 100\n\t            case _:\n\t                raise ValueError(f'Unknown target battery code: {self}')\n", "    @staticmethod\n\t    def from_percentage(percentage: int):\n\t        match percentage:\n\t            case 40:\n\t                return TargetBatteryCode.P_40\n\t            case 50:\n\t                return TargetBatteryCode.P_50\n\t            case 60:\n\t                return TargetBatteryCode.P_60\n\t            case 70:\n", "                return TargetBatteryCode.P_70\n\t            case 80:\n\t                return TargetBatteryCode.P_80\n\t            case 90:\n\t                return TargetBatteryCode.P_90\n\t            case 100:\n\t                return TargetBatteryCode.P_100\n\t            case _:  # default\n\t                raise ValueError(f'Unknown target battery percentage: {percentage}')\n"]}
{"filename": "src/saic_ismart_client/message_decoder.py", "chunked_list": ["import argparse\n\timport json\n\tfrom common_model import MessageV2, MessageBodyV2, Header\n\tfrom ota_v1_1.Message import MessageCoderV11\n\tfrom ota_v1_1.data_model import MessageV11, MessageBodyV11\n\tfrom ota_v2_1.Message import MessageCoderV21\n\tfrom ota_v2_1.data_model import OtaRvmVehicleStatusReq, OtaRvmVehicleStatusResp25857\n\tfrom ota_v3_0.Message import MessageV30, MessageBodyV30, MessageCoderV30\n\tfrom ota_v3_0.data_model import OtaChrgMangDataResp\n\tdef process_arguments():\n", "    parser = argparse.ArgumentParser(description='Decode your SAIC ASN.1 messages')\n\t    parser.add_argument('-m', '--message', help='ASN.1 message to decode', dest='message', required=True)\n\t    parser.add_argument('-t', '--type', help='Message type', choices=['request', 'response'], dest='message_type',\n\t                        required=True)\n\t    parser.add_argument('-v', '--message-version', help='Message version', choices=['V1', 'V2', 'V3'],\n\t                        dest='message_version', required=True)\n\t    return parser.parse_args()\n\tdef handle_message_v1(message_coder: MessageCoderV11, message: str, message_type: str,\n\t                      decoded_message: MessageV11) -> None:\n\t    application_id = decoded_message.body.application_id\n", "    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\tdef handle_message_v2(message_coder: MessageCoderV21, message: str, message_type: str,\n\t                      decoded_message: MessageV2) -> None:\n\t    application_id = decoded_message.body.application_id\n\t    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\t    if (\n\t            application_id == '511'\n\t            and application_data_protocol_version == 25857\n\t    ):\n\t        if message_type == 'request':\n", "            decoded_message.application_data = OtaRvmVehicleStatusReq()\n\t            message_coder.decode_response(message, decoded_message)\n\t        else:\n\t            decoded_message.application_data = OtaRvmVehicleStatusResp25857()\n\t            message_coder.decode_response(message, decoded_message)\n\tdef handle_message_v3(message_coder: MessageCoderV30, message: str, message_type: str,\n\t                      decoded_message: MessageV30) -> None:\n\t    application_id = decoded_message.body.application_id\n\t    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\t    if (\n", "            application_id == '516'\n\t            and application_data_protocol_version == 768\n\t    ):\n\t        if message_type == 'request':\n\t            message_coder.decode_response(message, decoded_message)\n\t        else:\n\t            decoded_message.application_data = OtaChrgMangDataResp()\n\t            message_coder.decode_response(message, decoded_message)\n\tdef main():\n\t    args = process_arguments()\n", "    message = args.message\n\t    message_type = args.message_type\n\t    message_version = args.message_version.upper()\n\t    decoded_message = None\n\t    if message_version == 'V1':\n\t        message_v1_1_coder = MessageCoderV11()\n\t        decoded_message = MessageV11(Header(), MessageBodyV11())\n\t        message_v1_1_coder.decode_response(message, decoded_message)\n\t        handle_message_v1(message_v1_1_coder, message, message_type, decoded_message)\n\t    elif message_version == 'V2':\n", "        message_v2_1_coder = MessageCoderV21()\n\t        decoded_message = MessageV2(MessageBodyV2())\n\t        message_v2_1_coder.decode_response(message, decoded_message)\n\t        handle_message_v2(message_v2_1_coder, message, message_type, decoded_message)\n\t    elif message_version == 'V3':\n\t        message_v3_0_coder = MessageCoderV30()\n\t        decoded_message = MessageV30(MessageBodyV30())\n\t        message_v3_0_coder.decode_response(message, decoded_message)\n\t        handle_message_v3(message_v3_0_coder, message, message_type, decoded_message)\n\t    if decoded_message:\n", "        json_object = json.dumps(decoded_message.get_data(), indent=4)\n\t        print(json_object)\n\t    else:\n\t        print('No decoded message')\n\tif __name__ == '__main__':\n\t    main()\n"]}
{"filename": "src/saic_ismart_client/exceptions.py", "chunked_list": ["class SaicApiException(Exception):\n\t    def __init__(self, msg: str, return_code: int = None):\n\t        if return_code is not None:\n\t            self.message = f'return code: {return_code}, message: {msg}'\n\t        else:\n\t            self.message = msg\n\t    def __str__(self):\n\t        return self.message\n"]}
{"filename": "src/saic_ismart_client/ota_v2_1/Message.py", "chunked_list": ["from saic_ismart_client.common_model import MessageCoderV2, MessageV2\n\tclass MessageCoderV21(MessageCoderV2):\n\t    def __init__(self):\n\t        super().__init__('ASN.1_schema/v2_1/')\n\t    def encode_request(self, message: MessageV2) -> str:\n\t        return super().encode_request(message)\n\t    def decode_response(self, message: str, decoded_message: MessageV2) -> None:\n\t        return super().decode_response(message, decoded_message)\n\t    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n\t                           application_data_protocol_version: int, message_id: int, message: MessageV2) -> None:\n", "        return super().initialize_message(uid, token, vin, application_id, application_data_protocol_version,\n\t                                          message_id, message)\n\t    def get_protocol_version(self) -> int:\n\t        return 33\n"]}
{"filename": "src/saic_ismart_client/ota_v2_1/__init__.py", "chunked_list": []}
{"filename": "src/saic_ismart_client/ota_v2_1/data_model.py", "chunked_list": ["from typing import cast\n\tfrom saic_ismart_client.common_model import Asn1Type, ApplicationData\n\tFIELD_FAILURE_TYPE = 'failureType'\n\tFIELD_RVC_REQ_STS = 'rvcReqSts'\n\tFIELD_VALUE = 'value'\n\tFIELD_ID = 'id'\n\tFIELD_VEHICLE_ALERTS = 'vehicleAlerts'\n\tFIELD_SECONDS = 'seconds'\n\tFIELD_ALTITUDE = 'altitude'\n\tFIELD_LONGITUDE = 'longitude'\n", "FIELD_LATITUDE = 'latitude'\n\tFIELD_SATELLITES = 'satellites'\n\tFIELD_HDOP = 'hdop'\n\tFIELD_SPEED = 'speed'\n\tFIELD_HEADING = 'heading'\n\tFIELD_POSITION = 'position'\n\tFIELD_GPS_STATUS = 'gpsStatus'\n\tFIELD_TIMESTAMP_4_SHORT = 'timestamp4Short'\n\tFIELD_WAY_POINT = 'wayPoint'\n\tFIELD_EXTENDED_VEHICLE_STATUS = 'extendedVehicleStatus'\n", "FIELD_BASIC_VEHICLE_STATUS = 'basicVehicleStatus'\n\tFIELD_GPS_POSITION = 'gpsPosition'\n\tFIELD_STATUS_TIME = 'statusTime'\n\tFIELD_PARAM_VALUE = 'paramValue'\n\tFIELD_PARAM_ID = 'paramId'\n\tFIELD_RVC_PARAMS = 'rvcParams'\n\tFIELD_RVC_REQ_TYPE = 'rvcReqType'\n\tFIELD_VEH_STATUS_REQ_TYPE = 'vehStatusReqType'\n\tclass OtaRvmVehicleStatusReq(ApplicationData):\n\t    def __init__(self):\n", "        super().__init__('OTARVMVehicleStatusReq')\n\t        self.veh_status_req_type = None\n\t    def get_data(self) -> dict:\n\t        return {FIELD_VEH_STATUS_REQ_TYPE: self.veh_status_req_type}\n\t    def init_from_dict(self, data: dict):\n\t        self.veh_status_req_type = data.get(FIELD_VEH_STATUS_REQ_TYPE)\n\tclass RvsWgs84Point(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvsWGS84Point')\n\t        self.latitude = None\n", "        self.longitude = None\n\t        self.altitude = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_LATITUDE: self.latitude,\n\t            FIELD_LONGITUDE: self.longitude,\n\t            FIELD_ALTITUDE: self.altitude\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.latitude = data.get(FIELD_LATITUDE)\n", "        self.longitude = data.get(FIELD_LONGITUDE)\n\t        self.altitude = data.get(FIELD_ALTITUDE)\n\tclass RvsWayPoint(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvsWayPoint')\n\t        self.position = None\n\t        self.heading = None\n\t        self.speed = None\n\t        self.hdop = None\n\t        self.satellites = None\n", "    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_POSITION: self.position.get_data(),\n\t            FIELD_HEADING: self.heading,\n\t            FIELD_SPEED: self.speed,\n\t            FIELD_HDOP: self.hdop,\n\t            FIELD_SATELLITES: self.satellites\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.position = RvsWgs84Point()\n", "        self.position.init_from_dict(data.get(FIELD_POSITION))\n\t        self.heading = data.get(FIELD_HEADING)\n\t        self.speed = data.get(FIELD_SPEED)\n\t        self.hdop = data.get(FIELD_HDOP)\n\t        self.satellites = data.get(FIELD_SATELLITES)\n\t    def get_position(self) -> RvsWgs84Point:\n\t        return cast(RvsWgs84Point, self.position)\n\tclass RvsPosition(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvsPosition')\n", "        self.way_point = None\n\t        self.timestamp_4_short = None\n\t        self.gps_status = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_WAY_POINT: self.way_point.get_data(),\n\t            FIELD_TIMESTAMP_4_SHORT: self.timestamp_4_short.get_data(),\n\t            FIELD_GPS_STATUS: self.gps_status\n\t        }\n\t    def init_from_dict(self, data: dict):\n", "        self.way_point = RvsWayPoint()\n\t        self.way_point.init_from_dict(data.get(FIELD_WAY_POINT))\n\t        self.timestamp_4_short = Timestamp4Short()\n\t        self.timestamp_4_short.init_from_dict(data.get(FIELD_TIMESTAMP_4_SHORT))\n\t        self.gps_status = data.get(FIELD_GPS_STATUS)\n\t    def get_way_point(self) -> RvsWayPoint:\n\t        return cast(RvsWayPoint, self.way_point)\n\tclass Timestamp4Short(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('Timestamp4Short')\n", "        self.seconds = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_SECONDS: self.seconds\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.seconds = data.get(FIELD_SECONDS)\n\tclass RvsBasicStatus25857(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvsBasicStatus25857')\n", "        self.driver_door = None  # BOOLEAN\n\t        self.passenger_door = None  # BOOLEAN\n\t        self.rear_left_door = None  # BOOLEAN\n\t        self.rear_right_door = None  # BOOLEAN\n\t        self.boot_status = None  # BOOLEAN\n\t        self.bonnet_status = None  # BOOLEAN\n\t        self.lock_status = None  # BOOLEAN\n\t        self.driver_window = None  # BOOLEAN OPTIONAL\n\t        self.passenger_window = None  # BOOLEAN OPTIONAL,\n\t        self.rear_left_window = None  # BOOLEAN OPTIONAL,\n", "        self.rear_right_window = None  # BOOLEAN OPTIONAL,\n\t        self.sun_roof_status = None  # BOOLEAN OPTIONAL,\n\t        self.front_right_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n\t        self.front_left_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n\t        self.rear_right_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n\t        self.rear_left_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n\t        self.wheel_tyre_monitor_status = None  # INTEGER(0..255) OPTIONAL,\n\t        self.side_light_status = None  # BOOLEAN,\n\t        self.dipped_beam_status = None  # BOOLEAN,\n\t        self.main_beam_status = None  # BOOLEAN,\n", "        self.vehicle_alarm_status = None  # INTEGER(0..255) OPTIONAL,\n\t        self.engine_status = None  # INTEGER(0..255),\n\t        self.power_mode = None  # INTEGER(0..255),\n\t        self.last_key_seen = None  # INTEGER(0..65535),\n\t        self.current_journey_distance = None  # INTEGER(0..65535),\n\t        self.current_journey_id = None  # INTEGER(0..2147483647),\n\t        self.interior_temperature = None  # INTEGER(-128..127),\n\t        self.exterior_temperature = None  # INTEGER(-128..127),\n\t        self.fuel_level_prc = None  # INTEGER(0..255),\n\t        self.fuel_range = None  # INTEGER(0..65535),\n", "        self.remote_climate_status = None  # INTEGER(0..255),\n\t        self.front_left_seat_heat_level = None  # INTEGER(0..255) OPTIONAL,\n\t        self.front_right_seat_heat_level = None  # INTEGER(0..255) OPTIONAL,\n\t        self.can_bus_active = None  # BOOLEAN,\n\t        self.time_of_last_canbus_activity = None  # INTEGER(0..2147483647),\n\t        self.clstr_dspd_fuel_lvl_sgmt = None  # INTEGER(0..255),\n\t        self.mileage = None  # INTEGER(0..2147483647),\n\t        self.battery_voltage = None  # INTEGER(0..65535),\n\t        self.hand_brake = None  # BOOLEAN,\n\t        self.veh_elec_rng_dsp = None  # INTEGER(0..255),\n", "        self.fuel_range_elec = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.rmt_htd_rr_wnd_st = None  # INTEGER(0..255),\n\t        self.extended_data1 = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.extended_data2 = None  # INTEGER(0..2147483647) OPTIONAL\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'driverDoor': self.driver_door,\n\t            'passengerDoor': self.passenger_door,\n\t            'rearLeftDoor': self.rear_left_door,\n\t            'rearRightDoor': self.rear_right_door,\n", "            'bootStatus': self.boot_status,\n\t            'bonnetStatus': self.bonnet_status,\n\t            'lockStatus': self.lock_status,\n\t            'sideLightStatus': self.side_light_status,\n\t            'dippedBeamStatus': self.dipped_beam_status,\n\t            'mainBeamStatus': self.main_beam_status,\n\t            'engineStatus': self.engine_status,\n\t            'powerMode': self.power_mode,\n\t            'lastKeySeen': self.last_key_seen,\n\t            'currentjourneyDistance': self.current_journey_distance,\n", "            'currentJourneyID': self.current_journey_id,\n\t            'interiorTemperature': self.interior_temperature,\n\t            'exteriorTemperature': self.exterior_temperature,\n\t            'fuelLevelPrc': self.fuel_level_prc,\n\t            'fuelRange': self.fuel_range,\n\t            'remoteClimateStatus': self.remote_climate_status,\n\t            'canBusActive': self.can_bus_active,\n\t            'timeOfLastCANBUSActivity': self.time_of_last_canbus_activity,\n\t            'clstrDspdFuelLvlSgmt': self.clstr_dspd_fuel_lvl_sgmt,\n\t            'mileage': self.mileage,\n", "            'batteryVoltage': self.battery_voltage,\n\t            'handBrake': self.hand_brake,\n\t            'vehElecRngDsp': self.veh_elec_rng_dsp,\n\t            'rmtHtdRrWndSt': self.rmt_htd_rr_wnd_st\n\t        }\n\t        self.add_optional_field_to_data(data, 'driverWindow', self.driver_window)\n\t        self.add_optional_field_to_data(data, 'passengerWindow', self.passenger_window)\n\t        self.add_optional_field_to_data(data, 'rearLeftWindow', self.rear_left_window)\n\t        self.add_optional_field_to_data(data, 'rearRightWindow', self.rear_right_window)\n\t        self.add_optional_field_to_data(data, 'sunroofStatus', self.sun_roof_status)\n", "        self.add_optional_field_to_data(data, 'frontRrightTyrePressure', self.front_right_tyre_pressure)\n\t        self.add_optional_field_to_data(data, 'frontLeftTyrePressure', self.front_left_tyre_pressure)\n\t        self.add_optional_field_to_data(data, 'rearRightTyrePressure', self.rear_right_tyre_pressure)\n\t        self.add_optional_field_to_data(data, 'rearLeftTyrePressure', self.rear_left_tyre_pressure)\n\t        self.add_optional_field_to_data(data, 'wheelTyreMonitorStatus', self.wheel_tyre_monitor_status)\n\t        self.add_optional_field_to_data(data, 'vehicleAlarmStatus', self.vehicle_alarm_status)\n\t        self.add_optional_field_to_data(data, 'frontLeftSeatHeatLevel', self.front_left_seat_heat_level)\n\t        self.add_optional_field_to_data(data, 'frontRightSeatHeatLevel', self.front_right_seat_heat_level)\n\t        self.add_optional_field_to_data(data, 'fuelRangeElec', self.fuel_range_elec)\n\t        self.add_optional_field_to_data(data, 'extendedData1', self.extended_data1)\n", "        self.add_optional_field_to_data(data, 'extendedData2', self.extended_data2)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.driver_door = data.get('driverDoor')\n\t        self.passenger_door = data.get('passengerDoor')\n\t        self.rear_left_door = data.get('rearLeftDoor')\n\t        self.rear_right_door = data.get('rearRightDoor')\n\t        self.boot_status = data.get('bootStatus')\n\t        self.bonnet_status = data.get('bonnetStatus')\n\t        self.lock_status = data.get('lockStatus')\n", "        self.side_light_status = data.get('sideLightStatus')\n\t        self.dipped_beam_status = data.get('dippedBeamStatus')\n\t        self.main_beam_status = data.get('mainBeamStatus')\n\t        self.engine_status = data.get('engineStatus')\n\t        self.power_mode = data.get('powerMode')\n\t        self.last_key_seen = data.get('lastKeySeen')\n\t        self.current_journey_distance = data.get('currentjourneyDistance')\n\t        self.current_journey_id = data.get('currentJourneyID')\n\t        self.interior_temperature = data.get('interiorTemperature')\n\t        self.exterior_temperature = data.get('exteriorTemperature')\n", "        self.fuel_level_prc = data.get('fuelLevelPrc')\n\t        self.fuel_range = data.get('fuelRange')\n\t        self.remote_climate_status = data.get('remoteClimateStatus')\n\t        self.can_bus_active = data.get('canBusActive')\n\t        self.time_of_last_canbus_activity = data.get('timeOfLastCANBUSActivity')\n\t        self.clstr_dspd_fuel_lvl_sgmt = data.get('clstrDspdFuelLvlSgmt')\n\t        self.mileage = data.get('mileage')\n\t        self.battery_voltage = data.get('batteryVoltage')\n\t        self.hand_brake = data.get('handBrake')\n\t        self.veh_elec_rng_dsp = data.get('vehElecRngDsp')\n", "        self.rmt_htd_rr_wnd_st = data.get('rmtHtdRrWndSt')\n\t        self.driver_window = data.get('driverWindow')\n\t        self.passenger_window = data.get('passengerWindow')\n\t        self.rear_left_window = data.get('rearLeftWindow')\n\t        self.rear_right_window = data.get('rearRightWindow')\n\t        self.sun_roof_status = data.get('sunroofStatus')\n\t        self.front_right_tyre_pressure = data.get('frontRrightTyrePressure')\n\t        self.front_left_tyre_pressure = data.get('frontLeftTyrePressure')\n\t        self.rear_right_tyre_pressure = data.get('rearRightTyrePressure')\n\t        self.rear_left_tyre_pressure = data.get('rearLeftTyrePressure')\n", "        self.wheel_tyre_monitor_status = data.get('wheelTyreMonitorStatus')\n\t        self.vehicle_alarm_status = data.get('vehicleAlarmStatus')\n\t        self.front_left_seat_heat_level = data.get('frontLeftSeatHeatLevel')\n\t        self.front_right_seat_heat_level = data.get('frontRightSeatHeatLevel')\n\t        self.fuel_range_elec = data.get('fuelRangeElec')\n\t        self.extended_data1 = data.get('extendedData1')\n\t        self.extended_data2 = data.get('extendedData2')\n\t    def extended_data_2_present(self) -> bool:\n\t        return self.extended_data2 is not None\n\tclass RvsExtStatus(Asn1Type):\n", "    def __init__(self):\n\t        super().__init__('RvsExtStatus')\n\t        self.vehicle_alerts = []\n\t    def get_data(self) -> dict:\n\t        vehicle_alerts = []\n\t        for alert in self.vehicle_alerts:\n\t            vehicle_alerts.append(alert.get_data())\n\t        return {\n\t            FIELD_VEHICLE_ALERTS: vehicle_alerts\n\t        }\n", "    def init_from_dict(self, data: dict):\n\t        vehicle_alerts = data.get(FIELD_VEHICLE_ALERTS)\n\t        for alert in vehicle_alerts:\n\t            a = VehicleAlertInfo()\n\t            a.init_from_dict(alert)\n\t            self.vehicle_alerts.append(a)\n\tclass VehicleAlertInfo(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('VehicleAlertInfo')\n\t        self.id = None\n", "        self.value = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_ID: self.id,\n\t            FIELD_VALUE: self.value\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.id = data.get(FIELD_ID)\n\t        self.value = data.get(FIELD_VALUE)\n\tclass OtaRvcReq(ApplicationData):\n", "    def __init__(self):\n\t        super().__init__('OTARVCReq')\n\t        self.rvc_req_type = None\n\t        self.rvc_params = []\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_RVC_REQ_TYPE: self.rvc_req_type\n\t        }\n\t        param_list = []\n\t        for param in self.rvc_params:\n", "            param_list.append(param.get_data())\n\t        data[FIELD_RVC_PARAMS] = param_list\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.rvc_req_type = data.get(FIELD_RVC_REQ_TYPE)\n\t        if FIELD_RVC_PARAMS in data:\n\t            rvc_params_list = data.get(FIELD_RVC_PARAMS)\n\t            for item in rvc_params_list:\n\t                param = RvcReqParam()\n\t                param.init_from_dict(item)\n", "                self.rvc_params.append(param)\n\tclass RvcReqParam(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvcReqParam')\n\t        self.param_id = None\n\t        self.param_value = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_PARAM_ID: self.param_id,\n\t            FIELD_PARAM_VALUE: self.param_value\n", "        }\n\t    def init_from_dict(self, data: dict):\n\t        self.param_id = data.get(FIELD_PARAM_ID)\n\t        self.param_value = data.get(FIELD_PARAM_VALUE)\n\tclass OtaRvmVehicleStatusResp25857(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTARVMVehicleStatusResp25857')\n\t        self.status_time = None\n\t        self.gps_position = None\n\t        self.basic_vehicle_status = None\n", "        self.extended_vehicle_status = None\n\t    def get_data(self) -> dict:\n\t        if (\n\t                self.status_time is not None\n\t                and self.gps_position is not None\n\t                and self.basic_vehicle_status is not None\n\t        ):\n\t            data = {\n\t                FIELD_STATUS_TIME: self.status_time,\n\t                FIELD_GPS_POSITION: self.gps_position.get_data(),\n", "                FIELD_BASIC_VEHICLE_STATUS: self.basic_vehicle_status.get_data()\n\t            }\n\t            if FIELD_EXTENDED_VEHICLE_STATUS in data:\n\t                data[FIELD_EXTENDED_VEHICLE_STATUS] = self.extended_vehicle_status.get_data()\n\t            return data\n\t        else:\n\t            return {}\n\t    def init_from_dict(self, data: dict):\n\t        self.status_time = data.get(FIELD_STATUS_TIME)\n\t        self.gps_position = RvsPosition()\n", "        self.gps_position.init_from_dict(data.get(FIELD_GPS_POSITION))\n\t        self.basic_vehicle_status = RvsBasicStatus25857()\n\t        self.basic_vehicle_status.init_from_dict(data.get(FIELD_BASIC_VEHICLE_STATUS))\n\t        if FIELD_EXTENDED_VEHICLE_STATUS in data:\n\t            self.extended_vehicle_status = RvsExtStatus()\n\t            self.extended_vehicle_status.init_from_dict(data.get(FIELD_EXTENDED_VEHICLE_STATUS))\n\t    def get_basic_vehicle_status(self) -> RvsBasicStatus25857:\n\t        return cast(RvsBasicStatus25857, self.basic_vehicle_status)\n\t    def get_gps_position(self) -> RvsPosition:\n\t        return cast(RvsPosition, self.gps_position)\n", "    def is_charging(self) -> bool:\n\t        return (\n\t                self.get_basic_vehicle_status().extended_data_2_present()\n\t                and self.get_basic_vehicle_status().extended_data2 >= 1\n\t        )\n\t    def is_parked(self) -> bool:\n\t        return (\n\t                self.get_basic_vehicle_status().engine_status != 1\n\t                or self.get_basic_vehicle_status().hand_brake\n\t        )\n", "    def is_engine_running(self) -> bool:\n\t        return self.get_basic_vehicle_status().engine_status == 1\n\tclass OtaRvcStatus25857(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTARVCStatus25857')\n\t        self.rvcReqType = None  # OCTET STRING(SIZE(1)),\n\t        self.rvcReqSts = None  # OCTET STRING(SIZE(1)),\n\t        self.failureType = None  # INTEGER(0..255) OPTIONAL,\n\t        self.gpsPosition = None  # RvsPosition(1),\n\t        self.basicVehicleStatus = None  # RvsBasicStatus25857(1)\n", "    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_RVC_REQ_TYPE: self.rvcReqType,\n\t            FIELD_RVC_REQ_STS: self.rvcReqSts,\n\t            FIELD_GPS_POSITION: self.gpsPosition.get_data(),\n\t            FIELD_BASIC_VEHICLE_STATUS: self.basicVehicleStatus.get_data()\n\t        }\n\t        self.add_optional_field_to_data(data, FIELD_FAILURE_TYPE, self.failureType)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n", "        self.rvcReqType = data.get(FIELD_RVC_REQ_TYPE)\n\t        self.rvcReqSts = data.get(FIELD_RVC_REQ_STS)\n\t        self.gpsPosition = RvsPosition()\n\t        self.gpsPosition.init_from_dict(data.get(FIELD_GPS_POSITION))\n\t        self.basicVehicleStatus = RvsBasicStatus25857()\n\t        self.basicVehicleStatus.init_from_dict(data.get(FIELD_BASIC_VEHICLE_STATUS))\n\t        if FIELD_FAILURE_TYPE in data:\n\t            self.failureType = data.get(FIELD_FAILURE_TYPE)\n"]}
{"filename": "src/saic_ismart_client/ota_v3_0/Message.py", "chunked_list": ["from saic_ismart_client.common_model import ApplicationData, MessageV2, MessageCoderV2, MessageBodyV2\n\tclass MessageBodyV30(MessageBodyV2):\n\t    def __init__(self):\n\t        super().__init__()\n\t    def ack_message_counter_present(self) -> bool:\n\t        return self.ack_message_counter is not None\n\t    def ack_required_present(self) -> bool:\n\t        return self.ack_required is not None\n\t    def application_data_encoding_present(self) -> bool:\n\t        return self.application_data_encoding is not None\n", "    def application_data_length_present(self) -> bool:\n\t        return self.application_data_length is not None\n\t    def application_data_protocol_version_present(self) -> bool:\n\t        return self.application_data_protocol_version is not None\n\t    def dl_message_counter_present(self) -> bool:\n\t        return self.dl_message_counter is not None\n\t    def ul_message_counter_present(self) -> bool:\n\t        return self.ul_message_counter is not None\n\t    def error_message_present(self) -> bool:\n\t        return self.error_message is not None\n", "    def event_id_present(self) -> bool:\n\t        return self.event_id is not None\n\t    def test_flag_present(self) -> bool:\n\t        return self.test_flag is not None\n\t    def token_present(self) -> bool:\n\t        return self.token is not None\n\t    def uid_present(self) -> bool:\n\t        return self.uid is not None\n\t    def vin_present(self) -> bool:\n\t        return self.vin is not None\n", "class MessageV30(MessageV2):\n\t    def __init__(self, body: MessageBodyV30, application_data: ApplicationData = None,\n\t                 reserved: bytes = None):\n\t        super().__init__(body, application_data, reserved)\n\tclass MessageCoderV30(MessageCoderV2):\n\t    def __init__(self):\n\t        super().__init__('ASN.1_schema/v3_0/')\n\t    def encode_request(self, message: MessageV30) -> str:\n\t        return super().encode_request(message)\n\t    def decode_response(self, message: str, decoded_message: MessageV30) -> None:\n", "        super().decode_response(message, decoded_message)\n\t    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n\t                           application_data_protocol_version: int, message_id: int, message: MessageV30) -> None:\n\t        return super().initialize_message(uid, token, vin, application_id, application_data_protocol_version,\n\t                                          message_id, message)\n\t    def get_protocol_version(self) -> int:\n\t        return 48\n"]}
{"filename": "src/saic_ismart_client/ota_v3_0/__init__.py", "chunked_list": []}
{"filename": "src/saic_ismart_client/ota_v3_0/data_model.py", "chunked_list": ["from saic_ismart_client.common_model import ApplicationData, Asn1Type, TargetBatteryCode\n\tclass OtaChrgMangDataResp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgMangDataResp')\n\t        self.bmsReserCtrlDspCmd = None  # INTEGER(0..255),\n\t        self.bmsReserStHourDspCmd = None  # INTEGER(0..255),\n\t        self.bmsReserStMintueDspCmd = None  # INTEGER(0..255),\n\t        self.bmsReserSpHourDspCmd = None  # INTEGER(0..255),\n\t        self.bmsReserSpMintueDspCmd = None  # INTEGER(0..255),\n\t        self.bmsOnBdChrgTrgtSOCDspCmd = None  # INTEGER(0..255),\n", "        self.bms_estd_elec_rng = None  # INTEGER(0..65535),\n\t        self.bmsAltngChrgCrntDspCmd = None  # INTEGER(0..255),\n\t        self.bmsChrgCtrlDspCmd = None  # INTEGER(0..255),\n\t        self.chrgngRmnngTime = None  # INTEGER(0..65535),\n\t        self.chrgngRmnngTimeV = None  # INTEGER(0..255),\n\t        self.bmsChrgOtptCrntReq = None  # INTEGER(0..65535),\n\t        self.bmsChrgOtptCrntReqV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.bmsPackCrnt = None  # INTEGER(0..65535),\n\t        self.bmsPackCrntV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.bmsPackVol = None  # INTEGER(0..65535),\n", "        self.bmsPackSOCDsp = None  # INTEGER(0..65535),\n\t        self.bmsChrgSts = None  # INTEGER(0..255),\n\t        self.bmsChrgSpRsn = None  # INTEGER(0..255),\n\t        self.clstrElecRngToEPT = None  # INTEGER(0..65535),\n\t        self.bmsPTCHeatReqDspCmd = None  # INTEGER(0..255),\n\t        self.bmsPTCHeatResp = None  # INTEGER(0..255) OPTIONAL,\n\t        self.ccuEleccLckCtrlDspCmd = None  # INTEGER(0..255) OPTIONAL,\n\t        self.bmsPTCHeatSpRsn = None  # INTEGER(0..255) OPTIONAL,\n\t        self.bmsDsChrgSpRsn = None  # INTEGER(0..255) OPTIONAL,\n\t        self.disChrgngRmnngTime = None  # INTEGER(0..65535) OPTIONAL,\n", "        self.disChrgngRmnngTimeV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.imcuVehElecRng = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.imcuVehElecRngV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.imcuChrgngEstdElecRng = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.imcuChrgngEstdElecRngV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.imcuDschrgngEstdElecRng = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.imcuDschrgngEstdElecRngV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.chrgngSpdngTime = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.chrgngSpdngTimeV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.chrgngAddedElecRng = None  # INTEGER(0..65535) OPTIONAL,\n", "        self.chrgngAddedElecRngV = None  # INTEGER(0..255) OPTIONAL,\n\t        self.onBdChrgrAltrCrntInptCrnt = None  # INTEGER(0..255) OPTIONAL,\n\t        self.onBdChrgrAltrCrntInptVol = None  # INTEGER(0..255) OPTIONAL,\n\t        self.ccuOnbdChrgrPlugOn = None  # INTEGER(0..255) OPTIONAL,\n\t        self.ccuOffBdChrgrPlugOn = None  # INTEGER(0..255) OPTIONAL,\n\t        self.chrgngDoorPosSts = None  # INTEGER(0..255) OPTIONAL,\n\t        self.chrgngDoorOpenCnd = None  # INTEGER(0..255) OPTIONAL,\n\t        self.chargeStatus = None  # RvsChargingStatus(1),\n\t        self.bmsAdpPubChrgSttnDspCmd = None  # INTEGER(0..255)\n\t    def get_data(self) -> dict:\n", "        data = {\n\t            'bmsReserCtrlDspCmd': self.bmsReserCtrlDspCmd,\n\t            'bmsReserStHourDspCmd': self.bmsReserStHourDspCmd,\n\t            'bmsReserStMintueDspCmd': self.bmsReserStMintueDspCmd,\n\t            'bmsReserSpHourDspCmd': self.bmsReserSpHourDspCmd,\n\t            'bmsReserSpMintueDspCmd': self.bmsReserSpMintueDspCmd,\n\t            'bmsOnBdChrgTrgtSOCDspCmd': self.bmsOnBdChrgTrgtSOCDspCmd,\n\t            'bmsEstdElecRng': self.bms_estd_elec_rng,\n\t            'bmsAltngChrgCrntDspCmd': self.bmsAltngChrgCrntDspCmd,\n\t            'bmsChrgCtrlDspCmd': self.bmsChrgCtrlDspCmd,\n", "            'chrgngRmnngTime': self.chrgngRmnngTime,\n\t            'chrgngRmnngTimeV': self.chrgngRmnngTimeV,\n\t            'bmsChrgOtptCrntReq': self.bmsChrgOtptCrntReq,\n\t            'bmsPackCrnt': self.bmsPackCrnt,\n\t            'bmsPackVol': self.bmsPackVol,\n\t            'bmsPackSOCDsp': self.bmsPackSOCDsp,\n\t            'bmsChrgSts': self.bmsChrgSts,\n\t            'bmsChrgSpRsn': self.bmsChrgSpRsn,\n\t            'clstrElecRngToEPT': self.clstrElecRngToEPT,\n\t            'bmsPTCHeatReqDspCmd': self.bmsPTCHeatReqDspCmd,\n", "            'chargeStatus': self.chargeStatus.get_data(),\n\t            'bmsAdpPubChrgSttnDspCmd': self.bmsAdpPubChrgSttnDspCmd\n\t        }\n\t        self.add_optional_field_to_data(data, 'bmsChrgOtptCrntReqV', self.bmsChrgOtptCrntReqV)\n\t        self.add_optional_field_to_data(data, 'bmsPackCrntV', self.bmsPackCrntV)\n\t        self.add_optional_field_to_data(data, 'bmsPTCHeatResp', self.bmsPTCHeatResp)\n\t        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlDspCmd', self.ccuEleccLckCtrlDspCmd)\n\t        self.add_optional_field_to_data(data, 'bmsPTCHeatSpRsn', self.bmsPTCHeatSpRsn)\n\t        self.add_optional_field_to_data(data, 'bmsDsChrgSpRsn', self.bmsDsChrgSpRsn)\n\t        self.add_optional_field_to_data(data, 'disChrgngRmnngTime', self.disChrgngRmnngTime)\n", "        self.add_optional_field_to_data(data, 'disChrgngRmnngTimeV', self.disChrgngRmnngTimeV)\n\t        self.add_optional_field_to_data(data, 'imcuVehElecRng', self.imcuVehElecRng)\n\t        self.add_optional_field_to_data(data, 'imcuVehElecRngV', self.imcuVehElecRngV)\n\t        self.add_optional_field_to_data(data, 'imcuChrgngEstdElecRng', self.imcuChrgngEstdElecRng)\n\t        self.add_optional_field_to_data(data, 'imcuChrgngEstdElecRngV', self.imcuChrgngEstdElecRngV)\n\t        self.add_optional_field_to_data(data, 'imcuDschrgngEstdElecRng', self.imcuDschrgngEstdElecRng)\n\t        self.add_optional_field_to_data(data, 'imcuDschrgngEstdElecRngV', self.imcuDschrgngEstdElecRngV)\n\t        self.add_optional_field_to_data(data, 'chrgngSpdngTime', self.chrgngSpdngTime)\n\t        self.add_optional_field_to_data(data, 'chrgngSpdngTimeV', self.chrgngSpdngTimeV)\n\t        self.add_optional_field_to_data(data, 'chrgngAddedElecRng', self.chrgngAddedElecRng)\n", "        self.add_optional_field_to_data(data, 'chrgngAddedElecRngV', self.chrgngAddedElecRngV)\n\t        self.add_optional_field_to_data(data, 'onBdChrgrAltrCrntInptCrnt', self.onBdChrgrAltrCrntInptCrnt)\n\t        self.add_optional_field_to_data(data, 'onBdChrgrAltrCrntInptVol', self.onBdChrgrAltrCrntInptVol)\n\t        self.add_optional_field_to_data(data, 'ccuOnbdChrgrPlugOn', self.ccuOnbdChrgrPlugOn)\n\t        self.add_optional_field_to_data(data, 'ccuOffBdChrgrPlugOn', self.ccuOffBdChrgrPlugOn)\n\t        self.add_optional_field_to_data(data, 'chrgngDoorPosSts', self.chrgngDoorPosSts)\n\t        self.add_optional_field_to_data(data, 'chrgngDoorOpenCnd', self.chrgngDoorOpenCnd)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.bmsReserCtrlDspCmd = data.get('bmsReserCtrlDspCmd')\n", "        self.bmsReserStHourDspCmd = data.get('bmsReserStHourDspCmd')\n\t        self.bmsReserStMintueDspCmd = data.get('bmsReserStMintueDspCmd')\n\t        self.bmsReserSpHourDspCmd = data.get('bmsReserSpHourDspCmd')\n\t        self.bmsReserSpMintueDspCmd = data.get('bmsReserSpMintueDspCmd')\n\t        self.bmsOnBdChrgTrgtSOCDspCmd = data.get('bmsOnBdChrgTrgtSOCDspCmd')\n\t        self.bms_estd_elec_rng = data.get('bmsEstdElecRng')\n\t        self.bmsAltngChrgCrntDspCmd = data.get('bmsAltngChrgCrntDspCmd')\n\t        self.bmsChrgCtrlDspCmd = data.get('bmsChrgCtrlDspCmd')\n\t        self.chrgngRmnngTime = data.get('chrgngRmnngTime')\n\t        self.chrgngRmnngTimeV = data.get('chrgngRmnngTimeV')\n", "        self.bmsChrgOtptCrntReq = data.get('bmsChrgOtptCrntReq')\n\t        self.bmsChrgOtptCrntReqV = data.get('bmsChrgOtptCrntReqV')\n\t        self.bmsPackCrnt = data.get('bmsPackCrnt')\n\t        self.bmsPackCrntV = data.get('bmsPackCrntV')\n\t        self.bmsPackVol = data.get('bmsPackVol')\n\t        self.bmsPackSOCDsp = data.get('bmsPackSOCDsp')\n\t        self.bmsChrgSts = data.get('bmsChrgSts')\n\t        self.bmsChrgSpRsn = data.get('bmsChrgSpRsn')\n\t        self.clstrElecRngToEPT = data.get('clstrElecRngToEPT')\n\t        self.bmsPTCHeatReqDspCmd = data.get('bmsPTCHeatReqDspCmd')\n", "        self.bmsPTCHeatResp = data.get('bmsPTCHeatResp')\n\t        self.ccuEleccLckCtrlDspCmd = data.get('ccuEleccLckCtrlDspCmd')\n\t        self.bmsPTCHeatSpRsn = data.get('bmsPTCHeatSpRsn')\n\t        self.bmsDsChrgSpRsn = data.get('bmsDsChrgSpRsn')\n\t        self.disChrgngRmnngTime = data.get('disChrgngRmnngTime')\n\t        self.disChrgngRmnngTimeV = data.get('disChrgngRmnngTimeV')\n\t        self.imcuVehElecRng = data.get('imcuVehElecRng')\n\t        self.imcuVehElecRngV = data.get('imcuVehElecRngV')\n\t        self.imcuChrgngEstdElecRng = data.get('imcuChrgngEstdElecRng')\n\t        self.imcuChrgngEstdElecRngV = data.get('imcuChrgngEstdElecRngV')\n", "        self.imcuDschrgngEstdElecRng = data.get('imcuDschrgngEstdElecRng')\n\t        self.imcuDschrgngEstdElecRngV = data.get('imcuDschrgngEstdElecRngV')\n\t        self.chrgngSpdngTime = data.get('chrgngSpdngTime')\n\t        self.chrgngSpdngTimeV = data.get('chrgngSpdngTimeV')\n\t        self.chrgngAddedElecRng = data.get('chrgngAddedElecRng')\n\t        self.chrgngAddedElecRngV = data.get('chrgngAddedElecRngV')\n\t        self.onBdChrgrAltrCrntInptCrnt = data.get('onBdChrgrAltrCrntInptCrnt')\n\t        self.onBdChrgrAltrCrntInptVol = data.get('onBdChrgrAltrCrntInptVol')\n\t        self.ccuOnbdChrgrPlugOn = data.get('ccuOnbdChrgrPlugOn')\n\t        self.ccuOffBdChrgrPlugOn = data.get('ccuOffBdChrgrPlugOn')\n", "        self.chrgngDoorPosSts = data.get('chrgngDoorPosSts')\n\t        self.chrgngDoorOpenCnd = data.get('chrgngDoorOpenCnd')\n\t        self.chargeStatus = RvsChargingStatus()\n\t        self.chargeStatus.init_from_dict(data.get('chargeStatus'))\n\t        self.bmsAdpPubChrgSttnDspCmd = data.get('bmsAdpPubChrgSttnDspCmd')\n\t    def get_current(self) -> float:\n\t        return self.bmsPackCrnt * 0.05 - 1000.0\n\t    def get_voltage(self) -> float:\n\t        return self.bmsPackVol * 0.25\n\t    def get_power(self) -> float:\n", "        return self.get_current() * self.get_voltage() / 1000.0\n\t    def get_charge_target_soc(self) -> TargetBatteryCode | None:\n\t        raw_target_soc = self.bmsOnBdChrgTrgtSOCDspCmd\n\t        try:\n\t            return TargetBatteryCode(raw_target_soc)\n\t        except ValueError:\n\t            return None\n\tclass RvsChargingStatus(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('RvsChargingStatus')\n", "        self.real_time_power = None  # INTEGER(0..65535),\n\t        self.charging_gun_state = None  # BOOLEAN,\n\t        self.fuel_Range_elec = None  # INTEGER(0..65535),\n\t        self.charging_type = None  # INTEGER(0..255),\n\t        self.start_time = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.end_time = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.charging_pile_id = None  # IA5String(SIZE(0..64)) OPTIONAL,\n\t        self.charging_pile_supplier = None  # IA5String(SIZE(0..64)) OPTIONAL,\n\t        self.working_current = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.working_voltage = None  # INTEGER(0..65535) OPTIONAL,\n", "        self.mileage_since_last_charge = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.power_usage_since_last_charge = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.mileage_of_day = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.power_usage_of_day = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.static_energy_consumption = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.charging_electricity_phase = None  # INTEGER(0..255) OPTIONAL,\n\t        self.charging_duration = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.last_charge_ending_power = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.total_battery_capacity = None  # INTEGER(0..65535) OPTIONAL,\n\t        self.fota_lowest_voltage = None  # INTEGER(0..255) OPTIONAL,\n", "        self.mileage = None  # INTEGER(0..2147483647),\n\t        self.extended_data1 = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.extended_data2 = None  # INTEGER(0..2147483647) OPTIONAL,\n\t        self.extended_data3 = None  # IA5String(SIZE(0..1024)) OPTIONAL,\n\t        self.extended_data4 = None  # IA5String(SIZE(0..1024)) OPTIONAL\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'realtimePower': self.real_time_power,\n\t            'chargingGunState': self.charging_gun_state,\n\t            'fuelRangeElec': self.fuel_Range_elec,\n", "            'chargingType': self.charging_type,\n\t            'mileage': self.mileage\n\t        }\n\t        self.add_optional_field_to_data(data, 'startTime', self.start_time)\n\t        self.add_optional_field_to_data(data, 'endTime', self.end_time)\n\t        self.add_optional_field_to_data(data, 'chargingPileID', self.charging_pile_id)\n\t        self.add_optional_field_to_data(data, 'chargingPileSupplier', self.charging_pile_supplier)\n\t        self.add_optional_field_to_data(data, 'workingCurrent', self.working_current)\n\t        self.add_optional_field_to_data(data, 'workingVoltage', self.working_voltage)\n\t        self.add_optional_field_to_data(data, 'mileageSinceLastCharge', self.mileage_since_last_charge)\n", "        self.add_optional_field_to_data(data, 'powerUsageSinceLastCharge', self.power_usage_since_last_charge)\n\t        self.add_optional_field_to_data(data, 'mileageOfDay', self.mileage_of_day)\n\t        self.add_optional_field_to_data(data, 'powerUsageOfDay', self.power_usage_of_day)\n\t        self.add_optional_field_to_data(data, 'staticEnergyConsumption', self.static_energy_consumption)\n\t        self.add_optional_field_to_data(data, 'chargingElectricityPhase', self.charging_electricity_phase)\n\t        self.add_optional_field_to_data(data, 'chargingDuration', self.charging_duration)\n\t        self.add_optional_field_to_data(data, 'lastChargeEndingPower', self.last_charge_ending_power)\n\t        self.add_optional_field_to_data(data, 'totalBatteryCapacity', self.total_battery_capacity)\n\t        self.add_optional_field_to_data(data, 'fotaLowestVoltage', self.fota_lowest_voltage)\n\t        self.add_optional_field_to_data(data, 'extendedData1', self.extended_data1)\n", "        self.add_optional_field_to_data(data, 'extendedData2', self.extended_data2)\n\t        self.add_optional_field_to_data(data, 'extendedData3', self.extended_data3)\n\t        self.add_optional_field_to_data(data, 'extendedData4', self.extended_data4)\n\t        return data\n\t    def init_from_dict(self, data: dict) -> None:\n\t        self.real_time_power = data.get('realtimePower')\n\t        self.charging_gun_state = data.get('chargingGunState')\n\t        self.fuel_Range_elec = data.get('fuelRangeElec')\n\t        self.charging_type = data.get('chargingType')\n\t        self.start_time = data.get('startTime')\n", "        self.end_time = data.get('endTime')\n\t        self.charging_pile_id = data.get('chargingPileID')\n\t        self.charging_pile_supplier = data.get('chargingPileSupplier')\n\t        self.working_current = data.get('workingCurrent')\n\t        self.working_voltage = data.get('workingVoltage')\n\t        self.mileage_since_last_charge = data.get('mileageSinceLastCharge')\n\t        self.power_usage_since_last_charge = data.get('powerUsageSinceLastCharge')\n\t        self.mileage_of_day = data.get('mileageOfDay')\n\t        self.power_usage_of_day = data.get('powerUsageOfDay')\n\t        self.static_energy_consumption = data.get('staticEnergyConsumption')\n", "        self.charging_electricity_phase = data.get('chargingElectricityPhase')\n\t        self.charging_duration = data.get('chargingDuration')\n\t        self.last_charge_ending_power = data.get('lastChargeEndingPower')\n\t        self.total_battery_capacity = data.get('totalBatteryCapacity')\n\t        self.fota_lowest_voltage = data.get('fotaLowestVoltage')\n\t        self.mileage = data.get('mileage')\n\t        self.extended_data1 = data.get('extendedData1')\n\t        self.extended_data2 = data.get('extendedData2')\n\t        self.extended_data3 = data.get('extendedData3')\n\t        self.extended_data4 = data.get('extendedData4')\n", "class OtaChrgCtrlReq(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgCtrlReq')\n\t        self.chrgCtrlReq = None\n\t        self.tboxV2XReq = None\n\t        self.tboxEleccLckCtrlReq = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'chrgCtrlReq': self.chrgCtrlReq,\n\t            'tboxV2XReq': self.tboxV2XReq,\n", "            'tboxEleccLckCtrlReq': self.tboxEleccLckCtrlReq,\n\t        }\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.chrgCtrlReq = data.get('chrgCtrlReq')\n\t        self.tboxV2XReq = data.get('tboxV2XReq')\n\t        self.tboxEleccLckCtrlReq = data.get('tboxEleccLckCtrlReq')\n\tclass OtaChrgCtrlStsResp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgCtrlStsResp')\n", "        self.chrgCtrlDspCmd = None\n\t        self.chrgCtrlResp = None\n\t        self.bmsDsChrgCtrlDspCmd = None\n\t        self.bmsDsChrgCtrlResp = None\n\t        self.ccuEleccLckCtrlDspCmd = None\n\t        self.ccuEleccLckCtrlResp = None\n\t        self.rvcReqSts = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'chrgCtrlDspCmd': self.chrgCtrlDspCmd,\n", "            'chrgCtrlResp': self.chrgCtrlResp,\n\t        }\n\t        self.add_optional_field_to_data(data, 'bmsDsChrgCtrlDspCmd', self.bmsDsChrgCtrlDspCmd)\n\t        self.add_optional_field_to_data(data, 'bmsDsChrgCtrlResp', self.bmsDsChrgCtrlResp)\n\t        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlDspCmd', self.ccuEleccLckCtrlDspCmd)\n\t        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlResp', self.ccuEleccLckCtrlResp)\n\t        self.add_optional_field_to_data(data, 'rvcReqSts', self.rvcReqSts)\n\t        return data\n\tclass OtaChrgRsvanReq(ApplicationData):\n\t    def __init__(self):\n", "        super().__init__('OTAChrgRsvanReq')\n\t        self.rsvanStHour = None\n\t        self.rsvanStMintu = None\n\t        self.rsvanSpHour = None\n\t        self.rsvanSpMintu = None\n\t        self.tboxReserCtrlReq = None\n\t        self.tboxAdpPubChrgSttnReq = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'rsvanStHour': self.rsvanStHour,\n", "            'rsvanStMintu': self.rsvanStMintu,\n\t            'rsvanSpHour': self.rsvanSpHour,\n\t            'rsvanSpMintu': self.rsvanSpMintu,\n\t            'tboxReserCtrlReq': self.tboxReserCtrlReq,\n\t            'tboxAdpPubChrgSttnReq': self.tboxAdpPubChrgSttnReq\n\t        }\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.rsvanStHour = data.get('rsvanStHour')\n\t        self.rsvanStMintu = data.get('rsvanStMintu')\n", "        self.rsvanSpHour = data.get('rsvanSpHour')\n\t        self.rsvanSpMintu = data.get('rsvanSpMintu')\n\t        self.tboxReserCtrlReq = data.get('tboxReserCtrlReq')\n\t        self.tboxAdpPubChrgSttnReq = data.get('tboxAdpPubChrgSttnReq')\n\tclass OtaChrgRsvanResp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgRsvanResp')\n\t        self.rvcReqSts = None\n\t        self.bmsReserCtrlDspCmd = None\n\t        self.bmsReserStHourDspCmd = None\n", "        self.bmsReserStMintueDspCmd = None\n\t        self.bmsReserSpHourDspCmd = None\n\t        self.bmsReserSpMintueDspCmd = None\n\t        self.bmsAdpPubChrgSttnDspCmd = None\n\t        self.bmsReserChrCtrlResp = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'rvcReqSts': self.rvcReqSts,\n\t            'bmsReserCtrlDspCmd': self.bmsReserCtrlDspCmd,\n\t            'bmsReserStHourDspCmd': self.bmsReserStHourDspCmd,\n", "            'bmsReserStMintueDspCmd': self.bmsReserStMintueDspCmd,\n\t            'bmsReserSpHourDspCmd': self.bmsReserSpHourDspCmd,\n\t            'bmsReserSpMintueDspCmd': self.bmsReserSpMintueDspCmd,\n\t            'bmsAdpPubChrgSttnDspCmd': self.bmsAdpPubChrgSttnDspCmd,\n\t        }\n\t        self.add_optional_field_to_data(data, 'bmsReserChrCtrlResp', self.bmsReserChrCtrlResp)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.rvcReqSts = data.get('rvcReqSts')\n\t        self.bmsReserCtrlDspCmd = data.get('bmsReserCtrlDspCmd')\n", "        self.bmsReserStHourDspCmd = data.get('bmsReserStHourDspCmd')\n\t        self.bmsReserStMintueDspCmd = data.get('bmsReserStMintueDspCmd')\n\t        self.bmsReserSpHourDspCmd = data.get('bmsReserSpHourDspCmd')\n\t        self.bmsReserSpMintueDspCmd = data.get('bmsReserSpMintueDspCmd')\n\t        self.bmsAdpPubChrgSttnDspCmd = data.get('bmsAdpPubChrgSttnDspCmd')\n\t        self.bmsReserChrCtrlResp = data.get('bmsReserChrCtrlResp')\n\tclass OtaChrgSetngReq(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgSetngReq')\n\t        self.onBdChrgTrgtSOCReq = None\n", "        self.altngChrgCrntReq = None\n\t        self.tboxV2XSpSOCReq = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'onBdChrgTrgtSOCReq': self.onBdChrgTrgtSOCReq,\n\t            'altngChrgCrntReq': self.altngChrgCrntReq,\n\t            'tboxV2XSpSOCReq': self.tboxV2XSpSOCReq\n\t        }\n\t        return data\n\t    def init_from_dict(self, data: dict):\n", "        self.onBdChrgTrgtSOCReq = data.get('onBdChrgTrgtSOCReq')\n\t        self.altngChrgCrntReq = data.get('altngChrgCrntReq')\n\t        self.tboxV2XSpSOCReq = data.get('tboxV2XSpSOCReq')\n\tclass OtaChrgSetngResp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('OTAChrgSetngResp')\n\t        self.rvcReqSts = None\n\t        self.bmsOnBdChrgTrgtSOCDspCmd = None\n\t        self.bmsChrgTrgtSOCResp = None\n\t        self.bmsEstdElecRng = None\n", "        self.bmsAltngChrgCrntDspCmd = None\n\t        self.bmsPackCrnt = None\n\t        self.bmsAltngChrgCrntResp = None\n\t        self.imcuDschrgTrgtSOCDspCmd = None\n\t        self.imcuDschrgTrgtSOCResp = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'rvcReqSts': self.rvcReqSts,\n\t            'bmsOnBdChrgTrgtSOCDspCmd': self.bmsOnBdChrgTrgtSOCDspCmd,\n\t            'bmsChrgTrgtSOCResp': self.bmsChrgTrgtSOCResp,\n", "            'bmsEstdElecRng': self.bmsEstdElecRng,\n\t            'bmsAltngChrgCrntDspCmd': self.bmsAltngChrgCrntDspCmd,\n\t            'bmsPackCrnt': self.bmsPackCrnt,\n\t            'bmsAltngChrgCrntResp': self.bmsAltngChrgCrntResp\n\t        }\n\t        self.add_optional_field_to_data(data, 'imcuDschrgTrgtSOCDspCmd', self.imcuDschrgTrgtSOCDspCmd)\n\t        self.add_optional_field_to_data(data, 'imcuDschrgTrgtSOCResp', self.imcuDschrgTrgtSOCResp)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.rvcReqSts = data.get('rvcReqSts')\n", "        self.bmsOnBdChrgTrgtSOCDspCmd = data.get('bmsOnBdChrgTrgtSOCDspCmd')\n\t        self.bmsChrgTrgtSOCResp = data.get('bmsChrgTrgtSOCResp')\n\t        self.bmsEstdElecRng = data.get('bmsEstdElecRng')\n\t        self.bmsAltngChrgCrntDspCmd = data.get('bmsAltngChrgCrntDspCmd')\n\t        self.bmsPackCrnt = data.get('bmsPackCrnt')\n\t        self.bmsAltngChrgCrntResp = data.get('bmsAltngChrgCrntResp')\n\t        self.imcuDschrgTrgtSOCDspCmd = data.get('imcuDschrgTrgtSOCDspCmd')\n\t        self.imcuDschrgTrgtSOCResp = data.get('imcuDschrgTrgtSOCResp')\n\tclass OtaChrgHeatReq(ApplicationData):\n\t    def __init__(self):\n", "        super().__init__('OTAChrgHeatReq')\n\t        self.ptcHeatReq = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'ptcHeatReq': self.ptcHeatReq\n\t        }\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.ptcHeatReq = data.get('ptcHeatReq')\n\tclass OtaChrgHeatResp(ApplicationData):\n", "    def __init__(self):\n\t        super().__init__('OTAChrgHeatResp')\n\t        self.ptcHeatReqDspCmd = None\n\t        self.ptcHeatResp = None\n\t        self.rvcReqSts = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            'ptcHeatReqDspCmd': self.ptcHeatReqDspCmd,\n\t            'ptcHeatResp': self.ptcHeatResp,\n\t            'rvcReqSts': self.rvcReqSts\n", "        }\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.ptcHeatReqDspCmd = data.get('ptcHeatReqDspCmd')\n\t        self.ptcHeatResp = data.get('ptcHeatResp')\n\t        self.rvcReqSts = data.get('rvcReqSts')\n"]}
{"filename": "src/saic_ismart_client/ota_v1_1/Message.py", "chunked_list": ["from saic_ismart_client.common_model import MessageCoderV1\n\tfrom saic_ismart_client.ota_v1_1.data_model import MessageV11\n\tclass MessageCoderV11(MessageCoderV1):\n\t    def __init__(self):\n\t        super().__init__('ASN.1_schema/v1_1/')\n\t    def encode_request(self, message: MessageV11) -> str:\n\t        return super().encode_request(message)\n\t    def decode_response(self, message: str, decoded_message: MessageV11) -> None:\n\t        super().decode_response(message, decoded_message)\n\t    def initialize_message(self, uid: str, token: str, application_id: str,\n", "                           application_data_protocol_version: int, message_id: int, message: MessageV11,\n\t                           vin: str = None):\n\t        super().initialize_message(uid, token, vin, application_id, application_data_protocol_version, message_id,\n\t                                   message)\n"]}
{"filename": "src/saic_ismart_client/ota_v1_1/__init__.py", "chunked_list": []}
{"filename": "src/saic_ismart_client/ota_v1_1/data_model.py", "chunked_list": ["import datetime\n\tfrom enum import Enum\n\tfrom saic_ismart_client.common_model import Asn1Type, ApplicationData, MessageBodyV1, MessageV1, Header\n\tFIELD_ACTION_TYPE = 'actionType'\n\tFIELD_SECONDS = 'seconds'\n\tFIELD_MESSAGE_TIME = 'messageTime'\n\tFIELD_FUNCTION_SWITCH = 'functionSwitch'\n\tFIELD_ALARM_SWITCH = 'alarmSwitch'\n\tFIELD_ALARM_SETTING_TYPE = 'alarmSettingType'\n\tFIELD_DESCRIPTION = 'description'\n", "FIELD_ALARM_SWITCH_LIST = 'alarmSwitchList'\n\tFIELD_PIN = 'pin'\n\tFIELD_TBOX_SIM_NO = 'tboxSimNo'\n\tFIELD_MODEL_CONF_JSON = 'modelConfigurationJsonStr'\n\tFIELD_COLOR_NAME = 'colorName'\n\tFIELD_MODEL_YEAR = 'modelYear'\n\tFIELD_CURRENT_VEHICLE = 'isCurrentVehicle'\n\tFIELD_VEHICLE_PHOTO = 'vehiclePhoto'\n\tFIELD_BIND_TIME = 'bindTime'\n\tFIELD_ACTIVE = 'isAcivate'\n", "FIELD_MODEL_NAME = 'modelName'\n\tFIELD_BRAND_NAME = 'brandName'\n\tFIELD_SERIES = 'series'\n\tFIELD_NAME = 'name'\n\tFIELD_VIN = 'vin'\n\tFIELD_LANGUAGE_TYPE = 'languageType'\n\tFIELD_USER_NAME = 'userName'\n\tFIELD_USER_PHOTO = 'userPhoto'\n\tFIELD_VIN_LIST = 'vinList'\n\tFIELD_TOKEN_EXPIRATION = 'tokenExpiration'\n", "FIELD_REFRESH_TOKEN = 'refreshToken'\n\tFIELD_TOKEN = 'token'\n\tFIELD_DEVICE_ID = 'deviceId'\n\tFIELD_PASSWORD = 'password'\n\tFIELD_READ_STATUS = 'readStatus'\n\tFIELD_MESSAGE_GROUP = 'messageGroup'\n\tFIELD_CONTENT_ID = 'contentId'\n\tFIELD_END_NUMBER = 'endNumber'\n\tFIELD_START_NUMBER = 'startNumber'\n\tFIELD_CONTENT = 'content'\n", "FIELD_CONTENT_ID_LIST = 'contentIdList'\n\tFIELD_SENDER = 'sender'\n\tFIELD_TITLE = 'title'\n\tFIELD_MESSAGE_TYPE = 'messageType'\n\tFIELD_MESSAGE_ID = 'messageId'\n\tFIELD_MESSAGES = 'messages'\n\tFIELD_RECORDS_NUMBER = 'recordsNumber'\n\tFIELD_START_END_NUMBER = 'startEndNumber'\n\tclass MessageBodyV11(MessageBodyV1):\n\t    def __init__(self):\n", "        super().__init__('MPDispatcherBody')\n\t    def get_data(self) -> dict:\n\t        return super().get_data()\n\t    def init_from_dict(self, data: dict):\n\t        super().init_from_dict(data)\n\tclass AlarmSwitchReq(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('AlarmSwitchReq')\n\t        self.pin = None\n\t        self.alarm_switch_list = []\n", "        self.description = None\n\t    def get_data(self) -> dict:\n\t        alarm_switch_list = []\n\t        for alarm_switch in self.alarm_switch_list:\n\t            alarm_switch_list.append(alarm_switch.get_data())\n\t        data = {\n\t            FIELD_PIN: self.pin,\n\t            FIELD_ALARM_SWITCH_LIST: alarm_switch_list\n\t        }\n\t        self.add_optional_field_to_data(data, FIELD_DESCRIPTION, self.description)\n", "        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.pin = data.get(FIELD_PIN)\n\t        alarm_switch_list = data.get(FIELD_ALARM_SWITCH_LIST)\n\t        for item in alarm_switch_list:\n\t            alarm_switch = AlarmSwitch()\n\t            alarm_switch.init_from_dict(item)\n\t            self.alarm_switch_list.append(alarm_switch)\n\t        self.description = data.get(FIELD_DESCRIPTION)\n\tclass AlarmSwitch(Asn1Type):\n", "    def __init__(self):\n\t        super().__init__('AlarmSwitch')\n\t        self.alarm_setting_type = None\n\t        self.alarm_switch = None\n\t        self.function_switch = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_ALARM_SETTING_TYPE: self.alarm_setting_type,\n\t            FIELD_ALARM_SWITCH: self.alarm_switch,\n\t            FIELD_FUNCTION_SWITCH: self.function_switch\n", "        }\n\t    def init_from_dict(self, data: dict):\n\t        self.alarm_setting_type = data.get(FIELD_ALARM_SETTING_TYPE)\n\t        self.alarm_switch = data.get(FIELD_ALARM_SWITCH)\n\t        self.function_switch = data.get(FIELD_FUNCTION_SWITCH)\n\tclass MpUserInfoRsp(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('MPUserInfoResp')\n\t        self.nick_name = None\n\t        self.address = None\n", "        self.mobile_phone = None\n\t        self.emergency_name = None\n\t        self.emergency_mobile = None\n\t        self.user_photo = None\n\t        self.gender = None\n\t        self.birthday = None\n\t        self.language_type = None\n\t        self.real_name = None\n\t        self.the_second_level_country_code = None\n\t        self.the_third_level_country_code = None\n", "        self.the_second_level_country_name = None\n\t        self.the_third_level_country_name = None\n\t        self.email = None\n\tclass MpUserLoggingInReq(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('MPUserLoggingInReq')\n\t        self.password = None\n\t        self.device_id = None\n\t    def get_data(self) -> dict:\n\t        data = {FIELD_PASSWORD: self.password}\n", "        if self.device_id is not None:\n\t            data[FIELD_DEVICE_ID] = self.device_id\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.password = data.get(FIELD_PASSWORD)\n\t        self.device_id = data.get(FIELD_DEVICE_ID)\n\tclass MpUserLoggingInRsp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('MPUserLoggingInResp')\n\t        self.token = None\n", "        self.refresh_token = None\n\t        self.token_expiration = None\n\t        self.vin_list = []\n\t        self.user_photo = None\n\t        self.user_name = None\n\t        self.language_type = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_USER_NAME: self.user_name\n\t        }\n", "        self.add_optional_field_to_data(data, FIELD_TOKEN, self.token)\n\t        self.add_optional_field_to_data(data, FIELD_REFRESH_TOKEN, self.refresh_token)\n\t        if self.token_expiration is not None:\n\t            data[FIELD_TOKEN_EXPIRATION] = self.token_expiration.get_data()\n\t        if self.vin_list is not None:\n\t            vin_list = []\n\t            for item in self.vin_list:\n\t                vin_list.append(item.get_data())\n\t            data[FIELD_VIN_LIST] = vin_list\n\t        self.add_optional_field_to_data(data, FIELD_USER_PHOTO, self.user_photo)\n", "        if self.language_type is not None:\n\t            data[FIELD_LANGUAGE_TYPE] = self.language_type\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.token = data.get(FIELD_TOKEN)\n\t        self.refresh_token = data.get(FIELD_REFRESH_TOKEN)\n\t        if FIELD_TOKEN_EXPIRATION in data:\n\t            self.token_expiration = Timestamp()\n\t            self.token_expiration.init_from_dict(data.get(FIELD_TOKEN_EXPIRATION))\n\t        if FIELD_VIN_LIST in data:\n", "            vin_list = data.get(FIELD_VIN_LIST)\n\t            for item in vin_list:\n\t                vin_info = VinInfo()\n\t                vin_info.init_from_dict(item)\n\t                self.vin_list.append(vin_info)\n\t        self.user_photo = data.get(FIELD_USER_PHOTO)\n\t        self.user_name = data.get(FIELD_USER_NAME)\n\t        self.language_type = data.get(FIELD_LANGUAGE_TYPE)\n\tclass Timestamp(Asn1Type):\n\t    def __init__(self):\n", "        super().__init__('Timestamp')\n\t        self.seconds = -1\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_SECONDS: self.seconds\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.seconds = data.get(FIELD_SECONDS)\n\t    def get_timestamp(self) -> datetime:\n\t        return datetime.datetime.fromtimestamp(self.seconds)\n", "class AppUpgradeInfoReq(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('APPUpgradeInfoReq')\n\t        self.app_type = None\n\t        self.app_version = None\n\tclass AppUpgradeInfoRsp(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('APPUpgradeInfoResp')\n\t        self.has_new_version = None\n\t        self.app_version = None\n", "        self.force_update = None\n\t        self.update_url = None\n\t        self.update_info_en = None\n\t        self.update_info_th = None\n\tclass MpAppAttributeRsp(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('MPAppAttributeResp')\n\t        self.data_app_attribute = None\n\tclass AdvertiseRsp(Asn1Type):\n\t    def __init__(self):\n", "        super().__init__('AdvertiseResp')\n\t        self.advertise_version = None\n\t        self.advertises = []\n\tclass VinInfo(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('VinInfo')\n\t        self.vin = None\n\t        self.name = None\n\t        self.series = None\n\t        self.brand_name = None\n", "        self.model_name = None\n\t        self.vehicle_photo = None\n\t        self.active = None\n\t        self.current_vehicle = None\n\t        self.model_year = None\n\t        self.color_name = None\n\t        self.model_configuration_json_str = None\n\t        self.bind_time = None\n\t        self.tbox_sim_no = None\n\t    def get_data(self) -> dict:\n", "        data = {\n\t            FIELD_VIN: self.vin,\n\t            FIELD_SERIES: self.series,\n\t            FIELD_BRAND_NAME: self.brand_name,\n\t            FIELD_MODEL_NAME: self.model_name,\n\t            FIELD_ACTIVE: self.active\n\t        }\n\t        self.add_optional_field_to_data(data, FIELD_NAME, self.name)\n\t        self.add_optional_field_to_data(data, FIELD_VEHICLE_PHOTO, self.vehicle_photo)\n\t        self.add_optional_field_to_data(data, FIELD_CURRENT_VEHICLE, self.current_vehicle)\n", "        self.add_optional_field_to_data(data, FIELD_MODEL_YEAR, self.model_year)\n\t        self.add_optional_field_to_data(data, FIELD_COLOR_NAME, self.color_name)\n\t        self.add_optional_field_to_data(data, FIELD_MODEL_CONF_JSON, self.model_configuration_json_str)\n\t        self.add_optional_field_to_data(data, FIELD_BIND_TIME, self.bind_time)\n\t        self.add_optional_field_to_data(data, FIELD_TBOX_SIM_NO, self.tbox_sim_no)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n\t        self.vin = data.get(FIELD_VIN)\n\t        self.name = data.get(FIELD_NAME)\n\t        self.series = data.get(FIELD_SERIES)\n", "        self.brand_name = data.get(FIELD_BRAND_NAME)\n\t        self.model_name = data.get(FIELD_MODEL_NAME)\n\t        self.vehicle_photo = data.get(FIELD_VEHICLE_PHOTO)\n\t        self.active = data.get(FIELD_ACTIVE)\n\t        self.current_vehicle = data.get(FIELD_CURRENT_VEHICLE)\n\t        self.model_year = data.get(FIELD_MODEL_YEAR)\n\t        self.color_name = data.get(FIELD_COLOR_NAME)\n\t        self.model_configuration_json_str = data.get(FIELD_MODEL_CONF_JSON)\n\t        self.bind_time = data.get(FIELD_BIND_TIME)\n\t        self.tbox_sim_no = data.get(FIELD_TBOX_SIM_NO)\n", "class MpAlarmSettingType(Enum):\n\t    ABNORMAL = 'abnormal'\n\t    MOVING = 'moving'\n\t    REGION = 'region'\n\t    ENGINE_START = 'engineStart'\n\t    START_VEHICLE_STATUS = 'startVehicleStatus'\n\t    OFF_CAR = 'offCar'\n\t    SPEEDING = 'speeding'\n\tclass MessageListReq(ApplicationData):\n\t    def __init__(self):\n", "        super().__init__('MessageListReq')\n\t        self.start_end_number = None\n\t        self.message_group = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_START_END_NUMBER: self.start_end_number.get_data()\n\t        }\n\t        self.add_optional_field_to_data(data, FIELD_MESSAGE_GROUP, self.message_group)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n", "        self.start_end_number = StartEndNumber()\n\t        self.start_end_number.init_from_dict(data.get(FIELD_START_END_NUMBER))\n\tclass AbortSendMessageReq(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('AbortSendMessageReq')\n\t        self.messages = []  # SEQUENCE SIZE(1..256) OF Message OPTIONAL\n\t        self.message_id = -1  # INTEGER(0..281474976710655) OPTIONAL\n\t        self.action_type = ''  # IA5String(SIZE(1..20)) OPTIONAL\n\t    def get_data(self) -> dict:\n\t        data = {}\n", "        if len(self.messages) > 0:\n\t            message_list = []\n\t            for message in self.messages:\n\t                message_list.append(message.get_data())\n\t            data[FIELD_MESSAGES] = message_list\n\t        if self.message_id != -1:\n\t            data[FIELD_MESSAGE_ID] = self.message_id\n\t        if len(self.action_type) > 0:\n\t            data[FIELD_ACTION_TYPE] = self.action_type\n\t        return data\n", "    def init_from_dict(self, data: dict):\n\t        if FIELD_MESSAGES in data:\n\t            for msg in data[FIELD_MESSAGES]:\n\t                message = Message()\n\t                message.init_from_dict(msg)\n\t                self.messages.append(message)\n\t        if FIELD_MESSAGE_ID in data:\n\t            self.message_id = data[FIELD_MESSAGE_ID]\n\t        if FIELD_ACTION_TYPE in data:\n\t            self.action_type = data[FIELD_ACTION_TYPE]\n", "class Message(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('Message')\n\t        self.message_id = None\n\t        self.message_type = None\n\t        self.title = None\n\t        self.message_time = None\n\t        self.sender = None\n\t        self.content_id_list = None\n\t        self.content = None\n", "        self.read_status = None\n\t        self.vin = None\n\t    def get_data(self) -> dict:\n\t        data = {\n\t            FIELD_MESSAGE_ID: self.message_id,\n\t            FIELD_MESSAGE_TYPE: self.message_type,\n\t            FIELD_TITLE: self.title.decode(),\n\t            FIELD_MESSAGE_TIME: self.message_time.get_data(),\n\t            FIELD_SENDER: self.sender\n\t        }\n", "        if self.content_id_list is not None:\n\t            content_id_list = []\n\t            for item in self.content_id_list:\n\t                content_id_list.append(item.get_data())\n\t            data[FIELD_CONTENT_ID] = content_id_list\n\t        self.add_optional_field_to_data(data, FIELD_CONTENT, self.content)\n\t        self.add_optional_field_to_data(data, FIELD_READ_STATUS, self.read_status)\n\t        self.add_optional_field_to_data(data, FIELD_VIN, self.vin)\n\t        return data\n\t    def init_from_dict(self, data: dict):\n", "        self.message_id = data.get(FIELD_MESSAGE_ID)\n\t        self.message_type = data.get(FIELD_MESSAGE_TYPE)\n\t        self.title = data.get(FIELD_TITLE)\n\t        self.message_time = Timestamp()\n\t        self.message_time.init_from_dict(data.get(FIELD_MESSAGE_TIME))\n\t        self.sender = data.get(FIELD_SENDER)\n\t        if FIELD_CONTENT_ID in data:\n\t            self.content_id_list = []\n\t            for item in data.get(FIELD_CONTENT_ID):\n\t                content_id = ContentId()\n", "                content_id.init_from_dict(item)\n\t                self.content_id_list.append(content_id)\n\t        self.read_status = data.get(FIELD_READ_STATUS)\n\t        self.vin = data.get(FIELD_VIN)\n\tclass MessageListResp(ApplicationData):\n\t    def __init__(self):\n\t        super().__init__('MessageListResp')\n\t        self.records_number = 0\n\t        self.messages = []\n\t    def get_data(self) -> dict:\n", "        messages = []\n\t        for item in self.messages:\n\t            messages.append(item.get_data())\n\t        return {\n\t            FIELD_RECORDS_NUMBER: self.records_number,\n\t            FIELD_MESSAGES: messages\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        records_number = data.get(FIELD_RECORDS_NUMBER)\n\t        if records_number > 0:\n", "            messages = data.get(FIELD_MESSAGES)\n\t            for item in messages:\n\t                message = Message()\n\t                message.init_from_dict(item)\n\t                self.add_message(message)\n\t    def add_message(self, message: Message):\n\t        self.messages.append(message)\n\t        self.records_number += 1\n\tclass StartEndNumber(Asn1Type):\n\t    def __init__(self):\n", "        super().__init__('StartEndNumber')\n\t        self.start_number = None\n\t        self.end_number = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_START_NUMBER: self.start_number,\n\t            FIELD_END_NUMBER: self.end_number\n\t        }\n\t    def init_from_dict(self, data: dict):\n\t        self.start_number = data.get(FIELD_START_NUMBER)\n", "        self.end_number = data.get(FIELD_END_NUMBER)\n\tclass ContentId(Asn1Type):\n\t    def __init__(self):\n\t        super().__init__('ContentId')\n\t        self.content_id = None\n\t    def get_data(self) -> dict:\n\t        return {\n\t            FIELD_CONTENT_ID: self.content_id\n\t        }\n\t    def init_from_dict(self, data: dict):\n", "        self.content_id = data.get(FIELD_CONTENT_ID)\n\tclass MessageV11(MessageV1):\n\t    def __init__(self, header: Header, body: MessageBodyV11, application_data: ApplicationData = None):\n\t        super().__init__(header, body, application_data)\n"]}
{"filename": "src/saic_ismart_client/rest_v2/model.py", "chunked_list": ["import abc\n\timport datetime\n\timport re\n\tclass BaseData(abc.ABC):\n\t    def __init__(self):\n\t        self.code: int | None = None\n\t        self.message: str | None = None\n\t    def init_from_dict(self, data: dict):\n\t        self.code = int(data.get('code'))\n\t        self.message = data.get('message')\n", "        return self\n\tTZ_REGEX = re.compile(r'^(?P<base>GMT|UTC)(?P<sign>[+-])(?P<hour>\\d{1,2})(:(?P<minute>\\d{2}))?$')\n\tclass TimeZoneEntity():\n\t    def __init__(self):\n\t        self.timezone = None\n\t    def init_from_dict(self, data: dict):\n\t        self.timezone = data.get('timezone')\n\t        return self\n\t    def __str__(self):\n\t        return f'{{\"timezone\": \"{self.timezone}\"}}'\n", "    def get_timezone_offset(self):\n\t        m = TZ_REGEX.match(self.timezone)\n\t        if m is not None:\n\t            sign = m.group('sign')\n\t            hours = int(m.group('hour'))\n\t            minutes = int(m.group('minute')) if m.group('minute') is not None else 0\n\t            if sign == '+':\n\t                offset = datetime.timedelta(hours=hours, minutes=minutes)\n\t            else:\n\t                offset = -datetime.timedelta(hours=hours, minutes=minutes)\n", "            return datetime.timezone(offset=offset, name=self.timezone)\n\t        else:\n\t            raise ValueError(f'Invalid timezone: {self.timezone}')\n\tclass TimeZoneResponse(BaseData):\n\t    def __init__(self):\n\t        super().__init__()\n\t        self.data: TimeZoneEntity | None = None\n\t    def init_from_dict(self, data: dict):\n\t        super().init_from_dict(data)\n\t        self.data = TimeZoneEntity().init_from_dict(data.get('data'))\n", "        return self\n\t    def __str__(self):\n\t        return f'{{\"code\": {self.code}, \"message\": \"{self.message}\", \"data\": {self.data}}}'\n"]}
{"filename": "src/saic_ismart_client/rest_v2/api.py", "chunked_list": ["from datetime import datetime, timezone\n\timport requests\n\tfrom saic_ismart_client.exceptions import SaicApiException\n\tfrom saic_ismart_client.rest_v2.model import TimeZoneResponse\n\tclass SaicRestV2Api():\n\t    def __init__(self, base_uri: str):\n\t        self.__base_uri = base_uri\n\t    def get_user_timezone(self, token: str, uid: str):\n\t        response = TimeZoneResponse()\n\t        self.__execute_get('api.app/v1/user/timezone', token, uid=uid, response_holder=response)\n", "        return response\n\t    def __execute_get(self, endpoint: str, token: str, uid=None, response_holder=None):\n\t        headers = self.__get_headers(token, uid)\n\t        try:\n\t            response = requests.get(url=f'{self.__base_uri}/{endpoint}', headers=headers)\n\t            if response_holder is None:\n\t                return response.content.decode()\n\t            else:\n\t                return response_holder.init_from_dict(response.json())\n\t        except requests.exceptions.ConnectionError as ece:\n", "            raise SaicApiException(f'Connection error: {ece}')\n\t        except requests.exceptions.Timeout as et:\n\t            raise SaicApiException(f'Timeout error: {et}')\n\t        except requests.exceptions.HTTPError as ehttp:\n\t            status_code = ehttp.response.status_code\n\t            raise SaicApiException(f'HTTP error. HTTP status: {status_code}, {ehttp}')\n\t        except requests.exceptions.RequestException as e:\n\t            raise SaicApiException(f'{e}')\n\t    def __get_headers(self, token, uid=None):\n\t        headers = {\n", "            'Content-Type': 'application/json;charset=UTF-8',\n\t            'APP-SEND-DATE': str(datetime.now().replace(tzinfo=timezone.utc).timestamp() * 1000),\n\t            'APP-CONTENT-ENCRYPTED': '0',\n\t            'APP-LANGUAGE-TYPE': 'en',\n\t            'APP-LOGIN-TOKEN': token,\n\t        }\n\t        if uid:\n\t            headers['APP-USER-ID'] = uid\n\t        return headers\n"]}
{"filename": "src/saic_ismart_client/rest_v2/__init__.py", "chunked_list": []}
