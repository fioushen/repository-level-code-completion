{"filename": "python3/game_of_life.py", "chunked_list": ["\"\"\"Simple Conway's Game of Life implementation.\"\"\"\n\tfrom argparse import ArgumentParser, Namespace\n\tfrom gameoflife import MainGame\n\tdef main() -> None:\n\t    \"\"\"Run the game.\"\"\"\n\t    parser: ArgumentParser = ArgumentParser(description=\"Conway's Game of Life\")\n\t    parser.add_argument(\n\t        \"-f\",\n\t        \"--file\",\n\t        # don't use FileType here - we want a str to use a context manager with later\n", "        nargs=1,\n\t        help=\"specify a file to read initial cells from\",\n\t    )\n\t    parser.add_argument(\n\t        \"-w\",\n\t        \"--wrap\",\n\t        default=False,\n\t        action=\"store_true\",\n\t        help=\"change the default from using an infinite universe to instead use a universe of a \"\n\t        + \"fixed size which wraps around the edges, the fixed size universe will default to the \"\n", "        + \"size of the terminal on start and cannot be changed later\",\n\t    )\n\t    parser.add_argument(\n\t        \"-r\",\n\t        \"--rows\",\n\t        default=[0],\n\t        type=int,\n\t        nargs=1,\n\t        help=\"specify the number of rows to use when using --wrap - default is terminal height\",\n\t    )\n", "    parser.add_argument(\n\t        \"-c\",\n\t        \"--cols\",\n\t        default=[0],\n\t        type=int,\n\t        nargs=1,\n\t        help=\"specify the number of columns to use when using --wrap - default is terminal width\",\n\t    )\n\t    args: Namespace = parser.parse_args()\n\t    if not args.wrap and (args.rows[0] or args.cols[0]):\n", "        raise ValueError(\"Do not specify --rows or --cols without --wrap\")\n\t    file: str = args.file[0] if args.file else \"\"\n\t    MainGame(args.wrap, file, args.rows[0], args.cols[0]).main()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "python3/gameoflife/main.py", "chunked_list": ["\"\"\"The main game control and run loop.\"\"\"\n\t# from sys import exit as sysexit\n\tfrom datetime import datetime\n\tfrom math import floor\n\tfrom os.path import isfile\n\tfrom time import perf_counter_ns\n\tfrom blessed import Terminal  # type:ignore\n\tfrom blessed.keyboard import Keystroke  # type:ignore\n\tfrom gameoflife import GameOfLife, GameOfLifeSet, GameOfLifeArrays\n\tfrom gameoflife.dataio.create_io import create_reader, create_writer\n", "class MainGame:\n\t    \"\"\"Manage the game.\"\"\"\n\t    HEADER_ROWS: int = 2\n\t    FOOTER_ROWS: int = 8\n\t    def __init__(\n\t        self, wrap: bool, file: str = \"\", wrap_rows: int = 0, wrap_cols: int = 0\n\t    ) -> None:\n\t        \"\"\"Initialise the game.\"\"\"\n\t        self._run: bool = True  # keep looping as long as this is true\n\t        self._wrap: bool = wrap\n", "        self._automatic: bool = False  # loop automatically and continuously when true\n\t        self._sleep_time: float = 0.25  # seconds to sleep between loops in automatic\n\t        self._origin_row: int = 0  # top row of the game view of the universe\n\t        self._origin_col: int = 0  # left most cell of the game view of the universe\n\t        self._term_width: int = 0  # save term width/height to detect if it changes\n\t        self._term_height: int = 0\n\t        self._header_loc: int = 0  # track the header location for moving it\n\t        self._header_dir_left: bool = False\n\t        self._edit_mode = False  # are editing right now?\n\t        self._last_edit_location: tuple[int, int]  # save where the cursor was last\n", "        self._t = Terminal()\n\t        # infinite or wrapping universe\n\t        if wrap:\n\t            height: int = (\n\t                wrap_rows\n\t                if wrap_rows\n\t                else self._t.height - MainGame.HEADER_ROWS - MainGame.FOOTER_ROWS\n\t            )\n\t            width: int = wrap_cols if wrap_cols else floor((self._t.width + 1) / 2)\n\t            self._gol: GameOfLife = GameOfLifeArrays(height, width)\n", "        else:\n\t            self._gol = GameOfLifeSet()\n\t        if file:\n\t            with create_reader(file) as reader:\n\t                self._gol.add_cells(reader)\n\t    def main(self) -> None:\n\t        \"\"\"Run the main game loop.\"\"\"\n\t        # centre the initial board\n\t        # for now, disable this and just default to terminal 0,0 == game 0,0\n\t        # # TO DO: do a better job of putting the initial board in the centre\n", "        # # one way is actually to put the initial cells in the centre as opposed to the board\n\t        # # For now, place 0,0 of the game board in the centre of the view.\n\t        # # This defines the View of the board in the coordinates of the board.\n\t        # # Another way to think of it is the origin_row/col defines how far away in board coords\n\t        # # the top left corner of the View is from 0,0 of the board.\n\t        # self._origin_row = 0 - floor(\n\t        #     (self._t.height - MainGame.HEADER_ROWS - MainGame.FOOTER_ROWS) / 2\n\t        # )\n\t        # divide in half again because we only print every other col\n\t        # self._origin_col = 0 - floor(self._t.width / 2 / 2)\n", "        # run the game\n\t        with self._t.fullscreen(), self._t.cbreak():  # , term.hidden_cursor():\n\t            while self._run:  # pragma: no cover\n\t                # check if we need to clear screen and refresh - will always happen first runthrough\n\t                if (\n\t                    self._term_width != self._t.width\n\t                    or self._term_height != self._t.height\n\t                ):\n\t                    self.update_screen_size()\n\t                # print the game cells, taking care not to print over the bottom text\n", "                self.print_game()\n\t                # handle any potential keystrokes\n\t                if self._automatic:\n\t                    # progress the game a generation\n\t                    start: int = perf_counter_ns()\n\t                    live_count: int = self._gol.progress()\n\t                    last_gen_time: int = perf_counter_ns() - start\n\t                    # update the UI to reflect any changes\n\t                    self.print_ui_update(True, live_count, last_gen_time)\n\t                    self.process_keystroke(False)\n", "                else:\n\t                    # only progress the game if the user asked for it\n\t                    if self.process_keystroke(True):\n\t                        start = perf_counter_ns()\n\t                        live_count = self._gol.progress()\n\t                        last_gen_time = perf_counter_ns() - start\n\t                        # update the UI to reflect any changes\n\t                        self.print_ui_update(True, live_count, last_gen_time)\n\t    def update_screen_size(self) -> None:\n\t        \"\"\"Update the screen size on first run, or when the terminal size has changed.\"\"\"\n", "        self._term_width = self._t.width\n\t        self._term_height = self._t.height\n\t        # reset cursor and clear the screen\n\t        print(self._t.home + self._t.clear, end=\"\")\n\t        # print out the minimal game UI\n\t        self.print_ui()\n\t        self._header_loc = floor(self._t.width / 2)\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t        # init last edit location to be centre of view\n\t        row: int = (\n", "            floor(\n\t                # calculate the number of game rows in the view\n\t                (self._t.height - MainGame.HEADER_ROWS - MainGame.FOOTER_ROWS)\n\t                # find the centre of the game rows\n\t                / 2\n\t            )\n\t            # turn into 0-indexed terminal row\n\t            - 1\n\t            # offset down by HEADER_ROWS\n\t            + MainGame.HEADER_ROWS\n", "        )\n\t        # find the centre of the terminal view, turn into 0-index terminal col\n\t        col: int = floor(self._t.width / 2) - 1\n\t        # column has to be even number as we only print cells in even columns\n\t        col = col if col % 2 == 0 else col - 1\n\t        self._last_edit_location = (row, col)\n\t    def process_keystroke(self, block: bool) -> bool:  # pragma: no cover\n\t        \"\"\"\n\t        Wait for a keystroke (with optional timeout) and process it.\n\t        Return if the game should be progressed a generation due to user input.\n", "        \"\"\"\n\t        # either block waiting for a keystroke or wait for sleep_time seconds\n\t        # actually only block for a short while, then fall through, causing the screen to refresh\n\t        # this deals with the terminal resizing\n\t        key: Keystroke = (\n\t            self._t.inkey(0.1) if block else self._t.inkey(timeout=self._sleep_time)\n\t        )\n\t        # process any potential key\n\t        if key.is_sequence:\n\t            match key.code:\n", "                case self._t.KEY_ESCAPE:\n\t                    self._run = False\n\t                case self._t.KEY_UP:\n\t                    self._move_up()\n\t                case self._t.KEY_DOWN:\n\t                    self._move_down()\n\t                case self._t.KEY_LEFT:\n\t                    self._move_left()\n\t                case self._t.KEY_RIGHT:\n\t                    self._move_right()\n", "                case _:\n\t                    pass  # do nothing with unrecognised keys\n\t        else:\n\t            match key:\n\t                case \" \":\n\t                    if self._edit_mode:\n\t                        self._toggle_cell_state()\n\t                    else:\n\t                        # progress the game a generation\n\t                        return True\n", "                case \"a\":\n\t                    if not self._edit_mode:\n\t                        self._automatic = not self._automatic\n\t                case \"e\":\n\t                    self._toggle_edit_mode()\n\t                case \"q\":\n\t                    self._run = False\n\t                case \"s\":\n\t                    self._save_game()\n\t                case \"+\" | \"=\" | \"]\":  # also accept \"=\" so we don't have use shift all the time\n", "                    self._increase_speed()\n\t                case \"-\" | \"[\":\n\t                    self._decrease_speed()\n\t                case _:\n\t                    pass  # do nothing with unrecognised keys\n\t        return False\n\t    def _save_game(self) -> None:  # pragma: no cover\n\t        \"\"\"Save the game to a file.\"\"\"\n\t        # clear any previous status message; it's a nasty hack to just clear a fixed width...\n\t        with self._t.location(0, self._t.height - 1):\n", "            print(\" \" * 80, end=\"\")\n\t        self._automatic = False  # if we are running, stop\n\t        filename: str = self._prompt(\"Save game to path/filename: \")\n\t        if filename:\n\t            if isfile(filename):\n\t                if \"y\" != self._prompt(\n\t                    f\"File {filename} already exists, overwrite? (y/n): \"\n\t                ):\n\t                    return\n\t            outcome: str\n", "            try:\n\t                with create_writer(filename) as writer:\n\t                    writer.write([], self._gol.get_live_cells())\n\t                timestamp: str = datetime.now().strftime(\"%H:%M:%S\")\n\t                outcome = f\"Saved game to file '{filename}' at {timestamp}\"\n\t            except ValueError as _:\n\t                outcome = \"Incorrect file extension - please use '.cells'\"\n\t            with self._t.location(0, self._t.height - 1):\n\t                print(outcome, end=\"\")\n\t    def _prompt(self, message: str) -> str:  # pragma: no cover\n", "        \"\"\"Prompt the user for input and return their input.\"\"\"\n\t        response: str = \"\"\n\t        # move down to the bottom of the screen\n\t        with self._t.location(0, self._t.height - 1):\n\t            print(message, flush=True, end=\"\")\n\t            stop: bool = False\n\t            while not stop:\n\t                save_key: Keystroke = self._t.inkey()\n\t                if save_key.is_sequence:\n\t                    match save_key.code:\n", "                        case self._t.KEY_ENTER:\n\t                            stop = True\n\t                        case self._t.KEY_BACKSPACE | self._t.KEY_DELETE:\n\t                            if response:\n\t                                print(\n\t                                    self._t.move_left + \" \" + self._t.move_left,\n\t                                    flush=True,\n\t                                    end=\"\",\n\t                                )\n\t                                response = response[:-1]\n", "                        case _:\n\t                            pass  # do nothing with unrecognised keys\n\t                else:\n\t                    response += save_key\n\t                    print(save_key, flush=True, end=\"\")\n\t            print(self._t.clear_bol, end=\"\")\n\t        return response\n\t    def _move_left(self) -> None:  # pragma: no cover\n\t        \"\"\"Move the view or edit cursor left.\"\"\"\n\t        # check if we are at the left edge of the view and need to scroll instead\n", "        col: int = self._t.get_location()[1]\n\t        if self._edit_mode and col > 0:\n\t            print(self._t.move_left(2), end=\"\")\n\t        else:\n\t            self._origin_col -= 1\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _move_right(self) -> None:  # pragma: no cover\n\t        \"\"\"Move the view or edit cursor right.\"\"\"\n\t        # check if we are at the right edge of the view and need to scroll instead\n\t        col = self._t.get_location()[1]\n", "        if self._edit_mode and col + 2 < self._t.width:\n\t            print(self._t.move_right(2), end=\"\")\n\t        else:\n\t            self._origin_col += 1\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _move_down(self) -> None:  # pragma: no cover\n\t        \"\"\"Move the view or edit cursor down.\"\"\"\n\t        # check if we are at the bottom of the view and need to scroll instead\n\t        row = self._t.get_location()[0]\n\t        if self._edit_mode and row + 1 < self._t.height - MainGame.FOOTER_ROWS:\n", "            print(self._t.move_down(1), end=\"\")\n\t        else:\n\t            self._origin_row += 1\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _move_up(self) -> None:  # pragma: no cover\n\t        \"\"\"Move the view or edit cursor up.\"\"\"\n\t        # check if we are at the top of the view and need to scroll instead\n\t        row: int = self._t.get_location()[0]\n\t        if self._edit_mode and row > MainGame.HEADER_ROWS:\n\t            print(self._t.move_up(1), end=\"\")\n", "        else:\n\t            self._origin_row -= 1\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _toggle_cell_state(self) -> None:  # pragma: no cover\n\t        \"\"\"Toggle the state of a cell on the board.\"\"\"\n\t        row, col = self._t.get_location()\n\t        cell_row: int = row - MainGame.HEADER_ROWS + self._origin_row\n\t        cell_col: int = floor(col / 2) + self._origin_col\n\t        cell_state: bool | None = self._gol.get_cell(cell_row, cell_col)\n\t        if cell_state is not None:\n", "            self._gol.set_cell(cell_row, cell_col, not cell_state)\n\t        self.print_game()\n\t    def _decrease_speed(self) -> None:\n\t        \"\"\"Decrease speed.\"\"\"\n\t        self._sleep_time = (\n\t            self._sleep_time * 2\n\t            if self._sleep_time > 0\n\t            # 250ms (the default) / 128, i.e. you have to push the + key 7 times\n\t            else 0.001953125\n\t        )\n", "        # self._sleep_time *= 2\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _increase_speed(self) -> None:\n\t        \"\"\"Increase speed.\"\"\"\n\t        self._sleep_time /= 2\n\t        # once we reach a low threshold just set it to 0\n\t        if self._sleep_time < 0.001:\n\t            self._sleep_time = 0\n\t        self.print_ui_update(False, self._gol.count_live_cells())\n\t    def _toggle_edit_mode(self) -> None:  # pragma: no cover\n", "        \"\"\"Toggle edit mode.\"\"\"\n\t        if self._edit_mode:\n\t            self._edit_mode = False\n\t            # save where the last edit mode was so we can return there\n\t            self._last_edit_location = self._t.get_location()\n\t            print(self._t.move_xy(0, 0), end=\"\")\n\t            self.print_ui()\n\t        else:\n\t            self._automatic = False  # if we are running, stop\n\t            self._edit_mode = True\n", "            self.print_ui()\n\t            # return to last edit location\n\t            print(self._t.move_x(self._last_edit_location[1]), end=\"\")\n\t            print(self._t.move_y(self._last_edit_location[0]), end=\"\")\n\t    # layout model for UI top header moving text\n\t    # |---------------------------------|  term.width = 50\n\t    #                  h                   initial header_location = term.width / 2 = 25\n\t    #           |----name----|             len(name) = 8\n\t    #           p......h......             print location = header_location - (len(name) / 2) = 21\n\t    # p......h......                       print location = header_location - (len(name) / 2) = 0\n", "    # p......h......                       header_location = 0 + (len(name) / 2) = 4\n\t    #                      p......h......  print location = term.width - len(name) = 42\n\t    #                      p......h......  print location = header_location - (len(name) / 2) = 42\n\t    #                      p......h......  header_location = term.width - (len(name) / 2) = 46\n\t    def print_ui_update(\n\t        self, progress: bool, live_count: int, last_gen_time: int | None = None\n\t    ) -> None:\n\t        \"\"\"Update things in the UI that needs updating; game name location, stats, etc.\"\"\"\n\t        # calculate moving header sectiong\n\t        name: str = \" ■ Conways's Game of Life □ \"\n", "        line: str = \" ========================== \"\n\t        # move the name and underline from side to side, manage switching directions\n\t        # this is pretty complicated, would be nice to do something simpler!\n\t        half_width: int = floor(len(name) / 2)\n\t        if progress:\n\t            if self._header_dir_left:\n\t                self._header_loc -= 1\n\t                if self._header_loc - half_width < 0:\n\t                    self._header_dir_left = False\n\t                    self._header_loc += 2\n", "            else:\n\t                self._header_loc += 1\n\t                if self._header_loc >= self._t.width - half_width:\n\t                    self._header_dir_left = True\n\t                    self._header_loc -= 2\n\t        with self._t.location(0, 0), self._t.hidden_cursor():\n\t            # header section\n\t            print(self._t.move_x(self._header_loc - half_width) + self._t.bold(name))\n\t            print(self._t.move_x(self._header_loc - half_width) + self._t.bold(line))\n\t            # don't forget to update MainGame.HEADER_ROWS if making changes here!!!\n", "        footer_start_row: int = self._t.height - MainGame.FOOTER_ROWS\n\t        with self._t.location(0, footer_start_row), self._t.hidden_cursor():\n\t            print(self._t.bold(\"Info\") + self._t.move_down)\n\t            print(f\"Generation:    {self._gol.generation}\")\n\t            print(f\"Live cells:    {live_count}   \")\n\t            # intentional space on the end of \"seconds \" below\n\t            print(f\"Frame delay:   {self._sleep_time*1000:.4g} ms    \")\n\t            time_str: str = (\n\t                str(round(last_gen_time / 1000)) + \" µs\"\n\t                if last_gen_time is not None\n", "                else \"\"\n\t            )\n\t            print(f\"Progress time: {time_str}   \")\n\t            print(\n\t                f\"Coords:        row:{self._origin_row} col:{self._origin_col}  \",\n\t                end=\"\",\n\t            )\n\t            # future stats, max total of FOOTER_ROWS-2 due to current formatting\n\t            # print(\"\", end=\"\")\n\t    def print_game(self) -> None:\n", "        \"\"\"Print the actual game board with cells from the GameOfLife instance.\"\"\"\n\t        with self._t.location(0, MainGame.HEADER_ROWS), self._t.hidden_cursor():\n\t            row_list: list[str] = []\n\t            max_rows: int = self._t.height - MainGame.HEADER_ROWS - MainGame.FOOTER_ROWS\n\t            # because we separate all cells by a space we can only do half the number of cols\n\t            max_cols: int = floor((self._t.width + 1) / 2)\n\t            for view_row in range(max_rows):\n\t                for view_col in range(max_cols):\n\t                    cell: bool | None = self._gol.get_cell(\n\t                        self._origin_row + view_row, self._origin_col + view_col\n", "                    )\n\t                    dead_cell_str: str = \".\" if self._wrap else \" \"\n\t                    if cell is None:\n\t                        row_list.append(\" \")\n\t                    else:\n\t                        row_list.append(\"■\" if cell else dead_cell_str)\n\t                        # □ ■ ▫ ◉ ○ ◌ ◎ ● ◯ ☉ ☐ ☻ ◦\n\t                print(\" \".join(row_list))\n\t                row_list = []\n\t    def print_ui(self) -> None:\n", "        \"\"\"\n\t        Print the main game UI.\n\t        Returns a tuple with the 1st value being the row index to start printing the game board on,\n\t        and the 2nd value being the maximum number of rows that the game board can print.\n\t        \"\"\"\n\t        with self._t.location(0, 0), self._t.hidden_cursor():\n\t            # footer section\n\t            print(self._t.move_xy(0, self._t.height - (MainGame.FOOTER_ROWS + 1)))\n\t            print(self._t.rjust(self._t.bold(\"Controls                   \")))\n\t            print(\"=\" * self._t.width)\n", "            # intentional misalignment as some of these are wider on a terminal\n\t            print(self._t.rjust(\"(ノº益º)ノ彡┻━┻  q or ESC  \"))\n\t            if self._edit_mode:\n\t                print(self._t.rjust(\"Exit edit mode:  e         \"))\n\t                print(self._t.rjust(\"Live/dead cell:  <spacebar>\"))\n\t                print(self._t.rjust(\"Move cursor:     ⇦⇧⇩⇨      \"))\n\t                print(self._t.rjust(\"                           \"))\n\t                print(self._t.rjust(\"                           \"), end=\"\")\n\t            else:\n\t                print(self._t.rjust(\"Edit cells:      e         \"))\n", "                print(self._t.rjust(\"Step forward:    <spacebar>\"))\n\t                print(self._t.rjust(\"Autorun on/off:  a         \"))\n\t                print(self._t.rjust(\"Speed up/down:   +/-       \"))\n\t                print(self._t.rjust(\"Move the view:   ⇦⇧⇩⇨      \"), end=\"\")\n\t            # don't forget to update MainGame.FOOTER_ROWS if making changes here!!!\n\t    @staticmethod\n\t    def add_glider(gol: GameOfLife) -> None:\n\t        \"\"\"Add a simple glider.\"\"\"\n\t        gol.set_cell(0, 1, True)\n\t        gol.set_cell(1, 2, True)\n", "        gol.set_cell(2, 0, True)\n\t        gol.set_cell(2, 1, True)\n\t        gol.set_cell(2, 2, True)\n"]}
{"filename": "python3/gameoflife/coordinate.py", "chunked_list": ["\"\"\"To avoid circular dependencies we put a Coordinate type alias in a separate module.\"\"\"\n\tCoordinate = tuple[int, int]\n"]}
{"filename": "python3/gameoflife/gol_set.py", "chunked_list": ["\"\"\"Game of Life set implementation.\"\"\"\n\tfrom gameoflife import Coordinate, GameOfLife\n\tclass GameOfLifeSet(GameOfLife):\n\t    \"\"\"Implements Game of Life using a Python set implementation.\"\"\"\n\t    def __init__(self) -> None:\n\t        \"\"\"Initialise the map.\"\"\"\n\t        super().__init__()\n\t        self._cells: set[Coordinate] = set()\n\t        self._min_row: int\n\t        self._max_row: int\n", "        self._min_col: int\n\t        self._max_col: int\n\t    def __str__(self) -> str:\n\t        \"\"\"Iterate over all the cells and return a human readable string.\"\"\"\n\t        str_list: list[str] = [\"Generation: \" + str(self.generation)]\n\t        for row in range(self._min_row, self._max_row + 1):  # add 1 to include last\n\t            row_list: list[str] = []\n\t            for col in range(self._min_col, self._max_col + 1):  # add 1 to include last\n\t                if (row, col) in self._cells:\n\t                    row_list.append(\"■ \" if (row, col) in self._cells else \"□ \")\n", "                else:\n\t                    row_list.append(\"  \")\n\t            str_list.append(\"\".join(row_list))\n\t        return \"\\n\".join(str_list)\n\t    def progress(self) -> int:\n\t        \"\"\"Progress another generation.\"\"\"\n\t        old_gen: set[Coordinate] = self._cells\n\t        self._cells = set()\n\t        checked_dead_cells: set[Coordinate] = set()\n\t        count: int = 0\n", "        # loop over every live cell\n\t        for coords in old_gen:\n\t            # check how many live neighbours we have\n\t            num_live_neighbours: int = 0\n\t            dead_neighbour_coords: list[Coordinate] = []\n\t            for cell_coord in GameOfLifeSet._compute_neighbours(coords[0], coords[1]):\n\t                if cell_coord in old_gen:\n\t                    num_live_neighbours += 1\n\t                else:\n\t                    dead_neighbour_coords.append(cell_coord)\n", "            # check if the current cell being processed should live\n\t            match num_live_neighbours:\n\t                # 2. A live cell with exactly 2 neighbours is alive in the next generation.\n\t                case 2:\n\t                    self._set_cell(coords)\n\t                    count += 1\n\t                # 1. Any cell, dead or alive, with exactly 3 neighbours is alive in the\n\t                # next generation.\n\t                case 3:\n\t                    self._set_cell(coords)\n", "                    count += 1\n\t                # 3. All other cells are dead in the next generation.\n\t                case _:\n\t                    pass\n\t            # check if any of the dead neighbours should come alive\n\t            for coords in dead_neighbour_coords:\n\t                if coords not in checked_dead_cells:\n\t                    num_live_neighbours = 0\n\t                    for cell_coord in GameOfLifeSet._compute_neighbours(\n\t                        coords[0], coords[1]\n", "                    ):\n\t                        if cell_coord in old_gen:\n\t                            num_live_neighbours += 1\n\t                    if num_live_neighbours == 3:\n\t                        self._set_cell(coords)\n\t                        count += 1\n\t                checked_dead_cells.add(coords)\n\t        self.generation += 1\n\t        return count\n\t    def _set_cell(self, coord: Coordinate) -> None:\n", "        self.set_cell(coord[0], coord[1], True)\n\t    def set_cell(self, row: int, col: int, live: bool) -> None:\n\t        \"\"\"Set a cell in the map to the given live value.\"\"\"\n\t        # only add the cell to the map if it is live\n\t        if live:\n\t            # track the min/max of cols\n\t            if len(self._cells) == 0:  # just set them first time around\n\t                self._min_row = row\n\t                self._max_row = row\n\t                self._min_col = col\n", "                self._max_col = col\n\t            else:\n\t                self._min_row = row if row < self._min_row else self._min_row\n\t                self._max_row = row if row > self._max_row else self._max_row\n\t                self._min_col = col if col < self._min_col else self._min_col\n\t                self._max_col = col if col > self._max_col else self._max_col\n\t            self._cells.add((row, col))\n\t        else:\n\t            self._cells.remove((row, col))\n\t    def count_live_cells(self) -> int:\n", "        \"\"\"Count the total number of live cells in the GoL universe.\"\"\"\n\t        return len(self._cells)\n\t    def get_cell(self, row: int, col: int) -> bool | None:\n\t        \"\"\"\n\t        Return the live status of the given cell.\n\t        This implementation never returns None since the universe is \"infinite\".\n\t        \"\"\"\n\t        return (row, col) in self._cells\n\t    def get_live_cells(self) -> list[Coordinate]:\n\t        \"\"\"\n", "        Return a list of the Coordinates of all the live cells.\n\t        The list must be sorted by row top to bottom and then in the row from left to right.\n\t        \"\"\"\n\t        return sorted(self._cells)\n\t    @staticmethod\n\t    def _compute_neighbours(row: int, col: int) -> list[Coordinate]:\n\t        \"\"\"Compute the coordinates of all the neighbours of the given cell.\"\"\"\n\t        # pre-allocating these like this is 5% faster\n\t        top: int = row - 1\n\t        bottom: int = row + 1\n", "        left: int = col - 1\n\t        right: int = col + 1\n\t        return [\n\t            (top, left),\n\t            (top, col),\n\t            (top, right),\n\t            (row, right),\n\t            (bottom, right),\n\t            (bottom, col),\n\t            (bottom, left),\n", "            (row, left),\n\t        ]\n"]}
{"filename": "python3/gameoflife/gol_dict.py", "chunked_list": ["\"\"\"Game of Life dict implementation.\"\"\"\n\tfrom gameoflife import Coordinate, GameOfLife\n\tclass GameOfLifeDict(GameOfLife):\n\t    \"\"\"Implements Game of Life using a Python dict implementation.\"\"\"\n\t    def __init__(self) -> None:\n\t        \"\"\"Initialise the map.\"\"\"\n\t        super().__init__()\n\t        self._cells: dict[Coordinate, bool] = {}\n\t        self._min_row: int\n\t        self._max_row: int\n", "        self._min_col: int\n\t        self._max_col: int\n\t    def __str__(self) -> str:\n\t        \"\"\"Iterate over all the cells and return a human readable string.\"\"\"\n\t        str_list: list[str] = [\"Generation: \" + str(self.generation)]\n\t        for row in range(self._min_row, self._max_row + 1):  # add 1 to include last\n\t            row_list: list[str] = []\n\t            for col in range(self._min_col, self._max_col + 1):  # add 1 to include last\n\t                if (row, col) in self._cells:\n\t                    row_list.append(\"■ \" if self._cells.get((row, col)) else \"□ \")\n", "                else:\n\t                    row_list.append(\"  \")\n\t            str_list.append(\"\".join(row_list))\n\t        return \"\\n\".join(str_list)\n\t    def progress(self) -> int:\n\t        \"\"\"Progress another generation.\"\"\"\n\t        old_gen: dict[Coordinate, bool] = self._cells\n\t        self._cells = {}\n\t        count: int = 0\n\t        # loop over every tracked cell\n", "        for coords, live in old_gen.items():\n\t            match GameOfLifeDict._live_neighbours(old_gen, coords):\n\t                # 2. A live cell with exactly 2 neighbours is alive in the next generation.\n\t                case 2:\n\t                    if live:\n\t                        self.set_cell(coords[0], coords[1], live)\n\t                        count += 1\n\t                    else:\n\t                        pass  # required for code coverage? :/\n\t                # 1. Any cell, dead or alive, with exactly 3 neighbours is alive in the\n", "                # next generation.\n\t                case 3:\n\t                    self.set_cell(coords[0], coords[1], True)\n\t                    count += 1\n\t                # 3. All other cells are dead in the next generation.\n\t                case _:\n\t                    pass\n\t        self.generation += 1\n\t        return count\n\t    def set_cell(self, row: int, col: int, live: bool) -> None:\n", "        \"\"\"Set a cell in the map to the given live value.\"\"\"\n\t        # track the min/max of cols\n\t        if len(self._cells) == 0:  # just set them first time around\n\t            self._min_row = row\n\t            self._max_row = row\n\t            self._min_col = col\n\t            self._max_col = col\n\t        else:\n\t            self._min_row = row if row < self._min_row else self._min_row\n\t            self._max_row = row if row > self._max_row else self._max_row\n", "            self._min_col = col if col < self._min_col else self._min_col\n\t            self._max_col = col if col > self._max_col else self._max_col\n\t        # if we are adding a live cell, also add dead neighbours if they don't already exist\n\t        if live:\n\t            self._cells[(row, col)] = live\n\t            # add all the dead neighbours if there is not a cell in the map already\n\t            for neighbour in GameOfLifeDict._compute_neighbours(row, col):\n\t                if neighbour not in self._cells:\n\t                    # recurse to set min/max\n\t                    self.set_cell(neighbour[0], neighbour[1], False)\n", "        else:\n\t            self._cells[(row, col)] = False\n\t    def count_live_cells(self) -> int:\n\t        \"\"\"Count the total number of live cells in the GoL universe.\"\"\"\n\t        count: int = 0\n\t        for cell in self._cells.values():\n\t            if cell:\n\t                count += 1\n\t        return count\n\t    def get_cell(self, row: int, col: int) -> bool | None:\n", "        \"\"\"\n\t        Return the live status of the given cell.\n\t        This implementation never returns None since the universe is \"infinite\".\n\t        \"\"\"\n\t        live: bool | None = self._cells.get((row, col))\n\t        if live is None:\n\t            return False\n\t        return live\n\t    def get_live_cells(self) -> list[Coordinate]:\n\t        \"\"\"Return a list of the Coordinates of all the live cells.\"\"\"\n", "        # TODO: finish this some day\n\t        raise NotImplementedError\n\t    @staticmethod\n\t    def _live_neighbours(cell_map: dict[Coordinate, bool], coords: Coordinate) -> int:\n\t        \"\"\"Count the number of live neighbours the cell at the given coords has.\"\"\"\n\t        live_count: int = 0\n\t        for cell_coord in GameOfLifeDict._compute_neighbours(coords[0], coords[1]):\n\t            if cell_map.get(cell_coord):\n\t                live_count += 1\n\t            # the funny thing is that doing the below actually slows the progress() down by 2.5%...\n", "            # if there's more than 3 we're done\n\t            # if live_count > 3:\n\t            #     return live_count\n\t        return live_count\n\t    @staticmethod\n\t    def _compute_neighbours(row: int, col: int) -> list[Coordinate]:\n\t        \"\"\"Compute the coordinates of all the neighbours of the given cell.\"\"\"\n\t        # pre-allocating these like this is 5% faster\n\t        top: int = row - 1\n\t        bottom: int = row + 1\n", "        left: int = col - 1\n\t        right: int = col + 1\n\t        return [\n\t            (top, left),\n\t            (top, col),\n\t            (top, right),\n\t            (row, right),\n\t            (bottom, right),\n\t            (bottom, col),\n\t            (bottom, left),\n", "            (row, left),\n\t        ]\n"]}
{"filename": "python3/gameoflife/__init__.py", "chunked_list": ["\"\"\"Import all the other sources and re-export them for easier importing elsewhere.\"\"\"\n\t# pylint: disable=useless-import-alias\n\tfrom gameoflife.coordinate import Coordinate as Coordinate\n\tfrom gameoflife.gol_abc import GameOfLife as GameOfLife\n\tfrom gameoflife.gol_arrays import GameOfLifeArrays as GameOfLifeArrays\n\tfrom gameoflife.gol_dict import GameOfLifeDict as GameOfLifeDict\n\tfrom gameoflife.gol_set import GameOfLifeSet as GameOfLifeSet\n\tfrom gameoflife.main import MainGame as MainGame\n"]}
{"filename": "python3/gameoflife/gol_abc.py", "chunked_list": ["\"\"\"Game of Life abstract class specifying the interface.\"\"\"\n\tfrom abc import ABC, abstractmethod\n\tfrom gameoflife.dataio.file_reader import FileReader\n\tfrom gameoflife import Coordinate\n\tclass GameOfLife(ABC):\n\t    \"\"\"Abstract class to specify the interface for different implementations of Game of Life.\"\"\"\n\t    def __init__(self) -> None:\n\t        \"\"\"Initialise.\"\"\"\n\t        self._generation: int = 0\n\t    @abstractmethod\n", "    def __str__(self) -> str:\n\t        \"\"\"Produce a human readable string to represent the state of the GoL universe.\"\"\"\n\t    @abstractmethod\n\t    def progress(self) -> int:\n\t        \"\"\"Progress another generation, return the number of live cells in the new generation.\"\"\"\n\t    @abstractmethod\n\t    def set_cell(self, row: int, col: int, live: bool) -> None:\n\t        \"\"\"Set a cell in the universe to the given live value.\"\"\"\n\t    @abstractmethod\n\t    def count_live_cells(self) -> int:\n", "        \"\"\"Count the total number of live cells in the GoL universe.\"\"\"\n\t    @abstractmethod\n\t    def get_cell(self, row: int, col: int) -> bool | None:\n\t        \"\"\"Return the live status of the given cell.\"\"\"\n\t    @property\n\t    def generation(self) -> int:\n\t        \"\"\"Return the current generation of the game.\"\"\"\n\t        return self._generation\n\t    @generation.setter\n\t    def generation(self, gen: int) -> None:\n", "        \"\"\"Return the current generation of the game.\"\"\"\n\t        self._generation = gen\n\t    def add_cells(self, reader: FileReader) -> None:\n\t        \"\"\"Load cells from the given reader.\"\"\"\n\t        for row, col in reader.cells:\n\t            self.set_cell(row, col, True)\n\t    @abstractmethod\n\t    def get_live_cells(self) -> list[Coordinate]:\n\t        \"\"\"\n\t        Return a list of the Coordinates of all the live cells.\n", "        The list must be sorted by row top to bottom and then in the row from left to right.\n\t        \"\"\"\n"]}
{"filename": "python3/gameoflife/gol_arrays.py", "chunked_list": ["\"\"\"Game of Life array based implementation.\"\"\"\n\tfrom gameoflife import GameOfLife, Coordinate\n\tclass GameOfLifeArrays(GameOfLife):\n\t    \"\"\"Implements Game of Life using two fixed size arrays, with universe wrap around.\"\"\"\n\t    def __init__(self, rows: int, cols: int) -> None:\n\t        \"\"\"Initialise the two parallel arrays.\"\"\"\n\t        super().__init__()\n\t        self._a_array: list[list[bool]] = [\n\t            [False for _ in range(cols)] for _ in range(rows)\n\t        ]\n", "    def progress(self) -> int:\n\t        \"\"\"Progress the game another generation.\"\"\"\n\t        # initialise a new array next_gen[[]] to be all False\n\t        next_gen: list[list[bool]] = [\n\t            [False for _ in range(len(self._a_array[0]))]\n\t            for _ in range(len(self._a_array))\n\t        ]\n\t        count: int = 0\n\t        # loop through every cell on the board and update the _b array with the next gen.\n\t        for row_index, row_list in enumerate(self._a_array):\n", "            for col_index, live in enumerate(row_list):\n\t                num_neighbours: int = self._count_neighbours(row_index, col_index)\n\t                # 1. Any cell, dead or alive, with exactly 3 neighbours is alive in next gen.\n\t                if num_neighbours == 3:\n\t                    next_gen[row_index][col_index] = True\n\t                    count += 1\n\t                # 2. A live cell with exactly 2 neighbours is alive in the next generation.\n\t                elif live is True and num_neighbours == 2:\n\t                    next_gen[row_index][col_index] = True\n\t                    count += 1\n", "                # 3. All other cells are dead in the next generation.\n\t                # do nothing\n\t        # swap the arrays\n\t        self._a_array = next_gen\n\t        self.generation += 1\n\t        return count\n\t    def set_cell(self, row: int, col: int, live: bool) -> None:\n\t        \"\"\"\n\t        Set a cell in the array to the given live value.\n\t        Cells outside of the boundaries of the array will wrap around as their coordinate will be\n", "        modulo the array height and width. For large patterns and small arrays (like the size of a\n\t        single monitor screen) this will usually simply mean that every cell in the array is set,\n\t        and on the first generation every cell will die.\n\t        \"\"\"\n\t        self._a_array[row % len(self._a_array)][col % len(self._a_array[0])] = live\n\t    def count_live_cells(self) -> int:\n\t        \"\"\"Count the total number of live cells in the GoL universe.\"\"\"\n\t        count: int = 0\n\t        for row in self._a_array:\n\t            for live in row:\n", "                if live:\n\t                    count += 1\n\t        return count\n\t    def get_cell(self, row: int, col: int) -> bool | None:\n\t        \"\"\"Return the live status of the given cell.\"\"\"\n\t        if (\n\t            row >= 0\n\t            and row < len(self._a_array)\n\t            and col >= 0\n\t            and col < len(self._a_array[0])\n", "        ):\n\t            return self._a_array[row][col]\n\t        else:\n\t            return None\n\t    def get_live_cells(self) -> list[Coordinate]:\n\t        \"\"\"\n\t        Return a list of the Coordinates of all the live cells.\n\t        The list must be sorted by row top to bottom and then in the row from left to right.\n\t        \"\"\"\n\t        live_cells: list[Coordinate] = []\n", "        for row_index, row in enumerate(self._a_array):\n\t            for col_index, cell in enumerate(row):\n\t                if cell:\n\t                    live_cells.append((row_index, col_index))\n\t        return live_cells\n\t    def _count_neighbours(self, row: int, col: int) -> int:\n\t        \"\"\"Count how many of the 8 neighbours of this cell are alive.\"\"\"\n\t        count = 0\n\t        # check if we need to wrap around\n\t        # if y==0 we can't decrement further, so wrap around to other extreme of array\n", "        top: int = len(self._a_array) - 1 if row == 0 else row - 1\n\t        # if y==a.length-1 we can't increment, so wrap around to 0\n\t        bottom: int = 0 if row == len(self._a_array) - 1 else row + 1\n\t        # if x==0 then we can't decrement further, so wrap around to other extreme of array\n\t        left: int = len(self._a_array[0]) - 1 if col == 0 else col - 1\n\t        # if x==a[0].length-1 we can't increment, so wrap around to 0\n\t        right: int = 0 if col == len(self._a_array[0]) - 1 else col + 1\n\t        # check all the neighbours\n\t        count += self._a_array[top][left]\n\t        count += self._a_array[top][col]\n", "        count += self._a_array[top][right]\n\t        count += self._a_array[row][left]\n\t        # we don't do a[y][x] because it's the cell we're testing\n\t        count += self._a_array[row][right]\n\t        count += self._a_array[bottom][left]\n\t        count += self._a_array[bottom][col]\n\t        count += self._a_array[bottom][right]\n\t        return count\n\t    def __str__(self) -> str:\n\t        \"\"\"Return the a array as a formatted string.\"\"\"\n", "        # concise but unreadable double map version\n\t        # return \"\\n\".join(list(map(lambda r: \"\".join(list(map(lambda c: \"■ \" if c else \"□ \", r))),\n\t        #   self.a)))\n\t        # expanded double for loop version\n\t        str_list: list[str] = [\"Generation: \" + str(self.generation)]\n\t        for row in self._a_array:\n\t            row_list: list[str] = []\n\t            for cell in row:\n\t                row_list.append(\"■ \" if cell else \"□ \")\n\t            str_list.append(\"\".join(row_list))\n", "        return \"\\n\".join(str_list)\n"]}
{"filename": "python3/gameoflife/dataio/plaintext_reader.py", "chunked_list": ["\"\"\"File Loader for Plain Text file types.\"\"\"\n\tfrom io import TextIOWrapper\n\tfrom types import TracebackType\n\timport pyparsing as pp\n\tfrom .file_reader import FileReader, FileReaderContextManager\n\t# pylint: disable=pointless-string-statement\n\t\"\"\" \n\t!Name: Glider\n\t!Author: Richard K. Guy\n\t!The smallest, most common, and first discovered spaceship.\n", "!www.conwaylife.com/wiki/index.php?title=Glider\n\t.O\n\t..O\n\tOOO\n\t\"\"\"\n\tclass PlainTextReader(FileReaderContextManager):\n\t    \"\"\"Implements loading Plain Text data from files.\"\"\"\n\t    # !Name: Glider\n\t    # !Author: Richard K. Guy\n\t    # !The smallest, most common, and first discovered spaceship.\n", "    # !www.conwaylife.com/wiki/index.php?title=Glider\n\t    _METADATA_LINE: pp.ParserElement = pp.ZeroOrMore(\n\t        (\n\t            pp.AtLineStart(\"!\").suppress()\n\t            + (pp.Optional(pp.Word(pp.printables + \" \")) + pp.line_end.suppress())\n\t            .set_whitespace_chars(\" \\t\")\n\t            .set_results_name(\"metadata\", True)\n\t        )\n\t    )\n\t    _CELL_STATES: pp.ParserElement = pp.one_of(\". O\").set_whitespace_chars(\" \\t\")\n", "    # .O\n\t    # ..O\n\t    # OOO\n\t    _DATA_ROWS: pp.ParserElement = pp.OneOrMore(\n\t        (pp.ZeroOrMore(_CELL_STATES) + pp.line_end.suppress()).set_results_name(\n\t            \"data_rows\", True\n\t        )\n\t    )\n\t    _PARSER: pp.ParserElement = _METADATA_LINE + _DATA_ROWS\n\t    def __init__(self, file: str) -> None:\n", "        \"\"\"Initialise the reader.\"\"\"\n\t        super().__init__(file)\n\t        self._file: TextIOWrapper\n\t    def __enter__(self) -> FileReader:\n\t        \"\"\"Enter context manager which causes the file to be parsed immediately.\"\"\"\n\t        self._file = open(self._filename, \"r\", encoding=\"UTF-8\")\n\t        results: pp.ParseResults = PlainTextReader._PARSER.parse_file(self._file)\n\t        self.metadata = (\n\t            results.metadata.as_list() if results.metadata else []  # type:ignore\n\t        )\n", "        for row_index, row in enumerate(results.data_rows.as_list()):  # type:ignore\n\t            for col_index, cell in enumerate(row):  # type:ignore\n\t                if cell == \"O\":\n\t                    self.cells.append((row_index, col_index))\n\t        return self\n\t    def __exit__(\n\t        self,\n\t        exc_type: type[BaseException] | None,\n\t        exc_val: BaseException | None,\n\t        exc_tb: TracebackType | None,\n", "    ) -> None:\n\t        \"\"\"Exit context manager.\"\"\"\n\t        self._file.close()\n"]}
{"filename": "python3/gameoflife/dataio/plaintext_writer.py", "chunked_list": ["\"\"\"File Writer for Plain Text file types.\"\"\"\n\tfrom io import TextIOWrapper\n\tfrom types import TracebackType\n\tfrom gameoflife import Coordinate\n\tfrom .file_writer import FileWriter, FileWriterContextManager\n\t# pylint: disable=pointless-string-statement\n\t\"\"\" \n\t!Name: Glider\n\t!Author: Richard K. Guy\n\t!The smallest, most common, and first discovered spaceship.\n", "!www.conwaylife.com/wiki/index.php?title=Glider\n\t.O\n\t..O\n\tOOO\n\t\"\"\"\n\tclass PlainTextWriter(FileWriterContextManager):\n\t    \"\"\"Implements writing Plain Text data to files.\"\"\"\n\t    def __init__(self, file: str) -> None:\n\t        \"\"\"Initialise the reader.\"\"\"\n\t        super().__init__(file)\n", "        self._file: TextIOWrapper\n\t    def __enter__(self) -> FileWriter:\n\t        \"\"\"Enter context manager which causes the file to be parsed immediately.\"\"\"\n\t        self._file = open(self._filename, \"w\", encoding=\"UTF-8\")\n\t        return self\n\t    def __exit__(\n\t        self,\n\t        exc_type: type[BaseException] | None,\n\t        exc_val: BaseException | None,\n\t        exc_tb: TracebackType | None,\n", "    ) -> None:\n\t        \"\"\"Exit context manager.\"\"\"\n\t        self._file.close()\n\t    def write(self, metadata: list[str], cells: list[Coordinate]) -> None:\n\t        \"\"\"Write the Game of Life data to the file.\"\"\"\n\t        for data in metadata:\n\t            self._file.write(f\"!{data}\\n\")\n\t        if cells:\n\t            # find the min limits\n\t            min_row: int = cells[0][0]\n", "            min_col: int = cells[0][1]\n\t            for row, col in cells:\n\t                min_row = row if row < min_row else min_row\n\t                min_col = col if col < min_col else min_col\n\t            # keep track of where we wrote the last cell\n\t            row_index: int = min_row\n\t            col_index: int = min_col\n\t            for row, col in cells:\n\t                # get the difference in rows from the \"last\" cell to this one\n\t                # this will be 0 when we're on the same row\n", "                row_difference: int = row - row_index\n\t                if row_difference > 0:\n\t                    # write out the number of newlines required\n\t                    self._file.write(\"\\n\" * row_difference)\n\t                    # reset the col_index as we are on a new row\n\t                    col_index = min_col\n\t                # get the difference in cols from the \"last\" cell to this one\n\t                col_difference: int = col - col_index\n\t                # if there is a col difference then that is a dead cell gap\n\t                if col_difference > 0:\n", "                    self._file.write(\".\" * col_difference)\n\t                # finish by writing the live cell\n\t                self._file.write(\"O\")\n\t                # update the index to point to the last cell +1 col of the cell we just wrote\n\t                row_index = row\n\t                col_index = col + 1\n\t            self._file.write(\"\\n\")\n"]}
{"filename": "python3/gameoflife/dataio/file_writer.py", "chunked_list": ["\"\"\"File writer abstract class specifying the interface for writing cells to a file.\"\"\"\n\tfrom abc import ABC, abstractmethod\n\tfrom types import TracebackType\n\tfrom gameoflife import Coordinate\n\tclass FileWriter(ABC):\n\t    \"\"\"ABC for the interface of different file encoding types for cells for Game of Life.\"\"\"\n\t    def __init__(self, file: str) -> None:\n\t        \"\"\"Initialise.\"\"\"\n\t        self._filename: str = file\n\t    @abstractmethod\n", "    def write(self, metadata: list[str], cells: list[Coordinate]) -> None:\n\t        \"\"\"Write the Game of Life data to the file.\"\"\"\n\tclass FileWriterContextManager(FileWriter):\n\t    \"\"\"ABC for adding context management to FileReaders.\"\"\"\n\t    @abstractmethod\n\t    def __enter__(self) -> FileWriter:\n\t        \"\"\"Enter context manager.\"\"\"\n\t    @abstractmethod\n\t    def __exit__(\n\t        self,\n", "        exc_type: type[BaseException] | None,\n\t        exc_val: BaseException | None,\n\t        exc_tb: TracebackType | None,\n\t    ) -> None:\n\t        \"\"\"Exit context manager.\"\"\"\n"]}
{"filename": "python3/gameoflife/dataio/__init__.py", "chunked_list": ["\"\"\"Data IO related code.\"\"\"\n"]}
{"filename": "python3/gameoflife/dataio/runlengthencoded_reader.py", "chunked_list": ["\"\"\"File Loader for Run Length Encoded file types.\"\"\"\n\tfrom io import TextIOWrapper\n\tfrom types import TracebackType\n\timport pyparsing as pp\n\tfrom .file_reader import FileReader, FileReaderContextManager\n\t# pylint: disable=pointless-string-statement\n\t\"\"\" \n\t#N Glider\n\t#O Richard K. Guy\n\t#C The smallest, most common, and first discovered spaceship. Diagonal, has period 4 and speed c/4.\n", "#C www.conwaylife.com/wiki/index.php?title=Glider\n\tx = 3, y = 3, rule = B3/S23\n\tbob$2bo$3o!\n\t\"\"\"\n\tclass RunLengthEncodedReader(FileReaderContextManager):\n\t    \"\"\"Implements loading Run Length Encoded data from files.\"\"\"\n\t    _INT_NUMBER: pp.ParserElement = pp.Word(pp.nums).set_parse_action(  # type:ignore\n\t        lambda t: [int(t[0])]  # type:ignore\n\t    )\n\t    # is there an existing pyparsing element that has all alphas separated by spaces?\n", "    _CELL_STATES: pp.ParserElement = pp.one_of(\" \".join(list(pp.alphas)))\n\t    # # N Glider\n\t    # # O Richard K. Guy\n\t    # #C www.conwaylife.com/wiki/index.php?title=Glider\n\t    # #\n\t    _METADATA_LINE: pp.ParserElement = pp.ZeroOrMore(\n\t        (\n\t            pp.AtLineStart(\"#\").suppress()\n\t            + pp.Optional(\n\t                pp.one_of(\" \".join(list(pp.printables)))\n", "            ).set_whitespace_chars(\" \\t\")\n\t            + pp.Optional(pp.Word(pp.printables + \" \")).set_whitespace_chars(\" \\t\")\n\t        ).set_results_name(\"metadata\", True)\n\t    )\n\t    # x = 3, y = 3, rule = B3/S23\n\t    # x = 3, y = 3\n\t    _HEADER: pp.ParserElement = (\n\t        pp.one_of(\"x y\") + pp.Suppress(\"=\") + _INT_NUMBER + pp.Optional(\",\").suppress()\n\t    ).set_results_name(\"header\", True) * 2\n\t    # Parse the actual rule in the future:\n", "    #   If a rule string is B34/S34:\n\t    #     B34 means a cell is born if it has 3 or 4 neighbors.\n\t    #     S34 means a cell survives if it has 3 or 4 neighbors.\n\t    # x = 3, y = 3, rule = B3/S23\n\t    # x = 3, y = 3\n\t    _RULE: pp.ParserElement = pp.Optional(\n\t        pp.Keyword(\"rule\").suppress()\n\t        + pp.Suppress(\"=\")\n\t        + pp.Word(pp.printables + \" \").set_whitespace_chars(\" \\t\")\n\t    ).set_results_name(\"rule\")\n", "    # bob$2bo$3o!\n\t    #\n\t    # 24bo$22bobo$12b2o6b2o12b2o$11bo3bo4b2o12b2o$2o8bo5bo3b2o$2o8bo3bob2o4b\n\t    # obo$10bo5bo7bo$11bo3bo$12b2o!\n\t    _DATA_ROWS: pp.ParserElement = pp.OneOrMore(\n\t        (\n\t            pp.ZeroOrMore(pp.Optional(_INT_NUMBER) + _CELL_STATES)\n\t            + (\n\t                _INT_NUMBER + pp.Literal(\"$\")\n\t                | pp.Literal(\"$\").suppress()\n", "                | pp.Literal(\"!\").suppress()\n\t            )\n\t        ).set_results_name(\"data_rows\", True)\n\t    )\n\t    _PARSER: pp.ParserElement = _METADATA_LINE + _HEADER + _RULE + _DATA_ROWS\n\t    def __init__(self, file: str) -> None:\n\t        \"\"\"Initialise the reader.\"\"\"\n\t        super().__init__(file)\n\t        self._file: TextIOWrapper\n\t        self._cols: int\n", "        self._rows: int\n\t        self._rule: str\n\t    def __enter__(self) -> FileReader:\n\t        \"\"\"Enter context manager which causes the file to be parsed immediately.\"\"\"\n\t        self._file = open(self._filename, \"r\", encoding=\"UTF-8\")\n\t        # start: int = perf_counter_ns()\n\t        results: pp.ParseResults = RunLengthEncodedReader._PARSER.parse_file(self._file)\n\t        # last_gen_time: int = perf_counter_ns() - start\n\t        # print(f\"Parsing finished in {round(last_gen_time / 1000)} µs\")\n\t        self.metadata = (\n", "            results.metadata.as_list() if results.metadata else []  # type:ignore\n\t        )\n\t        self._cols = int(results.header[0][1])  # type:ignore\n\t        self._rows = int(results.header[1][1])  # type:ignore\n\t        if results.rule:  # type: ignore\n\t            self._rule = results.rule[0]  # type: ignore\n\t        # print(\"Starting to process parsed data...\")\n\t        # start = perf_counter_ns()\n\t        # create iterator in order to add types\n\t        row_iter: enumerate[list[int | str]] = enumerate(\n", "            results.data_rows  # type:ignore\n\t        )\n\t        # it is necessary to keep track of an empty row offset for data like \"7$\"\n\t        empty_rows: int = 0\n\t        # iterate over the rows of data, equivalent to rows of cells\n\t        for row_index, data_row in row_iter:\n\t            col_index: int = 0\n\t            # create another iterator so we can add types\n\t            data_iter: enumerate[int | str] = enumerate(data_row)  # type:ignore\n\t            # iterate of the data elements - note not equivalent to cells yet\n", "            for data_index, data in data_iter:\n\t                # if we get an int then we replicate that number of cells\n\t                if isinstance(data, int):\n\t                    # is it a number of empty rows\n\t                    if data_row[data_index + 1] == \"$\":\n\t                        # track the number of empty rows, subtract 1 to avoid double counting it\n\t                        # because we are currently processing the first empty row\n\t                        empty_rows += data - 1\n\t                    # if it is not an empty row\n\t                    else:\n", "                        live: bool = data_row[data_index + 1] == \"o\"\n\t                        # if we are adding live cells add their coords to the list of cells\n\t                        if live:\n\t                            for _ in range(data):\n\t                                self.cells.append((row_index + empty_rows, col_index))\n\t                                col_index += 1\n\t                        # \"skip\" dead cells by adding them as an offset to the col index\n\t                        else:\n\t                            col_index += data\n\t                    # skip the next data value as we just \"used\" it\n", "                    next(data_iter, None)\n\t                # otherwise transform the data value to a cell value and store it\n\t                else:\n\t                    live = data_row[data_index] == \"o\"\n\t                    if live:\n\t                        self.cells.append((row_index + empty_rows, col_index))\n\t                    col_index += 1\n\t        # last_gen_time = perf_counter_ns() - start\n\t        # print(f\"Processing parsed data finished in {round(last_gen_time / 1000)} µs\")\n\t        return self\n", "    def __exit__(\n\t        self,\n\t        exc_type: type[BaseException] | None,\n\t        exc_val: BaseException | None,\n\t        exc_tb: TracebackType | None,\n\t    ) -> None:\n\t        \"\"\"Exit context manager.\"\"\"\n\t        self._file.close()\n\t    def __str__(self) -> str:\n\t        \"\"\"To string.\"\"\"\n", "        return (\n\t            super().__str__()\n\t            + f\"\\ncols: {self._cols}, rows: {self._rows}\\n\"\n\t            + f\"rule: {self._rule if hasattr(self, '_rule') else 'none'}\"\n\t        )\n"]}
{"filename": "python3/gameoflife/dataio/file_reader.py", "chunked_list": ["\"\"\"File reader abstract class specifying the interface for loading cells from a file.\"\"\"\n\tfrom abc import ABC, abstractmethod\n\tfrom functools import reduce\n\tfrom types import TracebackType\n\tfrom gameoflife import Coordinate\n\tclass FileReader(ABC):\n\t    \"\"\"ABC for the interface of different file encoding types for cells for Game of Life.\"\"\"\n\t    def __init__(self, file: str) -> None:\n\t        \"\"\"Initialise.\"\"\"\n\t        self._filename: str = file\n", "        self.cells: list[Coordinate] = []\n\t        self.metadata: list[list[int | bool]]\n\t    @staticmethod\n\t    def _coord_max(left: Coordinate, right: Coordinate) -> Coordinate:\n\t        \"\"\"Reduce function for getting the max bounds of cells.\"\"\"\n\t        left_row: int = left[0]\n\t        left_col: int = left[1]\n\t        right_row: int = right[0]\n\t        right_col: int = right[1]\n\t        return (\n", "            left_row if left_row > right_row else right_row,\n\t            left_col if left_col > right_col else right_col,\n\t        )\n\t    def __str__(self) -> str:\n\t        \"\"\"\n\t        To str method default implementation.\n\t        Sublasses might want to replace or augment this output.\n\t        WARNING: for large patterns this will run out of memory as it tries to print a matrix.\n\t        \"\"\"\n\t        # make a more human readable list of the cell values\n", "        # first get the max row and col\n\t        max_coords: Coordinate = reduce(FileReader._coord_max, self.cells, (0, 0))\n\t        # then initialise a 2d list of that size\n\t        cell_matrix: list[list[bool]] = [\n\t            [False for _ in range(max_coords[1] + 1)] for _ in range(max_coords[0] + 1)\n\t        ]\n\t        # then set all the live cells in that 2d list\n\t        for row, col in self.cells:\n\t            cell_matrix[row][col] = True\n\t        # then turn that 2d list into a cell board string\n", "        cells_str: str = \"\\n\".join(\n\t            [\n\t                \" \".join([\"■\" if cell else \".\" for cell in cell_row])\n\t                for cell_row in cell_matrix\n\t            ]\n\t        )\n\t        return (\n\t            f\"{type(self).__name__}\\n\"\n\t            + f\"file: {self._filename}\\n\"\n\t            + f\"metadata: {self.metadata}\\n\"\n", "            + f\"cells:\\n{cells_str}\"\n\t        )\n\t    # TO DO: add getting top-left coords, which will need new parsing too\n\t    # Example: #R -22 -57\n\t    # Gives the coordinates of the top-left corner of the pattern. RLE files produced by XLife\n\t    # usually have this line, and the coordinates are usually negative, with the intention of\n\t    # placing the centre of the pattern at the origin.\n\tclass FileReaderContextManager(FileReader):\n\t    \"\"\"ABC for adding context management to FileReaders.\"\"\"\n\t    @abstractmethod\n", "    def __enter__(self) -> FileReader:\n\t        \"\"\"Enter context manager.\"\"\"\n\t    @abstractmethod\n\t    def __exit__(\n\t        self,\n\t        exc_type: type[BaseException] | None,\n\t        exc_val: BaseException | None,\n\t        exc_tb: TracebackType | None,\n\t    ) -> None:\n\t        \"\"\"Exit context manager.\"\"\"\n"]}
{"filename": "python3/gameoflife/dataio/create_io.py", "chunked_list": ["\"\"\"\n\tSimple function to create the different FileReaders and FileWriters.\n\tUsing separate file to avoid module import issues.\n\t\"\"\"\n\tfrom .file_reader import FileReaderContextManager\n\tfrom .runlengthencoded_reader import RunLengthEncodedReader\n\tfrom .plaintext_reader import PlainTextReader\n\tfrom .file_writer import FileWriterContextManager\n\tfrom .plaintext_writer import PlainTextWriter\n\tdef create_reader(file: str) -> FileReaderContextManager:\n", "    \"\"\"Create and return the correct FileReader.\"\"\"\n\t    match file.lower().split(\".\")[-1]:\n\t        case \"rle\":\n\t            return RunLengthEncodedReader(file)\n\t        case \"cells\":\n\t            return PlainTextReader(file)\n\t        case other:\n\t            raise ValueError(\n\t                f\"Can't tell what file type this is from its extension: '{other}', from {file}\"\n\t            )\n", "    # circumvent pylint bug where it thinks create_reader() can return a not-ContextManager\n\t    # just need to return a ContextManager here, even though the code can't be reached\n\t    # see e.g.: https://github.com/pylint-dev/pylint/issues/5273\n\t    return RunLengthEncodedReader(\"\")\n\tdef create_writer(file: str) -> FileWriterContextManager:\n\t    \"\"\"Create and return the correct FileWriter.\"\"\"\n\t    match file.lower().split(\".\")[-1]:\n\t        # case \"rle\":\n\t        #     return RunLengthEncodedWriter(file)\n\t        case \"cells\":\n", "            return PlainTextWriter(file)\n\t        case other:\n\t            raise ValueError(\n\t                f\"Can't tell what file type this is from its extension: '{other}', from {file}\"\n\t            )\n\t    # circumvent pylint bug where it thinks create_reader() can return a not-ContextManager\n\t    # just need to return a ContextManager here, even though the code can't be reached\n\t    # see e.g.: https://github.com/pylint-dev/pylint/issues/5273\n\t    return PlainTextWriter(\"\")\n"]}
{"filename": "python3/tests/test_file_writers.py", "chunked_list": ["\"\"\"Tests for all the FileWriter implementations.\"\"\"\n\tfrom os import stat, remove\n\tfrom os.path import isfile\n\tfrom time import time\n\tfrom pytest import raises\n\tfrom gameoflife.dataio.create_io import create_writer, create_reader\n\tfrom gameoflife.dataio.file_writer import FileWriter\n\tfrom gameoflife.dataio.plaintext_writer import PlainTextWriter\n\tfrom gameoflife import Coordinate, GameOfLife, GameOfLifeSet\n\tdef test_create_writer() -> None:\n", "    \"\"\"Test the create_writer function.\"\"\"\n\t    writer: FileWriter = create_writer(\"test_file.cells\")\n\t    assert writer.__class__ is PlainTextWriter\n\t    with raises(ValueError):\n\t        create_writer(\"test_file.not_a_real_extension\")\n\tdef test_write_gosper() -> None:\n\t    \"\"\"Test load and writing a Gosper glider gun.\"\"\"\n\t    _test_load_write(\"../data/Gosper_glider_gun.cells\", 272)\n\tdef test_write_glider() -> None:\n\t    \"\"\"Test load and writing a Gosper glider gun.\"\"\"\n", "    _test_load_write(\"../data/glider.rle\", 50)\n\tdef test_write_growth() -> None:\n\t    \"\"\"Test load and writing a Gosper glider gun.\"\"\"\n\t    _test_load_write(\"../data/t1point5infinitegrowth2.rle\", 21617)\n\tdef _test_load_write(file_to_load: str, saved_file_size: int) -> None:\n\t    \"\"\"Test that we can save plaintext.\"\"\"\n\t    test_file_name: str = f\"{time()}_test_file.cells\"\n\t    gol: GameOfLife = GameOfLifeSet()\n\t    orig_cells: list[Coordinate]\n\t    with create_reader(file_to_load) as reader:\n", "        gol.add_cells(reader)\n\t        orig_cells = gol.get_live_cells()\n\t    with create_writer(test_file_name) as writer:\n\t        writer.write(\n\t            [\"This is a comment.\", \"And another!\", \"!\", \"\"], gol.get_live_cells()\n\t        )\n\t    assert isfile(test_file_name)\n\t    assert stat(test_file_name).st_size == saved_file_size\n\t    # test loading the saved data\n\t    gol = GameOfLifeSet()\n", "    with create_reader(test_file_name) as reader:\n\t        gol.add_cells(reader)\n\t    # Note that our PlainTextWriter writes the minimum it needs to, which can cause the written\n\t    # data to be different from what we started with.\n\t    # print(f\"orig: {orig_cells}\")\n\t    # print(f\"new:  {gol.get_live_cells()}\")\n\t    assert gol.get_live_cells() == orig_cells\n\t    # if the test fails then cleanup doesn't happen and the file is left in the filesystem...\n\t    remove(test_file_name)\n\tdef test_no_cells() -> None:\n", "    \"\"\"Test that we can save a game with no cells.\"\"\"\n\t    test_file_name: str = f\"{time()}_test_file.cells\"\n\t    with create_writer(test_file_name) as writer:\n\t        writer.write([\"This is a comment.\", \"And another!\", \"!\", \"\"], [])\n\t    assert isfile(test_file_name)\n\t    assert stat(test_file_name).st_size == 39\n\t    # if the test fails then cleanup doesn't happen and the file is left in the filesystem...\n\t    remove(test_file_name)\n"]}
{"filename": "python3/tests/test_file_readers.py", "chunked_list": ["\"\"\"Tests for all the FileReader implementations.\"\"\"\n\tfrom pytest import raises\n\tfrom gameoflife.dataio.create_io import create_reader\n\tfrom gameoflife.dataio.file_reader import FileReader\n\tfrom gameoflife.dataio.runlengthencoded_reader import RunLengthEncodedReader\n\tfrom gameoflife.dataio.plaintext_reader import PlainTextReader\n\timport pyparsing as pp\n\tdef test_create_reader() -> None:\n\t    \"\"\"Test the create_reader function.\"\"\"\n\t    reader: FileReader = create_reader(\"file.rle\")\n", "    assert reader.__class__ is RunLengthEncodedReader\n\t    reader = create_reader(\"file.cells\")\n\t    assert reader.__class__ is PlainTextReader\n\t    with raises(ValueError):\n\t        create_reader(\"foo.bar\")\n\t# pylint: disable=protected-access\n\t# pyright: reportPrivateUsage=false\n\tclass TestPlainText:\n\t    \"\"\"Tests specifically for the class PlainText.\"\"\"\n\t    def test_metadata_parser(self) -> None:\n", "        \"\"\"Test the METADATA parser.\"\"\"\n\t        results: pp.ParseResults = PlainTextReader._METADATA_LINE.parse_string(\n\t            \"\"\"\\\n\t!Name: Glider\n\t!Author: Richard K. Guy\n\t!The smallest, most common, and first discovered spaceship.\n\t!www.conwaylife.com/wiki/index.php?title=Glider\n\t.O\n\t..O\n\tOOO\n", "\"\"\"\n\t        )\n\t        assert results.metadata.as_list() == [  # type:ignore\n\t            [\"Name: Glider\"],\n\t            [\"Author: Richard K. Guy\"],\n\t            [\"The smallest, most common, and first discovered spaceship.\"],\n\t            [\"www.conwaylife.com/wiki/index.php?title=Glider\"],\n\t        ]\n\t    def test_data_rows_parser(self) -> None:\n\t        \"\"\"Test the CELL_ROWS parser.\"\"\"\n", "        results: pp.ParseResults = PlainTextReader._DATA_ROWS.parse_string(\n\t            \"\"\"\\\n\t.O\n\t..O\n\tOOO\n\t\"\"\"\n\t        )\n\t        assert results.data_rows.as_list() == [  # type:ignore\n\t            [\".\", \"O\"],\n\t            [\".\", \".\", \"O\"],\n", "            [\"O\", \"O\", \"O\"],\n\t            [],\n\t        ]\n\t        results = PlainTextReader._DATA_ROWS.parse_string(\n\t            \"\"\"\\\n\t........................O...........\n\t......................O.O...........\n\t............OO......OO............OO\n\t...........O...O....OO............OO\n\tOO........O.....O...OO..............\n", "OO........O...O.OO....O.O...........\n\t..........O.....O.......O...........\n\t...........O...O....................\n\t............OO......................\"\"\"\n\t        )\n\t        assert len(results.data_rows) == 9  # type:ignore\n\t        assert results.data_rows[0].as_list()[24] == \"O\"  # type:ignore\n\t        assert results.data_rows[6].as_list()[10] == \"O\"  # type:ignore\n\t        assert results.data_rows[8].as_list()[11] == \".\"  # type:ignore\n\t        assert results.data_rows[8].as_list()[12] == \"O\"  # type:ignore\n", "        assert results.data_rows[8].as_list()[13] == \"O\"  # type:ignore\n\t        assert results.data_rows[8].as_list()[14] == \".\"  # type:ignore\n\t    def test_plain_text(self) -> None:\n\t        \"\"\"Test the PlainText file type.\"\"\"\n\t        with create_reader(\"../data/glider.cells\") as reader:\n\t            assert reader.__class__ is PlainTextReader\n\t            assert reader.metadata  # type: ignore\n\t            assert reader.cells == [(0, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n\t            assert (\n\t                str(reader)\n", "                == \"\"\"\\\n\tPlainTextReader\n\tfile: ../data/glider.cells\n\tmetadata: [['Name: Glider'], ['Author: Richard K. Guy'], ['The smallest, most common, and first discovered spaceship.'], ['www.conwaylife.com/wiki/index.php?title=Glider']]\n\tcells:\n\t. ■ .\n\t. . ■\n\t■ ■ ■\"\"\"\n\t            )\n\t    def test_empty_data_rows(self) -> None:\n", "        \"\"\"Test the PlainText file type.\"\"\"\n\t        with create_reader(\"../data/empty_data_rows.cells\") as reader:\n\t            assert reader.__class__ is PlainTextReader\n\t            assert reader.metadata == []  # type: ignore\n\t            assert (\n\t                str(reader)\n\t                == \"\"\"\\\n\tPlainTextReader\n\tfile: ../data/empty_data_rows.cells\n\tmetadata: []\n", "cells:\n\t. . . . . . . . . . . . ■ ■\n\t. . . . . . . . . . . . . .\n\t. . . . . . . . . . . . . .\n\t. . . . . ■ . . . . . . . .\n\t. . ■ . . . . . . . . . . .\n\t. . . . . . . . . . . . . .\n\t. . . . . . . . . . . . . .\n\t. . . . . . . . . . . . . .\n\t. . . . . . . . . . . . . .\n", ". . . . . . . . . . . . . .\n\t■ . . . . . . . . . . . . .\"\"\"\n\t            )\n\t# pylint: disable=protected-access\n\t# pyright: reportPrivateUsage=false\n\tclass TestRunLengthEncoded:\n\t    \"\"\"Tests specifically for the class RunLengthEncoded.\"\"\"\n\t    def test_no_metadata(self) -> None:\n\t        \"\"\"Specific test for an RLE file with no metadata rows, and some other interesting things\n\t        thrown in.\"\"\"\n", "        with create_reader(\"../data/no_metadata_test.rle\") as reader:\n\t            assert reader.metadata == []\n\t            assert reader.cells == [\n\t                (0, 1),\n\t                (0, 3),\n\t                (0, 5),\n\t                (0, 7),\n\t                (2, 2),\n\t                (2, 3),\n\t                (2, 4),\n", "                (2, 5),\n\t                (2, 6),\n\t                (13, 0),\n\t                (13, 1),\n\t                (13, 2),\n\t                (13, 7),\n\t                (13, 8),\n\t                (13, 9),\n\t                (13, 10),\n\t                (13, 11),\n", "                (13, 12),\n\t                (13, 13),\n\t            ]\n\t    def test_empty_row_data(self) -> None:\n\t        \"\"\"Specific test for testing data patterns like \"7$\" and \"23$\" which specifies a number of\n\t        empty rows.\"\"\"\n\t        with create_reader(\"../data/t1point5infinitegrowth2.rle\") as reader:\n\t            # first two rows of data is (note \"2$\" at the end which skips a row of cells):\n\t            #\n\t            # 71b3o11b3o$70bo2bo10bo2bo$40b3o11b3o16bo4b3o6bo$40bo2bo10bo2bo15bo4bo\n", "            # 2bo5bo$40bo6b3o4bo17bo4bo8bo$40bo5bo2bo4bo$41bo8bo4bo2$...\n\t            # the skipped row is row index 7, so check it's all False\n\t            assert reader.cells[43] == (6, 55)\n\t            assert reader.cells[44] == (8, 72)\n\t            assert len(reader.cells) == 1186\n\t    def test_run_length_encoded(self) -> None:\n\t        \"\"\"Test the RunLengthEncoded file type.\"\"\"\n\t        # with create_reader(\"../data/Gosper_glider_gun.rle\") as reader:\n\t        with create_reader(\"../data/glider.rle\") as reader:\n\t            assert reader.__class__ is RunLengthEncodedReader\n", "            assert reader.metadata  # type: ignore\n\t            assert reader._cols  # type: ignore\n\t            assert reader._rows  # type: ignore\n\t            assert reader._rule  # type: ignore\n\t            assert reader.cells == [(0, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n\t            assert (\n\t                str(reader)\n\t                == \"\"\"\\\n\tRunLengthEncodedReader\n\tfile: ../data/glider.rle\n", "metadata: [['N', 'Glider'], ['O', 'Richard K. Guy'], ['C', \\\n\t'The smallest, most common, and first discovered spaceship. Diagonal, has period 4 and speed \\\n\tc/4.'], ['C', 'www.conwaylife.com/wiki/index.php?title=Glider']]\n\tcells:\n\t. ■ .\n\t. . ■\n\t■ ■ ■\n\tcols: 3, rows: 3\n\trule: B3/S23\"\"\"\n\t            )\n", "    def test_metadata_no_content(self) -> None:\n\t        \"\"\"Test the METADATA parser.\"\"\"\n\t        results: pp.ParseResults = RunLengthEncodedReader._METADATA_LINE.parse_string(\n\t            \"\"\"\\\n\t#N next row has trailing space\n\t#O \n\t#C\n\t#\n\t#C www.conwaylife.com/wiki/index.php?title=Glider\n\tx = 3, y = 3, rule = B3/S23\n", "bob$2bo$3o!\n\t\"\"\"\n\t        )\n\t        assert results.metadata.as_list() == [  # type:ignore\n\t            [\"N\", \"next row has trailing space\"],\n\t            [\"O\"],\n\t            [\"C\"],\n\t            [],\n\t            [\"C\", \"www.conwaylife.com/wiki/index.php?title=Glider\"],\n\t        ]\n", "    def test_metadata_parser(self) -> None:\n\t        \"\"\"Test the METADATA parser.\"\"\"\n\t        results: pp.ParseResults = RunLengthEncodedReader._METADATA_LINE.parse_string(\n\t            \"\"\"\\\n\t#N Glider\n\t#O Richard K. Guy\n\t#C The smallest, most common, and first discovered spaceship. Diagonal, has period 4 and speed c/4.\n\t#C www.conwaylife.com/wiki/index.php?title=Glider\n\tx = 3, y = 3, rule = B3/S23\n\tbob$2bo$3o!\n", "\"\"\"\n\t        )\n\t        assert results.metadata.as_list() == [  # type:ignore\n\t            [\"N\", \"Glider\"],\n\t            [\"O\", \"Richard K. Guy\"],\n\t            [\n\t                \"C\",\n\t                \"The smallest, most common, and first discovered spaceship. Diagonal, has period \"\n\t                + \"4 and speed c/4.\",\n\t            ],\n", "            [\"C\", \"www.conwaylife.com/wiki/index.php?title=Glider\"],\n\t        ]\n\t    def test_header_rule_parser(self) -> None:\n\t        \"\"\"Test the HEADER parser.\"\"\"\n\t        results: pp.ParseResults = (\n\t            RunLengthEncodedReader._HEADER + RunLengthEncodedReader._RULE\n\t        ).parse_string(\"x = 4, y = 5, rule = B3/S23\")\n\t        assert results.header.as_list() == [[\"x\", 4], [\"y\", 5]]  # type:ignore\n\t        assert results.rule.as_list() == [\"B3/S23\"]  # type:ignore\n\t        results = (\n", "            RunLengthEncodedReader._HEADER + RunLengthEncodedReader._RULE\n\t        ).parse_string(\"x = 4, y = 5\")\n\t        assert results.header.as_list() == [[\"x\", 4], [\"y\", 5]]  # type:ignore\n\t        assert len(results.rule) == 0  # type:ignore\n\t    def test_data_rows_parser(self) -> None:\n\t        \"\"\"Test the CELL_ROWS parser.\"\"\"\n\t        results: pp.ParseResults = RunLengthEncodedReader._DATA_ROWS.parse_string(\n\t            \"bob$2bo$3o!\"\n\t        )\n\t        assert results.data_rows.as_list() == [  # type:ignore\n", "            [\"b\", \"o\", \"b\"],\n\t            [2, \"b\", \"o\"],\n\t            [3, \"o\"],\n\t        ]\n\t        results = RunLengthEncodedReader._DATA_ROWS.parse_string(\n\t            \"\"\"\\\n\t24bo$22bobo$12b2o6b2o12b2o$11bo3bo4b2o12b2o$2o8bo5bo3b2o$2o8bo3bob2o4b\n\tobo$10bo5bo7bo$11bo3bo$12b2o!\n\t\"\"\"\n\t        )\n", "        assert len(results.data_rows) == 9  # type:ignore\n\t        assert results.data_rows[0].as_list() == [24, \"b\", \"o\"]  # type:ignore\n\t        assert results.data_rows[6].as_list() == [  # type:ignore\n\t            10,\n\t            \"b\",\n\t            \"o\",\n\t            5,\n\t            \"b\",\n\t            \"o\",\n\t            7,\n", "            \"b\",\n\t            \"o\",\n\t        ]\n\t        assert results.data_rows[8].as_list() == [12, \"b\", 2, \"o\"]  # type:ignore\n\t        # Specific test for data that starts with multiple newlines\n\t        results = RunLengthEncodedReader._DATA_ROWS.parse_string(\n\t            \"32$8b3o$7bo3bo$6bo4b2o!\"\n\t        )\n\t        assert results.data_rows.as_list() == [  # type:ignore\n\t            [32, \"$\"],\n", "            [8, \"b\", 3, \"o\"],\n\t            [7, \"b\", \"o\", 3, \"b\", \"o\"],\n\t            [6, \"b\", \"o\", 4, \"b\", 2, \"o\"],\n\t        ]\n"]}
{"filename": "python3/tests/test_game_of_life.py", "chunked_list": ["\"\"\"Tests for all the Conway's Game of Life implementations.\"\"\"\n\tfrom pytest import CaptureFixture, raises\n\tfrom gameoflife import (\n\t    MainGame,\n\t    GameOfLife,\n\t    GameOfLifeArrays,\n\t    GameOfLifeDict,\n\t    GameOfLifeSet,\n\t)\n\tfrom gameoflife.dataio.create_io import create_reader\n", "def test_set_unset_set() -> None:\n\t    \"\"\"\n\t    Test that we can set, unset, then set a cell as live.\n\t    GameOfLifeSortedDict had an issue where this wasn't working which was fixed in\n\t    commit 47543a63a3364f1d00b802d74f8cc136aacc181a.\n\t    \"\"\"\n\t    gol: GameOfLife = GameOfLifeArrays(100, 200)\n\t    set_cell_and_assert(gol, True, 1)\n\t    set_cell_and_assert(gol, False, 0)\n\t    set_cell_and_assert(gol, True, 1)\n", "    gol = GameOfLifeDict()\n\t    set_cell_and_assert(gol, True, 1)\n\t    set_cell_and_assert(gol, False, 0)\n\t    set_cell_and_assert(gol, True, 1)\n\t    gol = GameOfLifeSet()\n\t    set_cell_and_assert(gol, True, 1)\n\t    set_cell_and_assert(gol, False, 0)\n\t    set_cell_and_assert(gol, True, 1)\n\tdef set_cell_and_assert(gol: GameOfLife, live: bool, num_live: int) -> None:\n\t    \"\"\"Set a cell and assert it stuck.\"\"\"\n", "    gol.set_cell(50, 55, live)\n\t    assert gol.get_cell(50, 55) is live\n\t    assert gol.count_live_cells() == num_live\n\tclass TestGameOfLifeSet:\n\t    \"\"\"Tests specifically for the class GameOfLifeSet.\"\"\"\n\t    def test_get_live_cells(self) -> None:\n\t        \"\"\"Test the get_live_cells method.\"\"\"\n\t        gol: GameOfLife = GameOfLifeSet()\n\t        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n", "        assert gol.get_live_cells() == [(0, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n\t    def test_glider(self) -> None:\n\t        \"\"\"Test that a simple glider progresses as expected.\"\"\"\n\t        gol: GameOfLife = GameOfLifeSet()\n\t        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n\t        for _ in range(1000):\n\t            gol.progress()\n\t            assert gol.count_live_cells() == 5\n\t        assert gol.get_cell(250, 251) is True\n", "        assert gol.get_cell(251, 252) is True\n\t        assert gol.get_cell(252, 250) is True\n\t        assert gol.get_cell(252, 251) is True\n\t        assert gol.get_cell(252, 252) is True\n\t        assert gol.generation == 1000\n\t    def test_outofbounds(self) -> None:\n\t        \"\"\"Test that we get False when asking for a cell out of bounds.\"\"\"\n\t        gol: GameOfLife = GameOfLifeSet()\n\t        gol.set_cell(10, 10, True)\n\t        assert gol.get_cell(2, 2) is False\n", "        assert gol.get_cell(10, 10) is True\n\t    def test_str(self) -> None:\n\t        \"\"\"Test the str generation.\"\"\"\n\t        gol: GameOfLife = GameOfLifeSet()\n\t        MainGame.add_glider(gol)\n\t        print(gol)\n\t        for _ in range(100):\n\t            gol.progress()\n\t            assert gol.count_live_cells() == 5\n\t        print(gol)\n", "        assert str(gol) == \"Generation: 100\\n  ■   \\n    ■ \\n■ ■ ■ \"\n\t    def test_match_case2(self) -> None:\n\t        \"\"\"Test a live cell with exactly 2 neighbours.\"\"\"\n\t        gol: GameOfLife = GameOfLifeSet()\n\t        gol.set_cell(0, 0, True)\n\t        gol.set_cell(0, 1, True)\n\t        gol.set_cell(0, 2, True)\n\t        gol.progress()\n\t        assert gol.get_cell(-1, 1) is True\n\t        assert gol.get_cell(1, 1) is True\n", "        assert gol.get_cell(0, 0) is False\n\t        assert gol.get_cell(0, 2) is False\n\tclass TestGameOfLifeArrays:\n\t    \"\"\"Tests specifically for the class GameOfLifeArrays.\"\"\"\n\t    def test_get_live_cells(self) -> None:\n\t        \"\"\"Test the get_live_cells method.\"\"\"\n\t        gol: GameOfLife = GameOfLifeArrays(12, 15)\n\t        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n\t        assert gol.get_live_cells() == [(0, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n", "    def test_modulo_wrap(self) -> None:\n\t        \"\"\"Test that a patter larger than the array is wrapped correctly.\"\"\"\n\t        gol: GameOfLife = GameOfLifeArrays(12, 10)\n\t        with create_reader(\"../data/test_wrap.cells\") as reader:\n\t            gol.add_cells(reader)\n\t        assert (\n\t            str(gol)\n\t            == \"Generation: 0\\n\"\n\t            + \"□ □ ■ □ □ ■ □ ■ □ □ \\n\"\n\t            + \"□ □ ■ □ □ □ ■ □ ■ □ \\n\"\n", "            + \"□ □ ■ □ □ □ □ ■ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ ■ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ ■ \\n\"\n\t            + \"■ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ ■ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ ■ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ ■ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ ■ □ □ □ □ □ \\n\"\n\t            + \"□ □ ■ □ □ ■ □ □ □ □ \\n\"\n\t            + \"□ □ ■ □ □ □ ■ □ □ □ \"\n", "        )\n\t    def test_glider(self) -> None:\n\t        \"\"\"Test that a simple glider progresses as expected.\"\"\"\n\t        gol: GameOfLife = GameOfLifeArrays(12, 15)\n\t        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n\t        for _ in range(1000):\n\t            gol.progress()\n\t            assert gol.count_live_cells() == 5\n\t        assert gol.get_cell(0, 10) is True\n", "        assert gol.get_cell(0, 11) is True\n\t        assert gol.get_cell(0, 12) is True\n\t        assert gol.get_cell(10, 11) is True\n\t        assert gol.get_cell(11, 12) is True\n\t        assert gol.generation == 1000\n\t    def test_outofbounds(self) -> None:\n\t        \"\"\"Test that we get None when asking for a cell out of bounds.\"\"\"\n\t        gol: GameOfLife = GameOfLifeArrays(12, 15)\n\t        gol.set_cell(5, 6, True)\n\t        assert gol.get_cell(5, 6) is True\n", "        assert gol.get_cell(2, 2) is False\n\t        assert gol.get_cell(20, 20) is None\n\t    def test_str(self) -> None:\n\t        \"\"\"Test the str generation.\"\"\"\n\t        gol: GameOfLife = GameOfLifeArrays(12, 15)\n\t        MainGame.add_glider(gol)\n\t        for _ in range(100):\n\t            gol.progress()\n\t            assert gol.count_live_cells() == 5\n\t        assert (\n", "            str(gol)\n\t            == \"Generation: 100\\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ ■ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ ■ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ ■ ■ ■ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n", "            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \\n\"\n\t            + \"□ □ □ □ □ □ □ □ □ □ □ □ □ □ □ \"\n\t        )\n\tclass TestGameOfLifeDict:\n\t    \"\"\"Tests specifically for the class GameOfLifeSortedDict.\"\"\"\n\t    def test_get_live_cells(self) -> None:\n\t        \"\"\"Test the get_live_cells method.\"\"\"\n\t        gol: GameOfLife = GameOfLifeDict()\n", "        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n\t        with raises(NotImplementedError):\n\t            gol.get_live_cells()\n\t    def test_glider(self) -> None:\n\t        \"\"\"Test that a simple glider progresses as expected.\"\"\"\n\t        gol: GameOfLife = GameOfLifeDict()\n\t        MainGame.add_glider(gol)\n\t        assert gol.count_live_cells() == 5\n\t        for _ in range(1000):\n", "            gol.progress()\n\t            assert gol.count_live_cells() == 5\n\t        assert gol.get_cell(250, 251) is True\n\t        assert gol.get_cell(251, 252) is True\n\t        assert gol.get_cell(252, 250) is True\n\t        assert gol.get_cell(252, 251) is True\n\t        assert gol.get_cell(252, 252) is True\n\t        assert gol.generation == 1000\n\t    def test_outofbounds(self) -> None:\n\t        \"\"\"Test that we get False when asking for a cell out of bounds.\"\"\"\n", "        gol: GameOfLife = GameOfLifeDict()\n\t        gol.set_cell(10, 10, True)\n\t        assert gol.get_cell(2, 2) is False\n\t        assert gol.get_cell(10, 10) is True\n\t    def test_str(self) -> None:\n\t        \"\"\"Test the str generation.\"\"\"\n\t        gol: GameOfLife = GameOfLifeDict()\n\t        MainGame.add_glider(gol)\n\t        for _ in range(100):\n\t            gol.progress()\n", "            assert gol.count_live_cells() == 5\n\t        assert (\n\t            str(gol)\n\t            == \"Generation: 100\\n\"\n\t            + \"  □ □ □   \\n\"\n\t            + \"  □ ■ □ □ \\n\"\n\t            + \"□ □ □ ■ □ \\n\"\n\t            + \"□ ■ ■ ■ □ \\n\"\n\t            + \"□ □ □ □ □ \"\n\t        )\n", "    def test_match_case2(self) -> None:\n\t        \"\"\"Test a live cell with exactly 2 neighbours.\"\"\"\n\t        gol: GameOfLife = GameOfLifeDict()\n\t        gol.set_cell(0, 0, True)\n\t        gol.set_cell(0, 1, True)\n\t        gol.set_cell(0, 2, True)\n\t        gol.progress()\n\t        assert gol.get_cell(-1, 1) is True\n\t        assert gol.get_cell(1, 1) is True\n\t        assert gol.get_cell(0, 0) is False\n", "        assert gol.get_cell(0, 2) is False\n\t# pylint: disable=protected-access\n\t# pyright: reportPrivateUsage=false\n\tclass TestMainGame:\n\t    \"\"\"\n\t    Tests specifically for MainGame.\n\t    Testing this is really awful and will mean changing long strings of text all the time.\n\t    Is there a better way to do this?\n\t    \"\"\"\n\t    # use string concatenation to highlight necessary trailing spaces\n", "    PRINT_UI_OUTPUT: str = (\n\t        \"\\n\"\n\t        + \"                                                     Controls                   \\n\"\n\t        + \"================================================================================\\n\"\n\t        + \"                                                     (ノº益º)ノ彡┻━┻  q or ESC  \\n\"\n\t        + \"                                                     Edit cells:      e         \\n\"\n\t        + \"                                                     Step forward:    <spacebar>\\n\"\n\t        + \"                                                     Autorun on/off:  a         \\n\"\n\t        + \"                                                     Speed up/down:   +/-       \\n\"\n\t        + \"                                                     Move the view:   ⇦⇧⇩⇨      \"\n", "    )\n\t    # use string concatenation to highlight necessary trailing spaces\n\t    PRINT_UI_EDIT_MODE_OUTPUT: str = (\n\t        \"\\n\"\n\t        + \"                                                     Controls                   \\n\"\n\t        + \"================================================================================\\n\"\n\t        + \"                                                     (ノº益º)ノ彡┻━┻  q or ESC  \\n\"\n\t        + \"                                                     Exit edit mode:  e         \\n\"\n\t        + \"                                                     Live/dead cell:  <spacebar>\\n\"\n\t        + \"                                                     Move cursor:     ⇦⇧⇩⇨      \\n\"\n", "        + \"                                                                                \\n\"\n\t        + \"                                                                                \"\n\t    )\n\t    # use string concatenation to highlight necessary trailing spaces\n\t    PRINT_UI_UPDATE_OUTPUT: str = (\n\t        \" ■ Conways's Game of Life □ \\n\"\n\t        + \" ========================== \\n\"\n\t        + \"Info\\n\"\n\t        + \"Generation:    0\\n\"\n\t        + \"Live cells:    5   \\n\"\n", "        + \"Frame delay:   250 ms    \\n\"\n\t        + \"Progress time: 0 µs   \\n\"\n\t        + \"Coords:        row:0 col:0  \"\n\t    )\n\t    PRINT_GAME_OUTPUT: str = (\n\t        \"  ■                                                                            \\n\"\n\t        + \"    ■                                                                          \\n\"\n\t        + \"■ ■ ■                                                                          \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n", "        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n\t        + \"                                                                               \\n\"\n", "    )\n\t    @staticmethod\n\t    def create_main_game() -> MainGame:\n\t        \"\"\"Create a MainGame and a Terminal and return them.\"\"\"\n\t        main: MainGame = MainGame(False, \"../data/glider.rle\")\n\t        main._run = False\n\t        main.main()\n\t        return main\n\t    def test_change_speed(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the keyboard input functions.\"\"\"\n", "        main: MainGame = TestMainGame.create_main_game()\n\t        # increasing speed shorts circuits to 0\n\t        for _ in range(7):\n\t            main._increase_speed()\n\t            capfd.readouterr()\n\t        assert main._sleep_time == 0.001953125\n\t        main._increase_speed()\n\t        capfd.readouterr()\n\t        assert main._sleep_time == 0\n\t        # decreasing speed goes back to 250 ms\n", "        for _ in range(8):\n\t            main._decrease_speed()\n\t            capfd.readouterr()\n\t        assert main._sleep_time == 0.25\n\t        # decreasing speed goes to 64\n\t        for _ in range(8):\n\t            main._decrease_speed()\n\t            capfd.readouterr()\n\t        assert main._sleep_time == 64\n\t    def test_update_screen_size(self, capfd: CaptureFixture[str]) -> None:\n", "        \"\"\"Test the update_screen_size function.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        main.update_screen_size()\n\t        capfd.readouterr()\n\t        assert main._term_width == 80\n\t        assert main._term_height == 25\n\t        assert main._header_loc == 40\n\t        assert main._last_edit_location == (8, 38)\n\t    def test_initialise(self) -> None:\n\t        \"\"\"Test that we can even run at all.\"\"\"\n", "        assert MainGame(False)\n\t    def test_initialise_wrap(self) -> None:\n\t        \"\"\"Test that we load different class when wrapping.\"\"\"\n\t        main: MainGame = MainGame(True)\n\t        assert main\n\t        assert main._gol.__class__.__name__ == GameOfLifeArrays(0, 0).__class__.__name__\n\t    def test_load_rle_file(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the loading of an RLE file.\"\"\"\n\t        main: MainGame = MainGame(False, \"../data/glider.rle\")\n\t        main._run = False\n", "        main.main()\n\t        main.print_game()\n\t        out: str = capfd.readouterr()[0]\n\t        assert out == TestMainGame.PRINT_GAME_OUTPUT\n\t    def test_load_plain_text_file(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the loading of a Plain Text file.\"\"\"\n\t        main: MainGame = MainGame(True, \"../data/glider.cells\", 15, 4)\n\t        main._run = False\n\t        main.main()\n\t        main._origin_col = -4\n", "        main.print_game()\n\t        out: str = capfd.readouterr()[0]\n\t        assert (\n\t            out\n\t            == \"        . ■ . .                                                                \\n\"\n\t            + \"        . . ■ .                                                                \\n\"\n\t            + \"        ■ ■ ■ .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n", "            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t            + \"        . . . .                                                                \\n\"\n\t        )\n", "    def test_print_ui(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the print_ui method.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        main.print_ui()\n\t        out: str = capfd.readouterr()[0]\n\t        assert out == TestMainGame.PRINT_UI_OUTPUT\n\t    def test_print_ui_edit_mode(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the print_ui method when edit mode is on.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        main._edit_mode = True\n", "        main.print_ui()\n\t        out: str = capfd.readouterr()[0]\n\t        assert out == TestMainGame.PRINT_UI_EDIT_MODE_OUTPUT\n\t    def test_print_ui_update(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the print_ui_update method.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        main.print_ui_update(False, main._gol.count_live_cells(), 0)\n\t        out: str = capfd.readouterr()[0]\n\t        assert out == TestMainGame.PRINT_UI_UPDATE_OUTPUT\n\t    def test_print_ui_update_progress(self, capfd: CaptureFixture[str]) -> None:\n", "        \"\"\"Test the print_ui_update method.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        # test left edge turnaround\n\t        main._header_loc = 15\n\t        main._header_dir_left = True\n\t        main.print_ui_update(True, main._gol.count_live_cells(), 0)\n\t        capfd.readouterr()\n\t        assert main._header_loc == 14\n\t        assert main._header_dir_left is True\n\t        main.print_ui_update(True, main._gol.count_live_cells(), 0)\n", "        out: str = capfd.readouterr()[0]\n\t        # the output is identical to the previos test_print_ui because term control characters\n\t        # are not printed\n\t        assert out == TestMainGame.PRINT_UI_UPDATE_OUTPUT\n\t        assert main._header_loc == 15\n\t        assert main._header_dir_left is False\n\t        main.print_ui_update(True, main._gol.count_live_cells(), 0)\n\t        assert main._header_loc == 16\n\t        assert main._header_dir_left is False\n\t        # test right edge turnaround\n", "        main._header_loc = 66\n\t        main.print_ui_update(True, main._gol.count_live_cells(), 0)\n\t        assert main._header_loc == 65\n\t        assert main._header_dir_left is True\n\t    def test_print_game(self, capfd: CaptureFixture[str]) -> None:\n\t        \"\"\"Test the print_game method.\"\"\"\n\t        main: MainGame = TestMainGame.create_main_game()\n\t        main.print_game()\n\t        out: str = capfd.readouterr()[0]\n\t        assert out == TestMainGame.PRINT_GAME_OUTPUT\n"]}
{"filename": "python3/tests/test_performance.py", "chunked_list": ["\"\"\"Performance tests for all the Conway's Game of Life implementations.\"\"\"\n\timport logging\n\tfrom time import perf_counter_ns\n\timport pytest\n\tfrom gameoflife import GameOfLife, GameOfLifeDict, GameOfLifeSet\n\tfrom gameoflife.dataio.create_io import create_reader\n\tpytestmark: pytest.MarkDecorator = pytest.mark.performance\n\tLOGGER: logging.Logger = logging.getLogger(__name__)\n\t# @pytest.mark.skip\n\tdef test_dict_progress_large_file() -> None:\n", "    \"\"\"Performance test for the GameOfLifeDict().progress() method.\"\"\"\n\t    gol: GameOfLife = GameOfLifeDict()\n\t    LOGGER.info(\"'create_reader(period59glidergun.rle)' starting...\")\n\t    start: int = perf_counter_ns()\n\t    with create_reader(\"../data/period59glidergun.rle\") as reader:\n\t        gol.add_cells(reader)\n\t    last_gen_time: int = perf_counter_ns() - start\n\t    LOGGER.info(\n\t        \"'create_reader(...)' time: %s µs\",\n\t        round(last_gen_time / 1000),\n", "    )\n\t    # measure the progress() method\n\t    times: int = 100\n\t    LOGGER.info(\"'gol.progress()' * %s starting...\", times)\n\t    start = perf_counter_ns()\n\t    for _ in range(times):\n\t        gol.progress()\n\t    last_gen_time = perf_counter_ns() - start\n\t    LOGGER.info(\n\t        \"'gol.progress()' average(%s) time: %s µs\",\n", "        times,\n\t        round(last_gen_time / 1000 / times),\n\t    )\n\t# @pytest.mark.skip\n\tdef test_set_progress_large_file() -> None:\n\t    \"\"\"Performance test for the GameOfLifeSet().progress() method.\"\"\"\n\t    gol: GameOfLife = GameOfLifeSet()\n\t    LOGGER.info(\"'create_reader(period59glidergun.rle)' starting...\")\n\t    start: int = perf_counter_ns()\n\t    with create_reader(\"../data/period59glidergun.rle\") as reader:\n", "        gol.add_cells(reader)\n\t    last_gen_time: int = perf_counter_ns() - start\n\t    LOGGER.info(\n\t        \"'create_reader(...)' time: %s µs\",\n\t        round(last_gen_time / 1000),\n\t    )\n\t    # measure the progress() method\n\t    times: int = 100\n\t    LOGGER.info(\"'gol.progress()' * %s starting...\", times)\n\t    start = perf_counter_ns()\n", "    for _ in range(times):\n\t        gol.progress()\n\t    last_gen_time = perf_counter_ns() - start\n\t    LOGGER.info(\n\t        \"'gol.progress()' average(%s) time: %s µs\",\n\t        times,\n\t        round(last_gen_time / 1000 / times),\n\t    )\n"]}
{"filename": "python3/tests/__init__.py", "chunked_list": []}
