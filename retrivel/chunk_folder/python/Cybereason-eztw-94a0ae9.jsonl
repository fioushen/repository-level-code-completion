{"filename": "setup.py", "chunked_list": ["from setuptools import setup\n\t# To build a wheel: python setup.py bdist_wheel\n\tsetup(\n\t    name=\"eztw\",    \n\t    version=\"1.0.3\",\n\t    description=\"Easy Python wrapper for ETW\",\n\t    url=\"https://github.com/wild-strudel/eztw\",\n\t    author=\"Uri Sternfeld\",\n\t    packages=[\"eztw\", \"eztw.scripts\"],\n\t    python_requires=\">=3.10, <4\",\n", "    install_requires=[\"pywin32\"],\n\t    license=\"MIT\",\n\t    classifiers=[\n\t        'License :: OSI Approved :: MIT License',\n\t        'Programming Language :: Python',\n\t        'Programming Language :: Python :: 3',\n\t        'Programming Language :: Python :: 3.10',\n\t        'Programming Language :: Python :: 3.11',\n\t        'Programming Language :: Python :: Implementation :: CPython',\n\t        'Operating System :: Microsoft :: Windows',\n", "        'Operating System :: Microsoft :: Windows :: Windows 10',\n\t    ],\n\t)"]}
{"filename": "eztw/log.py", "chunked_list": ["\"\"\"\n\tBasic logger used throughout eztw.\n\tUse enable_logging / disable_logging to enable or suppress.\n\t\"\"\"\n\timport logging\n\tLOGGER = logging.getLogger(\"eztw\")\n\tdef enable_logging():\n\t    if not LOGGER.handlers:\n\t        LOGGER.setLevel(logging.INFO)\n\t        _formatter = logging.Formatter(\"%(asctime)s %(name)s %(levelname)s %(message)s\",\n", "                                       datefmt=\"%d/%m/%Y %H:%M:%S\")\n\t        _log_console_handler = logging.StreamHandler()\n\t        _log_console_handler.setLevel(logging.INFO)\n\t        _log_console_handler.setFormatter(_formatter)\n\t        LOGGER.addHandler(_log_console_handler)\n\tdef disable_logging():\n\t    if LOGGER.handlers:\n\t        LOGGER.handlers.clear()\n\tenable_logging()\n"]}
{"filename": "eztw/guid.py", "chunked_list": ["\"\"\"\n\tImplementation of GUID structure - can be constructed either from bytes (as a ctypes.Structure)\n\tor from string of a GUID (via the ctor).\n\t\"\"\"\n\timport re\n\timport ctypes\n\tclass GUID(ctypes.Structure):\n\t    \"\"\"\n\t    Represents a Windows GUID object. Can be read from a string or directly from data.\n\t    Can be converted back to a GUID string.\n", "    \"\"\"\n\t    # See https://learn.microsoft.com/en-us/windows/win32/api/guiddef/ns-guiddef-guid\n\t    _fields_ = [(\"Data1\", ctypes.c_ulong),\n\t                (\"Data2\", ctypes.c_ushort),\n\t                (\"Data3\", ctypes.c_ushort),\n\t                (\"Data4\", ctypes.c_ubyte * 8)]\n\t    GUID_RE = re.compile(\"^{?([0-9A-F]{8})-\"\n\t                         \"([0-9A-F]{4})-\"\n\t                         \"([0-9A-F]{4})-\"\n\t                         \"([0-9A-F]{2})([0-9A-F]{2})-\"\n", "                         \"([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})\"\n\t                         \"([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})}?$\",\n\t                         re.IGNORECASE)\n\t    @classmethod\n\t    def verify(cls, possibly_guid_string: str) -> bool:\n\t        \"\"\"\n\t        Verify that the given object is a valid GUID string.\n\t        @param possibly_guid_string: a string which might be a GUID\n\t        @return: True or False\n\t        \"\"\"\n", "        return cls.GUID_RE.search(possibly_guid_string) is not None\n\t    def __init__(self, guid_str: str):\n\t        super().__init__()\n\t        # Verify using regex that the string is valid\n\t        guid_match = self.GUID_RE.search(guid_str)\n\t        if guid_match is None:\n\t            raise ValueError(f\"Invalid GUID string {guid_str!r}\")\n\t        guid_parts = [int(i, 16) for i in guid_match.groups()]\n\t        self.Data1 = guid_parts[0]\n\t        self.Data2 = guid_parts[1]\n", "        self.Data3 = guid_parts[2]\n\t        for i in range(8):\n\t            self.Data4[i] = guid_parts[3 + i]\n\t    def __str__(self):\n\t        d = self.Data4\n\t        # This result is cached\n\t        return f\"{{{self.Data1:08x}-{self.Data2:04x}-{self.Data3:04x}-{d[0]:02x}{d[1]:02x}-\" \\\n\t               f\"{d[2]:02x}{d[3]:02x}{d[4]:02x}{d[5]:02x}{d[6]:02x}{d[7]:02x}}}\"\n\t    __repr__ = __str__\n\tdef canonize_GUID(guid_str: str) -> str:\n", "    \"\"\"\n\t    Given a potentially-valid GUID string, canonize it into canonic GUID string.\n\t    \"\"\"\n\t    return str(GUID(guid_str))\n"]}
{"filename": "eztw/__init__.py", "chunked_list": ["from .common import EztwException\n\tfrom .controller import EztwController\n\tfrom .consumer import EztwConsumer\n\tfrom .session import EztwSessionIterator, consume_events\n\tfrom .event import EztwFilter, EztwDispatcher\n\tfrom .provider import get_provider, get_providers, get_provider_config, add_manual_provider, parse_event, \\\n\t    EztwProviderConfig\n\tfrom .trace_common import MAX_KEYWORDS\n"]}
{"filename": "eztw/session.py", "chunked_list": ["\"\"\"\n\tImplementation of EztwSessionIterator, which allows easy iteration over existing session or sessions.\n\tIt automatically parses and yields the event contents along with the event records.\n\tIf multiple sessions are consumed, a separate thread is used for each of them (since it's blocking).\n\tIn addition, provides the convenience function consume_events, which handles the consumption process\n\tend-to-end based on the given EztwEvent objects.\n\t\"\"\"\n\timport threading\n\timport queue\n\timport time\n", "from collections import defaultdict, Counter\n\tfrom .common import as_list, EztwException\n\tfrom .controller import EztwController\n\tfrom .provider import eztwm, get_provider_config\n\tfrom .consumer import EztwConsumer\n\tfrom .event import EztwEvent, EztwFilter\n\tfrom .trace_common import LOST_EVENTS_GUID, ad_hoc_session_name, MSNT_SystemTrace_GUID\n\tclass EztwSessionIterator:\n\t    \"\"\"\n\t    This class iterates over existing sessions by names - either a single session (current thread) or multiple\n", "    sessions (each in its own thread).\n\t    A second, optional parameter is which events to filter. This can either be None (no filter), or\n\t    a single or a list of EztwEvent objects. Only these events will be parsed and returned.\n\t    Finally, the session iterator automatically counts all events consumed during its operation (including\n\t    filtered ones) and presents a neat summary by provider/event when stopped (including when stopped\n\t    using Ctrl+C, i.e KeyboardInterrupt).\n\t    Example usage:\n\t    >>> session_names = ['session1', 'session2']\n\t    >>> events_to_filter = provider.Event_123\n\t    >>> with EztwSessionIterator(session_names, events_to_filter) as si:\n", "    >>>     for event_record, parsed_event in si:\n\t    >>>         # do something\n\t    \"\"\"\n\t    def __init__(self, session_names: str | list[str], filtered_events: EztwEvent | list[EztwEvent] | None = None):\n\t        self.session_names = as_list(session_names)\n\t        assert len(self.session_names) >= 1\n\t        self.event_filter = EztwFilter(filtered_events) if filtered_events else None\n\t    @staticmethod\n\t    def _thread_proc_consumer(session_name, event_queue, stop_signal):\n\t        # Consume a single session and put its event records in a shared queue until the stop signal is set\n", "        with EztwConsumer(session_name) as ezc:\n\t            while not stop_signal.is_set():\n\t                event_record = ezc.get_event()\n\t                if event_record:\n\t                    event_queue.put(event_record)\n\t    def _consume_events(self):\n\t        # Consume either a single session (in current thread) or multiple sessions (in separate threads)\n\t        if len(self.session_names) == 1:\n\t            # With a single session - consume in the same thread\n\t            with EztwConsumer(self.session_names[0]) as ezc:\n", "                yield from ezc\n\t        else:\n\t            # For multiple sessions - create a new Queue and stop signal\n\t            event_queue = queue.Queue()\n\t            stop_signal = threading.Event()\n\t            # Start one consumer thread per session (ProcessTrace is blocking each thread)\n\t            threads = [\n\t                threading.Thread(target=self._thread_proc_consumer, args=(session_name, event_queue, stop_signal))\n\t                for session_name in self.session_names]\n\t            # Start the threads\n", "            for th in threads:\n\t                th.start()\n\t            try:\n\t                # Get from queue until interrupted\n\t                while True:\n\t                    try:\n\t                        yield event_queue.get(timeout=0.1)\n\t                    except queue.Empty:\n\t                        continue\n\t            finally:\n", "                # Signal all threads to stop and wait for them to join\n\t                stop_signal.set()\n\t                for th in threads:\n\t                    th.join()\n\t    def __iter__(self):\n\t        event_counter = defaultdict(Counter)\n\t        unknown_events = set()\n\t        start_time = time.time()\n\t        try:\n\t            # Main iteration loop\n", "            for event_record in self._consume_events():\n\t                # Count this event\n\t                event_counter[event_record.provider_guid][event_record.id] += 1\n\t                if self.event_filter is None or event_record in self.event_filter:\n\t                    # Ignore these provider GUIDs\n\t                    if event_record.provider_guid in [MSNT_SystemTrace_GUID, LOST_EVENTS_GUID]:\n\t                        continue\n\t                    try:\n\t                        # Parse and yield\n\t                        yield event_record, eztwm.parse(event_record)\n", "                    except EztwException as e:\n\t                        # Only print once per event\n\t                        if hash(event_record) not in unknown_events:\n\t                            print(f\"Failed to parse event {event_record} - {e}\")\n\t                            unknown_events.add(hash(event_record))\n\t        except KeyboardInterrupt:\n\t            # Suppress\n\t            pass\n\t        except Exception as e:\n\t            print(f\"\\nUnhandled error - {e}\")\n", "        finally:\n\t            # If no events where consumed, there's nothing to report\n\t            if not event_counter:\n\t                return\n\t            # Print a nice summary of all consumed events\n\t            total_time = time.time() - start_time\n\t            print(f\"\\nTotal events during {total_time:.2f} seconds:\")\n\t            if LOST_EVENTS_GUID in event_counter:\n\t                lost_events = sum(event_counter.pop(LOST_EVENTS_GUID).values())\n\t                print(f\"\\tLOST EVENTS ({LOST_EVENTS_GUID}): {lost_events}\")\n", "            for provider_guid, event_count in event_counter.items():\n\t                provider_name = eztwm.get_provider_name_from_guid(provider_guid)\n\t                print(f\"\\tProvider {provider_guid} ({provider_name}):\")\n\t                for eid, cnt in event_count.most_common():\n\t                    print(f\"\\t\\tEvent ID {eid} - {cnt}\")\n\t            print()\n\tdef consume_events(events: EztwEvent | list[EztwEvent], session_name: None | str = None,\n\t                   keywords: None | dict[str, int] = None):\n\t    \"\"\"\n\t    Convenience function that automatically deducts the needed providers and keywords from the given list of\n", "    event classes, and only yields the parsed events if they're on the list (provider GUID + event ID).\n\t    Session name is optional, if omitted a random trace name will be used.\n\t    This function should probably be used for most cases.\n\t    @param events: a single EztwEvent or a list of them - only these events will be parsed and returned\n\t    @param session_name: either a session name to use or None (default, in which case a temporary name is used)\n\t    @param keywords: either None (implicit keywords from events) or a dict from provider GUID to keyword value\n\t    \"\"\"\n\t    if not session_name:\n\t        session_name = ad_hoc_session_name()\n\t    # Start consuming\n", "    with EztwController(session_name, get_provider_config(events, keywords=keywords)):\n\t        yield from EztwSessionIterator(session_name, events)\n"]}
{"filename": "eztw/controller.py", "chunked_list": ["\"\"\"\n\tImplementation of EztwController, which allows starting and stopping trace sessions, as well as\n\tenabling providers.\n\tNote: there are some advanced options when enabling providers (kernel-side filters, stack trace, etc.).\n\tThese are not yet supported.\n\t\"\"\"\n\timport ctypes\n\timport winerror\n\timport win32event\n\tfrom .guid import GUID\n", "from .log import LOGGER\n\tfrom .common import UCHAR, ULONG, ULONGLONG, LARGE_INTEGER, ULARGE_INTEGER, LPVOID, LPWSTR, HANDLE, \\\n\t    as_list, EztwException\n\tfrom .trace_common import ADVAPI32_DLL, TRACEHANDLE\n\tfrom .provider import EztwProviderConfig\n\tclass EztwControllerException(EztwException):\n\t    \"\"\"A trace controller error\"\"\"\n\t########\n\t# WINAPI\n\t# https://learn.microsoft.com/en-us/windows/win32/etw/logging-mode-constants\n", "EVENT_TRACE_REAL_TIME_MODE = 0x00000100\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_logfilea\n\tPROCESS_TRACE_MODE_REAL_TIME = 0x00000100\n\t# https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wmistr/ns-wmistr-_wnode_header\n\tWNODE_FLAG_TRACED_GUID = 0x00020000\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-controltracea\n\tEVENT_TRACE_CONTROL_STOP = 1\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-enable_trace_parameters\n\tENABLE_TRACE_PARAMETERS_VERSION_2 = 2\n\t# https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wmistr/ns-wmistr-_wnode_header\n", "class WNODE_HEADER(ctypes.Structure):\n\t    _fields_ = [('BufferSize', ULONG),\n\t                ('ProviderId', ULONG),\n\t                ('HistoricalContext', ULARGE_INTEGER),\n\t                ('TimeStamp', LARGE_INTEGER),\n\t                ('Guid', GUID),\n\t                ('ClientContext', ULONG),\n\t                ('Flags', ULONG)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_properties\n\tclass EVENT_TRACE_PROPERTIES(ctypes.Structure):\n", "    _fields_ = [('Wnode', WNODE_HEADER),\n\t                ('BufferSize', ULONG),\n\t                ('MinimumBuffers', ULONG),\n\t                ('MaximumBuffers', ULONG),\n\t                ('MaximumFileSize', ULONG),\n\t                ('LogFileMode', ULONG),\n\t                ('FlushTimer', ULONG),\n\t                ('EnableFlags', ULONG),\n\t                ('AgeLimit', ULONG),\n\t                ('NumberOfBuffers', ULONG),\n", "                ('FreeBuffers', ULONG),\n\t                ('EventsLost', ULONG),\n\t                ('BuffersWritten', ULONG),\n\t                ('LogBuffersLost', ULONG),\n\t                ('RealTimeBuffersLost', ULONG),\n\t                ('LoggerThreadId', HANDLE),\n\t                ('LogFileNameOffset', ULONG),\n\t                ('LoggerNameOffset', ULONG)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-starttracew\n\tStartTrace = ctypes.WINFUNCTYPE(\n", "    ULONG,                                      # Return type\n\t    ctypes.POINTER(TRACEHANDLE),                # PTRACEHANDLE TraceHandle\n\t    LPWSTR,                                     # LPCSTR InstanceName\n\t    ctypes.POINTER(EVENT_TRACE_PROPERTIES),     # PEVENT_TRACE_PROPERTIES Properties\n\t)((\"StartTraceW\", ADVAPI32_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-controltracew\n\tControlTrace = ctypes.WINFUNCTYPE(\n\t    ULONG,                                      # Return type\n\t    TRACEHANDLE,                                # TRACEHANDLE TraceHandle\n\t    LPWSTR,                                     # LPCSTR InstanceName\n", "    ctypes.POINTER(EVENT_TRACE_PROPERTIES),     # PEVENT_TRACE_PROPERTIES Properties\n\t    ULONG,                                      # ULONG ControlCode\n\t)((\"ControlTraceW\", ADVAPI32_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntprov/nc-evntprov-penablecallback\n\tEVENT_CONTROL_CODE_DISABLE_PROVIDER = 0\n\tEVENT_CONTROL_CODE_ENABLE_PROVIDER = 1\n\t# Not supported yet...\n\t# # https://learn.microsoft.com/en-us/windows/win32/api/evntprov/ns-evntprov-event_filter_descriptor\n\t# class EVENT_FILTER_DESCRIPTOR(ctypes.Structure):\n\t#     _fields_ = [('Ptr', ULARGE_INTEGER),\n", "#                 ('Size', ULONG),\n\t#                 ('Type', ULONG),\n\t#                 ]\n\t#\n\t# # https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-enable_trace_parameters\n\t# class ENABLE_TRACE_PARAMETERS(ctypes.Structure):\n\t#     __fields__ = [(\"Version\", ULONG),\n\t#                   (\"EnableProperty\", ULONG),\n\t#                   (\"ControlFlags\", ULONG),\n\t#                   (\"SourceId\", GUID),\n", "#                   (\"EnableFilterDesc\", ctypes.POINTER(EVENT_FILTER_DESCRIPTOR)),\n\t#                   (\"FilterDescCount\", ULONG),\n\t#                   ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-enabletraceex2\n\tEnableTraceEx2 = ctypes.WINFUNCTYPE(\n\t    ULONG,                                      # Return type\n\t    TRACEHANDLE,                                # TRACEHANDLE TraceHandle\n\t    ctypes.POINTER(GUID),                       # LPCGUID ProviderId\n\t    ULONG,                                      # ULONG ControlCode\n\t    UCHAR,                                      # UCHAR Level,\n", "    ULONGLONG,                                  # ULONGLONG MatchAnyKeyword\n\t    ULONGLONG,                                  # ULONGLONG MatchAllKeyword\n\t    ULONG,                                      # Timeout\n\t    LPVOID,                                     # PENABLE_TRACE_PARAMETERS EnableParameters (not supported yet)\n\t    # ctypes.POINTER(ENABLE_TRACE_PARAMETERS),\n\t)((\"EnableTraceEx2\", ADVAPI32_DLL))\n\t########\n\t# Eztw\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_properties\n\tclass TraceProperties:\n", "    \"\"\"\n\t    A utility class to wrap usage of the EVENT_TRACE_PROPERTIES structure.\n\t    Currently only suitable for real-time trace session.\n\t    \"\"\"\n\t    MAX_LOGFILENAME_LEN = 1024\n\t    BUFFER_SIZE = (ctypes.sizeof(EVENT_TRACE_PROPERTIES) + 2 * ctypes.sizeof(ctypes.c_wchar) * MAX_LOGFILENAME_LEN)\n\t    def __init__(self):\n\t        self._buf = (ctypes.c_byte * self.BUFFER_SIZE)()\n\t        self.properties = ctypes.cast(ctypes.pointer(self._buf), ctypes.POINTER(EVENT_TRACE_PROPERTIES))\n\t        self.properties.contents.Wnode.BufferSize = self.BUFFER_SIZE\n", "        self.properties.contents.Wnode.Flags = WNODE_FLAG_TRACED_GUID\n\t        self.properties.contents.LoggerNameOffset = ctypes.sizeof(EVENT_TRACE_PROPERTIES)\n\t        self.properties.contents.LogFileNameOffset = (ctypes.sizeof(EVENT_TRACE_PROPERTIES) +\n\t                                                      ctypes.sizeof(ctypes.c_wchar) * self.MAX_LOGFILENAME_LEN)\n\t        self.properties.contents.LogFileMode = EVENT_TRACE_REAL_TIME_MODE\n\t        # TODO: allow customizing these values\n\t        self.properties.contents.BufferSize = 32\n\t        self.properties.contents.MinimumBuffers = 8\n\tclass EztwController:\n\t    \"\"\"\n", "    Create and manage a real-time trace session, as well as enable providers by config.\n\t    \"\"\"\n\t    def __init__(self, session_name: str, providers_config: EztwProviderConfig | list[EztwProviderConfig]):\n\t        \"\"\"\n\t        @param session_name: the name of the new trace\n\t        @param providers_config: a list of EztwProviderConfig or a single EztwProviderConfig\n\t        \"\"\"\n\t        self.session_handle = None\n\t        self.session_name = session_name\n\t        self.providers_config = as_list(providers_config)\n", "        assert self.providers_config  # Make sure we have at least one provider\n\t    def __del__(self):\n\t        self.stop()\n\t    def start(self):\n\t        \"\"\"\n\t        Start a new session or if one with the same name already exists - attempt to stop it first and then\n\t        start the new session.\n\t        \"\"\"\n\t        if self.session_handle is not None:\n\t            return\n", "        # Allocate a new trace handle\n\t        trace_handle = TRACEHANDLE()\n\t        LOGGER.info(f\"Starting trace session {self.session_name!r}...\")\n\t        trace_properties = TraceProperties()\n\t        # Call StartTrace\n\t        rc = StartTrace(ctypes.byref(trace_handle), self.session_name, trace_properties.properties)\n\t        if rc == winerror.ERROR_ALREADY_EXISTS:\n\t            # This error code means a session with this name already exists - try to stop and start again\n\t            LOGGER.warning(\n\t                f\"Session {self.session_name!r} already exists. Trying to stop and start a new session\")\n", "            trace_properties = TraceProperties()\n\t            rc = ControlTrace(0, self.session_name, trace_properties.properties, EVENT_TRACE_CONTROL_STOP)\n\t            if rc != winerror.ERROR_SUCCESS:\n\t                raise EztwControllerException(\n\t                    f\"ControlTrace failed for session {self.session_name!r} with error {rc}\")\n\t            # Try again\n\t            trace_properties = TraceProperties()\n\t            rc = StartTrace(ctypes.byref(trace_handle), self.session_name, trace_properties.properties)\n\t        if rc != winerror.ERROR_SUCCESS:\n\t            raise EztwControllerException(\n", "                f\"StartTrace failed for session {self.session_name!r} with error {rc}\")\n\t        # Success!\n\t        self.session_handle = trace_handle\n\t        # Enable providers\n\t        for provider_config in self.providers_config:\n\t            LOGGER.info(f\"Enabling provider {provider_config.guid} keywords={hex(provider_config.keywords)}\")\n\t            self.enable_provider(provider_config.guid, provider_config.keywords, provider_config.level)\n\t    def stop(self):\n\t        if self.session_handle is None:\n\t            return\n", "        LOGGER.info(f\"Stopping trace session {self.session_name!r}\")\n\t        trace_properties = TraceProperties()\n\t        rc = ControlTrace(self.session_handle, None, trace_properties.properties, EVENT_TRACE_CONTROL_STOP)\n\t        if rc == winerror.ERROR_WMI_INSTANCE_NOT_FOUND:\n\t            # Session no longer exists...\n\t            pass\n\t        elif rc != winerror.ERROR_SUCCESS:\n\t            raise EztwControllerException(\n\t                f\"ControlTrace failed for session {self.session_name!r} with error {rc}\")\n\t        self.session_handle = None\n", "    def enable_provider(self, provider_guid: str, keywords: int, level: int):\n\t        # TODO: support filters, stack trace and other advanced features\n\t        # etp = ENABLE_TRACE_PARAMETERS()\n\t        # etp.Version = ENABLE_TRACE_PARAMETERS_VERSION_2\n\t        # etp.FilterDescCount = 0\n\t        provider_guid_struct = GUID(provider_guid)\n\t        rc = EnableTraceEx2(\n\t                self.session_handle,\n\t                ctypes.byref(provider_guid_struct),\n\t                EVENT_CONTROL_CODE_ENABLE_PROVIDER,\n", "                level,\n\t                keywords,\n\t                0,\n\t                win32event.INFINITE,\n\t                None,  # ctypes.byref(etp),\n\t            )\n\t        if rc != winerror.ERROR_SUCCESS:\n\t            raise EztwControllerException(\n\t                f\"EnableTraceEx2 failed for session {self.session_name!r} for provider {provider_guid}\"\n\t                f\" with error {rc}\")\n", "    def __enter__(self):\n\t        self.start()\n\t        return self\n\t    def __exit__(self, exc_type, exc_val, exc_tb):\n\t        self.stop()\n"]}
{"filename": "eztw/consumer.py", "chunked_list": ["\"\"\"\n\tImplementation of EztwConsumer, which allows consuming real time event records from an existing\n\treal-time trace session.\n\t\"\"\"\n\timport ctypes\n\timport queue\n\timport time\n\timport threading\n\timport contextlib\n\timport win32api\n", "import winerror\n\tfrom .log import LOGGER\n\tfrom .guid import GUID\n\tfrom .common import UCHAR, USHORT, ULONG, LPWSTR, LARGE_INTEGER, ULARGE_INTEGER, LPVOID, LONG, WCHAR, FILETIME, \\\n\t    FILETIME_to_time, EztwException, SYSTEMTIME\n\tfrom .trace_common import ADVAPI32_DLL, TRACEHANDLE, INVALID_TRACE_HANDLE\n\tclass EztwConsumerException(EztwException):\n\t    \"\"\"A trace consumer error\"\"\"\n\t########\n\t# WINAPI\n", "# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_logfilea\n\tPROCESS_TRACE_MODE_REAL_TIME = 0x00000100\n\tPROCESS_TRACE_MODE_EVENT_RECORD = 0x10000000\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_header\n\tclass EVENT_TRACE_HEADER_CLASS(ctypes.Structure):\n\t    _fields_ = [('Type', UCHAR),\n\t                ('Level', UCHAR),\n\t                ('Version', USHORT)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_header\n\tclass EVENT_TRACE_HEADER(ctypes.Structure):\n", "    _fields_ = [('Size', USHORT),\n\t                ('HeaderType', UCHAR),\n\t                ('MarkerFlags', UCHAR),\n\t                ('Class', EVENT_TRACE_HEADER_CLASS),\n\t                ('ThreadId', ULONG),\n\t                ('ProcessId', ULONG),\n\t                ('TimeStamp', LARGE_INTEGER),\n\t                ('Guid', GUID),\n\t                ('ClientContext', ULONG),\n\t                ('Flags', ULONG)]\n", "# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace\n\tclass EVENT_TRACE(ctypes.Structure):\n\t    _fields_ = [('Header', EVENT_TRACE_HEADER),\n\t                ('InstanceId', ULONG),\n\t                ('ParentInstanceId', ULONG),\n\t                ('ParentGuid', GUID),\n\t                ('MofData', LPVOID),\n\t                ('MofLength', ULONG),\n\t                ('ClientContext', ULONG)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntprov/ns-evntprov-event_descriptor\n", "class EVENT_DESCRIPTOR(ctypes.Structure):\n\t    _fields_ = [('Id', USHORT),\n\t                ('Version', UCHAR),\n\t                ('Channel', UCHAR),\n\t                ('Level', UCHAR),\n\t                ('Opcode', UCHAR),\n\t                ('Task', USHORT),\n\t                ('Keyword', ULARGE_INTEGER)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntcons/ns-evntcons-event_header\n\tclass EVENT_HEADER(ctypes.Structure):\n", "    _fields_ = [('Size', USHORT),\n\t                ('HeaderType', USHORT),\n\t                ('Flags', USHORT),\n\t                ('EventProperty', USHORT),\n\t                ('ThreadId', ULONG),\n\t                ('ProcessId', ULONG),\n\t                ('TimeStamp', ULARGE_INTEGER),\n\t                ('ProviderId', GUID),\n\t                ('EventDescriptor', EVENT_DESCRIPTOR),\n\t                ('KernelTime', ULONG),\n", "                ('UserTime', ULONG),\n\t                ('ActivityId', GUID)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-etw_buffer_context\n\tclass ETW_BUFFER_CONTEXT(ctypes.Structure):\n\t    _fields_ = [('ProcessorNumber', UCHAR),\n\t                ('Alignment', UCHAR),\n\t                ('LoggerId', USHORT)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntcons/ns-evntcons-event_header_extended_data_item\n\tclass EVENT_HEADER_EXTENDED_DATA_ITEM(ctypes.Structure):\n\t    _fields_ = [('Reserved1', USHORT),\n", "                ('ExtType', USHORT),\n\t                ('Reserved2', ULONG),\n\t                ('DataSize', USHORT),\n\t                ('DataPtr', ULARGE_INTEGER)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntcons/ns-evntcons-event_record\n\tclass EVENT_RECORD(ctypes.Structure):\n\t    _fields_ = [('EventHeader', EVENT_HEADER),\n\t                ('BufferContext', ETW_BUFFER_CONTEXT),\n\t                ('ExtendedDataCount', USHORT),\n\t                ('UserDataLength', USHORT),\n", "                ('ExtendedData', ctypes.POINTER(EVENT_HEADER_EXTENDED_DATA_ITEM)),\n\t                ('UserData', LPVOID),\n\t                ('UserContext', LPVOID)]\n\tclass TIME_ZONE_INFORMATION(ctypes.Structure):\n\t    _fields_ = [('Bias', LONG),\n\t                ('StandardName', WCHAR * 32),\n\t                ('StandardDate', SYSTEMTIME),\n\t                ('StandardBias', LONG),\n\t                ('DaylightName', WCHAR * 32),\n\t                ('DaylightDate', SYSTEMTIME),\n", "                ('DaylightBias', LONG)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-trace_logfile_header\n\tclass TRACE_LOGFILE_HEADER(ctypes.Structure):\n\t    _fields_ = [('BufferSize', ULONG),\n\t                ('MajorVersion', UCHAR),\n\t                ('MinorVersion', UCHAR),\n\t                ('SubVersion', UCHAR),\n\t                ('SubMinorVersion', UCHAR),\n\t                ('ProviderVersion', ULONG),\n\t                ('NumberOfProcessors', ULONG),\n", "                ('EndTime', LARGE_INTEGER),\n\t                ('TimerResolution', ULONG),\n\t                ('MaximumFileSize', ULONG),\n\t                ('LogFileMode', ULONG),\n\t                ('BuffersWritten', ULONG),\n\t                ('StartBuffers', ULONG),\n\t                ('PointerSize', ULONG),\n\t                ('EventsLost', ULONG),\n\t                ('CpuSpeedInMHz', ULONG),\n\t                ('LoggerName', LPWSTR),\n", "                ('LogFileName', LPWSTR),\n\t                ('TimeZone', TIME_ZONE_INFORMATION),\n\t                ('BootTime', LARGE_INTEGER),\n\t                ('PerfFreq', LARGE_INTEGER),\n\t                ('StartTime', LARGE_INTEGER),\n\t                ('ReservedFlags', ULONG),\n\t                ('BuffersLost', ULONG)]\n\t# This must be \"forward declared\", because of the EVENT_TRACE_BUFFER_CALLBACK definition...\n\tclass EVENT_TRACE_LOGFILE(ctypes.Structure):\n\t    pass\n", "# The type for event trace callbacks.\n\tEVENT_CALLBACK = ctypes.WINFUNCTYPE(None, ctypes.POINTER(EVENT_TRACE))\n\tEVENT_RECORD_CALLBACK = ctypes.WINFUNCTYPE(None, ctypes.POINTER(EVENT_RECORD))\n\tEVENT_TRACE_BUFFER_CALLBACK = ctypes.WINFUNCTYPE(ULONG, ctypes.POINTER(EVENT_TRACE_LOGFILE))\n\tclass EVENT_CALLBACK_UNION(ctypes.Union):\n\t    _fields_ = [('EventCallback', EVENT_CALLBACK),\n\t                ('EventRecordCallback', EVENT_RECORD_CALLBACK)]\n\tEVENT_TRACE_LOGFILE._fields_ = [\n\t    ('LogFileName', LPWSTR),\n\t    ('LoggerName', LPWSTR),\n", "    ('CurrentTime', LARGE_INTEGER),\n\t    ('BuffersRead', ULONG),\n\t    ('ProcessTraceMode', ULONG),\n\t    ('CurrentEvent', EVENT_TRACE),\n\t    ('LogfileHeader', TRACE_LOGFILE_HEADER),\n\t    ('BufferCallback', EVENT_TRACE_BUFFER_CALLBACK),\n\t    ('BufferSize', ULONG),\n\t    ('Filled', ULONG),\n\t    ('EventsLost', ULONG),\n\t    ('EventCallback', EVENT_CALLBACK_UNION),\n", "    ('IsKernelTrace', ULONG),\n\t    ('Context', LPVOID)]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-opentracew\n\tOpenTrace = ctypes.WINFUNCTYPE(\n\t    TRACEHANDLE,                            # Return type\n\t    ctypes.POINTER(EVENT_TRACE_LOGFILE),    # PEVENT_TRACE_LOGFILEW Logfile\n\t)((\"OpenTraceW\", ADVAPI32_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-processtrace\n\tProcessTrace = ctypes.WINFUNCTYPE(\n\t    ULONG,                          # Return type\n", "    ctypes.POINTER(TRACEHANDLE),    # PTRACEHANDLE HandleArray,\n\t    ULONG,                          # ULONG HandleCount\n\t    ctypes.POINTER(FILETIME),       # LPFILETIME StartTime\n\t    ctypes.POINTER(FILETIME),       # LPFILETIME EndTime\n\t)((\"ProcessTrace\", ADVAPI32_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-closetrace\n\tCloseTrace = ctypes.WINFUNCTYPE(\n\t    ULONG,          # Return type\n\t    TRACEHANDLE,    # TRACEHANDLE TraceHandle\n\t)((\"CloseTrace\", ADVAPI32_DLL))\n", "########\n\t# Eztw\n\tclass EventRecord:\n\t    \"\"\"\n\t    A single ETW event record, with header fields shared by all ETW events.\n\t    \"\"\"\n\t    def __init__(self, event_record: EVENT_RECORD, is_64bit: bool):\n\t        self.is_64bit = is_64bit\n\t        header = event_record.contents.EventHeader\n\t        descriptor = header.EventDescriptor\n", "        self.provider_guid = str(header.ProviderId)\n\t        # Old-style events have their actual ID in the 'opcode' field for some reason\n\t        self.id = descriptor.Id if descriptor.Id > 0 else descriptor.Opcode\n\t        self.version = descriptor.Version\n\t        self.keywords = descriptor.Keyword\n\t        self.process_id = header.ProcessId\n\t        self.thread_id = header.ThreadId\n\t        # Sometimes the TimeStamp is 0 - prevent weird behavior for negative timestamps\n\t        self.timestamp = FILETIME_to_time(header.TimeStamp) if header.TimeStamp > 0 else 0\n\t        # Read event data\n", "        if event_record.contents.UserData:\n\t            self.data = ctypes.string_at(event_record.contents.UserData, event_record.contents.UserDataLength)\n\t        else:\n\t            self.data = bytes()\n\t    def __str__(self):\n\t        return f\"{self.__class__.__name__}(provider_guid={self.provider_guid}, id={self.id}, \" \\\n\t               f\"version={self.version}, process_id={self.process_id}, timestamp={time.ctime(self.timestamp)})\"\n\t    __repr__ = __str__\n\t    def __hash__(self):\n\t        \"\"\"The event is uniquely identified via its provider GUID and event ID\"\"\"\n", "        return hash((self.provider_guid, self.id))\n\tclass EztwConsumer:\n\t    \"\"\"\n\t    Real-time consumer of an existing ETW trace.\n\t    Simply provider an existing session name.\n\t    \"\"\"\n\t    def __init__(self, session_name: str):\n\t        self.session_handle = None\n\t        self.session_name = session_name\n\t        self._buffer_callback = EVENT_TRACE_BUFFER_CALLBACK(self._buffer_callback)\n", "        #self._event_callback = EVENT_CALLBACK(self._event_callback) # Old format, unsupported\n\t        self._event_record_callback = EVENT_RECORD_CALLBACK(self.event_record_callback)\n\t        # Bitness is unknown at first - assume 32 (will be set after OpenTrace is called)\n\t        self.is_64bit = False\n\t        self.consumer_thread = None\n\t        # Safeguard against memory gulping if no events are consumed for a long time\n\t        self.events_queue = queue.Queue(maxsize=1000000)\n\t        # Since ProcessTrace is blocking, this allows to stop the trace\n\t        self.stop_event = threading.Event()\n\t        # Since we may want to stop either explicitly (calling stop) or implicitly (session is closed)\n", "        # from two different threads, we must protect ourselves\n\t        self.stop_lock = threading.Lock()\n\t        # Keep a reference to CloseTrace, so we don't lose it in the dtor if the interpreter exits unexpectedly\n\t        self.CloseTrace = CloseTrace\n\t    def __del__(self):\n\t        self.close_session()\n\t    def open_session(self):\n\t        # Create and initialize EVENT_TRACE_LOGFILE\n\t        logfile = EVENT_TRACE_LOGFILE()\n\t        logfile.LoggerName = self.session_name\n", "        # This session must be real-time. Event records are to be consumed (i.e: \"new-style\", Vista and above)\n\t        logfile.ProcessTraceMode = PROCESS_TRACE_MODE_REAL_TIME | PROCESS_TRACE_MODE_EVENT_RECORD\n\t        logfile.BufferCallback = self._buffer_callback\n\t        logfile.EventCallback.EventRecordCallback = self._event_record_callback\n\t        # Attempt to open an existing trace session\n\t        th = OpenTrace(ctypes.byref(logfile))\n\t        if th == INVALID_TRACE_HANDLE:\n\t            raise EztwConsumerException(\n\t                f\"OpenTrace failed for session {self.session_name!r} with error {win32api.GetLastError()}\")\n\t        self.session_handle = TRACEHANDLE(th)\n", "        # Now we can determine the pointer size (though we only support 64bit for now)\n\t        self.is_64bit = (logfile.LogfileHeader.PointerSize == 8)\n\t    def close_session(self):\n\t        if self.session_handle is None:\n\t            return\n\t        LOGGER.info(f\"Closing trace consumer for session {self.session_name!r}\")\n\t        rc = self.CloseTrace(self.session_handle)\n\t        if rc not in [winerror.ERROR_SUCCESS, winerror.ERROR_CTX_CLOSE_PENDING]:\n\t            raise EztwConsumerException(\n\t                f\"CloseTrace failed for session {self.session_name!r} with error {rc}\")\n", "        self.session_handle = None\n\t    def _buffer_callback(self, _buffer):\n\t        # Basically, do nothing unless explicitly ordered to stop\n\t        # According to https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-event_trace_logfilea\n\t        # this if this function returns 0, the ProcessTrace loop stops\n\t        if self.stop_event.is_set():\n\t            return 0\n\t        else:\n\t            return 1\n\t    def event_record_callback(self, event_record: EVENT_RECORD):\n", "        # Called for each event - new format (Windows-Vista and above)\n\t        # Drop events if queue is full\n\t        if not self.events_queue.full():\n\t            self.events_queue.put(EventRecord(event_record, self.is_64bit))\n\t    def consume(self):\n\t        try:\n\t            # If successful, this function blocks the current thread until stopped\n\t            rc = ProcessTrace(ctypes.byref(self.session_handle), 1, None, None)\n\t            if rc == winerror.ERROR_WMI_INSTANCE_NOT_FOUND:\n\t                raise EztwConsumerException(f\"Session {self.session_name!r} does not exist\")\n", "            if rc != winerror.ERROR_SUCCESS:\n\t                raise EztwConsumerException(\n\t                    f\"ProcessTrace failed for session {self.session_name!r} with error {rc}\")\n\t        finally:\n\t            self._stop()\n\t    def start(self):\n\t        if self.session_handle is not None:\n\t            return\n\t        self.stop_event.clear()\n\t        self.open_session()\n", "        # Consume event in a separate thread, since ProcessTrace is blocking. Events are put in a queue\n\t        self.consumer_thread = threading.Thread(target=self.consume, daemon=True)\n\t        self.consumer_thread.start()\n\t    def _stop(self):\n\t        with self.stop_lock:\n\t            if self.session_handle is None:\n\t                return\n\t            self.stop_event.set()\n\t            self.close_session()\n\t            self.session_handle = None\n", "    def stop(self):\n\t        self._stop()\n\t        if self.consumer_thread is not None:\n\t            self.consumer_thread.join()\n\t            self.consumer_thread = None\n\t    def pending_events(self) -> int:\n\t        \"\"\"\n\t        @return: number of currently pending event records\n\t        \"\"\"\n\t        return self.events_queue.qsize()\n", "    def get_event(self, timeout: float = 0.1) -> EventRecord | None:\n\t        \"\"\"\n\t        Wait for the next event record up to timeout\n\t        @param timeout: timeout in seconds\n\t        @return: EventRecord or None (on timeout)\n\t        \"\"\"\n\t        try:\n\t            return self.events_queue.get(timeout=timeout)\n\t        except queue.Empty:\n\t            return None\n", "    def wait_for_events(self, how_long: float) -> list[EventRecord]:\n\t        \"\"\"\n\t        Read all currently available events and optionally wait some more for new events\n\t        @param how_long: time to wait in seconds\n\t        @return: list of EventRecord\n\t        \"\"\"\n\t        start_time = time.time()\n\t        events = []\n\t        while (remaining_time := (start_time + how_long - time.time())) > 0:\n\t            try:\n", "                events.append(self.events_queue.get(timeout=remaining_time))\n\t            except queue.Empty:\n\t                break\n\t        return events\n\t    def __iter__(self):\n\t        \"\"\"\n\t        Iterate over all events forever (or until stopped).\n\t        Implicitly suppresses (but aborts on) keyboard interrupts (Ctrl+C).\n\t        If the session is externally closed (for example, using the logman.exe tool), the iteration stops.\n\t        \"\"\"\n", "        with self:\n\t            with contextlib.suppress(KeyboardInterrupt):\n\t                while True:\n\t                    if self.stop_event.is_set():\n\t                        break\n\t                    event_record = self.get_event()\n\t                    if event_record is not None:\n\t                        yield event_record\n\t    def __enter__(self):\n\t        self.start()\n", "        return self\n\t    def __exit__(self, exc_type, exc_val, exc_tb):\n\t        self.stop()\n"]}
{"filename": "eztw/trace_common.py", "chunked_list": ["\"\"\"\n\tVarious trace-specific common stuff.\n\t\"\"\"\n\timport ctypes\n\timport time\n\tfrom enum import Enum\n\tfrom dataclasses import dataclass\n\tfrom .guid import canonize_GUID\n\t# Represents a trace handle\n\tTRACEHANDLE = ctypes.c_uint64\n", "# This indicates an invalid trace handle\n\tINVALID_TRACE_HANDLE = 0xffffffffffffffff\n\t# Many functions are required from this DLL\n\tADVAPI32_DLL = ctypes.windll.advapi32\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-enabletrace\n\tTRACE_LEVEL_CRITICAL = 1\n\tTRACE_LEVEL_ERROR = 2\n\tTRACE_LEVEL_WARNING = 3\n\tTRACE_LEVEL_INFORMATION = 4\n\tTRACE_LEVEL_VERBOSE = 5\n", "MSNT_SystemTrace_GUID = canonize_GUID(\"{68fdd900-4a3e-11d1-84f4-0000f80464e3}\")\n\t# This special GUID indicates lost events\n\t# https://learn.microsoft.com/en-us/windows/win32/etw/lost-event\n\tLOST_EVENTS_GUID = canonize_GUID(\"{6a399ae0-4bc6-4de9-870b-3657f8947e7e}\")\n\tMAX_KEYWORDS = 0xffffffffffffffff\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ne-tdh-decoding_source\n\tclass PROVIDER_DECODING_SOURCE(Enum):\n\t    DecodingSourceXMLFile = 0\n\t    DecodingSourceWbem = 1\n\t    DecodingSourceWPP = 2\n", "    DecodingSourceTlg = 3\n\t    DecodingSourceMax = 4\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ne-tdh-_tdh_in_type\n\tclass EVENT_FIELD_INTYPE(Enum):\n\t    INTYPE_NULL = 0\n\t    INTYPE_UNICODESTRING = 1\n\t    INTYPE_ANSISTRING = 2\n\t    INTYPE_INT8 = 3\n\t    INTYPE_UINT8 = 4\n\t    INTYPE_INT16 = 5\n", "    INTYPE_UINT16 = 6\n\t    INTYPE_INT32 = 7\n\t    INTYPE_UINT32 = 8\n\t    INTYPE_INT64 = 9\n\t    INTYPE_UINT64 = 10\n\t    INTYPE_FLOAT = 11\n\t    INTYPE_DOUBLE = 12\n\t    INTYPE_BOOLEAN = 13\n\t    INTYPE_BINARY = 14\n\t    INTYPE_GUID = 15\n", "    INTYPE_POINTER = 16\n\t    INTYPE_FILETIME = 17\n\t    INTYPE_SYSTEMTIME = 18\n\t    INTYPE_SID = 19\n\t    INTYPE_HEXINT32 = 20\n\t    INTYPE_HEXINT64 = 21\n\t    INTYPE_MANIFEST_COUNTEDSTRING = 22\n\t    INTYPE_MANIFEST_COUNTEDANSISTRING = 23\n\t    INTYPE_RESERVED24 = 24\n\t    INTYPE_MANIFEST_COUNTEDBINARY = 25\n", "    INTYPE_COUNTEDSTRING = 26\n\t    INTYPE_COUNTEDANSISTRING = 27\n\t    INTYPE_REVERSEDCOUNTEDSTRING = 28\n\t    INTYPE_REVERSEDCOUNTEDANSISTRING = 29\n\t    INTYPE_NONNULLTERMINATEDSTRING = 30\n\t    INTYPE_NONNULLTERMINATEDANSISTRING = 31\n\t    INTYPE_UNICODECHAR = 32\n\t    INTYPE_ANSICHAR = 33\n\t    INTYPE_SIZET = 34\n\t    INTYPE_HEXDUMP = 35\n", "    INTYPE_WBEMSID = 36\n\t# For those sneaky undocumented ones, keep the max known value\n\tEVENT_FIELD_INTYPE_MAX_VALUE = max([x.value for x in EVENT_FIELD_INTYPE.__members__.values()])\n\t@dataclass\n\tclass ProviderMetadata:\n\t    \"\"\"\n\t    Represents the metadata of a single provider - guid, name and \"decoding source\" (usually XML schema)\n\t    \"\"\"\n\t    guid: str\n\t    name: str\n", "    schema: PROVIDER_DECODING_SOURCE\n\t@dataclass\n\tclass EventFieldMetadata:\n\t    \"\"\"\n\t    Represents a single event's field - name, type and optional length/count fields\n\t    \"\"\"\n\t    name: str\n\t    type: EVENT_FIELD_INTYPE\n\t    # Either the name of the field that holds the byte size of this field, or None\n\t    length: str | int | None = None\n", "    # Either the name of the field that holds the count of this fild, or None\n\t    count: str | int | None = None\n\t@dataclass\n\tclass EventMetadata:\n\t    \"\"\"\n\t    Represents a single event - provider GUID, ID, version, name (optional), keyword and a list of TdhEventField\n\t    \"\"\"\n\t    provider_guid: str\n\t    id: int\n\t    version: int\n", "    name: str\n\t    keyword: int\n\t    fields: list[EventFieldMetadata]\n\tdef ad_hoc_session_name():\n\t    return f\"EZTW_TRACE_SESSION_{int(time.time())}\"\n"]}
{"filename": "eztw/common.py", "chunked_list": ["\"\"\"\n\tVarious definitions and functions used throughout eztw.\n\t\"\"\"\n\timport re\n\timport datetime\n\timport ctypes.wintypes\n\t# Simplify windows types and add some missing ones\n\tUCHAR = ctypes.c_uint8\n\tUSHORT = ctypes.c_ushort\n\tULONG = ctypes.c_ulong\n", "ULONGLONG = ctypes.c_ulonglong\n\tLPVOID = ctypes.c_void_p\n\tLONG = ctypes.wintypes.LONG\n\tWCHAR = ctypes.wintypes.WCHAR\n\tULARGE_INTEGER = ctypes.wintypes.ULARGE_INTEGER\n\tLARGE_INTEGER = ctypes.wintypes.LARGE_INTEGER\n\tHANDLE = ctypes.wintypes.HANDLE\n\tLPWSTR = ctypes.wintypes.LPWSTR\n\tFILETIME = ctypes.wintypes.FILETIME\n\t# The number of seconds between 01-01-1601 and 01-01-1970\n", "FILETIME_EPOCH_DELTA_S = 11644473600\n\t# Multiplier to convert from units of 100ns to seconds\n\tFILETIME_TO_SECONDS_MULTIPLIER = 1.0/10000000.0\n\tdef FILETIME_to_time(ft):\n\t    return (ft * FILETIME_TO_SECONDS_MULTIPLIER) - FILETIME_EPOCH_DELTA_S\n\tclass SYSTEMTIME(ctypes.Structure):\n\t    _fields_ = [('wYear', USHORT),\n\t                ('wMonth', USHORT),\n\t                ('wDayOfWeek', USHORT),\n\t                ('wDay', USHORT),\n", "                ('wHour', USHORT),\n\t                ('wMinute', USHORT),\n\t                ('wSecond', USHORT),\n\t                ('wMilliseconds', USHORT)]\n\tdef SYSTEMTIME_to_time(st):\n\t    # datetime accepts microseconds - multiply milliseconds by 1000\n\t    dt = datetime.datetime(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, st.wMilliseconds * 1000)\n\t    return dt.timestamp()\n\tdef as_list(x):\n\t    \"\"\"\n", "    Ensure that the returned value is a list, whether the input is a list or not\n\t    \"\"\"\n\t    # If this is a list, simply return\n\t    if isinstance(x, list):\n\t        return x\n\t    # If this object is iterable, but is not a string/bytes - convert it to list\n\t    if hasattr(x, \"__iter__\") and not isinstance(x, (str, bytes, bytearray)):\n\t        return list(x)\n\t    # Wrap x as a list and return\n\t    return [x]\n", "def sanitize_name(name: str, replacement=\"_\") -> str:\n\t    \"\"\"Replace invalid characters with underscores\"\"\"\n\t    return re.sub(r\"\\W+\", replacement, name)\n\tclass EztwException(Exception):\n\t    \"\"\"Generic base class for other eztw exceptions\"\"\"\n"]}
{"filename": "eztw/tdh.py", "chunked_list": ["\"\"\"\n\tWrapper for the WinAPI of TDH (Trace Data Helper) functions:\n\tSee https://learn.microsoft.com/en-us/windows/win32/api/tdh/\n\tExposes two functions:\n\ttdh_enumerate_providers:\n\t    Returns a list of all locally registered ETW provider, each as a TdhProvider dataclass\n\ttdh_get_provider_events:\n\t    Given a provider GUID, returns a list of the provider's events as a list of TdhEvent dataclass\n\t\"\"\"\n\timport ctypes\n", "import winerror\n\tfrom functools import cache\n\tfrom .common import UCHAR, USHORT, ULONG, ULONGLONG, LPVOID, sanitize_name, EztwException\n\tfrom .trace_common import EVENT_FIELD_INTYPE, ProviderMetadata, PROVIDER_DECODING_SOURCE, EventMetadata, \\\n\t    EVENT_FIELD_INTYPE_MAX_VALUE, EventFieldMetadata\n\tfrom .guid import GUID\n\tclass EztwTdhException(EztwException):\n\t    \"\"\"Represents a TDH error\"\"\"\n\t########\n\t# WINAPI\n", "TDH_DLL = ctypes.WinDLL(\"tdh.dll\")\n\tdef read_wstring_at(buf, offset=0):\n\t    if offset > len(buf):\n\t        raise EztwTdhException(\"Wchar string out of bounds\")\n\t    return ctypes.wstring_at(ctypes.addressof(buf) + offset)\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-trace_provider_info\n\tclass TRACE_PROVIDER_INFO(ctypes.Structure):\n\t    _fields_ = [('ProviderGuid', GUID),\n\t                ('SchemaSource', ULONG),\n\t                ('ProviderNameOffset', ULONG),\n", "                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-provider_enumeration_info\n\tclass PROVIDER_ENUMERATION_INFO(ctypes.Structure):\n\t    _fields_ = [('NumberOfProviders', ULONG),\n\t                ('Reserved', ULONG),\n\t                #('TraceProviderInfoArray', LPVOID), # Ignore array pointer\n\t                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/nf-tdh-tdhenumerateproviders\n\tTdhEnumerateProviders = ctypes.WINFUNCTYPE(\n\t    ULONG,                  # Return type\n", "    LPVOID,                 # PPROVIDER_ENUMERATION_INFO pBuffer\n\t    ctypes.POINTER(ULONG),  # ULONG *pBufferSize\n\t)((\"TdhEnumerateProviders\", TDH_DLL))\n\tdef iterate_array_of(buf, offset, cls, array_size):\n\t    \"\"\"\n\t    Helper function for iterating over an array of const-size structs\n\t    \"\"\"\n\t    assert issubclass(cls, ctypes.Structure)\n\t    # Start reading at the given offset\n\t    cur_idx = offset\n", "    for i in range(array_size):\n\t        # Calculate the end offset and verify we don't overflow\n\t        new_idx = cur_idx + ctypes.sizeof(cls)\n\t        if new_idx > len(buf):\n\t            raise EztwTdhException(f\"Array of {cls.__name__} out of bounds\")\n\t        yield cls.from_buffer_copy(buf[cur_idx:new_idx])\n\t        cur_idx = new_idx\n\t# https://learn.microsoft.com/en-us/windows/win32/api/evntprov/ns-evntprov-event_descriptor\n\tclass EVENT_DESCRIPTOR(ctypes.Structure):\n\t    _fields_ = [('Id', USHORT),\n", "                ('Version', UCHAR),\n\t                ('Channel', UCHAR),\n\t                ('Level', UCHAR),\n\t                ('Opcode', UCHAR),\n\t                ('Task', USHORT),\n\t                ('Keyword', ULONGLONG),\n\t                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-trace_event_info\n\tclass TRACE_EVENT_INFO(ctypes.Structure):\n\t    _fields_ = [('ProviderGuid', GUID),\n", "                ('EventGuid', GUID),\n\t                ('EventDescriptor', EVENT_DESCRIPTOR),\n\t                ('DecodingSource', ULONG),\n\t                ('ProviderNameOffset', ULONG),\n\t                ('LevelNameOffset', ULONG),\n\t                ('ChannelNameOffset', ULONG),\n\t                ('KeywordsNameOffset', ULONG),\n\t                ('TaskNameOffset', ULONG),\n\t                ('OpcodeNameOffset', ULONG),\n\t                ('EventMessageOffset', ULONG),\n", "                ('ProviderMessageOffset', ULONG),\n\t                ('BinaryXMLOffset', ULONG),\n\t                ('BinaryXMLSize', ULONG),\n\t                ('EventNameOffset', ULONG),  # Can sometimes mean 'ActivityIDNameOffset'\n\t                ('EventAttributesOffset', ULONG),  # Can sometimes mean 'RelatedActivityIDNameOffset'\n\t                ('PropertyCount', ULONG),\n\t                ('TopLevelPropertyCount', ULONG),\n\t                ('Flags', ULONG),\n\t                #('EventPropertyInfoArray', LPVOID), # Ignore array pointer\n\t                ]\n", "# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-provider_event_info\n\tclass PROVIDER_EVENT_INFO(ctypes.Structure):\n\t    _fields_ = [('NumberOfEvents', ULONG),\n\t                ('Reserved', ULONG),\n\t                #('EventDescriptorsArray', LPVOID), # Ignore array pointer\n\t                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ne-tdh-property_flags\n\tclass TDH_PROPERTY_FLAGS:\n\t    PropertyStruct = 0x1\n\t    PropertyParamLength = 0x2\n", "    PropertyParamCount = 0x4\n\t    PropertyWBEMXmlFragment = 0x8\n\t    PropertyParamFixedLength = 0x10\n\t    PropertyParamFixedCount = 0x20\n\t    PropertyHasTags = 0x40\n\t    PropertyHasCustomSchema = 0x80\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-event_property_info\n\tclass EVENT_PROPERTY_INFO_UNION(ctypes.Structure):\n\t    _fields_ = [('InType', USHORT),\n\t                ('OutType', USHORT),\n", "                ('MapNameOffset', ULONG),\n\t                ]\n\tclass EVENT_PROPERTY_INFO(ctypes.Structure):\n\t    _fields_ = [('Flags', ULONG),\n\t                ('NameOffset', ULONG),\n\t                ('Union', EVENT_PROPERTY_INFO_UNION),\n\t                ('count', USHORT),      # Can also be countPropertyIndex\n\t                ('length', USHORT),     # Can also be lengthPropertyIndex\n\t                ('Reserved', ULONG),    # Can also be Tags\n\t                ]\n", "# https://learn.microsoft.com/en-us/windows/win32/api/tdh/nf-tdh-tdhenumeratemanifestproviderevents\n\tTdhEnumerateManifestProviderEvents = ctypes.WINFUNCTYPE(\n\t    ULONG,                  # Return value\n\t    ctypes.POINTER(GUID),   # LPGUID ProviderGuid\n\t    LPVOID,                 # PPROVIDER_EVENT_INFO Buffer\n\t    ctypes.POINTER(ULONG),  # ULONG *BufferSize\n\t)((\"TdhEnumerateManifestProviderEvents\", TDH_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/nf-tdh-tdhgetmanifesteventinformation\n\tTdhGetManifestEventInformation = ctypes.WINFUNCTYPE(\n\t    ULONG,                              # Return value\n", "    ctypes.POINTER(GUID),               # LPGUID ProviderGuid\n\t    ctypes.POINTER(EVENT_DESCRIPTOR),   # PEVENT_DESCRIPTOR EventDescriptor\n\t    LPVOID,                             # PTRACE_EVENT_INFO Buffer\n\t    ctypes.POINTER(ULONG),              # ULONG *BufferSize\n\t)((\"TdhGetManifestEventInformation\", TDH_DLL))\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ne-tdh-event_field_type\n\tclass EVENT_FIELD_TYPE:\n\t    EventKeywordInformation = 0\n\t    EventLevelInformation = 1\n\t    EventChannelInformation = 2\n", "    EventTaskInformation = 3\n\t    EventOpcodeInformation = 4\n\t    EventInformationMax = 5\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-provider_field_info\n\tclass PROVIDER_FIELD_INFO(ctypes.Structure):\n\t    _fields_ = [('NameOffset', ULONG),\n\t                ('DescriptionOffset', ULONG),\n\t                ('Value', ULONGLONG),\n\t                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/ns-tdh-provider_field_infoarray\n", "class PROVIDER_FIELD_INFOARRAY(ctypes.Structure):\n\t    _fields_ = [('NumberOfElements', ULONG),\n\t                ('FieldType', ULONG),\n\t                #('FieldInfoArray', LPVOID), # Ignore array pointer\n\t                ]\n\t# https://learn.microsoft.com/en-us/windows/win32/api/tdh/nf-tdh-tdhqueryproviderfieldinformation\n\tTdhQueryProviderFieldInformation = ctypes.WINFUNCTYPE(\n\t    ULONG,                  # Return value\n\t    ctypes.POINTER(GUID),   # LPGUID pGuid\n\t    ULONGLONG,              # ULONGLONG EventFieldValue\n", "    ULONG,                  # EVENT_FIELD_TYPE EventFieldType\n\t    LPVOID,                 # PPROVIDER_FIELD_INFOARRAY pBuffer\n\t    ctypes.POINTER(ULONG),  # ULONG *pBufferSize\n\t)((\"TdhQueryProviderFieldInformation\", TDH_DLL))\n\t########\n\t# Eztw\n\t@cache\n\tdef tdh_enumerate_providers() -> list[ProviderMetadata]:\n\t    \"\"\"\n\t    Invokes TdhEnumerateProviders to get a list of provider metadata. Results are cached.\n", "    @return: list of TdhProvider instances\n\t    \"\"\"\n\t    # Call TdhEnumerateProviders with NULL to get the required size (Microsoft-style...)\n\t    size = ULONG(0)\n\t    rc = TdhEnumerateProviders(0, ctypes.byref(size))\n\t    if rc != winerror.ERROR_INSUFFICIENT_BUFFER:\n\t        raise EztwTdhException(f\"TdhEnumerateProviders failed with error {rc}\")\n\t    # Call TdhEnumerateProviders again with allocated buffer\n\t    buf = ctypes.create_string_buffer(size.value)\n\t    rc = TdhEnumerateProviders(ctypes.byref(buf), ctypes.byref(size))\n", "    if rc != winerror.ERROR_SUCCESS:\n\t        raise EztwTdhException(f\"TdhEnumerateProviders failed with error {rc}\")\n\t    # Parse the PROVIDER_ENUMERATION_INFO struct\n\t    pei = PROVIDER_ENUMERATION_INFO.from_buffer_copy(buf[:ctypes.sizeof(PROVIDER_ENUMERATION_INFO)])\n\t    # Get providers info from the array\n\t    providers = []\n\t    # Iterate an array of TRACE_PROVIDER_INFO structs\n\t    for trace_provider_info in iterate_array_of(\n\t            buf, ctypes.sizeof(PROVIDER_ENUMERATION_INFO), TRACE_PROVIDER_INFO, pei.NumberOfProviders):\n\t        schema_source = PROVIDER_DECODING_SOURCE(trace_provider_info.SchemaSource)\n", "        # Add new TdhProvider\n\t        providers.append(ProviderMetadata(\n\t            str(trace_provider_info.ProviderGuid),\n\t            read_wstring_at(buf, trace_provider_info.ProviderNameOffset),\n\t            schema_source))\n\t    return providers\n\t@cache\n\tdef tdh_get_provider_keywords(provider_guid: str) -> dict[str, int]:\n\t    \"\"\"\n\t    Given a provider's GUID attempts to return the known keywords of the provider.\n", "    @param provider_guid: a valid GUID string\n\t    @return: dictionary of keyword name to keyword value\n\t    \"\"\"\n\t    provider_guid_struct = GUID(provider_guid)\n\t    size = ULONG(0)\n\t    # Call TdhQueryProviderFieldInformation with NULL to get the required size (Microsoft-style...)\n\t    rc = TdhQueryProviderFieldInformation(ctypes.byref(provider_guid_struct), 0xffffffffffffffff,\n\t                                          EVENT_FIELD_TYPE.EventKeywordInformation, 0, ctypes.byref(size))\n\t    if rc != winerror.ERROR_INSUFFICIENT_BUFFER:\n\t        raise EztwTdhException(\n", "            f\"TdhQueryProviderFieldInformation failed for provider {provider_guid} with error {rc}\")\n\t    # Call TdhQueryProviderFieldInformation again with allocated buffer\n\t    buf = ctypes.create_string_buffer(size.value)\n\t    rc = TdhQueryProviderFieldInformation(ctypes.byref(provider_guid_struct), 0xffffffffffffffff,\n\t                                          EVENT_FIELD_TYPE.EventKeywordInformation, ctypes.byref(buf), ctypes.byref(size))\n\t    if rc != winerror.ERROR_SUCCESS:\n\t        raise EztwTdhException(\n\t            f\"TdhQueryProviderFieldInformation failed for provider {provider_guid} with error {rc}\")\n\t    pfi = PROVIDER_FIELD_INFOARRAY.from_buffer_copy(buf[:ctypes.sizeof(PROVIDER_FIELD_INFOARRAY)])\n\t    # Enumerate array of PROVIDER_FIELD_INFO\n", "    keywords = {}\n\t    for keywords_field_info in iterate_array_of(\n\t            buf, ctypes.sizeof(PROVIDER_FIELD_INFOARRAY), PROVIDER_FIELD_INFO, pfi.NumberOfElements):\n\t        keyword_name = sanitize_name(read_wstring_at(buf, keywords_field_info.NameOffset), '_')\n\t        keywords[keyword_name] = keywords_field_info.Value\n\t    return keywords\n\t@cache\n\tdef tdh_get_provider_events(provider_guid: str) -> list[EventMetadata]:\n\t    \"\"\"\n\t    Given a provider's GUID attempts to return a list of TdhEvent for this provider using the TDH API.\n", "    Note that each version of each event is represented as an independent TdhEvent.\n\t    May raise EztwTdhException if the provider's event info cannot be retrieved using the TDH API.\n\t    @param provider_guid: a valid GUID string\n\t    @return: list of TdhEvent\n\t    \"\"\"\n\t    # Convert the GUID string to a GUID struct\n\t    provider_guid_struct = GUID(provider_guid)\n\t    # Call TdhEnumerateManifestProviderEvents with NULL to get the required size (Microsoft-style...)\n\t    size = ULONG(0)\n\t    rc = TdhEnumerateManifestProviderEvents(ctypes.byref(provider_guid_struct), 0, ctypes.byref(size))\n", "    if rc != winerror.ERROR_INSUFFICIENT_BUFFER:\n\t        raise EztwTdhException(\n\t            f\"TdhEnumerateManifestProviderEvents failed for provider {provider_guid} with error {rc}\")\n\t    # Call TdhEnumerateManifestProviderEvents again with allocated buffer\n\t    buf = ctypes.create_string_buffer(size.value)\n\t    rc = TdhEnumerateManifestProviderEvents(ctypes.byref(provider_guid_struct), buf, ctypes.byref(size))\n\t    if rc != winerror.ERROR_SUCCESS:\n\t        raise EztwTdhException(\n\t            f\"TdhEnumerateManifestProviderEvents failed for provider {provider_guid} with error {rc}\")\n\t    # Parse the PROVIDER_EVENT_INFO struct\n", "    pei = PROVIDER_EVENT_INFO.from_buffer_copy(buf[:ctypes.sizeof(PROVIDER_EVENT_INFO)])\n\t    # Enumerate array of EVENT_DESCRIPTOR\n\t    events = []\n\t    for event_descriptor in iterate_array_of(\n\t            buf, ctypes.sizeof(PROVIDER_EVENT_INFO), EVENT_DESCRIPTOR, pei.NumberOfEvents):\n\t        # Call TdhGetManifestEventInformation with NULL to get the required size (Microsoft-style...)\n\t        event_info_size = ULONG(0)\n\t        rc = TdhGetManifestEventInformation(\n\t            ctypes.byref(provider_guid_struct), ctypes.byref(event_descriptor), 0, ctypes.byref(event_info_size))\n\t        if rc != winerror.ERROR_INSUFFICIENT_BUFFER:\n", "            raise EztwTdhException(\n\t                f\"TdhGetManifestEventInformation failed for provider {provider_guid} with error {rc}\")\n\t        # Call TdhGetManifestEventInformation again with allocated buffer\n\t        event_info_buf = ctypes.create_string_buffer(event_info_size.value)\n\t        rc = TdhGetManifestEventInformation(\n\t            ctypes.byref(provider_guid_struct), ctypes.byref(event_descriptor),\n\t            event_info_buf, ctypes.byref(event_info_size))\n\t        if rc != winerror.ERROR_SUCCESS:\n\t            raise EztwTdhException(\n\t                f\"TdhGetManifestEventInformation failed for provider {provider_guid} with error {rc}\")\n", "        # Parse the TRACE_EVENT_INFO struct\n\t        trace_event_info = TRACE_EVENT_INFO.from_buffer_copy(event_info_buf)\n\t        # Event ID/version uniquely identify this event in this provider\n\t        event_id = trace_event_info.EventDescriptor.Id\n\t        event_version = trace_event_info.EventDescriptor.Version\n\t        # Event keyword control the consumed events\n\t        # https://learn.microsoft.com/en-us/windows/win32/api/evntprov/ns-evntprov-event_descriptor\n\t        event_keyword = trace_event_info.EventDescriptor.Keyword & 0x0000FFFFFFFFFFFF\n\t        # Take either the event name or task name\n\t        event_name = None\n", "        if trace_event_info.EventNameOffset > 0:\n\t            event_name = read_wstring_at(event_info_buf, trace_event_info.EventNameOffset).rstrip(' ')\n\t        elif trace_event_info.TaskNameOffset > 0:\n\t            event_name = read_wstring_at(event_info_buf, trace_event_info.TaskNameOffset).rstrip(' ')\n\t        # Iterate over event properties array\n\t        # https://learn.microsoft.com/en-us/windows/win32/etw/retrieving-event-metadata\n\t        fields = []\n\t        for event_property_info in iterate_array_of(\n\t                event_info_buf, ctypes.sizeof(TRACE_EVENT_INFO),\n\t                EVENT_PROPERTY_INFO, trace_event_info.TopLevelPropertyCount):\n", "            # Get the field name\n\t            field_name = sanitize_name(read_wstring_at(event_info_buf, event_property_info.NameOffset), \"\")\n\t            length_field = None\n\t            # If this is a fixed-length field - keep the int value\n\t            if event_property_info.Flags & TDH_PROPERTY_FLAGS.PropertyParamFixedLength:\n\t                length_field = event_property_info.length\n\t            # Else if this field's length in bytes is described in another field, record it\n\t            elif event_property_info.Flags & TDH_PROPERTY_FLAGS.PropertyParamLength:\n\t                length_index = event_property_info.length\n\t                if length_index > len(fields):\n", "                    raise EztwTdhException(\n\t                        f\"Provider {provider_guid} - {event_name} length field index too high\")\n\t                length_field = fields[length_index].name\n\t            count_field = None\n\t            # If this is a fixed-count field - keep the int value\n\t            if event_property_info.Flags & TDH_PROPERTY_FLAGS.PropertyParamFixedCount:\n\t                count_field = event_property_info.count\n\t            # Else if this field's count (repeated array) is described in another field, record it\n\t            elif event_property_info.Flags & TDH_PROPERTY_FLAGS.PropertyParamCount:\n\t                count_index = event_property_info.count\n", "                if count_index > len(fields):\n\t                    raise EztwTdhException(\n\t                        f\"Provider {provider_guid} - {event_name} count field index too high\")\n\t                count_field = fields[count_index].name\n\t            # TODO: check other (currently unsupported) flags?\n\t            # Field type (\"intype\") - if unknown, keep the integer value\n\t            intype_value = event_property_info.Union.InType\n\t            if intype_value <= EVENT_FIELD_INTYPE_MAX_VALUE:\n\t                intype_value = EVENT_FIELD_INTYPE(intype_value)\n\t            # Append field\n", "            fields.append(EventFieldMetadata(field_name, intype_value, length_field, count_field))\n\t        # Append event\n\t        events.append(EventMetadata(provider_guid, event_id, event_version, event_name, event_keyword, fields))\n\t    return events\n"]}
{"filename": "eztw/provider.py", "chunked_list": ["\"\"\"\n\tImplementation of EztwProvider which represents a single provider (and its events).\n\tImplementation of EztwManager - a utility class for efficiently managing and accessing providers\n\tby name and GUID.\n\tIn addition, multiple API functions are exposed:\n\t    get_provider - return EztwProvider by GUID or name\n\t    get_providers - return a list of all locally registered providers (GUIDs and names)\n\t    get_provider_config - return the required EztwProviderConfig to enable providers based on desired events\n\t    add_manual_provider - manually add a new, non-registered provider\n\t    parse_event - given an EventRecord, parse it (assuming the provider and its events are known)\n", "\"\"\"\n\tfrom collections import defaultdict\n\tfrom dataclasses import dataclass\n\tfrom .common import sanitize_name, EztwException, as_list\n\tfrom .trace_common import TRACE_LEVEL_VERBOSE, MSNT_SystemTrace_GUID, MAX_KEYWORDS\n\tfrom .guid import GUID, canonize_GUID\n\tfrom .event import EztwEvent, EventRecord\n\tfrom .tdh import tdh_enumerate_providers, tdh_get_provider_keywords, tdh_get_provider_events, EventMetadata\n\tclass EztwProviderException(EztwException):\n\t    \"\"\"Indicates a missing or unknown provider\"\"\"\n", "class EztwProvider:\n\t    \"\"\"\n\t    Represents a trace provider and its events.\n\t    It is constructed from GUID, name and a list of TdhEvent objects (usually done automatically by EztwManager).\n\t    \"\"\"\n\t    def __init__(self, guid: str, name: str, keywords: dict[str, int], event_descriptors: list[EventMetadata]):\n\t        self.guid = str(GUID(guid))\n\t        self.name = name\n\t        self.keywords = {}\n\t        for keyword_name, keyword_value in keywords.items():\n", "            actual_keyword_name = f\"Keyword_{keyword_name}\"\n\t            self.keywords[actual_keyword_name] = keyword_value\n\t            setattr(self, actual_keyword_name, keyword_value)\n\t        # Group the event descriptors by their id\n\t        by_id = defaultdict(list)\n\t        for event_descriptor in event_descriptors:\n\t            by_id[event_descriptor.id].append(event_descriptor)\n\t        # Rearrange the events for ease of access\n\t        self.events_by_id = {}\n\t        self.events_by_name = {}\n", "        for event_id, event_descriptors in by_id.items():\n\t            # Add a new EztwEvent instance, store it by id and by its sanitized name\n\t            event = EztwEvent(event_descriptors)\n\t            self.events_by_id[event.id] = event\n\t            if event.name:\n\t                actual_event_name = f\"Event_{sanitize_name(event.name)}_{event.id}\"\n\t            else:\n\t                actual_event_name = f\"Event_{event.id}\"\n\t            self.events_by_name[actual_event_name] = event\n\t            setattr(self, actual_event_name, event)\n", "    @property\n\t    def events(self) -> list[EztwEvent]:\n\t        return [event for _id, event in sorted(self.events_by_id.items())]\n\t    def get_events_by_ids(self, event_ids: int | list[int]) -> list[EztwEvent]:\n\t        return [self.events_by_id[event_id] for event_id in as_list(event_ids) if event_id in self.events_by_id]\n\t    def parse(self, event_record: EventRecord):\n\t        \"\"\"\n\t        Given an EventRecord (and assuming it has the correct provider GUID), attempt to parse its content\n\t        fields based on its ID and version\n\t        \"\"\"\n", "        # Ensure the provider GUID is correct\n\t        assert event_record.provider_guid == self.guid\n\t        event = self.events_by_id.get(event_record.id)\n\t        if not event:\n\t            raise EztwProviderException(\n\t                f\"Provider {self.guid} ({self.name}) - unknown event ID {event_record.id}\")\n\t        return event.parse(event_record)\n\t    def string_details(self):\n\t        \"\"\"\n\t        @return: a nice representation of the provider, including all its events\n", "        \"\"\"\n\t        res = [f\"Provider GUID={self.guid} ({self.name})\", \"*\" * 40]\n\t        res.append(\"Keywords:\")\n\t        for keyword_name, keyword_value in sorted(self.keywords.items(), key=lambda x: x[1]):\n\t            res.append(f\"\\t{keyword_name} = {hex(keyword_value)}\")\n\t        res.append(\"Events:\")\n\t        for event in self.events:\n\t            res.append(event.string_details(indent=1))\n\t        return '\\n'.join(res)\n\t    def print(self):\n", "        print(self.string_details())\n\t    def __repr__(self):\n\t        return f\"{self.__class__.__name__}(guid={self.guid}, name={self.name!r}, {len(self.events_by_name)} events)\"\n\t@dataclass\n\tclass EztwProviderConfig:\n\t    \"\"\"\n\t    Used to enable providers in new sessions using provider GUID, keywords and verbosity level\n\t    \"\"\"\n\t    guid: str\n\t    keywords: int = MAX_KEYWORDS\n", "    level: int = TRACE_LEVEL_VERBOSE\n\tdef canonize_provider_name(provider_name: str) -> str:\n\t    return sanitize_name(provider_name).lower()\n\tclass EztwManager:\n\t    \"\"\"\n\t    A convenience class for retrieving and accessing providers, creating appropriate configuration to enable\n\t    providers in trace sessions, and generic parsing of event records (by automatically finding the correct\n\t    provider and event).\n\t    Access to this class' methods is thread-safe.\n\t    \"\"\"\n", "    def __init__(self):\n\t        # This is the EztwProvider cache (starts empty)\n\t        self.providers = {}\n\t        # This is a tombstone for providers which were asked for but are unavailable\n\t        # (to prevent using the TDH again for unknown providers)\n\t        self._unknown_provider_tombstone = object()\n\t        # Get all locally registered providers and map both from GUID to name as well as name to GUID\n\t        self.provider_guid_by_name = {}\n\t        self.provider_name_by_guid = {}\n\t        for tdh_provider in tdh_enumerate_providers():\n", "            self.provider_guid_by_name[canonize_provider_name(tdh_provider.name)] = tdh_provider.guid\n\t            # Some GUIDs appear more than once - keep the first one (the name is not necessarily unique)\n\t            if tdh_provider.guid in self.provider_name_by_guid:\n\t                continue\n\t            self.provider_name_by_guid[tdh_provider.guid] = tdh_provider.name\n\t        # Special provider (very old kernel provider)\n\t        self.providers[MSNT_SystemTrace_GUID] = self._unknown_provider_tombstone\n\t        self.provider_name_by_guid[MSNT_SystemTrace_GUID] = \"MSNT_SystemTrace\"\n\t    def add_manual_provider(self, provider_guid: str, provider_name: str, provider_keywords: dict[str, int],\n\t                            provider_events: list[EventMetadata]):\n", "        new_provider = EztwProvider(provider_guid, provider_name, provider_keywords, provider_events)\n\t        self.providers[new_provider.guid] = new_provider\n\t        self.provider_name_by_guid[new_provider.guid] = provider_name\n\t        self.provider_guid_by_name[canonize_provider_name(provider_name)] = new_provider.guid\n\t        return new_provider\n\t    def get_provider_name_from_guid(self, provider_guid: str) -> str:\n\t        provider_guid = canonize_GUID(provider_guid)\n\t        return self.provider_name_by_guid.get(provider_guid) or \"Unknown\"\n\t    def get_provider_by_guid(self, provider_guid: str) -> EztwProvider:\n\t        provider_guid = canonize_GUID(provider_guid)\n", "        provider = self.providers.get(provider_guid)\n\t        # If the value for this GUID is a tombstone - we already know this provider is unavailable via TDH API\n\t        if provider is self._unknown_provider_tombstone:\n\t            raise EztwProviderException(f\"Could not find events for provider {provider_guid}\")\n\t        # If the value for this GUID is cached - simply return it\n\t        elif provider is not None:\n\t            return provider\n\t        # Add new provider\n\t        provider_name = self.get_provider_name_from_guid(provider_guid)\n\t        try:\n", "            provider_events = tdh_get_provider_events(provider_guid)\n\t            provider_keywords = tdh_get_provider_keywords(provider_guid)\n\t            new_provider = EztwProvider(provider_guid, provider_name, provider_keywords, provider_events)\n\t            self.providers[provider_guid] = new_provider\n\t            return new_provider\n\t        except EztwException:\n\t            # Set a tombstone for this provider GUID, so we won't try again for the next event\n\t            self.providers[provider_guid] = self._unknown_provider_tombstone\n\t            raise EztwProviderException(f\"Could not find events for provider {provider_guid}\")\n\t    def get_provider_by_name(self, provider_name: str) -> EztwProvider:\n", "        provider_guid = self.provider_guid_by_name.get(canonize_provider_name(provider_name))\n\t        if not provider_guid:\n\t            raise EztwProviderException(f\"Could not find locally registered provider named {provider_name!r}\")\n\t        return self.get_provider_by_guid(provider_guid)\n\t    def get_provider(self, guid_or_name: str) -> EztwProvider:\n\t        if GUID.verify(guid_or_name):\n\t            return self.get_provider_by_guid(guid_or_name)\n\t        else:\n\t            return self.get_provider_by_name(guid_or_name)\n\t    def parse(self, event_record: EventRecord):\n", "        return self.get_provider_by_guid(event_record.provider_guid).parse(event_record)\n\t    def __repr__(self):\n\t        return f\"{self.__class__.__name__}({len(self.provider_name_by_guid)} registered providers)\"\n\t#####################\n\t# Syntactic sugaring\n\t# Create a single global instance of the manager\n\teztwm = EztwManager()\n\tdef get_provider(guid_or_name: str) -> EztwProvider:\n\t    \"\"\"\n\t    @param guid_or_name: either a provider name or a provider GUID string\n", "    @return: EztwProvider\n\t    \"\"\"\n\t    return eztwm.get_provider(guid_or_name)\n\tdef get_providers() -> list[(str, str)]:\n\t    \"\"\"\n\t    @return: a list of tuples, each containing (provider GUID, provider name)\n\t    \"\"\"\n\t    return list(eztwm.provider_name_by_guid.items())\n\tdef get_provider_config(events: EztwEvent | list[EztwEvent], keywords: None | dict[str, int] = None,\n\t                        level: int = TRACE_LEVEL_VERBOSE) -> list[EztwProviderConfig]:\n", "    \"\"\"\n\t    @param events: either a single EztwEvent or a list of them (not necessarily from the same provider!)\n\t    @param keywords: either None (implicit keywords from events) or a dict from provider GUID to keyword value.\n\t        (only providers for which there are events given are used, others are ignored...)\n\t    @param level: verbosity level (0-5, default: TRACE_LEVEL_VERBOSE)\n\t    @return: list of EztwProviderConfig, one for each relevant provider\n\t    \"\"\"\n\t    # Rearrange events by provider GUID, and aggregate their keywords\n\t    by_provider_guid = defaultdict(int)\n\t    for event in as_list(events):\n", "        by_provider_guid[event.provider_guid] |= event.keyword\n\t    # Override implicit keywords as needed\n\t    if keywords:\n\t        for provider_guid, keywords in keywords.items():\n\t            if provider_guid in by_provider_guid:\n\t                by_provider_guid[provider_guid] = keywords\n\t    return [EztwProviderConfig(guid, keywords, level) for guid, keywords in by_provider_guid.items()]\n\tdef add_manual_provider(provider_guid: str, provider_name: str, provider_keywords: dict[str, int],\n\t                        provider_events: list[EventMetadata]):\n\t    \"\"\"\n", "    Manually add a new provider (potentially overwriting existing one with identical GUID/name)\n\t    @param provider_guid: GUID object\n\t    @param provider_name: string\n\t    @param provider_keywords: a dictionary that maps keyword names to values\n\t    @param provider_events: a list of TdhEvent objects\n\t    \"\"\"\n\t    return eztwm.add_manual_provider(provider_guid, provider_name, provider_keywords, provider_events)\n\tdef parse_event(event_record: EventRecord):\n\t    \"\"\"\n\t    Parse the given event record according to its provider GUID, event ID and event version, and\n", "    return an immutable event template containing the parsed fields.\n\t    Note that the provider's details are automatically fetched if this is the first time it's encountered (cached).\n\t    @param event_record: an EventRecord object\n\t    \"\"\"\n\t    return eztwm.parse(event_record)\n"]}
{"filename": "eztw/event.py", "chunked_list": ["\"\"\"\n\tImplementation of EztwEvent which represents a single event template.\n\tEach event may have multiple versions, each with different fields.\n\tThis class also allows parsing the context-specific contents of an event record.\n\t\"\"\"\n\timport struct\n\timport ctypes\n\timport functools\n\tfrom collections import OrderedDict\n\tfrom dataclasses import make_dataclass\n", "from typing import Callable\n\timport keyword as python_keywords\n\tfrom .common import FILETIME_to_time, EztwException, as_list, sanitize_name, SYSTEMTIME, SYSTEMTIME_to_time\n\tfrom .guid import GUID\n\tfrom .consumer import EventRecord\n\tfrom .trace_common import EVENT_FIELD_INTYPE, EventMetadata, EventFieldMetadata\n\tclass EztwEventParseException(EztwException):\n\t    \"\"\"Represents problem parsing an event's fields\"\"\"\n\tclass FieldsReader:\n\t    \"\"\"\n", "    Helper class for field data deserialization\n\t    \"\"\"\n\t    def __init__(self, data: bytes, is_64bit: bool):\n\t        self.data = data\n\t        self.is_64bit = is_64bit\n\t        self.cur_offset = 0\n\t    def consume(self, size: int) -> bytes:\n\t        \"\"\"\n\t        Read X bytes if there are enough bytes, or raise EztwEventParseException if not\n\t        \"\"\"\n", "        if self.cur_offset + size > len(self.data):\n\t            raise EztwEventParseException(\n\t                f\"Data out of bounds at {self.cur_offset}:{size} (data size is {len(self.data)})\")\n\t        res = self.data[self.cur_offset:self.cur_offset + size]\n\t        self.cur_offset += size\n\t        return res\n\t    def consume_INT8(self):\n\t        return struct.unpack(\"b\", self.consume(1))[0]\n\t    def consume_UINT8(self):\n\t        return struct.unpack(\"B\", self.consume(1))[0]\n", "    def consume_INT16(self):\n\t        return struct.unpack(\"<h\", self.consume(2))[0]\n\t    def consume_UINT16(self):\n\t        return struct.unpack(\"<H\", self.consume(2))[0]\n\t    def consume_INT32(self):\n\t        return struct.unpack(\"<i\", self.consume(4))[0]\n\t    def consume_UINT32(self):\n\t        return struct.unpack(\"<I\", self.consume(4))[0]\n\t    def consume_INT64(self):\n\t        return struct.unpack(\"<q\", self.consume(8))[0]\n", "    def consume_UINT64(self):\n\t        return struct.unpack(\"<Q\", self.consume(8))[0]\n\t    def consume_POINTER(self):\n\t        if self.is_64bit:\n\t            return self.consume_UINT64()\n\t        else:\n\t            return self.consume_UINT32()\n\t    def consume_FILETIME(self):\n\t        return FILETIME_to_time(self.consume_UINT64())\n\t    def consume_SYSTEMTIME(self):\n", "        return SYSTEMTIME_to_time(SYSTEMTIME.from_buffer_copy(self.consume(16)))\n\t    def consume_STRING(self, size=None):\n\t        if size is None:\n\t            str_value = ctypes.string_at(self.data[self.cur_offset:])\n\t            # Advance internal offset by string size plus null termination byte\n\t            self.cur_offset += len(str_value) + 1\n\t        else:\n\t            # Manually append null termination\n\t            str_value = ctypes.string_at(self.consume(size) + b'\\x00')\n\t        # ctypes.string_at (unlike wstring_at) returns bytes, need to decode\n", "        return str_value.decode(errors='replace')\n\t    def consume_WSTRING(self, size=None):\n\t        if size is None:\n\t            str_value = ctypes.wstring_at(self.data[self.cur_offset:])\n\t            # Advance internal offset by string size plus null termination byte, multiplied by wchar_t size\n\t            self.cur_offset += (len(str_value) + 1) * 2\n\t        else:\n\t            # Manually append null termination\n\t            str_value = ctypes.wstring_at(self.consume(size * 2) + b'\\x00\\x00')\n\t        return str_value\n", "    def consume_BOOLEAN(self):\n\t        return bool(self.consume_UINT32())\n\t    def consume_FLOAT(self):\n\t        return struct.unpack(\"f\", self.consume(4))[0]\n\t    def consume_DOUBLE(self):\n\t        return struct.unpack(\"d\", self.consume(8))[0]\n\t    def consume_SID(self):\n\t        # https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-sid\n\t        # TODO: parse further?\n\t        part1 = self.consume(2 + 6)\n", "        part2 = self.consume(part1[1] * 4)\n\t        return part1 + part2\n\t    def consume_GUID(self):\n\t        return str(GUID.from_buffer_copy(self.consume(16)))\n\t    def consume_BINARY(self, size=None):\n\t        if size is not None:\n\t            return self.consume(size)\n\t        else:\n\t            # For some old IPv6 representations\n\t            return self.consume(16)\n", "    def consume_SIZED_WSTRING(self):\n\t        size = self.consume_UINT16()\n\t        return ctypes.wstring_at(self.consume(size) + b'\\x00\\x00')\n\t    def consume_SIZED_STRING(self):\n\t        size = self.consume_UINT16()\n\t        return ctypes.string_at(self.consume(size) + b'\\x00').decode(errors='replace')\n\t    def consume_SIZE_T(self):\n\t        if self.is_64bit:\n\t            return self.consume_UINT64()\n\t        else:\n", "            return self.consume_UINT32()\n\t    def read(self, field: EventFieldMetadata, previous_fields: OrderedDict):\n\t        match field.type:\n\t            case EVENT_FIELD_INTYPE.INTYPE_INT8:\n\t                consume_func = self.consume_INT8\n\t            case EVENT_FIELD_INTYPE.INTYPE_UINT8:\n\t                consume_func = self.consume_UINT8\n\t            case EVENT_FIELD_INTYPE.INTYPE_INT16:\n\t                consume_func = self.consume_INT16\n\t            case EVENT_FIELD_INTYPE.INTYPE_UINT16:\n", "                consume_func = self.consume_UINT16\n\t            case EVENT_FIELD_INTYPE.INTYPE_INT32:\n\t                consume_func = self.consume_INT32\n\t            case EVENT_FIELD_INTYPE.INTYPE_UINT32 | EVENT_FIELD_INTYPE.INTYPE_HEXINT32:\n\t                consume_func = self.consume_UINT32\n\t            case EVENT_FIELD_INTYPE.INTYPE_INT64:\n\t                consume_func = self.consume_INT64\n\t            case EVENT_FIELD_INTYPE.INTYPE_UINT64 | EVENT_FIELD_INTYPE.INTYPE_HEXINT64:\n\t                consume_func = self.consume_UINT64\n\t            case EVENT_FIELD_INTYPE.INTYPE_POINTER:\n", "                consume_func = self.consume_POINTER\n\t            case EVENT_FIELD_INTYPE.INTYPE_BOOLEAN:\n\t                consume_func = self.consume_BOOLEAN\n\t            case EVENT_FIELD_INTYPE.INTYPE_FILETIME:\n\t                consume_func = self.consume_FILETIME\n\t            case EVENT_FIELD_INTYPE.INTYPE_SYSTEMTIME:\n\t                consume_func = self.consume_SYSTEMTIME\n\t            case EVENT_FIELD_INTYPE.INTYPE_UNICODESTRING:\n\t                consume_func = self.consume_WSTRING\n\t            case EVENT_FIELD_INTYPE.INTYPE_ANSISTRING:\n", "                consume_func = self.consume_STRING\n\t            case EVENT_FIELD_INTYPE.INTYPE_FLOAT:\n\t                consume_func = self.consume_FLOAT\n\t            case EVENT_FIELD_INTYPE.INTYPE_DOUBLE:\n\t                consume_func = self.consume_DOUBLE\n\t            case EVENT_FIELD_INTYPE.INTYPE_SID:\n\t                consume_func = self.consume_SID\n\t            case EVENT_FIELD_INTYPE.INTYPE_GUID:\n\t                consume_func = self.consume_GUID\n\t            case EVENT_FIELD_INTYPE.INTYPE_BINARY:\n", "                consume_func = self.consume_BINARY\n\t            case EVENT_FIELD_INTYPE.INTYPE_COUNTEDSTRING:\n\t                consume_func = self.consume_SIZED_WSTRING\n\t            case EVENT_FIELD_INTYPE.INTYPE_COUNTEDANSISTRING:\n\t                consume_func = self.consume_SIZED_STRING\n\t            case EVENT_FIELD_INTYPE.INTYPE_SIZET:\n\t                consume_func = self.consume_SIZE_T\n\t            case _:\n\t                raise EztwEventParseException(f\"Unknown or unsupported IN_TYPE {field.type!r}\")\n\t        # https://docs.microsoft.com/en-us/windows/win32/wes/eventmanifestschema-inputtype-complextype\n", "        # If there's a 'length' field, either read this amount of bytes (if length is int) or the variable\n\t        # length is stored in a previous field (if length is str)\n\t        if field.length is not None:\n\t            length_value = previous_fields.get(field.length) if not isinstance(field.length, int) else field.length\n\t            consume_func = functools.partial(consume_func, length_value)\n\t        # If the 'count' field is not None, read the same type multiple times\n\t        if field.count is not None:\n\t            count_value = previous_fields.get(field.count) if not isinstance(field.count, int) else field.count\n\t            return [consume_func() for _ in range(count_value)]\n\t        else:\n", "            return consume_func()\n\tclass EztwEvent:\n\t    \"\"\"\n\t    Represents a single event of a provider.\n\t    Maintains all known versions of this event and allows easy parsing.\n\t    Each version has its own dataclass (called EventTemplate or EventTemplate_#name#).\n\t    \"\"\"\n\t    def __init__(self, event_descriptors: list[EventMetadata]):\n\t        # This instance is initialized from a list of TdhEvent descriptors, so for sanity\n\t        # make sure there's at least one, and they all share the same provider GUID, id, name and keyword\n", "        assert len(event_descriptors) >= 1\n\t        self.provider_guid = event_descriptors[0].provider_guid\n\t        assert all(ed.provider_guid == self.provider_guid for ed in event_descriptors)\n\t        self.id = event_descriptors[0].id\n\t        assert all(ed.id == self.id for ed in event_descriptors)\n\t        self.name = event_descriptors[0].name\n\t        if not all(ed.name == self.name for ed in event_descriptors):\n\t            # Take the latest name...\n\t            self.name = event_descriptors[-1].name\n\t        self.keyword = 0\n", "        # Sort the descriptors by their version, and create a template for their parsed fields\n\t        self.versions = {}\n\t        template_name = f\"EventTemplate_{self.id}\" if not self.name else f\"EventTemplate_{sanitize_name(self.name)}\"\n\t        for event_descriptor in event_descriptors:\n\t            # Note that sometimes different versions of the same event have different keywords...\n\t            # Aggregate them just to be on the safe side\n\t            self.keyword |= event_descriptor.keyword\n\t            # Make sure that none of the field names is accidentally also a reserved Python keyword\n\t            # If so - append an underscore at the end.\n\t            # If the field name is a number - prepend it with an underscore.\n", "            field_names = []\n\t            for field in event_descriptor.fields:\n\t                if python_keywords.iskeyword(field.name):\n\t                    field_names.append(field.name + \"_\")\n\t                elif not field.name.isidentifier():\n\t                    field_names.append(\"_\" + field.name)\n\t                else:\n\t                    field_names.append(field.name)\n\t            self.versions[event_descriptor.version] = (\n\t                event_descriptor.fields,\n", "                make_dataclass(template_name, field_names)\n\t            )\n\t    def string_details(self, indent=0) -> str:\n\t        \"\"\"\n\t        @return: a nice representation of the event's versions and fields\n\t        \"\"\"\n\t        indent_str = \"\\t\"*indent\n\t        res = [f\"{indent_str}Event ID={self.id} ({self.name}) keywords: {hex(self.keyword)}\"]\n\t        for version, (fields, _template) in sorted(self.versions.items()):\n\t            res.append(f\"{indent_str}\\tVersion {version}:\")\n", "            if not fields:\n\t                res.append(f\"{indent_str}\\t\\t(empty event)\")\n\t            for field in fields:\n\t                if isinstance(field.type, EVENT_FIELD_INTYPE):\n\t                    type_name = field.type.name\n\t                else:\n\t                    type_name = f\"Unknown type {field.type}\"\n\t                length_str = \"\"\n\t                if field.length is not None:\n\t                    length_str = f\" (length: {field.length})\"\n", "                count_str = \"\"\n\t                if field.count is not None:\n\t                    count_str = f\" (count: {field.count})\"\n\t                res.append(f\"{indent_str}\\t\\t{field.name}: {type_name}{length_str}{count_str}\")\n\t        return '\\n'.join(res)\n\t    def print(self):\n\t        print(self.string_details())\n\t    def parse(self, event_record: EventRecord):\n\t        \"\"\"\n\t        Given an EventRecord, find the correct template by version and parse the fields according to the schema.\n", "        @param event_record: an EventRecord instance\n\t        @return: the parsed field inside a dataclass template\n\t        \"\"\"\n\t        # Sanity - verify provider GUID, ID and version\n\t        # (usually this function is called by EztwProvider, so the parameters are already correct)\n\t        # However, if this is called directly we need to make sure...\n\t        assert event_record.provider_guid == self.provider_guid\n\t        assert event_record.id == self.id\n\t        if event_record.version not in self.versions:\n\t            raise EztwEventParseException(f\"Unknown version {event_record.version} for event \"\n", "                                          f\"{event_record.id} of provider {event_record.provider_guid}\")\n\t        # Get the list of fields and the pre-created \"template\"\n\t        event_fields, event_template = self.versions[event_record.version]\n\t        # Maintain the order of the parsed fields\n\t        field_values = OrderedDict()\n\t        # Initialize a new data consumer\n\t        fields_reader = FieldsReader(event_record.data, event_record.is_64bit)\n\t        for field in event_fields:\n\t            # Parse the next field\n\t            field_values[field.name] = fields_reader.read(field, field_values)\n", "        # Cast the parsed fields, by order, into the immutable event template\n\t        return event_template(*field_values.values())\n\t    def __repr__(self):\n\t        return f\"{self.__class__.__name__}(id={self.id}, name={self.name!r}, \" \\\n\t               f\"provider_guid={self.provider_guid}, keyword={hex(self.keyword)})\"\n\t    def __hash__(self):\n\t        \"\"\"The event is uniquely identified via its provider GUID and event ID\"\"\"\n\t        return hash((self.provider_guid, self.id))\n\tclass EztwFilter:\n\t    \"\"\"\n", "    Simple helper class for filtering events.\n\t    Initialize from a single EztwEvent or a list of them, then given an EventRecord, check if\n\t    it's contained in this filter.\n\t    Example:\n\t    >>> # Initialize from a single EztwEvent or a list of them\n\t    >>> ezf = EztwFilter(some_event)\n\t    >>>\n\t    >>> # Then, given an event record from a consumer:\n\t    >>> if event_record in ezf:\n\t    >>>     # Do something\n", "    \"\"\"\n\t    def __init__(self, events: EztwEvent | list[EztwEvent]):\n\t        self.event_hashes = {hash(event) for event in as_list(events)}\n\t    def __contains__(self, event_record: EventRecord):\n\t        return hash(event_record) in self.event_hashes\n\tclass EztwDispatcher:\n\t    \"\"\"\n\t    Simple mapper from event class to a callback function.\n\t    Initialize from a dict of: { EztwEvent: callable }\n\t    Filtering is done similarly to EztwFilter.\n", "    Each callable must accept two parameters - the event record and the parsed event. The parsed event\n\t    can either be parsed manually (using the parse_event function, for example), but is more often\n\t    returned by an EztwSessionIterator (like the one used in the consume_events function).\n\t    The EztwDispatcher is simply invoked by calling it. If the given event record is not a part\n\t    of the dispatcher, nothing will happen. Note that the hash of both EventRecord and EztwEvent are the\n\t    same iff both their provider_guid and ID are the same.\n\t    To simplify even further, use the .events member of the dispatcher as a list of events to filter\n\t    for consume_events and EztwSessionIterator.\n\t    Example:\n\t    >>> # Define callback functions for the desired events\n", "    >>> def some_callback(event_record, parsed_event):\n\t    >>>     # Do something\n\t    >>>\n\t    >>> # Initialize from a list of EztwEvent and their desired callback\n\t    >>> ezd = EztwDispatcher({some_event: some_callback, ...})\n\t    >>>\n\t    >>> # Then, given an event record and its parsed event (for example as yielded from consume_events):\n\t    >>> for event_record, parsed_event in consume_events(ezd.events):\n\t    >>>     # Call the callable (if the event is relevant, otherwise nothing happens)\n\t    >>>     ezd(event_record, parsed_event)\n", "    \"\"\"\n\t    def __init__(self, events_and_callbacks: dict[EztwEvent, Callable]):\n\t        self.events = []\n\t        self.mapping = {}\n\t        for event, callback in events_and_callbacks.items():\n\t            self.events.append(event)\n\t            self.mapping[hash(event)] = callback\n\t    def __call__(self, event_record: EventRecord, parsed_event):\n\t        dispatch = self.mapping.get(hash(event_record))\n\t        if dispatch:\n", "            dispatch(event_record, parsed_event)\n"]}
{"filename": "eztw/scripts/consume_raw_provider.py", "chunked_list": ["\"\"\"\n\tThis is a useful script that can consume any provider based on its GUID and optional keywords\n\t(defaults to MAX_KEYWORDS). Events are not parsed, but rather their event records are printed\n\tand also their hex data (using the hexdump module, if it's installed, or binascii.hexlify otherwise).\n\t\"\"\"\n\timport sys\n\timport time\n\tfrom .. import EztwController, EztwConsumer\n\tfrom ..trace_common import ad_hoc_session_name, MAX_KEYWORDS, MSNT_SystemTrace_GUID, LOST_EVENTS_GUID\n\tfrom ..provider import EztwProviderConfig\n", "from ..guid import GUID\n\tfrom ..log import LOGGER\n\ttry:\n\t    # Optional better printing using the hexdump module\n\t    import hexdump\n\t    print_hexdump = hexdump.hexdump\n\texcept ImportError:\n\t    import binascii\n\t    def print_hexdump(data):\n\t        print(binascii.hexlify(data, ' '))\n", "def main():\n\t    if len(sys.argv) < 2:\n\t        print(f\"USAGE: {sys.argv[0]} [provider GUID] <hex keywords, default is 0xffffffffffffffff>\")\n\t        sys.exit(1)\n\t    provider_guid = sys.argv[1]\n\t    if not GUID.verify(provider_guid):\n\t        raise ValueError(f\"Invalid GUID value {provider_guid!r}\")\n\t    if len(sys.argv) > 2:\n\t        keywords = int(sys.argv[2], 16)\n\t    else:\n", "        keywords = MAX_KEYWORDS\n\t    config = EztwProviderConfig(provider_guid, keywords)\n\t    session_name = ad_hoc_session_name()\n\t    LOGGER.info(f\"Consuming events from {provider_guid} with keywords {hex(keywords)} - press Ctrl+C to stop\")\n\t    with EztwController(session_name, config):\n\t        for i, event_record in enumerate(EztwConsumer(session_name)):\n\t            print(f\"=== [Event {i}] {time.ctime(event_record.timestamp)} ===\")\n\t            if event_record.provider_guid == MSNT_SystemTrace_GUID:\n\t                print(\"<SYSTEM TRACE EVENT>\")\n\t            elif event_record.provider_guid == LOST_EVENTS_GUID:\n", "                print(\"<LOST EVENT>\")\n\t            else:\n\t                print(event_record)\n\t                print_hexdump(event_record.data)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/consume_provider.py", "chunked_list": ["\"\"\"\n\tThis is a useful script that can consume any locally registered provider directly from command-line.\n\tIt automatically parses any registered events and allows easy exploration of trace providers.\n\tIf only specific events are desired, provide them as the last parameter as a comma-separated list of IDs.\n\tOtherwise (default) all the provider's events are consumed.\n\tFor example, to consume any process/thread start events:\n\tpython -m eztw.scripts.consume_provider microsoft-windows-kernel-process 1,3\n\t\"\"\"\n\timport sys\n\timport time\n", "from .. import get_provider, consume_events, MAX_KEYWORDS\n\tfrom ..log import LOGGER\n\tdef main():\n\t    if len(sys.argv) < 2:\n\t        print(f\"USAGE: {sys.argv[0]} [provider name or GUID] <event ids, comma-separated>\")\n\t        sys.exit(1)\n\t    provider = get_provider(sys.argv[1])\n\t    keywords = None\n\t    if len(sys.argv) > 2:\n\t        event_ids = list(set(map(int, sys.argv[2].split(','))))\n", "        events = provider.get_events_by_ids(event_ids)\n\t    else:\n\t        # Consume all provider's events\n\t        events = provider.events\n\t        keywords = {provider.guid: MAX_KEYWORDS}\n\t    LOGGER.info(f\"Consuming {len(events)} events from {provider.guid} - press Ctrl+C to stop\")\n\t    for i, (event_record, parsed_event) in enumerate(consume_events(events, keywords=keywords)):\n\t        print(f\"=== [Event {i}] {time.ctime(event_record.timestamp)} ===\")\n\t        print(event_record)\n\t        print(parsed_event)\n", "if __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/__init__.py", "chunked_list": []}
{"filename": "eztw/scripts/demo_file.py", "chunked_list": ["\"\"\"\n\tImplementation of an entire file-activity tracker.\n\tThis is required because most events from Microsoft-Windows-Kernel-File do not hold the original opened\n\tfilename, but rather a \"file object\" that is given when the file is first open.\n\tIn addition, various translations and file-specific parsing is added.\n\t\"\"\"\n\timport os\n\timport time\n\timport string\n\timport threading\n", "import tempfile\n\tfrom dataclasses import dataclass\n\timport win32file\n\tfrom .. import get_provider, consume_events, EztwDispatcher\n\tfrom ..log import LOGGER\n\tFILE_DIRECTORY_FILE = 0x00000001\n\tFILE_ATTRIBUTE_DIRECTORY = 0x00000010\n\tFILE_DELETE_ON_CLOSE = 0x00001000\n\tFileEndOfFileInformation = 20\n\t# Get current drive letters mapping by iterating A to Z and using QueryDosDevice\n", "DRIVE_LETTER_MAPPING = {}\n\tfor c in string.ascii_uppercase:\n\t    try:\n\t        p = win32file.QueryDosDevice(f\"{c}:\").rstrip('\\x00')\n\t        DRIVE_LETTER_MAPPING[p] = f\"{c}:\\\\\"\n\t        LOGGER.info(f\"Drive {c} is mapped to {p}\")\n\t    except:\n\t        pass\n\tif not DRIVE_LETTER_MAPPING:\n\t    LOGGER.warning(\"No local drive mappings were found!\")\n", "# Given an NT path, translate it to a DOS path\n\t# (i.e: \\Device\\HarddiskVolume1\\bla\\file.txt ==> c:\\bla\\file.txt)\n\tdef translate_path(nt_path):\n\t    s = nt_path.split('\\\\')\n\t    m = DRIVE_LETTER_MAPPING.get('\\\\'.join(s[:3]))\n\t    if not m:\n\t        # Could not translate\n\t        return nt_path\n\t    # Replace the prefix\n\t    return m + '\\\\'.join(s[3:])\n", "# Given bitmap instance and a mapping of flags, convert the int bitmap to a human readable string\n\tdef get_flags_from_bitmap(bitmap, flags):\n\t    if bitmap == 0:\n\t        return \"<EMPTY 0x0>\"\n\t    res = []\n\t    for mask, name in flags.items():\n\t        if mask & bitmap:\n\t            res.append(name)\n\t    if not res:\n\t        return f\"<UNKNOWN {hex(bitmap)}>\"\n", "    else:\n\t        return ' | '.join(res)\n\t# Taken from: https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-iocreatefileex\n\tCREATE_OPTION_FLAGS = {\n\t    0x00000001: \"FILE_DIRECTORY_FILE\",\n\t    0x00000002: \"FILE_WRITE_THROUGH\",\n\t    0x00000004: \"FILE_SEQUENTIAL_ONLY\",\n\t    0x00000008: \"FILE_NO_INTERMEDIATE_BUFFERING\",\n\t    0x00000010: \"FILE_SYNCHRONOUS_IO_ALERT\",\n\t    0x00000020: \"FILE_SYNCHRONOUS_IO_NONALERT\",\n", "    0x00000040: \"FILE_NON_DIRECTORY_FILE\",\n\t    0x00000080: \"FILE_CREATE_TREE_CONNECTION\",\n\t    0x00000100: \"FILE_COMPLETE_IF_OPLOCKED\",\n\t    0x00000200: \"FILE_NO_EA_KNOWLEDGE\",\n\t    0x00000400: \"FILE_OPEN_REMOTE_INSTANCE\",\n\t    0x00000800: \"FILE_RANDOM_ACCESS\",\n\t    0x00001000: \"FILE_DELETE_ON_CLOSE\",\n\t    0x00002000: \"FILE_OPEN_BY_FILE_ID\",\n\t    0x00004000: \"FILE_OPEN_FOR_BACKUP_INTENT\",\n\t    0x00008000: \"FILE_NO_COMPRESSION\",\n", "    0x00010000: \"FILE_OPEN_REQUIRING_OPLOCK\",\n\t    0x00020000: \"FILE_DISALLOW_EXCLUSIVE\",\n\t    0x00040000: \"FILE_SESSION_AWARE\",\n\t    0x00100000: \"FILE_RESERVE_OPFILTER\",\n\t    0x00200000: \"FILE_OPEN_REPARSE_POINT\",\n\t    0x00400000: \"FILE_OPEN_NO_RECALL\",\n\t    0x00800000: \"FILE_OPEN_FOR_FREE_SPACE_QUERY\",\n\t}\n\t# Get the string representation of file creation options\n\tdef get_create_options_flags(create_options):\n", "    return get_flags_from_bitmap(create_options, CREATE_OPTION_FLAGS)\n\t# Taken from https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants\n\tFILE_ATTRIBUTES_FLAGS = {\n\t    0x1: \"FILE_ATTRIBUTE_READONLY\",\n\t    0x2: \"FILE_ATTRIBUTE_HIDDEN\",\n\t    0x4: \"FILE_ATTRIBUTE_SYSTEM\",\n\t    0x10: \"FILE_ATTRIBUTE_DIRECTORY\",\n\t    0x20: \"FILE_ATTRIBUTE_ARCHIVE\",\n\t    0x40: \"FILE_ATTRIBUTE_DEVICE\",\n\t    0x80: \"FILE_ATTRIBUTE_NORMAL\",\n", "    0x100: \"FILE_ATTRIBUTE_TEMPORARY\",\n\t    0x200: \"FILE_ATTRIBUTE_SPARSE_FILE\",\n\t    0x400: \"FILE_ATTRIBUTE_REPARSE_POINT\",\n\t    0x800: \"FILE_ATTRIBUTE_COMPRESSED\",\n\t    0x1000: \"FILE_ATTRIBUTE_OFFLINE\",\n\t    0x2000: \"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\",\n\t    0x4000: \"FILE_ATTRIBUTE_ENCRYPTED\",\n\t    0x8000: \"FILE_ATTRIBUTE_INTEGRITY_STREAM\",\n\t    0x10000: \"FILE_ATTRIBUTE_VIRTUAL\",\n\t    0x20000: \"FILE_ATTRIBUTE_NO_SCRUB_DATA\",\n", "    0x40000: \"FILE_ATTRIBUTE_RECALL_ON_OPEN\",\n\t    0x80000: \"FILE_ATTRIBUTE_PINNED\",\n\t    0x100000: \"FILE_ATTRIBUTE_UNPINNED\",\n\t    0x400000: \"FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS\",\n\t}\n\t# Get the string representation of the file creation attributes\n\tdef get_create_attributes_flags(create_attributes):\n\t    return get_flags_from_bitmap(create_attributes, FILE_ATTRIBUTES_FLAGS)\n\tSHARE_ACCESS_FLAGS = {\n\t    0x00000001: \"FILE_SHARE_READ\",\n", "    0x00000002: \"FILE_SHARE_WRITE\",\n\t    0x00000004: \"FILE_SHARE_DELETE\",\n\t}\n\t# Get the string representation of the file creation share access flags\n\tdef get_share_access_flags(share_access):\n\t    return get_flags_from_bitmap(share_access, SHARE_ACCESS_FLAGS)\n\tFILE_OVERWRITE = 0x00000004\n\tFILE_OVERWRITE_IF = 0x00000005\n\tDISPOSITION = {\n\t    0x00000001: \"FILE_OPEN\",\n", "    0x00000002: \"FILE_CREATE\",\n\t    0x00000003: \"FILE_OPEN_IF\",\n\t    0x00000004: \"FILE_OVERWRITE\",\n\t    0x00000005: \"FILE_OVERWRITE_IF\",\n\t}\n\t# Get the string representation of the file creation disposition (this is not a bitmap...)\n\tdef get_create_disposition_flags(create_disposition):\n\t    res = DISPOSITION.get(create_disposition)\n\t    if not res:\n\t        return \"UNKNOWN\"\n", "    return res\n\t@dataclass\n\tclass OpenedFile:\n\t    \"\"\"\n\t    Represents an opened file\n\t    \"\"\"\n\t    pid: int\n\t    tid: int\n\t    filename: str\n\t    create_options: int\n", "    create_disposition: int\n\t    create_attributes: int\n\t    shared_access: int\n\tclass FileEventsConsumer:\n\t    \"\"\"\n\t    Consume the following events:\n\t        Open (create) - 12\n\t        Close - 14\n\t        Read - 15\n\t        Write - 16\n", "        SetInformation - 17\n\t        Delete - 26\n\t        Rename - 27\n\t        Created new file - 30\n\t    Each dispatcher callback function eventually calls the \"actual\" function (to be implemented by subclasses),\n\t    which receives in addition to the event record and parsed event also the relevant OpenedFile object\n\t    \"\"\"\n\t    def __init__(self):\n\t        # Maintain a map of OpenedFile instances by their file object\n\t        self.opened_files_by_file_object = {}\n", "    def run(self):\n\t        provider = get_provider(\"Microsoft-Windows-Kernel-File\")\n\t        # Instantiate a dispatcher for the callbacks\n\t        dispatcher = EztwDispatcher({\n\t            provider.Event_Create_12: self.onFileOpen,\n\t            provider.Event_Close_14: self.onFileClose,\n\t            provider.Event_Read_15: self.onFileRead,\n\t            provider.Event_Write_16: self.onFileWrite,\n\t            provider.Event_SetInformation_17: self.onFileSetInformation,\n\t            provider.Event_DeletePath_26: self.onFileDelete,\n", "            provider.Event_RenamePath_27: self.onFileRename,\n\t            provider.Event_CreateNewFile_30: self.onFileCreateNew,\n\t        })\n\t        # Consume events forever\n\t        LOGGER.info(\"Consuming file events...\")\n\t        for event_record, parsed_event in consume_events(dispatcher.events):\n\t            dispatcher(event_record, parsed_event)\n\t    def onFileOpen(self, event_record, parsed_event):\n\t        # Ignore directories\n\t        if parsed_event.CreateOptions & FILE_DIRECTORY_FILE or parsed_event.CreateAttributes & FILE_ATTRIBUTE_DIRECTORY:\n", "            return\n\t        # Too few delimiters... this is a dir or a root\n\t        n_delim = parsed_event.FileName.count(\"\\\\\")\n\t        if n_delim < 3 or (n_delim == 3 and parsed_event.FileName.endswith(\"\\\\\")):\n\t            return\n\t        # This is a file being opened\n\t        filename = translate_path(parsed_event.FileName)\n\t        opened_file = OpenedFile(\n\t            event_record.process_id,\n\t            parsed_event.IssuingThreadId if hasattr(parsed_event, \"IssuingThreadId\") else 0,\n", "            filename,\n\t            parsed_event.CreateOptions & 0xFFFFFF,\n\t            parsed_event.CreateOptions >> 24,\n\t            parsed_event.CreateAttributes,\n\t            parsed_event.ShareAccess)\n\t        # Cache the object by the FileObject\n\t        self.opened_files_by_file_object[parsed_event.FileObject] = opened_file\n\t        self.fileOpened(event_record, parsed_event, opened_file)\n\t    def fileOpened(self, event_record, parsed_event, opened_file):\n\t        pass\n", "    def onFileClose(self, event_record, parsed_event):\n\t        # If the file object is unknown, ignore this event\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        self.fileClosed(event_record, parsed_event, opened_file)\n\t        # Remove this file object from the cache now it's closed\n\t        self.opened_files_by_file_object.pop(parsed_event.FileObject)\n\t    def fileClosed(self, event_record, parsed_event, opened_file):\n\t        pass\n\t    def onFileRead(self, event_record, parsed_event):\n", "        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        self.fileRead(event_record, parsed_event, opened_file)\n\t    def fileRead(self, event_record, parsed_event, opened_file):\n\t        pass\n\t    def onFileWrite(self, event_record, parsed_event):\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        self.fileWritten(event_record, parsed_event, opened_file)\n\t    def fileWritten(self, event_record, parsed_event, opened_file):\n", "        pass\n\t    def onFileSetInformation(self, event_record, parsed_event):\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        # iff InfoClass is FileEndOfFileInformation and ExtraInformation is 0 - this is a truncation to empty\n\t        if parsed_event.InfoClass == FileEndOfFileInformation and parsed_event.ExtraInformation == 0:\n\t            self.fileTruncated(event_record, parsed_event, opened_file)\n\t        else:\n\t            self.fileSetInformation(event_record, parsed_event, opened_file)\n\t    def fileTruncated(self, event_record, parsed_event, opened_file):\n", "        pass\n\t    def fileSetInformation(self, event_record, parsed_event, opened_file):\n\t        pass\n\t    def onFileDelete(self, event_record, parsed_event):\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        self.fileDeleted(event_record, parsed_event, opened_file)\n\t        # Note that the file is not actually deleted from the file system until the handle is closed\n\t    def fileDeleted(self, event_record, parsed_event, opened_file):\n\t        pass\n", "    def onFileRename(self, event_record, parsed_event):\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n\t        # Also translate the new filename to DOS path\n\t        self.fileRenamed(event_record, parsed_event, opened_file, translate_path(parsed_event.FilePath))\n\t    def fileRenamed(self, event_record, parsed_event, opened_file, new_filename):\n\t        pass\n\t    def onFileCreateNew(self, event_record, parsed_event):\n\t        if (opened_file := self.opened_files_by_file_object.get(parsed_event.FileObject)) is None:\n\t            return\n", "        self.fileCreated(event_record, parsed_event, opened_file)\n\t    def fileCreated(self, event_record, parsed_event, opened_file):\n\t        pass\n\tclass FileTracker(FileEventsConsumer):\n\t    \"\"\"\n\t    An example of a FileEventsConsumer subclass which simply tracks files according to their (partial) name\n\t    \"\"\"\n\t    def __init__(self, tracked_filenames):\n\t        super().__init__()\n\t        self.tracked_filenames = [x.lower() for x in tracked_filenames]\n", "    def is_relevant_file(self, filename):\n\t        # Check if the given filename is one we should track\n\t        filename = filename.lower()\n\t        return any(x in filename for x in self.tracked_filenames)\n\t    def fileOpened(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(f\"File {opened_file.filename} opened by PID {opened_file.pid}\\n\"\n\t                    f\"\\tCreation options: {get_create_options_flags(opened_file.create_options)}\")\n\t    def fileClosed(self, event_record, parsed_event, opened_file):\n", "        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(f\"File {opened_file.filename} was closed by PID {event_record.process_id}\")\n\t    def fileRead(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(\n\t            f\"File {opened_file.filename} was read by PID {event_record.process_id}\"\n\t            f\" - {parsed_event.IOSize} bytes read\"\n\t        )\n", "    def fileWritten(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(\n\t            f\"File {opened_file.filename} was written by PID {event_record.process_id}\"\n\t            f\" - {parsed_event.IOSize} bytes written\"\n\t        )\n\t    def fileTruncated(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n", "        LOGGER.info(f\"File {opened_file.filename} was truncated by PID {event_record.process_id}\")\n\t    def fileSetInformation(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t    def fileDeleted(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(f\"File {opened_file.filename} was deleted by PID {event_record.process_id}\")\n\t    def fileRenamed(self, event_record, parsed_event, opened_file, new_filename):\n\t        if not self.is_relevant_file(opened_file.filename):\n", "            return\n\t        LOGGER.info(f\"File {opened_file.filename} was renamed by PID {event_record.process_id} to {new_filename}\")\n\t    def fileCreated(self, event_record, parsed_event, opened_file):\n\t        if not self.is_relevant_file(opened_file.filename):\n\t            return\n\t        LOGGER.info(f\"File {opened_file.filename} is a new file created by PID {event_record.process_id}\")\n\tdef delayed_file_activity(delay, filename):\n\t    LOGGER.info(f\"Thread started, sleeping for {delay} seconds...\")\n\t    time.sleep(delay)\n\t    actual_filename = tempfile.mktemp(filename)\n", "    LOGGER.info(f\"Thread starting manipulations on temporary file '{actual_filename}'\")\n\t    with open(actual_filename, \"wb\") as fp:\n\t        fp.write(b\"Hello world!\")\n\t    time.sleep(1)\n\t    with open(actual_filename, \"rb\") as fp:\n\t        _ = fp.read()\n\t    time.sleep(1)\n\t    new_filename = actual_filename + \".new\"\n\t    os.rename(actual_filename, new_filename)\n\t    time.sleep(1)\n", "    os.truncate(new_filename, 0)\n\t    time.sleep(1)\n\t    os.remove(new_filename)\n\tdef main():\n\t    # Create a delayed file-manipulation thread\n\t    file_delay = 3  # Seconds\n\t    filename = \"_eztw_test\"  # Base for temporary file name - this is also what we track\n\t    LOGGER.info(f\"Starting new thread. Manipulating {filename!r} in {file_delay} seconds...\")\n\t    threading.Thread(target=delayed_file_activity, args=(file_delay, filename)).start()\n\t    # Start consuming events via FileTracker\n", "    FileTracker([\"eztw_test\"]).run()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/demo_dns.py", "chunked_list": ["\"\"\"\n\tThis demo scripts starts a new trace session to consume the Microsoft-Windows-DNS-Client provider,\n\tthen in a separate thread performs DNS query to python.org.\n\tThe main thread should show these events.\n\t\"\"\"\n\timport time\n\timport threading\n\tfrom socket import gethostbyname\n\tfrom .. import get_provider, get_provider_config, parse_event, EztwController, EztwConsumer, EztwFilter\n\tfrom ..log import LOGGER\n", "def delayed_dns_query(delay, name):\n\t    LOGGER.info(f\"Thread started, sleeping for {delay} seconds...\")\n\t    time.sleep(delay)\n\t    LOGGER.info(f\"Thread performing query for {name!r}\")\n\t    gethostbyname(name)\n\tdef main():\n\t    provider = get_provider(\"microsoft-windows-dns-client\")\n\t    # provider = get_provider(\"{1c95126e-7eea-49a9-a3fe-a378b03ddb4d}\")\n\t    session_name = \"eztw_demo_dns\"\n\t    # This is the event we want according to the schema\n", "    # https://github.com/repnz/etw-providers-docs/blob/d5f68e8acda5da154ab44e405b610dd8c2ba1164/Manifests-Win10-18990/Microsoft-Windows-DNS-Client.xml\n\t    provider_config = get_provider_config(provider.Event_3008)\n\t    # Create a new session\n\t    with EztwController(session_name, provider_config):\n\t        # Schedule a separate thread for the query\n\t        dns_delay = 3  # Seconds\n\t        dns_query = \"python.org\"\n\t        LOGGER.info(f\"Starting new thread. Querying for {dns_query!r} in {dns_delay} seconds...\")\n\t        threading.Thread(target=delayed_dns_query, args=(dns_delay, dns_query)).start()\n\t        # Start consuming events\n", "        LOGGER.info(f\"Waiting for events... (runs forever, press Ctrl+C to stop)\")\n\t        # Filter only theis event\n\t        events_filter = EztwFilter(provider.Event_3008)\n\t        with EztwConsumer(session_name) as ezc:\n\t            for event_record in ezc:\n\t                # Skip any irrelevant event records\n\t                if event_record not in events_filter:\n\t                    continue\n\t                # Parsed fields of event 3008:\n\t                #   QueryName: str\n", "                #   QueryType: int\n\t                #   QueryOptions: int\n\t                #   QueryStatus: int\n\t                #   QueryResults: str\n\t                parsed_event = parse_event(event_record)\n\t                # Print only queries performed to this domain (python.org)\n\t                if dns_query in parsed_event.QueryName:\n\t                    print(f\"{time.ctime(event_record.timestamp)} PID {event_record.process_id} \"\n\t                          f\"performed DNS query:\")\n\t                    print(parsed_event)\n", "if __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/demo_process.py", "chunked_list": ["\"\"\"\n\tConsume events for process-start, process-stop and image-load from Microsoft-Windows-Kernel-Process.\n\tTrack only processes called notepad.exe.\n\t\"\"\"\n\timport time\n\timport threading\n\timport subprocess\n\tfrom .. import get_provider, consume_events, EztwDispatcher\n\tfrom ..log import LOGGER\n\tclass ProcessTracker:\n", "    \"\"\"\n\t    Helper class that defines our callback functions\n\t    \"\"\"\n\t    def __init__(self):\n\t        # Maintain a list of currently used PIDs by notepad.exe processes\n\t        self.notepad_processes = set()\n\t    def on_process_start(self, event_record, parsed_event):\n\t        if \"notepad.exe\" in parsed_event.ImageName:\n\t            print(f\"New process (PID {parsed_event.ProcessID}) started from {parsed_event.ImageName}\")\n\t            self.notepad_processes.add(parsed_event.ProcessID)\n", "    def on_process_stop(self, event_record, parsed_event):\n\t        if \"notepad.exe\" in parsed_event.ImageName and parsed_event.ProcessID in self.notepad_processes:\n\t            print(f\"Process (PID {parsed_event.ProcessID}) stopped\")\n\t            self.notepad_processes.remove(parsed_event.ProcessID)\n\t    def on_image_load(self, event_record, parsed_event):\n\t        # Only print loaded modules if this is one of our \"tracked\" notepad PIDs\n\t        if parsed_event.ProcessID in self.notepad_processes:\n\t            print(f\"Process {parsed_event.ProcessID} loaded a new module: {parsed_event.ImageName}\")\n\tdef delayed_process(delay, name):\n\t    LOGGER.info(f\"Thread started, sleeping for {delay} seconds...\")\n", "    time.sleep(delay)\n\t    LOGGER.info(f\"Thread starting new process {name!r}\")\n\t    process = subprocess.Popen(name)\n\t    time.sleep(delay)\n\t    process.kill()\n\tdef main():\n\t    provider = get_provider(\"microsoft windows kernel process\")\n\t    # provider = get_provider(\"{22FB2CD6-0E7B-422B-A0C7-2FAD1FD0E716}\")\n\t    process_tracker = ProcessTracker()\n\t    # Initialize EztwDispatcher that maps from the desired events to their callbacks\n", "    events_dispatcher = EztwDispatcher({\n\t        provider.Event_ProcessStart_1: process_tracker.on_process_start,\n\t        provider.Event_ProcessStop_2: process_tracker.on_process_stop,\n\t        provider.Event_ImageLoad_5: process_tracker.on_image_load,\n\t    })\n\t    # Create a delayed thread that starts and stops a new notepad.exe\n\t    process_delay = 3  # Seconds\n\t    process_name = \"notepad.exe\"\n\t    LOGGER.info(f\"Starting new thread. Launching {process_name!r} in {process_delay} seconds...\")\n\t    threading.Thread(target=delayed_process, args=(process_delay, process_name)).start()\n", "    LOGGER.info(f\"Waiting for events... (runs forever, press Ctrl+C to stop)\")\n\t    # Consuming and dispatching events is easy!\n\t    # Note that events_dispatcher has an 'events' member that holds all registered events\n\t    for event_record, parsed_event in consume_events(events_dispatcher.events):\n\t        events_dispatcher(event_record, parsed_event)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/dump_providers.py", "chunked_list": ["import sys\n\tfrom .. import get_providers, get_provider, EztwException\n\tdef main():\n\t    if len(sys.argv) < 2:\n\t        print(f\"USAGE: {sys.argv[0]} [output filename] <events>\")\n\t        sys.exit(1)\n\t    with_events = False\n\t    if len(sys.argv) >= 3:\n\t        if sys.argv[2] != \"events\":\n\t            print(f\"USAGE: {sys.argv[0]} [output filename] <events>\")\n", "            sys.exit(2)\n\t        with_events = True\n\t    print(f\"Collecting all providers and GUIDs...\")\n\t    all_providers = get_providers()\n\t    to_write = []\n\t    if not with_events:\n\t        for guid, name in sorted(all_providers, key=lambda x: x[1]):\n\t            to_write.append(f\"{guid} {name}\")\n\t    else:\n\t        print(\"Collecting all registered provider events and details (this may take a few minutes...)\")\n", "        for guid, name in sorted(all_providers, key=lambda x: x[1]):\n\t            try:\n\t                provider = get_provider(guid)\n\t                to_write.append(provider.string_details())\n\t            except EztwException:\n\t                to_write.extend(\n\t                    [f\"Provider GUID={guid} ({name})\", \"*\" * 40, \"\\t(Could not retrieve provider events)\"])\n\t            to_write.append(\"=\" * 40)\n\t            to_write.append(\"\")\n\t    with open(sys.argv[1], \"w\") as fp:\n", "        fp.write('\\n'.join(to_write))\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "eztw/scripts/tap_session.py", "chunked_list": ["\"\"\"\n\tThis useful script allows to \"tap\" into any pre-existing real-time trace session and start consuming\n\tand parsing its events.\n\tFor example:\n\tpython -m eztw.scripts.tap_session EventLog-System\n\t\"\"\"\n\timport sys\n\timport time\n\tfrom ..log import LOGGER\n\tfrom .. import EztwSessionIterator\n", "def main():\n\t    if len(sys.argv) < 2:\n\t        print(f\"USAGE: {sys.argv[0]} [existing real-time session name]\")\n\t        sys.exit(1)\n\t    LOGGER.info(f\"Tapping into session {sys.argv[1]!r} - press Ctrl+C to stop\")\n\t    for i, (event_record, parsed_event) in enumerate(EztwSessionIterator(sys.argv[1])):\n\t        print(f\"=== [Event {i}] {time.ctime(event_record.timestamp)} ==\")\n\t        print(event_record)\n\t        print(parsed_event)\n\tif __name__ == \"__main__\":\n", "    main()\n"]}
{"filename": "eztw/tests/test_eztw.py", "chunked_list": ["import pytest\n\timport subprocess\n\timport ctypes\n\timport struct\n\timport time\n\tfrom .. import EztwController, EztwConsumer, get_provider, get_provider_config, parse_event, add_manual_provider\n\tfrom ..guid import GUID, canonize_GUID\n\tfrom ..common import FILETIME_EPOCH_DELTA_S, FILETIME_TO_SECONDS_MULTIPLIER, SYSTEMTIME\n\tfrom ..trace_common import EVENT_FIELD_INTYPE, EventMetadata, EventFieldMetadata\n\tfrom ..log import disable_logging\n", "class TestEztw:\n\t    def test_process_provider(self):\n\t        disable_logging()\n\t        provider = get_provider(\"microsoft-windows-kernel-process\")\n\t        config = get_provider_config(provider.Event_ProcessStart_1)\n\t        session_name = \"test_eztw_session\"\n\t        found_process = False\n\t        with EztwController(session_name, config):\n\t            with EztwConsumer(session_name) as ezc:\n\t                new_process = subprocess.Popen(\"notepad\")\n", "                event_records = ezc.wait_for_events(5)\n\t                for event_record in event_records:\n\t                    if event_record.provider_guid != provider.guid or\\\n\t                            event_record.id != provider.Event_ProcessStart_1.id:\n\t                        continue\n\t                    parsed_event = parse_event(event_record)\n\t                    if parsed_event.ProcessID == new_process.pid and\\\n\t                            \"notepad\" in parsed_event.ImageName.lower():\n\t                        found_process = True\n\t                        break\n", "                new_process.kill()\n\t        assert found_process\n\t    @pytest.mark.parametrize(\"is_64bit\", [True, False])\n\t    def test_data_consumer(self, is_64bit):\n\t        provider_guid = canonize_GUID(\"{03020100-0504-0706-0809-0a0b0c0d0e0f}\")\n\t        provider_name = \"test_provider\"\n\t        field_names_types_and_values = [\n\t            (\"field_unicode_string\", EVENT_FIELD_INTYPE.INTYPE_UNICODESTRING, \"test unicode string\"),\n\t            (\"field_ansi_string\", EVENT_FIELD_INTYPE.INTYPE_ANSISTRING, b\"test ansi string\"),\n\t            (\"field_int8\", EVENT_FIELD_INTYPE.INTYPE_INT8, -1),\n", "            (\"field_uint8\", EVENT_FIELD_INTYPE.INTYPE_UINT8, 1),\n\t            (\"field_int16\", EVENT_FIELD_INTYPE.INTYPE_INT16, -1000),\n\t            (\"field_uint16\", EVENT_FIELD_INTYPE.INTYPE_UINT16, 1000),\n\t            (\"field_int32\", EVENT_FIELD_INTYPE.INTYPE_INT32, -1000000),\n\t            (\"field_uint32\", EVENT_FIELD_INTYPE.INTYPE_UINT32, 1000000),\n\t            (\"field_int64\", EVENT_FIELD_INTYPE.INTYPE_INT64, -1000000000),\n\t            (\"field_uint64\", EVENT_FIELD_INTYPE.INTYPE_UINT64, 1000000000),\n\t            (\"field_float\", EVENT_FIELD_INTYPE.INTYPE_FLOAT, -123.456),\n\t            (\"field_double\", EVENT_FIELD_INTYPE.INTYPE_DOUBLE, 123456.789),\n\t            (\"field_boolean\", EVENT_FIELD_INTYPE.INTYPE_BOOLEAN, True),\n", "            (\"field_guid\", EVENT_FIELD_INTYPE.INTYPE_GUID, provider_guid),\n\t            (\"field_pointer\", EVENT_FIELD_INTYPE.INTYPE_POINTER, 123456789),\n\t            (\"field_filetime\", EVENT_FIELD_INTYPE.INTYPE_FILETIME, 1234567890),\n\t            (\"field_systemtime\", EVENT_FIELD_INTYPE.INTYPE_SYSTEMTIME, 1234567890.0),\n\t            (\"field_countedstring\", EVENT_FIELD_INTYPE.INTYPE_COUNTEDSTRING, \"test 123\"),\n\t            (\"field_countedansistring\", EVENT_FIELD_INTYPE.INTYPE_COUNTEDANSISTRING, b\"test 123\"),\n\t            (\"field_size_t\", EVENT_FIELD_INTYPE.INTYPE_SIZET, 123456789),\n\t        ]\n\t        event_fields = [EventFieldMetadata(fname, ftype) for fname, ftype, _ in field_names_types_and_values]\n\t        # Special cases\n", "        binary_data1 = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\"\n\t        event_fields.append(EventFieldMetadata(\"field_binary1\", EVENT_FIELD_INTYPE.INTYPE_BINARY, len(binary_data1)))\n\t        binary_data2 = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\"\n\t        event_fields.append(EventFieldMetadata(\"field_binary2_size\", EVENT_FIELD_INTYPE.INTYPE_UINT16))\n\t        event_fields.append(EventFieldMetadata(\"field_binary2\", EVENT_FIELD_INTYPE.INTYPE_BINARY, \"field_binary2_size\"))\n\t        multi_data1 = [1, 2, 3]\n\t        event_fields.append(EventFieldMetadata(\"field_multi1_count\", EVENT_FIELD_INTYPE.INTYPE_UINT16))\n\t        event_fields.append(EventFieldMetadata(\"field_multi1\", EVENT_FIELD_INTYPE.INTYPE_UINT32, None, \"field_multi1_count\"))\n\t        multi_data2 = [\"qwe\", \"asd\", \"zxc\"]\n\t        event_fields.append(EventFieldMetadata(\"field_multi2_count\", EVENT_FIELD_INTYPE.INTYPE_UINT16))\n", "        event_fields.append(\n\t            EventFieldMetadata(\"field_multi2\", EVENT_FIELD_INTYPE.INTYPE_UNICODESTRING, None, \"field_multi2_count\"))\n\t        multi_data3 = [b\"qwer\", b\"asdf\", b\"zxcv\"]\n\t        event_fields.append(EventFieldMetadata(\"field_multi3_count\", EVENT_FIELD_INTYPE.INTYPE_UINT16))\n\t        event_fields.append(\n\t            EventFieldMetadata(\"field_multi3\", EVENT_FIELD_INTYPE.INTYPE_BINARY, 4, \"field_multi3_count\"))\n\t        multi_data4 = [\"qwer\", \"asdf\", \"zxcv\"]\n\t        event_fields.append(EventFieldMetadata(\"field_multi4_count\", EVENT_FIELD_INTYPE.INTYPE_UINT16))\n\t        event_fields.append(\n\t            EventFieldMetadata(\"field_multi4\", EVENT_FIELD_INTYPE.INTYPE_UNICODESTRING, 4, \"field_multi4_count\"))\n", "        provider_keywords = {}\n\t        # Define a new event template\n\t        event_id = 1234\n\t        event_version = 56\n\t        provider_events = [EventMetadata(provider_guid, event_id, event_version, \"test_event\", 0, event_fields)]\n\t        add_manual_provider(provider_guid, provider_name, provider_keywords, provider_events)\n\t        provider = get_provider(provider_guid)\n\t        event = provider.get_events_by_ids(event_id)[0]\n\t        dummy_data_parts = []\n\t        for _, ftype, fvalue in field_names_types_and_values:\n", "            if ftype is EVENT_FIELD_INTYPE.INTYPE_UNICODESTRING:\n\t                dummy_data_parts.append(bytes(ctypes.create_unicode_buffer(fvalue)))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_ANSISTRING:\n\t                dummy_data_parts.append(bytes(ctypes.create_string_buffer(fvalue)))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_INT8:\n\t                dummy_data_parts.append(struct.pack(\"b\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_UINT8:\n\t                dummy_data_parts.append(struct.pack(\"B\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_INT16:\n\t                dummy_data_parts.append(struct.pack(\"<h\", fvalue))\n", "            elif ftype is EVENT_FIELD_INTYPE.INTYPE_UINT16:\n\t                dummy_data_parts.append(struct.pack(\"<H\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_INT32:\n\t                dummy_data_parts.append(struct.pack(\"<i\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_UINT32:\n\t                dummy_data_parts.append(struct.pack(\"<I\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_INT64:\n\t                dummy_data_parts.append(struct.pack(\"<q\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_UINT64:\n\t                dummy_data_parts.append(struct.pack(\"<Q\", fvalue))\n", "            elif ftype is EVENT_FIELD_INTYPE.INTYPE_FLOAT:\n\t                dummy_data_parts.append(struct.pack(\"f\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_DOUBLE:\n\t                dummy_data_parts.append(struct.pack(\"d\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_BOOLEAN:\n\t                dummy_data_parts.append(struct.pack(\"<I\", int(fvalue)))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_BINARY:\n\t                dummy_data_parts.append(fvalue)\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_GUID:\n\t                dummy_data_parts.append(bytes(GUID(fvalue)))\n", "            elif ftype is EVENT_FIELD_INTYPE.INTYPE_POINTER:\n\t                if is_64bit:\n\t                    dummy_data_parts.append(struct.pack(\"<Q\", fvalue))\n\t                else:\n\t                    dummy_data_parts.append(struct.pack(\"<I\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_FILETIME:\n\t                if fvalue > 0:\n\t                    fvalue = int((fvalue + FILETIME_EPOCH_DELTA_S) / FILETIME_TO_SECONDS_MULTIPLIER)\n\t                dummy_data_parts.append(struct.pack(\"<Q\", fvalue))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_SYSTEMTIME:\n", "                ts = time.localtime(fvalue)\n\t                st = SYSTEMTIME()\n\t                st.wYear = ts.tm_year\n\t                st.wMonth = ts.tm_mon\n\t                st.wDayOfWeek = ts.tm_wday\n\t                st.wDay = ts.tm_mday\n\t                st.wHour = ts.tm_hour\n\t                st.wMinute = ts.tm_min\n\t                st.wSecond = ts.tm_sec\n\t                st.wMilliseconds = 0\n", "                dummy_data_parts.append(bytes(st))\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_COUNTEDSTRING:\n\t                dummy_data_parts.append(struct.pack(\"<H\", len(fvalue)*2) + bytes(ctypes.create_unicode_buffer(fvalue))[:-2])\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_COUNTEDANSISTRING:\n\t                dummy_data_parts.append(struct.pack(\"<H\", len(fvalue)) + bytes(ctypes.create_string_buffer(fvalue))[:-1])\n\t            elif ftype is EVENT_FIELD_INTYPE.INTYPE_SIZET:\n\t                if is_64bit:\n\t                    dummy_data_parts.append(struct.pack(\"<Q\", fvalue))\n\t                else:\n\t                    dummy_data_parts.append(struct.pack(\"<I\", fvalue))\n", "        # Special cases\n\t        dummy_data_parts.append(binary_data1)\n\t        dummy_data_parts.append(struct.pack(\"<H\", len(binary_data2)))\n\t        dummy_data_parts.append(binary_data2)\n\t        dummy_data_parts.append(struct.pack(\"<H\", len(multi_data1)))\n\t        for x in multi_data1:\n\t            dummy_data_parts.append(struct.pack(\"<I\", x))\n\t        dummy_data_parts.append(struct.pack(\"<H\", len(multi_data2)))\n\t        for x in multi_data2:\n\t            dummy_data_parts.append(bytes(ctypes.create_unicode_buffer(x)))\n", "        dummy_data_parts.append(struct.pack(\"<H\", len(multi_data3)))\n\t        for x in multi_data3:\n\t            dummy_data_parts.append(x)\n\t        dummy_data_parts.append(struct.pack(\"<H\", len(multi_data4)))\n\t        for x in multi_data4:\n\t            dummy_data_parts.append(bytes(ctypes.create_unicode_buffer(x))[:-2])\n\t        class DummyEventRecord:\n\t            pass\n\t        dummy_event_record = DummyEventRecord()\n\t        dummy_event_record.is_64bit = is_64bit\n", "        dummy_event_record.provider_guid = provider_guid\n\t        dummy_event_record.id = event_id\n\t        dummy_event_record.version = event_version\n\t        dummy_event_record.data = b''.join(dummy_data_parts)\n\t        parsed_event = event.parse(dummy_event_record)\n\t        for fname, ftype, fvalue in field_names_types_and_values:\n\t            parsed_value = getattr(parsed_event, fname)\n\t            # Annoying Python strings\n\t            if ftype in [EVENT_FIELD_INTYPE.INTYPE_ANSISTRING, EVENT_FIELD_INTYPE.INTYPE_COUNTEDANSISTRING]:\n\t                parsed_value = parsed_value.encode()\n", "            elif ftype in [EVENT_FIELD_INTYPE.INTYPE_FLOAT, EVENT_FIELD_INTYPE.INTYPE_DOUBLE]:\n\t                parsed_value = round(parsed_value, 3)\n\t            assert(parsed_value == fvalue)\n\t        # Special cases\n\t        assert parsed_event.field_binary1 == binary_data1\n\t        assert parsed_event.field_binary2 == binary_data2\n\t        assert parsed_event.field_multi1 == multi_data1\n\t        assert parsed_event.field_multi2 == multi_data2\n\t        assert parsed_event.field_multi3 == multi_data3\n\t        assert parsed_event.field_multi4 == multi_data4\n"]}
{"filename": "eztw/tests/__init__.py", "chunked_list": []}
