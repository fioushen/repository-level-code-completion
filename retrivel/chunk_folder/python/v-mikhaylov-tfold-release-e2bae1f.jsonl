{"filename": "tfold_msa_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\t#MSA and pdb search tools from the AlphaFold data pipeline\n\timport os\n\timport numpy as np\n\timport pickle\n\timport time\n\timport shutil\n\tfrom alphafold.data.tools import jackhmmer,hhblits,hmmsearch\n\tfrom alphafold.data import parsers\n", "from tfold_config import uniref90_database_path,mgnify_database_path,bfd_database_path,uniclust30_database_path\n\tfrom tfold_config import pdb_seqres_database_path\n\tfrom tfold_config import jackhmmer_binary_path,hhblits_binary_path,hmmsearch_binary_path,hmmbuild_binary_path\n\t#max hits, as set in the AF-M pipeline\n\tUNIREF_MAX_HITS=10000\n\tMGNIFY_MAX_HITS=  501\n\tdef process_seq(seq,tmp_dir,msa_output_dir):\n\t    '''\n\t    takes a sequence seq, tmp_dir and output_dir;\n\t    runs alignment tools on uniref90, mgnify, bfd, uniclust30 \n", "    and saves the output\n\t    '''    \n\t    #make unique tmp_id, write query fasta, make output_dir\n\t    tmp_id=seq[:10]+''.join([str(x) for x in np.random.randint(10,size=10)])    \n\t    input_fasta_path=tmp_dir+f'/{tmp_id}.fasta'    \n\t    with open(input_fasta_path,'w',encoding='utf8',newline='') as f:\n\t        f.write('>seq\\n'+seq)         \n\t    os.makedirs(msa_output_dir,exist_ok=True)\n\t    #uniref90 via jackhmmer\n\t    jackhmmer_uniref90_runner=jackhmmer.Jackhmmer(binary_path=jackhmmer_binary_path,\n", "                                                  database_path=uniref90_database_path)\n\t    print(f'running jackhmmer on {input_fasta_path} fasta')\n\t    jackhmmer_uniref90_result=jackhmmer_uniref90_runner.query(input_fasta_path)[0]\n\t    #preprocess uniref90 result: truncate, deduplicate, remove empty columns\n\t    uniref90_result_sto=jackhmmer_uniref90_result['sto']\n\t    uniref90_result_sto=parsers.truncate_stockholm_msa(uniref90_result_sto,max_sequences=UNIREF_MAX_HITS)\n\t    uniref90_result_sto=parsers.deduplicate_stockholm_msa(uniref90_result_sto)\n\t    uniref90_result_sto=parsers.remove_empty_columns_from_stockholm_msa(uniref90_result_sto)\n\t    uniref90_result_a3m=parsers.convert_stockholm_to_a3m(uniref90_result_sto)\n\t    uniref90_out_path_sto=os.path.join(msa_output_dir,'uniref90_hits.sto')        \n", "    with open(uniref90_out_path_sto,'w') as f: #for hmmsearch\n\t        f.write(uniref90_result_sto)\n\t    uniref90_out_path_a3m=os.path.join(msa_output_dir,'uniref90_hits.a3m')  \n\t    with open(uniref90_out_path_a3m,'w') as f: #for MSA input\n\t        f.write(uniref90_result_a3m)\n\t    #mgnify via jackhmmer\n\t    jackhmmer_mgnify_runner=jackhmmer.Jackhmmer(binary_path=jackhmmer_binary_path,\n\t                                                database_path=mgnify_database_path)\n\t    jackhmmer_mgnify_result=jackhmmer_mgnify_runner.query(input_fasta_path)[0]\n\t    #preprocess mgnify result: truncate, deduplicate, remove empty columns\n", "    mgnify_result_sto=jackhmmer_mgnify_result['sto']\n\t    mgnify_result_sto=parsers.truncate_stockholm_msa(mgnify_result_sto,max_sequences=MGNIFY_MAX_HITS)\n\t    mgnify_result_sto=parsers.deduplicate_stockholm_msa(mgnify_result_sto)\n\t    mgnify_result_sto=parsers.remove_empty_columns_from_stockholm_msa(mgnify_result_sto)\n\t    mgnify_result_a3m=parsers.convert_stockholm_to_a3m(mgnify_result_sto)\n\t    mgnify_out_path=os.path.join(msa_output_dir,'mgnify_hits.a3m')\n\t    with open(mgnify_out_path,'w') as f:\n\t        f.write(mgnify_result_a3m)\n\t    #bfd and uniclust30 via hhblits\n\t    hhblits_bfd_uniclust_runner=hhblits.HHBlits(binary_path=hhblits_binary_path,\n", "                                                  databases=[bfd_database_path,uniclust30_database_path])\n\t    #if using data.tools.from AF-M, use query(...)[0]\n\t    #if using data.tools from the old AF, use query(...)\n\t    hhblits_bfd_uniclust_result=hhblits_bfd_uniclust_runner.query(input_fasta_path)[0] \n\t    bfd_out_path=os.path.join(msa_output_dir,'bfd_uniclust_hits.a3m')\n\t    with open(bfd_out_path,'w') as f:\n\t        f.write(hhblits_bfd_uniclust_result['a3m'])\n\t    #remove the input fasta\n\t    os.remove(input_fasta_path)\n\tdef search_pdb(input_msa,output_dir):\n", "    #hhsearch takes a3m, hmmsearch takes sto; here use hmmsearch, hence input must be sto\n\t    with open(input_msa) as f:\n\t        msa=f.read()        \n\t    template_searcher=hmmsearch.Hmmsearch(binary_path=hmmsearch_binary_path,hmmbuild_binary_path=hmmbuild_binary_path,\n\t                                          database_path=pdb_seqres_database_path)    \n\t    pdb_result=template_searcher.query(msa)  \n\t    pdb_result=parsers.convert_stockholm_to_a3m(pdb_result)\n\t    os.makedirs(output_dir,exist_ok=True)\n\t    pdb_hits_out_path=os.path.join(output_dir, f'pdb_hits.a3m')\n\t    with open(pdb_hits_out_path, 'w') as f:\n", "        f.write(pdb_result)\n\tif __name__=='__main__':               \n\t    from argparse import ArgumentParser\n\t    import csv\n\t    t0=time.time() \n\t    parser=ArgumentParser()\n\t    parser.add_argument('input_file', type=str, help='path to input file')    \n\t    parser.add_argument('task', type=str, help='msa or pdb')            \n\t    parser.add_argument('output_dir', type=str, help='where to put results')   \n\t    parser.add_argument('--tmp_dir', default=None, type=str, help='where to store tmp fastas')   \n", "    args=parser.parse_args()  \n\t    if args.task=='msa':\n\t        if args.tmp_dir is None:\n\t            raise ValueError('tmp dir must be provided for MSA building')                \n\t        os.makedirs(args.tmp_dir,exist_ok=True)\n\t        inputs=[]\n\t        with open(args.input_file) as f:\n\t            f_csv=csv.reader(f,delimiter='\\t')\n\t            inputs=[x for x in f_csv]        \n\t        print(f'processing {len(inputs)} tasks...')\n", "        for x in inputs:\n\t            seq,name=x\n\t            process_seq(seq,args.tmp_dir,args.output_dir+'/'+name)\n\t        print('finished {} tasks in {} s'.format(len(inputs),time.time()-t0))\n\t    elif args.task=='pdb':\n\t        search_pdb(args.input_file,args.output_dir)\n\t    else:\n\t        raise ValueError(f'task {args.task} not recognized')    \n"]}
{"filename": "collect_results.py", "chunked_list": ["from argparse import ArgumentParser\n\timport pandas as pd\n\tfrom tfold.modeling import result_parse_tools\n\tif __name__=='__main__':               \n\t    parser=ArgumentParser()    \n\t    parser.add_argument('working_dir',type=str,\n\t                        help='Path to a directory where AlphaFold inputs and outputs will be stored')\n\t    args=parser.parse_args() \n\t    working_dir=args.working_dir\n\t    #collect results\n", "    result_parse_tools.parse_results(working_dir)\n\t    result_df=pd.read_pickle(working_dir+'/result_df.pckl')\n\t    #reduce to best models (lowest predicted score) for each pMHC and save\n\t    best_model_df=result_parse_tools.reduce_to_best(result_df,['pmhc_id'],'score',how='min')   \n\t    best_model_df=best_model_df.drop(['tpl_tails', 'best_score', 'best_mhc_score',\n\t                                      'pep_lddt', 'mhc_lddt', 'mhc_a','mhc_b','tails_prefiltered', \n\t                                      'af_n_reg', 'seqnn_logkd'],axis=1)\n\t    best_model_df.to_csv(working_dir+'/best_models.csv',index=False)"]}
{"filename": "model_pmhcs.py", "chunked_list": ["import os,pickle\n\tfrom argparse import ArgumentParser\n\timport pandas as pd\n\tfrom tfold.modeling import make_inputs\n\tif __name__=='__main__':               \n\t    parser=ArgumentParser()\n\t    parser.add_argument('input',type=str, \n\t                         help='Path to input csv file with columns \"pep\" and \"MHC allele\" or \"MHC sequence\", and optionally, \"pmhc_id\", \"pdb_id\", and \"exclude_pdb\". (See details.ipynb for the details.)')    \n\t    parser.add_argument('working_dir',type=str,\n\t                        help='Path to a directory where AlphaFold inputs and outputs will be stored')\n", "    parser.add_argument('--date_cutoff',type=str,default=None,help='Optionally, date cutoff for templates, YYYY-MM-DD.')\n\t    args=parser.parse_args() \n\t    df_to_model=pd.read_csv(args.input)\n\t    print(f'Need to model {len(df_to_model)} pMHCs.')\n\t    working_dir=args.working_dir\n\t    date_cutoff=args.date_cutoff                        \n\t    #make numbered MHC objects and run seqnn\n\t    df_to_model=make_inputs.preprocess_df(df_to_model)\n\t    #make AF inputs\n\t    af_inputs=make_inputs.make_inputs(df_to_model,date_cutoff=date_cutoff,print_stats=False)\n", "    print('total AF models to be produced:',len(af_inputs))\n\t    #make folders\n\t    input_dir=working_dir+'/inputs'\n\t    output_dir=working_dir+'/outputs'\n\t    os.makedirs(working_dir,exist_ok=True)\n\t    os.makedirs(input_dir,exist_ok=True) \n\t    os.makedirs(output_dir,exist_ok=True)\n\t    #save AF inputs and input dataframe\n\t    with open(input_dir+'/input.pckl','wb') as f: \n\t        pickle.dump(af_inputs,f) \n", "    df_to_model.to_pickle(working_dir+'/target_df.pckl')\n\t    #input_dir=os.path.abspath(input_dir)\n\t    #output_dir=os.path.abspath(output_dir)\n\t    #print('#############################################################')\n\t    #print('Next, run tfold_run_alphafold.py on a GPU as follows:')\n\t    #print(f'python tfold_run_alphafold.py --inputs {input_dir}/input.pckl --output_dir {output_dir}') \n\t    #print('#############################################################')"]}
{"filename": "tfold_run_alphafold.py", "chunked_list": ["#patch by: Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2023\n\t# Copyright 2021 DeepMind Technologies Limited\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\timport sys\n\tfrom tfold_patch.tfold_config import data_dir,mmcif_dir,kalign_binary_path,af_params,alphafold_dir\n\tsys.path.append(alphafold_dir) #path to AlphaFold for import\n\t\"\"\"Full AlphaFold protein structure prediction script.\"\"\"\n\timport json\n", "import os\n\timport pathlib\n\timport pickle\n\timport random\n\timport time\n\tfrom typing import Dict, Union, Optional\n\tfrom absl import app\n\tfrom absl import flags\n\tfrom absl import logging\n\tfrom alphafold.common import protein\n", "from alphafold.common import residue_constants\n\tfrom alphafold.data import templates\n\tfrom alphafold.model import config\n\tfrom alphafold.model import model\n\timport numpy as np\n\tfrom alphafold.model import data\n\t# Internal import (7716).\n\tlogging.set_verbosity(logging.INFO)\n\timport tfold_patch.tfold_pipeline as pipeline\n\timport tfold_patch.postprocessing as postprocessing\n", "flags.DEFINE_string('inputs',None,'path to a .pkl input file with a list of inputs')\n\tflags.DEFINE_string('output_dir',None,'where to put outputs')\n\tflags.DEFINE_boolean('benchmark', False, 'Run multiple JAX model evaluations '\n\t                     'to obtain a timing that excludes the compilation time, '\n\t                     'which should be more indicative of the time required for '\n\t                     'inferencing many proteins.')\n\tflags.DEFINE_integer('random_seed', None, 'The random seed for the data '\n\t                     'pipeline. By default, this is randomly generated. Note '\n\t                     'that even if this is set, Alphafold may still not be '\n\t                     'deterministic, because processes like GPU inference are '\n", "                     'nondeterministic.')\n\tFLAGS = flags.FLAGS\n\tMAX_TEMPLATE_HITS=20            #default 20; later reduced to 4 anyway (?)\n\tMAX_TEMPLATE_DATE='9999-12-31'  #set no limit here\n\tdef renumber_pdb(pdb,renumber_list):   \n\t    '''\n\t    note: AF numbers residues from 1 sequentially but with interchain shifts    \n\t    '''\n\t    lines=[]      \n\t    i_current=-1\n", "    chain_pdbnum_prev='xxxxxx'\n\t    for line in pdb.split('\\n'):\n\t        if line.startswith(('ATOM','TER')):               \n\t            chain_pdbnum=line[21:27]\n\t            if chain_pdbnum!=chain_pdbnum_prev:                \n\t                chain_pdbnum_prev=chain_pdbnum\n\t                i_current+=1\n\t            new_chain_pdbnum=renumber_list[i_current]\n\t            line=line[:21]+new_chain_pdbnum+line[27:]\n\t        lines.append(line)    \n", "    return '\\n'.join(lines)\n\tdef predict_structure(sequences,msas,template_hits,renumber_list,\n\t                      current_id,output_dir,                          \n\t                      data_pipeline,model_runners,benchmark,random_seed,true_pdb=None):  \n\t    logging.info(f'Predicting for id {current_id}')\n\t    timings = {}        \n\t    os.makedirs(output_dir,exist_ok=True)    \n\t    # Get features.\n\t    t_0=time.time()    \n\t    feature_dict=data_pipeline.process(sequences,msas,template_hits)\n", "    timings['features']=time.time()-t_0    \n\t    # Run the models.    \n\t    num_models=len(model_runners)\n\t    for model_index,(model_name,model_runner) in enumerate(model_runners.items()):\n\t        logging.info('Running model %s on %s',model_name,current_id)\n\t        t_0=time.time()\n\t        model_random_seed=model_index+random_seed*num_models\n\t        processed_feature_dict=model_runner.process_features(feature_dict,random_seed=model_random_seed)\n\t        timings[f'process_features_{model_name}']=time.time()-t_0\n\t        t_0=time.time()\n", "        prediction_result=model_runner.predict(processed_feature_dict,random_seed=model_random_seed)\n\t        t_diff=time.time()-t_0\n\t        timings[f'predict_and_compile_{model_name}']=t_diff\n\t        logging.info('Total JAX model %s on %s predict time (includes compilation time, see --benchmark): %.1fs',\n\t                     model_name,current_id,t_diff)\n\t        if benchmark:\n\t            t_0=time.time()\n\t            model_runner.predict(processed_feature_dict,random_seed=model_random_seed)\n\t            t_diff=time.time()-t_0\n\t            timings[f'predict_benchmark_{model_name}']=t_diff\n", "            logging.info('Total JAX model %s on %s predict time (excludes compilation time): %.1fs',\n\t                         model_name,current_id,t_diff)               \n\t        # Add the predicted LDDT in the b-factor column.\n\t        # Note that higher predicted LDDT value means higher model confidence.\n\t        plddt=prediction_result['plddt']\n\t        plddt_b_factors=np.repeat(plddt[:, None],residue_constants.atom_type_num,axis=-1)\n\t        unrelaxed_protein=protein.from_prediction(features=processed_feature_dict,result=prediction_result,\n\t                                                  b_factors=plddt_b_factors,remove_leading_feature_dimension=True)\n\t        unrelaxed_pdb=protein.to_pdb(unrelaxed_protein)        \n\t        unrelaxed_pdb_renumbered=renumber_pdb(unrelaxed_pdb,renumber_list)        \n", "        #renumber peptide\n\t        unrelaxed_pdb_renumbered,pep_pdbnum,pep_tails,success=postprocessing.renumber_pep(unrelaxed_pdb_renumbered)        \n\t        prediction_result['pep_renumbered']=success\n\t        prediction_result['pep_tails']=pep_tails\n\t        prediction_result['pdbnum_list']=['P'+p for p in pep_pdbnum]+renumber_list[len(sequences[0]):]                        \n\t        #compute rmsd if true structure provided\n\t        if true_pdb:\n\t            rmsds=postprocessing.compute_rmsds(unrelaxed_pdb_renumbered,true_pdb)\n\t            prediction_result={**prediction_result,**rmsds}\n\t        #save results and pdb\n", "        result_output_path=os.path.join(output_dir,f'result_{model_name}_{current_id}.pkl')\n\t        with open(result_output_path,'wb') as f:\n\t            pickle.dump(prediction_result, f, protocol=4)\n\t        unrelaxed_pdb_path=os.path.join(output_dir,f'structure_{model_name}_{current_id}.pdb')\n\t        with open(unrelaxed_pdb_path,'w') as f:\n\t            f.write(unrelaxed_pdb_renumbered)                 \n\t    logging.info('Final timings for %s: %s', current_id, timings)\n\t    #timings_output_path=os.path.join(output_dir,f'timings_{current_id}.json')\n\t    #with open(timings_output_path, 'w') as f:\n\t    #    f.write(json.dumps(timings,indent=4))\n", "def main(argv):    \n\t    t_start=time.time()    \n\t    with open(FLAGS.inputs,'rb') as f:\n\t        inputs=pickle.load(f)            #list of dicts [{param_name : value_for_input_0},..]     \n\t    if len(inputs)==0:\n\t        raise ValueError('input list of zero length provided')\n\t    output_dir=FLAGS.output_dir\n\t    logging.info(f'processing {len(inputs)} inputs...')           \n\t    #set parameters#   \n\t    params=af_params #from tfold.config\n", "    num_ensemble      =params['num_ensemble']   \n\t    model_names       =params['model_names']   \n\t    chain_break_shift =params['chain_break_shift']\n\t    ##################        \n\t    template_featurizer=templates.HhsearchHitFeaturizer(mmcif_dir=mmcif_dir,\n\t                                                        max_template_date=MAX_TEMPLATE_DATE,\n\t                                                        max_hits=MAX_TEMPLATE_HITS,\n\t                                                        kalign_binary_path=kalign_binary_path,\n\t                                                        release_dates_path=None,\n\t                                                        obsolete_pdbs_path=None)\n", "    data_pipeline=pipeline.DataPipeline(template_featurizer=template_featurizer,chain_break_shift=chain_break_shift)\n\t    model_runners={}    \n\t    for model_name in model_names:\n\t        model_config=config.model_config(model_name)\n\t        model_config.data.eval.num_ensemble=num_ensemble\n\t        model_params=data.get_model_haiku_params(model_name=model_name,data_dir=data_dir)\n\t        model_runner=model.RunModel(model_config,model_params)\n\t        model_runners[model_name]=model_runner\n\t    logging.info('Have %d models: %s',len(model_runners),list(model_runners.keys()))\n\t    random_seed=FLAGS.random_seed\n", "    if random_seed is None:\n\t        random_seed = random.randrange(sys.maxsize // len(model_names))\n\t    logging.info('Using random seed %d for the data pipeline',random_seed)  \n\t    for x in inputs:\n\t        sequences        =x['sequences']            #(seq_chain1,seq_chain2,..)\n\t        msas             =x['msas']                 #list of dicts {chain_number:path to msa in a3m format,..}\n\t        template_hits    =x['template_hits']        #list of dicts for template hits\n\t        renumber_list    =x['renumber_list']        #e.g. ['P   1 ','P   2 ',..,'M   5 ',..]\n\t        target_id        =str(x['target_id'])       #id or name of the target\n\t        current_id       =str(x['current_id'])      #id of the run (for a given target, all run ids should be distinct)\n", "        true_pdb         =x.get('true_pdb')         #pdb_id of true structure, for rmsd computation\n\t        output_dir_target=output_dir+'/'+target_id\n\t        predict_structure(sequences=sequences,msas=msas,template_hits=template_hits,renumber_list=renumber_list,\n\t                          current_id=current_id,output_dir=output_dir_target,                          \n\t                          data_pipeline=data_pipeline,model_runners=model_runners,\n\t                          benchmark=FLAGS.benchmark,random_seed=random_seed,true_pdb=true_pdb)\n\t    t_delta=time.time()-t_start\n\t    print('Processed {:3d} inputs in {:4.1f} minutes.'.format(len(inputs),t_delta/60))\n\t    print('time per input: {:5.1f}'.format(t_delta/len(inputs)))    \n\tif __name__ == '__main__':\n", "    flags.mark_flags_as_required(['inputs','output_dir'])\n\t    app.run(main)\n"]}
{"filename": "tfold_patch/tfold_config.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2023\n\t### SET THESE DIRECTORIES ################################################################################\n\t#AF folder containing '/params' (AF params), e.g. '/data/vmikhayl/alphafold-multimer/databases' \n\tdata_dir      =#\n\t#AF folder containing run_alphafold.py, e.g. '/data/vmikhayl/alphafold-multimer/alphafold' \n\talphafold_dir =#\n\t#folder with TFold data, e.g. '/data/vmikhayl/tfold-release/data'      \n\ttfold_data_dir=#   \n\t#path to kalign (used by AF to realign templates);\n", "#if you installed conda environment tfold-env, kalign should be in the /envs/tfold-env/bin/kalign in you conda folder\n\t#e.g.:'/home/vmikhayl/anaconda3/envs/tfold-env/bin/kalign'\n\tkalign_binary_path=#\n\t##########################################################################################################\n\t##########################################################################################################\n\t##########################################################################################################\n\t#folder with processed mmcif files to use as templates\n\tmmcif_dir=tfold_data_dir+'/experimental_structures/processed_updated/mmcif'\n\t#folder with pdbs for true structures, for rmsd computations\n\ttrue_pdb_dir=tfold_data_dir+'/experimental_structures/processed_updated/pdb_rotated'\n", "##the following data are not needed unless you want to build new MSAs and search PDB##\n\t##protein databases\n\t#uniref90_database_path  =data_dir+'/uniref90/uniref90.fasta' \n\t#mgnify_database_path    =data_dir+'/mgnify/mgy_clusters_2018_12.fa'\n\t#bfd_database_path       =data_dir+'/bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt'\n\t#uniclust30_database_path=data_dir+'/uniclust30/uniclust30_2018_08/uniclust30_2018_08'\n\t#pdb_seqres_database_path=data_dir+'/pdb_seqres/pdb_seqres.txt'\n\t##bins for alignment tools\n\t#search_tools_dir='/home/vmikhayl/anaconda3/envs/tfold-env/bin'   #tfold-env conda environment folder\n\t#jackhmmer_binary_path=search_tools_dir+'/jackhmmer'    \n", "#hhblits_binary_path  =search_tools_dir+'/hhblits'\n\t#hmmsearch_binary_path=search_tools_dir+'/hmmsearch'\n\t#hmmbuild_binary_path =search_tools_dir+'/hmmbuild'\n\t#AlphaFold parameters\n\taf_params={'num_ensemble':1,               #ensembling\n\t           'model_names':('model_1',),     #which AF models to use; monomer models with templates are okay, \n\t                                           #i.e. model_1, model_2, model_1_ptm, model_2_ptm (see alphafold.model.config for details)           \n\t           'chain_break_shift':200         #chain index break in multi-chain protein\n\t          }\n"]}
{"filename": "tfold_patch/postprocessing.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2022\n\t#Tools for postprocessing pdb files after AF modeling: renumber peptides, compute RMSDs\n\timport os\n\timport re\n\timport numpy as np\n\timport pickle\n\timport time\n\tfrom Bio import pairwise2\n\timport tfold_patch.tfold_pdb_tools as pdb_tools\n", "from tfold_patch.tfold_config import true_pdb_dir\n\t#reference structures for pep renumbering\n\timport importlib.resources\n\timport tfold_patch.ref_structures as ref_structures\n\t#pep renumbering\n\tcl_I_resnum_template_left=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,6)]\n\tcl_I_resnum_template_insert=['   5{:1d}'.format(x) for x in range(1,10)]\n\tcl_I_resnum_template_right=['{:4d} '.format(x) for x in range(6,10000)]\n\tcl_II_resnum_template_ext=['   0{}'.format(x) for x in 'abcdefghijklmnopqrstuvwxyz']\n\tcl_II_resnum_template=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,10000)]\n", "def _make_pep_pdbnums_I(pep_len,left_tail,right_tail):\n\t    '''\n\t    pdbnums for a class I peptide\n\t    '''\n\t    assert -1<=left_tail<=9,    'cl I pep: left tail length should be between -1 and 9;'\n\t    assert 0<=right_tail<=9999, 'cl I pep: right tail length must be between 0 and 9999;'    \n\t    core_len=pep_len-left_tail-right_tail    #core length\n\t    assert core_len>=8, 'cl I pep: core length must be at least 8;'   \n\t    assert core_len<=18, 'cl I pep: core too long;' #cannot index cores longer than 18\n\t    left_part=cl_I_resnum_template_left[9-left_tail:] #e.g. [9:] for no tail, [10:] for tail=-1 (i.e. from res 2)\n", "    l_insert=max(0,core_len-9)\n\t    l_insert_right=l_insert//2\n\t    l_insert_left=l_insert-l_insert_right\n\t    center_part=cl_I_resnum_template_insert[:l_insert_left]+cl_I_resnum_template_insert[9-l_insert_right:]\n\t    right_part=cl_I_resnum_template_right[max(0,9-core_len):] #remove res 6 if core length 8\n\t    pdbnum=left_part+center_part+right_part        \n\t    return pdbnum[:pep_len]\n\tdef _make_pep_pdbnums_II(pep_len,left_tail):  \n\t    '''\n\t    pdbnums for a class II peptide\n", "    '''    \n\t    assert pep_len-left_tail>=9, 'cl II pep: core too short;'\n\t    left_tail_ext=max(left_tail-9,0) #part with letter insertion codes\n\t    pdbnum=cl_II_resnum_template_ext[len(cl_II_resnum_template_ext)-left_tail_ext:]+cl_II_resnum_template[max(0,9-left_tail):]\n\t    return pdbnum[:pep_len]\n\tdef _get_CA_coord_w_default(res):\n\t    '''residue CA coordinates; replaces by average over all coords if no CA'''\n\t    if res is None:\n\t        return np.array([0.,0.,0.])\n\t    elif 'CA' in res:\n", "        return res['CA']\n\t    else:\n\t        return np.average(list(res.values()),axis=0)  \n\tdef _pdbnum_to_tails(pdbnum):\n\t    pdbnum=np.array(pdbnum)\n\t    return np.sum(pdbnum<'   2 ')-1,np.sum(pdbnum>'   9 ')   #res 2 and 9 always present                \n\tdef renumber_pep(pdb):\n\t    '''\n\t    superimpose a structure onto a reference structure and renumber the peptide accordingly;\n\t    (largely borrows from process_pdbs.py);\n", "    if no output_filename is given, will overwrite the input pdb;\n\t    returns a list of errors\n\t    '''\n\t    errors=[]\n\t    chainmaps={'I':[['M','M']],'II':[['M','M'],['N','N']]}    \n\t    #load structure, determine class    \n\t    structure,_=pdb_tools.parse_pdb_from_str(pdb,'query')   \n\t    chains=[x.get_id() for x in structure.get_chains()]\n\t    if 'N' in chains:\n\t        cl='II'\n", "    else:\n\t        cl='I'\n\t    #load ref structure\n\t    if cl=='I':               \n\t        ref_pdb=importlib.resources.read_text(ref_structures, '3mrePA___.pdb')\n\t    else:\n\t        ref_pdb=importlib.resources.read_text(ref_structures, '4x5wCAB__.pdb')       \n\t    ref_structure,_=pdb_tools.parse_pdb_from_str(ref_pdb,'refpdb')       \n\t    ref_structure_dict=pdb_tools.get_structure_dict(ref_structure,True)\n\t    ref_pep_resnums,ref_pep_coords=[],[]\n", "    for k,v in ref_structure_dict['P'].items():        \n\t        ref_pep_resnums.append(k)\n\t        ref_pep_coords.append(v['CA'])\n\t    ref_pep_resnums=np.array(ref_pep_resnums)\n\t    ref_pep_coords=np.array(ref_pep_coords)\n\t    #superimpose\n\t    pdb_tools.superimpose_by_chainmap(structure,ref_structure,chainmaps[cl])   \n\t    structure_dict=pdb_tools.get_structure_dict(structure,True)\n\t    p_pdbnum=list(structure_dict['P'].keys()) #add sort? no, in case very long pep with [a-z] indexed left tail\n\t    pep_len=len(p_pdbnum)\n", "    pep_coords=np.array([_get_CA_coord_w_default(structure_dict['P'][k]) for k in p_pdbnum])\n\t    #pep-pep distance matrix\n\t    d2matrix=pdb_tools.distance2_matrix(pep_coords,ref_pep_coords)            \n\t    closest_refs=[]    \n\t    for i in range(d2matrix.shape[0]):\n\t        i0=np.argmin(d2matrix[i,:])        \n\t        closest_refs.append(ref_pep_resnums[i0])\n\t    refs_symbol=','.join(closest_refs)\n\t    p12_str='   1 ,   2 '\n\t    p23_str='   2 ,   3 '\n", "    p89_str='   8 ,   9 '\n\t    if refs_symbol.count(p12_str)==1:\n\t        i123=refs_symbol.find(p12_str)//6\n\t    elif refs_symbol.count(p23_str)==1:\n\t        i123=refs_symbol.find(p23_str)//6-1\n\t    else:\n\t        errors.append(f'bad refs_symbol |{refs_symbol}|;')                                \n\t    if refs_symbol.count(p89_str)>=1:\n\t        i789=refs_symbol.find(p89_str)//6-1\n\t    else:\n", "        errors.append(f'bad refs_symbol |{refs_symbol}|;')\n\t    if errors: #anchor residues not identified\n\t        return pdb,p_pdbnum,_pdbnum_to_tails(p_pdbnum),False    \n\t    left_tail=i123\n\t    right_tail=pep_len-i789-3\n\t    core_len=pep_len-left_tail-right_tail\n\t    if (cl=='I') and (-1<=left_tail<=9) and (0<=right_tail) and (8<=core_len<=18):\n\t        new_pdbnum=_make_pep_pdbnums_I(pep_len,left_tail,right_tail)\n\t    elif (cl=='II') and (core_len==9):\n\t        new_pdbnum=_make_pep_pdbnums_II(pep_len,left_tail)\n", "    else:\n\t        return pdb,p_pdbnum,_pdbnum_to_tails(p_pdbnum),False        \n\t    renum_dict=dict(zip(p_pdbnum,new_pdbnum))\n\t    pdb_new=[]\n\t    for line in pdb.split('\\n'):\n\t        if line.startswith(('ATOM','HETATM','TER')):\n\t            chain=line[21]\n\t            pdbnum=line[22:27]\n\t            if chain=='P':                \n\t                new_line=line[:22]+renum_dict[pdbnum]+line[27:]                \n", "            else:\n\t                new_line=line            \n\t        else:\n\t            new_line=line\n\t        pdb_new.append(new_line)\n\t    return '\\n'.join(pdb_new),new_pdbnum,_pdbnum_to_tails(new_pdbnum),True\n\t#rmsds\n\tdef compute_rmsds(pdb,pdb_id):\n\t    '''\n\t    compute pep and mhc rmsds;\n", "    pep rmsds computed over all residues for cl I and over 0.9-9 for cl II;\n\t    mhc rmsds computed over all residues;\n\t    okay with missing residues at the tails, e.g. pdb has 'AAYGILGFVFTL' and pdb_id has 'AA(gap)GILGFVFTL'\n\t    '''    \n\t    chainmaps={'I':[['M','M']],'II':[['M','M'],['N','N']]}\n\t    structure,_=pdb_tools.parse_pdb_from_str(pdb,'modeled')\n\t    pepseq=''.join([pdb_tools.aa_dict.get(x.get_resname(),'X') for x in structure['P'].get_residues()])\n\t    true_pdb_path=true_pdb_dir+'/'+pdb_id+'.pdb'\n\t    structure_ref,_=pdb_tools.parse_pdb(true_pdb_path,'true')\n\t    pepseq_ref=''.join([pdb_tools.aa_dict.get(x.get_resname(),'X') for x in structure_ref['P'].get_residues()])\n", "    structure_dict=pdb_tools.get_structure_dict(structure,False)\n\t    pdbnum_current=['P'+x for x in structure_dict['P'].keys()] \n\t    structure_ref_dict=pdb_tools.get_structure_dict(structure_ref,False)\n\t    pdbnum_true=['P'+x for x in structure_ref_dict['P'].keys()]\n\t    if 'N' in structure_ref_dict:\n\t        cl='II'\n\t    else:\n\t        cl='I'    \n\t    pdb_tools.superimpose_by_chainmap(structure,structure_ref,chainmaps[cl],CA_only=True,verbose=False)\n\t    #align peptide sequences, make resmap                    \n", "    y=pairwise2.align.globalms(pepseq,pepseq_ref,match=1,mismatch=-1,open=-1,extend=-1)[0]\n\t    i1,i2=0,0\n\t    resmap=[]\n\t    for i,x in enumerate(zip(y.seqA,y.seqB)):\n\t        if x[0]!='-' and x[1]!='-':\n\t            resmap.append([pdbnum_current[i1],pdbnum_true[i2]])\n\t        if x[0]!='-':\n\t            i1+=1\n\t        if x[1]!='-':\n\t            i2+=1\n", "    if cl=='II': #restrict to ext core\n\t        resmap=[a for a in resmap if (a[1]>='P   09') and (a[1]<='P   9 ') and not re.search('[a-z]',a[1])]    \n\t    pep_rmsd=pdb_tools.rmsd_by_resmap(structure,structure_ref,resmap,allow_missing_res=True,verbose=False)\n\t    mhc_rmsd=pdb_tools.rmsd_by_chainmap(structure,structure_ref,chainmaps[cl],verbose=False) \n\t    return {'pep_CA':pep_rmsd['CA'],'pep_all':pep_rmsd['all'],'mhc_CA':mhc_rmsd['CA'],'mhc_all':mhc_rmsd['all']}\n"]}
{"filename": "tfold_patch/__init__.py", "chunked_list": []}
{"filename": "tfold_patch/tfold_pdb_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\timport os\n\timport io\n\timport pickle\n\timport re\n\timport numpy as np\n\timport Bio.PDB as PDB\n\taa_dict={'ARG':'R','HIS':'H','LYS':'K','ASP':'D','GLU':'E','SER':'S','THR':'T','ASN':'N','GLN':'Q','CYS':'C',\n\t         'GLY':'G','PRO':'P','ALA':'A','VAL':'V','ILE':'I','LEU':'L','MET':'M','PHE':'F','TYR':'Y','TRP':'W'}\n", "#### parsing ####\n\tdef parse_pdb_from_str(pdb,name):\n\t    pdb_handle=io.StringIO(pdb)\n\t    pdb_parser=PDB.PDBParser(PERMISSIVE=False,QUIET=True)\n\t    structure=pdb_parser.get_structure(name,pdb_handle)[0]\n\t    header=pdb_parser.get_header()    \n\t    return structure,header  \n\tdef parse_pdb(filename,name=None):\n\t    if name is None: #'/../../X.pdb' -> 'X'\n\t        name=filename.split('/')[-1].split('.')[0]        \n", "    pdb_parser=PDB.PDBParser(PERMISSIVE=False,QUIET=True)\n\t    structure=pdb_parser.get_structure(name,filename)[0]\n\t    header=pdb_parser.get_header()    \n\t    return structure,header   \n\tdef _int_or_repl(x,replacement=-100):\n\t    '''convert to int or return replacement (default -100)'''\n\t    try:\n\t        return int(x)\n\t    except ValueError:\n\t        return replacement \n", "def _atom_to_chain_pdbnum(a):\n\t    '''takes Bio.PDB atom, returns Cnnnni'''\n\t    chain,res_id,___=a.get_full_id()[-3:] #note: can be len 5 or len 4 (first entry is pdb_id, drops upon copying)\n\t    _,num,ins=res_id\n\t    num=_int_or_repl(num)\n\t    return '{:1s}{:4d}{:1s}'.format(chain,num,ins)\n\tdef get_structure_dict(structure,include_coords,keep_hetero=True):\n\t    '''\n\t    takes a Bio.PDB object with get_atoms method;\n\t    if include_coords: returns dict {chain:{pdbnum:{atom_name:array_xyz,..},..},..},\n", "    otherwise:         returns dict {chain:{pdbnum:[atom_name,..],..},..};    \n\t    if keep_hetero (default True), keeps hetero res/atoms, otherwise drops them; #SWITCHED TO DEFAULT TRUE!!!\n\t    (always drops waters)\n\t    '''\n\t    structure_dict={}\n\t    for a in structure.get_atoms():\n\t        chain,res_id,atom_id=a.get_full_id()[-3:]\n\t        het,num,ins=res_id\n\t        if not (het.strip()=='W'): #drop waters\n\t            atomname,_=atom_id\n", "            pdbnum='{:4d}{:1s}'.format(_int_or_repl(num),ins)\n\t            if keep_hetero or not het.strip():\n\t                if include_coords:\n\t                    structure_dict.setdefault(chain,{}).setdefault(pdbnum,{})[atomname]=a.get_coord()\n\t                else:                \n\t                    structure_dict.setdefault(chain,{}).setdefault(pdbnum,[]).append(atomname)\n\t    return structure_dict    \n\t#### maps ####\n\tdef chainmap_to_resmap(structure1,structure2,chainmap,verbose=False):\n\t    '''\n", "    takes two structures and a chainmap, e.g. [['M','N'],['M','M'], ['A','A'], ['P','P']]; \n\t    returns resmap which matches residues with identical pdbnums in each chain pair,\n\t    e.g. [['M1070 ','N1070 '],['P   5 ','P   5 ']]\n\t    '''    \n\t    structure1_dict=get_structure_dict(structure1,include_coords=False)\n\t    structure2_dict=get_structure_dict(structure2,include_coords=False)\n\t    resmap=[]\n\t    for x,y in chainmap:\n\t        res1=structure1_dict.get(x)\n\t        res2=structure2_dict.get(y)\n", "        if (res1 is not None) and (res2 is not None):\n\t            res1=set(res1.keys())\n\t            res2=set(res2.keys())\n\t            res_both=res1&res2\n\t            delta1=res1-res_both\n\t            delta2=res2-res_both\n\t            if verbose:\n\t                if delta1:\n\t                    print(f'res {delta1} present in structure 1 chain {x} but missing in structure 2 chain {y};')\n\t                if delta2:\n", "                    print(f'res {delta2} present in structure 2 chain {y} but missing in structure 1 chain {x};')\n\t            for r in res_both:\n\t                resmap.append([x+r,y+r])\n\t        elif verbose:\n\t            if res1 is None:\n\t                print(f'chain {x} missing in structure 1;')\n\t            if res2 is None:\n\t                print(f'chain {y} missing in structure 2;')    \n\t    return resmap\n\tdef resmap_to_atommap(structure1,structure2,resmap,CA_only=False,allow_missing_res=False,verbose=False):\n", "    '''\n\t    if allow_missing_res==False, will raise error when residues from resmap are missing in structure,\n\t    otherwise will skip those residue pairs\n\t    '''\n\t    structure1_dict=get_structure_dict(structure1,include_coords=False)\n\t    structure2_dict=get_structure_dict(structure2,include_coords=False)\n\t    atoms1=[]\n\t    atoms2=[]    \n\t    for x,y in resmap:\n\t        chain1=x[0]\n", "        pdbnum1=x[1:]\n\t        chain2=y[0]\n\t        pdbnum2=y[1:]\n\t        #assume resnum was properly generated. If not, raise errors\n\t        if (chain1 not in structure1_dict) or (chain2 not in structure2_dict):\n\t            raise ValueError('defective resmap: chains missing in structure;')        \n\t        res1_dict=structure1_dict[chain1]\n\t        res2_dict=structure2_dict[chain2]\n\t        if (pdbnum1 not in res1_dict) or (pdbnum2 not in res2_dict):\n\t            if allow_missing_res:\n", "                continue\n\t            else:\n\t                raise ValueError('defective resmap: pdbnums missing in structure;')\n\t        atom_names1=res1_dict[pdbnum1]\n\t        atom_names2=res2_dict[pdbnum2]        \n\t        if CA_only:\n\t            if ('CA' in atom_names1) and ('CA' in atom_names2):\n\t                atoms1.append((x,'CA'))\n\t                atoms2.append((y,'CA'))\n\t            elif verbose:\n", "                if 'CA' not in atom_names1:\n\t                    print(f'CA missing in structure 1 residue {x}')\n\t                if 'CA' not in atom_names2:\n\t                    print(f'CA missing in structure 2 residue {y}')\n\t        else:            \n\t            atoms_both=set(atom_names1)&set(atom_names2)\n\t            for a in atoms_both:\n\t                atoms1.append((x,a))\n\t                atoms2.append((y,a)) \n\t    #make atommap with atom objects\n", "    atoms=[atoms1,atoms2]    \n\t    atommap=[[None,None] for x in atoms1]\n\t    for i,structure in enumerate([structure1,structure2]):\n\t        for a in structure.get_atoms():\n\t            x=_atom_to_chain_pdbnum(a)\n\t            if (x,a.name) in atoms[i]:\n\t                ind=atoms[i].index((x,a.name))\n\t                atommap[ind][i]=a    \n\t    return atommap\n\t#### distances and contacts ####\n", "def distance2_matrix(x1,x2):\n\t    '''\n\t    takes two non-empty np arrays of coordinates.\n\t    Returns d_ij^2 matrix\n\t    '''    \n\t    delta_x=np.tile(x1[:,np.newaxis,:],[1,len(x2),1])-np.tile(x2[np.newaxis,:,:],[len(x1),1,1])\n\t    return np.sum(delta_x**2,axis=2)\n\t#### superimposing ####\n\t#a quick fix for a bug in transforming disordered atoms\n\t#(from https://github.com/biopython/biopython/issues/455)\n", "#NOTE: only keeps position A of disordered atoms and drops the rest\n\tdef get_unpacked_list_patch(self):\n\t    '''\n\t    Returns all atoms from the residue;\n\t    in case of disordered, keep only first alt loc and remove the alt-loc tag\n\t    '''\n\t    atom_list = self.get_list()\n\t    undisordered_atom_list = []\n\t    for atom in atom_list:\n\t        if atom.is_disordered():\n", "            atom.altloc=\" \"\n\t            undisordered_atom_list.append(atom)\n\t        else:\n\t            undisordered_atom_list.append(atom)\n\t    return undisordered_atom_list\n\tPDB.Residue.Residue.get_unpacked_list=get_unpacked_list_patch\n\tdef superimpose_by_resmap(structure1,structure2,resmap,CA_only=True,allow_missing_res=False,verbose=False):\n\t    '''\n\t    superimpose structure1 onto structure2 according to given resmap;\n\t    resmap should be a list of pairs ['Cnnnni','Cnnnni'] of corresponding residues;\n", "    if CA_only=True (default), only uses CA atoms;    \n\t    if allow_missing_res (default False), does not raise error when residue in resmap are missing in structure;\n\t    transforms structure1 in place; returns rmsd\n\t    '''\n\t    atommap=resmap_to_atommap(structure1,structure2,resmap,CA_only,allow_missing_res,verbose)    \n\t    if verbose:\n\t        print(f'superimposing on {len(atommap)} atoms...')     \n\t    atoms1,atoms2=zip(*atommap)\n\t    sup=PDB.Superimposer()\n\t    sup.set_atoms(atoms2,atoms1)\n", "    sup.apply(structure1)\n\t    return sup.rms            \n\tdef superimpose_by_chainmap(structure1,structure2,chainmap,CA_only=True,verbose=False):\n\t    '''\n\t    superimpose structure1 onto structure2 according to a chainmap;\n\t    chainmap is e.g. [['M','N'],['M','M'], ['A','A'], ['P','P']]; matching pdbnums in each pair of chains used;    \n\t    if CA_only=True (default), only uses CA atoms;    \n\t    transforms structure1 in place; returns rmsd    \n\t    '''    \n\t    resmap=chainmap_to_resmap(structure1,structure2,chainmap,verbose)\n", "    rmsd=superimpose_by_resmap(structure1,structure2,resmap,CA_only,verbose)\n\t    return rmsd\n\t#### rmsd ####\n\tdef rmsd_by_resmap(structure1,structure2,resmap,allow_missing_res=False,verbose=False):\n\t    '''\n\t    compute rmsds (CA and all-atom) according to resmap;\n\t    note: resmap should be list, not zip!\n\t    does not superimpose!\n\t    '''\n\t    result={}\n", "    for name in ['CA','all']:\n\t        CA_only=name=='CA'        \n\t        atommap=resmap_to_atommap(structure1,structure2,resmap,CA_only=CA_only,\n\t                                  allow_missing_res=allow_missing_res,verbose=verbose) \n\t        if verbose:\n\t            print(f'rmsd_{name} over {len(atommap)} atoms...')\n\t        d2s=[]\n\t        for a,b in atommap:\n\t            delta=a.get_coord()-b.get_coord()\n\t            d2s.append(np.dot(delta,delta))\n", "        result[name]=np.average(d2s)**0.5\n\t    return result        \n\tdef rmsd_by_chainmap(structure1,structure2,chainmap,verbose=False):\n\t    '''\n\t    compute rmsds (CA and all-atom) according to chainmap;\n\t    does not superimpose!\n\t    '''\n\t    resmap=chainmap_to_resmap(structure1,structure2,chainmap,verbose=verbose)\n\t    if verbose:\n\t        print(f'rmsd over {len(resmap)} residues...')\n", "    return rmsd_by_resmap(structure1,structure2,resmap,verbose)\n"]}
{"filename": "tfold_patch/tfold_pipeline.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\t# Copyright 2021 DeepMind Technologies Limited\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Functions for building the input features for the AlphaFold model.\"\"\"\n\timport os\n\tfrom typing import Any, Mapping, MutableMapping, Optional, Sequence, Union\n\tfrom absl import logging\n\tfrom alphafold.common import residue_constants\n", "from alphafold.data import msa_identifiers\n\tfrom alphafold.data import parsers\n\tfrom alphafold.data import templates\n\timport numpy as np\n\t#overwrite a function in templates so that can pass any filename instead of 4-letter pdbid\n\t#(also set chain to 'A' always)\n\tdef _get_pdb_id_and_chain(hit: parsers.TemplateHit):\n\t    return hit.name,'A'\n\ttemplates._get_pdb_id_and_chain=_get_pdb_id_and_chain\n\t# Internal import (7716).\n", "FeatureDict = MutableMapping[str, np.ndarray]\n\tdef make_sequence_features(sequences,chain_break_shift) -> FeatureDict:\n\t    \"\"\"Constructs a feature dict of sequence features.\"\"\"    \n\t    sequence=''.join(sequences)\n\t    num_res=len(sequence)\n\t    features={}\n\t    features['aatype']=residue_constants.sequence_to_onehot(sequence=sequence,\n\t                                                            mapping=residue_constants.restype_order_with_x,\n\t                                                            map_unknown_to_x=True)\n\t    features['between_segment_residues']=np.zeros((num_res,),dtype=np.int32)\n", "    features['domain_name']=np.array(['some_protein'.encode('utf-8')],dtype=np.object_)\n\t    resindex=np.arange(num_res)+np.concatenate([np.ones(len(seq))*i*chain_break_shift for i,seq in enumerate(sequences)])\n\t    features['residue_index']=np.array(resindex,dtype=np.int32)\n\t    features['seq_length']=np.array([num_res]*num_res, dtype=np.int32)\n\t    features['sequence']=np.array([sequence.encode('utf-8')], dtype=np.object_)\n\t    return features\n\tdef read_and_preprocess_msas(sequences,msas):\n\t    '''\n\t    input is a list of sequences and a list of dicts {chain_number:path_to_msa_for_chain};\n\t    read a3m MSA files, combine chains, add gaps for missing chains, add sequence as the first entry\n", "    '''    \n\t    sequence=''.join(sequences)\n\t    n_chains=len(sequences)    \n\t    msas_str=['\\n'.join(('>joined_target_sequence',sequence))]        \n\t    for msa in msas:        \n\t        msa_components=[]    #list of lists, each contains str sequences\n\t        for i in range(n_chains):\n\t            if i in msa:\n\t                msa_headers=[]       #list of lines, each starts with '>'; if multiple chains, headers from last entry will be kept\n\t                msa_sequences=[]\n", "                msa_filename=msa[i]\n\t                if not msa_filename.endswith('.a3m'):\n\t                    raise ValueError('MSAs must be in the a3m format')                \n\t                with open(msa_filename) as f:\n\t                    s=f.read().split('\\n')\n\t                for line in s:\n\t                    if line: #drop empty lines\n\t                        if line.startswith('>'):\n\t                            msa_headers.append(line)\n\t                        else:\n", "                            msa_sequences.append(line)\n\t                n_sequences=len(msa_sequences)\n\t                msa_components.append(msa_sequences)\n\t            else:\n\t                msa_components.append(None)\n\t        for i in range(n_chains):\n\t            if i not in msa:\n\t                msa_components[i]=['-'*len(sequences[i])]*n_sequences\n\t        #verify length is the same in MSAs for all chains and in headers\n\t        assert len(set([len(x) for x in msa_components]+[len(msa_headers)]))==1, 'components of an MSA are of unequal length;'\n", "        #join sequences for different chains, interlace with headers\n\t        msa_sequences=[''.join(x) for x in zip(*msa_components)]\n\t        msas_str.append('\\n'.join([a for x in zip(msa_headers,msa_sequences) for a in x]))                          \n\t    return [parsers.parse_a3m(msa) for msa in msas_str]\n\tdef make_msa_features(msas) -> FeatureDict:\n\t    \"\"\"Constructs a feature dict of MSA features.\"\"\"\n\t    if not msas:\n\t        raise ValueError('At least one MSA must be provided.')\n\t    int_msa=[]\n\t    deletion_matrix=[]\n", "    uniprot_accession_ids=[]\n\t    species_ids=[]\n\t    seen_sequences=set()\n\t    for msa_index,msa in enumerate(msas):\n\t        if not msa:\n\t            raise ValueError(f'MSA {msa_index} must contain at least one sequence.')\n\t        for sequence_index, sequence in enumerate(msa.sequences):\n\t            if sequence in seen_sequences:\n\t                continue\n\t            seen_sequences.add(sequence)\n", "            int_msa.append([residue_constants.HHBLITS_AA_TO_ID[res] for res in sequence])\n\t            deletion_matrix.append(msa.deletion_matrix[sequence_index])\n\t            identifiers=msa_identifiers.get_identifiers(msa.descriptions[sequence_index])\n\t            uniprot_accession_ids.append(identifiers.uniprot_accession_id.encode('utf-8'))\n\t            species_ids.append(identifiers.species_id.encode('utf-8'))\n\t    num_res=len(msas[0].sequences[0])\n\t    num_alignments=len(int_msa)\n\t    features={}\n\t    features['deletion_matrix_int']=np.array(deletion_matrix, dtype=np.int32)\n\t    features['msa']=np.array(int_msa, dtype=np.int32)\n", "    features['num_alignments']=np.array([num_alignments]*num_res, dtype=np.int32)\n\t    features['msa_uniprot_accession_identifiers'] = np.array(uniprot_accession_ids, dtype=np.object_)\n\t    features['msa_species_identifiers']=np.array(species_ids, dtype=np.object_)\n\t    return features\n\tclass DataPipeline:\n\t    \"\"\"assembles the input features.\"\"\"\n\t    def __init__(self,template_featurizer: templates.TemplateHitFeaturizer,chain_break_shift: int):    \n\t        self.template_featurizer=template_featurizer   \n\t        self.chain_break_shift  =chain_break_shift\n\t    def process(self,sequences,msas,template_hits) -> FeatureDict:  \n", "        #sequence features, incl. chain shifts\n\t        sequence_features=make_sequence_features(sequences,self.chain_break_shift)                          \n\t        #msa features, incl. adding gaps for chains\n\t        msas=read_and_preprocess_msas(sequences,msas)\n\t        msa_features=make_msa_features(msas)\n\t        #template features                \n\t        hhsearch_hits=[]        \n\t        for x in template_hits:\n\t            hhsearch_hits.append(parsers.TemplateHit(**x))          \n\t        input_sequence=''.join(sequences)\n", "        templates_result=self.template_featurizer.get_templates(query_sequence=input_sequence,hits=hhsearch_hits)\n\t        logging.info('Final (deduplicated) MSA size: %d sequences.',msa_features['num_alignments'][0])\n\t        logging.info('Total number of templates (NB: this can include bad '\n\t                     'templates and is later filtered to top 4): %d.',\n\t                     templates_result.features['template_domain_names'].shape[0])\n\t        return {**sequence_features, **msa_features, **templates_result.features}\n"]}
{"filename": "tfold_patch/ref_structures/__init__.py", "chunked_list": []}
{"filename": "tfold/config.py", "chunked_list": ["### SET THESE DIRECTORIES ################################################################################\n\t#tfold data folder\n\t#e.g. '/data/vmikhayl/tfold-release/data'\n\tdata_dir=#\n\t#a tmp folder to store data from blastp alignments\n\tseq_tools_tmp_dir=#\n\t##########################################################################################################\n\t##########################################################################################################\n\t##########################################################################################################\n\t#seq_tools\n", "seq_tools_data_dir=data_dir+'/seq_tools'                  #path to data\n\t#TFold comes with a python wrapper for netMHCpan-4.1/IIpan-3.4,4.0. \n\t#If you want to use it, set variables below. Otherwise, these variables aren't be used.\n\t#netmhc_tools\n\t# path to netMHCpan-4.1 and netMHCIIpan-4.1\n\tnetmhcpanI_dir ='/home/vmikhayl/netMHCpan-4.1'  \n\tnetmhcpanII_dir='/home/vmikhayl/netMHCIIpan-4.1'\n\tnetmhcpanII_old_dir='/home/vmikhayl/netMHCIIpan-3.2'\n\t#path to templates\n\ttemplate_source_dir=data_dir+'/experimental_structures/processed_updated'\n", "#seqnn settings\n\tseqnn_params={'max_core_len_I':12,    #peptide input length is this +2  #(core truncation, indep from reg number)\n\t              'max_pep_len_I' :15,    #to set max number of registers   #(reg number)\n\t              'max_pep_len_II':25,    #to set max number of registers\n\t              'n_mhc_I':26,           #mhc pseudoseq length\n\t              'n_mhc_II':30,          #mhc pseudoseq length\n\t              'n_tail_bits':3         #n bits to encode tails; shared between cl 1 and 2\n\t             } \n\t#seqnn params, weights and model lists\n\tseqnn_obj_dir=data_dir+'/obj/seqnn'\n", "#parameters for making AlphaFold inputs\n\taf_input_params={'I':\n\t                 {\n\t                  'templates_per_register':20,\n\t                  'pep_gap_penalty':1,\n\t                  'mhc_cutoff':20,  \n\t                  'score_cutoff':None,\n\t                  'kd_threshold':10., \n\t                  'use_mhc_msa':False,\n\t                  'use_paired_msa':True,\n", "                  'tile_registers':False,\n\t                  'shuffle':False\n\t                 },\n\t                 'II':\n\t                 {\n\t                  'templates_per_register':20,\n\t                  'pep_gap_penalty':1,\n\t                  'mhc_cutoff':25,\n\t                  'score_cutoff':None,\n\t                  'kd_threshold':100.,  \n", "                  'use_mhc_msa':False,\n\t                  'use_paired_msa':True, #added 2022-11-22 (discovery run_11)\n\t                  'tile_registers':False,\n\t                  'shuffle':False\n\t                 }\n\t                }\n"]}
{"filename": "tfold/__init__.py", "chunked_list": []}
{"filename": "tfold/structure_database/__init__.py", "chunked_list": []}
{"filename": "tfold/structure_database/process_pdbs.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\timport numpy as np\n\timport os\n\timport pickle\n\timport time\n\timport re\n\tfrom tfold.utils import seq_tools, pdb_tools\n\tseq_tools.load_mhcs()\n\tseq_tools.load_tcrs()\n", "aa_set=set(list('ACDEFGHIKLMNPQRSTVWY'))\n\t#### blossum score thresholds for blast hits ####\n\tblossum_thresholds={'MHC_1_A':250,'B2M':300,'MHC_2_A':400,'MHC_2_B':400,\n\t                    'TCR_A_V':300,'TCR_B_V':300,'TCR_G_V':300,'TCR_D_V':300,'TCR_A/D_V':300}\n\t#### peptide numbering conventions ####\n\t#class I\n\t#l(core)     numbering\n\t#l=8         1 2 3 4 5   7 8 9\n\t#l=9         1 2 3 4 5 6 7 8 9\n\t#10<=l<=18   1 2 3 4 5 5.1-5.9 6 7 8 9\n", "#insertion order: [5.1], [5.1,5.9], [5.1,5.2,5.9], ... ,[5.1,..,5.9]\n\t#tails\n\t# ...,0.7,0.8,0.9, [core], 10,11,...\n\t#left tail max len 9\n\t#class II\n\t# ...,0.7,0.8,0.9,1,..,9,10,11,... anchored to template on res 9\n\t#left tail max len 9\n\t#e.g.:\n\t#  V   S   K WRMATPLLM  Q  A  L\n\t#0.7 0.8 0.9 123456789 10 11 12\n", "#formally, the core is 1-9, but 0.8 and 0.9 seem to align well\n\t#class I - class II correspondence\n\t#   123 456789      II\n\t#VSKWRM ATPLLM QAL  II\n\t#    GLCTLVAML       I\n\t#    123456789       I\n\t#     x    xxx      (res that superimpose well)\n\tcl_I_resnum_template_left=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,6)]\n\tcl_I_resnum_template_insert=['   5{:1d}'.format(x) for x in range(1,10)]\n\tcl_I_resnum_template_right=['{:4d} '.format(x) for x in range(6,10000)]\n", "cl_II_resnum_template=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,10000)]\n\t#### fix gaps, blast and realign ####\n\tdef _repair_chain_gaps(chain_obj,seqres_seq):\n\t    '''\n\t    repair gaps in chains using SEQRES data; \n\t    takes NUMSEQ object for chain and a str for the corresponding seqres sequence;\n\t    returns updated NUMSEQ object with small-letter gaps, and error list\n\t    '''\n\t    chain=chain_obj.info['chain']           \n\t    errors=[]        \n", "    y=seq_tools.pairwise2.align.globalmd(chain_obj.seq(),seqres_seq,match=1,mismatch=-10,\n\t                                   openA=0,extendA=0,openB=-15,extendB=-15,penalize_end_gaps=(False,False))\n\t    max_score=max([y0.score for y0 in y])\n\t    y=[y0 for y0 in y if y0.score==max_score] #restrict to max score (does align output non-max scores at all?)    \n\t    y1=seq_tools.pairwise2.align.globalmd(chain_obj.seq(),seqres_seq,match=1,mismatch=-10,\n\t                                   openA=-1,extendA=0,openB=-15,extendB=-15,penalize_end_gaps=(False,False))\n\t    y+=y1 #add alignments with openA penalty, to be sure they are never missed\n\t    datas=[]\n\t    n_errors=[]\n\t    for y0 in y:               \n", "        c_n_errors=0\n\t        seqA,seqB=y0.seqA,y0.seqB    \n\t        x=re.search('^-+',seqB)\n\t        if x:\n\t            i1=x.end()\n\t        else:\n\t            i1=0        \n\t        x=re.search('-+$',seqB)\n\t        if x:\n\t            i2=x.start()\n", "        else:\n\t            i2=len(seqB)   \n\t        seqA=seqA[i1:i2]\n\t        seqB=seqB[i1:i2]\n\t        data=chain_obj.data.copy()[i1:i2]\n\t        if '-' in seqB:            \n\t            errors.append(f'_repair_chain_gaps: gap in aligned seqres for chain {chain};')            \n\t            continue\n\t        if '-' not in seqA: #no gaps, can return result\n\t            datas.append(data)\n", "            n_errors.append(0)\n\t            break\n\t        i_current=-1        \n\t        x=re.search('^-+',seqA)    \n\t        if x:\n\t            n_left=x.end()\n\t        else:\n\t            n_left=0               \n\t        n_prev=data[0]['num']-n_left-1\n\t        n_prev_nongap=n_prev\n", "        new_seq=''\n\t        new_num=[]\n\t        new_ins=[]                \n\t        for i,x in enumerate(seqA):\n\t            if x=='-':\n\t                new_seq+=seqB[i].lower()\n\t                new_num.append(n_prev+1)  \n\t                new_ins.append('')\n\t                n_prev+=1\n\t            else:\n", "                i_current+=1\n\t                n_current=data[i_current]['num']\n\t                new_seq+=data[i_current]['seq']\n\t                new_num.append(n_current)  \n\t                new_ins.append(data[i_current]['ins'])                \n\t                if ((n_prev==n_prev_nongap) or (n_prev==n_current-1) or \n\t                    (n_prev==n_current-2 and n_prev_nongap<0 and n_current>0)):\n\t                    pass\n\t                else: #gap in numbering persists  \n\t                    c_n_errors+=1                    \n", "                n_prev=data[i_current]['num'] \n\t                n_prev_nongap=n_prev \n\t        datas.append(seq_tools.NUMSEQ(seq=new_seq,num=new_num,ins=new_ins).data)\n\t        n_errors.append(c_n_errors)\n\t        if c_n_errors==0:            \n\t            break\n\t    if len(datas)==0:\n\t        errors.append(f'_repair_chain_gaps: no good alignments found for chain {chain};')\n\t        return chain_obj,errors\n\t    i=np.argmin(n_errors)\n", "    e=np.min(n_errors)\n\t    if e>0:\n\t        errors.append(f'_repair_chain_gaps: min error num {e} for chain {chain};')\n\t    data=datas[i]\n\t    chain_obj=seq_tools.NUMSEQ(data=data,info=chain_obj.info.copy())     \n\t    return chain_obj,errors       \n\tdef process_chain(chain,require_mhc_for_pep=True):\n\t    '''\n\t    takes a NUMSEQ object for chain;\n\t    returns a list of realigned objects and a list of peptide candidates;\n", "    also returns a debug dict which includes blast hits (all and filtered);\n\t    also returns a list of non-fatal errors\n\t    '''\n\t    #note: gaps made back into uppercase when passing to blast and realign;\n\t    #then gap positions made small in realigned fragments\n\t    errors=[]    \n\t    debug={}\n\t    ###blast search and filtering###\n\t    try:\n\t        hits=seq_tools.blast_prot(chain.seq().upper()) \n", "    except Exception as e:\n\t        c=chain.info['chain']\n\t        errors.append(f'blast search for chain {c} resulted in error {e};')\n\t        hits=[]    \n\t    #drop TRJ hits since hard to filter and not used anyway\n\t    hits=[h for h in hits if not (h['protein'].startswith('TCR') and h['protein'].endswith('J'))]\n\t    #keep top 5 results for each protein type                \n\t    hits=seq_tools.filter_blast_hits_to_multiple(hits,keep=5) \n\t    debug['hits_prefiltered']=hits\n\t    #impose thresholds\n", "    hits=[h for h in hits if h['score']>=blossum_thresholds[h['protein']]]                \n\t    #filter overlapping hits\n\t    hits=seq_tools.filter_blast_hits_for_chain(hits,threshold=-10)\n\t    debug['hits_filtered']=hits\n\t    #sort hits left to right\n\t    ind=np.argsort([h['query_start'] for h in hits])\n\t    hits=[hits[i] for i in ind]    \n\t    ###realign hits###\n\t    includes_mhc=False\n\t    includes_tcr=False        \n", "    aligned_objects=[]    \n\t    fragment_boundaries=[]\n\t    for i,h in enumerate(hits):        \n\t        #boundaries of hit and next hit (need for tcrs)\n\t        il=h['query_start']\n\t        ir=h['query_end']  \n\t        if i<len(hits)-1:\n\t            il_next=hits[i+1]['query_start']\n\t        else:\n\t            il_next=len(chain.data)                \n", "        #realign hit                \n\t        if h['protein'].startswith('MHC'):             \n\t            includes_mhc=True                    \n\t            query=chain.get_fragment_by_i(il,ir)\n\t            try:                \n\t                mhc,il0,ir0=seq_tools.mhc_from_seq(query.seq().upper(),return_boundaries=True)\n\t                source=query.get_fragment_by_i(il0,ir0)\n\t                if mhc.seq()!=source.seq().upper():\n\t                    raise ValueError('MHC-source seq mismatch!')\n\t                aligned_objects.append([mhc,source])  \n", "                bdry_left=il+il0\n\t                if len(query.data)-1-ir0>20: #assume constant region present, use i from blast\n\t                    bdry_right=ir\n\t                else:                        #assume no contant region present, use i from realigned\n\t                    bdry_right=il+ir0                \n\t                fragment_boundaries.append([bdry_left,bdry_right])\n\t            except Exception as e:\n\t                c=chain.info['chain']\n\t                errors.append(f'MHC realign for chain {c} resulted in error: {e}')\n\t        elif h['protein'].startswith('TCR'):\n", "            includes_tcr=True\n\t            query=chain.get_fragment_by_i(il,il_next-1) #use all space to the next hit, to accomodate for TRJ            \n\t            try:\n\t                tcr,il0,ir0=seq_tools.tcr_from_seq(query.seq().upper(),return_boundaries=True)\n\t                source=query.get_fragment_by_i(il0,ir0)\n\t                if tcr.seq()!=source.seq().upper():\n\t                    raise ValueError('TCR-source seq mismatch!')\n\t                aligned_objects.append([tcr,source]) \n\t                fragment_boundaries.append([il+il0,il+ir0])\n\t            except Exception as e:\n", "                c=chain.info['chain']\n\t                errors.append(f'TCR realign for chain {c} resulted in error: {e}')\n\t        elif h['protein'].startswith('B2M'):\n\t            includes_mhc=True #B2M is a sure sign there is MHC in the structure\n\t            fragment_boundaries.append([il,ir])\n\t        else:    #no other protein types currently\n\t            pass\n\t    ###make peptide candidates###\n\t    #note: pep can be tethered to TCR! (e.g. 4may: to the beginning of tcr chain);    \n\t    peptide_candidates=[]\n", "    #indices: from blast, except right end of mhc when there is constant region (check mismatch)\n\t    if includes_mhc or not require_mhc_for_pep:\n\t        fragment_boundaries=[[-2,-1]]+fragment_boundaries+[[len(chain.data),len(chain.data)+1]]        \n\t        for x,y in zip(fragment_boundaries[:-1],fragment_boundaries[1:]):\n\t            fragment=chain.get_fragment_by_i(x[1]+1,y[0]-1)\n\t            if len(fragment.data)>0:\n\t                linker=[False,False]\n\t                if x[1]+1>0:\n\t                    linker[0]=True\n\t                if y[0]-1<len(chain.data)-1:\n", "                    linker[1]=True\n\t                fragment.info['linker']=linker\n\t                peptide_candidates.append(fragment)\n\t    #put gaps into realigned objects\n\t    for x_new,x_old in aligned_objects:\n\t        assert len(x_new.data)==len(x_old.data), 'source and realigned fragment length mismatch;'\n\t        for i in range(len(x_new.data)):\n\t            if x_old.data[i]['seq'].islower():\n\t                x_new.data[i]['seq']=x_new.data[i]['seq'].lower()            \n\t    return aligned_objects,peptide_candidates,includes_mhc,includes_tcr,debug,errors   \n", "#### assemble complexes ####\n\tdef _ungap_pair(x):\n\t    return [x[0].ungap_small(),x[1].ungap_small()]\n\tdef _get_fragment_coords(fragment,structure_dict,pdbnum_l=None,pdbnum_r=None,CA_only=False):\n\t    '''\n\t    takes a fragment which is [obj_aligned,obj_source], a structure_dict with coords, \n\t    and a pair of boundaries pdbnum_l, pdbnum_r (default None, boundary not imposed);\n\t    pdbnums should be according to numbering in obj_aligned (i.e. canonical);    \n\t    returns an array of coordinates of atoms in the fragment;    \n\t    if set flag CA_only, only CA atom coords; otherwise (default) all atoms\n", "    '''\n\t    pdbnum_l=pdbnum_l or fragment[0].data['pdbnum'][0]\n\t    pdbnum_r=pdbnum_r or fragment[0].data['pdbnum'][-1]\n\t    ind=((pdbnum_l<=fragment[0].data['pdbnum'])&(fragment[0].data['pdbnum']<=pdbnum_r))\n\t    pdbnums=fragment[1].data['pdbnum'][ind]\n\t    chain=fragment[1].info['chain']        \n\t    coords=[]\n\t    for x in pdbnums:        \n\t        if CA_only:\n\t            if 'CA' in structure_dict[chain][x]:  #quietly skip missing CAs\n", "                coords.append(structure_dict[chain][x]['CA'])\n\t        else:\n\t            coords+=list(structure_dict[chain][x].values())\n\t    return np.array(coords)\n\tdef assemble_mhcs_II(mhcs,structure_dict,cutoff=7.):    \n\t    '''\n\t    takes a list of aligned fragments for cl II mhcs and a structure dict;\n\t    returns a list of matched pairs and a list of non-fatal errors\n\t    '''\n\t    if len(mhcs)==0:\n", "        return [],[]\n\t    errors=[]    \n\t    mhcs_a=[]\n\t    mhcs_b=[]\n\t    for x in mhcs:\n\t        chain=x[0].info['chain']\n\t        if chain=='A':\n\t            mhcs_a.append(x)\n\t        elif chain=='B':\n\t            mhcs_b.append(x)\n", "        else:\n\t            raise ValueError(f'mhc chain {chain} not recognized;')        \n\t    l_mhcs_b=len(mhcs_b)\n\t    mhcs_assembled=[]\n\t    mhcs_a_dropped=[] #keep ones for which no pair was found\n\t    for x in mhcs_a: \n\t        x_ungapped=_ungap_pair(x)\n\t        coord_x=_get_fragment_coords(x_ungapped,structure_dict,'   4 ','  11 ')\n\t        ds=[]        \n\t        for i,y in enumerate(mhcs_b):  \n", "            y_ungapped=_ungap_pair(y)\n\t            coord_y=_get_fragment_coords(y_ungapped,structure_dict,'1004 ','1011 ')            \n\t            ds.append(np.min(pdb_tools.distance2_matrix(coord_x,coord_y))**0.5)\n\t        ds=np.array(ds)        \n\t        ind=np.nonzero(ds<cutoff)[0]\n\t        if len(ind)==1:\n\t            i=ind[0]\n\t            mhcs_assembled.append([x,mhcs_b[i]])\n\t            del mhcs_b[i]\n\t        else:\n", "            mhcs_a_dropped.append(x)\n\t            if len(ind)==0:\n\t                pass #do nothing; error added later            \n\t            else:\n\t                bad_chain=x[1].info['chain']\n\t                errors.append(f'MHC II assembly: multiple matches for chain {bad_chain};')\n\t    if len(mhcs_a_dropped)>0:\n\t        errors.append(f'MHC II assembly: {len(mhcs_a_dropped)} of {len(mhcs_a)} chains A unpaired;')\n\t    if len(mhcs_b)>0: #all that remain are dropped        \n\t        errors.append(f'MHC II assembly: {len(mhcs_b)} of {l_mhcs_b} chains B unpaired;')    \n", "    return mhcs_assembled,errors\n\tdef assemble_tcrs(tcrs,structure_dict,cutoff=10.):    \n\t    '''\n\t    takes a list of aligned fragments for tcrs and a structure dict;\n\t    returns a list of pairs which are either matched [tcr1,tcr2] or single chain [tcr1,None],\n\t    and a list of non-fatal errors;\n\t    within pairs, chains ordered according to A<B<G<D\n\t    '''\n\t    if len(tcrs)==0:\n\t        return [],[]\n", "    chain_order=['A','B','G','D']\n\t    errors=[]            \n\t    tcrs_assembled=[]\n\t    used=[False]*len(tcrs) #which already paired    \n\t    for i,x in enumerate(tcrs):\n\t        if not used[i]:         \n\t            x_ungapped=_ungap_pair(x)\n\t            coord_x=_get_fragment_coords(x_ungapped,structure_dict,' 115 ',' 118 ')\n\t            if len(coord_x)==0: # e.g. 3omz has too many gaps\n\t                continue\n", "            ds=[]        \n\t            for j,y in enumerate(tcrs[i+1:]):\n\t                if not used[i+1+j]:            \n\t                    y_ungapped=_ungap_pair(y)\n\t                    coord_y=_get_fragment_coords(y_ungapped,structure_dict,'  49 ','  53 ') \n\t                    if len(coord_y)==0: # e.g. 3omz has too many gaps\n\t                        continue\n\t                    ds.append(np.min(pdb_tools.distance2_matrix(coord_x,coord_y))**0.5)\n\t                else:\n\t                    ds.append(1000.)                   \n", "            ds=np.array(ds)        \n\t            ind=np.nonzero(ds<cutoff)[0]\n\t            if len(ind)==1:\n\t                k=ind[0]\n\t                y=tcrs[i+1+k]\n\t                if chain_order.index(x[0].info['chain'])<chain_order.index(y[0].info['chain']):\n\t                    tcrs_assembled.append([x,y])\n\t                else:\n\t                    tcrs_assembled.append([y,x])\n\t                used[i]=True\n", "                used[i+1+k]=True                \n\t            else:                \n\t                if len(ind)==0:\n\t                    pass #do nothing; error added later            \n\t                else:\n\t                    bad_chain=x[1].info['chain']\n\t                    errors.append(f'TCR assembler: multiple matches for chain {bad_chain};')\n\t    tcrs_unpaired=[[x,None] for i,x in enumerate(tcrs) if not used[i]]\n\t    n_unpaired=len(tcrs_unpaired)\n\t    n_total=len(tcrs)\n", "    if n_unpaired>0:\n\t        errors.append(f'TCR assembler: {n_unpaired} of {n_total} TCR chains unpaired;')    \n\t    return tcrs_assembled+tcrs_unpaired,errors\n\tdef _make_resmap_from_aligned_obj(obj,ref_structure_dict,chain):    \n\t    pdbnum1=[obj[1].info['chain']+x for x in obj[1].data['pdbnum']]\n\t    pdbnum2=[chain+x for x in obj[0].data['pdbnum']]\n\t    if len(pdbnum1)!=len(pdbnum2):\n\t        raise ValueError('len mismatch in _make_resmap_from_aligned_obj')\n\t    resmap=list(zip(pdbnum1,pdbnum2))\n\t    #print('resmap prefiltered',resmap)\n", "    resmap=[x for x in resmap if x[1][1:] in ref_structure_dict[chain]] #filter\n\t    #print('resmap filtered',resmap)\n\t    return resmap\n\tdef _default_for_none(x,default):\n\t    if x is None:\n\t        return default\n\t    else:\n\t        return x        \n\tdef _make_pep_pdbnums_I(i123,core_len,pep_len):\n\t    assert i123<10, \"_make_pep_pdbnums_I:i123 too large;\"      \n", "    assert pep_len>=8, \"_make_pep_pdbnums_I:pep_len too small;\"\n\t    assert core_len>=8, \"_make_pep_pdbnums_I:pep core_len too small;\"\n\t    left_part=cl_I_resnum_template_left[max(0,9-i123):]\n\t    l_insert=max(0,core_len-9)\n\t    l_insert_right=l_insert//2\n\t    l_insert_left=l_insert-l_insert_right\n\t    center_part=cl_I_resnum_template_insert[:l_insert_left]+cl_I_resnum_template_insert[9-l_insert_right:]\n\t    right_part=cl_I_resnum_template_right[max(0,9-core_len):]\n\t    pdbnum=left_part+center_part+right_part        \n\t    return pdbnum[:pep_len]\n", "def _make_pep_pdbnums_II(i789,len_pep):\n\t    assert i789<16, \"_make_pep_pdbnums_II: i789 too large;\"\n\t    pdbnum=cl_II_resnum_template[max(15-i789,0):]\n\t    return pdbnum[:len_pep]\n\tdef _renumber_pep(pep,i123,i789,cl):        \n\t    errors=[]    \n\t    #check full 1-9 core for cl II\n\t    if (cl=='II') and (i789-i123!=6):\n\t        errors.append(f'unconventional core length for cl II: i123 {i123}, i789 {i789};')\n\t    #cut on the left, if necessary\n", "    if i123>9:\n\t        #errors.append(f'pep with i123={i123} too long, cutting on the left;')\n\t        pep.data=pep.data[i123-9:]\n\t        pep.info['linker'][0]|=True  \n\t        i789-=(i123-9)\n\t        i123=9            \n\t    #make aligned object    \n\t    if cl=='I':\n\t        pep_len=len(pep.data)\n\t        core_len=i789-i123+3\n", "        if pep_len<8 or core_len<8:\n\t            raise ValueError(f'cl I pep too short: pep_len {pep_len}, core_len {core_len}')        \n\t        pdbnums=_make_pep_pdbnums_I(i123,core_len,pep_len)\n\t    elif cl=='II':                \n\t        pdbnums=_make_pep_pdbnums_II(i789,len(pep.data))\n\t    else:\n\t        raise ValueError('pep renumbering: MHC class not recognized;')    \n\t    pep0=seq_tools.NUMSEQ(seq=pep.seq(),pdbnum=pdbnums,info=pep.info.copy())    \n\t    pep0.info['chain']='P'    \n\t    #cut on the right\n", "    ind=np.nonzero(pep0.data['num']>=20)[0]\n\t    if len(ind)>0:\n\t        i_r=np.amin(ind)\n\t        tail=set(list(pep0.seq()[i_r:]))\n\t        if tail&aa_set:\n\t            pep0.info['linker'][1]=True\n\t            pep.info['linker'][1]=True   #(not necessary)\n\t        pep0.data=pep0.data[:i_r]\n\t        pep.data=pep.data[:i_r]                   \n\t    return [pep0,pep],errors\n", "def _get_CA_coord_w_default(res):\n\t    if res is None:\n\t        return np.array([0.,0.,0.])\n\t    elif 'CA' in res:\n\t        return res['CA']\n\t    else:\n\t        return np.average(list(res.values()),axis=0)    \n\tdef assemble_pmhcs(mhcs,pep_candidates,structure,pep9_threshold=2.):\n\t    '''\n\t    finds pep-mhc pairs, renumbers pep\n", "    '''\n\t    p12_str='   1 ,   2 '\n\t    p23_str='   2 ,   3 '\n\t    p89_str='   8 ,   9 '\n\t    errors=[]\n\t    dump_info={}\n\t    if len(mhcs)==0:\n\t        return [],{},[]\n\t    cl=mhcs[0][0][0].info['class']\n\t    #load ref structures\n", "    if cl=='I':       \n\t        ref_filename='./data/experimental_structures/ref_structures/3mrePA___.pdb'\n\t    elif cl=='II':\n\t        ref_filename='./data/experimental_structures/ref_structures/4x5wCAB__.pdb'        \n\t    else:\n\t        raise ValueError(f'mhc class {cl} not recognized;')    \n\t    ref_structure,_=pdb_tools.parse_pdb(ref_filename)       \n\t    ref_structure_dict=pdb_tools.get_structure_dict(ref_structure,True)\n\t    ref_pep_resnums,ref_pep_coords=[],[]\n\t    for k,v in ref_structure_dict['P'].items():        \n", "        ref_pep_resnums.append(k)\n\t        ref_pep_coords.append(v['CA'])\n\t    ref_pep_resnums=np.array(ref_pep_resnums)\n\t    ref_pep_coords=np.array(ref_pep_coords)\n\t    #assemble\n\t    pmhcs=[]\n\t    mhcs_unpaired=[]\n\t    for m in mhcs:\n\t        #make mhc resmap        \n\t        if cl=='I':\n", "            resmap=_make_resmap_from_aligned_obj(_ungap_pair(m[0]),ref_structure_dict,'M')            \n\t        else:\n\t            resmap=_make_resmap_from_aligned_obj(_ungap_pair(m[0]),ref_structure_dict,'M')\n\t            resmap+=_make_resmap_from_aligned_obj(_ungap_pair(m[1]),ref_structure_dict,'N')          \n\t        for i,p in enumerate(pep_candidates):\n\t            #superimpose\n\t            pdb_tools.superimpose_by_resmap(structure,ref_structure,resmap)            \n\t            structure_dict=pdb_tools.get_structure_dict(structure,True)\n\t            #indices of gap res\n\t            gap=np.array([resletter.islower() for resletter in p.data['seq']])\n", "            #get coords; note: use av of all atoms as default for missing CA            \n\t            pep_coords=np.array([_get_CA_coord_w_default(structure_dict[p.info['chain']].get(x)) for x in p.data['pdbnum']])                        \n\t            d2matrix=pdb_tools.distance2_matrix(pep_coords,ref_pep_coords)            \n\t            d2matrix_reduced=d2matrix[~gap,:]   #matrix for actual non-gap residues            \n\t            if np.prod(d2matrix_reduced.shape)==0 or np.min(d2matrix_reduced)>pep9_threshold**2:                \n\t                continue\n\t            closest_refs=[]\n\t            ds=[]\n\t            for i in range(len(p.data['pdbnum'])):\n\t                if gap[i]:\n", "                    closest_refs.append('-----')\n\t                    ds.append(10000.)\n\t                else:\n\t                    i0=np.argmin(d2matrix[i,:])\n\t                    ds.append(d2matrix[i,i0]**0.5)\n\t                    closest_refs.append(ref_pep_resnums[i0])\n\t            dump_info.setdefault('peptide_maps',[]).append([cl,closest_refs,ds])            \n\t            refs_symbol=','.join(closest_refs)\n\t            if refs_symbol.count(p12_str)==1:\n\t                i123=refs_symbol.find(p12_str)//6\n", "            elif refs_symbol.count(p23_str)==1:\n\t                i123=refs_symbol.find(p23_str)//6-1\n\t            else:\n\t                errors.append(f'pmhc assembler: bad refs_symbol |{refs_symbol}|;')\n\t                continue                                    \n\t            if refs_symbol.count(p89_str)>=1: #okay if more than one; then take first occurence; (see e.g. 2qri)\n\t                i789=refs_symbol.find(p89_str)//6-1\n\t            else:\n\t                errors.append(f'pmhc assembler: bad refs_symbol |{refs_symbol}|;')\n\t                continue            \n", "            try:\n\t                p,c_error=_renumber_pep(p,i123,i789,cl)\n\t                errors+=c_error\n\t            except Exception as e:\n\t                errors.append(f'error {e} in pep renumbering;')\n\t                continue\n\t            pmhcs.append([p,m])                               \n\t            break\n\t        else:            \n\t            mhcs_unpaired.append(m)\n", "    if len(mhcs_unpaired)>0:\n\t        errors.append(f'pmhc assembler: cl {cl}, {len(mhcs_unpaired)} of {len(mhcs)} mhcs left unpaired;')    \n\t    return pmhcs,dump_info,errors\n\tdef assemble_complexes(pmhcs,tcrs,structure_dict,cutoff=10.):\n\t    '''\n\t    takes aligned and matched fragments for pmhcs and tcrs;\n\t    returns a list of complexes (incl. pure pmhcs and pure two-chain or single-chain tcrs) and a list of non-fatal errors\n\t    '''\n\t    n_pmhcs=len(pmhcs)\n\t    paired_tcrs=[x for x in tcrs if not(x[1] is None)]\n", "    n_paired_tcrs=len(paired_tcrs)\n\t    unpaired_tcrs=[x[0] for x in tcrs if (x[1] is None)]\n\t    n_proper_complexes_max=min(n_pmhcs,n_paired_tcrs)\n\t    complexes=[[None,None,None,x,None] for x in unpaired_tcrs]       #add unpaired tcrs\n\t    if n_pmhcs==0:\n\t        complexes+=[[None,None,None,x[0],x[1]] for x in paired_tcrs] #add paired tcrs if no pmhcs\n\t    if n_paired_tcrs==0:\n\t        complexes+=[[x[0],x[1][0],x[1][1],None,None] for x in pmhcs] #add pmhcs if no paired tcrs\n\t    if n_proper_complexes_max==0: #if no full complexes to assemble, exit here\n\t        return complexes,[],False \n", "    errors=[]               \n\t    complexes_assembled=[]\n\t    pmhcs_dropped=[] #keep ones for which no tcr was found\n\t    for x in pmhcs: \n\t        pep=_ungap_pair(x[0])\n\t        coord_x=_get_fragment_coords(pep,structure_dict,'   1 ','   9 ') #pep core        \n\t        ds=[]        \n\t        for i,y in enumerate(paired_tcrs):\n\t            yb_ungapped=_ungap_pair(y[1])\n\t            coord_y=_get_fragment_coords(yb_ungapped,structure_dict,' 105 ',' 117 ') #tcr-b cdr3            \n", "            ds.append(np.min(pdb_tools.distance2_matrix(coord_x,coord_y))**0.5)\n\t        ds=np.array(ds)           \n\t        ind=np.nonzero(ds<cutoff)[0]\n\t        if len(ind)==1:\n\t            i=ind[0]\n\t            complexes_assembled.append([x[0],x[1][0],x[1][1],*paired_tcrs[i]])\n\t            del paired_tcrs[i]\n\t        else:\n\t            pmhcs_dropped.append(x)\n\t            if len(ind)==0:\n", "                pass #do nothing; error added later            \n\t            else:                \n\t                errors.append(f'full complex assembly: multiple tcrs for same pmhc;')\n\t    #add whatever remains unpaired\n\t    for x in pmhcs_dropped:        \n\t        complexes.append([x[0],x[1][0],x[1][1],None,None])\n\t    for x in paired_tcrs:\n\t        complexes.append([None,None,None,x[0],x[1]])\n\t    n_assembled=len(complexes_assembled)\n\t    if n_assembled<n_proper_complexes_max:\n", "        errors.append(f'full complex assembly: assembled {n_assembled} complexes '\\\n\t                      f'from {n_pmhcs} pmhcs and {n_paired_tcrs} paired tcrs;')\n\t    if n_assembled==0 and n_proper_complexes_max>0:\n\t        try_again=True\n\t    else:\n\t        try_again=False\n\t    return complexes+complexes_assembled,errors,try_again\n\t### get and apply transformations ###\n\tdef _get_transformations(pdb_lines):   \n\t    '''\n", "    reads REMARK 350, gives a list of transformation dicts {chain:matrix} for each biomolecule;\n\t    only the first BIOMT used; (multiple BIOMT means software suggests to repeat the same chain);\n\t    each matrix is np.array([[r11,r12,r13,v1],...]), i.e. combines rotation r and shift v\n\t    '''\n\t    matrices=[]    \n\t    s_iter=iter(pdb_lines)\n\t    for line in s_iter:\n\t        if line.startswith('ATOM'): #past the REMARKS section\n\t            break\n\t        if line.startswith('REMARK 350 BIOMOLECULE:'):\n", "            matrices.append({})\n\t        if line.startswith('REMARK 350 APPLY THE FOLLOWING TO CHAINS:'):\n\t            matrix=[]\n\t            chains=line.split(':')[1].replace(' ','').split(',')\n\t            for j in range(3):  #only the first BIOMT used (\n\t                line=next(s_iter)\n\t                if line.startswith('REMARK 350                    AND CHAINS:'):\n\t                    chains+=line.split(':')[1].replace(' ','').split(',')\n\t                    line=next(s_iter)\n\t                assert line.startswith(f'REMARK 350   BIOMT{j+1}'), 'BIOMT not found'\n", "                matrix.append([float(a) for a in line.split()[4:]])\n\t            matrix=np.array(matrix)\n\t            for c in chains:\n\t                matrices[-1][c]=matrix        \n\t    return matrices\n\tdef _transform(structure,transformation):\n\t    '''\n\t    applies transformation in place\n\t    '''\n\t    for chain in structure.get_chains():\n", "        matrix=transformation.get(chain.id)\n\t        if not (matrix is None):            \n\t            chain.transform(matrix[:,:-1].T,matrix[:,-1]) #need rot.x+transl, while Bio.PDB transform does x.rot+transl\n\t### add hetero 3-letter data to protein ###\n\tdef _add_hetero(fragment,sequences,seqres_hetero):\n\t    ind=np.nonzero(np.isin(fragment[0].data['seq'],('x','X')))[0]\n\t    if len(ind)==0: #no hetero\n\t        fragment[0].info['hetero_res']={}\n\t        return fragment   \n\t    chain=fragment[1].info['chain']\n", "    hetero_res={}\n\t    for i in ind:\n\t        pdbnum=fragment[1].data[i]['pdbnum']\n\t        pdbnum_new=fragment[0].data[i]['pdbnum']\n\t        seq_het=sequences['hetero'].get(chain)\n\t        seq_unk=sequences['modified'].get(chain)        \n\t        if not (seq_het is None):\n\t            ind1=np.nonzero(seq_het.data['pdbnum']==pdbnum)[0]\n\t            if len(ind1)==1:                \n\t                hetero_res[pdbnum_new]=seq_het.data[ind1[0]]['seq']\n", "                continue\n\t        if not (seq_unk is None):\n\t            ind1=np.nonzero(seq_unk.data['pdbnum']==pdbnum)[0]\n\t            if len(ind1)==1:                \n\t                hetero_res[pdbnum_new]=seq_unk.data[ind1[0]]['seq']\n\t                continue\n\t        #for gaps, HETATM not present in sequences but present in seqres; aligning seqres to pdbnum is tedious,\n\t        #so just process cases when there is only one HETATM in seqres, and leave errors otherwise\n\t        if len(seqres_hetero[chain])==1:\n\t            hetero_res[pdbnum_new]=seqres_hetero[chain][0]\n", "            continue\n\t        raise ValueError(f'het for chain {chain} pdbnum {pdbnum} not found;')\n\t    fragment[0].info['hetero_res']=hetero_res\n\t    return fragment\n\t#### process structure ####\n\tdef process_structure(input_filename,output_dir):\n\t    '''\n\t    takes path to pdb file and path to output dir;\n\t    processes pdb file and saves new pdb files and other information\n\t    '''        \n", "    #make output directory tree\n\t    for x in ['/pdb','/proteins','/pdb_info','/debug']:\n\t        os.makedirs(output_dir+x,exist_ok=True)    \n\t    def dump(content,name): #for saving into '/info'\n\t        with open(output_dir+f'/debug/{pdb_id}/{name}.pckl','wb') as f:\n\t            pickle.dump(content,f) \n\t    errors=[]     #non-fatal errors    \n\t    pdb_id=input_filename.split('/')[-1].split('.')[0]\n\t    print(f'processing structure {pdb_id}...')\n\t    os.makedirs(output_dir+f'/debug/{pdb_id}',exist_ok=True)    \n", "    ###parse pdb       \n\t    #read pdb as text\n\t    with open(input_filename) as f:\n\t        pdb_lines=f.read().split('\\n') \n\t    #parse SEQRES lines to use in gap identification\n\t    seqres={}\n\t    seqres_hetero={} #keep 3-letter heteros here\n\t    for line in pdb_lines:\n\t        if line.startswith('SEQRES'):        \n\t            chain=line[11]\n", "            seqres.setdefault(chain,'')\n\t            seq=line[19:].split()\n\t            for x in seq:\n\t                if x not in pdb_tools.aa_dict:\n\t                    seqres_hetero.setdefault(chain,[]).append(x)\n\t            seq=''.join([pdb_tools.aa_dict.get(x) or 'X' for x in seq])                        \n\t            seqres[chain]+=seq\n\t    #read pdb into Bio.PDB objects\n\t    structure,header=pdb_tools.parse_pdb(input_filename,pdb_id)\n\t    pdb_info={}\n", "    pdb_info['deposition_date']=header.get('deposition_date') #yyyy-mm-dd (Bio.PDB parses into this format)\n\t    pdb_info['resolution']=header.get('resolution')\n\t    pdb_info['includes_mhc']=False #change to 'includes_antigen', set True if any nonTCR protein present (e.g. bacterial toxin)\n\t    pdb_info['includes_tcr']=False\n\t    sequences=pdb_tools.get_chain_sequences(structure)\n\t    mod_het={}    \n\t    mod_het['modified']=set(x for v in sequences['modified'].values() for x in v.data['seq']) or None\n\t    mod_het['het']=set(x for v in sequences['hetero'].values() for x in v.data['seq']) or None    \n\t    dump(mod_het,'mod_het')\n\t    ###fix gaps using SEQRES###\n", "    seqres_errors=[] #keep separately, filter in the end\n\t    for k,v in sequences['canonical'].items():        \n\t        seqres_seq=seqres.get(k)\n\t        if not (seqres_seq is None): #otherwise assume no gaps; probably just hetero atoms\n\t            v,c_error=_repair_chain_gaps(v,seqres_seq)\n\t            sequences['canonical'][k]=v\n\t            seqres_errors+=c_error            \n\t    ###blast and realign chains   \n\t    aligned_fragments=[]\n\t    pep_candidates_main=[]\n", "    pep_candidates_other=[]\n\t    chains_dump={}\n\t    for c,v in sequences['canonical'].items():            \n\t        if len(v.data)<20:   #probably peptide\n\t            v.info['linker']=[False,False]\n\t            pep_candidates_main.append(v)\n\t        elif len(v.data)<50: #maybe peptide, surely too short to blast/realign\n\t            v.info['linker']=[False,False]\n\t            pep_candidates_other.append(v)\n\t        else:\n", "            chain_aligned_fragments,chain_pep_candidates,includes_mhc,includes_tcr,chain_debug,chain_errors=process_chain(v)\n\t            aligned_fragments+=chain_aligned_fragments\n\t            pep_candidates_other+=chain_pep_candidates  \n\t            pdb_info['includes_mhc']|=includes_mhc\n\t            pdb_info['includes_tcr']|=includes_tcr\n\t            for k in chain_debug:                \n\t                chains_dump.setdefault(k,[])\n\t                chains_dump[k]+=chain_debug[k]\n\t            errors+=chain_errors \n\t    for k,v in chains_dump.items():\n", "        dump(v,k)        \n\t    if pep_candidates_main:\n\t        pep_candidates=pep_candidates_main\n\t    else:\n\t        pep_candidates=pep_candidates_other    \n\t    for p in pep_candidates: #mark pep candidates that have hetero atoms in their chains\n\t        if p.info['chain'] in sequences['hetero']:\n\t            p.info['hetero']=True\n\t        else:\n\t            p.info['hetero']=False\n", "    dump(aligned_fragments,'aligned_fragments')\n\t    dump(pep_candidates,'pep_candidates')\n\t    #stop if nothing realigned\n\t    if len(aligned_fragments)==0:\n\t        errors.append('no fragments realigned;')\n\t        with open(output_dir+f'/debug/{pdb_id}/errors.txt','w') as f:\n\t            f.write('\\n'.join(errors))\n\t        return None        \n\t    ###assemble parts\n\t    structure_dict=pdb_tools.get_structure_dict(structure,include_coords=True) #more convenient structure representation    \n", "    #sort fragments (MHC I, MHC II, TCR; assume no other kind appears)\n\t    mhcs_I=[]\n\t    mhcs_II=[]\n\t    tcrs=[]\n\t    for x in aligned_fragments:\n\t        cl=x[0].info.get('class')\n\t        if cl=='I':\n\t            mhcs_I.append(x)\n\t        elif cl=='II':\n\t            mhcs_II.append(x)\n", "        else:\n\t            tcrs.append(x)\n\t    #assemble mhcs\n\t    mhcs_II,c_errors=assemble_mhcs_II(mhcs_II,structure_dict)\n\t    errors+=c_errors\n\t    #for simplicity, make sure only one MHC class appears  \n\t    assert len(mhcs_I)*len(mhcs_II)==0, \"process_structure: cl I and II present;\"          \n\t    mhcs=[[x,None] for x in mhcs_I]+mhcs_II    \n\t    #assemble pmhcs    \n\t    pmhcs,dump_info,c_errors=assemble_pmhcs(mhcs,pep_candidates,structure)\n", "    for k,v in dump_info.items():\n\t        dump(v,k)\n\t    errors+=c_errors    \n\t    #assemble tcrs\n\t    tcrs,c_errors=assemble_tcrs(tcrs,structure_dict)\n\t    errors+=c_errors    \n\t    #assemble complexes\n\t    complexes,c_errors,try_again=assemble_complexes(pmhcs,tcrs,structure_dict)\n\t    apply_transform=False\n\t    if try_again: #apply transformations and see if any full complexes assembled\n", "        transformations=_get_transformations(pdb_lines)\n\t        for transformation in transformations:            \n\t            #keep the original structure untransformed, because transformations are relative to it\n\t            #doing transformation in place, because Bio.PDB.Entity.copy produces weird results:\n\t            #seems to sometimes apply a transformation? (Weird result when run as package, works normally\n\t            #when function run from notebook!) Maybe disordered atoms are the problem?\n\t            new_structure,_=pdb_tools.parse_pdb(input_filename,pdb_id) \n\t            _transform(new_structure,transformation) \n\t            new_structure_dict=pdb_tools.get_structure_dict(new_structure,include_coords=True)             \n\t            complexes,c_errors,try_again=assemble_complexes(pmhcs,tcrs,new_structure_dict)\n", "            if not try_again:                \n\t                apply_transform=True\n\t                break    \n\t    errors+=c_errors            \n\t    #check complex chains are in seqres\n\t    for c in complexes:\n\t        for cc in c:\n\t            if not (cc is None):\n\t                chain=cc[1].info['chain']\n\t                if chain not in seqres:\n", "                    errors.append(f'chain {chain} appears in complexes but not in seqres;')\n\t    #filter seqres errors: drop 'min error' errors for chains other than pep chain\n\t    pep_chains=[c[0][1].info['chain'] for c in complexes if c[0] is not None]    \n\t    for e in seqres_errors:\n\t        if (not e.startswith('_repair_chain_gaps: min error num')) or (e[-2] in pep_chains):\n\t            errors.append(e)            \n\t    #make renum dict and proteins, and add hetero 3-letter names on the way\n\t    proteins={}    \n\t    renum_dict={} #{Cnnnni(old):(structure_num,Cnnnni(new))}, assuming each res goes into <=1 structure    \n\t    new_chains=['P','M','N','A','B']\n", "    for i,x in enumerate(complexes):        \n\t        proteins[i]={}\n\t        for j,y in enumerate(x):\n\t            if not (y is None):    \n\t                try:\n\t                    y=_add_hetero(y,sequences,seqres_hetero)\n\t                except Exception as e:\n\t                    errors.append(f'adding hetero res: error {e};')\n\t                chain_old=y[1].info['chain']\n\t                chain_new=new_chains[j]\n", "                proteins[i][chain_new]=y[0].dump() #renumbered chain\n\t                pdbnum_old=y[1].data['pdbnum']                \n\t                pdbnum_new=y[0].data['pdbnum'] #no need to ungap!\n\t                assert len(pdbnum_old)==len(pdbnum_new),'pdbnum len mismatch'\n\t                for a,b in zip(pdbnum_old,pdbnum_new):\n\t                    renum_dict[chain_old+a]=(i,chain_new+b)\n\t    #make new pdbs; transform if necessary\n\t    new_pdbs={}\n\t    model_count=0\n\t    for line in pdb_lines:\n", "        if line.startswith('MODEL'): #only keep the first model (applies to 1bwm)            \n\t            if model_count>0:\n\t                break\n\t            model_count+=1\n\t        if line.startswith(('ATOM','HETATM','TER')): #add 'ANISOU'? but never need them\n\t            chain_pdbnum=line[21:27]\n\t            if chain_pdbnum in renum_dict:\n\t                complex_i,new_chain_pdbnum=renum_dict[chain_pdbnum]\n\t                new_line=line[:21]+new_chain_pdbnum+line[27:]\n\t                if apply_transform and not line.startswith('TER'):                   \n", "                    matrix=transformation.get(chain_pdbnum[0])\n\t                    if not (matrix is None):\n\t                        x=float(line[30:38])\n\t                        y=float(line[38:46])\n\t                        z=float(line[46:54])\n\t                        xyz=np.array([x,y,z])\n\t                        xyz_new=np.dot(matrix[:,:-1],xyz)+matrix[:,-1]\n\t                        xyz_new='{:8.3f}{:8.3f}{:8.3f}'.format(*xyz_new)\n\t                        new_line=new_line[:30]+xyz_new+new_line[54:]\n\t                new_pdbs.setdefault(complex_i,[]).append(new_line)\n", "    #save\n\t    for i,v in new_pdbs.items():\n\t        with open(output_dir+f'/pdb/{pdb_id}_{str(i)}.pdb','w') as f:\n\t            f.write('\\n'.join(v))\n\t    for i,v in proteins.items():\n\t        with open(output_dir+f'/proteins/{pdb_id}_{str(i)}.pckl','wb') as f:\n\t            pickle.dump(v,f)   \n\t    with open(output_dir+f'/pdb_info/{pdb_id}.pckl','wb') as f:\n\t            pickle.dump(pdb_info,f)   \n\t    with open(output_dir+f'/debug/{pdb_id}/errors.txt','w') as f:\n", "        f.write('\\n'.join(errors))\n\t#### main ####\n\tif __name__=='__main__':               \n\t    from argparse import ArgumentParser\n\t    import csv\n\t    t0=time.time() \n\t    parser=ArgumentParser()\n\t    parser.add_argument('input_filename', type=str, help='path to input file')    \n\t    args=parser.parse_args()  \n\t    inputs=[]\n", "    with open(args.input_filename) as f:\n\t        f_csv=csv.reader(f,delimiter='\\t')\n\t        inputs=[x for x in f_csv]        \n\t    print(f'processing {len(inputs)} tasks...')\n\t    for x in inputs:\n\t        process_structure(*x)\n\t    print('finished {} tasks in {} s'.format(len(inputs),time.time()-t0))"]}
{"filename": "tfold/modeling/result_parse_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2019-2022\n\timport os\n\timport pickle\n\timport numpy as np\n\timport pandas as pd\n\timport time\n\timport re\n\t#from matplotlib import pyplot as plt\n\t#from sklearn.linear_model import LassoCV\n", "from tfold.utils import pdb_tools\n\tfrom tfold.config import data_dir\n\t#COLLECT RESULTS\n\tdef _get_pep_lddts(lddts,pdbnums):\n\t    '''\n\t    takes a np.array of predicted lddts and a list of pdbnums;\n\t    collects pdbnums for all pep residues\n\t    '''\n\t    return np.array([x for x in zip(pdbnums,lddts) if x[0][0]=='P'],dtype=[('pdbnum','<U6'),('lddt',float)])\n\tdef _get_mhc_lddts(lddts,pdbnums):\n", "    '''\n\t    takes a np.array of predicted lddts and a list of pdbnums;\n\t    collects pdbnums for a set of MHC residues that typically contact the peptide;\n\t    (top 8 contacts for cl I, top 7 contacts for cl II);\n\t    '''\n\t    #detect cl\n\t    cl='I'\n\t    for x in pdbnums[::-1]:\n\t        if x[0]=='N':\n\t            cl='II'\n", "            break\n\t    reskeep={'I':['M   7 ','M  63 ','M  66 ','M  77 ','M1009 ','M1059 ','M1070 ','M1077 '],\n\t             'II':['M  61 ','M  70 ','M  77 ','N1059 ','N1073 ','N1076 ','N1077 ']}\n\t    return np.array([x for x in zip(pdbnums,lddts) if x[0] in reskeep[cl]],dtype=[('pdbnum','<U6'),('lddt',float)])\n\tdef _seqnn_logkd_from_target_df(x,df_target):    \n\t    y=df_target[df_target['pmhc_id']==x['pmhc_id']].iloc[0]['seqnn_logkds_all']\n\t    logkd=np.log(5e4)\n\t    for y1 in y:\n\t        if y1['tail']==x['af_tails']:\n\t            logkd=y1['logkd']\n", "            break\n\t    return logkd\n\tdef parse_results(ctarget_dir):\n\t    #read inputs\n\t    t0=time.time()\n\t    df1={'pmhc_id':[],'model_id':[],'tpl_tails':[],'best_score':[],'best_mhc_score':[]}\n\t    for filename in os.listdir(ctarget_dir+'/inputs'):\n\t        with open(ctarget_dir+'/inputs/'+filename,'rb') as f:\n\t            c_input=pickle.load(f)\n\t        for x in c_input:\n", "            df1['pmhc_id'].append(x['target_id'])\n\t            df1['model_id'].append(x['current_id'])\n\t            df1['tpl_tails'].append(x['registers'][0]) #x['registers'] is a list of one element (assume no tiling)\n\t            df1['best_score'].append(x['best_score'])\n\t            df1['best_mhc_score'].append(x['best_mhc_score'])\n\t    df1=pd.DataFrame(df1)      \n\t    #read results        \n\t    df2={'pmhc_id':[],'model_id':[],'register_identified':[],'af_tails':[],'pep_lddt':[],'mhc_lddt':[]}\n\t    #check if rmsd is present\n\t    pmhc_id=os.listdir(ctarget_dir+'/outputs')[0]\n", "    pmhc_id=int(pmhc_id)\n\t    for result_filename in os.listdir(ctarget_dir+f'/outputs/{pmhc_id}'):      \n\t        if result_filename.endswith('.pkl'):\n\t            model_id=int(result_filename[:-4].split('_')[-1]) #assume use exactly one AF model\n\t            with open(ctarget_dir+f'/outputs/{pmhc_id}/{result_filename}','rb') as f:\n\t                c_result=pickle.load(f)\n\t            get_rmsd=('pep_CA' in c_result)\n\t            break\n\t    if get_rmsd:\n\t        df2.update({'pep_CA':[],'pep_all':[],'mhc_CA':[],'mhc_all':[]})\n", "    #collect\n\t    for pmhc_id in os.listdir(ctarget_dir+'/outputs'):     \n\t        pmhc_id=int(pmhc_id)\n\t        for result_filename in os.listdir(ctarget_dir+f'/outputs/{pmhc_id}'):      \n\t            if result_filename.endswith('.pkl'):\n\t                model_id=int(result_filename[:-4].split('_')[-1]) #assume use exactly one AF model\n\t                with open(ctarget_dir+f'/outputs/{pmhc_id}/{result_filename}','rb') as f:\n\t                    c_result=pickle.load(f)\n\t                df2['pmhc_id'].append(pmhc_id)\n\t                df2['model_id'].append(model_id)            \n", "                df2['register_identified'].append(c_result['pep_renumbered'])\n\t                df2['af_tails'].append(c_result['pep_tails'])\n\t                df2['pep_lddt'].append(_get_pep_lddts(c_result['plddt'],c_result['pdbnum_list']))\n\t                df2['mhc_lddt'].append(_get_mhc_lddts(c_result['plddt'],c_result['pdbnum_list']))\n\t                if get_rmsd:\n\t                    for k in ['pep_CA','pep_all','mhc_CA','mhc_all']:\n\t                        df2[k].append(c_result[k])\n\t    df2=pd.DataFrame(df2)    \n\t    #merge input and result dfs, add info from df_target\n\t    df_target=pd.read_pickle(ctarget_dir+'/target_df.pckl')\n", "    result_df=df1.merge(df2,left_on=['pmhc_id','model_id'],right_on=['pmhc_id','model_id'])\n\t    result_df=result_df.merge(df_target.drop(['templates','seqnn_logkds_all','seqnn_logkd','seqnn_tails'],axis=1),\n\t                              left_on='pmhc_id',right_on='pmhc_id')    \n\t    #add counts of registers in all models for given target\n\t    result_df=pd.merge(result_df,result_df.groupby('pmhc_id')['af_tails'].nunique(),left_on='pmhc_id',right_on='pmhc_id')\n\t    result_df=result_df.rename({'af_tails_x':'af_tails','af_tails_y':'af_n_reg'},axis=1)    \n\t    #add seqnn kd\n\t    result_df['seqnn_logkd']=result_df.apply(lambda x: _seqnn_logkd_from_target_df(x,df_target),axis=1) \n\t    #add 100-pLDDT score\n\t    result_df['score']=100-result_df['pep_lddt'].map(mean_pep_lddt)\n", "    #save\n\t    result_df.to_pickle(ctarget_dir+'/result_df.pckl')\n\t    print('{:4d} outputs collected in {:6.1f} s'.format(len(result_df),time.time()-t0))\n\t#CONFIDENCE SCORES FROM LINEAR MODELS\n\tdef mean_pep_lddt(x):\n\t    '''mean over core'''\n\t    reskeep=['P{:4d} '.format(i) for i in range(1,10)]+['P   5{:1d}'.format(i) for i in range(1,10)]             \n\t    return np.mean(x['lddt'][np.isin(x['pdbnum'],reskeep)])\n\tdef lddt_score(x):\n\t    return np.log(100-mean_pep_lddt(x))\n", "def _get_features1(x):\n\t    '''signs chosen so that higher score -> higher rmsd'''\n\t    cl=x['class']\n\t    features={}    \n\t    features['len']=len(x['pep'])                        #pep length\n\t    features['mhc_score']=x['best_mhc_score']\n\t    features['n_reg']=x['af_n_reg']                      #number of registers in AF output   \n\t    features['seqnn_logkd']=x['seqnn_logkd']             #seqnn logkd for af predicted register\n\t    features['register_identified']=-float(x['register_identified'])\n\t    features['mean_mhc_lddt']=100-np.mean(x['mhc_lddt']['lddt'])\n", "    #mean pep lddt\n\t    pep_lddt=x['pep_lddt']                                          \n\t    reskeep=['P{:4d} '.format(i) for i in range(1,10)]+['P   5{:1d}'.format(i) for i in range(1,10)]             \n\t    features['mean_pep_lddt']=100-np.mean(pep_lddt['lddt'][np.isin(pep_lddt['pdbnum'],reskeep)])                                          \n\t    #per-residue lddt for pep core\n\t    lddts_core=[]\n\t    #res 1    \n\t    if 'P   1 ' in pep_lddt['pdbnum']:\n\t        lddts_core+=list(pep_lddt['lddt'][pep_lddt['pdbnum']=='P   1 '])\n\t    else:\n", "        lddts_core+=list(pep_lddt['lddt'][pep_lddt['pdbnum']=='P   2 '])\n\t    #res 2-4\n\t    lddts_core+=list(pep_lddt['lddt'][('P   2 '<=pep_lddt['pdbnum'])&(pep_lddt['pdbnum']<='P   4 ')])\n\t    #res 5, including possible insertions\n\t    lddts_core.append(np.mean(pep_lddt['lddt'][('P   5 '<=pep_lddt['pdbnum'])&(pep_lddt['pdbnum']<='P   59')]))\n\t    #res 6 (missing in canonical 8mers)\n\t    if 'P   6 ' in pep_lddt['pdbnum']:\n\t        lddts_core+=list(pep_lddt['lddt'][pep_lddt['pdbnum']=='P   6 '])\n\t    else:\n\t        lddts_core+=list(pep_lddt['lddt'][pep_lddt['pdbnum']=='P   7 '])\n", "    #res 7-9\n\t    lddts_core+=list(pep_lddt['lddt'][('P   7 '<=pep_lddt['pdbnum'])&(pep_lddt['pdbnum']<='P   9 ')])\n\t    for i,l in enumerate(lddts_core):\n\t        features[f'P{i+1}']=100-l    \n\t    return features\n\t#REDUCE\n\tdef s_min(df,e_name,dell_e=False,how='min'):\n\t    '''\n\t    takes a dataframe and a name e_name of the column;\n\t    returns a reduced dataframe with one row -- the first row with minimal score in column e_name;\n", "    if dell_e (default False), remove the column e_name\n\t    '''    \n\t    if how=='min':\n\t        df=df[df[e_name]==df[e_name].min()].iloc[0]\n\t    elif how=='max':\n\t        df=df[df[e_name]==df[e_name].max()].iloc[0]\n\t    else:\n\t        raise ValueError('value for --how not recognized')\n\t    if dell_e:\n\t        del df[e_name]\n", "    return df\n\tdef reduce_to_best(df,aggr_by,t_key,how='min'):\n\t    '''\n\t    takes a dataframe to reduce;\n\t    takes a list aggr_by of columns by which to aggregate, e.g. ['m target','m template'];\n\t    takes column name t_key;\n\t    reduces to rows with minimal (default; how='max' for maximal) values in column t_key in each group\n\t    '''\n\t    x=df.copy()\n\t    f=lambda d: s_min(d,t_key,how=how)\n", "    x=x.groupby(aggr_by).apply(f)\n\t    return x\n\tdef reduce_to_best_all(dfs,aggr_by,t_key,how='min'):\n\t    return apply_to_dict(reduce_to_best,dfs,[aggr_by,t_key,how])    \n\tdef add_weighted_score(df,weight,score_name='s'):\n\t    '''\n\t    takes a df and a weight (dict, missing weights imputed as zeros);\n\t    adds (in place) a column with the weighted score; \n\t    column name is score_name (default 's')\n\t    '''\n", "    full_weight=[]\n\t    for c in df.columns:\n\t        if c in weight:\n\t            full_weight.append(weight[c])\n\t        else:\n\t            full_weight.append(0.)\n\t    full_weight=np.array(full_weight)    \n\t    x=df.dot(full_weight)  \n\t    if 'intercept' in weight:\n\t        x+=weight['intercept']\n", "    df[score_name]=x\n\tdef reduce_by_weighted_score(df,aggr_by,weight):\n\t    '''\n\t    takes a dataframe to reduce;\n\t    takes a list aggr_by of columns by which to aggregate, e.g. ['m target','m template'];    \n\t    takes a weight vector which should be a dict with keys being some columns of df; \n\t    (other weights assumed 0);\n\t    reduces in each group to one (!) row with min weighted score;\n\t    returns the reduced dataframe\n\t    '''\n", "    x=df.copy()\n\t    add_weighted_score(x,weight) \n\t    f=lambda d: s_min(d,'s',dell_e=True)    \n\t    x=x.groupby(aggr_by).apply(f)\n\t    #restore dtype to int for some columns\n\t    c_int=['m target','m template','m model_num']    \n\t    for k in c_int:\n\t        x[k]=x[k].astype(int) #float->int\n\t    return x   \n\tdef reduce_by_weighted_score_all(dfs,aggr_by,weight):\n", "    return apply_to_dict(reduce_by_weighted_score,dfs,[aggr_by,weight]) \n\t#SUMMARIZE AND PLOT\n\tdef summarize_columns(df,column_list,s0='',nl=6,nr=2):\n\t    '''\n\t    print summary for columns in format #column: mean std min max; column: ...#\n\t    takes s0 to print in the beginning of the line (default '')\n\t    nl and nr determine printing format as {:(nl+nr+1).nr}\n\t    '''\n\t    sf='{:'+str(nl+nr+1)+'.'+str(nr)+'f}'\n\t    s=s0    \n", "    for c in column_list:\n\t        s+=(' '.join([sf]*4)+';  ').format(df[c].mean(),df[c].std(),df[c].min(),df[c].max())        \n\t    print(s)\n\tdef summarize_columns_all(dfs,column_list=['d pep_ca','d pep_all','d mhc_ca','d mhc_all'],\n\t                          q_list=None,nl=6,nr=2):\n\t    '''\n\t    runs summarize columns for a dict of dfs; splits by q_group;\n\t    if q_list provided, uses it, otherwise all q groups;\n\t    nl and nr determine printing format as {:(nl+nr+1).nr}\n\t    '''\n", "    def shorten(k): #shorten some alg names to fit in line\n\t        k1=k\n\t        k1=re.sub('fast_relax','fr',k1)\n\t        k1=re.sub('custom','c',k1)\n\t        return k1            \n\t    nmax=max([len(shorten(k)) for k in dfs])\n\t    if not q_list:\n\t        q_list=list(dfs.values())[0]['t q_group'].unique()\n\t        q_list.sort()\n\t    k_list=np.sort(list(dfs.keys()))\n", "    print('; '.join(column_list))\n\t    print('mean, std, min, max')\n\t    for q in q_list:\n\t        print(q)\n\t        for k in k_list:\n\t            df=dfs[k]\n\t            summarize_columns(df[df['t q_group']==q],column_list,('{:'+str(nmax)+'s}: ').format(shorten(k)),nl,nr)            \n\t        print()                                      \n\tdef plot_x_vs_all(df,xkey,n_columns=6,scale=3):\n\t    '''\n", "    make scatterplots of column xkey vs all other columns in a dataframe (except 'm ...');\n\t    optionally takes n_columns and scale for plot layout\n\t    '''\n\t    n=len(df.columns)-3-1    \n\t    n_rows=n//n_columns+int(n%n_columns)  \n\t    plt.figure(figsize=(scale*n_columns,scale*n_rows))\n\t    ii=1\n\t    for i,c in enumerate(df.columns):\n\t        if c[0]!='m' and c!=xkey:\n\t            plt.subplot(n_rows,n_columns,ii)\n", "            plt.scatter(df[c],df[xkey])\n\t            plt.title(c)\n\t            ii+=1\n\t    plt.show()\n\tdef plot_correlations(df,size=7.):\n\t    '''\n\t    plots correlation matrix between columns (excluding 'm ...');\n\t    optionally, takes plot size (default 7)\n\t    #note: 'invalid value encountered in true_divide': division by zero variance, ignore;\n\t    '''\n", "    columns_keep=[c for c in df.columns if c[0]!='m']    \n\t    corr_matr=np.zeros((len(columns_keep),len(columns_keep)))\n\t    for i,x in enumerate(columns_keep):\n\t        for j,y in enumerate(columns_keep):\n\t            corr_matr[i,j]=np.corrcoef(df[x],df[y])[0,1]\n\t    plt.figure(figsize=(size,size))\n\t    plt.imshow(corr_matr,cmap='bwr',vmin=-1.,vmax=1.)\n\t    plt.xticks(range(len(columns_keep)),columns_keep,rotation=90)\n\t    plt.yticks(range(len(columns_keep)),columns_keep)\n\t    plt.colorbar()\n", "    plt.show()\n\tcolors=['grey','blue','green','black','red','yellow','navy','lightgray','brown','purple']            \n\tdef plot_histograms_all(dfs,column_list=None,cumulative=0,n_columns=6,scale=7):\n\t    '''\n\t    takes a dict of dfs;\n\t    plots histograms for columns in column_list (if None, all columns except 'm ...');\n\t    (splits by q_group);\n\t    takes n_columns and scale for plot layout;\n\t    '''\n\t    titles=list(dfs.keys())\n", "    df0=dfs[titles[0]]\n\t    q_list=df0['t q_group'].unique()\n\t    q_list.sort()\n\t    if not column_list:\n\t        column_list=[c for c in df0.columns if c[0]!='m']\n\t    n=len(column_list)\n\t    n_columns=min(n_columns,n) #don't make more columns than necessary\n\t    n_rows=n//n_columns+int(n%n_columns)  \n\t    for q in q_list:\n\t        print('q group {}:'.format(q))        \n", "        plt.figure(figsize=(scale*n_columns,scale*n_rows))        \n\t        for i,c in enumerate(column_list):            \n\t            plt.subplot(n_rows,n_columns,i+1)            \n\t            for j,t in enumerate(titles):\n\t                df=dfs[t]\n\t                df=df[df['t q_group']==q] #restrict to q_group\n\t                plt.hist(df[c],histtype='step',density=True,color=colors[j],cumulative=cumulative)   \n\t            if len(titles)>1:\n\t                plt.legend(titles)#,loc='upper right')\n\t            plt.title(c)            \n", "            plt.grid()\n\t        plt.show()    \n"]}
{"filename": "tfold/modeling/mmcif_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\t#tools for making mmcifs suitable for AF input out of pdbs\n\tfrom Bio.PDB.PDBParser import PDBParser \n\tfrom Bio.PDB import MMCIFIO\n\timport io\n\tdef rearrange_pdb_file(s,pep_pdbnum):\n\t    '''\n\t    rearrange chains in the order PMNAB; change chain names to 'A' and pdbnums to sequential;\n\t    drop pep residues other than pep_pdbnum (to cut linkers)\n", "    '''\n\t    lines=s.split('\\n')    \n\t    lines_by_chain={}\n\t    pdbnums_by_chain={}\n\t    for line in lines:\n\t        if line.startswith(('ATOM','HETATM')): #drop 'TER'\n\t            chain=line[21]\n\t            pdbnum=line[21:27] #incl chain\n\t            if (chain=='P') and (pdbnum not in pep_pdbnum): #drop pep residues not in pep_pdbnum\n\t                continue\n", "            lines_by_chain.setdefault(chain,[]).append(line)\n\t            pdbnums_by_chain.setdefault(chain,[])                        \n\t            if pdbnum not in pdbnums_by_chain[chain]:  #each should appear once\n\t                pdbnums_by_chain[chain].append(pdbnum)\n\t    lines_new=[]\n\t    pdbnum_list=[]\n\t    for chain in ['P','M','N','A','B']:\n\t        lines_new+=lines_by_chain.get(chain,[])\n\t        pdbnum_list+=pdbnums_by_chain.get(chain,[])\n\t    lines_renumbered=[]\n", "    reslist=[] #for use in mmcif header\n\t    pdbnums_encountered=set()\n\t    for line in lines_new:\n\t        pdbnum='{:6s}'.format(line[21:27]) #format included in case line is shorter\n\t        index=pdbnum_list.index(pdbnum)\n\t        if pdbnum not in pdbnums_encountered:\n\t            reslist.append([index+1,line[17:20]])\n\t            pdbnums_encountered.add(pdbnum)\n\t        line=line[:21]+'A{:4d} '.format(index+1)+line[27:]\n\t        lines_renumbered.append(line)                             \n", "    return '\\n'.join(lines_renumbered),reslist\n\tdef mmcif_loop(keys,values):        \n\t    #loop block:\n\t    ##\n\t    #loop_\n\t    #_x.a\n\t    #_x.b\n\t    #_x.c\n\t    #a1 b1 c1\n\t    #a2 b2 c2\n", "    #...\n\t    lines=[]\n\t    lines.append('#')\n\t    lines.append('loop_')\n\t    for k in keys:\n\t        lines.append(k)\n\t    for v in values:\n\t        lines.append(' '.join(['{}'.format(x) for x in v]))\n\t    return lines\n\trestypes=['ALA','ARG','ASN','ASP','CYS','GLN','GLU','GLY','HIS','ILE','LEU','LYS','MET',\n", "           'PHE','PRO','SER','THR','TRP','TYR','VAL']\n\tdef pdb_to_mmcif(s,pep_pdbnum):\n\t    pdb_parser=PDBParser()\n\t    mmcifio=MMCIFIO()\n\t    s,reslist=rearrange_pdb_file(s,pep_pdbnum)\n\t    with io.StringIO(s) as f:        \n\t        x=pdb_parser.get_structure('some_pdb',f)\n\t    mmcifio.set_structure(x)\n\t    with io.StringIO() as f:\n\t        mmcifio.save(f)\n", "        f.seek(0)\n\t        s=f.read()\n\t    #add mmcif data    \n\t    lines=[]\n\t    #header\n\t    d={'_exptl.method':'some_method',                              #fake experimental method\n\t       '_pdbx_audit_revision_history.revision_date':'1950-01-01',  #fake date\n\t       '_refine.ls_d_res_high':'1.0'}                              #fake resolution        \n\t    for k,v in d.items():\n\t        lines.append('#')\n", "        lines.append('{:50s} {:20s}'.format(k,v))\n\t    #entity\n\t    reslist=[['1',a[1],a[0]] for a in reslist]\n\t    lines+=mmcif_loop(['_entity_poly_seq.entity_id','_entity_poly_seq.mon_id','_entity_poly_seq.num'],reslist)\n\t    #chem: used by AF parser only to identify protein chains; don't need to care about HETATM\n\t    lines+=mmcif_loop(['_chem_comp.id','_chem_comp.type'],zip(restypes,['L-peptide_linking']*len(restypes)))\n\t    #struct\n\t    lines+=mmcif_loop(['_struct_asym.id','_struct_asym.entity_id'],[['A','1']])           \n\t    s=s.split('\\n')    \n\t    lines=[s[0]]+lines+s[1:]\n", "    s='\\n'.join(lines)\n\t    return s\n\t#used in mmcif parser:\n\t#'_exptl.method' #'some_method'\n\t#'_pdbx_audit_revision_history.revision_date' #'1980-01-01'\n\t#'_refine.ls_d_res_high' #'2.0'\n\t##'_entity_poly_seq.',\n\t#'_entity_poly_seq.entity_id', #'1'\n\t#'_entity_poly_seq.mon_id',    #residue, e.g. 'ALA'\n\t#'_entity_poly_seq.num',       #resnum, e.g. '25'\n", "##'_chem_comp.',\n\t#'_chem_comp.id',    #20 residues, e.g. 'ALA'\n\t#'_chem_comp.type',  #'L-peptide_linking'  #NO SPACES!!!\n\t##'_struct_asym.',\n\t#'_struct_asym.id',         #'A'\n\t#'_struct_asym.entity_id']  #'1'"]}
{"filename": "tfold/modeling/__init__.py", "chunked_list": []}
{"filename": "tfold/modeling/template_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\timport os\n\timport copy\n\timport pickle\n\timport numpy as np\n\timport pandas as pd\n\tfrom Bio import pairwise2\n\timport tfold.utils.seq_tools as seq_tools\n\timport tfold.nn.nn_utils as nn_utils\n", "##### load data #####\n\tdef load_data(source_dir):\n\t    global template_data,template_info,pep_pdbnums_template,mhc_pdbnums_template,summary\n\t    with open(source_dir+'/summary.pckl','rb') as f:\n\t        summary=pickle.load(f) \n\t    template_data,template_info={},{}\n\t    pep_pdbnums_template,mhc_pdbnums_template={},{}\n\t    for cl in ['I','II']:\n\t        template_data[cl]=pd.read_pickle(source_dir+f'/templates/template_data_{cl}.pckl')\n\t        template_info[cl]=pd.read_pickle(source_dir+f'/templates/template_info_{cl}.pckl')\n", "        with open(source_dir+f'/templates/pep_pdbnums_{cl}.pckl','rb') as f:\n\t            pep_pdbnums_template[cl]=pickle.load(f)\n\t        with open(source_dir+f'/templates/mhc_pdbnums_{cl}.pckl','rb') as f:\n\t            mhc_pdbnums_template[cl]=pickle.load(f)         \n\t##### edit distance, used for clustering #####\n\tdef edit_distance(seq1,seq2,return_all=False):\n\t    '''\n\t    takes two sequences, returns the number of mismatches;\n\t    (globalms alignment with gap penalties);    \n\t    if return_all, returns all alignments\n", "    '''\n\t    y=pairwise2.align.globalms(seq1,seq2,match=1,mismatch=-1,open=-1,extend=-1)\n\t    s_best=1000\n\t    i_best=-1\n\t    for i,x in enumerate(y):\n\t        s=int((x[4]-x[3]-x[2])/2) #integer anyway\n\t        if s<s_best:\n\t            s_best=s\n\t            i_best=i\n\t    if return_all:\n", "        return y,i_best\n\t    else:\n\t        return s_best    \n\tdef _pmhc_edit_distance(pmhc1,pmhc2):    \n\t    pep1=seq_tools.load_NUMSEQ(pmhc1['P']).get_fragment_by_pdbnum('   09',' 10 ').seq() #cut tails (incl. linkers)\n\t    pep2=seq_tools.load_NUMSEQ(pmhc2['P']).get_fragment_by_pdbnum('   09',' 10 ').seq()\n\t    pep_dist=edit_distance(pep1,pep2)\n\t    mhc_seq1=[''.join(pmhc1['M']['data']['seq'])]\n\t    mhc_seq2=[''.join(pmhc2['M']['data']['seq'])]    \n\t    if pmhc1['class']=='II':\n", "        mhc_seq1.append(''.join(pmhc1['N']['data']['seq']))\n\t    if pmhc2['class']=='II':\n\t        mhc_seq2.append(''.join(pmhc2['N']['data']['seq']))      \n\t    if pmhc1['class']!=pmhc2['class']: #join chains M and N for cl II\n\t        mhc_seq1=[''.join(mhc_seq1)]\n\t        mhc_seq2=[''.join(mhc_seq2)]        \n\t    mhc_dist=sum([edit_distance(*x) for x in zip(mhc_seq1,mhc_seq2)])\n\t    return pep_dist+mhc_dist          \n\tdef _tcr_edit_distance(tcr1,tcr2):        \n\t    tcr_seq1=''.join(tcr1['obj']['data']['seq'])\n", "    tcr_seq2=''.join(tcr2['obj']['data']['seq'])\n\t    return edit_distance(tcr_seq1,tcr_seq2)    \n\tdef protein_edit_distances_all(inputs,output_dir,proteins,pdb_dir):\n\t    #load pmhc/tcr records    \n\t    if proteins not in ['pmhcs','tcrs']:\n\t        raise ValueError(f'protein {proteins} not understood;')\n\t    with open(f'{pdb_dir}/{proteins}.pckl','rb') as f:\n\t        proteins_data=pickle.load(f)\n\t    print(f'protein records {proteins} of len {len(proteins_data)}')\n\t    if proteins=='pmhcs':\n", "        dist_func=_pmhc_edit_distance\n\t    elif proteins=='tcrs':\n\t        dist_func=_tcr_edit_distance\n\t    distances={}\n\t    for x in inputs:\n\t        a,b=int(x[0]),int(x[1])\n\t        distances[a,b]=dist_func(proteins_data[a],proteins_data[b])\n\t    with open(output_dir+f'/d_{a}_{b}.pckl','wb') as f:\n\t        pickle.dump(distances,f)     \n\t##### tools for template assignment #####       \n", "#binding registers\n\tcl_I_resnum_template_left=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,6)]\n\tcl_I_resnum_template_insert=['   5{:1d}'.format(x) for x in range(1,10)]\n\tcl_I_resnum_template_right=['{:4d} '.format(x) for x in range(6,10000)]\n\tcl_II_resnum_template_ext=['   0{}'.format(x) for x in 'abcdefghijklmnopqrstuvwxyz']\n\tcl_II_resnum_template=['   0{:1d}'.format(x) for x in range(1,10)]+['{:4d} '.format(x) for x in range(1,10000)]\n\tdef _make_pep_pdbnums_I(pep_len,left_tail,right_tail):\n\t    '''\n\t    pdbnums for a class I peptide\n\t    '''\n", "    assert -1<=left_tail<=9,    'cl I pep: left tail length should be between -1 and 9;'\n\t    assert 0<=right_tail<=9999, 'cl I pep: right tail length must be between 0 and 9999;'    \n\t    core_len=pep_len-left_tail-right_tail    #core length\n\t    assert core_len>=8, 'cl I pep: core length must be at least 8;'   \n\t    assert core_len<=18, 'cl I pep: core too long;' #cannot index cores longer than 18\n\t    left_part=cl_I_resnum_template_left[9-left_tail:] #e.g. [9:] for no tail, [10:] for tail=-1 (i.e. from res 2)\n\t    l_insert=max(0,core_len-9)\n\t    l_insert_right=l_insert//2\n\t    l_insert_left=l_insert-l_insert_right\n\t    center_part=cl_I_resnum_template_insert[:l_insert_left]+cl_I_resnum_template_insert[9-l_insert_right:]\n", "    right_part=cl_I_resnum_template_right[max(0,9-core_len):] #remove res 6 if core length 8\n\t    pdbnum=left_part+center_part+right_part        \n\t    return pdbnum[:pep_len]\n\tdef _make_pep_pdbnums_II(pep_len,left_tail):  \n\t    '''\n\t    pdbnums for a class II peptide\n\t    '''    \n\t    assert pep_len-left_tail>=9, 'cl II pep: core too short;'\n\t    left_tail_ext=max(left_tail-9,0) #part with letter insertion codes\n\t    pdbnum=cl_II_resnum_template_ext[len(cl_II_resnum_template_ext)-left_tail_ext:]+cl_II_resnum_template[max(0,9-left_tail):]\n", "    return pdbnum[:pep_len]\n\t#template search\n\taa_array=np.array(list('ACDEFGHIKLMNPQRSTVWXY'))\n\tdef one_hot_encoding(seq):\n\t    l=len(aa_array)\n\t    return (np.repeat(list(seq),l).reshape(-1,l)==aa_array).astype(int)\n\tdef data_to_matrix(data,pdbnums):\n\t    '''\n\t    takes 'data' array of NUMSEQ and an array of pdbnums;\n\t    returns a one-hot encoded matrix for data spaced to pdbnums with 0-vectors;\n", "    positions in data that are not in pdbnums are dropped\n\t    '''\n\t    data=data[np.isin(data['pdbnum'],pdbnums)] #drop data with positions not in pdbnums\n\t    data=data[np.argsort(data['pdbnum'])]\n\t    ind=np.isin(pdbnums,data['pdbnum'])\n\t    data_enc=one_hot_encoding(data['seq'])\n\t    matrix=np.zeros((len(pdbnums),data_enc.shape[1]))\n\t    matrix[ind]=data_enc\n\t    return matrix        \n\tdef assign_templates(cl,pep_seq,pep_tails,mhc_A,mhc_B=None,templates_per_register=None,pep_gap_penalty=0,mhc_cutoff=None,shuffle=False,\n", "                     pdbs_exclude=None,date_cutoff=None,score_cutoff=None,pep_score_cutoff=None):\n\t    '''\n\t    takes class, pep sequence, mhc data array; assigns templates;\n\t    for each possible binding register, templates are sorted by pep_score+mhc_score+pep_gap_penalty*pep_gap_count (total mismatch number);\n\t    (for pep mismatch number, not all residues are considered: see pep_pdbnums_template[cl]);\n\t    templates with pdbs in pdbs_exclude are dropped; templates with date>date_cutoff are excluded; with total score<=score_cutoff excluded;\n\t    templates with mhc_score greater than mhc_cutoff+min(mhc_scores) are droppped;\n\t    with pep_score<=pep_score_cutoff dropped;\n\t    then no more than templates_per_register templates are assigned for each register;\n\t    each CA cluster is allowed no more than once per register\n", "    '''    \n\t    if cl=='I':\n\t        mhc_data=mhc_A\n\t    else:\n\t        mhc_data=np.concatenate((mhc_A,mhc_B))    \n\t    mhc_matrix=data_to_matrix(mhc_data,mhc_pdbnums_template[cl])\n\t    mhc_scores=np.sum(np.any(template_data[cl]['mhc_data']-mhc_matrix,axis=2).astype(int),axis=1)        \n\t    #exclude by date, pdb_id, mhc_score\n\t    ind_keep=np.array([True for i in range(len(mhc_scores))])\n\t    x=template_info[cl]\n", "    if date_cutoff:\n\t        ind_keep&=(x['date']<date_cutoff).values\n\t    if pdbs_exclude:           \n\t        ind_keep&=~x['pdb_id_short'].isin(pdbs_exclude)\n\t    if mhc_cutoff:\n\t        ind_keep&=((mhc_scores-np.min(mhc_scores[ind_keep]))<=mhc_cutoff)        \n\t    #pep pdbnums   \n\t    pep_len=len(pep_seq)    \n\t    if cl=='I':        \n\t        c_pep_pdbnums=[(x,_make_pep_pdbnums_I(pep_len,x[0],x[1])) for x in pep_tails]\n", "    else:        \n\t        c_pep_pdbnums=[(x,_make_pep_pdbnums_II(pep_len,x[0])) for x in pep_tails]    \n\t    templates_assigned={}\n\t    for tails,pdbnum in c_pep_pdbnums:\n\t        pep_data=seq_tools.NUMSEQ(seq=pep_seq,pdbnum=pdbnum).data\n\t        pep_matrix=data_to_matrix(pep_data,pep_pdbnums_template[cl])    \n\t        pep_scores=np.sum(np.any(template_data[cl]['pep_data']-pep_matrix,axis=2).astype(int),axis=1)\n\t        total_scores=mhc_scores+pep_scores+pep_gap_penalty*template_info[cl]['pep_gaps']\n\t        if score_cutoff:\n\t            ind_keep1=ind_keep&(total_scores>score_cutoff)\n", "        else:\n\t            ind_keep1=ind_keep \n\t        if pep_score_cutoff:\n\t            ind_keep1=ind_keep1&(pep_scores>pep_score_cutoff)        \n\t        ind=np.argsort(total_scores,kind='mergesort') #stable sort to preserve order for elements w. identical scores\n\t        cluster_CA_ids_used=set()        \n\t        templates_assigned[tails]=[]\n\t        for i in ind:\n\t            if ind_keep1[i]:                \n\t                x=template_info[cl].iloc[i]                \n", "                if x['cluster_CA'] not in cluster_CA_ids_used: #use one structure per CA cluster                    \n\t                    templates_assigned[tails].append({'pdb_id':x['pdb_id'],\n\t                                                      'pep_score':pep_scores[i],'mhc_score':mhc_scores[i],'pep_gaps':x['pep_gaps'],\n\t                                                      'score':total_scores[i]})\n\t                    cluster_CA_ids_used.add(x['cluster_CA'])\n\t                    if len(templates_assigned[tails])>=templates_per_register:\n\t                        break                   \n\t    templates_assigned=pd.DataFrame(templates_assigned) #same num templates per register\n\t    if shuffle:\n\t        templates_assigned=templates_assigned.sample(frac=1)\n", "    return templates_assigned\n\t#turn templates into AF hits\n\tdef _interlace_lists(l1,l2):\n\t    '''interlaces two lists preserving order'''\n\t    l1_iter=iter(l1)\n\t    l2_iter=iter(l2)\n\t    a=next(l1_iter)\n\t    b=next(l2_iter)\n\t    result=[]\n\t    while True:\n", "        add_a=False\n\t        add_b=False\n\t        try:\n\t            if a==b:\n\t                result.append(a)\n\t                a=next(l1_iter)\n\t                add_a=True\n\t                b=next(l2_iter)\n\t                add_b=True\n\t            elif a<b:\n", "                result.append(a)\n\t                a=next(l1_iter)\n\t                add_a=True\n\t            else:\n\t                result.append(b)\n\t                b=next(l2_iter)\n\t                add_b=True\n\t        except StopIteration:\n\t            break\n\t    try:\n", "        if add_a:\n\t            while True:\n\t                result.append(a)\n\t                a=next(l1_iter)\n\t        elif add_b:\n\t            while True:\n\t                result.append(b)\n\t                b=next(l2_iter)\n\t    except StopIteration:\n\t        pass\n", "    return result\n\tdef align_numseq(query,target):\n\t    '''takes query and target NUMSEQ objects;\n\t    returns dict with aligned query seq, target seq, indices query, indices target\n\t    '''\n\t    pdbnum_x=list(query.data['pdbnum'])\n\t    pdbnum_y=list(target.data['pdbnum'])\n\t    pdbnum_joined=_interlace_lists(pdbnum_x,pdbnum_y)\n\t    indices_query=[]\n\t    indices_target=[]\n", "    query_seq=''\n\t    target_seq=''\n\t    iq,it=0,0\n\t    for p in pdbnum_joined:\n\t        ind=np.nonzero(query.data['pdbnum']==p)[0]        \n\t        if len(ind)>0:\n\t            query_seq+=query.data['seq'][ind[0]]\n\t            indices_query.append(iq)\n\t            iq+=1\n\t        else:\n", "            query_seq+='-'\n\t            indices_query.append(-1)\n\t        ind=np.nonzero(target.data['pdbnum']==p)[0] \n\t        if len(ind)>0:\n\t            target_seq+=target.data['seq'][ind[0]]\n\t            indices_target.append(it)\n\t            it+=1\n\t        else:\n\t            target_seq+='-'\n\t            indices_target.append(-1)    \n", "    return {'query_seq':query_seq,'target_seq':target_seq,'indices_query':indices_query,'indices_target':indices_target}        \n\tdef join_fragment_alignments(fragments):\n\t    '''\n\t    join multiple alignments into one\n\t    '''\n\t    if len(fragments)==0:\n\t        raise ValueError('no fragments provided')\n\t    elif len(fragments)==1:\n\t        return fragments[0]    \n\t    alignment=copy.deepcopy(fragments[0])\n", "    for f in fragments[1:]:\n\t        max_ind_query=max(alignment['indices_query'])\n\t        max_ind_target=max(alignment['indices_target'])        \n\t        alignment['indices_query']+=[-1*(x==-1)+(x+max_ind_query+1)*(x!=-1) for x in f['indices_query']]\n\t        alignment['indices_target']+=[-1*(x==-1)+(x+max_ind_target+1)*(x!=-1) for x in f['indices_target']]\n\t        alignment['query_seq']+=f['query_seq']\n\t        alignment['target_seq']+=f['target_seq']\n\t    return alignment\n\tdef make_template_hit(cl,x,pep_query,mhc_A_query,mhc_B_query=None):\n\t    '''\n", "    takes cl, dict x {'pdbid':..,...}, NUMSEQ objects for pep and mhc queries;\n\t    returns a copy of dict x with added field 'template_hit' (AF formatted template hit)\n\t    '''    \n\t    fragment_alignments=[]    \n\t    pdb_id=x['pdb_id']\n\t    summary_record=summary[pdb_id]    \n\t    pep_target=seq_tools.load_NUMSEQ(summary_record['P'])\n\t    pep_target=pep_target.ungap_small()\n\t    fragment_alignments.append(align_numseq(pep_query,pep_target))    \n\t    mhc_A_target=seq_tools.load_NUMSEQ(summary_record['M'])\n", "    mhc_A_target=mhc_A_target.ungap_small()\n\t    fragment_alignments.append(align_numseq(mhc_A_query,mhc_A_target))\n\t    if cl=='II':\n\t        mhc_B_target=seq_tools.load_NUMSEQ(summary_record['N'])\n\t        mhc_B_target=mhc_B_target.ungap_small()\n\t        fragment_alignments.append(align_numseq(mhc_B_query,mhc_B_target))    \n\t    hit=join_fragment_alignments(fragment_alignments)\n\t    template_hit={}\n\t    template_hit['index']=None #to be added when run inputs are assembled\n\t    template_hit['name']=pdb_id                \n", "    template_hit['aligned_cols']=len(hit['query_seq'])-hit['query_seq'].count('-')-hit['target_seq'].count('-')\n\t    template_hit['sum_probs']=1000-x['score']\n\t    template_hit['query']=hit['query_seq']\n\t    template_hit['hit_sequence']=hit['target_seq']\n\t    template_hit['indices_query']=hit['indices_query']\n\t    template_hit['indices_hit']=hit['indices_target']         \n\t    return {'template_hit':template_hit,**x}\n\ttask_names={'distances':protein_edit_distances_all}\n\tif __name__=='__main__': \n\t    import time    \n", "    from argparse import ArgumentParser\n\t    import csv\n\t    t0=time.time()    \n\t    parser=ArgumentParser()\n\t    parser.add_argument('input_filename', type=str, help='path to input file')    \n\t    parser.add_argument('task', type=str, help='task, e.g. \"distances_pmhcs\"')    \n\t    parser.add_argument('output_dir', type=str, help='path to output dir')   \n\t    parser.add_argument('pdb_dir',type=str)\n\t    args=parser.parse_args()      \n\t    os.makedirs(args.output_dir,exist_ok=True)\n", "    inputs=[]\n\t    with open(args.input_filename) as f:\n\t        f_csv=csv.reader(f,delimiter='\\t')\n\t        inputs=[x for x in f_csv]        \n\t    print(f'processing {len(inputs)} tasks {args.task}...')\n\t    _func=task_names[args.task.split('_')[0]]\n\t    _func(inputs,args.output_dir,*args.task.split('_')[1:],args.pdb_dir)                                          \n\t    print('finished {} tasks in {} s'.format(len(inputs),time.time()-t0))\n"]}
{"filename": "tfold/modeling/make_inputs.py", "chunked_list": ["import pickle\n\timport numpy as np\n\timport pandas as pd\n\timport tfold.config\n\timport tfold.utils.seq_tools as seq_tools\n\timport tfold.nn.nn_predict as nn_predict\n\timport tfold.modeling.template_tools as template_tools\n\ttemplate_tools.load_data(tfold.config.template_source_dir)\n\ttemplates_per_run=4 #AF maximum\n\twith open(tfold.config.data_dir+'/msas/mhc_msa_index.pckl','rb') as f: #index of precomputed MSAs for MHCs\n", "    mhc_msa_index=pickle.load(f)\n\twith open(tfold.config.data_dir+'/msas/pmhc_msa_index.pckl','rb') as f: #index of pMHC assay MSAs\n\t    pmhc_msa_index=pickle.load(f)\n\tdef _mhcb(x):\n\t    if x['class']=='I':\n\t        return None\n\t    else:\n\t        return x['mhc_b'].data    \n\tdef _exclude_pdbs(x):\n\t    if 'exclude_pdbs' in x.index:\n", "        return set(x['exclude_pdbs'])\n\t    else:\n\t        return None\n\tdef _prefilter_registers(logkds,threshold):\n\t    return logkds['tail'][logkds['logkd']-np.min(logkds['logkd'])<np.log10(threshold)]\n\tdef _get_mhc_msa_filenames(cl,chain,pdbnum):\n\t    '''\n\t    find MSA filenames for given MHC class, chain, pdbnum;\n\t    (returns a list of str filenames)\n\t    '''\n", "    pdbnum='|'.join(pdbnum)\n\t    try:\n\t        msa_id=mhc_msa_index[cl+'_'+chain][pdbnum][0]\n\t    except KeyError:\n\t        raise ValueError('MHC MSA not precomputed for given class, chain and pdbnum')\n\t    msas=[]\n\t    for x in ['bfd_uniclust_hits.a3m','mgnify_hits.a3m','uniref90_hits.a3m']:\n\t        msas.append(tfold.config.data_dir+f'/msas/MHC/{cl}_{chain}_{msa_id}/{x}')\n\t    return msas\n\tdef _get_pmhc_msa_filenames(cl,chain,pdbnum):\n", "    '''\n\t    find MSA filename for pMHC assays for given class, chain (P,M,N), pdbnum;\n\t    (returns a str filename)\n\t    '''\n\t    pdbnum='|'.join(pdbnum)\n\t    try:\n\t        msa_id=pmhc_msa_index[cl+'_'+chain][pdbnum]\n\t    except KeyError:\n\t        raise ValueError('pMHC MSA not precomputed for given class, chain and pdbnum')\n\t    return tfold.config.data_dir+f'/msas/pMHC/{cl}_{chain}_{msa_id}.a3m'\n", "def _make_af_inputs_for_one_entry(x,use_mhc_msa,use_paired_msa,tile_registers):  \n\t    '''\n\t    takes a Series x with entries: class, pep, mhc_a, (mhc_b), templates, pmhc_id, (pdb_id -- for true structure);\n\t    also options for msa and register tiling;\n\t    returns a list of AF inputs\n\t    '''\n\t    sequences=[x['pep']]                \n\t    msas_mhc=[]\n\t    #mhc_a\n\t    mhc_A_query=x['mhc_a']\n", "    sequences.append(mhc_A_query.seq())\n\t    renumber_list_mhc=['M'+a for a in mhc_A_query.data['pdbnum']]\n\t    if use_mhc_msa:\n\t        try:\n\t            msas_filenames=_get_mhc_msa_filenames(x['class'],'A',mhc_A_query.data['pdbnum'])\n\t            msas_mhc+=[{1:f} for f in msas_filenames]\n\t        except Exception as e:\n\t            print(f'MHC chain A MSA not available: {e}')\n\t    #mhc_b\n\t    if x['class']=='II':\n", "        mhc_B_query=x['mhc_b']\n\t        sequences.append(mhc_B_query.seq())\n\t        renumber_list_mhc+=['N'+a for a in mhc_B_query.data['pdbnum']]      \n\t        if use_mhc_msa:\n\t            try:\n\t                msas_filenames=_get_mhc_msa_filenames(x['class'],'B',mhc_B_query.data['pdbnum'])\n\t                msas_mhc+=[{2:f} for f in msas_filenames]\n\t            except Exception as e:\n\t                print(f'MHC chain B MSA not available: {e}')\n\t    else:\n", "        mhc_B_query=None\n\t    #prepare templates in AF input format\n\t    all_tails=list(x['templates'].columns) #for statistics\n\t    pep_len=len(x['pep'])\n\t    templates_processed={}\n\t    for tails in x['templates'].columns:\n\t        if x['class']=='I':\n\t            pdbnum=template_tools._make_pep_pdbnums_I(pep_len,*tails)\n\t        else:\n\t            pdbnum=template_tools._make_pep_pdbnums_II(pep_len,tails[0])\n", "        pep_query=seq_tools.NUMSEQ(seq=x['pep'],pdbnum=pdbnum)        \n\t        z=x['templates'][tails].map(lambda y: template_tools.make_template_hit(x['class'],y,pep_query,mhc_A_query,mhc_B_query))        \n\t        for w in z: #add tail info\n\t            w['tails']=tails        \n\t        templates_processed[tails]=z        \n\t    templates_processed=pd.DataFrame(templates_processed)        \n\t    #split templates by runs            \n\t    if tile_registers: #order as #[tail1_templ1,tail2_templ1,...], split into consecutive groups of <=templates_per_run\n\t        z=templates_processed.values\n\t        z=z.reshape(z.shape[0]*z.shape[1]) \n", "        lz=len(z)\n\t        templates_by_run=[z[templates_per_run*i:templates_per_run*(i+1)] \n\t                          for i in range(lz//templates_per_run+int(lz%templates_per_run!=0))] \n\t    else:             #for each tail, split into groups of <=templates_per_run; don't mix tails within the same run\n\t        templates_by_run=[]\n\t        for c in templates_processed.columns:\n\t            z=templates_processed[c].values\n\t            lz=len(z)\n\t            templates_by_run+=[z[templates_per_run*i:templates_per_run*(i+1)] \n\t                               for i in range(lz//templates_per_run+int(lz%templates_per_run!=0))]         \n", "    #make inputs for each run\n\t    inputs=[]\n\t    input_id=0\n\t    for run in templates_by_run:\n\t        #collect tails and scores\n\t        tails=set()\n\t        best_mhc_score=1000\n\t        best_score=1000\n\t        scores=[]\n\t        for r in run:\n", "            tails.add(r['tails'])\n\t            best_mhc_score=min(best_mhc_score,r['mhc_score'])\n\t            best_score=min(best_score,r['score'])\n\t        tails=list(tails)\n\t        #renumber list: use pdbnum from random template within run\n\t        t0=run[np.random.randint(len(run))]['tails']\n\t        if x['class']=='I':\n\t            pdbnum=template_tools._make_pep_pdbnums_I(pep_len,t0[0],t0[1]) \n\t        else:\n\t            pdbnum=template_tools._make_pep_pdbnums_II(pep_len,t0[0])\n", "        renumber_list=['P'+a for a in pdbnum]+renumber_list_mhc\n\t        #paired msa\n\t        msas_pmhc=[]\n\t        if use_paired_msa and (len(tails)==1): #only use when there is one register in the run\n\t            try:\n\t                pmhc_msa_parts=[_get_pmhc_msa_filenames(x['class'],'P',pdbnum),\n\t                                _get_pmhc_msa_filenames(x['class'],'M',mhc_A_query.data['pdbnum'])]                \n\t                if x['class']=='II':\n\t                    pmhc_msa_parts.append(_get_pmhc_msa_filenames(x['class'],'N',mhc_B_query.data['pdbnum']))                               \n\t                msas_pmhc+=[{i:f for i,f in enumerate(pmhc_msa_parts)}] #{0:pep,1:M,2:N}\n", "            except Exception as e:\n\t                print(f'paired MSA not available: {e}')\n\t        msas=msas_mhc+msas_pmhc\n\t        #make input\n\t        input_data={}\n\t        input_data['sequences']=sequences\n\t        input_data['msas']=msas\n\t        input_data['template_hits']=[r['template_hit'] for r in run]\n\t        input_data['renumber_list']=renumber_list\n\t        input_data['target_id']=x['pmhc_id']      #pmhc id of query: add from index if not present!            \n", "        input_data['current_id']=input_id\n\t        input_id+=1\n\t        #additional info (not used by AlphaFold)        \n\t        input_data['registers']=tails\n\t        input_data['best_mhc_score']=best_mhc_score\n\t        input_data['best_score']=best_score\n\t        if 'pdb_id' in x:\n\t            input_data['true_pdb']=x['pdb_id'] #pdb_id of true structure, if given\n\t        inputs.append(input_data)\n\t    return {'inputs':inputs,'class':x['class'],'tails':all_tails}\n", "def run_seqnn(df,use_seqnnf=False): \n\t    '''\n\t    takes a dataframe with fields \"class\" (I or II), \n\t    '''\n\t    df1=df[df['class']=='I']\n\t    if len(df1)>0:\n\t        df1=nn_predict.predict(df1,'I',mhc_as_obj=True)\n\t    df2=df[df['class']=='II']\n\t    if len(df2)>0:\n\t        if use_seqnnf:       \n", "            df2=nn_predict.predict(df2,'II',mhc_as_obj=True,model_list=[(33,)])\n\t        else:\n\t            df2=nn_predict.predict(df2,'II',mhc_as_obj=True)        \n\t    return pd.concat([df1,df2])\n\tdef map_one_mhc_allele(a):\n\t    species,la=a.split('-')\n\t    if species in ['HLA','H2']:\n\t        species={'HLA':'9606','H2':'10090'}[species]\n\t    if '/' in la:\n\t        cl='II'\n", "        laA,laB=la.split('/')\n\t        lA,aA=laA.split('*')\n\t        lB,aB=laB.split('*')\n\t        mhc_a=seq_tools.mhcs.get((species,lA,aA))\n\t        mhc_b=seq_tools.mhcs.get((species,lB,aB))\n\t        if (mhc_a is None) or (mhc_b is None):\n\t            raise ValueError(f'Cannot find MHC {a}. Please check format.')\n\t    else:\n\t        cl='I'\n\t        lA,aA=la.split('*')\n", "        mhc_a=seq_tools.mhcs.get((species,lA,aA))\n\t        mhc_b=None\n\t        if (mhc_a is None):\n\t            raise ValueError(f'Cannot find MHC {a}. Please check format.')\n\t    return mhc_a,mhc_b,cl\n\tdef map_one_mhc_seq(s):\n\t    if '/' in s:\n\t        sA,sB=s.split('/')\n\t        cl='II'\n\t        try:\n", "            mhc_a=seq_tools.mhc_from_seq(sA)\n\t        except Exception:\n\t            raise ValueError(f'Cannot align alpha-chain MHC sequence {sA}.')\n\t        try:\n\t            mhc_b=seq_tools.mhc_from_seq(sB)\n\t        except Exception:\n\t            raise ValueError(f'Cannot align beta-chain MHC sequence {sB}.')        \n\t    else:\n\t        cl='I'\n\t        try:\n", "            mhc_a=seq_tools.mhc_from_seq(s)\n\t        except Exception:\n\t            raise ValueError(f'Cannot align MHC sequence {s}.')\n\t        mhc_b=None\n\t    return mhc_a,mhc_b,cl\n\tdef prepare_mhc_objects(df):\n\t    if 'MHC sequence' in df:\n\t        print('Aligning MHC sequences.')\n\t        f,k=map_one_mhc_seq,'MHC sequence'\n\t    elif 'MHC allele' in df:\n", "        print('Retrieving MHC objects from alleles.')\n\t        f,k=map_one_mhc_allele,'MHC allele'  \n\t    else:\n\t        raise ValueError('Cannot find columns \"MHC allele\" or \"MHC sequence\" in input data.')\n\t    df[['mhc_a','mhc_b','class']]=df[k].map(f).tolist()\n\tdef preprocess_df(df,mhc_as_obj=False,use_seqnnf=False):\n\t    '''\n\t    takes a df with columns \"pep\", \"MHC allele\" or \"MHC sequence\";\n\t    adds pmhc_id if not present;\n\t    adds MHC NUMSEQ objects in columns mhc_a and mhc_b (skip if mhc_as_obj=True);\n", "    runs seqnn (for cl II will use seqnn-f if use_seqnnf=True)\n\t    '''\n\t    df=df.copy()\n\t    if 'pmhc_id' not in df.columns: #assign ids\n\t        df['pmhc_id']=df.index.copy()\n\t    if not mhc_as_obj:\n\t        prepare_mhc_objects(df)\n\t    else:\n\t        print('MHC objects from columns mhc_a and mhc_b will be used.')\n\t    df=run_seqnn(df,use_seqnnf=use_seqnnf)\n", "    return df\n\tdef make_inputs(df,params={},date_cutoff=None,print_stats=False):\n\t    '''\n\t    takes df with fields: class, pep (str for pep seq), mhc_a (mhc_b) (NUMSEQ objects), (pdb_id for true structure);\n\t    optionally params and date_cutoff (for templates), print_stats;\n\t    params for each of two classes should have entries: \n\t    templates_per_register, mhc_cutoff, score_cutoff, kd_threshold, use_mhc_msa, use_paired_msa, tile_registers;\n\t    returns a list of AF inputs; if print_stats, prints total runs, reg/target and runs/target histograms for cl 1 and 2\n\t    '''    \n\t    if not params:\n", "        params=tfold.config.af_input_params                 \n\t    #prefilter registers by predicted Kd\n\t    df['tails_prefiltered']=df.apply(lambda x: _prefilter_registers(x['seqnn_logkds_all'],params[x['class']]['kd_threshold']),axis=1)\n\t    #assign templates        \n\t    df['templates']=df.apply(lambda x: template_tools.assign_templates(\n\t                                                x['class'],x['pep'],pep_tails=x['tails_prefiltered'],\n\t                                                mhc_A=x['mhc_a'].data,mhc_B=_mhcb(x),\n\t                                                templates_per_register=params[x['class']]['templates_per_register'],\n\t                                                pep_gap_penalty=params[x['class']]['pep_gap_penalty'],\n\t                                                mhc_cutoff=params[x['class']]['mhc_cutoff'],\n", "                                                shuffle=params[x['class']]['shuffle'],\n\t                                                pdbs_exclude=_exclude_pdbs(x),date_cutoff=date_cutoff,\n\t                                                score_cutoff=params[x['class']]['score_cutoff'],\n\t                                                pep_score_cutoff=params[x['class']].get('pep_score_cutoff'))\n\t                              ,axis=1)       \n\t    #add pmhc_id if not present (used by AF for naming output files)\n\t    if 'pmhc_id' not in df:\n\t        df['pmhc_id']=df.index\n\t    #make AF inputs (incl. split templates)                                                                    \n\t    inputs_dicts=df.apply(lambda x:_make_af_inputs_for_one_entry(x,params[x['class']]['use_mhc_msa'],\n", "                                                                 params[x['class']]['use_paired_msa'],                                                                                                      params[x['class']]['tile_registers']),axis=1)    \n\t    inputs=[]\n\t    reg_counts={'I':[],'II':[]}\n\t    run_counts={'I':[],'II':[]}\n\t    for x in inputs_dicts.values:        \n\t        inputs+=x['inputs']\n\t        reg_counts[x['class']].append(len(x['tails']))\n\t        run_counts[x['class']].append(len(x['inputs']))    \n\t    if print_stats:\n\t        for cl in ['I','II']:\n", "            if reg_counts[cl]:\n\t                queries, runs=np.sum(df['class']==cl), sum(run_counts[cl])\n\t                registers=sum(reg_counts[cl])\n\t                print(f'class {cl}:')\n\t                print('pmhcs: {:3d}; runs: {:4d}, runs per pmhc: av {:3.1f}, max {:2d}; registers per pmhc: av {:3.1f}, max {:2d}'.format(\n\t                       queries,runs,runs/queries,max(run_counts[cl]),registers/queries,max(reg_counts[cl])))                 \n\t    return inputs\n"]}
{"filename": "tfold/utils/__init__.py", "chunked_list": []}
{"filename": "tfold/utils/utils.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\timport os\n\timport numpy as np\n\timport pandas as pd\n\timport csv\n\timport stat\n\t#from matplotlib import pyplot as plt\n\tdef print_hist(a,order=0,use_template=True,max_n=None):\n\t    '''\n", "    print histogram for list/array a; \n\t    order==0 (default): sort by alphabet;    \n\t    order>0: sort by counts, increasing;\n\t    order<0: sort by counts, decreasing\n\t    '''\n\t    a=np.array(a)\n\t    a_u=np.unique(a)    \n\t    a_n=np.array([np.sum(a==x) for x in a_u])\n\t    if order==0:\n\t        ind=np.argsort(a_u)\n", "    else:\n\t        ind=np.argsort(order*a_n)\n\t    max_len_a=max([len(str(x)) for x in a_u])\n\t    max_len_n=max([len(str(x)) for x in a_n])\n\t    if max_n:\n\t        ind=ind[:max_n]\n\t    if use_template:\n\t        template='{:'+str(max_len_a)+'s} {:'+str(max_len_n)+'n}'\n\t        for i in ind:\n\t            print(template.format(str(a_u[i]),a_n[i]))\n", "    else:\n\t        for i in ind:\n\t            print(a_u[i],a_n[i])\n\tdef cluster(a,distance,threshold=0):\n\t    '''\n\t    cluster elements in list 'a' according to the condition distance(x,y)<=threshold;\n\t    returns a list of lists of elements in clusters;\n\t    the dumbest alg possible\n\t    '''\n\t    clusters=[]\n", "    for x in a:\n\t        c_linked=[]\n\t        for i,c in enumerate(clusters):\n\t            #check if element linked to cluster\n\t            for y in c:\n\t                if distance(x,y)<=threshold: \n\t                    c_linked.append(i)\n\t                    break    \n\t        #merge clusters in c_links + new element into a new cluster    \n\t        merged=[el for i in c_linked for el in clusters[i]]\n", "        merged.append(x)    \n\t        #update clusters    \n\t        clusters=[c for i,c in enumerate(clusters) if i not in c_linked]\n\t        clusters.append(merged)\n\t    return clusters\n\tdef split_jobs(n,m):\n\t    '''\n\t    split n jobs over <=m actors;        \n\t    first minimize max number of jobs of one actor, then give p jobs to everybody and <=p to the last one;    \n\t    returns a list of lists of sizes n1,..,nk, k<=m, with indices of jobs assigned to actors (indices randomly permuted)    \n", "    '''    \n\t    #p is max number of jobs of one actor\n\t    p=n//m+int(n%m!=0)\n\t    ind=np.random.permutation(n)\n\t    output=[]\n\t    n_assigned=0\n\t    i=0\n\t    while n_assigned<n:\n\t        output.append(ind[i*p:(i+1)*p])\n\t        i+=1\n", "        n_assigned+=p\n\t    return output    \n\tdef make_task(inputs,n_tasks,\n\t              sh_path,python_path,input_dir,input_dir_server=None,\n\t              qos='short',max_run_time=720,slow_nodes=None,gpu=False,exclusive=False,local=False,argstring='',\n\t              cd=None):\n\t    '''\n\t    takes a list of inputs; each input is a list of arguments to be passed to the processing algorithm;\n\t    (can be of len 1 if only one argument);\n\t    takes n_tasks -- number of separate tasks to cut the job into; \n", "    takes sh_path for the sh script, python_path for the processing alg;\n\t    takes input_dir; in input_dir/inputs will put inputs as tsv files, and will use input_dir/logs to pipe outputs and errors;\n\t    optionally takes input_dir_server (default input_dir) as path to input_dir as seen by the processing server;\n\t    takes slurm qos (default 'short');\n\t    takes max_run_time in minutes (default 720);\n\t    use slow_nodes to give a list of node numbers (e.g. [39,60]) to exclude;\n\t    set flag gpu to use GPUs;\n\t    if local (default False), makes separate jobs without slurm commands;\n\t    if argstring is given, will be added as argument after the input file name;\n\t    if cd (a path) is given, script will have cd $cd (e.g. to a dir that contains a module);\n", "    creates input_%i.tsv files and .sh script    \n\t    '''        \n\t    input_dir_server       =input_dir_server or input_dir\n\t    input_dir_proper       =input_dir+'/inputs'\n\t    input_dir_server_proper=input_dir_server+'/inputs'\n\t    log_dir                =input_dir+'/logs'\n\t    log_dir_server         =input_dir_server+'/logs'\n\t    #make dirs\n\t    for d in [input_dir_proper,log_dir]:\n\t        os.makedirs(d,exist_ok=True)    \n", "    #make input files\n\t    indices=split_jobs(len(inputs),n_tasks)\n\t    n_tasks=len(indices)\n\t    for i,job in enumerate(indices):\n\t        c_inputs=[inputs[j] for j in job]        \n\t        with open(input_dir_proper+'/input_'+str(i)+'.tsv','w',newline='') as f:\n\t            f_csv=csv.writer(f,delimiter='\\t')\n\t            for line in c_inputs:\n\t                f_csv.writerow(line)            \n\t    #make .sh        \n", "    if not local:\n\t        lines=[]\n\t        lines.append('#!/bin/bash')\n\t        lines.append('')        \n\t        for x in slow_nodes:\n\t            lines.append('#SBATCH --exclude=node{}'.format(x))     #exclude slow nodes        \n\t        lines.append(f'#SBATCH --array=0-{n_tasks-1}')             #run an array of n_tasks tasks\n\t        lines.append(f'#SBATCH --output={log_dir_server}/output_%a.txt')  #here %a will evaluate to array task id\n\t        lines.append(f'#SBATCH --error={log_dir_server}/error_%a.txt')\n\t        lines.append(f'#SBATCH --ntasks=1')                        #each array element is one task\n", "        if exclusive:\n\t            lines.append(f'#SBATCH --exclusive')                   #request exclusive use of node, e.g. for hhblits\n\t        if gpu:\n\t            lines.append(f'#SBATCH --gpus=1')                      #one gpu per task will use one core\n\t        elif not exclusive:\n\t            lines.append(f'#SBATCH --cpus-per-task=1')             #one cpu per task\n\t        lines.append(f'#SBATCH --qos={qos}')  \n\t        lines.append(f'#SBATCH --time={max_run_time}')             #maximal run time in minutes, same for each array task\n\t        lines.append('')\n\t        if cd:\n", "            lines.append(f'cd {cd}')\n\t        lines.append(f'input_file={input_dir_server_proper}/input_$SLURM_ARRAY_TASK_ID.tsv')        \n\t        lines.append(f'srun python {python_path} $input_file {argstring}')\n\t    else:        \n\t        lines=[]\n\t        lines.append('#!/bin/bash')\n\t        lines.append('')         \n\t        if cd:\n\t            lines.append(f'cd {cd}')\n\t        for i in range(n_tasks):\n", "            lines.append(f'input_file{i}={input_dir_server_proper}/input_{i}.tsv')\n\t            lines.append(f'python {python_path} $input_file{i} {argstring} > {log_dir}/output_{i}.txt 2> {log_dir}/error_{i}.txt')          \n\t    if not sh_path.startswith(('/','./')):\n\t        sh_path='./'+sh_path\n\t    with open(sh_path,'w') as f:\n\t        f.writelines('\\n'.join(lines))\n\t    os.chmod(sh_path, stat.S_IRWXU | stat.S_IXGRP | stat.S_IXOTH)      \n\t    return n_tasks\n\t#ROC and plotting\n\tdef ROC(labels,predictions): \n", "    '''\n\t    Compute data for a ROC.\n\t    Takes np.arrays for labels (0s for neg, 1s for pos) and classifier scores (bigger=>more pos, any range),\n\t    returns [fpr, tpr], AUC, where \n\t    fpr=array[(neg | score >= thr)/(all neg) for possible thr],\n\t    tpr=array[(pos | score >= thr)/(all pos) for possible thr], \n\t    '''\n\t    s_p=predictions[np.nonzero(labels==1)[0]] #predictions for true positives\n\t    s_n=predictions[np.nonzero(labels==0)[0]] #predictions for true negatives\n\t    n_p=len(s_p)\n", "    n_n=len(s_n) \n\t    TP=[0]\n\t    FP=[0]\n\t    auc=0\n\t    pts=np.sort(np.unique(predictions))[::-1]    \n\t    for x in pts:\n\t        TP.append(TP[-1]+np.sum(s_p==x))\n\t        FP.append(FP[-1]+np.sum(s_n==x))\n\t        auc+=(TP[-1]+TP[-2])*(FP[-1]-FP[-2])/2\n\t    TP=np.array(TP)\n", "    FP=np.array(FP)\n\t    return [FP/n_n,TP/n_p],auc/(n_p*n_n)\n\tcolors=['k','b','g','y','r','c','m','k','k','k','k','k']\n\tdef plot_ROC(scores,titles):\n\t    '''\n\t    Takes lists of scores (np.arrays) [[labels0,predictions0],..] and titles [l0, l1..].\n\t    Plots the ROC curves, AUCs,\n\t    and also the number of positive examples for each title.\n\t    '''\n\t    labels_auc=[]\n", "    for i,s in enumerate(scores):\n\t        n_pos=int(np.sum(s[0]))\n\t        if n_pos>0:\n\t            roc_i,auc_i=ROC(s[0],s[1])\n\t            labels_auc.append('{:6s}({:5d}): {:5.3f}'.format(titles[i],n_pos,auc_i))\n\t            plt.plot(roc_i[0],roc_i[1],color=colors[i])\n\t        else:\n\t            labels_auc.append('{:6s}({:5d})'.format(titles[i],0))\n\t            plt.plot([0],[0],color=colors[i])\n\t    plt.plot([0,1],[0,1],linestyle='--',color='black',label='_nolegend_')\n", "    plt.xlim(0,1)\n\t    plt.ylim(0,1)\n\t    plt.grid()\n\t    plt.legend(labels_auc) \n\t#stats\n\tdef agresti_coull(n,N):\n\t    '''\n\t    Agresti-Coull binomial 95% confidence interval (z=2);\n\t    returns edge estimates\n\t    ''' \n", "    n1,N1=n+2,N+4\n\t    p1=n1/N1\n\t    sigma=(p1*(1-p1)/N1)**0.5\n\t    pm,pp=p1-2*sigma,p1+2*sigma\n\t    return max(0.,pm),min(1.,pp)\n\tdef bootstrap(df,func_d,N=1000,plot=False):\n\t    '''\n\t    takes a df and a dict of functions, optionally N and whether to plot;\n\t    returns a df with bootstrapped distributions of values of the functions\n\t    '''\n", "    d={k:[] for k in func_d}\n\t    for i in range(N):\n\t        df1=df.sample(frac=1.,replace=True)\n\t        for k in func_d:            \n\t            d[k].append(func_d[k](df1))\n\t    d=pd.DataFrame(d)\n\t    if plot:\n\t        n=len(d.columns)\n\t        plt.figure(figsize=(5*n,5))\n\t        for i,c in enumerate(d.columns):\n", "            plt.subplot(1,n,i+1)\n\t            plt.hist(d[c].values,histtype='step',bins=100)\n\t            plt.title(c)\n\t        plt.show()\n\t    return d\n\tdef get_CI(df): \n\t    '''get means and CIs for df columns (returns dict of tuples)'''\n\t    d={}\n\t    for k in df.columns:\n\t        d[k]=(df[k].mean(),df[k].quantile(0.025),df[k].quantile(0.975))\n", "    return d\n\tdef proportions_p_value(n1,N1,n2,N2,n_repeats=10000):\n\t    '''\n\t    significance of difference between proportions via simulation\n\t    (idea from Coursera; should be used when numbers are small so that the normal approx doesn't work)\n\t    fix total N and total failures, shuffle, see distribution of f1-f2;\n\t    takes numbers of successes and totals for two conditions, returns two-sided p-value\n\t    '''\n\t    n=n1+n2\n\t    N=N1+N2\n", "    x=np.concatenate([np.ones(n),np.zeros(N-n)])\n\t    deltas=[]\n\t    for i in range(n_repeats):\n\t        x=np.random.permutation(x)\n\t        n1_c=np.sum(x[:N1])\n\t        n2_c=n-n1_c\n\t        deltas.append(n1_c/N1-n2_c/N2)\n\t    p=np.sum(np.abs(deltas)>=abs(n1/N1-n2/N2))/len(deltas)\n\t    return p\n"]}
{"filename": "tfold/utils/netmhc_tools.py", "chunked_list": ["import os\n\timport re\n\tcwd=os.getcwd()\n\timport stat\n\tfrom shutil import rmtree\n\timport pandas as pd\n\timport tfold.config\n\tnetmhcpanI_dir=tfold.config.netmhcpanI_dir\n\tnetmhcpanII_dir=tfold.config.netmhcpanII_dir\n\timport tfold.utils.seq_tools as seq_tools\n", "seq_tools.load_mhcs()\n\ts_ii_query='-xls -BA -xlsfile'\n\t#to use old version of netmhc ii\n\tuse_old_netmhc_II_flag=False\n\tdef use_old_netmhc_II():\n\t    '''use version 3.2 for class II predictions'''\n\t    global netmhcpanII_dir,use_old_netmhc_II_flag,alleles_II,s_ii_query\n\t    netmhcpanII_dir=tfold.config.netmhcpanII_old_dir\n\t    use_old_netmhc_II_flag=True\n\t    with open(netmhcpanII_dir+'/data/allele.list') as f: #change allele list\n", "        alleles_II=[line for line in f.read().split('\\n') if line]  \n\t    s_ii_query='>'\n\talleles_I=[]\n\twith open(netmhcpanI_dir+'/data/allelenames') as f:\n\t    for line in f.read().split('\\n'):\n\t        if line:\n\t            alleles_I.append(line.split()[0])      \n\twith open(netmhcpanII_dir+'/data/allele.list') as f:\n\t    alleles_II=[line for line in f.read().split('\\n') if line]  \n\tdef convert_mhc_name_I(x):\n", "    prefix_dict={'9913':'BoLA','9615':'DLA','9796':'Eqca','9593':'Gogo','9598':'Patr','9823':'SLA',}\n\t    if x[0]=='9606':\n\t        x=f'HLA-{x[1]}{x[2]}'\n\t    elif x[0] in prefix_dict:                 \n\t        x=prefix_dict[x[0]]+'-'+x[1]+x[2].replace(\":\",\"\")\n\t    elif x[0]=='9544':\n\t        x=f'Mamu-{x[1]}:{x[2].replace(\":\",\"\")}'\n\t    elif x[0]=='10090':\n\t        x=f'H-2-{x[1]}{x[2]}'    \n\t    if x in alleles_I:\n", "        return x\n\t    else:\n\t        return ''\n\tdef convert_mhc_name_II(xa,xb):\n\t    y=None\n\t    if xa[0]!=xb[0]:\n\t        raise ValueError('different species in two chains')\n\t    if xa[0]=='9606':\n\t        if xb[1].startswith('DRB'):\n\t            y=f'{xb[1]}_{xb[2].replace(\":\",\"\")}'\n", "        else:\n\t            y=f'HLA-{xa[1]}{xa[2].replace(\":\",\"\")}-{xb[1]}{xb[2].replace(\":\",\"\")}'\n\t    elif xa[0]=='10090':\n\t        if xa[1][:-1]==xb[1][:-1] and xa[2]==xb[2]: #same locus and allele letter\n\t            y=f'H-2-{xa[1][:-1]}{xa[2]}'    \n\t    if y in alleles_II:\n\t        return y\n\t    else:\n\t        return ''    \n\tdef _make_pep_files(df_group,input_dir):    \n", "    with open(input_dir+f'/{df_group.name}.pep','w') as f:\n\t        f.write('\\n'.join(df_group['pep'].values))      \n\tdef _make_hla_fasta(x,name,target_dir,chain='A'):\n\t    with open(f'{target_dir}/{name}_{chain}.fasta','w') as f:\n\t        f.write('>HLA\\n'+seq_tools.mhcs[x].seq())\n\tdef _make_query_I_allele(name,allele,tmp_dir):    \n\t    input_fname=tmp_dir+f'/input/{name}.pep'\n\t    output_fname=tmp_dir+f'/output/{name}.out'\n\t    return f'{netmhcpanI_dir}/netMHCpan -p {input_fname} -xls -BA -a {allele} -xlsfile {output_fname}'\n\tdef _make_query_I_seq(name,tmp_dir):    \n", "    input_fname=tmp_dir+f'/input/{name}.pep'\n\t    output_fname=tmp_dir+f'/output/{name}.out'\n\t    hla_fasta=tmp_dir+f'/hla_fasta/{name}_A.fasta'    \n\t    return f'{netmhcpanI_dir}/netMHCpan -p {input_fname} -xls -BA -hlaseq {hla_fasta} -xlsfile {output_fname}'\n\tdef _make_query_II_allele(name,allele,tmp_dir):    \n\t    input_fname=tmp_dir+f'/input/{name}.pep'\n\t    output_fname=tmp_dir+f'/output/{name}.out'\n\t    return f'{netmhcpanII_dir}/netMHCIIpan -f {input_fname} -inptype 1 -a {allele} {s_ii_query} {output_fname}'\n\tdef _make_query_II_seq(name,tmp_dir):    \n\t    input_fname=tmp_dir+f'/input/{name}.pep'\n", "    output_fname=tmp_dir+f'/output/{name}.out'\n\t    A_fasta=tmp_dir+f'/hla_fasta/{name}_A.fasta'    \n\t    B_fasta=tmp_dir+f'/hla_fasta/{name}_B.fasta'    \n\t    return f'{netmhcpanII_dir}/netMHCIIpan -f {input_fname} -inptype 1 -hlaseqA {A_fasta} -hlaseq {B_fasta}'\\\n\t           f'{s_ii_query} {output_fname}'\n\tclass NETMHC():\n\t    def __init__(self,tmp_dir):\n\t        self.tmp_dir=tmp_dir                            \n\t    def make_query(self,df,cl,use_mhc_seq=False):\n\t        self.use_mhc_seq=use_mhc_seq                \n", "        if True:\n\t            try:\n\t                rmtree(self.tmp_dir+'/input')\n\t            except FileNotFoundError:\n\t                pass\n\t            try:\n\t                rmtree(self.tmp_dir+'/output')  \n\t            except FileNotFoundError:\n\t                pass\n\t            try:\n", "                rmtree(self.tmp_dir+'/hla_fasta')\n\t            except FileNotFoundError:\n\t                pass\n\t            os.makedirs(self.tmp_dir+'/input')\n\t            os.mkdir(self.tmp_dir+'/output')\n\t            os.mkdir(self.tmp_dir+'/hla_fasta')\n\t        self.df=df.copy()\n\t        self.cl=cl                \n\t        ca='mhc_a' in self.df.columns\n\t        cb='mhc_b' in self.df.columns\n", "        if (self.cl=='I' and ca) or (self.cl=='II' and ca and cb):\n\t            pass\n\t        else:\n\t            raise ValueError('df columns must include \"mhc_a\" for cl I, \"mhc_a\" and \"mhc_b\" for cl II')                 \n\t        assert 'pep' in self.df.columns, 'df must include column \"pep\"'\n\t        #check that no duplicates are present: \n\t        #duplicates create unnecessary extra work and cause confusion in merging results to dataframe, hence disallow\n\t        if self.cl=='I':\n\t            _n_u=len(self.df[['pep','mhc_a']].apply(tuple,axis=1).unique())\n\t        else:\n", "            _n_u=len(self.df[['pep','mhc_a','mhc_b']].apply(tuple,axis=1).unique())\n\t        assert _n_u==len(self.df), 'please deduplicate df!'                    \n\t        #rename mhcs, add mhc indices\n\t        self._rename_mhc()\n\t        #make files with pep lists\n\t        self.df.groupby('_mhc_id').apply(lambda x: _make_pep_files(x,self.tmp_dir+'/input'))\n\t        #split into allele known, allele not known\n\t        if not self.use_mhc_seq:\n\t            df_allele=self.df[self.df['_mhc']!='']\n\t            df_seq   =self.df[self.df['_mhc']=='']           \n", "            print('pmhcs with alleles known to netMHC:',len(df_allele))\n\t            print('pmhcs with alleles not known to netMHC:',len(df_seq))\n\t            if self.cl=='I':\n\t                print('alleles not known:')\n\t                print(df_seq['mhc_a'].unique())\n\t            else:             \n\t                print('alleles not known:')\n\t                print(df_seq[['mhc_a','mhc_b']].apply(tuple,axis=1).unique())\n\t        else:\n\t            df_allele=self.df.head(0)\n", "            df_seq=self.df            \n\t        #make HLA fastas  \n\t        if self.use_mhc_seq==False:\n\t            if self.cl=='I':            \n\t                for x in df_seq[['mhc_a','_mhc_id']].apply(tuple,axis=1).unique():\n\t                    _make_hla_fasta(*x,self.tmp_dir+'/hla_fasta')\n\t            else:\n\t                for x in df_seq[['mhc_a','_mhc_id']].apply(tuple,axis=1).unique():\n\t                    _make_hla_fasta(*x,self.tmp_dir+'/hla_fasta',chain='A')\n\t                for x in df_seq[['mhc_b','_mhc_id']].apply(tuple,axis=1).unique():\n", "                    _make_hla_fasta(*x,self.tmp_dir+'/hla_fasta',chain='B')\n\t        else:\n\t            if self.cl=='I':            \n\t                for x in df_seq[['mhc_a','_mhc_id']].apply(tuple,axis=1).unique():\n\t                    with open(self.tmp_dir+f'/hla_fasta/{x[1]}_A.fasta','w') as f:\n\t                        f.write('>mhc\\n'+x[0])\n\t            else:\n\t                for x in df_seq[['mhc_a','_mhc_id']].apply(tuple,axis=1).unique():\n\t                    with open(self.tmp_dir+f'/hla_fasta/{x[1]}_A.fasta','w') as f:\n\t                        f.write('>mhc\\n'+x[0])\n", "                for x in df_seq[['mhc_b','_mhc_id']].apply(tuple,axis=1).unique():\n\t                    with open(self.tmp_dir+f'/hla_fasta/{x[1]}_B.fasta','w') as f:\n\t                        f.write('>mhc\\n'+x[0])            \n\t        #make queries\n\t        queries=[]\n\t        if self.cl=='I':\n\t            for x in df_allele[['_mhc_id','_mhc']].apply(tuple,axis=1).unique():\n\t                queries.append(_make_query_I_allele(*x,self.tmp_dir))\n\t            for x in df_seq['_mhc_id'].unique():\n\t                queries.append(_make_query_I_seq(x,self.tmp_dir))\n", "        else:\n\t            for x in df_allele[['_mhc_id','_mhc']].apply(tuple,axis=1).unique():\n\t                queries.append(_make_query_II_allele(*x,self.tmp_dir))\n\t            for x in df_seq['_mhc_id'].unique():\n\t                queries.append(_make_query_II_seq(x,self.tmp_dir))\n\t        sh_path=cwd+'/scripts/run_netmhc.sh'\n\t        with open(sh_path,'w') as f:\n\t            f.write('\\n'.join(queries))\n\t        os.chmod(sh_path, stat.S_IRWXU | stat.S_IXGRP | stat.S_IXOTH)   \n\t    def _rename_mhc(self):        \n", "        if self.cl=='I':\n\t            assert 'mhc_a' in self.df.columns, 'df must include column \"mhc_a\"'\n\t            if not self.use_mhc_seq:\n\t                self.df['_mhc']=self.df['mhc_a'].map(convert_mhc_name_I)\n\t            else:\n\t                self.df['_mhc']=self.df['mhc_a']\n\t            mhc_list=list(self.df['mhc_a'].unique())\n\t            self.df['_mhc_id']=self.df['mhc_a'].map(mhc_list.index)\n\t        else:    \n\t            assert ('mhc_a' in self.df.columns) and ('mhc_b' in self.df.columns), 'df must include columns \"mhc_a\", \"mhc_b\"'\n", "            if not self.use_mhc_seq:\n\t                self.df['_mhc']=self.df.apply(lambda x: convert_mhc_name_II(x['mhc_a'],x['mhc_b']),axis=1)\n\t            else:\n\t                self.df['_mhc']=self.df['mhc_a']+self.df['mhc_b']\n\t            mhc_pairs=self.df[['mhc_a','mhc_b']].apply(tuple,axis=1)\n\t            mhc_list=list(mhc_pairs.unique())\n\t            self.df['_mhc_id']=mhc_pairs.map(mhc_list.index)            \n\t    def parse(self,include_all_scores=False):\n\t        '''\n\t        if include_all_scores, outputs Kd, BA-rank, EL-score, EL-rank; otherwise only Kd\n", "        '''\n\t        #bascore=1-log(kd)/log(50000)\n\t        if self.cl=='I':\n\t            ipep,icore,ikd,ibarank,ielscore,ielrank=1,3,7,8,5,6 #5:elscore,6:elrank,7:bascore,8:barank\n\t        else:\n\t            if use_old_netmhc_II_flag:\n\t                ipep,icore,ikd,ibarank,ielscore,ielrank=2,5,8,9,8,9 #no elscore/elrank!\n\t            else:\n\t                ipep,icore,ikd,ibarank,ielscore,ielrank=1,4,8,9,5,6 #5:elscore,6:elrank,7:bascore,8:kd,9:barank\n\t        output_list=os.listdir(self.tmp_dir+'/output')\n", "        outputs=[]\n\t        for fname in output_list:\n\t            mhc_id=int(fname.split('.')[0])\n\t            with open(self.tmp_dir+'/output/'+fname) as f:\n\t                lines=f.read().split('\\n')\n\t            if use_old_netmhc_II_flag: #collect lines between dash separators\n\t                n_dash=0\n\t                lines1=[]\n\t                for l in lines:\n\t                    if l.startswith('-'*10):\n", "                        if n_dash<2:                            \n\t                            n_dash+=1\n\t                        else:\n\t                            break\n\t                    elif n_dash==2:\n\t                        l=re.sub('^[ ]+','',l)\n\t                        l=re.sub('[ ]+','\\t',l)\n\t                        lines1.append(l)\n\t                lines=lines1\n\t            else:\n", "                lines=lines[2:]\n\t            lines=[x.split('\\t') for x in lines if x]    \n\t            outputs+=[[x[ipep],mhc_id,x[icore],x[ikd],x[ibarank],x[ielscore],x[ielrank]] for x in lines] #pep, mhc_id, core, kd\n\t        outputs=pd.DataFrame(outputs,columns=['pep','_mhc_id','netmhc_core','netmhc_kd','netmhc_barank','netmhc_elscore','netmhc_elrank'])\n\t        outputs['netmhc_kd']=pd.to_numeric(outputs['netmhc_kd'])\n\t        outputs['netmhc_barank']=pd.to_numeric(outputs['netmhc_barank'],errors='coerce')\n\t        outputs['netmhc_elscore']=pd.to_numeric(outputs['netmhc_elscore'],errors='coerce')\n\t        outputs['netmhc_elrank']=pd.to_numeric(outputs['netmhc_elrank'],errors='coerce')\n\t        if self.cl=='I':\n\t            outputs['netmhc_kd']=50000**(1-outputs['netmhc_kd'])\n", "        print(f'pmhcs expected: {len(self.df)}; loaded: {len(outputs)}')\n\t        self.df_output=self.df.copy()\n\t        self.df_output=self.df_output.merge(outputs,on=['pep','_mhc_id'])\n\t        self.df_output=self.df_output.drop(['_mhc','_mhc_id'],axis=1)        \n\t        if not include_all_scores:\n\t            self.df_output=self.df_output.drop(['netmhc_barank','netmhc_elscore','netmhc_elrank'],axis=1)\n\t        return self.df_output\n"]}
{"filename": "tfold/utils/seq_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2019-2022\n\timport os\n\t#import warnings\n\timport numpy as np\n\timport json\n\timport pickle\n\timport pandas as pd\n\timport time\n\timport re\n", "from tfold import config\n\tfrom tfold.utils import utils\n\tdata_dir=config.seq_tools_data_dir #path to data\n\ttmp_dir=config.seq_tools_tmp_dir   #path to tmp dir to be used in BLAST searches\n\tif not os.path.exists(tmp_dir):\n\t    os.mkdir(tmp_dir)\n\t#in the future: do data loading with pkgutil\n\t#import pkgutil\n\t#data = pkgutil.get_data(__name__, \"templates/temp_file\")\n\t#use os.path.dirname(os.path.realpath(__file__))?\n", "from Bio.Blast.Applications import NcbiblastpCommandline\n\tfrom Bio.Blast import NCBIXML\n\tfrom Bio import pairwise2\n\t#from Bio.SubsMat import MatrixInfo as matlist\n\t#blosum62=matlist.blosum62\n\tfrom Bio.Align import substitution_matrices\n\tblosum62=substitution_matrices.load('BLOSUM62')\n\taa_set=set(list('ACDEFGHIKLMNPQRSTVWY'))\n\t######################### UTILS #########################\n\tdef _parse_fasta(s):\n", "    proteins={}\n\t    header=None\n\t    for line in s.split('\\n'):\n\t        if line.startswith('>'):\n\t            header=line[1:]\n\t            proteins[header]=''\n\t        elif line and header:\n\t            proteins[header]+=line\n\t    return proteins\n\t######################### NUMSEQ CLASS #########################\n", "def _num_from_args(num,ins,pdbnum):           \n\t    if not (num is None):\n\t        if (ins is None) or (len(ins)==0):\n\t            ins=['']*len(num)\n\t        ins=['{:1s}'.format(x) for x in ins] #default ' '\n\t        pdbnum=['{:4d}{:1s}'.format(*x) for x in zip(num,ins)]\n\t    elif not (pdbnum is None):\n\t        num=[int(x[:-1]) for x in pdbnum]\n\t        ins=[x[-1] for x in pdbnum]\n\t    else:\n", "        raise ValueError('num or pdbnum must be provided')    \n\t    return num,ins,pdbnum\n\t#numseq_dtype\n\t#'pdbnum' formated as pdb(23-26,27), i.e. 'nnnni'\n\t#note: '<U3' for seq to accomodate pdb res codes, incl hetero atoms\n\tnumseq_dtype=[('seq','<U3'),('num',np.int16),('ins','U1'),('pdbnum','U5'),('ss','<U15'),('mutations','<U3')]\n\tclass NUMSEQ():\n\t    '''\n\t    CONTAINS:\n\t    - structured array self.data of dtype numseq_dtype; \n", "    (can add more fields optionally, but then not guaranteed that join_NUMSEQ and other functions will work);    \n\t    - a dict self.info to store e.g. species, locus, allele, etc; \n\t    includes at least 'gaps', which is a structured array of numseq_dtype;\n\t    INIT TAKES: kwd arguments; arg 'info' becomes self.info, other args go into data;\n\t    if arg 'data' given, goes into self.data, otherwise self.data built from args 'seq','num','ins'/'pdbnum'\n\t    and others\n\t    '''\n\t    def __init__(self,**args):         \n\t        if 'data' in args:\n\t            self.data=args['data']\n", "        elif ('seq' and 'num') or ('seq' and 'pdbnum') in args:\n\t            args['seq']=list(args['seq'])\n\t            args['num'],args['ins'],args['pdbnum']=_num_from_args(args.get('num'),args.get('ins'),args.get('pdbnum'))\n\t            args.setdefault('ss','')\n\t            if type(args['ss'])==str:\n\t                args['ss']=[args['ss']]*len(args['seq'])  \n\t            else:\n\t                pass #assume args['ss'] is a list            \n\t            args.setdefault('mutations',['']*len(args['seq']))            \n\t            l=len(args['seq'])\n", "            data_list_extra=[]\n\t            dtypes_list_extra=[]\n\t            numseq_dtype_names=[x[0] for x in numseq_dtype]\n\t            for k,v in args.items(): #check if fields other than those in numseq_dtype or 'info' are provided\n\t                if (k!='info') and (k not in numseq_dtype_names):\n\t                    v=np.array(v)\n\t                    assert len(v)==l                    \n\t                    data_list.append(v)\n\t                    dtypes_list.append((k,v.dtype))\n\t            data_list=[args[k] for k in numseq_dtype_names]+data_list_extra\n", "            dtypes_list=numseq_dtype+dtypes_list_extra\n\t            self.data=np.array(list(zip(*data_list)),dtype=dtypes_list)                    \n\t        else:\n\t            raise ValueError('provide data or seq and numbering')\n\t        self.info=args.get('info') or dict()     \n\t        self.info.setdefault('gaps',np.array([],dtype=numseq_dtype))        \n\t    def seq(self,hetero=False):\n\t        '''\n\t        return the sequence as a string;\n\t        if hetero (default False), include 3-letter codes for hetero atoms \n", "        as e.g. GILG(ABA)VFTL or GILG(aba)VFTL if gap\n\t        '''\n\t        if not hetero:\n\t            return ''.join(self.data['seq'])  \n\t        seq=''\n\t        for x in self.data:\n\t            if x['seq']=='X':\n\t                seq+='('+self.info['hetero_res'][x['pdbnum']]+')'\n\t            elif x['seq']=='x':\n\t                seq+='('+self.info['hetero_res'][x['pdbnum']].lower()+')'\n", "            else:\n\t                seq+=x['seq']\n\t        return seq\n\t    def get_fragment(self,num_l,num_r,complement=False):\n\t        '''\n\t        complement==False (default): returns structured array for num_l<=num<=num_r;\n\t        complement==True: returns structured array for complement of the above\n\t        '''                \n\t        ind=(num_l<=self.data['num'])*(self.data['num']<=num_r)\n\t        if not complement:\n", "            data1=self.data[ind]\n\t        else:\n\t            data1=self.data[~ind]\n\t        return NUMSEQ(data=data1,info=self.info.copy()) #need to keep info e.g. for V fragment in TCR grafting\n\t    def get_fragment_by_pdbnum(self,pdbnum_l,pdbnum_r,include_left_end=True,include_right_end=True):\n\t        '''\n\t        returns NUMSEQ obj cut by pdbnum [pdbnum_l:pdbnum_r];\n\t        flags include_left_end, include_right_end determine whether the ends are included\n\t        (default True, True)\n\t        '''                   \n", "        if include_left_end:\n\t            ind1=(self.data['pdbnum']>=pdbnum_l)\n\t        else:\n\t            ind1=(self.data['pdbnum']>pdbnum_l)\n\t        if include_right_end:\n\t            ind2=(self.data['pdbnum']<=pdbnum_r)\n\t        else:\n\t            ind2=(self.data['pdbnum']<pdbnum_r)\n\t        data1=self.data[ind1&ind2]\n\t        return NUMSEQ(data=data1,info=self.info.copy())\n", "    def get_fragment_by_i(self,i_l,i_r):\n\t        '''\n\t        returns NUMSEQ obj cut by python index [i_l:i_r] (end included)\n\t        '''                        \n\t        data1=self.data[i_l:i_r+1]        \n\t        return NUMSEQ(data=data1,info=self.info.copy())\n\t    def get_residues_by_nums(self,nums):\n\t        '''        \n\t        return a np array of residues with res numbers in the array (or list) nums;\n\t        (residues with all insertion codes included)       \n", "        (for missing res, no gap shown; motivation: without ins codes, can miss gaps e.g. res '1A' when res '1' present)\n\t        '''                \n\t        return self.data[np.isin(self.data['num'],nums)]['seq']\n\t    def get_residues_by_pdbnums(self,pdbnums,show_gaps=True):\n\t        '''        \n\t        return a np array of residues with pdbnums in the array (or list) pdbnums;\n\t        if show_gaps (default True), output '-'s for missing pdbnums\n\t        '''\n\t        if show_gaps:\n\t            s=[]\n", "            for x in pdbnums:\n\t                ind=np.nonzero(self.data['pdbnum']==x)[0]\n\t                if len(ind)==0:\n\t                    s.append('-')\n\t                else:                    \n\t                    s+=list(self.data[ind]['seq'])\n\t            s=np.array(s)\n\t        else:\n\t            s=self.data[np.isin(self.data['pdbnum'],pdbnums)]['seq']\n\t        return s\n", "    def mutations(self):\n\t        '''\n\t        returns the list of mutations and gaps in the format 'X|nnnni|Y', sorted by pdbnum\n\t        '''\n\t        pdbnums=[]\n\t        mutations=[]\n\t        for x in self.data[self.data['mutations']!='']:\n\t            pdbnums.append(x['pdbnum'])\n\t            mutations.append('{:1s}|{:5s}|{:1s}'.format(x['mutations'],x['pdbnum'],x['seq']))\n\t        for x in self.info['gaps']:\n", "            pdbnums.append(x['pdbnum'])\n\t            mutations.append('{:1s}|{:5s}|-'.format(x['seq'],x['pdbnum']))\n\t        ind=np.argsort(pdbnums)\n\t        mutations=np.array(mutations)\n\t        mutations=[mutations[i] for i in ind]\n\t        return mutations\n\t    def count_mutations(self):\n\t        '''\n\t        counts mutations, gaps, gaps_left, gaps_right\n\t        '''\n", "        counts={}\n\t        counts['mutations']=np.sum(self.data['mutations']!='')        \n\t        pdbnum_l=self.data['pdbnum'][0]\n\t        pdbnum_r=self.data['pdbnum'][-1]       \n\t        counts['gaps_left']=np.sum(self.info['gaps']['pdbnum']<pdbnum_l)\n\t        counts['gaps_right']=np.sum(self.info['gaps']['pdbnum']>pdbnum_r)\n\t        counts['gaps']=len(self.info['gaps'])\n\t        return counts        \n\t    def mutate(self,mutations,shift=None):\n\t        '''\n", "        takes mutations formated as a list [res|n|newres,...]; newres can be '-' for gap;        \n\t        if shift==None (default), assume 'n' are pdbnums;\n\t        if shift is int, assume 'n' refers to aa seq[n-shift-1];        \n\t        e.g. if n references seq 'GSHS..' in 1-based indexing, shift should be 0 if seq='GSHS...' and 1 if seq='SHS...';        \n\t        (note: when gaps present, safer to use pdbnums!)\n\t        returns a new object with mutations, and an error string;    \n\t        if any of the old residues do not match what is in the mutations, or pdbnums are missing or\n\t        occur multiple times, an error is appended with the sublist of mutations that are bad.\n\t        Error format: 'res|pdbnum|newres|errorcode;...', where errorcode=0 for wrong residue\n\t        and 1 for no pdb_num or multiple pdb_nums. \n", "        A mutation with an error is not implemented, all others are.\n\t        mutations added to output object's data['mutations'] (stores original residues, default '' for non-mutated)\n\t        and info['gaps'] (all columns incl. e.g. 'ss', if present)\n\t        '''\n\t        error=''\n\t        seq1=self.data['seq'].copy()\n\t        mutations1=self.data['mutations'].copy()\n\t        gaps_list=[]\n\t        for m in mutations:\n\t            res0,n,res1=m.split('|')\n", "            if not (shift is None):                \n\t                i0=int(n)-shift-1\n\t                if i0 not in range(len(seq1)):\n\t                    error+=(m+'|1;')\n\t                    continue\n\t            else:             \n\t                i0s=np.nonzero(self.data['pdbnum']==n)[0]\n\t                if len(i0s)!=1:\n\t                    error+=(m+'|1;')\n\t                    continue\n", "                i0=i0s[0]            \n\t            if seq1[i0]!=res0:\n\t                error+=(m+'|0;')\n\t                continue\n\t            if res1=='-':\n\t                gaps_list.append(self.data[i0])\n\t                seq1[i0]='x' #gap symbol for new gaps\n\t            else:\n\t                mutations1[i0]=res0 \n\t                seq1[i0]=res1            \n", "        data1=self.data.copy()\n\t        data1['seq']=seq1\n\t        data1['mutations']=mutations1        \n\t        if gaps_list:\n\t            gaps1=np.concatenate([self.info['gaps'],np.array(gaps_list)])            \n\t            gaps1.sort(order=('num','ins'))\n\t        else:\n\t            gaps1=self.info['gaps']\n\t        info1=self.info.copy()\n\t        info1['gaps']=gaps1\n", "        result=NUMSEQ(data=data1,info=info1)\n\t        if gaps_list:\n\t            result=result.ungap(gaplist=['x'])\n\t        return result, error\n\t    def ungap(self,gaplist=['.','-']):\n\t        '''\n\t        return a new object with gap symbols removed, and all renumbered accordingly;\n\t        gap symbols defined in gaplist (default '.', '-'); info copied;\n\t        info['gaps'] not updated, since gaps do not include previous res information\n\t        '''               \n", "        ind=np.isin(self.data['seq'],gaplist)\n\t        data1=self.data[~ind].copy()        \n\t        return NUMSEQ(data=data1,info=self.info.copy())  \n\t    def ungap_small(self):\n\t        '''assume small letters in seq are gaps; remove them and add to info['gaps'] (but large)'''\n\t        small=list('acdefghiklmnpqrstvwxy')\n\t        ind=np.isin(self.data['seq'],small)\n\t        data1=self.data[~ind].copy()\n\t        gaps=self.data[ind].copy()\n\t        for i in range(len(gaps)):\n", "            gaps[i]['seq']=gaps[i]['seq'].capitalize()\n\t        gaps=np.concatenate((self.info['gaps'],gaps))\n\t        gaps.sort(order=('num','ins'))\n\t        new_obj=NUMSEQ(data=data1,info=self.info.copy())        \n\t        new_obj.info['gaps']=gaps\n\t        return new_obj    \n\t    def repair_gaps(self,which='all',small=False):\n\t        '''\n\t        insert back residues from gaps; (positions determined according to pdbnum);\n\t        arg 'which' defines which gaps to restore; can be 'all' (default), 'left', 'right';\n", "        if small (default False), repaired gaps are in small letters;\n\t        also changes small-letter gaps in the sequence, unless small==True\n\t        '''\n\t        if which not in ['all','left','right']:\n\t            raise ValueError(f'value {which} of \"which\" not recognized;')\n\t        data=self.data.copy()\n\t        #repair small gaps in the sequence        \n\t        if not small:\n\t            seq=self.seq()\n\t            x=re.search('^[a-z]+',seq)\n", "            if x:\n\t                i_left=x.end()\n\t            else:\n\t                i_left=0        \n\t            x=re.search('[a-z]+$',seq)\n\t            if x:\n\t                i_right=x.start()\n\t            else:\n\t                i_right=len(seq)\n\t            for i in range(len(self.data)):\n", "                if (which=='right' and i>=n_right) or (which=='left' and i<n_left) or (which=='all'):\n\t                    data[i]['seq']=data[i]['seq'].upper()\n\t        #repair other gaps        \n\t        gaps=self.info['gaps'].copy()\n\t        if len(gaps)==0:\n\t            return NUMSEQ(data=data,info=self.info.copy()) \n\t        gaps.sort(order=('num','ins')) #just in case                            \n\t        n=len(data)\n\t        fragments=[]  \n\t        gaps_remaining=[]\n", "        for g in gaps:\n\t            #can't order by pdbnum when negative nums are present, and they are\n\t            i0=np.sum((data['num']<g['num'])|((data['num']==g['num'])&(data['ins']<g['ins'])))\n\t            if i0==0:\n\t                if (which=='all') or (which=='left' and len(data)==n) or (which=='right' and len(data)==0):\n\t                    if small:\n\t                        g['seq']=g['seq'].lower()\n\t                    fragments.append(np.array([g]))\n\t                else:\n\t                    gaps_remaining.append(g)\n", "            elif i0==len(data):\n\t                fragments.append(data)\n\t                if which!='left':\n\t                    if small:\n\t                        g['seq']=g['seq'].lower()\n\t                    fragments.append(np.array([g]))\n\t                else:\n\t                    gaps_remaining.append(g)\n\t            else:\n\t                fragments.append(data[:i0])\n", "                if which=='all':\n\t                    if small:\n\t                        g['seq']=g['seq'].lower()\n\t                    fragments.append(np.array([g]))\n\t                else:\n\t                    gaps_remaining.append(g)            \n\t            data=data[i0:]\n\t        fragments.append(data)       \n\t        data=np.concatenate(fragments)\n\t        info=self.info.copy()\n", "        info['gaps']=np.array(gaps_remaining,dtype=numseq_dtype)\n\t        return NUMSEQ(data=data,info=info)  \n\t    def dump(self):\n\t        '''returns {'data':data,'info':info}. For pickling''' \n\t        return {'data':self.data,'info':self.info}\n\t    def copy(self):\n\t        return NUMSEQ(data=self.data.copy(),info=self.info.copy())\n\tdef load_NUMSEQ(data_info):\n\t    '''restore NUMSEQ object from {'data':data,'info':info}. For unpickling'''\n\t    return NUMSEQ(data=data_info['data'],info=data_info['info'])                          \n", "def join_NUMSEQ(records):\n\t    '''\n\t    takes a list/array of NUMSEQ objects, returns the joined NUMSEQ object;\n\t    info from all objects collected, overwritten in the order left to right if keys repeat,\n\t    except info['gaps'], which are joined\n\t    '''            \n\t    data1=np.concatenate([x.data for x in records])        \n\t    gaps1=np.concatenate([x.info['gaps'] for x in records])\n\t    info1={}\n\t    for x in records:\n", "        info1.update(x.info) \n\t    info1['gaps']=gaps1\n\t    return NUMSEQ(data=data1,info=info1)\n\t######################### BLAST AND ALIGNMENT #########################\n\tdef _blast_parse_fasta_record(s):\n\t    '''\n\t    takes fasta record, e.g. 'TCR 9606 B V TRBV18 01', 'MHC 10090 1 A D b', 'B2M 9606';\n\t    returns protein,species,locus,allele, where \n\t    protein is e.g. 'TCR_A/D_V', 'TCR_B_J', 'MHC_2_B', 'MHC_1_A', 'B2M',\n\t    locus and allele are e.g. TRBV18,01 for TCR, D,b for MHC, '','' for B2M\n", "    '''\n\t    line=s.split()\n\t    if line[0]=='B2M':\n\t        protein='B2M'\n\t        species,locus,allele=line[1],'',''\n\t    elif line[0]=='TCR':\n\t        protein='_'.join(['TCR',line[2],line[3]])\n\t        species,locus,allele=line[1],line[4],line[5]\n\t    elif line[0]=='MHC':\n\t        protein='_'.join(['MHC',line[2],line[3]])\n", "        species,locus,allele=line[1],line[4],line[5]\n\t    else:\n\t        raise ValueError(f'fasta protein record not understood: {s}')\n\t    return protein,species,locus,allele            \n\tdef blast_prot(seq,dbs=['B2M','MHC','TRV','TRJ'],species=None):\n\t    '''\n\t    takes protein sequence, optionally a list of databases (default: use all), optionally a species; \n\t    does blastp search, returns a list of all hits;\n\t    each hit is a dict with keys\n\t    'protein','species','locus','allele','score','identities','len_target','query_start','query_end';\n", "    where 'protein' is e.g. 'TCR_A/D_V', 'TCR_A_V', 'TCR_B_J', 'B2M', 'MHC_2_B', 'MHC_1_A'; \n\t    'identities' is the number of aa matches; 'query_start/end' are 0-based\n\t    '''    \n\t    #check seq for unconventional symbols    \n\t    seq_aa=''.join(set(list(seq))-aa_set)\n\t    if seq_aa:\n\t        #raise ValueError(f'sequence contains non-canonical symbols {seq_aa};') \n\t        pass #blast works with non-canonical symbols\n\t    #full path for dbs\n\t    db_dir=data_dir+'/db'\n", "    dbs_available=os.listdir(db_dir)\n\t    dbs_full=[]\n\t    for db in dbs:        \n\t        if species:\n\t            db+=('_'+species)\n\t        db+='.fasta'\n\t        if db not in dbs_available:\n\t            raise ValueError(f'db {db} not available;')\n\t        db=db_dir+'/'+db\n\t        dbs_full.append(db)\n", "    #make unique tmp_id\n\t    tmp_id=seq[:10]+''.join([str(x) for x in np.random.randint(10,size=10)])    \n\t    query_path=tmp_dir+f'/{tmp_id}.fasta'\n\t    output_path=tmp_dir+f'/{tmp_id}.xml'\n\t    #write query to fasta file\n\t    with open(query_path,'w',encoding='utf8',newline='') as f:\n\t        f.write('>seq\\n'+seq)        \n\t    #run blastp    \n\t    hits=[]\n\t    for db in dbs_full:\n", "        blastp_cline=NcbiblastpCommandline(query=query_path, db=db,outfmt=5, out=output_path)\n\t        stdout,stderr=blastp_cline()\n\t        #parse blastp output\n\t        with open(output_path,'r') as f:\n\t            blast_record=NCBIXML.read(f)        \n\t        for x in blast_record.alignments:\n\t            h={}\n\t            h['protein'],h['species'],h['locus'],h['allele']=_blast_parse_fasta_record(x.hit_def)\n\t            h['len_target']=x.length #length of full db protein\n\t            y=x.hsps[0]\n", "            h['score']=y.score      #alignment score\n\t            h['identities']=y.identities #identical aa's in alignment\n\t            #start and end indices in query seq, 0-based\n\t            h['query_start']=y.query_start-1\n\t            h['query_end']=y.query_end-1            \n\t            hits.append(h)\n\t    #remove tmp files\n\t    os.remove(query_path)\n\t    os.remove(output_path)\n\t    return hits\n", "def filter_blast_hits_to_multiple(hits,keep=1):\n\t    '''\n\t    per protein, hits are sorted by blossum score and <=keep (default 1) kept;\n\t    '''\n\t    hits_dict={}\n\t    for h in hits:\n\t        hits_dict.setdefault(h['protein'],[]).append(h)    \n\t    hits_reduced=[]\n\t    for protein,hits_list in hits_dict.items(): \n\t        ind=np.argsort([-h['score'] for h in hits_list])[:keep]        \n", "        hits_reduced+=[hits_list[i] for i in ind]    \n\t    return hits_reduced\n\tdef filter_blast_hits_to_single(hits,filter_func):\n\t    '''\n\t    hits first filtered by protein according to filter_func,\n\t    then sorted by blossum score, then locus name, then allele name, then by query_start left to right;\n\t    the top hit is returned; (may be None if no hits left after filtering)\n\t    #[protein,species,locus,allele,blossum_score,identities,len(target),query_start,query_end]\n\t    '''\n\t    #filter\n", "    hits_reduced=[h for h in hits if filter_func(h['protein'])]\n\t    if len(hits_reduced)==0:\n\t        return None\n\t    #sort\n\t    scores=np.array([(-h['score'],h['locus'],h['allele'],h['query_start']) for h in hits_reduced],\n\t                     dtype=[('score',float),('locus','U20'),('allele','U20'),('query_start',int)])\n\t    i0=np.argsort(scores,order=['score','locus','allele','query_start'])[0]\n\t    return hits_reduced[i0]    \n\tdef _hit_distance(x,y):\n\t    '''\n", "    return minus overlap of two hits\n\t    '''\n\t    ilx,irx=x['query_start'],x['query_end']\n\t    ily,iry=y['query_start'],y['query_end']\n\t    lx=irx-ilx+1\n\t    ly=iry-ily+1\n\t    return -max(min(irx-ily+1, iry-ilx+1,lx,ly),0)       \n\tdef filter_blast_hits_for_chain(hits,threshold):\n\t    '''\n\t    cluster hits by pairwise overlap; in each cluster, keep the hit with the highest blossum score;\n", "    (note: can happen e.g. chain TRV_Y_TRJ with low score Y overlapping TRV and TRJ,\n\t    causing TRJ to be dropped. Unlikely with sufficient overlap threshold.)\n\t    '''\n\t    #cluster\n\t    hits_clusters=utils.cluster(hits,distance=_hit_distance,threshold=threshold)    \n\t    #filter\n\t    hits_keep=[]\n\t    for c in hits_clusters:\n\t        scores=np.array([(-h['score'],h['locus'],h['allele']) for h in c],\n\t                     dtype=[('score',float),('locus','U20'),('allele','U20')])\n", "        i0=np.argsort(scores,order=['score','locus','allele'])[0]\n\t        hits_keep.append(c[i0])\n\t    return hits_keep        \n\tdef _find_mutations(seqA,seqB,pdbnum):\n\t    mutations=[]\n\t    for i,x in enumerate(zip(seqA,seqB)):\n\t        if x[0]!=x[1]:\n\t            mutations.append('|'.join([x[1],pdbnum[i],x[0]]))\n\t    return mutations  \n\tdef realign(seq,target,name=''):\n", "    '''\n\t    realign sequence and NUMSEQ object;\n\t    symbols X (also B,Z) accepted and have standard blosum62 scores\n\t    '''\n\t    #lower penalty for gap in query (assume missing res possible), high penalty for gap in target\n\t    y=pairwise2.align.globaldd(seq,target.seq(),blosum62,\n\t                               openA=-5,extendA=-5,openB=-15,extendB=-15,penalize_end_gaps=(False,False),\n\t                               one_alignment_only=True)[0]            \n\t    seqA,seqB=y.seqA,y.seqB    \n\t    if re.search('[A-Z]-+[A-Z]',seqB):\n", "        raise ValueError(f'internal gap in aligned target for {name}')   \n\t    #indices of proper target within alignment\n\t    x=re.search('^-+',seqB)\n\t    if x:\n\t        i1=x.end()\n\t    else:\n\t        i1=0        \n\t    x=re.search('-+$',seqB)\n\t    if x:\n\t        i2=x.start()\n", "    else:\n\t        i2=len(seqB)        \n\t    #find start and end positions of alignment within query [i_start,i_end)\n\t    i_start=i1\n\t    i_end=len(seq)-(len(seqB)-i2)            \n\t    #cut to aligned target\n\t    seqA,seqB=seqA[i1:i2],seqB[i1:i2]           \n\t    #identify and make mutations\n\t    mutations=_find_mutations(seqA,seqB,target.data['pdbnum'])    \n\t    result,error=target.mutate(mutations)\n", "    if error:\n\t        raise ValueError(f'mutation error {error} for {name}')\n\t    return result,i_start,i_end\n\t######################### SPECIES INFO #########################\n\twith open(data_dir+'/species_dict.pckl','rb') as f:\n\t    species=pickle.load(f)\n\t######################### MHC TOOLS #########################\n\tmhc_dir=data_dir+'/MHC'\n\t#numeration and secondary structure\n\twith open(mhc_dir+'/num_ins_ss.pckl','rb') as f:\n", "    num_ins_ss=pickle.load(f)\n\t#load\n\tdef load_mhcs(species_list=None,use_pickle=True):\n\t    '''optionally, restricts to species in species_list;\n\t    use_pickle==True (default) means reads from .pckl (or creates it, if doesn't exist);\n\t    otherwise reads from fasta and overwrites .pckl'''\n\t    global mhcs\n\t    global mhcs_df\n\t    global mhc_rename_dict\n\t    t0=time.time()\n", "    with open(data_dir+'/MHC/mhc_rename.pckl','rb') as f: #read dict for renaming (species,locus,allele) triples for g-region\n\t        mhc_rename_dict=pickle.load(f)\n\t    if species_list is not None:\n\t        use_pickle=False\n\t    pckl_filename=data_dir+'/MHC/MHC.pckl'    \n\t    if os.path.isfile(pckl_filename) and use_pickle:\n\t        print('MHC loading from MHC.pckl. To update the pickle file, set use_pickle to False')\n\t        with open(pckl_filename,'rb') as f:\n\t            mhcs,mhcs_df=pickle.load(f)\n\t    else:\n", "        cl_dict={'1':'I','2':'II'}\n\t        mhcs={}\n\t        mhcs_df=[]    \n\t        with open(data_dir+'/MHC/MHC.fasta') as f:\n\t            s=f.read()\n\t        s=_parse_fasta(s)    \n\t        for k,seq in s.items(): #k is e.g. 'MHC 9606 1 A A 01:01'        \n\t            _,species,cl,chain,locus,allele=k.split()\n\t            if (species_list is None) or (species in species_list):\n\t                cl=cl_dict[cl]        \n", "                num,ins,ss=num_ins_ss[cl+chain]\n\t                info={'species':species,'class':cl,'chain':chain,'locus':locus,'allele':allele}            \n\t                mhcs[species,locus,allele]=NUMSEQ(seq=seq,num=num,ins=ins,ss=ss,info=info).ungap()\n\t                mhcs_df.append([species,cl,chain,locus,allele])\n\t        mhcs_df=pd.DataFrame(mhcs_df,columns=['species_id','cl','chain','locus','allele'])\n\t        if species_list is None:        \n\t            with open(pckl_filename,'wb') as f:\n\t                pickle.dump((mhcs,mhcs_df),f)\n\t    print('loaded {} MHC sequences in {:4.1f} s'.format(len(mhcs),time.time()-t0))\n\t#MHC reconstruction\n", "def mhc_from_seq(seq,species=None,target=None,return_boundaries=False,rename_by_g_region=True):\n\t    '''\n\t    if species given, search restricted to the corresponding database;\n\t    if target is given (NUMSEQ object), no search is done;  \n\t    returns NUMSEQ object for seq, including mutation information relative to the identified allele;\n\t    no gaps in aligned target allowed, but gaps are allowed in aligned seq;\n\t    output info includes gap counts for left, right, internal;\n\t    if return_boundaries (default False), returns left and right indices of alignment within query (0-based, ends included);\n\t    if rename_by_g_region (default True), \n\t    uses the first by sorting (exception: human first) (species,locus,allele) triple with the same g-region sequence\n", "    '''\n\t    if target is None:                \n\t        hits=blast_prot(seq,['MHC'],species=species)\n\t        hit=filter_blast_hits_to_single(hits,lambda k: k.startswith('MHC'))\n\t        if hit is None:\n\t            raise ValueError('no MHC hits found for MHC sequence')\n\t        if rename_by_g_region:\n\t            species,locus,allele=mhc_rename_dict[hit['species'],hit['locus'],hit['allele']]\n\t        else:\n\t            species,locus,allele=hit['species'],hit['locus'],hit['allele']\n", "        target=mhcs[species,locus,allele]                           \n\t    result,il,ir=realign(seq,target,'MHC')    \n\t    if return_boundaries:\n\t        return result,il,ir-1\n\t    else:\n\t        return result\n\t######################### TCR TOOLS #########################\n\t#numeration and secondary structure\n\ttcr_dir=data_dir+'/TCR'\n\twith open(tcr_dir+'/V_num_ins.pckl','rb') as f:\n", "    v_num_ins=pickle.load(f)\n\twith open(tcr_dir+'/CDR3_num_ins.pckl','rb') as f:\n\t    cdr3_num_ins=pickle.load(f)    \n\twith open(tcr_dir+'/J_FGXG.pckl','rb') as f:\n\t    j_fgxg=pickle.load(f)\n\twith open(tcr_dir+'/ss.pckl','rb') as f:\n\t    tcr_ss=pickle.load(f)\n\t#load\n\tdef load_tcrs(species_list=None,use_pickle=True):\n\t    '''optionally, restricts to species in species_list'''\n", "    global tcrs\n\t    global tcrs_df\n\t    t0=time.time()  \n\t    if species_list is not None:\n\t        use_pickle=False\n\t    pckl_filename=tcr_dir+'/TCR.pckl'\n\t    if os.path.isfile(pckl_filename) and use_pickle:\n\t        print('TCR loading from TCR.pckl. To update the pickle file, set use_pickle to False')\n\t        with open(pckl_filename,'rb') as f:\n\t            tcrs,tcrs_df=pickle.load(f)\n", "    else:\n\t        with open(tcr_dir+'/TCR.fasta') as f:\n\t            s=f.read()\n\t        s=_parse_fasta(s)\n\t        tcrs={}\n\t        tcrs_df=[]\n\t        for k,seq in s.items(): #TCR 37293 A J TRAJ2 01\n\t            _,species,chain,reg,locus,allele=k.split()\n\t            if (species_list is None) or (species in species_list):\n\t                info={'species':species,'chain':chain,'reg':reg,'locus':locus,'allele':allele}\n", "                tcrs_df.append([species,chain,reg,locus,allele])\n\t                if reg=='V':\n\t                    if chain=='A/D': #use chain 'A' templates for 'A/D'\n\t                        num,ins=v_num_ins[species,'A']\n\t                    else:\n\t                        num,ins=v_num_ins[species,chain]\n\t                    ss=[tcr_ss[i-1] for i in num]   \n\t                    ls=len(seq)\n\t                    ln=len(num)\n\t                    if ls>ln: #happens e.g. for 37293 TRAV12S1 01. (Likely a recombined sequence)\n", "                        seq=seq[:ln]\n\t                    elif ls<ln:\n\t                        num=num[:ls]\n\t                        ins=ins[:ls]\n\t                        ss=ss[:ls]                \n\t                    tcr=NUMSEQ(seq=seq,num=num,ins=ins,ss=ss,info=info).ungap()\n\t                elif reg=='J':\n\t                    pattern=j_fgxg.get((species,locus,allele)) or 'FG.G'                   \n\t                    search_i0=re.search(pattern,seq)\n\t                    if search_i0:\n", "                        i0=search_i0.start()\n\t                    else:\n\t                        raise ValueError(f'pattern {pattern} not found in {species,locus,allele}')                    \n\t                    num=np.arange(118-i0,118-i0+len(seq))\n\t                    tcr=NUMSEQ(seq=seq,num=num,ins=None,ss='J',info=info)                 \n\t                else:\n\t                    raise ValueError(f'reg {reg} not recognized')            \n\t                tcrs[species,locus,allele]=tcr\n\t        tcrs_df=pd.DataFrame(tcrs_df,columns=['species_id','chain','reg','locus','allele'])\n\t        if species_list is None:\n", "            with open(pckl_filename,'wb') as f:\n\t                pickle.dump((tcrs,tcrs_df),f)\n\t    print('loaded {} TCR sequences in {:4.1f} s'.format(len(tcrs),time.time()-t0))\n\t#TCR reconstruction\n\tdef tcr_from_genes(V,J,cdr3ext,strict=True): \n\t    '''\n\t    takes NUMSEQ objects V and J, and extended cdr3 sequence (1-res overhangs on both sides relative to cdr3_imgt);\n\t    reconstructs the full sequence and returns the tcr NUMSEQ object;\n\t    also returns nv and nj: lengths of V and J contig tails that match cdr3ext;\n\t    raises error if cdr3ext length not in [4,33];\n", "    if strict==True (default), also raises error if nv==0 or nj==0, i.e. when res 104 or 118 do not match in cdr3ext and V/J;\n\t    info for TCR constructed as follows:\n\t    'species' taken from V, 'V' e.g. TRAV1*01, 'J' e.g. 'TRBJ2*02', 'cdr3ext': cdr3ext sequence    \n\t    '''\n\t    lcdr=len(cdr3ext)-2    \n\t    if lcdr in cdr3_num_ins:\n\t        cdr_num,cdr_ins=cdr3_num_ins[lcdr]\n\t    else:\n\t        raise ValueError(f'cdr3ext length {lcdr+2} out of bounds')    \n\t    cdr3=NUMSEQ(seq=cdr3ext[1:-1],num=cdr_num,ins=cdr_ins,ss='CDR3')\n", "    tcr=join_NUMSEQ([V.get_fragment(-1,104),cdr3,J.get_fragment(118,500)])\n\t    info={}\n\t    info['species']=V.info['species']\n\t    info['V']=V.info['locus']+'*'+V.info['allele']\n\t    info['J']=J.info['locus']+'*'+J.info['allele']        \n\t    tcr.info=info        \n\t    for i,x in enumerate(zip(cdr3ext,V.get_fragment(104,500).data['seq'])): #iterates to min(len1,len2)\n\t        if x[0]!=x[1]:\n\t            break\n\t    n_v=i\n", "    for i,x in enumerate(zip(cdr3ext[::-1],J.get_fragment(0,118).data['seq'][::-1])): #iterates to min(len1,len2)\n\t        if x[0]!=x[1]:\n\t            break\n\t    n_j=i\n\t    if strict and (n_v<1 or n_j<1):\n\t        raise ValueError(f'cdr3ext mismatch with V or J: n_v={n_v}, n_j={n_j}')\n\t    return tcr,n_v,n_j\n\tdef tcr_from_seq(seq,species=None,V=None,J=None,return_boundaries=False):\n\t    '''\n\t    reconstructs tcr NUMSEQ object from sequence; takes seq, optionally species to restrict search;\n", "    optionally V and/or J objects (then no search for V and/or J is done);    \n\t    returns NUMSEQ object for TCR, including mutation information relative to the identified allele;\n\t    no gaps in aligned target allowed, but gaps are allowed in aligned seq;\n\t    output info includes gap counts for left, right, internal;\n\t    if return_boundaries (default False), returns left and right indices of alignment within query\n\t    (0-based, ends included)\n\t    '''    \n\t    #find and realign V  \n\t    if V is None:                \n\t        hits=blast_prot(seq,['TRV'],species=species)\n", "        hit=filter_blast_hits_to_single(hits,lambda k: (k.startswith('TCR') and k.endswith('V')))\n\t        if hit is None:\n\t            raise ValueError('no TRV hits found for TCR sequence')\n\t        V=tcrs[hit['species'],hit['locus'],hit['allele']]                    \n\t    V=V.get_fragment(-1,104) #restrict to framework region\n\t    V,i_V_left,i_cdr3_start=realign(seq,V,'TRV') \n\t    V_mutation_info=V.count_mutations()    \n\t    n_gaps_right_V=V_mutation_info['gaps_right']    \n\t    #require no gaps on the right (otherwise res 104 missing) and res 104 being C\n\t    if n_gaps_right_V or V.data['seq'][-1]!='C':\n", "        raise ValueError(f'framework V realign error: gaps on the right ({n_gaps_right_V}) or wrong last res')                                 \n\t    species=V.info['species'] #impose species from V in J search\n\t    #find and realign J\n\t    if J is None:            \n\t        hits=blast_prot(seq,['TRJ'],species=species)\n\t        hit=filter_blast_hits_to_single(hits,lambda k: (k.startswith('TCR') and k.endswith('J')))\n\t        if hit is None:\n\t            raise ValueError('no TRJ hits found for TCR sequence')\n\t        J=tcrs[hit['species'],hit['locus'],hit['allele']]                         \n\t    #first realign, then cut, because J outside cdr3 can be very short\n", "    J,i_cdr3_end,i_J_right=realign(seq,J,'TRJ')\n\t    if not (' 118 ' in J.data['pdbnum']):\n\t        raise ValueError(f'res 118 missing in realigned J;')\n\t    #adjust i_cdr3_end    \n\t    i_cdr3_end+=np.sum(J.data['pdbnum']<' 118 ')\n\t    #restrict to framework region\n\t    J=J.get_fragment(118,500)\n\t    J.info['gaps']=J.info['gaps'][J.info['gaps']['pdbnum']>=' 118 ']                \n\t    #make cdr3 object\n\t    cdr3=seq[i_cdr3_start:i_cdr3_end]\n", "    l=len(cdr3)\n\t    if l in cdr3_num_ins:\n\t        cdr_num,cdr_ins=cdr3_num_ins[l]\n\t    else:\n\t        raise ValueError(f'cdr3 {cdr3} of improper length')\n\t    cdr3=NUMSEQ(seq=cdr3,num=cdr_num,ins=cdr_ins,ss='CDR3')    \n\t    #make TCR object    \n\t    tcr=join_NUMSEQ([V,cdr3,J])\n\t    info=tcr.info.copy()    \n\t    info.pop('reg')\n", "    info.pop('locus')\n\t    info.pop('allele')    \n\t    if J.info['chain'] not in V.info['chain']: #should be equal or (A in A/D) or (D in A/D)        \n\t        print('Warning! V and J chain mismatch')\n\t        #warnings.warn('V and J chain mismatch')\n\t    if V.info['chain']=='A/D':\n\t        info['chain']=J.info['chain']\n\t    else:\n\t        info['chain']=V.info['chain']\n\t    #if V.info['species']!=J.info['species']:          #deprecated: now impose V species for J search\n", "    #    print('Warning! V and J species mismatch')\n\t    #    #warnings.warn('V and J species mismatch')            \n\t    info['species']=V.info['species']    \n\t    info['V']=V.info['locus']+'*'+V.info['allele']\n\t    info['J']=J.info['locus']+'*'+J.info['allele']         \n\t    tcr.info=info    \n\t    if return_boundaries:\n\t        return tcr,i_V_left,i_J_right-1\n\t    else:\n\t        return tcr\n", "#TO BE ADDED: \n\t#cdr3 improvement function from v2-2.1\n"]}
{"filename": "tfold/utils/pdb_tools.py", "chunked_list": ["#Victor Mikhaylov, vmikhayl@ias.edu\n\t#Institute for Advanced Study, 2021-2022\n\t#lookup HETATM entities here: https://www.ebi.ac.uk/pdbe-srv/pdbechem/\n\timport Bio.PDB as PDB\n\timport numpy as np\n\timport os\n\timport pickle\n\timport re\n\tfrom tfold.utils import seq_tools\n\taa_dict={'ARG':'R','HIS':'H','LYS':'K','ASP':'D','GLU':'E','SER':'S','THR':'T','ASN':'N','GLN':'Q','CYS':'C',\n", "         'GLY':'G','PRO':'P','ALA':'A','VAL':'V','ILE':'I','LEU':'L','MET':'M','PHE':'F','TYR':'Y','TRP':'W'}\n\t#A cartography of the van der Waals territories\n\t#Santiago Alvareza   \n\t#Dalton Trans., 2013,42, 8617-8636 \n\t#https://pubs.rsc.org/en/content/articlelanding/2013/DT/c3dt50599e\n\tvdw_radii={'C':1.77,'O':1.50,'N':1.66,'S':1.89,'H':0.,'P':1.90,'I':2.04,'F':1.46}\n\t#original {'H':1.20} switched to 0. The reason: most pdbs don't have hydrogens, but those that do\n\t#would disproportionately contribute to contact counting. Set H radius to 0 as a way to drop hydrogens.\n\t#### parsing ####\n\tdef parse_pdb(filename,name=None):\n", "    if name is None: #'/../../X.pdb' -> 'X'\n\t        name=filename.split('/')[-1].split('.')[0]        \n\t    pdb_parser=PDB.PDBParser(PERMISSIVE=False,QUIET=True)\n\t    structure=pdb_parser.get_structure(name,filename)[0]\n\t    header=pdb_parser.get_header()    \n\t    return structure,header   \n\tdef save_pdb(obj,filename):\n\t    '''\n\t    save Bio.PDB pdb object to filename as pdb\n\t    '''\n", "    io=PDB.PDBIO()\n\t    io.set_structure(obj)\n\t    io.save(filename)\n\tdef _int_or_repl(x,replacement=-100):\n\t    '''convert to int or return replacement (default -100)'''\n\t    try:\n\t        return int(x)\n\t    except ValueError:\n\t        return replacement \n\tdef _atom_to_chain_pdbnum(a):\n", "    '''takes Bio.PDB atom, returns Cnnnni'''\n\t    chain,res_id,___=a.get_full_id()[-3:] #note: can be len 5 or len 4 (first entry is pdb_id, drops upon copying)\n\t    _,num,ins=res_id\n\t    num=_int_or_repl(num)\n\t    return '{:1s}{:4d}{:1s}'.format(chain,num,ins)\n\tdef get_structure_dict(structure,include_coords,keep_hetero=True):\n\t    '''\n\t    takes a Bio.PDB object with get_atoms method;\n\t    if include_coords: returns dict {chain:{pdbnum:{atom_name:array_xyz,..},..},..},\n\t    otherwise:         returns dict {chain:{pdbnum:[atom_name,..],..},..};    \n", "    if keep_hetero (default True), keeps hetero res/atoms, otherwise drops them; #SWITCHED TO DEFAULT TRUE!!!\n\t    (always drops waters)\n\t    '''\n\t    structure_dict={}\n\t    for a in structure.get_atoms():\n\t        chain,res_id,atom_id=a.get_full_id()[-3:]\n\t        het,num,ins=res_id\n\t        if not (het.strip()=='W'): #drop waters\n\t            atomname,_=atom_id\n\t            pdbnum='{:4d}{:1s}'.format(_int_or_repl(num),ins)\n", "            if keep_hetero or not het.strip():\n\t                if include_coords:\n\t                    structure_dict.setdefault(chain,{}).setdefault(pdbnum,{})[atomname]=a.get_coord()\n\t                else:                \n\t                    structure_dict.setdefault(chain,{}).setdefault(pdbnum,[]).append(atomname)\n\t    return structure_dict    \n\thetero_exclude=['W','GOL','NAG','SO4','EDO','NA','FUC','ACT','CL','BMA','MAN','PEG'] #most common hence likely uninformative\n\tdef get_chain_sequences(structure):\n\t    '''\n\t    takes a Bio.PDB object with .get_residues method,\n", "    returns a dict {'canonical':d1,'modified':d2,'hetero':d3}, \n\t    where each d is {chain:NUMSEQ};\n\t    canonical includes 'X' for hetero or modified! Drops waters;\n\t    note: when num from pdb not convertible to int, set to default e.g. -100, as a replacement for np.nan which is float;\n\t    NUMSEQ info includes pdb_id and chain\n\t    '''    \n\t    sequences={'canonical':{},'modified':{},'hetero':{}}\n\t    for x in structure.get_residues():\n\t        chain_id,res_id=x.get_full_id()[-2:] #'1ao7'(optional), 0, 'A', (' ', 2, ' '))                \n\t        het,num,ins=res_id\n", "        if not (het.strip() in hetero_exclude): #exclude most common HETATM that are likely not interesting\n\t            num=_int_or_repl(num)\n\t            aa=x.resname\n\t            aa1=aa_dict.get(aa) or 'X'\n\t            sequences['canonical'].setdefault(chain_id,[]).append([aa1,num,ins])\n\t            if (not het.strip()) and (aa not in aa_dict):\n\t                sequences['modified'].setdefault(chain_id,[]).append([aa,num,ins])\n\t            if het.strip():\n\t                sequences['hetero'].setdefault(chain_id,[]).append([aa,num,ins])               \n\t    sequences1={}\n", "    for k,s in sequences.items():\n\t        sequences1[k]={}\n\t        for c in s:\n\t            seq=[x[0] for x in s[c]]\n\t            num=[x[1] for x in s[c]]\n\t            ins=[x[2] for x in s[c]]\n\t            info={'chain':c}\n\t            sequences1[k][c]=seq_tools.NUMSEQ(seq=seq,num=num,ins=ins,info=info) \n\t    return sequences1\n\t#### maps ####\n", "def chainmap_to_resmap(structure1,structure2,chainmap,verbose=False):\n\t    '''\n\t    takes two structures and a chainmap, e.g. [['M','N'],['M','M'], ['A','A'], ['P','P']]; \n\t    returns resmap which matches residues with identical pdbnums in each chain pair,\n\t    e.g. [['M1070 ','N1070 '],['P   5 ','P   5 ']]\n\t    '''    \n\t    structure1_dict=get_structure_dict(structure1,include_coords=False)\n\t    structure2_dict=get_structure_dict(structure2,include_coords=False)\n\t    resmap=[]\n\t    for x,y in chainmap:\n", "        res1=structure1_dict.get(x)\n\t        res2=structure2_dict.get(y)\n\t        if (res1 is not None) and (res2 is not None):\n\t            res1=set(res1.keys())\n\t            res2=set(res2.keys())\n\t            res_both=res1&res2\n\t            delta1=res1-res_both\n\t            delta2=res2-res_both\n\t            if verbose:\n\t                if delta1:\n", "                    print(f'res {delta1} present in structure 1 chain {x} but missing in structure 2 chain {y};')\n\t                if delta2:\n\t                    print(f'res {delta2} present in structure 2 chain {y} but missing in structure 1 chain {x};')\n\t            for r in res_both:\n\t                resmap.append([x+r,y+r])\n\t        elif verbose:\n\t            if res1 is None:\n\t                print(f'chain {x} missing in structure 1;')\n\t            if res2 is None:\n\t                print(f'chain {y} missing in structure 2;')    \n", "    return resmap\n\tdef resmap_to_atommap(structure1,structure2,resmap,CA_only=False,allow_missing_res=False,verbose=False):\n\t    '''\n\t    if allow_missing_res==False, will raise error when residues from resmap are missing in structure,\n\t    otherwise will skip those residue pairs\n\t    '''\n\t    structure1_dict=get_structure_dict(structure1,include_coords=False)\n\t    structure2_dict=get_structure_dict(structure2,include_coords=False)\n\t    atoms1=[]\n\t    atoms2=[]    \n", "    for x,y in resmap:\n\t        chain1=x[0]\n\t        pdbnum1=x[1:]\n\t        chain2=y[0]\n\t        pdbnum2=y[1:]\n\t        #assume resnum was properly generated. If not, raise errors\n\t        if (chain1 not in structure1_dict) or (chain2 not in structure2_dict):\n\t            raise ValueError('defective resmap: chains missing in structure;')        \n\t        res1_dict=structure1_dict[chain1]\n\t        res2_dict=structure2_dict[chain2]\n", "        if (pdbnum1 not in res1_dict) or (pdbnum2 not in res2_dict):\n\t            if allow_missing_res:\n\t                continue\n\t            else:\n\t                raise ValueError('defective resmap: pdbnums missing in structure;')\n\t        atom_names1=res1_dict[pdbnum1]\n\t        atom_names2=res2_dict[pdbnum2]        \n\t        if CA_only:\n\t            if ('CA' in atom_names1) and ('CA' in atom_names2):\n\t                atoms1.append((x,'CA'))\n", "                atoms2.append((y,'CA'))\n\t            elif verbose:\n\t                if 'CA' not in atom_names1:\n\t                    print(f'CA missing in structure 1 residue {x}')\n\t                if 'CA' not in atom_names2:\n\t                    print(f'CA missing in structure 2 residue {y}')\n\t        else:            \n\t            atoms_both=set(atom_names1)&set(atom_names2)\n\t            for a in atoms_both:\n\t                atoms1.append((x,a))\n", "                atoms2.append((y,a)) \n\t    #make atommap with atom objects\n\t    atoms=[atoms1,atoms2]    \n\t    atommap=[[None,None] for x in atoms1]\n\t    for i,structure in enumerate([structure1,structure2]):\n\t        for a in structure.get_atoms():\n\t            x=_atom_to_chain_pdbnum(a)\n\t            if (x,a.name) in atoms[i]:\n\t                ind=atoms[i].index((x,a.name))\n\t                atommap[ind][i]=a    \n", "    return atommap\n\t#### distances and contacts ####\n\tdef distance2_matrix(x1,x2):\n\t    '''\n\t    takes two non-empty np arrays of coordinates.\n\t    Returns d_ij^2 matrix\n\t    '''    \n\t    delta_x=np.tile(x1[:,np.newaxis,:],[1,len(x2),1])-np.tile(x2[np.newaxis,:,:],[len(x1),1,1])\n\t    return np.sum(delta_x**2,axis=2)\n\tdef find_contact_atoms(a1,a2,eps=0,pqr=False):\n", "    '''\n\t    takes two lists of pqr or pdb Bio.PDB atom objects;\n\t    returns boolean contact matrix;\n\t    if eps given (default eps=0), detects contact for threshold (1+eps)*(r1+r2);\n\t    uses radii from pqr (pqr=True) or fixed radii (pqr=False, default);        \n\t    '''    \n\t    factor=(1+eps)**2 \n\t    x1=np.array([a.get_coord() for a in a1])\n\t    x2=np.array([a.get_coord() for a in a2])\n\t    dij2=distance2_matrix(x1,x2)\n", "    if pqr:\n\t        rij2=np.array([[(a.radius+b.radius)**2 for b in a2] for a in a1])\n\t    else:        \n\t        rij2=np.array([[(vdw_radii[re.sub('[0-9]','',a.name)[0]]+\n\t                         vdw_radii[re.sub('[0-9]','',b.name)[0]])**2 for b in a2] for a in a1])    \n\t    return dij2<=factor*rij2 #boolean contact matrix    \n\tdef count_r_by_r_contacts(a_list1,a_list2,eps=0,pqr=False,drop_zeros=False):  \n\t    '''\n\t    takes two lists of Bio.PDB atom objects; returns a dict for res by res contact numbers;\n\t    dict keys are pairs of Cnnnni; zero contact entries kept by default, to drop them, set flag drop_zeros;\n", "    if eps given (default eps=0), detects contact for threshold (1+eps)*(r1+r2);\n\t    uses radii from pqr (pqr=True) or fixed radii (pqr=False, default);   \n\t    '''\n\t    resnames1=np.array([_atom_to_chain_pdbnum(a) for a in a_list1])\n\t    resnames2=np.array([_atom_to_chain_pdbnum(a) for a in a_list2])\n\t    resnames1_u=np.unique(resnames1)\n\t    resnames2_u=np.unique(resnames2)\n\t    matrix=find_contact_atoms(a_list1,a_list2,eps,pqr).astype(np.int16)    \n\t    contact_counts={}\n\t    for r1 in resnames1_u:\n", "        ind1=resnames1==r1        \n\t        for r2 in resnames2_u:\n\t            ind2=resnames2==r2            \n\t            m=matrix[ind1,:]\n\t            m=m[:,ind2]          \n\t            n=np.sum(m)\n\t            if n or not drop_zeros:\n\t                contact_counts[r1,r2]=n\n\t    return contact_counts      \n\tdef make_contact_maps(filename,output_dir):\n", "    '''\n\t    make and save interchain contact maps for a pdb file\n\t    '''\n\t    os.makedirs(output_dir,exist_ok=True)\n\t    pdb_id=filename.split('/')[-1].split('.')[0]\n\t    print(f'processing {pdb_id}...')\n\t    structure,header=parse_pdb(filename)\n\t    chains=list(structure.get_chains())\n\t    chain_ids=[c.id for c in chains]\n\t    contact_maps={}\n", "    for i,c1 in enumerate(chain_ids):\n\t        #(drop elements \n\t        atomlist1=[a for a in chains[i].get_atoms() if re.sub('[0-9]','',a.name)[0] in vdw_radii]\n\t        for j,c2 in enumerate(chain_ids[i+1:]):\n\t            atomlist2=[a for a in chains[j+i+1].get_atoms() if re.sub('[0-9]','',a.name)[0] in vdw_radii]\n\t            contact_maps[c1,c2]=count_r_by_r_contacts(atomlist1,atomlist2,eps=0.1)\n\t    with open(output_dir+'/'+pdb_id+'.pckl','wb') as f:\n\t        pickle.dump(contact_maps,f)\n\t#### superimposing ####\n\t#a quick fix for a bug in transforming disordered atoms\n", "#(from https://github.com/biopython/biopython/issues/455)\n\t#NOTE: only keeps position A of disordered atoms and drops the rest\n\tdef get_unpacked_list_patch(self):\n\t    '''\n\t    Returns all atoms from the residue;\n\t    in case of disordered, keep only first alt loc and remove the alt-loc tag\n\t    '''\n\t    atom_list = self.get_list()\n\t    undisordered_atom_list = []\n\t    for atom in atom_list:\n", "        if atom.is_disordered():\n\t            atom.altloc=\" \"\n\t            undisordered_atom_list.append(atom)\n\t        else:\n\t            undisordered_atom_list.append(atom)\n\t    return undisordered_atom_list\n\tPDB.Residue.Residue.get_unpacked_list=get_unpacked_list_patch\n\tdef superimpose_by_resmap(structure1,structure2,resmap,CA_only=True,allow_missing_res=False,verbose=False):\n\t    '''\n\t    superimpose structure1 onto structure2 according to given resmap;\n", "    resmap should be a list of pairs ['Cnnnni','Cnnnni'] of corresponding residues;\n\t    if CA_only=True (default), only uses CA atoms;    \n\t    if allow_missing_res (default False), does not raise error when residue in resmap are missing in structure;\n\t    transforms structure1 in place; returns rmsd\n\t    '''\n\t    atommap=resmap_to_atommap(structure1,structure2,resmap,CA_only,allow_missing_res,verbose)    \n\t    if verbose:\n\t        print(f'superimposing on {len(atommap)} atoms...')     \n\t    atoms1,atoms2=zip(*atommap)\n\t    sup=PDB.Superimposer()\n", "    sup.set_atoms(atoms2,atoms1)\n\t    sup.apply(structure1)\n\t    return sup.rms            \n\tdef superimpose_by_chainmap(structure1,structure2,chainmap,CA_only=True,verbose=False):\n\t    '''\n\t    superimpose structure1 onto structure2 according to a chainmap;\n\t    chainmap is e.g. [['M','N'],['M','M'], ['A','A'], ['P','P']]; matching pdbnums in each pair of chains used;    \n\t    if CA_only=True (default), only uses CA atoms;    \n\t    transforms structure1 in place; returns rmsd    \n\t    '''    \n", "    resmap=chainmap_to_resmap(structure1,structure2,chainmap,verbose)\n\t    rmsd=superimpose_by_resmap(structure1,structure2,resmap,CA_only,verbose)\n\t    return rmsd\n\t#### rmsd ####\n\tdef rmsd_by_resmap(structure1,structure2,resmap,allow_missing_res=False,verbose=False):\n\t    '''\n\t    compute rmsds (CA and all-atom) according to resmap;\n\t    note: resmap should be list, not zip!\n\t    does not superimpose!\n\t    '''\n", "    result={}\n\t    for name in ['CA','all']:\n\t        CA_only=name=='CA'        \n\t        atommap=resmap_to_atommap(structure1,structure2,resmap,CA_only=CA_only,\n\t                                  allow_missing_res=allow_missing_res,verbose=verbose) \n\t        if verbose:\n\t            print(f'rmsd_{name} over {len(atommap)} atoms...')\n\t        d2s=[]\n\t        for a,b in atommap:\n\t            delta=a.get_coord()-b.get_coord()\n", "            d2s.append(np.dot(delta,delta))\n\t        result[name]=np.average(d2s)**0.5\n\t    return result        \n\tdef rmsd_by_chainmap(structure1,structure2,chainmap,verbose=False):\n\t    '''\n\t    compute rmsds (CA and all-atom) according to chainmap;\n\t    does not superimpose!\n\t    '''\n\t    resmap=chainmap_to_resmap(structure1,structure2,chainmap,verbose=verbose)\n\t    if verbose:\n", "        print(f'rmsd over {len(resmap)} residues...')\n\t    return rmsd_by_resmap(structure1,structure2,resmap,verbose)\n\t### main ###\n\t_func_dict={'make_contact_maps':make_contact_maps}\n\tif __name__=='__main__': \n\t    import time    \n\t    from argparse import ArgumentParser\n\t    import csv\n\t    t0=time.time()    \n\t    parser=ArgumentParser()\n", "    parser.add_argument('input_filename', type=str, help='path to input file')    \n\t    args=parser.parse_args()  \n\t    inputs=[]\n\t    with open(args.input_filename) as f:\n\t        f_csv=csv.reader(f,delimiter='\\t')\n\t        inputs=[x for x in f_csv]        \n\t    print(f'processing {len(inputs)} tasks...')\n\t    for x in inputs:                                #input format: [function_name,*args]\n\t        processing_function=_func_dict[x[0]]\n\t        processing_function(*x[1:])        \n", "    print('finished {} tasks in {} s'.format(len(inputs),time.time()-t0))\n"]}
{"filename": "tfold/nn/nn_utils.py", "chunked_list": ["def generate_registers_I(l):\n\t    '''\n\t    generate all admissible pairs of tails for a cl II pep of length l;\n\t    assume only combinations (0,x) and (x,0) allowed, to avoid quadratic proliferaton of registers;\n\t    experimentally, there is only one structure with tails (-1,1) violating this rule\n\t    '''\n\t    if l<8:\n\t        raise ValueError('peplen<8 not allowed for cl I')\n\t    registers=[]\n\t    for i in range(-1,min(2,l-7)):\n", "        registers.append((i,0))\n\t    if l>8:\n\t        for i in range(1,l-7):\n\t            registers.append((0,i))\n\t    return registers\n\tdef generate_registers_II(l):\n\t    '''\n\t    generate all admissible pairs of tails for a cl II pep of length l;\n\t    assume a flat binding core of len 9aa;\n\t    experimentally, there is one structure with peplen 10 and left tail -1 violating the rule,\n", "    and no structures with bulged or stretched binding core, except possibly for pig MHC or such\n\t    '''\n\t    if l<9:\n\t        raise ValueError('peplen<9 not allowed for cl II')    \n\t    registers=[]\n\t    for i in range(l-8):\n\t        registers.append((i,l-i-9))\n\t    return registers\n"]}
{"filename": "tfold/nn/models.py", "chunked_list": ["import numpy as np\n\timport pickle\n\tfrom tensorflow.keras.regularizers import l1,l2\n\tfrom tensorflow.keras.constraints import non_neg\n\tfrom tensorflow.math import reduce_sum, reduce_min, reduce_mean, log as tf_log, exp as tf_exp\n\tfrom tensorflow import reshape, expand_dims, stack, squeeze, tile, newaxis, cast, float32 as tf_float32, gather\n\tfrom tensorflow.nn import softmax\n\tfrom tensorflow.keras.layers import Input, Activation\n\tfrom tensorflow.keras.layers import Dense, Flatten, Conv1D\n\tfrom tensorflow.keras.layers import Dropout, BatchNormalization\n", "from tensorflow.keras import Model\n\tfrom tfold.config import seqnn_params\n\tfrom tfold.nn import nn_utils\n\tn_pep_dict={'I':seqnn_params['max_core_len_I']+2,'II':9}\n\tn_mhc_dict={'I':seqnn_params['n_mhc_I'],'II':seqnn_params['n_mhc_II']}\n\tmax_registers_dict={'I' :len(nn_utils.generate_registers_I(seqnn_params['max_pep_len_I'])),\n\t                    'II':len(nn_utils.generate_registers_II(seqnn_params['max_pep_len_II']))}\n\tn_tail_bits=seqnn_params['n_tail_bits']\n\tdef positional_encoding(n_positions,n_bits):\n\t    omega=lambda i: (1/n_positions)**(2*(i//2)/n_bits)\n", "    bits=np.arange(n_bits)[np.newaxis,:]\n\t    positions=np.arange(n_positions)[:,np.newaxis]\n\t    pos_enc=omega(bits)*positions\n\t    pos_enc[:,0::2]=np.sin(pos_enc[:,0::2])\n\t    pos_enc[:,1::2]=np.cos(pos_enc[:,1::2])\n\t    return cast(pos_enc, dtype=tf_float32)\n\tdef fully_connected(params):\n\t    cl=params['cl']\n\t    n_pep=n_pep_dict[cl]\n\t    n_mhc=n_mhc_dict[cl]\n", "    max_registers=max_registers_dict[cl]    \n\t    pep_mask=params.setdefault('pep_mask',None)    \n\t    n_hidden=params['n_hidden']\n\t    if type(n_hidden)==int:\n\t        n_hidden=[n_hidden]    \n\t    actn=params['actn']\n\t    reg_l2_weight=params.get('reg_l2') or 0.\n\t    if reg_l2_weight:\n\t        reg_l2=l2(reg_l2_weight)\n\t    else:\n", "        reg_l2=None   \n\t    #reg=params['reg']\n\t    batch_norm=params.setdefault('batch_norm',False)\n\t    dropout_rate=params['dropout_rate']\n\t    model_name=f'fully_connected'\n\t    use_tails=params.get('use_tails') or False   #whether input includes encoded tail lengths (to use in cl II)    \n\t    input_pep=Input(shape=(max_registers,n_pep,21),name='pep')\n\t    input_mhc=Input(shape=(n_mhc,21),name='mhc')\n\t    if use_tails:        \n\t        input_tails=Input(shape=(max_registers,2,n_tail_bits),name='tails')\n", "    if not (pep_mask is None):\n\t        x_pep=gather(input_pep,[i-1 for i in pep_mask],axis=2)\n\t        n_pep=len(pep_mask)\n\t    else:\n\t        x_pep=input_pep\n\t    x_pep=reshape(x_pep,shape=(-1,max_registers,n_pep*21))    \n\t    x_mhc=Flatten()(input_mhc)    \n\t    dense_pep=Dense(n_hidden[0],kernel_regularizer=reg_l2)\n\t    dense_mhc=Dense(n_hidden[0],kernel_regularizer=reg_l2)\n\t    x_pep=dense_pep(x_pep)        \n", "    x_mhc=dense_mhc(x_mhc)\n\t    x_mhc=tile(x_mhc[:,newaxis,:],[1,max_registers,1])\n\t    x=x_pep+x_mhc\n\t    if use_tails:\n\t        x_tails=reshape(input_tails,shape=[-1,max_registers,2*n_tail_bits])\n\t        dense_tails=Dense(n_hidden[0],kernel_regularizer=reg_l2)\n\t        x_tails=dense_tails(x_tails)\n\t        x+=x_tails\n\t    x=Activation(actn)(x)\n\t    x=Dropout(dropout_rate)(x)\n", "    if batch_norm:\n\t        x=BatchNormalization()(x)\n\t    for i,n in enumerate(n_hidden[1:]):\n\t        dense_n=Dense(n,activation=actn,kernel_regularizer=reg_l2)\n\t        x=dense_n(x)\n\t        if i<len(n_hidden)-2: #don't do on the last one\n\t            x=Dropout(dropout_rate)(x)\n\t        if batch_norm:\n\t            x=BatchNormalization()(x)    \n\t    dense_out=Dense(1)\n", "    x=dense_out(x)    \n\t    x=x[:,:,0]  \n\t    if use_tails:\n\t        model=Model(inputs=[input_pep,input_mhc,input_tails],outputs=x,name=model_name)\n\t    else:\n\t        model=Model(inputs=[input_pep,input_mhc],outputs=x,name=model_name)\n\t    return model\n\tdef pairwise_energy_mini(params):\n\t    model_name=f'pairwise_energy_mini'        \n\t    cl=params['cl']\n", "    n_pep=n_pep_dict[cl]\n\t    n_mhc=n_mhc_dict[cl]\n\t    max_registers=max_registers_dict[cl]    \n\t    reg_l1_weight=params.get('reg_l1') or 0.\n\t    if reg_l1_weight:\n\t        reg_l1=l1(reg_l1_weight)\n\t    else:\n\t        reg_l1=None    \n\t    use_tails=params['use_tails']   #whether input includes encoded tail lengths (to use in cl II)   \n\t    symmetrize_aa_matrix=params['symmetrize_aa_matrix']                    \n", "    input_pep=Input(shape=(max_registers,n_pep,21),name='pep')\n\t    input_mhc=Input(shape=(n_mhc,21),name='mhc')\n\t    if use_tails:        \n\t        input_tails=Input(shape=(max_registers,2,n_tail_bits),name='tails')\n\t    x_pep=input_pep\n\t    x_pep=expand_dims(x_pep,axis=3)\n\t    x_pep=tile(x_pep,[1,1,1,n_mhc,1])   #-1, max_registers, n_pep, n_mhc, 21               \n\t    x_mhc=input_mhc\n\t    x_mhc=expand_dims(input_mhc,axis=1)\n\t    x_mhc=expand_dims(x_mhc,axis=1)   \n", "    x_mhc=tile(x_mhc,[1,max_registers,n_pep,1,1]) #-1, max_registers, n_pep, n_mhc, 21 \n\t    if params.get('allow_aa_bias'):\n\t        dense_aa=Dense(21,name='aa_matrix')        \n\t    else:\n\t        dense_aa=Dense(21,name='aa_matrix',use_bias=False)        \n\t    x=reduce_sum(dense_aa(x_pep)*x_mhc,axis=-1)    #-1, max_registers, n_pep, n_mhc\n\t    if symmetrize_aa_matrix:\n\t        x+=reduce_sum(dense_aa(x_mhc)*x_pep,axis=-1)                \n\t    x=reshape(x,[-1,max_registers,n_pep*n_mhc])\n\t    dense_rr=Dense(1,kernel_regularizer=reg_l1,kernel_constraint=non_neg(),name='res_res_matrix')\n", "    x=dense_rr(x)\n\t    if use_tails:\n\t        x_tails=reshape(input_tails,shape=[-1,max_registers,2*n_tail_bits])\n\t        dense_tails=Dense(1)\n\t        x+=dense_tails(x_tails)            \n\t    x=x[:,:,0]    \n\t    if use_tails:\n\t        model=Model(inputs=[input_pep,input_mhc,input_tails],outputs=x,name=model_name)\n\t    else:\n\t        model=Model(inputs=[input_pep,input_mhc],outputs=x,name=model_name)\n", "    return model\n\tdef pairwise_energy(params):\n\t    cl=params['cl']\n\t    n_pep=n_pep_dict[cl]\n\t    n_mhc=n_mhc_dict[cl]\n\t    max_registers=max_registers_dict[cl]    \n\t    n_hidden=params['n_hidden']    \n\t    if type(n_hidden)==int:\n\t        n_hidden=[n_hidden]\n\t    aa_pair_features=params['aa_pair_features']  \n", "    batch_norm=params.setdefault('batch_norm',False)    \n\t    actn=params['actn']\n\t    #reg=params['reg']\n\t    dropout_rate=params['dropout_rate']\n\t    use_tails=params.get('use_tails') or False   #whether input includes encoded tail lengths (to use in cl II)   \n\t    model_name=f'pairwise_energy'        \n\t    input_pep=Input(shape=(max_registers,n_pep,21),name='pep')\n\t    input_mhc=Input(shape=(n_mhc,21),name='mhc')\n\t    if use_tails:        \n\t        input_tails=Input(shape=(max_registers,2,n_tail_bits),name='tails')\n", "    dense_aa=Dense(21*aa_pair_features)    \n\t    x_pep=dense_aa(input_pep)           #-1, max_registers, n_pep, 21*aa_pair_features                \n\t    x_pep=expand_dims(x_pep,axis=3)\n\t    x_pep=tile(x_pep,[1,1,1,n_mhc,1])   #-1, max_registers, n_pep, n_mhc, 21*aa_pair_features                \n\t    x_pep=reshape(x_pep,[-1,max_registers,n_pep,n_mhc,aa_pair_features,21])\n\t    x_mhc=expand_dims(input_mhc,axis=1)\n\t    x_mhc=expand_dims(x_mhc,axis=1)\n\t    x_mhc=expand_dims(x_mhc,axis=4) #-1, 1, 1, n_mhc, 1, 21\n\t    x_mhc=tile(x_mhc,[1,max_registers,n_pep,1,aa_pair_features,1])     \n\t    x=reduce_sum(x_pep*x_mhc,axis=-1)                \n", "    x=reshape(x,[-1,max_registers,n_pep*n_mhc*aa_pair_features])\n\t    #hidden[0] separately, to add tails if needed\n\t    if batch_norm:\n\t        x=BatchNormalization()(x) \n\t    dense_0=Dense(n_hidden[0])\n\t    x=dense_0(x)\n\t    x=Dropout(dropout_rate)(x)               \n\t    if use_tails:\n\t        x_tails=reshape(input_tails,shape=[-1,max_registers,2*n_tail_bits])\n\t        dense_tails=Dense(n_hidden[0])\n", "        x_tails=dense_tails(x_tails)\n\t        x+=x_tails\n\t    x=Activation(actn)(x)\n\t    for n in n_hidden[1:]:\n\t        if batch_norm:\n\t            x=BatchNormalization()(x) \n\t        dense_n=Dense(n,activation=actn)\n\t        x=dense_n(x)\n\t        x=Dropout(dropout_rate)(x)           \n\t    dense_out=Dense(1)\n", "    x=dense_out(x)    \n\t    x=x[:,:,0]    \n\t    if use_tails:\n\t        model=Model(inputs=[input_pep,input_mhc,input_tails],outputs=x,name=model_name)\n\t    else:\n\t        model=Model(inputs=[input_pep,input_mhc],outputs=x,name=model_name)\n\t    return model\n\tdef attention_convolution(params):\n\t    cl=params['cl']\n\t    n_pep=n_pep_dict[cl]\n", "    n_mhc=n_mhc_dict[cl]\n\t    max_registers=max_registers_dict[cl]    \n\t    actn=params['actn']    \n\t    dropout_rate=params['dropout_rate']     \n\t    model_name=f'attention_convolution'      \n\t    n_values=params['n_values']     \n\t    n_values_last=params['n_values_last']\n\t    kernel_size=params['kernel_size']\n\t    n_blocks=params['n_blocks']\n\t    reduce_x=params['reduce_x']\n", "    n_hidden=params['n_hidden']\n\t    if type(n_hidden)==int:\n\t        n_hidden=[n_hidden]\n\t    input_pep=Input(shape=(max_registers,n_pep,21),name='pep')\n\t    input_mhc=Input(shape=(n_mhc,21),name='mhc')        \n\t    #encode pep, add positional encoding\n\t    pep_embedding=Dense(n_values,name='pep_embedding')\n\t    x_pep=pep_embedding(input_pep) #[None,max_registers,n_pep,n_values]\n\t    x_pep+=positional_encoding(n_pep,n_values)[newaxis,newaxis,:,:]        \n\t    x_pep=BatchNormalization()(x_pep)\n", "    #encode mhc, add positional encoding\n\t    mhc_embedding=Dense(n_values,name='mhc_embedding')\n\t    x_mhc=mhc_embedding(input_mhc) #[None,n_mhc,n_values]    \n\t    x_mhc+=positional_encoding(n_mhc,n_values)[newaxis,:,:]\n\t    x_mhc=tile(x_mhc[:,newaxis,newaxis,:,:],[1,max_registers,n_pep,1,1]) #[None,max_registers,n_pep,n_mhc,n_values]\n\t    x_mhc=BatchNormalization()(x_mhc)\n\t    #attention   \n\t    for i in range(n_blocks):\n\t        att_mask_layer=Conv1D(n_mhc,1,strides=1,activation=None,name=f'att_mask_{i}')\n\t        att_gate_layer=Conv1D(1,1,strides=1,activation='sigmoid',name=f'gate_{i}')\n", "        att_mask=softmax(att_mask_layer(x_pep),axis=-1)             #[None,max_registers,n_pep,n_mhc]    \n\t        att_mask=tile(att_mask[:,:,:,:,newaxis],[1,1,1,1,n_values]) #[None,max_registers,n_pep,n_mhc,n_values] \n\t        att_gate=tile(att_gate_layer(x_pep),[1,1,1,n_values])       #[None,max_registers,n_pep,n_values]     \n\t        x_pep+=att_gate*reduce_sum(att_mask*x_mhc,axis=3)           #[None,max_registers,n_pep,n_values] \n\t        x_pep=BatchNormalization()(x_pep)\n\t        #convolution\n\t        pep_conv_layer=Conv1D(n_values,kernel_size,strides=1,padding='same',activation=actn,name=f'pep_conv_{i}')\n\t        x_pep=pep_conv_layer(x_pep)\n\t        x_pep=BatchNormalization()(x_pep)\n\t    #output stack\n", "    if reduce_x:\n\t        x_pep=reduce_mean(x_pep,axis=2)     #[None,max_registers,n_values] \n\t    else:\n\t        pep_conv_reduce_layer=Conv1D(n_values_last,1,strides=1,padding='same',activation=actn,name='pep_conv_final')\n\t        x_pep=pep_conv_reduce_layer(x_pep)\n\t        x_pep=reshape(x_pep,[-1,max_registers,n_pep*n_values_last])\n\t    for i,n in enumerate(n_hidden):\n\t        dense_n=Dense(n,activation=actn,name=f'dense_{i}')\n\t        x_pep=Dropout(dropout_rate)(x_pep)   \n\t        x_pep=dense_n(x_pep)\n", "        x_pep=BatchNormalization()(x_pep)  \n\t    x=x_pep\n\t    dense_out=Dense(1,name='dense_output')\n\t    x=dense_out(x)    \n\t    x=x[:,:,0]    \n\t    return Model(inputs=[input_pep,input_mhc],outputs=x,name=model_name)\n\tdef attention_convolution1(params):\n\t    cl=params['cl']\n\t    n_pep=n_pep_dict[cl]\n\t    n_mhc=n_mhc_dict[cl]\n", "    max_registers=max_registers_dict[cl]    \n\t    actn=params['actn']    \n\t    dropout_rate=params['dropout_rate']     \n\t    model_name=f'attention_convolution'      \n\t    n_values=params['n_values']     \n\t    n_values_last=params['n_values_last']\n\t    kernel_size=params['kernel_size']\n\t    n_blocks=params['n_blocks']\n\t    reduce_x=params['reduce_x']\n\t    n_hidden=params['n_hidden']\n", "    if type(n_hidden)==int:\n\t        n_hidden=[n_hidden]\n\t    input_pep=Input(shape=(max_registers,n_pep,21),name='pep')\n\t    input_mhc=Input(shape=(n_mhc,21),name='mhc')        \n\t    #encode pep, add positional encoding\n\t    pep_embedding=Dense(n_values_pep,name='pep_embedding')\n\t    x_pep=pep_embedding(input_pep) #[None,max_registers,n_pep,n_values]\n\t    x_pep+=positional_encoding(n_pep,n_values_pep)[newaxis,newaxis,:,:]          \n\t    x_pep=BatchNormalization()(x_pep)\n\t    #encode mhc, add positional encoding\n", "    mhc_embedding=Dense(n_values_mhc,name='mhc_embedding')\n\t    x_mhc=mhc_embedding(input_mhc) #[None,n_mhc,n_values]    \n\t    x_mhc+=positional_encoding(n_mhc,n_values_mhc)[newaxis,:,:]\n\t    x_mhc=tile(x_mhc[:,newaxis,newaxis,:,:],[1,max_registers,n_pep,1,1]) #[None,max_registers,n_pep,n_mhc,n_values]\n\t    x_mhc=BatchNormalization()(x_mhc)\n\t    #attention   \n\t    #pep query\n\t    pep_query_layer=Dense(n_pep_att,activation=actn)\n\t    x_pep_flat=reshape(x_pep,[-1,max_registers,n_pep*n_values_pep])\n\t    pep_query=pep_query_layer(x_pep_flat) #[None,max_registers,n_pep_att]\n", "    att_mask_layer=Dense(n_mhc*n_pep,activation=actn)\n\t    att_mask=reshape(att_mask_layer(pep_query),[])   #[None,max_registers,n_mhc,n_pep]\n\t    for i in range(n_blocks):\n\t        att_mask_layer=Conv1D(n_mhc,1,strides=1,activation=None,name=f'att_mask_{i}')\n\t        att_gate_layer=Conv1D(1,1,strides=1,activation='sigmoid',name=f'gate_{i}')\n\t        att_mask=softmax(att_mask_layer(x_pep),axis=-1)             #[None,max_registers,n_pep,n_mhc]    \n\t        att_mask=tile(att_mask[:,:,:,:,newaxis],[1,1,1,1,n_values]) #[None,max_registers,n_pep,n_mhc,n_values] \n\t        att_gate=tile(att_gate_layer(x_pep),[1,1,1,n_values])       #[None,max_registers,n_pep,n_values]     \n\t        x_pep+=att_gate*reduce_sum(att_mask*x_mhc,axis=3)           #[None,max_registers,n_pep,n_values] \n\t        x_pep=BatchNormalization()(x_pep)\n", "        #convolution\n\t        pep_conv_layer=Conv1D(n_values,kernel_size,strides=1,padding='same',activation=actn,name=f'pep_conv_{i}')\n\t        x_pep=pep_conv_layer(x_pep)\n\t        x_pep=BatchNormalization()(x_pep)\n\t    #output stack\n\t    if reduce_x:\n\t        x_pep=reduce_mean(x_pep,axis=2)     #[None,max_registers,n_values] \n\t    else:\n\t        pep_conv_reduce_layer=Conv1D(n_values_last,1,strides=1,padding='same',activation=actn,name='pep_conv_final')\n\t        x_pep=pep_conv_reduce_layer(x_pep)\n", "        x_pep=reshape(x_pep,[-1,max_registers,n_pep*n_values_last])\n\t    for i,n in enumerate(n_hidden):\n\t        dense_n=Dense(n,activation=actn,name=f'dense_{i}')\n\t        x_pep=Dropout(dropout_rate)(x_pep)   \n\t        x_pep=dense_n(x_pep)\n\t        x_pep=BatchNormalization()(x_pep)  \n\t    x=x_pep\n\t    dense_out=Dense(1,name='dense_output')\n\t    x=dense_out(x)    \n\t    x=x[:,:,0]    \n", "    return Model(inputs=[input_pep,input_mhc],outputs=x,name=model_name)\n\tdef reduce_model_min(model,params):\n\t    cl=params['cl']        \n\t    max_registers=max_registers_dict[cl]    \n\t    inputs=model.inputs\n\t    input_regmask=Input(shape=(max_registers,),name='regmask')  \n\t    if params.get('use_crossentropy'):\n\t        shift=100. #for logits, larger shift is necessary\n\t    else:\n\t        shift=np.log10(50000.)\n", "    x=model(inputs)    \n\t    x+=(1-input_regmask)*shift #new runs: for run_n<=30, had *100 instead; problem: AF regmasks like (-1,7) would give huge error\n\t    x=reduce_min(x,axis=1)            \n\t    return Model(inputs=inputs+[input_regmask],outputs=x)\n\tdef reduce_model_sum(model,params):\n\t    cl=params['cl']        \n\t    max_registers=max_registers_dict[cl]   \n\t    c=np.log(10)\n\t    inputs=model.inputs\n\t    input_regmask=Input(shape=(max_registers,),name='regmask') \n", "    x=model(inputs)    \n\t    x=tf_exp(-x*c)*input_regmask\n\t    x=reduce_sum(x,axis=1)\n\t    x=tf_log(x)/c\n\t    return Model(inputs=inputs+[input_regmask],outputs=x)\n"]}
{"filename": "tfold/nn/pipeline.py", "chunked_list": ["import pickle\n\timport numpy as np\n\timport pandas as pd\n\tfrom tfold.config import data_dir, seqnn_params\n\tfrom tfold.nn import nn_utils\n\tfrom tfold.utils import seq_tools #used when mhc is given as allele rather than object\n\tseq_tools.load_mhcs()\n\tgap='-' #use same as appears in MHC gaps from seq_tools\n\t#one-hot\n\taa_ext=list('ACDEFGHIKLMNPQRSTVWY'+gap) #incl '-' for gap\n", "def _one_hot(seq,alphabet=aa_ext):\n\t    '''\n\t    one-hot encoding\n\t    '''\n\t    aa_array=np.array(list(alphabet))\n\t    la=len(aa_array)\n\t    return (np.repeat(list(seq),la).reshape(-1,la)==aa_array).astype(int)\n\t#pep input\n\tdef _cut_extend(p,lmax):\n\t    nl=min(lmax,len(p))//2+1\n", "    nr=min(lmax,len(p))-nl    \n\t    return p[:nl]+gap*max(0,lmax-len(p))+p[-nr:]\n\tdef encode_pep_i(pep,\n\t                 max_core_len=seqnn_params['max_core_len_I'],\n\t                 max_tail_len=seqnn_params['max_pep_len_I']-9,\n\t                 n_tail_bits=seqnn_params['n_tail_bits'],\n\t                 p00=0.):    \n\t    '''\n\t    takes pep sequence, max_core_len, probability p00; returns encoded pep matched to all possible registers, as defined in nn_utils;\n\t    two flanking residues kept or padded with '-';\n", "    peptide middle is trimmed if core length > max_core_len, otherwise middle padded to max_core_len with '-';\n\t    for len 9, with prob p00 assigns only trivial register\n\t    '''    \n\t    assert len(pep)>=8, 'cl 1 peptide too short!'\n\t    if len(pep)==9 and np.random.rand()<p00:\n\t        registers=[(0,0)]\n\t    else:\n\t        registers=nn_utils.generate_registers_I(len(pep))\n\t    results_pep=[]\n\t    results_tails=[]\n", "    for r in registers:        \n\t        pep1=gap*(max(1-r[0],0))+pep[max(r[0]-1,0):len(pep)-r[1]+1]+gap*(max(1-r[1],0))\n\t        pep1=_cut_extend(pep1,max_core_len+2)        \n\t        pep1=_one_hot(pep1)                \n\t        results_pep.append(pep1)        \n\t        results_tails.append(_encode_tails([r[0],r[1]],max_tail_len,n_tail_bits))\n\t    return np.array(results_pep),np.array(results_tails)\n\tdef _encode_tails(ls,max_len,n_bits):\n\t    return np.sin(np.pi/2*np.arange(1,n_bits+1)[np.newaxis,:]*np.array(ls)[:,np.newaxis]/max_len)    \n\tdef encode_pep_ii(pep,max_tail_len=seqnn_params['max_pep_len_II']-9,n_tail_bits=seqnn_params['n_tail_bits']):\n", "    '''\n\t    cut to cores of length 9, encode by one-hot encoding; return encoded pep, encoded tail lengths;\n\t    max_tail_len is used for normalization in tail length encoding\n\t    '''    \n\t    assert len(pep)>=9, 'cl 2 peptide too short!'\n\t    registers=nn_utils.generate_registers_II(len(pep))\n\t    results_pep=[]\n\t    results_tails=[]    \n\t    for r in registers:\n\t        results_pep.append(_one_hot(pep[r[0]:r[0]+9]))\n", "        results_tails.append(_encode_tails([r[0],r[1]],max_tail_len,n_tail_bits))\n\t    return np.array(results_pep),np.array(results_tails)\n\t#mhc input\n\twith open(data_dir+'/obj/pmhc_contacts_av.pckl','rb') as f:\n\t    pmhc_contacts=pickle.load(f)\n\tdef encode_mhc_i(mhc,n):\n\t    contacts_i=pmhc_contacts['I'][:n]['res'].values\n\t    return _one_hot(mhc.get_residues_by_pdbnums(contacts_i))\n\tdef encode_mhc_ii(mhc_a,mhc_b,n):\n\t    contacts_iia=[x for x in pmhc_contacts['II'][:n]['res'].values if x<'1001 ']\n", "    contacts_iib=[x for x in pmhc_contacts['II'][:n]['res'].values if x>='1001 ']\n\t    return _one_hot(np.concatenate([mhc_a.get_residues_by_pdbnums(contacts_iia),mhc_b.get_residues_by_pdbnums(contacts_iib)]))\n\tdef encode_mhc_i_allele(mhc,n):\n\t    return encode_mhc_i(seq_tools.mhcs[mhc],n)\n\tdef encode_mhc_ii_allele(mhc_a,mhc_b,n):\n\t    return encode_mhc_ii(seq_tools.mhcs[mhc_a],seq_tools.mhcs[mhc_b],n)\n\t#encoding pipelines\n\tdef _pad_registers(x,n_target):\n\t    '''\n\t    pad with random registers\n", "    '''\n\t    n=len(x[0])\n\t    assert n<=n_target, 'more than n_target registers'\n\t    if n<n_target:                \n\t        ind=[np.random.randint(n) for i in range(n_target-n)]\n\t        x=tuple([np.concatenate([y,np.array([y[i] for i in ind])]) for y in x])\n\t    return x\n\tdef _regmask_from_regnum(x,max_registers):\n\t    return (np.tile(np.arange(max_registers)[np.newaxis,:],[len(x),1])<x[:,np.newaxis]).astype(int)\n\tdef pipeline_i(df,mhc_as_obj=True,p00=0.):\n", "    '''\n\t    df must have 'pep' (str) and 'mhc_a' (tuple or NUMSEQ) columns;\n\t    mhc_as_obj: mhc given as NUMSEQ obj; set to False if given as alleles;\n\t    p00: for a fraction p00 of 9mers, use canonical register only\n\t    '''\n\t    #set params    \n\t    n_mhc=seqnn_params['n_mhc_I']\n\t    max_registers=len(nn_utils.generate_registers_I(seqnn_params['max_pep_len_I']))        \n\t    inputs={}\n\t    #encode and pad pep\n", "    pep_tails=df['pep'].map(lambda x: encode_pep_i(x,p00=p00))\n\t    inputs['n_reg']=pep_tails.map(lambda x: len(x[0])).values  #actual number of registers\n\t    inputs['regmask']=_regmask_from_regnum(inputs['n_reg'],max_registers)\n\t    del inputs['n_reg']\n\t    pep_tails=pep_tails.map(lambda x: _pad_registers(x,max_registers))\n\t    inputs['pep']=[x[0] for x in pep_tails.values]\n\t    inputs['tails']=[x[1] for x in pep_tails.values]          \n\t    #encode mhc         \n\t    if mhc_as_obj:\n\t        inputs['mhc']=df['mhc_a'].map(lambda x: encode_mhc_i(x,n_mhc)).values        \n", "    else:\n\t        inputs['mhc']=df['mhc_a'].map(lambda x: encode_mhc_i_allele(x,n_mhc)).values    \n\t    for k in ['pep','mhc','tails']:\n\t        inputs[k]=np.stack(inputs[k]) #array of obj to array\n\t    return inputs\n\tdef pipeline_ii(df,mhc_as_obj=True):    \n\t    #set params    \n\t    n_mhc=seqnn_params['n_mhc_II']                \n\t    max_registers=len(nn_utils.generate_registers_II(seqnn_params['max_pep_len_II']))          \n\t    inputs={}\n", "    #encode and pad pep    \n\t    pep_tails=df['pep'].map(lambda x: encode_pep_ii(x))              #(pep,tails) tuples\n\t    inputs['n_reg']=pep_tails.map(lambda x: len(x[0])).values        #save true reg numbers        \n\t    inputs['regmask']=_regmask_from_regnum(inputs['n_reg'],max_registers)\n\t    del inputs['n_reg']\n\t    pep_tails=pep_tails.map(lambda x: _pad_registers(x,max_registers))\n\t    inputs['pep']=[x[0] for x in pep_tails.values]\n\t    inputs['tails']=[x[1] for x in pep_tails.values]    \n\t    #encode mhc      \n\t    mhc_series=df[['mhc_a','mhc_b']].apply(tuple,axis=1)\n", "    if mhc_as_obj:\n\t        inputs['mhc']=mhc_series.map(lambda x: encode_mhc_ii(*x,n_mhc)).values    \n\t    else:\n\t        inputs['mhc']=mhc_series.map(lambda x: encode_mhc_ii_allele(*x,n_mhc)).values       \n\t    for k in ['pep','mhc','tails']:\n\t        inputs[k]=np.stack(inputs[k]) #array of obj to array\n\t    return inputs\n"]}
{"filename": "tfold/nn/nn_predict.py", "chunked_list": ["import os\n\timport pickle\n\timport numpy as np\n\timport json\n\tfrom tfold.nn import pipeline as tfold_pipeline\n\tfrom tfold.nn import models as tfold_models\n\tfrom tfold.nn import nn_utils\n\tfrom tfold.config import seqnn_obj_dir\n\tdef _create_kd_arrays(cl,l):\n\t    if cl=='I':\n", "        tails=nn_utils.generate_registers_I(l)\n\t    else:\n\t        tails=nn_utils.generate_registers_II(l)    \n\t    return {'tails':tails,'logkds':[]}\n\tdef predict(df,cl,mhc_as_obj=False,model_list=None,params_dir=None,weights_dir=None,keep_all_predictions=False):\n\t    df=df.copy()\n\t    #prepare data\n\t    if cl=='I':\n\t        pipeline=tfold_pipeline.pipeline_i\n\t        df['tails_all']=df['pep'].map(lambda x: nn_utils.generate_registers_I(len(x)))\n", "    else:\n\t        pipeline=tfold_pipeline.pipeline_ii\n\t        df['tails_all']=df['pep'].map(lambda x: nn_utils.generate_registers_II(len(x)))\n\t    df['logkd_all']=[[] for i in range(len(df))]\n\t    inputs=pipeline(df,mhc_as_obj=mhc_as_obj)         \n\t    #prepare params and such\n\t    params_dir=params_dir or (seqnn_obj_dir+'/params')\n\t    weights_dir=weights_dir or (seqnn_obj_dir+'/weights')    \n\t    if model_list:\n\t        pass\n", "    else:\n\t        with open(seqnn_obj_dir+f'/model_list_{cl}.pckl','rb') as f:\n\t            model_list=pickle.load(f)        \n\t    n_k=len(model_list[0]) #(run_n,model_n) or (run_n,model_n,split_n,copy_n)\n\t    params_all={}    \n\t    for filename in os.listdir(params_dir): \n\t        run_n=int(filename.split('.')[0].split('_')[1])        \n\t        with open(params_dir+'/'+filename) as f:\n\t            d=json.load(f) \n\t        for x in d:\n", "            k=(run_n,x['model_n'],x['split_n'],x['copy_n'])            \n\t            if k[:n_k] in model_list:\n\t                params_all[k]=x                \n\t    #do inference    \n\t    #use logkd, not kd in names!    \n\t    model_list_full=list(params_all.keys())\n\t    print(f'making Kd predictions for {len(df)} pmhcs...')\n\t    for k in model_list_full:\n\t        params=params_all[k]\n\t        model_func=getattr(tfold_models,params['model'])        \n", "        model=model_func(params)\n\t        weight_path=weights_dir+f'/run_{cl}_'+'_'.join([f'{kk}' for kk in k])\n\t        model.load_weights(weight_path)\n\t        outputs=model(inputs).numpy()\n\t        for x,y,z in zip(df['logkd_all'],df['tails_all'],outputs):\n\t            x.append(z[:len(y)])\n\t    df['logkd_all']=df['logkd_all'].map(np.array)    \n\t    x=df['logkd_all'].map(lambda x:np.average(x,axis=0))    \n\t    df['seqnn_logkds_all']=[np.array([tuple(c) for c in zip(b,a)],\n\t                            dtype=[('tail',object),('logkd',float)])\n", "                            for a,b in zip(x,df['tails_all'])]\n\t    df['seqnn_logkd']=x.map(np.min)\n\t    df['seqnn_tails']=x.map(np.argmin)\n\t    df['seqnn_tails']=df[['seqnn_tails','tails_all']].apply(lambda x: x['tails_all'][x['seqnn_tails']],axis=1)    \n\t    if not keep_all_predictions:\n\t        df=df.drop(['logkd_all','tails_all'],axis=1)\n\t        return df\n\t    else:\n\t        return df,model_list_full        \n"]}
{"filename": "tfold/nn/__init__.py", "chunked_list": []}
