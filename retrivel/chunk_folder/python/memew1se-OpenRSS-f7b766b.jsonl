{"filename": "api/__init__.py", "chunked_list": []}
{"filename": "api/manage.py", "chunked_list": ["#!/usr/bin/env python\n\t\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n\timport os\n\timport sys\n\tdef main():\n\t    \"\"\"Run administrative tasks.\"\"\"\n\t    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n\t    try:\n\t        from django.core.management import execute_from_command_line\n\t    except ImportError as exc:\n", "        raise ImportError(\n\t            \"Couldn't import Django. Are you sure it's installed and \"\n\t            \"available on your PYTHONPATH environment variable? Did you \"\n\t            \"forget to activate a virtual environment?\"\n\t        ) from exc\n\t    execute_from_command_line(sys.argv)\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "api/config/urls.py", "chunked_list": ["\"\"\"config URL Configuration\n\tThe `urlpatterns` list routes URLs to views. For more information please see:\n\t    https://docs.djangoproject.com/en/4.1/topics/http/urls/\n\tExamples:\n\tFunction views\n\t    1. Add an import:  from my_app import views\n\t    2. Add a URL to urlpatterns:  path('', views.home, name='home')\n\tClass-based views\n\t    1. Add an import:  from other_app.views import Home\n\t    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n", "Including another URLconf\n\t    1. Import the include() function: from django.urls import include, path\n\t    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\t\"\"\"\n\tfrom django.contrib import admin\n\tfrom django.urls import include, path\n\turlpatterns = [\n\t    path(\"api/admin/\", admin.site.urls),\n\t    path(\"api/\", include(\"apps.rss.urls\")),\n\t]\n"]}
{"filename": "api/config/__init__.py", "chunked_list": []}
{"filename": "api/config/shared.py", "chunked_list": ["from typing import Optional\n\tfrom aiohttp import ClientSession\n\tAIOHTTP_SESSION: Optional[ClientSession] = None\n"]}
{"filename": "api/config/asgi.py", "chunked_list": ["\"\"\"\n\tASGI config for config project.\n\tIt exposes the ASGI callable as a module-level variable named ``application``.\n\tFor more information on this file, see\n\thttps://docs.djangoproject.com/en/4.1/howto/deployment/asgi/\n\t\"\"\"\n\timport os\n\tfrom django.core.asgi import get_asgi_application\n\tos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n\tapplication = get_asgi_application()\n"]}
{"filename": "api/config/wsgi.py", "chunked_list": ["\"\"\"\n\tWSGI config for config project.\n\tIt exposes the WSGI callable as a module-level variable named ``application``.\n\tFor more information on this file, see\n\thttps://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/\n\t\"\"\"\n\timport os\n\tfrom django.core.wsgi import get_wsgi_application\n\tos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n\tapplication = get_wsgi_application()\n"]}
{"filename": "api/config/settings/base.py", "chunked_list": ["\"\"\"\n\tDjango settings for config project.\n\tGenerated by 'django-admin startproject' using Django 4.1.7.\n\tFor more information on this file, see\n\thttps://docs.djangoproject.com/en/4.1/topics/settings/\n\tFor the full list of settings and their values, see\n\thttps://docs.djangoproject.com/en/4.1/ref/settings/\n\t\"\"\"\n\timport os\n\tfrom pathlib import Path\n", "from aiohttp import ClientSession\n\tfrom dotenv import load_dotenv\n\tfrom .. import shared\n\tload_dotenv()\n\t# Build paths inside the project like this: BASE_DIR / 'subdir'.\n\tBASE_DIR = Path(__file__).resolve().parent.parent.parent\n\t# Quick-start development settings - unsuitable for production\n\t# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\t# SECURITY WARNING: keep the secret key used in production secret!\n\tSECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\", \"secret\")\n", "# Application definition\n\tINSTALLED_APPS = [\n\t    \"django.contrib.admin\",\n\t    \"django.contrib.auth\",\n\t    \"django.contrib.contenttypes\",\n\t    \"django.contrib.sessions\",\n\t    \"django.contrib.messages\",\n\t    \"django.contrib.staticfiles\",\n\t    # 3rd-party apps\n\t    \"rest_framework\",\n", "    \"adrf\",\n\t    # Local apps\n\t    \"apps.rss.apps.RssConfig\",\n\t]\n\tMIDDLEWARE = [\n\t    \"django.middleware.security.SecurityMiddleware\",\n\t    \"django.contrib.sessions.middleware.SessionMiddleware\",\n\t    \"django.middleware.common.CommonMiddleware\",\n\t    \"django.middleware.csrf.CsrfViewMiddleware\",\n\t    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n", "    \"django.contrib.messages.middleware.MessageMiddleware\",\n\t    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n\t]\n\tROOT_URLCONF = \"config.urls\"\n\tTEMPLATES = [\n\t    {\n\t        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n\t        \"DIRS\": [],\n\t        \"APP_DIRS\": True,\n\t        \"OPTIONS\": {\n", "            \"context_processors\": [\n\t                \"django.template.context_processors.debug\",\n\t                \"django.template.context_processors.request\",\n\t                \"django.contrib.auth.context_processors.auth\",\n\t                \"django.contrib.messages.context_processors.messages\",\n\t            ],\n\t        },\n\t    },\n\t]\n\tWSGI_APPLICATION = \"config.wsgi.application\"\n", "# Database\n\t# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\tDATABASES = {\n\t    \"default\": {\n\t        \"ENGINE\": \"django.db.backends.postgresql\",\n\t        \"OPTIONS\": {\"options\": f\"-c search_path={os.environ.get('DB_SCHEMA')},public\"},\n\t        \"NAME\": os.environ.get(\"DB_NAME\", \"database\"),\n\t        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n\t        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"password\"),\n\t        \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n", "        \"PORT\": os.environ.get(\"DB_PORT\", 5432),\n\t    }\n\t}\n\t# Password validation\n\t# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\tAUTH_PASSWORD_VALIDATORS = [\n\t    {\n\t        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n\t    },\n\t    {\n", "        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n\t    },\n\t    {\n\t        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n\t    },\n\t    {\n\t        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n\t    },\n\t]\n\t# Internationalization\n", "# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\tLANGUAGE_CODE = \"en-us\"\n\tTIME_ZONE = \"UTC\"\n\tUSE_I18N = True\n\tUSE_TZ = True\n\t# Static files (CSS, JavaScript, Images)\n\t# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\tSTATIC_ROOT = os.path.join(BASE_DIR, \"assets/static\")\n\tSTATIC_URL = \"/api/static/\"\n\tMEDIA_ROOT = os.path.join(BASE_DIR, \"assets/media\")\n", "MEDIA_URL = \"/api/media/\"\n\t# Default primary key field type\n\t# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\tDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\tshared.AIOHTTP_SESSION = ClientSession()\n\tCACHES = {\n\t    \"default\": {\n\t        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n\t        \"LOCATION\": os.environ.get(\"REDIS_URL\", \"redis://redis:6379\"),\n\t    }\n", "}\n"]}
{"filename": "api/config/settings/production.py", "chunked_list": ["from .base import *  # noqa\n\tDEBUG = False\n\t# TODO: change this in prod\n\tALLOWED_HOSTS = (\"<hostname>\",)\n\tCACHE_MIDDLEWARE_ALIAS = \"default\"\n\tCACHE_MIDDLEWARE_SECONDS = 60 * 60\n\tCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\n\tREST_FRAMEWORK = {\n\t    \"DEFAULT_RENDERER_CLASSES\": (\"rest_framework.renderers.JSONRenderer\",)\n\t}\n"]}
{"filename": "api/config/settings/local.py", "chunked_list": ["from .base import *  # noqa\n\tDEBUG = True\n\tALLOWED_HOSTS = [\"*\"]\n\tCSRF_TRUSTED_ORIGINS = [\"http://localhost\"]\n\tCACHE_MIDDLEWARE_ALIAS = \"default\"\n\tCACHE_MIDDLEWARE_SECONDS = 5\n\tCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\n\tREST_FRAMEWORK = {\n\t    \"DEFAULT_RENDERER_CLASSES\": (\n\t        # \"rest_framework.renderers.BrowsableAPIRenderer\",\n", "        \"rest_framework.renderers.JSONRenderer\",\n\t    )\n\t}\n"]}
{"filename": "api/config/settings/__init__.py", "chunked_list": []}
{"filename": "api/config/settings/test.py", "chunked_list": ["from .base import *  # noqa\n\tDEBUG = True\n\tDATABASES = {\n\t    \"default\": {\n\t        \"ENGINE\": \"django.db.backends.sqlite3\",\n\t        \"NAME\": BASE_DIR / \"db.sqlite3\",  # noqa F405\n\t    }\n\t}\n\tCACHES = {\n\t    \"default\": {\n", "        \"BACKEND\": \"django.core.cache.backends.dummy.DummyCache\",\n\t    }\n\t}\n\tPASSWORD_HASHERS = (\"django.contrib.auth.hashers.MD5PasswordHasher\",)\n"]}
{"filename": "api/apps/__init__.py", "chunked_list": []}
{"filename": "api/apps/rss/models.py", "chunked_list": ["from django.db import models\n\tclass Feed(models.Model):\n\t    id = models.BigAutoField(primary_key=True)\n\t    title = models.CharField(\n\t        max_length=512, verbose_name=\"Заголовок\", help_text=\"Заголовок RSS-канала\"\n\t    )\n\t    url = models.URLField(verbose_name=\"Ссылка\", help_text=\"Ссылка на RSS\")\n\t    class Meta:\n\t        abstract = True\n\t    def __str__(self):\n", "        return self.title\n\tclass MainFeed(Feed):\n\t    slug = models.SlugField(\n\t        unique=True, verbose_name=\"Слаг\", help_text=\"Слаг RSS-канала\"\n\t    )\n\t    class Meta:\n\t        verbose_name = \"Основной RSS-канал\"\n\t        verbose_name_plural = \"Основные RSS-каналы\"\n"]}
{"filename": "api/apps/rss/urls.py", "chunked_list": ["from django.urls import re_path\n\tfrom .views import MainFeedListView, MainFeedRetrieveView\n\turlpatterns = (\n\t    re_path(r\"^main-feed/?$\", MainFeedListView.as_view(), name=\"rss-main-feed-list\"),\n\t    re_path(\n\t        r\"^main-feed/(?P<slug>[\\w-]+)/?$\",\n\t        MainFeedRetrieveView.as_view(),\n\t        name=\"rss-main-feed-retrieve\",\n\t    ),\n\t)\n"]}
{"filename": "api/apps/rss/views.py", "chunked_list": ["import datetime\n\timport feedparser\n\tfrom adrf.views import APIView as AsyncAPIView\n\tfrom django.core.cache import cache\n\tfrom feedparser import FeedParserDict\n\tfrom rest_framework.request import Request\n\tfrom rest_framework.response import Response\n\tfrom config import shared\n\tfrom .models import MainFeed\n\tclass MainFeedListView(AsyncAPIView):\n", "    async def get(self, request: Request) -> Response:\n\t        mf = MainFeed.objects.aiterator()\n\t        data = [\n\t            {\"id\": feed.id, \"slug\": feed.slug, \"title\": feed.title, \"url\": feed.url}\n\t            async for feed in mf\n\t        ]\n\t        return Response(data)\n\tclass MainFeedRetrieveView(AsyncAPIView):\n\t    async def get(self, request: Request, **kwargs: dict):\n\t        # getting parameters\n", "        slug = kwargs[\"slug\"]\n\t        date = datetime.datetime.now()\n\t        minutes_quart = date.minute // 15\n\t        # getting cache\n\t        feed_key = f\"{slug}-{date.strftime('%d-%m-%Y-%H')}-{minutes_quart}\"\n\t        cached_rss = await cache.aget(feed_key)\n\t        if cached_rss:\n\t            return Response(cached_rss)\n\t        else:\n\t            # getting and parsing feed\n", "            feed = await MainFeed.objects.aget(slug=slug)\n\t            async with shared.AIOHTTP_SESSION.get(feed.url) as resp:\n\t                text = await resp.text()\n\t            fd: FeedParserDict = feedparser.parse(text)\n\t            rss = {\"channel\": fd.channel, \"entries\": fd.entries}\n\t            # setting cache\n\t            cache_time = 15 * 60 - (date.minute % 15 * 60 + date.second)\n\t            await cache.aset(feed_key, rss, cache_time)\n\t            return Response(rss)\n"]}
{"filename": "api/apps/rss/__init__.py", "chunked_list": []}
{"filename": "api/apps/rss/apps.py", "chunked_list": ["from django.apps import AppConfig\n\tclass RssConfig(AppConfig):\n\t    default_auto_field = \"django.db.models.BigAutoField\"\n\t    name = \"apps.rss\"\n"]}
{"filename": "api/apps/rss/admin.py", "chunked_list": ["from django.contrib import admin\n\tfrom apps.rss.models import MainFeed\n\tadmin.site.register(MainFeed)\n"]}
{"filename": "api/apps/rss/migrations/0001_initial.py", "chunked_list": ["# Generated by Django 4.2 on 2023-04-19 08:26\n\tfrom django.db import migrations, models\n\tclass Migration(migrations.Migration):\n\t    initial = True\n\t    dependencies = []\n\t    operations = [\n\t        migrations.CreateModel(\n\t            name=\"MainFeed\",\n\t            fields=[\n\t                (\"id\", models.BigAutoField(primary_key=True, serialize=False)),\n", "                (\n\t                    \"title\",\n\t                    models.CharField(\n\t                        help_text=\"Заголовок RSS-канала\",\n\t                        max_length=512,\n\t                        verbose_name=\"Заголовок\",\n\t                    ),\n\t                ),\n\t                (\n\t                    \"url\",\n", "                    models.URLField(help_text=\"Ссылка на RSS\", verbose_name=\"Ссылка\"),\n\t                ),\n\t                (\n\t                    \"slug\",\n\t                    models.SlugField(help_text=\"Слаг RSS-канала\", verbose_name=\"Слаг\"),\n\t                ),\n\t            ],\n\t            options={\n\t                \"verbose_name\": \"Основной RSS-канал\",\n\t                \"verbose_name_plural\": \"Основные RSS-каналы\",\n", "            },\n\t        ),\n\t    ]\n"]}
{"filename": "api/apps/rss/migrations/__init__.py", "chunked_list": []}
{"filename": "api/apps/rss/migrations/0002_alter_mainfeed_slug.py", "chunked_list": ["# Generated by Django 4.2 on 2023-04-19 08:35\n\tfrom django.db import migrations, models\n\tclass Migration(migrations.Migration):\n\t    dependencies = [\n\t        (\"rss\", \"0001_initial\"),\n\t    ]\n\t    operations = [\n\t        migrations.AlterField(\n\t            model_name=\"mainfeed\",\n\t            name=\"slug\",\n", "            field=models.SlugField(\n\t                help_text=\"Слаг RSS-канала\", unique=True, verbose_name=\"Слаг\"\n\t            ),\n\t        ),\n\t    ]\n"]}
