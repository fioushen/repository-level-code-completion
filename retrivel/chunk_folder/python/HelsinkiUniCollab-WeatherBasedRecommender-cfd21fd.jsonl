{"filename": "recommender-back/tasks.py", "chunked_list": ["from invoke import task\n\t@task\n\tdef start(ctx):\n\t    ctx.run(\"poetry run flask --app src/app --debug run\", pty=True)\n\t@task\n\tdef test(ctx):\n\t    ctx.run(\"poetry run pytest -s src/tests\", pty=True)\n\t@task\n\tdef pylint(ctx):\n\t    ctx.run(\"poetry run pylint src\", pty=True)\n"]}
{"filename": "recommender-back/src/app.py", "chunked_list": ["import os\n\tfrom flask import Flask\n\tfrom flask_caching import Cache\n\tfrom flask_cors import CORS\n\tfrom dotenv import load_dotenv\n\tfrom .config import Config\n\tload_dotenv()\n\tif os.environ.get('CACHE_MODE') == 'simple':\n\t    CACHE_TYPE = 'SimpleCache'\n\telse:\n", "    CACHE_TYPE = 'redis'\n\tconfig = {\n\t    \"DEBUG\": True,\n\t    \"CACHE_TYPE\": CACHE_TYPE,\n\t    \"CACHE_REDIS_URL\": Config.CACHE_REDIS_URL,\n\t    \"CACHE_DEFAULT_TIMEOUT\": 3600\n\t}\n\tapp = Flask(__name__)\n\tapp.config.from_mapping(config)\n\tCORS(app)\n", "cache = Cache(app)\n\tfrom src import routes\n"]}
{"filename": "recommender-back/src/config.py", "chunked_list": ["class Config:\n\t    BBOX = '24.5,60,25.5,60.5'\n\t    BBOX_AQI = '24.857740,60.137557,25.226838,60.278260'\n\t    TIMESTEP = 60\n\t    PARAMETERS = 'Temperature,Humidity,WindUMS,WindVMS,PrecipitationAmount,TotalCloudCover'\n\t    AQI_PARAMS = 'AQIndex'\n\t    FMI_QUERY_URL = 'http://opendata.fmi.fi/wfs?service=WFS&version=2.0.0&request=getFeature&storedquery_id='\n\t    AQI_QUERY = 'fmi::forecast::enfuser::airquality::helsinki-metropolitan::grid'\n\t    FILEREF_MEMBER = './/{http://www.opengis.net/gml/3.2}fileReference'\n\t    FORECAST_PARAMETERS = 'Temperature,Humidity,WindUMS,WindVMS,PrecipitationAmount,TotalCloudCover'\n", "    AIRQUALITY_PARAMETERS = 'AQINDEX_PT1H_avg'\n\t    CACHE_REDIS_URL = 'redis://redis:6379/0'\n\t    AQI_CACHE_TO = 86400\n"]}
{"filename": "recommender-back/src/__init__.py", "chunked_list": []}
{"filename": "recommender-back/src/routes.py", "chunked_list": ["import json\n\timport requests\n\timport os\n\tfrom .config import Config\n\tfrom flask import jsonify, request\n\tfrom .app import app, cache\n\tfrom .apis.aqi import AQI\n\tfrom .apis.forecast import Forecast\n\tfrom .apis.current import Current\n\tfrom .apis.pathing import GreenPathsAPI\n", "from .apis import manager\n\tfrom .services.data_fetcher import DataFetcher\n\tweather_fetcher = DataFetcher()\n\t@app.route(\"/\", methods=[\"GET\"])\n\tdef index():\n\t    \"\"\"\n\t    Handler for the root endpoint.\n\t    Returns:\n\t        A JSON response containing a greeting message.\n\t    \"\"\"\n", "    data = {\"message\": \"Hello from the backend!\", \"status\": 200}\n\t    return jsonify(data)\n\t@app.route(\"/api/forecast\", methods=[\"GET\"])\n\t@cache.cached()\n\tdef get_forecast():\n\t    \"\"\"\n\t    Handler for the '/api/forecast' endpoint. Caching 1 hour.\n\t    Returns:\n\t        Forecast for the POI's.\n\t    \"\"\"\n", "    forecast = Forecast(weather_fetcher)\n\t    fore_query_time = forecast.update_data()\n\t    fore_query_time_str = fore_query_time.strftime('%Y-%m-%d %H:%M:%S')\n\t    aqi_data =  None\n\t    aqi_data_url = os.environ.get(\"REACT_APP_BACKEND_URL\") + f\"/api/aqi/?forecast_q_time={fore_query_time_str}\"\n\t    response = requests.get(aqi_data_url, timeout=1200)\n\t    aqi_data = response.json()\n\t    pois = manager.get_pois()\n\t    poi_forecast = forecast.get_closest_poi_coordinates_data(pois, aqi_data)\n\t    result = json.dumps(poi_forecast)\n", "    return result\n\t@app.route(\"/api/aqi/\", methods=[\"GET\"])\n\t@cache.cached(timeout=Config.AQI_CACHE_TO)\n\tdef get_aqi_forecast():\n\t    \"\"\"\n\t    Handler for the '/api/aqi' endpoint. Caching 24 hours.\n\t    Returns:\n\t        string: Aqi forecast for the POI's in json format\n\t    \"\"\"\n\t    forecast_q_time = request.args.get(\"forecast_q_time\")\n", "    aqi = AQI()\n\t    aqi.download_netcdf_and_store(forecast_q_time)\n\t    pois = manager.get_pois()\n\t    aqi_data = aqi.to_json(pois)\n\t    result = json.dumps(aqi_data)\n\t    return result\n\t@app.route(\"/api/poi/\", methods=[\"GET\"])\n\tdef get_poi_data():\n\t    \"\"\"\n\t    Handler for the '/api/poi' endpoint.\n", "    Returns:\n\t        Poi data if errors have not occurred.\n\t    \"\"\"\n\t    return manager.get_pois_as_json()\n\t@app.route(\"/api/poi/<accessibility>\", methods=[\"GET\"])\n\tdef get_poi_acessible_poi_data(accessibility):\n\t    \"\"\"\n\t    Handler for the '/api/poi' endpoint.\n\t    Returns:\n\t        POI-data if errors have not occurred.\n", "    \"\"\"\n\t    return manager.get_pois_as_json(accessibility)\n\t@app.route(\"/api/simulator\", methods=[\"POST\"])\n\tdef get_simulated_poi_data():\n\t    \"\"\"\n\t    Handler for the '/api/poi' endpoint.\n\t    Returns:\n\t        Poi data if errors have not occurred.\n\t    \"\"\"\n\t    data = request.get_json()\n", "    air_temperature = data.get('air_temperature')\n\t    wind_speed = data.get('wind_speed')\n\t    humidity = data.get('humidity')\n\t    precipitation = data.get('precipitation')\n\t    cloud_amount = data.get('cloud_amount')\n\t    air_quality = data.get('air_quality')\n\t    current_time = data.get('current_time')\n\t    sunrise = data.get('sunrise')\n\t    sunset = data.get('sunset')\n\t    if '' in [air_temperature, wind_speed, humidity, precipitation, cloud_amount, air_quality, current_time, sunrise, sunset]:\n", "        return jsonify({\"error\": \"Missing parameters\"}), 400\n\t    return manager.get_simulated_pois_as_json(air_temperature, wind_speed, humidity,\n\t                                              precipitation, cloud_amount, air_quality, current_time, sunrise, sunset)\n\t@app.route(\"/api/warning\", methods=[\"GET\"])\n\t@cache.cached()\n\tdef get_weather_warning():\n\t    \"\"\"\n\t    Handler for the '/api/warning' endpoint. \n\t    Returns:\n\t        Boolean according to if there is weather warning.\n", "    \"\"\"\n\t    current = Current(weather_fetcher)\n\t    warning = current.get_current_weather_warning(\"Helsinki Kaisaniemi\")\n\t    return jsonify(warning)\n\t@app.route('/path', methods=['GET'])\n\tdef get_path():\n\t    \"\"\"\n\t    Handler for the '/api/path' endpoint.\n\t    Returns:\n\t        Coordinates for the route based on request parameters.\n", "    \"\"\"\n\t    start_coords = request.args.get('start', None)\n\t    end_coords = request.args.get('end', None)\n\t    if not start_coords or not end_coords:\n\t        return jsonify({\"error\": \"Missing start or end coordinates\"}), 400\n\t    try:\n\t        start_coords = tuple(map(float, start_coords.split(',')))\n\t        end_coords = tuple(map(float, end_coords.split(',')))\n\t    except ValueError:\n\t        return jsonify({\"error\": \"Invalid coordinates\"}), 400\n", "    green_paths = GreenPathsAPI(start_coords, end_coords)\n\t    if route_coordinates := green_paths.route_coordinates:\n\t        return jsonify(route_coordinates), 200\n\t    return jsonify({\"error\": \"Could not fetch route data\"}), 500\n\t@app.errorhandler(404)\n\tdef not_found_error(error):\n\t    \"\"\"\n\t    Error handler for the 404 (Not Found) error.\n\t    \"\"\"\n\t    error_data = {\"message\": \"Resource not found\", \"status\": error.code}\n", "    return jsonify(error_data), 404\n\t@app.errorhandler(500)\n\tdef internal_error(error):\n\t    \"\"\"\n\t    Error handler for the 500 (Internal Server Error) error.\n\t    \"\"\"\n\t    error_data = {\"message\": \"Internal server error\", \"status\": error.code}\n\t    return jsonify(error_data), 500\n"]}
{"filename": "recommender-back/src/apis/times.py", "chunked_list": ["import datetime as dt\n\timport pytz\n\tfrom datetime import datetime\n\tfrom suntime import Sun\n\tfrom dateutil import tz\n\tdef get_sun_data():\n\t    '''\n\t    Get info of sunrise and sunset based on date.\n\t    Returns:\n\t        Tuple: sunrise and sunset in formatted string.\n", "    '''\n\t    date = dt.date.today()\n\t    sun = Sun(60.192059, 24.945831)\n\t    sunrise = sun.get_local_sunrise_time(date)\n\t    sunset = sun.get_local_sunset_time(date)\n\t    str_sunrise = sunrise.strftime('%H:%M')\n\t    str_sunset = sunset.strftime('%H:%M')\n\t    return str_sunrise, str_sunset\n\tdef get_current_time(plus=None):\n\t    '''\n", "    Retrieves the current time as a formatted string.\n\t    plus; number of hours added to datetime.now()\n\t    Returns:\n\t        str: The current time in the formatted string.\n\t    '''\n\t    if plus is None:\n\t        time = dt.datetime.now()\n\t    else:\n\t        time = dt.datetime.now() + dt.timedelta(hours=plus)\n\t    return time.strftime('%H:%M')\n", "def utc_to_finnish(datetime):\n\t    '''\n\t    Converts a UTC datetime object to the corresponding time in the Finnish timezone.\n\t    Args:\n\t        datetime (datetime): The UTC datetime object to be converted.\n\t    Returns:\n\t        datetime: The datetime object converted to the Finnish timezone.\n\t    '''\n\t    set_utc = datetime.replace(tzinfo=tz.UTC)\n\t    get_timezone = tz.gettz('Europe/Helsinki')\n", "    return set_utc.astimezone(get_timezone)\n\tdef forecast_q_time_to_finnish(fore_q_time):\n\t    '''\n\t    Converts forecast query time into Finnish time format\n\t    Returns:\n\t        string: converted time in Finnish timezone format\n\t    '''\n\t    finland_tz = pytz.timezone('Europe/Helsinki')\n\t    fore_q_time_datetime = datetime.strptime(fore_q_time, '%Y-%m-%d %H:%M:%S')\n\t    fore_q_time_finnish = fore_q_time_datetime.replace(tzinfo=pytz.utc).astimezone(finland_tz)\n", "    return fore_q_time_finnish\n\tdef get_forecast_times():\n\t    '''\n\t    Retrieves the current time, start time, and end time for a forecast.\n\t    Returns:\n\t        Tuple: A tuple containing the current time, start time, and end time as formatted strings.\n\t    '''\n\t    current_time = dt.datetime.now(dt.timezone.utc)\n\t    start_time = current_time.strftime('%Y-%m-%dT%H:%M:%SZ')\n\t    end_time = (current_time + dt.timedelta(days=1, hours=1)\n", "                ).strftime('%Y-%m-%dT%H:%M:%SZ')\n\t    return current_time, start_time, end_time\n\tdef time_from_string(time_str):\n\t    '''\n\t    Converts a given time string or datetime.datetime object into a datetime.time object.\n\t    Args:\n\t        time_str (Union[str, datetime.datetime]): The time representation, either as a string formatted as \"%H:%M\" or as a datetime.datetime object.\n\t    Returns:\n\t        datetime.time: The time extracted from the input.\n\t    Raises:\n", "        ValueError: If the provided string is not formatted correctly.\n\t    '''\n\t    if isinstance(time_str, dt.datetime):\n\t        return time_str.time()\n\t    return dt.datetime.strptime(time_str, \"%H:%M\").time()\n"]}
{"filename": "recommender-back/src/apis/poi.py", "chunked_list": ["import math\n\tfrom . import times\n\tclass PointOfInterest:\n\t    def __init__(self, name=None, latitude=None, longitude=None, not_accessible_for=None, categories=None):\n\t        self.sun = times.get_sun_data()\n\t        self.name = name\n\t        self.latitude = latitude\n\t        self.longitude = longitude\n\t        self.not_accessible_for = not_accessible_for\n\t        self.categories = []\n", "        self.categories = categories\n\t        self.weather = {}\n\t        self.categorytype = None\n\t    def calculate_score(self, cur_time=None, sunrise=None, sunset=None):\n\t        '''\n\t        Chooses which algorithm to use in scoring.\n\t        Must be manually handled to adjust when adding new points of interest.\n\t        '''\n\t        indoor_categories = ['Sport halls']\n\t        outdoor_categories = ['Open air pools and beaches',\n", "                              'Athletic fields and venues', 'Neighbourhood sports facilities and parks']\n\t        if sunrise is None and sunset is None:\n\t            sunrise, sunset = self.sun\n\t        sunrise_time = times.time_from_string(sunrise)\n\t        sunset_time = times.time_from_string(sunset)\n\t        for category in self.categories:\n\t            for timeinterval, data in enumerate(self.weather.values()):\n\t                if cur_time is None:\n\t                    cur_time = times.get_current_time(timeinterval)\n\t                current_time = times.time_from_string(cur_time)\n", "                wind_speed = float(data.get('Wind speed').split(' ')[0])\n\t                precipitation = float(data.get('Precipitation').split(' ')[0])\n\t                clouds = float(data.get('Cloud amount').split(' ')[0]) * 0.01\n\t                temperature = float(data.get('Air temperature').split(' ')[0])\n\t                humidity = float(data.get('Humidity').split(' ')[0]) * 0.01\n\t                if category in outdoor_categories:\n\t                    self.categorytype = \"Outdoor\"\n\t                    data['Score'] = self._outdoor_score(temperature, wind_speed, humidity,\n\t                                                        precipitation, clouds, sunrise_time, sunset_time, current_time)\n\t                elif category in indoor_categories:\n", "                    self.categorytype = \"Indoor\"\n\t                    data['Score'] = self._indoor_score(temperature, wind_speed, humidity,\n\t                                                       precipitation, clouds, sunrise_time, sunset_time, current_time)\n\t    def _outdoor_score(self, temperature, wind_speed, humidity, precipitation, clouds, sunrise_time, sunset_time, current_time):\n\t        '''\n\t        Calculates the score for an outdoor point of interest based on weather conditions.\n\t        Returns:\n\t            float: The calculated score for the outdoor point of interest.\n\t        '''\n\t        precipitation_weight = 0.35\n", "        temperature_weight = 0.3\n\t        clouds_weight = 0.04\n\t        wind_speed_weight = 0.04\n\t        # Scoring\n\t        score = precipitation_weight * math.exp(-precipitation)\n\t        temperature_comp = 0\n\t        if 20 <= temperature <= 25:\n\t            temperature_comp = 1\n\t        elif temperature < 20:\n\t            temperature_comp = math.exp(-0.1 * (20 - temperature))\n", "        else:\n\t            temperature_comp = math.exp(0.1 * (25 - temperature))\n\t        score += temperature_weight * temperature_comp\n\t        if sunrise_time <= current_time <= sunset_time:\n\t            day_time_weight = 0.2\n\t            score += day_time_weight\n\t        # score += air_weight * math.exp(0.5 * 1- air)\n\t        score += clouds_weight * math.exp(-clouds)\n\t        score += wind_speed_weight * math.exp(-wind_speed)\n\t        if 0.4 <= humidity <= 0.55:\n", "            humidity_weight = 0.02\n\t            score += humidity_weight\n\t        return round(score, 2)\n\t    def _indoor_score(self, temperature, wind_speed, humidity, precipitation, clouds, sunrise_time, sunset_time, current_time):\n\t        # Weights\n\t        precipitation_weight = 0.7\n\t        temperature_weight = 0.1\n\t        clouds_weight = 0.04\n\t        wind_speed_weight = 0.03\n\t        # Scoring\n", "        score = precipitation_weight * (1 - math.exp(-10 * precipitation))\n\t        temperature_comp = 0\n\t        if 20 <= temperature <= 25:\n\t            temperature_comp = 0\n\t        elif temperature < 20:\n\t            temperature_comp = 1 - math.exp(-0.04 * (20 - temperature))\n\t        else:\n\t            temperature_comp = 1 - math.exp(0.2 * (25 - temperature))\n\t        score += temperature_weight * temperature_comp\n\t        if sunrise_time <= current_time <= sunset_time:\n", "            day_time_weight = 0.06\n\t            score += day_time_weight\n\t        # score += air_weight * (1 - math.exp(0.5 * 1- air))\n\t        score += clouds_weight * (1 - math.exp(-3 * clouds))\n\t        score += wind_speed_weight * (1 - math.exp(-0.3 * wind_speed))\n\t        if humidity < 0.4 or humidity > 0.55:\n\t            humidity_weight = 0.02\n\t            score += humidity_weight\n\t        return round(score, 2)\n\t    def set_simulated_weather(self, air_temperature, wind_speed, humidity,\n", "                              precipitation, cloud_amount, air_quality):\n\t        '''\n\t        Sets simulated weather data to test score calculations.\n\t        '''\n\t        self.weather = {\n\t            \"Weather\": {\n\t                \"Air temperature\": f\"{air_temperature} °C\",\n\t                \"Wind speed\": f\"{wind_speed} m/s\",\n\t                \"Humidity\": f\"{humidity} %\",\n\t                \"Precipitation\": f\"{precipitation} mm\",\n", "                \"Cloud amount\": f\"{cloud_amount} %\",\n\t                \"Air quality\": air_quality,\n\t            }\n\t        }\n\t    def get_json(self):\n\t        '''\n\t        Returns a JSON representation of the POI.\n\t        '''\n\t        return {'name': self.name, 'weather': self.weather,\n\t                'latitude': self.latitude, 'longitude': self.longitude,\n", "                'category': self.categories[-1], 'catetype': self.categorytype}\n"]}
{"filename": "recommender-back/src/apis/current.py", "chunked_list": ["import copy\n\timport math\n\tfrom .poi import PointOfInterest\n\tfrom ..services.data_fetcher import DataFetcher\n\tfrom ..config import Config\n\tclass Current:\n\t    def __init__(self, fetcher: DataFetcher):\n\t        self.fetcher = fetcher\n\t        self.weather = None\n\t        self.aqi = None\n", "        self.get_current_weather()\n\t        self.get_current_air_quality()\n\t    def get_current_weather(self):\n\t        '''\n\t        Retrieves the current weather data for various stations.\n\t        Returns:\n\t            dict: A dictionary containing the current weather data for each station.\n\t        '''\n\t        obs = self.fetcher.get_current_weather_data(Config.BBOX, True)\n\t        data = {}\n", "        for station, metadata in obs.location_metadata.items():\n\t            weatherdata = {\n\t                'Air temperature': str(obs.data[station]['t2m']['values'][-1]) + ' °C',\n\t                'Wind speed': str(obs.data[station]['ws_10min']['values'][-1]) + ' m/s',\n\t                'Humidity': str(obs.data[station]['rh']['values'][-1]) + ' %',\n\t                'Precipitation': str(obs.data[station]['ri_10min']['values'][-1])\n\t                + ' mm',\n\t                'Cloud amount': str(obs.data[station]['n_man']['values'][-1]) + ' %',\n\t            }\n\t            for value in list(weatherdata):\n", "                if 'nan' in str(weatherdata[value]):\n\t                    weatherdata.pop(value)\n\t            if weatherdata:\n\t                weatherdata['Latitude'] = metadata['latitude']\n\t                weatherdata['Longitude'] = metadata['longitude']\n\t                data[station] = weatherdata\n\t        self.weather = data\n\t    def get_current_weather_warning(self, station):\n\t        '''\n\t        Retrieves the wind speed for one station and calculates if it's too high.\n", "        Returns:\n\t            boolean: If the wind speed is too high.\n\t        '''\n\t        weather = self.weather.get(station)\n\t        wind_speed = weather['Wind speed'].split(' ')[0]\n\t        return float(wind_speed) > 17\n\t    def get_current_air_quality(self):\n\t        '''\n\t        Retrieves the current AQI data for various stations.\n\t        Returns:\n", "            dict: A dictionary containing the current weather data for each station.\n\t        '''\n\t        raw_aqi_data = self.get_latest_air_quality()\n\t        self.aqi = self.parse_latest_aqi_data(raw_aqi_data)\n\t    def get_latest_air_quality(self):\n\t        '''\n\t        Retrieves the Air Quality Index data for the last 24 hours within specified area\n\t        '''\n\t        return self.fetcher.get_current_air_quality_data(\n\t            Config.BBOX, True, Config.AIRQUALITY_PARAMETERS\n", "        )\n\t    def parse_latest_aqi_data(self, raw_aqi_data: dict):\n\t        '''\n\t        Finds latest aqi value and coordinates that is not nan for each station.\n\t        Returns:\n\t            dict: A dictionary containing stations and their aqi and coordinates.\n\t        '''\n\t        latest_aqi_data = {}\n\t        for station, metadata in raw_aqi_data.location_metadata.items():\n\t            values = raw_aqi_data.data[station]['AQINDEX_PT1H_avg']['values']\n", "            latest_aqi_value = next((v for v in reversed(values) if not math.isnan(v)), 'nan')\n\t            if latest_aqi_value == 'nan':\n\t                continue\n\t            aqi = {\n\t                'Air quality': f'{str(latest_aqi_value)} AQI',\n\t                'Latitude': metadata['latitude'],\n\t                'Longitude': metadata['longitude'],\n\t            }\n\t            latest_aqi_data[station] = aqi\n\t        return latest_aqi_data\n", "    def find_nearest_stations_aqi(self, aqi, lat, lon):\n\t        '''\n\t        Calculates the closest stations index in the list of AQI-stations,\n\t        and returns the index of it.\n\t        '''\n\t        smallest, nearest = float('inf'), ''\n\t        for station in aqi:\n\t            dist = abs(aqi[station]['Latitude'] - lat)\\\n\t                + abs(aqi[station]['Longitude'] - lon)\n\t            if dist < smallest:\n", "                smallest, nearest = dist, station\n\t        return nearest\n\t    def find_nearest_stations_weather_data(self, poi: PointOfInterest):\n\t        '''\n\t        Finds the nearest weather station to a given point of interest (POI) and adds its weather data to the POI,\n\t        also adds the Air Quality Index data.\n\t        Args:\n\t            poi (PointOfInterest): The POI for which weather data needs to be added.\n\t        Returns:\n\t            PointOfInterest: The modified POI with weather information.\n", "        '''\n\t        lat = poi.latitude\n\t        lon = poi.longitude\n\t        weather = copy.deepcopy(self.weather)\n\t        missing_fields = [\n\t            'Air temperature',\n\t            'Wind speed',\n\t            'Precipitation',\n\t            'Cloud amount',\n\t            'Humidity',\n", "        ]\n\t        returned = {}\n\t        aqi = copy.deepcopy(self.aqi)\n\t        while True:\n\t            smallest, nearest = float('inf'), ''\n\t            for station in weather:\n\t                dist = abs(weather[station]['Latitude'] - lat) + abs(\n\t                    weather[station]['Longitude'] - lon\n\t                )\n\t                if dist < smallest:\n", "                    smallest, nearest = dist, station\n\t            for key, value in weather[nearest].items():\n\t                if key not in ['Latitude', 'Longitude']:\n\t                    returned.setdefault(key, value)\n\t                    if key in missing_fields:\n\t                        missing_fields.remove(key)\n\t            if not missing_fields or not weather:\n\t                smallest, nearest = float('inf'), ''\n\t                if len(aqi) > 0:\n\t                    nearest = self.find_nearest_stations_aqi(aqi, lat, lon)\n", "                    returned.setdefault(\n\t                        'Air quality', aqi[nearest]['Air quality'])\n\t                break\n\t            del weather[nearest]\n\t        poi.weather['Current'] = returned\n\t        return poi\n"]}
{"filename": "recommender-back/src/apis/manager.py", "chunked_list": ["import os\n\timport json\n\timport requests\n\tfrom requests import Timeout\n\tfrom .current import Current\n\tfrom .poi import PointOfInterest\n\tfrom ..services.data_fetcher import DataFetcher\n\tfrom ..db.db import get_collection\n\tfrom ..services.poi_init import init_pois\n\tdef get_simulated_pois_as_json(air_temperature, wind_speed, humidity,\n", "                                              precipitation, cloud_amount, air_quality, current_time, sunrise, sunset):\n\t    \"\"\"\n\t    Retrieves points of interest (POIs) from a JSON file and enriches them with simulated weather data.\n\t    Returns:\n\t        str: JSON string containing the POIs with calculated scores.\n\t    Raises:\n\t        KeyError: If an error occurs while processing the data.\n\t    \"\"\"\n\t    try:\n\t        pois = get_pois()\n", "        updated_data = []\n\t        for poi in pois:\n\t            poi.set_simulated_weather(air_temperature, wind_speed, humidity,\n\t                                            precipitation, cloud_amount, air_quality)\n\t            poi.calculate_score(current_time, sunrise, sunset)\n\t            updated_data.append(poi.get_json())\n\t        return json.dumps(updated_data)\n\t    except KeyError as error:\n\t        return {\"message\": \"An error occurred\", \"status\": 500, \"error\": str(error)}\n\t    except Timeout as error:\n", "        return {\"message\": \"Forecast timed out\", \"status\": 500, \"error\": str(error)}\n\tdef get_pois_as_json(accessibility=False, category=\"All\"):\n\t    \"\"\"\n\t    Retrieves points of interest (POIs) from MongoDB and enriches them with current weather data.\n\t    Returns:\n\t        str: JSON string containing the POIs with weather information.\n\t    Raises:\n\t        KeyError: If an error occurs while processing the data.\n\t    \"\"\"\n\t    try:\n", "        pois = get_pois()\n\t        weather_fetcher = DataFetcher()\n\t        current = Current(weather_fetcher)\n\t        url = os.environ.get(\"REACT_APP_BACKEND_URL\") + \"/api/forecast\"\n\t        response = requests.get(url, timeout=1200)\n\t        forecast_data = response.json()\n\t        updated_data = []\n\t        for poi in pois:\n\t            if category not in poi.categories:\n\t                continue\n", "            poi: PointOfInterest = current.find_nearest_stations_weather_data(poi)\n\t            poi = find_nearest_coordinate_forecast_data(poi, forecast_data)\n\t            poi.calculate_score()\n\t            if accessibility in poi.not_accessible_for:\n\t                continue\n\t            updated_data.append(poi.get_json())\n\t        return json.dumps(updated_data)\n\t    except KeyError as error:\n\t        return {\"message\": \"An error occurred\", \"status\": 500, \"error\": str(error)}\n\t    except Timeout as error:\n", "        return {\"message\": \"Forecast timed out\", \"status\": 500, \"error\": str(error)}\n\tdef find_nearest_coordinate_forecast_data(poi: PointOfInterest, forecast_data):\n\t    \"\"\"\n\t    Retrieves all points of interest (POIs) from JSON files and merges them together.\n\t    Args:\n\t        category (list): List of categories of POIs to retrieve. If None, default categories will be used.\n\t    Returns:\n\t        list: List of all POIs.\n\t    \"\"\"\n\t    try:\n", "        lat = poi.latitude\n\t        lon = poi.longitude\n\t        coord_key = f\"{lat}, {lon}\"\n\t        for hour in forecast_data:\n\t            data = forecast_data[hour]\n\t            if forecast_data is None or coord_key not in data:\n\t                return poi\n\t            time_key = f\"{hour[11:16]}\"\n\t            poi.weather[time_key] = data[coord_key]\n\t    except TypeError:\n", "        print(\"Failed to find nearest coordinate forecast data. TypeError occurred.\")\n\t    return poi\n\tdef get_pois():\n\t    \"\"\"\n\t    Fetches and converts mongoDB documents into POI -objects.\n\t    Args:\n\t        test (bool): A flag to indicate if the test environment is used.\n\t    Returns:\n\t        list: List of POI -objects.\n\t    \"\"\"\n", "    collection = get_collection()\n\t    if collection.count_documents({}) == 0:\n\t        init_pois()\n\t    all_documents = collection.find({})\n\t    pois = []\n\t    for poi in all_documents:\n\t        poi = PointOfInterest(poi['name'], poi['latitude'], poi['longitude'],\n\t                            poi['not_accessible_for'], poi['categories'])\n\t        pois.append(poi)\n\t    return pois"]}
{"filename": "recommender-back/src/apis/aqi.py", "chunked_list": ["import numpy as np\n\timport tempfile\n\timport requests\n\timport defusedxml.ElementTree as ET\n\timport time\n\tfrom urllib.parse import urlencode\n\tfrom netCDF4 import Dataset\n\tfrom ..config import Config\n\tfrom datetime import timedelta\n\tfrom .times import get_forecast_times, forecast_q_time_to_finnish\n", "from scipy.spatial import cKDTree\n\tclass AQI:\n\t    def __init__(self):\n\t        \"\"\"A class representing a single AQI object\n\t        Args:\n\t            data (numpy array): aqi data as numpy array\n\t            dataset (netcdf): netcdf dataset containing the aqi data\n\t            datetimes (dict): dictionary containing datetimes and aqi objects\n\t            coord_kdtree (cKDTree): kdtree containing all possible lat, lon pairs\n\t        \"\"\"\n", "        self.data = None\n\t        self.dataset = None\n\t        self.datetimes = None\n\t        self.coords_kdtree = None\n\t    def download_netcdf_and_store(self, forecast_q_time):\n\t        \"\"\"Downloads netcdf file, parses it and stores the data in the object.\n\t           The temporary file is deleted afterwards.\n\t        \"\"\"\n\t        netcdf_file_url = self._parse_xml()\n\t        with tempfile.NamedTemporaryFile(delete=True) as temp_file:\n", "            netcdf_file_name = temp_file.name\n\t            self._download_to_file(netcdf_file_url, netcdf_file_name, 5)\n\t            self.dataset = Dataset(netcdf_file_name)\n\t            self._parse_netcdf(forecast_q_time)\n\t    def _parse_xml(self):\n\t        \"\"\"Parses the fmi open data xml file\n\t        Returns:\n\t            string: url link of latest queried netcdf file\n\t        \"\"\"\n\t        url = self._get_xml_url()\n", "        req = requests.get(url)\n\t        content = req.content\n\t        xml = ET.fromstring(content)\n\t        file_reference = xml.findall(Config.FILEREF_MEMBER)\n\t        latest_file_url = file_reference[-1].text\n\t        return latest_file_url\n\t    def _get_xml_url(self):\n\t        \"\"\"Fetches the xml file url based on query\n\t        Returns:\n\t            string: xml file url\n", "        \"\"\"\n\t        _, start_time, end_time = get_forecast_times()\n\t        args = {'starttime': start_time,\n\t                'endtime': end_time,\n\t                'parameters': Config.AQI_PARAMS,\n\t                'bbox': Config.BBOX_AQI}\n\t        xml_url = Config.FMI_QUERY_URL + Config.AQI_QUERY + \"&\" + urlencode(args)\n\t        return xml_url\n\t    def _parse_netcdf(self, forecast_q_time):\n\t        \"\"\"Parses the given netcdf file\n", "        Returns:\n\t            dict: A dictionary of datetimes keys and AQI object values\n\t        \"\"\"\n\t        latitudes = self.dataset.variables['lat'][:]\n\t        longitudes = self.dataset.variables['lon'][:]\n\t        times = self.dataset.variables['time'][:]\n\t        aqi = self.dataset.variables['index_of_airquality_194'][:]\n\t        forecast_time = forecast_q_time_to_finnish(forecast_q_time) + timedelta(hours=1)\n\t        datetimes = {}\n\t        for time in times:\n", "            forecast_datetime = forecast_time + timedelta(hours=int(time))\n\t            forecast_datetime = forecast_datetime.replace(minute=0, second=0, microsecond=0)\n\t            aqi_data = aqi[int(time)]\n\t            non_zero_lat_indices, non_zero_lon_indices = np.where(aqi_data != 0)\n\t            filtered_coords = (\n\t                np.column_stack(\n\t                (\n\t                    latitudes[non_zero_lat_indices],\n\t                    longitudes[non_zero_lon_indices]\n\t                )\n", "            )\n\t        )\n\t            coords_kdtree = cKDTree(filtered_coords)\n\t            filtered_aqi = aqi_data[non_zero_lat_indices, non_zero_lon_indices]\n\t            aqi_obj = AQI()\n\t            aqi_obj.data = filtered_aqi\n\t            aqi_obj.coords_kdtree = coords_kdtree\n\t            datetimes[forecast_datetime] = aqi_obj\n\t        self.datetimes = datetimes\n\t        self.dataset.close()\n", "    def to_json(self, pois):\n\t            \"\"\"Converts the parsed netcdf data into JSON format and calculates nearest AQI values for POIs.\n\t            Args:\n\t                pois (list): List of POI objects.\n\t            Returns:\n\t                dict: AQI data in JSON format with nearest AQI values for POIs\n\t            \"\"\"\n\t            data = {}\n\t            for datetime in self.datetimes:\n\t                time_str = datetime.strftime('%Y-%m-%d %H:%M:%S')\n", "                aqi_object = self.datetimes[datetime]\n\t                nearest_aqi_values = {}\n\t                for poi in pois:\n\t                    lat_poi, lon_poi = float(poi.latitude), float(poi.longitude)\n\t                    _, closest_index = aqi_object.coords_kdtree.query([lat_poi, lon_poi])\n\t                    aqi_value = aqi_object.data[closest_index]\n\t                    poi_coords = f'{lat_poi}, {lon_poi}'\n\t                    nearest_aqi_values[poi_coords] = {'Air Quality Index': str(aqi_value)}\n\t                data[time_str] = nearest_aqi_values\n\t            return data\n", "    def _download_to_file(self, url, file_name, max_retries):\n\t            \"\"\"Downloads the file content\n\t            Args:\n\t                url (string): url of the file to be downloaded\n\t                file_name (string): name of the file\n\t                max_retries (int): maximum number of retries\n\t            \"\"\"\n\t            for retry_attempt in range(max_retries-1):\n\t                try:\n\t                    start_time = time.time()\n", "                    print('Downloading AQI data')\n\t                    with open(file_name, 'wb') as file:\n\t                        response = requests.get(url, stream=True)\n\t                        for chunk in response.iter_content(chunk_size=10*1024*1024):\n\t                            file.write(chunk)\n\t                        print('Finished downloading. Parsing data...')\n\t                        end_time = time.time()\n\t                        print(f'{end_time - start_time} seconds')\n\t                        return\n\t                except (requests.RequestException, ConnectionResetError) as e:\n", "                    print(f\"Download attempt {retry_attempt + 1} failed with error: {str(e)}\")\n\t                    if retry_attempt < max_retries:\n\t                        print(f'Retrying...')\n\t                    else:\n\t                        print(f\"Maximum retries reached. Download failed.\")\n"]}
{"filename": "recommender-back/src/apis/forecast.py", "chunked_list": ["import math\n\timport time\n\timport numpy as np\n\tfrom .times import utc_to_finnish, get_forecast_times\n\tfrom ..config import Config\n\tfrom ..services.data_fetcher import DataFetcher\n\tclass Forecast:\n\t    def __init__(self, fetcher: DataFetcher):\n\t        self.fetcher = fetcher\n\t        self.data = None\n", "        self.valid_times = None\n\t        self.data_levels = None\n\t        self.coordinates = None\n\t    def update_data(self):\n\t        \"\"\"\n\t        Updates the forecast data.\n\t        Fetches the latest data and updates class properties if new data is available.\n\t        \"\"\"\n\t        current, start, end = get_forecast_times()\n\t        print(f\"Query for the new Grid object at time: {current} UTC\")\n", "        forecast_data = self.get_latest_forecast(start, end)\n\t        latest_forecast = max(forecast_data.data.keys())\n\t        if not self.data or latest_forecast > max(self.data.keys()):\n\t            self.data = forecast_data.data[latest_forecast]\n\t            self.parse_forecast_data()\n\t            self.update_forecast_properties()\n\t        return current\n\t    def get_latest_forecast(self, start, end):\n\t        \"\"\"\n\t        Retrieves the latest forecast data within the specified time range.\n", "        Args:\n\t            start (datetime): The start time for the data retrieval.\n\t            end (datetime): The end time for the data retrieval.\n\t        Returns:\n\t            Grid: The forecast grid data within the specified time range.\n\t        \"\"\"\n\t        return self.fetcher.get_forecast_data(\n\t            start, end, Config.BBOX, Config.TIMESTEP, Config.FORECAST_PARAMETERS\n\t        )\n\t    def parse_forecast_data(self):\n", "        \"\"\"\n\t        Parses the forecast data with retry attempts on failure.\n\t        Raises:\n\t            ConnectionResetError: If a ConnectionResetError occurs during parsing after maximum number of retry attempts.\n\t        \"\"\"\n\t        max_retries = 3\n\t        retry_delay = 5  # delay in seconds\n\t        for attempt in range(max_retries):\n\t            try:\n\t                self.data.parse(delete=True)\n", "                break\n\t            except (ConnectionResetError, TimeoutError) as error:\n\t                print(f\"Error during parsing: {error}\")\n\t                if attempt < max_retries - 1:\n\t                    time.sleep(retry_delay)\n\t                    print(f\"Retrying parsing ({attempt + 1} out of {max_retries})...\")\n\t                else:\n\t                    print(f\"Parsing failed after {max_retries} attempts due to {type(error).__name__}.\")\n\t                    raise\n\t            except Exception as error:  # Generic exception handler\n", "                print(f\"Unexpected error during parsing: {error}\")\n\t                if attempt < max_retries - 1:\n\t                    time.sleep(retry_delay)\n\t                    print(f\"Retrying parsing ({attempt + 1} out of {max_retries})...\")\n\t                else:\n\t                    print(f\"Parsing failed after {max_retries} attempts due to unexpected error.\")\n\t                    raise\n\t    def update_forecast_properties(self):\n\t        \"\"\"\n\t        Updates forecast properties based on the latest parsed data.\n", "        \"\"\"\n\t        self.valid_times = self.data.data.keys()\n\t        earliest_step = min(self.valid_times)\n\t        self.data_levels = self.data.data[earliest_step].keys()\n\t        self.coordinates = np.dstack((self.data.latitudes, self.data.longitudes))\n\t    def get_data(self):\n\t        \"\"\"\n\t        Gets all the forecast data from the grid.\n\t        Returns:\n\t            dict: A dictionary containing all the forecast data.\n", "        \"\"\"\n\t        data = {}\n\t        for date_time in self.valid_times:\n\t            local_time = utc_to_finnish(date_time)\n\t            time_str = local_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\t            coordinates_data = {}\n\t            for level in self.data_levels:\n\t                datasets = self.data.data[date_time][level]\n\t                for dataset_name, dataset in datasets.items():\n\t                    unit = dataset[\"units\"]\n", "                    data_array = dataset[\"data\"]\n\t                    for (lat_index, lon_index), data_value in np.ndenumerate(\n\t                        data_array\n\t                    ):\n\t                        latitude = self.coordinates[lat_index, lon_index, 0]\n\t                        longitude = self.coordinates[lat_index, lon_index, 1]\n\t                        key = str((latitude, longitude))\n\t                        if key not in coordinates_data:\n\t                            coordinates_data[key] = []\n\t                        coordinates_data[key].append(\n", "                            {\"Dataset\": dataset_name, \"Unit\": unit, \"Data\": data_value}\n\t                        )\n\t            data[time_str] = coordinates_data\n\t        return data\n\t    def get_coordinates(self):\n\t        \"\"\"\n\t        Returns all available coordinates within the bounding box area.\n\t        Returns:\n\t            list: List of coordinate pairs.\n\t        \"\"\"\n", "        flattened_coords = [\n\t            tuple(coord) for sublist in self.coordinates for coord in sublist\n\t        ]\n\t        unique_coords = set(flattened_coords)\n\t        return list(unique_coords)\n\t    def get_closest_poi_coordinates_data(self, pois, aqi_data):\n\t        \"\"\"\n\t        Finds the nearest coordinates forecast data for all of the POI's coordinates.\n\t        Args:\n\t            pois (list): List of POI objects.\n", "        Returns:\n\t            dict: A dictionary containing the nearest coordinates forecast data for each hour.\n\t        \"\"\"\n\t        data = self.get_data()\n\t        coordinates = self.get_coordinates()\n\t        closest_coordinates_fore = self.calculate_shortest_weather(pois, coordinates)\n\t        returned_data = {hour: {} for hour in data}\n\t        for hour, hour_data in data.items():\n\t            for poi_coord, nearest in closest_coordinates_fore.items():\n\t                nearest_str = f\"({nearest[0]}, {nearest[1]})\"\n", "                if nearest_str in hour_data:\n\t                    forecast = hour_data[nearest_str]\n\t                    returned_data[hour][\n\t                        f\"{poi_coord[0]}, {poi_coord[1]}\"\n\t                    ] = self.parse_forecast(forecast)\n\t        if aqi_data:\n\t            for datetime, poi_coords in aqi_data.items():\n\t                for poi_coord, air_quality in poi_coords.items():\n\t                    aqi_value = air_quality['Air Quality Index']\n\t                    returned_data[datetime][poi_coord]['Air quality'] = f'{aqi_value} AQI'\n", "        return returned_data\n\t    def parse_forecast(self, forecast):\n\t        \"\"\"\n\t        Parses the desired data from the forecast grid.\n\t        Args:\n\t            forecast (list): List of forecast data.\n\t        Returns:\n\t            dict: A dictionary containing the parsed forecast data.\n\t        \"\"\"\n\t        for value in forecast:\n", "            if value[\"Dataset\"] == \"2 metre temperature\":\n\t                temperature = round(value[\"Data\"] - 273.15, 1)\n\t            elif value[\"Dataset\"] == \"2 metre relative humidity\":\n\t                humidity = round(value[\"Data\"], 1)\n\t            elif value[\"Dataset\"] == \"10 metre U wind component\":\n\t                u_wind = value[\"Data\"]\n\t            elif value[\"Dataset\"] == \"10 metre V wind component\":\n\t                v_wind = value[\"Data\"]\n\t            elif value[\"Dataset\"] == \"surface precipitation amount, rain, convective\":\n\t                precipitation = round(value[\"Data\"], 1)\n", "            elif value[\"Dataset\"] == \"Total Cloud Cover\":\n\t                cloudcoverage = round(value[\"Data\"], 1)\n\t        wind_speed = self.calculate_wind_speed_and_direction(u_wind, v_wind)\n\t        return {\n\t            \"Air temperature\": f\"{str(temperature)} °C\",\n\t            \"Humidity\": f\"{str(humidity)} %\",\n\t            \"Wind speed\": f\"{wind_speed} m/s\",\n\t            \"Precipitation\": f\"{precipitation} mm\",\n\t            \"Cloud amount\": f\"{cloudcoverage} %\",\n\t        }\n", "    def calculate_wind_speed_and_direction(self, u_wind, v_wind):\n\t        \"\"\"\n\t        Calculates the wind speed and direction based on the U and V components.\n\t        Args:\n\t            u_wind (float): U component of the wind.\n\t            v_wind (float): V component of the wind.\n\t        Returns:\n\t            tuple: A tuple containing the wind speed and direction.\n\t        \"\"\"\n\t        wind_speed = math.sqrt(u_wind**2 + v_wind**2)\n", "        wind_direction = math.atan2(u_wind, v_wind) * (180 / math.pi)\n\t        wind_direction = (wind_direction + 360) % 360\n\t        return round(wind_speed, 1)\n\t    def calculate_shortest_weather(self, pois, fore_coordinates):\n\t        \"\"\"Calculates the nearest weather forecast data for a given poi\n\t        Args:\n\t            pois (list): List of POI objects.\n\t            fore_coordinates (list): List of weather forecast coordinates as tuples\n\t        Returns:\n\t            list: a list containing pois and their nearest forecast weather coordinate\n", "        \"\"\"\n\t        closest_coordinates = {}\n\t        for poi in pois:\n\t            smallest = float(\"inf\")\n\t            nearest = []\n\t            lat = float(poi.latitude)\n\t            lon = float(poi.longitude)\n\t            for coordinate in fore_coordinates:\n\t                dist = abs(coordinate[0] - lat) + abs(coordinate[1] - lon)\n\t                if dist < smallest:\n", "                    smallest = dist\n\t                    nearest = [coordinate[0], coordinate[1]]\n\t            closest_coordinates[(lat, lon)] = nearest\n\t        return closest_coordinates\n"]}
{"filename": "recommender-back/src/apis/pathing.py", "chunked_list": ["import requests\n\tclass GreenPathsAPI:\n\t    \"\"\"\n\t    A class for fetching route information from the Green Paths API and plotting the route on a map.\n\t        Parameters:\n\t        start_coords (tuple): Tuple containing the latitude and longitude of the starting point.\n\t        end_coords (tuple): Tuple containing the latitude and longitude of the ending point.\n\t        travel_mode (str, optional): Mode of travel, can be 'walk' or 'bike'. Defaults to 'walk'.\n\t        routing_mode (str, optional): Routing mode, can be 'fast', 'short', 'clean', 'quiet', or 'safe' (for bikes).\n\t            Defaults to 'fast'.\n", "    \"\"\"\n\t    def __init__(self, start_coords, end_coords, travel_mode=\"walk\", routing_mode=\"fast\"):\n\t        self.start_coords = start_coords\n\t        self.end_coords = end_coords\n\t        self.travel_mode = travel_mode\n\t        self.routing_mode = routing_mode\n\t        self.api_response = self.fetch_api_data()\n\t        self.route_coordinates = self.extract_path_coordinates()\n\t    def fetch_api_data(self):\n\t        \"\"\"\n", "        Fetches route data from the Green Paths API.\n\t        Returns:\n\t            dict: JSON response containing route information or None if an error occurred.\n\t        \"\"\"\n\t        url = f\"https://www.greenpaths.fi/paths/{self.travel_mode}/{self.routing_mode}/{self.start_coords[0]},{self.start_coords[1]}/{self.end_coords[0]},{self.end_coords[1]}\"\n\t        try:\n\t            response = requests.get(url)\n\t            response.raise_for_status()\n\t            return response.json()\n\t        except requests.exceptions.RequestException as e:\n", "            print(f\"Failed to fetch data from the API: {e}\")\n\t            return None\n\t    def extract_path_coordinates(self):\n\t        \"\"\"\n\t        Extracts the latitude and longitude coordinates of the route from the API response.\n\t        Returns:\n\t            list: List of tuples containing latitude and longitude coordinates of the route or empty list if no data.\n\t        \"\"\"\n\t        path_coordinates = []\n\t        if not self.api_response:\n", "            return path_coordinates\n\t        path_fc = self.api_response.get(\"path_FC\") or {}\n\t        if not path_fc:\n\t            return path_coordinates\n\t        for feature in path_fc.get(\"features\", []):\n\t            geometry = feature.get(\"geometry\", {})\n\t            if geometry.get(\"type\") == \"LineString\" and geometry.get(\"coordinates\"):\n\t                path_coordinates.extend(geometry.get(\"coordinates\"))\n\t        return path_coordinates\n"]}
{"filename": "recommender-back/src/tests/routes_test.py", "chunked_list": ["import unittest\n\tfrom ..app import app\n\tclass AppTestCase(unittest.TestCase):\n\t    def setUp(self):\n\t        app.testing = True\n\t        self.client = app.test_client()\n\t    def test_index_route(self):\n\t        response = self.client.get('/')\n\t        data = response.get_json()\n\t        self.assertEqual(response.status_code, 200)\n", "        self.assertEqual(data['message'], 'Hello from the backend!')\n\t        self.assertEqual(data['status'], 200)\n\t    def test_not_found_error_handler(self):\n\t        response = self.client.get('/nonexistent')\n\t        error_data = response.get_json()\n\t        self.assertEqual(response.status_code, 404)\n\t        self.assertEqual(error_data['message'], 'Resource not found')\n\t        self.assertEqual(error_data['status'], 404)\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "recommender-back/src/tests/mock_data.py", "chunked_list": ["from src.apis.poi import PointOfInterest\n\tMOCK_POIS = [\n\t    PointOfInterest(name=\"POI 1\", latitude=60.201231, longitude=24.973478, categories=[\"Sport Halls\"], not_accessible_for=[]),\n\t    PointOfInterest(name=\"POI 2\", latitude=60.1998, longitude=24.968672, categories=[\"Sport Halls\"], not_accessible_for=[]),\n\t    PointOfInterest(name=\"POI 3\", latitude=60.189543, longitude=24.921326, categories=[\"Open air pools and beaches\"], not_accessible_for=[])\n\t]"]}
{"filename": "recommender-back/src/tests/__init__.py", "chunked_list": []}
{"filename": "recommender-back/src/tests/apis/poi_test.py", "chunked_list": ["import unittest\n\tfrom unittest.mock import patch\n\tfrom datetime import datetime\n\tfrom src.apis.poi import PointOfInterest\n\tclass TestPointOfInterest(unittest.TestCase):\n\t    def setUp(self):\n\t        self.poi = PointOfInterest()\n\t    def test_outdoor_score(self):\n\t        temperature = 23\n\t        wind_speed = 5\n", "        humidity = 0.5\n\t        precipitation = 20\n\t        clouds = 0.6\n\t        sunrise = datetime(2023, 6, 23, 6, 0)\n\t        sunset = datetime(2023, 6, 23, 18, 0)\n\t        cur_time = datetime(2023, 6, 23, 12, 0)\n\t        expected_score = 0.54\n\t        score = self.poi._outdoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t        temperature = 7\n", "        expected_score = 0.32\n\t        score = self.poi._outdoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t        temperature = 45\n\t        expected_score = 0.28\n\t        score = self.poi._outdoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t    def test_indoor_score(self):\n\t        temperature = 22\n\t        wind_speed = 2\n", "        humidity = 0.45\n\t        precipitation = 200\n\t        clouds = 0.8\n\t        sunrise = datetime(2023, 6, 23, 6, 0)\n\t        sunset = datetime(2023, 6, 23, 18, 0)\n\t        cur_time = datetime(2023, 6, 23, 20, 0)\n\t        expected_score = 0.75\n\t        score = self.poi._indoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t        temperature = 7\n", "        expected_score = 0.79\n\t        score = self.poi._indoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t        temperature = 45\n\t        expected_score = 0.85\n\t        score = self.poi._indoor_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time)\n\t        self.assertAlmostEqual(score, expected_score, places=6)\n\t    def test_calculate_score_chooses_indoor(self):\n\t        with patch('src.apis.times.get_current_time') as mock_get_current_time:\n\t            weather = {'20:00':{'Wind speed':'2.0 m/s','Precipitation':'200 mm','Cloud amount':'0.6 %',\n", "                    'Air temperature':'22.0 *C','Humidity':'0.45 %'}}\n\t            sun = ('06:00','18:00')\n\t            mock_get_current_time.return_value = '20:00'\n\t            categories = ['Sport halls']\n\t            test_poi = PointOfInterest(categories=categories)\n\t            test_poi.weather = weather\n\t            test_poi.sun = sun\n\t            expected_score = 0.73\n\t            test_poi.calculate_score()\n\t            score = test_poi.weather['20:00']['Score']\n", "            self.assertAlmostEqual(score, expected_score, places=6)\n\t    def test_calculate_score_chooses_outdoor(self):\n\t        with patch('src.apis.times.get_current_time') as mock_get_current_time:\n\t            weather = {'12:00':{'Wind speed':'5.0 m/s','Precipitation':'20 mm','Cloud amount':'0.6 %',\n\t                    'Air temperature':'23.0 *C','Humidity':'0.5 %'}}\n\t            sun = ('06:00','18:00')\n\t            mock_get_current_time.return_value = '12:00'\n\t            categories = ['Open air pools and beaches']\n\t            test_poi = PointOfInterest(categories=categories)\n\t            test_poi.weather = weather\n", "            test_poi.sun = sun\n\t            expected_score = 0.54\n\t            test_poi.calculate_score()\n\t            score = test_poi.weather['12:00']['Score']\n\t            self.assertAlmostEqual(score, expected_score, places=6)\n\t    def test_json_in_correct_form(self):\n\t        weather = {'12:00':{'Wind speed':'5.0 m/s','Precipitation':'20 mm','Cloud amount':'0.6 %',\n\t                'Air temperature':'23.0 *C','Humidity':'0.5 %'}}\n\t        sun = ('06:00','18:00')\n\t        categories = ['Open air pools and beaches']\n", "        test_poi = PointOfInterest(name= 'Test POI', latitude=21, longitude=61, categories=categories)\n\t        test_poi.weather = weather\n\t        test_poi.sun = sun\n\t        expected_json = {\"name\": 'Test POI', \"weather\": {\"12:00\": {\"Wind speed\": \"5.0 m/s\", \"Precipitation\": \"20 mm\", \"Cloud amount\": \"0.6 %\", \"Air temperature\": \"23.0 *C\", \"Humidity\": \"0.5 %\"}}, \"latitude\": 21, \"longitude\": 61, \"category\": \"Open air pools and beaches\", \"catetype\": None}\n\t        test_json = test_poi.get_json()\n\t        self.assertEqual(test_json, expected_json)\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "recommender-back/src/tests/apis/pathing_test.py", "chunked_list": ["import unittest\n\tfrom src.apis.pathing import GreenPathsAPI\n\tclass TestGreenPathsAPI(unittest.TestCase):\n\t    def test_fetch_api_data(self):\n\t        start_coords = (60.172808, 24.909591)\n\t        end_coords = (60.204516, 24.962033)\n\t        green_paths = GreenPathsAPI(start_coords, end_coords)\n\t        api_response = green_paths.api_response\n\t        self.assertIsInstance(api_response, dict)\n\t        expected_keys = [\"path_FC\", \"edge_FC\"]\n", "        for key in expected_keys:\n\t            self.assertIn(key, api_response)\n\t        expected_types = {\n\t            \"path_FC\": dict,\n\t            \"edge_FC\": dict,\n\t        }\n\t        for key, expected_type in expected_types.items():\n\t            self.assertIsInstance(api_response[key], expected_type)\n\t    def test_extract_path_coordinates(self):\n\t        start_coords = (60.172808, 24.909591)\n", "        end_coords = (60.204516, 24.962033)\n\t        green_paths = GreenPathsAPI(start_coords, end_coords)\n\t        route_coordinates = green_paths.route_coordinates\n\t        self.assertIsInstance(route_coordinates, list)\n\t        self.assertTrue(route_coordinates, \"No route coordinates available.\")\n\t        for coord in route_coordinates:\n\t            self.assertIsInstance(coord, list)\n\t            self.assertEqual(len(coord), 2)\n\t        for latitude, longitude in route_coordinates:\n\t            self.assertIsInstance(latitude, (int, float))\n", "            self.assertIsInstance(longitude, (int, float))\n\t            self.assertGreaterEqual(latitude, -90.0)\n\t            self.assertLessEqual(latitude, 90.0)\n\t            self.assertGreaterEqual(longitude, -180.0)\n\t            self.assertLessEqual(longitude, 180.0)\n\tif __name__ == '__main__':\n\t    unittest.main()"]}
{"filename": "recommender-back/src/tests/apis/times_test.py", "chunked_list": ["import unittest\n\tfrom unittest.mock import patch\n\tfrom datetime import datetime\n\tfrom src.apis.times import get_current_time\n\tclass TimesTest(unittest.TestCase):\n\t    @patch('src.apis.times.dt.datetime')\n\t    def test_current_time_is_returned_correctly_when_plus_is_not_set(self, mock_datetime):\n\t        mock_datetime.now.return_value = datetime(2023, 7, 19, 15, 30)\n\t        current_time = get_current_time()\n\t        expected_time = '15:30'\n", "        self.assertEqual(current_time, expected_time)\n\t    @patch('src.apis.times.dt.datetime')\n\t    def test_current_time_is_returned_correctly_when_plus_is_set(self, mock_datetime):\n\t        mock_datetime.now.return_value = datetime(2023, 7, 19, 15, 30)\n\t        current_time = get_current_time(plus=3)\n\t        expected_time = '18:30'\n\t        self.assertEqual(current_time, expected_time)\n"]}
{"filename": "recommender-back/src/tests/apis/forecast_test.py", "chunked_list": ["import unittest\n\timport numpy as np\n\tfrom datetime import datetime\n\tfrom unittest.mock import MagicMock, PropertyMock, patch\n\tfrom src.apis.forecast import Forecast\n\tfrom src.apis.poi import PointOfInterest\n\tfrom src.services.data_fetcher import DataFetcher\n\tclass ForecastTest(unittest.TestCase):\n\t    def setUp(self):\n\t        self.forecast = Forecast(DataFetcher())\n", "        self.grid_by_datetime = MagicMock()\n\t        self.mock_grid = MagicMock()\n\t        self.grid_by_datetime.data = {datetime(2023, 6, 19, 5, 0): self.mock_grid}\n\t        self.mock_grid_data = PropertyMock(\n\t            return_value={\n\t                datetime(2023, 6, 19, 5, 0): {\n\t                    0: {\n\t                        \"Mean sea level pressure\": {\n\t                            \"units\": \"Pa\",\n\t                            \"data\": np.array([[10300, 10500, 10600, 10700, 10800]]),\n", "                        }\n\t                    },\n\t                    2: {\n\t                        \"2 metre temperature\": {\n\t                            \"units\": \"K\",\n\t                            \"data\": np.array([[288.2, 287.3, 283.5, 291.4, 287.7]]),\n\t                        },\n\t                        \"2 metre relative humidity\": {\n\t                            \"units\": \"%\",\n\t                            \"data\": np.array([[51, 52, 53, 54, 55]]),\n", "                        },\n\t                    },\n\t                    10: {\n\t                        \"10 metre U wind component\": {\n\t                            \"units\": \"m s**-1\",\n\t                            \"data\": np.array([[7, 9, 3, 2, 5]]),\n\t                        },\n\t                        \"10 metre V wind component\": {\n\t                            \"units\": \"m s**-1\",\n\t                            \"data\": np.array([[-1, -2, -3, 3, -2]]),\n", "                        },\n\t                        \"surface precipitation amount, rain, convective\": {\n\t                            \"units\": \"kg m**-2\",\n\t                            \"data\": np.array([[2, 3, 4, 5, 6]]),\n\t                        },\n\t                        \"Total Cloud Cover\": {\n\t                            \"units\": \"%\",\n\t                            \"data\": np.array([[23, 24, 25, 26, 27]]),\n\t                        },\n\t                    },\n", "                }\n\t            }\n\t        )\n\t        type(self.mock_grid).data = self.mock_grid_data\n\t        type(self.mock_grid).latitudes = PropertyMock(\n\t            return_value=np.array([[60.1, 60.2, 60.3, 60.4, 60.5]])\n\t        )\n\t        type(self.mock_grid).longitudes = PropertyMock(\n\t            return_value=np.array([[24.6, 24.7, 24.8, 24.9, 25.0]])\n\t        )\n", "    @patch(\"src.services.data_fetcher.DataFetcher.get_forecast_data\")\n\t    def test_data_is_updated_correctly(self, mock_download_stored_query):\n\t        mock_download_stored_query.return_value = self.grid_by_datetime\n\t        self.forecast.update_data()\n\t        # Check that data contains a grid object\n\t        self.assertIsInstance(self.forecast.data, type(self.mock_grid))\n\t        # Check that coordinates are now pairs\n\t        np.testing.assert_array_equal(\n\t            self.forecast.coordinates,\n\t            np.array(\n", "                [((60.1, 24.6), (60.2, 24.7), (60.3, 24.8), (60.4, 24.9), (60.5, 25.0))]\n\t            ),\n\t        )\n\t        # Check that valid_times returns datetime dict_keys\n\t        expected_valid_times = self.grid_by_datetime.data.keys()\n\t        self.assertEqual(self.forecast.valid_times, expected_valid_times)\n\t        # Check that all data levels match\n\t        expected_data_levels = []\n\t        for datetime_data in self.mock_grid.data.values():\n\t            data_levels = datetime_data.keys()\n", "            expected_data_levels.extend(data_levels)\n\t        self.assertListEqual(list(self.forecast.data_levels), expected_data_levels)\n\t    @patch(\"src.services.data_fetcher.DataFetcher.get_forecast_data\")\n\t    def test_get_data_returns_data_correctly(self, mock_download_stored_query):\n\t        mock_download_stored_query.return_value = self.grid_by_datetime\n\t        self.forecast.update_data()\n\t        data = self.forecast.get_data()\n\t        expected_data = {\n\t            \"2023-06-19 08:00:00\": {\n\t                \"(60.1, 24.6)\": [\n", "                    {\"Dataset\": \"Mean sea level pressure\", \"Unit\": \"Pa\", \"Data\": 10300},\n\t                    {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 288.2},\n\t                    {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 51},\n\t                    {\n\t                        \"Dataset\": \"10 metre U wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": 7,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"10 metre V wind component\",\n", "                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": -1,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                        \"Unit\": \"kg m**-2\",\n\t                        \"Data\": 2,\n\t                    },\n\t                    {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 23},\n\t                ],\n", "                \"(60.2, 24.7)\": [\n\t                    {\"Dataset\": \"Mean sea level pressure\", \"Unit\": \"Pa\", \"Data\": 10500},\n\t                    {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 287.3},\n\t                    {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 52},\n\t                    {\n\t                        \"Dataset\": \"10 metre U wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": 9,\n\t                    },\n\t                    {\n", "                        \"Dataset\": \"10 metre V wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": -2,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                        \"Unit\": \"kg m**-2\",\n\t                        \"Data\": 3,\n\t                    },\n\t                    {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 24},\n", "                ],\n\t                \"(60.3, 24.8)\": [\n\t                    {\"Dataset\": \"Mean sea level pressure\", \"Unit\": \"Pa\", \"Data\": 10600},\n\t                    {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 283.5},\n\t                    {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 53},\n\t                    {\n\t                        \"Dataset\": \"10 metre U wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": 3,\n\t                    },\n", "                    {\n\t                        \"Dataset\": \"10 metre V wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": -3,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                        \"Unit\": \"kg m**-2\",\n\t                        \"Data\": 4,\n\t                    },\n", "                    {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 25},\n\t                ],\n\t                \"(60.4, 24.9)\": [\n\t                    {\"Dataset\": \"Mean sea level pressure\", \"Unit\": \"Pa\", \"Data\": 10700},\n\t                    {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 291.4},\n\t                    {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 54},\n\t                    {\n\t                        \"Dataset\": \"10 metre U wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": 2,\n", "                    },\n\t                    {\n\t                        \"Dataset\": \"10 metre V wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": 3,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                        \"Unit\": \"kg m**-2\",\n\t                        \"Data\": 5,\n", "                    },\n\t                    {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 26},\n\t                ],\n\t                \"(60.5, 25.0)\": [\n\t                    {\"Dataset\": \"Mean sea level pressure\", \"Unit\": \"Pa\", \"Data\": 10800},\n\t                    {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 287.7},\n\t                    {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 55},\n\t                    {\n\t                        \"Dataset\": \"10 metre U wind component\",\n\t                        \"Unit\": \"m s**-1\",\n", "                        \"Data\": 5,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"10 metre V wind component\",\n\t                        \"Unit\": \"m s**-1\",\n\t                        \"Data\": -2,\n\t                    },\n\t                    {\n\t                        \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                        \"Unit\": \"kg m**-2\",\n", "                        \"Data\": 6,\n\t                    },\n\t                    {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 27},\n\t                ],\n\t            }\n\t        }\n\t        self.assertEqual(data, expected_data)\n\t    @patch(\"src.services.data_fetcher.DataFetcher.get_forecast_data\")\n\t    def test_closest_poi_coordinate_data_is_fetched_correctly(\n\t        self, mock_download_stored_query\n", "    ):\n\t        mock_download_stored_query.return_value = self.grid_by_datetime\n\t        self.forecast.update_data()\n\t        poi = PointOfInterest()\n\t        poi.latitude = 60.15\n\t        poi.longitude = 24.65\n\t        aqi_data = {}\n\t        data = self.forecast.get_closest_poi_coordinates_data([poi], aqi_data)\n\t        expected_data = {\n\t            \"2023-06-19 08:00:00\": {\n", "                \"60.15, 24.65\": {\n\t                    \"Air temperature\": \"15.1 °C\",\n\t                    \"Cloud amount\": \"23 %\",\n\t                    \"Humidity\": \"51 %\",\n\t                    \"Precipitation\": \"2 mm\",\n\t                    \"Wind speed\": \"7.1 m/s\",\n\t                }\n\t            }\n\t        }\n\t        self.assertEqual(data, expected_data)\n", "    def test_get_coordinates_returns_correct_list_of_pairs(self):\n\t        self.forecast.coordinates = np.dstack(\n\t            (self.mock_grid.latitudes, self.mock_grid.longitudes)\n\t        )\n\t        coordinates = self.forecast.get_coordinates()\n\t        for lat, lon in zip(\n\t            self.mock_grid.latitudes.flatten(), self.mock_grid.longitudes.flatten()\n\t        ):\n\t            assert any(np.allclose([lat, lon], coord) for coord in coordinates)\n\t    def test_forecast_data_is_parsed_correctly(self):\n", "        data = [\n\t            {\"Dataset\": \"2 metre temperature\", \"Unit\": \"K\", \"Data\": 280.0},\n\t            {\"Dataset\": \"2 metre relative humidity\", \"Unit\": \"%\", \"Data\": 64.013},\n\t            {\"Dataset\": \"10 metre U wind component\", \"Unit\": \"m s**-1\", \"Data\": 1.223},\n\t            {\"Dataset\": \"10 metre V wind component\", \"Unit\": \"m s**-1\", \"Data\": -4.7},\n\t            {\n\t                \"Dataset\": \"surface precipitation amount, rain, convective\",\n\t                \"Unit\": \"kg m**-2\",\n\t                \"Data\": 0.0231,\n\t            },\n", "            {\"Dataset\": \"Total Cloud Cover\", \"Unit\": \"%\", \"Data\": 23.2},\n\t        ]\n\t        expected_parsed_data = {\n\t            \"Air temperature\": \"6.9 °C\",\n\t            \"Humidity\": \"64.0 %\",\n\t            \"Wind speed\": \"4.9 m/s\",\n\t            \"Precipitation\": \"0.0 mm\",\n\t            \"Cloud amount\": \"23.2 %\",\n\t        }\n\t        parsed_data = self.forecast.parse_forecast(data)\n", "        self.assertEqual(parsed_data, expected_parsed_data)\n"]}
{"filename": "recommender-back/src/tests/apis/current_test.py", "chunked_list": ["import unittest\n\tfrom unittest import mock\n\tfrom unittest.mock import MagicMock\n\tfrom src.app import app\n\tfrom src.apis.poi import PointOfInterest\n\tfrom src.apis.current import Current\n\tfrom src.services.data_fetcher import DataFetcher\n\tclass CurrentTest(unittest.TestCase):\n\t    def setUp(self):\n\t        app.testing = True\n", "        self.client = app.test_client()\n\t        self.item = PointOfInterest(longitude=24.65, latitude=60.15)\n\t        self.fetcher = DataFetcher()\n\t        self.expected_item = {\n\t            'Air temperature': '10.5 °C',\n\t            'Wind speed': '10.0 m/s',\n\t            'Precipitation': '10.0 %',\n\t            'Cloud amount': '5.0 %',\n\t            'Humidity': '60.0 %',\n\t            'Air quality': '1.0 AQI'\n", "        }\n\t    def test_get_current_weather(self):\n\t        with mock.patch(\n\t            \"src.services.data_fetcher.DataFetcher.get_current_weather_data\"\n\t        ) as mock_download:\n\t            mock_response = MagicMock()\n\t            mock_response.location_metadata = {\n\t                'station1': {'latitude': 60.1, 'longitude': 24.6},\n\t                'station2': {'latitude': 60.2, 'longitude': 24.7},\n\t            }\n", "            mock_response.data = {\n\t                'station1': {\n\t                    't2m': {'values': [10.5]},\n\t                    'ws_10min': {'values': ['nan']},\n\t                    'ri_10min': {'values': ['nan']},\n\t                    'n_man': {'values': ['nan']},\n\t                    'rh': {'values': ['nan']},\n\t                    'AQINDEX_PT1H_avg': {'values': ['nan']}\n\t                },\n\t                'station2': {\n", "                    't2m': {'values': [11.2]},\n\t                    'ws_10min': {'values': ['nan']},\n\t                    'ri_10min': {'values': ['nan']},\n\t                    'n_man': {'values': ['nan']},\n\t                    'rh': {'values': ['nan']},\n\t                    'AQINDEX_PT1H_avg': {'values': ['nan']}\n\t                }\n\t            }\n\t            mock_download.return_value = mock_response\n\t            self.current = Current(self.fetcher)\n", "            expected_data = {\n\t                'station1': {\n\t                    'Air temperature': '10.5 °C',\n\t                    'Latitude': 60.1,\n\t                    'Longitude': 24.6,\n\t                },\n\t                'station2': {\n\t                    'Air temperature': '11.2 °C',\n\t                    'Latitude': 60.2,\n\t                    'Longitude': 24.7,\n", "                },\n\t            }\n\t            self.assertEqual(self.current.weather, expected_data)\n\t    def test_weather_warning(self):\n\t        self.current = Current(self.fetcher)\n\t        self.current.weather = {\n\t            'station1': {\n\t                'Air temperature': '10.5 °C',\n\t                'Wind speed': '18.0 m/s',\n\t                'Precipitation': '10.0 %'\n", "            },\n\t            'station2': {\n\t                'Air temperature': '10.5 °C',\n\t                'Wind speed': '10.0 m/s',\n\t                'Precipitation': '10.0 %'\n\t            }\n\t        }\n\t        self.assertTrue(self.current.get_current_weather_warning('station1'))\n\t        self.assertFalse(self.current.get_current_weather_warning('station2'))\n\t    def test_find_nearest_stations_weather_data(self):\n", "        self.current = Current(self.fetcher)\n\t        self.current.weather = {\n\t            'station1': {\n\t                'Latitude': 60.1,\n\t                'Longitude': 24.6,\n\t                'Air temperature': '10.5 °C',\n\t                'Wind speed': '10.0 m/s',\n\t                'Precipitation': '10.0 %',\n\t                'Cloud amount': '5.0 %',\n\t                'Humidity': '60.0 %',\n", "                'Air quality': '1.0 AQI'\n\t            },\n\t            'station2': {\n\t                'Latitude': 60.5,\n\t                'Longitude': 26.0,\n\t                'Air temperature': '11.2 °C',\n\t                'Wind speed': '10.0 m/s',\n\t                'Precipitation': '10.0 %',\n\t                'Cloud amount': '5.0 %',\n\t                'Humidity': '60.0 %',\n", "                'Air quality': '1.0 AQI'\n\t            }\n\t        }\n\t        self.current.find_nearest_stations_weather_data(self.item)\n\t        self.assertEqual(self.item.weather[\"Current\"], self.expected_item)\n\t    def test_find_nearest_stations_weather_data_with_missing_fields(self):\n\t        self.current = Current(self.fetcher)\n\t        self.current.weather = {\n\t            'station1': {\n\t                'Latitude': 60.1,\n", "                'Longitude': 24.6,\n\t                'Air temperature': '10.5 °C',\n\t                'Precipitation': '10.0 %',\n\t                'Cloud amount': '5.0 %',\n\t                'Humidity': '60.0 %',\n\t                'Air quality': '1.0 AQI'\n\t            },\n\t            'station2': {\n\t                'Latitude': 60.5,\n\t                'Longitude': 26.0,\n", "                'Wind speed': '10.0 m/s',\n\t                'Precipitation': '10.0 %',\n\t                'Cloud amount': '5.0 %',\n\t                'Humidity': '60.0 %',\n\t                'Air quality': '1.0 AQI'\n\t            }\n\t        }\n\t        self.current.find_nearest_stations_weather_data(self.item)\n\t        self.assertEqual(self.item.weather[\"Current\"], self.expected_item)\n"]}
{"filename": "recommender-back/src/tests/apis/manager_test.py", "chunked_list": ["import unittest\n\tfrom unittest.mock import patch\n\tfrom src.db.db import get_collection\n\tfrom src.apis.manager import get_pois, find_nearest_coordinate_forecast_data, get_pois_as_json\n\tfrom src.apis.poi import PointOfInterest\n\tfrom src.app import app\n\tfrom src.tests.mock_data import MOCK_POIS\n\timport json\n\tclass TestManger(unittest.TestCase):\n\t    def setUp(self):\n", "        self.client = app.test_client()\n\t        self.fore = {\n\t            \"2023-07-20 12:00:00\": {\n\t                \"60.201231, 24.973478\": {\n\t                    \"Air temperature\": \"20.5 °C\",\n\t                    \"Humidity\": \"58.2 %\",\n\t                    \"Wind speed\": \"3.8 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"20.3 %\"\n\t                },\n", "                \"60.1998, 24.968672\": {\n\t                    \"Air temperature\": \"19.8 °C\",\n\t                    \"Humidity\": \"61.4 %\",\n\t                    \"Wind speed\": \"4.1 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"15.7 %\"\n\t                },\n\t                \"60.189543, 24.921326\": {\n\t                    \"Air temperature\": \"21.2 °C\",\n\t                    \"Humidity\": \"54.6 %\",\n", "                    \"Wind speed\": \"3.4 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"24.9 %\"\n\t                }\n\t            },\n\t            \"2023-07-20 13:30:00\": {\n\t                \"60.201231, 24.973478\": {\n\t                    \"Air temperature\": \"21.8 °C\",\n\t                    \"Humidity\": \"52.9 %\",\n\t                    \"Wind speed\": \"4.5 m/s\",\n", "                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"12.1 %\"\n\t                },\n\t                \"60.1998, 24.968672\": {\n\t                    \"Air temperature\": \"20.3 °C\",\n\t                    \"Humidity\": \"59.0 %\",\n\t                    \"Wind speed\": \"4.0 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"18.5 %\"\n\t                },\n", "                \"60.189543, 24.921326\": {\n\t                    \"Air temperature\": \"22.0 °C\",\n\t                    \"Humidity\": \"50.3 %\",\n\t                    \"Wind speed\": \"3.2 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"29.4 %\"\n\t                }\n\t            },\n\t            \"2023-07-20 15:15:00\": {\n\t                \"60.201231, 24.973478\": {\n", "                    \"Air temperature\": \"22.5 °C\",\n\t                    \"Humidity\": \"49.1 %\",\n\t                    \"Wind speed\": \"4.8 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"8.6 %\"\n\t                },\n\t                \"60.1998, 24.968672\": {\n\t                    \"Air temperature\": \"20.8 °C\",\n\t                    \"Humidity\": \"56.7 %\",\n\t                    \"Wind speed\": \"3.9 m/s\",\n", "                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"16.9 %\"\n\t                },\n\t                \"60.189543, 24.921326\": {\n\t                    \"Air temperature\": \"22.8 °C\",\n\t                    \"Humidity\": \"47.6 %\",\n\t                    \"Wind speed\": \"3.7 m/s\",\n\t                    \"Precipitation\": \"0.0 mm\",\n\t                    \"Cloud amount\": \"34.2 %\"\n\t                }\n", "            }\n\t        }\n\t    def test_get_simulated_pois_as_json(self):\n\t        params = {\n\t            \"air_temperature\": 10,\n\t            \"wind_speed\": 5,\n\t            \"humidity\": 10,\n\t            \"precipitation\": 5,\n\t            \"cloud_amount\": 10,\n\t            \"air_quality\": 2,\n", "            \"current_time\": '16:00',\n\t            'sunrise': '6:00',\n\t            'sunset': '22:00',\n\t        }\n\t        response = self.client.post(\n\t            '/api/simulator', \n\t            json=params,\n\t        )\n\t        data = json.loads(response.text)\n\t        tested = data[0]['weather']['Weather']\n", "        del tested['Score']\n\t        equals = {'Air temperature': '10 °C',\n\t                'Wind speed': '5 m/s',\n\t                'Humidity': '10 %',\n\t                'Precipitation': '5 mm',\n\t                'Cloud amount': '10 %',\n\t                'Air quality': 2}\n\t        self.assertEqual(tested, equals)\n\t    @patch('src.db.db.get_collection')\n\t    def test_get_pois_returns_list(self, mock_get_collection):\n", "        mock_get_collection.return_value.find.return_value = MOCK_POIS\n\t        result = get_pois()\n\t        self.assertIsInstance(result, list)\n\t    @patch('src.db.db.get_collection')\n\t    def test_get_pois_contains_items(self, mock_get_collection):\n\t        mock_get_collection.return_value.find.return_value = MOCK_POIS\n\t        result = get_pois()\n\t        self.assertTrue(len(result) > 0)\n\t    def test_get_pois_all_items_are_point_of_interest_objects(self):\n\t        result = get_pois()\n", "        for poi in result:\n\t            self.assertIsInstance(poi, PointOfInterest)\n\t    def test_get_pois_structure(self):\n\t        result = get_pois()\n\t        for poi in result:\n\t            self.assertTrue(hasattr(poi, 'name'))\n\t            self.assertTrue(hasattr(poi, 'latitude'))\n\t            self.assertTrue(hasattr(poi, 'longitude'))\n\t            self.assertTrue(hasattr(poi, 'not_accessible_for'))\n\t            self.assertTrue(hasattr(poi, 'categories'))\n", "    def test_get_pois_coordinates_valid(self):\n\t        result = get_pois()\n\t        for poi in result:\n\t            self.assertIsInstance(poi.latitude, float)\n\t            self.assertIsInstance(poi.longitude, float)\n\t    def test_find_nearest_coordinates(self):\n\t        pois = get_pois()\n\t        for onepoi in pois:\n\t            res = find_nearest_coordinate_forecast_data(onepoi, self.fore)\n\t            self.assertEqual(len(res.weather), 3)\n", "            break\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "recommender-back/src/tests/db/models_test.py", "chunked_list": ["import unittest\n\tfrom src.db.db import get_db\n\tfrom src.db.models import Poi\n\tclass TestManger(unittest.TestCase):\n\t    def test_saving_pois(self):\n\t        db = get_db()\n\t        collection = db['pois']\n\t        collection.delete_many({})\n\t        poi = Poi(\"Test POI\", \"21\", \"61\", [], [{\"category\": \"test\"}])\n\t        poi.save()\n", "        self.assertEqual(len(poi.get_all()), 1)\n\t        collection.delete_many({})\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "recommender-back/src/tests/db/db_test.py", "chunked_list": ["import unittest\n\tfrom src.db.db import get_db, get_collection\n\tclass TestManger(unittest.TestCase):\n\t    def test_getting_db(self):\n\t        db = get_db()\n\t        self.assertEqual(db.name, \"poidata\") \n\t    def test_getting_collection(self):\n\t        collection = get_collection()\n\t        collection.delete_many({})\n\t        self.assertEqual(collection.count_documents({}), 0)\n", "if __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "recommender-back/src/tests/services/data_fetcher_test.py", "chunked_list": ["from unittest import TestCase\n\tfrom unittest.mock import patch\n\tfrom src.services.data_fetcher import DataFetcher\n\tclass TestDataFetcher(TestCase):\n\t    def setUp(self):\n\t        self.fetcher = DataFetcher()\n\t        self.start = \"start\"\n\t        self.end = \"end\"\n\t        self.bbox = \"bbox\"\n\t        self.timestep = \"timestep\"\n", "        self.parameters = \"parameters\"\n\t        self.timeseries = \"timeseries\"\n\t    @patch(\"src.services.data_fetcher.download_stored_query\")\n\t    def test_get_forecast_data(self, mock_download):\n\t        mock_download.return_value = \"mock forecast data\"\n\t        result = self.fetcher.get_forecast_data(\n\t            self.start, self.end, self.bbox, self.timestep, self.parameters\n\t        )\n\t        mock_download.assert_called_once_with(\n\t            \"fmi::forecast::harmonie::surface::grid\",\n", "            args=[\n\t                f\"starttime={self.start}\",\n\t                f\"endtime={self.end}\",\n\t                f\"bbox={self.bbox}\",\n\t                f\"timestep={self.timestep}\",\n\t                f\"parameters={self.parameters}\",\n\t            ],\n\t        )\n\t        self.assertEqual(result, \"mock forecast data\")\n\t    @patch(\"src.services.data_fetcher.download_stored_query\")\n", "    def test_get_current_weather_data(self, mock_download):\n\t        mock_download.return_value = \"mock weather data\"\n\t        result = self.fetcher.get_current_weather_data(self.bbox, self.timeseries)\n\t        mock_download.assert_called_once_with(\n\t            \"fmi::observations::weather::multipointcoverage\",\n\t            args=[f\"bbox={self.bbox}\", f\"timeseries={self.timeseries}\"],\n\t        )\n\t        self.assertEqual(result, \"mock weather data\")\n"]}
{"filename": "recommender-back/src/db/models.py", "chunked_list": ["from .db import get_db\n\tdb = get_db()\n\tpois_collection = db['pois']  \n\tclass Poi:\n\t    def __init__(self, name, latitude, longitude, accessibility, categories):\n\t        self.name = name\n\t        self.latitude = latitude\n\t        self.longitude = longitude\n\t        self.accessibility = accessibility\n\t        self.categories = categories\n", "    def save(self):\n\t        pois_collection.insert_one({\n\t            'name': self.name,\n\t            'latitude': self.latitude,\n\t            'longitude': self.longitude,\n\t            'not_accessible_for': self.accessibility,\n\t            'categories': self.categories\n\t        })\n\t    def get_all(test=False):\n\t        all_documents = pois_collection.find()\n", "        pois = list(all_documents)\n\t        return pois\n"]}
{"filename": "recommender-back/src/db/db.py", "chunked_list": ["import os\n\tfrom dotenv import load_dotenv\n\tfrom pymongo import MongoClient\n\tload_dotenv()\n\tif 'MONGO_URI' in os.environ:\n\t        mongo_uri = os.environ['MONGO_URI']\n\telse:\n\t    mongo_uri = os.environ.get('DEVELOPMENT_DB_URI')\n\tprint(' * Connecting to MongoDB')\n\tdef get_db():\n", "    try:\n\t        client = MongoClient(mongo_uri)\n\t        db = client.get_database('poidata')\n\t        return db\n\t    except Exception as e:\n\t        print(' * Error connecting to MongoDB:', str(e))\n\t        return None\n\tdef get_collection():\n\t    try:\n\t        db = get_db()\n", "        collection=db['pois']\n\t        return collection          \n\t    except Exception as e:\n\t        print(' * Error getting collection in MongoDB:', str(e))\n\t        return None\n"]}
{"filename": "recommender-back/src/static/scoring_plot_local.py", "chunked_list": ["# File to easily test the scoring without deps to anything\n\t# Includes basic plot structure\n\t# This file contains duplicated code of poi.py\n\timport pandas as pd\n\timport seaborn as sns\n\timport math as math\n\tfrom matplotlib import pyplot as plt\n\t# Outdoor\n\tdef get_out_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time):\n\t    # Weights\n", "    precipitation_weight = 0.35\n\t    temperature_weight = 0.3\n\t    clouds_weight = 0.04\n\t    wind_speed_weight = 0.04\n\t    humidity_weight = 0.02\n\t    # Scoring\n\t    score = precipitation_weight * math.exp(-precipitation)\n\t    temperature_comp = 0\n\t    if 20 <= temperature <= 25:\n\t        temperature_comp = 1\n", "    elif temperature < 20:\n\t        temperature_comp = math.exp(-0.1 * (20 - temperature))\n\t    else:\n\t        temperature_comp = math.exp(0.1 * (25 - temperature))\n\t    score += temperature_weight * temperature_comp\n\t    if sunrise <= cur_time <= sunset:\n\t        day_time_weight = 0.2\n\t        score += day_time_weight\n\t    # score += air_weight * math.exp(0.5 * 1- air)\n\t    score += clouds_weight * math.exp(-clouds)\n", "    score += wind_speed_weight * math.exp(-wind_speed)\n\t    if 0.4 <= humidity <= 0.55:\n\t        humidity_weight = 0.02\n\t        score += humidity_weight\n\t    return score\n\t# Indoor\n\tdef get_in_score(temperature, wind_speed, humidity, precipitation, clouds, sunrise, sunset, cur_time):\n\t    # Weights\n\t    precipitation_weight = 0.7\n\t    temperature_weight = 0.1\n", "    clouds_weight = 0.04\n\t    wind_speed_weight = 0.03\n\t    # Scoring\n\t    score = precipitation_weight * (1 - math.exp(-10 * precipitation))\n\t    temperature_comp = 0\n\t    if 20 <= temperature <= 25:\n\t        temperature_comp = 0\n\t    elif temperature < 20:\n\t        temperature_comp = 1 - math.exp(-0.04 * (20 - temperature))\n\t    else:\n", "        temperature_comp = 1 - math.exp(0.2 * (25 - temperature))\n\t    score += temperature_weight * temperature_comp\n\t    if sunrise > cur_time or cur_time > sunset:\n\t        day_time_weight = 0.06\n\t        score += day_time_weight\n\t    # score += air_weight * (1 - math.exp(0.5 * 1- air))\n\t    score += clouds_weight * (1 - math.exp(-3 * clouds))\n\t    score += wind_speed_weight * (1 - math.exp(-0.3 * wind_speed))\n\t    if humidity < 0.4 or humidity > 0.55:\n\t        humidity_weight = 0.02\n", "        score += humidity_weight\n\t    return score\n\tdef build_chart(var_vals, scores, label):\n\t    var_df= pd.DataFrame({\"var\" : var_vals, \"score\" : scores})\n\t    fig, ax= plt.subplots(figsize=(4, 4))\n\t    sns.lineplot(data=var_df, x=\"var\", y=\"score\", ax=ax)\n\t    ax.set_xlabel(label, fontsize=15)\n\t    ax.set_ylabel(\"score\", fontsize=15)\n\t    ax.tick_params(labelsize=15)\n\t    plt.tight_layout()\n", "    plt.show()\n\tif __name__ == \"__main__\":\n\t    print('Outdoor')\n\t    print(\"min\", get_out_score(-40, 20, 0.9, 20, 0.9,\"06:00\", '20:00', '23:00'))\n\t    # expected 0.017006412949531466\n\t    print(\"max\", get_out_score(24, 0, 0.5, 0, 0, '06:00' , '20:00', '10:00'))\n\t    # expected 1\n\t    print('Indoor')\n\t    print(\"min\", get_in_score(24, 0, 0.5, 0, 0, '06:00' , '20:00', '10:00'))\n\t    # expected 0 \n", "    print(\"max\", get_in_score(-40, 20, 0.9, 20, 0.9,\"06:00\", '20:00', '23:00'))\n\t    # expected 0.9813988574343381\n\t    # Not reaching the wanted scores bcs AQI still missing\n\t    # Plot for temp outdoor\n\t    var_vals= [*range(-40, 40)]\n\t    scores = [get_out_score(var, 0, 0.5, 0, 0,\"06:00\", '20:00', '23:00') for var in var_vals]\n\t    build_chart(var_vals, scores, \"temperature\")\n"]}
{"filename": "recommender-back/src/services/poi_init.py", "chunked_list": ["import os\n\timport json\n\timport copy\n\tfrom ..apis.poi import PointOfInterest\n\tfrom ..db.models import Poi\n\tdef init_pois():\n\t    '''\n\t    Retrieves all points of interest (POIs) from JSON files and merges them together.\n\t    Args:\n\t        category (list): List of categories of POIs to retrieve. If None, default categories will be used.\n", "    Returns:\n\t        list: List of all POIs.\n\t    '''\n\t    try:\n\t        print(' * Initiliazing POIs to MongoDB')\n\t        file_path = os.path.join(os.path.dirname(__file__), '..', 'static', 'pois.json')\n\t        with open(file_path, 'r', encoding='utf-8') as file:\n\t            data = json.load(file)\n\t            pois = filter_duplicates(iterate_items(data, []))\n\t            for poi in pois:\n", "                Poi.save(Poi(poi.name, poi.latitude, poi.longitude, poi.not_accessible_for, poi.categories))\n\t        return pois\n\t    except FileNotFoundError:\n\t        print(' * Error: pois.json not found.')\n\t    except Exception as e:\n\t        print(f' * Error occurred while initializing POIs: {e}')\n\tdef filter_duplicates(pois):\n\t    uniques = {}\n\t    for poi in pois:\n\t        name = poi.name\n", "        if name not in uniques:\n\t            uniques[name] = poi\n\t    return list(uniques.values())\n\tdef iterate_items(data, categories):\n\t    '''\n\t    Recursively iterates over the data and constructs a list of PointOfInterest objects.\n\t    Args:\n\t        data (list or dict): The data to iterate over.\n\t        categories (list): The list of categories associated with the current data level.\n\t    Returns:\n", "        list: List of PointOfInterest objects constructed from the data.\n\t    '''\n\t    pois = []\n\t    if isinstance(data, list):\n\t        for item in data:\n\t            name = item['name']['fi']\n\t            longitude = item['location']['coordinates'][0]\n\t            latitude = item['location']['coordinates'][1]\n\t            not_accessible_for = list(item['accessibility_shortcoming_count'].keys())\n\t            poi = PointOfInterest(name, latitude, longitude,\n", "                                  not_accessible_for, categories)\n\t            pois.append(poi)\n\t    else:\n\t        for key, item in data.items():\n\t            categories.append(key)\n\t            pois.extend(iterate_items(item, copy.deepcopy(categories)))\n\t            categories.pop()\n\t    return pois\n"]}
{"filename": "recommender-back/src/services/data_fetcher.py", "chunked_list": ["'''\n\tThis module provides functionality for fetching forecast and current weather data\n\tusing the Finnish Meteorological Institute's open data interface.\n\t'''\n\tfrom typing import Dict\n\tfrom fmiopendata.wfs import download_stored_query\n\tclass DataFetcher:\n\t    '''\n\t    This class provides methods for fetching forecast and current weather data\n\t    using the Finnish Meteorological Institute's open data interface.\n", "    '''\n\t    def get_forecast_data(\n\t        self, start: str, end: str, bbox: str, timestep: int, parameters: str\n\t    ) -> Dict:\n\t        '''\n\t        Fetches forecast data for a specified time range, area, timestep and parameters.\n\t        Args:\n\t            start (str): The start time of the forecast period in ISO format.\n\t            end (str): The end time of the forecast period in ISO format.\n\t            bbox (str): Bounding box for the forecast area in format 'xmin,ymin,xmax,ymax'.\n", "            timestep (int): The timestep in minutes for the forecast data.\n\t            parameters (str): Comma-separated list of parameters to fetch.\n\t        Returns:\n\t            dict: A dictionary containing the forecast data.\n\t        '''\n\t        return download_stored_query(\n\t            'fmi::forecast::harmonie::surface::grid',\n\t            args=[\n\t                f'starttime={start}',\n\t                f'endtime={end}',\n", "                f'bbox={bbox}',\n\t                f'timestep={timestep}',\n\t                f'parameters={parameters}',\n\t            ],\n\t        )\n\t    def get_current_weather_data(self, bbox: str, timeseries: bool) -> Dict:\n\t        '''\n\t        Fetches current weather data for a specified area and timeseries.\n\t        Args:\n\t            bbox (str): Bounding box for the forecast area in format 'xmin,ymin,xmax,ymax'.\n", "            timeseries (bool): Whether to fetch data as a time series or not.\n\t        Returns:\n\t            dict: A dictionary containing the current weather data.\n\t        '''\n\t        return download_stored_query(\n\t            'fmi::observations::weather::multipointcoverage',\n\t            args=[\n\t                f'bbox={bbox}',\n\t                f'timeseries={timeseries}',\n\t            ],\n", "        )\n\t    def get_current_air_quality_data(self, bbox: str, timeseries: bool, parameters: str) -> Dict:\n\t        '''\n\t        Fetches current weather data for a specified area and timeseries.\n\t        Args:\n\t            bbox (str): Bounding box for the forecast area in format 'xmin,ymin,xmax,ymax'.\n\t            timeseries (bool): Whether to fetch data as a time series or not.\n\t        Returns:\n\t            dict: A dictionary containing the current weather data.\n\t        '''\n", "        return download_stored_query(\n\t            'urban::observations::airquality::hourly::multipointcoverage',\n\t            args=[\n\t                f'bbox={bbox}',\n\t                f'timeseries={timeseries}',\n\t                f'parameters={parameters}',\n\t            ],\n\t        )\n"]}
