{"filename": "tasks.py", "chunked_list": ["\"\"\"Invoke tasks.\"\"\"\n\timport os\n\tfrom distutils.util import strtobool\n\tfrom invoke import Collection, task as invoke_task\n\tNETBOX_VERSION = \"v3.5.4\"\n\tnamespace = Collection(\"netbox\")\n\tnamespace.configure(\n\t    {\n\t        \"netbox\": {\n\t            \"project_name\": \"netbox-celery\",\n", "            \"python_ver\": \"3.9\",\n\t            \"local\": bool(strtobool(os.environ.get(\"INVOKE_NETBOX_LOCAL\", \"false\"))),\n\t            \"compose_dir\": os.path.join(os.path.dirname(__file__), \"docker/\"),\n\t            \"local_compose_files\": [\n\t                \"docker-compose.local.yml\",\n\t            ],\n\t            \"dev_compose_files\": [\n\t                \"docker-compose.yml\",\n\t                \"docker-compose.dev.yml\",\n\t            ],\n", "            \"prod_compose_files\": [\n\t                \"docker-compose.yml\",\n\t                \"docker-compose.prod.yml\",\n\t            ],\n\t        }\n\t    }\n\t)\n\tdef is_truthy(arg):\n\t    \"\"\"Convert \"truthy\" strings into Booleans.\n\t    Examples:\n", "        >>> is_truthy('yes')\n\t        True\n\t    Args:\n\t        arg (str): Truthy string (True values are y, yes, t, true, on and 1; false values are n, no,\n\t        f, false, off and 0. Raises ValueError if val is anything else.\n\t    \"\"\"\n\t    if isinstance(arg, bool):\n\t        return arg\n\t    return bool(strtobool(arg))\n\tdef task(function=None, *args, **kwargs):\n", "    \"\"\"Task decorator to override the default Invoke task decorator.\"\"\"\n\t    def task_wrapper(function=None):\n\t        \"\"\"Wrapper around invoke.task to add the task to the namespace as well.\"\"\"\n\t        if args or kwargs:\n\t            task_func = invoke_task(*args, **kwargs)(function)\n\t        else:\n\t            task_func = invoke_task(function)\n\t        namespace.add_task(task_func)\n\t        return task_func\n\t    if function:\n", "        # The decorator was called with no arguments\n\t        return task_wrapper(function)\n\t    # The decorator was called with arguments\n\t    return task_wrapper\n\tdef docker_compose(context, command, target=\"dev\", **kwargs):\n\t    \"\"\"Helper function for running a specific docker compose command with all appropriate parameters and environment.\n\t    Args:\n\t        context (obj): Used to run specific commands\n\t        command (str): Command string to append to the \"docker compose ...\" command, such as \"build\", \"up\", etc.\n\t        **kwargs: Passed through to the context.run() call.\n", "    \"\"\"\n\t    compose_command = f'docker compose --project-name {context.netbox.project_name} --project-directory \"{context.netbox.compose_dir}\"'\n\t    for compose_file in getattr(context.netbox, f\"{target}_compose_files\"):\n\t        compose_file_path = os.path.join(context.netbox.compose_dir, compose_file)\n\t        compose_command += f' -f \"{compose_file_path}\"'\n\t    compose_command += f\" {command}\"\n\t    # If `service` was passed as a kwarg, add it to the end.\n\t    service = kwargs.pop(\"service\", None)\n\t    if service is not None:\n\t        compose_command += f\" {service}\"\n", "    print(f'Running docker compose command \"{command}\"')\n\t    return context.run(\n\t        compose_command,\n\t        env={\"PYTHON_VER\": context.netbox.python_ver},\n\t        **kwargs,\n\t    )\n\tdef run_cmd(context, command, **kwargs):\n\t    \"\"\"Run a command locally or inside container.\"\"\"\n\t    if is_truthy(context.netbox.local):\n\t        context.run(command, pty=True, **kwargs)\n", "    else:\n\t        # Check if netbox is running; no need to start another netbox container to run a command\n\t        docker_compose_status = \"ps --services --filter status=running\"\n\t        results = docker_compose(context, docker_compose_status, hide=\"out\")\n\t        if \"netbox\" in results.stdout:\n\t            compose_command = f\"exec netbox {command}\"\n\t        else:\n\t            compose_command = f\"run --entrypoint '{command}' netbox\"\n\t        docker_compose(context, compose_command, pty=True)\n\t@task(help={\"container\": \"Name of the container to shell into\"})\n", "def cli(context, container=\"netbox\"):\n\t    \"\"\"Launch a bash shell inside the running netbox container.\"\"\"\n\t    docker_compose(context, f\"exec {container} bash\", pty=True)\n\t@task(\n\t    help={\n\t        \"user\": \"Name of the superuser to create. (Default: admin)\",\n\t    }\n\t)\n\tdef createsuperuser(context, user=\"admin\"):\n\t    \"\"\"Create a new netbox superuser account (default: \"admin\"), will prompt for password.\"\"\"\n", "    command = \"python manage.py createsuperuser --username admin\"\n\t    run_cmd(context, command)\n\t@task(\n\t    help={\n\t        \"force_rm\": \"Always remove intermediate containers.\",\n\t        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n\t    }\n\t)\n\tdef build(\n\t    context,\n", "    force_rm=False,\n\t    cache=True,\n\t    target=\"dev\",\n\t    image_name=\"netbox\",\n\t    tag=\"latest\",\n\t):\n\t    \"\"\"Build netbox docker image.\"\"\"\n\t    command = f\"build --build-arg PYTHON_VER={context.netbox.python_ver}\"\n\t    if not cache:\n\t        command += \" --no-cache\"\n", "    if force_rm:\n\t        command += \" --force-rm\"\n\t    print(f\"Building netbox with Python {context.netbox.python_ver}...\")\n\t    docker_compose(context, command, target=target)\n\t@task(\n\t    help={\n\t        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n\t        \"cache_dir\": \"Directory to use for caching buildx output. (Default: /home/travis/.cache/docker)\",\n\t        \"platforms\": \"Comma-separated list of strings for which to build. (Default: linux/amd64)\",\n\t        \"target\": \"Build target from the Dockerfile. (Default: dev)\",\n", "    }\n\t)\n\tdef buildx(\n\t    context,\n\t    cache=False,\n\t    cache_dir=\"\",\n\t    platforms=\"linux/amd64\",\n\t    target=\"dev\",\n\t    image_name=\"netbox\",\n\t):\n", "    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n\t    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n\t    command = f\"docker buildx build --tag {image_name} --platform {platforms} --load -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n\t    if not cache:\n\t        command += \" --no-cache\"\n\t    else:\n\t        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\t    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})\n\t@task(\n\t    help={\n", "        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n\t        \"cache_dir\": \"Directory to use for caching buildx output. (Default: /home/travis/.cache/docker)\",\n\t        \"platforms\": \"Comma-separated list of strings for which to build. (Default: linux/amd64)\",\n\t        \"target\": \"Build target from the Dockerfile. (Default: dev)\",\n\t    }\n\t)\n\tdef docker_build(\n\t    context,\n\t    cache=False,\n\t    cache_dir=\"\",\n", "    platforms=\"linux/amd64\",\n\t    target=\"dev\",\n\t    image_name=\"netbox\",\n\t):\n\t    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n\t    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n\t    command = f\"docker build --tag {image_name} --platform {platforms} --target {target} -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n\t    if not cache:\n\t        command += \" --no-cache\"\n\t    else:\n", "        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\t    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})\n\t@task(help={\"service\": \"If specified, only affect this service.\"})\n\tdef debug(context, service=None, target=\"dev\"):\n\t    \"\"\"Start netbox and its dependencies in debug mode.\"\"\"\n\t    print(\"Starting netbox in debug mode...\")\n\t    docker_compose(context, \"up\", service=service, target=target)\n\t@task(help={\"service\": \"If specified, only affect this service.\"})\n\tdef start(context, service=None, target=\"dev\"):\n\t    \"\"\"Start netbox and its dependencies in detached mode.\"\"\"\n", "    print(\"Starting netbox in detached mode...\")\n\t    docker_compose(context, \"up --detach\", service=service, target=target)\n\t@task(help={\"service\": \"If specified, only affect this service.\"})\n\tdef restart(context, service=None, target=\"dev\"):\n\t    \"\"\"Gracefully restart containers.\"\"\"\n\t    print(\"Restarting netbox...\")\n\t    docker_compose(context, \"restart\", service=service, target=target)\n\t@task(help={\"service\": \"If specified, only affect this service.\"})\n\tdef stop(context, service=None, target=\"dev\"):\n\t    \"\"\"Stop netbox and its dependencies.\"\"\"\n", "    print(\"Stopping netbox...\")\n\t    if not service:\n\t        docker_compose(context, \"down\", target=target)\n\t    else:\n\t        docker_compose(context, \"stop\", service=service, target=target)\n\t@task\n\tdef destroy(context, target=\"dev\"):\n\t    \"\"\"Destroy all containers and volumes.\"\"\"\n\t    print(\"Destroying netbox...\")\n\t    docker_compose(context, \"down --volumes\", target=target)\n", "@task\n\tdef build_local_env(context):\n\t    \"\"\"Build local environment for development.\"\"\"\n\t    print(\"Building local environment...\")\n\t    context.run(\"rm -rf netbox\")\n\t    context.run(\"mkdir netbox\")\n\t    context.run(\n\t        f\"curl -L https://codeload.github.com/netbox-community/netbox/tar.gz/refs/tags/{NETBOX_VERSION} | tar -xz --strip=1 -C ./netbox\"\n\t    )\n\t    context.run(\"pip install -r ./netbox/requirements.txt\")\n", "    context.run(\"poetry install\")\n\t    if not os.path.isfile(\"./docker/configuration/configuration.py\"):\n\t        context.run(\n\t            \"cp $(pwd)/docker/configuration/configuration.example.py $(pwd)/docker/configuration/configuration.py\"\n\t        )\n\t    if not os.path.islink(\"./netbox/netbox/netbox/configuration.py\"):\n\t        context.run(\"rm -f $(pwd)/netbox/netbox/netbox/configuration.py\")\n\t        context.run(\"ln -s $(pwd)/docker/configuration/configuration.py $(pwd)/netbox/netbox/netbox/\")\n\t    print(\"To run with containerized db use `invoke debug --target=local` before starting Django process.\")\n\t@task\n", "def manage(context, command, target=\"dev\"):\n\t    \"\"\"Run a Django management command.\"\"\"\n\t    print(f\"Running Django management command: {command}\")\n\t    docker_compose(context, f\"run --rm netbox python3 ./manage.py {command}\", target=target)\n\t@task(help={\"name\": \"Use this name for migration file(s). If unspecified, a name will be generated.\"})\n\tdef makemigrations(context, name=\"\"):\n\t    \"\"\"Perform makemigrations operation in Django.\"\"\"\n\t    command = \"python manage.py makemigrations\"\n\t    if name:\n\t        command += f\" --name {name}\"\n", "    run_cmd(context, command)\n\t@task\n\tdef migrate(context):\n\t    \"\"\"Perform migrate operation in Django.\"\"\"\n\t    command = \"python manage.py migrate\"\n\t    run_cmd(context, command)\n\t@task()\n\tdef pytest(context):\n\t    \"\"\"Launch pytest for the specified name and Python version.\n\t    Args:\n", "        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    # Install python module\n\t    exec_cmd = \"pytest -vv\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef black(context):\n\t    \"\"\"Launch black to check that Python files adherence to black standards.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = \"black --exclude ./workspace --check --diff .\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef blacken(context):\n\t    \"\"\"Launch black to apply black standards to the code.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = \"black .\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef flake8(context):\n\t    \"\"\"Launch flake8 for the specified name and Python version.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = \"flake8 --exclude=./workspace,./netbox .\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef pylint(context):\n\t    \"\"\"Launch pylint for the specified name and Python version.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = 'find . -type f -name \"*.py\" | xargs pylint'\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef yamllint(context):\n\t    \"\"\"Launch yamllint to validate formatting.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = 'yamllint -d \"{ignore: ./workspace}\" .'\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef pydocstyle(context):\n\t    \"\"\"Launch pydocstyle to validate docstring.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = \"pydocstyle .\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef bandit(context):\n\t    \"\"\"Launch bandit to validate basic static code security analysis.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    # pty is set to true to properly run the docker commands due to the invocation process of docker\n\t    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n\t    exec_cmd = \"bandit --recursive ./\"\n\t    run_cmd(context, exec_cmd)\n\t@task()\n\tdef tests(context):\n\t    \"\"\"Launch all tests for the specified name and Python version.\n", "    Args:\n\t        context (obj): Used to run specific commands\n\t    \"\"\"\n\t    print(\"Running black...\")\n\t    black(context)\n\t    print(\"Running flake8...\")\n\t    flake8(context)\n\t    # print(\"Running pylint...\")\n\t    # pylint(context)\n\t    print(\"Running yamllint...\")\n", "    yamllint(context)\n\t    # print(\"Running pydocstyle...\")\n\t    # pydocstyle(context)\n\t    # print(\"Running bandit...\")\n\t    # bandit(context)\n\t    # print(\"Running pytest...\")\n\t    # pytest(context)\n\t    print(\"All tests have passed!\")\n"]}
{"filename": "netbox_celery/tasks.py", "chunked_list": ["\"\"\"Base tasks for Celery.\"\"\"\n\timport logging\n\tfrom datetime import datetime\n\tfrom celery.app.task import Task\n\tfrom celery import shared_task\n\tfrom netbox_celery.choices import CeleryResultStatusChoices\n\tfrom netbox_celery.models import CeleryResult\n\tlogger = logging.getLogger(\"netbox_celery.tasks\")\n\tclass CeleryBaseTask(Task):\n\t    \"\"\"Celery Base Task.\"\"\"\n", "    name = \"\"\n\t    description = \"\"\n\t    ignore_result = False\n\t    validation_class = \"\"\n\t    task_id = None\n\t    task_obj = None\n\t    def __call__(self, task_id, *args, **kwargs):\n\t        \"\"\"Call task.\"\"\"\n\t        self.task_id = task_id\n\t        self.get_result_obj(task_id)\n", "        self.task_obj.status = CeleryResultStatusChoices.STATUS_RUNNING\n\t        self.task_obj.save()\n\t        return super().__call__(task_id, *args, **kwargs)\n\t    def run(self, task_id):  # pylint: disable=arguments-differ\n\t        \"\"\"Run task.\"\"\"\n\t        raise NotImplementedError(\"You must implement the run method.\")\n\t    def on_success(self, retval, task_id, args, kwargs):\n\t        \"\"\"On success.\"\"\"\n\t        if self.task_obj.status not in [\n\t            CeleryResultStatusChoices.STATUS_FAILED,\n", "            CeleryResultStatusChoices.STATUS_ERRORED,\n\t        ]:\n\t            self.task_obj.status = CeleryResultStatusChoices.STATUS_COMPLETED\n\t        self.task_obj.completed = datetime.now()\n\t        self.task_obj.save()\n\t    def on_failure(self, exc, task_id, args, kwargs, einfo):\n\t        \"\"\"On failure.\"\"\"\n\t        if self.task_obj:\n\t            self.task_obj.status = CeleryResultStatusChoices.STATUS_FAILED\n\t            self.task_obj.completed = datetime.now()\n", "            for line in einfo.traceback.splitlines():\n\t                self.log(logging.ERROR, str(line))\n\t            self.task_obj.save()\n\t    def get_result_obj(self, primary_key):\n\t        \"\"\"Get result object.\"\"\"\n\t        self.task_obj = CeleryResult.objects.get(pk=primary_key)\n\t        return self.task_obj\n\t    def log(self, message, level_choice=logging.INFO):\n\t        \"\"\"Log message.\"\"\"\n\t        self.task_obj.log(level_choice, message)\n", "def netbox_celery_task(*args, base=CeleryBaseTask, bind=True, **kwargs):\n\t    \"\"\"Netbox Celery Task Decorator.\n\t    This decorator is used to set default values for the Celery task.\n\t    Args:\n\t        base (CeleryBaseTask): Base task class.\n\t        bind (bool): Bind task to instance.\n\t    Returns:\n\t        shared_task: Shared task.\n\t    \"\"\"\n\t    return shared_task(*args, base=base, bind=bind, **kwargs)\n"]}
{"filename": "netbox_celery/choices.py", "chunked_list": ["\"\"\"Netbox Celery choices.\"\"\"\n\tfrom utilities.choices import ChoiceSet\n\tclass CeleryResultStatusChoices(ChoiceSet):\n\t    \"\"\"Job result status choices.\"\"\"\n\t    STATUS_PENDING = \"pending\"\n\t    STATUS_RUNNING = \"running\"\n\t    STATUS_COMPLETED = \"completed\"\n\t    STATUS_ERRORED = \"errored\"\n\t    STATUS_FAILED = \"failed\"\n\t    CHOICES = (\n", "        (STATUS_PENDING, \"Pending\"),\n\t        (STATUS_RUNNING, \"Running\"),\n\t        (STATUS_COMPLETED, \"Completed\"),\n\t        (STATUS_ERRORED, \"Errored\"),\n\t        (STATUS_FAILED, \"Failed\"),\n\t    )\n\t    TERMINAL_STATE_CHOICES = (\n\t        STATUS_COMPLETED,\n\t        STATUS_ERRORED,\n\t        STATUS_FAILED,\n", "    )\n\tclass LogLevelChoices(ChoiceSet):\n\t    \"\"\"Log level choices.\"\"\"\n\t    LOG_DEFAULT = \"default\"\n\t    LOG_SUCCESS = \"success\"\n\t    LOG_INFO = \"info\"\n\t    LOG_WARNING = \"warning\"\n\t    LOG_FAILURE = \"failure\"\n\t    CHOICES = (\n\t        (LOG_DEFAULT, \"Default\", \"gray\"),\n", "        (LOG_SUCCESS, \"Success\", \"green\"),\n\t        (LOG_INFO, \"Info\", \"cyan\"),\n\t        (LOG_WARNING, \"Warning\", \"yellow\"),\n\t        (LOG_FAILURE, \"Failure\", \"red\"),\n\t    )\n\tclass LogLevelIntegerChoices(ChoiceSet):\n\t    \"\"\"Log level choices.\"\"\"\n\t    LOG_DEFAULT = 20\n\t    LOG_DEBUG = 10\n\t    LOG_INFO = 20\n", "    LOG_SUCCESS = 25\n\t    LOG_WARNING = 30\n\t    LOG_FAILURE = 40\n\t    LOG_ERROR = 40\n\t    LOG_CRITICAL = 50\n\t    CHOICES = (\n\t        (LOG_DEFAULT, \"Default\"),\n\t        (LOG_DEBUG, \"Debug\"),\n\t        (LOG_INFO, \"Info\"),\n\t        (LOG_SUCCESS, \"Success\"),\n", "        (LOG_WARNING, \"Warning\"),\n\t        (LOG_FAILURE, \"Failure\"),\n\t        (LOG_ERROR, \"Error\"),\n\t        (LOG_CRITICAL, \"Critical\"),\n\t    )\n"]}
{"filename": "netbox_celery/models.py", "chunked_list": ["\"\"\"Netbox Celery Models.\"\"\"\n\timport logging\n\timport uuid\n\tfrom celery import current_app\n\tfrom celery.exceptions import NotRegistered\n\tfrom django.core.serializers.json import DjangoJSONEncoder\n\tfrom django.db import models\n\tfrom django.urls import reverse\n\tfrom django.utils import timezone\n\tfrom netbox_celery.choices import CeleryResultStatusChoices, LogLevelIntegerChoices\n", "from users.models import User\n\tfrom utilities.querysets import RestrictedQuerySet\n\tfrom netbox.models import NetBoxModel\n\tlogger = logging.getLogger(\"netbox_celery.models\")\n\tclass CeleryResult(NetBoxModel):\n\t    \"\"\"Celery Result Class.\n\t    This class is used to store the results of celery tasks.\n\t    Attributes:\n\t        task_id (UUIDField): The UUID of the task.\n\t        celery_name (CharField): The name of the celery task.\n", "        created (DateTimeField): The date and time the task was created.\n\t        completed (DateTimeField): The date and time the task was completed.\n\t        user (ForeignKey): The user that created the task.\n\t        status (CharField): The status of the task.\n\t        args (JSONField): The args of the task.\n\t        kwargs (JSONField): The kwargs of the task.\n\t        job_kwargs (JSONField): The job_kwargs of the task.\n\t        result (JSONField): The result of the task.\n\t    \"\"\"\n\t    task_id = models.UUIDField(unique=True)\n", "    celery_name = models.CharField(max_length=255)\n\t    created = models.DateTimeField(auto_now_add=True)\n\t    completed = models.DateTimeField(null=True, blank=True)\n\t    user = models.ForeignKey(User, on_delete=models.SET_NULL, related_name=\"+\", blank=True, null=True)\n\t    status = models.CharField(\n\t        max_length=30,\n\t        choices=CeleryResultStatusChoices,\n\t        default=CeleryResultStatusChoices.STATUS_PENDING,\n\t    )\n\t    args = models.JSONField(encoder=DjangoJSONEncoder, null=True, blank=True)\n", "    kwargs = models.JSONField(encoder=DjangoJSONEncoder, null=True, blank=True)\n\t    job_kwargs = models.JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n\t    result = models.JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n\t    objects = RestrictedQuerySet.as_manager()\n\t    class Meta:\n\t        \"\"\"Meta Class.\"\"\"\n\t        verbose_name = \"Celery Result\"\n\t        verbose_name_plural = \"Celery Results\"\n\t        ordering = [\"-created\"]\n\t    def __str__(self):\n", "        \"\"\"String representation.\"\"\"\n\t        return f\"{self.celery_name} - {self.status}\"\n\t    def get_absolute_url(self):\n\t        \"\"\"Get absolute url.\"\"\"\n\t        return reverse(\"plugins:netbox_celery:celeryresult_view\", kwargs={\"pk\": self.pk})\n\t    @classmethod\n\t    def enqueue_job(  # pylint: disable=dangerous-default-value\n\t        cls,\n\t        celery_name,\n\t        user,\n", "        celery_kwargs={},\n\t        task_id=None,\n\t        args=[],\n\t        kwargs={},\n\t    ):\n\t        \"\"\"Enqueue job.\"\"\"\n\t        if not task_id:\n\t            task_id = uuid.uuid4()\n\t        celery_result = cls.objects.create(\n\t            celery_name=celery_name,\n", "            user=user,\n\t            task_id=task_id,\n\t            args=args,\n\t            kwargs=kwargs,\n\t        )\n\t        # Prepare args that will be sent to Celery with the CeleryResult pk\n\t        args = [celery_result.pk] + list(args)\n\t        try:\n\t            current_app.loader.import_default_modules()\n\t            func = current_app.tasks[celery_name]\n", "            func.apply_async(\n\t                args=args,\n\t                kwargs=kwargs,\n\t                task_id=str(celery_result.task_id),\n\t                **celery_kwargs,\n\t            )\n\t        except NotRegistered:\n\t            logger.error(\"Task %s not registered\", celery_name)\n\t            celery_result.result(f\"Task {celery_name} not registered\")\n\t            celery_result.status = CeleryResultStatusChoices.STATUS_FAILED\n", "            celery_result.save()\n\t        return celery_result\n\t    def log(self, level_choice, message, grouping=\"main\"):\n\t        \"\"\"Log message.\"\"\"\n\t        CeleryLogEntry.objects.create(\n\t            job_result=self,\n\t            log_level=level_choice,\n\t            grouping=grouping,\n\t            message=message,\n\t            created=timezone.now().isoformat(),\n", "        )\n\t    def log_debug(self, message, grouping=\"main\"):\n\t        \"\"\"Log info message.\"\"\"\n\t        self.log(LogLevelIntegerChoices.LOG_DEBUG, message, grouping)\n\t    def log_info(self, message, grouping=\"main\"):\n\t        \"\"\"Log info message.\"\"\"\n\t        self.log(LogLevelIntegerChoices.LOG_INFO, message, grouping)\n\t    def log_success(self, message, grouping=\"main\"):\n\t        \"\"\"Log success message.\"\"\"\n\t        self.log(LogLevelIntegerChoices.LOG_SUCCESS, message, grouping)\n", "    def log_warning(self, message, grouping=\"main\"):\n\t        \"\"\"Log warning message.\"\"\"\n\t        self.log(LogLevelIntegerChoices.LOG_WARNING, message, grouping)\n\t    def log_failure(self, message, grouping=\"main\"):\n\t        \"\"\"Log failure message.\"\"\"\n\t        self.log(LogLevelIntegerChoices.LOG_FAILURE, message, grouping)\n\tclass CeleryLogEntry(models.Model):\n\t    \"\"\"Stores each log entry for the CeleryResult.\"\"\"\n\t    job_result = models.ForeignKey(CeleryResult, on_delete=models.CASCADE, related_name=\"logs\")\n\t    log_level = models.CharField(\n", "        max_length=32,\n\t        choices=LogLevelIntegerChoices,\n\t        default=LogLevelIntegerChoices.LOG_DEFAULT,\n\t        db_index=True,\n\t    )\n\t    grouping = models.CharField(max_length=100, default=\"main\")\n\t    message = models.TextField(blank=True)\n\t    created = models.DateTimeField(default=timezone.now)\n\t    def __str__(self):\n\t        return str(self.message)\n", "    class Meta:\n\t        \"\"\"Meta Class.\"\"\"\n\t        ordering = [\"created\"]\n\t        get_latest_by = \"created\"\n\t        verbose_name_plural = \"Celery Log Entries\"\n"]}
{"filename": "netbox_celery/forms.py", "chunked_list": ["\"\"\"Forms for the netbox_celery plugin.\"\"\"\n\timport csv\n\tfrom celery import current_app\n\tfrom django import forms\n\tfrom django.core.exceptions import ValidationError\n\tfrom django.utils.translation import gettext as _\n\tfrom users.models import User\n\tfrom utilities.forms.widgets import APISelectMultiple, DateTimePicker\n\tfrom utilities.forms.fields import DynamicModelMultipleChoiceField, MultipleChoiceField\n\tfrom netbox.forms import NetBoxModelFilterSetForm\n", "from netbox_celery.choices import CeleryResultStatusChoices\n\tfrom netbox_celery.models import CeleryResult\n\tclass CeleryTaskForm(forms.Form):\n\t    \"\"\"Base form for Celery tasks.\"\"\"\n\t    class Meta:\n\t        \"\"\"Meta class for CeleryTaskForm.\"\"\"\n\t        fields = ()\n\t        task_name = None\n\t    def data_to_kwargs(self, data):\n\t        \"\"\"Convert the data to kwargs.\"\"\"\n", "        return data\n\t    def save(self, request):\n\t        \"\"\"Save the form.\"\"\"\n\t        return CeleryResult.enqueue_job(\n\t            self.Meta.task_name,\n\t            user=request.user,\n\t            kwargs=self.data_to_kwargs(self.cleaned_data),\n\t        )\n\tclass CeleryTaskBulkForm(forms.Form):\n\t    \"\"\"Base form for bulk Celery tasks.\"\"\"\n", "    csv_file = forms.FileField(\n\t        label=\"CSV File\",\n\t        help_text=\"CSV file containing the data for the task\",\n\t        required=False,\n\t    )\n\t    csv_data = forms.CharField(\n\t        label=\"CSV Data\",\n\t        widget=forms.Textarea(attrs={\"rows\": \"20\"}),\n\t        help_text=\"CSV data containing the data for the task\",\n\t        required=False,\n", "    )\n\t    class Meta:\n\t        \"\"\"Meta class for CeleryTaskBulkForm.\"\"\"\n\t        base_form = CeleryTaskForm\n\t        task_name = None\n\t        multi_celery_job = False\n\t    def clean(self):\n\t        if not (self.cleaned_data[\"csv_file\"] or self.cleaned_data[\"csv_data\"]):\n\t            raise ValidationError(\"Please provide a CSV file or CSV data.\")\n\t        return self.cleaned_data\n", "    def read_csv(self):\n\t        \"\"\"Read the CSV file or data.\"\"\"\n\t        if self.cleaned_data[\"csv_file\"]:\n\t            reader = csv.DictReader(self.cleaned_data[\"csv_file\"])\n\t        else:\n\t            reader = csv.DictReader(self.cleaned_data[\"csv_data\"].splitlines())\n\t        return list(reader)\n\t    def is_valid(self):\n\t        \"\"\"Check if the form is valid.\"\"\"\n\t        super().is_valid()\n", "        csv_data = self.read_csv()\n\t        for row in csv_data:\n\t            form = self.Meta.base_form(row)\n\t            if not form.is_valid():\n\t                return False\n\t        return True\n\t    def data_to_kwargs(self, data):\n\t        \"\"\"Convert the data to kwargs.\"\"\"\n\t        return data\n\t    def save(self, request):\n", "        \"\"\"Save the form.\"\"\"\n\t        if not getattr(self.Meta, \"task_name\", None):\n\t            raise ValidationError(\"Please provide a task name in Meta class.\")\n\t        csv_data = self.read_csv()\n\t        if getattr(self.Meta, \"multi_celery_job\", None):\n\t            jobs = []\n\t            for data in csv_data:\n\t                jobs.append(\n\t                    CeleryResult.enqueue_job(\n\t                        self.Meta.task_name,\n", "                        user=request.user,\n\t                        kwargs=self.data_to_kwargs(data),\n\t                    )\n\t                )\n\t            return jobs\n\t        return CeleryResult.enqueue_job(\n\t            self.Meta.task_name,\n\t            user=request.user,\n\t            kwargs=self.data_to_kwargs(csv_data),\n\t        )\n", "class CeleryResultFilterSetForm(NetBoxModelFilterSetForm):\n\t    \"\"\"Celery result filterset form.\"\"\"\n\t    model = CeleryResult\n\t    celery_name = forms.CharField()  # Added for ordering\n\t    created__gte = forms.DateTimeField(\n\t        label=_(\"Created (min)\"),\n\t        required=False,\n\t        widget=DateTimePicker(),\n\t    )\n\t    created__lte = forms.DateTimeField(\n", "        label=_(\"Created (max)\"),\n\t        required=False,\n\t        widget=DateTimePicker(),\n\t    )\n\t    completed__gte = forms.DateTimeField(\n\t        label=_(\"Completed (min)\"),\n\t        required=False,\n\t        widget=DateTimePicker(),\n\t    )\n\t    completed__lte = forms.DateTimeField(\n", "        label=_(\"Completed (max)\"),\n\t        required=False,\n\t        widget=DateTimePicker(),\n\t    )\n\t    user_id = DynamicModelMultipleChoiceField(\n\t        queryset=User.objects.all(),\n\t        required=False,\n\t        label=_(\"User\"),\n\t        widget=APISelectMultiple(\n\t            api_url=\"/api/users/users/\",\n", "        ),\n\t    )\n\t    status = MultipleChoiceField(choices=CeleryResultStatusChoices, required=False)\n\t    def __init__(self, *args, **kwargs):\n\t        \"\"\"Custom celery job name field.\"\"\"\n\t        super().__init__(*args, **kwargs)\n\t        current_app.loader.import_default_modules()\n\t        tasks = []\n\t        for task in current_app.tasks.keys():\n\t            if task.startswith(\"celery.\"):\n", "                continue\n\t            tasks.append((task, task))\n\t        self.fields[\"celery_name\"] = MultipleChoiceField(\n\t            choices=tasks,\n\t            required=False,\n\t            label=_(\"Celery Name\"),\n\t        )\n"]}
{"filename": "netbox_celery/urls.py", "chunked_list": ["\"\"\"Netbox Celery Urls.\"\"\"\n\tfrom django.urls import path\n\tfrom netbox_celery.views import (\n\t    CeleryResultDeleteView,\n\t    CeleryResultListView,\n\t    CeleryResultView,\n\t)\n\turlpatterns = [\n\t    path(\"celery_results/\", CeleryResultListView.as_view(), name=\"celeryresult_list\"),\n\t    path(\"celery_result/<int:pk>/\", CeleryResultView.as_view(), name=\"celeryresult_view\"),\n", "    path(\n\t        \"celery_result/<int:pk>/delete/\",\n\t        CeleryResultDeleteView.as_view(),\n\t        name=\"celeryresult_delete\",\n\t    ),\n\t]\n"]}
{"filename": "netbox_celery/views.py", "chunked_list": ["\"\"\"Views for the netbox_celery plugin.\"\"\"\n\timport logging\n\tfrom django.contrib import messages\n\tfrom django.shortcuts import redirect, render\n\tfrom extras.signals import clear_webhooks\n\tfrom netbox_celery.filtersets import CeleryResultFilterSet\n\tfrom netbox_celery.forms import CeleryResultFilterSetForm, CeleryTaskForm\n\tfrom netbox_celery.models import CeleryResult\n\tfrom netbox_celery.tables import CeleryResultTable\n\tfrom utilities.exceptions import AbortRequest, PermissionsViolation\n", "from utilities.forms import restrict_form_fields\n\tfrom netbox.views.generic import ObjectDeleteView, ObjectEditView, ObjectListView, ObjectView\n\tclass CeleryResultListView(ObjectListView):\n\t    \"\"\"Celery Result list view.\"\"\"\n\t    table = CeleryResultTable\n\t    queryset = CeleryResult.objects.all()\n\t    filterset = CeleryResultFilterSet\n\t    filterset_form = CeleryResultFilterSetForm\n\t    action_buttons = ()\n\tclass CeleryResultView(ObjectView):\n", "    \"\"\"Celery Result view.\"\"\"\n\t    model = CeleryResult\n\t    queryset = CeleryResult.objects.all()\n\t    def get_extra_context(self, request, instance):\n\t        \"\"\"Add extra context to the view.\"\"\"\n\t        context = {}\n\t        logs = {}\n\t        for log in instance.logs.all().exclude(grouping=\"main\"):\n\t            if log.grouping not in logs:\n\t                logs[log.grouping] = []\n", "            logs[log.grouping].append(log)\n\t        context[\"log_groups\"] = logs\n\t        context[\"log_main\"] = instance.logs.filter(grouping=\"main\")\n\t        return context\n\tclass CeleryResultDeleteView(ObjectDeleteView):\n\t    \"\"\"Celery Result delete view.\"\"\"\n\t    model = CeleryResult\n\t    queryset = CeleryResult.objects.all()\n\t    default_return_url = \"plugins:netbox_celery:celeryresult_list\"\n\t#\n", "# Overwritten views\n\t#\n\tclass CeleryTaskAddView(ObjectEditView):\n\t    \"\"\"Celery Form Task view.\"\"\"\n\t    queryset = CeleryResult.objects.all()\n\t    template_name = \"netbox_celery/celery_task_form.html\"\n\t    form = CeleryTaskForm\n\t    def get(self, request, *args, **kwargs):\n\t        \"\"\"\n\t        GET request handler.\n", "        Args:\n\t            request: The current request\n\t        \"\"\"\n\t        form = self.form()\n\t        restrict_form_fields(form, request.user)\n\t        return render(\n\t            request,\n\t            self.template_name,\n\t            {\n\t                \"form\": form,\n", "            },\n\t        )\n\t    def post(self, request, *args, **kwargs):\n\t        logger = logging.getLogger(\"netbox_celery.views.CeleryFormTaskView\")\n\t        form = self.form(data=request.POST, files=request.FILES)\n\t        restrict_form_fields(form, request.user)\n\t        obj = None\n\t        if form.is_valid():\n\t            try:\n\t                obj = form.save(request)\n", "                if obj.status == \"failed\":\n\t                    messages.error(\n\t                        request,\n\t                        f\"Task failed: {obj.logs.latest('created').message}\",\n\t                    )\n\t                else:\n\t                    messages.success(request, \"Job successfully queued.\")\n\t                return redirect(\"plugins:netbox_celery:celeryresult_view\", pk=obj.pk)\n\t            except (AbortRequest, PermissionsViolation) as error:\n\t                logger.debug(error.message)\n", "                form.add_error(None, error.message)\n\t                clear_webhooks.send(sender=self)\n\t        else:\n\t            logger.debug(\"Form validation failed\")\n\t        return render(\n\t            request,\n\t            self.template_name,\n\t            {\n\t                \"object\": obj,\n\t                \"form\": form,\n", "                \"return_url\": self.get_return_url(request, obj),\n\t                **self.get_extra_context(request, obj),\n\t            },\n\t        )\n"]}
{"filename": "netbox_celery/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Plugin.\"\"\"\n\tfrom extras.plugins import PluginConfig\n\tfrom .celery import app as celery_app  # noqa\n\t__version__ = \"0.1.0\"\n\tclass NetboxCeleryConfig(PluginConfig):\n\t    \"\"\"Plugin configuration for netbox_awx_runner.\"\"\"\n\t    name = \"netbox_celery\"\n\t    verbose_name = \"Netbox Celery\"\n\t    version = __version__\n\t    author = \"OpticoreIT\"\n", "    author_email = \"info@opticoreit.com\"\n\t    description = \"Celery job management for Netbox.\"\n\t    base_url = \"celery\"\n\t    django_apps = [\n\t        \"django_celery_beat\",\n\t    ]\n\tconfig = NetboxCeleryConfig  # pylint: disable=invalid-name\n"]}
{"filename": "netbox_celery/tables.py", "chunked_list": ["\"\"\"Netbox Celery Tables.\"\"\"\n\timport django_tables2 as tables\n\tfrom netbox_celery.models import CeleryResult\n\tfrom netbox.tables import NetBoxTable, columns\n\tclass CeleryResultTable(NetBoxTable):\n\t    \"\"\"Celery result table.\"\"\"\n\t    task_id = tables.Column(linkify=True, verbose_name=\"Task ID\")\n\t    actions = columns.ActionsColumn(\n\t        actions=(\"delete\",),\n\t    )\n", "    class Meta(NetBoxTable.Meta):\n\t        \"\"\"Meta.\"\"\"\n\t        name = \"celery_results\"\n\t        model = CeleryResult\n\t        fields = (\n\t            \"task_id\",\n\t            \"celery_name\",\n\t            \"created\",\n\t            \"completed\",\n\t            \"user\",\n", "            \"status\",\n\t        )\n\t        attrs = {\"class\": \"table table-hover table-headings\"}\n\t        datatable_ordering = [[3, \"desc\"]]\n"]}
{"filename": "netbox_celery/celery.py", "chunked_list": ["\"\"\"Celery configuration.\"\"\"\n\timport os\n\tfrom celery import Celery\n\tfrom django.conf import settings\n\tfrom netbox_celery.settings_funcs import parse_redis_connection\n\t# set the default Django settings module for the 'celery' program.\n\t# this is also used in manage.py\n\tos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"netbox.settings\")\n\t# Get the base REDIS URL, default to redis' default\n\tBASE_REDIS_URL = parse_redis_connection(redis_database=0)\n", "app = Celery(\n\t    \"netbox_celery\",\n\t    backend=parse_redis_connection(redis_database=0),\n\t)\n\t# Using a string here means the worker don't have to serialize\n\t# the configuration object to child processes.\n\t# - namespace='CELERY' means all celery-related configuration keys\n\t#   should have a `CELERY_` prefix.\n\tapp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\n\t# Load task modules from all registered Django app configs.\n", "app.autodiscover_tasks(lambda: settings.INSTALLED_APPS, force=False)\n\tapp.conf.broker_url = BASE_REDIS_URL\n\t# this allows you to schedule items in the Django admin.\n\tapp.conf.beat_scheduler = \"django_celery_beat.schedulers.DatabaseScheduler\"\n"]}
{"filename": "netbox_celery/settings_funcs.py", "chunked_list": ["\"\"\"Functions for Django settings.\"\"\"\n\timport os\n\tfrom distutils.util import strtobool  # pylint: disable=deprecated-module\n\tdef is_truthy(arg):\n\t    \"\"\"\n\t    Convert \"truthy\" strings into Booleans.\n\t    Examples:\n\t        >>> is_truthy('yes')\n\t        True\n\t    Args:\n", "        arg (str): Truthy string (True values are y, yes, t, true, on and 1; false values are n, no,\n\t        f, false, off and 0. Raises ValueError if val is anything else.\n\t    \"\"\"\n\t    if isinstance(arg, bool):\n\t        return arg\n\t    return bool(strtobool(str(arg)))\n\tdef parse_redis_connection(redis_database):\n\t    \"\"\"\n\t    Parse environment variables to emit a Redis connection URL.\n\t    Args:\n", "        redis_database (int): Redis database number to use for the connection\n\t    Returns:\n\t        Redis connection URL (str)\n\t    \"\"\"\n\t    # The following `_redis_*` variables are used to generate settings based on\n\t    # environment variables.\n\t    redis_scheme = (\n\t        \"rediss\" if is_truthy(os.getenv(\"REDIS_SSL\", False)) else \"redis\"  # pylint: disable=invalid-envvar-default\n\t    )\n\t    redis_host = os.getenv(\"REDIS_HOST\", \"localhost\")\n", "    redis_port = int(os.getenv(\"REDIS_PORT\", 6379))  # pylint: disable=invalid-envvar-default\n\t    redis_username = os.getenv(\"REDIS_USERNAME\", \"\")\n\t    redis_password = os.getenv(\"REDIS_PASSWORD\", \"\")\n\t    # Default Redis credentials to being empty unless a username or password is\n\t    # provided. Then map it to \"username:password@\". We're not URL-encoding the\n\t    # password because the Redis Python client already does this.\n\t    redis_creds = \"\"\n\t    if redis_username or redis_password:\n\t        redis_creds = f\"{redis_username}:{redis_password}@\"\n\t    return f\"{redis_scheme}://{redis_creds}{redis_host}:{redis_port}/{redis_database}\"\n"]}
{"filename": "netbox_celery/filtersets.py", "chunked_list": ["\"\"\"Celery result filtersets.\"\"\"\n\timport django_filters\n\tfrom django.utils.translation import gettext as _\n\tfrom netbox_celery.models import CeleryResult\n\tfrom users.models import User\n\tclass CeleryResultFilterSet(django_filters.FilterSet):\n\t    \"\"\"Filter for celery results.\"\"\"\n\t    user = django_filters.ModelMultipleChoiceFilter(\n\t        field_name=\"user__username\",\n\t        queryset=User.objects.all(),\n", "        label=_(\"User\"),\n\t    )\n\t    class Meta:\n\t        \"\"\"Meta.\"\"\"\n\t        model = CeleryResult\n\t        fields = [\n\t            \"task_id\",\n\t            \"celery_name\",\n\t            \"created\",\n\t            \"completed\",\n", "            \"status\",\n\t            \"user\",\n\t        ]\n"]}
{"filename": "netbox_celery/schedule.py", "chunked_list": ["\"\"\"Celery beat scheduler for NetBox.\"\"\"\n\timport sys\n\tfrom celery.beat import (\n\t    SchedulingError,\n\t    _evaluate_entry_args,\n\t    _evaluate_entry_kwargs,\n\t)\n\tfrom celery.exceptions import reraise\n\tfrom django_celery_beat.schedulers import DatabaseScheduler\n\tfrom netbox_celery.models import CeleryResult\n", "class NetboxCeleryDatabaseScheduler(DatabaseScheduler):\n\t    \"\"\"Custom Celery beat scheduler for NetBox.\"\"\"\n\t    def apply_async(self, entry, producer=None, advance=True, **kwargs):\n\t        \"\"\"Apply async.\"\"\"\n\t        # Update time-stamps and run counts before we actually execute,\n\t        # so we have that done if an exception is raised (doesn't schedule\n\t        # forever.)\n\t        entry = self.reserve(entry) if advance else entry\n\t        task = self.app.tasks.get(entry.task)\n\t        try:\n", "            entry_args = _evaluate_entry_args(entry.args)\n\t            entry_kwargs = _evaluate_entry_kwargs(entry.kwargs)\n\t            if task:\n\t                return CeleryResult.enqueue_job(\n\t                    entry.task,\n\t                    user=None,\n\t                    args=entry_args,\n\t                    kwargs=entry_kwargs,\n\t                )\n\t            return self.send_task(entry.task, entry_args, entry_kwargs, producer=producer, **entry.options)\n", "        except Exception as exc:  # pylint: disable=broad-except\n\t            return reraise(\n\t                SchedulingError,\n\t                SchedulingError(f\"Couldn't apply scheduled task {entry.name}: {exc}\"),\n\t                sys.exc_info()[2],\n\t            )\n\t        finally:\n\t            self._tasks_since_sync += 1\n\t            if self.should_sync():\n\t                self._do_sync()\n"]}
{"filename": "netbox_celery/navigation.py", "chunked_list": ["\"\"\"Navigation menu items for netbox_celery.\"\"\"\n\tfrom extras.plugins import PluginMenuItem\n\tmenu_items = (\n\t    PluginMenuItem(\n\t        link=\"plugins:netbox_celery:celeryresult_list\",\n\t        link_text=\"Celery Results\",\n\t        permissions=[\"netbox_celery.view_celeryresult\"],\n\t    ),\n\t)\n"]}
{"filename": "netbox_celery/tests/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Testing.\"\"\"\n"]}
{"filename": "netbox_celery/tests/test_views.py", "chunked_list": ["\"\"\"Test cases for the CeleryResult views.\"\"\"\n\timport uuid\n\tfrom netbox_celery.models import CeleryResult\n\tfrom utilities.testing import ViewTestCases, create_tags\n\tclass CeleryResultTestCase(\n\t    ViewTestCases.DeleteObjectViewTestCase,\n\t    ViewTestCases.GetObjectViewTestCase,\n\t    ViewTestCases.ListObjectsViewTestCase,\n\t):\n\t    \"\"\"Test cases for the CeleryResult views.\"\"\"\n", "    model = CeleryResult\n\t    def _get_base_url(self):\n\t        \"\"\"Return the base URL for the view.\"\"\"\n\t        return \"plugins:{}:{}_{{}}\".format(self.model._meta.app_label, self.model._meta.model_name)\n\t    @classmethod\n\t    def setUpTestData(cls):\n\t        \"\"\"Create test data.\"\"\"\n\t        CeleryResult.objects.bulk_create(\n\t            [\n\t                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n", "                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n\t                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n\t            ]\n\t        )\n\t        tags = create_tags(\"Alpha\", \"Bravo\", \"Charlie\")\n\t        cls.form_data = {\n\t            \"task_id\": uuid.uuid4(),\n\t            \"status\": \"SUCCESS\",\n\t            \"tags\": [t.pk for t in tags],\n\t        }\n", "        cls.csv_data = (\n\t            \"task_id,status\",\n\t            f\"{uuid.uuid4()},SUCCESS\",\n\t            f\"{uuid.uuid4()},SUCCESS\",\n\t            f\"{uuid.uuid4()},SUCCESS\",\n\t        )\n\t        cls.bulk_edit_data = {\n\t            \"status\": \"SUCCESS\",\n\t        }\n"]}
{"filename": "netbox_celery/tests/test_api.py", "chunked_list": ["\"\"\"Test the NetBox Celery API.\"\"\"\n\timport uuid\n\tfrom django.urls import reverse\n\tfrom utilities.testing import APITestCase, APIViewTestCases\n\tfrom netbox_celery.models import CeleryResult\n\tclass AppTest(APITestCase):\n\t    def test_root(self):\n\t        url = reverse(\"plugins-api:netbox_celery-api:api-root\")\n\t        response = self.client.get(\"{}?format=api\".format(url), **self.header)\n\t        self.assertEqual(response.status_code, 200)\n", "class CeleryResultTest(\n\t    APIViewTestCases.GetObjectViewTestCase,\n\t    APIViewTestCases.ListObjectsViewTestCase,\n\t):\n\t    \"\"\"Test the CeleryResult API views.\"\"\"\n\t    model = CeleryResult\n\t    brief_fields = sorted(\n\t        [\n\t            \"task_id\",\n\t            \"celery_name\",\n", "            \"created\",\n\t            \"completed\",\n\t            \"status\",\n\t            \"user\",\n\t            \"args\",\n\t            \"kwargs\",\n\t            \"job_kwargs\",\n\t            \"result\",\n\t        ]\n\t    )\n", "    bulk_update_data = {\n\t        \"status\": \"SUCCESS\",\n\t    }\n\t    def _get_detail_url(self, instance):\n\t        \"\"\"Return the URL for the detail view of the given instance.\"\"\"\n\t        viewname = f\"plugins-api:{self._get_view_namespace()}:{instance._meta.model_name}-detail\"\n\t        return reverse(viewname, kwargs={\"pk\": instance.pk})\n\t    def _get_list_url(self):\n\t        \"\"\"Return the URL for the list view.\"\"\"\n\t        viewname = f\"plugins-api:{self._get_view_namespace()}:{self.model._meta.model_name}-list\"\n", "        return reverse(viewname)\n\t    @classmethod\n\t    def setUpTestData(cls):\n\t        \"\"\"Create test data.\"\"\"\n\t        CeleryResult.objects.bulk_create(\n\t            [\n\t                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n\t                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n\t                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n\t            ]\n", "        )\n\t        cls.create_data = [\n\t            {\n\t                \"task_id\": uuid.uuid4(),\n\t                \"status\": \"SUCCESS\",\n\t            },\n\t            {\n\t                \"task_id\": uuid.uuid4(),\n\t                \"status\": \"SUCCESS\",\n\t            },\n", "            {\n\t                \"task_id\": uuid.uuid4(),\n\t                \"status\": \"SUCCESS\",\n\t            },\n\t        ]\n"]}
{"filename": "netbox_celery/api/urls.py", "chunked_list": ["\"\"\"URLs for the netbox_celery API.\"\"\"\n\tfrom netbox_celery.api.views import CeleryResultView\n\tfrom netbox.api.routers import NetBoxRouter\n\trouter = NetBoxRouter()\n\trouter.register(\"result\", CeleryResultView)\n\turlpatterns = router.urls\n\tapp_name = \"netbox_celery-api\"  # pylint: disable=invalid-name\n"]}
{"filename": "netbox_celery/api/views.py", "chunked_list": ["\"\"\"API views for the netbox_celery plugin.\"\"\"\n\tfrom netbox_celery.api.serializers import CeleryResultSerializer\n\tfrom netbox_celery.filtersets import CeleryResultFilterSet\n\tfrom netbox_celery.models import CeleryResult\n\tfrom netbox.api.viewsets import NetBoxModelViewSet\n\t#\n\t# Celery Results\n\t#\n\tclass CeleryResultView(NetBoxModelViewSet):\n\t    \"\"\"CeleryResult view.\"\"\"\n", "    queryset = CeleryResult.objects.all()\n\t    filterset_class = CeleryResultFilterSet\n\t    serializer_class = CeleryResultSerializer\n"]}
{"filename": "netbox_celery/api/__init__.py", "chunked_list": ["\"\"\"Netbox Celery API.\"\"\"\n"]}
{"filename": "netbox_celery/api/serializers.py", "chunked_list": ["\"\"\"Netbox Celery API serializers.\"\"\"\n\tfrom netbox_celery.models import CeleryResult\n\tfrom netbox.api.serializers import NetBoxModelSerializer\n\tclass CeleryResultSerializer(NetBoxModelSerializer):\n\t    \"\"\"CeleryResult serializer.\"\"\"\n\t    class Meta:\n\t        \"\"\"Meta Class.\"\"\"\n\t        model = CeleryResult\n\t        fields = [\n\t            \"task_id\",\n", "            \"celery_name\",\n\t            \"created\",\n\t            \"completed\",\n\t            \"status\",\n\t            \"user\",\n\t            \"args\",\n\t            \"kwargs\",\n\t            \"job_kwargs\",\n\t            \"result\",\n\t        ]\n"]}
{"filename": "netbox_celery/migrations/0001_initial.py", "chunked_list": ["# Generated by Django 4.1.5 on 2023-01-31 15:01\n\tfrom django.conf import settings\n\timport django.core.serializers.json\n\tfrom django.db import migrations, models\n\timport django.db.models.deletion\n\timport django.utils.timezone\n\timport taggit.managers\n\tclass Migration(migrations.Migration):\n\t    initial = True\n\t    dependencies = [\n", "        (\"extras\", \"0077_customlink_extend_text_and_url\"),\n\t        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n\t    ]\n\t    operations = [\n\t        migrations.CreateModel(\n\t            name=\"CeleryResult\",\n\t            fields=[\n\t                (\n\t                    \"id\",\n\t                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n", "                ),\n\t                (\"last_updated\", models.DateTimeField(auto_now=True, null=True)),\n\t                (\n\t                    \"custom_field_data\",\n\t                    models.JSONField(\n\t                        blank=True,\n\t                        default=dict,\n\t                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n\t                    ),\n\t                ),\n", "                (\"task_id\", models.UUIDField(unique=True)),\n\t                (\"celery_name\", models.CharField(max_length=255)),\n\t                (\"created\", models.DateTimeField(auto_now_add=True)),\n\t                (\"completed\", models.DateTimeField(blank=True, null=True)),\n\t                (\"status\", models.CharField(default=\"pending\", max_length=30)),\n\t                (\n\t                    \"data\",\n\t                    models.JSONField(\n\t                        blank=True,\n\t                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n", "                        null=True,\n\t                    ),\n\t                ),\n\t                (\n\t                    \"job_kwargs\",\n\t                    models.JSONField(\n\t                        blank=True,\n\t                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n\t                        null=True,\n\t                    ),\n", "                ),\n\t                (\n\t                    \"tags\",\n\t                    taggit.managers.TaggableManager(through=\"extras.TaggedItem\", to=\"extras.Tag\"),\n\t                ),\n\t                (\n\t                    \"user\",\n\t                    models.ForeignKey(\n\t                        blank=True,\n\t                        null=True,\n", "                        on_delete=django.db.models.deletion.SET_NULL,\n\t                        related_name=\"+\",\n\t                        to=settings.AUTH_USER_MODEL,\n\t                    ),\n\t                ),\n\t            ],\n\t            options={\n\t                \"verbose_name\": \"Celery Result\",\n\t                \"verbose_name_plural\": \"Celery Results\",\n\t                \"ordering\": [\"-created\"],\n", "            },\n\t        ),\n\t        migrations.CreateModel(\n\t            name=\"CeleryLogEntry\",\n\t            fields=[\n\t                (\n\t                    \"id\",\n\t                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n\t                ),\n\t                (\n", "                    \"log_level\",\n\t                    models.CharField(db_index=True, default=20, max_length=32),\n\t                ),\n\t                (\"grouping\", models.CharField(default=\"main\", max_length=100)),\n\t                (\"message\", models.TextField(blank=True)),\n\t                (\"created\", models.DateTimeField(default=django.utils.timezone.now)),\n\t                (\n\t                    \"job_result\",\n\t                    models.ForeignKey(\n\t                        on_delete=django.db.models.deletion.CASCADE,\n", "                        related_name=\"logs\",\n\t                        to=\"netbox_celery.celeryresult\",\n\t                    ),\n\t                ),\n\t            ],\n\t            options={\n\t                \"verbose_name_plural\": \"Celery Log Entries\",\n\t                \"ordering\": [\"created\"],\n\t                \"get_latest_by\": \"created\",\n\t            },\n", "        ),\n\t    ]\n"]}
{"filename": "netbox_celery/migrations/0002_rename_data_celeryresult_kwargs_celeryresult_args.py", "chunked_list": ["# Generated by Django 4.1.4 on 2023-01-12 11:20\n\timport django.core.serializers.json\n\tfrom django.db import migrations, models\n\tclass Migration(migrations.Migration):\n\t    dependencies = [\n\t        (\"netbox_celery\", \"0001_initial\"),\n\t    ]\n\t    operations = [\n\t        migrations.RenameField(\n\t            model_name=\"celeryresult\",\n", "            old_name=\"data\",\n\t            new_name=\"kwargs\",\n\t        ),\n\t        migrations.AddField(\n\t            model_name=\"celeryresult\",\n\t            name=\"args\",\n\t            field=models.JSONField(\n\t                blank=True,\n\t                encoder=django.core.serializers.json.DjangoJSONEncoder,\n\t                null=True,\n", "            ),\n\t        ),\n\t    ]\n"]}
{"filename": "netbox_celery/migrations/0004_alter_celeryresult_custom_field_data.py", "chunked_list": ["# Generated by Django 4.1.7 on 2023-03-23 10:55\n\tfrom django.db import migrations, models\n\timport utilities.json\n\tclass Migration(migrations.Migration):\n\t    dependencies = [\n\t        (\"netbox_celery\", \"0003_celeryresult_result\"),\n\t    ]\n\t    operations = [\n\t        migrations.AlterField(\n\t            model_name=\"celeryresult\",\n", "            name=\"custom_field_data\",\n\t            field=models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),\n\t        ),\n\t    ]\n"]}
{"filename": "netbox_celery/migrations/__init__.py", "chunked_list": []}
{"filename": "netbox_celery/migrations/0003_celeryresult_result.py", "chunked_list": ["# Generated by Django 4.1.4 on 2023-01-12 14:48\n\timport django.core.serializers.json\n\tfrom django.db import migrations, models\n\tclass Migration(migrations.Migration):\n\t    dependencies = [\n\t        (\"netbox_celery\", \"0002_rename_data_celeryresult_kwargs_celeryresult_args\"),\n\t    ]\n\t    operations = [\n\t        migrations.AddField(\n\t            model_name=\"celeryresult\",\n", "            name=\"result\",\n\t            field=models.JSONField(\n\t                blank=True,\n\t                encoder=django.core.serializers.json.DjangoJSONEncoder,\n\t                null=True,\n\t            ),\n\t        ),\n\t    ]\n"]}
{"filename": "docker/configuration/configuration.example.py", "chunked_list": ["import re\n\tfrom os import environ\n\tfrom os.path import abspath, dirname, join\n\t# For reference see https://netbox.readthedocs.io/en/stable/configuration/\n\t# Based on https://github.com/netbox-community/netbox/blob/master/netbox/netbox/configuration.example.py\n\t# Read secret from file\n\tdef _read_secret(secret_name, default=None):\n\t    try:\n\t        f = open(\"/run/secrets/\" + secret_name, \"r\", encoding=\"utf-8\")\n\t    except EnvironmentError:\n", "        return default\n\t    else:\n\t        with f:\n\t            return f.readline().strip()\n\t_BASE_DIR = dirname(dirname(abspath(__file__)))\n\t#########################\n\t#                       #\n\t#   Required settings   #\n\t#                       #\n\t#########################\n", "# This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write\n\t# access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.\n\t#\n\t# Example: ALLOWED_HOSTS = ['netbox.example.com', 'netbox.internal.local']\n\tALLOWED_HOSTS = environ.get(\"ALLOWED_HOSTS\", \"*\").split(\" \")\n\t# PostgreSQL database configuration. See the Django documentation for a complete list of available parameters:\n\t#   https://docs.djangoproject.com/en/stable/ref/settings/#databases\n\tDATABASE = {\n\t    \"NAME\": environ.get(\"DB_NAME\", \"netbox\"),  # Database name\n\t    \"USER\": environ.get(\"DB_USER\", \"\"),  # PostgreSQL username\n", "    \"PASSWORD\": _read_secret(\"db_password\", environ.get(\"DB_PASSWORD\", \"\")),\n\t    # PostgreSQL password\n\t    \"HOST\": environ.get(\"DB_HOST\", \"localhost\"),  # Database server\n\t    \"PORT\": environ.get(\"DB_PORT\", \"\"),  # Database port (leave blank for default)\n\t    \"OPTIONS\": {\"sslmode\": environ.get(\"DB_SSLMODE\", \"prefer\")},\n\t    # Database connection SSLMODE\n\t    \"CONN_MAX_AGE\": int(environ.get(\"DB_CONN_MAX_AGE\", \"300\")),\n\t    # Max database connection age\n\t    \"DISABLE_SERVER_SIDE_CURSORS\": environ.get(\"DB_DISABLE_SERVER_SIDE_CURSORS\", \"False\").lower() == \"true\",\n\t    # Disable the use of server-side cursors transaction pooling\n", "}\n\t# Redis database settings. Redis is used for caching and for queuing background tasks such as webhook events. A separate\n\t# configuration exists for each. Full connection details are required in both sections, and it is strongly recommended\n\t# to use two separate database IDs.\n\tREDIS = {\n\t    \"tasks\": {\n\t        \"HOST\": environ.get(\"REDIS_HOST\", \"localhost\"),\n\t        \"PORT\": int(environ.get(\"REDIS_PORT\", 6379)),\n\t        \"PASSWORD\": _read_secret(\"redis_password\", environ.get(\"REDIS_PASSWORD\", \"\")),\n\t        \"DATABASE\": int(environ.get(\"REDIS_DATABASE\", 0)),\n", "        \"SSL\": environ.get(\"REDIS_SSL\", \"False\").lower() == \"true\",\n\t        \"INSECURE_SKIP_TLS_VERIFY\": environ.get(\"REDIS_INSECURE_SKIP_TLS_VERIFY\", \"False\").lower() == \"true\",\n\t    },\n\t    \"caching\": {\n\t        \"HOST\": environ.get(\"REDIS_CACHE_HOST\", environ.get(\"REDIS_HOST\", \"localhost\")),\n\t        \"PORT\": int(environ.get(\"REDIS_CACHE_PORT\", environ.get(\"REDIS_PORT\", 6379))),\n\t        \"PASSWORD\": _read_secret(\n\t            \"redis_cache_password\",\n\t            environ.get(\"REDIS_CACHE_PASSWORD\", environ.get(\"REDIS_PASSWORD\", \"\")),\n\t        ),\n", "        \"DATABASE\": int(environ.get(\"REDIS_CACHE_DATABASE\", 1)),\n\t        \"SSL\": environ.get(\"REDIS_CACHE_SSL\", environ.get(\"REDIS_SSL\", \"False\")).lower() == \"true\",\n\t        \"INSECURE_SKIP_TLS_VERIFY\": environ.get(\n\t            \"REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY\",\n\t            environ.get(\"REDIS_INSECURE_SKIP_TLS_VERIFY\", \"False\"),\n\t        ).lower()\n\t        == \"true\",\n\t    },\n\t}\n\t# This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.\n", "# For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and\n\t# symbols. NetBox will not run without this defined. For more information, see\n\t# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEY\n\tSECRET_KEY = _read_secret(\"secret_key\", environ.get(\"SECRET_KEY\", \"\"))\n\t#########################\n\t#                       #\n\t#   Optional settings   #\n\t#                       #\n\t#########################\n\t# Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of\n", "# application errors (assuming correct email settings are provided).\n\tADMINS = [\n\t    # ['John Doe', 'jdoe@example.com'],\n\t]\n\t# URL schemes that are allowed within links in NetBox\n\tALLOWED_URL_SCHEMES = (\n\t    \"file\",\n\t    \"ftp\",\n\t    \"ftps\",\n\t    \"http\",\n", "    \"https\",\n\t    \"irc\",\n\t    \"mailto\",\n\t    \"sftp\",\n\t    \"ssh\",\n\t    \"tel\",\n\t    \"telnet\",\n\t    \"tftp\",\n\t    \"vnc\",\n\t    \"xmpp\",\n", ")\n\t# Optionally display a persistent banner at the top and/or bottom of every page. HTML is allowed. To display the same\n\t# content in both banners, define BANNER_TOP and set BANNER_BOTTOM = BANNER_TOP.\n\tBANNER_TOP = environ.get(\"BANNER_TOP\", \"\")\n\tBANNER_BOTTOM = environ.get(\"BANNER_BOTTOM\", \"\")\n\t# Text to include on the login page above the login form. HTML is allowed.\n\tBANNER_LOGIN = environ.get(\"BANNER_LOGIN\", \"\")\n\t# Base URL path if accessing NetBox within a directory. For example, if installed at http://example.com/netbox/, set:\n\t# BASE_PATH = 'netbox/'\n\tBASE_PATH = environ.get(\"BASE_PATH\", \"\")\n", "# Maximum number of days to retain logged changes. Set to 0 to retain changes indefinitely. (Default: 90)\n\tCHANGELOG_RETENTION = int(environ.get(\"CHANGELOG_RETENTION\", 90))\n\t# API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be\n\t# allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or\n\t# CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers\n\tCORS_ORIGIN_ALLOW_ALL = environ.get(\"CORS_ORIGIN_ALLOW_ALL\", \"False\").lower() == \"true\"\n\tCORS_ORIGIN_WHITELIST = list(filter(None, environ.get(\"CORS_ORIGIN_WHITELIST\", \"https://localhost\").split(\" \")))\n\tCORS_ORIGIN_REGEX_WHITELIST = [\n\t    re.compile(r) for r in list(filter(None, environ.get(\"CORS_ORIGIN_REGEX_WHITELIST\", \"\").split(\" \")))\n\t]\n", "# Cross-Site-Request-Forgery-Attack settings. If Netbox is sitting behind a reverse proxy, you might need to set the CSRF_TRUSTED_ORIGINS flag.\n\t# Django 4.0 requires to specify the URL Scheme in this setting. An example environment variable could be specified like:\n\t# CSRF_TRUSTED_ORIGINS=https://demo.netbox.dev http://demo.netbox.dev\n\tCSRF_TRUSTED_ORIGINS = list(filter(None, environ.get(\"CSRF_TRUSTED_ORIGINS\", \"\").split(\" \")))\n\t# Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal\n\t# sensitive information about your installation. Only enable debugging while performing testing. Never enable debugging\n\t# on a production system.\n\tDEBUG = environ.get(\"DEBUG\", \"False\").lower() == \"true\"\n\tDEVELOPER = True\n\t# Email settings\n", "EMAIL = {\n\t    \"SERVER\": environ.get(\"EMAIL_SERVER\", \"localhost\"),\n\t    \"PORT\": int(environ.get(\"EMAIL_PORT\", 25)),\n\t    \"USERNAME\": environ.get(\"EMAIL_USERNAME\", \"\"),\n\t    \"PASSWORD\": _read_secret(\"email_password\", environ.get(\"EMAIL_PASSWORD\", \"\")),\n\t    \"USE_SSL\": environ.get(\"EMAIL_USE_SSL\", \"False\").lower() == \"true\",\n\t    \"USE_TLS\": environ.get(\"EMAIL_USE_TLS\", \"False\").lower() == \"true\",\n\t    \"SSL_CERTFILE\": environ.get(\"EMAIL_SSL_CERTFILE\", \"\"),\n\t    \"SSL_KEYFILE\": environ.get(\"EMAIL_SSL_KEYFILE\", \"\"),\n\t    \"TIMEOUT\": int(environ.get(\"EMAIL_TIMEOUT\", 10)),  # seconds\n", "    \"FROM_EMAIL\": environ.get(\"EMAIL_FROM\", \"\"),\n\t}\n\t# Enforcement of unique IP space can be toggled on a per-VRF basis. To enforce unique IP space within the global table\n\t# (all prefixes and IP addresses not assigned to a VRF), set ENFORCE_GLOBAL_UNIQUE to True.\n\tENFORCE_GLOBAL_UNIQUE = environ.get(\"ENFORCE_GLOBAL_UNIQUE\", \"False\").lower() == \"true\"\n\t# Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and\n\t# by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.\n\tEXEMPT_VIEW_PERMISSIONS = list(filter(None, environ.get(\"EXEMPT_VIEW_PERMISSIONS\", \"\").split(\" \")))\n\t# Enable GraphQL API.\n\tGRAPHQL_ENABLED = environ.get(\"GRAPHQL_ENABLED\", \"True\").lower() == \"true\"\n", "# Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:\n\t#   https://docs.djangoproject.com/en/stable/topics/logging/\n\tLOGGING = {}\n\t# Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users\n\t# are permitted to access most data in NetBox (excluding secrets) but not make any changes.\n\tLOGIN_REQUIRED = environ.get(\"LOGIN_REQUIRED\", \"False\").lower() == \"true\"\n\t# The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to\n\t# re-authenticate. (Default: 1209600 [14 days])\n\tLOGIN_TIMEOUT = int(environ.get(\"LOGIN_TIMEOUT\", 1209600))\n\t# Setting this to True will display a \"maintenance mode\" banner at the top of every page.\n", "MAINTENANCE_MODE = environ.get(\"MAINTENANCE_MODE\", \"False\").lower() == \"true\"\n\t# Maps provider\n\tMAPS_URL = environ.get(\"MAPS_URL\", None)\n\t# An API consumer can request an arbitrary number of objects =by appending the \"limit\" parameter to the URL (e.g.\n\t# \"?limit=1000\"). This setting defines the maximum limit. Setting it to 0 or None will allow an API consumer to request\n\t# all objects by specifying \"?limit=0\".\n\tMAX_PAGE_SIZE = int(environ.get(\"MAX_PAGE_SIZE\", 1000))\n\t# The file path where uploaded media such as image attachments are stored. A trailing slash is not needed. Note that\n\t# the default value of this setting is derived from the installed location.\n\tMEDIA_ROOT = environ.get(\"MEDIA_ROOT\", join(_BASE_DIR, \"media\"))\n", "# Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'\n\tMETRICS_ENABLED = environ.get(\"METRICS_ENABLED\", \"False\").lower() == \"true\"\n\t# Credentials that NetBox will uses to authenticate to devices when connecting via NAPALM.\n\tNAPALM_USERNAME = environ.get(\"NAPALM_USERNAME\", \"\")\n\tNAPALM_PASSWORD = _read_secret(\"napalm_password\", environ.get(\"NAPALM_PASSWORD\", \"\"))\n\t# NAPALM timeout (in seconds). (Default: 30)\n\tNAPALM_TIMEOUT = int(environ.get(\"NAPALM_TIMEOUT\", 30))\n\t# NAPALM optional arguments (see http://napalm.readthedocs.io/en/latest/support/#optional-arguments). Arguments must\n\t# be provided as a dictionary.\n\tNAPALM_ARGS = {}\n", "# Determine how many objects to display per page within a list. (Default: 50)\n\tPAGINATE_COUNT = int(environ.get(\"PAGINATE_COUNT\", 50))\n\t# Enable installed plugins. Add the name of each plugin to the list.\n\t# configuration.py\n\tPLUGINS = [\n\t    \"netbox_celery\",\n\t    \"example_plugin\",\n\t]\n\t# Plugins configuration settings. These settings are used by various plugins that the user may have installed.\n\t# Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.\n", "PLUGINS_CONFIG = {\n\t    \"netbox_config_backup\": {\n\t        \"smtp_server\": \"\",\n\t        \"smtp_port\": 587,\n\t        \"smtp_username\": \"\",\n\t        \"smtp_password\": \"\",\n\t    },\n\t}\n\t# When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to\n\t# prefer IPv4 instead.\n", "PREFER_IPV4 = environ.get(\"PREFER_IPV4\", \"False\").lower() == \"true\"\n\t# Rack elevation size defaults, in pixels. For best results, the ratio of width to height should be roughly 10:1.\n\tRACK_ELEVATION_DEFAULT_UNIT_HEIGHT = int(environ.get(\"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\", 22))\n\tRACK_ELEVATION_DEFAULT_UNIT_WIDTH = int(environ.get(\"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\", 220))\n\t# Remote authentication support\n\tREMOTE_AUTH_ENABLED = environ.get(\"REMOTE_AUTH_ENABLED\", \"False\").lower() == \"true\"\n\tREMOTE_AUTH_BACKEND = environ.get(\"REMOTE_AUTH_BACKEND\", \"netbox.authentication.RemoteUserBackend\")\n\tREMOTE_AUTH_HEADER = environ.get(\"REMOTE_AUTH_HEADER\", \"HTTP_REMOTE_USER\")\n\tREMOTE_AUTH_AUTO_CREATE_USER = environ.get(\"REMOTE_AUTH_AUTO_CREATE_USER\", \"True\").lower() == \"true\"\n\tREMOTE_AUTH_DEFAULT_GROUPS = list(filter(None, environ.get(\"REMOTE_AUTH_DEFAULT_GROUPS\", \"\").split(\" \")))\n", "# This repository is used to check whether there is a new release of NetBox available. Set to None to disable the\n\t# version check or use the URL below to check for release in the official NetBox repository.\n\t# https://api.github.com/repos/netbox-community/netbox/releases\n\tRELEASE_CHECK_URL = environ.get(\"RELEASE_CHECK_URL\", None)\n\t# The file path where custom reports will be stored. A trailing slash is not needed. Note that the default value of\n\t# this setting is derived from the installed location.\n\tREPORTS_ROOT = environ.get(\"REPORTS_ROOT\", \"/etc/netbox/reports\")\n\t# Maximum execution time for background tasks, in seconds.\n\tRQ_DEFAULT_TIMEOUT = int(environ.get(\"RQ_DEFAULT_TIMEOUT\", 300))\n\t# The file path where custom scripts will be stored. A trailing slash is not needed. Note that the default value of\n", "# this setting is derived from the installed location.\n\tSCRIPTS_ROOT = environ.get(\"SCRIPTS_ROOT\", \"/etc/netbox/scripts\")\n\t# By default, NetBox will store session data in the database. Alternatively, a file path can be specified here to use\n\t# local file storage instead. (This can be useful for enabling authentication on a standby instance with read-only\n\t# database access.) Note that the user as which NetBox runs must have read and write permissions to this path.\n\tSESSION_FILE_PATH = environ.get(\"SESSIONS_ROOT\", None)\n\t# Time zone (default: UTC)\n\tTIME_ZONE = environ.get(\"TIME_ZONE\", \"UTC\")\n\t# Date/time formatting. See the following link for supported formats:\n\t# https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date\n", "DATE_FORMAT = environ.get(\"DATE_FORMAT\", \"N j, Y\")\n\tSHORT_DATE_FORMAT = environ.get(\"SHORT_DATE_FORMAT\", \"Y-m-d\")\n\tTIME_FORMAT = environ.get(\"TIME_FORMAT\", \"g:i a\")\n\tSHORT_TIME_FORMAT = environ.get(\"SHORT_TIME_FORMAT\", \"H:i:s\")\n\tDATETIME_FORMAT = environ.get(\"DATETIME_FORMAT\", \"N j, Y g:i a\")\n\tSHORT_DATETIME_FORMAT = environ.get(\"SHORT_DATETIME_FORMAT\", \"Y-m-d H:i\")\n"]}
{"filename": "docs/example-plugin/example_plugin/tasks.py", "chunked_list": ["\"\"\"Example Tasks File.\"\"\"\n\tfrom netbox_celery.tasks import netbox_celery_task\n\t@netbox_celery_task(name=\"example_plugin:hello_world\")\n\tdef hello_world(self, task_id, name=\"World\"):  # pylint: disable=unused-argument\n\t    \"\"\"Example hello world task.\"\"\"\n\t    self.log(f\"Hello {name}!\")\n"]}
{"filename": "docs/example-plugin/example_plugin/forms.py", "chunked_list": ["\"\"\"Netbox Celery Forms.\"\"\"\n\tfrom django import forms\n\tfrom utilities.forms import BootstrapMixin\n\tfrom netbox_celery.forms import CeleryTaskForm\n\tclass ExampleTaskForm(BootstrapMixin, CeleryTaskForm):\n\t    \"\"\"Form for the ExampleTask.\"\"\"\n\t    name = forms.CharField(\n\t        label=\"Name\",\n\t        required=True,\n\t    )\n", "    class Meta:\n\t        \"\"\"Meta class for ExampleTaskForm.\"\"\"\n\t        fields = (\"name\",)\n\t        task_name = \"example_plugin:hello_world\"\n"]}
{"filename": "docs/example-plugin/example_plugin/urls.py", "chunked_list": ["\"\"\"URLs for the example_plugin plugin.\"\"\"\n\tfrom django.urls import path\n\tfrom example_plugin.views import ExampleAddView\n\turlpatterns = [\n\t    path(\"add/\", ExampleAddView.as_view(), name=\"example_add\"),\n\t]\n"]}
{"filename": "docs/example-plugin/example_plugin/views.py", "chunked_list": ["\"\"\"Views for the example plugin.\"\"\"\n\tfrom netbox_celery.views import CeleryTaskAddView\n\tfrom example_plugin.forms import ExampleTaskForm\n\tclass ExampleAddView(CeleryTaskAddView):\n\t    \"\"\"OnboardDevice add view.\"\"\"\n\t    form = ExampleTaskForm\n"]}
{"filename": "docs/example-plugin/example_plugin/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Plugin.\"\"\"\n\tfrom extras.plugins import PluginConfig\n\t__version__ = \"0.0.1\"\n\tclass ExamplePlugin(PluginConfig):\n\t    \"\"\"Example Plugin.\"\"\"\n\t    name = \"example_plugin\"\n\t    verbose_name = \"Example Plugin\"\n\t    version = __version__\n\t    author = \"OpticoreIT\"\n\t    author_email = \"info@opticoreit.com\"\n", "    description = \"Celery job management for Netbox.\"\n\t    base_url = \"celery\"\n\tconfig = ExamplePlugin  # pylint: disable=invalid-name\n"]}
{"filename": "docs/example-plugin/example_plugin/navigation.py", "chunked_list": ["\"\"\"Navigation menu items for netbox_device_onboarder.\"\"\"\n\tfrom extras.plugins import PluginMenuItem\n\tmenu_items = (\n\t    PluginMenuItem(\n\t        link=\"plugins:example_plugin:example_add\",\n\t        link_text=\"Example Task\",\n\t    ),\n\t)\n"]}
