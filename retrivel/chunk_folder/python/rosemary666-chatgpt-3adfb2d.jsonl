{"filename": "doc/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/setup.py", "chunked_list": ["from __future__ import absolute_import\n\tfrom __future__ import print_function\n\tfrom __future__ import division\n\timport setuptools\n\tfrom setuptools import find_packages\n\timport os\n\tdef _process_requirements():\n\t    packages = open('requirements.txt').read().strip().split('\\n')\n\t    requires = []\n\t    for pkg in packages:\n", "        if pkg.startswith('git+ssh'):\n\t            return_code = os.system('pip install {}'.format(pkg))\n\t            assert return_code == 0, 'error, status_code is: {}, exit!'.format(return_code)\n\t        else:\n\t            requires.append(pkg)\n\t    return requires\n\twith open(\"../README.md\", \"r\") as fh:\n\t    long_description = fh.read()\n\tsetuptools.setup(\n\t    name=\"py-chatgpt-plus\",\n", "    version=\"0.2.0\",\n\t    author=\"rosemary666\",\n\t    author_email=\"\",\n\t    description=\"Python chatgpt api\",\n\t    long_description=long_description,\n\t    long_description_content_type=\"text/markdown\",\n\t    url=\"https://github.com/rosemary666/chatgpt\",\n\t    packages=[\n\t        package for package in find_packages()\n\t        if package.startswith('py_chatgpt_plus')\n", "    ],\n\t    install_requires=_process_requirements(),\n\t    setup_requires=[],\n\t    license=\"Apache License 2.0\",\n\t    classifiers=[\n\t        'Development Status :: 3 - Alpha',\n\t        \"License :: OSI Approved :: Apache Software License\",\n\t        \"Operating System :: OS Independent\",\n\t        \"Operating System :: MacOS :: MacOS X\",\n\t        \"Operating System :: POSIX :: Linux\",\n", "        \"Programming Language :: Python\",\n\t        \"Programming Language :: Python :: 3\",\n\t        \"Programming Language :: Python :: 3 :: Only\",\n\t        \"Programming Language :: Python :: 3.7\",\n\t        \"Programming Language :: Python :: 3.8\",\n\t        \"Programming Language :: Python :: 3.9\",\n\t        \"Programming Language :: Python :: 3.10\",\n\t        \"Programming Language :: Python :: 3.11\",\n\t        \"Programming Language :: Python :: Implementation :: CPython\",\n\t    ],\n", "    python_requires='>=3.7',\n\t)\n"]}
{"filename": "python/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/main.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom py_chatgpt_plus.routes import main\n\tif __name__ == '__main__':\n\t    main()\n"]}
{"filename": "python/py_chatgpt_plus/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/utils/base_utils.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tdef Singleton(cls):\n\t    _instance = {}\n\t    def _singleton(*args, **kargs):\n\t        if cls not in _instance:\n\t            _instance[cls] = cls(*args, **kargs)\n\t        return _instance[cls]\n", "    return _singleton"]}
{"filename": "python/py_chatgpt_plus/utils/conf.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom typing import Any\n\timport os\n\timport yaml\n\tfrom py_chatgpt_plus.utils.base_utils import Singleton\n\tdef read_yaml(path: str) -> Any:\n\t    with open(path, \"rb\") as f:\n", "        cf = f.read()\n\t    cf = yaml.load(cf, Loader=yaml.SafeLoader)\n\t    return cf\n\t@Singleton\n\tclass ConfParse(object):\n\t    def __init__(self):\n\t        self._local_ip: str = \"0.0.0.1\"\n\t        self._local_port: int = 32675\n\t        self._chatgpt_api_key: str = None\n\t        self._chatgpt_proxy: str = None\n", "        self._log_file: str = None\n\t    def __call__(self, path: str):\n\t        cf = read_yaml(path)\n\t        server_conf = cf.get(\"server\")\n\t        chatgpt_conf = cf.get(\"chatgpt\")\n\t        log_conf = cf.get(\"log\")\n\t        self._local_ip = server_conf.get(\"ip\", \"0.0.0.0\")\n\t        self._local_port = server_conf.get(\"port\", 32675)\n\t        self._chatgpt_api_key = chatgpt_conf.get(\"api_key\", \"\")\n\t        self._chatgpt_proxy = chatgpt_conf.get(\"proxy\", \"\")\n", "        self._log_file = log_conf.get(\"log_file\", \"service.log\")\n\t        self._log_level = log_conf.get(\"level\", \"DEBUG\")\n\t    @property\n\t    def local_ip(self) -> str:\n\t        return self._local_ip\n\t    @property\n\t    def local_port(self) -> int:\n\t        return self._local_port\n\t    @property\n\t    def chatgpt_api_key(self) -> str:\n", "        return self._chatgpt_api_key\n\t    @property\n\t    def chatgpt_proxy(self) -> str:\n\t        return self._chatgpt_proxy\n\t    @property\n\t    def log_file(self) -> str:\n\t        return self._log_file\n\t    @property\n\t    def log_level(self) -> str:\n\t        return self._log_level\n", "conf_inst = ConfParse()\n\tconf_inst(\n\t    path=os.getenv(\"SERVICE_C0NF\", default=\"../conf/service.yaml\")\n\t)"]}
{"filename": "python/py_chatgpt_plus/utils/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/utils/http_call.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\timport requests\n\tfrom typing import Any, Optional, Generator\n\tclass HttpCall(object):\n\t    def __init__(self, proxy_addr: str):\n\t        self._session = requests.Session()\n\t        if proxy_addr is not None or not proxy_addr:\n", "            self._session.proxies.update({\n\t                \"http\": proxy_addr,\n\t                \"https\": proxy_addr,\n\t            })\n\t    def post_once(self, url: str,\n\t                  header: dict = {\"Content-Type\": \"application/json\"},\n\t                  json: Optional[Any] = None,\n\t                  data=None,\n\t                  files=None):\n\t        \"\"\"\n", "        Non-streaming post interface.\n\t        \"\"\"\n\t        if json is not None:\n\t            header[\"Content-Type\"] = \"application/json\"\n\t        rsp = self._session.post(\n\t            url=url,\n\t            headers=header,\n\t            data=data,\n\t            json=json,\n\t            files=files,\n", "            stream=False,\n\t        )\n\t        rsp.raise_for_status()\n\t        return rsp.json()\n\t    def post_stream(self, url: str,\n\t                    header: dict = {\"Content-Type\": \"application/json\"},\n\t                    json: Optional[Any] = None,\n\t                    data=None,\n\t                    files=None) -> Generator:\n\t        \"\"\"\n", "        Streaming post interface\n\t        \"\"\"\n\t        if json is not None:\n\t            header[\"Content-Type\"] = \"application/json\"\n\t        rsp = self._session.post(\n\t            url=url,\n\t            headers=header,\n\t            data=data,\n\t            files=files,\n\t            json=json,\n", "            stream=True,\n\t        )\n\t        rsp.raise_for_status()\n\t        for line in rsp.iter_lines():\n\t            if not line:\n\t                continue\n\t            yield line\n"]}
{"filename": "python/py_chatgpt_plus/core/chat_base.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom abc import ABC, abstractmethod\n\tfrom typing import Generator\n\tclass ChatAbc(ABC):\n\t    \"\"\"\n\t    The chat abstract class encapsulated by calling the chatGpt interface.\n\t    \"\"\"\n", "    @abstractmethod\n\t    def chat_once(self, prompt: str) -> str:\n\t        \"\"\"\n\t        Return results all at once, non-streaming return.\n\t        Args:\n\t            prompt(str): Typed prompt.\n\t        Returns:\n\t            str: The reply.\n\t        \"\"\"\n\t        pass\n", "    @abstractmethod\n\t    def chat_stream(self, prompt: str) -> Generator:\n\t        \"\"\"\n\t        Return result by stream.\n\t        Args:\n\t            prompt(str): Typed prompt.\n\t        Returns:\n\t            The reply stream.\n\t        \"\"\"\n\t        pass\n", "    @abstractmethod\n\t    def save_conversations(self, file_path: str):\n\t        \"\"\"\n\t        Save the conversations to a specified file.\n\t        Args:\n\t            file_path(str): The path of file.\n\t        Returns:\n\t        \"\"\"\n\t        pass\n\t    @abstractmethod\n", "    def load_conversations(self, file_path: str):\n\t        \"\"\"\n\t        Load the conversations from a specified file.\n\t        Returns:\n\t        \"\"\"\n\t        pass\n"]}
{"filename": "python/py_chatgpt_plus/core/image_gpt.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom typing import List\n\timport base64\n\tfrom py_chatgpt_plus.utils.http_call import HttpCall\n\tclass ImageGpt(object):\n\t    _image_gpt_url = \"https://api.openai.com/v1/images/generations\"\n\t    _image_variations_url = \"https://api.openai.com/v1/images/variations\"\n", "    def __init__(self,\n\t                 api_key: str,\n\t                 proxy_address: str = None,\n\t                 ):\n\t        \"\"\"\n\t        Creates an image given a prompt\n\t        Args:\n\t            api_key(str): The chatGpt api key, please refer https://platform.openai.com/account/api-keys.\n\t            proxy_address(str): The address of proxy.\n\t        \"\"\"\n", "        self._api_key = api_key\n\t        self._proxy_address = proxy_address\n\t        self._http_call = HttpCall(proxy_addr=proxy_address)\n\t    def generate_url(self, prompt: str,\n\t                     n: int = 1,\n\t                     size: str = \"1024x1024\") -> List[str]:\n\t        \"\"\"\n\t        Generate Image url.\n\t        Args:\n\t            prompt(str): Type prompt.\n", "            n(int): The number of images to generate. Must be between 1 and 10.\n\t            size(str): The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.\n\t        Returns:\n\t            List[str]: The list of generate image url.\n\t        \"\"\"\n\t        content = self._http_call.post_once(\n\t            url=self._image_gpt_url,\n\t            header={\n\t                \"Authorization\": f\"Bearer {self._api_key}\"\n\t            },\n", "            json={\n\t                \"prompt\": prompt,\n\t                \"n\": n,\n\t                \"size\": size,\n\t                \"response_format\": \"url\",\n\t            }\n\t        )\n\t        urls = []\n\t        for d in content[\"data\"]:\n\t            urls.append(d[\"url\"])\n", "        return urls\n\t    def generate_content(self, prompt: str,\n\t                         n: int = 1,\n\t                         size: str = \"1024x1024\") -> List[bytes]:\n\t        \"\"\"\n\t        Generate Image content, can be save to a file.\n\t        Args:\n\t            prompt(str): Type prompt.\n\t            n(int): The number of images to generate. Must be between 1 and 10.\n\t            size(str): The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.\n", "        Returns:\n\t            List[str]: The list of generate image content.\n\t        \"\"\"\n\t        content = self._http_call.post_once(\n\t            url=self._image_gpt_url,\n\t            header={\n\t                \"Authorization\": f\"Bearer {self._api_key}\"\n\t            },\n\t            json={\n\t                \"prompt\": prompt,\n", "                \"n\": n,\n\t                \"size\": size,\n\t                \"response_format\": \"b64_json\",\n\t            }\n\t        )\n\t        b64_list = []\n\t        for d in content[\"data\"]:\n\t            b64_list.append(base64.b64decode(d[\"b64_json\"]))\n\t        return b64_list\n\t    def generate_variations_url(self,\n", "                                image_path: str,\n\t                                ) -> List[bytes]:\n\t        \"\"\"\n\t        Generate a variation image url of a given image.\n\t        Args:\n\t            image_path(str): The image to use as the basis for the variation(s).\n\t             Must be a valid PNG file, less than 4MB, and square.\n\t        Returns:\n\t            List[str]: The list of generate image content.\n\t        \"\"\"\n", "        content = self._http_call.post_once(\n\t            url=self._image_variations_url,\n\t            header={\n\t                \"Authorization\": f\"Bearer {self._api_key}\"\n\t            },\n\t            files={\n\t                    \"image\": (\"gpt_image.png\", open(image_path, 'rb'), \"image/png\"),\n\t                  }\n\t        )\n\t        urls = []\n", "        for d in content[\"data\"]:\n\t            urls.append(base64.b64decode(d[\"url\"]))\n\t        return urls"]}
{"filename": "python/py_chatgpt_plus/core/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/core/chat_gpt_3.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\timport json\n\tfrom typing import List, Generator\n\tfrom py_chatgpt_plus.core.chat_base import ChatAbc\n\tfrom py_chatgpt_plus.utils.http_call import HttpCall\n\tclass ChatGptV3(ChatAbc):\n\t    def __init__(self,\n", "                 api_key: str,\n\t                 model: str = \"gpt-3.5-turbo\",\n\t                 chatgpt_url: str = \"https://api.openai.com/v1/chat/completions\",\n\t                 system_prompt: str = \"You are ChatGPT, a large language model trained by OpenAI. Respond conversationally\",\n\t                 proxy_address: str = None,\n\t                 temperature: float = 0.6,\n\t                 top_p: float = 1.0,\n\t                 max_tokens: int = 2048,\n\t                 ):\n\t        \"\"\"\n", "        Call Official chatGpt interface.\n\t        Args:\n\t            api_key(str): The chatGpt api key, please refer https://platform.openai.com/account/api-keys.\n\t            model(str): The model of chatGpt v3, default to 'gpt-3.5-turbo'.\n\t            proxy_address(str): The address of proxy.\n\t            system_prompt(str): You are a\n\t            temperature(float): What sampling temperature to use, between 0 and 2.\\\n\t                  Higher values like 0.8 will make the output more random, while lower values like 0.2 will \\\n\t                  make it more focused and deterministic.\n\t            top_p(float): An alternative to sampling with temperature, called nucleus sampling, where the model\n", "                 considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens \\\n\t                 comprising the top 10% probability mass are considered.\n\t            max_tokens(int): The maximum number of tokens to generate in the completion.The token count of your \\\n\t                 prompt plus max_tokens cannot exceed the model's context length. Most models have a context length \\\n\t                 of 2048 tokens (except for the newest models, which support 4096).\n\t        \"\"\"\n\t        self._api_key = api_key\n\t        self._model = model\n\t        self._proxy_address = proxy_address\n\t        self._temperature = temperature\n", "        self._top_p = top_p\n\t        self._max_tokens = max_tokens\n\t        self._http_call = HttpCall(proxy_addr=proxy_address)\n\t        self._system_prompt = system_prompt\n\t        self._conversations: List[dict] = [\n\t            {\n\t                \"role\": \"system\",\n\t                \"content\": self._system_prompt,\n\t            }\n\t        ]\n", "        self._chatgpt_url = chatgpt_url\n\t    def _add_to_conversations(self, content: str, role: str = \"user\"):\n\t        self._conversations.append(\n\t            {\n\t                \"role\": role,\n\t                \"content\": content,\n\t            }\n\t        )\n\t    def chat_once(self, prompt: str) -> str:\n\t        all_rsp: str = \"\"\n", "        for stream in self.chat_stream(prompt):\n\t            all_rsp += stream\n\t        return all_rsp\n\t    def chat_stream(self, prompt: str) -> Generator:\n\t        self._add_to_conversations(prompt, \"user\")\n\t        streams = self._http_call.post_stream(\n\t            url=self._chatgpt_url,\n\t            header={\n\t                \"Authorization\": f\"Bearer {self._api_key}\"\n\t            },\n", "            json={\n\t                \"model\": self._model,\n\t                \"messages\": self._conversations,\n\t                \"stream\": True,\n\t                \"temperature\": self._temperature,\n\t                \"top_p\": self._top_p,\n\t                \"user\": \"user\",\n\t                \"max_tokens\": self._max_tokens,\n\t            }\n\t        )\n", "        all_stream_content = \"\"\n\t        rsp_role: str = None\n\t        for stream in streams:\n\t            stream = stream.decode(\"utf-8\")[6:]\n\t            if stream == \"[DONE]\":\n\t                break\n\t            rsp: dict = json.loads(stream)\n\t            choices = rsp.get(\"choices\")\n\t            if not choices:\n\t                continue\n", "            delta = choices[0].get(\"delta\")\n\t            if not delta:\n\t                continue\n\t            if \"role\" in delta:\n\t                rsp_role = delta[\"role\"]\n\t            if \"content\" in delta:\n\t                content = delta[\"content\"]\n\t                all_stream_content += content\n\t                yield content\n\t        self._add_to_conversations(all_stream_content, rsp_role)\n", "    def save_conversations(self, file_path: str):\n\t        conversations_json = json.dumps(self._conversations, indent=4, ensure_ascii=False)\n\t        with open(file_path, \"w\") as f:\n\t            f.write(conversations_json)\n\t    def load_conversations(self, file_path: str):\n\t        with open(file_path, \"r\") as f:\n\t            content = f.read()\n\t        self._conversations = json.loads(content)"]}
{"filename": "python/py_chatgpt_plus/core/tests/image_gpt.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom py_chatgpt_plus.core.image_gpt import ImageGpt\n\tapi_key = \"****\"\n\tdef test_image_generate_url():\n\t    ig = ImageGpt(\n\t        api_key=api_key\n\t    )\n", "    urls = ig.generate_url('Draw a white cat. it is a real cat, not a cartoon cat')\n\t    print(urls)\n\tdef test_image_generate_content():\n\t    ig = ImageGpt(\n\t        api_key=api_key\n\t    )\n\t    contents = ig.generate_content('Draw a white cat. it is a real cat, not a cartoon cat')\n\t    for i, content in enumerate(contents):\n\t        with open(f\"image_{i}.png\", \"wb\") as f:\n\t            f.write(content)\n", "def test_image_generate_variations_url(image_path: str):\n\t    ig = ImageGpt(\n\t        api_key=api_key\n\t    )\n\t    urls = ig.generate_variations_url(image_path)\n\t    print(urls)\n\tif __name__ == \"__main__\":\n\t    # test_image_generate_url()\n\t    # test_image_generate_content()\n\t    test_image_generate_variations_url(\"image_0.png\")\n"]}
{"filename": "python/py_chatgpt_plus/core/tests/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/core/tests/chat_gpt_v3.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\tapi_key = \"*******\"\n\tdef test_stream():\n\t    cg = ChatGptV3(\n\t        api_key=api_key\n\t    )\n", "    streams = cg.chat_stream(\"请详细介绍一下你自己\")\n\t    for stream in streams:\n\t        print(stream)\n\tdef test_once():\n\t    cg = ChatGptV3(\n\t        api_key=api_key,\n\t        system_prompt=\"请帮我把以下的工作内容填充为工作周报，用markdown格式以分点叙述的方式输出:\",\n\t    )\n\t    answer = cg.chat_once(\"主要开展了三件事情, 第一是完成功能1的开发，第二是完成了xx的需求评审，第三是接待了xx客户\")\n\t    print(answer)\n", "    cg.save_conversations(\"./conversations.json\")\n\tif __name__ == \"__main__\":\n\t    # test_stream()\n\t    test_once()"]}
{"filename": "python/py_chatgpt_plus/services/chat_ws.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\timport asyncio\n\timport websockets\n\tfrom loguru import logger\n\tfrom py_chatgpt_plus.utils.conf import conf_inst\n\tfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\tcg = ChatGptV3(\n", "    api_key=conf_inst.chatgpt_api_key,\n\t    proxy_address=conf_inst.chatgpt_proxy)\n\tasync def chat_stream(websocket):\n\t    async for message in websocket:\n\t        logger.debug(f\"chat_stream | receive prompt:{message}\")\n\t        streams = cg.chat_stream(prompt=message)\n\t        all_stream_content = \"\"\n\t        for stream in streams:\n\t            all_stream_content += stream\n\t            await websocket.send(stream)\n", "        logger.debug(f\"chat_stream | send rsp:{all_stream_content}\")\n\tasync def chat_once(websocket):\n\t    async for message in websocket:\n\t        logger.debug(f\"chat_once | receive prompt:{message}\")\n\t        rsp = cg.chat_once(prompt=message)\n\t        logger.debug(f\"chat_once | send rsp:{rsp}\")\n\t        await websocket.send(rsp)\n\tasync def handle(websocket, path):\n\t    if path == \"/chat_once\":\n\t        await chat_once(websocket)\n", "    elif path == \"/chat_stream\":\n\t        await chat_stream(websocket)\n\t    else:\n\t        raise ValueError(f\"not support path:{path}\")\n\tasync def main():\n\t    logger.debug(f\"service will listen on:{conf_inst.local_ip}:{conf_inst.local_port}\")\n\t    async with websockets.serve(handle, conf_inst.local_ip, conf_inst.local_port):\n\t        await asyncio.Future()\n\tif __name__ == '__main__':\n\t    asyncio.run(main())\n"]}
{"filename": "python/py_chatgpt_plus/services/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/services/chat.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom typing import Generator\n\tfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\tclass ChatService(object):\n\t    def __init__(self, api_key: str):\n\t        self._api_key = api_key\n\t    def chat_once(self, prompt: str, system_prompt: str) -> str:\n", "        cg = ChatGptV3(api_key=self._api_key,\n\t                       system_prompt=system_prompt)\n\t        return cg.chat_once(prompt=prompt)\n\t    def chat_stream(self, prompt: str, system_prompt: str) -> Generator:\n\t        cg = ChatGptV3(api_key=self._api_key)\n\t        return cg.chat_stream(prompt=prompt,\n\t                              system_prompt=system_prompt)"]}
{"filename": "python/py_chatgpt_plus/routes/chat_route.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom flask import Response, request\n\tfrom flask_restx import Resource, fields\n\tfrom loguru import logger\n\tfrom py_chatgpt_plus.services.chat import ChatService\n\tfrom py_chatgpt_plus.routes.api import api, custom_response, get_json_result\n\tfrom py_chatgpt_plus.utils.conf import conf_inst\n", "ns = api.namespace(\"chat\", description=\"Chat  API\")\n\tchat_service = ChatService(api_key=conf_inst.chatgpt_api_key)\n\tchat_base_request_fields = api.clone(\n\t    \"ChatBaseRequest\",\n\t    {\n\t        \"prompt\": fields.String(required=True, description=\"Type prompt.\"),\n\t        \"system_prompt\": fields.String(required=True,\n\t                                       description=\"System prompt\",\n\t                                       default=\"You are ChatGPT, a large language model trained by OpenAI. Respond conversationally\"),\n\t    }\n", ")\n\tchat_base_once_response_fields = api.model(\n\t     \"ChatBaseOnceResponseFields\",\n\t     {\n\t        \"answer\": fields.String(required=True, description=\"The id of mpc job.\"),\n\t     }\n\t)\n\t@ns.route(\"/once\")\n\tclass ChatOnce(Resource):\n\t    @ns.expect(chat_base_request_fields)\n", "    @ns.marshal_with(custom_response(chat_base_once_response_fields))\n\t    def post(self):\n\t        \"\"\"chat once, no stream!\"\"\"\n\t        req_json = request.json\n\t        logger.debug(f\"receive chat once post request:{req_json}\")\n\t        answer = chat_service.chat_once(prompt=req_json.get(\"prompt\", \"\"),\n\t                                        system_prompt=req_json.get(\"system_prompt\"))\n\t        return get_json_result(data={\"answer\": answer})\n\t@ns.route(\"/stream\")\n\tclass ChatStream(Resource):\n", "    @api.doc(responses={200: \"Stream SSE data in text/event-stream format\"})\n\t    @api.representation(\"text/event-stream\")\n\t    @ns.expect(chat_base_request_fields)\n\t    def post(self):\n\t        \"\"\"chat stream.\"\"\"\n\t        req_json = request.json\n\t        logger.debug(f\"receive chat stream post request:{req_json}\")\n\t        return Response(chat_service.chat_stream(prompt=req_json.get(\"prompt\", \"\"),\n\t                                                 system_prompt=req_json.get(\"system_prompt\")),\n\t                                                 mimetype=\"text/event-stream\")"]}
{"filename": "python/py_chatgpt_plus/routes/api.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\timport uuid\n\tfrom typing import Any\n\tfrom flask import Flask, Blueprint\n\tfrom flask_restx import Api, fields\n\tfrom py_chatgpt_plus.errors.error import ChatGptError, Success\n\tapp = Flask(__name__)\n", "app.config.SWAGGER_UI_OPERATION_ID = True  # type: ignore\n\tapp.config.SWAGGER_UI_REQUEST_DURATION = True  # type: ignore\n\tapp.url_map.strict_slashes = False\n\tapp.config[\"JSON_AS_ASCII\"] = False\n\tapp.config[\"ERROR_INCLUDE_MESSAGE\"] = False  # 必须设置为False\n\tapp.config[\"SECRET_KEY\"] = \"@&^&N908jksd#\"\n\tapi_blue = Blueprint(\"api\", __name__, url_prefix=\"/api/v1\")\n\tapi = Api(\n\t    api_blue,\n\t    version=\"1.0\",\n", "    title=\"ChatGpt service!\",\n\t    description=\"ChatGpt service!\",\n\t    doc=\"/doc\",\n\t)\n\t@api.errorhandler(ChatGptError)\n\tdef chat_gpt_error_response(e):\n\t    return get_json_result(e), 200\n\t@api.errorhandler(Exception)\n\tdef server_internal_err_response(e):\n\t    return \"internal server error\", 500\n", "def get_json_result(\n\t    custom_err: ChatGptError = Success.SuccessResponse, data=None\n\t):\n\t    \"\"\"Get API json result.\n\t    Args:\n\t        custom_err (ChatGptError): The Error class include ret_msg and ret_code.\n\t        data (Any): The custom result data.\n\t    Returns:\n\t    \"\"\"\n\t    result_dict = {\"ret_code\": custom_err.ret_code(), \"ret_msg\": custom_err.ret_msg()}\n", "    if data is not None:\n\t        result_dict[\"data\"] = data\n\t    return result_dict\n\tdef custom_response(data: Any = None) -> Any:\n\t    if data is not None:\n\t        custom_model = api.model(\n\t            \"CustomResponse\" + str(uuid.uuid4()),\n\t            {\n\t                \"ret_code\": fields.Integer(description=\"The code of result\", default=0),\n\t                \"ret_msg\": fields.String(\n", "                    description=\"The message of result\", default=\"success\"\n\t                ),\n\t                \"data\": fields.Nested(data),\n\t            },\n\t        )\n\t    else:\n\t        custom_model = api.model(\n\t            \"CustomResponse\",\n\t            {\n\t                \"ret_code\": fields.Integer(description=\"The code of result\", default=0),\n", "                \"ret_msg\": fields.String(\n\t                    description=\"The message of result\", default=\"success\"\n\t                ),\n\t            },\n\t        )\n\t    return custom_model\n"]}
{"filename": "python/py_chatgpt_plus/routes/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom loguru import logger\n\tfrom pathlib import Path\n\timport importlib\n\timport re\n\tfrom flask import Blueprint\n\tfrom py_chatgpt_plus.routes.api import app, api_blue\n", "from py_chatgpt_plus.utils.conf import conf_inst\n\tdef auto_register_blue_print(app):\n\t    for path in Path(__file__).parent.glob(\"*_route.py\"):\n\t        page_name = re.sub(\"$%s\" % \"_route\", \"\", path.stem)\n\t        module_name = \".\".join(\n\t            path.parts[path.parts.index(\"py_chatgpt_plus\"): -1] + (page_name,)\n\t        )\n\t        auto_blueprint = importlib.import_module(module_name)\n\t        print(module_name)\n\t        print(page_name)\n", "        auto_blueprint.blue_route = Blueprint(page_name, module_name)\n\t        app.register_blueprint(auto_blueprint.blue_route, url_prefix=f\"/{page_name}\")\n\tauto_register_blue_print(app)\n\tapp.register_blueprint(api_blue)\n\tdef main():\n\t    logger.add(conf_inst.log_file, level=conf_inst.log_level, enqueue=True, serialize=False, rotation=\"100 MB\")\n\t    logger.info(f\"service will listen on:{conf_inst.local_ip}:{conf_inst.local_port}\")\n\t    app.run(host=conf_inst.local_ip, port=conf_inst.local_port)"]}
{"filename": "python/py_chatgpt_plus/routes/image_route.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/routes/export.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\t\"\"\"Export swagger schema.\"\"\"\n\timport argparse\n\timport json\n\tfrom py_chatgpt_plus.routes.api import api, app\n\tdef export_schema_to_swagger(dst_file: str):\n\t    \"\"\"Export schema to swagger json file.\n", "    Args:\n\t        dst_file: The output file.\n\t    Returns:\n\t    \"\"\"\n\t    app.config[\"SERVER_NAME\"] = \"localhost\"\n\t    app.app_context().__enter__()\n\t    with open(dst_file, \"w\") as json_file:\n\t        json.dump(api.__schema__, json_file, indent=4)\n\tdef export_schema_to_postman_collection(dst_file: str):\n\t    \"\"\"Export API schema as a Postman collection.\n", "    Args:\n\t        dst_file: The output file.\n\t    Returns:\n\t    \"\"\"\n\t    app.config[\"SERVER_NAME\"] = \"localhost\"\n\t    app.app_context().__enter__()\n\t    urlvars = False  # Build query strings in URLs\n\t    swagger = True  # Export Swagger specifications\n\t    data = api.as_postman(urlvars=urlvars, swagger=swagger)\n\t    with open(dst_file, \"w\") as json_file:\n", "        json.dump(data, json_file, indent=2)\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser(description=\"Export swagger schema\")\n\t    parser.add_argument(\n\t        \"-t\",\n\t        \"--type\",\n\t        type=int,\n\t        default=0,\n\t        choices=[0, 1],\n\t        help=\"export as swagger or postman collection, 0 for swagger, 1 for postman collection\",\n", "    )\n\t    parser.add_argument(\"-f\", \"--dst_file\", type=str, required=True, help=\"output file\")\n\t    args = parser.parse_args()\n\t    if args.type == 0:\n\t        export_schema_to_swagger(args.dst_file)\n\t    elif args.type == 1:\n\t        export_schema_to_postman_collection(args.dst_file)\n\t    else:\n\t        raise Exception(\"unsupported export type.\")\n"]}
{"filename": "python/py_chatgpt_plus/errors/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tclass ChatGptError(Exception):\n\t    def __init__(self, ret_code: int = 0, ret_msg: str = \"success\"):\n\t        \"\"\"Define base error.\n\t        Args:\n\t            ret_code (int): The code of ret, default to 0.\n\t            ret_msg: The description of ret, default to success.\n", "        \"\"\"\n\t        self._ret_code = ret_code\n\t        self._ret_msg = ret_msg\n\t    def ret_code(self) -> int:\n\t        return self._ret_code\n\t    def ret_msg(self) -> str:\n\t        return self._ret_msg\n\t    def set_ret_msg(self, msg: str):\n\t        self._ret_msg = msg\n\t        return self"]}
{"filename": "python/py_chatgpt_plus/errors/export.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\timport argparse\n\timport importlib\n\timport inspect\n\timport sys\n\tfrom typing import Dict, List, Union\n\tfrom py_chatgpt_plus.errors import ChatGptError\n", "from pytablewriter import MarkdownTableWriter\n\tmodule_paths = [\"py_chatgpt_plus.errors.error\"]\n\tdef dynamic_import(module):\n\t    return importlib.import_module(module)\n\tdef get_module_attributes(module_path: str):\n\t    errcode_dict: Dict[str, List[Dict[str, Union[str, int]]]] = {}\n\t    module = dynamic_import(module_path)\n\t    for class_name, class_ in inspect.getmembers(\n\t        sys.modules[module.__name__], inspect.isclass\n\t    ):\n", "        attributes = inspect.getmembers(class_, lambda a: not (inspect.isroutine(a)))\n\t        attr_list = [\n\t            a for a in attributes if not (a[0].startswith(\"__\") and a[0].endswith(\"__\"))\n\t        ]\n\t        for attr in attr_list:\n\t            if isinstance(attr[1], ChatGptError):\n\t                module_name = attr[0]\n\t                ret_code = attr[1].__dict__[\"_ret_code\"]\n\t                ret_msg = attr[1].__dict__[\"_ret_msg\"]\n\t                if class_name not in errcode_dict:\n", "                    errcode_dict[class_name] = [\n\t                        {\n\t                            \"ret_code\": ret_code,\n\t                            \"ret_msg\": ret_msg,\n\t                            \"ret_module\": module_name,\n\t                        }\n\t                    ]\n\t                else:\n\t                    errcode_dict[class_name].append(\n\t                        {\n", "                            \"ret_code\": ret_code,\n\t                            \"ret_msg\": ret_msg,\n\t                            \"ret_module\": module_name,\n\t                        }\n\t                    )\n\t    return errcode_dict\n\tdef export(dst_file: str):\n\t    errcode_api_md_content = \"# Server Errcode API    \\n\"\n\t    for module_path in module_paths:\n\t        errcode_dict = get_module_attributes(module_path)\n", "        for className, code_info_lists in errcode_dict.items():\n\t            writer = MarkdownTableWriter(\n\t                table_name=className,\n\t                headers=[\"ret_module\", \"ret_code\", \"ret_msg\"],\n\t                value_matrix=[],\n\t                margin=1,  # add a whitespace for both sides of each cell\n\t            )\n\t            value_matrix = []\n\t            for code_info_dict in code_info_lists:\n\t                value_matrix.append(\n", "                    [\n\t                        code_info_dict[\"ret_module\"],\n\t                        code_info_dict[\"ret_code\"],\n\t                        code_info_dict[\"ret_msg\"],\n\t                    ]\n\t                )\n\t            writer.value_matrix = value_matrix\n\t            content = writer.dumps()\n\t            errcode_api_md_content += str(content) + \"    \\n\"\n\t    with open(dst_file, \"w\") as md_file:\n", "        md_file.write(errcode_api_md_content)\n\tif __name__ == \"__main__\":\n\t    parser = argparse.ArgumentParser(description=\"Export errcode\")\n\t    parser.add_argument(\"-f\", \"--dst_file\", type=str, required=True, help=\"output file\")\n\t    args = parser.parse_args()\n\t    export(dst_file=args.dst_file)\n"]}
{"filename": "python/py_chatgpt_plus/errors/error.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n\tfrom py_chatgpt_plus.errors import ChatGptError\n\tclass Success(object):\n\t    SuccessResponse = ChatGptError()\n\tclass CommonError(object):\n\t    Err_RequestParam = ChatGptError(\n\t        ret_code=100, ret_msg=\"request param invalid\"\n", "    )"]}
{"filename": "dev/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n\t#  #\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#  #\n\t#      http://www.apache.org/licenses/LICENSE-2.0\n\t#  #\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#  ==============================================================================\n"]}
