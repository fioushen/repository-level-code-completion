{"filename": "speechai/__init__.py", "chunked_list": ["from speechai.core.speechai import SpeechAI\n"]}
{"filename": "speechai/utils/logger.py", "chunked_list": ["import logging\n\tclass Logger:\n\t    def __init__(self, logger_name=\"speech-ai\", level=logging.INFO):\n\t        self.logger = logging.getLogger(logger_name)\n\t        self.logger.setLevel(level)\n\t        handler = logging.StreamHandler()\n\t        formatter = logging.Formatter(\"%(asctime)s [%(levelname)s] (%(name)s) - %(message)s\")\n\t        handler.setFormatter(formatter)\n\t        if not self.logger.handlers:\n\t            self.logger.addHandler(handler)\n", "    def get_logger(self):\n\t        return self.logger\n\tlogger = Logger().get_logger()\n"]}
{"filename": "speechai/utils/__init__.py", "chunked_list": ["from .directory import create_directory_from_path\n"]}
{"filename": "speechai/utils/directory.py", "chunked_list": ["import os\n\tfrom .logger import logger\n\tdef create_directory_from_path(filepath):\n\t    directory = os.path.dirname(filepath)\n\t    if not os.path.exists(directory):\n\t        try:\n\t            os.makedirs(directory)\n\t            logger.info(\"Directory '%s' created.\", directory)\n\t        except OSError as error:\n\t            logger.error(\"An error occurred while creating directory. Error details: %s\", error)\n"]}
{"filename": "speechai/llm/openai.py", "chunked_list": ["import openai\n\tfrom speechai.llm.abstract_llm import AbstractLLM\n\tclass OpenAI(AbstractLLM):\n\t    def __init__(self, api_key):\n\t        self.__client = openai\n\t        self.__client.api_key = api_key\n\t    def generate_text(self, prompt):\n\t        response = self.__client.Completion.create(\n\t            engine=\"text-davinci-003\", prompt=prompt, max_tokens=100  # Adjust as per your API version\n\t        )\n", "        return response.choices[0].text.strip()\n"]}
{"filename": "speechai/llm/abstract_llm.py", "chunked_list": ["from abc import ABC, abstractmethod\n\tclass AbstractLLM(ABC):\n\t    @abstractmethod\n\t    def generate_text(self, prompt: str):\n\t        pass\n"]}
{"filename": "speechai/llm/__init__.py", "chunked_list": ["from .abstract_llm import AbstractLLM\n\tfrom .cohere import Cohere\n\tfrom .openai import OpenAI\n"]}
{"filename": "speechai/llm/cohere.py", "chunked_list": ["import cohere\n\tfrom speechai.llm.abstract_llm import AbstractLLM\n\tclass Cohere(AbstractLLM):\n\t    def __init__(self, api_key):\n\t        self.__client = cohere.Client(api_key)\n\t    def generate_text(self, prompt):\n\t        response = self.__client.generate(model=\"command\", prompt=prompt, max_tokens=200, temperature=0.750)\n\t        return response.generations[0].text.strip()\n"]}
{"filename": "speechai/core/__init__.py", "chunked_list": []}
{"filename": "speechai/core/speechai.py", "chunked_list": ["from ..llm.abstract_llm import AbstractLLM\n\tfrom ..tts.abstract_tts import AbstractTTS\n\tfrom ..utils import create_directory_from_path\n\tclass SpeechAI:\n\t    __llm: AbstractLLM\n\t    __tts: AbstractTTS\n\t    def __init__(self, llm: AbstractLLM, tts: AbstractTTS):\n\t        self.set_llm(llm)\n\t        self.set_tts(tts)\n\t    def synthesize_dialog(self, prompt: str, save_to: str):\n", "        create_directory_from_path(save_to)\n\t        text = self.__llm.generate_text(prompt)\n\t        audio = self.__tts.text_to_speech(text, save_to)\n\t        return [text, audio]\n\t    def set_llm(self, llm: AbstractLLM):\n\t        self.__llm = llm\n\t    def set_tts(self, tts: AbstractTTS):\n\t        self.__tts = tts\n\t    def get_llm(self):\n\t        return self.__llm\n", "    def get_tts(self):\n\t        return self.__tts\n\t    def set_language(self, language_code: str):\n\t        self.__tts.set_language(language_code)\n"]}
{"filename": "speechai/tts/gtts.py", "chunked_list": ["from gtts import gTTS\n\tfrom gtts.tokenizer.pre_processors import abbreviations, end_of_line\n\tfrom speechai.tts.abstract_tts import AbstractTTS\n\tclass GTTS(AbstractTTS):\n\t    __language: str\n\t    def __init__(self, language_code=\"en\"):\n\t        self.set_language(language_code)\n\t    def text_to_speech(self, text: str, save_to: str):\n\t        tts = gTTS(text, lang=self.__language, pre_processor_funcs=[abbreviations, end_of_line])\n\t        tts.save(save_to)\n", "        return save_to\n\t    def get_language(self):\n\t        return self.__language\n\t    def set_language(self, language_code: str):\n\t        self.__language = language_code\n"]}
{"filename": "speechai/tts/__init__.py", "chunked_list": ["from .abstract_tts import AbstractTTS\n\tfrom .gtts import GTTS\n"]}
{"filename": "speechai/tts/abstract_tts.py", "chunked_list": ["from abc import ABC, abstractmethod\n\tclass AbstractTTS(ABC):\n\t    @abstractmethod\n\t    def text_to_speech(self, text: str, save_to: str):\n\t        pass\n\t    @abstractmethod\n\t    def set_language(self, language_code: str):\n\t        pass\n"]}
{"filename": "tests/utils/test_directory.py", "chunked_list": ["import pytest\n\tfrom speechai.utils import create_directory_from_path\n\t@pytest.fixture(name=\"mock_os\")\n\tdef fixture_mock_os(mocker):\n\t    mock = mocker.patch(\"speechai.utils.directory.os\", autospec=True)\n\t    return mock\n\t@pytest.fixture(name=\"mock_logger\")\n\tdef fixture_mock_logger(mocker):\n\t    return mocker.patch(\"speechai.utils.directory.logger\", autospec=True)\n\tdef test_create_directory_from_path_existing_directory(mock_os, mock_logger):\n", "    mock_os.path.dirname.return_value = \"/existing/directory\"\n\t    mock_os.path.exists.return_value = True\n\t    create_directory_from_path(\"/existing/directory/file.txt\")\n\t    mock_logger.info.assert_not_called()\n\t    mock_os.makedirs.assert_not_called()\n\tdef test_create_directory_from_path_new_directory(mock_os, mock_logger):\n\t    mock_os.path.dirname.return_value = \"/new/directory\"\n\t    mock_os.path.exists.return_value = False\n\t    create_directory_from_path(\"/new/directory/file.txt\")\n\t    mock_logger.info.assert_called_once_with(\"Directory '%s' created.\", \"/new/directory\")\n", "    mock_os.makedirs.assert_called_once_with(\"/new/directory\")\n\tdef test_create_directory_from_path_os_error(mock_os, mock_logger):\n\t    mock_os.path.dirname.return_value = \"/new/directory\"\n\t    mock_os.path.exists.return_value = False\n\t    mock_os.makedirs.side_effect = OSError(\"Test error\")\n\t    create_directory_from_path(\"/new/directory/file.txt\")\n\t    mock_logger.error.assert_called_once_with(\n\t        \"An error occurred while creating directory. Error details: %s\", mock_os.makedirs.side_effect\n\t    )\n\t    mock_os.makedirs.assert_called_once_with(\"/new/directory\")\n"]}
{"filename": "tests/llm/test_cohere.py", "chunked_list": ["from unittest.mock import Mock, PropertyMock\n\timport pytest\n\tfrom speechai.llm import Cohere\n\t@pytest.fixture(name=\"cohere_api_key\")\n\tdef fixture_cohere_api_key():\n\t    return \"mock-api-key\"\n\t@pytest.fixture(name=\"mock_cohere\")\n\tdef fixture_mock_cohere(mocker):\n\t    mock_cohere = mocker.patch(\"speechai.llm.cohere.cohere.Client\", autospec=True)\n\t    return mock_cohere\n", "def test_cohere_llm_initialization(cohere_api_key, mock_cohere):\n\t    Cohere(cohere_api_key)\n\t    mock_cohere.assert_called_once_with(cohere_api_key)\n\tdef test_cohere_llm_generate_text(cohere_api_key, mock_cohere):\n\t    cohere_llm = Cohere(cohere_api_key)\n\t    prompt = \"Hello\"\n\t    mock_generation = Mock()\n\t    type(mock_generation).text = PropertyMock(return_value=\" Hello, World! \")\n\t    mock_response = Mock()\n\t    type(mock_response).generations = PropertyMock(return_value=[mock_generation])\n", "    mock_cohere.return_value.generate.return_value = mock_response\n\t    assert cohere_llm.generate_text(prompt) == \"Hello, World!\"\n\t    mock_cohere.return_value.generate.assert_called_once_with(\n\t        model=\"command\", prompt=prompt, max_tokens=200, temperature=0.750\n\t    )\n"]}
{"filename": "tests/llm/test_openai.py", "chunked_list": ["from unittest.mock import Mock, PropertyMock\n\timport pytest\n\tfrom speechai.llm import OpenAI\n\t@pytest.fixture(name=\"openai_api_key\")\n\tdef fixture_openai_api_key():\n\t    return \"mock-api-key\"\n\t@pytest.fixture(name=\"mock_openai\")\n\tdef fixture_mock_openai(mocker):\n\t    mock_openai = mocker.patch(\"speechai.llm.openai.openai\", autospec=True)\n\t    return mock_openai\n", "def test_openai_llm_initialization(openai_api_key, mock_openai):\n\t    OpenAI(openai_api_key)\n\t    assert mock_openai.api_key == openai_api_key\n\tdef test_openai_llm_generate_text(openai_api_key, mock_openai):\n\t    openai_llm = OpenAI(openai_api_key)\n\t    prompt = \"Hello\"\n\t    mock_choice = Mock()\n\t    type(mock_choice).text = PropertyMock(return_value=\" Hello, World! \")\n\t    mock_response = Mock()\n\t    type(mock_response).choices = PropertyMock(return_value=[mock_choice])\n", "    mock_openai.Completion.create.return_value = mock_response\n\t    assert openai_llm.generate_text(prompt) == \"Hello, World!\"\n\t    mock_openai.Completion.create.assert_called_once_with(engine=\"text-davinci-003\", prompt=prompt, max_tokens=100)\n"]}
{"filename": "tests/core/test_speechai.py", "chunked_list": ["from unittest.mock import Mock\n\timport pytest\n\tfrom speechai import SpeechAI\n\tfrom speechai.llm import AbstractLLM\n\tfrom speechai.tts import AbstractTTS\n\t@pytest.fixture(name=\"mock_llm\")\n\tdef fixture_mock_llm():\n\t    return Mock(spec=AbstractLLM)\n\t@pytest.fixture(name=\"mock_tts\")\n\tdef fixture_mock_tts():\n", "    return Mock(spec=AbstractTTS)\n\t@pytest.fixture(name=\"mock_create_directory_from_path\")\n\tdef fixture_mock_create_directory_from_path(mocker):\n\t    return mocker.patch(\"speechai.core.speechai.create_directory_from_path\", autospec=True)\n\t@pytest.fixture(name=\"speech_ai\")\n\tdef fixture_speech_ai(mock_llm, mock_tts):\n\t    return SpeechAI(mock_llm, mock_tts)\n\tdef test_speech_ai_initialization(speech_ai, mock_llm, mock_tts):\n\t    assert speech_ai.get_llm() == mock_llm\n\t    assert speech_ai.get_tts() == mock_tts\n", "def test_speech_ai_synthesize_dialog(speech_ai, mock_create_directory_from_path):\n\t    prompt = \"Hello\"\n\t    save_to = \"/path/to/save\"\n\t    text = \"Generated Text\"\n\t    audio = b\"Audio Bytes\"\n\t    speech_ai.get_llm().generate_text.return_value = text\n\t    speech_ai.get_tts().text_to_speech.return_value = audio\n\t    assert speech_ai.synthesize_dialog(prompt, save_to) == [text, audio]\n\t    mock_create_directory_from_path.assert_called_once_with(save_to)\n\t    speech_ai.get_llm().generate_text.assert_called_once_with(prompt)\n", "    speech_ai.get_tts().text_to_speech.assert_called_once_with(text, save_to)\n\tdef test_speech_ai_set_llm(speech_ai):\n\t    new_llm = Mock(spec=AbstractLLM)\n\t    speech_ai.set_llm(new_llm)\n\t    assert speech_ai.get_llm() == new_llm\n\tdef test_speech_ai_set_tts(speech_ai):\n\t    new_tts = Mock(spec=AbstractTTS)\n\t    speech_ai.set_tts(new_tts)\n\t    assert speech_ai.get_tts() == new_tts\n\tdef test_speech_ai_set_language(speech_ai, mock_tts):\n", "    language_code = \"en\"\n\t    speech_ai.set_language(language_code)\n\t    mock_tts.set_language.assert_called_once_with(language_code)\n"]}
{"filename": "tests/tts/test_gtts.py", "chunked_list": ["from unittest.mock import Mock\n\timport pytest\n\tfrom gtts.tokenizer.pre_processors import abbreviations, end_of_line\n\tfrom speechai.tts.gtts import GTTS\n\t@pytest.fixture(name=\"mock_gtts\")\n\tdef fixture_mock_gtts(mocker):\n\t    return mocker.patch(\"speechai.tts.gtts.gTTS\", autospec=True)\n\tdef test_gtts_initialization():\n\t    gtts = GTTS()\n\t    assert gtts.get_language() == \"en\"\n", "def test_gtts_text_to_speech(mock_gtts):\n\t    gtts = GTTS()\n\t    text = \"Hello\"\n\t    save_to = \"/path/to/save\"\n\t    mock_tts_instance = Mock()\n\t    mock_gtts.return_value = mock_tts_instance\n\t    assert gtts.text_to_speech(text, save_to) == save_to\n\t    mock_gtts.assert_called_once_with(text, lang=gtts.get_language(), pre_processor_funcs=[abbreviations, end_of_line])\n\t    mock_tts_instance.save.assert_called_once_with(save_to)\n\tdef test_gtts_set_language():\n", "    gtts = GTTS()\n\t    language_code = \"es\"\n\t    gtts.set_language(language_code)\n\t    assert gtts.get_language() == language_code\n"]}
{"filename": "examples/openai_example.py", "chunked_list": ["import os\n\tfrom dotenv import load_dotenv\n\tfrom speechai import SpeechAI\n\tfrom speechai.llm import OpenAI\n\tfrom speechai.tts import GTTS\n\tload_dotenv()\n\tapi_key = os.getenv(\"OPENAI-KEY\")\n\topenai = OpenAI(api_key)\n\ttts = GTTS(language_code=\"en\")\n\tsa = SpeechAI(openai, tts)\n", "sa.synthesize_dialog(\"What is the average height of giraffe?\", \"./output/giraffe-openai-en.mp3\")\n\t[text, audio] = sa.synthesize_dialog(\"Which is the fastest animal on earth?\", \"./output/fastest-openai-en.mp3\")\n\tprint(text, audio)\n"]}
{"filename": "examples/cohere_example.py", "chunked_list": ["import os\n\tfrom dotenv import load_dotenv\n\tfrom speechai import SpeechAI\n\tfrom speechai.llm import Cohere\n\tfrom speechai.tts import GTTS\n\tload_dotenv()\n\tapi_key = os.getenv(\"COHERE-KEY\")\n\tcohere = Cohere(api_key)\n\ttts = GTTS(language_code=\"it\")\n\tsa = SpeechAI(cohere, tts)\n", "sa.synthesize_dialog(\"Quanto sono alte le giraffe in media?\", \"./output/giraffe-cohere-it.mp3\")\n\t[text, audio] = sa.synthesize_dialog(\"Quale è l'animale più veloce sulla terra?\", \"./output/fastest-cohere-it.mp3\")\n\tprint(text, audio)\n"]}
