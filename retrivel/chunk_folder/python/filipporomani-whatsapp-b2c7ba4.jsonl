{"filename": "setup.py", "chunked_list": ["from os import path\n\tfrom setuptools import setup\n\tfrom pre_dist import update_version\n\tupdate_version()\n\tfrom constants import VERSION\n\tthis_directory = path.abspath(path.dirname(__file__))\n\twith open(path.join(this_directory, \"README.md\")) as f:\n\t    long_description = f.read()\n\tsetup(\n\t    name=\"whatsapp-python\",\n", "    version=VERSION,\n\t    description=\"Open source Python wrapper for the WhatsApp Cloud API\",\n\t    long_description=long_description,\n\t    long_description_content_type=\"text/markdown\",\n\t    url=\"https://github.com/filipporomani/whatsapp\",\n\t    download_url=\"https://github.com/filipporomani/whatsapp/releases/latest\",\n\t    author=\"Filippo Romani\",\n\t    author_email=\"mail@filipporomani.it\",\n\t    license=\"MIT\",\n\t    packages=[\"whatsapp\"],\n", "    install_requires=[\"requests\", \"requests-toolbelt\", \"typing\", \"fastapi\"],\n\t    keywords=[\n\t        \"whatsapp\",\n\t        \"whatsapp-libary\",\n\t        \"WhatsApp Cloud API Wrapper\",\n\t        \"PyWhatsApp\",\n\t        \"WhatsApp API in Python\",\n\t    ],\n\t    python_requires=\">=3.6\",\n\t    classifiers=[\n", "        \"Development Status :: 4 - Beta\",\n\t        \"Intended Audience :: Developers\",\n\t        \"Topic :: Software Development :: Build Tools\",\n\t        \"License :: OSI Approved :: MIT License\",\n\t        \"Programming Language :: Python :: 3.6\",\n\t        \"Programming Language :: Python :: 3.7\",\n\t        \"Programming Language :: Python :: 3.8\",\n\t        \"Programming Language :: Python :: 3.9\",\n\t        \"Programming Language :: Python :: 3.10\",\n\t        \"Programming Language :: Python :: 3.11\",\n", "    ],\n\t)\n"]}
{"filename": "constants.py", "chunked_list": ["# internal use only\n\tVERSION = \"3.0.0\""]}
{"filename": "pre_dist.py", "chunked_list": ["##Â internal use only\n\tdef update_version():\n\t    f = open(\"./whatsapp/constants.py\", \"r\")\n\t    f = f.read()\n\t    with open(\"./constants.py\", \"w+\") as f1:\n\t        f1.write(f)\n\t    from constants import VERSION\n\t    with open(\"./.version\", \"w+\") as f2:\n\t        f2.write(VERSION)"]}
{"filename": "whatsapp/__init__.py", "chunked_list": ["\"\"\"\n\tUnofficial Python wrapper for the WhatsApp Cloud API.\n\t\"\"\"\n\tfrom __future__ import annotations\n\timport requests\n\timport logging\n\tfrom fastapi import FastAPI, Request\n\tfrom constants import VERSION\n\tclass WhatsApp(object):\n\t    def __init__(self, token: str = \"\", phone_number_id: str = \"\", logger: bool = True, update_check: bool = True):\n", "        \"\"\"\n\t        Initialize the WhatsApp Object\n\t        Args:\n\t            token[str]: Token for the WhatsApp cloud API obtained from the Facebook developer portal\n\t            phone_number_id[str]: Phone number id for the WhatsApp cloud API obtained from the developer portal\n\t            logger[bool]: Whether to enable logging or not (default: True)\n\t        \"\"\"\n\t        # Check if the version is up to date\n\t        logging.getLogger(__name__).addHandler(logging.NullHandler())\n\t        self.VERSION = VERSION\n", "        if update_check is True:\n\t            latest = str(requests.get(\n\t                \"https://pypi.org/pypi/whatsapp-python/json\").json()[\"info\"][\"version\"])\n\t            if self.VERSION != latest:\n\t                version_int = int(self.VERSION.replace(\".\", \"\"))\n\t                latest_int = int(latest.replace(\".\", \"\"))\n\t                # this is to avoid the case where the version is 1.0.10 and the latest is 1.0.2 (possible if user is using the github version)\n\t                if version_int < latest_int:\n\t                    logging.critical(\n\t                        f\"Whatsapp-python is out of date. Please update to the latest version {latest}. READ THE CHANGELOG BEFORE UPDATING. NEW VERSIONS MAY BREAK YOUR CODE IF NOT PROPERLY UPDATED.\")\n", "                if version_int > latest_int:\n\t                    latest_beta = int(str(requests.get(\n\t                        \"https://raw.githubusercontent.com/filipporomani/whatsapp/main/.version\").text).replace(\".\", \"\"))\n\t                    if latest_beta > version_int:\n\t                        logging.critical(\n\t                            \"A new beta version is available. Please update to the latest version. READ THE CHANGELOG BEFORE UPDATING. NEW VERSIONS MAY BREAK YOUR CODE IF NOT PROPERLY UPDATED.\")\n\t                    logging.critical(\n\t                        f\"You are using a development version of whatsapp-python. Please report any issue on GitHub.\")\n\t        if token == \"\" or phone_number_id == \"\":\n\t            logging.error(\"Token or phone number id not provided\")\n", "            raise ValueError(\n\t                \"Token or phone number ID not provided but is required\")\n\t        self.token = token\n\t        self.phone_number_id = phone_number_id\n\t        self.base_url = \"https://graph.facebook.com/v17.0\"\n\t        self.url = f\"{self.base_url}/{phone_number_id}/messages\"\n\t        async def base():\n\t            pass\n\t        self.message_handler = base\n\t        self.other_handler = base\n", "        self.verification_handler = base\n\t        self.headers = {\n\t            \"Content-Type\": \"application/json\",\n\t            \"Authorization\": f\"Bearer {self.token}\"\n\t        }\n\t        if logger is False:\n\t            logging.disable(logging.INFO)\n\t            logging.disable(logging.ERROR)\n\t        self.app = FastAPI()\n\t        # Verification handler has 1 argument: challenge (str | bool): str if verification is successful, False if not\n", "        @self.app.get(\"/\")\n\t        async def verify_endpoint(r: Request):\n\t            if r.query_params.get(\"hub.verify_token\") == self.token:\n\t                logging.info(\"Verified webhook\")\n\t                challenge = r.query_params.get(\"hub.challenge\")\n\t                self.verification_handler(challenge)\n\t                self.other_handler(challenge)\n\t                return str(challenge)\n\t            logging.error(\"Webhook Verification failed\")\n\t            await self.verification_handler(False)\n", "            await self.other_handler(False)\n\t            return {\"success\": False}\n\t        @self.app.post(\"/\")\n\t        async def hook(r: Request):\n\t            # Handle Webhook Subscriptions\n\t            data = await r.json()\n\t            if data is None:\n\t                return {\"success\": False}\n\t            logging.info(\"Received webhook data: %s\", data)\n\t            changed_field = self.instance.changed_field(data)\n", "            if changed_field == \"messages\":\n\t                new_message = self.instance.is_message(data)\n\t                if new_message:\n\t                    msg = Message(instance=self.instance, data=data)\n\t                    await self.message_handler(msg)\n\t                    await self.other_handler(msg)\n\t            return {\"success\": True}\n\t    # all the files starting with _ are imported here, and should not be imported directly.\n\t    from ext._property import authorized\n\t    from ext._send_others import send_custom_json, send_contacts\n", "    from ext._message import send_template\n\t    from ext._send_media import send_image, send_video, send_audio, send_location, send_sticker, send_document\n\t    from ext._media import upload_media, query_media_url, download_media, delete_media\n\t    from ext._buttons import send_button, create_button, send_reply_button\n\t    from ext._static import is_message, get_mobile, get_author, get_name, get_message, get_message_id, get_message_type, get_message_timestamp, get_audio, get_delivery, get_document, get_image, get_interactive_response, get_location, get_video, changed_field\n\t    is_message = staticmethod(is_message)\n\t    get_mobile = staticmethod(get_mobile)\n\t    get_name = staticmethod(get_name)\n\t    get_message = staticmethod(get_message)\n\t    get_message_id = staticmethod(get_message_id)\n", "    get_message_type = staticmethod(get_message_type)\n\t    get_message_timestamp = staticmethod(get_message_timestamp)\n\t    get_audio = staticmethod(get_audio)\n\t    get_delivery = staticmethod(get_delivery)\n\t    get_document = staticmethod(get_document)\n\t    get_image = staticmethod(get_image)\n\t    get_interactive_response = staticmethod(get_interactive_response)\n\t    get_location = staticmethod(get_location)\n\t    get_video = staticmethod(get_video)\n\t    changed_field = staticmethod(changed_field)\n", "    get_author = staticmethod(get_author)\n\t    authorized = property(authorized)\n\t    def create_message(self, **kwargs) -> Message:\n\t        \"\"\"\n\t        Create a message object\n\t        Args:\n\t            data[dict]: The message data\n\t            content[str]: The message content\n\t            to[str]: The recipient\n\t            rec_type[str]: The recipient type (individual/group)\n", "        \"\"\"\n\t        return Message(**kwargs, instance=self)\n\t    def on_message(self, handler: function):\n\t        \"\"\"\n\t        Set the handler for incoming messages\n\t        Args:\n\t            handler[function]: The handler function\n\t        \"\"\"\n\t        self.message_handler = handler\n\t    def on_event(self, handler: function):\n", "        \"\"\"\n\t        Set the handler for other events\n\t        Args:\n\t            handler[function]: The handler function\n\t        \"\"\"\n\t        self.other_handler = handler\n\t    def on_verification(self, handler: function):\n\t        \"\"\"\n\t        Set the handler for verification\n\t        Args:\n", "            handler[function]: The handler function\n\t        \"\"\"\n\t        self.verification_handler = handler\n\t    def run(self, host: str = \"localhost\", port: int = 5000, debug: bool = False, **options):\n\t        self.app.run(host=host, port=port, debug=debug, **options)\n\tclass Message(object):\n\t    def __init__(self, data: dict = {}, instance: WhatsApp = None, content: str = \"\", to: str = \"\", rec_type: str = \"individual\"):  # type: ignore\n\t        try:\n\t            self.id = instance.get_message_id(data)\n\t        except:\n", "            self.id = None\n\t        try:\n\t            self.type = self.instance.get_message_type(data)\n\t        except:\n\t            self.type = \"text\"\n\t        self.data = data\n\t        self.rec = rec_type\n\t        self.to = to\n\t        try:\n\t            self.content = content if content != \"\" else self.instance.get_message(\n", "                data)\n\t        except:\n\t            self.content = content\n\t        try:\n\t            self.sender = self.instance.get_mobile(data)\n\t        except:\n\t            self.sender = None\n\t        try:\n\t            self.name = self.instance.get_name(data)\n\t        except:\n", "            self.name = None\n\t        if self.type == \"image\":\n\t            try:\n\t                self.image = self.instance.get_image(data)\n\t            except:\n\t                self.image = None\n\t        elif self.type == \"video\":\n\t            try:\n\t                self.video = self.instance.get_video(data)\n\t            except:\n", "                self.video = None\n\t        elif self.type == \"audio\":\n\t            try:\n\t                self.audio = self.instance.get_audio(data)\n\t            except:\n\t                pass\n\t        elif self.type == \"document\":\n\t            try:\n\t                self.document = self.instance.get_document(data)\n\t            except:\n", "                pass\n\t        elif self.type == \"location\":\n\t            try:\n\t                self.location = self.instance.get_location(data)\n\t            except:\n\t                pass\n\t        elif self.type == \"interactive\":\n\t            try:\n\t                self.interactive = self.instance.get_interactive_response(data)\n\t            except:\n", "                pass\n\t        self.instance = instance\n\t        self.url = self.instance.url\n\t        self.headers = self.instance.headers\n\t    from ext._message import send, reply, mark_as_read\n"]}
{"filename": "whatsapp/constants.py", "chunked_list": ["# internal use only\n\tVERSION = \"3.0.0\""]}
{"filename": "whatsapp/ext/_send_media.py", "chunked_list": ["import logging\n\timport requests\n\tdef send_location(self, lat: str, long: str, name: str, address: str, recipient_id: str) -> dict:\n\t    \"\"\"\n\t    Sends a location message to a WhatsApp user\n\t    Args:\n\t        lat[str]: Latitude of the location\n\t        long[str]: Longitude of the location\n\t        name[str]: Name of the location\n\t        address[str]: Address of the location\n", "        recipient_id[str]: Phone number of the user with country code wihout +\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_location(\"-23.564\", \"-46.654\", \"My Location\", \"Rua dois, 123\", \"5511999999999\")\n\t    \"\"\"\n\t    data = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"to\": recipient_id,\n\t        \"type\": \"location\",\n", "        \"location\": {\n\t            \"latitude\": lat,\n\t            \"longitude\": long,\n\t            \"name\": name,\n\t            \"address\": address,\n\t        },\n\t    }\n\t    logging.info(f\"Sending location to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n", "        logging.info(f\"Location sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Location not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(r.json())\n\t    return r.json()\n\tdef send_image(\n\t    self,\n\t    image: str,\n\t    recipient_id: str,\n", "    recipient_type: str = \"individual\",\n\t    caption: str = \"\",\n\t    link: bool = True,\n\t) -> dict:\n\t    \"\"\"\n\t    Sends an image message to a WhatsApp user\n\t    There are two ways to send an image message to a user, either by passing the image id or by passing the image link.\n\t    Image id is the id of the image uploaded to the cloud api.\n\t    Args:\n\t        image[str]: Image id or link of the image\n", "        recipient_id[str]: Phone number of the user with country code wihout +\n\t        recipient_type[str]: Type of the recipient, either individual or group\n\t        caption[str]: Caption of the image\n\t        link[bool]: Whether to send an image id or an image link, True means that the image is an id, False means that the image is a link\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_image(\"https://i.imgur.com/Fh7XVYY.jpeg\", \"5511999999999\")\n\t    \"\"\"\n\t    if link:\n", "        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"recipient_type\": recipient_type,\n\t            \"to\": recipient_id,\n\t            \"type\": \"image\",\n\t            \"image\": {\"link\": image, \"caption\": caption},\n\t        }\n\t    else:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n", "            \"recipient_type\": recipient_type,\n\t            \"to\": recipient_id,\n\t            \"type\": \"image\",\n\t            \"image\": {\"id\": image, \"caption\": caption},\n\t        }\n\t    logging.info(f\"Sending image to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Image sent to {recipient_id}\")\n\t        return r.json()\n", "    logging.info(f\"Image not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(r.json())\n\t    return r.json()\n\tdef send_sticker(self, sticker: str, recipient_id: str, recipient_type: str = \"individual\", link: bool = True) -> dict:\n\t    \"\"\"\n\t    Sends a sticker message to a WhatsApp user\n\t    There are two ways to send a sticker message to a user, either by passing the image id or by passing the sticker link.\n\t    Sticker id is the id of the sticker uploaded to the cloud api.\n\t    Args:\n", "        sticker[str]: Sticker id or link of the sticker\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t        recipient_type[str]: Type of the recipient, either individual or group\n\t        link[bool]: Whether to send an sticker id or an sticker link, True means that the sticker is an id, False means that the image is a link\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_sticker(\"170511049062862\", \"5511999999999\", link=False)\n\t    \"\"\"\n\t    if link:\n", "        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"recipient_type\": recipient_type,\n\t            \"to\": recipient_id,\n\t            \"type\": \"sticker\",\n\t            \"sticker\": {\"link\": sticker},\n\t        }\n\t    else:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n", "            \"recipient_type\": recipient_type,\n\t            \"to\": recipient_id,\n\t            \"type\": \"sticker\",\n\t            \"sticker\": {\"id\": sticker},\n\t        }\n\t    logging.info(f\"Sending sticker to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Sticker sent to {recipient_id}\")\n\t        return r.json()\n", "    logging.info(f\"Sticker not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(r.json())\n\t    return r.json()\n\tdef send_audio(self, audio: str, recipient_id: str, link: bool = True) -> dict:\n\t    \"\"\"\n\t    Sends an audio message to a WhatsApp user\n\t    Audio messages can either be sent by passing the audio id or by passing the audio link.\n\t    Args:\n\t        audio[str]: Audio id or link of the audio\n", "        recipient_id[str]: Phone number of the user with country code wihout +\n\t        link[bool]: Whether to send an audio id or an audio link, True means that the audio is an id, False means that the audio is a link\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_audio(\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\", \"5511999999999\")\n\t    \"\"\"\n\t    if link:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n", "            \"to\": recipient_id,\n\t            \"type\": \"audio\",\n\t            \"audio\": {\"link\": audio},\n\t        }\n\t    else:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"to\": recipient_id,\n\t            \"type\": \"audio\",\n\t            \"audio\": {\"id\": audio},\n", "        }\n\t    logging.info(f\"Sending audio to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Audio sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Audio not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n", "def send_video(\n\t    self, video: str, recipient_id: str, caption: str = \"\", link: bool = True\n\t) -> dict:\n\t    \"\"\" \"\n\t    Sends a video message to a WhatsApp user\n\t    Video messages can either be sent by passing the video id or by passing the video link.\n\t    Args:\n\t        video[str]: Video id or link of the video\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t        caption[str]: Caption of the video\n", "        link[bool]: Whether to send a video id or a video link, True means that the video is an id, False means that the video is a link\n\t    example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_video(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\", \"5511999999999\")\n\t    \"\"\"\n\t    if link:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"to\": recipient_id,\n", "            \"type\": \"video\",\n\t            \"video\": {\"link\": video, \"caption\": caption},\n\t        }\n\t    else:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"to\": recipient_id,\n\t            \"type\": \"video\",\n\t            \"video\": {\"id\": video, \"caption\": caption},\n\t        }\n", "    logging.info(f\"Sending video to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Video sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Video not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n\tdef send_document(\n", "    self, document: str, recipient_id: str, caption: str = \"\", link: bool = True\n\t) -> dict:\n\t    \"\"\" \"\n\t    Sends a document message to a WhatsApp user\n\t    Document messages can either be sent by passing the document id or by passing the document link.\n\t    Args:\n\t        document[str]: Document id or link of the document\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t        caption[str]: Caption of the document\n\t        link[bool]: Whether to send a document id or a document link, True means that the document is an id, False means that the document is a link\n", "    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_document(\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\", \"5511999999999\")\n\t    \"\"\"\n\t    if link:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"to\": recipient_id,\n\t            \"type\": \"document\",\n", "            \"document\": {\"link\": document, \"caption\": caption},\n\t        }\n\t    else:\n\t        data = {\n\t            \"messaging_product\": \"whatsapp\",\n\t            \"to\": recipient_id,\n\t            \"type\": \"document\",\n\t            \"document\": {\"id\": document, \"caption\": caption},\n\t        }\n\t    logging.info(f\"Sending document to {recipient_id}\")\n", "    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Document sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Document not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n"]}
{"filename": "whatsapp/ext/_media.py", "chunked_list": ["import logging\n\timport requests\n\timport os\n\timport mimetypes\n\tfrom requests_toolbelt.multipart.encoder import MultipartEncoder\n\tfrom typing import Union, Dict, Any\n\tdef upload_media(self, media: str) -> Union[Dict[Any, Any], None]:\n\t    \"\"\"\n\t    Uploads a media to the cloud api and returns the id of the media\n\t    Args:\n", "        media[str]: Path of the media to be uploaded\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.upload_media(\"/path/to/media\")\n\t    REFERENCE: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#\n\t    \"\"\"\n\t    form_data = {\n\t        \"file\": (\n\t            media,\n", "            open(os.path.realpath(media), \"rb\"),\n\t            mimetypes.guess_type(media)[0],\n\t        ),\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"type\": mimetypes.guess_type(media)[0],\n\t    }\n\t    form_data = MultipartEncoder(fields=form_data)\n\t    headers = self.headers.copy()\n\t    headers[\"Content-Type\"] = form_data.content_type\n\t    logging.info(f\"Content-Type: {form_data.content_type}\")\n", "    logging.info(f\"Uploading media {media}\")\n\t    r = requests.post(\n\t        f\"{self.base_url}/{self.phone_number_id}/media\",\n\t        headers=headers,\n\t        data=form_data,\n\t    )\n\t    if r.status_code == 200:\n\t        logging.info(f\"Media {media} uploaded\")\n\t        return r.json()\n\t    logging.info(f\"Error uploading media {media}\")\n", "    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.info(f\"Response: {r.json()}\")\n\t    return None\n\tdef delete_media(self, media_id: str) -> Union[Dict[Any, Any], None]:\n\t    \"\"\"\n\t    Deletes a media from the cloud api\n\t    Args:\n\t        media_id[str]: Id of the media to be deleted\n\t    \"\"\"\n\t    logging.info(f\"Deleting media {media_id}\")\n", "    r = requests.delete(\n\t        f\"{self.base_url}/{media_id}\", headers=self.headers)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Media {media_id} deleted\")\n\t        return r.json()\n\t    logging.info(f\"Error deleting media {media_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.info(f\"Response: {r.json()}\")\n\t    return None\n\tdef query_media_url(self, media_id: str) -> Union[str, None]:\n", "    \"\"\"\n\t    Query media url from media id obtained either by manually uploading media or received media\n\t    Args:\n\t        media_id[str]: Media id of the media\n\t    Returns:\n\t        str: Media url\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.query_media_url(\"media_id\")\n", "    \"\"\"\n\t    logging.info(f\"Querying media url for {media_id}\")\n\t    r = requests.get(f\"{self.base_url}/{media_id}\", headers=self.headers)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Media url queried for {media_id}\")\n\t        return r.json()[\"url\"]\n\t    logging.info(f\"Media url not queried for {media_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.info(f\"Response: {r.json()}\")\n\t    return None\n", "def download_media(\n\t    self, media_url: str, mime_type: str, file_path: str = \"temp\"\n\t) -> Union[str, None]:\n\t    \"\"\"\n\t    Download media from media url obtained either by manually uploading media or received media\n\t    Args:\n\t        media_url[str]: Media url of the media\n\t        mime_type[str]: Mime type of the media\n\t        file_path[str]: Path of the file to be downloaded to. Default is \"temp\"\n\t                        Do not include the file extension. It will be added automatically.\n", "    Returns:\n\t        str: Media url\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.download_media(\"media_url\", \"image/jpeg\")\n\t        >>> whatsapp.download_media(\"media_url\", \"video/mp4\", \"path/to/file\") #do not include the file extension\n\t    \"\"\"\n\t    r = requests.get(media_url, headers=self.headers)\n\t    content = r.content\n", "    extension = mime_type.split(\"/\")[1]\n\t    save_file_here = None\n\t    # create a temporary file\n\t    try:\n\t        save_file_here = (\n\t            f\"{file_path}.{extension}\" if file_path else f\"temp.{extension}\"\n\t        )\n\t        with open(save_file_here, \"wb\") as f:\n\t            f.write(content)\n\t        logging.info(f\"Media downloaded to {save_file_here}\")\n", "        return f.name\n\t    except Exception as e:\n\t        logging.info(e)\n\t        logging.error(f\"Error downloading media to {save_file_here}\")\n\t        return None\n"]}
{"filename": "whatsapp/ext/_message.py", "chunked_list": ["import logging\n\timport requests\n\tdef send_template(self, template: str, recipient_id: str, components: str, lang: str = \"en_US\") -> dict:\n\t    \"\"\"\n\t    Sends a template message to a WhatsApp user, Template messages can either be;\n\t        1. Text template\n\t        2. Media based template\n\t        3. Interactive template\n\t    You can customize the template message by passing a dictionary of components.\n\t    You can find the available components in the documentation.\n", "    https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-message-templates\n\t    Args:\n\t        template[str]: Template name to be sent to the user\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t        lang[str]: Language of the template message\n\t        components[list]: List of components to be sent to the user  # \\\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_template(\"hello_world\", \"5511999999999\", lang=\"en_US\"))\n", "    \"\"\"\n\t    data = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"to\": recipient_id,\n\t        \"type\": \"template\",\n\t        \"template\": {\n\t            \"name\": template,\n\t            \"language\": {\"code\": lang},\n\t            \"components\": components,\n\t        },\n", "    }\n\t    logging.info(f\"Sending template to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Template sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Template not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n", "# MESSAGE()\n\tdef reply(self, reply_text: str = \"\", preview_url: bool = True) -> dict:\n\t    if self.data == {}:\n\t        return {\"error\": \"No data provided\"}\n\t    author = self.instance.get_author(self.data)\n\t    payload = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"recipient_type\": \"individual\",\n\t        \"to\": str(author),\n\t        \"type\": \"text\",\n", "        \"context\": {\"message_id\": self.id},\n\t        \"text\": {\"preview_url\": preview_url, \"body\": reply_text},\n\t    }\n\t    logging.info(f\"Replying to {self.id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=payload)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Message sent to {self.instance.get_author(self.data)}\")\n\t        return r.json()\n\t    logging.info(f\"Message not sent to {self.instance.get_author(self.data)}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n", "    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n\tdef mark_as_read(self) -> dict:\n\t    payload = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"status\": \"read\",\n\t        \"message_id\": self.id,\n\t    }\n\t    response = requests.post(\n\t        f\"{self.instance.url}\", headers=self.instance.headers, json=payload)\n", "    if response.status_code == 200:\n\t        logging.info(response.json())\n\t        return response.json()\n\t    else:\n\t        logging.error(response.json())\n\t        return response.json()\n\tdef send(self, preview_url: bool = True) -> dict:\n\t    data = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"recipient_type\": self.rec,\n", "        \"to\": self.to,\n\t        \"type\": \"text\",\n\t        \"text\": {\"preview_url\": preview_url, \"body\": self.content},\n\t    }\n\t    logging.info(f\"Sending message to {self.to}\")\n\t    r = requests.post(f\"{self.url}\", headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Message sent to {self.to}\")\n\t        return r.json()\n\t    logging.info(f\"Message not sent to {self.to}\")\n", "    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n"]}
{"filename": "whatsapp/ext/_property.py", "chunked_list": ["import requests\n\tdef authorized(self) -> bool:\n\t    return requests.get(self.url, headers=self.headers).status_code != 401\n"]}
{"filename": "whatsapp/ext/_static.py", "chunked_list": ["from typing import Any, Dict, Union\n\t@staticmethod\n\tdef is_message(data: Dict[Any, Any]) -> bool:\n\t    \"\"\"is_message checks if the data received from the webhook is a message.\n\t    Args:\n\t        data (Dict[Any, Any]): The data received from the webhook\n\t    Returns:\n\t        bool: True if the data is a message, False otherwise\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n", "    if \"messages\" in data:\n\t        return True\n\t    else:\n\t        return False\n\t@staticmethod\n\tdef get_mobile(data: Dict[Any, Any]) -> Union[str, None]:\n\t    \"\"\"\n\t    Extracts the mobile number of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n", "    Returns:\n\t        str: The mobile number of the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> mobile = whatsapp.get_mobile(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"contacts\" in data:\n\t        return data[\"contacts\"][0][\"wa_id\"]\n", "@staticmethod\n\tdef get_name(data: Dict[Any, Any]) -> Union[str, None]:\n\t    \"\"\"\n\t    Extracts the name of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        str: The name of the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n", "        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> mobile = whatsapp.get_name(data)\n\t    \"\"\"\n\t    contact = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if contact:\n\t        return contact[\"contacts\"][0][\"profile\"][\"name\"]\n\t@staticmethod\n\tdef get_message(data: Dict[Any, Any]) -> Union[str, None]:\n\t    \"\"\"\n\t    Extracts the text message of the sender from the data received from the webhook.\n", "    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        str: The text message received from the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> message = message.get_message(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n", "    if \"messages\" in data:\n\t        return data[\"messages\"][0][\"text\"][\"body\"]\n\t@staticmethod\n\tdef get_message_id(data: Dict[Any, Any]) -> Union[str, None]:\n\t    \"\"\"\n\t    Extracts the message id of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        str: The message id of the sender\n", "    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> message_id = whatsapp.get_message_id(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        return data[\"messages\"][0][\"id\"]\n\t@staticmethod\n\tdef get_message_timestamp(data: Dict[Any, Any]) -> Union[str, None]:\n", "    \"\"\" \"\n\t    Extracts the timestamp of the message from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        str: The timestamp of the message\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.get_message_timestamp(data)\n", "    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        return data[\"messages\"][0][\"timestamp\"]\n\t@staticmethod\n\tdef get_interactive_response(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\"\n\t        Extracts the response of the interactive message from the data received from the webhook.\n\t        Args:\n\t        data[dict]: The data received from the webhook\n", "    Returns:\n\t        dict: The response of the interactive message\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> response = whatsapp.get_interactive_response(data)\n\t        >>> interactive_type = response.get(\"type\")\n\t        >>> message_id = response[interactive_type][\"id\"]\n\t        >>> message_text = response[interactive_type][\"title\"]\n\t    \"\"\"\n", "    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        if \"interactive\" in data[\"messages\"][0]:\n\t            return data[\"messages\"][0][\"interactive\"]\n\t@staticmethod\n\tdef get_location(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\"\n\t    Extracts the location of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n", "    Returns:\n\t        dict: The location of the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.get_location(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        if \"location\" in data[\"messages\"][0]:\n", "            return data[\"messages\"][0][\"location\"]\n\t@staticmethod\n\tdef get_image(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\" \"\n\t    Extracts the image of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        dict: The image_id of an image sent by the sender\n\t    Example:\n", "        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> image_id = whatsapp.get_image(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        if \"image\" in data[\"messages\"][0]:\n\t            return data[\"messages\"][0][\"image\"]\n\t@staticmethod\n\tdef get_document(data: Dict[Any, Any]) -> Union[Dict, None]:\n", "    \"\"\" \"\n\t    Extracts the document of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        dict: The document_id of an image sent by the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> document_id = whatsapp.get_document(data)\n", "    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        if \"document\" in data[\"messages\"][0]:\n\t            return data[\"messages\"][0][\"document\"]\n\t@staticmethod\n\tdef get_audio(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\"\n\t    Extracts the audio of the sender from the data received from the webhook.\n\t    Args:\n", "        data[dict]: The data received from the webhook\n\t    Returns:\n\t        dict: The audio of the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.get_audio(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n", "        if \"audio\" in data[\"messages\"][0]:\n\t            return data[\"messages\"][0][\"audio\"]\n\t@staticmethod\n\tdef get_video(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\"\n\t    Extracts the video of the sender from the data received from the webhook.\n\t    Args:\n\t        data[dict]: The data received from the webhook\n\t    Returns:\n\t        dict: Dictionary containing the video details sent by the sender\n", "    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.get_video(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        if \"video\" in data[\"messages\"][0]:\n\t            return data[\"messages\"][0][\"video\"]\n\t@staticmethod\n", "def get_message_type(data: Dict[Any, Any]) -> Union[str, None]:\n\t    \"\"\"\n\t    Gets the type of the message sent by the sender from the data received from the webhook.\n\t    Args:\n\t        data [dict]: The data received from the webhook\n\t    Returns:\n\t        str: The type of the message sent by the sender\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n", "        >>> whatsapp.get_message_type(data)\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"messages\" in data:\n\t        return data[\"messages\"][0][\"type\"]\n\t@staticmethod\n\tdef get_delivery(data: Dict[Any, Any]) -> Union[Dict, None]:\n\t    \"\"\"\n\t    Extracts the delivery status of the message from the data received from the webhook.\n\t    Args:\n", "        data [dict]: The data received from the webhook\n\t    Returns:\n\t        dict: The delivery status of the message and message id of the message\n\t    \"\"\"\n\t    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n\t    if \"statuses\" in data:\n\t        return data[\"statuses\"][0][\"status\"]\n\t@staticmethod\n\tdef changed_field(data: Dict[Any, Any]) -> str:\n\t    \"\"\"\n", "    Helper function to check if the field changed in the data received from the webhook.\n\t    Args:\n\t        data [dict]: The data received from the webhook\n\t    Returns:\n\t        str: The field changed in the data received from the webhook\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.changed_field(data)\n\t    \"\"\"\n", "    return data[\"entry\"][0][\"changes\"][0][\"field\"]\n\t@staticmethod\n\tdef get_author(data: Dict[Any, Any]) -> Union[str, None]:\n\t    try:\n\t        return data[\"entry\"][0][\"changes\"][0][\"value\"][\"messages\"][0][\"from\"]\n\t    except Exception:\n\t        return None\n"]}
{"filename": "whatsapp/ext/_send_others.py", "chunked_list": ["from typing import Any, Dict, List\n\timport requests\n\timport logging\n\tdef send_custom_json(self, data: dict, recipient_id: str = \"\"):\n\t    \"\"\"\n\t    Sends a custom json to a WhatsApp user. This can be used to send custom objects to the message endpoint.\n\t    Args:\n\t        data[dict]: Dictionary that should be send\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t    Example:\n", "        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> whatsapp.send_custom_json({\n\t                \"messaging_product\": \"whatsapp\",\n\t                \"type\": \"audio\",\n\t                \"audio\": {\"id\": audio}}, \"5511999999999\")\n\t    \"\"\"\n\t    if recipient_id:\n\t        if \"to\" in data.keys():\n\t            data_recipient_id = data[\"to\"]\n", "            logging.info(\n\t                f\"Recipient Id is defined in data ({data_recipient_id}) and recipient_id parameter ({recipient_id})\")\n\t        else:\n\t            data[\"to\"] = recipient_id\n\t    logging.info(f\"Sending custom json to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Custom json sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Custom json not sent to {recipient_id}\")\n", "    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n\tdef send_contacts(\n\t    self, contacts: List[Dict[Any, Any]], recipient_id: str\n\t) -> Dict[Any, Any]:\n\t    \"\"\"send_contacts\n\t    Send a list of contacts to a user\n\t    Args:\n\t        contacts(List[Dict[Any, Any]]): List of contacts to send\n", "        recipient_id(str): Phone number of the user with country code wihout +\n\t    Example:\n\t        >>> from whatsapp import WhatsApp\n\t        >>> whatsapp = WhatsApp(token, phone_number_id)\n\t        >>> contacts = [{\n\t            \"addresses\": [{\n\t                \"street\": \"STREET\",\n\t                \"city\": \"CITY\",\n\t                \"state\": \"STATE\",\n\t                \"zip\": \"ZIP\",\n", "                \"country\": \"COUNTRY\",\n\t                \"country_code\": \"COUNTRY_CODE\",\n\t                \"type\": \"HOME\"\n\t                },\n\t            ....\n\t            }\n\t        ]\n\t    REFERENCE: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#contacts-object\n\t    \"\"\"\n\t    data = {\n", "        \"messaging_product\": \"whatsapp\",\n\t        \"to\": recipient_id,\n\t        \"type\": \"contacts\",\n\t        \"contacts\": contacts,\n\t    }\n\t    logging.info(f\"Sending contacts to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Contacts sent to {recipient_id}\")\n\t        return r.json()\n", "    logging.info(f\"Contacts not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.error(f\"Response: {r.json()}\")\n\t    return r.json()\n"]}
{"filename": "whatsapp/ext/_buttons.py", "chunked_list": ["import logging\n\timport requests\n\tfrom typing import Dict, Any\n\tdef create_button(self, button: Dict[Any, Any]) -> Dict[Any, Any]:\n\t    \"\"\"\n\t    Method to create a button object to be used in the send_message method.\n\t    This is method is designed to only be used internally by the send_button method.\n\t    Args:\n\t            button[dict]: A dictionary containing the button data\n\t    \"\"\"\n", "    data = {\"type\": \"list\", \"action\": button.get(\"action\")}\n\t    if button.get(\"header\"):\n\t        data[\"header\"] = {\"type\": \"text\", \"text\": button.get(\"header\")}\n\t    if button.get(\"body\"):\n\t        data[\"body\"] = {\"text\": button.get(\"body\")}\n\t    if button.get(\"footer\"):\n\t        data[\"footer\"] = {\"text\": button.get(\"footer\")}\n\t    return data\n\tdef send_button(self, button: Dict[Any, Any], recipient_id: str) -> Dict[Any, Any]:\n\t    \"\"\"\n", "    Sends an interactive buttons message to a WhatsApp user\n\t    Args:\n\t        button[dict]: A dictionary containing the button data(rows-title may not exceed 20 characters)\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t    check https://github.com/Neurotech-HQ/whatsapp#sending-interactive-reply-buttons for an example.\n\t    \"\"\"\n\t    data = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"to\": recipient_id,\n\t        \"type\": \"interactive\",\n", "        \"interactive\": self.create_button(button),\n\t    }\n\t    logging.info(f\"Sending buttons to {recipient_id}\")\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Buttons sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Buttons not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.info(f\"Response: {r.json()}\")\n", "    return r.json()\n\tdef send_reply_button(\n\t    self, button: Dict[Any, Any], recipient_id: str\n\t) -> Dict[Any, Any]:\n\t    \"\"\"\n\t    Sends an interactive reply buttons[menu] message to a WhatsApp user\n\t    Args:\n\t        button[dict]: A dictionary containing the button data\n\t        recipient_id[str]: Phone number of the user with country code wihout +\n\t    Note:\n", "        The maximum number of buttons is 3, more than 3 buttons will rise an error.\n\t    \"\"\"\n\t    if len(button[\"action\"][\"buttons\"]) > 3:\n\t        raise ValueError(\"The maximum number of buttons is 3.\")\n\t    data = {\n\t        \"messaging_product\": \"whatsapp\",\n\t        \"recipient_type\": \"individual\",\n\t        \"to\": recipient_id,\n\t        \"type\": \"interactive\",\n\t        \"interactive\": button,\n", "    }\n\t    r = requests.post(self.url, headers=self.headers, json=data)\n\t    if r.status_code == 200:\n\t        logging.info(f\"Reply buttons sent to {recipient_id}\")\n\t        return r.json()\n\t    logging.info(f\"Reply buttons not sent to {recipient_id}\")\n\t    logging.info(f\"Status code: {r.status_code}\")\n\t    logging.info(f\"Response: {r.json()}\")\n\t    return r.json()\n"]}
{"filename": "examples/sending_button.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_button(\n\t        recipient_id=\"255757xxxxxx\",\n\t        button={\n", "            \"header\": \"Header Testing\",\n\t            \"body\": \"Body Testing\",\n\t            \"footer\": \"Footer Testing\",\n\t            \"action\": {\n\t                \"button\": \"Button Testing\",\n\t                \"sections\": [\n\t                    {\n\t                        \"title\": \"iBank\",\n\t                        \"rows\": [\n\t                            {\"id\": \"row 1\", \"title\": \"Send Money\", \"description\": \"\"},\n", "                            {\n\t                                \"id\": \"row 2\",\n\t                                \"title\": \"Withdraw money\",\n\t                                \"description\": \"\",\n\t                            },\n\t                        ],\n\t                    }\n\t                ],\n\t            },\n\t        },\n", "    )\n"]}
{"filename": "examples/example_hook_obj.py", "chunked_list": ["from whatsapp import Message, Hook, WhatsApp\n\tfrom flask import Response\n\tfrom os import getenv\n\tfrom dotenv import load_dotenv\n\tdef handler(msg: Message):\n\t    message_type = msg.type\n\t    messenger = msg.instance\n\t    mobile = msg.sender\n\t    if message_type == \"text\":\n\t        message = msg.content\n", "        name = msg.name\n\t        m = Message(instance=messenger, to=mobile, content=\"Hello World\")\n\t        m.send()\n\t    elif message_type == \"interactive\":\n\t        message_response = msg.interactive\n\t        if message_response is None:\n\t            return Response(status=400)\n\t        interactive_type = message_response.get(\"type\")\n\t        message_id = message_response[interactive_type][\"id\"]\n\t        message_text = message_response[interactive_type][\"title\"]\n", "        # Do some action\n\t    elif message_type == \"location\":\n\t        message_location = msg.location\n\t        if message_location is None:\n\t            return Response(status=400)\n\t        message_latitude = message_location[\"latitude\"]\n\t        message_longitude = message_location[\"longitude\"]\n\t        # Do some action\n\t    elif message_type == \"image\":\n\t        image = msg.image\n", "        if image is None:\n\t            return Response(status=400)\n\t        image_id, mime_type = image[\"id\"], image[\"mime_type\"]\n\t        image_url = messenger.query_media_url(image_id)\n\t        if image_url is None:\n\t            return Response(status=400)\n\t        image_filename = messenger.download_media(image_url, mime_type)\n\t        # Do some action\n\t    elif message_type == \"video\":\n\t        video = msg.video\n", "        if video is None:\n\t            return Response(status=400)\n\t        video_id, mime_type = video[\"id\"], video[\"mime_type\"]\n\t        video_url = messenger.query_media_url(video_id)\n\t        if video_url is None:\n\t            return Response(status=400)\n\t        video_filename = messenger.download_media(video_url, mime_type)\n\t        # Do some action\n\t    elif message_type == \"audio\":\n\t        audio = msg.audio\n", "        if audio is None:\n\t            return Response(status=400)\n\t        audio_id, mime_type = audio[\"id\"], audio[\"mime_type\"]\n\t        audio_url = messenger.query_media_url(audio_id)\n\t        if audio_url is None:\n\t            return Response(status=400)\n\t        audio_filename = messenger.download_media(audio_url, mime_type)\n\t        # Do some action\n\t    elif message_type == \"document\":\n\t        file = msg.document\n", "        if file is None:\n\t            return Response(status=400)\n\t        file_id, mime_type = file[\"id\"], file[\"mime_type\"]\n\t        file_url = messenger.query_media_url(file_id)\n\t        if file_url is None:\n\t            return Response(status=400)\n\t        file_filename = messenger.download_media(file_url, mime_type)\n\t        # Do some action\n\tmessenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                     phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n", "hook = Hook(instance=messenger, handler=handler, port=5000,\n\t            host=\"0.0.0.0\", verify_token=getenv(\"VERIFY_TOKEN\"))\n\thook.run()\n"]}
{"filename": "examples/sending_video.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_video(\n\t        video=\"https://www.youtube.com/watch?v=K4TOrB7at0Y\",\n\t        recipient_id=\"255757xxxxxx\",\n", "    )\n\t    print(response)\n"]}
{"filename": "examples/sending_message.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp, Message\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    msg = Message(instance=messenger,\n\t                  content=\"Hello World!\", to=\"919999999999\")\n\t    response = msg.send()\n", "    print(response)\n"]}
{"filename": "examples/sending_audio.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_audio(\n\t        audio=\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n\t        recipient_id=\"255757xxxxxx\",\n", "    )\n\t    print(response)\n"]}
{"filename": "examples/sending_image.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_image(\n\t        image=\"https://i.imgur.com/Fh7XVYY.jpeg\",\n\t        recipient_id=\"255757294146\",\n", "    )\n\t    print(response)\n"]}
{"filename": "examples/sending_document.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_document(\n\t        document=\"http://www.africau.edu/images/default/sample.pdf\",\n\t        recipient_id=\"255757294146\",\n", "    )\n\t    print(response)\n"]}
{"filename": "examples/reply_to_message_obj.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp, Message\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"), phone_number_id=getenv(\"ID\"))\n\t    data = {\"your\": \"data\"}\n\t    msg = Message(data=data, instance=messenger)\n\t    msg.reply(\"lol\")\n\t    print(msg)\n"]}
{"filename": "examples/sending_template_message.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_template(\n\t        \"hello_world\", \"255757xxxxxx\", components=[], lang=\"en_US\")\n\t    print(response)\n"]}
{"filename": "examples/sending_location.py", "chunked_list": ["from os import getenv\n\tfrom whatsapp import WhatsApp\n\tfrom dotenv import load_dotenv\n\tif __name__ == \"__main__\":\n\t    load_dotenv()\n\t    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n\t                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\t    response = messenger.send_location(\n\t        lat=1.29,\n\t        long=103.85,\n", "        name=\"Singapore\",\n\t        address=\"Singapore\",\n\t        recipient_id=\"255757294146\",\n\t    )\n\t    print(response)\n"]}
{"filename": "examples/standalone_hook.py", "chunked_list": ["import os\n\timport logging\n\tfrom whatsapp import WhatsApp, Message\n\tfrom dotenv import load_dotenv\n\tfrom flask import Flask, request, Response\n\t# Initialize Flask App\n\tapp = Flask(__name__)\n\t# Load .env file\n\tload_dotenv(\"../.env\")\n\tmessenger = WhatsApp(os.getenv(\"TOKEN\"),\n", "                     phone_number_id=os.getenv(\"ID\"))\n\tVERIFY_TOKEN = \"30cca545-3838-48b2-80a7-9e43b1ae8ce4\"\n\t# Logging\n\tlogging.basicConfig(\n\t    level=logging.INFO, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\t)\n\t@app.get(\"/\")\n\tdef verify_token():\n\t    if request.args.get(\"hub.verify_token\") == VERIFY_TOKEN:\n\t        logging.info(\"Verified webhook\")\n", "        challenge = request.args.get(\"hub.challenge\")\n\t        return str(challenge)\n\t    logging.error(\"Webhook Verification failed\")\n\t    return \"Invalid verification token\"\n\t@app.post(\"/\")\n\tdef hook():\n\t    # Handle Webhook Subscriptions\n\t    data = request.get_json()\n\t    if data is None:\n\t        return Response(status=200)\n", "    logging.info(\"Received webhook data: %s\", data)\n\t    changed_field = messenger.changed_field(data)\n\t    if changed_field == \"messages\":\n\t        new_message = messenger.is_message(data)\n\t        if new_message:\n\t            msg = Message(instance=messenger, data=data)\n\t            mobile = msg.sender\n\t            name = msg.name\n\t            message_type = msg.type\n\t            logging.info(\n", "                f\"New Message; sender:{mobile} name:{name} type:{message_type}\"\n\t            )\n\t            if message_type == \"text\":\n\t                message = msg.content\n\t                name = msg.name\n\t                logging.info(\"Message: %s\", message)\n\t                m = Message(instance=messenger, to=mobile,\n\t                            content=\"Hello World\")\n\t                m.send()\n\t            elif message_type == \"interactive\":\n", "                message_response = msg.interactive\n\t                if message_response is None:\n\t                    return Response(status=400)\n\t                interactive_type = message_response.get(\"type\")\n\t                message_id = message_response[interactive_type][\"id\"]\n\t                message_text = message_response[interactive_type][\"title\"]\n\t                logging.info(\n\t                    f\"Interactive Message; {message_id}: {message_text}\")\n\t            elif message_type == \"location\":\n\t                message_location = msg.location\n", "                if message_location is None:\n\t                    return Response(status=400)\n\t                message_latitude = message_location[\"latitude\"]\n\t                message_longitude = message_location[\"longitude\"]\n\t                logging.info(\"Location: %s, %s\",\n\t                             message_latitude, message_longitude)\n\t            elif message_type == \"image\":\n\t                image = msg.image\n\t                if image is None:\n\t                    return Response(status=400)\n", "                image_id, mime_type = image[\"id\"], image[\"mime_type\"]\n\t                image_url = messenger.query_media_url(image_id)\n\t                if image_url is None:\n\t                    return Response(status=400)\n\t                image_filename = messenger.download_media(image_url, mime_type)\n\t                logging.info(f\"{mobile} sent image {image_filename}\")\n\t            elif message_type == \"video\":\n\t                video = msg.video\n\t                if video is None:\n\t                    return Response(status=400)\n", "                video_id, mime_type = video[\"id\"], video[\"mime_type\"]\n\t                video_url = messenger.query_media_url(video_id)\n\t                if video_url is None:\n\t                    return Response(status=400)\n\t                video_filename = messenger.download_media(video_url, mime_type)\n\t                logging.info(f\"{mobile} sent video {video_filename}\")\n\t            elif message_type == \"audio\":\n\t                audio = msg.audio\n\t                if audio is None:\n\t                    return Response(status=400)\n", "                audio_id, mime_type = audio[\"id\"], audio[\"mime_type\"]\n\t                audio_url = messenger.query_media_url(audio_id)\n\t                if audio_url is None:\n\t                    return Response(status=400)\n\t                audio_filename = messenger.download_media(audio_url, mime_type)\n\t                logging.info(f\"{mobile} sent audio {audio_filename}\")\n\t            elif message_type == \"document\":\n\t                file = msg.document\n\t                if file is None:\n\t                    return Response(status=400)\n", "                file_id, mime_type = file[\"id\"], file[\"mime_type\"]\n\t                file_url = messenger.query_media_url(file_id)\n\t                if file_url is None:\n\t                    return Response(status=400)\n\t                file_filename = messenger.download_media(file_url, mime_type)\n\t                logging.info(f\"{mobile} sent file {file_filename}\")\n\t            else:\n\t                logging.info(f\"{mobile} sent {message_type} \")\n\t                logging.info(data)\n\t        else:\n", "            delivery = messenger.get_delivery(data)\n\t            if delivery:\n\t                logging.info(f\"Message : {delivery}\")\n\t            else:\n\t                logging.info(\"No new message\")\n\t    return \"OK\", 200\n\tif __name__ == \"__main__\":\n\t    app.run(port=6869, debug=False)\n"]}
