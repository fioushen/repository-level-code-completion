{"filename": "setup.py", "chunked_list": ["from setuptools import setup\n\tfrom pybind11.setup_helpers import build_ext, intree_extensions\n\text_modules = intree_extensions([\"src/endf/_records.cpp\"])\n\tsetup(\n\t    ext_modules=ext_modules,\n\t    cmdclass={\"build_ext\": build_ext},\n\t)\n"]}
{"filename": "doc/source/conf.py", "chunked_list": ["# Configuration file for the Sphinx documentation builder.\n\t#\n\t# For the full list of built-in configuration values, see the documentation:\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\t# -- Project information -----------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\n\tfrom importlib.metadata import version as metadata_version\n\tproject = 'ENDF Python Interface'\n\tcopyright = '2023, Paul Romano'\n\tauthor = 'Paul Romano'\n", "release = metadata_version('endf')\n\tversion = '.'.join(release.split('.')[:2])\n\t# -- General configuration ---------------------------------------------------\n\t# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\n\textensions = [\n\t    'sphinx.ext.autodoc',\n\t    'sphinx.ext.autosummary',\n\t    'sphinx.ext.intersphinx',\n\t    'sphinx.ext.napoleon',\n\t    'sphinx.ext.viewcode',\n", "    'sphinx_autodoc_typehints',\n\t    'sphinx_design',\n\t]\n\ttemplates_path = ['_templates']\n\texclude_patterns = []\n\tintersphinx_mapping = {\n\t    'python': ('https://docs.python.org/3', None),\n\t    'numpy': ('https://numpy.org/doc/stable/', None),\n\t}\n\t# -- Options for HTML output -------------------------------------------------\n", "# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n\thtml_theme = 'pydata_sphinx_theme'\n\thtml_static_path = ['_static']\n\thtml_theme_options = {\n\t    \"github_url\": \"https://github.com/paulromano/endf-python\",\n\t    #\"navbar_end\": [\"navbar-icon-links\"],\n\t    \"show_toc_level\": 3,\n\t    \"logo\": {\"text\": project}\n\t}\n\tnapoleon_use_rtype = False\n", "# TODO: Using ivar results in better looking documentation, but it breaks\n\t# cross-references to attributes which is annoying. Figure out a way to get it\n\t# to work with cross-references\n\t#napoleon_use_ivar = True\n\t# -- Options for LaTeX output ------------------------------------------------\n\tlatex_domain_indices = False\n"]}
{"filename": "tests/test_material.py", "chunked_list": ["# SPDX-FileCopyrightText: Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom pathlib import Path\n\timport pytest\n\timport endf\n\t@pytest.fixture\n\tdef am244():\n\t    filename = Path(__file__).with_name('n-095_Am_244.endf')\n\t    return endf.Material(filename)\n\tdef test_init_file():\n", "    filename = Path(__file__).with_name('n-095_Am_244.endf')\n\t    with open(filename) as fh:\n\t        am244 = endf.Material(fh)\n\t    assert am244.MAT == 9552\n\tdef test_sections(am244):\n\t    assert isinstance(am244.sections, list)\n\t    for mf_mt in am244.sections:\n\t        assert len(mf_mt) == 2\n\tdef test_section_text(am244):\n\t    for key, value in am244.section_text.items():\n", "        assert isinstance(key, tuple)\n\t        assert isinstance(value, str)\n\tdef test_section_data(am244):\n\t    # Spot check metadata in MF=1, MT=451\n\t    metadata = am244.section_data[1, 451]\n\t    assert metadata['ZSYMAM'].strip() == '95-Am-244'\n\t    assert metadata['EMAX'] == pytest.approx(20.0e6)\n\t    # Spot check cross section data in MF=4\n\t    capture = am244.section_data[3, 102]\n\t    assert capture['QM'] == pytest.approx(6052990.0)\n", "    # Indexing Material directly is same as indexing section_data\n\t    assert am244[3, 102] is am244.section_data[3, 102]\n\tdef test_contains(am244):\n\t    assert (3, 102) in am244\n\t    assert (102, 3) not in am244\n\tdef test_repr(am244):\n\t    assert '95-Am-244' in repr(am244)\n\t    assert 'ENDF/B' in repr(am244)\n\tdef test_interpret(am244):\n\t    am244_high_level = am244.interpret()\n", "    assert isinstance(am244_high_level, endf.IncidentNeutron)\n"]}
{"filename": "src/endf/mf40.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .mf33 import parse_mf33_subsection\n\tfrom .records import get_head_record, get_cont_record\n\tdef parse_mf40(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse covariances of radionuclide production from MF=40\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Radionuclide production covariance data\n\t    \"\"\"\n\t    ZA, AWR, LIS, _, NS, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LIS': LIS, 'NS': NS, 'subsections': []}\n\t    for _ in range(NS):\n\t        QM, QI, IZAP, LFS, _, NL = get_cont_record(file_obj)\n", "        subsection = {'QM': QM, 'QI': QI, 'IZAP': IZAP, 'LFS': LFS, 'NL': NL}\n\t        subsection['subsubsections'] = []\n\t        for _ in range(NL):\n\t            # Each sub-subsection has same format as in MF=33\n\t            subsubsection = parse_mf33_subsection(file_obj)\n\t            subsection['subsubsections'].append(subsubsection)\n\t        data['subsections'].append(subsection)\n\t    return data\n"]}
{"filename": "src/endf/mf4.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom __future__ import annotations\n\tfrom typing import TextIO\n\tfrom warnings import warn\n\timport numpy as np\n\tfrom numpy.polynomial import Legendre\n\tfrom .records import get_head_record, get_cont_record, get_tab2_record, \\\n\t    get_tab1_record, get_list_record\n\tdef parse_mf4(file_obj: TextIO) -> dict:\n", "    # Read first two records\n\t    ZA, AWR, LVT, LTT, _, _ = get_head_record(file_obj)\n\t    _, _, LI, LCT, NK, NM = get_cont_record(file_obj)\n\t    # initialize dictionary for angular distribution\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LTT': LTT, 'LI': LI, 'LCT': LCT}\n\t    # Check for obsolete energy transformation matrix. If present, just skip\n\t    # it and keep reading\n\t    if LVT > 0:\n\t        warn('Obsolete energy transformation matrix in MF=4 angular distribution.')\n\t        for _ in range((NK + 5)//6):\n", "            file_obj.readline()\n\t    def legendre_data(file_obj):\n\t        data = {}\n\t        params, data['E_int'] = get_tab2_record(file_obj)\n\t        n_energy = params[5]\n\t        energy = np.zeros(n_energy)\n\t        a_l = []\n\t        for i in range(n_energy):\n\t            items, al = get_list_record(file_obj)\n\t            data['T'] = items[0]\n", "            energy[i] = items[1]\n\t            data['LT'] = items[2]\n\t            coefficients = np.array(al)\n\t            a_l.append(coefficients)\n\t        data['a_l'] = a_l\n\t        data['E'] = energy\n\t        return data\n\t    def tabulated_data(file_obj):\n\t        data = {}\n\t        params, data['E_int'] = get_tab2_record(file_obj)\n", "        n_energy = params[5]\n\t        energy = np.zeros(n_energy)\n\t        mu = []\n\t        for i in range(n_energy):\n\t            params, f = get_tab1_record(file_obj)\n\t            data['T'] = params[0]\n\t            energy[i] = params[1]\n\t            data['LT'] = params[2]\n\t            mu.append(f)\n\t        data['E'] = energy\n", "        data['mu'] = mu\n\t        return data\n\t    if LTT == 0 and LI == 1:\n\t        # Purely isotropic\n\t        pass\n\t    elif LTT == 1 and LI == 0:\n\t        # Legendre polynomial coefficients\n\t        data['legendre'] = legendre_data(file_obj)\n\t    elif LTT == 2 and LI == 0:\n\t        # Tabulated probability distribution\n", "        data['tabulated'] = tabulated_data(file_obj)\n\t    elif LTT == 3 and LI == 0:\n\t        # Legendre for low energies / tabulated for high energies\n\t        data['legendre'] = legendre_data(file_obj)\n\t        data['tabulated'] = tabulated_data(file_obj)\n\t    return data\n\tclass AngleDistribution:\n\t    \"\"\"Angle distribution as a function of incoming energy\n\t    Parameters\n\t    ----------\n", "    energy\n\t        Incoming energies in eV at which distributions exist\n\t    mu\n\t        Distribution of scattering cosines corresponding to each incoming energy\n\t    Attributes\n\t    ----------\n\t    energy\n\t        Incoming energies in eV at which distributions exist\n\t    mu\n\t        Distribution of scattering cosines corresponding to each incoming energy\n", "    \"\"\"\n\t    def __init__(self, energy, mu):\n\t        self.energy = energy\n\t        self.mu = mu\n\t    @classmethod\n\t    def from_dict(cls, data: dict) -> AngleDistribution:\n\t        LTT = data['LTT']\n\t        LI = data['LI']\n\t        if LTT == 0 and LI == 1:\n\t            # Purely isotropic\n", "            # TODO: Use uniform here\n\t            energy = []\n\t            mu = []\n\t        elif LTT == 1 and LI == 0:\n\t            energy = data['legendre']['E']\n\t            mu = []\n\t            for a_l in data['legendre']['a_l']:\n\t                coef = np.insert(a_l, 0, 1.0)\n\t                mu.append(Legendre(coef))\n\t        elif LTT == 2 and LI == 0:\n", "            energy = data['tabulated']['E']\n\t            mu = data['tabulated']['mu']\n\t        elif LTT == 3 and LI == 0:\n\t            # Get Legendre first\n\t            energy_leg = data['legendre']['E']\n\t            mu_leg = []\n\t            for a_l in data['legendre']['a_l']:\n\t                coef = np.insert(a_l, 0, 1.0)\n\t                mu_leg.append(Legendre(coef))\n\t            # Then get tabulated\n", "            energy_tab = data['tabulated']['E']\n\t            mu_tab = data['tabulated']['mu']\n\t            # Combine\n\t            energy = np.hstack((energy_leg, energy_tab))\n\t            mu = mu_leg + mu_tab\n\t        return cls(energy, mu)\n"]}
{"filename": "src/endf/mf2.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_cont_record, get_tab1_record, \\\n\t    get_list_record\n\tdef parse_mf2(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse resonance parameters from MF=2, MT=151\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Resonance parameter data\n\t    \"\"\"\n\t    # Determine whether discrete or continuous representation\n\t    ZA, AWR, _, _, NIS, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NIS': NIS}\n", "    data['isotopes'] = []\n\t    for _ in range(NIS):\n\t        ZAI, ABN, _, LFW, NER, _ = get_cont_record(file_obj)\n\t        iso = {'ZAI': ZAI, 'ABN': ABN, 'LFW': LFW, 'NER': NER}\n\t        iso['ranges'] = []\n\t        for _ in range(NER):\n\t            EL, EH, LRU, LRF, NRO, NAPS = get_cont_record(file_obj)\n\t            rrange = {'EL': EL, 'EH': EH, 'LRU': LRU,\n\t                      'LRF': LRF, 'NRO': NRO, 'NAPS': NAPS}\n\t            if LRF == 0:\n", "                # Read spin and scattering radius\n\t                SPI, AP, _, _, NLS, _ = get_cont_record(file_obj)\n\t                rrange['SPI'] = SPI\n\t                rrange['AP'] = AP\n\t                rrange['NLS'] = NLS\n\t            elif LRU in (0, 1):\n\t                # resolved resonance region\n\t                rrange.update(_FORMALISMS[LRF].dict_from_endf(file_obj, NRO))\n\t            elif LRF == 2:\n\t                # unresolved resonance region\n", "                rrange.update(Unresolved.dict_from_endf(file_obj, LFW, LRF, NRO))\n\t            iso['ranges'].append(rrange)\n\t        data['isotopes'].append(iso)\n\t    return data\n\tclass MLBW:\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, NRO: int) -> dict:\n\t        # Read energy-dependent scattering radius if present\n\t        data = {}\n\t        if NRO != 0:\n", "            _, data['APE'] = get_tab1_record(file_obj)\n\t        # Other scatter radius parameters\n\t        SPI, AP, _, _, NLS, _ = get_cont_record(file_obj)\n\t        data['SPI'] = SPI\n\t        data['AP'] = AP\n\t        data['NLS'] = NLS\n\t        # Read resonance widths, J values, etc\n\t        data['sections'] = []\n\t        for l in range(NLS):\n\t            (AWRI, QX, L, LRX, _, NRS), values = get_list_record(file_obj)\n", "            section = {'AWRI': AWRI, 'QX': QX, 'L': L, 'LRX': LRX, 'NRS': NRS}\n\t            section['ER'] = values[0::6]\n\t            section['AJ'] = values[1::6]\n\t            section['GT'] = values[2::6]\n\t            section['GN'] = values[3::6]\n\t            section['GG'] = values[4::6]\n\t            section['GF'] = values[5::6]\n\t            data['sections'].append(section)\n\t        return data\n\tclass SLBW(MLBW):\n", "    ...\n\tclass ReichMoore:\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, NRO: int) -> dict:\n\t        # Read energy-dependent scattering radius if present\n\t        data = {}\n\t        if NRO != 0:\n\t            _, data['APE'] = get_tab1_record(file_obj)\n\t        # Other scatter radius parameters\n\t        SPI, AP, LAD, _, NLS, NLSC = get_cont_record(file_obj)\n", "        data['SPI'] = SPI\n\t        data['AP'] = AP\n\t        data['LAD'] = LAD\n\t        data['NLS'] = NLS\n\t        data['NLSC'] = NLSC\n\t        # Read resonance widths, J values, etc\n\t        data['sections'] = []\n\t        for l in range(NLS):\n\t            (AWRI, APL, L, _, _, NRS), values = get_list_record(file_obj)\n\t            section = {'AWRI': AWRI, 'APL': APL, 'L': L, 'NRS': NRS}\n", "            section['ER'] = values[0::6]\n\t            section['AJ'] = values[1::6]\n\t            section['GN'] = values[2::6]\n\t            section['GG'] = values[3::6]\n\t            section['GFA'] = values[4::6]\n\t            section['GFB'] = values[5::6]\n\t            data['sections'].append(section)\n\t        return data\n\tclass AdlerAdler:\n\t    @staticmethod\n", "    def dict_from_endf(file_obj: TextIO, NRO: int) -> dict:\n\t        raise NotImplementedError\n\tclass RMatrixLimited:\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, NRO: int) -> dict:\n\t        _, _, IFG, KRM, NJS, KRL = get_cont_record(file_obj)\n\t        data = {'IFG': IFG, 'KRM': KRM, 'NJS': NJS, 'KRL': KRL}\n\t        # Read particle-pair data\n\t        items, values = get_list_record(file_obj)\n\t        data['NPP'] = NPP = items[2]\n", "        data['particle_pairs'] = pp = {}\n\t        pp['MA'] = values[::12]\n\t        pp['MB'] = values[1::12]\n\t        pp['ZA'] = values[2::12]\n\t        pp['ZB'] = values[3::12]\n\t        pp['IA'] = values[4::12]\n\t        pp['IB'] = values[5::12]\n\t        pp['Q'] = values[6::12]\n\t        pp['PNT'] = values[7::12]\n\t        pp['SHF'] = values[8::12]\n", "        pp['MT'] = values[9::12]\n\t        pp['PA'] = values[10::12]\n\t        pp['PB'] = values[11::12]\n\t        # loop over spin groups\n\t        data['spin_groups'] = spin_groups = []\n\t        for i in range(NJS):\n\t            (AJ, PJ, KBK, KPS, _, NCH), values = get_list_record(file_obj)\n\t            spin_group = {'AJ': AJ, 'PJ': PJ, 'KBK': KBK, 'KPS': KPS, 'NCH': NCH}\n\t            spin_group['channels'] = channels = {}\n\t            channels['PPI'] = values[::6]\n", "            channels['L'] = values[1::6]\n\t            channels['SCH'] = values[2::6]\n\t            channels['BND'] = values[3::6]\n\t            channels['APE'] = values[4::6]\n\t            channels['APT'] = values[5::6]\n\t            # Read resonance energies and widths\n\t            (*_, NRS, _, NX), values = get_list_record(file_obj)\n\t            spin_group['NRS'] = NRS\n\t            spin_group['NX'] = NX\n\t            spin_group['ER'] = values[::NCH + 1]\n", "            # Read widths into a matrix and transpose\n\t            GAM = []\n\t            for j in range(NRS):\n\t                GAM.append(values[1 + (NCH + 1)*j:(NCH + 1)*(j + 1)])\n\t            GAM = np.array(GAM).reshape(NRS, NCH)\n\t            spin_group['GAM'] = GAM.T\n\t            # Optional extension (Background R-Matrix)\n\t            if KBK > 0:\n\t                (_, _, LCH, LBK, _, _), values = get_list_record(file_obj)\n\t                spin_group['LCH'] = LCH\n", "                spin_group['LBK'] = LBK\n\t                if LBK == 1:\n\t                    _, spin_group['RBR'] = get_tab1_record(file_obj)\n\t                    _, spin_group['RBI'] = get_tab1_record(file_obj)\n\t                elif LBK in (2, 3):\n\t                    (ED, EU, *_), values = get_list_record(file_obj)\n\t                    spin_group['ED'] = ED\n\t                    spin_group['EU'] = EU\n\t            # Optional extension (Tabulated phase shifts)\n\t            if KPS > 0:\n", "                items, values = get_list_record(file_obj)\n\t                spin_group['LPS'] = LPS = items[4]\n\t                if LPS == 1:\n\t                    _, spin_group['PSR'] = get_tab1_record(file_obj)\n\t                    _, spin_group['PSI'] = get_tab1_record(file_obj)\n\t            spin_groups.append(spin_group)\n\t        return data\n\tclass Unresolved:\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, LFW: int, LRF: int, NRO: int) -> dict:\n", "        # Read energy-dependent scattering radius if present\n\t        data = {}\n\t        if NRO != 0:\n\t            _, data['APE'] = get_tab1_record(file_obj)\n\t        # Get SPI, AP, and LSSF\n\t        if not (LFW == 1 and LRF == 1):\n\t            SPI, AP, LSSF, _, NLS, _ = get_cont_record(file_obj)\n\t            data.update({'SPI': SPI, 'AP': AP, 'LSSF': LSSF, 'NLS': NLS})\n\t        if LFW == 0 and LRF == 1:\n\t            # Case A -- fission widths not given, all parameters are\n", "            # energy-independent\n\t            data['ranges'] = []\n\t            for _ in range(NLS):\n\t                (AWRI, _, L, _, _, NJS), values = get_list_record(file_obj)\n\t                rrange = {'AWRI': AWRI, 'L': L, 'NJS': NJS}\n\t                rrange['D'] = values[::6]\n\t                rrange['AJ'] = values[1::6]\n\t                rrange['AMUN'] = values[2::6]\n\t                rrange['GNO'] = values[3::6]\n\t                rrange['GG'] = values[4::6]\n", "                data['ranges'].append(rrange)\n\t        elif LFW == 1 and LRF == 1:\n\t            # Case B -- fission widths given, only fission widths are\n\t            # energy-dependent\n\t            (SPI, AP, LSSF, _, NE, NLS), ES = get_list_record(file_obj)\n\t            data.update({'SPI': SPI, 'AP': AP, 'LSSF': LSSF,\n\t                         'NE': NE, 'NLS': NLS, 'ES': ES})\n\t            data['ranges'] = []\n\t            for _ in range(NLS):\n\t                AWRI, _, L, _, NJS, _ = get_cont_record(file_obj)\n", "                rrange = {'AWRI': AWRI, 'L': L, 'NJS': NJS}\n\t                rrange['parameters'] = []\n\t                for j in range(NJS):\n\t                    items, values = get_list_record(file_obj)\n\t                    rrange['parameters'].append({\n\t                        'MUF': items[3], 'D': values[0], 'AJ': values[1],\n\t                        'AMUN': values[2], 'GN0': values[3], 'GG': values[4],\n\t                        'GF': values[6:]\n\t                    })\n\t                data['ranges'].append(rrange)\n", "        elif LRF == 2:\n\t            # Case C -- all parameters are energy-dependent\n\t            data['ranges'] = []\n\t            for _ in range(NLS):\n\t                AWRI, _, L, _, NJS, _ = get_cont_record(file_obj)\n\t                rrange = {'AWRI': AWRI, 'L': L, 'NJS': NJS}\n\t                rrange['parameters'] = []\n\t                for _ in range(NJS):\n\t                    (AJ, _, INT, _, _, NE), values = get_list_record(file_obj)\n\t                    rrange['parameters'].append({\n", "                        'AJ': AJ, 'INT': INT, 'NE': NE,\n\t                        'AMUX': values[2],\n\t                        'AMUN': values[3],\n\t                        'AMUF': values[5],\n\t                        'E': values[6::6],\n\t                        'D': values[7::6],\n\t                        'GX': values[8::6],\n\t                        'GN0': values[9::6],\n\t                        'GG': values[10::6],\n\t                        'GF': values[11::6]\n", "                    })\n\t                data['ranges'].append(rrange)\n\t        return data\n\t_FORMALISMS = {\n\t    1: SLBW,\n\t    2: MLBW,\n\t    3: ReichMoore,\n\t    4: AdlerAdler,\n\t    7: RMatrixLimited\n\t}\n"]}
{"filename": "src/endf/incident_neutron.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom __future__ import annotations\n\tfrom typing import Union, List\n\timport numpy as np\n\tfrom .data import gnds_name, temperature_str, ATOMIC_SYMBOL, EV_PER_MEV\n\tfrom .material import Material\n\tfrom .fileutils import PathLike\n\tfrom .function import Tabulated1D\n\tfrom .reaction import Reaction, REACTION_MT\n", "from . import ace\n\tSUM_RULES = {\n\t    1: [2, 3],\n\t    3: [4, 5, 11, 16, 17, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35,\n\t        36, 37, 41, 42, 44, 45, 152, 153, 154, 156, 157, 158, 159, 160,\n\t        161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n\t        173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185,\n\t        186, 187, 188, 189, 190, 194, 195, 196, 198, 199, 200],\n\t    4: list(range(50, 92)),\n\t    16: list(range(875, 892)),\n", "    18: [19, 20, 21, 38],\n\t    27: [18, 101],\n\t    101: [102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,\n\t        115, 116, 117, 155, 182, 191, 192, 193, 197],\n\t    103: list(range(600, 650)),\n\t    104: list(range(650, 700)),\n\t    105: list(range(700, 750)),\n\t    106: list(range(750, 800)),\n\t    107: list(range(800, 850))\n\t}\n", "class IncidentNeutron:\n\t    \"\"\"Continuous-energy neutron interaction data.\n\t    This class stores data derived from an ENDF-6 format neutron interaction\n\t    sublibrary.\n\t    Parameters\n\t    ----------\n\t    atomic_number : int\n\t        Number of protons in the target nucleus\n\t    mass_number : int\n\t        Number of nucleons in the target nucleus\n", "    metastable : int\n\t        Metastable state of the target nucleus. A value of zero indicates the\n\t        ground state.\n\t    Attributes\n\t    ----------\n\t    atomic_number : int\n\t        Number of protons in the target nucleus\n\t    atomic_symbol : str\n\t        Atomic symbol of the nuclide, e.g., 'Zr'\n\t    mass_number : int\n", "        Number of nucleons in the target nucleus\n\t    metastable : int\n\t        Metastable state of the target nucleus. A value of zero indicates the\n\t        ground state.\n\t    name : str\n\t        Name of the nuclide using the GNDS naming convention\n\t    reactions : dict\n\t        Contains the cross sections, secondary angle and energy distributions,\n\t        and other associated data for each reaction. The keys are the MT values\n\t        and the values are Reaction objects.\n", "    \"\"\"\n\t    def __init__(self, atomic_number: int, mass_number: int, metastable: int = 0):\n\t        self.atomic_number = atomic_number\n\t        self.mass_number = mass_number\n\t        self.metastable = metastable\n\t        self.reactions = {}\n\t    @classmethod\n\t    def from_endf(cls, filename_or_mat: Union[PathLike, Material]) -> IncidentNeutron:\n\t        \"\"\"Generate incident neutron data from an ENDF file\n\t        Parameters\n", "        ----------\n\t        filename_or_mat\n\t            Path to ENDF-6 formatted file or material object\n\t        Returns\n\t        -------\n\t        Incident neutron data\n\t        \"\"\"\n\t        if not isinstance(filename_or_mat, Material):\n\t            material = Material(filename_or_mat)\n\t        else:\n", "            material = filename_or_mat\n\t        # Determine atomic number, mass number, and metastable state\n\t        metadata = material[1, 451]\n\t        Z, A = divmod(metadata['ZA'], 1000)\n\t        data = cls(Z, A, metadata['LISO'])\n\t        # Read each reaction\n\t        for MF, MT in material.sections:\n\t            if MF == 3:\n\t                data.reactions[MT] = Reaction.from_endf(MT, material)\n\t        return data\n", "    @classmethod\n\t    def from_ace(\n\t        cls,\n\t        filename_or_table: Union[PathLike, ace.Table],\n\t        metastable_scheme: str = 'mcnp'\n\t    ) -> IncidentNeutron:\n\t        \"\"\"Generate incident neutron continuous-energy data from an ACE table\n\t        Parameters\n\t        ----------\n\t        ace_or_filename\n", "            ACE table to read from. If the value is a string, it is assumed to\n\t            be the filename for the ACE file.\n\t        metastable_scheme : {'mcnp', 'nndc'}\n\t            Determine how ZAID identifiers are to be interpreted in the case of\n\t            a metastable nuclide. Because the normal ZAID (=1000*Z + A) does not\n\t            encode metastable information, different conventions are used among\n\t            different libraries. In MCNP libraries, the convention is to add 400\n\t            for a metastable nuclide except for Am242m, for which 95242 is\n\t            metastable and 95642 (or 1095242 in newer libraries) is the ground\n\t            state. For NNDC libraries, ZAID is given as 1000*Z + A + 100*m.\n", "        Returns\n\t        -------\n\t        Incident neutron continuous-energy data\n\t        \"\"\"\n\t        # First obtain the data for the first provided ACE table/file\n\t        if isinstance(filename_or_table, ace.Table):\n\t            table = filename_or_table\n\t        else:\n\t            table = ace.get_table(filename_or_table)\n\t        # If mass number hasn't been specified, make an educated guess\n", "        zaid, xs = table.name.split('.')\n\t        if not xs.endswith('c'):\n\t            raise TypeError(f\"{table} is not a continuous-energy neutron ACE table.\")\n\t        name, _, Z, mass_number, metastable = \\\n\t            ace.get_metadata(int(zaid), metastable_scheme)\n\t        # Get string of temperature to use as a dictionary key\n\t        strT = temperature_str(table.temperature)\n\t        # Create IncidentNeutron object (reactions will be added after)\n\t        data = cls(Z, mass_number, metastable)\n\t        # Read energy grid\n", "        n_energy = table.nxs[3]\n\t        i = table.jxs[1]\n\t        energy = table.xss[i : i + n_energy]*EV_PER_MEV\n\t        total_xs = table.xss[i + n_energy : i + 2*n_energy]\n\t        absorption_xs = table.xss[i + 2*n_energy : i + 3*n_energy]\n\t        heating_number = table.xss[i + 4*n_energy : i + 5*n_energy]*EV_PER_MEV\n\t        # Create redundant reaction for total (MT=1)\n\t        xs = {strT: Tabulated1D(energy, total_xs)}\n\t        data.reactions[1] = Reaction(1, xs, redundant=True)\n\t        # Create redundant reaction for absorption (MT=101)\n", "        if np.count_nonzero(absorption_xs) > 0:\n\t            xs = {strT: Tabulated1D(energy, absorption_xs)}\n\t            data.reactions[101] = Reaction(101, xs, redundant=True)\n\t        # Create redundant reaction for heating (MT=301)\n\t        xs = {strT: Tabulated1D(energy, heating_number*total_xs)}\n\t        data.reactions[301] = Reaction(301, xs, redundant=True)\n\t        # Read each reaction\n\t        n_reaction = table.nxs[4] + 1\n\t        for i in range(n_reaction):\n\t            rx = Reaction.from_ace(table, i)\n", "            data.reactions[rx.MT] = rx\n\t        # Make sure redundant cross sections that are present in an ACE file get\n\t        # marked as such\n\t        for rx in data:\n\t            mts = data._get_reaction_components(rx.MT)\n\t            if mts != [rx.MT]:\n\t                rx.redundant = True\n\t            if rx.MT in (203, 204, 205, 206, 207, 444):\n\t                rx.redundant = True\n\t        return data\n", "    def __contains__(self, MT: int):\n\t        return MT in self.reactions\n\t    def __getitem__(self, MT_or_name: int) -> Reaction:\n\t        if isinstance(MT_or_name, str):\n\t            if MT_or_name in REACTION_MT:\n\t                MT = REACTION_MT[MT_or_name]\n\t            elif f'({MT_or_name})' in REACTION_MT:\n\t                MT = REACTION_MT[f'({MT_or_name})']\n\t            else:\n\t                raise ValueError(f\"No reaction with label {MT_or_name}\")\n", "        else:\n\t            MT = MT_or_name\n\t        if MT in self.reactions:\n\t            return self.reactions[MT]\n\t        else:\n\t            # TODO: Try to create a redundant cross section\n\t            raise ValueError(f\"No reaction with {MT=}\")\n\t    def __repr__(self) -> str:\n\t        return f\"<IncidentNeutron: {self.name}, {len(self.reactions)} reactions>\"\n\t    def __iter__(self):\n", "        return iter(self.reactions.values())\n\t    @property\n\t    def name(self) -> str:\n\t        return gnds_name(self.atomic_number, self.mass_number, self.metastable)\n\t    @property\n\t    def atomic_symbol(self) -> str:\n\t        return ATOMIC_SYMBOL[self.atomic_number]\n\t    def _get_reaction_components(self, MT: int) -> List[int]:\n\t        \"\"\"Determine what reactions make up redundant reaction.\n\t        Parameters\n", "        ----------\n\t        mt : int\n\t            ENDF MT number of the reaction to find components of.\n\t        Returns\n\t        -------\n\t        mts : list of int\n\t            ENDF MT numbers of reactions that make up the redundant reaction and\n\t            have cross sections provided.\n\t        \"\"\"\n\t        mts = []\n", "        if MT in SUM_RULES:\n\t            for MT_i in SUM_RULES[MT]:\n\t                mts += self._get_reaction_components(MT_i)\n\t        if mts:\n\t            return mts\n\t        else:\n\t            return [MT] if MT in self else []\n"]}
{"filename": "src/endf/fileutils.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\timport os\n\tfrom typing import Union\n\t# Type for arguments that accept file paths\n\tPathLike = Union[str, bytes, os.PathLike]\n"]}
{"filename": "src/endf/mf14.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_cont_record, get_tab2_record, \\\n\t    get_list_record, get_tab1_record\n\tdef parse_mf14(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse photon angular distributions from MF=14\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Photon angular distribution data\n\t    \"\"\"\n\t    ZA, AWR, LI, LTT, NK, NI = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LI': LI, 'NK': NK}\n\t    # If all photons are isotropic, exit early\n", "    if LI == 1:\n\t        return data\n\t    data['LTT'] = LTT\n\t    data['NI'] = NI\n\t    data['subsections'] = []\n\t    # Subsections for isotropic photons\n\t    for i in range(NI):\n\t        EG, ES, *_ = get_cont_record(file_obj)\n\t        data['subsections'].append({'EG': EG, 'ES': ES})\n\t    # Subsections for anisotropic photons\n", "    for i in range(NI, NK):\n\t        (EG, ES, _, _, NR, NE), E_int = get_tab2_record(file_obj)\n\t        subsec = {'EG': EG, 'ES': ES, 'NE': NE, 'E_int': E_int}\n\t        subsec['E'] = np.empty(NE)\n\t        if LTT == 1:\n\t            # Legendre coefficient representation\n\t            subsec['NL'] = np.empty(NE)\n\t            subsec['a_lk'] = []\n\t            for i in range(NE):\n\t                (_, E, _, _, NL, _ ), a_lk = get_list_record(file_obj)\n", "                subsec['E'][i] = E\n\t                subsec['NL'][i] = NL\n\t                subsec['a_lk'].append(a_lk)\n\t        elif LTT == 2:\n\t            # Tabulated angular distribution\n\t            subsec['p_k'] = []\n\t            for i in range(NE):\n\t                (_, E, *_), p_k = get_tab1_record(file_obj)\n\t                subsec['E'][i] = E\n\t                subsec['p_k'].append(p_k)\n", "        data['subsections'].append(subsec)\n\t    return data\n"]}
{"filename": "src/endf/mf5.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom abc import ABC\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_tab1_record, get_tab2_record, get_head_record\n\tdef parse_mf5(file_obj: TextIO) -> dict:\n\t    ZA, AWR, _, _, NK, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NK': NK}\n\t    data['subsections'] = []\n", "    for _ in range(NK):\n\t        subsection = {}\n\t        params, applicability = get_tab1_record(file_obj)\n\t        subsection['LF'] = LF = params[3]\n\t        subsection['p'] = applicability\n\t        if LF == 1:\n\t            dist = ArbitraryTabulated.dict_from_endf(file_obj, params)\n\t        elif LF == 5:\n\t            dist = GeneralEvaporation.dict_from_endf(file_obj, params)\n\t        elif LF == 7:\n", "            dist = MaxwellEnergy.dict_from_endf(file_obj, params)\n\t        elif LF == 9:\n\t            dist = Evaporation.dict_from_endf(file_obj, params)\n\t        elif LF == 11:\n\t            dist = WattEnergy.dict_from_endf(file_obj, params)\n\t        elif LF == 12:\n\t            dist = MadlandNix.dict_from_endf(file_obj, params)\n\t        subsection['distribution'] = dist\n\t        data['subsections'].append(subsection)\n\t    return data\n", "class EnergyDistribution(ABC):\n\t    \"\"\"Abstract superclass for all energy distributions.\"\"\"\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def from_endf(file_obj: TextIO, params: list):\n\t        \"\"\"Generate energy distribution from MF=5 data\n\t        Parameters\n\t        ----------\n\t        file_obj : file-like object\n", "            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n\t            includes the LF value indicating what type of energy distribution is\n\t            present.\n\t        Returns\n\t        -------\n\t        A sub-class of :class:`EnergyDistribution`\n\t        \"\"\"\n", "        LF = params[3]\n\t        if LF == 1:\n\t            return ArbitraryTabulated.from_endf(file_obj, params)\n\t        elif LF == 5:\n\t            return GeneralEvaporation.from_endf(file_obj, params)\n\t        elif LF == 7:\n\t            return MaxwellEnergy.from_endf(file_obj, params)\n\t        elif LF == 9:\n\t            return Evaporation.from_endf(file_obj, params)\n\t        elif LF == 11:\n", "            return WattEnergy.from_endf(file_obj, params)\n\t        elif LF == 12:\n\t            return MadlandNix.from_endf(file_obj, params)\n\t    @staticmethod\n\t    def from_dict(subsection: dict):\n\t        LF = subsection['LF']\n\t        data = subsection['distribution']\n\t        if LF == 1:\n\t            return ArbitraryTabulated.from_dict(data)\n\t        elif LF == 5:\n", "            return GeneralEvaporation.from_dict(data)\n\t        elif LF == 7:\n\t            return MaxwellEnergy.from_dict(data)\n\t        elif LF == 9:\n\t            return Evaporation.from_dict(data)\n\t        elif LF == 11:\n\t            return WattEnergy.from_dict(data)\n\t        elif LF == 12:\n\t            return MadlandNix.from_dict(data)\n\tclass ArbitraryTabulated(EnergyDistribution):\n", "    r\"\"\"Arbitrary tabulated function given in ENDF MF=5, LF=1 represented as\n\t    .. math::\n\t         f(E \\rightarrow E') = g(E \\rightarrow E')\n\t    Parameters\n\t    ----------\n\t    energy : numpy.ndarray\n\t        Array of incident neutron energies\n\t    pdf : list of openmc.data.Tabulated1D\n\t        Tabulated outgoing energy distribution probability density functions\n\t    Attributes\n", "    ----------\n\t    energy : numpy.ndarray\n\t        Array of incident neutron energies\n\t    pdf : list of openmc.data.Tabulated1D\n\t        Tabulated outgoing energy distribution probability density functions\n\t    \"\"\"\n\t    def __init__(self, energy, pdf):\n\t        super().__init__()\n\t        self.energy = energy\n\t        self.pdf = pdf\n", "    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n\t        \"\"\"Parse arbitrary tabulated distribution (LF=1)\n\t        Parameters\n\t        ----------\n\t        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        Returns\n\t        -------\n", "        dict\n\t            Arbitrary tabulated distribution data\n\t        \"\"\"\n\t        data = {}\n\t        params, data['E_int'] = get_tab2_record(file_obj)\n\t        n_energies = params[5]\n\t        energy = np.zeros(n_energies)\n\t        pdf = []\n\t        for j in range(n_energies):\n\t            params, func = get_tab1_record(file_obj)\n", "            energy[j] = params[1]\n\t            pdf.append(func)\n\t        data['E'] = energy\n\t        data['g'] = pdf\n\t        return data\n\t    @classmethod\n\t    def from_endf(cls, file_obj: TextIO, params: list):\n\t        data = cls.dict_from_endf(file_obj, params)\n\t        return cls(data['E'], data['g'])\n\t    @classmethod\n", "    def from_dict(cls, data: dict):\n\t        return cls(data['E'], data['g'])\n\tclass GeneralEvaporation(EnergyDistribution):\n\t    r\"\"\"General evaporation spectrum given in ENDF MF=5, LF=5 represented as\n\t    .. math::\n\t        f(E \\rightarrow E') = g(E'/\\theta(E))\n\t    Parameters\n\t    ----------\n\t    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy :math:`E`\n", "    g : openmc.data.Tabulated1D\n\t        Tabulated function of :math:`x = E'/\\theta(E)`\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    Attributes\n\t    ----------\n\t    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy :math:`E`\n\t    g : openmc.data.Tabulated1D\n", "        Tabulated function of :math:`x = E'/\\theta(E)`\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    \"\"\"\n\t    def __init__(self, theta, g, u):\n\t        super().__init__()\n\t        self.theta = theta\n\t        self.g = g\n\t        self.u = u\n", "    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n\t        \"\"\"Parse general evaporation spectrum (MF=5)\n\t        Parameters\n\t        ----------\n\t        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n", "            includes the LF value indicating what type of energy distribution is\n\t            present.\n\t        Returns\n\t        -------\n\t        openmc.data.GeneralEvaporation\n\t            General evaporation spectrum\n\t        \"\"\"\n\t        _, theta = get_tab1_record(file_obj)\n\t        _, g = get_tab1_record(file_obj)\n\t        return {'U': params[0], 'theta': theta, 'g': g}\n", "    @classmethod\n\t    def from_endf(cls, file_obj: TextIO, params: list):\n\t        data = cls.dict_from_endf(file_obj, params)\n\t        return cls(data['theta'], data['g'], data['U'])\n\t    @classmethod\n\t    def from_dict(cls, data: dict):\n\t        return cls(data['theta'], data['g'], data['U'])\n\tclass MaxwellEnergy(EnergyDistribution):\n\t    r\"\"\"Simple Maxwellian fission spectrum represented as\n\t    .. math::\n", "        f(E \\rightarrow E') = \\frac{\\sqrt{E'}}{I} e^{-E'/\\theta(E)}\n\t    Parameters\n\t    ----------\n\t    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    Attributes\n\t    ----------\n", "    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    \"\"\"\n\t    def __init__(self, theta, u):\n\t        super().__init__()\n\t        self.theta = theta\n\t        self.u = u\n", "    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n\t        \"\"\"Parse Maxwellian fission spectrum (LF=7)\n\t        Parameters\n\t        ----------\n\t        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n", "            includes the LF value indicating what type of energy distribution is\n\t            present.\n\t        Returns\n\t        -------\n\t        dict\n\t            Maxwellian distribution data\n\t        \"\"\"\n\t        _, theta = get_tab1_record(file_obj)\n\t        return {'U': params[0], 'theta': theta}\n\t    @classmethod\n", "    def from_dict(cls, data: dict):\n\t        return cls(data['theta'], data['U'])\n\tclass Evaporation(EnergyDistribution):\n\t    r\"\"\"Evaporation spectrum represented as\n\t    .. math::\n\t        f(E \\rightarrow E') = \\frac{E'}{I} e^{-E'/\\theta(E)}\n\t    Parameters\n\t    ----------\n\t    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy\n", "    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    Attributes\n\t    ----------\n\t    theta : openmc.data.Tabulated1D\n\t        Tabulated function of incident neutron energy\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n", "    \"\"\"\n\t    def __init__(self, theta, u):\n\t        super().__init__()\n\t        self.theta = theta\n\t        self.u = u\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n\t        \"\"\"Parse evaporation spectrum (LF=9)\n\t        Parameters\n\t        ----------\n", "        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n\t            includes the LF value indicating what type of energy distribution is\n\t            present.\n\t        Returns\n\t        -------\n\t        data\n", "            Evaporation spectrum data\n\t        \"\"\"\n\t        _, theta = get_tab1_record(file_obj)\n\t        return {'U': params[0], 'theta': theta}\n\t    @classmethod\n\t    def from_endf(cls, file_obj: TextIO, params: list):\n\t        data = cls.dict_from_endf(file_obj, params)\n\t        return cls(data['theta'], data['U'])\n\t    @classmethod\n\t    def from_dict(cls, data: dict):\n", "        return cls(data['theta'], data['U'])\n\tclass WattEnergy(EnergyDistribution):\n\t    r\"\"\"Energy-dependent Watt spectrum represented as\n\t    .. math::\n\t        f(E \\rightarrow E') = \\frac{e^{-E'/a}}{I} \\sinh \\left ( \\sqrt{bE'}\n\t        \\right )\n\t    Parameters\n\t    ----------\n\t    a, b : openmc.data.Tabulated1D\n\t        Energy-dependent parameters tabulated as function of incident neutron\n", "        energy\n\t    u : float\n\t        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    Attributes\n\t    ----------\n\t    a, b : openmc.data.Tabulated1D\n\t        Energy-dependent parameters tabulated as function of incident neutron\n\t        energy\n\t    u : float\n", "        Constant introduced to define the proper upper limit for the final\n\t        particle energy such that :math:`0 \\le E' \\le E - U`\n\t    \"\"\"\n\t    def __init__(self, a, b, u):\n\t        super().__init__()\n\t        self.a = a\n\t        self.b = b\n\t        self.u = u\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n", "        \"\"\"Parse energy-dependent Watt spectrum (MF=11)\n\t        Parameters\n\t        ----------\n\t        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n\t            includes the LF value indicating what type of energy distribution is\n\t            present.\n", "        Returns\n\t        -------\n\t        data\n\t            Watt fission spectrum data\n\t        \"\"\"\n\t        _, a = get_tab1_record(file_obj)\n\t        _, b = get_tab1_record(file_obj)\n\t        return {'U': params[0], 'a': a, 'b': b}\n\t    @classmethod\n\t    def from_endf(cls, file_obj: TextIO, params: list):\n", "        data = cls.dict_from_endf(file_obj, params)\n\t        return cls(data['a'], data['b'], data['U'])\n\t    @classmethod\n\t    def from_dict(cls, data: dict):\n\t        return cls(data['a'], data['b'], data['U'])\n\tclass MadlandNix(EnergyDistribution):\n\t    r\"\"\"Energy-dependent fission neutron spectrum (Madland and Nix) given in\n\t    ENDF MF=5, LF=12 represented as\n\t    .. math::\n\t        f(E \\rightarrow E') = \\frac{1}{2} [ g(E', E_F(L)) + g(E', E_F(H))]\n", "    where\n\t    .. math::\n\t        g(E',E_F) = \\frac{1}{3\\sqrt{E_F T_M}} \\left [ u_2^{3/2} E_1 (u_2) -\n\t        u_1^{3/2} E_1 (u_1) + \\gamma \\left ( \\frac{3}{2}, u_2 \\right ) - \\gamma\n\t        \\left ( \\frac{3}{2}, u_1 \\right ) \\right ] \\\\ u_1 = \\left ( \\sqrt{E'} -\n\t        \\sqrt{E_F} \\right )^2 / T_M \\\\ u_2 = \\left ( \\sqrt{E'} + \\sqrt{E_F}\n\t        \\right )^2 / T_M.\n\t    Parameters\n\t    ----------\n\t    efl, efh : float\n", "        Constants which represent the average kinetic energy per nucleon of the\n\t        fission fragment (efl = light, efh = heavy)\n\t    tm : openmc.data.Tabulated1D\n\t        Parameter tabulated as a function of incident neutron energy\n\t    Attributes\n\t    ----------\n\t    efl, efh : float\n\t        Constants which represent the average kinetic energy per nucleon of the\n\t        fission fragment (efl = light, efh = heavy)\n\t    tm : openmc.data.Tabulated1D\n", "        Parameter tabulated as a function of incident neutron energy\n\t    \"\"\"\n\t    def __init__(self, efl, efh, tm):\n\t        super().__init__()\n\t        self.efl = efl\n\t        self.efh = efh\n\t        self.tm = tm\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO, params: list) -> dict:\n\t        \"\"\"Parse Madland-Nix fission spectrum (LF=12)\n", "        Parameters\n\t        ----------\n\t        file_obj : file-like object\n\t            ENDF file positioned at the start of a section for an energy\n\t            distribution.\n\t        params : list\n\t            List of parameters at the start of the energy distribution that\n\t            includes the LF value indicating what type of energy distribution is\n\t            present.\n\t        Returns\n", "        -------\n\t        data\n\t            Madland-Nix fission spectrum data\n\t        \"\"\"\n\t        _, T_M = get_tab1_record(file_obj)\n\t        return {'EFL': params[0], 'EFH': params[1], 'T_M': T_M}\n\t    @classmethod\n\t    def from_endf(cls, file_obj: TextIO, params: list):\n\t        data = cls.dict_from_endf(file_obj, params)\n\t        return cls(data['EFL'], data['EFH'], data['T_M'])\n", "    @classmethod\n\t    def from_dict(cls, data: dict):\n\t        return cls(data['EFL'], data['EFH'], data['T_M'])\n\tclass LevelInelastic:\n\t    r\"\"\"Level inelastic scattering\n\t    Parameters\n\t    ----------\n\t    threshold : float\n\t        Energy threshold in the laboratory system, :math:`(A + 1)/A * |Q|`\n\t    mass_ratio : float\n", "        :math:`(A/(A + 1))^2`\n\t    Attributes\n\t    ----------\n\t    threshold : float\n\t        Energy threshold in the laboratory system, :math:`(A + 1)/A * |Q|`\n\t    mass_ratio : float\n\t        :math:`(A/(A + 1))^2`\n\t    \"\"\"\n\t    def __init__(self, threshold, mass_ratio):\n\t        self.threshold = threshold\n", "        self.mass_ratio = mass_ratio\n"]}
{"filename": "src/endf/mf3.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf3(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse reaction cross sections from MF=3\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Cross section data\n\t    \"\"\"\n\t    ZA, AWR, *_ = get_head_record(file_obj)\n\t    params, xs = get_tab1_record(file_obj)\n\t    return {\n\t        'ZA': ZA,\n\t        'AWR': AWR,\n", "        'QM': params[0],\n\t        'QI': params[1],\n\t        'LR': params[3],\n\t        'sigma': xs\n\t    }\n"]}
{"filename": "src/endf/mf15.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_tab1_record, get_tab2_record\n\tdef parse_mf15(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse continuous photon energy spectra from MF=15\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Continuous photon energy spectra data\n\t    \"\"\"\n\t    ZA, AWR, _, _, NC, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NC': NC}\n\t    data['subsections'] = []\n\t    for j in range(NC):\n", "        # Read probability for j-th partial distribution\n\t        params, p = get_tab1_record(file_obj)\n\t        LF = params[3]\n\t        subsec = {'LF': LF, 'p': p}\n\t        # Read tabulated distributions\n\t        (*_, NE), subsec['E_int'] = get_tab2_record(file_obj)\n\t        subsec['NE'] = NE\n\t        subsec['E'] = np.empty(NE)\n\t        subsec['g'] = []\n\t        for i in range(NE):\n", "            (_, E, _, _), g = get_tab1_record(file_obj)\n\t            subsec['E'][i] = E\n\t            subsec['g'].append(g)\n\t        data['subsections'].append(subsec)\n\t    return data\n"]}
{"filename": "src/endf/mf6.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_tab2_record, get_list_record, get_head_record, \\\n\t    get_tab1_record, get_cont_record\n\tdef parse_mf6(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse product energy-angle distributions from MF=6\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Product energy-angle distribution data\n\t    \"\"\"\n\t    # Read HEAD record\n\t    ZA, AWR, JP, LCT, NK, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'JP': JP, 'LCT': LCT, 'NK': NK}\n", "    data['products'] = products = []\n\t    for i in range(NK):\n\t        # Get yield for this product\n\t        (ZAP, AWP, LIP, LAW), y_i = get_tab1_record(file_obj)\n\t        ZAP = int(ZAP)\n\t        p = {'ZAP': ZAP, 'AWP': AWP, 'LIP': LIP, 'LAW': LAW, 'y_i': y_i}\n\t        if LAW < 0:\n\t            # Distribution given elsewhere\n\t            pass\n\t        elif LAW == 0:\n", "            # No distribution given\n\t            pass\n\t        elif LAW == 1:\n\t            # Continuum energy-angle distribution\n\t            p['distribution'] = ContinuumEnergyAngle.dict_from_endf(file_obj)\n\t        elif LAW == 2:\n\t            # Discrete two-body scattering\n\t            p['distribution'] = DiscreteTwoBodyScattering.dict_from_endf(file_obj)\n\t        elif LAW == 3:\n\t            # Isotropic discrete emission\n", "            pass\n\t        elif LAW == 4:\n\t            # Discrete two-body recoil\n\t            pass\n\t        elif LAW == 5:\n\t            # Charged particle elastic scattering\n\t            p['distribution'] = ChargedParticleElasticScattering.dict_from_endf(file_obj)\n\t        elif LAW == 6:\n\t            # N-body phase-space distribution\n\t            p['distribution'] = NBodyPhaseSpace.dict_from_endf(file_obj)\n", "        elif LAW == 7:\n\t            # Laboratory energy-angle distribution\n\t            p['distribution'] = LaboratoryAngleEnergy.dict_from_endf(file_obj)\n\t        products.append(p)\n\t    return data\n\tclass ContinuumEnergyAngle:\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO) -> dict:\n", "        params, E_int = get_tab2_record(file_obj)\n\t        _, _, LANG, LEP, NR, NE = params\n\t        data = {'LANG': LANG, 'LEP': LEP, 'NR': NR, 'NE': NE, 'E_int': E_int}\n\t        data['E'] = np.zeros(NE)\n\t        data['distribution'] = []\n\t        for i in range(NE):\n\t            items, values = get_list_record(file_obj)\n\t            _, E_i, ND, NA, NW, NEP = items\n\t            dist = {'ND': ND, 'NA': NA, 'NW': NW, 'NEP': NEP}\n\t            data['E'][i] = E_i\n", "            values = np.asarray(values)\n\t            values.shape = (NEP, NA + 2)\n\t            dist[\"E'\"] = values[:, 0]\n\t            dist['b'] = values[:, 1:]\n\t            data['distribution'].append(dist)\n\t        return data\n\tclass UncorrelatedAngleEnergy:\n\t    def __init__(self):\n\t        pass\n\tclass DiscreteTwoBodyScattering:\n", "    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO) -> dict:\n\t        params, E_int = get_tab2_record(file_obj)\n\t        *_, NR, NE = params\n\t        data = {'NR': NR, 'NE': NE, 'E_int': E_int}\n\t        data['E'] = np.zeros(NE)\n\t        data['distribution'] = []\n\t        for i in range(NE):\n", "            items, values = get_list_record(file_obj)\n\t            _, E_i, LANG, _, NW, NL = items\n\t            dist = {'LANG': LANG, 'NW': NW, 'NL': NL}\n\t            data['E'][i] = E_i\n\t            data['A_l'] = np.asarray(values)\n\t            data['distribution'].append(dist)\n\tclass ChargedParticleElasticScattering:\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n", "    def dict_from_endf(file_obj: TextIO) -> dict:\n\t        (SPI, _, LIDP, _, NR, NE), E_int = get_tab2_record(file_obj)\n\t        data = {'SPI': SPI, 'LIDP': LIDP, 'NE': NE, 'E_int': E_int}\n\t        # Read distribution data for each incident energy\n\t        data['distribution'] = []\n\t        for _ in range(NE):\n\t            (_, E, LTP, _, NW, NL), A = get_list_record(file_obj)\n\t            dist = {'E': E, 'LTP': LTP, 'NW': NW, 'NL': NL, 'A': A}\n\t            data['distribution'].append(dist)\n\t        return data\n", "class NBodyPhaseSpace:\n\t    def __init__(self):\n\t        pass\n\t    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO) -> dict:\n\t        APSX, *_, NPSX = get_cont_record(file_obj)\n\t        return {'APSX': APSX, 'NPSX': NPSX}\n\tclass LaboratoryAngleEnergy:\n\t    def __init__(self):\n\t        pass\n", "    @staticmethod\n\t    def dict_from_endf(file_obj: TextIO) -> dict:\n\t        # Read top-level TAB2 record\n\t        (*_, NR, NE), E_int = get_tab2_record(file_obj)\n\t        data = {'NE': NE, 'E_int': E_int}\n\t        data['distribution'] = []\n\t        for _ in range(NE):\n\t            # Read TAB2 record for the i-th incident energy\n\t            (_, E, _, _, NRM, NMU), mu_int = get_tab2_record(file_obj)\n\t            dist = {'E': E, 'NRM': NRM, 'NMU': NMU, 'mu_int': mu_int}\n", "            dist['mu'] = []\n\t            for _ in range(NMU):\n\t                # Read TAB1 record for the j-th outgoing cosine\n\t                (_, mu, *_), f = get_tab1_record(file_obj)\n\t                dist['mu'].append({'mu': mu, 'f': f})\n\t            data['distribution'].append(dist)\n\t        return data\n"]}
{"filename": "src/endf/reaction.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 OpenMC contributors and Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom __future__ import annotations\n\tfrom copy import deepcopy\n\tfrom typing import List, Tuple\n\tfrom warnings import warn\n\timport numpy as np\n\tfrom numpy.polynomial import Polynomial\n\tfrom .data import gnds_name, temperature_str, ATOMIC_SYMBOL, EV_PER_MEV\n\tfrom .material import Material\n", "from .function import Tabulated1D\n\tfrom .mf4 import AngleDistribution\n\tfrom .mf5 import EnergyDistribution, LevelInelastic\n\tfrom .mf6 import UncorrelatedAngleEnergy\n\tfrom .product import Product\n\tfrom . import ace\n\tREACTION_NAME = {\n\t    1: '(n,total)', 2: '(n,elastic)', 4: '(n,level)',\n\t    5: '(n,misc)', 11: '(n,2nd)', 16: '(n,2n)', 17: '(n,3n)',\n\t    18: '(n,fission)', 19: '(n,f)', 20: '(n,nf)', 21: '(n,2nf)',\n", "    22: '(n,na)', 23: '(n,n3a)', 24: '(n,2na)', 25: '(n,3na)',\n\t    27: '(n,absorption)', 28: '(n,np)', 29: '(n,n2a)',\n\t    30: '(n,2n2a)', 32: '(n,nd)', 33: '(n,nt)', 34: '(n,n3He)',\n\t    35: '(n,nd2a)', 36: '(n,nt2a)', 37: '(n,4n)', 38: '(n,3nf)',\n\t    41: '(n,2np)', 42: '(n,3np)', 44: '(n,n2p)', 45: '(n,npa)',\n\t    91: '(n,nc)', 101: '(n,disappear)', 102: '(n,gamma)',\n\t    103: '(n,p)', 104: '(n,d)', 105: '(n,t)', 106: '(n,3He)',\n\t    107: '(n,a)', 108: '(n,2a)', 109: '(n,3a)', 111: '(n,2p)',\n\t    112: '(n,pa)', 113: '(n,t2a)', 114: '(n,d2a)', 115: '(n,pd)',\n\t    116: '(n,pt)', 117: '(n,da)', 152: '(n,5n)', 153: '(n,6n)',\n", "    154: '(n,2nt)', 155: '(n,ta)', 156: '(n,4np)', 157: '(n,3nd)',\n\t    158: '(n,nda)', 159: '(n,2npa)', 160: '(n,7n)', 161: '(n,8n)',\n\t    162: '(n,5np)', 163: '(n,6np)', 164: '(n,7np)', 165: '(n,4na)',\n\t    166: '(n,5na)', 167: '(n,6na)', 168: '(n,7na)', 169: '(n,4nd)',\n\t    170: '(n,5nd)', 171: '(n,6nd)', 172: '(n,3nt)', 173: '(n,4nt)',\n\t    174: '(n,5nt)', 175: '(n,6nt)', 176: '(n,2n3He)',\n\t    177: '(n,3n3He)', 178: '(n,4n3He)', 179: '(n,3n2p)',\n\t    180: '(n,3n2a)', 181: '(n,3npa)', 182: '(n,dt)',\n\t    183: '(n,npd)', 184: '(n,npt)', 185: '(n,ndt)',\n\t    186: '(n,np3He)', 187: '(n,nd3He)', 188: '(n,nt3He)',\n", "    189: '(n,nta)', 190: '(n,2n2p)', 191: '(n,p3He)',\n\t    192: '(n,d3He)', 193: '(n,3Hea)', 194: '(n,4n2p)',\n\t    195: '(n,4n2a)', 196: '(n,4npa)', 197: '(n,3p)',\n\t    198: '(n,n3p)', 199: '(n,3n2pa)', 200: '(n,5n2p)', 203: '(n,Xp)',\n\t    204: '(n,Xd)', 205: '(n,Xt)', 206: '(n,X3He)', 207: '(n,Xa)',\n\t    301: 'heating', 444: 'damage-energy',\n\t    649: '(n,pc)', 699: '(n,dc)', 749: '(n,tc)', 799: '(n,3Hec)',\n\t    849: '(n,ac)', 891: '(n,2nc)'\n\t}\n\tREACTION_NAME.update({i: f'(n,n{i - 50})' for i in range(51, 91)})\n", "REACTION_NAME.update({i: f'(n,p{i - 600})' for i in range(600, 649)})\n\tREACTION_NAME.update({i: f'(n,d{i - 650})' for i in range(650, 699)})\n\tREACTION_NAME.update({i: f'(n,t{i - 700})' for i in range(700, 749)})\n\tREACTION_NAME.update({i: f'(n,3He{i - 750})' for i in range(750, 799)})\n\tREACTION_NAME.update({i: f'(n,a{i - 800})' for i in range(800, 849)})\n\tREACTION_NAME.update({i: f'(n,2n{i - 875})' for i in range(875, 891)})\n\tREACTION_MT = {name: mt for mt, name in REACTION_NAME.items()}\n\tREACTION_MT['total'] = 1\n\tREACTION_MT['elastic'] = 2\n\tREACTION_MT['fission'] = 18\n", "REACTION_MT['absorption'] = 27\n\tREACTION_MT['capture'] = 102\n\tFISSION_MTS = (18, 19, 20, 21, 38)\n\tdef _get_products(material: Material, MT: int) -> List[Product]:\n\t    \"\"\"Generate products from MF=6 in an ENDF evaluation\n\t    Parameters\n\t    ----------\n\t    material\n\t        ENDF material to read from\n\t    MT\n", "        The MT value of the reaction to get products for\n\t    Returns\n\t    -------\n\t    Products of the reaction\n\t    \"\"\"\n\t    product_data = material[6, MT]\n\t    products = []\n\t    for data in product_data['products']:\n\t        # Determine name of particle\n\t        ZA = data['ZAP']\n", "        if ZA == 0:\n\t            name = 'photon'\n\t        elif ZA == 1:\n\t            name = 'neutron'\n\t        elif ZA == 1000:\n\t            name = 'electron'\n\t        else:\n\t            Z, A = divmod(ZA, 1000)\n\t            name = gnds_name(Z, A)\n\t        y_i = data['y_i']\n", "        # TODO: Read distributions\n\t        LAW = data['LAW']\n\t        products.append(Product(name, y_i))\n\t    return products\n\tdef _get_fission_products_endf(material: Material, MT: int) -> Tuple[List[Product], List[Product]]:\n\t    \"\"\"Generate fission products from an ENDF evaluation\n\t    Parameters\n\t    ----------\n\t    ev : openmc.data.endf.Evaluation\n\t    Returns\n", "    -------\n\t    products : list of openmc.data.Product\n\t        Prompt and delayed fission neutrons\n\t    derived_products : list of openmc.data.Product\n\t        \"Total\" fission neutron\n\t    \"\"\"\n\t    products = []\n\t    derived_products = []\n\t    if (1, 456) in material:\n\t        # Prompt nu values\n", "        data = material[1, 456]\n\t        LNU = data['LNU']\n\t        if LNU == 1:\n\t            # Polynomial representation\n\t            yield_ = Polynomial(data['C'])\n\t        elif LNU == 2:\n\t            # Tabulated representation\n\t            yield_ = data['nu']\n\t        prompt_neutron = Product('neutron', yield_=yield_)\n\t        products.append(prompt_neutron)\n", "    if (1, 452) in material:\n\t        # Total nu values\n\t        data = material[1, 452]\n\t        if data['LNU'] == 1:\n\t            # Polynomial representation\n\t            yield_ = Polynomial(data['C'])\n\t        elif data['LNU'] == 2:\n\t            # Tabulated representation\n\t            yield_ = data['nu']\n\t        total_neutron = Product('neutron', yield_=yield_)\n", "        total_neutron.emission_mode = 'total'\n\t        if (1, 456) in material:\n\t            derived_products.append(total_neutron)\n\t        else:\n\t            products.append(total_neutron)\n\t    if (1, 455) in material:\n\t        data = material[1, 455]\n\t        if data['LDG'] == 0:\n\t            # Delayed-group constants energy independent\n\t            decay_constants = data['lambda']\n", "            for constant in data['lambda']:\n\t                delayed_neutron = Product('neutron')\n\t                delayed_neutron.emission_mode = 'delayed'\n\t                delayed_neutron.decay_rate = constant\n\t                products.append(delayed_neutron)\n\t        elif data['LDG'] == 1:\n\t            # Delayed-group constants energy dependent\n\t            raise NotImplementedError('Delayed neutron with energy-dependent '\n\t                                      'group constants.')\n\t        # In MF=1, MT=455, the delayed-group abundances are actually not\n", "        # specified if the group constants are energy-independent. In this case,\n\t        # the abundances must be inferred from MF=5, MT=455 where multiple\n\t        # energy distributions are given.\n\t        if data['LNU'] == 1:\n\t            # Nu represented as polynomial\n\t            for neutron in products[-6:]:\n\t                neutron.yield_ = Polynomial(data['C'])\n\t        elif data['LNU'] == 2:\n\t            # Nu represented by tabulation\n\t            for neutron in products[-6:]:\n", "                neutron.yield_ = deepcopy(data['nu'])\n\t        if (5, 455) in material:\n\t            mf5_data = material[5, 455]\n\t            NK = mf5_data['NK']\n\t            if NK > 1 and len(decay_constants) == 1:\n\t                # If only one precursor group is listed in MF=1, MT=455, use the\n\t                # energy spectra from MF=5 to split them into different groups\n\t                for _ in range(NK - 1):\n\t                    products.append(deepcopy(products[1]))\n\t            elif NK != len(decay_constants):\n", "                raise ValueError(\n\t                    'Number of delayed neutron fission spectra ({}) does not '\n\t                    'match number of delayed neutron precursors ({}).'.format(\n\t                        NK, len(decay_constants)))\n\t            for i, subsection in enumerate(mf5_data['subsections']):\n\t                dist = UncorrelatedAngleEnergy()\n\t                dist.energy = EnergyDistribution.from_dict(subsection)\n\t                delayed_neutron = products[1 + i]\n\t                yield_ = delayed_neutron.yield_\n\t                # Here we handle the fact that the delayed neutron yield is the\n", "                # product of the total delayed neutron yield and the\n\t                # \"applicability\" of the energy distribution law in file 5.\n\t                applicability = subsection['p']\n\t                if isinstance(yield_, Tabulated1D):\n\t                    if np.all(applicability.y == applicability.y[0]):\n\t                        yield_.y *= applicability.y[0]\n\t                    else:\n\t                        # Get union energy grid and ensure energies are within\n\t                        # interpolable range of both functions\n\t                        max_energy = min(yield_.x[-1], applicability.x[-1])\n", "                        energy = np.union1d(yield_.x, applicability.x)\n\t                        energy = energy[energy <= max_energy]\n\t                        # Calculate group yield\n\t                        group_yield = yield_(energy) * applicability(energy)\n\t                        delayed_neutron.yield_ = Tabulated1D(energy, group_yield)\n\t                elif isinstance(yield_, Polynomial):\n\t                    if len(yield_) == 1:\n\t                        delayed_neutron.yield_ = deepcopy(applicability)\n\t                        delayed_neutron.yield_.y *= yield_.coef[0]\n\t                    else:\n", "                        if np.all(applicability.y == applicability.y[0]):\n\t                            yield_.coef[0] *= applicability.y[0]\n\t                        else:\n\t                            raise NotImplementedError(\n\t                                'Total delayed neutron yield and delayed group '\n\t                                'probability are both energy-dependent.')\n\t                delayed_neutron.distribution.append(dist)\n\t    return products, derived_products\n\tdef _get_activation_products(material: Material, MT: int, xs: Tabulated1D) -> List[Product]:\n\t    \"\"\"Generate activation products from an ENDF evaluation\n", "    Parameters\n\t    ----------\n\t    material\n\t        ENDF material to read from\n\t    MT\n\t        The MT value of the reaction to get products for\n\t    xs\n\t        Cross section for the reaction\n\t    Returns\n\t    -------\n", "    Activation products\n\t    \"\"\"\n\t    # Determine if file 9/10 are present\n\t    data = material[8, MT]\n\t    present = {9: False, 10: False}\n\t    for subsection in data['subsections']:\n\t        if subsection['LMF'] == 9:\n\t            present[9] = True\n\t        elif subsection['LMF'] == 10:\n\t            present[10] = True\n", "    products = []\n\t    for MF in (9, 10):\n\t        if not present[MF]:\n\t            continue\n\t        data = material[MF, MT]\n\t        for level in data['levels']:\n\t            # Determine what the product is\n\t            Z, A = divmod(level['IZAP'], 1000)\n\t            excited_state = level['LFS']\n\t            # Get GNDS name for product\n", "            symbol = ATOMIC_SYMBOL[Z]\n\t            if excited_state > 0:\n\t                name = f'{symbol}{A}_e{excited_state}'\n\t            else:\n\t                name = f'{symbol}{A}'\n\t            if MF == 9:\n\t                yield_ = level['Y']\n\t            else:\n\t                # Re-interpolate production cross section and neutron cross\n\t                # section to union energy grid\n", "                production_xs = level['sigma']\n\t                energy = np.union1d(production_xs.x, xs.x)\n\t                prod_xs = production_xs(energy)\n\t                neutron_xs = xs(energy)\n\t                idx = np.where(neutron_xs > 0)\n\t                # Calculate yield as ratio\n\t                yield_ = np.zeros_like(energy)\n\t                yield_[idx] = prod_xs[idx] / neutron_xs[idx]\n\t                yield_ = Tabulated1D(energy, yield_)\n\t            p = Product(name, yield_)\n", "            products.append(p)\n\t    return products\n\tclass Reaction:\n\t    \"\"\"A nuclear reaction\n\t    This class represents a single reaction channel for a nuclide with\n\t    an associated cross section and, if present, a secondary angle and energy\n\t    distribution.\n\t    Parameters\n\t    ----------\n\t    mt : int\n", "        The ENDF MT number for this reaction.\n\t    xs : dict\n\t        Microscopic cross section for this reaction as a function of incident\n\t        energy; these cross sections are provided in a dictionary where the key\n\t        is the temperature of the cross section set.\n\t    products : list\n\t        Reaction products\n\t    q_reaction : float\n\t        The reaction Q-value in [eV].\n\t    q_massdiff : float\n", "        The mass-difference Q value in [eV].\n\t    redundant : bool\n\t        Indicates whether or not this is a redundant reaction\n\t    Attributes\n\t    ----------\n\t    MT : int\n\t        The ENDF MT number for this reaction.\n\t    products : list\n\t        Reaction products\n\t    q_reaction : float\n", "        The reaction Q-value in [eV].\n\t    q_massdiff : float\n\t        The mass-difference Q value in [eV].\n\t    redundant : bool\n\t        Indicates whether or not this is a redundant reaction\n\t    xs : dict\n\t        Microscopic cross section for this reaction as a function of incident\n\t        energy; these cross sections are provided in a dictionary where the key\n\t        is the temperature of the cross section set.\n\t    \"\"\"\n", "    def __init__(self, MT: int, xs: dict = None, products: List[Product] = None,\n\t                 q_reaction: float = 0.0, q_massdiff: float = 0.0,\n\t                 redundant: bool = False):\n\t        self.MT = MT\n\t        self.xs = xs\n\t        self.products = products\n\t        self.q_reaction = q_reaction\n\t        self.q_massdiff = q_massdiff\n\t        self.redundant = redundant\n\t    @classmethod\n", "    def from_endf(cls, MT: int, material: Material) -> Reaction:\n\t        \"\"\"Generate reaction from ENDF file\n\t        Parameters\n\t        ----------\n\t        MT\n\t            MT value of the reaction\n\t        material\n\t            ENDF\n\t        \"\"\"\n\t        # Get reaction cross section and Q values from MF=3\n", "        rx = material[3, MT]\n\t        q_massdiff = rx['QM']\n\t        q_reaction = rx['QI']\n\t        # TODO: Do something with breakup reaction flag\n\t        xs = {'0K': rx['sigma']}\n\t        # Get fission product yields (nu) as well as delayed neutron energy\n\t        # distributions\n\t        products = []\n\t        if MT in FISSION_MTS:\n\t            products, derived_products = _get_fission_products_endf(material, MT)\n", "            # TODO: Store derived products somewhere\n\t        if (6, MT) in material:\n\t            # Product angle-energy distribution\n\t            for product in _get_products(material, MT):\n\t                # If fission neutrons were already added from MF=1 data, copy\n\t                # the distribution to the existing products. Otherwise, add the\n\t                # product to the reaction.\n\t                if MT in FISSION_MTS and product.name == 'neutron':\n\t                    products[0].applicability = product.applicability\n\t                    products[0].distribution = product.distribution\n", "                else:\n\t                    products.append(product)\n\t        elif (4, MT) in material or (5, MT) in material:\n\t            # Uncorrelated angle-energy distribution\n\t            neutron = Product('neutron')\n\t            # Note that the energy distribution for MT=455 is read in\n\t            # _get_fission_products_endf rather than here\n\t            if (5, MT) in material:\n\t                data = material[5, MT]\n\t                for subsection in data['subsections']:\n", "                    dist = UncorrelatedAngleEnergy()\n\t                    dist.energy = EnergyDistribution.from_dict(subsection)\n\t                    neutron.applicability.append(subsection['p'])\n\t                    neutron.distribution.append(dist)\n\t            elif MT == 2:\n\t                # Elastic scattering -- no energy distribution is given since it\n\t                # can be calulcated analytically\n\t                dist = UncorrelatedAngleEnergy()\n\t                neutron.distribution.append(dist)\n\t            elif MT >= 51 and MT < 91:\n", "                # Level inelastic scattering -- no energy distribution is given\n\t                # since it can be calculated analytically. Here we determine the\n\t                # necessary parameters to create a LevelInelastic object\n\t                dist = UncorrelatedAngleEnergy()\n\t                A = material[1, 451]['AWR']\n\t                threshold = (A + 1.)/A*abs(q_reaction)\n\t                mass_ratio = (A/(A + 1.))**2\n\t                dist.energy = LevelInelastic(threshold, mass_ratio)\n\t                neutron.distribution.append(dist)\n\t            if (4, MT) in material:\n", "                data = material[4, MT]\n\t                for dist in neutron.distribution:\n\t                    dist.angle = AngleDistribution.from_dict(data)\n\t            if MT in FISSION_MTS and (5, MT) in material:\n\t                # For fission reactions,\n\t                products[0].applicability = neutron.applicability\n\t                products[0].distribution = neutron.distribution\n\t            else:\n\t                products.append(neutron)\n\t        if (8, MT) in material:\n", "            for act_product in _get_activation_products(material, MT, rx['sigma']):\n\t                # Check if product already exists from MF=6 and if it does, just\n\t                # overwrite the existing yield.\n\t                for product in products:\n\t                    if act_product.name == product.name:\n\t                        product.yield_ = act_product.yield_\n\t                        break\n\t                else:\n\t                    products.append(act_product)\n\t        return cls(MT, xs, products, q_reaction, q_massdiff)\n", "    @classmethod\n\t    def from_ace(cls, table: ace.Table, i_reaction: int):\n\t        \"\"\"Generate incident neutron continuous-energy data from an ACE table\n\t        Parameters\n\t        ----------\n\t        table\n\t            ACE table to read from\n\t        i_reaction\n\t            Index of the reaction in the ACE table\n\t        Returns\n", "        -------\n\t        Reaction data\n\t        \"\"\"\n\t        # Get nuclide energy grid\n\t        n_grid = table.nxs[3]\n\t        grid = table.xss[table.jxs[1]:table.jxs[1] + n_grid]*EV_PER_MEV\n\t        # Convert temperature to a string for indexing data\n\t        strT = temperature_str(table.temperature)\n\t        if i_reaction > 0:\n\t            # Get MT value\n", "            MT = int(table.xss[table.jxs[3] + i_reaction - 1])\n\t            # Get Q-value of reaction\n\t            q_reaction = table.xss[table.jxs[4] + i_reaction - 1]*EV_PER_MEV\n\t            # ==================================================================\n\t            # CROSS SECTION\n\t            # Get locator for cross-section data\n\t            loc = int(table.xss[table.jxs[6] + i_reaction - 1])\n\t            # Determine starting index on energy grid\n\t            threshold_idx = int(table.xss[table.jxs[7] + loc - 1]) - 1\n\t            # Determine number of energies in reaction\n", "            n_energy = int(table.xss[table.jxs[7] + loc])\n\t            energy = grid[threshold_idx:threshold_idx + n_energy]\n\t            # Read reaction cross section\n\t            xs = table.xss[table.jxs[7] + loc + 1:table.jxs[7] + loc + 1 + n_energy]\n\t            # For damage energy production, convert to eV\n\t            if MT == 444:\n\t                xs *= EV_PER_MEV\n\t            # Warn about negative cross sections\n\t            if np.any(xs < 0.0):\n\t                warn(f\"Negative cross sections found for {MT=} in {table.name}.\")\n", "            tabulated_xs = {strT: Tabulated1D(energy, xs)}\n\t            rx = Reaction(MT, tabulated_xs, q_reaction=q_reaction)\n\t            # ==================================================================\n\t            # YIELD AND ANGLE-ENERGY DISTRIBUTION\n\t            # TODO: Read yield and angle-energy distribution\n\t        else:\n\t            # Elastic scattering\n\t            mt = 2\n\t            # Get elastic cross section values\n\t            elastic_xs = table.xss[table.jxs[1] + 3*n_grid:table.jxs[1] + 4*n_grid]\n", "            # Warn about negative elastic scattering cross section\n\t            if np.any(elastic_xs < 0.0):\n\t                warn(f\"Negative elastic scattering cross section found for {table.name}.\")\n\t            xs = {strT: Tabulated1D(grid, elastic_xs)}\n\t            # No energy distribution for elastic scattering\n\t            # TODO: Create product\n\t            rx = Reaction(2, xs)\n\t        # ======================================================================\n\t        # ANGLE DISTRIBUTION (FOR UNCORRELATED)\n\t        # TODO: Read angular distribution\n", "        # ======================================================================\n\t        # PHOTON PRODUCTION\n\t        # TODO: Read photon production\n\t        return rx\n\t    def __repr__(self):\n\t        name = REACTION_NAME.get(self.MT)\n\t        if name is not None:\n\t            return f\"<Reaction: MT={self.MT} {name}>\"\n\t        else:\n\t            return f\"<Reaction: MT={self.MT}>\"\n"]}
{"filename": "src/endf/mf8.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_list_record, get_tab1_record, get_cont_record\n\tdef parse_mf8(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse radioactive nuclide production data from MF=8\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Radioactive nuclide production data\n\t    \"\"\"\n\t    ZA, AWR, LIS, LISO, NS, NO = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LIS': LIS, 'LISO': LISO, 'NS': NS, 'NO': NO}\n\t    data['subsections'] = []\n\t    for _ in range(NS):\n", "        if NO == 0:\n\t            (ZAP, ELFS, LMF, LFS, _, _), values = get_list_record(file_obj)\n\t            ND = len(values) // 6\n\t            subsection = {'ZAP': ZAP, 'ELFS': ELFS, 'LMF': LMF, 'LFS': LFS, 'ND': ND}\n\t            subsection['HL'] = values[::6]\n\t            subsection['RTYP'] = values[1::6]\n\t            subsection['ZAN'] = values[2::6]\n\t            subsection['BR'] = values[3::6]\n\t            subsection['END'] = values[4::6]\n\t            subsection['CT'] = values[5::6]\n", "        elif NO == 1:\n\t            ZAP, ELFS, LMF, LFS, _, _ = get_cont_record(file_obj)\n\t            subsection = {'ZAP': ZAP, 'ELFS': ELFS, 'LMF': LMF, 'LFS': LFS}\n\t        data['subsections'].append(subsection)\n\t    return data\n\tdef parse_mf8_mt454(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse fission product yield data from MF=8, MT=454 / MT=459\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Fission product yield data\n\t    \"\"\"\n\t    # Determine number of energies\n\t    items = get_head_record(file_obj)\n\t    data = {'ZA': items[0], 'AWR': items[1], 'LE': items[2] - 1}\n\t    data['yields'] = []\n", "    for i in range(data['LE'] + 1):\n\t        # Determine i-th energy and number of products\n\t        (E, _, I, _, NN, NFP), values = get_list_record(file_obj)\n\t        yield_data = {'E': E, 'NN': NN, 'NFP': NFP}\n\t        yield_data['LE' if i == 0 else 'I'] = I\n\t        # Get yields for i-th energy\n\t        yield_data['products'] = products = []\n\t        for j in range(NFP):\n\t            ZAFP = values[4*j]\n\t            FPS = values[4*j + 1]\n", "            Y = (values[4*j + 2], values[4*j + 3])\n\t            products.append({'ZAFP': ZAFP, 'FPS': FPS, 'Y': Y})\n\t        data['yields'].append(yield_data)\n\t    return data\n\tdef parse_mf8_mt457(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse radioactive decay data from MF=8, MT=457\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Radioactive decay data\n\t    \"\"\"\n\t    # Get head record\n\t    ZA, AWR, LIS, LISO, NST, NSP = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LIS': LIS, 'LISO': LISO, 'NST': NST, 'NSP': NSP}\n\t    # Check if nuclide is stable\n\t    if NST == 1:\n", "        get_list_record(file_obj)\n\t        (SPI, PAR, *_), values = get_list_record(file_obj)\n\t        data['SPI'] = SPI\n\t        data['PAR'] = PAR\n\t        return data\n\t    # Half-life and decay energies\n\t    items, values = get_list_record(file_obj)\n\t    data['T1/2'] = (items[0], items[1])\n\t    data['NC'] = NC = items[4]//2\n\t    data['Ex'] = list(zip(values[::2], values[1::2]))\n", "    items, values = get_list_record(file_obj)\n\t    data['SPI'], data['PAR'], *_ = items\n\t    # Decay mode information\n\t    data['NDK'] = NDK = items[5]  # Number of decay modes\n\t    data['modes'] = []\n\t    for i in range(NDK):\n\t        RTYP = values[6*i]\n\t        RFS = values[6*i + 1]\n\t        Q = tuple(values[6*i + 2:6*i + 4])\n\t        BR = tuple(values[6*i + 4:6*(i + 1)])\n", "        mode = {'RTYP': RTYP, 'RFS': RFS, 'Q': Q, 'BR': BR}\n\t        data['modes'].append(mode)\n\t    # Read spectra\n\t    data['spectra'] = []\n\t    for i in range(NSP):\n\t        items, values = get_list_record(file_obj)\n\t        _, STYP, LCON, LCOV, _, NER = items\n\t        spectrum = {'STYP': STYP, 'LCON': LCON, 'LCOV': LCOV, 'NER': NER}\n\t        # Decay radiation type\n\t        spectrum['FD'] = tuple(values[0:2])\n", "        spectrum['ER_AV'] = tuple(values[2:4])\n\t        spectrum['FC'] = tuple(values[4:6])\n\t        if LCON != 1:\n\t            # Information about discrete spectrum\n\t            spectrum['discrete'] = []\n\t            for j in range(NER):\n\t                items, values = get_list_record(file_obj)\n\t                discrete = {}\n\t                discrete['ER'] = tuple(items[0:2])\n\t                discrete['RTYP'] = values[0]\n", "                discrete['TYPE'] = values[1]\n\t                if STYP == 0:\n\t                    discrete['RI'] = tuple(values[2:4])\n\t                    discrete['RIS'] = tuple(values[4:6])\n\t                    discrete['RICC'] = tuple(values[6:8])\n\t                    discrete['RICK'] = tuple(values[8:10])\n\t                    discrete['RICL'] = tuple(values[10:12])\n\t                spectrum['discrete'].append(discrete)\n\t        if LCON != 0:\n\t            # Read continuous spectrum\n", "            params, RP = get_tab1_record(file_obj)\n\t            spectrum['continuous'] = {'RTYP': params[0], 'RP': RP}\n\t        # Read continuous covariance (Ek, Fk) table\n\t        if LCOV not in (0, 2) and LCON != 0:\n\t            items, values = get_list_record(file_obj)\n\t            covar_continuous = {'LB': items[3]}\n\t            covar_continuous['Ek'] = np.array(values[::2])\n\t            covar_continuous['Fk'] = np.array(values[1::2])\n\t            spectrum['continuous_covariance'] = covar_continuous\n\t        if LCOV not in (0, 1):\n", "            (_, _, LS, LB, NE, NERP), values = get_list_record(file_obj)\n\t            covar_discrete = {'LS': LS, 'LB': LB, 'NE': NE, 'NERP': NERP}\n\t            covar_discrete['Ek'] = np.array(values[:NERP])\n\t            covar_discrete['Fkk'] = np.array(values[NERP:])\n\t            # TODO: Reorder and shape Fkk based on the packing order described\n\t            # in section 8.4 of the ENDF manual\n\t            spectrum['discrete_covariance'] = covar_discrete\n\t        # Add spectrum to list\n\t        data['spectra'].append(spectrum)\n\t    return data\n"]}
{"filename": "src/endf/mf23.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf23(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse photon cross sections from MF=23\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Photon cross section data\n\t    \"\"\"\n\t    ZA, AWR, *_ = get_head_record(file_obj)\n\t    params, xs = get_tab1_record(file_obj)\n\t    return {\n\t        'ZA': ZA,\n\t        'AWR': AWR,\n", "        'EPE': params[0],\n\t        'EFL': params[1],\n\t        'sigma': xs\n\t    }\n"]}
{"filename": "src/endf/records.py", "chunked_list": ["import re\n\tfrom typing import TextIO, Tuple\n\timport numpy as np\n\tfrom .function import Tabulated1D, Tabulated2D\n\tfrom ._records import float_endf\n\tENDF_FLOAT_RE = re.compile(r'([\\s\\-\\+]?\\d*\\.\\d+)([\\+\\-]) ?(\\d+)')\n\tdef py_float_endf(s: str) -> float:\n\t    \"\"\"Convert string of floating point number in ENDF to float.\n\t    The ENDF-6 format uses an 'e-less' floating point number format,\n\t    e.g. -1.23481+10. Trying to convert using the float built-in won't work\n", "    because of the lack of an 'e'. This function allows such strings to be\n\t    converted while still allowing numbers that are not in exponential notation\n\t    to be converted as well.\n\t    Parameters\n\t    ----------\n\t    s : str\n\t        Floating-point number from an ENDF file\n\t    Returns\n\t    -------\n\t    float\n", "        The number\n\t    \"\"\"\n\t    return float(ENDF_FLOAT_RE.sub(r'\\1e\\2\\3', s))\n\tdef int_endf(s: str) -> int:\n\t    \"\"\"Convert string of integer number in ENDF to int.\n\t    The ENDF-6 format technically allows integers to be represented by a field\n\t    of all blanks. This function acts like int(s) except when s is a string of\n\t    all whitespace, in which case zero is returned.\n\t    Parameters\n\t    ----------\n", "    s : str\n\t        Integer or spaces\n\t    Returns\n\t    -------\n\t    integer\n\t        The number or 0\n\t    \"\"\"\n\t    return 0 if s.isspace() else int(s)\n\tdef get_text_record(file_obj) -> str:\n\t    \"\"\"Return data from a TEXT record in an ENDF-6 file.\n", "    Parameters\n\t    ----------\n\t    file_obj : file-like object\n\t        ENDF-6 file to read from\n\t    Returns\n\t    -------\n\t    str\n\t        Text within the TEXT record\n\t    \"\"\"\n\t    return file_obj.readline()[:66]\n", "def get_cont_record(file_obj, skip_c=False):\n\t    \"\"\"Return data from a CONT record in an ENDF-6 file.\n\t    Parameters\n\t    ----------\n\t    file_obj : file-like object\n\t        ENDF-6 file to read from\n\t    skip_c : bool\n\t        Determine whether to skip the first two quantities (C1, C2) of the CONT\n\t        record.\n\t    Returns\n", "    -------\n\t    tuple\n\t        The six items within the CONT record\n\t    \"\"\"\n\t    line = file_obj.readline()\n\t    if skip_c:\n\t        C1 = None\n\t        C2 = None\n\t    else:\n\t        C1 = float_endf(line[:11])\n", "        C2 = float_endf(line[11:22])\n\t    L1 = int_endf(line[22:33])\n\t    L2 = int_endf(line[33:44])\n\t    N1 = int_endf(line[44:55])\n\t    N2 = int_endf(line[55:66])\n\t    return (C1, C2, L1, L2, N1, N2)\n\tdef get_head_record(file_obj):\n\t    \"\"\"Return data from a HEAD record in an ENDF-6 file.\n\t    Parameters\n\t    ----------\n", "    file_obj : file-like object\n\t        ENDF-6 file to read from\n\t    Returns\n\t    -------\n\t    tuple\n\t        The six items within the HEAD record\n\t    \"\"\"\n\t    line = file_obj.readline()\n\t    ZA = int(float_endf(line[:11]))\n\t    AWR = float_endf(line[11:22])\n", "    L1 = int_endf(line[22:33])\n\t    L2 = int_endf(line[33:44])\n\t    N1 = int_endf(line[44:55])\n\t    N2 = int_endf(line[55:66])\n\t    return (ZA, AWR, L1, L2, N1, N2)\n\tdef get_list_record(file_obj: TextIO) -> Tuple[list, np.ndarray]:\n\t    \"\"\"Return data from a LIST record in an ENDF-6 file.\n\t    Parameters\n\t    ----------\n\t    file_obj : file-like object\n", "        ENDF-6 file to read from\n\t    Returns\n\t    -------\n\t    list\n\t        The six items within the header\n\t    numpy.ndarray\n\t        The values within the list\n\t    \"\"\"\n\t    # determine how many items are in list\n\t    items = get_cont_record(file_obj)\n", "    NPL = items[4]\n\t    # read items\n\t    b = np.empty(NPL)\n\t    for i in range((NPL - 1)//6 + 1):\n\t        line = file_obj.readline()\n\t        n = min(6, NPL - 6*i)\n\t        for j in range(n):\n\t            b[6*i + j] = float_endf(line[11*j:11*(j + 1)])\n\t    return (items, b)\n\tdef get_tab1_record(file_obj):\n", "    \"\"\"Return data from a TAB1 record in an ENDF-6 file.\n\t    Parameters\n\t    ----------\n\t    file_obj : file-like object\n\t        ENDF-6 file to read from\n\t    Returns\n\t    -------\n\t    list\n\t        The six items within the header\n\t    openmc.data.Tabulated1D\n", "        The tabulated function\n\t    \"\"\"\n\t    # Determine how many interpolation regions and total points there are\n\t    line = file_obj.readline()\n\t    C1 = float_endf(line[:11])\n\t    C2 = float_endf(line[11:22])\n\t    L1 = int_endf(line[22:33])\n\t    L2 = int_endf(line[33:44])\n\t    n_regions = int_endf(line[44:55])\n\t    n_pairs = int_endf(line[55:66])\n", "    params = [C1, C2, L1, L2]\n\t    # Read the interpolation region data, namely NBT and INT\n\t    breakpoints = np.zeros(n_regions, dtype=int)\n\t    interpolation = np.zeros(n_regions, dtype=int)\n\t    m = 0\n\t    for i in range((n_regions - 1)//3 + 1):\n\t        line = file_obj.readline()\n\t        to_read = min(3, n_regions - m)\n\t        for j in range(to_read):\n\t            breakpoints[m] = int_endf(line[0:11])\n", "            interpolation[m] = int_endf(line[11:22])\n\t            line = line[22:]\n\t            m += 1\n\t    # Read tabulated pairs x(n) and y(n)\n\t    x = np.zeros(n_pairs)\n\t    y = np.zeros(n_pairs)\n\t    m = 0\n\t    for i in range((n_pairs - 1)//3 + 1):\n\t        line = file_obj.readline()\n\t        to_read = min(3, n_pairs - m)\n", "        for j in range(to_read):\n\t            x[m] = float_endf(line[:11])\n\t            y[m] = float_endf(line[11:22])\n\t            line = line[22:]\n\t            m += 1\n\t    return params, Tabulated1D(x, y, breakpoints, interpolation)\n\tdef get_tab2_record(file_obj):\n\t    # Determine how many interpolation regions and total points there are\n\t    params = get_cont_record(file_obj)\n\t    n_regions = params[4]\n", "    # Read the interpolation region data, namely NBT and INT\n\t    breakpoints = np.zeros(n_regions, dtype=int)\n\t    interpolation = np.zeros(n_regions, dtype=int)\n\t    m = 0\n\t    for _ in range((n_regions - 1)//3 + 1):\n\t        line = file_obj.readline()\n\t        to_read = min(3, n_regions - m)\n\t        for _ in range(to_read):\n\t            breakpoints[m] = int(line[0:11])\n\t            interpolation[m] = int(line[11:22])\n", "            line = line[22:]\n\t            m += 1\n\t    return params, Tabulated2D(breakpoints, interpolation)\n\tdef get_intg_record(file_obj):\n\t    \"\"\"\n\t    Return data from an INTG record in an ENDF-6 file. Used to store the\n\t    covariance matrix in a compact format.\n\t    Parameters\n\t    ----------\n\t    file_obj : file-like object\n", "        ENDF-6 file to read from\n\t    Returns\n\t    -------\n\t    numpy.ndarray\n\t        The correlation matrix described in the INTG record\n\t    \"\"\"\n\t    # determine how many items are in list and NDIGIT\n\t    items = get_cont_record(file_obj)\n\t    ndigit = items[2]\n\t    npar = items[3]    # Number of parameters\n", "    nlines = items[4]  # Lines to read\n\t    NROW_RULES = {2: 18, 3: 12, 4: 11, 5: 9, 6: 8}\n\t    nrow = NROW_RULES[ndigit]\n\t    # read lines and build correlation matrix\n\t    corr = np.identity(npar)\n\t    for i in range(nlines):\n\t        line = file_obj.readline()\n\t        ii = int_endf(line[:5]) - 1  # -1 to account for 0 indexing\n\t        jj = int_endf(line[5:10]) - 1\n\t        factor = 10**ndigit\n", "        for j in range(nrow):\n\t            if jj+j >= ii:\n\t                break\n\t            element = int_endf(line[11+(ndigit+1)*j:11+(ndigit+1)*(j+1)])\n\t            if element > 0:\n\t                corr[ii, jj] = (element+0.5)/factor\n\t            elif element < 0:\n\t                corr[ii, jj] = (element-0.5)/factor\n\t    # Symmetrize the correlation matrix\n\t    corr = corr + corr.T - np.diag(corr.diagonal())\n", "    return corr\n"]}
{"filename": "src/endf/mf28.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_list_record\n\tdef parse_mf28(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse atomic relaxation data from MF=27\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Atomic relaxation data\n\t    \"\"\"\n\t    ZA, AWR, _, _, NSS, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NSS': NSS, 'shells': []}\n\t    for _ in range(NSS):\n\t        # Read LIST record for each shell\n\t        (SUBI, _, _, _, NW, NTR), values = get_list_record(file_obj)\n", "        shell = {'SUBI': SUBI, 'NTR': NTR}\n\t        shell['EBI'] = values[0]\n\t        shell['ELN'] = values[1]\n\t        shell['SUBJ'] = values[6::6]\n\t        shell['SUBK'] = values[7::6]\n\t        shell['ETR'] = values[8::6]\n\t        shell['FTR'] = values[9::6]\n\t        data['shells'].append(shell)\n\t    return data\n"]}
{"filename": "src/endf/mf13.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf13(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse photon production cross sections from MF=13\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Photon production cross section data\n\t    \"\"\"\n\t    ZA, AWR, _, _, NK, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NK': NK}\n\t    # Read total photon production\n\t    if NK > 1:\n\t        _, data['sigma_total'] = get_tab1_record(file_obj)\n", "    # Read production cross sections for each photon\n\t    data['photons'] = []\n\t    for k in range(NK):\n\t        (EG, ES, LP, LF), sigma = get_tab1_record(file_obj)\n\t        photon = {'EG': EG, 'ES': ES, 'LP': LP, 'LF': LF, 'sigma': sigma}\n\t        data['photons'].append(photon)\n\t    return data\n"]}
{"filename": "src/endf/mf27.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf27(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse atomic form factors / scattering functions from MF=27\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Atomic form factor or scattering function data\n\t    \"\"\"\n\t    ZA, AWR, *_ = get_head_record(file_obj)\n\t    params, H = get_tab1_record(file_obj)\n\t    return {'ZA': ZA, 'AWR': AWR, 'Z': params[1], 'H': H}\n"]}
{"filename": "src/endf/function.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 OpenMC contributors and Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom collections.abc import Iterable\n\tfrom math import exp, log\n\timport numpy as np\n\tfrom .data import EV_PER_MEV\n\tclass Tabulated1D:\n\t    \"\"\"A one-dimensional tabulated function.\n\t    This class mirrors the TAB1 type from the ENDF-6 format. A tabulated\n\t    function is specified by tabulated (x,y) pairs along with interpolation\n", "    rules that determine the values between tabulated pairs.\n\t    Once an object has been created, it can be used as though it were an actual\n\t    function, e.g.:\n\t    >>> f = Tabulated1D([0, 10], [4, 5])\n\t    >>> [f(xi) for xi in numpy.linspace(0, 10, 5)]\n\t    [4.0, 4.25, 4.5, 4.75, 5.0]\n\t    Parameters\n\t    ----------\n\t    x : Iterable of float\n\t        Independent variable\n", "    y : Iterable of float\n\t        Dependent variable\n\t    breakpoints : Iterable of int\n\t        Breakpoints for interpolation regions\n\t    interpolation : Iterable of int\n\t        Interpolation scheme identification number, e.g., 3 means y is linear in\n\t        ln(x).\n\t    Attributes\n\t    ----------\n\t    x : Iterable of float\n", "        Independent variable\n\t    y : Iterable of float\n\t        Dependent variable\n\t    breakpoints : Iterable of int\n\t        Breakpoints for interpolation regions\n\t    interpolation : Iterable of int\n\t        Interpolation scheme identification number, e.g., 3 means y is linear in\n\t        ln(x).\n\t    n_regions : int\n\t        Number of interpolation regions\n", "    n_pairs : int\n\t        Number of tabulated (x,y) pairs\n\t    \"\"\"\n\t    def __init__(self, x, y, breakpoints=None, interpolation=None):\n\t        if breakpoints is None or interpolation is None:\n\t            # Single linear-linear interpolation region by default\n\t            self.breakpoints = np.array([len(x)])\n\t            self.interpolation = np.array([2])\n\t        else:\n\t            self.breakpoints = np.asarray(breakpoints, dtype=int)\n", "            self.interpolation = np.asarray(interpolation, dtype=int)\n\t        self.x = np.asarray(x)\n\t        self.y = np.asarray(y)\n\t    def __repr__(self):\n\t        return f\"<Tabulated1D: {self.x.size} points, {self.breakpoints.size} regions>\"\n\t    def __call__(self, x):\n\t        # Check if input is scalar\n\t        if not isinstance(x, Iterable):\n\t            return self._interpolate_scalar(x)\n\t        x = np.array(x)\n", "        # Create output array\n\t        y = np.zeros_like(x)\n\t        # Get indices for interpolation\n\t        idx = np.searchsorted(self.x, x, side='right') - 1\n\t        # Loop over interpolation regions\n\t        for k in range(len(self.breakpoints)):\n\t            # Get indices for the begining and ending of this region\n\t            i_begin = self.breakpoints[k-1] - 1 if k > 0 else 0\n\t            i_end = self.breakpoints[k] - 1\n\t            # Figure out which idx values lie within this region\n", "            contained = (idx >= i_begin) & (idx < i_end)\n\t            xk = x[contained]                 # x values in this region\n\t            xi = self.x[idx[contained]]       # low edge of corresponding bins\n\t            xi1 = self.x[idx[contained] + 1]  # high edge of corresponding bins\n\t            yi = self.y[idx[contained]]\n\t            yi1 = self.y[idx[contained] + 1]\n\t            if self.interpolation[k] == 1:\n\t                # Histogram\n\t                y[contained] = yi\n\t            elif self.interpolation[k] == 2:\n", "                # Linear-linear\n\t                y[contained] = yi + (xk - xi)/(xi1 - xi)*(yi1 - yi)\n\t            elif self.interpolation[k] == 3:\n\t                # Linear-log\n\t                y[contained] = yi + np.log(xk/xi)/np.log(xi1/xi)*(yi1 - yi)\n\t            elif self.interpolation[k] == 4:\n\t                # Log-linear\n\t                y[contained] = yi*np.exp((xk - xi)/(xi1 - xi)*np.log(yi1/yi))\n\t            elif self.interpolation[k] == 5:\n\t                # Log-log\n", "                y[contained] = (yi*np.exp(np.log(xk/xi)/np.log(xi1/xi)\n\t                                *np.log(yi1/yi)))\n\t        # In some cases, x values might be outside the tabulated region due only\n\t        # to precision, so we check if they're close and set them equal if so.\n\t        y[np.isclose(x, self.x[0], atol=1e-14)] = self.y[0]\n\t        y[np.isclose(x, self.x[-1], atol=1e-14)] = self.y[-1]\n\t        return y\n\t    def _interpolate_scalar(self, x):\n\t        if x <= self._x[0]:\n\t            return self._y[0]\n", "        elif x >= self._x[-1]:\n\t            return self._y[-1]\n\t        # Get the index for interpolation\n\t        idx = np.searchsorted(self._x, x, side='right') - 1\n\t        # Loop over interpolation regions\n\t        for b, p in zip(self.breakpoints, self.interpolation):\n\t            if idx < b - 1:\n\t                break\n\t        xi = self._x[idx]       # low edge of the corresponding bin\n\t        xi1 = self._x[idx + 1]  # high edge of the corresponding bin\n", "        yi = self._y[idx]\n\t        yi1 = self._y[idx + 1]\n\t        if p == 1:\n\t            # Histogram\n\t            return yi\n\t        elif p == 2:\n\t            # Linear-linear\n\t            return yi + (x - xi)/(xi1 - xi)*(yi1 - yi)\n\t        elif p == 3:\n\t            # Linear-log\n", "            return yi + log(x/xi)/log(xi1/xi)*(yi1 - yi)\n\t        elif p == 4:\n\t            # Log-linear\n\t            return yi*exp((x - xi)/(xi1 - xi)*log(yi1/yi))\n\t        elif p == 5:\n\t            # Log-log\n\t            return yi*exp(log(x/xi)/log(xi1/xi)*log(yi1/yi))\n\t    def __len__(self):\n\t        return len(self.x)\n\t    @property\n", "    def x(self):\n\t        return self._x\n\t    @property\n\t    def y(self):\n\t        return self._y\n\t    @property\n\t    def breakpoints(self):\n\t        return self._breakpoints\n\t    @property\n\t    def interpolation(self):\n", "        return self._interpolation\n\t    @property\n\t    def n_pairs(self):\n\t        return len(self.x)\n\t    @property\n\t    def n_regions(self):\n\t        return len(self.breakpoints)\n\t    @x.setter\n\t    def x(self, x):\n\t        self._x = x\n", "    @y.setter\n\t    def y(self, y):\n\t        self._y = y\n\t    @breakpoints.setter\n\t    def breakpoints(self, breakpoints):\n\t        self._breakpoints = breakpoints\n\t    @interpolation.setter\n\t    def interpolation(self, interpolation):\n\t        self._interpolation = interpolation\n\t    def integral(self):\n", "        \"\"\"Integral of the tabulated function over its tabulated range.\n\t        Returns\n\t        -------\n\t        numpy.ndarray\n\t            Array of same length as the tabulated data that represents partial\n\t            integrals from the bottom of the range to each tabulated point.\n\t        \"\"\"\n\t        # Create output array\n\t        partial_sum = np.zeros(len(self.x) - 1)\n\t        i_low = 0\n", "        for k in range(len(self.breakpoints)):\n\t            # Determine which x values are within this interpolation range\n\t            i_high = self.breakpoints[k] - 1\n\t            # Get x values and bounding (x,y) pairs\n\t            x0 = self.x[i_low:i_high]\n\t            x1 = self.x[i_low + 1:i_high + 1]\n\t            y0 = self.y[i_low:i_high]\n\t            y1 = self.y[i_low + 1:i_high + 1]\n\t            if self.interpolation[k] == 1:\n\t                # Histogram\n", "                partial_sum[i_low:i_high] = y0*(x1 - x0)\n\t            elif self.interpolation[k] == 2:\n\t                # Linear-linear\n\t                m = (y1 - y0)/(x1 - x0)\n\t                partial_sum[i_low:i_high] = (y0 - m*x0)*(x1 - x0) + \\\n\t                                            m*(x1**2 - x0**2)/2\n\t            elif self.interpolation[k] == 3:\n\t                # Linear-log\n\t                logx = np.log(x1/x0)\n\t                m = (y1 - y0)/logx\n", "                partial_sum[i_low:i_high] = y0 + m*(x1*(logx - 1) + x0)\n\t            elif self.interpolation[k] == 4:\n\t                # Log-linear\n\t                m = np.log(y1/y0)/(x1 - x0)\n\t                partial_sum[i_low:i_high] = y0/m*(np.exp(m*(x1 - x0)) - 1)\n\t            elif self.interpolation[k] == 5:\n\t                # Log-log\n\t                m = np.log(y1/y0)/np.log(x1/x0)\n\t                partial_sum[i_low:i_high] = y0/((m + 1)*x0**m)*(\n\t                    x1**(m + 1) - x0**(m + 1))\n", "            i_low = i_high\n\t        return np.concatenate(([0.], np.cumsum(partial_sum)))\n\t    @classmethod\n\t    def from_ace(cls, ace, idx=0, convert_units=True):\n\t        \"\"\"Create a Tabulated1D object from an ACE table.\n\t        Parameters\n\t        ----------\n\t        ace : openmc.data.ace.Table\n\t            An ACE table\n\t        idx : int\n", "            Offset to read from in XSS array (default of zero)\n\t        convert_units : bool\n\t            If the abscissa represents energy, indicate whether to convert MeV\n\t            to eV.\n\t        Returns\n\t        -------\n\t        openmc.data.Tabulated1D\n\t            Tabulated data object\n\t        \"\"\"\n\t        # Get number of regions and pairs\n", "        n_regions = int(ace.xss[idx])\n\t        n_pairs = int(ace.xss[idx + 1 + 2*n_regions])\n\t        # Get interpolation information\n\t        idx += 1\n\t        if n_regions > 0:\n\t            breakpoints = ace.xss[idx:idx + n_regions].astype(int)\n\t            interpolation = ace.xss[idx + n_regions:idx + 2*n_regions].astype(int)\n\t        else:\n\t            # 0 regions implies linear-linear interpolation by default\n\t            breakpoints = np.array([n_pairs])\n", "            interpolation = np.array([2])\n\t        # Get (x,y) pairs\n\t        idx += 2*n_regions + 1\n\t        x = ace.xss[idx:idx + n_pairs].copy()\n\t        y = ace.xss[idx + n_pairs:idx + 2*n_pairs].copy()\n\t        if convert_units:\n\t            x *= EV_PER_MEV\n\t        return Tabulated1D(x, y, breakpoints, interpolation)\n\tclass Tabulated2D:\n\t    \"\"\"Metadata for a two-dimensional function.\n", "    This is a dummy class that is not really used other than to store the\n\t    interpolation information for a two-dimensional function. Once we refactor\n\t    to adopt GNDS-like data containers, this will probably be removed or\n\t    extended.\n\t    Parameters\n\t    ----------\n\t    breakpoints : Iterable of int\n\t        Breakpoints for interpolation regions\n\t    interpolation : Iterable of int\n\t        Interpolation scheme identification number, e.g., 3 means y is linear in\n", "        ln(x).\n\t    \"\"\"\n\t    def __init__(self, breakpoints, interpolation):\n\t        self.breakpoints = breakpoints\n\t        self.interpolation = interpolation\n"]}
{"filename": "src/endf/__init__.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom importlib.metadata import version, PackageNotFoundError\n\tfrom .material import *\n\tfrom .incident_neutron import *\n\tfrom .function import *\n\tfrom .product import *\n\tfrom .reaction import *\n\tfrom . import ace\n\ttry:\n", "    __version__ = version(\"endf\")\n\texcept PackageNotFoundError:\n\t    # package is not installed\n\t    pass\n"]}
{"filename": "src/endf/mf34.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_cont_record, get_list_record\n\tdef parse_mf34(file_obj: TextIO, MT: int) -> dict:\n\t    \"\"\"Parse covariances of angular distributions from MF=34\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    MT\n\t        Reaction number\n\t    Returns\n\t    -------\n\t    dict\n\t        Angular distribution covariance data\n\t    \"\"\"\n\t    ZA, AWR, _, LTT, _, NMT1 = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LTT': LTT, 'NMT1': NMT1, 'subsections': []}\n", "    for _ in range(NMT1):\n\t        _, _, MAT1, MT1, NL, NL1 = get_cont_record(file_obj)\n\t        if MT1 == 0 or MT == MT1:\n\t            NSS = NL*(NL + 1)//2\n\t        else:\n\t            NSS = NL*NL1\n\t        subsection = {'MAT1': MAT1, 'MT1': MT1, 'NL': NL, 'NSS': NSS}\n\t        subsection['L'] = np.empty(NSS)\n\t        subsection['L1'] = np.empty(NSS)\n\t        subsection['NI'] = np.empty(NSS)\n", "        subsection['subsubsections'] = []\n\t        for n in range(NSS):\n\t            _, _, L, L1, LCT, NI = get_cont_record(file_obj)\n\t            subsection['L'][n] = L\n\t            subsection['L1'][n] = L1\n\t            subsection['NI'][n] = NI\n\t            if n == 0:\n\t                subsection['LCT'] = LCT\n\t            subsub = {\n\t                'LS': np.empty(NI),\n", "                'LB': np.empty(NI),\n\t                'NT': np.empty(NI),\n\t                'NE': np.empty(NI),\n\t                'Data': []\n\t            }\n\t            for m in range(NI):\n\t                (_, _, LS, LB, NT, NE), values = get_list_record(file_obj)\n\t                subsub['LS'][m] = LS\n\t                subsub['LB'][m] = LS\n\t                subsub['NT'][m] = NT\n", "                subsub['NE'][m] = NE\n\t                subsub['Data'].append(values)\n\t            subsection['subsubsections'].append(subsub)\n\t    return data\n"]}
{"filename": "src/endf/mf7.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record, get_list_record, \\\n\t    get_tab2_record\n\tdef parse_mf7_mt2(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse elastic thermal scattering data from MF=7, MT=2\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Thermal scattering data\n\t    \"\"\"\n\t    # Read coherent/incoherent elastic data\n\t    # Define helper functions to avoid duplication\n\t    def get_coherent_elastic(file_obj):\n\t        # Get structure factor at first temperature\n", "        params, S = get_tab1_record(file_obj)\n\t        T, _, LT, *_ = params\n\t        temp_data = [{'T': T, 'LT': LT, 'S': S}]\n\t        # Get structure factor for subsequent temperatures\n\t        for _ in range(LT):\n\t            params, S = get_list_record(file_obj)\n\t            T, _, LI, *_ = params\n\t            temp_data.append({'T': T, 'LI': LI, 'S': S})\n\t        return temp_data\n\t    def get_incoherent_elastic(file_obj):\n", "        params, W = get_tab1_record(file_obj)\n\t        return {'SB': params[0], 'W': W}\n\t    ZA, AWR, LHTR, *_ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LHTR': LHTR}\n\t    if LHTR == 1:\n\t        # coherent elastic\n\t        data['coherent'] = get_coherent_elastic(file_obj)\n\t    elif LHTR == 2:\n\t        # incoherent elastic\n\t        data['incoherent'] = get_incoherent_elastic(file_obj)\n", "    elif LHTR == 3:\n\t        # mixed coherent / incoherent elastic\n\t        data['coherent'] = get_coherent_elastic(file_obj)\n\t        data['incoherent'] = get_incoherent_elastic(file_obj)\n\t    return data\n\tdef parse_mf7_mt4(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse inelastic thermal scattering data from MF=7, MT=4\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Thermal scattering data\n\t    \"\"\"\n\t    # Read incoherent inelastic data\n\t    ZA, AWR, _, LAT, LASYM, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LAT': LAT, 'LASYM': LASYM}\n\t    # Get information about principal atom\n", "    params, B = get_list_record(file_obj)\n\t    _, _, LLN, _, NI, NS = params\n\t    data['LLN'] = LLN\n\t    data['NI'] = NI\n\t    data['NS'] = NS\n\t    data['B'] = B\n\t    # Get S(alpha,beta,T)\n\t    kTs = []\n\t    if data['B'][0] > 0.0:\n\t        params, data['beta_int'] = get_tab2_record(file_obj)\n", "        data['NB'] = NB = params[5]\n\t        data['beta_data'] = []\n\t        for i in range(NB):\n\t            params, S = get_tab1_record(file_obj)\n\t            T, beta, LT, *_ = params\n\t            temp_data = [{'T': T, 'beta': beta, 'LT': LT, 'S': S}]\n\t            for _ in range(LT):\n\t                params, S = get_list_record(file_obj)\n\t                T, beta, LI, *_ = params\n\t                temp_data.append({'T': T, 'beta': beta, 'LT': LT, 'S': S})\n", "            data['beta_data'].append(temp_data)\n\t    # Get effective temperature for each atom\n\t    _, Teff = get_tab1_record(file_obj)\n\t    data['Teff'] = [Teff]\n\t    for i in range(NS):\n\t        if data['B'][6*(i + 1)] == 0.0:\n\t            _, Teff = get_tab1_record(file_obj)\n\t            data['Teff'].append(Teff)\n\t    return data\n\tdef parse_mf7_mt451(file_obj: TextIO) -> dict:\n", "    \"\"\"Parse thermal scattering generalized information file from MF=7, MT=451\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Thermal scattering data\n\t    \"\"\"\n", "    # Read basic data from first record\n\t    ZA, AWR, NA, *_ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NA': NA}\n\t    # Read all other parameters from list record\n\t    data['elements'] = []\n\t    for _ in range(NA):\n\t        params, values = get_list_record(file_obj)\n\t        element = {\n\t            'NAS': params[2],\n\t            'NI': params[5],\n", "            'ZAI': values[::6],\n\t            'LISI': values[1::6],\n\t            'AFI': values[2::6],\n\t            'AWRI': values[3::6],\n\t            'SFI': values[4::6],\n\t        }\n\t        data['elements'].append(element)\n\t    return data\n"]}
{"filename": "src/endf/product.py", "chunked_list": ["import numpy as np\n\tfrom numpy.polynomial import Polynomial\n\tfrom .function import Tabulated1D\n\tclass Product:\n\t    \"\"\"Secondary particle emitted in a nuclear reaction\n\t    Parameters\n\t    ----------\n\t    name\n\t        The particle type of the reaction product. Defaults to 'neutron'.\n\t    yield_\n", "        Yield of secondary particle in the reaction.\n\t    distribution\n\t        Distributions of energy and angle of product.\n\t    applicability\n\t        Probability of sampling a given distribution for this product.\n\t    Attributes\n\t    ----------\n\t    applicability : Iterable of openmc.data.Tabulated1D\n\t        Probability of sampling a given distribution for this product.\n\t    decay_rate : float\n", "        Decay rate in inverse seconds\n\t    distribution : Iterable of AngleEnergy\n\t        Distributions of energy and angle of product.\n\t    emission_mode : {'prompt', 'delayed', 'total'}\n\t        Indicate whether the particle is emitted immediately or whether it\n\t        results from the decay of reaction product (e.g., neutron emitted from a\n\t        delayed neutron precursor). A special value of 'total' is used when the\n\t        yield represents particles from prompt and delayed sources.\n\t    name : str\n\t        The particle type of the reaction product\n", "    yield_\n\t        Yield of secondary particle in the reaction.\n\t    \"\"\"\n\t    def __init__(self, name: str = 'neutron', yield_=None,\n\t                 distribution=None, applicability=None):\n\t        self.name = name\n\t        if yield_ is None:\n\t            self.yield_ = Polynomial((1,))  # 0-order polynomial, i.e., a constant\n\t        else:\n\t            self.yield_ = yield_\n", "        self.decay_rate = 0.0\n\t        if distribution is None:\n\t            self.distribution = []\n\t        else:\n\t            self.distribution = distribution\n\t        if applicability is None:\n\t            self.applicability = []\n\t        else:\n\t            self.applicability = applicability\n\t        self.emission_mode = 'prompt'\n", "    def __repr__(self):\n\t        if isinstance(self.yield_, Tabulated1D):\n\t            if np.all(self.yield_.y == self.yield_.y[0]):\n\t                return \"<Product: {}, emission={}, yield={}>\".format(\n\t                    self.name, self.emission_mode, self.yield_.y[0])\n\t            else:\n\t                return \"<Product: {}, emission={}, yield=tabulated>\".format(\n\t                    self.name, self.emission_mode)\n\t        else:\n\t            return \"<Product: {}, emission={}, yield=polynomial>\".format(\n", "                self.name, self.emission_mode)\n"]}
{"filename": "src/endf/data.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\timport re\n\tfrom typing import Tuple\n\t# Dictionary to give element symbols from IUPAC names\n\t# (and some common mispellings)\n\tELEMENT_SYMBOL = {\n\t    'neutron': 'n', 'hydrogen': 'H', 'helium': 'He',\n\t    'lithium': 'Li', 'beryllium': 'Be', 'boron': 'B',\n\t    'carbon': 'C', 'nitrogen': 'N', 'oxygen': 'O', 'fluorine': 'F',\n", "    'neon': 'Ne', 'sodium': 'Na', 'magnesium': 'Mg',\n\t    'aluminium': 'Al', 'aluminum': 'Al', 'silicon': 'Si',\n\t    'phosphorus': 'P', 'sulfur': 'S', 'sulphur': 'S',\n\t    'chlorine': 'Cl', 'argon': 'Ar', 'potassium': 'K',\n\t    'calcium': 'Ca', 'scandium': 'Sc', 'titanium': 'Ti',\n\t    'vanadium': 'V', 'chromium': 'Cr', 'manganese': 'Mn',\n\t    'iron': 'Fe', 'cobalt': 'Co', 'nickel': 'Ni', 'copper': 'Cu',\n\t    'zinc': 'Zn', 'gallium': 'Ga', 'germanium': 'Ge',\n\t    'arsenic': 'As', 'selenium': 'Se', 'bromine': 'Br',\n\t    'krypton': 'Kr', 'rubidium': 'Rb', 'strontium': 'Sr',\n", "    'yttrium': 'Y', 'zirconium': 'Zr', 'niobium': 'Nb',\n\t    'molybdenum': 'Mo', 'technetium': 'Tc', 'ruthenium': 'Ru',\n\t    'rhodium': 'Rh', 'palladium': 'Pd', 'silver': 'Ag',\n\t    'cadmium': 'Cd', 'indium': 'In', 'tin': 'Sn', 'antimony': 'Sb',\n\t    'tellurium': 'Te', 'iodine': 'I', 'xenon': 'Xe',\n\t    'caesium': 'Cs', 'cesium': 'Cs', 'barium': 'Ba',\n\t    'lanthanum': 'La', 'cerium': 'Ce', 'praseodymium': 'Pr',\n\t    'neodymium': 'Nd', 'promethium': 'Pm', 'samarium': 'Sm',\n\t    'europium': 'Eu', 'gadolinium': 'Gd', 'terbium': 'Tb',\n\t    'dysprosium': 'Dy', 'holmium': 'Ho', 'erbium': 'Er',\n", "    'thulium': 'Tm', 'ytterbium': 'Yb', 'lutetium': 'Lu',\n\t    'hafnium': 'Hf', 'tantalum': 'Ta', 'tungsten': 'W',\n\t    'wolfram': 'W', 'rhenium': 'Re', 'osmium': 'Os',\n\t    'iridium': 'Ir', 'platinum': 'Pt', 'gold': 'Au',\n\t    'mercury': 'Hg', 'thallium': 'Tl', 'lead': 'Pb',\n\t    'bismuth': 'Bi', 'polonium': 'Po', 'astatine': 'At',\n\t    'radon': 'Rn', 'francium': 'Fr', 'radium': 'Ra',\n\t    'actinium': 'Ac', 'thorium': 'Th', 'protactinium': 'Pa',\n\t    'uranium': 'U', 'neptunium': 'Np', 'plutonium': 'Pu',\n\t    'americium': 'Am', 'curium': 'Cm', 'berkelium': 'Bk',\n", "    'californium': 'Cf', 'einsteinium': 'Es', 'fermium': 'Fm',\n\t    'mendelevium': 'Md', 'nobelium': 'No', 'lawrencium': 'Lr',\n\t    'rutherfordium': 'Rf', 'dubnium': 'Db', 'seaborgium': 'Sg',\n\t    'bohrium': 'Bh', 'hassium': 'Hs', 'meitnerium': 'Mt',\n\t    'darmstadtium': 'Ds', 'roentgenium': 'Rg', 'copernicium': 'Cn',\n\t    'nihonium': 'Nh', 'flerovium': 'Fl', 'moscovium': 'Mc',\n\t    'livermorium': 'Lv', 'tennessine': 'Ts', 'oganesson': 'Og'\n\t}\n\tATOMIC_SYMBOL = {\n\t    0: 'n', 1: 'H', 2: 'He', 3: 'Li', 4: 'Be', 5: 'B', 6: 'C',\n", "    7: 'N', 8: 'O', 9: 'F', 10: 'Ne', 11: 'Na', 12: 'Mg', 13: 'Al',\n\t    14: 'Si', 15: 'P', 16: 'S', 17: 'Cl', 18: 'Ar', 19: 'K',\n\t    20: 'Ca', 21: 'Sc', 22: 'Ti', 23: 'V', 24: 'Cr', 25: 'Mn',\n\t    26: 'Fe', 27: 'Co', 28: 'Ni', 29: 'Cu', 30: 'Zn', 31: 'Ga',\n\t    32: 'Ge', 33: 'As', 34: 'Se', 35: 'Br', 36: 'Kr', 37: 'Rb',\n\t    38: 'Sr', 39: 'Y', 40: 'Zr', 41: 'Nb', 42: 'Mo', 43: 'Tc',\n\t    44: 'Ru', 45: 'Rh', 46: 'Pd', 47: 'Ag', 48: 'Cd', 49: 'In',\n\t    50: 'Sn', 51: 'Sb', 52: 'Te', 53: 'I', 54: 'Xe', 55: 'Cs',\n\t    56: 'Ba', 57: 'La', 58: 'Ce', 59: 'Pr', 60: 'Nd', 61: 'Pm',\n\t    62: 'Sm', 63: 'Eu', 64: 'Gd', 65: 'Tb', 66: 'Dy', 67: 'Ho',\n", "    68: 'Er', 69: 'Tm', 70: 'Yb', 71: 'Lu', 72: 'Hf', 73: 'Ta',\n\t    74: 'W', 75: 'Re', 76: 'Os', 77: 'Ir', 78: 'Pt', 79: 'Au',\n\t    80: 'Hg', 81: 'Tl', 82: 'Pb', 83: 'Bi', 84: 'Po', 85: 'At',\n\t    86: 'Rn', 87: 'Fr', 88: 'Ra', 89: 'Ac', 90: 'Th', 91: 'Pa',\n\t    92: 'U', 93: 'Np', 94: 'Pu', 95: 'Am', 96: 'Cm', 97: 'Bk',\n\t    98: 'Cf', 99: 'Es', 100: 'Fm', 101: 'Md', 102: 'No',\n\t    103: 'Lr', 104: 'Rf', 105: 'Db', 106: 'Sg', 107: 'Bh',\n\t    108: 'Hs', 109: 'Mt', 110: 'Ds', 111: 'Rg', 112: 'Cn',\n\t    113: 'Nh', 114: 'Fl', 115: 'Mc', 116: 'Lv', 117: 'Ts',\n\t    118: 'Og'\n", "}\n\tATOMIC_NUMBER = {value: key for key, value in ATOMIC_SYMBOL.items()}\n\t# Boltzmann constant in [eV/K]\n\tK_BOLTZMANN = 8.617333262e-5\n\tEV_PER_MEV = 1.0e6\n\t# Regex for GNDS nuclide names (used in zam function)\n\t_GNDS_NAME_RE = re.compile(r'([A-Zn][a-z]*)(\\d+)((?:_[em]\\d+)?)')\n\tdef gnds_name(Z: int, A: int, m: int = 0) -> str:\n\t    \"\"\"Return nuclide name using GNDS convention\n\t    Parameters\n", "    ----------\n\t    Z\n\t        Atomic number\n\t    A\n\t        Mass number\n\t    m\n\t        Metastable state\n\t    Returns\n\t    -------\n\t    Nuclide name in GNDS convention, e.g., 'Am242_m1'\n", "    \"\"\"\n\t    if m > 0:\n\t        return f'{ATOMIC_SYMBOL[Z]}{A}_m{m}'\n\t    return f'{ATOMIC_SYMBOL[Z]}{A}'\n\tdef zam(name: str) -> Tuple[int, int, int]:\n\t    \"\"\"Return tuple of (atomic number, mass number, metastable state)\n\t    Parameters\n\t    ----------\n\t    name\n\t        Name of nuclide using GNDS convention, e.g., 'Am242_m1'\n", "    Returns\n\t    -------\n\t    Atomic number, mass number, and metastable state\n\t    \"\"\"\n\t    try:\n\t        symbol, A, state = _GNDS_NAME_RE.match(name).groups()\n\t    except AttributeError:\n\t        raise ValueError(f\"'{name}' does not appear to be a nuclide name in \"\n\t                         \"GNDS format\")\n\t    if symbol not in ATOMIC_NUMBER:\n", "        raise ValueError(f\"'{symbol}' is not a recognized element symbol\")\n\t    metastable = int(state[2:]) if state else 0\n\t    return (ATOMIC_NUMBER[symbol], int(A), metastable)\n\tdef temperature_str(T: float) -> str:\n\t    \"\"\"Return temperature as a string\n\t    Parameters\n\t    ----------\n\t    T\n\t        Temperature in [K]\n\t    Returns\n", "    -------\n\t    String representation of temperature, e.g., '294K'\n\t    \"\"\"\n\t    return \"{}K\".format(int(round(T)))\n"]}
{"filename": "src/endf/mf26.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom warnings import warn\n\tfrom .mf6 import ContinuumEnergyAngle, DiscreteTwoBodyScattering\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf26(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse secondary distributions for atomic data from MF=26\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Secondary distribution data\n\t    \"\"\"\n\t    ZA, AWR, _, _, NK, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'NK': NK}\n\t    data['products'] = products = []\n", "    for i in range(NK):\n\t        # Get yield for this product\n\t        (ZAP, AWI, _, LAW), y = get_tab1_record(file_obj)\n\t        ZAP = int(ZAP)\n\t        p = {'ZAP': ZAP, 'AWI': AWI, 'LAW': LAW, 'y': y}\n\t        if LAW == 1:\n\t            # Continuum energy-angle distribution\n\t            p['distribution'] = ContinuumEnergyAngle.dict_from_endf(file_obj)\n\t        elif LAW == 2:\n\t            # Discrete two-body scattering\n", "            p['distribution'] = DiscreteTwoBodyScattering.dict_from_endf(file_obj)\n\t        elif LAW == 8:\n\t            # Energy transfer for excitation\n\t            _, ET = get_tab1_record(file_obj)\n\t            p['distribution'] = {'ET': ET}\n\t        else:\n\t            warn(f'Unrecognized {LAW=} in MF=26')\n\t        products.append(p)\n\t    return data\n"]}
{"filename": "src/endf/ace.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 OpenMC contributors and Paul Romano\n\t# SPDX-License-Identifier: MIT\n\t\"\"\"This module is for reading ACE-format cross sections. ACE stands for \"A\n\tCompact ENDF\" format and originated from work on MCNP_. It is used in a number\n\tof other Monte Carlo particle transport codes.\n\tACE-format cross sections are typically generated from ENDF_ files through a\n\tcross section processing program like NJOY_. The ENDF data consists of tabulated\n\tthermal data, ENDF/B resonance parameters, distribution parameters in the\n\tunresolved resonance region, and tabulated data in the fast region. After the\n\tENDF data has been reconstructed and Doppler-broadened, the ACER module\n", "generates ACE-format cross sections.\n\t.. _MCNP: https://laws.lanl.gov/vhosts/mcnp.lanl.gov/\n\t.. _NJOY: http://t2.lanl.gov/codes.shtml\n\t.. _ENDF: http://www.nndc.bnl.gov/endf\n\t\"\"\"\n\tfrom __future__ import annotations\n\tfrom collections import OrderedDict\n\timport enum\n\tfrom pathlib import Path\n\timport struct\n", "from typing import Tuple, List, Union, Optional, Iterable, TextIO, Any\n\timport numpy as np\n\tfrom .data import ATOMIC_SYMBOL, gnds_name, EV_PER_MEV, K_BOLTZMANN\n\tfrom .fileutils import PathLike\n\tfrom .records import ENDF_FLOAT_RE\n\timport endf\n\tdef get_metadata(zaid: int, metastable_scheme: str = 'nndc') -> Tuple[str, str, int, int, int]:\n\t    \"\"\"Return basic identifying data for a nuclide with a given ZAID.\n\t    Parameters\n\t    ----------\n", "    zaid\n\t        ZAID (1000*Z + A) obtained from a library\n\t    metastable_scheme : {'nndc', 'mcnp'}\n\t        Determine how ZAID identifiers are to be interpreted in the case of\n\t        a metastable nuclide. Because the normal ZAID (=1000*Z + A) does not\n\t        encode metastable information, different conventions are used among\n\t        different libraries. In MCNP libraries, the convention is to add 400\n\t        for a metastable nuclide except for Am242m, for which 95242 is\n\t        metastable and 95642 (or 1095242 in newer libraries) is the ground\n\t        state. For NNDC libraries, ZAID is given as 1000*Z + A + 100*m.\n", "    Returns\n\t    -------\n\t    name : str\n\t        Name of the table\n\t    element : str\n\t        The atomic symbol of the isotope in the table; e.g., Zr.\n\t    Z : int\n\t        Number of protons in the nucleus\n\t    mass_number : int\n\t        Number of nucleons in the nucleus\n", "    metastable : int\n\t        Metastable state of the nucleus. A value of zero indicates ground state.\n\t    \"\"\"\n\t    Z = zaid // 1000\n\t    mass_number = zaid % 1000\n\t    if metastable_scheme == 'mcnp':\n\t        if zaid > 1000000:\n\t            # New SZA format\n\t            Z = Z % 1000\n\t            if zaid == 1095242:\n", "                metastable = 0\n\t            else:\n\t                metastable = zaid // 1000000\n\t        else:\n\t            if zaid == 95242:\n\t                metastable = 1\n\t            elif zaid == 95642:\n\t                metastable = 0\n\t            else:\n\t                metastable = 1 if mass_number > 300 else 0\n", "    elif metastable_scheme == 'nndc':\n\t        metastable = 1 if mass_number > 300 else 0\n\t    while mass_number > 3 * Z:\n\t        mass_number -= 100\n\t    # Determine name\n\t    element = ATOMIC_SYMBOL[Z]\n\t    name = gnds_name(Z, mass_number, metastable)\n\t    return (name, element, Z, mass_number, metastable)\n\tdef ascii_to_binary(ascii_file: PathLike, binary_file: PathLike):\n\t    \"\"\"Convert an ACE file in ASCII format (type 1) to binary format (type 2).\n", "    Parameters\n\t    ----------\n\t    ascii_file\n\t        Filename of ASCII ACE file\n\t    binary_file\n\t        Filename of binary ACE file to be written\n\t    \"\"\"\n\t    # Read data from ASCII file\n\t    with open(str(ascii_file), 'r') as ascii_file:\n\t        lines = ascii_file.readlines()\n", "    # Set default record length\n\t    record_length = 4096\n\t    # Open binary file\n\t    with open(str(binary_file), 'wb') as binary_file:\n\t        idx = 0\n\t        while idx < len(lines):\n\t            # check if it's a > 2.0.0 version header\n\t            if lines[idx].split()[0][1] == '.':\n\t                if lines[idx + 1].split()[3] == '3':\n\t                    idx = idx + 3\n", "                else:\n\t                    raise NotImplementedError('Only backwards compatible ACE'\n\t                                              'headers currently supported')\n\t            # Read/write header block\n\t            hz = lines[idx][:10].encode()\n\t            aw0 = float(lines[idx][10:22])\n\t            tz = float(lines[idx][22:34])\n\t            hd = lines[idx][35:45].encode()\n\t            hk = lines[idx + 1][:70].encode()\n\t            hm = lines[idx + 1][70:80].encode()\n", "            binary_file.write(struct.pack(str('=10sdd10s70s10s'),\n\t                              hz, aw0, tz, hd, hk, hm))\n\t            # Read/write IZ/AW pairs\n\t            data = ' '.join(lines[idx + 2:idx + 6]).split()\n\t            iz = np.array(data[::2], dtype=int)\n\t            aw = np.array(data[1::2], dtype=float)\n\t            izaw = [item for sublist in zip(iz, aw) for item in sublist]\n\t            binary_file.write(struct.pack(str('=' + 16*'id'), *izaw))\n\t            # Read/write NXS and JXS arrays. Null bytes are added at the end so\n\t            # that XSS will start at the second record\n", "            nxs = [int(x) for x in ' '.join(lines[idx + 6:idx + 8]).split()]\n\t            jxs = [int(x) for x in ' '.join(lines[idx + 8:idx + 12]).split()]\n\t            binary_file.write(struct.pack(str('=16i32i{}x'.format(record_length - 500)),\n\t                                          *(nxs + jxs)))\n\t            # Read/write XSS array. Null bytes are added to form a complete record\n\t            # at the end of the file\n\t            n_lines = (nxs[0] + 3)//4\n\t            start = idx + _ACE_HEADER_SIZE\n\t            xss = np.fromstring(' '.join(lines[start:start + n_lines]), sep=' ')\n\t            extra_bytes = record_length - ((len(xss)*8 - 1) % record_length + 1)\n", "            binary_file.write(struct.pack(str('={}d{}x'.format(\n\t                nxs[0], extra_bytes)), *xss))\n\t            # Advance to next table in file\n\t            idx += _ACE_HEADER_SIZE + n_lines\n\tdef get_table(filename: PathLike, name: str = None):\n\t    \"\"\"Read a single table from an ACE file\n\t    Parameters\n\t    ----------\n\t    filename : str\n\t        Path of the ACE library to load table from\n", "    name : str, optional\n\t        Name of table to load, e.g. '92235.71c'\n\t    Returns\n\t    -------\n\t    endf.ace.Table\n\t        ACE table with specified name. If no name is specified, the first table\n\t        in the file is returned.\n\t    \"\"\"\n\t    tables = get_tables(filename, name)\n\t    if name is not None and not tables:\n", "        raise ValueError(f'Could not find ACE table with name: {name}')\n\t    return tables[0]\n\t# The beginning of an ASCII ACE file consists of 12 lines that include the name,\n\t# atomic weight ratio, iz/aw pairs, and the NXS and JXS arrays\n\t_ACE_HEADER_SIZE = 12\n\tdef get_tables(\n\t    filename: PathLike,\n\t    table_names: Optional[Union[str, Iterable[str]]] = None,\n\t    verbose: bool = False\n\t):\n", "    \"\"\"Get all tables from an ACE-formatted file.\n\t    Parameters\n\t    ----------\n\t    filename : str\n\t        Path of the ACE library file to load.\n\t    table_names : None, str, or iterable, optional\n\t        Tables from the file to read in.  If None, reads in all of the\n\t        tables. If str, reads in only the single table of a matching name.\n\t    verbose : bool, optional\n\t        Determines whether output is printed to the stdout when reading a\n", "        Library\n\t    Attributes\n\t    ----------\n\t    tables : list\n\t        List of :class:`Table` instances\n\t    \"\"\"\n\t    if isinstance(table_names, str):\n\t        table_names = [table_names]\n\t    if table_names is not None:\n\t        table_names = set(table_names)\n", "    tables = []\n\t    # Determine whether file is ASCII or binary\n\t    filename = str(filename)\n\t    try:\n\t        fh = open(filename, 'rb')\n\t        # Grab 10 lines of the library\n\t        sb = b''.join([fh.readline() for i in range(10)])\n\t        # Try to decode it with ascii\n\t        sb.decode('ascii')\n\t        # No exception so proceed with ASCII - reopen in non-binary\n", "        fh.close()\n\t        with open(filename, 'r') as fh:\n\t            return _read_ascii(fh, table_names, verbose)\n\t    except UnicodeDecodeError:\n\t        fh.close()\n\t        with open(filename, 'rb') as fh:\n\t            return _read_binary(fh, table_names, verbose)\n\tdef _read_binary(ace_file, table_names, verbose=False, recl_length=4096, entries=512):\n\t    \"\"\"Read a binary (Type 2) ACE table.\n\t    Parameters\n", "    ----------\n\t    ace_file : file\n\t        Open ACE file\n\t    table_names : None, str, or iterable\n\t        Tables from the file to read in.  If None, reads in all of the\n\t        tables. If str, reads in only the single table of a matching name.\n\t    verbose : str, optional\n\t        Whether to display what tables are being read. Defaults to False.\n\t    recl_length : int, optional\n\t        Fortran record length in binary file. Default value is 4096 bytes.\n", "    entries : int, optional\n\t        Number of entries per record. The default is 512 corresponding to a\n\t        record length of 4096 bytes with double precision data.\n\t    \"\"\"\n\t    tables = []\n\t    while True:\n\t        start_position = ace_file.tell()\n\t        # Check for end-of-file\n\t        if len(ace_file.read(1)) == 0:\n\t            return tables\n", "        ace_file.seek(start_position)\n\t        # Read name, atomic mass ratio, temperature, date, comment, and\n\t        # material\n\t        name, atomic_weight_ratio, kT, *_ = \\\n\t            struct.unpack('=10sdd10s70s10s', ace_file.read(116))\n\t        name = name.decode().strip()\n\t        # Read ZAID/awr combinations\n\t        data = struct.unpack('=' + 16*'id', ace_file.read(192))\n\t        pairs = list(zip(data[::2], data[1::2]))\n\t        # Read NXS\n", "        nxs = list(struct.unpack('=16i', ace_file.read(64)))\n\t        # Determine length of XSS and number of records\n\t        length = nxs[0]\n\t        n_records = (length + entries - 1)//entries\n\t        # verify that we are supposed to read this table in\n\t        if (table_names is not None) and (name not in table_names):\n\t            ace_file.seek(start_position + recl_length*(n_records + 1))\n\t            continue\n\t        if verbose:\n\t            kelvin = round(kT * EV_PER_MEV / K_BOLTZMANN)\n", "            print(f\"Loading nuclide {name} at {kelvin} K\")\n\t        # Read JXS\n\t        jxs = list(struct.unpack('=32i', ace_file.read(128)))\n\t        # Read XSS\n\t        ace_file.seek(start_position + recl_length)\n\t        xss = list(struct.unpack(f'={length}d', ace_file.read(length*8)))\n\t        # Insert zeros at beginning of NXS, JXS, and XSS arrays so that the\n\t        # indexing will be the same as Fortran. This makes it easier to\n\t        # follow the ACE format specification.\n\t        nxs.insert(0, 0)\n", "        nxs = np.array(nxs, dtype=int)\n\t        jxs.insert(0, 0)\n\t        jxs = np.array(jxs, dtype=int)\n\t        xss.insert(0, 0.0)\n\t        xss = np.array(xss)\n\t        # Create ACE table with data read in\n\t        table = Table(name, atomic_weight_ratio, kT, pairs, nxs, jxs, xss)\n\t        tables.append(table)\n\t        # Advance to next record\n\t        ace_file.seek(start_position + recl_length*(n_records + 1))\n", "def _read_ascii(\n\t    ace_file: TextIO,\n\t    table_names: Optional[Union[str, Iterable[str]]] = None,\n\t    verbose: bool = False\n\t):\n\t    \"\"\"Read an ASCII (Type 1) ACE table.\n\t    Parameters\n\t    ----------\n\t    ace_file : file\n\t        Open ACE file\n", "    table_names : None, str, or iterable\n\t        Tables from the file to read in.  If None, reads in all of the\n\t        tables. If str, reads in only the single table of a matching name.\n\t    verbose : str, optional\n\t        Whether to display what tables are being read. Defaults to False.\n\t    \"\"\"\n\t    tables = []\n\t    tables_seen = set()\n\t    lines = [ace_file.readline() for i in range(_ACE_HEADER_SIZE + 1)]\n\t    while len(lines) != 0 and lines[0].strip() != '':\n", "        # Read name of table, atomic mass ratio, and temperature. If first\n\t        # line is empty, we are at end of file\n\t        # check if it's a 2.0 style header\n\t        if lines[0].split()[0][1] == '.':\n\t            words = lines[0].split()\n\t            name = words[1]\n\t            words = lines[1].split()\n\t            atomic_weight_ratio = float(words[0])\n\t            kT = float(words[1])\n\t            commentlines = int(words[3])\n", "            for _ in range(commentlines):\n\t                lines.pop(0)\n\t                lines.append(ace_file.readline())\n\t        else:\n\t            words = lines[0].split()\n\t            name = words[0]\n\t            atomic_weight_ratio = float(words[1])\n\t            kT = float(words[2])\n\t        datastr = ' '.join(lines[2:6]).split()\n\t        pairs = list(zip(map(int, datastr[::2]),\n", "                            map(float, datastr[1::2])))\n\t        datastr = '0 ' + ' '.join(lines[6:8])\n\t        nxs = np.fromstring(datastr, sep=' ', dtype=int)\n\t        # Detemrine number of lines in the XSS array; each line consists of\n\t        # four values\n\t        n_lines = (nxs[1] + 3)//4\n\t        # Ensure that we have more tables to read in\n\t        if (table_names is not None) and (table_names <= tables_seen):\n\t            break\n\t        tables_seen.add(name)\n", "        # verify that we are supposed to read this table in\n\t        if (table_names is not None) and (name not in table_names):\n\t            for _ in range(n_lines - 1):\n\t                ace_file.readline()\n\t            lines = [ace_file.readline() for i in range(_ACE_HEADER_SIZE + 1)]\n\t            continue\n\t        # Read lines corresponding to this table\n\t        lines += [ace_file.readline() for i in range(n_lines - 1)]\n\t        if verbose:\n\t            kelvin = round(kT * EV_PER_MEV / K_BOLTZMANN)\n", "            print(f\"Loading nuclide {name} at {kelvin} K\")\n\t        # Insert zeros at beginning of NXS, JXS, and XSS arrays so that the\n\t        # indexing will be the same as Fortran. This makes it easier to\n\t        # follow the ACE format specification.\n\t        datastr = '0 ' + ' '.join(lines[8:_ACE_HEADER_SIZE])\n\t        jxs = np.fromstring(datastr, dtype=int, sep=' ')\n\t        datastr = '0.0 ' + ''.join(lines[_ACE_HEADER_SIZE:_ACE_HEADER_SIZE + n_lines])\n\t        xss = np.fromstring(datastr, sep=' ')\n\t        # When NJOY writes an ACE file, any values less than 1e-100 actually\n\t        # get written without the 'e'. Thus, what we do here is check\n", "        # whether the xss array is of the right size (if a number like\n\t        # 1.0-120 is encountered, np.fromstring won't capture any numbers\n\t        # after it). If it's too short, then we apply the ENDF float regular\n\t        # expression. We don't do this by default because it's expensive!\n\t        if xss.size != nxs[1] + 1:\n\t            datastr = ENDF_FLOAT_RE.sub(r'\\1e\\2\\3', datastr)\n\t            xss = np.fromstring(datastr, sep=' ')\n\t            assert xss.size == nxs[1] + 1\n\t        table = Table(name, atomic_weight_ratio, kT, pairs, nxs, jxs, xss)\n\t        tables.append(table)\n", "        # Read all data blocks\n\t        lines = [ace_file.readline() for i in range(_ACE_HEADER_SIZE + 1)]\n\t    return tables\n\tclass TableType(enum.Enum):\n\t    \"\"\"Type of ACE data table.\"\"\"\n\t    NEUTRON_CONTINUOUS = 'c'\n\t    NEUTRON_DISCRETE = 'd'\n\t    THERMAL_SCATTERING = 't'\n\t    DOSIMETRY = 'y'\n\t    PHOTOATOMIC = 'p'\n", "    PHOTONUCLEAR = 'u'\n\t    PROTON = 'h'\n\t    DEUTERON = 'o'\n\t    TRITON = 'r'\n\t    HELIUM3 = 's'\n\t    ALPHA = 'a'\n\t    @classmethod\n\t    def from_suffix(cls, suffix: str) -> TableType:\n\t        \"\"\"Determine ACE table type from a suffix.\n\t        Parameters\n", "        ----------\n\t        suffix : str\n\t            Single letter ACE table designator, e.g., 'c'\n\t        Returns\n\t        -------\n\t        TableType\n\t            ACE table type\n\t        \"\"\"\n\t        for member in cls:\n\t            if suffix.endswith(member.value):\n", "                return member\n\t        raise ValueError(f\"Suffix '{suffix}' has no corresponding ACE table type.\")\n\tclass Table:\n\t    \"\"\"ACE cross section table\n\t    Parameters\n\t    ----------\n\t    name : str\n\t        Full ACE table identifier, e.g., '92235.70c'.\n\t    atomic_weight_ratio : float\n\t        Atomic mass ratio of the target nuclide.\n", "    kT : float\n\t        Temperature of the target nuclide in [MeV]\n\t    pairs : list of tuple\n\t        16 pairs of ZAIDs and atomic weight ratios. Used for thermal scattering\n\t        tables to indicate what isotopes scattering is applied to.\n\t    nxs : numpy.ndarray\n\t        Array that defines various lengths with in the table\n\t    jxs : numpy.ndarray\n\t        Array that gives locations in the ``xss`` array for various blocks of\n\t        data\n", "    xss : numpy.ndarray\n\t        Raw data for the ACE table\n\t    Attributes\n\t    ----------\n\t    data_type : TableType\n\t        Type of the ACE data\n\t    temperature : float\n\t        Temperature of the target nuclide in [K]\n\t    zaid : int\n\t        ZAID identifier of the table, e.g., 92235\n", "    nxs : numpy.ndarray\n\t        Array that defines various lengths with in the table\n\t    jxs : numpy.ndarray\n\t        Array that gives locations in the ``xss`` array for various blocks of\n\t        data\n\t    xss : numpy.ndarray\n\t        Raw data for the ACE table\n\t    \"\"\"\n\t    def __init__(self, name: str, atomic_weight_ratio: float, kT: float,\n\t                 pairs: List[Tuple[int, float]],\n", "                 nxs: np.ndarray, jxs: np.ndarray, xss: np.ndarray):\n\t        self.name = name\n\t        self.atomic_weight_ratio = atomic_weight_ratio\n\t        self.kT = kT\n\t        self.pairs = pairs\n\t        self.nxs = nxs\n\t        self.jxs = jxs\n\t        self.xss = xss\n\t    @property\n\t    def zaid(self) -> int:\n", "        return int(self.name.split('.')[0])\n\t    @property\n\t    def data_type(self) -> TableType:\n\t        xs = self.name.split('.')[1]\n\t        return TableType.from_suffix(xs[-1])\n\t    @property\n\t    def temperature(self) -> float:\n\t        return self.kT * EV_PER_MEV / K_BOLTZMANN\n\t    def __repr__(self) -> str:\n\t        return f\"<ACE Table: {self.name} at {self.temperature:.1f} K>\"\n", "    def interpret(self, **kwargs) -> Any:\n\t        \"\"\"Get high-level interface class for the ACE table\n\t        Parameters\n\t        ----------\n\t        **kwargs\n\t            Keyword-arguments passed to the high-level interface class\n\t        Returns\n\t        -------\n\t        Instance of a high-level interface class, e.g.,\n\t        :class:`endf.IncidentNeutron`.\n", "        \"\"\"\n\t        if self.data_type == TableType.NEUTRON_CONTINUOUS:\n\t            return endf.IncidentNeutron.from_ace(self, **kwargs)\n\t        else:\n\t            raise NotImplementedError(f\"No class implemented for {self.data_type}\")\n\tdef get_libraries_from_xsdir(path: PathLike) -> List[Path]:\n\t    \"\"\"Determine paths to ACE files from an MCNP xsdir file.\n\t    Parameters\n\t    ----------\n\t    path\n", "        Path to xsdir file\n\t    Returns\n\t    -------\n\t    List of paths to ACE libraries\n\t    \"\"\"\n\t    xsdir = Path(path)\n\t    # Find 'directory' section\n\t    with open(path, 'r') as fh:\n\t        lines = fh.readlines()\n\t    for index, line in enumerate(lines):\n", "        if line.strip().lower() == 'directory':\n\t            break\n\t    else:\n\t        raise RuntimeError(\"Could not find 'directory' section in MCNP xsdir file\")\n\t    # Handle continuation lines indicated by '+' at end of line\n\t    lines = lines[index + 1:]\n\t    continue_lines = [i for i, line in enumerate(lines)\n\t                      if line.strip().endswith('+')]\n\t    for i in reversed(continue_lines):\n\t        lines[i] = lines[i].strip()[:-1] + lines.pop(i + 1)\n", "    # Create list of ACE libraries\n\t    libraries = {}\n\t    for line in lines:\n\t        words = line.split()\n\t        if len(words) < 3:\n\t            continue\n\t        lib = (xsdir.parent / words[2]).resolve()\n\t        if lib not in libraries:\n\t            # Value in dictionary is not used, so we just assign None. Below a\n\t            # list is created from the keys alone\n", "            libraries[lib] = None\n\t    return list(libraries.keys())\n\tdef get_libraries_from_xsdata(path: PathLike) -> List[Path]:\n\t    \"\"\"Determine paths to ACE files from a Serpent xsdata file.\n\t    Parameters\n\t    ----------\n\t    path\n\t        Path to xsdata file\n\t    Returns\n\t    -------\n", "    List of paths to ACE libraries\n\t    \"\"\"\n\t    xsdata = Path(path)\n\t    with open(xsdata, 'r') as xsdata_file:\n\t        # As in get_libraries_from_xsdir, we use a dict for O(1) membership\n\t        # check while retaining insertion order\n\t        libraries = OrderedDict()\n\t        for line in xsdata_file:\n\t            words = line.split()\n\t            if len(words) >= 9:\n", "                lib = (xsdata.parent / words[8]).resolve()\n\t                if lib not in libraries:\n\t                    libraries[lib] = None\n\t    return list(libraries.keys())\n"]}
{"filename": "src/endf/mf1.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\timport numpy as np\n\tfrom .records import get_head_record, get_cont_record, get_text_record, \\\n\t    get_list_record, get_tab1_record, get_tab2_record\n\tdef parse_mf1_mt451(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse descriptive data and directory from MF=1, MT=451\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Descriptive data\n\t    \"\"\"\n\t    # Information about target/projectile\n\t    ZA, AWR, LRP, LFI, NLIB, NMOD = get_head_record(file_obj)\n\t    data = {\n", "        'ZA': ZA, 'AWR': AWR, 'LRP': LRP,\n\t        'LFI': LFI, 'NLIB': NLIB, 'NMOD': NMOD\n\t    }\n\t    # Control record 1\n\t    ELIS, STA, LIS, LISO, _, NFOR = get_cont_record(file_obj)\n\t    data['ELIS'] = ELIS\n\t    data['STA'] = STA\n\t    data['LIS'] = LIS\n\t    data['LISO'] = LISO\n\t    data['NFOR'] = NFOR\n", "    # Control record 2\n\t    AWI, EMAX, LREL, _, NSUB, NVER = get_cont_record(file_obj)\n\t    data['AWI'] = AWI\n\t    data['EMAX'] = EMAX\n\t    data['LREL'] = LREL\n\t    data['NSUB'] = NSUB\n\t    data['NVER'] = NVER\n\t    # Control record 3\n\t    TEMP, _, LDRV, _, NWD, NXC = get_cont_record(file_obj)\n\t    data['TEMP'] = TEMP\n", "    data['LDRV'] = LDRV\n\t    data['NWD'] = NWD\n\t    data['NXC'] = NXC\n\t    # Text records\n\t    text = [get_text_record(file_obj) for i in range(NWD)]\n\t    if len(text) >= 5:\n\t        data['ZSYMAM'] = text[0][0:11]\n\t        data['ALAB'] = text[0][11:22]\n\t        data['EDATE'] = text[0][22:32]\n\t        data['AUTH'] = text[0][32:66]\n", "        data['REF'] = text[1][1:22]\n\t        data['DDATE'] = text[1][22:32]\n\t        data['RDATE'] = text[1][33:43]\n\t        data['ENDATE'] = text[1][55:63]\n\t        data['HSUB'] = text[2:5]\n\t        data['description'] = text[5:]\n\t    else:\n\t        data['ZSYMAM'] = None\n\t    # File numbers, reaction designations, and number of records\n\t    data['section_list'] = []\n", "    for _ in range(NXC):\n\t        _, _, mf, mt, nc, mod = get_cont_record(file_obj, skip_c=True)\n\t        data['section_list'].append((mf, mt, nc, mod))\n\t    return data\n\tdef parse_mf1_mt452(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse number of neutrons per fission from MF=1, MT=452/456\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Data on number of neutrons per fission\n\t    \"\"\"\n\t    # Determine representation from HEAD record\n\t    ZA, AWR, _, LNU, _, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LNU': LNU}\n\t    if LNU == 1:\n\t        # Polynomial representation\n", "        _, data['C'] = get_list_record(file_obj)\n\t    elif LNU == 2:\n\t        # Tabulated representation\n\t        _, data['nu'] = get_tab1_record(file_obj)\n\t    return data\n\tdef parse_mf1_mt455(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse delayed neutron data from MF=1, MT=455\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Delayed neutron data\n\t    \"\"\"\n\t    ZA, AWR, LDG, LNU, _, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LDG': LDG, 'LNU': LNU}\n\t    if LDG == 0:\n\t        # Delayed-group constants energy independent\n", "        _, data['lambda'] = get_list_record(file_obj)\n\t    elif LDG == 1:\n\t        # Delayed-group constants energy dependent\n\t        params, data['E_int'] = get_tab2_record(file_obj)\n\t        NE = params[5]\n\t        data['constants'] = []\n\t        for _ in range(NE):\n\t            (_, E, *_), values = get_list_record(file_obj)\n\t            data['constants'].append({\n\t                'E': E, 'lambda': values[::2], 'alpha': values[1::2]\n", "            })\n\t    # In MF=1, MT=455, the delayed-group abundances are actually not\n\t    # specified if the group constants are energy-independent. In this case,\n\t    # the abundances must be inferred from MF=5, MT=455 where multiple\n\t    # energy distributions are given.\n\t    if LNU == 1:\n\t        # Nu represented as polynomial\n\t        _, data['C'] = get_list_record(file_obj)\n\t    elif LNU == 2:\n\t        # Nu represented by tabulation\n", "        _, data['nu'] = get_tab1_record(file_obj)\n\t    return data\n\tdef parse_mf1_mt458(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse components of fission energy release from MF=1, MT=458\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n", "    dict\n\t        Components of fission energy release\n\t    \"\"\"\n\t    # Read first record and check whether any components appear as\n\t    # tabulated functions\n\t    ZA, AWR, _, LFC, _, NFC = get_cont_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LFC': LFC}\n\t    # Parse the ENDF LIST into an array.\n\t    items, values = get_list_record(file_obj)\n\t    data['NPLY'] = items[3]\n", "    components = ('EFR', 'ENP', 'END', 'EGP', 'EGD', 'EB', 'ENU', 'ER', 'ET')\n\t    # Associate each set of values and uncertainties with its label.\n\t    for i, name in enumerate(components):\n\t        coeffs = values[2*i::18]\n\t        deltas = values[2*i + 1::18]\n\t        data[name] = list(zip(coeffs, deltas))\n\t    # Check for tabulated data\n\t    if LFC == 1:\n\t        data['NFC'] = NFC\n\t        for _ in range(NFC):\n", "            # Get tabulated function\n\t            (_, _, LDRV, IFC), EIFC = get_tab1_record(file_obj)\n\t            # Determine which component it is and replace in dictionary\n\t            name = components[IFC]\n\t            data[name] = {'LDRV': LDRV, 'EIFC': EIFC}\n\t    return data\n\tdef parse_mf1_mt460(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse delayed photon data from MF=1, MT=460\n\t    Parameters\n\t    ----------\n", "    file_obj\n\t        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Delayed photon data\n\t    \"\"\"\n\t    ZA, AWR, LO, _, NG, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LO': LO}\n\t    if LO == 1:\n", "        data['NG'] = NG\n\t        # Read energy and time dependence for each photon\n\t        data['E'] = np.empty(NG)\n\t        data['T'] = []\n\t        for i in range(NG):\n\t            (E, *_), T = get_tab1_record(file_obj)\n\t            data['E'][i] = E\n\t            data['T'].append(T)\n\t    elif LO == 2:\n\t        # Read decay constants for precursors\n", "        _, data['lambda'] = get_list_record(file_obj)\n\t    return data\n"]}
{"filename": "src/endf/mf9.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_tab1_record\n\tdef parse_mf9_mf10(file_obj: TextIO, MF: int) -> dict:\n\t    \"\"\"Parse radionuclide production data from MF=9 or MF=10\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    MF\n\t        File number\n\t    Returns\n\t    -------\n\t    dict\n\t        Radionuclide production data\n\t    \"\"\"\n\t    ZA, AWR, LIS, _, NS, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LIS': LIS, 'NS': NS}\n\t    data['levels'] = []\n", "    for _ in range(NS):\n\t        # Determine what the product is\n\t        (QM, QI, IZAP, LFS), func = get_tab1_record(file_obj)\n\t        level_data = {'QM': QM, 'QI': QI, 'IZAP': IZAP, 'LFS': LFS}\n\t        if MF == 9:\n\t            level_data['Y'] = func\n\t        else:\n\t            level_data['sigma'] = func\n\t        data['levels'].append(level_data)\n\t    return data\n"]}
{"filename": "src/endf/mf33.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom .records import get_head_record, get_cont_record, get_list_record\n\tdef parse_mf33_subsection(file_obj) -> dict:\n\t    XMF1, XLFS1, MAT1, MT1, NC, NI = get_cont_record(file_obj)\n\t    subsection = {'XMF1': XMF1, 'XLFS1': XLFS1, 'MAT1': MAT1, 'MT1': MT1,\n\t                  'NC': NC, 'NI': NI}\n\t    subsection['nc_subsections'] = []\n\t    for _ in range(NC):\n", "        LTY = get_cont_record(file_obj)[3]\n\t        if LTY == 0:\n\t            (E1, E2, *_, NCI), values = get_list_record(file_obj)\n\t            subsub = {'LTY': LTY, 'E1': E1, 'E2': E2, 'NCI': NCI}\n\t            subsub['CI'] = values[::2]\n\t            subsub['XMTI'] = values[1::2]\n\t            subsection['nc_subsections'].append(subsub)\n\t        else:\n\t            (E1, E2, MATS, MTS, _, NEI), values = get_list_record(file_obj)\n\t            subsub = {'LTY': LTY, 'E1': E1, 'E2': E2, 'MATS': MATS,\n", "                        'MTS': MTS, 'NEI': NEI}\n\t            subsub['XMFS'] = values[0]\n\t            subsub['XLFSS'] = values[1]\n\t            subsub['EI'] = values[2::2]\n\t            subsub['WEI'] = values[3::2]\n\t        subsection['nc_subsections'].append(subsub)\n\t    subsection['ni_subsections'] = []\n\t    for _ in range(NI):\n\t        # Look ahead to determine LB\n\t        pos = file_obj.tell()\n", "        LB = get_cont_record(file_obj)[3]\n\t        file_obj.seek(pos)\n\t        if 0 <= LB <= 4:\n\t            (_, _, LT, LB, NT, NP), values = get_list_record(file_obj)\n\t            subsub = {'LT': LT, 'LB': LB, 'NT': NT, 'NP': NP}\n\t            k_array = values[:NT - NP]\n\t            subsub['Ek'] = k_array[::2]\n\t            subsub['Fk'] = k_array[1::2]\n\t            l_array = values[NT - NP:]\n\t            subsub['El'] = l_array[::2]\n", "            subsub['Fl'] = l_array[1::2]\n\t        elif LB == 5:\n\t            (_, _, LS, LB, NT, NE), values = get_list_record(file_obj)\n\t            subsub = {'LS': LS, 'LB': LB, 'NT': NT, 'NE': NE}\n\t            subsub['Ek'] = values[:NE]\n\t            # TODO: Reoder/reshape values for Fk,k' matrix\n\t            subsub['Fkk'] = values[NE:]\n\t        elif LB == 6:\n\t            (_, _, _, LB, NT, NER), values = get_list_record(file_obj)\n\t            NEC = (NT - 1)//NER\n", "            subsub = {'LB': LB, 'NT': NT, 'NER': NER, 'NEC': NEC}\n\t            subsub['ER'] = values[:NER]\n\t            subsub['EC'] = values[NER:NER + NEC]\n\t            # TODO: Reorder/reshape values for Fkl matrix\n\t            subsub['Fkl'] = values[NER + NEC:]\n\t        elif LB in (8, 9):\n\t            (_, _, LT, LB, NT, NP), values = get_list_record(file_obj)\n\t            subsub = {'LT': LT, 'LB': LB, 'NT': NT, 'NP': NP}\n\t            subsub['Ek'] = values[::2]\n\t            subsub['Fk'] = values[1::2]\n", "        else:\n\t            raise ValueError(f\"Unrecognized {LB=}\")\n\t        subsection['ni_subsections'].append(subsub)\n\t    return subsection\n\tdef parse_mf33(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse covariances of neutron cross sections from MF=33\n\t    Parameters\n\t    ----------\n\t    file_obj\n\t        File-like object to read from\n", "    Returns\n\t    -------\n\t    dict\n\t        Cross section covariance data\n\t    \"\"\"\n\t    ZA, AWR, _, MTL, _, NL = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'MTL': MTL, 'NL': NL, 'subsections': []}\n\t    for _ in range(NL):\n\t        subsection = parse_mf33_subsection(file_obj)\n\t        data['subsections'].append(subsection)\n", "    return data\n"]}
{"filename": "src/endf/mf12.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 Paul Romano\n\t# SPDX-License-Identifier: MIT\n\tfrom typing import TextIO\n\tfrom warnings import warn\n\tfrom .records import get_head_record, get_tab1_record, get_list_record\n\tdef parse_mf12(file_obj: TextIO) -> dict:\n\t    \"\"\"Parse photon production multiplicities from MF=12\n\t    Parameters\n\t    ----------\n\t    file_obj\n", "        File-like object to read from\n\t    Returns\n\t    -------\n\t    dict\n\t        Photon production multiplicity / transition probability data\n\t    \"\"\"\n\t    ZA, AWR, LO, LG, NK, _ = get_head_record(file_obj)\n\t    data = {'ZA': ZA, 'AWR': AWR, 'LO': LO, 'NK': NK}\n\t    if LO == 1:\n\t        # Multiplicities given -- start by reading total yield\n", "        if NK > 1:\n\t            _, data['Y'] = get_tab1_record(file_obj)\n\t        # Read multiplicities\n\t        data['multiplicities'] = []\n\t        for k in range(NK):\n\t            (Eg, ES, LP, LF), y = get_tab1_record(file_obj)\n\t            data_k = {'Eg': Eg, 'ES': ES, 'LP': LP, 'LF': LF, 'y': y}\n\t            data['multiplicities'].append(data_k)\n\t    elif LO == 2:\n\t        # Store whether simple (LG=1) or complex (LG=2) transitions\n", "        data['LG'] = LG\n\t        # Get transition probability data\n\t        (ES_NS, _, LP, _, _, NT), values = get_list_record(file_obj)\n\t        data['ES_NS'] = ES_NS\n\t        data['LP'] = LP\n\t        data['NT'] = NT\n\t        data['transitions'] = transition = []\n\t        for i in range(NT):\n\t            if LG == 1:\n\t                ES, TP = values[2*i : 2*(i + 1)]\n", "                transition.append({'ES': ES, 'TP': TP})\n\t            elif LG == 2:\n\t                ES, TP, GP = values[3*i : 3*(i + 1)]\n\t                transition.append({'ES': ES, 'TP': TP, 'GP': GP})\n\t    else:\n\t        warn(f\"Unrecognized LO value: {LO}\")\n\t    return data\n"]}
{"filename": "src/endf/material.py", "chunked_list": ["# SPDX-FileCopyrightText: 2023 OpenMC contributors and Paul Romano\n\t# SPDX-License-Identifier: MIT\n\t\"\"\"Module for parsing and manipulating data from ENDF files.\n\tAll the classes and functions in this module are based on the ENDF-102 report\n\ttitled \"ENDF-6 Formats Manual: Data Formats and Procedures for the Evaluated\n\tNuclear Data Files\". The version from January 2018 can be found at\n\thttps://doi.org/10.2172/1425114.\n\t\"\"\"\n\timport io\n\tfrom typing import List, Tuple, Any, Union, TextIO, Optional\n", "from warnings import warn\n\timport endf\n\tfrom .fileutils import PathLike\n\tfrom .mf1 import parse_mf1_mt451, parse_mf1_mt452, parse_mf1_mt455, \\\n\t    parse_mf1_mt458, parse_mf1_mt460\n\tfrom .mf2 import parse_mf2\n\tfrom .mf3 import parse_mf3\n\tfrom .mf4 import parse_mf4\n\tfrom .mf5 import parse_mf5\n\tfrom .mf6 import parse_mf6\n", "from .mf7 import parse_mf7_mt2, parse_mf7_mt4, parse_mf7_mt451\n\tfrom .mf8 import parse_mf8, parse_mf8_mt454, parse_mf8_mt457\n\tfrom .mf9 import parse_mf9_mf10\n\tfrom .mf12 import parse_mf12\n\tfrom .mf13 import parse_mf13\n\tfrom .mf14 import parse_mf14\n\tfrom .mf15 import parse_mf15\n\tfrom .mf23 import parse_mf23\n\tfrom .mf26 import parse_mf26\n\tfrom .mf27 import parse_mf27\n", "from .mf28 import parse_mf28\n\tfrom .mf33 import parse_mf33\n\tfrom .mf34 import parse_mf34\n\tfrom .mf40 import parse_mf40\n\t_LIBRARY = {\n\t    0: 'ENDF/B',\n\t    1: 'ENDF/A',\n\t    2: 'JEFF',\n\t    3: 'EFF',\n\t    4: 'ENDF/B High Energy',\n", "    5: 'CENDL',\n\t    6: 'JENDL',\n\t    17: 'TENDL',\n\t    18: 'ROSFOND',\n\t    21: 'SG-23',\n\t    31: 'INDL/V',\n\t    32: 'INDL/A',\n\t    33: 'FENDL',\n\t    34: 'IRDF',\n\t    35: 'BROND',\n", "    36: 'INGDB-90',\n\t    37: 'FENDL/A',\n\t    38: 'IAEA/PD',\n\t    41: 'BROND'\n\t}\n\t_SUBLIBRARY = {\n\t    0: 'Photo-nuclear data',\n\t    1: 'Photo-induced fission product yields',\n\t    3: 'Photo-atomic data',\n\t    4: 'Radioactive decay data',\n", "    5: 'Spontaneous fission product yields',\n\t    6: 'Atomic relaxation data',\n\t    10: 'Incident-neutron data',\n\t    11: 'Neutron-induced fission product yields',\n\t    12: 'Thermal neutron scattering data',\n\t    19: 'Neutron standards',\n\t    113: 'Electro-atomic data',\n\t    10010: 'Incident-proton data',\n\t    10011: 'Proton-induced fission product yields',\n\t    10020: 'Incident-deuteron data',\n", "    10030: 'Incident-triton data',\n\t    20030: 'Incident-helion (3He) data',\n\t    20040: 'Incident-alpha data'\n\t}\n\tclass Material:\n\t    \"\"\"ENDF material with multiple files/sections\n\t    Parameters\n\t    ----------\n\t    filename_or_obj\n\t        Path to ENDF file to read or an open file positioned at the start of an\n", "        ENDF material\n\t    encoding\n\t        Encoding of the ENDF-6 formatted file\n\t    Attributes\n\t    ----------\n\t    MAT\n\t        ENDF material number\n\t    sections\n\t        List of (MF, MT) sections\n\t    section_text\n", "        Dictionary mapping (MF, MT) to corresponding section of the ENDF file.\n\t    section_data\n\t        Dictionary mapping (MF, MT) to a dictionary representing the\n\t        corresponding section of the ENDF file.\n\t    \"\"\"\n\t    # TODO: Remove need to list properties here\n\t    MAT: int\n\t    sections: List[Tuple[int, int]]\n\t    section_text: dict\n\t    section_data: dict\n", "    def __init__(self, filename_or_obj: Union[PathLike, TextIO], encoding: Optional[str] = None):\n\t        if isinstance(filename_or_obj, PathLike.__args__):\n\t            fh = open(str(filename_or_obj), 'r', encoding=encoding)\n\t            need_to_close = True\n\t        else:\n\t            fh = filename_or_obj\n\t            need_to_close = False\n\t        self.section_text = {}\n\t        # Skip TPID record. Evaluators sometimes put in TPID records that are\n\t        # ill-formated because they lack MF/MT values or put them in the wrong\n", "        # columns.\n\t        if fh.tell() == 0:\n\t            fh.readline()\n\t        MF = 0\n\t        # Determine MAT number for this material\n\t        while MF == 0:\n\t            position = fh.tell()\n\t            line = fh.readline()\n\t            MF = int(line[70:72])\n\t        self.MAT = int(line[66:70])\n", "        fh.seek(position)\n\t        while True:\n\t            # Find next section\n\t            while True:\n\t                position = fh.tell()\n\t                line = fh.readline()\n\t                MAT = int(line[66:70])\n\t                MF = int(line[70:72])\n\t                MT = int(line[72:75])\n\t                if MT > 0 or MAT == 0:\n", "                    fh.seek(position)\n\t                    break\n\t            # If end of material reached, exit loop\n\t            if MAT == 0:\n\t                fh.readline()\n\t                break\n\t            section_text = ''\n\t            while True:\n\t                line = fh.readline()\n\t                if line[72:75] == '  0':\n", "                    break\n\t                else:\n\t                    section_text += line\n\t            self.section_text[MF, MT] = section_text\n\t        if need_to_close:\n\t            fh.close()\n\t        self.section_data = {}\n\t        for (MF, MT), text in self.section_text.items():\n\t            file_obj = io.StringIO(text)\n\t            if MF == 1 and MT == 451:\n", "                self.section_data[MF, MT] = parse_mf1_mt451(file_obj)\n\t            elif MF == 1 and MT in (452, 456):\n\t                self.section_data[MF, MT] = parse_mf1_mt452(file_obj)\n\t            elif MF == 1 and MT == 455:\n\t                self.section_data[MF, MT] = parse_mf1_mt455(file_obj)\n\t            elif MF == 1 and MT == 458:\n\t                self.section_data[MF, MT] = parse_mf1_mt458(file_obj)\n\t            elif MF == 1 and MT == 460:\n\t                self.section_data[MF, MT] = parse_mf1_mt460(file_obj)\n\t            elif MF == 2 and MT == 151:\n", "                self.section_data[MF, MT] = parse_mf2(file_obj)\n\t            elif MF == 3:\n\t                self.section_data[MF, MT] = parse_mf3(file_obj)\n\t            elif MF == 4:\n\t                self.section_data[MF, MT] = parse_mf4(file_obj)\n\t            elif MF == 5:\n\t                self.section_data[MF, MT] = parse_mf5(file_obj)\n\t            elif MF == 6:\n\t                self.section_data[MF, MT] = parse_mf6(file_obj)\n\t            elif MF == 7 and MT == 2:\n", "                self.section_data[MF, MT] = parse_mf7_mt2(file_obj)\n\t            elif MF == 7 and MT == 4:\n\t                self.section_data[MF, MT] = parse_mf7_mt4(file_obj)\n\t            elif MF == 7 and MT == 451:\n\t                self.section_data[MF, MT] = parse_mf7_mt451(file_obj)\n\t            elif MF == 8 and MT in (454, 459):\n\t                self.section_data[MF, MT] = parse_mf8_mt454(file_obj)\n\t            elif MF == 8 and MT == 457:\n\t                self.section_data[MF, MT] = parse_mf8_mt457(file_obj)\n\t            elif MF == 8:\n", "                self.section_data[MF, MT] = parse_mf8(file_obj)\n\t            elif MF in (9, 10):\n\t                self.section_data[MF, MT] = parse_mf9_mf10(file_obj, MF)\n\t            elif MF == 12:\n\t                self.section_data[MF, MT] = parse_mf12(file_obj)\n\t            elif MF == 13:\n\t                self.section_data[MF, MT] = parse_mf13(file_obj)\n\t            elif MF == 14:\n\t                self.section_data[MF, MT] = parse_mf14(file_obj)\n\t            elif MF == 15:\n", "                self.section_data[MF, MT] = parse_mf15(file_obj)\n\t            elif MF == 23:\n\t                self.section_data[MF, MT] = parse_mf23(file_obj)\n\t            elif MF == 26:\n\t                self.section_data[MF, MT] = parse_mf26(file_obj)\n\t            elif MF == 27:\n\t                self.section_data[MF, MT] = parse_mf27(file_obj)\n\t            elif MF == 28:\n\t                self.section_data[MF, MT] = parse_mf28(file_obj)\n\t            elif MF == 33:\n", "                self.section_data[MF, MT] = parse_mf33(file_obj)\n\t            elif MF == 34:\n\t                self.section_data[MF, MT] = parse_mf34(file_obj, MT)\n\t            elif MF == 40:\n\t                self.section_data[MF, MT] = parse_mf40(file_obj)\n\t            else:\n\t                warn(f\"{MF=}, {MT=} ignored\")\n\t    def __contains__(self, mf_mt: Tuple[int, int]) -> bool:\n\t        return mf_mt in self.section_data\n\t    def __getitem__(self, mf_mt: Tuple[int, int]) -> dict:\n", "        return self.section_data[mf_mt]\n\t    def __setitem__(self, key: Tuple[int, int], value):\n\t        self.section_data[key] = value\n\t    def __repr__(self) -> str:\n\t        metadata = self.section_data[1, 451]\n\t        name = metadata['ZSYMAM'].replace(' ', '')\n\t        return '<{} for {} {}>'.format(_SUBLIBRARY[metadata['NSUB']], name,\n\t                                       _LIBRARY[metadata['NLIB']])\n\t    @property\n\t    def sections(self) -> List[Tuple[int, int]]:\n", "        return list(self.section_text.keys())\n\t    def interpret(self) -> Any:\n\t        \"\"\"Get high-level interface class for the ENDF material\n\t        Returns\n\t        -------\n\t        Instance of a high-level interface class, e.g.,\n\t        :class:`endf.IncidentNeutron`.\n\t        \"\"\"\n\t        NSUB = self.section_data[1, 451]['NSUB']\n\t        if NSUB == 10:\n", "            return endf.IncidentNeutron.from_endf(self)\n\t        else:\n\t            raise NotImplementedError(f\"No class implemented for {NSUB=}\")\n\tdef get_materials(filename: PathLike, encoding: Optional[str] = None) -> List[Material]:\n\t    \"\"\"Return a list of all materials within an ENDF file.\n\t    Parameters\n\t    ----------\n\t    filename\n\t        Path to ENDF-6 formatted file\n\t    encoding\n", "        Encoding of the ENDF-6 formatted file\n\t    Returns\n\t    -------\n\t    A list of ENDF materials\n\t    \"\"\"\n\t    materials = []\n\t    with open(str(filename), 'r', encoding=encoding) as fh:\n\t        while True:\n\t            pos = fh.tell()\n\t            line = fh.readline()\n", "            if line[66:70] == '  -1':\n\t                break\n\t            fh.seek(pos)\n\t            materials.append(Material(fh))\n\t    return materials\n"]}
