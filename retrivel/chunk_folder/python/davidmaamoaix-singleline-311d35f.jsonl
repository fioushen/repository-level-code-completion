{"filename": "setup.py", "chunked_list": []}
{"filename": "test/test_transpile_simple.py", "chunked_list": ["# Testing `ast.If` and `ast.FunctionDef` transpilation.\n\timport io\n\timport ast\n\timport unittest\n\timport textwrap\n\timport contextlib\n\timport networkx as nx\n\tfrom .context import singleline\n\tfrom .utils import plot_graph\n\tdef format(code):\n", "    return textwrap.dedent(code).strip('\\n')\n\tSIMPLE_TESTS = {\n\t    format(\"\"\"\n\t    def greet_user(name):\n\t        if name == \"Alice\":\n\t            return \"Hello, Alice!\"\n\t        else:\n\t            return f\"Hello, {name}!\"\n\t    print(greet_user(\"Alice\"))\n\t    \"\"\"): \"Hello, Alice!\",\n", "    format(\"\"\"\n\t    import math\n\t    def check_even_odd(number):\n\t        if number % 2 == 0:\n\t            return \"even\"\n\t        else:\n\t            return \"odd\"\n\t    print(check_even_odd(math.ceil(3.5)))\n\t    \"\"\"): \"even\",\n\t    format(\"\"\"\n", "    def get_grade(score):\n\t        if score >= 90:\n\t            return \"A\"\n\t        elif score >= 80:\n\t            return \"B\"\n\t        elif score >= 70:\n\t            return \"C\"\n\t        elif score >= 60:\n\t            return \"D\"\n\t        else:\n", "            return \"F\"\n\t    print(get_grade(75))\n\t    \"\"\"): \"C\",\n\t    format(\"\"\"\n\t    def calculate_tax(income):\n\t        def tax_bracket(income):\n\t            if income <= 9875:\n\t                return 0.10\n\t            elif income <= 40125:\n\t                return 0.12\n", "            elif income <= 85525:\n\t                return 0.22\n\t            elif income <= 163300:\n\t                return 0.24\n\t            elif income <= 207350:\n\t                return 0.32\n\t            elif income <= 518400:\n\t                return 0.35\n\t            else:\n\t                return 0.37\n", "        return income * tax_bracket(income)\n\t    print(calculate_tax(50000))\n\t    \"\"\"): \"11000.0\",\n\t    format(\"\"\"\n\t    def print_triangle(size):\n\t        if size <= 0:\n\t            return\n\t        print_triangle(size - 1)\n\t        print(\"*\" * size)\n\t    print_triangle(3)\n", "    \"\"\"): \"*\\n**\\n***\",\n\t    format(\"\"\"\n\t    def compare_numbers(a, b, c):\n\t        if a == b and b == c:\n\t            return \"All numbers are equal\"\n\t        elif a == b or b == c or a == c:\n\t            return \"Two numbers are equal\"\n\t        else:\n\t            return \"All numbers are different\"\n\t    print(compare_numbers(3, 5, 3))\n", "    \"\"\"): \"Two numbers are equal\",\n\t    format(\"\"\"\n\t    def check_age_category(age):\n\t        if age < 0:\n\t            return \"Invalid age\"\n\t        elif age < 13:\n\t            return \"Child\"\n\t        elif age < 18:\n\t            return \"Teenager\"\n\t        elif age < 65:\n", "            return \"Adult\"\n\t        else:\n\t            return \"Senior\"\n\t    print(check_age_category(42))\n\t    \"\"\"): \"Adult\",\n\t    format(\"\"\"\n\t    def nested_function_example(x):\n\t        def inner_function(y):\n\t            if y > 0:\n\t                return y * 2\n", "            else:\n\t                return -y\n\t        if x > 0:\n\t            return inner_function(x)\n\t        else:\n\t            return inner_function(-x)\n\t    print(nested_function_example(-5))\n\t    \"\"\"): \"10\",\n\t    format(\"\"\"\n\t    def is_palindrome(word):\n", "        word = word.lower()\n\t        return word == word[::-1]\n\t    word = \"Level\"\n\t    if is_palindrome(word):\n\t        print(f\"{word} is a palindrome.\")\n\t    else:\n\t        print(f\"{word} is not a palindrome.\")\n\t    \"\"\"): \"Level is a palindrome.\",\n\t    format(\"\"\"\n\t    def fibonacci(n):\n", "        if n <= 0:\n\t            return 0\n\t        elif n == 1:\n\t            return 1\n\t        else:\n\t            return fibonacci(n - 1) + fibonacci(n - 2)\n\t    n = 7\n\t    print(fibonacci(n))\n\t    \"\"\"): \"13\"\n\t}\n", "ASSERT_TESTS = {\n\t    format(\"\"\"\n\t    def power(base, exponent):\n\t        if exponent == 0:\n\t            return 1\n\t        else:\n\t            return base * power(base, exponent - 1)\n\t    def square(n):\n\t        return power(n, 2)\n\t    def cube(n):\n", "        return power(n, 3)\n\t    result = square(4) + cube(2)\n\t    assert result == 24\n\t    \"\"\"): False,\n\t    format(\"\"\"\n\t    def double(x):\n\t        return x * 2\n\t    def triple(x):\n\t        return x * 3\n\t    def apply_function(f, x):\n", "        return f(x)\n\t    assert apply_function(double, 5) == 10\n\t    assert apply_function(triple, 5) == 15\n\t    \"\"\"): False,\n\t    format(\"\"\"\n\t    def square(x):\n\t        return x * x\n\t    def cube(x):\n\t        return x * x * x\n\t    def test_square_and_cube():\n", "        assert square(4) == 16\n\t        assert cube(3) == 27\n\t        if square(3) > 10:\n\t            assert cube(2) == 9\n\t    test_square_and_cube()\n\t    \"\"\"): False,\n\t    format(\"\"\"\n\t    def add(x, y):\n\t        return x + y\n\t    def subtract(x, y):\n", "        return x - y\n\t    def test_operations():\n\t        assert add(5, 3) == 8\n\t        if subtract(7, 4) == 3:\n\t            assert add(1, 1) == 3\n\t    test_operations()\n\t    \"\"\"): True,\n\t    format(\"\"\"\n\t    def multiply(x, y):\n\t        return x * y\n", "    def divide(x, y):\n\t        return x / y\n\t    def test_multiply_and_divide():\n\t        assert multiply(3, 4) == 12\n\t        assert divide(12, 3) == 4\n\t        if divide(15, 5) == 3:\n\t            assert multiply(2, 2) == 6\n\t    test_multiply_and_divide()\n\t    \"\"\"): True\n\t}\n", "class ControlFlowGraphTest(unittest.TestCase):\n\t    def test_output(self):\n\t        for source, expect in SIMPLE_TESTS.items():\n\t            code = singleline.compile(source)\n\t            sout = io.StringIO()\n\t            with contextlib.redirect_stdout(sout):\n\t                exec(code, {})\n\t            self.assertEqual(sout.getvalue().strip(), expect)\n\t    def test_assert(self):\n\t        for source, has_error in ASSERT_TESTS.items():\n", "            code = singleline.compile(source)\n\t            if has_error:\n\t                with self.assertRaises(AssertionError):\n\t                    exec(code, {})\n\t            else:\n\t                exec(code, {})\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "test/context.py", "chunked_list": ["import sys\n\timport os\n\tsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\timport singleline\n"]}
{"filename": "test/test_cfg.py", "chunked_list": ["import ast\n\timport unittest\n\timport networkx as nx\n\tfrom .context import singleline\n\tfrom .utils import plot_graph\n\tSIMPLE_FUNC = \"\"\"\n\ta = int(input())\n\ta = a + 1\n\tif a == 2:\n\t    a += 2\n", "elif a == 3:\n\t    assert 2 == 1, 'nope'\n\tb = 3\n\tprint(a, b)\n\t\"\"\"\n\tCOMPLEX_FUNC = \"\"\"\n\tdef foo():\n\t    a = a + 1\n\t    if a == 2:\n\t        c = 2\n", "    elif a == 3:\n\t        for i in range(10):\n\t            if i > 5:\n\t                break\n\t            print(123)\n\t            if a == 20:\n\t                continue\n\t                import numpy as np\n\t    b = 3\n\t    print(b)\n", "foo()\n\t\"\"\"\n\tclass ControlFlowGraphTest(unittest.TestCase):\n\t    def test_simple_linear(self):\n\t        tree, id_gen = singleline.analysis.preprocess(SIMPLE_FUNC)\n\t        singleline.analysis.control_flow_pass(tree)\n\t        graph = tree.graph\n\t        common = singleline.misc.get_all_convergence(graph, tree)\n\t        for i, ans in zip(common[-1].bundle, ['b=3', 'print(a,b)']):\n\t            self.assertEqual(ast.unparse(i).replace(' ', ''), ans)\n", "    def test_complex_func(self):\n\t        tree, id_gen = singleline.analysis.preprocess(COMPLEX_FUNC)\n\t        singleline.analysis.control_flow_pass(tree)\n\t        graph: nx.classes.DiGraph = tree.body[0].graph\n\t        common = singleline.misc.get_all_convergence(graph, tree.body[0])\n\t        for i, ans in zip(common[-1].bundle, ['b=3', 'print(b)']):\n\t            self.assertEqual(ast.unparse(i).replace(' ', ''), ans)\n\tif __name__ == '__main__':\n\t    unittest.main()\n"]}
{"filename": "test/__init__.py", "chunked_list": []}
{"filename": "test/utils.py", "chunked_list": ["import networkx as nx\n\timport matplotlib.pyplot as plt\n\tdef plot_graph(graph: nx.classes.DiGraph):\n\t    labels = {i: str(type(i)).split('.')[-1][: -2] for i in graph.nodes()}\n\t    nx.draw_networkx(graph, labels=labels)\n\t    plt.show()\n"]}
{"filename": "test/test_loop_analysis.py", "chunked_list": ["import ast\n\timport unittest\n\tfrom .context import singleline\n\tSIMP_LOOP_MUT = \"\"\"\n\ta = 0\n\tb = 3\n\twhile a < 20:\n\t    print(a)\n\t    a += 1\n\t    b = b * a + 1\n", "print(f'End: {a} {b}')\n\t\"\"\"\n\tclass MutatedVarTest(unittest.TestCase):\n\t    def test_simple_loop(self):\n\t        tree, id_gen = singleline.analysis.preprocess(SIMP_LOOP_MUT)\n\t        singleline.analysis.control_flow_pass(tree)\n\t        singleline.transform.init_loop_mutations(tree.body[2])\n\t        self.assertEqual(tree.body[2].mutated_vars, {'a', 'b'})\n"]}
{"filename": "singleline/__init__.py", "chunked_list": ["from . import analysis\n\tfrom . import misc\n\tfrom . import transform\n\tfrom .compile import compile\n"]}
{"filename": "singleline/compile.py", "chunked_list": ["import ast\n\tfrom typing import Tuple\n\tfrom .analysis import preprocess, control_flow_pass\n\tfrom .transform import transpile\n\tdef compile(program: str) -> str:\n\t    tree, id_gen = preprocess(program)\n\t    control_flow_pass(tree)\n\t    graph = tree.graph\n\t    code = transpile(graph, id_gen, tree)\n\t    return code\n"]}
{"filename": "singleline/transform/context.py", "chunked_list": ["from _ast import ClassDef, For, FunctionDef, Name\n\timport ast\n\tfrom typing import Any, Set\n\tclass LocalVariableVisitor(ast.NodeVisitor):\n\t    \"\"\"\n\t    Responsible for keeping track of the defined local variables within a scope.\n\t    This is used in conjunction with mutated variable analysis during loop\n\t    transpilation to identify the variables that needs to be stored.\n\t    Unlike `MutationRecorder`, this class keeps a record on-the-fly as the\n\t    relevant scope is scanned, and is a more generalized version of mutation\n", "    recording that does not treat loops as different scopes.\n\t    The transpiled loop representation is as follow:\n\t    1. Find all mutated variables in the loop. For the ones that are contained\n\t    in `LocalVariableVisitor` before the loop, initialize the store list to\n\t    their value. Otherwise, set their initial value to `None`.\n\t    2. Replace all occurrences of mutated variables in the loop with the store\n\t    list (for both storing and using). This replacement should propagate into\n\t    nested function definitions until one layer of function definition mutates\n\t    the value of the variable.\n\t    3. Recursively transpiles the \n", "    \"\"\"\n\t    vars: Set[str]\n\t    def __init__(self):\n\t        self.vars = set()\n\t    def visit_Name(self, node: Name) -> Any:\n\t        if isinstance(node.ctx, ast.Store):\n\t            self.vars.add(node.id)\n\t        return self.generic_visit(node)\n\t    def visit_For(self, node: For) -> Any:\n\t        targets = [node.target] if isinstance(node.target, ast.Name) else node.target\n", "        for i in targets:\n\t            self.vars.add(i.id)\n\t    def visit_FunctionDef(self, node: FunctionDef) -> Any:\n\t        self.vars.add(node.name)\n\t    def visit_ClassDef(self, node: ClassDef) -> Any:\n\t        self.vars.add(node.name)\n"]}
{"filename": "singleline/transform/__init__.py", "chunked_list": ["from .replace import *\n\tfrom .transpiler import *\n"]}
{"filename": "singleline/transform/replace.py", "chunked_list": ["# Utility code for performing replacing operation on source code.\n\timport ast\n\tfrom typing import Union\n\tfrom ..analysis import MutationRecorder\n\tdef init_loop_mutations(loop: Union[ast.For, ast.While]) -> None:\n\t    recorder = MutationRecorder()\n\t    recorder.visit(loop)\n"]}
{"filename": "singleline/transform/transpile_context.py", "chunked_list": ["import ast\n\timport networkx as nx\n\tfrom typing import List\n\tclass NameContextManager:\n\t    \"\"\"\n\t    Manages the links between a graph node and the context variables generated\n\t    from it (e.g., the mutable variable collection of a loop).\n\t    An instantiation of this class is treated as a singleton through a single\n\t    compilation session as node-context links persist across the different\n\t    scopes of a program.\n", "    \"\"\"\n\t    pass\n\tclass ScopedExprManager:\n\t    \"\"\"\n\t    Manages the accumulation of transpiled code in an expression form. This\n\t    class is mainly responsible for structuring the `return` propagation up\n\t    nested structures in the target code.\n\t    \"\"\"\n\t    exprs: List[str]\n\t    has_ret: bool\n", "    def __init__(self) -> None:\n\t        self.exprs = []\n\t        self.has_ret = False\n\t    def add(self, expr: str, should_ret: bool = False):\n\t        assert isinstance(expr, str)\n\t        if not should_ret:\n\t            if self.has_ret:\n\t                raise ValueError(\n\t                    'This tuple layer is already sealed with a return value, '\n\t                    'and cannot be mutated further'\n", "                )\n\t            self.exprs.append(expr)\n\t        else:\n\t            if self.has_ret:\n\t                raise ValueError('This tuple layer is already marked with a return value')\n\t            self.exprs.append(expr)\n\t            self.has_ret = True\n\t    def build(self) -> str:\n\t        inner = ', '.join(self.exprs)\n\t        # Marks the expression as a tuple with an appended comma.\n", "        if len(self.exprs) == 1:\n\t            inner += ','\n\t        tup_expr = f'({inner})'\n\t        # Propagates the return value up the nested tuples.\n\t        if self.has_ret:\n\t            tup_expr += '[-1]'\n\t        return tup_expr\n"]}
{"filename": "singleline/transform/transpiler.py", "chunked_list": ["import ast\n\timport networkx as nx\n\tfrom typing import Union\n\tfrom ..misc.identifiers import IdentifierGenerator\n\tfrom ..misc.graph_utils import *\n\tfrom ..misc.graph_nodes import NodeBundle, CFGLabels\n\tfrom ..misc.types import CFNode\n\tfrom .transpile_context import ScopedExprManager\n\tfrom .replace import init_loop_mutations\n\tdef transpile(\n", "    graph: nx.classes.DiGraph,\n\t    id_gen: IdentifierGenerator,\n\t    header: CFNode,\n\t    stop: Union[CFNode, None] = None\n\t) -> str:\n\t    entry = get_next_from_label(graph, header, CFGLabels.CONTENT)\n\t    transpiler = GraphTranspiler(id_gen, graph)\n\t    return transpiler.transpile(entry, stop)\n\tclass GraphTranspiler:\n\t    \"\"\"\n", "    This class is responsible for transpiling a sub-graph into a single-line\n\t    code, as well as keep track of the session/environment of each syntax\n\t    construct (e.g., through `ContextManager`).\n\t    \"\"\"\n\t    id_gen: IdentifierGenerator\n\t    graph: nx.classes.DiGraph\n\t    def __init__(self, id_gen: IdentifierGenerator, graph: nx.classes.DiGraph):\n\t        self.id_gen = id_gen\n\t        self.graph = graph\n\t    def transpile(self, node: CFNode, stop: Union[CFNode, None]) -> str:\n", "        \"\"\"\n\t        Transpiles a code given a node in the CFG.\n\t        \"\"\"\n\t        assert node in self.graph\n\t        ctx = ScopedExprManager()\n\t        sep = get_all_convergence(self.graph, node, stop)\n\t        # Empty bundle (e.g., empty `else` block).\n\t        if not sep:\n\t            return '()'\n\t        # Iterates through all nodes and convert until reaching the next one.\n", "        # The `stop` node is needed to execute `get_all_convergence` inside\n\t        # each branch in sub-statements.\n\t        for start, stop in zip(sep, sep[1 :]):\n\t            self._transpile_node(start, stop, ctx)\n\t        self._transpile_node(sep[-1], stop, ctx, True)\n\t        return ctx.build()\n\t    def _transpile_node(\n\t        self,\n\t        node: CFNode,\n\t        stop: Union[CFNode, None],\n", "        ctx: ScopedExprManager,\n\t        try_ret: bool = False\n\t    ) -> None:\n\t        if isinstance(node, NodeBundle):\n\t            for stmt in node.bundle:\n\t                self._transpile_single(stmt, ctx)\n\t        # `ast.If` is the only node that respects `try_ret`.\n\t        elif isinstance(node, ast.If):\n\t            if_branch = get_next_from_label(self.graph, node, CFGLabels.IF)\n\t            else_branch = get_next_from_label(self.graph, node, CFGLabels.ELSE)\n", "            if_code = self.transpile(if_branch, stop)\n\t            else_code = self.transpile(else_branch, stop)\n\t            cond_code = ast.unparse(node.test)\n\t            ctx.add(\n\t                f'{if_code} if {cond_code} else {else_code}',\n\t                try_ret\n\t            )\n\t        elif isinstance(node, ast.While):\n\t            inf = ast.parse('iter(int, 1)')\n\t            has_ret = has_labeled_edge(self.graph, node, CFGLabels.RET_FLAG)\n", "            init_loop_mutations(node)\n\t        else:\n\t            raise NotImplementedError\n\t    def _transpile_single(self, stmt: ast.AST, ctx: ScopedExprManager) -> None:\n\t        if isinstance(stmt, ast.Assign):\n\t            # Preprocessor unwraps all tuple assignments, so it is safe to\n\t            # directly index the 0-th element.\n\t            name = stmt.targets[0]\n\t            value = stmt.value\n\t            code = ast.NamedExpr(name, value)\n", "            ctx.add(ast.unparse(code))\n\t        elif isinstance(stmt, ast.Return):\n\t            if stmt.value is None:\n\t                ctx.add('None', True)\n\t            else:\n\t                ctx.add(ast.unparse(stmt.value), True)\n\t        elif isinstance(stmt, ast.Raise):\n\t            ctx.add(f'(_ for i in ()).throw({ast.unparse(stmt.exc)})')\n\t        elif isinstance(stmt, ast.Yield) or isinstance(stmt, ast.YieldFrom):\n\t            ctx.add(f'({ast.unparse(stmt)})')\n", "        elif isinstance(stmt, ast.FunctionDef):\n\t            body = transpile(stmt.graph, self.id_gen, stmt)\n\t            # some really hacky transpiling\n\t            exp = ast.Lambda(stmt.args, ast.Tuple([]))\n\t            code = ast.unparse(exp)[: -2] + body\n\t            ctx.add(f'{stmt.name} := {code}')\n\t        else:\n\t            ctx.add(ast.unparse(stmt))\n"]}
{"filename": "singleline/analysis/preprocessor.py", "chunked_list": ["from _ast import AsyncFor, AsyncFunctionDef\n\timport ast\n\tfrom typing import Any, Tuple\n\tfrom ..misc import IdentifierGenerator, get_params\n\tfrom ..misc.types import VRet\n\tdef preprocess(program: str) -> Tuple[ast.AST, IdentifierGenerator]:\n\t    tree = ast.parse(program)\n\t    collector = InfoCollector()\n\t    collector.visit(tree)\n\t    transformer = PreprocessTransformer(collector.id_gen)\n", "    transformer.visit(tree)\n\t    # Flattens all nested lists in statements.\n\t    tree = ast.parse(ast.unparse(tree))\n\t    return tree, transformer.id_gen\n\tclass InfoCollector(ast.NodeVisitor):\n\t    \"\"\"\n\t    This class is responsible for collecting trivial data about a given piece\n\t    of code, as well as raise an error for unsupported statements.\n\t    \"\"\"\n\t    id_gen: IdentifierGenerator\n", "    def __init__(self):\n\t        self.id_gen = IdentifierGenerator(set())\n\t    def visit_Name(self, node: ast.Name) -> Any:\n\t        self.id_gen.add_used(node.id)\n\t        return self.generic_visit(node)\n\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n\t        self.id_gen.add_used(node.name)\n\t        for name in get_params(node):\n\t            self.id_gen.add_used(name)\n\t        return self.generic_visit(node)\n", "    def visit_ClassDef(self, node: ast.ClassDef) -> Any:\n\t        self.id_gen.add_used(node.name)\n\t        return self.generic_visit(node)\n\t    def visit_Import(self, node: ast.Import) -> Any:\n\t        aliases = [i.name if i.asname is None else i.asname for i in node.names]\n\t        for name in aliases:\n\t            self.id_gen.add_used(name)\n\t        return self.generic_visit(node)\n\t    def visit_ImportFrom(self, node: ast.ImportFrom) -> Any:\n\t        aliases = [i.name if i.asname is None else i.asname for i in node.names]\n", "        for name in aliases:\n\t            self.id_gen.add_used(name)\n\t        return self.generic_visit(node)\n\t    def visit_Delete(self, node: ast.Delete) -> None:\n\t        self._raise_impl(node, 'The `del` statement is not yet supported!')\n\t    def visit_Try(self, node: ast.Try) -> None:\n\t        self._raise_impl(node, 'The `try` statement is not yet supported!')\n\t    #def visit_TryStar(self, node: ast.TryStar) -> None:\n\t    #    self._raise_impl(node, 'The `try*` statement is not yet supported!')\n\t    def visit_With(self, node: ast.With) -> None:\n", "        self._raise_impl(node, 'The `with` statement is not yet supported!')\n\t    def visit_AsyncWith(self, node: ast.AsyncWith) -> None:\n\t        self._raise_impl(\n\t            node,\n\t            'The `async with` statement is not yet supported!'\n\t        )\n\t    def visit_AsyncFor(self, node: AsyncFor) -> None:\n\t        self._raise_impl(\n\t            node,\n\t            'The `async for` statement is not yet supported!'\n", "        )\n\t    def visit_AsyncFunctionDef(self, node: AsyncFunctionDef) -> None:\n\t        self._raise_impl(\n\t            node,\n\t            'The `async def` statement is not yet supported!'\n\t        )\n\t    def _raise_impl(self, node: ast.AST, msg: str) -> None:\n\t        raise NotImplementedError(f'Line {node.lineno}: {msg}')\n\tclass PreprocessTransformer(ast.NodeTransformer):\n\t    \"\"\"\n", "    This class is responsible for applying preprocessing transformations\n\t    to the AST to allow easy handling of syntax sugar. It is meant to\n\t    apply rudimentary code transformation without keeping a context or\n\t    performing static analysis.\n\t    The current list of preprocessing operations are:\n\t    - Rewriting indexed assignments (e.g., `a[0] = 2` to `a.__setitem__(0, 2)`)\n\t    - Rewriting augmented assignments (e.g., `a += b` to `a = a + b`)\n\t    - Unwrapping tuple assignments\n\t    - Unwrapping `import` statements\n\t    - Appending `return None` to all functions\n", "    - Rewriting `assert` with `if`\n\t    \"\"\"\n\t    id_gen: IdentifierGenerator\n\t    def __init__(self, id_gen: IdentifierGenerator):\n\t        self.id_gen = id_gen\n\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> VRet:\n\t        node.body.append(ast.Return(ast.Constant(None)))\n\t        return self.generic_visit(node)\n\t    def visit_AugAssign(self, node: ast.AugAssign) -> VRet:\n\t        # `self.visit` is used instead of `self.generic_visit` because the\n", "        # resulting `ast.Assign` node might need to undergo more transformations\n\t        return self.visit(ast.Assign(\n\t            [node.target],\n\t            ast.BinOp(node.target, node.op, node.value),\n\t            lineno=node.lineno\n\t        ))\n\t    # TODO: preprocess star names (e.g., `*foo, bar = [1, 2, 3]`)\n\t    def visit_Assign(self, node: ast.Assign) -> VRet:\n\t        chain = node.targets + [node.value]\n\t        # for `a = b = c = value`\n", "        return [\n\t            self._mutate_assign(k, v)\n\t            for v, k in zip(chain[:: -1], chain[-2 :: -1])\n\t        ]\n\t    def visit_Import(self, node: ast.Import) -> VRet:\n\t        names = [i.name for i in node.names]\n\t        modules = [\n\t            ast.Call(ast.Name('__import__'), [ast.Constant(i)], [])\n\t            for i in names\n\t        ]\n", "        aliases = [i.name if i.asname is None else i.asname for i in node.names]\n\t        # `import xyz.abc` imports the left-most module `xyz` to the\n\t        # left-most name `xyz`, thus `xyz = __import__('xyz.abc')`\n\t        asn_names = [i.split('.')[0] for i in aliases]\n\t        assigns = [\n\t            self._mutate_assign(ast.Name(name), module)\n\t            for name, module in zip(asn_names, modules)\n\t        ]\n\t        return assigns\n\t    def visit_ImportFrom(self, node: ast.ImportFrom) -> VRet:\n", "        module = node.module\n\t        call = ast.Call(ast.Name('__import__'), [ast.Constant(module)], [])\n\t        packed_var_name = self.id_gen.throwaway()\n\t        init = self._mutate_assign(ast.Name(packed_var_name), call)\n\t        # gets the `['def', 'ghi']` part of `from abc.def.ghi import foo`\n\t        additional_path = module.split('.')[1 :]\n\t        # generators the `__.abc.def` in `foo = __.abc.def.foo`\n\t        def _gen_prefix():\n\t            root = ast.Name(packed_var_name)\n\t            for name in additional_path:\n", "                root = ast.Attribute(root, name)\n\t            return root\n\t        var_names = [i.name for i in node.names]\n\t        packed_rhs = [\n\t            ast.Attribute(_gen_prefix(), name)\n\t            for name in var_names\n\t        ]\n\t        aliases = [i.asname if i.asname is not None else i.name for i in node.names]\n\t        assigns = [\n\t            self._mutate_assign(ast.Name(name), rhs)\n", "            for name, rhs in zip(aliases, packed_rhs)\n\t        ]\n\t        return [self.generic_visit(init)] + assigns\n\t    def visit_Assert(self, node: ast.Assert) -> VRet:\n\t        if node.msg is None:\n\t            err = ast.Raise(ast.Name('AssertionError'))\n\t        else:\n\t            err = ast.Raise(ast.Call(ast.Name('AssertionError'), [node.msg], []))\n\t        # `raise` is converted during code emitting instead of preprocessing\n\t        # in case future handling of try-catch requires changes on the way\n", "        # `raise` is compiled.\n\t        return ast.If(ast.UnaryOp(ast.Not(), node.test), [err], [])\n\t    # nodes returned from this does not need to be visited\n\t    def _mutate_assign(self, var: ast.expr, val: ast.expr):\n\t        # assignment to a subscript\n\t        if isinstance(var, ast.Subscript):\n\t            return self.generic_visit(ast.Expr(ast.Call(\n\t                ast.Attribute(var.value, '__setitem__'),\n\t                [self._parse_slice(var.slice), val],\n\t                []\n", "            )))\n\t        # packed assignment\n\t        if isinstance(var, ast.List) or isinstance(var, ast.Tuple):\n\t            name = self.id_gen.get_name('unpack')\n\t            init = ast.Assign([ast.Name(name)], val, lineno=0)\n\t            return [\n\t                self.generic_visit(init),\n\t                *[\n\t                    self._mutate_assign(\n\t                        v,\n", "                        ast.Subscript(ast.Name(name), ast.Constant(idx))\n\t                    ) for idx, v in enumerate(var.elts)\n\t                ]\n\t            ]\n\t        return self.generic_visit(ast.Assign([var], val, lineno=0))\n\t    def _parse_slice(self, slice: ast.expr) -> ast.expr:\n\t        if isinstance(slice, ast.Slice):\n\t            return ast.Call(\n\t                ast.Name('slice'),\n\t                [\n", "                    slice.lower or ast.Constant(value=None),\n\t                    slice.upper or ast.Constant(value=None),\n\t                    slice.step or ast.Constant(value=None)\n\t                ],\n\t                []\n\t            )\n\t        return slice\n"]}
{"filename": "singleline/analysis/control_flow.py", "chunked_list": ["import ast\n\timport networkx as nx\n\tfrom typing import List, Tuple, Union\n\tfrom ..misc.types import CFNode\n\tfrom ..misc.graph_utils import NodeBundle, clean_up_graph, CFGLabels\n\tfrom .interrupt import has_interrupt\n\tdef control_flow_pass(node: Union[ast.Module, ast.FunctionDef]) -> None:\n\t    \"\"\"\n\t    Populates the `graph` attribute of a module or function with the CFG\n\t    of its content with an instance of `nx.DiGraph`.\n", "    \"\"\"\n\t    cfg = ControlFlowGraph()\n\t    cfg.build_cfg(node, node.body)\n\t    node.graph = cfg.graph\n\t    clean_up_graph(node.graph)\n\tclass ControlFlowGraph:\n\t    \"\"\"\n\t    Generates the control flow graph of the source program so that lambda\n\t    and branching structures can be determined statically.\n\t    \"\"\"\n", "    graph: nx.classes.DiGraph\n\t    def __init__(self) -> None:\n\t        self.graph = nx.classes.DiGraph()\n\t    def build_cfg(self, head: ast.AST, code: List[ast.AST]) -> None:\n\t        # `head` is an `ast.AST` that represents the container for `code`. It is\n\t        # used as an entry point to the graph.\n\t        self.graph.add_node(head)\n\t        top, _ = self._analysis_pass(code)\n\t        self.graph.add_edge(head, top, label=CFGLabels.CONTENT)\n\t    def _analysis_pass(self, code: List[ast.AST]) -> Tuple[CFNode, List[CFNode]]:\n", "        \"\"\"\n\t        Builds the control flow graph for a portion of code.\n\t        Returns a tuple:\n\t            - fst: the first node of the sub-graph representing the give code\n\t            - snd: a list of all the possible ending nodes of the sub-graph\n\t        Note that if a branch of the graph ends in a `return`, `break` or `continue`,\n\t        it is treated as a \"dead-end\" ad will not be included in the out-flowing nodes\n\t        of the sub-graph (i.e., the second value of the returned tuple).\n\t        \"\"\"\n\t        code_segments = [NodeBundle()]\n", "        interrupt = False\n\t        for node in code:\n\t            if ControlFlowGraph._is_compound_node(node):\n\t                code_segments.append(node)\n\t                code_segments.append(NodeBundle())\n\t            else:\n\t                code_segments[-1].append(node)\n\t            if isinstance(node, ast.FunctionDef):\n\t                control_flow_pass(node)\n\t            if ControlFlowGraph._is_interrupt_node(node):\n", "                interrupt = True\n\t                break\n\t        first = None # Entry node for `code`.\n\t        prev = None # Out-flowing nodes from the previous block.\n\t        for i in code_segments:\n\t            curr_in, curr_out = self._expand_single_node(i)\n\t            if first is None:\n\t                first = curr_in\n\t            if prev is not None:\n\t                for in_node in prev:\n", "                    self.graph.add_edge(in_node, curr_in)\n\t            prev = curr_out\n\t        # Empty control-flow node as body.\n\t        if first is None:\n\t            node = NodeBundle()\n\t            self.graph.add_node(node)\n\t            return (node, [node])\n\t        return (first, [] if interrupt else prev)\n\t    def _expand_single_node(self, node) -> Tuple[CFNode, CFNode]:\n\t        \"\"\"\n", "        Adds the control-flow graph of `node` as a separate, disconnected\n\t        sub-graph to `self.graph`, and returns the entry node and list of\n\t        out-flowing nodes of the generated graph to be connected to the rest\n\t        of the control-flow graph.\n\t        \"\"\"\n\t        if isinstance(node, NodeBundle): # Straight line code.\n\t            self.graph.add_node(node)\n\t            return (node, [node])\n\t        elif isinstance(node, ast.If): # If statement.\n\t            self.graph.add_node(node)\n", "            if_in, if_out = self._analysis_pass(node.body)\n\t            else_in, else_out = self._analysis_pass(node.orelse)\n\t            self.graph.add_edge(node, if_in, label=CFGLabels.IF)\n\t            self.graph.add_edge(node, else_in, label=CFGLabels.ELSE)\n\t            return (node, if_out + else_out)\n\t        elif isinstance(node, ast.While) or isinstance(node, ast.For):\n\t            return self._build_loop_graph(node)\n\t        raise NotImplementedError(type(node))\n\t    def _build_loop_graph(self, node: ast.AST) -> Tuple[CFNode, CFNode]:\n\t        self.graph.add_node(node)\n", "        has_break, has_ret = has_interrupt(node.body)\n\t        # Populate some properties of the loop.\n\t        node.has_break = has_break,\n\t        node.has_ret = has_ret\n\t        # Node that links to the code pieces following this loop.\n\t        out_node = NodeBundle()\n\t        self.graph.add_node(out_node)\n\t        self.graph.add_edge(node, out_node)\n\t        # The inner section of a loop is created as a sub_graph connected\n\t        # with an edge labeled as `CFGLabels.IGNORE` to prevent the graph\n", "        # rewriting process from treating the interior of a loop as an outcome\n\t        # of this loop (e.g., since the inner section of a loop always ends\n\t        # in graph nodes with no outgoing edges due to its compilation to a\n\t        # lambda `f` in `next(filter(f, xs))`, the transformer of a surronding\n\t        # `if` node may mistaken the loop node for being able to raise an\n\t        # interruption in the surronding function due to the existence of\n\t        # terminal nodes in the sub-graph of the loop).\n\t        inner_in, _ = self._analysis_pass(node.body)\n\t        self.graph.add_edge(node, inner_in, label=CFGLabels.IGNORE)\n\t        # If the loop can interrupt with `return`, use a dummy node that has\n", "        # no outgoing edges to tell the graph rewriter that an interruption\n\t        # may occur.\n\t        if has_ret:\n\t            dummy_node = NodeBundle()\n\t            self.graph.add_node(dummy_node)\n\t            self.graph.add_edge(node, dummy_node, label=CFGLabels.RET_FLAG)\n\t        return (node, [out_node])\n\t    @staticmethod\n\t    def _is_compound_node(node: ast.AST):\n\t        types = [ast.If, ast.For, ast.While]\n", "        return any(isinstance(node, t) for t in types)\n\t    @staticmethod\n\t    def _is_interrupt_node(node: ast.AST):\n\t        types = [ast.Break, ast.Continue, ast.Return]\n\t        return any(isinstance(node, t) for t in types)\n"]}
{"filename": "singleline/analysis/__init__.py", "chunked_list": ["from .preprocessor import *\n\tfrom .control_flow import *\n\tfrom .mutation import *\n"]}
{"filename": "singleline/analysis/mutation.py", "chunked_list": ["from _ast import ClassDef, Name\n\timport ast\n\tfrom typing import Any, List, Set\n\tfrom ..misc import get_params\n\tfrom ..misc.types import VRet\n\tclass MutationRecorder(ast.NodeVisitor):\n\t    \"\"\"\n\t    Records information associated with the mutation of variables in a\n\t    given `ast.AST`. The relevant information are attached to instances\n\t    of `ast.AST` in the form of attributes. Specifically, the following\n", "    syntax tree nodes will receive mutation information:\n\t    - Loops (to determine what to put in the loop's \"variable store\")\n\t    - Function definitions (to deduce how far variable replacements should\n\t    propagate in nested function definitions)\n\t    Note that `MutationRecorder.visit` must be called with a node that is\n\t    either a loop or a function definition when called externally.\n\t    \"\"\"\n\t    scope: List[Set[str]]\n\t    # TODO: add func def, class def, etc\n\t    def __init__(self) -> None:\n", "        self.scope = []\n\t    def visit_For(self, node: ast.For) -> Any:\n\t        targets = [node.target] if isinstance(node.target, ast.Name) else node.target\n\t        mutated_vars = {i.id for i in targets}\n\t        self._collect_mutations(mutated_vars, node, True)\n\t        return self.generic_visit(node)\n\t    def visit_While(self, node: ast.While) -> Any:\n\t        self._collect_mutations(set(), node, True)\n\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> Any:\n\t        if self.scope:\n", "            self.scope[-1].add(node.name)\n\t        mutated_vars = get_params(node)\n\t        self._collect_mutations(mutated_vars, node)\n\t    def visit_Name(self, node: Name) -> None:\n\t        if isinstance(node.ctx, ast.Store):\n\t            self.scope[-1].add(node.id)\n\t    def _collect_mutations(\n\t        self, mutated_vars: Set[str], node: ast.AST, propagate: bool = False\n\t    ) -> None:\n\t        self.scope.append(mutated_vars)\n", "        self.generic_visit(node)\n\t        self.scope.pop()\n\t        node.mutated_vars = mutated_vars\n\t        # Propagate mutated variables to parent scope.\n\t        if propagate and self.scope:\n\t            self.scope[-1].update(mutated_vars)\n"]}
{"filename": "singleline/analysis/interrupt.py", "chunked_list": ["import ast\n\tfrom typing import List, Tuple\n\tfrom ..misc.types import VRet\n\tdef has_interrupt(code: List[ast.AST]) -> Tuple[bool, bool]:\n\t    visitor = InterruptVisitor()\n\t    for i in code:\n\t        visitor.visit(i)\n\t    return visitor.has_break, visitor.has_return\n\tclass InterruptVisitor(ast.NodeVisitor):\n\t    \"\"\"\n", "    Responsible for determining various interrupt statements in an\n\t    `ast.AST` and its children. It determines if an interrupt can be\n\t    possibly reached in a control flow, and is used to generate the\n\t    necessary flags for a loop.\n\t    \"\"\"\n\t    has_return: bool\n\t    has_break: bool\n\t    func_stack: int\n\t    loop_stack: int\n\t    # Note that `has_continue` does not exist as it does not require an\n", "    # external flag to be defined, and can be encoded in the `while` lambda\n\t    # instead (by returning `False` to `f` in `next(filter(f, ...)))`.\n\t    def __init__(self):\n\t        self.has_return = False\n\t        self.has_break = False\n\t        self.func_stack = 0\n\t        self.loop_stack = 0\n\t    def visit_Return(self, node: ast.Return) -> VRet:\n\t        if self.func_stack == 0:\n\t            self.has_return = True\n", "        self.generic_visit(node)\n\t    def visit_Break(self, node: ast.Break) -> VRet:\n\t        if self.loop_stack == 0:\n\t            self.has_break = True\n\t        self.generic_visit(node)\n\t    def visit_FunctionDef(self, node: ast.FunctionDef) -> VRet:\n\t        self.func_stack += 1\n\t        self.generic_visit(node)\n\t        self.func_stack -= 1\n\t    def visit_For(self, node: ast.For) -> VRet:\n", "        self.loop_stack += 1\n\t        self.generic_visit(node)\n\t        self.loop_stack -= 1\n\t    def visit_While(self, node: ast.While) -> VRet:\n\t        self.loop_stack += 1\n\t        self.generic_visit(node)\n\t        self.loop_stack -= 1\n"]}
{"filename": "singleline/misc/types.py", "chunked_list": ["import ast\n\tfrom typing import List, Union\n\tfrom .graph_nodes import *\n\t# return type of a `NodeTransformer`'s visit methods\n\tVRet = Union[ast.AST, List[ast.AST], None]\n\t# type of a node in a control-flow graph\n\tCFNode = Union[ast.AST, NodeBundle]\n"]}
{"filename": "singleline/misc/__init__.py", "chunked_list": ["from .identifiers import *\n\tfrom .graph_utils import *"]}
{"filename": "singleline/misc/graph_utils.py", "chunked_list": ["import ast\n\timport networkx as nx\n\tfrom typing import Dict, List, Union\n\tfrom .graph_nodes import *\n\tfrom .types import CFNode\n\tdef clean_up_graph(graph: nx.classes.DiGraph) -> None:\n\t    \"\"\"\n\t    Removes all placeholder empty `NodeBundle` from the graph.\n\t    Note that nodes with no out-going edges are NEVER removed, as they act as\n\t    a terminated branch (e.g., a dummy node for returning after a loop or a\n", "    trailing if-else statement outside of function (`return None` does not\n\t    exist so the two branches cannot be merged)).\n\t    \"\"\"\n\t    empty_nodes = [\n\t        i for i in graph.nodes\n\t        if isinstance(i, NodeBundle) and i.is_empty()\n\t    ]\n\t    # Do not include nodes with no out-going edges.\n\t    empty_nodes = [i for i in empty_nodes if list(get_successors(graph, i))]\n\t    for node in empty_nodes:\n", "        for pred in graph.predecessors(node):\n\t            for succ in graph.successors(node):\n\t                orig_label = graph[pred][node].get('label')\n\t                if orig_label is None:\n\t                    graph.add_edge(pred, succ)\n\t                else:\n\t                    graph.add_edge(pred, succ, label=orig_label)\n\t    graph.remove_nodes_from(empty_nodes)\n\tdef get_successors(graph: nx.classes.DiGraph, node: CFNode):\n\t    return (\n", "        i for i in graph.successors(node)\n\t        if graph[node][i].get('label') != CFGLabels.IGNORE\n\t    )\n\tdef has_labeled_edge(graph: nx.classes.DiGraph, node: CFNode, label: CFGLabels):\n\t    return bool([\n\t        i for i in graph.successors(node)\n\t        if graph[node][i].get('label') == label\n\t    ])\n\tdef get_next_from_label(graph: nx.classes.DiGraph, node: CFNode, label: CFGLabels):\n\t    out_edges = graph.edges(node, data=True)\n", "    edges = [v for _, v, attr in out_edges if attr.get('label') == label]\n\t    assert len(edges) == 1\n\t    return edges[0]\n\tdef get_all_convergence(\n\t    graph: nx.classes.DiGraph,\n\t    node: ast.AST,\n\t    stop: Union[ast.AST, None] = None\n\t) -> List[CFNode]:\n\t    \"\"\"\n\t    Given a node in a graph, this function searches through all its successors\n", "    to see if they converge back into a single node after some point. Returns\n\t    all such nodes.\n\t    If no successors converge, returns the given node.\n\t    TODO: find a better algorithm for this O(N^2) abomination.\n\t    \"\"\"\n\t    def _merge_path(a: Dict[CFNode, int], b: Dict[CFNode, int]) -> Dict[CFNode, int]:\n\t        return {k: max(a[k], b[k]) for k in a if k in b}\n\t    def _search_path(node: CFNode, path: Dict[CFNode, int]) -> Dict[CFNode, int]:\n\t        # Get all successors and remove visited nodes (not necessary right now,\n\t        # but in case the CFG becomes cyclic in the future due to some new encoding\n", "        # requirement on the target language side).\n\t        succs = set(get_successors(graph, node)) - path.keys()\n\t        if not succs:\n\t            return path\n\t        result = None\n\t        for succ in succs:\n\t            new_path = {**path}\n\t            # `stop` check must be here to make sure that reaching the `stop` node\n\t            # merges the other paths with this path (which is truncated to `stop`).\n\t            if succ != stop:\n", "                new_path[succ] = path[node] + 1\n\t                new_path = _search_path(succ, new_path)\n\t            if result is None:\n\t                result = new_path\n\t            else:\n\t                result = _merge_path(result, new_path)\n\t        return result\n\t    if node == stop:\n\t        return []\n\t    init_path = {node: 0}\n", "    common_nodes = _search_path(node, init_path)\n\t    assert stop not in common_nodes\n\t    sequence = list(common_nodes.keys())\n\t    seq_ordered = sorted(sequence, key=common_nodes.__getitem__)\n\t    return seq_ordered\n"]}
{"filename": "singleline/misc/graph_nodes.py", "chunked_list": ["import ast\n\tfrom enum import Enum, auto\n\tfrom typing import List\n\tclass CFGLabels(Enum):\n\t    \"\"\"\n\t    An enumeration of all possible labels in case a branching occurs at\n\t    a node in the CFG.\n\t    For instance, the `ast.If` node can have two outgoing edges labeled\n\t    as `CFGLabels.IF` and `CFGLabels.ELSE`.\n\t    \"\"\"\n", "    IF = auto() # `if` statement\n\t    ELSE = auto() # `if` statement\n\t    RET_FLAG = auto() # loops\n\t    CONTENT = auto() # content of `ast.FunctionDef` or `ast.Module`\n\t    IGNORE = auto() # loop interior, ignore during interrupt tracing\n\t# A hashable wrapper for `List[ast.AST]`.\n\t# TODO: fix the types that involves `NodeBundle` (currently incorrect)\n\tclass NodeBundle:\n\t    bundle: List[ast.AST]\n\t    def __init__(self, bundle: List[ast.AST] = None):\n", "        if bundle is None: bundle = []\n\t        self.bundle = bundle\n\t    def append(self, node: ast.AST):\n\t        self.bundle.append(node)\n\t    def flatten(self):\n\t        self.bundle = NodeBundle._flatten(self.bundle)\n\t    def is_empty(self) -> bool:\n\t        return len(self.bundle) == 0\n\t    def __repr__(self) -> str:\n\t        return '<NodeBundle: [{}]>'.format(\n", "            ', '.join(ast.unparse(i) for i in self.bundle)\n\t        )\n\t    @staticmethod\n\t    def _flatten(xs: any) -> List[any]:\n\t        res = []\n\t        for x in xs:\n\t            if isinstance(x, list):\n\t                res.extend(NodeBundle.flatten(x))\n\t            else:\n\t                res.append(x)\n", "        return res\n"]}
{"filename": "singleline/misc/identifiers.py", "chunked_list": ["# Utilities that control the generation of identifiers.\n\timport ast\n\tfrom typing import Set\n\tdef get_params(node: ast.FunctionDef) -> Set[str]:\n\t    \"\"\"\n\t    Obtains the parameters of a function as a set of strings. This include the\n\t    names assigned to `*args` and `**kwargs`.\n\t    \"\"\"\n\t    all_args = node.args.args + node.args.kwonlyargs\n\t    if hasattr(node.args, 'posonlyargs'):\n", "        all_args += node.args.posonlyargs\n\t    if node.args.vararg is not None:\n\t        all_args.append(node.args.vararg)\n\t    if node.args.kwarg is not None:\n\t        all_args.append(node.args.kwarg)\n\t    return {i.arg for i in all_args}\n\tdef _to_excel_name(num: int) -> str:\n\t    name = ''\n\t    while num:\n\t        num, rem = divmod(num - 1, 26)\n", "        name += chr(65 + rem)\n\t    return name[:: -1]\n\tclass IdentifierGenerator:\n\t    counter: int\n\t    prepend: bool\n\t    invalid_pool: Set[str]\n\t    def __init__(self, invalid_pool: Set[str], prepend: bool = True):\n\t        \"\"\"\n\t        invalid_pool: a reference to the (currently visited) set of identifier\n\t        names that are used.\n", "        prepend: whether to prepend an underscore to all generated names.\n\t        \"\"\"\n\t        self.invalid_pool = invalid_pool\n\t        self.prepend = prepend\n\t        self.counter = 1\n\t    def throwaway(self):\n\t        \"\"\"\n\t        Generate a throwaway identifier for a variable whose liveness will\n\t        never interfere with another variable generated by `throwaway()`.\n\t        \"\"\"\n", "        return '_'\n\t    def add_used(self, name):\n\t        self.invalid_pool.add(name)\n\t    def get_name(self, ctx):\n\t        # TODO: respect name generation context for meaningful names\n\t        name = _to_excel_name(self.counter)\n\t        while name in self.invalid_pool:\n\t            self.counter += 1\n\t            name = _to_excel_name(self.counter)\n\t        self.counter += 1\n", "        final_name = '_' + name\n\t        self.invalid_pool.add(final_name)\n\t        return final_name\n"]}
{"filename": "singleline/misc/cli.py", "chunked_list": ["import os\n\timport argparse\n\tfrom ..compile import load_program\n\tdef main():\n\t    parser = argparse.ArgumentParser(\n\t        description='Converts Python code to one-liners!'\n\t    )\n\t    parser.add_argument('input', type=str, help='the input file')\n\t    parser.add_argument('-o', '--output', type=str, help='the output file')\n\t    args = parser.parse_args()\n", "    in_file = args.input\n\t    out_file = args.output\n\t    if out_file is None:\n\t        out_file = os.path.splitext(in_file)[0] + '_singleline.py'\n\t    with open(in_file, 'r') as f:\n\t        content = f.read()\n"]}
