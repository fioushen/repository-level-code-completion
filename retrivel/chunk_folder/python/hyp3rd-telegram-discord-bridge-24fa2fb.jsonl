{"filename": "forwarder.py", "chunked_list": ["\"\"\"handles the process of the bridge between telegram and discord\"\"\"\n\timport argparse\n\timport asyncio\n\timport os\n\timport signal\n\timport sys\n\tfrom asyncio import AbstractEventLoop\n\tfrom sqlite3 import OperationalError\n\tfrom typing import Tuple\n\timport discord\n", "import psutil  # pylint: disable=import-error\n\tfrom telethon import TelegramClient\n\tfrom bridge.config import Config\n\tfrom bridge.core import on_restored_connectivity, start\n\tfrom bridge.discord_handler import start_discord\n\tfrom bridge.enums import ProcessStateEnum\n\tfrom bridge.events import EventDispatcher\n\tfrom bridge.healtcheck_handler import healthcheck\n\tfrom bridge.logger import Logger\n\tfrom bridge.telegram_handler import start_telegram_client\n", "config = Config()\n\tlogger = Logger.init_logger(config.app.name, config.logger)\n\t# Create a Forwader class with context manager to handle the bridge process\n\t# class Forwarder:\n\t#     \"\"\"Forwarder class.\"\"\"\n\t#     def __init__(self, loop: AbstractEventLoop, dispatcher: EventDispatcher, config: Config):\n\t#         \"\"\"Initialize the Forwarder class.\"\"\"\n\t#         self.loop = loop\n\t#         self.dispatcher = dispatcher\n\t#         self.config = config\n", "#         self.telegram_client: TelegramClient\n\t#         self.discord_client: discord.Client\n\t#     async def __aenter__(self):\n\t#         \"\"\"Enter the context manager.\"\"\"\n\t#         # Start the Telegram client\n\t#         self.telegram_client = await start_telegram_client(config=self.config, event_loop=self.loop)\n\t#         # Start the Discord client\n\t#         self.discord_client = await start_discord(self.config)\n\t#         # Start the healthcheck\n\t#         self.loop.create_task(healthcheck(self.dispatcher, self.telegram_client, self.discord_client))\n", "#         # Start the bridge\n\t#         self.loop.create_task(start(self.telegram_client, self.discord_client, self.dispatcher))\n\t#         return self\n\t#     async def __aexit__(self, exc_type, exc_val, exc_tb):\n\t#         \"\"\"Exit the context manager.\"\"\"\n\t#         # Stop the Telegram client\n\t#         if self.telegram_client is not None and self.telegram_client.is_connected():\n\t#             await self.telegram_client.disconnect()\n\t#         # Stop the Discord client\n\t#         await self.discord_client.close()\n", "def create_pid_file() -> str:\n\t    \"\"\"Create a PID file.\"\"\"\n\t    logger.debug(\"Creating PID file.\")\n\t    # Get the process ID.\n\t    pid = os.getpid()\n\t    # Create the PID file.\n\t    bot_pid_file = f'{config.app.name}.pid'\n\t    process_state, _ = determine_process_state(bot_pid_file)\n\t    if process_state == ProcessStateEnum.RUNNING:\n\t        sys.exit(1)\n", "    try:\n\t        with open(bot_pid_file, \"w\", encoding=\"utf-8\") as pid_file:\n\t            pid_file.write(str(pid))\n\t    except OSError as err:\n\t        print(f\"Unable to create PID file: {err}\", flush=True)\n\t        sys.exit(0)\n\t    return bot_pid_file\n\tdef remove_pid_file(pid_file: str):\n\t    \"\"\"Remove a PID file.\"\"\"\n\t    logger.debug(\"Removing PID file.\")\n", "    #determine if the pid file exists\n\t    if not os.path.isfile(pid_file):\n\t        logger.debug(\"PID file '%s' not found.\", pid_file)\n\t        return\n\t    try:\n\t        os.remove(pid_file)\n\t    except FileNotFoundError:\n\t        logger.error(\"PID file '%s' not found.\", pid_file)\n\t    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.exception(ex)\n", "        logger.error(\"Failed to remove PID file '%s'.\", pid_file)\n\tdef determine_process_state(pid_file: str | None = None) -> Tuple[ProcessStateEnum, int]:\n\t    \"\"\"\n\t    Determine the state of the process.\n\t    The state of the process is determined by looking for the PID file. If the\n\t    PID file does not exist, the process is considered stopped. If the PID file\n\t    does exist, the process is considered running.\n\t    If the PID file exists and the PID of the process that created it is not\n\t    running, the process is considered stopped. If the PID file exists and the\n\t    PID of the process that created it is running, the process is considered\n", "    running.\n\t    :param pid_file: The path to the PID file.\n\t    :type pid_file: str\n\t    :return: A tuple containing the process state and the PID of the process\n\t    that created the PID file.\n\t    :rtype: Tuple[str, int]\n\t    \"\"\"\n\t    if pid_file is None:\n\t        pid_file = f'{config.app.name}.pid'\n\t    if not os.path.isfile(pid_file):\n", "        # The PID file does not exist, so the process is considered stopped.\n\t        return ProcessStateEnum.STOPPED, 0\n\t    pid = 0\n\t    try:\n\t        # Read the PID from the PID file.\n\t        with open(pid_file, \"r\", encoding=\"utf-8\") as bot_pid_file:\n\t            pid = int(bot_pid_file.read().strip())\n\t            # If the PID file exists and the PID of the process that created it\n\t            # is not running, the process is considered stopped.\n\t            if not psutil.pid_exists(pid):\n", "                return ProcessStateEnum.STOPPED, 0\n\t            # If the PID file exists and the PID of the process that created it\n\t            # is running, the process is considered running.\n\t            return ProcessStateEnum.RUNNING, pid\n\t    except ProcessLookupError:\n\t        # If the PID file exists and the PID of the process that created it is\n\t        # not running, the process is considered stopped.\n\t        return ProcessStateEnum.ORPHANED, 0\n\t    except PermissionError:\n\t        # If the PID file exists and the PID of the process that created it is\n", "        # running, the process is considered running.\n\t        return ProcessStateEnum.RUNNING, pid\n\t    except FileNotFoundError:\n\t        # The PID file does not exist, so the process is considered stopped.\n\t        return ProcessStateEnum.STOPPED, 0\n\tdef stop_bridge():\n\t    \"\"\"Stop the bridge.\"\"\"\n\t    pid_file = f'{config.app.name}.pid'\n\t    process_state, pid = determine_process_state(pid_file)\n\t    if process_state == ProcessStateEnum.STOPPED:\n", "        logger.warning(\n\t            \"PID file '%s' not found. The %s may not be running.\", pid_file, config.app.name)\n\t        return\n\t    try:\n\t        os.kill(pid, signal.SIGINT)\n\t        logger.warning(\"Sent SIGINT to the %s process with PID %s.\",\n\t                    config.app.name, pid)\n\t    except ProcessLookupError:\n\t        logger.error(\n\t            \"The %s process with PID %s is not running.\", config.app.name, pid)\n", "async def on_shutdown(telegram_client, discord_client):\n\t    \"\"\"Shutdown the bridge.\"\"\"\n\t    logger.info(\"Starting shutdown process...\")\n\t    task = asyncio.current_task()\n\t    all_tasks = asyncio.all_tasks()\n\t    try:\n\t        logger.info(\"Disconnecting Telegram client...\")\n\t        await telegram_client.disconnect()\n\t        logger.info(\"Telegram client disconnected.\")\n\t    except (Exception, asyncio.CancelledError) as ex:  # pylint: disable=broad-except\n", "        logger.error(\"Error disconnecting Telegram client: %s\", {ex})\n\t    try:\n\t        logger.info(\"Disconnecting Discord client...\")\n\t        await discord_client.close()\n\t        logger.info(\"Discord client disconnected.\")\n\t    except (Exception, asyncio.CancelledError) as ex:  # pylint: disable=broad-except\n\t        logger.error(\"Error disconnecting Discord client: %s\", {ex})\n\t    # if not config.api.enabled:\n\t    for running_task in all_tasks:\n\t        if running_task is not task and not running_task.done() and not running_task.cancelled():\n", "            if task is not None:\n\t                logger.debug(\"Cancelling task %s...\", {running_task})\n\t                try:\n\t                    task.cancel()\n\t                except Exception as ex:  # pylint: disable=broad-except\n\t                    logger.error(\"Error cancelling task %s: %s\", {\n\t                                running_task}, {ex})\n\t    if not config.api.enabled:\n\t        logger.debug(\"Stopping event loop...\")\n\t        asyncio.get_running_loop().stop()\n", "    else:\n\t        remove_pid_file(f'{config.app.name}.pid')\n\t    logger.info(\"Shutdown process completed.\")\n\tasync def shutdown(sig, tasks_loop: asyncio.AbstractEventLoop):\n\t    \"\"\"Shutdown the application gracefully.\"\"\"\n\t    logger.warning(\"shutdown received signal %s, shutting down...\", {sig})\n\t    # Cancel all tasks\n\t    tasks = [task for task in asyncio.all_tasks(\n\t    ) if task is not asyncio.current_task()]\n\t    for task in tasks:\n", "        task.cancel()\n\t    # Wait for all tasks to be cancelled\n\t    results = await asyncio.gather(*tasks, return_exceptions=config.app.debug)\n\t    # Check for errors\n\t    for result in results:\n\t        if isinstance(result, asyncio.CancelledError):\n\t            continue\n\t        if isinstance(result, Exception):\n\t            logger.error(\"Error during shutdown: %s\", result)\n\t    if not config.api.enabled:\n", "        # Stop the loop\n\t        if tasks_loop is not None:\n\t            tasks_loop.stop()\n\t    remove_pid_file(f'{config.app.name}.pid')\n\tasync def handle_signal(sig, tgc: TelegramClient, dcl: discord.Client, tasks):\n\t    \"\"\"Handle graceful shutdown on received signal.\"\"\"\n\t    logger.warning(\"Received signal %s, shutting down...\", {sig})\n\t    # Disconnect clients\n\t    if tgc.is_connected():\n\t        tgc.disconnect()\n", "    if dcl.is_ready():\n\t        await dcl.close()\n\t    # Cancel all tasks\n\t    await asyncio.gather(*tasks, return_exceptions=config.app.debug)\n\tasync def init_clients(dispatcher: EventDispatcher) -> Tuple[TelegramClient, discord.Client]:\n\t    \"\"\"Handle the initialization of the bridge's clients.\"\"\"\n\t    lock = asyncio.Lock()\n\t    await lock.acquire()\n\t    event_loop = asyncio.get_event_loop()\n\t    telegram_client_instance = await start_telegram_client(config, event_loop)\n", "    discord_client_instance = await start_discord(config)\n\t    # context = {\n\t    #     'telegram_client': telegram_client_instance,\n\t    #     'discord_client': discord_client_instance,\n\t    #     'dispatcher': dispatcher\n\t    # }\n\t    lock.release()\n\t    # Set signal handlers for graceful shutdown on received signal (except on Windows)\n\t    # NOTE: This is not supported on Windows\n\t    if os.name != 'nt' and not config.api.enabled:\n", "        for sig in (signal.SIGINT, signal.SIGTERM):\n\t            event_loop.add_signal_handler(\n\t                sig, lambda sig=sig: asyncio.create_task(shutdown(sig, tasks_loop=event_loop)))  # type: ignore\n\t    if config.api.enabled:\n\t        for sig in (signal.SIGINT, signal.SIGTERM):\n\t            event_loop.add_signal_handler(\n\t                sig, lambda: asyncio.create_task(on_shutdown(telegram_client_instance, discord_client_instance)))\n\t    try:\n\t        lock = asyncio.Lock()\n\t        await lock.acquire()\n", "        # Create tasks for starting the main logic and waiting for clients to disconnect\n\t        start_task = event_loop.create_task(\n\t            start(telegram_client_instance, discord_client_instance, config)\n\t        )\n\t        telegram_wait_task = event_loop.create_task(\n\t            telegram_client_instance.run_until_disconnected()  # type: ignore\n\t        )\n\t        discord_wait_task = event_loop.create_task(\n\t            discord_client_instance.wait_until_ready()\n\t        )\n", "        api_healthcheck_task = event_loop.create_task(\n\t            healthcheck(dispatcher,\n\t                        telegram_client_instance,\n\t                        discord_client_instance, config.app.healthcheck_interval)\n\t        )\n\t        on_restored_connectivity_task = event_loop.create_task(\n\t            on_restored_connectivity(\n\t                config=config,\n\t                telegram_client=telegram_client_instance,\n\t                discord_client=discord_client_instance)\n", "        )\n\t        lock.release()\n\t        await asyncio.gather(start_task,\n\t                             telegram_wait_task,\n\t                             discord_wait_task,\n\t                             api_healthcheck_task,\n\t                             on_restored_connectivity_task, return_exceptions=config.app.debug)\n\t    except asyncio.CancelledError as ex:\n\t        logger.warning(\n\t            \"CancelledError caught: %s\", ex, exc_info=False)\n", "    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.error(\"Error while running the bridge: %s\",\n\t                     ex, exc_info=config.app.debug)\n\t    finally:\n\t        await on_shutdown(telegram_client_instance, discord_client_instance)\n\t    return telegram_client_instance, discord_client_instance\n\tdef start_bridge(dispatcher: EventDispatcher):\n\t    \"\"\"Start the bridge.\"\"\"\n\t    logger.info(\"Starting %s...\", config.app.name)\n\t    event_loop = asyncio.get_event_loop()\n", "    event_loop.set_debug(config.app.debug)\n\t    # Set the exception handler.\n\t    event_loop.set_exception_handler(event_loop_exception_handler)\n\t    # Create a PID file.\n\t    pid_file = create_pid_file()\n\t    # Create a task for the main coroutine.\n\t    main_task = event_loop.create_task(main(dispatcher=dispatcher))\n\t    try:\n\t        if event_loop.is_running():\n\t            logger.warning(\"Event loop is already running, not starting a new one.\")\n", "            main_task.done()\n\t        else:\n\t            # Run the event loop.\n\t            event_loop.run_forever()\n\t    except KeyboardInterrupt:\n\t        # Cancel the main task.\n\t        main_task.cancel()\n\t    except asyncio.CancelledError:\n\t        pass\n\t    except asyncio.LimitOverrunError as ex:\n", "        logger.error(\n\t            \"The event loop has exceeded the configured limit of pending tasks: %s\",\n\t            ex, exc_info=config.app.debug)\n\t    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.error(\"Error while running the bridge: %s\",\n\t                     ex, exc_info=config.app.debug)\n\t    finally:\n\t        # Remove the PID file.\n\t        if not config.api.enabled:\n\t            remove_pid_file(pid_file)\n", "def event_loop_exception_handler(event_loop: AbstractEventLoop | None, context):\n\t    \"\"\"Asyncio Event loop exception handler.\"\"\"\n\t    if event_loop is None:\n\t        event_loop = asyncio.get_event_loop()\n\t    try:\n\t        exception = context.get(\"exception\")\n\t        if not isinstance(exception, asyncio.CancelledError):\n\t            event_loop.default_exception_handler(context)\n\t        else:\n\t            # This error is expected during shutdown.\n", "            logger.warning(\"CancelledError caught during shutdown\")\n\t    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.error(\n\t            \"Event loop exception handler failed: %s\",\n\t            ex,\n\t            exc_info=config.app.debug,\n\t        )\n\tdef daemonize_process():\n\t    \"\"\"Daemonize the process by forking and redirecting standard file descriptors.\"\"\"\n\t    # Fork the process and exit if we're the parent\n", "    pid = os.fork()\n\t    if pid > 0:\n\t        sys.exit()\n\t    # Start a new session\n\t    os.setsid()\n\t    # Fork again and exit if we're the parent\n\t    pid = os.fork()\n\t    if pid > 0:\n\t        sys.exit()\n\t    # Redirect standard file descriptors to /dev/null\n", "    with open(os.devnull, \"r\", encoding=\"utf-8\") as devnull:\n\t        os.dup2(devnull.fileno(), sys.stdin.fileno())\n\t    with open(os.devnull, \"w\", encoding=\"utf-8\") as devnull:\n\t        os.dup2(devnull.fileno(), sys.stdout.fileno())\n\t        os.dup2(devnull.fileno(), sys.stderr.fileno())\n\tasync def main(dispatcher: EventDispatcher):\n\t    \"\"\"Run the bridge.\"\"\"\n\t    clients = ()\n\t    try:\n\t        clients = await init_clients(dispatcher=dispatcher)\n", "    except KeyboardInterrupt:\n\t        logger.warning(\"Interrupted by user, shutting down...\")\n\t    except asyncio.CancelledError:\n\t        logger.warning(\"CancelledError caught, shutting down...\")\n\t    except RuntimeError as ex:\n\t        logger.error(\"RuntimeError caught: %s\", ex, exc_info=config.app.debug)\n\t    except OperationalError as ex:\n\t        logger.error(\"OperationalError caught: %s\", ex, exc_info=config.app.debug)\n\t    finally:\n\t        if clients:\n", "            telegram_client, discord_client = clients[0], clients[1]\n\t            if telegram_client and not telegram_client.is_connected() and not discord_client.is_ready():\n\t                clients = ()\n\t            else:\n\t                await on_shutdown(telegram_client, discord_client)\n\t                clients = ()\n\tasync def run_controller(dispatcher: EventDispatcher | None,\n\t                     event_loop: AbstractEventLoop | None = None,\n\t                     boot: bool = False,\n\t                     stop: bool = False,\n", "                     background: bool = False):\n\t    \"\"\"Init the bridge.\"\"\"\n\t    if not config.api.enabled:\n\t        logger.error(\"API mode is disabled, please use the CLI to start the bridge, or enable it in the config file.\")\n\t        if not config.logger.console:\n\t            print(\"API mode is disabled, please use the CLI to start the bridge, or enable it in the config file.\")\n\t        sys.exit(1)\n\t    if boot:\n\t        logger.info(\"Booting %s...\", config.app.name)\n\t        logger.info(\"Version: %s\", config.app.version)\n", "        logger.info(\"Description: %s\", config.app.description)\n\t        logger.info(\"Log level: %s\", config.logger.level)\n\t        logger.info(\"Debug enabled: %s\", config.app.debug)\n\t        logger.info(\"Login through API enabled: %s\",\n\t                    config.api.telegram_login_enabled)\n\t        if background:\n\t            logger.info(\"Running %s in the background\", config.app.name)\n\t            if os.name != \"posix\":\n\t                logger.error(\n\t                    \"Background mode is only supported on POSIX systems\")\n", "                sys.exit(1)\n\t            if config.logger.console is True:\n\t                logger.error(\n\t                    \"Background mode requires console logging to be disabled\")\n\t                sys.exit(1)\n\t            logger.info(\"Starting %s in the background...\", config.app.name)\n\t            daemonize_process()\n\t        if event_loop is None:\n\t            try:\n\t                event_loop = asyncio.get_event_loop()\n", "            except RuntimeError:\n\t                logger.warning(\"No event loop found, creating a new one\")\n\t                event_loop = asyncio.new_event_loop()\n\t        asyncio.set_event_loop(event_loop)\n\t        if dispatcher is None:\n\t            dispatcher = EventDispatcher()\n\t        start_bridge(dispatcher=dispatcher)\n\t    elif stop:\n\t        stop_bridge()\n\t    else:\n", "        print(\"Please use --start or --stop flags to start or stop the bridge.\")\n\tdef controller(dispatcher: EventDispatcher | None,\n\t                     event_loop: AbstractEventLoop | None = None,\n\t                     boot: bool = False,\n\t                     stop: bool = False,\n\t                     background: bool = False):\n\t    \"\"\"Init the bridge.\"\"\"\n\t    if boot:\n\t        logger.info(\"Booting %s...\", config.app.name)\n\t        logger.info(\"Version: %s\", config.app.version)\n", "        logger.info(\"Description: %s\", config.app.description)\n\t        logger.info(\"Log level: %s\", config.logger.level)\n\t        logger.info(\"Debug enabled: %s\", config.app.debug)\n\t        logger.info(\"Login through API enabled: %s\",\n\t                    config.api.telegram_login_enabled)\n\t        if background:\n\t            logger.info(\"Running %s in the background\", config.app.name)\n\t            if os.name != \"posix\":\n\t                logger.error(\n\t                    \"Background mode is only supported on POSIX systems\")\n", "                sys.exit(1)\n\t            if config.logger.console is True:\n\t                logger.error(\n\t                    \"Background mode requires console logging to be disabled\")\n\t                sys.exit(1)\n\t            logger.info(\"Starting %s in the background...\", config.app.name)\n\t            daemonize_process()\n\t        if event_loop is None:\n\t            try:\n\t                event_loop = asyncio.get_event_loop()\n", "            except RuntimeError:\n\t                logger.warning(\"No event loop found, creating a new one\")\n\t                event_loop = asyncio.new_event_loop()\n\t            asyncio.set_event_loop(event_loop)\n\t        if dispatcher is None:\n\t            dispatcher = EventDispatcher()\n\t        start_bridge(dispatcher=dispatcher)\n\t    elif stop:\n\t        stop_bridge()\n\t    else:\n", "        print(\"Please use --start or --stop flags to start or stop the bridge.\")\n\tif __name__ == \"__main__\":\n\t    # extra precautions to prevent the bridge from running twice\n\t    if config.api.enabled:\n\t        logger.error(\"API mode is enabled, please use the API to start the bridge, or disable it to use the CLI.\")\n\t        if not config.logger.console:\n\t            print(\"API mode is enabled, please use the API to start the bridge, or disable it to use the CLI.\")\n\t        sys.exit(1)\n\t    parser = argparse.ArgumentParser(\n\t        description=\"Process handler for the bridge.\")\n", "    parser.add_argument(\"--start\", action=\"store_true\",\n\t                        help=\"Start the bridge.\")\n\t    parser.add_argument(\"--stop\", action=\"store_true\", help=\"Stop the bridge.\")\n\t    parser.add_argument(\"--background\", action=\"store_true\",\n\t                        help=\"Run the bridge in the background (forked).\")\n\t    parser.add_argument(\"--version\", action=\"store_true\",\n\t                        help=\"Get the Bridge version.\")\n\t    cmd_args = parser.parse_args()\n\t    if cmd_args.version:\n\t        print(f'The Bridge\\nv{config.app.version}')\n", "        sys.exit(0)\n\t    __start: bool = cmd_args.start\n\t    __stop: bool = cmd_args.stop\n\t    __background: bool = cmd_args.background\n\t    event_dispatcher = EventDispatcher()\n\t    controller(dispatcher=event_dispatcher, event_loop=asyncio.new_event_loop() ,boot=__start, stop=__stop, background=__background)\n"]}
{"filename": "tools/upload.py", "chunked_list": ["\"\"\"upload simulator.\"\"\"\n\timport requests\n\tURL = 'http://localhost:8000/upload'\n\tFILE_PATH = '../config.yml'\n\twith open(FILE_PATH, 'rb') as file:\n\t    files = {'file': (FILE_PATH, file, 'application/x-yaml')}\n\t    response = requests.post(URL, files=files, timeout=5)\n\tprint(response.json())\n"]}
{"filename": "bridge/openai_handler.py", "chunked_list": ["\"\"\"This module handles the communication with the OpenAI API.\"\"\"\n\timport asyncio\n\timport functools\n\timport openai\n\timport openai.error\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tconfig = Config()\n\tlogger = Logger.get_logger(config.app.name)\n\topenai.api_key = config.openai.api_key\n", "openai.organization = config.openai.organization\n\tasync def analyze_message_and_generate_suggestions(text: str) -> str:\n\t    \"\"\"analyze the message text and seek for suggestions.\"\"\"\n\t    loop = asyncio.get_event_loop()\n\t    try:\n\t        create_completion = functools.partial(\n\t            openai.Completion.create,\n\t            model=\"text-davinci-003\",\n\t            prompt=(\n\t                f\"Given the message: '{text}', suggest related actions and correlated articles with links:\\n\"\n", "                f\"Related Actions:\\n- ACTION1\\n- ACTION2\\n- ACTION3\\n\"\n\t                f\"Correlated Articles:\\n1. ARTICLE1_TITLE - ARTICLE1_LINK\\n\"\n\t                f\"2. ARTICLE2_TITLE - ARTICLE2_LINK\\n\"\n\t                f\"3. ARTICLE3_TITLE - ARTICLE3_LINK\\n\"\n\t            ),\n\t            temperature=0,\n\t            max_tokens=60,\n\t            top_p=1.0,\n\t            frequency_penalty=0.0,\n\t            presence_penalty=0.0\n", "        )\n\t        response = await loop.run_in_executor(None, create_completion)\n\t        suggestion = response.choices[0].text.strip() # type: ignore # pylint: disable=no-member\n\t        return suggestion\n\t    except openai.error.InvalidRequestError as ex:\n\t        logger.error(\"Invalid request error: %s\", {ex})\n\t        return \"Error generating suggestion: Invalid request.\"\n\t    except openai.error.RateLimitError as ex:\n\t        logger.error(\"Rate limit error: %s\", {ex})\n\t        return \"Error generating suggestion: Rate limit exceeded.\"\n", "    except openai.error.APIError as ex:\n\t        logger.error(\"API error: %s\", {ex})\n\t        return \"Error generating suggestion: API error.\"\n\t    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.error(\"Error generating suggestion: %s\", {ex})\n\t        return \"Error generating suggestion.\"\n\tasync def analyze_message_sentiment(text: str) -> str:\n\t    \"\"\"analyze the message text and seek for suggestions.\"\"\"\n\t    loop = asyncio.get_event_loop()\n\t    try:\n", "        prompt = None\n\t        for prompt_line in config.openai.sentiment_analysis_prompt:\n\t            prompt = f\"{prompt} {prompt_line}\\n\"\n\t        if prompt is not None:\n\t            prompt = prompt.replace(\"#text_to_parse\", text)\n\t        logger.debug(\"openai_sentiment_analysis_prompt %s\", prompt)\n\t        create_completion = functools.partial(\n\t            openai.Completion.create,\n\t            model=\"text-davinci-003\",\n\t            prompt=(prompt),\n", "            temperature=0.7,\n\t            max_tokens=250,\n\t            top_p=1.0,\n\t            frequency_penalty=0.0,\n\t            presence_penalty=0.0\n\t        )\n\t        response = await loop.run_in_executor(None, create_completion)\n\t        suggestion = response.choices[0].text.strip() # type: ignore # pylint: disable=no-member\n\t        return suggestion\n\t    except openai.error.InvalidRequestError as ex:\n", "        logger.error(\"Invalid request error: %s\", {ex})\n\t        return \"Error generating suggestion: Invalid request.\"\n\t    except openai.error.RateLimitError as ex:\n\t        logger.error(\"Rate limit error: %s\", {ex})\n\t        return \"Error generating suggestion: Rate limit exceeded.\"\n\t    except openai.error.APIError as ex:\n\t        logger.error(\"API error: %s\", {ex})\n\t        return \"Error generating suggestion: API error.\"\n\t    except Exception as ex:  # pylint: disable=broad-except\n\t        logger.error(\"Error generating suggestion: %s\", {ex})\n", "        return \"Error generating suggestion.\"\n"]}
{"filename": "bridge/__init__.py", "chunked_list": ["\"\"\"the bridge.\"\"\"\n\ttry:\n\t    import bridge.discord_handler\n\t    import bridge.openai_handler\n\t    import bridge.telegram_handler.core\n\t    import bridge.utils\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "bridge/utils.py", "chunked_list": ["\"\"\"Utility functions.\"\"\"\n\tfrom typing import List\n\tfrom discord import utils\n\tfrom telethon.tl.types import (MessageEntityBold, MessageEntityCode,\n\t                               MessageEntityItalic, MessageEntityPre,\n\t                               MessageEntityStrike, MessageEntityTextUrl)\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tconfig = Config()\n\tlogger = Logger.get_logger(config.app.name)\n", "def split_message(message: str, max_length: int = 2000) -> List[str]:\n\t    \"\"\"Split a message into multiple messages if it exceeds the max length.\"\"\"\n\t    if len(message) <= max_length:\n\t        return [message]\n\t    message_parts = []\n\t    while len(message) > max_length:\n\t        split_index = message[:max_length].rfind(\"\\n\")\n\t        if split_index == -1:\n\t            split_index = max_length\n\t        message_parts.append(message[:split_index])\n", "        message = message[split_index:].lstrip()\n\t    if message:\n\t        message_parts.append(message)\n\t    return message_parts\n\tdef apply_markdown(markdown_text, start, end, markdown_delimiters):\n\t    \"\"\"Apply Markdown delimiters to a text range.\"\"\"\n\t    return (\n\t        markdown_text[:start]\n\t        + markdown_delimiters[0]\n\t        + markdown_text[start:end]\n", "        + markdown_delimiters[1]\n\t        + markdown_text[end:],\n\t        # return added length\n\t        len(markdown_delimiters[0]) + len(markdown_delimiters[1]),\n\t    )\n\tdef telegram_entities_to_markdown(message_text: str, message_entities: list, strip_off_links: bool) -> str:\n\t    \"\"\"Convert Telegram entities to Markdown.\n\t    Args:\n\t        message_text: The text of the message.\n\t        message_entities: The entities of the message.\n", "        strip_off_links: Whether to strip off links.\n\t    Returns:\n\t        The message text in Markdown format.\n\t    \"\"\"\n\t    if not message_entities:\n\t        return message_text\n\t    markdown_map = {\n\t        MessageEntityBold: (\"**\", \"**\"),\n\t        MessageEntityItalic: (\"*\", \"*\"),\n\t        MessageEntityStrike: (\"~~\", \"~~\"),\n", "        MessageEntityCode: (\"`\", \"`\"),\n\t        MessageEntityPre: (\"```\", \"```\"),\n\t    }\n\t    # Create a list of tuples with start offset, end offset, entity type, and associated data.\n\t    entities = [\n\t        (entity.offset, entity.offset + entity.length, type(entity),\n\t         entity.url if isinstance(entity, MessageEntityTextUrl) else None)\n\t        for entity in message_entities\n\t    ]\n\t    # Sort entities by start offset in ascending order, and by end offset in descending order.\n", "    sorted_entities = sorted(entities, key=lambda e: (e[0], -e[1]))\n\t    message_text = utils.remove_markdown(\n\t        message_text, ignore_links=False)\n\t    offset_correction = 0\n\t    links = []  # To hold link text and URLs\n\t    for start, end, entity_type, url in sorted_entities:\n\t        start += offset_correction\n\t        end += offset_correction\n\t        markdown_delimiters = markdown_map.get(entity_type)\n\t        if markdown_delimiters:\n", "            message_text, correction = apply_markdown(\n\t                message_text, start, end, markdown_delimiters\n\t            )\n\t            offset_correction += correction\n\t        elif url:  # This is a MessageEntityTextUrl.\n\t            logger.debug(\"processing url: %s\", url)\n\t            links.append(f\"<{url}>\")\n\t            # No need to do anything here as we're only replacing the text with itself.\n\t    # Append the links at the end of the message\n\t    if links and not strip_off_links:\n", "        message_text += \"\\n\\n**Links**\\n\" + \"\\n\".join(links)\n\t    return message_text\n"]}
{"filename": "bridge/core.py", "chunked_list": ["\"\"\"A `bridge` to forward messages from Telegram to a Discord server.\"\"\"\n\timport asyncio\n\timport sys\n\tfrom typing import Any, Dict\n\timport discord\n\tfrom telethon import TelegramClient, events\n\tfrom telethon.tl.types import Channel, InputChannel\n\tfrom bridge.config import Config\n\tfrom bridge.discord_handler import (fetch_discord_reference,\n\t                                    forward_to_discord, get_mention_roles)\n", "from bridge.history import MessageHistoryHandler\n\tfrom bridge.logger import Logger\n\tfrom bridge.telegram_handler import (get_message_forward_hashtags,\n\t                                     handle_message_media,\n\t                                     process_message_text)\n\ttg_to_discord_message_ids = {}\n\tdiscord_channel_mappings = {}\n\tlogger = Logger.get_logger(Config().app.name)\n\thistory_manager = MessageHistoryHandler()\n\tqueued_events = asyncio.Queue()\n", "queued_event_ids = set()  # Set to store the IDs of queued events\n\tasync def add_to_queue(event):\n\t    \"\"\"Add unique events to the queue.\"\"\"\n\t    event_id = event.message.id  # This assumes that event.message.id is unique for each event\n\t    if event_id not in queued_event_ids:\n\t        await queued_events.put(event)\n\t        queued_event_ids.add(event_id)  # Add the event ID to the set\n\t        logger.info(\"Added event with ID %s to the queue\", event_id)\n\t    else:\n\t        logger.info(\n", "            \"Event with ID %s is already in the queue, skipping\", event_id)\n\tasync def start(telegram_client: TelegramClient, discord_client: discord.Client, config: Config):\n\t    \"\"\"Start the bridge.\"\"\"\n\t    logger.info(\"Starting the bridge...\")\n\t    input_channels_entities = []\n\t    async for dialog in telegram_client.iter_dialogs():\n\t        if not isinstance(dialog.entity, Channel) and not isinstance(dialog.entity, InputChannel):\n\t            if config.telegram.log_unhandled_conversations:\n\t                logger.warning(\"Excluded dialog name: %s, id: %s, type: %s\",\n\t                               dialog.name, dialog.entity.id, type(dialog.entity))\n", "            continue\n\t        for channel_mapping in config.telegram_forwarders:\n\t            forwarder_name = channel_mapping[\"forwarder_name\"]\n\t            tg_channel_id = channel_mapping[\"tg_channel_id\"]\n\t            mention_override = channel_mapping.get(\"mention_override\", [])\n\t            mention_override = {override[\"tag\"].lower(\n\t            ): override[\"roles\"] for override in mention_override}\n\t            discord_channel_config = {\n\t                \"discord_channel_id\": channel_mapping[\"discord_channel_id\"],\n\t                \"strip_off_links\": channel_mapping[\"strip_off_links\"],\n", "                \"mention_everyone\": channel_mapping[\"mention_everyone\"],\n\t                \"forward_everything\": channel_mapping.get(\"forward_everything\", False),\n\t                \"forward_hashtags\": channel_mapping.get(\"forward_hashtags\", []),\n\t                \"excluded_hashtags\": channel_mapping.get(\"excluded_hashtags\", []),\n\t                \"mention_override\": mention_override,\n\t                \"roles\": channel_mapping.get(\"roles\", []),\n\t            }\n\t            if tg_channel_id in {dialog.name, dialog.entity.id}:  # type: ignore\n\t                input_channels_entities.append(\n\t                    InputChannel(dialog.entity.id, dialog.entity.access_hash))  # type: ignore\n", "                discord_channel_mappings[forwarder_name] = discord_channel_config\n\t                logger.info(\"Registered TG channel '%s' with ID %s with Discord channel config %s\",\n\t                            dialog.name, dialog.entity.id, discord_channel_config)  # type: ignore\n\t    if not input_channels_entities:\n\t        logger.error(\"No input channels found, exiting\")\n\t        sys.exit(1)\n\t    async def dispatch_queued_events():\n\t        \"\"\"Dispatch queued events to Discord.\"\"\"\n\t        while not queued_events.empty():\n\t            event = await queued_events.get()\n", "            event_id = event.message.id\n\t            logger.info(\"Dispatching queued TG message\")\n\t            await handle_new_message(event, config, telegram_client, discord_client)\n\t            # Remove the event ID from the set\n\t            queued_event_ids.remove(event_id)\n\t            queued_events.task_done()\n\t    # Create tasks for dispatch_queued_events and handle_restored_internet_connectivity\n\t    dispatch_task = asyncio.create_task(dispatch_queued_events())\n\t    @telegram_client.on(events.NewMessage(chats=input_channels_entities))\n\t    async def handler(event):\n", "        \"\"\"Handle new messages in the specified Telegram channels.\"\"\"\n\t        if config.discord.is_healthy is False and config.app.internet_connected is True:\n\t            await add_to_queue(event)\n\t            return\n\t        event_id = event.message.id\n\t        if event_id in queued_event_ids:\n\t            # If the event was previously queued but Discord is now available, remove it from the set\n\t            queued_event_ids.remove(event_id)\n\t        await asyncio.gather(dispatch_task, handle_new_message(event, config, telegram_client, discord_client))\n\tasync def handle_new_message(event, config: Config, telegram_client: TelegramClient, discord_client: discord.Client):  # pylint: disable=too-many-locals\n", "    \"\"\"Handle the processing of a new Telegram message.\"\"\"\n\t    logger.debug(\"processing Telegram message: %s\", event.message.id)\n\t    tg_channel_id = event.message.peer_id.channel_id\n\t    matching_forwarders = get_matching_forwarders(tg_channel_id, config)\n\t    if len(matching_forwarders) < 1:\n\t        logger.error(\n\t            \"No forwarders found for Telegram channel %s\", tg_channel_id)\n\t        return\n\t    for discord_channel_config in matching_forwarders:\n\t        forwarder_name = discord_channel_config[\"forwarder_name\"]\n", "        discord_channel_config = discord_channel_mappings.get(\n\t            forwarder_name)\n\t        if not discord_channel_config:\n\t            logger.error(\n\t                \"Discord channel not found for Telegram channel %s\", tg_channel_id, exc_info=True)\n\t            continue\n\t        discord_channel_id = discord_channel_config[\"discord_channel_id\"]\n\t        forwarder_config: Dict[str, Any] = {\n\t            \"mention_everyone\": discord_channel_config[\"mention_everyone\"],\n\t            \"strip_off_links\": discord_channel_config[\"strip_off_links\"],\n", "            \"forward_everything\": discord_channel_config[\"forward_everything\"],\n\t            \"allowed_forward_hashtags\": discord_channel_config[\"forward_hashtags\"],\n\t            \"disallowed_hashtags\": discord_channel_config[\"excluded_hashtags\"],\n\t            \"mention_override\": discord_channel_config[\"mention_override\"],\n\t            \"roles\": discord_channel_config[\"roles\"],\n\t        }\n\t        should_forward_message = forwarder_config[\"forward_everything\"]\n\t        mention_everyone = forwarder_config[\"mention_everyone\"]\n\t        strip_off_links = forwarder_config[\"strip_off_links\"]\n\t        mention_roles = []\n", "        message_forward_hashtags = []\n\t        logger.debug(\"strip_off_links: %s\", strip_off_links)\n\t        if forwarder_config[\"allowed_forward_hashtags\"] or forwarder_config[\"mention_override\"]:\n\t            message_forward_hashtags = get_message_forward_hashtags(\n\t                event.message)\n\t            matching_forward_hashtags = [\n\t                tag for tag in forwarder_config[\"allowed_forward_hashtags\"] if tag[\"name\"].lower() in message_forward_hashtags]\n\t            if len(matching_forward_hashtags) > 0:\n\t                should_forward_message = True\n\t                mention_everyone = any(tag.get(\"override_mention_everyone\", False)\n", "                                       for tag in matching_forward_hashtags)\n\t        if forwarder_config[\"disallowed_hashtags\"]:\n\t            message_forward_hashtags = get_message_forward_hashtags(\n\t                event.message)\n\t            matching_forward_hashtags = [\n\t                tag for tag in forwarder_config[\"disallowed_hashtags\"] if tag[\"name\"].lower() in message_forward_hashtags]\n\t            if len(matching_forward_hashtags) > 0:\n\t                should_forward_message = False\n\t        if not should_forward_message:\n\t            continue\n", "        discord_channel = discord_client.get_channel(discord_channel_id)\n\t        server_roles = discord_channel.guild.roles  # type: ignore\n\t        mention_roles = get_mention_roles(message_forward_hashtags,\n\t                                          discord_channel_config[\"mention_override\"],\n\t                                          config.discord.built_in_roles,\n\t                                          server_roles)\n\t        message_text = await process_message_text(\n\t            event, forwarder_config, mention_everyone, mention_roles, config.openai.enabled)\n\t        discord_reference = await fetch_discord_reference(event,\n\t                                                          forwarder_name,\n", "                                                          discord_channel) if event.message.reply_to_msg_id else None\n\t        if event.message.media:\n\t            sent_discord_messages = await handle_message_media(telegram_client, event,\n\t                                                               discord_channel,\n\t                                                               message_text,\n\t                                                               discord_reference)\n\t        else:\n\t            sent_discord_messages = await forward_to_discord(discord_channel,  # type: ignore\n\t                                                             message_text,\n\t                                                             reference=discord_reference)  # type: ignore\n", "        if sent_discord_messages:\n\t            logger.debug(\"Forwarded TG message %s to Discord channel %s\",\n\t                         sent_discord_messages[0].id, discord_channel_id)\n\t            logger.debug(\"Saving mapping data for forwarder %s\",\n\t                         forwarder_name)\n\t            main_sent_discord_message = sent_discord_messages[0]\n\t            await history_manager.save_mapping_data(forwarder_name, event.message.id,\n\t                                                    main_sent_discord_message.id)\n\t            logger.info(\"Forwarded TG message %s to Discord message %s\",\n\t                        event.message.id, main_sent_discord_message.id)\n", "        else:\n\t            await history_manager.save_missed_message(forwarder_name,\n\t                                                      event.message.id,\n\t                                                      discord_channel_id,\n\t                                                      None)\n\t            logger.error(\"Failed to forward TG message %s to Discord\",\n\t                         event.message.id, exc_info=config.app.debug)\n\tdef get_matching_forwarders(tg_channel_id, config: Config):\n\t    \"\"\"Get the forwarders that match the given Telegram channel ID.\"\"\"\n\t    return [forwarder_config for forwarder_config in config.telegram_forwarders if tg_channel_id == forwarder_config[\"tg_channel_id\"]]  # pylint: disable=line-too-long\n", "async def on_restored_connectivity(config: Config, telegram_client: TelegramClient, discord_client: discord.Client):\n\t    \"\"\"Check and restore internet connectivity.\"\"\"\n\t    logger.debug(\"Checking for internet connectivity\")\n\t    while True:\n\t        if config.app.internet_connected and config.telegram.is_healthy is True:\n\t            logger.debug(\n\t                \"Internet connection active and Telegram is connected, checking for missed messages\")\n\t            try:\n\t                last_messages = await history_manager.get_last_messages_for_all_forwarders()\n\t                logger.debug(\"Last forwarded messages: %s\", last_messages)\n", "                for last_message in last_messages:\n\t                    forwarder_name = last_message[\"forwarder_name\"]\n\t                    last_tg_message_id = last_message[\"telegram_id\"]\n\t                    channel_id = config.get_telegram_channel_by_forwarder_name(\n\t                        forwarder_name)\n\t                    if channel_id:\n\t                        fetched_messages = await history_manager.fetch_messages_after(last_tg_message_id,\n\t                                                                                      channel_id,\n\t                                                                                      telegram_client)\n\t                        for fetched_message in fetched_messages:\n", "                            logger.debug(\n\t                                \"Recovered message %s from channel %s\", fetched_message.id, channel_id)\n\t                            event = events.NewMessage.Event(\n\t                                message=fetched_message)\n\t                            event.peer = await telegram_client.get_input_entity(\n\t                                channel_id)\n\t                            if config.discord.is_healthy is False:\n\t                                logger.warning(\"Discord is not available despite the connectivty is restored, queing TG message %s\",\n\t                                               event.message.id)\n\t                                await add_to_queue(event)\n", "                                continue\n\t                            # delay the message delivery to avoid rate limit and flood\n\t                            await asyncio.sleep(config.app.recoverer_delay)\n\t                            logger.debug(\n\t                                \"Forwarding recovered Telegram message %s\", event.message.id)\n\t                            await handle_new_message(event, config,\n\t                                                     telegram_client,\n\t                                                     discord_client)\n\t            except Exception as exception:  # pylint: disable=broad-except\n\t                logger.error(\n", "                    \"Failed to fetch missed messages: %s\", exception, exc_info=config.app.debug)\n\t        logger.debug(\"on_restored_connectivity will trigger again in for %s seconds\",\n\t                     config.app.healthcheck_interval)\n\t        await asyncio.sleep(config.app.healthcheck_interval)\n"]}
{"filename": "bridge/healtcheck_handler.py", "chunked_list": ["\"\"\"Handler for healthchecks\"\"\"\n\timport asyncio\n\timport socket\n\tfrom concurrent.futures import ThreadPoolExecutor\n\timport discord\n\tfrom telethon import TelegramClient\n\tfrom bridge.config import Config\n\tfrom bridge.discord_handler import DiscordClientHealth\n\tfrom bridge.events import EventDispatcher\n\tfrom bridge.logger import Logger\n", "config = Config.get_config_instance()\n\tlogger = Logger.get_logger(config.app.name)\n\tdiscord__client_health = DiscordClientHealth()\n\texecutor = ThreadPoolExecutor()\n\tasync def internet_connectivity_check() -> bool:\n\t    \"\"\"Check if the bridge has internet connectivity.\"\"\"\n\t    loop = asyncio.get_running_loop()\n\t    try:\n\t        # host = await loop.run_in_executor(executor, socket.gethostbyname, (\"one.one.one.one\"))\n\t        host = await loop.run_in_executor(executor, socket.gethostbyname, (\"google.com\"))\n", "        await loop.run_in_executor(executor, socket.create_connection, (host, 443), 5)\n\t        return True\n\t    except socket.gaierror as ex:\n\t        logger.error(\"Unable to resolve hostname: %s\", ex, exc_info=config.app.debug)\n\t        return False\n\t    except OSError as ex:\n\t        logger.error(\"Unable to reach the internetL %s\", ex, exc_info=config.app.debug)\n\t        return False\n\tasync def healthcheck(dispatcher: EventDispatcher, tgc: TelegramClient, dcl: discord.Client, interval: int = 30):\n\t    \"\"\"Check the health of the Discord and Telegram APIs periodically.\"\"\"\n", "    # Check for internet connectivity\n\t    while True:\n\t        try:\n\t            has_connectivity = await internet_connectivity_check()\n\t            if has_connectivity:\n\t                logger.debug(\"The bridge is online.\")\n\t                # set the internet connectivity status to True\n\t                config.app.internet_connected = True\n\t            else:\n\t                logger.warning(\"Unable to reach the internet.\")\n", "                # set the internet connectivity status to False\n\t                config.app.internet_connected = False\n\t                # wait for the specified interval\n\t                await asyncio.sleep(interval)\n\t                await healthcheck(dispatcher, tgc, dcl, interval)\n\t        except Exception as ex:  # pylint: disable=broad-except\n\t            logger.error(\n\t                \"An error occurred while checking internet connectivity: %s\", ex, exc_info=config.app.debug)\n\t        # Check Telegram API status\n\t        try:\n", "            if tgc.is_connected():\n\t                await tgc.get_me()\n\t                logger.debug(\"Telegram API is healthy.\")\n\t                # set the Telegram availability status to True\n\t                config.telegram.is_healthy = True\n\t        except ConnectionError as ex:\n\t            logger.error(\"Unable to reach the Telegram API: %s\", ex)\n\t            # set the Telegram availability status to False\n\t            config.telegram.is_healthy = False\n\t        except Exception as ex:  # pylint: disable=broad-except\n", "            logger.error(\n\t                \"An error occurred while connecting to the Telegram API: %s\", ex, exc_info=config.app.debug)\n\t            # set the Telegram availability status to False\n\t            config.telegram.is_healthy = False\n\t        # Check Discord API status\n\t        try:\n\t            discord_status, is_healthy = discord__client_health.report_status(\n\t                dcl,  config.discord.max_latency)\n\t            if is_healthy:\n\t                logger.debug(\"Discord API is healthy.\")\n", "                # set the Discord availability status to True\n\t                config.discord.is_healthy = True\n\t            else:\n\t                logger.warning(discord_status)\n\t                # set the Discord availability status to False\n\t                config.discord.is_healthy = False\n\t        except Exception as ex:  # pylint: disable=broad-except\n\t            logger.error(\n\t                \"An error occurred while connecting to the Discord API: %s\", ex, exc_info=config.app.debug)\n\t            # set the Discord availability status to False\n", "            config.discord.is_healthy = False\n\t        dispatcher.notify(\"healthcheck\", config)\n\t        # Sleep for the given interval and retry\n\t        await asyncio.sleep(interval)\n"]}
{"filename": "bridge/telegram_handler/__init__.py", "chunked_list": ["\"\"\"Initialize the telegram_handler module.\"\"\"\n\ttry:\n\t    from .core import (get_message_forward_hashtags, handle_message_media,\n\t                       process_media_message, process_message_text,\n\t                       process_url_message, start_telegram_client,\n\t                       check_telegram_session)\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "bridge/telegram_handler/core.py", "chunked_list": ["\"\"\"Telegram handler.\"\"\"\n\timport asyncio\n\timport json\n\timport os\n\tfrom asyncio.events import AbstractEventLoop\n\tfrom typing import Any, List\n\tfrom discord import Message\n\tfrom telethon import TelegramClient\n\tfrom telethon.errors.rpcerrorlist import (FloodWaitError,\n\t                                          PhoneCodeInvalidError,\n", "                                          SessionPasswordNeededError,\n\t                                          SessionRevokedError)\n\tfrom telethon.tl.types import (MessageEntityHashtag, MessageEntityTextUrl,\n\t                               MessageEntityUrl)\n\tfrom bridge.config import Config\n\tfrom bridge.discord_handler import forward_to_discord\n\tfrom bridge.logger import Logger\n\tfrom bridge.openai_handler import analyze_message_sentiment\n\tfrom bridge.utils import telegram_entities_to_markdown\n\tlogger = Logger.get_logger(Config().app.name)\n", "tg_to_discord_message_ids = {}\n\t# Check if the session file and the auth file exist\n\t# to estabils the user has an active session\n\tdef check_telegram_session() -> bool:\n\t    \"\"\"Check if the Telegram session file exists.\"\"\"\n\t    config = Config.get_config_instance()\n\t    if os.path.isfile(f\"{config.app.name}.session\") and os.path.isfile(config.api.telegram_auth_file):\n\t        return True\n\t    return False\n\tasync def get_auth_value_from_file(key: str) -> str | int:\n", "    \"\"\"Wait for the auth file to be created and then read a value from it.\"\"\"\n\t    config = Config.get_config_instance()\n\t    # Wait for the auth file to be created with a timeout of 120 seconds\n\t    for _ in range(config.api.telegram_auth_request_expiration):\n\t        if os.path.isfile(config.api.telegram_auth_file):\n\t            with open(config.api.telegram_auth_file, 'r', encoding=\"utf-8\") as auth_file:\n\t                value = json.load(auth_file).get(key)\n\t            if value:\n\t                logger.debug(\"Got the Telegram %s\", key)\n\t                return value\n", "        await asyncio.sleep(1)\n\t    raise TimeoutError(f\"Timeout waiting for {key}\")\n\tasync def get_telegram_password(api_auth: bool) -> str:\n\t    \"\"\"Get the Telegram password from the API payload,\n\t    the `TELEGRAM_PASSWORD` environment variable, or the config file.\"\"\"\n\t    telegram_password = os.getenv(\"TELEGRAM_PASSWORD\", None)\n\t    logger.debug(\"Attempting to get the Telegram password\")\n\t    if telegram_password is not None:\n\t        return telegram_password\n\t    config = Config.get_config_instance()\n", "    if not api_auth:\n\t        return config.telegram.password\n\t    telegram_password = await get_auth_value_from_file('password')\n\t    return str(telegram_password)\n\tasync def get_telegram_auth_code(api_auth: bool) -> str | int:\n\t    \"\"\"Get the Telegram auth code from the API payload, or the user's input.\"\"\"\n\t    logger.debug(\"Attempting to get the Telegram auth code\")\n\t    if api_auth:\n\t        return await get_auth_value_from_file('code')\n\t    code = input(\"Enter the Telegram 2FA code: \")\n", "    if not code:\n\t        raise ValueError(\"No code was entered.\")\n\t    return code\n\tasync def start_telegram_client(config: Config, event_loop: AbstractEventLoop | None = None) -> TelegramClient: # pylint: disable=too-many-statements\n\t    \"\"\"Start the Telegram client.\"\"\"\n\t    logger.info(\"Starting Telegram client...\")\n\t    if event_loop is None:\n\t        logger.debug(\"Creating a new event loop for Telegram client\")\n\t        event_loop = asyncio.get_event_loop()\n\t    # telethon_logger = Logger.get_telethon_logger()\n", "    # telethon_logger_handler = Logger.generate_handler(\n\t    #     f\"{config.app.name}_telegram\", config.logger)\n\t    # telethon_logger.addHandler(telethon_logger_handler)\n\t    telegram_client = TelegramClient(\n\t        session=config.app.name,\n\t        api_id=config.telegram.api_id,\n\t        api_hash=config.telegram.api_hash,\n\t        connection_retries=15,\n\t        retry_delay=4,\n\t        # base_logger=telethon_logger,\n", "        lang_code=\"en\",\n\t        system_lang_code=\"en\",\n\t        loop=event_loop,)\n\t    telegram_client.parse_mode = \"markdown\"\n\t    await telegram_client.connect()\n\t    logger.info(\"Signing in to Telegram...\")\n\t    def code_callback():\n\t        return get_telegram_auth_code(config.api.telegram_login_enabled)\n\t    try:\n\t        await telegram_client.start(\n", "            phone=config.telegram.phone,\n\t            code_callback=code_callback,  # type: ignore\n\t            password=lambda: get_telegram_password(config.api.telegram_login_enabled))  # type: ignore\n\t    except FloodWaitError as ex:\n\t        logger.error(\"Telegram client failed to start: %s\",\n\t                     ex, exc_info=config.app.debug)\n\t        logger.warning(\n\t            \"Retrying Telegram client start in %s seconds\", ex.seconds)\n\t        await asyncio.sleep(ex.seconds)\n\t        await telegram_client.start(\n", "            phone=config.telegram.phone,\n\t            code_callback=code_callback,  # type: ignore\n\t            password=lambda: get_telegram_password(config.api.telegram_login_enabled))  # type: ignore\n\t    except SessionPasswordNeededError:\n\t        logger.error(\"Telegram client failed to start: %s\",\n\t                     \"2FA is enabled but no password was provided\",\n\t                     exc_info=config.app.debug)\n\t        # append to the json file that 2FA is enabled\n\t        if os.path.isfile(config.api.telegram_auth_file) and config.api.telegram_login_enabled:\n\t            with open(config.api.telegram_auth_file, 'r', encoding=\"utf-8\") as auth_file:\n", "                auth_data = json.load(auth_file)\n\t            auth_data[\"mfa_required\"] = True\n\t            auth_data[\"error\"] = \"2FA is enabled but no password was provided\"\n\t            with open(config.api.telegram_auth_file, 'w', encoding=\"utf-8\") as auth_file:\n\t                json.dump(auth_data, auth_file)\n\t        raise\n\t    except SessionRevokedError:\n\t        logger.error(\"Telegram client failed to start: %s\",\n\t                     \"The current session was revoked\",\n\t                     exc_info=config.app.debug)\n", "        if os.path.isfile(config.api.telegram_auth_file) and config.api.telegram_login_enabled:\n\t            # append to the json file that the session was revoked\n\t            with open(config.api.telegram_auth_file, 'r', encoding=\"utf-8\") as auth_file:\n\t                auth_data = json.load(auth_file)\n\t            auth_data[\"session_revoked\"] = True\n\t            auth_data[\"error\"] = \"The current session was revoked\"\n\t            with open(config.api.telegram_auth_file, 'w', encoding=\"utf-8\") as auth_file:\n\t                json.dump(auth_data, auth_file)\n\t        raise\n\t    except PhoneCodeInvalidError:\n", "        logger.error(\"Telegram client failed to start: %s\",\n\t                     \"The phone code is invalid\",\n\t                     exc_info=config.app.debug)\n\t        if os.path.isfile(config.api.telegram_auth_file) and config.api.telegram_login_enabled:\n\t            # append to the json file that the phone code is invalid\n\t            with open(config.api.telegram_auth_file, 'r', encoding=\"utf-8\") as auth_file:\n\t                auth_data = json.load(auth_file)\n\t            auth_data[\"phone_code_invalid\"] = True\n\t            auth_data[\"error\"] = \"The phone code is invalid\"\n\t            with open(config.api.telegram_auth_file, 'w', encoding=\"utf-8\") as auth_file:\n", "                json.dump(auth_data, auth_file)\n\t        raise\n\t    # os.remove(config.telegram.auth_file)\n\t    bot_identity = await telegram_client.get_me(input_peer=False)\n\t    logger.info(\"Telegram client started the session: %s, with identity: %s\",\n\t                config.app.name, bot_identity.id)  # type: ignore\n\t    return telegram_client\n\tdef get_message_forward_hashtags(message):\n\t    \"\"\"Get forward_hashtags from a message.\"\"\"\n\t    entities = message.entities or []\n", "    forward_hashtags = [entity for entity in entities if isinstance(\n\t        entity, MessageEntityHashtag)]\n\t    return [message.text[hashtag.offset:hashtag.offset + hashtag.length] for hashtag in forward_hashtags]   # pylint: disable=line-too-long\n\tasync def process_message_text(event, forwarder_config: dict[str, Any],\n\t                               mention_everyone: bool,\n\t                               mention_roles: List[str],\n\t                               openai_enabled: bool) -> str:  # pylint: disable=too-many-arguments\n\t    \"\"\"Process the message text and return the processed text.\"\"\"\n\t    message_text = event.message.message\n\t    if openai_enabled:\n", "        suggestions = await analyze_message_sentiment(message_text)\n\t        message_text = f'{message_text}\\n{suggestions}'\n\t    if mention_everyone:\n\t        message_text += '\\n' + '@everyone'\n\t    if mention_roles:\n\t        mention_text = \", \".join(role for role in mention_roles)\n\t        message_text = f\"{mention_text}\\n{message_text}\"\n\t    return telegram_entities_to_markdown(message_text, event.message.entities,\n\t                                         forwarder_config[\"strip_off_links\"])\n\tasync def process_media_message(telegram_client: TelegramClient,\n", "                                event, discord_channel,\n\t                                message_text, discord_reference):\n\t    \"\"\"Process a message that contains media.\"\"\"\n\t    file_path = await telegram_client.download_media(event.message)\n\t    try:\n\t        with open(file_path, \"rb\") as image_file:  # type: ignore\n\t            sent_discord_messages = await forward_to_discord(discord_channel,\n\t                                                             message_text,\n\t                                                             image_file=image_file,\n\t                                                             reference=discord_reference)\n", "    except OSError as ex:\n\t        logger.error(\n\t            \"An error occurred while opening the file %s: %s\",  file_path, ex)\n\t        return\n\t    finally:\n\t        os.remove(file_path)  # type: ignore\n\t    return sent_discord_messages\n\tasync def handle_message_media(telegram_client: TelegramClient, event,\n\t                               discord_channel, message_text,\n\t                               discord_reference) -> List[Message] | None:\n", "    \"\"\"Handle a message that contains media.\"\"\"\n\t    contains_url = any(isinstance(entity, (MessageEntityTextUrl,\n\t                                           MessageEntityUrl))\n\t                       for entity in event.message.entities or [])\n\t    if contains_url:\n\t        sent_discord_messages = await process_url_message(discord_channel,\n\t                                                          message_text,\n\t                                                          discord_reference)\n\t    else:\n\t        sent_discord_messages = await process_media_message(telegram_client,\n", "                                                            event,\n\t                                                            discord_channel,\n\t                                                            message_text,\n\t                                                            discord_reference)\n\t    return sent_discord_messages\n\tasync def process_url_message(discord_channel, message_text, discord_reference):\n\t    \"\"\"Process a message that contains a URL.\"\"\"\n\t    sent_discord_messages = await forward_to_discord(discord_channel,\n\t                                                     message_text,\n\t                                                     reference=discord_reference)\n", "    return sent_discord_messages\n"]}
{"filename": "bridge/config/config.py", "chunked_list": ["\"\"\"Configuration handler.\"\"\"\n\tfrom __future__ import annotations\n\timport os\n\timport sys\n\tfrom typing import Any, Dict, List, Tuple\n\timport yaml\n\tclass AppConfig():  # pylint: disable=too-few-public-methods\n\t    \"\"\"Application configuration handler.\"\"\"\n\t    def __init__(self, config_data):\n\t        self.name: str = config_data[\"name\"]\n", "        self.version: str = config_data[\"version\"]\n\t        self.description: str = config_data[\"description\"]\n\t        self.debug: bool = config_data[\"debug\"]\n\t        self.internet_connected: bool = False\n\t        self.healthcheck_interval = config_data[\"healthcheck_interval\"]\n\t        self.recoverer_delay: float = config_data[\"recoverer_delay\"]\n\tclass APIConfig():  # pylint: disable=too-few-public-methods\n\t    \"\"\"API configuration handler.\"\"\"\n\t    def __init__(self, config_data):\n\t        self.enabled = config_data[\"enabled\"]\n", "        self.cors_origins: List[str] = config_data[\"cors_origins\"]\n\t        self.telegram_login_enabled: bool = config_data[\"telegram_login_enabled\"]\n\t        self.telegram_auth_file: str = config_data[\"telegram_auth_file\"]\n\t        self.telegram_auth_request_expiration: int = config_data[\"telegram_auth_request_expiration\"]\n\tclass LoggerConfig():  # pylint: disable=too-few-public-methods\n\t    \"\"\"Logger configuration handler.\"\"\"\n\t    def __init__(self, config_data):\n\t        self.level = config_data[\"level\"]\n\t        self.file_max_bytes = config_data[\"file_max_bytes\"]\n\t        self.file_backup_count = config_data[\"file_backup_count\"]\n", "        self.format = config_data[\"format\"]\n\t        self.date_format = config_data[\"date_format\"]\n\t        self.console = config_data[\"console\"]\n\tclass TelegramConfig():  # pylint: disable=too-few-public-methods\n\t    \"\"\"Telegram configuration handler.\"\"\"\n\t    def __init__(self, config_data):\n\t        self.is_healthy: bool = False\n\t        self.phone = config_data[\"phone\"]\n\t        self.password: str = config_data[\"password\"]\n\t        self.api_id: int = config_data[\"api_id\"]\n", "        self.api_hash: str = config_data[\"api_hash\"]\n\t        self.log_unhandled_conversations: bool = config_data[\"log_unhandled_conversations\"]\n\tclass DiscordConfig():  # pylint: disable=too-few-public-methods\n\t    \"\"\"Discord configuration handler.\"\"\"\n\t    def __init__(self, config_data):\n\t        self.is_healthy: bool = False\n\t        self.bot_token: str = config_data[\"bot_token\"]\n\t        self.built_in_roles: List[str] = config_data[\"built_in_roles\"]\n\t        self.max_latency: float = config_data[\"max_latency\"]\n\tclass OpenAIConfig():  # pylint: disable=too-few-public-methods\n", "    \"\"\"OpenAI configuration handler.\"\"\"\n\t    def __getitem__(self, key: str) -> str:\n\t        return getattr(self, key)\n\t    def __init__(self, config_data):\n\t        self.is_healthy: bool = True\n\t        self.api_key: str = config_data[\"api_key\"]\n\t        self.organization: str = config_data[\"organization\"]\n\t        self.enabled: bool = config_data[\"enabled\"]\n\t        self.sentiment_analysis_prompt = config_data[\"sentiment_analysis_prompt\"]\n\tclass Config:  # pylint: disable=too-many-instance-attributes\n", "    \"\"\"Configuration handler.\"\"\"\n\t    _instances: Dict[str, 'Config'] = {}\n\t    _file_path = os.path.join(\n\t        os.path.curdir,\n\t        \"config.yml\",\n\t    )\n\t    def __new__(cls):\n\t        \"\"\"Creates a new Config instance.\"\"\"\n\t        if None not in cls._instances:\n\t            instance = super().__new__(cls)\n", "            instance._initialized = False\n\t            cls._instances[\"\"] = instance\n\t        return cls._instances[\"\"]\n\t    def __init__(self):\n\t        \"\"\"Initializes a new Config instance.\"\"\"\n\t        if not self._initialized:\n\t            self._initialized = True\n\t            self.app: AppConfig\n\t            self.api: APIConfig\n\t            self.logger: LoggerConfig\n", "            self.telegram: TelegramConfig\n\t            self.discord: DiscordConfig\n\t            self.openai: OpenAIConfig\n\t            self.telegram_forwarders = []\n\t            self.load()\n\t    def set_file_path(self, version: str):\n\t        \"\"\"Set the file path based on the version.\"\"\"\n\t        if version:\n\t            self._file_path = os.path.join(\n\t                os.path.curdir,\n", "                f\"config-{version}.yml\",\n\t            )\n\t        else:\n\t            self._file_path = os.path.join(\n\t                os.path.curdir,\n\t                \"config.yml\",\n\t            )\n\t    def set_version(self, version: str):\n\t        \"\"\"Set the version of the configuration.\"\"\"\n\t        if version not in Config._instances:\n", "            Config._instances[version] = Config()\n\t        Config._instances[version].set_file_path(version)\n\t        Config._instances[version].load()\n\t        return Config._instances[version]\n\t    @staticmethod\n\t    def get_config_instance(version: str | None = \"\") -> 'Config':\n\t        \"\"\"Get the configuration instance based on the version.\"\"\"\n\t        try:\n\t            return Config._instances[version] if version and version in Config._instances else Config._instances[\"\"]\n\t        except KeyError as ex:\n", "            raise ValueError(f'Invalid version: {version}') from ex\n\t    # Set the configuration instance based on the version.\n\t    @staticmethod\n\t    def set_config_instance(config: 'Config', version: str | None = \"\") -> Config:\n\t        \"\"\"Set the configuration instance based on the version.\"\"\"\n\t        if not version:\n\t            version = \"\"\n\t        if version not in Config._instances:\n\t            print(\"Setting config instance for version %s\", version)\n\t            Config._instances[version] = config\n", "        return config\n\t    def load(self) -> Any:\n\t        \"\"\"Load configuration from the 'config-{version}.yml' file.\"\"\"\n\t        try:\n\t            with open(self._file_path, 'rb') as config_file:\n\t                config_data = yaml.safe_load(config_file)\n\t        except FileNotFoundError:\n\t            print(\"Error: Configuration file not found.\")\n\t            sys.exit(1)\n\t        except yaml.YAMLError as ex:\n", "            print(\"Error parsing configuration file: %s\", ex)\n\t            sys.exit(1)\n\t        required_keys = [\n\t            \"application\",\n\t            \"logger\",\n\t            \"telegram\",\n\t            \"discord\",\n\t            \"telegram_forwarders\",\n\t        ]\n\t        for key in required_keys:\n", "            if key not in config_data:\n\t                print(\n\t                    \"Error: Key %s not found in the configuration file.\", key)\n\t                sys.exit(1)\n\t        valid, errors = Config.validate_config(config_data)\n\t        if not valid:\n\t            print(\"Error: Invalid configuration file.\")\n\t            for error in errors:\n\t                print(f\"\\n{error}\\n\")\n\t            sys.exit(1)\n", "        self.app = AppConfig(config_data[\"application\"])\n\t        self.api = APIConfig(config_data[\"api\"])\n\t        self.logger = LoggerConfig(config_data[\"logger\"])\n\t        self.telegram = TelegramConfig(config_data[\"telegram\"])\n\t        self.discord = DiscordConfig(config_data[\"discord\"])\n\t        self.openai = OpenAIConfig(config_data[\"openai\"])\n\t        self.telegram_forwarders = config_data[\"telegram_forwarders\"]\n\t        return config_data\n\t    @ staticmethod\n\t    def validate_openai_enabled(config: OpenAIConfig) -> Tuple[bool, str]:\n", "        \"\"\"Check for valid types\"\"\"\n\t        if config[\"enabled\"]:\n\t            if config[\"api_key\"] == \"\" or config[\"organization\"] == \"\" or config[\"sentiment_analysis_prompt\"] is None:\n\t                return False,  \"Invalid configuration: `api_key`, `organization`, and `sentiment_analysis_prompt` must be set when `enabled` is True.\"  # pylint: disable=line-too-long\n\t        return True, \"\"\n\t    @ staticmethod\n\t    def validate_forwarder_types(forwarder) -> Tuple[bool, str]:\n\t        \"\"\"Check for valid types\"\"\"\n\t        tg_channel_id = forwarder[\"tg_channel_id\"]\n\t        discord_channel_id = forwarder[\"discord_channel_id\"]\n", "        if not isinstance(tg_channel_id, int):\n\t            return False, f\"Invalid configuration: `tg_channel_id` must be an integer: forwarder with `tg_channel_id` {tg_channel_id}\"  # pylint: disable=line-too-long\n\t        if not isinstance(discord_channel_id, int):\n\t            return False, f\"Invalid configuration: `discord_channel_id` must be an integer: forwarder with `tg_channel_id` {tg_channel_id}\"  # pylint: disable=line-too-long\n\t        return True, \"\"\n\t    @ staticmethod\n\t    def validate_forwarder_combinations(forwarder, forwarder_combinations) -> Tuple[bool, str]:\n\t        \"\"\"Check for unique combination of tg_channel_id and discord_channel_id\"\"\"\n\t        tg_channel_id = forwarder[\"tg_channel_id\"]\n\t        discord_channel_id = forwarder[\"discord_channel_id\"]\n", "        combination = (tg_channel_id, discord_channel_id)\n\t        if combination in forwarder_combinations:\n\t            return False, f\"Invalid configuration: duplicate forwarder with combination {combination}\"\n\t        forwarder_combinations.add(combination)\n\t        return True, \"\"\n\t    @ staticmethod\n\t    def validate_mention_everyone_and_override(forwarder, forward_hashtags) -> Tuple[bool, str]:\n\t        \"\"\"Check for mention_everyone and override_mention_everyone conflict\"\"\"\n\t        tg_channel_id = forwarder[\"tg_channel_id\"]\n\t        mention_everyone = forwarder[\"mention_everyone\"]\n", "        if mention_everyone and any(tag.get(\"override_mention_everyone\", False) for tag in forward_hashtags):\n\t            return False, f\"Invalid configuration: `override_mention_everyone` has no effect when `mention_everyone` set to True: forwarder with `tg_channel_id` {tg_channel_id}\"  # pylint: disable=line-too-long\n\t        return True, \"\"\n\t    @ staticmethod\n\t    def validate_shared_hashtags(forwarders) -> Tuple[bool, str]:\n\t        \"\"\"Check for shared hashtags in forwarders with the same tg_channel_id\"\"\"\n\t        tg_channel_hashtags = {}\n\t        for forwarder in forwarders:\n\t            tg_channel_id = forwarder[\"tg_channel_id\"]\n\t            forward_hashtags = {tag[\"name\"].lower() for tag in forwarder.get(\n", "                \"forward_hashtags\", [])} if forwarder.get(\"forward_hashtags\") else set()\n\t            if forward_hashtags:  # Only process non-empty forward_hashtags\n\t                if tg_channel_id not in tg_channel_hashtags:\n\t                    tg_channel_hashtags[tg_channel_id] = [forward_hashtags]\n\t                else:\n\t                    for existing_hashtags in tg_channel_hashtags[tg_channel_id]:\n\t                        shared_hashtags = existing_hashtags.intersection(\n\t                            forward_hashtags)\n\t                        if shared_hashtags:\n\t                            return False, f\"Shared hashtags {shared_hashtags} found for forwarders with tg_channel_id {tg_channel_id}. The same message will be forwarded multiple times.\"  # pylint: disable=line-too-long\n", "                    tg_channel_hashtags[tg_channel_id].append(forward_hashtags)\n\t        return True, \"\"\n\t    @staticmethod\n\t    def validate_hashtags_overlap(forwarder, forward_hashtags, excluded_hashtags) -> Tuple[bool, str]:\n\t        \"\"\"Check for overlapping hashtags between forward_hashtags and excluded_hashtags\"\"\"\n\t        tg_channel_id = forwarder[\"tg_channel_id\"]\n\t        forward_hashtags_names = {tag[\"name\"].lower()\n\t                                  for tag in forward_hashtags}\n\t        excluded_hashtags_names = {tag[\"name\"].lower()\n\t                                   for tag in excluded_hashtags}\n", "        common_hashtags = forward_hashtags_names.intersection(\n\t            excluded_hashtags_names)\n\t        if common_hashtags:\n\t            return False, f\"Invalid configuration: overlapping hashtags {common_hashtags} found in forward_hashtags and excluded_hashtags for forwarder with `tg_channel_id` {tg_channel_id}\"  # pylint: disable=line-too-long\n\t        return True, \"\"\n\t    @ staticmethod\n\t    def validate_config(config) -> Tuple[bool, List[str]]:\n\t        \"\"\"Validate the configuration.\"\"\"\n\t        forwarders = config[\"telegram_forwarders\"]\n\t        forwarder_combinations = set()\n", "        valid = True\n\t        errors: List[str] = []\n\t        valid, error = Config.validate_openai_enabled(config[\"openai\"])\n\t        if not valid:\n\t            errors.append(error)\n\t        forwarder_error_string = \"Invalid forwarder configuration:\"\n\t        for forwarder in forwarders:\n\t            forwarder_error_string = f\"{forwarder_error_string} forwarder name: {forwarder['forwarder_name']}\"\n\t            forward_hashtags = Config.get_forward_hashtags(forwarder)\n\t            if len(forward_hashtags) <= 0 and forwarder[\"forward_everything\"] is False:\n", "                valid = False\n\t                errors.append(\n\t                    f'{forwarder_error_string} `forward_hashtags` must be set when `forward_everything` is False')  # pylint: disable=line-too-long\n\t            excluded_hashtags = Config.get_excluded_hashtags(forwarder)\n\t            valid, error = Config.validate_forwarder_types(forwarder)\n\t            if not valid:\n\t                errors.append(f\"{forwarder_error_string} {error}\")\n\t            valid, error = Config.validate_forwarder_combinations(\n\t                forwarder, forwarder_combinations)\n\t            if not valid:\n", "                errors.append(f\"{forwarder_error_string} {error}\")\n\t            valid, error = Config.validate_mention_everyone_and_override(\n\t                forwarder, forward_hashtags)\n\t            if not valid:\n\t                errors.append(f\"{forwarder_error_string} {error}\")\n\t            valid, error = Config.validate_hashtags_overlap(\n\t                forwarder, forward_hashtags, excluded_hashtags)\n\t            if not valid:\n\t                errors.append(f\"{forwarder_error_string} {error}\")\n\t        valid, error = Config.validate_shared_hashtags(forwarders)\n", "        if not valid:\n\t            errors.append(error)\n\t        valid = not errors\n\t        return valid, errors\n\t    @staticmethod\n\t    def get_excluded_hashtags(forwarder):\n\t        \"\"\"Get exclude_hashtags from forwarder or set an empty list.\"\"\"\n\t        if \"excluded_hashtags\" in forwarder:\n\t            excluded_hashtags = forwarder[\"excluded_hashtags\"]\n\t        else:\n", "            excluded_hashtags = []\n\t        return excluded_hashtags\n\t    @ staticmethod\n\t    def get_forward_hashtags(forwarder):\n\t        \"\"\"Get forward_hashtags from forwarder or set an empty list.\"\"\"\n\t        if \"forward_hashtags\" in forwarder:\n\t            forward_hashtags = forwarder[\"forward_hashtags\"]\n\t        else:\n\t            forward_hashtags = []\n\t        return forward_hashtags\n", "    def get_telegram_channel_by_forwarder_name(self, forwarder_name: str):\n\t        \"\"\"Get the Telegram channel ID associated with a given forwarder ID.\"\"\"\n\t        for forwarder in self.telegram_forwarders:\n\t            if forwarder.get(\"forwarder_name\") == forwarder_name:\n\t                return forwarder.get(\"tg_channel_id\")\n\t        return None\n"]}
{"filename": "bridge/config/__init__.py", "chunked_list": ["\"\"\"Initialize the config module.\"\"\"\n\ttry:\n\t    from .config import Config, LoggerConfig\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "bridge/events/events.py", "chunked_list": ["\"\"\"Event dispatcher for the bridge.\"\"\"\n\tfrom __future__ import annotations\n\timport asyncio\n\tfrom abc import ABC, abstractmethod\n\tfrom typing import Any, Callable, Dict, List\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\tclass EventDispatcher:\n\t    \"\"\"Event dispatcher class.\"\"\"\n", "    def __init__(self, subscribers=None):\n\t        # a list of subscribers\n\t        self.subscribers: Dict[str, List[EventSubscriber]] = subscribers or {}\n\t    def add_subscriber(self, event: str, subscriber):\n\t        \"\"\"Add a subscriber to the event dispatcher.\n\t        Args:\n\t            event: The event to subscribe to.\n\t            subscriber: The subscriber to add.\n\t        \"\"\"\n\t        logger.debug(\"Adding subscriber: %s\", subscriber)\n", "        if self.subscribers.get(event) is None:\n\t            self.subscribers[event] = []\n\t        if subscriber not in self.subscribers[event]:\n\t            try:\n\t                self.subscribers[event].append(subscriber)\n\t                logger.info(\"Subscriber added: %s\", subscriber)\n\t            except KeyError:\n\t                self.subscribers[event] = [subscriber]\n\t                logger.info(\"Subscriber added: %s\", subscriber)\n\t        else:\n", "            logger.info(\"Subscriber already exists: %s\", subscriber)\n\t    def remove_subscriber(self, event, subscriber):\n\t        \"\"\"Remove a subscriber from the event dispatcher.\"\"\"\n\t        if event in self.subscribers and subscriber in self.subscribers[event]:\n\t            self.subscribers[event].remove(subscriber)\n\t            logger.info(\"Subscriber removed: %s\", subscriber)\n\t        else:\n\t            logger.info(\"Subscriber not found: %s\", subscriber)\n\t    def notify(self, event, data=None):\n\t        \"\"\"Notify subscribers of an event.\"\"\"\n", "        logger.debug(\"Event dispatcher notified of event: %s - data: %s\", event, data)\n\t        if event in self.subscribers:\n\t            for subscriber in self.subscribers[event]:\n\t                logger.debug(\"Event dispatcher notifying subscriber: %s\", subscriber)\n\t                try:\n\t                    if hasattr(subscriber, \"update\"):\n\t                        # asyncio.create_task(subscriber.update(event, data))\n\t                        subscriber.update(event, data)\n\t                except EventDispatcherException as ex:\n\t                    message = \"The event dispatcher failed to notify its subscribers\"\n", "                    logger.error(\"%s - event: %s - error: %s\",  message, event, ex, exc_info=Config.get_config_instance().app.debug)\n\t                    # raise EventDispatcherException(message=message) from ex\n\t                except Exception as ex: # pylint: disable=broad-except\n\t                    message = \"The event dispatcher failed to notify its subscribers\"\n\t                    logger.error(\"%s - event: %s - error: %s\",  message, event, ex, exc_info=Config.get_config_instance().app.debug)\n\t                    # raise EventDispatcherException(message=message) from ex\n\t                else:\n\t                    logger.debug(\"Event dispatcher successfully notified subscriber: %s\", subscriber)\n\t                finally:\n\t                    logger.debug(\"Event dispatcher finished notifying subscriber: %s\", subscriber)\n", "        else:\n\t            logger.info(\"Event dispatcher has no subscribers for event: %s\", event)\n\t    def stop(self):\n\t        \"\"\"Stop the event dispatcher.\"\"\"\n\t        logger.debug(\"Stopping event dispatcher\")\n\t        self.subscribers.clear()\n\t        logger.info(\"Event dispatcher stopped\")\n\tclass EventDispatcherException(Exception):\n\t    \"\"\"Event dispatcher exception class.\"\"\"\n\t    def __init__(self, message):\n", "        \"\"\"Initialize the event dispatcher exception.\n\t        Args:\n\t            message: The message of the event dispatcher exception.\n\t        \"\"\"\n\t        super().__init__(message)\n\t        self.message = message\n\t    def __str__(self):\n\t        \"\"\"Return the string representation of the event dispatcher exception.\"\"\"\n\t        return self.message\n\t    def __iter__(self):\n", "        \"\"\"Return the iterator for the event dispatcher exception.\"\"\"\n\t        return iter(self.message)\n\t    def __eq__(self, other):\n\t        \"\"\"Return whether this event dispatcher exception is equal to another object.\n\t        Args:\n\t            other: The other object.\n\t        \"\"\"\n\t        if not isinstance(other, EventDispatcherException):\n\t            return False\n\t        return self.message == other.message\n", "    def __ne__(self, other):\n\t        \"\"\"Return whether this event dispatcher exception is not equal to another object.\n\t        Args:\n\t            other: The other object.\n\t        \"\"\"\n\t        return not self.__eq__(other)\n\t    def __hash__(self):\n\t        \"\"\"Return the hash of this event dispatcher exception.\"\"\"\n\t        return hash(self.message)\n\tclass EventSubscriber(ABC): # pylint: disable=too-few-public-methods\n", "    \"\"\"Event subscriber abstract base class.\"\"\"\n\t    def __init__(self, name, dispatcher: EventDispatcher, subscribers=None):\n\t        self.name = name\n\t        self.dispatcher: EventDispatcher = dispatcher\n\t        # self.subscribers: Dict[str, List[EventSubscriber]] = subscribers or {}\n\t        self.subscribers: Dict[str, Dict[str, List[Callable]]] = subscribers or {}\n\t    @abstractmethod\n\t    def update(self, event:str, data:Any | None = None):\n\t        \"\"\"\n\t        Update the event subscriber with a new event.\n", "        Args:\n\t            event (str): The event string.\n\t            data: The data object.\n\t        \"\"\"\n\t        if event in self.subscribers:\n\t            for func in self.subscribers[event]:\n\t                try:\n\t                    if asyncio.iscoroutinefunction(func) and hasattr(func, \"update\"):\n\t                        logger.debug(\"Event subscriber %s updating with coroutine function %s\", self.name, func)\n\t                        # asyncio.ensure_future(func(data))\n", "                        func(data) # type: ignore\n\t                except EventDispatcherException as ex:\n\t                    message = \"The event subscriber failed to update\"\n\t                    logger.error(\"%s - event: %s\",  message, event)\n\t                    raise EventDispatcherException(message=message) from ex\n\t    # Create an on_update decorator for the event subscriber.\n\t    def create_on_update_decorator(self):\n\t        \"\"\"Create an on_update decorator for the event subscriber.\"\"\"\n\t        def on_update(event: str):\n\t            def decorator(func):\n", "                def wrapper(*args, **kwargs):\n\t                    logger.debug(\n\t                        \"Decorator %s called with args %s and kwargs %s\", event, args, kwargs\n\t                    )\n\t                    result = func(*args, **kwargs)\n\t                    if asyncio.iscoroutine(result):\n\t                        result = asyncio.ensure_future(result)\n\t                    return result\n\t                # add the original function as a subscriber, not the wrapper\n\t                self.dispatcher.add_subscriber(event, wrapper)\n", "                return wrapper\n\t            return decorator\n\t        return on_update\n"]}
{"filename": "bridge/events/__init__.py", "chunked_list": ["\"\"\"The Brigde event dispatcher.\"\"\"\n\ttry:\n\t    from .events import (EventDispatcher, EventDispatcherException,\n\t                         EventSubscriber)\n\texcept ImportError:\n\t    raise ImportError(\"Unable to import the event dispatcher.\") from None\n"]}
{"filename": "bridge/enums/request_type.py", "chunked_list": ["\"\"\"Request Type Enum\"\"\"\n\tfrom enum import Enum\n\tclass RequestTypeEnum(str, Enum):\n\t    \"\"\"Request Type Enum.\"\"\"\n\t    START = \"start\"\n\t    STOP = \"stop\"\n\t    RELOAD = \"reload\"\n\t    UPLOAD_CONFIG = \"upload_config\"\n\t    POST_CONFIG = \"post_config\"\n\t    CHANGE_CONFIG_VERSION = \"change_config_version\"\n"]}
{"filename": "bridge/enums/process_state.py", "chunked_list": ["\"\"\"Prcess State Enum\"\"\"\n\tfrom enum import Enum\n\tclass ProcessStateEnum(str, Enum):\n\t    \"\"\"Process State Enum.\"\"\"\n\t    RUNNING = \"running\"\n\t    STARTING = \"starting\"\n\t    STOPPED = \"stopped\"\n\t    STOPPING = \"stopping\"\n\t    PAUSED = \"paused\"\n\t    ORPHANED = \"orphaned\"\n", "    UNKNOWN = \"unknown\"\n"]}
{"filename": "bridge/enums/__init__.py", "chunked_list": ["\"\"\"Process State Enum.\"\"\"\n\ttry:\n\t    from .process_state import ProcessStateEnum\n\t    from .request_type import RequestTypeEnum\n\texcept ImportError as exc:\n\t    raise ImportError('Failed importing ProcessStateEnum') from exc\n"]}
{"filename": "bridge/logger/formatter.py", "chunked_list": ["\"\"\"Logger formatters.\"\"\"\"\"\n\timport logging\n\timport sys\n\tfrom copy import copy\n\tfrom typing import Optional\n\timport click\n\tif sys.version_info < (3, 8):  # pragma: py-gte-38\n\t    from typing_extensions import Literal\n\telse:  # pragma: py-lt-38\n\t    from typing import Literal\n", "TRACE_LOG_LEVEL = 5\n\tclass ColourizedFormatter(logging.Formatter):\n\t    \"\"\"\n\t    A custom log formatter class that:\n\t    * Outputs the LOG_LEVEL with an appropriate color.\n\t    * If a log call includes an `extras={\"color_message\": ...}` it will be used\n\t      for formatting the output, instead of the plain text message.\n\t    \"\"\"\n\t    level_name_colors = {\n\t        TRACE_LOG_LEVEL: lambda level_name: click.style(str(level_name), fg=\"blue\"),\n", "        logging.DEBUG: lambda level_name: click.style(str(level_name), fg=\"cyan\"),\n\t        logging.INFO: lambda level_name: click.style(str(level_name), fg=\"green\"),\n\t        logging.WARNING: lambda level_name: click.style(str(level_name), fg=\"yellow\"),\n\t        logging.ERROR: lambda level_name: click.style(str(level_name), fg=\"red\"),\n\t        logging.CRITICAL: lambda level_name: click.style(\n\t            str(level_name), fg=\"bright_red\"\n\t        ),\n\t    }\n\t    def __init__(\n\t        self,\n", "        fmt: Optional[str] = None,\n\t        datefmt: Optional[str] = None,\n\t        style: Literal[\"%\", \"{\", \"$\"] = \"%\",\n\t        use_colors: Optional[bool] = None,\n\t    ):\n\t        if use_colors in (True, False):\n\t            self.use_colors = use_colors\n\t        else:\n\t            self.use_colors = sys.stdout.isatty()\n\t        super().__init__(fmt=fmt, datefmt=datefmt, style=style)\n", "    def color_level_name(self, level_name: str, level_no: int) -> str:\n\t        \"\"\"Colorize the level name.\"\"\"\n\t        def default(level_name: str) -> str:\n\t            return str(level_name)  # pragma: no cover\n\t        func = self.level_name_colors.get(level_no, default)\n\t        return func(level_name)\n\t    def color_asctime(self, date: str) -> str:\n\t        \"\"\"Colorize the date.\"\"\"\n\t        return click.style(date, fg=\"bright_blue\")\n\t    def format_pid(self, pid: int) -> str:\n", "        \"\"\"Format the pid.\"\"\"\n\t        return click.style(str(pid), fg=\"blue\", bold=True)\n\t    def should_use_colors(self) -> bool:\n\t        \"\"\"Whether the formatter should use colors or not.\"\"\"\n\t        return True  # pragma: no cover\n\t    def formatMessage(self, record: logging.LogRecord) -> str:\n\t        recordcopy = copy(record)\n\t        levelname = recordcopy.levelname\n\t        seperator = \" \" * (8 - len(recordcopy.levelname))\n\t        asctime = recordcopy.asctime\n", "        process = recordcopy.process if recordcopy.process else 0\n\t        message = recordcopy.getMessage()\n\t        if self.use_colors:\n\t            levelname = self.color_level_name(levelname, recordcopy.levelno)\n\t            asctime = self.color_asctime(recordcopy.asctime)\n\t            process = self.format_pid(process)\n\t            if \"color_message\" in recordcopy.__dict__:\n\t                recordcopy.msg = recordcopy.__dict__[\"color_message\"]\n\t                recordcopy.__dict__[\"message\"] = message\n\t        recordcopy.__dict__[\"levelprefix\"] = levelname + \":\" + seperator\n", "        recordcopy.__dict__[\"asctime\"] = asctime + \":\"\n\t        recordcopy.__dict__[\"message\"] = f\"{process} - \" + message\n\t        return super().formatMessage(recordcopy)\n\tclass DefaultFormatter(ColourizedFormatter):\n\t    \"\"\"The default formatter for the logger.\"\"\"\n\t    def should_use_colors(self) -> bool:\n\t        return sys.stderr.isatty()  # pragma: no cover\n"]}
{"filename": "bridge/logger/logger.py", "chunked_list": ["\"\"\"Create a logger for the application.\"\"\"\"\"\n\timport logging\n\tfrom logging.handlers import RotatingFileHandler\n\tfrom logging import StreamHandler\n\tfrom bridge.config import LoggerConfig\n\timport bridge.logger.formatter as log_formatter\n\tclass Logger(logging.Logger):\n\t    \"\"\"Singleton logger class. It allows to create only one instance of the logger.\"\"\"\n\t    _instance = None\n\t    def __new__(cls, *args):  # pylint: disable=unused-argument\n", "        if cls._instance is None:\n\t            cls._instance = super().__new__(cls)\n\t        return cls._instance\n\t    def __init__(self, name: str):\n\t        if not self.__dict__:\n\t            super().__init__(name)\n\t    def configure(self, logger_config: LoggerConfig):\n\t        \"\"\"Apply the logger's configuration.\"\"\"\n\t        level = getattr(logging, logger_config.level.upper(), None)\n\t        if level is None:\n", "            level = logging.INFO\n\t        # Remove all handlers associated with the logger object.\n\t        for logger_handler in self.handlers:\n\t            self.removeHandler(logger_handler)\n\t        handler = Logger.generate_handler(self.name, logger_config)\n\t        self.addHandler(handler)\n\t        # Clear handlers from the root logger\n\t        logging.root.handlers = []\n\t    @staticmethod\n\t    def generate_handler(file_name: str, logger_config: LoggerConfig) -> RotatingFileHandler | StreamHandler:\n", "        \"\"\"generate the handler for any external logger\"\"\"\n\t        level = getattr(logging, logger_config.level.upper(), None)\n\t        if level is None:\n\t            level = logging.INFO\n\t        formatter = log_formatter.ColourizedFormatter(use_colors=logger_config.console, fmt=logger_config.format)\n\t        if not logger_config.console:\n\t            # The log files will rotate when they reach 10 MB in size.\n\t            # The backupCount parameter is set to 5,\n\t            # which means that up to 5 backup files will be kept.\n\t            handler = RotatingFileHandler(\n", "                f'{file_name}.log',\n\t                maxBytes=logger_config.file_max_bytes,\n\t                backupCount=logger_config.file_backup_count)\n\t        else:\n\t            handler = logging.StreamHandler()\n\t        handler.setLevel(level)  # Set log level for the handler\n\t        handler.setFormatter(formatter)\n\t        return handler\n\t    @staticmethod\n\t    def get_logger(name: str) -> logging.Logger:\n", "        \"\"\"Get a logger for the application.\"\"\"\n\t        logger = Logger(name)\n\t        return logger\n\t    @staticmethod\n\t    def get_telethon_logger() -> logging.Logger:\n\t        \"\"\"Get the Telethon logger\"\"\"\n\t        logger = logging.getLogger('telethon')\n\t        return logger\n\t    @staticmethod\n\t    def init_logger(name: str, logger_config: LoggerConfig) -> logging.Logger:\n", "        \"\"\"Initialize a logger for the application.\"\"\"\n\t        logger = Logger(name)\n\t        logger.configure(logger_config)\n\t        return logger\n"]}
{"filename": "bridge/logger/__init__.py", "chunked_list": ["\"\"\"logger module.\"\"\"\n\ttry:\n\t    from .logger import Logger\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "bridge/discord_handler/__init__.py", "chunked_list": ["\"\"\"Initialize the discord_handler module.\"\"\"\n\ttry:\n\t    from .core import (fetch_discord_reference, forward_to_discord,\n\t                       get_mention_roles, is_builtin_mention, start_discord)\n\t    from .health import DiscordClientHealth\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "bridge/discord_handler/core.py", "chunked_list": ["\"\"\"Discord handler.\"\"\"\n\timport asyncio\n\timport sys\n\tfrom typing import List, Sequence\n\timport discord\n\tfrom discord import Message, MessageReference, TextChannel\n\tfrom bridge.config import Config\n\tfrom bridge.history import MessageHistoryHandler\n\tfrom bridge.logger import Logger\n\tfrom bridge.utils import split_message\n", "# from discord.abc import GuildChannel, PrivateChannel,\n\tlogger = Logger.get_logger(Config().app.name)\n\thistory_manager = MessageHistoryHandler()\n\tasync def start_discord(config: Config) -> discord.Client:\n\t    \"\"\"Start the Discord client.\"\"\"\n\t    async def start_discord_client(discord_client: discord.Client, token: str):\n\t        try:\n\t            logger.info(\"Starting Discord client...\")\n\t            # setup discord logger\n\t            discord_logging_handler = Logger.generate_handler(\n", "                f\"{config.app.name}_discord\", config.logger)\n\t            discord.utils.setup_logging(handler=discord_logging_handler)\n\t            await discord_client.start(token)\n\t            logger.info(\"Discord client started the session: %s, with identity: %s\",\n\t                        config.app.name, discord_client.user.id)\n\t        except (discord.LoginFailure, TypeError) as login_failure:\n\t            logger.error(\n\t                \"Error while connecting to Discord: %s\", login_failure)\n\t            sys.exit(1)\n\t        except discord.HTTPException as http_exception:\n", "            logger.critical(\n\t                \"Discord client failed to connect with status: %s - %s\", http_exception.status, http_exception.response.reason)\n\t    discord_client = discord.Client(intents=discord.Intents.default())\n\t    _ = asyncio.ensure_future(\n\t        start_discord_client(discord_client, config.discord.bot_token))\n\t    return discord_client\n\t#  -> Optional[Union[GuildChannel, Thread, PrivateChannel]]:\n\tasync def forward_to_discord(discord_channel: TextChannel, message_text: str,\n\t                             image_file=None, reference: MessageReference = ...) -> List[Message]:\n\t    \"\"\"Send a message to Discord.\"\"\"\n", "    sent_messages = []\n\t    message_parts = split_message(message_text)\n\t    try:\n\t        if image_file:\n\t            discord_file = discord.File(image_file)\n\t            sent_message = await discord_channel.send(message_parts[0],\n\t                                                      file=discord_file,\n\t                                                      reference=reference)\n\t            sent_messages.append(sent_message)\n\t            message_parts.pop(0)\n", "        for part in message_parts:\n\t            sent_message = await discord_channel.send(part, reference=reference)\n\t            sent_messages.append(sent_message)\n\t    except discord.Forbidden:\n\t        logger.error(\"Discord client doesn't have permission to send messages to channel %s\",\n\t                     discord_channel.id, exc_info=Config().app.debug)\n\t    except discord.HTTPException as http_exception:\n\t        logger.error(\"Error while sending message to Discord: %s\",\n\t                     http_exception, exc_info=Config().app.debug)\n\t    return sent_messages\n", "async def fetch_discord_reference(event, forwarder_name: str, discord_channel) -> MessageReference | None:\n\t    \"\"\"Fetch the Discord message reference.\"\"\"\n\t    discord_message_id = await history_manager.get_discord_message_id(\n\t        forwarder_name,\n\t        event.message.reply_to_msg_id)\n\t    if not discord_message_id:\n\t        logger.debug(\"No mapping found for TG message %s\",\n\t                     event.message.reply_to_msg_id)\n\t        return None\n\t    try:\n", "        messages = []\n\t        async for message in discord_channel.history(around=discord.Object(id=discord_message_id),   # pylint: disable=line-too-long\n\t                                                     limit=10):\n\t            messages.append(message)\n\t        discord_message = next(\n\t            (msg for msg in messages if msg.id == discord_message_id), None)\n\t        if not discord_message:\n\t            logger.debug(\n\t                \"Reference Discord message not found for TG message %s\",\n\t                event.message.reply_to_msg_id)\n", "            return None\n\t        return MessageReference.from_message(discord_message)\n\t    except discord.NotFound:\n\t        logger.debug(\"Reference Discord message not found for TG message %s\",\n\t                     event.message.reply_to_msg_id)\n\t        return None\n\tdef get_mention_roles(message_forward_hashtags: List[str],\n\t                      mention_override: dict,\n\t                      discord_built_in_roles: List[str],\n\t                      server_roles: Sequence[discord.Role]) -> List[str]:\n", "    \"\"\"Get the roles to mention.\"\"\"\n\t    mention_roles = set()\n\t    for tag in message_forward_hashtags:\n\t        if tag.lower() in mention_override:\n\t            logger.debug(\"Found mention override for tag %s: %s\",\n\t                         tag, mention_override[tag.lower()])\n\t            for role_name in mention_override[tag.lower()]:\n\t                if is_builtin_mention(role_name, discord_built_in_roles):\n\t                    mention_roles.add(\"@\" + role_name)\n\t                else:\n", "                    role = discord.utils.get(server_roles, name=role_name)\n\t                    if role:\n\t                        mention_roles.add(role.mention)\n\t    return list(mention_roles)\n\tdef is_builtin_mention(role_name: str, discord_built_in_roles: List[str]) -> bool:\n\t    \"\"\"Check if a role name is a Discord built-in mention.\"\"\"\n\t    return role_name.lower() in discord_built_in_roles\n"]}
{"filename": "bridge/discord_handler/health.py", "chunked_list": ["\"\"\"Core helpers for the Discord Client\"\"\"\n\tfrom typing import Tuple\n\timport discord\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\tclass DiscordClientHealth:\n\t    \"\"\"A simple class to keep context for the client handler function\"\"\"\n\t    _instance = None\n\t    def __new__(cls, *args):  # pylint: disable=unused-argument\n", "        if cls._instance is None:\n\t            cls._instance = super().__new__(cls)\n\t        return cls._instance\n\t    @staticmethod\n\t    def report_status(client: discord.Client, bot_max_latency: float) -> Tuple[str, bool]:\n\t        \"\"\"Report the health status of a Discord Client\"\"\"\n\t        status: str = \"Discord Client is healthy and connected\"\n\t        if client.latency > bot_max_latency:\n\t            logger.debug(\"Discord Client's latency: %s - Expected: %s\", client.latency, bot_max_latency)\n\t            status = \"Discord Client's latency is too high\"\n", "            return status, False\n\t        if not client.is_ready():\n\t            status = \"Discord Client's internal cache is not ready\"\n\t            return status, False\n\t        if client.is_closed():\n\t            status = \"Discord Client's websocket connection is closed\"\n\t            return status, False\n\t        if client.user is None:\n\t            status = \"Discord Client is not authenticated\"\n\t            return status, False\n", "        return status, True\n"]}
{"filename": "bridge/history/history.py", "chunked_list": ["\"\"\"Messages history handler\"\"\"\n\timport asyncio\n\timport json\n\tfrom typing import Any, List, Optional\n\timport aiofiles\n\tfrom telethon import TelegramClient\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tconfig = Config()\n\tlogger = Logger.get_logger(config.app.name)\n", "MESSAGES_HISTORY_FILE = \"messages_history.json\"\n\tMISSED_MESSAGES_HISTORY_FILE = \"missed_messages_history.json\"\n\tclass MessageHistoryHandler:\n\t    \"\"\"Messages history handler.\"\"\"\n\t    _instance = None\n\t    def __new__(cls):\n\t        if cls._instance is None:\n\t            cls._instance = super().__new__(cls)\n\t            cls._mapping_data_cache = None\n\t            cls._lock = asyncio.Lock()\n", "        return cls._instance\n\t    async def load_mapping_data(self) -> dict:\n\t        \"\"\"Load the mapping data from the mapping file.\"\"\"\n\t        async with self._lock:\n\t            logger.debug(\"Loading mapping data...\")\n\t            if self._mapping_data_cache is None:\n\t                try:\n\t                    async with aiofiles.open(MESSAGES_HISTORY_FILE, \"r\", encoding=\"utf-8\") as messages_mapping:\n\t                        data = json.loads(await messages_mapping.read())\n\t                        logger.debug(\"Loaded mapping data: %s\", data)\n", "                        self._mapping_data_cache = data\n\t                except FileNotFoundError:\n\t                    self._mapping_data_cache = {}\n\t            return self._mapping_data_cache\n\t    async def save_mapping_data(self, forwarder_name: str, tg_message_id: int, discord_message_id: int) -> None:\n\t        \"\"\"Save the mapping data to the mapping file.\"\"\"\n\t        # async with self._lock:\n\t        mapping_data = await self.load_mapping_data()\n\t        logger.debug(\"Saving mapping data: %s, %s, %s\", forwarder_name,\n\t                     tg_message_id, discord_message_id)\n", "        if forwarder_name not in mapping_data:\n\t            mapping_data[forwarder_name] = {}\n\t        mapping_data[forwarder_name][tg_message_id] = discord_message_id\n\t        try:\n\t            async with aiofiles.open(MESSAGES_HISTORY_FILE, \"w\", encoding=\"utf-8\") as messages_mapping:\n\t                await messages_mapping.write(json.dumps(mapping_data, indent=4))\n\t            self._mapping_data_cache = mapping_data\n\t            logger.debug(\"Mapping data saved successfully.\")\n\t            if config.app.debug:\n\t                logger.debug(\"Current mapping data: %s\", mapping_data)\n", "        except Exception as ex:  # pylint: disable=broad-except\n\t            logger.error(\n\t                \"An error occurred while saving mapping data: %s\", ex, exc_info=config.app.debug)\n\t    async def save_missed_message(self, forwarder_name: str, tg_message_id: int, discord_channel_id: int, exception: Any) -> None:\n\t        \"\"\"Save the missed message to the missed messages file.\"\"\"\n\t        mapping_data = await self.load_mapping_data()\n\t        logger.debug(\"Saving missed message: %s, %s, %s, %s\", forwarder_name,\n\t                     tg_message_id, discord_channel_id, exception)\n\t        if forwarder_name not in mapping_data:\n\t            mapping_data[forwarder_name] = {}\n", "        mapping_data[forwarder_name][tg_message_id] = discord_channel_id, exception\n\t        try:\n\t            async with aiofiles.open(MISSED_MESSAGES_HISTORY_FILE, \"w\", encoding=\"utf-8\") as missed_messages_mapping:\n\t                await missed_messages_mapping.write(json.dumps(mapping_data, indent=4))\n\t            logger.debug(\"Missed message saved successfully.\")\n\t            if config.app.debug:\n\t                logger.debug(\"Current missed messages data: %s\", mapping_data)\n\t        except Exception as ex:  # pylint: disable=broad-except\n\t            logger.error(\n\t                \"An error occurred while saving missed message: %s\", ex, exc_info=config.app.debug)\n", "    async def get_discord_message_id(self, forwarder_name: str, tg_message_id: int) -> Optional[int]:\n\t        \"\"\"Get the Discord message ID associated with the given TG message ID for the specified forwarder.\"\"\"\n\t        mapping_data = await self.load_mapping_data()\n\t        forwarder_data = mapping_data.get(forwarder_name, None)\n\t        if forwarder_data is not None:\n\t            return forwarder_data.get(tg_message_id, None)\n\t        return None\n\t    async def get_last_messages_for_all_forwarders(self) -> List[dict]:\n\t        \"\"\"Get the last messages for each forwarder.\"\"\"\n\t        mapping_data = await self.load_mapping_data()\n", "        last_messages = []\n\t        if mapping_data.items():\n\t            for forwarder_name, forwarder_data in mapping_data.items():\n\t                if not forwarder_data:\n\t                    logger.debug(\"No messages found in the history for forwarder %s\",\n\t                                 forwarder_name)\n\t                    continue\n\t                last_tg_message_id = max(forwarder_data, key=int)\n\t                logger.debug(\"Last TG message ID for forwarder %s: %s\",\n\t                             forwarder_name, last_tg_message_id)\n", "                discord_message_id = forwarder_data[last_tg_message_id]\n\t                last_messages.append({\n\t                    \"forwarder_name\": forwarder_name,\n\t                    \"telegram_id\": int(last_tg_message_id),\n\t                    \"discord_id\": discord_message_id\n\t                })\n\t        return last_messages\n\t    async def fetch_messages_after(self, last_tg_message_id: int, channel_id: int, tgc: TelegramClient) -> List:\n\t        \"\"\"Fetch messages after the last TG message ID.\"\"\"\n\t        logger.debug(\"Fetching messages after %s\", last_tg_message_id)\n", "        messages = []\n\t        async for message in tgc.iter_messages(channel_id, offset_id=last_tg_message_id, reverse=True):\n\t            logger.debug(\"Fetched message: %s\", message.id)\n\t            messages.append(message)\n\t        return messages\n"]}
{"filename": "bridge/history/__init__.py", "chunked_list": ["\"\"\"Initialize the history handler module.\"\"\"\n\ttry:\n\t    from .history import MessageHistoryHandler\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "api/rate_limiter.py", "chunked_list": ["\"\"\"Rate Limiter for the Bridge API\"\"\"\n\tfrom collections import defaultdict\n\tfrom time import time\n\tfrom fastapi import Response\n\tfrom starlette.middleware.base import BaseHTTPMiddleware\n\tfrom starlette.status import HTTP_429_TOO_MANY_REQUESTS\n\t# Rate Limiting Middleware\n\tclass RateLimitMiddleware(BaseHTTPMiddleware):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Rate Limiting Middleware for the Bridge API\"\"\"\n\t    def __init__(self, app, limit=100, interval=60):\n", "        super().__init__(app)\n\t        self.limit = limit\n\t        self.interval = interval\n\t        self.requests = defaultdict(list)\n\t    async def dispatch(self, request, call_next):\n\t        if request.client is not None:\n\t            client_ip = request.client.host\n\t        else:\n\t            client_ip = request.headers.get(\n\t                \"X-Forwarded-For\", \"\").split(\",\")[0].strip()\n", "        request_times = self.requests[client_ip]\n\t        request_times = [t for t in request_times if time() -\n\t                         t < self.interval]\n\t        self.requests[client_ip] = request_times\n\t        if len(request_times) >= self.limit:\n\t            return RateLimitResponse()\n\t        self.requests[client_ip].append(time())\n\t        return await call_next(request)\n\tclass RateLimitResponse(Response):\n\t    \"\"\"Rate Limit Response for the Bridge API\"\"\"\n", "    media_type = \"application/json\"\n\t    def __init__(self):\n\t        super().__init__(\n\t            status_code=HTTP_429_TOO_MANY_REQUESTS,\n\t            content='{\"detail\": \"Too many requests\"}'\n\t        )\n"]}
{"filename": "api/api.py", "chunked_list": ["\"\"\"API for the bridge.\"\"\"\n\tfrom enum import Enum\n\tfrom fastapi import FastAPI\n\tfrom fastapi.middleware import Middleware\n\tfrom fastapi.middleware.cors import CORSMiddleware\n\tfrom api.models import APIConfig, ApplicationConfig, ConfigSummary\n\tfrom api.rate_limiter import RateLimitMiddleware\n\tfrom api.routers import auth, bridge, config\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n", "logger = Logger.init_logger(Config().app.name, Config().logger)\n\tclass APIVersion(str, Enum):\n\t    \"\"\"Process State Enum.\"\"\"\n\t    V1 = \"/api/v1\"\n\t    V2 = \"/api/v2\"\n\tclass BridgeAPI: # pylint: disable=too-few-public-methods\n\t    \"\"\"Bridge API.\"\"\"\n\t    # This is the main function that starts the application\n\t    def __init__(self):\n\t        # The bridge_process variable is used to store the bridge process\n", "        self.bridge_process = None\n\t        config_instance = Config.get_config_instance()\n\t        # The app variable is the main FastAPI instance\n\t        self.app = FastAPI(\n\t            title=config_instance.app.name,\n\t            description=config_instance.app.description,\n\t            version=config_instance.app.version,\n\t            debug=config_instance.app.debug,\n\t            # The RateLimitMiddleware is used to limit the number of requests to 20 per minute\n\t            middleware=[\n", "                Middleware(RateLimitMiddleware, limit=20, interval=60),\n\t                # The CORSMiddleware is used to allow requests from the web interface\n\t                Middleware(CORSMiddleware,\n\t                           allow_origins=config_instance.api.cors_origins,\n\t                           allow_credentials=True,\n\t                           allow_methods=[\"*\"],\n\t                           allow_headers=[\"*\"])\n\t            ]\n\t        )\n\t        # The index function is used to return the index page\n", "        self.app.get(path=\"/\",\n\t                     tags=[\"index\"],\n\t                     name=\"The Telegram to Discord Bridge API\",\n\t                     summary=\"Summary report of the Bridge\",\n\t                     description=\"The Bridge API provides a way to control the telegram-discord-bridge\",\n\t                     response_model=ConfigSummary)(self.index)\n\t        # auth router `api/v1/auth` is used to authenticate the user\n\t        self.app.include_router(router=auth.router,\n\t                                prefix=APIVersion.V1.value)\n\t        # The bridge router is used to control the bridge: `api/v1/bridge`\n", "        # It contains the start, stop, and health endpoints\n\t        self.app.include_router(router=bridge.router,\n\t                                prefix=APIVersion.V1.value)\n\t        # The config router is used to control the bridge configuration: `api/v1/config`\n\t        self.app.include_router(router=config.router,\n\t                                prefix=APIVersion.V1.value)\n\t    def index(self):\n\t        \"\"\"index.\"\"\"\n\t        config_instance = Config.get_config_instance()\n\t        return ConfigSummary(\n", "            application=ApplicationConfig(\n\t                name=config_instance.app.name,\n\t                version=config_instance.app.version,\n\t                description=config_instance.app.description,\n\t                healthcheck_interval=config_instance.app.healthcheck_interval,\n\t                recoverer_delay=config_instance.app.recoverer_delay,\n\t                debug=config_instance.app.debug,\n\t            ),\n\t            api=APIConfig(\n\t                enabled=config_instance.api.enabled,\n", "                cors_origins=config_instance.api.cors_origins,\n\t                telegram_login_enabled=config_instance.api.telegram_login_enabled,\n\t                telegram_auth_file=config_instance.api.telegram_auth_file,\n\t                telegram_auth_request_expiration=config_instance.api.telegram_auth_request_expiration,\n\t            ))\n\tapp = BridgeAPI().app\n"]}
{"filename": "api/__init__.py", "chunked_list": ["\"\"\"the bridge api module.\"\"\"\n"]}
{"filename": "api/routers/auth.py", "chunked_list": ["\"\"\"Bridge Auth Router.\"\"\"\n\timport json\n\tfrom fastapi import APIRouter\n\tfrom api.models import (TelegramAuthResponse, TelegramAuthResponseSchema,\n\t                        TelegramAuthSchema)\n\tfrom bridge.config import Config\n\trouter = APIRouter(\n\t    prefix=\"/auth\",\n\t    tags=[\"auth\"],\n\t)\n", "@router.post(\"/telegram\",\n\t             name=\"Telegram Auth\",\n\t             summary=\"Handles the Telegram authentication and authorization.\",\n\t             description=\"Authentication and authorization for the Telegram API including MFA and 2 steps auth.\",\n\t             response_model=TelegramAuthResponseSchema)\n\tasync def telegram_auth(auth: TelegramAuthSchema):\n\t    \"\"\"Handles the Telegram authentication and authorization.\"\"\"\n\t    config = Config.get_config_instance()\n\t    try:\n\t        # Temporarily write the auth data to the Telegram auth file.\n", "        with open(config.api.telegram_auth_file, 'w', encoding=\"utf-8\") as auth_file:\n\t            json.dump({\n\t                'identity': config.telegram.phone,\n\t                'code': auth.code,\n\t                'password': auth.password}, auth_file)\n\t    except OSError as ex:\n\t        return TelegramAuthResponseSchema(\n\t            auth=TelegramAuthResponse(\n\t                status=\"authentication interrupted\",\n\t                message=\"failed to initialize the authentication with the Telegram API.\",\n", "                error=ex.strerror\n\t            )\n\t        )\n\t    except Exception as ex: # pylint: disable=broad-except\n\t        return TelegramAuthResponseSchema(\n\t            auth=TelegramAuthResponse(\n\t                status=\"authentication interrupted\",\n\t                message=\"failed to initialize the authentication with the Telegram API.\",\n\t                error=str(ex)\n\t            )\n", "        )\n\t    return TelegramAuthResponseSchema(\n\t        auth=TelegramAuthResponse(\n\t            status=\"authentication initiated successfully\",\n\t            message=\"authenticating the Telegram API with the provided credentials.\",\n\t            error=\"\"\n\t        )\n\t    )\n"]}
{"filename": "api/routers/config.py", "chunked_list": ["\"\"\"Config router for the API\"\"\"\n\timport os\n\tfrom datetime import datetime\n\timport magic\n\timport yaml\n\tfrom fastapi import APIRouter, File, HTTPException, UploadFile\n\tfrom pydantic import ValidationError  # pylint: disable=import-error\n\tfrom api.models import (APIConfig, ApplicationConfig, BaseResponse,\n\t                        ConfigSchema, ConfigYAMLSchema, DiscordConfig,\n\t                        ForwarderConfig, LoggerConfig, OpenAIConfig,\n", "                        TelegramConfig)\n\tfrom bridge.config import Config\n\tfrom bridge.enums import RequestTypeEnum\n\tfrom bridge.logger import Logger\n\tfrom forwarder import determine_process_state\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\tclass ConfigRouter:\n\t    \"\"\"Config router class.\"\"\"\n\t    def __init__(self) -> None:\n\t        \"\"\"Initialize the config router.\"\"\"\n", "        self.config = Config.get_config_instance()\n\t        self.router = APIRouter(\n\t            prefix=\"/config\",\n\t            tags=[\"config\"],\n\t            responses={404: {\"description\": \"Not found\"}},\n\t            )\n\t        self.router.get(\"/\", response_model=ConfigSchema)(self.get_config)\n\t        self.router.put(\"/\", response_model=BaseResponse)(self.upload_config)\n\t        self.router.post(\"/\", response_model=BaseResponse)(self.post_config)\n\t    async def get_config(self) -> ConfigSchema:\n", "        \"\"\"Get the current config.\"\"\"\n\t        application_config = ApplicationConfig(\n\t            name=self.config.app.name,\n\t            version=self.config.app.version,\n\t            description=self.config.app.description,\n\t            debug=self.config.app.debug,\n\t            healthcheck_interval=self.config.app.healthcheck_interval,\n\t            recoverer_delay=self.config.app.recoverer_delay,\n\t        )\n\t        api_config = APIConfig(\n", "            enabled=self.config.api.enabled,\n\t            cors_origins=self.config.api.cors_origins,\n\t            telegram_login_enabled=self.config.api.telegram_login_enabled,\n\t            telegram_auth_file=self.config.api.telegram_auth_file,\n\t            telegram_auth_request_expiration=self.config.api.telegram_auth_request_expiration,\n\t        )\n\t        logger_config = LoggerConfig(\n\t            level=self.config.logger.level,\n\t            file_max_bytes=self.config.logger.file_max_bytes,\n\t            file_backup_count=self.config.logger.file_backup_count,\n", "            format=self.config.logger.format,\n\t            date_format=self.config.logger.date_format,\n\t            console=self.config.logger.console,\n\t        )\n\t        telegram_config = TelegramConfig(\n\t            phone=self.config.telegram.phone,\n\t            password=self.config.telegram.password,\n\t            api_id=self.config.telegram.api_id,\n\t            api_hash=self.config.telegram.api_hash,\n\t            log_unhandled_conversations=self.config.telegram.log_unhandled_conversations,\n", "        )\n\t        discord_config = DiscordConfig(\n\t            bot_token=self.config.discord.bot_token,\n\t            built_in_roles=self.config.discord.built_in_roles,\n\t            max_latency=self.config.discord.max_latency,\n\t        )\n\t        openai_config = OpenAIConfig(\n\t            api_key=self.config.openai.api_key,\n\t            enabled=self.config.openai.enabled,\n\t            organization=self.config.openai.organization,\n", "            sentiment_analysis_prompt=self.config.openai.sentiment_analysis_prompt,\n\t        )\n\t        telegram_forwarders = []\n\t        for forwarder in self.config.telegram_forwarders:\n\t            telegram_forwarders.append(\n\t                ForwarderConfig(\n\t                    forwarder_name=forwarder[\"forwarder_name\"],\n\t                    tg_channel_id=forwarder[\"tg_channel_id\"],\n\t                    discord_channel_id=forwarder[\"discord_channel_id\"],\n\t                    mention_everyone=forwarder[\"mention_everyone\"],\n", "                    forward_everything=forwarder[\"forward_everything\"],\n\t                    strip_off_links=forwarder[\"strip_off_links\"],\n\t                    forward_hashtags=forwarder[\"forward_hashtags\"] if \"forward_hashtags\" in forwarder else [],\n\t                    excluded_hashtags=forwarder[\"excluded_hashtags\"] if \"excluded_hashtags\" in forwarder else [],\n\t                    mention_override=forwarder[\"mention_override\"] if \"mention_override\" in forwarder else None,\n\t                )\n\t            )\n\t        return ConfigSchema(\n\t            config=ConfigYAMLSchema(\n\t                application=application_config,\n", "                logger=logger_config,\n\t                api=api_config,\n\t                telegram=telegram_config,\n\t                discord=discord_config,\n\t                openai=openai_config,\n\t                telegram_forwarders=telegram_forwarders,\n\t            )\n\t        )\n\t    async def upload_config(self, file: UploadFile = File(...)) -> BaseResponse: # pylint: disable=too-many-locals\n\t        \"\"\"Upload a new config file.\"\"\"\n", "        process_state, pid = determine_process_state()\n\t        response = BaseResponse(\n\t            resource=\"config\",\n\t            config_version=self.config.app.version,\n\t            request_type=RequestTypeEnum.UPLOAD_CONFIG,\n\t            bridge_status=process_state,\n\t            bridge_pid=pid,\n\t        )\n\t        content = await file.read()\n\t        mime = magic.Magic(mime=True)\n", "        mime_type = mime.from_buffer(content)\n\t        response.operation_status[\"mime_type\"] = mime_type\n\t        response.operation_status[\"file_name\"] = file.filename if file.filename else \"unknown\"\n\t        if not file.filename:\n\t            raise HTTPException(\n\t                status_code=400, detail=\"Invalid file name.\")\n\t        if file.filename.startswith(\".\") or not file.filename.endswith(\".yaml\") and not file.filename.endswith(\".yml\"):\n\t            raise HTTPException(\n\t                status_code=400, detail=\"Invalid file name.\")\n\t        if file.size is None or file.size > 1024 * 1024 * 1:\n", "            raise HTTPException(\n\t                status_code=400, detail=\"Invalid file size. Only file size less than 1MB is accepted.\")\n\t        logger.debug(\"Uploaded file type: %s\", mime_type)\n\t        if mime_type != 'text/plain':\n\t            raise HTTPException(\n\t                status_code=400, detail=\"Invalid file type. Only YAML file is accepted.\")\n\t        try:\n\t            new_config_file_content = yaml.safe_load(content)\n\t        except yaml.YAMLError as exc:\n\t            raise HTTPException(\n", "                status_code=400, detail='Invalid YAML structure in the config file.') from exc\n\t        try:\n\t            _ = ConfigYAMLSchema(**new_config_file_content)\n\t        except ValidationError as exc:\n\t            for error in exc.errors():\n\t                logger.error(error)\n\t            raise HTTPException(\n\t                status_code=400, detail=f'Invalid configuration: {exc.errors}') from exc\n\t        # validate here\n\t        valid, errors = self.config.validate_config(new_config_file_content)\n", "        if not valid:\n\t            raise HTTPException(\n\t                status_code=400, detail=f'{errors}')\n\t        new_config_file_name = f'config-{new_config_file_content[\"application\"][\"version\"]}.yml'\n\t        response.operation_status[\"new_config_file_name\"] = new_config_file_name\n\t        if os.path.exists(new_config_file_name):\n\t            backup_filename = f\"{new_config_file_name}_backup_{datetime.now().strftime('%Y%m%d%H%M%S')}.yml\"\n\t            os.rename(new_config_file_name, backup_filename)\n\t            response.operation_status[\"config_backup_filename\"] = backup_filename\n\t        with open(new_config_file_name, \"w\", encoding=\"utf-8\") as new_config_file:\n", "            yaml.dump(new_config_file_content, new_config_file)\n\t        response.success = True\n\t        return response\n\t    async def post_config(self, config: ConfigSchema) -> BaseResponse:\n\t        \"\"\"Post a new config file.\"\"\"\n\t        process_state, pid = determine_process_state()\n\t        response = BaseResponse(\n\t            resource=\"config\",\n\t            config_version=self.config.app.version,\n\t            request_type=RequestTypeEnum.POST_CONFIG,\n", "            bridge_status=process_state,\n\t            bridge_pid=pid,\n\t        )\n\t        valid, errors = self.config.validate_config(config.config.dict())\n\t        if not valid:\n\t            raise HTTPException(\n\t                status_code=400, detail=f'{errors}')\n\t        config_file_name = f'config-{config.config.application.version}.yml'\n\t        response.operation_status[\"new_config_file_name\"] = config_file_name\n\t        # validate the config with pydantic\n", "        try:\n\t            _ = ConfigYAMLSchema(**config.config.dict())\n\t        except ValidationError as exc:\n\t            for error in exc.errors():\n\t                logger.error(error)\n\t            raise HTTPException(\n\t                status_code=400, detail=f'Invalid configuration: {exc.errors}') from exc\n\t        if os.path.exists(config_file_name):\n\t            backup_filename = f\"{config_file_name}_backup_{datetime.now().strftime('%Y%m%d%H%M%S')}.yml\"\n\t            os.rename(config_file_name, backup_filename)\n", "            response.operation_status[\"config_backup_filename\"] = backup_filename\n\t        with open(config_file_name, \"w\", encoding=\"utf-8\") as new_config_file:\n\t            yaml.dump(config.config.dict(), new_config_file,\n\t                       allow_unicode=False, encoding=\"utf-8\",\n\t                       explicit_start=True, sort_keys=False, indent=2, default_flow_style=False)\n\t        response.success = True\n\t        return response\n\trouter = ConfigRouter().router\n"]}
{"filename": "api/routers/bridge.py", "chunked_list": ["\"\"\"Bridge controller router.\"\"\"\n\timport asyncio\n\tfrom typing import List\n\tfrom fastapi import APIRouter, WebSocket, WebSocketDisconnect\n\tfrom api.models import (BridgeResponse, BridgeResponseSchema, Health,\n\t                        HealthHistory, HealtHistoryManager, HealthSchema)\n\tfrom api.routers.health import HealthcheckSubscriber, WSConnectionManager\n\tfrom bridge.config import Config\n\tfrom bridge.enums import ProcessStateEnum\n\tfrom bridge.events import EventDispatcher\n", "from bridge.logger import Logger\n\tfrom bridge.telegram_handler import check_telegram_session\n\tfrom forwarder import determine_process_state, run_controller\n\t# from typing import List\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\tclass BridgeRouter:  # pylint: disable=too-few-public-methods\n\t    \"\"\"Bridge Router.\"\"\"\n\t    def __init__(self):\n\t        \"\"\"Initialize the Bridge Router.\"\"\"\n\t        self.dispatcher: EventDispatcher\n", "        HealtHistoryManager.register('HealthHistory', HealthHistory)\n\t        self.health_history_manager_instance = HealtHistoryManager()\n\t        self.health_history_manager_instance.start() # pylint: disable=consider-using-with # the server must stay alive as long as we want the shared object to be accessible\n\t        self.health_history: HealthHistory = self.health_history_manager_instance.HealthHistory() # type: ignore # pylint: disable=no-member\n\t        self.ws_connection_manager: WSConnectionManager\n\t        self.bridge_router = APIRouter(\n\t            prefix=\"/bridge\",\n\t            tags=[\"bridge\"],\n\t        )\n\t        self.bridge_router.post(\"/\",\n", "                         name=\"Start the Telegram to Discord Bridge\",\n\t                         summary=\"Initiate the forwarding.\",\n\t                         description=\"Starts the Bridge controller triggering the Telegram authentication process.\",\n\t                         response_model=BridgeResponseSchema)(self.start)\n\t        self.bridge_router.delete(\"/\",\n\t                           name=\"Stop the Telegram to Discord Bridge\",\n\t                           summary=\"Removes the Bridge process.\",\n\t                           description=\"Suspends the Bridge forwarding messages from Telegram to Discord and stops the process.\",\n\t                           response_model=BridgeResponseSchema)(self.stop)\n\t        self.bridge_router.get(\"/health\",\n", "                        name=\"Get the health status of the Bridge.\",\n\t                        summary=\"Determines the Bridge process status, the Telegram, Discord, and OpenAI connections health and returns a summary.\",\n\t                        description=\"Determines the Bridge process status, and the Telegram, Discord, and OpenAI connections health.\",\n\t                        response_model=HealthSchema)(self.health)\n\t        self.bridge_router.websocket(\"/health/ws\",\n\t                                name=\"Get the health status of the Bridge.\")(self.health_websocket_endpoint)\n\t    async def start(self):\n\t        \"\"\"start the bridge.\"\"\"\n\t        config = Config.get_config_instance()\n\t        pid_file = f'{config.app.name}.pid'\n", "        process_state, pid = determine_process_state(pid_file)\n\t        try:\n\t            # if the pid file is empty and the process is None,\n\t            # # then start the bridge\n\t            # if pid == 0 and self.bridge_process is not ProcessStateEnum.RUNNING:\n\t            #     # create a shared list of subscribers\n\t            #     manager = Manager()\n\t            #     # create a list of subscribers to pass to the event dispatcher and the healthcheck subscriber\n\t            #     healthcheck_subscribers: ListProxy[HealthcheckSubscriber] = manager.list()\n\t            #     self.ws_connection_manager = WSConnectionManager(self.health_history)\n", "            #     # create the event dispatcher\n\t            #     self.dispatcher = EventDispatcher(subscribers=healthcheck_subscribers)\n\t            #     self.healthcheck_subscriber = HealthcheckSubscriber('healthcheck_subscriber',\n\t            #                                                    self.dispatcher,\n\t            #                                                    self.health_history,\n\t            #                                                    self.ws_connection_manager,\n\t            #                                                    self.websocket_queue)\n\t            #     self.dispatcher.add_subscriber(\"healthcheck\", self.healthcheck_subscriber)\n\t            #     self.on_update = self.healthcheck_subscriber.create_on_update_decorator()\n\t            #     self.bridge_process = Process(\n", "            #         target=controller, args=(self.dispatcher, True, False, False,))\n\t            #     # start the bridge process\n\t            #     self.bridge_process.start()\n\t            #     # self.bridge_process.join()\n\t            if pid == 0 or process_state not in [ProcessStateEnum.RUNNING, ProcessStateEnum.STARTING]:\n\t                # create a shared list of subscribers\n\t                healthcheck_subscribers: List[HealthcheckSubscriber] = []\n\t                self.ws_connection_manager = WSConnectionManager(self.health_history)\n\t                # create the event dispatcher\n\t                self.dispatcher = EventDispatcher(subscribers=healthcheck_subscribers)\n", "                self.healthcheck_subscriber = HealthcheckSubscriber('healthcheck_subscriber',\n\t                                                                    self.dispatcher,\n\t                                                                    self.health_history,\n\t                                                                    self.ws_connection_manager)\n\t                self.dispatcher.add_subscriber(\"healthcheck\", self.healthcheck_subscriber)\n\t                self.on_update = self.healthcheck_subscriber.create_on_update_decorator()\n\t                event_loop = asyncio.get_running_loop()\n\t                # controller_task = asyncio.ensure_future(run_controller(self.dispatcher, event_loop, True, False, False,))\n\t                locker = asyncio.Lock()\n\t                await locker.acquire()\n", "                event_loop.create_task(run_controller(self.dispatcher, event_loop, True, False, False))\n\t                locker.release()\n\t                return BridgeResponseSchema(bridge=BridgeResponse(\n\t                    name=config.app.name,\n\t                    status=ProcessStateEnum.STARTING,\n\t                    process_id=pid,\n\t                    config_version=config.app.version,\n\t                    telegram_authenticated=check_telegram_session(),\n\t                    error=\"\",\n\t                ))\n", "        except Exception as ex: # pylint: disable=broad-except\n\t            logger.error(\"Error starting the bridge: %s\", ex, exc_info=Config.get_config_instance().app.debug)\n\t            return BridgeResponseSchema(bridge=BridgeResponse(\n\t                name=config.app.name,\n\t                status=ProcessStateEnum.STOPPED,\n\t                process_id=pid,\n\t                config_version=config.app.version,\n\t                telegram_authenticated=check_telegram_session(),\n\t                error=str(ex),\n\t            ))\n", "        # if the pid file is empty and the process is not None and is alive,\n\t        # then return that the bridge is starting\n\t        if pid == 0 and process_state == ProcessStateEnum.RUNNING:\n\t            return BridgeResponseSchema(bridge=BridgeResponse(\n\t                name=config.app.name,\n\t                status=ProcessStateEnum.ORPHANED,\n\t                process_id=pid,\n\t                config_version=config.app.version,\n\t                telegram_authenticated=check_telegram_session(),\n\t                error=\"\",\n", "            ))\n\t        # otherwise return the state of the process\n\t        return BridgeResponseSchema(bridge=BridgeResponse(\n\t            name=config.app.name,\n\t            status=ProcessStateEnum.RUNNING,\n\t            process_id=pid,\n\t            config_version=config.app.version,\n\t            telegram_authenticated=check_telegram_session(),\n\t            error=\"\",\n\t        ))\n", "    async def stop(self):\n\t        \"\"\"stop the bridge.\"\"\"\n\t        config = Config.get_config_instance()\n\t        process_state, pid = determine_process_state(pid_file=f'{config.app.name}.pid')\n\t        if process_state == ProcessStateEnum.RUNNING and pid > 0:\n\t            try:\n\t                await run_controller(dispatcher=self.dispatcher, boot=False, background=False, stop=True)\n\t                self.dispatcher.stop()\n\t            except asyncio.exceptions.CancelledError:\n\t                logger.info(\"Bridge process stopped.\")\n", "            except Exception as ex: # pylint: disable=broad-except\n\t                logger.error(\"Error stopping the bridge: %s\", ex, exc_info=Config.get_config_instance().app.debug)\n\t            return BridgeResponseSchema(bridge=BridgeResponse(\n\t                name=config.app.name,\n\t                status=ProcessStateEnum.STOPPING,\n\t                process_id=pid,\n\t                config_version=config.app.version,\n\t                telegram_authenticated=check_telegram_session(),\n\t                error=\"\",\n\t            ))\n", "        return BridgeResponseSchema(bridge=BridgeResponse(\n\t            name=config.app.name,\n\t            status=ProcessStateEnum.STOPPED,\n\t            process_id=pid,\n\t            config_version=config.app.version,\n\t            telegram_authenticated=check_telegram_session(),\n\t            error=\"\",\n\t        ))\n\t    async def health(self):\n\t        \"\"\"Return the health status of the Bridge.\"\"\"\n", "        config = Config.get_config_instance()\n\t        pid_file = f'{config.app.name}.pid'\n\t        process_state, pid = determine_process_state(pid_file)\n\t        try:\n\t            health_status = self.health_history.get_health_data()\n\t        except ValueError:\n\t            logger.error(\"Unable to retrieve the last health status.\")\n\t            return HealthSchema(\n\t                health=Health(\n\t                process_id=pid,\n", "            )\n\t        )\n\t        return HealthSchema(\n\t            health=Health(\n\t                timestamp=health_status.timestamp,\n\t                process_state=process_state,\n\t                process_id=pid,\n\t                status=health_status.status,\n\t            )\n\t        )\n", "    async def health_data_sender(self, websocket: WebSocket):\n\t        \"\"\"Send health data to the WS client.\"\"\"\n\t        logger.debug(\"Starting health data sender.\")\n\t        @self.on_update(\"healthcheck\")\n\t        async def send_health_data():\n\t            \"\"\"Send health data to the WS client.\"\"\"\n\t            logger.debug(\"Sending health data to the WS client.\")\n\t            try:\n\t                await self.ws_connection_manager.send_health_data(websocket)\n\t            # pylint: disable=broad-except\n", "            except Exception as exc:\n\t                logger.exception(\"Error while sending health data to the WS client: %s\", exc, exc_info=Config.get_config_instance().app.debug)\n\t                raise exc\n\t    async def health_websocket_endpoint(self, websocket: WebSocket):\n\t        \"\"\"Websocket endpoint.\"\"\"\n\t        logger.info(\"Connected to the websocket.\")\n\t        task = None\n\t        try:\n\t            await self.ws_connection_manager.connect(websocket)\n\t            task = asyncio.create_task(self.health_data_sender(websocket))\n", "            while True:\n\t                logger.debug(\"Waiting for message from the client.\")\n\t                _ = await websocket.receive_text()\n\t        except WebSocketDisconnect:\n\t            logger.info(\"Disconnecting from the websocket.\")\n\t            if task:\n\t                task.cancel()\n\t            await self.ws_connection_manager.disconnect(websocket)\n\t        except Exception as ex: # pylint: disable=broad-except\n\t            logger.error(\"Error in health_websocket_endpoint: %s\", ex, exc_info=Config.get_config_instance().app.debug)\n", "            if task:\n\t                task.cancel()\n\t            await self.ws_connection_manager.disconnect(websocket)\n\trouter = BridgeRouter().bridge_router\n"]}
{"filename": "api/routers/__init__.py", "chunked_list": ["\"\"\"Bridge API Router.\"\"\"\n"]}
{"filename": "api/routers/health.py", "chunked_list": ["\"\"\"Bridge Health API Router.\"\"\"\n\timport asyncio\n\timport functools\n\tfrom datetime import datetime\n\tfrom typing import Any, List\n\tfrom fastapi import WebSocket\n\tfrom api.models import Health, HealthHistory, HealthSchema\n\tfrom bridge.config import Config\n\tfrom bridge.enums import ProcessStateEnum\n\tfrom bridge.events import EventSubscriber\n", "from bridge.logger import Logger\n\tfrom forwarder import determine_process_state\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\t# Initialize a global Config object\n\tconfig = Config()\n\tclass WSConnectionManager:\n\t    \"\"\"WS Connection Manager.\"\"\"\n\t    def __init__(self, health_history: HealthHistory):\n\t        self.active_connections: List[WebSocket] = []\n\t        self.health_history: HealthHistory = health_history\n", "        # self.websocket_subscribers: multiprocessing.Queue = multiprocessing.Queue()\n\t    def __call__(self, *args: Any, **kwds: Any) -> Any:\n\t        pass\n\t    async def connect(self, websocket: WebSocket):\n\t        \"\"\"Connect, handles the WS connections.\"\"\"\n\t        logger.debug(\"Connecting to %s\", websocket)\n\t        if isinstance(websocket, WebSocket):\n\t            await websocket.accept()\n\t            self.active_connections.append(websocket)\n\t    async def disconnect(self, websocket: WebSocket):\n", "        \"\"\"Disconnect, handles the WS connections.\"\"\"\n\t        self.active_connections.remove(websocket)\n\t    async def broadcast_health_data(self, data: Config | None = None):\n\t        \"\"\"Broadcast health data to all WS clients.\"\"\"\n\t        logger.debug(\"Broadcasting health data to %s\", self.active_connections)\n\t        for websocket in self.active_connections:\n\t            await self.send_health_data(websocket, data)\n\t    async def send_health_data(self, websocket: WebSocket, data: Config | None = None):\n\t        \"\"\"Send health data to the WS client.\"\"\"\n\t        logger.debug(\"Sending health data to %s\", websocket)\n", "        current_config = data if data else config.get_config_instance()\n\t        pid_file = f'{current_config.app.name}.pid'\n\t        process_state, pid = determine_process_state(pid_file)\n\t        health_status = None\n\t        try:\n\t            health_status = self.health_history.get_health_data()\n\t        except ValueError:\n\t            logger.error(\"Unable to retrieve the last health status.\")\n\t            health_data = HealthSchema(\n\t                health=Health(\n", "                process_id=pid,\n\t            )\n\t        )\n\t        health_data = HealthSchema(\n\t            health=Health(\n\t                timestamp=health_status.timestamp if health_status else 0,\n\t                process_state=process_state,\n\t                process_id=pid,\n\t                status=health_status.status if health_status else {},\n\t            )\n", "        )\n\t        if websocket in self.active_connections:\n\t            await websocket.send_json(health_data.dict())\n\tdef websocket_broadcast_when_healthcheck(func):\n\t    \"\"\"Decorator to broadcast health data when a healthcheck event is received.\"\"\"\n\t    @functools.wraps(func)\n\t    def wrapper(self, *args, **kwargs):\n\t        result = func(self, *args, **kwargs)\n\t        asyncio.create_task(self.ws_manager.broadcast_health_data())\n\t        return result\n", "    return wrapper\n\tclass HealthcheckSubscriber(EventSubscriber): # pylint: disable=too-few-public-methods\n\t    \"\"\"Healthcheck subscriber class.\"\"\"\n\t    def __init__(self, name, dispatcher, health_history: HealthHistory, ws_manager: WSConnectionManager):\n\t        super().__init__(name, dispatcher=dispatcher)\n\t        self.health_history: HealthHistory = health_history\n\t        self.ws_manager = ws_manager\n\t    @websocket_broadcast_when_healthcheck\n\t    def update(self, event:str, data: Any | None = None):\n\t        \"\"\"\n", "        Update the event subscriber with a new event.\n\t        Args:\n\t            event (str): The event name.\n\t            data (Any): The config object.\n\t        Returns:\n\t            None\n\t        \"\"\"\n\t        logger.debug(\"The healthcheck subscriber %s received event: %s\", self.name, event)\n\t        if data and isinstance(data, Config):\n\t            logger.debug(\"The healthcheck subscriber %s received config: %s\", self.name, data)\n", "            health_data = Health(\n\t                timestamp=datetime.timestamp(datetime.now()),\n\t                process_state=ProcessStateEnum.RUNNING,\n\t                process_id=0,\n\t                status={\n\t                    \"telegram\": data.telegram.is_healthy,\n\t                    \"discord\": data.discord.is_healthy,\n\t                    \"openai\": data.openai.is_healthy,\n\t                    \"internet\": data.app.internet_connected,\n\t                },)\n", "            self.health_history.add_health_data(health_data)\n\t        else:\n\t            logger.warning(\"The healthcheck subscriber %s received data: %s\", self.name, data)\n"]}
{"filename": "api/models/health_schema.py", "chunked_list": ["\"\"\"Health Schema.\"\"\"\"\"\n\tfrom typing import Dict\n\tfrom multiprocessing.managers import BaseManager\n\tfrom pydantic import BaseModel\n\tfrom bridge.enums import ProcessStateEnum\n\tfrom bridge.config import Config\n\tfrom bridge.logger import Logger\n\tlogger = Logger.get_logger(Config.get_config_instance().app.name)\n\tclass Health(BaseModel):\n\t    \"\"\"Health.\"\"\"\n", "    timestamp: float = 0\n\t    process_state: ProcessStateEnum = ProcessStateEnum.UNKNOWN\n\t    process_id: int = 0\n\t    status: dict[str, bool] = {}\n\tclass HealthSchema(BaseModel):\n\t    \"\"\"Health Schema.\"\"\"\n\t    health: Health\n\tclass HealthHistory:\n\t    \"\"\"Health History.\"\"\"\n\t    # make this class a singleton\n", "    def __new__(cls):\n\t        \"\"\"Create a new Health History object.\"\"\"\n\t        if not hasattr(cls, 'instance'):\n\t            cls.instance = super(HealthHistory, cls).__new__(cls)\n\t        return cls.instance\n\t    def __init__(self):\n\t        \"\"\"Initialize the Health History.\"\"\"\n\t        if not hasattr(self, 'health_history'):\n\t            self.health_history:Dict[float, Health]  = {}\n\t    def add_health_data(self, health):\n", "        \"\"\"Add a health object to the health history.\"\"\"\n\t        logger.info('Adding health to history')\n\t        if not isinstance(health, Health):\n\t            logger.error('health must be a Health object')\n\t            raise TypeError('health must be a Health object')\n\t        if not health.timestamp > 0:\n\t            logger.error('health timestamp must be > 0')\n\t            raise ValueError('health timestamp must be > 0')\n\t        self.health_history[health.timestamp] = health\n\t    def get_health_data(self):\n", "        \"\"\"Return the last health object in the health history.\"\"\"\n\t        if not self.health_history:\n\t            raise ValueError('No health objects in history')\n\t        # Get the last timestamp from the history\n\t        last_timestamp = max(self.health_history.keys()) # type: ignore\n\t        # Get the last health object from the history\n\t        last_health = self.health_history[last_timestamp]\n\t        logger.info('Returning last health: %s', last_health)\n\t        return last_health\n\t    def get_health_history(self):\n", "        \"\"\"Return the health history.\"\"\"\n\t        return self.health_history\n\tclass HealtHistoryManager(BaseManager):\n\t    \"\"\"Health History Manager.\"\"\"\n"]}
{"filename": "api/models/__init__.py", "chunked_list": ["\"\"\"the bridge config schema.\"\"\"\n\ttry:\n\t    from .auth_schema import (TelegramAuthResponse, TelegramAuthResponseSchema,\n\t                              TelegramAuthSchema)\n\t    from .base_response_schema import BaseResponse\n\t    from .bridge_schema import BridgeResponse, BridgeResponseSchema\n\t    from .config_schema import (APIConfig, ApplicationConfig, ConfigSchema,\n\t                                ConfigSummary, ConfigYAMLSchema, DiscordConfig,\n\t                                ForwarderConfig, LoggerConfig, OpenAIConfig,\n\t                                TelegramConfig)\n", "    from .health_schema import (Health, HealthHistory, HealtHistoryManager,\n\t                                HealthSchema)\n\texcept ImportError as ex:\n\t    raise ex\n"]}
{"filename": "api/models/config_schema.py", "chunked_list": ["\"\"\"config schema validation model.\"\"\"\n\tfrom typing import List, Optional\n\tfrom pydantic import BaseModel  # pylint: disable=import-error\n\tclass ForwarderConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Forwarder model.\"\"\"\n\t    forwarder_name: str\n\t    tg_channel_id: int\n\t    discord_channel_id: int\n\t    strip_off_links: bool\n\t    mention_everyone: bool\n", "    forward_everything: bool\n\t    forward_hashtags: Optional[List[dict]] = None\n\t    excluded_hashtags: Optional[List[dict]] = None\n\t    mention_override: Optional[List[dict]] = None\n\tclass OpenAIConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"OpenAI config.\"\"\"\n\t    enabled: bool\n\t    api_key: str\n\t    organization: str\n\t    sentiment_analysis_prompt: List[str]\n", "class DiscordConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Discord config.\"\"\"\n\t    bot_token: str\n\t    built_in_roles: List[str]\n\t    max_latency: float\n\tclass TelegramConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Telegram config.\"\"\"\n\t    phone: str\n\t    password: str\n\t    api_id: int\n", "    api_hash: str\n\t    log_unhandled_conversations: bool\n\tclass LoggerConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Logger config.\"\"\"\n\t    level: str\n\t    file_max_bytes: int\n\t    file_backup_count: int\n\t    format: str\n\t    date_format: str\n\t    console: bool\n", "class ApplicationConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Application config.\"\"\"\n\t    name: str\n\t    version: str\n\t    description: str\n\t    debug: bool\n\t    healthcheck_interval: int\n\t    recoverer_delay: float\n\tclass APIConfig(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"API config.\"\"\"\n", "    enabled: bool\n\t    cors_origins: List[str]\n\t    telegram_login_enabled: bool\n\t    telegram_auth_file: str\n\t    telegram_auth_request_expiration: int\n\tclass ConfigSummary(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Config summary.\"\"\"\n\t    application: ApplicationConfig\n\t    api: APIConfig\n\tclass ConfigYAMLSchema(BaseModel):  # pylint: disable=too-few-public-methods\n", "    \"\"\"Config YAML schema.\"\"\"\n\t    application: ApplicationConfig\n\t    logger: LoggerConfig\n\t    api: APIConfig\n\t    telegram: TelegramConfig\n\t    discord: DiscordConfig\n\t    openai: OpenAIConfig\n\t    telegram_forwarders: List[ForwarderConfig]\n\tclass ConfigSchema(BaseModel):  # pylint: disable=too-few-public-methods\n\t    \"\"\"Config model.\"\"\"\n", "    config: ConfigYAMLSchema\n"]}
{"filename": "api/models/bridge_schema.py", "chunked_list": ["\"\"\"The Bridge Schema.\"\"\"\n\tfrom pydantic import BaseModel\n\tfrom bridge.enums import ProcessStateEnum\n\tclass BridgeResponse(BaseModel):\n\t    \"\"\"Bridge Response.\"\"\"\n\t    name: str = \"Telegram to Discord Bridge\"\n\t    status: ProcessStateEnum = ProcessStateEnum.STOPPED\n\t    process_id: int | None = 0\n\t    config_version: str = \"0.0.0\"\n\t    telegram_authenticated: bool = False\n", "    error: str = \"\"\n\tclass BridgeResponseSchema(BaseModel):\n\t    \"\"\"Bridge Response Schema.\"\"\"\n\t    bridge: BridgeResponse\n"]}
{"filename": "api/models/auth_schema.py", "chunked_list": ["\"\"\"Auth Schema.\"\"\"\n\tfrom pydantic import BaseModel\n\tclass TelegramAuthSchema(BaseModel):\n\t    \"\"\"Telegram Auth Schema.\"\"\"\n\t    identity: str = \"\"\n\t    password: str = \"\"\n\t    code: str | int = 0\n\tclass TelegramAuthResponse(BaseModel):\n\t    \"\"\"Telegram Auth Response Schema.\"\"\"\n\t    status: str\n", "    message: str\n\t    error: str = \"\"\n\t    session_revoked: bool = False\n\t    mfa_required: bool = False\n\tclass TelegramAuthResponseSchema(BaseModel):\n\t    \"\"\"Telegram Auth Response Schema.\"\"\"\n\t    auth: TelegramAuthResponse\n"]}
{"filename": "api/models/base_response_schema.py", "chunked_list": ["\"\"\"Base API response schema.\"\"\"\n\tfrom datetime import datetime\n\tfrom typing import Dict, TypeAlias\n\tfrom pydantic import BaseModel  # pylint: disable=import-error\n\tfrom ulid import monotonic as ulid\n\tfrom bridge.enums import ProcessStateEnum, RequestTypeEnum\n\tOperationStatus: TypeAlias = Dict[str, str]\n\t# OperationErrors\n\tErrorSummary: TypeAlias = str\n\tErrorDetails: TypeAlias = str\n", "OperationErrors: TypeAlias = Dict[ErrorSummary, ErrorDetails]\n\tclass BaseResponse(BaseModel):\n\t    \"\"\"Base Response.\"\"\"\n\t    resource: str\n\t    request_id: str = ulid.from_timestamp(datetime.timestamp(datetime.now())).str\n\t    request_type: RequestTypeEnum\n\t    bridge_status: ProcessStateEnum = ProcessStateEnum.STOPPED\n\t    bridge_pid: int = 0\n\t    config_version: str = \"0.0.0\"\n\t    success: bool = False\n", "    operation_status: OperationStatus = {}\n\t    operation_errors: OperationErrors = {}\n"]}
