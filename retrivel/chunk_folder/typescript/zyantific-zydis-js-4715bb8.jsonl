{"filename": "examples/svelte-browser/vite.config.ts", "chunked_list": ["import { sveltekit } from \"@sveltejs/kit/vite\";\n\timport { defineConfig } from \"vite\";\n\timport topLevelAwait from \"vite-plugin-top-level-await\";\n\texport default defineConfig({\n\t\tplugins: [\n\t\t\ttopLevelAwait({\n\t\t\t\t// The export name of top-level await promise for each chunk module\n\t\t\t\tpromiseExportName: \"__tla\",\n\t\t\t\t// The function to generate import names of top-level await promise in each chunk module\n\t\t\t\tpromiseImportName: (i) => `__tla_${i}`,\n", "\t\t}),\n\t\t\tsveltekit(),\n\t\t],\n\t\tbuild: {\n\t\t\ttarget: \"esnext\",\n\t\t},\n\t\tesbuild: {\n\t\t\tsupported: {\n\t\t\t\t\"top-level-await\": true, //browsers can handle top-level-await features\n\t\t\t},\n", "\t},\n\t});\n"]}
{"filename": "examples/svelte-browser/src/app.d.ts", "chunked_list": ["// See https://kit.svelte.dev/docs/types#app\n\t// for information about these interfaces\n\tdeclare global {\n\t\tnamespace App {\n\t\t\t// interface Error {}\n\t\t\t// interface Locals {}\n\t\t\t// interface PageData {}\n\t\t\t// interface Platform {}\n\t\t}\n\t}\n", "export {};\n"]}
{"filename": "examples/svelte-browser/src/routes/+page.ts", "chunked_list": ["// since there's no dynamic data here, we can prerender\n\t// it so that it gets served as a static asset in production\n\texport const prerender = true;\n"]}
{"filename": "examples/node-app/app.ts", "chunked_list": ["import * as zy from \"zydis.js\";\n\tfunction printAndGetInsn(data: number[] | Uint8Array) {\n\t\tconst dec = new zy.Decoder(zy.MachineMode.LONG_64, zy.StackWidth.WIDTH_64).decode(Buffer.from(data));\n\t\tconsole.log(\"Disassembly:\", {\n\t\t\tdisasm: Buffer.from(data).toString(\"hex\") + \"  \" + zy.Formatter.intel().insn(dec, 0x0n),\n\t\t\tmnemonic: zy.Mnemonic[dec.mnemonic],\n\t\t\tvisibleOperandCount: dec.visibleOperandCount,\n\t\t\tflags: dec.cpuFlags,\n\t\t});\n\t\treturn dec;\n", "}\n\tconsole.log(`Zydis ${zy.getVersionString()} ready.`);\n\tconsole.log(\n\t\t\"Largest register enclosing AX in Long mode:\",\n\t\tzy.Register[zy.register.getLargestEnclosing(zy.Register.AX, zy.MachineMode.LONG_64)]\n\t);\n\tconsole.log(\n\t\t\"Largest register enclosing AX in Compat mode:\",\n\t\tzy.Register[zy.register.getLargestEnclosing(zy.Register.AX, zy.MachineMode.LONG_COMPAT_32)]\n\t);\n", "const dec = printAndGetInsn([0xb8, 0x15, 0x81, 0x59, 0x0b]);\n\tconsole.log(\"First operand:\", dec.operand(1).get());\n\tconst enc = new zy.EncoderRequest(dec);\n\tenc.operand(1).imm = 0x7eadbeefn;\n\tconsole.log(\"Re-encoded:\");\n\tprintAndGetInsn(enc.encode());\n\tconsole.log(\"Encoding from scratch:\");\n\tprintAndGetInsn(zy.encode(zy.MachineMode.LONG_64, zy.Mnemonic.MOVAPD, \"XMM0\", \"XMM1\"));\n"]}
{"filename": "src/register.ts", "chunked_list": ["import { MachineMode, Register, RegisterClass } from \"./enums.js\";\n\timport zydis from \"./native.js\";\n\texport function encode(cl: RegisterClass, id: number): Register {\n\t\tconst res = zydis.asm.zyjsRegisterEncode(cl, id);\n\t\tif (res === Register.NONE) throw Error(\"Failed encoding register.\");\n\t\treturn res;\n\t}\n\texport function getId(reg: Register): number {\n\t\treturn zydis.asm.zyjsRegisterGetId(reg);\n\t}\n", "export function getClass(reg: Register): RegisterClass {\n\t\treturn zydis.asm.zyjsRegisterGetClass(reg);\n\t}\n\texport function getWidth(reg: Register, mode: MachineMode): number {\n\t\treturn zydis.asm.zyjsRegisterGetWidth(reg, mode);\n\t}\n\texport function getWidthFromClass(cl: RegisterClass, mode: MachineMode): number {\n\t\treturn zydis.asm.zyjsRegisterClassGetWidth(cl, mode);\n\t}\n\texport function getLargestEnclosing(reg: Register, mode: MachineMode): Register {\n", "\treturn zydis.asm.zyjsRegisterGetLargestEnclosing(reg, mode);\n\t}\n\texport function from(reg: string) {\n\t\treg = reg.toUpperCase();\n\t\tif (reg in Register) {\n\t\t\treturn Register[reg as keyof typeof Register];\n\t\t}\n\t\tthrow Error(\"Invalid register name\");\n\t}\n"]}
{"filename": "src/zydis.d.ts", "chunked_list": ["type Assembly = {\n\t\tmemory: WebAssembly.Memory;\n\t} & {\n\t\t[k: string]: (...args: any[]) => any;\n\t};\n\tinterface M {\n\t\tready: Promise<ThisType>;\n\t\t_main(): number;\n\t\t_malloc(size: number): number;\n\t\t_free(ptr: number): void;\n", "\tUTF8ToString(ptr: number, maxBytes?: number): string;\n\t\tstringToUTF8(str: string, ptr: number, maxBytes: number): string;\n\t\tHEAP8: Int8Array;\n\t\tHEAP16: Int16Array;\n\t\tHEAP32: Int32Array;\n\t\tHEAP64: BigInt64Array;\n\t\tHEAPU8: Uint8Array;\n\t\tHEAPU16: Uint16Array;\n\t\tHEAPU32: Uint32Array;\n\t\tHEAPU64: BigUint64Array;\n", "\tasm: Assembly;\n\t}\n\texport default function (): Promise<M>;\n"]}
{"filename": "src/decoder.ts", "chunked_list": ["import { OperandImm, OperandMem, OperandPtr, OperandReg } from \"./common.js\";\n\timport {\n\t\tBranchType,\n\t\tBroadcastMode,\n\t\tConversionMode,\n\t\tDecoderMode,\n\t\tElementType,\n\t\tExceptionClass,\n\t\tISAExt,\n\t\tISASet,\n", "\tInsnCategory,\n\t\tInstructionEncoding,\n\t\tMachineMode,\n\t\tMaskMode,\n\t\tMemoryOperandType,\n\t\tMnemonic,\n\t\tOpcodeMap,\n\t\tOperandAction,\n\t\tOperandEncoding,\n\t\tOperandType,\n", "\tOperandVisibility,\n\t\tRegister,\n\t\tRoundingMode,\n\t\tStackWidth,\n\t\tSwizzleMode,\n\t} from \"./enums.js\";\n\timport zydis from \"./native.js\";\n\timport { Resource, ZyjsField, withStack } from \"./util.js\";\n\tconst OpField = ZyjsField(\"DecOp\");\n\texport class DecodedOperand {\n", "\tresource: Resource;\n\t\tconstructor(rsrc: Resource) {\n\t\t\tthis.resource = rsrc;\n\t\t}\n\t\t@OpField\n\t\tid!: number;\n\t\t@OpField\n\t\tvisiblity!: OperandVisibility;\n\t\t@OpField\n\t\tactions!: OperandAction;\n", "\t@OpField\n\t\tencoding!: OperandEncoding;\n\t\t@OpField\n\t\tsize!: number;\n\t\t@OpField\n\t\telementType!: ElementType;\n\t\t@OpField\n\t\telementSize!: number;\n\t\t@OpField\n\t\telementCount!: number;\n", "\t@OpField\n\t\tattributes!: number;\n\t\t@OpField\n\t\ttype!: OperandType;\n\t\t@OpField\n\t\tprotected immSigned!: number;\n\t\t@OpField\n\t\tprotected immRelative!: number;\n\t\t@OpField\n\t\tprotected imms!: bigint;\n", "\t@OpField\n\t\tprotected immu!: bigint;\n\t\t@OpField\n\t\tprotected ptrSeg!: number;\n\t\t@OpField\n\t\tprotected ptrOff!: number;\n\t\t@OpField\n\t\tprotected regv!: Register;\n\t\t@OpField\n\t\tprotected memType!: MemoryOperandType;\n", "\t@OpField\n\t\tprotected memSeg!: Register;\n\t\t@OpField\n\t\tprotected memBase!: Register;\n\t\t@OpField\n\t\tprotected memIndex!: Register;\n\t\t@OpField\n\t\tprotected memScale!: Register;\n\t\t@OpField\n\t\tprotected memHasDisp!: number;\n", "\t@OpField\n\t\tprotected memDisp!: bigint;\n\t\tget imm(): OperandImm {\n\t\t\tif (this.type !== OperandType.IMMEDIATE) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n\t\t\tif (this.immSigned) {\n\t\t\t\treturn {\n\t\t\t\t\ts: this.imms,\n\t\t\t\t\trel: !!this.immRelative,\n", "\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tu: this.immu,\n\t\t\t\t\trel: !!this.immRelative,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tget reg(): OperandReg {\n\t\t\tif (this.type !== OperandType.REGISTER) {\n", "\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tname: this.regv,\n\t\t\t\tis4: this.encoding === OperandEncoding.IS4,\n\t\t\t};\n\t\t}\n\t\tget ptr(): OperandPtr {\n\t\t\tif (this.type !== OperandType.POINTER) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n", "\t\t}\n\t\t\treturn {\n\t\t\t\tsegv: this.ptrSeg,\n\t\t\t\toff: this.ptrOff,\n\t\t\t};\n\t\t}\n\t\tget mem(): OperandMem {\n\t\t\tif (this.type !== OperandType.MEMORY) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n", "\t\tconst res: OperandMem = {\n\t\t\t\ttype: this.memType,\n\t\t\t\tseg: this.memSeg,\n\t\t\t\tindex: this.memIndex,\n\t\t\t\tbase: this.memBase,\n\t\t\t\tscale: this.memScale,\n\t\t\t\tdisp: this.memHasDisp ? this.memDisp : undefined,\n\t\t\t};\n\t\t\tif (res.seg === Register.NONE) {\n\t\t\t\tdelete res.seg;\n", "\t\t}\n\t\t\tif (res.base === Register.NONE) {\n\t\t\t\tdelete res.base;\n\t\t\t}\n\t\t\tif (res.scale === 0 || res.index === Register.NONE) {\n\t\t\t\tdelete res.index;\n\t\t\t\tdelete res.scale;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n", "\tget() {\n\t\t\tswitch (this.type) {\n\t\t\t\tcase OperandType.IMMEDIATE:\n\t\t\t\t\treturn this.imm;\n\t\t\t\tcase OperandType.REGISTER:\n\t\t\t\t\treturn this.reg;\n\t\t\t\tcase OperandType.POINTER:\n\t\t\t\t\treturn this.ptr;\n\t\t\t\tcase OperandType.MEMORY:\n\t\t\t\t\treturn this.mem;\n", "\t\t\tdefault:\n\t\t\t\t\tthrow Error();\n\t\t\t}\n\t\t}\n\t}\n\tconst FlagField = ZyjsField(\"FlagSet\");\n\tinterface AccessedFlags {\n\t\treadonly tested: number;\n\t\treadonly modified: number;\n\t\treadonly set: number;\n", "\treadonly unset: number;\n\t\treadonly undef: number;\n\t}\n\tconst flagsNoop: AccessedFlags = {\n\t\ttested: 0,\n\t\tmodified: 0,\n\t\tset: 0,\n\t\tunset: 0,\n\t\tundef: 0,\n\t};\n", "class AccessedFlagsByPtr implements AccessedFlags {\n\t\tresource: { ref(): number };\n\t\tconstructor(ptr: number) {\n\t\t\tthis.resource = {\n\t\t\t\tref() {\n\t\t\t\t\treturn ptr;\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\t@FlagField\n", "\treadonly tested!: number;\n\t\t@FlagField\n\t\treadonly modified!: number;\n\t\t@FlagField\n\t\treadonly set!: number;\n\t\t@FlagField\n\t\treadonly unset!: number;\n\t\t@FlagField\n\t\treadonly undef!: number;\n\t}\n", "const InsnField = ZyjsField(\"DecInsn\");\n\texport class DecodedInsn {\n\t\tresource: Resource;\n\t\tconstructor(rsrc: Resource) {\n\t\t\tthis.resource = rsrc;\n\t\t}\n\t\t// Common information.\n\t\t//\n\t\t@InsnField\n\t\tlength!: number;\n", "\t@InsnField\n\t\tmnemonic!: Mnemonic;\n\t\t@InsnField\n\t\tencoding!: InstructionEncoding;\n\t\t@InsnField\n\t\topcodeMap!: OpcodeMap;\n\t\t@InsnField\n\t\topcode!: number;\n\t\t@InsnField\n\t\tstackWidth!: number;\n", "\t@InsnField\n\t\toperandWidth!: number;\n\t\t@InsnField\n\t\taddressWidth!: number;\n\t\t@InsnField\n\t\toperandCount!: number;\n\t\t@InsnField\n\t\tvisibleOperandCount!: number;\n\t\t@InsnField\n\t\tattributes!: bigint;\n", "\t// AVX.\n\t\t//\n\t\t@InsnField\n\t\tvectorLength!: number;\n\t\t@InsnField\n\t\tmaskMode!: MaskMode;\n\t\t@InsnField\n\t\tmaskReg!: Register;\n\t\t@InsnField\n\t\tisBroadcastStatic!: 1 | 0;\n", "\t@InsnField\n\t\tbroadcastMode!: BroadcastMode;\n\t\t@InsnField\n\t\troundingMode!: RoundingMode;\n\t\t@InsnField\n\t\tswizzleMode!: SwizzleMode;\n\t\t@InsnField\n\t\tconversionMode!: ConversionMode;\n\t\t@InsnField\n\t\thasSAE!: 1 | 0;\n", "\t@InsnField\n\t\thasEvictionHint!: 1 | 0;\n\t\t// Meta.\n\t\t//\n\t\t@InsnField\n\t\tcategory!: InsnCategory;\n\t\t@InsnField\n\t\tisaSet!: ISASet;\n\t\t@InsnField\n\t\tisaExt!: ISAExt;\n", "\t@InsnField\n\t\tbranchType!: BranchType;\n\t\t@InsnField\n\t\texceptionClass!: ExceptionClass;\n\t\t// Flags.\n\t\t//\n\t\t@InsnField\n\t\tprivate cpuFlagsPtr!: number;\n\t\t@InsnField\n\t\tprivate fpuFlagsPtr!: number;\n", "\tget cpuFlags(): AccessedFlags {\n\t\t\tconst ptr = this.cpuFlagsPtr;\n\t\t\treturn ptr ? new AccessedFlagsByPtr(ptr) : flagsNoop;\n\t\t}\n\t\tget fpuFlags(): AccessedFlags {\n\t\t\tconst ptr = this.fpuFlagsPtr;\n\t\t\treturn ptr ? new AccessedFlagsByPtr(ptr) : flagsNoop;\n\t\t}\n\t\toperand(n: number): DecodedOperand {\n\t\t\tconst ptr = zydis.asm.zyjsDecInsnRefOperand(this.resource.ref(), n);\n", "\t\tif (!ptr) {\n\t\t\t\tthrow RangeError(\"Operand out of boundaries.\");\n\t\t\t}\n\t\t\treturn new DecodedOperand(this.resource.subresource(ptr));\n\t\t}\n\t}\n\texport class Decoder {\n\t\tresource: Resource;\n\t\tconstructor(mode: MachineMode, width: StackWidth) {\n\t\t\tthis.resource = new Resource(zydis.asm.zyjsNewDecoder(mode, width));\n", "\t}\n\t\tset(mode: DecoderMode, value: boolean) {\n\t\t\tzydis.asm.zyjsDecoderSetMode(this.resource.ref(), mode, value ? 1 : 0);\n\t\t\treturn this;\n\t\t}\n\t\tdecode(buffer: Uint8Array) {\n\t\t\tconst ptr = withStack((a) => {\n\t\t\t\treturn zydis.asm.zyjsDecoderDecode(this.resource.ref(), a.buf(buffer), buffer.length);\n\t\t\t});\n\t\t\treturn new DecodedInsn(new Resource(ptr));\n", "\t}\n\t}\n"]}
{"filename": "src/native.ts", "chunked_list": ["import loadZydis from \"./zydis.js\";\n\texport default await loadZydis();\n"]}
{"filename": "src/misc.ts", "chunked_list": ["import { Feature } from \"./enums.js\";\n\timport zydis from \"./native.js\";\n\texport function getVersion() {\n\t\treturn {\n\t\t\tmajor: zydis.asm.zyjsGetMajorVersion(),\n\t\t\tminor: zydis.asm.zyjsGetMinorVersion(),\n\t\t\tpatch: zydis.asm.zyjsGetPatchVersion(),\n\t\t\tbuild: zydis.asm.zyjsGetBuildVersion(),\n\t\t};\n\t}\n", "export function getVersionString() {\n\t\tconst { major, minor, patch, build } = getVersion();\n\t\treturn `v${major}.${minor}.${patch}.${build}`;\n\t}\n\texport function hasFeature(feature: Feature): boolean {\n\t\treturn !!zydis.asm.zyjsHasFeature(feature);\n\t}\n"]}
{"filename": "src/index.ts", "chunked_list": ["export * from \"./enums.js\";\n\texport * from \"./decoder.js\";\n\texport * from \"./encoder.js\";\n\texport * from \"./formatter.js\";\n\texport * from \"./misc.js\";\n\texport * as native from \"./native.js\";\n\texport * as util from \"./util.js\";\n\texport * as register from \"./register.js\";\n"]}
{"filename": "src/formatter.ts", "chunked_list": ["import { FormatterProperty, FormatterStyle } from \"./enums.js\";\n\timport { HeapAllocator, Resource, withStack } from \"./util.js\";\n\timport zydis from \"./native.js\";\n\timport { DecodedInsn, DecodedOperand } from \"./decoder.js\";\n\tconst MAX_LENGTH = 512;\n\texport class Formatter {\n\t\tresource: Resource;\n\t\tconstructor(style: FormatterStyle) {\n\t\t\tthis.resource = new Resource(zydis.asm.zyjsNewFormatter(style));\n\t\t}\n", "\tproperty(prop: FormatterProperty, value: boolean | number) {\n\t\t\tzydis.asm.zyjsFormatterSetProperty(this.resource.ref(), prop, +value);\n\t\t\treturn this;\n\t\t}\n\t\tinsn(value: DecodedInsn, address: bigint = 0n) {\n\t\t\treturn withStack((alloc) => {\n\t\t\t\tconst buf = alloc.allocate(MAX_LENGTH);\n\t\t\t\tzydis.asm.zyjsFormatterFormatInsn(this.resource.ref(), buf, MAX_LENGTH, value.resource.ref(), address);\n\t\t\t\treturn zydis.UTF8ToString(buf, MAX_LENGTH);\n\t\t\t});\n", "\t}\n\t\toperand(insn: DecodedInsn, op: DecodedOperand, address: bigint = 0n) {\n\t\t\treturn withStack((alloc) => {\n\t\t\t\tconst buf = alloc.allocate(MAX_LENGTH);\n\t\t\t\tzydis.asm.zyjsFormatterFormatOperand(\n\t\t\t\t\tthis.resource.ref(),\n\t\t\t\t\tbuf,\n\t\t\t\t\tMAX_LENGTH,\n\t\t\t\t\tinsn.resource.ref(),\n\t\t\t\t\top.resource.ref(),\n", "\t\t\t\taddress\n\t\t\t\t);\n\t\t\t\treturn zydis.UTF8ToString(buf, MAX_LENGTH);\n\t\t\t});\n\t\t}\n\t\t// Lazy shader instances.\n\t\t//\n\t\tstatic #lazyMap = new Map<FormatterStyle, Formatter>();\n\t\tstatic #getLazy(style: FormatterStyle) {\n\t\t\tlet instance = this.#lazyMap.get(style);\n", "\t\tif (!instance) {\n\t\t\t\tinstance = new Formatter(style);\n\t\t\t\tthis.#lazyMap.set(style, instance);\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t\tstatic intel(): Omit<Formatter, \"property\"> {\n\t\t\treturn this.#getLazy(FormatterStyle.INTEL);\n\t\t}\n\t\tstatic att(): Omit<Formatter, \"property\"> {\n", "\t\treturn this.#getLazy(FormatterStyle.ATT);\n\t\t}\n\t}\n"]}
{"filename": "src/enums.ts", "chunked_list": ["export enum MachineMode {\n\t\t/**\n\t\t * 64 bit mode.\n\t\t */\n\t\tLONG_64,\n\t\t/**\n\t\t * 32 bit protected mode.\n\t\t */\n\t\tLONG_COMPAT_32,\n\t\t/**\n", "\t * 16 bit protected mode.\n\t\t */\n\t\tLONG_COMPAT_16,\n\t\t/**\n\t\t * 32 bit protected mode.\n\t\t */\n\t\tLEGACY_32,\n\t\t/**\n\t\t * 16 bit protected mode.\n\t\t */\n", "\tLEGACY_16,\n\t\t/**\n\t\t * 16 bit real mode.\n\t\t */\n\t\tREAL_16,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = REAL_16,\n\t}\n", "export enum StackWidth {\n\t\tWIDTH_16,\n\t\tWIDTH_32,\n\t\tWIDTH_64,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\tWIDTH_, // MAX_VALUE = WIDTH_64,\n\t}\n\texport enum DecoderMode {\n", "\t/**\n\t\t * Enables minimal instruction decoding without semantic analysis.\n\t\t *\n\t\t * This mode provides access to the mnemonic, the instruction-length, the effective\n\t\t * operand-size, the effective address-width, some attributes (e.g. `ZYDIS_ATTRIB_IS_RELATIVE`)\n\t\t * and all of the information in the `raw` field of the `ZydisDecodedInstruction` struct.\n\t\t *\n\t\t * Operands, most attributes and other specific information (like `AVX` info) are not\n\t\t * accessible in this mode.\n\t\t *\n", "\t * This mode is NOT enabled by default.\n\t\t */\n\t\tMINIMAL,\n\t\t/**\n\t\t * Enables the `AMD`-branch mode.\n\t\t *\n\t\t * Intel ignores the operand-size override-prefix (`0x66`) for all branches with 32-bit\n\t\t * immediates and forces the operand-size of the instruction to 64-bit in 64-bit mode.\n\t\t * In `AMD`-branch mode `0x66` is not ignored and changes the operand-size and the size of the\n\t\t * immediate to 16-bit.\n", "\t *\n\t\t * This mode is NOT enabled by default.\n\t\t */\n\t\tAMD_BRANCHES,\n\t\t/**\n\t\t * Enables `KNC` compatibility-mode.\n\t\t *\n\t\t * `KNC` and `KNL+` chips are sharing opcodes and encodings for some mask-related instructions.\n\t\t * Enable this mode to use the old `KNC` specifications (different mnemonics, operands, ..).\n\t\t *\n", "\t * This mode is NOT enabled by default.\n\t\t */\n\t\tKNC,\n\t\t/**\n\t\t * Enables the `MPX` mode.\n\t\t *\n\t\t * The `MPX` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n\t\t */\n", "\tMPX,\n\t\t/**\n\t\t * Enables the `CET` mode.\n\t\t *\n\t\t * The `CET` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n\t\t */\n\t\tCET,\n\t\t/**\n", "\t * Enables the `LZCNT` mode.\n\t\t *\n\t\t * The `LZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n\t\t */\n\t\tLZCNT,\n\t\t/**\n\t\t * Enables the `TZCNT` mode.\n\t\t *\n", "\t * The `TZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n\t\t */\n\t\tTZCNT,\n\t\t/**\n\t\t * Enables the `WBNOINVD` mode.\n\t\t *\n\t\t * The `WBINVD` instruction is interpreted as `WBNOINVD` on ICL chips, if a `F3` prefix is\n\t\t * used.\n", "\t *\n\t\t * This mode is disabled by default.\n\t\t */\n\t\tWBNOINVD,\n\t\t/**\n\t\t * Enables the `CLDEMOTE` mode.\n\t\t *\n\t\t * The `CLDEMOTE` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n", "\t */\n\t\tCLDEMOTE,\n\t\t/**\n\t\t * Enables the `IPREFETCH` mode.\n\t\t *\n\t\t * The `IPREFETCH` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t\t *\n\t\t * This mode is enabled by default.\n\t\t */\n\t\tIPREFETCH,\n", "\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = IPREFETCH,\n\t}\n\t/**\n\t * Defines the `ZydisMnemonic` enum.\n\t */\n\texport enum Mnemonic {\n\t\tINVALID,\n", "\tAAA,\n\t\tAAD,\n\t\tAADD,\n\t\tAAM,\n\t\tAAND,\n\t\tAAS,\n\t\tADC,\n\t\tADCX,\n\t\tADD,\n\t\tADDPD,\n", "\tADDPS,\n\t\tADDSD,\n\t\tADDSS,\n\t\tADDSUBPD,\n\t\tADDSUBPS,\n\t\tADOX,\n\t\tAESDEC,\n\t\tAESDEC128KL,\n\t\tAESDEC256KL,\n\t\tAESDECLAST,\n", "\tAESDECWIDE128KL,\n\t\tAESDECWIDE256KL,\n\t\tAESENC,\n\t\tAESENC128KL,\n\t\tAESENC256KL,\n\t\tAESENCLAST,\n\t\tAESENCWIDE128KL,\n\t\tAESENCWIDE256KL,\n\t\tAESIMC,\n\t\tAESKEYGENASSIST,\n", "\tAND,\n\t\tANDN,\n\t\tANDNPD,\n\t\tANDNPS,\n\t\tANDPD,\n\t\tANDPS,\n\t\tAOR,\n\t\tARPL,\n\t\tAXOR,\n\t\tBEXTR,\n", "\tBLCFILL,\n\t\tBLCI,\n\t\tBLCIC,\n\t\tBLCMSK,\n\t\tBLCS,\n\t\tBLENDPD,\n\t\tBLENDPS,\n\t\tBLENDVPD,\n\t\tBLENDVPS,\n\t\tBLSFILL,\n", "\tBLSI,\n\t\tBLSIC,\n\t\tBLSMSK,\n\t\tBLSR,\n\t\tBNDCL,\n\t\tBNDCN,\n\t\tBNDCU,\n\t\tBNDLDX,\n\t\tBNDMK,\n\t\tBNDMOV,\n", "\tBNDSTX,\n\t\tBOUND,\n\t\tBSF,\n\t\tBSR,\n\t\tBSWAP,\n\t\tBT,\n\t\tBTC,\n\t\tBTR,\n\t\tBTS,\n\t\tBZHI,\n", "\tCALL,\n\t\tCBW,\n\t\tCDQ,\n\t\tCDQE,\n\t\tCLAC,\n\t\tCLC,\n\t\tCLD,\n\t\tCLDEMOTE,\n\t\tCLEVICT0,\n\t\tCLEVICT1,\n", "\tCLFLUSH,\n\t\tCLFLUSHOPT,\n\t\tCLGI,\n\t\tCLI,\n\t\tCLRSSBSY,\n\t\tCLTS,\n\t\tCLUI,\n\t\tCLWB,\n\t\tCLZERO,\n\t\tCMC,\n", "\tCMOVB,\n\t\tCMOVBE,\n\t\tCMOVL,\n\t\tCMOVLE,\n\t\tCMOVNB,\n\t\tCMOVNBE,\n\t\tCMOVNL,\n\t\tCMOVNLE,\n\t\tCMOVNO,\n\t\tCMOVNP,\n", "\tCMOVNS,\n\t\tCMOVNZ,\n\t\tCMOVO,\n\t\tCMOVP,\n\t\tCMOVS,\n\t\tCMOVZ,\n\t\tCMP,\n\t\tCMPPD,\n\t\tCMPPS,\n\t\tCMPSB,\n", "\tCMPSD,\n\t\tCMPSQ,\n\t\tCMPSS,\n\t\tCMPSW,\n\t\tCMPXCHG,\n\t\tCMPXCHG16B,\n\t\tCMPXCHG8B,\n\t\tCOMISD,\n\t\tCOMISS,\n\t\tCPUID,\n", "\tCQO,\n\t\tCRC32,\n\t\tCVTDQ2PD,\n\t\tCVTDQ2PS,\n\t\tCVTPD2DQ,\n\t\tCVTPD2PI,\n\t\tCVTPD2PS,\n\t\tCVTPI2PD,\n\t\tCVTPI2PS,\n\t\tCVTPS2DQ,\n", "\tCVTPS2PD,\n\t\tCVTPS2PI,\n\t\tCVTSD2SI,\n\t\tCVTSD2SS,\n\t\tCVTSI2SD,\n\t\tCVTSI2SS,\n\t\tCVTSS2SD,\n\t\tCVTSS2SI,\n\t\tCVTTPD2DQ,\n\t\tCVTTPD2PI,\n", "\tCVTTPS2DQ,\n\t\tCVTTPS2PI,\n\t\tCVTTSD2SI,\n\t\tCVTTSS2SI,\n\t\tCWD,\n\t\tCWDE,\n\t\tDAA,\n\t\tDAS,\n\t\tDEC,\n\t\tDELAY,\n", "\tDIV,\n\t\tDIVPD,\n\t\tDIVPS,\n\t\tDIVSD,\n\t\tDIVSS,\n\t\tDPPD,\n\t\tDPPS,\n\t\tEMMS,\n\t\tENCLS,\n\t\tENCLU,\n", "\tENCLV,\n\t\tENCODEKEY128,\n\t\tENCODEKEY256,\n\t\tENDBR32,\n\t\tENDBR64,\n\t\tENQCMD,\n\t\tENQCMDS,\n\t\tENTER,\n\t\tEXTRACTPS,\n\t\tEXTRQ,\n", "\tF2XM1,\n\t\tFABS,\n\t\tFADD,\n\t\tFADDP,\n\t\tFBLD,\n\t\tFBSTP,\n\t\tFCHS,\n\t\tFCMOVB,\n\t\tFCMOVBE,\n\t\tFCMOVE,\n", "\tFCMOVNB,\n\t\tFCMOVNBE,\n\t\tFCMOVNE,\n\t\tFCMOVNU,\n\t\tFCMOVU,\n\t\tFCOM,\n\t\tFCOMI,\n\t\tFCOMIP,\n\t\tFCOMP,\n\t\tFCOMPP,\n", "\tFCOS,\n\t\tFDECSTP,\n\t\tFDISI8087_NOP,\n\t\tFDIV,\n\t\tFDIVP,\n\t\tFDIVR,\n\t\tFDIVRP,\n\t\tFEMMS,\n\t\tFENI8087_NOP,\n\t\tFFREE,\n", "\tFFREEP,\n\t\tFIADD,\n\t\tFICOM,\n\t\tFICOMP,\n\t\tFIDIV,\n\t\tFIDIVR,\n\t\tFILD,\n\t\tFIMUL,\n\t\tFINCSTP,\n\t\tFIST,\n", "\tFISTP,\n\t\tFISTTP,\n\t\tFISUB,\n\t\tFISUBR,\n\t\tFLD,\n\t\tFLD1,\n\t\tFLDCW,\n\t\tFLDENV,\n\t\tFLDL2E,\n\t\tFLDL2T,\n", "\tFLDLG2,\n\t\tFLDLN2,\n\t\tFLDPI,\n\t\tFLDZ,\n\t\tFMUL,\n\t\tFMULP,\n\t\tFNCLEX,\n\t\tFNINIT,\n\t\tFNOP,\n\t\tFNSAVE,\n", "\tFNSTCW,\n\t\tFNSTENV,\n\t\tFNSTSW,\n\t\tFPATAN,\n\t\tFPREM,\n\t\tFPREM1,\n\t\tFPTAN,\n\t\tFRNDINT,\n\t\tFRSTOR,\n\t\tFSCALE,\n", "\tFSETPM287_NOP,\n\t\tFSIN,\n\t\tFSINCOS,\n\t\tFSQRT,\n\t\tFST,\n\t\tFSTP,\n\t\tFSTPNCE,\n\t\tFSUB,\n\t\tFSUBP,\n\t\tFSUBR,\n", "\tFSUBRP,\n\t\tFTST,\n\t\tFUCOM,\n\t\tFUCOMI,\n\t\tFUCOMIP,\n\t\tFUCOMP,\n\t\tFUCOMPP,\n\t\tFWAIT,\n\t\tFXAM,\n\t\tFXCH,\n", "\tFXRSTOR,\n\t\tFXRSTOR64,\n\t\tFXSAVE,\n\t\tFXSAVE64,\n\t\tFXTRACT,\n\t\tFYL2X,\n\t\tFYL2XP1,\n\t\tGETSEC,\n\t\tGF2P8AFFINEINVQB,\n\t\tGF2P8AFFINEQB,\n", "\tGF2P8MULB,\n\t\tHADDPD,\n\t\tHADDPS,\n\t\tHLT,\n\t\tHRESET,\n\t\tHSUBPD,\n\t\tHSUBPS,\n\t\tIDIV,\n\t\tIMUL,\n\t\tIN,\n", "\tINC,\n\t\tINCSSPD,\n\t\tINCSSPQ,\n\t\tINSB,\n\t\tINSD,\n\t\tINSERTPS,\n\t\tINSERTQ,\n\t\tINSW,\n\t\tINT,\n\t\tINT1,\n", "\tINT3,\n\t\tINTO,\n\t\tINVD,\n\t\tINVEPT,\n\t\tINVLPG,\n\t\tINVLPGA,\n\t\tINVLPGB,\n\t\tINVPCID,\n\t\tINVVPID,\n\t\tIRET,\n", "\tIRETD,\n\t\tIRETQ,\n\t\tJB,\n\t\tJBE,\n\t\tJCXZ,\n\t\tJECXZ,\n\t\tJKNZD,\n\t\tJKZD,\n\t\tJL,\n\t\tJLE,\n", "\tJMP,\n\t\tJNB,\n\t\tJNBE,\n\t\tJNL,\n\t\tJNLE,\n\t\tJNO,\n\t\tJNP,\n\t\tJNS,\n\t\tJNZ,\n\t\tJO,\n", "\tJP,\n\t\tJRCXZ,\n\t\tJS,\n\t\tJZ,\n\t\tKADDB,\n\t\tKADDD,\n\t\tKADDQ,\n\t\tKADDW,\n\t\tKAND,\n\t\tKANDB,\n", "\tKANDD,\n\t\tKANDN,\n\t\tKANDNB,\n\t\tKANDND,\n\t\tKANDNQ,\n\t\tKANDNR,\n\t\tKANDNW,\n\t\tKANDQ,\n\t\tKANDW,\n\t\tKCONCATH,\n", "\tKCONCATL,\n\t\tKEXTRACT,\n\t\tKMERGE2L1H,\n\t\tKMERGE2L1L,\n\t\tKMOV,\n\t\tKMOVB,\n\t\tKMOVD,\n\t\tKMOVQ,\n\t\tKMOVW,\n\t\tKNOT,\n", "\tKNOTB,\n\t\tKNOTD,\n\t\tKNOTQ,\n\t\tKNOTW,\n\t\tKOR,\n\t\tKORB,\n\t\tKORD,\n\t\tKORQ,\n\t\tKORTEST,\n\t\tKORTESTB,\n", "\tKORTESTD,\n\t\tKORTESTQ,\n\t\tKORTESTW,\n\t\tKORW,\n\t\tKSHIFTLB,\n\t\tKSHIFTLD,\n\t\tKSHIFTLQ,\n\t\tKSHIFTLW,\n\t\tKSHIFTRB,\n\t\tKSHIFTRD,\n", "\tKSHIFTRQ,\n\t\tKSHIFTRW,\n\t\tKTESTB,\n\t\tKTESTD,\n\t\tKTESTQ,\n\t\tKTESTW,\n\t\tKUNPCKBW,\n\t\tKUNPCKDQ,\n\t\tKUNPCKWD,\n\t\tKXNOR,\n", "\tKXNORB,\n\t\tKXNORD,\n\t\tKXNORQ,\n\t\tKXNORW,\n\t\tKXOR,\n\t\tKXORB,\n\t\tKXORD,\n\t\tKXORQ,\n\t\tKXORW,\n\t\tLAHF,\n", "\tLAR,\n\t\tLDDQU,\n\t\tLDMXCSR,\n\t\tLDS,\n\t\tLDTILECFG,\n\t\tLEA,\n\t\tLEAVE,\n\t\tLES,\n\t\tLFENCE,\n\t\tLFS,\n", "\tLGDT,\n\t\tLGS,\n\t\tLIDT,\n\t\tLLDT,\n\t\tLLWPCB,\n\t\tLMSW,\n\t\tLOADIWKEY,\n\t\tLODSB,\n\t\tLODSD,\n\t\tLODSQ,\n", "\tLODSW,\n\t\tLOOP,\n\t\tLOOPE,\n\t\tLOOPNE,\n\t\tLSL,\n\t\tLSS,\n\t\tLTR,\n\t\tLWPINS,\n\t\tLWPVAL,\n\t\tLZCNT,\n", "\tMASKMOVDQU,\n\t\tMASKMOVQ,\n\t\tMAXPD,\n\t\tMAXPS,\n\t\tMAXSD,\n\t\tMAXSS,\n\t\tMCOMMIT,\n\t\tMFENCE,\n\t\tMINPD,\n\t\tMINPS,\n", "\tMINSD,\n\t\tMINSS,\n\t\tMONITOR,\n\t\tMONITORX,\n\t\tMONTMUL,\n\t\tMOV,\n\t\tMOVAPD,\n\t\tMOVAPS,\n\t\tMOVBE,\n\t\tMOVD,\n", "\tMOVDDUP,\n\t\tMOVDIR64B,\n\t\tMOVDIRI,\n\t\tMOVDQ2Q,\n\t\tMOVDQA,\n\t\tMOVDQU,\n\t\tMOVHLPS,\n\t\tMOVHPD,\n\t\tMOVHPS,\n\t\tMOVLHPS,\n", "\tMOVLPD,\n\t\tMOVLPS,\n\t\tMOVMSKPD,\n\t\tMOVMSKPS,\n\t\tMOVNTDQ,\n\t\tMOVNTDQA,\n\t\tMOVNTI,\n\t\tMOVNTPD,\n\t\tMOVNTPS,\n\t\tMOVNTQ,\n", "\tMOVNTSD,\n\t\tMOVNTSS,\n\t\tMOVQ,\n\t\tMOVQ2DQ,\n\t\tMOVSB,\n\t\tMOVSD,\n\t\tMOVSHDUP,\n\t\tMOVSLDUP,\n\t\tMOVSQ,\n\t\tMOVSS,\n", "\tMOVSW,\n\t\tMOVSX,\n\t\tMOVSXD,\n\t\tMOVUPD,\n\t\tMOVUPS,\n\t\tMOVZX,\n\t\tMPSADBW,\n\t\tMUL,\n\t\tMULPD,\n\t\tMULPS,\n", "\tMULSD,\n\t\tMULSS,\n\t\tMULX,\n\t\tMWAIT,\n\t\tMWAITX,\n\t\tNEG,\n\t\tNOP,\n\t\tNOT,\n\t\tOR,\n\t\tORPD,\n", "\tORPS,\n\t\tOUT,\n\t\tOUTSB,\n\t\tOUTSD,\n\t\tOUTSW,\n\t\tPABSB,\n\t\tPABSD,\n\t\tPABSW,\n\t\tPACKSSDW,\n\t\tPACKSSWB,\n", "\tPACKUSDW,\n\t\tPACKUSWB,\n\t\tPADDB,\n\t\tPADDD,\n\t\tPADDQ,\n\t\tPADDSB,\n\t\tPADDSW,\n\t\tPADDUSB,\n\t\tPADDUSW,\n\t\tPADDW,\n", "\tPALIGNR,\n\t\tPAND,\n\t\tPANDN,\n\t\tPAUSE,\n\t\tPAVGB,\n\t\tPAVGUSB,\n\t\tPAVGW,\n\t\tPBLENDVB,\n\t\tPBLENDW,\n\t\tPCLMULQDQ,\n", "\tPCMPEQB,\n\t\tPCMPEQD,\n\t\tPCMPEQQ,\n\t\tPCMPEQW,\n\t\tPCMPESTRI,\n\t\tPCMPESTRM,\n\t\tPCMPGTB,\n\t\tPCMPGTD,\n\t\tPCMPGTQ,\n\t\tPCMPGTW,\n", "\tPCMPISTRI,\n\t\tPCMPISTRM,\n\t\tPCOMMIT,\n\t\tPCONFIG,\n\t\tPDEP,\n\t\tPEXT,\n\t\tPEXTRB,\n\t\tPEXTRD,\n\t\tPEXTRQ,\n\t\tPEXTRW,\n", "\tPF2ID,\n\t\tPF2IW,\n\t\tPFACC,\n\t\tPFADD,\n\t\tPFCMPEQ,\n\t\tPFCMPGE,\n\t\tPFCMPGT,\n\t\tPFCPIT1,\n\t\tPFMAX,\n\t\tPFMIN,\n", "\tPFMUL,\n\t\tPFNACC,\n\t\tPFPNACC,\n\t\tPFRCP,\n\t\tPFRCPIT2,\n\t\tPFRSQIT1,\n\t\tPFSQRT,\n\t\tPFSUB,\n\t\tPFSUBR,\n\t\tPHADDD,\n", "\tPHADDSW,\n\t\tPHADDW,\n\t\tPHMINPOSUW,\n\t\tPHSUBD,\n\t\tPHSUBSW,\n\t\tPHSUBW,\n\t\tPI2FD,\n\t\tPI2FW,\n\t\tPINSRB,\n\t\tPINSRD,\n", "\tPINSRQ,\n\t\tPINSRW,\n\t\tPMADDUBSW,\n\t\tPMADDWD,\n\t\tPMAXSB,\n\t\tPMAXSD,\n\t\tPMAXSW,\n\t\tPMAXUB,\n\t\tPMAXUD,\n\t\tPMAXUW,\n", "\tPMINSB,\n\t\tPMINSD,\n\t\tPMINSW,\n\t\tPMINUB,\n\t\tPMINUD,\n\t\tPMINUW,\n\t\tPMOVMSKB,\n\t\tPMOVSXBD,\n\t\tPMOVSXBQ,\n\t\tPMOVSXBW,\n", "\tPMOVSXDQ,\n\t\tPMOVSXWD,\n\t\tPMOVSXWQ,\n\t\tPMOVZXBD,\n\t\tPMOVZXBQ,\n\t\tPMOVZXBW,\n\t\tPMOVZXDQ,\n\t\tPMOVZXWD,\n\t\tPMOVZXWQ,\n\t\tPMULDQ,\n", "\tPMULHRSW,\n\t\tPMULHRW,\n\t\tPMULHUW,\n\t\tPMULHW,\n\t\tPMULLD,\n\t\tPMULLW,\n\t\tPMULUDQ,\n\t\tPOP,\n\t\tPOPA,\n\t\tPOPAD,\n", "\tPOPCNT,\n\t\tPOPF,\n\t\tPOPFD,\n\t\tPOPFQ,\n\t\tPOR,\n\t\tPREFETCH,\n\t\tPREFETCHIT0,\n\t\tPREFETCHIT1,\n\t\tPREFETCHNTA,\n\t\tPREFETCHT0,\n", "\tPREFETCHT1,\n\t\tPREFETCHT2,\n\t\tPREFETCHW,\n\t\tPREFETCHWT1,\n\t\tPSADBW,\n\t\tPSHUFB,\n\t\tPSHUFD,\n\t\tPSHUFHW,\n\t\tPSHUFLW,\n\t\tPSHUFW,\n", "\tPSIGNB,\n\t\tPSIGND,\n\t\tPSIGNW,\n\t\tPSLLD,\n\t\tPSLLDQ,\n\t\tPSLLQ,\n\t\tPSLLW,\n\t\tPSMASH,\n\t\tPSRAD,\n\t\tPSRAW,\n", "\tPSRLD,\n\t\tPSRLDQ,\n\t\tPSRLQ,\n\t\tPSRLW,\n\t\tPSUBB,\n\t\tPSUBD,\n\t\tPSUBQ,\n\t\tPSUBSB,\n\t\tPSUBSW,\n\t\tPSUBUSB,\n", "\tPSUBUSW,\n\t\tPSUBW,\n\t\tPSWAPD,\n\t\tPTEST,\n\t\tPTWRITE,\n\t\tPUNPCKHBW,\n\t\tPUNPCKHDQ,\n\t\tPUNPCKHQDQ,\n\t\tPUNPCKHWD,\n\t\tPUNPCKLBW,\n", "\tPUNPCKLDQ,\n\t\tPUNPCKLQDQ,\n\t\tPUNPCKLWD,\n\t\tPUSH,\n\t\tPUSHA,\n\t\tPUSHAD,\n\t\tPUSHF,\n\t\tPUSHFD,\n\t\tPUSHFQ,\n\t\tPVALIDATE,\n", "\tPXOR,\n\t\tRCL,\n\t\tRCPPS,\n\t\tRCPSS,\n\t\tRCR,\n\t\tRDFSBASE,\n\t\tRDGSBASE,\n\t\tRDMSR,\n\t\tRDMSRLIST,\n\t\tRDPID,\n", "\tRDPKRU,\n\t\tRDPMC,\n\t\tRDPRU,\n\t\tRDRAND,\n\t\tRDSEED,\n\t\tRDSSPD,\n\t\tRDSSPQ,\n\t\tRDTSC,\n\t\tRDTSCP,\n\t\tRET,\n", "\tRMPADJUST,\n\t\tRMPUPDATE,\n\t\tROL,\n\t\tROR,\n\t\tRORX,\n\t\tROUNDPD,\n\t\tROUNDPS,\n\t\tROUNDSD,\n\t\tROUNDSS,\n\t\tRSM,\n", "\tRSQRTPS,\n\t\tRSQRTSS,\n\t\tRSTORSSP,\n\t\tSAHF,\n\t\tSALC,\n\t\tSAR,\n\t\tSARX,\n\t\tSAVEPREVSSP,\n\t\tSBB,\n\t\tSCASB,\n", "\tSCASD,\n\t\tSCASQ,\n\t\tSCASW,\n\t\tSEAMCALL,\n\t\tSEAMOPS,\n\t\tSEAMRET,\n\t\tSENDUIPI,\n\t\tSERIALIZE,\n\t\tSETB,\n\t\tSETBE,\n", "\tSETL,\n\t\tSETLE,\n\t\tSETNB,\n\t\tSETNBE,\n\t\tSETNL,\n\t\tSETNLE,\n\t\tSETNO,\n\t\tSETNP,\n\t\tSETNS,\n\t\tSETNZ,\n", "\tSETO,\n\t\tSETP,\n\t\tSETS,\n\t\tSETSSBSY,\n\t\tSETZ,\n\t\tSFENCE,\n\t\tSGDT,\n\t\tSHA1MSG1,\n\t\tSHA1MSG2,\n\t\tSHA1NEXTE,\n", "\tSHA1RNDS4,\n\t\tSHA256MSG1,\n\t\tSHA256MSG2,\n\t\tSHA256RNDS2,\n\t\tSHL,\n\t\tSHLD,\n\t\tSHLX,\n\t\tSHR,\n\t\tSHRD,\n\t\tSHRX,\n", "\tSHUFPD,\n\t\tSHUFPS,\n\t\tSIDT,\n\t\tSKINIT,\n\t\tSLDT,\n\t\tSLWPCB,\n\t\tSMSW,\n\t\tSPFLT,\n\t\tSQRTPD,\n\t\tSQRTPS,\n", "\tSQRTSD,\n\t\tSQRTSS,\n\t\tSTAC,\n\t\tSTC,\n\t\tSTD,\n\t\tSTGI,\n\t\tSTI,\n\t\tSTMXCSR,\n\t\tSTOSB,\n\t\tSTOSD,\n", "\tSTOSQ,\n\t\tSTOSW,\n\t\tSTR,\n\t\tSTTILECFG,\n\t\tSTUI,\n\t\tSUB,\n\t\tSUBPD,\n\t\tSUBPS,\n\t\tSUBSD,\n\t\tSUBSS,\n", "\tSWAPGS,\n\t\tSYSCALL,\n\t\tSYSENTER,\n\t\tSYSEXIT,\n\t\tSYSRET,\n\t\tT1MSKC,\n\t\tTDCALL,\n\t\tTDPBF16PS,\n\t\tTDPBSSD,\n\t\tTDPBSUD,\n", "\tTDPBUSD,\n\t\tTDPBUUD,\n\t\tTDPFP16PS,\n\t\tTEST,\n\t\tTESTUI,\n\t\tTILELOADD,\n\t\tTILELOADDT1,\n\t\tTILERELEASE,\n\t\tTILESTORED,\n\t\tTILEZERO,\n", "\tTLBSYNC,\n\t\tTPAUSE,\n\t\tTZCNT,\n\t\tTZCNTI,\n\t\tTZMSK,\n\t\tUCOMISD,\n\t\tUCOMISS,\n\t\tUD0,\n\t\tUD1,\n\t\tUD2,\n", "\tUIRET,\n\t\tUMONITOR,\n\t\tUMWAIT,\n\t\tUNPCKHPD,\n\t\tUNPCKHPS,\n\t\tUNPCKLPD,\n\t\tUNPCKLPS,\n\t\tV4FMADDPS,\n\t\tV4FMADDSS,\n\t\tV4FNMADDPS,\n", "\tV4FNMADDSS,\n\t\tVADDNPD,\n\t\tVADDNPS,\n\t\tVADDPD,\n\t\tVADDPH,\n\t\tVADDPS,\n\t\tVADDSD,\n\t\tVADDSETSPS,\n\t\tVADDSH,\n\t\tVADDSS,\n", "\tVADDSUBPD,\n\t\tVADDSUBPS,\n\t\tVAESDEC,\n\t\tVAESDECLAST,\n\t\tVAESENC,\n\t\tVAESENCLAST,\n\t\tVAESIMC,\n\t\tVAESKEYGENASSIST,\n\t\tVALIGND,\n\t\tVALIGNQ,\n", "\tVANDNPD,\n\t\tVANDNPS,\n\t\tVANDPD,\n\t\tVANDPS,\n\t\tVBCSTNEBF162PS,\n\t\tVBCSTNESH2PS,\n\t\tVBLENDMPD,\n\t\tVBLENDMPS,\n\t\tVBLENDPD,\n\t\tVBLENDPS,\n", "\tVBLENDVPD,\n\t\tVBLENDVPS,\n\t\tVBROADCASTF128,\n\t\tVBROADCASTF32X2,\n\t\tVBROADCASTF32X4,\n\t\tVBROADCASTF32X8,\n\t\tVBROADCASTF64X2,\n\t\tVBROADCASTF64X4,\n\t\tVBROADCASTI128,\n\t\tVBROADCASTI32X2,\n", "\tVBROADCASTI32X4,\n\t\tVBROADCASTI32X8,\n\t\tVBROADCASTI64X2,\n\t\tVBROADCASTI64X4,\n\t\tVBROADCASTSD,\n\t\tVBROADCASTSS,\n\t\tVCMPPD,\n\t\tVCMPPH,\n\t\tVCMPPS,\n\t\tVCMPSD,\n", "\tVCMPSH,\n\t\tVCMPSS,\n\t\tVCOMISD,\n\t\tVCOMISH,\n\t\tVCOMISS,\n\t\tVCOMPRESSPD,\n\t\tVCOMPRESSPS,\n\t\tVCVTDQ2PD,\n\t\tVCVTDQ2PH,\n\t\tVCVTDQ2PS,\n", "\tVCVTFXPNTDQ2PS,\n\t\tVCVTFXPNTPD2DQ,\n\t\tVCVTFXPNTPD2UDQ,\n\t\tVCVTFXPNTPS2DQ,\n\t\tVCVTFXPNTPS2UDQ,\n\t\tVCVTFXPNTUDQ2PS,\n\t\tVCVTNE2PS2BF16,\n\t\tVCVTNEEBF162PS,\n\t\tVCVTNEEPH2PS,\n\t\tVCVTNEOBF162PS,\n", "\tVCVTNEOPH2PS,\n\t\tVCVTNEPS2BF16,\n\t\tVCVTPD2DQ,\n\t\tVCVTPD2PH,\n\t\tVCVTPD2PS,\n\t\tVCVTPD2QQ,\n\t\tVCVTPD2UDQ,\n\t\tVCVTPD2UQQ,\n\t\tVCVTPH2DQ,\n\t\tVCVTPH2PD,\n", "\tVCVTPH2PS,\n\t\tVCVTPH2PSX,\n\t\tVCVTPH2QQ,\n\t\tVCVTPH2UDQ,\n\t\tVCVTPH2UQQ,\n\t\tVCVTPH2UW,\n\t\tVCVTPH2W,\n\t\tVCVTPS2DQ,\n\t\tVCVTPS2PD,\n\t\tVCVTPS2PH,\n", "\tVCVTPS2PHX,\n\t\tVCVTPS2QQ,\n\t\tVCVTPS2UDQ,\n\t\tVCVTPS2UQQ,\n\t\tVCVTQQ2PD,\n\t\tVCVTQQ2PH,\n\t\tVCVTQQ2PS,\n\t\tVCVTSD2SH,\n\t\tVCVTSD2SI,\n\t\tVCVTSD2SS,\n", "\tVCVTSD2USI,\n\t\tVCVTSH2SD,\n\t\tVCVTSH2SI,\n\t\tVCVTSH2SS,\n\t\tVCVTSH2USI,\n\t\tVCVTSI2SD,\n\t\tVCVTSI2SH,\n\t\tVCVTSI2SS,\n\t\tVCVTSS2SD,\n\t\tVCVTSS2SH,\n", "\tVCVTSS2SI,\n\t\tVCVTSS2USI,\n\t\tVCVTTPD2DQ,\n\t\tVCVTTPD2QQ,\n\t\tVCVTTPD2UDQ,\n\t\tVCVTTPD2UQQ,\n\t\tVCVTTPH2DQ,\n\t\tVCVTTPH2QQ,\n\t\tVCVTTPH2UDQ,\n\t\tVCVTTPH2UQQ,\n", "\tVCVTTPH2UW,\n\t\tVCVTTPH2W,\n\t\tVCVTTPS2DQ,\n\t\tVCVTTPS2QQ,\n\t\tVCVTTPS2UDQ,\n\t\tVCVTTPS2UQQ,\n\t\tVCVTTSD2SI,\n\t\tVCVTTSD2USI,\n\t\tVCVTTSH2SI,\n\t\tVCVTTSH2USI,\n", "\tVCVTTSS2SI,\n\t\tVCVTTSS2USI,\n\t\tVCVTUDQ2PD,\n\t\tVCVTUDQ2PH,\n\t\tVCVTUDQ2PS,\n\t\tVCVTUQQ2PD,\n\t\tVCVTUQQ2PH,\n\t\tVCVTUQQ2PS,\n\t\tVCVTUSI2SD,\n\t\tVCVTUSI2SH,\n", "\tVCVTUSI2SS,\n\t\tVCVTUW2PH,\n\t\tVCVTW2PH,\n\t\tVDBPSADBW,\n\t\tVDIVPD,\n\t\tVDIVPH,\n\t\tVDIVPS,\n\t\tVDIVSD,\n\t\tVDIVSH,\n\t\tVDIVSS,\n", "\tVDPBF16PS,\n\t\tVDPPD,\n\t\tVDPPS,\n\t\tVERR,\n\t\tVERW,\n\t\tVEXP223PS,\n\t\tVEXP2PD,\n\t\tVEXP2PS,\n\t\tVEXPANDPD,\n\t\tVEXPANDPS,\n", "\tVEXTRACTF128,\n\t\tVEXTRACTF32X4,\n\t\tVEXTRACTF32X8,\n\t\tVEXTRACTF64X2,\n\t\tVEXTRACTF64X4,\n\t\tVEXTRACTI128,\n\t\tVEXTRACTI32X4,\n\t\tVEXTRACTI32X8,\n\t\tVEXTRACTI64X2,\n\t\tVEXTRACTI64X4,\n", "\tVEXTRACTPS,\n\t\tVFCMADDCPH,\n\t\tVFCMADDCSH,\n\t\tVFCMULCPH,\n\t\tVFCMULCSH,\n\t\tVFIXUPIMMPD,\n\t\tVFIXUPIMMPS,\n\t\tVFIXUPIMMSD,\n\t\tVFIXUPIMMSS,\n\t\tVFIXUPNANPD,\n", "\tVFIXUPNANPS,\n\t\tVFMADD132PD,\n\t\tVFMADD132PH,\n\t\tVFMADD132PS,\n\t\tVFMADD132SD,\n\t\tVFMADD132SH,\n\t\tVFMADD132SS,\n\t\tVFMADD213PD,\n\t\tVFMADD213PH,\n\t\tVFMADD213PS,\n", "\tVFMADD213SD,\n\t\tVFMADD213SH,\n\t\tVFMADD213SS,\n\t\tVFMADD231PD,\n\t\tVFMADD231PH,\n\t\tVFMADD231PS,\n\t\tVFMADD231SD,\n\t\tVFMADD231SH,\n\t\tVFMADD231SS,\n\t\tVFMADD233PS,\n", "\tVFMADDCPH,\n\t\tVFMADDCSH,\n\t\tVFMADDPD,\n\t\tVFMADDPS,\n\t\tVFMADDSD,\n\t\tVFMADDSS,\n\t\tVFMADDSUB132PD,\n\t\tVFMADDSUB132PH,\n\t\tVFMADDSUB132PS,\n\t\tVFMADDSUB213PD,\n", "\tVFMADDSUB213PH,\n\t\tVFMADDSUB213PS,\n\t\tVFMADDSUB231PD,\n\t\tVFMADDSUB231PH,\n\t\tVFMADDSUB231PS,\n\t\tVFMADDSUBPD,\n\t\tVFMADDSUBPS,\n\t\tVFMSUB132PD,\n\t\tVFMSUB132PH,\n\t\tVFMSUB132PS,\n", "\tVFMSUB132SD,\n\t\tVFMSUB132SH,\n\t\tVFMSUB132SS,\n\t\tVFMSUB213PD,\n\t\tVFMSUB213PH,\n\t\tVFMSUB213PS,\n\t\tVFMSUB213SD,\n\t\tVFMSUB213SH,\n\t\tVFMSUB213SS,\n\t\tVFMSUB231PD,\n", "\tVFMSUB231PH,\n\t\tVFMSUB231PS,\n\t\tVFMSUB231SD,\n\t\tVFMSUB231SH,\n\t\tVFMSUB231SS,\n\t\tVFMSUBADD132PD,\n\t\tVFMSUBADD132PH,\n\t\tVFMSUBADD132PS,\n\t\tVFMSUBADD213PD,\n\t\tVFMSUBADD213PH,\n", "\tVFMSUBADD213PS,\n\t\tVFMSUBADD231PD,\n\t\tVFMSUBADD231PH,\n\t\tVFMSUBADD231PS,\n\t\tVFMSUBADDPD,\n\t\tVFMSUBADDPS,\n\t\tVFMSUBPD,\n\t\tVFMSUBPS,\n\t\tVFMSUBSD,\n\t\tVFMSUBSS,\n", "\tVFMULCPH,\n\t\tVFMULCSH,\n\t\tVFNMADD132PD,\n\t\tVFNMADD132PH,\n\t\tVFNMADD132PS,\n\t\tVFNMADD132SD,\n\t\tVFNMADD132SH,\n\t\tVFNMADD132SS,\n\t\tVFNMADD213PD,\n\t\tVFNMADD213PH,\n", "\tVFNMADD213PS,\n\t\tVFNMADD213SD,\n\t\tVFNMADD213SH,\n\t\tVFNMADD213SS,\n\t\tVFNMADD231PD,\n\t\tVFNMADD231PH,\n\t\tVFNMADD231PS,\n\t\tVFNMADD231SD,\n\t\tVFNMADD231SH,\n\t\tVFNMADD231SS,\n", "\tVFNMADDPD,\n\t\tVFNMADDPS,\n\t\tVFNMADDSD,\n\t\tVFNMADDSS,\n\t\tVFNMSUB132PD,\n\t\tVFNMSUB132PH,\n\t\tVFNMSUB132PS,\n\t\tVFNMSUB132SD,\n\t\tVFNMSUB132SH,\n\t\tVFNMSUB132SS,\n", "\tVFNMSUB213PD,\n\t\tVFNMSUB213PH,\n\t\tVFNMSUB213PS,\n\t\tVFNMSUB213SD,\n\t\tVFNMSUB213SH,\n\t\tVFNMSUB213SS,\n\t\tVFNMSUB231PD,\n\t\tVFNMSUB231PH,\n\t\tVFNMSUB231PS,\n\t\tVFNMSUB231SD,\n", "\tVFNMSUB231SH,\n\t\tVFNMSUB231SS,\n\t\tVFNMSUBPD,\n\t\tVFNMSUBPS,\n\t\tVFNMSUBSD,\n\t\tVFNMSUBSS,\n\t\tVFPCLASSPD,\n\t\tVFPCLASSPH,\n\t\tVFPCLASSPS,\n\t\tVFPCLASSSD,\n", "\tVFPCLASSSH,\n\t\tVFPCLASSSS,\n\t\tVFRCZPD,\n\t\tVFRCZPS,\n\t\tVFRCZSD,\n\t\tVFRCZSS,\n\t\tVGATHERDPD,\n\t\tVGATHERDPS,\n\t\tVGATHERPF0DPD,\n\t\tVGATHERPF0DPS,\n", "\tVGATHERPF0HINTDPD,\n\t\tVGATHERPF0HINTDPS,\n\t\tVGATHERPF0QPD,\n\t\tVGATHERPF0QPS,\n\t\tVGATHERPF1DPD,\n\t\tVGATHERPF1DPS,\n\t\tVGATHERPF1QPD,\n\t\tVGATHERPF1QPS,\n\t\tVGATHERQPD,\n\t\tVGATHERQPS,\n", "\tVGETEXPPD,\n\t\tVGETEXPPH,\n\t\tVGETEXPPS,\n\t\tVGETEXPSD,\n\t\tVGETEXPSH,\n\t\tVGETEXPSS,\n\t\tVGETMANTPD,\n\t\tVGETMANTPH,\n\t\tVGETMANTPS,\n\t\tVGETMANTSD,\n", "\tVGETMANTSH,\n\t\tVGETMANTSS,\n\t\tVGF2P8AFFINEINVQB,\n\t\tVGF2P8AFFINEQB,\n\t\tVGF2P8MULB,\n\t\tVGMAXABSPS,\n\t\tVGMAXPD,\n\t\tVGMAXPS,\n\t\tVGMINPD,\n\t\tVGMINPS,\n", "\tVHADDPD,\n\t\tVHADDPS,\n\t\tVHSUBPD,\n\t\tVHSUBPS,\n\t\tVINSERTF128,\n\t\tVINSERTF32X4,\n\t\tVINSERTF32X8,\n\t\tVINSERTF64X2,\n\t\tVINSERTF64X4,\n\t\tVINSERTI128,\n", "\tVINSERTI32X4,\n\t\tVINSERTI32X8,\n\t\tVINSERTI64X2,\n\t\tVINSERTI64X4,\n\t\tVINSERTPS,\n\t\tVLDDQU,\n\t\tVLDMXCSR,\n\t\tVLOADUNPACKHD,\n\t\tVLOADUNPACKHPD,\n\t\tVLOADUNPACKHPS,\n", "\tVLOADUNPACKHQ,\n\t\tVLOADUNPACKLD,\n\t\tVLOADUNPACKLPD,\n\t\tVLOADUNPACKLPS,\n\t\tVLOADUNPACKLQ,\n\t\tVLOG2PS,\n\t\tVMASKMOVDQU,\n\t\tVMASKMOVPD,\n\t\tVMASKMOVPS,\n\t\tVMAXPD,\n", "\tVMAXPH,\n\t\tVMAXPS,\n\t\tVMAXSD,\n\t\tVMAXSH,\n\t\tVMAXSS,\n\t\tVMCALL,\n\t\tVMCLEAR,\n\t\tVMFUNC,\n\t\tVMINPD,\n\t\tVMINPH,\n", "\tVMINPS,\n\t\tVMINSD,\n\t\tVMINSH,\n\t\tVMINSS,\n\t\tVMLAUNCH,\n\t\tVMLOAD,\n\t\tVMMCALL,\n\t\tVMOVAPD,\n\t\tVMOVAPS,\n\t\tVMOVD,\n", "\tVMOVDDUP,\n\t\tVMOVDQA,\n\t\tVMOVDQA32,\n\t\tVMOVDQA64,\n\t\tVMOVDQU,\n\t\tVMOVDQU16,\n\t\tVMOVDQU32,\n\t\tVMOVDQU64,\n\t\tVMOVDQU8,\n\t\tVMOVHLPS,\n", "\tVMOVHPD,\n\t\tVMOVHPS,\n\t\tVMOVLHPS,\n\t\tVMOVLPD,\n\t\tVMOVLPS,\n\t\tVMOVMSKPD,\n\t\tVMOVMSKPS,\n\t\tVMOVNRAPD,\n\t\tVMOVNRAPS,\n\t\tVMOVNRNGOAPD,\n", "\tVMOVNRNGOAPS,\n\t\tVMOVNTDQ,\n\t\tVMOVNTDQA,\n\t\tVMOVNTPD,\n\t\tVMOVNTPS,\n\t\tVMOVQ,\n\t\tVMOVSD,\n\t\tVMOVSH,\n\t\tVMOVSHDUP,\n\t\tVMOVSLDUP,\n", "\tVMOVSS,\n\t\tVMOVUPD,\n\t\tVMOVUPS,\n\t\tVMOVW,\n\t\tVMPSADBW,\n\t\tVMPTRLD,\n\t\tVMPTRST,\n\t\tVMREAD,\n\t\tVMRESUME,\n\t\tVMRUN,\n", "\tVMSAVE,\n\t\tVMULPD,\n\t\tVMULPH,\n\t\tVMULPS,\n\t\tVMULSD,\n\t\tVMULSH,\n\t\tVMULSS,\n\t\tVMWRITE,\n\t\tVMXOFF,\n\t\tVMXON,\n", "\tVORPD,\n\t\tVORPS,\n\t\tVP2INTERSECTD,\n\t\tVP2INTERSECTQ,\n\t\tVP4DPWSSD,\n\t\tVP4DPWSSDS,\n\t\tVPABSB,\n\t\tVPABSD,\n\t\tVPABSQ,\n\t\tVPABSW,\n", "\tVPACKSSDW,\n\t\tVPACKSSWB,\n\t\tVPACKSTOREHD,\n\t\tVPACKSTOREHPD,\n\t\tVPACKSTOREHPS,\n\t\tVPACKSTOREHQ,\n\t\tVPACKSTORELD,\n\t\tVPACKSTORELPD,\n\t\tVPACKSTORELPS,\n\t\tVPACKSTORELQ,\n", "\tVPACKUSDW,\n\t\tVPACKUSWB,\n\t\tVPADCD,\n\t\tVPADDB,\n\t\tVPADDD,\n\t\tVPADDQ,\n\t\tVPADDSB,\n\t\tVPADDSETCD,\n\t\tVPADDSETSD,\n\t\tVPADDSW,\n", "\tVPADDUSB,\n\t\tVPADDUSW,\n\t\tVPADDW,\n\t\tVPALIGNR,\n\t\tVPAND,\n\t\tVPANDD,\n\t\tVPANDN,\n\t\tVPANDND,\n\t\tVPANDNQ,\n\t\tVPANDQ,\n", "\tVPAVGB,\n\t\tVPAVGW,\n\t\tVPBLENDD,\n\t\tVPBLENDMB,\n\t\tVPBLENDMD,\n\t\tVPBLENDMQ,\n\t\tVPBLENDMW,\n\t\tVPBLENDVB,\n\t\tVPBLENDW,\n\t\tVPBROADCASTB,\n", "\tVPBROADCASTD,\n\t\tVPBROADCASTMB2Q,\n\t\tVPBROADCASTMW2D,\n\t\tVPBROADCASTQ,\n\t\tVPBROADCASTW,\n\t\tVPCLMULQDQ,\n\t\tVPCMOV,\n\t\tVPCMPB,\n\t\tVPCMPD,\n\t\tVPCMPEQB,\n", "\tVPCMPEQD,\n\t\tVPCMPEQQ,\n\t\tVPCMPEQW,\n\t\tVPCMPESTRI,\n\t\tVPCMPESTRM,\n\t\tVPCMPGTB,\n\t\tVPCMPGTD,\n\t\tVPCMPGTQ,\n\t\tVPCMPGTW,\n\t\tVPCMPISTRI,\n", "\tVPCMPISTRM,\n\t\tVPCMPLTD,\n\t\tVPCMPQ,\n\t\tVPCMPUB,\n\t\tVPCMPUD,\n\t\tVPCMPUQ,\n\t\tVPCMPUW,\n\t\tVPCMPW,\n\t\tVPCOMB,\n\t\tVPCOMD,\n", "\tVPCOMPRESSB,\n\t\tVPCOMPRESSD,\n\t\tVPCOMPRESSQ,\n\t\tVPCOMPRESSW,\n\t\tVPCOMQ,\n\t\tVPCOMUB,\n\t\tVPCOMUD,\n\t\tVPCOMUQ,\n\t\tVPCOMUW,\n\t\tVPCOMW,\n", "\tVPCONFLICTD,\n\t\tVPCONFLICTQ,\n\t\tVPDPBSSD,\n\t\tVPDPBSSDS,\n\t\tVPDPBSUD,\n\t\tVPDPBSUDS,\n\t\tVPDPBUSD,\n\t\tVPDPBUSDS,\n\t\tVPDPBUUD,\n\t\tVPDPBUUDS,\n", "\tVPDPWSSD,\n\t\tVPDPWSSDS,\n\t\tVPERM2F128,\n\t\tVPERM2I128,\n\t\tVPERMB,\n\t\tVPERMD,\n\t\tVPERMF32X4,\n\t\tVPERMI2B,\n\t\tVPERMI2D,\n\t\tVPERMI2PD,\n", "\tVPERMI2PS,\n\t\tVPERMI2Q,\n\t\tVPERMI2W,\n\t\tVPERMIL2PD,\n\t\tVPERMIL2PS,\n\t\tVPERMILPD,\n\t\tVPERMILPS,\n\t\tVPERMPD,\n\t\tVPERMPS,\n\t\tVPERMQ,\n", "\tVPERMT2B,\n\t\tVPERMT2D,\n\t\tVPERMT2PD,\n\t\tVPERMT2PS,\n\t\tVPERMT2Q,\n\t\tVPERMT2W,\n\t\tVPERMW,\n\t\tVPEXPANDB,\n\t\tVPEXPANDD,\n\t\tVPEXPANDQ,\n", "\tVPEXPANDW,\n\t\tVPEXTRB,\n\t\tVPEXTRD,\n\t\tVPEXTRQ,\n\t\tVPEXTRW,\n\t\tVPGATHERDD,\n\t\tVPGATHERDQ,\n\t\tVPGATHERQD,\n\t\tVPGATHERQQ,\n\t\tVPHADDBD,\n", "\tVPHADDBQ,\n\t\tVPHADDBW,\n\t\tVPHADDD,\n\t\tVPHADDDQ,\n\t\tVPHADDSW,\n\t\tVPHADDUBD,\n\t\tVPHADDUBQ,\n\t\tVPHADDUBW,\n\t\tVPHADDUDQ,\n\t\tVPHADDUWD,\n", "\tVPHADDUWQ,\n\t\tVPHADDW,\n\t\tVPHADDWD,\n\t\tVPHADDWQ,\n\t\tVPHMINPOSUW,\n\t\tVPHSUBBW,\n\t\tVPHSUBD,\n\t\tVPHSUBDQ,\n\t\tVPHSUBSW,\n\t\tVPHSUBW,\n", "\tVPHSUBWD,\n\t\tVPINSRB,\n\t\tVPINSRD,\n\t\tVPINSRQ,\n\t\tVPINSRW,\n\t\tVPLZCNTD,\n\t\tVPLZCNTQ,\n\t\tVPMACSDD,\n\t\tVPMACSDQH,\n\t\tVPMACSDQL,\n", "\tVPMACSSDD,\n\t\tVPMACSSDQH,\n\t\tVPMACSSDQL,\n\t\tVPMACSSWD,\n\t\tVPMACSSWW,\n\t\tVPMACSWD,\n\t\tVPMACSWW,\n\t\tVPMADCSSWD,\n\t\tVPMADCSWD,\n\t\tVPMADD231D,\n", "\tVPMADD233D,\n\t\tVPMADD52HUQ,\n\t\tVPMADD52LUQ,\n\t\tVPMADDUBSW,\n\t\tVPMADDWD,\n\t\tVPMASKMOVD,\n\t\tVPMASKMOVQ,\n\t\tVPMAXSB,\n\t\tVPMAXSD,\n\t\tVPMAXSQ,\n", "\tVPMAXSW,\n\t\tVPMAXUB,\n\t\tVPMAXUD,\n\t\tVPMAXUQ,\n\t\tVPMAXUW,\n\t\tVPMINSB,\n\t\tVPMINSD,\n\t\tVPMINSQ,\n\t\tVPMINSW,\n\t\tVPMINUB,\n", "\tVPMINUD,\n\t\tVPMINUQ,\n\t\tVPMINUW,\n\t\tVPMOVB2M,\n\t\tVPMOVD2M,\n\t\tVPMOVDB,\n\t\tVPMOVDW,\n\t\tVPMOVM2B,\n\t\tVPMOVM2D,\n\t\tVPMOVM2Q,\n", "\tVPMOVM2W,\n\t\tVPMOVMSKB,\n\t\tVPMOVQ2M,\n\t\tVPMOVQB,\n\t\tVPMOVQD,\n\t\tVPMOVQW,\n\t\tVPMOVSDB,\n\t\tVPMOVSDW,\n\t\tVPMOVSQB,\n\t\tVPMOVSQD,\n", "\tVPMOVSQW,\n\t\tVPMOVSWB,\n\t\tVPMOVSXBD,\n\t\tVPMOVSXBQ,\n\t\tVPMOVSXBW,\n\t\tVPMOVSXDQ,\n\t\tVPMOVSXWD,\n\t\tVPMOVSXWQ,\n\t\tVPMOVUSDB,\n\t\tVPMOVUSDW,\n", "\tVPMOVUSQB,\n\t\tVPMOVUSQD,\n\t\tVPMOVUSQW,\n\t\tVPMOVUSWB,\n\t\tVPMOVW2M,\n\t\tVPMOVWB,\n\t\tVPMOVZXBD,\n\t\tVPMOVZXBQ,\n\t\tVPMOVZXBW,\n\t\tVPMOVZXDQ,\n", "\tVPMOVZXWD,\n\t\tVPMOVZXWQ,\n\t\tVPMULDQ,\n\t\tVPMULHD,\n\t\tVPMULHRSW,\n\t\tVPMULHUD,\n\t\tVPMULHUW,\n\t\tVPMULHW,\n\t\tVPMULLD,\n\t\tVPMULLQ,\n", "\tVPMULLW,\n\t\tVPMULTISHIFTQB,\n\t\tVPMULUDQ,\n\t\tVPOPCNTB,\n\t\tVPOPCNTD,\n\t\tVPOPCNTQ,\n\t\tVPOPCNTW,\n\t\tVPOR,\n\t\tVPORD,\n\t\tVPORQ,\n", "\tVPPERM,\n\t\tVPREFETCH0,\n\t\tVPREFETCH1,\n\t\tVPREFETCH2,\n\t\tVPREFETCHE0,\n\t\tVPREFETCHE1,\n\t\tVPREFETCHE2,\n\t\tVPREFETCHENTA,\n\t\tVPREFETCHNTA,\n\t\tVPROLD,\n", "\tVPROLQ,\n\t\tVPROLVD,\n\t\tVPROLVQ,\n\t\tVPRORD,\n\t\tVPRORQ,\n\t\tVPRORVD,\n\t\tVPRORVQ,\n\t\tVPROTB,\n\t\tVPROTD,\n\t\tVPROTQ,\n", "\tVPROTW,\n\t\tVPSADBW,\n\t\tVPSBBD,\n\t\tVPSBBRD,\n\t\tVPSCATTERDD,\n\t\tVPSCATTERDQ,\n\t\tVPSCATTERQD,\n\t\tVPSCATTERQQ,\n\t\tVPSHAB,\n\t\tVPSHAD,\n", "\tVPSHAQ,\n\t\tVPSHAW,\n\t\tVPSHLB,\n\t\tVPSHLD,\n\t\tVPSHLDD,\n\t\tVPSHLDQ,\n\t\tVPSHLDVD,\n\t\tVPSHLDVQ,\n\t\tVPSHLDVW,\n\t\tVPSHLDW,\n", "\tVPSHLQ,\n\t\tVPSHLW,\n\t\tVPSHRDD,\n\t\tVPSHRDQ,\n\t\tVPSHRDVD,\n\t\tVPSHRDVQ,\n\t\tVPSHRDVW,\n\t\tVPSHRDW,\n\t\tVPSHUFB,\n\t\tVPSHUFBITQMB,\n", "\tVPSHUFD,\n\t\tVPSHUFHW,\n\t\tVPSHUFLW,\n\t\tVPSIGNB,\n\t\tVPSIGND,\n\t\tVPSIGNW,\n\t\tVPSLLD,\n\t\tVPSLLDQ,\n\t\tVPSLLQ,\n\t\tVPSLLVD,\n", "\tVPSLLVQ,\n\t\tVPSLLVW,\n\t\tVPSLLW,\n\t\tVPSRAD,\n\t\tVPSRAQ,\n\t\tVPSRAVD,\n\t\tVPSRAVQ,\n\t\tVPSRAVW,\n\t\tVPSRAW,\n\t\tVPSRLD,\n", "\tVPSRLDQ,\n\t\tVPSRLQ,\n\t\tVPSRLVD,\n\t\tVPSRLVQ,\n\t\tVPSRLVW,\n\t\tVPSRLW,\n\t\tVPSUBB,\n\t\tVPSUBD,\n\t\tVPSUBQ,\n\t\tVPSUBRD,\n", "\tVPSUBRSETBD,\n\t\tVPSUBSB,\n\t\tVPSUBSETBD,\n\t\tVPSUBSW,\n\t\tVPSUBUSB,\n\t\tVPSUBUSW,\n\t\tVPSUBW,\n\t\tVPTERNLOGD,\n\t\tVPTERNLOGQ,\n\t\tVPTEST,\n", "\tVPTESTMB,\n\t\tVPTESTMD,\n\t\tVPTESTMQ,\n\t\tVPTESTMW,\n\t\tVPTESTNMB,\n\t\tVPTESTNMD,\n\t\tVPTESTNMQ,\n\t\tVPTESTNMW,\n\t\tVPUNPCKHBW,\n\t\tVPUNPCKHDQ,\n", "\tVPUNPCKHQDQ,\n\t\tVPUNPCKHWD,\n\t\tVPUNPCKLBW,\n\t\tVPUNPCKLDQ,\n\t\tVPUNPCKLQDQ,\n\t\tVPUNPCKLWD,\n\t\tVPXOR,\n\t\tVPXORD,\n\t\tVPXORQ,\n\t\tVRANGEPD,\n", "\tVRANGEPS,\n\t\tVRANGESD,\n\t\tVRANGESS,\n\t\tVRCP14PD,\n\t\tVRCP14PS,\n\t\tVRCP14SD,\n\t\tVRCP14SS,\n\t\tVRCP23PS,\n\t\tVRCP28PD,\n\t\tVRCP28PS,\n", "\tVRCP28SD,\n\t\tVRCP28SS,\n\t\tVRCPPH,\n\t\tVRCPPS,\n\t\tVRCPSH,\n\t\tVRCPSS,\n\t\tVREDUCEPD,\n\t\tVREDUCEPH,\n\t\tVREDUCEPS,\n\t\tVREDUCESD,\n", "\tVREDUCESH,\n\t\tVREDUCESS,\n\t\tVRNDFXPNTPD,\n\t\tVRNDFXPNTPS,\n\t\tVRNDSCALEPD,\n\t\tVRNDSCALEPH,\n\t\tVRNDSCALEPS,\n\t\tVRNDSCALESD,\n\t\tVRNDSCALESH,\n\t\tVRNDSCALESS,\n", "\tVROUNDPD,\n\t\tVROUNDPS,\n\t\tVROUNDSD,\n\t\tVROUNDSS,\n\t\tVRSQRT14PD,\n\t\tVRSQRT14PS,\n\t\tVRSQRT14SD,\n\t\tVRSQRT14SS,\n\t\tVRSQRT23PS,\n\t\tVRSQRT28PD,\n", "\tVRSQRT28PS,\n\t\tVRSQRT28SD,\n\t\tVRSQRT28SS,\n\t\tVRSQRTPH,\n\t\tVRSQRTPS,\n\t\tVRSQRTSH,\n\t\tVRSQRTSS,\n\t\tVSCALEFPD,\n\t\tVSCALEFPH,\n\t\tVSCALEFPS,\n", "\tVSCALEFSD,\n\t\tVSCALEFSH,\n\t\tVSCALEFSS,\n\t\tVSCALEPS,\n\t\tVSCATTERDPD,\n\t\tVSCATTERDPS,\n\t\tVSCATTERPF0DPD,\n\t\tVSCATTERPF0DPS,\n\t\tVSCATTERPF0HINTDPD,\n\t\tVSCATTERPF0HINTDPS,\n", "\tVSCATTERPF0QPD,\n\t\tVSCATTERPF0QPS,\n\t\tVSCATTERPF1DPD,\n\t\tVSCATTERPF1DPS,\n\t\tVSCATTERPF1QPD,\n\t\tVSCATTERPF1QPS,\n\t\tVSCATTERQPD,\n\t\tVSCATTERQPS,\n\t\tVSHUFF32X4,\n\t\tVSHUFF64X2,\n", "\tVSHUFI32X4,\n\t\tVSHUFI64X2,\n\t\tVSHUFPD,\n\t\tVSHUFPS,\n\t\tVSQRTPD,\n\t\tVSQRTPH,\n\t\tVSQRTPS,\n\t\tVSQRTSD,\n\t\tVSQRTSH,\n\t\tVSQRTSS,\n", "\tVSTMXCSR,\n\t\tVSUBPD,\n\t\tVSUBPH,\n\t\tVSUBPS,\n\t\tVSUBRPD,\n\t\tVSUBRPS,\n\t\tVSUBSD,\n\t\tVSUBSH,\n\t\tVSUBSS,\n\t\tVTESTPD,\n", "\tVTESTPS,\n\t\tVUCOMISD,\n\t\tVUCOMISH,\n\t\tVUCOMISS,\n\t\tVUNPCKHPD,\n\t\tVUNPCKHPS,\n\t\tVUNPCKLPD,\n\t\tVUNPCKLPS,\n\t\tVXORPD,\n\t\tVXORPS,\n", "\tVZEROALL,\n\t\tVZEROUPPER,\n\t\tWBINVD,\n\t\tWRFSBASE,\n\t\tWRGSBASE,\n\t\tWRMSR,\n\t\tWRMSRLIST,\n\t\tWRMSRNS,\n\t\tWRPKRU,\n\t\tWRSSD,\n", "\tWRSSQ,\n\t\tWRUSSD,\n\t\tWRUSSQ,\n\t\tXABORT,\n\t\tXADD,\n\t\tXBEGIN,\n\t\tXCHG,\n\t\tXCRYPT_CBC,\n\t\tXCRYPT_CFB,\n\t\tXCRYPT_CTR,\n", "\tXCRYPT_ECB,\n\t\tXCRYPT_OFB,\n\t\tXEND,\n\t\tXGETBV,\n\t\tXLAT,\n\t\tXOR,\n\t\tXORPD,\n\t\tXORPS,\n\t\tXRESLDTRK,\n\t\tXRSTOR,\n", "\tXRSTOR64,\n\t\tXRSTORS,\n\t\tXRSTORS64,\n\t\tXSAVE,\n\t\tXSAVE64,\n\t\tXSAVEC,\n\t\tXSAVEC64,\n\t\tXSAVEOPT,\n\t\tXSAVEOPT64,\n\t\tXSAVES,\n", "\tXSAVES64,\n\t\tXSETBV,\n\t\tXSHA1,\n\t\tXSHA256,\n\t\tXSTORE,\n\t\tXSUSLDTRK,\n\t\tXTEST,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n", "\t// MAX_VALUE = XTEST,\n\t}\n\texport enum OpcodeMap {\n\t\tMAP_DEFAULT,\n\t\tMAP_0F,\n\t\tMAP_0F38,\n\t\tMAP_0F3A,\n\t\tMAP_MAP4, // not used\n\t\tMAP_MAP5,\n\t\tMAP_MAP6,\n", "\tMAP_MAP7, // not used\n\t\tMAP_0F0F,\n\t\tMAP_XOP8,\n\t\tMAP_XOP9,\n\t\tMAP_XOPA,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\tMAP_, // MAX_VALUE = MAP_XOPA,\n\t}\n", "export namespace InsnAttribute {\n\t\t/**\n\t\t * The instruction has the `ModRM` byte.\n\t\t */\n\t\texport const HAS_MODRM = 1n << 0n;\n\t\t/**\n\t\t * The instruction has the `SIB` byte.\n\t\t */\n\t\texport const HAS_SIB = 1n << 1n;\n\t\t/**\n", "\t * The instruction has the `REX` prefix.\n\t\t */\n\t\texport const HAS_REX = 1n << 2n;\n\t\t/**\n\t\t * The instruction has the `XOP` prefix.\n\t\t */\n\t\texport const HAS_XOP = 1n << 3n;\n\t\t/**\n\t\t * The instruction has the `VEX` prefix.\n\t\t */\n", "\texport const HAS_VEX = 1n << 4n;\n\t\t/**\n\t\t * The instruction has the `EVEX` prefix.\n\t\t */\n\t\texport const HAS_EVEX = 1n << 5n;\n\t\t/**\n\t\t * The instruction has the `MVEX` prefix.\n\t\t */\n\t\texport const HAS_MVEX = 1n << 6n;\n\t\t/**\n", "\t * The instruction has one or more operands with position-relative offsets.\n\t\t */\n\t\texport const IS_RELATIVE = 1n << 7n;\n\t\t/**\n\t\t * The instruction is privileged.\n\t\t *\n\t\t * Privileged instructions are any instructions that require a current ring level below 3.\n\t\t */\n\t\texport const IS_PRIVILEGED = 1n << 8n;\n\t\t/**\n", "\t * The instruction accesses one or more CPU-flags.\n\t\t */\n\t\texport const CPUFLAG_ACCESS = 1n << 9n;\n\t\t/**\n\t\t * The instruction may conditionally read the general CPU state.\n\t\t */\n\t\texport const CPU_STATE_CR = 1n << 10n;\n\t\t/**\n\t\t * The instruction may conditionally write the general CPU state.\n\t\t */\n", "\texport const CPU_STATE_CW = 1n << 11n;\n\t\t/**\n\t\t * The instruction may conditionally read the FPU state (X87, MMX).\n\t\t */\n\t\texport const FPU_STATE_CR = 1n << 12n;\n\t\t/**\n\t\t * The instruction may conditionally write the FPU state (X87, MMX).\n\t\t */\n\t\texport const FPU_STATE_CW = 1n << 13n;\n\t\t/**\n", "\t * The instruction may conditionally read the XMM state (AVX, AVX2, AVX-512).\n\t\t */\n\t\texport const XMM_STATE_CR = 1n << 14n;\n\t\t/**\n\t\t * The instruction may conditionally write the XMM state (AVX, AVX2, AVX-512).\n\t\t */\n\t\texport const XMM_STATE_CW = 1n << 15n;\n\t\t/**\n\t\t * The instruction accepts the `LOCK` prefix (`0xF0`).\n\t\t */\n", "\texport const ACCEPTS_LOCK = 1n << 16n;\n\t\t/**\n\t\t * The instruction accepts the `REP` prefix (`0xF3`).\n\t\t */\n\t\texport const ACCEPTS_REP = 1n << 17n;\n\t\t/**\n\t\t * The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).\n\t\t */\n\t\texport const ACCEPTS_REPE = 1n << 18n;\n\t\t/**\n", "\t * The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).\n\t\t */\n\t\texport const ACCEPTS_REPZ = ACCEPTS_REPE;\n\t\t/**\n\t\t * The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t\t */\n\t\texport const ACCEPTS_REPNE = 1n << 19n;\n\t\t/**\n\t\t * The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t\t */\n", "\texport const ACCEPTS_REPNZ = ACCEPTS_REPNE;\n\t\t/**\n\t\t * The instruction accepts the `BND` prefix (`0xF2`).\n\t\t */\n\t\texport const ACCEPTS_BND = 1n << 20n;\n\t\t/**\n\t\t * The instruction accepts the `XACQUIRE` prefix (`0xF2`).\n\t\t */\n\t\texport const ACCEPTS_XACQUIRE = 1n << 21n;\n\t\t/**\n", "\t * The instruction accepts the `XRELEASE` prefix (`0xF3`).\n\t\t */\n\t\texport const ACCEPTS_XRELEASE = 1n << 22n;\n\t\t/**\n\t\t * The instruction accepts the `XACQUIRE`/`XRELEASE` prefixes (`0xF2`, `0xF3`)\n\t\t * without the `LOCK` prefix (`0x0F`).\n\t\t */\n\t\texport const ACCEPTS_HLE_WITHOUT_LOCK = 1n << 23n;\n\t\t/**\n\t\t * The instruction accepts branch hints (0x2E, 0x3E).\n", "\t */\n\t\texport const ACCEPTS_BRANCH_HINTS = 1n << 24n;\n\t\t/**\n\t\t * The instruction accepts the `CET` `no-track` prefix (`0x3E`).\n\t\t */\n\t\texport const ACCEPTS_NOTRACK = 1n << 25n;\n\t\t/**\n\t\t * The instruction accepts segment prefixes (`0x2E`, `0x36`, `0x3E`, `0x26`,\n\t\t * `0x64`, `0x65`).\n\t\t */\n", "\texport const ACCEPTS_SEGMENT = 1n << 26n;\n\t\t/**\n\t\t * The instruction has the `LOCK` prefix (`0xF0`).\n\t\t */\n\t\texport const HAS_LOCK = 1n << 27n;\n\t\t/**\n\t\t * The instruction has the `REP` prefix (`0xF3`).\n\t\t */\n\t\texport const HAS_REP = 1n << 28n;\n\t\t/**\n", "\t * The instruction has the `REPE`/`REPZ` prefix (`0xF3`).\n\t\t */\n\t\texport const HAS_REPE = 1n << 29n;\n\t\t/**\n\t\t * The instruction has the `REPE`/`REPZ` prefix (`0xF3`).\n\t\t */\n\t\texport const HAS_REPZ = HAS_REPE;\n\t\t/**\n\t\t * The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t\t */\n", "\texport const HAS_REPNE = 1n << 30n;\n\t\t/**\n\t\t * The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t\t */\n\t\texport const HAS_REPNZ = HAS_REPNE;\n\t\t/**\n\t\t * The instruction has the `BND` prefix (`0xF2`).\n\t\t */\n\t\texport const HAS_BND = 1n << 31n;\n\t\t/**\n", "\t * The instruction has the `XACQUIRE` prefix (`0xF2`).\n\t\t */\n\t\texport const HAS_XACQUIRE = 1n << 32n;\n\t\t/**\n\t\t * The instruction has the `XRELEASE` prefix (`0xF3`).\n\t\t */\n\t\texport const HAS_XRELEASE = 1n << 33n;\n\t\t/**\n\t\t * The instruction has the branch-not-taken hint (`0x2E`).\n\t\t */\n", "\texport const HAS_BRANCH_NOT_TAKEN = 1n << 34n;\n\t\t/**\n\t\t * The instruction has the branch-taken hint (`0x3E`).\n\t\t */\n\t\texport const HAS_BRANCH_TAKEN = 1n << 35n;\n\t\t/**\n\t\t * The instruction has the `CET` `no-track` prefix (`0x3E`).\n\t\t */\n\t\texport const HAS_NOTRACK = 1n << 36n;\n\t\t/**\n", "\t * The instruction has the `CS` segment modifier (`0x2E`).\n\t\t */\n\t\texport const HAS_SEGMENT_CS = 1n << 37n;\n\t\t/**\n\t\t * The instruction has the `SS` segment modifier (`0x36`).\n\t\t */\n\t\texport const HAS_SEGMENT_SS = 1n << 38n;\n\t\t/**\n\t\t * The instruction has the `DS` segment modifier (`0x3E`).\n\t\t */\n", "\texport const HAS_SEGMENT_DS = 1n << 39n;\n\t\t/**\n\t\t * The instruction has the `ES` segment modifier (`0x26`).\n\t\t */\n\t\texport const HAS_SEGMENT_ES = 1n << 40n;\n\t\t/**\n\t\t * The instruction has the `FS` segment modifier (`0x64`).\n\t\t */\n\t\texport const HAS_SEGMENT_FS = 1n << 41n;\n\t\t/**\n", "\t * The instruction has the `GS` segment modifier (`0x65`).\n\t\t */\n\t\texport const HAS_SEGMENT_GS = 1n << 42n;\n\t\t/**\n\t\t * The instruction has a segment modifier.\n\t\t */\n\t\texport const HAS_SEGMENT =\n\t\t\tHAS_SEGMENT_CS | HAS_SEGMENT_SS | HAS_SEGMENT_DS | HAS_SEGMENT_ES | HAS_SEGMENT_FS | HAS_SEGMENT_GS;\n\t\t/**\n\t\t * The instruction has the operand-size override prefix (`0x66`).\n", "\t */\n\t\texport const HAS_OPERANDSIZE = 1n << 43n; // TODO: rename\n\t\t/**\n\t\t * The instruction has the address-size override prefix (`0x67`).\n\t\t */\n\t\texport const HAS_ADDRESSSIZE = 1n << 44n; // TODO: rename\n\t\t/**\n\t\t * The instruction has the `EVEX.b` bit set.\n\t\t *\n\t\t * This attribute is mainly used by the encoder.\n", "\t */\n\t\texport const HAS_EVEX_B = 1n << 45n; // TODO: rename\n\t}\n\texport enum ISASet {\n\t\tINVALID,\n\t\tADOX_ADCX,\n\t\tAES,\n\t\tAMD,\n\t\tAMD3DNOW,\n\t\tAMD_INVLPGB,\n", "\tAMX_BF16,\n\t\tAMX_FP16,\n\t\tAMX_INT8,\n\t\tAMX_TILE,\n\t\tAVX,\n\t\tAVX2,\n\t\tAVX2GATHER,\n\t\tAVX512BW_128,\n\t\tAVX512BW_128N,\n\t\tAVX512BW_256,\n", "\tAVX512BW_512,\n\t\tAVX512BW_KOP,\n\t\tAVX512CD_128,\n\t\tAVX512CD_256,\n\t\tAVX512CD_512,\n\t\tAVX512DQ_128,\n\t\tAVX512DQ_128N,\n\t\tAVX512DQ_256,\n\t\tAVX512DQ_512,\n\t\tAVX512DQ_KOP,\n", "\tAVX512DQ_SCALAR,\n\t\tAVX512ER_512,\n\t\tAVX512ER_SCALAR,\n\t\tAVX512F_128,\n\t\tAVX512F_128N,\n\t\tAVX512F_256,\n\t\tAVX512F_512,\n\t\tAVX512F_KOP,\n\t\tAVX512F_SCALAR,\n\t\tAVX512PF_512,\n", "\tAVX512_4FMAPS_512,\n\t\tAVX512_4FMAPS_SCALAR,\n\t\tAVX512_4VNNIW_512,\n\t\tAVX512_BF16_128,\n\t\tAVX512_BF16_256,\n\t\tAVX512_BF16_512,\n\t\tAVX512_BITALG_128,\n\t\tAVX512_BITALG_256,\n\t\tAVX512_BITALG_512,\n\t\tAVX512_FP16_128,\n", "\tAVX512_FP16_128N,\n\t\tAVX512_FP16_256,\n\t\tAVX512_FP16_512,\n\t\tAVX512_FP16_SCALAR,\n\t\tAVX512_GFNI_128,\n\t\tAVX512_GFNI_256,\n\t\tAVX512_GFNI_512,\n\t\tAVX512_IFMA_128,\n\t\tAVX512_IFMA_256,\n\t\tAVX512_IFMA_512,\n", "\tAVX512_VAES_128,\n\t\tAVX512_VAES_256,\n\t\tAVX512_VAES_512,\n\t\tAVX512_VBMI2_128,\n\t\tAVX512_VBMI2_256,\n\t\tAVX512_VBMI2_512,\n\t\tAVX512_VBMI_128,\n\t\tAVX512_VBMI_256,\n\t\tAVX512_VBMI_512,\n\t\tAVX512_VNNI_128,\n", "\tAVX512_VNNI_256,\n\t\tAVX512_VNNI_512,\n\t\tAVX512_VP2INTERSECT_128,\n\t\tAVX512_VP2INTERSECT_256,\n\t\tAVX512_VP2INTERSECT_512,\n\t\tAVX512_VPCLMULQDQ_128,\n\t\tAVX512_VPCLMULQDQ_256,\n\t\tAVX512_VPCLMULQDQ_512,\n\t\tAVX512_VPOPCNTDQ_128,\n\t\tAVX512_VPOPCNTDQ_256,\n", "\tAVX512_VPOPCNTDQ_512,\n\t\tAVXAES,\n\t\tAVX_GFNI,\n\t\tAVX_IFMA,\n\t\tAVX_NE_CONVERT,\n\t\tAVX_VNNI,\n\t\tAVX_VNNI_INT8,\n\t\tBMI1,\n\t\tBMI2,\n\t\tCET,\n", "\tCLDEMOTE,\n\t\tCLFLUSHOPT,\n\t\tCLFSH,\n\t\tCLWB,\n\t\tCLZERO,\n\t\tCMOV,\n\t\tCMPXCHG16B,\n\t\tENQCMD,\n\t\tF16C,\n\t\tFAT_NOP,\n", "\tFCMOV,\n\t\tFCOMI,\n\t\tFMA,\n\t\tFMA4,\n\t\tFXSAVE,\n\t\tFXSAVE64,\n\t\tGFNI,\n\t\tHRESET,\n\t\tI186,\n\t\tI286PROTECTED,\n", "\tI286REAL,\n\t\tI386,\n\t\tI486,\n\t\tI486REAL,\n\t\tI86,\n\t\tICACHE_PREFETCH,\n\t\tINVPCID,\n\t\tKEYLOCKER,\n\t\tKEYLOCKER_WIDE,\n\t\tKNCE,\n", "\tKNCJKBR,\n\t\tKNCSTREAM,\n\t\tKNCV,\n\t\tKNC_MISC,\n\t\tKNC_PF_HINT,\n\t\tLAHF,\n\t\tLONGMODE,\n\t\tLWP,\n\t\tLZCNT,\n\t\tMCOMMIT,\n", "\tMONITOR,\n\t\tMONITORX,\n\t\tMOVBE,\n\t\tMOVDIR,\n\t\tMPX,\n\t\tMSRLIST,\n\t\tPADLOCK_ACE,\n\t\tPADLOCK_PHE,\n\t\tPADLOCK_PMM,\n\t\tPADLOCK_RNG,\n", "\tPAUSE,\n\t\tPCLMULQDQ,\n\t\tPCOMMIT,\n\t\tPCONFIG,\n\t\tPENTIUMMMX,\n\t\tPENTIUMREAL,\n\t\tPKU,\n\t\tPOPCNT,\n\t\tPPRO,\n\t\tPREFETCHWT1,\n", "\tPREFETCH_NOP,\n\t\tPT,\n\t\tRAO_INT,\n\t\tRDPID,\n\t\tRDPMC,\n\t\tRDPRU,\n\t\tRDRAND,\n\t\tRDSEED,\n\t\tRDTSCP,\n\t\tRDWRFSGS,\n", "\tRTM,\n\t\tSERIALIZE,\n\t\tSGX,\n\t\tSGX_ENCLV,\n\t\tSHA,\n\t\tSMAP,\n\t\tSMX,\n\t\tSNP,\n\t\tSSE,\n\t\tSSE2,\n", "\tSSE2MMX,\n\t\tSSE3,\n\t\tSSE3X87,\n\t\tSSE4,\n\t\tSSE42,\n\t\tSSE4A,\n\t\tSSEMXCSR,\n\t\tSSE_PREFETCH,\n\t\tSSSE3,\n\t\tSSSE3MMX,\n", "\tSVM,\n\t\tTBM,\n\t\tTDX,\n\t\tTSX_LDTRK,\n\t\tUINTR,\n\t\tVAES,\n\t\tVMFUNC,\n\t\tVPCLMULQDQ,\n\t\tVTX,\n\t\tWAITPKG,\n", "\tWRMSRNS,\n\t\tX87,\n\t\tXOP,\n\t\tXSAVE,\n\t\tXSAVEC,\n\t\tXSAVEOPT,\n\t\tXSAVES,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n", "\t// MAX_VALUE = XSAVES,\n\t}\n\texport enum ISAExt {\n\t\tINVALID,\n\t\tADOX_ADCX,\n\t\tAES,\n\t\tAMD3DNOW,\n\t\tAMD3DNOW_PREFETCH,\n\t\tAMD_INVLPGB,\n\t\tAMX_BF16,\n", "\tAMX_FP16,\n\t\tAMX_INT8,\n\t\tAMX_TILE,\n\t\tAVX,\n\t\tAVX2,\n\t\tAVX2GATHER,\n\t\tAVX512EVEX,\n\t\tAVX512VEX,\n\t\tAVXAES,\n\t\tAVX_IFMA,\n", "\tAVX_NE_CONVERT,\n\t\tAVX_VNNI,\n\t\tAVX_VNNI_INT8,\n\t\tBASE,\n\t\tBMI1,\n\t\tBMI2,\n\t\tCET,\n\t\tCLDEMOTE,\n\t\tCLFLUSHOPT,\n\t\tCLFSH,\n", "\tCLWB,\n\t\tCLZERO,\n\t\tENQCMD,\n\t\tF16C,\n\t\tFMA,\n\t\tFMA4,\n\t\tGFNI,\n\t\tHRESET,\n\t\tICACHE_PREFETCH,\n\t\tINVPCID,\n", "\tKEYLOCKER,\n\t\tKEYLOCKER_WIDE,\n\t\tKNC,\n\t\tKNCE,\n\t\tKNCV,\n\t\tLONGMODE,\n\t\tLZCNT,\n\t\tMCOMMIT,\n\t\tMMX,\n\t\tMONITOR,\n", "\tMONITORX,\n\t\tMOVBE,\n\t\tMOVDIR,\n\t\tMPX,\n\t\tMSRLIST,\n\t\tPADLOCK,\n\t\tPAUSE,\n\t\tPCLMULQDQ,\n\t\tPCOMMIT,\n\t\tPCONFIG,\n", "\tPKU,\n\t\tPREFETCHWT1,\n\t\tPT,\n\t\tRAO_INT,\n\t\tRDPID,\n\t\tRDPRU,\n\t\tRDRAND,\n\t\tRDSEED,\n\t\tRDTSCP,\n\t\tRDWRFSGS,\n", "\tRTM,\n\t\tSERIALIZE,\n\t\tSGX,\n\t\tSGX_ENCLV,\n\t\tSHA,\n\t\tSMAP,\n\t\tSMX,\n\t\tSNP,\n\t\tSSE,\n\t\tSSE2,\n", "\tSSE3,\n\t\tSSE4,\n\t\tSSE4A,\n\t\tSSSE3,\n\t\tSVM,\n\t\tTBM,\n\t\tTDX,\n\t\tTSX_LDTRK,\n\t\tUINTR,\n\t\tVAES,\n", "\tVMFUNC,\n\t\tVPCLMULQDQ,\n\t\tVTX,\n\t\tWAITPKG,\n\t\tWRMSRNS,\n\t\tX87,\n\t\tXOP,\n\t\tXSAVE,\n\t\tXSAVEC,\n\t\tXSAVEOPT,\n", "\tXSAVES,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = XSAVES,\n\t}\n\texport enum InsnCategory {\n\t\tINVALID,\n\t\tADOX_ADCX,\n\t\tAES,\n", "\tAMD3DNOW,\n\t\tAMX_TILE,\n\t\tAVX,\n\t\tAVX2,\n\t\tAVX2GATHER,\n\t\tAVX512,\n\t\tAVX512_4FMAPS,\n\t\tAVX512_4VNNIW,\n\t\tAVX512_BITALG,\n\t\tAVX512_VBMI,\n", "\tAVX512_VP2INTERSECT,\n\t\tAVX_IFMA,\n\t\tBINARY,\n\t\tBITBYTE,\n\t\tBLEND,\n\t\tBMI1,\n\t\tBMI2,\n\t\tBROADCAST,\n\t\tCALL,\n\t\tCET,\n", "\tCLDEMOTE,\n\t\tCLFLUSHOPT,\n\t\tCLWB,\n\t\tCLZERO,\n\t\tCMOV,\n\t\tCOMPRESS,\n\t\tCOND_BR,\n\t\tCONFLICT,\n\t\tCONVERT,\n\t\tDATAXFER,\n", "\tDECIMAL,\n\t\tENQCMD,\n\t\tEXPAND,\n\t\tFCMOV,\n\t\tFLAGOP,\n\t\tFMA4,\n\t\tFP16,\n\t\tGATHER,\n\t\tGFNI,\n\t\tHRESET,\n", "\tIFMA,\n\t\tINTERRUPT,\n\t\tIO,\n\t\tIOSTRINGOP,\n\t\tKEYLOCKER,\n\t\tKEYLOCKER_WIDE,\n\t\tKMASK,\n\t\tKNC,\n\t\tKNCMASK,\n\t\tKNCSCALAR,\n", "\tLEGACY,\n\t\tLOGICAL,\n\t\tLOGICAL_FP,\n\t\tLZCNT,\n\t\tMISC,\n\t\tMMX,\n\t\tMOVDIR,\n\t\tMPX,\n\t\tMSRLIST,\n\t\tNOP,\n", "\tPADLOCK,\n\t\tPCLMULQDQ,\n\t\tPCOMMIT,\n\t\tPCONFIG,\n\t\tPKU,\n\t\tPOP,\n\t\tPREFETCH,\n\t\tPREFETCHWT1,\n\t\tPT,\n\t\tPUSH,\n", "\tRDPID,\n\t\tRDPRU,\n\t\tRDRAND,\n\t\tRDSEED,\n\t\tRDWRFSGS,\n\t\tRET,\n\t\tROTATE,\n\t\tSCATTER,\n\t\tSEGOP,\n\t\tSEMAPHORE,\n", "\tSERIALIZE,\n\t\tSETCC,\n\t\tSGX,\n\t\tSHA,\n\t\tSHIFT,\n\t\tSMAP,\n\t\tSSE,\n\t\tSTRINGOP,\n\t\tSTTNI,\n\t\tSYSCALL,\n", "\tSYSRET,\n\t\tSYSTEM,\n\t\tTBM,\n\t\tTSX_LDTRK,\n\t\tUFMA,\n\t\tUINTR,\n\t\tUNCOND_BR,\n\t\tVAES,\n\t\tVBMI2,\n\t\tVEX,\n", "\tVFMA,\n\t\tVPCLMULQDQ,\n\t\tVTX,\n\t\tWAITPKG,\n\t\tWIDENOP,\n\t\tWRMSRNS,\n\t\tX87_ALU,\n\t\tXOP,\n\t\tXSAVE,\n\t\tXSAVEOPT,\n", "\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = XSAVEOPT,\n\t}\n\texport enum FormatterStyle {\n\t\t/**\n\t\t * Generates `AT&T`-style disassembly.\n\t\t */\n\t\tATT,\n", "\t/**\n\t\t * Generates `Intel`-style disassembly.\n\t\t */\n\t\tINTEL,\n\t\t/**\n\t\t * Generates `MASM`-style disassembly that is directly accepted as input for\n\t\t * the `MASM` assembler.\n\t\t *\n\t\t * The runtime-address is ignored in this mode.\n\t\t */\n", "\tINTEL_MASM,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = INTEL_MASM,\n\t}\n\t/**\n\t * Enum selecting a property of the formatter.\n\t */\n\texport enum FormatterProperty {\n", "\t/* ---------------------------------------------------------------------------------------- */\n\t\t/* General                                                                                  */\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the printing of effective operand-size suffixes (`AT&T`) or operand-sizes\n\t\t * of memory operands (`INTEL`).\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the size, or `ZYAN_FALSE`\n\t\t * to only print it if needed.\n\t\t */\n", "\tFORCE_SIZE,\n\t\t/**\n\t\t * Controls the printing of segment prefixes.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the segment register of\n\t\t * memory-operands or `ZYAN_FALSE` to omit implicit `DS`/`SS` segments.\n\t\t */\n\t\tFORCE_SEGMENT,\n\t\t/**\n\t\t * Controls the printing of the scale-factor component for memory operands.\n", "\t *\n\t\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the scale-factor component\n\t\t * of memory operands or `ZYAN_FALSE` to omit the scale factor for values of `1`.\n\t\t */\n\t\tFORCE_SCALE_ONE,\n\t\t/**\n\t\t * Controls the printing of branch addresses.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to force the formatter to always print relative branch addresses\n\t\t * or `ZYAN_FALSE` to use absolute addresses, if a runtime-address different to\n", "\t * `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.\n\t\t */\n\t\tFORCE_RELATIVE_BRANCHES,\n\t\t/**\n\t\t * Controls the printing of `EIP`/`RIP`-relative addresses.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to force the formatter to always print relative addresses for\n\t\t * `EIP`/`RIP`-relative operands or `ZYAN_FALSE` to use absolute addresses, if a runtime-\n\t\t * address different to `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.\n\t\t */\n", "\tFORCE_RELATIVE_RIPREL,\n\t\t/**\n\t\t * Controls the printing of branch-instructions sizes.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to print the size (`short`, `near`) of branch\n\t\t * instructions or `ZYAN_FALSE` to hide it.\n\t\t *\n\t\t * Note that the `far`/`l` modifier is always printed.\n\t\t */\n\t\tPRINT_BRANCH_SIZE,\n", "\t/**\n\t\t * Controls the printing of instruction prefixes.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to print all instruction-prefixes (even ignored or duplicate\n\t\t * ones) or `ZYAN_FALSE` to only print prefixes that are effectively used by the instruction.\n\t\t */\n\t\tDETAILED_PREFIXES,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/* Numeric values                                                                           */\n\t\t/* ---------------------------------------------------------------------------------------- */\n", "\t/**\n\t\t * Controls the base of address values.\n\t\t */\n\t\tADDR_BASE,\n\t\t/**\n\t\t * Controls the signedness of relative addresses. Absolute addresses are\n\t\t * always unsigned.\n\t\t */\n\t\tADDR_SIGNEDNESS,\n\t\t/**\n", "\t * Controls the padding of absolute address values.\n\t\t *\n\t\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t\t * addresses to the current stack width (hexadecimal only), or any other integer value for\n\t\t * custom padding.\n\t\t */\n\t\tADDR_PADDING_ABSOLUTE,\n\t\t/**\n\t\t * Controls the padding of relative address values.\n\t\t *\n", "\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t\t * addresses to the current stack width (hexadecimal only), or any other integer value for\n\t\t * custom padding.\n\t\t */\n\t\tADDR_PADDING_RELATIVE,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the base of displacement values.\n\t\t */\n\t\tDISP_BASE,\n", "\t/**\n\t\t * Controls the signedness of displacement values.\n\t\t */\n\t\tDISP_SIGNEDNESS,\n\t\t/**\n\t\t * Controls the padding of displacement values.\n\t\t *\n\t\t * Pass `DISABLED` to disable padding, or any other integer value for custom\n\t\t * padding.\n\t\t */\n", "\tDISP_PADDING,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the base of immediate values.\n\t\t */\n\t\tIMM_BASE,\n\t\t/**\n\t\t * Controls the signedness of immediate values.\n\t\t *\n\t\t * Pass `AUTO` to automatically choose the most suitable mode based on the\n", "\t * operands `ZydisDecodedOperand.imm.is_signed` attribute.\n\t\t */\n\t\tIMM_SIGNEDNESS,\n\t\t/**\n\t\t * Controls the padding of immediate values.\n\t\t *\n\t\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t\t * immediates to the operand-width (hexadecimal only), or any other integer value for custom\n\t\t * padding.\n\t\t */\n", "\tIMM_PADDING,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/* Text formatting                                                                          */\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the letter-case for prefixes.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t\t */\n\t\tUPPERCASE_PREFIXES,\n", "\t/**\n\t\t * Controls the letter-case for the mnemonic.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t\t */\n\t\tUPPERCASE_MNEMONIC,\n\t\t/**\n\t\t * Controls the letter-case for registers.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n", "\t */\n\t\tUPPERCASE_REGISTERS,\n\t\t/**\n\t\t * Controls the letter-case for typecasts.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t\t */\n\t\tUPPERCASE_TYPECASTS,\n\t\t/**\n\t\t * Controls the letter-case for decorators.\n", "\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t\t */\n\t\tUPPERCASE_DECORATORS,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/* Number formatting                                                                        */\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the prefix for decimal values.\n\t\t *\n", "\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t\t * to set a custom prefix, or `ZYAN_NULL` to disable it.\n\t\t *\n\t\t * The string is deep-copied into an internal buffer.\n\t\t */\n\t\tDEC_PREFIX,\n\t\t/**\n\t\t * Controls the suffix for decimal values.\n\t\t *\n\t\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n", "\t * to set a custom suffix, or `ZYAN_NULL` to disable it.\n\t\t *\n\t\t * The string is deep-copied into an internal buffer.\n\t\t */\n\t\tDEC_SUFFIX,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Controls the letter-case of hexadecimal values.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` as value to format in uppercase and `ZYAN_FALSE` to format in lowercase.\n", "\t *\n\t\t * The default value is `ZYAN_TRUE`.\n\t\t */\n\t\tHEX_UPPERCASE,\n\t\t/**\n\t\t * Controls whether to prepend hexadecimal values with a leading zero if the first character\n\t\t * is non-numeric.\n\t\t *\n\t\t * Pass `ZYAN_TRUE` to prepend a leading zero if the first character is non-numeric or\n\t\t * `ZYAN_FALSE` to disable this functionality.\n", "\t *\n\t\t * The default value is `ZYAN_FALSE`.\n\t\t */\n\t\tHEX_FORCE_LEADING_NUMBER,\n\t\t/**\n\t\t * Controls the prefix for hexadecimal values.\n\t\t *\n\t\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t\t * to set a custom prefix, or `ZYAN_NULL` to disable it.\n\t\t *\n", "\t * The string is deep-copied into an internal buffer.\n\t\t */\n\t\tHEX_PREFIX,\n\t\t/**\n\t\t * Controls the suffix for hexadecimal values.\n\t\t *\n\t\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t\t * to set a custom suffix, or `ZYAN_NULL` to disable it.\n\t\t *\n\t\t * The string is deep-copied into an internal buffer.\n", "\t */\n\t\tHEX_SUFFIX,\n\t\t/* ---------------------------------------------------------------------------------------- */\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = HEX_SUFFIX,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n", " * Enum defining different mantissae to be used during formatting.\n\t */\n\texport enum NumericBase {\n\t\t/**\n\t\t * Decimal system.\n\t\t */\n\t\tDEC,\n\t\t/**\n\t\t * Hexadecimal system.\n\t\t */\n", "\tHEX,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = HEX,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Enum defining the signeness of integers to be used during formatting.\n\t */\n", "export enum Signedness {\n\t\t/**\n\t\t * Automatically choose the most suitable mode based on the operands\n\t\t * ZydisDecodedOperand.imm.is_signed` attribute.\n\t\t */\n\t\tAUTO,\n\t\t/**\n\t\t * Force signed values.\n\t\t */\n\t\tSIGNED,\n", "\t/**\n\t\t * Force unsigned values.\n\t\t */\n\t\tUNSIGNED,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = UNSIGNED,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n", "/**\n\t * Enum definining magic values that receive special treatment when used as padding properties\n\t * of the formatter.\n\t */\n\texport enum Padding {\n\t\t/**\n\t\t * Disables padding.\n\t\t */\n\t\tDISABLED = 0,\n\t\t/**\n", "\t * Padds the value to the current stack-width for addresses, or to the\n\t\t * operand-width for immediate values (hexadecimal only).\n\t\t */\n\t\tAUTO = -1,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = AUTO,\n\t}\n\t/**\n", " * Enum of all decorator types.\n\t */\n\texport enum Decorator {\n\t\tINVALID,\n\t\t/**\n\t\t * The embedded-mask decorator.\n\t\t */\n\t\tMASK,\n\t\t/**\n\t\t * The broadcast decorator.\n", "\t */\n\t\tBC,\n\t\t/**\n\t\t * The rounding-control decorator.\n\t\t */\n\t\tRC,\n\t\t/**\n\t\t * The suppress-all-exceptions decorator.\n\t\t */\n\t\tSAE,\n", "\t/**\n\t\t * The register-swizzle decorator.\n\t\t */\n\t\tSWIZZLE,\n\t\t/**\n\t\t * The conversion decorator.\n\t\t */\n\t\tCONVERSION,\n\t\t/**\n\t\t * The eviction-hint decorator.\n", "\t */\n\t\tEH,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = EH,\n\t}\n\texport enum Register {\n\t\tNONE,\n\t\t// General purpose registers  8-bit\n", "\tAL,\n\t\tCL,\n\t\tDL,\n\t\tBL,\n\t\tAH,\n\t\tCH,\n\t\tDH,\n\t\tBH,\n\t\tSPL,\n\t\tBPL,\n", "\tSIL,\n\t\tDIL,\n\t\tR8B,\n\t\tR9B,\n\t\tR10B,\n\t\tR11B,\n\t\tR12B,\n\t\tR13B,\n\t\tR14B,\n\t\tR15B,\n", "\t// General purpose registers 16-bit\n\t\tAX,\n\t\tCX,\n\t\tDX,\n\t\tBX,\n\t\tSP,\n\t\tBP,\n\t\tSI,\n\t\tDI,\n\t\tR8W,\n", "\tR9W,\n\t\tR10W,\n\t\tR11W,\n\t\tR12W,\n\t\tR13W,\n\t\tR14W,\n\t\tR15W,\n\t\t// General purpose registers 32-bit\n\t\tEAX,\n\t\tECX,\n", "\tEDX,\n\t\tEBX,\n\t\tESP,\n\t\tEBP,\n\t\tESI,\n\t\tEDI,\n\t\tR8D,\n\t\tR9D,\n\t\tR10D,\n\t\tR11D,\n", "\tR12D,\n\t\tR13D,\n\t\tR14D,\n\t\tR15D,\n\t\t// General purpose registers 64-bit\n\t\tRAX,\n\t\tRCX,\n\t\tRDX,\n\t\tRBX,\n\t\tRSP,\n", "\tRBP,\n\t\tRSI,\n\t\tRDI,\n\t\tR8,\n\t\tR9,\n\t\tR10,\n\t\tR11,\n\t\tR12,\n\t\tR13,\n\t\tR14,\n", "\tR15,\n\t\t// Floating point legacy registers\n\t\tST0,\n\t\tST1,\n\t\tST2,\n\t\tST3,\n\t\tST4,\n\t\tST5,\n\t\tST6,\n\t\tST7,\n", "\tX87CONTROL,\n\t\tX87STATUS,\n\t\tX87TAG,\n\t\t// Floating point multimedia registers\n\t\tMM0,\n\t\tMM1,\n\t\tMM2,\n\t\tMM3,\n\t\tMM4,\n\t\tMM5,\n", "\tMM6,\n\t\tMM7,\n\t\t// Floating point vector registers 128-bit\n\t\tXMM0,\n\t\tXMM1,\n\t\tXMM2,\n\t\tXMM3,\n\t\tXMM4,\n\t\tXMM5,\n\t\tXMM6,\n", "\tXMM7,\n\t\tXMM8,\n\t\tXMM9,\n\t\tXMM10,\n\t\tXMM11,\n\t\tXMM12,\n\t\tXMM13,\n\t\tXMM14,\n\t\tXMM15,\n\t\tXMM16,\n", "\tXMM17,\n\t\tXMM18,\n\t\tXMM19,\n\t\tXMM20,\n\t\tXMM21,\n\t\tXMM22,\n\t\tXMM23,\n\t\tXMM24,\n\t\tXMM25,\n\t\tXMM26,\n", "\tXMM27,\n\t\tXMM28,\n\t\tXMM29,\n\t\tXMM30,\n\t\tXMM31,\n\t\t// Floating point vector registers 256-bit\n\t\tYMM0,\n\t\tYMM1,\n\t\tYMM2,\n\t\tYMM3,\n", "\tYMM4,\n\t\tYMM5,\n\t\tYMM6,\n\t\tYMM7,\n\t\tYMM8,\n\t\tYMM9,\n\t\tYMM10,\n\t\tYMM11,\n\t\tYMM12,\n\t\tYMM13,\n", "\tYMM14,\n\t\tYMM15,\n\t\tYMM16,\n\t\tYMM17,\n\t\tYMM18,\n\t\tYMM19,\n\t\tYMM20,\n\t\tYMM21,\n\t\tYMM22,\n\t\tYMM23,\n", "\tYMM24,\n\t\tYMM25,\n\t\tYMM26,\n\t\tYMM27,\n\t\tYMM28,\n\t\tYMM29,\n\t\tYMM30,\n\t\tYMM31,\n\t\t// Floating point vector registers 512-bit\n\t\tZMM0,\n", "\tZMM1,\n\t\tZMM2,\n\t\tZMM3,\n\t\tZMM4,\n\t\tZMM5,\n\t\tZMM6,\n\t\tZMM7,\n\t\tZMM8,\n\t\tZMM9,\n\t\tZMM10,\n", "\tZMM11,\n\t\tZMM12,\n\t\tZMM13,\n\t\tZMM14,\n\t\tZMM15,\n\t\tZMM16,\n\t\tZMM17,\n\t\tZMM18,\n\t\tZMM19,\n\t\tZMM20,\n", "\tZMM21,\n\t\tZMM22,\n\t\tZMM23,\n\t\tZMM24,\n\t\tZMM25,\n\t\tZMM26,\n\t\tZMM27,\n\t\tZMM28,\n\t\tZMM29,\n\t\tZMM30,\n", "\tZMM31,\n\t\t// Matrix registers\n\t\tTMM0,\n\t\tTMM1,\n\t\tTMM2,\n\t\tTMM3,\n\t\tTMM4,\n\t\tTMM5,\n\t\tTMM6,\n\t\tTMM7,\n", "\t// Flags registers\n\t\tFLAGS,\n\t\tEFLAGS,\n\t\tRFLAGS,\n\t\t// Instruction-pointer registers\n\t\tIP,\n\t\tEIP,\n\t\tRIP,\n\t\t// Segment registers\n\t\tES,\n", "\tCS,\n\t\tSS,\n\t\tDS,\n\t\tFS,\n\t\tGS,\n\t\t// Table registers\n\t\tGDTR,\n\t\tLDTR,\n\t\tIDTR,\n\t\tTR,\n", "\t// Test registers\n\t\tTR0,\n\t\tTR1,\n\t\tTR2,\n\t\tTR3,\n\t\tTR4,\n\t\tTR5,\n\t\tTR6,\n\t\tTR7,\n\t\t// Control registers\n", "\tCR0,\n\t\tCR1,\n\t\tCR2,\n\t\tCR3,\n\t\tCR4,\n\t\tCR5,\n\t\tCR6,\n\t\tCR7,\n\t\tCR8,\n\t\tCR9,\n", "\tCR10,\n\t\tCR11,\n\t\tCR12,\n\t\tCR13,\n\t\tCR14,\n\t\tCR15,\n\t\t// Debug registers\n\t\tDR0,\n\t\tDR1,\n\t\tDR2,\n", "\tDR3,\n\t\tDR4,\n\t\tDR5,\n\t\tDR6,\n\t\tDR7,\n\t\tDR8,\n\t\tDR9,\n\t\tDR10,\n\t\tDR11,\n\t\tDR12,\n", "\tDR13,\n\t\tDR14,\n\t\tDR15,\n\t\t// Mask registers\n\t\tK0,\n\t\tK1,\n\t\tK2,\n\t\tK3,\n\t\tK4,\n\t\tK5,\n", "\tK6,\n\t\tK7,\n\t\t// Bound registers\n\t\tBND0,\n\t\tBND1,\n\t\tBND2,\n\t\tBND3,\n\t\tBNDCFG,\n\t\tBNDSTATUS,\n\t\t// Uncategorized\n", "\tMXCSR,\n\t\tPKRU,\n\t\tXCR0,\n\t\tUIF,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = UIF,\n\t}\n\texport enum RegisterKind {\n", "\tINVALID,\n\t\tGPR,\n\t\tX87,\n\t\tMMX,\n\t\tVR,\n\t\tTMM,\n\t\tSEGMENT,\n\t\tTEST,\n\t\tCONTROL,\n\t\tDEBUG,\n", "\tMASK,\n\t\tBOUND,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = BOUND,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Register classes                                                                               */\n\t/* ---------------------------------------------------------------------------------------------- */\n", "/**\n\t * Defines the `ZydisRegisterClass` enum.\n\t *\n\t * Please note that this enum does not contain a matching entry for all values of the\n\t * `ZydisRegister` enum, but only for those registers where it makes sense to logically group them\n\t * for decoding/encoding purposes.\n\t *\n\t * These are mainly the registers that can be identified by an id within their corresponding\n\t * register-class. The `IP` and `FLAGS` values are exceptions to this rule.\n\t */\n", "export enum RegisterClass {\n\t\tINVALID,\n\t\t/**\n\t\t * 8-bit general-purpose registers.\n\t\t */\n\t\tGPR8,\n\t\t/**\n\t\t * 16-bit general-purpose registers.\n\t\t */\n\t\tGPR16,\n", "\t/**\n\t\t * 32-bit general-purpose registers.\n\t\t */\n\t\tGPR32,\n\t\t/**\n\t\t * 64-bit general-purpose registers.\n\t\t */\n\t\tGPR64,\n\t\t/**\n\t\t * Floating point legacy registers.\n", "\t */\n\t\tX87,\n\t\t/**\n\t\t * Floating point multimedia registers.\n\t\t */\n\t\tMMX,\n\t\t/**\n\t\t * 128-bit vector registers.\n\t\t */\n\t\tXMM,\n", "\t/**\n\t\t * 256-bit vector registers.\n\t\t */\n\t\tYMM,\n\t\t/**\n\t\t * 512-bit vector registers.\n\t\t */\n\t\tZMM,\n\t\t/**\n\t\t * Matrix registers.\n", "\t */\n\t\tTMM,\n\t\t/*\n\t\t * Flags registers.\n\t\t */\n\t\tFLAGS,\n\t\t/**\n\t\t * Instruction-pointer registers.\n\t\t */\n\t\tIP,\n", "\t/**\n\t\t * Segment registers.\n\t\t */\n\t\tSEGMENT,\n\t\t/**\n\t\t * Table registers.\n\t\t */\n\t\tTABLE,\n\t\t/**\n\t\t * Test registers.\n", "\t */\n\t\tTEST,\n\t\t/**\n\t\t * Control registers.\n\t\t */\n\t\tCONTROL,\n\t\t/**\n\t\t * Debug registers.\n\t\t */\n\t\tDEBUG,\n", "\t/**\n\t\t * Mask registers.\n\t\t */\n\t\tMASK,\n\t\t/**\n\t\t * Bound registers.\n\t\t */\n\t\tBOUND,\n\t\t/**\n\t\t * Maximum value of this enum.\n", "\t */\n\t\t// MAX_VALUE = BOUND,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Element type                                                                                   */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisElementType` enum.\n\t */\n\texport enum ElementType {\n", "\tINVALID,\n\t\t/**\n\t\t * A struct type.\n\t\t */\n\t\tSTRUCT,\n\t\t/**\n\t\t * Unsigned integer value.\n\t\t */\n\t\tUINT,\n\t\t/**\n", "\t * Signed integer value.\n\t\t */\n\t\tINT,\n\t\t/**\n\t\t * 16-bit floating point value (`half`).\n\t\t */\n\t\tFLOAT16,\n\t\t/**\n\t\t * 32-bit floating point value (`single`).\n\t\t */\n", "\tFLOAT32,\n\t\t/**\n\t\t * 64-bit floating point value (`double`).\n\t\t */\n\t\tFLOAT64,\n\t\t/**\n\t\t * 80-bit floating point value (`extended`).\n\t\t */\n\t\tFLOAT80,\n\t\t/**\n", "\t * 16-bit brain floating point value.\n\t\t */\n\t\tBFLOAT16,\n\t\t/**\n\t\t * Binary coded decimal value.\n\t\t */\n\t\tLONGBCD,\n\t\t/**\n\t\t * A condition code (e.g. used by `CMPPD`, `VCMPPD`, ...).\n\t\t */\n", "\tCC,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = CC,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Operand type                                                                                   */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n", " * Defines the `ZydisOperandType` enum.\n\t */\n\texport enum OperandType {\n\t\t/**\n\t\t * The operand is not used.\n\t\t */\n\t\tUNUSED,\n\t\t/**\n\t\t * The operand is a register operand.\n\t\t */\n", "\tREGISTER,\n\t\t/**\n\t\t * The operand is a memory operand.\n\t\t */\n\t\tMEMORY,\n\t\t/**\n\t\t * The operand is a pointer operand with a segment:offset lvalue.\n\t\t */\n\t\tPOINTER,\n\t\t/**\n", "\t * The operand is an immediate operand.\n\t\t */\n\t\tIMMEDIATE,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = IMMEDIATE,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Operand encoding                                                                               */\n", "/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisOperandEncoding` enum.\n\t */\n\texport enum OperandEncoding {\n\t\tNONE,\n\t\tMODRM_REG,\n\t\tMODRM_RM,\n\t\tOPCODE,\n\t\tNDSNDD,\n", "\tIS4,\n\t\tMASK,\n\t\tDISP8,\n\t\tDISP16,\n\t\tDISP32,\n\t\tDISP64,\n\t\tDISP16_32_64,\n\t\tDISP32_32_64,\n\t\tDISP16_32_32,\n\t\tUIMM8,\n", "\tUIMM16,\n\t\tUIMM32,\n\t\tUIMM64,\n\t\tUIMM16_32_64,\n\t\tUIMM32_32_64,\n\t\tUIMM16_32_32,\n\t\tSIMM8,\n\t\tSIMM16,\n\t\tSIMM32,\n\t\tSIMM64,\n", "\tSIMM16_32_64,\n\t\tSIMM32_32_64,\n\t\tSIMM16_32_32,\n\t\tJIMM8,\n\t\tJIMM16,\n\t\tJIMM32,\n\t\tJIMM64,\n\t\tJIMM16_32_64,\n\t\tJIMM32_32_64,\n\t\tJIMM16_32_32,\n", "\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = JIMM16_32_32,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Operand visibility                                                                             */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisOperandVisibility` enum.\n", " */\n\texport enum OperandVisibility {\n\t\tINVALID,\n\t\t/**\n\t\t * The operand is explicitly encoded in the instruction.\n\t\t */\n\t\tEXPLICIT,\n\t\t/**\n\t\t * The operand is part of the opcode, but listed as an operand.\n\t\t */\n", "\tIMPLICIT,\n\t\t/**\n\t\t * The operand is part of the opcode, and not typically listed as an operand.\n\t\t */\n\t\tHIDDEN,\n\t\t/**\n\t\t * Maximum value of this enum.\n\t\t */\n\t\t// MAX_VALUE = HIDDEN,\n\t}\n", "/* ---------------------------------------------------------------------------------------------- */\n\t/* Operand action                                                                                 */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisOperandAction` enum.\n\t */\n\texport enum OperandAction {\n\t\t/* ------------------------------------------------------------------------------------------ */\n\t\t/* Elemental actions                                                                          */\n\t\t/* ------------------------------------------------------------------------------------------ */\n", "\t/**\n\t\t * The operand is read by the instruction.\n\t\t */\n\t\tREAD = 0x01,\n\t\t/**\n\t\t * The operand is written by the instruction (must write).\n\t\t */\n\t\tWRITE = 0x02,\n\t\t/**\n\t\t * The operand is conditionally read by the instruction.\n", "\t */\n\t\tCONDREAD = 0x04,\n\t\t/**\n\t\t * The operand is conditionally written by the instruction (may write).\n\t\t */\n\t\tCONDWRITE = 0x08,\n\t\t/* ------------------------------------------------------------------------------------------ */\n\t\t/* Combined actions                                                                           */\n\t\t/* ------------------------------------------------------------------------------------------ */\n\t\t/**\n", "\t * The operand is read (must read) and written by the instruction (must write).\n\t\t */\n\t\tREADWRITE = READ | WRITE,\n\t\t/**\n\t\t * The operand is conditionally read (may read) and conditionally written by\n\t\t * the instruction (may write).\n\t\t */\n\t\tCONDREAD_CONDWRITE = CONDREAD | CONDWRITE,\n\t\t/**\n\t\t * The operand is read (must read) and conditionally written by the\n", "\t * instruction (may write).\n\t\t */\n\t\tREAD_CONDWRITE = READ | CONDWRITE,\n\t\t/**\n\t\t * The operand is written (must write) and conditionally read by the\n\t\t * instruction (may read).\n\t\t */\n\t\tCONDREAD_WRITE = CONDREAD | WRITE,\n\t\t/**\n\t\t * Mask combining all reading access flags.\n", "\t */\n\t\tMASK_READ = READ | CONDREAD,\n\t\t/**\n\t\t * Mask combining all writing access flags.\n\t\t */\n\t\tMASK_WRITE = WRITE | CONDWRITE,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* Instruction encoding                                                                           */\n\t/* ---------------------------------------------------------------------------------------------- */\n", "/**\n\t * Defines the `ZydisInstructionEncoding` enum.\n\t */\n\texport enum InstructionEncoding {\n\t\t/**\n\t\t * The instruction uses the legacy encoding.\n\t\t */\n\t\tLEGACY,\n\t\t/**\n\t\t * The instruction uses the AMD 3DNow-encoding.\n", "\t */\n\t\t\"3DNOW\",\n\t\t/**\n\t\t * The instruction uses the AMD XOP-encoding.\n\t\t */\n\t\tXOP,\n\t\t/**\n\t\t * The instruction uses the VEX-encoding.\n\t\t */\n\t\tVEX,\n", "\t/**\n\t\t * The instruction uses the EVEX-encoding.\n\t\t */\n\t\tEVEX,\n\t\t/**\n\t\t * The instruction uses the MVEX-encoding.\n\t\t */\n\t\tMVEX,\n\t\t/**\n\t\t * Maximum value of this enum.\n", "\t */\n\t\t// MAX_VALUE = MVEX,\n\t}\n\texport enum MemoryOperandType {\n\t\tINVALID,\n\t\t/**\n\t\t * Normal memory operand.\n\t\t */\n\t\tMEM,\n\t\t/**\n", "\t * The memory operand is only used for address-generation. No real memory-access is\n\t\t * caused.\n\t\t */\n\t\tAGEN,\n\t\t/**\n\t\t * A memory operand using `SIB` addressing form, where the index register is not used\n\t\t * in address calculation and scale is ignored. No real memory-access is caused.\n\t\t */\n\t\tMIB,\n\t\t/**\n", "\t * A vector `SIB` memory addressing operand (`VSIB`).\n\t\t */\n\t\tVSIB,\n\t}\n\t/**\n\t * Defines possible physical instruction encodings as bit flags, so multiple acceptable encodings\n\t * can be specified simultaneously.\n\t */\n\texport enum EncodableEncoding {\n\t\tDEFAULT = 0x00000000,\n", "\tLEGACY = 0x00000001,\n\t\t\"3DNOW\" = 0x00000002,\n\t\tXOP = 0x00000004,\n\t\tVEX = 0x00000008,\n\t\tEVEX = 0x00000010,\n\t\tMVEX = 0x00000020,\n\t}\n\t/**\n\t * Defines encodable physical/effective sizes of relative immediate operands. See\n\t * `ZydisEncoderRequest.branch_width` for more details.\n", " */\n\texport enum BranchWidth {\n\t\tWIDTH_NONE,\n\t\tWIDTH_8,\n\t\tWIDTH_16,\n\t\tWIDTH_32,\n\t\tWIDTH_64,\n\t}\n\t/**\n\t * Defines possible values for address size hints. See `ZydisEncoderRequest` for more information\n", " * about address size hints.\n\t */\n\texport enum AddressSizeHint {\n\t\tHINT_NONE,\n\t\tHINT_16,\n\t\tHINT_32,\n\t\tHINT_64,\n\t}\n\t/**\n\t * Defines possible values for operand size hints. See `ZydisEncoderRequest` for more information\n", " * about operand size hints.\n\t */\n\texport enum OperandSizeHint {\n\t\tHINT_NONE,\n\t\tHINT_8,\n\t\tHINT_16,\n\t\tHINT_32,\n\t\tHINT_64,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n", "/* Branch types                                                                                   */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisBranchType` enum.\n\t */\n\texport enum BranchType {\n\t\t/**\n\t\t * The instruction is not a branch instruction.\n\t\t */\n\t\tNONE,\n", "\t/**\n\t\t * The instruction is a short (8-bit) branch instruction.\n\t\t */\n\t\tSHORT,\n\t\t/**\n\t\t * The instruction is a near (16-bit or 32-bit) branch instruction.\n\t\t */\n\t\tNEAR,\n\t\t/**\n\t\t * The instruction is a far (inter-segment) branch instruction.\n", "\t */\n\t\tFAR,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* SSE/AVX exception-class                                                                        */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisExceptionClass` enum.\n\t */\n\texport enum ExceptionClass {\n", "\tNONE,\n\t\t// TODO: FP Exceptions\n\t\tSSE1,\n\t\tSSE2,\n\t\tSSE3,\n\t\tSSE4,\n\t\tSSE5,\n\t\tSSE7,\n\t\tAVX1,\n\t\tAVX2,\n", "\tAVX3,\n\t\tAVX4,\n\t\tAVX5,\n\t\tAVX6,\n\t\tAVX7,\n\t\tAVX8,\n\t\tAVX11,\n\t\tAVX12,\n\t\tE1,\n\t\tE1NF,\n", "\tE2,\n\t\tE2NF,\n\t\tE3,\n\t\tE3NF,\n\t\tE4,\n\t\tE4NF,\n\t\tE5,\n\t\tE5NF,\n\t\tE6,\n\t\tE6NF,\n", "\tE7NM,\n\t\tE7NM128,\n\t\tE9NF,\n\t\tE10,\n\t\tE10NF,\n\t\tE11,\n\t\tE11NF,\n\t\tE12,\n\t\tE12NP,\n\t\tK20,\n", "\tK21,\n\t\tAMXE1,\n\t\tAMXE2,\n\t\tAMXE3,\n\t\tAMXE4,\n\t\tAMXE5,\n\t\tAMXE6,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* AVX mask mode                                                                                  */\n", "/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisMaskMode` enum.\n\t */\n\texport enum MaskMode {\n\t\tINVALID,\n\t\t/**\n\t\t * Masking is disabled for the current instruction (`K0` register is used).\n\t\t */\n\t\tDISABLED,\n", "\t/**\n\t\t * The embedded mask register is used as a merge-mask.\n\t\t */\n\t\tMERGING,\n\t\t/**\n\t\t * The embedded mask register is used as a zero-mask.\n\t\t */\n\t\tZEROING,\n\t\t/**\n\t\t * The embedded mask register is used as a control-mask (element selector).\n", "\t */\n\t\tCONTROL,\n\t\t/**\n\t\t * The embedded mask register is used as a zeroing control-mask (element selector).\n\t\t */\n\t\tCONTROL_ZEROING,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* AVX broadcast-mode                                                                             */\n\t/* ---------------------------------------------------------------------------------------------- */\n", "/**\n\t * Defines the `ZydisBroadcastMode` enum.\n\t */\n\texport enum BroadcastMode {\n\t\tMODE_INVALID,\n\t\tMODE_1_TO_2,\n\t\tMODE_1_TO_4,\n\t\tMODE_1_TO_8,\n\t\tMODE_1_TO_16,\n\t\tMODE_1_TO_32,\n", "\tMODE_1_TO_64,\n\t\tMODE_2_TO_4,\n\t\tMODE_2_TO_8,\n\t\tMODE_2_TO_16,\n\t\tMODE_4_TO_8,\n\t\tMODE_4_TO_16,\n\t\tMODE_8_TO_16,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* AVX rounding-mode                                                                              */\n", "/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisRoundingMode` enum.\n\t */\n\texport enum RoundingMode {\n\t\tINVALID,\n\t\t/**\n\t\t * Round to nearest.\n\t\t */\n\t\tRN,\n", "\t/**\n\t\t * Round down.\n\t\t */\n\t\tRD,\n\t\t/**\n\t\t * Round up.\n\t\t */\n\t\tRU,\n\t\t/**\n\t\t * Round towards zero.\n", "\t */\n\t\tRZ,\n\t}\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/* KNC swizzle-mode                                                                               */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisSwizzleMode` enum.\n\t */\n\texport enum SwizzleMode {\n", "\tINVALID,\n\t\tDCBA,\n\t\tCDAB,\n\t\tBADC,\n\t\tDACB,\n\t\tAAAA,\n\t\tBBBB,\n\t\tCCCC,\n\t\tDDDD,\n\t}\n", "/* ---------------------------------------------------------------------------------------------- */\n\t/* KNC conversion-mode                                                                            */\n\t/* ---------------------------------------------------------------------------------------------- */\n\t/**\n\t * Defines the `ZydisConversionMode` enum.\n\t */\n\texport enum ConversionMode {\n\t\tINVALID,\n\t\tFLOAT16,\n\t\tSINT8,\n", "\tUINT8,\n\t\tSINT16,\n\t\tUINT16,\n\t}\n\texport enum Feature {\n\t\tDECODER,\n\t\tENCODER,\n\t\tFORMATTER,\n\t\tAVX512,\n\t\tKNC,\n", "\tSEGMENT,\n\t}\n\texport enum CPUFlag {\n\t\tCF = 1 << 0,\n\t\t/**\n\t\t * Parity flag.\n\t\t */\n\t\tPF = 1 << 2,\n\t\t/**\n\t\t * Adjust flag.\n", "\t */\n\t\tAF = 1 << 4,\n\t\t/**\n\t\t * Zero flag.\n\t\t */\n\t\tZF = 1 << 6,\n\t\t/**\n\t\t * Sign flag.\n\t\t */\n\t\tSF = 1 << 7,\n", "\t/**\n\t\t * Trap flag.\n\t\t */\n\t\tTF = 1 << 8,\n\t\t/**\n\t\t * Interrupt enable flag.\n\t\t */\n\t\tIF = 1 << 9,\n\t\t/**\n\t\t * Direction flag.\n", "\t */\n\t\tDF = 1 << 10,\n\t\t/**\n\t\t * Overflow flag.\n\t\t */\n\t\tOF = 1 << 11,\n\t\t/**\n\t\t * I/O privilege level flag.\n\t\t */\n\t\tIOPL = 1 << 12,\n", "\t/**\n\t\t * Nested task flag.\n\t\t */\n\t\tNT = 1 << 14,\n\t\t/**\n\t\t * Resume flag.\n\t\t */\n\t\tRF = 1 << 16,\n\t\t/**\n\t\t * Virtual 8086 mode flag.\n", "\t */\n\t\tVM = 1 << 17,\n\t\t/**\n\t\t * Alignment check.\n\t\t */\n\t\tAC = 1 << 18,\n\t\t/**\n\t\t * Virtual interrupt flag.\n\t\t */\n\t\tVIF = 1 << 19,\n", "\t/**\n\t\t * Virtual interrupt pending.\n\t\t */\n\t\tVIP = 1 << 20,\n\t\t/**\n\t\t * Able to use CPUID instruction.\n\t\t */\n\t\tID = 1 << 21,\n\t}\n\texport enum FPUFlag {\n", "\t/**\n\t\t * FPU condition-code flag 0.\n\t\t */\n\t\tC0 = 1 << 0,\n\t\t/**\n\t\t * FPU condition-code flag 1.\n\t\t */\n\t\tC1 = 1 << 1,\n\t\t/**\n\t\t * FPU condition-code flag 2.\n", "\t */\n\t\tC2 = 1 << 2,\n\t\t/**\n\t\t * FPU condition-code flag 3.\n\t\t */\n\t\tC3 = 1 << 3,\n\t}\n\texport const MAX_INSN_LENGTH = 15;\n\texport const MAX_OPERANDS = 10;\n\texport const MAX_VISIBLE_OPERANDS = 5;\n"]}
{"filename": "src/util.ts", "chunked_list": ["import zydis from \"./native.js\";\n\t//\n\t// Low level details.\n\t//\n\tabstract class IAllocator {\n\t\tabstract allocate(n: number): number;\n\t\tabstract free(p: number): void;\n\t\tstr(s: string): number {\n\t\t\tconst upperbound = (s.length << 2) + 1;\n\t\t\tconst ptr = this.allocate(upperbound);\n", "\t\tzydis.stringToUTF8(s, ptr, Infinity);\n\t\t\treturn ptr;\n\t\t}\n\t\tbuf(input: ArrayLike<number>): number {\n\t\t\tconst ptr = this.allocate(input.length);\n\t\t\tzydis.HEAPU8.set(input, ptr);\n\t\t\treturn ptr;\n\t\t}\n\t}\n\texport const StackAllocator = new (class StackAllocator extends IAllocator {\n", "\tallocate(n: number): number {\n\t\t\treturn zydis.asm.stackAlloc(n) as number;\n\t\t}\n\t\tfree(p: number): void {}\n\t})();\n\texport const HeapAllocator = new (class HeapAllocator extends IAllocator {\n\t\tallocate(n: number): number {\n\t\t\treturn zydis.asm.malloc(n) as number;\n\t\t}\n\t\tfree(p: number): void {\n", "\t\tzydis.asm.free(p);\n\t\t}\n\t})();\n\texport class Resource {\n\t\tstatic readonly finalizer = new FinalizationRegistry((heldValue) => {});\n\t\t#parent?: Resource;\n\t\t#ptr: number;\n\t\treadonly #token = {};\n\t\tconstructor(ptr: number) {\n\t\t\tthis.#ptr = ptr;\n", "\t\tif (this.#ptr) {\n\t\t\t\tResource.finalizer.register(this, this.#ptr, this.#token);\n\t\t\t}\n\t\t}\n\t\tsubresource(ptr: number) {\n\t\t\tconst res = new Resource(0);\n\t\t\tres.#parent = this;\n\t\t\tres.#ptr = ptr;\n\t\t\treturn res;\n\t\t}\n", "\tref() {\n\t\t\treturn this.#ptr;\n\t\t}\n\t\tunref() {\n\t\t\tif (this.#ptr && !this.#parent) {\n\t\t\t\tHeapAllocator.free(this.#ptr);\n\t\t\t\tthis.#ptr = 0;\n\t\t\t\tResource.finalizer.unregister(this.#token);\n\t\t\t}\n\t\t}\n", "}\n\texport function ZyjsField(ns: string) {\n\t\treturn function (target: any, propertyKey: any) {\n\t\t\tconst getter = zydis.asm[`zyjs${ns}Get_${propertyKey}`];\n\t\t\tconst setter = zydis.asm[`zyjs${ns}Set_${propertyKey}`];\n\t\t\tObject.defineProperty(target, propertyKey, {\n\t\t\t\tget(this: { resource: { ref(): number } }) {\n\t\t\t\t\treturn getter(this.resource.ref());\n\t\t\t\t},\n\t\t\t\tset(this: { resource: { ref(): number } }, value: any) {\n", "\t\t\t\treturn setter(this.resource.ref(), value);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\t}\n\texport function withStack<R extends any>(callback: (allocator: IAllocator) => R): R {\n\t\tconst { stackSave, stackRestore } = zydis.asm;\n\t\tconst stack = stackSave();\n\t\ttry {\n\t\t\treturn callback(StackAllocator);\n", "\t} finally {\n\t\t\tstackRestore(stack);\n\t\t}\n\t}\n\texport function withHeap<R extends any>(callback: (allocator: IAllocator) => R): R {\n\t\treturn callback(HeapAllocator);\n\t}\n"]}
{"filename": "src/common.ts", "chunked_list": ["import type { MemoryOperandType, Register } from \"./enums.js\";\n\texport type OperandImm = { s: bigint; rel?: boolean } | { u: bigint; rel?: boolean };\n\texport interface OperandPtr {\n\t\tsegv: number;\n\t\toff: number;\n\t}\n\texport interface OperandReg {\n\t\tname: Register;\n\t\tis4?: boolean;\n\t}\n", "export interface OperandMem {\n\t\ttype?: MemoryOperandType;\n\t\tseg?: Register;\n\t\tindex?: Register;\n\t\tbase?: Register;\n\t\tscale?: number;\n\t\tdisp?: bigint;\n\t}\n"]}
{"filename": "src/encoder.ts", "chunked_list": ["import { DecodedInsn } from \"./decoder.js\";\n\timport { Resource, ZyjsField, withHeap, withStack } from \"./util.js\";\n\timport zydis from \"./native.js\";\n\timport {\n\t\tAddressSizeHint,\n\t\tBranchType,\n\t\tBranchWidth,\n\t\tBroadcastMode,\n\t\tConversionMode,\n\t\tEncodableEncoding,\n", "\tInsnAttribute,\n\t\tMAX_INSN_LENGTH,\n\t\tMachineMode,\n\t\tMnemonic,\n\t\tOperandSizeHint,\n\t\tOperandType,\n\t\tRegister,\n\t\tRoundingMode,\n\t\tSwizzleMode,\n\t} from \"./enums.js\";\n", "import { OperandImm, OperandMem, OperandPtr, OperandReg } from \"./common.js\";\n\tconst OpField = ZyjsField(\"EncOp\");\n\ttype OperandLike = keyof typeof Register | number | bigint | OperandImm | OperandReg | OperandPtr | OperandMem;\n\texport class EncoderOperand {\n\t\tresource: Resource;\n\t\tconstructor(rsrc: Resource) {\n\t\t\tthis.resource = rsrc;\n\t\t}\n\t\t@OpField\n\t\ttype!: OperandType;\n", "\t@OpField\n\t\timms!: bigint;\n\t\t@OpField\n\t\timmu!: bigint;\n\t\t@OpField\n\t\tptrSeg!: number;\n\t\t@OpField\n\t\tptrOff!: number;\n\t\t@OpField\n\t\tregv!: Register;\n", "\t@OpField\n\t\tregIs4!: 1 | 0;\n\t\t@OpField\n\t\tmemBase!: Register;\n\t\t@OpField\n\t\tmemIndex!: Register;\n\t\t@OpField\n\t\tmemScale!: Register;\n\t\t@OpField\n\t\tmemDisp!: bigint;\n", "\tget imm(): OperandImm {\n\t\t\tif (this.type !== OperandType.IMMEDIATE) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ts: this.imms,\n\t\t\t\tu: this.immu,\n\t\t\t};\n\t\t}\n\t\tset imm(o: OperandImm | bigint | number) {\n", "\t\tthis.type = OperandType.IMMEDIATE;\n\t\t\tif (typeof o === \"object\") {\n\t\t\t\tif (\"s\" in o) {\n\t\t\t\t\tthis.imms = o.s;\n\t\t\t\t} else {\n\t\t\t\t\tthis.immu = o.u;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.imms = BigInt(o);\n\t\t\t}\n", "\t}\n\t\tget reg(): OperandReg {\n\t\t\tif (this.type !== OperandType.REGISTER) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tname: this.regv,\n\t\t\t\tis4: !!this.regIs4,\n\t\t\t};\n\t\t}\n", "\tset reg(o: OperandReg | Register | keyof typeof Register) {\n\t\t\tthis.type = OperandType.REGISTER;\n\t\t\tif (typeof o === \"string\") {\n\t\t\t\tthis.regv = Register[o];\n\t\t\t} else if (typeof o === \"number\") {\n\t\t\t\tthis.regv = o;\n\t\t\t} else {\n\t\t\t\tthis.regv = o.name;\n\t\t\t\tthis.regIs4 = o.is4 || false ? 1 : 0;\n\t\t\t}\n", "\t}\n\t\tget ptr(): OperandPtr {\n\t\t\tif (this.type !== OperandType.POINTER) {\n\t\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tsegv: this.ptrSeg,\n\t\t\t\toff: this.ptrOff,\n\t\t\t};\n\t\t}\n", "\tset ptr(o: OperandPtr) {\n\t\t\tthis.type = OperandType.POINTER;\n\t\t\tthis.ptrOff = o.off;\n\t\t\tthis.ptrSeg = o.segv;\n\t\t}\n\t\tget mem(): OperandMem {\n\t\t\tconst res: OperandMem = {\n\t\t\t\tindex: this.memIndex,\n\t\t\t\tbase: this.memBase,\n\t\t\t\tscale: this.memScale,\n", "\t\t\tdisp: this.memDisp,\n\t\t\t};\n\t\t\tif (res.seg === Register.NONE) {\n\t\t\t\tdelete res.seg;\n\t\t\t}\n\t\t\tif (res.base === Register.NONE) {\n\t\t\t\tdelete res.base;\n\t\t\t}\n\t\t\tif (res.scale === 0 || res.index === Register.NONE) {\n\t\t\t\tdelete res.index;\n", "\t\t\tdelete res.scale;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tset mem(o: OperandMem) {\n\t\t\tthis.type = OperandType.MEMORY;\n\t\t\tthis.memBase = o.base ?? Register.NONE;\n\t\t\tthis.memDisp = o.disp ?? 0n;\n\t\t\tthis.memIndex = o.index ?? Register.NONE;\n\t\t\tthis.memScale = o.scale ?? 0;\n", "\t}\n\t\tget() {\n\t\t\tswitch (this.type) {\n\t\t\t\tcase OperandType.IMMEDIATE:\n\t\t\t\t\treturn this.imm;\n\t\t\t\tcase OperandType.REGISTER:\n\t\t\t\t\treturn this.reg;\n\t\t\t\tcase OperandType.POINTER:\n\t\t\t\t\treturn this.ptr;\n\t\t\t\tcase OperandType.MEMORY:\n", "\t\t\t\treturn this.mem;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error();\n\t\t\t}\n\t\t}\n\t\tset(o: OperandLike) {\n\t\t\tif (typeof o === \"number\" || typeof o === \"bigint\") {\n\t\t\t\treturn void (this.imm = o);\n\t\t\t} else if (typeof o === \"string\") {\n\t\t\t\treturn void (this.reg = o);\n", "\t\t}\n\t\t\t// OperandImm\n\t\t\tif (\"s\" in o || \"u\" in o) {\n\t\t\t\tthis.imm = o;\n\t\t\t}\n\t\t\t// OperandReg.\n\t\t\t//\n\t\t\telse if (\"name\" in o) {\n\t\t\t\tthis.reg = o;\n\t\t\t}\n", "\t\t// OperandPtr.\n\t\t\t//\n\t\t\telse if (\"off\" in o) {\n\t\t\t\tthis.ptr = o;\n\t\t\t}\n\t\t\t// OperandMem.\n\t\t\t//\n\t\t\telse {\n\t\t\t\tthis.mem = o;\n\t\t\t}\n", "\t}\n\t}\n\tconst ReqField = ZyjsField(\"EncReq\");\n\texport class EncoderRequest {\n\t\tresource: Resource;\n\t\tconstructor(from?: DecodedInsn) {\n\t\t\tthis.resource = new Resource(zydis.asm.zyjsNewEncReq(from?.resource.ref() ?? 0));\n\t\t}\n\t\tencode(at?: bigint) {\n\t\t\treturn withStack((alloc) => {\n", "\t\t\tconst tmp = alloc.allocate(MAX_INSN_LENGTH);\n\t\t\t\tconst length =\n\t\t\t\t\tat != null\n\t\t\t\t\t\t? zydis.asm.zyjsEncReqEncodeAbs(this.resource.ref(), tmp, at)\n\t\t\t\t\t\t: zydis.asm.zyjsEncReqEncode(this.resource.ref(), tmp);\n\t\t\t\treturn zydis.HEAPU8.slice(tmp, tmp + length);\n\t\t\t});\n\t\t}\n\t\t@ReqField\n\t\tmachineMode!: MachineMode;\n", "\t@ReqField\n\t\tallowedEncodings!: EncodableEncoding;\n\t\t@ReqField\n\t\tmnemonic!: Mnemonic;\n\t\t@ReqField\n\t\tprefixes!: bigint;\n\t\t@ReqField\n\t\tbranchType!: BranchType;\n\t\t@ReqField\n\t\tbranchWidth!: BranchWidth;\n", "\t@ReqField\n\t\taddressSizeHint!: AddressSizeHint;\n\t\t@ReqField\n\t\toperandSizeHint!: OperandSizeHint;\n\t\t@ReqField\n\t\toperandCount!: number;\n\t\t@ReqField\n\t\tevexBroadcast!: BroadcastMode;\n\t\t@ReqField\n\t\tevexRounding!: RoundingMode;\n", "\t@ReqField\n\t\tevexSAE!: 1 | 0;\n\t\t@ReqField\n\t\tevexZeroingMask!: 1 | 0;\n\t\t@ReqField\n\t\tmvexBroadcast!: BroadcastMode;\n\t\t@ReqField\n\t\tmvexRounding!: RoundingMode;\n\t\t@ReqField\n\t\tmvexSAE!: 1 | 0;\n", "\t@ReqField\n\t\tmvexConversion!: ConversionMode;\n\t\t@ReqField\n\t\tmvexSwizzle!: SwizzleMode;\n\t\t@ReqField\n\t\tmvexEvictionHint!: 1 | 0;\n\t\toperand(n: number): EncoderOperand {\n\t\t\tconst ptr = zydis.asm.zyjsEncReqRefOperand(this.resource.ref(), n);\n\t\t\tif (!ptr) {\n\t\t\t\tthrow RangeError(\"Operand out of boundaries.\");\n", "\t\t}\n\t\t\treturn new EncoderOperand(this.resource.subresource(ptr));\n\t\t}\n\t\tstatic from(machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\t\t\tconst res = new EncoderRequest();\n\t\t\tres.mnemonic = mnemonic;\n\t\t\tres.operandCount = operands.length;\n\t\t\tres.machineMode = machine;\n\t\t\tfor (let n = 0; n !== operands.length; n++) {\n\t\t\t\tconst op = operands[n];\n", "\t\t\tres.operand(n).set(op);\n\t\t\t\tif (typeof op === \"object\" && \"seg\" in op) {\n\t\t\t\t\tswitch (op.seg) {\n\t\t\t\t\t\tcase Register.CS:\n\t\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_CS;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Register.DS:\n\t\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_DS;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Register.ES:\n", "\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_ES;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Register.GS:\n\t\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_GS;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Register.FS:\n\t\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_FS;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Register.SS:\n\t\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_SS;\n", "\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}\n\texport function encode(machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\t\treturn EncoderRequest.from(machine, mnemonic, ...operands).encode();\n\t}\n", "export function encodeAt(at: bigint, machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\t\treturn EncoderRequest.from(machine, mnemonic, ...operands).encode(at);\n\t}\n\texport function encodeNop(len: number) {\n\t\treturn (len <= 512 ? withStack : withHeap)((alloc) => {\n\t\t\tconst tmp = alloc.allocate(MAX_INSN_LENGTH);\n\t\t\tzydis.asm.zyjsEncNop(tmp, len);\n\t\t\tconst res = zydis.HEAPU8.slice(tmp, tmp + len);\n\t\t\talloc.free(tmp);\n\t\t\treturn res;\n", "\t});\n\t}\n"]}
