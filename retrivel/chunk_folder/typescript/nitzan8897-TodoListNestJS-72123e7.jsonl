{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\n\timport { AppModule } from './todolist/todolist.module';\n\tasync function bootstrap() {\n\t  const app = await NestFactory.create(AppModule);\n\t  await app.listen(3000);\n\t}\n\tbootstrap();\n"]}
{"filename": "src/utils/messages.ts", "chunked_list": ["export const ListNotFound = (listId: string) =>\n\t  `List not found!, make sure this '${listId}' id exists!`;\n"]}
{"filename": "src/utils/index.ts", "chunked_list": ["import { HttpException, HttpStatus } from '@nestjs/common';\n\timport TodoList from '../models/todolist/todolist';\n\timport { ListNotFound } from './messages';\n\texport const listIdValidation = (\n\t  RAMMemory: Record<string, TodoList>,\n\t  listId: string,\n\t) => {\n\t  if (!RAMMemory[listId]) {\n\t    throw new HttpException(ListNotFound(listId), HttpStatus.NOT_FOUND);\n\t  }\n", "};\n"]}
{"filename": "src/models/task/task.module.ts", "chunked_list": ["export default interface ITask {\n\t    finishDate: Date;\n\t    doneStatus: boolean;\n\t    description: string;\n\t    taskId: string;\n\t}"]}
{"filename": "src/models/task/task.ts", "chunked_list": ["import { Entity, ManyToOne } from 'typeorm';\n\timport { IsNotEmpty, IsString } from 'class-validator';\n\timport ITask from './task.module';\n\timport TodoList from '../todolist/todolist';\n\t@Entity()\n\texport default class Task implements ITask {\n\t//   @IsString()\n\t  taskId: string;\n\t//   @IsNotEmpty()\n\t  finishDate: Date;\n", "  doneStatus: boolean;\n\t  @IsString()\n\t  @IsNotEmpty()\n\t  description: string;\n\t  @ManyToOne(() => TodoList, (todoList) => todoList.Tasks)\n\t  todoList: TodoList;\n\t}\n"]}
{"filename": "src/models/todolist/todolist.module.ts", "chunked_list": ["import Task from \"../task/task\";\n\texport default interface ITodoList {\n\t  Id: string;\n\t  Name: string;\n\t  Tasks?: Task[];\n\t}\n"]}
{"filename": "src/models/todolist/todolist.ts", "chunked_list": ["import { Entity, OneToMany } from 'typeorm';\n\timport Task from '../task/task';\n\timport ITask from '../task/task.module';\n\timport ITodoList from './todolist.module';\n\timport { IsString, IsNotEmpty } from 'class-validator';\n\t@Entity()\n\texport default class TodoList implements ITodoList {\n\t  @IsString()\n\t  @IsNotEmpty()\n\t  Name: string;\n", "  Id: string;\n\t  @OneToMany(() => Task, task => task.todoList)\n\t  Tasks?: Task[];\n\t}\n"]}
{"filename": "src/models/todolist/todolist-actions.module.ts", "chunked_list": ["import IList from \"./todolist.module\";\n\texport default interface ITodoListActions {\n\t  AddList(list: IList): string;\n\t  RemoveList(listId: string): void;\n\t  GetList(listId: string): IList | undefined;\n\t  UpdateListName(listId: string, listNewName: string): void;\n\t}\n"]}
{"filename": "src/todolist/todolist.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { TodoListController } from './todolist.controller';\n\timport { TodoListService } from './todolist.service';\n\t@Module({\n\t  imports: [],\n\t  controllers: [TodoListController],\n\t  providers: [TodoListService],\n\t})\n\texport class AppModule {}\n"]}
{"filename": "src/todolist/todolist.controller.ts", "chunked_list": ["import {\n\t  Body,\n\t  Controller,\n\t  Delete,\n\t  Get,\n\t  Logger,\n\t  Param,\n\t  Post,\n\t  Put,\n\t  UsePipes,\n", "  ValidationPipe,\n\t} from '@nestjs/common';\n\timport { TodoListService } from './todolist.service';\n\timport TodoList from '../models/todolist/todolist';\n\timport Task from '../models/task/task';\n\t@Controller('todolist')\n\texport class TodoListController {\n\t  constructor(private readonly appService: TodoListService) {}\n\t  @Post()\n\t  @UsePipes(new ValidationPipe())\n", "  createTodoList(@Body() list: TodoList): TodoList {\n\t    try {\n\t      const id = this.appService.AddList(list);\n\t      return this.appService.GetList(id);\n\t    } catch (error) {\n\t      Logger.error(error);\n\t    }\n\t  }\n\t  @Get(':id')\n\t  getTodoList(@Param('id') listId: string): TodoList {\n", "    return this.appService.GetList(listId);\n\t  }\n\t  @Delete(':id')\n\t  @UsePipes(new ValidationPipe())\n\t  deleteList(@Param('id') listId: string): string {\n\t    this.appService.RemoveList(listId);\n\t    return 'done';\n\t  }\n\t  @Put(':id')\n\t  @UsePipes(new ValidationPipe())\n", "  updateList(\n\t    @Param('id') listId: string,\n\t    @Body('Name') newName: string,\n\t  ): TodoList {\n\t    this.appService.UpdateListName(listId, newName);\n\t    return this.appService.GetList(listId);\n\t  }\n\t  @Post(':id/task')\n\t  @UsePipes(new ValidationPipe())\n\t  createTask(@Body() task: Task, @Param('id') listId: string): string {\n", "    const id = this.appService.AddTask(listId, task);\n\t    return id;\n\t  }\n\t}\n"]}
{"filename": "src/todolist/todolist.service.ts", "chunked_list": ["import { Injectable, Logger } from '@nestjs/common';\n\timport { v4 as uuidv4 } from 'uuid';\n\timport ITodoListActions from '../models/todolist/todolist-actions.module';\n\timport IList from '../models/todolist/todolist.module';\n\timport TodoList from '../models/todolist/todolist';\n\timport Task from '../models/task/task';\n\timport { listIdValidation } from 'src/utils';\n\t@Injectable()\n\texport class TodoListService implements ITodoListActions {\n\t  private RAMMemory: Record<string, TodoList> = {};\n", "  AddList(list: IList): string {\n\t    const listId = uuidv4();\n\t    this.RAMMemory[listId] = { Name: list.Name, Id: listId, Tasks: [] };\n\t    Logger.log(\n\t      `Added new list, listName: ${this.RAMMemory[listId].Name}, listId: ${listId}`,\n\t    );\n\t    return listId;\n\t  }\n\t  RemoveList(listId: string): void {\n\t    listIdValidation(this.RAMMemory, listId);\n", "    delete this.RAMMemory[listId];\n\t  }\n\t  GetList(listId: string): TodoList | undefined {\n\t    listIdValidation(this.RAMMemory, listId);\n\t    return this.RAMMemory[listId];\n\t  }\n\t  UpdateListName(listId: string, listNewName: string): void {\n\t    listIdValidation(this.RAMMemory, listId);\n\t    this.RAMMemory[listId].Name = listNewName;\n\t  }\n", "  AddTask(listId: string, task: Task): string {\n\t    listIdValidation(this.RAMMemory, listId);\n\t    const taskId = uuidv4();\n\t    task.taskId = taskId;\n\t    this.RAMMemory[listId].Tasks.push(task);\n\t    Logger.log(`Added new Task, ${task.description} to the list: ${listId}`);\n\t    return taskId;\n\t  }\n\t}\n"]}
