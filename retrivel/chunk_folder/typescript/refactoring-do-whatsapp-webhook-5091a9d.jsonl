{"filename": "tests/wehbook.test.ts", "chunked_list": ["import { Webhook } from '../src';\n\tdescribe('WhatsApp Cloud API webhook suite', () => {\n\t  let webhook: Webhook;\n\t  beforeEach(() => {\n\t    webhook = new Webhook({\n\t      endpoint: '/webhook',\n\t      port: 3000,\n\t      verificationToken: '123abc',\n\t      observer: () => {},\n\t    });\n", "  });\n\t  it('Should defined a webhook instance', () => {\n\t    const sut = webhook;\n\t    expect(sut).toBeDefined();\n\t  });\n\t});\n"]}
{"filename": "src/index.ts", "chunked_list": ["export { Logger } from './logger';\n\texport * from './webhook';\n"]}
{"filename": "src/webhook/index.ts", "chunked_list": ["export { MessageType } from './enums';\n\texport { Webhook } from './webhook';\n\texport * from './interfaces';\n"]}
{"filename": "src/webhook/webhook.ts", "chunked_list": ["import { IncomingMessage, ServerResponse } from 'node:http';\n\timport { ReceivedMessage } from './interfaces/received-message.interface';\n\timport { WebhookOptions } from './interfaces';\n\timport { MessageProccesor } from './utils';\n\timport { HttpServer } from '../server';\n\timport { Logger } from '../logger';\n\texport class Webhook {\n\t  constructor(private readonly options: WebhookOptions) {}\n\t  async run() {\n\t    const server = new HttpServer();\n", "    server.get(this.options.endpoint, (req: IncomingMessage, res: ServerResponse) => {\n\t      Logger.log('Entro');\n\t      const requestPath = new URL(req.url as string, `https://${req.headers.host}`);\n\t      const verifyToken = requestPath.searchParams.get('hub.verify_token');\n\t      const challenge = requestPath.searchParams.get('hub.challenge');\n\t      if (verifyToken && verifyToken === this.options.verificationToken) {\n\t        res.write(challenge);\n\t        Logger.log('Cloud API Token has been successfully verified.');\n\t      } else {\n\t        res.writeHead(400);\n", "      }\n\t      return res.end();\n\t    });\n\t    server.post(this.options.endpoint, (req: IncomingMessage, res: ServerResponse) => {\n\t      let body: any = '';\n\t      req.on('data', (chunk: any) => {\n\t        body += chunk.toString();\n\t      });\n\t      req.on('end', () => {\n\t        body = JSON.parse(body);\n", "        const isInvalidMessage = !body.object || !body.entry?.[0]?.changes?.[0]?.value;\n\t        if (isInvalidMessage) {\n\t          res.writeHead(400);\n\t          return res.end();\n\t        }\n\t        const isStatusMessage = body?.entry?.[0]?.changes?.[0]?.value?.statuses;\n\t        if (isStatusMessage) {\n\t          res.writeHead(202);\n\t          return res.end();\n\t        }\n", "        Logger.log('New message received');\n\t        const receivedMessage = body as ReceivedMessage;\n\t        const proccessedMessage = MessageProccesor.process(receivedMessage);\n\t        this.options.observer(proccessedMessage);\n\t        res.writeHead(200);\n\t        return res.end();\n\t      });\n\t    });\n\t    return new Promise((resolve) => {\n\t      server.listen(this.options.port, () => {\n", "        resolve(`Webhook is running on port ${this.options.port}`);\n\t      });\n\t    });\n\t  }\n\t}\n"]}
{"filename": "src/webhook/utils/message-proccesor.util.ts", "chunked_list": ["import { ReceivedMessage, ProcessedMessage } from '../interfaces';\n\timport { MessageType } from '../enums';\n\texport class MessageProccesor {\n\t  static process(message: ReceivedMessage): ProcessedMessage {\n\t    const currentMessage = message.entry[0].changes[0].value.messages[0];\n\t    const messageAuthor = message.entry[0].changes[0].value.contacts[0].profile.name;\n\t    let proccessedMessage: ProcessedMessage;\n\t    switch (currentMessage.type) {\n\t      case MessageType.text:\n\t        proccessedMessage = {\n", "          id: currentMessage.id,\n\t          from: currentMessage.from,\n\t          name: messageAuthor,\n\t          timestamp: currentMessage.timestamp,\n\t          data: currentMessage[currentMessage.type],\n\t          type: MessageType.text,\n\t        };\n\t        break;\n\t      case MessageType.image:\n\t      case MessageType.document:\n", "      case MessageType.audio:\n\t      case MessageType.video:\n\t      case MessageType.sticker:\n\t      case MessageType.location:\n\t      case MessageType.contacts:\n\t        proccessedMessage = {\n\t          id: currentMessage.id,\n\t          from: currentMessage.from,\n\t          name: messageAuthor,\n\t          timestamp: currentMessage.timestamp,\n", "          data: currentMessage[currentMessage.type],\n\t          type: MessageType[currentMessage.type as MessageType],\n\t        };\n\t        break;\n\t      case MessageType.interactive:\n\t        proccessedMessage = {\n\t          id: currentMessage.id,\n\t          from: currentMessage.from,\n\t          name: messageAuthor,\n\t          timestamp: currentMessage.timestamp,\n", "          data: currentMessage[currentMessage.type],\n\t          type: MessageType[currentMessage.type as MessageType],\n\t        };\n\t        break;\n\t      case MessageType.order:\n\t        proccessedMessage = {\n\t          id: currentMessage.id,\n\t          from: currentMessage.from,\n\t          name: messageAuthor,\n\t          timestamp: currentMessage.timestamp,\n", "          data: {\n\t            product_items: currentMessage[currentMessage.type].product_items,\n\t            catalog_id: currentMessage[currentMessage.type].catalog_id,\n\t          },\n\t          type: MessageType[currentMessage.type as MessageType],\n\t        };\n\t        break;\n\t      default:\n\t        throw new Error(`Invalid message type: ${currentMessage.type}`);\n\t    }\n", "    if (currentMessage.context) {\n\t      proccessedMessage.context = currentMessage.context;\n\t    }\n\t    return proccessedMessage;\n\t  }\n\t}\n"]}
{"filename": "src/webhook/utils/index.ts", "chunked_list": ["export { MessageProccesor } from './message-proccesor.util';\n"]}
{"filename": "src/webhook/interfaces/received-message.interface.ts", "chunked_list": ["import { MessageType } from '../enums';\n\tinterface Metadata {\n\t  display_phone_number: string;\n\t  phone_number_id: string;\n\t}\n\tinterface Value {\n\t  messaging_product: string;\n\t  metadata: Metadata;\n\t  contacts: Contact[];\n\t  messages: Message[];\n", "}\n\tinterface Profile {\n\t  name: string;\n\t}\n\tinterface Contact {\n\t  profile: Profile;\n\t  wa_id: string;\n\t}\n\tinterface Message {\n\t  from: string;\n", "  id: string;\n\t  timestamp: string;\n\t  type: MessageType;\n\t  [key: string]: any;\n\t}\n\tinterface Changes {\n\t  value: Value;\n\t  field: string;\n\t}\n\tinterface Entry {\n", "  id: string;\n\t  changes: Changes[];\n\t}\n\texport interface ReceivedMessage {\n\t  object: string;\n\t  entry: Entry[];\n\t}\n"]}
{"filename": "src/webhook/interfaces/processed-message.interface.ts", "chunked_list": ["import { MessageType } from '../enums';\n\texport interface ProcessedMessage {\n\t  id: string;\n\t  from: string;\n\t  name: string;\n\t  type: MessageType;\n\t  data: any;\n\t  timestamp: string;\n\t  context?: any;\n\t}\n"]}
{"filename": "src/webhook/interfaces/index.ts", "chunked_list": ["export { ProcessedMessage } from './processed-message.interface';\n\texport { ReceivedMessage } from './received-message.interface';\n\texport { WebhookOptions } from './webhook-options';\n\texport * from './messages';\n"]}
{"filename": "src/webhook/interfaces/webhook-options.ts", "chunked_list": ["type MessageObserver = (message: any) => void;\n\texport interface WebhookOptions {\n\t  endpoint: string;\n\t  port: number;\n\t  verificationToken: string;\n\t  observer: MessageObserver;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/sticker-message.interface.ts", "chunked_list": ["import { MediaMessage } from \"./base.interface\";\n\texport interface StickerMessage extends MediaMessage {\n\t  animated: boolean;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/contact-message.interface.ts", "chunked_list": ["interface Name {\n\t  first_name: string;\n\t  formatted_name: string;\n\t}\n\tinterface Phone {\n\t  phone: string;\n\t  type: string;\n\t}\n\texport interface ContactMessage {\n\t  name: Name;\n", "  phones: Phone[];\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/text-message.interface.ts", "chunked_list": ["export interface TextMessage {\n\t  body: string;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/base.interface.ts", "chunked_list": ["export interface Reply {\n\t  id: string;\n\t  title: string;\n\t}\n\texport interface MediaMessage {\n\t  id: string;\n\t  sha256: string;\n\t  mime_type: string;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/document-message.interface.ts", "chunked_list": ["import { MediaMessage } from \"./base.interface\";\n\texport interface DocumentMessage extends MediaMessage {\n\t  filename: string;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/location-message.interface.ts", "chunked_list": ["export interface LocationMessage {\n\t  latitude: string;\n\t  longitude: string;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/image-message.interface.ts", "chunked_list": ["import { MediaMessage } from \"./base.interface\";\n\texport interface ImageMessage extends MediaMessage {}\n"]}
{"filename": "src/webhook/interfaces/messages/index.ts", "chunked_list": ["export {\n\t  InteractiveMessage,\n\t  ButtonReply,\n\t  ListReply,\n\t} from \"./interactive-message.interface\";\n\texport { DocumentMessage } from \"./document-message.interface\";\n\texport { LocationMessage } from \"./location-message.interface\";\n\texport { StickerMessage } from \"./sticker-message.interface\";\n\texport { ContactMessage } from \"./contact-message.interface\";\n\texport { ImageMessage } from \"./image-message.interface\";\n", "export { AudioMessage } from \"./audio-message.interface\";\n\texport { OrderMessage } from \"./order-message.interface\";\n\texport { VideoMessage } from \"./video-message.interface\";\n\texport { TextMessage } from \"./text-message.interface\";\n"]}
{"filename": "src/webhook/interfaces/messages/interactive-message.interface.ts", "chunked_list": ["import { Reply } from \"./base.interface\";\n\texport interface ListReply extends Reply {\n\t  description: string;\n\t}\n\texport interface ButtonReply extends Reply {}\n\texport interface InteractiveMessage {\n\t  type: string;\n\t  list_reply?: ListReply;\n\t  button_reply?: ButtonReply;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/audio-message.interface.ts", "chunked_list": ["import { MediaMessage } from \"./base.interface\";\n\texport interface AudioMessage extends MediaMessage {\n\t  voice: boolean;\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/order-message.interface.ts", "chunked_list": ["interface ProductItem {\n\t  product_retailer_id: string;\n\t  quantity: number;\n\t  item_price: number;\n\t  currency: string;\n\t}\n\texport interface OrderMessage {\n\t  catalog_id: string;\n\t  product_items: ProductItem[];\n\t}\n"]}
{"filename": "src/webhook/interfaces/messages/video-message.interface.ts", "chunked_list": ["import { MediaMessage } from \"./base.interface\";\n\texport interface VideoMessage extends MediaMessage {}\n"]}
{"filename": "src/webhook/enums/message-type.enum.ts", "chunked_list": ["export enum MessageType {\n\t  message = 'message',\n\t  text = 'text',\n\t  image = 'image',\n\t  document = 'document',\n\t  audio = 'audio',\n\t  order = 'order',\n\t  video = 'video',\n\t  sticker = 'sticker',\n\t  location = 'location',\n", "  contacts = 'contacts',\n\t  interactive = 'interactive',\n\t  button_reply = 'button_reply',\n\t  list_reply = 'list_reply',\n\t}\n"]}
{"filename": "src/webhook/enums/index.ts", "chunked_list": ["export { MessageType } from './message-type.enum';\n"]}
{"filename": "src/server/http-server.ts", "chunked_list": ["import { IncomingMessage, ServerResponse, createServer } from 'http';\n\timport { RequestHandler, Route } from './types';\n\texport class HttpServer {\n\t  private routes: Route[] = [];\n\t  public use(handler: RequestHandler) {\n\t    this.routes.push({ method: 'USE', path: '', handler });\n\t  }\n\t  public get(path: string, handler: RequestHandler) {\n\t    this.routes.push({ method: 'GET', path, handler });\n\t  }\n", "  public post(path: string, handler: RequestHandler) {\n\t    this.routes.push({ method: 'POST', path, handler });\n\t  }\n\t  public listen(port: number, callback?: () => void) {\n\t    const server = createServer((req: IncomingMessage, res: ServerResponse) => {\n\t      console.log(req.url);\n\t      const matchingRoutes = this.routes.filter(\n\t        (route) =>\n\t          (route.path === req.url?.substring(0, route.path.length) || route.path === '*') &&\n\t          (route.method === req.method || route.method === 'USE'),\n", "      );\n\t      let currentRoute = 0;\n\t      const next = () => {\n\t        currentRoute++;\n\t        if (currentRoute < matchingRoutes.length) {\n\t          matchingRoutes[currentRoute].handler(req, res, next);\n\t        }\n\t      };\n\t      if (matchingRoutes.length > 0) {\n\t        matchingRoutes[currentRoute].handler(req, res, next);\n", "      } else {\n\t        res.writeHead(404, { 'Content-Type': 'application/json' });\n\t        res.end(JSON.stringify({ statusCode: 404, message: 'Resource not found' }));\n\t      }\n\t    });\n\t    server.listen(port, callback);\n\t  }\n\t}\n"]}
{"filename": "src/server/index.ts", "chunked_list": ["export { HttpServer } from './http-server';\n"]}
{"filename": "src/server/types/index.ts", "chunked_list": ["import { IncomingMessage, ServerResponse } from 'node:http';\n\texport type RequestHandler = (req: IncomingMessage, res: ServerResponse, next: () => void) => void;\n\texport type Route = {\n\t  method: string;\n\t  path: string;\n\t  handler: RequestHandler;\n\t};\n"]}
{"filename": "src/logger/logger.enum.ts", "chunked_list": ["export enum LogLevel {\n\t  INFO = 'INFO',\n\t  ERROR = 'ERROR',\n\t  WARNING = 'WARNING',\n\t}\n"]}
{"filename": "src/logger/logger.ts", "chunked_list": ["import { LogLevel } from './logger.enum';\n\texport class Logger {\n\t  static log(message: any): void {\n\t    const date = new Date().toISOString();\n\t    console.log({\n\t      level: LogLevel.INFO,\n\t      message: `${LogLevel.INFO} [${date}]: ${message}`,\n\t      date,\n\t    });\n\t  }\n", "  static error(message: any): void {\n\t    const date = new Date().toISOString();\n\t    console.log({\n\t      level: LogLevel.ERROR,\n\t      message: `${LogLevel.ERROR} [${date}]: ${message}`,\n\t      date,\n\t    });\n\t  }\n\t  static warning(message: any): void {\n\t    const date = new Date().toISOString();\n", "    console.log({\n\t      level: LogLevel.WARNING,\n\t      message: `${LogLevel.WARNING} [${date}]: ${message}`,\n\t      date,\n\t    });\n\t  }\n\t}\n"]}
{"filename": "src/logger/index.ts", "chunked_list": ["export { LogLevel } from './logger.enum';\n\texport { Logger } from './logger';\n"]}
