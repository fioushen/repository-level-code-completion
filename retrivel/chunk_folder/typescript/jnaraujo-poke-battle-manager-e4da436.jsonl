{"filename": "vitest.config.ts", "chunked_list": ["import { defineConfig } from \"vitest/config\";\n\texport default defineConfig({\n\t  test: {},\n\t});\n"]}
{"filename": "src/app/value_objects/BattleStats.ts", "chunked_list": ["export class BattleStats {\n\t  private _attack: number;\n\t  private _defense: number;\n\t  private _speed: number;\n\t  constructor(props: { attack: number; defense: number; speed: number }) {\n\t    this._attack = props.attack;\n\t    this._defense = props.defense;\n\t    this._speed = props.speed;\n\t  }\n\t  get attack() {\n", "    return this._attack;\n\t  }\n\t  get defense() {\n\t    return this._defense;\n\t  }\n\t  get speed() {\n\t    return this._speed;\n\t  }\n\t  equals(other: BattleStats): boolean {\n\t    return (\n", "      this.attack === other.attack &&\n\t      this.defense === other.defense &&\n\t      this.speed === other.speed\n\t    );\n\t  }\n\t}\n"]}
{"filename": "src/app/value_objects/PokemonMove.ts", "chunked_list": ["export class PokemonMove {\n\t  private _name: string;\n\t  private _type: string;\n\t  private _category: string;\n\t  private _power: number;\n\t  private _accuracy: number;\n\t  private _powerPoints: number;\n\t  constructor(props: {\n\t    name: string;\n\t    type: string;\n", "    category: string;\n\t    power: number;\n\t    accuracy: number;\n\t    powerPoints: number;\n\t  }) {\n\t    this._name = props.name;\n\t    this._type = props.type;\n\t    this._category = props.category;\n\t    this._power = props.power;\n\t    this._accuracy = props.accuracy;\n", "    this._powerPoints = props.powerPoints;\n\t  }\n\t  get name() {\n\t    return this._name;\n\t  }\n\t  get type() {\n\t    return this._type;\n\t  }\n\t  get category() {\n\t    return this._category;\n", "  }\n\t  get power() {\n\t    return this._power;\n\t  }\n\t  get accuracy() {\n\t    return this._accuracy;\n\t  }\n\t  get powerPoints() {\n\t    return this._powerPoints;\n\t  }\n", "}\n"]}
{"filename": "src/app/repositories/BattleRepository.ts", "chunked_list": ["import { Battle } from \"../entities/battle/Battle\";\n\timport { Repository } from \"./Repository\";\n\texport interface BattleRepository extends Repository<Battle> {}\n"]}
{"filename": "src/app/repositories/LeagueRepository.ts", "chunked_list": ["import { League } from \"../entities/league/League\";\n\timport { Repository } from \"./Repository\";\n\texport interface LeagueRepository extends Repository<League> {}\n"]}
{"filename": "src/app/repositories/TournamentRepository.ts", "chunked_list": ["import { Tournament } from \"../entities/tournament/Tournament\";\n\timport { Repository } from \"./Repository\";\n\texport interface TournamentRepository extends Repository<Tournament> {}\n"]}
{"filename": "src/app/repositories/PokemonRepository.ts", "chunked_list": ["import { Pokemon } from \"../entities/pokemon/Pokemon\";\n\timport { Repository } from \"./Repository\";\n\texport interface PokemonRepository extends Repository<Pokemon> {\n\t  findByTrainerId(trainerId: string): Promise<Pokemon[]>;\n\t}\n"]}
{"filename": "src/app/repositories/Trainer.ts", "chunked_list": ["import { Trainer } from \"../entities/trainer/Trainer\";\n\timport { Repository } from \"./Repository\";\n\texport interface TrainerRepository extends Repository<Trainer> {}\n"]}
{"filename": "src/app/repositories/ItemRepository.ts", "chunked_list": ["import { Item } from \"../entities/item/Item\";\n\timport { Repository } from \"./Repository\";\n\texport interface ItemRepository extends Repository<Item> {}\n"]}
{"filename": "src/app/repositories/Repository.ts", "chunked_list": ["export interface Repository<T> {\n\t  findAll(): Promise<T[]>;\n\t  findById(id: string): Promise<T | null>;\n\t  save(entity: T): Promise<void>;\n\t  delete(entity: T): Promise<void>;\n\t  update(entity: T): Promise<void>;\n\t}\n"]}
{"filename": "src/app/__tests__/repositories/InMemoryTrainerRepository.ts", "chunked_list": ["import { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { TrainerRepository } from \"../../repositories/Trainer\";\n\texport class InMemoryTrainerRepository implements TrainerRepository {\n\t  private trainers: Trainer[] = [];\n\t  async findAll() {\n\t    return this.trainers;\n\t  }\n\t  async findById(id: string) {\n\t    return this.trainers.find((trainer) => trainer.id === id) || null;\n\t  }\n", "  async save(entity: Trainer) {\n\t    this.trainers.push(entity);\n\t  }\n\t  async delete(entity: Trainer) {\n\t    this.trainers = this.trainers.filter((trainer) => trainer.id !== entity.id);\n\t  }\n\t  async update(entity: Trainer) {\n\t    const index = this.trainers.findIndex(\n\t      (trainer) => trainer.id === entity.id\n\t    );\n", "    this.trainers[index] = entity;\n\t  }\n\t}\n"]}
{"filename": "src/app/__tests__/repositories/InMemoryTournamentRepository.ts", "chunked_list": ["import { Tournament } from \"../../entities/tournament/Tournament\";\n\timport { TournamentRepository } from \"../../repositories/TournamentRepository\";\n\texport class InMemoryTournamentRepository implements TournamentRepository {\n\t  private tournaments: Tournament[] = [];\n\t  async save(tournament: Tournament) {\n\t    this.tournaments.push(tournament);\n\t  }\n\t  async findAll() {\n\t    return this.tournaments;\n\t  }\n", "  async findById(id: string) {\n\t    return this.tournaments.find((tournament) => tournament.id === id) || null;\n\t  }\n\t  async delete(entity: Tournament) {\n\t    this.tournaments = this.tournaments.filter(\n\t      (tournament) => tournament.id !== entity.id\n\t    );\n\t  }\n\t  async update(entity: Tournament) {\n\t    const index = this.tournaments.findIndex(\n", "      (tournament) => tournament.id === entity.id\n\t    );\n\t    this.tournaments[index] = entity;\n\t  }\n\t}\n"]}
{"filename": "src/app/__tests__/repositories/InMemoryLeagueRepository.ts", "chunked_list": ["import { League } from \"../../entities/league/League\";\n\timport { LeagueRepository } from \"../../repositories/LeagueRepository\";\n\texport class InMemoryLeagueRepository implements LeagueRepository {\n\t  private leagues: League[] = [];\n\t  async findAll() {\n\t    return this.leagues;\n\t  }\n\t  async findById(id: string) {\n\t    return this.leagues.find((league) => league.id === id) || null;\n\t  }\n", "  async save(entity: League) {\n\t    this.leagues.push(entity);\n\t  }\n\t  async delete(entity: League) {\n\t    this.leagues = this.leagues.filter((league) => league.id !== entity.id);\n\t  }\n\t  async update(entity: League) {\n\t    const index = this.leagues.findIndex((league) => league.id === entity.id);\n\t    this.leagues[index] = entity;\n\t  }\n", "}\n"]}
{"filename": "src/app/__tests__/repositories/InMemoryPokemonRepository.ts", "chunked_list": ["import { Pokemon } from \"../../entities/pokemon/Pokemon\";\n\timport { PokemonRepository } from \"../../repositories/PokemonRepository\";\n\texport class InMemoryPokemonRepository implements PokemonRepository {\n\t  private pokemons: Pokemon[] = [];\n\t  async findByTrainerId(trainerId: string): Promise<Pokemon[]> {\n\t    return this.pokemons.filter((pokemon) => pokemon.trainerID === trainerId);\n\t  }\n\t  async findAll(): Promise<Pokemon[]> {\n\t    return this.pokemons;\n\t  }\n", "  async findById(id: string): Promise<Pokemon | null> {\n\t    return this.pokemons.find((pokemon) => pokemon.id === id) || null;\n\t  }\n\t  async save(entity: Pokemon): Promise<void> {\n\t    this.pokemons.push(entity);\n\t  }\n\t  async delete(entity: Pokemon): Promise<void> {\n\t    this.pokemons = this.pokemons.filter((pokemon) => pokemon.id !== entity.id);\n\t  }\n\t  async update(entity: Pokemon): Promise<void> {\n", "    const index = this.pokemons.findIndex(\n\t      (pokemon) => pokemon.id === entity.id\n\t    );\n\t    this.pokemons[index] = entity;\n\t  }\n\t}\n"]}
{"filename": "src/app/__tests__/repositories/InMemoryBattleRepository.ts", "chunked_list": ["import { Battle } from \"../../entities/battle/Battle\";\n\timport { BattleRepository } from \"../../repositories/BattleRepository\";\n\texport class InMemoryBattleRepository implements BattleRepository {\n\t  private battles: Battle[] = [];\n\t  async findAll() {\n\t    return this.battles;\n\t  }\n\t  async findById(id: string) {\n\t    return this.battles.find((battle) => battle.id === id) || null;\n\t  }\n", "  async save(entity: Battle) {\n\t    this.battles.push(entity);\n\t  }\n\t  async delete(entity: Battle) {\n\t    this.battles = this.battles.filter((battle) => battle.id !== entity.id);\n\t  }\n\t  async update(entity: Battle) {\n\t    const index = this.battles.findIndex((battle) => battle.id === entity.id);\n\t    this.battles[index] = entity;\n\t  }\n", "}\n"]}
{"filename": "src/app/entities/item/Item.ts", "chunked_list": ["export class Item {\n\t  _id: string;\n\t  _name: string;\n\t  _increaseLife: number;\n\t  _increaseAttack: number;\n\t  _increaseDefense: number;\n\t  _increaseSpeed: number;\n\t  constructor(props: {\n\t    id: string;\n\t    name: string;\n", "    increaseLife: number;\n\t    increaseAttack: number;\n\t    increaseDefense: number;\n\t    increaseSpeed: number;\n\t  }) {\n\t    this._id = props.id;\n\t    this._name = props.name;\n\t    this._increaseLife = props.increaseLife;\n\t    this._increaseAttack = props.increaseAttack;\n\t    this._increaseDefense = props.increaseDefense;\n", "    this._increaseSpeed = props.increaseSpeed;\n\t  }\n\t  // Getters and setters\n\t  get id(): string {\n\t    return this._id;\n\t  }\n\t  set id(id: string) {\n\t    this._id = id;\n\t  }\n\t  get name(): string {\n", "    return this._name;\n\t  }\n\t  set name(name: string) {\n\t    this._name = name;\n\t  }\n\t  get increaseLife(): number {\n\t    return this._increaseLife;\n\t  }\n\t  set increaseLife(increaseLife: number) {\n\t    this._increaseLife = increaseLife;\n", "  }\n\t  get increaseAttack(): number {\n\t    return this._increaseAttack;\n\t  }\n\t  set increaseAttack(increaseAttack: number) {\n\t    this._increaseAttack = increaseAttack;\n\t  }\n\t  get increaseDefense(): number {\n\t    return this._increaseDefense;\n\t  }\n", "  set increaseDefense(increaseDefense: number) {\n\t    this._increaseDefense = increaseDefense;\n\t  }\n\t  get increaseSpeed(): number {\n\t    return this._increaseSpeed;\n\t  }\n\t  set increaseSpeed(increaseSpeed: number) {\n\t    this._increaseSpeed = increaseSpeed;\n\t  }\n\t  // Methods\n", "  equals(item: Item): boolean {\n\t    return this._id === item.id;\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/item/Item.spec.ts", "chunked_list": ["import { describe, it, expect, beforeEach } from \"vitest\";\n\timport { Item } from \"./Item\";\n\tdescribe(\"Item\", () => {\n\t  let item: Item;\n\t  beforeEach(() => {\n\t    item = new Item({\n\t      id: \"1\",\n\t      name: \"Potion\",\n\t      increaseLife: 20,\n\t      increaseAttack: 0,\n", "      increaseDefense: 0,\n\t      increaseSpeed: 0,\n\t    });\n\t  });\n\t  it(\"should be created\", () => {\n\t    expect(item).toBeDefined();\n\t  });\n\t  it(\"should be equals\", () => {\n\t    const item2 = new Item({\n\t      id: \"1\",\n", "      name: \"Potion\",\n\t      increaseLife: 20,\n\t      increaseAttack: 0,\n\t      increaseDefense: 0,\n\t      increaseSpeed: 0,\n\t    });\n\t    expect(item.equals(item2)).toBeTruthy();\n\t  });\n\t  it(\"should not be equals\", () => {\n\t    const item2 = new Item({\n", "      id: \"2\",\n\t      name: \"Potion\",\n\t      increaseLife: 20,\n\t      increaseAttack: 0,\n\t      increaseDefense: 0,\n\t      increaseSpeed: 0,\n\t    });\n\t    expect(item.equals(item2)).toBeFalsy();\n\t  });\n\t});\n"]}
{"filename": "src/app/entities/tournament/Tournament.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { League } from \"../league/League\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\timport { Battle } from \"../battle/Battle\";\n\timport { Tournament } from \"./Tournament\";\n\tdescribe(\"Tournament\", () => {\n\t  let tournament: Tournament;\n\t  let league: League;\n\t  let trainer1: Trainer;\n\t  let trainer2: Trainer;\n", "  beforeEach(() => {\n\t    trainer1 = new Trainer({\n\t      id: \"1\",\n\t      name: \"Ash\",\n\t      city: \"Pallet Town\",\n\t      age: 18,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: null,\n", "    });\n\t    trainer2 = new Trainer({\n\t      id: \"2\",\n\t      name: \"Misty\",\n\t      city: \"Cerulean City\",\n\t      age: 20,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: null,\n", "    });\n\t    league = new League({\n\t      id: \"1\",\n\t      name: \"Poke League\",\n\t      registrationFee: 100,\n\t      prize: 1000,\n\t    });\n\t    tournament = new Tournament({\n\t      id: \"1\",\n\t      name: \"Poke Global Tournament\",\n", "      description:\n\t        \"Poke Global Tournament is a global tournament for all trainers\",\n\t    });\n\t    tournament.leagues = [league];\n\t    tournament.trainers = [trainer1, trainer2];\n\t  });\n\t  it(\"should start an tournament\", () => {\n\t    expect(tournament.startedAt).toBeNull();\n\t    tournament.start();\n\t    expect(tournament.startedAt).not.toBeNull();\n", "  });\n\t  it(\"should finish an tournament\", () => {\n\t    expect(tournament.finishedAt).toBeNull();\n\t    tournament.finish();\n\t    expect(tournament.finishedAt).not.toBeNull();\n\t  });\n\t  it(\"should check if an tournament is finished\", () => {\n\t    expect(tournament.isFinished()).toBeFalsy();\n\t    tournament.finish();\n\t    expect(tournament.isFinished()).toBeTruthy();\n", "  });\n\t  it(\"should check if an tournament is equal to another tournament\", () => {\n\t    const tournament2 = new Tournament({\n\t      id: \"1\",\n\t      name: \"Poke Global Tournament\",\n\t      description:\n\t        \"Poke Global Tournament is a global tournament for all trainers\",\n\t    });\n\t    tournament2.leagues = [league];\n\t    tournament2.trainers = [trainer1, trainer2];\n", "    expect(tournament.equals(tournament2)).toBeTruthy();\n\t  });\n\t  it(\"should check if an tournament is not equal to another tournament\", () => {\n\t    const tournament2 = new Tournament({\n\t      id: \"2\",\n\t      name: \"Poke Global Tournament\",\n\t      description:\n\t        \"Poke Global Tournament is a global tournament for all trainers\",\n\t    });\n\t    tournament2.leagues = [league];\n", "    tournament2.trainers = [trainer1, trainer2];\n\t    expect(tournament.equals(tournament2)).toBeFalsy();\n\t  });\n\t});\n"]}
{"filename": "src/app/entities/tournament/Tournament.ts", "chunked_list": ["import { League } from \"../league/League\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\texport class Tournament {\n\t  _id: string;\n\t  _name: string;\n\t  _description: string;\n\t  _createdAt: Date | null;\n\t  _startedAt: Date | null;\n\t  _finishedAt: Date | null;\n\t  _trainers: Trainer[];\n", "  _leagues: League[];\n\t  constructor(props: { id: string; name: string; description: string }) {\n\t    this._id = props.id;\n\t    this._name = props.name;\n\t    this._description = props.description;\n\t    this._trainers = [];\n\t    this._leagues = [];\n\t    this._createdAt = null;\n\t    this._startedAt = null;\n\t    this._finishedAt = null;\n", "  }\n\t  // Methods\n\t  start() {\n\t    this._startedAt = new Date();\n\t  }\n\t  finish() {\n\t    this._finishedAt = new Date();\n\t  }\n\t  isFinished() {\n\t    return this._finishedAt !== null;\n", "  }\n\t  equals(tournament: Tournament) {\n\t    return this._id === tournament.id;\n\t  }\n\t  // getters and setters\n\t  get id() {\n\t    return this._id;\n\t  }\n\t  set id(id: string) {\n\t    this._id = id;\n", "  }\n\t  get name() {\n\t    return this._name;\n\t  }\n\t  set name(name: string) {\n\t    this._name = name;\n\t  }\n\t  get description() {\n\t    return this._description;\n\t  }\n", "  set description(description: string) {\n\t    this._description = description;\n\t  }\n\t  get createdAt() {\n\t    return this._createdAt;\n\t  }\n\t  set createdAt(createdAt: Date | null) {\n\t    this._createdAt = createdAt;\n\t  }\n\t  get startedAt() {\n", "    return this._startedAt;\n\t  }\n\t  set startedAt(startedAt: Date | null) {\n\t    this._startedAt = startedAt;\n\t  }\n\t  get finishedAt() {\n\t    return this._finishedAt;\n\t  }\n\t  set finishedAt(finishedAt: Date | null) {\n\t    this._finishedAt = finishedAt;\n", "  }\n\t  get trainers() {\n\t    return this._trainers;\n\t  }\n\t  set trainers(trainers: Trainer[]) {\n\t    this._trainers = trainers;\n\t  }\n\t  get battles() {\n\t    return this._leagues;\n\t  }\n", "  set battles(battles: League[]) {\n\t    this._leagues = battles;\n\t  }\n\t  get leagues() {\n\t    return this._leagues;\n\t  }\n\t  set leagues(leagues: League[]) {\n\t    this._leagues = leagues;\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/battle/Battle.ts", "chunked_list": ["import { League } from \"../league/League\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\texport class Battle {\n\t  _id: string;\n\t  _trainer1: Trainer;\n\t  _trainer2: Trainer;\n\t  _league: League;\n\t  _winner: Trainer | null;\n\t  _loser: Trainer | null;\n\t  _createdAt: Date | null;\n", "  _startedAt: Date | null;\n\t  _finishedAt: Date | null;\n\t  constructor(props: {\n\t    id: string;\n\t    trainer1: Trainer;\n\t    trainer2: Trainer;\n\t    league: League;\n\t  }) {\n\t    this._id = props.id;\n\t    this._trainer1 = props.trainer1;\n", "    this._trainer2 = props.trainer2;\n\t    this._league = props.league;\n\t    this._winner = null;\n\t    this._loser = null;\n\t    this._createdAt = null;\n\t    this._startedAt = null;\n\t    this._finishedAt = null;\n\t  }\n\t  // Methods\n\t  start(): void {\n", "    this._startedAt = new Date();\n\t  }\n\t  finish(winner: Trainer, loser: Trainer): void {\n\t    this._finishedAt = new Date();\n\t    this._winner = winner;\n\t    this._loser = loser;\n\t  }\n\t  isFinished(): boolean {\n\t    return this._finishedAt !== null;\n\t  }\n", "  equals(battle: Battle): boolean {\n\t    return this._id === battle.id;\n\t  }\n\t  // getters and setters\n\t  get id(): string {\n\t    return this._id;\n\t  }\n\t  set id(id: string) {\n\t    this._id = id;\n\t  }\n", "  get trainer1() {\n\t    return this._trainer1;\n\t  }\n\t  set trainer1(trainer1: Trainer) {\n\t    this._trainer1 = trainer1;\n\t  }\n\t  get trainer2() {\n\t    return this._trainer2;\n\t  }\n\t  set trainer2(trainer2: Trainer) {\n", "    this._trainer2 = trainer2;\n\t  }\n\t  get winner() {\n\t    return this._winner;\n\t  }\n\t  set winner(winner: Trainer | null) {\n\t    this._winner = winner;\n\t  }\n\t  get loser() {\n\t    return this._loser;\n", "  }\n\t  set loser(loser: Trainer | null) {\n\t    this._loser = loser;\n\t  }\n\t  get createdAt() {\n\t    return this._createdAt;\n\t  }\n\t  set createdAt(createdAt: Date | null) {\n\t    this._createdAt = createdAt;\n\t  }\n", "  get startedAt() {\n\t    return this._startedAt;\n\t  }\n\t  set startedAt(startedAt: Date | null) {\n\t    this._startedAt = startedAt;\n\t  }\n\t  get finishedAt() {\n\t    return this._finishedAt;\n\t  }\n\t  set finishedAt(finishedAt: Date | null) {\n", "    this._finishedAt = finishedAt;\n\t  }\n\t  get league() {\n\t    return this._league;\n\t  }\n\t  set league(league: League) {\n\t    this._league = league;\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/battle/Battle.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { Battle } from \"./Battle\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\tdescribe(\"Battle\", () => {\n\t  let battle: Battle;\n\t  let trainer1: Trainer;\n\t  let trainer2: Trainer;\n\t  beforeEach(() => {\n\t    trainer1 = new Trainer({\n\t      id: \"1\",\n", "      name: \"Ash\",\n\t      city: \"Pallet\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: \"Kanto\",\n\t    });\n\t    trainer2 = new Trainer({\n\t      id: \"2\",\n", "      name: \"Misty\",\n\t      city: \"Cerulean\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: \"Kanto\",\n\t    });\n\t    battle = new Battle({\n\t      id: \"1\",\n", "      trainer1,\n\t      trainer2,\n\t    });\n\t  });\n\t  it(\"should start a battle\", () => {\n\t    expect(battle.startedAt).toBeNull();\n\t    battle.start();\n\t    expect(battle.startedAt).not.toBeNull();\n\t  });\n\t  it(\"should finish a battle\", () => {\n", "    expect(battle.finishedAt).toBeNull();\n\t    expect(battle.winner).toBeNull();\n\t    expect(battle.loser).toBeNull();\n\t    battle.finish(trainer1, trainer2);\n\t    expect(battle.finishedAt).not.toBeNull();\n\t    expect(battle.winner).toEqual(trainer1);\n\t    expect(battle.loser).toEqual(trainer2);\n\t  });\n\t  it(\"should check if a battle is finished\", () => {\n\t    expect(battle.isFinished()).toBe(false);\n", "    battle.finish(trainer1, trainer2);\n\t    expect(battle.isFinished()).toBe(true);\n\t  });\n\t  it(\"should check if a battle is equal to another battle\", () => {\n\t    const battle2 = new Battle({\n\t      id: \"2\",\n\t      trainer1,\n\t      trainer2,\n\t    });\n\t    expect(battle.equals(battle2)).toBe(false);\n", "    battle2.id = \"1\";\n\t    expect(battle.equals(battle2)).toBe(true);\n\t  });\n\t});\n"]}
{"filename": "src/app/entities/league/League.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { League } from \"./League\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\timport { Battle } from \"../battle/Battle\";\n\tdescribe(\"League\", () => {\n\t  let league: League;\n\t  let trainer1: Trainer;\n\t  let trainer2: Trainer;\n\t  let battle: Battle;\n\t  beforeEach(() => {\n", "    trainer1 = new Trainer({\n\t      id: \"1\",\n\t      name: \"Ash\",\n\t      city: \"Pallet Town\",\n\t      age: 18,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: \"Kanto\",\n\t    });\n", "    trainer2 = new Trainer({\n\t      id: \"2\",\n\t      name: \"Misty\",\n\t      city: \"Cerulean City\",\n\t      age: 20,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: \"Kanto\",\n\t    });\n", "    battle = new Battle({\n\t      id: \"1\",\n\t      trainer1,\n\t      trainer2,\n\t    });\n\t    league = new League({\n\t      id: \"1\",\n\t      battles: [battle],\n\t      trainers: [trainer1, trainer2],\n\t      registrationFee: 100,\n", "      prize: 1000,\n\t    });\n\t  });\n\t  it(\"should start a league\", () => {\n\t    expect(league.startedAt).toBeNull();\n\t    league.start();\n\t    expect(league.startedAt).not.toBeNull();\n\t  });\n\t  it(\"should finish a league\", () => {\n\t    expect(league.finishedAt).toBeNull();\n", "    league.finish();\n\t    expect(league.finishedAt).not.toBeNull();\n\t  });\n\t  it(\"should check if a league is finished\", () => {\n\t    expect(league.isFinished()).toBeFalsy();\n\t    league.finish();\n\t    expect(league.isFinished()).toBeTruthy();\n\t  });\n\t  it(\"should be equal to another league\", () => {\n\t    const anotherLeague = new League({\n", "      id: \"1\",\n\t      battles: [battle],\n\t      trainers: [trainer1, trainer2],\n\t      registrationFee: 100,\n\t      prize: 1000,\n\t    });\n\t    expect(league.equals(anotherLeague)).toBeTruthy();\n\t  });\n\t  it(\"should not be equal to another league\", () => {\n\t    const anotherLeague = new League({\n", "      id: \"2\",\n\t      battles: [battle],\n\t      trainers: [trainer1, trainer2],\n\t      registrationFee: 100,\n\t      prize: 1000,\n\t    });\n\t    expect(league.equals(anotherLeague)).toBeFalsy();\n\t  });\n\t});\n"]}
{"filename": "src/app/entities/league/League.ts", "chunked_list": ["import { Battle } from \"../battle/Battle\";\n\timport { Trainer } from \"../trainer/Trainer\";\n\texport class League {\n\t  _id: string;\n\t  _name: string;\n\t  _createdAt: Date | null;\n\t  _startedAt: Date | null;\n\t  _finishedAt: Date | null;\n\t  _registrationFee: number;\n\t  _prize: number;\n", "  _trainers: Trainer[];\n\t  _battles: Battle[];\n\t  constructor(props: {\n\t    id: string;\n\t    name: string;\n\t    registrationFee: number;\n\t    prize: number;\n\t  }) {\n\t    this._id = props.id;\n\t    this._registrationFee = props.registrationFee;\n", "    this._prize = props.prize;\n\t    this._name = props.name;\n\t    this._trainers = [];\n\t    this._battles = [];\n\t    this._createdAt = null;\n\t    this._startedAt = null;\n\t    this._finishedAt = null;\n\t  }\n\t  // Methods\n\t  start(): void {\n", "    this._startedAt = new Date();\n\t  }\n\t  finish(): void {\n\t    this._finishedAt = new Date();\n\t  }\n\t  isFinished(): boolean {\n\t    return this._finishedAt !== null;\n\t  }\n\t  equals(battle: League): boolean {\n\t    return this._id === battle.id;\n", "  }\n\t  // getters and setters\n\t  get id(): string {\n\t    return this._id;\n\t  }\n\t  set id(value: string) {\n\t    this._id = value;\n\t  }\n\t  get createdAt(): Date | null {\n\t    return this._createdAt;\n", "  }\n\t  set createdAt(value: Date | null) {\n\t    this._createdAt = value;\n\t  }\n\t  get startedAt(): Date | null {\n\t    return this._startedAt;\n\t  }\n\t  set startedAt(value: Date | null) {\n\t    this._startedAt = value;\n\t  }\n", "  get finishedAt(): Date | null {\n\t    return this._finishedAt;\n\t  }\n\t  set finishedAt(value: Date | null) {\n\t    this._finishedAt = value;\n\t  }\n\t  get registrationFee(): number {\n\t    return this._registrationFee;\n\t  }\n\t  set registrationFee(value: number) {\n", "    this._registrationFee = value;\n\t  }\n\t  get prize(): number {\n\t    return this._prize;\n\t  }\n\t  set prize(value: number) {\n\t    this._prize = value;\n\t  }\n\t  get trainers(): Trainer[] {\n\t    return this._trainers;\n", "  }\n\t  set trainers(value: Trainer[]) {\n\t    this._trainers = value;\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/pokemon/Pokemon.spec.ts", "chunked_list": ["import { beforeEach, describe, it, expect } from \"vitest\";\n\timport { Pokemon } from \"./Pokemon\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { PokemonMove } from \"../../value_objects/PokemonMove\";\n\tdescribe(\"Pokemon\", () => {\n\t  let pikachu: Pokemon;\n\t  let charmander: Pokemon;\n\t  beforeEach(() => {\n\t    pikachu = new Pokemon({\n\t      id: \"1\",\n", "      name: \"Pikachu\",\n\t      stats: new BattleStats({\n\t        attack: 100,\n\t        defense: 100,\n\t        speed: 100,\n\t      }),\n\t      level: 25,\n\t      life: 100,\n\t      moves: [\n\t        new PokemonMove({\n", "          name: \"Thunderbolt\",\n\t          power: 100,\n\t          accuracy: 100,\n\t          category: \"special\",\n\t          type: \"electric\",\n\t          powerPoints: 15,\n\t        }),\n\t        new PokemonMove({\n\t          name: \"Quick Attack\",\n\t          power: 40,\n", "          accuracy: 100,\n\t          category: \"physical\",\n\t          type: \"normal\",\n\t          powerPoints: 30,\n\t        }),\n\t      ],\n\t      trainerID: \"1\",\n\t      type: [\"Electric\"],\n\t    });\n\t    charmander = new Pokemon({\n", "      id: \"2\",\n\t      name: \"Charmander\",\n\t      stats: new BattleStats({\n\t        attack: 50,\n\t        defense: 45,\n\t        speed: 15,\n\t      }),\n\t      level: 25,\n\t      life: 100,\n\t      moves: [\n", "        new PokemonMove({\n\t          name: \"Ember\",\n\t          power: 40,\n\t          accuracy: 100,\n\t          category: \"special\",\n\t          type: \"fire\",\n\t          powerPoints: 25,\n\t        }),\n\t        new PokemonMove({\n\t          name: \"Scratch\",\n", "          power: 40,\n\t          accuracy: 100,\n\t          category: \"physical\",\n\t          type: \"normal\",\n\t          powerPoints: 35,\n\t        }),\n\t      ],\n\t      trainerID: \"1\",\n\t      type: [\"Fire\"],\n\t    });\n", "  });\n\t  it(\"should attack\", () => {\n\t    pikachu.attack(charmander);\n\t    const expectedDamage = pikachu.stats.attack - charmander.stats.defense;\n\t    expect(charmander.life).toBe(100 - expectedDamage);\n\t  });\n\t  it(\"should be awake\", () => {\n\t    expect(pikachu.isAwake()).toBeTruthy();\n\t  });\n\t  it(\"should be asleep\", () => {\n", "    pikachu.life = 0;\n\t    expect(pikachu.isAwake()).toBeFalsy();\n\t  });\n\t  it(\"should be created\", () => {\n\t    expect(pikachu).toBeDefined();\n\t  });\n\t  it(\"should be equal\", () => {\n\t    const pikachu2 = new Pokemon({\n\t      id: \"1\",\n\t      name: \"Pikachu\",\n", "      stats: new BattleStats({\n\t        attack: 100,\n\t        defense: 100,\n\t        speed: 100,\n\t      }),\n\t      level: 25,\n\t      life: 100,\n\t      moves: [\n\t        new PokemonMove({\n\t          name: \"Thunderbolt\",\n", "          power: 100,\n\t          accuracy: 100,\n\t          category: \"special\",\n\t          type: \"electric\",\n\t          powerPoints: 15,\n\t        }),\n\t        new PokemonMove({\n\t          name: \"Quick Attack\",\n\t          power: 40,\n\t          accuracy: 100,\n", "          category: \"physical\",\n\t          type: \"normal\",\n\t          powerPoints: 30,\n\t        }),\n\t      ],\n\t      trainerID: \"1\",\n\t      type: [\"Electric\"],\n\t    });\n\t    expect(pikachu.equals(pikachu2)).toBeTruthy();\n\t  });\n", "  it(\"should not be equal\", () => {\n\t    expect(pikachu.equals(charmander)).toBeFalsy();\n\t  });\n\t});\n"]}
{"filename": "src/app/entities/pokemon/Pokemon.ts", "chunked_list": ["import { isEqual } from \"lodash\";\n\timport { PokemonMove } from \"../../value_objects/PokemonMove\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\texport class Pokemon {\n\t  private _id: string;\n\t  private _name: string;\n\t  private _level: number;\n\t  private _life: number;\n\t  private _type: string[];\n\t  private _trainerID: string;\n", "  private _stats: BattleStats;\n\t  private _moves: PokemonMove[];\n\t  constructor(props: {\n\t    id: string;\n\t    name: string;\n\t    level: number;\n\t    life: number;\n\t    type: string[];\n\t    trainerID: string;\n\t    stats: BattleStats;\n", "    moves: PokemonMove[];\n\t  }) {\n\t    this._id = props.id;\n\t    this._name = props.name;\n\t    this._level = props.level;\n\t    this._life = props.life;\n\t    this._type = props.type;\n\t    this._trainerID = props.trainerID;\n\t    this._stats = props.stats;\n\t    this._moves = props.moves;\n", "  }\n\t  // Predicates\n\t  isAwake(): boolean {\n\t    return this.life > 0;\n\t  }\n\t  // Actions\n\t  attack(target: Pokemon): void {\n\t    const damage = this._stats.attack - target.stats.defense;\n\t    if (damage > 0) {\n\t      target.life -= damage;\n", "    }\n\t    if (target.life < 0) {\n\t      target.life = 0;\n\t    }\n\t  }\n\t  // Getters and setters\n\t  get id(): string {\n\t    return this._id;\n\t  }\n\t  set id(id: string) {\n", "    this._id = id;\n\t  }\n\t  get name(): string {\n\t    return this._name;\n\t  }\n\t  set name(name: string) {\n\t    this._name = name;\n\t  }\n\t  get level(): number {\n\t    return this._level;\n", "  }\n\t  set level(level: number) {\n\t    this._level = level;\n\t  }\n\t  get life(): number {\n\t    return this._life;\n\t  }\n\t  set life(life: number) {\n\t    this._life = life;\n\t  }\n", "  get type(): string[] {\n\t    return this._type;\n\t  }\n\t  set type(type: string[]) {\n\t    this._type = type;\n\t  }\n\t  get trainerID(): string {\n\t    return this._trainerID;\n\t  }\n\t  set trainerID(trainerID: string) {\n", "    this._trainerID = trainerID;\n\t  }\n\t  get stats(): BattleStats {\n\t    return this._stats;\n\t  }\n\t  set stats(stats: BattleStats) {\n\t    this._stats = stats;\n\t  }\n\t  get moves(): PokemonMove[] {\n\t    return this._moves;\n", "  }\n\t  set moves(moves: PokemonMove[]) {\n\t    this._moves = moves;\n\t  }\n\t  // Equals\n\t  equals(other: Pokemon): boolean {\n\t    return (\n\t      this.id === other.id &&\n\t      this.name === other.name &&\n\t      this.level === other.level &&\n", "      this.trainerID === other.trainerID &&\n\t      this.stats.equals(other.stats) &&\n\t      isEqual(this.type, other.type) &&\n\t      isEqual(this.moves, other.moves)\n\t    );\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/trainer/Trainer.ts", "chunked_list": ["import { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { Item } from \"../item/Item\";\n\timport { League } from \"../league/League\";\n\timport { Pokemon } from \"../pokemon/Pokemon\";\n\texport class Trainer {\n\t  private _id: string;\n\t  private _name: string;\n\t  private _city: string;\n\t  private _age: number;\n\t  private _level: number;\n", "  private _pokemons: Pokemon[];\n\t  private _items: Item[];\n\t  private _league: League | null;\n\t  constructor(props: {\n\t    id: string;\n\t    name: string;\n\t    city: string;\n\t    age: number;\n\t    level: number;\n\t    pokemons: Pokemon[];\n", "    items: Item[];\n\t    league: League | null;\n\t  }) {\n\t    this._id = props.id;\n\t    this._name = props.name;\n\t    this._city = props.city;\n\t    this._age = props.age;\n\t    this._level = props.level;\n\t    this._pokemons = props.pokemons;\n\t    this._items = props.items;\n", "    this._league = props.league;\n\t  }\n\t  // Methods\n\t  addPokemon(pokemon: Pokemon) {\n\t    this._pokemons.push(pokemon);\n\t  }\n\t  removePokemon(pokemon: Pokemon): void {\n\t    this._pokemons = this._pokemons.filter((p) => p.equals(pokemon));\n\t  }\n\t  addItem(item: Item) {\n", "    this._items.push(item);\n\t  }\n\t  removeItem(item: Item): void {\n\t    this._items = this._items.filter((i) => i.equals(item));\n\t  }\n\t  applyItem(item: Item, pokemon: Pokemon): void {\n\t    pokemon.life += item.increaseLife;\n\t    const newStats = new BattleStats({\n\t      attack: pokemon.stats.attack + item.increaseAttack,\n\t      defense: pokemon.stats.defense + item.increaseDefense,\n", "      speed: pokemon.stats.speed + item.increaseSpeed,\n\t    });\n\t    pokemon.stats = newStats;\n\t  }\n\t  // Getters and setters\n\t  get id(): string {\n\t    return this._id;\n\t  }\n\t  set id(id: string) {\n\t    this._id = id;\n", "  }\n\t  get name(): string {\n\t    return this._name;\n\t  }\n\t  set name(name: string) {\n\t    this._name = name;\n\t  }\n\t  get city(): string {\n\t    return this._city;\n\t  }\n", "  set city(city: string) {\n\t    this._city = city;\n\t  }\n\t  get age(): number {\n\t    return this._age;\n\t  }\n\t  set age(age: number) {\n\t    this._age = age;\n\t  }\n\t  get level(): number {\n", "    return this._level;\n\t  }\n\t  set level(level: number) {\n\t    this._level = level;\n\t  }\n\t  get pokemons() {\n\t    return this._pokemons;\n\t  }\n\t  set pokemons(pokemon: Pokemon[]) {\n\t    this._pokemons = pokemon;\n", "  }\n\t  get items() {\n\t    return this._items;\n\t  }\n\t  set items(items: Item[]) {\n\t    this._items = items;\n\t  }\n\t  get league() {\n\t    return this._league;\n\t  }\n", "  set league(league: League | null) {\n\t    this._league = league;\n\t  }\n\t}\n"]}
{"filename": "src/app/entities/trainer/Trainer.spec.ts", "chunked_list": ["import { beforeEach, describe, it, expect } from \"vitest\";\n\timport { Trainer } from \"./Trainer\";\n\timport { Item } from \"../item/Item\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { Pokemon } from \"../pokemon/Pokemon\";\n\tdescribe(\"Trainer\", () => {\n\t  let trainer: Trainer;\n\t  beforeEach(() => {\n\t    trainer = new Trainer({\n\t      id: \"1\",\n", "      name: \"Ash\",\n\t      city: \"Pallet Town\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [\n\t        new Pokemon({\n\t          id: \"1\",\n\t          name: \"Pikachu\",\n\t          stats: new BattleStats({\n\t            attack: 100,\n", "            defense: 100,\n\t            speed: 100,\n\t          }),\n\t          level: 25,\n\t          life: 100,\n\t          moves: [],\n\t          trainerID: \"1\",\n\t          type: [\"Electric\"],\n\t        }),\n\t      ],\n", "      items: [\n\t        new Item({\n\t          id: \"1\",\n\t          name: \"Potion\",\n\t          increaseLife: 20,\n\t          increaseAttack: 0,\n\t          increaseDefense: 0,\n\t          increaseSpeed: 0,\n\t        }),\n\t      ],\n", "      league: null,\n\t    });\n\t  });\n\t  it(\"should create a trainer\", () => {\n\t    expect(trainer).toBeDefined();\n\t  });\n\t  it(\"should apply item\", () => {\n\t    const pikachu = trainer.pokemons[0];\n\t    const potion = trainer.items[0];\n\t    trainer.applyItem(potion, pikachu);\n", "    expect(pikachu.life).toBe(120);\n\t  });\n\t});\n"]}
{"filename": "src/app/use-cases/tournament/SignUpTrainerToTournamentUseCase.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { Tournament } from \"../../entities/tournament/Tournament\";\n\timport { SignUpTrainerToTournamentUseCase } from \"./SignUpTrainerToTournamentUseCase\";\n\timport { InMemoryTournamentRepository } from \"../../__tests__/repositories/InMemoryTournamentRepository\";\n\tdescribe(\"SignUpTrainerToTournamentUseCase\", () => {\n\t  let tournament: Tournament;\n\t  let trainer: Trainer;\n\t  beforeEach(() => {\n\t    tournament = new Tournament({\n", "      id: \"tournament-id\",\n\t      name: \"tournament-name\",\n\t      description: \"tournament-description\",\n\t      trainers: [],\n\t      leagues: [],\n\t    });\n\t    trainer = new Trainer({\n\t      id: \"trainer-id\",\n\t      name: \"trainer-name\",\n\t      city: \"trainer-city\",\n", "      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: null,\n\t    });\n\t  });\n\t  it(\"should sign up trainer to tournament\", async () => {\n\t    const signUpTrainerToTournamentUseCase =\n\t      new SignUpTrainerToTournamentUseCase(new InMemoryTournamentRepository());\n", "    const response = await signUpTrainerToTournamentUseCase.execute({\n\t      tournament,\n\t      trainer,\n\t    });\n\t    expect(response.trainers).toContain(trainer);\n\t  });\n\t  it(\"should throw error if tournament is finished\", async () => {\n\t    const signUpTrainerToTournamentUseCase =\n\t      new SignUpTrainerToTournamentUseCase(new InMemoryTournamentRepository());\n\t    tournament.finish();\n", "    await expect(\n\t      signUpTrainerToTournamentUseCase.execute({\n\t        tournament,\n\t        trainer,\n\t      })\n\t    ).rejects.toThrow(\"Tournament is finished\");\n\t  });\n\t  it(\"should throw error if trainer is already signed up\", async () => {\n\t    const signUpTrainerToTournamentUseCase =\n\t      new SignUpTrainerToTournamentUseCase(new InMemoryTournamentRepository());\n", "    tournament.trainers.push(trainer);\n\t    await expect(\n\t      signUpTrainerToTournamentUseCase.execute({\n\t        tournament,\n\t        trainer,\n\t      })\n\t    ).rejects.toThrow(\"Trainer is already signed up\");\n\t  });\n\t});\n"]}
{"filename": "src/app/use-cases/tournament/SignUpTrainerToTournamentUseCase.ts", "chunked_list": ["import { Tournament } from \"../../entities/tournament/Tournament\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { TournamentRepository } from \"../../repositories/TournamentRepository\";\n\tinterface SignUpTrainerToTournamentRequest {\n\t  trainer: Trainer;\n\t  tournament: Tournament;\n\t}\n\texport class SignUpTrainerToTournamentUseCase {\n\t  constructor(private tournamentRepository: TournamentRepository) {}\n\t  async execute(request: SignUpTrainerToTournamentRequest) {\n", "    const { trainer, tournament } = request;\n\t    if (tournament.isFinished()) {\n\t      throw new Error(\"Tournament is finished\");\n\t    }\n\t    if (tournament.trainers.find((t) => t.id === trainer.id)) {\n\t      throw new Error(\"Trainer is already signed up\");\n\t    }\n\t    tournament.trainers.push(trainer);\n\t    await this.tournamentRepository.save(tournament);\n\t    return tournament;\n", "  }\n\t}\n"]}
{"filename": "src/app/use-cases/battle/CreateBattleUseCase.spec.ts", "chunked_list": ["import crypto from \"node:crypto\";\n\timport { beforeEach, describe, expect, it } from \"vitest\";\n\timport { CreateBattleUseCase } from \"./CreateBattleUseCase\";\n\timport { InMemoryBattleRepository } from \"../../__tests__/repositories/InMemoryBattleRepository\";\n\timport { InMemoryTrainerRepository } from \"../../__tests__/repositories/InMemoryTrainerRepository\";\n\timport { InMemoryPokemonRepository } from \"../../__tests__/repositories/InMemoryPokemonRepository\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { League } from \"../../entities/league/League\";\n\timport { Pokemon } from \"../../entities/pokemon/Pokemon\";\n", "describe(\"CreateBattleUseCase\", () => {\n\t  let createBattleUseCase: CreateBattleUseCase;\n\t  let inMemoryBattleRepository: InMemoryBattleRepository;\n\t  let trainer1: Trainer;\n\t  let trainer2: Trainer;\n\t  beforeEach(async () => {\n\t    inMemoryBattleRepository = new InMemoryBattleRepository();\n\t    createBattleUseCase = new CreateBattleUseCase(inMemoryBattleRepository);\n\t    trainer1 = new Trainer({\n\t      id: crypto.randomUUID(),\n", "      name: \"Ash\",\n\t      city: \"Pallet\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: new League({\n\t        id: \"123\",\n\t        name: \"Kanto\",\n\t        prize: 1000,\n", "        registrationFee: 100,\n\t      }),\n\t    });\n\t    for (let i = 0; i < 3; i++) {\n\t      trainer1.pokemons.push(\n\t        new Pokemon({\n\t          id: crypto.randomUUID(),\n\t          name: `Pikachu ${i}`,\n\t          type: [\"Electric\"],\n\t          level: 1,\n", "          trainerID: trainer1.id,\n\t          life: 100,\n\t          moves: [],\n\t          stats: new BattleStats({\n\t            attack: 100,\n\t            defense: 100,\n\t            speed: 100,\n\t          }),\n\t        })\n\t      );\n", "    }\n\t    trainer2 = new Trainer({\n\t      id: crypto.randomUUID(),\n\t      name: \"Misty\",\n\t      city: \"Cerulean\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: new League({\n", "        id: \"123\",\n\t        name: \"Kanto\",\n\t        prize: 1000,\n\t        registrationFee: 100,\n\t      }),\n\t    });\n\t    for (let i = 0; i < 3; i++) {\n\t      trainer2.pokemons.push(\n\t        new Pokemon({\n\t          id: crypto.randomUUID(),\n", "          name: `Pikachu ${i}`,\n\t          type: [\"Electric\"],\n\t          level: 1,\n\t          trainerID: trainer2.id,\n\t          life: 100,\n\t          moves: [],\n\t          stats: new BattleStats({\n\t            attack: 100,\n\t            defense: 100,\n\t            speed: 100,\n", "          }),\n\t        })\n\t      );\n\t    }\n\t  });\n\t  it(\"should create a battle\", async () => {\n\t    const battle = await createBattleUseCase.execute({\n\t      trainer1,\n\t      trainer2,\n\t      league: new League({\n", "        id: \"123\",\n\t        name: \"Kanto\",\n\t        prize: 1000,\n\t        registrationFee: 100,\n\t      }),\n\t    });\n\t    expect(battle).toBeDefined();\n\t    expect(battle.id).toBeDefined();\n\t    expect(battle.trainer1).toStrictEqual(trainer1);\n\t    expect(battle.trainer2).toStrictEqual(trainer2);\n", "  });\n\t  it(\"should not create a battle if trainers have less than 3 pokemons\", async () => {\n\t    trainer1.pokemons = trainer1.pokemons.slice(0, 2);\n\t    trainer2.pokemons = trainer2.pokemons.slice(0, 2);\n\t    await expect(\n\t      createBattleUseCase.execute({\n\t        trainer1,\n\t        trainer2,\n\t        league: new League({\n\t          id: \"123\",\n", "          name: \"Kanto\",\n\t          prize: 1000,\n\t          registrationFee: 100,\n\t        }),\n\t      })\n\t    ).rejects.toThrowError(\"Trainers must have at least 3 pokemons to battle\");\n\t  });\n\t  it(\"should not create a battle if trainers are from different leagues\", async () => {\n\t    trainer2.league = new League({\n\t      id: \"456\",\n", "      name: \"League 2\",\n\t      prize: 100,\n\t      registrationFee: 10,\n\t    });\n\t    await expect(\n\t      createBattleUseCase.execute({\n\t        trainer1,\n\t        trainer2,\n\t        league: new League({\n\t          id: \"123\",\n", "          name: \"Kanto\",\n\t          prize: 1000,\n\t          registrationFee: 100,\n\t        }),\n\t      })\n\t    ).rejects.toThrowError(\"Trainers must be from the same league to battle\");\n\t  });\n\t  it(\"should not create a battle if trainers are the same\", async () => {\n\t    await expect(\n\t      createBattleUseCase.execute({\n", "        trainer1,\n\t        trainer2: trainer1,\n\t        league: new League({\n\t          id: \"123\",\n\t          name: \"Kanto\",\n\t          prize: 1000,\n\t          registrationFee: 100,\n\t        }),\n\t      })\n\t    ).rejects.toThrowError(\"Trainers must be different to battle\");\n", "  });\n\t});\n"]}
{"filename": "src/app/use-cases/battle/CreateBattleUseCase.ts", "chunked_list": ["import { Battle } from \"../../entities/battle/Battle\";\n\timport { League } from \"../../entities/league/League\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { BattleRepository } from \"../../repositories/BattleRepository\";\n\timport crypto from \"node:crypto\";\n\tinterface CreateBattleRequest {\n\t  trainer1: Trainer;\n\t  trainer2: Trainer;\n\t  league: League;\n\t}\n", "export class CreateBattleUseCase {\n\t  constructor(private battleRepository: BattleRepository) {}\n\t  async execute({ trainer1, trainer2, league }: CreateBattleRequest) {\n\t    if (trainer1.pokemons.length < 3 || trainer2.pokemons.length < 3) {\n\t      throw new Error(\"Trainers must have at least 3 pokemons to battle\");\n\t    }\n\t    if (!trainer1.league || !trainer2.league) {\n\t      throw new Error(\"Trainers must be in a league to battle\");\n\t    }\n\t    if (trainer1.league.id !== trainer2.league.id) {\n", "      throw new Error(\"Trainers must be from the same league to battle\");\n\t    }\n\t    if (trainer1.league.id !== league.id || trainer2.league.id !== league.id) {\n\t      throw new Error(\"Trainers must be from the league to battle\");\n\t    }\n\t    if (trainer1.id === trainer2.id) {\n\t      throw new Error(\"Trainers must be different to battle\");\n\t    }\n\t    const battle = new Battle({\n\t      id: crypto.randomUUID(),\n", "      trainer1,\n\t      trainer2,\n\t      league,\n\t    });\n\t    battle.createdAt = new Date();\n\t    await this.battleRepository.save(battle);\n\t    return battle;\n\t  }\n\t}\n"]}
{"filename": "src/app/use-cases/league/SignUpTrainerToLeagueUseCase.ts", "chunked_list": ["import { League } from \"../../entities/league/League\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { LeagueRepository } from \"../../repositories/LeagueRepository\";\n\tinterface SignUpTrainerToLeagueRequest {\n\t  trainer: Trainer;\n\t  league: League;\n\t}\n\texport class SignUpTrainerToLeagueUseCase {\n\t  constructor(private leagueRepository: LeagueRepository) {}\n\t  async execute({ trainer, league }: SignUpTrainerToLeagueRequest) {\n", "    if (league.isFinished()) {\n\t      throw new Error(\"League is finished\");\n\t    }\n\t    if (league.trainers.find((t) => t.id === trainer.id)) {\n\t      throw new Error(\"Trainer is already signed up\");\n\t    }\n\t    league.trainers.push(trainer);\n\t    await this.leagueRepository.save(league);\n\t    return league;\n\t  }\n", "}\n"]}
{"filename": "src/app/use-cases/league/SignUpTrainerToLeagueUseCase.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { LeagueRepository } from \"../../repositories/LeagueRepository\";\n\timport { SignUpTrainerToLeagueUseCase } from \"./SignUpTrainerToLeagueUseCase\";\n\timport { InMemoryLeagueRepository } from \"../../__tests__/repositories/InMemoryLeagueRepository\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { League } from \"../../entities/league/League\";\n\tdescribe(\"SignUpTrainerToLeagueUseCase\", () => {\n\t  let leagueRepository: LeagueRepository;\n\t  let signUpTrainerToLeagueUseCase: SignUpTrainerToLeagueUseCase;\n\t  let trainer: Trainer;\n", "  let league: League;\n\t  beforeEach(() => {\n\t    leagueRepository = new InMemoryLeagueRepository();\n\t    signUpTrainerToLeagueUseCase = new SignUpTrainerToLeagueUseCase(\n\t      leagueRepository\n\t    );\n\t    trainer = new Trainer({\n\t      id: \"1\",\n\t      name: \"Ash\",\n\t      city: \"Pallet Town\",\n", "      age: 18,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: null,\n\t    });\n\t    league = new League({\n\t      id: \"1\",\n\t      name: \"Poke League\",\n\t      registrationFee: 100,\n", "      prize: 1000,\n\t    });\n\t  });\n\t  it(\"should sign up a trainer to a league\", async () => {\n\t    await leagueRepository.save(league);\n\t    expect(league.trainers).not.contains(trainer);\n\t    await signUpTrainerToLeagueUseCase.execute({\n\t      trainer,\n\t      league,\n\t    });\n", "    expect(league.trainers).contains(trainer);\n\t  });\n\t  it(\"should throw an error if league is finished\", async () => {\n\t    league.finish();\n\t    await leagueRepository.save(league);\n\t    await expect(\n\t      signUpTrainerToLeagueUseCase.execute({\n\t        trainer,\n\t        league,\n\t      })\n", "    ).rejects.toThrow(\"League is finished\");\n\t  });\n\t  it(\"should throw an error if trainer is already signed up\", async () => {\n\t    league.trainers.push(trainer);\n\t    await expect(\n\t      signUpTrainerToLeagueUseCase.execute({\n\t        trainer,\n\t        league,\n\t      })\n\t    ).rejects.toThrow(\"Trainer is already signed up\");\n", "  });\n\t});\n"]}
{"filename": "src/app/use-cases/pokemon/AddPokemonUseCase.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { AddPokemonUseCase } from \"./AddPokemonUseCase\";\n\timport { InMemoryPokemonRepository } from \"../../__tests__/repositories/InMemoryPokemonRepository\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\tdescribe(\"AddPokemonUseCase\", () => {\n\t  let inMemoryPokemonRepository: InMemoryPokemonRepository;\n\t  let addPokemonUseCase: AddPokemonUseCase;\n\t  beforeEach(() => {\n\t    inMemoryPokemonRepository = new InMemoryPokemonRepository();\n\t    addPokemonUseCase = new AddPokemonUseCase(inMemoryPokemonRepository);\n", "  });\n\t  it(\"should add a pokemon\", async () => {\n\t    const pikachu = await addPokemonUseCase.execute({\n\t      name: \"Pikachu\",\n\t      level: 25,\n\t      life: 100,\n\t      type: [\"electric\"],\n\t      stats: new BattleStats({\n\t        attack: 10,\n\t        defense: 10,\n", "        speed: 10,\n\t      }),\n\t      moves: [],\n\t      trainerID: \"123\",\n\t    });\n\t    const pokemons = await inMemoryPokemonRepository.findByTrainerId(\"123\");\n\t    expect(pokemons[0].name).toEqual(\"Pikachu\");\n\t    expect(pokemons[0].id).toBeDefined();\n\t  });\n\t  it(\"should throw an error if trainer already has 3 pokemons\", async () => {\n", "    for (let i = 0; i < 3; i++) {\n\t      await addPokemonUseCase.execute({\n\t        name: \"Pikachu\",\n\t        level: 25,\n\t        life: 100,\n\t        type: [\"electric\"],\n\t        stats: new BattleStats({\n\t          attack: 10,\n\t          defense: 10,\n\t          speed: 10,\n", "        }),\n\t        moves: [],\n\t        trainerID: \"123\",\n\t      });\n\t    }\n\t    await expect(\n\t      addPokemonUseCase.execute({\n\t        name: \"Pikachu\",\n\t        level: 25,\n\t        life: 100,\n", "        type: [\"electric\"],\n\t        stats: new BattleStats({\n\t          attack: 10,\n\t          defense: 10,\n\t          speed: 10,\n\t        }),\n\t        moves: [],\n\t        trainerID: \"123\",\n\t      })\n\t    ).rejects.toThrow(\"Trainer already has 3 pokemons\");\n", "  });\n\t});\n"]}
{"filename": "src/app/use-cases/pokemon/AddPokemonUseCase.ts", "chunked_list": ["import { Pokemon } from \"../../entities/pokemon/Pokemon\";\n\timport { PokemonRepository } from \"../../repositories/PokemonRepository\";\n\timport crypto from \"node:crypto\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { PokemonMove } from \"../../value_objects/PokemonMove\";\n\tinterface AddPokemonRequest {\n\t  trainerID: string;\n\t  name: string;\n\t  level: number;\n\t  life: number;\n", "  type: string[];\n\t  stats: BattleStats;\n\t  moves: PokemonMove[];\n\t}\n\texport class AddPokemonUseCase {\n\t  constructor(private pokemonRepository: PokemonRepository) {}\n\t  async execute({\n\t    trainerID,\n\t    name,\n\t    level,\n", "    life,\n\t    type,\n\t    stats,\n\t    moves,\n\t  }: AddPokemonRequest): Promise<Pokemon> {\n\t    const pokemon = new Pokemon({\n\t      id: crypto.randomUUID(),\n\t      trainerID: trainerID,\n\t      name: name,\n\t      level: level,\n", "      life: life,\n\t      type: type,\n\t      stats: stats,\n\t      moves: moves,\n\t    });\n\t    const trainerPokemons = await this.pokemonRepository.findByTrainerId(\n\t      pokemon.trainerID\n\t    );\n\t    if (trainerPokemons.length >= 3) {\n\t      throw new Error(\"Trainer already has 3 pokemons\");\n", "    }\n\t    await this.pokemonRepository.save(pokemon);\n\t    return pokemon;\n\t  }\n\t}\n"]}
{"filename": "src/app/use-cases/pokemon/UpdatePokemonUseCase.ts", "chunked_list": ["import { Pokemon } from \"../../entities/pokemon/Pokemon\";\n\timport { PokemonRepository } from \"../../repositories/PokemonRepository\";\n\tinterface UpdatePokemonRequest {\n\t  pokemon: Pokemon;\n\t}\n\texport class UpdatePokemonUseCase {\n\t  constructor(private pokemonRepository: PokemonRepository) {}\n\t  async execute({ pokemon }: UpdatePokemonRequest) {\n\t    const doesPokemonExist = await this.pokemonRepository.findById(pokemon.id);\n\t    if (!doesPokemonExist) {\n", "      throw new Error(\"Pokemon does not exist\");\n\t    }\n\t    await this.pokemonRepository.update(pokemon);\n\t  }\n\t}\n"]}
{"filename": "src/app/use-cases/pokemon/UpdatePokemonUseCase.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { UpdatePokemonUseCase } from \"./UpdatePokemonUseCase\";\n\timport { InMemoryPokemonRepository } from \"../../__tests__/repositories/InMemoryPokemonRepository\";\n\timport { BattleStats } from \"../../value_objects/BattleStats\";\n\timport { AddPokemonUseCase } from \"./AddPokemonUseCase\";\n\timport { Pokemon } from \"../../entities/pokemon/Pokemon\";\n\tdescribe(\"UpdatePokemonUseCase\", () => {\n\t  let inMemoryPokemonRepository: InMemoryPokemonRepository;\n\t  let updatePokemonUseCase: UpdatePokemonUseCase;\n\t  let addPokemonUseCase: AddPokemonUseCase;\n", "  beforeEach(() => {\n\t    inMemoryPokemonRepository = new InMemoryPokemonRepository();\n\t    updatePokemonUseCase = new UpdatePokemonUseCase(inMemoryPokemonRepository);\n\t    addPokemonUseCase = new AddPokemonUseCase(inMemoryPokemonRepository);\n\t  });\n\t  it(\"should update a pokemon\", async () => {\n\t    const pikachu = await addPokemonUseCase.execute({\n\t      name: \"Pikachu\",\n\t      level: 25,\n\t      life: 100,\n", "      type: [\"electric\"],\n\t      stats: new BattleStats({\n\t        attack: 10,\n\t        defense: 10,\n\t        speed: 10,\n\t      }),\n\t      moves: [],\n\t      trainerID: \"123\",\n\t    });\n\t    expect(\n", "      (await inMemoryPokemonRepository.findById(pikachu.id))?.level\n\t    ).toEqual(25);\n\t    pikachu.level = 26;\n\t    await updatePokemonUseCase.execute({\n\t      pokemon: pikachu,\n\t    });\n\t    expect(\n\t      (await inMemoryPokemonRepository.findById(pikachu.id))?.level\n\t    ).toEqual(26);\n\t  });\n", "  it(\"should throw an error if pokemon does not exist\", async () => {\n\t    const pikachu = new Pokemon({\n\t      id: \"123\",\n\t      level: 25,\n\t      life: 100,\n\t      moves: [],\n\t      name: \"Pikachu\",\n\t      stats: new BattleStats({\n\t        attack: 10,\n\t        defense: 10,\n", "        speed: 10,\n\t      }),\n\t      trainerID: \"123\",\n\t      type: [\"electric\"],\n\t    });\n\t    await expect(\n\t      updatePokemonUseCase.execute({\n\t        pokemon: pikachu,\n\t      })\n\t    ).rejects.toThrow(\"Pokemon does not exist\");\n", "  });\n\t});\n"]}
{"filename": "src/app/use-cases/trainer/CreateTrainerUseCase.ts", "chunked_list": ["import { Item } from \"../../entities/item/Item\";\n\timport { League } from \"../../entities/league/League\";\n\timport { Pokemon } from \"../../entities/pokemon/Pokemon\";\n\timport { Trainer } from \"../../entities/trainer/Trainer\";\n\timport { TrainerRepository } from \"../../repositories/Trainer\";\n\timport crypto from \"node:crypto\";\n\tinterface CreateTrainerRequest {\n\t  name: string;\n\t  city: string;\n\t  age: number;\n", "  level: number;\n\t  pokemons: Pokemon[];\n\t  items: Item[];\n\t  league: League | null;\n\t}\n\texport class CreateTrainerUseCase {\n\t  constructor(private trainerRepository: TrainerRepository) {}\n\t  async execute(request: CreateTrainerRequest) {\n\t    const trainer = new Trainer({\n\t      id: crypto.randomUUID(),\n", "      ...request,\n\t    });\n\t    await this.trainerRepository.save(trainer);\n\t    return trainer;\n\t  }\n\t}\n"]}
{"filename": "src/app/use-cases/trainer/CreateTrainerUseCase.spec.ts", "chunked_list": ["import { beforeEach, describe, expect, it } from \"vitest\";\n\timport { CreateTrainerUseCase } from \"./CreateTrainerUseCase\";\n\timport { InMemoryTrainerRepository } from \"../../__tests__/repositories/InMemoryTrainerRepository\";\n\tdescribe(\"CreateTrainerUseCase\", () => {\n\t  let createTrainerUseCase: CreateTrainerUseCase;\n\t  let inMemoryTrainerRepository: InMemoryTrainerRepository;\n\t  beforeEach(() => {\n\t    inMemoryTrainerRepository = new InMemoryTrainerRepository();\n\t    createTrainerUseCase = new CreateTrainerUseCase(inMemoryTrainerRepository);\n\t  });\n", "  it(\"should create a trainer\", async () => {\n\t    const trainer = await createTrainerUseCase.execute({\n\t      name: \"Ash\",\n\t      city: \"Pallet\",\n\t      age: 10,\n\t      level: 1,\n\t      pokemons: [],\n\t      items: [],\n\t      league: null,\n\t    });\n", "    const response = await inMemoryTrainerRepository.findById(trainer.id);\n\t    expect(response).toStrictEqual(trainer);\n\t  });\n\t});\n"]}
{"filename": "src/app/helper/compareArrays.ts", "chunked_list": ["export default function compareArrays(a: any[], b: any[]): boolean {\n\t  if (a.length !== b.length) return false;\n\t  return a.every((element, index) => element === b[index]);\n\t}\n"]}
