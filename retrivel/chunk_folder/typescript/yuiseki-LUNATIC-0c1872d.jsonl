{"filename": "src/utils/sleep.ts", "chunked_list": ["export const sleep = (msec: number) =>\n\t  new Promise((resolve) => setTimeout(resolve, msec));\n"]}
{"filename": "src/utils/scrollToBottom.ts", "chunked_list": ["import { sleep } from \"./sleep\";\n\texport const scrollToBottom = async () => {\n\t  await sleep(100);\n\t  window.scroll({\n\t    top: document.body.scrollHeight,\n\t    behavior: \"smooth\",\n\t  });\n\t};\n"]}
{"filename": "src/utils/nextPostJson.ts", "chunked_list": ["import { Md5 } from \"ts-md5\";\n\texport const nextPostJson = async (apiPath: string, object: any) => {\n\t  return fetch(apiPath, {\n\t    method: \"POST\",\n\t    headers: {\n\t      \"Content-type\": \"application/json\",\n\t    },\n\t    body: JSON.stringify(object),\n\t  });\n\t};\n", "export const nextPostJsonWithCache = async (\n\t  url: string,\n\t  bodyJson: any,\n\t  cacheSeconds: number = 21600 // 6 hours\n\t) => {\n\t  const bodyJsonString = JSON.stringify(bodyJson);\n\t  const md5 = new Md5();\n\t  md5.appendStr(`${url}\\n${bodyJsonString}`);\n\t  const hash = md5.end();\n\t  const key = `lunatic-next-post-json-cache-${hash}`;\n", "  const unixtime = Math.floor(new Date().getTime() / 1000);\n\t  const fetchAndCache = async () => {\n\t    const res = await fetch(url, {\n\t      method: \"POST\",\n\t      headers: {\n\t        \"Content-type\": \"application/json\",\n\t      },\n\t      body: bodyJsonString,\n\t    });\n\t    const json = await res.json();\n", "    const valueToStore = {\n\t      url: url,\n\t      reqJson: bodyJson,\n\t      resJson: json,\n\t      unixtime: unixtime,\n\t    };\n\t    window.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t    return json;\n\t  };\n\t  const cache = window.localStorage.getItem(key);\n", "  if (cache) {\n\t    const valueFromStore = JSON.parse(cache);\n\t    if (unixtime - cacheSeconds < valueFromStore.unixtime) {\n\t      return valueFromStore.resJson;\n\t    } else {\n\t      return await fetchAndCache();\n\t    }\n\t  } else {\n\t    return await fetchAndCache();\n\t  }\n", "};\n"]}
{"filename": "src/utils/langchain/chains/lunatic/prompts.ts", "chunked_list": ["import { PromptTemplate } from \"langchain/prompts\";\n\texport const LUNATIC_SURFACE_PROMPT = new PromptTemplate({\n\t  template: `Your name is LUNATIC, You are an interactive web site reconstructing assistant.\n\tYou will always reply according to the following rules:\n\t- You identify the language in which the human is writing as precisely as possible.\n\t- You will carefully reply \"I copy! I'm reconstructing web site that shows {{summary of the all concerns of the Human}}. Please wait a while...\" in the language which human is writing.\n\t- If human want to change, expand, limit, delete, reset or clear maps, you will carefully reply \"I copy! I'm reconstructing web site that shows {{summary of the all concerns of the Human}}. Please wait a while...\" in the language which human is writing.\n\t- When human want to add or expand web site, Do not forget previous concerns.\n\t- Without when human want to remove, delete or limit web site, Do not forget previous concerns.\n\t- You MUST ALWAYS reply in the language which human is writing.\n", "- You MUST NOT reply in any language other than the language written by the human.\n\t- You reply with the most accurate grammar possible.\n\tCurrent conversation:\n\t{history}\n\tHuman: {input}\n\tAI:`,\n\t  inputVariables: [\"history\", \"input\"],\n\t});\n\tconst exampleHello = `\n\tText input:\n", "Human: 文字を大きくして\n\tOutput:\n\t\\`\\`\\`\n\t.dialogueElementItem {{\n\t  font-size: 4em;\n\t}}\n\t\\`\\`\\`\n\tInput text:\n\tHuman: 絵文字のカウントを点滅させてください\n\tOutput:\n", "\\`\\`\\`\n\t@keyframes keyframe-opacity-blinking {{\n\t  0% {{ opacity: 0; }}\n\t  50% {{ opacity: 1; }}\n\t  100% {{ opacity: 0; }}\n\t}}\n\t.emojiCount {{\n\t  animation: keyframe-opacity-blinking 2s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n", "Input text:\n\tHuman: アバターアイコンを回転させてください\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes keyframe-transform-rotate-clockwise {{\n\t  0% {{ transform: rotate(0); }}\n\t  100% {{ transform: rotate(360deg); }}\n\t}}\n\t.avatarIcon {{\n\t  border-radius: 50%;\n", "  animation: keyframe-transform-rotate-clockwise 1s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n\tInput text:\n\tHuman: チャット欄を左右に水平にユラユラと揺らしてください\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes keyframe-transform-horizontally-swaying {{\n\t  0% {{ transform: translate(-15px, 0); }}\n\t  50% {{ transform: translate(15px, 0); }}\n", "  100% {{ transform: translate(-15px, 0); }}\n\t}}\n\t.dialogueElementItem {{\n\t  animation: keyframe-transform-horizontally-swaying 5s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n\tInput text:\n\tHuman: 入力欄を縦方向に上下にユラユラと揺らしてください\n\tOutput:\n\t\\`\\`\\`\n", "@keyframes keyframe-transform-vertically-swinging {{\n\t  0% {{ transform: translate(0, 0px); }}\n\t  50% {{ transform: translate(0, -30px); }}\n\t  100% {{ transform: translate(0, 0px); }}\n\t}}\n\t.textInputWrap {{\n\t  animation: keyframe-transform-vertically-swinging 1s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n\tInput text:\n", "Human: 入力ボタンをバウンスさせてください\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes keyframe-transform-bigger-smaller-bounce {{\n\t  0% {{ transform: scale(0.5); }}\n\t  50% {{ transform: scale(1.2); }}\n\t  100% {{ transform: scale(0.5); }}\n\t}}\n\t.textInputWrap {{\n\t  animation: keyframe-transform-bigger-smaller-bounce 1s linear infinite !important;\n", "}}\n\t\\`\\`\\`\n\tInput text:\n\tHuman: アバターアイコンを回転させながらバウンスさせてください\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes keyframe-transform-bigger-smaller-bounce-and-rotate-clockwise {{\n\t  0% {{ transform: scale(0.5) rotate(0); }}\n\t  50% {{ transform: scale(1.2) rotate(180deg); }}\n\t  100% {{ transform: scale(0.5) rotate(360deg); }}\n", "}}\n\t.avatarIcon img {{\n\t  animation:  keyframe-transform-bigger-smaller-bounce-and-rotate-clockwise 1s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n\tText input:\n\tHuman: 絵文字を回転させてください\n\tOutput:\n\t\\`\\`\\`\n\t.emoji {{\n", "  animation: keyframe-transform-rotate-clockwise 5s linear infinite !important;\n\t}}\n\t\\`\\`\\`\n\t`;\n\tconst exampleGamings = `\n\tInput text:\n\tHuman: 背景をゲーミングPCっぽく虹色に光らせて\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes gaming-rainbow-background {{\n", "  0% {{ background-position: 0% 50%; }}\n\t  50% {{ background-position: 100% 50%; }}\n\t  100% {{ background-position: 0% 50%; }}\n\t}}\n\t.body {{\n\t  background: linear-gradient(to right, red, orange, yellow, green, aqua, blue, purple);\n\t  background-size: 600% 600% !important;\n\t  animation: gaming-rainbow-background 2s ease infinite !important;\n\t}}\n\t\\`\\`\\`\n", "`;\n\tconst exampleGamingsDialogue = `\n\tInput text:\n\tHuman: チャット欄をゲーミングPCっぽく虹色に光らせて\n\tOutput:\n\t\\`\\`\\`\n\t@keyframes gaming-rainbow-background {{\n\t  0% {{ background-position: 0% 50%; }}\n\t  50% {{ background-position: 100% 50%; }}\n\t  100% {{ background-position: 0% 50%; }}\n", "}}\n\t.dialogueElementItem {{\n\t  --gamingBorderWidth: 1px;\n\t  position: relative !important;\n\t  border: none !important;\n\t  border-radius: var(--gamingBorderWidth) !important;\n\t}}\n\t.dialogueElementItem:after {{\n\t  content: '';\n\t  position: absolute;\n", "  top: calc(-1 * var(--gamingBorderWidth) * 2);\n\t  left: calc(-1 * var(--gamingBorderWidth) * 2);\n\t  height: calc(100% + var(--gamingBorderWidth) * 4);\n\t  width: calc(100% + var(--gamingBorderWidth) * 4);\n\t  background: linear-gradient(to right, red, orange, yellow, green, aqua, blue, purple);\n\t  border-radius: calc(2 * var(--gamingBorderWidth));\n\t  z-index: -1;\n\t  background-size: 600% 600%;\n\t  animation: gaming-rainbow-background 2s ease infinite;\n\t}}\n", "\\`\\`\\`\n\t`;\n\tconst exampleTwitter = `\n\tInput text:\n\tHuman: 全体的にTwitterっぽくして\n\tOutput:\n\t\\`\\`\\`\n\t.avatarIcon {{\n\t  border-radius: 50%;\n\t}}\n", ".avatarIcon img {{\n\t  border-radius: 50%;\n\t}}\n\t.dialogueElementItem {{\n\t  background-color: #1c2732;\n\t  border-color: #1d9bf0;\n\t}}\n\t.dialogueTextRow {{\n\t  font-size: 1em;\n\t}}\n", ".textInputButton {{\n\t  background-color: #1d9bf0;\n\t}}\n\t.emojiWrap {{\n\t  background-color: #38444d;\n\t}}\n\tmain {{\n\t  opacity: 0.9;\n\t  background-color: #15202b;\n\t  border-color: #38444d;\n", "}}\n\tbody {{\n\t  background-color: #15202b;\n\t}}\n\t\\`\\`\\`\n\t`;\n\tconst exampleChatGpt = `\n\tInput text:\n\tHuman: 全体的にChatGPTっぽくして\n\tOutput:\n", "\\`\\`\\`\n\t.dialogueElementItem {{\n\t  border-color: #555659;\n\t}}\n\t.textInputButton {{\n\t  background-color: #ececf1;\n\t}}\n\t.emojiWrap {{\n\t  background-color: #38444d;\n\t}}\n", "main {{\n\t  opacity: 0.9;\n\t  background-color: #343541;\n\t  border-color: #555659;\n\t}}\n\tbody {{\n\t  background-color: #2a2b32;\n\t}}\n\t\\`\\`\\`\n\t`;\n", "const domStructures = `\n\tNote that, HTML has following DOM structures:\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.avatarIconWrap > div.avatarIcon > img\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.avatarIconWrap > div.avatarIcon > img\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueTextWrap > div.dialogueTextRow\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueTextWrap > div.dialogueTextRow\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emoji > img\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emoji > img\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emojiCount\n\thtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emojiCount\n", "html > body > main > div.textInputWrap > div.textInput > textarea.textInputTextarea\n\thtml > body > main > div.textInputWrap > div.textInput > button.textInputButton\n\t`;\n\tconst cssClassNames = [\n\t  \"body\",\n\t  \"main\",\n\t  \"dialogueListWrap\",\n\t  \"dialogueElementItem\",\n\t  \"dialogueElementItemAssistant\",\n\t  \"dialogueElementItemHuman\",\n", "  \"avatarIconWrap\",\n\t  \"avatarIcon\",\n\t  \"dialogueElementWrap\",\n\t  \"dialogueTextWrap\",\n\t  \"dialogueTextRow\",\n\t  \"dialogueEmojiListWrap\",\n\t  \"emojiWrap\",\n\t  \"emoji\",\n\t  \"emojiCount\",\n\t  \"textInputWrap\",\n", "  \"textInput\",\n\t  \"textInputTextarea\",\n\t  \"textInputButton\",\n\t];\n\tconst examples = `\n\tExamples:\n\t====\n\t${exampleHello}${exampleGamings}\n\t====\n\t`;\n", "export const LUNATIC_CSS_PROMPT = new PromptTemplate({\n\t  template: `You are an AI and expert of CSS. You generate the valid CSS according to the following conversation history with Human. Note that, assistant is same as AI, Human is same as User, Chat is same as Dialogue or Conversation.\n\tAlways use the following format for your output:\n\tFont: font size, font family and font colors best suited to expressing concern of the following conversation history\n\tColors: list of colors best suited to expressing concern of the following conversation history\n\tAnimations: list of animations best suited to expressing concern of the following conversation history\n\tCSSWithKeyframes:\n\t\\`\\`\\`\n\tThe CSSWithKeyframes\n\t\\`\\`\\`\n", "... (You MUST ALWAYS output only one Font, Colors, Animations, CSSWithKeyframes)\n\tAlways output according to the following rules:\n\t- You MUST ALWAYS output the valid CSS.\n\t- You ALWAYS output the CSS as creatively as possible.\n\t- You MUST ALWAYS output the CSS that reflects all concerns of the following conversation history.\n\t- You MUST ALWAYS take into account color vision diversity in the CSS.\n\t- The CSSWithKeyframes MUST ALWAYS be enclosed by three backticks on new lines, denoting that it is a code block.\n\tPre defined CSS class name is: [${cssClassNames.join(\", \")}]\n\t${examples}\n\tConversation history:\n", "{chat_history}\n\tOutput:`,\n\t  inputVariables: [\"chat_history\"],\n\t});\n"]}
{"filename": "src/utils/langchain/chains/lunatic/index.ts", "chunked_list": ["import { ConversationChain } from \"langchain/chains\";\n\timport { LUNATIC_CSS_PROMPT, LUNATIC_SURFACE_PROMPT } from \"./prompts\";\n\timport { LLMChain } from \"langchain/chains\";\n\timport { BaseLanguageModel } from \"langchain/dist/base_language\";\n\timport { BaseMemory, BufferMemory } from \"langchain/memory\";\n\texport const loadLunaticSurfaceChain = ({\n\t  llm,\n\t  memory,\n\t}: {\n\t  llm: BaseLanguageModel;\n", "  memory?: BaseMemory;\n\t}): LLMChain => {\n\t  if (memory === undefined) {\n\t    memory = new BufferMemory();\n\t  }\n\t  const chain = new ConversationChain({\n\t    llm: llm,\n\t    prompt: LUNATIC_SURFACE_PROMPT,\n\t    memory: memory,\n\t  });\n", "  return chain;\n\t};\n\texport const loadLunaticCssChain = ({\n\t  llm,\n\t}: {\n\t  llm: BaseLanguageModel;\n\t}): LLMChain => {\n\t  const chain = new LLMChain({\n\t    llm: llm,\n\t    prompt: LUNATIC_CSS_PROMPT,\n", "  });\n\t  return chain;\n\t};\n"]}
{"filename": "src/const/emojiDict.ts", "chunked_list": ["export const emojiDict: {\n\t  [key: string]: {\n\t    src: string;\n\t    name: string;\n\t    height: number;\n\t    width: number;\n\t  };\n\t} = {\n\t  \":igyo:\": {\n\t    src: \"./emoji/igyo.png\",\n", "    name: \"偉業\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n\t  \":tiken:\": {\n\t    src: \"./emoji/tiken.png\",\n\t    name: \"知見\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n", "  \":dekai:\": {\n\t    src: \"./emoji/dekai.png\",\n\t    name: \"デカい\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n\t  \":chian_saikou:\": {\n\t    src: \"./emoji/chian_saikou.gif\",\n\t    name: \"治安最高\",\n\t    height: 23,\n", "    width: 23,\n\t  },\n\t  \":desyo:\": {\n\t    src: \"./emoji/desyo.png\",\n\t    name: \"寿司\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n\t  \":mog:\": {\n\t    src: \"./emoji/mog.png\",\n", "    name: \"もぐ…\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n\t  \":saikou:\": {\n\t    src: \"./emoji/saikou.png\",\n\t    name: \"最高\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n", "  \":muzu:\": {\n\t    src: \"./emoji/muzu.png\",\n\t    name: \"難\",\n\t    height: 23,\n\t    width: 23,\n\t  },\n\t  \":wakaran:\": {\n\t    src: \"./emoji/wakaran.png\",\n\t    name: \"わからん\",\n\t    height: 23,\n", "    width: 23,\n\t  },\n\t  \":send_money:\": {\n\t    src: \"./emoji/send_money.png\",\n\t    name: \"レターパックで現金送れ\",\n\t    height: 23,\n\t    width: 210,\n\t  },\n\t  \":is_all_scam:\": {\n\t    src: \"./emoji/is_all_scam.png\",\n", "    name: \"はすべて詐欺です\",\n\t    height: 23,\n\t    width: 160,\n\t  },\n\t};\n"]}
{"filename": "src/hooks/localStorage.ts", "chunked_list": ["import { useState } from \"react\";\n\texport function useLocalStorage<T>(key: string, initialValue: T) {\n\t  const [storedValue, setStoredValue] = useState<T>(() => {\n\t    if (typeof window === \"undefined\") {\n\t      return initialValue;\n\t    }\n\t    try {\n\t      const item = window.localStorage.getItem(key);\n\t      return item ? JSON.parse(item) : initialValue;\n\t    } catch (error) {\n", "      console.log(error);\n\t      return initialValue;\n\t    }\n\t  });\n\t  const setValue = (value: T | ((val: T) => T)) => {\n\t    try {\n\t      const valueToStore =\n\t        value instanceof Function ? value(storedValue) : value;\n\t      setStoredValue(valueToStore);\n\t      if (typeof window !== \"undefined\") {\n", "        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t      }\n\t    } catch (error) {\n\t      console.log(error);\n\t    }\n\t  };\n\t  return [storedValue, setValue] as const;\n\t}\n"]}
{"filename": "src/types/DialogueElement.ts", "chunked_list": ["import { Document } from \"@/types/Document\";\n\texport type DialogueElement = {\n\t  who: string;\n\t  text: string;\n\t  emojiList: Array<{ name: string; count: number }>;\n\t  textEnd?: string;\n\t  docs?: Document[];\n\t};\n"]}
{"filename": "src/types/Document.ts", "chunked_list": ["export type Document = {\n\t  pageContent: string;\n\t  metadata: {\n\t    id: string;\n\t    source: string;\n\t    title?: string;\n\t    name: string;\n\t    created_at?: number;\n\t    updated_at: number;\n\t    date_created: number;\n", "    \"pdf.metadata._metadata.xmp:modifydate\": string;\n\t  };\n\t};\n"]}
{"filename": "src/app/api/lunatic/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\texport async function GET(request: Request) {\n\t  const { searchParams } = new URL(request.url);\n\t  const query = searchParams.get(\"query\");\n\t  return NextResponse.json({ query: query });\n\t}\n"]}
{"filename": "src/app/api/lunatic/deep/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\texport async function GET(request: Request) {\n\t  const { searchParams } = new URL(request.url);\n\t  const query = searchParams.get(\"query\");\n\t  return NextResponse.json({ query: query });\n\t}\n"]}
{"filename": "src/app/api/lunatic/css/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\timport { OpenAI } from \"langchain/llms/openai\";\n\timport { loadLunaticCssChain } from \"@/utils/langchain/chains/lunatic\";\n\texport async function POST(request: Request) {\n\t  const res = await request.json();\n\t  const currentCss = res.currentCss;\n\t  const pastMessagesJsonString = res.pastMessagesJsonString;\n\t  let chatHistory: string[] = [];\n\t  if (pastMessagesJsonString && pastMessagesJsonString !== \"undefined\") {\n\t    const pastMessages: {\n", "      messages: Array<{ type: string; data: { content: string } }>;\n\t    } = JSON.parse(pastMessagesJsonString);\n\t    chatHistory = pastMessages.messages.map((message, idx) => {\n\t      if (message.data.content) {\n\t        if (idx === 0 || idx % 2 === 0) {\n\t          return `Human: ${message.data.content}`;\n\t        } else {\n\t          return `AI: ${message.data.content}`;\n\t        }\n\t      } else {\n", "        return \"\";\n\t      }\n\t    });\n\t  }\n\t  console.log(\"----- ----- -----\");\n\t  console.log(\"----- css -----\");\n\t  console.log(\"----- ----- -----\");\n\t  console.log(chatHistory.join(\"\\n\"));\n\t  console.log(\"\");\n\t  try {\n", "    const model = new OpenAI({ temperature: 0, maxTokens: 2000 });\n\t    const chain = loadLunaticCssChain({ llm: model });\n\t    const result = await chain.call({\n\t      chat_history: chatHistory.join(\"\\n\"),\n\t      //current_css: currentCss,\n\t    });\n\t    console.log(result.text);\n\t    return NextResponse.json({\n\t      css: result.text,\n\t    });\n", "  } catch (error) {\n\t    console.error(error);\n\t    return NextResponse.json({\n\t      css: undefined,\n\t    });\n\t  }\n\t}\n"]}
{"filename": "src/app/api/lunatic/surface/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\timport { OpenAI } from \"langchain/llms/openai\";\n\timport { BufferMemory, ChatMessageHistory } from \"langchain/memory\";\n\timport { AIChatMessage, HumanChatMessage } from \"langchain/schema\";\n\timport { loadLunaticSurfaceChain } from \"@/utils/langchain/chains/lunatic\";\n\texport async function POST(request: Request) {\n\t  //const { searchParams } = new URL(request.url);\n\t  //const query = searchParams.get(\"query\");\n\t  //const pastMessagesJsonString = searchParams.get(\"pastMessages\");\n\t  const res = await request.json();\n", "  const query = res.query;\n\t  const pastMessagesJsonString = res.pastMessagesJsonString;\n\t  let chatHistory = undefined;\n\t  if (pastMessagesJsonString && pastMessagesJsonString !== \"undefined\") {\n\t    const pastMessages: {\n\t      messages: Array<{ type: string; data: { content: string } }>;\n\t    } = JSON.parse(pastMessagesJsonString);\n\t    const chatHistoryMessages = pastMessages.messages.map(\n\t      (message, idx: number) => {\n\t        if (message.data.content) {\n", "          if (idx === 0 || idx % 2 === 0) {\n\t            return new HumanChatMessage(message.data.content);\n\t          } else {\n\t            return new AIChatMessage(message.data.content);\n\t          }\n\t        } else {\n\t          return new HumanChatMessage(\"\");\n\t        }\n\t      }\n\t    );\n", "    chatHistory = new ChatMessageHistory(chatHistoryMessages);\n\t  }\n\t  const memory = new BufferMemory({\n\t    chatHistory,\n\t  });\n\t  const model = new OpenAI({ temperature: 0, maxTokens: 2000 });\n\t  const surfaceChain = loadLunaticSurfaceChain({ llm: model, memory });\n\t  const surfaceResult = await surfaceChain.call({ input: query });\n\t  console.log(\"----- ----- -----\");\n\t  console.log(\"----- surface -----\");\n", "  console.log(\"----- ----- -----\");\n\t  console.log(\"Human:\", query);\n\t  console.log(\"AI:\", surfaceResult.response);\n\t  console.log(\"\");\n\t  return NextResponse.json({\n\t    query: query,\n\t    surface: surfaceResult.response,\n\t    history: memory.chatHistory,\n\t  });\n\t}\n"]}
