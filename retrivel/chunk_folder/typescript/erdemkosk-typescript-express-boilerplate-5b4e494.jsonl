{"filename": "jest.setup.ts", "chunked_list": ["import 'reflect-metadata';\n"]}
{"filename": "__tests__/unit/modules/example/example.controller.test.ts", "chunked_list": ["import ExampleController from '../../../../src/modules/example/example.controller'\n\tdescribe('FooController', () => {\n\t  it('should exists', () => {\n\t    expect(ExampleController).not.toBe(undefined)\n\t  })\n\t})\n"]}
{"filename": "src/app.ts", "chunked_list": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n\timport * as express from 'express';\n\timport 'express-async-errors';\n\timport { Application } from 'express';\n\timport * as swaggerUi from 'swagger-ui-express';\n\timport { swaggerSpec } from './util/swagger.util';\n\timport Logger from './util/logger.util'\n\tclass App {\n\t  public app: Application;\n\t  public port: number;\n", "  constructor(\n\t    appInit: { port: number; earlyMiddlewares: any; lateMiddlewares: any; routes: any; },\n\t  ) {\n\t    this.app = express();\n\t    this.port = appInit.port;\n\t    this.middlewares(appInit.earlyMiddlewares);\n\t    this.routes(appInit.routes);\n\t    this.middlewares(appInit.lateMiddlewares);\n\t    this.assets();\n\t    this.template();\n", "  }\n\t  private middlewares(middlewares: { forEach: (arg0: (middleware: any) => void) => void; }) {\n\t    middlewares.forEach((middleware) => {\n\t      this.app.use(middleware);\n\t    });\n\t  }\n\t  private routes(routes: { forEach: (arg0: (route: any) => void) => void; }) {\n\t    routes.forEach((route) => {\n\t      this.app.use('/', route.router);\n\t    });\n", "    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\t  }\n\t  // eslint-disable-next-line @typescript-eslint/no-empty-function\n\t  private assets() {\n\t  }\n\t  // eslint-disable-next-line @typescript-eslint/no-empty-function\n\t  private template() {\n\t  }\n\t  public listen() {\n\t    this.app.listen(this.port, () => {\n", "      Logger.info(`App listening on the http://localhost:${this.port}`);\n\t    });\n\t  }\n\t}\n\texport default App;\n"]}
{"filename": "src/server.ts", "chunked_list": ["import * as bodyParser from 'body-parser';\n\timport * as cors from 'cors';\n\timport helmet from 'helmet';\n\timport { errors } from 'celebrate';\n\timport config from './config';\n\timport App from './app';\n\timport loggerMiddleware from './middleware/logger.middleware';\n\timport errorMiddleware from './middleware/error.middleware';\n\timport { ContainerLogic } from './logic/container.logic';\n\timport('express-async-errors');\n", "const app = new App({\n\t  port: config.port,\n\t  earlyMiddlewares: [\n\t    bodyParser.json(),\n\t    bodyParser.urlencoded({ extended: true }),\n\t    loggerMiddleware,\n\t    cors(),\n\t    helmet(),\n\t  ],\n\t  routes: ContainerLogic.getRouteClasses(),\n", "  lateMiddlewares: [\n\t    errors({ statusCode: 422 }),\n\t    errorMiddleware,\n\t  ],\n\t});\n\tapp.listen();\n"]}
{"filename": "src/logic/container.logic.ts", "chunked_list": ["import 'reflect-metadata';\n\timport { container } from 'tsyringe';\n\timport * as glob from 'glob';\n\timport * as path from 'path';\n\texport class ContainerLogic {\n\t  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t  public static getRouteClasses(): any[] {\n\t    const moduleFolder = path.join(__dirname, '../modules');\n\t    const routeFiles = glob.sync(`${moduleFolder}/**/*.route.{ts,js}`);\n\t    return routeFiles.map((routeFile) => container.resolve(require(routeFile).default));\n", "  }\n\t}\n"]}
{"filename": "src/config/IConfig.interface.ts", "chunked_list": ["interface IConfig {\n\t    port?: number;\n\t}\n\texport default IConfig;\n"]}
{"filename": "src/config/index.ts", "chunked_list": ["import * as dotenv from 'dotenv';\n\timport Config from './enviroments/base';\n\timport DevConfig from './enviroments/dev';\n\timport ProdConfig from './enviroments/prod';\n\timport TestConfig from './enviroments/tests';\n\tdotenv.config();\n\tclass ConfigSingleton {\n\t  private static instance: ConfigSingleton;\n\t  private config: Config;\n\t  private constructor() {\n", "    const env: string = process.env.NODE_ENV || 'dev';\n\t    switch (env) {\n\t      case 'dev':\n\t        this.config = new DevConfig();\n\t        break;\n\t      case 'prod':\n\t        this.config = new ProdConfig();\n\t        break;\n\t      case 'test':\n\t        this.config = new TestConfig();\n", "        break;\n\t      default:\n\t        throw new Error('Unexpected env variable values found!');\n\t    }\n\t  }\n\t  public static getInstance(): ConfigSingleton {\n\t    if (!ConfigSingleton.instance) {\n\t      ConfigSingleton.instance = new ConfigSingleton();\n\t    }\n\t    return ConfigSingleton.instance;\n", "  }\n\t  public getConfig(): Config {\n\t    return this.config;\n\t  }\n\t}\n\texport default ConfigSingleton.getInstance().getConfig();\n"]}
{"filename": "src/config/enviroments/base.ts", "chunked_list": ["import IConfig from '../IConfig.interface';\n\tclass BaseConfig implements IConfig {\n\t  public port = Number(process.env.PORT) || 80;\n\t}\n\texport default BaseConfig;\n"]}
{"filename": "src/config/enviroments/dev.ts", "chunked_list": ["import BaseConfig from './base';\n\tclass DevConfig extends BaseConfig {\n\t  // eslint-disable-next-line no-useless-constructor\n\t  constructor() {\n\t    super();\n\t  }\n\t}\n\texport default DevConfig;\n"]}
{"filename": "src/config/enviroments/prod.ts", "chunked_list": ["import Config from './base';\n\tclass ProdConfig extends Config {\n\t  constructor() {\n\t    super();\n\t    this.port = 9000;\n\t  }\n\t}\n\texport default ProdConfig;\n"]}
{"filename": "src/config/enviroments/tests.ts", "chunked_list": ["import BaseConfig from './base';\n\tclass TestConfig extends BaseConfig {\n\t  // eslint-disable-next-line no-useless-constructor\n\t  constructor() {\n\t    super();\n\t  }\n\t}\n\texport default TestConfig;\n"]}
{"filename": "src/interfaces/ICustomErrors.interface.ts", "chunked_list": ["export default interface CustomErrors {\n\t    [key: string]: {\n\t      parentError: ErrorConstructor;\n\t      message: string;\n\t      code: number;\n\t      httpCode?: number;\n\t    };\n\t  }\n"]}
{"filename": "src/interfaces/IRouteBase.interface.ts", "chunked_list": ["interface IRouteBase {\n\t    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t    initializeRoutes(): any\n\t}\n\texport default IRouteBase;\n"]}
{"filename": "src/util/error.util.ts", "chunked_list": ["import { CustomError } from './base-errors';\n\timport { CUSTOM_ERRORS } from '../errors/custom-errors';\n\tfunction generateCustomError(\n\t  parentError: typeof CustomError,\n\t  errorKey: string,\n\t  message: string,\n\t  code: number,\n\t) {\n\t  return class extends parentError {\n\t    constructor() {\n", "      super(message, code, 400);\n\t      this.name = errorKey;\n\t    }\n\t  };\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\texport const ERROR_CLASSES: Record<string, any> = Object.entries(CUSTOM_ERRORS).reduce(\n\t  (errorClasses, [errorKey, errorDetails]) => {\n\t    const { parentError, message, code } = errorDetails;\n\t    const CustomErrorClass = generateCustomError(\n", "      parentError,\n\t      errorKey,\n\t      message,\n\t      code,\n\t    );\n\t    return {\n\t      ...errorClasses,\n\t      [errorKey]: CustomErrorClass,\n\t    };\n\t  },\n", "  {},\n\t);\n"]}
{"filename": "src/util/swagger.util.ts", "chunked_list": ["import * as swaggerJSDoc from 'swagger-jsdoc';\n\timport { Options } from 'swagger-jsdoc';\n\timport * as glob from 'glob';\n\timport * as path from 'path';\n\tconst moduleFolder = path.join(__dirname, '../modules');\n\tconst routeFiles = glob.sync(`${moduleFolder}/**/*.route.{ts,js}`);\n\tconst swaggerOptions: Options = {\n\t  definition: {\n\t    openapi: '3.0.0',\n\t    info: {\n", "      title: 'My API',\n\t      version: '1.0.0',\n\t      description: 'A simple API for demonstrating Swagger',\n\t    },\n\t    servers: [\n\t      {\n\t        url: '/',\n\t      },\n\t    ],\n\t    components: {\n", "      securitySchemes: {\n\t        JWT: {\n\t          type: 'apiKey',\n\t          in: 'header',\n\t          name: 'Authorization',\n\t          description: '',\n\t        },\n\t      },\n\t      securityDefinitions: {\n\t        JWT: {\n", "          type: 'apiKey',\n\t          in: 'header',\n\t          name: 'Authorization',\n\t          description: '',\n\t        },\n\t      },\n\t    },\n\t  },\n\t  apis: routeFiles,\n\t};\n", "export const swaggerSpec = swaggerJSDoc(swaggerOptions);\n"]}
{"filename": "src/util/logger.util.ts", "chunked_list": ["import * as winston from 'winston';\n\tconst logger = winston.createLogger();\n\tlogger.add(new winston.transports.Console({\n\t  format: winston.format.combine(\n\t    winston.format.colorize(),\n\t    winston.format.simple(),\n\t    winston.format.splat(),\n\t  ),\n\t}));\n\texport default logger;\n"]}
{"filename": "src/util/base-errors.ts", "chunked_list": [" type CustomErrors = {\n\t    [key: string]: {\n\t      parentError: typeof CustomError;\n\t      message: string;\n\t      code: number;\n\t      httpCode: number;\n\t    };\n\t  };\n\tclass CustomError extends Error {\n\t  constructor(\n", "    public message: string,\n\t    public code: number,\n\t    public httpCode: number,\n\t    public isCustom: boolean = true,\n\t  ) {\n\t    super(message);\n\t    this.name = this.constructor.name;\n\t    Error.captureStackTrace(this, this.constructor);\n\t  }\n\t}\n", "export { CustomError, CustomErrors };\n"]}
{"filename": "src/modules/example/example.route.ts", "chunked_list": ["import * as express from 'express';\n\timport { autoInjectable } from 'tsyringe';\n\timport { celebrate } from 'celebrate';\n\timport IRouteBase from '../../interfaces/IRouteBase.interface';\n\timport ExampleController from './example.controller';\n\timport schemas from './example.schema'\n\t@autoInjectable()\n\texport default class FooRoute implements IRouteBase {\n\t  private exampleController: ExampleController;\n\t  constructor(exampleController: ExampleController) {\n", "    this.exampleController = exampleController;\n\t    this.initializeRoutes();\n\t  }\n\t  public router = express.Router();\n\t  initializeRoutes() {\n\t    /**\n\t     * @swagger\n\t     *\n\t     * /example:\n\t     *   get:\n", "     *     summary: Get a Example\n\t     *     description: Retrieve a Example\n\t     *     tags:\n\t     *       - example\n\t     *     produces:\n\t     *       - application/json\n\t     *     parameters:\n\t     *       - name: id\n\t     *         in: query\n\t     *         required: true\n", "     *         description: Example ID.\n\t     *         schema:\n\t     *           type: integer\n\t     *     responses:\n\t     *       200:\n\t     *         description: Example value.\n\t     *         schema:\n\t     *           type: object\n\t     *           properties:\n\t     *             value:\n", "     *               type: string\n\t     */\n\t    this.router.get('/example', celebrate(schemas.getFoo), this.exampleController.getExampleValue);\n\t  }\n\t}\n"]}
{"filename": "src/modules/example/example.repository.ts", "chunked_list": ["export default class ExampleRepository {\n\t  public async getExampleValue(id: number) {\n\t    const examples = [{\n\t      id: 1,\n\t      name: 'erdem',\n\t    },\n\t    {\n\t      id: 1,\n\t      name: 'kosk',\n\t    }];\n", "    return examples.find((example) => example.id === id);\n\t  }\n\t}\n"]}
{"filename": "src/modules/example/example.schema.ts", "chunked_list": ["import { Joi, Segments } from 'celebrate';\n\tconst schemas = {\n\t  getFoo: {\n\t    [Segments.QUERY]: {\n\t      id: Joi.number().required(),\n\t    },\n\t  },\n\t};\n\texport default schemas;\n"]}
{"filename": "src/modules/example/example.service.ts", "chunked_list": ["import { autoInjectable } from 'tsyringe';\n\timport ExampleRepository from './example.repository';\n\timport { ERROR_CLASSES } from '../../util/error.util';\n\t@autoInjectable()\n\texport default class FooService {\n\t  exampleRepository: ExampleRepository;\n\t  constructor(exampleRepository: ExampleRepository) {\n\t    this.exampleRepository = exampleRepository;\n\t  }\n\t  async getExampleValue(id:number) {\n", "    const example = await this.exampleRepository.getExampleValue(id);\n\t    if (!example) {\n\t      throw new ERROR_CLASSES.ExampleError();\n\t    }\n\t    return example;\n\t  }\n\t}\n"]}
{"filename": "src/modules/example/example.controller.ts", "chunked_list": ["import { Request, Response } from 'express';\n\timport { autoInjectable } from 'tsyringe';\n\timport ExampleService from './example.service';\n\t@autoInjectable()\n\texport default class ExampleController {\n\t  exampleService: ExampleService;\n\t  constructor(exampleService: ExampleService) {\n\t    this.exampleService = exampleService;\n\t  }\n\t  public getExampleValue = async (req: Request, res: Response): Promise<void> => {\n", "    const { id } = req.query;\n\t    const example = await this.exampleService.getExampleValue(id);\n\t    res.status(200).json(example);\n\t  };\n\t}\n"]}
{"filename": "src/middleware/error.middleware.ts", "chunked_list": ["import { Request, Response, NextFunction } from 'express';\n\tconst errorMiddleware = (err, req: Request, res: Response, next: NextFunction) => {\n\t  if (err.isCustom) { // we noticed that this is the custom error\n\t    res.status(err.httpCode).json({\n\t      message: err.message,\n\t      errorCode: err.code,\n\t      success: false,\n\t    });\n\t  } else {\n\t    res.status(500).json({\n", "      message: 'Internal server error',\n\t      success: false,\n\t    });\n\t  }\n\t  next(err);\n\t};\n\texport default errorMiddleware;\n"]}
{"filename": "src/middleware/logger.middleware.ts", "chunked_list": ["import { Request, Response } from 'express';\n\timport Logger from '../util/logger.util';\n\tconst loggerMiddleware = (req: Request, resp: Response, next) => {\n\t  Logger.info('Request logged:', req.method, req.path);\n\t  next();\n\t};\n\texport default loggerMiddleware;\n"]}
{"filename": "src/errors/custom-errors.ts", "chunked_list": ["import { CustomError, CustomErrors } from '../util/base-errors';\n\texport const CUSTOM_ERRORS: CustomErrors = {\n\t  ExampleError: {\n\t    parentError: CustomError,\n\t    message: 'Example Error For Test',\n\t    code: 1,\n\t    httpCode: 401,\n\t  },\n\t};\n"]}
