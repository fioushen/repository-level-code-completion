{"filename": "src/index.ts", "chunked_list": ["import express from \"express\";\n\tconst app = express();\n\trequire(\"dotenv\").config();\n\timport { Request } from \"express\";\n\timport * as Sentry from \"@sentry/node\";\n\timport bodyParser from \"body-parser\";\n\timport cors from \"cors\";\n\timport session from \"express-session\";\n\tSentry.init({\n\t    dsn: process.env.sentry_dsn,\n", "    integrations: [\n\t        new Sentry.Integrations.Http({ tracing: true }),\n\t        new Sentry.Integrations.Express({ app }),\n\t        ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations()\n\t    ],\n\t    tracesSampleRate: 1.0\n\t})\n\timport router from \"./util/router\";\n\tconst port = process.env.port;\n\tapp.use(Sentry.Handlers.requestHandler());\n", "app.use(Sentry.Handlers.tracingHandler());\n\tapp.use(cors<Request>({ origin: \"*\" }));\n\tapp.use(bodyParser.urlencoded({ extended: true }));\n\tapp.use(express.json());\n\tapp.engine(\"html\", require(\"ejs\").renderFile);\n\tapp.set(\"view engine\", \"ejs\");\n\tapp.use(session({\n\t\tsecret: \"secret\",\n\t\tresave: true,\n\t\tsaveUninitialized: true\n", "}))\n\t// Connect to Database\n\timport database from \"./util/database\";\n\tdatabase();\n\tapp.use(express.static(\"public\"));\n\tapp.use(\"/\", router);\n\tapp.use(Sentry.Handlers.errorHandler());\n\tapp.listen(port, () => {\n\t    console.log(`Listening on Port: ${port}`);\n\t})\n"]}
{"filename": "src/endpoints/author.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport gravatar from \"gravatar-url\";\n\timport moment from \"moment\";\n\timport Post from \"../models/Post\";\n\timport User from \"../models/User\";\n\texport default async (req: Request, res: Response) => {\n\t    if(!await User.findOne({ username: req.params.username })) return res.status(404).render(\"errors/404\");\n\t    const user = await User.findOne({ username: req.params.username });\n\t    res.status(200).render(\"author\", {\n\t        author: {\n", "            name: `${user.firstName} ${user.lastName}`,\n\t            firstName: user.firstName,\n\t            username: req.params.username,\n\t            avatar: gravatar(user.email)\n\t        },\n\t        posts: (await Post.find({ author: req.params.username })).reverse(),\n\t        moment: moment\n\t    })\n\t}\n"]}
{"filename": "src/endpoints/dashboard.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport gravatar from \"gravatar-url\";\n\timport Post from \"../models/Post\";\n\texport default async (req: Request & any, res: Response) => {\n\t    if(!req.session.loggedIn) return res.status(401).redirect(\"/auth/login\");\n\t    res.status(200).render(\"dashboard\", {\n\t        avatar: gravatar(req.session.email),\n\t        firstName: req.session.firstName,\n\t        username: req.session.username,\n\t        posts: (await Post.find({ author: req.session.username })).reverse()\n", "    })\n\t}\n"]}
{"filename": "src/endpoints/404.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\texport default async (req: Request, res: Response) => {\n\t    res.status(404).render(\"errors/404\");\n\t}\n"]}
{"filename": "src/endpoints/index.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport moment from \"moment\";\n\timport Post from \"../models/Post\";\n\texport default async (req: Request & any, res: Response) => {\n\t    res.status(200).render(\"index\", {\n\t        posts: (await Post.find()).reverse(),\n\t        session: {\n\t            loggedIn: req.session.loggedIn\n\t        },\n\t        moment: moment\n", "    })\n\t}\n"]}
{"filename": "src/endpoints/authors.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport User from \"../models/User\";\n\texport default async (req: Request, res: Response) => {\n\t    const authors = await User.find();\n\t    const authorData = [];\n\t    for(const author of authors) {\n\t        authorData.push({\n\t            \"username\": author.username,\n\t            \"firstName\": author.firstName,\n\t            \"lastName\": author.lastName,\n", "        })\n\t    }\n\t    res.status(200).render(\"authors\", { authors: authorData });\n\t}\n"]}
{"filename": "src/endpoints/api/users.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport User from \"../../models/User\";\n\texport default async (req: Request & any, res: Response) => {\n\t    const users = await User.find();\n\t    const userData = [];\n\t    for(const user of users) {\n\t        userData.push({\n\t            \"username\": user.username,\n\t            \"first_name\": user.firstName,\n\t            \"last_name\": user.lastName\n", "        })\n\t    }\n\t    res.status(200).json(userData);\n\t}"]}
{"filename": "src/util/routes.ts", "chunked_list": ["import apiUsers from \"../endpoints/api/users\";\n\timport author from \"../endpoints/author\";\n\timport authors from \"../endpoints/authors\";\n\timport dashboard from \"../endpoints/dashboard\";\n\timport Error404 from \"../endpoints/404\";\n\timport index from \"../endpoints/index\";\n\texport default {\n\t    404: Error404,\n\t    account: {\n\t        \"change-password\": require(\"../endpoints/account/change-password\"),\n", "        index: require(\"../endpoints/account\"),\n\t        \"reset-password\": require(\"../endpoints/account/reset-password\")\n\t    },\n\t    api: {\n\t        auth: {\n\t            \"forgot-password\": require(\"../endpoints/api/auth/forgot-password\"),\n\t            login: require(\"../endpoints/api/auth/login\")\n\t        },\n\t        posts: require(\"../endpoints/api/posts\"),\n\t        user: {\n", "            password: require(\"../endpoints/api/user/password\")\n\t        },\n\t        users: apiUsers\n\t    },\n\t    auth: {\n\t        \"forgot-password\": require(\"../endpoints/auth/forgot-password\"),\n\t        login: require(\"../endpoints/auth/login\"),\n\t        logout: require(\"../endpoints/auth/logout\")\n\t    },\n\t    author: author,\n", "    authors: authors,\n\t    dashboard: dashboard,\n\t    index: index,\n\t    post: {\n\t        create: require(\"../endpoints/post/create\"),\n\t        delete: require(\"../endpoints/post/delete\"),\n\t        edit: require(\"../endpoints/post/edit\"),\n\t        index: require(\"../endpoints/post\")\n\t    }\n\t}\n"]}
{"filename": "src/util/database.ts", "chunked_list": ["import mongoose from \"mongoose\";\n\timport * as Sentry from \"@sentry/node\";\n\trequire(\"dotenv\").config();\n\texport default async () => {\n\t    // Supress Deprecation Warning\n\t    mongoose.set(\"strictQuery\", true);\n\t    return mongoose.connect(process.env.database, {\n\t        keepAlive: true\n\t    }).then(() => {\n\t        console.log(\"Connected to Database!\");\n", "    }).catch((err: Error) => {\n\t        Sentry.captureException(err);\n\t        console.error(err);\n\t        process.exit(1);\n\t    })\n\t}\n"]}
{"filename": "src/util/router.ts", "chunked_list": ["import { Request, Response, Router } from \"express\";\n\tconst router = Router();\n\timport routes from \"./routes\";\n\timport { rateLimit } from \"express-rate-limit\";\n\tconst resetPasswordLimiter = rateLimit({\n\t\twindowMs: 60 * 60, // 1 hour\n\t\tmax: 5, // 5 requests\n\t\tstandardHeaders: true,\n\t\tlegacyHeaders: false,\n\t    message: {\n", "        \"message\": \"Too many requests, try again later.\",\n\t        \"code\": \"RATE_LIMITED\"\n\t    }\n\t})\n\trouter.get(\"/\", async (req: Request, res: Response) => {\n\t    routes.index(req, res);\n\t})\n\trouter.get(\"/account\", async (req: Request, res: Response) => {\n\t    routes.account.index(req, res);\n\t})\n", "router.get(\"/account/change-password\", async (req: Request, res: Response) => {\n\t    routes.account[\"change-password\"](req, res);\n\t})\n\trouter.get(\"/account/reset-password\", async (req: Request, res: Response) => {\n\t    routes.account[\"reset-password\"](req, res);\n\t})\n\trouter.post(\"/api/auth/forgot-password\", async (req: Request, res: Response) => {\n\t    routes.api.auth[\"forgot-password\"](req, res);\n\t})\n\trouter.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n", "    routes.api.auth.login(req, res);\n\t})\n\trouter.delete(\"/api/posts\", async (req: Request, res: Response) => {\n\t    routes.api.posts(req, res);\n\t})\n\trouter.get(\"/api/posts\", async (req: Request, res: Response) => {\n\t    routes.api.posts(req, res);\n\t})\n\trouter.patch(\"/api/posts\", async (req: Request, res: Response) => {\n\t    routes.api.posts(req, res);\n", "})\n\trouter.put(\"/api/posts\", async (req: Request, res: Response) => {\n\t    routes.api.posts(req, res);\n\t})\n\trouter.patch(\"/api/user/password\", async (req: Request, res: Response) => {\n\t    routes.api.user.password(req, res);\n\t})\n\trouter.put(\"/api/user/password\", resetPasswordLimiter, async (req: Request, res: Response) => {\n\t    routes.api.user.password(req, res);\n\t})\n", "router.get(\"/api/users\", async (req: Request, res: Response) => {\n\t    routes.api.users(req, res);\n\t})\n\trouter.get(\"/auth/forgot-password\", async (req: Request, res: Response) => {\n\t    routes.auth[\"forgot-password\"](req, res);\n\t})\n\trouter.get(\"/auth/login\", async (req: Request, res: Response) => {\n\t    routes.auth.login(req, res);\n\t})\n\trouter.get(\"/auth/logout\", async (req: Request, res: Response) => {\n", "    routes.auth.logout(req, res);\n\t})\n\trouter.get(\"/author/:username\", async (req: Request, res: Response) => {\n\t    routes.author(req, res);\n\t})\n\trouter.get(\"/authors\", async (req: Request, res: Response) => {\n\t    routes.authors(req, res);\n\t})\n\trouter.get(\"/dashboard\", async (req: Request, res: Response) => {\n\t    routes.dashboard(req, res);\n", "})\n\trouter.get(\"/post/create\", async (req: Request, res: Response) => {\n\t    routes.post.create(req, res);\n\t})\n\trouter.get(\"/post/delete/:id\", async (req: Request, res: Response) => {\n\t    routes.post.delete(req, res);\n\t})\n\trouter.get(\"/post/edit/:id\", async (req: Request, res: Response) => {\n\t    routes.post.edit(req, res);\n\t})\n", "router.get(\"/post/:id\", async (req: Request, res: Response) => {\n\t    routes.post.index(req, res);\n\t})\n\trouter.get(\"*\", async (req: Request, res: Response) => {\n\t    routes[404](req, res);\n\t})\n\texport default router;\n"]}
