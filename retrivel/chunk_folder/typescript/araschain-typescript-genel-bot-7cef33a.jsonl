{"filename": "src/index.ts", "chunked_list": ["import { Bot } from \"./Client\";\n\tconst client = new Bot({\n\t    intents: 3276543\n\t});\n\tclient.connect()"]}
{"filename": "src/Commands/davet.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"davet\",\n\t    description: \"💙 Botun davet linkini atar.\",\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply();\n\t        interaction.followUp({ embeds: [\n\t            new EmbedBuilder()\n\t            .setAuthor({ name: \"Merhaba, Ben Silex!\" })\n", "            .setColor(\"#2F3136\")\n\t            .setTitle(\"Silex'e destek ver.\")\n\t            .setDescription(\"> <:bot:1039607042291269703> | Silex'i şimdi sunucuna davet et ve botun tadını çıkar!\")\n\t            ],\n\t            components: [\n\t                new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t                    new ButtonBuilder()\n\t                    .setLabel(`Davet Linkim`)\n\t                    .setEmoji(\"1044325557615202364\")\n\t                    .setStyle(ButtonStyle.Link)\n", "                    .setURL('https://discord.com/api/oauth2/authorize?client_id=1038372156578480199&permissions=347200&scope=applications.commands%20bot'),\n\t                    new ButtonBuilder()\n\t                    .setLabel(`Destek Sunucum`)\n\t                    .setEmoji(\"1039607057923461181\")\n\t                    .setStyle(ButtonStyle.Link)\n\t                    .setURL('https://discord.gg/ZtnpBbSDZz')\n\t                )\n\t            ]})\n\t    }\n\t}"]}
{"filename": "src/Commands/yasaklı-kelime.ts", "chunked_list": ["import Discord  from \"discord.js\";\n\timport db from \"croxydb\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"yasaklı-kelime\",\n\t    description: \"💙 Yasaklı kelime sistemini ayarlarsın!\",\n\t    options: [\n\t        {\n\t            type: 3,\n\t            name: \"kelime\",\n", "            description: \"1 adet kelime giriniz.\",\n\t            required: true\n\t        }\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply(); \n\t        const kelime = interaction.options.get(\"kelime\")?.value\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Rolleri Yönet` yetkisine sahip olmalısın!\")\n", "    if (!interaction.memberPermissions?.has(\"ManageRoles\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.push(`yasaklı_kelime_${interaction.guild?.id}`, kelime)\n\t        interaction.followUp(\"<:tik:1039607067729727519> | Yasaklı kelime ayarlandı.\")\n\t    }\n\t}"]}
{"filename": "src/Commands/afk.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"afk\",\n\t    description: \"💙 Afk Olursun!\",\n\t    options: [\n\t        {\n\t            type: 3,\n\t            name: \"sebep\",\n", "            description: \"Afk sebebi.\",\n\t            required: true\n\t        }\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply(); \n\t        const sebep = interaction.options.get(\"sebep\")?.value\n\t        db.set(`afk_${interaction.user.id}`, {\n\tsebep:  `${sebep}`\n\t        })\n", "        db.set(`afkDate_${interaction.user.id}`, {\n\t            afkDate:  Date.now(),\n\t        })\n\t        interaction.followUp(\"<:tik:1039607067729727519> | Başarıyla Afk Oldun!\")\n\t    }\n\t}"]}
{"filename": "src/Commands/idban.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport Discord from \"discord.js\";\n\timport db from \"croxydb\";\n\timport { Commands } from \"../Interfaces\";\n\timport { type } from \"os\";\n\texport const Command : Commands = {\n\t    name: \"idban\",\n\t    description: \"💙 ID ile kullanıcı yasaklarsın!\",\n\t    options: [\n\t        {\n", "            name:\"id\",\n\t            description:\"Lütfen bir kullanıcı ID girin!\",\n\t            type:3,\n\t            required:true\n\t        },\n\t        {\n\t            name:\"sebep\",\n\t            description:\"Lütfen bir sebep belirtin.\",\n\t            type:3,\n\t            required:true\n", "        }\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true }); \n\t        const id = interaction.options.get(\"id\")?.value\n\t        const sebep = interaction.options.get(\"sebep\")?.value\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Üyeleri Banla` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"BanMembers\")) return interaction.followUp({ embeds: [yetki] })\n", "    interaction.guild?.members.ban(`${id}`, { reason: `${sebep}`})\n\t    interaction.followUp(`<:tik:1039607067729727519> | Başarıyla Üyeyi Yasakladım!`)\n\t    }\n\t}"]}
{"filename": "src/Commands/yardım.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"yardım\",\n\t    description: \"💙 Botun yardım menüsüne bakarsın!\",\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply(); \n\t        return interaction.followUp({\n", "            embeds: [\n\t                new EmbedBuilder()\n\t                .setColor(\"Blue\")\n\t                .setTitle(\"・Hangi komutlarım hakkında bilgi almak istiyorsan o butona bas!\")\n\t                .setFooter({ text: `Silex Yardım Menüsü`, iconURL: `${client.user?.avatarURL()}` })\n\t                .setDescription(\"\\n\\n**<:links:1039607057923461181> Linkler**\\n> <:bot:1039607042291269703>・**Botun davet linki: [Tıkla](https://discord.com/api/oauth2/authorize?client_id=1038372156578480199&permissions=8&scope=bot%20applications.commands)**\\n> <:duyuru:1039607050734403657>・**Botun destek sunucusu: [Tıkla](https://discord.gg/SY7aMsVpUJ)**\\n> <:newmember:1044325552007422052>・**Botun gizlilik politikası: [Tıkla](https://github.com/araschain/Silex-Bot-Privacy-Policy)**\")\n\t                .setThumbnail(interaction.user.avatarURL())\n\t            ],\n\t        });\n\t    }\n", "}"]}
{"filename": "src/Commands/emojiler.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"emojiler\",\n\t    description: \"💙 Sunucudaki Emojileri Görürsün!!\",\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply();\n\t        const emotes = interaction.guild?.emojis.cache.size !== 0 ? interaction.guild?.emojis.cache.map((emoji) => `${interaction.guild?.emojis.cache.get(emoji.id)}`).join(\"\") : \"<:eheh:1082704679064064080>\"\n\t        var size: number;\n\t        if(interaction.guild?.premiumTier === 0) {\n", "            size = 50;\n\t        } else if(interaction.guild?.premiumTier === 1) {\n\t            size = 100\n\t        } else if(interaction.guild?.premiumTier === 2) {\n\t            size = 150\n\t        } else if(interaction.guild?.premiumTier === 3) {\n\t            size = 300\n\t        }\n\tconst embed = new EmbedBuilder()\n\t.setTimestamp()\n", ".setColor('Blue')\n\t.setTitle(`\\`${interaction.guild?.name}\\` adlı sunucunun emojileri!`)\n\t.setDescription(`${emotes}`)\n\tinteraction.followUp({embeds: [embed]})\n\t    }\n\t}"]}
{"filename": "src/Commands/kullanıcı-bilgi.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField, GuildMember, Guild } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"kullanıcı-bilgi\",\n\t    description: '💙 Kullanıcı bilgisine bakarsın.',\n\t    options: [\n\t      {\n\t        name:\"kullanıcı\",\n", "        description:\"Bilgisine bakmak istediğin kullanıcı etiketle!\",\n\t        type:6,\n\t        required:true\n\t    },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply();\n\t        const member = interaction.options.get(\"kullanıcı\")?.member as GuildMember\n\t        const embed = new EmbedBuilder()\n\t    .setDescription(`**➥ Kullanıcı Bilgileri**\n", "    • Kullanıcı: (<@${member?.id}> - \\`${member?.id}\\`)\n\t    • Hesap Kurulum Tarihi: <t:${parseInt(`${(member.user.createdTimestamp || 1000) / 1000}`)}:R>\n\t    • Sunucuya Katılma Tarihi: <t:${parseInt(`${(member.joinedTimestamp || 1000) / 1000}`)}:R>\n\t    `)\n\t    .setThumbnail(`${member?.displayAvatarURL()}`)\n\t    .setColor(\"Random\")\n\t    interaction.followUp({embeds: [embed]})\n\t    }\n\t}"]}
{"filename": "src/Commands/destek-sistemi.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"destek-sistemi\",\n\t    description: \"💙 Destek sistemini ayarlarsın!\",\n\t    options: [\n\t        {\n\t            name: \"kanal\",\n", "            description: \"Destek mesajının atılacağı kanalı ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t        {\n\t            name: \"log-kanalı\",\n\t            description: \"Destek kapatıldığında mesaj atılacacak kanalı ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n", "            channel_types: [0]\n\t        },\n\t        {\n\t            name: \"yetkili-rol\",\n\t            description: \"Destek yetkilisini ayarlarsın!\",\n\t            type: 8,\n\t            required: true,\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n", "        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t    const ticketkanal = interaction.options.get('kanal')?.channel\n\t    const logkanal = interaction.options.get('log-kanalı')?.channel\n\t    const rol = interaction.options.get('yetkili-rol')?.role\n\t    if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t    const ticketSystem = db.fetch(`ticketSystem_${interaction.guild?.id}`)\n\t    const ticketSystemDate: IAFK = db.fetch(`ticketSystemDate_${interaction.guild?.id}`)\n", "    interface IAFK {\n\t        date: number\n\t    }\n\t    if (ticketSystem && ticketSystemDate) {\n\t        const date = new EmbedBuilder()\n\t        .setDescription(`<:carpi:1040649840394260510> | Bu sistem <t:${parseInt(`${ticketSystemDate.date / 1000}`)}:R> önce açılmış!`)\n\t    return interaction.followUp({ embeds: [date] })\n\t    }\n\t    const category = await interaction.guild?.channels.create({\n\t        name: 'Destek Talepleri',\n", "        type: Discord.ChannelType.GuildCategory,\n\t        permissionOverwrites: [\n\t          {\n\t            id: interaction.guild?.id,\n\t            deny: [Discord.PermissionsBitField.Flags.ViewChannel],\n\t          },\n\t        ],\n\t      });    \n\t    const basarili = new EmbedBuilder()\n\t        .setColor(\"Green\")\n", "        .setDescription(`<:tik:1039607067729727519> | __**Destek Sistemi**__ başarıyla ayarlandı!\\n\\n<:kanal:1040649841996464139> Destek Kanalı: ${ticketkanal}\\n<:kanal:1040649841996464139> Log Kanalı: ${logkanal}\\n<:bot:1039607042291269703> Yetkili Rolü: ${rol}`)\n\t        db.set(`ticketKanal_${interaction.guild?.id}`, logkanal?.id)\n\t        db.set(`ticketSystem_${interaction.guild?.id}`, { yetkili: rol?.id, ticketchannel: ticketkanal?.id })\n\t        db.set(`ticketCategory_${interaction.guild?.id}`, { category:  category?.id, log: logkanal?.id });\n\t        db.set(`ticketSystemDate_${interaction.guild?.id}`, { date: Date.now() })\n\t        const menu = new Discord.EmbedBuilder()\n\t        .setColor(\"#000000\")\n\t        .setTitle(\"<:soru:1039607065045385256> | Destek talebi nasıl açabilirim?\")\n\t        .setDescription(\"> Aşağıdaki **Destek Talebi Oluştur** butonuna basarak destek talebi oluşturabilirsin!\")\n\t        .setFooter({ text: \"Silex\" })\n", "        const channelDB: IAFK = db.fetch(`ticketSystem_${interaction.guild?.id}`);\n\t        const channel = interaction.guild?.channels.cache.get(channelDB.ticketchannel)\n\t        interface IAFK {\n\t            ticketchannel: string\n\t        }\n\t        if(channel && channel.type === ChannelType.GuildText) {\n\t            channel.send({embeds: [menu], components: [\n\t                new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t                    new Discord.ButtonBuilder()\n\t                    .setEmoji(\"1044325577064190033\")\n", "                    .setLabel(\"Destek Talebi Oluştur\")\n\t                    .setStyle(Discord.ButtonStyle.Secondary)\n\t                    .setCustomId(\"ticketolustur\"),\n\t                new Discord.ButtonBuilder()\n\t                    .setEmoji(\"1039607065045385256\")\n\t                    .setLabel(\"Nasıl oluşturabilirim?\")\n\t                    .setStyle(Discord.ButtonStyle.Secondary)\n\t                    .setCustomId(\"ticketnasilacilir\")\n\t                )\n\t            ]})\n", "        }\n\t    return interaction.followUp({ embeds: [basarili], ephemeral: true }).catch((e) => { })\n\t    }\n\t}"]}
{"filename": "src/Commands/avatar.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"avatar\",\n\t    description: \"💙 Birinin Avatarına Bakarsın!\",\n\t    options: [\n\t        {\n\t            type: 6,\n\t            name: \"kullanıcı\",\n", "            description: \"Kullanıcı belirt.\",\n\t            required: true\n\t        }\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply(); \n\t        const member = interaction.options.getUser('kullanıcı')\n\t        const embed = new EmbedBuilder()\n\t        .setTitle(`${member?.username} adlı kullanıcının avatarı!`)\n\t        .setImage(`${member?.avatarURL()}`)\n", "        interaction.followUp({\n\t            embeds:[\n\t                embed\n\t            ],\n\t        })\n\t    }\n\t}"]}
{"filename": "src/Commands/istatistik.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport { codeBlock } from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\timport moment from \"moment\";\n\texport const Command : Commands = {\n\t    name: \"istatistik\",\n\t    description: \"💙 Botun istatistiğini görürsün!\",\n\t    async execute(client, interaction) {\n\t        const date : number = Date.now();\n\t        let members = client.guilds.cache.reduce((a, b) => a + b.memberCount, 0).toLocaleString()\n", "        await interaction.deferReply();\n\t        const row = new ActionRowBuilder()\n\t        .addComponents(\n\t        new ButtonBuilder()\n\t        .setLabel(\"Yenile\")\n\t        .setEmoji(\"1039607071093567658\")\n\t        .setStyle(ButtonStyle.Secondary)\n\t        .setCustomId(\"yenile\")\n\t        )\n\t        interaction.followUp({ embeds: [\n", "            new EmbedBuilder()\n\t            .addFields([\n\t                {\n\t                    name: \"Discord API;\",\n\t                    value: `${codeBlock(\"yaml\", `${client.ws.ping}ms`)}`,\n\t                    inline: true\n\t                },\n\t                {\n\t                    name: \"Mesaj gecikmesi;\",\n\t                    value: `${codeBlock(\"yaml\", `${(Date.now() - date).toString()}ms`)}`,\n", "                    inline: true\n\t                },\n\t            ])\n\t            .addFields([\n\t                {\n\t                    name: \"Sunucu Sayısı:\",\n\t                    value: `${codeBlock(\"yaml\", `${client.guilds.cache.size}`)}`,\n\t                    inline: true\n\t                },\n\t                {\n", "                    name: \"Kullanıcı Sayısı;\",\n\t                    value: `${codeBlock(\"yaml\", `${members}`)}`,\n\t                    inline: true\n\t                }\n\t            ])\n\t            ],\n\t            components: [row] as any })\n\t    }\n\t}"]}
{"filename": "src/Commands/mesaj-log.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"mesaj-log\",\n\t    description: '💙 Mesaj Log sistemini ayarlarsın!',\n\t    options: [\n\t        {\n\t            name: \"kanal\",\n", "            description: \"Mesaj Log kanalını ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n", "        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    const MessageLog = interaction.options.get('kanal')?.channel\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.set(`mesajLog_${interaction.guild?.id}`, { channel: MessageLog?.id })\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | Mesaj Log kanalı <#\"+MessageLog+\"> olarak ayarlandı!\")\n\t        }\n\t    }"]}
{"filename": "src/Commands/küfür-engel.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"küfür-engel\",\n\t    description: \"💙 Küfür Engel Sistemini Açıp Kapatırsın!\",\n\t    options: [    \n\t      {\n\t      type: 3,\n", "      name: \"seçenek\",\n\t      description: \"Sistemi kapatacak mısın yoksa açacak mısın?\",\n\t      required: true,\n\t      choices: [\n\t        {\n\t          name: \"Aç\",\n\t          value: \"ac\"\n\t        },\n\t        {\n\t          name: \"Kapat\",\n", "          value: \"kapat\"\n\t        }\n\t      ]\n\t    }\n\t  ],\n\t    async execute(client, interaction) {\n\t      await interaction.deferReply({ ephemeral: true });\n\t        const kufurEngelSystemTrue = interaction.options.get(\"seçenek\")?.value\n\t        const kufurEngelSystem = db.fetch(`kufurengel_${interaction.guild?.id}`)\n\t        switch(kufurEngelSystemTrue) {\n", "            case \"ac\": {\n\t                interface IAFK {\n\t                    date: number\n\t                }\n\t                const yetki = new Discord.EmbedBuilder()\n\t                .setColor(\"Red\")\n\t                .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t              if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t              const kufurEngelSystem = db.fetch(`kufurengel_${interaction.guild?.id}`)\n\t              const kufurEngelSystemDate: IAFK = db.fetch(`kufurengelDate_${interaction.guild?.id}`)\n", "              if (kufurEngelSystem && kufurEngelSystemDate) {\n\t                  const date = new EmbedBuilder()\n\t                  .setDescription(`<:carpi:1040649840394260510> | Bu sistem <t:${parseInt(`${kufurEngelSystemDate.date / 1000}`)}:R> önce açılmış!`)\n\t              return interaction.followUp({ embeds: [date] })\n\t              }\n\t              db.set(`kufurengel_${interaction.guild?.id}`, true)\n\t              db.set(`kufurengelDate_${interaction.guild?.id}`, { date: Date.now() })\n\t              return interaction.followUp({ content: \"<:tik:1039607067729727519> | Başarılı bir şekilde sistem açıldı!\" });\n\t            }\n\t            case \"kapat\": {\n", "              const yetki = new Discord.EmbedBuilder()\n\t              .setColor(\"Red\")\n\t              .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t            if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t              if(!kufurEngelSystem) return interaction.followUp({ content: \"<:carpi:1040649840394260510> | Bu sistem zaten kapalı?\" });\n\t              db.delete(`kufurengel_${interaction.guild?.id}`, true)\n\t              db.delete(`kufurengelDate_${interaction.guild?.id}`, true)\n\t              return interaction.followUp({ content: \"<:tik:1039607067729727519> | Başarılı bir şekilde sistem kapatıldı!\" });\n\t            }\n\t          }\n", "    }\n\t}"]}
{"filename": "src/Commands/sayaç.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"sayaç\",\n\t    description: '💙 Sayaç sistemini ayarlarsın!',\n\t    options: [\n\t        {\n\t            name: \"kanal\",\n", "            description: \"Sayaç kanalını ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n", "        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    const sayacChannel = interaction.options.get('kanal')?.channel\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.set(`sayac_${interaction.guild?.id}`, { channel: sayacChannel?.id })\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | Sayaç kanalı <#\"+sayacChannel+\"> olarak ayarlandı!\")\n\t        }\n\t    }"]}
{"filename": "src/Commands/kick.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"kick\",\n\t    description: '💙 Kullanıcıyı Sunucudan Atarsın.',\n\t    options: [\n\t        {\n\t            name:\"kullanıcı\",\n", "            description:\"Yasaklanıcak Kullanıcıyı Seçin.\",\n\t            type:6,\n\t            required:true\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const member = interaction.options.getUser('kullanıcı')\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n", "        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Üyeleri At` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"KickMembers\")) return interaction.followUp({ embeds: [yetki] })\n\t        interaction.guild?.members.kick(`${member?.id}`)\n\t        interaction.followUp(`<:tik:1039607067729727519> | Başarıyla Üyeyi Attım!`)\n\t    }\n\t}"]}
{"filename": "src/Commands/görsel-engel-sıfırla.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"görsel-engel-sıfırla\",\n\t    description: '💙 Görsel engel sistemini sıfırlarsın!',\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n", "        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.delete(`görselengel.${interaction.guild?.id}`, true)\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | Görsel Engel başarıyla kapatıldı!\")\n\t        }\n\t    }"]}
{"filename": "src/Commands/görsel-engel.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"görsel-engel\",\n\t    description: '💙 Görsel engel sistemini ayarlarsın!',\n\t    options: [\n\t        {\n\t            name: \"kanal\",\n", "            description: \"Görsel engel kanalını ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n", "        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    const gorselEngelChannel = interaction.options.get('kanal')?.channel\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.set(`görselengel.${interaction.guild?.id}`, gorselEngelChannel?.id)\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | <#\"+gorselEngelChannel+\"> kanalında sadece gif ve resimlere izin vereceğim!\")\n\t        }\n\t    }"]}
{"filename": "src/Commands/destek-sistemi-sıfırla.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"destek-sistemi-sıfırla\",\n\t    description: \"💙 Destek sistemini sıfırlarsın!\",\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n", "        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t    const basarili = new EmbedBuilder()\n\t    .setColor(\"Green\")\n\t    .setDescription(`<:tik:1039607067729727519> | __**Destek Sistemi**__ başarıyla sıfırlandı!`)    \n\t    db.delete(`ticketKanal_${interaction.guild?.id}`, true)\n\t    db.delete(`ticketSystem_${interaction.guild?.id}`, true)\n\t    db.delete(`ticketCategory_${interaction.guild?.id}`, true)\n", "    db.delete(`ticketSystemDate_${interaction.guild?.id}`, true)\n\t    db.delete(`ticketLvl_${interaction.guild?.id}`, true)\n\t    return interaction.followUp({ embeds: [basarili] }).catch((e) => { })\n\t        }\n\t    }"]}
{"filename": "src/Commands/kanal-kapat.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField, GuildTextBasedChannel } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"kanal-kapat\",\n\t    description: \"💙 Kanalı mesaj gönderimine kapatır!\",\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply();\n", "        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\tinteraction.followUp({ embeds: [new EmbedBuilder()\n\t    .setAuthor({ name: \"Merhaba, Ben Silex!\" })\n\t    .setColor(\"#2F3136\")\n\t    .setDescription(\"> Aşağıdaki butona basarak kanala mesaj yazılmasını kapatabilirsin.\")],\n\t    components: [\n\t        new ActionRowBuilder<ButtonBuilder>().addComponents(\n", "            new ButtonBuilder()\n\t            .setLabel(`Kanalı kapat.`)\n\t            .setCustomId(`kanalkapat`)\n\t            .setStyle(ButtonStyle.Secondary)\n\t        )\n\t    ] })\n\t    }\n\t};"]}
{"filename": "src/Commands/mesaj-log-sıfırla.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"mesaj-log-sıfırla\",\n\t    description: '💙 Mesaj Log sistemini sıfırlarsın!',\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n", "        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.set(`mesajLog_${interaction.guild?.id}`, true)\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | Mesaj log kanalı sıfırlandı!\")\n\t        }\n\t    }"]}
{"filename": "src/Commands/ban.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"ban\",\n\t    description: \"💙 Kullanıcıyı Sunucudan Yasaklarsın.\",\n\t    options: [\n\t        {\n\t            name:\"kullanıcı\",\n", "            description:\"Yasaklanıcak Kullanıcıyı Seçin.\",\n\t            type:6,\n\t            required:true\n\t        },\n\t        {\n\t            name:\"sebep\",\n\t            description:\"Hangi Sebepten dolayı yasaklanıcak?\",\n\t            type:3,\n\t            required:true\n\t        },\n", "    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const member = interaction.options.getUser('kullanıcı')\n\t        const sebep = interaction.options.get(\"sebep\")?.value\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Üyeleri Banla` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"BanMembers\")) return interaction.followUp({ embeds: [yetki] })\n\t        interaction.guild?.members.ban(`${member?.id}`, { reason: `${sebep}`})\n", "        interaction.followUp(`<:tik:1039607067729727519> | Başarıyla Üyeyi Yasakladım!`)\n\t    }\n\t}"]}
{"filename": "src/Commands/butonrol.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"buton-rol\",\n\t    description: \"💙 Rol alma sistemini ayarlarsın!\",\n\t    options: [\n\t        {\n\t            name:\"rol\",\n", "            description:\"Lütfen bir rol etiketle!\",\n\t            type:8,\n\t            required:true\n\t        },\n\t        {\n\t            type: 3,\n\t            name: \"yazı\",\n\t            description: \"Lütfen bir embed mesaj yazısı gir!\",\n\t            required: true\n\t        }\n", "    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply(); \n\t        const rol = interaction.options.get(\"rol\")?.role\n\t        const yazı = interaction.options.get(\"yazı\")?.value\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Rolleri Yönet` yetkisine sahip olmalısın!\")\n\t      if (!interaction.memberPermissions?.has(\"ManageRoles\")) return interaction.followUp({ embeds: [yetki] })\n\t        interaction.followUp({ embeds: [\n", "            new EmbedBuilder()\n\t            .setTitle(`Silex - Buton Rol Al Sistemi!`)\n\t            .setDescription(`${yazı}`)\n\t            .setColor(\"Blue\")\n\t            ],\n\t            components: [\n\t                new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t                    new ButtonBuilder()\n\t                    .setLabel(rol?.name ?? \"Bilinmiyor.\")\n\t                    .setStyle(ButtonStyle.Secondary)\n", "                    .setCustomId(`rol`)\n\t                )\n\t            ]})\n\t            db.set(`buton_rol_${interaction.guild?.id}`, {\n\t                rol:  rol?.id\n\t            })\n\t    }\n\t}"]}
{"filename": "src/Commands/kanal-aç.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionsBitField, GuildTextBasedChannel } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"kanal-aç\",\n\t    description: \"💙 Kanalı mesaj gönderimine açar!\",\n\t    options: [],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply();\n", "        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t    if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\tinteraction.followUp({ embeds: [new EmbedBuilder()\n\t    .setAuthor({ name: \"Merhaba, Ben Silex!\" })\n\t    .setColor(\"#2F3136\")\n\t    .setDescription(\"> Aşağıdaki butona basarak kanala mesaj yazılmasını açabilirsin.\")],\n\t    components: [\n\t        new ActionRowBuilder<ButtonBuilder>().addComponents(\n", "            new ButtonBuilder()\n\t            .setLabel(`Kanalı aç.`)\n\t            .setCustomId(`kanalac`)\n\t            .setStyle(ButtonStyle.Secondary)\n\t        )\n\t    ] })\n\t    }\n\t};"]}
{"filename": "src/Commands/yeni-hesap-engel.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"yeni-hesap-engel\",\n\t    description: \"💙 Yeni hesap engel sistemini ayarlarsın!\",\n\t    options: [\n\t        {\n\t            name: \"log-kanalı\",\n", "            description: \"Yeni hesap olan üyeler engellendiğinde mesaj gidecek kanal.\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t        {\n\t            name: \"cezalı-rolü\",\n\t            description: \"Yeni hesap olan üyelere verilecek rol.\",\n\t            type: 8,\n\t            required: true,\n", "        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n\t        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t    const logkanal = interaction.options.get('log-kanalı')?.channel\n\t    const cezalıRol: any = await interaction.guild?.roles.fetch(`${interaction.options.get('cezalı-rolü', true)?.role?.id}`)\n\t    if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n", "    const basarili = new Discord.EmbedBuilder()\n\t    .setColor(\"Green\")\n\t    .setDescription(`${logkanal} **yeni hesap engel** log kanalı olarak ayarlandı,\\n${cezalıRol} rolüde cezalı rol olarak ayarlandı.`)\n\t    const pozisyon = new EmbedBuilder()\n\t    .setColor(\"Red\")\n\t    .setDescription(`${cezalıRol} benim rolümden yüksekte!\\n\\n**Sunucu Ayarları** -> __**Roller**__ kısmından rolümü ${cezalıRol} rolünün üzerine sürüklemelisin.`)\n\tif (cezalıRol.position >= cezalıRol.guild.members.me.roles.highest.position) return interaction.followUp({ embeds: [pozisyon], ephemeral: true })\n\t    interaction.followUp({ embeds: [basarili], ephemeral: true }).catch((e) => { })\n\t    db.set(`yeniHesapEngel_${interaction.guild?.id}`, { log: logkanal?.id, rol: cezalıRol.id })\n\t    }\n", "}"]}
{"filename": "src/Commands/capslock-koruma.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name: \"capslock-engel\",\n\t    description: \"💙 CapsLock Engel Sistemini Açıp Kapatırsın!\",\n\t    options: [    \n\t      {\n\t      type: 3,\n", "      name: \"seçenek\",\n\t      description: \"Sistemi kapatacak mısın yoksa açacak mısın?\",\n\t      required: true,\n\t      choices: [\n\t        {\n\t          name: \"Aç\",\n\t          value: \"ac\"\n\t        },\n\t        {\n\t          name: \"Kapat\",\n", "          value: \"kapat\"\n\t        }\n\t      ]\n\t    }\n\t  ],\n\t    async execute(client, interaction) {\n\t      await interaction.deferReply({ ephemeral: true });\n\t        const capslockSystemTrue = interaction.options.get(\"seçenek\")?.value\n\t        const capslockSystem = db.fetch(`capslockengel_${interaction.guild?.id}`)\n\t        switch(capslockSystemTrue) {\n", "            case \"ac\": {\n\t                interface IAFK {\n\t                    date: number\n\t                }\n\t                const yetki = new Discord.EmbedBuilder()\n\t                .setColor(\"Red\")\n\t                .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t              if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t              const capslockSystem = db.fetch(`capslockengel_${interaction.guild?.id}`)\n\t              const capslockSystemDate: IAFK = db.fetch(`capslockSystemDate_${interaction.guild?.id}`)\n", "              if (capslockSystem && capslockSystemDate) {\n\t                  const date = new EmbedBuilder()\n\t                  .setDescription(`<:carpi:1040649840394260510> | Bu sistem <t:${parseInt(`${capslockSystemDate.date / 1000}`)}:R> önce açılmış!`)\n\t              return interaction.followUp({ embeds: [date] })\n\t              }\n\t              db.set(`capslockengel_${interaction.guild?.id}`, true)\n\t              db.set(`capslockSystemDate_${interaction.guild?.id}`, { date: Date.now() })\n\t              return interaction.followUp({ content: \"<:tik:1039607067729727519> | Başarılı bir şekilde sistem açıldı!\" });\n\t            }\n\t            case \"kapat\": {\n", "              const yetki = new Discord.EmbedBuilder()\n\t              .setColor(\"Red\")\n\t              .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Yönetici` yetkisine sahip olmalısın!\")\n\t            if (!interaction.memberPermissions?.has(\"Administrator\")) return interaction.followUp({ embeds: [yetki] })\n\t              if(!capslockSystem) return interaction.followUp({ content: \"<:carpi:1040649840394260510> | Bu sistem zaten kapalı?\" });\n\t              db.delete(`capslockengel_${interaction.guild?.id}`, true)\n\t              db.delete(`capslockSystemDate_${interaction.guild?.id}`, true)\n\t              return interaction.followUp({ content: \"<:tik:1039607067729727519> | Başarılı bir şekilde sistem kapatıldı!\" });\n\t            }\n\t          }\n", "    }\n\t}"]}
{"filename": "src/Commands/resimli-giriş-çıkış.ts", "chunked_list": ["import { ActionRowBuilder, ChannelType, ButtonBuilder, ButtonStyle, EmbedBuilder } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Commands } from \"../Interfaces\";\n\texport const Command : Commands = {\n\t    name:\"resimli-giriş-çıkış\",\n\t    description: '💙 Resimli Giriş Çıkış sistemini ayarlarsın!',\n\t    options: [\n\t        {\n\t            name: \"kanal\",\n", "            description: \"Resimli Giriş Çıkış kanalını ayarlarsın!\",\n\t            type: 7,\n\t            required: true,\n\t            channel_types: [0]\n\t        },\n\t    ],\n\t    async execute(client, interaction) {\n\t        await interaction.deferReply({ ephemeral: true });\n\t        const yetki = new Discord.EmbedBuilder()\n\t        .setColor(\"Red\")\n", "        .setDescription(\"<:carpi:1040649840394260510> | Bu komutu kullanabilmek için `Kanalları Yönet` yetkisine sahip olmalısın!\")\n\t    const resimliGiris = interaction.options.get('kanal')?.channel\n\t    if (!interaction.memberPermissions?.has(\"ManageChannels\")) return interaction.followUp({ embeds: [yetki] })\n\t        db.set(`canvaskanal_${interaction.guild?.id}`, { channel: resimliGiris?.id })\n\t        return interaction.followUp(\"<:tik:1039607067729727519> | Resimli Giriş Çıkış <#\"+resimliGiris+\"> olarak ayarlandı!\")\n\t        }\n\t    }"]}
{"filename": "src/Events/guildMemberAdd.ts", "chunked_list": ["import { Events } from \"../Interfaces\";\n\timport { Message, EmbedBuilder, GuildMember, GuildBasedChannel, ChannelType, ActionRowBuilder, ButtonBuilder, AttachmentBuilder } from \"discord.js\";\n\timport Discord from \"discord.js\";\n\timport db from \"croxydb\";\n\timport config from \"../config.json\";\n\timport { time } from \"console\";\n\timport Canvas from \"canvas\";\n\texport const Event : Events = {\n\t    name: \"guildMemberAdd\",\n\t    async execute(client, member: GuildMember) {\n", "        let sayacx: { channel: string } = db.fetch(`sayac_${member.guild.id}`);\n\t        const sayacChannel = member.guild?.channels.cache.get(sayacx.channel)\n\t        if(sayacx) {\n\t        if(sayacChannel && sayacChannel.type === ChannelType.GuildText) {\n\t            sayacChannel.send({ embeds: [{ description:  `:inbox_tray: | ${member} sunucuya katıldı! Sunucumuz **${member.guild.memberCount}** kişi oldu.`, color: 0x2F3136 }] }).catch(() => {});\n\t        }\n\t    }\n\t        let resimliGiris: { channel: string } = db.fetch(`canvaskanal_${member.guild.id}`);\n\t        const resimliGirisChannel = member.guild?.channels.cache.get(resimliGiris.channel)\n\t        if(resimliGiris) { \n", "            const canvas = Canvas.createCanvas(648, 387);\n\t            const ctx = canvas.getContext(\"2d\");\n\t            const background = await Canvas.loadImage(\"https://cdn.discordapp.com/attachments/1059089831604531243/1067877929251508376/gelen.png\");\n\t            ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\n\t            ctx.strokeStyle = \"#3c3c3c\";\n\t            ctx.strokeRect(0, 0, canvas.width, canvas.height);\n\t            ctx.fillStyle = `#D3D3D3`;\n\t            ctx.font = `37px \"Warsaw\"`;\n\t            ctx.textAlign = \"center\";\n\t            ctx.fillText(`${member.user.tag}`, 320, 300);\n", "            var avatar1 = member.displayAvatarURL()\n\t            let avatarURL: string | any = await Canvas.loadImage(avatar1.replace(\"webp\", \"jpg\"));      \n\t            let boyut = 85, x = 325.5, y = 161;\n\t            ctx.beginPath();\n\t            ctx.arc(x, y, boyut, 0, 2 * Math.PI, false);\n\t            ctx.clip();\n\t            ctx.drawImage(avatarURL, (x - boyut), (y - boyut), (boyut * 2), (boyut * 2));\n\t            const resimliGiris = new AttachmentBuilder(canvas.toBuffer(), { name: 'giris.png' });\n\t            if(resimliGirisChannel && resimliGirisChannel.type === ChannelType.GuildText) {\n\t                resimliGirisChannel.send({ content: `${member} sunucumuza hoşgeldin! Sunucumuz **${member.guild.memberCount}** kişi oldu.`, files: [resimliGiris] })\n", "                if (member.user.bot) {\n\t                    resimliGirisChannel.send(`Bu bir bot, ${member.user.tag}`);\n\t                    }\n\t            }\n\t        }\n\t        const yeniHesap = db.get(`yeniHesapEngel_${member.guild.id}`)\n\t        let yeniHesapx: { log: string } = db.get(`yeniHesapEngel_${member.guild.id}`)\n\t        if (yeniHesap && yeniHesapx) {\n\t            let logKanal = member.guild?.channels.cache.get(yeniHesapx.log)\n\t            if (!logKanal) return;\n", "            let cezalıRol = yeniHesap.rol\n\t            if (!cezalıRol) return;\n\t            let role: any = member.guild.roles.cache.get(cezalıRol)\n\t            await member.roles.add(role).catch(l => {\n\t                const rolEmbed = new EmbedBuilder()\n\t                    .setColor(\"Red\")\n\t                    .setDescription(\"Cezalı rolü bulunamadığı için **sistem sıfırlandı.**\")\n\t                    if(logKanal && logKanal.type === ChannelType.GuildText) {\n\t                        logKanal.send({ embeds: [rolEmbed] })\n\t                    }\n", "                db.delete(`yeniHesapEngel_${member.guild.id}`, true)\n\t                return;\n\t            })\n\t            if (role) {\n\t                const now = new Date().getTime() - (await client.users.fetch(member.id)).createdAt.getTime() < 1296000000\n\t                if (now) {\n\t                    if (!logKanal) {\n\t                        db.delete(`yeniHesapEngel_${member.guild.id}`, true)\n\t                        return;\n\t                    }\n", "                    await member.roles.add(role)\n\t                    const logEmbed = new EmbedBuilder()\n\t                        .setAuthor({ name: member.user.tag, iconURL: member.user.displayAvatarURL() })\n\t                        .setDescription(`${member} adlı kullanıcı yeni hesap olduğu için cezalı rolü verildi.`)\n\t                        .setTimestamp()\n\t                        .setColor(\"Red\")\n\t                        if(logKanal && logKanal.type === ChannelType.GuildText) {\n\t                            logKanal.send({ embeds: [logEmbed] })\n\t                        }\n\t                }\n", "            }\n\t        };\n\t    }\n\t}"]}
{"filename": "src/Events/messageDelete.ts", "chunked_list": ["import { Events } from \"../Interfaces\";\n\timport { Message, EmbedBuilder, GuildMember, GuildBasedChannel, ChannelType, ActionRowBuilder, ButtonBuilder, AttachmentBuilder } from \"discord.js\";\n\timport Discord from \"discord.js\";\n\timport db from \"croxydb\";\n\timport config from \"../config.json\";\n\timport { time } from \"console\";\n\timport Canvas from \"canvas\";\n\texport const Event : Events = {\n\t    name: \"messageDelete\",\n\t    async execute(client, message: Message) {\n", "        let MessageLog: { channel: string } = db.fetch(`mesajLog_${message.guild?.id}`);\n\t        const MessageLogChannel = message.guild?.channels.cache.get(MessageLog.channel)\n\t        if(MessageLog) {\n\t        if(MessageLogChannel && MessageLogChannel.type === ChannelType.GuildText) {\n\t            let me = client.user?.id\n\t            if (!message.author?.bot) {\n\t                if (!message.author) return;\n\t                if (message.author.id !== me) {\n\t                    const msg = message.content.slice(0, 1020);\n\t                    const messageDelete = new EmbedBuilder()\n", "                        .setColor(\"Red\")\n\t                        .setDescription(`Mesaj ${message.channel || \"kanal bulunamadı\"} adlı kanalda silindi`)\n\t                        .addFields(\n\t                            { name: \"Atıldığı Zaman:\", value: \"<t:\" + Math.floor(Date.now() / 1000) + \":F>\" },\n\t                            { name: `Kullanıcı:`, value: `<@!${message.author.id || \"üye bulunamadı\"}> (${message.author.id || \"üye bulunamadı\"})` },\n\t                            { name: `Silinen Mesaj:`, value: `\\`${msg || \"Mesaj bulunamadı\"}\\`` }\n\t                        )\n\t                        .setTimestamp()\n\t                    MessageLogChannel.send({ embeds: [messageDelete] }).catch(e => { })\n\t                } else {\n", "                    return;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    }\n\t}"]}
{"filename": "src/Events/ready.ts", "chunked_list": ["import { Events } from \"../Interfaces\";\n\texport const Event: Events = {\n\t  name: \"ready\",\n\t  once: false,\n\t  async execute(client) {\n\t    console.log(`Aktif: ${client.user?.tag}`)\n\t  },\n\t};"]}
{"filename": "src/Events/messageCreate.ts", "chunked_list": ["import { Events } from \"../Interfaces\";\n\timport { Message, EmbedBuilder, PermissionsBitField, GuildTextBasedChannel, ChannelType } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport config from \"../config.json\";\n\timport { time } from \"console\";\n\texport const Event : Events = {\n\t    name: \"messageCreate\",\n\t    async execute(client, message: Message) {\n\t        if (db.fetch(`afk_${message.author.id}`)) {\n", "            interface IAFK {\n\t                afkDate: number,\n\t                sebep: string\n\t            }\n\t        const afkDate: IAFK = db.fetch(`afkDate_${message.author.id}`)\n\t            const sebep: IAFK  = db.fetch(`afk_${message.author.id}`)\n\t            if (afkDate && sebep) {\n\t                const date = new EmbedBuilder()\n\t                .setDescription(`${message.author} Hoş geldin! **${sebep.sebep}** sebebiyle <t:${parseInt(`${afkDate.afkDate / 1000}`)}:R> afk'ydın`)\n\t                db.delete(`afk_${message.author.id}`, true)\n", "                db.delete(`afkDate_${message.author.id}`, true)\n\t            return message.reply({ embeds: [date] })\n\t            }\n\t             }\n\t             var kullanıcı = message.mentions.users.first();\n\t             interface AFKSEBEP {\n\t                sebep: string\n\t             }\n\t             if (kullanıcı) {\n\t             const sebep: AFKSEBEP = db.fetch(`afk_${kullanıcı.id}`)\n", "             if (sebep) {\n\t               const sebeps = new EmbedBuilder()\n\t               .setDescription(`<:soru:1039607065045385256> | Etiketlediğin kullanıcı **${sebep.sebep}** sebebiyle afk modunda!`)\n\t               message.reply({ embeds: [sebeps] });\n\t             }\n\t           }\n\t             if (message.content.length > 4) {\n\t                if (db.fetch(`capslockengel_${message.guild?.id}`)) {\n\t                  let caps = message.content.toUpperCase()\n\t                  if (message.content == caps) {\n", "                   if (!message.member?.permissions.has(\"Administrator\")) {\n\t                      if (!message.mentions.users.first()) {\n\t                       message.delete()\n\t                        const embed = new EmbedBuilder()\n\t                        .setTitle(`<:uyari:1040649846400499712> **UYARI!**`)\n\t                        .setDescription(`✋ | ${message.author}, Bu sunucuda büyük harf kullanımı engelleniyor!`)\n\t                        .setFooter({text: message.author.username, iconURL: message.author.displayAvatarURL()})\n\t                        .setTimestamp()\n\t                        message.channel.send({embeds: [embed]}).then((msg) => setTimeout(() => { msg.delete() }, 3000))\n\t            }\n", "           }\n\t            }\n\t          }\n\t         }\n\t         let kanal = db.get(`görselengel.${message.guild?.id}`);\n\t         if(message.channel.id == kanal){\n\t           if(!message.attachments.first()){\n\t             if(message.member?.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return;\n\t             if(message.author?.bot) return;\n\t             message.delete()\n", "             const embed = new EmbedBuilder()\n\t             .setColor(\"Random\")\n\t             .setDescription(`${message.author}, Bu Kanalda Sadece GIF & Resim Atabilirsiniz.`)\n\t             .setFooter({text: message.author.tag+\" UYARI!\", iconURL: message.author.displayAvatarURL()})\n\t             .setTimestamp()\n\t             message.channel.send({embeds: [embed]}).then((msg) => setTimeout(() => { msg.delete() }, 3000))\n\t           };\n\t         };\n\t         let kufur = db.fetch(`kufurengel_${message.guild?.id}`)\n\t         if(kufur) {\n", "         const kufurler = [\n\t           \"amk\",\n\t           \"piç\",\n\t           \"yarrak\",\n\t           \"oç\",\n\t           \"göt\",\n\t           \"amq\",\n\t           \"yavşak\",\n\t           \"amcık\",\n\t           \"amcı\",\n", "           \"orospu\",\n\t           \"sikim\",\n\t           \"sikeyim\",\n\t           \"aq\", \n\t           \"mk\"\n\t         ]\n\t       if(kufurler.some(alo => message.content.toLowerCase().includes(alo))) {\n\t           if(message.member?.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return;\n\t           if(message.author?.bot) return;\n\t       message.delete()\n", "       message.channel.send(`<:carpi:1040649840394260510> | Hey <@${message.author.id}>, Bu Sunucuda Küfür Engel Sistemi Aktif! `).then((msg) => setTimeout(() => { msg.delete() }, 5000))\n\t       }\n\t       }\n\t       const data = db.fetch(`yasaklı_kelime_${message.guild?.id}`)\n\t       if(data) {\n\t       if(message.member?.permissions.has(Discord.PermissionsBitField.Flags.Administrator)) return;\n\t       if(message.author?.bot) return;\n\t       if(data.includes(message.content)) {\n\t       message.delete()\n\t       const embed = new EmbedBuilder()\n", "       .setTitle(`<:uyari:1040649846400499712> **UYARI!**`)\n\t       .setDescription(`✋ | ${message.author}, Bu sunucuda bu kelime yasak!`)\n\t       .setFooter({text: message.author.username, iconURL: message.author.displayAvatarURL()})\n\t       .setTimestamp()\n\t       message.channel.send({ embeds: [embed] }).then((msg) => setTimeout(() => { msg.delete() }, 5000))\n\t       }\n\t     }\n\t    }\n\t}"]}
{"filename": "src/Events/interactionCreate.ts", "chunked_list": ["import { CommandInteraction, EmbedBuilder, codeBlock, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalActionRowComponentBuilder, Role, PermissionsBitField, User, ChannelType, GuildTextChannelResolvable, GuildTextBasedChannel } from \"discord.js\";\n\timport db from \"croxydb\";\n\timport Discord from \"discord.js\";\n\timport { Events } from \"../Interfaces\";\n\texport const Event : Events = {\n\t    name: \"interactionCreate\",\n\t    async execute(client, interaction) {\n\t        if(interaction.isChatInputCommand()) {\n\t            const cmd = client.commands.get(interaction.commandName);\n\t            if(cmd) {\n", "                try {\n\t                    cmd.execute(client, interaction)\n\t                } catch (err) {\n\t                    interaction.followUp({ content: \"Tebrikler, bir hata buldun! bunu geliştiricilerimize söylesen iyi edersin; https://discord.gg/\", ephemeral: true })                 \n\t                }\n\t            }\n\t     }\n\t     if (interaction.isModalSubmit()) {\n\t      if(interaction.customId === 'ticketforms'){\n\t        const ticketSystem = db.fetch(`ticketSystem_${interaction.guild?.id}`)\n", "        const lvl = db.fetch(`ticketLvl_${interaction.guild?.id}`) || 0;\n\t        db.add(`ticketLvl_${interaction.guild?.id}`, 1)\n\t        const ticketYetkili = await interaction.guild.roles.cache.find((ch: Role)=> ch.id === ticketSystem.yetkili );\n\t        const ticketCategory = db.fetch(`ticketCategory_${interaction.guild?.id}`);\n\t        const ticketsebep = interaction.fields.getTextInputValue('ticketInput');\n\t       const channel = await interaction.guild.channels.create({\n\t         name: `ticket-${interaction.user.username}-`+lvl,\n\t         type: Discord.ChannelType.GuildText,\n\t         parent: ticketCategory.category,\n\t         permissionOverwrites: [\n", "           {\n\t             id: interaction.guild.id,\n\t             deny: [Discord.PermissionsBitField.Flags.ViewChannel],\n\t           },\n\t            {\n\t             id: interaction.user.id,\n\t             allow: [Discord.PermissionsBitField.Flags.ViewChannel, Discord.PermissionsBitField.Flags.SendMessages],\n\t           },\n\t           {\n\t            id: ticketYetkili.id,\n", "            allow: [Discord.PermissionsBitField.Flags.ViewChannel, Discord.PermissionsBitField.Flags.SendMessages],\n\t           },\n\t         ],\n\t       });\n\t       const sebepTicket = new Discord.EmbedBuilder()\n\t       .setDescription(`Neden talep açtığını öğrenebilir miyiz?\\n> \\`${ticketsebep}\\``)\n\t       const ticketUserEmbed = new Discord.EmbedBuilder()\n\t       .setAuthor({ name: `${interaction.user.username} | Destek açıldı`, iconURL: `${interaction.user.displayAvatarURL({ dynmaic: true })} ` })\n\t       .setThumbnail(interaction.guild.iconURL({ dynmaic: true }))\n\t       .addFields([ \n", "        { name: \"Destek açan:\", value: `${interaction.user}`, inline: true },\n\t        { name: \"Açılış zamanı:\", value: `<t:${parseInt(`${channel.createdTimestamp / 1000}`)}:R>`, inline: true }\n\t       ])\n\t       .setColor('Green')\n\t       .setFooter({ text: `Oluşturan: ${client.user?.tag}`, iconURL: `${client.user?.avatarURL()}` })\n\t       .setTimestamp()\n\t       const row = new Discord.ActionRowBuilder()\n\t       .addComponents(\n\t         new Discord.ButtonBuilder()\n\t           .setCustomId(`ticketClose`)\n", "           .setLabel('Destek kapatılsın.')\n\t           .setEmoji(\"🔒\")\n\t           .setStyle(Discord.ButtonStyle.Secondary),\n\t       );\n\t        interaction.reply({ content: `<:tik:1039607067729727519> **|** Senin için bir tane destek kanalı ${channel} oluşturldu.`, ephemeral: true })\n\t        db.set(`ticketChannelUser_${interaction.guild?.id}${channel.id}`, { user: interaction.user.id })\n\t        db.set(`ticketUser_${interaction.user.id}${interaction.guild?.id}`, { whOpen: interaction.user.id, date: Date.now() })\n\t        channel.send({ content: `<@${interaction.user.id}> | ${ticketYetkili}`, embeds: [ticketUserEmbed] })\n\t        return channel.send({ embeds: [sebepTicket], components: [row]  })\n\t      }\n", "     }\n\t     if (interaction.isButton()) {\n\t        if(interaction.customId === \"rol\") {\n\t            const rolelDB: Role = db.fetch(`buton_rol_${interaction.guild?.id}`);\n\t            const role = interaction.guild?.roles.cache.get(rolelDB.rol)\n\t            interface Role {\n\t                rol: string\n\t            }\n\t            if(!interaction.member.roles.cache.has(role.id)) { \n\t            interaction.member.roles.add(role.id)\n", "          interaction.reply({content: \"<:tik:1039607067729727519> | Rol Başarıyla Verildi!\", ephemeral: true})\n\t           } else {\n\t            interaction.member.roles.remove(role.id)\n\t          interaction.reply({content: \"<:carpi:1040649840394260510> | Rol Başarıyla Alındı!\", ephemeral: true})\n\t        }\n\t          }\n\t          if(interaction.customId === \"ticketnasilacilir\") {\n\t            const embed = new Discord.EmbedBuilder()\n\t            .setAuthor({ name: \"Silex Destek Menüsü\", iconURL: `${client.user?.avatarURL()}`})\n\t            .setTitle(\"・Destek talebi nasıl oluşturabilirsin.\")\n", "            .setDescription(\"**Destek Talebi Oluştur** butonuna tıkladıktan sonra karşına bir form gelecektir. O formu doldurduktan sonra destek talebin başarılı bir şekilde oluşturulacaktır.\")\n\t            .setImage(`https://cdn.discordapp.com/attachments/1059089831604531243/1064225401297195058/image.png`)\n\t            .setColor('Blue')\n\t              interaction.reply({ embeds: [embed], ephemeral: true })\n\t          }\n\t          if(interaction.customId === `ticketolustur`) {\n\t            const find = db.fetch(`ticketUser_${interaction.user?.id}${interaction.guild?.id}`)\n\t            if(find) {\n\t              const ticketVar = new Discord.EmbedBuilder()\n\t              .setDescription(`<:carpi:1040649840394260510> Zaten bir talebin bulunmakta.`)\n", "              return interaction.reply({ embeds: [ticketVar], ephemeral: true })\n\t            }\n\t            const ticketmodal = new Discord.ModalBuilder()\n\t            .setCustomId('ticketforms')\n\t            .setTitle('Destek Oluşturma Formu');\n\t            const ticketInput = new Discord.TextInputBuilder()\n\t            .setCustomId('ticketInput')\n\t            .setLabel(\"Destek Oluşturma Sebebiniz Nedir?\")\n\t            .setRequired(true)  \n\t            .setStyle(Discord.TextInputStyle.Paragraph);\n", "            const afirstActionRow = new ActionRowBuilder<ModalActionRowComponentBuilder>().addComponents(ticketInput);\n\t            ticketmodal.addComponents(afirstActionRow);\n\t            await interaction.showModal(ticketmodal);\n\t          }\n\t          if(interaction.customId === `ticketClose`) {\n\t            interaction.channel.permissionOverwrites.set([\n\t              {\n\t                id: interaction.guild.id,\n\t                deny: [PermissionsBitField.Flags.ViewChannel],\n\t              },        \n", "            ]);\n\t            const row = new Discord.ActionRowBuilder()\n\t            .addComponents(\n\t              new Discord.ButtonBuilder()\n\t                .setCustomId(`ticketDelete`)\n\t                .setLabel('Destek silinsin.')\n\t                .setEmoji(\"🗑️\")\n\t                .setStyle(Discord.ButtonStyle.Secondary),\n\t            );\n\t            const ticketClose = new Discord.EmbedBuilder()\n", "            .setDescription(`<:tik:1039607067729727519> | Bu destek talebi kapatılmıştır.`)\n\t            .setColor('Green')\n\t            interaction.reply({ embeds: [ticketClose], components: [row] })\n\t          }\n\t          if(interaction.customId === `ticketDelete`) {\n\t            const chnl = db.fetch(`ticketChannelUser_${interaction.guild?.id}${interaction.channel?.id}`);\n\t            const x = chnl.user;\n\t            const adam = await interaction.guild.members.cache.find((user: User) => user.id === x);\n\t            const usr = db.fetch(`ticketUser_${x}${interaction.guild?.id}`);\n\t             const ticketLog = db.fetch(`ticketKanal_${interaction.guild?.id}`)\n", "             const ticketcloseembed = new EmbedBuilder()\n\t             .setTitle(`${adam.user.tag} adlı kişinin destek verileri.`)\n\t             .addFields(\n\t               { name: \"Destek Açan:\", value: `<@${usr.whOpen}>`, inline: true },\n\t               { name: \"Desteğin Kapatılış Tarihi:\", value: `<t:${parseInt(`${Date.now() / 1000}`)}:R>`, inline: true  },\n\t               { name: '\\u200B', value: '\\u200B' },\n\t               { name: \"Desteği Kapatan:\", value: `<@${interaction.user?.id}>`, inline: true },\n\t               { name: \"Desteğin Açılış Tarihi:\", value: `<t:${parseInt(`${usr.date / 1000}`)}:R>`, inline: true  },\n\t                     )\n\t             .setColor('Green')\n", "             .setThumbnail(`${adam.user?.displayAvatarURL()}`)\n\t             const ticketlog: GuildTextBasedChannel = interaction.guild?.channels.cache.get(ticketLog)\n\t          if(ticketlog && ticketlog.type === ChannelType.GuildText) {\n\t            ticketlog.send({ embeds: [ticketcloseembed] })\n\t          } else console.log(\"yok\")\n\t             db.delete(`ticketChannelUser_${interaction.guild?.id}${interaction.channel?.id}`, true);\n\t             db.delete(`ticketUser_${x}${interaction.guild?.id}`, true);\n\t             return interaction.channel.delete();\n\t           }\n\t           if(interaction.customId === `kanalac`) {\n", "            interaction.update({ embeds: [new EmbedBuilder()\n\t              .setAuthor({ name: \"Merhaba, Ben Silex!\" })\n\t              .setColor(\"#2F3136\")\n\t              .setDescription(\"> Kanal mesaj gönderimine açıldı!\")],\n\t              components: [\n\t                  new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t                      new ButtonBuilder()\n\t                      .setLabel(`Kanalı aç.`)\n\t                      .setCustomId(`kanalac`)\n\t                      .setDisabled(true)\n", "                      .setStyle(ButtonStyle.Secondary)\n\t                  )\n\t              ] })\n\t              if(interaction.channel.type === ChannelType.GuildText) {\n\t                interaction.channel.permissionOverwrites.edit(interaction.guild.id, { SendMessages: true })\n\t            }\n\t           }\n\t           if(interaction.customId === `kanalkapat`) {\n\t            interaction.update({ embeds: [new EmbedBuilder()\n\t              .setAuthor({ name: \"Merhaba, Ben Silex!\" })\n", "              .setColor(\"#2F3136\")\n\t              .setDescription(\"> Kanal mesaj gönderimine kapatıldı!\")],\n\t              components: [\n\t                  new ActionRowBuilder<ButtonBuilder>().addComponents(\n\t                      new ButtonBuilder()\n\t                      .setLabel(`Kanalı kapat.`)\n\t                      .setCustomId(`kanalkapat`)\n\t                      .setDisabled(true)\n\t                      .setStyle(ButtonStyle.Secondary)\n\t                  )\n", "              ] })\n\t              if(interaction.channel.type === ChannelType.GuildText) {\n\t                interaction.channel.permissionOverwrites.edit(interaction.guild.id, { SendMessages: false })\n\t            }\n\t           }\n\t    }\n\t    },\n\t}"]}
{"filename": "src/Events/guildMemberRemove.ts", "chunked_list": ["import { Events } from \"../Interfaces\";\n\timport { Message, EmbedBuilder, GuildMember, GuildBasedChannel, ChannelType, ActionRowBuilder, ButtonBuilder, AttachmentBuilder } from \"discord.js\";\n\timport Discord from \"discord.js\";\n\timport db from \"croxydb\";\n\timport config from \"../config.json\";\n\timport { time } from \"console\";\n\timport Canvas from \"canvas\";\n\texport const Event : Events = {\n\t    name: \"guildMemberRemove\",\n\t    async execute(client, member: GuildMember) {\n", "        let sayacx: { channel: string } = db.fetch(`sayac_${member.guild.id}`);\n\t        const sayacChannel = member.guild?.channels.cache.get(sayacx.channel)\n\t        if(sayacx) {\n\t        if(sayacChannel && sayacChannel.type === ChannelType.GuildText) {\n\t            sayacChannel.send({ embeds: [{ description:  `:outbox_tray: | ${member} sunucudan ayrıldı! Sunucumuz **${member.guild.memberCount}** kişi kaldı!`, color: 0x2F3136 }] }).catch(() => {});\n\t        }\n\t    }\n\t    let resimliGiris: { channel: string } = db.fetch(`canvaskanal_${member.guild.id}`);\n\t    const resimliGirisChannel = member.guild?.channels.cache.get(resimliGiris.channel)\n\t    if(resimliGiris) { \n", "        const canvas = Canvas.createCanvas(648, 387);\n\t        const ctx = canvas.getContext(\"2d\");\n\t        const background = await Canvas.loadImage(\"https://cdn.discordapp.com/attachments/1059089831604531243/1067877929016635412/giden.png\");\n\t        ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\n\t        ctx.strokeStyle = \"#3c3c3c\";\n\t        ctx.strokeRect(0, 0, canvas.width, canvas.height);\n\t        ctx.fillStyle = `#D3D3D3`;\n\t        ctx.font = `37px \"Warsaw\"`;\n\t        ctx.textAlign = \"center\";\n\t        ctx.fillText(`${member.user.tag}`, 320, 300);\n", "        var avatar1 = member.displayAvatarURL()\n\t        let avatarURL: string | any = await Canvas.loadImage(avatar1.replace(\"webp\", \"jpg\"));      \n\t        let boyut = 85, x = 325.5, y = 161;\n\t        ctx.beginPath();\n\t        ctx.arc(x, y, boyut, 0, 2 * Math.PI, false);\n\t        ctx.clip();\n\t        ctx.drawImage(avatarURL, (x - boyut), (y - boyut), (boyut * 2), (boyut * 2));\n\t        const resimliGiris = new AttachmentBuilder(canvas.toBuffer(), { name: 'cikis.png' });\n\t        if(resimliGirisChannel && resimliGirisChannel.type === ChannelType.GuildText) {\n\t            resimliGirisChannel.send({ content: `${member} sunucumuzdan çıktı! Sunucumuz **${member.guild.memberCount}** kişi kaldı.` , files: [resimliGiris] })\n", "            if (member.user.bot) {\n\t                resimliGirisChannel.send(`Bu bir bot, ${member.user.tag}`);\n\t                }\n\t        }\n\t    }\n\t    }\n\t}"]}
{"filename": "src/Interfaces/Commands.ts", "chunked_list": ["import { GuildChannelTypes, CommandInteraction } from \"discord.js\";\n\timport { Bot } from \"../Client\";\n\tinterface Localizations {\n\t    tr: string,\n\t    en: string\n\t}\n\tinterface Choice {\n\t    name: string,\n\t    name_localizations?: string,\n\t    value: string | number,\n", "}\n\tinterface Options {\n\t    type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11,\n\t    name: string,\n\t    name_localizations?: Localizations,\n\t    description: string,\n\t    description_localizations?: Localizations,\n\t    required?: boolean,\n\t    choices?: Choice[],\n\t    options?: Options[],\n", "    channel_types?: GuildChannelTypes[],\n\t    min_value?: number,\n\t    max_value?: number,\n\t    min_length?: number,\n\t    max_length?: number,\n\t    autocomplete?: boolean\n\t}\n\texport interface Commands {\n\t    name: string,\n\t    name_localizations?: Localizations,\n", "    description: string,\n\t    description_localizations?: Localizations,\n\t    options?: Options[],\n\t    default_member_permissions?: number,\n\t    dm_permission?: boolean,\n\t    nsfw?: boolean,\n\t    execute: (client: Bot, interaction: CommandInteraction) => Promise<void> | any;\n\t}"]}
{"filename": "src/Interfaces/Events.ts", "chunked_list": ["import { ClientEvents } from \"discord.js\";\n\timport { Bot } from \"../Client\";\n\texport interface Events { \n\t    name: keyof ClientEvents;\n\t    once?: boolean;\n\t    execute: (client: Bot, ...args: any) => Promise<any> | any;\n\t}"]}
{"filename": "src/Interfaces/Config.ts", "chunked_list": ["export interface Config {\n\t    token: string,\n\t    database: {\n\t        url: string,\n\t    }\n\t}\n"]}
{"filename": "src/Interfaces/index.ts", "chunked_list": ["export { Commands } from \"./Commands\"\n\texport { Events } from \"./Events\"\n\texport { Config } from \"./Config\""]}
{"filename": "src/Interfaces/Options.ts", "chunked_list": ["import { GuildChannelTypes } from \"discord.js\";\n\tinterface Choices {\n\t    name: string,\n\t    value: string\n\t}\n\texport interface Options {\n\t    type: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11\n\t    name: string;\n\t    description: string;\n\t    channel_types?: GuildChannelTypes[]\n", "    choices?: Choices[]\n\t    focused?: boolean;\n\t    required?: boolean;\n\t    options?: Options[]\n\t}"]}
{"filename": "src/Client/index.ts", "chunked_list": ["import { Client, Collection } from \"discord.js\";\n\timport { Config, Commands, Events } from \"../Interfaces\";\n\timport { Routes, REST } from \"discord.js\";\n\timport configFile from \"../config.json\";\n\timport fs from \"fs\";\n\timport path from \"path\";\n\timport { connect, set } from \"mongoose\";\n\texport class Bot extends Client {\n\t    public config : Config = configFile;\n\t    public commands : Collection<string, Commands> = new Collection()\n", "    async connect() {\n\t        const rest = new REST({ version: \"10\" }).setToken(this.config.token);\n\t        //this.mongodb()\n\t        this.registeredCommands()\n\t        this.registeredEvents()\n\t        this.postingCommands(rest)\n\t        this.login(this.config.token)\n\t    }\n\t    async registeredEvents() {\n\t        fs.readdir(path.join(__dirname, \"../Events\"), (err, events: string[]) => {\n", "            if(err) throw new Error(err.message);\n\t            events.forEach(async (event : string) => {\n\t                try {\n\t                    const { Event }: { Event: Events } = await import(`../Events/${event}`);\n\t                    if(Event.once) {\n\t                        this.once(Event.name, (...args) => {\n\t                            Event.execute(this, ...args)\n\t                        });\n\t                    } else {\n\t                        this.on(Event.name, (...args) => {\n", "                            Event.execute(this, ...args)\n\t                        });\n\t                    }\n\t                } catch (err) {\n\t                    throw err;\n\t                }\n\t            });\n\t       });\n\t       return this;\n\t    }\n", "    public async registeredCommands() {\n\t        fs.readdir(path.join(__dirname, \"../Commands\"), (err, commands: string[]) => {\n\t            if(err) throw new Error(err.message);\n\t            commands.forEach(async (command : string) => {\n\t                try {\n\t                    const { Command }: { Command: Commands } = await import(`../Commands/${command}`);\n\t                    this.commands.set(Command.name, Command)\n\t                } catch (err) {\n\t                    throw err;\n\t                }\n", "            });\n\t       });\n\t    }\n\t    public async postingCommands(rest: any) {\n\t        this.once(\"ready\", async() => {\n\t            await rest.put(Routes.applicationCommands(\"777595295055085588\"), { body: this.commands.toJSON() });\n\t        });\n\t    }\n\t    public async mongodb() {\n\t        set(\"strictQuery\", false)\n", "       connect(this.config.database.url)\n\t    }\n\t}"]}
