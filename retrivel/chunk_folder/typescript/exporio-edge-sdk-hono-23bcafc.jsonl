{"filename": "vitest.config.ts", "chunked_list": ["import { defineConfig } from 'vitest/config'\n\texport default defineConfig({\n\t    test: {\n\t        environment: 'miniflare',\n\t    },\n\t})\n"]}
{"filename": "test/index.test.ts", "chunked_list": ["import { Hono } from 'hono'\n\timport { describe, expect, it, vi, afterEach } from 'vitest'\n\timport { exporioMiddleware } from '../src/index'\n\timport { Instructions } from '../src/types'\n\tglobal.fetch = vi.fn()\n\tconst exampleHtml: string = `\n\t<!DOCTYPE html>\n\t<html>\n\t    <head>\n\t        <title>Page Title</title>\n", "    </head>\n\t    <body>\n\t        <h1 id=\"myTeaser\">Teaser</h1>\n\t        <h2 id=\"myDescription\">Page Description</h2>\n\t        <button id=\"myButton\" style=\"color:red;background:white;\">Click Me</button>\n\t    </body>\n\t</html>\n\t`\n\tfunction createFetchResponse(data) {\n\t    return { json: () => new Promise((resolve) => resolve(data)) }\n", "}\n\tdescribe('Exporio middleware', () => {\n\t    type Variables = { contentUrl: string }\n\t    const app = new Hono<{ Variables: Variables }>()\n\t    app.use(\n\t        '*',\n\t        exporioMiddleware({\n\t            url: 'http://edge-api.exporio.cloud',\n\t            apiKey: 'testAPIKey',\n\t        })\n", "    )\n\t    app.get('*', async (c) => {\n\t        const contentUrl = c.get('contentUrl')\n\t        const headers = new Headers()\n\t        headers.set('X-contentUrl', contentUrl)\n\t        headers.set('Set-Cookie', 'myCookie=123; Path=/')\n\t        return new Response(exampleHtml, { headers: headers })\n\t    })\n\t    afterEach(() => {\n\t        vi.restoreAllMocks()\n", "    })\n\t    it('Should successfully execute Exporio Instructions', async () => {\n\t        const exampleInstructions: Instructions = {\n\t            customUrlInstruction: {\n\t                loadCustomUrl: true,\n\t                customUrl: 'http://localhost/new/',\n\t            },\n\t            rewriterInstruction: {\n\t                useRewriter: true,\n\t                transformations: [\n", "                    { selector: '#myTeaser', method: 'SetInnerContent', argument1: 'New Teaser', argument2: null },\n\t                    { selector: '#myDescription', method: 'Remove', argument1: null, argument2: null },\n\t                    { selector: '#myButton', method: 'SetStyleProperty', argument1: 'color', argument2: 'green' },\n\t                ],\n\t            },\n\t            cookieInstruction: {\n\t                setCookie: true,\n\t                cookies: [\n\t                    { name: 'exporioCookie1', value: '456', path: '/' },\n\t                    { name: 'exporioCookie2', value: '789', path: '/', expires: 'Sun, 01 Jan 2023 01:01:01 GMT' },\n", "                ],\n\t            },\n\t        }\n\t        // @ts-ignore\n\t        fetch.mockResolvedValue(createFetchResponse(exampleInstructions))\n\t        const res = await app.request('http://localhost/')\n\t        const resText = await res.text()\n\t        expect(res.status).toBe(200)\n\t        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/new/')\n\t        expect(res.headers.get('Set-Cookie')).toEqual(\n", "            'myCookie=123; Path=/, exporioCookie1=456; Path=/, exporioCookie2=789; Path=/; Expires=Sun, 01 Jan 2023 01:01:01 GMT'\n\t        )\n\t        expect(resText).toContain('<h1 id=\"myTeaser\">New Teaser</h1>')\n\t        expect(resText).not.toContain('<h2 id=\"myDescription\">Page Description</h2>')\n\t        expect(resText).toContain('<button id=\"myButton\" style=\"color:green;background:white;\">Click Me</button>')\n\t    })\n\t    it('Should successfully return request when Exporio Instructions do not exist', async () => {\n\t        // @ts-ignore\n\t        fetch.mockResolvedValue(createFetchResponse({}))\n\t        const res = await app.request('http://localhost/')\n", "        const resText = await res.text()\n\t        expect(res.status).toBe(200)\n\t        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/')\n\t        expect(res.headers.get('Set-Cookie')).toContain('myCookie=123; Path=/')\n\t        expect(resText).toBe(exampleHtml)\n\t    })\n\t    it('Should successfully return request when Exporio Edge API fails', async () => {\n\t        // @ts-ignore\n\t        fetch.mockResolvedValue(createFetchResponse(undefined))\n\t        const res = await app.request('http://localhost/abc')\n", "        const resText = await res.text()\n\t        expect(res.status).toBe(200)\n\t        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/abc')\n\t        expect(res.headers.get('Set-Cookie')).toContain('myCookie=123; Path=/')\n\t        expect(resText).toBe(exampleHtml)\n\t    })\n\t})\n"]}
{"filename": "example/src/index.ts", "chunked_list": ["import { Hono } from 'hono'\n\timport { exporioMiddleware } from '@exporio/edge-sdk-hono'\n\ttype Variables = { contentUrl: string }\n\tconst app = new Hono<{ Variables: Variables }>()\n\tapp.use(\n\t    '*',\n\t    exporioMiddleware({\n\t        url: 'https://edge-api.exporio.cloud',\n\t        apiKey: 'EXPORIO_API_KEY',\n\t    })\n", ")\n\tapp.all('*', async (c) => {\n\t    // https://developers.cloudflare.com/workers/runtime-apis/fetch-event/#passthroughonexception\n\t    c.executionCtx.passThroughOnException()\n\t    const contentUrl = c.get('contentUrl')\n\t    const request = new Request(contentUrl, c.req)\n\t    const response = await fetch(request)\n\t    return new Response(response.body, response)\n\t})\n\texport default app\n"]}
{"filename": "src/index.ts", "chunked_list": ["import { Context, MiddlewareHandler } from 'hono'\n\timport { Instructions, ExporioMiddlewareOptions, RequestJson } from './types'\n\timport {\n\t    After,\n\t    Append,\n\t    AppendGlobalCode,\n\t    Before,\n\t    Prepend,\n\t    Remove,\n\t    RemoveAndKeepContent,\n", "    RemoveAttribute,\n\t    Replace,\n\t    SetAttribute,\n\t    SetInnerContent,\n\t    SetStyleProperty,\n\t} from './htmlRewriterClasses'\n\texport const exporioMiddleware = (options: ExporioMiddlewareOptions): MiddlewareHandler => {\n\t    if (!options.url) {\n\t        options.url = 'https://edge-api.exporio.cloud'\n\t    }\n", "    if (!options.apiKey) {\n\t        throw new Error('Exporio middleware requires options for \"apiKey\"')\n\t    }\n\t    return async (c, next) => {\n\t        const exporioInstructions = await fetchExporioInstructions(c, options)\n\t        if (!exporioInstructions) {\n\t            c.set('contentUrl', c.req.url)\n\t            await next()\n\t        } else {\n\t            c.set('contentUrl', getContentUrl(exporioInstructions, c.req.url))\n", "            await next()\n\t            applyRewriterInstruction(c, exporioInstructions)\n\t            applyCookieInstruction(c.res.headers, exporioInstructions)\n\t        }\n\t    }\n\t}\n\tconst buildRequestJson = (c: Context, apiKey: string): RequestJson => {\n\t    const headersInit: HeadersInit = []\n\t    c.req.headers.forEach((value: string, key: string) => headersInit.push([key, value]))\n\t    return {\n", "        originalRequest: {\n\t            url: c.req.url,\n\t            method: c.req.method,\n\t            headersInit: headersInit,\n\t        },\n\t        params: {\n\t            API_KEY: apiKey,\n\t        },\n\t    }\n\t}\n", "const fetchExporioInstructions = async (\n\t    c: Context,\n\t    options: ExporioMiddlewareOptions\n\t): Promise<Instructions | null> => {\n\t    try {\n\t        const requestJson = buildRequestJson(c, options.apiKey)\n\t        const exporioRequest = new Request(options.url, {\n\t            method: 'POST',\n\t            body: JSON.stringify(requestJson),\n\t            headers: { 'Content-Type': 'application/json' },\n", "        })\n\t        const exporioResponse = await fetch(exporioRequest)\n\t        return await exporioResponse.json()\n\t    } catch (err) {\n\t        console.error('Failed to fetch exporio instructions', err)\n\t        return null\n\t    }\n\t}\n\tconst getContentUrl = (instructions: Instructions, defaultUrl: string): string => {\n\t    const customUrlInstruction = instructions?.customUrlInstruction\n", "    return customUrlInstruction?.loadCustomUrl && customUrlInstruction?.customUrl\n\t        ? customUrlInstruction.customUrl\n\t        : defaultUrl\n\t}\n\tconst applyRewriterInstruction = (c: Context, instructions: Instructions) => {\n\t    let response = new Response(c.res.body, c.res)\n\t    instructions?.rewriterInstruction?.transformations?.forEach(({ selector, argument1, argument2, method }) => {\n\t        switch (method) {\n\t            // Default Methods\n\t            case 'After': {\n", "                const rewriter = new HTMLRewriter().on(selector, new After(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'Append': {\n\t                const rewriter = new HTMLRewriter().on(selector, new Append(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'Before': {\n", "                const rewriter = new HTMLRewriter().on(selector, new Before(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'Prepend': {\n\t                const rewriter = new HTMLRewriter().on(selector, new Prepend(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'Remove': {\n", "                const rewriter = new HTMLRewriter().on(selector, new Remove())\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'RemoveAndKeepContent': {\n\t                const rewriter = new HTMLRewriter().on(selector, new RemoveAndKeepContent())\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'RemoveAttribute': {\n", "                const rewriter = new HTMLRewriter().on(selector, new RemoveAttribute(argument1))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'Replace': {\n\t                const rewriter = new HTMLRewriter().on(selector, new Replace(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'SetAttribute': {\n", "                const rewriter = new HTMLRewriter().on(selector, new SetAttribute(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'SetInnerContent': {\n\t                const rewriter = new HTMLRewriter().on(selector, new SetInnerContent(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            // Custom Methods\n", "            case 'AppendGlobalCode': {\n\t                const rewriter = new HTMLRewriter().on(selector, new AppendGlobalCode(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n\t            case 'SetStyleProperty': {\n\t                const rewriter = new HTMLRewriter().on(selector, new SetStyleProperty(argument1, argument2))\n\t                response = rewriter.transform(response)\n\t                break\n\t            }\n", "        }\n\t    })\n\t    c.res = new Response(response.body, response)\n\t}\n\tconst applyCookieInstruction = (headers: Headers, instructions: Instructions) => {\n\t    instructions?.cookieInstruction?.cookies.forEach((cookie) => {\n\t        let cookieAttributes = [`${cookie.name}=${cookie.value}`]\n\t        if (cookie.domain) {\n\t            cookieAttributes.push(`Domain=${cookie.domain}`)\n\t        }\n", "        if (cookie.path) {\n\t            cookieAttributes.push(`Path=${cookie.path}`)\n\t        }\n\t        if (cookie.expires) {\n\t            cookieAttributes.push(`Expires=${cookie.expires}`)\n\t        }\n\t        if (cookie.maxAge) {\n\t            cookieAttributes.push(`Max-Age=${cookie.maxAge}`)\n\t        }\n\t        if (cookie.httpOnly) {\n", "            cookieAttributes.push('HttpOnly')\n\t        }\n\t        if (cookie.secure) {\n\t            cookieAttributes.push('Secure')\n\t        }\n\t        if (cookie.sameSite) {\n\t            cookieAttributes.push(`SameSite=${cookie.sameSite}`)\n\t        }\n\t        if (cookie.partitioned) {\n\t            cookieAttributes.push('Partitioned')\n", "        }\n\t        headers.append('Set-Cookie', cookieAttributes.join('; '))\n\t    })\n\t}\n"]}
{"filename": "src/htmlRewriterClasses/After.ts", "chunked_list": ["class After {\n\t    content: string\n\t    contentOptions?: ContentOptions\n\t    constructor(content: string, contentOptions?: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.after(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { After }\n"]}
{"filename": "src/htmlRewriterClasses/SetStyleProperty.ts", "chunked_list": ["class SetStyleProperty {\n\t    propertyName: string\n\t    propertyValue: string\n\t    constructor(propertyName: string, propertyValue: string) {\n\t        this.propertyName = propertyName\n\t        this.propertyValue = propertyValue\n\t    }\n\t    element(element: Element) {\n\t        let currentStyleAttribute = element.getAttribute('style') || ''\n\t        if (currentStyleAttribute.includes(`${this.propertyName}:`)) {\n", "            const styleProperties = currentStyleAttribute.split(';')\n\t            styleProperties.forEach((property) => {\n\t                if (property.includes(`${this.propertyName}:`)) {\n\t                    currentStyleAttribute = currentStyleAttribute.replace(\n\t                        property,\n\t                        `${this.propertyName}:${this.propertyValue}`\n\t                    )\n\t                }\n\t            })\n\t        } else {\n", "            currentStyleAttribute += `${this.propertyName}:${this.propertyValue};`\n\t        }\n\t        element.setAttribute('style', currentStyleAttribute)\n\t    }\n\t}\n\texport { SetStyleProperty }\n"]}
{"filename": "src/htmlRewriterClasses/Replace.ts", "chunked_list": ["class Replace {\n\t    content: string\n\t    contentOptions?: ContentOptions\n\t    constructor(content: string, contentOptions?: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.replace(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { Replace }\n"]}
{"filename": "src/htmlRewriterClasses/RemoveAttribute.ts", "chunked_list": ["class RemoveAttribute {\n\t    name: string\n\t    constructor(name: string) {\n\t        this.name = name\n\t    }\n\t    element(element: Element) {\n\t        element.removeAttribute(this.name)\n\t    }\n\t}\n\texport { RemoveAttribute }\n"]}
{"filename": "src/htmlRewriterClasses/Prepend.ts", "chunked_list": ["class Prepend {\n\t    content: string\n\t    contentOptions: ContentOptions\n\t    constructor(content: string, contentOptions: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.prepend(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { Prepend }\n"]}
{"filename": "src/htmlRewriterClasses/SetAttribute.ts", "chunked_list": ["class SetAttribute {\n\t    name: string\n\t    value: string\n\t    constructor(name: string, value: string) {\n\t        this.name = name\n\t        this.value = value\n\t    }\n\t    element(element: Element) {\n\t        element.setAttribute(this.name, this.value)\n\t    }\n", "}\n\texport { SetAttribute }\n"]}
{"filename": "src/htmlRewriterClasses/Remove.ts", "chunked_list": ["class Remove {\n\t    element(element: Element) {\n\t        element.remove()\n\t    }\n\t}\n\texport { Remove }\n"]}
{"filename": "src/htmlRewriterClasses/Before.ts", "chunked_list": ["class Before {\n\t    content: string\n\t    contentOptions?: ContentOptions\n\t    constructor(content: string, contentOptions?: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.before(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { Before }\n"]}
{"filename": "src/htmlRewriterClasses/AppendGlobalCode.ts", "chunked_list": ["class AppendGlobalCode {\n\t    htmlTag?: string\n\t    content: string\n\t    constructor(htmlTag: string, content: string) {\n\t        this.htmlTag = htmlTag\n\t        this.content = content\n\t    }\n\t    element(element: Element) {\n\t        const contentWithTags = `<${this.htmlTag}>${this.content}</${this.htmlTag}>`\n\t        element.append(contentWithTags, { html: true })\n", "    }\n\t}\n\texport { AppendGlobalCode }\n"]}
{"filename": "src/htmlRewriterClasses/Append.ts", "chunked_list": ["class Append {\n\t    content: string\n\t    contentOptions: ContentOptions\n\t    constructor(content: string, contentOptions: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.append(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { Append }\n"]}
{"filename": "src/htmlRewriterClasses/index.ts", "chunked_list": ["export { After } from './After'\n\texport { Append } from './Append'\n\texport { AppendGlobalCode } from './AppendGlobalCode'\n\texport { Before } from './Before'\n\texport { Prepend } from './Prepend'\n\texport { Remove } from './Remove'\n\texport { RemoveAndKeepContent } from './RemoveAndKeepContent'\n\texport { RemoveAttribute } from './RemoveAttribute'\n\texport { Replace } from './Replace'\n\texport { SetAttribute } from './SetAttribute'\n", "export { SetInnerContent } from './SetInnerContent'\n\texport { SetStyleProperty } from './SetStyleProperty'\n"]}
{"filename": "src/htmlRewriterClasses/SetInnerContent.ts", "chunked_list": ["class SetInnerContent {\n\t    content: string\n\t    contentOptions?: ContentOptions\n\t    constructor(content: string, contentOptions?: ContentOptions) {\n\t        this.content = content\n\t        this.contentOptions = contentOptions\n\t    }\n\t    element(element: Element) {\n\t        element.setInnerContent(this.content, this.contentOptions)\n\t    }\n", "}\n\texport { SetInnerContent }\n"]}
{"filename": "src/htmlRewriterClasses/RemoveAndKeepContent.ts", "chunked_list": ["class RemoveAndKeepContent {\n\t    element(element: Element) {\n\t        element.removeAndKeepContent()\n\t    }\n\t}\n\texport { RemoveAndKeepContent }\n"]}
{"filename": "src/types/general.ts", "chunked_list": ["type ExporioMiddlewareOptions = {\n\t    url: string\n\t    apiKey: string\n\t}\n\ttype RequestJson = {\n\t    originalRequest: {\n\t        url: string\n\t        method: string\n\t        headersInit: HeadersInit\n\t    }\n", "    params: {\n\t        API_KEY: string\n\t        [key: string]: any\n\t    }\n\t}\n\texport { ExporioMiddlewareOptions, RequestJson }\n"]}
{"filename": "src/types/instructions.ts", "chunked_list": ["type Cookie = {\n\t    name: string\n\t    value: string\n\t    domain?: string\n\t    path?: string\n\t    expires?: string\n\t    maxAge?: string\n\t    httpOnly?: boolean\n\t    secure?: boolean\n\t    sameSite?: string\n", "    partitioned?: boolean\n\t}\n\ttype CookieInstruction = {\n\t    setCookie: boolean\n\t    cookies: Cookie[]\n\t}\n\ttype Transformation = {\n\t    method: string\n\t    selector: string\n\t    argument1: any\n", "    argument2: any\n\t}\n\ttype RewriterInstruction = {\n\t    useRewriter: boolean\n\t    transformations: Transformation[]\n\t}\n\ttype CustomUrlInstruction = {\n\t    loadCustomUrl: boolean\n\t    customUrl: string | null\n\t}\n", "type Instructions = {\n\t    customUrlInstruction: CustomUrlInstruction\n\t    rewriterInstruction: RewriterInstruction\n\t    cookieInstruction: CookieInstruction\n\t}\n\texport { Instructions, CustomUrlInstruction, RewriterInstruction, Transformation, CookieInstruction, Cookie }\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export { ExporioMiddlewareOptions, RequestJson } from './general'\n\texport {\n\t    Instructions,\n\t    CustomUrlInstruction,\n\t    RewriterInstruction,\n\t    Transformation,\n\t    CookieInstruction,\n\t    Cookie,\n\t} from './instructions'\n"]}
