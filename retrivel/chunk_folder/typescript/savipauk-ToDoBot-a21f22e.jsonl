{"filename": "environment.d.ts", "chunked_list": ["declare global {\n\t    namespace NodeJS {\n\t        interface ProcessEnv {\n\t            token: string;\n\t            guildId: string;\n\t            clientId: string;\n\t            environment: \"dev\" | \"prod\" | \"debug\";\n\t        }\n\t    }\n\t}\n", "export { };"]}
{"filename": "src/tasks.ts", "chunked_list": ["import { User } from 'discord.js';\n\timport fs from 'fs';\n\tconst tasksFile = \"tasks.json\";\n\texport type Task = {\n\t    id: number;\n\t    description: string;\n\t    assignee: string;\n\t    threadId?: string;\n\t}\n\t// TODO: throw this shit into a database\n", "export function AddTask(description: string, assignee: string, threadId?: string): Task {\n\t    let id = FindLastId();\n\t    let task: Task = {\n\t        id, description, assignee, threadId\n\t    }\n\t    _AddTask(task);\n\t    return task;\n\t}\n\texport function RemoveTask(id: number): Task {\n\t    let tasks = GetTasks();\n", "    FlushTasks();\n\t    // TODO: THROW SOMETHING IF TASK DOESNT EXIST ITS NOT HANDLED YET\n\t    let removedTask: Task = null;\n\t    for (let task of tasks) {\n\t        if (task.id == id) {\n\t            removedTask = task;\n\t            continue;\n\t        }\n\t        _AddTask(task);\n\t    }\n", "    return removedTask;\n\t}\n\texport function SetThreadId(id: number, threadId: string): Task {\n\t    let tasks = GetTasks();\n\t    FlushTasks();\n\t    let editedTask: Task = null;\n\t    for (let task of tasks) {\n\t        if (task.id == id) {\n\t            if (threadId != undefined) task.threadId = threadId;\n\t            editedTask = task;\n", "        }\n\t        _AddTask(task);\n\t    }\n\t    return editedTask;\n\t}\n\texport function SetAssignee(id: number, assignee: User): Task {\n\t    let tasks = GetTasks();\n\t    FlushTasks();\n\t    let editedTask: Task = null;\n\t    for (let task of tasks) {\n", "        if (task.id == id) {\n\t            if (assignee != undefined) task.assignee = assignee.id;\n\t            editedTask = task;\n\t        }\n\t        _AddTask(task);\n\t    }\n\t    return editedTask;\n\t}\n\texport function SetDescription(id: number, description: string): Task {\n\t    let tasks = GetTasks();\n", "    FlushTasks();\n\t    let editedTask: Task = null;\n\t    for (let task of tasks) {\n\t        if (task.id == id) {\n\t            task.description = description;\n\t            editedTask = task;\n\t        }\n\t        _AddTask(task);\n\t    }\n\t    return editedTask;\n", "}\n\texport function GetTaskById(id: number): Task {\n\t    let tasks = GetTasks();\n\t    for (let task of tasks) {\n\t        if (task.id == id) {\n\t            return task;\n\t        }\n\t    }\n\t    return null;\n\t}\n", "function FindLastId() {\n\t    let tasks = GetTasks();\n\t    let id: number = 0;\n\t    if (tasks == undefined || tasks == null || tasks.length == 0) {\n\t        return id;\n\t    }\n\t    // TODO: throw this shit into a database so you dont have to poll tasks every time\n\t    for (let t of tasks) {\n\t        if (t.id >= id) {\n\t            id = t.id + 1;\n", "        }\n\t    }\n\t    return id;\n\t}\n\tfunction _AddTask(task: Task) {\n\t    let tasks = GetTasks();\n\t    tasks.push(task);\n\t    let json = { tasks: tasks }\n\t    fs.writeFileSync(tasksFile, JSON.stringify(json), { flag: \"w+\" });\n\t}\n", "export function GetTasks(): Task[] {\n\t    let tasks: Task[] = (JSON.parse(fs.readFileSync(tasksFile).toString())).tasks;\n\t    if (tasks == undefined || tasks == null || tasks.length == 0) {\n\t        return [];\n\t    }\n\t    return tasks;\n\t}\n\texport function FlushTasks() {\n\t    let tasks = { tasks: [] };\n\t    fs.writeFileSync(tasksFile, JSON.stringify(tasks), { flag: \"w+\" })\n", "}\n\texport function TasksToString() {\n\t    let tasks = GetTasks();\n\t    if (tasks == undefined || tasks == null || tasks.length == 0) {\n\t        return \"No tasks!\";\n\t    }\n\t    let tasksString = \"\";\n\t    for (let task of tasks) {\n\t        tasksString += `${task.description}, for <@${task.assignee}> | ${task.id}\\n`;\n\t    }\n", "    tasksString += \"\\n\";\n\t    return tasksString;\n\t}"]}
{"filename": "src/Commands.ts", "chunked_list": ["import { Assign } from \"./commands/assign\";\n\timport { Display } from \"./commands/display\";\n\timport { Edit } from \"./commands/edit\";\n\timport { Remove } from \"./commands/remove\";\n\timport { Taskboard } from \"./commands/taskboard\";\n\timport { Todo } from \"./commands/todo\";\n\timport { Command } from \"./types/Command\";\n\texport const Commands: Command[] = [Todo, Remove, Display, Assign, Edit, Taskboard];"]}
{"filename": "src/flushCommands.ts", "chunked_list": ["/// shit works use if necessary\n\tconst { REST } = require('@discordjs/rest');\n\tconst { Routes } = require('discord-api-types/v9');\n\tconst token = process.env.token;\n\tconst clientId = process.env.clientId;\n\tconst guildId = process.env.guildId;\n\tconst rest = new REST({ version: '9' }).setToken(token);\n\trest.get(Routes.applicationGuildCommands(clientId, guildId))\n\t    .then(data => {\n\t        const promises = [];\n", "        for (const command of data) {\n\t            const deleteUrl = `${Routes.applicationGuildCommands(clientId, guildId)}/${command.id}`;\n\t            promises.push(rest.delete(deleteUrl));\n\t        }\n\t        return Promise.all(promises);\n\t    });\n"]}
{"filename": "src/index.ts", "chunked_list": ["require('dotenv').config();\n\timport { Interaction } from 'discord.js';\n\timport { InteractionCreate } from './commandHandler';\n\timport { Ready } from './ready';\n\timport { ToDoClient } from './types/ToDoClient';\n\tconst token = process.env.token;\n\tconst client = new ToDoClient();\n\tclient.on(\"ready\", async () => {\n\t    Ready(client);\n\t});\n", "client.on(\"interactionCreate\", async (interaction: Interaction) => {\n\t    InteractionCreate(client, interaction);\n\t});\n\tclient.login(token);\n"]}
{"filename": "src/ready.ts", "chunked_list": ["require('dotenv').config();\n\timport { CategoryChannel, ChannelType, Guild, TextChannel } from 'discord.js';\n\timport { Commands } from './Commands';\n\timport { ToDoClient } from './types/ToDoClient';\n\texport async function Ready(client: ToDoClient): Promise<void> {\n\t    if (!client.user || !client.application) {\n\t        return;\n\t    }\n\t    await client.application.commands.set(Commands);\n\t    console.log(`ready ${client.user.tag}`);\n", "    /*\n\t    TODO:\n\t    Creates a ToDoBot channel category and a Taskboard text channel in it. Discuss. \n\t    let server: Guild = await client.guilds.fetch(process.env.guildId);\n\t    let category: CategoryChannel = await server.channels.create({\n\t        name: \"ToDoBot\",\n\t        type: ChannelType.GuildCategory\n\t    });\n\t    await server.channels.create({\n\t        name: \"Taskboard\",\n", "        type: ChannelType.GuildText,\n\t        parent: category.id\n\t    });\n\t    */\n\t}"]}
{"filename": "src/commandHandler.ts", "chunked_list": ["import { CommandInteraction, Interaction } from \"discord.js\";\n\timport { Commands } from \"./Commands\";\n\timport { ToDoClient } from \"./types/ToDoClient\";\n\texport async function InteractionCreate(client: ToDoClient, interaction: Interaction) {\n\t    if (interaction.isCommand() || interaction.isContextMenuCommand()) {\n\t        await handleSlashCommand(client, interaction);\n\t    }\n\t}\n\texport async function handleSlashCommand(client: ToDoClient, interaction: CommandInteraction): Promise<void> {\n\t    const slashCommand = Commands.find(c => c.name === interaction.commandName);\n", "    if (!slashCommand) {\n\t        interaction.followUp({ content: \"An error has occurred\" });\n\t        return;\n\t    }\n\t    await interaction.deferReply();\n\t    slashCommand.run(interaction, client);\n\t};"]}
{"filename": "src/commands/edit.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\n\timport { GetTaskById, SetDescription } from '../tasks';\n\timport { Command } from '../types/Command';\n\texport const Edit: Command = {\n\t    name: \"edit\",\n\t    description: \"Edit task description\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    options: [\n\t        {\n\t            name: \"task\",\n", "            description: \"Id of the task you are editing\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.Integer\n\t        },\n\t        {\n\t            name: \"description\",\n\t            description: \"New task description\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.String\n\t        }\n", "    ],\n\t    run: async (interaction: CommandInteraction) => {\n\t        let taskId = interaction.options.get('task').value.toString();\n\t        let taskDescription = interaction.options.get('description').value.toString();\n\t        let content = \"Task doesn't exist\";\n\t        let oldTaskDescription = GetTaskById(parseInt(taskId))?.description;\n\t        if (oldTaskDescription != null) {\n\t            let task = SetDescription(parseInt(taskId), taskDescription);\n\t            content = `Updated task \"${oldTaskDescription}\" (ID ${taskId})\\n\\n\"${task.description}\" for <@${task.assignee}>`;\n\t        }\n", "        await interaction.followUp({\n\t            ephemeral: false,\n\t            content\n\t        })\n\t    }\n\t}"]}
{"filename": "src/commands/display.ts", "chunked_list": ["import { ApplicationCommandType, CommandInteraction } from 'discord.js';\n\timport { TasksToString } from '../tasks';\n\timport { Command } from '../types/Command';\n\texport const Display: Command = {\n\t    name: \"display\",\n\t    description: \"Display all tasks\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    run: async (interaction: CommandInteraction) => {\n\t        let content = TasksToString();\n\t        await interaction.followUp({\n", "            ephemeral: false,\n\t            content\n\t        })\n\t    }\n\t}"]}
{"filename": "src/commands/todo.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction, TextChannel } from 'discord.js';\n\timport { AddTask, SetThreadId } from '../tasks';\n\timport { Command } from '../types/Command';\n\timport { ToDoClient } from '../types/ToDoClient';\n\timport { CreateThreadForTask } from './taskboard';\n\texport const Todo: Command = {\n\t    name: \"todo\",\n\t    description: \"Create a new task\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    options: [\n", "        {\n\t            name: \"task\",\n\t            description: \"Task description\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.String\n\t        },\n\t        {\n\t            name: \"assignee\",\n\t            description: \"User to assign task to, leave empty if assigning to yourself\",\n\t            required: false,\n", "            type: ApplicationCommandOptionType.User\n\t        }\n\t    ],\n\t    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n\t        let taskDesc = interaction.options.get('task').value.toString();\n\t        let user = interaction.options.get('assignee')?.user;\n\t        if (user === undefined) {\n\t            user = interaction.user;\n\t        }\n\t        let task = AddTask(taskDesc, user.id);\n", "        if (client.taskboardID != null) {\n\t            let threadId = await CreateThreadForTask(task, client);\n\t            SetThreadId(task.id, threadId);\n\t        }\n\t        let content = `Set task \"${taskDesc}\" (ID ${task.id}) for ${user}`;\n\t        await interaction.followUp({\n\t            ephemeral: false,\n\t            content\n\t        })\n\t    }\n", "}"]}
{"filename": "src/commands/remove.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\n\timport { RemoveTask, TasksToString } from '../tasks';\n\timport { Command } from '../types/Command';\n\timport { ToDoClient } from '../types/ToDoClient';\n\timport { CloseThreadForTask } from './taskboard';\n\texport const Remove: Command = {\n\t    name: \"remove\",\n\t    description: \"Remove a task by id\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    options: [\n", "        {\n\t            name: \"task\",\n\t            description: \"Id of the task you want to remove\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.Integer\n\t        }\n\t    ],\n\t    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n\t        let taskId = interaction.options.get('task').value.toString();\n\t        let task = RemoveTask(parseInt(taskId));\n", "        let newTaskList = TasksToString();\n\t        let content = \"Task doesn't exist\";\n\t        if (task != null) {\n\t            content = `Task \"${task.description}\" removed, ${interaction.user}\\n\\n${newTaskList}`;\n\t            if (client.taskboardID != null) {\n\t                await CloseThreadForTask(task, client);\n\t            }\n\t        }\n\t        await interaction.followUp({\n\t            ephemeral: false,\n", "            content\n\t        })\n\t    }\n\t}"]}
{"filename": "src/commands/assign.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\n\timport { SetAssignee } from '../tasks';\n\timport { Command } from '../types/Command';\n\texport const Assign: Command = {\n\t    name: \"assign\",\n\t    description: \"Assign a task to a member\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    options: [\n\t        {\n\t            name: \"task\",\n", "            description: \"Id of the task you are assigning\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.Integer\n\t        },\n\t        {\n\t            name: \"assignee\",\n\t            description: \"User to assign task to, leave empty if assigning to yourself\",\n\t            required: false,\n\t            type: ApplicationCommandOptionType.User\n\t        }\n", "    ],\n\t    run: async (interaction: CommandInteraction) => {\n\t        let taskId = interaction.options.get('task').value.toString();\n\t        let content = \"Task doesn't exist\";\n\t        let user = interaction.options.get('assignee')?.user;\n\t        if (user === undefined) {\n\t            user = interaction.user;\n\t        }\n\t        let task = SetAssignee(parseInt(taskId), user);\n\t        if (task != null) {\n", "            content = `Task \"${task.description}\" assigned to ${user}`;\n\t        }\n\t        await interaction.followUp({\n\t            ephemeral: false,\n\t            content\n\t        })\n\t    }\n\t}"]}
{"filename": "src/commands/taskboard.ts", "chunked_list": ["require('dotenv').config();\n\timport { AnyThreadChannel, ApplicationCommandOptionType, ApplicationCommandType, Channel, ChannelType, CommandInteraction, Guild, TextChannel } from 'discord.js';\n\timport { GetTasks, SetThreadId, Task, TasksToString } from '../tasks';\n\timport { Command } from '../types/Command';\n\timport { ToDoClient } from '../types/ToDoClient';\n\texport const Taskboard: Command = {\n\t    name: \"taskboard\",\n\t    description: \"Set taskboard channel\",\n\t    type: ApplicationCommandType.ChatInput,\n\t    options: [\n", "        {\n\t            name: \"channel\",\n\t            description: \"The channel you want to set as the taskboard channel\",\n\t            required: true,\n\t            type: ApplicationCommandOptionType.Channel\n\t        }\n\t    ],\n\t    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n\t        let channelID = interaction.options.get('channel').value.toString();\n\t        let channel: Channel = await client.channels.fetch(channelID);\n", "        let content = \"\";\n\t        if (channel.type == ChannelType.GuildText) {\n\t            client.taskboardID = channelID;\n\t            content = \"okey taskboard is now channel with id: `\" + channelID + \"` aka \" + channel.toString();\n\t            channel.send(`## This is the taskboard\\n\\n${TasksToString()}`);\n\t            for (let task of GetTasks()) {\n\t                let threadId = await CreateThreadForTask(task, client);\n\t                SetThreadId(task.id, threadId);\n\t            }\n\t        } else {\n", "            content = \"bro this is not text channel, id `\" + channelID + \"` type: `\" + channel.type + \"` (https://discord.com/developers/docs/resources/channel) aka \" + channel.toString();\n\t        }\n\t        await interaction.followUp({\n\t            ephemeral: false,\n\t            content\n\t        })\n\t    }\n\t}\n\texport async function CreateThreadForTask(task: Task, client: ToDoClient): Promise<string> {\n\t    let channel: TextChannel = await GetTaskboardTextChannel(client);\n", "    let taskThread = await channel.threads.create({\n\t        name: `${task.id} | ${task.description} | <@${task.assignee}>`,\n\t        type: ChannelType.PublicThread,\n\t    })\n\t    taskThread.send(`${task.description}, for <@${task.assignee}> | ${task.id}`);\n\t    return taskThread.id;\n\t}\n\texport async function CloseThreadForTask(task: Task, client: ToDoClient): Promise<AnyThreadChannel<boolean>> {\n\t    let channel: TextChannel = await GetTaskboardTextChannel(client);\n\t    let thread = await channel.threads.fetch(task.threadId);\n", "    await thread.send(\"Task remove. Closing thread.\");\n\t    return await thread.setArchived();\n\t}\n\tasync function GetTaskboardTextChannel(client: ToDoClient): Promise<TextChannel> {\n\t    return await client.channels.fetch(client.taskboardID) as TextChannel;\n\t}\n\texport async function SendMessageToThread(task: Task, client: ToDoClient): Promise<string> {\n\t    // TODO\n\t    return \"\"\n\t}"]}
{"filename": "src/types/ToDoClient.ts", "chunked_list": ["import { Client, GatewayIntentBits } from \"discord.js\";\n\texport class ToDoClient extends Client {\n\t    taskboardID: string = null;\n\t    constructor() {\n\t        super({\n\t            intents: [\n\t                GatewayIntentBits.Guilds,\n\t                GatewayIntentBits.GuildMessages,\n\t                GatewayIntentBits.MessageContent,\n\t                GatewayIntentBits.GuildMessageReactions,\n", "                GatewayIntentBits.DirectMessages\n\t            ]\n\t        })\n\t    }\n\t}"]}
{"filename": "src/types/Command.ts", "chunked_list": ["import { ChatInputApplicationCommandData, CommandInteraction } from \"discord.js\";\n\timport { ToDoClient } from \"./ToDoClient\";\n\texport interface Command extends ChatInputApplicationCommandData {\n\t    run: (interaction: CommandInteraction, client?: ToDoClient) => void;\n\t}"]}
