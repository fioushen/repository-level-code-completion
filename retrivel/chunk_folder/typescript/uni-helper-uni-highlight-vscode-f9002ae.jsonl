{"filename": "tsup.config.ts", "chunked_list": ["import { defineConfig } from 'tsup'\n\texport default defineConfig({\n\t  entry: [\n\t    'src/index.ts',\n\t  ],\n\t  format: ['cjs'],\n\t  shims: false,\n\t  dts: false,\n\t  external: [\n\t    'vscode',\n", "  ],\n\t})\n"]}
{"filename": "test/index.test.ts", "chunked_list": ["import { describe, expect, it } from 'vitest'\n\timport { getPlatformInfo } from './../src/getPlatformInfo'\n\tdescribe('getPlatformInfo', () => {\n\t  it('get // #endif', () => {\n\t    const code = `\n\t    // #endif\n\t    `\n\t    const result = getPlatformInfo(code)\n\t    expect(result).toMatchInlineSnapshot(`\n\t      [\n", "        {\n\t          \"end\": 14,\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t      ]\n\t    `)\n\t  })\n\t  it('be OK', () => {\n\t    const jsCode = `\n", "    // #ifdef PLATFORM_IOS\n\t    // #endif\n\t    `\n\t    expect(getPlatformInfo(jsCode)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n\t          \"end\": 14,\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n", "        {\n\t          \"end\": 27,\n\t          \"row\": \"PLATFORM_IOS\",\n\t          \"start\": 15,\n\t          \"type\": \"unPlatform\",\n\t        },\n\t        {\n\t          \"end\": 41,\n\t          \"start\": 35,\n\t          \"type\": \"prefix\",\n", "        },\n\t      ]\n\t    `)\n\t    const htmlCode = `\n\t    <!-- #ifdef H5 -->\n\t    <!-- #endif -->\n\t    `\n\t    expect(getPlatformInfo(htmlCode)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n", "          \"end\": 16,\n\t          \"start\": 10,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"color\": \"#e5c07b\",\n\t          \"end\": 19,\n\t          \"start\": 17,\n\t          \"type\": \"platform\",\n\t        },\n", "        {\n\t          \"end\": 39,\n\t          \"start\": 33,\n\t          \"type\": \"prefix\",\n\t        },\n\t      ]\n\t    `)\n\t    const cssCode = `\n\t    /* #ifdef MP */\n\t    /* #endif */\n", "    `\n\t    expect(getPlatformInfo(cssCode)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n\t          \"end\": 14,\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"color\": \"#2aae67\",\n", "          \"end\": 17,\n\t          \"start\": 15,\n\t          \"type\": \"platform\",\n\t        },\n\t        {\n\t          \"end\": 34,\n\t          \"start\": 28,\n\t          \"type\": \"prefix\",\n\t        },\n\t      ]\n", "    `)\n\t  })\n\t  it('be OK with ||', () => {\n\t    const code = `\n\t    // #ifdef PLATFORM_IOS || PLATFORM_ANDROID\n\t    // #endif\n\t    `\n\t    expect(getPlatformInfo(code)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n", "          \"end\": 14,\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 30,\n\t          \"start\": 28,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n", "          \"end\": 27,\n\t          \"row\": \"PLATFORM_IOS\",\n\t          \"start\": 15,\n\t          \"type\": \"unPlatform\",\n\t        },\n\t        {\n\t          \"end\": 47,\n\t          \"row\": \"PLATFORM_ANDROID\",\n\t          \"start\": 31,\n\t          \"type\": \"unPlatform\",\n", "        },\n\t        {\n\t          \"end\": 61,\n\t          \"start\": 55,\n\t          \"type\": \"prefix\",\n\t        },\n\t      ]\n\t    `)\n\t  })\n\t})\n"]}
{"filename": "test/parse/index.test.ts", "chunked_list": ["import { describe, expect, it } from 'vitest'\n\timport { parsePlatform } from '../../src/parseComment/parsePlatform'\n\timport { parseComment } from './../../src/parseComment'\n\tdescribe('parseComment', () => {\n\t  it('should parse comment', () => {\n\t    const code = `\n\t    // #ifdef APP-PLUSaasd\n\t    // #endif    \n\t    /* #ifdef APP-PLUS */\n\t    `\n", "    expect(parseComment(code)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n\t          \"end\": 14,\n\t          \"row\": \"#ifdef\",\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 27,\n", "          \"row\": \"APP-PLUSaasd\",\n\t          \"start\": 15,\n\t          \"type\": \"platform\",\n\t        },\n\t        {\n\t          \"end\": 41,\n\t          \"row\": \"#endif\",\n\t          \"start\": 35,\n\t          \"type\": \"prefix\",\n\t        },\n", "        {\n\t          \"end\": 59,\n\t          \"row\": \"#ifdef\",\n\t          \"start\": 53,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 68,\n\t          \"row\": \"APP-PLUS\",\n\t          \"start\": 60,\n", "          \"type\": \"platform\",\n\t        },\n\t      ]\n\t    `)\n\t  })\n\t  it('should parse more comment', () => {\n\t    const code = `\n\t    // #ifdef APP-PLUS || APP-PLUS-NVUE\n\t    // #endif\n\t    `\n", "    expect(parseComment(code)).toMatchInlineSnapshot(`\n\t      [\n\t        {\n\t          \"end\": 14,\n\t          \"row\": \"#ifdef\",\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 26,\n", "          \"row\": \"||\",\n\t          \"start\": 24,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 23,\n\t          \"row\": \"APP-PLUS\",\n\t          \"start\": 15,\n\t          \"type\": \"platform\",\n\t        },\n", "        {\n\t          \"end\": 40,\n\t          \"row\": \"APP-PLUS-NVUE\",\n\t          \"start\": 27,\n\t          \"type\": \"platform\",\n\t        },\n\t        {\n\t          \"end\": 54,\n\t          \"row\": \"#endif\",\n\t          \"start\": 48,\n", "          \"type\": \"prefix\",\n\t        },\n\t      ]\n\t    `)\n\t    const code2 = `\n\t    // #ifdef APP-PLUS || APP-PLUS-NVUE || APP-PLUS-NVUE\n\t    // #endif\n\t    `\n\t    expect(parseComment(code2)).toMatchInlineSnapshot(`\n\t      [\n", "        {\n\t          \"end\": 14,\n\t          \"row\": \"#ifdef\",\n\t          \"start\": 8,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 26,\n\t          \"row\": \"||\",\n\t          \"start\": 24,\n", "          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 43,\n\t          \"row\": \"||\",\n\t          \"start\": 41,\n\t          \"type\": \"prefix\",\n\t        },\n\t        {\n\t          \"end\": 23,\n", "          \"row\": \"APP-PLUS\",\n\t          \"start\": 15,\n\t          \"type\": \"platform\",\n\t        },\n\t        {\n\t          \"end\": 40,\n\t          \"row\": \"APP-PLUS-NVUE\",\n\t          \"start\": 27,\n\t          \"type\": \"platform\",\n\t        },\n", "        {\n\t          \"end\": 40,\n\t          \"row\": \"APP-PLUS-NVUE\",\n\t          \"start\": 27,\n\t          \"type\": \"platform\",\n\t        },\n\t        {\n\t          \"end\": 71,\n\t          \"row\": \"#endif\",\n\t          \"start\": 65,\n", "          \"type\": \"prefix\",\n\t        },\n\t      ]\n\t    `)\n\t  })\n\t  it('should parse platform', () => {\n\t    const jsCode = `\n\t    APP-PLUS\n\t    `\n\t    const htmlCode = 'H5 -->'\n", "    const cssCode = 'H5 */'\n\t    const errorCode = 'H5asd */'\n\t    expect(parsePlatform(jsCode, '//')).toStrictEqual(['APP-PLUS'])\n\t    expect(parsePlatform(htmlCode, '<!--')).toStrictEqual(['H5'])\n\t    expect(parsePlatform(cssCode, '/*')).toStrictEqual(['H5'])\n\t    expect(parsePlatform(errorCode, '/*')).toStrictEqual(['H5asd'])\n\t  })\n\t  it('should parse more platform', () => {\n\t    const code = 'APP-PLUS || APP-PLUS-NVUE'\n\t    expect(parsePlatform(code, '//')).toStrictEqual(['APP-PLUS', 'APP-PLUS-NVUE'])\n", "  })\n\t})\n"]}
{"filename": "playground/test.ts", "chunked_list": ["// #ifdef MP-DINGTALK\n\texport const test = 1\n\t// #endif\n"]}
{"filename": "playground/otherFile.ts", "chunked_list": ["const foo = 1\n\texport default foo\n"]}
{"filename": "src/CommentFoldingRangeProvider.ts", "chunked_list": ["import type {\n\t  CancellationToken,\n\t  FoldingContext,\n\t  FoldingRangeProvider,\n\t  ProviderResult,\n\t  TextDocument,\n\t} from 'vscode'\n\timport { FoldingRange, FoldingRangeKind } from 'vscode'\n\timport { parseComment } from './parseComment'\n\texport class CommentFoldingRangeProvider implements FoldingRangeProvider {\n", "  provideFoldingRanges(\n\t    document: TextDocument,\n\t    _context: FoldingContext,\n\t    _token: CancellationToken,\n\t  ): ProviderResult<FoldingRange[]> {\n\t    const text = document.getText()\n\t    const foldingRanges: FoldingRange[] = []\n\t    const startLines = []\n\t    const endLines = []\n\t    const stack = []\n", "    const lines = text.split('\\n')\n\t    for (let i = 0; i < lines.length; i++) {\n\t      const { row } = parseComment(lines[i])?.[0] ?? {}\n\t      if (!row)\n\t        continue\n\t      if (row === '#ifdef' || row === '#ifndef') {\n\t        startLines.push(i + 1)\n\t        stack.push(startLines.length - 1)\n\t      }\n\t      else if (row === '#endif') {\n", "        const index = stack.pop()\n\t        if (index !== undefined)\n\t          endLines[index] = i + 1\n\t      }\n\t    }\n\t    for (let i = 0; i < endLines.length; i++) {\n\t      foldingRanges.push(\n\t        new FoldingRange(\n\t          startLines[i] - 1,\n\t          endLines[i] - 1,\n", "          FoldingRangeKind.Region,\n\t        ),\n\t      )\n\t    }\n\t    return foldingRanges\n\t  }\n\t}\n"]}
{"filename": "src/getVscodeRange.ts", "chunked_list": ["import type { TextEditor } from 'vscode'\n\timport { getPlatformInfo } from './../src/getPlatformInfo'\n\timport { transformPlatform } from './transformPlatform'\n\texport function getVscodeRange(editor: TextEditor) {\n\t  const code = editor.document.getText()\n\t  const platformInfo = getPlatformInfo(code)\n\t  const highlightRange = transformPlatform(platformInfo, editor)\n\t  return highlightRange\n\t}\n"]}
{"filename": "src/setPlatformColor.ts", "chunked_list": ["import type { TextEditor, TextEditorDecorationType } from 'vscode'\n\timport { DecorationRangeBehavior, MarkdownString, window } from 'vscode'\n\timport { HIGHTLIGHT_COLOR } from './constants'\n\timport type { HighlightRange } from './transformPlatform'\n\tconst UnderlineDecoration = window.createTextEditorDecorationType({\n\t  textDecoration: 'none; border-bottom: 1px dashed currentColor',\n\t  cursor: 'pointer',\n\t  rangeBehavior: DecorationRangeBehavior.ClosedClosed,\n\t})\n\tconst prefixColorDecoration = window.createTextEditorDecorationType({\n", "  color: HIGHTLIGHT_COLOR.prefix,\n\t  rangeBehavior: DecorationRangeBehavior.ClosedClosed,\n\t})\n\tfunction createPlatformColorDecoration(color: string) {\n\t  return window.createTextEditorDecorationType({\n\t    color,\n\t    rangeBehavior: DecorationRangeBehavior.ClosedClosed,\n\t  })\n\t}\n\tconst platformColorDecorationList: TextEditorDecorationType[] = []\n", "function initDecorations(editor: TextEditor) {\n\t  editor.setDecorations(UnderlineDecoration, [])\n\t  if (platformColorDecorationList.length > 0) {\n\t    platformColorDecorationList.forEach((item) => {\n\t      item.dispose()\n\t    })\n\t  }\n\t  platformColorDecorationList.length = 0\n\t  editor.setDecorations(prefixColorDecoration, [])\n\t}\n", "export function setPlatformColor(\n\t  highlightRange: HighlightRange,\n\t  editor: TextEditor,\n\t) {\n\t  const { prefix, platform, unPlatform } = highlightRange\n\t  initDecorations(editor)\n\t  editor.setDecorations(\n\t    prefixColorDecoration,\n\t    prefix,\n\t  )\n", "  for (const color in platform) {\n\t    const decoration = createPlatformColorDecoration(color)\n\t    platformColorDecorationList.push(decoration)\n\t    editor.setDecorations(\n\t      decoration,\n\t      platform[color],\n\t    )\n\t  }\n\t  editor.setDecorations(\n\t    UnderlineDecoration,\n", "    unPlatform.map(item => ({\n\t      range: item.range,\n\t      hoverMessage: new MarkdownString(`\n\t### [@uni-helper](https://github.com/uni-helper/uni-highlight-vscode)\\n\n\t~~${item.row}~~ 不是一个有效的平台, 请检查是否拼写错误\\n\n\t***\n\t详情请查看[\\`文档\\`](https://uniapp.dcloud.net.cn/tutorial/platform.html#preprocessor)\n\t`),\n\t    })),\n\t  )\n", "}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import type { ExtensionContext, TextEditor } from 'vscode'\n\timport { commands, languages, window, workspace } from 'vscode'\n\timport { getVscodeRange } from './getVscodeRange'\n\timport { setPlatformColor } from './setPlatformColor'\n\timport { debounce } from './utils'\n\timport { CommentFoldingRangeProvider } from './CommentFoldingRangeProvider'\n\tfunction main() {\n\t  const editor = window.activeTextEditor\n\t  if (!editor)\n\t    return\n", "  const highlightRange = getVscodeRange(editor)\n\t  setPlatformColor(highlightRange, editor)\n\t}\n\tfunction onActiveEditorChanged(editor: TextEditor | undefined) {\n\t  if (editor)\n\t    main()\n\t}\n\tfunction setupEventListeners() {\n\t  window.onDidChangeActiveTextEditor(onActiveEditorChanged)\n\t  workspace.onDidChangeTextDocument(debounce(main, 500))\n", "}\n\texport function activate(context: ExtensionContext) {\n\t  main()\n\t  setupEventListeners()\n\t  commands.registerCommand('uni.comment.reload', () => {\n\t    main()\n\t  })\n\t  context.subscriptions.push(\n\t    languages.registerFoldingRangeProvider(\n\t      [{ pattern: '**/*.*', scheme: 'file' }],\n", "      new CommentFoldingRangeProvider(),\n\t    ),\n\t  )\n\t}\n\texport function deactivate() {\n\t}\n"]}
{"filename": "src/getPlatformInfo.ts", "chunked_list": ["import type { Platform } from './constants'\n\timport { HIGHTLIGHT_COLOR } from './constants'\n\timport { parseComment } from './parseComment'\n\texport function getPlatformInfo(code: string): PlatformInfo[] {\n\t  const commentAST = parseComment(code)\n\t  if (!commentAST)\n\t    return []\n\t  const platformInfos = []\n\t  for (let i = 0; i < commentAST.length; i++) {\n\t    const item = commentAST[i]\n", "    const { start, end, type, row } = item\n\t    const color = HIGHTLIGHT_COLOR.platform[row as Platform]\n\t    if (type === 'prefix') {\n\t      platformInfos.push({\n\t        start,\n\t        end,\n\t        type,\n\t      })\n\t    }\n\t    else if (type === 'platform' && color) {\n", "      platformInfos.push({\n\t        start,\n\t        end,\n\t        type,\n\t        color,\n\t      })\n\t    }\n\t    else if (type === 'platform' && !color) {\n\t      platformInfos.push({\n\t        start,\n", "        end,\n\t        type: 'unPlatform',\n\t        row,\n\t      })\n\t    }\n\t  }\n\t  return platformInfos as unknown as PlatformInfo[]\n\t}\n\texport interface PlatformInfo {\n\t  row: string\n", "  start: number\n\t  end: number\n\t  type: 'prefix' | 'platform' | 'unPlatform'\n\t  color: string\n\t}\n"]}
{"filename": "src/transformPlatform.ts", "chunked_list": ["import type { TextEditor } from 'vscode'\n\timport { Range } from 'vscode'\n\timport type { PlatformInfo } from './getPlatformInfo'\n\texport function transformPlatform(platformInfos: PlatformInfo[], editor: TextEditor) {\n\t  const highlightRange: HighlightRange = {\n\t    prefix: [],\n\t    platform: {},\n\t    unPlatform: [],\n\t  }\n\t  platformInfos.forEach((platformInfo) => {\n", "    const { start, end, row, color } = platformInfo\n\t    const range = new Range(\n\t      editor.document.positionAt(start),\n\t      editor.document.positionAt(end),\n\t    )\n\t    if (platformInfo.type === 'prefix')\n\t      highlightRange.prefix.push(range)\n\t    if (platformInfo.type === 'platform') {\n\t      if (!highlightRange.platform[color])\n\t        highlightRange.platform[color] = []\n", "      highlightRange.platform[color].push(range)\n\t    }\n\t    if (platformInfo.type === 'unPlatform') {\n\t      highlightRange.unPlatform.push({\n\t        range,\n\t        row,\n\t      })\n\t    }\n\t  })\n\t  return highlightRange\n", "}\n\texport interface HighlightRange {\n\t  prefix: Range[]\n\t  platform: {\n\t    [key: string]: Range[]\n\t  }\n\t  unPlatform: {\n\t    range: Range\n\t    row: string\n\t  }[]\n", "}\n"]}
{"filename": "src/utils/index.ts", "chunked_list": ["export function debounce(func: Function, delay: number) {\n\t  let timeoutId: ReturnType<typeof setTimeout> | null = null\n\t  return (...args: any[]) => {\n\t    if (timeoutId)\n\t      clearTimeout(timeoutId)\n\t    timeoutId = setTimeout(() => {\n\t      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t      // @ts-expect-error\n\t      // eslint-disable-next-line @typescript-eslint/no-invalid-this\n\t      func.apply(this, args)\n", "      timeoutId = null\n\t    }, delay)\n\t  }\n\t}\n\texport function isObject(obj: any): obj is Record<string, any> {\n\t  return obj !== null && typeof obj === 'object' && !Array.isArray(obj)\n\t}\n"]}
{"filename": "src/constants/platform.ts", "chunked_list": ["import { workspace } from 'vscode'\n\timport { isObject } from '../utils'\n\tconst config = workspace.getConfiguration('uni-highlight').get('platform')\n\tconst SETTING = isObject(config) ? config : {}\n\texport const HIGHTLIGHT_COLOR = {\n\t  prefix: '#859900',\n\t  platform: Object.assign(\n\t    {\n\t      'VUE3': '#41b883',\n\t      'APP-PLUS': '#80bd00',\n", "      'APP-PLUS-NVUE': '#41b883',\n\t      'APP-NVUE': '#41b883',\n\t      'APP-ANDROID': '#80bd00',\n\t      'APP-IOS': '#d9774b',\n\t      'H5': '#e5c07b',\n\t      'MP-WEIXIN': '#2aae67',\n\t      'MP-ALIPAY': '#ff6a00',\n\t      'MP-BAIDU': '#2932e1',\n\t      'MP-TOUTIAO': '#f04142',\n\t      'MP-LARK': '#00d6b9',\n", "      'MP-QQ': '#025aef',\n\t      'MP-KUAISHOU': '#ff5005',\n\t      'MP-JD': '#e21e17',\n\t      'MP-360': '#00aa48',\n\t      'MP': '#2aae67',\n\t      'QUICKAPP-WEBVIEW': '#4497ff',\n\t      'QUICKAPP-WEBVIEW-UNION': '#4497ff',\n\t      'QUICKAPP-WEBVIEW-HUAWEI': '#e60214',\n\t    },\n\t    SETTING,\n", "  ),\n\t}\n\texport const PLATFORM_LIST = Object.keys(HIGHTLIGHT_COLOR.platform) as Platform[]\n\texport const COMMENT_PRE = ['//', '/*', '<!--']\n\texport type Platform = keyof typeof HIGHTLIGHT_COLOR.platform\n"]}
{"filename": "src/constants/regex.ts", "chunked_list": ["export const commentPreReg = /(<!--|\\/\\/|\\/\\*)([\\s]*)(#ifdef|#ifndef|#endif)([^\\n]*)/gm\n\texport const commentSufReg = /([^\\n]*)(-->|\\*\\/)/gm\n"]}
{"filename": "src/constants/index.ts", "chunked_list": ["export * from './platform'\n\texport * from './regex'\n"]}
{"filename": "src/parseComment/index.ts", "chunked_list": ["import { COMMENT_PRE, commentPreReg } from '../constants'\n\timport { parsePlatform } from './parsePlatform'\n\texport function parseComment(code: string) {\n\t  if (code.trim().length === 0)\n\t    return\n\t  const commentResults = [...code.matchAll(commentPreReg)]\n\t  if (commentResults.length === 0)\n\t    return\n\t  const commentAST = []\n\t  for (let i = 0; i < commentResults.length; i++) {\n", "    const item = commentResults[i]\n\t    const index = item.index!\n\t    const [self, commentPre, _space, prefix, _platform] = item\n\t    if (!COMMENT_PRE.includes(commentPre))\n\t      continue\n\t    const platform = _platform.trim()\n\t    if (platform && prefix !== '#endif') {\n\t      const prefixStart = self.indexOf(prefix) + index\n\t      const prefixEnd = prefixStart + prefix.length\n\t      commentAST.push({\n", "        start: prefixStart,\n\t        end: prefixEnd,\n\t        type: 'prefix',\n\t        row: prefix,\n\t      })\n\t      const platforms = parsePlatform(platform, commentPre)\n\t      if (!platforms)\n\t        continue\n\t      if (platforms.length > 1) {\n\t        const orRex = /\\|\\|/g\n", "        const orResult = [...platform.matchAll(orRex)]\n\t        const offset = index + self.indexOf(_platform) + 1\n\t        orResult.forEach((element) => {\n\t          const orStart = offset + element.index!\n\t          const orEnd = orStart + 2\n\t          commentAST.push({\n\t            start: orStart,\n\t            end: orEnd,\n\t            type: 'prefix',\n\t            row: element[0],\n", "          })\n\t        })\n\t      }\n\t      platforms.forEach((element) => {\n\t        const platformStart = self.indexOf(element) + index\n\t        const platformEnd = platformStart + element.length\n\t        commentAST.push({\n\t          start: platformStart,\n\t          end: platformEnd,\n\t          type: 'platform',\n", "          row: element,\n\t        })\n\t      })\n\t    }\n\t    else {\n\t      const start = self.indexOf(prefix) + index\n\t      const end = start + prefix.length\n\t      commentAST.push({\n\t        start,\n\t        end,\n", "        row: prefix,\n\t        type: 'prefix',\n\t      })\n\t    }\n\t  }\n\t  return commentAST\n\t}\n"]}
{"filename": "src/parseComment/parsePlatform.ts", "chunked_list": ["import { commentSufReg } from '../constants'\n\texport function parsePlatform(platform: string, commentPre: string): string[] {\n\t  let platforms: string[]\n\t  if (commentPre !== '//') {\n\t    const PlatformResult = [...platform.matchAll(commentSufReg)][0]\n\t    if (!PlatformResult)\n\t      return []\n\t    const [_self, _platform, _commentSuf] = PlatformResult\n\t    platform = _platform.trim()\n\t  }\n", "  if (platform.includes('||'))\n\t    platforms = platform.split('||').map(item => item.trim())\n\t  else\n\t    platforms = [platform.trim()]\n\t  return platforms\n\t}\n"]}
