{"filename": "prisma/seed.ts", "chunked_list": ["import { PrismaClient } from '@prisma/client';\n\timport { hash } from 'bcrypt';\n\timport { v4 as uuidv4 } from 'uuid';\n\timport { createForum } from '../src/databases/forum.database';\n\tconst prisma = new PrismaClient();\n\tinterface IExampleText {\n\t  title: string;\n\t  description: string;\n\t}\n\tconst EXAMPLE_TEXT: IExampleText[] = [\n", "  {\n\t    title: 'Makanan dan vitamin yang dapat mencegah menopause dini',\n\t    description:\n\t      'Maaf dokter, saya ingin bertanya, dulu mama saya menopause saat usianya 52 tahun. Sekarang usia saya 39 tahun saya haidnya sekarang 3 hari, saya takut ini adalah gejala menopause dini. Cara mencegah menopause dini itu saya harus bagaimana dok? apakah ada makanan atau vitamin yag bisa saya konsumsi rutin sbg pencegahan?',\n\t  },\n\t  {\n\t    title:\n\t      'Bolehkah menggunakan obat amoxicillin untuk sakit gigi akibat gusi bengkak?',\n\t    description:\n\t      'bu saya lagi sakit gigi dan biasanya saya kalo lagi sakit gigi saya minumin amoxicillin.. kalo saya kasihkan ke ibu saya apakah boleh dok?',\n", "  },\n\t  {\n\t    title: 'Muncul gumpalan darah setelah cabut jahitan luka',\n\t    description:\n\t      'Alodokter., maaf dok mau nanya. Saya sebulan lalu kecelakaan dan kaki saya robek 10 cm dan mendapat jahitan 8 jahitan. ini udaah waktunya saya kontrol untuk cabut jahitan luka saya ini pas di cabut jahitannya kok malah keluar gumpalan darah. Saya takut dok, ini kenapa dengan luka saya dok?',\n\t  },\n\t  {\n\t    title: 'Penyebab perut bunyi saat sedang hamil trimester 1',\n\t    description:\n\t      'Halo dok, saya perempuan 27 tahun. Saat ini sedang hamil 2 bulan ini kehamilan perama saya dok. Saya mau tanya dok, kenapa ya, sudah 2 hari ini perut saya sering bunyi. padahal saya udah makan atau sedang tidak lapar dok. Apakah perut bunyi pada ibu hamil itu normal dok? bisa tolong jelaskan penyebabnya apa dan apa yg harus saya lakukan untuk mengatasinya dok? terima kasih',\n", "  },\n\t  {\n\t    title: 'Penyebab nyeri perut kiri bawah saat hamil 4 bulan',\n\t    description:\n\t      'Ijin ganggu dok, saya mau nanya. saya bumil 4 bulan. jadi gini dok perut kiri bawah saya suka nyeri. ini kejadian udah semenjak seminggu lalu sampe sekarang nih dokter. nyerinya itu kadang berlangsung seharian dan hilang timbul. Apakah ini kelainan apa normal dialami bumil usia 4 bulan dok? bagaimana cara mengatasi sakit perut sebelah kiri bawah saat hamil ya?',\n\t  },\n\t  {\n\t    title: 'Rekomendasi minuman pereda sakit kepala hingga mual',\n\t    description:\n\t      'Selamat siang , dok saya wanita pekerja kantoran, saya sering kali sakit kepala di pelipis / migrain hingga tengkuk bagian kanan jg terasa gak nyaman dokter. terkadang sakitnya itu bisa menimbulkan saya mual-mual dok. mau nanya minuman pereda sakit kepala untuk sakit saya ini dong dokter. makasih',\n", "  },\n\t  {\n\t    title:\n\t      'Positif hamil setelah mengalami keguguran 2 kali, bagaimana agar janin tetap sehat?',\n\t    description:\n\t      'Jadi gini dok, saya udah nikah 3 tahun, selama itu saya udah keguguran 2x. Sekarang saya telat haid pas di testpack hasilnya positif. Saya pas keguguran dulu itu di usia kehamilan 7 minggu dan 8 minggu. Saya khawatir ini akan kejadian yg kaya dulu lagi. Minta saran dong dokter. Agar kehamilan saya ini baik-baik saja dan tetep sehat sampe bayi lahir. terima kasih',\n\t  },\n\t  {\n\t    title: 'Apa penyebab vagina gatal dan keputihan berwarna kuning?',\n\t    description:\n", "      'Maaf dok, sebelumnya ini agak jorok. saya wanita 27 th, belum menikah. Dalam seminggu ini vagina saya keputihan, keputihannya kuning, baunya gada, cuma di dalam vagina saya rasanya gatal sekali. Saya pake rebusan daun sirih enakan pas di pake cebok pertama kali aja. keputihan dan gatalnya masih gak enak ini dok. Apa penyebabnya dok? san obat yang ampuh untuk saya ini obat apa?',\n\t  },\n\t  {\n\t    title:\n\t      'Bagaimanakah cara menghilangkan varises dengan menggunakan es batu?',\n\t    description:\n\t      'Selamat siang dok, saya seorang atlit dok, saya punya varises di kaki saya bagian belakang dok. Kata orang bisa ilangin varises pake batu es.. Apakah benar ya dok dengan mengkompres kaki dengan batu es dapat menghilangkan sakit varises? kalau memang iya, apakah baik jikalau selama habis lari langsung dikompres pakai batu es. dan satu lagi dok, tolong penjelasan dimana tepatnya yg harus dikompres pada bagian kaki? Terimakasi banyak dok atas jawabannya',\n\t  },\n\t  {\n\t    title:\n", "      'Adakah cara lain selain konsumsi antibiotik untuk mengatasi radang panggul?',\n\t    description:\n\t      'Selamat Pagi Dok, Istri Saya sudah cek ke RS dan katanya dia kenak Radang Panggul.. Dari dokter dikasihkan obat antibiotik untuk 2 minggu.. pertanyaan saya dok, Apakah ada solusi Lain selain meminum Obat AntiBiotik yang diberikan oleh rumah sakit? selain untuk mencegah Hal yang tidak saya inginkan untuk Istri saya,.karena hampir tiap hari Istri Saya merasa sakit di sekitaran Panggul nya Dok,.Mohon di jawab & di respon ya Dok',\n\t  },\n\t];\n\tasync function main() {\n\t  const saltRounds = 10;\n\t  const testUser = await prisma.user.upsert({\n\t    where: { email: 'test@gmail.com' },\n\t    update: {},\n", "    create: {\n\t      email: 'member@gmail.com',\n\t      name: 'Mayalinda',\n\t      password: await hash('member', saltRounds),\n\t      username: 'Maya',\n\t      profilePicture: '/profile.webp',\n\t      isActive: true,\n\t      role: 'Member',\n\t    },\n\t  });\n", "  const testUser1 = await prisma.user.upsert({\n\t    where: { email: 'doctor@gmail.com' },\n\t    update: {},\n\t    create: {\n\t      email: 'doctor@gmail.com',\n\t      name: 'Doctor',\n\t      password: await hash('doctor', saltRounds),\n\t      username: 'Doctor',\n\t      profilePicture: '/profile.webp',\n\t      isActive: true,\n", "      role: 'Doctor',\n\t    },\n\t  });\n\t  const testUser2 = await prisma.user.upsert({\n\t    where: { email: 'admin@gmail.com' },\n\t    update: {},\n\t    create: {\n\t      email: 'admin@gmail.com',\n\t      name: 'Admin',\n\t      password: await hash('admin', saltRounds),\n", "      username: 'Admin',\n\t      profilePicture: '/profile.webp',\n\t      isActive: true,\n\t      role: 'Admin',\n\t    },\n\t  });\n\t  EXAMPLE_TEXT.map(async (text) => {\n\t    const forum = await createForum({\n\t      id: uuidv4(),\n\t      title: text.title,\n", "      description: text.description,\n\t      userId: testUser.id,\n\t      seen: 0,\n\t      createdAt: new Date(Date.now()),\n\t      updatedAt: new Date(Date.now()),\n\t    });\n\t  });\n\t  // !Debugging Purpose\n\t}\n\tmain()\n", "  .then(async () => {\n\t    await prisma.$disconnect();\n\t  })\n\t  .catch(async (e) => {\n\t    console.error(e);\n\t    await prisma.$disconnect();\n\t    process.exit(1);\n\t  });\n"]}
{"filename": "prisma/prisma.client.ts", "chunked_list": ["import { PrismaClient } from \"@prisma/client\";\n\tclass DBClient {\n\t  public prisma: PrismaClient;\n\t  private static instance: DBClient;\n\t  private constructor() {\n\t    this.prisma = new PrismaClient();\n\t  }\n\t  public static getInstance = () => {\n\t    if (!DBClient.instance) {\n\t      DBClient.instance = new DBClient();\n", "    }\n\t    return DBClient.instance;\n\t  };\n\t}\n\texport default DBClient;\n"]}
{"filename": "src/index.ts", "chunked_list": ["import bodyParser from 'body-parser';\n\timport compression from 'compression';\n\timport cookieParser from 'cookie-parser';\n\timport cors from 'cors';\n\timport express, { Request, Response } from 'express';\n\timport createError from 'http-errors';\n\timport router from './routes';\n\tdeclare global {\n\t  namespace Express {\n\t    export interface Request {\n", "      jwtPayload?: any;\n\t      fileValidationError?: string;\n\t    }\n\t  }\n\t}\n\tconst app = express();\n\tapp.use(\n\t  cors({\n\t    origin: 'http://localhost:5173',\n\t    credentials: true,\n", "  })\n\t);\n\tapp.use(bodyParser.json());\n\tapp.use(\n\t  bodyParser.urlencoded({\n\t    extended: true,\n\t  })\n\t);\n\tapp.use(compression());\n\tapp.use(cookieParser());\n", "app.use(express.json());\n\tapp.use('/', router);\n\tapp.use((req: Request, res: Response, next: Function) => {\n\t  next(createError(404));\n\t});\n\tapp.listen(3000, () =>\n\t  console.log(`⚡️[server]: Server is running at https://localhost:3000`)\n\t);\n"]}
{"filename": "src/facades/helper.ts", "chunked_list": ["import fs from 'fs';\n\timport nodemailer from 'nodemailer';\n\timport { MailOptions } from 'nodemailer/lib/sendmail-transport';\n\timport { PaginationOptions } from '../interfaces/interface';\n\texport const sendEmail = async (\n\t  email: string,\n\t  activationLinkId: string\n\t): Promise<boolean> => {\n\t  const transporter = nodemailer.createTransport({\n\t    service: 'gmail',\n", "    auth: {\n\t      user: process.env.EMAIL_SENDER,\n\t      pass: process.env.EMAIL_SENDER_PASSWORD,\n\t    },\n\t  });\n\t  const mailOptions: MailOptions = {\n\t    from: process.env.EMAIL_SENDER,\n\t    to: email,\n\t    subject: 'CariTahu - Account Verification',\n\t    html: `<div id=\":15g\" class=\"a3s aiL msg-2564905172801731076\">\n", "    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n\t      <tbody>\n\t        <tr>\n\t          <td\n\t            bgcolor=\"#f3f4f6\"\n\t            align=\"center\"\n\t            style=\"padding: 30px 10px 10px 10px;\"\n\t          >\n\t            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"500\">\n\t              <tbody>\n", "                <tr>\n\t                  <td bgcolor=\"#FAF9F7\">\n\t                    <table\n\t                      width=\"100%\"\n\t                      border=\"0\"\n\t                      cellspacing=\"0\"\n\t                      cellpadding=\"0\"\n\t                      style=\"width: 100% !important;\"\n\t                    >\n\t                      <tbody>\n", "                        <tr>\n\t                          <td align=\"center\">\n\t                            <table\n\t                              width=\"100%\"\n\t                              border=\"0\"\n\t                              cellspacing=\"0\"\n\t                              cellpadding=\"0\"\n\t                              style=\"width: 100% !important;\"\n\t                            >\n\t                              <tbody>\n", "                                <tr>\n\t                                  <td\n\t                                    style=\"padding: 10px 10px 25px 10px;\"\n\t                                    align=\"center\"\n\t                                  ></td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n\t                          </td>\n\t                        </tr>\n", "                        <tr>\n\t                          <td align=\"center\">\n\t                            <table\n\t                              width=\"90%\"\n\t                              border=\"0\"\n\t                              cellspacing=\"0\"\n\t                              cellpadding=\"0\"\n\t                            >\n\t                              <tbody>\n\t                                <tr>\n", "                                  <td\n\t                                    align=\"center\"\n\t                                    style=\"\n\t                                      padding: 0px 10px 10px 10px;\n\t                                      font-size: 15px;\n\t                                      line-height: 22px;\n\t                                      font-family: Open Sans, Lucida,\n\t                                        Lucida Sans, Lucida Grande, Arial,\n\t                                        sans-serif !important;\n\t                                      color: #4b5563;\n", "                                    \"\n\t                                  >\n\t                                    <p>\n\t                                      Welcome to CariTahu! There's just one\n\t                                      more step before you get to the fun\n\t                                      part.\n\t                                    </p>\n\t                                    <p>\n\t                                      Verify your CariTahu account by clicking\n\t                                      on the button below:\n", "                                    </p>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n\t                          </td>\n\t                        </tr>\n\t                        <tr>\n\t                          <td align=\"center\" style=\"padding: 0 10px 0 10px;\">\n\t                            <table\n", "                              width=\"100%\"\n\t                              border=\"0\"\n\t                              cellspacing=\"0\"\n\t                              cellpadding=\"0\"\n\t                            >\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td\n\t                                    align=\"center\"\n\t                                    style=\"padding: 15px 0 35px 0;\"\n", "                                  >\n\t                                    <table\n\t                                      border=\"0\"\n\t                                      cellspacing=\"0\"\n\t                                      cellpadding=\"0\"\n\t                                    >\n\t                                      <tbody>\n\t                                        <tr>\n\t                                          <td align=\"center\">\n\t                                            <a\n", "                                              href=\"${\n\t                                                process.env\n\t                                                  .ACTIVATION_LINK_PATH +\n\t                                                activationLinkId\n\t                                              }\"\n\t                                              style=\"\n\t                                                font-size: 22px;\n\t                                                font-family: Open Sans, Lucida,\n\t                                                  Lucida Sans, Lucida Grande,\n\t                                                  Arial, sans-serif !important;\n", "                                                font-weight: normal;\n\t                                                color: #ffffff;\n\t                                                text-decoration: none;\n\t                                                background-color: #2563eb;\n\t                                                border-top: 15px solid #2563eb;\n\t                                                border-bottom: 15px solid\n\t                                                  #2563eb;\n\t                                                border-left: 25px solid\n\t                                                  #2563eb;\n\t                                                border-right: 25px solid\n", "                                                  #2563eb;\n\t                                                border-radius: 3px;\n\t                                                display: inline-block;\n\t                                              \"\n\t                                              target=\"_blank\"\n\t                                              data-saferedirecturl=\"https://www.google.com/url?q=https://www.CariTahu.com/core/verifyEmail?key%3D934a9d5d-0eb2-4333-a82e-80f57972f9cf&amp;source=gmail&amp;ust=1681680737787000&amp;usg=AOvVaw0LNmmPJd2-OxZUlD3whZJf\"\n\t                                            >\n\t                                              <span class=\"il\">\n\t                                                Verify\n\t                                              </span>\n", "                                              my account\n\t                                            </a>\n\t                                          </td>\n\t                                        </tr>\n\t                                      </tbody>\n\t                                    </table>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n", "                          </td>\n\t                        </tr>\n\t                        <tr>\n\t                          <td align=\"center\">\n\t                            <div\n\t                              class=\"a6S\"\n\t                              dir=\"ltr\"\n\t                              style=\"opacity: 0.01; left: 305px; top: 566px;\"\n\t                            ></div>\n\t                          </td>\n", "                        </tr>\n\t                        <tr>\n\t                          <td\n\t                            bgcolor=\"#FAF9F7\"\n\t                            align=\"center\"\n\t                            style=\"padding: 10px 15px 20px 15px;\"\n\t                          >\n\t                            <table\n\t                              width=\"100%\"\n\t                              border=\"0\"\n", "                              cellspacing=\"0\"\n\t                              cellpadding=\"0\"\n\t                              align=\"center\"\n\t                              style=\"width: 100% !important;\"\n\t                            >\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td\n\t                                    align=\"center\"\n\t                                    style=\"\n", "                                      font-size: 15px;\n\t                                      line-height: 22px;\n\t                                      font-family: Open Sans, Lucida,\n\t                                        Lucida Sans, Lucida Grande, Arial,\n\t                                        sans-serif !important;\n\t                                      color: #4b5563;\n\t                                    \"\n\t                                  >\n\t                                    Thanks for using CariTahu!\n\t                                  </td>\n", "                                </tr>\n\t                                <tr>\n\t                                  <td\n\t                                    align=\"center\"\n\t                                    style=\"padding: 5px 0 0 0;\"\n\t                                  >\n\t                                    <br />\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n", "                            </table>\n\t                          </td>\n\t                        </tr>\n\t                      </tbody>\n\t                    </table>\n\t                  </td>\n\t                </tr>\n\t              </tbody>\n\t            </table>\n\t          </td>\n", "        </tr>\n\t      </tbody>\n\t    </table>\n\t    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n\t      <tbody>\n\t        <tr>\n\t          <td\n\t            bgcolor=\"#f3f4f6\"\n\t            align=\"center\"\n\t            style=\"padding: 10px 15px 20px 15px;\"\n", "          >\n\t            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n\t              <tbody>\n\t                <tr>\n\t                  <td bgcolor=\"#f3f4f6\" align=\"center\">\n\t                    <table\n\t                      width=\"500\"\n\t                      border=\"0\"\n\t                      cellspacing=\"0\"\n\t                      cellpadding=\"0\"\n", "                      align=\"center\"\n\t                    >\n\t                      <tbody>\n\t                        <tr>\n\t                          <td\n\t                            align=\"center\"\n\t                            style=\"\n\t                              font-size: 14px;\n\t                              line-height: 16px;\n\t                              font-family: Open Sans, Lucida, Lucida Sans,\n", "                                Lucida Grande, Arial, sans-serif !important;\n\t                              color: #9ca3af;\n\t                            \"\n\t                          >\n\t                            <span\n\t                              style=\"color: #d1d5db; font-size: 12px;\"\n\t                              class=\"m_-2564905172801731076appleFooter\"\n\t                            >\n\t                              © 2023 RE JS JT, Anggrek Campus R 600\n\t                            </span>\n", "                            <br />\n\t                            <br />\n\t                          </td>\n\t                        </tr>\n\t                      </tbody>\n\t                    </table>\n\t                  </td>\n\t                  <td></td>\n\t                </tr>\n\t              </tbody>\n", "            </table>\n\t          </td>\n\t        </tr>\n\t      </tbody>\n\t    </table>\n\t  </div>`,\n\t  };\n\t  transporter.sendMail(mailOptions, (err, info) => {\n\t    if (err) {\n\t      console.log(err);\n", "    } else {\n\t      console.log('Email sent: ' + info.response);\n\t      return true;\n\t    }\n\t  });\n\t  return false;\n\t};\n\texport const getFileExtension = (fileName: string) => {\n\t  return '.' + fileName.split('.').pop();\n\t};\n", "export const deleteFile = (filePath: string) => {\n\t  fs.unlink(filePath, (err) => {\n\t    if (err) {\n\t      console.error(err);\n\t      return;\n\t    }\n\t  });\n\t};\n\texport const getPaginationOptions = (\n\t  page: number,\n", "  perPage: number\n\t): PaginationOptions => {\n\t  const skip = (page - 1) * perPage;\n\t  const take = perPage;\n\t  const paginationOpt: PaginationOptions = {\n\t    page: page,\n\t    perPage: perPage,\n\t    skip: skip,\n\t    take: take,\n\t  };\n", "  return paginationOpt;\n\t};\n\texport const generateRandomString = (prefix: string): string => {\n\t  const randomNumber = Math.floor(Math.random() * 1000000);\n\t  return `${prefix}${randomNumber}`;\n\t};\n"]}
{"filename": "src/utils/constants.ts", "chunked_list": ["import { Secret } from \"jsonwebtoken\";\n\texport const accessTokenSecret: Secret =\n\t  process.env.ACCESS_TOKEN_SECRET || \"mbVBFoeO40bcE3AilczmnM7IcQY0xWQwsC7Hbuqu\";\n\texport const refreshTokenSecret: Secret =\n\t  process.env.REFRESH_TOKEN_SECRET ||\n\t  \"CkwmqZBk2e8HPkwsxi0lbZrvqej7BYpmNmTvJZTL\";\n\texport const profilePictureRelativePath: string =\n\t  \"./src/public/profilePicture/\";\n\texport const forumRelativePath: string = \"./src/public/forum/\";\n\texport const maxForumAttachmentCount: number = 8;\n", "export const forumPerPage: number = 6;\n"]}
{"filename": "src/interfaces/interface.ts", "chunked_list": ["export interface PaginationOptions {\n\t  page: number;\n\t  perPage: number;\n\t  skip: number;\n\t  take: number;\n\t}\n"]}
{"filename": "src/databases/activation.link.database.ts", "chunked_list": ["import DBClient from \"../../prisma/prisma.client\";\n\timport { ActivationLink } from \"@prisma/client\";\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const getActivationLinkById = async (id: string) => {\n\t  const activationLink = await prisma.activationLink.findUnique({\n\t    where: { id: id },\n\t  });\n\t  return activationLink;\n\t};\n\texport const deleteActivationLinkById = async (id: string) => {\n", "  const activationLink = await prisma.activationLink.delete({\n\t    where: { id: id },\n\t  });\n\t  return activationLink;\n\t};\n\texport const createActivationLink = async (activationLink: ActivationLink) => {\n\t  const result = await prisma.activationLink.create({\n\t    data: { ...activationLink },\n\t  });\n\t  return result;\n", "};\n"]}
{"filename": "src/databases/forum.database.ts", "chunked_list": ["import { Forum } from '@prisma/client';\n\timport DBClient from '../../prisma/prisma.client';\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const getAllForum = async () => {\n\t  const forums = await prisma.forum.findMany({\n\t    include: {\n\t      forumComments: true,\n\t      creator: {\n\t        select: {\n\t          id: true,\n", "          email: false,\n\t          username: true,\n\t          name: true,\n\t          password: false,\n\t          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n", "      },\n\t    },\n\t  });\n\t  return forums;\n\t};\n\texport const getCountForum = async () => {\n\t  return await prisma.forum.count();\n\t};\n\texport const getNewestForumsPagination = async (\n\t  skip: number,\n", "  take: number,\n\t  forumSearch: string\n\t) => {\n\t  const forums = await prisma.forum.findMany({\n\t    where: {\n\t      OR: [\n\t        {\n\t          title: {\n\t            contains: forumSearch,\n\t          },\n", "        },\n\t        {\n\t          description: {\n\t            contains: forumSearch,\n\t          },\n\t        },\n\t      ],\n\t    },\n\t    skip: skip,\n\t    take: take,\n", "    orderBy: {\n\t      createdAt: 'desc',\n\t    },\n\t    include: {\n\t      forumComments: true,\n\t      creator: {\n\t        select: {\n\t          id: true,\n\t          email: true,\n\t          username: true,\n", "          name: true,\n\t          password: false,\n\t          isActive: true,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n\t      },\n\t    },\n", "  });\n\t  return forums;\n\t};\n\texport const getTopForumsPagination = async (\n\t  skip: number,\n\t  take: number,\n\t  forumSearch: string\n\t) => {\n\t  const forums = await prisma.forum.findMany({\n\t    where: {\n", "      OR: [\n\t        {\n\t          title: {\n\t            contains: forumSearch,\n\t          },\n\t        },\n\t        {\n\t          description: {\n\t            contains: forumSearch,\n\t          },\n", "        },\n\t      ],\n\t    },\n\t    skip: skip,\n\t    take: take,\n\t    orderBy: {\n\t      seen: 'desc',\n\t    },\n\t    include: {\n\t      forumComments: true,\n", "      creator: {\n\t        select: {\n\t          id: true,\n\t          email: true,\n\t          role: true,\n\t          username: true,\n\t          name: true,\n\t          password: false,\n\t          isActive: true,\n\t          profilePicture: true,\n", "          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n\t      },\n\t    },\n\t  });\n\t  return forums;\n\t};\n\t// export const getAllUserForum = async (userId: string) => {\n", "//   const forums = await prisma.forum.findMany({\n\t//     where: {\n\t//       userId: userId,\n\t//     },\n\t//   });\n\t//   return forums;\n\t// };\n\texport const getForumById = async (id: string) => {\n\t  const forum = await prisma.forum.findUnique({\n\t    where: {\n", "      id: id,\n\t    },\n\t    include: {\n\t      _count: true,\n\t      creator: {\n\t        select: {\n\t          id: true,\n\t          email: false,\n\t          username: true,\n\t          name: true,\n", "          password: false,\n\t          role: true,\n\t          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n\t      },\n\t      forumComments: {\n", "        include: {\n\t          _count: true,\n\t          forumReplies: {\n\t            include: {\n\t              replier: {\n\t                select: {\n\t                  id: true,\n\t                  email: false,\n\t                  username: true,\n\t                  role: true,\n", "                  name: true,\n\t                  password: false,\n\t                  isActive: false,\n\t                  profilePicture: true,\n\t                  forums: false,\n\t                  activationLink: false,\n\t                  refreshToken: false,\n\t                },\n\t              },\n\t            },\n", "          },\n\t          commenter: {\n\t            select: {\n\t              id: true,\n\t              role: true,\n\t              email: false,\n\t              username: true,\n\t              name: true,\n\t              password: false,\n\t              isActive: false,\n", "              profilePicture: true,\n\t              forums: false,\n\t              activationLink: false,\n\t              refreshToken: false,\n\t            },\n\t          },\n\t        },\n\t      },\n\t      forumAttachments: true,\n\t    },\n", "  });\n\t  return forum;\n\t};\n\texport const createForum = async (forum: Forum) => {\n\t  const result = await prisma.forum.create({\n\t    data: { ...forum },\n\t    include: {\n\t      creator: {\n\t        select: {\n\t          id: true,\n", "          email: false,\n\t          username: true,\n\t          name: true,\n\t          password: false,\n\t          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n", "      },\n\t    },\n\t  });\n\t  return result;\n\t};\n\texport const updateForum = async (\n\t  id: string,\n\t  title: string,\n\t  description: string\n\t) => {\n", "  const result = await prisma.forum.update({\n\t    where: {\n\t      id: id,\n\t    },\n\t    data: { title: title, description: description },\n\t    include: {\n\t      creator: {\n\t        select: {\n\t          id: true,\n\t          email: false,\n", "          username: true,\n\t          name: true,\n\t          password: false,\n\t          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n\t      },\n", "    },\n\t  });\n\t  return result;\n\t};\n\texport const incrementForumSeen = async (id: string) => {\n\t  const forum = await prisma.forum.update({\n\t    where: { id: id },\n\t    data: { seen: { increment: 1 } },\n\t    include: {\n\t      creator: {\n", "        select: {\n\t          id: true,\n\t          email: false,\n\t          username: true,\n\t          name: true,\n\t          password: false,\n\t          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n", "          refreshToken: false,\n\t        },\n\t      },\n\t    },\n\t  });\n\t  return forum;\n\t};\n\texport const deleteForum = async (id: string) => {\n\t  const result = await prisma.forum.delete({\n\t    where: {\n", "      id: id,\n\t    },\n\t    include: {\n\t      creator: {\n\t        select: {\n\t          id: true,\n\t          email: false,\n\t          username: true,\n\t          name: true,\n\t          password: false,\n", "          isActive: false,\n\t          profilePicture: true,\n\t          forums: false,\n\t          activationLink: false,\n\t          refreshToken: false,\n\t        },\n\t      },\n\t    },\n\t  });\n\t  return result;\n", "};\n\texport const checkForumCreator = async (forumId: string, userId: string) => {\n\t  const result = await prisma.forum.findFirst({\n\t    where: {\n\t      id: forumId,\n\t      userId: userId,\n\t    },\n\t  });\n\t  return result;\n\t};\n"]}
{"filename": "src/databases/forum.reply.database.ts", "chunked_list": ["import DBClient from \"../../prisma/prisma.client\";\n\timport { ForumReply } from \"@prisma/client\";\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const getAllForumReplies = async (forumCommentId: string) => {\n\t  const forumReplies = await prisma.forumReply.findMany({\n\t    where: {\n\t      forumCommentId: forumCommentId,\n\t    },\n\t    orderBy: {\n\t      createdAt: \"asc\",\n", "    },\n\t  });\n\t  return forumReplies;\n\t};\n\texport const createForumReply = async (forumReply: ForumReply) => {\n\t  const result = await prisma.forumReply.create({\n\t    data: {\n\t      ...forumReply,\n\t    },\n\t  });\n", "  return result;\n\t};\n"]}
{"filename": "src/databases/user.database.ts", "chunked_list": ["import { User } from '@prisma/client';\n\timport DBClient from '../../prisma/prisma.client';\n\timport { deleteFile } from '../facades/helper';\n\timport { profilePictureRelativePath } from '../utils/constants';\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const getUserById = async (id: string) => {\n\t  const user = await prisma.user.findUnique({\n\t    where: { id: id },\n\t    select: {\n\t      id: true,\n", "      email: true,\n\t      username: true,\n\t      name: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n", "};\n\texport const getUserByEmail = async (email: string) => {\n\t  const user = await prisma.user.findUnique({\n\t    where: { email: email },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: true,\n", "      role: true,\n\t      isActive: true,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n", "export const getUserByUsername = async (username: string) => {\n\t  const user = await prisma.user.findUnique({\n\t    where: { username: username },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n", "      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const getUserByRefreshToken = async (refreshToken: string) => {\n", "  const user = await prisma.user.findFirst({\n\t    where: { refreshToken: refreshToken },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n", "      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const isEmailExists = async (email: string): Promise<boolean> => {\n\t  const user = await prisma.user.findUnique({\n", "    where: {\n\t      email: email,\n\t    },\n\t  });\n\t  return !!user;\n\t};\n\texport const isUsernameExists = async (username: string): Promise<boolean> => {\n\t  const user = await prisma.user.findUnique({\n\t    where: {\n\t      username: username,\n", "    },\n\t  });\n\t  return !!user;\n\t};\n\texport const createUser = async (user: User) => {\n\t  const result = await prisma.user.create({\n\t    data: { ...user },\n\t    select: {\n\t      id: true,\n\t      email: true,\n", "      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n", "  });\n\t  return result;\n\t};\n\texport const createActiveUser = async (user: User) => {\n\t  const result = await prisma.user.create({\n\t    data: { ...user },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n", "      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: true,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n", "  return result;\n\t};\n\texport const activateUser = async (id: string) => {\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n\t      isActive: true,\n\t    },\n\t    select: {\n\t      id: true,\n", "      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n", "    },\n\t  });\n\t  return user;\n\t};\n\texport const updateRefreshToken = async (id: string, refreshToken: string) => {\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n\t      refreshToken: refreshToken,\n\t    },\n", "    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n", "      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const clearRefreshToken = async (id: string) => {\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n", "      refreshToken: '',\n\t    },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n", "      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const updateProfile = async (\n\t  id: string,\n", "  username: string,\n\t  name: string\n\t) => {\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n\t      username: username,\n\t      name: name,\n\t    },\n\t    select: {\n", "      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n", "      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const updateProfilePicture = async (\n\t  id: string,\n\t  profilePicture: string\n\t) => {\n\t  const prevUser = await getUserById(id);\n", "  if (prevUser) {\n\t    if (prevUser.profilePicture !== '') {\n\t      deleteFile(profilePictureRelativePath + prevUser.profilePicture);\n\t    }\n\t  }\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n\t      profilePicture: profilePicture,\n\t    },\n", "    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n\t      profilePicture: true,\n\t      forums: true,\n", "      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const updateRoleDoctor = async (id: string) => {\n\t  const user = await prisma.user.update({\n\t    where: { id: id },\n\t    data: {\n", "      role: 'Doctor',\n\t    },\n\t    select: {\n\t      id: true,\n\t      email: true,\n\t      username: true,\n\t      name: true,\n\t      password: false,\n\t      role: true,\n\t      isActive: false,\n", "      profilePicture: true,\n\t      forums: true,\n\t      activationLink: false,\n\t      refreshToken: false,\n\t    },\n\t  });\n\t  return user;\n\t};\n\texport const getAllRoles = async () => {\n\t  const members = await prisma.user.findMany({\n", "    where: {\n\t      role: 'Member',\n\t    },\n\t  });\n\t  const doctors = await prisma.user.findMany({\n\t    where: {\n\t      role: 'Doctor',\n\t    },\n\t  });\n\t  const admins = await prisma.user.findMany({\n", "    where: {\n\t      role: 'Admin',\n\t    },\n\t  });\n\t  return { members, doctors, admins };\n\t};\n"]}
{"filename": "src/databases/forum.comment.database.ts", "chunked_list": ["import DBClient from \"../../prisma/prisma.client\";\n\timport { ForumComment } from \"@prisma/client\";\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const getAllForumComments = async (forumId: string) => {\n\t  const forumComments = await prisma.forumComment.findMany({\n\t    where: {\n\t      forumId: forumId,\n\t    },\n\t    include: {\n\t      _count: true,\n", "      forumReplies: true,\n\t    },\n\t    orderBy: {\n\t        createdAt: \"asc\"\n\t    }\n\t  });\n\t  return forumComments;\n\t};\n\texport const createForumComment = async (forumComment: ForumComment) => {\n\t  const result = await prisma.forumComment.create({\n", "    data: {\n\t      ...forumComment,\n\t    },\n\t  });\n\t  return result;\n\t};\n"]}
{"filename": "src/databases/forum.attachment.database.ts", "chunked_list": ["import DBClient from \"../../prisma/prisma.client\";\n\timport { ForumAttachment } from \"@prisma/client\";\n\tconst prisma = DBClient.getInstance().prisma;\n\texport const createForumAttachment = async (\n\t  forumAttachment: ForumAttachment\n\t) => {\n\t  const result = await prisma.forumAttachment.create({\n\t    data: { ...forumAttachment },\n\t  });\n\t  return result;\n", "};\n\texport const getAllForumAttachments = async (forumId: string) => {\n\t  const forumAttachments = await prisma.forumAttachment.findMany({\n\t    where: {\n\t      forumId: forumId,\n\t    },\n\t  });\n\t  return forumAttachments;\n\t};\n"]}
{"filename": "src/middlewares/forum.middleware.ts", "chunked_list": ["import { NextFunction, Request, Response } from 'express';\n\timport { checkForumCreator } from '../databases/forum.database';\n\texport const isForumCreator = async (\n\t  req: Request,\n\t  res: Response,\n\t  next: NextFunction\n\t) => {\n\t  try {\n\t    const { forumId } = req.params;\n\t    const userId = req.jwtPayload && req.jwtPayload.id;\n", "    if (!userId) {\n\t      return res.status(400).json({ errors: 'error occurred!' });\n\t    }\n\t    const check = await checkForumCreator(forumId, userId);\n\t    if (!check) {\n\t      return res.status(400).json({ errors: 'you are not the forum creator!' });\n\t    }\n\t    return next();\n\t  } catch (error) {\n\t    console.log(error);\n", "    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n"]}
{"filename": "src/middlewares/role.middleware.ts", "chunked_list": ["import { NextFunction, Request, Response } from \"express\";\n\texport const isMember = (req: Request, res: Response, next: NextFunction) => {\n\t  try {\n\t    const role: string = req.jwtPayload ? req.jwtPayload.role : '';\n\t    if (!role) {\n\t      return res.status(400).json({ errors: [\"error occurred!\"] });\n\t    }\n\t    if (role === \"Member\") {\n\t      return next();\n\t    }\n", "    return res.status(400).json({ errors: [\"your role is not member!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: [\"error occurred!\"] });\n\t  }\n\t};\n\texport const isDoctor = (req: Request, res: Response, next: NextFunction) => {\n\t  try {\n\t    // console.log(req.jwtPayload)\n\t    const role: string = req.jwtPayload ? req.jwtPayload.role : '';\n", "    if (!role) {\n\t      return res.status(400).json({ errors: [\"error occurred!\"] });\n\t    }\n\t    if (role === \"Doctor\") {\n\t      return next();\n\t    }\n\t    return res.status(400).json({ errors: [\"your role is not doctor!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: [\"error occurred!\"] });\n", "  }\n\t};\n\texport const isAdmin = (req: Request, res: Response, next: NextFunction) => {\n\t  try {\n\t    const role: string = req.jwtPayload ? req.jwtPayload.role : '';\n\t    if (!role) {\n\t      return res.status(400).json({ errors: [\"error occurred!\"] });\n\t    }\n\t    if (role === \"Admin\") {\n\t      return next();\n", "    }\n\t    return res.status(400).json({ errors: [\"your role is not admin!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: [\"error occurred!\"] });\n\t  }\n\t};\n"]}
{"filename": "src/middlewares/file.upload.middleware.ts", "chunked_list": ["import { NextFunction, Request, Response } from \"express\";\n\timport multer, { FileFilterCallback } from \"multer\";\n\timport { v4 as uuidv4 } from \"uuid\";\n\timport { getFileExtension } from \"../facades/helper\";\n\timport {\n\t  forumRelativePath,\n\t  maxForumAttachmentCount,\n\t  profilePictureRelativePath,\n\t} from \"../utils/constants\";\n\ttype DestinationCallback = (error: Error | null, destination: string) => void;\n", "type FileNameCallback = (error: Error | null, filename: string) => void;\n\tconst profilePictureStorage = multer.diskStorage({\n\t  destination: (\n\t    _req: Request,\n\t    _file: Express.Multer.File,\n\t    callback: DestinationCallback\n\t  ): void => {\n\t    callback(null, profilePictureRelativePath);\n\t  },\n\t  filename: (\n", "    req: Request,\n\t    file: Express.Multer.File,\n\t    callback: FileNameCallback\n\t  ): void => {\n\t    const fileName = uuidv4() + getFileExtension(file.originalname);\n\t    req.body.profilePicture = fileName;\n\t    callback(null, fileName);\n\t  },\n\t});\n\tconst profilePictureFileFilter = (\n", "  req: Request,\n\t  file: Express.Multer.File,\n\t  callback: FileFilterCallback\n\t): void => {\n\t  if (\n\t    file.mimetype === \"image/png\" ||\n\t    file.mimetype === \"image/jpg\" ||\n\t    file.mimetype === \"image/jpeg\"\n\t  ) {\n\t    callback(null, true);\n", "  } else {\n\t    req.fileValidationError =\n\t      \"invalid file type. Only PNG, JPG, and JPEG files are allowed!\";\n\t    callback(null, false);\n\t  }\n\t};\n\tconst forumStorage = multer.diskStorage({\n\t  destination: (\n\t    _req: Request,\n\t    _file: Express.Multer.File,\n", "    callback: DestinationCallback\n\t  ): void => {\n\t    callback(null, forumRelativePath);\n\t  },\n\t  filename: (\n\t    _req: Request,\n\t    file: Express.Multer.File,\n\t    callback: FileNameCallback\n\t  ): void => {\n\t    const fileName = uuidv4() + getFileExtension(file.originalname);\n", "    file.originalname = fileName;\n\t    callback(null, fileName);\n\t  },\n\t});\n\tconst forumFileFilter = (\n\t  req: Request,\n\t  file: Express.Multer.File,\n\t  callback: FileFilterCallback\n\t): void => {\n\t  if (\n", "    file.mimetype === \"image/png\" ||\n\t    file.mimetype === \"image/jpg\" ||\n\t    file.mimetype === \"image/jpeg\" ||\n\t    file.mimetype === \"video/mp4\" ||\n\t    file.mimetype === \"video/quicktime\" ||\n\t    file.mimetype === \"video/x-matroska\"\n\t  ) {\n\t    callback(null, true);\n\t  } else {\n\t    req.fileValidationError = \"invalid file type!\";\n", "    callback(null, false);\n\t  }\n\t};\n\texport const uploadProfilePicture = (\n\t  req: Request,\n\t  res: Response,\n\t  next: NextFunction\n\t) => {\n\t  multer({\n\t    storage: profilePictureStorage,\n", "    fileFilter: profilePictureFileFilter,\n\t  }).single(\"profilePicture\")(req, res, (err) => {\n\t    if (err instanceof multer.MulterError) {\n\t      return res\n\t        .status(500)\n\t        .json({ message: \"An error occurred while uploading files\" });\n\t    } else if (err) {\n\t      return res\n\t        .status(500)\n\t        .json({ message: \"An error occurred while uploading files\" });\n", "    }\n\t    return next();\n\t  });\n\t};\n\texport const uploadForum = (\n\t  req: Request,\n\t  res: Response,\n\t  next: NextFunction\n\t) => {\n\t  multer({\n", "    storage: forumStorage,\n\t    fileFilter: forumFileFilter,\n\t  }).array(\"forumAttachments\", maxForumAttachmentCount)(req, res, (err) => {\n\t    if (err instanceof multer.MulterError) {\n\t      if (err.code === \"LIMIT_UNEXPECTED_FILE\") {\n\t        return res.status(400).json({ message: \"Too many files uploaded\" });\n\t      }\n\t      return res\n\t        .status(500)\n\t        .json({ message: \"An error occurred while uploading files\" });\n", "    } else if (err) {\n\t      return res\n\t        .status(500)\n\t        .json({ message: \"An error occurred while uploading files\" });\n\t    }\n\t    return next();\n\t  });\n\t};\n"]}
{"filename": "src/middlewares/validator.middleware.ts", "chunked_list": ["import { NextFunction, Request, Response } from \"express\";\n\timport {\n\t  body,\n\t  cookie,\n\t  validationResult,\n\t  param,\n\t  query,\n\t} from \"express-validator\";\n\texport const bodyEmptyValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n", "    return body(req, `${req} field cannot be empty!`).notEmpty();\n\t  });\n\t};\n\texport const bodyEmailValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n\t    return body(\n\t      req,\n\t      `${req} field must be in the correct email format!`\n\t    ).isEmail();\n\t  });\n", "};\n\texport const bodyUUIDValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n\t    return body(\n\t      req,\n\t      `${req} body must be in the correct uuid(v4) format!`\n\t    ).isUUID(4);\n\t  });\n\t};\n\texport const bodyLengthValidation = (\n", "  requests: string[],\n\t  min: number[],\n\t  max: number[]\n\t) => {\n\t  return requests.map((req, i) => {\n\t    return body(\n\t      req,\n\t      `${req} field must between ${min[i]} and ${max[i]} character(s)!`\n\t    ).isLength({ min: min[i], max: max[i] });\n\t  });\n", "};\n\texport const queryEmptyValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n\t    return query(req, `${req} query not found`).notEmpty();\n\t  });\n\t};\n\texport const cookieEmptyValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n\t    return cookie(req, `${req} cookie not found!`).exists();\n\t  });\n", "};\n\texport const paramEmptyValidation = (requests: string[]) => {\n\t  return requests.map((req) => {\n\t    return param(\n\t      req,\n\t      `${req} param must be in the correct uuid(v4) format!`\n\t    ).notEmpty();\n\t  });\n\t};\n\texport const paramUUIDValidation = (requests: string[]) => {\n", "  return requests.map((req) => {\n\t    return param(\n\t      req,\n\t      `${req} param must be in the correct uuid(v4) format!`\n\t    ).isUUID(4);\n\t  });\n\t};\n\texport const errorValidator = (\n\t  req: Request,\n\t  res: Response,\n", "  next: NextFunction\n\t) => {\n\t  const errors = validationResult(req);\n\t  if (errors.isEmpty()) {\n\t    return next();\n\t  }\n\t  return res.status(422).json({\n\t    errors: errors.array().map((err) => {\n\t      return err.msg;\n\t    }),\n", "  });\n\t};\n"]}
{"filename": "src/middlewares/auth.middleware.ts", "chunked_list": ["import { NextFunction, Request, Response } from \"express\";\n\timport jwt, { Jwt, JwtPayload, VerifyErrors } from \"jsonwebtoken\";\n\timport { accessTokenSecret } from \"../utils/constants\";\n\texport const isAuthenticated = (\n\t  req: Request,\n\t  res: Response,\n\t  next: NextFunction\n\t) => {\n\t  try {\n\t    const authHeader = req.headers[\"authorization\"];\n", "    const token = authHeader && authHeader.split(\" \")[1];\n\t    if (!token) {\n\t      return res.status(401).json({ errors: [\"token not found!\"] });\n\t    }\n\t    jwt.verify(\n\t      token,\n\t      accessTokenSecret,\n\t      (\n\t        err: VerifyErrors | null,\n\t        decode: Jwt | JwtPayload | string | undefined\n", "      ) => {\n\t        if (err) {\n\t          return res.status(400).json({ errors: [err.message] });\n\t        }\n\t        if (decode) {\n\t          req.jwtPayload = decode;\n\t          return next();\n\t        }\n\t      }\n\t    );\n", "  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: [\"error occurred!\"] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/auth.controller.ts", "chunked_list": ["import { User } from '@prisma/client';\n\timport axios from 'axios';\n\timport { compare, hash } from 'bcrypt';\n\timport { Request, Response } from 'express';\n\timport jwt, { Jwt, JwtPayload, VerifyErrors } from 'jsonwebtoken';\n\timport { v4 as uuidv4 } from 'uuid';\n\timport { createActivationLink } from '../databases/activation.link.database';\n\timport {\n\t  clearRefreshToken,\n\t  createActiveUser,\n", "  createUser,\n\t  getUserByEmail,\n\t  getUserByRefreshToken,\n\t  getUserByUsername,\n\t  updateRefreshToken,\n\t} from '../databases/user.database';\n\timport { generateRandomString, sendEmail } from '../facades/helper';\n\timport { accessTokenSecret, refreshTokenSecret } from '../utils/constants';\n\texport const login = async (req: Request, res: Response) => {\n\t  try {\n", "    const { email, password } = req.body;\n\t    const user = await getUserByEmail(email);\n\t    if (!user) {\n\t      return res.status(400).json({ errors: ['email not found!'] });\n\t    }\n\t    const match = await compare(password, user.password);\n\t    if (!match) {\n\t      return res.status(403).json({ errors: ['wrong credentials!'] });\n\t    }\n\t    if (!user.isActive) {\n", "      return res\n\t        .status(403)\n\t        .json({ errors: ['please verify your account before proceeding!'] });\n\t    }\n\t    const accessToken = jwt.sign(\n\t      { id: user.id, email: user.email, role: user.role },\n\t      accessTokenSecret,\n\t      {\n\t        expiresIn: '7d',\n\t      }\n", "    );\n\t    const refreshToken = jwt.sign(\n\t      { id: user.id, email: user.email, role: user.role },\n\t      refreshTokenSecret,\n\t      {\n\t        expiresIn: '1d',\n\t      }\n\t    );\n\t    const user2 = await updateRefreshToken(user.id, refreshToken);\n\t    return res\n", "      .cookie('refreshToken', refreshToken, {\n\t        httpOnly: true,\n\t        sameSite: 'none',\n\t        secure: false,\n\t        maxAge: 24 * 60 * 60 * 1000,\n\t      })\n\t      .status(200)\n\t      .json({ user: user2, accessToken: accessToken });\n\t  } catch (error) {\n\t    console.log(error);\n", "    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const loginGoogleToken = async (req: Request, res: Response) => {\n\t  try {\n\t    const { token } = req.body;\n\t    const response = await axios.get(\n\t      `https://oauth2.googleapis.com/tokeninfo?id_token=${token}`\n\t    );\n\t    if (response.status === 400) {\n", "      return res.status(400).json({ errors: ['token not found!'] });\n\t    }\n\t    const user = await getUserByEmail(response.data.email);\n\t    if (user) {\n\t      const accessToken = jwt.sign(\n\t        { id: user.id, email: user.email, role: user.role },\n\t        accessTokenSecret,\n\t        {\n\t          expiresIn: '7d',\n\t        }\n", "      );\n\t      const refreshToken = jwt.sign(\n\t        { id: user.id, email: user.email, role: user.role },\n\t        refreshTokenSecret,\n\t        {\n\t          expiresIn: '1d',\n\t        }\n\t      );\n\t      const user2 = await updateRefreshToken(user.id, refreshToken);\n\t      return res\n", "        .cookie('refreshToken', refreshToken, {\n\t          httpOnly: true,\n\t          maxAge: 24 * 60 * 60 * 1000,\n\t        })\n\t        .status(200)\n\t        .json({ user: user2, accessToken: accessToken });\n\t    } else {\n\t      const user: User = {\n\t        email: response.data.email,\n\t        name: response.data.name,\n", "        profilePicture: response.data.picture,\n\t        role: 'Member',\n\t        id: uuidv4(),\n\t        username: generateRandomString('profile'),\n\t        refreshToken: '',\n\t        isActive: true,\n\t        password: '',\n\t      };\n\t      await createActiveUser(user);\n\t      const accessToken = jwt.sign(\n", "        { id: user.id, email: user.email, role: user.role },\n\t        accessTokenSecret,\n\t        {\n\t          expiresIn: '7d',\n\t        }\n\t      );\n\t      const refreshToken = jwt.sign(\n\t        { id: user.id, email: user.email, role: user.role },\n\t        refreshTokenSecret,\n\t        {\n", "          expiresIn: '1d',\n\t        }\n\t      );\n\t      const user2 = await updateRefreshToken(user.id, refreshToken);\n\t      return res\n\t        .cookie('refreshToken', refreshToken, {\n\t          httpOnly: true,\n\t          maxAge: 24 * 60 * 60 * 1000,\n\t        })\n\t        .status(200)\n", "        .json({ user: user2, accessToken: accessToken });\n\t    }\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const register = async (req: Request, res: Response) => {\n\t  try {\n\t    const { email, name, username, password } = req.body;\n", "    const validateEmail = await getUserByEmail(email);\n\t    const validateUsername = await getUserByUsername(username);\n\t    if (validateEmail) {\n\t      return res.status(400).json({ errors: ['email you provided is taken!'] });\n\t    }\n\t    if (validateUsername) {\n\t      return res\n\t        .status(400)\n\t        .json({ errors: ['username you provided is taken!'] });\n\t    }\n", "    const saltRounds = 10;\n\t    const hashedPassword = await hash(password, saltRounds);\n\t    const user = await createUser({\n\t      id: uuidv4(),\n\t      email: email,\n\t      username: username,\n\t      name: name,\n\t      password: hashedPassword,\n\t      role: 'Member',\n\t      isActive: false,\n", "      profilePicture: '/profile.webp',\n\t      refreshToken: '',\n\t    });\n\t    const activationLink = await createActivationLink({\n\t      id: uuidv4(),\n\t      userId: user.id,\n\t      expirationDate: new Date(Date.now() + 3600 * 1000 * 2),\n\t    });\n\t    await sendEmail(email, activationLink.id);\n\t    return res.status(200).json({ user: user });\n", "  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const refreshToken = async (req: Request, res: Response) => {\n\t  try {\n\t    const refreshToken = req.cookies.refreshToken;\n\t    const user = await getUserByRefreshToken(refreshToken);\n\t    if (!user) {\n", "      return res.status(403).json({ errors: ['user not found!'] });\n\t    }\n\t    jwt.verify(\n\t      refreshToken,\n\t      refreshTokenSecret,\n\t      (\n\t        err: VerifyErrors | null,\n\t        decode: Jwt | JwtPayload | string | undefined\n\t      ) => {\n\t        if (err) {\n", "          return res.status(400).json({ errors: [err.message] });\n\t        }\n\t        if (decode) {\n\t          const accessToken = jwt.sign(\n\t            { id: user.id, email: user.email, role: user.role },\n\t            accessTokenSecret,\n\t            {\n\t              expiresIn: '7d',\n\t            }\n\t          );\n", "          res.status(200).json({ accessToken: accessToken });\n\t        }\n\t      }\n\t    );\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const logout = async (req: Request, res: Response) => {\n", "  try {\n\t    const refreshToken = req.cookies.refreshToken;\n\t    const user = await getUserByRefreshToken(refreshToken);\n\t    if (!user) {\n\t      return res.status(403).json({ errors: ['user not found!'] });\n\t    }\n\t    await clearRefreshToken(user.id);\n\t    return res\n\t      .status(200)\n\t      .clearCookie('refreshToken')\n", "      .json({ successes: ['logout successful!'] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/user.controller.ts", "chunked_list": ["import { Request, Response } from 'express';\n\timport {\n\t  getAllRoles,\n\t  getUserById as getUser,\n\t  getUserByUsername,\n\t  updateProfile as uProfile,\n\t  updateProfilePicture as uProfilePicture,\n\t  updateRoleDoctor,\n\t} from '../databases/user.database';\n\texport const getUserById = async (req: Request, res: Response) => {};\n", "export const refetch = async (req: Request, res: Response) => {\n\t  try {\n\t    const id = req.jwtPayload && req.jwtPayload.id;\n\t    const user = await getUser(id);\n\t    if (user) {\n\t      const data = {\n\t        user,\n\t      };\n\t      return res.status(200).json(user);\n\t    }\n", "    return res.status(400).json({ errors: ['user not found'] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const updateProfilePicture = async (req: Request, res: Response) => {\n\t  try {\n\t    if (req.fileValidationError) {\n\t      return res.status(400).json({ errors: [req.fileValidationError] });\n", "    }\n\t    const { profilePicture } = req.body;\n\t    const userId = req.jwtPayload && req.jwtPayload.id;\n\t    const user = await uProfilePicture(userId, profilePicture);\n\t    if (user) {\n\t      return res.status(200).json(user);\n\t    }\n\t    return res.status(400).json({ errors: ['user not found!'] });\n\t  } catch (error) {\n\t    console.log(error);\n", "    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const updateProfile = async (req: Request, res: Response) => {\n\t  try {\n\t    const { username, name } = req.body;\n\t    const userId = req.jwtPayload && req.jwtPayload.id;\n\t    const checkUsername = await getUserByUsername(username);\n\t    if (checkUsername) {\n\t      res.status(400).json({ errors: ['username already taken!'] });\n", "    }\n\t    const user = await uProfile(userId, username, name);\n\t    if (!user) {\n\t      return res.status(400).json({ errors: ['user not found!'] });\n\t    }\n\t    return res.status(200).json({ user: user });\n\t  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n", "};\n\texport const changeRole = async (req: Request, res: Response) => {\n\t  try {\n\t    const { userId } = req.body;\n\t    const user = await updateRoleDoctor(userId);\n\t    if (!user) {\n\t      res.status(400).json({ errors: ['user not found!'] });\n\t    }\n\t    return res.status(200).json({ user: user });\n\t  } catch (error) {\n", "    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n\texport const adminPage = async (req: Request, res: Response) => {\n\t  try {\n\t    const { members, doctors, admins } = await getAllRoles();\n\t    return res\n\t      .status(200)\n\t      .json({ members: members, doctors: doctors, admins: admins });\n", "  } catch (error) {\n\t    console.log(error);\n\t    return res.status(400).json({ errors: ['error occurred!'] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/forum.reply.controller.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { v4 as uuidv4 } from \"uuid\";\n\timport {\n\t  createForumReply as cForumReply,\n\t  getAllForumReplies as gAllForumReplies,\n\t} from \"../databases/forum.reply.database\";\n\texport const createForumReplies = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumCommentId, reply } = req.body;\n\t    const userId = req.jwtPayload && req.jwtPayload.id;\n", "    const forumReply = await cForumReply({\n\t      id: uuidv4(),\n\t      reply: reply,\n\t      forumCommentId: forumCommentId,\n\t      userId: userId,\n\t      createdAt: new Date(Date.now()),\n\t    });\n\t    if (!forumReply) {\n\t      return res.status(400).json({ errors: [\"forum reply cannot be made!\"] });\n\t    }\n", "    return res.status(200).json({ successes: [\"reply has been added!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: [\"error occurred\"] });\n\t  }\n\t};\n\texport const getAllForumReplies = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumCommentId } = req.params;\n\t    const forumReplies = await gAllForumReplies(forumCommentId);\n", "    return res.status(200).json({ forumReplies: forumReplies });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: [\"error occurred\"] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/forum.controller.ts", "chunked_list": ["import { ForumAttachmentType } from '@prisma/client';\n\timport { Request, Response } from 'express';\n\timport { v4 as uuidv4 } from 'uuid';\n\timport {\n\t  createForumAttachment,\n\t  getAllForumAttachments,\n\t} from '../databases/forum.attachment.database';\n\timport {\n\t  createForum as cForum,\n\t  deleteForum as dForum,\n", "  getAllForum,\n\t  getCountForum,\n\t  getForumById,\n\t  getNewestForumsPagination,\n\t  getTopForumsPagination,\n\t  incrementForumSeen,\n\t  updateForum as uForum,\n\t} from '../databases/forum.database';\n\timport { getPaginationOptions } from '../facades/helper';\n\timport { PaginationOptions } from '../interfaces/interface';\n", "import { forumPerPage } from '../utils/constants';\n\texport const getForum = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumId } = req.params;\n\t    const forum = await getForumById(forumId);\n\t    if (!forum) {\n\t      res.status(404).json({ errors: ['forum not found!'] });\n\t    }\n\t    res.status(200).json({ forum: forum });\n\t  } catch (error) {\n", "    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const newestForumPagination = async (req: Request, res: Response) => {\n\t  try {\n\t    const { page } = req.query;\n\t    let { search } = req.query;\n\t    if (search === undefined || search === null) {\n\t      search = '';\n", "    }\n\t    search = search?.toString();\n\t    let p: number = 1;\n\t    if (typeof page == 'string' && !isNaN(parseInt(page))) {\n\t      p = parseInt(page);\n\t    }\n\t    const paginationOptions: PaginationOptions = getPaginationOptions(\n\t      p,\n\t      forumPerPage\n\t    );\n", "    const forums = await getNewestForumsPagination(\n\t      paginationOptions.skip,\n\t      paginationOptions.take,\n\t      search\n\t    );\n\t    const totalForums = await getCountForum();\n\t    res.status(200).json({\n\t      forums: forums,\n\t      totalForums: totalForums,\n\t      perPage: forumPerPage,\n", "    });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const getAll = async (req: Request, res: Response) => {\n\t  try {\n\t    const forums = await getAllForum();\n\t    res.status(200).json({\n", "      forums: forums,\n\t    });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const topForumPagination = async (req: Request, res: Response) => {\n\t  try {\n\t    const { page } = req.query;\n", "    let { search } = req.query;\n\t    if (search === undefined || search === null) {\n\t      search = '';\n\t    }\n\t    search = search?.toString();\n\t    let p: number = 1;\n\t    if (typeof page == 'string' && !isNaN(parseInt(page))) {\n\t      p = parseInt(page);\n\t    }\n\t    const paginationOptions: PaginationOptions = getPaginationOptions(\n", "      p,\n\t      forumPerPage\n\t    );\n\t    const forums = await getTopForumsPagination(\n\t      paginationOptions.skip,\n\t      paginationOptions.take,\n\t      search\n\t    );\n\t    const totalForums = await getCountForum();\n\t    res.status(200).json({\n", "      forums: forums,\n\t      totalForums: totalForums,\n\t      perPage: forumPerPage,\n\t    });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const createForum = async (req: Request, res: Response) => {\n", "  try {\n\t    if (req.fileValidationError) {\n\t      return res.status(400).json({ errors: [req.fileValidationError] });\n\t    }\n\t    const { title, description } = req.body;\n\t    const userId = req.jwtPayload && req.jwtPayload.id;\n\t    const forum = await cForum({\n\t      id: uuidv4(),\n\t      title: title,\n\t      description: description,\n", "      userId: userId,\n\t      seen: 0,\n\t      createdAt: new Date(Date.now()),\n\t      updatedAt: new Date(Date.now()),\n\t    });\n\t    if (!forum) {\n\t      return res.status(400).json({ errors: ['forum cannot be made!'] });\n\t    }\n\t    if (req.files && !(req.files instanceof Array)) {\n\t      // Validate file must be array\n", "      return res.status(400).json({ errors: ['file must be array'] });\n\t    }\n\t    const files = req.files;\n\t    if (files) {\n\t      // Validate if there's file in the form than create the attachment\n\t      const length = files.length;\n\t      for (let index = 0; index < length; index++) {\n\t        const file = files.at(index);\n\t        var type: ForumAttachmentType = 'Video';\n\t        if (!file) {\n", "          return res.status(400).json({ errors: ['error occurred'] });\n\t        }\n\t        if (\n\t          file.mimetype === 'image/png' ||\n\t          file.mimetype === 'image/jpg' ||\n\t          file.mimetype === 'image/jpeg'\n\t        ) {\n\t          type = 'Image';\n\t        }\n\t        await createForumAttachment({\n", "          path: file.originalname,\n\t          forumId: forum.id,\n\t          type: type,\n\t        });\n\t      }\n\t    }\n\t    const forumAttachments = await getAllForumAttachments(forum.id);\n\t    return res\n\t      .status(200)\n\t      .json({ forum: forum, forumAttachments: forumAttachments });\n", "  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const forumSeen = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumId } = req.body;\n\t    const forum = await incrementForumSeen(forumId);\n\t    if (!forum) {\n", "      return res.status(400).json({ errors: ['forum not found'] });\n\t    }\n\t    return res.status(200).json({ forum: forum });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n\texport const updateForum = async (req: Request, res: Response) => {\n\t  try {\n", "    const { forumId, title, description } = req.body;\n\t    const forum = await uForum(forumId, title, description);\n\t    if (!forum) {\n\t      return res.status(400).json({ errors: ['forum not found'] });\n\t    }\n\t    return res.status(200).json({ forum: forum });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n", "};\n\texport const deleteForum = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumId } = req.body;\n\t    const forum = await dForum(forumId);\n\t    if (!forum) {\n\t      return res.status(400).json({ errors: ['forum not found'] });\n\t    }\n\t    return res.status(200).json({ successes: ['forum successfully deleted!'] });\n\t  } catch (error) {\n", "    console.log(error);\n\t    res.status(400).json({ errors: ['error occurred'] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/forum.comment.controller.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { v4 as uuidv4 } from \"uuid\";\n\timport {\n\t  createForumComment as cForumComment,\n\t  getAllForumComments as gAllForumComments,\n\t} from \"../databases/forum.comment.database\";\n\texport const createForumComment = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumId, comment } = req.body;\n\t    console.log('1')\n", "    const userId = req.jwtPayload && req.jwtPayload.id;\n\t    console.log('2')\n\t    const forumComment = await cForumComment({\n\t      id: uuidv4(),\n\t      comment: comment,\n\t      forumId: forumId,\n\t      userId: userId,\n\t      createdAt: new Date(Date.now()),\n\t    });\n\t    console.log('3')\n", "    if (!forumComment) {\n\t      return res\n\t      .status(400)\n\t      .json({ errors: [\"forum comment cannot be made!\"] });\n\t    }\n\t    console.log('4')\n\t    return res.status(200).json({ successes: [\"comment has been added!\"] });\n\t  } catch (error) {\n\t    console.log('5')\n\t    console.log(error);\n", "    res.status(400).json({ errors: [\"error occurred\"] });\n\t  }\n\t};\n\texport const getAllForumComments = async (req: Request, res: Response) => {\n\t  try {\n\t    const { forumId } = req.params;\n\t    const forumComments = await gAllForumComments(forumId);\n\t    return res.status(200).json({ forumComments: forumComments });\n\t  } catch (error) {\n\t    console.log(error);\n", "    res.status(400).json({ errors: [\"error occurred\"] });\n\t  }\n\t};\n"]}
{"filename": "src/controllers/activation.link.controller.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { v4 as uuidv4 } from \"uuid\";\n\timport {\n\t  createActivationLink,\n\t  deleteActivationLinkById,\n\t  getActivationLinkById,\n\t} from \"../databases/activation.link.database\";\n\timport { activateUser as aUser, getUserById } from \"../databases/user.database\";\n\timport { sendEmail } from \"../facades/helper\";\n\texport const activateUser = async (req: Request, res: Response) => {\n", "  try {\n\t    const { activationLinkId } = req.body;\n\t    const activationLink = await getActivationLinkById(activationLinkId);\n\t    if (!activationLink) {\n\t      return res.status(404).json({ errors: [\"activation link not found!\"] });\n\t    }\n\t    if (Date.now() > activationLink.expirationDate.getTime()) {\n\t      return res.status(410).json({ errors: [\"activation link expired!\"] });\n\t    }\n\t    if (await aUser(activationLink.userId)) {\n", "      await deleteActivationLinkById(activationLink.id);\n\t    }\n\t    return res\n\t      .status(200)\n\t      .json({ successes: [\"user activated successfully!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: [\"error occurred!\"] });\n\t  }\n\t};\n", "export const generateActivationLink = async (req: Request, res: Response) => {\n\t  try {\n\t    const { userId, activationLinkId } = req.body;\n\t    const user = await getUserById(userId);\n\t    if (!user) {\n\t      return res.status(404).json({ errors: [\"user not found!\"] });\n\t    }\n\t    const activationLink = await createActivationLink({\n\t      id: uuidv4(),\n\t      userId: user.id,\n", "      expirationDate: new Date(Date.now() + 3600 * 1000 * 2),\n\t    });\n\t    if (activationLink && (await sendEmail(user.email, activationLink.id))) {\n\t      await deleteActivationLinkById(activationLinkId);\n\t    }\n\t    return res.status(200).json({ successes: [\"email sent successfully!\"] });\n\t  } catch (error) {\n\t    console.log(error);\n\t    res.status(400).json({ errors: [\"error occurred!\"] });\n\t  }\n", "};\n"]}
{"filename": "src/routes/forum.reply.route.ts", "chunked_list": ["import { Router } from \"express\";\n\timport * as forumReplyController from \"../controllers/forum.reply.controller\";\n\timport {\n\t  bodyEmptyValidation,\n\t  errorValidator,\n\t  paramEmptyValidation,\n\t  paramUUIDValidation,\n\t} from \"../middlewares/validator.middleware\";\n\timport { isDoctor } from \"../middlewares/role.middleware\";\n\tconst router = Router();\n", "router.get(\n\t  \"/:forumCommentId\",\n\t  paramEmptyValidation([\"forumCommentId\"]),\n\t  paramUUIDValidation([\"forumCommentId\"]),\n\t  errorValidator,\n\t  forumReplyController.getAllForumReplies\n\t);\n\trouter.post(\n\t  \"/create\",\n\t  isDoctor,\n", "  bodyEmptyValidation([\"forumCommentId\", \"reply\"]),\n\t  errorValidator,\n\t  forumReplyController.createForumReplies\n\t);\n\texport default router;\n"]}
{"filename": "src/routes/user.route.ts", "chunked_list": ["import { Router } from \"express\";\n\timport * as userController from \"../controllers/user.controller\";\n\timport { uploadProfilePicture } from \"../middlewares/file.upload.middleware\";\n\timport { isAdmin } from \"../middlewares/role.middleware\";\n\timport {\n\t  bodyEmptyValidation,\n\t  errorValidator,\n\t  paramEmptyValidation,\n\t  paramUUIDValidation,\n\t} from \"../middlewares/validator.middleware\";\n", "const router = Router();\n\trouter.get(\n\t  \"/get/:id\",\n\t  paramEmptyValidation([\"id\"]),\n\t  paramUUIDValidation([\"id\"]),\n\t  errorValidator,\n\t  userController.getUserById\n\t);\n\trouter.patch(\n\t  \"/update-profile\",\n", "  bodyEmptyValidation([\"username\", \"name\"]),\n\t  errorValidator,\n\t  userController.updateProfile\n\t);\n\trouter.get(\n\t  \"/fetch\",\n\t  userController.refetch\n\t)\n\trouter.patch(\n\t  \"/update-profile-picture\",\n", "  uploadProfilePicture,\n\t  bodyEmptyValidation([\"profilePicture\"]),\n\t  errorValidator,\n\t  userController.updateProfilePicture\n\t);\n\trouter.patch(\n\t  \"/change-role-doctor\",\n\t  isAdmin,\n\t  bodyEmptyValidation([\"userId\"]),\n\t  errorValidator,\n", "  userController.changeRole\n\t);\n\trouter.get(\"/admin-page\", isAdmin, userController.adminPage);\n\texport default router;\n"]}
{"filename": "src/routes/forum.comment.route.ts", "chunked_list": ["import { Router } from \"express\";\n\timport * as forumCommentController from \"../controllers/forum.comment.controller\";\n\timport { isAuthenticated } from \"../middlewares/auth.middleware\";\n\timport { isDoctor } from \"../middlewares/role.middleware\";\n\timport {\n\t  bodyEmptyValidation,\n\t  errorValidator,\n\t  paramEmptyValidation,\n\t  paramUUIDValidation,\n\t} from \"../middlewares/validator.middleware\";\n", "const router = Router();\n\trouter.get(\n\t  \"/:forumId\",\n\t  paramEmptyValidation([\"forumId\"]),\n\t  paramUUIDValidation([\"forumId\"]),\n\t  errorValidator,\n\t  forumCommentController.getAllForumComments\n\t);\n\trouter.post(\n\t  \"/create\",\n", "  isAuthenticated,\n\t  isDoctor,\n\t  bodyEmptyValidation([\"forumId\", \"comment\"]),\n\t  errorValidator,\n\t  forumCommentController.createForumComment\n\t);\n\texport default router;\n"]}
{"filename": "src/routes/forum.route.ts", "chunked_list": ["import { Router } from 'express';\n\timport * as forumController from '../controllers/forum.controller';\n\timport { isAuthenticated } from '../middlewares/auth.middleware';\n\timport { uploadForum } from '../middlewares/file.upload.middleware';\n\timport { isForumCreator } from '../middlewares/forum.middleware';\n\timport { isAdmin } from '../middlewares/role.middleware';\n\timport {\n\t  bodyEmptyValidation,\n\t  bodyUUIDValidation,\n\t  errorValidator,\n", "  paramEmptyValidation,\n\t  paramUUIDValidation,\n\t} from '../middlewares/validator.middleware';\n\tconst router = Router();\n\trouter.get('/newest', forumController.newestForumPagination);\n\trouter.get('/top', forumController.topForumPagination);\n\trouter.get(\n\t  '/get/:forumId',\n\t  paramEmptyValidation(['forumId']),\n\t  paramUUIDValidation(['forumId']),\n", "  errorValidator,\n\t  forumController.getForum\n\t);\n\trouter.get(\n\t  '/get-all',\n\t  isAuthenticated,\n\t  isAdmin,\n\t  errorValidator,\n\t  forumController.getAll\n\t);\n", "router.post(\n\t  '/create',\n\t  isAuthenticated,\n\t  uploadForum,\n\t  bodyEmptyValidation(['title', 'description']),\n\t  errorValidator,\n\t  forumController.createForum\n\t);\n\trouter.patch(\n\t  '/seen',\n", "  isAuthenticated,\n\t  bodyEmptyValidation(['forumId']),\n\t  bodyUUIDValidation(['forumId']),\n\t  errorValidator,\n\t  isForumCreator,\n\t  forumController.forumSeen\n\t);\n\trouter.patch(\n\t  '/update',\n\t  isAuthenticated,\n", "  bodyEmptyValidation(['forumId', 'title', 'description']),\n\t  bodyUUIDValidation(['forumId']),\n\t  errorValidator,\n\t  isForumCreator,\n\t  forumController.updateForum\n\t);\n\trouter.delete(\n\t  '/delete',\n\t  isAuthenticated,\n\t  bodyEmptyValidation(['forumId']),\n", "  bodyUUIDValidation(['forumId']),\n\t  errorValidator,\n\t  isForumCreator,\n\t  forumController.deleteForum\n\t);\n\texport default router;\n"]}
{"filename": "src/routes/static.file.route.ts", "chunked_list": ["import express, { Router } from \"express\";\n\timport path from \"path\";\n\tconst router = Router();\n\trouter.use(\n\t  \"/profile-picture\",\n\t  express.static(path.join(__dirname, \"..\", \"public\", \"profilePicture\"))\n\t);\n\trouter.use(\n\t  \"/forum\",\n\t  express.static(path.join(__dirname, \"..\", \"public\", \"forum\"))\n", ");\n\texport default router;\n"]}
{"filename": "src/routes/activation.link.route.ts", "chunked_list": ["import { Router } from \"express\";\n\timport * as activationLinkController from \"../controllers/activation.link.controller\";\n\timport {\n\t  bodyEmptyValidation,\n\t  bodyUUIDValidation,\n\t  errorValidator,\n\t} from \"../middlewares/validator.middleware\";\n\tconst router = Router();\n\trouter.patch(\n\t  \"/activate\",\n", "  bodyEmptyValidation([\"activationLinkId\"]),\n\t  bodyUUIDValidation([\"activationLinkId\"]),\n\t  errorValidator,\n\t  activationLinkController.activateUser\n\t);\n\trouter.post(\n\t  \"/generate\",\n\t  bodyEmptyValidation([\"userId\", \"activationLinkId\"]),\n\t  bodyUUIDValidation([\"userId\", \"activationLinkId\"]),\n\t  errorValidator,\n", "  activationLinkController.generateActivationLink\n\t);\n\texport default router;\n"]}
{"filename": "src/routes/index.ts", "chunked_list": ["import { Router } from \"express\";\n\timport { isAuthenticated } from \"../middlewares/auth.middleware\";\n\timport activationLinkRouter from \"./activation.link.route\";\n\timport authRouter from \"./auth.route\";\n\timport forumCommentRouter from \"./forum.comment.route\";\n\timport forumReplyRouter from \"./forum.reply.route\";\n\timport forumRouter from \"./forum.route\";\n\timport staticFileRouter from \"./static.file.route\";\n\timport userRouter from \"./user.route\";\n\tconst router = Router();\n", "router.use(\"/users\", isAuthenticated, userRouter);\n\trouter.use(\"/auth\", authRouter);\n\trouter.use(\"/activation-links\", activationLinkRouter);\n\trouter.use(\"/forums\", forumRouter);\n\trouter.use(\"/forum-comments\", forumCommentRouter);\n\trouter.use(\"/forum-replies\", isAuthenticated, forumReplyRouter);\n\trouter.use(\"/public\", staticFileRouter);\n\texport default router;\n"]}
{"filename": "src/routes/auth.route.ts", "chunked_list": ["import { Router } from 'express';\n\timport * as authController from '../controllers/auth.controller';\n\timport {\n\t  bodyEmailValidation,\n\t  bodyEmptyValidation,\n\t  bodyLengthValidation,\n\t  cookieEmptyValidation,\n\t  errorValidator,\n\t} from '../middlewares/validator.middleware';\n\tconst router = Router();\n", "router.post(\n\t  '/login',\n\t  bodyEmptyValidation(['email', 'password']),\n\t  bodyEmailValidation(['email']),\n\t  errorValidator,\n\t  authController.login\n\t);\n\trouter.post(\n\t  '/register',\n\t  bodyEmptyValidation(['email', 'name', 'username', 'password']),\n", "  bodyEmailValidation(['email']),\n\t  bodyLengthValidation(['password'], [8], [16]),\n\t  errorValidator,\n\t  authController.register\n\t);\n\trouter.delete(\n\t  '/logout',\n\t  cookieEmptyValidation(['refreshToken']),\n\t  errorValidator,\n\t  authController.logout\n", ");\n\trouter.get(\n\t  '/token',\n\t  cookieEmptyValidation(['refreshToken']),\n\t  errorValidator,\n\t  authController.refreshToken\n\t);\n\trouter.post(\n\t  '/login-google-token',\n\t  bodyEmptyValidation(['token']),\n", "  errorValidator,\n\t  authController.loginGoogleToken\n\t);\n\texport default router;\n"]}
