{"filename": "test/app.e2e-spec.ts", "chunked_list": ["import { Test, TestingModule } from '@nestjs/testing';\n\timport { INestApplication } from '@nestjs/common';\n\timport * as request from 'supertest';\n\timport { AppModule } from './../src/app.module';\n\tdescribe('AppController (e2e)', () => {\n\t  let app: INestApplication;\n\t  beforeEach(async () => {\n\t    const moduleFixture: TestingModule = await Test.createTestingModule({\n\t      imports: [AppModule],\n\t    }).compile();\n", "    app = moduleFixture.createNestApplication();\n\t    await app.init();\n\t  });\n\t  it('/ (GET)', () => {\n\t    return request(app.getHttpServer())\n\t      .get('/')\n\t      .expect(200)\n\t      .expect('Hello World!');\n\t  });\n\t});\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\n\timport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\timport { AppModule } from './app.module';\n\tasync function bootstrap() {\n\t  const app = await NestFactory.create(AppModule);\n\t  app.enableCors();\n\t  const config = new DocumentBuilder().addBearerAuth()\n\t    //for swagger config\n\t    .setTitle('Leave-Attendence-Record-System-Be-Test')\n\t    .setDescription('CS619 Final Year Project')\n", "    .setVersion('1.0')\n\t    .build();\n\t  const document = SwaggerModule.createDocument(app, config);\n\t  SwaggerModule.setup('api', app, document);\n\t  await app.listen(3000);\n\t}\n\tbootstrap();\n"]}
{"filename": "src/app.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\n\t@Injectable()\n\texport class AppService {\n\t  getHello(): string {\n\t    return 'api online';\n\t  }\n\t}\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\timport { AppController } from './app.controller';\n\timport { AppService } from './app.service';\n\timport { LeaveModule } from './leave/leave.module';\n\timport { Leave } from './leave/leave.entity';\n\timport { Allowed } from './leave/allowed.entity';\n\t//for Sql Db\n\tconst DB = TypeOrmModule.forRoot({\n\t  type: 'mysql',\n", "  host: 'localhost',\n\t  port: 3306,\n\t  username: 'root',\n\t  password: '',\n\t  database: 'leaveChunk',\n\t  entities: [Leave, Allowed],\n\t  synchronize: true,\n\t});\n\t// all modules imports here\n\t@Module({\n", "  imports: [DB, LeaveModule, ],\n\t  controllers: [AppController],\n\t  providers: [AppService],\n\t})\n\texport class AppModule {}\n"]}
{"filename": "src/app.controller.ts", "chunked_list": ["import { Controller, Get } from '@nestjs/common';\n\timport { AppService } from './app.service';\n\t@Controller()\n\texport class AppController {\n\t  constructor(private readonly appService: AppService) {}\n\t  @Get()\n\t  getHello(): string {\n\t    return this.appService.getHello();\n\t  }\n\t}\n"]}
{"filename": "src/leave/leave.controller.ts", "chunked_list": ["import { Body, Controller, Post} from '@nestjs/common';\n\timport { Get } from '@nestjs/common/decorators';\n\timport { ApiTags } from '@nestjs/swagger';\n\timport { AllowedLeaves, LeaveApplication } from './leave.model';\n\timport { LeaveService } from './leave.service';\n\t@ApiTags('Leave')\n\t@Controller('leave')\n\texport class LeaveController {\n\t  constructor(private readonly leaveService: LeaveService) {}\n\t  @Post('/allowedLeaves')\n", "  async allowedLeaves(@Body() data: AllowedLeaves) {\n\t    return await this.leaveService.allowedLeaves(data);\n\t  }\n\t  @Get()\n\t  async Leaves() {\n\t    return await this.leaveService.Leaves();\n\t  }\n\t  @Post('/application')\n\t  async application(@Body() data: LeaveApplication) {\n\t    return await this.leaveService.application(data);\n", "  }\n\t}\n"]}
{"filename": "src/leave/leave.dto.ts", "chunked_list": ["export interface ILeaveApplication {\n\t  toDate: Date;\n\t  fromDate: Date;\n\t  leaveType: string;\n\t  descriptionLeave: string;\n\t  reason: string;\n\t}\n\texport interface IAllowedLeaves {\n\t  leaveType: string;\n\t  allowedLeaves: number;\n", "}\n\texport interface ILeaveApplicationResponse {\n\t  id: string;\n\t  employeeId: string;\n\t  applcationDate: Date;\n\t  allowedLeaves: number;\n\t  consumedLeaves: number;\n\t  availableLeaves: number;\n\t  description: string;\n\t  leaveDates: string;\n", "  status: string;\n\t}\n"]}
{"filename": "src/leave/allowed.entity.ts", "chunked_list": ["import { Entity, Column, PrimaryGeneratedColumn, BaseEntity } from 'typeorm';\n\t@Entity()\n\texport class Allowed extends BaseEntity {\n\t  @PrimaryGeneratedColumn()\n\t  id: string;\n\t  @Column()\n\t  leaveType: string;\n\t  @Column()\n\t  allowedLeaves: number;\n\t  @Column()\n", "  consumedLeaves: number;\n\t  @Column()\n\t  remainingLeaves: number;\n\t}\n"]}
{"filename": "src/leave/leave.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { LeaveController } from './leave.controller';\n\timport { LeaveService } from './leave.service';\n\t@Module({\n\t  controllers: [LeaveController],\n\t  providers: [LeaveService]\n\t})\n\texport class LeaveModule {}\n"]}
{"filename": "src/leave/leave.model.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\n\timport {\n\t  IsDate,\n\t  IsNotEmpty,\n\t  IsNumber,\n\t  IsString\n\t} from 'class-validator';\n\timport { IAllowedLeaves, ILeaveApplication } from './leave.dto';\n\texport class LeaveApplication implements ILeaveApplication {\n\t  @ApiProperty()\n", "  @IsNotEmpty()\n\t  @IsDate()\n\t  toDate: Date;\n\t  @ApiProperty()\n\t  @IsNotEmpty()\n\t  @IsDate()\n\t  fromDate: Date;\n\t  @ApiProperty()\n\t  @IsNotEmpty()\n\t  @IsString()\n", "  leaveType: string;\n\t  @IsString()\n\t  @ApiProperty({ default: 'Casual' })\n\t  @IsNotEmpty()\n\t  descriptionLeave: string;\n\t  @IsString()\n\t  @ApiProperty()\n\t  @IsNotEmpty()\n\t  reason: string;\n\t}\n", "export class AllowedLeaves implements IAllowedLeaves {\n\t  @ApiProperty()\n\t  @IsNotEmpty()\n\t  @IsString()\n\t  leaveType: string;\n\t  @ApiProperty()\n\t  @IsNotEmpty()\n\t  @IsNumber()\n\t  allowedLeaves: number;\n\t}\n"]}
{"filename": "src/leave/leave.service.ts", "chunked_list": ["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\n\timport { Allowed } from './allowed.entity';\n\timport { IAllowedLeaves, ILeaveApplication } from './leave.dto';\n\timport { Leave } from './leave.entity';\n\t@Injectable()\n\texport class LeaveService {\n\t  async allowedLeaves(data: IAllowedLeaves) {\n\t    //to get the value between these three\n\t    if (\n\t      data.leaveType !== 'earnedLeaves' &&\n", "      data.leaveType !== 'casualLeaves' &&\n\t      data.leaveType !== 'compensatoryLeaves'\n\t    ) {\n\t      throw new HttpException(\n\t        'you must enter the type of leave between casualLeaves , compensatoryLeaves &  earnedLeaves',\n\t        HttpStatus.BAD_REQUEST,\n\t      );\n\t    }\n\t    const application = new Allowed();\n\t    application.leaveType = data.leaveType;\n", "    application.allowedLeaves = data.allowedLeaves;\n\t    application.remainingLeaves = data.allowedLeaves;\n\t    await application.save();\n\t    return application;\n\t  }\n\t  async Leaves() {\n\t    const allowedLeavesData = await Allowed.find();\n\t    return allowedLeavesData;\n\t  }\n\t  async application(data: ILeaveApplication) {\n", "    // to get number of days\n\t    let test = data.toDate.toString().split('T'); //T replace\n\t    let test2 = test[0].toString().split('-');\n\t    let date1 = test2[2];\n\t    let test3 = data.fromDate.toString().split('T'); //T replace\n\t    let test4 = test3[0].toString().split('-');\n\t    let date2 = test4[2];\n\t    let diff = parseInt(date2) - parseInt(date1) + 1;\n\t    //updating consumed leaves\n\t    if (data.descriptionLeave == 'Casual') {\n", "      const Leavesdata = await Allowed.findOneBy({ leaveType: 'casualLeaves' });\n\t      //to check remaining leaves is not zero\n\t      if (Leavesdata.remainingLeaves - diff < 0) {\n\t        throw new HttpException(\n\t          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST\n\t        );\n\t      }\n\t      //updating data\n\t      Leavesdata.consumedLeaves += diff;\n\t      Leavesdata.remainingLeaves =\n", "        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n\t      await Leavesdata.save();\n\t    } else if (data.descriptionLeave == 'Compensatory') {\n\t      const Leavesdata = await Allowed.findOneBy({\n\t        leaveType: 'compensatoryLeaves',\n\t      });\n\t      //to check remaining leaves is not zero\n\t      if (Leavesdata.remainingLeaves - diff < 0) {\n\t        throw new HttpException(\n\t          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST,\n", "        );\n\t      }\n\t      //updating data\n\t      Leavesdata.consumedLeaves += diff;\n\t      Leavesdata.remainingLeaves =\n\t        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n\t      await Leavesdata.save();\n\t    } else {\n\t      const Leavesdata = await Allowed.findOneBy({ leaveType: 'earnedLeaves' });\n\t      //to check remaining leaves is not zero\n", "      if (Leavesdata.remainingLeaves - diff < 0) {\n\t        throw new HttpException(\n\t          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST,\n\t        );\n\t      }\n\t      //updating data\n\t      Leavesdata.consumedLeaves += diff;\n\t      Leavesdata.remainingLeaves =\n\t        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n\t      await Leavesdata.save();\n", "    }\n\t    //creation of new application\n\t    const leave = new Leave();\n\t    leave.toDate = data.toDate;\n\t    leave.fromDate = data.fromDate;\n\t    leave.leaveType = data.leaveType;\n\t    leave.descriptionLeave = data.descriptionLeave;\n\t    leave.reason = data.reason;\n\t    await leave.save();\n\t    const allowedLeavesData = await Allowed.find();\n", "    return {\n\t      ...leave,\n\t      leaveinfo: allowedLeavesData,\n\t    };\n\t  }\n\t}\n"]}
{"filename": "src/leave/leave.entity.ts", "chunked_list": ["import { Entity, Column, PrimaryGeneratedColumn, BaseEntity } from 'typeorm';\n\t@Entity()\n\texport class Leave extends BaseEntity {\n\t  @PrimaryGeneratedColumn('uuid')\n\t  id: string;\n\t  @Column()\n\t  toDate: Date;\n\t  @Column()\n\t  fromDate: Date;\n\t  @Column()\n", "  leaveType: string;\n\t  @Column()\n\t  descriptionLeave: string;\n\t  @Column()\n\t  reason: string;\n\t}\n"]}
