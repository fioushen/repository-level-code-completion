{"filename": "test/integration/setup.ts", "chunked_list": ["import * as nock from 'nock'\n\t// Disable outgoing HTTP requests from the tests. This will ensure we never hit\n\t// a downstream service during the tests by mistake.\n\tnock.disableNetConnect()\n"]}
{"filename": "test/integration/fixture/exchange-host.ts", "chunked_list": ["export const LATEST_RATES_RESPONSE = {\n\t  success: true,\n\t  base: 'EUR',\n\t  date: '2023-05-31',\n\t  rates: {\n\t    USD: 1.070252,\n\t    CLP: 860.693891,\n\t    BRL: 5.386883\n\t  }\n\t}\n"]}
{"filename": "test/integration/client/exchange-host.client.test.ts", "chunked_list": ["import { HttpStatus } from '@nestjs/common'\n\timport * as nock from 'nock'\n\timport { ExchangeHostClient } from '../../../src/client/exchange-host.client'\n\timport { LATEST_RATES_RESPONSE } from '../fixture/exchange-host'\n\timport { Test, TestingModule } from '@nestjs/testing'\n\timport { HttpModule } from '@nestjs/axios'\n\timport { ZodError } from 'zod'\n\tdescribe('ExchangeHostClient', () => {\n\t  let client: ExchangeHostClient\n\t  beforeEach(async () => {\n", "    const module: TestingModule = await Test.createTestingModule({\n\t      imports: [HttpModule],\n\t      providers: [ExchangeHostClient]\n\t    }).compile()\n\t    client = module.get<ExchangeHostClient>(ExchangeHostClient)\n\t  })\n\t  describe('getLatestRates', () => {\n\t    test('resolves with the latest rates', async () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n\t        .get('/latest')\n", "        .query({\n\t          base: 'EUR'\n\t        })\n\t        .reply(HttpStatus.OK, LATEST_RATES_RESPONSE)\n\t      const rates = await client.getLatestRates('EUR')\n\t      expect(rates).toEqual(LATEST_RATES_RESPONSE.rates)\n\t    })\n\t    test('coerces currency code from lower to upper case', async () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n\t        .get('/latest')\n", "        .query({\n\t          base: 'EUR'\n\t        })\n\t        .reply(HttpStatus.OK, {\n\t          ...LATEST_RATES_RESPONSE,\n\t          base: 'EUR',\n\t          rates: {\n\t            ...LATEST_RATES_RESPONSE.rates,\n\t            foo: 1.2\n\t          }\n", "        })\n\t      const rates = await client.getLatestRates('EUR')\n\t      expect(rates.FOO).toEqual(1.2)\n\t    })\n\t    test('throws an exception when rates is invalid', () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n\t        .get('/latest')\n\t        .query({\n\t          base: 'EUR'\n\t        })\n", "        .reply(HttpStatus.OK, {\n\t          ...LATEST_RATES_RESPONSE,\n\t          rates: undefined\n\t        })\n\t      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n\t    })\n\t    test('throws an exception when currency code is bigger than 3 characters', () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n\t        .get('/latest')\n\t        .query({\n", "          base: 'EUR'\n\t        })\n\t        .reply(HttpStatus.OK, {\n\t          ...LATEST_RATES_RESPONSE,\n\t          base: 'FOOBAR',\n\t          rates: {\n\t            ...LATEST_RATES_RESPONSE.rates,\n\t            FOOBAR: 1.2\n\t          }\n\t        })\n", "      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n\t    })\n\t    test('throws an exception when currency code is smaller than 3 characters', () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n\t        .get('/latest')\n\t        .query({\n\t          base: 'EUR'\n\t        })\n\t        .reply(HttpStatus.OK, {\n\t          ...LATEST_RATES_RESPONSE,\n", "          base: 'EUR',\n\t          rates: {\n\t            ...LATEST_RATES_RESPONSE.rates,\n\t            FO: 1.2\n\t          }\n\t        })\n\t      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n\t    })\n\t    test('throws an exception when rate amount is less than zero', () => {\n\t      nock(ExchangeHostClient.BASE_URL)\n", "        .get('/latest')\n\t        .query({\n\t          base: 'EUR'\n\t        })\n\t        .reply(HttpStatus.OK, {\n\t          ...LATEST_RATES_RESPONSE,\n\t          base: 'EUR',\n\t          rates: {\n\t            ...LATEST_RATES_RESPONSE.rates,\n\t            FOO: -99\n", "          }\n\t        })\n\t      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n\t    })\n\t  })\n\t})\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core'\n\timport { AppModule } from './app.module'\n\tasync function bootstrap() {\n\t  const app = await NestFactory.create(AppModule)\n\t  await app.listen(3000)\n\t}\n\tbootstrap()\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common'\n\timport { ExchangeRateController } from './controller/exchange-rate.controller'\n\timport { ExchangeRateService } from './service/exchange-rate.service'\n\timport { ExchangeHostClient } from './client/exchange-host.client'\n\timport { HttpModule } from '@nestjs/axios'\n\timport { HostExchangeRateRepository } from './repository/host-exchange-rate.repository'\n\timport { ExchangeRateRepositoryToken } from './repository/exchange-rate.repository'\n\timport { FreeCurrencyConversionExchangeRateRepository } from './repository/free-currency-conversion-exchange-rate.repository'\n\timport { FreeCurrencyConversionClient } from './client/free-currency-conversion.client'\n\timport { ConfigModule } from '@nestjs/config'\n", "import { RedundantExchangeRateRepository } from './repository/redundant-exchange-rate.repository'\n\t@Module({\n\t  imports: [ConfigModule.forRoot(), HttpModule],\n\t  controllers: [ExchangeRateController],\n\t  providers: [\n\t    ExchangeRateService,\n\t    ExchangeHostClient,\n\t    FreeCurrencyConversionClient,\n\t    HostExchangeRateRepository,\n\t    FreeCurrencyConversionExchangeRateRepository,\n", "    RedundantExchangeRateRepository,\n\t    {\n\t      provide: ExchangeRateRepositoryToken,\n\t      useExisting: RedundantExchangeRateRepository\n\t    }\n\t  ]\n\t})\n\texport class AppModule {}\n"]}
{"filename": "src/repository/free-currency-conversion-exchange-rate.repository.ts", "chunked_list": ["import { ExchangeRateRepository } from './exchange-rate.repository'\n\timport { Inject } from '@nestjs/common'\n\timport { FreeCurrencyConversionClient } from 'src/client/free-currency-conversion.client'\n\texport class FreeCurrencyConversionExchangeRateRepository\n\t  implements ExchangeRateRepository\n\t{\n\t  constructor(\n\t    @Inject(FreeCurrencyConversionClient) private client: FreeCurrencyConversionClient\n\t  ) {}\n\t  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n", "    const rates = await this.client.getLatestRates(fromCurrency.toUpperCase())\n\t    return rates[toCurrency.toUpperCase()]\n\t  }\n\t}\n"]}
{"filename": "src/repository/redundant-exchange-rate.repository.ts", "chunked_list": ["import { Inject, Injectable, Logger } from '@nestjs/common'\n\timport { ExchangeRateRepository } from './exchange-rate.repository'\n\timport { FreeCurrencyConversionExchangeRateRepository } from './free-currency-conversion-exchange-rate.repository'\n\timport { HostExchangeRateRepository } from './host-exchange-rate.repository'\n\t@Injectable()\n\texport class RedundantExchangeRateRepository implements ExchangeRateRepository {\n\t  private logger = new Logger(RedundantExchangeRateRepository.name)\n\t  constructor(\n\t    @Inject(FreeCurrencyConversionExchangeRateRepository)\n\t    private freeCurrencyConversionExchangeRateRepository: FreeCurrencyConversionExchangeRateRepository,\n", "    @Inject(HostExchangeRateRepository)\n\t    private hostExchangeRateRepository: HostExchangeRateRepository\n\t  ) {}\n\t  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n\t    this.logger.log({\n\t      message: 'Get spot price',\n\t      fromCurrency,\n\t      toCurrency\n\t    })\n\t    try {\n", "      const spotPrice =\n\t        await this.freeCurrencyConversionExchangeRateRepository.getSpotPrice(\n\t          fromCurrency,\n\t          toCurrency\n\t        )\n\t      this.logger.log({\n\t        message: 'Successfully got spot price',\n\t        fromCurrency,\n\t        toCurrency,\n\t        spotPrice\n", "      })\n\t      return spotPrice\n\t    } catch (error) {\n\t      this.logger.log({\n\t        message: 'Failed to get spot price. Falling back to another exchange rate',\n\t        fromCurrency,\n\t        toCurrency,\n\t        error\n\t      })\n\t      return this.hostExchangeRateRepository.getSpotPrice(fromCurrency, toCurrency)\n", "    }\n\t  }\n\t}\n"]}
{"filename": "src/repository/exchange-rate.repository.ts", "chunked_list": ["export interface ExchangeRateRepository {\n\t  getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number>\n\t}\n\texport const ExchangeRateRepositoryToken = Symbol('ExchangeRateRepository')\n"]}
{"filename": "src/repository/host-exchange-rate.repository.ts", "chunked_list": ["import { Inject, Injectable } from '@nestjs/common'\n\timport { ExchangeHostClient } from 'src/client/exchange-host.client'\n\timport { ExchangeRateRepository } from './exchange-rate.repository'\n\t@Injectable()\n\texport class HostExchangeRateRepository implements ExchangeRateRepository {\n\t  constructor(@Inject(ExchangeHostClient) private client: ExchangeHostClient) {}\n\t  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n\t    const rates = await this.client.getLatestRates(fromCurrency.toUpperCase())\n\t    return rates[toCurrency.toUpperCase()]\n\t  }\n", "}\n"]}
{"filename": "src/controller/exchange-rate.controller.ts", "chunked_list": ["import { Controller, Get, Inject, Query } from '@nestjs/common'\n\timport { ExchangeRateService } from 'src/service/exchange-rate.service'\n\t@Controller('exchange-rate')\n\texport class ExchangeRateController {\n\t  constructor(@Inject(ExchangeRateService) private service: ExchangeRateService) {}\n\t  @Get('/spot-price')\n\t  async getSpotPrice(\n\t    @Query('fromCurrency') fromCurrency: string,\n\t    @Query('toCurrency') toCurrency: string\n\t  ): Promise<{ spotPrice: number }> {\n", "    const spotPrice = await this.service.getSpotPrice(fromCurrency, toCurrency)\n\t    return { spotPrice }\n\t  }\n\t}\n"]}
{"filename": "src/client/exchange-host.client.ts", "chunked_list": ["import { HttpService } from '@nestjs/axios'\n\timport { Inject, Injectable, Logger } from '@nestjs/common'\n\timport { lastValueFrom, map, tap } from 'rxjs'\n\timport { z } from 'zod'\n\tconst CurrencyCode = z.string().min(3).max(3).toUpperCase()\n\tconst RateAmount = z.number().min(0)\n\tconst Rates = z.record(CurrencyCode, RateAmount)\n\tconst LatestResponse = z.object({\n\t  success: z.boolean(),\n\t  base: CurrencyCode,\n", "  date: z.string(),\n\t  rates: Rates\n\t})\n\ttype Rates = z.infer<typeof Rates>\n\texport type LatestResponse = z.infer<typeof LatestResponse>\n\t@Injectable()\n\texport class ExchangeHostClient {\n\t  private logger = new Logger(ExchangeHostClient.name)\n\t  static BASE_URL = 'https://api.exchangerate.host'\n\t  constructor(@Inject(HttpService) private http: HttpService) {}\n", "  getLatestRates(baseCurrency: string): Promise<Rates> {\n\t    this.logger.log({\n\t      message: 'Fetching latest rates',\n\t      baseCurrency\n\t    })\n\t    return lastValueFrom(\n\t      this.http\n\t        .request<unknown>({\n\t          method: 'GET',\n\t          url: `${ExchangeHostClient.BASE_URL}/latest`,\n", "          params: {\n\t            base: baseCurrency.toUpperCase()\n\t          }\n\t        })\n\t        .pipe(\n\t          map((response) => LatestResponse.parse(response.data)),\n\t          map((data) => data.rates),\n\t          tap((rates) =>\n\t            this.logger.log({\n\t              message: 'Received latest rates',\n", "              baseCurrency,\n\t              rates\n\t            })\n\t          )\n\t        )\n\t    )\n\t  }\n\t}\n"]}
{"filename": "src/client/free-currency-conversion.client.ts", "chunked_list": ["import { HttpService } from '@nestjs/axios'\n\timport { Inject, Injectable, Logger } from '@nestjs/common'\n\timport { ConfigService } from '@nestjs/config'\n\timport { lastValueFrom, map, tap } from 'rxjs'\n\ttype CurrencyCode = string\n\ttype Rates = Record<CurrencyCode, number>\n\ttype LatestRatesResponse = {\n\t  data: Rates\n\t}\n\t@Injectable()\n", "export class FreeCurrencyConversionClient {\n\t  private logger = new Logger(FreeCurrencyConversionClient.name)\n\t  static BASE_URL = 'https://api.freecurrencyapi.com/v1'\n\t  constructor(\n\t    @Inject(HttpService) private http: HttpService,\n\t    @Inject(ConfigService) private config: ConfigService\n\t  ) {}\n\t  getLatestRates(baseCurrency: string): Promise<Rates> {\n\t    this.logger.log({\n\t      message: 'Fetching latest rates',\n", "      baseCurrency\n\t    })\n\t    return lastValueFrom(\n\t      this.http\n\t        .request<LatestRatesResponse>({\n\t          method: 'GET',\n\t          url: `${FreeCurrencyConversionClient.BASE_URL}/latest`,\n\t          params: {\n\t            base_currency: baseCurrency.toUpperCase(),\n\t            apikey: this.config.get<string>('FREE_CURRENCY_CONVERSION_API_KEY')\n", "          }\n\t        })\n\t        .pipe(\n\t          map((response) => response.data.data),\n\t          tap((rates) =>\n\t            this.logger.log({\n\t              message: 'Received latest rates',\n\t              baseCurrency,\n\t              rates\n\t            })\n", "          )\n\t        )\n\t    )\n\t  }\n\t}\n"]}
{"filename": "src/service/exchange-rate.service.ts", "chunked_list": ["import { Inject, Injectable } from '@nestjs/common'\n\timport {\n\t  ExchangeRateRepository,\n\t  ExchangeRateRepositoryToken\n\t} from 'src/repository/exchange-rate.repository'\n\t@Injectable()\n\texport class ExchangeRateService {\n\t  constructor(\n\t    @Inject(ExchangeRateRepositoryToken) private repository: ExchangeRateRepository\n\t  ) {}\n", "  getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n\t    return this.repository.getSpotPrice(fromCurrency, toCurrency)\n\t  }\n\t}\n"]}
