{"filename": "src/index.ts", "chunked_list": ["#!/usr/bin/env node\n\timport { program } from \"commander\"\n\timport create from \"./commands/create.js\"\n\tprogram\n\t  .description(\"Create a new Medusa project\")\n\t  .option(\"--repo-url <url>\", \"URL of repository to use to setup project.\")\n\t  .option(\"--seed\", \"Seed the created database with demo data.\")\n\t  .parse()\n\tcreate(program.opts())\n"]}
{"filename": "src/commands/create.ts", "chunked_list": ["import inquirer from \"inquirer\"\n\timport slugifyType from \"slugify\"\n\timport chalk from \"chalk\"\n\timport pg from \"pg\"\n\timport createDb from \"../utils/create-db.js\"\n\timport postgresClient from \"../utils/postgres-client.js\"\n\timport cloneRepo from \"../utils/clone-repo.js\"\n\timport prepareProject from \"../utils/prepare-project.js\"\n\timport startMedusa from \"../utils/start-medusa.js\"\n\timport open from \"open\"\n", "import waitOn from \"wait-on\"\n\timport formatConnectionString from \"../utils/format-connection-string.js\"\n\timport ora from \"ora\"\n\timport fs from \"fs\"\n\timport { nanoid } from \"nanoid\"\n\timport isEmailImported from \"validator/lib/isEmail.js\"\n\timport logMessage from \"../utils/log-message.js\"\n\timport onProcessTerminated from \"../utils/on-process-terminated.js\"\n\timport createAbortController, {\n\t  isAbortError,\n", "} from \"../utils/create-abort-controller.js\"\n\tconst slugify = slugifyType.default\n\tconst isEmail = isEmailImported.default\n\ttype CreateOptions = {\n\t  repoUrl?: string\n\t  seed?: boolean\n\t}\n\texport default async ({ repoUrl = \"\", seed }: CreateOptions) => {\n\t  const abortController = createAbortController()\n\t  const { projectName } = await inquirer.prompt([\n", "    {\n\t      type: \"input\",\n\t      name: \"projectName\",\n\t      message: \"What's the name of your project?\",\n\t      default: \"my-medusa-store\",\n\t      filter: (input) => {\n\t        return slugify(input)\n\t      },\n\t      validate: (input) => {\n\t        if (!input.length) {\n", "          return \"Please enter a project name\"\n\t        }\n\t        return fs.existsSync(input) && fs.lstatSync(input).isDirectory()\n\t          ? \"A directory already exists with the same name. Please enter a different project name.\"\n\t          : true\n\t      },\n\t    },\n\t  ])\n\t  let client: pg.Client | undefined\n\t  let dbConnectionString = \"\"\n", "  let postgresUsername = \"postgres\"\n\t  let postgresPassword = \"\"\n\t  // try to log in with default db username and password\n\t  try {\n\t    client = await postgresClient({\n\t      user: postgresUsername,\n\t      password: postgresPassword,\n\t    })\n\t  } catch (e) {\n\t    // ask for the user's credentials\n", "    const answers = await inquirer.prompt([\n\t      {\n\t        type: \"input\",\n\t        name: \"postgresUsername\",\n\t        message: \"Enter your Postgres username\",\n\t        default: \"postgres\",\n\t        validate: (input) => {\n\t          return typeof input === \"string\" && input.length > 0\n\t        },\n\t      },\n", "      {\n\t        type: \"password\",\n\t        name: \"postgresPassword\",\n\t        message: \"Enter your Postgres password\",\n\t      },\n\t    ])\n\t    postgresUsername = answers.postgresUsername\n\t    postgresPassword = answers.postgresPassword\n\t    try {\n\t      client = await postgresClient({\n", "        user: postgresUsername,\n\t        password: postgresPassword,\n\t      })\n\t    } catch (e) {\n\t      logMessage({\n\t        message:\n\t          \"Couldn't connect to PostgreSQL. Make sure you have PostgreSQL installed and the credentials you provided are correct.\\n\\n\" +\n\t          \"You can learn how to install PostgreSQL here: https://docs.medusajs.com/development/backend/prepare-environment#postgresql\",\n\t        type: \"error\",\n\t      })\n", "    }\n\t  }\n\t  const { adminEmail } = await inquirer.prompt([\n\t    {\n\t      type: \"input\",\n\t      name: \"adminEmail\",\n\t      message: \"Enter an email for your admin dashboard user\",\n\t      default: !seed ? \"admin@medusa-test.com\" : undefined,\n\t      validate: (input) => {\n\t        return typeof input === \"string\" && input.length > 0 && isEmail(input)\n", "          ? true\n\t          : \"Please enter a valid email\"\n\t      },\n\t    },\n\t  ])\n\t  const spinner = ora(chalk.white(\"Setting up project\")).start()\n\t  onProcessTerminated(() => spinner.stop())\n\t  // clone repository\n\t  try {\n\t    await cloneRepo({\n", "      directoryName: projectName,\n\t      repoUrl,\n\t      abortController,\n\t    })\n\t  } catch (e) {\n\t    if (isAbortError(e)) {\n\t      process.exit()\n\t    }\n\t    logMessage({\n\t      message: `An error occurred while setting up your project: ${e}`,\n", "      type: \"error\",\n\t    })\n\t  }\n\t  spinner.succeed(chalk.green(\"Created project directory\")).start()\n\t  if (client) {\n\t    spinner.text = chalk.white(\"Creating database...\")\n\t    const dbName = `medusa-${nanoid(4)}`\n\t    // create postgres database\n\t    try {\n\t      await createDb({\n", "        client,\n\t        db: dbName,\n\t      })\n\t    } catch (e) {\n\t      logMessage({\n\t        message: `An error occurred while trying to create your database: ${e}`,\n\t        type: \"error\",\n\t      })\n\t    }\n\t    // format connection string\n", "    dbConnectionString = formatConnectionString({\n\t      user: postgresUsername,\n\t      password: postgresPassword,\n\t      host: client.host,\n\t      db: dbName,\n\t    })\n\t    spinner.succeed(chalk.green(`Database ${dbName} created`)).start()\n\t  }\n\t  spinner.text = chalk.white(\"Preparing project...\")\n\t  // prepare project\n", "  let inviteToken: string | undefined = undefined\n\t  try {\n\t    inviteToken = await prepareProject({\n\t      directory: projectName,\n\t      dbConnectionString,\n\t      admin: {\n\t        email: adminEmail,\n\t      },\n\t      seed,\n\t      spinner,\n", "      abortController,\n\t    })\n\t  } catch (e: any) {\n\t    if (isAbortError(e)) {\n\t      process.exit()\n\t    }\n\t    logMessage({\n\t      message: `An error occurred while preparing project: ${e}`,\n\t      type: \"error\",\n\t    })\n", "  }\n\t  spinner.succeed(chalk.green(\"Project Prepared\"))\n\t  // close db connection\n\t  await client?.end()\n\t  // start backend\n\t  logMessage({\n\t    message: \"Starting Medusa...\",\n\t  })\n\t  try {\n\t    startMedusa({\n", "      directory: projectName,\n\t      abortController,\n\t    })\n\t  } catch (e) {\n\t    if (isAbortError(e)) {\n\t      process.exit()\n\t    }\n\t    logMessage({\n\t      message: `An error occurred while starting Medusa`,\n\t      type: \"error\",\n", "    })\n\t  }\n\t  waitOn({\n\t    resources: [\"http://localhost:9000/health\"],\n\t  }).then(() =>\n\t    open(\n\t      inviteToken\n\t        ? `http://localhost:9000/app/invite?token=${inviteToken}`\n\t        : \"http://localhost:9000/app\"\n\t    )\n", "  )\n\t}\n"]}
{"filename": "src/utils/on-process-terminated.ts", "chunked_list": ["export default (fn: Function) => {\n\t  process.on(\"SIGTERM\", () => fn())\n\t  process.on(\"SIGINT\", () => fn())\n\t}\n"]}
{"filename": "src/utils/prepare-project.ts", "chunked_list": ["import chalk from \"chalk\"\n\timport fs from \"fs\"\n\timport path from \"path\"\n\timport { Ora } from \"ora\"\n\timport promiseExec from \"./promise-exec.js\"\n\timport { EOL } from \"os\"\n\timport runProcess from \"./run-process.js\"\n\timport getFact from \"./get-fact.js\"\n\timport onProcessTerminated from \"./on-process-terminated.js\"\n\timport boxen from \"boxen\"\n", "type PrepareOptions = {\n\t  directory: string\n\t  dbConnectionString: string\n\t  admin?: {\n\t    email: string\n\t  }\n\t  seed?: boolean\n\t  spinner?: Ora\n\t  abortController?: AbortController\n\t}\n", "const showFact = (lastFact: string, spinner: Ora): string => {\n\t  const fact = getFact(lastFact)\n\t  spinner.text = `${boxen(fact, {\n\t    title: chalk.cyan(\"Installing Dependencies...\"),\n\t    titleAlignment: \"center\",\n\t    textAlignment: \"center\",\n\t    padding: 1,\n\t    margin: 1,\n\t    float: \"center\",\n\t  })}`\n", "  return fact\n\t}\n\texport default async ({\n\t  directory,\n\t  dbConnectionString,\n\t  admin,\n\t  seed,\n\t  spinner,\n\t  abortController,\n\t}: PrepareOptions) => {\n", "  // initialize execution options\n\t  const execOptions = {\n\t    cwd: directory,\n\t    signal: abortController?.signal,\n\t  }\n\t  // initialize the invite token to return\n\t  let inviteToken: string | undefined = undefined\n\t  // add connection string to project\n\t  fs.appendFileSync(\n\t    path.join(directory, `.env`),\n", "    `DATABASE_TYPE=postgres${EOL}DATABASE_URL=${dbConnectionString}`\n\t  )\n\t  let interval: NodeJS.Timer | undefined = undefined\n\t  let fact = \"\"\n\t  if (spinner) {\n\t    spinner.spinner = {\n\t      frames: [\"\"],\n\t    }\n\t    fact = showFact(fact, spinner)\n\t    interval = setInterval(() => {\n", "      fact = showFact(fact, spinner)\n\t    }, 6000)\n\t    onProcessTerminated(() => clearInterval(interval))\n\t  }\n\t  await runProcess({\n\t    process: async () => {\n\t      try {\n\t        await promiseExec(`yarn`, execOptions)\n\t      } catch (e) {\n\t        // yarn isn't available\n", "        // use npm\n\t        await promiseExec(`npm install`, execOptions)\n\t      }\n\t    },\n\t    ignoreERESOLVE: true,\n\t  })\n\t  if (interval) {\n\t    clearInterval(interval)\n\t  }\n\t  if (spinner) {\n", "    spinner.spinner = \"dots\"\n\t    spinner.succeed(chalk.green(\"Installed Dependencies\"))\n\t    spinner.start(chalk.white(\"Running Migrations...\"))\n\t  }\n\t  // run migrations\n\t  await runProcess({\n\t    process: async () => {\n\t      await promiseExec(\n\t        \"npx -y @medusajs/medusa-cli@latest migrations run\",\n\t        execOptions\n", "      )\n\t    },\n\t  })\n\t  spinner?.succeed(chalk.green(\"Ran Migrations\")).start()\n\t  if (admin) {\n\t    // create admin user\n\t    if (spinner) {\n\t      spinner.text = chalk.white(\"Creating an admin user...\")\n\t    }\n\t    await runProcess({\n", "      process: async () => {\n\t        const proc = await promiseExec(\n\t          `npx -y @medusajs/medusa-cli@1.3.15-snapshot-20230529090917 user -e ${admin.email} --invite`,\n\t          execOptions\n\t        )\n\t        // get invite token from stdout\n\t        const match = proc.stdout.match(/Invite token: (?<token>.+)/)\n\t        inviteToken = match?.groups?.token\n\t      },\n\t    })\n", "    spinner?.succeed(chalk.green(\"Created admin user\")).start()\n\t  }\n\t  if (seed) {\n\t    if (spinner) {\n\t      spinner.text = chalk.white(\"Seeding database...\")\n\t    }\n\t    // check if a seed file exists in the project\n\t    if (!fs.existsSync(path.join(directory, \"data\", \"seed.jsons\"))) {\n\t      spinner\n\t        ?.warn(\n", "          chalk.yellow(\n\t            \"Seed file was not found in the project. Skipping seeding...\"\n\t          )\n\t        )\n\t        .start()\n\t      return\n\t    }\n\t    if (spinner) {\n\t      spinner.text = chalk.white(\"Seeding database with demo data...\")\n\t    }\n", "    await runProcess({\n\t      process: async () => {\n\t        await promiseExec(\n\t          `npx -y @medusajs/medusa-cli@latest seed --seed-file=${path.join(\n\t            \"data\",\n\t            \"seed.json\"\n\t          )}`,\n\t          execOptions\n\t        )\n\t      },\n", "    })\n\t    spinner?.succeed(chalk.green(\"Seeded database with demo data\")).start()\n\t  }\n\t  return inviteToken\n\t}\n"]}
{"filename": "src/utils/create-db.ts", "chunked_list": ["import pg from \"pg\"\n\ttype CreateDbOptions = {\n\t  client: pg.Client\n\t  db: string\n\t}\n\texport default async ({ client, db }: CreateDbOptions) => {\n\t  await client.query(`CREATE DATABASE \"${db}\"`)\n\t}\n"]}
{"filename": "src/utils/promise-exec.ts", "chunked_list": ["import { exec } from \"child_process\"\n\timport util from \"util\"\n\tconst promiseExec = util.promisify(exec)\n\texport default promiseExec\n"]}
{"filename": "src/utils/postgres-client.ts", "chunked_list": ["import pg from \"pg\"\n\tconst { Client } = pg\n\ttype PostgresConnection = {\n\t  user?: string\n\t  password?: string\n\t}\n\texport default async (connect: PostgresConnection) => {\n\t  const client = new Client(connect)\n\t  await client.connect()\n\t  return client\n", "}\n"]}
{"filename": "src/utils/create-abort-controller.ts", "chunked_list": ["import onProcessTerminated from \"./on-process-terminated.js\"\n\texport default () => {\n\t  const abortController = new AbortController()\n\t  onProcessTerminated(() => abortController.abort())\n\t  return abortController\n\t}\n\texport const isAbortError = (e: any) =>\n\t  e !== null && \"code\" in e && e.code === \"ABORT_ERR\"\n"]}
{"filename": "src/utils/get-fact.ts", "chunked_list": ["const facts = [\n\t  \"Plugins allow you to integrate third-party services for payment, fulfillment, notifications, and more.\",\n\t  \"You can specify a product's availability in one or more sales channels.\",\n\t  \"Payment and shipping options and providers can be configured per region.\",\n\t  \"Tax-inclusive pricing allows you to set prices for products, shipping options, and more without having to worry about calculating taxes.\",\n\t  \"Medusa provides multi-currency and region support, with full control over prices for each currency and region.\",\n\t  \"You can organize customers by customer groups and set special prices for them.\",\n\t  \"You can specify the inventory of products per location and sales channel.\",\n\t  \"Publishable-API Keys allow you to send requests to the backend within a scoped resource.\",\n\t  \"You can create custom endpoints by creating a TypeScript file under the src/api directory.\",\n", "  \"You can listen to events to perform asynchornus actions using Subscribers.\",\n\t  \"An entity represents a table in the database. You can create a table by creating a custom entity and migration.\",\n\t  \"Medusa's store endpoint paths are prefixed by /store. The admin endpoints are prefixed by /admin.\",\n\t  \"Medusa provides a JavaScript client and a React library that you can use to build a storefront or a custom admin.\",\n\t  \"Services are classes with methods related to an entity or functionality. You can create a custom service in a TypeScript file under src/services.\",\n\t  \"Modules allow you to replace an entire functionality with your custom logic.\",\n\t  \"The event bus module is responsible for triggering events and relaying them to subscribers.\",\n\t  \"The cache module is responsible for caching data that requires heavy computation.\",\n\t]\n\texport default (lastFact = \"\") => {\n", "  let index = 0\n\t  if (lastFact.length) {\n\t    const lastFactIndex = facts.findIndex((fact) => fact === lastFact)\n\t    if (lastFactIndex !== facts.length - 1) {\n\t      index = lastFactIndex + 1\n\t    }\n\t  }\n\t  return facts[index]\n\t}\n"]}
{"filename": "src/utils/run-process.ts", "chunked_list": ["type ProcessOptions = {\n\t  process: Function\n\t  ignoreERESOLVE?: boolean\n\t}\n\t// when running commands with npx or npm sometimes they\n\t// terminate with EAGAIN error unexpectedly\n\t// this utility function allows retrying the process if\n\t// EAGAIN occurs, or otherwise throw the error that occurs\n\texport default async ({ process, ignoreERESOLVE }: ProcessOptions) => {\n\t  let processError = false\n", "  do {\n\t    try {\n\t      await process()\n\t    } catch (error) {\n\t      if (\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        \"code\" in error &&\n\t        error?.code === \"EAGAIN\"\n\t      ) {\n", "        processError = true\n\t      } else if (\n\t        ignoreERESOLVE &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        \"code\" in error &&\n\t        error?.code === \"ERESOLVE\"\n\t      ) {\n\t        // ignore error\n\t      } else {\n", "        throw error\n\t      }\n\t    }\n\t  } while (processError)\n\t}\n"]}
{"filename": "src/utils/format-connection-string.ts", "chunked_list": ["type ConnectionStringOptions = {\n\t  user?: string\n\t  password?: string\n\t  host?: string\n\t  db: string\n\t}\n\texport default ({ user, password, host, db }: ConnectionStringOptions) => {\n\t  let connection = `postgres://`\n\t  if (user) {\n\t    connection += user\n", "  }\n\t  if (password) {\n\t    connection += `:${password}`\n\t  }\n\t  if (user || password) {\n\t    connection += \"@\"\n\t  }\n\t  connection += `${host}/${db}`\n\t  return connection\n\t}\n"]}
{"filename": "src/utils/clone-repo.ts", "chunked_list": ["import promiseExec from \"./promise-exec.js\"\n\ttype CloneRepoOptions = {\n\t  directoryName?: string\n\t  repoUrl?: string\n\t  abortController?: AbortController\n\t}\n\tconst DEFAULT_REPO =\n\t  \"https://github.com/medusajs/medusa-starter-default -b feat/onboarding\"\n\texport default async ({\n\t  directoryName = \"\",\n", "  repoUrl,\n\t  abortController,\n\t}: CloneRepoOptions) => {\n\t  await promiseExec(`git clone ${repoUrl || DEFAULT_REPO} ${directoryName}`, {\n\t    signal: abortController?.signal,\n\t  })\n\t}\n"]}
{"filename": "src/utils/start-medusa.ts", "chunked_list": ["import { exec } from \"child_process\"\n\ttype StartOptions = {\n\t  directory: string\n\t  abortController?: AbortController\n\t}\n\texport default ({ directory, abortController }: StartOptions) => {\n\t  const childProcess = exec(`npx -y @medusajs/medusa-cli develop`, {\n\t    cwd: directory,\n\t    signal: abortController?.signal,\n\t  })\n", "  childProcess.stdout?.pipe(process.stdout)\n\t}\n"]}
{"filename": "src/utils/log-message.ts", "chunked_list": ["import chalk from \"chalk\"\n\timport { program } from \"commander\"\n\ttype LogOptions = {\n\t  message: string\n\t  type?: \"error\" | \"success\" | \"info\" | \"warning\"\n\t}\n\texport default ({ message, type = \"info\" }: LogOptions) => {\n\t  switch (type) {\n\t    case \"info\":\n\t      console.log(chalk.white(message))\n", "      break\n\t    case \"success\":\n\t      console.log(chalk.green(message))\n\t      break\n\t    case \"warning\":\n\t      console.log(chalk.yellow(message))\n\t      break\n\t    case \"error\":\n\t      program.error(chalk.bold.red(message))\n\t  }\n", "}\n"]}
