{"filename": "jest.config.ts", "chunked_list": ["import nextJest from \"next/jest\";\n\timport { defaults } from \"jest-config\";\n\timport * as dotenv from \"dotenv\";\n\tdotenv.config({ path: \"./.env.local\" });\n\tconst createJestConfig = nextJest({\n\t  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n\t  dir: \"./\",\n\t});\n\t// Add any custom config to be passed to Jest\n\tconst customJestConfig = {\n", "  modulePaths: [\"<rootDir>/src/\"],\n\t  moduleDirectories: [\"node_modules\", \"<rootDir>/\"],\n\t  moduleFileExtensions: [...defaults.moduleFileExtensions, \"d.ts\"],\n\t  testTimeout: 15000,\n\t};\n\t// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\n\tmodule.exports = createJestConfig(customJestConfig);\n"]}
{"filename": "src/middleware.ts", "chunked_list": ["import { NextRequest, NextResponse } from \"next/server\";\n\timport { upstashBanDuration } from \"./configs/upstash\";\n\timport { enableServerAPI } from \"./configs/instagram\";\n\timport { getClientIp } from \"@/lib/utils\";\n\timport { isRatelimited } from \"./lib/rate-limiter\";\n\tconst isStaticPath = (path: string) => {\n\t  return (\n\t    path.startsWith(\"/_next\") ||\n\t    path.startsWith(\"/images\") ||\n\t    path.startsWith(\"/favicon.ico\") ||\n", "    path.startsWith(\"/og.png\") ||\n\t    path.startsWith(\"/robot.txt\") ||\n\t    path.startsWith(\"/site.webmanifest\")\n\t  );\n\t};\n\texport async function middleware(request: NextRequest) {\n\t  const requestPath = request.nextUrl.pathname;\n\t  const country = request.geo?.country ?? \"Country\";\n\t  if (isStaticPath(requestPath)) {\n\t    return NextResponse.next();\n", "  }\n\t  if (requestPath.startsWith(\"/api\") && enableServerAPI) {\n\t    const isLimited = await isRatelimited(request);\n\t    if (isLimited) {\n\t      const banDuration = Math.floor(upstashBanDuration / 60 / 60); // Ban duration in hours\n\t      return NextResponse.json(\n\t        {\n\t          error: `Too many requests, you have been banned for ${banDuration} hours.`,\n\t        },\n\t        { status: 429 }\n", "      );\n\t    }\n\t  }\n\t  const clientIp = getClientIp(request);\n\t  console.log(`${request.method} ${clientIp} (${country}) -> ${requestPath}`);\n\t}\n\t// See \"Matching Paths\" below to learn more\n\texport const config = {\n\t  matcher: [\"/:path*\"],\n\t};\n"]}
{"filename": "src/components/navigation/index.ts", "chunked_list": ["export * from \"./LogoLink\";\n\texport * from \"./MenuButton\";\n\texport * from \"./NavLink\";\n\texport * from \"./MobileMenuLink\";\n\texport * from \"./ThemeButton\";\n"]}
{"filename": "src/configs/instagram.ts", "chunked_list": ["// Instagram Configurations\n\texport const enableScraper = true;\n\texport const enableGuestApi = true;\n\t// API endpoints\n\texport const enableServerAPI = false;\n"]}
{"filename": "src/configs/site.ts", "chunked_list": ["import { SiteConfig } from \"@/types\";\n\texport const siteConfig: SiteConfig = {\n\t  name: \"Instagram Saver\",\n\t  description:\n\t    \"Want to save your favorite Instagram posts for later? With our Instagram saver, you can download any photo or video from Instagram in seconds. Just copy the link, paste it in our app, and enjoy your saved content offline. Whether you want to repost, share, or just keep them for yourself, our Instagram saver is the best tool for you.\",\n\t  url: \"https://insta-video-saver.vercel.app/\",\n\t  ogImageUrl: \"https://insta-video-saver.vercel.app/og.png\",\n\t  links: {\n\t    twitter: \"https://twitter.com/riadazz\",\n\t    github: \"https://github.com/riad-azz/instagram-video-downloader\",\n", "  },\n\t};\n"]}
{"filename": "src/configs/upstash.ts", "chunked_list": ["// Upstash configs\n\texport const upstashUrl = process.env.UPSTASH_REDIS_REST_URL ?? \"\";\n\texport const upstashToken = process.env.UPSTASH_REDIS_REST_TOKEN ?? \"\";\n\tconst isUsingUpstash = process.env.USE_UPSTASH ?? \"\";\n\texport const enableUpstash = isUsingUpstash === \"true\";\n\t// Ratelimit configs\n\texport const maxRequests = 5; // Max requests every requests window\n\texport const requestsWindow = \"1 m\"; // 5 requests allowed every 1 min\n\t// Ban configs\n\texport const upstashBanEnabled = true; // Ban user by ip in case of spam\n", "export const upstashBanDuration = 14400; // 4 hours;\n"]}
{"filename": "src/configs/seo.ts", "chunked_list": ["import { siteConfig } from \"@/configs/site\";\n\timport { Metadata } from \"next\";\n\texport const mainMetadata: Metadata = {\n\t  metadataBase: new URL(\"https://insta-video-saver.vercel.app\"),\n\t  title: siteConfig.name,\n\t  description: siteConfig.description,\n\t  keywords: [\n\t    \"Instagram downloader\",\n\t    \"Reels downloader\",\n\t    \"Instagram video downloader\",\n", "    \"Download Instagram videos\",\n\t    \"Save Instagram videos\",\n\t    \"Instagram reels downloader\",\n\t    \"Download Instagram reels\",\n\t    \"Save Instagram reels\",\n\t    \"Video downloader for Instagram\",\n\t    \"Instagram video saver\",\n\t    \"Instagram reel saver\",\n\t    \"Instagram reel video downloader\",\n\t    \"Reels video saver\",\n", "    \"Free Instagram saver\",\n\t    \"Instagram video download app\",\n\t    \"Free Instagram downloader\",\n\t  ],\n\t  authors: [\n\t    {\n\t      name: \"riad-azz\",\n\t      url: \"https://github.com/riad-azz\",\n\t    },\n\t  ],\n", "  creator: \"riad-azz\",\n\t  themeColor: [\n\t    { media: \"(prefers-color-scheme: light)\", color: \"white\" },\n\t    { media: \"(prefers-color-scheme: dark)\", color: \"#1f2937\" },\n\t  ],\n\t  openGraph: {\n\t    type: \"website\",\n\t    locale: \"en_US\",\n\t    url: siteConfig.url,\n\t    title: siteConfig.name,\n", "    description: siteConfig.description,\n\t    siteName: siteConfig.name,\n\t    images: [\n\t      {\n\t        url: siteConfig.ogImageUrl,\n\t        width: 1240,\n\t        height: 620,\n\t        alt: siteConfig.name,\n\t      },\n\t    ],\n", "  },\n\t  twitter: {\n\t    card: \"summary_large_image\",\n\t    title: siteConfig.name,\n\t    description: siteConfig.description,\n\t    images: [siteConfig.ogImageUrl],\n\t    creator: \"@riadazz\",\n\t  },\n\t  robots: {\n\t    index: false,\n", "    follow: true,\n\t    nocache: true,\n\t    googleBot: {\n\t      index: true,\n\t      follow: false,\n\t      noimageindex: true,\n\t      \"max-video-preview\": -1,\n\t      \"max-image-preview\": \"large\",\n\t      \"max-snippet\": -1,\n\t    },\n", "  },\n\t  icons: {\n\t    icon: \"/favicon.ico\",\n\t    shortcut: \"/images/favicon-32x32.png\",\n\t    apple: \"/images/apple-touch-icon.png\",\n\t  },\n\t  manifest: \"/site.webmanifest\",\n\t};\n"]}
{"filename": "src/lib/rate-limiter.ts", "chunked_list": ["import { Ratelimit } from \"@upstash/ratelimit\";\n\timport { Redis } from \"@upstash/redis\";\n\timport { getClientIp } from \"./utils\";\n\timport { NextRequest } from \"next/server\";\n\timport {\n\t  upstashToken,\n\t  upstashUrl,\n\t  enableUpstash,\n\t  upstashBanEnabled,\n\t  upstashBanDuration,\n", "  maxRequests,\n\t  requestsWindow,\n\t} from \"@/configs/upstash\";\n\tconst isValidUpstash = () => {\n\t  if (!upstashUrl) {\n\t    console.error(\"UPSTASH_URL is missing from your environment variables.\");\n\t  }\n\t  if (!upstashToken) {\n\t    console.error(\"UPSTASH_TOKEN is missing from your environment variables.\");\n\t  }\n", "  return upstashUrl !== \"\" && upstashToken != \"\";\n\t};\n\texport const redisClient = new Redis({\n\t  url: upstashUrl,\n\t  token: upstashToken,\n\t});\n\texport const ratelimit = new Ratelimit({\n\t  redis: redisClient,\n\t  limiter: Ratelimit.slidingWindow(maxRequests, requestsWindow),\n\t});\n", "export const isRatelimited = async (request: NextRequest) => {\n\t  if (!enableUpstash) return false;\n\t  // Check if upstash variables are set correctly\n\t  const validUpstash = isValidUpstash();\n\t  if (!validUpstash) return false;\n\t  try {\n\t    const identifier = getClientIp(request);\n\t    if (!identifier) return false;\n\t    const result = await ratelimit.limit(identifier);\n\t    if (result.success) return false;\n", "    // Ban user if ratelimit exceeded\n\t    if (upstashBanEnabled) {\n\t      await redisClient.setex(\n\t        `ban:${identifier}`,\n\t        upstashBanDuration,\n\t        \"banned\"\n\t      );\n\t    }\n\t    return true;\n\t  } catch (error: any) {\n", "    console.error(error.message);\n\t    return false;\n\t  }\n\t};\n"]}
{"filename": "src/lib/utils.ts", "chunked_list": ["import axios, { AxiosError, AxiosResponse, AxiosRequestConfig } from \"axios\";\n\timport { NextRequest } from \"next/server\";\n\timport { APIResponse, ErrorResponse, SuccessResponse } from \"@/types\";\n\timport { BadRequest } from \"@/exceptions\";\n\tconst userAgents = [\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/17.17134\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/18.17763\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/19\",\n", "  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 OPR/45\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 OPR/46\",\n\t  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 OPR/47\",\n\t];\n\texport const getRandomUserAgent = () => {\n\t  return userAgents[Math.floor(Math.random() * userAgents.length)];\n\t};\n\texport const getStrTimestamp = () => Math.floor(Date.now() / 1000).toString();\n\texport const getTimedFilename = (name: string, ext: string) => {\n\t  return `${name}-${getStrTimestamp()}.${ext}`;\n", "};\n\texport const isJsonResponse = (response: Response) => {\n\t  const contentType = response.headers.get(\"content-type\");\n\t  return contentType && contentType.includes(\"application/json\");\n\t};\n\texport const getClientIp = (request: NextRequest) => {\n\t  let ip = request.ip ?? request.headers.get(\"x-real-ip\");\n\t  const forwardedFor = request.headers.get(\"x-forwarded-for\");\n\t  if (!ip && forwardedFor) {\n\t    ip = forwardedFor.split(\",\").at(0) ?? null;\n", "    return ip;\n\t  }\n\t  return ip;\n\t};\n\texport const getHeaders = () => {\n\t  const headers = {\n\t    Accept: \"*/*\",\n\t    \"Accept-Language\": \"en-us,en;q=0.5\",\n\t    \"Sec-Fetch-Mode\": \"navigate\",\n\t    Referer: \"https://www.instagram.com/\",\n", "    Origin: \"https://www.instagram.com\",\n\t    \"User-Agent\": getRandomUserAgent(),\n\t  };\n\t  return headers;\n\t};\n\texport const makeHttpRequest = async <T>({\n\t  ...args\n\t}: AxiosRequestConfig): Promise<APIResponse<T>> => {\n\t  try {\n\t    const response: AxiosResponse = await axios(args);\n", "    const successResponse = makeSuccessResponse<T>(response.data);\n\t    return successResponse;\n\t  } catch (error: any) {\n\t    const axiosError: AxiosError = error;\n\t    if (axiosError.response) {\n\t      return makeErrorResponse(axiosError.message);\n\t    } else if (axiosError.request) {\n\t      console.log(\"Request Error:\", axiosError.request);\n\t      return makeErrorResponse(\"Request timeout, please try again.\");\n\t    } else {\n", "      console.log(\"Error:\", axiosError.message);\n\t      return makeErrorResponse(\"Something went wrong, please try again.\");\n\t    }\n\t  }\n\t};\n\texport const makeSuccessResponse = <T>(data: any) => {\n\t  const response: SuccessResponse<T> = {\n\t    status: \"success\",\n\t    data: data,\n\t  };\n", "  return response;\n\t};\n\texport const makeErrorResponse = (\n\t  message: string = \"Internal Server Error\"\n\t) => {\n\t  const response: ErrorResponse = {\n\t    status: \"error\",\n\t    message: message,\n\t  };\n\t  return response;\n", "};\n"]}
{"filename": "src/lib/instagram/instagramAPI.ts", "chunked_list": ["import { VideoInfo } from \"@/types\";\n\timport { InstaAPIResponse } from \"@/types/instagramAPI\";\n\timport { makeHttpRequest, getHeaders, getTimedFilename } from \"@/lib/utils\";\n\timport { BadRequest } from \"@/exceptions\";\n\timport { enableGuestApi } from \"@/configs/instagram\";\n\tconst formatGuestJson = (json: InstaAPIResponse) => {\n\t  const postJson = json.graphql.shortcode_media;\n\t  if (!postJson.is_video) {\n\t    throw new BadRequest(\"This post does not contain a video\", 400);\n\t  }\n", "  const filename = getTimedFilename(\"instagram-saver\", \"mp4\");\n\t  const videoJson: VideoInfo = {\n\t    filename: filename,\n\t    width: postJson.dimensions.width.toString(),\n\t    height: postJson.dimensions.height.toString(),\n\t    videoUrl: postJson.video_url,\n\t  };\n\t  return videoJson;\n\t};\n\texport const fetchAsGuest = async (postUrl: string, timeout: number = 0) => {\n", "  if (!enableGuestApi) {\n\t    console.log(\"Instagram Guest API is disabled in @config/instagram\");\n\t    return null;\n\t  }\n\t  if (!postUrl) return null;\n\t  const headers = getHeaders();\n\t  const apiUrl = postUrl + \"/?__a=1&__d=dis\";\n\t  const response = await makeHttpRequest<InstaAPIResponse>({\n\t    url: apiUrl,\n\t    method: \"GET\",\n", "    headers,\n\t    timeout,\n\t  });\n\t  if (response.status === \"error\") {\n\t    console.log(response.message);\n\t    if (response.message.includes(\"status code 404\")) {\n\t      throw new BadRequest(\n\t        \"This post does not exist, make sure the URL is correct\"\n\t      );\n\t    }\n", "    return null;\n\t  }\n\t  const json: InstaAPIResponse = response.data;\n\t  if (json.require_login) {\n\t    console.log(\"Guest graphql got rate limited by Instagram API\");\n\t    return null;\n\t  }\n\t  if (!json.graphql) {\n\t    console.log(\"Instagram Guest API response has been modified\");\n\t    return null;\n", "  }\n\t  const formattedJson = formatGuestJson(json);\n\t  return formattedJson;\n\t};\n\texport const fetchFromAPI = async (postUrl: string, timeout: number = 0) => {\n\t  const jsonAsGuest = await fetchAsGuest(postUrl, timeout);\n\t  if (jsonAsGuest) return jsonAsGuest;\n\t  return null;\n\t};\n"]}
{"filename": "src/lib/instagram/instagramScraper.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport { VideoInfo } from \"@/types\";\n\timport { PostJson } from \"@/types/instagramScraper\";\n\timport { makeHttpRequest, getHeaders, getTimedFilename } from \"@/lib/utils\";\n\timport { BadRequest } from \"@/exceptions\";\n\timport { enableScraper } from \"@/configs/instagram\";\n\tconst formatPageJson = (json: any) => {\n\t  let scrapedPost: PostJson;\n\t  if (Array.isArray(json)) {\n\t    scrapedPost = json.find((item: any) => item.video);\n", "  } else {\n\t    scrapedPost = json;\n\t  }\n\t  if (!scrapedPost) {\n\t    return null;\n\t  }\n\t  const videoList = scrapedPost.video;\n\t  if (!videoList) {\n\t    throw new BadRequest(\"This post does not contain a video\");\n\t  }\n", "  if (videoList.length === 0) {\n\t    throw new BadRequest(\"This post does not contain a video\");\n\t  }\n\t  const video = videoList[0];\n\t  const filename = getTimedFilename(\"instagram-saver\", \"mp4\");\n\t  const videoJson: VideoInfo = {\n\t    filename: filename,\n\t    width: video.width,\n\t    height: video.height,\n\t    videoUrl: video.contentUrl,\n", "  };\n\t  return videoJson;\n\t};\n\texport const fetchFromPage = async (postUrl: string, timeout: number = 0) => {\n\t  const headers = getHeaders();\n\t  if (!enableScraper) {\n\t    console.log(\"Instagram Scraper is disabled in @config/instagram\");\n\t    return null;\n\t  }\n\t  const response = await makeHttpRequest<string>({\n", "    url: postUrl,\n\t    method: \"GET\",\n\t    headers,\n\t    timeout,\n\t  });\n\t  if (response.status === \"error\") {\n\t    console.log(response.message);\n\t    if (response.message.includes(\"status code 404\")) {\n\t      throw new BadRequest(\n\t        \"This post does not exist, make sure the URL is correct\"\n", "      );\n\t    }\n\t    return null;\n\t  }\n\t  const $ = load(response.data);\n\t  const jsonElement = $(\"script[type='application/ld+json']\");\n\t  if (jsonElement.length === 0) {\n\t    console.log(\"LD+JSON not available for this post\");\n\t    return null;\n\t  }\n", "  const jsonText: string = jsonElement.text();\n\t  const json: any = JSON.parse(jsonText);\n\t  const formattedJson = formatPageJson(json);\n\t  return formattedJson;\n\t};\n"]}
{"filename": "src/lib/instagram/actions.ts", "chunked_list": ["\"use server\";\n\timport { Exception } from \"@/exceptions\";\n\timport { getPostId, fetchPostJson } from \"@/lib/instagram\";\n\timport { makeErrorResponse, makeSuccessResponse } from \"../utils\";\n\timport { VideoInfo } from \"@/types\";\n\tfunction handleError(error: any) {\n\t  if (error instanceof Exception) {\n\t    return makeErrorResponse(error.message);\n\t  } else {\n\t    console.error(error);\n", "    return makeErrorResponse();\n\t  }\n\t}\n\texport async function fetchVideoInfoAction(postUrl: string) {\n\t  let postId;\n\t  try {\n\t    postId = getPostId(postUrl);\n\t  } catch (error: any) {\n\t    return handleError(error);\n\t  }\n", "  try {\n\t    const videoInfo = await fetchPostJson(postId);\n\t    const response = makeSuccessResponse<VideoInfo>(videoInfo);\n\t    return response;\n\t  } catch (error: any) {\n\t    return handleError(error);\n\t  }\n\t}\n"]}
{"filename": "src/lib/instagram/index.ts", "chunked_list": ["import { BadRequest } from \"@/exceptions\";\n\timport { fetchFromAPI } from \"./instagramAPI\";\n\timport { fetchFromPage } from \"./instagramScraper\";\n\texport const getPostId = (postUrl: string | null) => {\n\t  const postRegex =\n\t    /^https:\\/\\/(?:www\\.)?instagram\\.com\\/p\\/([a-zA-Z0-9_-]+)\\/?/;\n\t  const reelRegex =\n\t    /^https:\\/\\/(?:www\\.)?instagram\\.com\\/reels?\\/([a-zA-Z0-9_-]+)\\/?/;\n\t  let postId;\n\t  if (!postUrl) {\n", "    throw new BadRequest(\"Instagram URL was not provided\");\n\t  }\n\t  const postCheck = postUrl.match(postRegex);\n\t  if (postCheck) {\n\t    postId = postCheck.at(-1);\n\t  }\n\t  const reelCheck = postUrl.match(reelRegex);\n\t  if (reelCheck) {\n\t    postId = reelCheck.at(-1);\n\t  }\n", "  if (!postId) {\n\t    throw new BadRequest(\"Instagram post/reel ID was not found\");\n\t  }\n\t  return postId;\n\t};\n\texport const fetchPostJson = async (postID: string, timeout?: number) => {\n\t  const postUrl = \"https://www.instagram.com/p/\" + postID;\n\t  const pageJson = await fetchFromPage(postUrl, timeout);\n\t  if (pageJson) return pageJson;\n\t  const apiJson = await fetchFromAPI(postUrl, timeout);\n", "  if (apiJson) return apiJson;\n\t  throw new BadRequest(\n\t    \"The video download link for this post is not available.\",\n\t    401\n\t  );\n\t};\n"]}
{"filename": "src/exceptions/index.ts", "chunked_list": ["export class Exception extends Error {\n\t  code: number;\n\t  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Instagram Exception\", code = 500) {\n\t    super(message);\n\t    this.code = code;\n\t  }\n", "}\n\t/* Server Exceptions */\n\texport class BadRequest extends Exception {\n\t  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Bad Request\", code = 400) {\n\t    super(message, code);\n\t  }\n", "}\n\texport class ServerException extends Exception {\n\t  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Internal Server Error\", code = 500) {\n\t    super(message, code);\n\t  }\n\t}\n", "export class TimeoutException extends Exception {\n\t  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Request timeout, please try again.\", code = 408) {\n\t    super(message, code);\n\t  }\n\t}\n\texport class RatelimitException extends Exception {\n", "  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Too many requests, try again later.\", code = 429) {\n\t    super(message, code);\n\t  }\n\t}\n\t/* Client Exceptions */\n\texport class ClientException extends Exception {\n", "  /**\n\t   * @param message\n\t   * @param code\n\t   */\n\t  constructor(message = \"Instagram Client Exception\", code = 400) {\n\t    super(message, code);\n\t  }\n\t}\n"]}
{"filename": "src/types/instagramAPI.ts", "chunked_list": ["export type InstaAPIResponse = {\n\t  require_login?: boolean;\n\t  graphql: {\n\t    shortcode_media: {\n\t      __typename: string;\n\t      id: string;\n\t      shortcode: string;\n\t      dimensions: {\n\t        height: number;\n\t        width: number;\n", "      };\n\t      gating_info: any;\n\t      fact_check_overall_rating: any;\n\t      fact_check_information: any;\n\t      sensitivity_friction_info: any;\n\t      sharing_friction_info: {\n\t        should_have_sharing_friction: boolean;\n\t        bloks_app_url: any;\n\t      };\n\t      media_overlay_info: any;\n", "      media_preview: string;\n\t      display_url: string;\n\t      display_resources: Array<{\n\t        src: string;\n\t        config_width: number;\n\t        config_height: number;\n\t      }>;\n\t      accessibility_caption: any;\n\t      dash_info: {\n\t        is_dash_eligible: boolean;\n", "        video_dash_manifest: any;\n\t        number_of_qualities: number;\n\t      };\n\t      has_audio: boolean;\n\t      video_url: string;\n\t      video_view_count: number;\n\t      video_play_count: number;\n\t      is_video: boolean;\n\t      tracking_token: string;\n\t      upcoming_event: any;\n", "      edge_media_to_tagged_user: {\n\t        edges: Array<any>;\n\t      };\n\t      edge_media_to_caption: {\n\t        edges: Array<{\n\t          node: {\n\t            created_at: string;\n\t            text: string;\n\t          };\n\t        }>;\n", "      };\n\t      can_see_insights_as_brand: boolean;\n\t      caption_is_edited: boolean;\n\t      has_ranked_comments: boolean;\n\t      like_and_view_counts_disabled: boolean;\n\t      edge_media_to_parent_comment: {\n\t        count: number;\n\t        page_info: {\n\t          has_next_page: boolean;\n\t          end_cursor: string;\n", "        };\n\t        edges: Array<{\n\t          node: {\n\t            id: string;\n\t            text: string;\n\t            created_at: number;\n\t            did_report_as_spam: boolean;\n\t            owner: {\n\t              id: string;\n\t              is_verified: boolean;\n", "              profile_pic_url: string;\n\t              username: string;\n\t            };\n\t            viewer_has_liked: boolean;\n\t            edge_liked_by: {\n\t              count: number;\n\t            };\n\t            is_restricted_pending: boolean;\n\t            edge_threaded_comments: {\n\t              count: number;\n", "              page_info: {\n\t                has_next_page: boolean;\n\t                end_cursor: any;\n\t              };\n\t              edges: Array<any>;\n\t            };\n\t          };\n\t        }>;\n\t      };\n\t      edge_media_to_hoisted_comment: {\n", "        edges: Array<any>;\n\t      };\n\t      edge_media_preview_comment: {\n\t        count: number;\n\t        edges: Array<{\n\t          node: {\n\t            id: string;\n\t            text: string;\n\t            created_at: number;\n\t            did_report_as_spam: boolean;\n", "            owner: {\n\t              id: string;\n\t              is_verified: boolean;\n\t              profile_pic_url: string;\n\t              username: string;\n\t            };\n\t            viewer_has_liked: boolean;\n\t            edge_liked_by: {\n\t              count: number;\n\t            };\n", "            is_restricted_pending: boolean;\n\t          };\n\t        }>;\n\t      };\n\t      comments_disabled: boolean;\n\t      commenting_disabled_for_viewer: boolean;\n\t      taken_at_timestamp: number;\n\t      edge_media_preview_like: {\n\t        count: number;\n\t        edges: Array<any>;\n", "      };\n\t      edge_media_to_sponsor_user: {\n\t        edges: Array<any>;\n\t      };\n\t      is_affiliate: boolean;\n\t      is_paid_partnership: boolean;\n\t      location: any;\n\t      nft_asset_info: any;\n\t      viewer_has_liked: boolean;\n\t      viewer_has_saved: boolean;\n", "      viewer_has_saved_to_collection: boolean;\n\t      viewer_in_photo_of_you: boolean;\n\t      viewer_can_reshare: boolean;\n\t      owner: {\n\t        id: string;\n\t        is_verified: boolean;\n\t        profile_pic_url: string;\n\t        username: string;\n\t        blocked_by_viewer: boolean;\n\t        restricted_by_viewer: any;\n", "        followed_by_viewer: boolean;\n\t        full_name: string;\n\t        has_blocked_viewer: boolean;\n\t        is_embeds_disabled: boolean;\n\t        is_private: boolean;\n\t        is_unpublished: boolean;\n\t        requested_by_viewer: boolean;\n\t        pass_tiering_recommendation: boolean;\n\t        edge_owner_to_timeline_media: {\n\t          count: number;\n", "        };\n\t        edge_followed_by: {\n\t          count: number;\n\t        };\n\t      };\n\t      is_ad: boolean;\n\t      edge_web_media_to_related_media: {\n\t        edges: Array<any>;\n\t      };\n\t      coauthor_producers: Array<any>;\n", "      pinned_for_users: Array<any>;\n\t      encoding_status: any;\n\t      is_published: boolean;\n\t      product_type: string;\n\t      title: string;\n\t      video_duration: number;\n\t      thumbnail_src: string;\n\t      clips_music_attribution_info: {\n\t        artist_name: string;\n\t        song_name: string;\n", "        uses_original_audio: boolean;\n\t        should_mute_audio: boolean;\n\t        should_mute_audio_reason: string;\n\t        audio_id: string;\n\t      };\n\t      edge_related_profiles: {\n\t        edges: Array<{\n\t          node: {\n\t            id: string;\n\t            full_name: string;\n", "            is_private: boolean;\n\t            is_verified: boolean;\n\t            profile_pic_url: string;\n\t            username: string;\n\t            edge_followed_by: {\n\t              count: number;\n\t            };\n\t            edge_owner_to_timeline_media: {\n\t              count: number;\n\t              edges: Array<{\n", "                node: {\n\t                  __typename: string;\n\t                  id: string;\n\t                  shortcode: string;\n\t                  edge_media_preview_like: {\n\t                    count: number;\n\t                  };\n\t                  edge_media_preview_comment: {\n\t                    count: number;\n\t                  };\n", "                  thumbnail_src: string;\n\t                  owner: {\n\t                    id: string;\n\t                    username: string;\n\t                  };\n\t                  gating_info: any;\n\t                  sharing_friction_info: {\n\t                    should_have_sharing_friction: boolean;\n\t                    bloks_app_url: any;\n\t                  };\n", "                  media_overlay_info: any;\n\t                  is_video: boolean;\n\t                  accessibility_caption: any;\n\t                };\n\t              }>;\n\t            };\n\t          };\n\t        }>;\n\t      };\n\t    };\n", "  };\n\t  showQRModal: boolean;\n\t};\n"]}
{"filename": "src/types/instagramScraper.ts", "chunked_list": ["export type PostJson = {\n\t  articleBody: string;\n\t  author: {\n\t    \"@type\": string;\n\t    identifier: {\n\t      \"@type\": string;\n\t      propertyID: string;\n\t      value: string;\n\t    };\n\t    image: string;\n", "    name: string;\n\t    alternateName: string;\n\t    url: string;\n\t  };\n\t  comment: {\n\t    \"@type\": string;\n\t    text: string;\n\t    author: {\n\t      \"@type\": string;\n\t      identifier: {\n", "        \"@type\": string;\n\t        propertyID: string;\n\t        value: string;\n\t      };\n\t      image: string;\n\t      name: string;\n\t      alternateName: string;\n\t      url: string;\n\t    };\n\t    dateCreated: string;\n", "    interactionStatistic: {\n\t      \"@type\": string;\n\t      interactionType: string;\n\t      userInteractionCount: number;\n\t    };\n\t  };\n\t  commentCount: string;\n\t  contentLocation: any;\n\t  \"@context\": string;\n\t  dateCreated: string;\n", "  dateModified: string;\n\t  headline: string;\n\t  identifier: {\n\t    \"@type\": string;\n\t    propertyID: string;\n\t    value: string;\n\t  };\n\t  image: Array<any>;\n\t  interactionStatistic: Array<{\n\t    \"@type\": string;\n", "    interactionType: string;\n\t    userInteractionCount: number;\n\t  }>;\n\t  mainEntityOfPage: {\n\t    \"@type\": string;\n\t    \"@id\": string;\n\t  };\n\t  \"@type\": string;\n\t  video: Array<{\n\t    \"@type\": string;\n", "    uploadDate: string;\n\t    description: string;\n\t    name: string;\n\t    caption: string;\n\t    height: string;\n\t    width: string;\n\t    contentUrl: string;\n\t    thumbnailUrl: string;\n\t    genre: Array<any>;\n\t    keywords: Array<any>;\n", "    interactionStatistic: Array<{\n\t      \"@type\": string;\n\t      interactionType: string;\n\t      userInteractionCount: number;\n\t    }>;\n\t  }>;\n\t};\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export type SuccessResponse<T> = {\n\t  status: \"success\";\n\t  data: T;\n\t};\n\texport type ErrorResponse = {\n\t  status: \"error\";\n\t  message: string;\n\t};\n\texport type APIResponse<T> = SuccessResponse<T> | ErrorResponse;\n\texport type SiteConfig = {\n", "  name: string;\n\t  description: string;\n\t  url: string;\n\t  ogImageUrl: string;\n\t  links: {\n\t    twitter: string;\n\t    github: string;\n\t  };\n\t};\n\texport type VideoInfo = {\n", "  filename: string;\n\t  width: string;\n\t  height: string;\n\t  videoUrl: string;\n\t};\n"]}
{"filename": "src/__tests__/instagram.test.ts", "chunked_list": ["import { BadRequest, TimeoutException } from \"@/exceptions\";\n\timport { fetchPostJson, getPostId } from \"@/lib/instagram\";\n\t// URL for post page with ld+json included\n\tconst postUrl = \"https://www.instagram.com/p/CGh4a0iASGS\";\n\tconst postId = \"CGh4a0iASGS\";\n\t// Check if getPostId function is working\n\tdescribe(\"success-getPostId\", () => {\n\t  it(\"should return a postId from the postUrl\", () => {\n\t    const testPostId = getPostId(postUrl);\n\t    expect(testPostId).toBe(postId);\n", "  });\n\t});\n\tdescribe(\"fail-getPostId\", () => {\n\t  it(\"should throw BadRequest error\", () => {\n\t    const invalidPostUrl = \"https://www.doesnt-exist.com/p/CrYKenNJeey/\";\n\t    expect(() => {\n\t      getPostId(invalidPostUrl);\n\t    }).toThrow(BadRequest);\n\t  });\n\t});\n", "// Check if fetchPostJson function is working\n\tdescribe(\"success-fetchPostJson\", () => {\n\t  it(\"should return a VideoJson object\", async () => {\n\t    const response = await fetchPostJson(postId);\n\t    expect(response?.videoUrl).toBeDefined();\n\t  });\n\t});\n\tdescribe(\"timeout-fetchPostJson\", () => {\n\t  it(\"should throw TimeoutException error\", async () => {\n\t    try {\n", "      // Set timeout of 1ms to force timeout error\n\t      await fetchPostJson(postId, 1);\n\t    } catch (error) {\n\t      expect(error instanceof TimeoutException).toBe(true);\n\t    }\n\t  });\n\t});\n"]}
{"filename": "src/__tests__/instagramScraper.test.ts", "chunked_list": ["import { BadRequest } from \"@/exceptions\";\n\timport { fetchFromPage } from \"@/lib/instagram/instagramScraper\";\n\t// Url for post page with ld+json include\n\tconst postUrl = \"https://www.instagram.com/p/CGh4a0iASGS\";\n\t// Url for post page that does not contain a video\n\tconst imagePostUrl = \"https://www.instagram.com/p/CpldyYgvdhz\";\n\t// Check if the page json scraper is working\n\tdescribe(\"success-fetchFromPage\", () => {\n\t  it(\"should return a VideoJson object\", async () => {\n\t    const response = await fetchFromPage(postUrl);\n", "    expect(response?.videoUrl).toBeDefined();\n\t  });\n\t});\n\tdescribe(\"no-video-fetchFromPage\", () => {\n\t  it(\"should throw IGBadRequest error\", async () => {\n\t    try {\n\t      await fetchFromPage(imagePostUrl);\n\t    } catch (error) {\n\t      expect(error instanceof BadRequest).toBe(true);\n\t    }\n", "  });\n\t});\n"]}
{"filename": "src/__tests__/instagramAPI.test.ts", "chunked_list": ["import { BadRequest } from \"@/exceptions\";\n\timport { fetchFromAPI } from \"@/lib/instagram/instagramAPI\";\n\t// URL for post page with no ld+json included\n\tconst postUrl = \"https://www.instagram.com/p/CrYKenNJeey\";\n\t// Url for post page that does not contain a video\n\tconst imagePostUrl = \"https://www.instagram.com/p/CpldyYgvdhz\";\n\t// Check if the Instagram API is working\n\tdescribe(\"success-fetchFromAPI\", () => {\n\t  it(\"should return VideoJson object\", async () => {\n\t    const response = await fetchFromAPI(postUrl);\n", "    expect(response?.videoUrl).toBeDefined();\n\t  });\n\t});\n\tdescribe(\"no-video-fetchFromAPI\", () => {\n\t  it(\"should throw BadRequest error\", async () => {\n\t    await expect(fetchFromAPI(imagePostUrl)).rejects.toThrow(BadRequest);\n\t  });\n\t});\n"]}
{"filename": "src/__tests__/ratelimit.test.ts", "chunked_list": ["// Check if the environment variables are defined\n\tdescribe(\"upstash-env-variables\", () => {\n\t  it(\"should have a USE_UPSTASH variable\", () => {\n\t    expect(process.env.USE_UPSTASH).toBeDefined();\n\t  });\n\t  it(\"should have a UPSTASH_URL variable\", () => {\n\t    expect(process.env.UPSTASH_URL).toBeDefined();\n\t  });\n\t  it(\"should have a UPSTASH_TOKEN variable\", () => {\n\t    expect(process.env.UPSTASH_TOKEN).toBeDefined();\n", "  });\n\t});\n"]}
{"filename": "src/app/api/instagram/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\timport { Exception } from \"@/exceptions\";\n\timport { getPostId, fetchPostJson } from \"@/lib/instagram\";\n\timport { enableServerAPI } from \"@/configs/instagram\";\n\timport { makeErrorResponse, makeSuccessResponse } from \"@/lib/utils\";\n\timport { VideoInfo } from \"@/types\";\n\tfunction handleError(error: any) {\n\t  if (error instanceof Exception) {\n\t    const response = makeErrorResponse(error.message);\n\t    return NextResponse.json(response, { status: error.code });\n", "  } else {\n\t    console.error(error);\n\t    const response = makeErrorResponse();\n\t    return NextResponse.json(response, { status: 500 });\n\t  }\n\t}\n\texport async function GET(request: Request) {\n\t  if (!enableServerAPI) {\n\t    return NextResponse.json({ error: \"Not Implemented\" }, { status: 501 });\n\t  }\n", "  const { searchParams } = new URL(request.url);\n\t  const url: string | null = searchParams.get(\"url\");\n\t  let postId;\n\t  try {\n\t    postId = getPostId(url);\n\t  } catch (error: any) {\n\t    return handleError(error);\n\t  }\n\t  try {\n\t    const postJson = await fetchPostJson(postId);\n", "    const response = makeSuccessResponse<VideoInfo>(postJson);\n\t    return NextResponse.json(response, { status: 200 });\n\t  } catch (error: any) {\n\t    return handleError(error);\n\t  }\n\t}\n"]}
