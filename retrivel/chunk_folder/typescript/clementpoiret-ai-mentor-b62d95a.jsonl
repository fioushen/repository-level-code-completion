{"filename": "src/main.ts", "chunked_list": ["import { addIcon, Menu, Notice, Plugin } from \"obsidian\"\n\timport { commands } from \"./ai/commands\"\n\timport { Individuals } from \"./ai/mentors\"\n\timport { MentorModel, ModelType } from \"./ai/model\"\n\timport { MentorIcon } from \"./assets/icons/mentor\"\n\timport { ChatView, VIEW_TYPE_CHAT } from \"./components/chatview\"\n\timport { MentorModal } from \"./components/modals\"\n\timport SettingTab from \"./settings\"\n\timport { supportedLanguage } from \"./types\"\n\tinterface MentorSettings {\n", "\tpreferredMentorId: string\n\t\tlanguage: supportedLanguage\n\t\ttoken: string\n\t\tmodel: ModelType\n\t}\n\tconst DEFAULT_SETTINGS: MentorSettings = {\n\t\tpreferredMentorId: \"default\",\n\t\tlanguage: \"en\",\n\t\ttoken: \"\",\n\t\tmodel: ModelType.Default,\n", "}\n\texport default class ObsidianMentor extends Plugin {\n\t\tsettings: MentorSettings = DEFAULT_SETTINGS\n\t\tasync onload() {\n\t\t\tawait this.loadSettings()\n\t\t\tthis.registerView(\n\t\t\t\tVIEW_TYPE_CHAT,\n\t\t\t\t(leaf) =>\n\t\t\t\t\tnew ChatView(\n\t\t\t\t\t\tleaf,\n", "\t\t\t\t\tthis.settings.token,\n\t\t\t\t\t\tthis.settings.preferredMentorId,\n\t\t\t\t\t\tthis.settings.model,\n\t\t\t\t\t\tthis.settings.language\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t// This creates an icon in the left ribbon.\n\t\t\taddIcon(\"aimentor\", MentorIcon)\n\t\t\tconst ribbonIconEl = this.addRibbonIcon(\n\t\t\t\t\"aimentor\",\n", "\t\t\t\"Mentor\",\n\t\t\t\t(evt: MouseEvent) => {\n\t\t\t\t\t// Called when the user clicks the icon.\n\t\t\t\t\tthis.activateView()\n\t\t\t\t}\n\t\t\t)\n\t\t\t// Perform additional things with the ribbon\n\t\t\tribbonIconEl.addClass(\"mentor-ribbon\")\n\t\t\t// This adds a settings tab so the user can configure various aspects of the plugin\n\t\t\tthis.addSettingTab(new SettingTab(this.app, this))\n", "\t\t// This adds a command that can be triggered with a hotkey.\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"open-mentor\",\n\t\t\t\tname: \"Open Mentor\",\n\t\t\t\tcallback: () => {\n\t\t\t\t\tthis.activateView()\n\t\t\t\t},\n\t\t\t})\n\t\t\t// AI COMMANDS\n\t\t\tconst alfred = new MentorModel(\n", "\t\t\t\"default\",\n\t\t\t\tIndividuals[\"default\"],\n\t\t\t\tthis.settings.model,\n\t\t\t\tthis.settings.token,\n\t\t\t\tthis.settings.language\n\t\t\t)\n\t\t\t// This adds the \"ELI5\" command.\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"eli5\",\n\t\t\t\tname: \"ELI5\",\n", "\t\t\teditorCallback: async (editor) => {\n\t\t\t\t\tconst title = \"Explain Like I'm 5\"\n\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\"Interesting, let me think...\"\n\t\t\t\t\t)\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tloadingModal.open()\n", "\t\t\t\t\t// Get the explanation\n\t\t\t\t\t\talfred\n\t\t\t\t\t\t\t.execute(selection, commands.explain)\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\t// Show the explanation\n\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\tnew MentorModal(\n\t\t\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\t\t\ttitle,\n", "\t\t\t\t\t\t\t\t\tresponse[0] // Only one possible response\n\t\t\t\t\t\t\t\t\t).open()\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Show an error\n\t\t\t\t\t\t\t\t\tnew Notice(\"Error: Could not get explanation.\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n\t\t\t\t\t}\n", "\t\t\t},\n\t\t\t})\n\t\t\t// Also add ELI5 to the right-click context menu\n\t\t\t// todo: clean to avoid code duplication\n\t\t\tthis.registerEvent(\n\t\t\t\tthis.app.workspace.on(\"editor-menu\", (menu: Menu, editor, view) => {\n\t\t\t\t\tmenu.addItem((item) => {\n\t\t\t\t\t\titem.setTitle(\"Explain Like I'm 5\")\n\t\t\t\t\t\titem.setIcon(\"aimentor\")\n\t\t\t\t\t\titem.onClick(() => {\n", "\t\t\t\t\t\tconst title = \"Explain Like I'm 5\"\n\t\t\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\"Interesting, let me think...\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tif (selection) {\n\t\t\t\t\t\t\t\tloadingModal.open()\n\t\t\t\t\t\t\t\t// Get the explanation\n", "\t\t\t\t\t\t\talfred\n\t\t\t\t\t\t\t\t\t.execute(selection, commands.explain)\n\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\t\t\t// Show the explanation\n\t\t\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\t\t\tnew MentorModal(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\t\t\t\tresponse[0] // Only one possible response\n", "\t\t\t\t\t\t\t\t\t\t).open()\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Show an error\n\t\t\t\t\t\t\t\t\t\t\tnew Notice(\n\t\t\t\t\t\t\t\t\t\t\t\t\"Error: Could not get explanation.\"\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n", "\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t)\n\t\t\t// This adds the \"redact\" command.\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"redact\",\n\t\t\t\tname: \"Redact\",\n\t\t\t\teditorCallback: async (editor) => {\n", "\t\t\t\tconst title = \"Redact\"\n\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\"Let me read and redact your note...\"\n\t\t\t\t\t)\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tloadingModal.open()\n\t\t\t\t\t\t// Get the redacted note\n", "\t\t\t\t\talfred\n\t\t\t\t\t\t\t.execute(selection, commands.redact)\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\tconst redactedNote = response[0]\n\t\t\t\t\t\t\t\t\t// append a new line to the end of the note\n\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\tconst note =\n\t\t\t\t\t\t\t\t\t\tselection +\n\t\t\t\t\t\t\t\t\t\t\"\\n\\n___\\n\\n\" +\n", "\t\t\t\t\t\t\t\t\tredactedNote +\n\t\t\t\t\t\t\t\t\t\t\"\\n\\n___\\n\\n\"\n\t\t\t\t\t\t\t\t\teditor.replaceSelection(note)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Show an error\n\t\t\t\t\t\t\t\t\tnew Notice(\"Error: Could not redact your note.\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n", "\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t\t// Also add redact to the right-click context menu\n\t\t\tthis.registerEvent(\n\t\t\t\tthis.app.workspace.on(\"editor-menu\", (menu: Menu, editor, view) => {\n\t\t\t\t\tmenu.addItem((item) => {\n\t\t\t\t\t\titem.setTitle(\"Redact\")\n\t\t\t\t\t\titem.setIcon(\"aimentor\")\n\t\t\t\t\t\titem.onClick(() => {\n", "\t\t\t\t\t\tconst title = \"Redact\"\n\t\t\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\"Let me read and redact your note...\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tif (selection) {\n\t\t\t\t\t\t\t\tloadingModal.open()\n\t\t\t\t\t\t\t\t// Get the redacted note\n", "\t\t\t\t\t\t\talfred\n\t\t\t\t\t\t\t\t\t.execute(selection, commands.redact)\n\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\t\t\tconst redactedNote = response[0]\n\t\t\t\t\t\t\t\t\t\t\t// append a new line to the end of the note\n\t\t\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\t\t\tconst note =\n\t\t\t\t\t\t\t\t\t\t\t\tselection +\n\t\t\t\t\t\t\t\t\t\t\t\t\"\\n\\n___\\n\\n\" +\n", "\t\t\t\t\t\t\t\t\t\t\tredactedNote +\n\t\t\t\t\t\t\t\t\t\t\t\t\"\\n\\n___\\n\\n\"\n\t\t\t\t\t\t\t\t\t\t\teditor.replaceSelection(note)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Show an error\n\t\t\t\t\t\t\t\t\t\t\tnew Notice(\n\t\t\t\t\t\t\t\t\t\t\t\t\"Error: Could not redact your note.\"\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n", "\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t)\n\t\t\t// This adds the \"enhance\" command.\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"enhance\",\n", "\t\t\tname: \"Enhance\",\n\t\t\t\teditorCallback: async (editor) => {\n\t\t\t\t\tconst title = \"Enhance my writing\"\n\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\"I am enhancing what you wrote...\"\n\t\t\t\t\t)\n\t\t\t\t\tif (selection) {\n", "\t\t\t\t\tloadingModal.open()\n\t\t\t\t\t\t// Get the redacted note\n\t\t\t\t\t\talfred\n\t\t\t\t\t\t\t.execute(selection, commands.enhance)\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\tconst [enhancedText, explanations] = response\n\t\t\t\t\t\t\t\t\t// replace the selection with the enhanced text\n\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\teditor.replaceSelection(enhancedText)\n", "\t\t\t\t\t\t\t\tnew MentorModal(\n\t\t\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\t\texplanations\n\t\t\t\t\t\t\t\t\t).open()\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Show an error\n\t\t\t\t\t\t\t\t\tnew Notice(\n\t\t\t\t\t\t\t\t\t\t\"Error: Could not enhance your note.\"\n\t\t\t\t\t\t\t\t\t)\n", "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t\t// Also add enhance to the right-click context menu\n\t\t\tthis.registerEvent(\n\t\t\t\tthis.app.workspace.on(\"editor-menu\", (menu: Menu, editor, view) => {\n", "\t\t\t\tmenu.addItem((item) => {\n\t\t\t\t\t\titem.setTitle(\"Enhance\")\n\t\t\t\t\t\titem.setIcon(\"aimentor\")\n\t\t\t\t\t\titem.onClick(() => {\n\t\t\t\t\t\t\tconst title = \"Enhance my writing\"\n\t\t\t\t\t\t\tconst selection = editor.getSelection()\n\t\t\t\t\t\t\tconst loadingModal = new MentorModal(\n\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\"I am enhancing what you wrote...\"\n", "\t\t\t\t\t\t)\n\t\t\t\t\t\t\tif (selection) {\n\t\t\t\t\t\t\t\tloadingModal.open()\n\t\t\t\t\t\t\t\t// Get the redacted note\n\t\t\t\t\t\t\t\talfred\n\t\t\t\t\t\t\t\t\t.execute(selection, commands.enhance)\n\t\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\t\t\t\tconst [enhancedText, explanations] =\n\t\t\t\t\t\t\t\t\t\t\t\tresponse\n", "\t\t\t\t\t\t\t\t\t\t// replace the selection with the enhanced text\n\t\t\t\t\t\t\t\t\t\t\tloadingModal.close()\n\t\t\t\t\t\t\t\t\t\t\teditor.replaceSelection(enhancedText)\n\t\t\t\t\t\t\t\t\t\t\tnew MentorModal(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\t\t\t\t\t\texplanations\n\t\t\t\t\t\t\t\t\t\t\t).open()\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Show an error\n", "\t\t\t\t\t\t\t\t\t\tnew Notice(\n\t\t\t\t\t\t\t\t\t\t\t\t\"Error: Could not enhance your note.\"\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnew Notice(\"Error: No text selected.\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n", "\t\t\t})\n\t\t\t)\n\t\t}\n\t\tasync activateView() {\n\t\t\t// Pass token from settings to the view\n\t\t\tthis.app.workspace.detachLeavesOfType(VIEW_TYPE_CHAT)\n\t\t\tawait this.app.workspace.getRightLeaf(false).setViewState({\n\t\t\t\ttype: VIEW_TYPE_CHAT,\n\t\t\t\tactive: true,\n\t\t\t})\n", "\t\tthis.app.workspace.revealLeaf(\n\t\t\t\tthis.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0]\n\t\t\t)\n\t\t}\n\t\tonunload() {\n\t\t\tthis.app.workspace.detachLeavesOfType(VIEW_TYPE_CHAT)\n\t\t}\n\t\tasync loadSettings() {\n\t\t\tthis.settings = Object.assign(\n\t\t\t\t{},\n", "\t\t\tDEFAULT_SETTINGS,\n\t\t\t\tawait this.loadData()\n\t\t\t)\n\t\t}\n\t\tasync saveSettings() {\n\t\t\tawait this.saveData(this.settings)\n\t\t}\n\t\tasync getCompletion() {\n\t\t\tconsole.log(\"OK\")\n\t\t}\n", "}\n"]}
{"filename": "src/types.ts", "chunked_list": ["import { GPTSettings } from \"./ai/model\"\n\texport type MultiLingualString = {\n\t\t[key: string]: string\n\t}\n\texport type supportedLanguage = \"en\" | \"fr\"\n\texport type Mentor = {\n\t\tname: MultiLingualString\n\t\tsystemPrompt: MultiLingualString\n\t\tfirstMessage: MultiLingualString\n\t\tsettings: GPTSettings\n", "}\n\texport type Role = \"system\" | \"user\" | \"assistant\"\n\texport interface Message {\n\t\trole: Role\n\t\tcontent: string\n\t}\n"]}
{"filename": "src/utils.ts", "chunked_list": ["export const pythonifyKeys = (obj: any) =>\n\t\tObject.keys(obj).reduce((acc, key) => {\n\t\t\t// From `obsidian-gpt` plugin\n\t\t\tconst modifiedKey = key.replace(/([A-Z])/g, function f(g) {\n\t\t\t\treturn \"_\" + g.toLowerCase()\n\t\t\t})\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t...{ [modifiedKey]: obj[key] },\n\t\t\t}\n", "\t}, {})\n"]}
{"filename": "src/settings.ts", "chunked_list": ["import {\n\t\tApp,\n\t\tButtonComponent,\n\t\tPluginSettingTab,\n\t\tSetting,\n\t\tTextComponent,\n\t} from \"obsidian\"\n\timport { Topics, Individuals } from \"./ai/mentors\"\n\timport { ModelType } from \"./ai/model\"\n\timport ObsidianMentor from \"./main\"\n", "import { Mentor, supportedLanguage } from \"./types\"\n\texport default class SettingTab extends PluginSettingTab {\n\t\tplugin: ObsidianMentor\n\t\tconstructor(app: App, plugin: ObsidianMentor) {\n\t\t\tsuper(app, plugin)\n\t\t\tthis.plugin = plugin\n\t\t}\n\t\tdisplay(): void {\n\t\t\tconst { containerEl } = this\n\t\t\tcontainerEl.empty()\n", "\t\tcontainerEl.createEl(\"h2\", { text: \"Settings for your mentor\" })\n\t\t\tconst mentorList: Record<string, Mentor> = {\n\t\t\t\t...Topics,\n\t\t\t\t...Individuals,\n\t\t\t}\n\t\t\tconst mentorIds = mentorList ? Object.keys(mentorList) : []\n\t\t\tnew Setting(containerEl)\n\t\t\t\t.setName(\"Language\")\n\t\t\t\t.setDesc(\"The language you'd like to talk to your mentor in.\")\n\t\t\t\t.addDropdown((dropdown) => {\n", "\t\t\t\tdropdown.addOption(\"en\", \"English\")\n\t\t\t\t\tdropdown.addOption(\"fr\", \"Français\")\n\t\t\t\t\tdropdown.setValue(this.plugin.settings.language || \"en\")\n\t\t\t\t\tdropdown.onChange((value) => {\n\t\t\t\t\t\tthis.plugin.settings.language = value as supportedLanguage\n\t\t\t\t\t\tthis.plugin.saveSettings()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\tnew Setting(containerEl)\n\t\t\t\t.setName(\"Preferred Mentor\")\n", "\t\t\t.setDesc(\"The mentor you'd like to talk to in priority.\")\n\t\t\t\t.addDropdown((dropdown) => {\n\t\t\t\t\tmentorIds.forEach((id) => {\n\t\t\t\t\t\tdropdown.addOption(id, mentorList[id].name.en)\n\t\t\t\t\t})\n\t\t\t\t\tdropdown.setValue(\n\t\t\t\t\t\tthis.plugin.settings.preferredMentorId || \"default\"\n\t\t\t\t\t)\n\t\t\t\t\tdropdown.onChange((value) => {\n\t\t\t\t\t\tthis.plugin.settings.preferredMentorId = value\n", "\t\t\t\t\tthis.plugin.saveSettings()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\tnew Setting(containerEl)\n\t\t\t\t.setName(\"OpenAI API Key\")\n\t\t\t\t.setDesc(\"The token generated in your OpenAI dashboard.\")\n\t\t\t\t.addText((text: TextComponent) => {\n\t\t\t\t\ttext.setPlaceholder(\"Token\")\n\t\t\t\t\t\t.setValue(this.plugin.settings.token || \"\")\n\t\t\t\t\t\t.onChange((change) => {\n", "\t\t\t\t\t\tthis.plugin.settings.token = change\n\t\t\t\t\t\t\tthis.plugin.saveSettings()\n\t\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.addButton((button: ButtonComponent) => {\n\t\t\t\t\tbutton.setButtonText(\"Generate token\")\n\t\t\t\t\tbutton.onClick((evt: MouseEvent) => {\n\t\t\t\t\t\twindow.open(\"https://platform.openai.com/account/api-keys\")\n\t\t\t\t\t})\n\t\t\t\t})\n", "\t\tnew Setting(containerEl)\n\t\t\t\t.setName(\"Preferred Model\")\n\t\t\t\t.setDesc(\"The model you want to use.\")\n\t\t\t\t.addDropdown((dropdown) => {\n\t\t\t\t\tdropdown.addOption(\"gpt-3.5-turbo\", \"GPT-3.5 Turbo\")\n\t\t\t\t\tdropdown.addOption(\"gpt-3.5-turbo-16k\", \"GPT-3.5 Turbo 16k\")\n\t\t\t\t\tdropdown.addOption(\"gpt-4\", \"GPT-4\")\n\t\t\t\t\tdropdown.addOption(\"text-davinci-003\", \"Davinci 003\")\n\t\t\t\t\tdropdown.setValue(this.plugin.settings.model || \"gpt-3.5-turbo\")\n\t\t\t\t\tdropdown.onChange((value) => {\n", "\t\t\t\t\tthis.plugin.settings.model = value as ModelType\n\t\t\t\t\t\tthis.plugin.saveSettings()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t}\n\t}\n"]}
{"filename": "src/components/chatview.ts", "chunked_list": ["import { ItemView, Notice, WorkspaceLeaf } from \"obsidian\"\n\timport { Individuals, Topics } from \"../ai/mentors\"\n\timport { MentorModel, ModelType } from \"../ai/model\"\n\timport { CleanIcon } from \"../assets/icons/clean\"\n\timport { CopyIcon } from \"../assets/icons/copy\"\n\timport { SendIcon } from \"../assets/icons/send\"\n\timport { Mentor, Message, supportedLanguage } from \"../types\"\n\texport const VIEW_TYPE_CHAT = \"mentor-chat-view\"\n\texport class ChatView extends ItemView {\n\t\tpreferredMentorId = \"default\"\n", "\tpreferredLanguage = \"en\"\n\t\tmodel: ModelType\n\t\tfirstOpen = true\n\t\t// isTyping = false\n\t\tdisplayedMessages: Message[] = []\n\t\t// Merge the two Record<string, Mentor> objects into one.\n\t\tmentorList: Record<string, Mentor> = {\n\t\t\t...Topics,\n\t\t\t...Individuals,\n\t\t}\n", "\tmentor: MentorModel\n\t\tconstructor(\n\t\t\tleaf: WorkspaceLeaf,\n\t\t\ttoken: string,\n\t\t\tpreferredMentorId: string,\n\t\t\tmodel: ModelType,\n\t\t\tpreferredLanguage: supportedLanguage\n\t\t) {\n\t\t\tsuper(leaf)\n\t\t\tthis.preferredMentorId = preferredMentorId\n", "\t\tthis.preferredLanguage = preferredLanguage\n\t\t\tthis.model = model\n\t\t\t// Mentor selection.\n\t\t\tconst selectedMentor = this.mentorList[preferredMentorId]\n\t\t\tthis.mentor = new MentorModel(\n\t\t\t\tpreferredMentorId,\n\t\t\t\tselectedMentor,\n\t\t\t\tthis.model,\n\t\t\t\ttoken,\n\t\t\t\tpreferredLanguage\n", "\t\t)\n\t\t}\n\t\tcurrentInput = \"\"\n\t\tloadingMessage: Message = { role: \"assistant\", content: \"...\" }\n\t\tgetViewType() {\n\t\t\treturn VIEW_TYPE_CHAT\n\t\t}\n\t\tgetDisplayText() {\n\t\t\treturn \"AI Mentor\"\n\t\t}\n", "\tgetIcon(): string {\n\t\t\treturn \"aimentor\"\n\t\t}\n\t\tasync onOpen() {\n\t\t\t// if this is the first time the view is opened, we need to load the choosen mentor from the settings\n\t\t\tif (this.firstOpen) {\n\t\t\t\tthis.firstOpen = false\n\t\t\t\tthis.handleMentorChange(this.preferredMentorId)\n\t\t\t}\n\t\t\tconst chatView = this.containerEl.children[1]\n", "\t\tchatView.empty()\n\t\t\tchatView.addClass(\"main-container\")\n\t\t\tconst container = chatView.createDiv()\n\t\t\tcontainer.addClass(\"chat\")\n\t\t\tcontainer.createEl(\"h4\", { text: \"Your AI Mentor\" })\n\t\t\tconst mentorDiv = container.createDiv()\n\t\t\tmentorDiv.addClass(\"chat__mentor\")\n\t\t\tconst mentorText = mentorDiv.createEl(\"p\", { text: \"Select a mentor:\" })\n\t\t\tmentorText.addClass(\"chat__mentor-text\")\n\t\t\tconst selectEl = mentorDiv.createEl(\"select\")\n", "\t\tselectEl.addClass(\"chat__mentor-select\")\n\t\t\t// Create groups for categories of AI mentors.\n\t\t\tconst topicsGroup = selectEl.createEl(\"optgroup\")\n\t\t\ttopicsGroup.label = \"By Topic\"\n\t\t\tconst individualsGroup = selectEl.createEl(\"optgroup\")\n\t\t\tindividualsGroup.label = \"Famous Individuals\"\n\t\t\tfor (const mentor of Object.entries(Topics)) {\n\t\t\t\tconst optionEl = topicsGroup.createEl(\"option\")\n\t\t\t\toptionEl.value = mentor[0]\n\t\t\t\toptionEl.text = mentor[1].name[this.preferredLanguage]\n", "\t\t}\n\t\t\tfor (const mentor of Object.entries(Individuals)) {\n\t\t\t\tconst optionEl = individualsGroup.createEl(\"option\")\n\t\t\t\toptionEl.value = mentor[0]\n\t\t\t\toptionEl.text = mentor[1].name[this.preferredLanguage]\n\t\t\t}\n\t\t\tselectEl.onchange = (evt) => {\n\t\t\t\tthis.handleMentorChange((evt.target as HTMLSelectElement).value)\n\t\t\t}\n\t\t\tselectEl.value = this.mentor.id\n", "\t\t// Display messages in the chat.\n\t\t\tconst chatDiv = container.createDiv()\n\t\t\tchatDiv.addClass(\"chat__messages\")\n\t\t\t// Add history to selectedMentor.firstMessage\n\t\t\t// const firstMessage: Message = {\n\t\t\t// \trole: \"assistant\",\n\t\t\t// \tcontent: selectedMentor.firstMessage[this.preferredLanguage],\n\t\t\t// }\n\t\t\t// Add the first message to the chat.\n\t\t\tconst history =\n", "\t\t\tthis.mentor.history.filter(\n\t\t\t\t\t(message: Message) => message.role !== \"system\"\n\t\t\t\t) || []\n\t\t\tfor (const message of this.displayedMessages) {\n\t\t\t\t// Contains text and icon.\n\t\t\t\tconst messageDiv = chatDiv.createDiv()\n\t\t\t\tmessageDiv.addClass(\"chat__message-container\")\n\t\t\t\tmessageDiv.addClass(`chat__message-container--${message.role}`)\n\t\t\t\t// Add the message text.\n\t\t\t\tconst messageEl = messageDiv.createEl(\"p\", {\n", "\t\t\t\ttext: message.content,\n\t\t\t\t})\n\t\t\t\tmessageEl.addClass(\"chat__message\")\n\t\t\t\tmessageEl.addClass(`chat__message--${message.role}`)\n\t\t\t\t// Add an icon button to next to the message to copy it.\n\t\t\t\t// Defaults to hidden.\n\t\t\t\tconst actionButton = messageDiv.createEl(\"button\")\n\t\t\t\tactionButton.addClass(\"icon-button\")\n\t\t\t\tactionButton.addClass(\"clickable-icon\")\n\t\t\t\tactionButton.addClass(\"icon-button--hidden\")\n", "\t\t\tactionButton.innerHTML = CopyIcon\n\t\t\t\tactionButton.onclick = () => {\n\t\t\t\t\tnavigator.clipboard.writeText(message.content)\n\t\t\t\t\tnew Notice(\"Copied to clipboard.\")\n\t\t\t\t}\n\t\t\t\t// When the user hovers over the message, show the copy button.\n\t\t\t\tmessageDiv.onmouseenter = () => {\n\t\t\t\t\tactionButton.removeClass(\"icon-button--hidden\")\n\t\t\t\t}\n\t\t\t\tmessageDiv.onmouseleave = () => {\n", "\t\t\t\tactionButton.addClass(\"icon-button--hidden\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add a text input.\n\t\t\t// Dealing with Textarea Height\n\t\t\tfunction calcHeight(value: string) {\n\t\t\t\tconst numberOfLineBreaks = (value.match(/\\n/g) || []).length\n\t\t\t\t// min-height + lines x line-height + padding + border\n\t\t\t\tconst newHeight = 16 + numberOfLineBreaks * 16 + 12 + 2\n\t\t\t\treturn newHeight\n", "\t\t}\n\t\t\tconst interationDiv = container.createDiv()\n\t\t\tinterationDiv.addClass(\"chat__interaction-container\")\n\t\t\tconst inputEl = interationDiv.createEl(\"textarea\")\n\t\t\tinputEl.placeholder = \"Ask a question...\"\n\t\t\tinputEl.addClass(\"chat__input\")\n\t\t\tinputEl.oninput = (evt) => {\n\t\t\t\tthis.currentInput = (evt.target as HTMLInputElement).value\n\t\t\t}\n\t\t\tinputEl.onkeydown = (evt) => {\n", "\t\t\tif (!evt.shiftKey) {\n\t\t\t\t\tif (evt.key === \"Enter\") {\n\t\t\t\t\t\tthis.handleSend()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinputEl.onkeyup = (evt) => {\n\t\t\t\t// Resize the input element to fit the text.\n\t\t\t\tinputEl.style.height = calcHeight(this.currentInput) + \"px\"\n\t\t\t}\n", "\t\t// Add a send button.\n\t\t\tconst sendButton = interationDiv.createEl(\"button\")\n\t\t\tsendButton.addClass(\"icon-button\")\n\t\t\tsendButton.addClass(\"clickable-icon\")\n\t\t\tsendButton.innerHTML = SendIcon\n\t\t\tsendButton.onclick = () => this.handleSend()\n\t\t\t// Add a button to clear the chat.\n\t\t\tconst clearButton = interationDiv.createEl(\"button\")\n\t\t\tclearButton.addClass(\"icon-button\")\n\t\t\tclearButton.addClass(\"clickable-icon\")\n", "\t\tclearButton.innerHTML = CleanIcon\n\t\t\tclearButton.onclick = () => this.handleClear()\n\t\t}\n\t\tasync onClose() {\n\t\t\t// Nothing to clean up.\n\t\t}\n\t\tasync handleMentorChange(id: string) {\n\t\t\tconst newMentor = this.mentorList[id]\n\t\t\tthis.mentor.changeIdentity(id, newMentor)\n\t\t\tthis.displayedMessages = [\n", "\t\t\t{\n\t\t\t\t\trole: \"assistant\",\n\t\t\t\t\tcontent: newMentor.firstMessage[this.preferredLanguage],\n\t\t\t\t},\n\t\t\t]\n\t\t\t// Refresh the view.\n\t\t\tawait this.onOpen()\n\t\t}\n\t\tasync handleKeywordsInPrompt(prompt: string): Promise<string> {\n\t\t\t// Todo: return a prompt that do not contain the note to be inserted in the chat\n", "\t\tif (prompt.includes(\"@current-note\")) {\n\t\t\t\tconst noteFile = this.app.workspace.getActiveFile()\n\t\t\t\tif (!noteFile || !noteFile.name) {\n\t\t\t\t\tnew Notice(\"Please open a note to use @current-note.\")\n\t\t\t\t\treturn prompt\n\t\t\t\t}\n\t\t\t\tconst text = await this.app.vault.read(noteFile)\n\t\t\t\tprompt = prompt.replace(\"@current-note\", text)\n\t\t\t\treturn prompt\n\t\t\t}\n", "\t\treturn prompt\n\t\t}\n\t\tasync handleSend() {\n\t\t\t// Don't send empty messages.\n\t\t\tif (this.currentInput === \"\") {\n\t\t\t\tnew Notice(\"Cannot send empty messages.\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Wait for the mentor to respond.\n\t\t\tif (\n", "\t\t\tthis.mentor.history.length !== 0 &&\n\t\t\t\tthis.mentor.history[this.mentor.history.length - 1].role === \"user\"\n\t\t\t) {\n\t\t\t\tnew Notice(\"Please wait for your mentor to respond.\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst prompt = await this.handleKeywordsInPrompt(this.currentInput)\n\t\t\t// Display the prompt\n\t\t\tthis.displayedMessages.push({\n\t\t\t\trole: \"user\",\n", "\t\t\tcontent: prompt,\n\t\t\t})\n\t\t\t// Add the loading message\n\t\t\tthis.displayedMessages.push(this.loadingMessage)\n\t\t\t// Refresh the view.\n\t\t\tawait this.onOpen()\n\t\t\tthis.mentor\n\t\t\t\t.getCompletion(prompt)\n\t\t\t\t.then(async (response) => {\n\t\t\t\t\t// Clear the input.\n", "\t\t\t\tthis.currentInput = \"\"\n\t\t\t\t\t// Display the response.\n\t\t\t\t\tthis.displayedMessages.pop()\n\t\t\t\t\tthis.displayedMessages.push({\n\t\t\t\t\t\trole: \"assistant\",\n\t\t\t\t\t\tcontent: response,\n\t\t\t\t\t})\n\t\t\t\t\t// Refresh the view.\n\t\t\t\t\tawait this.onOpen()\n\t\t\t\t})\n", "\t\t\t.catch(async (error) => {\n\t\t\t\t\tconsole.log(\"error\", error)\n\t\t\t\t\t// Clear the input.\n\t\t\t\t\tthis.currentInput = \"\"\n\t\t\t\t\t// Display the error message.\n\t\t\t\t\tthis.displayedMessages.pop()\n\t\t\t\t\tthis.displayedMessages.push({\n\t\t\t\t\t\trole: \"assistant\",\n\t\t\t\t\t\tcontent: \"An error occurred. Please try again.\",\n\t\t\t\t\t})\n", "\t\t\t\t// Refresh the view.\n\t\t\t\t\tawait this.onOpen()\n\t\t\t\t})\n\t\t}\n\t\tasync handleClear() {\n\t\t\t// Keep only the first message.\n\t\t\tthis.mentor.reset()\n\t\t\t// Clear the displayed messages.\n\t\t\tthis.displayedMessages = [\n\t\t\t\t{\n", "\t\t\t\trole: \"assistant\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tthis.mentor.mentor.firstMessage[this.preferredLanguage],\n\t\t\t\t},\n\t\t\t]\n\t\t\t// Refresh the view.\n\t\t\tawait this.onOpen()\n\t\t}\n\t}\n"]}
{"filename": "src/components/modals.ts", "chunked_list": ["import { App, Modal, Notice } from \"obsidian\"\n\texport class MentorModal extends Modal {\n\t\ttitle = \"\"\n\t\tdisplayedText = \"\"\n\t\tconstructor(app: App, title: string, displayedText: string) {\n\t\t\tsuper(app)\n\t\t\tthis.title = title\n\t\t\tthis.displayedText = displayedText\n\t\t}\n\t\tonOpen() {\n", "\t\tconst { contentEl } = this\n\t\t\tconst titleEl = contentEl.createDiv(\"title\")\n\t\t\ttitleEl.addClass(\"modal__title\")\n\t\t\ttitleEl.setText(this.title)\n\t\t\tconst textEl = contentEl.createDiv(\"text\")\n\t\t\ttextEl.addClass(\"modal__text\")\n\t\t\ttextEl.setText(this.displayedText)\n\t\t\t// Copy text when clicked\n\t\t\ttextEl.addEventListener(\"click\", () => {\n\t\t\t\tnavigator.clipboard.writeText(this.displayedText)\n", "\t\t\tnew Notice(\"Copied to clipboard\")\n\t\t\t})\n\t\t\ttextEl.addEventListener(\"contextmenu\", () => {\n\t\t\t\tnavigator.clipboard.writeText(this.displayedText)\n\t\t\t\tnew Notice(\"Copied to clipboard\")\n\t\t\t})\n\t\t}\n\t\tonClose() {\n\t\t\tconst { contentEl } = this\n\t\t\tcontentEl.empty()\n", "\t}\n\t}\n"]}
{"filename": "src/ai/model.ts", "chunked_list": ["// Inspired by `https://github.com/jmilldotdev/obsidian-gpt/blob/main/src/models/chatGPT.ts`\n\timport { RequestUrlParam, request } from \"obsidian\"\n\timport { pythonifyKeys } from \"src/utils\"\n\timport { Command } from \"./commands\"\n\timport { Individuals, Topics } from \"./mentors\"\n\timport { Mentor, Message, supportedLanguage } from \"../types\"\n\texport enum ModelType {\n\t\tDefault = \"gpt-3.5-turbo\",\n\t\tGPT3516k = \"gpt-3.5-turbo-16k\",\n\t\tGPT4 = \"gpt-4\",\n", "\tDavinci = \"text-davinci-003\",\n\t}\n\texport interface GPTSettings {\n\t\tmaxTokens: number\n\t\ttemperature: number\n\t\ttopP: number\n\t\tpresencePenalty: number\n\t\tfrequencyPenalty: number\n\t\tstop: string[]\n\t}\n", "export const defaultSettings: GPTSettings = {\n\t\tmaxTokens: 200,\n\t\ttemperature: 1.0,\n\t\ttopP: 1.0,\n\t\tpresencePenalty: 0,\n\t\tfrequencyPenalty: 0,\n\t\tstop: [],\n\t}\n\texport class MentorModel {\n\t\tapiUrl = `https://api.openai.com/v1/chat/completions`\n", "\tid: string\n\t\tmentor: Mentor\n\t\tmodel: ModelType\n\t\tapiKey: string\n\t\tpreferredLanguage: supportedLanguage\n\t\thistory: Message[]\n\t\tsuffix: string | undefined = undefined\n\t\theaders\n\t\tconstructor(\n\t\t\tid: string,\n", "\t\tmentor: Mentor,\n\t\t\tmodel: ModelType,\n\t\t\tapiKey: string,\n\t\t\tpreferredLanguage: supportedLanguage,\n\t\t\tsuffix?: string\n\t\t) {\n\t\t\tthis.id = id\n\t\t\tthis.mentor = mentor\n\t\t\tthis.model = model\n\t\t\tthis.apiKey = apiKey\n", "\t\tthis.preferredLanguage = preferredLanguage\n\t\t\tthis.history = [\n\t\t\t\t{ role: \"system\", content: mentor.systemPrompt[preferredLanguage] },\n\t\t\t]\n\t\t\tthis.suffix = suffix\n\t\t\tthis.headers = {\n\t\t\t\tAuthorization: `Bearer ${this.apiKey}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t}\n\t\t}\n", "\tasync getCompletion(message: string): Promise<string> {\n\t\t\tconst params = this.mentor.settings\n\t\t\t// Check that API Key is set\n\t\t\tif (!this.apiKey) {\n\t\t\t\treturn \"Please set your OpenAI API key in the settings.\"\n\t\t\t}\n\t\t\t// Check that the model is set\n\t\t\tif (!this.model) {\n\t\t\t\treturn \"Please set your OpenAI model in the settings.\"\n\t\t\t}\n", "\t\t// Check that the message is not empty\n\t\t\tif (!message) {\n\t\t\t\treturn \"Please enter a message.\"\n\t\t\t}\n\t\t\tconst messages = [...this.history, { role: \"user\", content: message }]\n\t\t\tconst body = {\n\t\t\t\tmessages,\n\t\t\t\tmodel: this.model,\n\t\t\t\t...pythonifyKeys(params),\n\t\t\t\tstop: params.stop.length > 0 ? params.stop : undefined,\n", "\t\t\tsuffix: this.suffix,\n\t\t\t}\n\t\t\tconst headers = this.headers\n\t\t\tconst requestUrlParam: RequestUrlParam = {\n\t\t\t\turl: this.apiUrl,\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tcontentType: \"application/json\",\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\theaders,\n\t\t\t}\n", "\t\tthis.history.push({ role: \"user\", content: message })\n\t\t\tconst answer = await request(requestUrlParam)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tconst answer =\n\t\t\t\t\t\tJSON.parse(response)?.choices?.[0]?.message?.content\n\t\t\t\t\tthis.history.push({ role: \"assistant\", content: answer })\n\t\t\t\t\treturn answer\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(err)\n", "\t\t\t\treturn \"I got an error when trying to reply.\"\n\t\t\t\t})\n\t\t\treturn answer\n\t\t}\n\t\tasync execute(text: string, command: Command): Promise<string[]> {\n\t\t\tconst params = command.settings\n\t\t\tconst mentorList: Record<string, Mentor> = {\n\t\t\t\t...Topics,\n\t\t\t\t...Individuals,\n\t\t\t}\n", "\t\tconst requestedMentor = mentorList[command.mentor]\n\t\t\tconst prompts = command.pattern.map((prompt) => {\n\t\t\t\treturn prompt[this.preferredLanguage].replace(\"*\", text)\n\t\t\t})\n\t\t\tthis.history = [\n\t\t\t\t{\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent: requestedMentor.systemPrompt[this.preferredLanguage],\n\t\t\t\t},\n\t\t\t\tcommand.prompt[this.preferredLanguage],\n", "\t\t]\n\t\t\tconst answers: string[] = []\n\t\t\tfor (const prompt of prompts) {\n\t\t\t\tthis.history.push({ role: \"user\", content: prompt })\n\t\t\t\tconst body = {\n\t\t\t\t\tmessages: this.history,\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t...pythonifyKeys(params),\n\t\t\t\t\tstop: params.stop.length > 0 ? params.stop : undefined,\n\t\t\t\t\tsuffix: this.suffix,\n", "\t\t\t}\n\t\t\t\tconst headers = this.headers\n\t\t\t\tconst requestUrlParam: RequestUrlParam = {\n\t\t\t\t\turl: this.apiUrl,\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tcontentType: \"application/json\",\n\t\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\t\theaders,\n\t\t\t\t}\n\t\t\t\tconst answer = await request(requestUrlParam)\n", "\t\t\t\t.then((response) => {\n\t\t\t\t\t\treturn JSON.parse(response)?.choices?.[0]?.message?.content\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconsole.error(err)\n\t\t\t\t\t\treturn \"I got an error when trying to reply.\"\n\t\t\t\t\t})\n\t\t\t\tthis.history.push({ role: \"assistant\", content: answer })\n\t\t\t\tanswers.push(answer)\n\t\t\t}\n", "\t\t// Reset history\n\t\t\tthis.reset()\n\t\t\treturn answers\n\t\t}\n\t\tchangeIdentity(id: string, newMentor: Mentor) {\n\t\t\tthis.id = id\n\t\t\tthis.mentor = newMentor\n\t\t\tthis.history = [\n\t\t\t\t{\n\t\t\t\t\trole: \"system\",\n", "\t\t\t\tcontent: newMentor.systemPrompt[this.preferredLanguage],\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\t\treset() {\n\t\t\tthis.history = [\n\t\t\t\t{\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent: this.mentor.systemPrompt[this.preferredLanguage],\n\t\t\t\t},\n", "\t\t]\n\t\t}\n\t}\n"]}
{"filename": "src/ai/commands.ts", "chunked_list": ["import { GPTSettings } from \"./model\"\n\timport { Message, MultiLingualString, supportedLanguage } from \"../types\"\n\texport interface Command {\n\t\tmentor: string\n\t\tprompt: Record<supportedLanguage, Message>\n\t\tpattern: MultiLingualString[]\n\t\tsettings: GPTSettings\n\t}\n\texport const commands: Record<string, Command> = {\n\t\texplain: {\n", "\t\tmentor: \"science\",\n\t\t\tprompt: {\n\t\t\t\ten: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"Now, your only job is to explain any concepts in an easy-to-understand manner. I will give you a text, and you will only reply with an explanation. This could include providing examples or breaking down complex ideas into smaller pieces that are easier to comprehend.\",\n\t\t\t\t},\n\t\t\t\tfr: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n", "\t\t\t\t\t\"Maintenant, ta tâche est d'expliquer n'importe quel concept de la façon la plus simple possible. Je vais te donner un texte, et tu vas répondre uniquement avec une explication. Elle peut inclure des exemples, ou décomposer des idées complexes en des idées plus simples et plus faciles à comprendre.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tpattern: [{ fr: 'Explique: \"*\"', en: 'Explain: \"*\"' }],\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 500,\n\t\t\t\ttemperature: 0.5, // Lower than defaults for fact-checking\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n", "\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t\tredact: {\n\t\t\tmentor: \"default\",\n\t\t\tprompt: {\n\t\t\t\ten: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"I took notes in a bullet-point format. Organize all the notes and provide 1 or 2 paragraphs for each. Provide definitions or examples if complex ideas are present. All notes have to be in the redacted text. Do not provide any explanations, only the redacted text. Use Markdown to give subtitles. Emphasize important points in bold.\",\n", "\t\t\t},\n\t\t\t\tfr: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"J'ai pris des notes sous forme de liste à puces. Organise mes notes et rédige 1 ou 2 paragraphes pour chaque point. Donne des définitions ou des exemples si des idées complexes sont présentes. Tous les points doivent être mentionnés dans le texte rédigé. Ne donne pas d'explications, juste le texte rédigé. Utilise du Markdown pour les sous-titres. Indique les points importants en gras.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tpattern: [{ fr: 'Mes notes sont : \"*\"', en: 'My notes are: \"*\"' }],\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 2000,\n", "\t\t\ttemperature: 0.7, // todo: lower this?\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n\t\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t\tenhance: {\n\t\t\tmentor: \"default\",\n\t\t\tprompt: {\n", "\t\t\ten: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"I will provide you with a text and you will enhance it. You will correct any grammar, spelling, and syntax errors. Using upper-level English words and sentences, you will make my sentences more beautiful and elegant. Keep the exact same meaning. Any change you make must respect the original style of the text. Only reply with the enhanced text. Provide explanations for your changes if and only if I ask you to do so.\",\n\t\t\t\t},\n\t\t\t\tfr: {\n\t\t\t\t\trole: \"system\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"Je vais te donner un texte et tu vas l'améliorer. Tu vas corriger les fautes d'orthographe, grammaire et syntaxe. En utilisant des mots et phrases avec un meilleur niveau de français, tu vas rendre mes phrases plus belles et élégantes. Préserve le sens exact du texte. Chaque changement que tu fais doit respecter le style original du texte. Ne répond qu'avec le texte amélioré. N'explique tes changements que si et seulement si je te le demande.\",\n\t\t\t\t},\n", "\t\t},\n\t\t\tpattern: [\n\t\t\t\t{ fr: 'Améliore : \"*\"', en: 'Enhance: \"*\"' },\n\t\t\t\t{\n\t\t\t\t\tfr: \"Explique-moi les changements que tu as fait.\",\n\t\t\t\t\ten: \"Explain to me the changes you have made.\",\n\t\t\t\t},\n\t\t\t],\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 2000,\n", "\t\t\ttemperature: 0.7, // todo: lower this?\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n\t\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t}\n"]}
{"filename": "src/ai/mentors.ts", "chunked_list": ["import { Mentor } from \"../types\"\n\texport const Topics: Record<string, Mentor> = {\n\t\tscience: {\n\t\t\tname: { en: \"Science Genius\", fr: \"Génie des sciences\" },\n\t\t\tsystemPrompt: {\n\t\t\t\ten: \"Let's play a game. Act as a talented scientist with a Ph.D. You have the IQ of Einstein, Nikola Tesla, and Stephen Hawking combined. For epistemology, you combine the best of Thomas Kuhn, Karl Popper, and Paul Feyerabend. You specialized in physics, chemistry, biology, computer sciences, and mathematics. You will be my mentor and help me strengthen my scientific literacy and my scientific work. If I ask you to review my work, you act as a journal reviewer: you will need to review and critique articles submitted for publication by critically evaluating their research, approach, methodologies, and conclusions and offering constructive criticism of their strengths and weaknesses.\",\n\t\t\t\tfr: \"Jouons à un jeu. Agis comme un scientifique talentueux avec un doctorat. Tu as le QI d'Einstein, Nikola Tesla et Stephen Hawking combinés. En épistémologie, tu combines le meilleur de Thomas Kuhn, Karl Popper et Paul Feyerabend. Tu es spécialisé en physique, chimie, biologie, informatique et mathématiques. Tu es mon mentor et vas m'aider à améliorer ma culture scientifique et mes travaux scientifiques. Si je te demande de juger mon travail, tu agiras en reviewer de journal scientifique : tu devras examiner et critiquer les articles soumis à la publication en évaluant de manière critique leur recherche, approche, méthodologies et leurs conclusions et en offrant des critiques constructives sur leurs forces et leurs faiblesses.\",\n\t\t\t},\n\t\t\tfirstMessage: {\n\t\t\t\ten: \"Hello, I am a highly accomplished scientist with expertise in physics, chemistry, biology, computer sciences, and mathematics. I have a Ph.D. and a deep understanding of epistemology, combining the best of Thomas Kuhn, Karl Popper, and Paul Feyerabend. As your mentor, I am here to help strengthen your scientific literacy and work. How can I assist you today?\",\n", "\t\t\tfr: \"Bonjour, je suis un scientifique hautement qualifié avec une expertise en physique, chimie, biologie, informatique et mathématiques. J'ai un doctorat et une compréhension approfondie de l'épistémologie, combinant le meilleur de Thomas Kuhn, Karl Popper et Paul Feyerabend. En tant que votre mentor, je suis là pour vous aider à renforcer votre culture scientifique et votre travail. Comment puis-je vous aider aujourd'hui?\",\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 1000,\n\t\t\t\ttemperature: 0.5,\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n\t\t\t\tstop: [],\n\t\t\t},\n", "\t},\n\t\tit: {\n\t\t\tname: {\n\t\t\t\ten: \"IT & Programming Expert\",\n\t\t\t\tfr: \"Expert en informatique et programmation\",\n\t\t\t},\n\t\t\tsystemPrompt: {\n\t\t\t\ten: \"Let's play a game. I want you to act as an IT and programming Expert. You have the level of a Senior Fullstack Software Developer. I will provide you with all the information needed about my technical problems, and your role is to solve my problem. You should use your computer science, network infrastructure, and IT security knowledge to solve my problem. Using intelligent and understandable language for people of all levels in your answers will be helpful. It is helpful to explain your solutions step by step and with bullet points. Try to avoid too many technical details, but use them when necessary. I want you to reply with the solution and explanations only for complex logic.\",\n\t\t\t\tfr: \"Jouons à un jeu. Je veux que tu agisses comme un expert en informatique et programmation. Tu as le niveau d'un développeur logiciel senior fullstack. Je te fournirai toutes les informations nécessaires sur mes problèmes techniques, et ton rôle est de résoudre mon problème. Tu dois utiliser tes connaissances en informatique, en infrastructure réseau et en sécurité informatique pour résoudre mon problème. L'utilisation d'un langage précis et compréhensible pour les personnes de tout niveau dans tes réponses sera utile. Il est utile d'expliquer tes solutions étape par étape et avec des listes à puces. Utilise des détails techniques uniquement lorsque cela est nécessaire. Je veux que tu répondes avec la solution, et des explications uniquement pour les logiques complexes.\",\n\t\t\t},\n", "\t\tfirstMessage: {\n\t\t\t\ten: \"Hi there! I'm an AI language model with the expertise of a Senior Fullstack Software Developer. I'm excited to help you with any technical problems you may have. Let's get started!\",\n\t\t\t\tfr: \"Salut! Je suis un modèle de langage avec l'expertise d'un dev Fullstack sénior. Je suis impatient de t'aider pour n'importe quel problème technique que tu pourrais rencontrer !\",\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 800,\n\t\t\t\ttemperature: 0.5,\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n", "\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t}\n\texport const Individuals: Record<string, Mentor> = {\n\t\tdefault: {\n\t\t\tname: { en: \"Alfred\", fr: \"Alfred\" },\n\t\t\tsystemPrompt: {\n\t\t\t\ten: \"Let's play a game. I want you to act as Alfred, my AI writing tutor as talented as Ernest Hemingway. You are an experienced English translator, spelling corrector, and improver. You know every note-taking tip and every effective writing technique. You can summarize anything, popularize any complex topic, and make my sentences more beautiful and elegant, using upper-level English words and sentences. Your task is to give me writing and note-taking tips, to help me enhance the way I write.\",\n\t\t\t\tfr: \"Jouons à un jeu. Je veux que tu agisses comme Alfred, mon tuteur d'écriture aussi talentueux que Voltaire ou Victor Hugo. Tu es un traducteur français expérimenté, correcteur et améliorateur d'orthographe. Tu connais tous les conseils de prise de notes, et toutes les techniques d'écriture efficaces. Tu peux résumer n'importe quoi, populariser n'importe quel sujet complexe, et rendre mes phrases plus belles et élégantes, en utilisant des mots et des phrases de niveau supérieur en français. Ta tâche est de me donner des conseils d'écriture et de prise de notes pour m'aider à améliorer ma façon d'écrire.\",\n", "\t\t},\n\t\t\tfirstMessage: {\n\t\t\t\ten: \"Hello! I'm Alfred, your AI writing tutor. Let's improve your writing skills and explore the world of language together!\",\n\t\t\t\tfr: \"Bonjour ! Je me nomme Alfred, votre tuteur d'écriture. Avec plaisir, je vous assisterai dans l'amélioration de vos compétences en écriture et nous pourrons ensemble explorer les subtilités de la langue.\",\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 1000,\n\t\t\t\ttemperature: 0.8, // A bit more creative\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n", "\t\t\tfrequencyPenalty: 0,\n\t\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t\tsocrates: {\n\t\t\tname: { en: \"Socrates\", fr: \"Socrate\" },\n\t\t\tsystemPrompt: {\n\t\t\t\ten: \"Let's play a game. I want you to impersonate Socrates. You are my mentor. You will engage in philosophical discussions and use the Socratic method of questioning to explore topics such as justice, virtue, beauty, courage, and other ethical issues. You must use the Socratic method to continue questioning my beliefs. During our discussion, I will make statements. You will attempt to further question every statement to test my logic.\",\n\t\t\t\tfr: \"Jouons à un jeu. Je veux que tu joues le rôle de Socrate. Tu es mon mentor. Tu vas engager des discussions philosophiques et utiliser la méthode socratique de questionnement pour explorer des sujets tels que la justice, la vertu, la beauté, le courage et d'autres questions éthiques. Tu dois utiliser la méthode socratique pour continuer à questionner mes croyances. Pendant notre discussion, je ferai des déclarations. Tu essaieras de questionner chaque déclaration pour tester ma logique.\",\n\t\t\t},\n", "\t\tfirstMessage: {\n\t\t\t\ten: \"Greetings! I am Socrates, a philosopher who loves to explore truths through the art of questioning. Let's have a philosophical discussion!\",\n\t\t\t\tfr: \"Salutations, je suis Socrate, un philosophe qui aime explorer les vérités à travers l'art de la question. Discutons philosophie !\",\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tmaxTokens: 1000,\n\t\t\t\ttemperature: 1.0, // A bit more creative\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n", "\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t\t// {\n\t\t// \tid: \"marcus-aurelius\",\n\t\t// \tname: \"Marcus Aurelius\",\n\t\t// \tsystemPrompt: \"\",\n\t\t// \tfirstMessage: \"\",\n\t\t// },\n\t\tstevejobs: {\n", "\t\tname: { en: \"Steve Jobs\", fr: \"Steve Jobs\" },\n\t\t\tsystemPrompt: {\n\t\t\t\ten: \"Let's play a game. I want you to impersonate Steve Jobs. You're my mentor, and you are specialized in UX/UI design, business strategy, leadership, creativity, marketing, and product development. Your task is to guide me through the principles and best practices to create the best tech product possible. Share insights on user research, information architecture, wireframing, prototyping, and usability testing. I will ask you a lot of questions, only answer them as Steve Jobs would. You can also ask questions to better understand my needs.\",\n\t\t\t\tfr: \"Jouons à un jeu. Je veux que tu joues le rôle de Steve Jobs. Tu es mon mentor, et tu es spécialisé en conception UX/UI, stratégie d'entreprise, leadership, créativité, marketing et développement de produits. Ta tâche est de me guider à travers les principes et les meilleures pratiques pour créer le meilleur produit technologique possible. Partage des insights sur la recherche utilisateur, l'architecture de l'information, le wireframing, le prototypage et le test d'utilisabilité. Je te poserai beaucoup de questions, réponds-y seulement comme Steve Jobs le ferait. Tu peux aussi poser des questions pour mieux comprendre mes besoins.\",\n\t\t\t},\n\t\t\tfirstMessage: {\n\t\t\t\ten: \"Hi, I'm Steve. I am passionate about designing products that users can't live without. I believe that great products are the result of careful attention to detail, a relentless focus on the customer, and a willingness to challenge the status quo. I'm excited to share my knowledge and expertise on UX/UI design, business strategy, leadership, creativity, marketing, and product development to help you create the best tech product possible.\",\n\t\t\t\tfr: \"Bonjour, je suis Steve. Je suis passionné par la conception de produits dont les utilisateurs ne peuvent pas se passer. Je crois que les grands produits résultent d'une attention méticuleuse aux détails, d'une concentration sans relâche sur le client et d'une volonté de remettre en question le statu quo. Je suis ravi de partager mes connaissances et mon expertise en matière de conception UX/UI, de stratégie d'entreprise, de leadership, de créativité, de marketing et de développement de produits pour vous aider à créer le meilleur produit technologique possible.\",\n\t\t\t},\n\t\t\tsettings: {\n", "\t\t\tmaxTokens: 1000,\n\t\t\t\ttemperature: 1.0,\n\t\t\t\ttopP: 1.0,\n\t\t\t\tpresencePenalty: 0,\n\t\t\t\tfrequencyPenalty: 0,\n\t\t\t\tstop: [],\n\t\t\t},\n\t\t},\n\t\t// {\n\t\t// \tid: \"alan-turing\",\n", "\t// \tname: \"Alan Turing\",\n\t\t// \tsystemPrompt: \"\",\n\t\t// \tfirstMessage: \"\",\n\t\t// },\n\t\t// { id: \"elon-musk\", name: \"Elon Musk\", systemPrompt: \"\", firstMessage: \"\" },\n\t\t// { id: \"carl-jung\", name: \"Carl Jung\", systemPrompt: \"\", firstMessage: \"\" },\n\t\t// {\n\t\t// \tid: \"nikola-tesla\",\n\t\t// \tname: \"Nikola Tesla\",\n\t\t// \tsystemPrompt: \"\",\n", "\t// \tfirstMessage: \"\",\n\t\t// },\n\t\t// {\n\t\t// \tid: \"niccolo-machiavelli\",\n\t\t// \tname: \"Niccolo Machiavelli\",\n\t\t// \tsystemPrompt: \"\",\n\t\t// \tfirstMessage: \"\",\n\t\t// },\n\t\t// { id: \"sun-tzu\", name: \"Sun Tzu\", systemPrompt: \"\", firstMessage: \"\" },\n\t}\n"]}
{"filename": "src/assets/icons/clean.ts", "chunked_list": ["export const CleanIcon =\n\t\t'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M26 20h-6v-2h6zm4 8h-6v-2h6zm-2-4h-6v-2h6z\"/><path fill=\"currentColor\" d=\"M17.003 20a4.895 4.895 0 0 0-2.404-4.173L22 3l-1.73-1l-7.577 13.126a5.699 5.699 0 0 0-5.243 1.503C3.706 20.24 3.996 28.682 4.01 29.04a1 1 0 0 0 1 .96h14.991a1 1 0 0 0 .6-1.8c-3.54-2.656-3.598-8.146-3.598-8.2Zm-5.073-3.003A3.11 3.11 0 0 1 15.004 20c0 .038.002.208.017.469l-5.9-2.624a3.8 3.8 0 0 1 2.809-.848ZM15.45 28A5.2 5.2 0 0 1 14 25h-2a6.5 6.5 0 0 0 .968 3h-2.223A16.617 16.617 0 0 1 10 24H8a17.342 17.342 0 0 0 .665 4H6c.031-1.836.29-5.892 1.803-8.553l7.533 3.35A13.025 13.025 0 0 0 17.596 28Z\"/></svg>'\n"]}
{"filename": "src/assets/icons/send.ts", "chunked_list": ["export const SendIcon =\n\t\t'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"m27.45 15.11l-22-11a1 1 0 0 0-1.08.12a1 1 0 0 0-.33 1L7 16L4 26.74A1 1 0 0 0 5 28a1 1 0 0 0 .45-.11l22-11a1 1 0 0 0 0-1.78Zm-20.9 10L8.76 17H18v-2H8.76L6.55 6.89L24.76 16Z\"/></svg>'\n"]}
{"filename": "src/assets/icons/mentor.ts", "chunked_list": ["export const MentorIcon =\n\t\t'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"114\" height=\"114\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M27 24a2.96 2.96 0 0 0-1.285.3l-4.3-4.3H18v2h2.586l3.715 3.715A2.966 2.966 0 0 0 24 27a3 3 0 1 0 3-3zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1zm0-15a2.995 2.995 0 0 0-2.816 2H18v2h6.184A2.995 2.995 0 1 0 27 13zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1zm0-15a3.003 3.003 0 0 0-3 3a2.966 2.966 0 0 0 .348 1.373L20.596 10H18v2h3.404l4.4-4.252A2.999 2.999 0 1 0 27 2zm0 4a1 1 0 1 1 1-1a1 1 0 0 1-1 1z\"/><path fill=\"currentColor\" d=\"M18 6h2V4h-2a3.976 3.976 0 0 0-3 1.382A3.976 3.976 0 0 0 12 4h-1a9.01 9.01 0 0 0-9 9v6a9.01 9.01 0 0 0 9 9h1a3.976 3.976 0 0 0 3-1.382A3.976 3.976 0 0 0 18 28h2v-2h-2a2.002 2.002 0 0 1-2-2V8a2.002 2.002 0 0 1 2-2Zm-6 20h-1a7.005 7.005 0 0 1-6.92-6H6v-2H4v-4h3a3.003 3.003 0 0 0 3-3V9H8v2a1 1 0 0 1-1 1H4.08A7.005 7.005 0 0 1 11 6h1a2.002 2.002 0 0 1 2 2v4h-2v2h2v4h-2a3.003 3.003 0 0 0-3 3v2h2v-2a1 1 0 0 1 1-1h2v4a2.002 2.002 0 0 1-2 2Z\"/></svg>'\n"]}
{"filename": "src/assets/icons/copy.ts", "chunked_list": ["export const CopyIcon =\n\t\t'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M28 10v18H10V10h18m0-2H10a2 2 0 0 0-2 2v18a2 2 0 0 0 2 2h18a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2Z\"/><path fill=\"currentColor\" d=\"M4 18H2V4a2 2 0 0 1 2-2h14v2H4Z\"/></svg>'\n"]}
