{"filename": "src/notion-blocks-parser.ts", "chunked_list": ["import type {\n\t  AudioBlock,\n\t  Block,\n\t  Blocks,\n\t  BulletedListItemBlock,\n\t  CalloutBlock,\n\t  CodeBlock,\n\t  EmbedBlock,\n\t  FileBlock,\n\t  HeadingBlock,\n", "  ImageBlock,\n\t  LinkPreviewBlock,\n\t  LinkToPageBlock,\n\t  NumberedListItemBlock,\n\t  PDFBlock,\n\t  ParagraphBlock,\n\t  QuoteBlock,\n\t  RichText,\n\t  ToDoBlock,\n\t  VideoBlock,\n", "} from '@notion-stuff/v4-types'\n\timport { z } from 'zod'\n\timport NotionBlocksMarkdownParser from './notion-blocks-md-parser'\n\timport NotionBlocksHtmlParser from './notion-blocks-html-parser'\n\timport NotionBlocksPlaintextParser from './notion-blocks-plaintext-parser'\n\tconst blockRenderers = z.object({\n\t  AudioBlock: z.function().returns(z.string()),\n\t  BulletedListItemBlock: z.function().returns(z.string()),\n\t  CalloutBlock: z.function().returns(z.string()),\n\t  CodeBlock: z.function().returns(z.string()),\n", "  EmbedBlock: z.function().returns(z.string()),\n\t  FileBlock: z.function().returns(z.string()),\n\t  HeadingBlock: z.function().returns(z.string()),\n\t  ImageBlock: z.function().returns(z.string()),\n\t  LinkToPageBlock: z.function().returns(z.string()),\n\t  NumberedListItemBlock: z.function().returns(z.string()),\n\t  ParagraphBlock: z.function().returns(z.string()),\n\t  PDFBlock: z.function().returns(z.string()),\n\t  QuoteBlock: z.function().returns(z.string()),\n\t  RichText: z.function().returns(z.string()),\n", "  RichTextEquation: z.function().returns(z.string()),\n\t  RichTextMention: z.function().returns(z.string()),\n\t  RichTextText: z.function().returns(z.string()),\n\t  ToDoBlock: z.function().returns(z.string()),\n\t  ToggleBlock: z.function().returns(z.string()),\n\t  VideoBlock: z.function().returns(z.string()),\n\t  LinkPreviewBlock: z.function().returns(z.string()),\n\t}).partial()\n\texport type BlockRenderers = z.infer<typeof blockRenderers>\n\ttype Renderer = (block: Block | RichText[], ...args: unknown[]) => string\n", "type CustomRenderer = (block: Block | RichText[], ...args: unknown[]) => string | null\n\tfunction modularize(\n\t  custom: CustomRenderer | undefined,\n\t  def: Renderer): Renderer {\n\t  return function render(block: Block | RichText[], ...args: unknown[]) {\n\t    if (custom) {\n\t      const customRender = custom(block, ...args)\n\t      if (customRender !== null)\n\t        return customRender\n\t    }\n", "    return def(block, ...args)\n\t  }\n\t}\n\texport default class NotionBlocksParser {\n\t  mdParser: NotionBlocksMarkdownParser\n\t  htmlParser: NotionBlocksHtmlParser\n\t  plainTextParser: NotionBlocksPlaintextParser\n\t  debug: boolean\n\t  constructor({ blockRenderers, debug }: { blockRenderers?: BlockRenderers; debug?: boolean }) {\n\t    this.mdParser = new NotionBlocksMarkdownParser()\n", "    this.plainTextParser = new NotionBlocksPlaintextParser()\n\t    this.debug = debug || false\n\t    this.mdParser.parseParagraph = modularize(\n\t      blockRenderers?.ParagraphBlock,\n\t      this.mdParser.parseParagraph.bind(this.mdParser) as Renderer,\n\t    ) as (block: ParagraphBlock) => string\n\t    this.mdParser.parseCodeBlock = modularize(\n\t      blockRenderers?.CodeBlock,\n\t      this.mdParser.parseCodeBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: CodeBlock) => string\n", "    this.mdParser.parseQuoteBlock = modularize(\n\t      blockRenderers?.QuoteBlock,\n\t      this.mdParser.parseQuoteBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: QuoteBlock) => string\n\t    this.mdParser.parseCalloutBlock = modularize(\n\t      blockRenderers?.CalloutBlock,\n\t      this.mdParser.parseCalloutBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: CalloutBlock) => string\n\t    this.mdParser.parseHeading = modularize(\n\t      blockRenderers?.HeadingBlock,\n", "      this.mdParser.parseHeading.bind(this.mdParser) as Renderer,\n\t    ) as (block: HeadingBlock) => string\n\t    this.mdParser.parseBulletedListItems = modularize(\n\t      blockRenderers?.BulletedListItemBlock,\n\t      this.mdParser.parseBulletedListItems.bind(this.mdParser) as Renderer,\n\t    ) as (block: BulletedListItemBlock) => string\n\t    this.mdParser.parseLinkToPageBlock = modularize(\n\t      blockRenderers?.LinkToPageBlock,\n\t      this.mdParser.parseLinkToPageBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: LinkToPageBlock) => string\n", "    this.mdParser.parseNumberedListItems = modularize(\n\t      blockRenderers?.NumberedListItemBlock,\n\t      this.mdParser.parseNumberedListItems.bind(this.mdParser) as Renderer,\n\t    ) as (block: NumberedListItemBlock) => string\n\t    this.mdParser.parseTodoBlock = modularize(\n\t      blockRenderers?.ToDoBlock,\n\t      this.mdParser.parseTodoBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: ToDoBlock) => string\n\t    this.mdParser.parseImageBlock = modularize(\n\t      blockRenderers?.ImageBlock,\n", "      this.mdParser.parseImageBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: ImageBlock) => string\n\t    this.mdParser.parseEmbedBlock = modularize(\n\t      blockRenderers?.EmbedBlock,\n\t      this.mdParser.parseEmbedBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: EmbedBlock) => string\n\t    this.mdParser.parseAudioBlock = modularize(\n\t      blockRenderers?.AudioBlock,\n\t      this.mdParser.parseAudioBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: AudioBlock) => string\n", "    this.mdParser.parseVideoBlock = modularize(\n\t      blockRenderers?.VideoBlock,\n\t      this.mdParser.parseVideoBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: VideoBlock) => string\n\t    this.mdParser.parseFileBlock = modularize(\n\t      blockRenderers?.FileBlock,\n\t      this.mdParser.parseFileBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: FileBlock) => string\n\t    this.mdParser.parsePdfBlock = modularize(\n\t      blockRenderers?.PDFBlock,\n", "      this.mdParser.parsePdfBlock.bind(this.mdParser) as Renderer,\n\t    ) as (block: PDFBlock) => string\n\t    this.mdParser.parseLinkPreview = modularize(\n\t      blockRenderers?.LinkPreviewBlock,\n\t      this.mdParser.parseLinkPreview.bind(this.mdParser) as Renderer,\n\t    ) as (block: LinkPreviewBlock) => string\n\t    // Warning: this parser is used in many of the other parsers internally.\n\t    // Modding it could affect the others unexpectedly.\n\t    this.mdParser.parseRichTexts = modularize(\n\t      blockRenderers?.RichText,\n", "      this.mdParser.parseRichTexts.bind(this.mdParser) as Renderer,\n\t    ) as (block: RichText[]) => string\n\t    this.htmlParser = new NotionBlocksHtmlParser(this.mdParser, this.debug)\n\t  }\n\t  markdownToPlainText(markdown: string): string {\n\t    return this.plainTextParser.parse(markdown)\n\t  }\n\t  blocksToPlainText(blocks: Blocks, depth?: number): string {\n\t    return this.plainTextParser.parse(\n\t      this.blocksToMarkdown(blocks, depth))\n", "  }\n\t  blocksToMarkdown(blocks: Blocks, depth?: number): string {\n\t    return this.mdParser.parse(blocks, depth)\n\t  }\n\t  blocksToHtml(blocks: Blocks): string {\n\t    return this.htmlParser.parse(blocks)\n\t  }\n\t  static parseRichText(richTexts: RichText[]) {\n\t    const tempParser = new NotionBlocksMarkdownParser()\n\t    return tempParser.parseRichTexts(richTexts)\n", "  }\n\t}\n"]}
{"filename": "src/notion-blocks-plaintext-parser.ts", "chunked_list": ["import type { Renderer as MarkedRenderer } from 'marked'\n\timport { marked } from 'marked'\n\timport _ from 'lodash'\n\tconst block = (text: string) => `${text}\\n\\n`\n\tconst escapeBlock = (text: string) => `${_.escape(text)}\\n\\n`\n\tconst line = (text: string) => `${text}\\n`\n\tconst inline = (text: string) => text\n\tconst newline = () => '\\n'\n\tconst empty = () => ''\n\texport default class NotionBlocksPlaintextParser {\n", "  renderer: MarkedRenderer\n\t  markedOptions\n\t  constructor() {\n\t    this.renderer = {\n\t      // Block elements\n\t      code: escapeBlock,\n\t      blockquote: block,\n\t      html: empty,\n\t      heading: block,\n\t      hr: newline,\n", "      list: text => block(text.trim()),\n\t      listitem: line,\n\t      checkbox: empty,\n\t      paragraph: block,\n\t      table: (header, body) => line(header + body),\n\t      tablerow: text => line(text.trim()),\n\t      tablecell: text => `${text} `,\n\t      // Inline elements\n\t      strong: inline,\n\t      em: inline,\n", "      codespan: inline,\n\t      br: newline,\n\t      del: inline,\n\t      link: (_0, _1, text) => text,\n\t      image: (_0, _1, text) => text,\n\t      text: inline,\n\t      // etc.\n\t      options: {},\n\t    }\n\t    this.markedOptions = {\n", "      renderer: this.renderer,\n\t      pedantic: false,\n\t      mangle: false,\n\t      gfm: false,\n\t      extensions: undefined,\n\t      breaks: false,\n\t      headerIds: false,\n\t      sanitize: false,\n\t      smartypants: false,\n\t      xhtml: false,\n", "    }\n\t  }\n\t  parse(markdown: string) {\n\t    const unmarked = marked(markdown, this.markedOptions)\n\t    const unescaped = _.unescape(unmarked)\n\t    const trimmed = _.trim(unescaped)\n\t    return trimmed\n\t  }\n\t}\n\t/* Much thanks to Eric Buss for making: https://github.com/ejrbuss/markdown-to-txt\n", "From which the Marked Renderer and utilities were copied.\n\t*/\n"]}
{"filename": "src/notion-logger.ts", "chunked_list": ["/* eslint-disable no-console */\n\timport type { Stats } from './types'\n\tconst START = 'request start'\n\tconst SUCCESS = 'request success'\n\tconst FAILURE = 'request fail'\n\ttype ExtraInfo = Record<string, unknown>\n\texport default class NotionLogger {\n\t  debug: boolean\n\t  stats: Pick<Stats,\n\t    'totalAPICalls' |\n", "    'failedCalls' |\n\t    'succeededCalls'>\n\t  constructor({ debug = false }: { debug: boolean }) {\n\t    this.debug = debug\n\t    this.stats = {\n\t      totalAPICalls: 0,\n\t      succeededCalls: 0,\n\t      failedCalls: 0,\n\t    }\n\t  }\n", "  log(logLevel: string, message: string, extraInfo: ExtraInfo): void {\n\t    if (this.debug) {\n\t      console.log('logLevel:', logLevel)\n\t      console.log('message:', message)\n\t      console.log('extraInfo:', extraInfo)\n\t    }\n\t    this.handleMessage(message)\n\t  }\n\t  handleMessage(message: string): void {\n\t    switch (message) {\n", "      case START:\n\t        this.stats.totalAPICalls++\n\t        break\n\t      case SUCCESS:\n\t        this.stats.succeededCalls++\n\t        break\n\t      case FAILURE:\n\t        this.stats.failedCalls++\n\t        break\n\t    }\n", "  }\n\t  handleLogLevel(logLevel: string): void {}\n\t  handleExtraInfo(extraInfo: ExtraInfo): void {}\n\t  resetStats(): void {\n\t    this.stats = {\n\t      totalAPICalls: 0,\n\t      failedCalls: 0,\n\t      succeededCalls: 0,\n\t    }\n\t  }\n", "}\n"]}
{"filename": "src/types.ts", "chunked_list": ["import type {\n\t  PageObjectResponse,\n\t  PersonUserObjectResponse,\n\t  RichTextItemResponse,\n\t} from '@notionhq/client/build/src/api-endpoints'\n\timport type { Blocks } from '@notion-stuff/v4-types'\n\timport type { Client } from '@notionhq/client'\n\timport type NotionBlocksParser from './notion-blocks-parser'\n\tdeclare global {\n\t  interface String {\n", "    route: string\n\t    slug: string\n\t  }\n\t}\n\texport type Properties = Partial<PageObjectResponse['properties']>\n\texport interface Options {\n\t  databaseId: string\n\t  notionAPIKey: string\n\t  debug?: boolean\n\t  draftMode?: boolean\n", "  autoUpdate?: boolean\n\t  refreshTimeout?: number | string // in ms or converted from human readable string\n\t  localCacheDirectory?: string\n\t  rootAlias?: string\n\t  quiet?: boolean\n\t  rootUrl?: string | URL | undefined // Used to generate full path links,\n\t  limiter?: { schedule: Function }\n\t  plugins?: Array<Plugin | UnsafePlugin>\n\t}\n\texport interface Stats {\n", "  durationSeconds: number\n\t  totalAPICalls: number\n\t  succeededCalls: number\n\t  failedCalls: number\n\t  totalPages: number\n\t}\n\texport interface Content {\n\t  plaintext: string\n\t  markdown: string\n\t  html: string\n", "}\n\texport interface CMS {\n\t  stages: Array<string>\n\t  lastUpdateTimestamp?: number\n\t  metadata: {\n\t    options?: string\n\t    rootUrl?: string | URL | undefined\n\t    databaseId: string\n\t    stats: Partial<Stats>\n\t  }\n", "  routes: Array<string | Array<string>>\n\t  tags: Array<string>\n\t  tagGroups: Record<string, Array<string>>\n\t  siteData: Record<string, Page>\n\t}\n\texport interface PageContent {\n\t  _ancestors?: PageContent[]\n\t  _updateNeeded?: boolean\n\t  name?: string\n\t  path?: string\n", "  url?: string\n\t  otherProps?: PageObjectResponse['properties']\n\t  _notion?: {\n\t    parent?: PageContent\n\t    id: string\n\t    last_edited_time: string\n\t  }\n\t  authors?: Array<string>\n\t  slug?: string\n\t  tags?: Array<string>\n", "  coverImage?: string\n\t  content?: Content\n\t}\n\texport interface Route {\n\t  [key: string]: PageContent\n\t}\n\texport type ExtendedPageContent = PageContent & {\n\t  [key: string]: unknown\n\t}\n\texport type Page = PageContent | (PageContent & Route) | ExtendedPageContent\n", "// Directly stolen from PageObjectResponse Record Type in notionClient/API-endpoints.ts\n\texport interface PageObjectTitle { type: 'title'; title: Array<RichTextItemResponse>; id: string }\n\texport interface PageObjectRelation { type: 'relation'; relation: Array<{ id: string }>; id: string }\n\texport interface PageObjectUser {\n\t  type: 'people'\n\t  people: Array<PersonUserObjectResponse>\n\t  id: string\n\t}\n\texport interface PageMultiSelect {\n\t  type: 'multi_select'\n", "  multi_select: Array<{\n\t    id: string\n\t    name: string\n\t    color: string\n\t  }>\n\t  id: string\n\t}\n\texport interface PageSelect {\n\t  type: 'select'\n\t  select: {\n", "    id: string\n\t    name: string\n\t    color: string\n\t  } | null\n\t  id: string\n\t}\n\texport interface PageRichText {\n\t  type: 'rich_text'\n\t  rich_text: Array<RichTextItemResponse>\n\t  id: string\n", "}\n\texport type Cover = { type: 'external'; external: { url: string } } | { type: 'file'; file: { url: string; expiry_time: string } } | null\n\texport type RouteObject = [string, object]\n\texport type PluginPassthrough = Blocks | CMS | Page | string\n\texport interface PluginExecOptions {\n\t  debug?: boolean\n\t  localCacheDirectory?: string\n\t  notion?: Client\n\t}\n\texport interface Plugin {\n", "  name: string\n\t  hook: 'import' | 'pre-tree' | 'pre-parse' | 'post-parse' | 'during-tree' | 'post-tree' | '*'\n\t  exec: (context: PluginPassthrough, instanceOptions?: PluginExecOptions) => PluginPassthrough\n\t}\n\texport interface UnsafePlugin {\n\t  parser: NotionBlocksParser\n\t  name: string\n\t  core: boolean\n\t  hook: 'parse' | 'import' | 'pre-tree' | 'pre-parse' | 'post-parse' | 'during-tree' | 'post-tree' | '*'\n\t  exec: (context: PluginPassthrough, instanceOptions?: PluginExecOptions) => PluginPassthrough\n", "}\n\texport interface FlatListItem {\n\t  _key: string\n\t  [pid: string]: string | Partial<FlatListItem> | unknown\n\t}\n\texport type FlatList = FlatListItem[]\n"]}
{"filename": "src/notion-cms.ts", "chunked_list": ["import fs from 'node:fs'\n\timport path from 'node:path'\n\timport { fileURLToPath } from 'node:url'\n\timport { createHash } from 'node:crypto'\n\timport { Client, LogLevel, collectPaginatedAPI, isFullBlock, isFullPage } from '@notionhq/client'\n\timport type {\n\t  BlockObjectResponse,\n\t  PageObjectResponse,\n\t  SelectPropertyItemObjectResponse,\n\t} from '@notionhq/client/build/src/api-endpoints'\n", "import type { Blocks } from '@notion-stuff/v4-types'\n\timport _ from 'lodash'\n\timport type { AsyncCallbackFn, WalkNode } from 'walkjs'\n\timport { AsyncWalkBuilder, WalkBuilder } from 'walkjs'\n\timport humanInterval from 'human-interval'\n\timport { log, spinner } from '@clack/prompts'\n\timport kleur from 'kleur'\n\timport type {\n\t  CMS,\n\t  Content,\n", "  Cover,\n\t  ExtendedPageContent,\n\t  FlatListItem,\n\t  Options,\n\t  Page,\n\t  PageContent,\n\t  PageMultiSelect,\n\t  PageObjectRelation,\n\t  PageObjectTitle,\n\t  PageObjectUser,\n", "  Plugin,\n\t  PluginPassthrough,\n\t  UnsafePlugin,\n\t} from './types'\n\timport {\n\t  JSONParseWithFunctions,\n\t  JSONStringifyWithFunctions,\n\t  filterAncestors,\n\t  routify,\n\t  slugify,\n", "  writeFile,\n\t} from './utilities'\n\timport NotionLogger from './notion-logger'\n\timport renderer from './plugins/render'\n\tconst __filename = fileURLToPath(import.meta.url)\n\tconst __dirname = path.dirname(__filename)\n\tconst COVER_IMAGE_REGEX = /<figure notion-figure>[\\s\\S]+<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/\n\tconst STEADY_PROPS = [\n\t  'name',\n\t  'Author',\n", "  'Published',\n\t  'Tags',\n\t  'publishDate',\n\t  'parent-page',\n\t  'sub-page',\n\t]\n\tconst clackSpinner = spinner()\n\texport default class NotionCMS {\n\t  cms: CMS\n\t  cmsId: string\n", "  notionClient: Client\n\t  autoUpdate: boolean\n\t  refreshTimeout: number | string\n\t  draftMode: boolean\n\t  defaultCacheFilename: string\n\t  localCacheDirectory: string\n\t  localCacheUrl: string\n\t  debug: boolean | undefined\n\t  limiter: { schedule: Function }\n\t  plugins: Array<Plugin | UnsafePlugin> | undefined\n", "  options: Options\n\t  private timer: number\n\t  private coreRenderer: UnsafePlugin\n\t  private logger: NotionLogger\n\t  pull: () => Promise<CMS>\n\t  rootAlias: string\n\t  withinRefreshTimeout: boolean\n\t  quietMode: boolean\n\t  constructor({\n\t    databaseId,\n", "    notionAPIKey,\n\t    debug = false,\n\t    draftMode = false,\n\t    refreshTimeout = 0,\n\t    autoUpdate = true,\n\t    localCacheDirectory = './.notion-cms/',\n\t    rootAlias = '',\n\t    rootUrl = '',\n\t    quiet = false,\n\t    limiter = {\n", "      schedule: (func: Function) => {\n\t        const result = func() as unknown\n\t        return Promise.resolve(result)\n\t      },\n\t    },\n\t    plugins = [],\n\t  }: Options = { databaseId: '', notionAPIKey: '' }) {\n\t    this.timer = Date.now()\n\t    this.options = {\n\t      databaseId,\n", "      notionAPIKey,\n\t      debug,\n\t      draftMode,\n\t      refreshTimeout,\n\t      autoUpdate,\n\t      localCacheDirectory,\n\t      rootUrl,\n\t      rootAlias,\n\t      limiter,\n\t      plugins,\n", "      quiet,\n\t    }\n\t    this.cms = {\n\t      metadata: {\n\t        options: this._documentOptions(this.options),\n\t        databaseId,\n\t        rootUrl: rootUrl || '',\n\t        stats: {\n\t          durationSeconds: 0,\n\t          totalPages: 0,\n", "        },\n\t      },\n\t      stages: [],\n\t      routes: [],\n\t      tags: [],\n\t      tagGroups: {},\n\t      siteData: {},\n\t    }\n\t    this.cmsId = this._produceCMSIdentifier(databaseId) // Can't have multiple instances that reference the same db.\n\t    this.debug = debug\n", "    this.logger = new NotionLogger({ debug: this.debug })\n\t    this.notionClient = new Client({\n\t      auth: notionAPIKey,\n\t      logLevel: LogLevel.DEBUG,\n\t      logger: this.logger.log.bind(this.logger),\n\t    })\n\t    this.autoUpdate = autoUpdate\n\t    this.refreshTimeout\n\t      = (refreshTimeout && _.isString(refreshTimeout))\n\t        ? (humanInterval(refreshTimeout) || refreshTimeout)\n", "        : (refreshTimeout || 0)\n\t    this.draftMode = draftMode || false\n\t    this.localCacheDirectory = localCacheDirectory\n\t    this.defaultCacheFilename = `ncms-cache-${this.cmsId}.json`\n\t    this.localCacheUrl = path.resolve(__dirname, this.localCacheDirectory + this.defaultCacheFilename)\n\t    this.limiter = limiter\n\t    this.limiter.schedule.bind(limiter)\n\t    this.coreRenderer = renderer({ blockRenderers: {}, debug })\n\t    this.coreRenderer.name = 'core-renderer'\n\t    this.plugins = this._dedupePlugins([...plugins, this.coreRenderer])\n", "    this.pull = this.fetch.bind(this)\n\t    this.rootAlias = rootAlias\n\t    this.withinRefreshTimeout = false\n\t    this.quietMode = quiet\n\t  }\n\t  get data() {\n\t    if (_.isEmpty(this.cms.siteData))\n\t      return\n\t    return this.cms.siteData\n\t  }\n", "  get routes(): Array<string> {\n\t    const routes = [] as Array<string>\n\t    this.walk((node: PageContent) => {\n\t      if (node.path)\n\t        routes.push(node.path)\n\t    })\n\t    return routes\n\t  }\n\t  _documentOptions(options: Options): string {\n\t    let hex\n", "    try {\n\t      const tempOptions = _.cloneDeep(options)\n\t      delete tempOptions.limiter\n\t      const hasher = createHash('md5')\n\t      // Detecting Function string differences needs\n\t      // to be implemented using the JSONStringifyWithFunctions util.\n\t      const json = JSON.stringify(tempOptions)\n\t      hasher.update(json)\n\t      hex = hasher.digest('hex')\n\t    }\n", "    catch (e) {\n\t      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t      throw new Error(`Failed to document options object: ${e}`)\n\t    }\n\t    return hex\n\t  }\n\t  _produceCMSIdentifier(id: string): string {\n\t    return id.slice(-4)\n\t  }\n\t  _dedupePlugins(plugins: Array<Plugin | UnsafePlugin>): Array<Plugin | UnsafePlugin> {\n", "    const numParsePlugins = _.filter(plugins, { hook: 'parse' })\n\t    if (numParsePlugins.length > 1)\n\t      return _.initial(plugins)\n\t    return plugins\n\t  }\n\t  _checkDuplicateParsePlugins(pluginsList: Array<Plugin | UnsafePlugin>): boolean {\n\t    return _(pluginsList).filter(plugin => plugin.hook === 'parse').uniq().value().length > 1\n\t  }\n\t  async _runPlugins(\n\t    context: PluginPassthrough,\n", "    hook: Plugin['hook'] | 'parse'): Promise<PluginPassthrough> {\n\t    if (!this.plugins?.length)\n\t      return context\n\t    if (this._checkDuplicateParsePlugins(this.plugins))\n\t      throw new Error('Only one parse-capable plugin must be used. Use the default NotionCMS render plugin.')\n\t    let val = context\n\t    for (const plugin of this.plugins.flat()) {\n\t      if (plugin.hook === hook || plugin.hook === '*') {\n\t        // eslint-disable-next-line @typescript-eslint/await-thenable\n\t        val = await plugin.exec(val, {\n", "          debug: !!this.debug,\n\t          localCacheDirectory: this.localCacheDirectory,\n\t          notion: this.notionClient,\n\t        })\n\t      }\n\t    }\n\t    return val\n\t  }\n\t  _flatListToTree = (\n\t    flatList: Partial<FlatListItem>[],\n", "    idPath: keyof FlatListItem,\n\t    parentIdPath: keyof FlatListItem,\n\t    isRoot: (t: Partial<FlatListItem>) => boolean,\n\t  ): Record<string, Page> => {\n\t    const rootParents: Partial<FlatListItem>[] = []\n\t    const map = {} as { [x: string]: Partial<FlatListItem> }\n\t    const tree = {}\n\t    for (const item of flatList)\n\t      map[item[idPath] as string] = item\n\t    for (const item of flatList) {\n", "      const parentId = item[parentIdPath]\n\t      if (isRoot(item)) {\n\t        if (item._key === this.rootAlias)\n\t          item._key = '/'\n\t        rootParents.push(item)\n\t      }\n\t      else {\n\t        const parentItem = map[parentId as string]\n\t        parentItem[item._key as string] = item\n\t      }\n", "    }\n\t    _.forEach(rootParents, (page) => {\n\t      _.assign(tree, { [page._key as string]: page })\n\t    })\n\t    return tree\n\t  }\n\t  _notionListToTree(list: Partial<FlatListItem>[]): Record<string, Page> {\n\t    return this._flatListToTree(list, 'id', 'pid', (node: Partial<FlatListItem>) => !node.pid)\n\t  }\n\t  static _isPageContentObject(node: WalkNode): boolean {\n", "    return typeof node.key === 'string' && node?.key?.startsWith('/')\n\t      && ((typeof node?.parent?.key === 'string' && node?.parent?.key?.startsWith('/'))\n\t        || !node?.parent?.key || node?.parent?.key === 'siteData')\n\t  }\n\t  static _createCMSWalker(cb: (node: ExtendedPageContent) => void): WalkBuilder {\n\t    return new WalkBuilder()\n\t      .withCallback({\n\t        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n\t        nodeTypeFilters: ['object'],\n\t        positionFilter: 'postWalk',\n", "        callback: (node: WalkNode) => cb(node.val as ExtendedPageContent),\n\t      })\n\t  }\n\t  _getParentPageId(response: PageObjectResponse): string {\n\t    const parentPage = response?.properties['parent-page'] as PageObjectRelation\n\t    return parentPage?.relation[0]?.id\n\t  }\n\t  _getBlockName(response: PageObjectResponse): string {\n\t    const nameProp = response?.properties.name as PageObjectTitle\n\t    return nameProp.title[0]?.plain_text\n", "  }\n\t  _extractTags(response: PageObjectResponse): Array<string> {\n\t    const tagProp = response?.properties?.Tags as PageMultiSelect\n\t    return tagProp.multi_select ? tagProp.multi_select.map(multiselect => multiselect.name) : []\n\t  }\n\t  _assignTagGroup(tag: string, path: string, cms: CMS): void {\n\t    if (!cms.tagGroups[tag])\n\t      cms.tagGroups[tag] = []\n\t    cms.tagGroups[tag].push(path)\n\t  }\n", "  _buildTagGroups(tags: Array<string>, path: string, cms: CMS): void {\n\t    _.forEach(tags, (tag) => {\n\t      if (!_.includes(cms.tags, tag))\n\t        cms.tags.push(tag)\n\t      this._assignTagGroup(tag, path, cms)\n\t    })\n\t  }\n\t  _getCoverImage(page: PageObjectResponse): string | undefined {\n\t    const pageCoverProp = (page)?.cover as Cover\n\t    let coverImage\n", "    if (pageCoverProp && 'external' in pageCoverProp)\n\t      coverImage = pageCoverProp?.external?.url\n\t    else if (pageCoverProp?.file)\n\t      coverImage = pageCoverProp?.file.url\n\t    return coverImage\n\t  }\n\t  async _pullPageContent(id: string): Promise<BlockObjectResponse[] | undefined> {\n\t    let pageContent\n\t    try {\n\t      pageContent = await this.limiter.schedule(\n", "        async () => await collectPaginatedAPI(this.notionClient.blocks.children.list, {\n\t          block_id: id,\n\t        }),\n\t      ) as BlockObjectResponse[]\n\t    }\n\t    catch (e) {\n\t      if (this.debug)\n\t        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t        console.error(`NotionCMS Error: ${e}`)\n\t    }\n", "    if (!pageContent)\n\t      return\n\t    for (const block of pageContent) {\n\t      if (isFullBlock(block) && block.has_children)\n\t        // @ts-expect-error children\n\t        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t        block[block.type].children = (await this._pullPageContent(block.id))\n\t    }\n\t    return pageContent\n\t  }\n", "  async _parsePageContent(pageContent: BlockObjectResponse[]): Promise<Content> {\n\t    const results = await this._runPlugins(pageContent as Blocks, 'pre-parse')\n\t    const markdown: string = this.coreRenderer.parser.blocksToMarkdown(pageContent as Blocks)\n\t    const plaintext: string = this.coreRenderer.parser.markdownToPlainText(markdown)\n\t    const parsedBlocks = await this._runPlugins(results as Blocks, 'parse')\n\t    const html = await this._runPlugins(parsedBlocks, 'post-parse') as string\n\t    return {\n\t      plaintext,\n\t      markdown,\n\t      html,\n", "    }\n\t  }\n\t  async _getPageContent(state: CMS, cachedState?: CMS): Promise<CMS> {\n\t    let stateWithContent = _.cloneDeep(state)\n\t    await new AsyncWalkBuilder()\n\t      .withCallback({\n\t        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n\t        nodeTypeFilters: ['object'],\n\t        positionFilter: 'postWalk',\n\t        callback: async (node: WalkNode) => {\n", "          const pageContent = node.val as PageContent\n\t          if (!pageContent || !pageContent?._notion?.id)\n\t            return\n\t          // Definitely grab content if there is no cache.\n\t          if (pageContent._updateNeeded || !cachedState) {\n\t            if (!this.quietMode && pageContent.path)\n\t              clackSpinner.start(kleur.blue(`[ncms][updating]: ${pageContent.path}`))\n\t            const blocks = await this._pullPageContent(pageContent._notion.id)\n\t            if (!blocks)\n\t              return\n", "            const content = await this._parsePageContent(blocks)\n\t            _.assign(pageContent, {\n\t              content,\n\t              ...(!pageContent.coverImage && { coverImage: content.html.match(COVER_IMAGE_REGEX)?.[1] }),\n\t              _ancestors: this._gatherNodeAncestors(node),\n\t            })\n\t          }\n\t          else if (cachedState && pageContent.path) {\n\t            const cachedPage = this._queryByPath(pageContent.path, cachedState?.siteData)\n\t            if (cachedPage) {\n", "              _.assign(pageContent, {\n\t                content: cachedPage.content,\n\t                ...(!cachedPage.coverImage && { coverImage: cachedPage.content?.html.match(COVER_IMAGE_REGEX)?.[1] }),\n\t                _ancestors: this._gatherNodeAncestors(node),\n\t              })\n\t              if (!this.quietMode && pageContent.path)\n\t                clackSpinner.start(kleur.yellow(`[ncms][using cache]: ${pageContent.path}`))\n\t            }\n\t          }\n\t          else {\n", "            clackSpinner.stop(kleur.red('[ncms]: aborted due to fetch error.'))\n\t            throw new Error(`ncms: error when updating page content. No page found for ${node.key || 'undetermined node key'}`)\n\t          }\n\t          _.assign(\n\t            pageContent,\n\t            await this._runPlugins(pageContent, 'during-tree') as Page)\n\t          delete pageContent.otherProps\n\t          // We only want access to ancestors for plugins, otherwise it creates circular ref headaches.\n\t          delete pageContent._ancestors\n\t          delete pageContent._updateNeeded\n", "          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t          clackSpinner.stop(kleur.blue(`[ncms]: updated@ ${pageContent.path}`))\n\t        },\n\t      })\n\t      .withRootObjectCallbacks(false)\n\t      .withParallelizeAsyncCallbacks(true)\n\t      .walk(stateWithContent.siteData)\n\t    stateWithContent.stages.push('content')\n\t    stateWithContent = await this._runPlugins(stateWithContent, 'post-tree') as CMS\n\t    return stateWithContent\n", "  }\n\t  _extractUnsteadyProps(properties: PageObjectResponse['properties']): PageObjectResponse['properties'] {\n\t    return _(properties)\n\t      .entries()\n\t      .reject(([key]) => _.includes(STEADY_PROPS, key))\n\t      .fromPairs().value()\n\t  }\n\t  _getPageUpdate(entry: PageObjectResponse): Page {\n\t    const tags = [] as Array<string>\n\t    if (isFullPage(entry)) {\n", "      const name = this._getBlockName(entry)\n\t      const authorProp = entry.properties?.Author as PageObjectUser\n\t      const authors = authorProp.people.map(authorId => authorId.name as string)\n\t      const coverImage = this._getCoverImage(entry)\n\t      const extractedTags = this._extractTags(entry)\n\t      extractedTags.forEach(tag => tags.push(tag))\n\t      const otherProps = this._extractUnsteadyProps(entry.properties)\n\t      return {\n\t        name,\n\t        otherProps,\n", "        slug: slugify(name),\n\t        authors,\n\t        tags,\n\t        coverImage,\n\t        _notion: {\n\t          id: entry.id,\n\t          last_edited_time: entry.last_edited_time,\n\t        },\n\t      }\n\t    }\n", "    return {}\n\t  }\n\t  _publishedFilter = (e: PageObjectResponse) => {\n\t    const publishProp = e.properties.Published as SelectPropertyItemObjectResponse\n\t    return this.draftMode ? true : (publishProp.select && publishProp.select.name === 'Published')\n\t  }\n\t  _gatherNodeAncestors(node: WalkNode): Array<PageContent> {\n\t    return _(node.ancestors).map((ancestor) => {\n\t      if ((ancestor.val as PageContent)._notion)\n\t        return ancestor.val as PageContent\n", "      return false\n\t    }).compact().value()\n\t  }\n\t  async _getDb(state: CMS, cachedState?: CMS): Promise<CMS | undefined> {\n\t    let stateWithDb = _.cloneDeep(state)\n\t    let db\n\t    try {\n\t      db = await this.limiter.schedule(\n\t        async () => (await collectPaginatedAPI(\n\t          this.notionClient.databases.query, { database_id: state.metadata.databaseId },\n", "        )),\n\t      ) as PageObjectResponse[]\n\t    }\n\t    catch (e) {\n\t      if (this.debug)\n\t        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t        console.error(`NotionCMS Error: ${e}`)\n\t    }\n\t    if (!db)\n\t      return\n", "    stateWithDb.metadata.stats.totalPages = db.length\n\t    stateWithDb.siteData = this._notionListToTree(\n\t      _(db)\n\t        // @ts-expect-error filter\n\t        .filter(this._publishedFilter)\n\t        .map(page => _.assign({}, {\n\t          _key: routify(this._getBlockName(page)),\n\t          id: page.id,\n\t          pid: this._getParentPageId(page),\n\t          _notion: page, // this property is recycled to eventually house metadata.\n", "        }))\n\t        .value(),\n\t    )\n\t    if (_.isEmpty(stateWithDb.siteData))\n\t      throw new Error('NotionCMS is empty. Did you mean to set `draftMode: true`?')\n\t    new WalkBuilder()\n\t      .withCallback({\n\t        nodeTypeFilters: ['object'],\n\t        callback: (node: WalkNode) => {\n\t          const pageContent = node.val as PageContent\n", "          if (!pageContent?._notion)\n\t            return\n\t          pageContent._updateNeeded = !this.withinRefreshTimeout\n\t          const update = this._getPageUpdate(pageContent._notion as PageObjectResponse)\n\t          _.assign(pageContent, update)\n\t          _.assign(pageContent, {\n\t            // Replace double // so that root aliasing works properly\n\t            path: node.getPath(node => `${node.key as string}`)\n\t              .replace('siteData', '')\n\t              .replace('//', '/'),\n", "            url: (stateWithDb.metadata.rootUrl && pageContent.path)\n\t              ? (`${stateWithDb.metadata.rootUrl as string}${pageContent.path}`)\n\t              : '',\n\t          })\n\t          if (cachedState && pageContent.path && !this.withinRefreshTimeout) {\n\t            const cachedPage = this._queryByPath(pageContent.path, cachedState?.siteData)\n\t            pageContent._updateNeeded = this.autoUpdate\n\t              && (update._notion?.last_edited_time !== cachedPage?._notion?.last_edited_time)\n\t          }\n\t          if (node.key && typeof node.key === 'string' && pageContent.tags && pageContent.path)\n", "            this._buildTagGroups(pageContent.tags, pageContent.path, stateWithDb)\n\t        },\n\t      })\n\t      .withRootObjectCallbacks(false)\n\t      .walk(stateWithDb)\n\t    stateWithDb.stages.push('db')\n\t    stateWithDb = await this._runPlugins(stateWithDb, 'pre-tree') as CMS\n\t    return stateWithDb\n\t  }\n\t  async fetch(): Promise<CMS> {\n", "    let cachedCMS, optionsHaveChanged\n\t    if (fs.existsSync(this.localCacheUrl)) {\n\t      try {\n\t        cachedCMS = JSONParseWithFunctions(fs.readFileSync(this.localCacheUrl, 'utf-8')) as CMS\n\t        optionsHaveChanged = cachedCMS.metadata.options !== this.cms.metadata.options\n\t      }\n\t      catch (e) {\n\t        if (this.debug)\n\t          console.error('Parsing cached CMS failed. Using API instead.')\n\t      }\n", "    }\n\t    this.withinRefreshTimeout = Boolean(cachedCMS && ((cachedCMS.lastUpdateTimestamp\n\t      && (Date.now() < cachedCMS.lastUpdateTimestamp + _.toNumber(this.refreshTimeout)))\n\t        && !optionsHaveChanged))\n\t    if (!this.quietMode)\n\t      log.step(kleur.red('[ncms]: pulling your content from Notion...🛸'))\n\t    try {\n\t      const cmsOutput = await this._getDb(this.cms, cachedCMS)\n\t      if (!cmsOutput)\n\t        throw new Error('NotionCMS Error: DB fetch unsuccessful.')\n", "      this.cms = cmsOutput\n\t      this.cms = await this._getPageContent(this.cms, cachedCMS)\n\t      this.cms.stages.push('complete')\n\t      this.export()\n\t      if (!this.quietMode)\n\t        log.step(kleur.green('[ncms]: mission complete! 👽'))\n\t    }\n\t    catch (e) {\n\t      if (!this.quietMode)\n\t        clackSpinner.stop(kleur.red('[ncms]: Something went wrong. Mission aborted.'))\n", "      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t      console.error(`ncms error: ${e}`)\n\t    }\n\t    this.cms.routes = this.routes\n\t    this.cms.metadata.stats = {\n\t      ...this.logger.stats,\n\t      totalPages: this.cms.metadata.stats.totalPages,\n\t      durationSeconds: (Date.now() - this.timer) / 1000,\n\t    }\n\t    if (this.debug)\n", "      writeFile('debug/site-data.json', JSONStringifyWithFunctions(this.cms))\n\t    return this.cms\n\t  }\n\t  async asyncWalk(cb: Function, path?: string) {\n\t    const startPoint = path ? this.queryByPath(path) : this.cms.siteData\n\t    await new AsyncWalkBuilder()\n\t      .withCallback({\n\t        nodeTypeFilters: ['object'],\n\t        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n\t        callback: (node: WalkNode) => cb(node.val) as AsyncCallbackFn,\n", "      })\n\t      .withRootObjectCallbacks(false)\n\t      .withParallelizeAsyncCallbacks(true)\n\t      .walk(startPoint)\n\t  }\n\t  walk(cb: Function, path?: string) {\n\t    const startPoint = path ? this.queryByPath(path) : this.cms.siteData\n\t    new WalkBuilder()\n\t      .withCallback({\n\t        nodeTypeFilters: ['object'],\n", "        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n\t        callback: (node: WalkNode) => cb(node.val) as unknown,\n\t      })\n\t      .withRootObjectCallbacks(false)\n\t      .walk(startPoint)\n\t  }\n\t  getTaggedCollection(tags: string | Array<string>): Array<Page | undefined> {\n\t    if (!_.isArray(tags))\n\t      tags = [tags]\n\t    const taggedPages = [] as Array<string>\n", "    for (const tag of tags)\n\t      taggedPages.push(...this.cms.tagGroups[tag])\n\t    if (typeof this.cms.siteData !== 'string')\n\t      return _(taggedPages).map(path => this.queryByPath(path)).uniq().value()\n\t    return []\n\t  }\n\t  filterSubPages(pathOrPage: string | Page): Array<Page> {\n\t    if (typeof pathOrPage === 'string')\n\t      pathOrPage = this.queryByPath(pathOrPage)\n\t    return _(pathOrPage)\n", "      .entries()\n\t      .filter(([key]) => key.startsWith('/'))\n\t      .map(e => e[1]).value() as Page[]\n\t  }\n\t  rejectSubPages(pathOrPage: string | Page): Page {\n\t    if (typeof pathOrPage === 'string')\n\t      pathOrPage = this.queryByPath(pathOrPage)\n\t    return _(pathOrPage)\n\t      .entries()\n\t      .reject(([key]) => key.startsWith('/'))\n", "      .fromPairs().value() as Page\n\t  }\n\t  _queryByPath(path: string, siteData: Record<string, Page>): Page {\n\t    const segments = path.split('/').slice(1)\n\t    if (this.rootAlias && path !== '/')\n\t      segments.unshift('') // This lets us access the root aliased page.\n\t    let access: Page = siteData\n\t    for (const segment of segments) {\n\t      // @ts-expect-error-next-line\n\t      access = access[`/${segment}`] as Page\n", "    }\n\t    return access\n\t  }\n\t  queryByPath(path: string): Page {\n\t    return this._queryByPath(path, this.cms.siteData)\n\t  }\n\t  export({ pretty = false, path = this.localCacheUrl }:\n\t  { pretty?: boolean; path?: string } = {}) {\n\t    this.cms.lastUpdateTimestamp = Date.now()\n\t    if (pretty) {\n", "      // This drops Functions too, so only use for inspection\n\t      writeFile(path, JSON.stringify(this.cms, filterAncestors))\n\t    }\n\t    else {\n\t      writeFile(path, JSONStringifyWithFunctions(this.cms))\n\t    }\n\t  }\n\t  async import(previousState: string, flatted?: boolean): Promise<CMS> {\n\t    let parsedPreviousState\n\t    try {\n", "      if (flatted)\n\t        parsedPreviousState = JSONParseWithFunctions(previousState) as CMS\n\t      else\n\t        parsedPreviousState = JSON.parse(previousState) as CMS\n\t    }\n\t    catch (e) {\n\t      throw new Error(`Parsing input CMS failed.\n\t                      Make sure your input follows the NotionCMS spec, uses a validator plugin or a transformation plugin.`)\n\t    }\n\t    const transformedPreviousState = await this._runPlugins(parsedPreviousState, 'import') as CMS\n", "    return this.cms = transformedPreviousState\n\t  }\n\t  purgeCache(): boolean {\n\t    try {\n\t      fs.rmSync(this.localCacheUrl)\n\t    }\n\t    catch (e) {\n\t      if (this.debug)\n\t        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t        console.log(`ncms: error when attempting to clear cache: ${e}`)\n", "      return false\n\t    }\n\t    if (this.debug)\n\t      console.log('ncms: cache has been successfully cleared.')\n\t    return true\n\t  }\n\t}\n"]}
{"filename": "src/notion-blocks-html-parser.ts", "chunked_list": ["import type { Renderer as MarkedRenderer } from 'marked'\n\timport { marked } from 'marked'\n\timport hljs from 'highlight.js'\n\timport type { Blocks } from '@notion-stuff/v4-types'\n\timport _ from 'lodash'\n\t// @ts-expect-error module\n\timport { gfmHeadingId } from 'marked-gfm-heading-id'\n\timport type NotionBlocksMarkdownParser from './notion-blocks-md-parser'\n\texport default class NotionBlocksHtmlParser {\n\t  markdownParser: NotionBlocksMarkdownParser\n", "  renderer: MarkedRenderer\n\t  markedOptions\n\t  debug: boolean\n\t  constructor(parser: NotionBlocksMarkdownParser, debug?: boolean) {\n\t    this.markdownParser = parser\n\t    this.debug = debug || false\n\t    this.renderer = new marked.Renderer()\n\t    this.renderer.code = this._highlight.bind(this)\n\t    this.markedOptions = {\n\t      renderer: this.renderer,\n", "      pedantic: false,\n\t      mangle: false,\n\t      gfm: true,\n\t      headerIds: true,\n\t      breaks: false,\n\t      sanitize: false,\n\t      smartypants: false,\n\t      xhtml: false,\n\t      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t      extensions: [gfmHeadingId({ prefix: '' })],\n", "    }\n\t    marked.use({ silent: true })\n\t    // This is a workaround so that hljs doesn't complain about mermaid not being a registered lang.\n\t    hljs.registerAliases('mermaid', { languageName: 'plaintext' })\n\t  }\n\t  marked(md: string): string {\n\t    return marked(md, this.markedOptions)\n\t  }\n\t  parse(blocks: Blocks) {\n\t    let markdown = this.markdownParser.parse(blocks)\n", "    // if (this.debug)\n\t    //   fs.writeFileSync('./debug/parsed.md', markdown)\n\t    // Take another pass to wrap any deeply nested mixed HTML content's inner text in p tags\n\t    markdown = this._mixedHTML(markdown)\n\t    // if (this.debug)\n\t    //   fs.appendFileSync('./debug/parsed.md', `--------ALTERED----------**\\n\\n\\n${markdown}`)\n\t    return marked(markdown, this.markedOptions)\n\t  }\n\t  _highlight(code: string, lang: string | undefined): string {\n\t    let language\n", "    if (lang === 'mermaid')\n\t      language = 'mermaid'\n\t    else\n\t      language = (lang && hljs.getLanguage(lang)) ? lang : 'plaintext'\n\t    const higlighted = hljs.highlight(code, { language })\n\t    const langClass = `language-${\n\t      (!language || language.includes('plain')) ? 'none' : language}`\n\t    return `<pre><code class='hljs ${langClass}'>${higlighted.value}</code></pre>`\n\t  }\n\t  _mixedHTML(mixedHtml: string) {\n", "    return mixedHtml.replaceAll(/[^<>]+?(?=<\\/)/g, (match) => {\n\t      // Must trim or Marked classifies text preceded by tabs as indented code.\n\t      const tokens = marked.lexer(_.trim(match), this.markedOptions)\n\t      return marked.parser(tokens, this.markedOptions)\n\t    })\n\t  }\n\t}\n"]}
{"filename": "src/notion-blocks-md-parser.ts", "chunked_list": ["import type {\n\t  Annotations,\n\t  AudioBlock,\n\t  Blocks,\n\t  BulletedListItemBlock,\n\t  CalloutBlock,\n\t  CalloutIconEmoji,\n\t  CalloutIconExternal,\n\t  CalloutIconFile,\n\t  CodeBlock,\n", "  EmbedBlock,\n\t  ExternalFileWithCaption,\n\t  FileBlock,\n\t  FileWithCaption,\n\t  HeadingBlock,\n\t  ImageBlock,\n\t  LinkPreviewBlock,\n\t  LinkToPageBlock,\n\t  NumberedListItemBlock,\n\t  PDFBlock,\n", "  ParagraphBlock,\n\t  QuoteBlock,\n\t  RichText,\n\t  RichTextEquation,\n\t  RichTextMention,\n\t  RichTextText,\n\t  ToDoBlock,\n\t  ToggleBlock,\n\t  VideoBlock,\n\t} from '@notion-stuff/v4-types'\n", "import { uuidToId } from 'notion-utils'\n\tconst EOL_MD = '\\n'\n\texport default class NotionBlocksMarkdownParser {\n\t  parse(blocks: Blocks, depth = 0): string {\n\t    return blocks\n\t      .reduce((markdown, childBlock) => {\n\t        let childBlockString = ''\n\t        // @ts-expect-error children\n\t        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t        if (childBlock.has_children && childBlock[childBlock.type].children) {\n", "          childBlockString = ' '\n\t            .repeat(depth)\n\t            .concat(\n\t              childBlockString,\n\t              // @ts-expect-error children\n\t              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t              this.parse(childBlock[childBlock.type].children, depth + 2),\n\t            )\n\t        }\n\t        if (childBlock.type === 'unsupported') {\n", "          markdown += 'NotionAPI Unsupported'.concat(\n\t            EOL_MD.repeat(2),\n\t            childBlockString,\n\t          )\n\t        }\n\t        if (childBlock.type === 'paragraph')\n\t          markdown += this.parseParagraph(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'code')\n\t          markdown += this.parseCodeBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'quote')\n", "          markdown += this.parseQuoteBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'callout') {\n\t          markdown\n\t            += this.parseCalloutBlock(childBlock).concat(childBlockString)\n\t        }\n\t        if (childBlock.type.startsWith('heading_')) {\n\t          const headingLevel = Number(childBlock.type.split('_')[1])\n\t          markdown += this.parseHeading(\n\t            childBlock as HeadingBlock,\n\t            headingLevel,\n", "          ).concat(childBlockString)\n\t        }\n\t        if (childBlock.type === 'bulleted_list_item') {\n\t          markdown\n\t            += this.parseBulletedListItems(childBlock).concat(childBlockString)\n\t        }\n\t        if (childBlock.type === 'numbered_list_item') {\n\t          markdown\n\t            += this.parseNumberedListItems(childBlock).concat(childBlockString)\n\t        }\n", "        if (childBlock.type === 'to_do')\n\t          markdown += this.parseTodoBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'toggle') {\n\t          markdown += this.parseToggleBlock(childBlock).replace(\n\t            '{{childBlock}}',\n\t            childBlockString,\n\t          )\n\t        }\n\t        if (childBlock.type === 'image')\n\t          markdown += this.parseImageBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'embed')\n\t          markdown += this.parseEmbedBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'audio')\n\t          markdown += this.parseAudioBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'video')\n\t          markdown += this.parseVideoBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'file')\n\t          markdown += this.parseFileBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'pdf')\n\t          markdown += this.parsePdfBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'link_to_page')\n\t          markdown += this.parseLinkToPageBlock(childBlock).concat(childBlockString)\n\t        if (childBlock.type === 'divider')\n\t          markdown += EOL_MD.concat('---', EOL_MD, childBlockString)\n\t        if (childBlock.type === 'link_preview')\n\t          markdown += this.parseLinkPreview(childBlock).concat(childBlockString)\n\t        return markdown\n\t      }, '')\n\t      .concat(EOL_MD)\n\t  }\n", "  parseLinkPreview(linkPreviewBlock: LinkPreviewBlock): string {\n\t    return `<div notion-link-preview>\n\t      <a href=\"${linkPreviewBlock.link_preview.url}\">${linkPreviewBlock.link_preview.url}</a>\n\t    </div>\\n\\n`\n\t  }\n\t  parseParagraph(paragraphBlock: ParagraphBlock): string {\n\t    const text: string = this.parseRichTexts(paragraphBlock.paragraph.rich_text)\n\t    return EOL_MD.concat(text, EOL_MD)\n\t  }\n\t  parseCodeBlock(codeBlock: CodeBlock): string {\n", "    return `\\n\\n\\`\\`\\`${codeBlock.code.language.toLowerCase() || ''}\n\t${(codeBlock.code.rich_text[0] as RichTextText).text.content}\n\t\\`\\`\\`\\n\\n`.concat(EOL_MD)\n\t  }\n\t  parseQuoteBlock(quoteBlock: QuoteBlock): string {\n\t    return EOL_MD.concat(\n\t      `> ${this.parseRichTexts(quoteBlock.quote.rich_text)}`,\n\t      EOL_MD,\n\t    )\n\t  }\n", "  parseCalloutBlock(calloutBlock: CalloutBlock) {\n\t    const callout = `<div notion-callout>\n\t  {{icon}}\n\t  <span notion-callout-text>\n\t    ${this.parseRichTexts(calloutBlock.callout.rich_text)}\n\t  </span>\n\t</div>`\n\t    function getCalloutIcon(\n\t      icon: CalloutIconEmoji | CalloutIconExternal | CalloutIconFile,\n\t    ) {\n", "      switch (icon.type) {\n\t        case 'emoji':\n\t          return `<span notion-callout-emoji>${icon.emoji}</span>`\n\t        case 'external':\n\t          return `<img notion-callout-external src='${icon.external.url}' alt='notion-callout-external-link'/>`\n\t        case 'file':\n\t          // TODO: add support for Callout File\n\t          return 'notion-callout-file'\n\t      }\n\t    }\n", "    return EOL_MD.concat(\n\t      // @ts-expect-error callout\n\t      callout.replace('{{icon}}', getCalloutIcon(calloutBlock.callout.icon)),\n\t      EOL_MD,\n\t    )\n\t  }\n\t  parseHeading(headingBlock: HeadingBlock, headingLevel: number): string {\n\t    return EOL_MD.concat(\n\t      '#'.repeat(headingLevel),\n\t      ' ',\n", "      // @ts-expect-error heading\n\t      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n\t      this.parseRichTexts(headingBlock[headingBlock.type].rich_text),\n\t      EOL_MD,\n\t    )\n\t  }\n\t  parseBulletedListItems(bulletedListItemBlock: BulletedListItemBlock): string {\n\t    return '* '.concat(\n\t      this.parseRichTexts(bulletedListItemBlock.bulleted_list_item.rich_text),\n\t      EOL_MD,\n", "    )\n\t  }\n\t  parseNumberedListItems(numberedListItemBlock: NumberedListItemBlock): string {\n\t    return '1. '.concat(\n\t      this.parseRichTexts(numberedListItemBlock.numbered_list_item.rich_text),\n\t      EOL_MD,\n\t    )\n\t  }\n\t  parseTodoBlock(todoBlock: ToDoBlock): string {\n\t    return `- [${todoBlock.to_do.checked ? 'x' : ' '}] `.concat(\n", "      this.parseRichTexts(todoBlock.to_do.rich_text),\n\t      EOL_MD,\n\t    )\n\t  }\n\t  parseToggleBlock(toggleBlock: ToggleBlock): string {\n\t    return `<details><summary>${this.parseRichTexts(\n\t      toggleBlock.toggle.rich_text,\n\t    )}</summary>{{childBlock}}</details>`\n\t  }\n\t  parseImageBlock(imageBlock: ImageBlock): string {\n", "    const { url, caption } = this.parseFile(imageBlock.image)\n\t    return `\n\t<figure notion-figure>\n\t  <img src='${url}' alt='${caption}'>\n\t  <figcaption notion-figcaption>${caption}</figcaption>\n\t</figure>\n\t`.concat(EOL_MD)\n\t  }\n\t  parseAudioBlock(audioBlock: AudioBlock): string {\n\t    const { url, caption } = this.parseFile(audioBlock.audio)\n", "    return `![${caption}](${url})`\n\t  }\n\t  parseVideoBlock(videoBlock: VideoBlock): string {\n\t    const { url, caption } = this.parseFile(videoBlock.video)\n\t    const [processed, iframeOrUrl] = processExternalVideoUrl(url)\n\t    if (processed)\n\t      return EOL_MD.concat(iframeOrUrl, EOL_MD)\n\t    return `To be supported: ${url} with ${caption}`.concat(EOL_MD)\n\t  }\n\t  parseFileBlock(fileBlock: FileBlock): string {\n", "    const { url, caption } = this.parseFile(fileBlock.file)\n\t    return `To be supported: ${url} with ${caption}`.concat(EOL_MD)\n\t  }\n\t  parsePdfBlock(pdfBlock: PDFBlock): string {\n\t    const { url, caption } = this.parseFile(pdfBlock.pdf)\n\t    return `\n\t<figure>\n\t  <object data='${url}' type='application/pdf'></object>\n\t  <figcaption>${caption}</figcaption>\n\t</figure>\n", "`.concat(EOL_MD)\n\t  }\n\t  parseEmbedBlock(embedBlock: EmbedBlock): string {\n\t    const embedded = `<iframe src='${embedBlock.embed.url}'></iframe>`\n\t    if (embedBlock.embed.caption) {\n\t      return `\n\t<figure>\n\t  ${embedded}\n\t  <figcaption>${this.parseRichTexts(embedBlock.embed.caption)}</figcaption>\n\t</figure>`.concat(EOL_MD)\n", "    }\n\t    return embedded.concat(EOL_MD)\n\t  }\n\t  parseRichTexts(richTexts: RichText[]): string {\n\t    return richTexts.reduce((parsedContent, richText) => {\n\t      switch (richText.type) {\n\t        case 'text':\n\t          parsedContent += this.parseText(richText)\n\t          break\n\t        case 'mention':\n", "          parsedContent += this.parseMention(richText)\n\t          break\n\t        case 'equation':\n\t          parsedContent += this.parseEquation(richText)\n\t          break\n\t      }\n\t      return parsedContent\n\t    }, '')\n\t  }\n\t  parseText(richText: RichTextText): string {\n", "    const content = this.annotate(richText.annotations, richText.text.content)\n\t    return richText.text.link\n\t      ? this.annotateLink(richText.text, content)\n\t      : content\n\t  }\n\t  // TODO: support mention when we know what it actually means\n\t  parseMention(mention: RichTextMention): string {\n\t    switch (mention.mention.type) {\n\t      case 'user':\n\t        break\n", "      case 'page':\n\t        break\n\t      case 'database':\n\t        break\n\t      case 'date':\n\t        break\n\t    }\n\t    return this.annotate(mention.annotations, mention.plain_text)\n\t  }\n\t  parseEquation(equation: RichTextEquation): string {\n", "    return this.annotate(\n\t      equation.annotations,\n\t      `$${equation.equation.expression}$`,\n\t    )\n\t  }\n\t  parseLinkToPageBlock(linkToPage: LinkToPageBlock) {\n\t    const link = linkToPage.link_to_page as {\n\t      type: 'page_id'\n\t      page_id: string\n\t    }\n", "    const id = uuidToId(link.page_id)\n\t    // These will get replaced if ncms-plugin-linker is used.\n\t    return `<a href=\"/${id}\">/${id}</a>`\n\t  }\n\t  parseFile(file: ExternalFileWithCaption | FileWithCaption): {\n\t    caption: string\n\t    url: string\n\t  } {\n\t    const fileContent = {\n\t      caption: '',\n", "      url: '',\n\t    }\n\t    switch (file.type) {\n\t      case 'external':\n\t        fileContent.url = file.external.url\n\t        break\n\t      case 'file':\n\t        fileContent.url = file.file.url\n\t        break\n\t    }\n", "    fileContent.caption = file.caption\n\t      ? this.parseRichTexts(file.caption)\n\t      : fileContent.url\n\t    return fileContent\n\t  }\n\t  private annotate(annotations: Annotations, originalContent: string): string {\n\t    // @ts-expect-error reduce\n\t    return Object.entries(annotations).reduce(\n\t      // @ts-expect-error reduce\n\t      (\n", "        annotatedContent,\n\t        [modifier, isOnOrColor]: [\n\t          keyof Annotations,\n\t          boolean | Annotations['color'],\n\t        ],\n\t      ) =>\n\t        isOnOrColor\n\t          ? this.annotateModifier(\n\t            modifier,\n\t            annotatedContent,\n", "            isOnOrColor as Annotations['color'],\n\t          )\n\t          : annotatedContent,\n\t      originalContent,\n\t    )\n\t  }\n\t  private annotateLink(\n\t    text: RichTextText['text'],\n\t    annotatedContent: string,\n\t  ): string {\n", "    return `[${annotatedContent}](${\n\t      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t      text?.link?.url ? text?.link.url : text.link\n\t    })`\n\t  }\n\t  private annotateModifier(\n\t    modifier: keyof Annotations,\n\t    originalContent: string,\n\t    color?: Annotations['color'],\n\t  ): string {\n", "    switch (modifier) {\n\t      case 'bold':\n\t        return `**${originalContent}**`\n\t      case 'italic':\n\t        return `_${originalContent}_`\n\t      case 'strikethrough':\n\t        return `~~${originalContent}~~`\n\t      case 'underline':\n\t        return `<u>${originalContent}</u>`\n\t      case 'code':\n", "        return `\\`${originalContent}\\``\n\t      case 'color':\n\t        if (color !== 'default')\n\t          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t          return `<span notion-color='${color}'>${originalContent}</span>`\n\t        return originalContent\n\t    }\n\t  }\n\t}\n\tfunction processExternalVideoUrl(url: string): [boolean, string] {\n", "  if (url.includes('youtu'))\n\t    return processYoutubeUrl(url)\n\t  return [false, url]\n\t}\n\tfunction processYoutubeUrl(youtubeUrl: string): [boolean, string] {\n\t  const lastPart = youtubeUrl.split('/').pop()\n\t  const youtubeIframe = '<iframe width=\\'560\\' height=\\'315\\' src=\\'https://www.youtube-nocookie.com/embed/{{videoId}}\\' title=\\'YouTube video player\\' frameborder=\\'0\\' allow=\\'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\' allowfullscreen></iframe>'\n\t  if (!lastPart)\n\t    return [true, youtubeIframe]\n\t  if (lastPart.includes('watch')) {\n", "    const [, queryString] = lastPart.split('watch')\n\t    const queryParams = new URLSearchParams(queryString)\n\t    if (queryParams.has('v'))\n\t      return [true, youtubeIframe.replace('{{videoId}}', queryParams.get('v') || '')]\n\t    return [false, youtubeUrl]\n\t  }\n\t  return [true, youtubeIframe.replace('{{videoId}}', lastPart)]\n\t}\n"]}
{"filename": "src/index.ts", "chunked_list": ["export type {\n\t  Properties,\n\t  Options,\n\t  CMS,\n\t  Route,\n\t  Page,\n\t  PageObjectTitle,\n\t  PageObjectRelation,\n\t  PageObjectUser,\n\t  PageMultiSelect,\n", "  PageRichText,\n\t  PageSelect,\n\t  Cover,\n\t  RouteObject,\n\t  Plugin,\n\t  PluginPassthrough,\n\t} from './types'\n\texport type { BlockRenderers } from './notion-blocks-parser'\n\texport { default as NotionBlocksParser } from './notion-blocks-parser'\n\texport { default } from './notion-cms'\n", "export { default as blocksRenderPlugin } from './plugins/render'\n\texport { default as Linker } from './plugins/linker'\n\texport { default as Images } from './plugins/images'\n\texport { default as Head } from './plugins/head'\n"]}
{"filename": "src/utilities.ts", "chunked_list": ["import { dirname } from 'node:path'\n\timport fs from 'node:fs'\n\timport serializeJS from 'serialize-javascript'\n\timport { parse, stringify } from 'flatted'\n\timport _ from 'lodash'\n\texport function deserialize(serializedJavascript: string): Function {\n\t  // eslint-disable-next-line no-eval\n\t  return eval?.(`(${serializedJavascript})`) as Function\n\t}\n\texport function replaceFuncs(key: string, value: unknown) {\n", "  return typeof value === 'function'\n\t    ? `__func__${serializeJS(value)}`\n\t    : value\n\t}\n\texport function reviveFuncs(key: string, value: unknown) {\n\t  return (typeof value === 'string' && value.startsWith('__func__'))\n\t    ? deserialize(value.replace('__func__', ''))\n\t    : value\n\t}\n\texport function filterAncestors(key: string, value: unknown) {\n", "  if (key === '_ancestors')\n\t    return '[ancestors ref]'\n\t  return value\n\t}\n\texport function JSONStringifyWithFunctions(obj: Object): string {\n\t  return stringify(obj, replaceFuncs)\n\t}\n\texport function JSONParseWithFunctions(string: string): Object {\n\t  return parse(string, reviveFuncs) as Object\n\t}\n", "export function writeFile(path: string, contents: string): void {\n\t  fs.mkdirSync(dirname(path), { recursive: true })\n\t  fs.writeFileSync(path, contents)\n\t}\n\texport function slugify(name: string): string {\n\t  return _.kebabCase(name)\n\t}\n\texport function routify(name: string): string {\n\t  const slug = slugify(name)\n\t  return slug.padStart(slug.length + 1, '/')\n", "}\n"]}
{"filename": "src/plugins/images.ts", "chunked_list": ["import fs from 'node:fs'\n\timport { Buffer } from 'node:buffer'\n\timport { fileTypeFromBuffer } from 'file-type'\n\timport { nanoid } from 'nanoid'\n\timport sharp from 'sharp'\n\timport type { Content, PageContent, PluginExecOptions } from '../types'\n\tinterface ImageCacheEntry {\n\t  filename?: string\n\t  location?: string\n\t  url?: string\n", "}\n\tinterface ImageCache { [key: string]: Array<ImageCacheEntry> }\n\tconst IMAGE_FILE_MATCH_REGEX = /(.*)X-Amz-Algorithm/g\n\tconst IMAGE_CACHE_FILENAME = 'ncms-image-cache.json'\n\tconst GENERIC_MATCH = /\\b(https?:\\/\\/[\\w_#&?.\\/-]*?\\.(?:png|jpe?g|svg|ico))(?=[`'\")\\]])/ig\n\tconst IMAGE_SOURCE_MATCH = /<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/ig\n\tfunction multiStringMatch(stringA: unknown, stringB: unknown): Boolean {\n\t  if (typeof stringA !== 'string' || typeof stringB !== 'string' || !stringA || !stringB)\n\t    return false\n\t  const matchA = stringA.match(IMAGE_FILE_MATCH_REGEX)\n", "  const matchB = stringB.match(IMAGE_FILE_MATCH_REGEX)\n\t  return Boolean(matchA && matchB && (matchA[0] === matchB[0]))\n\t}\n\texport default function ({\n\t  globalExtension = 'webp',\n\t  compression = 80,\n\t  imageCacheDirectory = './public',\n\t  customMatchers = [],\n\t}: {\n\t  globalExtension?: 'webp' | 'png' | 'jpeg'\n", "  compression?: number\n\t  imageCacheDirectory?: string\n\t  customMatchers?: RegExp[]\n\t} = {}) {\n\t  let imageCache: ImageCache\n\t  try {\n\t  // Pull existing imageCache\n\t    if (fs.existsSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`)) {\n\t      imageCache = JSON.parse(\n\t        fs.readFileSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`, 'utf-8')) as ImageCache\n", "    }\n\t    else {\n\t      imageCache = {}\n\t    }\n\t  }\n\t  catch (e) {\n\t    console.warn(e, 'ncms-plugin-images: error attempting to read image cache.')\n\t    imageCache = {}\n\t  }\n\t  async function writeOutImage(imageUrl: string, existingImageFile: ImageCacheEntry): Promise<string> {\n", "    let filename = ''\n\t    if (existingImageFile)\n\t      return existingImageFile.filename as string\n\t    const response = await fetch(imageUrl)\n\t    const arrayBuffer = await response.arrayBuffer()\n\t    const buffer = Buffer.from(arrayBuffer)\n\t    const fileType = await fileTypeFromBuffer(buffer)\n\t    if (fileType?.ext) {\n\t      const id = nanoid(6)\n\t      filename = `${id}.remote.${globalExtension}`\n", "      const outputFilePath = `${imageCacheDirectory}/remote/${filename}`\n\t      const imageBuffer = sharp(buffer)\n\t      const webPBuffer = await imageBuffer[globalExtension]({\n\t        quality: compression,\n\t        nearLossless: true,\n\t        effort: 6,\n\t      }).toBuffer()\n\t      const writeStream = fs.createWriteStream(outputFilePath)\n\t      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t      writeStream.on('error', err => console.warn(`ncms-plugin-images: failed to write image file: ${err}`))\n", "      writeStream.write(webPBuffer)\n\t    }\n\t    return filename\n\t  }\n\t  function detectExisting(path: string, imageUrl: string): ImageCacheEntry {\n\t    const entries = imageCache[path]\n\t    return entries.filter((entry) => {\n\t      return multiStringMatch(entry.url, imageUrl) || multiStringMatch(entry.location, imageUrl)\n\t    })[0]\n\t  }\n", "  async function processImage(\n\t    path: string,\n\t    imageUrl: string,\n\t    updator: { update: Content | string },\n\t    debug?: boolean): Promise<void> {\n\t    if (imageUrl && path) {\n\t      let filename = ''\n\t      try {\n\t        filename = await writeOutImage(imageUrl, detectExisting(path, imageUrl))\n\t      }\n", "      catch (e) {\n\t        if (debug)\n\t          console.warn('ncms-plugin-images: File type could not be reliably determined! The binary data may be malformed! No file saved!')\n\t        return\n\t      }\n\t      if (filename) {\n\t        imageCache[path].push({\n\t          filename,\n\t          location: `/remote/${filename}`,\n\t          url: imageUrl,\n", "        })\n\t        // if we don't do this, the replaceall cant find the proper url below\n\t        if (typeof updator.update !== 'string') {\n\t          if (updator.update?.html.includes('amazonaws'))\n\t            updator.update.html = updator.update.html.replaceAll('&amp;', '&')\n\t          updator.update.html = updator.update.html.replace(imageUrl, `/remote/${filename}`)\n\t        }\n\t        else {\n\t          // This replaces the coverImage\n\t          updator.update = updator.update.replace(imageUrl, `/remote/${filename}`)\n", "        }\n\t        if (debug)\n\t          console.log('ncms-plugin-images: rewriting', path, 'at', filename)\n\t      }\n\t    }\n\t  }\n\t  return {\n\t    name: 'ncms-plugin-images',\n\t    hook: 'during-tree',\n\t    core: true,\n", "    exec: async (context: PageContent, options: PluginExecOptions) => {\n\t      const copyOfContext = structuredClone(context)\n\t      if (!copyOfContext.path)\n\t        return\n\t      const matchables = [\n\t        GENERIC_MATCH,\n\t        IMAGE_SOURCE_MATCH,\n\t        ...customMatchers,\n\t      ]\n\t      if (!imageCache[copyOfContext.path])\n", "        imageCache[copyOfContext.path] = [] as ImageCacheEntry[]\n\t      const contents = {\n\t        update: copyOfContext.content as Content,\n\t      }\n\t      const coverImage = {\n\t        update: copyOfContext.coverImage as string,\n\t      }\n\t      // Must run all async in series so that we don't end up with duplicates\n\t      for (const match of matchables) {\n\t        if (!copyOfContext.path)\n", "          return\n\t        const path = copyOfContext.path\n\t        const matched = (contents.update && Array.from(contents.update.html.matchAll(match), m => m[1])) || []\n\t        const matchedCoverImages = (coverImage.update && [coverImage.update]) || []\n\t        for (const imageUrl of matched)\n\t          await processImage(path, imageUrl, contents, options.debug)\n\t        for (const imageUrl of matchedCoverImages)\n\t          await processImage(path, imageUrl, coverImage, options.debug)\n\t      }\n\t      copyOfContext.content = contents.update\n", "      copyOfContext.coverImage = coverImage.update\n\t      try {\n\t        if (!fs.existsSync(`${imageCacheDirectory}/remote`))\n\t          fs.mkdirSync(`${imageCacheDirectory}/remote`)\n\t        fs.writeFileSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`, JSON.stringify(imageCache))\n\t        if (options.debug)\n\t          fs.writeFileSync('debug/images.json', JSON.stringify(imageCache))\n\t      }\n\t      catch (e) {\n\t        if (options.debug)\n", "          console.warn(e, 'ncms-plugin-images: error writing to image cache.')\n\t      }\n\t      return copyOfContext\n\t    },\n\t  }\n\t}\n"]}
{"filename": "src/plugins/render.ts", "chunked_list": ["import type { Blocks } from '@notion-stuff/v4-types'\n\timport _ from 'lodash'\n\timport type { BlockRenderers } from '../notion-blocks-parser'\n\timport NotionBlocksParser from '../notion-blocks-parser'\n\timport type { PluginPassthrough, UnsafePlugin } from '../types'\n\texport default function ({\n\t  blockRenderers,\n\t  debug,\n\t}: { blockRenderers: BlockRenderers; debug?: boolean }) {\n\t  const parser = new NotionBlocksParser({ blockRenderers, debug })\n", "  return {\n\t    parser,\n\t    name: 'ncms-plugin-blocks-render',\n\t    core: true,\n\t    hook: 'parse',\n\t    exec: (context: PluginPassthrough): string => {\n\t      const copyOfContext = _.cloneDeep(context) as Blocks\n\t      return parser.blocksToHtml(copyOfContext)\n\t    },\n\t  } satisfies UnsafePlugin\n", "}\n"]}
{"filename": "src/plugins/linker.ts", "chunked_list": ["import { idToUuid } from 'notion-utils'\n\timport type { CMS, PageContent } from '../types'\n\timport NotionCMS from '../notion-cms'\n\tconst links: Map<string, string> = new Map()\n\tconst ESCAPED_HREF_REGEX = /<a\\s+(?:[^>]*?\\s+)?href=([\"'])\\/([0-9a-f]{8}[0-9a-f]{4}[0-9a-f]{4}[0-9a-f]{4}[0-9a-f]{12})\\1/g\n\texport default function () {\n\t  return [{\n\t    name: 'ncms-plugin-linker',\n\t    hook: 'during-tree',\n\t    core: true,\n", "    exec: (context: PageContent) => {\n\t      const copyOfContext = structuredClone(context)\n\t      if (copyOfContext._notion?.id && copyOfContext.path)\n\t        links.set(copyOfContext._notion?.id, copyOfContext.path)\n\t      return copyOfContext\n\t    },\n\t  },\n\t  {\n\t    name: 'ncms-plugin-linker',\n\t    hook: 'post-tree',\n", "    core: true,\n\t    exec: (context: CMS) => {\n\t      const copyOfContext = structuredClone(context)\n\t      const cmsWalker = NotionCMS._createCMSWalker((node: PageContent) => {\n\t        let html: string | undefined = node.content?.html\n\t        let md: string | undefined = node.content?.markdown\n\t        let plaintext: string | undefined = node.content?.plaintext\n\t        if (html) {\n\t          const pathsToReplace = [...html.matchAll(ESCAPED_HREF_REGEX)]\n\t          pathsToReplace.forEach((path) => {\n", "            const id = path[2]\n\t            const uuid = idToUuid(id)\n\t            const replacerPath = links.get(uuid)\n\t            if (uuid && !replacerPath) {\n\t              console.warn(\n\t                `ncms-plugin-linker: found a uuid without a corresponding path. This page: ${uuid} is not included in NotionCMS.`)\n\t            }\n\t            if (replacerPath && uuid && html) {\n\t              html = html.replaceAll(`/${id}`, replacerPath)\n\t              md = md?.replaceAll(`/${id}`, replacerPath)\n", "              plaintext = plaintext?.replaceAll(`/${id}`, replacerPath)\n\t            }\n\t          })\n\t          if (node.content) {\n\t            node.content.html = html\n\t            if (md)\n\t              node.content.markdown = md\n\t            if (plaintext)\n\t              node.content.plaintext = plaintext\n\t          }\n", "        }\n\t      })\n\t      cmsWalker.walk(copyOfContext)\n\t      return copyOfContext\n\t    },\n\t  }]\n\t}\n"]}
{"filename": "src/plugins/head.ts", "chunked_list": ["import type { PageContent } from '../types'\n\texport default function () {\n\t  return {\n\t    name: 'ncms-plugin-head',\n\t    hook: 'during-tree',\n\t    core: true,\n\t    exec: (context: PageContent) => {\n\t      const copyOfContext = structuredClone(context) as PageContentWithMeta\n\t      copyOfContext.meta = {\n\t        title: '',\n", "        description: '',\n\t      }\n\t      if (copyOfContext.otherProps?.metaTitle\n\t         && copyOfContext.otherProps?.metaTitle.type === 'rich_text')\n\t        copyOfContext.meta.title = copyOfContext.otherProps?.metaTitle?.rich_text[0]?.plain_text\n\t      if (copyOfContext.otherProps?.metaDescription\n\t         && copyOfContext.otherProps?.metaDescription.type === 'rich_text')\n\t        copyOfContext.meta.description = copyOfContext.otherProps?.metaDescription?.rich_text[0]?.plain_text\n\t      return copyOfContext\n\t    },\n", "  }\n\t}\n\texport interface PageContentWithMeta extends PageContent {\n\t  meta: Meta\n\t}\n\tinterface Meta {\n\t  title: string\n\t  description: string\n\t}\n"]}
{"filename": "src/tests/limiter.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-nocheck\n\timport { setTimeout } from 'node:timers/promises'\n\timport Bottleneck from 'bottleneck'\n\timport dotenv from 'dotenv'\n\timport { suite } from 'uvu'\n\timport * as assert from 'uvu/assert'\n\timport NotionCMS from '../index'\n\timport type { Content, PageContent } from '../types'\n\timport {\n", "  expectedRejectedPageData,\n\t  expectedRoutes,\n\t  expectedSiteData,\n\t  expectedTagGroups,\n\t  expectedTaggedCollection,\n\t  expectedTags,\n\t} from './notion-api-mock.spec'\n\tdotenv.config()\n\texport const TestLimiter = suite('TestLimiter')\n\tconst databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n", "const limiter = new Bottleneck({\n\t  maxConcurrent: 1,\n\t  minTime: 333,\n\t})\n\tconst testCMS = new NotionCMS({\n\t  databaseId,\n\t  notionAPIKey: process.env.NOTION,\n\t  draftMode: true,\n\t  limiter,\n\t})\n", "console.log('limiter test: purging cache')\n\ttestCMS.purgeCache()\n\tawait testCMS.fetch()\n\t// temporarily ignore md and plaintext versions of content\n\tfunction filterContent(content: Content) {\n\t  delete content.plaintext\n\t  delete content.markdown\n\t  return content\n\t}\n\ttestCMS.walk((node: PageContent) => filterContent(node.content))\n", "// routes\n\t// walk is used by routes so this is tested here implicitly\n\tTestLimiter('routes', () => {\n\t  assert.equal(testCMS.routes.sort(), expectedRoutes.sort())\n\t})\n\t// tags\n\tTestLimiter('tags', () => {\n\t  assert.equal(testCMS.cms.tags.sort(), expectedTags.sort())\n\t})\n\t// Tree structures\n", "TestLimiter('siteData', () => {\n\t  assert.equal(testCMS.cms.siteData, expectedSiteData)\n\t})\n\t// data getter\n\tTestLimiter('data (getter)', () => {\n\t  assert.equal(testCMS.cms.siteData, testCMS.data)\n\t})\n\t// taggedCollection\n\tTestLimiter('taggedCollection', () => {\n\t  const results = testCMS.getTaggedCollection(['notion', 'programming'])\n", "  assert.equal(results, expectedTaggedCollection)\n\t})\n\t// query by path\n\tTestLimiter('query by path', () => {\n\t  const productB = testCMS.queryByPath('/products/category/product-b')\n\t  assert.equal(productB.name, 'Product B')\n\t  const category = testCMS.queryByPath('/products/category')\n\t  assert.equal(category.name, 'Category')\n\t})\n\t// filter sub pages\n", "TestLimiter('filter sub pages', () => {\n\t  const category = testCMS.queryByPath('/products/category')\n\t  const productsInCategory = testCMS.filterSubPages(category)\n\t  const names = productsInCategory.map((product: PageContent) => product.name)\n\t  assert.equal(names, ['Product B', 'Product A'])\n\t  // Uncomment when fuzzy search is built\n\t  // const categoryB = testCMS.queryByPath('/category')\n\t  // const productsInCategoryB = testCMS.filterSubPages(categoryB)\n\t  // const namesB = productsInCategoryB.map(product => product.name)\n\t  // assert.equal(namesB, ['Product B', 'Product A'])\n", "})\n\t// reject sub pages\n\tTestLimiter('reject sub pages', () => {\n\t  const category = testCMS.queryByPath('/products/category')\n\t  const categoryProps = testCMS.rejectSubPages(category)\n\t  assert.equal(categoryProps, expectedRejectedPageData)\n\t  // Uncomment when fuzzy search is built\n\t  // const categoryB = testCMS.queryByPath('/category')\n\t  // const categoryPropsB = testCMS.rejectSubPages(categoryB)\n\t  // assert.equal(categoryPropsB, expectedRejectedPageData)\n", "})\n\tTestLimiter('walk from partial path', () => {\n\t  const test = []\n\t  testCMS.walk((node: PageContent) => test.push(node.name), '/products/category')\n\t  assert.equal(test, ['Product B', 'Product A'])\n\t})\n\tTestLimiter('async walk from partial path', async () => {\n\t  const test = []\n\t  await testCMS.asyncWalk(async (node: PageContent) => await setTimeout(test.push(node.name), 300), '/products/category')\n\t  assert.equal(test, ['Product B', 'Product A'])\n", "})\n\tTestLimiter('import', async () => {\n\t  assert.equal(\n\t    await testCMS.import(JSON.stringify({\n\t      metadata: {\n\t        databaseId,\n\t        rootUrl: '',\n\t      },\n\t      stages: [\n\t        'db',\n", "        'content',\n\t        'complete',\n\t      ],\n\t      routes: [],\n\t      tags: expectedTags,\n\t      tagGroups: expectedTagGroups,\n\t      siteData: expectedSiteData,\n\t    })),\n\t    testCMS.cms,\n\t  )\n", "})\n\tTestLimiter('import fails', async () => {\n\t  try {\n\t    await testCMS.import()\n\t    assert.unreachable('should have thrown')\n\t  }\n\t  catch (err) {\n\t    assert.instance(err, Error)\n\t  }\n\t})\n"]}
{"filename": "src/tests/test.ts", "chunked_list": ["import { TestNotionCMS } from './notion-cms.spec'\n\timport {\n\t  PluginsCustom,\n\t  PluginsCustomFallback,\n\t  PluginsDefault,\n\t  PluginsDefaultOther,\n\t} from './custom-render.spec'\n\timport { TestLimiter } from './limiter.spec'\n\timport { TestNotionCMSCache } from './notion-cms-caching.spec'\n\tTestNotionCMS.run()\n", "TestLimiter.run()\n\tPluginsDefault.run()\n\tPluginsDefaultOther.run()\n\tPluginsCustom.run()\n\tPluginsCustomFallback.run()\n\tTestNotionCMSCache.run()\n"]}
{"filename": "src/tests/custom-render.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-nocheck\n\timport { suite } from 'uvu'\n\timport * as assert from 'uvu/assert'\n\timport dotenv from 'dotenv'\n\timport type { Block } from '@notion-stuff/v4-types'\n\timport NotionCMS, { NotionBlocksParser, blocksRenderPlugin } from '../index'\n\timport type { Content, PageContent } from '../types'\n\timport {\n\t  expectedKitchenSinkSiteData,\n", "  expectedRoutes,\n\t  expectedSiteData,\n\t  expectedTags,\n\t} from './notion-api-mock.spec'\n\tdotenv.config()\n\t// Kitchen sink database\n\tconst databaseId = '21608fc7-c1c5-40a1-908f-9ade89585111'\n\tconst notionAPIKey = process.env.NOTION\n\tlet PluginsDefaultCMS: NotionCMS,\n\t  PluginsDefaultOtherCMS: NotionCMS,\n", "  PluginsCustomCMS: NotionCMS,\n\t  PluginsCustomFallbackCMS: NotionCMS\n\t// Helper Function for parsing internal block rich text\n\t// eslint-disable-next-line jest/unbound-method\n\tconst parseRichText = NotionBlocksParser.parseRichText\n\t// temporarily ignore md and plaintext versions of content\n\tfunction filterContent(content: Content) {\n\t  delete content.plaintext\n\t  delete content.markdown\n\t  return content\n", "}\n\texport const PluginsDefault = suite('PluginsDefault')\n\tPluginsDefault.before(async () => {\n\t  PluginsDefaultCMS = new NotionCMS({\n\t    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n\t    notionAPIKey,\n\t    draftMode: true,\n\t    // No Plugins - use default renderer plugin behind the scenes\n\t  })\n\t  console.log('custom render test: purging cache')\n", "  PluginsDefaultCMS.purgeCache()\n\t  await PluginsDefaultCMS.fetch()\n\t  PluginsDefaultCMS.walk((node: PageContent) => filterContent(node.content))\n\t})\n\t// routes\n\t// walk is used by routes so this is tested here implicitly\n\tPluginsDefault('routes', () => {\n\t  assert.equal(PluginsDefaultCMS.routes.sort(), expectedRoutes.sort())\n\t})\n\t// tags\n", "PluginsDefault('tags', () => {\n\t  assert.equal(PluginsDefaultCMS.cms.tags.sort(), expectedTags.sort())\n\t})\n\t// Tree structures\n\tPluginsDefault('siteData', () => {\n\t  assert.equal(PluginsDefaultCMS.cms.siteData, expectedSiteData)\n\t})\n\texport const PluginsDefaultOther = suite('PluginsDefaultOther')\n\tPluginsDefaultOther.before(async () => {\n\t  PluginsDefaultOtherCMS = new NotionCMS({\n", "    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n\t    notionAPIKey,\n\t    draftMode: true,\n\t    // Standin Plugin - use default renderer plugin behind the scenes\n\t    plugins: [() => ({\n\t      name: 'ncms-placeholder-plugin',\n\t      hook: 'post-parse',\n\t      exec: (block: Block) => block,\n\t    })],\n\t  })\n", "  console.log('custom render test: purging cache')\n\t  PluginsDefaultOtherCMS.purgeCache()\n\t  await PluginsDefaultOtherCMS.fetch()\n\t  PluginsDefaultOtherCMS.walk((node: PageContent) => filterContent(node.content))\n\t})\n\t// routes\n\t// walk is used by routes so this is tested here implicitly\n\tPluginsDefaultOther('routes', () => {\n\t  assert.equal(PluginsDefaultOtherCMS.routes.sort(), expectedRoutes.sort())\n\t})\n", "// tags\n\tPluginsDefaultOther('tags', () => {\n\t  assert.equal(PluginsDefaultOtherCMS.cms.tags.sort(), expectedTags.sort())\n\t})\n\t// Tree structures\n\tPluginsDefaultOther('siteData', () => {\n\t  assert.equal(PluginsDefaultOtherCMS.cms.siteData, expectedSiteData)\n\t})\n\texport const PluginsCustom = suite('PluginsCustom')\n\tPluginsCustom.before(async () => {\n", "  PluginsCustomCMS = new NotionCMS({\n\t    // Kitchen sink DB in community/tests\n\t    databaseId,\n\t    notionAPIKey,\n\t    // Should work with other plugin too\n\t    plugins: [() => ({\n\t      name: 'ncms-placeholder-plugin',\n\t      hook: 'post-parse',\n\t      exec: (block: Block) => block,\n\t    }),\n", "    // use custom renderer plugin behind the scenes\n\t    blocksRenderPlugin({\n\t      blockRenderers: {\n\t        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t        CalloutBlock: block => `<div ncms-test callout>${parseRichText(block.callout.rich_text as string)}</div ncms-test callout>\\n\\n`,\n\t        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t        QuoteBlock: block => `<div ncms-test quote>${parseRichText(block.quote.rich_text as string)}</div ncms-test quote>\\n\\n`,\n\t      },\n\t    })],\n\t  })\n", "  console.log('custom render test: purging cache')\n\t  PluginsCustomCMS.purgeCache()\n\t  await PluginsCustomCMS.fetch()\n\t  PluginsCustomCMS.walk((node: PageContent) => filterContent(node.content))\n\t})\n\tPluginsCustom('Custom render correctly alters blocks', () => {\n\t  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n\t    .content.html.match(/<div ncms-test callout>([.|\\s\\S]*)<\\/div ncms-test callout>/g))\n\t  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n\t    .content.html.match(/<div ncms-test quote>([.|\\s\\S]*)<\\/div ncms-test quote>/g))\n", "})\n\texport const PluginsCustomFallback = suite('PluginsCustomFallback')\n\tPluginsCustomFallback.before(async () => {\n\t  PluginsCustomFallbackCMS = new NotionCMS({\n\t    databaseId,\n\t    notionAPIKey,\n\t    draftMode: true,\n\t    // Should work with other plugin too\n\t    plugins: [\n\t      // use custom renderer plugin behind the scenes\n", "      blocksRenderPlugin({\n\t        blockRenderers: {\n\t          CalloutBlock: (block: Block) => null, // Nulls should invoke default renderer\n\t          QuoteBlock: (block: Block) => null, // Nulls should invoke default renderer\n\t        },\n\t      })],\n\t  })\n\t  console.log('custom render test: purging cache')\n\t  PluginsCustomFallbackCMS.purgeCache()\n\t  await PluginsCustomFallbackCMS.fetch()\n", "  PluginsCustomFallbackCMS.walk((node: PageContent) => filterContent(node.content))\n\t})\n\tPluginsCustomFallback('Custom render correctly uses fallback block renderer ', () => {\n\t  assert.equal((PluginsCustomFallbackCMS.cms.siteData['/kitchen-sink'] as PageContent)\n\t    .content.html, (expectedKitchenSinkSiteData['/kitchen-sink'] as PageContent).content.html)\n\t})\n"]}
{"filename": "src/tests/notion-cms.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-nocheck\n\timport { setTimeout } from 'node:timers/promises'\n\timport dotenv from 'dotenv'\n\timport { suite } from 'uvu'\n\timport * as assert from 'uvu/assert'\n\timport NotionCMS from '../index'\n\timport type { Content, PageContent } from '../types'\n\timport {\n\t  expectedRejectedPageData,\n", "  expectedRoutes,\n\t  expectedSiteData,\n\t  expectedTagGroups,\n\t  expectedTaggedCollection,\n\t  expectedTags,\n\t} from './notion-api-mock.spec'\n\tdotenv.config()\n\texport const TestNotionCMS = suite('TestNotionCMS')\n\tconst databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\tconst testCMS: NotionCMS = new NotionCMS({\n", "  databaseId,\n\t  notionAPIKey: process.env.NOTION,\n\t  draftMode: true,\n\t})\n\tawait testCMS.pull()\n\t// temporarily ignore md and plaintext versions of content\n\tfunction filterContent(content: Content) {\n\t  delete content.plaintext\n\t  delete content.markdown\n\t  return content\n", "}\n\ttestCMS.walk((node: PageContent) => filterContent(node.content))\n\t// routes\n\t// walk is used by routes so this is tested here implicitly\n\tTestNotionCMS('routes', () => {\n\t  assert.equal(testCMS.routes.sort(), expectedRoutes.sort())\n\t})\n\t// tags\n\tTestNotionCMS('tags', () => {\n\t  assert.equal(testCMS.cms.tags.sort(), expectedTags.sort())\n", "})\n\t// Tree structures\n\tTestNotionCMS('siteData', () => {\n\t  assert.equal(testCMS.cms.siteData, expectedSiteData)\n\t})\n\t// data getter\n\tTestNotionCMS('data (getter)', () => {\n\t  assert.equal(testCMS.cms.siteData, testCMS.data)\n\t})\n\t// taggedCollection\n", "TestNotionCMS('taggedCollection', () => {\n\t  const results = testCMS.getTaggedCollection(['notion', 'programming'])\n\t  assert.equal(results, expectedTaggedCollection)\n\t})\n\t// query by path\n\tTestNotionCMS('query by path', () => {\n\t  const productB: PageContent = testCMS.queryByPath('/products/category/product-b')\n\t  assert.equal(productB.name, 'Product B')\n\t  const category: PageContent = testCMS.queryByPath('/products/category')\n\t  assert.equal(category.name, 'Category')\n", "})\n\t// filter sub pages\n\tTestNotionCMS('filter sub pages', () => {\n\t  const category = testCMS.queryByPath('/products/category')\n\t  const productsInCategory = testCMS.filterSubPages(category)\n\t  const names = productsInCategory.map((product: PageContent) => product.name)\n\t  assert.equal(names, ['Product B', 'Product A'])\n\t  // Uncomment when fuzzy search is built\n\t  // const categoryB = testCMS.queryByPath('/category')\n\t  // const productsInCategoryB = testCMS.filterSubPages(categoryB)\n", "  // const namesB = productsInCategoryB.map(product => product.name)\n\t  // assert.equal(namesB, ['Product B', 'Product A'])\n\t})\n\t// reject sub pages\n\tTestNotionCMS('reject sub pages', () => {\n\t  const category = testCMS.queryByPath('/products/category')\n\t  const categoryProps = testCMS.rejectSubPages(category)\n\t  assert.equal(categoryProps, expectedRejectedPageData)\n\t  // Uncomment when fuzzy search is built\n\t  // const categoryB = testCMS.queryByPath('/category')\n", "  // const categoryPropsB = testCMS.rejectSubPages(categoryB)\n\t  // assert.equal(categoryPropsB, expectedRejectedPageData)\n\t})\n\tTestNotionCMS('walk from partial path', () => {\n\t  const test = []\n\t  testCMS.walk((node: PageContent) => test.push(node.name), '/products/category')\n\t  assert.equal(test, ['Product B', 'Product A'])\n\t})\n\tTestNotionCMS('async walk from partial path', async () => {\n\t  const test = []\n", "  await testCMS.asyncWalk(async (node: PageContent) => await setTimeout(test.push(node.name), 300), '/products/category')\n\t  assert.equal(test, ['Product B', 'Product A'])\n\t})\n\tTestNotionCMS('import', async () => {\n\t  assert.equal(\n\t    await testCMS.import(JSON.stringify({\n\t      metadata: {\n\t        databaseId,\n\t        rootUrl: '',\n\t      },\n", "      stages: [\n\t        'db',\n\t        'content',\n\t        'complete',\n\t      ],\n\t      routes: [],\n\t      tags: expectedTags,\n\t      tagGroups: expectedTagGroups,\n\t      siteData: expectedSiteData,\n\t    })),\n", "    testCMS.cms,\n\t  )\n\t})\n\tTestNotionCMS('import fails', async () => {\n\t  try {\n\t    await testCMS.import()\n\t    assert.unreachable('should have thrown')\n\t  }\n\t  catch (err) {\n\t    assert.instance(err, Error)\n", "  }\n\t})\n\tTestNotionCMS('Options have changed', () => {\n\t  const options = {\n\t    databaseId,\n\t    notionAPIKey: process.env.NOTION,\n\t    draftMode: true,\n\t    plugins: [() => 'test plugin'],\n\t  }\n\t  const otherOptions = {\n", "    databaseId,\n\t    notionAPIKey: process.env.NOTION,\n\t    draftMode: true,\n\t    plugins: [() => 'test plugin'],\n\t  }\n\t  const newOptions = {\n\t    databaseId,\n\t    notionAPIKey: process.env.NOTION,\n\t    draftMode: false,\n\t  }\n", "  const testOptionsCMS: NotionCMS = new NotionCMS(options)\n\t  assert.ok(\n\t    testOptionsCMS._documentOptions(options) === testOptionsCMS._documentOptions(otherOptions))\n\t  assert.not(\n\t    testOptionsCMS._documentOptions(options) === testOptionsCMS._documentOptions(newOptions))\n\t})\n\tTestNotionCMS('Human readable refresh timeout', () => {\n\t  const testOptionsCMS: NotionCMS = new NotionCMS({\n\t    databaseId,\n\t    notionAPIKey: process.env.NOTION,\n", "    draftMode: true,\n\t    refreshTimeout: 'one hour',\n\t  })\n\t  assert.ok(\n\t    testOptionsCMS.refreshTimeout === 3_600_000)\n\t})\n"]}
{"filename": "src/tests/notion-cms-caching.spec.ts", "chunked_list": ["import dotenv from 'dotenv'\n\timport { suite } from 'uvu'\n\timport * as assert from 'uvu/assert'\n\timport nock from 'nock'\n\timport NotionCMS from '../index'\n\timport type { CMS, PluginPassthrough } from '../types'\n\tdotenv.config()\n\texport const TestNotionCMSCache = suite('TestNotionCMSCache')\n\tconst cachingDatabaseId = '1234' // this does not exist in notion\n\tconst baseUrl = 'https://api.notion.com/v1'\n", "const cachingTestCMS: NotionCMS = new NotionCMS({\n\t  databaseId: cachingDatabaseId,\n\t  notionAPIKey: process.env.NOTION as string,\n\t  draftMode: true,\n\t})\n\tcachingTestCMS.purgeCache()\n\tconst topLevelPageId = '456'\n\tconst topLevelPageId2 = '789'\n\tTestNotionCMSCache('Unchanged since last edit time uses cache', async () => {\n\t  nock(baseUrl)\n", "    .post(`/databases/${cachingDatabaseId}/query`)\n\t    .query(true)\n\t    .reply(200, {\n\t      object: 'list',\n\t      results: [\n\t        {\n\t          object: 'page',\n\t          id: topLevelPageId,\n\t          created_time: '2023-04-09T06:03:00.000Z',\n\t          last_edited_time: '2023-04-09T06:03:00.000Z',\n", "          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          properties: {\n\t            name: {\n", "              id: 'title',\n\t              type: 'title',\n\t              title: [\n\t                {\n\t                  type: 'text',\n\t                  text: {\n\t                    content: 'Page 1',\n\t                    link: null,\n\t                  },\n\t                  annotations: {},\n", "                  plain_text: 'Page 1',\n\t                  href: null,\n\t                },\n\t              ],\n\t            },\n\t            Author: {\n\t              id: 'SQeZ',\n\t              type: 'people',\n\t              people: [\n\t                {\n", "                  object: 'user',\n\t                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                  name: 'Jacob',\n\t                  avatar_url: null,\n\t                  type: 'person',\n\t                  person: {\n\t                    email: 'jacob@agencykit.so',\n\t                  },\n\t                },\n\t              ],\n", "            },\n\t            Tags: {\n\t              id: 'NNmP',\n\t              type: 'multi_select',\n\t              multi_select: [\n\t                {\n\t                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n\t                  name: 'programming',\n\t                  color: 'default',\n\t                },\n", "              ],\n\t            },\n\t          },\n\t          cover: null,\n\t          icon: null,\n\t          archived: false,\n\t          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n\t        },\n\t        {\n\t          object: 'page',\n", "          id: topLevelPageId2,\n\t          created_time: '2023-04-09T06:03:00.000Z',\n\t          last_edited_time: '2023-04-09T06:03:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "          },\n\t          properties: {\n\t            name: {\n\t              id: 'title',\n\t              type: 'title',\n\t              title: [\n\t                {\n\t                  type: 'text',\n\t                  text: {\n\t                    content: 'Page 2',\n", "                    link: null,\n\t                  },\n\t                  annotations: {},\n\t                  plain_text: 'Page 2',\n\t                  href: null,\n\t                },\n\t              ],\n\t            },\n\t            Author: {\n\t              id: 'SQeZ',\n", "              type: 'people',\n\t              people: [\n\t                {\n\t                  object: 'user',\n\t                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                  name: 'Jacob',\n\t                  avatar_url: null,\n\t                  type: 'person',\n\t                  person: {\n\t                    email: 'jacob@agencykit.so',\n", "                  },\n\t                },\n\t              ],\n\t            },\n\t            Tags: {\n\t              id: 'NNmP',\n\t              type: 'multi_select',\n\t              multi_select: [\n\t                {\n\t                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n", "                  name: 'programming',\n\t                  color: 'default',\n\t                },\n\t              ],\n\t            },\n\t          },\n\t          cover: null,\n\t          icon: null,\n\t          archived: false,\n\t          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n", "        },\n\t      ],\n\t      next_cursor: null,\n\t      has_more: false,\n\t      type: 'page',\n\t      page: {},\n\t    })\n\t  nock(baseUrl)\n\t    .get(`/blocks/${topLevelPageId}/children`)\n\t    .query(true)\n", "    .reply(200, {\n\t      object: 'list',\n\t      results: [\n\t        {\n\t          object: 'block',\n\t          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n\t          parent: {\n\t            type: 'page_id',\n\t            page_id: topLevelPageId,\n\t          },\n", "          created_time: '2023-04-22T04:34:00.000Z',\n\t          last_edited_time: '2023-04-22T04:34:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n", "          has_children: false,\n\t          archived: false,\n\t          type: 'heading_1',\n\t          heading_1: {\n\t            rich_text: [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Block 1: Has not changed.',\n\t                  link: null,\n", "                },\n\t                annotations: {},\n\t                plain_text: 'Block 1: Has not changed.',\n\t                href: null,\n\t              },\n\t            ],\n\t            is_toggleable: false,\n\t            color: 'default',\n\t          },\n\t        },\n", "      ],\n\t    })\n\t  nock(baseUrl)\n\t    .get(`/blocks/${topLevelPageId2}/children`)\n\t    .query(true)\n\t    .reply(200, {\n\t      object: 'list',\n\t      results: [\n\t        {\n\t          object: 'block',\n", "          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n\t          parent: {\n\t            type: 'page_id',\n\t            page_id: topLevelPageId2,\n\t          },\n\t          created_time: '2023-04-22T04:34:00.000Z',\n\t          last_edited_time: '2023-04-22T04:34:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "          },\n\t          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          has_children: false,\n\t          archived: false,\n\t          type: 'heading_1',\n\t          heading_1: {\n\t            rich_text: [\n", "              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Block 2: Has not changed.',\n\t                  link: null,\n\t                },\n\t                annotations: {},\n\t                plain_text: 'Block 2: Has not changed.',\n\t                href: null,\n\t              },\n", "            ],\n\t            is_toggleable: false,\n\t            color: 'default',\n\t          },\n\t        },\n\t      ],\n\t    })\n\t  // Build the cache\n\t  const cms: CMS = await cachingTestCMS.pull()\n\t  assert.ok(cms.siteData['/page-1'].content?.plaintext === 'Block 1: Has not changed.')\n", "  assert.ok(cms.siteData['/page-2'].content?.plaintext === 'Block 2: Has not changed.')\n\t  // Change some data in only page 2\n\t  nock(baseUrl)\n\t    .post(`/databases/${cachingDatabaseId}/query`)\n\t    .query(true)\n\t    .reply(200, {\n\t      object: 'list',\n\t      results: [\n\t        {\n\t          object: 'page',\n", "          id: topLevelPageId,\n\t          created_time: '2023-04-09T06:03:00.000Z',\n\t          last_edited_time: '2023-04-09T06:03:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "          },\n\t          properties: {\n\t            name: {\n\t              id: 'title',\n\t              type: 'title',\n\t              title: [\n\t                {\n\t                  type: 'text',\n\t                  text: {\n\t                    content: 'Page 1',\n", "                    link: null,\n\t                  },\n\t                  annotations: {},\n\t                  plain_text: 'Page 1',\n\t                  href: null,\n\t                },\n\t              ],\n\t            },\n\t            Author: {\n\t              id: 'SQeZ',\n", "              type: 'people',\n\t              people: [\n\t                {\n\t                  object: 'user',\n\t                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                  name: 'Jacob',\n\t                  avatar_url: null,\n\t                  type: 'person',\n\t                  person: {\n\t                    email: 'jacob@agencykit.so',\n", "                  },\n\t                },\n\t              ],\n\t            },\n\t            Tags: {\n\t              id: 'NNmP',\n\t              type: 'multi_select',\n\t              multi_select: [\n\t                {\n\t                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n", "                  name: 'programming',\n\t                  color: 'default',\n\t                },\n\t              ],\n\t            },\n\t          },\n\t          cover: null,\n\t          icon: null,\n\t          archived: false,\n\t          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n", "        },\n\t        {\n\t          object: 'page',\n\t          id: topLevelPageId2,\n\t          created_time: '2023-04-09T06:03:00.000Z',\n\t          last_edited_time: '2023-04-09T06:16:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n", "          last_edited_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          properties: {\n\t            name: {\n\t              id: 'title',\n\t              type: 'title',\n\t              title: [\n\t                {\n", "                  type: 'text',\n\t                  text: {\n\t                    content: 'Page 2',\n\t                    link: null,\n\t                  },\n\t                  annotations: {},\n\t                  plain_text: 'Page 2',\n\t                  href: null,\n\t                },\n\t              ],\n", "            },\n\t            Author: {\n\t              id: 'SQeZ',\n\t              type: 'people',\n\t              people: [\n\t                {\n\t                  object: 'user',\n\t                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                  name: 'Jacob',\n\t                  avatar_url: null,\n", "                  type: 'person',\n\t                  person: {\n\t                    email: 'jacob@agencykit.so',\n\t                  },\n\t                },\n\t              ],\n\t            },\n\t            Tags: {\n\t              id: 'NNmP',\n\t              type: 'multi_select',\n", "              multi_select: [\n\t                {\n\t                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n\t                  name: 'programming',\n\t                  color: 'default',\n\t                },\n\t              ],\n\t            },\n\t          },\n\t          cover: null,\n", "          icon: null,\n\t          archived: false,\n\t          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n\t        },\n\t      ],\n\t      next_cursor: null,\n\t      has_more: false,\n\t      type: 'page',\n\t      page: {},\n\t    })\n", "  nock(baseUrl)\n\t    .get(`/blocks/${topLevelPageId2}/children`)\n\t    .query(true)\n\t    .reply(200, {\n\t      object: 'list',\n\t      results: [\n\t        {\n\t          object: 'block',\n\t          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n\t          parent: {\n", "            type: 'page_id',\n\t            page_id: topLevelPageId2,\n\t          },\n\t          created_time: '2023-04-22T04:34:00.000Z',\n\t          last_edited_time: '2023-04-22T04:34:00.000Z',\n\t          created_by: {\n\t            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          last_edited_by: {\n", "            object: 'user',\n\t            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t          },\n\t          has_children: false,\n\t          archived: false,\n\t          type: 'heading_1',\n\t          heading_1: {\n\t            rich_text: [\n\t              {\n\t                type: 'text',\n", "                text: {\n\t                  content: 'Block 2: Has changed.',\n\t                  link: null,\n\t                },\n\t                annotations: {},\n\t                plain_text: 'Block 2: Has changed.',\n\t                href: null,\n\t              },\n\t            ],\n\t            is_toggleable: false,\n", "            color: 'default',\n\t          },\n\t        },\n\t      ],\n\t    })\n\t  const cms2: CMS = await cachingTestCMS.pull()\n\t  assert.ok(cms2.siteData['/page-1'].content?.plaintext === 'Block 1: Has not changed.')\n\t  assert.ok(cms2.siteData['/page-2'].content?.plaintext === 'Block 2: Has changed.')\n\t})\n\tTestNotionCMSCache('Plugins run even when using cached state.', async () => {\n", "  const databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\t  let counter = 0\n\t  const testCMS: NotionCMS = new NotionCMS({\n\t    databaseId,\n\t    notionAPIKey: process.env.NOTION as string,\n\t    draftMode: true,\n\t    refreshTimeout: '1 minute',\n\t    plugins: [\n\t      {\n\t        name: 'counter-plugin',\n", "        hook: '*', // this will run every hook\n\t        exec: (ctx: PluginPassthrough) => {\n\t          counter++\n\t          return ctx\n\t        },\n\t      },\n\t    ],\n\t  })\n\t  console.log('caching test: purging cache')\n\t  testCMS.purgeCache()\n", "  await testCMS.pull()\n\t  assert.equal(counter, 22)\n\t})\n"]}
{"filename": "src/tests/notion-api-mock.spec.ts", "chunked_list": ["import nock from 'nock'\n\tconst notionDatabaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\tconst notionKitchenSinkDatabaseId = '21608fc7-c1c5-40a1-908f-9ade89585111'\n\tconst baseUrl = 'https://api.notion.com/v1'\n\tconst pageIds = [\n\t  '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t  '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t  'b194a437-262e-482c-92b2-c5581eb5b477',\n\t  '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t  'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n", "]\n\tconst kitchenSinkPageId = '35a20998-a733-4ba0-b02e-0d629ded73f1'\n\texport const expectedRoutes = [\n\t  '/team',\n\t  '/products',\n\t  '/products/category',\n\t  '/products/category/product-a',\n\t  '/products/category/product-b',\n\t]\n\texport const expectedSiteData = {\n", "  '/team': {\n\t    name: 'Team',\n\t    _key: '/team',\n\t    id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t    pid: undefined,\n\t    authors: ['Jacob Milhorn'],\n\t    tags: [],\n\t    _notion: {\n\t      id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t      last_edited_time: '2023-04-09T06:07:00.000Z',\n", "    },\n\t    content: { html: '<h1 id=\\\"team\\\">Team</h1>\\n<p>about the team</p>\\n' },\n\t    coverImage: undefined,\n\t    slug: 'team',\n\t    path: '/team',\n\t    url: '',\n\t  },\n\t  '/products': {\n\t    'name': 'Products',\n\t    '_key': '/products',\n", "    'id': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t    'pid': undefined,\n\t    'authors': [],\n\t    'tags': [],\n\t    '_notion': {\n\t      id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t      last_edited_time: '2023-04-09T05:56:00.000Z',\n\t    },\n\t    'content': { html: '<h1 id=\\\"products\\\">Products</h1>\\n<p>about products</p>\\n' },\n\t    'coverImage': undefined,\n", "    'slug': 'products',\n\t    'path': '/products',\n\t    'url': '',\n\t    '/category': {\n\t      'name': 'Category',\n\t      '_key': '/category',\n\t      'id': 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t      'pid': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t      'authors': [],\n\t      'tags': [\n", "        'blog',\n\t        'notion',\n\t        'apis',\n\t      ],\n\t      '_notion': {\n\t        id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t      },\n\t      'content': { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n\t      'coverImage': undefined,\n", "      'slug': 'category',\n\t      'path': '/products/category',\n\t      'url': '',\n\t      '/product-a': {\n\t        name: 'Product A',\n\t        _key: '/product-a',\n\t        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t        pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        authors: ['Jacob Milhorn'],\n\t        tags: ['programming'],\n", "        content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n\t        _notion: {\n\t          id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t          last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        },\n\t        coverImage: undefined,\n\t        slug: 'product-a',\n\t        path: '/products/category/product-a',\n\t        url: '',\n\t      },\n", "      '/product-b': {\n\t        name: 'Product B',\n\t        _key: '/product-b',\n\t        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t        pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        authors: [],\n\t        tags: [\n\t          'blog',\n\t          'notion',\n\t          'apis',\n", "          'programming',\n\t          'javascript',\n\t        ],\n\t        content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n\t        _notion: {\n\t          id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t          last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        },\n\t        coverImage: undefined,\n\t        slug: 'product-b',\n", "        path: '/products/category/product-b',\n\t        url: '',\n\t      },\n\t    },\n\t  },\n\t}\n\texport const expectedTags = [\n\t  'blog',\n\t  'notion',\n\t  'apis',\n", "  'javascript',\n\t  'programming',\n\t]\n\texport const expectedTagGroups = {\n\t  blog: [\n\t    '/products/category',\n\t    '/products/category/product-b',\n\t  ],\n\t  notion: [\n\t    '/products/category',\n", "    '/products/category/product-b',\n\t  ],\n\t  apis: [\n\t    '/products/category',\n\t    '/products/category/product-b',\n\t  ],\n\t  programming: [\n\t    '/products/category/product-b',\n\t    '/products/category/product-a',\n\t  ],\n", "  javascript: [\n\t    '/products/category/product-b',\n\t  ],\n\t}\n\texport const expectedTaggedCollection = [\n\t  {\n\t    'name': 'Category',\n\t    '_key': '/category',\n\t    'id': 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t    'pid': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n", "    'authors': [],\n\t    'tags': [\n\t      'blog',\n\t      'notion',\n\t      'apis',\n\t    ],\n\t    '_notion': {\n\t      id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t      last_edited_time: '2023-04-09T06:03:00.000Z',\n\t    },\n", "    'content': { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n\t    'coverImage': undefined,\n\t    'slug': 'category',\n\t    'path': '/products/category',\n\t    'url': '',\n\t    '/product-a': {\n\t      name: 'Product A',\n\t      _key: '/product-a',\n\t      id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t      pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n", "      authors: ['Jacob Milhorn'],\n\t      tags: ['programming'],\n\t      content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n\t      _notion: {\n\t        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t      },\n\t      coverImage: undefined,\n\t      slug: 'product-a',\n\t      path: '/products/category/product-a',\n", "      url: '',\n\t    },\n\t    '/product-b': {\n\t      name: 'Product B',\n\t      _key: '/product-b',\n\t      id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t      pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t      authors: [],\n\t      tags: [\n\t        'blog',\n", "        'notion',\n\t        'apis',\n\t        'programming',\n\t        'javascript',\n\t      ],\n\t      content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n\t      _notion: {\n\t        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t      },\n", "      coverImage: undefined,\n\t      slug: 'product-b',\n\t      path: '/products/category/product-b',\n\t      url: '',\n\t    },\n\t  },\n\t  {\n\t    name: 'Product B',\n\t    _key: '/product-b',\n\t    id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n", "    pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t    authors: [],\n\t    tags: [\n\t      'blog',\n\t      'notion',\n\t      'apis',\n\t      'programming',\n\t      'javascript',\n\t    ],\n\t    content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n", "    _notion: {\n\t      id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t      last_edited_time: '2023-04-09T06:03:00.000Z',\n\t    },\n\t    coverImage: undefined,\n\t    slug: 'product-b',\n\t    path: '/products/category/product-b',\n\t    url: '',\n\t  },\n\t  {\n", "    name: 'Product A',\n\t    _key: '/product-a',\n\t    id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t    pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t    authors: ['Jacob Milhorn'],\n\t    tags: ['programming'],\n\t    content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n\t    _notion: {\n\t      id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t      last_edited_time: '2023-04-09T06:03:00.000Z',\n", "    },\n\t    coverImage: undefined,\n\t    slug: 'product-a',\n\t    path: '/products/category/product-a',\n\t    url: '',\n\t  },\n\t]\n\texport const expectedRejectedPageData = {\n\t  name: 'Category',\n\t  _key: '/category',\n", "  id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t  pid: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t  authors: [],\n\t  tags: [\n\t    'blog',\n\t    'notion',\n\t    'apis',\n\t  ],\n\t  _notion: {\n\t    id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n", "    last_edited_time: '2023-04-09T06:03:00.000Z',\n\t  },\n\t  content: { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n\t  coverImage: undefined,\n\t  slug: 'category',\n\t  path: '/products/category',\n\t  url: '',\n\t}\n\texport const expectedKitchenSinkSiteData = {\n\t  '/kitchen-sink': {\n", "    _key: '/kitchen-sink',\n\t    id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t    pid: undefined,\n\t    _notion: {\n\t      id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t      last_edited_time: '2023-04-22T05:04:00.000Z',\n\t    },\n\t    name: 'Kitchen Sink',\n\t    slug: 'kitchen-sink',\n\t    authors: [\n", "      'Jacob Milhorn',\n\t    ],\n\t    tags: [],\n\t    coverImage: 'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb',\n\t    path: '/kitchen-sink',\n\t    url: '',\n\t    content: {\n\t      html: '<h1 id=\"kitchen-sink\">Kitchen Sink</h1>\\n<h2 id=\"introduction\">Introduction</h2>\\n<p>Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.</p>\\n<h2 id=\"audio-block\">Audio Block</h2>\\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2372979e-60dc-40f0-b9ce-978d9c7c3707/barradeen-bedtime-after-a-coffee.mp3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=714a8f2a8463f9f36d217825797dc2b8580a278ff991ac3135ec1dcceee62e92&X-Amz-SignedHeaders=host&x-id=GetObject\" alt=\"\"></p>\\n<h3 id=\"bulleted-list\">Bulleted List</h3>\\n<ul>\\n<li>Item 1</li>\\n<li>Item 2</li>\\n<li>Item 3</li>\\n</ul>\\n<h2 id=\"callout\">Callout</h2>\\n<div notion-callout>\\n  <span notion-callout-emoji><p>🧑🏾‍🚀</p>\\n</span>\\n  <span notion-callout-text><p>Callout here</p>\\n</span></div>\\n\\n<h2 id=\"embeds\">Embeds</h2>\\n<h2 id=\"file\">File</h2>\\n<p>To be supported: <a href=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&X-Amz-SignedHeaders=host&x-id=GetObject\">https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20230422T050834Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject</a> with </p>\\n<h1 id=\"heading-1\">Heading 1</h1>\\n<p>This is a main heading.</p>\\n<h2 id=\"heading-2\">Heading 2</h2>\\n<p>This is a subheading.</p>\\n<h3 id=\"heading-3\">Heading 3</h3>\\n<p>This is a smaller subheading.</p>\\n<h2 id=\"images\">Images</h2>\\n<figure notion-figure>\\n  <img src=\\'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb\\' alt=\\'\\'>\\n  <figcaption notion-figcaption></figcaption></figure>\\n\\n\\n<h3 id=\"numbered-list\">Numbered List</h3>\\n<ol>\\n<li>First item</li>\\n<li>Second item</li>\\n<li>Third item</li>\\n</ol>\\n<h2 id=\"paragraph\">Paragraph</h2>\\n<p>This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.</p>\\n<h2 id=\"pdf\">Pdf</h2>\\n<figure>\\n  <object data=\\'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4abc717f-3f8a-4bdf-b482-090ca8371eab/Deep_Work.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=7d5012d5fe544ffea48bbbeecb56d768f949dee7138a4c9f8a63850b42ea2e86&X-Amz-SignedHeaders=host&x-id=GetObject\\' type=\\'application/pdf\\'></object>\\n  <figcaption></figcaption></figure>\\n\\n\\n<h2 id=\"quotes\">Quotes</h2>\\n<blockquote>\\n<p>This is a block quote.</p>\\n</blockquote>\\n<h2 id=\"to-do-list\">To-do list</h2>\\n<ul>\\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Completed task</li>\\n<li><input disabled=\"\" type=\"checkbox\"> Incomplete task</li>\\n</ul>\\n<h2 id=\"toggle\">Toggle</h2>\\n<details><summary><p>Toggle heading</p>\\n</summary><p>Toggle content</p>\\n</details>\\n## Video\\n\\n<iframe width=\\'560\\' height=\\'315\\' src=\\'https://www.youtube-nocookie.com/embed/-XmImaT5TxM\\' title=\\'YouTube video player\\' frameborder=\\'0\\' allow=\\'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\' allowfullscreen></iframe>\\n\\n<h1 id=\"extras\">Extras</h1>\\n<h2 id=\"tables\">Tables</h2>\\n<h2 id=\"code\">Code</h2>\\n<pre><code class=\\'hljs language-none\\'>This is a code block.\\n</code></pre><h2 id=\"divider\">Divider</h2>\\n<hr>\\n<h2 id=\"links\">Links</h2>\\n<p><a href=\"https://www.notion.so/\">This is a link to Notion&#39;s website.</a></p>\\n<h2 id=\"equation\">Equation</h2>\\n',\n\t    },\n\t  },\n", "}\n\tnock(baseUrl)\n\t  .persist()\n\t  .post(`/databases/${notionDatabaseId}/query`)\n\t  .query(true)\n\t  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'page',\n", "        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t        created_time: '2023-04-09T06:03:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        cover: null,\n\t        icon: null,\n\t        parent: {\n\t          type: 'database_id',\n\t          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n\t        },\n\t        archived: false,\n\t        properties: {\n\t          'parent-page': {\n", "            id: '%3FuXy',\n\t            type: 'relation',\n\t            relation: [\n\t              {\n\t                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t              },\n\t            ],\n\t            has_more: false,\n\t          },\n\t          'sub-page': {\n", "            id: '%40KPB',\n\t            type: 'relation',\n\t            relation: [],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n\t            id: 'NNmP',\n\t            type: 'multi_select',\n\t            multi_select: [\n\t              {\n", "                id: '39c42409-611d-45d5-accb-3b1d05917b3a',\n\t                name: 'blog',\n\t                color: 'gray',\n\t              },\n\t              {\n\t                id: '9d1eaabc-234f-4e1a-8812-06c286f863cd',\n\t                name: 'notion',\n\t                color: 'red',\n\t              },\n\t              {\n", "                id: 'a37db9a6-cb20-4914-86ec-e5d0beac072d',\n\t                name: 'apis',\n\t                color: 'orange',\n\t              },\n\t              {\n\t                id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n\t                name: 'programming',\n\t                color: 'default',\n\t              },\n\t              {\n", "                id: '165eef40-7a03-468a-882e-5516b4f63af8',\n\t                name: 'javascript',\n\t                color: 'green',\n\t              },\n\t            ],\n\t          },\n\t          'Author': {\n\t            id: 'SQeZ',\n\t            type: 'people',\n\t            people: [],\n", "          },\n\t          'Published': {\n\t            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n\t              id: 'dFFu',\n\t              name: 'Draft',\n\t              color: 'green',\n\t            },\n\t          },\n", "          'name': {\n\t            id: 'title',\n\t            type: 'title',\n\t            title: [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Product B',\n\t                  link: null,\n\t                },\n", "                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Product B',\n\t                href: null,\n", "              },\n\t            ],\n\t          },\n\t        },\n\t        url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n\t      },\n\t      {\n\t        object: 'page',\n\t        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t        created_time: '2023-04-09T05:50:00.000Z',\n", "        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        cover: null,\n", "        icon: null,\n\t        parent: {\n\t          type: 'database_id',\n\t          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n\t        },\n\t        archived: false,\n\t        properties: {\n\t          'parent-page': {\n\t            id: '%3FuXy',\n\t            type: 'relation',\n", "            relation: [\n\t              {\n\t                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t              },\n\t            ],\n\t            has_more: false,\n\t          },\n\t          'sub-page': {\n\t            id: '%40KPB',\n\t            type: 'relation',\n", "            relation: [],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n\t            id: 'NNmP',\n\t            type: 'multi_select',\n\t            multi_select: [\n\t              {\n\t                id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n\t                name: 'programming',\n", "                color: 'default',\n\t              },\n\t            ],\n\t          },\n\t          'Author': {\n\t            id: 'SQeZ',\n\t            type: 'people',\n\t            people: [\n\t              {\n\t                object: 'user',\n", "                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                name: 'Jacob Milhorn',\n\t                avatar_url: null,\n\t                type: 'person',\n\t                person: {\n\t                  email: 'jacob.milhorn@gmail.com',\n\t                },\n\t              },\n\t            ],\n\t          },\n", "          'Published': {\n\t            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n\t              id: 'dFFu',\n\t              name: 'Draft',\n\t              color: 'green',\n\t            },\n\t          },\n\t          'name': {\n", "            id: 'title',\n\t            type: 'title',\n\t            title: [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Product A',\n\t                  link: null,\n\t                },\n\t                annotations: {\n", "                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Product A',\n\t                href: null,\n\t              },\n", "            ],\n\t          },\n\t        },\n\t        url: 'https://www.notion.so/Product-A-1cec47af3e5f4382bbfdcd5f98effa30',\n\t      },\n\t      {\n\t        object: 'page',\n\t        id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        created_time: '2023-04-09T05:50:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        cover: null,\n\t        icon: null,\n", "        parent: {\n\t          type: 'database_id',\n\t          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n\t        },\n\t        archived: false,\n\t        properties: {\n\t          'parent-page': {\n\t            id: '%3FuXy',\n\t            type: 'relation',\n\t            relation: [\n", "              {\n\t                id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t              },\n\t            ],\n\t            has_more: false,\n\t          },\n\t          'sub-page': {\n\t            id: '%40KPB',\n\t            type: 'relation',\n\t            relation: [\n", "              {\n\t                id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t              },\n\t              {\n\t                id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t              },\n\t            ],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n", "            id: 'NNmP',\n\t            type: 'multi_select',\n\t            multi_select: [\n\t              {\n\t                id: '39c42409-611d-45d5-accb-3b1d05917b3a',\n\t                name: 'blog',\n\t                color: 'gray',\n\t              },\n\t              {\n\t                id: '9d1eaabc-234f-4e1a-8812-06c286f863cd',\n", "                name: 'notion',\n\t                color: 'red',\n\t              },\n\t              {\n\t                id: 'a37db9a6-cb20-4914-86ec-e5d0beac072d',\n\t                name: 'apis',\n\t                color: 'orange',\n\t              },\n\t            ],\n\t          },\n", "          'Author': {\n\t            id: 'SQeZ',\n\t            type: 'people',\n\t            people: [],\n\t          },\n\t          'Published': {\n\t            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n\t              id: 'dFFu',\n", "              name: 'Draft',\n\t              color: 'green',\n\t            },\n\t          },\n\t          'name': {\n\t            id: 'title',\n\t            type: 'title',\n\t            title: [\n\t              {\n\t                type: 'text',\n", "                text: {\n\t                  content: 'Category',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n", "                  color: 'default',\n\t                },\n\t                plain_text: 'Category',\n\t                href: null,\n\t              },\n\t            ],\n\t          },\n\t        },\n\t        url: 'https://www.notion.so/Category-b194a437262e482c92b2c5581eb5b477',\n\t      },\n", "      {\n\t        object: 'page',\n\t        id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t        created_time: '2023-04-09T05:45:00.000Z',\n\t        last_edited_time: '2023-04-09T06:07:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        cover: null,\n\t        icon: null,\n\t        parent: {\n\t          type: 'database_id',\n\t          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n\t        },\n\t        archived: false,\n", "        properties: {\n\t          'parent-page': {\n\t            id: '%3FuXy',\n\t            type: 'relation',\n\t            relation: [],\n\t            has_more: false,\n\t          },\n\t          'sub-page': {\n\t            id: '%40KPB',\n\t            type: 'relation',\n", "            relation: [],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n\t            id: 'NNmP',\n\t            type: 'multi_select',\n\t            multi_select: [],\n\t          },\n\t          'Author': {\n\t            id: 'SQeZ',\n", "            type: 'people',\n\t            people: [\n\t              {\n\t                object: 'user',\n\t                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t                name: 'Jacob Milhorn',\n\t                avatar_url: null,\n\t                type: 'person',\n\t                person: {\n\t                  email: 'jacob.milhorn@gmail.com',\n", "                },\n\t              },\n\t            ],\n\t          },\n\t          'Published': {\n\t            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n\t              id: 'dFFu',\n\t              name: 'Draft',\n", "              color: 'green',\n\t            },\n\t          },\n\t          'name': {\n\t            id: 'title',\n\t            type: 'title',\n\t            title: [\n\t              {\n\t                type: 'text',\n\t                text: {\n", "                  content: 'Team',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n", "                },\n\t                plain_text: 'Team',\n\t                href: null,\n\t              },\n\t            ],\n\t          },\n\t        },\n\t        url: 'https://www.notion.so/Team-163bc39bffa64d8884f5cb73fa4a705a',\n\t      },\n\t      {\n", "        object: 'page',\n\t        id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t        created_time: '2023-04-09T05:45:00.000Z',\n\t        last_edited_time: '2023-04-09T05:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        cover: null,\n\t        icon: null,\n\t        parent: {\n\t          type: 'database_id',\n\t          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n\t        },\n\t        archived: false,\n\t        properties: {\n", "          'parent-page': {\n\t            id: '%3FuXy',\n\t            type: 'relation',\n\t            relation: [],\n\t            has_more: false,\n\t          },\n\t          'sub-page': {\n\t            id: '%40KPB',\n\t            type: 'relation',\n\t            relation: [\n", "              {\n\t                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t              },\n\t            ],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n\t            id: 'NNmP',\n\t            type: 'multi_select',\n\t            multi_select: [],\n", "          },\n\t          'Author': {\n\t            id: 'SQeZ',\n\t            type: 'people',\n\t            people: [],\n\t          },\n\t          'Published': {\n\t            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n", "              id: 'dFFu',\n\t              name: 'Draft',\n\t              color: 'green',\n\t            },\n\t          },\n\t          'name': {\n\t            id: 'title',\n\t            type: 'title',\n\t            title: [\n\t              {\n", "                type: 'text',\n\t                text: {\n\t                  content: 'Products',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n", "                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Products',\n\t                href: null,\n\t              },\n\t            ],\n\t          },\n\t        },\n\t        url: 'https://www.notion.so/Products-dd5157a6cf4c4a518da50da83ef641ae',\n", "      },\n\t    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'page',\n\t    page: {},\n\t  })\n\t// Kitchen Sink Response\n\tnock(baseUrl)\n\t  .persist()\n", "  .post(`/databases/${notionKitchenSinkDatabaseId}/query`)\n\t  .query(true)\n\t  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'page',\n\t        id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        created_time: '2023-04-22T04:33:00.000Z',\n\t        last_edited_time: '2023-04-22T05:04:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        cover: null,\n\t        icon: null,\n", "        parent: {\n\t          type: 'database_id',\n\t          database_id: '21608fc7-c1c5-40a1-908f-9ade89585111',\n\t        },\n\t        archived: false,\n\t        properties: {\n\t          'parent-page': {\n\t            id: '%3FuXy',\n\t            type: 'relation',\n\t            relation: [],\n", "            has_more: false,\n\t          },\n\t          'sub-page': {\n\t            id: '%40KPB',\n\t            type: 'relation',\n\t            relation: [],\n\t            has_more: false,\n\t          },\n\t          'Tags': {\n\t            id: 'NNmP',\n", "            type: 'multi_select',\n\t            multi_select: [],\n\t          },\n\t          'Author': {\n\t            id: 'SQeZ',\n\t            type: 'people',\n\t            people: [\n\t              {\n\t                object: 'user',\n\t                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "                name: 'Jacob Milhorn',\n\t                avatar_url: null,\n\t                type: 'person',\n\t                person: {\n\t                  email: 'jacob.milhorn@gmail.com',\n\t                },\n\t              },\n\t            ],\n\t          },\n\t          'Published': {\n", "            id: 'frgL',\n\t            type: 'select',\n\t            select: {\n\t              id: '|]Pp',\n\t              name: 'Published',\n\t              color: 'default',\n\t            },\n\t          },\n\t          'name': {\n\t            id: 'title',\n", "            type: 'title',\n\t            title: [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Kitchen Sink',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n", "                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Kitchen Sink',\n\t                href: null,\n\t              },\n\t            ],\n", "          },\n\t        },\n\t        url: 'https://www.notion.so/Kitchen-Sink-35a20998a7334ba0b02e0d629ded73f1',\n\t      },\n\t    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'page',\n\t    page: {},\n\t    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n", "  })\n\t// Block Children Queries\n\t// Kitchen Sink Blocks\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${kitchenSinkPageId}/children`)\n\t  .query(true)\n\t  .reply(200, {\n\t    object: 'list',\n\t    results: [\n", "      {\n\t        object: 'block',\n\t        id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_1',\n", "        heading_1: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Kitchen Sink',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n", "                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Kitchen Sink',\n\t              href: null,\n\t            },\n\t          ],\n", "          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '644a181a-ec65-4f4b-954b-9196e5f0ca93',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Introduction',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Introduction',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: '1173cbc2-a28a-40e2-8409-4a778f77cf91',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '203dc733-0a55-4b32-9541-95330a2959a5',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:53:00.000Z',\n\t        last_edited_time: '2023-04-22T04:53:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Audio Block',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Audio Block',\n\t              href: null,\n\t            },\n", "          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'e5bffb21-be1b-4e92-b1c8-a16520e08747',\n\t        parent: {\n\t          type: 'page_id',\n", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:51:00.000Z',\n\t        last_edited_time: '2023-04-22T04:52:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'audio',\n\t        audio: {\n\t          caption: [],\n\t          type: 'file',\n\t          file: {\n\t            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2372979e-60dc-40f0-b9ce-978d9c7c3707/barradeen-bedtime-after-a-coffee.mp3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=714a8f2a8463f9f36d217825797dc2b8580a278ff991ac3135ec1dcceee62e92&X-Amz-SignedHeaders=host&x-id=GetObject',\n", "            expiry_time: '2023-04-22T06:08:34.426Z',\n\t          },\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '33c0202c-e2a4-4700-8b70-3c4d65a28f6e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_3',\n\t        heading_3: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Bulleted List',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Bulleted List',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: '70ced692-4660-45e1-b353-293e98c3312e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'bulleted_list_item',\n\t        bulleted_list_item: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Item 1',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Item 1',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '98fce499-d6aa-4951-bfbb-cfeabe04de94',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:54:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'bulleted_list_item',\n\t        bulleted_list_item: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Item 2',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Item 2',\n\t              href: null,\n\t            },\n", "          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'dcf46a2a-d27b-4a9f-8cc4-9e0ffeb51443',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'bulleted_list_item',\n\t        bulleted_list_item: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Item 3',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Item 3',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '73668a29-3a89-447f-bf2b-e06d739b1f9a',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'Callout',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Callout',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '8e7cad16-c9c3-4f43-8ff2-ba562f8ac450',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:49:00.000Z',\n\t        last_edited_time: '2023-04-22T04:54:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'callout',\n\t        callout: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Callout here',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Callout here',\n\t              href: null,\n\t            },\n", "          ],\n\t          icon: {\n\t            type: 'emoji',\n\t            emoji: '🧑🏾‍🚀',\n\t          },\n\t          color: 'gray_background',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: 'ccf2cc60-e572-4e56-a761-9017f75c1b77',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:55:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Embeds',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Embeds',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n", "        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '2c53e751-975a-4f08-9135-c4713608d6e8',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:48:00.000Z',\n", "        last_edited_time: '2023-04-22T04:55:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n", "        archived: false,\n\t        type: 'bookmark',\n\t        bookmark: {\n\t          caption: [],\n\t          url: 'http://notion.so',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '70e77e9f-9281-4c39-8740-7f4ceaad4894',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:56:00.000Z',\n\t        last_edited_time: '2023-04-22T04:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'File',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'File',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '6ce7cfe3-5dc8-4ff0-98c7-76f70542ce02',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:55:00.000Z',\n\t        last_edited_time: '2023-04-22T04:57:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'file',\n\t        file: {\n\t          caption: [],\n\t          type: 'file',\n\t          file: {\n\t            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&X-Amz-SignedHeaders=host&x-id=GetObject',\n\t            expiry_time: '2023-04-22T06:08:34.426Z',\n\t          },\n\t        },\n\t      },\n", "      {\n\t        object: 'block',\n\t        id: '7d905dc6-ee5b-4610-8636-96c8771cedf0',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:57:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_1',\n", "        heading_1: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Heading 1',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n", "                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Heading 1',\n\t              href: null,\n\t            },\n\t          ],\n", "          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '3ea9ac0a-7fad-47ca-bcb9-152ffc5ad340',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:58:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a main heading.',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'This is a main heading.',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'ae7beb1c-36f3-4103-bbd4-a870fa914525',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'Heading 2',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Heading 2',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: 'c081da61-c469-473b-8ad7-090c3a5c1bd5',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a subheading.',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a subheading.',\n\t              href: null,\n\t            },\n", "          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'e6c6dd20-a24b-41f9-a0a6-bd6d8cbec502',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_3',\n\t        heading_3: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Heading 3',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Heading 3',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: '8ea74483-d7ba-4acc-abfd-0472161751c0',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a smaller subheading.',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a smaller subheading.',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '8448cc20-a7df-44b2-9ab5-1a08202cad35',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Images',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Images',\n\t              href: null,\n\t            },\n", "          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '0fdb2edf-3bfc-494e-81b3-be141d547e5f',\n\t        parent: {\n\t          type: 'page_id',\n", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:58:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'image',\n\t        image: {\n\t          caption: [],\n\t          type: 'external',\n\t          external: {\n\t            url: 'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb',\n", "          },\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '25bb32ec-fffd-4cde-8a64-1beb0a712dd4',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n", "        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_3',\n\t        heading_3: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Numbered List',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Numbered List',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '66997c55-0d83-4d81-af51-50011bc3719c',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'numbered_list_item',\n\t        numbered_list_item: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'First item',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'First item',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "      {\n\t        object: 'block',\n\t        id: '4b89040f-d963-43bb-b6f2-83a18613221e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'numbered_list_item',\n", "        numbered_list_item: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Second item',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n", "                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Second item',\n\t              href: null,\n\t            },\n\t          ],\n", "          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '4fe55d9e-b639-4926-b464-2183493d898b',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n", "        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:59:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'numbered_list_item',\n\t        numbered_list_item: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Third item',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Third item',\n", "              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'b9f320ea-c670-4ce4-81f7-d1924b1b69af',\n\t        parent: {\n", "          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:58:00.000Z',\n\t        last_edited_time: '2023-04-22T04:59:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n", "              text: {\n\t                content: 'Paragraph',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n", "                color: 'default',\n\t              },\n\t              plain_text: 'Paragraph',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n", "      {\n\t        object: 'block',\n\t        id: '70faf1fd-c58e-4306-b2e8-a56082a437d1',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:59:00.000Z',\n\t        last_edited_time: '2023-04-22T05:00:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n", "        paragraph: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n", "                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.',\n\t              href: null,\n\t            },\n\t          ],\n", "          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'fd5cad06-8e2e-425d-9b4e-138afde8cf0e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n", "        created_time: '2023-04-22T04:59:00.000Z',\n\t        last_edited_time: '2023-04-22T05:00:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Pdf',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Pdf',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '9fd4698a-4e76-4a1c-8e7b-a013c85dd475',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:59:00.000Z',\n\t        last_edited_time: '2023-04-22T05:00:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'pdf',\n\t        pdf: {\n\t          caption: [],\n\t          type: 'file',\n", "          file: {\n\t            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4abc717f-3f8a-4bdf-b482-090ca8371eab/Deep_Work.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=7d5012d5fe544ffea48bbbeecb56d768f949dee7138a4c9f8a63850b42ea2e86&X-Amz-SignedHeaders=host&x-id=GetObject',\n\t            expiry_time: '2023-04-22T06:08:34.417Z',\n\t          },\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '1bdd5623-30dd-410a-8865-2a822907f180',\n\t        parent: {\n", "          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:00:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n", "              text: {\n\t                content: 'Quotes',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n", "                color: 'default',\n\t              },\n\t              plain_text: 'Quotes',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n", "      {\n\t        object: 'block',\n\t        id: '24bc67cb-e1a8-408d-ac2b-28a8de7e5a48',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'quote',\n", "        quote: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a block quote.',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n", "                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a block quote.',\n\t              href: null,\n\t            },\n\t          ],\n", "          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'dfe9d55b-eb15-463a-8893-02615c83c069',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n", "        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'To-do list',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'To-do list',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '83579363-4afb-4b52-9e1c-427dac9ba8fd',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'to_do',\n\t        to_do: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'Completed task',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Completed task',\n\t              href: null,\n\t            },\n\t          ],\n\t          checked: true,\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '22930a4e-8c76-4a34-b4e5-e716851c57ec',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'to_do',\n\t        to_do: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Incomplete task',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Incomplete task',\n\t              href: null,\n\t            },\n", "          ],\n\t          checked: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'a76b18aa-d7f7-4453-af04-7922bd936107',\n\t        parent: {\n\t          type: 'page_id',\n", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n", "                content: 'Toggle',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n", "              },\n\t              plain_text: 'Toggle',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n", "        object: 'block',\n\t        id: '150eabf8-b9e6-47a7-96e8-9db3f17b5af2',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: true,\n\t        archived: false,\n\t        type: 'toggle',\n\t        toggle: {\n", "          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Toggle heading',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n", "                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Toggle heading',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n", "        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '15009060-620d-479b-abb8-30d58bbd2f1a',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T05:03:00.000Z',\n", "        last_edited_time: '2023-04-22T05:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n", "        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Video',\n\t                link: null,\n\t              },\n", "              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Video',\n\t              href: null,\n", "            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '4c4c1ffd-28a2-4d47-bb4f-bda743167ddd',\n\t        parent: {\n", "          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T05:02:00.000Z',\n\t        last_edited_time: '2023-04-22T05:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'video',\n\t        video: {\n\t          caption: [],\n\t          type: 'external',\n\t          external: {\n", "            url: 'https://www.youtube.com/watch?v=-XmImaT5TxM',\n\t          },\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '6f04395b-70e0-4e9a-824f-c90925888cb8',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n", "        },\n\t        created_time: '2023-04-22T04:33:00.000Z',\n\t        last_edited_time: '2023-04-22T05:02:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_1',\n\t        heading_1: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Extras',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Extras',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: 'fc27637b-5408-4e7c-8cce-8d4f86aabfe8',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T05:01:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Tables',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Tables',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n", "        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n", "        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: true,\n", "        archived: false,\n\t        type: 'table',\n\t        table: {\n\t          table_width: 3,\n\t          has_column_header: false,\n\t          has_row_header: false,\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n", "        id: '8b15ccd9-8200-46eb-bfa9-31cc86502138',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n", "            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Code',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Code',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n", "        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'f8894210-9696-4f6f-8b03-9d6228d7ca2e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n", "        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n", "        archived: false,\n\t        type: 'code',\n\t        code: {\n\t          caption: [],\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'This is a code block.\\n',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a code block.\\n',\n", "              href: null,\n\t            },\n\t          ],\n\t          language: 'plain text',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'f9196d85-ed6a-4e66-9e4a-e06649c82eb1',\n\t        parent: {\n", "          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n", "              text: {\n\t                content: 'Divider',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n", "                color: 'default',\n\t              },\n\t              plain_text: 'Divider',\n\t              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n", "      {\n\t        object: 'block',\n\t        id: '0ec6df58-042f-4d5a-b9e7-12f29bbcadaa',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'divider',\n", "        divider: {},\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'd7aa833d-9696-4fe0-b8de-d8140c9ec45e',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n", "        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n", "        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Links',\n\t                link: null,\n\t              },\n", "              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Links',\n\t              href: null,\n", "            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'f735c8ef-16aa-46c1-993a-660401ec68cb',\n\t        parent: {\n", "          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n", "              text: {\n\t                content: 'This is a link to Notion\\'s website.',\n\t                link: {\n\t                  url: 'https://www.notion.so/',\n\t                },\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n", "                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'This is a link to Notion\\'s website.',\n\t              href: 'https://www.notion.so/',\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n", "      },\n\t      {\n\t        object: 'block',\n\t        id: '3ab413cf-eb50-40cf-a7de-8124be31c12f',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n", "        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n", "        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Equation',\n\t                link: null,\n\t              },\n\t              annotations: {\n", "                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Equation',\n\t              href: null,\n\t            },\n", "          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'f16d5090-f1ea-40c4-ad08-f6b795367113',\n\t        parent: {\n\t          type: 'page_id',\n", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n\t        },\n\t        created_time: '2023-04-22T04:49:00.000Z',\n\t        last_edited_time: '2023-04-22T04:50:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'equation',\n\t        equation: {\n\t          expression: '(a+b)^n=a^n+{n \\\\choose 1}a^{n-1}b+{n \\\\choose 2}a^{n-2}b^2 + \\\\cdots + {n \\\\choose r}a^{n-r}b^r + \\\\cdots + b^n',\n\t        },\n\t      },\n\t    ],\n", "    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n\t  })\n\t// Kitchen Sink children blocks\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${'150eabf8-b9e6-47a7-96e8-9db3f17b5af2'}/children`)\n", "  .query(true)\n\t  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: '5d6e8f49-bea3-4ba7-974f-924c98768d6a',\n\t        parent: {\n\t          type: 'block_id',\n\t          block_id: '150eabf8-b9e6-47a7-96e8-9db3f17b5af2',\n", "        },\n\t        created_time: '2023-04-22T04:51:00.000Z',\n\t        last_edited_time: '2023-04-22T04:51:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Toggle content',\n", "                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n", "              plain_text: 'Toggle content',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n\t    ],\n\t    next_cursor: null,\n\t    has_more: false,\n", "    type: 'block',\n\t    block: {},\n\t    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n\t  })\n\t// Kitchen Sink children blocks\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${'4d6d646c-b236-4b52-a40e-399f87a5c89f'}/children`)\n\t  .query(true)\n\t  .reply(200, {\n", "    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: 'a3c6065c-401a-43bc-b374-f8f292618ef6',\n\t        parent: {\n\t          type: 'block_id',\n\t          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n", "        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n", "        archived: false,\n\t        type: 'table_row',\n\t        table_row: {\n\t          cells: [\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Column 1',\n\t                  link: null,\n", "                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Column 1',\n", "                href: null,\n\t              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Column 2',\n\t                  link: null,\n\t                },\n", "                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Column 2',\n\t                href: null,\n", "              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Column 3',\n\t                  link: null,\n\t                },\n\t                annotations: {\n", "                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Column 3',\n\t                href: null,\n\t              },\n", "            ],\n\t          ],\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'b54a3c90-19de-47ee-9eff-a9d7cb8cbe82',\n\t        parent: {\n\t          type: 'block_id',\n\t          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n", "        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n", "        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'table_row',\n\t        table_row: {\n\t          cells: [\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n", "                  content: 'Row 1, Column 1',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n", "                },\n\t                plain_text: 'Row 1, Column 1',\n\t                href: null,\n\t              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Row 1, Column 2',\n", "                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n", "                plain_text: 'Row 1, Column 2',\n\t                href: null,\n\t              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n\t                  content: 'Row 1, Column 3',\n\t                  link: null,\n", "                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Row 1, Column 3',\n", "                href: null,\n\t              },\n\t            ],\n\t          ],\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'b311d987-e18e-479d-8783-dc66ec88ffe6',\n\t        parent: {\n", "          type: 'block_id',\n\t          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n\t        },\n\t        created_time: '2023-04-22T04:34:00.000Z',\n\t        last_edited_time: '2023-04-22T04:34:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n", "          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'table_row',\n\t        table_row: {\n\t          cells: [\n\t            [\n\t              {\n", "                type: 'text',\n\t                text: {\n\t                  content: 'Row 2, Column 1',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n", "                  code: false,\n\t                  color: 'default',\n\t                },\n\t                plain_text: 'Row 2, Column 1',\n\t                href: null,\n\t              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n", "                text: {\n\t                  content: 'Row 2, Column 2',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n", "                  color: 'default',\n\t                },\n\t                plain_text: 'Row 2, Column 2',\n\t                href: null,\n\t              },\n\t            ],\n\t            [\n\t              {\n\t                type: 'text',\n\t                text: {\n", "                  content: 'Row 2, Column 3',\n\t                  link: null,\n\t                },\n\t                annotations: {\n\t                  bold: false,\n\t                  italic: false,\n\t                  strikethrough: false,\n\t                  underline: false,\n\t                  code: false,\n\t                  color: 'default',\n", "                },\n\t                plain_text: 'Row 2, Column 3',\n\t                href: null,\n\t              },\n\t            ],\n\t          ],\n\t        },\n\t      },\n\t    ],\n\t    next_cursor: null,\n", "    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n\t  })\n\t// All others\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${pageIds[0]}/children`)\n\t  .query(true)\n", "  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: 'c2b84e62-6f89-45f6-ae1e-15d4f1cce6c2',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t        },\n", "        created_time: '2023-04-09T06:03:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Product B',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Product B',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '6d5f0b3f-fd01-4c77-bd29-4594315b0299',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n\t        },\n\t        created_time: '2023-04-09T06:03:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'about product B',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'about product B',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t  })\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${pageIds[1]}/children`)\n\t  .query(true)\n", "  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: 'b51a74cd-7627-4485-b046-75c1ddd490da',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t        },\n", "        created_time: '2023-04-09T05:50:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Product A',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Product A',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '5fcc45ad-283b-4e1c-aa3d-56286b5b75a3',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n\t        },\n\t        created_time: '2023-04-09T05:56:00.000Z',\n\t        last_edited_time: '2023-04-09T06:03:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'about product A',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'about product A',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t  })\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${pageIds[2]}/children`)\n\t  .query(true)\n", "  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: 'ebf8bcb5-f819-41d5-b97b-0075672f7ddc',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        },\n", "        created_time: '2023-04-09T05:50:00.000Z',\n\t        last_edited_time: '2023-04-09T05:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_2',\n\t        heading_2: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Product Categories',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Product Categories',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: 'dd77693a-1580-4f27-95e1-67a6cd1d9e3a',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n\t        },\n\t        created_time: '2023-04-09T05:56:00.000Z',\n\t        last_edited_time: '2023-04-09T05:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'about product categories',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'about product categories',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t  })\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${pageIds[3]}/children`)\n\t  .query(true)\n", "  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: '0907be1b-593b-47c8-93ac-f27f263119e8',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t        },\n", "        created_time: '2023-04-09T05:45:00.000Z',\n\t        last_edited_time: '2023-04-09T05:45:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_1',\n\t        heading_1: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Team',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Team',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '125f2adb-2154-4c1b-a6a4-eba8f92bda8b',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n\t        },\n\t        created_time: '2023-04-09T05:55:00.000Z',\n\t        last_edited_time: '2023-04-09T05:55:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'about the team',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'about the team',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t  })\n\tnock(baseUrl)\n\t  .persist()\n\t  .get(`/blocks/${pageIds[4]}/children`)\n\t  .query(true)\n", "  .reply(200, {\n\t    object: 'list',\n\t    results: [\n\t      {\n\t        object: 'block',\n\t        id: 'f835a203-0dab-4a3d-8f89-02c5e9404d43',\n\t        parent: {\n\t          type: 'page_id',\n\t          page_id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t        },\n", "        created_time: '2023-04-09T05:45:00.000Z',\n\t        last_edited_time: '2023-04-09T05:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        has_children: false,\n\t        archived: false,\n\t        type: 'heading_1',\n\t        heading_1: {\n\t          rich_text: [\n\t            {\n\t              type: 'text',\n\t              text: {\n\t                content: 'Products',\n\t                link: null,\n", "              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n\t                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'Products',\n", "              href: null,\n\t            },\n\t          ],\n\t          is_toggleable: false,\n\t          color: 'default',\n\t        },\n\t      },\n\t      {\n\t        object: 'block',\n\t        id: '16a97a8d-5b38-484f-8d98-1ce03ee03b1b',\n", "        parent: {\n\t          type: 'page_id',\n\t          page_id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n\t        },\n\t        created_time: '2023-04-09T05:56:00.000Z',\n\t        last_edited_time: '2023-04-09T05:56:00.000Z',\n\t        created_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n", "        last_edited_by: {\n\t          object: 'user',\n\t          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n\t        },\n\t        has_children: false,\n\t        archived: false,\n\t        type: 'paragraph',\n\t        paragraph: {\n\t          rich_text: [\n\t            {\n", "              type: 'text',\n\t              text: {\n\t                content: 'about products',\n\t                link: null,\n\t              },\n\t              annotations: {\n\t                bold: false,\n\t                italic: false,\n\t                strikethrough: false,\n\t                underline: false,\n", "                code: false,\n\t                color: 'default',\n\t              },\n\t              plain_text: 'about products',\n\t              href: null,\n\t            },\n\t          ],\n\t          color: 'default',\n\t        },\n\t      },\n", "    ],\n\t    next_cursor: null,\n\t    has_more: false,\n\t    type: 'block',\n\t    block: {},\n\t  })\n"]}
