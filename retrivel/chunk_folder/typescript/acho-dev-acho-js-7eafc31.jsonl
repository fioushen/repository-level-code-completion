{"filename": "tests/project.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\tdescribe('test project endpoints', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  it('get project table by viewId with page size of 10', async () => {\n\t    const data = await AchoInstance.ProjectEndpoints.getViewData({ viewId: 7869, pageSize: 10 });\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('data');\n", "    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    expect(data.data.length).toBeLessThanOrEqual(10);\n\t  });\n\t  it('get project table by assetId with default page size', async () => {\n\t    const data = await AchoInstance.ProjectEndpoints.getViewData({ assetId: 9242 });\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n", "    expect(data.data.length).toBeLessThanOrEqual(100);\n\t  });\n\t  it('query project table with default page size', async () => {\n\t    // ! Using a different token\n\t    const data = await AchoInstance.ProjectEndpoints.queryTableData({\n\t      actionQuery: {\n\t        query: 'SELECT * FROM {{{P.9038}}};',\n\t        helperInfo: {\n\t          resources: [],\n\t          projects: [],\n", "          views: [\n\t            {\n\t              view: {\n\t                id: 9038,\n\t                proj_id: 2937\n\t              }\n\t            }\n\t          ]\n\t        }\n\t      }\n", "    });\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    expect(data.data.length).toBeLessThanOrEqual(100);\n\t  });\n\t});\n"]}
{"filename": "tests/auth.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\tdescribe('test OAuth endpoints', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  it('identify yourself', async () => {\n\t    const data = await AchoInstance.OAuthEndpoints.identify();\n\t    expect(data).toBeInstanceOf(Object);\n\t    console.log(data);\n", "  });\n\t  it('get oauth list', async () => {\n\t    const data = await AchoInstance.OAuthEndpoints.getOAuthClientList();\n\t    expect(data).toBeInstanceOf(Object);\n\t    console.log(data);\n\t  });\n\t  it.skip('get oauth token', async () => {\n\t    const data = await AchoInstance.OAuthEndpoints.getOAuthToken({ id: '4ee0dbf0-92ce-48e1-b5c1-b9248217041a' });\n\t    expect(typeof data).toBe('string');\n\t    console.log(data);\n", "  });\n\t});\n"]}
{"filename": "tests/resource.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\timport { ActionQuery, ResourceTableDataResp } from '../src/types';\n\timport { pipeline, Readable, Transform } from 'stream';\n\timport fs, { write } from 'fs';\n\timport { ClientRequest } from 'http';\n\tjest.useRealTimers();\n\tdescribe('test resource: create', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n", "  });\n\t  let testResId = -1;\n\t  test('create integration resource', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.create({ name: 'test' }); // Test get by assetId\n\t    console.log(data);\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('resId');\n\t    testResId = data.resId;\n\t  });\n\t  test('create integration resource table', async () => {\n", "    const data = await AchoInstance.ResourceEndpoints.createTable({\n\t      resId: testResId,\n\t      tableName: 'test',\n\t      schema: { col1: 'STRING', col2: 'JSON' }\n\t    }); // Test get by assetId\n\t    console.log(data);\n\t    expect(data).toBeInstanceOf(Object);\n\t  });\n\t  test('insert rows with resId, tableId and json string', async () => {\n\t    const writableStream = await AchoInstance.ResourceEndpoints.createWriteStream({\n", "      resId: testResId,\n\t      tableId: 'test',\n\t      dataType: 'json'\n\t    });\n\t    const testArray = [\n\t      { col1: 'JSON_1', col2: { s1: 1 } },\n\t      { col1: 'JSON_2', col2: [1, 2, 3] },\n\t      { col1: 'JSON_3', col2: { s1: 3 } },\n\t      { col1: 'JSON_4', col2: { s1: 4 } }\n\t    ];\n", "    await new Promise((resolve) => {\n\t      testArray.forEach((row) => {\n\t        writableStream.write(JSON.stringify(row) + '\\n', (err) => {\n\t          if (err) {\n\t            console.log(err);\n\t          }\n\t        });\n\t      });\n\t      writableStream.end();\n\t      writableStream.on('response', (res) => {\n", "        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(writableStream).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('insert rows with resId, tableId and csv rows', async () => {\n\t    const writableStream = await AchoInstance.ResourceEndpoints.createWriteStream({\n\t      resId: testResId,\n\t      tableId: 'test',\n", "      dataType: 'csv'\n\t    });\n\t    const testCSV = 'CSV_1,1\\nCSV_2,2\\nCSV_3,3\\nCSV_4,4\\n';\n\t    await new Promise((resolve) => {\n\t      // testCSV.split('\\n').forEach((row) => {\n\t      //   writableStream.write(row + '\\n');\n\t      // });\n\t      writableStream.write(testCSV);\n\t      writableStream.end();\n\t      writableStream.on('response', (res) => {\n", "        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(writableStream).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('delete resource with resId', async () => {\n\t    const deleteResult = await AchoInstance.ResourceEndpoints.delete({\n\t      resId: testResId\n\t    });\n", "    expect(deleteResult).toBe('success');\n\t  });\n\t});\n\tdescribe('test resource:getTableData', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  let assetResp: ResourceTableDataResp;\n\t  let resResp: ResourceTableDataResp;\n", "  test('get simple resource table by assetId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.getTableData({ assetId: 9244 }); // Test get by assetId\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    const { data: _data, schema, paging } = data;\n\t    expect(_data).toBeInstanceOf(Array);\n\t    expect(schema).toBeInstanceOf(Object);\n\t    expect(paging).toBeInstanceOf(Object);\n", "    assetResp = data;\n\t  });\n\t  test('get simple resource table by resId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.getTableData({ resId: 4649 }); // Test get by resId\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    const { data: _data, schema, paging } = data;\n\t    expect(_data).toBeInstanceOf(Array);\n", "    expect(schema).toBeInstanceOf(Object);\n\t    expect(paging).toBeInstanceOf(Object);\n\t    resResp = data;\n\t  });\n\t  test('resource table result consistency', async () => {\n\t    expect(assetResp).not.toBeUndefined();\n\t    expect(resResp).not.toBeUndefined();\n\t    expect(assetResp).toEqual(resResp);\n\t  });\n\t});\n", "describe.skip('test resource:download', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  let assetResp: any;\n\t  let resResp: any;\n\t  test('download simple resource table by assetId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ assetId: 9244 }); // Test get by assetId\n\t    expect(data).toBeInstanceOf(Object);\n", "    expect(data).toHaveProperty('url');\n\t    expect(data).toHaveProperty('archiveName');\n\t    const { url } = data;\n\t    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\t    assetResp = data;\n\t  });\n\t  test('download simple resource table by resId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ resId: 4649 }); // Test get by resId\n\t    expect(data).toBeInstanceOf(Object);\n\t    expect(data).toHaveProperty('url');\n", "    expect(data).toHaveProperty('archiveName');\n\t    const { url } = data;\n\t    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\t    resResp = data;\n\t  });\n\t  test('download table result consistency', async () => {\n\t    expect(assetResp).not.toBeUndefined();\n\t    expect(resResp).not.toBeUndefined();\n\t    const { archiveName: assetArchiveName } = assetResp;\n\t    const { archiveName: resArchiveName } = resResp;\n", "    const descriptorA = assetArchiveName.split('_').slice(0, 1);\n\t    const descriptorB = resArchiveName.split('_').slice(0, 1);\n\t    expect(descriptorA).toEqual(descriptorB);\n\t  });\n\t});\n\tdescribe('test resource:query', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n", "  const actionQuery: ActionQuery = {\n\t    query: 'SELECT * FROM {{{R.4650}}};',\n\t    helperInfo: {\n\t      resources: [\n\t        {\n\t          resource: {\n\t            access_groups: [\n\t              { id: 1, name: 'view' },\n\t              { id: 2, name: 'edit' },\n\t              { id: 3, name: 'import' },\n", "              { id: 4, name: 'export' },\n\t              { id: 5, name: 'management_view' },\n\t              { id: 6, name: 'management_edit' }\n\t            ],\n\t            access_role_id: 1,\n\t            asset_id: 9248,\n\t            create_time: 1660228479,\n\t            id: 4650,\n\t            is_creator: true,\n\t            is_private: 0,\n", "            is_ready: 1,\n\t            is_scheduled: null,\n\t            owner_id: 5612,\n\t            res_display_name: 'superstore_order_csv',\n\t            res_name: '5612_superstore_order_csv_1660228479565',\n\t            res_type: 'csvBucket',\n\t            scheduler_id: null,\n\t            team_id: 607,\n\t            update_frequency: null,\n\t            update_query: null,\n", "            update_status: null,\n\t            user_id: 5612\n\t          },\n\t          resourceTable: ''\n\t        }\n\t      ],\n\t      projects: []\n\t    }\n\t  };\n\t  let pageToken: string | undefined;\n", "  let jobId: string | undefined;\n\t  let resResp: Array<Object>;\n\t  test('get resource table with query and page size of 10', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 2, pageSize: 10 });\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    expect(data).toHaveProperty('jobId');\n\t    const { data: _data, schema, paging, jobId: _jobId } = data;\n\t    expect(_data.length).toBe(10);\n", "    expect(schema).toHaveProperty('fields');\n\t    expect(paging).toHaveProperty('pageToken');\n\t    pageToken = paging.pageToken;\n\t    jobId = _jobId;\n\t  });\n\t  test('get resource table with pageToken and jobId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, pageToken, jobId, pageSize: 10 });\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n", "    expect(data).toHaveProperty('jobId');\n\t    const { data: _data, schema, paging, jobId: _jobId } = data;\n\t    expect(_data.length).toBe(10);\n\t    expect(schema).toHaveProperty('fields');\n\t    expect(paging).toHaveProperty('pageToken');\n\t    resResp = _data;\n\t  });\n\t  test('resource table result consistency', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 3, pageSize: 10 });\n\t    expect(data).toHaveProperty('data');\n", "    expect(data).toHaveProperty('schema');\n\t    expect(data).toHaveProperty('paging');\n\t    expect(data).toHaveProperty('jobId');\n\t    const { data: _data, schema, paging, jobId: _jobId } = data;\n\t    expect(_data.length).toBe(10);\n\t    expect(schema).toHaveProperty('fields');\n\t    expect(paging).toHaveProperty('pageToken');\n\t    expect(_data).toEqual(resResp);\n\t  });\n\t  test('get Integration resource table with query and default page size', async () => {\n", "    actionQuery.query = 'SELECT * FROM {{{R.4651.Sheet1}}};';\n\t    actionQuery.helperInfo.resources = [\n\t      {\n\t        resource: {\n\t          access_role_id: 1,\n\t          asset_id: 9249,\n\t          create_time: 1660239228,\n\t          id: 4651,\n\t          is_creator: true,\n\t          is_private: 0,\n", "          is_ready: 1,\n\t          is_scheduled: null,\n\t          owner_id: 5612,\n\t          real_type: 'integration',\n\t          res_display_name: 'Glossary list',\n\t          res_name: 'integration_5612_Google_Sheets_1660239228',\n\t          res_type: 'Google_Sheets',\n\t          scheduler_id: null,\n\t          team_id: 607,\n\t          update_frequency: null,\n", "          update_query: null,\n\t          update_status: null,\n\t          user_id: 5612\n\t        },\n\t        resourceTable: 'Sheet1'\n\t      }\n\t    ];\n\t    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery });\n\t    expect(data).toHaveProperty('data');\n\t    expect(data).toHaveProperty('schema');\n", "    expect(data).toHaveProperty('paging');\n\t    expect(data).toHaveProperty('jobId');\n\t    const { data: _data, schema, paging, jobId: _jobId } = data;\n\t    expect(_data.length).toBeLessThanOrEqual(100); // NOTE: default page size is 100 rows\n\t    expect(schema).toHaveProperty('fields');\n\t    // if this is the last page, there won't be a pageToken (a unique string to query the next page)\n\t    if (_data.length < 100) expect(paging).not.toHaveProperty('pageToken');\n\t    else expect(paging).toHaveProperty('pageToken');\n\t  });\n\t});\n", "// NOTE: set resource:sync tests timeout to 60000 to override the default 5000ms timeout\n\tdescribe.skip('test resource:sync', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  test('sync resource table data', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.syncTableData({ resId: 4651 });\n\t    expect(data).toBe('success');\n\t  }, 60000);\n", "  test('sync resource table data with userId', async () => {\n\t    const data = await AchoInstance.ResourceEndpoints.syncTableData({ resId: 4651, userId: 5612 });\n\t    expect(data).toBe('success');\n\t  }, 60000);\n\t});\n\tdescribe('test resource:createReadStream', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n", "  test('create read stream with resId', async () => {\n\t    const highWaterMark = 50;\n\t    // NOTE: This seems to allow Axios to complete its housekeeping and be ready to track new connections opened afterwards\n\t    // https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n\t    process.nextTick(() => {});\n\t    const readable = await AchoInstance.ResourceEndpoints.createReadStream({ resId: 4678, highWaterMark });\n\t    const t = new Transform({\n\t      writableObjectMode: true, // set this one to true\n\t      readableObjectMode: false,\n\t      writableHighWaterMark: highWaterMark,\n", "      readableHighWaterMark: highWaterMark * 1024,\n\t      transform(chunk, _, done) {\n\t        done(null, `${JSON.stringify(chunk)}\\n`);\n\t      }\n\t    });\n\t    const writable = fs.createWriteStream('./tests/data/readstream-test-output');\n\t    await new Promise((resolve, reject) => {\n\t      // Using either pipeline() or readable.pipe().pipe() is fine\n\t      pipeline(readable, t, writable, (err) => {\n\t        if (err) {\n", "          throw err;\n\t        }\n\t      });\n\t      // readable.pipe(t).pipe(writable);\n\t      readable\n\t        .on('end', () => {\n\t          console.log('Written readable stream to file');\n\t          readable.destroy();\n\t          resolve('finished');\n\t        })\n", "        .on('error', (err: any) => {\n\t          reject(err);\n\t        });\n\t    });\n\t    expect(readable).toBeInstanceOf(Readable);\n\t  }, 50000);\n\t  test.skip('create read stream with a large file', async () => {\n\t    const highWaterMark = 50;\n\t    process.nextTick(() => {});\n\t    // TEST pipelining large file\n", "    const readable = await AchoInstance.ResourceEndpoints.createReadStream({ resId: 4676, highWaterMark });\n\t    let count = 0;\n\t    readable\n\t      .on('data', (data) => {\n\t        count++;\n\t        if (count % 1000 === 0) console.log(count);\n\t      })\n\t      .on('end', () => {\n\t        console.log('Written readable stream to file');\n\t        console.log(count);\n", "        readable.destroy();\n\t      })\n\t      .on('error', (err: any) => {});\n\t    expect(readable).toBeInstanceOf(Readable);\n\t  }, 200000);\n\t  test('create read stream with assetId', async () => {\n\t    // NOTE: This seems to allow Axios to complete its housekeeping and be ready to track new connections opened afterwards\n\t    // https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n\t    process.nextTick(() => {});\n\t    const data = await AchoInstance.ResourceEndpoints.createReadStream({ assetId: 9248 });\n", "    let count = 0;\n\t    await new Promise((resolve, reject) => {\n\t      data\n\t        .on('data', (data) => {\n\t          count++;\n\t        })\n\t        .on('end', () => {\n\t          expect(count).toBe(9994);\n\t          data.destroy();\n\t          resolve('finished');\n", "        }); // expected value subject to change with the asset\n\t      expect(data).toBeInstanceOf(Readable);\n\t    });\n\t  }, 20000);\n\t  test('create read stream with an integration resource', async () => {\n\t    // res_type = 'integration'\n\t    process.nextTick(() => {});\n\t    const data = await AchoInstance.ResourceEndpoints.createReadStream({\n\t      assetId: 12523,\n\t      tableId: 'RunningAPIs_csv'\n", "    });\n\t    let count = 0;\n\t    await new Promise((resolve, reject) => {\n\t      data\n\t        .on('data', (data) => {\n\t          count++;\n\t        })\n\t        .on('end', () => {\n\t          console.log(count);\n\t          data.destroy();\n", "          resolve('finished');\n\t        });\n\t      expect(data).toBeInstanceOf(Readable);\n\t    });\n\t  }, 20000);\n\t});\n\tdescribe('test resource:createWriteStream', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n", "  });\n\t  test('insert rows with resId and csv string', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n\t      resId: 4679,\n\t      dataType: 'csv',\n\t      hasHeader: false\n\t    });\n\t    // TODO: do we have to remove the rows added by test?\n\t    await new Promise((resolve) => {\n\t      for (let i = 0; i < 10; i++) {\n", "        httpRequest.write(`Test_${Date.now()},5000,2020-07-06T13:50:03,2020-07-06T13:50:03\\n`);\n\t      }\n\t      httpRequest.end();\n\t      httpRequest.on('response', (res) => {\n\t        res.on('data', (data) => console.log(JSON.parse(data.toString())));\n\t        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(httpRequest).toBeInstanceOf(ClientRequest);\n", "  });\n\t  test('insert rows with resId and json string', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({ resId: 4679, dataType: 'json' });\n\t    await new Promise((resolve) => {\n\t      for (let i = 0; i < 5; i++) {\n\t        httpRequest.write(\n\t          JSON.stringify({\n\t            Name: `JSON_${Date.now()}`,\n\t            Duration: 5000,\n\t            Start_time: '2020-07-06T13:50:03',\n", "            End_time: '2020-07-06T13:50:03'\n\t          }) + '\\n'\n\t        );\n\t      }\n\t      httpRequest.end();\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n", "    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('insert rows with assetId and json file', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({ assetId: 9297, dataType: 'json' });\n\t    await new Promise((resolve) => {\n\t      // NOTE: json should be in newline-delimited format\n\t      fs.createReadStream('./tests/data/res_4679_data.ndjson').pipe(httpRequest);\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n", "      });\n\t    });\n\t    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('error handling - wrong credential', async () => {\n\t    const opts = {\n\t      apiToken: 'xxxxxxxx',\n\t      endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t    };\n\t    const AchoInstanceNoAuth = new Acho(opts);\n", "    const httpRequest = await AchoInstanceNoAuth.ResourceEndpoints.createWriteStream({ assetId: 9297, dataType: 'json' });\n\t    httpRequest.on('error', (err) => {});\n\t    await new Promise((resolve) => {\n\t      // NOTE: json should be in newline-delimited format\n\t      fs.createReadStream('./tests/data/res_4679_data.ndjson').pipe(httpRequest);\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(401);\n\t        resolve('done');\n\t      });\n\t    });\n", "    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('insert rows with assetId and csv file', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n\t      assetId: 9297,\n\t      dataType: 'csv',\n\t      hasHeader: true\n\t    });\n\t    await new Promise((resolve) => {\n\t      // NOTE: json should be in newline-delimited format\n", "      fs.createReadStream('./tests/data/res_4679_data.csv').pipe(httpRequest);\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('error handling - insert rows with invalid data type', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n", "      resId: 4679,\n\t      dataType: 'csv',\n\t      hasHeader: false\n\t    });\n\t    await new Promise((resolve) => {\n\t      httpRequest.write(`CSV_${Date.now()},AAA,2020-07-06T13:50:03,2020-07-06T13:50:03\\n`);\n\t      httpRequest.end();\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(400);\n\t        resolve('done');\n", "      });\n\t      httpRequest.on('error', (error) => {\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test('error handling - insert rows with invalid data format', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n\t      resId: 4679,\n", "      dataType: 'csv',\n\t      hasHeader: false\n\t    });\n\t    await new Promise((resolve) => {\n\t      httpRequest.write(`CSV_${Date.now()},5000,2020-07-06T13:50:03,2020-07-06T13:50:03,aaaa\\n`);\n\t      httpRequest.end();\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(400);\n\t        resolve('done');\n\t      });\n", "      httpRequest.on('error', (error) => {\n\t        resolve('done');\n\t      });\n\t    });\n\t    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t  test.skip('insert rows with with large files', async () => {\n\t    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n\t      assetId: 9297,\n\t      dataType: 'json',\n", "      maxWaitTime: 5000\n\t    });\n\t    await new Promise((resolve) => {\n\t      // NOTE: json should be in newline-delimited format\n\t      fs.createReadStream('./tests/data/res_4679_data_big').pipe(httpRequest);\n\t      httpRequest.on('response', (res) => {\n\t        expect(res.statusCode).toBe(200);\n\t        resolve('done');\n\t      });\n\t    });\n", "    expect(httpRequest).toBeInstanceOf(ClientRequest);\n\t  });\n\t});\n"]}
{"filename": "tests/app.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\tdescribe('test App endpoints', () => {\n\t  const AchoInstance = new Acho({\n\t    apiToken: process.env.ACHO_TOKEN,\n\t    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t  });\n\t  it('init app', async () => {\n\t    const appInstance = AchoInstance.app('328');\n\t    expect(appInstance).toBeInstanceOf(Object);\n\t    const metadata = await appInstance.init();\n", "  });\n\t  it('validate app version', async () => {\n\t    const appInstance = AchoInstance.app('328');\n\t    expect(appInstance).toBeInstanceOf(Object);\n\t    const metadata = await appInstance.init();\n\t    const appVersionInstance = await appInstance.version('352');\n\t    appVersionInstance.disconnect();\n\t  });\n\t  it('test app version room', async () => {\n\t    const appInstance = AchoInstance.app('328');\n", "    expect(appInstance).toBeInstanceOf(Object);\n\t    // console.log(appInstance);\n\t    const metadata = await appInstance.init();\n\t    const appVersionInstance = await appInstance.version('352');\n\t    // console.log(appVersionInstance);\n\t    const joined = await appVersionInstance.join();\n\t    // console.log(joined);\n\t    expect(joined).toEqual('joined');\n\t    const left = await appVersionInstance.leave();\n\t    // console.log(left);\n", "    expect(left).toEqual('left');\n\t    appVersionInstance.disconnect();\n\t  });\n\t});\n"]}
{"filename": "src/Acho.ts", "chunked_list": ["import { ClientOptions } from '.';\n\timport { ResourceEndpoints } from './resource';\n\timport { ProjectEndpoints } from './project';\n\timport { OAuthEndpoints } from './auth';\n\timport { App } from './app';\n\tconst defaultClientOpt = {\n\t  apiToken: process.env.ACHO_TOKEN,\n\t  endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n\t};\n\texport default class Acho {\n", "  private clientOpt: ClientOptions;\n\t  public ResourceEndpoints: ResourceEndpoints;\n\t  public ProjectEndpoints: ProjectEndpoints;\n\t  public OAuthEndpoints: OAuthEndpoints;\n\t  public constructor(clientOpt: ClientOptions = defaultClientOpt) {\n\t    this.clientOpt = clientOpt;\n\t    this.ResourceEndpoints = new ResourceEndpoints(clientOpt);\n\t    this.ProjectEndpoints = new ProjectEndpoints(clientOpt);\n\t    this.OAuthEndpoints = new OAuthEndpoints(clientOpt);\n\t  }\n", "  public app(id: string, clientOpt: ClientOptions = this.clientOpt) {\n\t    return new App(id, clientOpt);\n\t  }\n\t}\n\texport { ResourceEndpoints, ProjectEndpoints, OAuthEndpoints, App };\n"]}
{"filename": "src/app.ts", "chunked_list": ["import { ClientRequest } from 'http';\n\timport { AchoClient } from '.';\n\timport { ClientOptions } from './types';\n\timport { AppVersion } from './version';\n\texport class App {\n\t  public clientOpt: ClientOptions;\n\t  public appId: string;\n\t  public metadata: any;\n\t  constructor(id: string, clientOpt?: ClientOptions) {\n\t    this.appId = id;\n", "    this.clientOpt = {\n\t      ...clientOpt,\n\t      apiToken: clientOpt?.apiToken || process.env.ACHO_TOKEN\n\t    };\n\t  }\n\t  public async init() {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const appObj = await client.request({\n\t      method: 'get',\n\t      headers: {},\n", "      path: `/apps/${this.appId}`\n\t    });\n\t    this.metadata = appObj;\n\t    return this.metadata;\n\t  }\n\t  public async version(id: string) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const version = new AppVersion(this.appId, id, this.clientOpt);\n\t    await version.init();\n\t    return version;\n", "  }\n\t}\n"]}
{"filename": "src/resource.ts", "chunked_list": ["import { ClientRequest } from 'http';\n\timport { AchoClient, ActionQuery, ResourceTableDataResp, ResourceTableSchemaResp, ResourceDownloadResp } from '.';\n\timport { ClientOptions } from './types';\n\timport { Readable, Transform, TransformCallback } from 'stream';\n\timport createError from 'http-errors';\n\tconst wait = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\texport interface createParams {\n\t  name: string;\n\t}\n\texport interface deleteParams {\n", "  resId: number;\n\t}\n\texport type colType =\n\t  | 'INTEGER'\n\t  | 'FLOAT'\n\t  | 'NUMERIC'\n\t  | 'STRING'\n\t  | 'BOOLEAN'\n\t  | 'DATE'\n\t  | 'DATETIME'\n", "  | 'TIMESTAMP'\n\t  | 'TIME'\n\t  | 'BYTES'\n\t  | 'ARRAY'\n\t  | 'STRUCT'\n\t  | 'GEOGRAPHY'\n\t  | 'JSON'\n\t  | 'JSONB';\n\texport interface createTableParams {\n\t  resId: number;\n", "  tableName: string;\n\t  schema: Record<string, colType>;\n\t}\n\texport interface getTableDataParams {\n\t  assetId?: number;\n\t  resId?: number;\n\t  tableId?: string;\n\t  page?: number;\n\t  pageSize?: number;\n\t}\n", "export interface syncTableDataParams {\n\t  resId: number;\n\t  userId?: number;\n\t}\n\texport interface queryTableDataParams {\n\t  actionQuery: ActionQuery;\n\t  page?: number;\n\t  pageSize?: number;\n\t  pageToken?: string;\n\t  jobId?: string;\n", "}\n\texport interface downloadTableDataParams {\n\t  assetId?: number;\n\t  resId?: number;\n\t  target?: string;\n\t  format?: string;\n\t}\n\texport interface getTableSchemaParams {\n\t  resId?: number;\n\t  assetId?: number;\n", "  tableId?: string;\n\t}\n\texport interface createReadStreamParams {\n\t  resId?: number;\n\t  assetId?: number;\n\t  tableId?: string;\n\t  highWaterMark?: number; // in KiB\n\t  readOptions?: Object;\n\t  snapshotSeconds?: number;\n\t  dataType?: 'json' | 'buffer';\n", "}\n\texport interface createWriteStreamParams {\n\t  dataType: 'json' | 'csv';\n\t  resId?: number;\n\t  assetId?: number;\n\t  tableId?: string;\n\t  hasHeader?: boolean;\n\t  maxWaitTime?: number; // in milliseconds\n\t}\n\texport class ResourceEndpoints {\n", "  private clientOpt: ClientOptions;\n\t  constructor(clientOpt: ClientOptions) {\n\t    this.clientOpt = {\n\t      ...clientOpt,\n\t      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n\t    };\n\t  }\n\t  /**\n\t   * Create a generic resource with name\n\t   * @param {createParams} params\n", "   * @param {number} params.name - either provide a assetId or a resId\n\t   */\n\t  async create(params: createParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/add/sdk',\n\t      payload: params\n\t    });\n", "    return data;\n\t  }\n\t  async createTable(params: createTableParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/integration/tables/add',\n\t      payload: params\n\t    });\n", "    return data;\n\t  }\n\t  async delete(params: deleteParams) {\n\t    const { resId: res_id } = params;\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data = await client.request({\n\t      method: 'delete',\n\t      headers: {},\n\t      path: '/resource/del',\n\t      payload: { res_id }\n", "    });\n\t    return data;\n\t  }\n\t  /**\n\t   * Get resource table by page\n\t   * @param {getTableDataParams} params\n\t   * @param {number} params.assetId - either provide a assetId or a resId\n\t   * @param {number} params.resId - either provide a assetId or a resId\n\t   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n\t   * @param {number} params.page - the page of paged data\n", "   * @param {pageSize} params.pageSize - how many rows should be in one data page\n\t   * @returns {ResourceTableDataResp}\n\t   */\n\t  async getTableData(params: getTableDataParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ResourceTableDataResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/get-data',\n\t      payload: params\n", "    });\n\t    return data;\n\t  }\n\t  /**\n\t   * Sync resource data\n\t   * @param {syncTableDataParams} params\n\t   * @returns {}\n\t   */\n\t  async syncTableData(params: syncTableDataParams) {\n\t    const { userId } = params;\n", "    const { apiToken } = this.clientOpt;\n\t    if (!userId && apiToken) {\n\t      const { id } = JSON.parse(Buffer.from(apiToken.split('.')[1], 'base64').toString());\n\t      params.userId = id;\n\t    }\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    // TODO: add response type\n\t    const data = await client.request({\n\t      method: 'post',\n\t      headers: {},\n", "      path: '/scheduler/run-resource-update',\n\t      payload: {\n\t        res_id: params.resId,\n\t        user_id: params.userId\n\t      }\n\t    });\n\t    return data;\n\t  }\n\t  /**\n\t   * Download resource table data\n", "   * @param {downloadTableDataParams} params\n\t   * @returns {ResourceTableDataResp}\n\t   */\n\t  async downloadTableData(params: downloadTableDataParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ResourceDownloadResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/download',\n\t      payload: params\n", "    });\n\t    return data;\n\t  }\n\t  /**\n\t   * Query resource table data\n\t   * @param {queryTableDataParams} params\n\t   * @param {ActionQuery} params.actionQuery - (required) the query and the helper info to query a resource table\n\t   * @param {number} params.page - the page of paged data\n\t   * @param {pageSize} params.pageSize - how many rows should be in one data page\n\t   * @param {string} params.jobId - required if you want to query other pages with the same actionQuery\n", "   * @returns {ResourceTableDataResp}\n\t   */\n\t  async queryTableData(params: queryTableDataParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ResourceTableDataResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/query',\n\t      payload: params\n\t    });\n", "    return data;\n\t  }\n\t  /**\n\t   * Get the resource table schema\n\t   * @param {getTableSchemaParams} params\n\t   * @param {number} params.assetId - either provide a assetId or a resId\n\t   * @param {number} params.resId - either provide a assetId or a resId\n\t   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n\t   * @returns {ResourceTableSchemaResp}\n\t   */\n", "  async getTableSchema(params: getTableSchemaParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ResourceTableSchemaResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/get-table-schema',\n\t      payload: params\n\t    });\n\t    return data;\n\t  }\n", "  /**\n\t   * Create a readable stream to read data from a resource table\n\t   * @param {createReadStreamParams} params\n\t   * @param {number} params.assetId - either provide a assetId or a resId\n\t   * @param {number} params.resId - either provide a assetId or a resId\n\t   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n\t   * @param {number} params.highWaterMark - in KiB, default to 16384 KiB or 16 objects if the stream is in object mode\n\t   * @param {Object} params.readOptions - https://googleapis.dev/nodejs/bigquerystorage/2.7.0/google.cloud.bigquery.storage.v1.ReadSession.ITableReadOptions.html\n\t   * @param {number} params.snapshotSeconds - https://googleapis.dev/nodejs/bigquerystorage/2.7.0/google.cloud.bigquery.storage.v1.ReadSession.ITableModifiers.html\n\t   * @param {dataType} params.dataType - when set to json, the data streamed from the returned readable stream is of JSON type, otherwise, buffer\n", "   * @returns\n\t   */\n\t  async createReadStream(params: createReadStreamParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: Readable = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/resource/create-read-stream',\n\t      payload: { ...params, highWaterMark: (params.highWaterMark === undefined ? 32 : params.highWaterMark) * 1024 },\n\t      responseType: 'stream',\n", "      axiosSettings: {\n\t        decompress: false,\n\t        timeout: 300 * 1000\n\t      }\n\t    });\n\t    // data.on('data', (chunk: Buffer) => {\n\t    //   console.log(chunk.toString());\n\t    // });\n\t    let fragment = '';\n\t    const transformStream = new Transform({\n", "      readableObjectMode: true,\n\t      transform(chunk: Buffer, encoding: string, callback: TransformCallback) {\n\t        try {\n\t          // console.log('fragment', fragment);\n\t          // console.log('chunk', chunk.toString());\n\t          const data = JSON.parse(fragment + chunk.toString());\n\t          fragment = '';\n\t          callback(null, data);\n\t        } catch (err) {\n\t          if (err instanceof Error) {\n", "            // console.log(err);\n\t            fragment += chunk.toString();\n\t            callback(null);\n\t          } else {\n\t            callback(new Error('Unknown error'));\n\t          }\n\t        }\n\t      }\n\t    });\n\t    data.pipe(transformStream);\n", "    // readableStream.fragment = '';\n\t    return params.dataType === 'buffer' ? data : transformStream;\n\t    // return data;\n\t  }\n\t  /**\n\t   * Create a writable stream to write data to a resource table\n\t   * @param params\n\t   * @param {string} params.dataType - specify the input data type, json or csv\n\t   * @param {number} params.assetId - either provide a assetId or a resId\n\t   * @param {number} params.resId - either provide a assetId or a resId\n", "   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n\t   * @param {string} params.hasHeader - indicate whether the input csv data includes the header\n\t   * @param {number} params.maxWaitTime - the maximum time in milliseconds to wait from the write job to complete, default to 60000 milliseconds\n\t   * @returns\n\t   */\n\t  async createWriteStream(params: createWriteStreamParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const httpRequest: ClientRequest = client.httpRequest({\n\t      method: 'post',\n\t      headers: {},\n", "      path: `/resource/create-write-stream`\n\t    });\n\t    httpRequest.write(JSON.stringify({ body: params }));\n\t    await wait(100);\n\t    return httpRequest;\n\t  }\n\t}\n"]}
{"filename": "src/auth.ts", "chunked_list": ["import { ClientRequest } from 'http';\n\timport { AchoClient, IOAuthClient } from '.';\n\timport { ClientOptions } from './types';\n\texport interface IGetOAuthClientParams {\n\t  id: string;\n\t}\n\texport class OAuthEndpoints {\n\t  private clientOpt: ClientOptions;\n\t  constructor(clientOpt: ClientOptions) {\n\t    this.clientOpt = {\n", "      ...clientOpt,\n\t      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n\t    };\n\t  }\n\t  async identify() {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: Array<IOAuthClient> = await client.request({\n\t      method: 'get',\n\t      headers: {},\n\t      path: '/auth/identify'\n", "    });\n\t    return data;\n\t  }\n\t  async getOAuthClientList() {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: Array<IOAuthClient> = await client.request({\n\t      method: 'get',\n\t      headers: {},\n\t      path: '/auth/oauth/client/list'\n\t    });\n", "    return data;\n\t  }\n\t  async getOAuthToken(params: IGetOAuthClientParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    try {\n\t      const data: string = await client.request({\n\t        method: 'get',\n\t        headers: {},\n\t        path: `/auth/oauth/client/${params.id}/token`\n\t      });\n", "      return data;\n\t    } catch (err) {\n\t      console.log(err);\n\t      throw err;\n\t    }\n\t  }\n\t}\n"]}
{"filename": "src/version.ts", "chunked_list": ["import { AchoClient } from '.';\n\timport { ClientOptions } from './types';\n\timport { App } from './app';\n\timport { SERVER_ADDRESS, SOCKET_NAMESPACE } from './constants';\n\timport { Socket, Manager } from 'socket.io-client';\n\timport { joinAppBuilderRoom, leaveAppBuilderRoom } from './utils/sockets/appRoom';\n\texport class AppVersion {\n\t  public appId: string;\n\t  public verId: string;\n\t  public metadata: any;\n", "  public clientOpt: ClientOptions;\n\t  public socket?: Socket;\n\t  constructor(appId: string, verId: string, clientOpt?: ClientOptions) {\n\t    this.appId = appId;\n\t    this.verId = verId;\n\t    this.clientOpt = {\n\t      ...clientOpt,\n\t      apiToken: clientOpt?.apiToken || process.env.ACHO_TOKEN\n\t    };\n\t  }\n", "  public async init() {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const verObj = await client.request({\n\t      method: 'get',\n\t      headers: {},\n\t      path: `/apps/${this.appId}/versions/${this.verId}`\n\t    });\n\t    this.metadata = verObj;\n\t    let socManager = new Manager(SERVER_ADDRESS, {\n\t      reconnectionAttempts: 10,\n", "      reconnectionDelayMax: 10000,\n\t      query: {\n\t        token: `jwt ${this.clientOpt.apiToken}`,\n\t        test: 'test parameter'\n\t      }\n\t    });\n\t    let socket = socManager.socket(SOCKET_NAMESPACE);\n\t    await new Promise((resolve, reject) => {\n\t      socket\n\t        .on('connect_error', (err) => {\n", "          console.log('connect_error', err);\n\t          reject(err);\n\t        })\n\t        .on('connect_timeout', (err) => {\n\t          console.log('connect_timeout', err);\n\t          reject(err);\n\t        })\n\t        .on('reconnect_attempt', (attempt) => {\n\t          console.log('reconnect_attempt', attempt);\n\t        })\n", "        .on('connect', () => {\n\t          console.log('connected');\n\t          resolve('connected');\n\t        })\n\t        .on('error', (err) => {\n\t          console.log('error', err);\n\t          reject(err);\n\t        });\n\t    });\n\t    this.socket = socket;\n", "    return this.metadata;\n\t  }\n\t  public async join() {\n\t    if (!this.socket) {\n\t      throw new Error('AppVersion not initialized');\n\t    }\n\t    await joinAppBuilderRoom(this.socket, { app_version_id: this.verId, is_editing: true });\n\t    return 'joined';\n\t  }\n\t  public async leave() {\n", "    if (!this.socket) {\n\t      throw new Error('AppVersion not initialized');\n\t    }\n\t    await leaveAppBuilderRoom(this.socket, { app_version_id: this.verId, is_editing: true });\n\t    return 'left';\n\t  }\n\t  public async disconnect() {\n\t    if (!this.socket) {\n\t      throw new Error('AppVersion not initialized');\n\t    }\n", "    this.socket.disconnect();\n\t    return 'closed';\n\t  }\n\t}\n"]}
{"filename": "src/project.ts", "chunked_list": ["import { AchoClient, ActionQuery, ProjectTableDataResp } from '.';\n\timport { ClientOptions } from './types';\n\texport interface getViewDataParams {\n\t  assetId?: number;\n\t  viewId?: number;\n\t  page?: number;\n\t  pageSize?: number;\n\t}\n\texport interface queryTableDataParams {\n\t  actionQuery: ActionQuery;\n", "  page?: number;\n\t  pageSize?: number;\n\t  pageToken?: string;\n\t  jobId?: string;\n\t}\n\texport class ProjectEndpoints {\n\t  private clientOpt: ClientOptions;\n\t  constructor(clientOpt: ClientOptions) {\n\t    this.clientOpt = clientOpt;\n\t  }\n", "  async getViewData(params: getViewDataParams) {\n\t    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ProjectTableDataResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/project/get-view-data',\n\t      payload: params\n\t    });\n\t    return data;\n\t  }\n", "  /**\n\t   * Query resource table data\n\t   * @param {queryTableDataParams} params\n\t   * @param {ActionQuery} params.actionQuery - (required) the query and the helper info to query a resource table\n\t   * @param {number} params.page - the page of paged data\n\t   * @param {pageSize} params.pageSize - how many rows should be in one data page\n\t   * @param {string} params.jobId - required if you want to query other pages with the same actionQuery\n\t   * @returns {ProjectTableDataResp}\n\t   */\n\t  async queryTableData(params: queryTableDataParams) {\n", "    const client: AchoClient = new AchoClient(this.clientOpt);\n\t    const data: ProjectTableDataResp = await client.request({\n\t      method: 'post',\n\t      headers: {},\n\t      path: '/project/query',\n\t      payload: params\n\t    });\n\t    return data;\n\t  }\n\t}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import 'dotenv/config';\n\timport pleaseUpgradeNode from 'please-upgrade-node';\n\tconst packageJson = require('../package.json');\n\tpleaseUpgradeNode(packageJson);\n\texport * from './types';\n\texport { default as Acho, ResourceEndpoints, ProjectEndpoints } from './Acho';\n"]}
{"filename": "src/utils/sockets/appRoom.ts", "chunked_list": ["import { SOCKET_EVENT_NAME } from '../../constants/socket';\n\t/**\n\t *\n\t * @param {*} socket - The socket instance\n\t * @param {Object} params - the params for the socket event\n\t * @param {String} params.app_version_id - app_version_id\n\t */\n\texport async function joinAppBuilderRoom(socket: any, params: any) {\n\t  const response = await socket.timeout(10000).emitWithAck(SOCKET_EVENT_NAME.JOIN_APP_BUILDER_ROOM, params);\n\t  return response;\n", "}\n\t/**\n\t *\n\t * @param {*} socket - The socket instance\n\t * @param {Object} params - the params for the socket event\n\t * @param {String} params.app_version_id - app_version_id\n\t */\n\texport async function leaveAppBuilderRoom(socket: any, params: any) {\n\t  const response = await socket.timeout(10000).emitWithAck(SOCKET_EVENT_NAME.LEAVE_APP_BUILDER_ROOM, params);\n\t  return response;\n", "}\n"]}
{"filename": "src/constants/socket.ts", "chunked_list": ["// NOTE: sockets event names should be unique across different rooms to avoid conflict\n\texport const SOCKET_EVENT_NAME = {\n\t  // business app socket events\n\t  JOIN_BUSINESS_APP_ROOM: 'join_business_app_room',\n\t  LEAVE_BUSINESS_APP_ROOM: 'leave_business_app_room',\n\t  JOIN_BUSINESS_APP_PROJ_ROOM: 'join_business_app_proj_room',\n\t  LEAVE_BUSINESS_APP_PROJ_ROOM: 'leave_business_app_proj_room',\n\t  DELETE_BUSINESS_APP: 'delete_business_app',\n\t  ADD_BUSINESS_APP: 'add_business_app',\n\t  UPDATE_BUSINESS_APP: 'update_business_app',\n", "  UPDATE_BUSINESS_APP_TAB_ORDER: 'update_business_app_tab_order',\n\t  CREATE_WIDGET: 'create_widget',\n\t  DELETE_WIDGET: 'delete_widget',\n\t  UPDATE_WIDGET: 'update_widget',\n\t  UPDATE_APP_SUCCESS: 'update_app_success',\n\t  DELETE_APP_SUCCESS: 'delete_app_success',\n\t  UPDATE_APP_TAB_ORDER_SUCCESS: 'update_app_tab_order_success',\n\t  JOIN_APP_BUILDER_ROOM: 'join_app_builder_room',\n\t  LEAVE_APP_BUILDER_ROOM: 'leave_app_builder_room'\n\t};\n"]}
{"filename": "src/constants/index.ts", "chunked_list": ["export const SERVER_ADDRESS = process.env.ACHO_API_ENDPOINT || '';\n\texport const SOCKET_NAMESPACE = '/soc';\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export * from './assets';\n\texport * from './client';\n"]}
{"filename": "src/types/client.ts", "chunked_list": ["import axios, { AxiosStatic, ResponseType } from 'axios';\n\timport { request } from 'http';\n\timport createHttpError from 'http-errors';\n\timport url from 'url';\n\texport interface ClientOptions {\n\t  apiToken?: string;\n\t  endpoint?: string;\n\t}\n\texport interface AuthHeader {\n\t  Authorization: string;\n", "}\n\texport interface RequestOptions {\n\t  method: 'post' | 'get' | 'put' | 'delete';\n\t  headers: Record<string, any>;\n\t  path: string;\n\t  payload?: Record<string, any>;\n\t  responseType?: ResponseType;\n\t  axiosSettings?: Record<string, any>;\n\t}\n\texport class AchoClient {\n", "  private axios: AxiosStatic;\n\t  private baseUrl: string;\n\t  private authHeader: AuthHeader;\n\t  constructor(clientOpt: ClientOptions) {\n\t    this.axios = axios;\n\t    this.baseUrl = clientOpt.endpoint || process.env.ACHO_API_ENDPOINT || 'http://localhost:8888';\n\t    this.authHeader = { Authorization: `jwt ${clientOpt.apiToken || process.env.ACHO_TOKEN}` };\n\t  }\n\t  async request(options: RequestOptions) {\n\t    const { method, headers, path, payload, responseType, axiosSettings } = options;\n", "    try {\n\t      const url = this.baseUrl + path;\n\t      const config = {\n\t        method,\n\t        url,\n\t        responseType,\n\t        headers: {\n\t          ...headers,\n\t          ...this.authHeader\n\t        },\n", "        data: payload\n\t      };\n\t      if (axiosSettings) {\n\t        Object.assign(config, axiosSettings);\n\t        console.log(config);\n\t      }\n\t      const response = await this.axios(config).catch((error) => {\n\t        if (error.response) {\n\t          throw createHttpError(error.response.status, error.response.data);\n\t        } else if (error.request) {\n", "          throw createHttpError(400, error.request);\n\t        } else {\n\t          throw createHttpError(400, error.message);\n\t        }\n\t      });\n\t      if (response) {\n\t        const { data } = response;\n\t        return data;\n\t      }\n\t    } catch (error) {\n", "      console.log(error);\n\t      throw error;\n\t    }\n\t  }\n\t  httpRequest(options: RequestOptions) {\n\t    const { method, headers, path } = options;\n\t    const urlObj = url.parse(this.baseUrl);\n\t    const reqOptions = {\n\t      host: urlObj.hostname,\n\t      port: urlObj.port,\n", "      path,\n\t      method,\n\t      headers: {\n\t        ...headers,\n\t        ...this.authHeader\n\t      }\n\t    };\n\t    const req = request(reqOptions);\n\t    return req;\n\t  }\n", "}\n"]}
{"filename": "src/types/assets/resource.ts", "chunked_list": ["import { Readable } from 'stream';\n\texport interface ResourceHelperInfo {\n\t  resource: Object;\n\t  resourceTable: string;\n\t}\n\t// export class ResourceReadable extends Readable {\n\t//   fragment?: string;\n\t//   isRead?: boolean;\n\t// }\n\t/**\n", " * Resource response types\n\t */\n\texport interface ResourceTableDataResp {\n\t  data: Array<Object>;\n\t  schema: ResourceTableSchemaResp;\n\t  paging: {\n\t    page: number;\n\t    pageSize: number;\n\t    pageTotal: number;\n\t    pageToken?: string;\n", "  };\n\t  jobId?: string;\n\t}\n\texport interface ResourceTableSchemaResp {\n\t  fields: Record<string, string>[];\n\t}\n\t// TODO: add resource:sync response type\n\texport interface ResourceDownloadResp {\n\t  url: string;\n\t  archiveName: string;\n", "}\n"]}
{"filename": "src/types/assets/auth.ts", "chunked_list": ["export interface AuthHelperInfo {}\n\t/**\n\t * Auth list response types\n\t */\n\texport interface IOAuthClient {\n\t  id: string;\n\t  name: string;\n\t  auth_url: string;\n\t  access_token_url: string;\n\t  client_id: string;\n", "  client_secret: string;\n\t  redirect_uri: string;\n\t  response_type: string;\n\t  authorization_code: string;\n\t  creator_id: number;\n\t  team_id: number;\n\t  token_type: 'bearer';\n\t  access_token: string;\n\t  expires_in: number;\n\t  created_at: number;\n", "  grant_type: 'refresh_token' | 'authorization_code' | 'client_credentials';\n\t  refresh_token: string;\n\t  content_type: string;\n\t  scope: string;\n\t}\n"]}
{"filename": "src/types/assets/project.ts", "chunked_list": ["// TODO: Project type not in use, necessary?\n\texport interface Project {\n\t  type: string;\n\t  datasetId: string;\n\t  views: View[];\n\t}\n\t// TODO: View type not in use, necessary?\n\texport interface View {\n\t  type: string;\n\t  tableId: string;\n", "}\n\texport interface ProjectHelperInfo {}\n\texport interface ViewHelperInfo {\n\t  view: Object;\n\t}\n\texport interface ProjectTableDataResp {\n\t  data: Array<Object>;\n\t  schema: ProjectTableSchemaResp;\n\t  paging: {\n\t    page: number;\n", "    pageSize: number;\n\t    pageTotal: number;\n\t    pageToken?: string;\n\t  };\n\t  jobId?: string;\n\t}\n\texport interface ProjectTableSchemaResp {\n\t  fields: Record<string, string>[];\n\t}\n"]}
{"filename": "src/types/assets/index.ts", "chunked_list": ["import { ResourceHelperInfo } from './resource';\n\timport { ProjectHelperInfo, ViewHelperInfo } from './project';\n\texport * from './resource';\n\texport * from './project';\n\texport * from './auth';\n\texport interface ActionQuery {\n\t  query: string;\n\t  helperInfo: HelperInfo;\n\t}\n\texport interface HelperInfo {\n", "  resources: Array<ResourceHelperInfo>;\n\t  projects: Array<ProjectHelperInfo>;\n\t  views?: Array<ViewHelperInfo>;\n\t}\n"]}
