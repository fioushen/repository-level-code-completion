{"filename": "src/index.ts", "chunked_list": ["#!/usr/bin/env node\n\timport { Command } from 'commander'\n\timport { auth } from './commands/auth'\n\timport { hello } from './commands/hello'\n\timport { translate } from './commands/translate'\n\timport { generateTest } from './commands/generateTest'\n\tconst program = new Command()\n\tprogram.addCommand(auth)\n\tprogram.addCommand(hello)\n\tprogram.addCommand(translate)\n", "program.addCommand(generateTest)\n\tprogram.parse(process.argv)\n"]}
{"filename": "src/commands/generateTest/generateTestAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\n\timport { isAuthenticated } from '../../helpers/isAuthenticated'\n\timport fs from 'fs'\n\timport path from 'path'\n\timport {\n\t  extractCodeFromFile,\n\t  extractCodeFromString\n\t} from '../../helpers/extractCode'\n\timport { config } from '../../helpers/authSystem'\n\timport { openAIChat } from '../../helpers/openAIChat'\n", "import { red, yellow, green } from 'kleur/colors'\n\texport const generateTestAction = async (options: GeneralOptions) => {\n\t  const componentName = options[Object.keys(options)[0]]\n\t  const componentPath = options[Object.keys(options)[1]]\n\t  const testLibrary = options[Object.keys(options)[2]]\n\t  const componentExtension = path.extname(componentPath)\n\t  // verify authentication\n\t  const isAuth = await isAuthenticated()\n\t  if (!isAuth) return\n\t  if (!componentName || !componentPath) {\n", "    return console.log(\n\t      red(`\\nYou did not enter the expected component name or path!`),\n\t      yellow(\n\t        `\\n* use --component or -c to declare component name\\n* use --path or -p to declare component path\\nuse --library or -l to declare the desired test library`\n\t      )\n\t    )\n\t  }\n\t  // read the contents of the component file\n\t  const componentCode = extractCodeFromFile(componentPath)\n\t  if (!componentCode) {\n", "    return console.log(\n\t      red(`\\nI didn't find your component. Check the path and try again!`),\n\t      yellow(`\\nexample path: ./src/components/MyComponent/index.tsx`)\n\t    )\n\t  }\n\t  // generate test code\n\t  const params = {\n\t    text: `Create the code with test (containing all necessary imports) in ${\n\t      testLibrary ? testLibrary : 'Jest'\n\t    } in code form based on the following component:\\n${componentCode}`,\n", "    method: 'POST',\n\t    key: config.apiKey\n\t  }\n\t  const openAIChatResponse = await openAIChat(params)\n\t  const testCode = extractCodeFromString(openAIChatResponse.data)\n\t  if (!testCode) {\n\t    return console.log(\n\t      red(\n\t        `\\nUnable to generate a test. Check the component code and try again!`\n\t      )\n", "    )\n\t  }\n\t  // get component folder path\n\t  const componentFolderPath = componentPath.split('/').slice(0, -1).join('/')\n\t  // save the test code to a new file\n\t  const testFilePath = `${componentFolderPath}/${componentName}.test${componentExtension}`\n\t  fs.writeFileSync(testFilePath, testCode)\n\t  console.log(\n\t    green(`\\nTest generated successfully in: ${testFilePath}`),\n\t    yellow(\n", "      `\\nif you don't like the generated test, you can run the command again to generate another one over the previous one`\n\t    )\n\t  )\n\t}\n"]}
{"filename": "src/commands/generateTest/index.ts", "chunked_list": ["import { Command } from 'commander'\n\timport { generateTestAction } from './generateTestAction'\n\timport type { GeneralOptions } from '../../typings/General'\n\texport const generateTest = new Command()\n\t  .command('generate-test')\n\t  .description('enter the path of the component that will receive the test')\n\t  .option('-c, --component <string>', 'component name')\n\t  .option('-p, --path <path>', 'component path')\n\t  .option('-l, --library <string>', 'test library')\n\t  .action((options: GeneralOptions) => generateTestAction(options))\n"]}
{"filename": "src/commands/auth/authAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\n\timport { writeConfig } from '../../helpers/authSystem'\n\timport { openAIChat } from '../../helpers/openAIChat'\n\timport { red, yellow, green } from 'kleur/colors'\n\texport const authAction = async (options: GeneralOptions) => {\n\t  const key = options[Object.keys(options)[0]]\n\t  if (!key) {\n\t    return console.log(\n\t      red(`\\nYou have not entered the expected key!`),\n\t      yellow(`\\n* use the --key or -k option to declare your API key`)\n", "    )\n\t  }\n\t  const params = {\n\t    text: `Hello!`,\n\t    method: 'POST',\n\t    key\n\t  }\n\t  const openAIChatResponse = await openAIChat(params)\n\t  if (openAIChatResponse.error) {\n\t    return console.log(\n", "      red(\n\t        `\\nYour key is not valid!\\nPlease review your API key, or create a new one at: https://platform.openai.com/account/api-keys`\n\t      )\n\t    )\n\t  }\n\t  writeConfig({ apiKey: key })\n\t  console.log(\n\t    green(\n\t      `\\nYou have successfully authenticated!\\nSee more about Zonix Open Source CLI at: https://github.com/zonixlab/zonix`\n\t    )\n", "  )\n\t}\n"]}
{"filename": "src/commands/auth/index.ts", "chunked_list": ["import { Command } from 'commander'\n\timport { authAction } from './authAction'\n\timport type { GeneralOptions } from '../../typings/General'\n\texport const auth = new Command()\n\t  .command('auth')\n\t  .description('sign in with your OpenAI API key to authenticate')\n\t  .option('-k, --key <key>', 'your OpenAI API key')\n\t  .action((options: GeneralOptions) => authAction(options))\n"]}
{"filename": "src/commands/translate/index.ts", "chunked_list": ["import { Command } from 'commander'\n\timport { translateAction } from './translateAction'\n\timport type { GeneralOptions } from '../../typings/General'\n\texport const translate = new Command()\n\t  .command('translate')\n\t  .description('enter a text and the language you want to translate it into')\n\t  .option('-t, --text <string>', 'text to be translated')\n\t  .option('-l, --language <string>', 'language to translate the text')\n\t  .action((options: GeneralOptions) => translateAction(options))\n"]}
{"filename": "src/commands/translate/translateAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\n\timport { isAuthenticated } from '../../helpers/isAuthenticated'\n\timport { config } from '../../helpers/authSystem'\n\timport { openAIChat } from '../../helpers/openAIChat'\n\timport { red, yellow, green } from 'kleur/colors'\n\texport const translateAction = async (options: GeneralOptions) => {\n\t  const text = options[Object.keys(options)[0]]\n\t  const language = options[Object.keys(options)[1]]\n\t  // verify authentication\n\t  const isAuth = await isAuthenticated()\n", "  if (!isAuth) return\n\t  if (!text || !language) {\n\t    return console.log(\n\t      red(`\\nYou have not entered the expected text or language!`),\n\t      yellow(\n\t        `\\n* use --text or -t to declare the text to be translated\\n* use --language or -l to declare the language you want to translate`\n\t      )\n\t    )\n\t  }\n\t  const params = {\n", "    text: `Translate to ${language}: ${text}`,\n\t    method: 'POST',\n\t    key: config.apiKey\n\t  }\n\t  const openAIChatResponse = await openAIChat(params)\n\t  console.log(`\\n${green(openAIChatResponse.data)}`)\n\t}\n"]}
{"filename": "src/commands/hello/helloAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\n\timport { isAuthenticated } from '../../helpers/isAuthenticated'\n\timport { config } from '../../helpers/authSystem'\n\timport { openAIChat } from '../../helpers/openAIChat'\n\timport { yellow, green } from 'kleur/colors'\n\texport const helloAction = async (options: GeneralOptions) => {\n\t  const name = options[Object.keys(options)[0]]\n\t  if (!name) {\n\t    // verify authentication\n\t    const isAuth = await isAuthenticated()\n", "    if (!isAuth) return\n\t    const params = {\n\t      text: `Return me a random greeting from movies, cartoons or series`,\n\t      method: 'POST',\n\t      key: config.apiKey\n\t    }\n\t    const openAIChatResponse = await openAIChat(params)\n\t    return console.log(\n\t      green(`\\n${openAIChatResponse.data}`),\n\t      yellow(`\\nuse --name or -n to declare your name and get a greeting`)\n", "    )\n\t  }\n\t  console.log(green(`\\nHello, ${name}!`))\n\t}\n"]}
{"filename": "src/commands/hello/index.ts", "chunked_list": ["import { Command } from 'commander'\n\timport { helloAction } from './helloAction'\n\timport type { GeneralOptions } from '../../typings/General'\n\texport const hello = new Command()\n\t  .command('hello')\n\t  .description('enter your name to receive a greeting')\n\t  .option('-n, --name <string>', 'your name')\n\t  .action((options: GeneralOptions) => helloAction(options))\n"]}
{"filename": "src/helpers/authSystem.ts", "chunked_list": ["import path from 'path'\n\timport fs from 'fs'\n\timport globalDirs from 'global-dirs'\n\timport { red } from 'kleur/colors'\n\tinterface Config {\n\t  apiKey: string\n\t}\n\tconst readConfig = (): Config => {\n\t  try {\n\t    const packageDir = path.join(globalDirs.npm.packages, 'zonix')\n", "    const configPath = path.join(packageDir, 'config.json')\n\t    const data = fs.readFileSync(configPath, 'utf8')\n\t    return JSON.parse(data)\n\t  } catch {\n\t    return { apiKey: '' }\n\t  }\n\t}\n\tconst writeConfig = (config: Config) => {\n\t  try {\n\t    const packageDir = path.join(globalDirs.npm.packages, 'zonix')\n", "    const configPath = path.join(packageDir, 'config.json')\n\t    const configDir = path.dirname(configPath)\n\t    if (!fs.existsSync(configDir)) {\n\t      fs.mkdirSync(configDir, { recursive: true })\n\t    }\n\t    fs.writeFileSync(configPath, JSON.stringify(config))\n\t  } catch (error) {\n\t    console.log(red(`\\nFailed to write config file: ${error}`))\n\t  }\n\t}\n", "const config: Config = readConfig()\n\texport { config, writeConfig }\n"]}
{"filename": "src/helpers/extractCode.ts", "chunked_list": ["import fs from 'fs'\n\texport const extractCodeFromFile = (path: string) => {\n\t  try {\n\t    return fs.readFileSync(path, 'utf-8')\n\t  } catch {\n\t    return\n\t  }\n\t}\n\texport const extractCodeFromString = (string: string) => {\n\t  const start = string.indexOf('```')\n", "  if (start !== -1) {\n\t    const end = string.indexOf('```', start + 3)\n\t    if (end !== -1) {\n\t      return string.substring(start + 3, end)\n\t    }\n\t  } else {\n\t    const importIndex = string.indexOf('import')\n\t    if (importIndex < 0) {\n\t      return\n\t    }\n", "    const lastBracketIndex = string.lastIndexOf('}')\n\t    if (lastBracketIndex < 0) {\n\t      return\n\t    }\n\t    return string.substring(importIndex, lastBracketIndex + 1)\n\t  }\n\t}\n"]}
{"filename": "src/helpers/openAIChat.ts", "chunked_list": ["import axios, { AxiosError } from 'axios'\n\timport type { OpenAIChatProps } from '../typings/OpenAI'\n\texport const openAIChat = async ({ text, method, key }: OpenAIChatProps) => {\n\t  try {\n\t    const chatBody = {\n\t      model: 'gpt-3.5-turbo',\n\t      messages: [\n\t        {\n\t          role: 'user',\n\t          content: text\n", "        }\n\t      ]\n\t    }\n\t    const response = await axios(`https://api.openai.com/v1/chat/completions`, {\n\t      method,\n\t      headers: {\n\t        'Content-Type': 'application/json',\n\t        Authorization: `Bearer ${key}`\n\t      },\n\t      data: JSON.stringify(chatBody)\n", "    })\n\t    return {\n\t      data: response.data.choices[0].message.content\n\t    }\n\t  } catch (error) {\n\t    const axiosError = error as AxiosError\n\t    return {\n\t      error: axiosError.response?.statusText\n\t    }\n\t  }\n", "}\n"]}
{"filename": "src/helpers/isAuthenticated.ts", "chunked_list": ["import { config } from './authSystem'\n\timport { openAIChat } from './openAIChat'\n\timport { red, yellow } from 'kleur/colors'\n\texport const isAuthenticated = async () => {\n\t  const params = {\n\t    text: `Hello!`,\n\t    method: 'POST',\n\t    key: config.apiKey\n\t  }\n\t  const openAIChatResponse = await openAIChat(params)\n", "  if (openAIChatResponse.error) {\n\t    console.log(\n\t      red(\n\t        `\\n${\n\t          openAIChatResponse.error === 'Unauthorized'\n\t            ? `Authentication error in OpenAI!`\n\t            : `Error: ${openAIChatResponse.error}.`\n\t        }\\nPlease review your API key, or create a new one at: https://platform.openai.com/account/api-keys`\n\t      ),\n\t      yellow(\n", "        `\\n* use the auth command and the --key or -k option to declare your API key`\n\t      )\n\t    )\n\t    return false\n\t  } else {\n\t    return true\n\t  }\n\t}\n"]}
{"filename": "src/typings/General.ts", "chunked_list": ["export interface GeneralOptions {\n\t  [key: string]: string | number | any\n\t}\n"]}
{"filename": "src/typings/OpenAI.ts", "chunked_list": ["export interface OpenAIChatProps {\n\t  text: string\n\t  method: string\n\t  key: string\n\t}\n"]}
