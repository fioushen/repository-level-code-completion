{"filename": "test/test.ts", "chunked_list": ["import c from \"../src/utils/options\";\n\timport p from \"phin\";\n\tfor (const url of \n\t  [c.PORNHUB, c.XNXX, c.REDTUBE, c.XVIDEOS, c.XHAMSTER, c.YOUPORN]) {\n\t  p({ url }).then(res => {\n\t    if (res.statusCode !== 200) {\n\t      console.log(`${url} is not available, status code: ${res.statusCode}, check the sites or your own user-agent`);\n\t    }\n\t    else {\n\t      console.log(`${url} is available, can be scraped`);\n", "    }\n\t  });\n\t}"]}
{"filename": "test/mock.ts", "chunked_list": ["import p from \"phin\";\n\timport { load } from \"cheerio\";\n\tconst url = \"https://www.pornhub.com/view_video.php?viewkey=ph63c4e1dc48fe7\";\n\tasync function test() {\n\t  const res = await p({\n\t    url: url,\n\t    \"headers\": {\n\t      \"User-Agent\": process.env.USER_AGENT || \"lustpress/1.6.0 Node.js/16.9.1\",\n\t    },\n\t  });\n", "  const $ = load(res.body);\n\t  const title = $(\"meta[property='og:title']\").attr(\"content\");\n\t  console.log(title);\n\t  console.log(res.statusCode);\n\t}\n\ttest().catch(console.error);\n"]}
{"filename": "src/LustPress.ts", "chunked_list": ["import p, { IResponse } from \"phin\";\n\timport Keyv from \"keyv\";\n\timport pkg from \"../package.json\";\n\tconst keyv = new Keyv(process.env.REDIS_URL);\n\tkeyv.on(\"error\", err => console.log(\"Connection Error\", err));\n\tconst ttl = 1000 * 60 * 60 * Number(process.env.EXPIRE_CACHE);\n\tclass LustPress {\n\t  url: string;\n\t  useragent: string;\n\t  constructor() {\n", "    this.url = \"\";\n\t    this.useragent = `${pkg.name}/${pkg.version} Node.js/16.9.1`;\n\t  }\n\t  /**\n\t     * Fetch body from url and check if it's cached\n\t     * @param url url to fetch\n\t     * @returns Buffer \n\t     */\n\t  async fetchBody(url: string): Promise<Buffer> {\n\t    const cached = await keyv.get(url);\n", "    if (cached) {\n\t      console.log(\"Fetching from cache\");\n\t      return cached;\n\t    } else if (url.includes(\"/random\")) {\n\t      console.log(\"Random should not be cached\");\n\t      const res = await p({ \n\t        url: url,\n\t        \"headers\": {\n\t          \"User-Agent\": process.env.USER_AGENT || `${pkg.name}/${pkg.version} Node.js/16.9.1`,\n\t        }, \n", "        followRedirects: true\n\t      });\n\t      return res.body;\n\t    } else {\n\t      console.log(\"Fetching from source\");\n\t      url = url.replace(/\\/\\//g, \"/\");\n\t      const res = await p({ \n\t        url: url,\n\t        \"headers\": {\n\t          \"User-Agent\": process.env.USER_AGENT || `${pkg.name}/${pkg.version} Node.js/16.9.1`,\n", "        },\n\t        followRedirects: true\n\t      });\n\t      await keyv.set(url, res.body, ttl);\n\t      return res.body;\n\t    }\n\t  }\n\t  /**\n\t   * remove html tag and bunch of space\n\t   * @param str string to remove html tag\n", "   * @returns string\n\t   */\n\t  removeHtmlTag(str: string): string {\n\t    str = str.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n\t    str = str.replace(/\\s+/g, \"\");\n\t    return str;\n\t  }\n\t  /**\n\t   * remove html tag without space\n\t   * @param str string to remove html tag\n", "   * @returns string\n\t   */\n\t  removeHtmlTagWithoutSpace(str: string): string {\n\t    str = str.replace(/(\\r\\n|\\n|\\r|\\t)/gm, \"\");\n\t    str = str.replace(/\\\\/g, \"\");\n\t    str = str.replace(/\\s+/g, \" \");\n\t    return str.trim();\n\t  }\n\t  /**\n\t   * remove all single quote on array\n", "   * @param arr array to remove single quote\n\t   * @returns string[]\n\t   */\n\t  removeAllSingleQuoteOnArray(arr: string[]): string[] {\n\t    return arr.map((item) => item.replace(/'/g, \"\"));\n\t  }\n\t  /**\n\t   * time ago converter\n\t   * @param input date to convert\n\t   * @returns string\n", "   */\n\t  timeAgo(input: Date) {\n\t    const date = new Date(input);\n\t    const formatter: any = new Intl.RelativeTimeFormat(\"en\");\n\t    const ranges: { [key: string]: number } = {\n\t      years: 3600 * 24 * 365,\n\t      months: 3600 * 24 * 30,\n\t      weeks: 3600 * 24 * 7,\n\t      days: 3600 * 24,\n\t      hours: 3600,\n", "      minutes: 60,\n\t      seconds: 1\n\t    };\n\t    const secondsElapsed = (date.getTime() - Date.now()) / 1000;\n\t    for (const key in ranges) {\n\t      if (ranges[key] < Math.abs(secondsElapsed)) {\n\t        const delta = secondsElapsed / ranges[key];\n\t        return formatter.format(Math.round(delta), key);\n\t      }\n\t    }\n", "  }\n\t  /**\n\t   * convert seconds to minute\n\t   * @param seconds seconds to convert\n\t   * @returns string\n\t   */\n\t  secondToMinute(seconds: number): string {\n\t    const minutes = Math.floor(seconds / 60);\n\t    const second = seconds % 60;\n\t    return `${minutes}min, ${second}sec`;\n", "  }\n\t  /**\n\t   * get current process memory usage\n\t   * @returns object\n\t   */\n\t  currentProccess() {\n\t    const arr = [1, 2, 3, 4, 5, 6, 9, 7, 8, 9, 10];\n\t    arr.reverse();\n\t    const rss = process.memoryUsage().rss / 1024 / 1024;\n\t    const heap = process.memoryUsage().heapUsed / 1024 / 1024;\n", "    const heaptotal = process.memoryUsage().heapTotal / 1024 / 1024;\n\t    return {\n\t      rss: `${Math.round(rss * 100) / 100} MB`,\n\t      heap: `${Math.round(heap * 100) / 100}/${Math.round(heaptotal * 100) / 100} MB`\n\t    };\n\t  }\n\t  /**\n\t   * fetch this server location\n\t   * @returns <Promise<string>>\n\t   */\n", "  async getServer(): Promise<string> {\n\t    const raw = await p({ \n\t      \"url\": \"http://ip-api.com/json\", \n\t      \"parse\": \"json\" \n\t    }) as IResponse;\n\t    const data = raw.body as unknown as { country: string, regionName: string };\n\t    return `${data.country}, ${data.regionName}`;\n\t  }\n\t}\n\texport default LustPress;\n"]}
{"filename": "src/index.ts", "chunked_list": ["import \"dotenv/config\";\n\timport LustPress from \"./LustPress\";\n\timport express from \"express\";\n\timport { Request, Response, NextFunction } from \"express\";\n\timport scrapeRoutes from \"./router/endpoint\";\n\timport { slow, limiter } from \"./utils/limit-options\";\n\timport { logger } from \"./utils/logger\";\n\timport * as pkg from \"../package.json\";\n\tconst lust = new LustPress();\n\tconst app = express();\n", "app.get(\"/\", slow, limiter, async (req, res) => {\n\t  res.send({\n\t    success: true,\n\t    playground: \"https://sinkaroid.github.io/lustpress\",\n\t    endpoint: \"https://github.com/sinkaroid/lustpress/blob/master/README.md#routing\",\n\t    date: new Date().toLocaleString(),\n\t    rss: lust.currentProccess().rss,\n\t    heap: lust.currentProccess().heap,\n\t    server: await lust.getServer(),\n\t    version: `${pkg.version}`,\n", "  });\n\t  logger.info({\n\t    path: req.path,\n\t    method: req.method,\n\t    ip: req.ip,\n\t    useragent: req.get(\"User-Agent\")\n\t  });\n\t});\n\tapp.use(scrapeRoutes());\n\tapp.use((req: Request, res: Response, next: NextFunction) => {\n", "  res.status(404);\n\t  next(Error(`The page not found in path ${req.url} and method ${req.method}`));\n\t  logger.error({\n\t    path: req.url,\n\t    method: req.method,\n\t    ip: req.ip,\n\t    useragent: req.get(\"User-Agent\")\n\t  });\n\t});\n\tapp.use((error: any, res: Response) => {\n", "  res.status(500).json({\n\t    message: error.message,\n\t    stack: error.stack\n\t  });\n\t});\n\tapp.listen(process.env.PORT || 3000, () => console.log(`${pkg.name} is running on port ${process.env.PORT || 3000}`));"]}
{"filename": "src/interfaces.ts", "chunked_list": ["export interface IVideoData {\n\t    success: boolean;\n\t    data: {\n\t        title: string;\n\t        id: string;\n\t        image: string;\n\t        duration: string;\n\t        views: string;\n\t        rating: string;\n\t        uploaded: string;\n", "        upvoted: string | null;\n\t        downvoted: string | null;\n\t        models: string[];\n\t        tags: string[];\n\t    };\n\t    source: string; \n\t    assets: string[];\n\t}\n\texport interface ISearchVideoData {\n\t    success: boolean;\n", "    data: string[];\n\t    source: string;\n\t}\n\texport interface MaybeError {\n\t    message: string;\n\t}\n"]}
{"filename": "src/scraper/xvideos/xvideosSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class XvideosSearch {\n", "      search: object[];\n\t      constructor() {\n\t        const data = $(\"div.thumb-under\")\n\t          .map((i, el) => {\n\t            return {\n\t              title: $(el).find(\"a\").attr(\"title\"),\n\t              duration: $(el).find(\"span.duration\")\n\t                .map((i, el) => {\n\t                  return $(el).text();\n\t                }).get()[0],\n", "            };\n\t          }).get();\n\t        this.search = $(\"div.mozaique.cust-nb-cols\")\n\t          .find(\"div.thumb\")\n\t          .map((i, el) => {\n\t            return {\n\t              link: `${c.XVIDEOS}${$(el).find(\"a\").attr(\"href\")}` || \"None\",\n\t              id: $(el).find(\"a\").attr(\"href\") || \"None\",\n\t              image: $(el).find(\"img\").attr(\"data-src\") || \"None\",\n\t              title: data[i].title || \"None\",\n", "              duration: data[i].duration === data[i + 1]?.duration\n\t                ? \"\"\n\t                : data[i].duration || \"None\",\n\t              rating: null,\n\t              video: `${c.XVIDEOS}/embedframe/${$(el).find(\"img\").attr(\"data-videoid\")}`\n\t            };\n\t          }).get();\n\t        this.search = this.search.filter((el: any) => {\n\t          return !el.id.includes(\"THUMBNUM\");\n\t        });\n", "        this.search = this.search.filter((el: any) => {\n\t          return el.id.includes(\"/video\");\n\t        });\n\t      }\n\t    }\n\t    const xv = new XvideosSearch();\n\t    if (xv.search.length === 0) throw Error(\"No result found\");\n\t    const data = xv.search as unknown as string[];\n\t    const result: ISearchVideoData = {\n\t      success: true,\n", "      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xvideos/xvideosGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class Xvideos { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: string;\n\t      views: string;\n\t      rating: string;\n\t      publish: string;\n\t      upVote: string;\n\t      downVote: string;\n\t      video: string;\n", "      tags: string[];\n\t      models: string[];\n\t      thumbnail: string;\n\t      bigimg: string;\n\t      embed: string;\n\t      constructor() {\n\t        this.link = $(\"meta[property='og:url']\").attr(\"content\") || \"None\";\n\t        this.id = this.link.split(\"/\")[3] + \"/\" + this.link.split(\"/\")[4] || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n", "        this.duration = $(\"meta[property='og:duration']\").attr(\"content\") || \"0\";\n\t        this.views = $(\"div#v-views\").find(\"strong.mobile-hide\").text() || \"None\";\n\t        this.rating = $(\"span.rating-total-txt\").text() || \"None\";\n\t        this.publish = $(\"script[type='application/ld+json']\").text() || \"None\";\n\t        this.publish = this.publish\n\t          .split(\"uploadDate\")[1]\n\t          .split(\"}\")[0]\n\t          .split(\":\")[1]\n\t          .replace(/\"/g, \"\")\n\t          .replace(/,/g, \"\") || \"None\";\n", "        this.upVote = $(\"span.rating-good-nbr\").text() || \"None\";\n\t        this.downVote = $(\"span.rating-bad-nbr\").text() || \"None\";\n\t        const thumb = $(\"script\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get()\n\t          .filter((el) => el.includes(\"html5player.setThumbSlideBig\"))[0] || \"None\";\n\t        this.thumbnail = thumb.match(/html5player.setThumbSlideBig\\((.*?)\\)/)?.[1] || \"None\";\n\t        this.bigimg = thumb.match(/html5player.setThumbUrl169\\((.*?)\\)/)?.[1] || \"None\";\n\t        this.video = thumb.match(/html5player.setVideoUrlHigh\\((.*?)\\)/)?.[1] || \"None\";\n", "        this.tags = $(\"a.is-keyword.btn.btn-default\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.models = $(\"li.model\")\n\t          .map((i, el) => {\n\t            return $(el).find(\"a\").attr(\"href\") || \"None\";\n\t          }\n\t          ).get();\n\t        this.models = this.models.map((el) => el.split(\"/\")[2]);\n", "        this.embed = $(\"input#copy-video-embed\").attr(\"value\") || \"None\";\n\t        this.embed = this.embed.split(\"iframe\")[1].split(\" \")[1].replace(/src=/g, \"\").replace(/\"/g, \"\") || \"None\";\n\t      }\n\t    }\n\t    const xv = new Xvideos();\n\t    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(xv.title),\n\t        id: xv.id,\n", "        image: xv.image,\n\t        duration: lust.secondToMinute(Number(xv.duration)),\n\t        views: lust.removeHtmlTag(xv.views),\n\t        rating: xv.rating,\n\t        uploaded: xv.publish,\n\t        upvoted: xv.upVote,\n\t        downvoted: xv.downVote,\n\t        models: xv.models,\n\t        tags: xv.tags,\n\t      },\n", "      source: xv.link,\n\t      assets: lust.removeAllSingleQuoteOnArray([xv.embed, xv.thumbnail, xv.bigimg, xv.video])\n\t    };\n\t    return data;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xvideos/xvideosGetRelatedController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class XvideosSearch {\n", "      search: object[];\n\t      data: object;\n\t      constructor() {\n\t        this.search = $(\"div#video-player-bg\")\n\t          .map((i, el) => {\n\t            const script = $(el).find(\"script\").html();\n\t            const video_related = script?.split(\"var video_related=\")[1];\n\t            const badJson = video_related?.split(\"];\")[0] + \"]\";\n\t            const actualResult = JSON.parse(String(badJson));\n\t            const result = actualResult.map((el: any) => {\n", "              return {\n\t                link: `${c.XVIDEOS}${el.u}`,\n\t                id: el.u.slice(1, -1),\n\t                title: el.t,\n\t                image: el.i,\n\t                duration: el.d,\n\t                views: `${el.n}, ${el.r}`,\n\t                video: `${c.XVIDEOS}/embedframe/${el.id}`\n\t              };\n\t            });\n", "            return result;\n\t          }).get();\n\t      }\n\t    }\n\t    const x = new XvideosSearch();\n\t    if (x.search.length === 0) throw Error(\"No result found\");\n\t    const data = x.search as unknown as string[];\n\t    const result: ISearchVideoData = {\n\t      success: true,\n\t      data: data,\n", "      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/redtube/redtubeSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class RedTubeSearch {\n", "      views: string[];\n\t      search: object[];\n\t      data: object;\n\t      constructor() {\n\t        this.views = $(\"span.video_count\")\n\t          .map((i, el) => {\n\t            const views = $(el).text();\n\t            return views;\n\t          }).get();\n\t        this.search = $(\"a.video_link\")\n", "          .map((i, el) => {\n\t            const link = $(el).attr(\"href\");\n\t            const id = link?.split(\"/\")[1];\n\t            const title = $(el).find(\"img\").attr(\"alt\");\n\t            const image = $(el).find(\"img\").attr(\"data-src\");\n\t            const duration = $(el).find(\"span.duration\").text().split(\" \").map((el: string) => {\n\t              return el.replace(/[^0-9:]/g, \"\");\n\t            }).filter((el: string) => {\n\t              return el.includes(\":\");\n\t            }).join(\" \");\n", "            return {\n\t              link: `${c.REDTUBE}${link}`,\n\t              id: id,\n\t              title: title,\n\t              image: image,\n\t              duration: duration,\n\t              views: this.views[i],\n\t              video: `https://embed.redtube.com/?id=${id}`,\n\t            };\n\t          }).get();\n", "        this.data = this.search.filter((el: any) => {\n\t          return el.link.includes(\"javascript:void(0)\") === false && el.image?.startsWith(\"data:image\") === false;\n\t        });\n\t      }\n\t    }\n\t    const red = new RedTubeSearch();\n\t    if (red.search.length === 0) throw Error(\"No result found\");\n\t    const data = red.data as string[];\n\t    const result: ISearchVideoData = {\n\t      success: true,\n", "      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/redtube/redtubeGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class RedTube { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: string;\n\t      views: string;\n\t      rating: string;\n\t      publish: string;\n\t      upVote: string;\n\t      downVote: null;\n\t      video: string;\n", "      tags: string[];\n\t      models: string[];\n\t      constructor() {\n\t        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n\t        this.id = this.link.split(\"/\")[3] || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n\t        this.duration = $(\"meta[property='og:video:duration']\").attr(\"content\") || \"0\";\n\t        this.views = $(\"span.video_view_count\").text() || \"None\";\n\t        this.rating = $(\"div.rating_percent.js_rating_percent\").attr(\"data-percent\") + \"%\" || \"None\";\n", "        this.publish = $(\"span.video-infobox-date-added\").text().replace(\"Published on \", \"\") || \"None\";\n\t        this.upVote = this.rating;\n\t        this.downVote = null;\n\t        this.video = $(\"meta[name='twitter:player']\").attr(\"content\") || \"None\";\n\t        this.tags = $(\"a.item.video_carousel_item.video_carousel_category, a.item.video_carousel_item.video_carousel_tag\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n\t        this.models = $(\"div.pornstar-name.pornstarPopupWrapper\")\n", "          .find(\"a\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }\n\t          ).get();\n\t        this.models = this.models.map((el) => lust.removeHtmlTagWithoutSpace(el));\n\t        this.models = this.models.filter((el) => !el.includes(\"Subscribe\") && !el.includes(\"Rank\"))\n\t          .filter((el, i, arr) => arr.indexOf(el) === i);\n\t      }\n\t    }\n", "    const red = new RedTube();\n\t    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(red.title),\n\t        id: red.id,\n\t        image: red.image,\n\t        duration: lust.secondToMinute(Number(red.duration)),\n\t        views: red.views,\n\t        rating: red.rating,\n", "        uploaded: red.publish,\n\t        upvoted: red.upVote,\n\t        downvoted: red.downVote,\n\t        models: red.models,\n\t        tags: red.tags\n\t      },\n\t      source: red.link,\n\t      assets: [red.video, red.image]\n\t    };\n\t    return data;\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xnxx/xnxxGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class Xnxx { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: string;\n\t      views: string;\n\t      uploaded: string;\n\t      action: string[];\n\t      upVote: string;\n\t      downVote: string;\n\t      favVote: string;\n", "      tags: string[];\n\t      models: string[];\n\t      thumbnail: string;\n\t      bigimg: string;\n\t      video: string;\n\t      embed: string;\n\t      constructor() {\n\t        const thumb = $(\"script\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n", "          }).get()\n\t          .filter((el) => el.includes(\"html5player.setThumbSlideBig\"))[0] || \"None\";\n\t        this.thumbnail = thumb.match(/html5player.setThumbSlideBig\\((.*?)\\)/)?.[1] || \"None\";\n\t        this.bigimg = thumb.match(/html5player.setThumbUrl169\\((.*?)\\)/)?.[1] || \"None\";\n\t        this.video = thumb.match(/html5player.setVideoUrlHigh\\((.*?)\\)/)?.[1] || \"None\";\n\t        this.link = $(\"meta[property='og:url']\").attr(\"content\") || \"None\";\n\t        this.id = this.link.split(\".com/\")[1] || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n\t        this.duration = $(\"meta[property='og:duration']\").attr(\"content\") || \"None\";\n", "        this.views = $(\"span.metadata\").text() || \"None\";\n\t        this.views = this.views.split(\"-\")[2] || \"None\";\n\t        this.uploaded = $(\"script[type='application/ld+json']\").text() || \"None\";\n\t        this.uploaded = this.uploaded\n\t          .split(\"uploadDate\")[1]\n\t          .split(\"}\")[0]\n\t          .split(\":\")[1]\n\t          .replace(/\"/g, \"\")\n\t          .replace(/,/g, \"\") || \"None\";\n\t        this.action = $(\"span.vote-actions\")\n", "          .find(\"span.value\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.upVote = this.action[0] || \"None\";\n\t        this.downVote = this.action[1] || \"None\";\n\t        this.favVote = $(\"span.rating-box.value\").text() || \"None\";\n\t        this.models = $(\"a.is-pornstar\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n", "          }).get();\n\t        this.tags = $(\"div.metadata-row.video-tags\")\n\t          .find(\"a\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.embed = $(\"input#copy-video-embed\").attr(\"value\") || \"None\";\n\t        this.embed = this.embed.split(\"iframe\")[1].split(\" \")[1].replace(/src=/g, \"\").replace(/\"/g, \"\") || \"None\";\n\t      }\n\t    }\n", "    const x = new Xnxx();\n\t    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(x.title),\n\t        id: x.id,\n\t        image: x.image,\n\t        duration: lust.secondToMinute(Number(x.duration)),\n\t        views: lust.removeHtmlTag(x.views),\n\t        rating: x.favVote,\n", "        uploaded: x.uploaded.trim(),\n\t        upvoted: x.upVote,\n\t        downvoted: x.downVote,\n\t        models: x.models,\n\t        tags: x.tags.filter((el) => el !== \"Edit tags and models\")\n\t      },\n\t      source: x.link,\n\t      assets: lust.removeAllSingleQuoteOnArray([x.embed, x.thumbnail, x.bigimg, x.video])\n\t    };\n\t    return data;\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xnxx/xnxxGetRelatedController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class PornhubSearch {\n", "      search: object[];\n\t      data: object;\n\t      constructor() {\n\t        // in <div id=\"video-player-bg\"> get <script>var video_related=\n\t        this.search = $(\"div#video-player-bg\")\n\t          .map((i, el) => {\n\t            const script = $(el).find(\"script\").html();\n\t            const video_related = script?.split(\"var video_related=\")[1];\n\t            //stop and replace everything after the last ];\n\t            const badJson = video_related?.split(\"];\")[0] + \"]\";\n", "            const actualResult = JSON.parse(String(badJson));\n\t            //console.log(actualResult);\n\t            const result = actualResult.map((el: any) => {\n\t              return {\n\t                link: `${c.XNXX}${el.u}`,\n\t                id: el.u.slice(1, -1),\n\t                title: el.t,\n\t                image: el.i,\n\t                duration: el.d,\n\t                views: `${el.n}, ${el.r}`,\n", "                video: `${c.XNXX}/embedframe/${el.id}`\n\t              };\n\t            });\n\t            return result;\n\t          }).get();\n\t      }\n\t    }\n\t    const x = new PornhubSearch();\n\t    if (x.search.length === 0) throw Error(\"No result found\");\n\t    const data = x.search as unknown as string[];\n", "    const result: ISearchVideoData = {\n\t      success: true,\n\t      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n", "}"]}
{"filename": "src/scraper/xnxx/xnxxSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class PornhubSearch {\n", "      search: object[];\n\t      constructor() {\n\t        this.search = $(\"div.mozaique > div\")\n\t          .map((i, el) => {\n\t            return {\n\t              link: `${c.XNXX}${$(el).find(\"a\").attr(\"href\")}`,\n\t              // remove first \"/\" and last \"/\"\n\t              id: $(el).find(\"a\").attr(\"href\")?.slice(1, -1),\n\t              title: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n\t                .map((el) => el.trim()).filter((el) => el !== \"\")[0],\n", "              image: $(el).find(\"img\").attr(\"data-src\"),\n\t              duration: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n\t                .map((el) => el.trim()).filter((el) => el !== \"\")[2],\n\t              rating: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n\t                .map((el) => el.trim()).filter((el) => el !== \"\")[1],\n\t              video: `${c.XNXX}/embedframe/${$(el).find(\"img\").attr(\"data-videoid\")}`\n\t            };\n\t          }).get();\n\t      }\n\t    }\n", "    const x = new PornhubSearch();\n\t    if (x.search.length === 0) throw Error(\"No result found\");\n\t    const data = x.search as unknown as string[];\n\t    const result: ISearchVideoData = {\n\t      success: true,\n\t      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n", "    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/youporn/youpornGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class YouPorn { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: string;\n\t      views: string;\n\t      rating: string;\n\t      publish: string;\n\t      upVote: string;\n\t      downVote: string;\n\t      video: string;\n", "      tags: string[];\n\t      models: string[];\n\t      constructor() {\n\t        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n\t        this.id = this.link.replace(\"https://www.youporn.com/watch/\", \"\") || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n\t        this.duration = $(\"meta[property='video:duration']\").attr(\"content\") || \"0\";\n\t        this.views = $(\"div.feature.infoValueBlock\").find(\"div[data-value]\").attr(\"data-value\") || \"0\";\n\t        this.rating = $(\"div.feature\").find(\"span\").text().replace(/[^0-9.,%]/g, \"\") || \"0\";\n", "        this.publish = $(\"div.video-uploaded\").find(\"span\").text() || \"None\";\n\t        this.upVote = this.views;\n\t        this.downVote = \"None\";\n\t        this.video = `https://www.youporn.com/embed/${this.id}`;\n\t        this.tags = $(\"a[data-espnode='category_tag'], a[data-espnode='porntag_tag']\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.models = $(\"a[data-espnode='pornstar_tag']\")\n\t          .map((i, el) => {\n", "            return $(el).text();\n\t          }).get();       \n\t      }\n\t    }\n\t    const yp = new YouPorn();\n\t    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(yp.title),\n\t        id: yp.id,\n", "        image: yp.image,\n\t        duration: lust.secondToMinute(Number(yp.duration)),\n\t        views: yp.views,\n\t        rating: yp.rating,\n\t        uploaded: yp.publish,\n\t        upvoted: yp.upVote,\n\t        downvoted: yp.downVote,\n\t        models: yp.models,\n\t        tags: yp.tags\n\t      },\n", "      source: yp.link,\n\t      assets: [yp.video, yp.image]\n\t    };\n\t    return data;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/youporn/youpornSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class YouPornSearch {\n", "      dur: string[];\n\t      search: object[];\n\t      constructor() {\n\t        this.dur = $(\"div.video-duration\").map((i, el) => {\n\t          return $(el).text();\n\t        }).get();\n\t        this.search = $(\"a[href^='/watch/']\")\n\t          .map((i, el) => {\n\t            const link = $(el).attr(\"href\");\n\t            const id = `${link}`.split(\"/\")[2] + \"/\" + `${link}`.split(\"/\")[3];\n", "            const title = $(el).find(\"div.video-box-title\").text();\n\t            const image = $(el).find(\"img\").attr(\"data-thumbnail\");\n\t            return {\n\t              link: `${c.YOUPORN}${link}`,\n\t              id: id,\n\t              title: lust.removeHtmlTagWithoutSpace(title),\n\t              image: image,\n\t              duration: this.dur[i],\n\t              views: \"None\",\n\t              video: `https://www.youporn.com/embed/${id}`,\n", "            };\n\t          }).get();\n\t      }\n\t    }\n\t    const yp = new YouPornSearch();\n\t    if (yp.search.length === 0) throw Error(\"No result found\");\n\t    const data = yp.search as unknown as string[];\n\t    const result: ISearchVideoData = {\n\t      success: true,\n\t      data: data,\n", "      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xhamster/xhamsterGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class Xhamster { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: any;\n\t      views: string;\n\t      rating: string;\n\t      publish: string;\n\t      upVote: string;\n\t      downVote: string;\n\t      video: string;\n", "      tags: string[];\n\t      models: string[];\n\t      constructor() {\n\t        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n\t        this.id = this.link.split(\"/\")[3] + \"/\" + this.link.split(\"/\")[4] || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\"; \n\t        this.duration = $(\"script#initials-script\").html() || \"None\";\n\t        //remove window.initials={ and };\n\t        this.duration = this.duration.replace(\"window.initials=\", \"\");\n", "        this.duration = this.duration.replace(/;/g, \"\");\n\t        this.duration = JSON.parse(this.duration);\n\t        this.duration = this.duration.videoModel.duration || \"None\";\n\t        this.views = $(\"div.header-icons\").find(\"span\").first().text() || \"None\";\n\t        this.rating = $(\"div.header-icons\").find(\"span\").eq(1).text() || \"None\";\n\t        this.publish = $(\"div.entity-info-container__date\").attr(\"data-tooltip\") || \"None\";\n\t        this.upVote = $(\"div.rb-new__info\").text().split(\"/\")[0].trim() || \"None\";\n\t        this.downVote = $(\"div.rb-new__info\").text().split(\"/\")[1].trim() || \"None\";\n\t        this.video = \"https://xheve2.com/embed/\" + this.link.split(\"-\").pop() || \"None\";\n\t        this.tags = $(\"a.video-tag\")\n", "          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n\t        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n\t        this.models = $(\"a.video-tag\")\n\t          .map((i, el) => {\n\t            return $(el).attr(\"href\");\n\t          }\n\t          ).get();\n\t        this.models = this.models.filter((el) => el.startsWith(\"https://xheve2.com/pornstars/\"));\n", "        this.models = this.models.map((el) => el.replace(\"https://xheve2.com/pornstars/\", \"\"));\n\t      }\n\t    }\n\t    const xh = new Xhamster();\n\t    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(xh.title),\n\t        id: xh.id,\n\t        image: xh.image,\n", "        duration: lust.secondToMinute(Number(xh.duration)),\n\t        views: xh.views,\n\t        rating: xh.rating,\n\t        uploaded: xh.publish,\n\t        upvoted: xh.upVote,\n\t        downvoted: xh.downVote,\n\t        models: xh.models,\n\t        tags: xh.tags\n\t      },\n\t      source: xh.link,\n", "      assets: [xh.video, xh.image]\n\t    };\n\t    return data;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/xhamster/xhamsterSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class XhamsterSearch {\n", "      search: any;\n\t      constructor() {\n\t        const views = $(\"div.video-thumb-views\")\n\t          .map((i, el) => {\n\t            const views = $(el).text();\n\t            return views;\n\t          }).get();\n\t        const duration = $(\"span[data-role='video-duration']\")\n\t          .map((i, el) => {\n\t            const duration = $(el).text();\n", "            return duration;\n\t          }).get();\n\t        this.search = $(\"a.video-thumb__image-container\")\n\t          .map((i, el) => {\n\t            const link = $(el).attr(\"href\");\n\t            return {\n\t              link: `${link}`,\n\t              id: link?.split(\"/\")[3] + \"/\" + link?.split(\"/\")[4],\n\t              title: $(el).find(\"img\").attr(\"alt\"),\n\t              image: $(el).find(\"img\").attr(\"src\"),\n", "              duration: duration[i],\n\t              views: views[i],\n\t              video: `${c.XHAMSTER}/embed/${link?.split(\"-\").pop()}`\n\t            };\n\t          }).get();    \n\t      }\n\t    }\n\t    const xh = new XhamsterSearch();\n\t    if (xh.search.length === 0) throw Error(\"No result found\");\n\t    const data = xh.search as unknown as string[];\n", "    const result: ISearchVideoData = {\n\t      success: true,\n\t      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n", "}"]}
{"filename": "src/scraper/pornhub/pornhubGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport { IVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const resolve = await lust.fetchBody(url);\n\t    const $ = load(resolve);\n\t    class PornHub { \n\t      link: string;\n", "      id: string;\n\t      title: string;\n\t      image: string;\n\t      duration: string;\n\t      views: string;\n\t      rating: string;\n\t      videoInfo: string;\n\t      upVote: string;\n\t      downVote: string;\n\t      video: string;\n", "      tags: string[];\n\t      models: string[];\n\t      constructor() {\n\t        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n\t        this.id = this.link.split(\"=\")[1] || \"None\";\n\t        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n\t        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n\t        //get <meta property=\"video:duration\" content=\"\n\t        this.duration = $(\"meta[property='video:duration']\").attr(\"content\") || \"0\";\n\t        this.views = $(\"div.views > span.count\").text() || \"None\";\n", "        this.rating = $(\"div.ratingPercent > span.percent\").text() || \"None\";\n\t        this.videoInfo = $(\"div.videoInfo\").text() || \"None\";\n\t        this.upVote = $(\"span.votesUp\").attr(\"data-rating\") || \"None\";\n\t        this.downVote = $(\"span.votesDown\").attr(\"data-rating\") || \"None\";\n\t        this.video = $(\"meta[property='og:video:url']\").attr(\"content\") || \"None\";\n\t        this.tags = $(\"div.video-info-row\")\n\t          .find(\"a\")\n\t          .map((i, el) => {\n\t            return $(el).text();\n\t          }).get();\n", "        this.tags.shift();\n\t        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n\t        this.models = $(\"div.pornstarsWrapper.js-pornstarsWrapper\")\n\t          .find(\"a\")\n\t          .map((i, el) => {\n\t            return $(el).attr(\"data-mxptext\");\n\t          }).get();\n\t      }\n\t    }\n\t    const ph = new PornHub();\n", "    const data: IVideoData = {\n\t      success: true,\n\t      data: {\n\t        title: lust.removeHtmlTagWithoutSpace(ph.title),\n\t        id: ph.id,\n\t        image: ph.image,\n\t        duration: lust.secondToMinute(Number(ph.duration)),\n\t        views: ph.views,\n\t        rating: ph.rating,\n\t        uploaded: ph.videoInfo,\n", "        upvoted: ph.upVote,\n\t        downvoted: ph.downVote,\n\t        models: ph.models,\n\t        tags: ph.tags.filter((el) => el !== \"Suggest\" && el !== \" Suggest\")\n\t      },\n\t      source: ph.link,\n\t      assets: [ph.video, ph.image]\n\t    };\n\t    return data;\n\t  } catch (err) {\n", "    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/scraper/pornhub/pornhubSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\timport c from \"../../utils/options\";\n\timport { ISearchVideoData } from \"../../interfaces\";\n\tconst lust = new LustPress();\n\texport async function scrapeContent(url: string) {\n\t  try {\n\t    const res = await lust.fetchBody(url);\n\t    const $ = load(res);\n\t    class PornhubSearch {\n", "      search: object[];\n\t      data: object;\n\t      constructor() {\n\t        this.search = $(\"div.wrap\")\n\t          .map((i, el) => {\n\t            const link = $(el).find(\"a\").attr(\"href\");\n\t            const id = link?.split(\"=\")[1];\n\t            const title = $(el).find(\"a\").attr(\"title\");\n\t            const image = $(el).find(\"img\").attr(\"src\");\n\t            const duration = $(el).find(\"var.duration\").text();\n", "            const views = $(el).find(\"div.videoDetailsBlock\").find(\"span.views\").text();\n\t            return {\n\t              link: `${c.PORNHUB}${link}`,\n\t              id: id,\n\t              title: title,\n\t              image: image,\n\t              duration: duration,\n\t              views: views,\n\t              video: `${c.PORNHUB}/embed/${id}`,\n\t            };\n", "          }).get();\n\t        this.data = this.search.filter((el: any) => {\n\t          return el.link.includes(\"javascript:void(0)\") === false && el.image?.startsWith(\"data:image\") === false;\n\t        });\n\t      }\n\t    }\n\t    const ph = new PornhubSearch();\n\t    if (ph.search.length === 0) throw Error(\"No result found\");\n\t    const data = ph.data as string[];\n\t    const result: ISearchVideoData = {\n", "      success: true,\n\t      data: data,\n\t      source: url,\n\t    };\n\t    return result;\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    throw Error(e.message);\n\t  }\n\t}"]}
{"filename": "src/utils/modifier.ts", "chunked_list": ["/**\n\t * Auto space on url\n\t * @param str the string to be spaced\n\t * @returns string\n\t */\n\texport function spacer(str: string) {\n\t  return str.replace(/\\s/g, \"+\");\n\t}\n\t/**\n\t * Error handler\n", " * @param success when success is false, it will return error\n\t * @param message error message\n\t * @returns object\n\t */\n\texport function maybeError(success: boolean, message: string) {\n\t  return { success, message };\n\t}\n\texport function timeAgo(input: Date) {\n\t  const date = new Date(input);\n\t  const formatter: any = new Intl.RelativeTimeFormat(\"en\");\n", "  const ranges: { [key: string]: number } = {\n\t    years: 3600 * 24 * 365,\n\t    months: 3600 * 24 * 30,\n\t    weeks: 3600 * 24 * 7,\n\t    days: 3600 * 24,\n\t    hours: 3600,\n\t    minutes: 60,\n\t    seconds: 1\n\t  };\n\t  const secondsElapsed = (date.getTime() - Date.now()) / 1000;\n", "  for (const key in ranges) {\n\t    if (ranges[key] < Math.abs(secondsElapsed)) {\n\t      const delta = secondsElapsed / ranges[key];\n\t      return formatter.format(Math.round(delta), key);\n\t    }\n\t  }\n\t}"]}
{"filename": "src/utils/options.ts", "chunked_list": ["export default {\n\t  PORNHUB: \"https://www.pornhub.com\",\n\t  XNXX: \"https://www.xnxx.com\",\n\t  REDTUBE: \"https://www.redtube.com\",\n\t  XVIDEOS: \"https://www.xvideos.com\",\n\t  XHAMSTER: \"https://xheve2.com\",\n\t  YOUPORN: \"https://www.youporn.com\",\n\t  JAVHD: \"https://javhd.today\"\n\t};"]}
{"filename": "src/utils/logger.ts", "chunked_list": ["import pino from \"pino\";\n\texport const logger = pino({\n\t  level: \"info\",\n\t  transport: {\n\t    target: \"pino-pretty\"\n\t  },\n\t});"]}
{"filename": "src/utils/limit-options.ts", "chunked_list": ["import rateLimit from \"express-rate-limit\";\n\timport slowDown from \"express-slow-down\";\n\tconst limiter = rateLimit({\n\t  windowMs: 15 * 60 * 1000,\n\t  max: 50,\n\t  message: \"Too nasty, please slow down\"\n\t});\n\tconst slow = slowDown({\n\t  delayAfter: 50,\n\t  windowMs: 15 * 60 * 1000,\n", "  delayMs: 1000,\n\t  maxDelayMs: 20000,\n\t});\n\texport { limiter, slow };"]}
{"filename": "src/controller/xvideos/xvideosGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getXvideos(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xvideos/get?id=:id Get xvideos\n\t     * @apiName Get xvideos\n\t     * @apiGroup xvideos\n\t     * @apiDescription Get a xvideos video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XVIDEOS}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/xvideos/xvideosGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetRelatedController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedXvideos(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xvideos/get?id=:id Get related xvideos\n\t     * @apiName Get related xvideos\n\t     * @apiGroup xvideos\n\t     * @apiDescription Get a xvideos video based on related id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XVIDEOS}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/xvideos/xvideosSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function searchXvideos(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /xvideos/search Search xvideos videos\n\t     * @apiName Search xvideos\n", "     * @apiGroup xvideos\n\t     * @apiDescription Search xvideos videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=0] Page number\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n", "     * curl -i https://lust.scathach.id/xvideos/search?key=milf\n\t     * curl -i https://lust.scathach.id/xvideos/search?key=milf&page=2\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xvideos/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xvideos/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 0;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n", "    const url = `${c.XVIDEOS}/?k=${spacer(key)}&p=${page}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}"]}
{"filename": "src/controller/xvideos/xvideosRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\timport { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\tconst lust = new LustPress();\n\texport async function randomXvideos(req: Request, res: Response) {\n\t  try {\n", "    /**\n\t     * @api {get} /xvideos/random Get random xvideos\n\t     * @apiName Get random xvideos\n\t     * @apiGroup xvideos\n\t     * @apiDescription Get a random xvideos video\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n", "     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xvideos/random\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xvideos/random\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xvideos/random\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const resolve = await lust.fetchBody(c.XVIDEOS);\n\t    const $ = load(resolve);\n\t    const search = $(\"div.thumb-under\")\n\t      .find(\"a\")\n", "      .map((i, el) => $(el).attr(\"href\"))\n\t      .get();\n\t    const filtered = search.filter((el) => el.includes(\"/video\"));\n\t    const filtered_ = filtered.filter((el) => !el.includes(\"THUMBNUM\"));\n\t    const random = Math.floor(Math.random() * filtered_.length);\n\t    const url = c.XVIDEOS + filtered[random];\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n", "      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/redtube/redtubeGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedRedtube(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /redtube/get?id=:id Get redtube related videos\n\t     * @apiName Get redtube related videos\n", "     * @apiGroup redtube\n\t     * @apiDescription Get a related redtube videos based on id\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/redtube/get?id=41698751\n\t     * \n", "     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/redtube/get?id=41698751\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n", "     *  async with session.get(\"https://lust.scathach.id/redtube/get?id=41698751\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(id))) throw Error(\"Parameter id must be a number\");\n\t    const url = `${c.REDTUBE}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n", "      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n", "}"]}
{"filename": "src/controller/redtube/redtubeSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function searchRedtube(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /redtube/search Search redtube videos\n\t     * @apiName Search redtube\n", "     * @apiGroup redtube\n\t     * @apiDescription Search redtube videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=1] Page number\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n", "     * curl -i https://lust.scathach.id/redtube/search?key=milf\n\t     * curl -i https://lust.scathach.id/redtube/search?key=milf&page=2\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/redtube/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/redtube/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 1;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n", "    const url = `${c.REDTUBE}/?search=${spacer(key)}&page=${page}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}"]}
{"filename": "src/controller/redtube/redtubeGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getRedtube(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    if (isNaN(Number(id))) throw Error(\"Parameter id must be a number\");\n", "    /**\n\t     * @api {get} /redtube/get?id=:id Get Redtube\n\t     * @apiName Get redtube\n\t     * @apiGroup redtube\n\t     * @apiDescription Get a redtube video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n", "     *   HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/redtube/get?id=42763661\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/redtube/get?id=42763661\")\n\t     * .then(res => console.log(res.data))\n", "     * .catch(err => console.error(err))\n\t     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/redtube/get?id=42763661\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.REDTUBE}/${id}`;\n\t    const data = await scrapeContent(url);\n", "    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n", "    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/redtube/redtubeRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\timport { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\tconst lust = new LustPress();\n\texport async function randomRedtube(req: Request, res: Response) {\n\t  try {\n", "    /**\n\t     * @api {get} /redtube/random Get random redtube\n\t     * @apiName Get random redtube\n\t     * @apiGroup redtube\n\t     * @apiDescription Get a random redtube video\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n", "     *   HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/redtube/random\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/redtube/random\")\n\t     * .then(res => console.log(res.data))\n", "     * .catch(err => console.error(err))\n\t     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/redtube/random\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const resolve = await lust.fetchBody(c.REDTUBE);\n\t    const $ = load(resolve);\n", "    const search = $(\"a.video_link\")\n\t      .map((i, el) => {\n\t        return $(el).attr(\"href\");\n\t      }).get();\n\t    const random = Math.floor(Math.random() * search.length);\n\t    const url = c.REDTUBE + search[random];\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n", "      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/xnxx/xnxxSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function searchXnxx(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /xnxx/search Search xnxx videos\n\t     * @apiName Search xnxx\n", "     * @apiGroup xnxx\n\t     * @apiDescription Search xnxx videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=0] Page number\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n", "     * curl -i https://lust.scathach.id/xnxx/search?key=milf\n\t     * curl -i https://lust.scathach.id/xnxx/search?key=milf&page=2\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xnxx/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xnxx/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 0;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n", "    const url = `${c.XNXX}/search/${spacer(key)}/${page}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}"]}
{"filename": "src/controller/xnxx/xnxxRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\timport { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\tconst lust = new LustPress();\n\texport async function randomXnxx(req: Request, res: Response) {\n\t  try {\n", "    /**\n\t     * @api {get} /xnxx/random Get random xnxx\n\t     * @apiName Get random xnxx\n\t     * @apiGroup xnxx\n\t     * @apiDescription Get a random xnxx video\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n", "     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xnxx/random\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xnxx/random\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xnxx/random\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const resolve = await lust.fetchBody(\"https://www.xnxx.com/search/random/random\");\n\t    const $ = load(resolve);\n\t    const search = $(\"div.mozaique > div\")\n\t      .map((i, el) => {\n", "        return $(el).find(\"a\").attr(\"href\");\n\t      }).get();\n\t    const random = Math.floor(Math.random() * search.length);\n\t    const url = c.XNXX + search[random];\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n", "      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/xnxx/xnxxGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetRelatedController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedXnxx(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xnxx/get?id=:id Get related xnxx\n\t     * @apiName Get related xnxx\n\t     * @apiGroup xnxx\n\t     * @apiDescription Get a xnxx video based on related id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XNXX}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/xnxx/xnxxGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getXnxx(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xnxx/get?id=:id Get xnxx\n\t     * @apiName Get xnxx\n\t     * @apiGroup xnxx\n\t     * @apiDescription Get a xnxx video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XNXX}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/youporn/youpornSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function searchYouporn(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /youporn/search Search youporn videos\n\t     * @apiName Search youporn\n", "     * @apiGroup youporn\n\t     * @apiDescription Search youporn videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=1] Page number\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n", "     * curl -i https://lust.scathach.id/youporn/search?key=milf\n\t     * curl -i https://lust.scathach.id/youporn/search?key=milf&page=2\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/youporn/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/youporn/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 1;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n", "    const url = `${c.YOUPORN}/search/?query=${spacer(key)}&page=${page}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}"]}
{"filename": "src/controller/youporn/youpornGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getYouporn(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /youporn/get?id=:id Get youporn\n\t     * @apiName Get youporn\n\t     * @apiGroup youporn\n\t     * @apiDescription Get a youporn video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.YOUPORN}/watch/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/youporn/youpornRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\timport { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\tconst lust = new LustPress();\n\texport async function randomYouporn(req: Request, res: Response) {\n\t  try {\n", "    /**\n\t     * @api {get} /youporn/random Get random youporn\n\t     * @apiName Get random youporn\n\t     * @apiGroup youporn\n\t     * @apiDescription Get a random youporn video\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n", "     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/youporn/random\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/youporn/random\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/youporn/random\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const resolve = await lust.fetchBody(`${c.YOUPORN}`);\n\t    const $ = load(resolve);\n\t    const search = $(\"a[href^='/watch/']\")\n\t      .map((i, el) => {\n", "        return $(el).attr(\"href\");\n\t      }).get();\n\t    const random = Math.floor(Math.random() * search.length);\n\t    const url = c.YOUPORN + search[random];\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n", "      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/youporn/youpornGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedYouporn(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /youporn/get?id=:id Get related youporn\n\t     * @apiName Get related youporn\n\t     * @apiGroup youporn\n\t     * @apiDescription Get a youporn video based on related id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.YOUPORN}/watch/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/xhamster/xhamsterGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getXhamster(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xhamster/get?id=:id Get xhamster\n\t     * @apiName Get xhamster\n\t     * @apiGroup xhamster\n\t     * @apiDescription Get a xhamster video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XHAMSTER}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/xhamster/xhamsterRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\timport { load } from \"cheerio\";\n\timport LustPress from \"../../LustPress\";\n\tconst lust = new LustPress();\n\texport async function randomXhamster(req: Request, res: Response) {\n\t  try {\n", "    /**\n\t     * @api {get} /xhamster/random Get random xhamster\n\t     * @apiName Get random xhamster\n\t     * @apiGroup xhamster\n\t     * @apiDescription Get a random xhamster video\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n", "     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xhamster/random\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xhamster/random\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xhamster/random\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const resolve = await lust.fetchBody(`${c.XHAMSTER}/newest`);\n\t    const $ = load(resolve);\n\t    const search = $(\"a.root-9d8b4.video-thumb-info__name.role-pop.with-dropdown\")\n\t      .map((i, el) => $(el).attr(\"href\"))\n", "      .get();\n\t    const search_ = search.map((el) => el.replace(c.XHAMSTER, \"\"));\n\t    const random = Math.floor(Math.random() * search_.length);\n\t    const url = c.XHAMSTER + search_[random];\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n", "      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/xhamster/xhamsterSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function searchXhamster(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /xhamster/search Search xhamster videos\n\t     * @apiName Search xhamster\n", "     * @apiGroup xhamster\n\t     * @apiDescription Search xhamster videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=1] Page number\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n", "     * curl -i https://lust.scathach.id/xhamster/search?key=milf\n\t     * curl -i https://lust.scathach.id/xhamster/search?key=milf&page=2\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xhamster/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n", "     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xhamster/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 1;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n", "    const url = `${c.XHAMSTER}/search/${spacer(key)}?page=${page}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n", "  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}"]}
{"filename": "src/controller/xhamster/xhamsterGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedXhamster(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /xhamster/get?id=:id Get related xhamster\n\t     * @apiName Get related xhamster\n\t     * @apiGroup xhamster\n\t     * @apiDescription Get a xhamster video based on related id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.XHAMSTER}/${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/pornhub/pornhubGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function getPornhub(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /pornhub/get?id=:id Get Pornhub\n\t     * @apiName Get pornhub\n\t     * @apiGroup pornhub\n\t     * @apiDescription Get a pornhub video based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.PORNHUB}/view_video.php?viewkey=${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/controller/pornhub/pornhubSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError, spacer } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\tconst sorting = [\"mr\", \"mv\", \"tr\", \"lg\"];\n\texport async function searchPornhub(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /pornhub/search Search pornhub videos\n", "     * @apiName Search pornhub\n\t     * @apiGroup pornhub\n\t     * @apiDescription Search pornhub videos\n\t     * @apiParam {String} key Keyword to search\n\t     * @apiParam {Number} [page=1] Page number\n\t     * @apiParam {String} [sort=mr] Sort by \n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *    HTTP/1.1 200 OK\n\t     *    HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/pornhub/search?key=milf\n\t     * curl -i https://lust.scathach.id/pornhub/search?key=milf&page=2&sort=mr\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/pornhub/search?key=milf\")\n\t     * .then(res => console.log(res.data))\n", "     * .catch(err => console.error(err))\n\t     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/pornhub/search?key=milf\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const key = req.query.key as string;\n\t    const page = req.query.page || 1;\n", "    const sort = req.query.sort as string;\n\t    if (!key) throw Error(\"Parameter key is required\");\n\t    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\t    let url;\n\t    if (!sort) url = `${c.PORNHUB}/video/search?search=${spacer(key)}`;\n\t    else if (!sorting.includes(sort)) url = `${c.PORNHUB}/video/search?search=${spacer(key)}&page=${page}`;\n\t    else url = `${c.PORNHUB}/video/search?search=${spacer(key)}&o=${sort}&page=${page}`;\n\t    console.log(url);\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}"]}
{"filename": "src/controller/pornhub/pornhubRandom.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { scrapeContent } from \"../../scraper/pornhub/pornhubGetController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\texport async function randomPornhub(req: Request, res: Response) {\n\t  try {\n\t    /**\n\t     * @api {get} /pornhub/random Random pornhub video\n\t     * @apiName Random pornhub\n", "     * @apiGroup pornhub\n\t     * @apiDescription Gets random pornhub video\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n\t     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/pornhub/random\n\t     * \n", "     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/pornhub/random\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n\t     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n", "     *  async with session.get(\"https://lust.scathach.id/pornhub/random\") as resp:\n\t     *    print(await resp.json())\n\t     * \n\t     */\n\t    const url = `${c.PORNHUB}/video/random`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n\t      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n", "      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n\t  }\n\t}\n"]}
{"filename": "src/controller/pornhub/pornhubGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubSearchController\";\n\timport c from \"../../utils/options\";\n\timport { logger } from \"../../utils/logger\";\n\timport { maybeError } from \"../../utils/modifier\";\n\timport { Request, Response } from \"express\";\n\texport async function relatedPornhub(req: Request, res: Response) {\n\t  try {\n\t    const id = req.query.id as string;\n\t    if (!id) throw Error(\"Parameter id is required\");\n\t    /**\n", "     * @api {get} /pornhub/get?id=:id Get Pornhub related videos\n\t     * @apiName Get pornhub related videos\n\t     * @apiGroup pornhub\n\t     * @apiDescription Get a related pornhub videos based on id\n\t     * \n\t     * @apiParam {String} id Video ID\n\t     * \n\t     * @apiSuccessExample {json} Success-Response:\n\t     *   HTTP/1.1 200 OK\n\t     *   HTTP/1.1 400 Bad Request\n", "     * \n\t     * @apiExample {curl} curl\n\t     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n\t     * \n\t     * @apiExample {js} JS/TS\n\t     * import axios from \"axios\"\n\t     * \n\t     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n\t     * .then(res => console.log(res.data))\n\t     * .catch(err => console.error(err))\n", "     * \n\t     * @apiExample {python} Python\n\t     * import aiohttp\n\t     * async with aiohttp.ClientSession() as session:\n\t     *  async with session.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\") as resp:\n\t     *    print(await resp.json())\n\t     */\n\t    const url = `${c.PORNHUB}/view_video.php?viewkey=${id}`;\n\t    const data = await scrapeContent(url);\n\t    logger.info({\n", "      path: req.path,\n\t      query: req.query,\n\t      method: req.method,\n\t      ip: req.ip,\n\t      useragent: req.get(\"User-Agent\")\n\t    });\n\t    return res.json(data);\n\t  } catch (err) {\n\t    const e = err as Error;\n\t    res.status(400).json(maybeError(false, e.message));\n", "  }\n\t}\n"]}
{"filename": "src/router/endpoint.ts", "chunked_list": ["import cors from \"cors\";\n\timport { Router } from \"express\";\n\timport { slow, limiter } from \"../utils/limit-options\";\n\t// PornHub\n\timport { getPornhub } from \"../controller/pornhub/pornhubGet\";\n\timport { searchPornhub } from \"../controller/pornhub/pornhubSearch\";\n\timport { randomPornhub } from \"../controller/pornhub/pornhubRandom\";\n\timport { relatedPornhub } from \"../controller/pornhub/pornhubGetRelated\";\n\t// XNXX\n\timport { getXnxx } from \"../controller/xnxx/xnxxGet\";\n", "import { searchXnxx } from \"../controller/xnxx/xnxxSearch\";\n\timport { relatedXnxx } from \"../controller/xnxx/xnxxGetRelated\";\n\timport { randomXnxx } from \"../controller/xnxx/xnxxRandom\";\n\t// RedTube\n\timport { getRedtube } from \"../controller/redtube/redtubeGet\";\n\timport { searchRedtube } from \"../controller/redtube/redtubeSearch\";\n\timport { relatedRedtube } from \"../controller/redtube/redtubeGetRelated\";\n\timport { randomRedtube } from \"../controller/redtube/redtubeRandom\";\n\t// Xvideos\n\timport { getXvideos } from \"../controller/xvideos/xvideosGet\";\n", "import { searchXvideos } from \"../controller/xvideos/xvideosSearch\";\n\timport { randomXvideos } from \"../controller/xvideos/xvideosRandom\";\n\timport { relatedXvideos } from \"../controller/xvideos/xvideosGetRelated\";\n\t// Xhamster\n\timport { getXhamster } from \"../controller/xhamster/xhamsterGet\";\n\timport { searchXhamster } from \"../controller/xhamster/xhamsterSearch\";\n\timport { randomXhamster } from \"../controller/xhamster/xhamsterRandom\";\n\timport { relatedXhamster } from \"../controller/xhamster/xhamsterGetRelated\";\n\t// YouPorn\n\timport { getYouporn } from \"../controller/youporn/youpornGet\";\n", "import { searchYouporn } from \"../controller/youporn/youpornSearch\";\n\timport { relatedYouporn } from \"../controller/youporn/youpornGetRelated\";\n\timport { randomYouporn } from \"../controller/youporn/youpornRandom\";\n\tfunction scrapeRoutes() {\n\t  const router = Router();\n\t  router.get(\"/pornhub/get\", cors(), slow, limiter, getPornhub);\n\t  router.get(\"/pornhub/search\", cors(), slow, limiter, searchPornhub);\n\t  router.get(\"/pornhub/random\", cors(), slow, limiter, randomPornhub);\n\t  router.get(\"/pornhub/related\", cors(), slow, limiter, relatedPornhub);\n\t  router.get(\"/xnxx/get\", cors(), slow, limiter, getXnxx);\n", "  router.get(\"/xnxx/search\", cors(), slow, limiter, searchXnxx);\n\t  router.get(\"/xnxx/related\", cors(), slow, limiter, relatedXnxx);\n\t  router.get(\"/xnxx/random\", cors(), slow, limiter, randomXnxx);\n\t  router.get(\"/redtube/get\", cors(), slow, limiter, getRedtube);\n\t  router.get(\"/redtube/search\", cors(), slow, limiter, searchRedtube);\n\t  router.get(\"/redtube/related\", cors(), slow, limiter, relatedRedtube);\n\t  router.get(\"/redtube/random\", cors(), slow, limiter, randomRedtube);\n\t  router.get(\"/xvideos/get\", cors(), slow, limiter, getXvideos);\n\t  router.get(\"/xvideos/search\", cors(), slow, limiter, searchXvideos);\n\t  router.get(\"/xvideos/random\", cors(), slow, limiter, randomXvideos);\n", "  router.get(\"/xvideos/related\", cors(), slow, limiter, relatedXvideos);\n\t  router.get(\"/xhamster/get\", cors(), slow, limiter, getXhamster);\n\t  router.get(\"/xhamster/search\", cors(), slow, limiter, searchXhamster);\n\t  router.get(\"/xhamster/random\", cors(), slow, limiter, randomXhamster);\n\t  router.get(\"/xhamster/related\", cors(), slow, limiter, relatedXhamster);\n\t  router.get(\"/youporn/get\", cors(), slow, limiter, getYouporn);\n\t  router.get(\"/youporn/search\", cors(), slow, limiter, searchYouporn);\n\t  router.get(\"/youporn/related\", cors(), slow, limiter, relatedYouporn);\n\t  router.get(\"/youporn/random\", cors(), slow, limiter, randomYouporn);\n\t  return router;\n", "}\n\texport default scrapeRoutes;"]}
