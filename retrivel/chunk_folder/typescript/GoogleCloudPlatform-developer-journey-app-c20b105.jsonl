{"filename": "playwright.config.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { defineConfig, devices } from '@playwright/test';\n\t/**\n\t * Read environment variables from file.\n\t * https://github.com/motdotla/dotenv\n\t */\n", "// require('dotenv').config();\n\t/**\n\t * See https://playwright.dev/docs/test-configuration.\n\t */\n\texport default defineConfig({\n\t  testDir: './tests',\n\t  /* Maximum time one test can run for. */\n\t  timeout: 30 * 1000,\n\t  expect: {\n\t    /**\n", "     * Maximum time expect() should wait for the condition to be met.\n\t     * For example in `await expect(locator).toHaveText();`\n\t     */\n\t    timeout: 5 * 1000\n\t  },\n\t  /* Run tests in files in parallel */\n\t  fullyParallel: true,\n\t  /* Fail the build on CI if you accidentally left test.only in the source code. */\n\t  forbidOnly: !!process.env.CI,\n\t  /* Retry on CI only */\n", "  retries: process.env.CI ? 2 : 0,\n\t  /* Opt out of parallel tests on CI. */\n\t  workers: process.env.CI ? 1 : undefined,\n\t  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n\t  reporter: 'html',\n\t  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n\t  use: {\n\t    /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */\n\t    actionTimeout: 0,\n\t    /* Base URL to use in actions like `await page.goto('/')`. */\n", "    // baseURL: 'http://localhost:3000',\n\t    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n\t    trace: 'on-first-retry',\n\t  },\n\t  /* Configure projects for major browsers */\n\t  projects: [\n\t    // Setup Auth\n\t    { name: 'setup', testMatch: /.*\\.setup\\.ts/ },\n\t    {\n\t      name: 'chromium',\n", "      use: {\n\t        ...devices['Desktop Chrome'],\n\t        storageState: 'playwright/.auth/user.json',\n\t      },\n\t      testMatch: /tests.*.ts/,\n\t      dependencies: ['setup'],\n\t    },\n\t    /*\n\t    {\n\t      name: 'firefox',\n", "      use: { ...devices['Desktop Firefox'] },\n\t    },\n\t    {\n\t      name: 'webkit',\n\t      use: { ...devices['Desktop Safari'] },\n\t    },\n\t    */\n\t    /* Test against mobile viewports. */\n\t    // {\n\t    //   name: 'Mobile Chrome',\n", "    //   use: { ...devices['Pixel 5'] },\n\t    // },\n\t    // {\n\t    //   name: 'Mobile Safari',\n\t    //   use: { ...devices['iPhone 12'] },\n\t    // },\n\t    /* Test against branded browsers. */\n\t    // {\n\t    //   name: 'Microsoft Edge',\n\t    //   use: { channel: 'msedge' },\n", "    // },\n\t    // {\n\t    //   name: 'Google Chrome',\n\t    //   use: { channel: 'chrome' },\n\t    // },\n\t  ],\n\t  /* Folder for test artifacts such as screenshots, videos, traces, etc. */\n\t  // outputDir: 'test-results/',\n\t  /* Run your local dev server before starting the tests */\n\t  webServer: {\n", "    command: 'npm run dev',\n\t    port: 3000,\n\t  },\n\t});\n"]}
{"filename": "scripts/seed.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\texport {}\n"]}
{"filename": "tests/auth.setup.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t// auth.setup.ts\n\timport { test as setup } from '@playwright/test';\n\tconst authFile = 'playwright/.auth/user.json';\n\tsetup('authenticate', async ({ page }) => {\n\t  // Perform authentication steps. Replace these actions with your own.\n", "  await page.goto('http://localhost:3000/api/auth/signin?callbackUrl=http%3A%2F%2Flocalhost%3A3000%2F');\n\t  const emailInput = await page.getByRole('textbox', { name: /Username/ })\n\t  await emailInput.fill('CI User');\n\t  const signInButton = await page.getByRole('button', { name: 'Sign in with Credentials' })\n\t  await signInButton.click();\n\t  await page.context().storageState({ path: authFile });\n\t});\n"]}
{"filename": "tests/playthrough.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { test, expect } from '@playwright/test';\n\ttest('has title', async ({ page }) => {\n\t  await page.goto('http://localhost:3000');\n\t  // Expected title\n\t  await expect(page).toHaveTitle(/Developer Journey/);\n", "  // Displays link to Home tab\n\t  const homeLink = await page.getByRole('link', { name: 'Home' })\n\t  await expect(homeLink).toBeVisible();\n\t  // Should show up Player Username\n\t  const playerName = page.getByText('CI User').nth(1);\n\t  expect(playerName).toBeVisible();\n\t  // Moves the player to the first tile\n\t  const upBtn = await page.getByRole('button', { name: 'Move player up' });\n\t  await upBtn.click();\n\t  await upBtn.click();\n", "  // Validates that the user is now positioned on first tile\n\t  const firstTile = await page.locator('.bg-slate-200').first()\n\t  const player = await firstTile.getByTestId('usericon');\n\t  await expect(player).toBeVisible();\n\t});\n"]}
{"filename": "src/middleware.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\texport {default} from \"next-auth/middleware\"\n\texport const config = { matcher: [\"/demo/page-secured-client-side\"] }\n"]}
{"filename": "src/pages/api/fscheck.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport type { NextApiRequest, NextApiResponse } from 'next'\n\timport { Database } from \"../../lib/database\";\n\texport default async function handler(\n\t  req: NextApiRequest,\n\t  res: NextApiResponse,\n", ") {\n\t  const fs = new Database();\n\t  let isConnected = await fs.isConnected();\n\t  let statusCode = isConnected ? 200 : 503;\n\t  res.status(statusCode).end();\n\t}\n"]}
{"filename": "src/pages/api/hello.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\n\timport type { NextApiRequest, NextApiResponse } from 'next'\n\ttype Data = {\n\t  name: string\n\t}\n", "export default function handler(\n\t  req: NextApiRequest,\n\t  res: NextApiResponse<Data>\n\t) {\n\t  res.status(200).json({ name: 'John Doe' })\n\t}\n"]}
{"filename": "src/pages/api/user.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport type { NextApiRequest, NextApiResponse } from 'next'\n\timport { Database } from \"../../lib/database\";\n\timport { User } from 'src/models/User';\n\timport { getSession } from 'next-auth/react';\n\texport default async function handler(\n", "  req: NextApiRequest,\n\t  res: NextApiResponse<User>\n\t) {\n\t  const fs = new Database();\n\t  const session = await getSession({ req });\n\t  const username = session?.user?.name || '';\n\t  if (!username) {\n\t    return res.status(200).send({ username, completedMissions: [] });\n\t  }\n\t  if (req.method === 'POST') {\n", "    const missionId = req.body.id;\n\t    await fs.addCompletedMission({ username, missionId })\n\t  }\n\t  const user = await fs.getUser({ username });\n\t  res.status(200).json(user)\n\t}\n"]}
{"filename": "src/pages/api/auth/[...nextauth].ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport NextAuth, {AuthOptions} from \"next-auth\";\n\timport CredentialsProvider from \"next-auth/providers/credentials\";\n\texport const authOptions: AuthOptions = {\n\t  providers: [\n\t    CredentialsProvider({\n", "      credentials: {\n\t        username: {label: \"Username\", type: \"text\", placeholder: \"Username\"},\n\t      },\n\t      async authorize(credentials) {\n\t        if (!credentials || credentials.username.length < 1) {\n\t          // Display an  error will be displayed advising the user to check\n\t          // their details.\n\t          return null;\n\t        }\n\t        const username = credentials.username;\n", "        const user = { id: username, name: username };\n\t        if (user) {\n\t          return user;\n\t        } else {\n\t          // Display an  error will be displayed advising the user to check\n\t          // their details.\n\t          return null;\n\t          // Or reject this callback with an Error to send the user to the error\n\t          // page with the error message as a query parameter\n\t        }\n", "      }\n\t    }),\n\t  ],\n\t};\n\texport default NextAuth(authOptions);\n"]}
{"filename": "src/lib/database.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { Firestore } from \"@google-cloud/firestore\";\n\timport { User } from \"src/models/User\";\n\texport class Database {\n\t  private db: Firestore;\n\t  constructor() {\n", "    if (process.env.NODE_ENV === 'development') {\n\t      // use the firestore emulator\n\t      this.db = new Firestore({\n\t        host: \"localhost:9999\",\n\t        projectId: \"demo-test\",\n\t        ssl: false,\n\t      });\n\t    } else {\n\t      // use the PROJECT_ID environment variable\n\t      const projectId = process.env.PROJECT_ID;\n", "      if (!projectId) {\n\t        const errMessage = \"PROJECT_ID environment variable must be defined.\";\n\t        console.error(errMessage);\n\t        throw new Error(errMessage);\n\t      }\n\t      this.db = new Firestore({\n\t        projectId: projectId,\n\t      });\n\t    }\n\t  }\n", "  async setUser({ username, completedMissions }: { username: string, completedMissions?: string[] }): Promise<any> {\n\t    const userDoc = this.db.collection('users').doc(username);\n\t    return userDoc.set({\n\t      username,\n\t      completedMissions: completedMissions || [],\n\t    }, { merge: true });\n\t  }\n\t  async getUser({ username }: { username: string }): Promise<User> {\n\t    const userDoc = this.db.collection('users').doc(username);\n\t    const snapshot = await userDoc.get();\n", "    const completedMissions = snapshot.data()?.completedMissions || [];\n\t    return { username, completedMissions }\n\t  }\n\t  async addCompletedMission({ username, missionId }: { username: string, missionId: string }): Promise<any> {\n\t    const { completedMissions } = await this.getUser({ username });\n\t    const updatedMissions = [...completedMissions, missionId]\n\t    return this.setUser({\n\t      username,\n\t      completedMissions: updatedMissions,\n\t    });\n", "  }\n\t  /**\n\t   * Returns true if able to connect to the Firestore instance.\n\t   * The Firestore API times out a request after 60 seconds. This method\n\t   * implements a configurable override that defaults to 5 seconds, but there's\n\t   * no point in setting it higher than 60 seconds.\n\t   * @param timeout seconds\n\t   */\n\t  async isConnected(timeout: number = 5): Promise<boolean> {\n\t    try {\n", "      timeout = Math.min(timeout, 60) * 1000;\n\t      // eslint-disable-next-line no-undef\n\t      let timerId: NodeJS.Timeout;\n\t      const timer = new Promise<boolean>((resolve) => {\n\t        timerId = setTimeout(() => resolve(false), timeout);\n\t      });\n\t      // TODO: research if there's a lighter weight way to status a connection.\n\t      const connectionCheck = this.db.listCollections();\n\t      return Promise.race([connectionCheck, timer]).then(result => {\n\t        clearTimeout(timerId);\n", "        return !!result;\n\t      });\n\t    } catch (err) {\n\t      // GoogleError: Total timeout of API google.firestore.v1.Firestore\n\t      // exceeded 60000 milliseconds before any response was received.\n\t      return false;\n\t    }\n\t  }\n\t}\n"]}
{"filename": "src/lib/__test__/database.test.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport {Firestore} from \"@google-cloud/firestore\";\n\timport {Database} from \"../database\";\n\tconst directDatabaseConnectionForTestReset = new Firestore({\n\t  projectId: \"birds-of-paradise\",\n\t});\n", "describe(\"database tests\", () => {\n\t  let fs: Database;\n\t  beforeAll(async () => {\n\t    process.env = {...process.env, NODE_ENV: 'development'}\n\t    await directDatabaseConnectionForTestReset.collection('users').doc('Bob').delete()\n\t    fs = new Database();\n\t  })\n\t  it(\"should add and get a user\", async () => {\n\t    await fs.setUser({username: 'Bob'});\n\t    const user = await fs.getUser({username: 'Bob'});\n", "    expect(user).toEqual({ username: \"Bob\", completedMissions: [] });\n\t  });\n\t  it(\"should add completed missions\", async () => {\n\t    await fs.setUser({username: 'Bob'});\n\t    await fs.addCompletedMission({username: 'Bob', missionId: 'Mission0001aweifjwek'});\n\t    const firstUserResponse = await fs.getUser({username: 'Bob'});\n\t    expect(firstUserResponse).toEqual({\n\t      \"username\": \"Bob\",\n\t      completedMissions: ['Mission0001aweifjwek']\n\t    });\n", "    await fs.addCompletedMission({username: 'Bob', missionId: 'Mission0002aweifjwek'});\n\t    const secondUserResponse = await fs.getUser({username: 'Bob'});\n\t    expect(secondUserResponse).toEqual({\n\t      \"username\": \"Bob\",\n\t      completedMissions: ['Mission0001aweifjwek', 'Mission0002aweifjwek']\n\t    });\n\t  });\n\t});\n"]}
{"filename": "src/models/Mission.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { LearningResource } from \"./LearningResource\";\n\texport class Mission {\n\t  id!: string;\n\t  title!: string;\n\t  technologies!: string[];\n", "  learningResources!: LearningResource[];\n\t}\n"]}
{"filename": "src/models/LearningResource.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\texport class LearningResource {\n\t  title!: string;\n\t  link!: string;\n\t}\n"]}
{"filename": "src/models/InventoryItem.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { GridPosition } from \"./GridPosition\";\n\texport class InventoryItem {\n\t  title!: string;\n\t  position!: GridPosition;\n\t  status!:  \"COLLECTED\" | \"NOT_COLLECTED\";\n", "}\n"]}
{"filename": "src/models/GridPosition.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\texport class GridPosition {\n\t  x!: number;\n\t  y!: number;\n\t}\n"]}
{"filename": "src/models/User.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\texport class User {\n\t  username!: string;\n\t  completedMissions!: string[];\n\t}\n"]}
{"filename": "src/redux/gameSlice.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\timport { Mission } from 'src/models/Mission'\n\timport { missions } from 'src/initialData.ts/missions';\n\timport { GridPosition } from 'src/models/GridPosition';\n\timport { InventoryItem } from 'src/models/InventoryItem';\n", "// Define the initial state using that type\n\tconst initialState: {\n\t  mission: Mission,\n\t  playerPosition: GridPosition,\n\t  inventory: InventoryItem[],\n\t  allItemsCollected: boolean,\n\t  isSavingMission: boolean,\n\t} = {\n\t  mission: missions[0],\n\t  playerPosition: { x: 0, y: 0 },\n", "  inventory: [],\n\t  allItemsCollected: false,\n\t  isSavingMission: false,\n\t};\n\tconst legalInventoryGridPositions = [\n\t  { x: 0, y: 1 },\n\t  { x: 0, y: 2 },\n\t  { x: 1, y: 0 },\n\t  { x: 1, y: 1 },\n\t  { x: 1, y: 2 },\n", "  { x: 2, y: 0 },\n\t  { x: 2, y: 1 },\n\t];\n\texport const gameSlice = createSlice({\n\t  name: 'game',\n\t  initialState,\n\t  reducers: {\n\t    startMission: (state, action: PayloadAction<{ mission?: Mission, nextMission?: boolean } | undefined>) => {\n\t      const nextMission = action.payload?.nextMission;\n\t      // if no mission provided, restart this mission\n", "      let mission = action.payload?.mission || state.mission;\n\t      // increment to next mission if requested\n\t      if (nextMission) {\n\t        let newIndex: number = missions.findIndex(mission => mission.id === state.mission.id) + 1;\n\t        if (newIndex < missions.length) {\n\t          mission = missions[newIndex];\n\t        } else {\n\t          mission = missions[0];\n\t        }\n\t      }\n", "      // prevent moving items and player if mission hasn't changed\n\t      let inventory = state.inventory;\n\t      const stateMissionId = state.mission.id.toString();\n\t      const missionId = mission.id.toString();\n\t      const sameMission = stateMissionId === missionId;\n\t      let playerPosition = state.playerPosition;\n\t      if (!sameMission || state.inventory.length < 1) {\n\t        playerPosition = { x: 0, y: 0 }\n\t        const arrayLength = legalInventoryGridPositions.length;\n\t        const shuffledArray = legalInventoryGridPositions.sort(() => 0.5 - Math.random());\n", "        inventory = mission.technologies.map((technology, index) => {\n\t          return ({\n\t            position: shuffledArray[index % arrayLength],\n\t            status: 'NOT_COLLECTED',\n\t            title: technology,\n\t          })\n\t        })\n\t      }\n\t      return {\n\t        mission,\n", "        playerPosition,\n\t        inventory,\n\t        allItemsCollected: false,\n\t        isSavingMission: false,\n\t      }\n\t    },\n\t    moveUp: state => {\n\t      if (state.playerPosition.y < 2 && !state.isSavingMission) state.playerPosition.y += 1\n\t    },\n\t    moveDown: state => {\n", "      if (state.playerPosition.y > 0 && !state.isSavingMission) state.playerPosition.y -= 1\n\t    },\n\t    moveLeft: state => {\n\t      if (state.playerPosition.x > 0 && !state.isSavingMission) state.playerPosition.x -= 1\n\t    },\n\t    moveRight: state => {\n\t      if (state.playerPosition.x < 2 && !state.isSavingMission) state.playerPosition.x += 1\n\t    },\n\t    collectItem: (state) => {\n\t      const itemIndex = state.inventory.findIndex(item => {\n", "        const isCorrectXPosition = item.position.x === state.playerPosition.x;\n\t        const isCorrectYPosition = item.position.y === state.playerPosition.y;\n\t        const isNotCollected = item.status === 'NOT_COLLECTED';\n\t        return isCorrectXPosition && isCorrectYPosition && isNotCollected;\n\t      });\n\t      state.inventory[itemIndex] = {\n\t        ...state.inventory[itemIndex],\n\t        status: 'COLLECTED',\n\t      }\n\t      state.allItemsCollected = state.inventory.length > 0 && state.inventory.every(item => item.status === 'COLLECTED');\n", "    },\n\t    setIsSavingMission: (state, action: PayloadAction<boolean>) => {\n\t      state.isSavingMission = action.payload;\n\t    },\n\t  }\n\t})\n\t// Action creators are generated for each case reducer function\n\texport const { startMission, moveUp, moveDown, moveLeft, moveRight, collectItem, setIsSavingMission } = gameSlice.actions\n\texport default gameSlice.reducer"]}
{"filename": "src/redux/hooks.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\timport type { RootState, AppDispatch } from './store'\n\t// Use throughout your app instead of plain `useDispatch` and `useSelector`\n\texport const useAppDispatch: () => AppDispatch = useDispatch\n\texport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector"]}
{"filename": "src/redux/store.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { configureStore } from '@reduxjs/toolkit'\n\timport gameReducer from './gameSlice'\n\timport { apiSlice } from 'src/redux/apiSlice';\n\texport const store = configureStore({\n\t  reducer: {\n", "    game: gameReducer,\n\t    [apiSlice.reducerPath]: apiSlice.reducer,\n\t  },\n\t  middleware: getDefaultMiddleware =>\n\t    getDefaultMiddleware().concat(apiSlice.middleware)\n\t})\n\t// Infer the `RootState` and `AppDispatch` types from the store itself\n\texport type RootState = ReturnType<typeof store.getState>\n\texport type AppDispatch = typeof store.dispatch\n"]}
{"filename": "src/redux/inventorySlice.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { createSlice } from '@reduxjs/toolkit'\n\t// Define the initial state using that type\n\tconst initialState: string[] = []\n\texport const inventorySlice = createSlice({\n\t  name: 'inventory',\n", "  initialState,\n\t  reducers: {\n\t  }\n\t})\n\texport default inventorySlice.reducer\n"]}
{"filename": "src/redux/apiSlice.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t// Import the RTK Query methods from the React-specific entry point\n\timport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\timport { Mission } from 'src/models/Mission'\n\timport { User } from 'src/models/User'\n\timport { startMission } from './gameSlice';\n", "// Define our single API slice object\n\texport const apiSlice = createApi({\n\t  // The cache reducer expects to be added at `state.api` (already default - this is optional)\n\t  reducerPath: 'api',\n\t  // All of our requests will have URLs starting with '/api'\n\t  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n\t  tagTypes: ['User'],\n\t  // The \"endpoints\" represent operations and requests for this server\n\t  endpoints: builder => ({\n\t    // The `getUser` endpoint is a \"query\" operation that returns data\n", "    getUser: builder.query<User, void>({\n\t      // The URL for the request is '/api/user', this is a GET request\n\t      query: () => '/user',\n\t      onCacheEntryAdded: (_, { dispatch }) => { \n\t        dispatch(startMission())\n\t      },\n\t      providesTags: ['User'],\n\t    }),\n\t    addCompletedMission: builder.mutation({\n\t      // The URL for the request is '/api/user', this is a POST request\n", "      query: ({mission}: {mission: Mission}) => ({\n\t        url: '/user',\n\t        method: 'POST',\n\t        // Include the entire post object as the body of the request\n\t        body: mission,\n\t      }),\n\t      invalidatesTags: ['User']\n\t    }),\n\t  })\n\t})\n", "// Export the auto-generated hook for the `getUser` query endpoint\n\texport const { useGetUserQuery, useAddCompletedMissionMutation } = apiSlice"]}
{"filename": "src/initialData.ts/missions.ts", "chunked_list": ["/**\n\t * Copyright 2023 Google LLC\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\timport { Mission } from \"src/models/Mission\";\n\texport const missions: Mission[] = [\n\t  {\n\t    id: \"Sb8XWrxLMykaBU7oZEMH\",\n\t    title: \"Deploy a NodeJS App with a Firestore Database\",\n", "    technologies: ['cloud_run', 'firestore', 'cloud_storage'],\n\t    learningResources: [\n\t      {\n\t        title: \"Getting started with Node.js\",\n\t        link: 'https://cloud.google.com/nodejs/getting-started'\n\t      },\n\t    ],\n\t  },\n\t  {\n\t    id: \"1rSUn3CLB3UVgPbkoIoh\",\n", "    title: \"Connect a Go application on Cloud Run to a Cloud SQL for PostgreSQL database\",\n\t    technologies: ['cloud_run', 'cloud_sql', 'identity_and_access_management'],\n\t    learningResources: [\n\t      {\n\t        title: \"How to connect a Go application on Cloud Run to a Cloud SQL for PostgreSQL database\",\n\t        link: 'https://codelabs.developers.google.com/codelabs/cloud-sql-go-connector'\n\t      },\n\t    ],\n\t  },\n\t  {\n", "    id: \"Tc9YXsyMNzlbCV8pAFNI\",\n\t    title: \"Deploy a NodeJS App to Google Kubernetes Engine\",\n\t    technologies: ['google_kubernetes_engine', 'cloud_build', 'artifact_registry'],\n\t    learningResources: [\n\t      {\n\t        title: \"Deploy an app in a container image to a GKE cluster\",\n\t        link: 'https://cloud.google.com/kubernetes-engine/docs/quickstarts/deploy-app-container-image#node.js'\n\t      },\n\t    ],\n\t  },\n", "  {\n\t    id: \"3ukaXbkeaBG2CXRMgIjl\",\n\t    title: \"Allow third-party services to access specific backend resources in a Shared VPC network\",\n\t    technologies: ['cloud_load_balancing', 'cloud_run', 'cloud_firewall_rules', 'virtual_private_cloud', 'compute_engine'],\n\t    learningResources: [\n\t      {\n\t        title: \"Allow third-party services to access specific backend resources in a Shared VPC network\",\n\t        link: 'https://cloud.google.com/community/tutorials/serverless-backend-access-in-shared-vpc'\n\t      },\n\t    ],\n", "  },\n\t];"]}
