{"filename": "src/types.ts", "chunked_list": ["import { ReactElement, RefObject } from 'react';\n\timport {\n\t  ScrollView,\n\t  ViewProps,\n\t  LayoutRectangle,\n\t  NativeSyntheticEvent,\n\t  TargetedEvent,\n\t} from 'react-native';\n\timport WebView, {\n\t  WebViewMessageEvent,\n", "  WebViewProps,\n\t} from 'react-native-webview';\n\texport enum FormatType {\n\t  image = 'image',\n\t  bold = 'bold',\n\t  italic = 'italic',\n\t  underline = 'underline',\n\t  strike = 'strike',\n\t  subscript = 'subscript',\n\t  superscript = 'superscript',\n", "  orderedList = 'orderedList',\n\t  bulletList = 'bulletList',\n\t  highlight = 'highlight',\n\t  color = 'color',\n\t  textStyle = 'textStyle',\n\t  heading = 'heading',\n\t  cloze = 'cloze',\n\t}\n\texport type FormatOptions = Record<string, any>;\n\texport type EditorState = { [key in FormatType]?: boolean | FormatOptions };\n", "export type ChangeContentArgs = {\n\t  html: string;\n\t  json: JSON;\n\t  plainText: string;\n\t};\n\texport type LayoutTargetedChangeEvent = NativeSyntheticEvent<\n\t  { layout: LayoutRectangle } & TargetedEvent\n\t>;\n\texport type RichTextToolbarChildrenArgs = {\n\t  state?: EditorState;\n", "  handleFormatPress: (type: FormatType, options?: FormatOptions) => () => void;\n\t};\n\texport enum BridgeMessageType {\n\t  CONSOLE = 'CONSOLE',\n\t  MESSAGE = 'MESSAGE',\n\t  EVENT = 'EVENT',\n\t}\n\texport enum ActionType {\n\t  FORMAT = 'FORMAT',\n\t  UNFORMAT = 'UNFORMAT',\n", "  MESSAGE = 'MESSAGE',\n\t  EVENT = 'EVENT',\n\t}\n\texport type RichTextEditorProps = Omit<WebViewProps, 'onLayout'> & {\n\t  toolbarRef?: RefObject<RefRichTextToolbar>;\n\t  scrollViewRef?: RefObject<ScrollView>;\n\t  focusOffsetY?: number;\n\t  actions?: generateHTMLTemplateArgs['actions'];\n\t  removedActions?: generateHTMLTemplateArgs['removedActions'];\n\t  placeholder?: generateHTMLTemplateArgs['placeholder'];\n", "  autoCapitalize?: generateHTMLTemplateArgs['autoCapitalize'];\n\t  autoCorrect?: generateHTMLTemplateArgs['autoCorrect'];\n\t  enterKeyHint?: generateHTMLTemplateArgs['enterKeyHint'];\n\t  initialHTMLContent?: generateHTMLTemplateArgs['initialHTMLContent'];\n\t  htmlStyles?: {\n\t    placeholderColor?: generateHTMLTemplateArgs['placeholderColor'];\n\t    backgroundColor?: generateHTMLTemplateArgs['backgroundColor'];\n\t    caretColor?: generateHTMLTemplateArgs['caretColor'];\n\t    CSS?: generateHTMLTemplateArgs['CSS'];\n\t  };\n", "  autoFocus?: generateHTMLTemplateArgs['autoFocus'];\n\t  onLayoutContainer?: ViewProps['onLayout'];\n\t  onLayout?: (event: LayoutTargetedChangeEvent) => void;\n\t  onChangeHeight?: (height: number) => void;\n\t  onChangeContent?: ({ html, json, plainText }: ChangeContentArgs) => void;\n\t  onChangeCursorPosition?: (y: number) => void;\n\t  onFocus?: () => void;\n\t  onBlur?: () => void;\n\t  onReady?: WebViewProps['onLoadEnd'];\n\t  onPaste?: () => void;\n", "};\n\texport type RefRichTextEditor = {\n\t  focus: () => void;\n\t  blur: () => void;\n\t  format: (type: FormatType, options?: FormatOptions) => void;\n\t  unformat: (type: FormatType, options?: FormatOptions) => void;\n\t  setContent: (content: string) => void;\n\t  postMessage?: WebView['postMessage'];\n\t};\n\texport type RefRichTextToolbar = {\n", "  format: RefRichTextEditor['format'];\n\t  handleMessage: (event: WebViewMessageEvent) => void;\n\t};\n\texport type RichTextToolbarProps = {\n\t  editorRef?: RefObject<RefRichTextEditor>;\n\t  children: (data: RichTextToolbarChildrenArgs) => ReactElement;\n\t};\n\texport type generateHTMLTemplateArgs = {\n\t  containerCSSClass?: string;\n\t  backgroundColor?: string;\n", "  caretColor?: string;\n\t  initialHTMLContent?: string;\n\t  placeholder?: string;\n\t  placeholderColor?: string;\n\t  CSS?: string;\n\t  autoFocus?: boolean;\n\t  enterKeyHint?: string;\n\t  autoCapitalize?: string;\n\t  autoCorrect?: boolean;\n\t  actions?: FormatType[];\n", "  height?: number | string;\n\t  minHeight?: number | string;\n\t  maxHeight?: number | string;\n\t  removedActions?: FormatType[];\n\t};\n"]}
{"filename": "src/index.ts", "chunked_list": ["export { RichTextEditor } from './components/RichTextEditor';\n\texport { RichTextToolbar } from './components/RichTextToolbar';\n\texport * from './types';\n"]}
{"filename": "src/index.d.ts", "chunked_list": ["import {\n\t  ForwardRefExoticComponent,\n\t  PropsWithoutRef,\n\t  RefAttributes,\n\t} from 'react';\n\timport {\n\t  RefRichTextEditor,\n\t  RefRichTextToolbar,\n\t  RichTextEditorProps,\n\t  RichTextToolbarProps,\n", "} from './types';\n\tdeclare const RichTextEditor: ForwardRefExoticComponent<\n\t  PropsWithoutRef<RichTextEditorProps> & RefAttributes<RefRichTextEditor>\n\t>;\n\tdeclare const RichTextToolbar: ForwardRefExoticComponent<\n\t  PropsWithoutRef<RichTextToolbarProps> & RefAttributes<RefRichTextToolbar>\n\t>;\n\texport { RichTextEditor, RichTextToolbar };\n\texport * from './types';\n"]}
{"filename": "src/components/RichTextEditor.styles.ts", "chunked_list": ["import { Platform, StyleSheet } from 'react-native';\n\texport const styles = StyleSheet.create({\n\t  webView: {\n\t    flex: 0,\n\t    height: '100%',\n\t    backgroundColor: 'transparent',\n\t    // resolving old issue with react-native-webview on Android\n\t    opacity: Platform.OS === 'android' ? 0.99 : 1,\n\t  },\n\t  hiddenInput: {\n", "    position: 'absolute',\n\t    zIndex: -999,\n\t    left: -999,\n\t    bottom: -999,\n\t    width: 1,\n\t    height: 1,\n\t  },\n\t});\n"]}
{"filename": "src/html/generateHTMLTemplate.ts", "chunked_list": ["import { Platform } from 'react-native';\n\timport { FormatType, generateHTMLTemplateArgs } from '../types';\n\timport { RNBridge } from './scripts/RNBridge';\n\timport { RNEditor } from './scripts/RNEditor';\n\timport { utils } from './scripts/utils';\n\timport { extensions } from './scripts/extensions';\n\tconst { core } = require('../html/scripts/editorBundleString') || '';\n\tif (!core) {\n\t  console.log(\n\t    '@ankipro/react-native-rich-text ERROR: the bundle was not generated.'\n", "  );\n\t}\n\texport const generateHTMLTemplate = ({\n\t  containerCSSClass = 'rn_editor',\n\t  backgroundColor = 'rgba(0,0,0,0)',\n\t  caretColor = '#000000',\n\t  initialHTMLContent = '',\n\t  placeholder = '',\n\t  placeholderColor = '#a9a9a9',\n\t  CSS = '',\n", "  autoFocus = false,\n\t  enterKeyHint = '',\n\t  autoCapitalize = 'off',\n\t  autoCorrect = false,\n\t  height,\n\t  minHeight,\n\t  maxHeight,\n\t  removedActions = [],\n\t}: generateHTMLTemplateArgs) => `\n\t  <!DOCTYPE html>\n", "  <html>\n\t  <head>\n\t    <title>RN Rich Text Editor</title>\n\t    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n\t    <style>\n\t      * {\n\t        outline: 0px solid transparent;\n\t        -webkit-tap-highlight-color: rgba(0,0,0,0);\n\t        -webkit-touch-callout: none;\n\t        box-sizing: border-box;\n", "      }\n\t      html, body {\n\t        margin: 0;\n\t        padding: 0;\n\t        font-family: -apple-system, Roboto, system-ui, \"Segoe UI\", sans-serif;\n\t        font-size: 1em;\n\t        height: 100%;\n\t        width: 100%;\n\t      }\n\t      body {\n", "        overflow-y: hidden;\n\t        -webkit-overflow-scrolling: touch;\n\t        background-color: ${backgroundColor};\n\t        caret-color: ${caretColor};\n\t      }\n\t      p {\n\t        line-height: 1.5em;\n\t      }\n\t      .${containerCSSClass} .content sup,\n\t      .${containerCSSClass} .content sub {\n", "        line-height: 0;\n\t        font-size: small;\n\t      }\n\t      /* Placeholder */\n\t      .${containerCSSClass} .content p.is-editor-empty:first-child::before {\n\t        color: ${placeholderColor};\n\t        content: attr(data-placeholder);\n\t        float: left;\n\t        height: 0;\n\t        pointer-events: none;\n", "      }\n\t      ${CSS}\n\t    </style>\n\t  </head>\n\t  <body>\n\t    <div class=\"${containerCSSClass}\"></div>\n\t    <script>\n\t      ${core}\n\t      ${extensions}\n\t      (function() {\n", "        ${utils}\n\t        ${RNBridge}\n\t        ${RNEditor}\n\t        const TOOLBAR_ACTIONS = [${Object.values(FormatType)\n\t          .map((a) => `\"${a}\"`)\n\t          .toString()}];\n\t        RNEditor.init({\n\t          platform: \"${Platform.OS}\",\n\t          editorContainerElement: document.querySelector('.${containerCSSClass}'),\n\t          autoFocus: ${autoFocus},\n", "          placeholder: \"${placeholder}\",\n\t          cursorColor: \"${caretColor}\",\n\t          content: \\`${initialHTMLContent}\\`,\n\t          enterKeyHint: \"${enterKeyHint}\",\n\t          autoCapitalize: \"${autoCapitalize}\",\n\t          autoCorrect: ${autoCorrect},\n\t          contentHeight: ${height},\n\t          minContentHeight: ${minHeight},\n\t          maxContentHeight: ${maxHeight},\n\t          removedExtensions: [${Object.values(removedActions)\n", "            .map((a) => `\"${a}\"`)\n\t            .toString()}],\n\t        });\n\t      })();\n\t    </script>\n\t  </body>\n\t  </html>\n\t`;\n"]}
{"filename": "src/html/index.ts", "chunked_list": ["export { generateHTMLTemplate } from './generateHTMLTemplate';\n"]}
{"filename": "src/html/scripts/RNBridge.ts", "chunked_list": ["export const RNBridge = `\n\tclass RNBridge {\n\t  static IS_RN = !!window.ReactNativeWebView;\n\t  static messageType = {\n\t    MESSAGE: 'MESSAGE',\n\t    CONSOLE: 'CONSOLE',\n\t    EVENT: 'EVENT'\n\t  }\n\t  static send(data) {\n\t    if (this.IS_RN) {\n", "      window.ReactNativeWebView.postMessage(JSON.stringify(data));\n\t    }\n\t  }\n\t  static console(data) {\n\t    this.send({ type: RNBridge.messageType.CONSOLE, data});\n\t  }\n\t  static message(data) {\n\t    this.send({ type: RNBridge.messageType.MESSAGE, data});\n\t  }\n\t  static event(event, data) {\n", "    this.send({ type: RNBridge.messageType.EVENT, event, data});\n\t  }\n\t  static initListener() {\n\t    function handleMessage(event) {\n\t      const { actionType, formatType, eventType, data, options } = JSON.parse(event.data);\n\t      if (actionType === 'FORMAT') {\n\t        RNEditor.applyAction(formatType, options);\n\t      }\n\t      if (actionType === 'UNFORMAT') {\n\t        RNEditor.cancelAction(formatType, options);\n", "      }\n\t      if (actionType === 'EVENT') {\n\t        if (eventType === 'focus') {\n\t          RNEditor.instance.commands.focus('end');\n\t        }\n\t        if (eventType === 'blur') {\n\t          RNEditor.instance.commands.blur();\n\t        }\n\t        if (eventType === 'setContent') {\n\t          RNEditor.instance.commands.setContent(data);\n", "        }\n\t      }\n\t      if (actionType === 'MESSAGE') {\n\t        RNBridge.message({state: RNEditor.prevState});\n\t      }\n\t    }\n\t    // for iOS\n\t    window.addEventListener('message', handleMessage, false);\n\t    // for Android\n\t    document.addEventListener('message', handleMessage, false);\n", "  }\n\t}\n\t`;\n"]}
{"filename": "src/html/scripts/editorBundleString.d.ts", "chunked_list": ["declare const core: string;\n\texport { core };\n"]}
{"filename": "src/html/scripts/RNEditor.ts", "chunked_list": ["export const RNEditor = `\n\tclass RNEditor {\n\t  static instance;\n\t  static isReady = false;\n\t  static editorContainerElement;\n\t  static contentClass = 'content';\n\t  static contentHeight;\n\t  static minContentHeight;\n\t  static maxContentHeight;\n\t  static prevContentHeight;\n", "  static prevState;\n\t  static debouncedUpdateState = debounce(RNEditor.updateToolbar, 100);\n\t  static prevCursorYPosition = 0;\n\t  static platform;\n\t  static changeScrollHeightInterval;\n\t  static changeScrollHeightTimer;\n\t  static init({\n\t    platform,\n\t    content = '',\n\t    autoFocus = false,\n", "    cursorColor = '#000000',\n\t    placeholder = 'Enter text here',\n\t    enterKeyHint = '',\n\t    autoCapitalize = 'off',\n\t    autoCorrect = false,\n\t    editorContainerElement,\n\t    contentHeight,\n\t    minContentHeight,\n\t    maxContentHeight,\n\t    removedExtensions = [],\n", "  }) {\n\t    this.platform = platform;\n\t    this.editorContainerElement = editorContainerElement;\n\t    this.contentHeight = contentHeight;\n\t    this.minContentHeight = minContentHeight;\n\t    this.maxContentHeight = maxContentHeight;\n\t    this.isHandlingPaste = false;\n\t    this.handlePaste = () => {\n\t      // workaround for double triggering\n\t      if (this.isHandlingPaste) {\n", "        return;\n\t      }\n\t      this.isHandlingPaste = true;\n\t      RNBridge.event(\"onPaste\")\n\t      setTimeout(() => {\n\t        this.isHandlingPaste = false;\n\t      }, 300);\n\t    }\n\t    const extensions = [\n\t      Document,\n", "      Paragraph,\n\t      Text,\n\t      Placeholder.configure({ placeholder }),\n\t      Image,\n\t      Dropcursor.configure({ color: cursorColor }),\n\t      Bold.extend({ priority: 10 }),\n\t      Italic.extend({ priority: 10 }),\n\t      Strike.extend({ priority: 10 }),\n\t      Underline.extend({ priority: 10 }),\n\t      Superscript.extend({ excludes: 'subscript', priority: 11 }),\n", "      Subscript.extend({ excludes: 'superscript', priority: 11 }),\n\t      ListItem,\n\t      BulletList.extend({ keepMarks: true }),\n\t      OrderedList.extend({ keepMarks: true }),\n\t      TextStyle,\n\t      HardBreak,\n\t    ];\n\t    if (!removedExtensions.includes('heading')) {\n\t      extensions.push(Heading);\n\t    }\n", "    if (!removedExtensions.includes('highlight')) {\n\t      extensions.push(Highlight.configure({ multicolor: true }));\n\t    }\n\t    if (!removedExtensions.includes('color')) {\n\t      extensions.push(Color);\n\t    }\n\t    if (!removedExtensions.includes('cloze')) {\n\t      extensions.push(Cloze);\n\t    }\n\t    this.instance = new Editor({\n", "      element: editorContainerElement,\n\t      editorProps: {\n\t        handlePaste: this.handlePaste,\n\t        attributes: {\n\t          class: RNEditor.contentClass,\n\t        },\n\t        transformPastedHTML(html) {\n\t          return html\n\t            .replace(/<style((.|\\\\n|\\\\r)*?)<\\\\/style>/gm, '') // remove all 'styles' tags with self content\n\t            .replace(/<(?!\\\\/?(p|br)\\\\b)[^>]+>/g, '') // remove any html tag except <p> and <br>\n", "            .replace(/\\\\n/g, '<br>'); // replace new line character with <br>\n\t        },\n\t      },\n\t      extensions,\n\t      content,\n\t      autofocus: autoFocus ? 'end' : false,\n\t      onTransaction: RNEditor.handleTransaction,\n\t      onSelectionUpdate: RNEditor.handleSelectionUpdate,\n\t      onUpdate: RNEditor.handleUpdate,\n\t      onFocus: RNEditor.handleFocus,\n", "      onBlur: RNEditor.handleBlur,\n\t      onCreate: RNEditor.handleCreate,\n\t      onDestroy: RNEditor.handleDestroy,\n\t    });\n\t    this.contentElement = document.querySelector('.' + RNEditor.contentClass);\n\t    this.contentElement.enterKeyHint = enterKeyHint;\n\t    this.contentElement.autocapitalize = autoCapitalize;\n\t    this.contentElement.autocorrect = autoCorrect;\n\t    this.contentElement.autocomplete = 'off';\n\t    RNBridge.initListener();\n", "    RNEditor.subscribeOnChangeScrollHeight();\n\t  }\n\t  static handleDestroy() {\n\t    if (RNEditor.changeScrollHeightInterval) {\n\t      clearInterval(RNEditor.changeScrollHeightInterval);\n\t    }\n\t    if (RNEditor.changeScrollHeightTimer) {\n\t      clearTimeout(RNEditor.changeScrollHeightTimer);\n\t    }\n\t  }\n", "  static handleCreate({ editor }) {\n\t    RNEditor.isReady = true;\n\t    RNBridge.event(\"onEditorReady\");\n\t    RNEditor.updateContentHeight();\n\t  }\n\t  static handleUpdate({ editor }) {\n\t    RNEditor.updateContentHeight();\n\t    RNBridge.event(\"onChangeContent\", {html: editor.getHTML(), json: editor.getJSON(), plainText: editor.getText()});\n\t  }\n\t  static handleTransaction({ editor }) {\n", "    RNEditor.updateContentHeight();\n\t    RNEditor.debouncedUpdateState(editor);\n\t  }\n\t  static handleSelectionUpdate({ editor }) {\n\t    RNEditor.updateCursorPosition();\n\t    RNEditor.debouncedUpdateState(editor);\n\t  }\n\t  static handleFocus() {\n\t    RNBridge.event(\"onFocus\");\n\t  }\n", "  static handleBlur() {\n\t    RNBridge.event(\"onBlur\");\n\t  }\n\t  static applyAction(action, options) {\n\t    switch (action) {\n\t      case 'bold':\n\t      case 'italic':\n\t      case 'underline':\n\t      case 'strike':\n\t      case 'subscript':\n", "      case 'superscript':\n\t        RNEditor.instance.chain().focus().toggleMark(action, options).run();\n\t        break;\n\t      case 'cloze':\n\t        RNEditor.instance.chain().focus().setCloze(options?.number).run();\n\t        break;\n\t      case 'color':\n\t        RNEditor.instance.chain().focus().setColor(options?.color).run();\n\t        break;\n\t      case 'highlight':\n", "        RNEditor.instance.chain().focus().toggleHighlight({ color: options?.color }).run();\n\t        break;\n\t      case 'heading':\n\t        RNEditor.instance.chain().focus().toggleHeading({ level: options?.level }).run();\n\t        break;\n\t      case 'bulletList':\n\t      case 'orderedList':\n\t        if (RNEditor.instance.isActive(action)) {\n\t          RNEditor.instance.chain().focus().setParagraph().run();\n\t        } else {\n", "          RNEditor.instance.chain().focus().toggleList(action).run();\n\t        }\n\t        break;\n\t    }\n\t  }\n\t  static cancelAction(action, options) {\n\t    switch (action) {\n\t      case 'bold':\n\t      case 'italic':\n\t      case 'underline':\n", "      case 'strike':\n\t      case 'subscript':\n\t      case 'superscript':\n\t      case 'cloze':\n\t        RNEditor.instance.chain().focus().unsetMark(action).run();\n\t        break;\n\t      case 'highlight':\n\t        RNEditor.instance.chain().focus().unsetHighlight().run();\n\t        break;\n\t      case 'color': {\n", "        RNEditor.instance.chain().focus().unsetColor().run();\n\t        // it is temporary solution to resolve this issue: https://github.com/ueberdosis/tiptap/issues/3702#issuecomment-1528689731\n\t        // TODO: need to wait 2.1.0 version and remove this as soon as possible =)\n\t        RNEditor.instance.chain().focus().unsetMark('textStyle').run();\n\t        break;\n\t      }\n\t      case 'heading':\n\t        RNEditor.instance.chain().focus().toggleHeading({ level: options?.level }).run();\n\t        break;\n\t      case 'bulletList':\n", "      case 'orderedList':\n\t        RNEditor.instance.chain().focus().liftListItem(action).run();\n\t        break;\n\t      default:\n\t        break;\n\t    }\n\t  }\n\t  static updateToolbar(instance) {\n\t    const state = {};\n\t    const getAllClozeNumbers = (html) => {\n", "      const matches = [...html.matchAll(/<cloze data-number=[\"|'](\\\\d+)[\"|']/g)];\n\t      const clozeNumbers = matches.map(match => Number(match[1]));\n\t      clozeNumbers.sort((a, b) => a - b);\n\t      return [...new Set(clozeNumbers)];\n\t    };\n\t    TOOLBAR_ACTIONS.forEach((action) => {\n\t      if (action !== 'image') {\n\t        if (action.startsWith('heading')) {\n\t          const level = RNEditor.instance.getAttributes(action).level;\n\t          if (level && RNEditor.instance.isActive(action)) {\n", "            state[action] = { level };\n\t          } else {\n\t            state[action] = false;\n\t          }\n\t        } else if (action === 'cloze') {\n\t          const number = RNEditor.instance.getAttributes(action)?.number;\n\t          const all = getAllClozeNumbers(RNEditor.instance.getHTML());\n\t          state[action] = { isActive: RNEditor.instance.isActive(action), number, all };\n\t        } else if (['textStyle', 'highlight'].includes(action)) {\n\t          const color = RNEditor.instance.getAttributes(action).color;\n", "          if (color && RNEditor.instance.isActive(action)) {\n\t            state[action] = { color };\n\t          } else {\n\t            state[action] = false;\n\t          }\n\t        } else {\n\t          state[action] = RNEditor.instance.isActive(action);\n\t        }\n\t      }\n\t    });\n", "    if (!shallowEqual(state, RNEditor.prevState)) {\n\t      RNBridge.message({state});\n\t      RNEditor.prevState = state;\n\t    }\n\t  }\n\t  static updateCursorPosition() {\n\t    const currentCursorYPosition = RNEditor.getCursorYPosition();\n\t    if (currentCursorYPosition !== RNEditor.prevCursorYPosition) {\n\t      RNBridge.event(\"onChangeCursorPosition\", currentCursorYPosition);\n\t      RNEditor.prevCursorYPosition = currentCursorYPosition;\n", "    }\n\t  }\n\t  static getCursorYPosition() {\n\t    const { anchorNode } = window.getSelection();\n\t    const element = anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;\n\t    const { y } = element.getBoundingClientRect();\n\t    return y;\n\t  }\n\t  // needs only for Android\n\t  static subscribeOnChangeScrollHeight() {\n", "    if (RNEditor.platform === \"android\") {\n\t      RNEditor.changeScrollHeightInterval = setInterval(() => {\n\t        RNBridge.console('update height');\n\t        RNEditor.updateContentHeight();\n\t      }, 50);\n\t      RNEditor.changeScrollHeightTimer = setTimeout(() => {\n\t        RNBridge.console('clear');\n\t        clearInterval(RNEditor.changeScrollHeightInterval);\n\t      }, 3000)\n\t    }\n", "  }\n\t  // for RN only\n\t  static updateContentHeight() {\n\t    if (!RNEditor.contentHeight && RNBridge.IS_RN && RNEditor.isReady) {\n\t      const contentElement = document.querySelector('.' + RNEditor.contentClass);\n\t      const height = document.body.offsetHeight === 0 ? 0 : contentElement.getBoundingClientRect().height;\n\t      if (RNEditor.prevContentHeight !== height) {\n\t        if (!RNEditor.minContentHeight && !RNEditor.maxContentHeight) {\n\t          RNEditor.prevContentHeight = height;\n\t          RNBridge.event(\"onChangeHeight\", { height });\n", "        } else {\n\t          if (RNEditor.minContentHeight) {\n\t            if (height > RNEditor.minContentHeight) {\n\t              RNEditor.prevContentHeight = height;\n\t            } else {\n\t              RNEditor.prevContentHeight = RNEditor.minContentHeight;\n\t            }\n\t          }\n\t          if (RNEditor.maxContentHeight) {\n\t            if (height < RNEditor.maxContentHeight) {\n", "              RNEditor.prevContentHeight = height;\n\t            } else {\n\t              RNEditor.prevContentHeight = RNEditor.maxContentHeight;\n\t            }\n\t          }\n\t          RNBridge.event(\"onChangeHeight\", { height: RNEditor.prevContentHeight });\n\t        }\n\t      }\n\t    }\n\t  }\n", "}\n\t`;\n"]}
{"filename": "src/html/scripts/utils.ts", "chunked_list": ["export const utils = `\n\tfunction throttle(callback, delay = 1000) {\n\t  let shouldWait = false;\n\t  return (...args) => {\n\t    if (shouldWait) return;\n\t    callback(...args);\n\t    shouldWait = true;\n\t    setTimeout(() => {\n\t      shouldWait = false;\n\t    }, delay);\n", "  };\n\t}\n\tfunction debounce(callback, delay = 1000) {\n\t  let time;\n\t  return (...args) => {\n\t    clearTimeout(time);\n\t    time = setTimeout(() => {\n\t      callback(...args);\n\t    }, delay);\n\t  };\n", "}\n\tfunction shallowEqual(object1, object2) {\n\t  if (!object1 || !object2) {\n\t    return false;\n\t  }\n\t  const keys1 = Object.keys(object1);\n\t  const keys2 = Object.keys(object2);\n\t  if (keys1.length !== keys2.length) {\n\t    return false;\n\t  }\n", "  for (let key of keys1) {\n\t    if (object1[key] !== object2[key]) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t`;\n"]}
{"filename": "src/html/scripts/extensions/Cloze.ts", "chunked_list": ["export const Cloze = `\n\tconst CLOZE_DEFAULT_NUMBER = 1;\n\tconst CLOZE_INPUT_REGEX = /{{$/;\n\tconst CLOZE_INPUT_REGEX_2 = /(?:^|\\\\s)((?:{{[Cc](\\\\d+)::)((?:.*?))(?:}}))$/;\n\tconst CLOZE_PASTE_REGEX = /(?:^|\\\\s)((?:{{[Cc](\\\\d+)::)((?:.*?))(?:}}))/g;\n\tconst getAllClozeNumbers = (html) => {\n\t  const matches = [...html.matchAll(/<cloze data-number=[\"|'](\\\\d+)[\"|']/g)];\n\t  if (matches.length === 0) {\n\t    return CLOZE_DEFAULT_NUMBER;\n\t  }\n", "  const clozeNumbers = matches.map(match => Number(match[1]));\n\t  clozeNumbers.sort((a, b) => a - b);\n\t  const sortedNumbers = [...new Set(clozeNumbers)];\n\t  return sortedNumbers[sortedNumbers.length - 1] + 1;\n\t};\n\tconst clozeInputRule = (find, { editor, name, type }) =>\n\t  new InputRule({\n\t    find,\n\t    handler: ({ state, range }) => {\n\t      if (editor.isActive(name)) return;\n", "      const { tr } = state;\n\t      const currentNumber = getAllClozeNumbers(editor.getHTML());\n\t      tr.delete(range.from, range.to);\n\t      const clozeMark = type.create({ number: currentNumber });\n\t      tr.addMark(range.from, range.from + 1, clozeMark);\n\t      tr.addStoredMark(clozeMark);\n\t    },\n\t  });\n\tconst Cloze = Mark.create({\n\t  name: 'cloze',\n", "  excludes: '_',\n\t  addOptions() {\n\t    return {\n\t      HTMLAttributes: {},\n\t    };\n\t  },\n\t  addAttributes() {\n\t    return {\n\t      number: {\n\t        default: CLOZE_DEFAULT_NUMBER,\n", "        parseHTML: element => element.getAttribute('data-number'),\n\t        renderHTML: attributes => ({\n\t          'data-number': attributes.number,\n\t        }),\n\t      },\n\t    };\n\t  },\n\t  parseHTML() {\n\t    return [\n\t      {\n", "        tag: 'cloze',\n\t        getAttrs: element => {\n\t          const hasNumber = element.hasAttribute('data-number');\n\t          if (!hasNumber) {\n\t            return false;\n\t          }\n\t          return {};\n\t        },\n\t      },\n\t    ];\n", "  },\n\t  renderHTML({ HTMLAttributes }) {\n\t    return ['cloze', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n\t  },\n\t  addCommands() {\n\t    return {\n\t      setCloze:\n\t        number =>\n\t        ({ commands }) =>\n\t          commands.setMark(this.name, { number: number || getAllClozeNumbers(this.editor.getHTML()) }),\n", "      toggleCloze:\n\t        () =>\n\t        ({ commands }) =>\n\t          commands.toggleMark(this.name),\n\t      unsetCloze:\n\t        () =>\n\t        ({ commands }) =>\n\t          commands.unsetMark(this.name),\n\t    };\n\t  },\n", "  addKeyboardShortcuts() {\n\t    const action = () => {\n\t      if (this.editor.view.state.selection.empty) {\n\t        return false;\n\t      }\n\t      return this.editor.isActive(this.name) ? this.editor.commands.unsetCloze() : this.editor.commands.setCloze();\n\t    }\n\t    return {\n\t      'Shift-[': action,\n\t    };\n", "  },\n\t  addInputRules() {\n\t    return [\n\t      clozeInputRule(CLOZE_INPUT_REGEX, this),\n\t      markInputRule({\n\t        find: CLOZE_INPUT_REGEX_2,\n\t        type: this.type,\n\t      })\n\t    ];\n\t  },\n", "  addPasteRules() {\n\t    return [\n\t      markPasteRule({\n\t        find: CLOZE_PASTE_REGEX,\n\t        type: this.type,\n\t      }),\n\t    ];\n\t  },\n\t});\n\t`;\n"]}
{"filename": "src/html/scripts/extensions/index.ts", "chunked_list": ["import { Cloze } from './Cloze';\n\texport const extensions = `\n\t  ${Cloze}\n\t`;\n"]}
