{"filename": "tsup.config.ts", "chunked_list": ["import { defineConfig } from \"tsup\";\n\t// __filename and __dirname shims\n\t// - https://github.com/egoist/tsup/search?q=__filename\n\texport default defineConfig(async (options) => {\n\t  return {\n\t    ...options,\n\t    clean: true,\n\t    dts: false,\n\t    entry: [\"src/integration/index.ts\", \"src/edge-runtime/index.ts\"],\n\t    format: [\"esm\", \"cjs\"],\n", "    // FUTURE: incremental builds when implemented https://github.com/egoist/tsup/issues/615\n\t    // incremental: !options.watch,\n\t    keepNames: true,\n\t    minifyIdentifiers: false,\n\t    minifySyntax: !options.watch,\n\t    minifyWhitespace: !options.watch,\n\t    onSuccess:\n\t      \"tsc --emitDeclarationOnly --declaration --declarationMap --declarationDir ./dist\",\n\t    outDir: \"dist\",\n\t    shims: true,\n", "    silent: !options.watch,\n\t    sourcemap: true,\n\t    splitting: false,\n\t  };\n\t});\n"]}
{"filename": "src/integration/integration.ts", "chunked_list": ["import path from \"node:path\";\n\timport type { AstroConfig, AstroIntegration } from \"astro\";\n\timport dedent from \"dedent\";\n\timport fg from \"fast-glob\";\n\timport fs from \"fs-extra\";\n\timport slash from \"slash\";\n\timport { logger } from \"../astro/logger/node\";\n\timport { removeLeadingForwardSlashWindows } from \"../astro/internal-helpers/path\";\n\timport { defaultI18nConfig } from \"../shared/configs\";\n\timport type { UserI18nConfig, I18nConfig } from \"../shared/configs\";\n", "// injectRoute doesn't generate build pages https://github.com/withastro/astro/issues/5096\n\t// workaround: copy pages folder when command === \"build\"\n\t/**\n\t * The i18n integration for Astro\n\t *\n\t * See the full [astro-i18n-aut](https://github.com/jlarmstrongiv/astro-i18n-aut#readme) documentation\n\t */\n\texport function i18n(userI18nConfig: UserI18nConfig): AstroIntegration {\n\t  const i18nConfig: I18nConfig = Object.assign(\n\t    defaultI18nConfig,\n", "    userI18nConfig\n\t  );\n\t  const { defaultLocale, locales, exclude, include, redirectDefaultLocale } =\n\t    i18nConfig;\n\t  ensureValidLocales(locales, defaultLocale);\n\t  let pagesPathTmp: Record<string, string> = {};\n\t  async function removePagesPathTmp(): Promise<void> {\n\t    await Promise.all(\n\t      Object.values(pagesPathTmp).map((pagePathTmp) => fs.remove(pagePathTmp))\n\t    );\n", "  }\n\t  return {\n\t    name: \"astro-i18n-integration\",\n\t    hooks: {\n\t      \"astro:config:setup\": async ({ config, command, injectRoute }) => {\n\t        await ensureValidConfigs(config, i18nConfig);\n\t        const configSrcDirPathname = path.normalize(\n\t          removeLeadingForwardSlashWindows(config.srcDir.pathname)\n\t        );\n\t        let included: string[] = ensureGlobsHaveConfigSrcDirPathname(\n", "          typeof include === \"string\" ? [include] : include,\n\t          configSrcDirPathname\n\t        );\n\t        let excluded: string[] = ensureGlobsHaveConfigSrcDirPathname(\n\t          typeof exclude === \"string\" ? [exclude] : exclude,\n\t          configSrcDirPathname\n\t        );\n\t        const pagesPath = path.join(configSrcDirPathname, \"pages\");\n\t        const pagesPathTmpRoot = path.join(\n\t          configSrcDirPathname,\n", "          // tmp filename from https://github.com/withastro/astro/blob/e6bff651ff80466b3e862e637d2a6a3334d8cfda/packages/astro/src/core/routing/manifest/create.ts#L279\n\t          \"astro_tmp_pages\"\n\t        );\n\t        for (const locale of Object.keys(locales)) {\n\t          pagesPathTmp[locale] = `${pagesPathTmpRoot}_${locale}`;\n\t        }\n\t        await removePagesPathTmp();\n\t        if (command === \"build\") {\n\t          await Promise.all(\n\t            Object.keys(locales)\n", "              .filter((locale) => {\n\t                if (redirectDefaultLocale === false) {\n\t                  return locale !== defaultLocale;\n\t                } else {\n\t                  return true;\n\t                }\n\t              })\n\t              .map((locale) => fs.copy(pagesPath, pagesPathTmp[locale]))\n\t          );\n\t        }\n", "        const entries = fg.stream(included, {\n\t          ignore: excluded,\n\t          onlyFiles: true,\n\t        });\n\t        // typing https://stackoverflow.com/a/68358341\n\t        let entry: string;\n\t        // @ts-expect-error\n\t        for await (entry of entries) {\n\t          const parsedPath = path.parse(entry);\n\t          const relativePath = path.relative(pagesPath, parsedPath.dir);\n", "          const extname = parsedPath.ext.slice(1).toLowerCase();\n\t          // warn on files that cannot be translated with specific and actionable warnings\n\t          // astro pages file types https://docs.astro.build/en/core-concepts/astro-pages/#supported-page-files\n\t          // any file that is not included as an astro page file types, will be automatically warned about by astro\n\t          if (extname !== \"astro\") {\n\t            warnIsInvalidPage(\n\t              extname,\n\t              path.join(relativePath, parsedPath.base),\n\t              configSrcDirPathname\n\t            );\n", "            continue;\n\t          }\n\t          for (const locale of Object.keys(locales)) {\n\t            // ignore defaultLocale if redirectDefaultLocale is false\n\t            if (redirectDefaultLocale === false && locale === defaultLocale) {\n\t              continue;\n\t            }\n\t            const entryPoint =\n\t              command === \"build\"\n\t                ? path.join(pagesPathTmp[locale], relativePath, parsedPath.base)\n", "                : path.join(pagesPath, relativePath, parsedPath.base);\n\t            const pattern = slash(\n\t              path.join(\n\t                config.base,\n\t                locale,\n\t                relativePath,\n\t                parsedPath.name.endsWith(\"index\") ? \"\" : parsedPath.name,\n\t                config.build.format === \"directory\" ? \"/\" : \"\"\n\t              )\n\t            );\n", "            injectRoute({\n\t              entryPoint,\n\t              pattern,\n\t            });\n\t          }\n\t        }\n\t      },\n\t      \"astro:build:done\": async () => {\n\t        await removePagesPathTmp();\n\t      },\n", "      \"astro:server:done\": async () => {\n\t        await removePagesPathTmp();\n\t      },\n\t    },\n\t  };\n\t}\n\tfunction ensureValidLocales(\n\t  locales: Record<string, string>,\n\t  defaultLocale: string\n\t) {\n", "  if (!Object.keys(locales).includes(defaultLocale)) {\n\t    const errorMessage = `locales ${JSON.stringify(\n\t      locales\n\t    )} does not include \"${defaultLocale}\"`;\n\t    logger.error(\"astro-i18n-aut\", errorMessage);\n\t    throw new Error(errorMessage);\n\t  }\n\t}\n\tasync function ensureValidConfigs(config: AstroConfig, i18nConfig: I18nConfig) {\n\t  if (config.trailingSlash === \"ignore\" && config.output === \"static\") {\n", "    logger.warn(\n\t      \"astro-i18n-aut\",\n\t      `avoid setting config.trailingSlash = \"ignore\" when config.output = \"static\"`\n\t    );\n\t    logger.warn(\n\t      \"astro-i18n-aut\",\n\t      `config.trailingSlash = \"always\" && config.build.format = \"directory\"`\n\t    );\n\t    logger.warn(\n\t      \"astro-i18n-aut\",\n", "      `config.trailingSlash = \"never\" && config.build.format = \"file\"`\n\t    );\n\t    logger.warn(\n\t      \"astro-i18n-aut\",\n\t      `setting config.trailingSlash = \"${config.trailingSlash}\"`\n\t    );\n\t    config.trailingSlash =\n\t      config.build.format === \"directory\" ? \"always\" : \"never\";\n\t  }\n\t  if (i18nConfig.redirectDefaultLocale) {\n", "    const configSrcDirPathname = path.normalize(\n\t      removeLeadingForwardSlashWindows(config.srcDir.pathname)\n\t    );\n\t    // all possible locations of middleware\n\t    const defaultMiddlewarePath = path.join(\n\t      configSrcDirPathname,\n\t      \"middleware/index.ts\"\n\t    );\n\t    const middlewarePaths = [\n\t      path.join(configSrcDirPathname, \"middleware.js\"),\n", "      path.join(configSrcDirPathname, \"middleware.ts\"),\n\t      path.join(configSrcDirPathname, \"middleware/index.js\"),\n\t      defaultMiddlewarePath,\n\t    ];\n\t    // check if middleware exists\n\t    const pathsExist = await Promise.all(\n\t      middlewarePaths.map((middlewarePath) => fs.exists(middlewarePath))\n\t    );\n\t    const pathExists = pathsExist.includes(true);\n\t    // warn and create middleware if it does not exist\n", "    if (pathExists === false) {\n\t      logger.warn(\"astro-i18n-aut\", `cannot find any Astro middleware files:`);\n\t      middlewarePaths.forEach((middlewarePath) => {\n\t        logger.warn(\"astro-i18n-aut\", `- ${middlewarePath}`);\n\t      });\n\t      logger.warn(\n\t        \"astro-i18n-aut\",\n\t        `creating ${defaultMiddlewarePath} with defaultLocale = \"en\"`\n\t      );\n\t      await fs.outputFile(\n", "        defaultMiddlewarePath,\n\t        dedent(`\n\t          import { sequence } from \"astro/middleware\";\n\t          import { i18nMiddleware } from \"astro-i18n-aut\";\n\t          const i18n = i18nMiddleware({ defaultLocale: \"en\" });\n\t          export const onRequest = sequence(i18n);\n\t        `)\n\t      );\n\t    }\n\t  }\n", "}\n\tfunction ensureGlobsHaveConfigSrcDirPathname(\n\t  filePaths: string[],\n\t  configSrcDirPathname: string\n\t) {\n\t  return filePaths.map((filePath) => {\n\t    filePath = path.normalize(removeLeadingForwardSlashWindows(filePath));\n\t    if (filePath.includes(configSrcDirPathname)) {\n\t      filePath = path.relative(configSrcDirPathname, filePath);\n\t    }\n", "    // fast-glob prefers unix paths https://www.npmjs.com/package/fast-glob#how-to-write-patterns-on-windows\n\t    filePath = path.posix.join(\n\t      fg.convertPathToPattern(configSrcDirPathname),\n\t      slash(filePath)\n\t    );\n\t    return filePath;\n\t  });\n\t}\n\tlet hasWarnedIsInvalidPage = false;\n\tfunction warnIsInvalidPage(\n", "  extname: string,\n\t  filePath: string,\n\t  configSrcDirPathname: string\n\t): boolean {\n\t  // astro pages file types https://docs.astro.build/en/core-concepts/astro-pages/#supported-page-files\n\t  if ([\"js\", \"ts\", \"md\", \"mdx\", \"html\"].includes(extname)) {\n\t    if (hasWarnedIsInvalidPage === false) {\n\t      logger.warn(\n\t        \"astro-i18n-aut\",\n\t        `exclude or remove non-astro files from \"${configSrcDirPathname}pages\", as they cannot be translated`\n", "      );\n\t      hasWarnedIsInvalidPage = true;\n\t    }\n\t    logger.warn(\n\t      \"astro-i18n-aut\",\n\t      path.join(configSrcDirPathname, \"pages\", filePath)\n\t    );\n\t    return true;\n\t  }\n\t  return false;\n", "}\n"]}
{"filename": "src/integration/index.ts", "chunked_list": ["export { i18n, i18n as default } from \"./integration\";\n\texport { defaultLocaleSitemapFilter } from \"../shared/defaultLocaleSitemapFilter\";\n\texport {\n\t  defaultI18nConfig,\n\t  defaultI18nMiddlewareConfig,\n\t} from \"../shared/configs\";\n\texport type {\n\t  UserI18nConfig,\n\t  UserI18nMiddlewareConfig,\n\t  UserDefaultLocaleSitemapFilterConfig,\n", "} from \"../shared/configs\";\n"]}
{"filename": "src/edge-runtime/index.ts", "chunked_list": ["export { i18nMiddleware } from \"./middleware\";\n\texport { getLocale } from \"./getLocale\";\n\texport { getLocaleUrlPrefix } from \"./getLocaleUrlPrefix\";\n\texport { getUrlWithoutLocale } from \"./getUrlWithoutLocale\";\n\texport { defaultI18nConfig, defaultI18nMiddlewareConfig } from \"../shared\";\n\texport type {\n\t  UserI18nConfig,\n\t  UserI18nMiddlewareConfig,\n\t  UserDefaultLocaleSitemapFilterConfig,\n\t} from \"../shared\";\n"]}
{"filename": "src/edge-runtime/getLocaleUrlPrefix.ts", "chunked_list": ["/**\n\t * @returns locale prefix \"/es\" or \"\" if defaultLocale\n\t */\n\texport function getLocaleUrlPrefix(url: URL): string {\n\t  // avoid catching urls that start with \"/en\" like \"/enigma\"\n\t  if (url.pathname.length === 3) {\n\t    return url.pathname;\n\t  }\n\t  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n\t    // catch all \"/fr/**/*\" urls\n", "    return url.pathname.slice(0, 3);\n\t  }\n\t  // otherwise, it must be a defaultLocale or other url\n\t  return \"\";\n\t}\n"]}
{"filename": "src/edge-runtime/middleware.ts", "chunked_list": ["import type { ValidRedirectStatus } from \"astro\";\n\timport { defineMiddleware } from \"astro/middleware\";\n\timport { defaultI18nMiddlewareConfig } from \"../shared/configs\";\n\timport type {\n\t  UserI18nMiddlewareConfig,\n\t  I18nMiddlewareConfig,\n\t} from \"../shared/configs\";\n\tconst redirectDefaultLocaleDisabledMiddleware = defineMiddleware((_, next) =>\n\t  next()\n\t);\n", "export function i18nMiddleware(\n\t  userI18nMiddlewareConfig: UserI18nMiddlewareConfig\n\t) {\n\t  const i18nMiddlewareConfig: I18nMiddlewareConfig = Object.assign(\n\t    defaultI18nMiddlewareConfig,\n\t    userI18nMiddlewareConfig\n\t  );\n\t  const { defaultLocale, redirectDefaultLocale } = i18nMiddlewareConfig;\n\t  if (redirectDefaultLocale === false) {\n\t    return redirectDefaultLocaleDisabledMiddleware;\n", "  }\n\t  let status: ValidRedirectStatus | undefined;\n\t  if (typeof redirectDefaultLocale === \"number\") {\n\t    status = redirectDefaultLocale;\n\t  }\n\t  return defineMiddleware((context, next) => {\n\t    const requestUrlPathname = new URL(context.request.url).pathname;\n\t    // avoid catching urls that start with \"/en\" like \"/enigma\"\n\t    if (requestUrlPathname === `/${defaultLocale}`) {\n\t      return context.redirect(\n", "        requestUrlPathname.replace(`/${defaultLocale}`, \"/\"),\n\t        status\n\t      );\n\t    }\n\t    // catch all \"/en/**/*\" urls\n\t    if (requestUrlPathname.startsWith(`/${defaultLocale}/`)) {\n\t      return context.redirect(\n\t        requestUrlPathname.replace(`/${defaultLocale}/`, \"/\"),\n\t        status\n\t      );\n", "    }\n\t    // otherwise, it must be a defaultLocale or other url\n\t    return next();\n\t  });\n\t}\n"]}
{"filename": "src/edge-runtime/getUrlWithoutLocale.ts", "chunked_list": ["/**\n\t * @returns url without locale prefix, \"/es/about\" => \"/about\"\n\t */\n\texport function getUrlWithoutLocale(url: URL): string {\n\t  // avoid catching urls that start with \"/en\" like \"/enigma\"\n\t  if (url.pathname.length === 3) {\n\t    return \"/\";\n\t  }\n\t  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n\t    // catch all \"/fr/**/*\" urls\n", "    return url.pathname.slice(3);\n\t  }\n\t  // otherwise, it must be a defaultLocale or other url\n\t  return url.pathname;\n\t}\n"]}
{"filename": "src/edge-runtime/getLocale.ts", "chunked_list": ["/**\n\t * @returns locale key or undefined if defaultLocale\n\t */\n\texport function getLocale(url: URL): string | undefined {\n\t  // avoid catching urls that start with \"/en\" like \"/enigma\"\n\t  if (url.pathname.length === 3) {\n\t    return url.pathname.slice(1);\n\t  }\n\t  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n\t    // catch all \"/fr/**/*\" urls\n", "    return url.pathname.slice(1, 3);\n\t  }\n\t  // otherwise, it must be a defaultLocale or other url\n\t  return undefined;\n\t}\n"]}
{"filename": "src/shared/configs.ts", "chunked_list": ["import type { ValidRedirectStatus } from \"astro\";\n\texport interface UserI18nConfig {\n\t  /**\n\t   * glob pattern(s) to include\n\t   * @defaultValue [\"pages\\/\\*\\*\\/\\*\"]\n\t   */\n\t  include?: string | string[];\n\t  /**\n\t   * glob pattern(s) to exclude\n\t   * @defaultValue [\"pages\\/api\\/\\*\\*\\/\\*\"]\n", "   */\n\t  exclude?: string | string[];\n\t  /**\n\t   * all language locales\n\t   *\n\t   * @example\n\t   * ```ts\n\t   * const locales = {\n\t   *   en: \"en-US\", // the `defaultLocale` value must present in `locales` keys\n\t   *   es: \"es-ES\",\n", "   *   fr: \"fr-CA\",\n\t   * };\n\t   * ```\n\t   */\n\t  locales: Record<string, string>;\n\t  /**\n\t   * the default language locale\n\t   *\n\t   * the `defaultLocale` value must present in `locales` keys\n\t   *\n", "   * @example \"en\"\n\t   */\n\t  defaultLocale: string;\n\t  /**\n\t   * given the defaultLocale \"en\", whether\n\t   * \"/en/about\" redirects to \"/about\"\n\t   *\n\t   * whether the url with the default locale\n\t   * should redirect to the url without the locale\n\t   *\n", "   * if a status is given, such as 302,\n\t   * redirectDefaultLocale will be truthy,\n\t   * and all redirects will use that status\n\t   *\n\t   * @defaultValue true\n\t   */\n\t  redirectDefaultLocale?: boolean | ValidRedirectStatus;\n\t}\n\texport type UserI18nMiddlewareConfig = Pick<\n\t  UserI18nConfig,\n", "  \"defaultLocale\" | \"redirectDefaultLocale\"\n\t>;\n\texport type UserDefaultLocaleSitemapFilterConfig = Pick<\n\t  UserI18nConfig,\n\t  \"defaultLocale\"\n\t>;\n\texport type I18nConfig = Required<UserI18nConfig>;\n\texport type I18nMiddlewareConfig = Required<UserI18nMiddlewareConfig>;\n\t// opposite of RequiredFieldsOnly https://stackoverflow.com/a/68261391\n\ttype PartialFieldsOnly<T> = {\n", "  [K in keyof T as T[K] extends Required<T>[K] ? never : K]: T[K];\n\t};\n\t/**\n\t * The default values for I18nConfig\n\t */\n\texport const defaultI18nConfig: Required<PartialFieldsOnly<UserI18nConfig>> = {\n\t  include: [\"pages/**/*\"],\n\t  exclude: [\"pages/api/**/*\"],\n\t  redirectDefaultLocale: true,\n\t};\n", "/**\n\t * The default values for I18nMiddlewareConfig\n\t */\n\texport const defaultI18nMiddlewareConfig: Required<\n\t  PartialFieldsOnly<UserI18nMiddlewareConfig>\n\t> = {\n\t  redirectDefaultLocale: defaultI18nConfig.redirectDefaultLocale,\n\t};\n"]}
{"filename": "src/shared/defaultLocaleSitemapFilter.ts", "chunked_list": ["import type { UserDefaultLocaleSitemapFilterConfig } from \"./configs\";\n\t// sitemap filter https://docs.astro.build/en/guides/integrations-guide/sitemap/#filter\n\texport function defaultLocaleSitemapFilter({\n\t  defaultLocale,\n\t}: UserDefaultLocaleSitemapFilterConfig) {\n\t  return function filter(page: string) {\n\t    const pagePathname = new URL(page).pathname;\n\t    return (\n\t      // avoid catching urls that start with \"/en\" like \"/enigma\"\n\t      pagePathname !== `/${defaultLocale}` &&\n", "      // catch all \"/en/**/*\" urls\n\t      !pagePathname.startsWith(`/${defaultLocale}/`)\n\t    );\n\t  };\n\t}\n"]}
{"filename": "src/shared/index.ts", "chunked_list": ["export { defaultLocaleSitemapFilter } from \"./defaultLocaleSitemapFilter\";\n\texport { defaultI18nConfig, defaultI18nMiddlewareConfig } from \"./configs\";\n\texport type {\n\t  UserI18nConfig,\n\t  UserI18nMiddlewareConfig,\n\t  UserDefaultLocaleSitemapFilterConfig,\n\t} from \"./configs\";\n"]}
{"filename": "src/astro/internal-helpers/path.ts", "chunked_list": ["export function removeLeadingForwardSlashWindows(path: string) {\n\t  return path.startsWith(\"/\") && path[2] === \":\" ? path.substring(1) : path;\n\t}\n"]}
{"filename": "src/astro/logger/core.ts", "chunked_list": ["import { dim } from \"kleur/colors\";\n\timport stringWidth from \"string-width\";\n\tinterface LogWritable<T> {\n\t  write: (chunk: T) => boolean;\n\t}\n\texport type LoggerLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\"; // same as Pino\n\texport type LoggerEvent = \"info\" | \"warn\" | \"error\";\n\texport interface LogOptions {\n\t  dest: LogWritable<LogMessage>;\n\t  level: LoggerLevel;\n", "}\n\t// Hey, locales are pretty complicated! Be careful modifying this logic...\n\t// If we throw at the top-level, international users can't use Astro.\n\t//\n\t// Using `[]` sets the default locale properly from the system!\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#parameters\n\t//\n\t// Here be the dragons we've slain:\n\t// https://github.com/withastro/astro/issues/2625\n\t// https://github.com/withastro/astro/issues/3309\n", "export const dateTimeFormat = new Intl.DateTimeFormat([], {\n\t  hour: \"2-digit\",\n\t  minute: \"2-digit\",\n\t  second: \"2-digit\",\n\t});\n\texport interface LogMessage {\n\t  type: string | null;\n\t  level: LoggerLevel;\n\t  message: string;\n\t}\n", "export const levels: Record<LoggerLevel, number> = {\n\t  debug: 20,\n\t  info: 30,\n\t  warn: 40,\n\t  error: 50,\n\t  silent: 90,\n\t};\n\t/** Full logging API */\n\texport function log(\n\t  opts: LogOptions,\n", "  level: LoggerLevel,\n\t  type: string | null,\n\t  message: string\n\t) {\n\t  const logLevel = opts.level;\n\t  const dest = opts.dest;\n\t  const event: LogMessage = {\n\t    type,\n\t    level,\n\t    message,\n", "  };\n\t  // test if this level is enabled or not\n\t  if (levels[logLevel] > levels[level]) {\n\t    return; // do nothing\n\t  }\n\t  dest.write(event);\n\t}\n\t/** Emit a user-facing message. Useful for UI and other console messages. */\n\texport function info(opts: LogOptions, type: string | null, message: string) {\n\t  return log(opts, \"info\", type, message);\n", "}\n\t/** Emit a warning message. Useful for high-priority messages that aren't necessarily errors. */\n\texport function warn(opts: LogOptions, type: string | null, message: string) {\n\t  return log(opts, \"warn\", type, message);\n\t}\n\t/** Emit a error message, Useful when Astro can't recover from some error. */\n\texport function error(opts: LogOptions, type: string | null, message: string) {\n\t  return log(opts, \"error\", type, message);\n\t}\n\ttype LogFn = typeof info | typeof warn | typeof error;\n", "export function table(opts: LogOptions, columns: number[]) {\n\t  return function logTable(logFn: LogFn, ...input: Array<any>) {\n\t    const message = columns\n\t      .map((len, i) => padStr(input[i].toString(), len))\n\t      .join(\" \");\n\t    logFn(opts, null, message);\n\t  };\n\t}\n\texport function debug(...args: any[]) {\n\t  if (\"_astroGlobalDebug\" in globalThis) {\n", "    (globalThis as any)._astroGlobalDebug(...args);\n\t  }\n\t}\n\tfunction padStr(str: string, len: number) {\n\t  const strLen = stringWidth(str);\n\t  if (strLen > len) {\n\t    return str.substring(0, len - 3) + \"...\";\n\t  }\n\t  const spaces = Array.from({ length: len - strLen }, () => \" \").join(\"\");\n\t  return str + spaces;\n", "}\n\texport let defaultLogLevel: LoggerLevel;\n\tif (typeof process !== \"undefined\") {\n\t  // This could be a shimmed environment so we don't know that `process` is the full\n\t  // NodeJS.process. This code treats it as a plain object so TS doesn't let us\n\t  // get away with incorrect assumptions.\n\t  let proc: object = process;\n\t  if (\"argv\" in proc && Array.isArray(proc.argv)) {\n\t    if (proc.argv.includes(\"--verbose\")) {\n\t      defaultLogLevel = \"debug\";\n", "    } else if (proc.argv.includes(\"--silent\")) {\n\t      defaultLogLevel = \"silent\";\n\t    } else {\n\t      defaultLogLevel = \"info\";\n\t    }\n\t  } else {\n\t    defaultLogLevel = \"info\";\n\t  }\n\t} else {\n\t  defaultLogLevel = \"info\";\n", "}\n\t/** Print out a timer message for debug() */\n\texport function timerMessage(message: string, startTime: number = Date.now()) {\n\t  let timeDiff = Date.now() - startTime;\n\t  let timeDisplay =\n\t    timeDiff < 750\n\t      ? `${Math.round(timeDiff)}ms`\n\t      : `${(timeDiff / 1000).toFixed(1)}s`;\n\t  return `${message}   ${dim(timeDisplay)}`;\n\t}\n"]}
{"filename": "src/astro/logger/console.ts", "chunked_list": ["import { bold, cyan, dim, red, reset, yellow } from \"kleur/colors\";\n\timport type { LogMessage } from \"./core.js\";\n\timport { dateTimeFormat, levels } from \"./core.js\";\n\tlet lastMessage: string;\n\tlet lastMessageCount = 1;\n\texport const consoleLogDestination = {\n\t  write(event: LogMessage) {\n\t    // eslint-disable-next-line no-console\n\t    let dest = console.error;\n\t    if (levels[event.level] < levels[\"error\"]) {\n", "      // eslint-disable-next-line no-console\n\t      dest = console.log;\n\t    }\n\t    function getPrefix() {\n\t      let prefix = \"\";\n\t      let type = event.type;\n\t      if (type) {\n\t        // hide timestamp when type is undefined\n\t        prefix += dim(dateTimeFormat.format(new Date()) + \" \");\n\t        if (event.level === \"info\") {\n", "          type = bold(cyan(`[${type}]`));\n\t        } else if (event.level === \"warn\") {\n\t          type = bold(yellow(`[${type}]`));\n\t        } else if (event.level === \"error\") {\n\t          type = bold(red(`[${type}]`));\n\t        }\n\t        prefix += `${type} `;\n\t      }\n\t      return reset(prefix);\n\t    }\n", "    let message = event.message;\n\t    // For repeat messages, only update the message counter\n\t    if (message === lastMessage) {\n\t      lastMessageCount++;\n\t      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;\n\t    } else {\n\t      lastMessage = message;\n\t      lastMessageCount = 1;\n\t    }\n\t    const outMessage = getPrefix() + message;\n", "    dest(outMessage);\n\t    return true;\n\t  },\n\t};\n"]}
{"filename": "src/astro/logger/node.ts", "chunked_list": ["import debugPackage from \"debug\";\n\timport { bold, cyan, dim, red, reset, yellow } from \"kleur/colors\";\n\timport * as readline from \"readline\";\n\timport { Writable } from \"stream\";\n\timport stringWidth from \"string-width\";\n\timport { dateTimeFormat, error, info, warn } from \"./core.js\";\n\ttype ConsoleStream = Writable & {\n\t  fd: 1 | 2;\n\t};\n\tlet lastMessage: string;\n", "let lastMessageCount = 1;\n\texport const nodeLogDestination = new Writable({\n\t  objectMode: true,\n\t  write(event: LogMessage, _, callback) {\n\t    let dest: ConsoleStream = process.stderr;\n\t    if (levels[event.level] < levels[\"error\"]) {\n\t      dest = process.stdout;\n\t    }\n\t    function getPrefix() {\n\t      let prefix = \"\";\n", "      let type = event.type;\n\t      if (type) {\n\t        // hide timestamp when type is undefined\n\t        prefix += dim(dateTimeFormat.format(new Date()) + \" \");\n\t        if (event.level === \"info\") {\n\t          type = bold(cyan(`[${type}]`));\n\t        } else if (event.level === \"warn\") {\n\t          type = bold(yellow(`[${type}]`));\n\t        } else if (event.level === \"error\") {\n\t          type = bold(red(`[${type}]`));\n", "        }\n\t        prefix += `${type} `;\n\t      }\n\t      return reset(prefix);\n\t    }\n\t    // console.log({msg: event.message, args: event.args});\n\t    let message = event.message;\n\t    // For repeat messages, only update the message counter\n\t    if (message === lastMessage) {\n\t      lastMessageCount++;\n", "      if (levels[event.level] < levels[\"error\"]) {\n\t        let lines = 1;\n\t        let len = stringWidth(`${getPrefix()}${message}`);\n\t        let cols = (dest as unknown as typeof process.stdout).columns;\n\t        if (len > cols) {\n\t          lines = Math.ceil(len / cols);\n\t        }\n\t        for (let i = 0; i < lines; i++) {\n\t          readline.clearLine(dest, 0);\n\t          readline.cursorTo(dest, 0);\n", "          readline.moveCursor(dest, 0, -1);\n\t        }\n\t      }\n\t      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;\n\t    } else {\n\t      lastMessage = message;\n\t      lastMessageCount = 1;\n\t    }\n\t    dest.write(getPrefix());\n\t    dest.write(message);\n", "    dest.write(\"\\n\");\n\t    callback();\n\t  },\n\t});\n\tinterface LogWritable<T> {\n\t  write: (chunk: T) => boolean;\n\t}\n\texport type LoggerLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\"; // same as Pino\n\texport type LoggerEvent = \"info\" | \"warn\" | \"error\";\n\texport interface LogOptions {\n", "  dest?: LogWritable<LogMessage>;\n\t  level?: LoggerLevel;\n\t}\n\texport const nodeLogOptions: Required<LogOptions> = {\n\t  dest: nodeLogDestination,\n\t  level: \"info\",\n\t};\n\texport interface LogMessage {\n\t  type: string | null;\n\t  level: LoggerLevel;\n", "  message: string;\n\t}\n\texport const levels: Record<LoggerLevel, number> = {\n\t  debug: 20,\n\t  info: 30,\n\t  warn: 40,\n\t  error: 50,\n\t  silent: 90,\n\t};\n\tconst debuggers: Record<string, debugPackage.Debugger[\"log\"]> = {};\n", "/**\n\t * Emit a message only shown in debug mode.\n\t * Astro (along with many of its dependencies) uses the `debug` package for debug logging.\n\t * You can enable these logs with the `DEBUG=astro:*` environment variable.\n\t * More info https://github.com/debug-js/debug#environment-variables\n\t */\n\texport function debug(type: string, ...messages: Array<any>) {\n\t  const namespace = `astro:${type}`;\n\t  debuggers[namespace] = debuggers[namespace] || debugPackage(namespace);\n\t  return debuggers[namespace](...messages);\n", "}\n\t// This is gross, but necessary since we are depending on globals.\n\t(globalThis as any)._astroGlobalDebug = debug;\n\t// A default logger for when too lazy to pass LogOptions around.\n\texport const logger = {\n\t  info: info.bind(null, nodeLogOptions),\n\t  warn: warn.bind(null, nodeLogOptions),\n\t  error: error.bind(null, nodeLogOptions),\n\t};\n\texport function enableVerboseLogging() {\n", "  debug(\"cli\", '--verbose flag enabled! Enabling: DEBUG=\"*,-babel\"');\n\t  debug(\n\t    \"cli\",\n\t    'Tip: Set the DEBUG env variable directly for more control. Example: \"DEBUG=astro:*,vite:* astro build\".'\n\t  );\n\t}\n"]}
