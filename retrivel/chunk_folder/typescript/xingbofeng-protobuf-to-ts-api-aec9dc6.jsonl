{"filename": "api/example/test.ts", "chunked_list": ["/* eslint-disable */\n\timport request from axios;\n\timport api from './test.d';\n\texport function GetExampleData(req: api.test.IGetExampleDataReq): Promise<api.test.IGetExampleDataRsp> {\n\t  return request.get('/GetExampleData', { params: req });\n\t};\n\texport function PostExampleData(req: api.test.IPostExampleDataReq): Promise<api.test.IPostExampleDataRsp> {\n\t  return request.post('/PostExampleData', req);\n\t};\n"]}
{"filename": "api/example/test.d.ts", "chunked_list": ["/** Namespace test. */\n\texport namespace test {\n\t    /** Status enum. */\n\t    enum Status {\n\t        SUCCESS = 0,\n\t        FAIL = 1,\n\t        UNKNOWN = 2\n\t    }\n\t    /** Properties of a GetExampleDataReq. */\n\t    interface IGetExampleDataReq {\n", "        /** GetExampleDataReq id */\n\t        id: number;\n\t        /** GetExampleDataReq name */\n\t        name: string;\n\t    }\n\t    /** Properties of a GetExampleDataRsp. */\n\t    interface IGetExampleDataRsp {\n\t        /** GetExampleDataRsp status */\n\t        status: test.Status[];\n\t        /** GetExampleDataRsp msg */\n", "        msg: string;\n\t        /** GetExampleDataRsp city */\n\t        city: string;\n\t        /** GetExampleDataRsp code */\n\t        code: number;\n\t    }\n\t    /** Properties of a PostExampleDataReq. */\n\t    interface IPostExampleDataReq {\n\t        /** PostExampleDataReq id */\n\t        id: number;\n", "        /** PostExampleDataReq name */\n\t        name: string;\n\t    }\n\t    /** Properties of a PostExampleDataRsp. */\n\t    interface IPostExampleDataRsp {\n\t        /** PostExampleDataRsp status */\n\t        status: test.Status[];\n\t        /** PostExampleDataRsp msg */\n\t        msg: string;\n\t        /** PostExampleDataRsp code */\n", "        code: number;\n\t    }\n\t    namespace API {\n\t    }\n\t}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import chalk from 'chalk';\n\timport { Express } from 'express';\n\timport glob from 'glob';\n\timport minimist from 'minimist';\n\timport { IOptions } from './interfaces/IOptions';\n\timport { initServer } from './modules/mockServer';\n\timport { transferTSFile } from './modules/transferTSFile';\n\tconst getUsage = () =>\n\t  `Usage: ${chalk.bold.green('pb2TSApi')} [options] ${chalk.bold.red('[file1.proto file2.proto ...]')} or ${chalk.bold.red('[./**/*.proto]')}`;\n\tconst getHelp = () =>\n", "  `Help:\n\t${chalk.bold.green('--requestModule -r')}: the request module of you want to set, default is ${chalk.bold.red('\\'axios\\'')}, you can set to your custom request method, for example ${chalk.bold.red('\\'@/request\\'')};\n\t${chalk.bold.green('--baseUrl -b')}: the base url of you want to set, default is ${chalk.bold.red('\\'/\\'')}, you can set to your api path, for example ${chalk.bold.red('\\'/api\\'')};\n\t${chalk.bold.green('--folder -f')}: the folder of you want to save the output files, default is ${chalk.bold.red('\\'./api\\'')};\n\t${chalk.bold.green('--root -r')}: the root path set to protobufjs, default is ${chalk.bold.red('the path of this command run')};\n\t${chalk.bold.green('--optional -o')}: is transfrom d.ts optional to false, because of protobuf 3.0 set all filed is optional, default is ${chalk.bold.red('true')};\n\t${chalk.bold.green('--mock -m')}: is open mock server, default is ${chalk.bold.red('false')};\n\t${chalk.bold.green('--port -p')}: mock server port, default is ${chalk.bold.red('3000')};\n\t`;\n\texport async function main() {\n", "  try {\n\t    const argv = minimist(process.argv.slice(2), {\n\t      alias: {\n\t        requestModule: 'r',\n\t        baseUrl: 'b',\n\t        folder: 'f',\n\t        root: 'r',\n\t        optional: 'o',\n\t        mock: 'm',\n\t        port: 'p',\n", "        help: 'h',\n\t      },\n\t      string: ['requestModule', 'baseUrl', 'folder', 'root', 'port'],\n\t      boolean: ['optional', 'mock'],\n\t      default: {\n\t        requestModule: 'axios',\n\t        baseUrl: '/',\n\t        folder: './api',\n\t        root: process.cwd(),\n\t        optional: true,\n", "        mock: false,\n\t        port: '3000',\n\t        help: '',\n\t      },\n\t    });\n\t    if (argv.help) {\n\t      process.stderr.write(getHelp());\n\t      process.exit(1);\n\t    }\n\t    const { _: files } = argv;\n", "    const options: IOptions = {\n\t      requestModule: argv.requestModule,\n\t      baseUrl: argv.baseUrl,\n\t      folder: argv.folder,\n\t      root: argv.root,\n\t      optional: argv.optional,\n\t      mock: argv.mock,\n\t      port: argv.port,\n\t      help: argv.help,\n\t    };\n", "    if (!files.length) {\n\t      process.stderr.write(getUsage());\n\t      process.exit(1);\n\t    }\n\t    const protoFiles = await glob(files, { ignore: 'node_modules/**', windowsPathsNoEscape: true });\n\t    if (!protoFiles.length) {\n\t      process.stderr.write(chalk.bold.red(`there is not files for the flowing paths: \\n ${files.join('\\n')}`));\n\t      process.exit(1);\n\t    }\n\t    let mockServer: Express;\n", "    if (options.mock) {\n\t      mockServer = initServer(options);\n\t    }\n\t    await Promise.all(protoFiles.map(filePath => transferTSFile(filePath, mockServer, options)));\n\t  } catch (err) {\n\t    console.error(err);\n\t    process.exit(1);\n\t  }\n\t}\n\tmain();\n"]}
{"filename": "src/utils/getRequestMethod.ts", "chunked_list": ["import { RequestMethods } from '../interfaces/RequestMethods';\n\texport function getRequestMethod(apiName: string): RequestMethods {\n\t  return /post/.test(apiName.toLowerCase()) ? RequestMethods.post : RequestMethods.get;\n\t}\n"]}
{"filename": "src/interfaces/RequestMethods.ts", "chunked_list": ["export enum RequestMethods {\n\t  post = 'post',\n\t  get = 'get',\n\t}\n"]}
{"filename": "src/interfaces/IOptions.ts", "chunked_list": ["export interface IOptions {\n\t  requestModule: string;\n\t  baseUrl: string;\n\t  folder: string;\n\t  root: string;\n\t  optional: boolean;\n\t  mock: boolean;\n\t  port: string;\n\t  help: string;\n\t}\n"]}
{"filename": "src/modules/mockServer.ts", "chunked_list": ["import express, { Express } from 'express';\n\timport fs from 'fs';\n\timport { IOptions } from '../interfaces/IOptions';\n\timport { getRequestMethod } from '../utils/getRequestMethod';\n\t/**\n\t * 初始化 mock server\n\t * @param {IOptions} options 用户自定义配置\n\t * @returns {Express} mockServer 通过express实例化的mock server app\n\t */\n\texport function initServer(options: IOptions) {\n", "  const mockServer = express();\n\t  const { port = '3000' } = options;\n\t  mockServer.listen(+port, () => {\n\t    console.log(`mock server listening on port ${port}`);\n\t  });\n\t  return mockServer;\n\t}\n\t/**\n\t * 拿到mock文件，生成mock server\n\t * @param {String} mockFilePath mock文件的路径\n", " * @param {Express} mockServer express server 对象\n\t * @param {IOptions} options 用户自定义配置\n\t */\n\texport async function generateMockRoute(mockFilePath: string, mockServer: Express, options: IOptions) {\n\t  const { baseUrl } = options;\n\t  const mockFile = await fs.promises.readFile(mockFilePath, { encoding: 'utf-8' });\n\t  const json = JSON.parse(mockFile);\n\t  for (const apiName in json) {\n\t    if (Object.hasOwnProperty.call(json, apiName)) {\n\t      const requestMethod = getRequestMethod(apiName);\n", "      mockServer[requestMethod](`${baseUrl}${apiName}`, (req, res) => {\n\t        res.send(json[apiName]);\n\t      });\n\t      console.log(`mockServer generate mock route: ${baseUrl}${apiName} success`);\n\t    }\n\t  }\n\t}\n"]}
{"filename": "src/modules/saveJSONSchemaFile.ts", "chunked_list": ["import fs from 'fs';\n\timport path from 'path';\n\timport { buildGenerator, getProgramFromFiles } from 'typescript-json-schema';\n\t/**\n\t * 生成前端api请求JSON Schema 文件\n\t * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n\t * @returns {String} jsonSchemaFilePath 生成的json schema 文件路径\n\t */\n\texport async function saveJSONSchemaFile(pbtsFilePath: string) {\n\t  const settings = {\n", "    required: true,\n\t  };\n\t  const compilerOptions = {\n\t    strictNullChecks: true,\n\t  };\n\t  const program = getProgramFromFiles([path.resolve(pbtsFilePath)], compilerOptions, process.cwd());\n\t  const generator = buildGenerator(program, settings);\n\t  const symbols = (generator?.getUserSymbols() || []).filter(symbol => /I(\\S*)Rsp$/.test(symbol));\n\t  const schema = generator?.getSchemaForSymbols(symbols);\n\t  const jsonSchemaFilePath = pbtsFilePath.replace('.d.ts', '.json');\n", "  await fs.promises.writeFile(jsonSchemaFilePath, JSON.stringify(schema, null, 2), { encoding: 'utf-8' });\n\t  return jsonSchemaFilePath;\n\t}\n"]}
{"filename": "src/modules/transferTSFile.ts", "chunked_list": ["import { Express } from 'express';\n\timport fs from 'fs';\n\timport path from 'path';\n\timport { IOptions } from '../interfaces/IOptions';\n\timport { getPbjsFile } from './getPbjsFile';\n\timport { getPbtsFile } from './getPbtsFile';\n\timport { generateMockRoute } from './mockServer';\n\timport { saveApiFile } from './saveApiFile';\n\timport { saveJSONSchemaFile } from './saveJSONSchemaFile';\n\timport { saveMockJSONFile } from './saveMockJSONFile';\n", "import { saveTypeScriptDefineFile } from './saveTypeScriptDefineFile';\n\t/**\n\t * 转换protobuf定义文件为ts定义文件和api请求文件\n\t * @param {String} filePath protobuf定义文件的路径\n\t * @param {Express} mockServer mockServer对象，是一个express实例化的对象\n\t * @param {Object} options 用户自定义配置\n\t */\n\texport async function transferTSFile(filePath: string, mockServer: Express, options: IOptions) {\n\t  const pbjsFilePath = await getPbjsFile(filePath, options);\n\t  const pbtsFilePath = await getPbtsFile(pbjsFilePath, options);\n", "  await fs.promises.unlink(pbjsFilePath);\n\t  await saveTypeScriptDefineFile(pbtsFilePath, options);\n\t  await saveApiFile(pbtsFilePath, options);\n\t  const jsonSchemaFilePath = await saveJSONSchemaFile(pbtsFilePath);\n\t  const mockFilePath = await saveMockJSONFile(jsonSchemaFilePath);\n\t  console.log(`success generate ${filePath} to ${path.resolve(options.folder, filePath)}.d.ts and ${path.resolve(options.folder, filePath)}.ts`);\n\t  if (options.mock && mockServer) {\n\t    console.log('begin open mock server');\n\t    await generateMockRoute(mockFilePath, mockServer, options);\n\t  }\n", "}\n"]}
{"filename": "src/modules/travelAllModule.ts", "chunked_list": ["import { ModuleDeclaration } from 'ts-morph';\n\t/**\n\t * 递归一个ts文件下所有模块\n\t * @param {ModuleDeclaration[]} modules 通过ts-morph生成模块声明\n\t * @param {Function} callback 递归一个ts文件所有模块下对于每个模块的回调函数\n\t * @param {String} parentName 递归到当前模块，所有父级namespace的名称，通过.符号分割\n\t */\n\texport function travelAllModule(modules: ModuleDeclaration[], callback: (module: ModuleDeclaration, fullName: string) => void, parentName = '') {\n\t  for (const module of modules) {\n\t    const children = module.getModules();\n", "    const hasModule = children.length > 0;\n\t    const fullName = `${parentName ? `${parentName}.` : ''}${module.getName()}`;\n\t    callback(module, fullName);\n\t    if (hasModule) {\n\t      travelAllModule(children, callback, fullName);\n\t    }\n\t  }\n\t}\n"]}
{"filename": "src/modules/saveApiFile.ts", "chunked_list": ["import fs from 'fs';\n\timport path from 'path';\n\timport { Project } from 'ts-morph';\n\timport { IOptions } from '../interfaces/IOptions';\n\timport { RequestMethods } from '../interfaces/RequestMethods';\n\timport { getRequestMethod } from '../utils/getRequestMethod';\n\timport { travelAllModule } from './travelAllModule';\n\tconst getLinePerfix = (requestModule: string, tsDefineFilename: string) =>\n\t  `/* eslint-disable */\n\timport request from ${requestModule};\n", "import api from './${tsDefineFilename.replace('.ts', '')}';\n\t`;\n\tconst getLine = (apiName: string, reqName: string, rspName: string, requestMethod: RequestMethods, baseUrl: string) => `\n\texport function ${apiName}(req: api.${reqName}): Promise<api.${rspName}> {\n\t  return request.${requestMethod}('${baseUrl}${apiName}', ${requestMethod === 'post' ? 'req' : '{ params: req }'});\n\t};\n\t`;\n\t/**\n\t * 生成前端api请求文件\n\t * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n", " * @param {Object} options 用户传入的自定义配置选项\n\t */\n\texport async function saveApiFile(pbtsFilePath: string, options: IOptions) {\n\t  const {\n\t    requestModule,\n\t    baseUrl,\n\t  } = options;\n\t  // 获取当前d.ts文件的目录名称和文件名称\n\t  const tsDefineDirname = path.dirname(pbtsFilePath);\n\t  const tsDefineFilename = path.basename(pbtsFilePath);\n", "  let apiline = '';\n\t  apiline += getLinePerfix(\n\t    requestModule,\n\t    tsDefineFilename,\n\t  );\n\t  const project = new Project();\n\t  project.addSourceFileAtPath(pbtsFilePath);\n\t  const file = project.getSourceFileOrThrow(pbtsFilePath);\n\t  const modules = file.getModules();\n\t  travelAllModule(modules, (module, parentName) => {\n", "    const interfaces = module.getInterfaces();\n\t    interfaces.length && interfaces.forEach(i => {\n\t      const reqName = i.getName();\n\t      // 找到请求的interface名称\n\t      const reqNameMatchs = reqName.match(/^I(\\S*)Req$/);\n\t      if (reqNameMatchs && reqNameMatchs.length) {\n\t        const apiName = reqNameMatchs[1];\n\t        // 找到返回值的interface\n\t        const rspName = `I${apiName}Rsp`;\n\t        const rsp = interfaces.find(item => item.getName() === rspName);\n", "        if (!rsp) {\n\t          return;\n\t        }\n\t        apiline += getLine(\n\t          apiName,\n\t          `${parentName}.${reqName}`,\n\t          `${parentName}.${rspName}`,\n\t          getRequestMethod(apiName),\n\t          baseUrl,\n\t        );\n", "      }\n\t    });\n\t  });\n\t  await fs.promises.writeFile(path.resolve(tsDefineDirname, tsDefineFilename.replace('.d.ts', '.ts')), apiline);\n\t}\n"]}
{"filename": "src/modules/saveTypeScriptDefineFile.ts", "chunked_list": ["import { ImportDeclaration, Project } from 'ts-morph';\n\timport { IOptions } from '../interfaces/IOptions';\n\timport { travelAllModule } from './travelAllModule';\n\t/**\n\t * 去除protobuf-cli生成的d.ts文件中的冗余的class模块\n\t * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n\t * @param {Object} options 用户传入的自定义配置选项\n\t */\n\texport async function saveTypeScriptDefineFile(pbtsFilePath: string, options: IOptions) {\n\t  const project = new Project();\n", "  project.addSourceFileAtPath(pbtsFilePath);\n\t  const file = project.getSourceFileOrThrow(pbtsFilePath);\n\t  const modules = file.getModules();\n\t  // 去掉生成的import\n\t  file.getImportDeclarations().forEach(i => i.remove());\n\t  // 对于importString的处理\n\t  file.getImportStringLiterals().forEach(i => {\n\t    const p = i.getParent()?.getParent() as ImportDeclaration;\n\t    p.remove();\n\t  });\n", "  travelAllModule(modules, module => {\n\t    // 去掉生成的class\n\t    const classes = module.getClasses();\n\t    classes.forEach(c => c.remove());\n\t    // 去掉生成的rpc-type\n\t    const typeAliases = module.getTypeAliases();\n\t    typeAliases.forEach(t => t.remove());\n\t    if (!options.optional) {\n\t      module.getInterfaces().forEach(item => {\n\t        const structure = item.getStructure();\n", "        structure.properties?.forEach(property => {\n\t          property.hasQuestionToken = false;\n\t          if (typeof property.type === 'string') {\n\t            property.type = property.type.replace(/^\\((\\S*)\\|null\\)$/, '$1');\n\t          }\n\t        });\n\t        item.set(structure);\n\t      });\n\t    }\n\t  });\n", "  project.saveSync();\n\t}\n"]}
{"filename": "src/modules/saveMockJSONFile.ts", "chunked_list": ["import fs from 'fs';\n\timport { JSONSchemaFaker } from 'json-schema-faker';\n\timport { JsonObject, JsonValue } from 'type-fest';\n\t/**\n\t * 生成前端api请求 mock 文件\n\t * @param {String} jsonSchemaFilePath 生成的JSON Schema 文件的路径\n\t */\n\texport async function saveMockJSONFile(jsonSchemaFilePath: string) {\n\t  const schemaFileStr = await fs.promises.readFile(jsonSchemaFilePath, { encoding: 'utf-8' });\n\t  const schema = JSON.parse(schemaFileStr.replace(/(?<=#\\/)definitions\\//g, ''));\n", "  const jsfResult = await JSONSchemaFaker.resolve(schema.definitions) as JsonObject;\n\t  const json: Record<string, JsonValue> = {};\n\t  for (const key in jsfResult) {\n\t    if (Object.hasOwnProperty.call(jsfResult, key)) {\n\t      const rspNameMatchs = key.match(/I(\\S*)Rsp$/);\n\t      if (rspNameMatchs && rspNameMatchs.length) {\n\t        const apiName = rspNameMatchs[1];\n\t        json[apiName] = jsfResult[key];\n\t      }\n\t    }\n", "  }\n\t  const fileContent = JSON.stringify(json, null, 2);\n\t  const mockFilePath = jsonSchemaFilePath.replace('.json', '.mock.json');\n\t  fs.writeFileSync(mockFilePath, fileContent, { encoding: 'utf-8' });\n\t  return mockFilePath;\n\t}\n"]}
{"filename": "src/modules/getPbjsFile.ts", "chunked_list": ["import mkdirp from 'mkdirp';\n\timport path from 'path';\n\timport pbjs from 'protobufjs-cli/pbjs';\n\timport { IOptions } from '../interfaces/IOptions';\n\t/**\n\t * 通过protobuf-cli生成临时的js文件，用于再生成ts文件，生成ts文件后，删掉临时的js文件\n\t * @param {String} filePath proto文件的路径\n\t * @returns {Promise<string>} 生成临时的js文件的路径\n\t */\n\texport async function getPbjsFile(filePath: string, options: IOptions): Promise<string> {\n", "  const { folder = '' } = options;\n\t  const fileName = filePath.replace('.proto', '.js');\n\t  const pbjsFilePath = path.resolve(process.cwd(), folder, fileName);\n\t  const p = path.dirname(pbjsFilePath);\n\t  await mkdirp(p);\n\t  return new Promise((resolve, reject) => {\n\t    pbjs.main(['-p', options.root, '-t', 'static-module', '-w', 'commonjs', '-o', pbjsFilePath, path.resolve(process.cwd(), filePath)], err => {\n\t      if (err) {\n\t        reject(err);\n\t      }\n", "      resolve(pbjsFilePath);\n\t    });\n\t  });\n\t}\n"]}
{"filename": "src/modules/getPbtsFile.ts", "chunked_list": ["import path from 'path';\n\timport pbts from 'protobufjs-cli/pbts';\n\timport { IOptions } from '../interfaces/IOptions';\n\t/**\n\t * 通过protobuf-cli生成d.ts文件\n\t * @param {String} pbjsFilePath 生成的js文件的路径\n\t * @returns {Promise<string>} 生成临时的js文件的路径\n\t */\n\texport function getPbtsFile(pbjsFilePath: string, options: IOptions): Promise<string> {\n\t  const { folder = '' } = options;\n", "  const pbtsFilePath = path.resolve(process.cwd(), folder, pbjsFilePath.replace('.js', '.d.ts'));\n\t  return new Promise((resolve, reject) => {\n\t    pbts.main(['-p', options.root, '-o', pbtsFilePath, pbjsFilePath], err => {\n\t      if (err) {\n\t        reject(err);\n\t      }\n\t      resolve(pbtsFilePath);\n\t    });\n\t  });\n\t}\n"]}
