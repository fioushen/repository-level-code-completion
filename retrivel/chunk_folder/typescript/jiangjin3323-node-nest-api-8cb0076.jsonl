{"filename": "test/app.e2e-spec.ts", "chunked_list": ["import * as request from 'supertest';\n\timport { Test } from '@nestjs/testing';\n\timport { AppModule } from './../src/app.module';\n\timport { INestApplication } from '@nestjs/common';\n\tdescribe('AppController (e2e)', () => {\n\t  let app: INestApplication;\n\t  beforeAll(async () => {\n\t    const moduleFixture = await Test.createTestingModule({\n\t      imports: [AppModule],\n\t    }).compile();\n", "    app = moduleFixture.createNestApplication();\n\t    await app.init();\n\t  });\n\t  afterAll(async () => {\n\t    await app.close();\n\t  });\n\t  it('/ (GET)', () => {\n\t    return request(app.getHttpServer())\n\t      .get('/')\n\t      .expect(200)\n", "      .expect('Hello World!');\n\t  });\n\t});\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\n\timport { AppModule } from './app.module';\n\timport { middleWareAll } from './auth/auth';\n\timport { HttpFilter } from './common/errFilter';\n\timport * as cors from 'cors';\n\tasync function bootstrap() {\n\t  const app = await NestFactory.create(AppModule);\n\t  app.setGlobalPrefix('api/v1'); // 设置全局路由前缀\n\t  app.use(cors()); //处理跨域\n\t  app.use(middleWareAll); //全局中间件\n", "  app.useGlobalFilters(new HttpFilter()); //全局异常拦截\n\t  await app.listen(3200);\n\t}\n\tbootstrap();\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { UserModule } from './api/user/user.module';\n\timport { BannerModule } from './api/banner/banner.module';\n\timport { HeaderModule } from './api/header/header.module';\n\timport { ProductModule } from './api/product/product.module';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\t@Module({\n\t  imports: [\n\t    UserModule,\n\t    BannerModule,\n", "    HeaderModule,\n\t    ProductModule,\n\t    TypeOrmModule.forRoot({\n\t      type: 'mysql', // 数据库类型\n\t      host: 'localhost', // 数据库的连接地址host\n\t      port: 3306, // 数据库的端口 3306\n\t      username: 'root', // 连接账号\n\t      password: '12345678', // 连接密码\n\t      database: 'test', // 连接的库名\n\t      retryDelay: 500, // 重试连接数据库间隔\n", "      retryAttempts: 10, // 允许重连次数\n\t      synchronize: true, // 是否将实体同步到数据库\n\t      autoLoadEntities: true, // 自动加载实体配置，forFeature()注册的每个实体都自己动加载\n\t    }),\n\t  ],\n\t  controllers: [],\n\t  providers: [],\n\t})\n\texport class AppModule {}\n"]}
{"filename": "src/entity/header.entity.ts", "chunked_list": ["import {\n\t    Entity,\n\t    Column,\n\t    PrimaryGeneratedColumn,\n\t    CreateDateColumn,\n\t  } from 'typeorm';\n\t  @Entity()\n\t  export class Header {\n\t    @PrimaryGeneratedColumn()\n\t    id: number;\n", "    @Column()\n\t    title: string;\n\t    @Column()\n\t    linkUrl?: string;\n\t    @CreateDateColumn()\n\t    createTime?: Date;\n\t    @CreateDateColumn()\n\t    updataTime?: Date;\n\t  }\n"]}
{"filename": "src/entity/product.entity.ts", "chunked_list": ["import {\n\t    Entity,\n\t    Column,\n\t    PrimaryGeneratedColumn,\n\t    CreateDateColumn,\n\t  } from 'typeorm';\n\t  @Entity()\n\t  export class Product {\n\t    @PrimaryGeneratedColumn()\n\t    id: number;\n", "    @Column()\n\t    img: string;\n\t    @Column()\n\t    title: string;\n\t    @Column()\n\t    name: string;\n\t    @Column()\n\t    type?: string;\n\t    @CreateDateColumn()\n\t    createTime?: Date;\n", "    @CreateDateColumn()\n\t    updataTime?: Date;\n\t    constructor(partial: Partial<Product>) {\n\t        Object.assign(this, partial);\n\t        this.type = this.type || 'xiaomi'; // 默认设置为xiaomi\n\t      }\n\t  }\n"]}
{"filename": "src/entity/user.entity.ts", "chunked_list": ["import {\n\t  Entity,\n\t  Column,\n\t  PrimaryGeneratedColumn,\n\t  CreateDateColumn,\n\t} from 'typeorm';\n\t@Entity()\n\texport class User {\n\t  @PrimaryGeneratedColumn()\n\t  id: number;\n", "  @Column()\n\t  name: string;\n\t  @Column()\n\t  sign: string;\n\t  @Column()\n\t  account: string;\n\t  @Column()\n\t  password: string;\n\t  @CreateDateColumn()\n\t  createTime?: Date;\n", "  @CreateDateColumn()\n\t  loginTime?: Date;\n\t}\n"]}
{"filename": "src/entity/banner.entity.ts", "chunked_list": ["import {\n\t  Entity,\n\t  Column,\n\t  PrimaryGeneratedColumn,\n\t  CreateDateColumn,\n\t} from 'typeorm';\n\t@Entity()\n\texport class Banner {\n\t  @PrimaryGeneratedColumn()\n\t  id: number;\n", "  @Column()\n\t  title?: string;\n\t  @Column()\n\t  url: string;\n\t  @Column()\n\t  linkUrl?: string;\n\t  @CreateDateColumn()\n\t  createTime?: Date;\n\t  @CreateDateColumn()\n\t  updataTime?: Date;\n", "}\n"]}
{"filename": "src/auth/auth.ts", "chunked_list": ["import { Request, Response, NextFunction } from 'express';\n\timport { HttpStatus } from '@nestjs/common';\n\timport * as jwt from 'jsonwebtoken';\n\t/************ token 鉴权 中间件 start ***************/\n\tconst whiteList: string[] = ['/api/v1/login'];\n\texport const middleWareAll = async (\n\t  req: Request,\n\t  res: Response,\n\t  next: NextFunction,\n\t) => {\n", "  console.log('全局中间件！');\n\t  if (whiteList.includes(req.originalUrl)) {\n\t    next();\n\t    return;\n\t  }\n\t  //get 请求不鉴权\n\t  if (req.method === 'GET') {\n\t    next();\n\t    return;\n\t  }\n", "  const token = req.headers.authorization;\n\t  if (!token) {\n\t    return res.status(HttpStatus.UNAUTHORIZED).json({\n\t      data: null,\n\t      msg: '身份信息未验证通过～',\n\t      code: HttpStatus.UNAUTHORIZED,\n\t    });\n\t  }\n\t  try {\n\t    const res = jwt.verify(token, 'mysecretkey');\n", "    next();\n\t  } catch (e) {\n\t    return res.status(HttpStatus.UNAUTHORIZED).json({\n\t      data: null,\n\t      msg: '身份信息已过期',\n\t      code: HttpStatus.UNAUTHORIZED,\n\t    });\n\t  }\n\t};\n\t/************ token 鉴权 中间件 end ***************/\n"]}
{"filename": "src/common/errFilter.ts", "chunked_list": ["import { ExceptionFilter, Catch, ArgumentsHost,HttpException } from '@nestjs/common'\n\timport {Request,Response} from 'express'\n\t //全局错误拦截\n\t@Catch(HttpException)\n\texport class HttpFilter implements ExceptionFilter {\n\t    catch(exception:HttpException, host: ArgumentsHost) {\n\t        const ctx = host.switchToHttp()\n\t        const request = ctx.getRequest<Request>()\n\t        const response = ctx.getResponse<Response>()\n\t        const status = exception.getStatus()\n", "        response.status(status).json({\n\t           data:null,\n\t           msg:exception.message,\n\t           code:status,\n\t        })\n\t    }\n\t}"]}
{"filename": "src/type/type.ts", "chunked_list": ["export interface interfaceReturnType {\n\t  msg: string;\n\t  data: any;\n\t  code: number;\n\t}\n"]}
{"filename": "src/api/user/user.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { UserController } from './user.controller';\n\timport { UserService } from './user.service';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\timport { User } from '../../entity/user.entity';\n\t@Module({\n\t  controllers: [UserController],\n\t  providers: [UserService],\n\t  imports:[TypeOrmModule.forFeature([User]),]\n\t})\n", "export class UserModule {}\n"]}
{"filename": "src/api/user/user.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\n\timport { UserService } from './user.service';\n\timport { interfaceReturnType } from '../../type/type';\n\timport { Response } from 'express';\n\t@Controller('login')\n\texport class UserController {\n\t  constructor(private readonly userService: UserService) {}\n\t  @Post()\n\t  async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n\t    const res = await this.userService.loginAndRegister(user);\n", "    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t  @Get('user')\n\t  async userListFunc(@Res() Res: Response):Promise<interfaceReturnType>  {\n\t    const res = await this.userService.findUserAll();\n\t    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t}"]}
{"filename": "src/api/user/user.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\n\timport { InjectRepository } from '@nestjs/typeorm';\n\timport { Repository } from 'typeorm';\n\timport * as jwt from 'jsonwebtoken';\n\timport { User } from '../../entity/user.entity';\n\timport { interfaceReturnType } from '../../type/type';\n\t@Injectable()\n\texport class UserService {\n\t  private readonly JWT_SECRET = 'mysecretkey';\n\t  constructor(\n", "    @InjectRepository(User)\n\t    private readonly userList: Repository<User>,\n\t  ) {}\n\t  //查询user表指定用户函数\n\t  async findUser(user: { account: string }): Promise<User[]> {\n\t    const userList = await this.userList.find({\n\t      where: user,\n\t    });\n\t    return userList;\n\t  }\n", "  //查询所有用户\n\t  async findUserAll(): Promise<interfaceReturnType> {\n\t    const userList = await this.userList.find();\n\t    return {\n\t      code: HttpStatus.OK,\n\t      data: userList,\n\t      msg: 'ok',\n\t    };\n\t  }\n\t  //登录函数\n", "  async login(\n\t    user: {\n\t      account: string;\n\t      password: string;\n\t    },\n\t    userList: User[],\n\t  ): Promise<interfaceReturnType> {\n\t    if (userList[0].password === user.password) {\n\t      const token: string = await this.createToken(userList[0].id);\n\t      await this.userList.update(userList[0].id, {\n", "        loginTime: new Date(),\n\t        sign: token,\n\t      });\n\t      return {\n\t        msg: ' OK',\n\t        data: {\n\t          name: userList[0].name,\n\t          sign: token,\n\t        },\n\t        code: HttpStatus.OK,\n", "      };\n\t    }\n\t    throw new BadRequestException('账号或密码输入错误～');\n\t  }\n\t  //注册函数\n\t  async register(user: {\n\t    account: string;\n\t    password: string;\n\t  }): Promise<interfaceReturnType> {\n\t    await this.userList.save({\n", "      ...user,\n\t      name: user.account,\n\t      sign: '',\n\t    });\n\t    const userList: User[] = await this.findUser({ account: user.account });\n\t    const token: string = await this.createToken(userList[0].id);\n\t    await this.userList.update(userList[0].id, {\n\t      ...userList[0],\n\t      sign: token,\n\t    });\n", "    return {\n\t      msg: 'ok',\n\t      data: {\n\t        name: userList[0].name,\n\t        sign: token,\n\t      },\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  //登录结合注册接口返回函数\n", "  async loginAndRegister(user: {\n\t    account: string;\n\t    password: string;\n\t  }): Promise<interfaceReturnType> {\n\t    const userList: User[] = await this.findUser({ account: user.account });\n\t    //user表查询不到执行注册\n\t    if (userList.length < 1) return await this.register(user);\n\t    //执行登录\n\t    return await this.login(user, userList);\n\t  }\n", "  //token 生成函数\n\t  async createToken(userId: number): Promise<string> {\n\t    const payload = { sub: userId };\n\t    const token = jwt.sign(payload, this.JWT_SECRET, { expiresIn: '3d' });\n\t    return token;\n\t  }\n\t}\n"]}
{"filename": "src/api/product/product.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { ProductController } from './product.controller';\n\timport { ProductService } from './product.service';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\timport { Product } from '../../entity/product.entity';\n\t@Module({\n\t  controllers: [ProductController],\n\t  providers: [ProductService],\n\t  imports: [TypeOrmModule.forFeature([Product])],\n\t})\n", "export class ProductModule {}\n"]}
{"filename": "src/api/product/product.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res,Query } from '@nestjs/common';\n\timport { ProductService } from './product.service';\n\timport { interfaceReturnType } from '../../type/type';\n\timport { Response } from 'express';\n\t@Controller('Product')\n\texport class ProductController {\n\t  constructor(private readonly ProductService: ProductService) {}\n\t  @Get()\n\t  async getProductList(@Query() itme:{type:string}, @Res() Res: Response): Promise<interfaceReturnType> {\n\t    console.log(itme);\n", "    const res = await this.ProductService.listFunc(itme);\n\t    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t  @Post()\n\t  async postProductList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.ProductService.addProductFunc(body);\n", "    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t  @Post('update')\n\t  async updateProductList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.ProductService.updateProduct(body);\n\t    Res.status(res.code).json(res);\n", "    return;\n\t  }\n\t  @Post('delete')\n\t  async deleteProductList(\n\t    @Body() body: { id: number },\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.ProductService.deleteProduct(body);\n\t    Res.status(res.code).json(res);\n\t    return;\n", "  }\n\t  //   @Post()\n\t  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n\t  //     const res = await this.ProductService.listFunc(user);\n\t  //     Res.status(res.code).json(res);\n\t  //     return;\n\t  //   }\n\t}\n"]}
{"filename": "src/api/product/product.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\n\timport { InjectRepository } from '@nestjs/typeorm';\n\timport { Repository } from 'typeorm';\n\timport { Product } from '../../entity/product.entity';\n\timport { interfaceReturnType } from '../../type/type';\n\t@Injectable()\n\texport class ProductService {\n\t  constructor(\n\t    @InjectRepository(Product)\n\t    private readonly ProductList: Repository<Product>,\n", "  ) {}\n\t  async listFunc(item: { type: string } = {type:'xiaomi'}): Promise<interfaceReturnType> {\n\t    const res = await this.ProductList.find({\n\t      where: item,\n\t    });\n\t    return {\n\t      msg: 'ok',\n\t      data: res,\n\t      code: HttpStatus.OK,\n\t    };\n", "  }\n\t  async addProductFunc(item: Product): Promise<interfaceReturnType> {\n\t    if (!item.title) throw new BadRequestException('title为必填项～');\n\t    if (!item.name) throw new BadRequestException('name为必填项～');\n\t    if (!item.img) throw new BadRequestException('img为必填项～');\n\t    await this.ProductList.save({\n\t      ...item,\n\t      title: item.title || '',\n\t    });\n\t    return {\n", "      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async updateProduct(item: Product): Promise<interfaceReturnType> {\n\t    if (!item.id) throw new BadRequestException('id为必填项～');\n\t    await this.ProductList.update(item.id, {\n\t      ...item,\n\t      updataTime: new Date(),\n", "    });\n\t    return {\n\t      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async deleteProduct(item: { id: number }): Promise<interfaceReturnType> {\n\t    if (!item.id) throw new BadRequestException('id为必填项～');\n\t    await this.ProductList.delete(item.id);\n", "    return {\n\t      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t}\n"]}
{"filename": "src/api/banner/banner.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { BannerController } from './banner.controller';\n\timport { BannerService } from './banner.service';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\timport { Banner } from '../../entity/banner.entity';\n\t@Module({\n\t  controllers: [BannerController],\n\t  providers: [BannerService],\n\t  imports: [TypeOrmModule.forFeature([Banner])],\n\t})\n", "export class BannerModule {}\n"]}
{"filename": "src/api/banner/banner.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\n\timport { BannerService } from './banner.service';\n\timport { interfaceReturnType } from '../../type/type';\n\timport { Response } from 'express';\n\t@Controller('banner')\n\texport class BannerController {\n\t  constructor(private readonly BannerService: BannerService) {}\n\t  @Get()\n\t  async getBannerList(@Res() Res: Response): Promise<interfaceReturnType> {\n\t    const res = await this.BannerService.listFunc();\n", "    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t  @Post()\n\t  async postBannerList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.BannerService.addBannerFunc(body);\n\t    Res.status(res.code).json(res);\n", "    return;\n\t  }\n\t  @Post('update')\n\t  async updateBannerList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.BannerService.updateBanner(body);\n\t    Res.status(res.code).json(res);\n\t    return;\n", "  }\n\t  @Post('delete')\n\t  async deleteBannerList(\n\t    @Body() body: { id: number },\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.BannerService.deleteBanner(body);\n\t    Res.status(res.code).json(res);\n\t    return;\n\t  }\n", "  //   @Post()\n\t  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n\t  //     const res = await this.BannerService.listFunc(user);\n\t  //     Res.status(res.code).json(res);\n\t  //     return;\n\t  //   }\n\t}\n"]}
{"filename": "src/api/banner/banner.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\n\timport { InjectRepository } from '@nestjs/typeorm';\n\timport { Repository } from 'typeorm';\n\timport { Banner } from '../../entity/banner.entity';\n\timport { interfaceReturnType } from '../../type/type';\n\t@Injectable()\n\texport class BannerService {\n\t  constructor(\n\t    @InjectRepository(Banner)\n\t    private readonly bannerList: Repository<Banner>,\n", "  ) {}\n\t  async listFunc(): Promise<interfaceReturnType> {\n\t    const res = await this.bannerList.find();\n\t    return {\n\t      msg: 'ok',\n\t      data: res,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async addBannerFunc(banner: Banner): Promise<interfaceReturnType> {\n", "    if (!banner.url) throw new BadRequestException('url为必填项～');\n\t    await this.bannerList.save({\n\t      ...banner,\n\t      title: banner.title || '',\n\t      linkUrl: banner.linkUrl || '',\n\t    });\n\t    return {\n\t      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n", "    };\n\t  }\n\t  async updateBanner(banner: Banner): Promise<interfaceReturnType> {\n\t    if (!banner.id) throw new BadRequestException('id为必填项～');\n\t    if (!banner.url) throw new BadRequestException('url为必填项～');\n\t    await this.bannerList.update(banner.id, {\n\t      ...banner,\n\t      updataTime:new Date(),\n\t    });\n\t    return {\n", "      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async deleteBanner(banner: { id: number }): Promise<interfaceReturnType> {\n\t    if (!banner.id) throw new BadRequestException('id为必填项～');\n\t    await this.bannerList.delete(banner.id);\n\t    return {\n\t      msg: 'ok',\n", "      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t}\n"]}
{"filename": "src/api/header/header.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\n\timport { HeaderService } from './header.service';\n\timport { interfaceReturnType } from '../../type/type';\n\timport { Response } from 'express';\n\t@Controller('header')\n\texport class HeaderController {\n\t  constructor(private readonly HeaderService: HeaderService) {}\n\t  @Get()\n\t  async getHeaderList(@Res() Res: Response): Promise<interfaceReturnType> {\n\t    const res = await this.HeaderService.listFunc();\n", "    Res.status(res.code).json(res);\n\t    return;\n\t  }\n\t  @Post()\n\t  async postHeaderList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.HeaderService.addHeaderFunc(body);\n\t    Res.status(res.code).json(res);\n", "    return;\n\t  }\n\t  @Post('update')\n\t  async updateHeaderList(\n\t    @Body() body: any,\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.HeaderService.updateHeader(body);\n\t    Res.status(res.code).json(res);\n\t    return;\n", "  }\n\t  @Post('delete')\n\t  async deleteHeaderList(\n\t    @Body() body: { id: number },\n\t    @Res() Res: Response,\n\t  ): Promise<interfaceReturnType> {\n\t    const res = await this.HeaderService.deleteHeader(body);\n\t    Res.status(res.code).json(res);\n\t    return;\n\t  }\n", "  //   @Post()\n\t  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n\t  //     const res = await this.HeaderService.listFunc(user);\n\t  //     Res.status(res.code).json(res);\n\t  //     return;\n\t  //   }\n\t}\n"]}
{"filename": "src/api/header/header.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\n\timport { HeaderController } from './header.controller';\n\timport { HeaderService } from './header.service';\n\timport { TypeOrmModule } from '@nestjs/typeorm';\n\timport { Header } from '../../entity/header.entity';\n\t@Module({\n\t  controllers: [HeaderController],\n\t  providers: [HeaderService],\n\t  imports: [TypeOrmModule.forFeature([Header])],\n\t})\n", "export class HeaderModule {}\n"]}
{"filename": "src/api/header/header.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\n\timport { InjectRepository } from '@nestjs/typeorm';\n\timport { Repository } from 'typeorm';\n\timport { Header } from '../../entity/header.entity';\n\timport { interfaceReturnType } from '../../type/type';\n\t@Injectable()\n\texport class HeaderService {\n\t  constructor(\n\t    @InjectRepository(Header)\n\t    private readonly headerList: Repository<Header>,\n", "  ) {}\n\t  async listFunc(): Promise<interfaceReturnType> {\n\t    const res = await this.headerList.find();\n\t    return {\n\t      msg: 'ok',\n\t      data: res,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async addHeaderFunc(item: Header): Promise<interfaceReturnType> {\n", "    if (!item.title) throw new BadRequestException('title为必填项～');\n\t    await this.headerList.save({\n\t      ...item,\n\t      title: item.title || '',\n\t      linkUrl: item.linkUrl || '',\n\t    });\n\t    return {\n\t      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n", "    };\n\t  }\n\t  async updateHeader(item: Header): Promise<interfaceReturnType> {\n\t    if (!item.id) throw new BadRequestException('id为必填项～');\n\t    if (!item.title) throw new BadRequestException('title为必填项～');\n\t    await this.headerList.update(item.id, {\n\t      ...item,\n\t      updataTime:new Date(),\n\t    });\n\t    return {\n", "      msg: 'ok',\n\t      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t  async deleteHeader(item: { id: number }): Promise<interfaceReturnType> {\n\t    if (!item.id) throw new BadRequestException('id为必填项～');\n\t    await this.headerList.delete(item.id);\n\t    return {\n\t      msg: 'ok',\n", "      data: null,\n\t      code: HttpStatus.OK,\n\t    };\n\t  }\n\t}\n"]}
