{"filename": "tests/file-system-helpers.test.ts", "chunked_list": ["import { expect } from \"chai\";\n\timport {\n\t\tcheckSnippetExists,\n\t\tcreateSnippetFile,\n\t\tdeleteSnippetFile,\n\t\treadSnippetFile,\n\t\twriteSnippetFile,\n\t} from \"src/file-system-helpers\";\n\timport TestCssEditorPlugin from \"./main.test\";\n\texport function fileSystemHelpersTests(testPlugin: TestCssEditorPlugin) {\n", "\ttestPlugin.test(\"create/read/update/delete should work\", async () => {\n\t\t\tconst { app } = testPlugin.plugin;\n\t\t\tconst filename = `${Date.now()}crud.css`;\n\t\t\tconst mockContent = \"this is a test\";\n\t\t\tconst mockContent2 = \"this is a test two\";\n\t\t\tawait createSnippetFile(app, filename);\n\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be.true;\n\t\t\tawait writeSnippetFile(app, filename, mockContent);\n\t\t\tawait expect(readSnippetFile(app, filename)).to.eventually.equal(\n\t\t\t\tmockContent\n", "\t\t);\n\t\t\tawait writeSnippetFile(app, filename, mockContent2);\n\t\t\tawait expect(readSnippetFile(app, filename)).to.eventually.equal(\n\t\t\t\tmockContent2\n\t\t\t);\n\t\t\tawait deleteSnippetFile(app, filename);\n\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be.false;\n\t\t});\n\t\ttestPlugin.test(\n\t\t\t\"create snippet that already exists should fail\",\n", "\t\tasync () => {\n\t\t\t\tconst { app } = testPlugin.plugin;\n\t\t\t\tconst filename = `${Date.now()}already-exists.css`;\n\t\t\t\tawait createSnippetFile(app, filename);\n\t\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be\n\t\t\t\t\t.true;\n\t\t\t\tawait expect(createSnippetFile(app, filename)).to.be.rejectedWith();\n\t\t\t\t// cleanup\n\t\t\t\tawait deleteSnippetFile(app, filename);\n\t\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be\n", "\t\t\t\t.false;\n\t\t\t}\n\t\t);\n\t\ttestPlugin.test(\n\t\t\t\"create snippet that is not .css file should fail\",\n\t\t\tasync () => {\n\t\t\t\tconst { app } = testPlugin.plugin;\n\t\t\t\tconst filename = `${Date.now()}not-css.txt`;\n\t\t\t\tawait expect(createSnippetFile(app, filename)).to.be.rejectedWith();\n\t\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be\n", "\t\t\t\t.false;\n\t\t\t}\n\t\t);\n\t\ttestPlugin.test(\n\t\t\t\"create snippet with invalid characters should fail\",\n\t\t\tasync () => {\n\t\t\t\tconst { app } = testPlugin.plugin;\n\t\t\t\tconst filename = `${Date.now()}invalid/characters.css`;\n\t\t\t\tawait expect(createSnippetFile(app, filename)).to.be.rejectedWith();\n\t\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be\n", "\t\t\t\t.false;\n\t\t\t}\n\t\t);\n\t\ttestPlugin.test(\"create snippet with spaces should succeed\", async () => {\n\t\t\tconst { app } = testPlugin.plugin;\n\t\t\tconst filename = `${Date.now()} with spaces.css`;\n\t\t\tawait createSnippetFile(app, filename);\n\t\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be.true;\n\t\t\t// cleanup\n\t\t\tawait deleteSnippetFile(app, filename);\n", "\t\tawait expect(checkSnippetExists(app, filename)).to.eventually.be.false;\n\t\t});\n\t}\n"]}
{"filename": "tests/main.test.ts", "chunked_list": ["import { Plugin } from \"obsidian\";\n\timport chai from \"chai\";\n\timport chaiAsPromised from \"chai-as-promised\";\n\timport CssEditorPlugin from \"src/main\";\n\timport { fileSystemHelpersTests } from \"./file-system-helpers.test\";\n\tchai.use(chaiAsPromised);\n\tconst PLUGIN_ID = \"css-editor\";\n\texport default class TestCssEditorPlugin extends Plugin {\n\t\tplugin: CssEditorPlugin;\n\t\tasync onload() {\n", "\t\tthis.addCommand({\n\t\t\t\tid: \"test-css-editor-plugin\",\n\t\t\t\tname: \"Run CSS Editor Tests\",\n\t\t\t\tcallback: async () => {\n\t\t\t\t\tawait this.loadPlugin();\n\t\t\t\t\tthis.runTests();\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tasync loadPlugin() {\n", "\t\tconst plugin = this.app.plugins.getPlugin(PLUGIN_ID);\n\t\t\tif (!plugin) {\n\t\t\t\tthrow new Error(`${PLUGIN_ID} plugin not found`);\n\t\t\t}\n\t\t\tthis.plugin = plugin as CssEditorPlugin;\n\t\t}\n\t\trunTests() {\n\t\t\tfileSystemHelpersTests(this);\n\t\t}\n\t\tasync test(name: string, cb: () => Promise<void>) {\n", "\t\ttry {\n\t\t\t\tawait cb();\n\t\t\t\tconsole.log(`PASS: ${name}`);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(`FAIL: ${name}\\n${err}`);\n\t\t\t}\n\t\t}\n\t}\n"]}
{"filename": "src/CssEditorView.ts", "chunked_list": ["import { debounce, ItemView, ViewStateResult, WorkspaceLeaf } from \"obsidian\";\n\timport { EditorView } from \"@codemirror/view\";\n\timport { vim } from \"@replit/codemirror-vim\";\n\timport { readSnippetFile, writeSnippetFile } from \"./file-system-helpers\";\n\timport { basicExtensions } from \"./codemirror-extensions/basic-extensions\";\n\texport const VIEW_TYPE_CSS = \"css-editor-view\";\n\texport class CssEditorView extends ItemView {\n\t\tprivate editor: EditorView;\n\t\tprivate filename: string;\n\t\tconstructor(leaf: WorkspaceLeaf) {\n", "\t\tsuper(leaf);\n\t\t\tthis.navigation = true;\n\t\t\tthis.editor = new EditorView({\n\t\t\t\tparent: this.contentEl,\n\t\t\t\textensions: [\n\t\t\t\t\tbasicExtensions,\n\t\t\t\t\tthis.app.vault.getConfig?.(\"vimMode\") ? vim() : [],\n\t\t\t\t\tEditorView.updateListener.of((update) => {\n\t\t\t\t\t\tif (update.docChanged) {\n\t\t\t\t\t\t\tthis.requestSave(update.state.doc.toString());\n", "\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t});\n\t\t\tthis.filename = \"\";\n\t\t}\n\t\tgetViewType() {\n\t\t\treturn VIEW_TYPE_CSS;\n\t\t}\n\t\tgetIcon() {\n", "\t\treturn \"file-code\";\n\t\t}\n\t\tgetDisplayText(): string {\n\t\t\treturn this.filename;\n\t\t}\n\t\tasync onOpen(): Promise<void> {\n\t\t\tconst filename = this.getState()?.filename;\n\t\t\tif (filename) {\n\t\t\t\tthis.filename = filename;\n\t\t\t\tconst data = await readSnippetFile(this.app, filename);\n", "\t\t\tthis.dispatchEditorData(data);\n\t\t\t\tthis.app.workspace.requestSaveLayout();\n\t\t\t}\n\t\t\tconst timer = window.setInterval(() => {\n\t\t\t\tthis.editor.focus();\n\t\t\t\tif (this.editor.hasFocus) clearInterval(timer);\n\t\t\t}, 200);\n\t\t\tthis.registerInterval(timer);\n\t\t}\n\t\tgetEditorData() {\n", "\t\treturn this.editor.state.doc.toString();\n\t\t}\n\t\tprivate dispatchEditorData(data: string) {\n\t\t\tthis.editor.dispatch({\n\t\t\t\tchanges: {\n\t\t\t\t\tfrom: 0,\n\t\t\t\t\tto: this.editor.state.doc.length,\n\t\t\t\t\tinsert: data,\n\t\t\t\t},\n\t\t\t});\n", "\t}\n\t\tgetState() {\n\t\t\treturn {\n\t\t\t\tfilename: this.filename,\n\t\t\t};\n\t\t}\n\t\tasync setState(\n\t\t\tstate: { filename: string },\n\t\t\tresult: ViewStateResult\n\t\t): Promise<void> {\n", "\t\tif (state && typeof state === \"object\") {\n\t\t\t\tif (\n\t\t\t\t\t\"filename\" in state &&\n\t\t\t\t\tstate.filename &&\n\t\t\t\t\ttypeof state.filename === \"string\"\n\t\t\t\t) {\n\t\t\t\t\tif (state.filename !== this.filename) {\n\t\t\t\t\t\tconst data = await readSnippetFile(\n\t\t\t\t\t\t\tthis.app,\n\t\t\t\t\t\t\tstate.filename\n", "\t\t\t\t\t);\n\t\t\t\t\t\tthis.dispatchEditorData(data);\n\t\t\t\t\t}\n\t\t\t\t\tthis.filename = state.filename;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuper.setState(state, result);\n\t\t}\n\t\trequestSave = debounce(this.save, 1000);\n\t\t/**\n", "\t * You should almost always call `requestSave` instead of `save` to debounce the saving.\n\t\t */\n\t\tprivate async save(data: string): Promise<void> {\n\t\t\tif (this.filename) {\n\t\t\t\twriteSnippetFile(this.app, this.filename, data);\n\t\t\t}\n\t\t}\n\t\tasync onClose() {\n\t\t\tthis.editor.destroy();\n\t\t}\n", "}\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { Plugin } from \"obsidian\";\n\timport { CssEditorView, VIEW_TYPE_CSS } from \"./CssEditorView\";\n\timport { CssSnippetFuzzySuggestModal } from \"./modals/CssSnippetFuzzySuggestModal\";\n\timport { CssSnippetCreateModal } from \"./modals/CssSnippetCreateModal\";\n\timport { deleteSnippetFile } from \"./file-system-helpers\";\n\timport { detachLeavesOfTypeAndDisplay, openView } from \"./workspace-helpers\";\n\timport { InfoNotice } from \"./Notice\";\n\t// eslint-disable-next-line @typescript-eslint/no-empty-interface\n\tinterface CssEditorPluginSettings {}\n\tconst DEFAULT_SETTINGS: CssEditorPluginSettings = {};\n", "export default class CssEditorPlugin extends Plugin {\n\t\tsettings: CssEditorPluginSettings;\n\t\tasync onload() {\n\t\t\tawait this.loadSettings();\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"edit-css-snippet\",\n\t\t\t\tname: \"Edit CSS Snippet\",\n\t\t\t\tcallback: async () => {\n\t\t\t\t\tnew CssSnippetFuzzySuggestModal(\n\t\t\t\t\t\tthis.app,\n", "\t\t\t\t\tthis.openCssEditorView\n\t\t\t\t\t).open();\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"create-css-snippet\",\n\t\t\t\tname: \"Create CSS Snippet\",\n\t\t\t\tcallback: async () => {\n\t\t\t\t\tnew CssSnippetCreateModal(this.app, this).open();\n\t\t\t\t},\n", "\t\t});\n\t\t\tthis.addCommand({\n\t\t\t\tid: \"delete-css-snippet\",\n\t\t\t\tname: \"Delete CSS Snippet\",\n\t\t\t\tcallback: async () => {\n\t\t\t\t\tnew CssSnippetFuzzySuggestModal(this.app, (item) => {\n\t\t\t\t\t\tdeleteSnippetFile(this.app, item);\n\t\t\t\t\t\tdetachLeavesOfTypeAndDisplay(\n\t\t\t\t\t\t\tthis.app.workspace,\n\t\t\t\t\t\t\tVIEW_TYPE_CSS,\n", "\t\t\t\t\t\titem\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnew InfoNotice(`${item} was deleted.`);\n\t\t\t\t\t}).open();\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.registerView(VIEW_TYPE_CSS, (leaf) => new CssEditorView(leaf));\n\t\t}\n\t\tonunload() {}\n\t\tasync loadSettings() {\n", "\t\tthis.settings = Object.assign(\n\t\t\t\t{},\n\t\t\t\tDEFAULT_SETTINGS,\n\t\t\t\tawait this.loadData()\n\t\t\t);\n\t\t}\n\t\tasync saveSettings() {\n\t\t\tawait this.saveData(this.settings);\n\t\t}\n\t\tasync openCssEditorView(filename: string) {\n", "\t\topenView(this.app.workspace, VIEW_TYPE_CSS, { filename });\n\t\t}\n\t}\n"]}
{"filename": "src/file-system-helpers.ts", "chunked_list": ["import { App } from \"obsidian\";\n\texport function getSnippetDirectory(app: App) {\n\t\treturn `${app.vault.configDir}/snippets/`;\n\t}\n\texport async function readSnippetFile(\n\t\tapp: App,\n\t\tfileName: string\n\t): Promise<string> {\n\t\tconst data = await app.vault.adapter.read(\n\t\t\t`${getSnippetDirectory(app)}${fileName}`\n", "\t);\n\t\treturn data;\n\t}\n\texport async function createSnippetFile(\n\t\tapp: App,\n\t\tfileName: string,\n\t\tdata = \"\"\n\t): Promise<void> {\n\t\tawait _validateFilename(fileName);\n\t\tawait _createSnippetDirectoryIfNotExists(app);\n", "\tawait app.vault.adapter.write(\n\t\t\t`${getSnippetDirectory(app)}${fileName}`,\n\t\t\tdata\n\t\t);\n\t}\n\texport async function writeSnippetFile(\n\t\tapp: App,\n\t\tfileName: string,\n\t\tdata: string\n\t): Promise<void> {\n", "\tawait app.vault.adapter.write(\n\t\t\t`${getSnippetDirectory(app)}${fileName}`,\n\t\t\tdata\n\t\t);\n\t}\n\texport async function checkSnippetExists(\n\t\tapp: App,\n\t\tfileName: string\n\t): Promise<boolean> {\n\t\treturn app.vault.adapter.exists(`${getSnippetDirectory(app)}${fileName}`);\n", "}\n\texport async function deleteSnippetFile(app: App, fileName: string) {\n\t\tawait app.vault.adapter.remove(`${getSnippetDirectory(app)}${fileName}`);\n\t}\n\tasync function _createSnippetDirectoryIfNotExists(app: App) {\n\t\tif (!(await app.vault.adapter.exists(getSnippetDirectory(app)))) {\n\t\t\tawait app.vault.adapter.mkdir(getSnippetDirectory(app));\n\t\t}\n\t}\n\tasync function _validateFilename(value: string) {\n", "\tconst errors = {\n\t\t\texists: \"\",\n\t\t\tregex: \"\",\n\t\t};\n\t\tif (value.length > 0 && (await checkSnippetExists(this.app, value))) {\n\t\t\terrors.exists = \"File already exists.\";\n\t\t}\n\t\tconst regex = /^[0-9a-zA-Z\\-_ ]+\\.css$/;\n\t\tif (!regex.test(value)) {\n\t\t\terrors.regex =\n", "\t\t\t\"Must end with .css and only contain alphanumeric, spaces, dashes, or underscore characters.\";\n\t\t}\n\t\tif (Object.values(errors).some((x) => x !== \"\")) {\n\t\t\tconst message = Object.values(errors)\n\t\t\t\t.filter((x) => x !== \"\")\n\t\t\t\t.reduce((acc, curr) => `${acc}\\n${curr}`, \"Failed to create file.\");\n\t\t\tthrow new Error(message);\n\t\t}\n\t}\n"]}
{"filename": "src/Notice.ts", "chunked_list": ["import { Notice } from \"obsidian\";\n\tconst DEFAULT_NOTICE_TIMEOUT_SECONDS = 5;\n\texport class InfoNotice extends Notice {\n\t\tconstructor(\n\t\t\tmessage: string | DocumentFragment,\n\t\t\ttimeout = DEFAULT_NOTICE_TIMEOUT_SECONDS\n\t\t) {\n\t\t\tsuper(message, timeout * 1000);\n\t\t\tconsole.info(`css-editor: ${message}`);\n\t\t}\n", "}\n\texport class ErrorNotice extends Notice {\n\t\tconstructor(\n\t\t\tmessage: string | DocumentFragment,\n\t\t\ttimeout = DEFAULT_NOTICE_TIMEOUT_SECONDS\n\t\t) {\n\t\t\tsuper(message, timeout * 1000);\n\t\t\tconsole.error(`css-editor: ${message}`);\n\t\t}\n\t}\n"]}
{"filename": "src/workspace-helpers.ts", "chunked_list": ["import { ViewState, Workspace } from \"obsidian\";\n\texport async function openView(\n\t\tworkspace: Workspace,\n\t\ttype: ViewState[\"type\"],\n\t\tstate: unknown\n\t) {\n\t\tconst leaf = workspace.getLeaf();\n\t\tawait leaf.setViewState({\n\t\t\ttype,\n\t\t\tstate,\n", "\t});\n\t\tworkspace.setActiveLeaf(leaf);\n\t}\n\texport function detachLeavesOfTypeAndDisplay(\n\t\tworkspace: Workspace,\n\t\ttype: ViewState[\"type\"],\n\t\tdisplay: string\n\t) {\n\t\tconst leaves = workspace.getLeavesOfType(type);\n\t\tleaves.forEach((leaf) => {\n", "\t\tif (leaf.getDisplayText() === display) {\n\t\t\t\tleaf.detach();\n\t\t\t}\n\t\t});\n\t}\n"]}
{"filename": "src/obsidian-theme.ts", "chunked_list": ["import { EditorView } from \"@codemirror/view\";\n\timport { Extension } from \"@codemirror/state\";\n\timport { HighlightStyle, syntaxHighlighting } from \"@codemirror/language\";\n\timport { tags as t } from \"@lezer/highlight\";\n\texport const config = {\n\t\tname: \"obsidian\",\n\t\tdark: false,\n\t\tbackground: \"var(--background-primary)\",\n\t\tforeground: \"var(--text-normal)\",\n\t\tselection: \"var(--text-selection)\",\n", "\tcursor: \"var(--text-normal)\",\n\t\tdropdownBackground: \"var(--background-primary)\",\n\t\tdropdownBorder: \"var(--background-modifier-border)\",\n\t\tactiveLine: \"var(--background-primary)\",\n\t\tmatchingBracket: \"var(--background-modifier-accent)\",\n\t\tkeyword: \"#d73a49\",\n\t\tstorage: \"#d73a49\",\n\t\tvariable: \"var(--text-normal)\",\n\t\tparameter: \"var(--text-accent-hover)\",\n\t\tfunction: \"var(--text-accent-hover)\",\n", "\tstring: \"var(--text-accent)\",\n\t\tconstant: \"var(--text-accent-hover)\",\n\t\ttype: \"var(--text-accent-hover)\",\n\t\tclass: \"#6f42c1\",\n\t\tnumber: \"var(--text-accent-hover)\",\n\t\tcomment: \"var(--text-faint)\",\n\t\tinvalid: \"var(--text-error)\",\n\t\tregexp: \"#032f62\",\n\t};\n\texport const obsidianTheme = EditorView.theme(\n", "\t{\n\t\t\t\"&\": {\n\t\t\t\tcolor: config.foreground,\n\t\t\t\tbackgroundColor: config.background,\n\t\t\t},\n\t\t\t\".cm-content\": { caretColor: config.cursor },\n\t\t\t\"&.cm-focused .cm-cursor\": { borderLeftColor: config.cursor },\n\t\t\t\"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, & ::selection\":\n\t\t\t\t{ backgroundColor: config.selection },\n\t\t\t\".cm-panels\": {\n", "\t\t\tbackgroundColor: config.dropdownBackground,\n\t\t\t\tcolor: config.foreground,\n\t\t\t},\n\t\t\t\".cm-panels.cm-panels-top\": { borderBottom: \"2px solid black\" },\n\t\t\t\".cm-panels.cm-panels-bottom\": { borderTop: \"2px solid black\" },\n\t\t\t\".cm-searchMatch\": {\n\t\t\t\tbackgroundColor: config.dropdownBackground,\n\t\t\t\toutline: `1px solid ${config.dropdownBorder}`,\n\t\t\t},\n\t\t\t\".cm-searchMatch.cm-searchMatch-selected\": {\n", "\t\t\tbackgroundColor: config.selection,\n\t\t\t},\n\t\t\t\".cm-activeLine\": { backgroundColor: config.activeLine },\n\t\t\t\".cm-activeLineGutter\": { backgroundColor: config.background },\n\t\t\t\".cm-selectionMatch\": { backgroundColor: config.selection },\n\t\t\t\".cm-matchingBracket, .cm-nonmatchingBracket\": {\n\t\t\t\tbackgroundColor: config.matchingBracket,\n\t\t\t\toutline: \"none\",\n\t\t\t},\n\t\t\t\".cm-gutters\": {\n", "\t\t\tbackgroundColor: config.background,\n\t\t\t\tcolor: config.comment,\n\t\t\t\tborderRight: \"1px solid var(--background-modifier-border)\",\n\t\t\t},\n\t\t\t\".cm-lineNumbers, .cm-gutterElement\": { color: \"inherit\" },\n\t\t\t\".cm-foldPlaceholder\": {\n\t\t\t\tbackgroundColor: \"transparent\",\n\t\t\t\tborder: \"none\",\n\t\t\t\tcolor: config.foreground,\n\t\t\t},\n", "\t\t\".cm-tooltip\": {\n\t\t\t\tborder: `1px solid ${config.dropdownBorder}`,\n\t\t\t\tbackgroundColor: config.dropdownBackground,\n\t\t\t\tcolor: config.foreground,\n\t\t\t},\n\t\t\t\".cm-tooltip.cm-tooltip-autocomplete\": {\n\t\t\t\t\"& > ul > li[aria-selected]\": {\n\t\t\t\t\tbackground: config.selection,\n\t\t\t\t\tcolor: config.foreground,\n\t\t\t\t},\n", "\t\t},\n\t\t},\n\t\t{ dark: config.dark }\n\t);\n\texport const obsidianHighlightStyle = HighlightStyle.define([\n\t\t{ tag: t.keyword, color: config.keyword },\n\t\t{\n\t\t\ttag: [t.name, t.deleted, t.character, t.macroName],\n\t\t\tcolor: config.variable,\n\t\t},\n", "\t{ tag: [t.propertyName], color: config.function },\n\t\t{\n\t\t\ttag: [\n\t\t\t\tt.processingInstruction,\n\t\t\t\tt.string,\n\t\t\t\tt.inserted,\n\t\t\t\tt.special(t.string),\n\t\t\t],\n\t\t\tcolor: config.string,\n\t\t},\n", "\t{ tag: [t.function(t.variableName), t.labelName], color: config.function },\n\t\t{\n\t\t\ttag: [t.color, t.constant(t.name), t.standard(t.name)],\n\t\t\tcolor: config.constant,\n\t\t},\n\t\t{ tag: [t.definition(t.name), t.separator], color: config.variable },\n\t\t{ tag: [t.className], color: config.class },\n\t\t{\n\t\t\ttag: [\n\t\t\t\tt.number,\n", "\t\t\tt.changed,\n\t\t\t\tt.annotation,\n\t\t\t\tt.modifier,\n\t\t\t\tt.self,\n\t\t\t\tt.namespace,\n\t\t\t],\n\t\t\tcolor: config.number,\n\t\t},\n\t\t{ tag: [t.typeName], color: config.type, fontStyle: config.type },\n\t\t{ tag: [t.operator, t.operatorKeyword], color: config.keyword },\n", "\t{ tag: [t.url, t.escape, t.regexp, t.link], color: config.regexp },\n\t\t{ tag: [t.meta, t.comment], color: config.comment },\n\t\t{\n\t\t\ttag: [t.atom, t.bool, t.special(t.variableName)],\n\t\t\tcolor: config.variable,\n\t\t},\n\t\t{ tag: t.invalid, color: config.invalid },\n\t]);\n\texport const obsidian: Extension = [\n\t\tobsidianTheme,\n", "\tsyntaxHighlighting(obsidianHighlightStyle),\n\t];\n"]}
{"filename": "src/obsidian.d.ts", "chunked_list": ["/* eslint-disable no-mixed-spaces-and-tabs */\n\timport \"obsidian\";\n\tdeclare module \"obsidian\" {\n\t\tinterface App {\n\t\t\tcustomCss:\n\t\t\t\t| {\n\t\t\t\t\t\tsnippets: string[] | undefined;\n\t\t\t\t\t\tsetCssEnabledStatus:\n\t\t\t\t\t\t\t| ((name: string, value: boolean) => void)\n\t\t\t\t\t\t\t| undefined;\n", "\t\t\t  }\n\t\t\t\t| undefined;\n\t\t\tplugins: {\n\t\t\t\tgetPlugin: (pluginID: string) => Plugin_2 | null;\n\t\t\t};\n\t\t}\n\t\tinterface Vault {\n\t\t\tgetConfig?: (key: string) => unknown;\n\t\t}\n\t}\n"]}
{"filename": "src/codemirror-extensions/basic-extensions.ts", "chunked_list": ["import {\n\t\tdefaultKeymap,\n\t\thistory,\n\t\thistoryKeymap,\n\t\tindentWithTab,\n\t} from \"@codemirror/commands\";\n\timport { css } from \"@codemirror/lang-css\";\n\timport {\n\t\tbracketMatching,\n\t\tfoldGutter,\n", "\tfoldKeymap,\n\t\tindentOnInput,\n\t} from \"@codemirror/language\";\n\timport { EditorState, Extension } from \"@codemirror/state\";\n\timport { dropCursor, EditorView, keymap } from \"@codemirror/view\";\n\timport {\n\t\tautocompletion,\n\t\tcloseBrackets,\n\t\tcloseBracketsKeymap,\n\t\tcompletionKeymap,\n", "} from \"@codemirror/autocomplete\";\n\timport { highlightSelectionMatches, searchKeymap } from \"@codemirror/search\";\n\timport { lintKeymap } from \"@codemirror/lint\";\n\timport { obsidian } from \"../obsidian-theme\";\n\texport const basicExtensions: Extension[] = [\n\t\tkeymap.of([\n\t\t\t...closeBracketsKeymap, // \"{|}\" -> backspace -> \"|\"\n\t\t\t...defaultKeymap,\n\t\t\t...searchKeymap,\n\t\t\t...historyKeymap,\n", "\t\tindentWithTab,\n\t\t\t...foldKeymap,\n\t\t\t...completionKeymap,\n\t\t\t...lintKeymap,\n\t\t]),\n\t\thistory(),\n\t\tcss(),\n\t\tfoldGutter(),\n\t\tdropCursor(),\n\t\tEditorState.allowMultipleSelections.of(true),\n", "\tindentOnInput(),\n\t\tEditorView.lineWrapping,\n\t\tbracketMatching(),\n\t\tautocompletion(),\n\t\tcloseBrackets(),\n\t\thighlightSelectionMatches(),\n\t\tobsidian,\n\t].filter((ext) => ext);\n"]}
{"filename": "src/modals/CssSnippetFuzzySuggestModal.ts", "chunked_list": ["import { App, FuzzyMatch, FuzzySuggestModal } from \"obsidian\";\n\timport { getSnippetDirectory } from \"../file-system-helpers\";\n\texport class CssSnippetFuzzySuggestModal extends FuzzySuggestModal<string> {\n\t\tconstructor(\n\t\t\tapp: App,\n\t\t\tonChooseItem: (item: string, evt: MouseEvent | KeyboardEvent) => void\n\t\t) {\n\t\t\tsuper(app);\n\t\t\tthis.onChooseItem = onChooseItem;\n\t\t}\n", "\tgetItems(): string[] {\n\t\t\tif (this.app.customCss?.snippets) {\n\t\t\t\treturn this.app.customCss.snippets.map((x) => `${x}.css`);\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\t\tgetItemText(item: string): string {\n\t\t\treturn item;\n\t\t}\n\t\trenderSuggestion(item: FuzzyMatch<string>, el: HTMLElement): void {\n", "\t\tsuper.renderSuggestion(item, el);\n\t\t\tel.appendChild(\n\t\t\t\tcreateDiv({ cls: \"css-editor-suggestion-description\" }, (el) =>\n\t\t\t\t\tel.appendText(`${getSnippetDirectory(this.app)}${item.item}`)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tonChooseItem(item: string, evt: MouseEvent | KeyboardEvent): void {\n\t\t\tthrow new Error(\"Method not implemented.\");\n\t\t}\n", "}\n"]}
{"filename": "src/modals/CssSnippetCreateModal.ts", "chunked_list": ["import { App, Modal, TextComponent } from \"obsidian\";\n\timport CssEditorPlugin from \"src/main\";\n\timport { createSnippetFile } from \"../file-system-helpers\";\n\timport { ErrorNotice } from \"../Notice\";\n\texport class CssSnippetCreateModal extends Modal {\n\t\tprivate value: string;\n\t\tprivate plugin: CssEditorPlugin;\n\t\tconstructor(app: App, plugin: CssEditorPlugin) {\n\t\t\tsuper(app);\n\t\t\tthis.value = \"\";\n", "\t\tthis.plugin = plugin;\n\t\t}\n\t\tonOpen(): void {\n\t\t\tsuper.onOpen();\n\t\t\tthis.titleEl.setText(\"Create CSS Snippet\");\n\t\t\tthis.containerEl.addClass(\"css-editor-create-modal\");\n\t\t\tthis.buildForm();\n\t\t}\n\t\tprivate buildForm() {\n\t\t\tconst textInput = new TextComponent(this.contentEl);\n", "\t\ttextInput.setPlaceholder(\"CSS snippet file name (ex: snippet.css)\");\n\t\t\ttextInput.onChange((val) => (this.value = val));\n\t\t\ttextInput.inputEl.addEventListener(\"keydown\", (evt) => {\n\t\t\t\tthis.handleKeydown(evt);\n\t\t\t});\n\t\t}\n\t\tprivate async handleKeydown(evt: KeyboardEvent) {\n\t\t\tif (evt.key === \"Escape\") {\n\t\t\t\tthis.close();\n\t\t\t} else if (evt.key === \"Enter\") {\n", "\t\t\ttry {\n\t\t\t\t\tawait createSnippetFile(this.app, this.value, \"\");\n\t\t\t\t\tawait this.plugin.openCssEditorView(this.value);\n\t\t\t\t\tthis.app.customCss?.setCssEnabledStatus?.(\n\t\t\t\t\t\tthis.value.replace(\".css\", \"\"),\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tthis.close();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (err instanceof Error) {\n", "\t\t\t\t\tnew ErrorNotice(err.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew ErrorNotice(\"Failed to create file. Reason unknown.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"]}
