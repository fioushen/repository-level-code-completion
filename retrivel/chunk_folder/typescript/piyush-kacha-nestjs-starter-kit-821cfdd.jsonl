{"filename": "test/app.e2e-spec.ts", "chunked_list": ["import * as request from 'supertest';\n\timport { AppModule } from '../src/app.module';\n\timport { INestApplication } from '@nestjs/common';\n\timport { Test, TestingModule } from '@nestjs/testing';\n\tdescribe('AppController (e2e)', () => {\n\t  let app: INestApplication;\n\t  beforeEach(async () => {\n\t    const moduleFixture: TestingModule = await Test.createTestingModule({\n\t      imports: [AppModule],\n\t    }).compile();\n", "    app = moduleFixture.createNestApplication();\n\t    await app.init();\n\t  });\n\t  it('/ (GET)', () => {\n\t    return request(app.getHttpServer()).get('/').expect(200).expect('Hello World!');\n\t  });\n\t});\n"]}
{"filename": "src/main.ts", "chunked_list": ["// Import external modules\n\timport * as cluster from 'cluster';\n\timport * as os from 'os';\n\timport { ConfigService } from '@nestjs/config';\n\timport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\timport { Logger } from '@nestjs/common';\n\timport { NestFactory } from '@nestjs/core';\n\timport { Logger as Pino } from 'nestjs-pino';\n\t// Import internal modules\n\timport { AppModule } from './app.module';\n", "// Create a logger for the bootstrap process\n\tconst logger = new Logger('bootstrap');\n\t// Define the main function\n\tasync function bootstrap() {\n\t  // Create the NestJS application instance\n\t  const app = await NestFactory.create(AppModule, {\n\t    bufferLogs: true,\n\t  });\n\t  // Use the Pino logger for the application\n\t  app.useLogger(app.get(Pino));\n", "  // Allow all origins\n\t  app.enableCors();\n\t  // Define the Swagger options and document\n\t  const options = new DocumentBuilder()\n\t    .setTitle('NestJS Starter API')\n\t    .setDescription('The API for the NestJS Starter project')\n\t    .setVersion('1.0')\n\t    .addBearerAuth()\n\t    .build();\n\t  const document = SwaggerModule.createDocument(app, options);\n", "  // Set up the Swagger UI endpoint\n\t  SwaggerModule.setup('docs', app, document, {\n\t    swaggerOptions: {\n\t      tagsSorter: 'alpha',\n\t      operationsSorter: 'alpha',\n\t    },\n\t  });\n\t  // Get the configuration service from the application\n\t  const configService = app.get(ConfigService);\n\t  // Get the port number from the configuration\n", "  const PORT = configService.get<number>('port');\n\t  // Start the application\n\t  await app.listen(PORT);\n\t  // Log a message to indicate that the application is running\n\t  logger.log(`Application listening on port ${PORT}`);\n\t}\n\t// Check if clustering is enabled\n\tif (process.env.CLUSTERING === 'true') {\n\t  // Get the number of CPUs on the machine\n\t  const numCPUs = os.cpus().length;\n", "  // If the current process is the master process\n\t  if ((cluster as any).isMaster) {\n\t    logger.log(`Master process is running with PID ${process.pid}`);\n\t    // Fork workers for each available CPU\n\t    for (let i = 0; i < numCPUs; i += 1) {\n\t      (cluster as any).fork();\n\t    }\n\t    // Log when a worker process exits\n\t    (cluster as any).on('exit', (worker, code, signal) => {\n\t      logger.debug(`Worker process ${worker.process.pid} exited with code ${code} and signal ${signal}`);\n", "    });\n\t  } else {\n\t    // If the current process is a worker process, call the bootstrap function to start the application\n\t    bootstrap();\n\t  }\n\t} else {\n\t  // Call the bootstrap function to start the application\n\t  bootstrap();\n\t}\n"]}
{"filename": "src/app.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\n\t@Injectable()\n\texport class AppService {\n\t  getHello(): string {\n\t    return 'Yeah yeah! we are okay!';\n\t  }\n\t}\n"]}
{"filename": "src/app.controller.spec.ts", "chunked_list": ["import { Test, TestingModule } from '@nestjs/testing';\n\timport { AppController } from './app.controller';\n\timport { AppService } from './app.service';\n\tdescribe('AppController', () => {\n\t  let appController: AppController;\n\t  beforeEach(async () => {\n\t    const app: TestingModule = await Test.createTestingModule({\n\t      controllers: [AppController],\n\t      providers: [AppService],\n\t    }).compile();\n", "    appController = app.get<AppController>(AppController);\n\t  });\n\t  describe('root', () => {\n\t    it('should return \"Hello World!\"', () => {\n\t      expect(appController.getHello()).toBe('Hello World!');\n\t    });\n\t  });\n\t});\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["// Import required modules\n\timport { APP_FILTER, APP_PIPE } from '@nestjs/core';\n\timport { ConfigModule, ConfigService } from '@nestjs/config';\n\timport { LoggerModule } from 'nestjs-pino';\n\timport { Module, ValidationError, ValidationPipe } from '@nestjs/common';\n\timport { MongooseModule } from '@nestjs/mongoose';\n\t// Import application files\n\timport { AppConfig } from './app.config';\n\timport { AppController } from './app.controller';\n\timport { AppService } from './app.service';\n", "import { configuration } from './config/index';\n\t// Import filters\n\timport {\n\t  AllExceptionsFilter,\n\t  BadRequestExceptionFilter,\n\t  ForbiddenExceptionFilter,\n\t  NotFoundExceptionFilter,\n\t  UnauthorizedExceptionFilter,\n\t  ValidationExceptionFilter,\n\t} from './filters';\n", "// Import other modules\n\t@Module({\n\t  imports: [\n\t    // Configure environment variables\n\t    ConfigModule.forRoot({\n\t      isGlobal: true, // Make the configuration global\n\t      load: [configuration], // Load the environment variables from the configuration file\n\t    }),\n\t    // Configure logging\n\t    LoggerModule.forRoot(AppConfig.getLoggerConfig()), // ! forRootAsync is not working with ConfigService in nestjs-pino\n", "    // Configure mongoose\n\t    MongooseModule.forRootAsync({\n\t      imports: [ConfigModule], // Import the ConfigModule so that it can be injected into the factory function\n\t      inject: [ConfigService], // Inject the ConfigService into the factory function\n\t      useFactory: async (configService: ConfigService) => ({\n\t        // Get the required configuration settings from the ConfigService\n\t        uri: configService.get('database.uri'),\n\t      }),\n\t    }),\n\t    // Import other modules\n", "  ],\n\t  controllers: [AppController], // Define the application's controller\n\t  providers: [\n\t    AppService,\n\t    { provide: APP_FILTER, useClass: AllExceptionsFilter },\n\t    { provide: APP_FILTER, useClass: ValidationExceptionFilter },\n\t    { provide: APP_FILTER, useClass: BadRequestExceptionFilter },\n\t    { provide: APP_FILTER, useClass: UnauthorizedExceptionFilter },\n\t    { provide: APP_FILTER, useClass: ForbiddenExceptionFilter },\n\t    { provide: APP_FILTER, useClass: NotFoundExceptionFilter },\n", "    {\n\t      // Allowing to do validation through DTO\n\t      // Since class-validator library default throw BadRequestException, here we use exceptionFactory to throw\n\t      // their internal exception so that filter can recognize it\n\t      provide: APP_PIPE,\n\t      useFactory: () =>\n\t        new ValidationPipe({\n\t          exceptionFactory: (errors: ValidationError[]) => {\n\t            return errors[0];\n\t          },\n", "        }),\n\t    },\n\t  ], // Define the application's service\n\t})\n\texport class AppModule {}\n"]}
{"filename": "src/app.config.ts", "chunked_list": ["// Import external modules\n\timport * as crypto from 'crypto'; // Used to generate random UUIDs\n\timport { IncomingMessage, ServerResponse } from 'http'; // Used to handle incoming and outgoing HTTP messages\n\timport { Params } from 'nestjs-pino'; // Used to define parameters for the Pino logger\n\t// Import internal modules\n\timport { LogLevel, NodeEnv } from './shared/enums'; // Import application enums\n\texport class AppConfig {\n\t  public static getLoggerConfig(): Params {\n\t    // Define the configuration for the Pino logger\n\t    const { NODE_ENV, LOG_LEVEL, CLUSTERING } = process.env;\n", "    return {\n\t      exclude: [], // Exclude specific path from the logs and may not work for e2e testing\n\t      pinoHttp: {\n\t        genReqId: () => crypto.randomUUID(), // Generate a random UUID for each incoming request\n\t        autoLogging: true, // Automatically log HTTP requests and responses\n\t        base: CLUSTERING === 'true' ? { pid: process.pid } : {}, // Include the process ID in the logs if clustering is enabled\n\t        customAttributeKeys: {\n\t          responseTime: 'timeSpent', // Rename the responseTime attribute to timeSpent\n\t        },\n\t        level: LOG_LEVEL || (NODE_ENV === NodeEnv.PRODUCTION ? LogLevel.INFO : LogLevel.TRACE), // Set the log level based on the environment and configuration\n", "        serializers: {\n\t          req(request: IncomingMessage) {\n\t            return {\n\t              method: request.method,\n\t              url: request.url,\n\t              id: request.id,\n\t              // Including the headers in the log could be in violation of privacy laws, e.g. GDPR.\n\t              // headers: request.headers,\n\t            };\n\t          },\n", "          res(reply: ServerResponse) {\n\t            return {\n\t              statusCode: reply.statusCode,\n\t            };\n\t          },\n\t        },\n\t        transport:\n\t          NODE_ENV !== NodeEnv.PRODUCTION // Only use Pino-pretty in non-production environments\n\t            ? {\n\t                target: 'pino-pretty',\n", "                options: {\n\t                  translateTime: 'SYS:yyyy-mm-dd HH:MM:ss',\n\t                },\n\t              }\n\t            : null,\n\t      },\n\t    };\n\t  }\n\t}\n"]}
{"filename": "src/app.controller.ts", "chunked_list": ["import { ApiTags } from '@nestjs/swagger';\n\timport { Controller, Get } from '@nestjs/common';\n\timport { AppService } from './app.service';\n\t@ApiTags('Health-check')\n\t@Controller()\n\texport class AppController {\n\t  constructor(private readonly appService: AppService) {}\n\t  @Get()\n\t  getHello(): string {\n\t    return this.appService.getHello();\n", "  }\n\t}\n"]}
{"filename": "src/filters/forbidden-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\timport { ForbiddenException } from '../exceptions';\n\t/**\n\t * Exception filter to handle unauthorized exceptions\n\t */\n\t@Catch(ForbiddenException)\n\texport class ForbiddenExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(ForbiddenExceptionFilter.name);\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n", "  /**\n\t   * Method to handle unauthorized exceptions\n\t   * @param exception - The thrown unauthorized exception\n\t   * @param host - The arguments host\n\t   */\n\t  catch(exception: ForbiddenException, host: ArgumentsHost): void {\n\t    this.logger.warn(exception);\n\t    // In certain situations `httpAdapter` might not be available in the\n\t    // constructor method, thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n", "    const ctx = host.switchToHttp();\n\t    const httpStatus = exception.getStatus();\n\t    // Example of fetching path to attach path inside response object\n\t    const request = ctx.getRequest();\n\t    // const path = httpAdapter.getRequestUrl(request);\n\t    // Sets the trace ID from the request object to the exception.\n\t    exception.setTraceId(request.id);\n\t    // Constructs the response body object.\n\t    const responseBody = exception.generateHttpResponseBody();\n\t    // Uses the HTTP adapter to send the response with the constructed response body\n", "    // and the HTTP status code.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n\t}\n"]}
{"filename": "src/filters/not-found-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus, Logger, NotFoundException } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\t/**\n\t * Catches all exceptions thrown by the application and sends an appropriate HTTP response.\n\t */\n\t@Catch(NotFoundException)\n\texport class NotFoundExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(NotFoundExceptionFilter.name);\n\t  /**\n\t   * Creates an instance of `NotFoundExceptionFilter`.\n", "   *\n\t   * @param {HttpAdapterHost} httpAdapterHost - the HTTP adapter host\n\t   */\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\t  /**\n\t   * Catches an exception and sends an appropriate HTTP response.\n\t   *\n\t   * @param {*} exception - the exception to catch\n\t   * @param {ArgumentsHost} host - the arguments host\n\t   * @returns {void}\n", "   */\n\t  catch(exception: any, host: ArgumentsHost): void {\n\t    // Log the exception.\n\t    // In certain situations `httpAdapter` might not be available in the\n\t    // constructor method, thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n\t    const ctx = host.switchToHttp();\n\t    const httpStatus = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\t    const request = ctx.getRequest();\n\t    // Construct the response body.\n", "    const responseBody = {\n\t      error: exception.code,\n\t      message: exception.message,\n\t      description: exception.description,\n\t      traceId: request.id,\n\t    };\n\t    // Send the HTTP response.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n\t}\n"]}
{"filename": "src/filters/all-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\t/**\n\t * Catches all exceptions thrown by the application and sends an appropriate HTTP response.\n\t */\n\t@Catch()\n\texport class AllExceptionsFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(AllExceptionsFilter.name);\n\t  /**\n\t   * Creates an instance of `AllExceptionsFilter`.\n", "   *\n\t   * @param {HttpAdapterHost} httpAdapterHost - the HTTP adapter host\n\t   */\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\t  /**\n\t   * Catches an exception and sends an appropriate HTTP response.\n\t   *\n\t   * @param {*} exception - the exception to catch\n\t   * @param {ArgumentsHost} host - the arguments host\n\t   * @returns {void}\n", "   */\n\t  catch(exception: any, host: ArgumentsHost): void {\n\t    // Log the exception.\n\t    this.logger.error(exception);\n\t    // In certain situations `httpAdapter` might not be available in the\n\t    // constructor method, thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n\t    const ctx = host.switchToHttp();\n\t    const httpStatus = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\t    const request = ctx.getRequest();\n", "    // Construct the response body.\n\t    const responseBody = {\n\t      error: exception.code,\n\t      message: exception.message,\n\t      description: exception.description,\n\t      timestamp: new Date().toISOString(),\n\t      traceId: request.id,\n\t    };\n\t    // Send the HTTP response.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n", "  }\n\t}\n"]}
{"filename": "src/filters/bad-request-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\timport { BadRequestException } from '../exceptions/bad-request.exception';\n\t/**\n\t * A filter to handle `BadRequestException`.\n\t */\n\t@Catch(BadRequestException)\n\texport class BadRequestExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(BadRequestException.name);\n\t  /**\n", "   * Constructs a new instance of `BadRequestExceptionFilter`.\n\t   * @param httpAdapterHost - The HttpAdapterHost instance to be used.\n\t   */\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\t  /**\n\t   * Handles the `BadRequestException` and transforms it into a JSON response.\n\t   * @param exception - The `BadRequestException` instance that was thrown.\n\t   * @param host - The `ArgumentsHost` instance that represents the current execution context.\n\t   */\n\t  catch(exception: BadRequestException, host: ArgumentsHost): void {\n", "    // Logs the exception details at the verbose level.\n\t    this.logger.verbose(exception);\n\t    // In certain situations `httpAdapter` might not be available in the constructor method,\n\t    // thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n\t    // Retrieves the current HTTP context from the `ArgumentsHost`.\n\t    const ctx = host.switchToHttp();\n\t    // Retrieves the HTTP status code from the `BadRequestException`.\n\t    const httpStatus = exception.getStatus();\n\t    // Retrieves the request object from the HTTP context.\n", "    const request = ctx.getRequest();\n\t    // Sets the trace ID from the request object to the exception.\n\t    exception.setTraceId(request.id);\n\t    // Constructs the response body object.\n\t    const responseBody = exception.generateHttpResponseBody();\n\t    // Uses the HTTP adapter to send the response with the constructed response body\n\t    // and the HTTP status code.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n\t}\n"]}
{"filename": "src/filters/validator-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, HttpStatus, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\timport { ValidationError } from 'class-validator';\n\timport { BadRequestException } from '../exceptions/bad-request.exception';\n\t/**\n\t * An exception filter to handle validation errors thrown by class-validator.\n\t */\n\t@Catch(ValidationError)\n\texport class ValidationExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(ValidationExceptionFilter.name);\n", "  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\t  /**\n\t   * Handle a validation error.\n\t   * @param exception The validation error object.\n\t   * @param host The arguments host object.\n\t   */\n\t  catch(exception: ValidationError, host: ArgumentsHost): void {\n\t    this.logger.verbose(exception);\n\t    // In certain situations `httpAdapter` might not be available in the\n\t    // constructor method, thus we should resolve it here.\n", "    const { httpAdapter } = this.httpAdapterHost;\n\t    const ctx = host.switchToHttp();\n\t    const httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n\t    const request = ctx.getRequest();\n\t    // Example of fetching path to attach path inside response object\n\t    // const path = httpAdapter.getRequestUrl(request);\n\t    const errorMsg = exception.constraints || exception.children[0].constraints;\n\t    // Create a new BadRequestException with the validation error message.\n\t    const err = BadRequestException.VALIDATION_ERROR(Object.values(errorMsg)[0]);\n\t    const responseBody = {\n", "      error: err.code,\n\t      message: err.message,\n\t      timestamp: new Date().toISOString(),\n\t      traceId: request.id,\n\t    };\n\t    // Uses the HTTP adapter to send the response with the constructed response body\n\t    // and the HTTP status code.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n\t}\n"]}
{"filename": "src/filters/index.ts", "chunked_list": ["export * from './not-found-exception.filter';\n\texport * from './all-exception.filter';\n\texport * from './bad-request-exception.filter';\n\texport * from './unauthorized-exception.filter';\n\texport * from './forbidden-exception.filter';\n\texport * from './validator-exception.filter';\n"]}
{"filename": "src/filters/internal-server-error-exception.filter.ts", "chunked_list": ["// Importing required modules and classes from NestJS\n\timport { ArgumentsHost, Catch, ExceptionFilter, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\timport { InternalServerErrorException } from '../exceptions/internal-server-error.exception';\n\t/**\n\t * A filter to handle `InternalServerErrorException`.\n\t */\n\t@Catch(InternalServerErrorException)\n\texport class InternalServerErrorExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(InternalServerErrorException.name);\n", "  /**\n\t   * Constructs a new instance of `InternalServerErrorExceptionFilter`.\n\t   * @param httpAdapterHost - The HttpAdapterHost instance to be used.\n\t   */\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\t  /**\n\t   * Handles the `InternalServerErrorException` and transforms it into a JSON response.\n\t   * @param exception - The `InternalServerErrorException` instance that was thrown.\n\t   * @param host - The `ArgumentsHost` instance that represents the current execution context.\n\t   */\n", "  catch(exception: InternalServerErrorException, host: ArgumentsHost): void {\n\t    // Logs the exception details at the error level.\n\t    this.logger.error(exception);\n\t    // In certain situations `httpAdapter` might not be available in the constructor method,\n\t    // thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n\t    // Retrieves the current HTTP context from the `ArgumentsHost`.\n\t    const ctx = host.switchToHttp();\n\t    // Retrieves the HTTP status code from the `InternalServerErrorException`.\n\t    const httpStatus = exception.getStatus();\n", "    // Retrieves the request object from the HTTP context.\n\t    const request = ctx.getRequest();\n\t    // Sets the trace ID from the request object to the exception.\n\t    exception.setTraceId(request.id);\n\t    // Constructs the response body object.\n\t    const responseBody = exception.generateHttpResponseBody();\n\t    // Uses the HTTP adapter to send the response with the constructed response body\n\t    // and the HTTP status code.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n", "}\n"]}
{"filename": "src/filters/unauthorized-exception.filter.ts", "chunked_list": ["import { ArgumentsHost, Catch, ExceptionFilter, Logger } from '@nestjs/common';\n\timport { HttpAdapterHost } from '@nestjs/core';\n\timport { UnauthorizedException } from '../exceptions/unauthorized.exception';\n\t/**\n\t * Exception filter to handle unauthorized exceptions\n\t */\n\t@Catch(UnauthorizedException)\n\texport class UnauthorizedExceptionFilter implements ExceptionFilter {\n\t  private readonly logger = new Logger(UnauthorizedExceptionFilter.name);\n\t  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n", "  /**\n\t   * Method to handle unauthorized exceptions\n\t   * @param exception - The thrown unauthorized exception\n\t   * @param host - The arguments host\n\t   */\n\t  catch(exception: UnauthorizedException, host: ArgumentsHost): void {\n\t    this.logger.warn(exception);\n\t    // In certain situations `httpAdapter` might not be available in the\n\t    // constructor method, thus we should resolve it here.\n\t    const { httpAdapter } = this.httpAdapterHost;\n", "    const ctx = host.switchToHttp();\n\t    const httpStatus = exception.getStatus();\n\t    // Example of fetching path to attach path inside response object\n\t    const request = ctx.getRequest();\n\t    // const path = httpAdapter.getRequestUrl(request);\n\t    // Sets the trace ID from the request object to the exception.\n\t    exception.setTraceId(request.id);\n\t    // Constructs the response body object.\n\t    const responseBody = exception.generateHttpResponseBody();\n\t    // Uses the HTTP adapter to send the response with the constructed response body\n", "    // and the HTTP status code.\n\t    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n\t  }\n\t}\n"]}
{"filename": "src/config/transmitter.config.ts", "chunked_list": ["export interface ITransmitterConfig {\n\t  connectXToken: string;\n\t  cronServiceUrl: string;\n\t  messageStormServiceUrl: string;\n\t}\n\texport const transmitterConfig = (): ITransmitterConfig => ({\n\t  connectXToken: process.env.CONNECT_X_TOKEN,\n\t  cronServiceUrl: process.env.CRON_SERVICE_URL,\n\t  messageStormServiceUrl: process.env.MESSAGE_STORM_SERVICE_URL,\n\t});\n"]}
{"filename": "src/config/database.config.ts", "chunked_list": ["export interface IDatabaseConfig {\n\t  uri: string;\n\t}\n\texport const databaseConfig = (): IDatabaseConfig => ({\n\t  uri: process.env.MONGODB_URI,\n\t});\n"]}
{"filename": "src/config/app.config.ts", "chunked_list": ["export interface IAppConfig {\n\t  logo: string;\n\t  name: string;\n\t  panelUrl: string;\n\t}\n\texport const appConfig = (): IAppConfig => ({\n\t  logo: process.env.APP_LOGO,\n\t  name: process.env.APP_NAME,\n\t  panelUrl: process.env.APP_PANEL_URL,\n\t});\n"]}
{"filename": "src/config/index.ts", "chunked_list": ["import { IAppConfig, appConfig } from './app.config';\n\timport { IDatabaseConfig, databaseConfig } from './database.config';\n\timport { ITransmitterConfig, transmitterConfig } from './transmitter.config';\n\timport { NodeEnv } from '../shared/enums/node-env.enum';\n\texport interface IConfig {\n\t  env: string;\n\t  port: number;\n\t  host: string;\n\t  logLevel: string;\n\t  clustering: string;\n", "  database: IDatabaseConfig;\n\t  logo: string;\n\t  app: IAppConfig;\n\t  transmitter: ITransmitterConfig;\n\t}\n\texport const configuration = (): Partial<IConfig> => ({\n\t  env: process.env.NODE_ENV || NodeEnv.DEVELOPMENT,\n\t  port: parseInt(process.env.PORT, 10) || 3009,\n\t  host: process.env.HOST || '127.0.0.1',\n\t  logLevel: process.env.LOG_LEVEL,\n", "  clustering: process.env.CLUSTERING,\n\t  database: databaseConfig(),\n\t  app: appConfig(),\n\t  transmitter: transmitterConfig(),\n\t});\n"]}
{"filename": "src/exceptions/unauthorized.exception.ts", "chunked_list": ["/**\n\t * A custom exception that represents a Unauthorized error.\n\t */\n\t// Import required modules\n\timport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\timport { HttpException, HttpStatus } from '@nestjs/common';\n\t// Import internal modules\n\timport { ExceptionConstants } from './exceptions.constants';\n\timport { IException, IHttpUnauthorizedExceptionResponse } from './exceptions.interface';\n\t/**\n", " * A custom exception for unauthorized access errors.\n\t */\n\texport class UnauthorizedException extends HttpException {\n\t  /** The error code. */\n\t  @ApiProperty({\n\t    enum: ExceptionConstants.UnauthorizedCodes,\n\t    description: 'A unique code identifying the error.',\n\t    example: ExceptionConstants.UnauthorizedCodes.TOKEN_EXPIRED_ERROR,\n\t  })\n\t  code: number;\n", "  /** The error that caused this exception. */\n\t  @ApiHideProperty()\n\t  cause: Error;\n\t  /** The error message. */\n\t  @ApiProperty({\n\t    description: 'Message for the exception',\n\t    example: 'The authentication token provided has expired.',\n\t  })\n\t  message: string;\n\t  /** The detailed description of the error. */\n", "  @ApiProperty({\n\t    description: 'A description of the error message.',\n\t    example: 'This error message indicates that the authentication token provided with the request has expired, and therefore the server cannot verify the users identity.',\n\t  })\n\t  description: string;\n\t  /** Timestamp of the exception */\n\t  @ApiProperty({\n\t    description: 'Timestamp of the exception',\n\t    format: 'date-time',\n\t    example: '2022-12-31T23:59:59.999Z',\n", "  })\n\t  timestamp: string;\n\t  /** Trace ID of the request */\n\t  @ApiProperty({\n\t    description: 'Trace ID of the request',\n\t    example: '65b5f773-df95-4ce5-a917-62ee832fcdd0',\n\t  })\n\t  traceId: string; // Trace ID of the request\n\t  /**\n\t   * Constructs a new UnauthorizedException object.\n", "   * @param exception An object containing the exception details.\n\t   *  - message: A string representing the error message.\n\t   *  - cause: An object representing the cause of the error.\n\t   *  - description: A string describing the error in detail.\n\t   *  - code: A number representing internal status code which helpful in future for frontend\n\t   */\n\t  constructor(exception: IException) {\n\t    super(exception.message, HttpStatus.UNAUTHORIZED, {\n\t      cause: exception.cause,\n\t      description: exception.description,\n", "    });\n\t    this.message = exception.message;\n\t    this.cause = exception.cause;\n\t    this.description = exception.description;\n\t    this.code = exception.code;\n\t    this.timestamp = new Date().toISOString();\n\t  }\n\t  /**\n\t   * Set the Trace ID of the BadRequestException instance.\n\t   * @param traceId A string representing the Trace ID.\n", "   */\n\t  setTraceId = (traceId: string) => {\n\t    this.traceId = traceId;\n\t  };\n\t  /**\n\t   * Generate an HTTP response body representing the BadRequestException instance.\n\t   * @param message A string representing the message to include in the response body.\n\t   * @returns An object representing the HTTP response body.\n\t   */\n\t  generateHttpResponseBody = (message?: string): IHttpUnauthorizedExceptionResponse => {\n", "    return {\n\t      code: this.code,\n\t      message: message || this.message,\n\t      description: this.description,\n\t      timestamp: this.timestamp,\n\t      traceId: this.traceId,\n\t    };\n\t  };\n\t  /**\n\t   * A static method to generate an exception for token expiration error.\n", "   * @param msg - An optional error message.\n\t   * @returns An instance of the UnauthorizedException class.\n\t   */\n\t  static TOKEN_EXPIRED_ERROR = (msg?: string) => {\n\t    return new UnauthorizedException({\n\t      message: msg || 'The authentication token provided has expired.',\n\t      code: ExceptionConstants.UnauthorizedCodes.TOKEN_EXPIRED_ERROR,\n\t    });\n\t  };\n\t  /**\n", "   * A static method to generate an exception for invalid JSON web token.\n\t   * @param msg - An optional error message.\n\t   * @returns An instance of the UnauthorizedException class.\n\t   */\n\t  static JSON_WEB_TOKEN_ERROR = (msg?: string) => {\n\t    return new UnauthorizedException({\n\t      message: msg || 'Invalid token specified.',\n\t      code: ExceptionConstants.UnauthorizedCodes.JSON_WEB_TOKEN_ERROR,\n\t    });\n\t  };\n", "  /**\n\t   * A static method to generate an exception for unauthorized access to a resource.\n\t   * @param description - An optional detailed description of the error.\n\t   * @returns An instance of the UnauthorizedException class.\n\t   */\n\t  static UNAUTHORIZED_ACCESS = (description?: string) => {\n\t    return new UnauthorizedException({\n\t      message: 'Access to the requested resource is unauthorized.',\n\t      code: ExceptionConstants.UnauthorizedCodes.UNAUTHORIZED_ACCESS,\n\t      description,\n", "    });\n\t  };\n\t  /**\n\t   * Create a UnauthorizedException for when a resource is not found.\n\t   * @param {string} [msg] - Optional message for the exception.\n\t   * @returns {BadRequestException} - A UnauthorizedException with the appropriate error code and message.\n\t   */\n\t  static RESOURCE_NOT_FOUND = (msg?: string) => {\n\t    return new UnauthorizedException({\n\t      message: msg || 'Resource Not Found',\n", "      code: ExceptionConstants.UnauthorizedCodes.RESOURCE_NOT_FOUND,\n\t    });\n\t  };\n\t  /**\n\t   * Create a UnauthorizedException for when a resource is not found.\n\t   * @param {string} [msg] - Optional message for the exception.\n\t   * @returns {BadRequestException} - A UnauthorizedException with the appropriate error code and message.\n\t   */\n\t  static USER_NOT_VERIFIED = (msg?: string) => {\n\t    return new UnauthorizedException({\n", "      message: msg || 'User not verified. Please complete verification process before attempting this action.',\n\t      code: ExceptionConstants.UnauthorizedCodes.USER_NOT_VERIFIED,\n\t    });\n\t  };\n\t  /**\n\t   * A static method to generate an exception for unexpected errors.\n\t   * @param error - The error that caused this exception.\n\t   * @returns An instance of the UnauthorizedException class.\n\t   */\n\t  static UNEXPECTED_ERROR = (error: any) => {\n", "    return new UnauthorizedException({\n\t      message: 'An unexpected error occurred while processing the request. Please try again later.',\n\t      code: ExceptionConstants.UnauthorizedCodes.UNEXPECTED_ERROR,\n\t      cause: error,\n\t    });\n\t  };\n\t  /**\n\t   * A static method to generate an exception for when a forgot or change password time previous login token needs to be re-issued.\n\t   * @param msg - An optional error message.\n\t   * @returns - An instance of the UnauthorizedException class.\n", "   */\n\t  static REQUIRED_RE_AUTHENTICATION = (msg?: string) => {\n\t    return new UnauthorizedException({\n\t      message: msg || 'Your previous login session has been terminated due to a password change or reset. Please log in again with your new password.',\n\t      code: ExceptionConstants.UnauthorizedCodes.REQUIRED_RE_AUTHENTICATION,\n\t    });\n\t  };\n\t  /**\n\t   * A static method to generate an exception for reset password token is invalid.\n\t   * @param msg - An optional error message.\n", "   * @returns - An instance of the UnauthorizedException class.\n\t   */\n\t  static INVALID_RESET_PASSWORD_TOKEN = (msg?: string) => {\n\t    return new UnauthorizedException({\n\t      message: msg || 'The reset password token provided is invalid. Please request a new reset password token.',\n\t      code: ExceptionConstants.UnauthorizedCodes.INVALID_RESET_PASSWORD_TOKEN,\n\t    });\n\t  };\n\t}\n"]}
{"filename": "src/exceptions/exceptions.interface.ts", "chunked_list": ["export interface IException {\n\t  message: string;\n\t  code?: number;\n\t  cause?: Error;\n\t  description?: string;\n\t}\n\texport interface IHttpBadRequestExceptionResponse {\n\t  code: number;\n\t  message: string;\n\t  description: string;\n", "  timestamp: string;\n\t  traceId: string;\n\t}\n\texport interface IHttpInternalServerErrorExceptionResponse {\n\t  code: number;\n\t  message: string;\n\t  description: string;\n\t  timestamp: string;\n\t  traceId: string;\n\t}\n", "export interface IHttpUnauthorizedExceptionResponse {\n\t  code: number;\n\t  message: string;\n\t  description: string;\n\t  timestamp: string;\n\t  traceId: string;\n\t}\n\texport interface IHttpForbiddenExceptionResponse {\n\t  code: number;\n\t  message: string;\n", "  description: string;\n\t  timestamp: string;\n\t  traceId: string;\n\t}\n"]}
{"filename": "src/exceptions/exceptions.constants.ts", "chunked_list": ["/**\n\t * This class defines constants for HTTP error codes.\n\t */\n\texport class ExceptionConstants {\n\t  /**\n\t   * Constants for bad request HTTP error codes.\n\t   */\n\t  public static readonly BadRequestCodes = {\n\t    MISSING_REQUIRED_PARAMETER: 10001, // Required parameter is missing from request\n\t    INVALID_PARAMETER_VALUE: 10002, // Parameter value is invalid\n", "    UNSUPPORTED_PARAMETER: 10003, // Request contains unsupported parameter\n\t    INVALID_CONTENT_TYPE: 10004, // Content type of request is invalid\n\t    INVALID_REQUEST_BODY: 10005, // Request body is invalid\n\t    RESOURCE_ALREADY_EXISTS: 10006, // Resource already exists\n\t    RESOURCE_NOT_FOUND: 10007, // Resource not found\n\t    REQUEST_TOO_LARGE: 10008, // Request is too large\n\t    REQUEST_ENTITY_TOO_LARGE: 10009, // Request entity is too large\n\t    REQUEST_URI_TOO_LONG: 10010, // Request URI is too long\n\t    UNSUPPORTED_MEDIA_TYPE: 10011, // Request contains unsupported media type\n\t    METHOD_NOT_ALLOWED: 10012, // Request method is not allowed\n", "    HTTP_REQUEST_TIMEOUT: 10013, // Request has timed out\n\t    VALIDATION_ERROR: 10014, // Request validation error\n\t    UNEXPECTED_ERROR: 10015, // Unexpected error occurred\n\t    INVALID_INPUT: 10016, // Invalid input\n\t  };\n\t  /**\n\t   * Constants for unauthorized HTTP error codes.\n\t   */\n\t  public static readonly UnauthorizedCodes = {\n\t    UNAUTHORIZED_ACCESS: 20001, // Unauthorized access to resource\n", "    INVALID_CREDENTIALS: 20002, // Invalid credentials provided\n\t    JSON_WEB_TOKEN_ERROR: 20003, // JSON web token error\n\t    AUTHENTICATION_FAILED: 20004, // Authentication failed\n\t    ACCESS_TOKEN_EXPIRED: 20005, // Access token has expired\n\t    TOKEN_EXPIRED_ERROR: 20006, // Token has expired error\n\t    UNEXPECTED_ERROR: 20007, // Unexpected error occurred\n\t    RESOURCE_NOT_FOUND: 20008, // Resource not found\n\t    USER_NOT_VERIFIED: 20009, // User not verified\n\t    REQUIRED_RE_AUTHENTICATION: 20010, // Required re-authentication\n\t    INVALID_RESET_PASSWORD_TOKEN: 20011, // Invalid reset password token\n", "  };\n\t  /**\n\t   * Constants for internal server error HTTP error codes.\n\t   */\n\t  public static readonly InternalServerErrorCodes = {\n\t    INTERNAL_SERVER_ERROR: 30001, // Internal server error\n\t    DATABASE_ERROR: 30002, // Database error\n\t    NETWORK_ERROR: 30003, // Network error\n\t    THIRD_PARTY_SERVICE_ERROR: 30004, // Third party service error\n\t    SERVER_OVERLOAD: 30005, // Server is overloaded\n", "    UNEXPECTED_ERROR: 30006, // Unexpected error occurred\n\t  };\n\t  /**\n\t   * Constants for forbidden HTTP error codes.\n\t   */\n\t  public static readonly ForbiddenCodes = {\n\t    FORBIDDEN: 40001, // Access to resource is forbidden\n\t    MISSING_PERMISSIONS: 40002, // User does not have the required permissions to access the resource\n\t    EXCEEDED_RATE_LIMIT: 40003, // User has exceeded the rate limit for accessing the resource\n\t    RESOURCE_NOT_FOUND: 40004, // The requested resource could not be found\n", "    TEMPORARILY_UNAVAILABLE: 40005, // The requested resource is temporarily unavailable\n\t  };\n\t}\n"]}
{"filename": "src/exceptions/internal-server-error.exception.ts", "chunked_list": ["import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\timport { HttpException, HttpStatus } from '@nestjs/common';\n\t// Import internal files & modules\n\timport { ExceptionConstants } from './exceptions.constants';\n\timport { IException, IHttpInternalServerErrorExceptionResponse } from './exceptions.interface';\n\t// Exception class for Internal Server Error\n\texport class InternalServerErrorException extends HttpException {\n\t  @ApiProperty({\n\t    enum: ExceptionConstants.InternalServerErrorCodes,\n\t    description: 'A unique code identifying the error.',\n", "    example: ExceptionConstants.InternalServerErrorCodes.INTERNAL_SERVER_ERROR,\n\t  })\n\t  code: number; // Internal status code\n\t  @ApiHideProperty()\n\t  cause: Error; // Error object causing the exception\n\t  @ApiProperty({\n\t    description: 'Message for the exception',\n\t    example: 'An unexpected error occurred while processing your request.',\n\t  })\n\t  message: string; // Message for the exception\n", "  @ApiProperty({\n\t    description: 'A description of the error message.',\n\t    example:\n\t      'The server encountered an unexpected condition that prevented it from fulfilling the request. This could be due to an error in the application code, a misconfiguration in the server, or an issue with the underlying infrastructure. Please try again later or contact the server administrator if the problem persists.',\n\t  })\n\t  description: string; // Description of the exception\n\t  @ApiProperty({\n\t    description: 'Timestamp of the exception',\n\t    format: 'date-time',\n\t    example: '2022-12-31T23:59:59.999Z',\n", "  })\n\t  timestamp: string; // Timestamp of the exception\n\t  @ApiProperty({\n\t    description: 'Trace ID of the request',\n\t    example: '65b5f773-df95-4ce5-a917-62ee832fcdd0',\n\t  })\n\t  traceId: string; // Trace ID of the request\n\t  /**\n\t   * Constructs a new InternalServerErrorException object.\n\t   * @param exception An object containing the exception details.\n", "   *  - message: A string representing the error message.\n\t   *  - cause: An object representing the cause of the error.\n\t   *  - description: A string describing the error in detail.\n\t   *  - code: A number representing internal status code which helpful in future for frontend\n\t   */\n\t  constructor(exception: IException) {\n\t    super(exception.message, HttpStatus.INTERNAL_SERVER_ERROR, {\n\t      cause: exception.cause,\n\t      description: exception.description,\n\t    });\n", "    this.message = exception.message;\n\t    this.cause = exception.cause;\n\t    this.description = exception.description;\n\t    this.code = exception.code;\n\t    this.timestamp = new Date().toISOString();\n\t  }\n\t  /**\n\t   * Set the Trace ID of the BadRequestException instance.\n\t   * @param traceId A string representing the Trace ID.\n\t   */\n", "  setTraceId = (traceId: string) => {\n\t    this.traceId = traceId;\n\t  };\n\t  /**\n\t   * Generate an HTTP response body representing the BadRequestException instance.\n\t   * @param message A string representing the message to include in the response body.\n\t   * @returns An object representing the HTTP response body.\n\t   */\n\t  generateHttpResponseBody = (message?: string): IHttpInternalServerErrorExceptionResponse => {\n\t    return {\n", "      code: this.code,\n\t      message: message || this.message,\n\t      description: this.description,\n\t      timestamp: this.timestamp,\n\t      traceId: this.traceId,\n\t    };\n\t  };\n\t  /**\n\t   * Returns a new instance of InternalServerErrorException with a standard error message and code\n\t   * @param error Error object causing the exception\n", "   * @returns A new instance of InternalServerErrorException\n\t   */\n\t  static INTERNAL_SERVER_ERROR = (error: any) => {\n\t    return new InternalServerErrorException({\n\t      message: 'We are sorry, something went wrong on our end. Please try again later or contact our support team for assistance.',\n\t      code: ExceptionConstants.InternalServerErrorCodes.INTERNAL_SERVER_ERROR,\n\t      cause: error,\n\t    });\n\t  };\n\t  /**\n", "   * Returns a new instance of InternalServerErrorException with a custom error message and code\n\t   * @param error Error object causing the exception\n\t   * @returns A new instance of InternalServerErrorException\n\t   */\n\t  static UNEXPECTED_ERROR = (error: any) => {\n\t    return new InternalServerErrorException({\n\t      message: 'An unexpected error occurred while processing the request.',\n\t      code: ExceptionConstants.InternalServerErrorCodes.UNEXPECTED_ERROR,\n\t      cause: error,\n\t    });\n", "  };\n\t}\n"]}
{"filename": "src/exceptions/index.ts", "chunked_list": ["export * from './bad-request.exception';\n\texport * from './internal-server-error.exception';\n\texport * from './unauthorized.exception';\n\texport * from './forbidden.exception';\n"]}
{"filename": "src/exceptions/forbidden.exception.ts", "chunked_list": ["/**\n\t * A custom exception that represents a Forbidden error.\n\t */\n\t// Import required modules\n\timport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\timport { HttpException, HttpStatus } from '@nestjs/common';\n\t// Import internal modules\n\timport { ExceptionConstants } from './exceptions.constants';\n\timport { IException, IHttpForbiddenExceptionResponse } from './exceptions.interface';\n\t/**\n", " * A custom exception for forbidden errors.\n\t */\n\texport class ForbiddenException extends HttpException {\n\t  /** The error code. */\n\t  @ApiProperty({\n\t    enum: ExceptionConstants.ForbiddenCodes,\n\t    description: 'You do not have permission to perform this action.',\n\t    example: ExceptionConstants.ForbiddenCodes.MISSING_PERMISSIONS,\n\t  })\n\t  code: number;\n", "  /** The error that caused this exception. */\n\t  @ApiHideProperty()\n\t  cause: Error;\n\t  /** The error message. */\n\t  @ApiProperty({\n\t    description: 'Message for the exception',\n\t    example: 'You do not have permission to perform this action.',\n\t  })\n\t  message: string;\n\t  /** The detailed description of the error. */\n", "  @ApiProperty({\n\t    description: 'A description of the error message.',\n\t  })\n\t  description: string;\n\t  /** Timestamp of the exception */\n\t  @ApiProperty({\n\t    description: 'Timestamp of the exception',\n\t    format: 'date-time',\n\t    example: '2022-12-31T23:59:59.999Z',\n\t  })\n", "  timestamp: string;\n\t  /** Trace ID of the request */\n\t  @ApiProperty({\n\t    description: 'Trace ID of the request',\n\t    example: '65b5f773-df95-4ce5-a917-62ee832fcdd0',\n\t  })\n\t  traceId: string; // Trace ID of the request\n\t  /**\n\t   * Constructs a new ForbiddenException object.\n\t   * @param exception An object containing the exception details.\n", "   *  - message: A string representing the error message.\n\t   *  - cause: An object representing the cause of the error.\n\t   *  - description: A string describing the error in detail.\n\t   *  - code: A number representing internal status code which helpful in future for frontend\n\t   */\n\t  constructor(exception: IException) {\n\t    super(exception.message, HttpStatus.FORBIDDEN, {\n\t      cause: exception.cause,\n\t      description: exception.description,\n\t    });\n", "    this.message = exception.message;\n\t    this.cause = exception.cause;\n\t    this.description = exception.description;\n\t    this.code = exception.code;\n\t    this.timestamp = new Date().toISOString();\n\t  }\n\t  /**\n\t   * Set the Trace ID of the ForbiddenException instance.\n\t   * @param traceId A string representing the Trace ID.\n\t   */\n", "  setTraceId = (traceId: string) => {\n\t    this.traceId = traceId;\n\t  };\n\t  /**\n\t   * Generate an HTTP response body representing the ForbiddenException instance.\n\t   * @param message A string representing the message to include in the response body.\n\t   * @returns An object representing the HTTP response body.\n\t   */\n\t  generateHttpResponseBody = (message?: string): IHttpForbiddenExceptionResponse => {\n\t    return {\n", "      code: this.code,\n\t      message: message || this.message,\n\t      description: this.description,\n\t      timestamp: this.timestamp,\n\t      traceId: this.traceId,\n\t    };\n\t  };\n\t  /**\n\t   * A static method to generate an exception forbidden error.\n\t   * @param msg - An optional error message.\n", "   * @returns An instance of the ForbiddenException class.\n\t   */\n\t  static FORBIDDEN = (msg?: string) => {\n\t    return new ForbiddenException({\n\t      message: msg || 'Access to this resource is forbidden.',\n\t      code: ExceptionConstants.ForbiddenCodes.FORBIDDEN,\n\t    });\n\t  };\n\t  /**\n\t   * A static method to generate an exception missing permissions error.\n", "   * @param msg - An optional error message.\n\t   * @returns An instance of the ForbiddenException class.\n\t   */\n\t  static MISSING_PERMISSIONS = (msg?: string) => {\n\t    return new ForbiddenException({\n\t      message: msg || 'You do not have permission to perform this action.',\n\t      code: ExceptionConstants.ForbiddenCodes.MISSING_PERMISSIONS,\n\t    });\n\t  };\n\t}\n"]}
{"filename": "src/exceptions/bad-request.exception.ts", "chunked_list": ["/**\n\t * A custom exception that represents a BadRequest error.\n\t */\n\t// Import required modules\n\timport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\timport { HttpException, HttpStatus } from '@nestjs/common';\n\t// Import internal modules\n\timport { ExceptionConstants } from './exceptions.constants';\n\timport { IException, IHttpBadRequestExceptionResponse } from './exceptions.interface';\n\texport class BadRequestException extends HttpException {\n", "  @ApiProperty({\n\t    enum: ExceptionConstants.BadRequestCodes,\n\t    description: 'A unique code identifying the error.',\n\t    example: ExceptionConstants.BadRequestCodes.VALIDATION_ERROR,\n\t  })\n\t  code: number; // Internal status code\n\t  @ApiHideProperty()\n\t  cause: Error; // Error object causing the exception\n\t  @ApiProperty({\n\t    description: 'Message for the exception',\n", "    example: 'Bad Request',\n\t  })\n\t  message: string; // Message for the exception\n\t  @ApiProperty({\n\t    description: 'A description of the error message.',\n\t    example: 'The input provided was invalid',\n\t  })\n\t  description: string; // Description of the exception\n\t  @ApiProperty({\n\t    description: 'Timestamp of the exception',\n", "    format: 'date-time',\n\t    example: '2022-12-31T23:59:59.999Z',\n\t  })\n\t  timestamp: string; // Timestamp of the exception\n\t  @ApiProperty({\n\t    description: 'Trace ID of the request',\n\t    example: '65b5f773-df95-4ce5-a917-62ee832fcdd0',\n\t  })\n\t  traceId: string; // Trace ID of the request\n\t  /**\n", "   * Constructs a new BadRequestException object.\n\t   * @param exception An object containing the exception details.\n\t   *  - message: A string representing the error message.\n\t   *  - cause: An object representing the cause of the error.\n\t   *  - description: A string describing the error in detail.\n\t   *  - code: A number representing internal status code which helpful in future for frontend\n\t   */\n\t  constructor(exception: IException) {\n\t    super(exception.message, HttpStatus.BAD_REQUEST, {\n\t      cause: exception.cause,\n", "      description: exception.description,\n\t    });\n\t    this.message = exception.message;\n\t    this.cause = exception.cause;\n\t    this.description = exception.description;\n\t    this.code = exception.code;\n\t    this.timestamp = new Date().toISOString();\n\t  }\n\t  /**\n\t   * Set the Trace ID of the BadRequestException instance.\n", "   * @param traceId A string representing the Trace ID.\n\t   */\n\t  setTraceId = (traceId: string) => {\n\t    this.traceId = traceId;\n\t  };\n\t  /**\n\t   * Generate an HTTP response body representing the BadRequestException instance.\n\t   * @param message A string representing the message to include in the response body.\n\t   * @returns An object representing the HTTP response body.\n\t   */\n", "  generateHttpResponseBody = (message?: string): IHttpBadRequestExceptionResponse => {\n\t    return {\n\t      code: this.code,\n\t      message: message || this.message,\n\t      description: this.description,\n\t      timestamp: this.timestamp,\n\t      traceId: this.traceId,\n\t    };\n\t  };\n\t  /**\n", "   * Returns a new instance of BadRequestException representing an HTTP Request Timeout error.\n\t   * @returns An instance of BadRequestException representing the error.\n\t   */\n\t  static HTTP_REQUEST_TIMEOUT = () => {\n\t    return new BadRequestException({\n\t      message: 'HTTP Request Timeout',\n\t      code: ExceptionConstants.BadRequestCodes.HTTP_REQUEST_TIMEOUT,\n\t    });\n\t  };\n\t  /**\n", "   * Create a BadRequestException for when a resource already exists.\n\t   * @param {string} [msg] - Optional message for the exception.\n\t   * @returns {BadRequestException} - A BadRequestException with the appropriate error code and message.\n\t   */\n\t  static RESOURCE_ALREADY_EXISTS = (msg?: string) => {\n\t    return new BadRequestException({\n\t      message: msg || 'Resource Already Exists',\n\t      code: ExceptionConstants.BadRequestCodes.RESOURCE_ALREADY_EXISTS,\n\t    });\n\t  };\n", "  /**\n\t   * Create a BadRequestException for when a resource is not found.\n\t   * @param {string} [msg] - Optional message for the exception.\n\t   * @returns {BadRequestException} - A BadRequestException with the appropriate error code and message.\n\t   */\n\t  static RESOURCE_NOT_FOUND = (msg?: string) => {\n\t    return new BadRequestException({\n\t      message: msg || 'Resource Not Found',\n\t      code: ExceptionConstants.BadRequestCodes.RESOURCE_NOT_FOUND,\n\t    });\n", "  };\n\t  /**\n\t   * Returns a new instance of BadRequestException representing a Validation Error.\n\t   * @param msg A string representing the error message.\n\t   * @returns An instance of BadRequestException representing the error.\n\t   */\n\t  static VALIDATION_ERROR = (msg?: string) => {\n\t    return new BadRequestException({\n\t      message: msg || 'Validation Error',\n\t      code: ExceptionConstants.BadRequestCodes.VALIDATION_ERROR,\n", "    });\n\t  };\n\t  /**\n\t   * Returns a new instance of BadRequestException representing an Unexpected Error.\n\t   * @param msg A string representing the error message.\n\t   * @returns An instance of BadRequestException representing the error.\n\t   */\n\t  static UNEXPECTED = (msg?: string) => {\n\t    return new BadRequestException({\n\t      message: msg || 'Unexpected Error',\n", "      code: ExceptionConstants.BadRequestCodes.UNEXPECTED_ERROR,\n\t    });\n\t  };\n\t  /**\n\t   * Returns a new instance of BadRequestException representing an Invalid Input.\n\t   * @param msg A string representing the error message.\n\t   * @returns An instance of BadRequestException representing the error.\n\t   */\n\t  static INVALID_INPUT = (msg?: string) => {\n\t    return new BadRequestException({\n", "      message: msg || 'Invalid Input',\n\t      code: ExceptionConstants.BadRequestCodes.INVALID_INPUT,\n\t    });\n\t  };\n\t}\n"]}
{"filename": "src/shared/enums/index.ts", "chunked_list": ["export * from './log-level.enum';\n\texport * from './node-env.enum';\n"]}
{"filename": "src/shared/enums/log-level.enum.ts", "chunked_list": ["export enum LogLevel {\n\t  SILENT = 'silent',\n\t  TRACE = 'trace',\n\t  DEBUG = 'debug',\n\t  INFO = 'info',\n\t  WARN = 'warn',\n\t  ERROR = 'error',\n\t  FATAL = 'fatal',\n\t}\n"]}
{"filename": "src/shared/enums/node-env.enum.ts", "chunked_list": ["export enum NodeEnv {\n\t  DEVELOPMENT = 'development',\n\t  TEST = 'test',\n\t  PRODUCTION = 'production',\n\t}\n"]}
