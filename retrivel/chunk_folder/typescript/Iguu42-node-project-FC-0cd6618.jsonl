{"filename": "src/server.ts", "chunked_list": ["import { AppError } from './errors/AppError';\n\timport { NextFunction, Response } from 'express';\n\timport { Request } from 'express';\n\timport \"express-async-errors\";\n\timport express from 'express';\n\timport { routes } from './routes';\n\timport swaggerDocs from './swagger.json';\n\tconst cors = require(\"cors\");\n\tconst swaggerUi = require('swagger-ui-express');\n\tconst app = express();\n", "app.use(cors());\n\tapp.use(express.json());\n\tapp.use(routes);\n\tapp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerDocs));\n\tapp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n\t    if (err instanceof AppError) {\n\t        return res.status(err.statusCode).json({\n\t            status: \"error\",\n\t            message: err.message\n\t        })\n", "    }\n\t    return res.status(500).json({\n\t        status: \"error\",\n\t        message: \"Internal server error\"\n\t    })\n\t})\n\tapp.listen(process.env.PORT, () => console.log(`server is running in port ${process.env.PORT}`));\n"]}
{"filename": "src/prisma/client.ts", "chunked_list": ["import * as dotenv from 'dotenv';\n\tdotenv.config()\n\timport { PrismaClient } from \"@prisma/client\";\n\texport const prisma = new PrismaClient();"]}
{"filename": "src/modules/pedidos/BuscarTodosPedidos/GetAllPedidosUseCase.ts", "chunked_list": ["import { pedido, pedido_status, nota_fiscal, pagamento, produto, cliente } from \"@prisma/client\";\n\timport { prisma } from \"../../../prisma/client\";\n\texport class GetAllPedidosUseCase {\n\t    async execute(): Promise<any[]> {\n\t        const pedidos = await prisma.pedido.findMany({\n\t            include: {\n\t                cliente: {\n\t                    select: {\n\t                        nome_completo: true,\n\t                        cpf: true\n", "                    }\n\t                },\n\t                pedido_status: {\n\t                    select: {\n\t                        status_pedido: true,\n\t                        status_erro: true,\n\t                        problema_resolvido: true\n\t                    }\n\t                },\n\t                produto: {\n", "                    select: {\n\t                        valor: true,\n\t                        quantidade: true\n\t                    }\n\t                },\n\t            }\n\t        });\n\t        const moment = require('moment');\n\t        const pedidosFormatados = pedidos.map((pedido) => {\n\t            const valorTotal = pedido.produto.reduce((total, produto) => {\n", "                return total + (produto.valor * produto.quantidade);\n\t            }, 0);\n\t            return {\n\t                cpf: pedido.cliente.cpf,\n\t                nome: pedido.cliente.nome_completo,\n\t                numeroDoPedido: pedido.numero,\n\t                status_erro: pedido.pedido_status.status_erro,\n\t                valorTotal: valorTotal,\n\t                dataDaCompra: moment(pedido.data_pedido_realizado).format('DD/MM/YYYY'),\n\t                status_pedido: pedido.pedido_status.status_pedido,\n", "                timestempDataDaCompra: pedido.data_pedido_realizado,\n\t                problemaResolvido: pedido.pedido_status.problema_resolvido\n\t            };\n\t        });\n\t        return pedidosFormatados;\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/BuscarTodosPedidos/GetAllPedidosController.ts", "chunked_list": ["import { GetAllPedidosUseCase } from \"./GetAllPedidosUseCase\";\n\timport { Request, Response } from \"express\";\n\texport class GetAllPedidosController {\n\t    async handle(req: Request, res: Response) {\n\t        const getAllPedidosUseCase = new GetAllPedidosUseCase();\n\t        res.setHeader('Cache-Control', 's-maxage=10, stale-while-revalidate');\n\t        const result = await getAllPedidosUseCase.execute();\n\t        return res.status(200).json(result);\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/comentarios/CriarComentarioUseCase.ts", "chunked_list": ["import { pedido, comentario } from \"@prisma/client\";\n\timport { prisma } from \"../../../prisma/client\";\n\texport class CriarComentarioUseCase {\n\t  async criarComentario(idPedido: string, conteudo: string): Promise<any> {\n\t    try {\n\t      const comentario = await prisma.comentario.create({\n\t        data: {\n\t          id_pedido: idPedido,\n\t          conteudo: conteudo\n\t        }\n", "      });\n\t      console.log('Comentário criado:', comentario);\n\t    } catch (error) {\n\t      console.error('Erro ao criar comentário:', error);\n\t    }\n\t  }\n\t}"]}
{"filename": "src/modules/pedidos/comentarios/DeletarComentarioUseCase.ts", "chunked_list": ["import { prisma } from \"../../../prisma/client\";\n\texport class DeletarComentarioUseCase {\n\t  public excluirComentario = async (id_comentario: number) => {\n\t    await prisma.comentario.delete({\n\t      where: {\n\t        id_comentario: id_comentario\n\t      }\n\t    });\n\t  }\n\t}\n"]}
{"filename": "src/modules/pedidos/comentarios/CriarComentarioController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { CriarComentarioUseCase } from \"./CriarComentarioUseCase\";\n\texport class CriarComentarioController {\n\t  async handle(req: Request, res: Response) {\n\t    const [{ idPedido, conteudo }] = req.body;\n\t    const criarComentarioUseCase = new CriarComentarioUseCase();\n\t    try {\n\t      await criarComentarioUseCase.criarComentario(idPedido, conteudo);\n\t      return res.status(201).json({ message: \"Comentário criado com sucesso\" });\n\t    } catch (error) {\n", "      console.error(\"Erro ao criar comentário:\", error);\n\t      return res.status(500).json({ message: \"Erro ao criar comentário\" });\n\t    }\n\t  }\n\t}\n"]}
{"filename": "src/modules/pedidos/comentarios/ResponderComentarioUseCase.ts", "chunked_list": ["import { prisma } from \"../../../prisma/client\";\n\texport class ResponderComentarioUseCase {\n\t  public responderComentario = async (id_comentario: number, id_pedido: string, resposta: string) => {\n\t    const novaResposta = await prisma.comentario.create({\n\t      data: {\n\t        id_pedido: id_pedido,\n\t        conteudo: resposta,\n\t        comentario_pai_id: id_comentario\n\t      }\n\t    });\n", "    return novaResposta;\n\t  }\n\t}"]}
{"filename": "src/modules/pedidos/comentarios/ResponderComentarioController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { ResponderComentarioUseCase } from \"./ResponderComentarioUseCase\";\n\texport class ResponderComentarioController{\n\t    async handle(request: Request, response: Response): Promise<Response>{\n\t        const { id_comentario } = request.params;\n\t        const { resposta, id_pedido } = request.body;\n\t        const responderComentarioUseCase = new ResponderComentarioUseCase();\n\t        try {\n\t            await responderComentarioUseCase.responderComentario(parseInt(id_comentario), id_pedido, resposta);\n\t            return response.status(200).json({ message: \"Comentário respondido com sucesso\" });\n", "        } catch (error) {\n\t            console.error(\"Erro ao responder comentário:\", error);\n\t            return response.status(500).json({ message: \"Erro ao responder comentário\" });\n\t        }\n\t    }\n\t}"]}
{"filename": "src/modules/pedidos/comentarios/GetComentariosUseCase.ts", "chunked_list": ["import { prisma } from \"../../../prisma/client\";\n\texport class GetComentariosUseCase {\n\t  async getComentarios(idPedido: string): Promise<any> {\n\t    const comentarios = await prisma.comentario.findMany({\n\t      where: {\n\t        id_pedido: idPedido\n\t      },\n\t    });\n\t    return comentarios;\n\t  }\n", "}"]}
{"filename": "src/modules/pedidos/comentarios/GetComentariosController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { DeletarComentarioUseCase } from \"./DeletarComentarioUseCase\";\n\timport { GetComentariosUseCase } from \"./GetComentariosUseCase\";\n\texport class GetComentariosController {\n\t    async handle(req: Request, res: Response) {\n\t        const { id } = req.params;\n\t        const getComentariosUseCase = new GetComentariosUseCase();\n\t        try {\n\t            const comentarios = await getComentariosUseCase.getComentarios(id);\n\t            return res.status(200).json(comentarios);\n", "        } catch (error) {\n\t            console.error(\"Erro ao buscar comentários:\", error);\n\t            return res.status(500).json({ message: \"Erro ao buscar comentários\" });\n\t        }\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/comentarios/DeletarComentarioController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { DeletarComentarioUseCase } from \"./DeletarComentarioUseCase\";\n\texport class DeletarComentarioController {\n\t    async handle(req: Request, res: Response) {\n\t    const { id } = req.params;\n\t    const deletarComentarioUseCase = new DeletarComentarioUseCase();\n\t    try {\n\t        await deletarComentarioUseCase.excluirComentario(parseInt(id));\n\t        return res.status(200).json({ message: \"Comentário deletado com sucesso\" });\n\t      } catch (error) {\n", "        console.error(\"Erro ao deletar comentário:\", error);\n\t        return res.status(500).json({ message: \"Erro ao deletar comentário\" });\n\t      }\n\t  }\n\t}\n"]}
{"filename": "src/modules/pedidos/buscarPedidosPorData/GetPedidosPorDataController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { GetPedidosDataUseCase } from \"./GetPedidosPorDataUseCase\";\n\texport class GetPedidosDataController {\n\t    async handle(req: Request, res: Response) {\n\t        const getPedidosDataUseCase = new GetPedidosDataUseCase();\n\t        const {datarealizado} = req.params;\n\t        const results = await getPedidosDataUseCase.allPedidosData(datarealizado);\n\t        if(results?.length === 0) {\n\t          return res.status(404).json({\n\t            message: `Não foi possível encontrar pedidos realizados com a data informada ${datarealizado}`\n", "          });\n\t        }\n\t        else {\n\t          return res.status(200).json(results);\n\t        } \n\t    }\n\t}"]}
{"filename": "src/modules/pedidos/buscarPedidosPorData/GetPedidosPorDataUseCase.ts", "chunked_list": ["import {\n\t  pedido,\n\t  pedido_status,\n\t  nota_fiscal,\n\t  pagamento,\n\t  produto,\n\t  cliente\n\t} from '@prisma/client'\n\timport { prisma } from '../../../prisma/client'\n\texport class GetPedidosDataUseCase {\n", "  async allPedidosData(data: String): Promise<any[] | null> {\n\t    const pedidos = await prisma.pedido.findMany({\n\t      where: {\n\t        data_pedido_realizado: {\n\t          gte: new Date(`${data}`),\n\t          lt: new Date(`${data}T23:59:59Z`)\n\t        }\n\t      },\n\t      include: {\n\t        cliente: {\n", "          select: {\n\t            nome_completo: true,\n\t            cpf: true\n\t          }\n\t        },\n\t        pedido_status: {\n\t          select: {\n\t            status_pedido: true,\n\t            status_erro: true\n\t          }\n", "        },\n\t        nota_fiscal: {\n\t          select: {\n\t            numero_nota: true\n\t          }\n\t        },\n\t        pagamento: {\n\t          select: {\n\t            tipo_pagamento: true,\n\t            parcela: true\n", "          }\n\t        },\n\t        produto: {\n\t          select: {\n\t            nome_produto: true,\n\t            quantidade: true,\n\t            valor: true\n\t          }\n\t        }\n\t      }\n", "    })\n\t    if (!pedidos) {\n\t      return null\n\t    }\n\t    const pedidosFormatados = pedidos.map(pedido => ({\n\t      status_pedido: pedido.pedido_status.status_pedido,\n\t      status_erro: pedido.pedido_status.status_erro,\n\t      pedido: pedido.cliente.cpf,\n\t      numero_nota_fiscal: pedido.nota_fiscal.numero_nota,\n\t      data_pedido_realizado: pedido.data_pedido_realizado,\n", "      nome_cliente: pedido.cliente.nome_completo,\n\t      tipo_pagamento: pedido.pagamento.tipo_pagamento,\n\t      // valor_e_parcela: `${pedido.pagamento.parcela}x - R$${pedido.produto.valor}`,\n\t      // nome_produto: pedido.produto.nome_produto,\n\t      // quantidade_produto: pedido.produto.quantidade\n\t    }))\n\t    return pedidosFormatados\n\t  }\n\t}\n"]}
{"filename": "src/modules/pedidos/buscarPedidosPorCPF/GetPedidoPorCpfController.ts", "chunked_list": ["import { GetPedidoPorCpfUseCase } from \"./GetPedidoPorCpfUseCase\";\n\timport { Request, Response } from \"express\";\n\texport class GetPedidoPorCpfController {\n\t    async handle(req: Request, res: Response) {\n\t        const { cpf } = req.params;\n\t        const getPedidoPorCpfUseCase = new GetPedidoPorCpfUseCase();\n\t        if (cpf) {\n\t            const pedidos = await getPedidoPorCpfUseCase.getPedidoPorCpf(cpf);\n\t            if (!pedidos) {\n\t                return res.status(404).json({ message: \"Pedido não encontrado.\" });\n", "            }\n\t            return res.status(200).json(pedidos);\n\t        }\n\t        const result = await getPedidoPorCpfUseCase.getPedidoPorCpf;\n\t        return res.status(200).json(result);\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/buscarPedidosPorCPF/GetPedidoPorCpfUseCase.ts", "chunked_list": ["import { pedido, pedido_status, nota_fiscal, pagamento, produto, cliente } from \"@prisma/client\";\n\timport { prisma } from \"../../../prisma/client\";\n\texport class GetPedidoPorCpfUseCase {\n\t    async getPedidoPorCpf(numero: string): Promise<any | null> {\n\t        if (numero.length === 11) {\n\t            const clienteCpf = await prisma.cliente.findFirst({\n\t                where: {\n\t                    cpf: numero\n\t                }\n\t            });\n", "            if (clienteCpf) {\n\t                const pedido = await prisma.pedido.findMany({\n\t                    where: {\n\t                        id_cliente: clienteCpf.id_cliente\n\t                    },\n\t                    include: {\n\t                        cliente: {\n\t                            select: {\n\t                                nome_completo: true,\n\t                                cpf: true\n", "                            }\n\t                        },\n\t                        pedido_status: {\n\t                            select: {\n\t                                status_pedido: true,\n\t                                status_erro: true\n\t                            }\n\t                        },\n\t                        nota_fiscal: {\n\t                            select: {\n", "                                numero_nota: true\n\t                            }\n\t                        },\n\t                        pagamento: {\n\t                            select: {\n\t                                tipo_pagamento: true,\n\t                                parcela: true\n\t                            }\n\t                        },\n\t                        produto: {\n", "                            select: {\n\t                                nome_produto: true,\n\t                                quantidade: true\n\t                            }\n\t                        }\n\t                    }\n\t                });\n\t                if (!pedido) {\n\t                    return null;\n\t                }\n", "                const pedidosFormatados = pedido.map((pedido) => ({\n\t                    numero: pedido.numero,\n\t                    status_pedido: pedido.pedido_status.status_pedido,\n\t                    status_erro: pedido.pedido_status.status_erro,\n\t                    numero_nota_fiscal: pedido.nota_fiscal.numero_nota,\n\t                    data_pedido_realizado: pedido.data_pedido_realizado,\n\t                    nome_cliente: pedido.cliente.nome_completo,\n\t                    cpf_cliente: pedido.cliente.cpf,\n\t                    tipo_pagamento: pedido.pagamento.tipo_pagamento,\n\t                }));\n", "                return pedidosFormatados;\n\t            }\n\t        }\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/buscarPedidoPorNumero/GetPedidoPorNumeroUseCase.ts", "chunked_list": ["import { pedido, pedido_status, nota_fiscal, pagamento, produto, cliente } from \"@prisma/client\";\n\timport { prisma } from \"../../../prisma/client\";\n\texport class GetPedidoPorNumeroUseCase {\n\t    async getPedidoPorNumero(numero: string): Promise<any | null> {\n\t        const pedido = await prisma.pedido.findFirst({\n\t            where: {\n\t                numero\n\t            },\n\t            include: {\n\t                cliente: {\n", "                    select: {\n\t                        nome_completo: true,\n\t                        cpf: true,\n\t                        telefone: true,\n\t                        email: true,\n\t                        endereco: true\n\t                    }\n\t                }, produto: {\n\t                    select: {\n\t                        nome_produto: true,\n", "                        referencia: true,\n\t                        descricao: true,\n\t                        quantidade: true,\n\t                        valor: true,\n\t                    }\n\t                },\n\t                pagamento: {\n\t                    select: {\n\t                        tipo_pagamento: true,\n\t                        parcela: true,\n", "                        id_transacao: true\n\t                    }\n\t                },\n\t                pedido_status: {\n\t                    select: {\n\t                        status_pedido: true,\n\t                        status_erro: true\n\t                    }\n\t                }\n\t            }\n", "        });\n\t        if (!pedido) {\n\t            return null;\n\t        }\n\t        const produtosFormatados: { nome: string; referencia: string; descricao: string; quantidade: number; valor_produto: number; valor_total_produto: number; }[] = [];\n\t        pedido.produto.forEach((produto) => {\n\t            const produtoFormatado = {\n\t                nome: produto.nome_produto,\n\t                referencia: produto.referencia,\n\t                descricao: produto.descricao,\n", "                quantidade: produto.quantidade,\n\t                valor_produto: produto.valor,\n\t                valor_total_produto: produto.valor * produto.quantidade\n\t            };\n\t            produtosFormatados.push(produtoFormatado);\n\t        });\n\t        const moment = require('moment');\n\t        const pedidoFormatado = {\n\t            cpf: pedido.cliente.cpf,\n\t            nome: pedido.cliente.nome_completo,\n", "            contato: pedido.cliente.telefone,\n\t            email: pedido.cliente.email,\n\t            endereco: pedido.cliente.endereco,\n\t            numeroDoPedido: pedido.numero,\n\t            produtos: produtosFormatados,\n\t            tipo_pagamento: pedido.pagamento.tipo_pagamento,\n\t            parcelas: pedido.pagamento.parcela,\n\t            id_transacao: pedido.pagamento.id_transacao,\n\t            dataDaCompra: moment(pedido.data_pedido_realizado).format('DD/MM/YYYY'),\n\t            status_pedido: pedido.pedido_status.status_pedido,\n", "            status_erro: pedido.pedido_status.status_erro\n\t        };\n\t        return pedidoFormatado;\n\t    }\n\t}"]}
{"filename": "src/modules/pedidos/buscarPedidoPorNumero/GetPedidoPorNumeroController.ts", "chunked_list": ["import { GetPedidoPorNumeroUseCase } from \"./GetPedidoPorNumeroUseCase\";\n\timport { Request, Response } from \"express\";\n\texport class GetPedidoPorNumeroController {\n\t    async handle(req: Request, res: Response) {\n\t        const { numbers } = req.params;\n\t        const getPedidoPorNumeroUseCase = new GetPedidoPorNumeroUseCase();\n\t        if (numbers) {\n\t            const pedido = await getPedidoPorNumeroUseCase.getPedidoPorNumero(numbers);\n\t            if (!pedido) {\n\t                return res.status(404).json({ message: \"Pedido não encontrado.\" });\n", "            }\n\t            return res.status(200).json(pedido);\n\t        }\n\t        const result = await getPedidoPorNumeroUseCase.getPedidoPorNumero;\n\t        return res.status(200).json(result);\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/filtrosPedidos/GetPedidosPorFiltroUseCase.ts", "chunked_list": ["import { pedido, pedido_status, nota_fiscal, pagamento, produto, cliente } from \"@prisma/client\";\n\timport { prisma } from \"../../../prisma/client\";\n\texport class GetPedidosPorFiltroUseCase {\n\t    async execute(filtro: any): Promise<any[]> {\n\t        const pedidos = await prisma.pedido.findMany({\n\t            where: {\n\t                pedido_status: {\n\t                    status_pedido: filtro\n\t                }\n\t            },\n", "            include: {\n\t                cliente: {\n\t                    select: {\n\t                        nome_completo: true,\n\t                        cpf: true\n\t                    }\n\t                },\n\t                pedido_status: {\n\t                    select: {\n\t                        status_pedido: true,\n", "                        status_erro: true\n\t                    }\n\t                },\n\t                produto: {\n\t                    select: {\n\t                        valor: true,\n\t                        quantidade: true\n\t                    }\n\t                },\n\t            }\n", "        });\n\t        const moment = require('moment');\n\t        const pedidosFormatados = pedidos.map((pedido) => {\n\t            const valorTotal = pedido.produto.reduce((total, produto) => {\n\t                return total + (produto.valor * produto.quantidade);\n\t            }, 0);\n\t            return {\n\t                cpf: pedido.cliente.cpf,\n\t                nome: pedido.cliente.nome_completo,\n\t                numeroDoPedido: pedido.numero,\n", "                status_erro: pedido.pedido_status.status_erro,\n\t                valorTotal: valorTotal,\n\t                dataDaCompra: moment(pedido.data_pedido_realizado).format('DD/MM/YYYY'),\n\t                status_pedido: pedido.pedido_status.status_pedido,\n\t            };\n\t        });\n\t        return pedidosFormatados;\n\t    }\n\t}\n"]}
{"filename": "src/modules/pedidos/filtrosPedidos/GetPedidosPorFiltroController.ts", "chunked_list": ["import { GetPedidosPorFiltroUseCase } from \"./GetPedidosPorFiltroUseCase\";\n\timport { Request, Response } from \"express\";\n\texport class GetPedidosPorFiltroController {\n\t    async handle(req: Request, res: Response) {\n\t        const { filtro } = req.params;\n\t        const getPedidosPorFiltroUseCase = new GetPedidosPorFiltroUseCase();\n\t        if (filtro) {\n\t            const pedido = await getPedidosPorFiltroUseCase.execute(filtro.toUpperCase());\n\t            if (!pedido) {\n\t                return res.status(404).json({ message: \"Filtro não encontrado.\" });\n", "            }\n\t            return res.status(200).json(pedido);\n\t        }\n\t        const result = await getPedidosPorFiltroUseCase.execute(filtro);\n\t        return res.status(200).json(result);\n\t    }\n\t}\n"]}
{"filename": "src/modules/validarLogin/GetLoginController.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\timport { GetLoginUseCase } from \"./GetLoginUseCase\";\n\texport class GetLoginController {\n\t    async handle(req: Request, res: Response) {\n\t        const { email, senha } = req.body;\n\t        const getLoginUseCase = new GetLoginUseCase();\n\t        try {\n\t            const isValidCredentials = await getLoginUseCase.execute(email, senha);\n\t            if (isValidCredentials) {\n\t                return res.status(200).json({ validate: true });\n", "            } else {\n\t                return res.status(401).json({ validate: false });\n\t            }\n\t        } catch (error) {\n\t            return res.status(500).json({ message: \"Erro interno do servidor\" });\n\t        }\n\t    }\n\t}\n"]}
{"filename": "src/modules/validarLogin/GetLoginUseCase.ts", "chunked_list": ["import { prisma } from \"../../prisma/client\";\n\timport { login } from \"@prisma/client\";\n\texport class GetLoginUseCase {\n\t    async execute(email: string, senha: string): Promise<any> {\n\t        const user = await prisma.login.findFirst({\n\t            where: {\n\t                email,\n\t            },\n\t        });\n\t        if (!user) {\n", "            return false\n\t        };\n\t        if (senha !== user.senha || email !== user.email) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\t}\n"]}
{"filename": "src/routes/pedidos.routes.ts", "chunked_list": ["import { GetPedidosPorFiltroController } from './../modules/pedidos/filtrosPedidos/GetPedidosPorFiltroController';\n\timport { GetAllPedidosController } from \"../modules/pedidos/BuscarTodosPedidos/GetAllPedidosController\";\n\timport { Router } from \"express\";\n\tconst pedidosRoutes = Router();\n\tpedidosRoutes.get(\"/all\", new GetAllPedidosController().handle);\n\tpedidosRoutes.get(\"/all/:filtro\", new GetPedidosPorFiltroController().handle)\n\texport { pedidosRoutes };"]}
{"filename": "src/routes/pedido.routes.ts", "chunked_list": ["import { GetPedidoPorNumeroController } from '../modules/pedidos/buscarPedidoPorNumero/GetPedidoPorNumeroController';\n\timport { Router } from \"express\";\n\tconst pedidoRoutes = Router();\n\tpedidoRoutes.get(\"/:numbers\", new GetPedidoPorNumeroController().handle);\n\texport { pedidoRoutes };"]}
{"filename": "src/routes/comentarios.routes.ts", "chunked_list": ["import { DeletarComentarioController } from \"../modules/pedidos/comentarios/DeletarComentarioController\";\n\timport { GetComentariosController } from \"../modules/pedidos/comentarios/GetComentariosController\";\n\timport { ResponderComentarioController } from \"../modules/pedidos/comentarios/ResponderComentarioController\";\n\timport { CriarComentarioController } from \"./../modules/pedidos/comentarios/CriarComentarioController\";\n\timport { Router } from \"express\";\n\tconst comentariosRoutes = Router();\n\tcomentariosRoutes.post(\"\", new CriarComentarioController().handle);\n\tcomentariosRoutes.delete(\"/:id\", new DeletarComentarioController().handle);\n\tcomentariosRoutes.get(\"/:id\", new GetComentariosController().handle);\n\tcomentariosRoutes.post(\"/:id_comentario\", new ResponderComentarioController().handle);\n", "export { comentariosRoutes };\n"]}
{"filename": "src/routes/login.routes.ts", "chunked_list": ["import { GetLoginController } from './../modules/validarLogin/GetLoginController';\n\timport { Router } from \"express\";\n\tconst loginRoutes = Router();\n\tloginRoutes.post(\"\", new GetLoginController().handle);\n\texport { loginRoutes };"]}
{"filename": "src/routes/index.ts", "chunked_list": ["import { Router } from 'express';\n\timport { pedidosRoutes } from './pedidos.routes';\n\timport { pedidoRoutes } from './pedido.routes';\n\timport { clienteRoutes } from './cliente.routes';\n\timport { pedidosPorData } from './pedidosData.routes';\n\timport { comentariosRoutes } from './comentarios.routes';\n\timport { loginRoutes } from './login.routes';\n\tconst routes = Router();\n\troutes.use(\"/pedidos\", pedidosRoutes);\n\troutes.use(\"/cliente\", clienteRoutes);\n", "routes.use(\"/pedido\", pedidoRoutes);\n\troutes.use(\"/pedidos/data/\", pedidosPorData);\n\troutes.use(\"/comentarios\", comentariosRoutes);\n\troutes.use(\"/login\", loginRoutes)\n\texport { routes };"]}
{"filename": "src/routes/cliente.routes.ts", "chunked_list": ["import { GetPedidoPorCpfController } from '../modules/pedidos/buscarPedidosPorCPF/GetPedidoPorCpfController';\n\timport { Router } from \"express\";\n\tconst clienteRoutes = Router();\n\tclienteRoutes.get(\"/:cpf\", new GetPedidoPorCpfController().handle);\n\texport { clienteRoutes };"]}
{"filename": "src/routes/pedidosData.routes.ts", "chunked_list": ["import { GetPedidosDataController } from \"../modules/pedidos/buscarPedidosPorData/GetPedidosPorDataController\";\n\timport { Router } from \"express\";\n\tconst pedidosPorData = Router();\n\tpedidosPorData.get(\"/:datarealizado\", new GetPedidosDataController().handle);\n\texport { pedidosPorData };"]}
{"filename": "src/errors/AppError.ts", "chunked_list": ["export class AppError {\n\t    public readonly message: string;\n\t    public readonly statusCode: number;\n\t    constructor(message: string, statusCode = 400) {\n\t        this.message = message;\n\t        this.statusCode = statusCode;\n\t    }\n\t}"]}
