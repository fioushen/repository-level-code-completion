{"filename": "src/consts.ts", "chunked_list": ["import { fileURLToPath } from \"node:url\";\n\texport const deobfuscated = fileURLToPath(\n\t  new URL(\"../deobfuscated.js\", import.meta.url)\n\t);\n\texport const unpackedDir = fileURLToPath(\n\t  new URL(\"../unpacked/\", import.meta.url)\n\t);\n\texport const processedDir = fileURLToPath(\n\t  new URL(\"../processed/\", import.meta.url)\n\t);\n", "export const renamedDir = fileURLToPath(\n\t  new URL(\"../renamed/\", import.meta.url)\n\t);\n"]}
{"filename": "src/libDecompile.ts", "chunked_list": ["import { isIdentifierName } from \"@babel/helper-validator-identifier\";\n\timport escodegen from \"@javascript-obfuscator/escodegen\";\n\timport {\n\t  namedTypes as n,\n\t  builders as b,\n\t  visit,\n\t  astNodesAreEquivalent,\n\t} from \"ast-types\";\n\t// Expressions when the binary expression is doing the opposite\n\tconst oppositeExpressions = {\n", "  \"==\": \"!=\",\n\t  \"!=\": \"==\",\n\t  \"===\": \"!==\",\n\t  \"!==\": \"===\",\n\t  \"<\": \">=\",\n\t  \">\": \"<=\",\n\t  \"<=\": \">\",\n\t  \">=\": \"<\",\n\t};\n\t// Expressions when the binary expression is reversed\n", "const flippedExpressions = {\n\t  \"==\": \"!=\",\n\t  \"!=\": \"==\",\n\t  \"===\": \"!==\",\n\t  \"!==\": \"===\",\n\t  \"<\": \">\",\n\t  \">\": \"<\",\n\t  \"<=\": \">=\",\n\t  \">=\": \"<=\",\n\t};\n", "export default function decompile(program: n.Program) {\n\t  // return unminify.unminifySource(code, { safety: unminify.safetyLevels.SAFE });\n\t  /*\n\t    RULE:\n\t    replace(...body) will require doing\n\t    this.visit(path.parentPath);\n\t    this.traverse(path.parentPath);\n\t    to catch everything\n\t    otherwise replace(e)\n\t    this.visit(path);\n", "    this.traverse(path);\n\t  */\n\t  visit(program, {\n\t    // String.fromCharCode(1, 2, 3, 4).toLowerCase()\n\t    visitCallExpression(path) {\n\t      if (\n\t        n.MemberExpression.check(path.node.callee) &&\n\t        n.CallExpression.check(path.node.callee.object) &&\n\t        astNodesAreEquivalent(\n\t          path.node.callee.object.callee,\n", "          b.memberExpression(\n\t            b.identifier(\"String\"),\n\t            b.identifier(\"fromCharCode\")\n\t          )\n\t        ) &&\n\t        path.node.callee.object.arguments.every(\n\t          (arg) => n.Literal.check(arg) && typeof arg.value === \"number\"\n\t        ) &&\n\t        astNodesAreEquivalent(\n\t          b.identifier(\"toLowerCase\"),\n", "          path.node.callee.property\n\t        )\n\t      ) {\n\t        path.replace(\n\t          b.literal(\n\t            String.fromCharCode(\n\t              ...path.node.callee.object.arguments.map(\n\t                (arg) => (arg as n.Literal).value as number\n\t              )\n\t            ).toLowerCase()\n", "          )\n\t        );\n\t        return false;\n\t      } else this.traverse(path);\n\t    },\n\t    visitVariableDeclaration(path) {\n\t      if (\n\t        path.node.declarations.length !== 1 &&\n\t        !n.ForStatement.check(path.parent?.value)\n\t      ) {\n", "        path.replace(\n\t          ...path.node.declarations.map((declaration) =>\n\t            b.variableDeclaration(path.node.kind, [declaration])\n\t          )\n\t        );\n\t        this.visit(path.parentPath);\n\t        this.traverse(path.parentPath);\n\t        return;\n\t      }\n\t      this.traverse(path);\n", "    },\n\t    visitReturnStatement(path) {\n\t      if (n.SequenceExpression.check(path.node.argument)) {\n\t        const [realReturn] = path.node.argument.expressions.slice(-1);\n\t        const exps = path.node.argument.expressions.slice(0, -1);\n\t        const body = [\n\t          ...exps.map((e) => b.expressionStatement(e)),\n\t          b.returnStatement(realReturn),\n\t        ];\n\t        if (path.parent.node?.type === \"IfStatement\")\n", "          path.replace(b.blockStatement(body));\n\t        else if (\n\t          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n\t            path.parent.node?.type\n\t          )\n\t        ) {\n\t          path.replace(...body);\n\t          this.visit(path.parentPath);\n\t          this.traverse(path.parentPath);\n\t          return;\n", "        } else throw new Error(`Unsupported parent ${path.parent.node?.type}`);\n\t      }\n\t      this.traverse(path);\n\t    },\n\t    visitEmptyStatement(path) {\n\t      if (\n\t        (!n.ForStatement.check(path.parent?.value) || path.name !== \"body\") &&\n\t        !n.IfStatement.check(path.parent?.value) &&\n\t        !n.SwitchStatement.check(path.parent?.value) &&\n\t        !n.WhileStatement.check(path.parent?.value)\n", "      ) {\n\t        path.replace();\n\t      }\n\t      return false;\n\t    },\n\t    visitExpressionStatement(path) {\n\t      // condition (?) expression as an expression is usually a substitude for if(){}else{}\n\t      if (n.ConditionalExpression.check(path.node.expression)) {\n\t        path.replace(\n\t          b.ifStatement(\n", "            path.node.expression.test,\n\t            b.expressionStatement(path.node.expression.consequent),\n\t            b.expressionStatement(path.node.expression.alternate)\n\t          )\n\t        );\n\t        this.visit(path);\n\t        this.traverse(path);\n\t        return false;\n\t      }\n\t      if (n.SequenceExpression.check(path.node.expression)) {\n", "        const body = path.node.expression.expressions.map((e) =>\n\t          b.expressionStatement(e)\n\t        );\n\t        // global or in block\n\t        if (\n\t          !path.parent?.node.type ||\n\t          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n\t            path.parent.node.type\n\t          )\n\t        ) {\n", "          path.replace(...body);\n\t          this.visit(path.parentPath);\n\t          this.traverse(path.parentPath);\n\t          return;\n\t        } else path.replace(b.blockStatement(body));\n\t        return this.traverse(path);\n\t      }\n\t      if (n.LogicalExpression.check(path.node.expression)) {\n\t        if (path.node.expression.operator === \"&&\") {\n\t          // it's safe to assume the right operator is probably a sequence/one thing\n", "          path.replace(\n\t            b.ifStatement(\n\t              path.node.expression.left,\n\t              b.expressionStatement(path.node.expression.right)\n\t            )\n\t          );\n\t          this.visit(path);\n\t          this.traverse(path);\n\t          return false;\n\t        }\n", "        if (\n\t          path.node.expression.operator === \"||\" &&\n\t          n.BinaryExpression.check(path.node.expression.left) &&\n\t          path.node.expression.left.operator in oppositeExpressions\n\t        ) {\n\t          // so far: || has been used exclusively with binary expressions to check the opposite, if it's null then do nothing\n\t          // other||wise, execute expression.right\n\t          path.replace(\n\t            b.ifStatement(\n\t              b.binaryExpression(\n", "                oppositeExpressions[\n\t                  path.node.expression.left\n\t                    .operator as keyof typeof oppositeExpressions\n\t                ] as Parameters<typeof b.binaryExpression>[0],\n\t                path.node.expression.left.left,\n\t                path.node.expression.left.right\n\t              ),\n\t              b.expressionStatement(path.node.expression.right)\n\t            )\n\t          );\n", "          this.visit(path);\n\t          this.traverse(path);\n\t          return false;\n\t        }\n\t      }\n\t      if (\n\t        n.LogicalExpression.check(path.node.expression) &&\n\t        path.node.expression.operator === \"||\"\n\t      ) {\n\t        // it's safe to assume the right operator is probably a sequence/one thing\n", "        path.replace(\n\t          b.ifStatement(\n\t            b.unaryExpression(\"!\", path.node.expression.left),\n\t            b.expressionStatement(path.node.expression.right)\n\t          )\n\t        );\n\t        this.visit(path);\n\t        this.traverse(path);\n\t        return false;\n\t      }\n", "      this.traverse(path);\n\t    },\n\t    visitUnaryExpression(path) {\n\t      if (path.node.operator === \"!\")\n\t        if (\n\t          n.Literal.check(path.node.argument) &&\n\t          typeof path.node.argument.value === \"number\"\n\t        )\n\t          return path.replace(b.literal(!path.node.argument.value)), false;\n\t        else if (n.ArrayExpression.check(path.node.argument))\n", "          return path.replace(b.literal(false)), false;\n\t        else if (\n\t          n.UnaryExpression.check(path.node.argument) &&\n\t          n.ArrayExpression.check(path.node.argument.argument)\n\t        )\n\t          return path.replace(b.literal(true)), false;\n\t      this.traverse(path);\n\t    },\n\t    visitBinaryExpression(path) {\n\t      // traverse and simplify the operators before doing anything\n", "      // this.traverse(path);\n\t      // right side should always be simple\n\t      // simple: typeof a === \"string\"\n\t      // not simple: 12 === a\n\t      // not simple: -1 !== test\n\t      const isSimple = (node: n.Node) =>\n\t        n.Literal.check(node) ||\n\t        (n.UnaryExpression.check(node) && n.Literal.check(node.argument));\n\t      if (\n\t        path.node.operator in flippedExpressions &&\n", "        isSimple(path.node.left) &&\n\t        !isSimple(path.node.right)\n\t      ) {\n\t        // flip\n\t        path.replace(\n\t          b.binaryExpression(\n\t            flippedExpressions[\n\t              path.node.operator as keyof typeof flippedExpressions\n\t            ] as Parameters<typeof b.binaryExpression>[0],\n\t            path.node.right,\n", "            path.node.left\n\t          )\n\t        );\n\t      }\n\t      this.traverse(path);\n\t    },\n\t    visitForStatement(path) {\n\t      // console.log(\"got a for statement\", escodegen.generate(path.node));\n\t      if (\n\t        n.VariableDeclaration.check(path.node.init) &&\n", "        path.node.init.declarations.length !== 1 &&\n\t        path.node.init.kind === \"var\" && // this is a var-only optimization\n\t        path.parent?.node.type !== \"LabeledStatement\" // too much work/imopssible\n\t      ) {\n\t        // move all the ones before the final declaration outside of the statement\n\t        const [realDeclaration] = path.node.init.declarations.slice(-1);\n\t        const declarations = path.node.init.declarations.slice(0, -1);\n\t        const { kind } = path.node.init;\n\t        const body = [\n\t          ...declarations.map((declaration) =>\n", "            b.variableDeclaration(kind, [declaration])\n\t          ),\n\t          b.forStatement(\n\t            b.variableDeclaration(kind, [realDeclaration]),\n\t            path.node.test,\n\t            path.node.update,\n\t            path.node.body\n\t          ),\n\t        ];\n\t        if (\n", "          !path.parent?.node.type ||\n\t          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n\t            path.parent.node.type\n\t          )\n\t        ) {\n\t          // global or in block\n\t          path.replace(...body);\n\t          this.visit(path.parentPath);\n\t          this.traverse(path.parentPath);\n\t          return;\n", "        } else path.replace(b.blockStatement(body));\n\t      }\n\t      this.traverse(path);\n\t    },\n\t    visitIfStatement(path) {\n\t      // if((optimized, false))...\n\t      if (n.SequenceExpression.check(path.node.test)) {\n\t        const [realTest] = path.node.test.expressions.slice(-1);\n\t        const body = [\n\t          ...path.node.test.expressions\n", "            .slice(0, -1)\n\t            .map((e) => b.expressionStatement(e)),\n\t          b.ifStatement(realTest, path.node.consequent, path.node.alternate),\n\t        ];\n\t        if (\n\t          !path.parent?.node.type ||\n\t          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n\t            path.parent.node.type\n\t          )\n\t        ) {\n", "          // global or in block\n\t          path.replace(...body);\n\t          this.visit(path.parentPath);\n\t          this.traverse(path.parentPath);\n\t          return;\n\t        } else path.replace(b.blockStatement(body));\n\t      }\n\t      if (n.VariableDeclaration.check(path.node.consequent))\n\t        path.replace(\n\t          b.ifStatement(\n", "            path.node.test,\n\t            n.VariableDeclaration.check(path.node.consequent)\n\t              ? b.blockStatement([path.node.consequent])\n\t              : path.node.consequent,\n\t            path.node.alternate\n\t          )\n\t        );\n\t      if (n.VariableDeclaration.check(path.node.alternate))\n\t        path.replace(\n\t          b.ifStatement(\n", "            path.node.test,\n\t            path.node.consequent,\n\t            n.VariableDeclaration.check(path.node.alternate)\n\t              ? b.blockStatement([path.node.alternate])\n\t              : path.node.alternate\n\t          )\n\t        );\n\t      this.traverse(path);\n\t    },\n\t    visitMemberExpression(path) {\n", "      if (\n\t        path.node.computed &&\n\t        n.Literal.check(path.node.property) &&\n\t        typeof path.node.property.value === \"string\" &&\n\t        isIdentifierName(path.node.property.value)\n\t      )\n\t        path.replace(\n\t          b.memberExpression(\n\t            path.node.object,\n\t            b.identifier(path.node.property.value),\n", "            false\n\t          )\n\t        );\n\t      this.traverse(path);\n\t    },\n\t    visitProperty(path) {\n\t      if (\n\t        n.Literal.check(path.node.key) &&\n\t        typeof path.node.key.value === \"string\" &&\n\t        isIdentifierName(path.node.key.value)\n", "      )\n\t        path.replace(\n\t          b.property(\n\t            path.node.kind,\n\t            b.identifier(path.node.key.value),\n\t            path.node.value\n\t          )\n\t        );\n\t      this.traverse(path);\n\t    },\n", "    visitMethodDefinition(path) {\n\t      if (\n\t        n.Literal.check(path.node.key) &&\n\t        typeof path.node.key.value === \"string\" &&\n\t        isIdentifierName(path.node.key.value)\n\t      )\n\t        path.replace(\n\t          b.methodDefinition(\n\t            path.node.kind,\n\t            b.identifier(path.node.key.value),\n", "            path.node.value,\n\t            path.node.static\n\t          )\n\t        );\n\t      this.traverse(path);\n\t    },\n\t  });\n\t  return escodegen.generate(program);\n\t}\n"]}
{"filename": "src/libRenameVars.ts", "chunked_list": ["import { generateRandomWords } from \"./generateRandomWords.js\";\n\timport escodegen from \"@javascript-obfuscator/escodegen\";\n\timport { namedTypes as n, builders as b, visit } from \"ast-types\";\n\timport { astNodesAreEquivalent } from \"ast-types\";\n\timport { camelCase } from \"camel-case\";\n\timport type { Scope as ESLintScope } from \"eslint\";\n\timport type { Scope, Variable } from \"eslint-scope\";\n\timport { analyze } from \"eslint-scope\";\n\timport MersenneTwister from \"mersenne-twister\";\n\timport { pascalCase } from \"pascal-case\";\n", "const iiiiiii = /(?:i|[^\\sa-z0-9]){4,}$|_0x[a-zA-Z0-9]{6}/i;\n\tfunction getVarPrefix(type: ESLintScope.DefinitionType[\"type\"]) {\n\t  switch (type) {\n\t    case \"FunctionName\":\n\t      return \"func\";\n\t    case \"Parameter\":\n\t      return \"arg\";\n\t    case \"ClassName\":\n\t      return \"Class\";\n\t    case \"ImportBinding\":\n", "      return \"imported\";\n\t    default:\n\t      return \"var\";\n\t  }\n\t}\n\tconst reservedWords = [\n\t  \"arguments\",\n\t  \"await\",\n\t  \"break\",\n\t  \"case\",\n", "  \"catch\",\n\t  \"class\",\n\t  \"const\",\n\t  \"continue\",\n\t  \"debugger\",\n\t  \"default\",\n\t  \"delete\",\n\t  \"do\",\n\t  \"else\",\n\t  \"enum\",\n", "  \"export\",\n\t  \"extends\",\n\t  \"false\",\n\t  \"finally\",\n\t  \"for\",\n\t  \"function\",\n\t  \"get\",\n\t  \"if\",\n\t  \"import\",\n\t  \"in\",\n", "  \"instanceof\",\n\t  \"new\",\n\t  \"null\",\n\t  \"return\",\n\t  \"set\",\n\t  \"super\",\n\t  \"switch\",\n\t  \"this\",\n\t  \"throw\",\n\t  \"true\",\n", "  \"try\",\n\t  \"typeof\",\n\t  \"var\",\n\t  \"void\",\n\t  \"while\",\n\t  \"with\",\n\t  \"yield\",\n\t];\n\tconst getName = (name: string, testName: (name: string) => boolean) => {\n\t  if (reservedWords.includes(name)) name = `_${name}`;\n", "  for (let i = 0; i < 1e6; i++) {\n\t    const newName = name + (i === 0 ? \"\" : i);\n\t    i++;\n\t    if (!testName(newName)) continue;\n\t    return newName;\n\t  }\n\t  throw new Error(\"FAIL\");\n\t};\n\tinterface StaticScopeData {\n\t  assignmentExpressions: n.AssignmentExpression[];\n", "  defineProperties: {\n\t    /**\n\t     * Object.defineProperty(exports, **\"name\"**, { get: function() { return getIdentifier; } })\n\t     */\n\t    name: string;\n\t    /**\n\t     * Object.defineProperty(exports, \"name\", { get: function() { return **getIdentifier;** } })\n\t     */\n\t    getIdentifier: n.Identifier;\n\t  }[];\n", "}\n\tfunction fetchStaticScopeData(scope: Scope) {\n\t  const data: StaticScopeData = {\n\t    assignmentExpressions: [],\n\t    defineProperties: [],\n\t  };\n\t  visit(scope.block, {\n\t    visitIfStatement(path) {\n\t      if (\n\t        n.UnaryExpression.check(path.node.test) &&\n", "        n.CallExpression.check(path.node.test.argument) &&\n\t        astNodesAreEquivalent(\n\t          path.node.test.argument.callee,\n\t          b.memberExpression(\n\t            b.memberExpression(\n\t              b.memberExpression(\n\t                b.identifier(\"Object\"),\n\t                b.identifier(\"prototype\")\n\t              ),\n\t              b.identifier(\"hasOwnProperty\")\n", "            ),\n\t            b.identifier(\"call\")\n\t          )\n\t        ) &&\n\t        astNodesAreEquivalent(\n\t          path.node.test.argument.arguments[0],\n\t          b.identifier(\"exports\")\n\t        ) &&\n\t        n.Literal.check(path.node.test.argument.arguments[1]) &&\n\t        n.ExpressionStatement.check(path.node.consequent) &&\n", "        n.CallExpression.check(path.node.consequent.expression) &&\n\t        astNodesAreEquivalent(\n\t          path.node.consequent.expression.callee,\n\t          b.memberExpression(\n\t            b.identifier(\"Object\"),\n\t            b.identifier(\"defineProperty\")\n\t          )\n\t        ) &&\n\t        astNodesAreEquivalent(\n\t          path.node.consequent.expression.arguments[0],\n", "          b.identifier(\"exports\")\n\t        ) &&\n\t        n.Literal.check(path.node.consequent.expression.arguments[1]) &&\n\t        n.ObjectExpression.check(\n\t          path.node.consequent.expression.arguments[2]\n\t        ) &&\n\t        n.Property.check(\n\t          path.node.consequent.expression.arguments[2].properties[0]\n\t        ) &&\n\t        n.FunctionExpression.check(\n", "          path.node.consequent.expression.arguments[2].properties[0].value\n\t        ) &&\n\t        n.ReturnStatement.check(\n\t          path.node.consequent.expression.arguments[2].properties[0].value.body\n\t            .body[0]\n\t        ) &&\n\t        n.Identifier.check(\n\t          path.node.consequent.expression.arguments[2].properties[0].value.body\n\t            .body[0].argument\n\t        )\n", "      )\n\t        data.defineProperties.push({\n\t          name:\n\t            path.node.consequent.expression.arguments[1].value?.toString() ||\n\t            \"\",\n\t          getIdentifier:\n\t            path.node.consequent.expression.arguments[2].properties[0].value\n\t              .body.body[0].argument,\n\t        });\n\t      this.traverse(path);\n", "    },\n\t    visitAssignmentExpression(path) {\n\t      data.assignmentExpressions.push(path.node);\n\t      this.traverse(path);\n\t    },\n\t  });\n\t  return data;\n\t}\n\tfunction generateName(\n\t  mt: MersenneTwister,\n", "  scope: Scope,\n\t  v: ESLintScope.Variable,\n\t  sd: StaticScopeData\n\t) {\n\t  const def0 = v.defs[0];\n\t  const vars: Variable[] = [];\n\t  let s: Scope | null = scope;\n\t  while (s) {\n\t    vars.push(...s.variables);\n\t    s = s.upper;\n", "  }\n\t  let isClass = false;\n\t  if (def0.type === \"FunctionName\" && def0.node.body.body.length === 0)\n\t    return getName(\"noOp\", (n) => !vars.some((s) => s.name === n));\n\t  let isFuncVar = false;\n\t  if (def0.type === \"Variable\" && n.FunctionExpression.check(def0.node.init)) {\n\t    isFuncVar = true;\n\t    visit(def0.node.init.body, {\n\t      visitThisExpression() {\n\t        isClass = true;\n", "        this.abort();\n\t      },\n\t    });\n\t  }\n\t  if (def0.type === \"FunctionName\")\n\t    visit(def0.node.body, {\n\t      visitThisExpression() {\n\t        isClass = true;\n\t        this.abort();\n\t      },\n", "    });\n\t  for (const node of sd.defineProperties) {\n\t    if (astNodesAreEquivalent(node.getIdentifier, b.identifier(v.name))) {\n\t      // TODO: check if v.identifiers contains this identifier, otherwise the node may be a completely different variable\n\t      return getName(\n\t        (isClass ? pascalCase : camelCase)(\"e_\" + node.name),\n\t        (n) => !vars.some((s) => s.name === n)\n\t      );\n\t    }\n\t  }\n", "  for (const node of sd.assignmentExpressions) {\n\t    if (\n\t      n.MemberExpression.check(node.left) &&\n\t      n.Identifier.check(node.left.property) &&\n\t      !node.left.computed &&\n\t      astNodesAreEquivalent(node.right, b.identifier(v.name))\n\t      /*&&\n\t      v.references.some(\n\t        (i) =>\n\t          ((node.left as n.MemberExpression).property as n.Identifier) ===\n", "          i.identifier\n\t      )\n\t      */\n\t    ) {\n\t      // TODO: check if v.identifiers contains this identifier, otherwise the node may be a completely different variable\n\t      return getName(\n\t        (isClass ? pascalCase : camelCase)(\"m_\" + node.left.property.name),\n\t        (n) => !vars.some((s) => s.name === n)\n\t      );\n\t    } else if (\n", "      astNodesAreEquivalent(node.left, b.identifier(v.name)) &&\n\t      n.ThisExpression.check(node.right)\n\t    )\n\t      return getName(\"this\", (n) => !vars.some((s) => s.name === n));\n\t  }\n\t  const varPrefix = isClass\n\t    ? \"Class\"\n\t    : isFuncVar\n\t    ? \"func\"\n\t    : getVarPrefix(def0.type);\n", "  if (\n\t    def0.type === \"Variable\" &&\n\t    n.CallExpression.check(def0.node.init) &&\n\t    astNodesAreEquivalent(def0.node.init.callee, b.identifier(\"require\")) &&\n\t    n.Literal.check(def0.node.init.arguments[0]) &&\n\t    typeof def0.node.init.arguments[0].value === \"string\"\n\t  )\n\t    return getName(\n\t      camelCase(\"require\" + def0.node.init.arguments[0].value),\n\t      (n) => !vars.some((s) => s.name === n)\n", "    );\n\t  else if (\n\t    def0.type === \"Variable\" &&\n\t    n.MemberExpression.check(def0.node.init) &&\n\t    n.Identifier.check(def0.node.init.property)\n\t  )\n\t    return getName(\n\t      \"p_\" + def0.node.init.property.name,\n\t      (n) => !vars.some((s) => s.name === n)\n\t    );\n", "  else if (def0.type === \"Variable\" && n.Identifier.check(def0.node.init))\n\t    return getName(\n\t      \"v_\" + def0.node.init.name,\n\t      (n) => !vars.some((s) => s.name === n)\n\t    );\n\t  else if (def0.type === \"Variable\" && n.NewExpression.check(def0.node.init))\n\t    return getName(\n\t      camelCase(escodegen.generate(def0.node.init.callee)),\n\t      (n) => !vars.some((s) => s.name === n)\n\t    );\n", "  else if (def0.type === \"Variable\" && n.ThisExpression.check(def0.node.init))\n\t    for (let i = 0; ; i++) {\n\t      const newName = \"_this\" + (i === 0 ? \"\" : i);\n\t      i++;\n\t      if (vars.some((s) => s.name === newName)) continue;\n\t      return newName;\n\t    }\n\t  while (true) {\n\t    const newName = varPrefix + generateRandomWords(mt, 2).join(\"\");\n\t    if (vars.some((s) => s.name === newName)) continue;\n", "    return newName;\n\t  }\n\t}\n\texport default function renameVars(program: n.Program, hash: number) {\n\t  const mt = new MersenneTwister(hash);\n\t  const scopeManger = analyze(program, {\n\t    ecmaVersion: 6,\n\t    sourceType: \"module\",\n\t  });\n\t  // first def, new name\n", "  const renamedNodes = new WeakMap<object, string>();\n\t  const renamedNames = new Map<string, string>();\n\t  for (const scope of scopeManger.scopes) {\n\t    // takes an awful long time before JIT\n\t    // but < 10 ms after\n\t    const sd = fetchStaticScopeData(scope);\n\t    for (const v of scope.variables) {\n\t      if (!iiiiiii.test(v.name)) continue;\n\t      const firstDef = v.defs[0];\n\t      const newName =\n", "        renamedNodes.get(firstDef.node) || generateName(mt, scope, v, sd);\n\t      renamedNames.set(v.name, newName);\n\t      if (firstDef.type === \"ClassName\")\n\t        renamedNodes.set(firstDef.node, newName);\n\t      // used by generateName\n\t      v.name = newName;\n\t      for (const def of v.defs) def.name.name = newName;\n\t      for (const ref of v.references) ref.identifier.name = newName;\n\t    }\n\t    // took the hack from the deobfuscator\n", "    for (const ref of scope.references) {\n\t      const got = renamedNames.get(ref.identifier.name);\n\t      if (got) ref.identifier.name = got;\n\t    }\n\t  }\n\t  const labels: string[] = [];\n\t  // fix labels\n\t  // eslint-scope doesn't have labels\n\t  visit(program, {\n\t    visitLabeledStatement(path) {\n", "      while (true) {\n\t        const newName = generateRandomWords(mt, 2).join(\"\");\n\t        if (labels.includes(newName)) continue;\n\t        labels.push(newName);\n\t        visit(path.node, {\n\t          visitContinueStatement(subPath) {\n\t            if (subPath.node.label?.name === path.node.label.name)\n\t              subPath.replace(b.continueStatement(b.identifier(newName)));\n\t            return false;\n\t          },\n", "          visitBreakStatement(subPath) {\n\t            if (subPath.node.label?.name === path.node.label.name)\n\t              subPath.replace(b.breakStatement(b.identifier(newName)));\n\t            return false;\n\t          },\n\t        });\n\t        path.replace(b.labeledStatement(b.identifier(newName), path.node.body));\n\t        this.traverse(path);\n\t        return;\n\t      }\n", "    },\n\t  });\n\t}\n"]}
{"filename": "src/generateRandomWords.ts", "chunked_list": ["import type MersenneTwister from \"mersenne-twister\";\n\tconst wordList = [\n\t  \"ability\",\n\t  \"able\",\n\t  \"aboard\",\n\t  \"about\",\n\t  \"above\",\n\t  \"accept\",\n\t  \"accident\",\n\t  \"according\",\n", "  \"account\",\n\t  \"accurate\",\n\t  \"acres\",\n\t  \"across\",\n\t  \"act\",\n\t  \"action\",\n\t  \"active\",\n\t  \"activity\",\n\t  \"actual\",\n\t  \"actually\",\n", "  \"add\",\n\t  \"addition\",\n\t  \"additional\",\n\t  \"adjective\",\n\t  \"adult\",\n\t  \"adventure\",\n\t  \"advice\",\n\t  \"affect\",\n\t  \"afraid\",\n\t  \"after\",\n", "  \"afternoon\",\n\t  \"again\",\n\t  \"against\",\n\t  \"age\",\n\t  \"ago\",\n\t  \"agree\",\n\t  \"ahead\",\n\t  \"aid\",\n\t  \"air\",\n\t  \"airplane\",\n", "  \"alike\",\n\t  \"alive\",\n\t  \"all\",\n\t  \"allow\",\n\t  \"almost\",\n\t  \"alone\",\n\t  \"along\",\n\t  \"aloud\",\n\t  \"alphabet\",\n\t  \"already\",\n", "  \"also\",\n\t  \"although\",\n\t  \"am\",\n\t  \"among\",\n\t  \"amount\",\n\t  \"ancient\",\n\t  \"angle\",\n\t  \"angry\",\n\t  \"animal\",\n\t  \"announced\",\n", "  \"another\",\n\t  \"answer\",\n\t  \"ants\",\n\t  \"any\",\n\t  \"anybody\",\n\t  \"anyone\",\n\t  \"anything\",\n\t  \"anyway\",\n\t  \"anywhere\",\n\t  \"apart\",\n", "  \"apartment\",\n\t  \"appearance\",\n\t  \"apple\",\n\t  \"applied\",\n\t  \"appropriate\",\n\t  \"are\",\n\t  \"area\",\n\t  \"arm\",\n\t  \"army\",\n\t  \"around\",\n", "  \"arrange\",\n\t  \"arrangement\",\n\t  \"arrive\",\n\t  \"arrow\",\n\t  \"art\",\n\t  \"article\",\n\t  \"as\",\n\t  \"aside\",\n\t  \"ask\",\n\t  \"asleep\",\n", "  \"at\",\n\t  \"ate\",\n\t  \"atmosphere\",\n\t  \"atom\",\n\t  \"atomic\",\n\t  \"attached\",\n\t  \"attack\",\n\t  \"attempt\",\n\t  \"attention\",\n\t  \"audience\",\n", "  \"author\",\n\t  \"automobile\",\n\t  \"available\",\n\t  \"average\",\n\t  \"avoid\",\n\t  \"aware\",\n\t  \"away\",\n\t  \"baby\",\n\t  \"back\",\n\t  \"bad\",\n", "  \"badly\",\n\t  \"bag\",\n\t  \"balance\",\n\t  \"ball\",\n\t  \"balloon\",\n\t  \"band\",\n\t  \"bank\",\n\t  \"bar\",\n\t  \"bare\",\n\t  \"bark\",\n", "  \"barn\",\n\t  \"base\",\n\t  \"baseball\",\n\t  \"basic\",\n\t  \"basis\",\n\t  \"basket\",\n\t  \"bat\",\n\t  \"battle\",\n\t  \"be\",\n\t  \"bean\",\n", "  \"bear\",\n\t  \"beat\",\n\t  \"beautiful\",\n\t  \"beauty\",\n\t  \"became\",\n\t  \"because\",\n\t  \"become\",\n\t  \"becoming\",\n\t  \"bee\",\n\t  \"been\",\n", "  \"before\",\n\t  \"began\",\n\t  \"beginning\",\n\t  \"begun\",\n\t  \"behavior\",\n\t  \"behind\",\n\t  \"being\",\n\t  \"believed\",\n\t  \"bell\",\n\t  \"belong\",\n", "  \"below\",\n\t  \"belt\",\n\t  \"bend\",\n\t  \"beneath\",\n\t  \"bent\",\n\t  \"beside\",\n\t  \"best\",\n\t  \"bet\",\n\t  \"better\",\n\t  \"between\",\n", "  \"beyond\",\n\t  \"bicycle\",\n\t  \"bigger\",\n\t  \"biggest\",\n\t  \"bill\",\n\t  \"birds\",\n\t  \"birth\",\n\t  \"birthday\",\n\t  \"bit\",\n\t  \"bite\",\n", "  \"black\",\n\t  \"blank\",\n\t  \"blanket\",\n\t  \"blew\",\n\t  \"blind\",\n\t  \"block\",\n\t  \"blood\",\n\t  \"blow\",\n\t  \"blue\",\n\t  \"board\",\n", "  \"boat\",\n\t  \"body\",\n\t  \"bone\",\n\t  \"book\",\n\t  \"border\",\n\t  \"born\",\n\t  \"both\",\n\t  \"bottle\",\n\t  \"bottom\",\n\t  \"bound\",\n", "  \"bow\",\n\t  \"bowl\",\n\t  \"box\",\n\t  \"boy\",\n\t  \"brain\",\n\t  \"branch\",\n\t  \"brass\",\n\t  \"brave\",\n\t  \"bread\",\n\t  \"break\",\n", "  \"breakfast\",\n\t  \"breath\",\n\t  \"breathe\",\n\t  \"breathing\",\n\t  \"breeze\",\n\t  \"brick\",\n\t  \"bridge\",\n\t  \"brief\",\n\t  \"bright\",\n\t  \"bring\",\n", "  \"broad\",\n\t  \"broke\",\n\t  \"broken\",\n\t  \"brother\",\n\t  \"brought\",\n\t  \"brown\",\n\t  \"brush\",\n\t  \"buffalo\",\n\t  \"build\",\n\t  \"building\",\n", "  \"built\",\n\t  \"buried\",\n\t  \"burn\",\n\t  \"burst\",\n\t  \"bus\",\n\t  \"bush\",\n\t  \"business\",\n\t  \"busy\",\n\t  \"but\",\n\t  \"butter\",\n", "  \"buy\",\n\t  \"by\",\n\t  \"cabin\",\n\t  \"cage\",\n\t  \"cake\",\n\t  \"call\",\n\t  \"calm\",\n\t  \"came\",\n\t  \"camera\",\n\t  \"camp\",\n", "  \"can\",\n\t  \"canal\",\n\t  \"cannot\",\n\t  \"cap\",\n\t  \"capital\",\n\t  \"captain\",\n\t  \"captured\",\n\t  \"car\",\n\t  \"carbon\",\n\t  \"card\",\n", "  \"care\",\n\t  \"careful\",\n\t  \"carefully\",\n\t  \"carried\",\n\t  \"carry\",\n\t  \"case\",\n\t  \"cast\",\n\t  \"castle\",\n\t  \"cat\",\n\t  \"catch\",\n", "  \"cattle\",\n\t  \"caught\",\n\t  \"cause\",\n\t  \"cave\",\n\t  \"cell\",\n\t  \"cent\",\n\t  \"center\",\n\t  \"central\",\n\t  \"century\",\n\t  \"certain\",\n", "  \"certainly\",\n\t  \"chain\",\n\t  \"chair\",\n\t  \"chamber\",\n\t  \"chance\",\n\t  \"change\",\n\t  \"changing\",\n\t  \"chapter\",\n\t  \"character\",\n\t  \"characteristic\",\n", "  \"charge\",\n\t  \"chart\",\n\t  \"check\",\n\t  \"cheese\",\n\t  \"chemical\",\n\t  \"chest\",\n\t  \"chicken\",\n\t  \"chief\",\n\t  \"child\",\n\t  \"children\",\n", "  \"choice\",\n\t  \"choose\",\n\t  \"chose\",\n\t  \"chosen\",\n\t  \"church\",\n\t  \"circle\",\n\t  \"circus\",\n\t  \"citizen\",\n\t  \"city\",\n\t  \"class\",\n", "  \"classroom\",\n\t  \"claws\",\n\t  \"clay\",\n\t  \"clean\",\n\t  \"clear\",\n\t  \"clearly\",\n\t  \"climate\",\n\t  \"climb\",\n\t  \"clock\",\n\t  \"close\",\n", "  \"closely\",\n\t  \"closer\",\n\t  \"cloth\",\n\t  \"clothes\",\n\t  \"clothing\",\n\t  \"cloud\",\n\t  \"club\",\n\t  \"coach\",\n\t  \"coal\",\n\t  \"coast\",\n", "  \"coat\",\n\t  \"coffee\",\n\t  \"cold\",\n\t  \"collect\",\n\t  \"college\",\n\t  \"colony\",\n\t  \"color\",\n\t  \"column\",\n\t  \"combination\",\n\t  \"combine\",\n", "  \"come\",\n\t  \"comfortable\",\n\t  \"coming\",\n\t  \"command\",\n\t  \"common\",\n\t  \"community\",\n\t  \"company\",\n\t  \"compare\",\n\t  \"compass\",\n\t  \"complete\",\n", "  \"completely\",\n\t  \"complex\",\n\t  \"composed\",\n\t  \"composition\",\n\t  \"compound\",\n\t  \"concerned\",\n\t  \"condition\",\n\t  \"congress\",\n\t  \"connected\",\n\t  \"consider\",\n", "  \"consist\",\n\t  \"consonant\",\n\t  \"constantly\",\n\t  \"construction\",\n\t  \"contain\",\n\t  \"continent\",\n\t  \"continued\",\n\t  \"contrast\",\n\t  \"control\",\n\t  \"conversation\",\n", "  \"cook\",\n\t  \"cookies\",\n\t  \"cool\",\n\t  \"copper\",\n\t  \"copy\",\n\t  \"corn\",\n\t  \"corner\",\n\t  \"correct\",\n\t  \"correctly\",\n\t  \"cost\",\n", "  \"cotton\",\n\t  \"could\",\n\t  \"count\",\n\t  \"country\",\n\t  \"couple\",\n\t  \"courage\",\n\t  \"course\",\n\t  \"court\",\n\t  \"cover\",\n\t  \"cow\",\n", "  \"cowboy\",\n\t  \"crack\",\n\t  \"cream\",\n\t  \"create\",\n\t  \"creature\",\n\t  \"crew\",\n\t  \"crop\",\n\t  \"cross\",\n\t  \"crowd\",\n\t  \"cry\",\n", "  \"cup\",\n\t  \"curious\",\n\t  \"current\",\n\t  \"curve\",\n\t  \"customs\",\n\t  \"cut\",\n\t  \"cutting\",\n\t  \"daily\",\n\t  \"damage\",\n\t  \"dance\",\n", "  \"danger\",\n\t  \"dangerous\",\n\t  \"dark\",\n\t  \"darkness\",\n\t  \"date\",\n\t  \"daughter\",\n\t  \"dawn\",\n\t  \"day\",\n\t  \"dead\",\n\t  \"deal\",\n", "  \"dear\",\n\t  \"death\",\n\t  \"decide\",\n\t  \"declared\",\n\t  \"deep\",\n\t  \"deeply\",\n\t  \"deer\",\n\t  \"definition\",\n\t  \"degree\",\n\t  \"depend\",\n", "  \"depth\",\n\t  \"describe\",\n\t  \"desert\",\n\t  \"design\",\n\t  \"desk\",\n\t  \"detail\",\n\t  \"determine\",\n\t  \"develop\",\n\t  \"development\",\n\t  \"diagram\",\n", "  \"diameter\",\n\t  \"did\",\n\t  \"die\",\n\t  \"differ\",\n\t  \"difference\",\n\t  \"different\",\n\t  \"difficult\",\n\t  \"difficulty\",\n\t  \"dig\",\n\t  \"dinner\",\n", "  \"direct\",\n\t  \"direction\",\n\t  \"directly\",\n\t  \"dirt\",\n\t  \"dirty\",\n\t  \"disappear\",\n\t  \"discover\",\n\t  \"discovery\",\n\t  \"discuss\",\n\t  \"discussion\",\n", "  \"disease\",\n\t  \"dish\",\n\t  \"distance\",\n\t  \"distant\",\n\t  \"divide\",\n\t  \"division\",\n\t  \"do\",\n\t  \"doctor\",\n\t  \"does\",\n\t  \"dog\",\n", "  \"doing\",\n\t  \"doll\",\n\t  \"dollar\",\n\t  \"done\",\n\t  \"donkey\",\n\t  \"door\",\n\t  \"dot\",\n\t  \"double\",\n\t  \"doubt\",\n\t  \"down\",\n", "  \"dozen\",\n\t  \"draw\",\n\t  \"drawn\",\n\t  \"dream\",\n\t  \"dress\",\n\t  \"drew\",\n\t  \"dried\",\n\t  \"drink\",\n\t  \"drive\",\n\t  \"driven\",\n", "  \"driver\",\n\t  \"driving\",\n\t  \"drop\",\n\t  \"dropped\",\n\t  \"drove\",\n\t  \"dry\",\n\t  \"duck\",\n\t  \"due\",\n\t  \"dug\",\n\t  \"dull\",\n", "  \"during\",\n\t  \"dust\",\n\t  \"duty\",\n\t  \"each\",\n\t  \"eager\",\n\t  \"ear\",\n\t  \"earlier\",\n\t  \"early\",\n\t  \"earn\",\n\t  \"earth\",\n", "  \"easier\",\n\t  \"easily\",\n\t  \"east\",\n\t  \"easy\",\n\t  \"eat\",\n\t  \"eaten\",\n\t  \"edge\",\n\t  \"education\",\n\t  \"effect\",\n\t  \"effort\",\n", "  \"egg\",\n\t  \"eight\",\n\t  \"either\",\n\t  \"electric\",\n\t  \"electricity\",\n\t  \"element\",\n\t  \"elephant\",\n\t  \"eleven\",\n\t  \"else\",\n\t  \"empty\",\n", "  \"end\",\n\t  \"enemy\",\n\t  \"energy\",\n\t  \"engine\",\n\t  \"engineer\",\n\t  \"enjoy\",\n\t  \"enough\",\n\t  \"enter\",\n\t  \"entire\",\n\t  \"entirely\",\n", "  \"environment\",\n\t  \"equal\",\n\t  \"equally\",\n\t  \"equator\",\n\t  \"equipment\",\n\t  \"escape\",\n\t  \"especially\",\n\t  \"essential\",\n\t  \"establish\",\n\t  \"even\",\n", "  \"evening\",\n\t  \"event\",\n\t  \"eventually\",\n\t  \"ever\",\n\t  \"every\",\n\t  \"everybody\",\n\t  \"everyone\",\n\t  \"everything\",\n\t  \"everywhere\",\n\t  \"evidence\",\n", "  \"exact\",\n\t  \"exactly\",\n\t  \"examine\",\n\t  \"example\",\n\t  \"excellent\",\n\t  \"except\",\n\t  \"exchange\",\n\t  \"excited\",\n\t  \"excitement\",\n\t  \"exciting\",\n", "  \"exclaimed\",\n\t  \"exercise\",\n\t  \"exist\",\n\t  \"expect\",\n\t  \"experience\",\n\t  \"experiment\",\n\t  \"explain\",\n\t  \"explanation\",\n\t  \"explore\",\n\t  \"express\",\n", "  \"expression\",\n\t  \"extra\",\n\t  \"eye\",\n\t  \"face\",\n\t  \"facing\",\n\t  \"fact\",\n\t  \"factor\",\n\t  \"factory\",\n\t  \"failed\",\n\t  \"fair\",\n", "  \"fairly\",\n\t  \"fall\",\n\t  \"fallen\",\n\t  \"familiar\",\n\t  \"family\",\n\t  \"famous\",\n\t  \"far\",\n\t  \"farm\",\n\t  \"farmer\",\n\t  \"farther\",\n", "  \"fast\",\n\t  \"fastened\",\n\t  \"faster\",\n\t  \"fat\",\n\t  \"father\",\n\t  \"favorite\",\n\t  \"fear\",\n\t  \"feathers\",\n\t  \"feature\",\n\t  \"fed\",\n", "  \"feed\",\n\t  \"feel\",\n\t  \"feet\",\n\t  \"fell\",\n\t  \"fellow\",\n\t  \"felt\",\n\t  \"fence\",\n\t  \"few\",\n\t  \"fewer\",\n\t  \"field\",\n", "  \"fierce\",\n\t  \"fifteen\",\n\t  \"fifth\",\n\t  \"fifty\",\n\t  \"fight\",\n\t  \"fighting\",\n\t  \"figure\",\n\t  \"fill\",\n\t  \"film\",\n\t  \"final\",\n", "  \"finally\",\n\t  \"find\",\n\t  \"fine\",\n\t  \"finest\",\n\t  \"finger\",\n\t  \"finish\",\n\t  \"fire\",\n\t  \"fireplace\",\n\t  \"firm\",\n\t  \"first\",\n", "  \"fish\",\n\t  \"five\",\n\t  \"fix\",\n\t  \"flag\",\n\t  \"flame\",\n\t  \"flat\",\n\t  \"flew\",\n\t  \"flies\",\n\t  \"flight\",\n\t  \"floating\",\n", "  \"floor\",\n\t  \"flow\",\n\t  \"flower\",\n\t  \"fly\",\n\t  \"fog\",\n\t  \"folks\",\n\t  \"follow\",\n\t  \"food\",\n\t  \"foot\",\n\t  \"football\",\n", "  \"for\",\n\t  \"force\",\n\t  \"foreign\",\n\t  \"forest\",\n\t  \"forget\",\n\t  \"forgot\",\n\t  \"forgotten\",\n\t  \"form\",\n\t  \"former\",\n\t  \"fort\",\n", "  \"forth\",\n\t  \"forty\",\n\t  \"forward\",\n\t  \"fought\",\n\t  \"found\",\n\t  \"four\",\n\t  \"fourth\",\n\t  \"fox\",\n\t  \"frame\",\n\t  \"free\",\n", "  \"freedom\",\n\t  \"frequently\",\n\t  \"fresh\",\n\t  \"friend\",\n\t  \"friendly\",\n\t  \"frighten\",\n\t  \"frog\",\n\t  \"from\",\n\t  \"front\",\n\t  \"frozen\",\n", "  \"fruit\",\n\t  \"fuel\",\n\t  \"full\",\n\t  \"fully\",\n\t  \"fun\",\n\t  \"function\",\n\t  \"funny\",\n\t  \"fur\",\n\t  \"furniture\",\n\t  \"further\",\n", "  \"future\",\n\t  \"gain\",\n\t  \"game\",\n\t  \"garage\",\n\t  \"garden\",\n\t  \"gas\",\n\t  \"gasoline\",\n\t  \"gate\",\n\t  \"gather\",\n\t  \"gave\",\n", "  \"general\",\n\t  \"generally\",\n\t  \"gentle\",\n\t  \"gently\",\n\t  \"get\",\n\t  \"getting\",\n\t  \"giant\",\n\t  \"gift\",\n\t  \"girl\",\n\t  \"give\",\n", "  \"given\",\n\t  \"giving\",\n\t  \"glad\",\n\t  \"glass\",\n\t  \"globe\",\n\t  \"go\",\n\t  \"goes\",\n\t  \"gold\",\n\t  \"golden\",\n\t  \"gone\",\n", "  \"good\",\n\t  \"goose\",\n\t  \"got\",\n\t  \"government\",\n\t  \"grabbed\",\n\t  \"grade\",\n\t  \"gradually\",\n\t  \"grain\",\n\t  \"grandfather\",\n\t  \"grandmother\",\n", "  \"graph\",\n\t  \"grass\",\n\t  \"gravity\",\n\t  \"gray\",\n\t  \"great\",\n\t  \"greater\",\n\t  \"greatest\",\n\t  \"greatly\",\n\t  \"green\",\n\t  \"grew\",\n", "  \"ground\",\n\t  \"group\",\n\t  \"grow\",\n\t  \"grown\",\n\t  \"growth\",\n\t  \"guard\",\n\t  \"guess\",\n\t  \"guide\",\n\t  \"gulf\",\n\t  \"gun\",\n", "  \"habit\",\n\t  \"had\",\n\t  \"hair\",\n\t  \"half\",\n\t  \"halfway\",\n\t  \"hall\",\n\t  \"hand\",\n\t  \"handle\",\n\t  \"handsome\",\n\t  \"hang\",\n", "  \"happen\",\n\t  \"happened\",\n\t  \"happily\",\n\t  \"happy\",\n\t  \"harbor\",\n\t  \"hard\",\n\t  \"harder\",\n\t  \"hardly\",\n\t  \"has\",\n\t  \"hat\",\n", "  \"have\",\n\t  \"having\",\n\t  \"hay\",\n\t  \"he\",\n\t  \"headed\",\n\t  \"heading\",\n\t  \"health\",\n\t  \"heard\",\n\t  \"hearing\",\n\t  \"heart\",\n", "  \"heat\",\n\t  \"heavy\",\n\t  \"height\",\n\t  \"held\",\n\t  \"hello\",\n\t  \"help\",\n\t  \"helpful\",\n\t  \"her\",\n\t  \"herd\",\n\t  \"here\",\n", "  \"herself\",\n\t  \"hidden\",\n\t  \"hide\",\n\t  \"high\",\n\t  \"higher\",\n\t  \"highest\",\n\t  \"highway\",\n\t  \"hill\",\n\t  \"him\",\n\t  \"himself\",\n", "  \"his\",\n\t  \"history\",\n\t  \"hit\",\n\t  \"hold\",\n\t  \"hole\",\n\t  \"hollow\",\n\t  \"home\",\n\t  \"honor\",\n\t  \"hope\",\n\t  \"horn\",\n", "  \"horse\",\n\t  \"hospital\",\n\t  \"hot\",\n\t  \"hour\",\n\t  \"house\",\n\t  \"how\",\n\t  \"however\",\n\t  \"huge\",\n\t  \"human\",\n\t  \"hundred\",\n", "  \"hung\",\n\t  \"hungry\",\n\t  \"hunt\",\n\t  \"hunter\",\n\t  \"hurried\",\n\t  \"hurry\",\n\t  \"hurt\",\n\t  \"husband\",\n\t  \"ice\",\n\t  \"idea\",\n", "  \"identity\",\n\t  \"if\",\n\t  \"ill\",\n\t  \"image\",\n\t  \"imagine\",\n\t  \"immediately\",\n\t  \"importance\",\n\t  \"important\",\n\t  \"impossible\",\n\t  \"improve\",\n", "  \"in\",\n\t  \"inch\",\n\t  \"include\",\n\t  \"including\",\n\t  \"income\",\n\t  \"increase\",\n\t  \"indeed\",\n\t  \"independent\",\n\t  \"indicate\",\n\t  \"individual\",\n", "  \"industrial\",\n\t  \"industry\",\n\t  \"influence\",\n\t  \"information\",\n\t  \"inside\",\n\t  \"instance\",\n\t  \"instant\",\n\t  \"instead\",\n\t  \"instrument\",\n\t  \"interest\",\n", "  \"interior\",\n\t  \"into\",\n\t  \"introduced\",\n\t  \"invented\",\n\t  \"involved\",\n\t  \"iron\",\n\t  \"is\",\n\t  \"island\",\n\t  \"it\",\n\t  \"its\",\n", "  \"itself\",\n\t  \"jack\",\n\t  \"jar\",\n\t  \"jet\",\n\t  \"job\",\n\t  \"join\",\n\t  \"joined\",\n\t  \"journey\",\n\t  \"joy\",\n\t  \"judge\",\n", "  \"jump\",\n\t  \"jungle\",\n\t  \"just\",\n\t  \"keep\",\n\t  \"kept\",\n\t  \"key\",\n\t  \"kids\",\n\t  \"kill\",\n\t  \"kind\",\n\t  \"kitchen\",\n", "  \"knew\",\n\t  \"knife\",\n\t  \"know\",\n\t  \"knowledge\",\n\t  \"known\",\n\t  \"label\",\n\t  \"labor\",\n\t  \"lack\",\n\t  \"lady\",\n\t  \"laid\",\n", "  \"lake\",\n\t  \"lamp\",\n\t  \"land\",\n\t  \"language\",\n\t  \"large\",\n\t  \"larger\",\n\t  \"largest\",\n\t  \"last\",\n\t  \"late\",\n\t  \"later\",\n", "  \"laugh\",\n\t  \"law\",\n\t  \"lay\",\n\t  \"layers\",\n\t  \"lead\",\n\t  \"leader\",\n\t  \"leaf\",\n\t  \"learn\",\n\t  \"least\",\n\t  \"leather\",\n", "  \"leave\",\n\t  \"leaving\",\n\t  \"led\",\n\t  \"left\",\n\t  \"leg\",\n\t  \"length\",\n\t  \"lesson\",\n\t  \"let\",\n\t  \"letter\",\n\t  \"level\",\n", "  \"library\",\n\t  \"lie\",\n\t  \"life\",\n\t  \"lift\",\n\t  \"light\",\n\t  \"like\",\n\t  \"likely\",\n\t  \"limited\",\n\t  \"line\",\n\t  \"lion\",\n", "  \"lips\",\n\t  \"liquid\",\n\t  \"list\",\n\t  \"listen\",\n\t  \"little\",\n\t  \"live\",\n\t  \"living\",\n\t  \"load\",\n\t  \"local\",\n\t  \"locate\",\n", "  \"location\",\n\t  \"log\",\n\t  \"lonely\",\n\t  \"long\",\n\t  \"longer\",\n\t  \"look\",\n\t  \"loose\",\n\t  \"lose\",\n\t  \"loss\",\n\t  \"lost\",\n", "  \"lot\",\n\t  \"loud\",\n\t  \"love\",\n\t  \"lovely\",\n\t  \"low\",\n\t  \"lower\",\n\t  \"luck\",\n\t  \"lucky\",\n\t  \"lunch\",\n\t  \"lungs\",\n", "  \"lying\",\n\t  \"machine\",\n\t  \"machinery\",\n\t  \"mad\",\n\t  \"made\",\n\t  \"magic\",\n\t  \"magnet\",\n\t  \"mail\",\n\t  \"main\",\n\t  \"mainly\",\n", "  \"major\",\n\t  \"make\",\n\t  \"making\",\n\t  \"man\",\n\t  \"managed\",\n\t  \"manner\",\n\t  \"manufacturing\",\n\t  \"many\",\n\t  \"map\",\n\t  \"mark\",\n", "  \"market\",\n\t  \"married\",\n\t  \"mass\",\n\t  \"massage\",\n\t  \"master\",\n\t  \"material\",\n\t  \"mathematics\",\n\t  \"matter\",\n\t  \"may\",\n\t  \"maybe\",\n", "  \"me\",\n\t  \"meal\",\n\t  \"mean\",\n\t  \"means\",\n\t  \"meant\",\n\t  \"measure\",\n\t  \"meat\",\n\t  \"medicine\",\n\t  \"meet\",\n\t  \"melted\",\n", "  \"member\",\n\t  \"memory\",\n\t  \"men\",\n\t  \"mental\",\n\t  \"merely\",\n\t  \"met\",\n\t  \"metal\",\n\t  \"method\",\n\t  \"mice\",\n\t  \"middle\",\n", "  \"might\",\n\t  \"mighty\",\n\t  \"mile\",\n\t  \"military\",\n\t  \"milk\",\n\t  \"mill\",\n\t  \"mind\",\n\t  \"mine\",\n\t  \"minerals\",\n\t  \"minute\",\n", "  \"mirror\",\n\t  \"missing\",\n\t  \"mission\",\n\t  \"mistake\",\n\t  \"mix\",\n\t  \"mixture\",\n\t  \"model\",\n\t  \"modern\",\n\t  \"molecular\",\n\t  \"moment\",\n", "  \"money\",\n\t  \"monkey\",\n\t  \"month\",\n\t  \"mood\",\n\t  \"moon\",\n\t  \"more\",\n\t  \"morning\",\n\t  \"most\",\n\t  \"mostly\",\n\t  \"mother\",\n", "  \"motion\",\n\t  \"motor\",\n\t  \"mountain\",\n\t  \"mouse\",\n\t  \"mouth\",\n\t  \"move\",\n\t  \"movement\",\n\t  \"movie\",\n\t  \"moving\",\n\t  \"mud\",\n", "  \"muscle\",\n\t  \"music\",\n\t  \"musical\",\n\t  \"must\",\n\t  \"my\",\n\t  \"myself\",\n\t  \"mysterious\",\n\t  \"nails\",\n\t  \"name\",\n\t  \"nation\",\n", "  \"national\",\n\t  \"native\",\n\t  \"natural\",\n\t  \"naturally\",\n\t  \"nature\",\n\t  \"near\",\n\t  \"nearby\",\n\t  \"nearer\",\n\t  \"nearest\",\n\t  \"nearly\",\n", "  \"necessary\",\n\t  \"neck\",\n\t  \"needed\",\n\t  \"needle\",\n\t  \"needs\",\n\t  \"negative\",\n\t  \"neighbor\",\n\t  \"neighborhood\",\n\t  \"nervous\",\n\t  \"nest\",\n", "  \"never\",\n\t  \"new\",\n\t  \"news\",\n\t  \"newspaper\",\n\t  \"next\",\n\t  \"nice\",\n\t  \"night\",\n\t  \"nine\",\n\t  \"no\",\n\t  \"nobody\",\n", "  \"nodded\",\n\t  \"noise\",\n\t  \"none\",\n\t  \"noon\",\n\t  \"nor\",\n\t  \"north\",\n\t  \"nose\",\n\t  \"not\",\n\t  \"note\",\n\t  \"noted\",\n", "  \"nothing\",\n\t  \"notice\",\n\t  \"noun\",\n\t  \"now\",\n\t  \"number\",\n\t  \"numeral\",\n\t  \"nuts\",\n\t  \"object\",\n\t  \"observe\",\n\t  \"obtain\",\n", "  \"occasionally\",\n\t  \"occur\",\n\t  \"ocean\",\n\t  \"of\",\n\t  \"off\",\n\t  \"offer\",\n\t  \"office\",\n\t  \"officer\",\n\t  \"official\",\n\t  \"oil\",\n", "  \"old\",\n\t  \"older\",\n\t  \"oldest\",\n\t  \"on\",\n\t  \"once\",\n\t  \"one\",\n\t  \"only\",\n\t  \"onto\",\n\t  \"open\",\n\t  \"operation\",\n", "  \"opinion\",\n\t  \"opportunity\",\n\t  \"opposite\",\n\t  \"or\",\n\t  \"orange\",\n\t  \"orbit\",\n\t  \"order\",\n\t  \"ordinary\",\n\t  \"organization\",\n\t  \"organized\",\n", "  \"origin\",\n\t  \"original\",\n\t  \"other\",\n\t  \"ought\",\n\t  \"our\",\n\t  \"ourselves\",\n\t  \"out\",\n\t  \"outer\",\n\t  \"outline\",\n\t  \"outside\",\n", "  \"over\",\n\t  \"own\",\n\t  \"owner\",\n\t  \"oxygen\",\n\t  \"pack\",\n\t  \"package\",\n\t  \"page\",\n\t  \"paid\",\n\t  \"pain\",\n\t  \"paint\",\n", "  \"pair\",\n\t  \"palace\",\n\t  \"pale\",\n\t  \"pan\",\n\t  \"paper\",\n\t  \"paragraph\",\n\t  \"parallel\",\n\t  \"parent\",\n\t  \"park\",\n\t  \"part\",\n", "  \"particles\",\n\t  \"particular\",\n\t  \"particularly\",\n\t  \"partly\",\n\t  \"parts\",\n\t  \"party\",\n\t  \"pass\",\n\t  \"passage\",\n\t  \"past\",\n\t  \"path\",\n", "  \"pattern\",\n\t  \"pay\",\n\t  \"peace\",\n\t  \"pen\",\n\t  \"pencil\",\n\t  \"people\",\n\t  \"per\",\n\t  \"percent\",\n\t  \"perfect\",\n\t  \"perfectly\",\n", "  \"perhaps\",\n\t  \"period\",\n\t  \"person\",\n\t  \"personal\",\n\t  \"pet\",\n\t  \"phrase\",\n\t  \"physical\",\n\t  \"piano\",\n\t  \"pick\",\n\t  \"picture\",\n", "  \"pictured\",\n\t  \"pie\",\n\t  \"piece\",\n\t  \"pig\",\n\t  \"pile\",\n\t  \"pilot\",\n\t  \"pine\",\n\t  \"pink\",\n\t  \"pipe\",\n\t  \"pitch\",\n", "  \"place\",\n\t  \"plain\",\n\t  \"plan\",\n\t  \"plane\",\n\t  \"planet\",\n\t  \"planned\",\n\t  \"planning\",\n\t  \"plant\",\n\t  \"plastic\",\n\t  \"plate\",\n", "  \"plates\",\n\t  \"play\",\n\t  \"pleasant\",\n\t  \"please\",\n\t  \"pleasure\",\n\t  \"plenty\",\n\t  \"plural\",\n\t  \"plus\",\n\t  \"pocket\",\n\t  \"poem\",\n", "  \"poet\",\n\t  \"poetry\",\n\t  \"point\",\n\t  \"pole\",\n\t  \"police\",\n\t  \"policeman\",\n\t  \"political\",\n\t  \"pond\",\n\t  \"pony\",\n\t  \"pool\",\n", "  \"poor\",\n\t  \"popular\",\n\t  \"population\",\n\t  \"porch\",\n\t  \"port\",\n\t  \"position\",\n\t  \"positive\",\n\t  \"possible\",\n\t  \"possibly\",\n\t  \"post\",\n", "  \"pot\",\n\t  \"potatoes\",\n\t  \"pound\",\n\t  \"pour\",\n\t  \"powder\",\n\t  \"power\",\n\t  \"powerful\",\n\t  \"practical\",\n\t  \"practice\",\n\t  \"prepare\",\n", "  \"present\",\n\t  \"president\",\n\t  \"press\",\n\t  \"pressure\",\n\t  \"pretty\",\n\t  \"prevent\",\n\t  \"previous\",\n\t  \"price\",\n\t  \"pride\",\n\t  \"primitive\",\n", "  \"principal\",\n\t  \"principle\",\n\t  \"printed\",\n\t  \"private\",\n\t  \"prize\",\n\t  \"probably\",\n\t  \"problem\",\n\t  \"process\",\n\t  \"produce\",\n\t  \"product\",\n", "  \"production\",\n\t  \"program\",\n\t  \"progress\",\n\t  \"promised\",\n\t  \"proper\",\n\t  \"properly\",\n\t  \"property\",\n\t  \"protection\",\n\t  \"proud\",\n\t  \"prove\",\n", "  \"provide\",\n\t  \"public\",\n\t  \"pull\",\n\t  \"pupil\",\n\t  \"pure\",\n\t  \"purple\",\n\t  \"purpose\",\n\t  \"push\",\n\t  \"put\",\n\t  \"putting\",\n", "  \"quarter\",\n\t  \"queen\",\n\t  \"question\",\n\t  \"quick\",\n\t  \"quickly\",\n\t  \"quiet\",\n\t  \"quietly\",\n\t  \"quite\",\n\t  \"rabbit\",\n\t  \"race\",\n", "  \"radio\",\n\t  \"railroad\",\n\t  \"rain\",\n\t  \"raise\",\n\t  \"ran\",\n\t  \"ranch\",\n\t  \"range\",\n\t  \"rapidly\",\n\t  \"rate\",\n\t  \"rather\",\n", "  \"raw\",\n\t  \"rays\",\n\t  \"reach\",\n\t  \"read\",\n\t  \"reader\",\n\t  \"ready\",\n\t  \"real\",\n\t  \"realize\",\n\t  \"rear\",\n\t  \"reason\",\n", "  \"recall\",\n\t  \"receive\",\n\t  \"recent\",\n\t  \"recently\",\n\t  \"recognize\",\n\t  \"record\",\n\t  \"red\",\n\t  \"refer\",\n\t  \"refused\",\n\t  \"region\",\n", "  \"regular\",\n\t  \"related\",\n\t  \"relationship\",\n\t  \"religious\",\n\t  \"remain\",\n\t  \"remarkable\",\n\t  \"remember\",\n\t  \"remove\",\n\t  \"repeat\",\n\t  \"replace\",\n", "  \"replied\",\n\t  \"report\",\n\t  \"represent\",\n\t  \"require\",\n\t  \"research\",\n\t  \"respect\",\n\t  \"rest\",\n\t  \"result\",\n\t  \"return\",\n\t  \"review\",\n", "  \"rhyme\",\n\t  \"rhythm\",\n\t  \"rice\",\n\t  \"rich\",\n\t  \"ride\",\n\t  \"riding\",\n\t  \"right\",\n\t  \"ring\",\n\t  \"rise\",\n\t  \"rising\",\n", "  \"river\",\n\t  \"road\",\n\t  \"roar\",\n\t  \"rock\",\n\t  \"rocket\",\n\t  \"rocky\",\n\t  \"rod\",\n\t  \"roll\",\n\t  \"roof\",\n\t  \"room\",\n", "  \"root\",\n\t  \"rope\",\n\t  \"rose\",\n\t  \"rough\",\n\t  \"round\",\n\t  \"route\",\n\t  \"row\",\n\t  \"rubbed\",\n\t  \"rubber\",\n\t  \"rule\",\n", "  \"ruler\",\n\t  \"run\",\n\t  \"running\",\n\t  \"rush\",\n\t  \"sad\",\n\t  \"saddle\",\n\t  \"safe\",\n\t  \"safety\",\n\t  \"said\",\n\t  \"sail\",\n", "  \"sale\",\n\t  \"salmon\",\n\t  \"salt\",\n\t  \"same\",\n\t  \"sand\",\n\t  \"sang\",\n\t  \"sat\",\n\t  \"satellites\",\n\t  \"satisfied\",\n\t  \"save\",\n", "  \"saved\",\n\t  \"saw\",\n\t  \"say\",\n\t  \"scale\",\n\t  \"scared\",\n\t  \"scene\",\n\t  \"school\",\n\t  \"science\",\n\t  \"scientific\",\n\t  \"scientist\",\n", "  \"score\",\n\t  \"screen\",\n\t  \"sea\",\n\t  \"search\",\n\t  \"season\",\n\t  \"seat\",\n\t  \"second\",\n\t  \"secret\",\n\t  \"section\",\n\t  \"see\",\n", "  \"seed\",\n\t  \"seeing\",\n\t  \"seems\",\n\t  \"seen\",\n\t  \"seldom\",\n\t  \"select\",\n\t  \"selection\",\n\t  \"sell\",\n\t  \"send\",\n\t  \"sense\",\n", "  \"sent\",\n\t  \"sentence\",\n\t  \"separate\",\n\t  \"series\",\n\t  \"serious\",\n\t  \"serve\",\n\t  \"service\",\n\t  \"sets\",\n\t  \"setting\",\n\t  \"settle\",\n", "  \"settlers\",\n\t  \"seven\",\n\t  \"several\",\n\t  \"shade\",\n\t  \"shadow\",\n\t  \"shake\",\n\t  \"shaking\",\n\t  \"shall\",\n\t  \"shallow\",\n\t  \"shape\",\n", "  \"share\",\n\t  \"sharp\",\n\t  \"she\",\n\t  \"sheep\",\n\t  \"sheet\",\n\t  \"shelf\",\n\t  \"shells\",\n\t  \"shelter\",\n\t  \"shine\",\n\t  \"shinning\",\n", "  \"ship\",\n\t  \"shirt\",\n\t  \"shoe\",\n\t  \"shoot\",\n\t  \"shop\",\n\t  \"shore\",\n\t  \"short\",\n\t  \"shorter\",\n\t  \"shot\",\n\t  \"should\",\n", "  \"shoulder\",\n\t  \"shout\",\n\t  \"show\",\n\t  \"shown\",\n\t  \"shut\",\n\t  \"sick\",\n\t  \"sides\",\n\t  \"sight\",\n\t  \"sign\",\n\t  \"signal\",\n", "  \"silence\",\n\t  \"silent\",\n\t  \"silk\",\n\t  \"silly\",\n\t  \"silver\",\n\t  \"similar\",\n\t  \"simple\",\n\t  \"simplest\",\n\t  \"simply\",\n\t  \"since\",\n", "  \"sing\",\n\t  \"single\",\n\t  \"sink\",\n\t  \"sister\",\n\t  \"sit\",\n\t  \"sitting\",\n\t  \"situation\",\n\t  \"six\",\n\t  \"size\",\n\t  \"skill\",\n", "  \"skin\",\n\t  \"sky\",\n\t  \"slabs\",\n\t  \"slave\",\n\t  \"sleep\",\n\t  \"slept\",\n\t  \"slide\",\n\t  \"slight\",\n\t  \"slightly\",\n\t  \"slip\",\n", "  \"slipped\",\n\t  \"slope\",\n\t  \"slow\",\n\t  \"slowly\",\n\t  \"small\",\n\t  \"smaller\",\n\t  \"smallest\",\n\t  \"smell\",\n\t  \"smile\",\n\t  \"smoke\",\n", "  \"smooth\",\n\t  \"snake\",\n\t  \"snow\",\n\t  \"so\",\n\t  \"soap\",\n\t  \"social\",\n\t  \"society\",\n\t  \"soft\",\n\t  \"softly\",\n\t  \"soil\",\n", "  \"solar\",\n\t  \"sold\",\n\t  \"soldier\",\n\t  \"solid\",\n\t  \"solution\",\n\t  \"solve\",\n\t  \"some\",\n\t  \"somebody\",\n\t  \"somehow\",\n\t  \"someone\",\n", "  \"something\",\n\t  \"sometime\",\n\t  \"somewhere\",\n\t  \"son\",\n\t  \"song\",\n\t  \"soon\",\n\t  \"sort\",\n\t  \"sound\",\n\t  \"source\",\n\t  \"south\",\n", "  \"southern\",\n\t  \"space\",\n\t  \"speak\",\n\t  \"special\",\n\t  \"species\",\n\t  \"specific\",\n\t  \"speech\",\n\t  \"speed\",\n\t  \"spell\",\n\t  \"spend\",\n", "  \"spent\",\n\t  \"spider\",\n\t  \"spin\",\n\t  \"spirit\",\n\t  \"spite\",\n\t  \"split\",\n\t  \"spoken\",\n\t  \"sport\",\n\t  \"spread\",\n\t  \"spring\",\n", "  \"square\",\n\t  \"stage\",\n\t  \"stairs\",\n\t  \"stand\",\n\t  \"standard\",\n\t  \"star\",\n\t  \"stared\",\n\t  \"start\",\n\t  \"state\",\n\t  \"statement\",\n", "  \"station\",\n\t  \"stay\",\n\t  \"steady\",\n\t  \"steam\",\n\t  \"steel\",\n\t  \"steep\",\n\t  \"stems\",\n\t  \"step\",\n\t  \"stepped\",\n\t  \"stick\",\n", "  \"stiff\",\n\t  \"still\",\n\t  \"stock\",\n\t  \"stomach\",\n\t  \"stone\",\n\t  \"stood\",\n\t  \"stop\",\n\t  \"stopped\",\n\t  \"store\",\n\t  \"storm\",\n", "  \"story\",\n\t  \"stove\",\n\t  \"straight\",\n\t  \"strange\",\n\t  \"stranger\",\n\t  \"straw\",\n\t  \"stream\",\n\t  \"street\",\n\t  \"strength\",\n\t  \"stretch\",\n", "  \"strike\",\n\t  \"string\",\n\t  \"strip\",\n\t  \"strong\",\n\t  \"stronger\",\n\t  \"struck\",\n\t  \"structure\",\n\t  \"struggle\",\n\t  \"stuck\",\n\t  \"student\",\n", "  \"studied\",\n\t  \"studying\",\n\t  \"subject\",\n\t  \"substance\",\n\t  \"success\",\n\t  \"successful\",\n\t  \"such\",\n\t  \"sudden\",\n\t  \"suddenly\",\n\t  \"sugar\",\n", "  \"suggest\",\n\t  \"suit\",\n\t  \"sum\",\n\t  \"summer\",\n\t  \"sun\",\n\t  \"sunlight\",\n\t  \"supper\",\n\t  \"supply\",\n\t  \"support\",\n\t  \"suppose\",\n", "  \"sure\",\n\t  \"surface\",\n\t  \"surprise\",\n\t  \"surrounded\",\n\t  \"swam\",\n\t  \"sweet\",\n\t  \"swept\",\n\t  \"swim\",\n\t  \"swimming\",\n\t  \"swing\",\n", "  \"swung\",\n\t  \"syllable\",\n\t  \"symbol\",\n\t  \"system\",\n\t  \"table\",\n\t  \"tail\",\n\t  \"take\",\n\t  \"taken\",\n\t  \"tales\",\n\t  \"talk\",\n", "  \"tall\",\n\t  \"tank\",\n\t  \"tape\",\n\t  \"task\",\n\t  \"taste\",\n\t  \"taught\",\n\t  \"tax\",\n\t  \"tea\",\n\t  \"teach\",\n\t  \"teacher\",\n", "  \"team\",\n\t  \"tears\",\n\t  \"teeth\",\n\t  \"telephone\",\n\t  \"television\",\n\t  \"tell\",\n\t  \"temperature\",\n\t  \"ten\",\n\t  \"tent\",\n\t  \"term\",\n", "  \"terrible\",\n\t  \"test\",\n\t  \"than\",\n\t  \"thank\",\n\t  \"that\",\n\t  \"thee\",\n\t  \"them\",\n\t  \"themselves\",\n\t  \"then\",\n\t  \"theory\",\n", "  \"there\",\n\t  \"therefore\",\n\t  \"these\",\n\t  \"they\",\n\t  \"thick\",\n\t  \"thin\",\n\t  \"thing\",\n\t  \"think\",\n\t  \"third\",\n\t  \"thirty\",\n", "  \"this\",\n\t  \"those\",\n\t  \"thou\",\n\t  \"though\",\n\t  \"thought\",\n\t  \"thousand\",\n\t  \"thread\",\n\t  \"three\",\n\t  \"threw\",\n\t  \"throat\",\n", "  \"through\",\n\t  \"throughout\",\n\t  \"throw\",\n\t  \"thrown\",\n\t  \"thumb\",\n\t  \"thus\",\n\t  \"thy\",\n\t  \"tide\",\n\t  \"tie\",\n\t  \"tight\",\n", "  \"tightly\",\n\t  \"till\",\n\t  \"time\",\n\t  \"tin\",\n\t  \"tiny\",\n\t  \"tip\",\n\t  \"tired\",\n\t  \"title\",\n\t  \"to\",\n\t  \"tobacco\",\n", "  \"today\",\n\t  \"together\",\n\t  \"told\",\n\t  \"tomorrow\",\n\t  \"tone\",\n\t  \"tongue\",\n\t  \"tonight\",\n\t  \"too\",\n\t  \"took\",\n\t  \"tool\",\n", "  \"top\",\n\t  \"topic\",\n\t  \"torn\",\n\t  \"total\",\n\t  \"touch\",\n\t  \"toward\",\n\t  \"tower\",\n\t  \"town\",\n\t  \"toy\",\n\t  \"trace\",\n", "  \"track\",\n\t  \"trade\",\n\t  \"traffic\",\n\t  \"trail\",\n\t  \"train\",\n\t  \"transportation\",\n\t  \"trap\",\n\t  \"travel\",\n\t  \"treated\",\n\t  \"tree\",\n", "  \"triangle\",\n\t  \"tribe\",\n\t  \"trick\",\n\t  \"tried\",\n\t  \"trip\",\n\t  \"troops\",\n\t  \"tropical\",\n\t  \"trouble\",\n\t  \"truck\",\n\t  \"trunk\",\n", "  \"truth\",\n\t  \"try\",\n\t  \"tube\",\n\t  \"tune\",\n\t  \"turn\",\n\t  \"twelve\",\n\t  \"twenty\",\n\t  \"twice\",\n\t  \"two\",\n\t  \"type\",\n", "  \"typical\",\n\t  \"uncle\",\n\t  \"under\",\n\t  \"underline\",\n\t  \"understanding\",\n\t  \"unhappy\",\n\t  \"union\",\n\t  \"unit\",\n\t  \"universe\",\n\t  \"unknown\",\n", "  \"unless\",\n\t  \"until\",\n\t  \"unusual\",\n\t  \"up\",\n\t  \"upon\",\n\t  \"upper\",\n\t  \"upward\",\n\t  \"us\",\n\t  \"use\",\n\t  \"useful\",\n", "  \"using\",\n\t  \"usual\",\n\t  \"usually\",\n\t  \"valley\",\n\t  \"valuable\",\n\t  \"value\",\n\t  \"vapor\",\n\t  \"variety\",\n\t  \"various\",\n\t  \"vast\",\n", "  \"vegetable\",\n\t  \"verb\",\n\t  \"vertical\",\n\t  \"very\",\n\t  \"vessels\",\n\t  \"victory\",\n\t  \"view\",\n\t  \"village\",\n\t  \"visit\",\n\t  \"visitor\",\n", "  \"voice\",\n\t  \"volume\",\n\t  \"vote\",\n\t  \"vowel\",\n\t  \"voyage\",\n\t  \"wagon\",\n\t  \"wait\",\n\t  \"walk\",\n\t  \"wall\",\n\t  \"want\",\n", "  \"war\",\n\t  \"warm\",\n\t  \"warn\",\n\t  \"was\",\n\t  \"wash\",\n\t  \"waste\",\n\t  \"watch\",\n\t  \"water\",\n\t  \"wave\",\n\t  \"way\",\n", "  \"we\",\n\t  \"weak\",\n\t  \"wealth\",\n\t  \"wear\",\n\t  \"weather\",\n\t  \"week\",\n\t  \"weigh\",\n\t  \"weight\",\n\t  \"welcome\",\n\t  \"well\",\n", "  \"went\",\n\t  \"were\",\n\t  \"west\",\n\t  \"western\",\n\t  \"wet\",\n\t  \"whale\",\n\t  \"what\",\n\t  \"whatever\",\n\t  \"wheat\",\n\t  \"wheel\",\n", "  \"when\",\n\t  \"whenever\",\n\t  \"where\",\n\t  \"wherever\",\n\t  \"whether\",\n\t  \"which\",\n\t  \"while\",\n\t  \"whispered\",\n\t  \"whistle\",\n\t  \"white\",\n", "  \"who\",\n\t  \"whole\",\n\t  \"whom\",\n\t  \"whose\",\n\t  \"why\",\n\t  \"wide\",\n\t  \"widely\",\n\t  \"wife\",\n\t  \"wild\",\n\t  \"will\",\n", "  \"willing\",\n\t  \"win\",\n\t  \"wind\",\n\t  \"window\",\n\t  \"wing\",\n\t  \"winter\",\n\t  \"wire\",\n\t  \"wise\",\n\t  \"wish\",\n\t  \"with\",\n", "  \"within\",\n\t  \"without\",\n\t  \"wolf\",\n\t  \"women\",\n\t  \"won\",\n\t  \"wonder\",\n\t  \"wonderful\",\n\t  \"wood\",\n\t  \"wooden\",\n\t  \"wool\",\n", "  \"word\",\n\t  \"wore\",\n\t  \"work\",\n\t  \"worker\",\n\t  \"world\",\n\t  \"worried\",\n\t  \"worry\",\n\t  \"worse\",\n\t  \"worth\",\n\t  \"would\",\n", "  \"wrapped\",\n\t  \"write\",\n\t  \"writer\",\n\t  \"writing\",\n\t  \"written\",\n\t  \"wrong\",\n\t  \"wrote\",\n\t  \"yard\",\n\t  \"year\",\n\t  \"yellow\",\n", "  \"yes\",\n\t  \"yesterday\",\n\t  \"yet\",\n\t  \"you\",\n\t  \"young\",\n\t  \"younger\",\n\t  \"your\",\n\t  \"yourself\",\n\t  \"youth\",\n\t  \"zero\",\n", "  \"zebra\",\n\t  \"zipper\",\n\t  \"zoo\",\n\t  \"zulu\",\n\t];\n\texport function generateRandomWords(mt: MersenneTwister, length = 4): string[] {\n\t  const words: string[] = [];\n\t  for (let i = 0; i < length + 0; ++i) {\n\t    const min = i * (wordList.length / length),\n\t      max = (i + 1) * (wordList.length / length);\n", "    const rand = (mt.random() * (max - min) + min) | 0,\n\t      word = [...wordList[rand]];\n\t    word.unshift(word.shift()!.toUpperCase());\n\t    words.push(word.join(\"\"));\n\t  }\n\t  return words;\n\t}\n"]}
{"filename": "src/process.ts", "chunked_list": ["import \"source-map-support/register.js\";\n\timport { processedDir, unpackedDir } from \"./consts.js\";\n\timport { mkdir, readFile } from \"node:fs/promises\";\n\timport { join, parse } from \"node:path\";\n\timport P from \"piscina\";\n\timport prettyMilliseconds from \"pretty-ms\";\n\timport { rimraf } from \"rimraf\";\n\tconst bundle = JSON.parse(\n\t  await readFile(join(unpackedDir, \"bundle.json\"), \"utf-8\")\n\t) as {\n", "  type: \"webpack\" | \"browserify\";\n\t  entryId: string;\n\t  modules: {\n\t    id: string;\n\t    path: string;\n\t  }[];\n\t};\n\tconst pool = new P.Piscina({\n\t  filename: new URL(\"./processWorker.js\", import.meta.url).toString(),\n\t  maxQueue: 100000,\n", "  concurrentTasksPerWorker: 3,\n\t});\n\tawait rimraf(processedDir);\n\tawait mkdir(processedDir);\n\ttype Data = [path: string, promise: Promise<void>, resolved: boolean];\n\tconst promises: Data[] = [];\n\tfor await (const ent of bundle.modules) {\n\t  const path = join(unpackedDir, ent.path);\n\t  const data: Data = [path, pool.run(path), false];\n\t  promises.push(data);\n", "  data[1].finally(() => (data[2] = true));\n\t}\n\tconst start = Date.now();\n\tconst interval = setInterval(() => {\n\t  console.log(\n\t    `[${prettyMilliseconds(Date.now() - start).padEnd(\n\t      7,\n\t      \" \"\n\t    )}] Waiting for: ${promises\n\t      .filter((d) => !d[2])\n", "      .map((d) => parse(d[0]).name)\n\t      .join(\", \")}`\n\t  );\n\t}, 10e3);\n\tawait Promise.all(promises.map(([, promise]) => promise));\n\tclearInterval(interval);\n\tconsole.log(\"Completed\");\n"]}
{"filename": "src/processWorker.ts", "chunked_list": ["import \"source-map-support/register.js\";\n\timport { processedDir } from \"./consts.js\";\n\timport decompile from \"./libDecompile.js\";\n\timport renameVars from \"./libRenameVars.js\";\n\timport escodegen from \"@javascript-obfuscator/escodegen\";\n\timport { parse as parseScript } from \"acorn\";\n\timport type { namedTypes as n } from \"ast-types\";\n\timport crc32 from \"crc-32\";\n\timport { readFile, writeFile } from \"node:fs/promises\";\n\timport { join, parse } from \"node:path\";\n", "export function processCode(code: string) {\n\t  let program = parseScript(code, {\n\t    ecmaVersion: \"latest\",\n\t    allowReturnOutsideFunction: true,\n\t    allowImportExportEverywhere: true,\n\t  }) as n.Node as n.Program;\n\t  decompile(program);\n\t  code = escodegen.generate(program);\n\t  program = parseScript(code, {\n\t    ecmaVersion: \"latest\",\n", "    ranges: true,\n\t    allowReturnOutsideFunction: true,\n\t    allowImportExportEverywhere: true,\n\t  }) as n.Node as n.Program;\n\t  const hash = crc32.str(code);\n\t  renameVars(program, hash);\n\t  return escodegen.generate(program);\n\t}\n\texport default async function processWorker(file: string) {\n\t  const name = parse(file).name;\n", "  const code = await readFile(file, \"utf-8\");\n\t  try {\n\t    await writeFile(join(processedDir, `${name}.js`), processCode(code));\n\t  } catch (err) {\n\t    console.error(\"Failure processing:\", name);\n\t    throw err;\n\t  }\n\t  console.log(\"Wrote\", name);\n\t}\n"]}
{"filename": "src/deobfuscate.ts", "chunked_list": ["import \"source-map-support/register.js\";\n\timport { unpackedDir } from \"./consts.js\";\n\timport { readFile } from \"node:fs/promises\";\n\timport { argv } from \"node:process\";\n\timport { rimraf } from \"rimraf\";\n\timport { webcrack } from \"webcrack\";\n\tconst [, , script] = argv;\n\tlet code = await readFile(script, \"utf-8\");\n\tconst res = await webcrack(code, { unpack: true });\n\tconsole.log(\"Deobfuscated. Saving unpacked modules.\");\n", "await rimraf(unpackedDir);\n\tawait res.save(unpackedDir);\n\t// await writeFile(deobfuscated, code);\n"]}
{"filename": "src/processCode.ts", "chunked_list": ["import \"source-map-support/register.js\";\n\timport { processCode } from \"./processWorker.js\";\n\timport { writeFile, readFile } from \"node:fs/promises\";\n\timport { webcrack } from \"webcrack\";\n\tconst programArgv = [...process.argv.slice(2)]; // clone the array to modify it\n\tconst [file, output] = programArgv;\n\tif (!file) {\n\t  console.log(`${process.argv.slice(0, 2).join(\" \")} [<file>|<code>] [<output>]\n\tArguments:\n\t    <file>           Path to a file containing the code\n", "    <code>           The actual code (if not using a file)\n\t    <output>         Location to output the code (default: stdout)`);\n\t  process.exit(0);\n\t}\n\tlet code: string;\n\ttry {\n\t  // try reading it as a file\n\t  code = await readFile(file, \"utf-8\");\n\t} catch {\n\t  // use it as code\n", "  code = file;\n\t}\n\tconst { log } = console;\n\tconsole.log = () => {\n\t  // noop\n\t};\n\t({ code } = await webcrack(code));\n\tconsole.log = log;\n\tconst parsed = processCode(code);\n\tif (output) {\n", "  await writeFile(output, parsed);\n\t} else {\n\t  console.log(parsed);\n\t}\n"]}
{"filename": "src/fetchSocial.ts", "chunked_list": ["import { writeFile } from \"node:fs/promises\";\n\timport { argv } from \"node:process\";\n\t// you need im_ after the numbers so they don't mess with the JS or anything\n\t// example custom URL: https://web.archive.org/web/20210322135140im_/https://krunker.io/social.html\n\tconst [, , destination, url = \"https://krunker.io/social.html\"] = argv;\n\tif (!destination) throw new TypeError(\"Need output destination\");\n\tconst res = await fetch(url);\n\tconst [, script] =\n\t  (await res.text()).match(\n\t    /<script(?: type=\"text\\/javascript\")?>(\\/\\*!\\n \\*[\\s\\S]*?)<\\/script>/\n", "  ) || [];\n\tif (!script) throw new TypeError(\"No script\");\n\tawait writeFile(destination, script);\n"]}
{"filename": "src/declarations/escodegen.d.ts", "chunked_list": ["declare module \"@javascript-obfuscator/escodegen\" {\n\t  export * from \"escodegen\";\n\t}\n"]}
