{"filename": "src/server.ts", "chunked_list": ["import * as dotenv from \"dotenv\"\n\tdotenv.config()\n\timport express from \"express\"\n\timport cors from \"cors\"\n\timport connectToDatabase from \"./db\"\n\timport orderRoutes from \"./routes/order\"\n\timport productRoutes from \"./routes/product\"\n\timport { webhookHandler } from \"./webhook\"\n\tconst app = express()\n\tapp.use(cors())\n", "connectToDatabase()\n\tapp.get(\"/ping\", (request, response) => {\n\t  response.send(\"pong\")\n\t})\n\tapp.post(\"/webhook\", express.raw({ type: \"application/json\" }), webhookHandler)\n\tapp.use(express.json())\n\tapp.use(\"/products\", productRoutes)\n\tapp.use(\"/orders\", orderRoutes)\n\tconst PORT = process.env.PORT || 3000\n\tapp.listen(PORT, () => {\n", "  console.log(\"Server up and running at port\", PORT)\n\t})\n"]}
{"filename": "src/db.ts", "chunked_list": ["import mongoose from \"mongoose\"\n\tconst connectToDatabase = async () => {\n\t  try {\n\t    const connection = await mongoose.connect(process.env.MONGO_URI)\n\t    console.log(\"Connection established\")\n\t  } catch (error) {\n\t    console.log(\"error in connectToDatabase\", error)\n\t    throw error\n\t  }\n\t}\n", "export default connectToDatabase\n"]}
{"filename": "src/webhook/index.ts", "chunked_list": ["import { Request, Response } from \"express\"\n\timport stripe from \"stripe\"\n\timport Order from \"../models/order\"\n\tconst stripeClient = new stripe(process.env.STRIPE_SECRET_KEY, {\n\t  apiVersion: \"2022-11-15\",\n\t})\n\texport const webhookHandler = async (request: Request, response: Response) => {\n\t  try {\n\t    const sig = request.headers[\"stripe-signature\"] as string\n\t    const event = stripeClient.webhooks.constructEvent(\n", "      request.body,\n\t      sig,\n\t      process.env.STRIPE_WEBHOOK_SECRET\n\t    )\n\t    if (event.type === \"charge.succeeded\") {\n\t      const charge = event.data.object as stripe.Charge\n\t      const order = await Order.findOne({\n\t        paymentIntentId: charge.payment_intent,\n\t      })\n\t      if (order) {\n", "        order.paymentStatus = \"paid\"\n\t        order.paymentDetails = charge\n\t        await order.save()\n\t      }\n\t    } else if (event.type === \"charge.failed\") {\n\t      const charge = event.data.object as stripe.Charge\n\t      const order = await Order.findOne({\n\t        paymentIntentId: charge.payment_intent,\n\t      })\n\t      if (order) {\n", "        order.paymentStatus = \"failed\"\n\t        order.paymentDetails = charge\n\t        await order.save()\n\t      }\n\t    }\n\t    response.send({ received: true })\n\t  } catch (error) {\n\t    console.log(\"error in webhookHandler\", error)\n\t    throw error\n\t  }\n", "}\n"]}
{"filename": "src/models/product.ts", "chunked_list": ["import mongoose, { Schema } from \"mongoose\"\n\timport { IProduct } from \"../types\"\n\tconst productSchema = new Schema<IProduct>(\n\t  {\n\t    name: {\n\t      type: String,\n\t      required: true,\n\t    },\n\t    image: {\n\t      type: String,\n", "      required: true,\n\t    },\n\t    description: {\n\t      type: String,\n\t      required: true,\n\t    },\n\t    price: {\n\t      type: Number,\n\t      required: true,\n\t    },\n", "  },\n\t  {\n\t    timestamps: true,\n\t  }\n\t)\n\tconst Product = mongoose.model(\"Product\", productSchema)\n\texport default Product\n"]}
{"filename": "src/models/order.ts", "chunked_list": ["import mongoose, { Schema } from \"mongoose\"\n\timport { IOrder } from \"../types\"\n\tconst orderSchema = new Schema<IOrder>(\n\t  {\n\t    user: {\n\t      name: {\n\t        type: String,\n\t        required: true,\n\t      },\n\t      email: {\n", "        type: String,\n\t        required: true,\n\t      },\n\t    },\n\t    orderItems: [\n\t      {\n\t        product: {\n\t          type: Schema.Types.ObjectId,\n\t          required: true,\n\t          ref: \"Product\",\n", "        },\n\t        name: {\n\t          type: String,\n\t          required: true,\n\t        },\n\t        image: {\n\t          type: String,\n\t          required: true,\n\t        },\n\t        quantity: {\n", "          type: Number,\n\t          required: true,\n\t        },\n\t        price: {\n\t          type: Number,\n\t          required: true,\n\t        },\n\t      },\n\t    ],\n\t    deliveryAddress: {\n", "      address: {\n\t        type: String,\n\t        required: true,\n\t      },\n\t      city: {\n\t        type: String,\n\t        required: true,\n\t      },\n\t    },\n\t    paymentDetails: {\n", "      type: Object,\n\t      required: false,\n\t    },\n\t    paymentIntentId: {\n\t      type: String,\n\t      required: true,\n\t    },\n\t    paymentStatus: {\n\t      type: String,\n\t      required: true,\n", "    },\n\t  },\n\t  {\n\t    timestamps: true,\n\t  }\n\t)\n\tconst Order = mongoose.model(\"Order\", orderSchema)\n\texport default Order\n"]}
{"filename": "src/controller/product.ts", "chunked_list": ["import { Request, response, Response } from \"express\"\n\timport Product from \"../models/product\"\n\timport { IProduct } from \"../types\"\n\ttype CreateProductRequestType = Pick<\n\t  IProduct,\n\t  \"image\" | \"name\" | \"description\" | \"price\"\n\t>\n\texport const createProduct = async (request: Request, response: Response) => {\n\t  try {\n\t    const { image, name, price, description }: CreateProductRequestType =\n", "      request.body\n\t    const product = await Product.create({\n\t      image,\n\t      name,\n\t      price,\n\t      description,\n\t    })\n\t    response.send(product)\n\t  } catch (error) {\n\t    console.log(\"error in createProduct\", error)\n", "    response.send({\n\t      message: \"Something went wrong while creating product\",\n\t    })\n\t    throw error\n\t  }\n\t}\n\texport const getProducts = async (request: Request, response: Response) => {\n\t  try {\n\t    const products = await Product.find({})\n\t    response.send(products)\n", "  } catch (error) {\n\t    console.log(\"error in getProducts\", error)\n\t    response.send({ message: \"Something went wrong in get products\" })\n\t    throw error\n\t  }\n\t}\n\texport const getProductById = async (request: Request, response: Response) => {\n\t  try {\n\t    const { id } = request.params\n\t    const product = await Product.findById(id)\n", "    response.send(product)\n\t  } catch (error) {\n\t    console.log(\"error in getProductById\", error)\n\t    response.send({\n\t      message: \"Something went wrong while fetching the product\",\n\t    })\n\t    throw error\n\t  }\n\t}\n"]}
{"filename": "src/controller/order.ts", "chunked_list": ["import { Request, Response } from \"express\"\n\timport Order from \"../models/order\"\n\timport { IOrder, IOrderItem } from \"../types\"\n\timport stripe from \"stripe\"\n\tconst stripeClient = new stripe(process.env.STRIPE_SECRET_KEY, {\n\t  apiVersion: \"2022-11-15\",\n\t})\n\ttype CreateOrderType = Pick<\n\t  IOrder,\n\t  \"deliveryAddress\" | \"totalPrice\" | \"user\" | \"orderItems\"\n", ">\n\tconst BASE_UNIT = 100\n\tconst getTotalAmount = (orderItems: IOrderItem[]) => {\n\t  return (\n\t    orderItems.reduce((acc, item) => acc + item.price * item.quantity, 0) *\n\t    BASE_UNIT\n\t  )\n\t}\n\t/**\n\t *\n", " * @param request\n\t * @param response\n\t *\n\t * 1. To make a request to stripe, it's gonna return paymentIntent,we've to pass currency and order amount\n\t * 2. Save paymentIntentId in order model\n\t * 3. Return paymentIntentId.client_secret\n\t *\n\t */\n\texport const createOrder = async (request: Request, response: Response) => {\n\t  try {\n", "    const { deliveryAddress, orderItems, totalPrice, user }: CreateOrderType =\n\t      request.body\n\t    const totalAmount = getTotalAmount(orderItems)\n\t    const paymentIntent = await stripeClient.paymentIntents.create({\n\t      amount: totalAmount,\n\t      currency: \"inr\",\n\t    })\n\t    const order = await Order.create({\n\t      user,\n\t      deliveryAddress,\n", "      orderItems,\n\t      totalPrice,\n\t      paymentIntentId: paymentIntent.id,\n\t      paymentStatus: \"pending\",\n\t      paymentDetails: {},\n\t    })\n\t    response.send({\n\t      clientSecret: paymentIntent.client_secret,\n\t    })\n\t  } catch (error) {\n", "    console.log(\"error in createOrder\", error)\n\t    response.send({\n\t      message: \"Something went wrong in create order\",\n\t    })\n\t    throw error\n\t  }\n\t}\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export interface IProduct {\n\t  _id: string\n\t  name: string\n\t  description: string\n\t  price: number\n\t  image: string\n\t  createdAt: string\n\t  updatedAt: string\n\t}\n\texport interface IUser {\n", "  name: string\n\t  email: string\n\t}\n\texport interface IOrderItem {\n\t  name: string\n\t  quantity: number\n\t  image: string\n\t  price: number\n\t  product: string\n\t}\n", "export interface IDeliveryAddress {\n\t  address: string\n\t  city: string\n\t}\n\texport interface IOrder {\n\t  _id: string\n\t  user: IUser\n\t  orderItems: IOrderItem[]\n\t  deliveryAddress: IDeliveryAddress\n\t  paymentDetails: {}\n", "  paymentIntentId: string\n\t  totalPrice: number\n\t  createdAt: string\n\t  updatedAt: string\n\t  paymentStatus: string\n\t}\n"]}
{"filename": "src/routes/product.ts", "chunked_list": ["import express from \"express\"\n\timport {\n\t  createProduct,\n\t  getProductById,\n\t  getProducts,\n\t} from \"../controller/product\"\n\tconst productRoutes = express.Router()\n\tproductRoutes.get(\"/\", getProducts)\n\tproductRoutes.get(\"/:id\", getProductById)\n\tproductRoutes.post(\"/\", createProduct)\n", "export default productRoutes\n"]}
{"filename": "src/routes/order.ts", "chunked_list": ["import express from \"express\"\n\timport { createOrder } from \"../controller/order\"\n\tconst orderRoutes = express.Router()\n\torderRoutes.post(\"/\", createOrder)\n\texport default orderRoutes\n"]}
