{"filename": "src/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { Language } from './language'\n\timport { NlpUtil, NlpManager, NlpExcelReader } from './nlp'\n\timport { XTableUtils, XTable, XDoc } from './xtables'\n\timport { removeEmojis, Evaluator, SpellCheck, Handlebars } from './util'\n\timport { ActionManager, NlgManager } from './nlg'\n\timport { NeuralNetwork } from './classifiers'\n\timport { SentimentAnalyzer, SentimentManager } from './sentiment'\n\timport {\n", "    Recognizer,\n\t    ConversationContext,\n\t    MemoryConversationContext,\n\t} from './recognizer'\n\timport { BrainNLU } from './nlu'\n\texport {\n\t    Language,\n\t    NlpUtil,\n\t    NlpManager,\n\t    NlpExcelReader,\n", "    XTableUtils,\n\t    XTable,\n\t    XDoc,\n\t    removeEmojis,\n\t    Evaluator,\n\t    SpellCheck,\n\t    Handlebars,\n\t    ActionManager,\n\t    NlgManager,\n\t    NeuralNetwork,\n", "    SentimentAnalyzer,\n\t    SentimentManager,\n\t    Recognizer,\n\t    ConversationContext,\n\t    MemoryConversationContext,\n\t    BrainNLU,\n\t};\n"]}
{"filename": "src/recognizer/memory-conversation-context.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport ConversationContext from './conversation-context';\n\timport { Session } from \"../types/session\";\n\t/**\n\t * In memory conversation context manager.\n\t */\n\tclass MemoryConversationContext extends ConversationContext {\n\t  private readonly conversationContexts: { [conversationId: string]: any };\n\t  /**\n", "   * Constructor of the class.\n\t   * @param {Object} settings Settings for the instance.\n\t   */\n\t  constructor(settings: object) {\n\t    super(settings);\n\t    this.conversationContexts = {};\n\t  }\n\t  /**\n\t   * Gets the conversation context from the session.\n\t   * @param {Object} session Chatbot session of the conversation.\n", "   * @returns {Promise<Object>} Promise to resolve the conversation context.\n\t   */\n\t  public getConversationContext(session: Session): Promise<Object> {\n\t    return new Promise((resolve, reject) => {\n\t      const conversationId = this.getConversationId(session);\n\t      if (!conversationId) {\n\t        return reject(new Error('No conversation id found'));\n\t      }\n\t      if (!this.conversationContexts[conversationId]) {\n\t        this.conversationContexts[conversationId] = {};\n", "      }\n\t      return resolve(this.conversationContexts[conversationId]);\n\t    });\n\t  }\n\t  public setConversationContext(session: Session, context: any): Promise<void> {\n\t    return new Promise((resolve, reject) => {\n\t      const conversationId = this.getConversationId(session);\n\t      if (!conversationId) {\n\t        return reject(new Error('No conversation id found'));\n\t      }\n", "      this.conversationContexts[conversationId] = context;\n\t      return resolve();\n\t    });\n\t  }\n\t}\n\texport default MemoryConversationContext;\n"]}
{"filename": "src/recognizer/recognizer.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { NlpManager } from '../nlp';\n\timport MemoryConversationContext from './memory-conversation-context';\n\t/**\n\t * Microsoft Bot Framework compatible recognizer for nlp.js.\n\t */\n\tclass Recognizer {\n\t  private readonly nlpManager: NlpManager;\n\t  private readonly threshold: number;\n", "  private readonly conversationContext: MemoryConversationContext;\n\t  /**\n\t   * Constructor of the class.\n\t   * @param {Object} settings Settings for the instance.\n\t   */\n\t  constructor(private readonly settings: {\n\t    nlpManager?: NlpManager;\n\t    container?: any;\n\t    nerThreshold?: number;\n\t    threshold?: number;\n", "    conversationContext?: MemoryConversationContext;\n\t  }) {\n\t    this.nlpManager =\n\t        this.settings.nlpManager ||\n\t        new NlpManager({\n\t          container: this.settings.container,\n\t          ner: { threshold: this.settings.nerThreshold || 1 },\n\t        });\n\t    this.threshold = this.settings.threshold || 0.7;\n\t    this.conversationContext =\n", "        this.settings.conversationContext || new MemoryConversationContext({});\n\t  }\n\t  /**\n\t   * Train the NLP manager.\n\t   */\n\t  public async train(): Promise<void> {\n\t    await this.nlpManager.train();\n\t  }\n\t  /**\n\t   * Loads the model from a file.\n", "   * @param {String} filename Name of the file.\n\t   */\n\t  public load(filename: string): void {\n\t    this.nlpManager.load(filename);\n\t  }\n\t  /**\n\t   * Saves the model into a file.\n\t   * @param {String} filename Name of the file.\n\t   */\n\t  public save(filename: string): void {\n", "    this.nlpManager.save(filename);\n\t  }\n\t  /**\n\t   * Loads the NLP manager from an excel.\n\t   * @param {String} filename Name of the file.\n\t   */\n\t  public async loadExcel(filename: string): Promise<void> {\n\t    this.nlpManager.loadExcel(filename);\n\t    await this.train();\n\t    this.save(filename);\n", "  }\n\t  /**\n\t   * Process an utterance using the NLP manager. This is done using a given context\n\t   * as the context object.\n\t   * @param {Object} srcContext Source context\n\t   * @param {String} locale Locale of the utterance.\n\t   * @param {String} utterance Locale of the utterance.\n\t   */\n\t  public async process(\n\t      srcContext: Record<string, unknown>,\n", "      locale?: string,\n\t      utterance?: string\n\t  ): Promise<string> {\n\t    const context = srcContext || {};\n\t    const response = await (locale\n\t        ? this.nlpManager.process(locale, utterance, context)\n\t        : this.nlpManager.process(utterance, undefined, context));\n\t    if (response.score < this.threshold || response.intent === 'None') {\n\t      response.answer = undefined;\n\t      return response;\n", "    }\n\t    for (let i = 0; i < response.entities.length; i += 1) {\n\t      const entity = response.entities[i];\n\t      context[entity.entity] = entity.option;\n\t    }\n\t    if (response.slotFill) {\n\t      context.slotFill = response.slotFill;\n\t    } else {\n\t      delete context.slotFill;\n\t    }\n", "    return response;\n\t  }\n\t  /**\n\t   * Given an utterance and the locale, returns the recognition of the utterance.\n\t   * @param {String} utterance Utterance to be recognized.\n\t   * @param {String} model Model of the utterance.\n\t   * @param {Function} cb Callback Function.\n\t   */\n\t  public async recognizeUtterance(utterance: string, model: {locale: string}, cb: Function): Promise<any> {\n\t    const response = await this.process(\n", "        model,\n\t        model ? model.locale : undefined,\n\t        utterance\n\t    );\n\t    return cb(null, response);\n\t  }\n\t}\n\texport default Recognizer;\n"]}
{"filename": "src/recognizer/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport Recognizer from './recognizer';\n\timport ConversationContext from './conversation-context'\n\timport MemoryConversationContext from './memory-conversation-context'\n\texport {\n\t  Recognizer,\n\t  ConversationContext,\n\t  MemoryConversationContext,\n\t};\n"]}
{"filename": "src/recognizer/conversation-context.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { Session } from \"../types/session\";\n\t/**\n\t * Abstract class for a conversation context of a chatbot.\n\t * The conversation context is the responsible for storing and retrieving\n\t * the context scope variables based on the current conversation.\n\t * The getConversationContext receive the session of the chatbot, and must return\n\t * a promise with the context in the resolve.\n\t */\n", "class ConversationContext {\n\t  private settings: object;\n\t  /**\n\t   * Constructor of the class.\n\t   * @param {Object} settings Settings for the instance.\n\t   */\n\t  constructor(settings: object) {\n\t    this.settings = settings || {};\n\t  }\n\t  /**\n", "   * Given a session instance of a chatbot, return the conversation identifier.\n\t   * @param {Object} session Session instance of a message of chatbot.\n\t   * @returns {String} Identifier of the conversation.\n\t   */\n\t  public getConversationId(session: Session): string | undefined {\n\t    if (session?.message?.address?.conversation) {\n\t      return session.message.address.conversation.id;\n\t    }\n\t    if (session?._activity?.conversation) {\n\t      return session._activity.conversation.id;\n", "    }\n\t    return undefined;\n\t  }\n\t}\n\texport default ConversationContext;\n"]}
{"filename": "src/language/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport Language from '@nlpjs/language';\n\texport {\n\t  Language,\n\t};\n"]}
{"filename": "src/nlu/brain-nlu.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { containerBootstrap } from '@nlpjs/core-loader';\n\timport { LangAll } from '@nlpjs/lang-all';\n\timport { NluNeural } from '@nlpjs/nlu';\n\tclass BrainNLU {\n\t  private container: any;\n\t  private nlu: NluNeural | undefined;\n\t  private readonly corpus: any[];\n\t  private readonly settings: any;\n", "  constructor(settings: any = {}) {\n\t    this.settings = settings;\n\t    if (!this.settings.container) {\n\t      this.settings.container = containerBootstrap();\n\t    }\n\t    this.container = this.settings.container;\n\t    this.container.use(LangAll);\n\t    if (!this.settings.l) {\n\t      this.nlu = new NluNeural({\n\t        locale: this.settings.locale || this.settings.language || 'en',\n", "      });\n\t    }\n\t    this.corpus = [];\n\t  }\n\t  add(utterance: string, intent: string) {\n\t    this.corpus.push({ utterance, intent });\n\t  }\n\t  train() {\n\t    return this.nlu?.train(this.corpus, this.settings);\n\t  }\n", "  async getClassifications(utterance: string) {\n\t    const result = await this.nlu?.process(utterance);\n\t    return result?.classifications.sort((a, b) => b.score - a.score);\n\t  }\n\t  async getBestClassification(utterance: string) {\n\t    const result = await this.getClassifications(utterance);\n\t    return result?.[0];\n\t  }\n\t}\n\texport default BrainNLU;\n"]}
{"filename": "src/nlu/index.ts", "chunked_list": ["import BrainNLU from './brain-nlu'\n\texport {\n\t  BrainNLU,\n\t};\n"]}
{"filename": "src/util/handlebars.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { compile } from '@nlpjs/evaluator'\n\tclass Handlebars {\n\t  static compile(str: string) {\n\t    return compile(str);\n\t  }\n\t}\n\texport {\n\t  Handlebars,\n", "};\n"]}
{"filename": "src/util/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { removeEmojis } from '@nlpjs/emoji'\n\timport { Evaluator } from '@nlpjs/evaluator'\n\timport { SpellCheck } from './spell-check'\n\timport { Handlebars } from './handlebars'\n\texport {\n\t  removeEmojis,\n\t  Evaluator,\n\t  SpellCheck,\n", "  Handlebars,\n\t};\n"]}
{"filename": "src/util/spell-check.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { SpellCheck as SpellCheckBase, SpellCheckSettings } from '@nlpjs/similarity';\n\tclass SpellCheck extends SpellCheckBase {\n\t  constructor(settings: SpellCheckSettings = {}) {\n\t    const features = Array.isArray(settings) ? settings : settings.features;\n\t    super({ features });\n\t  }\n\t}\n\texport { SpellCheck };\n"]}
{"filename": "src/nlg/nlg-manager.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport NlgManagerBase from '@nlpjs/nlg';\n\timport { Evaluator } from '@nlpjs/evaluator';\n\tclass NlgManager extends NlgManagerBase {\n\t  constructor(settings: any = {}, container?: any) {\n\t    super(settings, container);\n\t    this.container.register('Evaluator', Evaluator, true);\n\t  }\n\t  addAnswer(locale: string, intent: string, answer: any, opts?: any): void {\n", "    return this.add(locale, intent, answer, opts);\n\t  }\n\t  async findAnswer(locale: string, intent: string, context: any, settings?: any): Promise<{ response: any } | undefined> {\n\t    const answer = await this.find(locale, intent, context, settings);\n\t    if (!answer.answer) {\n\t      return undefined;\n\t    }\n\t    return {\n\t      response: answer.answer,\n\t    };\n", "  }\n\t  removeAnswer(locale: string, intent: string, answer: any, opts?: any): void {\n\t    return this.remove(locale, intent, answer, opts);\n\t  }\n\t  isValid(condition: string | undefined, context: any): boolean {\n\t    const evaluator = this.container.get('Evaluator');\n\t    if (evaluator) {\n\t      return (\n\t          !condition ||\n\t          condition === '' ||\n", "          evaluator.evaluate(condition, context) === true\n\t      );\n\t    }\n\t    return true;\n\t  }\n\t  findAllAnswers(locale?: string, intent?: string, context?: any): {answer: string, opts: string}[] | any {\n\t    if (typeof locale === 'string') {\n\t      const found = super.findAllAnswers(locale, intent, context);\n\t      const filtered = super.filterAnswers(found);\n\t      return filtered.answers.map((x: {answer: string, opts: string}) => ({\n", "        response: x.answer,\n\t        opts: x.opts,\n\t      }));\n\t    }\n\t    return super.findAllAnswers(locale);\n\t  }\n\t}\n\texport default NlgManager;\n"]}
{"filename": "src/nlg/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { ActionManager } from '@nlpjs/nlg'\n\timport NlgManager from './nlg-manager'\n\texport {\n\t  NlgManager,\n\t  ActionManager,\n\t};\n"]}
{"filename": "src/types/session.d.ts", "chunked_list": ["export type Session = {\n\t    message?: {\n\t        address?: {\n\t            conversation?: {\n\t                id: string;\n\t            };\n\t        };\n\t    };\n\t    _activity?: {\n\t        conversation?: {\n", "            id: string;\n\t        };\n\t    };\n\t}\n"]}
{"filename": "src/types/@nlpjs/nlg.d.ts", "chunked_list": ["declare module '@nlpjs/nlg' {\n\t    import { Clonable, Container } from '@nlpjs/core';\n\t    interface Answer {\n\t        response: string;\n\t        opts?: Record<string, any>;\n\t    }\n\t    interface FindAnswerOptions {\n\t        skipIfSameInput?: boolean;\n\t        ignoreCase?: boolean;\n\t        ignoreStopWords?: boolean;\n", "    }\n\t    interface NlgManagerSettings {\n\t        settingsPerLocale?: Record<string, NlgManagerSettings>;\n\t        useNearestLocale?: boolean;\n\t    }\n\t    interface NlgManagerAnswer {\n\t        answer: string;\n\t        score: number;\n\t        opts?: Record<string, any>;\n\t        context?: Record<string, any>;\n", "    }\n\t    class NlgManager {\n\t        constructor(settings?: NlgManagerSettings, container?: Container);\n\t        add(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n\t        addAnswer(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n\t        filterAnswers(srcInput: {answer: string, opts: string}[]): {answers: {answer: string, opts: string}[]};\n\t        find(locale: string, intent: string, context?: Record<string, any>, options?: FindAnswerOptions): Promise<NlgManagerAnswer>;\n\t        findAnswer(locale: string, intent: string, context?: Record<string, any>, options?: FindAnswerOptions): Promise<Answer | undefined>;\n\t        findAllAnswers(locale?: string, intent?: string, context?: Record<string, any>): Array<{answer: string, opts: string}>;\n\t        remove(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n", "        removeAnswer(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n\t        isValid(condition: string, context?: Record<string, any>): boolean;\n\t        container: Container;\n\t    }\n\t    interface ActionManagerSettings {\n\t        container?: Container;\n\t        tag?: string;\n\t    }\n\t    interface ActionBundle {\n\t        action: string;\n", "        parameters: any[];\n\t    }\n\t    interface ProcessedAnswer {\n\t        answer?: string | object;\n\t        actions?: ActionBundle[];\n\t    }\n\t    type ActionFunction = (input: ProcessedAnswer, ...parameters: any[]) => Promise<ProcessedAnswer>;\n\t    class ActionManager extends Clonable {\n\t        constructor(settings?: ActionManagerSettings, container?: Container);\n\t        actions: Record<string, ActionBundle[]>;\n", "        actionsMap: Record<string, ActionFunction>;\n\t        registerDefault(): void;\n\t        posAction(intent: string, action: string, parameters: any[]): number;\n\t        findActions(intent: string): { action: string; parameters: any[]; fn: ActionFunction }[];\n\t        processActions(intent: string, input: string | object): Promise<ProcessedAnswer>;\n\t        addAction(intent: string, action: string, parameters: any[], fn?: ActionFunction): void;\n\t        removeAction(intent: string, action: string, parameters: any[]): void;\n\t        removeActions(intent: string): void;\n\t        registerActionInMap(action: string, fn: ActionFunction): void;\n\t        removeActionFromMap(action: string): void;\n", "        run(srcInput: { intent: string; }, settings?: any): Promise<ProcessedAnswer>;\n\t        toJSON(): { settings: ActionManagerSettings; actions: Record<string, ActionBundle[]> };\n\t        fromJSON(json: { settings: ActionManagerSettings; actions: Record<string, ActionBundle[]> }): void;\n\t    }\n\t    export { ActionManagerSettings, ActionManager };\n\t    export default NlgManager;\n\t}\n"]}
{"filename": "src/types/@nlpjs/language.d.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\tdeclare module \"@nlpjs/language\" {\n\t    interface Scripts {\n\t        [key: string]: RegExp;\n\t        cmn: RegExp;\n\t        Latin: RegExp;\n\t        Cyrillic: RegExp;\n\t        Arabic: RegExp;\n\t        ben: RegExp;\n", "        Devanagari: RegExp;\n\t        jpn: RegExp;\n\t        kor: RegExp;\n\t        tel: RegExp;\n\t        tam: RegExp;\n\t        guj: RegExp;\n\t        kan: RegExp;\n\t        mal: RegExp;\n\t        Myanmar: RegExp;\n\t        ori: RegExp;\n", "        pan: RegExp;\n\t        Ethiopic: RegExp;\n\t        tha: RegExp;\n\t        sin: RegExp;\n\t        ell: RegExp;\n\t        khm: RegExp;\n\t        hye: RegExp;\n\t        sat: RegExp;\n\t        bod: RegExp;\n\t    }\n", "    interface Language {\n\t        readonly scripts: Scripts;\n\t        readonly languageData: Array<Array<string>>;\n\t        readonly data: { [key: string]: { [key: string]: string } };\n\t    }\n\t    const language: Language;\n\t    export = language;\n\t}\n"]}
{"filename": "src/types/@nlpjs/nlp.d.ts", "chunked_list": ["declare module '@nlpjs/nlp' {\n\t    export class Nlp {\n\t        constructor(settings: any)\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/xtables.d.ts", "chunked_list": ["declare module '@nlpjs/xtables' {\n\t    interface XDocTable {\n\t        name: string;\n\t        headers: string[];\n\t        data: Record<string, string>[];\n\t    }\n\t    export class XTableUtils {\n\t        static escapeCsv(value: string): string;\n\t        static escapeTsv(value: string): string;\n\t    }\n", "    export class XTable {\n\t        static CSV: string;\n\t        static TSV: string;\n\t        constructor();\n\t        load(data: string, type?: string): void;\n\t        save(type?: string): string;\n\t        getTable(name: string): XTable;\n\t        getRows(): Record<string, string>[];\n\t        addRow(row: Record<string, string>): void;\n\t        addRows(rows: Record<string, string>[]): void;\n", "        clearRows(): void;\n\t    }\n\t    export class XDoc {\n\t        tables: XDocTable[];\n\t        read(fileName: string): void;\n\t        getTable(name: string): XDocTable;\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/emoji.d.ts", "chunked_list": ["declare module '@nlpjs/emoji' {\n\t    function removeEmojis(str: string | null | undefined): string | null | undefined;\n\t    export { removeEmojis };\n\t}\n"]}
{"filename": "src/types/@nlpjs/similarity.d.ts", "chunked_list": ["declare module '@nlpjs/similarity' {\n\t    interface SimilarityResult {\n\t        distance: number;\n\t        text1: string;\n\t        text2: string;\n\t    }\n\t    interface Similarity {\n\t        getDistance(text1: string, text2: string): Promise<SimilarityResult>;\n\t    }\n\t    interface SpellCheckSettings {\n", "        features?: Similarity[];\n\t    }\n\t    class SpellCheck {\n\t        constructor(settings?: SpellCheckSettings);\n\t    }\n\t    export { SpellCheck, Similarity, SimilarityResult, SpellCheckSettings };\n\t}\n"]}
{"filename": "src/types/@nlpjs/neural.d.ts", "chunked_list": ["declare module '@nlpjs/neural' {\n\t    export interface NeuralNetworkOptions {\n\t        activation?: string;\n\t        iterations?: number;\n\t        errorThresh?: number;\n\t        log?: boolean;\n\t        logPeriod?: number;\n\t        learningRate?: number;\n\t        momentum?: number;\n\t        callbackPeriod?: number;\n", "        timeout?: number;\n\t        praxisOpts?: PraxisOptions;\n\t    }\n\t    export interface NeuralNetworkTrainData {\n\t        input: number[];\n\t        output: number[];\n\t    }\n\t    export interface NeuralNetwork {\n\t        initialize(): void;\n\t        train(\n", "            data: NeuralNetworkTrainData[],\n\t            options?: NeuralNetworkOptions,\n\t            cb?: () => void\n\t        ): Promise<TrainingResult>;\n\t        run(input: number[]): number[];\n\t        toFunction(): (input: number[]) => number[];\n\t    }\n\t    export interface TrainingResult {\n\t        error: number;\n\t        iterations: number;\n", "        time: number;\n\t    }\n\t    export interface PraxisOptions {\n\t        minError?: number;\n\t        maxIterations?: number;\n\t        resetOnStuck?: boolean;\n\t        praxis?: string;\n\t    }\n\t    export class MLP {\n\t        constructor(inputSize: number, outputSize: number, hiddenLayers: number[]);\n", "        initialize(): void;\n\t        train(\n\t            data: NeuralNetworkTrainData[],\n\t            options?: NeuralNetworkOptions,\n\t            cb?: () => void\n\t        ): Promise<TrainingResult>;\n\t        run(input: number[]): number[];\n\t        toFunction(): (input: number[]) => number[];\n\t    }\n\t    export class RNNTimeStep {\n", "        constructor(options: {\n\t            inputSize: number;\n\t            hiddenLayers: number[];\n\t            outputSize: number;\n\t        });\n\t        initialize(): void;\n\t        train(\n\t            data: NeuralNetworkTrainData[][],\n\t            options?: NeuralNetworkOptions,\n\t            cb?: () => void\n", "        ): Promise<TrainingResult>;\n\t        run(input: number[][]): number[][];\n\t        toFunction(): (input: number[][]) => number[][];\n\t    }\n\t    export class LSTMTimeStep {\n\t        constructor(options: {\n\t            inputSize: number;\n\t            outputSize: number;\n\t            memoryCells: number;\n\t        });\n", "        initialize(): void;\n\t        train(\n\t            data: NeuralNetworkTrainData[][],\n\t            options?: NeuralNetworkOptions,\n\t            cb?: () => void\n\t        ): Promise<TrainingResult>;\n\t        run(input: number[][]): number[][];\n\t        toFunction(): (input: number[][]) => number[][];\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/request.d.ts", "chunked_list": ["declare module '@nlpjs/request' {\n\t    export class fs {}\n\t}\n"]}
{"filename": "src/types/@nlpjs/core-loader.d.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\tdeclare module '@nlpjs/core-loader' {\n\t    import {\n\t        Among,\n\t        ArrToObj,\n\t        BaseStemmer,\n\t        Clonable,\n\t        Container,\n\t        defaultContainer,\n", "        Normalizer,\n\t        ObjToArr,\n\t        Stemmer,\n\t        Stopwords,\n\t        Tokenizer,\n\t        Timer,\n\t        logger,\n\t        MemoryStorage,\n\t        uuid,\n\t        Context,\n", "    } from '@nlpjs/core';\n\t    export const containerBootstrap: (\n\t        inputSettings?: string | Record<string, unknown>,\n\t        srcMustLoadEnv?: boolean,\n\t        container?: Container,\n\t        preffix?: string,\n\t        pipelines?: any[],\n\t        parent?: Container\n\t    ) => Container;\n\t    export function hasUnicode(str: string): boolean;\n", "    export function unicodeToArray(str: string): string[];\n\t    export function asciiToArray(str: string): string[];\n\t    export function stringToArray(str: string): string[];\n\t    export function compareWildcars(str: string, pattern: string): boolean;\n\t    export function listFiles(dir: string): Promise<string[]>;\n\t    export function loadEnv(env: string): void;\n\t    export function listFilesAbsolute(dir: string): Promise<string[]>;\n\t    export function getAbsolutePath(path: string): string;\n\t    export const dock: {\n\t        containers: { [name: string]: Container };\n", "        getContainer: (name?: string) => Container | undefined;\n\t        get(name: string): any;\n\t        createContainer(\n\t            name: string | object | undefined,\n\t            settings?: string | object | undefined,\n\t            srcMustLoadEnv?: boolean | undefined,\n\t            preffix?: string | undefined,\n\t            parent?: Container | undefined,\n\t            pipelines?: any\n\t        ): Promise<Container>;\n", "        buildChilds(container: Container): Promise<void>;\n\t        terraform(settings: string | object, mustLoadEnv?: boolean): Promise<Container>;\n\t        start(settings: string | object, mustLoadEnv?: boolean): Promise<Container>;\n\t    };\n\t    export {\n\t        Among,\n\t        ArrToObj,\n\t        BaseStemmer,\n\t        Clonable,\n\t        Container,\n", "        defaultContainer,\n\t        Normalizer,\n\t        ObjToArr,\n\t        Stemmer,\n\t        Stopwords,\n\t        Tokenizer,\n\t        Timer,\n\t        logger,\n\t        MemoryStorage,\n\t        uuid,\n", "        Context,\n\t    };\n\t}\n"]}
{"filename": "src/types/@nlpjs/core.d.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\tdeclare module '@nlpjs/core' {\n\t    export type Language = 'af' | 'ar' | 'hy' | 'bn' | 'bg' | 'ca' | 'zh' | 'hr' | 'cs' | 'da' | 'nl' | 'en' | 'eo' | 'et' | 'fi' | 'fr' | 'gl' | 'de' | 'el' | 'gu' | 'he' | 'hi' | 'hu' | 'is' | 'id' | 'ga' | 'it' | 'ja' | 'jv' | 'kn' | 'kk' | 'km' | 'ko' | 'ku' | 'ky' | 'lo' | 'la' | 'lv' | 'lt' | 'lb' | 'mk' | 'ms' | 'ml' | 'mr' | 'mn' | 'ne' | 'nb' | 'nn' | 'no' | 'oc' | 'or' | 'fa' | 'pl' | 'pt' | 'pa' | 'ro' | 'ru' | 'gd' | 'sr' | 'si' | 'sk' | 'sl' | 'es' | 'su' | 'sw' | 'sv' | 'tl' | 'ta' | 'tt' | 'te' | 'th' | 'tr' | 'tk' | 'uk' | 'ur' | 'ug' | 'uz' | 'vi' | 'cy' | 'xh' | 'yi' | 'yo' | 'zu';\n\t    export type Name = string;\n\t    export type Id = string;\n\t    export type Words = string[];\n\t    export type StemmerFunction = (word: string, lang?: Language) => string;\n\t    export interface TokenizerFunction {\n\t        (text: string, settings?: any): Promise<string[]>;\n", "    }\n\t    export interface ContainerOptions {\n\t        defaultLocale?: Language;\n\t        locales?: Language[];\n\t        nluByDomain?: boolean;\n\t        stemmerOverride?: { [lang: string]: StemmerFunction };\n\t        tokenizerOverride?: { [lang: string]: TokenizerFunction };\n\t    }\n\t    export interface Obj {\n\t        [key: string]: any;\n", "    }\n\t    export interface Stemmer {\n\t        stem: StemmerFunction;\n\t    }\n\t    export class BaseStemmer implements Stemmer {\n\t        stem(word: string, lang?: Language): string;\n\t    }\n\t    export class Among {\n\t        constructor(s: string, substring_i: number, result: string, method: number);\n\t    }\n", "    export function ArrToObj<T extends Obj>(arr: T[], keyField: keyof T): { [key: string]: T };\n\t    export class Clonable<T = any> {\n\t        constructor(settings?: any, container?: any);\n\t        readonly container: any;\n\t        readonly settings: T;\n\t        applySettings(target: any, source: any): void;\n\t        getPipeline(name: string): any[];\n\t        clone(): Clonable<T>;\n\t    }\n\t    export class Container {\n", "        constructor(options?: ContainerOptions);\n\t        register<T>(\n\t            id: string,\n\t            obj: T,\n\t            singleton?: boolean,\n\t            force?: boolean\n\t        ): void;\n\t        addStemmer(lang: Language, stemmer: StemmerFunction): void;\n\t        addTokenizer(lang: Language, tokenizer: TokenizerFunction): void;\n\t        addStopword(lang: Language, stopword: string): void;\n", "        getStemmer(lang?: Language): StemmerFunction | undefined;\n\t        getTokenizer(lang?: Language): TokenizerFunction | undefined;\n\t        getStopwords(lang?: Language): string[];\n\t        getDomain(locale: Language, utterance: string): string | undefined;\n\t        addNluDomain(domain: string, languages: Language[]): void;\n\t        addNluThreshold(domain: string, lang: Language, threshold: number): void;\n\t        addNluModel(domain: string, lang: Language, model: Obj): void;\n\t        processNlu(utterance: string, locale: Language): Promise<Obj>;\n\t        get(id: Id): any;\n\t        use<T>(item: T | { new(container: Container): T }, name?: string, isSingleton?: boolean, onlyIfNotExists?: boolean): string;\n", "        set(id: Id, value: any): void;\n\t        delete(id: Id): void;\n\t        has(id: Id): boolean;\n\t        stem(word: string, lang?: Language): string;\n\t        tokenize(str: string, lang?: Language): string[];\n\t        normalize(str: string, lang?: Language): string;\n\t        add(language: Language, name: Name, obj: any): void;\n\t        get(language: Language, name: Name, def?: any): any;\n\t        delete(language: Language, name: Name): void;\n\t        has(language: Language, name: Name): boolean;\n", "        getLanguages(): Language[];\n\t        getNames(lang: Language): Name[];\n\t        toJSON(): Obj;\n\t        fromJSON(obj: Obj): void;\n\t    }\n\t    export const defaultContainer: Container;\n\t    export function hasUnicode(str: string): boolean;\n\t    export function unicodeToArray(str: string): string[];\n\t    export function asciiToArray(str: string): string[];\n\t    export function stringToArray(str: string): string[];\n", "    export function compareWildcards(str: string, pattern: string): boolean;\n\t    export function loadEnv(env: string): void;\n\t    export function listFiles(dir: string): Promise<string[]>;\n\t    export function listFilesAbsolute(dir: string): Promise<string[]>;\n\t    export function getAbsolutePath(path: string): string;\n\t    export class Normalizer {\n\t        constructor(options?: any);\n\t        add(lang: Language, name: Name, obj: any): void;\n\t        get(lang: Language, name: Name, def?: any): any;\n\t        delete(lang: Language, name: Name): void;\n", "        has(lang: Language, name: Name): boolean;\n\t        normalize(str: string, lang?: Language): string;\n\t        toJSON(): Obj;\n\t        fromJSON(obj: Obj): void;\n\t    }\n\t    export function ObjToArr<T extends Obj>(obj: T): T[];\n\t    export class Stemmer extends BaseStemmer {\n\t        constructor(lang: Language, fn?: StemmerFunction);\n\t    }\n\t    export class Stopwords {\n", "        add(word: string, lang?: Language): void;\n\t        remove(word: string, lang?: Language): void;\n\t        exists(word: string, lang?: Language): boolean;\n\t        get(lang?: Language): string[];\n\t        toJSON(): Obj;\n\t        fromJSON(obj: Obj): void;\n\t    }\n\t    export class Tokenizer {\n\t        constructor(container?: Container, shouldNormalize?: boolean);\n\t        tokenize(str: string): string[];\n", "        addRule(rule: any): void;\n\t        addException(exception: string): void;\n\t        addChar(char: string): void;\n\t        addToken(token: string): void;\n\t        removeRule(rule: any): void;\n\t        removeException(exception: string): void;\n\t        removeChar(char: string): void;\n\t        removeToken(token: string): void;\n\t        normalize(str: string): string;\n\t        toJSON(): Obj;\n", "        fromJSON(obj: Obj): void;\n\t    }\n\t    export class Timer {\n\t        start(): void;\n\t        stop(): void;\n\t        getTime(): number;\n\t        static measure(fn: Function, label?: string): number;\n\t    }\n\t    export const logger: any;\n\t    export class MemoryStorage {\n", "        data: Obj;\n\t        constructor();\n\t        set(id: Id, value: any): void;\n\t        get(id: Id): any;\n\t        delete(id: Id): void;\n\t        has(id: Id): boolean;\n\t        keys(): string[];\n\t    }\n\t    export function uuid(): string;\n\t    export class Context {\n", "        constructor(obj?: Obj);\n\t        set(name: string, value: any): void;\n\t        get(name: string, def?: any): any;\n\t        has(name: string): boolean;\n\t        delete(name: string): void;\n\t        toJSON(): Obj;\n\t        fromJSON(obj: Obj): void;\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/builtin-duckling.d.ts", "chunked_list": ["declare module '@nlpjs/builtin-duckling' {\n\t    export class BuiltinDuckling {\n\t        constructor(settings: any)\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/evaluator.d.ts", "chunked_list": ["declare module '@nlpjs/evaluator' {\n\t    export class Evaluator {}\n\t    export class Template {}\n\t    export function compile(str: string): string\n\t}\n"]}
{"filename": "src/types/@nlpjs/builtin-microsoft.d.ts", "chunked_list": ["declare module '@nlpjs/builtin-microsoft' {\n\t    export class BuiltinMicrosoft {\n\t        constructor(settings: any)\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/sentiment.d.ts", "chunked_list": ["declare module '@nlpjs/sentiment' {\n\t    import { Container } from '@nlpjs/core'\n\t    export class SentimentAnalyzer {\n\t        protected container: Container\n\t        constructor(settings?: any, container?: Container)\n\t        protected process(input: any): Promise<{sentiment: any}>\n\t    }\n\t}\n"]}
{"filename": "src/types/@nlpjs/lang-all.d.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\tdeclare module \"@nlpjs/lang-all\" {\n\t    interface LangAll {\n\t        [key: string]: any;\n\t    }\n\t    const LangAll: LangAll;\n\t    export { LangAll };\n\t}\n"]}
{"filename": "src/types/@nlpjs/nlu.d.ts", "chunked_list": ["declare module '@nlpjs/nlu' {\n\t    import { EventEmitter } from 'events';\n\t    import { Container } from '@nlpjs/core';\n\t    export interface INluOptions {\n\t        container?: Container;\n\t        containerName?: string;\n\t        autoSave?: boolean;\n\t        autoLoad?: boolean;\n\t        persist?: boolean;\n\t        persistFilename?: string;\n", "        persistDir?: string;\n\t        persistInterval?: number;\n\t        persistStateFilename?: string;\n\t        persistStateDir?: string;\n\t        persistStateInterval?: number;\n\t        log?: boolean;\n\t        minSamplesPerIntent?: number;\n\t        trainByDomain?: boolean;\n\t        languages?: string[];\n\t        locale?: string;\n", "    }\n\t    export interface INluClassifyPayload {\n\t        utterance: string;\n\t        locale?: string;\n\t        language?: string;\n\t        domain?: string;\n\t        timezone?: string;\n\t        userId?: string;\n\t        sessionId?: string;\n\t        additional?: any;\n", "    }\n\t    export interface INluModel {\n\t        lang?: string;\n\t        lastUpdate?: string;\n\t        minSamplesPerIntent?: number;\n\t        trainByDomain?: boolean;\n\t        intentThresholds?: { [name: string]: number };\n\t        entitiesThresholds?: { [name: string]: number };\n\t        utterances?: { [locale: string]: { [intent: string]: string[] } };\n\t        domains?: { [name: string]: { [locale: string]: { [intent: string]: string[] } } };\n", "        entities?: {\n\t            [locale: string]: {\n\t                [name: string]: {\n\t                    type: string;\n\t                    values: { [value: string]: any };\n\t                };\n\t            };\n\t        };\n\t        regex?: { [name: string]: { [locale: string]: string } };\n\t        stems?: { [locale: string]: { [value: string]: string } };\n", "    }\n\t    export class Nlu extends EventEmitter {\n\t        constructor();\n\t        container: Container;\n\t        model?: INluModel;\n\t        containerName?: string;\n\t        locale: string;\n\t        languages: string[];\n\t        settings: INluOptions;\n\t        stopWords: Set<string>;\n", "        stemmers: {\n\t            [locale: string]: (str: string) => string;\n\t        };\n\t        classifiers: {\n\t            [locale: string]: {\n\t                [name: string]: any;\n\t            };\n\t        };\n\t        load(): Promise<void>;\n\t        process(payload: INluClassifyPayload): Promise<INluModel>;\n", "        train(): Promise<void>;\n\t        save(): Promise<void>;\n\t        export(): INluModel;\n\t    }\n\t    export interface NluNeuralSettings {\n\t        locale?: string;\n\t        log?: boolean;\n\t        useNoneFeature?: boolean;\n\t        noneValue?: number;\n\t        useNeural?: boolean;\n", "        stemming?: boolean;\n\t        useRegExpTokenize?: boolean;\n\t        useLemma?: boolean;\n\t        minScore?: number;\n\t        ner?: any;\n\t        skipStopWords?: boolean;\n\t        pipeline?: any;\n\t    }\n\t    export class NluNeural {\n\t        constructor(settings?: NluNeuralSettings);\n", "        settings: NluNeuralSettings;\n\t        train(corpus: any[], settings?: NluNeuralSettings): Promise<void>;\n\t        process(utterance: string, context?: any): Promise<{\n\t            classifications: Array<{\n\t                intent: string;\n\t                score: number;\n\t            }>;\n\t        }>;\n\t    }\n\t    export class NluNeuralManager {\n", "        constructor(settings?: NluNeuralSettings);\n\t        nlu: NluNeural;\n\t        container: any;\n\t    }\n\t    export function register(container: any, options?: NluNeuralSettings): void;\n\t}\n"]}
{"filename": "src/nlp/nlp-excel-reader.ts", "chunked_list": ["import { XDoc } from '@nlpjs/xtables';\n\timport NlpManager from './nlp-manager';\n\tclass NlpExcelReader {\n\t  private manager: NlpManager;\n\t  private xdoc: XDoc;\n\t  constructor(manager: NlpManager) {\n\t    this.manager = manager;\n\t    this.xdoc = new XDoc();\n\t  }\n\t  load(filename: string): void {\n", "    this.xdoc.read(filename);\n\t    this.loadSettings();\n\t    this.loadLanguages();\n\t    this.loadNamedEntities();\n\t    this.loadRegexEntities();\n\t    this.loadIntents();\n\t    this.loadResponses();\n\t  }\n\t  loadSettings(): void {}\n\t  loadLanguages(): void {\n", "    const rows: Record<string, string>[] = this.xdoc.getTable('Languages').data;\n\t    rows.forEach((row: Record<string, string>) => {\n\t      this.manager.addLanguage(row.iso2);\n\t    });\n\t  }\n\t  loadNamedEntities(): void {\n\t    const rows: Record<string, string>[] = this.xdoc.getTable('Named Entities').data;\n\t    rows.forEach((row: Record<string, string>) => {\n\t      const languages = row.language.split(',').map((x) => x.trim());\n\t      this.manager.addNamedEntityText(row.entity, row.option, languages, [row.text]);\n", "    });\n\t  }\n\t  loadRegexEntities(): void {\n\t    const table = this.xdoc.getTable('Regex Entities');\n\t    if (table) {\n\t      const rows: Record<string, string>[] = table.data;\n\t      rows.forEach((row: Record<string, string>) => {\n\t        const languages = row.language.split(',').map((x) => x.trim());\n\t        this.manager.addRegexEntity(row.entity, languages, row.regex);\n\t      });\n", "    }\n\t  }\n\t  loadIntents(): void {\n\t    const rows: Record<string, string>[] = this.xdoc.getTable('Intents').data;\n\t    rows.forEach((row: Record<string, string>) => {\n\t      this.manager.addDocument(row.language, row.utterance, row.intent);\n\t    });\n\t  }\n\t  loadResponses(): void {\n\t    const rows: Record<string, string>[] = this.xdoc.getTable('Responses').data;\n", "    rows.forEach((row: Record<string, string>) => {\n\t      this.manager.addAnswer(row.language, row.intent, row.response, row.condition);\n\t      // this.manager.addAnswer(row.language, row.intent, row.response, row.condition, row.url);\n\t    });\n\t  }\n\t}\n\texport default NlpExcelReader;\n"]}
{"filename": "src/nlp/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport NlpUtil from './nlp-util';\n\timport NlpManager from './nlp-manager';\n\timport NlpExcelReader from './nlp-excel-reader';\n\texport {\n\t    NlpUtil,\n\t    NlpManager,\n\t    NlpExcelReader\n\t}\n"]}
{"filename": "src/nlp/nlp-manager.ts", "chunked_list": ["import fs from 'fs';\n\timport { BuiltinMicrosoft } from '@nlpjs/builtin-microsoft';\n\timport { BuiltinDuckling } from '@nlpjs/builtin-duckling';\n\timport { containerBootstrap } from '@nlpjs/core-loader';\n\timport Language from '@nlpjs/language';\n\timport { LangAll } from '@nlpjs/lang-all';\n\timport { Nlp } from '@nlpjs/nlp';\n\timport { Evaluator, Template } from '@nlpjs/evaluator';\n\timport { fs as requestfs } from '@nlpjs/request';\n\timport { SentimentManager } from '../sentiment';\n", "import NlpExcelReader from './nlp-excel-reader';\n\texport interface NlpManagerSettings {\n\t  container?: any\n\t  languages?: string[]\n\t  nlu?: {\n\t    log?: boolean\n\t  }\n\t  ner?: {\n\t    useDuckling?: boolean\n\t    ducklingUrl?: string\n", "    locale?: string\n\t    threshold?: number\n\t  }\n\t  action?: {\n\t    [key: string]: (params: any, context: any, result: any) => Promise<void> | void\n\t  }\n\t  settings?: any\n\t  forceNER?: boolean\n\t  processTransformer?: (result: any) => any\n\t}\n", "class NlpManager {\n\t  private readonly settings: NlpManagerSettings;\n\t  private container: any;\n\t  private nlp: any;\n\t  private sentimentManager: SentimentManager;\n\t  constructor(settings: NlpManagerSettings) {\n\t    this.settings = settings;\n\t    if (!this.settings.container) {\n\t      this.settings.container = containerBootstrap();\n\t    }\n", "    this.container = this.settings.container;\n\t    this.container.registerConfiguration('ner', {\n\t      entityPreffix: '%',\n\t      entitySuffix: '%',\n\t    });\n\t    this.container.register('fs', requestfs);\n\t    this.container.register('Language', Language, false);\n\t    this.container.use(LangAll);\n\t    this.container.use(Evaluator);\n\t    this.container.use(Template);\n", "    this.nlp = new Nlp(this.settings);\n\t    this.sentimentManager = new SentimentManager();\n\t    if (this.settings.ner) {\n\t      if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {\n\t        const builtin = new BuiltinDuckling(this.settings.ner);\n\t        this.container.register('extract-builtin-??', builtin, true);\n\t      } else {\n\t        const builtin = new BuiltinMicrosoft(this.settings.ner);\n\t        this.container.register('extract-builtin-??', builtin, true);\n\t      }\n", "    } else {\n\t      const builtin = new BuiltinMicrosoft(this.settings.ner);\n\t      this.container.register('extract-builtin-??', builtin, true);\n\t    }\n\t  }\n\t  public addDocument(locale: string, utterance: string, intent: string) {\n\t    return this.nlp.addDocument(locale, utterance, intent);\n\t  }\n\t  public removeDocument(locale: string, utterance: string, intent: string) {\n\t    return this.nlp.removeDocument(locale, utterance, intent);\n", "  }\n\t  public addLanguage(locale: string) {\n\t    return this.nlp.addLanguage(locale);\n\t  }\n\t  public removeLanguage(locale: string) {\n\t    return this.nlp.removeLanguage(locale);\n\t  }\n\t  public assignDomain(locale: string, intent: string, domain: string) {\n\t    return this.nlp.assignDomain(locale, intent, domain);\n\t  }\n", "  public getIntentDomain(locale: string, intent: string): string {\n\t    return this.nlp.getIntentDomain(locale, intent);\n\t  }\n\t  public getDomains(): string[] {\n\t    return this.nlp.getDomains();\n\t  }\n\t  public guessLanguage(text: string): string {\n\t    return this.nlp.guessLanguage(text);\n\t  }\n\t  public addAction(\n", "      intent: string,\n\t      action: string,\n\t      parameters: string[],\n\t      fn?: (params: any, context: any, result: any) => Promise<void> | void\n\t  ) {\n\t    if (!fn) {\n\t      fn = this.settings.action ? this.settings.action[action] : undefined;\n\t    }\n\t    return this.nlp.addAction(intent, action, parameters, fn);\n\t  }\n", "  getActions(intent: string): string[] {\n\t    return this.nlp.getActions(intent);\n\t  }\n\t  removeAction(intent: string, action: string, parameters?: string[]): boolean {\n\t    return this.nlp.removeAction(intent, action, parameters);\n\t  }\n\t  removeActions(intent: string): boolean {\n\t    return this.nlp.removeActions(intent);\n\t  }\n\t  addAnswer(locale: string, intent: string, answer: string, opts?: any): string {\n", "    return this.nlp.addAnswer(locale, intent, answer, opts);\n\t  }\n\t  removeAnswer(locale: string, intent: string, answer: string, opts?: any): boolean {\n\t    return this.nlp.removeAnswer(locale, intent, answer, opts);\n\t  }\n\t  findAllAnswers(locale: string, intent: string): string[] {\n\t    return this.nlp.findAllAnswers(locale, intent);\n\t  }\n\t  async getSentiment(locale: string, utterance: string): Promise<{ numHits: number; score: number; comparative: number; language: string; numWords: number; type: string; vote: any }> {\n\t    const sentiment = await this.nlp.getSentiment(locale, utterance);\n", "    return this.sentimentManager.translate(sentiment.sentiment);\n\t  }\n\t  addNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): void {\n\t    return this.nlp.addNerRuleOptionTexts(languages, entityName, optionName, texts);\n\t  }\n\t  removeNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): void {\n\t    return this.nlp.removeNerRuleOptionTexts(languages, entityName, optionName, texts);\n\t  }\n\t  addRegexEntity(entityName: string, languages: string[], regex: string): void {\n\t    return this.nlp.addNerRegexRule(languages, entityName, regex);\n", "  }\n\t  addBetweenCondition(locale: string, name: string, left: string, right: string, opts?: any): void {\n\t    return this.nlp.addNerBetweenCondition(locale, name, left, right, opts);\n\t  }\n\t  addPositionCondition(locale: string, name: string, position: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerPositionCondition(locale, name, position, words, opts);\n\t  }\n\t  addAfterCondition(locale: string, name: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerAfterCondition(locale, name, words, opts);\n\t  }\n", "  addAfterFirstCondition(locale: string, name: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerAfterFirstCondition(locale, name, words, opts);\n\t  }\n\t  addAfterLastCondition(locale: string, name: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerAfterLastCondition(locale, name, words, opts);\n\t  }\n\t  addBeforeCondition(locale: string, name: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerBeforeCondition(locale, name, words, opts);\n\t  }\n\t  addBeforeFirstCondition(locale: string, name: string, words: string[], opts?: any): void {\n", "    return this.nlp.addNerBeforeFirstCondition(locale, name, words, opts);\n\t  }\n\t  addBeforeLastCondition(locale: string, name: string, words: string[], opts?: any): void {\n\t    return this.nlp.addNerBeforeLastCondition(locale, name, words, opts);\n\t  }\n\t  describeLanguage(locale: string, name: string): void {\n\t    return this.nlp.describeLanguage(locale, name);\n\t  }\n\t  beginEdit(): void {\n\t  }\n", "  async train(): Promise<void> {\n\t    return this.nlp.train();\n\t  }\n\t  classify(locale: string, utterance: string, settings?: Record<string, unknown>): Promise<any> {\n\t    return this.nlp.classify(locale, utterance, settings);\n\t  }\n\t  async process(locale?: string, utterance?: string, context?: Record<string, unknown>, settings?: Record<string, unknown>): Promise<any> {\n\t    const result = await this.nlp.process(locale, utterance, context, settings);\n\t    if (this.settings.processTransformer) {\n\t      return this.settings.processTransformer(result);\n", "    }\n\t    return result;\n\t  }\n\t  extractEntities(locale: string, utterance: string, context?: Record<string, unknown>, settings?: Record<string, unknown>): Promise<any> {\n\t    return this.nlp.extractEntities(locale, utterance, context, settings);\n\t  }\n\t  toObj(): any {\n\t    return this.nlp.toJSON();\n\t  }\n\t  fromObj(obj: any): any {\n", "    return this.nlp.fromJSON(obj);\n\t  }\n\t  /**\n\t   * Export NLP manager information as a string.\n\t   * @param {Boolean} minified If true, the returned JSON will have no spacing or indentation.\n\t   * @returns {String} NLP manager information as a JSON string.\n\t   */\n\t  export(minified = false): string {\n\t    const clone = this.toObj();\n\t    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n", "  }\n\t  /**\n\t   * Load NLP manager information from a string.\n\t   * @param {String|Object} data JSON string or object to load NLP manager information from.\n\t   */\n\t  import(data: string | Record<string, unknown>): void {\n\t    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n\t    this.fromObj(clone);\n\t  }\n\t  /**\n", "   * Save the NLP manager information into a file.\n\t   * @param {String} srcFileName Filename for saving the NLP manager.\n\t   * @param minified\n\t   */\n\t  save(srcFileName?: string, minified = false): void {\n\t    const fileName = srcFileName || 'model.nlp';\n\t    fs.writeFileSync(fileName, this.export(minified), 'utf8');\n\t  }\n\t  /**\n\t   * Load the NLP manager information from a file.\n", "   * @param srcFileName\n\t   */\n\t  load(srcFileName?: string): void {\n\t    const fileName = srcFileName || 'model.nlp';\n\t    const data = fs.readFileSync(fileName, 'utf8');\n\t    this.import(data);\n\t  }\n\t  /**\n\t   * Load the NLP manager information from an Excel file.\n\t   * @param fileName\n", "   */\n\t  loadExcel(fileName = 'model.xls'): void {\n\t    const reader = new NlpExcelReader(this);\n\t    reader.load(fileName);\n\t  }\n\t  async testCorpus(corpus: any): Promise<any> {\n\t    const { data } = corpus;\n\t    const result = {\n\t      total: 0,\n\t      good: 0,\n", "      bad: 0,\n\t    };\n\t    const promises = [];\n\t    const intents = [];\n\t    for (let i = 0; i < data.length; i += 1) {\n\t      const intentData = data[i];\n\t      const { tests } = intentData;\n\t      for (let j = 0; j < tests.length; j += 1) {\n\t        promises.push(this.process(corpus.locale.slice(0, 2), tests[j]));\n\t        intents.push(intentData.intent);\n", "      }\n\t    }\n\t    result.total += promises.length;\n\t    const results = await Promise.all(promises);\n\t    for (let i = 0; i < results.length; i += 1) {\n\t      const current = results[i];\n\t      if (current.intent === intents[i]) {\n\t        result.good += 1;\n\t      } else {\n\t        result.bad += 1;\n", "      }\n\t    }\n\t    return result\n\t  }\n\t  addCorpora(corpora: any): void {\n\t    this.nlp.addCorpora(corpora);\n\t  }\n\t  addCorpus(corpus: any): void {\n\t    this.nlp.addCorpus(corpus);\n\t  }\n", "  async trainAndEvaluate(fileName: string | object): Promise<any> {\n\t    let corpus = fileName;\n\t    if (typeof fileName === 'string') {\n\t      const nlpfs = this.container.get('fs');\n\t      const fileData = await nlpfs.readFile(fileName);\n\t      if (!fileData) {\n\t        throw new Error(`Corpus not found \"${fileName}\"`);\n\t      }\n\t      corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n\t    }\n", "    this.nlp.addCorpus(corpus);\n\t    await this.train();\n\t    return this.testCorpus(corpus);\n\t  }\n\t}\n\texport default NlpManager;\n"]}
{"filename": "src/nlp/nlp-util.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport {\n\t  BaseStemmer,\n\t  Tokenizer,\n\t  defaultContainer,\n\t  containerBootstrap,\n\t} from '@nlpjs/core-loader';\n\timport { LangAll } from '@nlpjs/lang-all';\n\tinterface Cultures {\n", "  [key: string]: string;\n\t}\n\tconst cultures: Cultures = {\n\t  ar: 'ar-ae', // Arabic\n\t  bn: 'bn-bd', // Bengali\n\t  ca: 'ca-es', // Catalan\n\t  cs: 'cs-cz', // Czech\n\t  da: 'da-dk', // Danish\n\t  el: 'el-gr', // Greek\n\t  en: 'en-us', // English\n", "  eu: 'eu-es', // Basque\n\t  fa: 'fa-ir', // Farsi\n\t  ga: 'ga-ie', // Irish\n\t  gl: 'gl-es', // Galician\n\t  hi: 'hi-in', // Hindi\n\t  hy: 'hy-am', // Armenian\n\t  ja: 'ja-jp', // Japanese\n\t  ko: 'ko-kr', // Korean\n\t  pl: 'pl-pl', // Polish\n\t  lt: 'lt-lt', // Lithuanian\n", "  ne: 'ne-ne', // Nepali\n\t  pt: 'pt-br', // Portuguese\n\t  sr: 'sr-rs', // Serbian\n\t  sv: 'sv-se', // Swedish\n\t  ta: 'ta-in', // Tamil\n\t  tl: 'tl-ph', // Tagalog\n\t  uk: 'uk-ua', // Ukraine\n\t  zh: 'zh-cn', // Chinese\n\t  id: 'id-id', // Indonesian,\n\t  ms: 'id-id', // Malay\n", "};\n\tclass NlpUtil {\n\t  static tokenizers = {};\n\t  static useAutoStemmer = true;\n\t  static autoStemmers = {};\n\t  static useAlternative = {};\n\t  static useNoneFeature = {\n\t    bn: false,\n\t    el: true,\n\t    en: true,\n", "    hi: false,\n\t    fa: false,\n\t    fr: true,\n\t    ru: true,\n\t    es: true,\n\t    gl: true,\n\t    it: true,\n\t    nl: true,\n\t    no: true,\n\t    pt: true,\n", "    pl: true,\n\t    sv: true,\n\t    tl: true,\n\t    id: true,\n\t    ja: false,\n\t    ar: false,\n\t    hy: false,\n\t    eu: true,\n\t    ca: true,\n\t    cs: true,\n", "    da: true,\n\t    fi: true,\n\t    de: true,\n\t    hu: true,\n\t    ga: true,\n\t    ro: true,\n\t    sl: true,\n\t    ta: false,\n\t    th: false,\n\t    tr: true,\n", "    zh: false,\n\t  };\n\t  /**\n\t   * Given a locale, get the 2 character one.\n\t   * @param {String} locale Locale of the language.\n\t   * @returns {String} Locale in 2 character length.\n\t   */\n\t  static getTruncatedLocale(locale: string): string | undefined {\n\t    return locale ? locale.substring(0, 2).toLowerCase() : undefined;\n\t  }\n", "  static getStemmer(locale: string): BaseStemmer {\n\t    if (!locale) {\n\t      return new BaseStemmer();\n\t    }\n\t    const name = `Stemmer${locale.slice(0, 1).toUpperCase()}${locale.slice(1)}`;\n\t    const Stemmer = LangAll[name];\n\t    return Stemmer ? new Stemmer() : new BaseStemmer();\n\t  }\n\t  static getTokenizer(locale: string): Tokenizer {\n\t    if (!locale) {\n", "      return new Tokenizer();\n\t    }\n\t    const name = `Tokenizer${locale.slice(0, 1).toUpperCase()}${locale.slice(\n\t        1\n\t    )}`;\n\t    const TokenizerClass = LangAll[name];\n\t    return TokenizerClass\n\t        ? new TokenizerClass(undefined, true)\n\t        : new Tokenizer(undefined, true);\n\t  }\n", "  static getCulture(locale: string): string {\n\t    if (!locale) {\n\t      return 'en-us';\n\t    }\n\t    return cultures[locale] || `${locale}-${locale}`;\n\t  }\n\t}\n\tcontainerBootstrap({}, true, defaultContainer);\n\tdefaultContainer.use(LangAll.LangAll);\n\texport default NlpUtil;\n"]}
{"filename": "src/xtables/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { XTableUtils, XTable, XDoc } from '@nlpjs/xtables';\n\texport {\n\t  XTableUtils,\n\t  XTable,\n\t  XDoc,\n\t};\n"]}
{"filename": "src/sentiment/sentiment-analyzer.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { SentimentAnalyzer as SentimentAnalyzerBase } from '@nlpjs/sentiment';\n\timport { LangAll } from '@nlpjs/lang-all';\n\timport { Nlu } from '@nlpjs/nlu';\n\timport { Container } from '@nlpjs/core'\n\tclass SentimentAnalyzer extends SentimentAnalyzerBase {\n\t  constructor(settings = {}, container?: Container) {\n\t    super(settings, container);\n\t    this.container.use(LangAll);\n", "    this.container.use(Nlu);\n\t  }\n\t  async getSentiment(utterance: string, locale = 'en', settings: [key: string]) {\n\t    const input = {\n\t      utterance,\n\t      locale,\n\t      ...settings,\n\t    };\n\t    const result = await this.process(input);\n\t    return result.sentiment;\n", "  }\n\t}\n\texport default SentimentAnalyzer;\n"]}
{"filename": "src/sentiment/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport SentimentAnalyzer from './sentiment-analyzer'\n\timport SentimentManager from './sentiment-manager'\n\texport {\n\t  SentimentAnalyzer,\n\t  SentimentManager\n\t}\n"]}
{"filename": "src/sentiment/sentiment-manager.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport SentimentAnalyzer from './sentiment-analyzer';\n\t/**\n\t * Class for the sentiment analysis manager, able to manage\n\t * several languages at the same time.\n\t */\n\tclass SentimentManager {\n\t  private readonly settings: any\n\t  private languages: {}\n", "  private analyzer: SentimentAnalyzer\n\t  /**\n\t   * Constructor of the class.\n\t   */\n\t  constructor(settings?: any) {\n\t    this.settings = settings || {};\n\t    this.languages = {};\n\t    this.analyzer = new SentimentAnalyzer();\n\t  }\n\t  addLanguage() {\n", "    // do nothing\n\t  }\n\t  translate(sentiment: {score: number, average: number, type: string, numHits: number, numWords: number, locale: string}) {\n\t    let vote;\n\t    if (sentiment.score > 0) {\n\t      vote = 'positive';\n\t    } else if (sentiment.score < 0) {\n\t      vote = 'negative';\n\t    } else {\n\t      vote = 'neutral';\n", "    }\n\t    return {\n\t      score: sentiment.score,\n\t      comparative: sentiment.average,\n\t      vote,\n\t      numWords: sentiment.numWords,\n\t      numHits: sentiment.numHits,\n\t      type: sentiment.type,\n\t      language: sentiment.locale,\n\t    };\n", "  }\n\t  /**\n\t   * Process a phrase of a given locale, calculating the sentiment analysis.\n\t   * @param {String} locale Locale of the phrase.\n\t   * @param {String} phrase Phrase to calculate the sentiment.\n\t   * @returns {Promise Object} Promise sentiment analysis of the phrase.\n\t   */\n\t  async process(locale: string, phrase: string) {\n\t    const sentiment = await this.analyzer.getSentiment(\n\t      phrase,\n", "      locale,\n\t      this.settings\n\t    );\n\t    return this.translate(sentiment);\n\t  }\n\t}\n\texport default SentimentManager\n"]}
{"filename": "src/classifiers/index.ts", "chunked_list": ["/*\n\t * Copyright (c) AXA Group Operations Spain S.A.\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining\n\t * a copy of this software and associated documentation files (the\n\t * \"Software\"), to deal in the Software without restriction, including\n\t * without limitation the rights to use, copy, modify, merge, publish,\n\t * distribute, sublicense, and/or sell copies of the Software, and to\n\t * permit persons to whom the Software is furnished to do so, subject to\n\t * the following conditions:\n", " *\n\t * The above copyright notice and this permission notice shall be\n\t * included in all copies or substantial portions of the Software.\n\t *\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n", " * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t */\n\timport { NeuralNetwork } from '@nlpjs/neural'\n\texport {\n\t  NeuralNetwork,\n\t};\n"]}
