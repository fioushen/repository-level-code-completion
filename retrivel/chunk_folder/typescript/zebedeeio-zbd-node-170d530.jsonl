{"filename": "jest.config.ts", "chunked_list": ["module.exports = {\n\t    preset: 'ts-jest', \n\t    testEnvironment: 'node', \n\t    coveragePathIgnorePatterns: ['/node_modules/']\n\t  };"]}
{"filename": "__tests__/get-btcusd.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\n\timport { zbd } from '../src/zbd'; \n\tconst ZBD = new zbd(TEST_API_KEY); \n\tdescribe('getBTCUSD', () => {\n\t  it('should fetch BTC to USD exchange rate data successfully', async () => {\n\t    const response = await ZBD.getBtcUsdExchangeRate();\n\t    expect(response).toBeDefined();\n\t    expect(response.success).toBe(true);\n\t    expect(response.data).toHaveProperty('btcUsdPrice');\n\t    expect(response.data).toHaveProperty('btcUsdTimestamp');\n", "    expect(response.message).toBe('Successfully retrieved BTC USD price ticker information.');\n\t  });\n\t});\n"]}
{"filename": "__tests__/create-charge.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\n\timport { zbd } from '../src/zbd'; \n\tconst ZBD = new zbd(TEST_API_KEY); \n\tdescribe('createCharge', () => {\n\t  it('should create a charge successfully', async () => {\n\t    const chargeData = {\n\t      amount: '10000',\n\t      expiresIn: 300,\n\t      description: 'My Charge Description',\n\t      callbackUrl: 'https://your-website.com/callback',\n", "      internalId: '11af01d092444a317cb33faa6b8304b8',\n\t    };\n\t    const response = await ZBD.createCharge(chargeData);\n\t    expect(response).toBeDefined();\n\t    expect(response.success).toBe(true);\n\t    expect(response.message).toBe('Charge created.');\n\t    const { data } = response;\n\t    expect(data.unit).toBe('msats');\n\t    expect(data.amount).toBe(chargeData.amount);\n\t    expect(data.description).toBe(chargeData.description);\n", "    expect(data.internalId).toBe(chargeData.internalId);\n\t    expect(data.callbackUrl).toBe(chargeData.callbackUrl);\n\t    expect(data).toHaveProperty('status');\n\t    expect(data).toHaveProperty('createdAt');\n\t    expect(data).toHaveProperty('expiresAt');\n\t    expect(data).toHaveProperty('id');\n\t    expect(data).toHaveProperty('invoice');\n\t  });\n\t});\n"]}
{"filename": "__tests__/get-wallet.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\n\timport { zbd } from '../src/zbd'; \n\tconst ZBD = new zbd(TEST_API_KEY); \n\tdescribe('getWallet', () => {\n\t  it('should fetch wallet data successfully', async () => {\n\t    const response = await ZBD.getWallet();\n\t    expect(response).toBeDefined();\n\t    expect(response.data).toHaveProperty('unit');\n\t    expect(response.data).toHaveProperty('balance');\n\t    expect(response.message).toBe('Successfully retrieved Wallet.');\n", "  });\n\t});\n"]}
{"filename": "__tests__/get-payment.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\n\timport { zbd } from '../src/zbd'; \n\tconst ZBD = new zbd(TEST_API_KEY); \n\tdescribe('getPayment', () => {\n\t  // it('should fetch payment transaction details successfully', async () => {\n\t  //   const paymentId = ''; // provide valid paymentId\n\t  //   const data = await ZBD.getPayment(paymentId);\n\t  //   console.log(data)\n\t  //   expect(data).toBeDefined();\n\t  //   expect(data.paymentId).toBe(paymentId); \n", "  // });\n\t  it('should return an error when an invalid payment ID is provided', async () => {\n\t    const invalidPaymentId = 'invalid-id';\n\t    try {\n\t      await ZBD.getPayment(invalidPaymentId);\n\t    } catch (error) {\n\t        if (error instanceof Error) { \n\t          console.log(error)\n\t          expect(error.message).toBe('No Payment records found with this ID.')\n\t        }\n", "    }\n\t  });\n\t});"]}
{"filename": "src/constants.ts", "chunked_list": ["// BaseUrl\n\texport const API_URL = 'https://api.zebedee.io';\n\t// Test API Key\n\texport const TEST_API_KEY  = \"8qJxln3JVJsQM0IOJhfnJopO0JSiLdlK\"\n\t// Endpoints\n\texport const API = {\n\t  // Wallet\n\t  WALLET_ENDPOINT: '/v0/wallet',\n\t  // Charges (Pay Ins)\n\t  CHARGES_ENDPOINT: '/v0/charges',\n", "  STATIC_CHARGES_ENDPOINT: '/v0/static-charges',\n\t  // Payments (Pay Outs)\n\t  PAYMENTS_ENDPOINT: '/v0/payments',\n\t  // Lightning Address\n\t  SEND_LN_ADDRESS_PAYMENT_ENDPOINT: '/v0/ln-address/send-payment',\n\t  VALIDATE_LN_ADDRESS_ENDPOINT: '/v0/ln-address/validate',\n\t  CREATE_CHARGE_FROM_LN_ADDRESS_ENDPOINT: '/v0/ln-address/fetch-charge',\n\t  // ZBD Gamertags\n\t  SEND_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/send-payment',\n\t  GET_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/transaction',\n", "  GET_USERID_FROM_GAMERTAG_ENDPOINT: '/v0/user-id/gamertag',\n\t  GET_GAMERTAG_FROM_USERID_ENDPOINT: '/v0/gamertag/user-id',\n\t  CREATE_CHARGE_FROM_GAMERTAG_ENDPOINT: '/v0/gamertag/charges',\n\t  // Withdrawal Requests\n\t  WITHDRAWAL_REQUESTS_ENDPOINT: '/v0/withdrawal-requests',\n\t  // Keysend\n\t  KEYSEND_PAYMENT_ENDPOINT: '/v0/keysend-payment',\n\t  // Internal Transfers\n\t  INTERNAL_TRANSFER_ENDPOINT: '/v0/internal-transfer',\n\t  // Utilities\n", "  IS_SUPPORTED_REGION_ENDPOINT: '/v0/is-supported-region',\n\t  DECODE_INVOICE_ENDPOINT: '/v0/decode-invoice',\n\t  FETCH_ZBD_PROD_IPS_ENDPOINT: '/v0/prod-ips',\n\t  BTCUSD_PRICE_TICKER_ENDPOINT: '/v0/btcusd',\n\t}    \n"]}
{"filename": "src/utils.ts", "chunked_list": ["export const cleanup = (obj: any) => {\n\t  const newObj = {};\n\t  for (const [key, value] of Object.entries(obj)) {\n\t    if (value !== null && value !== undefined) {\n\t      // @ts-ignore\n\t      newObj[key] = value;\n\t    }\n\t  }\n\t  return newObj;\n\t}\n", "export async function postData({\n\t  url,\n\t  body,\n\t  headers,\n\t}: {\n\t  url: string;\n\t  body: any;\n\t  headers?: any;\n\t}) {\n\t  const response = await fetch(url, {\n", "    method: \"POST\",\n\t    headers: {\n\t      'Content-Type': 'application/json',\n\t      ...headers,\n\t    },\n\t    body: JSON.stringify(cleanup(body)),\n\t  });\n\t  if (!response.ok) {\n\t    const errorBody = await response.json();\n\t    const error = {\n", "      status: response.status,\n\t      message: errorBody.message || 'API request failed',\n\t    };\n\t    throw error;\n\t  }\n\t  const result = await response.json();\n\t  return result;\n\t}\n\texport async function patchData({\n\t  url,\n", "  body,\n\t  headers,\n\t}: {\n\t  url: string;\n\t  body: any;\n\t  headers?: any;\n\t}) {\n\t  const response = await fetch(url, {\n\t    method: \"PATCH\",\n\t    headers: {\n", "      'Content-Type': 'application/json',\n\t      ...headers,\n\t    },\n\t    body: JSON.stringify(cleanup(body)),\n\t  });\n\t  if (!response.ok) {\n\t    const errorBody = await response.json();\n\t    const error = {\n\t      status: response.status,\n\t      message: errorBody.message || 'API request failed',\n", "    };\n\t    throw error;\n\t  }\n\t  const result = await response.json();\n\t  return result;\n\t}\n\texport async function getData({\n\t  url,\n\t  headers,\n\t}: {\n", "  url: string;\n\t  headers?: any;\n\t}) {\n\t  const response = await fetch(url, {\n\t    method: \"GET\",\n\t    headers: {\n\t      'Content-Type': 'application/json',\n\t      ...headers,\n\t    },\n\t  });\n", "  if (!response.ok) {\n\t    const errorBody = await response.json();\n\t    const error = {\n\t      status: response.status,\n\t      message: errorBody.message || 'API request failed',\n\t    };\n\t    throw error;\n\t  }\n\t  const result = await response.json();\n\t  return result;\n", "}"]}
{"filename": "src/index.ts", "chunked_list": ["export { zbd } from './zbd';"]}
{"filename": "src/zbd.ts", "chunked_list": ["import { API_URL, API } from './constants';\n\timport { postData, getData, patchData } from './utils';\n\timport {\n\t  ChargeOptionsType,\n\t  KeysendOptionsType,\n\t  ChargeDataResponseType,\n\t  WalletDataResponseType,\n\t  BTCUSDDataResponseType,\n\t  SendPaymentOptionsType,\n\t  DecodeChargeOptionsType,\n", "  DecodeChargeResponseType,\n\t  ProdIPSDataResponseType,\n\t  StaticChargeOptionsType,\n\t  KeysendDataResponseType,\n\t  InternalTransferOptionsType,\n\t  StaticChargeDataResponseType,\n\t  WithdrawalRequestOptionsType,\n\t  SendGamertagPaymentOptionsType,\n\t  InvoicePaymentDataResponseType,\n\t  SupportedRegionDataResponseType,\n", "  InternalTransferDataResponseType,\n\t  GetWithdrawalRequestDataResponseType,\n\t  CreateWithdrawalRequestDataResponseType,\n\t  FetchChargeFromGamertagOptionsType,\n\t  GamertagTransactionDataResponseType,\n\t  FetchUserIdByGamertagDataResponseType,\n\t  FetchGamertagByUserIdDataResponseType,\n\t  SendLightningAddressPaymentOptionsType,\n\t  FetchChargeFromGamertagDataResponseType,\n\t  ValidateLightningAddressDataResponseType,\n", "  SendLightningAddressPaymentDataResponseType,\n\t  CreateChargeFromLightningAddressOptionsType,\n\t  SendGamertagPaymentDataResponseType,\n\t  FetchChargeFromLightningAddressDataResponseType,\n\t} from './types/index';\n\tclass zbd {\n\t  apiBaseUrl: string;\n\t  apiCoreHeaders: {apikey: string };  \n\t  constructor(apiKey: string) {\n\t    this.apiBaseUrl = API_URL;\n", "    this.apiCoreHeaders = { apikey: apiKey };\n\t  }\n\t  async createCharge(options: ChargeOptionsType) {\n\t    const {\n\t      amount,\n\t      expiresIn,\n\t      internalId,\n\t      description,\n\t      callbackUrl,\n\t    } = options;\n", "    const response : ChargeDataResponseType = await postData({\n\t      url: `${API_URL}${API.CHARGES_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        amount,\n\t        expiresIn,\n\t        internalId,\n\t        description,\n\t        callbackUrl,\n\t      },\n", "    });\n\t    return response;\n\t  }\n\t  async getCharge(chargeId: string) {\n\t    const response: ChargeDataResponseType = await getData({\n\t      url: `${API_URL}${API.CHARGES_ENDPOINT}/${chargeId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n", "  async decodeCharge(options: DecodeChargeOptionsType) {\n\t    const { invoice } = options;\n\t    const response: DecodeChargeResponseType = await postData({\n\t      url: `${API_URL}${API.DECODE_INVOICE_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: { invoice },\n\t    });\n\t    return response;\n\t  }\n\t  async createWithdrawalRequest(options: WithdrawalRequestOptionsType) {    \n", "    const {\n\t      amount,\n\t      expiresIn,\n\t      internalId,\n\t      callbackUrl,\n\t      description,\n\t    } = options;\n\t    const response : CreateWithdrawalRequestDataResponseType = await postData({\n\t      url: `${API_URL}${API.WITHDRAWAL_REQUESTS_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n", "      body: {\n\t        amount,\n\t        expiresIn,\n\t        internalId,\n\t        callbackUrl,\n\t        description,\n\t      },\n\t    });\n\t    return response;\n\t  }\n", "  async getWithdrawalRequest(withdrawalRequestId: string) {\n\t    const response : GetWithdrawalRequestDataResponseType = await getData({\n\t      url: `${API_URL}${API.WITHDRAWAL_REQUESTS_ENDPOINT}/${withdrawalRequestId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async validateLightningAddress(lightningAddress: string) {    \n\t    const response : ValidateLightningAddressDataResponseType = await getData({\n\t      url: `${API_URL}${API.VALIDATE_LN_ADDRESS_ENDPOINT}/${lightningAddress}`,\n", "      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async sendLightningAddressPayment(options: SendLightningAddressPaymentOptionsType) {    \n\t    const {\n\t      amount,\n\t      comment,\n\t      lnAddress,\n\t      internalId,\n", "      callbackUrl,\n\t    } = options;\n\t    const response : SendLightningAddressPaymentDataResponseType = await postData({\n\t      url: `${API_URL}${API.SEND_LN_ADDRESS_PAYMENT_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        amount,\n\t        comment,\n\t        lnAddress,\n\t        internalId,\n", "        callbackUrl,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async createChargeFromLightningAddress(options: CreateChargeFromLightningAddressOptionsType) {    \n\t    const {\n\t      amount,\n\t      lnaddress,\n\t      lnAddress,\n", "      description,\n\t    } = options;\n\t    // Addressing issue on ZBD API where it accepts `lnaddress` property\n\t    // instead of `lnAddress` property as is standardized\n\t    let lightningAddress = lnaddress || lnAddress;\n\t    const response: FetchChargeFromLightningAddressDataResponseType = await postData({\n\t      url: `${API_URL}${API.CREATE_CHARGE_FROM_LN_ADDRESS_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        amount,\n", "        description,\n\t        lnaddress: lightningAddress,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async getWallet() {\n\t    const response : WalletDataResponseType = await getData({\n\t      url: `${API_URL}${API.WALLET_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n", "    });\n\t    return response;\n\t  }\n\t  async isSupportedRegion(ipAddress: string) {    \n\t    const response : SupportedRegionDataResponseType = await getData({\n\t      url: `${API_URL}${API.IS_SUPPORTED_REGION_ENDPOINT}/${ipAddress}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n", "  async getZBDProdIps() {    \n\t    const response: ProdIPSDataResponseType = await getData({\n\t      url: `${API_URL}${API.FETCH_ZBD_PROD_IPS_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async getBtcUsdExchangeRate() {    \n\t    const response: BTCUSDDataResponseType = await getData({\n\t      url: `${API_URL}${API.BTCUSD_PRICE_TICKER_ENDPOINT}`,\n", "      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async internalTransfer(options: InternalTransferOptionsType) {    \n\t    const { amount, receiverWalletId } = options;\n\t    const response: InternalTransferDataResponseType = await postData({\n\t      url: `${API_URL}${API.INTERNAL_TRANSFER_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n", "        amount,\n\t        receiverWalletId,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async sendKeysendPayment(options: KeysendOptionsType) {    \n\t    const {\n\t      amount,\n\t      pubkey,\n", "      metadata,\n\t      tlvRecords,\n\t      callbackUrl,\n\t    } = options;\n\t    const response: KeysendDataResponseType = await postData({\n\t      url: `${API_URL}${API.KEYSEND_PAYMENT_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        amount,\n\t        pubkey,\n", "        metadata,\n\t        tlvRecords,\n\t        callbackUrl,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async sendPayment(options: SendPaymentOptionsType) {    \n\t    const {\n\t      amount,\n", "      invoice,\n\t      internalId,\n\t      description,\n\t      callbackUrl,\n\t    } = options;\n\t    const response : InvoicePaymentDataResponseType = await postData({\n\t      url: `${API_URL}${API.PAYMENTS_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        amount,\n", "        invoice,\n\t        internalId,\n\t        description,\n\t        callbackUrl,\n\t      },\n\t    });\n\t    return response; \n\t  }\n\t  async getPayment(paymentId: string) {    \n\t    const response = await getData({\n", "      url: `${API_URL}${API.PAYMENTS_ENDPOINT}/${paymentId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async sendGamertagPayment(options: SendGamertagPaymentOptionsType) {    \n\t    const { amount, gamertag, description } = options;\n\t    const response: SendGamertagPaymentDataResponseType = await postData({\n\t      url: `${API_URL}${API.SEND_GAMERTAG_PAYMENT_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n", "      body: {\n\t        amount,\n\t        gamertag,\n\t        description,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async getGamertagTransaction(transactionId: string) {    \n\t    const response: GamertagTransactionDataResponseType = await getData({\n", "      url: `${API_URL}${API.GET_GAMERTAG_PAYMENT_ENDPOINT}/${transactionId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t  async getUserIdByGamertag(gamertag: string) {    \n\t    const response: FetchUserIdByGamertagDataResponseType = await getData({\n\t      url: `${API_URL}${API.GET_USERID_FROM_GAMERTAG_ENDPOINT}/${gamertag}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n", "    return response;\n\t  }\n\t  async getGamertagByUserId(userId: string) {    \n\t    const response: FetchGamertagByUserIdDataResponseType = await getData({\n\t      url: `${API_URL}${API.GET_GAMERTAG_FROM_USERID_ENDPOINT}/${userId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n\t   async createGamertagCharge(options: FetchChargeFromGamertagOptionsType) {    \n", "    const {\n\t      amount,\n\t      gamertag,\n\t      internalId,\n\t      description,\n\t      callbackUrl,\n\t    } = options;\n\t    const response : FetchChargeFromGamertagDataResponseType = await postData({\n\t      url: `${API_URL}${API.CREATE_CHARGE_FROM_GAMERTAG_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n", "      body: {\n\t        amount,\n\t        gamertag,\n\t        internalId,\n\t        description,\n\t        callbackUrl,\n\t      },\n\t    });\n\t    return response;\n\t  }\n", "  async createStaticCharge(options: StaticChargeOptionsType) {    \n\t    const {\n\t      minAmount,\n\t      maxAmount,\n\t      internalId,\n\t      description,\n\t      callbackUrl,\n\t      allowedSlots,\n\t      successMessage,\n\t    } = options;\n", "    const response : StaticChargeDataResponseType = await postData({\n\t      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: {\n\t        minAmount,\n\t        maxAmount,\n\t        internalId,\n\t        callbackUrl,\n\t        description,\n\t        allowedSlots,\n", "        successMessage,\n\t      },\n\t    });\n\t    return response;\n\t  }\n\t  async updateStaticCharge(staticChargeId: string, updates: StaticChargeOptionsType) {    \n\t    const response = await patchData({\n\t      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}/${staticChargeId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t      body: updates,\n", "    });\n\t    return response;\n\t  }\n\t  async getStaticCharge(staticChargeId: string) {    \n\t    const response = await getData({\n\t      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}/${staticChargeId}`,\n\t      headers: { ...this.apiCoreHeaders },\n\t    });\n\t    return response;\n\t  }\n", "}\n\texport { zbd };\n"]}
{"filename": "src/types/wallet.ts", "chunked_list": ["export interface WalletDataResponseType {\n\t  data: {\n\t    balance: string;\n\t    unit: string;\n\t  }\n\t  message: string;\n\t}\n"]}
{"filename": "src/types/keysend.ts", "chunked_list": ["export interface KeysendDataResponseType {\n\t  data: {\n\t    keysendId: string;\n\t    paymentId: string;\n\t    transaction: {\n\t      id: string;\n\t      walletId: string;\n\t      type: string;\n\t      totalAmount: string;\n\t      fee: string;\n", "      amount: string;\n\t      description: string;\n\t      status: string;\n\t      confirmedAt: string;\n\t    }\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n\texport interface KeysendOptionsType {\n", "  amount: string;\n\t  pubkey: string;\n\t  tlvRecords: string;\n\t  metadata: string;\n\t  callbackUrl: string;\n\t}"]}
{"filename": "src/types/payments.ts", "chunked_list": ["export interface InvoicePaymentDataResponseType {\n\t  data: {\n\t    id: string;\n\t    fee: string;\n\t    unit: string;\n\t    amount: string;\n\t    invoice: string;\n\t    preimage: string;\n\t    internalId: string;\n\t    processedAt: string;\n", "    confirmedAt: string;\n\t    description: string;\n\t    status: string;\n\t  }\n\t  success: boolean;\n\t  message: string;\n\t}\n\texport interface SendPaymentOptionsType {\n\t  description: string;\n\t  internalId: string;\n", "  invoice: string;\n\t  callbackUrl: string;\n\t  amount: string;\n\t}\n"]}
{"filename": "src/types/static-charges.ts", "chunked_list": ["export interface StaticChargeOptionsType {\n\t  allowedSlots: string | null;\n\t  minAmount: string;\n\t  maxAmount: string;\n\t  description: string;\n\t  internalId: string;\n\t  callbackUrl: string;\n\t  successMessage: string;\n\t}\n\texport interface StaticChargeDataResponseType {\n", "  data: {\n\t    id: string;\n\t    unit: string;\n\t    slots: string;\n\t    minAmount: string;\n\t    maxAmount: string;\n\t    createdAt: string;\n\t    callbackUrl: string;\n\t    internalId: string;\n\t    description: string;\n", "    expiresAt: string;\n\t    confirmedAt: string;\n\t    successMessage: string;\n\t    allowedSlots: string | null;\n\t    status: string;\n\t    fee: string;\n\t    invoice: {\n\t      request: string;\n\t      uri: string;\n\t    }\n", "  }\n\t  message: string;\n\t}\n"]}
{"filename": "src/types/withdrawal.ts", "chunked_list": ["export interface WithdrawalRequestOptionsType {\n\t  amount: string;\n\t  expiresIn: number;\n\t  description: string;\n\t  internalId: string;\n\t  callbackUrl: string;\n\t}\n\texport interface GetWithdrawalRequestDataResponseType {\n\t  data: {\n\t    id: string;\n", "    unit: string;\n\t    amount: string;\n\t    createdAt: string;\n\t    callbackUrl: string;\n\t    internalId: string;\n\t    description: string;\n\t    expiresAt: string;\n\t    confirmedAt: string;\n\t    status: string;\n\t    invoice: {\n", "      request: string;\n\t      uri: string;\n\t      fastRequest: string;\n\t      fastUri: string;\n\t    }\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n\texport interface CreateWithdrawalRequestDataResponseType {\n", "  data: {\n\t    id: string;\n\t    unit: string;\n\t    amount: string;\n\t    createdAt: string;\n\t    callbackUrl: string;\n\t    internalId: string;\n\t    description: string;\n\t    expiresAt: string;\n\t    confirmedAt: string;\n", "    status: string;\n\t    fee: string;\n\t    invoice: {\n\t      request: string;\n\t      uri: string;\n\t      fastRequest: string;\n\t      fastUri: string;\n\t    }\n\t  }\n\t  message: string;\n", "  success: boolean;\n\t}\n"]}
{"filename": "src/types/misc.ts", "chunked_list": ["export interface BTCUSDDataResponseType {\n\t  data: {\n\t    btcUsdPrice: string;\n\t    btcUsdTimestamp: string;\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n\texport interface SupportedRegionDataResponseType {\n\t  data: {\n", "    ipAddress: string;\n\t    isSupported: boolean;\n\t    ipCountry: string;\n\t    ipRegion: string;\n\t  }\n\t  success: boolean;\n\t}\n\texport interface ProdIPSDataResponseType {\n\t  data: {\n\t    ips: [string];\n", "  }\n\t  success: boolean;\n\t}"]}
{"filename": "src/types/index.ts", "chunked_list": ["export * from './charges';\n\texport * from './gamertag';\n\texport * from './index';\n\texport * from './internal-transfers';\n\texport * from './keysend';\n\texport * from './lightning';\n\texport * from './misc';\n\texport * from './payments';\n\texport * from './static-charges';\n\texport * from './wallet';\n", "export * from './withdrawal';\n\texport * from './zbd-type';\n"]}
{"filename": "src/types/zbd-type.ts", "chunked_list": ["export interface ZBD {\n\t    apikey: string;\n\t    apiBaseUrl: string;\n\t    axiosInstance: any;\n\t}"]}
{"filename": "src/types/lightning.ts", "chunked_list": ["export interface ValidateLightningAddressDataResponseType {\n\t  data: {\n\t    valid: boolean;\n\t    metadata: {\n\t      minSendable: number;\n\t      maxSendable: number;\n\t      commentAllowed: number;\n\t      tag: string;\n\t      metadata: string;\n\t      callback: string;\n", "      payerData: {\n\t        name: {\n\t          mandatory: boolean;\n\t        },\n\t        identifier: {\n\t          mandatory: boolean;\n\t        }\n\t      },\n\t      disposable: boolean;\n\t    }\n", "  }\n\t  success: boolean;\n\t}\n\texport interface FetchChargeFromLightningAddressDataResponseType {\n\t  data: {\n\t    lnaddress: string;\n\t    amount: string;\n\t    invoice: {\n\t      uri: string;\n\t      request: string;\n", "    }\n\t  }\n\t  success: boolean;\n\t}\n\texport interface SendLightningAddressPaymentDataResponseType {\n\t  data: {\n\t    id: string;\n\t    fee: string;\n\t    unit: string;\n\t    amount: string;\n", "    invoice: string;\n\t    preimage: string | null;\n\t    walletId: string;\n\t    transactionId: string;\n\t    callbackUrl: string;\n\t    internalId: string;\n\t    comment: string;\n\t    processedAt: string;\n\t    createdAt: string;\n\t    status: string;\n", "  }\n\t  success: boolean;\n\t  message: string;\n\t}\n\texport interface SendLightningAddressPaymentOptionsType {\n\t  lnAddress: string;\n\t  amount: string;\n\t  comment: string;\n\t  callbackUrl: string;\n\t  internalId: string;\n", "}\n\texport interface CreateChargeFromLightningAddressOptionsType {\n\t  amount: string\n\t  lnaddress: string\n\t  lnAddress?: string\n\t  description: string\n\t}\n"]}
{"filename": "src/types/internal-transfers.ts", "chunked_list": ["export interface InternalTransferDataResponseType {\n\t  data: {\n\t    id: string;\n\t    senderWalletId: string;\n\t    receivedWalletId: string;\n\t    userId: string;\n\t    sendTxId: string;\n\t    receiveTxId: string;\n\t    status: string;\n\t    amount: string;\n", "    createdAt: string;\n\t    updatedAt: string;\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n\texport interface InternalTransferOptionsType {\n\t  amount: string;\n\t  receiverWalletId: string;\n\t}"]}
{"filename": "src/types/gamertag.ts", "chunked_list": ["export interface FetchUserIdByGamertagDataResponseType {\n\t  success: boolean;\n\t  data: {\n\t    id: string;\n\t  }\n\t}\n\texport interface FetchGamertagByUserIdDataResponseType {\n\t  success: boolean;\n\t  message: string;\n\t  data: {\n", "    gamertag: string;\n\t  }\n\t}\n\texport interface GamertagTransactionDataResponseType {\n\t  data: {\n\t    id: string;\n\t    receivedId: string;\n\t    amount: string;\n\t    fee: string;\n\t    unit: string;\n", "    comment: string;\n\t    status: string;\n\t    confirmedAt: string;\n\t    processedAt: string;\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n\texport interface SendGamertagPaymentDataResponseType {\n\t  data: {\n", "    receiverId: string;\n\t    transactionId: string;\n\t    amount: string;\n\t    comment: string;\n\t  }\n\t  success: boolean;\n\t  message: string;\n\t}\n\texport interface SendGamertagPaymentOptionsType {\n\t  gamertag: string;\n", "  amount: string;\n\t  description: string;\n\t}\n\texport interface FetchChargeFromGamertagDataResponseType {\n\t  data: {\n\t    unit: string;\n\t    status: string;\n\t    amount: string;\n\t    createdAt: string;\n\t    internalId: string;\n", "    callbackUrl: string;\n\t    description: string;\n\t    invoiceRequest: string;\n\t    invoiceExpiresAt: string;\n\t    invoiceDescriptionHash: string | null;\n\t  }\n\t  success: boolean;\n\t}\n\texport interface FetchChargeFromGamertagOptionsType {\n\t  amount: string;\n", "  gamertag: string;\n\t  description: string;\n\t  callbackUrl: string;\n\t  internalId: string;\n\t}\n"]}
{"filename": "src/types/charges.ts", "chunked_list": ["export interface ChargeOptionsType {\n\t  expiresIn: number;\n\t  amount: string;\n\t  description: string;\n\t  internalId: string;\n\t  callbackUrl: string;\n\t}\n\texport interface DecodeChargeOptionsType {\n\t  invoice: string;\n\t}\n", "export interface ChargeDataResponseType {\n\t  data: {\n\t    id: string;\n\t    unit: string;\n\t    amount: string;\n\t    createdAt: string;\n\t    callbackUrl: string;\n\t    internalId: string;\n\t    description: string;\n\t    expiresAt: string;\n", "    confirmedAt: string;\n\t    status: string;\n\t    invoice: {\n\t      request: string;\n\t      uri: string;\n\t    }\n\t  }\n\t  message: string;\n\t  success: boolean;\n\t}\n", "export interface DecodeChargeResponseType {\n\t  data: {\n\t    unit: string;\n\t    status: string;\n\t    amount: string;\n\t    createdAt: string;\n\t    internalId: string;\n\t    callbackUrl: string;\n\t    description: string;\n\t    invoiceRequest: string;\n", "    invoiceExpiresAt: string;\n\t    invoiceDescriptionHash: string | null;\n\t  }\n\t  success: boolean;\n\t}"]}
