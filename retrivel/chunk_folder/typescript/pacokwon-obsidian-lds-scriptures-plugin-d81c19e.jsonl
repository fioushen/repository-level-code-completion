{"filename": "src/main.ts", "chunked_list": ["import { Plugin } from \"obsidian\";\n\timport { BookOfMormonSettings, DEFAULT_SETTINGS } from \"./settings\";\n\timport { Suggester } from './suggestion/suggester';\n\timport { installTranslation } from \"./translation\";\n\timport { BookOfMormonSettingTab } from './ui/BookOfMormonSettingTab';\n\texport default class BookOfMormonPlugin extends Plugin {\n\t    settings: BookOfMormonSettings;\n\t    async onload() {\n\t        await this.loadSettings();\n\t        await installTranslation(this.manifest.id, this.settings.language);\n", "        this.addSettingTab(new BookOfMormonSettingTab(this.app, this));\n\t        this.registerEditorSuggest(new Suggester(this));\n\t    }\n\t    onunload() {}\n\t    async loadSettings() {\n\t        this.settings = Object.assign(\n\t            {},\n\t            DEFAULT_SETTINGS,\n\t            await this.loadData()\n\t        );\n", "    }\n\t    async saveSettings() {\n\t        await this.saveData(this.settings);\n\t        await installTranslation(this.manifest.id, this.settings.language);\n\t    }\n\t}\n"]}
{"filename": "src/types.ts", "chunked_list": ["export interface Verse {\n\t    volume_title: string;\n\t    volume_title_short: string;\n\t    book_title: string;\n\t    book_title_short: string;\n\t    chapter_number: number;\n\t    verse_number: number;\n\t    verse_title: string;\n\t    scripture_text: string;\n\t}\n", "export interface Chapter {\n\t    volume_title: string;\n\t    volume_title_short: string;\n\t    book_title: string;\n\t    book_title_short: string;\n\t    chapter_number: number;\n\t    verses: Verse[];\n\t}\n\texport interface Book {\n\t    volume_title: string;\n", "    volume_title_short: string;\n\t    book_title: string;\n\t    book_title_short: string;\n\t    chapters: Chapter[];\n\t}\n"]}
{"filename": "src/translation.ts", "chunked_list": ["import * as fs from \"fs\";\n\timport * as path from \"path\";\n\timport * as zlib from \"zlib\";\n\timport * as tar from \"tar\";\n\timport { mkdir } from \"fs/promises\";\n\timport { Readable } from \"stream\";\n\timport { requestUrl } from \"obsidian\";\n\timport envPaths from \"./env-paths\";\n\timport { AvailableLanguage } from \"./lang\";\n\texport async function installTranslation(pluginName: string, lang: AvailableLanguage) {\n", "    const paths = envPaths(pluginName);\n\t    const translationsDir = path.resolve(paths.config, \"translations\");\n\t    const filename = `${lang}.tar.gz`;\n\t    const langdir = path.resolve(translationsDir, lang);\n\t    if (!fs.existsSync(translationsDir))\n\t        await mkdir(translationsDir, { recursive: true });\n\t    if (fs.existsSync(langdir)) {\n\t        console.info(`Translation already exists on ${langdir}.`);\n\t        return;\n\t    }\n", "    const url = `https://raw.githubusercontent.com/pacokwon/lds-scripture-translations/build/${filename}`;\n\t    const response = await requestUrl(url);\n\t    const buffer = Buffer.from(response.arrayBuffer);\n\t    const readstream = Readable.from(buffer);\n\t    const gunzip = zlib.createGunzip();\n\t    const extract = tar.x({\n\t        C: translationsDir,\n\t    });\n\t    readstream.pipe(gunzip).pipe(extract);\n\t    await new Promise<void>((resolve, _reject) => {\n", "        extract.on(\"end\", resolve);\n\t    });\n\t}\n"]}
{"filename": "src/metadata.ts", "chunked_list": ["import { AvailableLanguage } from \"./lang\";\n\timport envPaths from \"./env-paths\";\n\texport function getScripturesPath(pluginName: string, lang: AvailableLanguage): string {\n\t    const paths = envPaths(pluginName);\n\t    return `${paths.config}/translations/${lang}`;\n\t}\n"]}
{"filename": "src/lang.ts", "chunked_list": ["export const LANGUAGE_MAPPING: Record<AvailableLanguage, string> = {\n\t    // orm: \"Afaan Oromoo\",\n\t    // afr: \"Afrikaans\",\n\t    // ase: \"American Sign Language (ASL)\",\n\t    // apw: \"Apache\",\n\t    // asf: \"Auslan\",\n\t    // aym: \"Aymar Aru\",\n\t    // ind: \"Bahasa Indonesia\",\n\t    // msa: \"Bahasa Melayu\",\n\t    // bam: \"Bambara\",\n", "    // tzo: \"Bats'i k'op\",\n\t    // bik: \"Bikol\",\n\t    // bis: \"Bislama\",\n\t    // cak: \"Cakchiquel\",\n\t    // cat: \"Català\",\n\t    // ceb: \"Cebuano\",\n\t    // ces: \"Česky\",\n\t    // cha: \"Chamoru\",\n\t    // nya: \"Chichewa\",\n\t    // cym: \"Cymraeg\",\n", "    // dan: \"Dansk\",\n\t    deu: \"Deutsch\",\n\t    // nav: \"Diné bizaad\",\n\t    // cuk: \"Dulegaya\",\n\t    // yor: \"Èdè Yorùbá\",\n\t    // est: \"Eesti\",\n\t    // efi: \"Efik\",\n\t    // guz: \"EkeGusii\",\n\t    eng: \"English\",\n\t    spa: \"Español\",\n", "    // eus: \"Euskera\",\n\t    // ton: \"Faka-tonga\",\n\t    // fat: \"Fante\",\n\t    // hif: \"Fiji Hindi\",\n\t    // chk: \"Fosun Chuuk\",\n\t    // fon: \"Fɔngbè\",\n\t    // fra: \"Français\",\n\t    // smo: \"Gagana Samoa\",\n\t    // tvl: \"gana Tuvalu\",\n\t    // grn: \"Guaraní (Avañe'ẽ)\",\n", "    // hil: \"Hiligaynon\",\n\t    // hmo: \"Hiri Motu\",\n\t    // hmn: \"Hmoob\",\n\t    // hrv: \"Hrvatski\",\n\t    // haw: \"ʻŌlelo Hawaiʻi\",\n\t    // sto: \"I^ethka (Yethka)\",\n\t    // ibo: \"Igbo\",\n\t    // ilo: \"Ilokano\",\n\t    // nbl: \"isiNdebele\",\n\t    // xho: \"isiXhosa\",\n", "    // zul: \"isiZulu\",\n\t    // isl: \"Íslenska\",\n\t    // ita: \"Italiano\",\n\t    // kos: \"Kahs Kosrae\",\n\t    // mah: \"Kajin Majōl\",\n\t    // qvi: \"Kichwa\",\n\t    // kam: \"Kikamba\",\n\t    // kin: \"Kinyarwanda\",\n\t    // gil: \"Kiribati\",\n\t    // swa: \"Kiswahili\",\n", "    // niu: \"ko e vagahau Niuē\",\n\t    // hat: \"Kreyòl Ayisyen\",\n\t    // lav: \"Latviešu\",\n\t    // lit: \"Lietuvių\",\n\t    // lin: \"Lingála\",\n\t    // yua: \"maayaʼ tʼàan\",\n\t    // hun: \"Magyar\",\n\t    // pon: \"Mahsen en Pohnpei\",\n\t    // mlg: \"Malagasy\",\n\t    // mlt: \"Malti\",\n", "    // mam: \"Mam\",\n\t    // rar: \"Māori Kuki Airani\",\n\t    // nld: \"Nederlands\",\n\t    // bla: \"Nitsi’powahsin\",\n\t    // cag: \"Nivacle\",\n\t    // nor: \"Norsk\",\n\t    // pau: \"Palauan\",\n\t    // pam: \"Pampango\",\n\t    // pag: \"Pangasinan\",\n\t    // pap: \"Papiamento\",\n", "    // pol: \"Polski\",\n\t    // por: \"Português (Brasil)\",\n\t    // ept: \"Português (Portugal)\",\n\t    // kek: \"Q'eqchi'\",\n\t    // quh: \"Quechua-Bolivia\",\n\t    // quc: \"Quiché\",\n\t    // tah: \"Reo Tahiti\",\n\t    // ron: \"Română\",\n\t    // nso: \"sePêdi\",\n\t    // tsn: \"Setswana\",\n", "    // sna: \"Shona\",\n\t    // alb: \"Shqip\",\n\t    // ssw: \"siSwati\",\n\t    // slk: \"Slovenčina\",\n\t    // slv: \"Slovenščina\",\n\t    // sot: \"South Sotho\",\n\t    // fin: \"Suomi\",\n\t    // swe: \"Svenska\",\n\t    // tgl: \"Tagalog\",\n\t    // mri: \"Te Reo Māori\",\n", "    // yap: \"Thin Nu Wa'ab\",\n\t    // vie: \"Tiếng Việt\",\n\t    // tpi: \"Tok Pisin\",\n\t    // lua: \"Tshiluba\",\n\t    // tur: \"Türkçe\",\n\t    // twi: \"Twi\",\n\t    // fij: \"Vosa vakaviti\",\n\t    // war: \"Waray\",\n\t    // quz: \"Yunkay Quechua\",\n\t    // ell: \"Ελληνικά\",\n", "    // bul: \"Български\",\n\t    // kaz: \"Қазақ\",\n\t    // mkd: \"Македонски\",\n\t    // mon: \"Монгол\",\n\t    // rus: \"Русский\",\n\t    // srp: \"Српски\",\n\t    // ukr: \"Українська\",\n\t    // kat: \"ქართული\",\n\t    // hyw: \"Արեւմտահայերէն\",\n\t    // hye: \"Հայերեն\",\n", "    // urd: \"اردو\",\n\t    // ara: \"العربية\",\n\t    // pes: \"فارسی\",\n\t    // amh: \"አማርኛ\",\n\t    // nep: \"नेपाली\",\n\t    // hin: \"हिन्दी, हिंदी\",\n\t    // ben: \"বাংলা\",\n\t    // tam: \"தமிழ்\",\n\t    // tel: \"తెలుగు\",\n\t    // kan: \"ಕನ್ನಡ\",\n", "    // sin: \"සිංහල\",\n\t    // tha: \"ภาษาไทย\",\n\t    // lao: \"ພາສາລາວ\",\n\t    // ksw: \"ကညီလံာ်ခီၣ်ထံ\",\n\t    // mya: \"ဗမာစာ\",\n\t    // khm: \"ភាសាខ្មែរ\",\n\t    kor: \"한국어\",\n\t    jpn: \"日本語\",\n\t    // zhs: \"简体中文 - 普通话\",\n\t    // zho: \"繁體中文 - 國語\",\n", "    // yue: \"繁體中文 - 廣東話\",\n\t} as const;\n\texport const AVAILABLE_LANGUAGES = [\n\t    // \"orm\",\n\t    // \"afr\",\n\t    // \"ase\",\n\t    // \"apw\",\n\t    // \"asf\",\n\t    // \"aym\",\n\t    // \"ind\",\n", "    // \"msa\",\n\t    // \"bam\",\n\t    // \"tzo\",\n\t    // \"bik\",\n\t    // \"bis\",\n\t    // \"cak\",\n\t    // \"cat\",\n\t    // \"ceb\",\n\t    // \"ces\",\n\t    // \"cha\",\n", "    // \"nya\",\n\t    // \"cym\",\n\t    // \"dan\",\n\t    \"deu\",\n\t    // \"nav\",\n\t    // \"cuk\",\n\t    // \"yor\",\n\t    // \"est\",\n\t    // \"efi\",\n\t    // \"guz\",\n", "    \"eng\",\n\t    \"spa\",\n\t    // \"eus\",\n\t    // \"ton\",\n\t    // \"fat\",\n\t    // \"hif\",\n\t    // \"chk\",\n\t    // \"fon\",\n\t    // \"fra\",\n\t    // \"smo\",\n", "    // \"tvl\",\n\t    // \"grn\",\n\t    // \"hil\",\n\t    // \"hmo\",\n\t    // \"hmn\",\n\t    // \"hrv\",\n\t    // \"haw\",\n\t    // \"sto\",\n\t    // \"ibo\",\n\t    // \"ilo\",\n", "    // \"nbl\",\n\t    // \"xho\",\n\t    // \"zul\",\n\t    // \"isl\",\n\t    // \"ita\",\n\t    // \"kos\",\n\t    // \"mah\",\n\t    // \"qvi\",\n\t    // \"kam\",\n\t    // \"kin\",\n", "    // \"gil\",\n\t    // \"swa\",\n\t    // \"niu\",\n\t    // \"hat\",\n\t    // \"lav\",\n\t    // \"lit\",\n\t    // \"lin\",\n\t    // \"yua\",\n\t    // \"hun\",\n\t    // \"pon\",\n", "    // \"mlg\",\n\t    // \"mlt\",\n\t    // \"mam\",\n\t    // \"rar\",\n\t    // \"nld\",\n\t    // \"bla\",\n\t    // \"cag\",\n\t    // \"nor\",\n\t    // \"pau\",\n\t    // \"pam\",\n", "    // \"pag\",\n\t    // \"pap\",\n\t    // \"pol\",\n\t    // \"por\",\n\t    // \"ept\",\n\t    // \"kek\",\n\t    // \"quh\",\n\t    // \"quc\",\n\t    // \"tah\",\n\t    // \"ron\",\n", "    // \"nso\",\n\t    // \"tsn\",\n\t    // \"sna\",\n\t    // \"alb\",\n\t    // \"ssw\",\n\t    // \"slk\",\n\t    // \"slv\",\n\t    // \"sot\",\n\t    // \"fin\",\n\t    // \"swe\",\n", "    // \"tgl\",\n\t    // \"mri\",\n\t    // \"yap\",\n\t    // \"vie\",\n\t    // \"tpi\",\n\t    // \"lua\",\n\t    // \"tur\",\n\t    // \"twi\",\n\t    // \"fij\",\n\t    // \"war\",\n", "    // \"quz\",\n\t    // \"ell\",\n\t    // \"bul\",\n\t    // \"kaz\",\n\t    // \"mkd\",\n\t    // \"mon\",\n\t    // \"rus\",\n\t    // \"srp\",\n\t    // \"ukr\",\n\t    // \"kat\",\n", "    // \"hyw\",\n\t    // \"hye\",\n\t    // \"urd\",\n\t    // \"ara\",\n\t    // \"pes\",\n\t    // \"amh\",\n\t    // \"nep\",\n\t    // \"hin\",\n\t    // \"ben\",\n\t    // \"tam\",\n", "    // \"tel\",\n\t    // \"kan\",\n\t    // \"sin\",\n\t    // \"tha\",\n\t    // \"lao\",\n\t    // \"ksw\",\n\t    // \"mya\",\n\t    // \"khm\",\n\t    \"kor\",\n\t    \"jpn\",\n", "    // \"zhs\",\n\t    // \"zho\",\n\t    // \"yue\",\n\t] as const;\n\texport type AvailableLanguage = typeof AVAILABLE_LANGUAGES[number];\n"]}
{"filename": "src/env-paths.ts", "chunked_list": ["// NOTE: this file is from https://github.com/sindresorhus/env-paths/blob/f1729272888f45f6584e74dc4d0af3aecba9e7e8/index.js\n\t//       it is brought to this file because it originally uses \"node:*\" imports\n\timport * as path from \"path\";\n\timport * as os from \"os\";\n\timport * as process from \"process\";\n\tconst homedir = os.homedir();\n\tconst tmpdir = os.tmpdir();\n\tconst { env } = process;\n\tconst macos = (name: string) => {\n\t    const library = path.join(homedir, \"Library\");\n", "    return {\n\t        data: path.join(library, \"Application Support\", name),\n\t        config: path.join(library, \"Preferences\", name),\n\t        cache: path.join(library, \"Caches\", name),\n\t        log: path.join(library, \"Logs\", name),\n\t        temp: path.join(tmpdir, name),\n\t    };\n\t};\n\tconst windows = (name: string) => {\n\t    const appData = env.APPDATA || path.join(homedir, \"AppData\", \"Roaming\");\n", "    const localAppData =\n\t        env.LOCALAPPDATA || path.join(homedir, \"AppData\", \"Local\");\n\t    return {\n\t        // Data/config/cache/log are invented by me as Windows isn't opinionated about this\n\t        data: path.join(localAppData, name, \"Data\"),\n\t        config: path.join(appData, name, \"Config\"),\n\t        cache: path.join(localAppData, name, \"Cache\"),\n\t        log: path.join(localAppData, name, \"Log\"),\n\t        temp: path.join(tmpdir, name),\n\t    };\n", "};\n\t// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\tconst linux = (name: string) => {\n\t    const username = path.basename(homedir);\n\t    return {\n\t        data: path.join(\n\t            env.XDG_DATA_HOME || path.join(homedir, \".local\", \"share\"),\n\t            name\n\t        ),\n\t        config: path.join(\n", "            env.XDG_CONFIG_HOME || path.join(homedir, \".config\"),\n\t            name\n\t        ),\n\t        cache: path.join(\n\t            env.XDG_CACHE_HOME || path.join(homedir, \".cache\"),\n\t            name\n\t        ),\n\t        // https://wiki.debian.org/XDGBaseDirectorySpecification#state\n\t        log: path.join(\n\t            env.XDG_STATE_HOME || path.join(homedir, \".local\", \"state\"),\n", "            name\n\t        ),\n\t        temp: path.join(tmpdir, username, name),\n\t    };\n\t};\n\texport default function envPaths(name: string) {\n\t    if (typeof name !== \"string\") {\n\t        throw new TypeError(`Expected a string, got ${typeof name}`);\n\t    }\n\t    if (process.platform === \"darwin\") {\n", "        return macos(name);\n\t    }\n\t    if (process.platform === \"win32\") {\n\t        return windows(name);\n\t    }\n\t    return linux(name);\n\t}\n"]}
{"filename": "src/settings.ts", "chunked_list": ["import { AvailableLanguage } from \"./lang\";\n\texport interface BookOfMormonSettings {\n\t    language: AvailableLanguage;\n\t}\n\texport const DEFAULT_SETTINGS: BookOfMormonSettings = {\n\t    language: \"eng\",\n\t};\n"]}
{"filename": "src/suggestion/suggester.ts", "chunked_list": ["import {\n\t    Editor,\n\t    EditorPosition,\n\t    EditorSuggest,\n\t    EditorSuggestContext,\n\t    EditorSuggestTriggerInfo,\n\t    TFile,\n\t} from \"obsidian\";\n\timport BookOfMormonPlugin from \"src/main\";\n\timport { VerseSuggestion } from \"./VerseSuggestion\";\n", "import * as fs from \"fs/promises\";\n\timport { getScripturesPath } from \"src/metadata\";\n\tconst SHORT_REG = /\\+([123])*[A-z ]{3,}\\d{1,3}:\\d{1,3}(-\\d{1,3})*/;\n\tconst FULL_REG = /\\+([123]*[A-z ]{3,}) (\\d{1,3}):(\\d{1,3}(?:-\\d{1,3})*)/i;\n\texport class Suggester extends EditorSuggest<VerseSuggestion> {\n\t    constructor(public plugin: BookOfMormonPlugin) {\n\t        super(plugin.app);\n\t    }\n\t    onTrigger(\n\t        cursor: EditorPosition,\n", "        editor: Editor,\n\t        _file: TFile | null\n\t    ): EditorSuggestTriggerInfo | null {\n\t        const currentContent = editor\n\t            .getLine(cursor.line)\n\t            .substring(0, cursor.ch);\n\t        const match = currentContent.match(SHORT_REG)?.first() ?? \"\";\n\t        if (!match) return null;\n\t        return {\n\t            start: {\n", "                line: cursor.line,\n\t                ch: currentContent.lastIndexOf(match),\n\t            },\n\t            end: cursor,\n\t            query: match,\n\t        };\n\t    }\n\t    async getSuggestions(\n\t        context: EditorSuggestContext\n\t    ): Promise<VerseSuggestion[]> {\n", "        const { language } = this.plugin.settings;\n\t        const scripturePath = getScripturesPath(this.plugin.manifest.id, language);\n\t        const { query } = context;\n\t        const fullMatch = query.match(FULL_REG);\n\t        if (fullMatch === null)\n\t            return [];\n\t        const book = fullMatch[1];\n\t        const chapter = Number(fullMatch[2]);\n\t        const { start, end } = this.parseRange(fullMatch[3]);\n\t        if (end !== null && start > end)\n", "            return [];\n\t        // bail out if there is no matching book\n\t        const filenames = await fs.readdir(scripturePath);\n\t        const candidate = filenames.find(name => name.startsWith(book));\n\t        if (!candidate)\n\t            return [];\n\t        const suggestion = new VerseSuggestion(this.plugin.manifest.id, book, chapter, start, end, language);\n\t        await suggestion.loadVerse();\n\t        return [suggestion];\n\t    }\n", "    renderSuggestion(suggestion: VerseSuggestion, el: HTMLElement): void {\n\t        suggestion.render(el);\n\t    }\n\t    selectSuggestion(\n\t        suggestion: VerseSuggestion,\n\t        _evt: MouseEvent | KeyboardEvent\n\t    ): void {\n\t        if (!this.context)\n\t            return;\n\t        this.context.editor.replaceRange(\n", "            suggestion.getReplacement(),\n\t            this.context.start,\n\t            this.context.end\n\t        )\n\t    }\n\t    parseRange(range: string): { start: number, end: number | null } {\n\t        const splitted = range.split(\"-\");\n\t        if (splitted.length === 1)\n\t            return { start: Number(splitted[0]), end: null };\n\t        return {\n", "            start: Number(splitted[0]),\n\t            end: Number(splitted[1]),\n\t        };\n\t    }\n\t}\n"]}
{"filename": "src/suggestion/VerseSuggestion.ts", "chunked_list": ["import * as fs from \"fs/promises\";\n\timport { getScripturesPath } from \"../metadata\";\n\timport { AvailableLanguage } from \"../lang\";\n\timport { Book, Verse } from \"../types\";\n\texport class VerseSuggestion {\n\t    public text: string;\n\t    public previewText: string;\n\t    public verses: Verse[];\n\t    constructor(\n\t        public pluginName: string,\n", "        public book: string,\n\t        public chapter: number,\n\t        public verseStart: number,\n\t        public verseEnd: number | null,\n\t        public lang: AvailableLanguage\n\t    ) {}\n\t    public getReplacement(): string {\n\t        const url = this.getUrl();\n\t        const headerFront = `${this.book} ${this.chapter}:`;\n\t        const range =\n", "            this.verseEnd === null\n\t                ? `${this.verseStart}`\n\t                : `${this.verseStart}-${this.verseEnd}`;\n\t        const head = `> [!Mormon] [${headerFront}${range}](${url})`;\n\t        return head + \"\\n\" + this.text + \"\\n\";\n\t    }\n\t    private getUrl(): string {\n\t        const { volume_title_short, book_title_short, chapter_number } =\n\t            this.verses[0];\n\t        const { lang } = this;\n", "        const start = `p${this.verseStart}`;\n\t        const range = this.verseEnd === null ? start : `${start}-p${this.verseEnd}`;\n\t        return `https://www.churchofjesuschrist.org/study/scriptures/${volume_title_short}/${book_title_short}/${chapter_number}?lang=${lang}&id=${range}#${start}`;\n\t    }\n\t    private async fetchVerses(): Promise<Verse[]> {\n\t        const fileContent = await fs.readFile(\n\t            `${getScripturesPath(this.pluginName, this.lang)}/${this.book}.json`\n\t        );\n\t        const book: Book = JSON.parse(fileContent.toString());\n\t        const chapter = book.chapters[this.chapter - 1];\n", "        if (this.verseEnd === null)\n\t            return [chapter.verses[this.verseStart - 1]];\n\t        return chapter.verses.slice(this.verseStart - 1, this.verseEnd);\n\t    }\n\t    private toText(verses: Verse[]): string {\n\t        return (\n\t            `> <ol start=\"${verses[0].verse_number}\">` +\n\t            `${verses\n\t                .map(({ scripture_text }) => `<li>${scripture_text}</li>`)\n\t                .join(\" \")}` +\n", "            \"</ol>\"\n\t        );\n\t    }\n\t    private toPreviewText(verses: Verse[]): string {\n\t        return verses\n\t            .map(\n\t                ({ verse_number, scripture_text }) =>\n\t                    `${verse_number}. ${scripture_text}`\n\t            )\n\t            .join(\"\\n\");\n", "    }\n\t    public async loadVerse(): Promise<void> {\n\t        const verses = await this.fetchVerses();\n\t        this.verses = verses;\n\t        this.text = this.toText(verses);\n\t        this.previewText = this.toPreviewText(verses);\n\t    }\n\t    public render(el: HTMLElement): void {\n\t        const outer = el.createDiv({ cls: \"obr-suggester-container\" });\n\t        outer.createDiv({ cls: \"obr-shortcode\" }).setText(this.previewText);\n", "    }\n\t}\n"]}
{"filename": "src/ui/BookOfMormonSettingTab.ts", "chunked_list": ["import { App, Notice, PluginSettingTab, Setting } from \"obsidian\";\n\timport BookOfMormonPlugin from \"../main\";\n\timport { AVAILABLE_LANGUAGES, LANGUAGE_MAPPING, AvailableLanguage } from \"../lang\";\n\texport class BookOfMormonSettingTab extends PluginSettingTab {\n\t    constructor(app: App, public plugin: BookOfMormonPlugin) {\n\t        super(app, plugin);\n\t    }\n\t    setupLanguageOption(containerEl: HTMLElement) {\n\t        new Setting(containerEl)\n\t            .setName(\"Scripture Language\")\n", "            .setDesc(\"Preferred scripture language\")\n\t            .addDropdown((dropdown) => {\n\t                AVAILABLE_LANGUAGES.forEach((lang) => {\n\t                    dropdown.addOption(lang, LANGUAGE_MAPPING[lang]);\n\t                });\n\t                dropdown\n\t                    .setValue(this.plugin.settings.language)\n\t                    .onChange(async (value: AvailableLanguage) => {\n\t                        this.plugin.settings.language = value;\n\t                        await this.plugin.saveSettings();\n", "                        new Notice(\"LDS Scriptures Reference Settings Updated\");\n\t                    });\n\t            });\n\t    }\n\t    display() {\n\t        const { containerEl } = this;\n\t        containerEl.empty();\n\t        containerEl.createEl(\"h2\", { text: \"Settings\" });\n\t        this.setupLanguageOption(containerEl);\n\t        containerEl.createEl(\"h2\", { text: \"About\" });\n", "        containerEl.createSpan({}, (span) => {\n\t            span.innerHTML = `<a href=\"https://github.com/pacokwon/obsidian-lds-scriptures-plugin\">Github</a>`;\n\t        });\n\t    }\n\t}\n"]}
